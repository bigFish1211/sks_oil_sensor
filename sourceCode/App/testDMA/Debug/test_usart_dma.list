
test_usart_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003514  08003514  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800351c  0800351c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000020  08003544  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003544  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9bd  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c94  00000000  00000000  0002ba05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  0002df60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014dcf  00000000  00000000  0002e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b19f  00000000  00000000  00043547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a8b  00000000  00000000  0004e6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e3c  00000000  00000000  000d31c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000020 	.word	0x20000020
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003474 	.word	0x08003474

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000024 	.word	0x20000024
 8000100:	08003474 	.word	0x08003474

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fa1c 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f820 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f8e8 	bl	80007fc <MX_GPIO_Init>
  MX_DMA_Init();
 800062c:	f000 f8c8 	bl	80007c0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000630:	f000 f878 	bl	8000724 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, Rx_data, 20);
 8000634:	4909      	ldr	r1, [pc, #36]	; (800065c <main+0x40>)
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <main+0x44>)
 8000638:	2214      	movs	r2, #20
 800063a:	0018      	movs	r0, r3
 800063c:	f001 fec8 	bl	80023d0 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 8000640:	2301      	movs	r3, #1
 8000642:	425b      	negs	r3, r3
 8000644:	4907      	ldr	r1, [pc, #28]	; (8000664 <main+0x48>)
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <main+0x44>)
 8000648:	2212      	movs	r2, #18
 800064a:	f001 fe25 	bl	8002298 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800064e:	23fa      	movs	r3, #250	; 0xfa
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fa88 	bl	8000b68 <HAL_Delay>
		HAL_UART_Transmit(&huart1, test, sizeof(test), HAL_MAX_DELAY);
 8000658:	e7f2      	b.n	8000640 <main+0x24>
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	2000003c 	.word	0x2000003c
 8000660:	20000050 	.word	0x20000050
 8000664:	20000000 	.word	0x20000000

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b093      	sub	sp, #76	; 0x4c
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	2410      	movs	r4, #16
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2338      	movs	r3, #56	; 0x38
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f002 fef3 	bl	8003464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067e:	003b      	movs	r3, r7
 8000680:	0018      	movs	r0, r3
 8000682:	2310      	movs	r3, #16
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f002 feec 	bl	8003464 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 ff21 	bl	80014d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2202      	movs	r2, #2
 800069a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	0052      	lsls	r2, r2, #1
 80006a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006a4:	0021      	movs	r1, r4
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2240      	movs	r2, #64	; 0x40
 80006b0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2202      	movs	r2, #2
 80006bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2208      	movs	r2, #8
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0292      	lsls	r2, r2, #10
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0492      	lsls	r2, r2, #18
 80006d8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0592      	lsls	r2, r2, #22
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 ff43 	bl	8001570 <HAL_RCC_OscConfig>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006ee:	f000 f8a7 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	003b      	movs	r3, r7
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2202      	movs	r2, #2
 80006fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070a:	003b      	movs	r3, r7
 800070c:	2102      	movs	r1, #2
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fa48 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000718:	f000 f892 	bl	8000840 <Error_Handler>
  }
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b013      	add	sp, #76	; 0x4c
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <MX_USART1_UART_Init+0x98>)
 800072c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072e:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000730:	22e1      	movs	r2, #225	; 0xe1
 8000732:	0252      	lsls	r2, r2, #9
 8000734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fd3c 	bl	80021ec <HAL_UART_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f862 	bl	8000840 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 800077e:	2100      	movs	r1, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f002 fd6b 	bl	800325c <HAL_UARTEx_SetTxFifoThreshold>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800078a:	f000 f859 	bl	8000840 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 8000790:	2100      	movs	r1, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f002 fda2 	bl	80032dc <HAL_UARTEx_SetRxFifoThreshold>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800079c:	f000 f850 	bl	8000840 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MX_USART1_UART_Init+0x94>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 fd20 	bl	80031e8 <HAL_UARTEx_DisableFifoMode>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007ac:	f000 f848 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	20000050 	.word	0x20000050
 80007bc:	40013800 	.word	0x40013800

080007c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_DMA_Init+0x38>)
 80007c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_DMA_Init+0x38>)
 80007cc:	2101      	movs	r1, #1
 80007ce:	430a      	orrs	r2, r1
 80007d0:	639a      	str	r2, [r3, #56]	; 0x38
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_DMA_Init+0x38>)
 80007d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007d6:	2201      	movs	r2, #1
 80007d8:	4013      	ands	r3, r2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2009      	movs	r0, #9
 80007e4:	f000 fa90 	bl	8000d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e8:	2009      	movs	r0, #9
 80007ea:	f000 faa2 	bl	8000d32 <HAL_NVIC_EnableIRQ>

}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40021000 	.word	0x40021000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_GPIO_Init+0x40>)
 8000804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_GPIO_Init+0x40>)
 8000808:	2120      	movs	r1, #32
 800080a:	430a      	orrs	r2, r1
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_GPIO_Init+0x40>)
 8000810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000812:	2220      	movs	r2, #32
 8000814:	4013      	ands	r3, r2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_GPIO_Init+0x40>)
 800081c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_GPIO_Init+0x40>)
 8000820:	2101      	movs	r1, #1
 8000822:	430a      	orrs	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <MX_GPIO_Init+0x40>)
 8000828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800082a:	2201      	movs	r2, #1
 800082c:	4013      	ands	r3, r2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	b002      	add	sp, #8
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40021000 	.word	0x40021000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x44>)
 8000854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_MspInit+0x44>)
 8000858:	2101      	movs	r1, #1
 800085a:	430a      	orrs	r2, r1
 800085c:	641a      	str	r2, [r3, #64]	; 0x40
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_MspInit+0x44>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	2201      	movs	r2, #1
 8000864:	4013      	ands	r3, r2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x44>)
 800086c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_MspInit+0x44>)
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	0549      	lsls	r1, r1, #21
 8000874:	430a      	orrs	r2, r1
 8000876:	63da      	str	r2, [r3, #60]	; 0x3c
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_MspInit+0x44>)
 800087a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	055b      	lsls	r3, r3, #21
 8000880:	4013      	ands	r3, r2
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b095      	sub	sp, #84	; 0x54
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	233c      	movs	r3, #60	; 0x3c
 800089e:	18fb      	adds	r3, r7, r3
 80008a0:	0018      	movs	r0, r3
 80008a2:	2314      	movs	r3, #20
 80008a4:	001a      	movs	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	f002 fddc 	bl	8003464 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ac:	2414      	movs	r4, #20
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	0018      	movs	r0, r3
 80008b2:	2328      	movs	r3, #40	; 0x28
 80008b4:	001a      	movs	r2, r3
 80008b6:	2100      	movs	r1, #0
 80008b8:	f002 fdd4 	bl	8003464 <memset>
  if(huart->Instance==USART1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a38      	ldr	r2, [pc, #224]	; (80009a4 <HAL_UART_MspInit+0x110>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d169      	bne.n	800099a <HAL_UART_MspInit+0x106>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 fb0f 	bl	8001ef8 <HAL_RCCEx_PeriphCLKConfig>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008de:	f7ff ffaf 	bl	8000840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e2:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <HAL_UART_MspInit+0x114>)
 80008e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008e6:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <HAL_UART_MspInit+0x114>)
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	01c9      	lsls	r1, r1, #7
 80008ec:	430a      	orrs	r2, r1
 80008ee:	641a      	str	r2, [r3, #64]	; 0x40
 80008f0:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <HAL_UART_MspInit+0x114>)
 80008f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	01db      	lsls	r3, r3, #7
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <HAL_UART_MspInit+0x114>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000902:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <HAL_UART_MspInit+0x114>)
 8000904:	2101      	movs	r1, #1
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
 800090a:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <HAL_UART_MspInit+0x114>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090e:	2201      	movs	r2, #1
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000916:	213c      	movs	r1, #60	; 0x3c
 8000918:	187b      	adds	r3, r7, r1
 800091a:	22c0      	movs	r2, #192	; 0xc0
 800091c:	00d2      	lsls	r2, r2, #3
 800091e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2202      	movs	r2, #2
 8000924:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2201      	movs	r2, #1
 8000936:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	187a      	adds	r2, r7, r1
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fc65 	bl	8001210 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_UART_MspInit+0x118>)
 8000948:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <HAL_UART_MspInit+0x11c>)
 800094a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <HAL_UART_MspInit+0x118>)
 800094e:	2232      	movs	r2, #50	; 0x32
 8000950:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_UART_MspInit+0x118>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_UART_MspInit+0x118>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <HAL_UART_MspInit+0x118>)
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_UART_MspInit+0x118>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_UART_MspInit+0x118>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_UART_MspInit+0x118>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_UART_MspInit+0x118>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_UART_MspInit+0x118>)
 800097e:	0018      	movs	r0, r3
 8000980:	f000 f9f4 	bl	8000d6c <HAL_DMA_Init>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000988:	f7ff ff5a 	bl	8000840 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <HAL_UART_MspInit+0x118>)
 8000992:	505a      	str	r2, [r3, r1]
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_UART_MspInit+0x118>)
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b015      	add	sp, #84	; 0x54
 80009a0:	bd90      	pop	{r4, r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40013800 	.word	0x40013800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	200000e4 	.word	0x200000e4
 80009b0:	40020008 	.word	0x40020008

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d8:	f000 f8aa 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <DMA1_Channel1_IRQHandler+0x14>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 face 	bl	8000f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	200000e4 	.word	0x200000e4

080009fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a0c:	f7ff fff6 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	; (8000a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <LoopForever+0xe>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	; (8000a54 <LoopForever+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a36:	f002 fcf1 	bl	800341c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a3a:	f7ff fdef 	bl	800061c <main>

08000a3e <LoopForever>:

LoopForever:
  b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   r0, =_estack
 8000a40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a4c:	08003524 	.word	0x08003524
  ldr r2, =_sbss
 8000a50:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a54:	20000144 	.word	0x20000144

08000a58 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_Init+0x3c>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Init+0x3c>)
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	0049      	lsls	r1, r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a76:	2003      	movs	r0, #3
 8000a78:	f000 f810 	bl	8000a9c <HAL_InitTick>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e001      	b.n	8000a8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fee0 	bl	800084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	781b      	ldrb	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <HAL_InitTick+0x88>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d02b      	beq.n	8000b0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_InitTick+0x8c>)
 8000ab6:	681c      	ldr	r4, [r3, #0]
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <HAL_InitTick+0x88>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	0019      	movs	r1, r3
 8000abe:	23fa      	movs	r3, #250	; 0xfa
 8000ac0:	0098      	lsls	r0, r3, #2
 8000ac2:	f7ff fb1f 	bl	8000104 <__udivsi3>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0020      	movs	r0, r4
 8000acc:	f7ff fb1a 	bl	8000104 <__udivsi3>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f93d 	bl	8000d52 <HAL_SYSTICK_Config>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d112      	bne.n	8000b02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d80a      	bhi.n	8000af8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	425b      	negs	r3, r3
 8000ae8:	2200      	movs	r2, #0
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 f90c 	bl	8000d08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_InitTick+0x90>)
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e00d      	b.n	8000b14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000af8:	230f      	movs	r3, #15
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e008      	b.n	8000b14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b02:	230f      	movs	r3, #15
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	e003      	b.n	8000b14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b14:	230f      	movs	r3, #15
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	781b      	ldrb	r3, [r3, #0]
}
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b005      	add	sp, #20
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	2000001c 	.word	0x2000001c
 8000b28:	20000014 	.word	0x20000014
 8000b2c:	20000018 	.word	0x20000018

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	001a      	movs	r2, r3
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x20>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	18d2      	adds	r2, r2, r3
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_IncTick+0x20>)
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	2000001c 	.word	0x2000001c
 8000b50:	20000140 	.word	0x20000140

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <HAL_GetTick+0x10>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	20000140 	.word	0x20000140

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff fff0 	bl	8000b54 <HAL_GetTick>
 8000b74:	0003      	movs	r3, r0
 8000b76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	d005      	beq.n	8000b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_Delay+0x44>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	001a      	movs	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	189b      	adds	r3, r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	f7ff ffe0 	bl	8000b54 <HAL_GetTick>
 8000b94:	0002      	movs	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8f7      	bhi.n	8000b90 <HAL_Delay+0x28>
  {
  }
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	2000001c 	.word	0x2000001c

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	0002      	movs	r2, r0
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc2:	d809      	bhi.n	8000bd8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	001a      	movs	r2, r3
 8000bca:	231f      	movs	r3, #31
 8000bcc:	401a      	ands	r2, r3
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_EnableIRQ+0x30>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4091      	lsls	r1, r2
 8000bd4:	000a      	movs	r2, r1
 8000bd6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	e000e100 	.word	0xe000e100

08000be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	0002      	movs	r2, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf8:	d828      	bhi.n	8000c4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfa:	4a2f      	ldr	r2, [pc, #188]	; (8000cb8 <__NVIC_SetPriority+0xd4>)
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b25b      	sxtb	r3, r3
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	33c0      	adds	r3, #192	; 0xc0
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	589b      	ldr	r3, [r3, r2]
 8000c0a:	1dfa      	adds	r2, r7, #7
 8000c0c:	7812      	ldrb	r2, [r2, #0]
 8000c0e:	0011      	movs	r1, r2
 8000c10:	2203      	movs	r2, #3
 8000c12:	400a      	ands	r2, r1
 8000c14:	00d2      	lsls	r2, r2, #3
 8000c16:	21ff      	movs	r1, #255	; 0xff
 8000c18:	4091      	lsls	r1, r2
 8000c1a:	000a      	movs	r2, r1
 8000c1c:	43d2      	mvns	r2, r2
 8000c1e:	401a      	ands	r2, r3
 8000c20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	019b      	lsls	r3, r3, #6
 8000c26:	22ff      	movs	r2, #255	; 0xff
 8000c28:	401a      	ands	r2, r3
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	2303      	movs	r3, #3
 8000c32:	4003      	ands	r3, r0
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c38:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <__NVIC_SetPriority+0xd4>)
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	430a      	orrs	r2, r1
 8000c44:	33c0      	adds	r3, #192	; 0xc0
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c4a:	e031      	b.n	8000cb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <__NVIC_SetPriority+0xd8>)
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	0019      	movs	r1, r3
 8000c54:	230f      	movs	r3, #15
 8000c56:	400b      	ands	r3, r1
 8000c58:	3b08      	subs	r3, #8
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3306      	adds	r3, #6
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	18d3      	adds	r3, r2, r3
 8000c62:	3304      	adds	r3, #4
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	1dfa      	adds	r2, r7, #7
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	400a      	ands	r2, r1
 8000c70:	00d2      	lsls	r2, r2, #3
 8000c72:	21ff      	movs	r1, #255	; 0xff
 8000c74:	4091      	lsls	r1, r2
 8000c76:	000a      	movs	r2, r1
 8000c78:	43d2      	mvns	r2, r2
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	019b      	lsls	r3, r3, #6
 8000c82:	22ff      	movs	r2, #255	; 0xff
 8000c84:	401a      	ands	r2, r3
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	4003      	ands	r3, r0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <__NVIC_SetPriority+0xd8>)
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	001c      	movs	r4, r3
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	4023      	ands	r3, r4
 8000ca0:	3b08      	subs	r3, #8
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	3306      	adds	r3, #6
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	18c3      	adds	r3, r0, r3
 8000cac:	3304      	adds	r3, #4
 8000cae:	601a      	str	r2, [r3, #0]
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b003      	add	sp, #12
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	1e5a      	subs	r2, r3, #1
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	045b      	lsls	r3, r3, #17
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d301      	bcc.n	8000cd8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e010      	b.n	8000cfa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <SysTick_Config+0x44>)
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	3a01      	subs	r2, #1
 8000cde:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	2103      	movs	r1, #3
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff ff7c 	bl	8000be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <SysTick_Config+0x44>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <SysTick_Config+0x44>)
 8000cf4:	2207      	movs	r2, #7
 8000cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	e000e010 	.word	0xe000e010

08000d08 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
 8000d12:	210f      	movs	r1, #15
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	1c02      	adds	r2, r0, #0
 8000d18:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b25b      	sxtb	r3, r3
 8000d22:	0011      	movs	r1, r2
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff ff5d 	bl	8000be4 <__NVIC_SetPriority>
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b004      	add	sp, #16
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	0002      	movs	r2, r0
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff ff33 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff ffaf 	bl	8000cc0 <SysTick_Config>
 8000d62:	0003      	movs	r3, r0
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b002      	add	sp, #8
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e077      	b.n	8000e6e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a3d      	ldr	r2, [pc, #244]	; (8000e78 <HAL_DMA_Init+0x10c>)
 8000d84:	4694      	mov	ip, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	2114      	movs	r1, #20
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff f9ba 	bl	8000104 <__udivsi3>
 8000d90:	0003      	movs	r3, r0
 8000d92:	009a      	lsls	r2, r3, #2
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2225      	movs	r2, #37	; 0x25
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4934      	ldr	r1, [pc, #208]	; (8000e7c <HAL_DMA_Init+0x110>)
 8000dac:	400a      	ands	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6819      	ldr	r1, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	0018      	movs	r0, r3
 8000dea:	f000 f9c1 	bl	8001170 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	01db      	lsls	r3, r3, #7
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d102      	bne.n	8000e00 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e08:	213f      	movs	r1, #63	; 0x3f
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000e16:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d011      	beq.n	8000e44 <HAL_DMA_Init+0xd8>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d80d      	bhi.n	8000e44 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 f9cc 	bl	80011c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	e008      	b.n	8000e56 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2225      	movs	r2, #37	; 0x25
 8000e60:	2101      	movs	r1, #1
 8000e62:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2224      	movs	r2, #36	; 0x24
 8000e68:	2100      	movs	r1, #0
 8000e6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	bffdfff8 	.word	0xbffdfff8
 8000e7c:	ffff800f 	.word	0xffff800f

08000e80 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e8e:	2317      	movs	r3, #23
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2224      	movs	r2, #36	; 0x24
 8000e9a:	5c9b      	ldrb	r3, [r3, r2]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d101      	bne.n	8000ea4 <HAL_DMA_Start_IT+0x24>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e06f      	b.n	8000f84 <HAL_DMA_Start_IT+0x104>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2224      	movs	r2, #36	; 0x24
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2225      	movs	r2, #37	; 0x25
 8000eb0:	5c9b      	ldrb	r3, [r3, r2]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d157      	bne.n	8000f68 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2225      	movs	r2, #37	; 0x25
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	438a      	bics	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f000 f907 	bl	80010f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d008      	beq.n	8000efc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	210e      	movs	r1, #14
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e00f      	b.n	8000f1c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2104      	movs	r1, #4
 8000f08:	438a      	bics	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	210a      	movs	r1, #10
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	025b      	lsls	r3, r3, #9
 8000f26:	4013      	ands	r3, r2
 8000f28:	d008      	beq.n	8000f3c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	0049      	lsls	r1, r1, #1
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d008      	beq.n	8000f56 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	0049      	lsls	r1, r1, #1
 8000f52:	430a      	orrs	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2101      	movs	r1, #1
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e00a      	b.n	8000f7e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2224      	movs	r2, #36	; 0x24
 8000f72:	2100      	movs	r1, #0
 8000f74:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000f76:	2317      	movs	r3, #23
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000f7e:	2317      	movs	r3, #23
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	781b      	ldrb	r3, [r3, #0]
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b006      	add	sp, #24
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000f94:	4b55      	ldr	r3, [pc, #340]	; (80010ec <HAL_DMA_IRQHandler+0x160>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	221c      	movs	r2, #28
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2204      	movs	r2, #4
 8000fac:	409a      	lsls	r2, r3
 8000fae:	0013      	movs	r3, r2
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d027      	beq.n	8001006 <HAL_DMA_IRQHandler+0x7a>
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2204      	movs	r2, #4
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d023      	beq.n	8001006 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d107      	bne.n	8000fda <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	438a      	bics	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000fda:	4b44      	ldr	r3, [pc, #272]	; (80010ec <HAL_DMA_IRQHandler+0x160>)
 8000fdc:	6859      	ldr	r1, [r3, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	221c      	movs	r2, #28
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	4b40      	ldr	r3, [pc, #256]	; (80010ec <HAL_DMA_IRQHandler+0x160>)
 8000fec:	430a      	orrs	r2, r1
 8000fee:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d100      	bne.n	8000ffa <HAL_DMA_IRQHandler+0x6e>
 8000ff8:	e073      	b.n	80010e2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	0010      	movs	r0, r2
 8001002:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001004:	e06d      	b.n	80010e2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	221c      	movs	r2, #28
 800100c:	4013      	ands	r3, r2
 800100e:	2202      	movs	r2, #2
 8001010:	409a      	lsls	r2, r3
 8001012:	0013      	movs	r3, r2
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	4013      	ands	r3, r2
 8001018:	d02e      	beq.n	8001078 <HAL_DMA_IRQHandler+0xec>
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	2202      	movs	r2, #2
 800101e:	4013      	ands	r3, r2
 8001020:	d02a      	beq.n	8001078 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2220      	movs	r2, #32
 800102a:	4013      	ands	r3, r2
 800102c:	d10b      	bne.n	8001046 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	210a      	movs	r1, #10
 800103a:	438a      	bics	r2, r1
 800103c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2225      	movs	r2, #37	; 0x25
 8001042:	2101      	movs	r1, #1
 8001044:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001046:	4b29      	ldr	r3, [pc, #164]	; (80010ec <HAL_DMA_IRQHandler+0x160>)
 8001048:	6859      	ldr	r1, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	221c      	movs	r2, #28
 8001050:	4013      	ands	r3, r2
 8001052:	2202      	movs	r2, #2
 8001054:	409a      	lsls	r2, r3
 8001056:	4b25      	ldr	r3, [pc, #148]	; (80010ec <HAL_DMA_IRQHandler+0x160>)
 8001058:	430a      	orrs	r2, r1
 800105a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001068:	2b00      	cmp	r3, #0
 800106a:	d03a      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	0010      	movs	r0, r2
 8001074:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001076:	e034      	b.n	80010e2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	221c      	movs	r2, #28
 800107e:	4013      	ands	r3, r2
 8001080:	2208      	movs	r2, #8
 8001082:	409a      	lsls	r2, r3
 8001084:	0013      	movs	r3, r2
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4013      	ands	r3, r2
 800108a:	d02b      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x158>
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2208      	movs	r2, #8
 8001090:	4013      	ands	r3, r2
 8001092:	d027      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	210e      	movs	r1, #14
 80010a0:	438a      	bics	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_DMA_IRQHandler+0x160>)
 80010a6:	6859      	ldr	r1, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	221c      	movs	r2, #28
 80010ae:	4013      	ands	r3, r2
 80010b0:	2201      	movs	r2, #1
 80010b2:	409a      	lsls	r2, r3
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_DMA_IRQHandler+0x160>)
 80010b6:	430a      	orrs	r2, r1
 80010b8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2225      	movs	r2, #37	; 0x25
 80010c4:	2101      	movs	r1, #1
 80010c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2224      	movs	r2, #36	; 0x24
 80010cc:	2100      	movs	r1, #0
 80010ce:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	0010      	movs	r0, r2
 80010e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46c0      	nop			; (mov r8, r8)
}
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b004      	add	sp, #16
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40020000 	.word	0x40020000

080010f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001106:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800110c:	2b00      	cmp	r3, #0
 800110e:	d004      	beq.n	800111a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001118:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <DMA_SetConfig+0x7c>)
 800111c:	6859      	ldr	r1, [r3, #4]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	221c      	movs	r2, #28
 8001124:	4013      	ands	r3, r2
 8001126:	2201      	movs	r2, #1
 8001128:	409a      	lsls	r2, r3
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <DMA_SetConfig+0x7c>)
 800112c:	430a      	orrs	r2, r1
 800112e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b10      	cmp	r3, #16
 800113e:	d108      	bne.n	8001152 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001150:	e007      	b.n	8001162 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	60da      	str	r2, [r3, #12]
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b004      	add	sp, #16
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	40020000 	.word	0x40020000

08001170 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001180:	4694      	mov	ip, r2
 8001182:	4463      	add	r3, ip
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	001a      	movs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	001a      	movs	r2, r3
 8001192:	23ff      	movs	r3, #255	; 0xff
 8001194:	4013      	ands	r3, r2
 8001196:	3b08      	subs	r3, #8
 8001198:	2114      	movs	r1, #20
 800119a:	0018      	movs	r0, r3
 800119c:	f7fe ffb2 	bl	8000104 <__udivsi3>
 80011a0:	0003      	movs	r3, r0
 80011a2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80011a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	221f      	movs	r2, #31
 80011ae:	4013      	ands	r3, r2
 80011b0:	2201      	movs	r2, #1
 80011b2:	409a      	lsls	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b004      	add	sp, #16
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	10008200 	.word	0x10008200
 80011c4:	40020880 	.word	0x40020880

080011c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	223f      	movs	r2, #63	; 0x3f
 80011d6:	4013      	ands	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80011de:	4694      	mov	ip, r2
 80011e0:	4463      	add	r3, ip
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	001a      	movs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	4013      	ands	r3, r2
 80011f8:	2201      	movs	r2, #1
 80011fa:	409a      	lsls	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b004      	add	sp, #16
 8001206:	bd80      	pop	{r7, pc}
 8001208:	1000823f 	.word	0x1000823f
 800120c:	40020940 	.word	0x40020940

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121e:	e147      	b.n	80014b0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4091      	lsls	r1, r2
 800122a:	000a      	movs	r2, r1
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d100      	bne.n	8001238 <HAL_GPIO_Init+0x28>
 8001236:	e138      	b.n	80014aa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	2b01      	cmp	r3, #1
 8001242:	d005      	beq.n	8001250 <HAL_GPIO_Init+0x40>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2203      	movs	r2, #3
 800124a:	4013      	ands	r3, r2
 800124c:	2b02      	cmp	r3, #2
 800124e:	d130      	bne.n	80012b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	409a      	lsls	r2, r3
 800125e:	0013      	movs	r3, r2
 8001260:	43da      	mvns	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001286:	2201      	movs	r2, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	43da      	mvns	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	2201      	movs	r2, #1
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2203      	movs	r2, #3
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d017      	beq.n	80012ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2203      	movs	r2, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d123      	bne.n	8001342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	58d3      	ldr	r3, [r2, r3]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2207      	movs	r2, #7
 800130c:	4013      	ands	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2107      	movs	r1, #7
 8001326:	400b      	ands	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	6939      	ldr	r1, [r7, #16]
 8001340:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	43da      	mvns	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2203      	movs	r2, #3
 8001360:	401a      	ands	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	23c0      	movs	r3, #192	; 0xc0
 800137c:	029b      	lsls	r3, r3, #10
 800137e:	4013      	ands	r3, r2
 8001380:	d100      	bne.n	8001384 <HAL_GPIO_Init+0x174>
 8001382:	e092      	b.n	80014aa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001384:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3318      	adds	r3, #24
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	589b      	ldr	r3, [r3, r2]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	220f      	movs	r2, #15
 800139c:	409a      	lsls	r2, r3
 800139e:	0013      	movs	r3, r2
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	23a0      	movs	r3, #160	; 0xa0
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0x1ca>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a45      	ldr	r2, [pc, #276]	; (80014cc <HAL_GPIO_Init+0x2bc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00d      	beq.n	80013d6 <HAL_GPIO_Init+0x1c6>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a44      	ldr	r2, [pc, #272]	; (80014d0 <HAL_GPIO_Init+0x2c0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d007      	beq.n	80013d2 <HAL_GPIO_Init+0x1c2>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a43      	ldr	r2, [pc, #268]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_GPIO_Init+0x1be>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013ce:	2305      	movs	r3, #5
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x1cc>
 80013da:	2300      	movs	r3, #0
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	2103      	movs	r1, #3
 80013e0:	400a      	ands	r2, r1
 80013e2:	00d2      	lsls	r2, r2, #3
 80013e4:	4093      	lsls	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013ec:	4936      	ldr	r1, [pc, #216]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3318      	adds	r3, #24
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	035b      	lsls	r3, r3, #13
 8001412:	4013      	ands	r3, r2
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	039b      	lsls	r3, r3, #14
 800143c:	4013      	ands	r3, r2
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800144e:	4a1e      	ldr	r2, [pc, #120]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001450:	2384      	movs	r3, #132	; 0x84
 8001452:	58d3      	ldr	r3, [r2, r3]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43da      	mvns	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	029b      	lsls	r3, r3, #10
 8001468:	4013      	ands	r3, r2
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001474:	4914      	ldr	r1, [pc, #80]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 8001476:	2284      	movs	r2, #132	; 0x84
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	58d3      	ldr	r3, [r2, r3]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	4013      	ands	r3, r2
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a2:	4909      	ldr	r1, [pc, #36]	; (80014c8 <HAL_GPIO_Init+0x2b8>)
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3301      	adds	r3, #1
 80014ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	40da      	lsrs	r2, r3
 80014b8:	1e13      	subs	r3, r2, #0
 80014ba:	d000      	beq.n	80014be <HAL_GPIO_Init+0x2ae>
 80014bc:	e6b0      	b.n	8001220 <HAL_GPIO_Init+0x10>
  }
}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b006      	add	sp, #24
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021800 	.word	0x40021800
 80014cc:	50000400 	.word	0x50000400
 80014d0:	50000800 	.word	0x50000800
 80014d4:	50000c00 	.word	0x50000c00

080014d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a19      	ldr	r2, [pc, #100]	; (800154c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d11f      	bne.n	800153c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	0013      	movs	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	189b      	adds	r3, r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4912      	ldr	r1, [pc, #72]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800150a:	0018      	movs	r0, r3
 800150c:	f7fe fdfa 	bl	8000104 <__udivsi3>
 8001510:	0003      	movs	r3, r0
 8001512:	3301      	adds	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001516:	e008      	b.n	800152a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3b01      	subs	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e001      	b.n	800152a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e009      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	401a      	ands	r2, r3
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	429a      	cmp	r2, r3
 800153a:	d0ed      	beq.n	8001518 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	0018      	movs	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	b004      	add	sp, #16
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	40007000 	.word	0x40007000
 800154c:	fffff9ff 	.word	0xfffff9ff
 8001550:	20000014 	.word	0x20000014
 8001554:	000f4240 	.word	0x000f4240

08001558 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <LL_RCC_GetAPB1Prescaler+0x14>)
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	23e0      	movs	r3, #224	; 0xe0
 8001562:	01db      	lsls	r3, r3, #7
 8001564:	4013      	ands	r3, r2
}
 8001566:	0018      	movs	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e2fe      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x1e>
 800158c:	e07c      	b.n	8001688 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158e:	4bc3      	ldr	r3, [pc, #780]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2238      	movs	r2, #56	; 0x38
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001598:	4bc0      	ldr	r3, [pc, #768]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2203      	movs	r2, #3
 800159e:	4013      	ands	r3, r2
 80015a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b10      	cmp	r3, #16
 80015a6:	d102      	bne.n	80015ae <HAL_RCC_OscConfig+0x3e>
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	d002      	beq.n	80015b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d10b      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4bb9      	ldr	r3, [pc, #740]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	d062      	beq.n	8001686 <HAL_RCC_OscConfig+0x116>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d15e      	bne.n	8001686 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e2d9      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	025b      	lsls	r3, r3, #9
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_OscConfig+0x78>
 80015d8:	4bb0      	ldr	r3, [pc, #704]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4baf      	ldr	r3, [pc, #700]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	0249      	lsls	r1, r1, #9
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e020      	b.n	800162a <HAL_RCC_OscConfig+0xba>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	23a0      	movs	r3, #160	; 0xa0
 80015ee:	02db      	lsls	r3, r3, #11
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d10e      	bne.n	8001612 <HAL_RCC_OscConfig+0xa2>
 80015f4:	4ba9      	ldr	r3, [pc, #676]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4ba8      	ldr	r3, [pc, #672]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80015fa:	2180      	movs	r1, #128	; 0x80
 80015fc:	02c9      	lsls	r1, r1, #11
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	4ba6      	ldr	r3, [pc, #664]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4ba5      	ldr	r3, [pc, #660]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0249      	lsls	r1, r1, #9
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e00b      	b.n	800162a <HAL_RCC_OscConfig+0xba>
 8001612:	4ba2      	ldr	r3, [pc, #648]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4ba1      	ldr	r3, [pc, #644]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001618:	49a1      	ldr	r1, [pc, #644]	; (80018a0 <HAL_RCC_OscConfig+0x330>)
 800161a:	400a      	ands	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	4b9f      	ldr	r3, [pc, #636]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b9e      	ldr	r3, [pc, #632]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001624:	499f      	ldr	r1, [pc, #636]	; (80018a4 <HAL_RCC_OscConfig+0x334>)
 8001626:	400a      	ands	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d014      	beq.n	800165c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff fa8f 	bl	8000b54 <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fa8a 	bl	8000b54 <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e298      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	4b93      	ldr	r3, [pc, #588]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	029b      	lsls	r3, r3, #10
 8001656:	4013      	ands	r3, r2
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0xcc>
 800165a:	e015      	b.n	8001688 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fa7a 	bl	8000b54 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001666:	f7ff fa75 	bl	8000b54 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e283      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001678:	4b88      	ldr	r3, [pc, #544]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	029b      	lsls	r3, r3, #10
 8001680:	4013      	ands	r3, r2
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0xf6>
 8001684:	e000      	b.n	8001688 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001686:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2202      	movs	r2, #2
 800168e:	4013      	ands	r3, r2
 8001690:	d100      	bne.n	8001694 <HAL_RCC_OscConfig+0x124>
 8001692:	e099      	b.n	80017c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001694:	4b81      	ldr	r3, [pc, #516]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2238      	movs	r2, #56	; 0x38
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800169e:	4b7f      	ldr	r3, [pc, #508]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2203      	movs	r2, #3
 80016a4:	4013      	ands	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b10      	cmp	r3, #16
 80016ac:	d102      	bne.n	80016b4 <HAL_RCC_OscConfig+0x144>
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d002      	beq.n	80016ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d135      	bne.n	8001726 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ba:	4b78      	ldr	r3, [pc, #480]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4013      	ands	r3, r2
 80016c4:	d005      	beq.n	80016d2 <HAL_RCC_OscConfig+0x162>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e256      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d2:	4b72      	ldr	r3, [pc, #456]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a74      	ldr	r2, [pc, #464]	; (80018a8 <HAL_RCC_OscConfig+0x338>)
 80016d8:	4013      	ands	r3, r2
 80016da:	0019      	movs	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	021a      	lsls	r2, r3, #8
 80016e2:	4b6e      	ldr	r3, [pc, #440]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016e4:	430a      	orrs	r2, r1
 80016e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d112      	bne.n	8001714 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016ee:	4b6b      	ldr	r3, [pc, #428]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x33c>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	0019      	movs	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	4b67      	ldr	r3, [pc, #412]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001702:	4b66      	ldr	r3, [pc, #408]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0adb      	lsrs	r3, r3, #11
 8001708:	2207      	movs	r2, #7
 800170a:	4013      	ands	r3, r2
 800170c:	4a68      	ldr	r2, [pc, #416]	; (80018b0 <HAL_RCC_OscConfig+0x340>)
 800170e:	40da      	lsrs	r2, r3
 8001710:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <HAL_RCC_OscConfig+0x344>)
 8001712:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_RCC_OscConfig+0x348>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff f9bf 	bl	8000a9c <HAL_InitTick>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d051      	beq.n	80017c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e22c      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d030      	beq.n	8001790 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800172e:	4b5b      	ldr	r3, [pc, #364]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <HAL_RCC_OscConfig+0x33c>)
 8001734:	4013      	ands	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	4b57      	ldr	r3, [pc, #348]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001742:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b55      	ldr	r3, [pc, #340]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	0049      	lsls	r1, r1, #1
 800174c:	430a      	orrs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fa00 	bl	8000b54 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff f9fb 	bl	8000b54 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e209      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4013      	ands	r3, r2
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b48      	ldr	r3, [pc, #288]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a4a      	ldr	r2, [pc, #296]	; (80018a8 <HAL_RCC_OscConfig+0x338>)
 800177e:	4013      	ands	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	021a      	lsls	r2, r3, #8
 8001788:	4b44      	ldr	r3, [pc, #272]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800178a:	430a      	orrs	r2, r1
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	e01b      	b.n	80017c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001796:	4949      	ldr	r1, [pc, #292]	; (80018bc <HAL_RCC_OscConfig+0x34c>)
 8001798:	400a      	ands	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff f9da 	bl	8000b54 <HAL_GetTick>
 80017a0:	0003      	movs	r3, r0
 80017a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff f9d5 	bl	8000b54 <HAL_GetTick>
 80017aa:	0002      	movs	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1e3      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b8:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4013      	ands	r3, r2
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x236>
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2208      	movs	r2, #8
 80017ce:	4013      	ands	r3, r2
 80017d0:	d047      	beq.n	8001862 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2238      	movs	r2, #56	; 0x38
 80017d8:	4013      	ands	r3, r2
 80017da:	2b18      	cmp	r3, #24
 80017dc:	d10a      	bne.n	80017f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d03c      	beq.n	8001862 <HAL_RCC_OscConfig+0x2f2>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d138      	bne.n	8001862 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e1c5      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d019      	beq.n	8001830 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 80017fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001802:	2101      	movs	r1, #1
 8001804:	430a      	orrs	r2, r1
 8001806:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff f9a4 	bl	8000b54 <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001812:	f7ff f99f 	bl	8000b54 <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1ad      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001824:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d0f1      	beq.n	8001812 <HAL_RCC_OscConfig+0x2a2>
 800182e:	e018      	b.n	8001862 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001832:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001836:	2101      	movs	r1, #1
 8001838:	438a      	bics	r2, r1
 800183a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff f98a 	bl	8000b54 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff f985 	bl	8000b54 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e193      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 800185a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185c:	2202      	movs	r2, #2
 800185e:	4013      	ands	r3, r2
 8001860:	d1f1      	bne.n	8001846 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2204      	movs	r2, #4
 8001868:	4013      	ands	r3, r2
 800186a:	d100      	bne.n	800186e <HAL_RCC_OscConfig+0x2fe>
 800186c:	e0c6      	b.n	80019fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800186e:	231f      	movs	r3, #31
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2238      	movs	r2, #56	; 0x38
 800187c:	4013      	ands	r3, r2
 800187e:	2b20      	cmp	r3, #32
 8001880:	d11e      	bne.n	80018c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_RCC_OscConfig+0x32c>)
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d100      	bne.n	800188e <HAL_RCC_OscConfig+0x31e>
 800188c:	e0b6      	b.n	80019fc <HAL_RCC_OscConfig+0x48c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d000      	beq.n	8001898 <HAL_RCC_OscConfig+0x328>
 8001896:	e0b1      	b.n	80019fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e171      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
 800189c:	40021000 	.word	0x40021000
 80018a0:	fffeffff 	.word	0xfffeffff
 80018a4:	fffbffff 	.word	0xfffbffff
 80018a8:	ffff80ff 	.word	0xffff80ff
 80018ac:	ffffc7ff 	.word	0xffffc7ff
 80018b0:	00f42400 	.word	0x00f42400
 80018b4:	20000014 	.word	0x20000014
 80018b8:	20000018 	.word	0x20000018
 80018bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018c0:	4bb1      	ldr	r3, [pc, #708]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 80018c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	055b      	lsls	r3, r3, #21
 80018c8:	4013      	ands	r3, r2
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_OscConfig+0x360>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x362>
 80018d0:	2300      	movs	r3, #0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d011      	beq.n	80018fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4bac      	ldr	r3, [pc, #688]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 80018d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018da:	4bab      	ldr	r3, [pc, #684]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	0549      	lsls	r1, r1, #21
 80018e0:	430a      	orrs	r2, r1
 80018e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80018e4:	4ba8      	ldr	r3, [pc, #672]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 80018e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	055b      	lsls	r3, r3, #21
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80018f2:	231f      	movs	r3, #31
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018fa:	4ba4      	ldr	r3, [pc, #656]	; (8001b8c <HAL_RCC_OscConfig+0x61c>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4013      	ands	r3, r2
 8001904:	d11a      	bne.n	800193c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001906:	4ba1      	ldr	r3, [pc, #644]	; (8001b8c <HAL_RCC_OscConfig+0x61c>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4ba0      	ldr	r3, [pc, #640]	; (8001b8c <HAL_RCC_OscConfig+0x61c>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	0049      	lsls	r1, r1, #1
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001914:	f7ff f91e 	bl	8000b54 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191e:	f7ff f919 	bl	8000b54 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e127      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001930:	4b96      	ldr	r3, [pc, #600]	; (8001b8c <HAL_RCC_OscConfig+0x61c>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4013      	ands	r3, r2
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x3e2>
 8001944:	4b90      	ldr	r3, [pc, #576]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001946:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001948:	4b8f      	ldr	r3, [pc, #572]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 800194a:	2101      	movs	r1, #1
 800194c:	430a      	orrs	r2, r1
 800194e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001950:	e01c      	b.n	800198c <HAL_RCC_OscConfig+0x41c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b05      	cmp	r3, #5
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x404>
 800195a:	4b8b      	ldr	r3, [pc, #556]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 800195c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800195e:	4b8a      	ldr	r3, [pc, #552]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001960:	2104      	movs	r1, #4
 8001962:	430a      	orrs	r2, r1
 8001964:	65da      	str	r2, [r3, #92]	; 0x5c
 8001966:	4b88      	ldr	r3, [pc, #544]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001968:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800196a:	4b87      	ldr	r3, [pc, #540]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 800196c:	2101      	movs	r1, #1
 800196e:	430a      	orrs	r2, r1
 8001970:	65da      	str	r2, [r3, #92]	; 0x5c
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0x41c>
 8001974:	4b84      	ldr	r3, [pc, #528]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001976:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001978:	4b83      	ldr	r3, [pc, #524]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 800197a:	2101      	movs	r1, #1
 800197c:	438a      	bics	r2, r1
 800197e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001980:	4b81      	ldr	r3, [pc, #516]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001982:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001984:	4b80      	ldr	r3, [pc, #512]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001986:	2104      	movs	r1, #4
 8001988:	438a      	bics	r2, r1
 800198a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d014      	beq.n	80019be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff f8de 	bl	8000b54 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199c:	e009      	b.n	80019b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff f8d9 	bl	8000b54 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	4a79      	ldr	r2, [pc, #484]	; (8001b90 <HAL_RCC_OscConfig+0x620>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e0e6      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b2:	4b75      	ldr	r3, [pc, #468]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 80019b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x42e>
 80019bc:	e013      	b.n	80019e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff f8c9 	bl	8000b54 <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019c6:	e009      	b.n	80019dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff f8c4 	bl	8000b54 <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	4a6f      	ldr	r2, [pc, #444]	; (8001b90 <HAL_RCC_OscConfig+0x620>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0d1      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	2202      	movs	r2, #2
 80019e2:	4013      	ands	r3, r2
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80019e6:	231f      	movs	r3, #31
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019f0:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 80019f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f4:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 80019f6:	4967      	ldr	r1, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x624>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d100      	bne.n	8001a06 <HAL_RCC_OscConfig+0x496>
 8001a04:	e0bb      	b.n	8001b7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a06:	4b60      	ldr	r3, [pc, #384]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2238      	movs	r2, #56	; 0x38
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d100      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4a4>
 8001a12:	e07b      	b.n	8001b0c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d156      	bne.n	8001aca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1c:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b59      	ldr	r3, [pc, #356]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a22:	495d      	ldr	r1, [pc, #372]	; (8001b98 <HAL_RCC_OscConfig+0x628>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff f894 	bl	8000b54 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff f88f 	bl	8000b54 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e09d      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a44:	4b50      	ldr	r3, [pc, #320]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	049b      	lsls	r3, r3, #18
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a50:	4b4d      	ldr	r3, [pc, #308]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <HAL_RCC_OscConfig+0x62c>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1a      	ldr	r2, [r3, #32]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a84:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	0449      	lsls	r1, r1, #17
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a92:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001a98:	2180      	movs	r1, #128	; 0x80
 8001a9a:	0549      	lsls	r1, r1, #21
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f858 	bl	8000b54 <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff f853 	bl	8000b54 <HAL_GetTick>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e061      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abc:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	049b      	lsls	r3, r3, #18
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x53a>
 8001ac8:	e059      	b.n	8001b7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001ad0:	4931      	ldr	r1, [pc, #196]	; (8001b98 <HAL_RCC_OscConfig+0x628>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f83d 	bl	8000b54 <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f838 	bl	8000b54 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e046      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af2:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	049b      	lsls	r3, r3, #18
 8001afa:	4013      	ands	r3, r2
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001b04:	4926      	ldr	r1, [pc, #152]	; (8001ba0 <HAL_RCC_OscConfig+0x630>)
 8001b06:	400a      	ands	r2, r1
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	e038      	b.n	8001b7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e033      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_RCC_OscConfig+0x618>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2203      	movs	r2, #3
 8001b22:	401a      	ands	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d126      	bne.n	8001b7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2270      	movs	r2, #112	; 0x70
 8001b30:	401a      	ands	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d11f      	bne.n	8001b7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	23fe      	movs	r3, #254	; 0xfe
 8001b3e:	01db      	lsls	r3, r3, #7
 8001b40:	401a      	ands	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d116      	bne.n	8001b7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	23f8      	movs	r3, #248	; 0xf8
 8001b50:	039b      	lsls	r3, r3, #14
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d10e      	bne.n	8001b7a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	23e0      	movs	r3, #224	; 0xe0
 8001b60:	051b      	lsls	r3, r3, #20
 8001b62:	401a      	ands	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	0f5b      	lsrs	r3, r3, #29
 8001b70:	075a      	lsls	r2, r3, #29
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d001      	beq.n	8001b7e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	0018      	movs	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b008      	add	sp, #32
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	00001388 	.word	0x00001388
 8001b94:	efffffff 	.word	0xefffffff
 8001b98:	feffffff 	.word	0xfeffffff
 8001b9c:	11c1808c 	.word	0x11c1808c
 8001ba0:	eefefffc 	.word	0xeefefffc

08001ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0e9      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b76      	ldr	r3, [pc, #472]	; (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d91e      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b73      	ldr	r3, [pc, #460]	; (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2207      	movs	r2, #7
 8001bcc:	4393      	bics	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	4b70      	ldr	r3, [pc, #448]	; (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bd8:	f7fe ffbc 	bl	8000b54 <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be0:	e009      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be2:	f7fe ffb7 	bl	8000b54 <HAL_GetTick>
 8001be6:	0002      	movs	r2, r0
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	4a6a      	ldr	r2, [pc, #424]	; (8001d98 <HAL_RCC_ClockConfig+0x1f4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e0ca      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bf6:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1ee      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d015      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2204      	movs	r2, #4
 8001c14:	4013      	ands	r3, r2
 8001c16:	d006      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c18:	4b60      	ldr	r3, [pc, #384]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001c1e:	21e0      	movs	r1, #224	; 0xe0
 8001c20:	01c9      	lsls	r1, r1, #7
 8001c22:	430a      	orrs	r2, r1
 8001c24:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c26:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	4a5d      	ldr	r2, [pc, #372]	; (8001da0 <HAL_RCC_ClockConfig+0x1fc>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001c36:	430a      	orrs	r2, r1
 8001c38:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4013      	ands	r3, r2
 8001c42:	d057      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d107      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	029b      	lsls	r3, r3, #10
 8001c54:	4013      	ands	r3, r2
 8001c56:	d12b      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e097      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d107      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c64:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	049b      	lsls	r3, r3, #18
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d11f      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e08b      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4013      	ands	r3, r2
 8001c86:	d113      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e07f      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c94:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c98:	2202      	movs	r2, #2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d108      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e074      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca2:	4b3e      	ldr	r3, [pc, #248]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e06d      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	4393      	bics	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc4:	f7fe ff46 	bl	8000b54 <HAL_GetTick>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ccc:	e009      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cce:	f7fe ff41 	bl	8000b54 <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	4a2f      	ldr	r2, [pc, #188]	; (8001d98 <HAL_RCC_ClockConfig+0x1f4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e054      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2238      	movs	r2, #56	; 0x38
 8001ce8:	401a      	ands	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1ec      	bne.n	8001cce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d21e      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2207      	movs	r2, #7
 8001d08:	4393      	bics	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d14:	f7fe ff1e 	bl	8000b54 <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d1c:	e009      	b.n	8001d32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1e:	f7fe ff19 	bl	8000b54 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_RCC_ClockConfig+0x1f4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e02c      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2207      	movs	r2, #7
 8001d38:	4013      	ands	r3, r2
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d1ee      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2204      	movs	r2, #4
 8001d46:	4013      	ands	r3, r2
 8001d48:	d009      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <HAL_RCC_ClockConfig+0x200>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d5e:	f000 f829 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 8001d62:	0001      	movs	r1, r0
 8001d64:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_RCC_ClockConfig+0x1f8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_RCC_ClockConfig+0x204>)
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	58d3      	ldr	r3, [r2, r3]
 8001d74:	221f      	movs	r2, #31
 8001d76:	4013      	ands	r3, r2
 8001d78:	000a      	movs	r2, r1
 8001d7a:	40da      	lsrs	r2, r3
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_ClockConfig+0x208>)
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x20c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7fe fe89 	bl	8000a9c <HAL_InitTick>
 8001d8a:	0003      	movs	r3, r0
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b004      	add	sp, #16
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40022000 	.word	0x40022000
 8001d98:	00001388 	.word	0x00001388
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	fffff0ff 	.word	0xfffff0ff
 8001da4:	ffff8fff 	.word	0xffff8fff
 8001da8:	0800348c 	.word	0x0800348c
 8001dac:	20000014 	.word	0x20000014
 8001db0:	20000018 	.word	0x20000018

08001db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dba:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2238      	movs	r2, #56	; 0x38
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d10f      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0adb      	lsrs	r3, r3, #11
 8001dca:	2207      	movs	r2, #7
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2201      	movs	r2, #1
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	0013      	movs	r3, r2
 8001dd4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	4835      	ldr	r0, [pc, #212]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dda:	f7fe f993 	bl	8000104 <__udivsi3>
 8001dde:	0003      	movs	r3, r0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	e05d      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de4:	4b31      	ldr	r3, [pc, #196]	; (8001eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2238      	movs	r2, #56	; 0x38
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d102      	bne.n	8001df6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df0:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	e054      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df6:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2238      	movs	r2, #56	; 0x38
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d138      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e02:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2203      	movs	r2, #3
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	2207      	movs	r2, #7
 8001e14:	4013      	ands	r3, r2
 8001e16:	3301      	adds	r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d10d      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	4824      	ldr	r0, [pc, #144]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e24:	f7fe f96e 	bl	8000104 <__udivsi3>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	227f      	movs	r2, #127	; 0x7f
 8001e34:	4013      	ands	r3, r2
 8001e36:	434b      	muls	r3, r1
 8001e38:	617b      	str	r3, [r7, #20]
        break;
 8001e3a:	e00d      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	481c      	ldr	r0, [pc, #112]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e40:	f7fe f960 	bl	8000104 <__udivsi3>
 8001e44:	0003      	movs	r3, r0
 8001e46:	0019      	movs	r1, r3
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	227f      	movs	r2, #127	; 0x7f
 8001e50:	4013      	ands	r3, r2
 8001e52:	434b      	muls	r3, r1
 8001e54:	617b      	str	r3, [r7, #20]
        break;
 8001e56:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0f5b      	lsrs	r3, r3, #29
 8001e5e:	2207      	movs	r2, #7
 8001e60:	4013      	ands	r3, r2
 8001e62:	3301      	adds	r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	6978      	ldr	r0, [r7, #20]
 8001e6a:	f7fe f94b 	bl	8000104 <__udivsi3>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	e015      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2238      	movs	r2, #56	; 0x38
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d103      	bne.n	8001e88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2238      	movs	r2, #56	; 0x38
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b18      	cmp	r3, #24
 8001e92:	d103      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e94:	23fa      	movs	r3, #250	; 0xfa
 8001e96:	01db      	lsls	r3, r3, #7
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e001      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ea0:	693b      	ldr	r3, [r7, #16]
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b006      	add	sp, #24
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	00f42400 	.word	0x00f42400
 8001eb4:	007a1200 	.word	0x007a1200

08001eb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	20000014 	.word	0x20000014

08001ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ecc:	b5b0      	push	{r4, r5, r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ed0:	f7ff fff2 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001ed4:	0004      	movs	r4, r0
 8001ed6:	f7ff fb3f 	bl	8001558 <LL_RCC_GetAPB1Prescaler>
 8001eda:	0003      	movs	r3, r0
 8001edc:	0b1a      	lsrs	r2, r3, #12
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	58d3      	ldr	r3, [r2, r3]
 8001ee4:	221f      	movs	r2, #31
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	40dc      	lsrs	r4, r3
 8001eea:	0023      	movs	r3, r4
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	080034cc 	.word	0x080034cc

08001ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f00:	2313      	movs	r3, #19
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f08:	2312      	movs	r3, #18
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	029b      	lsls	r3, r3, #10
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f1c:	e0a3      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	2011      	movs	r0, #17
 8001f20:	183b      	adds	r3, r7, r0
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f26:	4ba5      	ldr	r3, [pc, #660]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	055b      	lsls	r3, r3, #21
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d110      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4ba2      	ldr	r3, [pc, #648]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f36:	4ba1      	ldr	r3, [pc, #644]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	0549      	lsls	r1, r1, #21
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f40:	4b9e      	ldr	r3, [pc, #632]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	055b      	lsls	r3, r3, #21
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4e:	183b      	adds	r3, r7, r0
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f54:	4b9a      	ldr	r3, [pc, #616]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b99      	ldr	r3, [pc, #612]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	0049      	lsls	r1, r1, #1
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f62:	f7fe fdf7 	bl	8000b54 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6c:	f7fe fdf2 	bl	8000b54 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d904      	bls.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f7a:	2313      	movs	r3, #19
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	2203      	movs	r2, #3
 8001f80:	701a      	strb	r2, [r3, #0]
        break;
 8001f82:	e005      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f84:	4b8e      	ldr	r3, [pc, #568]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d0ed      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001f90:	2313      	movs	r3, #19
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d154      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f9a:	4b88      	ldr	r3, [pc, #544]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d019      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d014      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fb6:	4b81      	ldr	r3, [pc, #516]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	4a82      	ldr	r2, [pc, #520]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fc0:	4b7e      	ldr	r3, [pc, #504]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fc4:	4b7d      	ldr	r3, [pc, #500]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fc6:	2180      	movs	r1, #128	; 0x80
 8001fc8:	0249      	lsls	r1, r1, #9
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fce:	4b7b      	ldr	r3, [pc, #492]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fd2:	4b7a      	ldr	r3, [pc, #488]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fd4:	497c      	ldr	r1, [pc, #496]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fda:	4b78      	ldr	r3, [pc, #480]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d016      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7fe fdb4 	bl	8000b54 <HAL_GetTick>
 8001fec:	0003      	movs	r3, r0
 8001fee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff0:	e00c      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7fe fdaf 	bl	8000b54 <HAL_GetTick>
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	4a73      	ldr	r2, [pc, #460]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d904      	bls.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002002:	2313      	movs	r3, #19
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2203      	movs	r2, #3
 8002008:	701a      	strb	r2, [r3, #0]
            break;
 800200a:	e004      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200c:	4b6b      	ldr	r3, [pc, #428]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	2202      	movs	r2, #2
 8002012:	4013      	ands	r3, r2
 8002014:	d0ed      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002016:	2313      	movs	r3, #19
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10a      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002020:	4b66      	ldr	r3, [pc, #408]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	4a67      	ldr	r2, [pc, #412]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002026:	4013      	ands	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800202e:	4b63      	ldr	r3, [pc, #396]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002030:	430a      	orrs	r2, r1
 8002032:	65da      	str	r2, [r3, #92]	; 0x5c
 8002034:	e00c      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002036:	2312      	movs	r3, #18
 8002038:	18fb      	adds	r3, r7, r3
 800203a:	2213      	movs	r2, #19
 800203c:	18ba      	adds	r2, r7, r2
 800203e:	7812      	ldrb	r2, [r2, #0]
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e005      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002044:	2312      	movs	r3, #18
 8002046:	18fb      	adds	r3, r7, r3
 8002048:	2213      	movs	r2, #19
 800204a:	18ba      	adds	r2, r7, r2
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002050:	2311      	movs	r3, #17
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d105      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b58      	ldr	r3, [pc, #352]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800205c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800205e:	4b57      	ldr	r3, [pc, #348]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002060:	495b      	ldr	r1, [pc, #364]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002062:	400a      	ands	r2, r1
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2201      	movs	r2, #1
 800206c:	4013      	ands	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002070:	4b52      	ldr	r3, [pc, #328]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	2203      	movs	r2, #3
 8002076:	4393      	bics	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4b4f      	ldr	r3, [pc, #316]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002080:	430a      	orrs	r2, r1
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2210      	movs	r2, #16
 800208a:	4013      	ands	r3, r2
 800208c:	d009      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800208e:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	4a50      	ldr	r2, [pc, #320]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002094:	4013      	ands	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	4b47      	ldr	r3, [pc, #284]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	d009      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	4a49      	ldr	r2, [pc, #292]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4013      	ands	r3, r2
 80020cc:	d009      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	4a42      	ldr	r2, [pc, #264]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020de:	430a      	orrs	r2, r1
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2220      	movs	r2, #32
 80020e8:	4013      	ands	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ec:	4b33      	ldr	r3, [pc, #204]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	4b30      	ldr	r3, [pc, #192]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020fc:	430a      	orrs	r2, r1
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	01db      	lsls	r3, r3, #7
 8002108:	4013      	ands	r3, r2
 800210a:	d015      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	0899      	lsrs	r1, r3, #2
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800211a:	430a      	orrs	r2, r1
 800211c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	05db      	lsls	r3, r3, #23
 8002126:	429a      	cmp	r2, r3
 8002128:	d106      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	0249      	lsls	r1, r1, #9
 8002134:	430a      	orrs	r2, r1
 8002136:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	039b      	lsls	r3, r3, #14
 8002140:	4013      	ands	r3, r2
 8002142:	d016      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800214a:	4013      	ands	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1a      	ldr	r2, [r3, #32]
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002154:	430a      	orrs	r2, r1
 8002156:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	03db      	lsls	r3, r3, #15
 8002160:	429a      	cmp	r2, r3
 8002162:	d106      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	0449      	lsls	r1, r1, #17
 800216e:	430a      	orrs	r2, r1
 8002170:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	4013      	ands	r3, r2
 800217c:	d016      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002182:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002184:	4013      	ands	r3, r2
 8002186:	0019      	movs	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800218e:	430a      	orrs	r2, r1
 8002190:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	01db      	lsls	r3, r3, #7
 800219a:	429a      	cmp	r2, r3
 800219c:	d106      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	0249      	lsls	r1, r1, #9
 80021a8:	430a      	orrs	r2, r1
 80021aa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80021ac:	2312      	movs	r3, #18
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	781b      	ldrb	r3, [r3, #0]
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b006      	add	sp, #24
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40007000 	.word	0x40007000
 80021c4:	fffffcff 	.word	0xfffffcff
 80021c8:	fffeffff 	.word	0xfffeffff
 80021cc:	00001388 	.word	0x00001388
 80021d0:	efffffff 	.word	0xefffffff
 80021d4:	fffff3ff 	.word	0xfffff3ff
 80021d8:	fff3ffff 	.word	0xfff3ffff
 80021dc:	ffcfffff 	.word	0xffcfffff
 80021e0:	ffffcfff 	.word	0xffffcfff
 80021e4:	ffbfffff 	.word	0xffbfffff
 80021e8:	ffff3fff 	.word	0xffff3fff

080021ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e046      	b.n	800228c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2288      	movs	r2, #136	; 0x88
 8002202:	589b      	ldr	r3, [r3, r2]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2284      	movs	r2, #132	; 0x84
 800220c:	2100      	movs	r1, #0
 800220e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0018      	movs	r0, r3
 8002214:	f7fe fb3e 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2288      	movs	r2, #136	; 0x88
 800221c:	2124      	movs	r1, #36	; 0x24
 800221e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2101      	movs	r1, #1
 800222c:	438a      	bics	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	0018      	movs	r0, r3
 8002234:	f000 f94e 	bl	80024d4 <UART_SetConfig>
 8002238:	0003      	movs	r3, r0
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e024      	b.n	800228c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	0018      	movs	r0, r3
 800224e:	f000 fbb9 	bl	80029c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	490d      	ldr	r1, [pc, #52]	; (8002294 <HAL_UART_Init+0xa8>)
 800225e:	400a      	ands	r2, r1
 8002260:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	212a      	movs	r1, #42	; 0x2a
 800226e:	438a      	bics	r2, r1
 8002270:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2101      	movs	r1, #1
 800227e:	430a      	orrs	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0018      	movs	r0, r3
 8002286:	f000 fc51 	bl	8002b2c <UART_CheckIdleState>
 800228a:	0003      	movs	r3, r0
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b002      	add	sp, #8
 8002292:	bd80      	pop	{r7, pc}
 8002294:	ffffb7ff 	.word	0xffffb7ff

08002298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	1dbb      	adds	r3, r7, #6
 80022a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2288      	movs	r2, #136	; 0x88
 80022ac:	589b      	ldr	r3, [r3, r2]
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	d000      	beq.n	80022b4 <HAL_UART_Transmit+0x1c>
 80022b2:	e088      	b.n	80023c6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_UART_Transmit+0x2a>
 80022ba:	1dbb      	adds	r3, r7, #6
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e080      	b.n	80023c8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	015b      	lsls	r3, r3, #5
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d109      	bne.n	80022e6 <HAL_UART_Transmit+0x4e>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2201      	movs	r2, #1
 80022de:	4013      	ands	r3, r2
 80022e0:	d001      	beq.n	80022e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e070      	b.n	80023c8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2290      	movs	r2, #144	; 0x90
 80022ea:	2100      	movs	r1, #0
 80022ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2288      	movs	r2, #136	; 0x88
 80022f2:	2121      	movs	r1, #33	; 0x21
 80022f4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022f6:	f7fe fc2d 	bl	8000b54 <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1dba      	adds	r2, r7, #6
 8002302:	2154      	movs	r1, #84	; 0x54
 8002304:	8812      	ldrh	r2, [r2, #0]
 8002306:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1dba      	adds	r2, r7, #6
 800230c:	2156      	movs	r1, #86	; 0x56
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	015b      	lsls	r3, r3, #5
 800231a:	429a      	cmp	r2, r3
 800231c:	d108      	bne.n	8002330 <HAL_UART_Transmit+0x98>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d104      	bne.n	8002330 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	e003      	b.n	8002338 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002338:	e02c      	b.n	8002394 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	0013      	movs	r3, r2
 8002344:	2200      	movs	r2, #0
 8002346:	2180      	movs	r1, #128	; 0x80
 8002348:	f000 fc3e 	bl	8002bc8 <UART_WaitOnFlagUntilTimeout>
 800234c:	1e03      	subs	r3, r0, #0
 800234e:	d001      	beq.n	8002354 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e039      	b.n	80023c8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	001a      	movs	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	05d2      	lsls	r2, r2, #23
 8002366:	0dd2      	lsrs	r2, r2, #23
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	3302      	adds	r3, #2
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	e007      	b.n	8002382 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	781a      	ldrb	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2256      	movs	r2, #86	; 0x56
 8002386:	5a9b      	ldrh	r3, [r3, r2]
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b299      	uxth	r1, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2256      	movs	r2, #86	; 0x56
 8002392:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2256      	movs	r2, #86	; 0x56
 8002398:	5a9b      	ldrh	r3, [r3, r2]
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1cc      	bne.n	800233a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	0013      	movs	r3, r2
 80023aa:	2200      	movs	r2, #0
 80023ac:	2140      	movs	r1, #64	; 0x40
 80023ae:	f000 fc0b 	bl	8002bc8 <UART_WaitOnFlagUntilTimeout>
 80023b2:	1e03      	subs	r3, r0, #0
 80023b4:	d001      	beq.n	80023ba <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e006      	b.n	80023c8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2288      	movs	r2, #136	; 0x88
 80023be:	2120      	movs	r1, #32
 80023c0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e000      	b.n	80023c8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80023c6:	2302      	movs	r3, #2
  }
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b008      	add	sp, #32
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	1dbb      	adds	r3, r7, #6
 80023dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	228c      	movs	r2, #140	; 0x8c
 80023e2:	589b      	ldr	r3, [r3, r2]
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d14a      	bne.n	800247e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_UART_Receive_DMA+0x26>
 80023ee:	1dbb      	adds	r3, r7, #6
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e042      	b.n	8002480 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	015b      	lsls	r3, r3, #5
 8002402:	429a      	cmp	r2, r3
 8002404:	d109      	bne.n	800241a <HAL_UART_Receive_DMA+0x4a>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2201      	movs	r2, #1
 8002412:	4013      	ands	r3, r2
 8002414:	d001      	beq.n	800241a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e032      	b.n	8002480 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a18      	ldr	r2, [pc, #96]	; (8002488 <HAL_UART_Receive_DMA+0xb8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d020      	beq.n	800246c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	4013      	ands	r3, r2
 8002436:	d019      	beq.n	800246c <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002438:	f3ef 8310 	mrs	r3, PRIMASK
 800243c:	613b      	str	r3, [r7, #16]
  return(result);
 800243e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	2301      	movs	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f383 8810 	msr	PRIMASK, r3
}
 800244c:	46c0      	nop			; (mov r8, r8)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	04c9      	lsls	r1, r1, #19
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	f383 8810 	msr	PRIMASK, r3
}
 800246a:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800246c:	1dbb      	adds	r3, r7, #6
 800246e:	881a      	ldrh	r2, [r3, #0]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 fc6f 	bl	8002d58 <UART_Start_Receive_DMA>
 800247a:	0003      	movs	r3, r0
 800247c:	e000      	b.n	8002480 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800247e:	2302      	movs	r3, #2
  }
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b008      	add	sp, #32
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40008000 	.word	0x40008000

0800248c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	000a      	movs	r2, r1
 80024c6:	1cbb      	adds	r3, r7, #2
 80024c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b002      	add	sp, #8
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b090      	sub	sp, #64	; 0x40
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024dc:	231a      	movs	r3, #26
 80024de:	2220      	movs	r2, #32
 80024e0:	189b      	adds	r3, r3, r2
 80024e2:	19db      	adds	r3, r3, r7
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4ac4      	ldr	r2, [pc, #784]	; (8002818 <UART_SetConfig+0x344>)
 8002508:	4013      	ands	r3, r2
 800250a:	0019      	movs	r1, r3
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002512:	430b      	orrs	r3, r1
 8002514:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4abf      	ldr	r2, [pc, #764]	; (800281c <UART_SetConfig+0x348>)
 800251e:	4013      	ands	r3, r2
 8002520:	0018      	movs	r0, r3
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	68d9      	ldr	r1, [r3, #12]
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	0003      	movs	r3, r0
 800252c:	430b      	orrs	r3, r1
 800252e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4ab9      	ldr	r2, [pc, #740]	; (8002820 <UART_SetConfig+0x34c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d004      	beq.n	800254a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002546:	4313      	orrs	r3, r2
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4ab4      	ldr	r2, [pc, #720]	; (8002824 <UART_SetConfig+0x350>)
 8002552:	4013      	ands	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255c:	430b      	orrs	r3, r1
 800255e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	220f      	movs	r2, #15
 8002568:	4393      	bics	r3, r2
 800256a:	0018      	movs	r0, r3
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	0003      	movs	r3, r0
 8002576:	430b      	orrs	r3, r1
 8002578:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4aaa      	ldr	r2, [pc, #680]	; (8002828 <UART_SetConfig+0x354>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d131      	bne.n	80025e8 <UART_SetConfig+0x114>
 8002584:	4ba9      	ldr	r3, [pc, #676]	; (800282c <UART_SetConfig+0x358>)
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	2203      	movs	r2, #3
 800258a:	4013      	ands	r3, r2
 800258c:	2b03      	cmp	r3, #3
 800258e:	d01d      	beq.n	80025cc <UART_SetConfig+0xf8>
 8002590:	d823      	bhi.n	80025da <UART_SetConfig+0x106>
 8002592:	2b02      	cmp	r3, #2
 8002594:	d00c      	beq.n	80025b0 <UART_SetConfig+0xdc>
 8002596:	d820      	bhi.n	80025da <UART_SetConfig+0x106>
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <UART_SetConfig+0xce>
 800259c:	2b01      	cmp	r3, #1
 800259e:	d00e      	beq.n	80025be <UART_SetConfig+0xea>
 80025a0:	e01b      	b.n	80025da <UART_SetConfig+0x106>
 80025a2:	231b      	movs	r3, #27
 80025a4:	2220      	movs	r2, #32
 80025a6:	189b      	adds	r3, r3, r2
 80025a8:	19db      	adds	r3, r3, r7
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	e071      	b.n	8002694 <UART_SetConfig+0x1c0>
 80025b0:	231b      	movs	r3, #27
 80025b2:	2220      	movs	r2, #32
 80025b4:	189b      	adds	r3, r3, r2
 80025b6:	19db      	adds	r3, r3, r7
 80025b8:	2202      	movs	r2, #2
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e06a      	b.n	8002694 <UART_SetConfig+0x1c0>
 80025be:	231b      	movs	r3, #27
 80025c0:	2220      	movs	r2, #32
 80025c2:	189b      	adds	r3, r3, r2
 80025c4:	19db      	adds	r3, r3, r7
 80025c6:	2204      	movs	r2, #4
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e063      	b.n	8002694 <UART_SetConfig+0x1c0>
 80025cc:	231b      	movs	r3, #27
 80025ce:	2220      	movs	r2, #32
 80025d0:	189b      	adds	r3, r3, r2
 80025d2:	19db      	adds	r3, r3, r7
 80025d4:	2208      	movs	r2, #8
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e05c      	b.n	8002694 <UART_SetConfig+0x1c0>
 80025da:	231b      	movs	r3, #27
 80025dc:	2220      	movs	r2, #32
 80025de:	189b      	adds	r3, r3, r2
 80025e0:	19db      	adds	r3, r3, r7
 80025e2:	2210      	movs	r2, #16
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e055      	b.n	8002694 <UART_SetConfig+0x1c0>
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a90      	ldr	r2, [pc, #576]	; (8002830 <UART_SetConfig+0x35c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d106      	bne.n	8002600 <UART_SetConfig+0x12c>
 80025f2:	231b      	movs	r3, #27
 80025f4:	2220      	movs	r2, #32
 80025f6:	189b      	adds	r3, r3, r2
 80025f8:	19db      	adds	r3, r3, r7
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e049      	b.n	8002694 <UART_SetConfig+0x1c0>
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a86      	ldr	r2, [pc, #536]	; (8002820 <UART_SetConfig+0x34c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d13e      	bne.n	8002688 <UART_SetConfig+0x1b4>
 800260a:	4b88      	ldr	r3, [pc, #544]	; (800282c <UART_SetConfig+0x358>)
 800260c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800260e:	23c0      	movs	r3, #192	; 0xc0
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4013      	ands	r3, r2
 8002614:	22c0      	movs	r2, #192	; 0xc0
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	4293      	cmp	r3, r2
 800261a:	d027      	beq.n	800266c <UART_SetConfig+0x198>
 800261c:	22c0      	movs	r2, #192	; 0xc0
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	4293      	cmp	r3, r2
 8002622:	d82a      	bhi.n	800267a <UART_SetConfig+0x1a6>
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	4293      	cmp	r3, r2
 800262a:	d011      	beq.n	8002650 <UART_SetConfig+0x17c>
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	4293      	cmp	r3, r2
 8002632:	d822      	bhi.n	800267a <UART_SetConfig+0x1a6>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <UART_SetConfig+0x16e>
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	00d2      	lsls	r2, r2, #3
 800263c:	4293      	cmp	r3, r2
 800263e:	d00e      	beq.n	800265e <UART_SetConfig+0x18a>
 8002640:	e01b      	b.n	800267a <UART_SetConfig+0x1a6>
 8002642:	231b      	movs	r3, #27
 8002644:	2220      	movs	r2, #32
 8002646:	189b      	adds	r3, r3, r2
 8002648:	19db      	adds	r3, r3, r7
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	e021      	b.n	8002694 <UART_SetConfig+0x1c0>
 8002650:	231b      	movs	r3, #27
 8002652:	2220      	movs	r2, #32
 8002654:	189b      	adds	r3, r3, r2
 8002656:	19db      	adds	r3, r3, r7
 8002658:	2202      	movs	r2, #2
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e01a      	b.n	8002694 <UART_SetConfig+0x1c0>
 800265e:	231b      	movs	r3, #27
 8002660:	2220      	movs	r2, #32
 8002662:	189b      	adds	r3, r3, r2
 8002664:	19db      	adds	r3, r3, r7
 8002666:	2204      	movs	r2, #4
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e013      	b.n	8002694 <UART_SetConfig+0x1c0>
 800266c:	231b      	movs	r3, #27
 800266e:	2220      	movs	r2, #32
 8002670:	189b      	adds	r3, r3, r2
 8002672:	19db      	adds	r3, r3, r7
 8002674:	2208      	movs	r2, #8
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e00c      	b.n	8002694 <UART_SetConfig+0x1c0>
 800267a:	231b      	movs	r3, #27
 800267c:	2220      	movs	r2, #32
 800267e:	189b      	adds	r3, r3, r2
 8002680:	19db      	adds	r3, r3, r7
 8002682:	2210      	movs	r2, #16
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e005      	b.n	8002694 <UART_SetConfig+0x1c0>
 8002688:	231b      	movs	r3, #27
 800268a:	2220      	movs	r2, #32
 800268c:	189b      	adds	r3, r3, r2
 800268e:	19db      	adds	r3, r3, r7
 8002690:	2210      	movs	r2, #16
 8002692:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a61      	ldr	r2, [pc, #388]	; (8002820 <UART_SetConfig+0x34c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d000      	beq.n	80026a0 <UART_SetConfig+0x1cc>
 800269e:	e092      	b.n	80027c6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80026a0:	231b      	movs	r3, #27
 80026a2:	2220      	movs	r2, #32
 80026a4:	189b      	adds	r3, r3, r2
 80026a6:	19db      	adds	r3, r3, r7
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d015      	beq.n	80026da <UART_SetConfig+0x206>
 80026ae:	dc18      	bgt.n	80026e2 <UART_SetConfig+0x20e>
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d00d      	beq.n	80026d0 <UART_SetConfig+0x1fc>
 80026b4:	dc15      	bgt.n	80026e2 <UART_SetConfig+0x20e>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <UART_SetConfig+0x1ec>
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d005      	beq.n	80026ca <UART_SetConfig+0x1f6>
 80026be:	e010      	b.n	80026e2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026c0:	f7ff fc04 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 80026c4:	0003      	movs	r3, r0
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026c8:	e014      	b.n	80026f4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026ca:	4b5a      	ldr	r3, [pc, #360]	; (8002834 <UART_SetConfig+0x360>)
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026ce:	e011      	b.n	80026f4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026d0:	f7ff fb70 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 80026d4:	0003      	movs	r3, r0
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026d8:	e00c      	b.n	80026f4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026e0:	e008      	b.n	80026f4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80026e6:	231a      	movs	r3, #26
 80026e8:	2220      	movs	r2, #32
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	19db      	adds	r3, r3, r7
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
        break;
 80026f2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d100      	bne.n	80026fc <UART_SetConfig+0x228>
 80026fa:	e147      	b.n	800298c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002700:	4b4d      	ldr	r3, [pc, #308]	; (8002838 <UART_SetConfig+0x364>)
 8002702:	0052      	lsls	r2, r2, #1
 8002704:	5ad3      	ldrh	r3, [r2, r3]
 8002706:	0019      	movs	r1, r3
 8002708:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800270a:	f7fd fcfb 	bl	8000104 <__udivsi3>
 800270e:	0003      	movs	r3, r0
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	0013      	movs	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	189b      	adds	r3, r3, r2
 800271c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800271e:	429a      	cmp	r2, r3
 8002720:	d305      	bcc.n	800272e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800272a:	429a      	cmp	r2, r3
 800272c:	d906      	bls.n	800273c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800272e:	231a      	movs	r3, #26
 8002730:	2220      	movs	r2, #32
 8002732:	189b      	adds	r3, r3, r2
 8002734:	19db      	adds	r3, r3, r7
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	e127      	b.n	800298c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <UART_SetConfig+0x364>)
 800274a:	0052      	lsls	r2, r2, #1
 800274c:	5ad3      	ldrh	r3, [r2, r3]
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	69b8      	ldr	r0, [r7, #24]
 800275a:	69f9      	ldr	r1, [r7, #28]
 800275c:	f7fd fe48 	bl	80003f0 <__aeabi_uldivmod>
 8002760:	0002      	movs	r2, r0
 8002762:	000b      	movs	r3, r1
 8002764:	0e11      	lsrs	r1, r2, #24
 8002766:	021d      	lsls	r5, r3, #8
 8002768:	430d      	orrs	r5, r1
 800276a:	0214      	lsls	r4, r2, #8
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	085b      	lsrs	r3, r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68b8      	ldr	r0, [r7, #8]
 800277a:	68f9      	ldr	r1, [r7, #12]
 800277c:	1900      	adds	r0, r0, r4
 800277e:	4169      	adcs	r1, r5
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f7fd fe2f 	bl	80003f0 <__aeabi_uldivmod>
 8002792:	0002      	movs	r2, r0
 8002794:	000b      	movs	r3, r1
 8002796:	0013      	movs	r3, r2
 8002798:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800279a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800279c:	23c0      	movs	r3, #192	; 0xc0
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d309      	bcc.n	80027b8 <UART_SetConfig+0x2e4>
 80027a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	035b      	lsls	r3, r3, #13
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d204      	bcs.n	80027b8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	e0e9      	b.n	800298c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80027b8:	231a      	movs	r3, #26
 80027ba:	2220      	movs	r2, #32
 80027bc:	189b      	adds	r3, r3, r2
 80027be:	19db      	adds	r3, r3, r7
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e0e2      	b.n	800298c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d000      	beq.n	80027d4 <UART_SetConfig+0x300>
 80027d2:	e083      	b.n	80028dc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80027d4:	231b      	movs	r3, #27
 80027d6:	2220      	movs	r2, #32
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	19db      	adds	r3, r3, r7
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d015      	beq.n	800280e <UART_SetConfig+0x33a>
 80027e2:	dc2b      	bgt.n	800283c <UART_SetConfig+0x368>
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d00d      	beq.n	8002804 <UART_SetConfig+0x330>
 80027e8:	dc28      	bgt.n	800283c <UART_SetConfig+0x368>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <UART_SetConfig+0x320>
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d005      	beq.n	80027fe <UART_SetConfig+0x32a>
 80027f2:	e023      	b.n	800283c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027f4:	f7ff fb6a 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 80027f8:	0003      	movs	r3, r0
 80027fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027fc:	e027      	b.n	800284e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <UART_SetConfig+0x360>)
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002802:	e024      	b.n	800284e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002804:	f7ff fad6 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 8002808:	0003      	movs	r3, r0
 800280a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800280c:	e01f      	b.n	800284e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002814:	e01b      	b.n	800284e <UART_SetConfig+0x37a>
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	cfff69f3 	.word	0xcfff69f3
 800281c:	ffffcfff 	.word	0xffffcfff
 8002820:	40008000 	.word	0x40008000
 8002824:	11fff4ff 	.word	0x11fff4ff
 8002828:	40013800 	.word	0x40013800
 800282c:	40021000 	.word	0x40021000
 8002830:	40004400 	.word	0x40004400
 8002834:	00f42400 	.word	0x00f42400
 8002838:	080034ec 	.word	0x080034ec
      default:
        pclk = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002840:	231a      	movs	r3, #26
 8002842:	2220      	movs	r2, #32
 8002844:	189b      	adds	r3, r3, r2
 8002846:	19db      	adds	r3, r3, r7
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
        break;
 800284c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	2b00      	cmp	r3, #0
 8002852:	d100      	bne.n	8002856 <UART_SetConfig+0x382>
 8002854:	e09a      	b.n	800298c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285a:	4b58      	ldr	r3, [pc, #352]	; (80029bc <UART_SetConfig+0x4e8>)
 800285c:	0052      	lsls	r2, r2, #1
 800285e:	5ad3      	ldrh	r3, [r2, r3]
 8002860:	0019      	movs	r1, r3
 8002862:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002864:	f7fd fc4e 	bl	8000104 <__udivsi3>
 8002868:	0003      	movs	r3, r0
 800286a:	005a      	lsls	r2, r3, #1
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	085b      	lsrs	r3, r3, #1
 8002872:	18d2      	adds	r2, r2, r3
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	0019      	movs	r1, r3
 800287a:	0010      	movs	r0, r2
 800287c:	f7fd fc42 	bl	8000104 <__udivsi3>
 8002880:	0003      	movs	r3, r0
 8002882:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002886:	2b0f      	cmp	r3, #15
 8002888:	d921      	bls.n	80028ce <UART_SetConfig+0x3fa>
 800288a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	025b      	lsls	r3, r3, #9
 8002890:	429a      	cmp	r2, r3
 8002892:	d21c      	bcs.n	80028ce <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	b29a      	uxth	r2, r3
 8002898:	200e      	movs	r0, #14
 800289a:	2420      	movs	r4, #32
 800289c:	1903      	adds	r3, r0, r4
 800289e:	19db      	adds	r3, r3, r7
 80028a0:	210f      	movs	r1, #15
 80028a2:	438a      	bics	r2, r1
 80028a4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2207      	movs	r2, #7
 80028ae:	4013      	ands	r3, r2
 80028b0:	b299      	uxth	r1, r3
 80028b2:	1903      	adds	r3, r0, r4
 80028b4:	19db      	adds	r3, r3, r7
 80028b6:	1902      	adds	r2, r0, r4
 80028b8:	19d2      	adds	r2, r2, r7
 80028ba:	8812      	ldrh	r2, [r2, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	1902      	adds	r2, r0, r4
 80028c6:	19d2      	adds	r2, r2, r7
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	e05e      	b.n	800298c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80028ce:	231a      	movs	r3, #26
 80028d0:	2220      	movs	r2, #32
 80028d2:	189b      	adds	r3, r3, r2
 80028d4:	19db      	adds	r3, r3, r7
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e057      	b.n	800298c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028dc:	231b      	movs	r3, #27
 80028de:	2220      	movs	r2, #32
 80028e0:	189b      	adds	r3, r3, r2
 80028e2:	19db      	adds	r3, r3, r7
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d015      	beq.n	8002916 <UART_SetConfig+0x442>
 80028ea:	dc18      	bgt.n	800291e <UART_SetConfig+0x44a>
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d00d      	beq.n	800290c <UART_SetConfig+0x438>
 80028f0:	dc15      	bgt.n	800291e <UART_SetConfig+0x44a>
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <UART_SetConfig+0x428>
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d005      	beq.n	8002906 <UART_SetConfig+0x432>
 80028fa:	e010      	b.n	800291e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028fc:	f7ff fae6 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8002900:	0003      	movs	r3, r0
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002904:	e014      	b.n	8002930 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <UART_SetConfig+0x4ec>)
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800290a:	e011      	b.n	8002930 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800290c:	f7ff fa52 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 8002910:	0003      	movs	r3, r0
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002914:	e00c      	b.n	8002930 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800291c:	e008      	b.n	8002930 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002922:	231a      	movs	r3, #26
 8002924:	2220      	movs	r2, #32
 8002926:	189b      	adds	r3, r3, r2
 8002928:	19db      	adds	r3, r3, r7
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
        break;
 800292e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02a      	beq.n	800298c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <UART_SetConfig+0x4e8>)
 800293c:	0052      	lsls	r2, r2, #1
 800293e:	5ad3      	ldrh	r3, [r2, r3]
 8002940:	0019      	movs	r1, r3
 8002942:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002944:	f7fd fbde 	bl	8000104 <__udivsi3>
 8002948:	0003      	movs	r3, r0
 800294a:	001a      	movs	r2, r3
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	18d2      	adds	r2, r2, r3
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	0019      	movs	r1, r3
 800295a:	0010      	movs	r0, r2
 800295c:	f7fd fbd2 	bl	8000104 <__udivsi3>
 8002960:	0003      	movs	r3, r0
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	2b0f      	cmp	r3, #15
 8002968:	d90a      	bls.n	8002980 <UART_SetConfig+0x4ac>
 800296a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800296c:	2380      	movs	r3, #128	; 0x80
 800296e:	025b      	lsls	r3, r3, #9
 8002970:	429a      	cmp	r2, r3
 8002972:	d205      	bcs.n	8002980 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	b29a      	uxth	r2, r3
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	60da      	str	r2, [r3, #12]
 800297e:	e005      	b.n	800298c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8002980:	231a      	movs	r3, #26
 8002982:	2220      	movs	r2, #32
 8002984:	189b      	adds	r3, r3, r2
 8002986:	19db      	adds	r3, r3, r7
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	226a      	movs	r2, #106	; 0x6a
 8002990:	2101      	movs	r1, #1
 8002992:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	2268      	movs	r2, #104	; 0x68
 8002998:	2101      	movs	r1, #1
 800299a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	2200      	movs	r2, #0
 80029a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	2200      	movs	r2, #0
 80029a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80029a8:	231a      	movs	r3, #26
 80029aa:	2220      	movs	r2, #32
 80029ac:	189b      	adds	r3, r3, r2
 80029ae:	19db      	adds	r3, r3, r7
 80029b0:	781b      	ldrb	r3, [r3, #0]
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b010      	add	sp, #64	; 0x40
 80029b8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	080034ec 	.word	0x080034ec
 80029c0:	00f42400 	.word	0x00f42400

080029c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	2201      	movs	r2, #1
 80029d2:	4013      	ands	r3, r2
 80029d4:	d00b      	beq.n	80029ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a4a      	ldr	r2, [pc, #296]	; (8002b08 <UART_AdvFeatureConfig+0x144>)
 80029de:	4013      	ands	r3, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	2202      	movs	r2, #2
 80029f4:	4013      	ands	r3, r2
 80029f6:	d00b      	beq.n	8002a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a43      	ldr	r2, [pc, #268]	; (8002b0c <UART_AdvFeatureConfig+0x148>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	2204      	movs	r2, #4
 8002a16:	4013      	ands	r3, r2
 8002a18:	d00b      	beq.n	8002a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a3b      	ldr	r2, [pc, #236]	; (8002b10 <UART_AdvFeatureConfig+0x14c>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	0019      	movs	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a36:	2208      	movs	r2, #8
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d00b      	beq.n	8002a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4a34      	ldr	r2, [pc, #208]	; (8002b14 <UART_AdvFeatureConfig+0x150>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	0019      	movs	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	2210      	movs	r2, #16
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d00b      	beq.n	8002a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a2c      	ldr	r2, [pc, #176]	; (8002b18 <UART_AdvFeatureConfig+0x154>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d00b      	beq.n	8002a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <UART_AdvFeatureConfig+0x158>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	2240      	movs	r2, #64	; 0x40
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d01d      	beq.n	8002ade <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <UART_AdvFeatureConfig+0x15c>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	035b      	lsls	r3, r3, #13
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d10b      	bne.n	8002ade <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <UART_AdvFeatureConfig+0x160>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d00b      	beq.n	8002b00 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a0e      	ldr	r2, [pc, #56]	; (8002b28 <UART_AdvFeatureConfig+0x164>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	0019      	movs	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]
  }
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b002      	add	sp, #8
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	fffdffff 	.word	0xfffdffff
 8002b0c:	fffeffff 	.word	0xfffeffff
 8002b10:	fffbffff 	.word	0xfffbffff
 8002b14:	ffff7fff 	.word	0xffff7fff
 8002b18:	ffffefff 	.word	0xffffefff
 8002b1c:	ffffdfff 	.word	0xffffdfff
 8002b20:	ffefffff 	.word	0xffefffff
 8002b24:	ff9fffff 	.word	0xff9fffff
 8002b28:	fff7ffff 	.word	0xfff7ffff

08002b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2290      	movs	r2, #144	; 0x90
 8002b38:	2100      	movs	r1, #0
 8002b3a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b3c:	f7fe f80a 	bl	8000b54 <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d10c      	bne.n	8002b6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	0391      	lsls	r1, r2, #14
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	; (8002bc4 <UART_CheckIdleState+0x98>)
 8002b5c:	9200      	str	r2, [sp, #0]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f000 f832 	bl	8002bc8 <UART_WaitOnFlagUntilTimeout>
 8002b64:	1e03      	subs	r3, r0, #0
 8002b66:	d001      	beq.n	8002b6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e026      	b.n	8002bba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2204      	movs	r2, #4
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d10c      	bne.n	8002b94 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	03d1      	lsls	r1, r2, #15
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <UART_CheckIdleState+0x98>)
 8002b84:	9200      	str	r2, [sp, #0]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f000 f81e 	bl	8002bc8 <UART_WaitOnFlagUntilTimeout>
 8002b8c:	1e03      	subs	r3, r0, #0
 8002b8e:	d001      	beq.n	8002b94 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e012      	b.n	8002bba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2288      	movs	r2, #136	; 0x88
 8002b98:	2120      	movs	r1, #32
 8002b9a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	228c      	movs	r2, #140	; 0x8c
 8002ba0:	2120      	movs	r1, #32
 8002ba2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2284      	movs	r2, #132	; 0x84
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b004      	add	sp, #16
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	01ffffff 	.word	0x01ffffff

08002bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b094      	sub	sp, #80	; 0x50
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	1dfb      	adds	r3, r7, #7
 8002bd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd8:	e0a7      	b.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bdc:	3301      	adds	r3, #1
 8002bde:	d100      	bne.n	8002be2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002be0:	e0a3      	b.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be2:	f7fd ffb7 	bl	8000b54 <HAL_GetTick>
 8002be6:	0002      	movs	r2, r0
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d302      	bcc.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d13f      	bne.n	8002c78 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c00:	647b      	str	r3, [r7, #68]	; 0x44
 8002c02:	2301      	movs	r3, #1
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	f383 8810 	msr	PRIMASK, r3
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	494e      	ldr	r1, [pc, #312]	; (8002d54 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	f383 8810 	msr	PRIMASK, r3
}
 8002c28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c2e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c32:	643b      	str	r3, [r7, #64]	; 0x40
 8002c34:	2301      	movs	r3, #1
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	f383 8810 	msr	PRIMASK, r3
}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c56:	f383 8810 	msr	PRIMASK, r3
}
 8002c5a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2288      	movs	r2, #136	; 0x88
 8002c60:	2120      	movs	r1, #32
 8002c62:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	228c      	movs	r2, #140	; 0x8c
 8002c68:	2120      	movs	r1, #32
 8002c6a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2284      	movs	r2, #132	; 0x84
 8002c70:	2100      	movs	r1, #0
 8002c72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e069      	b.n	8002d4c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4013      	ands	r3, r2
 8002c82:	d052      	beq.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	401a      	ands	r2, r3
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d148      	bne.n	8002d2a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2280      	movs	r2, #128	; 0x80
 8002c9e:	0112      	lsls	r2, r2, #4
 8002ca0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca6:	613b      	str	r3, [r7, #16]
  return(result);
 8002ca8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cac:	2301      	movs	r3, #1
 8002cae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f383 8810 	msr	PRIMASK, r3
}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4924      	ldr	r1, [pc, #144]	; (8002d54 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	f383 8810 	msr	PRIMASK, r3
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002cda:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cde:	2301      	movs	r3, #1
 8002ce0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f383 8810 	msr	PRIMASK, r3
}
 8002ce8:	46c0      	nop			; (mov r8, r8)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	438a      	bics	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	f383 8810 	msr	PRIMASK, r3
}
 8002d04:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2288      	movs	r2, #136	; 0x88
 8002d0a:	2120      	movs	r1, #32
 8002d0c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	228c      	movs	r2, #140	; 0x8c
 8002d12:	2120      	movs	r1, #32
 8002d14:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2290      	movs	r2, #144	; 0x90
 8002d1a:	2120      	movs	r1, #32
 8002d1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2284      	movs	r2, #132	; 0x84
 8002d22:	2100      	movs	r1, #0
 8002d24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e010      	b.n	8002d4c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	4013      	ands	r3, r2
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	425a      	negs	r2, r3
 8002d3a:	4153      	adcs	r3, r2
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	001a      	movs	r2, r3
 8002d40:	1dfb      	adds	r3, r7, #7
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d100      	bne.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x182>
 8002d48:	e747      	b.n	8002bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b014      	add	sp, #80	; 0x50
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	fffffe5f 	.word	0xfffffe5f

08002d58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b090      	sub	sp, #64	; 0x40
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	1dbb      	adds	r3, r7, #6
 8002d64:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1dba      	adds	r2, r7, #6
 8002d70:	215c      	movs	r1, #92	; 0x5c
 8002d72:	8812      	ldrh	r2, [r2, #0]
 8002d74:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2290      	movs	r2, #144	; 0x90
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	228c      	movs	r2, #140	; 0x8c
 8002d82:	2122      	movs	r1, #34	; 0x22
 8002d84:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	589b      	ldr	r3, [r3, r2]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d02d      	beq.n	8002dec <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2280      	movs	r2, #128	; 0x80
 8002d94:	589b      	ldr	r3, [r3, r2]
 8002d96:	4a40      	ldr	r2, [pc, #256]	; (8002e98 <UART_Start_Receive_DMA+0x140>)
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2280      	movs	r2, #128	; 0x80
 8002d9e:	589b      	ldr	r3, [r3, r2]
 8002da0:	4a3e      	ldr	r2, [pc, #248]	; (8002e9c <UART_Start_Receive_DMA+0x144>)
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	589b      	ldr	r3, [r3, r2]
 8002daa:	4a3d      	ldr	r2, [pc, #244]	; (8002ea0 <UART_Start_Receive_DMA+0x148>)
 8002dac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	589b      	ldr	r3, [r3, r2]
 8002db4:	2200      	movs	r2, #0
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	5898      	ldr	r0, [r3, r2]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3324      	adds	r3, #36	; 0x24
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	001a      	movs	r2, r3
 8002dcc:	1dbb      	adds	r3, r7, #6
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	f7fe f856 	bl	8000e80 <HAL_DMA_Start_IT>
 8002dd4:	1e03      	subs	r3, r0, #0
 8002dd6:	d009      	beq.n	8002dec <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2290      	movs	r2, #144	; 0x90
 8002ddc:	2110      	movs	r1, #16
 8002dde:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	228c      	movs	r2, #140	; 0x8c
 8002de4:	2120      	movs	r1, #32
 8002de6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e050      	b.n	8002e8e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d019      	beq.n	8002e28 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df4:	f3ef 8310 	mrs	r3, PRIMASK
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dfe:	2301      	movs	r3, #1
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	f383 8810 	msr	PRIMASK, r3
}
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	0049      	lsls	r1, r1, #1
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	f383 8810 	msr	PRIMASK, r3
}
 8002e26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e28:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2c:	613b      	str	r3, [r7, #16]
  return(result);
 8002e2e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e32:	2301      	movs	r3, #1
 8002e34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f383 8810 	msr	PRIMASK, r3
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f383 8810 	msr	PRIMASK, r3
}
 8002e58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e60:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
 8002e64:	2301      	movs	r3, #1
 8002e66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2140      	movs	r1, #64	; 0x40
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	f383 8810 	msr	PRIMASK, r3
}
 8002e8a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	0018      	movs	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b010      	add	sp, #64	; 0x40
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	08002ff1 	.word	0x08002ff1
 8002e9c:	08003121 	.word	0x08003121
 8002ea0:	08003163 	.word	0x08003163

08002ea4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eac:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f383 8810 	msr	PRIMASK, r3
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	21c0      	movs	r1, #192	; 0xc0
 8002ece:	438a      	bics	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f383 8810 	msr	PRIMASK, r3
}
 8002edc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ede:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee2:	617b      	str	r3, [r7, #20]
  return(result);
 8002ee4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8002ee6:	623b      	str	r3, [r7, #32]
 8002ee8:	2301      	movs	r3, #1
 8002eea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	f383 8810 	msr	PRIMASK, r3
}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4908      	ldr	r1, [pc, #32]	; (8002f20 <UART_EndTxTransfer+0x7c>)
 8002f00:	400a      	ands	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f383 8810 	msr	PRIMASK, r3
}
 8002f0e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2288      	movs	r2, #136	; 0x88
 8002f14:	2120      	movs	r1, #32
 8002f16:	5099      	str	r1, [r3, r2]
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b00a      	add	sp, #40	; 0x28
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	ff7fffff 	.word	0xff7fffff

08002f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08e      	sub	sp, #56	; 0x38
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f30:	617b      	str	r3, [r7, #20]
  return(result);
 8002f32:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
 8002f36:	2301      	movs	r3, #1
 8002f38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f383 8810 	msr	PRIMASK, r3
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4926      	ldr	r1, [pc, #152]	; (8002fe8 <UART_EndRxTransfer+0xc4>)
 8002f4e:	400a      	ands	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f383 8810 	msr	PRIMASK, r3
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f62:	623b      	str	r3, [r7, #32]
  return(result);
 8002f64:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f66:	633b      	str	r3, [r7, #48]	; 0x30
 8002f68:	2301      	movs	r3, #1
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	f383 8810 	msr	PRIMASK, r3
}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	491b      	ldr	r1, [pc, #108]	; (8002fec <UART_EndRxTransfer+0xc8>)
 8002f80:	400a      	ands	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	f383 8810 	msr	PRIMASK, r3
}
 8002f8e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d118      	bne.n	8002fca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f98:	f3ef 8310 	mrs	r3, PRIMASK
 8002f9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f9e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f383 8810 	msr	PRIMASK, r3
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2110      	movs	r1, #16
 8002fba:	438a      	bics	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f383 8810 	msr	PRIMASK, r3
}
 8002fc8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	228c      	movs	r2, #140	; 0x8c
 8002fce:	2120      	movs	r1, #32
 8002fd0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b00e      	add	sp, #56	; 0x38
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	fffffedf 	.word	0xfffffedf
 8002fec:	effffffe 	.word	0xeffffffe

08002ff0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b094      	sub	sp, #80	; 0x50
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2220      	movs	r2, #32
 8003006:	4013      	ands	r3, r2
 8003008:	d16f      	bne.n	80030ea <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800300a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300c:	225e      	movs	r2, #94	; 0x5e
 800300e:	2100      	movs	r1, #0
 8003010:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003012:	f3ef 8310 	mrs	r3, PRIMASK
 8003016:	61bb      	str	r3, [r7, #24]
  return(result);
 8003018:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
 800301c:	2301      	movs	r3, #1
 800301e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f383 8810 	msr	PRIMASK, r3
}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	493a      	ldr	r1, [pc, #232]	; (800311c <UART_DMAReceiveCplt+0x12c>)
 8003034:	400a      	ands	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	f383 8810 	msr	PRIMASK, r3
}
 8003042:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003044:	f3ef 8310 	mrs	r3, PRIMASK
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304c:	647b      	str	r3, [r7, #68]	; 0x44
 800304e:	2301      	movs	r3, #1
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	f383 8810 	msr	PRIMASK, r3
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	438a      	bics	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	f383 8810 	msr	PRIMASK, r3
}
 8003074:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003076:	f3ef 8310 	mrs	r3, PRIMASK
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800307e:	643b      	str	r3, [r7, #64]	; 0x40
 8003080:	2301      	movs	r3, #1
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003086:	f383 8810 	msr	PRIMASK, r3
}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2140      	movs	r1, #64	; 0x40
 8003098:	438a      	bics	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800309e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a2:	f383 8810 	msr	PRIMASK, r3
}
 80030a6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030aa:	228c      	movs	r2, #140	; 0x8c
 80030ac:	2120      	movs	r1, #32
 80030ae:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d118      	bne.n	80030ea <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b8:	f3ef 8310 	mrs	r3, PRIMASK
 80030bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80030be:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c2:	2301      	movs	r3, #1
 80030c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f383 8810 	msr	PRIMASK, r3
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2110      	movs	r1, #16
 80030da:	438a      	bics	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f383 8810 	msr	PRIMASK, r3
}
 80030e8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ec:	2200      	movs	r2, #0
 80030ee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d108      	bne.n	800310a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fa:	225c      	movs	r2, #92	; 0x5c
 80030fc:	5a9a      	ldrh	r2, [r3, r2]
 80030fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003100:	0011      	movs	r1, r2
 8003102:	0018      	movs	r0, r3
 8003104:	f7ff f9da 	bl	80024bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003108:	e003      	b.n	8003112 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800310a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310c:	0018      	movs	r0, r3
 800310e:	f7ff f9bd 	bl	800248c <HAL_UART_RxCpltCallback>
}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	46bd      	mov	sp, r7
 8003116:	b014      	add	sp, #80	; 0x50
 8003118:	bd80      	pop	{r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	fffffeff 	.word	0xfffffeff

08003120 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d10a      	bne.n	8003152 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	225c      	movs	r2, #92	; 0x5c
 8003140:	5a9b      	ldrh	r3, [r3, r2]
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	0011      	movs	r1, r2
 800314a:	0018      	movs	r0, r3
 800314c:	f7ff f9b6 	bl	80024bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003150:	e003      	b.n	800315a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0018      	movs	r0, r3
 8003156:	f7ff f9a1 	bl	800249c <HAL_UART_RxHalfCpltCallback>
}
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	46bd      	mov	sp, r7
 800315e:	b004      	add	sp, #16
 8003160:	bd80      	pop	{r7, pc}

08003162 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b086      	sub	sp, #24
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2288      	movs	r2, #136	; 0x88
 8003174:	589b      	ldr	r3, [r3, r2]
 8003176:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	228c      	movs	r2, #140	; 0x8c
 800317c:	589b      	ldr	r3, [r3, r2]
 800317e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	4013      	ands	r3, r2
 800318a:	2b80      	cmp	r3, #128	; 0x80
 800318c:	d10a      	bne.n	80031a4 <UART_DMAError+0x42>
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b21      	cmp	r3, #33	; 0x21
 8003192:	d107      	bne.n	80031a4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2256      	movs	r2, #86	; 0x56
 8003198:	2100      	movs	r1, #0
 800319a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	0018      	movs	r0, r3
 80031a0:	f7ff fe80 	bl	8002ea4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2240      	movs	r2, #64	; 0x40
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b40      	cmp	r3, #64	; 0x40
 80031b0:	d10a      	bne.n	80031c8 <UART_DMAError+0x66>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b22      	cmp	r3, #34	; 0x22
 80031b6:	d107      	bne.n	80031c8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	225e      	movs	r2, #94	; 0x5e
 80031bc:	2100      	movs	r1, #0
 80031be:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7ff feae 	bl	8002f24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2290      	movs	r2, #144	; 0x90
 80031cc:	589b      	ldr	r3, [r3, r2]
 80031ce:	2210      	movs	r2, #16
 80031d0:	431a      	orrs	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2190      	movs	r1, #144	; 0x90
 80031d6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	0018      	movs	r0, r3
 80031dc:	f7ff f966 	bl	80024ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b006      	add	sp, #24
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2284      	movs	r2, #132	; 0x84
 80031f4:	5c9b      	ldrb	r3, [r3, r2]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_UARTEx_DisableFifoMode+0x16>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e027      	b.n	800324e <HAL_UARTEx_DisableFifoMode+0x66>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2284      	movs	r2, #132	; 0x84
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2288      	movs	r2, #136	; 0x88
 800320a:	2124      	movs	r1, #36	; 0x24
 800320c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2101      	movs	r1, #1
 8003222:	438a      	bics	r2, r1
 8003224:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a0b      	ldr	r2, [pc, #44]	; (8003258 <HAL_UARTEx_DisableFifoMode+0x70>)
 800322a:	4013      	ands	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2288      	movs	r2, #136	; 0x88
 8003240:	2120      	movs	r1, #32
 8003242:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2284      	movs	r2, #132	; 0x84
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b004      	add	sp, #16
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	dfffffff 	.word	0xdfffffff

0800325c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2284      	movs	r2, #132	; 0x84
 800326a:	5c9b      	ldrb	r3, [r3, r2]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003270:	2302      	movs	r3, #2
 8003272:	e02e      	b.n	80032d2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2284      	movs	r2, #132	; 0x84
 8003278:	2101      	movs	r1, #1
 800327a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2288      	movs	r2, #136	; 0x88
 8003280:	2124      	movs	r1, #36	; 0x24
 8003282:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2101      	movs	r1, #1
 8003298:	438a      	bics	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	08d9      	lsrs	r1, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f854 	bl	8003360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2288      	movs	r2, #136	; 0x88
 80032c4:	2120      	movs	r1, #32
 80032c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2284      	movs	r2, #132	; 0x84
 80032cc:	2100      	movs	r1, #0
 80032ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b004      	add	sp, #16
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2284      	movs	r2, #132	; 0x84
 80032ea:	5c9b      	ldrb	r3, [r3, r2]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e02f      	b.n	8003354 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2284      	movs	r2, #132	; 0x84
 80032f8:	2101      	movs	r1, #1
 80032fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2288      	movs	r2, #136	; 0x88
 8003300:	2124      	movs	r1, #36	; 0x24
 8003302:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2101      	movs	r1, #1
 8003318:	438a      	bics	r2, r1
 800331a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4a0e      	ldr	r2, [pc, #56]	; (800335c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003324:	4013      	ands	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	0018      	movs	r0, r3
 8003336:	f000 f813 	bl	8003360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2288      	movs	r2, #136	; 0x88
 8003346:	2120      	movs	r1, #32
 8003348:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2284      	movs	r2, #132	; 0x84
 800334e:	2100      	movs	r1, #0
 8003350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b004      	add	sp, #16
 800335a:	bd80      	pop	{r7, pc}
 800335c:	f1ffffff 	.word	0xf1ffffff

08003360 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800336c:	2b00      	cmp	r3, #0
 800336e:	d108      	bne.n	8003382 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	226a      	movs	r2, #106	; 0x6a
 8003374:	2101      	movs	r1, #1
 8003376:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2268      	movs	r2, #104	; 0x68
 800337c:	2101      	movs	r1, #1
 800337e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003380:	e043      	b.n	800340a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003382:	260f      	movs	r6, #15
 8003384:	19bb      	adds	r3, r7, r6
 8003386:	2208      	movs	r2, #8
 8003388:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800338a:	200e      	movs	r0, #14
 800338c:	183b      	adds	r3, r7, r0
 800338e:	2208      	movs	r2, #8
 8003390:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	0e5b      	lsrs	r3, r3, #25
 800339a:	b2da      	uxtb	r2, r3
 800339c:	240d      	movs	r4, #13
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	2107      	movs	r1, #7
 80033a2:	400a      	ands	r2, r1
 80033a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	0f5b      	lsrs	r3, r3, #29
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	250c      	movs	r5, #12
 80033b2:	197b      	adds	r3, r7, r5
 80033b4:	2107      	movs	r1, #7
 80033b6:	400a      	ands	r2, r1
 80033b8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033ba:	183b      	adds	r3, r7, r0
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	197a      	adds	r2, r7, r5
 80033c0:	7812      	ldrb	r2, [r2, #0]
 80033c2:	4914      	ldr	r1, [pc, #80]	; (8003414 <UARTEx_SetNbDataToProcess+0xb4>)
 80033c4:	5c8a      	ldrb	r2, [r1, r2]
 80033c6:	435a      	muls	r2, r3
 80033c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80033ca:	197b      	adds	r3, r7, r5
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4a12      	ldr	r2, [pc, #72]	; (8003418 <UARTEx_SetNbDataToProcess+0xb8>)
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80033d2:	0019      	movs	r1, r3
 80033d4:	f7fc ff20 	bl	8000218 <__divsi3>
 80033d8:	0003      	movs	r3, r0
 80033da:	b299      	uxth	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	226a      	movs	r2, #106	; 0x6a
 80033e0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033e2:	19bb      	adds	r3, r7, r6
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	193a      	adds	r2, r7, r4
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	490a      	ldr	r1, [pc, #40]	; (8003414 <UARTEx_SetNbDataToProcess+0xb4>)
 80033ec:	5c8a      	ldrb	r2, [r1, r2]
 80033ee:	435a      	muls	r2, r3
 80033f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80033f2:	193b      	adds	r3, r7, r4
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	4a08      	ldr	r2, [pc, #32]	; (8003418 <UARTEx_SetNbDataToProcess+0xb8>)
 80033f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033fa:	0019      	movs	r1, r3
 80033fc:	f7fc ff0c 	bl	8000218 <__divsi3>
 8003400:	0003      	movs	r3, r0
 8003402:	b299      	uxth	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2268      	movs	r2, #104	; 0x68
 8003408:	5299      	strh	r1, [r3, r2]
}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	b005      	add	sp, #20
 8003410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	08003504 	.word	0x08003504
 8003418:	0800350c 	.word	0x0800350c

0800341c <__libc_init_array>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	2600      	movs	r6, #0
 8003420:	4d0c      	ldr	r5, [pc, #48]	; (8003454 <__libc_init_array+0x38>)
 8003422:	4c0d      	ldr	r4, [pc, #52]	; (8003458 <__libc_init_array+0x3c>)
 8003424:	1b64      	subs	r4, r4, r5
 8003426:	10a4      	asrs	r4, r4, #2
 8003428:	42a6      	cmp	r6, r4
 800342a:	d109      	bne.n	8003440 <__libc_init_array+0x24>
 800342c:	2600      	movs	r6, #0
 800342e:	f000 f821 	bl	8003474 <_init>
 8003432:	4d0a      	ldr	r5, [pc, #40]	; (800345c <__libc_init_array+0x40>)
 8003434:	4c0a      	ldr	r4, [pc, #40]	; (8003460 <__libc_init_array+0x44>)
 8003436:	1b64      	subs	r4, r4, r5
 8003438:	10a4      	asrs	r4, r4, #2
 800343a:	42a6      	cmp	r6, r4
 800343c:	d105      	bne.n	800344a <__libc_init_array+0x2e>
 800343e:	bd70      	pop	{r4, r5, r6, pc}
 8003440:	00b3      	lsls	r3, r6, #2
 8003442:	58eb      	ldr	r3, [r5, r3]
 8003444:	4798      	blx	r3
 8003446:	3601      	adds	r6, #1
 8003448:	e7ee      	b.n	8003428 <__libc_init_array+0xc>
 800344a:	00b3      	lsls	r3, r6, #2
 800344c:	58eb      	ldr	r3, [r5, r3]
 800344e:	4798      	blx	r3
 8003450:	3601      	adds	r6, #1
 8003452:	e7f2      	b.n	800343a <__libc_init_array+0x1e>
 8003454:	0800351c 	.word	0x0800351c
 8003458:	0800351c 	.word	0x0800351c
 800345c:	0800351c 	.word	0x0800351c
 8003460:	08003520 	.word	0x08003520

08003464 <memset>:
 8003464:	0003      	movs	r3, r0
 8003466:	1882      	adds	r2, r0, r2
 8003468:	4293      	cmp	r3, r2
 800346a:	d100      	bne.n	800346e <memset+0xa>
 800346c:	4770      	bx	lr
 800346e:	7019      	strb	r1, [r3, #0]
 8003470:	3301      	adds	r3, #1
 8003472:	e7f9      	b.n	8003468 <memset+0x4>

08003474 <_init>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347a:	bc08      	pop	{r3}
 800347c:	469e      	mov	lr, r3
 800347e:	4770      	bx	lr

08003480 <_fini>:
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003486:	bc08      	pop	{r3}
 8003488:	469e      	mov	lr, r3
 800348a:	4770      	bx	lr
