
g031_oilSensor_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cce0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  0800cda0  0800cda0  0001cda0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d910  0800d910  0002028c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d910  0800d910  0002028c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d910  0800d910  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d910  0800d910  0001d910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d914  0800d914  0001d914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  0800d918  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f30  20000290  0800dba4  00020290  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800dba4  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f63b  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee4  00000000  00000000  0002f8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000327d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00033750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b26  00000000  00000000  00034558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130de  00000000  00000000  0003907e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d386  00000000  00000000  0004c15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e94e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c34  00000000  00000000  000e9534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000290 	.word	0x20000290
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800cd84 	.word	0x0800cd84

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000294 	.word	0x20000294
 8000100:	0800cd84 	.word	0x0800cd84

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fe67 	bl	8002120 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fdb7 	bl	8001fd0 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fe59 	bl	8002120 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fe4f 	bl	8002120 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fddf 	bl	8002054 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fdd5 	bl	8002054 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fb8b 	bl	8000bdc <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fb17 	bl	8000b04 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb7d 	bl	8000bdc <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb73 	bl	8000bdc <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fb23 	bl	8000b50 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fb19 	bl	8000b50 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_f2uiz>:
 800052c:	219e      	movs	r1, #158	; 0x9e
 800052e:	b510      	push	{r4, lr}
 8000530:	05c9      	lsls	r1, r1, #23
 8000532:	1c04      	adds	r4, r0, #0
 8000534:	f7ff fff0 	bl	8000518 <__aeabi_fcmpge>
 8000538:	2800      	cmp	r0, #0
 800053a:	d103      	bne.n	8000544 <__aeabi_f2uiz+0x18>
 800053c:	1c20      	adds	r0, r4, #0
 800053e:	f000 fe65 	bl	800120c <__aeabi_f2iz>
 8000542:	bd10      	pop	{r4, pc}
 8000544:	219e      	movs	r1, #158	; 0x9e
 8000546:	1c20      	adds	r0, r4, #0
 8000548:	05c9      	lsls	r1, r1, #23
 800054a:	f000 fcb1 	bl	8000eb0 <__aeabi_fsub>
 800054e:	f000 fe5d 	bl	800120c <__aeabi_f2iz>
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	061b      	lsls	r3, r3, #24
 8000556:	469c      	mov	ip, r3
 8000558:	4460      	add	r0, ip
 800055a:	e7f2      	b.n	8000542 <__aeabi_f2uiz+0x16>

0800055c <__aeabi_d2uiz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <__aeabi_d2uiz+0x38>)
 8000562:	0004      	movs	r4, r0
 8000564:	000d      	movs	r5, r1
 8000566:	f7ff ff9d 	bl	80004a4 <__aeabi_dcmpge>
 800056a:	2800      	cmp	r0, #0
 800056c:	d104      	bne.n	8000578 <__aeabi_d2uiz+0x1c>
 800056e:	0020      	movs	r0, r4
 8000570:	0029      	movs	r1, r5
 8000572:	f002 fc55 	bl	8002e20 <__aeabi_d2iz>
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <__aeabi_d2uiz+0x38>)
 800057a:	2200      	movs	r2, #0
 800057c:	0020      	movs	r0, r4
 800057e:	0029      	movs	r1, r5
 8000580:	f002 f89e 	bl	80026c0 <__aeabi_dsub>
 8000584:	f002 fc4c 	bl	8002e20 <__aeabi_d2iz>
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	061b      	lsls	r3, r3, #24
 800058c:	469c      	mov	ip, r3
 800058e:	4460      	add	r0, ip
 8000590:	e7f1      	b.n	8000576 <__aeabi_d2uiz+0x1a>
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	41e00000 	.word	0x41e00000

08000598 <__aeabi_fadd>:
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	46c6      	mov	lr, r8
 800059c:	0243      	lsls	r3, r0, #9
 800059e:	0a5b      	lsrs	r3, r3, #9
 80005a0:	024e      	lsls	r6, r1, #9
 80005a2:	0045      	lsls	r5, r0, #1
 80005a4:	004f      	lsls	r7, r1, #1
 80005a6:	00da      	lsls	r2, r3, #3
 80005a8:	0fc4      	lsrs	r4, r0, #31
 80005aa:	469c      	mov	ip, r3
 80005ac:	0a70      	lsrs	r0, r6, #9
 80005ae:	4690      	mov	r8, r2
 80005b0:	b500      	push	{lr}
 80005b2:	0e2d      	lsrs	r5, r5, #24
 80005b4:	0e3f      	lsrs	r7, r7, #24
 80005b6:	0fc9      	lsrs	r1, r1, #31
 80005b8:	09b6      	lsrs	r6, r6, #6
 80005ba:	428c      	cmp	r4, r1
 80005bc:	d04b      	beq.n	8000656 <__aeabi_fadd+0xbe>
 80005be:	1bea      	subs	r2, r5, r7
 80005c0:	2a00      	cmp	r2, #0
 80005c2:	dd36      	ble.n	8000632 <__aeabi_fadd+0x9a>
 80005c4:	2f00      	cmp	r7, #0
 80005c6:	d061      	beq.n	800068c <__aeabi_fadd+0xf4>
 80005c8:	2dff      	cmp	r5, #255	; 0xff
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x36>
 80005cc:	e0ad      	b.n	800072a <__aeabi_fadd+0x192>
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	04db      	lsls	r3, r3, #19
 80005d2:	431e      	orrs	r6, r3
 80005d4:	2a1b      	cmp	r2, #27
 80005d6:	dc00      	bgt.n	80005da <__aeabi_fadd+0x42>
 80005d8:	e0d3      	b.n	8000782 <__aeabi_fadd+0x1ea>
 80005da:	2001      	movs	r0, #1
 80005dc:	4643      	mov	r3, r8
 80005de:	1a18      	subs	r0, r3, r0
 80005e0:	0143      	lsls	r3, r0, #5
 80005e2:	d400      	bmi.n	80005e6 <__aeabi_fadd+0x4e>
 80005e4:	e08c      	b.n	8000700 <__aeabi_fadd+0x168>
 80005e6:	0180      	lsls	r0, r0, #6
 80005e8:	0987      	lsrs	r7, r0, #6
 80005ea:	0038      	movs	r0, r7
 80005ec:	f002 fd74 	bl	80030d8 <__clzsi2>
 80005f0:	3805      	subs	r0, #5
 80005f2:	4087      	lsls	r7, r0
 80005f4:	4285      	cmp	r5, r0
 80005f6:	dc00      	bgt.n	80005fa <__aeabi_fadd+0x62>
 80005f8:	e0b6      	b.n	8000768 <__aeabi_fadd+0x1d0>
 80005fa:	1a2d      	subs	r5, r5, r0
 80005fc:	48b3      	ldr	r0, [pc, #716]	; (80008cc <__aeabi_fadd+0x334>)
 80005fe:	4038      	ands	r0, r7
 8000600:	0743      	lsls	r3, r0, #29
 8000602:	d004      	beq.n	800060e <__aeabi_fadd+0x76>
 8000604:	230f      	movs	r3, #15
 8000606:	4003      	ands	r3, r0
 8000608:	2b04      	cmp	r3, #4
 800060a:	d000      	beq.n	800060e <__aeabi_fadd+0x76>
 800060c:	3004      	adds	r0, #4
 800060e:	0143      	lsls	r3, r0, #5
 8000610:	d400      	bmi.n	8000614 <__aeabi_fadd+0x7c>
 8000612:	e078      	b.n	8000706 <__aeabi_fadd+0x16e>
 8000614:	1c6a      	adds	r2, r5, #1
 8000616:	2dfe      	cmp	r5, #254	; 0xfe
 8000618:	d065      	beq.n	80006e6 <__aeabi_fadd+0x14e>
 800061a:	0180      	lsls	r0, r0, #6
 800061c:	0a43      	lsrs	r3, r0, #9
 800061e:	469c      	mov	ip, r3
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	4663      	mov	r3, ip
 8000624:	05d0      	lsls	r0, r2, #23
 8000626:	4318      	orrs	r0, r3
 8000628:	07e4      	lsls	r4, r4, #31
 800062a:	4320      	orrs	r0, r4
 800062c:	bc80      	pop	{r7}
 800062e:	46b8      	mov	r8, r7
 8000630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000632:	2a00      	cmp	r2, #0
 8000634:	d035      	beq.n	80006a2 <__aeabi_fadd+0x10a>
 8000636:	1b7a      	subs	r2, r7, r5
 8000638:	2d00      	cmp	r5, #0
 800063a:	d000      	beq.n	800063e <__aeabi_fadd+0xa6>
 800063c:	e0af      	b.n	800079e <__aeabi_fadd+0x206>
 800063e:	4643      	mov	r3, r8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_fadd+0xae>
 8000644:	e0a7      	b.n	8000796 <__aeabi_fadd+0x1fe>
 8000646:	1e53      	subs	r3, r2, #1
 8000648:	2a01      	cmp	r2, #1
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0xb6>
 800064c:	e12f      	b.n	80008ae <__aeabi_fadd+0x316>
 800064e:	2aff      	cmp	r2, #255	; 0xff
 8000650:	d069      	beq.n	8000726 <__aeabi_fadd+0x18e>
 8000652:	001a      	movs	r2, r3
 8000654:	e0aa      	b.n	80007ac <__aeabi_fadd+0x214>
 8000656:	1be9      	subs	r1, r5, r7
 8000658:	2900      	cmp	r1, #0
 800065a:	dd70      	ble.n	800073e <__aeabi_fadd+0x1a6>
 800065c:	2f00      	cmp	r7, #0
 800065e:	d037      	beq.n	80006d0 <__aeabi_fadd+0x138>
 8000660:	2dff      	cmp	r5, #255	; 0xff
 8000662:	d062      	beq.n	800072a <__aeabi_fadd+0x192>
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	04db      	lsls	r3, r3, #19
 8000668:	431e      	orrs	r6, r3
 800066a:	291b      	cmp	r1, #27
 800066c:	dc00      	bgt.n	8000670 <__aeabi_fadd+0xd8>
 800066e:	e0b0      	b.n	80007d2 <__aeabi_fadd+0x23a>
 8000670:	2001      	movs	r0, #1
 8000672:	4440      	add	r0, r8
 8000674:	0143      	lsls	r3, r0, #5
 8000676:	d543      	bpl.n	8000700 <__aeabi_fadd+0x168>
 8000678:	3501      	adds	r5, #1
 800067a:	2dff      	cmp	r5, #255	; 0xff
 800067c:	d033      	beq.n	80006e6 <__aeabi_fadd+0x14e>
 800067e:	2301      	movs	r3, #1
 8000680:	4a93      	ldr	r2, [pc, #588]	; (80008d0 <__aeabi_fadd+0x338>)
 8000682:	4003      	ands	r3, r0
 8000684:	0840      	lsrs	r0, r0, #1
 8000686:	4010      	ands	r0, r2
 8000688:	4318      	orrs	r0, r3
 800068a:	e7b9      	b.n	8000600 <__aeabi_fadd+0x68>
 800068c:	2e00      	cmp	r6, #0
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0xfa>
 8000690:	e083      	b.n	800079a <__aeabi_fadd+0x202>
 8000692:	1e51      	subs	r1, r2, #1
 8000694:	2a01      	cmp	r2, #1
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x102>
 8000698:	e0d8      	b.n	800084c <__aeabi_fadd+0x2b4>
 800069a:	2aff      	cmp	r2, #255	; 0xff
 800069c:	d045      	beq.n	800072a <__aeabi_fadd+0x192>
 800069e:	000a      	movs	r2, r1
 80006a0:	e798      	b.n	80005d4 <__aeabi_fadd+0x3c>
 80006a2:	27fe      	movs	r7, #254	; 0xfe
 80006a4:	1c6a      	adds	r2, r5, #1
 80006a6:	4217      	tst	r7, r2
 80006a8:	d000      	beq.n	80006ac <__aeabi_fadd+0x114>
 80006aa:	e086      	b.n	80007ba <__aeabi_fadd+0x222>
 80006ac:	2d00      	cmp	r5, #0
 80006ae:	d000      	beq.n	80006b2 <__aeabi_fadd+0x11a>
 80006b0:	e0b7      	b.n	8000822 <__aeabi_fadd+0x28a>
 80006b2:	4643      	mov	r3, r8
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_fadd+0x122>
 80006b8:	e0f3      	b.n	80008a2 <__aeabi_fadd+0x30a>
 80006ba:	2200      	movs	r2, #0
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d0b0      	beq.n	8000622 <__aeabi_fadd+0x8a>
 80006c0:	1b98      	subs	r0, r3, r6
 80006c2:	0143      	lsls	r3, r0, #5
 80006c4:	d400      	bmi.n	80006c8 <__aeabi_fadd+0x130>
 80006c6:	e0fa      	b.n	80008be <__aeabi_fadd+0x326>
 80006c8:	4643      	mov	r3, r8
 80006ca:	000c      	movs	r4, r1
 80006cc:	1af0      	subs	r0, r6, r3
 80006ce:	e797      	b.n	8000600 <__aeabi_fadd+0x68>
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d100      	bne.n	80006d6 <__aeabi_fadd+0x13e>
 80006d4:	e0c8      	b.n	8000868 <__aeabi_fadd+0x2d0>
 80006d6:	1e4a      	subs	r2, r1, #1
 80006d8:	2901      	cmp	r1, #1
 80006da:	d100      	bne.n	80006de <__aeabi_fadd+0x146>
 80006dc:	e0ae      	b.n	800083c <__aeabi_fadd+0x2a4>
 80006de:	29ff      	cmp	r1, #255	; 0xff
 80006e0:	d023      	beq.n	800072a <__aeabi_fadd+0x192>
 80006e2:	0011      	movs	r1, r2
 80006e4:	e7c1      	b.n	800066a <__aeabi_fadd+0xd2>
 80006e6:	2300      	movs	r3, #0
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	469c      	mov	ip, r3
 80006ec:	e799      	b.n	8000622 <__aeabi_fadd+0x8a>
 80006ee:	21fe      	movs	r1, #254	; 0xfe
 80006f0:	1c6a      	adds	r2, r5, #1
 80006f2:	4211      	tst	r1, r2
 80006f4:	d077      	beq.n	80007e6 <__aeabi_fadd+0x24e>
 80006f6:	2aff      	cmp	r2, #255	; 0xff
 80006f8:	d0f5      	beq.n	80006e6 <__aeabi_fadd+0x14e>
 80006fa:	0015      	movs	r5, r2
 80006fc:	4446      	add	r6, r8
 80006fe:	0870      	lsrs	r0, r6, #1
 8000700:	0743      	lsls	r3, r0, #29
 8000702:	d000      	beq.n	8000706 <__aeabi_fadd+0x16e>
 8000704:	e77e      	b.n	8000604 <__aeabi_fadd+0x6c>
 8000706:	08c3      	lsrs	r3, r0, #3
 8000708:	2dff      	cmp	r5, #255	; 0xff
 800070a:	d00e      	beq.n	800072a <__aeabi_fadd+0x192>
 800070c:	025b      	lsls	r3, r3, #9
 800070e:	0a5b      	lsrs	r3, r3, #9
 8000710:	469c      	mov	ip, r3
 8000712:	b2ea      	uxtb	r2, r5
 8000714:	e785      	b.n	8000622 <__aeabi_fadd+0x8a>
 8000716:	2e00      	cmp	r6, #0
 8000718:	d007      	beq.n	800072a <__aeabi_fadd+0x192>
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	03d2      	lsls	r2, r2, #15
 800071e:	4213      	tst	r3, r2
 8000720:	d003      	beq.n	800072a <__aeabi_fadd+0x192>
 8000722:	4210      	tst	r0, r2
 8000724:	d101      	bne.n	800072a <__aeabi_fadd+0x192>
 8000726:	000c      	movs	r4, r1
 8000728:	0003      	movs	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0db      	beq.n	80006e6 <__aeabi_fadd+0x14e>
 800072e:	2080      	movs	r0, #128	; 0x80
 8000730:	03c0      	lsls	r0, r0, #15
 8000732:	4318      	orrs	r0, r3
 8000734:	0240      	lsls	r0, r0, #9
 8000736:	0a43      	lsrs	r3, r0, #9
 8000738:	469c      	mov	ip, r3
 800073a:	22ff      	movs	r2, #255	; 0xff
 800073c:	e771      	b.n	8000622 <__aeabi_fadd+0x8a>
 800073e:	2900      	cmp	r1, #0
 8000740:	d0d5      	beq.n	80006ee <__aeabi_fadd+0x156>
 8000742:	1b7a      	subs	r2, r7, r5
 8000744:	2d00      	cmp	r5, #0
 8000746:	d160      	bne.n	800080a <__aeabi_fadd+0x272>
 8000748:	4643      	mov	r3, r8
 800074a:	2b00      	cmp	r3, #0
 800074c:	d024      	beq.n	8000798 <__aeabi_fadd+0x200>
 800074e:	1e53      	subs	r3, r2, #1
 8000750:	2a01      	cmp	r2, #1
 8000752:	d073      	beq.n	800083c <__aeabi_fadd+0x2a4>
 8000754:	2aff      	cmp	r2, #255	; 0xff
 8000756:	d0e7      	beq.n	8000728 <__aeabi_fadd+0x190>
 8000758:	001a      	movs	r2, r3
 800075a:	2a1b      	cmp	r2, #27
 800075c:	dc00      	bgt.n	8000760 <__aeabi_fadd+0x1c8>
 800075e:	e085      	b.n	800086c <__aeabi_fadd+0x2d4>
 8000760:	2001      	movs	r0, #1
 8000762:	003d      	movs	r5, r7
 8000764:	1980      	adds	r0, r0, r6
 8000766:	e785      	b.n	8000674 <__aeabi_fadd+0xdc>
 8000768:	2320      	movs	r3, #32
 800076a:	003a      	movs	r2, r7
 800076c:	1b45      	subs	r5, r0, r5
 800076e:	0038      	movs	r0, r7
 8000770:	3501      	adds	r5, #1
 8000772:	40ea      	lsrs	r2, r5
 8000774:	1b5d      	subs	r5, r3, r5
 8000776:	40a8      	lsls	r0, r5
 8000778:	1e43      	subs	r3, r0, #1
 800077a:	4198      	sbcs	r0, r3
 800077c:	2500      	movs	r5, #0
 800077e:	4310      	orrs	r0, r2
 8000780:	e73e      	b.n	8000600 <__aeabi_fadd+0x68>
 8000782:	2320      	movs	r3, #32
 8000784:	0030      	movs	r0, r6
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	0031      	movs	r1, r6
 800078a:	4098      	lsls	r0, r3
 800078c:	40d1      	lsrs	r1, r2
 800078e:	1e43      	subs	r3, r0, #1
 8000790:	4198      	sbcs	r0, r3
 8000792:	4308      	orrs	r0, r1
 8000794:	e722      	b.n	80005dc <__aeabi_fadd+0x44>
 8000796:	000c      	movs	r4, r1
 8000798:	0003      	movs	r3, r0
 800079a:	0015      	movs	r5, r2
 800079c:	e7b4      	b.n	8000708 <__aeabi_fadd+0x170>
 800079e:	2fff      	cmp	r7, #255	; 0xff
 80007a0:	d0c1      	beq.n	8000726 <__aeabi_fadd+0x18e>
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	4640      	mov	r0, r8
 80007a6:	04db      	lsls	r3, r3, #19
 80007a8:	4318      	orrs	r0, r3
 80007aa:	4680      	mov	r8, r0
 80007ac:	2a1b      	cmp	r2, #27
 80007ae:	dd51      	ble.n	8000854 <__aeabi_fadd+0x2bc>
 80007b0:	2001      	movs	r0, #1
 80007b2:	000c      	movs	r4, r1
 80007b4:	003d      	movs	r5, r7
 80007b6:	1a30      	subs	r0, r6, r0
 80007b8:	e712      	b.n	80005e0 <__aeabi_fadd+0x48>
 80007ba:	4643      	mov	r3, r8
 80007bc:	1b9f      	subs	r7, r3, r6
 80007be:	017b      	lsls	r3, r7, #5
 80007c0:	d42b      	bmi.n	800081a <__aeabi_fadd+0x282>
 80007c2:	2f00      	cmp	r7, #0
 80007c4:	d000      	beq.n	80007c8 <__aeabi_fadd+0x230>
 80007c6:	e710      	b.n	80005ea <__aeabi_fadd+0x52>
 80007c8:	2300      	movs	r3, #0
 80007ca:	2400      	movs	r4, #0
 80007cc:	2200      	movs	r2, #0
 80007ce:	469c      	mov	ip, r3
 80007d0:	e727      	b.n	8000622 <__aeabi_fadd+0x8a>
 80007d2:	2320      	movs	r3, #32
 80007d4:	0032      	movs	r2, r6
 80007d6:	0030      	movs	r0, r6
 80007d8:	40ca      	lsrs	r2, r1
 80007da:	1a59      	subs	r1, r3, r1
 80007dc:	4088      	lsls	r0, r1
 80007de:	1e43      	subs	r3, r0, #1
 80007e0:	4198      	sbcs	r0, r3
 80007e2:	4310      	orrs	r0, r2
 80007e4:	e745      	b.n	8000672 <__aeabi_fadd+0xda>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d14a      	bne.n	8000880 <__aeabi_fadd+0x2e8>
 80007ea:	4643      	mov	r3, r8
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d063      	beq.n	80008b8 <__aeabi_fadd+0x320>
 80007f0:	2200      	movs	r2, #0
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fadd+0x260>
 80007f6:	e714      	b.n	8000622 <__aeabi_fadd+0x8a>
 80007f8:	0030      	movs	r0, r6
 80007fa:	4440      	add	r0, r8
 80007fc:	0143      	lsls	r3, r0, #5
 80007fe:	d400      	bmi.n	8000802 <__aeabi_fadd+0x26a>
 8000800:	e77e      	b.n	8000700 <__aeabi_fadd+0x168>
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <__aeabi_fadd+0x334>)
 8000804:	3501      	adds	r5, #1
 8000806:	4018      	ands	r0, r3
 8000808:	e77a      	b.n	8000700 <__aeabi_fadd+0x168>
 800080a:	2fff      	cmp	r7, #255	; 0xff
 800080c:	d08c      	beq.n	8000728 <__aeabi_fadd+0x190>
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	4641      	mov	r1, r8
 8000812:	04db      	lsls	r3, r3, #19
 8000814:	4319      	orrs	r1, r3
 8000816:	4688      	mov	r8, r1
 8000818:	e79f      	b.n	800075a <__aeabi_fadd+0x1c2>
 800081a:	4643      	mov	r3, r8
 800081c:	000c      	movs	r4, r1
 800081e:	1af7      	subs	r7, r6, r3
 8000820:	e6e3      	b.n	80005ea <__aeabi_fadd+0x52>
 8000822:	4642      	mov	r2, r8
 8000824:	2a00      	cmp	r2, #0
 8000826:	d000      	beq.n	800082a <__aeabi_fadd+0x292>
 8000828:	e775      	b.n	8000716 <__aeabi_fadd+0x17e>
 800082a:	2e00      	cmp	r6, #0
 800082c:	d000      	beq.n	8000830 <__aeabi_fadd+0x298>
 800082e:	e77a      	b.n	8000726 <__aeabi_fadd+0x18e>
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	03db      	lsls	r3, r3, #15
 8000834:	2400      	movs	r4, #0
 8000836:	469c      	mov	ip, r3
 8000838:	22ff      	movs	r2, #255	; 0xff
 800083a:	e6f2      	b.n	8000622 <__aeabi_fadd+0x8a>
 800083c:	0030      	movs	r0, r6
 800083e:	4440      	add	r0, r8
 8000840:	2501      	movs	r5, #1
 8000842:	0143      	lsls	r3, r0, #5
 8000844:	d400      	bmi.n	8000848 <__aeabi_fadd+0x2b0>
 8000846:	e75b      	b.n	8000700 <__aeabi_fadd+0x168>
 8000848:	2502      	movs	r5, #2
 800084a:	e718      	b.n	800067e <__aeabi_fadd+0xe6>
 800084c:	4643      	mov	r3, r8
 800084e:	2501      	movs	r5, #1
 8000850:	1b98      	subs	r0, r3, r6
 8000852:	e6c5      	b.n	80005e0 <__aeabi_fadd+0x48>
 8000854:	2320      	movs	r3, #32
 8000856:	4644      	mov	r4, r8
 8000858:	4640      	mov	r0, r8
 800085a:	40d4      	lsrs	r4, r2
 800085c:	1a9a      	subs	r2, r3, r2
 800085e:	4090      	lsls	r0, r2
 8000860:	1e43      	subs	r3, r0, #1
 8000862:	4198      	sbcs	r0, r3
 8000864:	4320      	orrs	r0, r4
 8000866:	e7a4      	b.n	80007b2 <__aeabi_fadd+0x21a>
 8000868:	000d      	movs	r5, r1
 800086a:	e74d      	b.n	8000708 <__aeabi_fadd+0x170>
 800086c:	2320      	movs	r3, #32
 800086e:	4641      	mov	r1, r8
 8000870:	4640      	mov	r0, r8
 8000872:	40d1      	lsrs	r1, r2
 8000874:	1a9a      	subs	r2, r3, r2
 8000876:	4090      	lsls	r0, r2
 8000878:	1e43      	subs	r3, r0, #1
 800087a:	4198      	sbcs	r0, r3
 800087c:	4308      	orrs	r0, r1
 800087e:	e770      	b.n	8000762 <__aeabi_fadd+0x1ca>
 8000880:	4642      	mov	r2, r8
 8000882:	2a00      	cmp	r2, #0
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x2f0>
 8000886:	e74f      	b.n	8000728 <__aeabi_fadd+0x190>
 8000888:	2e00      	cmp	r6, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x2f6>
 800088c:	e74d      	b.n	800072a <__aeabi_fadd+0x192>
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	03d2      	lsls	r2, r2, #15
 8000892:	4213      	tst	r3, r2
 8000894:	d100      	bne.n	8000898 <__aeabi_fadd+0x300>
 8000896:	e748      	b.n	800072a <__aeabi_fadd+0x192>
 8000898:	4210      	tst	r0, r2
 800089a:	d000      	beq.n	800089e <__aeabi_fadd+0x306>
 800089c:	e745      	b.n	800072a <__aeabi_fadd+0x192>
 800089e:	0003      	movs	r3, r0
 80008a0:	e743      	b.n	800072a <__aeabi_fadd+0x192>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	d090      	beq.n	80007c8 <__aeabi_fadd+0x230>
 80008a6:	000c      	movs	r4, r1
 80008a8:	4684      	mov	ip, r0
 80008aa:	2200      	movs	r2, #0
 80008ac:	e6b9      	b.n	8000622 <__aeabi_fadd+0x8a>
 80008ae:	4643      	mov	r3, r8
 80008b0:	000c      	movs	r4, r1
 80008b2:	1af0      	subs	r0, r6, r3
 80008b4:	3501      	adds	r5, #1
 80008b6:	e693      	b.n	80005e0 <__aeabi_fadd+0x48>
 80008b8:	4684      	mov	ip, r0
 80008ba:	2200      	movs	r2, #0
 80008bc:	e6b1      	b.n	8000622 <__aeabi_fadd+0x8a>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d000      	beq.n	80008c4 <__aeabi_fadd+0x32c>
 80008c2:	e71d      	b.n	8000700 <__aeabi_fadd+0x168>
 80008c4:	2300      	movs	r3, #0
 80008c6:	2400      	movs	r4, #0
 80008c8:	469c      	mov	ip, r3
 80008ca:	e6aa      	b.n	8000622 <__aeabi_fadd+0x8a>
 80008cc:	fbffffff 	.word	0xfbffffff
 80008d0:	7dffffff 	.word	0x7dffffff

080008d4 <__aeabi_fdiv>:
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	464f      	mov	r7, r9
 80008d8:	4646      	mov	r6, r8
 80008da:	46d6      	mov	lr, sl
 80008dc:	0245      	lsls	r5, r0, #9
 80008de:	b5c0      	push	{r6, r7, lr}
 80008e0:	0047      	lsls	r7, r0, #1
 80008e2:	1c0c      	adds	r4, r1, #0
 80008e4:	0a6d      	lsrs	r5, r5, #9
 80008e6:	0e3f      	lsrs	r7, r7, #24
 80008e8:	0fc6      	lsrs	r6, r0, #31
 80008ea:	2f00      	cmp	r7, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fdiv+0x1c>
 80008ee:	e070      	b.n	80009d2 <__aeabi_fdiv+0xfe>
 80008f0:	2fff      	cmp	r7, #255	; 0xff
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fdiv+0x22>
 80008f4:	e075      	b.n	80009e2 <__aeabi_fdiv+0x10e>
 80008f6:	00eb      	lsls	r3, r5, #3
 80008f8:	2580      	movs	r5, #128	; 0x80
 80008fa:	04ed      	lsls	r5, r5, #19
 80008fc:	431d      	orrs	r5, r3
 80008fe:	2300      	movs	r3, #0
 8000900:	4699      	mov	r9, r3
 8000902:	469a      	mov	sl, r3
 8000904:	3f7f      	subs	r7, #127	; 0x7f
 8000906:	0260      	lsls	r0, r4, #9
 8000908:	0a43      	lsrs	r3, r0, #9
 800090a:	4698      	mov	r8, r3
 800090c:	0063      	lsls	r3, r4, #1
 800090e:	0e1b      	lsrs	r3, r3, #24
 8000910:	0fe4      	lsrs	r4, r4, #31
 8000912:	2b00      	cmp	r3, #0
 8000914:	d04e      	beq.n	80009b4 <__aeabi_fdiv+0xe0>
 8000916:	2bff      	cmp	r3, #255	; 0xff
 8000918:	d046      	beq.n	80009a8 <__aeabi_fdiv+0xd4>
 800091a:	4642      	mov	r2, r8
 800091c:	00d0      	lsls	r0, r2, #3
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	04d2      	lsls	r2, r2, #19
 8000922:	4302      	orrs	r2, r0
 8000924:	4690      	mov	r8, r2
 8000926:	2200      	movs	r2, #0
 8000928:	3b7f      	subs	r3, #127	; 0x7f
 800092a:	0031      	movs	r1, r6
 800092c:	1aff      	subs	r7, r7, r3
 800092e:	464b      	mov	r3, r9
 8000930:	4061      	eors	r1, r4
 8000932:	b2c9      	uxtb	r1, r1
 8000934:	4313      	orrs	r3, r2
 8000936:	2b0f      	cmp	r3, #15
 8000938:	d900      	bls.n	800093c <__aeabi_fdiv+0x68>
 800093a:	e0b5      	b.n	8000aa8 <__aeabi_fdiv+0x1d4>
 800093c:	486e      	ldr	r0, [pc, #440]	; (8000af8 <__aeabi_fdiv+0x224>)
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	58c3      	ldr	r3, [r0, r3]
 8000942:	469f      	mov	pc, r3
 8000944:	2300      	movs	r3, #0
 8000946:	4698      	mov	r8, r3
 8000948:	0026      	movs	r6, r4
 800094a:	4645      	mov	r5, r8
 800094c:	4692      	mov	sl, r2
 800094e:	4653      	mov	r3, sl
 8000950:	2b02      	cmp	r3, #2
 8000952:	d100      	bne.n	8000956 <__aeabi_fdiv+0x82>
 8000954:	e089      	b.n	8000a6a <__aeabi_fdiv+0x196>
 8000956:	2b03      	cmp	r3, #3
 8000958:	d100      	bne.n	800095c <__aeabi_fdiv+0x88>
 800095a:	e09e      	b.n	8000a9a <__aeabi_fdiv+0x1c6>
 800095c:	2b01      	cmp	r3, #1
 800095e:	d018      	beq.n	8000992 <__aeabi_fdiv+0xbe>
 8000960:	003b      	movs	r3, r7
 8000962:	337f      	adds	r3, #127	; 0x7f
 8000964:	2b00      	cmp	r3, #0
 8000966:	dd69      	ble.n	8000a3c <__aeabi_fdiv+0x168>
 8000968:	076a      	lsls	r2, r5, #29
 800096a:	d004      	beq.n	8000976 <__aeabi_fdiv+0xa2>
 800096c:	220f      	movs	r2, #15
 800096e:	402a      	ands	r2, r5
 8000970:	2a04      	cmp	r2, #4
 8000972:	d000      	beq.n	8000976 <__aeabi_fdiv+0xa2>
 8000974:	3504      	adds	r5, #4
 8000976:	012a      	lsls	r2, r5, #4
 8000978:	d503      	bpl.n	8000982 <__aeabi_fdiv+0xae>
 800097a:	4b60      	ldr	r3, [pc, #384]	; (8000afc <__aeabi_fdiv+0x228>)
 800097c:	401d      	ands	r5, r3
 800097e:	003b      	movs	r3, r7
 8000980:	3380      	adds	r3, #128	; 0x80
 8000982:	2bfe      	cmp	r3, #254	; 0xfe
 8000984:	dd00      	ble.n	8000988 <__aeabi_fdiv+0xb4>
 8000986:	e070      	b.n	8000a6a <__aeabi_fdiv+0x196>
 8000988:	01ad      	lsls	r5, r5, #6
 800098a:	0a6d      	lsrs	r5, r5, #9
 800098c:	b2d8      	uxtb	r0, r3
 800098e:	e002      	b.n	8000996 <__aeabi_fdiv+0xc2>
 8000990:	000e      	movs	r6, r1
 8000992:	2000      	movs	r0, #0
 8000994:	2500      	movs	r5, #0
 8000996:	05c0      	lsls	r0, r0, #23
 8000998:	4328      	orrs	r0, r5
 800099a:	07f6      	lsls	r6, r6, #31
 800099c:	4330      	orrs	r0, r6
 800099e:	bce0      	pop	{r5, r6, r7}
 80009a0:	46ba      	mov	sl, r7
 80009a2:	46b1      	mov	r9, r6
 80009a4:	46a8      	mov	r8, r5
 80009a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a8:	4643      	mov	r3, r8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d13f      	bne.n	8000a2e <__aeabi_fdiv+0x15a>
 80009ae:	2202      	movs	r2, #2
 80009b0:	3fff      	subs	r7, #255	; 0xff
 80009b2:	e003      	b.n	80009bc <__aeabi_fdiv+0xe8>
 80009b4:	4643      	mov	r3, r8
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d12d      	bne.n	8000a16 <__aeabi_fdiv+0x142>
 80009ba:	2201      	movs	r2, #1
 80009bc:	0031      	movs	r1, r6
 80009be:	464b      	mov	r3, r9
 80009c0:	4061      	eors	r1, r4
 80009c2:	b2c9      	uxtb	r1, r1
 80009c4:	4313      	orrs	r3, r2
 80009c6:	2b0f      	cmp	r3, #15
 80009c8:	d834      	bhi.n	8000a34 <__aeabi_fdiv+0x160>
 80009ca:	484d      	ldr	r0, [pc, #308]	; (8000b00 <__aeabi_fdiv+0x22c>)
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	58c3      	ldr	r3, [r0, r3]
 80009d0:	469f      	mov	pc, r3
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d113      	bne.n	80009fe <__aeabi_fdiv+0x12a>
 80009d6:	2304      	movs	r3, #4
 80009d8:	4699      	mov	r9, r3
 80009da:	3b03      	subs	r3, #3
 80009dc:	2700      	movs	r7, #0
 80009de:	469a      	mov	sl, r3
 80009e0:	e791      	b.n	8000906 <__aeabi_fdiv+0x32>
 80009e2:	2d00      	cmp	r5, #0
 80009e4:	d105      	bne.n	80009f2 <__aeabi_fdiv+0x11e>
 80009e6:	2308      	movs	r3, #8
 80009e8:	4699      	mov	r9, r3
 80009ea:	3b06      	subs	r3, #6
 80009ec:	27ff      	movs	r7, #255	; 0xff
 80009ee:	469a      	mov	sl, r3
 80009f0:	e789      	b.n	8000906 <__aeabi_fdiv+0x32>
 80009f2:	230c      	movs	r3, #12
 80009f4:	4699      	mov	r9, r3
 80009f6:	3b09      	subs	r3, #9
 80009f8:	27ff      	movs	r7, #255	; 0xff
 80009fa:	469a      	mov	sl, r3
 80009fc:	e783      	b.n	8000906 <__aeabi_fdiv+0x32>
 80009fe:	0028      	movs	r0, r5
 8000a00:	f002 fb6a 	bl	80030d8 <__clzsi2>
 8000a04:	2776      	movs	r7, #118	; 0x76
 8000a06:	1f43      	subs	r3, r0, #5
 8000a08:	409d      	lsls	r5, r3
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	427f      	negs	r7, r7
 8000a0e:	4699      	mov	r9, r3
 8000a10:	469a      	mov	sl, r3
 8000a12:	1a3f      	subs	r7, r7, r0
 8000a14:	e777      	b.n	8000906 <__aeabi_fdiv+0x32>
 8000a16:	4640      	mov	r0, r8
 8000a18:	f002 fb5e 	bl	80030d8 <__clzsi2>
 8000a1c:	4642      	mov	r2, r8
 8000a1e:	1f43      	subs	r3, r0, #5
 8000a20:	409a      	lsls	r2, r3
 8000a22:	2376      	movs	r3, #118	; 0x76
 8000a24:	425b      	negs	r3, r3
 8000a26:	4690      	mov	r8, r2
 8000a28:	1a1b      	subs	r3, r3, r0
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	e77d      	b.n	800092a <__aeabi_fdiv+0x56>
 8000a2e:	23ff      	movs	r3, #255	; 0xff
 8000a30:	2203      	movs	r2, #3
 8000a32:	e77a      	b.n	800092a <__aeabi_fdiv+0x56>
 8000a34:	000e      	movs	r6, r1
 8000a36:	20ff      	movs	r0, #255	; 0xff
 8000a38:	2500      	movs	r5, #0
 8000a3a:	e7ac      	b.n	8000996 <__aeabi_fdiv+0xc2>
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	1ac0      	subs	r0, r0, r3
 8000a40:	281b      	cmp	r0, #27
 8000a42:	dca6      	bgt.n	8000992 <__aeabi_fdiv+0xbe>
 8000a44:	379e      	adds	r7, #158	; 0x9e
 8000a46:	002a      	movs	r2, r5
 8000a48:	40bd      	lsls	r5, r7
 8000a4a:	40c2      	lsrs	r2, r0
 8000a4c:	1e6b      	subs	r3, r5, #1
 8000a4e:	419d      	sbcs	r5, r3
 8000a50:	4315      	orrs	r5, r2
 8000a52:	076b      	lsls	r3, r5, #29
 8000a54:	d004      	beq.n	8000a60 <__aeabi_fdiv+0x18c>
 8000a56:	230f      	movs	r3, #15
 8000a58:	402b      	ands	r3, r5
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d000      	beq.n	8000a60 <__aeabi_fdiv+0x18c>
 8000a5e:	3504      	adds	r5, #4
 8000a60:	016b      	lsls	r3, r5, #5
 8000a62:	d544      	bpl.n	8000aee <__aeabi_fdiv+0x21a>
 8000a64:	2001      	movs	r0, #1
 8000a66:	2500      	movs	r5, #0
 8000a68:	e795      	b.n	8000996 <__aeabi_fdiv+0xc2>
 8000a6a:	20ff      	movs	r0, #255	; 0xff
 8000a6c:	2500      	movs	r5, #0
 8000a6e:	e792      	b.n	8000996 <__aeabi_fdiv+0xc2>
 8000a70:	2580      	movs	r5, #128	; 0x80
 8000a72:	2600      	movs	r6, #0
 8000a74:	20ff      	movs	r0, #255	; 0xff
 8000a76:	03ed      	lsls	r5, r5, #15
 8000a78:	e78d      	b.n	8000996 <__aeabi_fdiv+0xc2>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	2080      	movs	r0, #128	; 0x80
 8000a80:	03c0      	lsls	r0, r0, #15
 8000a82:	4205      	tst	r5, r0
 8000a84:	d009      	beq.n	8000a9a <__aeabi_fdiv+0x1c6>
 8000a86:	4643      	mov	r3, r8
 8000a88:	4203      	tst	r3, r0
 8000a8a:	d106      	bne.n	8000a9a <__aeabi_fdiv+0x1c6>
 8000a8c:	4645      	mov	r5, r8
 8000a8e:	4305      	orrs	r5, r0
 8000a90:	026d      	lsls	r5, r5, #9
 8000a92:	0026      	movs	r6, r4
 8000a94:	20ff      	movs	r0, #255	; 0xff
 8000a96:	0a6d      	lsrs	r5, r5, #9
 8000a98:	e77d      	b.n	8000996 <__aeabi_fdiv+0xc2>
 8000a9a:	2080      	movs	r0, #128	; 0x80
 8000a9c:	03c0      	lsls	r0, r0, #15
 8000a9e:	4305      	orrs	r5, r0
 8000aa0:	026d      	lsls	r5, r5, #9
 8000aa2:	20ff      	movs	r0, #255	; 0xff
 8000aa4:	0a6d      	lsrs	r5, r5, #9
 8000aa6:	e776      	b.n	8000996 <__aeabi_fdiv+0xc2>
 8000aa8:	4642      	mov	r2, r8
 8000aaa:	016b      	lsls	r3, r5, #5
 8000aac:	0150      	lsls	r0, r2, #5
 8000aae:	4283      	cmp	r3, r0
 8000ab0:	d219      	bcs.n	8000ae6 <__aeabi_fdiv+0x212>
 8000ab2:	221b      	movs	r2, #27
 8000ab4:	2500      	movs	r5, #0
 8000ab6:	3f01      	subs	r7, #1
 8000ab8:	2601      	movs	r6, #1
 8000aba:	001c      	movs	r4, r3
 8000abc:	006d      	lsls	r5, r5, #1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	2c00      	cmp	r4, #0
 8000ac2:	db01      	blt.n	8000ac8 <__aeabi_fdiv+0x1f4>
 8000ac4:	4298      	cmp	r0, r3
 8000ac6:	d801      	bhi.n	8000acc <__aeabi_fdiv+0x1f8>
 8000ac8:	1a1b      	subs	r3, r3, r0
 8000aca:	4335      	orrs	r5, r6
 8000acc:	3a01      	subs	r2, #1
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d1f3      	bne.n	8000aba <__aeabi_fdiv+0x1e6>
 8000ad2:	1e5a      	subs	r2, r3, #1
 8000ad4:	4193      	sbcs	r3, r2
 8000ad6:	431d      	orrs	r5, r3
 8000ad8:	003b      	movs	r3, r7
 8000ada:	337f      	adds	r3, #127	; 0x7f
 8000adc:	000e      	movs	r6, r1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	dd00      	ble.n	8000ae4 <__aeabi_fdiv+0x210>
 8000ae2:	e741      	b.n	8000968 <__aeabi_fdiv+0x94>
 8000ae4:	e7aa      	b.n	8000a3c <__aeabi_fdiv+0x168>
 8000ae6:	221a      	movs	r2, #26
 8000ae8:	2501      	movs	r5, #1
 8000aea:	1a1b      	subs	r3, r3, r0
 8000aec:	e7e4      	b.n	8000ab8 <__aeabi_fdiv+0x1e4>
 8000aee:	01ad      	lsls	r5, r5, #6
 8000af0:	2000      	movs	r0, #0
 8000af2:	0a6d      	lsrs	r5, r5, #9
 8000af4:	e74f      	b.n	8000996 <__aeabi_fdiv+0xc2>
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	0800d1b8 	.word	0x0800d1b8
 8000afc:	f7ffffff 	.word	0xf7ffffff
 8000b00:	0800d1f8 	.word	0x0800d1f8

08000b04 <__eqsf2>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	0042      	lsls	r2, r0, #1
 8000b08:	0245      	lsls	r5, r0, #9
 8000b0a:	024e      	lsls	r6, r1, #9
 8000b0c:	004c      	lsls	r4, r1, #1
 8000b0e:	0fc3      	lsrs	r3, r0, #31
 8000b10:	0a6d      	lsrs	r5, r5, #9
 8000b12:	2001      	movs	r0, #1
 8000b14:	0e12      	lsrs	r2, r2, #24
 8000b16:	0a76      	lsrs	r6, r6, #9
 8000b18:	0e24      	lsrs	r4, r4, #24
 8000b1a:	0fc9      	lsrs	r1, r1, #31
 8000b1c:	2aff      	cmp	r2, #255	; 0xff
 8000b1e:	d006      	beq.n	8000b2e <__eqsf2+0x2a>
 8000b20:	2cff      	cmp	r4, #255	; 0xff
 8000b22:	d003      	beq.n	8000b2c <__eqsf2+0x28>
 8000b24:	42a2      	cmp	r2, r4
 8000b26:	d101      	bne.n	8000b2c <__eqsf2+0x28>
 8000b28:	42b5      	cmp	r5, r6
 8000b2a:	d006      	beq.n	8000b3a <__eqsf2+0x36>
 8000b2c:	bd70      	pop	{r4, r5, r6, pc}
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d1fc      	bne.n	8000b2c <__eqsf2+0x28>
 8000b32:	2cff      	cmp	r4, #255	; 0xff
 8000b34:	d1fa      	bne.n	8000b2c <__eqsf2+0x28>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d1f8      	bne.n	8000b2c <__eqsf2+0x28>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d006      	beq.n	8000b4c <__eqsf2+0x48>
 8000b3e:	2001      	movs	r0, #1
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	d1f3      	bne.n	8000b2c <__eqsf2+0x28>
 8000b44:	0028      	movs	r0, r5
 8000b46:	1e43      	subs	r3, r0, #1
 8000b48:	4198      	sbcs	r0, r3
 8000b4a:	e7ef      	b.n	8000b2c <__eqsf2+0x28>
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e7ed      	b.n	8000b2c <__eqsf2+0x28>

08000b50 <__gesf2>:
 8000b50:	b570      	push	{r4, r5, r6, lr}
 8000b52:	0042      	lsls	r2, r0, #1
 8000b54:	0245      	lsls	r5, r0, #9
 8000b56:	024e      	lsls	r6, r1, #9
 8000b58:	004c      	lsls	r4, r1, #1
 8000b5a:	0fc3      	lsrs	r3, r0, #31
 8000b5c:	0a6d      	lsrs	r5, r5, #9
 8000b5e:	0e12      	lsrs	r2, r2, #24
 8000b60:	0a76      	lsrs	r6, r6, #9
 8000b62:	0e24      	lsrs	r4, r4, #24
 8000b64:	0fc8      	lsrs	r0, r1, #31
 8000b66:	2aff      	cmp	r2, #255	; 0xff
 8000b68:	d01b      	beq.n	8000ba2 <__gesf2+0x52>
 8000b6a:	2cff      	cmp	r4, #255	; 0xff
 8000b6c:	d00e      	beq.n	8000b8c <__gesf2+0x3c>
 8000b6e:	2a00      	cmp	r2, #0
 8000b70:	d11b      	bne.n	8000baa <__gesf2+0x5a>
 8000b72:	2c00      	cmp	r4, #0
 8000b74:	d101      	bne.n	8000b7a <__gesf2+0x2a>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d01c      	beq.n	8000bb4 <__gesf2+0x64>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d00c      	beq.n	8000b98 <__gesf2+0x48>
 8000b7e:	4283      	cmp	r3, r0
 8000b80:	d01c      	beq.n	8000bbc <__gesf2+0x6c>
 8000b82:	2102      	movs	r1, #2
 8000b84:	1e58      	subs	r0, r3, #1
 8000b86:	4008      	ands	r0, r1
 8000b88:	3801      	subs	r0, #1
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}
 8000b8c:	2e00      	cmp	r6, #0
 8000b8e:	d122      	bne.n	8000bd6 <__gesf2+0x86>
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d1f4      	bne.n	8000b7e <__gesf2+0x2e>
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d1f2      	bne.n	8000b7e <__gesf2+0x2e>
 8000b98:	2800      	cmp	r0, #0
 8000b9a:	d1f6      	bne.n	8000b8a <__gesf2+0x3a>
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	4240      	negs	r0, r0
 8000ba0:	e7f3      	b.n	8000b8a <__gesf2+0x3a>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d117      	bne.n	8000bd6 <__gesf2+0x86>
 8000ba6:	2cff      	cmp	r4, #255	; 0xff
 8000ba8:	d0f0      	beq.n	8000b8c <__gesf2+0x3c>
 8000baa:	2c00      	cmp	r4, #0
 8000bac:	d1e7      	bne.n	8000b7e <__gesf2+0x2e>
 8000bae:	2e00      	cmp	r6, #0
 8000bb0:	d1e5      	bne.n	8000b7e <__gesf2+0x2e>
 8000bb2:	e7e6      	b.n	8000b82 <__gesf2+0x32>
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d0e7      	beq.n	8000b8a <__gesf2+0x3a>
 8000bba:	e7e2      	b.n	8000b82 <__gesf2+0x32>
 8000bbc:	42a2      	cmp	r2, r4
 8000bbe:	dc05      	bgt.n	8000bcc <__gesf2+0x7c>
 8000bc0:	dbea      	blt.n	8000b98 <__gesf2+0x48>
 8000bc2:	42b5      	cmp	r5, r6
 8000bc4:	d802      	bhi.n	8000bcc <__gesf2+0x7c>
 8000bc6:	d3e7      	bcc.n	8000b98 <__gesf2+0x48>
 8000bc8:	2000      	movs	r0, #0
 8000bca:	e7de      	b.n	8000b8a <__gesf2+0x3a>
 8000bcc:	4243      	negs	r3, r0
 8000bce:	4158      	adcs	r0, r3
 8000bd0:	0040      	lsls	r0, r0, #1
 8000bd2:	3801      	subs	r0, #1
 8000bd4:	e7d9      	b.n	8000b8a <__gesf2+0x3a>
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	4240      	negs	r0, r0
 8000bda:	e7d6      	b.n	8000b8a <__gesf2+0x3a>

08000bdc <__lesf2>:
 8000bdc:	b570      	push	{r4, r5, r6, lr}
 8000bde:	0042      	lsls	r2, r0, #1
 8000be0:	0245      	lsls	r5, r0, #9
 8000be2:	024e      	lsls	r6, r1, #9
 8000be4:	004c      	lsls	r4, r1, #1
 8000be6:	0fc3      	lsrs	r3, r0, #31
 8000be8:	0a6d      	lsrs	r5, r5, #9
 8000bea:	0e12      	lsrs	r2, r2, #24
 8000bec:	0a76      	lsrs	r6, r6, #9
 8000bee:	0e24      	lsrs	r4, r4, #24
 8000bf0:	0fc8      	lsrs	r0, r1, #31
 8000bf2:	2aff      	cmp	r2, #255	; 0xff
 8000bf4:	d00b      	beq.n	8000c0e <__lesf2+0x32>
 8000bf6:	2cff      	cmp	r4, #255	; 0xff
 8000bf8:	d00d      	beq.n	8000c16 <__lesf2+0x3a>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d11f      	bne.n	8000c3e <__lesf2+0x62>
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d116      	bne.n	8000c30 <__lesf2+0x54>
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d114      	bne.n	8000c30 <__lesf2+0x54>
 8000c06:	2000      	movs	r0, #0
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d010      	beq.n	8000c2e <__lesf2+0x52>
 8000c0c:	e009      	b.n	8000c22 <__lesf2+0x46>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d10c      	bne.n	8000c2c <__lesf2+0x50>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d113      	bne.n	8000c3e <__lesf2+0x62>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d108      	bne.n	8000c2c <__lesf2+0x50>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d008      	beq.n	8000c30 <__lesf2+0x54>
 8000c1e:	4283      	cmp	r3, r0
 8000c20:	d012      	beq.n	8000c48 <__lesf2+0x6c>
 8000c22:	2102      	movs	r1, #2
 8000c24:	1e58      	subs	r0, r3, #1
 8000c26:	4008      	ands	r0, r1
 8000c28:	3801      	subs	r0, #1
 8000c2a:	e000      	b.n	8000c2e <__lesf2+0x52>
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	bd70      	pop	{r4, r5, r6, pc}
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d1f4      	bne.n	8000c1e <__lesf2+0x42>
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d1fa      	bne.n	8000c2e <__lesf2+0x52>
 8000c38:	2001      	movs	r0, #1
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	e7f7      	b.n	8000c2e <__lesf2+0x52>
 8000c3e:	2c00      	cmp	r4, #0
 8000c40:	d1ed      	bne.n	8000c1e <__lesf2+0x42>
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d1eb      	bne.n	8000c1e <__lesf2+0x42>
 8000c46:	e7ec      	b.n	8000c22 <__lesf2+0x46>
 8000c48:	42a2      	cmp	r2, r4
 8000c4a:	dc05      	bgt.n	8000c58 <__lesf2+0x7c>
 8000c4c:	dbf2      	blt.n	8000c34 <__lesf2+0x58>
 8000c4e:	42b5      	cmp	r5, r6
 8000c50:	d802      	bhi.n	8000c58 <__lesf2+0x7c>
 8000c52:	d3ef      	bcc.n	8000c34 <__lesf2+0x58>
 8000c54:	2000      	movs	r0, #0
 8000c56:	e7ea      	b.n	8000c2e <__lesf2+0x52>
 8000c58:	4243      	negs	r3, r0
 8000c5a:	4158      	adcs	r0, r3
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	3801      	subs	r0, #1
 8000c60:	e7e5      	b.n	8000c2e <__lesf2+0x52>
 8000c62:	46c0      	nop			; (mov r8, r8)

08000c64 <__aeabi_fmul>:
 8000c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c66:	464f      	mov	r7, r9
 8000c68:	4646      	mov	r6, r8
 8000c6a:	46d6      	mov	lr, sl
 8000c6c:	0244      	lsls	r4, r0, #9
 8000c6e:	0045      	lsls	r5, r0, #1
 8000c70:	b5c0      	push	{r6, r7, lr}
 8000c72:	0a64      	lsrs	r4, r4, #9
 8000c74:	1c0f      	adds	r7, r1, #0
 8000c76:	0e2d      	lsrs	r5, r5, #24
 8000c78:	0fc6      	lsrs	r6, r0, #31
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_fmul+0x1c>
 8000c7e:	e08d      	b.n	8000d9c <__aeabi_fmul+0x138>
 8000c80:	2dff      	cmp	r5, #255	; 0xff
 8000c82:	d100      	bne.n	8000c86 <__aeabi_fmul+0x22>
 8000c84:	e092      	b.n	8000dac <__aeabi_fmul+0x148>
 8000c86:	2300      	movs	r3, #0
 8000c88:	2080      	movs	r0, #128	; 0x80
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	469a      	mov	sl, r3
 8000c8e:	00e4      	lsls	r4, r4, #3
 8000c90:	04c0      	lsls	r0, r0, #19
 8000c92:	4304      	orrs	r4, r0
 8000c94:	3d7f      	subs	r5, #127	; 0x7f
 8000c96:	0278      	lsls	r0, r7, #9
 8000c98:	0a43      	lsrs	r3, r0, #9
 8000c9a:	4698      	mov	r8, r3
 8000c9c:	007b      	lsls	r3, r7, #1
 8000c9e:	0e1b      	lsrs	r3, r3, #24
 8000ca0:	0fff      	lsrs	r7, r7, #31
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_fmul+0x44>
 8000ca6:	e070      	b.n	8000d8a <__aeabi_fmul+0x126>
 8000ca8:	2bff      	cmp	r3, #255	; 0xff
 8000caa:	d100      	bne.n	8000cae <__aeabi_fmul+0x4a>
 8000cac:	e086      	b.n	8000dbc <__aeabi_fmul+0x158>
 8000cae:	4642      	mov	r2, r8
 8000cb0:	00d0      	lsls	r0, r2, #3
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	3b7f      	subs	r3, #127	; 0x7f
 8000cb6:	18ed      	adds	r5, r5, r3
 8000cb8:	2300      	movs	r3, #0
 8000cba:	04d2      	lsls	r2, r2, #19
 8000cbc:	4302      	orrs	r2, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	469c      	mov	ip, r3
 8000cc2:	0031      	movs	r1, r6
 8000cc4:	464b      	mov	r3, r9
 8000cc6:	4079      	eors	r1, r7
 8000cc8:	1c68      	adds	r0, r5, #1
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	d81c      	bhi.n	8000d08 <__aeabi_fmul+0xa4>
 8000cce:	4a76      	ldr	r2, [pc, #472]	; (8000ea8 <__aeabi_fmul+0x244>)
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	58d3      	ldr	r3, [r2, r3]
 8000cd4:	469f      	mov	pc, r3
 8000cd6:	0039      	movs	r1, r7
 8000cd8:	4644      	mov	r4, r8
 8000cda:	46e2      	mov	sl, ip
 8000cdc:	4653      	mov	r3, sl
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d00f      	beq.n	8000d02 <__aeabi_fmul+0x9e>
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_fmul+0x84>
 8000ce6:	e0d7      	b.n	8000e98 <__aeabi_fmul+0x234>
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d137      	bne.n	8000d5c <__aeabi_fmul+0xf8>
 8000cec:	2000      	movs	r0, #0
 8000cee:	2400      	movs	r4, #0
 8000cf0:	05c0      	lsls	r0, r0, #23
 8000cf2:	4320      	orrs	r0, r4
 8000cf4:	07c9      	lsls	r1, r1, #31
 8000cf6:	4308      	orrs	r0, r1
 8000cf8:	bce0      	pop	{r5, r6, r7}
 8000cfa:	46ba      	mov	sl, r7
 8000cfc:	46b1      	mov	r9, r6
 8000cfe:	46a8      	mov	r8, r5
 8000d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d02:	20ff      	movs	r0, #255	; 0xff
 8000d04:	2400      	movs	r4, #0
 8000d06:	e7f3      	b.n	8000cf0 <__aeabi_fmul+0x8c>
 8000d08:	0c26      	lsrs	r6, r4, #16
 8000d0a:	0424      	lsls	r4, r4, #16
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	4644      	mov	r4, r8
 8000d10:	0424      	lsls	r4, r4, #16
 8000d12:	0c24      	lsrs	r4, r4, #16
 8000d14:	4643      	mov	r3, r8
 8000d16:	0027      	movs	r7, r4
 8000d18:	0c1b      	lsrs	r3, r3, #16
 8000d1a:	4357      	muls	r7, r2
 8000d1c:	4374      	muls	r4, r6
 8000d1e:	435a      	muls	r2, r3
 8000d20:	435e      	muls	r6, r3
 8000d22:	1912      	adds	r2, r2, r4
 8000d24:	0c3b      	lsrs	r3, r7, #16
 8000d26:	189b      	adds	r3, r3, r2
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d903      	bls.n	8000d34 <__aeabi_fmul+0xd0>
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	0252      	lsls	r2, r2, #9
 8000d30:	4694      	mov	ip, r2
 8000d32:	4466      	add	r6, ip
 8000d34:	043f      	lsls	r7, r7, #16
 8000d36:	041a      	lsls	r2, r3, #16
 8000d38:	0c3f      	lsrs	r7, r7, #16
 8000d3a:	19d2      	adds	r2, r2, r7
 8000d3c:	0194      	lsls	r4, r2, #6
 8000d3e:	1e67      	subs	r7, r4, #1
 8000d40:	41bc      	sbcs	r4, r7
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	0e92      	lsrs	r2, r2, #26
 8000d46:	199b      	adds	r3, r3, r6
 8000d48:	4314      	orrs	r4, r2
 8000d4a:	019b      	lsls	r3, r3, #6
 8000d4c:	431c      	orrs	r4, r3
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	d400      	bmi.n	8000d54 <__aeabi_fmul+0xf0>
 8000d52:	e09b      	b.n	8000e8c <__aeabi_fmul+0x228>
 8000d54:	2301      	movs	r3, #1
 8000d56:	0862      	lsrs	r2, r4, #1
 8000d58:	401c      	ands	r4, r3
 8000d5a:	4314      	orrs	r4, r2
 8000d5c:	0002      	movs	r2, r0
 8000d5e:	327f      	adds	r2, #127	; 0x7f
 8000d60:	2a00      	cmp	r2, #0
 8000d62:	dd64      	ble.n	8000e2e <__aeabi_fmul+0x1ca>
 8000d64:	0763      	lsls	r3, r4, #29
 8000d66:	d004      	beq.n	8000d72 <__aeabi_fmul+0x10e>
 8000d68:	230f      	movs	r3, #15
 8000d6a:	4023      	ands	r3, r4
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d000      	beq.n	8000d72 <__aeabi_fmul+0x10e>
 8000d70:	3404      	adds	r4, #4
 8000d72:	0123      	lsls	r3, r4, #4
 8000d74:	d503      	bpl.n	8000d7e <__aeabi_fmul+0x11a>
 8000d76:	0002      	movs	r2, r0
 8000d78:	4b4c      	ldr	r3, [pc, #304]	; (8000eac <__aeabi_fmul+0x248>)
 8000d7a:	3280      	adds	r2, #128	; 0x80
 8000d7c:	401c      	ands	r4, r3
 8000d7e:	2afe      	cmp	r2, #254	; 0xfe
 8000d80:	dcbf      	bgt.n	8000d02 <__aeabi_fmul+0x9e>
 8000d82:	01a4      	lsls	r4, r4, #6
 8000d84:	0a64      	lsrs	r4, r4, #9
 8000d86:	b2d0      	uxtb	r0, r2
 8000d88:	e7b2      	b.n	8000cf0 <__aeabi_fmul+0x8c>
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d13d      	bne.n	8000e0c <__aeabi_fmul+0x1a8>
 8000d90:	464a      	mov	r2, r9
 8000d92:	3301      	adds	r3, #1
 8000d94:	431a      	orrs	r2, r3
 8000d96:	4691      	mov	r9, r2
 8000d98:	469c      	mov	ip, r3
 8000d9a:	e792      	b.n	8000cc2 <__aeabi_fmul+0x5e>
 8000d9c:	2c00      	cmp	r4, #0
 8000d9e:	d129      	bne.n	8000df4 <__aeabi_fmul+0x190>
 8000da0:	2304      	movs	r3, #4
 8000da2:	4699      	mov	r9, r3
 8000da4:	3b03      	subs	r3, #3
 8000da6:	2500      	movs	r5, #0
 8000da8:	469a      	mov	sl, r3
 8000daa:	e774      	b.n	8000c96 <__aeabi_fmul+0x32>
 8000dac:	2c00      	cmp	r4, #0
 8000dae:	d11b      	bne.n	8000de8 <__aeabi_fmul+0x184>
 8000db0:	2308      	movs	r3, #8
 8000db2:	4699      	mov	r9, r3
 8000db4:	3b06      	subs	r3, #6
 8000db6:	25ff      	movs	r5, #255	; 0xff
 8000db8:	469a      	mov	sl, r3
 8000dba:	e76c      	b.n	8000c96 <__aeabi_fmul+0x32>
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	35ff      	adds	r5, #255	; 0xff
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10b      	bne.n	8000ddc <__aeabi_fmul+0x178>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	4691      	mov	r9, r2
 8000dcc:	469c      	mov	ip, r3
 8000dce:	e778      	b.n	8000cc2 <__aeabi_fmul+0x5e>
 8000dd0:	4653      	mov	r3, sl
 8000dd2:	0031      	movs	r1, r6
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d000      	beq.n	8000dda <__aeabi_fmul+0x176>
 8000dd8:	e783      	b.n	8000ce2 <__aeabi_fmul+0x7e>
 8000dda:	e792      	b.n	8000d02 <__aeabi_fmul+0x9e>
 8000ddc:	2303      	movs	r3, #3
 8000dde:	464a      	mov	r2, r9
 8000de0:	431a      	orrs	r2, r3
 8000de2:	4691      	mov	r9, r2
 8000de4:	469c      	mov	ip, r3
 8000de6:	e76c      	b.n	8000cc2 <__aeabi_fmul+0x5e>
 8000de8:	230c      	movs	r3, #12
 8000dea:	4699      	mov	r9, r3
 8000dec:	3b09      	subs	r3, #9
 8000dee:	25ff      	movs	r5, #255	; 0xff
 8000df0:	469a      	mov	sl, r3
 8000df2:	e750      	b.n	8000c96 <__aeabi_fmul+0x32>
 8000df4:	0020      	movs	r0, r4
 8000df6:	f002 f96f 	bl	80030d8 <__clzsi2>
 8000dfa:	2576      	movs	r5, #118	; 0x76
 8000dfc:	1f43      	subs	r3, r0, #5
 8000dfe:	409c      	lsls	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	426d      	negs	r5, r5
 8000e04:	4699      	mov	r9, r3
 8000e06:	469a      	mov	sl, r3
 8000e08:	1a2d      	subs	r5, r5, r0
 8000e0a:	e744      	b.n	8000c96 <__aeabi_fmul+0x32>
 8000e0c:	4640      	mov	r0, r8
 8000e0e:	f002 f963 	bl	80030d8 <__clzsi2>
 8000e12:	4642      	mov	r2, r8
 8000e14:	1f43      	subs	r3, r0, #5
 8000e16:	409a      	lsls	r2, r3
 8000e18:	2300      	movs	r3, #0
 8000e1a:	1a2d      	subs	r5, r5, r0
 8000e1c:	4690      	mov	r8, r2
 8000e1e:	469c      	mov	ip, r3
 8000e20:	3d76      	subs	r5, #118	; 0x76
 8000e22:	e74e      	b.n	8000cc2 <__aeabi_fmul+0x5e>
 8000e24:	2480      	movs	r4, #128	; 0x80
 8000e26:	2100      	movs	r1, #0
 8000e28:	20ff      	movs	r0, #255	; 0xff
 8000e2a:	03e4      	lsls	r4, r4, #15
 8000e2c:	e760      	b.n	8000cf0 <__aeabi_fmul+0x8c>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	1a9b      	subs	r3, r3, r2
 8000e32:	2b1b      	cmp	r3, #27
 8000e34:	dd00      	ble.n	8000e38 <__aeabi_fmul+0x1d4>
 8000e36:	e759      	b.n	8000cec <__aeabi_fmul+0x88>
 8000e38:	0022      	movs	r2, r4
 8000e3a:	309e      	adds	r0, #158	; 0x9e
 8000e3c:	40da      	lsrs	r2, r3
 8000e3e:	4084      	lsls	r4, r0
 8000e40:	0013      	movs	r3, r2
 8000e42:	1e62      	subs	r2, r4, #1
 8000e44:	4194      	sbcs	r4, r2
 8000e46:	431c      	orrs	r4, r3
 8000e48:	0763      	lsls	r3, r4, #29
 8000e4a:	d004      	beq.n	8000e56 <__aeabi_fmul+0x1f2>
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	4023      	ands	r3, r4
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d000      	beq.n	8000e56 <__aeabi_fmul+0x1f2>
 8000e54:	3404      	adds	r4, #4
 8000e56:	0163      	lsls	r3, r4, #5
 8000e58:	d51a      	bpl.n	8000e90 <__aeabi_fmul+0x22c>
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	2400      	movs	r4, #0
 8000e5e:	e747      	b.n	8000cf0 <__aeabi_fmul+0x8c>
 8000e60:	2080      	movs	r0, #128	; 0x80
 8000e62:	03c0      	lsls	r0, r0, #15
 8000e64:	4204      	tst	r4, r0
 8000e66:	d009      	beq.n	8000e7c <__aeabi_fmul+0x218>
 8000e68:	4643      	mov	r3, r8
 8000e6a:	4203      	tst	r3, r0
 8000e6c:	d106      	bne.n	8000e7c <__aeabi_fmul+0x218>
 8000e6e:	4644      	mov	r4, r8
 8000e70:	4304      	orrs	r4, r0
 8000e72:	0264      	lsls	r4, r4, #9
 8000e74:	0039      	movs	r1, r7
 8000e76:	20ff      	movs	r0, #255	; 0xff
 8000e78:	0a64      	lsrs	r4, r4, #9
 8000e7a:	e739      	b.n	8000cf0 <__aeabi_fmul+0x8c>
 8000e7c:	2080      	movs	r0, #128	; 0x80
 8000e7e:	03c0      	lsls	r0, r0, #15
 8000e80:	4304      	orrs	r4, r0
 8000e82:	0264      	lsls	r4, r4, #9
 8000e84:	0031      	movs	r1, r6
 8000e86:	20ff      	movs	r0, #255	; 0xff
 8000e88:	0a64      	lsrs	r4, r4, #9
 8000e8a:	e731      	b.n	8000cf0 <__aeabi_fmul+0x8c>
 8000e8c:	0028      	movs	r0, r5
 8000e8e:	e765      	b.n	8000d5c <__aeabi_fmul+0xf8>
 8000e90:	01a4      	lsls	r4, r4, #6
 8000e92:	2000      	movs	r0, #0
 8000e94:	0a64      	lsrs	r4, r4, #9
 8000e96:	e72b      	b.n	8000cf0 <__aeabi_fmul+0x8c>
 8000e98:	2080      	movs	r0, #128	; 0x80
 8000e9a:	03c0      	lsls	r0, r0, #15
 8000e9c:	4304      	orrs	r4, r0
 8000e9e:	0264      	lsls	r4, r4, #9
 8000ea0:	20ff      	movs	r0, #255	; 0xff
 8000ea2:	0a64      	lsrs	r4, r4, #9
 8000ea4:	e724      	b.n	8000cf0 <__aeabi_fmul+0x8c>
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	0800d238 	.word	0x0800d238
 8000eac:	f7ffffff 	.word	0xf7ffffff

08000eb0 <__aeabi_fsub>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	46ce      	mov	lr, r9
 8000eb4:	4647      	mov	r7, r8
 8000eb6:	0243      	lsls	r3, r0, #9
 8000eb8:	0a5b      	lsrs	r3, r3, #9
 8000eba:	024e      	lsls	r6, r1, #9
 8000ebc:	00da      	lsls	r2, r3, #3
 8000ebe:	4694      	mov	ip, r2
 8000ec0:	0a72      	lsrs	r2, r6, #9
 8000ec2:	4691      	mov	r9, r2
 8000ec4:	0045      	lsls	r5, r0, #1
 8000ec6:	004a      	lsls	r2, r1, #1
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	0e2d      	lsrs	r5, r5, #24
 8000ecc:	001f      	movs	r7, r3
 8000ece:	0fc4      	lsrs	r4, r0, #31
 8000ed0:	0e12      	lsrs	r2, r2, #24
 8000ed2:	0fc9      	lsrs	r1, r1, #31
 8000ed4:	09b6      	lsrs	r6, r6, #6
 8000ed6:	2aff      	cmp	r2, #255	; 0xff
 8000ed8:	d05b      	beq.n	8000f92 <__aeabi_fsub+0xe2>
 8000eda:	2001      	movs	r0, #1
 8000edc:	4041      	eors	r1, r0
 8000ede:	428c      	cmp	r4, r1
 8000ee0:	d039      	beq.n	8000f56 <__aeabi_fsub+0xa6>
 8000ee2:	1aa8      	subs	r0, r5, r2
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	dd5a      	ble.n	8000f9e <__aeabi_fsub+0xee>
 8000ee8:	2a00      	cmp	r2, #0
 8000eea:	d06a      	beq.n	8000fc2 <__aeabi_fsub+0x112>
 8000eec:	2dff      	cmp	r5, #255	; 0xff
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x42>
 8000ef0:	e0d9      	b.n	80010a6 <__aeabi_fsub+0x1f6>
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	04d2      	lsls	r2, r2, #19
 8000ef6:	4316      	orrs	r6, r2
 8000ef8:	281b      	cmp	r0, #27
 8000efa:	dc00      	bgt.n	8000efe <__aeabi_fsub+0x4e>
 8000efc:	e0e9      	b.n	80010d2 <__aeabi_fsub+0x222>
 8000efe:	2001      	movs	r0, #1
 8000f00:	4663      	mov	r3, ip
 8000f02:	1a18      	subs	r0, r3, r0
 8000f04:	0143      	lsls	r3, r0, #5
 8000f06:	d400      	bmi.n	8000f0a <__aeabi_fsub+0x5a>
 8000f08:	e0b4      	b.n	8001074 <__aeabi_fsub+0x1c4>
 8000f0a:	0180      	lsls	r0, r0, #6
 8000f0c:	0987      	lsrs	r7, r0, #6
 8000f0e:	0038      	movs	r0, r7
 8000f10:	f002 f8e2 	bl	80030d8 <__clzsi2>
 8000f14:	3805      	subs	r0, #5
 8000f16:	4087      	lsls	r7, r0
 8000f18:	4285      	cmp	r5, r0
 8000f1a:	dc00      	bgt.n	8000f1e <__aeabi_fsub+0x6e>
 8000f1c:	e0cc      	b.n	80010b8 <__aeabi_fsub+0x208>
 8000f1e:	1a2d      	subs	r5, r5, r0
 8000f20:	48b5      	ldr	r0, [pc, #724]	; (80011f8 <__aeabi_fsub+0x348>)
 8000f22:	4038      	ands	r0, r7
 8000f24:	0743      	lsls	r3, r0, #29
 8000f26:	d004      	beq.n	8000f32 <__aeabi_fsub+0x82>
 8000f28:	230f      	movs	r3, #15
 8000f2a:	4003      	ands	r3, r0
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d000      	beq.n	8000f32 <__aeabi_fsub+0x82>
 8000f30:	3004      	adds	r0, #4
 8000f32:	0143      	lsls	r3, r0, #5
 8000f34:	d400      	bmi.n	8000f38 <__aeabi_fsub+0x88>
 8000f36:	e0a0      	b.n	800107a <__aeabi_fsub+0x1ca>
 8000f38:	1c6a      	adds	r2, r5, #1
 8000f3a:	2dfe      	cmp	r5, #254	; 0xfe
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_fsub+0x90>
 8000f3e:	e08d      	b.n	800105c <__aeabi_fsub+0x1ac>
 8000f40:	0180      	lsls	r0, r0, #6
 8000f42:	0a47      	lsrs	r7, r0, #9
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	05d0      	lsls	r0, r2, #23
 8000f48:	4338      	orrs	r0, r7
 8000f4a:	07e4      	lsls	r4, r4, #31
 8000f4c:	4320      	orrs	r0, r4
 8000f4e:	bcc0      	pop	{r6, r7}
 8000f50:	46b9      	mov	r9, r7
 8000f52:	46b0      	mov	r8, r6
 8000f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f56:	1aa8      	subs	r0, r5, r2
 8000f58:	4680      	mov	r8, r0
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	dd45      	ble.n	8000fea <__aeabi_fsub+0x13a>
 8000f5e:	2a00      	cmp	r2, #0
 8000f60:	d070      	beq.n	8001044 <__aeabi_fsub+0x194>
 8000f62:	2dff      	cmp	r5, #255	; 0xff
 8000f64:	d100      	bne.n	8000f68 <__aeabi_fsub+0xb8>
 8000f66:	e09e      	b.n	80010a6 <__aeabi_fsub+0x1f6>
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	04db      	lsls	r3, r3, #19
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	4643      	mov	r3, r8
 8000f70:	2b1b      	cmp	r3, #27
 8000f72:	dc00      	bgt.n	8000f76 <__aeabi_fsub+0xc6>
 8000f74:	e0d2      	b.n	800111c <__aeabi_fsub+0x26c>
 8000f76:	2001      	movs	r0, #1
 8000f78:	4460      	add	r0, ip
 8000f7a:	0143      	lsls	r3, r0, #5
 8000f7c:	d57a      	bpl.n	8001074 <__aeabi_fsub+0x1c4>
 8000f7e:	3501      	adds	r5, #1
 8000f80:	2dff      	cmp	r5, #255	; 0xff
 8000f82:	d06b      	beq.n	800105c <__aeabi_fsub+0x1ac>
 8000f84:	2301      	movs	r3, #1
 8000f86:	4a9d      	ldr	r2, [pc, #628]	; (80011fc <__aeabi_fsub+0x34c>)
 8000f88:	4003      	ands	r3, r0
 8000f8a:	0840      	lsrs	r0, r0, #1
 8000f8c:	4010      	ands	r0, r2
 8000f8e:	4318      	orrs	r0, r3
 8000f90:	e7c8      	b.n	8000f24 <__aeabi_fsub+0x74>
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d020      	beq.n	8000fd8 <__aeabi_fsub+0x128>
 8000f96:	428c      	cmp	r4, r1
 8000f98:	d023      	beq.n	8000fe2 <__aeabi_fsub+0x132>
 8000f9a:	0028      	movs	r0, r5
 8000f9c:	38ff      	subs	r0, #255	; 0xff
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d039      	beq.n	8001016 <__aeabi_fsub+0x166>
 8000fa2:	1b57      	subs	r7, r2, r5
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	d000      	beq.n	8000faa <__aeabi_fsub+0xfa>
 8000fa8:	e09d      	b.n	80010e6 <__aeabi_fsub+0x236>
 8000faa:	4663      	mov	r3, ip
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_fsub+0x102>
 8000fb0:	e0db      	b.n	800116a <__aeabi_fsub+0x2ba>
 8000fb2:	1e7b      	subs	r3, r7, #1
 8000fb4:	2f01      	cmp	r7, #1
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0x10a>
 8000fb8:	e10d      	b.n	80011d6 <__aeabi_fsub+0x326>
 8000fba:	2fff      	cmp	r7, #255	; 0xff
 8000fbc:	d071      	beq.n	80010a2 <__aeabi_fsub+0x1f2>
 8000fbe:	001f      	movs	r7, r3
 8000fc0:	e098      	b.n	80010f4 <__aeabi_fsub+0x244>
 8000fc2:	2e00      	cmp	r6, #0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_fsub+0x118>
 8000fc6:	e0a7      	b.n	8001118 <__aeabi_fsub+0x268>
 8000fc8:	1e42      	subs	r2, r0, #1
 8000fca:	2801      	cmp	r0, #1
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_fsub+0x120>
 8000fce:	e0e6      	b.n	800119e <__aeabi_fsub+0x2ee>
 8000fd0:	28ff      	cmp	r0, #255	; 0xff
 8000fd2:	d068      	beq.n	80010a6 <__aeabi_fsub+0x1f6>
 8000fd4:	0010      	movs	r0, r2
 8000fd6:	e78f      	b.n	8000ef8 <__aeabi_fsub+0x48>
 8000fd8:	2001      	movs	r0, #1
 8000fda:	4041      	eors	r1, r0
 8000fdc:	42a1      	cmp	r1, r4
 8000fde:	d000      	beq.n	8000fe2 <__aeabi_fsub+0x132>
 8000fe0:	e77f      	b.n	8000ee2 <__aeabi_fsub+0x32>
 8000fe2:	20ff      	movs	r0, #255	; 0xff
 8000fe4:	4240      	negs	r0, r0
 8000fe6:	4680      	mov	r8, r0
 8000fe8:	44a8      	add	r8, r5
 8000fea:	4640      	mov	r0, r8
 8000fec:	2800      	cmp	r0, #0
 8000fee:	d038      	beq.n	8001062 <__aeabi_fsub+0x1b2>
 8000ff0:	1b51      	subs	r1, r2, r5
 8000ff2:	2d00      	cmp	r5, #0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0x148>
 8000ff6:	e0ae      	b.n	8001156 <__aeabi_fsub+0x2a6>
 8000ff8:	2aff      	cmp	r2, #255	; 0xff
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_fsub+0x14e>
 8000ffc:	e0df      	b.n	80011be <__aeabi_fsub+0x30e>
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	4660      	mov	r0, ip
 8001002:	04db      	lsls	r3, r3, #19
 8001004:	4318      	orrs	r0, r3
 8001006:	4684      	mov	ip, r0
 8001008:	291b      	cmp	r1, #27
 800100a:	dc00      	bgt.n	800100e <__aeabi_fsub+0x15e>
 800100c:	e0d9      	b.n	80011c2 <__aeabi_fsub+0x312>
 800100e:	2001      	movs	r0, #1
 8001010:	0015      	movs	r5, r2
 8001012:	1980      	adds	r0, r0, r6
 8001014:	e7b1      	b.n	8000f7a <__aeabi_fsub+0xca>
 8001016:	20fe      	movs	r0, #254	; 0xfe
 8001018:	1c6a      	adds	r2, r5, #1
 800101a:	4210      	tst	r0, r2
 800101c:	d171      	bne.n	8001102 <__aeabi_fsub+0x252>
 800101e:	2d00      	cmp	r5, #0
 8001020:	d000      	beq.n	8001024 <__aeabi_fsub+0x174>
 8001022:	e0a6      	b.n	8001172 <__aeabi_fsub+0x2c2>
 8001024:	4663      	mov	r3, ip
 8001026:	2b00      	cmp	r3, #0
 8001028:	d100      	bne.n	800102c <__aeabi_fsub+0x17c>
 800102a:	e0d9      	b.n	80011e0 <__aeabi_fsub+0x330>
 800102c:	2200      	movs	r2, #0
 800102e:	2e00      	cmp	r6, #0
 8001030:	d100      	bne.n	8001034 <__aeabi_fsub+0x184>
 8001032:	e788      	b.n	8000f46 <__aeabi_fsub+0x96>
 8001034:	1b98      	subs	r0, r3, r6
 8001036:	0143      	lsls	r3, r0, #5
 8001038:	d400      	bmi.n	800103c <__aeabi_fsub+0x18c>
 800103a:	e0e1      	b.n	8001200 <__aeabi_fsub+0x350>
 800103c:	4663      	mov	r3, ip
 800103e:	000c      	movs	r4, r1
 8001040:	1af0      	subs	r0, r6, r3
 8001042:	e76f      	b.n	8000f24 <__aeabi_fsub+0x74>
 8001044:	2e00      	cmp	r6, #0
 8001046:	d100      	bne.n	800104a <__aeabi_fsub+0x19a>
 8001048:	e0b7      	b.n	80011ba <__aeabi_fsub+0x30a>
 800104a:	0002      	movs	r2, r0
 800104c:	3a01      	subs	r2, #1
 800104e:	2801      	cmp	r0, #1
 8001050:	d100      	bne.n	8001054 <__aeabi_fsub+0x1a4>
 8001052:	e09c      	b.n	800118e <__aeabi_fsub+0x2de>
 8001054:	28ff      	cmp	r0, #255	; 0xff
 8001056:	d026      	beq.n	80010a6 <__aeabi_fsub+0x1f6>
 8001058:	4690      	mov	r8, r2
 800105a:	e788      	b.n	8000f6e <__aeabi_fsub+0xbe>
 800105c:	22ff      	movs	r2, #255	; 0xff
 800105e:	2700      	movs	r7, #0
 8001060:	e771      	b.n	8000f46 <__aeabi_fsub+0x96>
 8001062:	20fe      	movs	r0, #254	; 0xfe
 8001064:	1c6a      	adds	r2, r5, #1
 8001066:	4210      	tst	r0, r2
 8001068:	d064      	beq.n	8001134 <__aeabi_fsub+0x284>
 800106a:	2aff      	cmp	r2, #255	; 0xff
 800106c:	d0f6      	beq.n	800105c <__aeabi_fsub+0x1ac>
 800106e:	0015      	movs	r5, r2
 8001070:	4466      	add	r6, ip
 8001072:	0870      	lsrs	r0, r6, #1
 8001074:	0743      	lsls	r3, r0, #29
 8001076:	d000      	beq.n	800107a <__aeabi_fsub+0x1ca>
 8001078:	e756      	b.n	8000f28 <__aeabi_fsub+0x78>
 800107a:	08c3      	lsrs	r3, r0, #3
 800107c:	2dff      	cmp	r5, #255	; 0xff
 800107e:	d012      	beq.n	80010a6 <__aeabi_fsub+0x1f6>
 8001080:	025b      	lsls	r3, r3, #9
 8001082:	0a5f      	lsrs	r7, r3, #9
 8001084:	b2ea      	uxtb	r2, r5
 8001086:	e75e      	b.n	8000f46 <__aeabi_fsub+0x96>
 8001088:	4662      	mov	r2, ip
 800108a:	2a00      	cmp	r2, #0
 800108c:	d100      	bne.n	8001090 <__aeabi_fsub+0x1e0>
 800108e:	e096      	b.n	80011be <__aeabi_fsub+0x30e>
 8001090:	2e00      	cmp	r6, #0
 8001092:	d008      	beq.n	80010a6 <__aeabi_fsub+0x1f6>
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	03d2      	lsls	r2, r2, #15
 8001098:	4213      	tst	r3, r2
 800109a:	d004      	beq.n	80010a6 <__aeabi_fsub+0x1f6>
 800109c:	4648      	mov	r0, r9
 800109e:	4210      	tst	r0, r2
 80010a0:	d101      	bne.n	80010a6 <__aeabi_fsub+0x1f6>
 80010a2:	000c      	movs	r4, r1
 80010a4:	464b      	mov	r3, r9
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0d8      	beq.n	800105c <__aeabi_fsub+0x1ac>
 80010aa:	2780      	movs	r7, #128	; 0x80
 80010ac:	03ff      	lsls	r7, r7, #15
 80010ae:	431f      	orrs	r7, r3
 80010b0:	027f      	lsls	r7, r7, #9
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	0a7f      	lsrs	r7, r7, #9
 80010b6:	e746      	b.n	8000f46 <__aeabi_fsub+0x96>
 80010b8:	2320      	movs	r3, #32
 80010ba:	003a      	movs	r2, r7
 80010bc:	1b45      	subs	r5, r0, r5
 80010be:	0038      	movs	r0, r7
 80010c0:	3501      	adds	r5, #1
 80010c2:	40ea      	lsrs	r2, r5
 80010c4:	1b5d      	subs	r5, r3, r5
 80010c6:	40a8      	lsls	r0, r5
 80010c8:	1e43      	subs	r3, r0, #1
 80010ca:	4198      	sbcs	r0, r3
 80010cc:	2500      	movs	r5, #0
 80010ce:	4310      	orrs	r0, r2
 80010d0:	e728      	b.n	8000f24 <__aeabi_fsub+0x74>
 80010d2:	2320      	movs	r3, #32
 80010d4:	1a1b      	subs	r3, r3, r0
 80010d6:	0032      	movs	r2, r6
 80010d8:	409e      	lsls	r6, r3
 80010da:	40c2      	lsrs	r2, r0
 80010dc:	0030      	movs	r0, r6
 80010de:	1e43      	subs	r3, r0, #1
 80010e0:	4198      	sbcs	r0, r3
 80010e2:	4310      	orrs	r0, r2
 80010e4:	e70c      	b.n	8000f00 <__aeabi_fsub+0x50>
 80010e6:	2aff      	cmp	r2, #255	; 0xff
 80010e8:	d0db      	beq.n	80010a2 <__aeabi_fsub+0x1f2>
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4660      	mov	r0, ip
 80010ee:	04db      	lsls	r3, r3, #19
 80010f0:	4318      	orrs	r0, r3
 80010f2:	4684      	mov	ip, r0
 80010f4:	2f1b      	cmp	r7, #27
 80010f6:	dd56      	ble.n	80011a6 <__aeabi_fsub+0x2f6>
 80010f8:	2001      	movs	r0, #1
 80010fa:	000c      	movs	r4, r1
 80010fc:	0015      	movs	r5, r2
 80010fe:	1a30      	subs	r0, r6, r0
 8001100:	e700      	b.n	8000f04 <__aeabi_fsub+0x54>
 8001102:	4663      	mov	r3, ip
 8001104:	1b9f      	subs	r7, r3, r6
 8001106:	017b      	lsls	r3, r7, #5
 8001108:	d43d      	bmi.n	8001186 <__aeabi_fsub+0x2d6>
 800110a:	2f00      	cmp	r7, #0
 800110c:	d000      	beq.n	8001110 <__aeabi_fsub+0x260>
 800110e:	e6fe      	b.n	8000f0e <__aeabi_fsub+0x5e>
 8001110:	2400      	movs	r4, #0
 8001112:	2200      	movs	r2, #0
 8001114:	2700      	movs	r7, #0
 8001116:	e716      	b.n	8000f46 <__aeabi_fsub+0x96>
 8001118:	0005      	movs	r5, r0
 800111a:	e7af      	b.n	800107c <__aeabi_fsub+0x1cc>
 800111c:	0032      	movs	r2, r6
 800111e:	4643      	mov	r3, r8
 8001120:	4641      	mov	r1, r8
 8001122:	40da      	lsrs	r2, r3
 8001124:	2320      	movs	r3, #32
 8001126:	1a5b      	subs	r3, r3, r1
 8001128:	409e      	lsls	r6, r3
 800112a:	0030      	movs	r0, r6
 800112c:	1e43      	subs	r3, r0, #1
 800112e:	4198      	sbcs	r0, r3
 8001130:	4310      	orrs	r0, r2
 8001132:	e721      	b.n	8000f78 <__aeabi_fsub+0xc8>
 8001134:	2d00      	cmp	r5, #0
 8001136:	d1a7      	bne.n	8001088 <__aeabi_fsub+0x1d8>
 8001138:	4663      	mov	r3, ip
 800113a:	2b00      	cmp	r3, #0
 800113c:	d059      	beq.n	80011f2 <__aeabi_fsub+0x342>
 800113e:	2200      	movs	r2, #0
 8001140:	2e00      	cmp	r6, #0
 8001142:	d100      	bne.n	8001146 <__aeabi_fsub+0x296>
 8001144:	e6ff      	b.n	8000f46 <__aeabi_fsub+0x96>
 8001146:	0030      	movs	r0, r6
 8001148:	4460      	add	r0, ip
 800114a:	0143      	lsls	r3, r0, #5
 800114c:	d592      	bpl.n	8001074 <__aeabi_fsub+0x1c4>
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <__aeabi_fsub+0x348>)
 8001150:	3501      	adds	r5, #1
 8001152:	4018      	ands	r0, r3
 8001154:	e78e      	b.n	8001074 <__aeabi_fsub+0x1c4>
 8001156:	4663      	mov	r3, ip
 8001158:	2b00      	cmp	r3, #0
 800115a:	d047      	beq.n	80011ec <__aeabi_fsub+0x33c>
 800115c:	1e4b      	subs	r3, r1, #1
 800115e:	2901      	cmp	r1, #1
 8001160:	d015      	beq.n	800118e <__aeabi_fsub+0x2de>
 8001162:	29ff      	cmp	r1, #255	; 0xff
 8001164:	d02b      	beq.n	80011be <__aeabi_fsub+0x30e>
 8001166:	0019      	movs	r1, r3
 8001168:	e74e      	b.n	8001008 <__aeabi_fsub+0x158>
 800116a:	000c      	movs	r4, r1
 800116c:	464b      	mov	r3, r9
 800116e:	003d      	movs	r5, r7
 8001170:	e784      	b.n	800107c <__aeabi_fsub+0x1cc>
 8001172:	4662      	mov	r2, ip
 8001174:	2a00      	cmp	r2, #0
 8001176:	d18b      	bne.n	8001090 <__aeabi_fsub+0x1e0>
 8001178:	2e00      	cmp	r6, #0
 800117a:	d192      	bne.n	80010a2 <__aeabi_fsub+0x1f2>
 800117c:	2780      	movs	r7, #128	; 0x80
 800117e:	2400      	movs	r4, #0
 8001180:	22ff      	movs	r2, #255	; 0xff
 8001182:	03ff      	lsls	r7, r7, #15
 8001184:	e6df      	b.n	8000f46 <__aeabi_fsub+0x96>
 8001186:	4663      	mov	r3, ip
 8001188:	000c      	movs	r4, r1
 800118a:	1af7      	subs	r7, r6, r3
 800118c:	e6bf      	b.n	8000f0e <__aeabi_fsub+0x5e>
 800118e:	0030      	movs	r0, r6
 8001190:	4460      	add	r0, ip
 8001192:	2501      	movs	r5, #1
 8001194:	0143      	lsls	r3, r0, #5
 8001196:	d400      	bmi.n	800119a <__aeabi_fsub+0x2ea>
 8001198:	e76c      	b.n	8001074 <__aeabi_fsub+0x1c4>
 800119a:	2502      	movs	r5, #2
 800119c:	e6f2      	b.n	8000f84 <__aeabi_fsub+0xd4>
 800119e:	4663      	mov	r3, ip
 80011a0:	2501      	movs	r5, #1
 80011a2:	1b98      	subs	r0, r3, r6
 80011a4:	e6ae      	b.n	8000f04 <__aeabi_fsub+0x54>
 80011a6:	2320      	movs	r3, #32
 80011a8:	4664      	mov	r4, ip
 80011aa:	4660      	mov	r0, ip
 80011ac:	40fc      	lsrs	r4, r7
 80011ae:	1bdf      	subs	r7, r3, r7
 80011b0:	40b8      	lsls	r0, r7
 80011b2:	1e43      	subs	r3, r0, #1
 80011b4:	4198      	sbcs	r0, r3
 80011b6:	4320      	orrs	r0, r4
 80011b8:	e79f      	b.n	80010fa <__aeabi_fsub+0x24a>
 80011ba:	0005      	movs	r5, r0
 80011bc:	e75e      	b.n	800107c <__aeabi_fsub+0x1cc>
 80011be:	464b      	mov	r3, r9
 80011c0:	e771      	b.n	80010a6 <__aeabi_fsub+0x1f6>
 80011c2:	2320      	movs	r3, #32
 80011c4:	4665      	mov	r5, ip
 80011c6:	4660      	mov	r0, ip
 80011c8:	40cd      	lsrs	r5, r1
 80011ca:	1a59      	subs	r1, r3, r1
 80011cc:	4088      	lsls	r0, r1
 80011ce:	1e43      	subs	r3, r0, #1
 80011d0:	4198      	sbcs	r0, r3
 80011d2:	4328      	orrs	r0, r5
 80011d4:	e71c      	b.n	8001010 <__aeabi_fsub+0x160>
 80011d6:	4663      	mov	r3, ip
 80011d8:	000c      	movs	r4, r1
 80011da:	2501      	movs	r5, #1
 80011dc:	1af0      	subs	r0, r6, r3
 80011de:	e691      	b.n	8000f04 <__aeabi_fsub+0x54>
 80011e0:	2e00      	cmp	r6, #0
 80011e2:	d095      	beq.n	8001110 <__aeabi_fsub+0x260>
 80011e4:	000c      	movs	r4, r1
 80011e6:	464f      	mov	r7, r9
 80011e8:	2200      	movs	r2, #0
 80011ea:	e6ac      	b.n	8000f46 <__aeabi_fsub+0x96>
 80011ec:	464b      	mov	r3, r9
 80011ee:	000d      	movs	r5, r1
 80011f0:	e744      	b.n	800107c <__aeabi_fsub+0x1cc>
 80011f2:	464f      	mov	r7, r9
 80011f4:	2200      	movs	r2, #0
 80011f6:	e6a6      	b.n	8000f46 <__aeabi_fsub+0x96>
 80011f8:	fbffffff 	.word	0xfbffffff
 80011fc:	7dffffff 	.word	0x7dffffff
 8001200:	2800      	cmp	r0, #0
 8001202:	d000      	beq.n	8001206 <__aeabi_fsub+0x356>
 8001204:	e736      	b.n	8001074 <__aeabi_fsub+0x1c4>
 8001206:	2400      	movs	r4, #0
 8001208:	2700      	movs	r7, #0
 800120a:	e69c      	b.n	8000f46 <__aeabi_fsub+0x96>

0800120c <__aeabi_f2iz>:
 800120c:	0241      	lsls	r1, r0, #9
 800120e:	0042      	lsls	r2, r0, #1
 8001210:	0fc3      	lsrs	r3, r0, #31
 8001212:	0a49      	lsrs	r1, r1, #9
 8001214:	2000      	movs	r0, #0
 8001216:	0e12      	lsrs	r2, r2, #24
 8001218:	2a7e      	cmp	r2, #126	; 0x7e
 800121a:	dd03      	ble.n	8001224 <__aeabi_f2iz+0x18>
 800121c:	2a9d      	cmp	r2, #157	; 0x9d
 800121e:	dd02      	ble.n	8001226 <__aeabi_f2iz+0x1a>
 8001220:	4a09      	ldr	r2, [pc, #36]	; (8001248 <__aeabi_f2iz+0x3c>)
 8001222:	1898      	adds	r0, r3, r2
 8001224:	4770      	bx	lr
 8001226:	2080      	movs	r0, #128	; 0x80
 8001228:	0400      	lsls	r0, r0, #16
 800122a:	4301      	orrs	r1, r0
 800122c:	2a95      	cmp	r2, #149	; 0x95
 800122e:	dc07      	bgt.n	8001240 <__aeabi_f2iz+0x34>
 8001230:	2096      	movs	r0, #150	; 0x96
 8001232:	1a82      	subs	r2, r0, r2
 8001234:	40d1      	lsrs	r1, r2
 8001236:	4248      	negs	r0, r1
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f3      	bne.n	8001224 <__aeabi_f2iz+0x18>
 800123c:	0008      	movs	r0, r1
 800123e:	e7f1      	b.n	8001224 <__aeabi_f2iz+0x18>
 8001240:	3a96      	subs	r2, #150	; 0x96
 8001242:	4091      	lsls	r1, r2
 8001244:	e7f7      	b.n	8001236 <__aeabi_f2iz+0x2a>
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	7fffffff 	.word	0x7fffffff

0800124c <__aeabi_i2f>:
 800124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124e:	2800      	cmp	r0, #0
 8001250:	d013      	beq.n	800127a <__aeabi_i2f+0x2e>
 8001252:	17c3      	asrs	r3, r0, #31
 8001254:	18c6      	adds	r6, r0, r3
 8001256:	405e      	eors	r6, r3
 8001258:	0fc4      	lsrs	r4, r0, #31
 800125a:	0030      	movs	r0, r6
 800125c:	f001 ff3c 	bl	80030d8 <__clzsi2>
 8001260:	239e      	movs	r3, #158	; 0x9e
 8001262:	0005      	movs	r5, r0
 8001264:	1a1b      	subs	r3, r3, r0
 8001266:	2b96      	cmp	r3, #150	; 0x96
 8001268:	dc0f      	bgt.n	800128a <__aeabi_i2f+0x3e>
 800126a:	2808      	cmp	r0, #8
 800126c:	dd01      	ble.n	8001272 <__aeabi_i2f+0x26>
 800126e:	3d08      	subs	r5, #8
 8001270:	40ae      	lsls	r6, r5
 8001272:	0276      	lsls	r6, r6, #9
 8001274:	0a76      	lsrs	r6, r6, #9
 8001276:	b2d8      	uxtb	r0, r3
 8001278:	e002      	b.n	8001280 <__aeabi_i2f+0x34>
 800127a:	2400      	movs	r4, #0
 800127c:	2000      	movs	r0, #0
 800127e:	2600      	movs	r6, #0
 8001280:	05c0      	lsls	r0, r0, #23
 8001282:	4330      	orrs	r0, r6
 8001284:	07e4      	lsls	r4, r4, #31
 8001286:	4320      	orrs	r0, r4
 8001288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800128a:	2b99      	cmp	r3, #153	; 0x99
 800128c:	dd0c      	ble.n	80012a8 <__aeabi_i2f+0x5c>
 800128e:	2205      	movs	r2, #5
 8001290:	0031      	movs	r1, r6
 8001292:	1a12      	subs	r2, r2, r0
 8001294:	40d1      	lsrs	r1, r2
 8001296:	000a      	movs	r2, r1
 8001298:	0001      	movs	r1, r0
 800129a:	0030      	movs	r0, r6
 800129c:	311b      	adds	r1, #27
 800129e:	4088      	lsls	r0, r1
 80012a0:	1e41      	subs	r1, r0, #1
 80012a2:	4188      	sbcs	r0, r1
 80012a4:	4302      	orrs	r2, r0
 80012a6:	0016      	movs	r6, r2
 80012a8:	2d05      	cmp	r5, #5
 80012aa:	dc12      	bgt.n	80012d2 <__aeabi_i2f+0x86>
 80012ac:	0031      	movs	r1, r6
 80012ae:	4f0d      	ldr	r7, [pc, #52]	; (80012e4 <__aeabi_i2f+0x98>)
 80012b0:	4039      	ands	r1, r7
 80012b2:	0772      	lsls	r2, r6, #29
 80012b4:	d009      	beq.n	80012ca <__aeabi_i2f+0x7e>
 80012b6:	200f      	movs	r0, #15
 80012b8:	4030      	ands	r0, r6
 80012ba:	2804      	cmp	r0, #4
 80012bc:	d005      	beq.n	80012ca <__aeabi_i2f+0x7e>
 80012be:	3104      	adds	r1, #4
 80012c0:	014a      	lsls	r2, r1, #5
 80012c2:	d502      	bpl.n	80012ca <__aeabi_i2f+0x7e>
 80012c4:	239f      	movs	r3, #159	; 0x9f
 80012c6:	4039      	ands	r1, r7
 80012c8:	1b5b      	subs	r3, r3, r5
 80012ca:	0189      	lsls	r1, r1, #6
 80012cc:	0a4e      	lsrs	r6, r1, #9
 80012ce:	b2d8      	uxtb	r0, r3
 80012d0:	e7d6      	b.n	8001280 <__aeabi_i2f+0x34>
 80012d2:	1f6a      	subs	r2, r5, #5
 80012d4:	4096      	lsls	r6, r2
 80012d6:	0031      	movs	r1, r6
 80012d8:	4f02      	ldr	r7, [pc, #8]	; (80012e4 <__aeabi_i2f+0x98>)
 80012da:	4039      	ands	r1, r7
 80012dc:	0772      	lsls	r2, r6, #29
 80012de:	d0f4      	beq.n	80012ca <__aeabi_i2f+0x7e>
 80012e0:	e7e9      	b.n	80012b6 <__aeabi_i2f+0x6a>
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	fbffffff 	.word	0xfbffffff

080012e8 <__aeabi_ui2f>:
 80012e8:	b570      	push	{r4, r5, r6, lr}
 80012ea:	1e05      	subs	r5, r0, #0
 80012ec:	d00e      	beq.n	800130c <__aeabi_ui2f+0x24>
 80012ee:	f001 fef3 	bl	80030d8 <__clzsi2>
 80012f2:	239e      	movs	r3, #158	; 0x9e
 80012f4:	0004      	movs	r4, r0
 80012f6:	1a1b      	subs	r3, r3, r0
 80012f8:	2b96      	cmp	r3, #150	; 0x96
 80012fa:	dc0c      	bgt.n	8001316 <__aeabi_ui2f+0x2e>
 80012fc:	2808      	cmp	r0, #8
 80012fe:	dd01      	ble.n	8001304 <__aeabi_ui2f+0x1c>
 8001300:	3c08      	subs	r4, #8
 8001302:	40a5      	lsls	r5, r4
 8001304:	026d      	lsls	r5, r5, #9
 8001306:	0a6d      	lsrs	r5, r5, #9
 8001308:	b2d8      	uxtb	r0, r3
 800130a:	e001      	b.n	8001310 <__aeabi_ui2f+0x28>
 800130c:	2000      	movs	r0, #0
 800130e:	2500      	movs	r5, #0
 8001310:	05c0      	lsls	r0, r0, #23
 8001312:	4328      	orrs	r0, r5
 8001314:	bd70      	pop	{r4, r5, r6, pc}
 8001316:	2b99      	cmp	r3, #153	; 0x99
 8001318:	dd09      	ble.n	800132e <__aeabi_ui2f+0x46>
 800131a:	0002      	movs	r2, r0
 800131c:	0029      	movs	r1, r5
 800131e:	321b      	adds	r2, #27
 8001320:	4091      	lsls	r1, r2
 8001322:	1e4a      	subs	r2, r1, #1
 8001324:	4191      	sbcs	r1, r2
 8001326:	2205      	movs	r2, #5
 8001328:	1a12      	subs	r2, r2, r0
 800132a:	40d5      	lsrs	r5, r2
 800132c:	430d      	orrs	r5, r1
 800132e:	2c05      	cmp	r4, #5
 8001330:	dc12      	bgt.n	8001358 <__aeabi_ui2f+0x70>
 8001332:	0029      	movs	r1, r5
 8001334:	4e0c      	ldr	r6, [pc, #48]	; (8001368 <__aeabi_ui2f+0x80>)
 8001336:	4031      	ands	r1, r6
 8001338:	076a      	lsls	r2, r5, #29
 800133a:	d009      	beq.n	8001350 <__aeabi_ui2f+0x68>
 800133c:	200f      	movs	r0, #15
 800133e:	4028      	ands	r0, r5
 8001340:	2804      	cmp	r0, #4
 8001342:	d005      	beq.n	8001350 <__aeabi_ui2f+0x68>
 8001344:	3104      	adds	r1, #4
 8001346:	014a      	lsls	r2, r1, #5
 8001348:	d502      	bpl.n	8001350 <__aeabi_ui2f+0x68>
 800134a:	239f      	movs	r3, #159	; 0x9f
 800134c:	4031      	ands	r1, r6
 800134e:	1b1b      	subs	r3, r3, r4
 8001350:	0189      	lsls	r1, r1, #6
 8001352:	0a4d      	lsrs	r5, r1, #9
 8001354:	b2d8      	uxtb	r0, r3
 8001356:	e7db      	b.n	8001310 <__aeabi_ui2f+0x28>
 8001358:	1f62      	subs	r2, r4, #5
 800135a:	4095      	lsls	r5, r2
 800135c:	0029      	movs	r1, r5
 800135e:	4e02      	ldr	r6, [pc, #8]	; (8001368 <__aeabi_ui2f+0x80>)
 8001360:	4031      	ands	r1, r6
 8001362:	076a      	lsls	r2, r5, #29
 8001364:	d0f4      	beq.n	8001350 <__aeabi_ui2f+0x68>
 8001366:	e7e9      	b.n	800133c <__aeabi_ui2f+0x54>
 8001368:	fbffffff 	.word	0xfbffffff

0800136c <__aeabi_dadd>:
 800136c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136e:	464f      	mov	r7, r9
 8001370:	4646      	mov	r6, r8
 8001372:	46d6      	mov	lr, sl
 8001374:	000d      	movs	r5, r1
 8001376:	0004      	movs	r4, r0
 8001378:	b5c0      	push	{r6, r7, lr}
 800137a:	001f      	movs	r7, r3
 800137c:	0011      	movs	r1, r2
 800137e:	0328      	lsls	r0, r5, #12
 8001380:	0f62      	lsrs	r2, r4, #29
 8001382:	0a40      	lsrs	r0, r0, #9
 8001384:	4310      	orrs	r0, r2
 8001386:	007a      	lsls	r2, r7, #1
 8001388:	0d52      	lsrs	r2, r2, #21
 800138a:	00e3      	lsls	r3, r4, #3
 800138c:	033c      	lsls	r4, r7, #12
 800138e:	4691      	mov	r9, r2
 8001390:	0a64      	lsrs	r4, r4, #9
 8001392:	0ffa      	lsrs	r2, r7, #31
 8001394:	0f4f      	lsrs	r7, r1, #29
 8001396:	006e      	lsls	r6, r5, #1
 8001398:	4327      	orrs	r7, r4
 800139a:	4692      	mov	sl, r2
 800139c:	46b8      	mov	r8, r7
 800139e:	0d76      	lsrs	r6, r6, #21
 80013a0:	0fed      	lsrs	r5, r5, #31
 80013a2:	00c9      	lsls	r1, r1, #3
 80013a4:	4295      	cmp	r5, r2
 80013a6:	d100      	bne.n	80013aa <__aeabi_dadd+0x3e>
 80013a8:	e099      	b.n	80014de <__aeabi_dadd+0x172>
 80013aa:	464c      	mov	r4, r9
 80013ac:	1b34      	subs	r4, r6, r4
 80013ae:	46a4      	mov	ip, r4
 80013b0:	2c00      	cmp	r4, #0
 80013b2:	dc00      	bgt.n	80013b6 <__aeabi_dadd+0x4a>
 80013b4:	e07c      	b.n	80014b0 <__aeabi_dadd+0x144>
 80013b6:	464a      	mov	r2, r9
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d100      	bne.n	80013be <__aeabi_dadd+0x52>
 80013bc:	e0b8      	b.n	8001530 <__aeabi_dadd+0x1c4>
 80013be:	4ac5      	ldr	r2, [pc, #788]	; (80016d4 <__aeabi_dadd+0x368>)
 80013c0:	4296      	cmp	r6, r2
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dadd+0x5a>
 80013c4:	e11c      	b.n	8001600 <__aeabi_dadd+0x294>
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	003c      	movs	r4, r7
 80013ca:	0412      	lsls	r2, r2, #16
 80013cc:	4314      	orrs	r4, r2
 80013ce:	46a0      	mov	r8, r4
 80013d0:	4662      	mov	r2, ip
 80013d2:	2a38      	cmp	r2, #56	; 0x38
 80013d4:	dd00      	ble.n	80013d8 <__aeabi_dadd+0x6c>
 80013d6:	e161      	b.n	800169c <__aeabi_dadd+0x330>
 80013d8:	2a1f      	cmp	r2, #31
 80013da:	dd00      	ble.n	80013de <__aeabi_dadd+0x72>
 80013dc:	e1cc      	b.n	8001778 <__aeabi_dadd+0x40c>
 80013de:	4664      	mov	r4, ip
 80013e0:	2220      	movs	r2, #32
 80013e2:	1b12      	subs	r2, r2, r4
 80013e4:	4644      	mov	r4, r8
 80013e6:	4094      	lsls	r4, r2
 80013e8:	000f      	movs	r7, r1
 80013ea:	46a1      	mov	r9, r4
 80013ec:	4664      	mov	r4, ip
 80013ee:	4091      	lsls	r1, r2
 80013f0:	40e7      	lsrs	r7, r4
 80013f2:	464c      	mov	r4, r9
 80013f4:	1e4a      	subs	r2, r1, #1
 80013f6:	4191      	sbcs	r1, r2
 80013f8:	433c      	orrs	r4, r7
 80013fa:	4642      	mov	r2, r8
 80013fc:	4321      	orrs	r1, r4
 80013fe:	4664      	mov	r4, ip
 8001400:	40e2      	lsrs	r2, r4
 8001402:	1a80      	subs	r0, r0, r2
 8001404:	1a5c      	subs	r4, r3, r1
 8001406:	42a3      	cmp	r3, r4
 8001408:	419b      	sbcs	r3, r3
 800140a:	425f      	negs	r7, r3
 800140c:	1bc7      	subs	r7, r0, r7
 800140e:	023b      	lsls	r3, r7, #8
 8001410:	d400      	bmi.n	8001414 <__aeabi_dadd+0xa8>
 8001412:	e0d0      	b.n	80015b6 <__aeabi_dadd+0x24a>
 8001414:	027f      	lsls	r7, r7, #9
 8001416:	0a7f      	lsrs	r7, r7, #9
 8001418:	2f00      	cmp	r7, #0
 800141a:	d100      	bne.n	800141e <__aeabi_dadd+0xb2>
 800141c:	e0ff      	b.n	800161e <__aeabi_dadd+0x2b2>
 800141e:	0038      	movs	r0, r7
 8001420:	f001 fe5a 	bl	80030d8 <__clzsi2>
 8001424:	0001      	movs	r1, r0
 8001426:	3908      	subs	r1, #8
 8001428:	2320      	movs	r3, #32
 800142a:	0022      	movs	r2, r4
 800142c:	1a5b      	subs	r3, r3, r1
 800142e:	408f      	lsls	r7, r1
 8001430:	40da      	lsrs	r2, r3
 8001432:	408c      	lsls	r4, r1
 8001434:	4317      	orrs	r7, r2
 8001436:	42b1      	cmp	r1, r6
 8001438:	da00      	bge.n	800143c <__aeabi_dadd+0xd0>
 800143a:	e0ff      	b.n	800163c <__aeabi_dadd+0x2d0>
 800143c:	1b89      	subs	r1, r1, r6
 800143e:	1c4b      	adds	r3, r1, #1
 8001440:	2b1f      	cmp	r3, #31
 8001442:	dd00      	ble.n	8001446 <__aeabi_dadd+0xda>
 8001444:	e0a8      	b.n	8001598 <__aeabi_dadd+0x22c>
 8001446:	2220      	movs	r2, #32
 8001448:	0039      	movs	r1, r7
 800144a:	1ad2      	subs	r2, r2, r3
 800144c:	0020      	movs	r0, r4
 800144e:	4094      	lsls	r4, r2
 8001450:	4091      	lsls	r1, r2
 8001452:	40d8      	lsrs	r0, r3
 8001454:	1e62      	subs	r2, r4, #1
 8001456:	4194      	sbcs	r4, r2
 8001458:	40df      	lsrs	r7, r3
 800145a:	2600      	movs	r6, #0
 800145c:	4301      	orrs	r1, r0
 800145e:	430c      	orrs	r4, r1
 8001460:	0763      	lsls	r3, r4, #29
 8001462:	d009      	beq.n	8001478 <__aeabi_dadd+0x10c>
 8001464:	230f      	movs	r3, #15
 8001466:	4023      	ands	r3, r4
 8001468:	2b04      	cmp	r3, #4
 800146a:	d005      	beq.n	8001478 <__aeabi_dadd+0x10c>
 800146c:	1d23      	adds	r3, r4, #4
 800146e:	42a3      	cmp	r3, r4
 8001470:	41a4      	sbcs	r4, r4
 8001472:	4264      	negs	r4, r4
 8001474:	193f      	adds	r7, r7, r4
 8001476:	001c      	movs	r4, r3
 8001478:	023b      	lsls	r3, r7, #8
 800147a:	d400      	bmi.n	800147e <__aeabi_dadd+0x112>
 800147c:	e09e      	b.n	80015bc <__aeabi_dadd+0x250>
 800147e:	4b95      	ldr	r3, [pc, #596]	; (80016d4 <__aeabi_dadd+0x368>)
 8001480:	3601      	adds	r6, #1
 8001482:	429e      	cmp	r6, r3
 8001484:	d100      	bne.n	8001488 <__aeabi_dadd+0x11c>
 8001486:	e0b7      	b.n	80015f8 <__aeabi_dadd+0x28c>
 8001488:	4a93      	ldr	r2, [pc, #588]	; (80016d8 <__aeabi_dadd+0x36c>)
 800148a:	08e4      	lsrs	r4, r4, #3
 800148c:	4017      	ands	r7, r2
 800148e:	077b      	lsls	r3, r7, #29
 8001490:	0571      	lsls	r1, r6, #21
 8001492:	027f      	lsls	r7, r7, #9
 8001494:	4323      	orrs	r3, r4
 8001496:	0b3f      	lsrs	r7, r7, #12
 8001498:	0d4a      	lsrs	r2, r1, #21
 800149a:	0512      	lsls	r2, r2, #20
 800149c:	433a      	orrs	r2, r7
 800149e:	07ed      	lsls	r5, r5, #31
 80014a0:	432a      	orrs	r2, r5
 80014a2:	0018      	movs	r0, r3
 80014a4:	0011      	movs	r1, r2
 80014a6:	bce0      	pop	{r5, r6, r7}
 80014a8:	46ba      	mov	sl, r7
 80014aa:	46b1      	mov	r9, r6
 80014ac:	46a8      	mov	r8, r5
 80014ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b0:	2c00      	cmp	r4, #0
 80014b2:	d04b      	beq.n	800154c <__aeabi_dadd+0x1e0>
 80014b4:	464c      	mov	r4, r9
 80014b6:	1ba4      	subs	r4, r4, r6
 80014b8:	46a4      	mov	ip, r4
 80014ba:	2e00      	cmp	r6, #0
 80014bc:	d000      	beq.n	80014c0 <__aeabi_dadd+0x154>
 80014be:	e123      	b.n	8001708 <__aeabi_dadd+0x39c>
 80014c0:	0004      	movs	r4, r0
 80014c2:	431c      	orrs	r4, r3
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dadd+0x15c>
 80014c6:	e1af      	b.n	8001828 <__aeabi_dadd+0x4bc>
 80014c8:	4662      	mov	r2, ip
 80014ca:	1e54      	subs	r4, r2, #1
 80014cc:	2a01      	cmp	r2, #1
 80014ce:	d100      	bne.n	80014d2 <__aeabi_dadd+0x166>
 80014d0:	e215      	b.n	80018fe <__aeabi_dadd+0x592>
 80014d2:	4d80      	ldr	r5, [pc, #512]	; (80016d4 <__aeabi_dadd+0x368>)
 80014d4:	45ac      	cmp	ip, r5
 80014d6:	d100      	bne.n	80014da <__aeabi_dadd+0x16e>
 80014d8:	e1c8      	b.n	800186c <__aeabi_dadd+0x500>
 80014da:	46a4      	mov	ip, r4
 80014dc:	e11b      	b.n	8001716 <__aeabi_dadd+0x3aa>
 80014de:	464a      	mov	r2, r9
 80014e0:	1ab2      	subs	r2, r6, r2
 80014e2:	4694      	mov	ip, r2
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	dc00      	bgt.n	80014ea <__aeabi_dadd+0x17e>
 80014e8:	e0ac      	b.n	8001644 <__aeabi_dadd+0x2d8>
 80014ea:	464a      	mov	r2, r9
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d043      	beq.n	8001578 <__aeabi_dadd+0x20c>
 80014f0:	4a78      	ldr	r2, [pc, #480]	; (80016d4 <__aeabi_dadd+0x368>)
 80014f2:	4296      	cmp	r6, r2
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x18c>
 80014f6:	e1af      	b.n	8001858 <__aeabi_dadd+0x4ec>
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	003c      	movs	r4, r7
 80014fc:	0412      	lsls	r2, r2, #16
 80014fe:	4314      	orrs	r4, r2
 8001500:	46a0      	mov	r8, r4
 8001502:	4662      	mov	r2, ip
 8001504:	2a38      	cmp	r2, #56	; 0x38
 8001506:	dc67      	bgt.n	80015d8 <__aeabi_dadd+0x26c>
 8001508:	2a1f      	cmp	r2, #31
 800150a:	dc00      	bgt.n	800150e <__aeabi_dadd+0x1a2>
 800150c:	e15f      	b.n	80017ce <__aeabi_dadd+0x462>
 800150e:	4647      	mov	r7, r8
 8001510:	3a20      	subs	r2, #32
 8001512:	40d7      	lsrs	r7, r2
 8001514:	4662      	mov	r2, ip
 8001516:	2a20      	cmp	r2, #32
 8001518:	d005      	beq.n	8001526 <__aeabi_dadd+0x1ba>
 800151a:	4664      	mov	r4, ip
 800151c:	2240      	movs	r2, #64	; 0x40
 800151e:	1b12      	subs	r2, r2, r4
 8001520:	4644      	mov	r4, r8
 8001522:	4094      	lsls	r4, r2
 8001524:	4321      	orrs	r1, r4
 8001526:	1e4a      	subs	r2, r1, #1
 8001528:	4191      	sbcs	r1, r2
 800152a:	000c      	movs	r4, r1
 800152c:	433c      	orrs	r4, r7
 800152e:	e057      	b.n	80015e0 <__aeabi_dadd+0x274>
 8001530:	003a      	movs	r2, r7
 8001532:	430a      	orrs	r2, r1
 8001534:	d100      	bne.n	8001538 <__aeabi_dadd+0x1cc>
 8001536:	e105      	b.n	8001744 <__aeabi_dadd+0x3d8>
 8001538:	0022      	movs	r2, r4
 800153a:	3a01      	subs	r2, #1
 800153c:	2c01      	cmp	r4, #1
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x1d6>
 8001540:	e182      	b.n	8001848 <__aeabi_dadd+0x4dc>
 8001542:	4c64      	ldr	r4, [pc, #400]	; (80016d4 <__aeabi_dadd+0x368>)
 8001544:	45a4      	cmp	ip, r4
 8001546:	d05b      	beq.n	8001600 <__aeabi_dadd+0x294>
 8001548:	4694      	mov	ip, r2
 800154a:	e741      	b.n	80013d0 <__aeabi_dadd+0x64>
 800154c:	4c63      	ldr	r4, [pc, #396]	; (80016dc <__aeabi_dadd+0x370>)
 800154e:	1c77      	adds	r7, r6, #1
 8001550:	4227      	tst	r7, r4
 8001552:	d000      	beq.n	8001556 <__aeabi_dadd+0x1ea>
 8001554:	e0c4      	b.n	80016e0 <__aeabi_dadd+0x374>
 8001556:	0004      	movs	r4, r0
 8001558:	431c      	orrs	r4, r3
 800155a:	2e00      	cmp	r6, #0
 800155c:	d000      	beq.n	8001560 <__aeabi_dadd+0x1f4>
 800155e:	e169      	b.n	8001834 <__aeabi_dadd+0x4c8>
 8001560:	2c00      	cmp	r4, #0
 8001562:	d100      	bne.n	8001566 <__aeabi_dadd+0x1fa>
 8001564:	e1bf      	b.n	80018e6 <__aeabi_dadd+0x57a>
 8001566:	4644      	mov	r4, r8
 8001568:	430c      	orrs	r4, r1
 800156a:	d000      	beq.n	800156e <__aeabi_dadd+0x202>
 800156c:	e1d0      	b.n	8001910 <__aeabi_dadd+0x5a4>
 800156e:	0742      	lsls	r2, r0, #29
 8001570:	08db      	lsrs	r3, r3, #3
 8001572:	4313      	orrs	r3, r2
 8001574:	08c0      	lsrs	r0, r0, #3
 8001576:	e029      	b.n	80015cc <__aeabi_dadd+0x260>
 8001578:	003a      	movs	r2, r7
 800157a:	430a      	orrs	r2, r1
 800157c:	d100      	bne.n	8001580 <__aeabi_dadd+0x214>
 800157e:	e170      	b.n	8001862 <__aeabi_dadd+0x4f6>
 8001580:	4662      	mov	r2, ip
 8001582:	4664      	mov	r4, ip
 8001584:	3a01      	subs	r2, #1
 8001586:	2c01      	cmp	r4, #1
 8001588:	d100      	bne.n	800158c <__aeabi_dadd+0x220>
 800158a:	e0e0      	b.n	800174e <__aeabi_dadd+0x3e2>
 800158c:	4c51      	ldr	r4, [pc, #324]	; (80016d4 <__aeabi_dadd+0x368>)
 800158e:	45a4      	cmp	ip, r4
 8001590:	d100      	bne.n	8001594 <__aeabi_dadd+0x228>
 8001592:	e161      	b.n	8001858 <__aeabi_dadd+0x4ec>
 8001594:	4694      	mov	ip, r2
 8001596:	e7b4      	b.n	8001502 <__aeabi_dadd+0x196>
 8001598:	003a      	movs	r2, r7
 800159a:	391f      	subs	r1, #31
 800159c:	40ca      	lsrs	r2, r1
 800159e:	0011      	movs	r1, r2
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	d003      	beq.n	80015ac <__aeabi_dadd+0x240>
 80015a4:	2240      	movs	r2, #64	; 0x40
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	409f      	lsls	r7, r3
 80015aa:	433c      	orrs	r4, r7
 80015ac:	1e63      	subs	r3, r4, #1
 80015ae:	419c      	sbcs	r4, r3
 80015b0:	2700      	movs	r7, #0
 80015b2:	2600      	movs	r6, #0
 80015b4:	430c      	orrs	r4, r1
 80015b6:	0763      	lsls	r3, r4, #29
 80015b8:	d000      	beq.n	80015bc <__aeabi_dadd+0x250>
 80015ba:	e753      	b.n	8001464 <__aeabi_dadd+0xf8>
 80015bc:	46b4      	mov	ip, r6
 80015be:	08e4      	lsrs	r4, r4, #3
 80015c0:	077b      	lsls	r3, r7, #29
 80015c2:	4323      	orrs	r3, r4
 80015c4:	08f8      	lsrs	r0, r7, #3
 80015c6:	4a43      	ldr	r2, [pc, #268]	; (80016d4 <__aeabi_dadd+0x368>)
 80015c8:	4594      	cmp	ip, r2
 80015ca:	d01d      	beq.n	8001608 <__aeabi_dadd+0x29c>
 80015cc:	4662      	mov	r2, ip
 80015ce:	0307      	lsls	r7, r0, #12
 80015d0:	0552      	lsls	r2, r2, #21
 80015d2:	0b3f      	lsrs	r7, r7, #12
 80015d4:	0d52      	lsrs	r2, r2, #21
 80015d6:	e760      	b.n	800149a <__aeabi_dadd+0x12e>
 80015d8:	4644      	mov	r4, r8
 80015da:	430c      	orrs	r4, r1
 80015dc:	1e62      	subs	r2, r4, #1
 80015de:	4194      	sbcs	r4, r2
 80015e0:	18e4      	adds	r4, r4, r3
 80015e2:	429c      	cmp	r4, r3
 80015e4:	419b      	sbcs	r3, r3
 80015e6:	425f      	negs	r7, r3
 80015e8:	183f      	adds	r7, r7, r0
 80015ea:	023b      	lsls	r3, r7, #8
 80015ec:	d5e3      	bpl.n	80015b6 <__aeabi_dadd+0x24a>
 80015ee:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <__aeabi_dadd+0x368>)
 80015f0:	3601      	adds	r6, #1
 80015f2:	429e      	cmp	r6, r3
 80015f4:	d000      	beq.n	80015f8 <__aeabi_dadd+0x28c>
 80015f6:	e0b5      	b.n	8001764 <__aeabi_dadd+0x3f8>
 80015f8:	0032      	movs	r2, r6
 80015fa:	2700      	movs	r7, #0
 80015fc:	2300      	movs	r3, #0
 80015fe:	e74c      	b.n	800149a <__aeabi_dadd+0x12e>
 8001600:	0742      	lsls	r2, r0, #29
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	4313      	orrs	r3, r2
 8001606:	08c0      	lsrs	r0, r0, #3
 8001608:	001a      	movs	r2, r3
 800160a:	4302      	orrs	r2, r0
 800160c:	d100      	bne.n	8001610 <__aeabi_dadd+0x2a4>
 800160e:	e1e1      	b.n	80019d4 <__aeabi_dadd+0x668>
 8001610:	2780      	movs	r7, #128	; 0x80
 8001612:	033f      	lsls	r7, r7, #12
 8001614:	4307      	orrs	r7, r0
 8001616:	033f      	lsls	r7, r7, #12
 8001618:	4a2e      	ldr	r2, [pc, #184]	; (80016d4 <__aeabi_dadd+0x368>)
 800161a:	0b3f      	lsrs	r7, r7, #12
 800161c:	e73d      	b.n	800149a <__aeabi_dadd+0x12e>
 800161e:	0020      	movs	r0, r4
 8001620:	f001 fd5a 	bl	80030d8 <__clzsi2>
 8001624:	0001      	movs	r1, r0
 8001626:	3118      	adds	r1, #24
 8001628:	291f      	cmp	r1, #31
 800162a:	dc00      	bgt.n	800162e <__aeabi_dadd+0x2c2>
 800162c:	e6fc      	b.n	8001428 <__aeabi_dadd+0xbc>
 800162e:	3808      	subs	r0, #8
 8001630:	4084      	lsls	r4, r0
 8001632:	0027      	movs	r7, r4
 8001634:	2400      	movs	r4, #0
 8001636:	42b1      	cmp	r1, r6
 8001638:	db00      	blt.n	800163c <__aeabi_dadd+0x2d0>
 800163a:	e6ff      	b.n	800143c <__aeabi_dadd+0xd0>
 800163c:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <__aeabi_dadd+0x36c>)
 800163e:	1a76      	subs	r6, r6, r1
 8001640:	4017      	ands	r7, r2
 8001642:	e70d      	b.n	8001460 <__aeabi_dadd+0xf4>
 8001644:	2a00      	cmp	r2, #0
 8001646:	d02f      	beq.n	80016a8 <__aeabi_dadd+0x33c>
 8001648:	464a      	mov	r2, r9
 800164a:	1b92      	subs	r2, r2, r6
 800164c:	4694      	mov	ip, r2
 800164e:	2e00      	cmp	r6, #0
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x2e8>
 8001652:	e0ad      	b.n	80017b0 <__aeabi_dadd+0x444>
 8001654:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <__aeabi_dadd+0x368>)
 8001656:	4591      	cmp	r9, r2
 8001658:	d100      	bne.n	800165c <__aeabi_dadd+0x2f0>
 800165a:	e10f      	b.n	800187c <__aeabi_dadd+0x510>
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	0412      	lsls	r2, r2, #16
 8001660:	4310      	orrs	r0, r2
 8001662:	4662      	mov	r2, ip
 8001664:	2a38      	cmp	r2, #56	; 0x38
 8001666:	dd00      	ble.n	800166a <__aeabi_dadd+0x2fe>
 8001668:	e10f      	b.n	800188a <__aeabi_dadd+0x51e>
 800166a:	2a1f      	cmp	r2, #31
 800166c:	dd00      	ble.n	8001670 <__aeabi_dadd+0x304>
 800166e:	e180      	b.n	8001972 <__aeabi_dadd+0x606>
 8001670:	4664      	mov	r4, ip
 8001672:	2220      	movs	r2, #32
 8001674:	001e      	movs	r6, r3
 8001676:	1b12      	subs	r2, r2, r4
 8001678:	4667      	mov	r7, ip
 800167a:	0004      	movs	r4, r0
 800167c:	4093      	lsls	r3, r2
 800167e:	4094      	lsls	r4, r2
 8001680:	40fe      	lsrs	r6, r7
 8001682:	1e5a      	subs	r2, r3, #1
 8001684:	4193      	sbcs	r3, r2
 8001686:	40f8      	lsrs	r0, r7
 8001688:	4334      	orrs	r4, r6
 800168a:	431c      	orrs	r4, r3
 800168c:	4480      	add	r8, r0
 800168e:	1864      	adds	r4, r4, r1
 8001690:	428c      	cmp	r4, r1
 8001692:	41bf      	sbcs	r7, r7
 8001694:	427f      	negs	r7, r7
 8001696:	464e      	mov	r6, r9
 8001698:	4447      	add	r7, r8
 800169a:	e7a6      	b.n	80015ea <__aeabi_dadd+0x27e>
 800169c:	4642      	mov	r2, r8
 800169e:	430a      	orrs	r2, r1
 80016a0:	0011      	movs	r1, r2
 80016a2:	1e4a      	subs	r2, r1, #1
 80016a4:	4191      	sbcs	r1, r2
 80016a6:	e6ad      	b.n	8001404 <__aeabi_dadd+0x98>
 80016a8:	4c0c      	ldr	r4, [pc, #48]	; (80016dc <__aeabi_dadd+0x370>)
 80016aa:	1c72      	adds	r2, r6, #1
 80016ac:	4222      	tst	r2, r4
 80016ae:	d000      	beq.n	80016b2 <__aeabi_dadd+0x346>
 80016b0:	e0a1      	b.n	80017f6 <__aeabi_dadd+0x48a>
 80016b2:	0002      	movs	r2, r0
 80016b4:	431a      	orrs	r2, r3
 80016b6:	2e00      	cmp	r6, #0
 80016b8:	d000      	beq.n	80016bc <__aeabi_dadd+0x350>
 80016ba:	e0fa      	b.n	80018b2 <__aeabi_dadd+0x546>
 80016bc:	2a00      	cmp	r2, #0
 80016be:	d100      	bne.n	80016c2 <__aeabi_dadd+0x356>
 80016c0:	e145      	b.n	800194e <__aeabi_dadd+0x5e2>
 80016c2:	003a      	movs	r2, r7
 80016c4:	430a      	orrs	r2, r1
 80016c6:	d000      	beq.n	80016ca <__aeabi_dadd+0x35e>
 80016c8:	e146      	b.n	8001958 <__aeabi_dadd+0x5ec>
 80016ca:	0742      	lsls	r2, r0, #29
 80016cc:	08db      	lsrs	r3, r3, #3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	08c0      	lsrs	r0, r0, #3
 80016d2:	e77b      	b.n	80015cc <__aeabi_dadd+0x260>
 80016d4:	000007ff 	.word	0x000007ff
 80016d8:	ff7fffff 	.word	0xff7fffff
 80016dc:	000007fe 	.word	0x000007fe
 80016e0:	4647      	mov	r7, r8
 80016e2:	1a5c      	subs	r4, r3, r1
 80016e4:	1bc2      	subs	r2, r0, r7
 80016e6:	42a3      	cmp	r3, r4
 80016e8:	41bf      	sbcs	r7, r7
 80016ea:	427f      	negs	r7, r7
 80016ec:	46b9      	mov	r9, r7
 80016ee:	0017      	movs	r7, r2
 80016f0:	464a      	mov	r2, r9
 80016f2:	1abf      	subs	r7, r7, r2
 80016f4:	023a      	lsls	r2, r7, #8
 80016f6:	d500      	bpl.n	80016fa <__aeabi_dadd+0x38e>
 80016f8:	e08d      	b.n	8001816 <__aeabi_dadd+0x4aa>
 80016fa:	0023      	movs	r3, r4
 80016fc:	433b      	orrs	r3, r7
 80016fe:	d000      	beq.n	8001702 <__aeabi_dadd+0x396>
 8001700:	e68a      	b.n	8001418 <__aeabi_dadd+0xac>
 8001702:	2000      	movs	r0, #0
 8001704:	2500      	movs	r5, #0
 8001706:	e761      	b.n	80015cc <__aeabi_dadd+0x260>
 8001708:	4cb4      	ldr	r4, [pc, #720]	; (80019dc <__aeabi_dadd+0x670>)
 800170a:	45a1      	cmp	r9, r4
 800170c:	d100      	bne.n	8001710 <__aeabi_dadd+0x3a4>
 800170e:	e0ad      	b.n	800186c <__aeabi_dadd+0x500>
 8001710:	2480      	movs	r4, #128	; 0x80
 8001712:	0424      	lsls	r4, r4, #16
 8001714:	4320      	orrs	r0, r4
 8001716:	4664      	mov	r4, ip
 8001718:	2c38      	cmp	r4, #56	; 0x38
 800171a:	dc3d      	bgt.n	8001798 <__aeabi_dadd+0x42c>
 800171c:	4662      	mov	r2, ip
 800171e:	2c1f      	cmp	r4, #31
 8001720:	dd00      	ble.n	8001724 <__aeabi_dadd+0x3b8>
 8001722:	e0b7      	b.n	8001894 <__aeabi_dadd+0x528>
 8001724:	2520      	movs	r5, #32
 8001726:	001e      	movs	r6, r3
 8001728:	1b2d      	subs	r5, r5, r4
 800172a:	0004      	movs	r4, r0
 800172c:	40ab      	lsls	r3, r5
 800172e:	40ac      	lsls	r4, r5
 8001730:	40d6      	lsrs	r6, r2
 8001732:	40d0      	lsrs	r0, r2
 8001734:	4642      	mov	r2, r8
 8001736:	1e5d      	subs	r5, r3, #1
 8001738:	41ab      	sbcs	r3, r5
 800173a:	4334      	orrs	r4, r6
 800173c:	1a12      	subs	r2, r2, r0
 800173e:	4690      	mov	r8, r2
 8001740:	4323      	orrs	r3, r4
 8001742:	e02c      	b.n	800179e <__aeabi_dadd+0x432>
 8001744:	0742      	lsls	r2, r0, #29
 8001746:	08db      	lsrs	r3, r3, #3
 8001748:	4313      	orrs	r3, r2
 800174a:	08c0      	lsrs	r0, r0, #3
 800174c:	e73b      	b.n	80015c6 <__aeabi_dadd+0x25a>
 800174e:	185c      	adds	r4, r3, r1
 8001750:	429c      	cmp	r4, r3
 8001752:	419b      	sbcs	r3, r3
 8001754:	4440      	add	r0, r8
 8001756:	425b      	negs	r3, r3
 8001758:	18c7      	adds	r7, r0, r3
 800175a:	2601      	movs	r6, #1
 800175c:	023b      	lsls	r3, r7, #8
 800175e:	d400      	bmi.n	8001762 <__aeabi_dadd+0x3f6>
 8001760:	e729      	b.n	80015b6 <__aeabi_dadd+0x24a>
 8001762:	2602      	movs	r6, #2
 8001764:	4a9e      	ldr	r2, [pc, #632]	; (80019e0 <__aeabi_dadd+0x674>)
 8001766:	0863      	lsrs	r3, r4, #1
 8001768:	4017      	ands	r7, r2
 800176a:	2201      	movs	r2, #1
 800176c:	4014      	ands	r4, r2
 800176e:	431c      	orrs	r4, r3
 8001770:	07fb      	lsls	r3, r7, #31
 8001772:	431c      	orrs	r4, r3
 8001774:	087f      	lsrs	r7, r7, #1
 8001776:	e673      	b.n	8001460 <__aeabi_dadd+0xf4>
 8001778:	4644      	mov	r4, r8
 800177a:	3a20      	subs	r2, #32
 800177c:	40d4      	lsrs	r4, r2
 800177e:	4662      	mov	r2, ip
 8001780:	2a20      	cmp	r2, #32
 8001782:	d005      	beq.n	8001790 <__aeabi_dadd+0x424>
 8001784:	4667      	mov	r7, ip
 8001786:	2240      	movs	r2, #64	; 0x40
 8001788:	1bd2      	subs	r2, r2, r7
 800178a:	4647      	mov	r7, r8
 800178c:	4097      	lsls	r7, r2
 800178e:	4339      	orrs	r1, r7
 8001790:	1e4a      	subs	r2, r1, #1
 8001792:	4191      	sbcs	r1, r2
 8001794:	4321      	orrs	r1, r4
 8001796:	e635      	b.n	8001404 <__aeabi_dadd+0x98>
 8001798:	4303      	orrs	r3, r0
 800179a:	1e58      	subs	r0, r3, #1
 800179c:	4183      	sbcs	r3, r0
 800179e:	1acc      	subs	r4, r1, r3
 80017a0:	42a1      	cmp	r1, r4
 80017a2:	41bf      	sbcs	r7, r7
 80017a4:	4643      	mov	r3, r8
 80017a6:	427f      	negs	r7, r7
 80017a8:	4655      	mov	r5, sl
 80017aa:	464e      	mov	r6, r9
 80017ac:	1bdf      	subs	r7, r3, r7
 80017ae:	e62e      	b.n	800140e <__aeabi_dadd+0xa2>
 80017b0:	0002      	movs	r2, r0
 80017b2:	431a      	orrs	r2, r3
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dadd+0x44c>
 80017b6:	e0bd      	b.n	8001934 <__aeabi_dadd+0x5c8>
 80017b8:	4662      	mov	r2, ip
 80017ba:	4664      	mov	r4, ip
 80017bc:	3a01      	subs	r2, #1
 80017be:	2c01      	cmp	r4, #1
 80017c0:	d100      	bne.n	80017c4 <__aeabi_dadd+0x458>
 80017c2:	e0e5      	b.n	8001990 <__aeabi_dadd+0x624>
 80017c4:	4c85      	ldr	r4, [pc, #532]	; (80019dc <__aeabi_dadd+0x670>)
 80017c6:	45a4      	cmp	ip, r4
 80017c8:	d058      	beq.n	800187c <__aeabi_dadd+0x510>
 80017ca:	4694      	mov	ip, r2
 80017cc:	e749      	b.n	8001662 <__aeabi_dadd+0x2f6>
 80017ce:	4664      	mov	r4, ip
 80017d0:	2220      	movs	r2, #32
 80017d2:	1b12      	subs	r2, r2, r4
 80017d4:	4644      	mov	r4, r8
 80017d6:	4094      	lsls	r4, r2
 80017d8:	000f      	movs	r7, r1
 80017da:	46a1      	mov	r9, r4
 80017dc:	4664      	mov	r4, ip
 80017de:	4091      	lsls	r1, r2
 80017e0:	40e7      	lsrs	r7, r4
 80017e2:	464c      	mov	r4, r9
 80017e4:	1e4a      	subs	r2, r1, #1
 80017e6:	4191      	sbcs	r1, r2
 80017e8:	433c      	orrs	r4, r7
 80017ea:	4642      	mov	r2, r8
 80017ec:	430c      	orrs	r4, r1
 80017ee:	4661      	mov	r1, ip
 80017f0:	40ca      	lsrs	r2, r1
 80017f2:	1880      	adds	r0, r0, r2
 80017f4:	e6f4      	b.n	80015e0 <__aeabi_dadd+0x274>
 80017f6:	4c79      	ldr	r4, [pc, #484]	; (80019dc <__aeabi_dadd+0x670>)
 80017f8:	42a2      	cmp	r2, r4
 80017fa:	d100      	bne.n	80017fe <__aeabi_dadd+0x492>
 80017fc:	e6fd      	b.n	80015fa <__aeabi_dadd+0x28e>
 80017fe:	1859      	adds	r1, r3, r1
 8001800:	4299      	cmp	r1, r3
 8001802:	419b      	sbcs	r3, r3
 8001804:	4440      	add	r0, r8
 8001806:	425f      	negs	r7, r3
 8001808:	19c7      	adds	r7, r0, r7
 800180a:	07fc      	lsls	r4, r7, #31
 800180c:	0849      	lsrs	r1, r1, #1
 800180e:	0016      	movs	r6, r2
 8001810:	430c      	orrs	r4, r1
 8001812:	087f      	lsrs	r7, r7, #1
 8001814:	e6cf      	b.n	80015b6 <__aeabi_dadd+0x24a>
 8001816:	1acc      	subs	r4, r1, r3
 8001818:	42a1      	cmp	r1, r4
 800181a:	41bf      	sbcs	r7, r7
 800181c:	4643      	mov	r3, r8
 800181e:	427f      	negs	r7, r7
 8001820:	1a18      	subs	r0, r3, r0
 8001822:	4655      	mov	r5, sl
 8001824:	1bc7      	subs	r7, r0, r7
 8001826:	e5f7      	b.n	8001418 <__aeabi_dadd+0xac>
 8001828:	08c9      	lsrs	r1, r1, #3
 800182a:	077b      	lsls	r3, r7, #29
 800182c:	4655      	mov	r5, sl
 800182e:	430b      	orrs	r3, r1
 8001830:	08f8      	lsrs	r0, r7, #3
 8001832:	e6c8      	b.n	80015c6 <__aeabi_dadd+0x25a>
 8001834:	2c00      	cmp	r4, #0
 8001836:	d000      	beq.n	800183a <__aeabi_dadd+0x4ce>
 8001838:	e081      	b.n	800193e <__aeabi_dadd+0x5d2>
 800183a:	4643      	mov	r3, r8
 800183c:	430b      	orrs	r3, r1
 800183e:	d115      	bne.n	800186c <__aeabi_dadd+0x500>
 8001840:	2080      	movs	r0, #128	; 0x80
 8001842:	2500      	movs	r5, #0
 8001844:	0300      	lsls	r0, r0, #12
 8001846:	e6e3      	b.n	8001610 <__aeabi_dadd+0x2a4>
 8001848:	1a5c      	subs	r4, r3, r1
 800184a:	42a3      	cmp	r3, r4
 800184c:	419b      	sbcs	r3, r3
 800184e:	1bc7      	subs	r7, r0, r7
 8001850:	425b      	negs	r3, r3
 8001852:	2601      	movs	r6, #1
 8001854:	1aff      	subs	r7, r7, r3
 8001856:	e5da      	b.n	800140e <__aeabi_dadd+0xa2>
 8001858:	0742      	lsls	r2, r0, #29
 800185a:	08db      	lsrs	r3, r3, #3
 800185c:	4313      	orrs	r3, r2
 800185e:	08c0      	lsrs	r0, r0, #3
 8001860:	e6d2      	b.n	8001608 <__aeabi_dadd+0x29c>
 8001862:	0742      	lsls	r2, r0, #29
 8001864:	08db      	lsrs	r3, r3, #3
 8001866:	4313      	orrs	r3, r2
 8001868:	08c0      	lsrs	r0, r0, #3
 800186a:	e6ac      	b.n	80015c6 <__aeabi_dadd+0x25a>
 800186c:	4643      	mov	r3, r8
 800186e:	4642      	mov	r2, r8
 8001870:	08c9      	lsrs	r1, r1, #3
 8001872:	075b      	lsls	r3, r3, #29
 8001874:	4655      	mov	r5, sl
 8001876:	430b      	orrs	r3, r1
 8001878:	08d0      	lsrs	r0, r2, #3
 800187a:	e6c5      	b.n	8001608 <__aeabi_dadd+0x29c>
 800187c:	4643      	mov	r3, r8
 800187e:	4642      	mov	r2, r8
 8001880:	075b      	lsls	r3, r3, #29
 8001882:	08c9      	lsrs	r1, r1, #3
 8001884:	430b      	orrs	r3, r1
 8001886:	08d0      	lsrs	r0, r2, #3
 8001888:	e6be      	b.n	8001608 <__aeabi_dadd+0x29c>
 800188a:	4303      	orrs	r3, r0
 800188c:	001c      	movs	r4, r3
 800188e:	1e63      	subs	r3, r4, #1
 8001890:	419c      	sbcs	r4, r3
 8001892:	e6fc      	b.n	800168e <__aeabi_dadd+0x322>
 8001894:	0002      	movs	r2, r0
 8001896:	3c20      	subs	r4, #32
 8001898:	40e2      	lsrs	r2, r4
 800189a:	0014      	movs	r4, r2
 800189c:	4662      	mov	r2, ip
 800189e:	2a20      	cmp	r2, #32
 80018a0:	d003      	beq.n	80018aa <__aeabi_dadd+0x53e>
 80018a2:	2540      	movs	r5, #64	; 0x40
 80018a4:	1aad      	subs	r5, r5, r2
 80018a6:	40a8      	lsls	r0, r5
 80018a8:	4303      	orrs	r3, r0
 80018aa:	1e58      	subs	r0, r3, #1
 80018ac:	4183      	sbcs	r3, r0
 80018ae:	4323      	orrs	r3, r4
 80018b0:	e775      	b.n	800179e <__aeabi_dadd+0x432>
 80018b2:	2a00      	cmp	r2, #0
 80018b4:	d0e2      	beq.n	800187c <__aeabi_dadd+0x510>
 80018b6:	003a      	movs	r2, r7
 80018b8:	430a      	orrs	r2, r1
 80018ba:	d0cd      	beq.n	8001858 <__aeabi_dadd+0x4ec>
 80018bc:	0742      	lsls	r2, r0, #29
 80018be:	08db      	lsrs	r3, r3, #3
 80018c0:	4313      	orrs	r3, r2
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	08c0      	lsrs	r0, r0, #3
 80018c6:	0312      	lsls	r2, r2, #12
 80018c8:	4210      	tst	r0, r2
 80018ca:	d006      	beq.n	80018da <__aeabi_dadd+0x56e>
 80018cc:	08fc      	lsrs	r4, r7, #3
 80018ce:	4214      	tst	r4, r2
 80018d0:	d103      	bne.n	80018da <__aeabi_dadd+0x56e>
 80018d2:	0020      	movs	r0, r4
 80018d4:	08cb      	lsrs	r3, r1, #3
 80018d6:	077a      	lsls	r2, r7, #29
 80018d8:	4313      	orrs	r3, r2
 80018da:	0f5a      	lsrs	r2, r3, #29
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	0752      	lsls	r2, r2, #29
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	e690      	b.n	8001608 <__aeabi_dadd+0x29c>
 80018e6:	4643      	mov	r3, r8
 80018e8:	430b      	orrs	r3, r1
 80018ea:	d100      	bne.n	80018ee <__aeabi_dadd+0x582>
 80018ec:	e709      	b.n	8001702 <__aeabi_dadd+0x396>
 80018ee:	4643      	mov	r3, r8
 80018f0:	4642      	mov	r2, r8
 80018f2:	08c9      	lsrs	r1, r1, #3
 80018f4:	075b      	lsls	r3, r3, #29
 80018f6:	4655      	mov	r5, sl
 80018f8:	430b      	orrs	r3, r1
 80018fa:	08d0      	lsrs	r0, r2, #3
 80018fc:	e666      	b.n	80015cc <__aeabi_dadd+0x260>
 80018fe:	1acc      	subs	r4, r1, r3
 8001900:	42a1      	cmp	r1, r4
 8001902:	4189      	sbcs	r1, r1
 8001904:	1a3f      	subs	r7, r7, r0
 8001906:	4249      	negs	r1, r1
 8001908:	4655      	mov	r5, sl
 800190a:	2601      	movs	r6, #1
 800190c:	1a7f      	subs	r7, r7, r1
 800190e:	e57e      	b.n	800140e <__aeabi_dadd+0xa2>
 8001910:	4642      	mov	r2, r8
 8001912:	1a5c      	subs	r4, r3, r1
 8001914:	1a87      	subs	r7, r0, r2
 8001916:	42a3      	cmp	r3, r4
 8001918:	4192      	sbcs	r2, r2
 800191a:	4252      	negs	r2, r2
 800191c:	1abf      	subs	r7, r7, r2
 800191e:	023a      	lsls	r2, r7, #8
 8001920:	d53d      	bpl.n	800199e <__aeabi_dadd+0x632>
 8001922:	1acc      	subs	r4, r1, r3
 8001924:	42a1      	cmp	r1, r4
 8001926:	4189      	sbcs	r1, r1
 8001928:	4643      	mov	r3, r8
 800192a:	4249      	negs	r1, r1
 800192c:	1a1f      	subs	r7, r3, r0
 800192e:	4655      	mov	r5, sl
 8001930:	1a7f      	subs	r7, r7, r1
 8001932:	e595      	b.n	8001460 <__aeabi_dadd+0xf4>
 8001934:	077b      	lsls	r3, r7, #29
 8001936:	08c9      	lsrs	r1, r1, #3
 8001938:	430b      	orrs	r3, r1
 800193a:	08f8      	lsrs	r0, r7, #3
 800193c:	e643      	b.n	80015c6 <__aeabi_dadd+0x25a>
 800193e:	4644      	mov	r4, r8
 8001940:	08db      	lsrs	r3, r3, #3
 8001942:	430c      	orrs	r4, r1
 8001944:	d130      	bne.n	80019a8 <__aeabi_dadd+0x63c>
 8001946:	0742      	lsls	r2, r0, #29
 8001948:	4313      	orrs	r3, r2
 800194a:	08c0      	lsrs	r0, r0, #3
 800194c:	e65c      	b.n	8001608 <__aeabi_dadd+0x29c>
 800194e:	077b      	lsls	r3, r7, #29
 8001950:	08c9      	lsrs	r1, r1, #3
 8001952:	430b      	orrs	r3, r1
 8001954:	08f8      	lsrs	r0, r7, #3
 8001956:	e639      	b.n	80015cc <__aeabi_dadd+0x260>
 8001958:	185c      	adds	r4, r3, r1
 800195a:	429c      	cmp	r4, r3
 800195c:	419b      	sbcs	r3, r3
 800195e:	4440      	add	r0, r8
 8001960:	425b      	negs	r3, r3
 8001962:	18c7      	adds	r7, r0, r3
 8001964:	023b      	lsls	r3, r7, #8
 8001966:	d400      	bmi.n	800196a <__aeabi_dadd+0x5fe>
 8001968:	e625      	b.n	80015b6 <__aeabi_dadd+0x24a>
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <__aeabi_dadd+0x674>)
 800196c:	2601      	movs	r6, #1
 800196e:	401f      	ands	r7, r3
 8001970:	e621      	b.n	80015b6 <__aeabi_dadd+0x24a>
 8001972:	0004      	movs	r4, r0
 8001974:	3a20      	subs	r2, #32
 8001976:	40d4      	lsrs	r4, r2
 8001978:	4662      	mov	r2, ip
 800197a:	2a20      	cmp	r2, #32
 800197c:	d004      	beq.n	8001988 <__aeabi_dadd+0x61c>
 800197e:	2240      	movs	r2, #64	; 0x40
 8001980:	4666      	mov	r6, ip
 8001982:	1b92      	subs	r2, r2, r6
 8001984:	4090      	lsls	r0, r2
 8001986:	4303      	orrs	r3, r0
 8001988:	1e5a      	subs	r2, r3, #1
 800198a:	4193      	sbcs	r3, r2
 800198c:	431c      	orrs	r4, r3
 800198e:	e67e      	b.n	800168e <__aeabi_dadd+0x322>
 8001990:	185c      	adds	r4, r3, r1
 8001992:	428c      	cmp	r4, r1
 8001994:	4189      	sbcs	r1, r1
 8001996:	4440      	add	r0, r8
 8001998:	4249      	negs	r1, r1
 800199a:	1847      	adds	r7, r0, r1
 800199c:	e6dd      	b.n	800175a <__aeabi_dadd+0x3ee>
 800199e:	0023      	movs	r3, r4
 80019a0:	433b      	orrs	r3, r7
 80019a2:	d100      	bne.n	80019a6 <__aeabi_dadd+0x63a>
 80019a4:	e6ad      	b.n	8001702 <__aeabi_dadd+0x396>
 80019a6:	e606      	b.n	80015b6 <__aeabi_dadd+0x24a>
 80019a8:	0744      	lsls	r4, r0, #29
 80019aa:	4323      	orrs	r3, r4
 80019ac:	2480      	movs	r4, #128	; 0x80
 80019ae:	08c0      	lsrs	r0, r0, #3
 80019b0:	0324      	lsls	r4, r4, #12
 80019b2:	4220      	tst	r0, r4
 80019b4:	d008      	beq.n	80019c8 <__aeabi_dadd+0x65c>
 80019b6:	4642      	mov	r2, r8
 80019b8:	08d6      	lsrs	r6, r2, #3
 80019ba:	4226      	tst	r6, r4
 80019bc:	d104      	bne.n	80019c8 <__aeabi_dadd+0x65c>
 80019be:	4655      	mov	r5, sl
 80019c0:	0030      	movs	r0, r6
 80019c2:	08cb      	lsrs	r3, r1, #3
 80019c4:	0751      	lsls	r1, r2, #29
 80019c6:	430b      	orrs	r3, r1
 80019c8:	0f5a      	lsrs	r2, r3, #29
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	0752      	lsls	r2, r2, #29
 80019d0:	4313      	orrs	r3, r2
 80019d2:	e619      	b.n	8001608 <__aeabi_dadd+0x29c>
 80019d4:	2300      	movs	r3, #0
 80019d6:	4a01      	ldr	r2, [pc, #4]	; (80019dc <__aeabi_dadd+0x670>)
 80019d8:	001f      	movs	r7, r3
 80019da:	e55e      	b.n	800149a <__aeabi_dadd+0x12e>
 80019dc:	000007ff 	.word	0x000007ff
 80019e0:	ff7fffff 	.word	0xff7fffff

080019e4 <__aeabi_ddiv>:
 80019e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e6:	4657      	mov	r7, sl
 80019e8:	464e      	mov	r6, r9
 80019ea:	4645      	mov	r5, r8
 80019ec:	46de      	mov	lr, fp
 80019ee:	b5e0      	push	{r5, r6, r7, lr}
 80019f0:	4681      	mov	r9, r0
 80019f2:	0005      	movs	r5, r0
 80019f4:	030c      	lsls	r4, r1, #12
 80019f6:	0048      	lsls	r0, r1, #1
 80019f8:	4692      	mov	sl, r2
 80019fa:	001f      	movs	r7, r3
 80019fc:	b085      	sub	sp, #20
 80019fe:	0b24      	lsrs	r4, r4, #12
 8001a00:	0d40      	lsrs	r0, r0, #21
 8001a02:	0fce      	lsrs	r6, r1, #31
 8001a04:	2800      	cmp	r0, #0
 8001a06:	d100      	bne.n	8001a0a <__aeabi_ddiv+0x26>
 8001a08:	e156      	b.n	8001cb8 <__aeabi_ddiv+0x2d4>
 8001a0a:	4bd4      	ldr	r3, [pc, #848]	; (8001d5c <__aeabi_ddiv+0x378>)
 8001a0c:	4298      	cmp	r0, r3
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_ddiv+0x2e>
 8001a10:	e172      	b.n	8001cf8 <__aeabi_ddiv+0x314>
 8001a12:	0f6b      	lsrs	r3, r5, #29
 8001a14:	00e4      	lsls	r4, r4, #3
 8001a16:	431c      	orrs	r4, r3
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	041b      	lsls	r3, r3, #16
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	4698      	mov	r8, r3
 8001a20:	4bcf      	ldr	r3, [pc, #828]	; (8001d60 <__aeabi_ddiv+0x37c>)
 8001a22:	00ed      	lsls	r5, r5, #3
 8001a24:	469b      	mov	fp, r3
 8001a26:	2300      	movs	r3, #0
 8001a28:	4699      	mov	r9, r3
 8001a2a:	4483      	add	fp, r0
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	033c      	lsls	r4, r7, #12
 8001a30:	007b      	lsls	r3, r7, #1
 8001a32:	4650      	mov	r0, sl
 8001a34:	0b24      	lsrs	r4, r4, #12
 8001a36:	0d5b      	lsrs	r3, r3, #21
 8001a38:	0fff      	lsrs	r7, r7, #31
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_ddiv+0x5c>
 8001a3e:	e11f      	b.n	8001c80 <__aeabi_ddiv+0x29c>
 8001a40:	4ac6      	ldr	r2, [pc, #792]	; (8001d5c <__aeabi_ddiv+0x378>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d100      	bne.n	8001a48 <__aeabi_ddiv+0x64>
 8001a46:	e162      	b.n	8001d0e <__aeabi_ddiv+0x32a>
 8001a48:	49c5      	ldr	r1, [pc, #788]	; (8001d60 <__aeabi_ddiv+0x37c>)
 8001a4a:	0f42      	lsrs	r2, r0, #29
 8001a4c:	468c      	mov	ip, r1
 8001a4e:	00e4      	lsls	r4, r4, #3
 8001a50:	4659      	mov	r1, fp
 8001a52:	4314      	orrs	r4, r2
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	4463      	add	r3, ip
 8001a58:	0412      	lsls	r2, r2, #16
 8001a5a:	1acb      	subs	r3, r1, r3
 8001a5c:	4314      	orrs	r4, r2
 8001a5e:	469b      	mov	fp, r3
 8001a60:	00c2      	lsls	r2, r0, #3
 8001a62:	2000      	movs	r0, #0
 8001a64:	0033      	movs	r3, r6
 8001a66:	407b      	eors	r3, r7
 8001a68:	469a      	mov	sl, r3
 8001a6a:	464b      	mov	r3, r9
 8001a6c:	2b0f      	cmp	r3, #15
 8001a6e:	d827      	bhi.n	8001ac0 <__aeabi_ddiv+0xdc>
 8001a70:	49bc      	ldr	r1, [pc, #752]	; (8001d64 <__aeabi_ddiv+0x380>)
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	58cb      	ldr	r3, [r1, r3]
 8001a76:	469f      	mov	pc, r3
 8001a78:	46b2      	mov	sl, r6
 8001a7a:	9b00      	ldr	r3, [sp, #0]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d016      	beq.n	8001aae <__aeabi_ddiv+0xca>
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_ddiv+0xa2>
 8001a84:	e28e      	b.n	8001fa4 <__aeabi_ddiv+0x5c0>
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d000      	beq.n	8001a8c <__aeabi_ddiv+0xa8>
 8001a8a:	e0d9      	b.n	8001c40 <__aeabi_ddiv+0x25c>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2400      	movs	r4, #0
 8001a90:	2500      	movs	r5, #0
 8001a92:	4652      	mov	r2, sl
 8001a94:	051b      	lsls	r3, r3, #20
 8001a96:	4323      	orrs	r3, r4
 8001a98:	07d2      	lsls	r2, r2, #31
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	0028      	movs	r0, r5
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	b005      	add	sp, #20
 8001aa2:	bcf0      	pop	{r4, r5, r6, r7}
 8001aa4:	46bb      	mov	fp, r7
 8001aa6:	46b2      	mov	sl, r6
 8001aa8:	46a9      	mov	r9, r5
 8001aaa:	46a0      	mov	r8, r4
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	2400      	movs	r4, #0
 8001ab0:	2500      	movs	r5, #0
 8001ab2:	4baa      	ldr	r3, [pc, #680]	; (8001d5c <__aeabi_ddiv+0x378>)
 8001ab4:	e7ed      	b.n	8001a92 <__aeabi_ddiv+0xae>
 8001ab6:	46ba      	mov	sl, r7
 8001ab8:	46a0      	mov	r8, r4
 8001aba:	0015      	movs	r5, r2
 8001abc:	9000      	str	r0, [sp, #0]
 8001abe:	e7dc      	b.n	8001a7a <__aeabi_ddiv+0x96>
 8001ac0:	4544      	cmp	r4, r8
 8001ac2:	d200      	bcs.n	8001ac6 <__aeabi_ddiv+0xe2>
 8001ac4:	e1c7      	b.n	8001e56 <__aeabi_ddiv+0x472>
 8001ac6:	d100      	bne.n	8001aca <__aeabi_ddiv+0xe6>
 8001ac8:	e1c2      	b.n	8001e50 <__aeabi_ddiv+0x46c>
 8001aca:	2301      	movs	r3, #1
 8001acc:	425b      	negs	r3, r3
 8001ace:	469c      	mov	ip, r3
 8001ad0:	002e      	movs	r6, r5
 8001ad2:	4640      	mov	r0, r8
 8001ad4:	2500      	movs	r5, #0
 8001ad6:	44e3      	add	fp, ip
 8001ad8:	0223      	lsls	r3, r4, #8
 8001ada:	0e14      	lsrs	r4, r2, #24
 8001adc:	431c      	orrs	r4, r3
 8001ade:	0c1b      	lsrs	r3, r3, #16
 8001ae0:	4699      	mov	r9, r3
 8001ae2:	0423      	lsls	r3, r4, #16
 8001ae4:	0c1f      	lsrs	r7, r3, #16
 8001ae6:	0212      	lsls	r2, r2, #8
 8001ae8:	4649      	mov	r1, r9
 8001aea:	9200      	str	r2, [sp, #0]
 8001aec:	9701      	str	r7, [sp, #4]
 8001aee:	f7fe fbb5 	bl	800025c <__aeabi_uidivmod>
 8001af2:	0002      	movs	r2, r0
 8001af4:	437a      	muls	r2, r7
 8001af6:	040b      	lsls	r3, r1, #16
 8001af8:	0c31      	lsrs	r1, r6, #16
 8001afa:	4680      	mov	r8, r0
 8001afc:	4319      	orrs	r1, r3
 8001afe:	428a      	cmp	r2, r1
 8001b00:	d907      	bls.n	8001b12 <__aeabi_ddiv+0x12e>
 8001b02:	2301      	movs	r3, #1
 8001b04:	425b      	negs	r3, r3
 8001b06:	469c      	mov	ip, r3
 8001b08:	1909      	adds	r1, r1, r4
 8001b0a:	44e0      	add	r8, ip
 8001b0c:	428c      	cmp	r4, r1
 8001b0e:	d800      	bhi.n	8001b12 <__aeabi_ddiv+0x12e>
 8001b10:	e207      	b.n	8001f22 <__aeabi_ddiv+0x53e>
 8001b12:	1a88      	subs	r0, r1, r2
 8001b14:	4649      	mov	r1, r9
 8001b16:	f7fe fba1 	bl	800025c <__aeabi_uidivmod>
 8001b1a:	0409      	lsls	r1, r1, #16
 8001b1c:	468c      	mov	ip, r1
 8001b1e:	0431      	lsls	r1, r6, #16
 8001b20:	4666      	mov	r6, ip
 8001b22:	9a01      	ldr	r2, [sp, #4]
 8001b24:	0c09      	lsrs	r1, r1, #16
 8001b26:	4342      	muls	r2, r0
 8001b28:	0003      	movs	r3, r0
 8001b2a:	4331      	orrs	r1, r6
 8001b2c:	428a      	cmp	r2, r1
 8001b2e:	d904      	bls.n	8001b3a <__aeabi_ddiv+0x156>
 8001b30:	1909      	adds	r1, r1, r4
 8001b32:	3b01      	subs	r3, #1
 8001b34:	428c      	cmp	r4, r1
 8001b36:	d800      	bhi.n	8001b3a <__aeabi_ddiv+0x156>
 8001b38:	e1ed      	b.n	8001f16 <__aeabi_ddiv+0x532>
 8001b3a:	1a88      	subs	r0, r1, r2
 8001b3c:	4642      	mov	r2, r8
 8001b3e:	0412      	lsls	r2, r2, #16
 8001b40:	431a      	orrs	r2, r3
 8001b42:	4690      	mov	r8, r2
 8001b44:	4641      	mov	r1, r8
 8001b46:	9b00      	ldr	r3, [sp, #0]
 8001b48:	040e      	lsls	r6, r1, #16
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	001f      	movs	r7, r3
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	9b00      	ldr	r3, [sp, #0]
 8001b52:	0c36      	lsrs	r6, r6, #16
 8001b54:	041b      	lsls	r3, r3, #16
 8001b56:	0c19      	lsrs	r1, r3, #16
 8001b58:	000b      	movs	r3, r1
 8001b5a:	4373      	muls	r3, r6
 8001b5c:	0c12      	lsrs	r2, r2, #16
 8001b5e:	437e      	muls	r6, r7
 8001b60:	9103      	str	r1, [sp, #12]
 8001b62:	4351      	muls	r1, r2
 8001b64:	437a      	muls	r2, r7
 8001b66:	0c1f      	lsrs	r7, r3, #16
 8001b68:	46bc      	mov	ip, r7
 8001b6a:	1876      	adds	r6, r6, r1
 8001b6c:	4466      	add	r6, ip
 8001b6e:	42b1      	cmp	r1, r6
 8001b70:	d903      	bls.n	8001b7a <__aeabi_ddiv+0x196>
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	0249      	lsls	r1, r1, #9
 8001b76:	468c      	mov	ip, r1
 8001b78:	4462      	add	r2, ip
 8001b7a:	0c31      	lsrs	r1, r6, #16
 8001b7c:	188a      	adds	r2, r1, r2
 8001b7e:	0431      	lsls	r1, r6, #16
 8001b80:	041e      	lsls	r6, r3, #16
 8001b82:	0c36      	lsrs	r6, r6, #16
 8001b84:	198e      	adds	r6, r1, r6
 8001b86:	4290      	cmp	r0, r2
 8001b88:	d302      	bcc.n	8001b90 <__aeabi_ddiv+0x1ac>
 8001b8a:	d112      	bne.n	8001bb2 <__aeabi_ddiv+0x1ce>
 8001b8c:	42b5      	cmp	r5, r6
 8001b8e:	d210      	bcs.n	8001bb2 <__aeabi_ddiv+0x1ce>
 8001b90:	4643      	mov	r3, r8
 8001b92:	1e59      	subs	r1, r3, #1
 8001b94:	9b00      	ldr	r3, [sp, #0]
 8001b96:	469c      	mov	ip, r3
 8001b98:	4465      	add	r5, ip
 8001b9a:	001f      	movs	r7, r3
 8001b9c:	429d      	cmp	r5, r3
 8001b9e:	419b      	sbcs	r3, r3
 8001ba0:	425b      	negs	r3, r3
 8001ba2:	191b      	adds	r3, r3, r4
 8001ba4:	18c0      	adds	r0, r0, r3
 8001ba6:	4284      	cmp	r4, r0
 8001ba8:	d200      	bcs.n	8001bac <__aeabi_ddiv+0x1c8>
 8001baa:	e1a0      	b.n	8001eee <__aeabi_ddiv+0x50a>
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_ddiv+0x1cc>
 8001bae:	e19b      	b.n	8001ee8 <__aeabi_ddiv+0x504>
 8001bb0:	4688      	mov	r8, r1
 8001bb2:	1bae      	subs	r6, r5, r6
 8001bb4:	42b5      	cmp	r5, r6
 8001bb6:	41ad      	sbcs	r5, r5
 8001bb8:	1a80      	subs	r0, r0, r2
 8001bba:	426d      	negs	r5, r5
 8001bbc:	1b40      	subs	r0, r0, r5
 8001bbe:	4284      	cmp	r4, r0
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_ddiv+0x1e0>
 8001bc2:	e1d5      	b.n	8001f70 <__aeabi_ddiv+0x58c>
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	f7fe fb49 	bl	800025c <__aeabi_uidivmod>
 8001bca:	9a01      	ldr	r2, [sp, #4]
 8001bcc:	040b      	lsls	r3, r1, #16
 8001bce:	4342      	muls	r2, r0
 8001bd0:	0c31      	lsrs	r1, r6, #16
 8001bd2:	0005      	movs	r5, r0
 8001bd4:	4319      	orrs	r1, r3
 8001bd6:	428a      	cmp	r2, r1
 8001bd8:	d900      	bls.n	8001bdc <__aeabi_ddiv+0x1f8>
 8001bda:	e16c      	b.n	8001eb6 <__aeabi_ddiv+0x4d2>
 8001bdc:	1a88      	subs	r0, r1, r2
 8001bde:	4649      	mov	r1, r9
 8001be0:	f7fe fb3c 	bl	800025c <__aeabi_uidivmod>
 8001be4:	9a01      	ldr	r2, [sp, #4]
 8001be6:	0436      	lsls	r6, r6, #16
 8001be8:	4342      	muls	r2, r0
 8001bea:	0409      	lsls	r1, r1, #16
 8001bec:	0c36      	lsrs	r6, r6, #16
 8001bee:	0003      	movs	r3, r0
 8001bf0:	430e      	orrs	r6, r1
 8001bf2:	42b2      	cmp	r2, r6
 8001bf4:	d900      	bls.n	8001bf8 <__aeabi_ddiv+0x214>
 8001bf6:	e153      	b.n	8001ea0 <__aeabi_ddiv+0x4bc>
 8001bf8:	9803      	ldr	r0, [sp, #12]
 8001bfa:	1ab6      	subs	r6, r6, r2
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	042d      	lsls	r5, r5, #16
 8001c00:	431d      	orrs	r5, r3
 8001c02:	9f02      	ldr	r7, [sp, #8]
 8001c04:	042b      	lsls	r3, r5, #16
 8001c06:	0c1b      	lsrs	r3, r3, #16
 8001c08:	435a      	muls	r2, r3
 8001c0a:	437b      	muls	r3, r7
 8001c0c:	469c      	mov	ip, r3
 8001c0e:	0c29      	lsrs	r1, r5, #16
 8001c10:	4348      	muls	r0, r1
 8001c12:	0c13      	lsrs	r3, r2, #16
 8001c14:	4484      	add	ip, r0
 8001c16:	4463      	add	r3, ip
 8001c18:	4379      	muls	r1, r7
 8001c1a:	4298      	cmp	r0, r3
 8001c1c:	d903      	bls.n	8001c26 <__aeabi_ddiv+0x242>
 8001c1e:	2080      	movs	r0, #128	; 0x80
 8001c20:	0240      	lsls	r0, r0, #9
 8001c22:	4684      	mov	ip, r0
 8001c24:	4461      	add	r1, ip
 8001c26:	0c18      	lsrs	r0, r3, #16
 8001c28:	0412      	lsls	r2, r2, #16
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	0c12      	lsrs	r2, r2, #16
 8001c2e:	1841      	adds	r1, r0, r1
 8001c30:	189b      	adds	r3, r3, r2
 8001c32:	428e      	cmp	r6, r1
 8001c34:	d200      	bcs.n	8001c38 <__aeabi_ddiv+0x254>
 8001c36:	e0ff      	b.n	8001e38 <__aeabi_ddiv+0x454>
 8001c38:	d100      	bne.n	8001c3c <__aeabi_ddiv+0x258>
 8001c3a:	e0fa      	b.n	8001e32 <__aeabi_ddiv+0x44e>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	4a49      	ldr	r2, [pc, #292]	; (8001d68 <__aeabi_ddiv+0x384>)
 8001c42:	445a      	add	r2, fp
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	dc00      	bgt.n	8001c4a <__aeabi_ddiv+0x266>
 8001c48:	e0aa      	b.n	8001da0 <__aeabi_ddiv+0x3bc>
 8001c4a:	076b      	lsls	r3, r5, #29
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_ddiv+0x26c>
 8001c4e:	e13d      	b.n	8001ecc <__aeabi_ddiv+0x4e8>
 8001c50:	08ed      	lsrs	r5, r5, #3
 8001c52:	4643      	mov	r3, r8
 8001c54:	01db      	lsls	r3, r3, #7
 8001c56:	d506      	bpl.n	8001c66 <__aeabi_ddiv+0x282>
 8001c58:	4642      	mov	r2, r8
 8001c5a:	4b44      	ldr	r3, [pc, #272]	; (8001d6c <__aeabi_ddiv+0x388>)
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	4690      	mov	r8, r2
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	00d2      	lsls	r2, r2, #3
 8001c64:	445a      	add	r2, fp
 8001c66:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <__aeabi_ddiv+0x38c>)
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_ddiv+0x28a>
 8001c6c:	e71f      	b.n	8001aae <__aeabi_ddiv+0xca>
 8001c6e:	4643      	mov	r3, r8
 8001c70:	075b      	lsls	r3, r3, #29
 8001c72:	431d      	orrs	r5, r3
 8001c74:	4643      	mov	r3, r8
 8001c76:	0552      	lsls	r2, r2, #21
 8001c78:	025c      	lsls	r4, r3, #9
 8001c7a:	0b24      	lsrs	r4, r4, #12
 8001c7c:	0d53      	lsrs	r3, r2, #21
 8001c7e:	e708      	b.n	8001a92 <__aeabi_ddiv+0xae>
 8001c80:	4652      	mov	r2, sl
 8001c82:	4322      	orrs	r2, r4
 8001c84:	d100      	bne.n	8001c88 <__aeabi_ddiv+0x2a4>
 8001c86:	e07b      	b.n	8001d80 <__aeabi_ddiv+0x39c>
 8001c88:	2c00      	cmp	r4, #0
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_ddiv+0x2aa>
 8001c8c:	e0fa      	b.n	8001e84 <__aeabi_ddiv+0x4a0>
 8001c8e:	0020      	movs	r0, r4
 8001c90:	f001 fa22 	bl	80030d8 <__clzsi2>
 8001c94:	0002      	movs	r2, r0
 8001c96:	3a0b      	subs	r2, #11
 8001c98:	231d      	movs	r3, #29
 8001c9a:	0001      	movs	r1, r0
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	4652      	mov	r2, sl
 8001ca0:	3908      	subs	r1, #8
 8001ca2:	40da      	lsrs	r2, r3
 8001ca4:	408c      	lsls	r4, r1
 8001ca6:	4314      	orrs	r4, r2
 8001ca8:	4652      	mov	r2, sl
 8001caa:	408a      	lsls	r2, r1
 8001cac:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <__aeabi_ddiv+0x390>)
 8001cae:	4458      	add	r0, fp
 8001cb0:	469b      	mov	fp, r3
 8001cb2:	4483      	add	fp, r0
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	e6d5      	b.n	8001a64 <__aeabi_ddiv+0x80>
 8001cb8:	464b      	mov	r3, r9
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	4698      	mov	r8, r3
 8001cbe:	d044      	beq.n	8001d4a <__aeabi_ddiv+0x366>
 8001cc0:	2c00      	cmp	r4, #0
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_ddiv+0x2e2>
 8001cc4:	e0ce      	b.n	8001e64 <__aeabi_ddiv+0x480>
 8001cc6:	0020      	movs	r0, r4
 8001cc8:	f001 fa06 	bl	80030d8 <__clzsi2>
 8001ccc:	0001      	movs	r1, r0
 8001cce:	0002      	movs	r2, r0
 8001cd0:	390b      	subs	r1, #11
 8001cd2:	231d      	movs	r3, #29
 8001cd4:	1a5b      	subs	r3, r3, r1
 8001cd6:	4649      	mov	r1, r9
 8001cd8:	0010      	movs	r0, r2
 8001cda:	40d9      	lsrs	r1, r3
 8001cdc:	3808      	subs	r0, #8
 8001cde:	4084      	lsls	r4, r0
 8001ce0:	000b      	movs	r3, r1
 8001ce2:	464d      	mov	r5, r9
 8001ce4:	4323      	orrs	r3, r4
 8001ce6:	4698      	mov	r8, r3
 8001ce8:	4085      	lsls	r5, r0
 8001cea:	4823      	ldr	r0, [pc, #140]	; (8001d78 <__aeabi_ddiv+0x394>)
 8001cec:	1a83      	subs	r3, r0, r2
 8001cee:	469b      	mov	fp, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	e69a      	b.n	8001a2e <__aeabi_ddiv+0x4a>
 8001cf8:	464b      	mov	r3, r9
 8001cfa:	4323      	orrs	r3, r4
 8001cfc:	4698      	mov	r8, r3
 8001cfe:	d11d      	bne.n	8001d3c <__aeabi_ddiv+0x358>
 8001d00:	2308      	movs	r3, #8
 8001d02:	4699      	mov	r9, r3
 8001d04:	3b06      	subs	r3, #6
 8001d06:	2500      	movs	r5, #0
 8001d08:	4683      	mov	fp, r0
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	e68f      	b.n	8001a2e <__aeabi_ddiv+0x4a>
 8001d0e:	4652      	mov	r2, sl
 8001d10:	4322      	orrs	r2, r4
 8001d12:	d109      	bne.n	8001d28 <__aeabi_ddiv+0x344>
 8001d14:	2302      	movs	r3, #2
 8001d16:	4649      	mov	r1, r9
 8001d18:	4319      	orrs	r1, r3
 8001d1a:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <__aeabi_ddiv+0x398>)
 8001d1c:	4689      	mov	r9, r1
 8001d1e:	469c      	mov	ip, r3
 8001d20:	2400      	movs	r4, #0
 8001d22:	2002      	movs	r0, #2
 8001d24:	44e3      	add	fp, ip
 8001d26:	e69d      	b.n	8001a64 <__aeabi_ddiv+0x80>
 8001d28:	2303      	movs	r3, #3
 8001d2a:	464a      	mov	r2, r9
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <__aeabi_ddiv+0x398>)
 8001d30:	4691      	mov	r9, r2
 8001d32:	469c      	mov	ip, r3
 8001d34:	4652      	mov	r2, sl
 8001d36:	2003      	movs	r0, #3
 8001d38:	44e3      	add	fp, ip
 8001d3a:	e693      	b.n	8001a64 <__aeabi_ddiv+0x80>
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	4699      	mov	r9, r3
 8001d40:	3b09      	subs	r3, #9
 8001d42:	46a0      	mov	r8, r4
 8001d44:	4683      	mov	fp, r0
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	e671      	b.n	8001a2e <__aeabi_ddiv+0x4a>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	2300      	movs	r3, #0
 8001d50:	469b      	mov	fp, r3
 8001d52:	3301      	adds	r3, #1
 8001d54:	2500      	movs	r5, #0
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	e669      	b.n	8001a2e <__aeabi_ddiv+0x4a>
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	000007ff 	.word	0x000007ff
 8001d60:	fffffc01 	.word	0xfffffc01
 8001d64:	0800d278 	.word	0x0800d278
 8001d68:	000003ff 	.word	0x000003ff
 8001d6c:	feffffff 	.word	0xfeffffff
 8001d70:	000007fe 	.word	0x000007fe
 8001d74:	000003f3 	.word	0x000003f3
 8001d78:	fffffc0d 	.word	0xfffffc0d
 8001d7c:	fffff801 	.word	0xfffff801
 8001d80:	4649      	mov	r1, r9
 8001d82:	2301      	movs	r3, #1
 8001d84:	4319      	orrs	r1, r3
 8001d86:	4689      	mov	r9, r1
 8001d88:	2400      	movs	r4, #0
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	e66a      	b.n	8001a64 <__aeabi_ddiv+0x80>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2480      	movs	r4, #128	; 0x80
 8001d92:	469a      	mov	sl, r3
 8001d94:	2500      	movs	r5, #0
 8001d96:	4b8a      	ldr	r3, [pc, #552]	; (8001fc0 <__aeabi_ddiv+0x5dc>)
 8001d98:	0324      	lsls	r4, r4, #12
 8001d9a:	e67a      	b.n	8001a92 <__aeabi_ddiv+0xae>
 8001d9c:	2501      	movs	r5, #1
 8001d9e:	426d      	negs	r5, r5
 8001da0:	2301      	movs	r3, #1
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	2b38      	cmp	r3, #56	; 0x38
 8001da6:	dd00      	ble.n	8001daa <__aeabi_ddiv+0x3c6>
 8001da8:	e670      	b.n	8001a8c <__aeabi_ddiv+0xa8>
 8001daa:	2b1f      	cmp	r3, #31
 8001dac:	dc00      	bgt.n	8001db0 <__aeabi_ddiv+0x3cc>
 8001dae:	e0bf      	b.n	8001f30 <__aeabi_ddiv+0x54c>
 8001db0:	211f      	movs	r1, #31
 8001db2:	4249      	negs	r1, r1
 8001db4:	1a8a      	subs	r2, r1, r2
 8001db6:	4641      	mov	r1, r8
 8001db8:	40d1      	lsrs	r1, r2
 8001dba:	000a      	movs	r2, r1
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d004      	beq.n	8001dca <__aeabi_ddiv+0x3e6>
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	4b80      	ldr	r3, [pc, #512]	; (8001fc4 <__aeabi_ddiv+0x5e0>)
 8001dc4:	445b      	add	r3, fp
 8001dc6:	4099      	lsls	r1, r3
 8001dc8:	430d      	orrs	r5, r1
 8001dca:	1e6b      	subs	r3, r5, #1
 8001dcc:	419d      	sbcs	r5, r3
 8001dce:	2307      	movs	r3, #7
 8001dd0:	432a      	orrs	r2, r5
 8001dd2:	001d      	movs	r5, r3
 8001dd4:	2400      	movs	r4, #0
 8001dd6:	4015      	ands	r5, r2
 8001dd8:	4213      	tst	r3, r2
 8001dda:	d100      	bne.n	8001dde <__aeabi_ddiv+0x3fa>
 8001ddc:	e0d4      	b.n	8001f88 <__aeabi_ddiv+0x5a4>
 8001dde:	210f      	movs	r1, #15
 8001de0:	2300      	movs	r3, #0
 8001de2:	4011      	ands	r1, r2
 8001de4:	2904      	cmp	r1, #4
 8001de6:	d100      	bne.n	8001dea <__aeabi_ddiv+0x406>
 8001de8:	e0cb      	b.n	8001f82 <__aeabi_ddiv+0x59e>
 8001dea:	1d11      	adds	r1, r2, #4
 8001dec:	4291      	cmp	r1, r2
 8001dee:	4192      	sbcs	r2, r2
 8001df0:	4252      	negs	r2, r2
 8001df2:	189b      	adds	r3, r3, r2
 8001df4:	000a      	movs	r2, r1
 8001df6:	0219      	lsls	r1, r3, #8
 8001df8:	d400      	bmi.n	8001dfc <__aeabi_ddiv+0x418>
 8001dfa:	e0c2      	b.n	8001f82 <__aeabi_ddiv+0x59e>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	2400      	movs	r4, #0
 8001e00:	2500      	movs	r5, #0
 8001e02:	e646      	b.n	8001a92 <__aeabi_ddiv+0xae>
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	4641      	mov	r1, r8
 8001e08:	031b      	lsls	r3, r3, #12
 8001e0a:	4219      	tst	r1, r3
 8001e0c:	d008      	beq.n	8001e20 <__aeabi_ddiv+0x43c>
 8001e0e:	421c      	tst	r4, r3
 8001e10:	d106      	bne.n	8001e20 <__aeabi_ddiv+0x43c>
 8001e12:	431c      	orrs	r4, r3
 8001e14:	0324      	lsls	r4, r4, #12
 8001e16:	46ba      	mov	sl, r7
 8001e18:	0015      	movs	r5, r2
 8001e1a:	4b69      	ldr	r3, [pc, #420]	; (8001fc0 <__aeabi_ddiv+0x5dc>)
 8001e1c:	0b24      	lsrs	r4, r4, #12
 8001e1e:	e638      	b.n	8001a92 <__aeabi_ddiv+0xae>
 8001e20:	2480      	movs	r4, #128	; 0x80
 8001e22:	4643      	mov	r3, r8
 8001e24:	0324      	lsls	r4, r4, #12
 8001e26:	431c      	orrs	r4, r3
 8001e28:	0324      	lsls	r4, r4, #12
 8001e2a:	46b2      	mov	sl, r6
 8001e2c:	4b64      	ldr	r3, [pc, #400]	; (8001fc0 <__aeabi_ddiv+0x5dc>)
 8001e2e:	0b24      	lsrs	r4, r4, #12
 8001e30:	e62f      	b.n	8001a92 <__aeabi_ddiv+0xae>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d100      	bne.n	8001e38 <__aeabi_ddiv+0x454>
 8001e36:	e703      	b.n	8001c40 <__aeabi_ddiv+0x25c>
 8001e38:	19a6      	adds	r6, r4, r6
 8001e3a:	1e68      	subs	r0, r5, #1
 8001e3c:	42a6      	cmp	r6, r4
 8001e3e:	d200      	bcs.n	8001e42 <__aeabi_ddiv+0x45e>
 8001e40:	e08d      	b.n	8001f5e <__aeabi_ddiv+0x57a>
 8001e42:	428e      	cmp	r6, r1
 8001e44:	d200      	bcs.n	8001e48 <__aeabi_ddiv+0x464>
 8001e46:	e0a3      	b.n	8001f90 <__aeabi_ddiv+0x5ac>
 8001e48:	d100      	bne.n	8001e4c <__aeabi_ddiv+0x468>
 8001e4a:	e0b3      	b.n	8001fb4 <__aeabi_ddiv+0x5d0>
 8001e4c:	0005      	movs	r5, r0
 8001e4e:	e6f5      	b.n	8001c3c <__aeabi_ddiv+0x258>
 8001e50:	42aa      	cmp	r2, r5
 8001e52:	d900      	bls.n	8001e56 <__aeabi_ddiv+0x472>
 8001e54:	e639      	b.n	8001aca <__aeabi_ddiv+0xe6>
 8001e56:	4643      	mov	r3, r8
 8001e58:	07de      	lsls	r6, r3, #31
 8001e5a:	0858      	lsrs	r0, r3, #1
 8001e5c:	086b      	lsrs	r3, r5, #1
 8001e5e:	431e      	orrs	r6, r3
 8001e60:	07ed      	lsls	r5, r5, #31
 8001e62:	e639      	b.n	8001ad8 <__aeabi_ddiv+0xf4>
 8001e64:	4648      	mov	r0, r9
 8001e66:	f001 f937 	bl	80030d8 <__clzsi2>
 8001e6a:	0001      	movs	r1, r0
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	3115      	adds	r1, #21
 8001e70:	3220      	adds	r2, #32
 8001e72:	291c      	cmp	r1, #28
 8001e74:	dc00      	bgt.n	8001e78 <__aeabi_ddiv+0x494>
 8001e76:	e72c      	b.n	8001cd2 <__aeabi_ddiv+0x2ee>
 8001e78:	464b      	mov	r3, r9
 8001e7a:	3808      	subs	r0, #8
 8001e7c:	4083      	lsls	r3, r0
 8001e7e:	2500      	movs	r5, #0
 8001e80:	4698      	mov	r8, r3
 8001e82:	e732      	b.n	8001cea <__aeabi_ddiv+0x306>
 8001e84:	f001 f928 	bl	80030d8 <__clzsi2>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	001a      	movs	r2, r3
 8001e8c:	3215      	adds	r2, #21
 8001e8e:	3020      	adds	r0, #32
 8001e90:	2a1c      	cmp	r2, #28
 8001e92:	dc00      	bgt.n	8001e96 <__aeabi_ddiv+0x4b2>
 8001e94:	e700      	b.n	8001c98 <__aeabi_ddiv+0x2b4>
 8001e96:	4654      	mov	r4, sl
 8001e98:	3b08      	subs	r3, #8
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	409c      	lsls	r4, r3
 8001e9e:	e705      	b.n	8001cac <__aeabi_ddiv+0x2c8>
 8001ea0:	1936      	adds	r6, r6, r4
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	42b4      	cmp	r4, r6
 8001ea6:	d900      	bls.n	8001eaa <__aeabi_ddiv+0x4c6>
 8001ea8:	e6a6      	b.n	8001bf8 <__aeabi_ddiv+0x214>
 8001eaa:	42b2      	cmp	r2, r6
 8001eac:	d800      	bhi.n	8001eb0 <__aeabi_ddiv+0x4cc>
 8001eae:	e6a3      	b.n	8001bf8 <__aeabi_ddiv+0x214>
 8001eb0:	1e83      	subs	r3, r0, #2
 8001eb2:	1936      	adds	r6, r6, r4
 8001eb4:	e6a0      	b.n	8001bf8 <__aeabi_ddiv+0x214>
 8001eb6:	1909      	adds	r1, r1, r4
 8001eb8:	3d01      	subs	r5, #1
 8001eba:	428c      	cmp	r4, r1
 8001ebc:	d900      	bls.n	8001ec0 <__aeabi_ddiv+0x4dc>
 8001ebe:	e68d      	b.n	8001bdc <__aeabi_ddiv+0x1f8>
 8001ec0:	428a      	cmp	r2, r1
 8001ec2:	d800      	bhi.n	8001ec6 <__aeabi_ddiv+0x4e2>
 8001ec4:	e68a      	b.n	8001bdc <__aeabi_ddiv+0x1f8>
 8001ec6:	1e85      	subs	r5, r0, #2
 8001ec8:	1909      	adds	r1, r1, r4
 8001eca:	e687      	b.n	8001bdc <__aeabi_ddiv+0x1f8>
 8001ecc:	230f      	movs	r3, #15
 8001ece:	402b      	ands	r3, r5
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d100      	bne.n	8001ed6 <__aeabi_ddiv+0x4f2>
 8001ed4:	e6bc      	b.n	8001c50 <__aeabi_ddiv+0x26c>
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	425b      	negs	r3, r3
 8001eda:	42ab      	cmp	r3, r5
 8001edc:	419b      	sbcs	r3, r3
 8001ede:	3504      	adds	r5, #4
 8001ee0:	425b      	negs	r3, r3
 8001ee2:	08ed      	lsrs	r5, r5, #3
 8001ee4:	4498      	add	r8, r3
 8001ee6:	e6b4      	b.n	8001c52 <__aeabi_ddiv+0x26e>
 8001ee8:	42af      	cmp	r7, r5
 8001eea:	d900      	bls.n	8001eee <__aeabi_ddiv+0x50a>
 8001eec:	e660      	b.n	8001bb0 <__aeabi_ddiv+0x1cc>
 8001eee:	4282      	cmp	r2, r0
 8001ef0:	d804      	bhi.n	8001efc <__aeabi_ddiv+0x518>
 8001ef2:	d000      	beq.n	8001ef6 <__aeabi_ddiv+0x512>
 8001ef4:	e65c      	b.n	8001bb0 <__aeabi_ddiv+0x1cc>
 8001ef6:	42ae      	cmp	r6, r5
 8001ef8:	d800      	bhi.n	8001efc <__aeabi_ddiv+0x518>
 8001efa:	e659      	b.n	8001bb0 <__aeabi_ddiv+0x1cc>
 8001efc:	2302      	movs	r3, #2
 8001efe:	425b      	negs	r3, r3
 8001f00:	469c      	mov	ip, r3
 8001f02:	9b00      	ldr	r3, [sp, #0]
 8001f04:	44e0      	add	r8, ip
 8001f06:	469c      	mov	ip, r3
 8001f08:	4465      	add	r5, ip
 8001f0a:	429d      	cmp	r5, r3
 8001f0c:	419b      	sbcs	r3, r3
 8001f0e:	425b      	negs	r3, r3
 8001f10:	191b      	adds	r3, r3, r4
 8001f12:	18c0      	adds	r0, r0, r3
 8001f14:	e64d      	b.n	8001bb2 <__aeabi_ddiv+0x1ce>
 8001f16:	428a      	cmp	r2, r1
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x538>
 8001f1a:	e60e      	b.n	8001b3a <__aeabi_ddiv+0x156>
 8001f1c:	1e83      	subs	r3, r0, #2
 8001f1e:	1909      	adds	r1, r1, r4
 8001f20:	e60b      	b.n	8001b3a <__aeabi_ddiv+0x156>
 8001f22:	428a      	cmp	r2, r1
 8001f24:	d800      	bhi.n	8001f28 <__aeabi_ddiv+0x544>
 8001f26:	e5f4      	b.n	8001b12 <__aeabi_ddiv+0x12e>
 8001f28:	1e83      	subs	r3, r0, #2
 8001f2a:	4698      	mov	r8, r3
 8001f2c:	1909      	adds	r1, r1, r4
 8001f2e:	e5f0      	b.n	8001b12 <__aeabi_ddiv+0x12e>
 8001f30:	4925      	ldr	r1, [pc, #148]	; (8001fc8 <__aeabi_ddiv+0x5e4>)
 8001f32:	0028      	movs	r0, r5
 8001f34:	4459      	add	r1, fp
 8001f36:	408d      	lsls	r5, r1
 8001f38:	4642      	mov	r2, r8
 8001f3a:	408a      	lsls	r2, r1
 8001f3c:	1e69      	subs	r1, r5, #1
 8001f3e:	418d      	sbcs	r5, r1
 8001f40:	4641      	mov	r1, r8
 8001f42:	40d8      	lsrs	r0, r3
 8001f44:	40d9      	lsrs	r1, r3
 8001f46:	4302      	orrs	r2, r0
 8001f48:	432a      	orrs	r2, r5
 8001f4a:	000b      	movs	r3, r1
 8001f4c:	0751      	lsls	r1, r2, #29
 8001f4e:	d100      	bne.n	8001f52 <__aeabi_ddiv+0x56e>
 8001f50:	e751      	b.n	8001df6 <__aeabi_ddiv+0x412>
 8001f52:	210f      	movs	r1, #15
 8001f54:	4011      	ands	r1, r2
 8001f56:	2904      	cmp	r1, #4
 8001f58:	d000      	beq.n	8001f5c <__aeabi_ddiv+0x578>
 8001f5a:	e746      	b.n	8001dea <__aeabi_ddiv+0x406>
 8001f5c:	e74b      	b.n	8001df6 <__aeabi_ddiv+0x412>
 8001f5e:	0005      	movs	r5, r0
 8001f60:	428e      	cmp	r6, r1
 8001f62:	d000      	beq.n	8001f66 <__aeabi_ddiv+0x582>
 8001f64:	e66a      	b.n	8001c3c <__aeabi_ddiv+0x258>
 8001f66:	9a00      	ldr	r2, [sp, #0]
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d000      	beq.n	8001f6e <__aeabi_ddiv+0x58a>
 8001f6c:	e666      	b.n	8001c3c <__aeabi_ddiv+0x258>
 8001f6e:	e667      	b.n	8001c40 <__aeabi_ddiv+0x25c>
 8001f70:	4a16      	ldr	r2, [pc, #88]	; (8001fcc <__aeabi_ddiv+0x5e8>)
 8001f72:	445a      	add	r2, fp
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	dc00      	bgt.n	8001f7a <__aeabi_ddiv+0x596>
 8001f78:	e710      	b.n	8001d9c <__aeabi_ddiv+0x3b8>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	2500      	movs	r5, #0
 8001f7e:	4498      	add	r8, r3
 8001f80:	e667      	b.n	8001c52 <__aeabi_ddiv+0x26e>
 8001f82:	075d      	lsls	r5, r3, #29
 8001f84:	025b      	lsls	r3, r3, #9
 8001f86:	0b1c      	lsrs	r4, r3, #12
 8001f88:	08d2      	lsrs	r2, r2, #3
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	4315      	orrs	r5, r2
 8001f8e:	e580      	b.n	8001a92 <__aeabi_ddiv+0xae>
 8001f90:	9800      	ldr	r0, [sp, #0]
 8001f92:	3d02      	subs	r5, #2
 8001f94:	0042      	lsls	r2, r0, #1
 8001f96:	4282      	cmp	r2, r0
 8001f98:	41bf      	sbcs	r7, r7
 8001f9a:	427f      	negs	r7, r7
 8001f9c:	193c      	adds	r4, r7, r4
 8001f9e:	1936      	adds	r6, r6, r4
 8001fa0:	9200      	str	r2, [sp, #0]
 8001fa2:	e7dd      	b.n	8001f60 <__aeabi_ddiv+0x57c>
 8001fa4:	2480      	movs	r4, #128	; 0x80
 8001fa6:	4643      	mov	r3, r8
 8001fa8:	0324      	lsls	r4, r4, #12
 8001faa:	431c      	orrs	r4, r3
 8001fac:	0324      	lsls	r4, r4, #12
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__aeabi_ddiv+0x5dc>)
 8001fb0:	0b24      	lsrs	r4, r4, #12
 8001fb2:	e56e      	b.n	8001a92 <__aeabi_ddiv+0xae>
 8001fb4:	9a00      	ldr	r2, [sp, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d3ea      	bcc.n	8001f90 <__aeabi_ddiv+0x5ac>
 8001fba:	0005      	movs	r5, r0
 8001fbc:	e7d3      	b.n	8001f66 <__aeabi_ddiv+0x582>
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	000007ff 	.word	0x000007ff
 8001fc4:	0000043e 	.word	0x0000043e
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	000003ff 	.word	0x000003ff

08001fd0 <__eqdf2>:
 8001fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd2:	464e      	mov	r6, r9
 8001fd4:	4645      	mov	r5, r8
 8001fd6:	46de      	mov	lr, fp
 8001fd8:	4657      	mov	r7, sl
 8001fda:	4690      	mov	r8, r2
 8001fdc:	b5e0      	push	{r5, r6, r7, lr}
 8001fde:	0017      	movs	r7, r2
 8001fe0:	031a      	lsls	r2, r3, #12
 8001fe2:	0b12      	lsrs	r2, r2, #12
 8001fe4:	0005      	movs	r5, r0
 8001fe6:	4684      	mov	ip, r0
 8001fe8:	4819      	ldr	r0, [pc, #100]	; (8002050 <__eqdf2+0x80>)
 8001fea:	030e      	lsls	r6, r1, #12
 8001fec:	004c      	lsls	r4, r1, #1
 8001fee:	4691      	mov	r9, r2
 8001ff0:	005a      	lsls	r2, r3, #1
 8001ff2:	0fdb      	lsrs	r3, r3, #31
 8001ff4:	469b      	mov	fp, r3
 8001ff6:	0b36      	lsrs	r6, r6, #12
 8001ff8:	0d64      	lsrs	r4, r4, #21
 8001ffa:	0fc9      	lsrs	r1, r1, #31
 8001ffc:	0d52      	lsrs	r2, r2, #21
 8001ffe:	4284      	cmp	r4, r0
 8002000:	d019      	beq.n	8002036 <__eqdf2+0x66>
 8002002:	4282      	cmp	r2, r0
 8002004:	d010      	beq.n	8002028 <__eqdf2+0x58>
 8002006:	2001      	movs	r0, #1
 8002008:	4294      	cmp	r4, r2
 800200a:	d10e      	bne.n	800202a <__eqdf2+0x5a>
 800200c:	454e      	cmp	r6, r9
 800200e:	d10c      	bne.n	800202a <__eqdf2+0x5a>
 8002010:	2001      	movs	r0, #1
 8002012:	45c4      	cmp	ip, r8
 8002014:	d109      	bne.n	800202a <__eqdf2+0x5a>
 8002016:	4559      	cmp	r1, fp
 8002018:	d017      	beq.n	800204a <__eqdf2+0x7a>
 800201a:	2c00      	cmp	r4, #0
 800201c:	d105      	bne.n	800202a <__eqdf2+0x5a>
 800201e:	0030      	movs	r0, r6
 8002020:	4328      	orrs	r0, r5
 8002022:	1e43      	subs	r3, r0, #1
 8002024:	4198      	sbcs	r0, r3
 8002026:	e000      	b.n	800202a <__eqdf2+0x5a>
 8002028:	2001      	movs	r0, #1
 800202a:	bcf0      	pop	{r4, r5, r6, r7}
 800202c:	46bb      	mov	fp, r7
 800202e:	46b2      	mov	sl, r6
 8002030:	46a9      	mov	r9, r5
 8002032:	46a0      	mov	r8, r4
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002036:	0033      	movs	r3, r6
 8002038:	2001      	movs	r0, #1
 800203a:	432b      	orrs	r3, r5
 800203c:	d1f5      	bne.n	800202a <__eqdf2+0x5a>
 800203e:	42a2      	cmp	r2, r4
 8002040:	d1f3      	bne.n	800202a <__eqdf2+0x5a>
 8002042:	464b      	mov	r3, r9
 8002044:	433b      	orrs	r3, r7
 8002046:	d1f0      	bne.n	800202a <__eqdf2+0x5a>
 8002048:	e7e2      	b.n	8002010 <__eqdf2+0x40>
 800204a:	2000      	movs	r0, #0
 800204c:	e7ed      	b.n	800202a <__eqdf2+0x5a>
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	000007ff 	.word	0x000007ff

08002054 <__gedf2>:
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	4647      	mov	r7, r8
 8002058:	46ce      	mov	lr, r9
 800205a:	0004      	movs	r4, r0
 800205c:	0018      	movs	r0, r3
 800205e:	0016      	movs	r6, r2
 8002060:	031b      	lsls	r3, r3, #12
 8002062:	0b1b      	lsrs	r3, r3, #12
 8002064:	4d2d      	ldr	r5, [pc, #180]	; (800211c <__gedf2+0xc8>)
 8002066:	004a      	lsls	r2, r1, #1
 8002068:	4699      	mov	r9, r3
 800206a:	b580      	push	{r7, lr}
 800206c:	0043      	lsls	r3, r0, #1
 800206e:	030f      	lsls	r7, r1, #12
 8002070:	46a4      	mov	ip, r4
 8002072:	46b0      	mov	r8, r6
 8002074:	0b3f      	lsrs	r7, r7, #12
 8002076:	0d52      	lsrs	r2, r2, #21
 8002078:	0fc9      	lsrs	r1, r1, #31
 800207a:	0d5b      	lsrs	r3, r3, #21
 800207c:	0fc0      	lsrs	r0, r0, #31
 800207e:	42aa      	cmp	r2, r5
 8002080:	d021      	beq.n	80020c6 <__gedf2+0x72>
 8002082:	42ab      	cmp	r3, r5
 8002084:	d013      	beq.n	80020ae <__gedf2+0x5a>
 8002086:	2a00      	cmp	r2, #0
 8002088:	d122      	bne.n	80020d0 <__gedf2+0x7c>
 800208a:	433c      	orrs	r4, r7
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <__gedf2+0x42>
 8002090:	464d      	mov	r5, r9
 8002092:	432e      	orrs	r6, r5
 8002094:	d022      	beq.n	80020dc <__gedf2+0x88>
 8002096:	2c00      	cmp	r4, #0
 8002098:	d010      	beq.n	80020bc <__gedf2+0x68>
 800209a:	4281      	cmp	r1, r0
 800209c:	d022      	beq.n	80020e4 <__gedf2+0x90>
 800209e:	2002      	movs	r0, #2
 80020a0:	3901      	subs	r1, #1
 80020a2:	4008      	ands	r0, r1
 80020a4:	3801      	subs	r0, #1
 80020a6:	bcc0      	pop	{r6, r7}
 80020a8:	46b9      	mov	r9, r7
 80020aa:	46b0      	mov	r8, r6
 80020ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ae:	464d      	mov	r5, r9
 80020b0:	432e      	orrs	r6, r5
 80020b2:	d129      	bne.n	8002108 <__gedf2+0xb4>
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d1f0      	bne.n	800209a <__gedf2+0x46>
 80020b8:	433c      	orrs	r4, r7
 80020ba:	d1ee      	bne.n	800209a <__gedf2+0x46>
 80020bc:	2800      	cmp	r0, #0
 80020be:	d1f2      	bne.n	80020a6 <__gedf2+0x52>
 80020c0:	2001      	movs	r0, #1
 80020c2:	4240      	negs	r0, r0
 80020c4:	e7ef      	b.n	80020a6 <__gedf2+0x52>
 80020c6:	003d      	movs	r5, r7
 80020c8:	4325      	orrs	r5, r4
 80020ca:	d11d      	bne.n	8002108 <__gedf2+0xb4>
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d0ee      	beq.n	80020ae <__gedf2+0x5a>
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e2      	bne.n	800209a <__gedf2+0x46>
 80020d4:	464c      	mov	r4, r9
 80020d6:	4326      	orrs	r6, r4
 80020d8:	d1df      	bne.n	800209a <__gedf2+0x46>
 80020da:	e7e0      	b.n	800209e <__gedf2+0x4a>
 80020dc:	2000      	movs	r0, #0
 80020de:	2c00      	cmp	r4, #0
 80020e0:	d0e1      	beq.n	80020a6 <__gedf2+0x52>
 80020e2:	e7dc      	b.n	800209e <__gedf2+0x4a>
 80020e4:	429a      	cmp	r2, r3
 80020e6:	dc0a      	bgt.n	80020fe <__gedf2+0xaa>
 80020e8:	dbe8      	blt.n	80020bc <__gedf2+0x68>
 80020ea:	454f      	cmp	r7, r9
 80020ec:	d8d7      	bhi.n	800209e <__gedf2+0x4a>
 80020ee:	d00e      	beq.n	800210e <__gedf2+0xba>
 80020f0:	2000      	movs	r0, #0
 80020f2:	454f      	cmp	r7, r9
 80020f4:	d2d7      	bcs.n	80020a6 <__gedf2+0x52>
 80020f6:	2900      	cmp	r1, #0
 80020f8:	d0e2      	beq.n	80020c0 <__gedf2+0x6c>
 80020fa:	0008      	movs	r0, r1
 80020fc:	e7d3      	b.n	80020a6 <__gedf2+0x52>
 80020fe:	4243      	negs	r3, r0
 8002100:	4158      	adcs	r0, r3
 8002102:	0040      	lsls	r0, r0, #1
 8002104:	3801      	subs	r0, #1
 8002106:	e7ce      	b.n	80020a6 <__gedf2+0x52>
 8002108:	2002      	movs	r0, #2
 800210a:	4240      	negs	r0, r0
 800210c:	e7cb      	b.n	80020a6 <__gedf2+0x52>
 800210e:	45c4      	cmp	ip, r8
 8002110:	d8c5      	bhi.n	800209e <__gedf2+0x4a>
 8002112:	2000      	movs	r0, #0
 8002114:	45c4      	cmp	ip, r8
 8002116:	d2c6      	bcs.n	80020a6 <__gedf2+0x52>
 8002118:	e7ed      	b.n	80020f6 <__gedf2+0xa2>
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	000007ff 	.word	0x000007ff

08002120 <__ledf2>:
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	4647      	mov	r7, r8
 8002124:	46ce      	mov	lr, r9
 8002126:	0004      	movs	r4, r0
 8002128:	0018      	movs	r0, r3
 800212a:	0016      	movs	r6, r2
 800212c:	031b      	lsls	r3, r3, #12
 800212e:	0b1b      	lsrs	r3, r3, #12
 8002130:	4d2c      	ldr	r5, [pc, #176]	; (80021e4 <__ledf2+0xc4>)
 8002132:	004a      	lsls	r2, r1, #1
 8002134:	4699      	mov	r9, r3
 8002136:	b580      	push	{r7, lr}
 8002138:	0043      	lsls	r3, r0, #1
 800213a:	030f      	lsls	r7, r1, #12
 800213c:	46a4      	mov	ip, r4
 800213e:	46b0      	mov	r8, r6
 8002140:	0b3f      	lsrs	r7, r7, #12
 8002142:	0d52      	lsrs	r2, r2, #21
 8002144:	0fc9      	lsrs	r1, r1, #31
 8002146:	0d5b      	lsrs	r3, r3, #21
 8002148:	0fc0      	lsrs	r0, r0, #31
 800214a:	42aa      	cmp	r2, r5
 800214c:	d00d      	beq.n	800216a <__ledf2+0x4a>
 800214e:	42ab      	cmp	r3, r5
 8002150:	d010      	beq.n	8002174 <__ledf2+0x54>
 8002152:	2a00      	cmp	r2, #0
 8002154:	d127      	bne.n	80021a6 <__ledf2+0x86>
 8002156:	433c      	orrs	r4, r7
 8002158:	2b00      	cmp	r3, #0
 800215a:	d111      	bne.n	8002180 <__ledf2+0x60>
 800215c:	464d      	mov	r5, r9
 800215e:	432e      	orrs	r6, r5
 8002160:	d10e      	bne.n	8002180 <__ledf2+0x60>
 8002162:	2000      	movs	r0, #0
 8002164:	2c00      	cmp	r4, #0
 8002166:	d015      	beq.n	8002194 <__ledf2+0x74>
 8002168:	e00e      	b.n	8002188 <__ledf2+0x68>
 800216a:	003d      	movs	r5, r7
 800216c:	4325      	orrs	r5, r4
 800216e:	d110      	bne.n	8002192 <__ledf2+0x72>
 8002170:	4293      	cmp	r3, r2
 8002172:	d118      	bne.n	80021a6 <__ledf2+0x86>
 8002174:	464d      	mov	r5, r9
 8002176:	432e      	orrs	r6, r5
 8002178:	d10b      	bne.n	8002192 <__ledf2+0x72>
 800217a:	2a00      	cmp	r2, #0
 800217c:	d102      	bne.n	8002184 <__ledf2+0x64>
 800217e:	433c      	orrs	r4, r7
 8002180:	2c00      	cmp	r4, #0
 8002182:	d00b      	beq.n	800219c <__ledf2+0x7c>
 8002184:	4281      	cmp	r1, r0
 8002186:	d014      	beq.n	80021b2 <__ledf2+0x92>
 8002188:	2002      	movs	r0, #2
 800218a:	3901      	subs	r1, #1
 800218c:	4008      	ands	r0, r1
 800218e:	3801      	subs	r0, #1
 8002190:	e000      	b.n	8002194 <__ledf2+0x74>
 8002192:	2002      	movs	r0, #2
 8002194:	bcc0      	pop	{r6, r7}
 8002196:	46b9      	mov	r9, r7
 8002198:	46b0      	mov	r8, r6
 800219a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219c:	2800      	cmp	r0, #0
 800219e:	d1f9      	bne.n	8002194 <__ledf2+0x74>
 80021a0:	2001      	movs	r0, #1
 80021a2:	4240      	negs	r0, r0
 80021a4:	e7f6      	b.n	8002194 <__ledf2+0x74>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1ec      	bne.n	8002184 <__ledf2+0x64>
 80021aa:	464c      	mov	r4, r9
 80021ac:	4326      	orrs	r6, r4
 80021ae:	d1e9      	bne.n	8002184 <__ledf2+0x64>
 80021b0:	e7ea      	b.n	8002188 <__ledf2+0x68>
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dd04      	ble.n	80021c0 <__ledf2+0xa0>
 80021b6:	4243      	negs	r3, r0
 80021b8:	4158      	adcs	r0, r3
 80021ba:	0040      	lsls	r0, r0, #1
 80021bc:	3801      	subs	r0, #1
 80021be:	e7e9      	b.n	8002194 <__ledf2+0x74>
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dbeb      	blt.n	800219c <__ledf2+0x7c>
 80021c4:	454f      	cmp	r7, r9
 80021c6:	d8df      	bhi.n	8002188 <__ledf2+0x68>
 80021c8:	d006      	beq.n	80021d8 <__ledf2+0xb8>
 80021ca:	2000      	movs	r0, #0
 80021cc:	454f      	cmp	r7, r9
 80021ce:	d2e1      	bcs.n	8002194 <__ledf2+0x74>
 80021d0:	2900      	cmp	r1, #0
 80021d2:	d0e5      	beq.n	80021a0 <__ledf2+0x80>
 80021d4:	0008      	movs	r0, r1
 80021d6:	e7dd      	b.n	8002194 <__ledf2+0x74>
 80021d8:	45c4      	cmp	ip, r8
 80021da:	d8d5      	bhi.n	8002188 <__ledf2+0x68>
 80021dc:	2000      	movs	r0, #0
 80021de:	45c4      	cmp	ip, r8
 80021e0:	d2d8      	bcs.n	8002194 <__ledf2+0x74>
 80021e2:	e7f5      	b.n	80021d0 <__ledf2+0xb0>
 80021e4:	000007ff 	.word	0x000007ff

080021e8 <__aeabi_dmul>:
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	4657      	mov	r7, sl
 80021ec:	464e      	mov	r6, r9
 80021ee:	4645      	mov	r5, r8
 80021f0:	46de      	mov	lr, fp
 80021f2:	b5e0      	push	{r5, r6, r7, lr}
 80021f4:	4698      	mov	r8, r3
 80021f6:	030c      	lsls	r4, r1, #12
 80021f8:	004b      	lsls	r3, r1, #1
 80021fa:	0006      	movs	r6, r0
 80021fc:	4692      	mov	sl, r2
 80021fe:	b087      	sub	sp, #28
 8002200:	0b24      	lsrs	r4, r4, #12
 8002202:	0d5b      	lsrs	r3, r3, #21
 8002204:	0fcf      	lsrs	r7, r1, #31
 8002206:	2b00      	cmp	r3, #0
 8002208:	d100      	bne.n	800220c <__aeabi_dmul+0x24>
 800220a:	e15c      	b.n	80024c6 <__aeabi_dmul+0x2de>
 800220c:	4ad9      	ldr	r2, [pc, #868]	; (8002574 <__aeabi_dmul+0x38c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d100      	bne.n	8002214 <__aeabi_dmul+0x2c>
 8002212:	e175      	b.n	8002500 <__aeabi_dmul+0x318>
 8002214:	0f42      	lsrs	r2, r0, #29
 8002216:	00e4      	lsls	r4, r4, #3
 8002218:	4314      	orrs	r4, r2
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	0412      	lsls	r2, r2, #16
 800221e:	4314      	orrs	r4, r2
 8002220:	4ad5      	ldr	r2, [pc, #852]	; (8002578 <__aeabi_dmul+0x390>)
 8002222:	00c5      	lsls	r5, r0, #3
 8002224:	4694      	mov	ip, r2
 8002226:	4463      	add	r3, ip
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2300      	movs	r3, #0
 800222c:	4699      	mov	r9, r3
 800222e:	469b      	mov	fp, r3
 8002230:	4643      	mov	r3, r8
 8002232:	4642      	mov	r2, r8
 8002234:	031e      	lsls	r6, r3, #12
 8002236:	0fd2      	lsrs	r2, r2, #31
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4650      	mov	r0, sl
 800223c:	4690      	mov	r8, r2
 800223e:	0b36      	lsrs	r6, r6, #12
 8002240:	0d5b      	lsrs	r3, r3, #21
 8002242:	d100      	bne.n	8002246 <__aeabi_dmul+0x5e>
 8002244:	e120      	b.n	8002488 <__aeabi_dmul+0x2a0>
 8002246:	4acb      	ldr	r2, [pc, #812]	; (8002574 <__aeabi_dmul+0x38c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d100      	bne.n	800224e <__aeabi_dmul+0x66>
 800224c:	e162      	b.n	8002514 <__aeabi_dmul+0x32c>
 800224e:	49ca      	ldr	r1, [pc, #808]	; (8002578 <__aeabi_dmul+0x390>)
 8002250:	0f42      	lsrs	r2, r0, #29
 8002252:	468c      	mov	ip, r1
 8002254:	9900      	ldr	r1, [sp, #0]
 8002256:	4463      	add	r3, ip
 8002258:	00f6      	lsls	r6, r6, #3
 800225a:	468c      	mov	ip, r1
 800225c:	4316      	orrs	r6, r2
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	449c      	add	ip, r3
 8002262:	0412      	lsls	r2, r2, #16
 8002264:	4663      	mov	r3, ip
 8002266:	4316      	orrs	r6, r2
 8002268:	00c2      	lsls	r2, r0, #3
 800226a:	2000      	movs	r0, #0
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	9900      	ldr	r1, [sp, #0]
 8002270:	4643      	mov	r3, r8
 8002272:	3101      	adds	r1, #1
 8002274:	468c      	mov	ip, r1
 8002276:	4649      	mov	r1, r9
 8002278:	407b      	eors	r3, r7
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	290f      	cmp	r1, #15
 800227e:	d826      	bhi.n	80022ce <__aeabi_dmul+0xe6>
 8002280:	4bbe      	ldr	r3, [pc, #760]	; (800257c <__aeabi_dmul+0x394>)
 8002282:	0089      	lsls	r1, r1, #2
 8002284:	5859      	ldr	r1, [r3, r1]
 8002286:	468f      	mov	pc, r1
 8002288:	4643      	mov	r3, r8
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	0034      	movs	r4, r6
 800228e:	0015      	movs	r5, r2
 8002290:	4683      	mov	fp, r0
 8002292:	465b      	mov	r3, fp
 8002294:	2b02      	cmp	r3, #2
 8002296:	d016      	beq.n	80022c6 <__aeabi_dmul+0xde>
 8002298:	2b03      	cmp	r3, #3
 800229a:	d100      	bne.n	800229e <__aeabi_dmul+0xb6>
 800229c:	e203      	b.n	80026a6 <__aeabi_dmul+0x4be>
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d000      	beq.n	80022a4 <__aeabi_dmul+0xbc>
 80022a2:	e0cd      	b.n	8002440 <__aeabi_dmul+0x258>
 80022a4:	2200      	movs	r2, #0
 80022a6:	2400      	movs	r4, #0
 80022a8:	2500      	movs	r5, #0
 80022aa:	9b01      	ldr	r3, [sp, #4]
 80022ac:	0512      	lsls	r2, r2, #20
 80022ae:	4322      	orrs	r2, r4
 80022b0:	07db      	lsls	r3, r3, #31
 80022b2:	431a      	orrs	r2, r3
 80022b4:	0028      	movs	r0, r5
 80022b6:	0011      	movs	r1, r2
 80022b8:	b007      	add	sp, #28
 80022ba:	bcf0      	pop	{r4, r5, r6, r7}
 80022bc:	46bb      	mov	fp, r7
 80022be:	46b2      	mov	sl, r6
 80022c0:	46a9      	mov	r9, r5
 80022c2:	46a0      	mov	r8, r4
 80022c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c6:	2400      	movs	r4, #0
 80022c8:	2500      	movs	r5, #0
 80022ca:	4aaa      	ldr	r2, [pc, #680]	; (8002574 <__aeabi_dmul+0x38c>)
 80022cc:	e7ed      	b.n	80022aa <__aeabi_dmul+0xc2>
 80022ce:	0c28      	lsrs	r0, r5, #16
 80022d0:	042d      	lsls	r5, r5, #16
 80022d2:	0c2d      	lsrs	r5, r5, #16
 80022d4:	002b      	movs	r3, r5
 80022d6:	0c11      	lsrs	r1, r2, #16
 80022d8:	0412      	lsls	r2, r2, #16
 80022da:	0c12      	lsrs	r2, r2, #16
 80022dc:	4353      	muls	r3, r2
 80022de:	4698      	mov	r8, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	002f      	movs	r7, r5
 80022e4:	4343      	muls	r3, r0
 80022e6:	4699      	mov	r9, r3
 80022e8:	434f      	muls	r7, r1
 80022ea:	444f      	add	r7, r9
 80022ec:	46bb      	mov	fp, r7
 80022ee:	4647      	mov	r7, r8
 80022f0:	000b      	movs	r3, r1
 80022f2:	0c3f      	lsrs	r7, r7, #16
 80022f4:	46ba      	mov	sl, r7
 80022f6:	4343      	muls	r3, r0
 80022f8:	44da      	add	sl, fp
 80022fa:	9302      	str	r3, [sp, #8]
 80022fc:	45d1      	cmp	r9, sl
 80022fe:	d904      	bls.n	800230a <__aeabi_dmul+0x122>
 8002300:	2780      	movs	r7, #128	; 0x80
 8002302:	027f      	lsls	r7, r7, #9
 8002304:	46b9      	mov	r9, r7
 8002306:	444b      	add	r3, r9
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	4653      	mov	r3, sl
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	469b      	mov	fp, r3
 8002310:	4653      	mov	r3, sl
 8002312:	041f      	lsls	r7, r3, #16
 8002314:	4643      	mov	r3, r8
 8002316:	041b      	lsls	r3, r3, #16
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	4698      	mov	r8, r3
 800231c:	003b      	movs	r3, r7
 800231e:	4443      	add	r3, r8
 8002320:	9304      	str	r3, [sp, #16]
 8002322:	0c33      	lsrs	r3, r6, #16
 8002324:	0436      	lsls	r6, r6, #16
 8002326:	0c36      	lsrs	r6, r6, #16
 8002328:	4698      	mov	r8, r3
 800232a:	0033      	movs	r3, r6
 800232c:	4343      	muls	r3, r0
 800232e:	4699      	mov	r9, r3
 8002330:	4643      	mov	r3, r8
 8002332:	4343      	muls	r3, r0
 8002334:	002f      	movs	r7, r5
 8002336:	469a      	mov	sl, r3
 8002338:	4643      	mov	r3, r8
 800233a:	4377      	muls	r7, r6
 800233c:	435d      	muls	r5, r3
 800233e:	0c38      	lsrs	r0, r7, #16
 8002340:	444d      	add	r5, r9
 8002342:	1945      	adds	r5, r0, r5
 8002344:	45a9      	cmp	r9, r5
 8002346:	d903      	bls.n	8002350 <__aeabi_dmul+0x168>
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	025b      	lsls	r3, r3, #9
 800234c:	4699      	mov	r9, r3
 800234e:	44ca      	add	sl, r9
 8002350:	043f      	lsls	r7, r7, #16
 8002352:	0c28      	lsrs	r0, r5, #16
 8002354:	0c3f      	lsrs	r7, r7, #16
 8002356:	042d      	lsls	r5, r5, #16
 8002358:	19ed      	adds	r5, r5, r7
 800235a:	0c27      	lsrs	r7, r4, #16
 800235c:	0424      	lsls	r4, r4, #16
 800235e:	0c24      	lsrs	r4, r4, #16
 8002360:	0003      	movs	r3, r0
 8002362:	0020      	movs	r0, r4
 8002364:	4350      	muls	r0, r2
 8002366:	437a      	muls	r2, r7
 8002368:	4691      	mov	r9, r2
 800236a:	003a      	movs	r2, r7
 800236c:	4453      	add	r3, sl
 800236e:	9305      	str	r3, [sp, #20]
 8002370:	0c03      	lsrs	r3, r0, #16
 8002372:	469a      	mov	sl, r3
 8002374:	434a      	muls	r2, r1
 8002376:	4361      	muls	r1, r4
 8002378:	4449      	add	r1, r9
 800237a:	4451      	add	r1, sl
 800237c:	44ab      	add	fp, r5
 800237e:	4589      	cmp	r9, r1
 8002380:	d903      	bls.n	800238a <__aeabi_dmul+0x1a2>
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	025b      	lsls	r3, r3, #9
 8002386:	4699      	mov	r9, r3
 8002388:	444a      	add	r2, r9
 800238a:	0400      	lsls	r0, r0, #16
 800238c:	0c0b      	lsrs	r3, r1, #16
 800238e:	0c00      	lsrs	r0, r0, #16
 8002390:	0409      	lsls	r1, r1, #16
 8002392:	1809      	adds	r1, r1, r0
 8002394:	0020      	movs	r0, r4
 8002396:	4699      	mov	r9, r3
 8002398:	4643      	mov	r3, r8
 800239a:	4370      	muls	r0, r6
 800239c:	435c      	muls	r4, r3
 800239e:	437e      	muls	r6, r7
 80023a0:	435f      	muls	r7, r3
 80023a2:	0c03      	lsrs	r3, r0, #16
 80023a4:	4698      	mov	r8, r3
 80023a6:	19a4      	adds	r4, r4, r6
 80023a8:	4444      	add	r4, r8
 80023aa:	444a      	add	r2, r9
 80023ac:	9703      	str	r7, [sp, #12]
 80023ae:	42a6      	cmp	r6, r4
 80023b0:	d904      	bls.n	80023bc <__aeabi_dmul+0x1d4>
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	025b      	lsls	r3, r3, #9
 80023b6:	4698      	mov	r8, r3
 80023b8:	4447      	add	r7, r8
 80023ba:	9703      	str	r7, [sp, #12]
 80023bc:	0423      	lsls	r3, r4, #16
 80023be:	9e02      	ldr	r6, [sp, #8]
 80023c0:	469a      	mov	sl, r3
 80023c2:	9b05      	ldr	r3, [sp, #20]
 80023c4:	445e      	add	r6, fp
 80023c6:	4698      	mov	r8, r3
 80023c8:	42ae      	cmp	r6, r5
 80023ca:	41ad      	sbcs	r5, r5
 80023cc:	1876      	adds	r6, r6, r1
 80023ce:	428e      	cmp	r6, r1
 80023d0:	4189      	sbcs	r1, r1
 80023d2:	0400      	lsls	r0, r0, #16
 80023d4:	0c00      	lsrs	r0, r0, #16
 80023d6:	4450      	add	r0, sl
 80023d8:	4440      	add	r0, r8
 80023da:	426d      	negs	r5, r5
 80023dc:	1947      	adds	r7, r0, r5
 80023de:	46b8      	mov	r8, r7
 80023e0:	4693      	mov	fp, r2
 80023e2:	4249      	negs	r1, r1
 80023e4:	4689      	mov	r9, r1
 80023e6:	44c3      	add	fp, r8
 80023e8:	44d9      	add	r9, fp
 80023ea:	4298      	cmp	r0, r3
 80023ec:	4180      	sbcs	r0, r0
 80023ee:	45a8      	cmp	r8, r5
 80023f0:	41ad      	sbcs	r5, r5
 80023f2:	4593      	cmp	fp, r2
 80023f4:	4192      	sbcs	r2, r2
 80023f6:	4589      	cmp	r9, r1
 80023f8:	4189      	sbcs	r1, r1
 80023fa:	426d      	negs	r5, r5
 80023fc:	4240      	negs	r0, r0
 80023fe:	4328      	orrs	r0, r5
 8002400:	0c24      	lsrs	r4, r4, #16
 8002402:	4252      	negs	r2, r2
 8002404:	4249      	negs	r1, r1
 8002406:	430a      	orrs	r2, r1
 8002408:	9b03      	ldr	r3, [sp, #12]
 800240a:	1900      	adds	r0, r0, r4
 800240c:	1880      	adds	r0, r0, r2
 800240e:	18c7      	adds	r7, r0, r3
 8002410:	464b      	mov	r3, r9
 8002412:	0ddc      	lsrs	r4, r3, #23
 8002414:	9b04      	ldr	r3, [sp, #16]
 8002416:	0275      	lsls	r5, r6, #9
 8002418:	431d      	orrs	r5, r3
 800241a:	1e6a      	subs	r2, r5, #1
 800241c:	4195      	sbcs	r5, r2
 800241e:	464b      	mov	r3, r9
 8002420:	0df6      	lsrs	r6, r6, #23
 8002422:	027f      	lsls	r7, r7, #9
 8002424:	4335      	orrs	r5, r6
 8002426:	025a      	lsls	r2, r3, #9
 8002428:	433c      	orrs	r4, r7
 800242a:	4315      	orrs	r5, r2
 800242c:	01fb      	lsls	r3, r7, #7
 800242e:	d400      	bmi.n	8002432 <__aeabi_dmul+0x24a>
 8002430:	e11c      	b.n	800266c <__aeabi_dmul+0x484>
 8002432:	2101      	movs	r1, #1
 8002434:	086a      	lsrs	r2, r5, #1
 8002436:	400d      	ands	r5, r1
 8002438:	4315      	orrs	r5, r2
 800243a:	07e2      	lsls	r2, r4, #31
 800243c:	4315      	orrs	r5, r2
 800243e:	0864      	lsrs	r4, r4, #1
 8002440:	494f      	ldr	r1, [pc, #316]	; (8002580 <__aeabi_dmul+0x398>)
 8002442:	4461      	add	r1, ip
 8002444:	2900      	cmp	r1, #0
 8002446:	dc00      	bgt.n	800244a <__aeabi_dmul+0x262>
 8002448:	e0b0      	b.n	80025ac <__aeabi_dmul+0x3c4>
 800244a:	076b      	lsls	r3, r5, #29
 800244c:	d009      	beq.n	8002462 <__aeabi_dmul+0x27a>
 800244e:	220f      	movs	r2, #15
 8002450:	402a      	ands	r2, r5
 8002452:	2a04      	cmp	r2, #4
 8002454:	d005      	beq.n	8002462 <__aeabi_dmul+0x27a>
 8002456:	1d2a      	adds	r2, r5, #4
 8002458:	42aa      	cmp	r2, r5
 800245a:	41ad      	sbcs	r5, r5
 800245c:	426d      	negs	r5, r5
 800245e:	1964      	adds	r4, r4, r5
 8002460:	0015      	movs	r5, r2
 8002462:	01e3      	lsls	r3, r4, #7
 8002464:	d504      	bpl.n	8002470 <__aeabi_dmul+0x288>
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	4a46      	ldr	r2, [pc, #280]	; (8002584 <__aeabi_dmul+0x39c>)
 800246a:	00c9      	lsls	r1, r1, #3
 800246c:	4014      	ands	r4, r2
 800246e:	4461      	add	r1, ip
 8002470:	4a45      	ldr	r2, [pc, #276]	; (8002588 <__aeabi_dmul+0x3a0>)
 8002472:	4291      	cmp	r1, r2
 8002474:	dd00      	ble.n	8002478 <__aeabi_dmul+0x290>
 8002476:	e726      	b.n	80022c6 <__aeabi_dmul+0xde>
 8002478:	0762      	lsls	r2, r4, #29
 800247a:	08ed      	lsrs	r5, r5, #3
 800247c:	0264      	lsls	r4, r4, #9
 800247e:	0549      	lsls	r1, r1, #21
 8002480:	4315      	orrs	r5, r2
 8002482:	0b24      	lsrs	r4, r4, #12
 8002484:	0d4a      	lsrs	r2, r1, #21
 8002486:	e710      	b.n	80022aa <__aeabi_dmul+0xc2>
 8002488:	4652      	mov	r2, sl
 800248a:	4332      	orrs	r2, r6
 800248c:	d100      	bne.n	8002490 <__aeabi_dmul+0x2a8>
 800248e:	e07f      	b.n	8002590 <__aeabi_dmul+0x3a8>
 8002490:	2e00      	cmp	r6, #0
 8002492:	d100      	bne.n	8002496 <__aeabi_dmul+0x2ae>
 8002494:	e0dc      	b.n	8002650 <__aeabi_dmul+0x468>
 8002496:	0030      	movs	r0, r6
 8002498:	f000 fe1e 	bl	80030d8 <__clzsi2>
 800249c:	0002      	movs	r2, r0
 800249e:	3a0b      	subs	r2, #11
 80024a0:	231d      	movs	r3, #29
 80024a2:	0001      	movs	r1, r0
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	4652      	mov	r2, sl
 80024a8:	3908      	subs	r1, #8
 80024aa:	40da      	lsrs	r2, r3
 80024ac:	408e      	lsls	r6, r1
 80024ae:	4316      	orrs	r6, r2
 80024b0:	4652      	mov	r2, sl
 80024b2:	408a      	lsls	r2, r1
 80024b4:	9b00      	ldr	r3, [sp, #0]
 80024b6:	4935      	ldr	r1, [pc, #212]	; (800258c <__aeabi_dmul+0x3a4>)
 80024b8:	1a18      	subs	r0, r3, r0
 80024ba:	0003      	movs	r3, r0
 80024bc:	468c      	mov	ip, r1
 80024be:	4463      	add	r3, ip
 80024c0:	2000      	movs	r0, #0
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	e6d3      	b.n	800226e <__aeabi_dmul+0x86>
 80024c6:	0025      	movs	r5, r4
 80024c8:	4305      	orrs	r5, r0
 80024ca:	d04a      	beq.n	8002562 <__aeabi_dmul+0x37a>
 80024cc:	2c00      	cmp	r4, #0
 80024ce:	d100      	bne.n	80024d2 <__aeabi_dmul+0x2ea>
 80024d0:	e0b0      	b.n	8002634 <__aeabi_dmul+0x44c>
 80024d2:	0020      	movs	r0, r4
 80024d4:	f000 fe00 	bl	80030d8 <__clzsi2>
 80024d8:	0001      	movs	r1, r0
 80024da:	0002      	movs	r2, r0
 80024dc:	390b      	subs	r1, #11
 80024de:	231d      	movs	r3, #29
 80024e0:	0010      	movs	r0, r2
 80024e2:	1a5b      	subs	r3, r3, r1
 80024e4:	0031      	movs	r1, r6
 80024e6:	0035      	movs	r5, r6
 80024e8:	3808      	subs	r0, #8
 80024ea:	4084      	lsls	r4, r0
 80024ec:	40d9      	lsrs	r1, r3
 80024ee:	4085      	lsls	r5, r0
 80024f0:	430c      	orrs	r4, r1
 80024f2:	4826      	ldr	r0, [pc, #152]	; (800258c <__aeabi_dmul+0x3a4>)
 80024f4:	1a83      	subs	r3, r0, r2
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2300      	movs	r3, #0
 80024fa:	4699      	mov	r9, r3
 80024fc:	469b      	mov	fp, r3
 80024fe:	e697      	b.n	8002230 <__aeabi_dmul+0x48>
 8002500:	0005      	movs	r5, r0
 8002502:	4325      	orrs	r5, r4
 8002504:	d126      	bne.n	8002554 <__aeabi_dmul+0x36c>
 8002506:	2208      	movs	r2, #8
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2302      	movs	r3, #2
 800250c:	2400      	movs	r4, #0
 800250e:	4691      	mov	r9, r2
 8002510:	469b      	mov	fp, r3
 8002512:	e68d      	b.n	8002230 <__aeabi_dmul+0x48>
 8002514:	4652      	mov	r2, sl
 8002516:	9b00      	ldr	r3, [sp, #0]
 8002518:	4332      	orrs	r2, r6
 800251a:	d110      	bne.n	800253e <__aeabi_dmul+0x356>
 800251c:	4915      	ldr	r1, [pc, #84]	; (8002574 <__aeabi_dmul+0x38c>)
 800251e:	2600      	movs	r6, #0
 8002520:	468c      	mov	ip, r1
 8002522:	4463      	add	r3, ip
 8002524:	4649      	mov	r1, r9
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2302      	movs	r3, #2
 800252a:	4319      	orrs	r1, r3
 800252c:	4689      	mov	r9, r1
 800252e:	2002      	movs	r0, #2
 8002530:	e69d      	b.n	800226e <__aeabi_dmul+0x86>
 8002532:	465b      	mov	r3, fp
 8002534:	9701      	str	r7, [sp, #4]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d000      	beq.n	800253c <__aeabi_dmul+0x354>
 800253a:	e6ad      	b.n	8002298 <__aeabi_dmul+0xb0>
 800253c:	e6c3      	b.n	80022c6 <__aeabi_dmul+0xde>
 800253e:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <__aeabi_dmul+0x38c>)
 8002540:	2003      	movs	r0, #3
 8002542:	4694      	mov	ip, r2
 8002544:	4463      	add	r3, ip
 8002546:	464a      	mov	r2, r9
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2303      	movs	r3, #3
 800254c:	431a      	orrs	r2, r3
 800254e:	4691      	mov	r9, r2
 8002550:	4652      	mov	r2, sl
 8002552:	e68c      	b.n	800226e <__aeabi_dmul+0x86>
 8002554:	220c      	movs	r2, #12
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2303      	movs	r3, #3
 800255a:	0005      	movs	r5, r0
 800255c:	4691      	mov	r9, r2
 800255e:	469b      	mov	fp, r3
 8002560:	e666      	b.n	8002230 <__aeabi_dmul+0x48>
 8002562:	2304      	movs	r3, #4
 8002564:	4699      	mov	r9, r3
 8002566:	2300      	movs	r3, #0
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	2400      	movs	r4, #0
 800256e:	469b      	mov	fp, r3
 8002570:	e65e      	b.n	8002230 <__aeabi_dmul+0x48>
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	000007ff 	.word	0x000007ff
 8002578:	fffffc01 	.word	0xfffffc01
 800257c:	0800d2b8 	.word	0x0800d2b8
 8002580:	000003ff 	.word	0x000003ff
 8002584:	feffffff 	.word	0xfeffffff
 8002588:	000007fe 	.word	0x000007fe
 800258c:	fffffc0d 	.word	0xfffffc0d
 8002590:	4649      	mov	r1, r9
 8002592:	2301      	movs	r3, #1
 8002594:	4319      	orrs	r1, r3
 8002596:	4689      	mov	r9, r1
 8002598:	2600      	movs	r6, #0
 800259a:	2001      	movs	r0, #1
 800259c:	e667      	b.n	800226e <__aeabi_dmul+0x86>
 800259e:	2300      	movs	r3, #0
 80025a0:	2480      	movs	r4, #128	; 0x80
 80025a2:	2500      	movs	r5, #0
 80025a4:	4a43      	ldr	r2, [pc, #268]	; (80026b4 <__aeabi_dmul+0x4cc>)
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	0324      	lsls	r4, r4, #12
 80025aa:	e67e      	b.n	80022aa <__aeabi_dmul+0xc2>
 80025ac:	2001      	movs	r0, #1
 80025ae:	1a40      	subs	r0, r0, r1
 80025b0:	2838      	cmp	r0, #56	; 0x38
 80025b2:	dd00      	ble.n	80025b6 <__aeabi_dmul+0x3ce>
 80025b4:	e676      	b.n	80022a4 <__aeabi_dmul+0xbc>
 80025b6:	281f      	cmp	r0, #31
 80025b8:	dd5b      	ble.n	8002672 <__aeabi_dmul+0x48a>
 80025ba:	221f      	movs	r2, #31
 80025bc:	0023      	movs	r3, r4
 80025be:	4252      	negs	r2, r2
 80025c0:	1a51      	subs	r1, r2, r1
 80025c2:	40cb      	lsrs	r3, r1
 80025c4:	0019      	movs	r1, r3
 80025c6:	2820      	cmp	r0, #32
 80025c8:	d003      	beq.n	80025d2 <__aeabi_dmul+0x3ea>
 80025ca:	4a3b      	ldr	r2, [pc, #236]	; (80026b8 <__aeabi_dmul+0x4d0>)
 80025cc:	4462      	add	r2, ip
 80025ce:	4094      	lsls	r4, r2
 80025d0:	4325      	orrs	r5, r4
 80025d2:	1e6a      	subs	r2, r5, #1
 80025d4:	4195      	sbcs	r5, r2
 80025d6:	002a      	movs	r2, r5
 80025d8:	430a      	orrs	r2, r1
 80025da:	2107      	movs	r1, #7
 80025dc:	000d      	movs	r5, r1
 80025de:	2400      	movs	r4, #0
 80025e0:	4015      	ands	r5, r2
 80025e2:	4211      	tst	r1, r2
 80025e4:	d05b      	beq.n	800269e <__aeabi_dmul+0x4b6>
 80025e6:	210f      	movs	r1, #15
 80025e8:	2400      	movs	r4, #0
 80025ea:	4011      	ands	r1, r2
 80025ec:	2904      	cmp	r1, #4
 80025ee:	d053      	beq.n	8002698 <__aeabi_dmul+0x4b0>
 80025f0:	1d11      	adds	r1, r2, #4
 80025f2:	4291      	cmp	r1, r2
 80025f4:	4192      	sbcs	r2, r2
 80025f6:	4252      	negs	r2, r2
 80025f8:	18a4      	adds	r4, r4, r2
 80025fa:	000a      	movs	r2, r1
 80025fc:	0223      	lsls	r3, r4, #8
 80025fe:	d54b      	bpl.n	8002698 <__aeabi_dmul+0x4b0>
 8002600:	2201      	movs	r2, #1
 8002602:	2400      	movs	r4, #0
 8002604:	2500      	movs	r5, #0
 8002606:	e650      	b.n	80022aa <__aeabi_dmul+0xc2>
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	031b      	lsls	r3, r3, #12
 800260c:	421c      	tst	r4, r3
 800260e:	d009      	beq.n	8002624 <__aeabi_dmul+0x43c>
 8002610:	421e      	tst	r6, r3
 8002612:	d107      	bne.n	8002624 <__aeabi_dmul+0x43c>
 8002614:	4333      	orrs	r3, r6
 8002616:	031c      	lsls	r4, r3, #12
 8002618:	4643      	mov	r3, r8
 800261a:	0015      	movs	r5, r2
 800261c:	0b24      	lsrs	r4, r4, #12
 800261e:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <__aeabi_dmul+0x4cc>)
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	e642      	b.n	80022aa <__aeabi_dmul+0xc2>
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	0312      	lsls	r2, r2, #12
 8002628:	4314      	orrs	r4, r2
 800262a:	0324      	lsls	r4, r4, #12
 800262c:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <__aeabi_dmul+0x4cc>)
 800262e:	0b24      	lsrs	r4, r4, #12
 8002630:	9701      	str	r7, [sp, #4]
 8002632:	e63a      	b.n	80022aa <__aeabi_dmul+0xc2>
 8002634:	f000 fd50 	bl	80030d8 <__clzsi2>
 8002638:	0001      	movs	r1, r0
 800263a:	0002      	movs	r2, r0
 800263c:	3115      	adds	r1, #21
 800263e:	3220      	adds	r2, #32
 8002640:	291c      	cmp	r1, #28
 8002642:	dc00      	bgt.n	8002646 <__aeabi_dmul+0x45e>
 8002644:	e74b      	b.n	80024de <__aeabi_dmul+0x2f6>
 8002646:	0034      	movs	r4, r6
 8002648:	3808      	subs	r0, #8
 800264a:	2500      	movs	r5, #0
 800264c:	4084      	lsls	r4, r0
 800264e:	e750      	b.n	80024f2 <__aeabi_dmul+0x30a>
 8002650:	f000 fd42 	bl	80030d8 <__clzsi2>
 8002654:	0003      	movs	r3, r0
 8002656:	001a      	movs	r2, r3
 8002658:	3215      	adds	r2, #21
 800265a:	3020      	adds	r0, #32
 800265c:	2a1c      	cmp	r2, #28
 800265e:	dc00      	bgt.n	8002662 <__aeabi_dmul+0x47a>
 8002660:	e71e      	b.n	80024a0 <__aeabi_dmul+0x2b8>
 8002662:	4656      	mov	r6, sl
 8002664:	3b08      	subs	r3, #8
 8002666:	2200      	movs	r2, #0
 8002668:	409e      	lsls	r6, r3
 800266a:	e723      	b.n	80024b4 <__aeabi_dmul+0x2cc>
 800266c:	9b00      	ldr	r3, [sp, #0]
 800266e:	469c      	mov	ip, r3
 8002670:	e6e6      	b.n	8002440 <__aeabi_dmul+0x258>
 8002672:	4912      	ldr	r1, [pc, #72]	; (80026bc <__aeabi_dmul+0x4d4>)
 8002674:	0022      	movs	r2, r4
 8002676:	4461      	add	r1, ip
 8002678:	002e      	movs	r6, r5
 800267a:	408d      	lsls	r5, r1
 800267c:	408a      	lsls	r2, r1
 800267e:	40c6      	lsrs	r6, r0
 8002680:	1e69      	subs	r1, r5, #1
 8002682:	418d      	sbcs	r5, r1
 8002684:	4332      	orrs	r2, r6
 8002686:	432a      	orrs	r2, r5
 8002688:	40c4      	lsrs	r4, r0
 800268a:	0753      	lsls	r3, r2, #29
 800268c:	d0b6      	beq.n	80025fc <__aeabi_dmul+0x414>
 800268e:	210f      	movs	r1, #15
 8002690:	4011      	ands	r1, r2
 8002692:	2904      	cmp	r1, #4
 8002694:	d1ac      	bne.n	80025f0 <__aeabi_dmul+0x408>
 8002696:	e7b1      	b.n	80025fc <__aeabi_dmul+0x414>
 8002698:	0765      	lsls	r5, r4, #29
 800269a:	0264      	lsls	r4, r4, #9
 800269c:	0b24      	lsrs	r4, r4, #12
 800269e:	08d2      	lsrs	r2, r2, #3
 80026a0:	4315      	orrs	r5, r2
 80026a2:	2200      	movs	r2, #0
 80026a4:	e601      	b.n	80022aa <__aeabi_dmul+0xc2>
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	0312      	lsls	r2, r2, #12
 80026aa:	4314      	orrs	r4, r2
 80026ac:	0324      	lsls	r4, r4, #12
 80026ae:	4a01      	ldr	r2, [pc, #4]	; (80026b4 <__aeabi_dmul+0x4cc>)
 80026b0:	0b24      	lsrs	r4, r4, #12
 80026b2:	e5fa      	b.n	80022aa <__aeabi_dmul+0xc2>
 80026b4:	000007ff 	.word	0x000007ff
 80026b8:	0000043e 	.word	0x0000043e
 80026bc:	0000041e 	.word	0x0000041e

080026c0 <__aeabi_dsub>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	4657      	mov	r7, sl
 80026c4:	464e      	mov	r6, r9
 80026c6:	4645      	mov	r5, r8
 80026c8:	46de      	mov	lr, fp
 80026ca:	b5e0      	push	{r5, r6, r7, lr}
 80026cc:	001e      	movs	r6, r3
 80026ce:	0017      	movs	r7, r2
 80026d0:	004a      	lsls	r2, r1, #1
 80026d2:	030b      	lsls	r3, r1, #12
 80026d4:	0d52      	lsrs	r2, r2, #21
 80026d6:	0a5b      	lsrs	r3, r3, #9
 80026d8:	4690      	mov	r8, r2
 80026da:	0f42      	lsrs	r2, r0, #29
 80026dc:	431a      	orrs	r2, r3
 80026de:	0fcd      	lsrs	r5, r1, #31
 80026e0:	4ccd      	ldr	r4, [pc, #820]	; (8002a18 <__aeabi_dsub+0x358>)
 80026e2:	0331      	lsls	r1, r6, #12
 80026e4:	00c3      	lsls	r3, r0, #3
 80026e6:	4694      	mov	ip, r2
 80026e8:	0070      	lsls	r0, r6, #1
 80026ea:	0f7a      	lsrs	r2, r7, #29
 80026ec:	0a49      	lsrs	r1, r1, #9
 80026ee:	00ff      	lsls	r7, r7, #3
 80026f0:	469a      	mov	sl, r3
 80026f2:	46b9      	mov	r9, r7
 80026f4:	0d40      	lsrs	r0, r0, #21
 80026f6:	0ff6      	lsrs	r6, r6, #31
 80026f8:	4311      	orrs	r1, r2
 80026fa:	42a0      	cmp	r0, r4
 80026fc:	d100      	bne.n	8002700 <__aeabi_dsub+0x40>
 80026fe:	e0b1      	b.n	8002864 <__aeabi_dsub+0x1a4>
 8002700:	2201      	movs	r2, #1
 8002702:	4056      	eors	r6, r2
 8002704:	46b3      	mov	fp, r6
 8002706:	42b5      	cmp	r5, r6
 8002708:	d100      	bne.n	800270c <__aeabi_dsub+0x4c>
 800270a:	e088      	b.n	800281e <__aeabi_dsub+0x15e>
 800270c:	4642      	mov	r2, r8
 800270e:	1a12      	subs	r2, r2, r0
 8002710:	2a00      	cmp	r2, #0
 8002712:	dc00      	bgt.n	8002716 <__aeabi_dsub+0x56>
 8002714:	e0ae      	b.n	8002874 <__aeabi_dsub+0x1b4>
 8002716:	2800      	cmp	r0, #0
 8002718:	d100      	bne.n	800271c <__aeabi_dsub+0x5c>
 800271a:	e0c1      	b.n	80028a0 <__aeabi_dsub+0x1e0>
 800271c:	48be      	ldr	r0, [pc, #760]	; (8002a18 <__aeabi_dsub+0x358>)
 800271e:	4580      	cmp	r8, r0
 8002720:	d100      	bne.n	8002724 <__aeabi_dsub+0x64>
 8002722:	e151      	b.n	80029c8 <__aeabi_dsub+0x308>
 8002724:	2080      	movs	r0, #128	; 0x80
 8002726:	0400      	lsls	r0, r0, #16
 8002728:	4301      	orrs	r1, r0
 800272a:	2a38      	cmp	r2, #56	; 0x38
 800272c:	dd00      	ble.n	8002730 <__aeabi_dsub+0x70>
 800272e:	e17b      	b.n	8002a28 <__aeabi_dsub+0x368>
 8002730:	2a1f      	cmp	r2, #31
 8002732:	dd00      	ble.n	8002736 <__aeabi_dsub+0x76>
 8002734:	e1ee      	b.n	8002b14 <__aeabi_dsub+0x454>
 8002736:	2020      	movs	r0, #32
 8002738:	003e      	movs	r6, r7
 800273a:	1a80      	subs	r0, r0, r2
 800273c:	000c      	movs	r4, r1
 800273e:	40d6      	lsrs	r6, r2
 8002740:	40d1      	lsrs	r1, r2
 8002742:	4087      	lsls	r7, r0
 8002744:	4662      	mov	r2, ip
 8002746:	4084      	lsls	r4, r0
 8002748:	1a52      	subs	r2, r2, r1
 800274a:	1e78      	subs	r0, r7, #1
 800274c:	4187      	sbcs	r7, r0
 800274e:	4694      	mov	ip, r2
 8002750:	4334      	orrs	r4, r6
 8002752:	4327      	orrs	r7, r4
 8002754:	1bdc      	subs	r4, r3, r7
 8002756:	42a3      	cmp	r3, r4
 8002758:	419b      	sbcs	r3, r3
 800275a:	4662      	mov	r2, ip
 800275c:	425b      	negs	r3, r3
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	4699      	mov	r9, r3
 8002762:	464b      	mov	r3, r9
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	d400      	bmi.n	800276a <__aeabi_dsub+0xaa>
 8002768:	e118      	b.n	800299c <__aeabi_dsub+0x2dc>
 800276a:	464b      	mov	r3, r9
 800276c:	0258      	lsls	r0, r3, #9
 800276e:	0a43      	lsrs	r3, r0, #9
 8002770:	4699      	mov	r9, r3
 8002772:	464b      	mov	r3, r9
 8002774:	2b00      	cmp	r3, #0
 8002776:	d100      	bne.n	800277a <__aeabi_dsub+0xba>
 8002778:	e137      	b.n	80029ea <__aeabi_dsub+0x32a>
 800277a:	4648      	mov	r0, r9
 800277c:	f000 fcac 	bl	80030d8 <__clzsi2>
 8002780:	0001      	movs	r1, r0
 8002782:	3908      	subs	r1, #8
 8002784:	2320      	movs	r3, #32
 8002786:	0022      	movs	r2, r4
 8002788:	4648      	mov	r0, r9
 800278a:	1a5b      	subs	r3, r3, r1
 800278c:	40da      	lsrs	r2, r3
 800278e:	4088      	lsls	r0, r1
 8002790:	408c      	lsls	r4, r1
 8002792:	4643      	mov	r3, r8
 8002794:	4310      	orrs	r0, r2
 8002796:	4588      	cmp	r8, r1
 8002798:	dd00      	ble.n	800279c <__aeabi_dsub+0xdc>
 800279a:	e136      	b.n	8002a0a <__aeabi_dsub+0x34a>
 800279c:	1ac9      	subs	r1, r1, r3
 800279e:	1c4b      	adds	r3, r1, #1
 80027a0:	2b1f      	cmp	r3, #31
 80027a2:	dd00      	ble.n	80027a6 <__aeabi_dsub+0xe6>
 80027a4:	e0ea      	b.n	800297c <__aeabi_dsub+0x2bc>
 80027a6:	2220      	movs	r2, #32
 80027a8:	0026      	movs	r6, r4
 80027aa:	1ad2      	subs	r2, r2, r3
 80027ac:	0001      	movs	r1, r0
 80027ae:	4094      	lsls	r4, r2
 80027b0:	40de      	lsrs	r6, r3
 80027b2:	40d8      	lsrs	r0, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	4091      	lsls	r1, r2
 80027b8:	1e62      	subs	r2, r4, #1
 80027ba:	4194      	sbcs	r4, r2
 80027bc:	4681      	mov	r9, r0
 80027be:	4698      	mov	r8, r3
 80027c0:	4331      	orrs	r1, r6
 80027c2:	430c      	orrs	r4, r1
 80027c4:	0763      	lsls	r3, r4, #29
 80027c6:	d009      	beq.n	80027dc <__aeabi_dsub+0x11c>
 80027c8:	230f      	movs	r3, #15
 80027ca:	4023      	ands	r3, r4
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d005      	beq.n	80027dc <__aeabi_dsub+0x11c>
 80027d0:	1d23      	adds	r3, r4, #4
 80027d2:	42a3      	cmp	r3, r4
 80027d4:	41a4      	sbcs	r4, r4
 80027d6:	4264      	negs	r4, r4
 80027d8:	44a1      	add	r9, r4
 80027da:	001c      	movs	r4, r3
 80027dc:	464b      	mov	r3, r9
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	d400      	bmi.n	80027e4 <__aeabi_dsub+0x124>
 80027e2:	e0de      	b.n	80029a2 <__aeabi_dsub+0x2e2>
 80027e4:	4641      	mov	r1, r8
 80027e6:	4b8c      	ldr	r3, [pc, #560]	; (8002a18 <__aeabi_dsub+0x358>)
 80027e8:	3101      	adds	r1, #1
 80027ea:	4299      	cmp	r1, r3
 80027ec:	d100      	bne.n	80027f0 <__aeabi_dsub+0x130>
 80027ee:	e0e7      	b.n	80029c0 <__aeabi_dsub+0x300>
 80027f0:	464b      	mov	r3, r9
 80027f2:	488a      	ldr	r0, [pc, #552]	; (8002a1c <__aeabi_dsub+0x35c>)
 80027f4:	08e4      	lsrs	r4, r4, #3
 80027f6:	4003      	ands	r3, r0
 80027f8:	0018      	movs	r0, r3
 80027fa:	0549      	lsls	r1, r1, #21
 80027fc:	075b      	lsls	r3, r3, #29
 80027fe:	0240      	lsls	r0, r0, #9
 8002800:	4323      	orrs	r3, r4
 8002802:	0d4a      	lsrs	r2, r1, #21
 8002804:	0b04      	lsrs	r4, r0, #12
 8002806:	0512      	lsls	r2, r2, #20
 8002808:	07ed      	lsls	r5, r5, #31
 800280a:	4322      	orrs	r2, r4
 800280c:	432a      	orrs	r2, r5
 800280e:	0018      	movs	r0, r3
 8002810:	0011      	movs	r1, r2
 8002812:	bcf0      	pop	{r4, r5, r6, r7}
 8002814:	46bb      	mov	fp, r7
 8002816:	46b2      	mov	sl, r6
 8002818:	46a9      	mov	r9, r5
 800281a:	46a0      	mov	r8, r4
 800281c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800281e:	4642      	mov	r2, r8
 8002820:	1a12      	subs	r2, r2, r0
 8002822:	2a00      	cmp	r2, #0
 8002824:	dd52      	ble.n	80028cc <__aeabi_dsub+0x20c>
 8002826:	2800      	cmp	r0, #0
 8002828:	d100      	bne.n	800282c <__aeabi_dsub+0x16c>
 800282a:	e09c      	b.n	8002966 <__aeabi_dsub+0x2a6>
 800282c:	45a0      	cmp	r8, r4
 800282e:	d100      	bne.n	8002832 <__aeabi_dsub+0x172>
 8002830:	e0ca      	b.n	80029c8 <__aeabi_dsub+0x308>
 8002832:	2080      	movs	r0, #128	; 0x80
 8002834:	0400      	lsls	r0, r0, #16
 8002836:	4301      	orrs	r1, r0
 8002838:	2a38      	cmp	r2, #56	; 0x38
 800283a:	dd00      	ble.n	800283e <__aeabi_dsub+0x17e>
 800283c:	e149      	b.n	8002ad2 <__aeabi_dsub+0x412>
 800283e:	2a1f      	cmp	r2, #31
 8002840:	dc00      	bgt.n	8002844 <__aeabi_dsub+0x184>
 8002842:	e197      	b.n	8002b74 <__aeabi_dsub+0x4b4>
 8002844:	0010      	movs	r0, r2
 8002846:	000e      	movs	r6, r1
 8002848:	3820      	subs	r0, #32
 800284a:	40c6      	lsrs	r6, r0
 800284c:	2a20      	cmp	r2, #32
 800284e:	d004      	beq.n	800285a <__aeabi_dsub+0x19a>
 8002850:	2040      	movs	r0, #64	; 0x40
 8002852:	1a82      	subs	r2, r0, r2
 8002854:	4091      	lsls	r1, r2
 8002856:	430f      	orrs	r7, r1
 8002858:	46b9      	mov	r9, r7
 800285a:	464c      	mov	r4, r9
 800285c:	1e62      	subs	r2, r4, #1
 800285e:	4194      	sbcs	r4, r2
 8002860:	4334      	orrs	r4, r6
 8002862:	e13a      	b.n	8002ada <__aeabi_dsub+0x41a>
 8002864:	000a      	movs	r2, r1
 8002866:	433a      	orrs	r2, r7
 8002868:	d028      	beq.n	80028bc <__aeabi_dsub+0x1fc>
 800286a:	46b3      	mov	fp, r6
 800286c:	42b5      	cmp	r5, r6
 800286e:	d02b      	beq.n	80028c8 <__aeabi_dsub+0x208>
 8002870:	4a6b      	ldr	r2, [pc, #428]	; (8002a20 <__aeabi_dsub+0x360>)
 8002872:	4442      	add	r2, r8
 8002874:	2a00      	cmp	r2, #0
 8002876:	d05d      	beq.n	8002934 <__aeabi_dsub+0x274>
 8002878:	4642      	mov	r2, r8
 800287a:	4644      	mov	r4, r8
 800287c:	1a82      	subs	r2, r0, r2
 800287e:	2c00      	cmp	r4, #0
 8002880:	d000      	beq.n	8002884 <__aeabi_dsub+0x1c4>
 8002882:	e0f5      	b.n	8002a70 <__aeabi_dsub+0x3b0>
 8002884:	4665      	mov	r5, ip
 8002886:	431d      	orrs	r5, r3
 8002888:	d100      	bne.n	800288c <__aeabi_dsub+0x1cc>
 800288a:	e19c      	b.n	8002bc6 <__aeabi_dsub+0x506>
 800288c:	1e55      	subs	r5, r2, #1
 800288e:	2a01      	cmp	r2, #1
 8002890:	d100      	bne.n	8002894 <__aeabi_dsub+0x1d4>
 8002892:	e1fb      	b.n	8002c8c <__aeabi_dsub+0x5cc>
 8002894:	4c60      	ldr	r4, [pc, #384]	; (8002a18 <__aeabi_dsub+0x358>)
 8002896:	42a2      	cmp	r2, r4
 8002898:	d100      	bne.n	800289c <__aeabi_dsub+0x1dc>
 800289a:	e1bd      	b.n	8002c18 <__aeabi_dsub+0x558>
 800289c:	002a      	movs	r2, r5
 800289e:	e0f0      	b.n	8002a82 <__aeabi_dsub+0x3c2>
 80028a0:	0008      	movs	r0, r1
 80028a2:	4338      	orrs	r0, r7
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x1e8>
 80028a6:	e0c3      	b.n	8002a30 <__aeabi_dsub+0x370>
 80028a8:	1e50      	subs	r0, r2, #1
 80028aa:	2a01      	cmp	r2, #1
 80028ac:	d100      	bne.n	80028b0 <__aeabi_dsub+0x1f0>
 80028ae:	e1a8      	b.n	8002c02 <__aeabi_dsub+0x542>
 80028b0:	4c59      	ldr	r4, [pc, #356]	; (8002a18 <__aeabi_dsub+0x358>)
 80028b2:	42a2      	cmp	r2, r4
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x1f8>
 80028b6:	e087      	b.n	80029c8 <__aeabi_dsub+0x308>
 80028b8:	0002      	movs	r2, r0
 80028ba:	e736      	b.n	800272a <__aeabi_dsub+0x6a>
 80028bc:	2201      	movs	r2, #1
 80028be:	4056      	eors	r6, r2
 80028c0:	46b3      	mov	fp, r6
 80028c2:	42b5      	cmp	r5, r6
 80028c4:	d000      	beq.n	80028c8 <__aeabi_dsub+0x208>
 80028c6:	e721      	b.n	800270c <__aeabi_dsub+0x4c>
 80028c8:	4a55      	ldr	r2, [pc, #340]	; (8002a20 <__aeabi_dsub+0x360>)
 80028ca:	4442      	add	r2, r8
 80028cc:	2a00      	cmp	r2, #0
 80028ce:	d100      	bne.n	80028d2 <__aeabi_dsub+0x212>
 80028d0:	e0b5      	b.n	8002a3e <__aeabi_dsub+0x37e>
 80028d2:	4642      	mov	r2, r8
 80028d4:	4644      	mov	r4, r8
 80028d6:	1a82      	subs	r2, r0, r2
 80028d8:	2c00      	cmp	r4, #0
 80028da:	d100      	bne.n	80028de <__aeabi_dsub+0x21e>
 80028dc:	e138      	b.n	8002b50 <__aeabi_dsub+0x490>
 80028de:	4e4e      	ldr	r6, [pc, #312]	; (8002a18 <__aeabi_dsub+0x358>)
 80028e0:	42b0      	cmp	r0, r6
 80028e2:	d100      	bne.n	80028e6 <__aeabi_dsub+0x226>
 80028e4:	e1de      	b.n	8002ca4 <__aeabi_dsub+0x5e4>
 80028e6:	2680      	movs	r6, #128	; 0x80
 80028e8:	4664      	mov	r4, ip
 80028ea:	0436      	lsls	r6, r6, #16
 80028ec:	4334      	orrs	r4, r6
 80028ee:	46a4      	mov	ip, r4
 80028f0:	2a38      	cmp	r2, #56	; 0x38
 80028f2:	dd00      	ble.n	80028f6 <__aeabi_dsub+0x236>
 80028f4:	e196      	b.n	8002c24 <__aeabi_dsub+0x564>
 80028f6:	2a1f      	cmp	r2, #31
 80028f8:	dd00      	ble.n	80028fc <__aeabi_dsub+0x23c>
 80028fa:	e224      	b.n	8002d46 <__aeabi_dsub+0x686>
 80028fc:	2620      	movs	r6, #32
 80028fe:	1ab4      	subs	r4, r6, r2
 8002900:	46a2      	mov	sl, r4
 8002902:	4664      	mov	r4, ip
 8002904:	4656      	mov	r6, sl
 8002906:	40b4      	lsls	r4, r6
 8002908:	46a1      	mov	r9, r4
 800290a:	001c      	movs	r4, r3
 800290c:	464e      	mov	r6, r9
 800290e:	40d4      	lsrs	r4, r2
 8002910:	4326      	orrs	r6, r4
 8002912:	0034      	movs	r4, r6
 8002914:	4656      	mov	r6, sl
 8002916:	40b3      	lsls	r3, r6
 8002918:	1e5e      	subs	r6, r3, #1
 800291a:	41b3      	sbcs	r3, r6
 800291c:	431c      	orrs	r4, r3
 800291e:	4663      	mov	r3, ip
 8002920:	40d3      	lsrs	r3, r2
 8002922:	18c9      	adds	r1, r1, r3
 8002924:	19e4      	adds	r4, r4, r7
 8002926:	42bc      	cmp	r4, r7
 8002928:	41bf      	sbcs	r7, r7
 800292a:	427f      	negs	r7, r7
 800292c:	46b9      	mov	r9, r7
 800292e:	4680      	mov	r8, r0
 8002930:	4489      	add	r9, r1
 8002932:	e0d8      	b.n	8002ae6 <__aeabi_dsub+0x426>
 8002934:	4640      	mov	r0, r8
 8002936:	4c3b      	ldr	r4, [pc, #236]	; (8002a24 <__aeabi_dsub+0x364>)
 8002938:	3001      	adds	r0, #1
 800293a:	4220      	tst	r0, r4
 800293c:	d000      	beq.n	8002940 <__aeabi_dsub+0x280>
 800293e:	e0b4      	b.n	8002aaa <__aeabi_dsub+0x3ea>
 8002940:	4640      	mov	r0, r8
 8002942:	2800      	cmp	r0, #0
 8002944:	d000      	beq.n	8002948 <__aeabi_dsub+0x288>
 8002946:	e144      	b.n	8002bd2 <__aeabi_dsub+0x512>
 8002948:	4660      	mov	r0, ip
 800294a:	4318      	orrs	r0, r3
 800294c:	d100      	bne.n	8002950 <__aeabi_dsub+0x290>
 800294e:	e190      	b.n	8002c72 <__aeabi_dsub+0x5b2>
 8002950:	0008      	movs	r0, r1
 8002952:	4338      	orrs	r0, r7
 8002954:	d000      	beq.n	8002958 <__aeabi_dsub+0x298>
 8002956:	e1aa      	b.n	8002cae <__aeabi_dsub+0x5ee>
 8002958:	4661      	mov	r1, ip
 800295a:	08db      	lsrs	r3, r3, #3
 800295c:	0749      	lsls	r1, r1, #29
 800295e:	430b      	orrs	r3, r1
 8002960:	4661      	mov	r1, ip
 8002962:	08cc      	lsrs	r4, r1, #3
 8002964:	e027      	b.n	80029b6 <__aeabi_dsub+0x2f6>
 8002966:	0008      	movs	r0, r1
 8002968:	4338      	orrs	r0, r7
 800296a:	d061      	beq.n	8002a30 <__aeabi_dsub+0x370>
 800296c:	1e50      	subs	r0, r2, #1
 800296e:	2a01      	cmp	r2, #1
 8002970:	d100      	bne.n	8002974 <__aeabi_dsub+0x2b4>
 8002972:	e139      	b.n	8002be8 <__aeabi_dsub+0x528>
 8002974:	42a2      	cmp	r2, r4
 8002976:	d027      	beq.n	80029c8 <__aeabi_dsub+0x308>
 8002978:	0002      	movs	r2, r0
 800297a:	e75d      	b.n	8002838 <__aeabi_dsub+0x178>
 800297c:	0002      	movs	r2, r0
 800297e:	391f      	subs	r1, #31
 8002980:	40ca      	lsrs	r2, r1
 8002982:	0011      	movs	r1, r2
 8002984:	2b20      	cmp	r3, #32
 8002986:	d003      	beq.n	8002990 <__aeabi_dsub+0x2d0>
 8002988:	2240      	movs	r2, #64	; 0x40
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	4098      	lsls	r0, r3
 800298e:	4304      	orrs	r4, r0
 8002990:	1e63      	subs	r3, r4, #1
 8002992:	419c      	sbcs	r4, r3
 8002994:	2300      	movs	r3, #0
 8002996:	4699      	mov	r9, r3
 8002998:	4698      	mov	r8, r3
 800299a:	430c      	orrs	r4, r1
 800299c:	0763      	lsls	r3, r4, #29
 800299e:	d000      	beq.n	80029a2 <__aeabi_dsub+0x2e2>
 80029a0:	e712      	b.n	80027c8 <__aeabi_dsub+0x108>
 80029a2:	464b      	mov	r3, r9
 80029a4:	464a      	mov	r2, r9
 80029a6:	08e4      	lsrs	r4, r4, #3
 80029a8:	075b      	lsls	r3, r3, #29
 80029aa:	4323      	orrs	r3, r4
 80029ac:	08d4      	lsrs	r4, r2, #3
 80029ae:	4642      	mov	r2, r8
 80029b0:	4919      	ldr	r1, [pc, #100]	; (8002a18 <__aeabi_dsub+0x358>)
 80029b2:	428a      	cmp	r2, r1
 80029b4:	d00e      	beq.n	80029d4 <__aeabi_dsub+0x314>
 80029b6:	0324      	lsls	r4, r4, #12
 80029b8:	0552      	lsls	r2, r2, #21
 80029ba:	0b24      	lsrs	r4, r4, #12
 80029bc:	0d52      	lsrs	r2, r2, #21
 80029be:	e722      	b.n	8002806 <__aeabi_dsub+0x146>
 80029c0:	000a      	movs	r2, r1
 80029c2:	2400      	movs	r4, #0
 80029c4:	2300      	movs	r3, #0
 80029c6:	e71e      	b.n	8002806 <__aeabi_dsub+0x146>
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	4662      	mov	r2, ip
 80029cc:	0752      	lsls	r2, r2, #29
 80029ce:	4313      	orrs	r3, r2
 80029d0:	4662      	mov	r2, ip
 80029d2:	08d4      	lsrs	r4, r2, #3
 80029d4:	001a      	movs	r2, r3
 80029d6:	4322      	orrs	r2, r4
 80029d8:	d100      	bne.n	80029dc <__aeabi_dsub+0x31c>
 80029da:	e1fc      	b.n	8002dd6 <__aeabi_dsub+0x716>
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	0312      	lsls	r2, r2, #12
 80029e0:	4314      	orrs	r4, r2
 80029e2:	0324      	lsls	r4, r4, #12
 80029e4:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <__aeabi_dsub+0x358>)
 80029e6:	0b24      	lsrs	r4, r4, #12
 80029e8:	e70d      	b.n	8002806 <__aeabi_dsub+0x146>
 80029ea:	0020      	movs	r0, r4
 80029ec:	f000 fb74 	bl	80030d8 <__clzsi2>
 80029f0:	0001      	movs	r1, r0
 80029f2:	3118      	adds	r1, #24
 80029f4:	291f      	cmp	r1, #31
 80029f6:	dc00      	bgt.n	80029fa <__aeabi_dsub+0x33a>
 80029f8:	e6c4      	b.n	8002784 <__aeabi_dsub+0xc4>
 80029fa:	3808      	subs	r0, #8
 80029fc:	4084      	lsls	r4, r0
 80029fe:	4643      	mov	r3, r8
 8002a00:	0020      	movs	r0, r4
 8002a02:	2400      	movs	r4, #0
 8002a04:	4588      	cmp	r8, r1
 8002a06:	dc00      	bgt.n	8002a0a <__aeabi_dsub+0x34a>
 8002a08:	e6c8      	b.n	800279c <__aeabi_dsub+0xdc>
 8002a0a:	4a04      	ldr	r2, [pc, #16]	; (8002a1c <__aeabi_dsub+0x35c>)
 8002a0c:	1a5b      	subs	r3, r3, r1
 8002a0e:	4010      	ands	r0, r2
 8002a10:	4698      	mov	r8, r3
 8002a12:	4681      	mov	r9, r0
 8002a14:	e6d6      	b.n	80027c4 <__aeabi_dsub+0x104>
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	000007ff 	.word	0x000007ff
 8002a1c:	ff7fffff 	.word	0xff7fffff
 8002a20:	fffff801 	.word	0xfffff801
 8002a24:	000007fe 	.word	0x000007fe
 8002a28:	430f      	orrs	r7, r1
 8002a2a:	1e7a      	subs	r2, r7, #1
 8002a2c:	4197      	sbcs	r7, r2
 8002a2e:	e691      	b.n	8002754 <__aeabi_dsub+0x94>
 8002a30:	4661      	mov	r1, ip
 8002a32:	08db      	lsrs	r3, r3, #3
 8002a34:	0749      	lsls	r1, r1, #29
 8002a36:	430b      	orrs	r3, r1
 8002a38:	4661      	mov	r1, ip
 8002a3a:	08cc      	lsrs	r4, r1, #3
 8002a3c:	e7b8      	b.n	80029b0 <__aeabi_dsub+0x2f0>
 8002a3e:	4640      	mov	r0, r8
 8002a40:	4cd3      	ldr	r4, [pc, #844]	; (8002d90 <__aeabi_dsub+0x6d0>)
 8002a42:	3001      	adds	r0, #1
 8002a44:	4220      	tst	r0, r4
 8002a46:	d000      	beq.n	8002a4a <__aeabi_dsub+0x38a>
 8002a48:	e0a2      	b.n	8002b90 <__aeabi_dsub+0x4d0>
 8002a4a:	4640      	mov	r0, r8
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d000      	beq.n	8002a52 <__aeabi_dsub+0x392>
 8002a50:	e101      	b.n	8002c56 <__aeabi_dsub+0x596>
 8002a52:	4660      	mov	r0, ip
 8002a54:	4318      	orrs	r0, r3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x39a>
 8002a58:	e15e      	b.n	8002d18 <__aeabi_dsub+0x658>
 8002a5a:	0008      	movs	r0, r1
 8002a5c:	4338      	orrs	r0, r7
 8002a5e:	d000      	beq.n	8002a62 <__aeabi_dsub+0x3a2>
 8002a60:	e15f      	b.n	8002d22 <__aeabi_dsub+0x662>
 8002a62:	4661      	mov	r1, ip
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	0749      	lsls	r1, r1, #29
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	4661      	mov	r1, ip
 8002a6c:	08cc      	lsrs	r4, r1, #3
 8002a6e:	e7a2      	b.n	80029b6 <__aeabi_dsub+0x2f6>
 8002a70:	4dc8      	ldr	r5, [pc, #800]	; (8002d94 <__aeabi_dsub+0x6d4>)
 8002a72:	42a8      	cmp	r0, r5
 8002a74:	d100      	bne.n	8002a78 <__aeabi_dsub+0x3b8>
 8002a76:	e0cf      	b.n	8002c18 <__aeabi_dsub+0x558>
 8002a78:	2580      	movs	r5, #128	; 0x80
 8002a7a:	4664      	mov	r4, ip
 8002a7c:	042d      	lsls	r5, r5, #16
 8002a7e:	432c      	orrs	r4, r5
 8002a80:	46a4      	mov	ip, r4
 8002a82:	2a38      	cmp	r2, #56	; 0x38
 8002a84:	dc56      	bgt.n	8002b34 <__aeabi_dsub+0x474>
 8002a86:	2a1f      	cmp	r2, #31
 8002a88:	dd00      	ble.n	8002a8c <__aeabi_dsub+0x3cc>
 8002a8a:	e0d1      	b.n	8002c30 <__aeabi_dsub+0x570>
 8002a8c:	2520      	movs	r5, #32
 8002a8e:	001e      	movs	r6, r3
 8002a90:	1aad      	subs	r5, r5, r2
 8002a92:	4664      	mov	r4, ip
 8002a94:	40ab      	lsls	r3, r5
 8002a96:	40ac      	lsls	r4, r5
 8002a98:	40d6      	lsrs	r6, r2
 8002a9a:	1e5d      	subs	r5, r3, #1
 8002a9c:	41ab      	sbcs	r3, r5
 8002a9e:	4334      	orrs	r4, r6
 8002aa0:	4323      	orrs	r3, r4
 8002aa2:	4664      	mov	r4, ip
 8002aa4:	40d4      	lsrs	r4, r2
 8002aa6:	1b09      	subs	r1, r1, r4
 8002aa8:	e049      	b.n	8002b3e <__aeabi_dsub+0x47e>
 8002aaa:	4660      	mov	r0, ip
 8002aac:	1bdc      	subs	r4, r3, r7
 8002aae:	1a46      	subs	r6, r0, r1
 8002ab0:	42a3      	cmp	r3, r4
 8002ab2:	4180      	sbcs	r0, r0
 8002ab4:	4240      	negs	r0, r0
 8002ab6:	4681      	mov	r9, r0
 8002ab8:	0030      	movs	r0, r6
 8002aba:	464e      	mov	r6, r9
 8002abc:	1b80      	subs	r0, r0, r6
 8002abe:	4681      	mov	r9, r0
 8002ac0:	0200      	lsls	r0, r0, #8
 8002ac2:	d476      	bmi.n	8002bb2 <__aeabi_dsub+0x4f2>
 8002ac4:	464b      	mov	r3, r9
 8002ac6:	4323      	orrs	r3, r4
 8002ac8:	d000      	beq.n	8002acc <__aeabi_dsub+0x40c>
 8002aca:	e652      	b.n	8002772 <__aeabi_dsub+0xb2>
 8002acc:	2400      	movs	r4, #0
 8002ace:	2500      	movs	r5, #0
 8002ad0:	e771      	b.n	80029b6 <__aeabi_dsub+0x2f6>
 8002ad2:	4339      	orrs	r1, r7
 8002ad4:	000c      	movs	r4, r1
 8002ad6:	1e62      	subs	r2, r4, #1
 8002ad8:	4194      	sbcs	r4, r2
 8002ada:	18e4      	adds	r4, r4, r3
 8002adc:	429c      	cmp	r4, r3
 8002ade:	419b      	sbcs	r3, r3
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	4463      	add	r3, ip
 8002ae4:	4699      	mov	r9, r3
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	d400      	bmi.n	8002aee <__aeabi_dsub+0x42e>
 8002aec:	e756      	b.n	800299c <__aeabi_dsub+0x2dc>
 8002aee:	2301      	movs	r3, #1
 8002af0:	469c      	mov	ip, r3
 8002af2:	4ba8      	ldr	r3, [pc, #672]	; (8002d94 <__aeabi_dsub+0x6d4>)
 8002af4:	44e0      	add	r8, ip
 8002af6:	4598      	cmp	r8, r3
 8002af8:	d038      	beq.n	8002b6c <__aeabi_dsub+0x4ac>
 8002afa:	464b      	mov	r3, r9
 8002afc:	48a6      	ldr	r0, [pc, #664]	; (8002d98 <__aeabi_dsub+0x6d8>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	4003      	ands	r3, r0
 8002b02:	0018      	movs	r0, r3
 8002b04:	0863      	lsrs	r3, r4, #1
 8002b06:	4014      	ands	r4, r2
 8002b08:	431c      	orrs	r4, r3
 8002b0a:	07c3      	lsls	r3, r0, #31
 8002b0c:	431c      	orrs	r4, r3
 8002b0e:	0843      	lsrs	r3, r0, #1
 8002b10:	4699      	mov	r9, r3
 8002b12:	e657      	b.n	80027c4 <__aeabi_dsub+0x104>
 8002b14:	0010      	movs	r0, r2
 8002b16:	000e      	movs	r6, r1
 8002b18:	3820      	subs	r0, #32
 8002b1a:	40c6      	lsrs	r6, r0
 8002b1c:	2a20      	cmp	r2, #32
 8002b1e:	d004      	beq.n	8002b2a <__aeabi_dsub+0x46a>
 8002b20:	2040      	movs	r0, #64	; 0x40
 8002b22:	1a82      	subs	r2, r0, r2
 8002b24:	4091      	lsls	r1, r2
 8002b26:	430f      	orrs	r7, r1
 8002b28:	46b9      	mov	r9, r7
 8002b2a:	464f      	mov	r7, r9
 8002b2c:	1e7a      	subs	r2, r7, #1
 8002b2e:	4197      	sbcs	r7, r2
 8002b30:	4337      	orrs	r7, r6
 8002b32:	e60f      	b.n	8002754 <__aeabi_dsub+0x94>
 8002b34:	4662      	mov	r2, ip
 8002b36:	431a      	orrs	r2, r3
 8002b38:	0013      	movs	r3, r2
 8002b3a:	1e5a      	subs	r2, r3, #1
 8002b3c:	4193      	sbcs	r3, r2
 8002b3e:	1afc      	subs	r4, r7, r3
 8002b40:	42a7      	cmp	r7, r4
 8002b42:	41bf      	sbcs	r7, r7
 8002b44:	427f      	negs	r7, r7
 8002b46:	1bcb      	subs	r3, r1, r7
 8002b48:	4699      	mov	r9, r3
 8002b4a:	465d      	mov	r5, fp
 8002b4c:	4680      	mov	r8, r0
 8002b4e:	e608      	b.n	8002762 <__aeabi_dsub+0xa2>
 8002b50:	4666      	mov	r6, ip
 8002b52:	431e      	orrs	r6, r3
 8002b54:	d100      	bne.n	8002b58 <__aeabi_dsub+0x498>
 8002b56:	e0be      	b.n	8002cd6 <__aeabi_dsub+0x616>
 8002b58:	1e56      	subs	r6, r2, #1
 8002b5a:	2a01      	cmp	r2, #1
 8002b5c:	d100      	bne.n	8002b60 <__aeabi_dsub+0x4a0>
 8002b5e:	e109      	b.n	8002d74 <__aeabi_dsub+0x6b4>
 8002b60:	4c8c      	ldr	r4, [pc, #560]	; (8002d94 <__aeabi_dsub+0x6d4>)
 8002b62:	42a2      	cmp	r2, r4
 8002b64:	d100      	bne.n	8002b68 <__aeabi_dsub+0x4a8>
 8002b66:	e119      	b.n	8002d9c <__aeabi_dsub+0x6dc>
 8002b68:	0032      	movs	r2, r6
 8002b6a:	e6c1      	b.n	80028f0 <__aeabi_dsub+0x230>
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	2400      	movs	r4, #0
 8002b70:	2300      	movs	r3, #0
 8002b72:	e648      	b.n	8002806 <__aeabi_dsub+0x146>
 8002b74:	2020      	movs	r0, #32
 8002b76:	000c      	movs	r4, r1
 8002b78:	1a80      	subs	r0, r0, r2
 8002b7a:	003e      	movs	r6, r7
 8002b7c:	4087      	lsls	r7, r0
 8002b7e:	4084      	lsls	r4, r0
 8002b80:	40d6      	lsrs	r6, r2
 8002b82:	1e78      	subs	r0, r7, #1
 8002b84:	4187      	sbcs	r7, r0
 8002b86:	40d1      	lsrs	r1, r2
 8002b88:	4334      	orrs	r4, r6
 8002b8a:	433c      	orrs	r4, r7
 8002b8c:	448c      	add	ip, r1
 8002b8e:	e7a4      	b.n	8002ada <__aeabi_dsub+0x41a>
 8002b90:	4a80      	ldr	r2, [pc, #512]	; (8002d94 <__aeabi_dsub+0x6d4>)
 8002b92:	4290      	cmp	r0, r2
 8002b94:	d100      	bne.n	8002b98 <__aeabi_dsub+0x4d8>
 8002b96:	e0e9      	b.n	8002d6c <__aeabi_dsub+0x6ac>
 8002b98:	19df      	adds	r7, r3, r7
 8002b9a:	429f      	cmp	r7, r3
 8002b9c:	419b      	sbcs	r3, r3
 8002b9e:	4461      	add	r1, ip
 8002ba0:	425b      	negs	r3, r3
 8002ba2:	18c9      	adds	r1, r1, r3
 8002ba4:	07cc      	lsls	r4, r1, #31
 8002ba6:	087f      	lsrs	r7, r7, #1
 8002ba8:	084b      	lsrs	r3, r1, #1
 8002baa:	4699      	mov	r9, r3
 8002bac:	4680      	mov	r8, r0
 8002bae:	433c      	orrs	r4, r7
 8002bb0:	e6f4      	b.n	800299c <__aeabi_dsub+0x2dc>
 8002bb2:	1afc      	subs	r4, r7, r3
 8002bb4:	42a7      	cmp	r7, r4
 8002bb6:	41bf      	sbcs	r7, r7
 8002bb8:	4663      	mov	r3, ip
 8002bba:	427f      	negs	r7, r7
 8002bbc:	1ac9      	subs	r1, r1, r3
 8002bbe:	1bcb      	subs	r3, r1, r7
 8002bc0:	4699      	mov	r9, r3
 8002bc2:	465d      	mov	r5, fp
 8002bc4:	e5d5      	b.n	8002772 <__aeabi_dsub+0xb2>
 8002bc6:	08ff      	lsrs	r7, r7, #3
 8002bc8:	074b      	lsls	r3, r1, #29
 8002bca:	465d      	mov	r5, fp
 8002bcc:	433b      	orrs	r3, r7
 8002bce:	08cc      	lsrs	r4, r1, #3
 8002bd0:	e6ee      	b.n	80029b0 <__aeabi_dsub+0x2f0>
 8002bd2:	4662      	mov	r2, ip
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	d000      	beq.n	8002bda <__aeabi_dsub+0x51a>
 8002bd8:	e082      	b.n	8002ce0 <__aeabi_dsub+0x620>
 8002bda:	000b      	movs	r3, r1
 8002bdc:	433b      	orrs	r3, r7
 8002bde:	d11b      	bne.n	8002c18 <__aeabi_dsub+0x558>
 8002be0:	2480      	movs	r4, #128	; 0x80
 8002be2:	2500      	movs	r5, #0
 8002be4:	0324      	lsls	r4, r4, #12
 8002be6:	e6f9      	b.n	80029dc <__aeabi_dsub+0x31c>
 8002be8:	19dc      	adds	r4, r3, r7
 8002bea:	429c      	cmp	r4, r3
 8002bec:	419b      	sbcs	r3, r3
 8002bee:	4461      	add	r1, ip
 8002bf0:	4689      	mov	r9, r1
 8002bf2:	425b      	negs	r3, r3
 8002bf4:	4499      	add	r9, r3
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	d444      	bmi.n	8002c86 <__aeabi_dsub+0x5c6>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	4698      	mov	r8, r3
 8002c00:	e6cc      	b.n	800299c <__aeabi_dsub+0x2dc>
 8002c02:	1bdc      	subs	r4, r3, r7
 8002c04:	4662      	mov	r2, ip
 8002c06:	42a3      	cmp	r3, r4
 8002c08:	419b      	sbcs	r3, r3
 8002c0a:	1a51      	subs	r1, r2, r1
 8002c0c:	425b      	negs	r3, r3
 8002c0e:	1acb      	subs	r3, r1, r3
 8002c10:	4699      	mov	r9, r3
 8002c12:	2301      	movs	r3, #1
 8002c14:	4698      	mov	r8, r3
 8002c16:	e5a4      	b.n	8002762 <__aeabi_dsub+0xa2>
 8002c18:	08ff      	lsrs	r7, r7, #3
 8002c1a:	074b      	lsls	r3, r1, #29
 8002c1c:	465d      	mov	r5, fp
 8002c1e:	433b      	orrs	r3, r7
 8002c20:	08cc      	lsrs	r4, r1, #3
 8002c22:	e6d7      	b.n	80029d4 <__aeabi_dsub+0x314>
 8002c24:	4662      	mov	r2, ip
 8002c26:	431a      	orrs	r2, r3
 8002c28:	0014      	movs	r4, r2
 8002c2a:	1e63      	subs	r3, r4, #1
 8002c2c:	419c      	sbcs	r4, r3
 8002c2e:	e679      	b.n	8002924 <__aeabi_dsub+0x264>
 8002c30:	0015      	movs	r5, r2
 8002c32:	4664      	mov	r4, ip
 8002c34:	3d20      	subs	r5, #32
 8002c36:	40ec      	lsrs	r4, r5
 8002c38:	46a0      	mov	r8, r4
 8002c3a:	2a20      	cmp	r2, #32
 8002c3c:	d005      	beq.n	8002c4a <__aeabi_dsub+0x58a>
 8002c3e:	2540      	movs	r5, #64	; 0x40
 8002c40:	4664      	mov	r4, ip
 8002c42:	1aaa      	subs	r2, r5, r2
 8002c44:	4094      	lsls	r4, r2
 8002c46:	4323      	orrs	r3, r4
 8002c48:	469a      	mov	sl, r3
 8002c4a:	4654      	mov	r4, sl
 8002c4c:	1e63      	subs	r3, r4, #1
 8002c4e:	419c      	sbcs	r4, r3
 8002c50:	4643      	mov	r3, r8
 8002c52:	4323      	orrs	r3, r4
 8002c54:	e773      	b.n	8002b3e <__aeabi_dsub+0x47e>
 8002c56:	4662      	mov	r2, ip
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	d023      	beq.n	8002ca4 <__aeabi_dsub+0x5e4>
 8002c5c:	000a      	movs	r2, r1
 8002c5e:	433a      	orrs	r2, r7
 8002c60:	d000      	beq.n	8002c64 <__aeabi_dsub+0x5a4>
 8002c62:	e0a0      	b.n	8002da6 <__aeabi_dsub+0x6e6>
 8002c64:	4662      	mov	r2, ip
 8002c66:	08db      	lsrs	r3, r3, #3
 8002c68:	0752      	lsls	r2, r2, #29
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	4662      	mov	r2, ip
 8002c6e:	08d4      	lsrs	r4, r2, #3
 8002c70:	e6b0      	b.n	80029d4 <__aeabi_dsub+0x314>
 8002c72:	000b      	movs	r3, r1
 8002c74:	433b      	orrs	r3, r7
 8002c76:	d100      	bne.n	8002c7a <__aeabi_dsub+0x5ba>
 8002c78:	e728      	b.n	8002acc <__aeabi_dsub+0x40c>
 8002c7a:	08ff      	lsrs	r7, r7, #3
 8002c7c:	074b      	lsls	r3, r1, #29
 8002c7e:	465d      	mov	r5, fp
 8002c80:	433b      	orrs	r3, r7
 8002c82:	08cc      	lsrs	r4, r1, #3
 8002c84:	e697      	b.n	80029b6 <__aeabi_dsub+0x2f6>
 8002c86:	2302      	movs	r3, #2
 8002c88:	4698      	mov	r8, r3
 8002c8a:	e736      	b.n	8002afa <__aeabi_dsub+0x43a>
 8002c8c:	1afc      	subs	r4, r7, r3
 8002c8e:	42a7      	cmp	r7, r4
 8002c90:	41bf      	sbcs	r7, r7
 8002c92:	4663      	mov	r3, ip
 8002c94:	427f      	negs	r7, r7
 8002c96:	1ac9      	subs	r1, r1, r3
 8002c98:	1bcb      	subs	r3, r1, r7
 8002c9a:	4699      	mov	r9, r3
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	465d      	mov	r5, fp
 8002ca0:	4698      	mov	r8, r3
 8002ca2:	e55e      	b.n	8002762 <__aeabi_dsub+0xa2>
 8002ca4:	074b      	lsls	r3, r1, #29
 8002ca6:	08ff      	lsrs	r7, r7, #3
 8002ca8:	433b      	orrs	r3, r7
 8002caa:	08cc      	lsrs	r4, r1, #3
 8002cac:	e692      	b.n	80029d4 <__aeabi_dsub+0x314>
 8002cae:	1bdc      	subs	r4, r3, r7
 8002cb0:	4660      	mov	r0, ip
 8002cb2:	42a3      	cmp	r3, r4
 8002cb4:	41b6      	sbcs	r6, r6
 8002cb6:	1a40      	subs	r0, r0, r1
 8002cb8:	4276      	negs	r6, r6
 8002cba:	1b80      	subs	r0, r0, r6
 8002cbc:	4681      	mov	r9, r0
 8002cbe:	0200      	lsls	r0, r0, #8
 8002cc0:	d560      	bpl.n	8002d84 <__aeabi_dsub+0x6c4>
 8002cc2:	1afc      	subs	r4, r7, r3
 8002cc4:	42a7      	cmp	r7, r4
 8002cc6:	41bf      	sbcs	r7, r7
 8002cc8:	4663      	mov	r3, ip
 8002cca:	427f      	negs	r7, r7
 8002ccc:	1ac9      	subs	r1, r1, r3
 8002cce:	1bcb      	subs	r3, r1, r7
 8002cd0:	4699      	mov	r9, r3
 8002cd2:	465d      	mov	r5, fp
 8002cd4:	e576      	b.n	80027c4 <__aeabi_dsub+0x104>
 8002cd6:	08ff      	lsrs	r7, r7, #3
 8002cd8:	074b      	lsls	r3, r1, #29
 8002cda:	433b      	orrs	r3, r7
 8002cdc:	08cc      	lsrs	r4, r1, #3
 8002cde:	e667      	b.n	80029b0 <__aeabi_dsub+0x2f0>
 8002ce0:	000a      	movs	r2, r1
 8002ce2:	08db      	lsrs	r3, r3, #3
 8002ce4:	433a      	orrs	r2, r7
 8002ce6:	d100      	bne.n	8002cea <__aeabi_dsub+0x62a>
 8002ce8:	e66f      	b.n	80029ca <__aeabi_dsub+0x30a>
 8002cea:	4662      	mov	r2, ip
 8002cec:	0752      	lsls	r2, r2, #29
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	4662      	mov	r2, ip
 8002cf2:	08d4      	lsrs	r4, r2, #3
 8002cf4:	2280      	movs	r2, #128	; 0x80
 8002cf6:	0312      	lsls	r2, r2, #12
 8002cf8:	4214      	tst	r4, r2
 8002cfa:	d007      	beq.n	8002d0c <__aeabi_dsub+0x64c>
 8002cfc:	08c8      	lsrs	r0, r1, #3
 8002cfe:	4210      	tst	r0, r2
 8002d00:	d104      	bne.n	8002d0c <__aeabi_dsub+0x64c>
 8002d02:	465d      	mov	r5, fp
 8002d04:	0004      	movs	r4, r0
 8002d06:	08fb      	lsrs	r3, r7, #3
 8002d08:	0749      	lsls	r1, r1, #29
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	0f5a      	lsrs	r2, r3, #29
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	08db      	lsrs	r3, r3, #3
 8002d12:	0752      	lsls	r2, r2, #29
 8002d14:	4313      	orrs	r3, r2
 8002d16:	e65d      	b.n	80029d4 <__aeabi_dsub+0x314>
 8002d18:	074b      	lsls	r3, r1, #29
 8002d1a:	08ff      	lsrs	r7, r7, #3
 8002d1c:	433b      	orrs	r3, r7
 8002d1e:	08cc      	lsrs	r4, r1, #3
 8002d20:	e649      	b.n	80029b6 <__aeabi_dsub+0x2f6>
 8002d22:	19dc      	adds	r4, r3, r7
 8002d24:	429c      	cmp	r4, r3
 8002d26:	419b      	sbcs	r3, r3
 8002d28:	4461      	add	r1, ip
 8002d2a:	4689      	mov	r9, r1
 8002d2c:	425b      	negs	r3, r3
 8002d2e:	4499      	add	r9, r3
 8002d30:	464b      	mov	r3, r9
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	d400      	bmi.n	8002d38 <__aeabi_dsub+0x678>
 8002d36:	e631      	b.n	800299c <__aeabi_dsub+0x2dc>
 8002d38:	464a      	mov	r2, r9
 8002d3a:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <__aeabi_dsub+0x6d8>)
 8002d3c:	401a      	ands	r2, r3
 8002d3e:	2301      	movs	r3, #1
 8002d40:	4691      	mov	r9, r2
 8002d42:	4698      	mov	r8, r3
 8002d44:	e62a      	b.n	800299c <__aeabi_dsub+0x2dc>
 8002d46:	0016      	movs	r6, r2
 8002d48:	4664      	mov	r4, ip
 8002d4a:	3e20      	subs	r6, #32
 8002d4c:	40f4      	lsrs	r4, r6
 8002d4e:	46a0      	mov	r8, r4
 8002d50:	2a20      	cmp	r2, #32
 8002d52:	d005      	beq.n	8002d60 <__aeabi_dsub+0x6a0>
 8002d54:	2640      	movs	r6, #64	; 0x40
 8002d56:	4664      	mov	r4, ip
 8002d58:	1ab2      	subs	r2, r6, r2
 8002d5a:	4094      	lsls	r4, r2
 8002d5c:	4323      	orrs	r3, r4
 8002d5e:	469a      	mov	sl, r3
 8002d60:	4654      	mov	r4, sl
 8002d62:	1e63      	subs	r3, r4, #1
 8002d64:	419c      	sbcs	r4, r3
 8002d66:	4643      	mov	r3, r8
 8002d68:	431c      	orrs	r4, r3
 8002d6a:	e5db      	b.n	8002924 <__aeabi_dsub+0x264>
 8002d6c:	0002      	movs	r2, r0
 8002d6e:	2400      	movs	r4, #0
 8002d70:	2300      	movs	r3, #0
 8002d72:	e548      	b.n	8002806 <__aeabi_dsub+0x146>
 8002d74:	19dc      	adds	r4, r3, r7
 8002d76:	42bc      	cmp	r4, r7
 8002d78:	41bf      	sbcs	r7, r7
 8002d7a:	4461      	add	r1, ip
 8002d7c:	4689      	mov	r9, r1
 8002d7e:	427f      	negs	r7, r7
 8002d80:	44b9      	add	r9, r7
 8002d82:	e738      	b.n	8002bf6 <__aeabi_dsub+0x536>
 8002d84:	464b      	mov	r3, r9
 8002d86:	4323      	orrs	r3, r4
 8002d88:	d100      	bne.n	8002d8c <__aeabi_dsub+0x6cc>
 8002d8a:	e69f      	b.n	8002acc <__aeabi_dsub+0x40c>
 8002d8c:	e606      	b.n	800299c <__aeabi_dsub+0x2dc>
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	000007fe 	.word	0x000007fe
 8002d94:	000007ff 	.word	0x000007ff
 8002d98:	ff7fffff 	.word	0xff7fffff
 8002d9c:	08ff      	lsrs	r7, r7, #3
 8002d9e:	074b      	lsls	r3, r1, #29
 8002da0:	433b      	orrs	r3, r7
 8002da2:	08cc      	lsrs	r4, r1, #3
 8002da4:	e616      	b.n	80029d4 <__aeabi_dsub+0x314>
 8002da6:	4662      	mov	r2, ip
 8002da8:	08db      	lsrs	r3, r3, #3
 8002daa:	0752      	lsls	r2, r2, #29
 8002dac:	4313      	orrs	r3, r2
 8002dae:	4662      	mov	r2, ip
 8002db0:	08d4      	lsrs	r4, r2, #3
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	0312      	lsls	r2, r2, #12
 8002db6:	4214      	tst	r4, r2
 8002db8:	d007      	beq.n	8002dca <__aeabi_dsub+0x70a>
 8002dba:	08c8      	lsrs	r0, r1, #3
 8002dbc:	4210      	tst	r0, r2
 8002dbe:	d104      	bne.n	8002dca <__aeabi_dsub+0x70a>
 8002dc0:	465d      	mov	r5, fp
 8002dc2:	0004      	movs	r4, r0
 8002dc4:	08fb      	lsrs	r3, r7, #3
 8002dc6:	0749      	lsls	r1, r1, #29
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	0f5a      	lsrs	r2, r3, #29
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	0752      	lsls	r2, r2, #29
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	e5fe      	b.n	80029d4 <__aeabi_dsub+0x314>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	4a01      	ldr	r2, [pc, #4]	; (8002de0 <__aeabi_dsub+0x720>)
 8002dda:	001c      	movs	r4, r3
 8002ddc:	e513      	b.n	8002806 <__aeabi_dsub+0x146>
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	000007ff 	.word	0x000007ff

08002de4 <__aeabi_dcmpun>:
 8002de4:	b570      	push	{r4, r5, r6, lr}
 8002de6:	0005      	movs	r5, r0
 8002de8:	480c      	ldr	r0, [pc, #48]	; (8002e1c <__aeabi_dcmpun+0x38>)
 8002dea:	031c      	lsls	r4, r3, #12
 8002dec:	0016      	movs	r6, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	030a      	lsls	r2, r1, #12
 8002df2:	0049      	lsls	r1, r1, #1
 8002df4:	0b12      	lsrs	r2, r2, #12
 8002df6:	0d49      	lsrs	r1, r1, #21
 8002df8:	0b24      	lsrs	r4, r4, #12
 8002dfa:	0d5b      	lsrs	r3, r3, #21
 8002dfc:	4281      	cmp	r1, r0
 8002dfe:	d008      	beq.n	8002e12 <__aeabi_dcmpun+0x2e>
 8002e00:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <__aeabi_dcmpun+0x38>)
 8002e02:	2000      	movs	r0, #0
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d103      	bne.n	8002e10 <__aeabi_dcmpun+0x2c>
 8002e08:	0020      	movs	r0, r4
 8002e0a:	4330      	orrs	r0, r6
 8002e0c:	1e43      	subs	r3, r0, #1
 8002e0e:	4198      	sbcs	r0, r3
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
 8002e12:	2001      	movs	r0, #1
 8002e14:	432a      	orrs	r2, r5
 8002e16:	d1fb      	bne.n	8002e10 <__aeabi_dcmpun+0x2c>
 8002e18:	e7f2      	b.n	8002e00 <__aeabi_dcmpun+0x1c>
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff

08002e20 <__aeabi_d2iz>:
 8002e20:	000a      	movs	r2, r1
 8002e22:	b530      	push	{r4, r5, lr}
 8002e24:	4c13      	ldr	r4, [pc, #76]	; (8002e74 <__aeabi_d2iz+0x54>)
 8002e26:	0053      	lsls	r3, r2, #1
 8002e28:	0309      	lsls	r1, r1, #12
 8002e2a:	0005      	movs	r5, r0
 8002e2c:	0b09      	lsrs	r1, r1, #12
 8002e2e:	2000      	movs	r0, #0
 8002e30:	0d5b      	lsrs	r3, r3, #21
 8002e32:	0fd2      	lsrs	r2, r2, #31
 8002e34:	42a3      	cmp	r3, r4
 8002e36:	dd04      	ble.n	8002e42 <__aeabi_d2iz+0x22>
 8002e38:	480f      	ldr	r0, [pc, #60]	; (8002e78 <__aeabi_d2iz+0x58>)
 8002e3a:	4283      	cmp	r3, r0
 8002e3c:	dd02      	ble.n	8002e44 <__aeabi_d2iz+0x24>
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <__aeabi_d2iz+0x5c>)
 8002e40:	18d0      	adds	r0, r2, r3
 8002e42:	bd30      	pop	{r4, r5, pc}
 8002e44:	2080      	movs	r0, #128	; 0x80
 8002e46:	0340      	lsls	r0, r0, #13
 8002e48:	4301      	orrs	r1, r0
 8002e4a:	480d      	ldr	r0, [pc, #52]	; (8002e80 <__aeabi_d2iz+0x60>)
 8002e4c:	1ac0      	subs	r0, r0, r3
 8002e4e:	281f      	cmp	r0, #31
 8002e50:	dd08      	ble.n	8002e64 <__aeabi_d2iz+0x44>
 8002e52:	480c      	ldr	r0, [pc, #48]	; (8002e84 <__aeabi_d2iz+0x64>)
 8002e54:	1ac3      	subs	r3, r0, r3
 8002e56:	40d9      	lsrs	r1, r3
 8002e58:	000b      	movs	r3, r1
 8002e5a:	4258      	negs	r0, r3
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	d1f0      	bne.n	8002e42 <__aeabi_d2iz+0x22>
 8002e60:	0018      	movs	r0, r3
 8002e62:	e7ee      	b.n	8002e42 <__aeabi_d2iz+0x22>
 8002e64:	4c08      	ldr	r4, [pc, #32]	; (8002e88 <__aeabi_d2iz+0x68>)
 8002e66:	40c5      	lsrs	r5, r0
 8002e68:	46a4      	mov	ip, r4
 8002e6a:	4463      	add	r3, ip
 8002e6c:	4099      	lsls	r1, r3
 8002e6e:	000b      	movs	r3, r1
 8002e70:	432b      	orrs	r3, r5
 8002e72:	e7f2      	b.n	8002e5a <__aeabi_d2iz+0x3a>
 8002e74:	000003fe 	.word	0x000003fe
 8002e78:	0000041d 	.word	0x0000041d
 8002e7c:	7fffffff 	.word	0x7fffffff
 8002e80:	00000433 	.word	0x00000433
 8002e84:	00000413 	.word	0x00000413
 8002e88:	fffffbed 	.word	0xfffffbed

08002e8c <__aeabi_i2d>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d016      	beq.n	8002ec0 <__aeabi_i2d+0x34>
 8002e92:	17c3      	asrs	r3, r0, #31
 8002e94:	18c5      	adds	r5, r0, r3
 8002e96:	405d      	eors	r5, r3
 8002e98:	0fc4      	lsrs	r4, r0, #31
 8002e9a:	0028      	movs	r0, r5
 8002e9c:	f000 f91c 	bl	80030d8 <__clzsi2>
 8002ea0:	4a11      	ldr	r2, [pc, #68]	; (8002ee8 <__aeabi_i2d+0x5c>)
 8002ea2:	1a12      	subs	r2, r2, r0
 8002ea4:	280a      	cmp	r0, #10
 8002ea6:	dc16      	bgt.n	8002ed6 <__aeabi_i2d+0x4a>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	002e      	movs	r6, r5
 8002eac:	3315      	adds	r3, #21
 8002eae:	409e      	lsls	r6, r3
 8002eb0:	230b      	movs	r3, #11
 8002eb2:	1a18      	subs	r0, r3, r0
 8002eb4:	40c5      	lsrs	r5, r0
 8002eb6:	0552      	lsls	r2, r2, #21
 8002eb8:	032d      	lsls	r5, r5, #12
 8002eba:	0b2d      	lsrs	r5, r5, #12
 8002ebc:	0d53      	lsrs	r3, r2, #21
 8002ebe:	e003      	b.n	8002ec8 <__aeabi_i2d+0x3c>
 8002ec0:	2400      	movs	r4, #0
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2500      	movs	r5, #0
 8002ec6:	2600      	movs	r6, #0
 8002ec8:	051b      	lsls	r3, r3, #20
 8002eca:	432b      	orrs	r3, r5
 8002ecc:	07e4      	lsls	r4, r4, #31
 8002ece:	4323      	orrs	r3, r4
 8002ed0:	0030      	movs	r0, r6
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	bd70      	pop	{r4, r5, r6, pc}
 8002ed6:	380b      	subs	r0, #11
 8002ed8:	4085      	lsls	r5, r0
 8002eda:	0552      	lsls	r2, r2, #21
 8002edc:	032d      	lsls	r5, r5, #12
 8002ede:	2600      	movs	r6, #0
 8002ee0:	0b2d      	lsrs	r5, r5, #12
 8002ee2:	0d53      	lsrs	r3, r2, #21
 8002ee4:	e7f0      	b.n	8002ec8 <__aeabi_i2d+0x3c>
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	0000041e 	.word	0x0000041e

08002eec <__aeabi_ui2d>:
 8002eec:	b510      	push	{r4, lr}
 8002eee:	1e04      	subs	r4, r0, #0
 8002ef0:	d010      	beq.n	8002f14 <__aeabi_ui2d+0x28>
 8002ef2:	f000 f8f1 	bl	80030d8 <__clzsi2>
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <__aeabi_ui2d+0x48>)
 8002ef8:	1a1b      	subs	r3, r3, r0
 8002efa:	280a      	cmp	r0, #10
 8002efc:	dc11      	bgt.n	8002f22 <__aeabi_ui2d+0x36>
 8002efe:	220b      	movs	r2, #11
 8002f00:	0021      	movs	r1, r4
 8002f02:	1a12      	subs	r2, r2, r0
 8002f04:	40d1      	lsrs	r1, r2
 8002f06:	3015      	adds	r0, #21
 8002f08:	030a      	lsls	r2, r1, #12
 8002f0a:	055b      	lsls	r3, r3, #21
 8002f0c:	4084      	lsls	r4, r0
 8002f0e:	0b12      	lsrs	r2, r2, #12
 8002f10:	0d5b      	lsrs	r3, r3, #21
 8002f12:	e001      	b.n	8002f18 <__aeabi_ui2d+0x2c>
 8002f14:	2300      	movs	r3, #0
 8002f16:	2200      	movs	r2, #0
 8002f18:	051b      	lsls	r3, r3, #20
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	0020      	movs	r0, r4
 8002f1e:	0019      	movs	r1, r3
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	0022      	movs	r2, r4
 8002f24:	380b      	subs	r0, #11
 8002f26:	4082      	lsls	r2, r0
 8002f28:	055b      	lsls	r3, r3, #21
 8002f2a:	0312      	lsls	r2, r2, #12
 8002f2c:	2400      	movs	r4, #0
 8002f2e:	0b12      	lsrs	r2, r2, #12
 8002f30:	0d5b      	lsrs	r3, r3, #21
 8002f32:	e7f1      	b.n	8002f18 <__aeabi_ui2d+0x2c>
 8002f34:	0000041e 	.word	0x0000041e

08002f38 <__aeabi_f2d>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	0043      	lsls	r3, r0, #1
 8002f3c:	0246      	lsls	r6, r0, #9
 8002f3e:	0fc4      	lsrs	r4, r0, #31
 8002f40:	20fe      	movs	r0, #254	; 0xfe
 8002f42:	0e1b      	lsrs	r3, r3, #24
 8002f44:	1c59      	adds	r1, r3, #1
 8002f46:	0a75      	lsrs	r5, r6, #9
 8002f48:	4208      	tst	r0, r1
 8002f4a:	d00c      	beq.n	8002f66 <__aeabi_f2d+0x2e>
 8002f4c:	22e0      	movs	r2, #224	; 0xe0
 8002f4e:	0092      	lsls	r2, r2, #2
 8002f50:	4694      	mov	ip, r2
 8002f52:	076d      	lsls	r5, r5, #29
 8002f54:	0b36      	lsrs	r6, r6, #12
 8002f56:	4463      	add	r3, ip
 8002f58:	051b      	lsls	r3, r3, #20
 8002f5a:	4333      	orrs	r3, r6
 8002f5c:	07e4      	lsls	r4, r4, #31
 8002f5e:	4323      	orrs	r3, r4
 8002f60:	0028      	movs	r0, r5
 8002f62:	0019      	movs	r1, r3
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d114      	bne.n	8002f94 <__aeabi_f2d+0x5c>
 8002f6a:	2d00      	cmp	r5, #0
 8002f6c:	d01b      	beq.n	8002fa6 <__aeabi_f2d+0x6e>
 8002f6e:	0028      	movs	r0, r5
 8002f70:	f000 f8b2 	bl	80030d8 <__clzsi2>
 8002f74:	280a      	cmp	r0, #10
 8002f76:	dc1c      	bgt.n	8002fb2 <__aeabi_f2d+0x7a>
 8002f78:	230b      	movs	r3, #11
 8002f7a:	002e      	movs	r6, r5
 8002f7c:	1a1b      	subs	r3, r3, r0
 8002f7e:	40de      	lsrs	r6, r3
 8002f80:	0003      	movs	r3, r0
 8002f82:	3315      	adds	r3, #21
 8002f84:	409d      	lsls	r5, r3
 8002f86:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <__aeabi_f2d+0x88>)
 8002f88:	0336      	lsls	r6, r6, #12
 8002f8a:	1a12      	subs	r2, r2, r0
 8002f8c:	0552      	lsls	r2, r2, #21
 8002f8e:	0b36      	lsrs	r6, r6, #12
 8002f90:	0d53      	lsrs	r3, r2, #21
 8002f92:	e7e1      	b.n	8002f58 <__aeabi_f2d+0x20>
 8002f94:	2d00      	cmp	r5, #0
 8002f96:	d009      	beq.n	8002fac <__aeabi_f2d+0x74>
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	0b36      	lsrs	r6, r6, #12
 8002f9c:	0312      	lsls	r2, r2, #12
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <__aeabi_f2d+0x8c>)
 8002fa0:	076d      	lsls	r5, r5, #29
 8002fa2:	4316      	orrs	r6, r2
 8002fa4:	e7d8      	b.n	8002f58 <__aeabi_f2d+0x20>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2600      	movs	r6, #0
 8002faa:	e7d5      	b.n	8002f58 <__aeabi_f2d+0x20>
 8002fac:	2600      	movs	r6, #0
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <__aeabi_f2d+0x8c>)
 8002fb0:	e7d2      	b.n	8002f58 <__aeabi_f2d+0x20>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	3b0b      	subs	r3, #11
 8002fb6:	409d      	lsls	r5, r3
 8002fb8:	002e      	movs	r6, r5
 8002fba:	2500      	movs	r5, #0
 8002fbc:	e7e3      	b.n	8002f86 <__aeabi_f2d+0x4e>
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	00000389 	.word	0x00000389
 8002fc4:	000007ff 	.word	0x000007ff

08002fc8 <__aeabi_d2f>:
 8002fc8:	0002      	movs	r2, r0
 8002fca:	004b      	lsls	r3, r1, #1
 8002fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fce:	0d5b      	lsrs	r3, r3, #21
 8002fd0:	030c      	lsls	r4, r1, #12
 8002fd2:	4e3d      	ldr	r6, [pc, #244]	; (80030c8 <__aeabi_d2f+0x100>)
 8002fd4:	0a64      	lsrs	r4, r4, #9
 8002fd6:	0f40      	lsrs	r0, r0, #29
 8002fd8:	1c5f      	adds	r7, r3, #1
 8002fda:	0fc9      	lsrs	r1, r1, #31
 8002fdc:	4304      	orrs	r4, r0
 8002fde:	00d5      	lsls	r5, r2, #3
 8002fe0:	4237      	tst	r7, r6
 8002fe2:	d00a      	beq.n	8002ffa <__aeabi_d2f+0x32>
 8002fe4:	4839      	ldr	r0, [pc, #228]	; (80030cc <__aeabi_d2f+0x104>)
 8002fe6:	181e      	adds	r6, r3, r0
 8002fe8:	2efe      	cmp	r6, #254	; 0xfe
 8002fea:	dd16      	ble.n	800301a <__aeabi_d2f+0x52>
 8002fec:	20ff      	movs	r0, #255	; 0xff
 8002fee:	2400      	movs	r4, #0
 8002ff0:	05c0      	lsls	r0, r0, #23
 8002ff2:	4320      	orrs	r0, r4
 8002ff4:	07c9      	lsls	r1, r1, #31
 8002ff6:	4308      	orrs	r0, r1
 8002ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <__aeabi_d2f+0x44>
 8002ffe:	432c      	orrs	r4, r5
 8003000:	d026      	beq.n	8003050 <__aeabi_d2f+0x88>
 8003002:	2205      	movs	r2, #5
 8003004:	0192      	lsls	r2, r2, #6
 8003006:	0a54      	lsrs	r4, r2, #9
 8003008:	b2d8      	uxtb	r0, r3
 800300a:	e7f1      	b.n	8002ff0 <__aeabi_d2f+0x28>
 800300c:	4325      	orrs	r5, r4
 800300e:	d0ed      	beq.n	8002fec <__aeabi_d2f+0x24>
 8003010:	2080      	movs	r0, #128	; 0x80
 8003012:	03c0      	lsls	r0, r0, #15
 8003014:	4304      	orrs	r4, r0
 8003016:	20ff      	movs	r0, #255	; 0xff
 8003018:	e7ea      	b.n	8002ff0 <__aeabi_d2f+0x28>
 800301a:	2e00      	cmp	r6, #0
 800301c:	dd1b      	ble.n	8003056 <__aeabi_d2f+0x8e>
 800301e:	0192      	lsls	r2, r2, #6
 8003020:	1e53      	subs	r3, r2, #1
 8003022:	419a      	sbcs	r2, r3
 8003024:	00e4      	lsls	r4, r4, #3
 8003026:	0f6d      	lsrs	r5, r5, #29
 8003028:	4322      	orrs	r2, r4
 800302a:	432a      	orrs	r2, r5
 800302c:	0753      	lsls	r3, r2, #29
 800302e:	d048      	beq.n	80030c2 <__aeabi_d2f+0xfa>
 8003030:	230f      	movs	r3, #15
 8003032:	4013      	ands	r3, r2
 8003034:	2b04      	cmp	r3, #4
 8003036:	d000      	beq.n	800303a <__aeabi_d2f+0x72>
 8003038:	3204      	adds	r2, #4
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	04db      	lsls	r3, r3, #19
 800303e:	4013      	ands	r3, r2
 8003040:	d03f      	beq.n	80030c2 <__aeabi_d2f+0xfa>
 8003042:	1c70      	adds	r0, r6, #1
 8003044:	2efe      	cmp	r6, #254	; 0xfe
 8003046:	d0d1      	beq.n	8002fec <__aeabi_d2f+0x24>
 8003048:	0192      	lsls	r2, r2, #6
 800304a:	0a54      	lsrs	r4, r2, #9
 800304c:	b2c0      	uxtb	r0, r0
 800304e:	e7cf      	b.n	8002ff0 <__aeabi_d2f+0x28>
 8003050:	2000      	movs	r0, #0
 8003052:	2400      	movs	r4, #0
 8003054:	e7cc      	b.n	8002ff0 <__aeabi_d2f+0x28>
 8003056:	0032      	movs	r2, r6
 8003058:	3217      	adds	r2, #23
 800305a:	db22      	blt.n	80030a2 <__aeabi_d2f+0xda>
 800305c:	2080      	movs	r0, #128	; 0x80
 800305e:	0400      	lsls	r0, r0, #16
 8003060:	4320      	orrs	r0, r4
 8003062:	241e      	movs	r4, #30
 8003064:	1ba4      	subs	r4, r4, r6
 8003066:	2c1f      	cmp	r4, #31
 8003068:	dd1d      	ble.n	80030a6 <__aeabi_d2f+0xde>
 800306a:	2202      	movs	r2, #2
 800306c:	4252      	negs	r2, r2
 800306e:	1b96      	subs	r6, r2, r6
 8003070:	0002      	movs	r2, r0
 8003072:	40f2      	lsrs	r2, r6
 8003074:	0016      	movs	r6, r2
 8003076:	2c20      	cmp	r4, #32
 8003078:	d004      	beq.n	8003084 <__aeabi_d2f+0xbc>
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <__aeabi_d2f+0x108>)
 800307c:	4694      	mov	ip, r2
 800307e:	4463      	add	r3, ip
 8003080:	4098      	lsls	r0, r3
 8003082:	4305      	orrs	r5, r0
 8003084:	002a      	movs	r2, r5
 8003086:	1e53      	subs	r3, r2, #1
 8003088:	419a      	sbcs	r2, r3
 800308a:	4332      	orrs	r2, r6
 800308c:	2600      	movs	r6, #0
 800308e:	0753      	lsls	r3, r2, #29
 8003090:	d1ce      	bne.n	8003030 <__aeabi_d2f+0x68>
 8003092:	2480      	movs	r4, #128	; 0x80
 8003094:	0013      	movs	r3, r2
 8003096:	04e4      	lsls	r4, r4, #19
 8003098:	2001      	movs	r0, #1
 800309a:	4023      	ands	r3, r4
 800309c:	4222      	tst	r2, r4
 800309e:	d1d3      	bne.n	8003048 <__aeabi_d2f+0x80>
 80030a0:	e7b0      	b.n	8003004 <__aeabi_d2f+0x3c>
 80030a2:	2300      	movs	r3, #0
 80030a4:	e7ad      	b.n	8003002 <__aeabi_d2f+0x3a>
 80030a6:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <__aeabi_d2f+0x10c>)
 80030a8:	4694      	mov	ip, r2
 80030aa:	002a      	movs	r2, r5
 80030ac:	40e2      	lsrs	r2, r4
 80030ae:	0014      	movs	r4, r2
 80030b0:	002a      	movs	r2, r5
 80030b2:	4463      	add	r3, ip
 80030b4:	409a      	lsls	r2, r3
 80030b6:	4098      	lsls	r0, r3
 80030b8:	1e55      	subs	r5, r2, #1
 80030ba:	41aa      	sbcs	r2, r5
 80030bc:	4302      	orrs	r2, r0
 80030be:	4322      	orrs	r2, r4
 80030c0:	e7e4      	b.n	800308c <__aeabi_d2f+0xc4>
 80030c2:	0033      	movs	r3, r6
 80030c4:	e79e      	b.n	8003004 <__aeabi_d2f+0x3c>
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	000007fe 	.word	0x000007fe
 80030cc:	fffffc80 	.word	0xfffffc80
 80030d0:	fffffca2 	.word	0xfffffca2
 80030d4:	fffffc82 	.word	0xfffffc82

080030d8 <__clzsi2>:
 80030d8:	211c      	movs	r1, #28
 80030da:	2301      	movs	r3, #1
 80030dc:	041b      	lsls	r3, r3, #16
 80030de:	4298      	cmp	r0, r3
 80030e0:	d301      	bcc.n	80030e6 <__clzsi2+0xe>
 80030e2:	0c00      	lsrs	r0, r0, #16
 80030e4:	3910      	subs	r1, #16
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	4298      	cmp	r0, r3
 80030ea:	d301      	bcc.n	80030f0 <__clzsi2+0x18>
 80030ec:	0a00      	lsrs	r0, r0, #8
 80030ee:	3908      	subs	r1, #8
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	4298      	cmp	r0, r3
 80030f4:	d301      	bcc.n	80030fa <__clzsi2+0x22>
 80030f6:	0900      	lsrs	r0, r0, #4
 80030f8:	3904      	subs	r1, #4
 80030fa:	a202      	add	r2, pc, #8	; (adr r2, 8003104 <__clzsi2+0x2c>)
 80030fc:	5c10      	ldrb	r0, [r2, r0]
 80030fe:	1840      	adds	r0, r0, r1
 8003100:	4770      	bx	lr
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	02020304 	.word	0x02020304
 8003108:	01010101 	.word	0x01010101
	...

08003114 <calcMA>:
			.size 		= 0,
			.lastEMA 	= 0
};

double calcMA(double previousAverage, unsigned int previousNumDays,
		double newStock) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60b8      	str	r0, [r7, #8]
 800311c:	60f9      	str	r1, [r7, #12]
 800311e:	607a      	str	r2, [r7, #4]

	double result = 0;
 8003120:	2200      	movs	r2, #0
 8003122:	2300      	movs	r3, #0
 8003124:	613a      	str	r2, [r7, #16]
 8003126:	617b      	str	r3, [r7, #20]
	result = previousNumDays * previousAverage + newStock;
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fedf 	bl	8002eec <__aeabi_ui2d>
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f7ff f859 	bl	80021e8 <__aeabi_dmul>
 8003136:	0002      	movs	r2, r0
 8003138:	000b      	movs	r3, r1
 800313a:	6a38      	ldr	r0, [r7, #32]
 800313c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800313e:	f7fe f915 	bl	800136c <__aeabi_dadd>
 8003142:	0002      	movs	r2, r0
 8003144:	000b      	movs	r3, r1
 8003146:	613a      	str	r2, [r7, #16]
 8003148:	617b      	str	r3, [r7, #20]
	return result / (previousNumDays + 1.0);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fece 	bl	8002eec <__aeabi_ui2d>
 8003150:	2200      	movs	r2, #0
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <calcMA+0x60>)
 8003154:	f7fe f90a 	bl	800136c <__aeabi_dadd>
 8003158:	0002      	movs	r2, r0
 800315a:	000b      	movs	r3, r1
 800315c:	6938      	ldr	r0, [r7, #16]
 800315e:	6979      	ldr	r1, [r7, #20]
 8003160:	f7fe fc40 	bl	80019e4 <__aeabi_ddiv>
 8003164:	0002      	movs	r2, r0
 8003166:	000b      	movs	r3, r1

}
 8003168:	0010      	movs	r0, r2
 800316a:	0019      	movs	r1, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b006      	add	sp, #24
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	3ff00000 	.word	0x3ff00000

08003178 <calcEMA>:

double calcEMA(double previousAverage, int timePeriod, double newStock) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	60b8      	str	r0, [r7, #8]
 8003180:	60f9      	str	r1, [r7, #12]
 8003182:	607a      	str	r2, [r7, #4]
	double result = 0, mult = 0;
 8003184:	2200      	movs	r2, #0
 8003186:	2300      	movs	r3, #0
 8003188:	61ba      	str	r2, [r7, #24]
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	2200      	movs	r2, #0
 800318e:	2300      	movs	r3, #0
 8003190:	613a      	str	r2, [r7, #16]
 8003192:	617b      	str	r3, [r7, #20]
	mult = 2.0 / (timePeriod + 1.0);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff fe79 	bl	8002e8c <__aeabi_i2d>
 800319a:	2200      	movs	r2, #0
 800319c:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <calcEMA+0x80>)
 800319e:	f7fe f8e5 	bl	800136c <__aeabi_dadd>
 80031a2:	0002      	movs	r2, r0
 80031a4:	000b      	movs	r3, r1
 80031a6:	2000      	movs	r0, #0
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	05c9      	lsls	r1, r1, #23
 80031ac:	f7fe fc1a 	bl	80019e4 <__aeabi_ddiv>
 80031b0:	0002      	movs	r2, r0
 80031b2:	000b      	movs	r3, r1
 80031b4:	613a      	str	r2, [r7, #16]
 80031b6:	617b      	str	r3, [r7, #20]
	result = (newStock - previousAverage) * mult + previousAverage;
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031c0:	f7ff fa7e 	bl	80026c0 <__aeabi_dsub>
 80031c4:	0002      	movs	r2, r0
 80031c6:	000b      	movs	r3, r1
 80031c8:	0010      	movs	r0, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f7ff f80a 	bl	80021e8 <__aeabi_dmul>
 80031d4:	0002      	movs	r2, r0
 80031d6:	000b      	movs	r3, r1
 80031d8:	68b8      	ldr	r0, [r7, #8]
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	f7fe f8c6 	bl	800136c <__aeabi_dadd>
 80031e0:	0002      	movs	r2, r0
 80031e2:	000b      	movs	r3, r1
 80031e4:	61ba      	str	r2, [r7, #24]
 80031e6:	61fb      	str	r3, [r7, #28]
	return result;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	69fb      	ldr	r3, [r7, #28]

}
 80031ec:	0010      	movs	r0, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	46bd      	mov	sp, r7
 80031f2:	b008      	add	sp, #32
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	3ff00000 	.word	0x3ff00000

080031fc <addStock>:

void addStock(double newStock, EMA_t*EMA){
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b087      	sub	sp, #28
 8003200:	af02      	add	r7, sp, #8
 8003202:	60b8      	str	r0, [r7, #8]
 8003204:	60f9      	str	r1, [r7, #12]
 8003206:	607a      	str	r2, [r7, #4]
	EMA->size++;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	605a      	str	r2, [r3, #4]
	if(EMA->size < EMA->timePreiod){
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	8812      	ldrh	r2, [r2, #0]
 800321a:	4293      	cmp	r3, r2
 800321c:	d212      	bcs.n	8003244 <addStock+0x48>
		EMA->lastEMA = calcMA(EMA->lastEMA, EMA->size -1 , newStock);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6898      	ldr	r0, [r3, #8]
 8003222:	68d9      	ldr	r1, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	1e5c      	subs	r4, r3, #1
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	9200      	str	r2, [sp, #0]
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	0022      	movs	r2, r4
 8003234:	f7ff ff6e 	bl	8003114 <calcMA>
 8003238:	0002      	movs	r2, r0
 800323a:	000b      	movs	r3, r1
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	608a      	str	r2, [r1, #8]
 8003240:	60cb      	str	r3, [r1, #12]
	}
	else{
		EMA->lastEMA = calcEMA(EMA->lastEMA, EMA->timePreiod, newStock);
	}
}
 8003242:	e011      	b.n	8003268 <addStock+0x6c>
		EMA->lastEMA = calcEMA(EMA->lastEMA, EMA->timePreiod, newStock);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6898      	ldr	r0, [r3, #8]
 8003248:	68d9      	ldr	r1, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	001c      	movs	r4, r3
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0022      	movs	r2, r4
 800325a:	f7ff ff8d 	bl	8003178 <calcEMA>
 800325e:	0002      	movs	r2, r0
 8003260:	000b      	movs	r3, r1
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	608a      	str	r2, [r1, #8]
 8003266:	60cb      	str	r3, [r1, #12]
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b005      	add	sp, #20
 800326e:	bd90      	pop	{r4, r7, pc}

08003270 <Start_Kalman_Algorithm>:
static float Calculated_Pitch, Calculated_Roll, Calculated_yaw,Tick_frequency;

extern void IWDT_clear(void);

void Start_Kalman_Algorithm(float executeMaxTicks, float timebase)
{
 8003270:	b5b0      	push	{r4, r5, r7, lr}
 8003272:	b08e      	sub	sp, #56	; 0x38
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
    double accX, accY, accZ; 
  
    /* We will set the variables like so, these can also be tuned by the user */
    KalmanX.Q_angle      = 0.001f;
 800327a:	4b5d      	ldr	r3, [pc, #372]	; (80033f0 <Start_Kalman_Algorithm+0x180>)
 800327c:	4a5d      	ldr	r2, [pc, #372]	; (80033f4 <Start_Kalman_Algorithm+0x184>)
 800327e:	601a      	str	r2, [r3, #0]
    KalmanX.Q_bias       = 0.003f;
 8003280:	4b5b      	ldr	r3, [pc, #364]	; (80033f0 <Start_Kalman_Algorithm+0x180>)
 8003282:	4a5d      	ldr	r2, [pc, #372]	; (80033f8 <Start_Kalman_Algorithm+0x188>)
 8003284:	605a      	str	r2, [r3, #4]
    KalmanX.R_measure    = 0.03f;
 8003286:	4b5a      	ldr	r3, [pc, #360]	; (80033f0 <Start_Kalman_Algorithm+0x180>)
 8003288:	4a5c      	ldr	r2, [pc, #368]	; (80033fc <Start_Kalman_Algorithm+0x18c>)
 800328a:	609a      	str	r2, [r3, #8]
    KalmanX.angle        = 0.0f;     
 800328c:	4b58      	ldr	r3, [pc, #352]	; (80033f0 <Start_Kalman_Algorithm+0x180>)
 800328e:	2200      	movs	r2, #0
 8003290:	60da      	str	r2, [r3, #12]
    KalmanX.bias         = 0.0f;
 8003292:	4b57      	ldr	r3, [pc, #348]	; (80033f0 <Start_Kalman_Algorithm+0x180>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
    KalmanX.P[0][0]      = 0.0f; 
 8003298:	4b55      	ldr	r3, [pc, #340]	; (80033f0 <Start_Kalman_Algorithm+0x180>)
 800329a:	2200      	movs	r2, #0
 800329c:	619a      	str	r2, [r3, #24]
    KalmanX.P[0][1]      = 0.0f;
 800329e:	4b54      	ldr	r3, [pc, #336]	; (80033f0 <Start_Kalman_Algorithm+0x180>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	61da      	str	r2, [r3, #28]
    KalmanX.P[1][0]      = 0.0f;
 80032a4:	4b52      	ldr	r3, [pc, #328]	; (80033f0 <Start_Kalman_Algorithm+0x180>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	621a      	str	r2, [r3, #32]
    KalmanX.P[1][1]      = 0.0f;
 80032aa:	4b51      	ldr	r3, [pc, #324]	; (80033f0 <Start_Kalman_Algorithm+0x180>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24
    
    KalmanY.Q_angle      = 0.001f;
 80032b0:	4b53      	ldr	r3, [pc, #332]	; (8003400 <Start_Kalman_Algorithm+0x190>)
 80032b2:	4a50      	ldr	r2, [pc, #320]	; (80033f4 <Start_Kalman_Algorithm+0x184>)
 80032b4:	601a      	str	r2, [r3, #0]
    KalmanY.Q_bias       = 0.003f;
 80032b6:	4b52      	ldr	r3, [pc, #328]	; (8003400 <Start_Kalman_Algorithm+0x190>)
 80032b8:	4a4f      	ldr	r2, [pc, #316]	; (80033f8 <Start_Kalman_Algorithm+0x188>)
 80032ba:	605a      	str	r2, [r3, #4]
    KalmanY.R_measure    = 0.03f;
 80032bc:	4b50      	ldr	r3, [pc, #320]	; (8003400 <Start_Kalman_Algorithm+0x190>)
 80032be:	4a4f      	ldr	r2, [pc, #316]	; (80033fc <Start_Kalman_Algorithm+0x18c>)
 80032c0:	609a      	str	r2, [r3, #8]
    KalmanY.angle        = 0.0f;     
 80032c2:	4b4f      	ldr	r3, [pc, #316]	; (8003400 <Start_Kalman_Algorithm+0x190>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	60da      	str	r2, [r3, #12]
    KalmanY.bias         = 0.0f;
 80032c8:	4b4d      	ldr	r3, [pc, #308]	; (8003400 <Start_Kalman_Algorithm+0x190>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	611a      	str	r2, [r3, #16]
    KalmanY.P[0][0]      = 0.0f; 
 80032ce:	4b4c      	ldr	r3, [pc, #304]	; (8003400 <Start_Kalman_Algorithm+0x190>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
    KalmanY.P[0][1]      = 0.0f;
 80032d4:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <Start_Kalman_Algorithm+0x190>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
    KalmanY.P[1][0]      = 0.0f;
 80032da:	4b49      	ldr	r3, [pc, #292]	; (8003400 <Start_Kalman_Algorithm+0x190>)
 80032dc:	2200      	movs	r2, #0
 80032de:	621a      	str	r2, [r3, #32]
    KalmanY.P[1][1]      = 0.0f;
 80032e0:	4b47      	ldr	r3, [pc, #284]	; (8003400 <Start_Kalman_Algorithm+0x190>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
    
    
    LSM6DS3_IMU_GetMeasurements();
 80032e6:	f000 fe37 	bl	8003f58 <LSM6DS3_IMU_GetMeasurements>
    accX =   LSM6DS3_GetXL_X_Int16();
 80032ea:	f000 fe9f 	bl	800402c <LSM6DS3_GetXL_X_Int16>
 80032ee:	0003      	movs	r3, r0
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7ff fdcb 	bl	8002e8c <__aeabi_i2d>
 80032f6:	0002      	movs	r2, r0
 80032f8:	000b      	movs	r3, r1
 80032fa:	633a      	str	r2, [r7, #48]	; 0x30
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
    accY =   LSM6DS3_GetXL_Y_Int16();
 80032fe:	f000 fe9f 	bl	8004040 <LSM6DS3_GetXL_Y_Int16>
 8003302:	0003      	movs	r3, r0
 8003304:	0018      	movs	r0, r3
 8003306:	f7ff fdc1 	bl	8002e8c <__aeabi_i2d>
 800330a:	0002      	movs	r2, r0
 800330c:	000b      	movs	r3, r1
 800330e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
    accZ =   LSM6DS3_GetXL_Z_Int16();
 8003312:	f000 fe9f 	bl	8004054 <LSM6DS3_GetXL_Z_Int16>
 8003316:	0003      	movs	r3, r0
 8003318:	0018      	movs	r0, r3
 800331a:	f7ff fdb7 	bl	8002e8c <__aeabi_i2d>
 800331e:	0002      	movs	r2, r0
 8003320:	000b      	movs	r3, r1
 8003322:	623a      	str	r2, [r7, #32]
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
    
    #ifdef RESTRICT_PITCH
        double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 8003326:	6a3a      	ldr	r2, [r7, #32]
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800332c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800332e:	f009 fb9c 	bl	800ca6a <atan2>
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	0592      	lsls	r2, r2, #22
 8003336:	4b33      	ldr	r3, [pc, #204]	; (8003404 <Start_Kalman_Algorithm+0x194>)
 8003338:	f7fe ff56 	bl	80021e8 <__aeabi_dmul>
 800333c:	0002      	movs	r2, r0
 800333e:	000b      	movs	r3, r1
 8003340:	61ba      	str	r2, [r7, #24]
 8003342:	61fb      	str	r3, [r7, #28]
        double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	001c      	movs	r4, r3
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	0612      	lsls	r2, r2, #24
 800334e:	405a      	eors	r2, r3
 8003350:	0015      	movs	r5, r2
 8003352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800335a:	f7fe ff45 	bl	80021e8 <__aeabi_dmul>
 800335e:	0002      	movs	r2, r0
 8003360:	000b      	movs	r3, r1
 8003362:	603a      	str	r2, [r7, #0]
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	6a3a      	ldr	r2, [r7, #32]
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	6a38      	ldr	r0, [r7, #32]
 800336c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800336e:	f7fe ff3b 	bl	80021e8 <__aeabi_dmul>
 8003372:	0002      	movs	r2, r0
 8003374:	000b      	movs	r3, r1
 8003376:	6838      	ldr	r0, [r7, #0]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	f7fd fff7 	bl	800136c <__aeabi_dadd>
 800337e:	0002      	movs	r2, r0
 8003380:	000b      	movs	r3, r1
 8003382:	0010      	movs	r0, r2
 8003384:	0019      	movs	r1, r3
 8003386:	f009 fb74 	bl	800ca72 <sqrt>
 800338a:	0002      	movs	r2, r0
 800338c:	000b      	movs	r3, r1
 800338e:	0020      	movs	r0, r4
 8003390:	0029      	movs	r1, r5
 8003392:	f7fe fb27 	bl	80019e4 <__aeabi_ddiv>
 8003396:	0002      	movs	r2, r0
 8003398:	000b      	movs	r3, r1
 800339a:	0010      	movs	r0, r2
 800339c:	0019      	movs	r1, r3
 800339e:	f009 f9e1 	bl	800c764 <atan>
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	0592      	lsls	r2, r2, #22
 80033a6:	4b17      	ldr	r3, [pc, #92]	; (8003404 <Start_Kalman_Algorithm+0x194>)
 80033a8:	f7fe ff1e 	bl	80021e8 <__aeabi_dmul>
 80033ac:	0002      	movs	r2, r0
 80033ae:	000b      	movs	r3, r1
 80033b0:	613a      	str	r2, [r7, #16]
 80033b2:	617b      	str	r3, [r7, #20]
    #else 
        double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
        double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
    #endif
    
   KalmanX.angle    = roll;
 80033b4:	69b8      	ldr	r0, [r7, #24]
 80033b6:	69f9      	ldr	r1, [r7, #28]
 80033b8:	f7ff fe06 	bl	8002fc8 <__aeabi_d2f>
 80033bc:	1c02      	adds	r2, r0, #0
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <Start_Kalman_Algorithm+0x180>)
 80033c0:	60da      	str	r2, [r3, #12]
   KalmanY.angle 	= pitch;
 80033c2:	6938      	ldr	r0, [r7, #16]
 80033c4:	6979      	ldr	r1, [r7, #20]
 80033c6:	f7ff fdff 	bl	8002fc8 <__aeabi_d2f>
 80033ca:	1c02      	adds	r2, r0, #0
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <Start_Kalman_Algorithm+0x190>)
 80033ce:	60da      	str	r2, [r3, #12]
   Tick_frequency	= timebase;
 80033d0:	4b0d      	ldr	r3, [pc, #52]	; (8003408 <Start_Kalman_Algorithm+0x198>)
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	601a      	str	r2, [r3, #0]
   ExecuteMax	    = executeMaxTicks;
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7fd f8a8 	bl	800052c <__aeabi_f2uiz>
 80033dc:	0002      	movs	r2, r0
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <Start_Kalman_Algorithm+0x19c>)
 80033e0:	601a      	str	r2, [r3, #0]
   Kalman_Timer  	= 0;
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <Start_Kalman_Algorithm+0x1a0>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b00e      	add	sp, #56	; 0x38
 80033ee:	bdb0      	pop	{r4, r5, r7, pc}
 80033f0:	200002ac 	.word	0x200002ac
 80033f4:	3a83126f 	.word	0x3a83126f
 80033f8:	3b449ba6 	.word	0x3b449ba6
 80033fc:	3cf5c28f 	.word	0x3cf5c28f
 8003400:	200002d4 	.word	0x200002d4
 8003404:	404ca5dc 	.word	0x404ca5dc
 8003408:	20000320 	.word	0x20000320
 800340c:	2000030c 	.word	0x2000030c
 8003410:	20000308 	.word	0x20000308

08003414 <Execute_Kalman_Filter>:
   
	double accX, accY, accZ;
	double gyroX,gyroY,gyroZ;

void Execute_Kalman_Filter(void) 
{
 8003414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003416:	46c6      	mov	lr, r8
 8003418:	b500      	push	{lr}
 800341a:	b094      	sub	sp, #80	; 0x50
 800341c:	af00      	add	r7, sp, #0
  double timing_kalman;
  double kalAngleX=0;
 800341e:	2200      	movs	r2, #0
 8003420:	2300      	movs	r3, #0
 8003422:	64ba      	str	r2, [r7, #72]	; 0x48
 8003424:	64fb      	str	r3, [r7, #76]	; 0x4c
  double kalAngleY=0;
 8003426:	2200      	movs	r2, #0
 8003428:	2300      	movs	r3, #0
 800342a:	63ba      	str	r2, [r7, #56]	; 0x38
 800342c:	63fb      	str	r3, [r7, #60]	; 0x3c
	//double accX, accY, accZ;
	//double gyroX,gyroY,gyroZ;
  static uint32_t current_time,last_time = 0;

  current_time = Kalman_GetTick();
 800342e:	f000 f9f9 	bl	8003824 <Kalman_GetTick>
 8003432:	0002      	movs	r2, r0
 8003434:	4bd7      	ldr	r3, [pc, #860]	; (8003794 <Execute_Kalman_Filter+0x380>)
 8003436:	601a      	str	r2, [r3, #0]
  timing_kalman = (double) (((uint32_t)(current_time - last_time)) / Tick_frequency);
 8003438:	4bd6      	ldr	r3, [pc, #856]	; (8003794 <Execute_Kalman_Filter+0x380>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4bd6      	ldr	r3, [pc, #856]	; (8003798 <Execute_Kalman_Filter+0x384>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	0018      	movs	r0, r3
 8003444:	f7fd ff50 	bl	80012e8 <__aeabi_ui2f>
 8003448:	1c02      	adds	r2, r0, #0
 800344a:	4bd4      	ldr	r3, [pc, #848]	; (800379c <Execute_Kalman_Filter+0x388>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	1c19      	adds	r1, r3, #0
 8003450:	1c10      	adds	r0, r2, #0
 8003452:	f7fd fa3f 	bl	80008d4 <__aeabi_fdiv>
 8003456:	1c03      	adds	r3, r0, #0
 8003458:	1c18      	adds	r0, r3, #0
 800345a:	f7ff fd6d 	bl	8002f38 <__aeabi_f2d>
 800345e:	0002      	movs	r2, r0
 8003460:	000b      	movs	r3, r1
 8003462:	633a      	str	r2, [r7, #48]	; 0x30
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
  last_time = current_time;
 8003466:	4bcb      	ldr	r3, [pc, #812]	; (8003794 <Execute_Kalman_Filter+0x380>)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4bcb      	ldr	r3, [pc, #812]	; (8003798 <Execute_Kalman_Filter+0x384>)
 800346c:	601a      	str	r2, [r3, #0]

  accX  = LSM6DS3_GetXL_X_Int16();
 800346e:	f000 fddd 	bl	800402c <LSM6DS3_GetXL_X_Int16>
 8003472:	0003      	movs	r3, r0
 8003474:	0018      	movs	r0, r3
 8003476:	f7ff fd09 	bl	8002e8c <__aeabi_i2d>
 800347a:	0002      	movs	r2, r0
 800347c:	000b      	movs	r3, r1
 800347e:	49c8      	ldr	r1, [pc, #800]	; (80037a0 <Execute_Kalman_Filter+0x38c>)
 8003480:	600a      	str	r2, [r1, #0]
 8003482:	604b      	str	r3, [r1, #4]
  accY  = LSM6DS3_GetXL_Y_Int16();
 8003484:	f000 fddc 	bl	8004040 <LSM6DS3_GetXL_Y_Int16>
 8003488:	0003      	movs	r3, r0
 800348a:	0018      	movs	r0, r3
 800348c:	f7ff fcfe 	bl	8002e8c <__aeabi_i2d>
 8003490:	0002      	movs	r2, r0
 8003492:	000b      	movs	r3, r1
 8003494:	49c3      	ldr	r1, [pc, #780]	; (80037a4 <Execute_Kalman_Filter+0x390>)
 8003496:	600a      	str	r2, [r1, #0]
 8003498:	604b      	str	r3, [r1, #4]
  accZ  = LSM6DS3_GetXL_Z_Int16();
 800349a:	f000 fddb 	bl	8004054 <LSM6DS3_GetXL_Z_Int16>
 800349e:	0003      	movs	r3, r0
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff fcf3 	bl	8002e8c <__aeabi_i2d>
 80034a6:	0002      	movs	r2, r0
 80034a8:	000b      	movs	r3, r1
 80034aa:	49bf      	ldr	r1, [pc, #764]	; (80037a8 <Execute_Kalman_Filter+0x394>)
 80034ac:	600a      	str	r2, [r1, #0]
 80034ae:	604b      	str	r3, [r1, #4]
  gyroX = LSM6DS3_GetGS_X_Int16();
 80034b0:	f000 fdda 	bl	8004068 <LSM6DS3_GetGS_X_Int16>
 80034b4:	0003      	movs	r3, r0
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7ff fce8 	bl	8002e8c <__aeabi_i2d>
 80034bc:	0002      	movs	r2, r0
 80034be:	000b      	movs	r3, r1
 80034c0:	49ba      	ldr	r1, [pc, #744]	; (80037ac <Execute_Kalman_Filter+0x398>)
 80034c2:	600a      	str	r2, [r1, #0]
 80034c4:	604b      	str	r3, [r1, #4]
  gyroY = LSM6DS3_GetGS_Y_Int16();
 80034c6:	f000 fdd9 	bl	800407c <LSM6DS3_GetGS_Y_Int16>
 80034ca:	0003      	movs	r3, r0
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff fcdd 	bl	8002e8c <__aeabi_i2d>
 80034d2:	0002      	movs	r2, r0
 80034d4:	000b      	movs	r3, r1
 80034d6:	49b6      	ldr	r1, [pc, #728]	; (80037b0 <Execute_Kalman_Filter+0x39c>)
 80034d8:	600a      	str	r2, [r1, #0]
 80034da:	604b      	str	r3, [r1, #4]
  gyroZ = LSM6DS3_GetGS_Z_Int16();
 80034dc:	f000 fdd8 	bl	8004090 <LSM6DS3_GetGS_Z_Int16>
 80034e0:	0003      	movs	r3, r0
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7ff fcd2 	bl	8002e8c <__aeabi_i2d>
 80034e8:	0002      	movs	r2, r0
 80034ea:	000b      	movs	r3, r1
 80034ec:	49b1      	ldr	r1, [pc, #708]	; (80037b4 <Execute_Kalman_Filter+0x3a0>)
 80034ee:	600a      	str	r2, [r1, #0]
 80034f0:	604b      	str	r3, [r1, #4]

  #ifdef RESTRICT_PITCH
    double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 80034f2:	4bac      	ldr	r3, [pc, #688]	; (80037a4 <Execute_Kalman_Filter+0x390>)
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	4bab      	ldr	r3, [pc, #684]	; (80037a8 <Execute_Kalman_Filter+0x394>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f009 fab4 	bl	800ca6a <atan2>
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	0592      	lsls	r2, r2, #22
 8003506:	4bac      	ldr	r3, [pc, #688]	; (80037b8 <Execute_Kalman_Filter+0x3a4>)
 8003508:	f7fe fe6e 	bl	80021e8 <__aeabi_dmul>
 800350c:	0002      	movs	r2, r0
 800350e:	000b      	movs	r3, r1
 8003510:	62ba      	str	r2, [r7, #40]	; 0x28
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
    double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 8003514:	4ba2      	ldr	r3, [pc, #648]	; (80037a0 <Execute_Kalman_Filter+0x38c>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	0011      	movs	r1, r2
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	2180      	movs	r1, #128	; 0x80
 8003520:	0609      	lsls	r1, r1, #24
 8003522:	4059      	eors	r1, r3
 8003524:	60f9      	str	r1, [r7, #12]
 8003526:	4b9f      	ldr	r3, [pc, #636]	; (80037a4 <Execute_Kalman_Filter+0x390>)
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	4b9d      	ldr	r3, [pc, #628]	; (80037a4 <Execute_Kalman_Filter+0x390>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f7fe fe59 	bl	80021e8 <__aeabi_dmul>
 8003536:	0002      	movs	r2, r0
 8003538:	000b      	movs	r3, r1
 800353a:	603a      	str	r2, [r7, #0]
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	4b9a      	ldr	r3, [pc, #616]	; (80037a8 <Execute_Kalman_Filter+0x394>)
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	4b98      	ldr	r3, [pc, #608]	; (80037a8 <Execute_Kalman_Filter+0x394>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f7fe fe4d 	bl	80021e8 <__aeabi_dmul>
 800354e:	0002      	movs	r2, r0
 8003550:	000b      	movs	r3, r1
 8003552:	6838      	ldr	r0, [r7, #0]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	f7fd ff09 	bl	800136c <__aeabi_dadd>
 800355a:	0002      	movs	r2, r0
 800355c:	000b      	movs	r3, r1
 800355e:	0010      	movs	r0, r2
 8003560:	0019      	movs	r1, r3
 8003562:	f009 fa86 	bl	800ca72 <sqrt>
 8003566:	0002      	movs	r2, r0
 8003568:	000b      	movs	r3, r1
 800356a:	68b8      	ldr	r0, [r7, #8]
 800356c:	68f9      	ldr	r1, [r7, #12]
 800356e:	f7fe fa39 	bl	80019e4 <__aeabi_ddiv>
 8003572:	0002      	movs	r2, r0
 8003574:	000b      	movs	r3, r1
 8003576:	0010      	movs	r0, r2
 8003578:	0019      	movs	r1, r3
 800357a:	f009 f8f3 	bl	800c764 <atan>
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	0592      	lsls	r2, r2, #22
 8003582:	4b8d      	ldr	r3, [pc, #564]	; (80037b8 <Execute_Kalman_Filter+0x3a4>)
 8003584:	f7fe fe30 	bl	80021e8 <__aeabi_dmul>
 8003588:	0002      	movs	r2, r0
 800358a:	000b      	movs	r3, r1
 800358c:	623a      	str	r2, [r7, #32]
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
  #else // Eq. 28 and 29
    double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
    double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
  #endif
       
	double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
 8003590:	4b86      	ldr	r3, [pc, #536]	; (80037ac <Execute_Kalman_Filter+0x398>)
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	6859      	ldr	r1, [r3, #4]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	05d2      	lsls	r2, r2, #23
 800359a:	4b88      	ldr	r3, [pc, #544]	; (80037bc <Execute_Kalman_Filter+0x3a8>)
 800359c:	f7fe fe24 	bl	80021e8 <__aeabi_dmul>
 80035a0:	0002      	movs	r2, r0
 80035a2:	000b      	movs	r3, r1
 80035a4:	61ba      	str	r2, [r7, #24]
 80035a6:	61fb      	str	r3, [r7, #28]
	double gyroYrate = gyroY * 0.007f; /* Convert to deg/s */
 80035a8:	4b81      	ldr	r3, [pc, #516]	; (80037b0 <Execute_Kalman_Filter+0x39c>)
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	05d2      	lsls	r2, r2, #23
 80035b2:	4b82      	ldr	r3, [pc, #520]	; (80037bc <Execute_Kalman_Filter+0x3a8>)
 80035b4:	f7fe fe18 	bl	80021e8 <__aeabi_dmul>
 80035b8:	0002      	movs	r2, r0
 80035ba:	000b      	movs	r3, r1
 80035bc:	643a      	str	r2, [r7, #64]	; 0x40
 80035be:	647b      	str	r3, [r7, #68]	; 0x44
	double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
 80035c0:	4b7c      	ldr	r3, [pc, #496]	; (80037b4 <Execute_Kalman_Filter+0x3a0>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	4b7e      	ldr	r3, [pc, #504]	; (80037c0 <Execute_Kalman_Filter+0x3ac>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f7ff f878 	bl	80026c0 <__aeabi_dsub>
 80035d0:	0002      	movs	r2, r0
 80035d2:	000b      	movs	r3, r1
 80035d4:	0010      	movs	r0, r2
 80035d6:	0019      	movs	r1, r3
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	05d2      	lsls	r2, r2, #23
 80035dc:	4b77      	ldr	r3, [pc, #476]	; (80037bc <Execute_Kalman_Filter+0x3a8>)
 80035de:	f7fe fe03 	bl	80021e8 <__aeabi_dmul>
 80035e2:	0002      	movs	r2, r0
 80035e4:	000b      	movs	r3, r1
 80035e6:	613a      	str	r2, [r7, #16]
 80035e8:	617b      	str	r3, [r7, #20]
	kalAngleZ = kalAngleZ+gyroZrate*timing_kalman;
 80035ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	6938      	ldr	r0, [r7, #16]
 80035f0:	6979      	ldr	r1, [r7, #20]
 80035f2:	f7fe fdf9 	bl	80021e8 <__aeabi_dmul>
 80035f6:	0002      	movs	r2, r0
 80035f8:	000b      	movs	r3, r1
 80035fa:	0010      	movs	r0, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	4b71      	ldr	r3, [pc, #452]	; (80037c4 <Execute_Kalman_Filter+0x3b0>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f7fd feb2 	bl	800136c <__aeabi_dadd>
 8003608:	0002      	movs	r2, r0
 800360a:	000b      	movs	r3, r1
 800360c:	496d      	ldr	r1, [pc, #436]	; (80037c4 <Execute_Kalman_Filter+0x3b0>)
 800360e:	600a      	str	r2, [r1, #0]
 8003610:	604b      	str	r3, [r1, #4]

	if(kalAngleZ>360){
 8003612:	4b6c      	ldr	r3, [pc, #432]	; (80037c4 <Execute_Kalman_Filter+0x3b0>)
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	6859      	ldr	r1, [r3, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	4b6b      	ldr	r3, [pc, #428]	; (80037c8 <Execute_Kalman_Filter+0x3b4>)
 800361c:	f7fc ff38 	bl	8000490 <__aeabi_dcmpgt>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d00c      	beq.n	800363e <Execute_Kalman_Filter+0x22a>
		kalAngleZ-=360;
 8003624:	4b67      	ldr	r3, [pc, #412]	; (80037c4 <Execute_Kalman_Filter+0x3b0>)
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	4b66      	ldr	r3, [pc, #408]	; (80037c8 <Execute_Kalman_Filter+0x3b4>)
 800362e:	f7ff f847 	bl	80026c0 <__aeabi_dsub>
 8003632:	0002      	movs	r2, r0
 8003634:	000b      	movs	r3, r1
 8003636:	4963      	ldr	r1, [pc, #396]	; (80037c4 <Execute_Kalman_Filter+0x3b0>)
 8003638:	600a      	str	r2, [r1, #0]
 800363a:	604b      	str	r3, [r1, #4]
 800363c:	e014      	b.n	8003668 <Execute_Kalman_Filter+0x254>
	}
	else if(kalAngleZ<-360){
 800363e:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <Execute_Kalman_Filter+0x3b0>)
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	4b61      	ldr	r3, [pc, #388]	; (80037cc <Execute_Kalman_Filter+0x3b8>)
 8003648:	f7fc ff0e 	bl	8000468 <__aeabi_dcmplt>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d00b      	beq.n	8003668 <Execute_Kalman_Filter+0x254>
		kalAngleZ+=360;
 8003650:	4b5c      	ldr	r3, [pc, #368]	; (80037c4 <Execute_Kalman_Filter+0x3b0>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	4b5b      	ldr	r3, [pc, #364]	; (80037c8 <Execute_Kalman_Filter+0x3b4>)
 800365a:	f7fd fe87 	bl	800136c <__aeabi_dadd>
 800365e:	0002      	movs	r2, r0
 8003660:	000b      	movs	r3, r1
 8003662:	4958      	ldr	r1, [pc, #352]	; (80037c4 <Execute_Kalman_Filter+0x3b0>)
 8003664:	600a      	str	r2, [r1, #0]
 8003666:	604b      	str	r3, [r1, #4]
	}

  #ifdef RESTRICT_PITCH
  /* This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees */
  if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90)) 
 8003668:	2200      	movs	r2, #0
 800366a:	4b59      	ldr	r3, [pc, #356]	; (80037d0 <Execute_Kalman_Filter+0x3bc>)
 800366c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800366e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003670:	f7fc fefa 	bl	8000468 <__aeabi_dcmplt>
 8003674:	1e03      	subs	r3, r0, #0
 8003676:	d007      	beq.n	8003688 <Execute_Kalman_Filter+0x274>
 8003678:	2200      	movs	r2, #0
 800367a:	4b56      	ldr	r3, [pc, #344]	; (80037d4 <Execute_Kalman_Filter+0x3c0>)
 800367c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800367e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003680:	f7fc ff06 	bl	8000490 <__aeabi_dcmpgt>
 8003684:	1e03      	subs	r3, r0, #0
 8003686:	d10f      	bne.n	80036a8 <Execute_Kalman_Filter+0x294>
 8003688:	2200      	movs	r2, #0
 800368a:	4b52      	ldr	r3, [pc, #328]	; (80037d4 <Execute_Kalman_Filter+0x3c0>)
 800368c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800368e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003690:	f7fc fefe 	bl	8000490 <__aeabi_dcmpgt>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d013      	beq.n	80036c0 <Execute_Kalman_Filter+0x2ac>
 8003698:	2200      	movs	r2, #0
 800369a:	4b4d      	ldr	r3, [pc, #308]	; (80037d0 <Execute_Kalman_Filter+0x3bc>)
 800369c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800369e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80036a0:	f7fc fee2 	bl	8000468 <__aeabi_dcmplt>
 80036a4:	1e03      	subs	r3, r0, #0
 80036a6:	d00b      	beq.n	80036c0 <Execute_Kalman_Filter+0x2ac>
  {
	KalmanX.angle = roll;
 80036a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036ac:	f7ff fc8c 	bl	8002fc8 <__aeabi_d2f>
 80036b0:	1c02      	adds	r2, r0, #0
 80036b2:	4b49      	ldr	r3, [pc, #292]	; (80037d8 <Execute_Kalman_Filter+0x3c4>)
 80036b4:	60da      	str	r2, [r3, #12]
    kalAngleX = roll;
 80036b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80036bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036be:	e01b      	b.n	80036f8 <Execute_Kalman_Filter+0x2e4>
  } 
  else
  {
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman); /* Calculate the angle using a Kalman filter */
 80036c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036c4:	f7ff fc80 	bl	8002fc8 <__aeabi_d2f>
 80036c8:	1c06      	adds	r6, r0, #0
 80036ca:	69b8      	ldr	r0, [r7, #24]
 80036cc:	69f9      	ldr	r1, [r7, #28]
 80036ce:	f7ff fc7b 	bl	8002fc8 <__aeabi_d2f>
 80036d2:	4680      	mov	r8, r0
 80036d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036d8:	f7ff fc76 	bl	8002fc8 <__aeabi_d2f>
 80036dc:	1c03      	adds	r3, r0, #0
 80036de:	1c1a      	adds	r2, r3, #0
 80036e0:	4641      	mov	r1, r8
 80036e2:	1c30      	adds	r0, r6, #0
 80036e4:	f000 f8c4 	bl	8003870 <KalmanX_getAngle>
 80036e8:	1c03      	adds	r3, r0, #0
 80036ea:	1c18      	adds	r0, r3, #0
 80036ec:	f7ff fc24 	bl	8002f38 <__aeabi_f2d>
 80036f0:	0002      	movs	r2, r0
 80036f2:	000b      	movs	r3, r1
 80036f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80036f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  } 

  if (abs(kalAngleX) > 90)
 80036f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80036fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80036fc:	f7ff fb90 	bl	8002e20 <__aeabi_d2iz>
 8003700:	0003      	movs	r3, r0
 8003702:	17da      	asrs	r2, r3, #31
 8003704:	189b      	adds	r3, r3, r2
 8003706:	4053      	eors	r3, r2
 8003708:	2b5a      	cmp	r3, #90	; 0x5a
 800370a:	dd08      	ble.n	800371e <Execute_Kalman_Filter+0x30a>
  {
    gyroYrate = - gyroYrate; /* Invert rate, so it fits the restricted accelerometer reading */
 800370c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370e:	001c      	movs	r4, r3
 8003710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	0612      	lsls	r2, r2, #24
 8003716:	405a      	eors	r2, r3
 8003718:	0015      	movs	r5, r2
 800371a:	643c      	str	r4, [r7, #64]	; 0x40
 800371c:	647d      	str	r5, [r7, #68]	; 0x44
  }
  kalAngleY = KalmanY_getAngle(pitch, gyroYrate, timing_kalman);
 800371e:	6a38      	ldr	r0, [r7, #32]
 8003720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003722:	f7ff fc51 	bl	8002fc8 <__aeabi_d2f>
 8003726:	1c04      	adds	r4, r0, #0
 8003728:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800372a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800372c:	f7ff fc4c 	bl	8002fc8 <__aeabi_d2f>
 8003730:	1c05      	adds	r5, r0, #0
 8003732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003736:	f7ff fc47 	bl	8002fc8 <__aeabi_d2f>
 800373a:	1c03      	adds	r3, r0, #0
 800373c:	1c1a      	adds	r2, r3, #0
 800373e:	1c29      	adds	r1, r5, #0
 8003740:	1c20      	adds	r0, r4, #0
 8003742:	f000 f9b3 	bl	8003aac <KalmanY_getAngle>
 8003746:	1c03      	adds	r3, r0, #0
 8003748:	1c18      	adds	r0, r3, #0
 800374a:	f7ff fbf5 	bl	8002f38 <__aeabi_f2d>
 800374e:	0002      	movs	r2, r0
 8003750:	000b      	movs	r3, r1
 8003752:	63ba      	str	r2, [r7, #56]	; 0x38
 8003754:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
      gyroXrate = -gyroXrate; /* Invert rate, so it fits the restriced accelerometer reading */
    }
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman);
  #endif
   Calculated_Roll  =  (float) (kalAngleX);
 8003756:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003758:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800375a:	f7ff fc35 	bl	8002fc8 <__aeabi_d2f>
 800375e:	1c02      	adds	r2, r0, #0
 8003760:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <Execute_Kalman_Filter+0x3c8>)
 8003762:	601a      	str	r2, [r3, #0]
   Calculated_Pitch  = (float) (kalAngleY);
 8003764:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003766:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003768:	f7ff fc2e 	bl	8002fc8 <__aeabi_d2f>
 800376c:	1c02      	adds	r2, r0, #0
 800376e:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <Execute_Kalman_Filter+0x3cc>)
 8003770:	601a      	str	r2, [r3, #0]
   Calculated_yaw  = (float) (kalAngleZ);
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <Execute_Kalman_Filter+0x3b0>)
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	0010      	movs	r0, r2
 800377a:	0019      	movs	r1, r3
 800377c:	f7ff fc24 	bl	8002fc8 <__aeabi_d2f>
 8003780:	1c02      	adds	r2, r0, #0
 8003782:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <Execute_Kalman_Filter+0x3d0>)
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b014      	add	sp, #80	; 0x50
 800378c:	bc80      	pop	{r7}
 800378e:	46b8      	mov	r8, r7
 8003790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	20000358 	.word	0x20000358
 8003798:	2000035c 	.word	0x2000035c
 800379c:	20000320 	.word	0x20000320
 80037a0:	20000328 	.word	0x20000328
 80037a4:	20000330 	.word	0x20000330
 80037a8:	20000338 	.word	0x20000338
 80037ac:	20000340 	.word	0x20000340
 80037b0:	20000348 	.word	0x20000348
 80037b4:	20000350 	.word	0x20000350
 80037b8:	404ca5dc 	.word	0x404ca5dc
 80037bc:	3f7cac08 	.word	0x3f7cac08
 80037c0:	20000020 	.word	0x20000020
 80037c4:	20000300 	.word	0x20000300
 80037c8:	40768000 	.word	0x40768000
 80037cc:	c0768000 	.word	0xc0768000
 80037d0:	c0568000 	.word	0xc0568000
 80037d4:	40568000 	.word	0x40568000
 80037d8:	200002ac 	.word	0x200002ac
 80037dc:	20000318 	.word	0x20000318
 80037e0:	20000314 	.word	0x20000314
 80037e4:	2000031c 	.word	0x2000031c

080037e8 <Kalman_GetPitch>:

float Kalman_GetPitch(void) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  return Calculated_Pitch;
 80037ec:	4b02      	ldr	r3, [pc, #8]	; (80037f8 <Kalman_GetPitch+0x10>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	1c18      	adds	r0, r3, #0
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	20000314 	.word	0x20000314

080037fc <Kalman_GetRoll>:

float Kalman_GetRoll(void) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  return Calculated_Roll;
 8003800:	4b02      	ldr	r3, [pc, #8]	; (800380c <Kalman_GetRoll+0x10>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	1c18      	adds	r0, r3, #0
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	20000318 	.word	0x20000318

08003810 <Kalman_Getyaw>:

float Kalman_Getyaw(void) {
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
#if 1
  return Calculated_yaw;
 8003814:	4b02      	ldr	r3, [pc, #8]	; (8003820 <Kalman_Getyaw+0x10>)
 8003816:	681b      	ldr	r3, [r3, #0]

  double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
  	kalAngleZ = kalAngleZ+gyroZrate*timing_kalman;
  	return kalAngleZ;
#endif
}
 8003818:	1c18      	adds	r0, r3, #0
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	2000031c 	.word	0x2000031c

08003824 <Kalman_GetTick>:
		ExecuteTicks = 0;
	}
}

uint32_t Kalman_GetTick(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
	//return Kalman_Timer;
	return getMicros();
 8003828:	f001 faac 	bl	8004d84 <getMicros>
 800382c:	0003      	movs	r3, r0
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <Kalman_SetFlag>:

void Kalman_SetFlag(void) {
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
	KalmanFlag = 1;
 8003838:	4b02      	ldr	r3, [pc, #8]	; (8003844 <Kalman_SetFlag+0x10>)
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000310 	.word	0x20000310

08003848 <Kalman_GetFlag>:

uint8_t Kalman_GetFlag(void) {
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
	return KalmanFlag;
 800384c:	4b02      	ldr	r3, [pc, #8]	; (8003858 <Kalman_GetFlag+0x10>)
 800384e:	781b      	ldrb	r3, [r3, #0]
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	20000310 	.word	0x20000310

0800385c <Kalman_ClearFlag>:

void Kalman_ClearFlag(void) {
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
	KalmanFlag = 0;
 8003860:	4b02      	ldr	r3, [pc, #8]	; (800386c <Kalman_ClearFlag+0x10>)
 8003862:	2200      	movs	r2, #0
 8003864:	701a      	strb	r2, [r3, #0]
}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20000310 	.word	0x20000310

08003870 <KalmanX_getAngle>:

static float KalmanX_getAngle(float newAngle, float newRate, float dt) {
 8003870:	b5b0      	push	{r4, r5, r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
    KalmanX.rate = newRate - KalmanX.bias;
 800387c:	4b8a      	ldr	r3, [pc, #552]	; (8003aa8 <KalmanX_getAngle+0x238>)
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	1c19      	adds	r1, r3, #0
 8003882:	68b8      	ldr	r0, [r7, #8]
 8003884:	f7fd fb14 	bl	8000eb0 <__aeabi_fsub>
 8003888:	1c03      	adds	r3, r0, #0
 800388a:	1c1a      	adds	r2, r3, #0
 800388c:	4b86      	ldr	r3, [pc, #536]	; (8003aa8 <KalmanX_getAngle+0x238>)
 800388e:	615a      	str	r2, [r3, #20]
    KalmanX.angle += dt * KalmanX.rate;
 8003890:	4b85      	ldr	r3, [pc, #532]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003892:	68dc      	ldr	r4, [r3, #12]
 8003894:	4b84      	ldr	r3, [pc, #528]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	1c18      	adds	r0, r3, #0
 800389c:	f7fd f9e2 	bl	8000c64 <__aeabi_fmul>
 80038a0:	1c03      	adds	r3, r0, #0
 80038a2:	1c19      	adds	r1, r3, #0
 80038a4:	1c20      	adds	r0, r4, #0
 80038a6:	f7fc fe77 	bl	8000598 <__aeabi_fadd>
 80038aa:	1c03      	adds	r3, r0, #0
 80038ac:	1c1a      	adds	r2, r3, #0
 80038ae:	4b7e      	ldr	r3, [pc, #504]	; (8003aa8 <KalmanX_getAngle+0x238>)
 80038b0:	60da      	str	r2, [r3, #12]

    KalmanX.P[0][0] += dt * (dt*KalmanX.P[1][1] - KalmanX.P[0][1] - KalmanX.P[1][0] + KalmanX.Q_angle);
 80038b2:	4b7d      	ldr	r3, [pc, #500]	; (8003aa8 <KalmanX_getAngle+0x238>)
 80038b4:	699c      	ldr	r4, [r3, #24]
 80038b6:	4b7c      	ldr	r3, [pc, #496]	; (8003aa8 <KalmanX_getAngle+0x238>)
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	1c18      	adds	r0, r3, #0
 80038be:	f7fd f9d1 	bl	8000c64 <__aeabi_fmul>
 80038c2:	1c03      	adds	r3, r0, #0
 80038c4:	1c1a      	adds	r2, r3, #0
 80038c6:	4b78      	ldr	r3, [pc, #480]	; (8003aa8 <KalmanX_getAngle+0x238>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	1c19      	adds	r1, r3, #0
 80038cc:	1c10      	adds	r0, r2, #0
 80038ce:	f7fd faef 	bl	8000eb0 <__aeabi_fsub>
 80038d2:	1c03      	adds	r3, r0, #0
 80038d4:	1c1a      	adds	r2, r3, #0
 80038d6:	4b74      	ldr	r3, [pc, #464]	; (8003aa8 <KalmanX_getAngle+0x238>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	1c19      	adds	r1, r3, #0
 80038dc:	1c10      	adds	r0, r2, #0
 80038de:	f7fd fae7 	bl	8000eb0 <__aeabi_fsub>
 80038e2:	1c03      	adds	r3, r0, #0
 80038e4:	1c1a      	adds	r2, r3, #0
 80038e6:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <KalmanX_getAngle+0x238>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	1c19      	adds	r1, r3, #0
 80038ec:	1c10      	adds	r0, r2, #0
 80038ee:	f7fc fe53 	bl	8000598 <__aeabi_fadd>
 80038f2:	1c03      	adds	r3, r0, #0
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	1c18      	adds	r0, r3, #0
 80038f8:	f7fd f9b4 	bl	8000c64 <__aeabi_fmul>
 80038fc:	1c03      	adds	r3, r0, #0
 80038fe:	1c19      	adds	r1, r3, #0
 8003900:	1c20      	adds	r0, r4, #0
 8003902:	f7fc fe49 	bl	8000598 <__aeabi_fadd>
 8003906:	1c03      	adds	r3, r0, #0
 8003908:	1c1a      	adds	r2, r3, #0
 800390a:	4b67      	ldr	r3, [pc, #412]	; (8003aa8 <KalmanX_getAngle+0x238>)
 800390c:	619a      	str	r2, [r3, #24]
    KalmanX.P[0][1] -= dt * KalmanX.P[1][1];
 800390e:	4b66      	ldr	r3, [pc, #408]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003910:	69dc      	ldr	r4, [r3, #28]
 8003912:	4b65      	ldr	r3, [pc, #404]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	1c18      	adds	r0, r3, #0
 800391a:	f7fd f9a3 	bl	8000c64 <__aeabi_fmul>
 800391e:	1c03      	adds	r3, r0, #0
 8003920:	1c19      	adds	r1, r3, #0
 8003922:	1c20      	adds	r0, r4, #0
 8003924:	f7fd fac4 	bl	8000eb0 <__aeabi_fsub>
 8003928:	1c03      	adds	r3, r0, #0
 800392a:	1c1a      	adds	r2, r3, #0
 800392c:	4b5e      	ldr	r3, [pc, #376]	; (8003aa8 <KalmanX_getAngle+0x238>)
 800392e:	61da      	str	r2, [r3, #28]
    KalmanX.P[1][0] -= dt * KalmanX.P[1][1];
 8003930:	4b5d      	ldr	r3, [pc, #372]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003932:	6a1c      	ldr	r4, [r3, #32]
 8003934:	4b5c      	ldr	r3, [pc, #368]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	1c18      	adds	r0, r3, #0
 800393c:	f7fd f992 	bl	8000c64 <__aeabi_fmul>
 8003940:	1c03      	adds	r3, r0, #0
 8003942:	1c19      	adds	r1, r3, #0
 8003944:	1c20      	adds	r0, r4, #0
 8003946:	f7fd fab3 	bl	8000eb0 <__aeabi_fsub>
 800394a:	1c03      	adds	r3, r0, #0
 800394c:	1c1a      	adds	r2, r3, #0
 800394e:	4b56      	ldr	r3, [pc, #344]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003950:	621a      	str	r2, [r3, #32]
    KalmanX.P[1][1] += KalmanX.Q_bias * dt;
 8003952:	4b55      	ldr	r3, [pc, #340]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003954:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003956:	4b54      	ldr	r3, [pc, #336]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	1c18      	adds	r0, r3, #0
 800395e:	f7fd f981 	bl	8000c64 <__aeabi_fmul>
 8003962:	1c03      	adds	r3, r0, #0
 8003964:	1c19      	adds	r1, r3, #0
 8003966:	1c20      	adds	r0, r4, #0
 8003968:	f7fc fe16 	bl	8000598 <__aeabi_fadd>
 800396c:	1c03      	adds	r3, r0, #0
 800396e:	1c1a      	adds	r2, r3, #0
 8003970:	4b4d      	ldr	r3, [pc, #308]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
    
    float S = KalmanX.P[0][0] + KalmanX.R_measure;
 8003974:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	4b4b      	ldr	r3, [pc, #300]	; (8003aa8 <KalmanX_getAngle+0x238>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	1c19      	adds	r1, r3, #0
 800397e:	1c10      	adds	r0, r2, #0
 8003980:	f7fc fe0a 	bl	8000598 <__aeabi_fadd>
 8003984:	1c03      	adds	r3, r0, #0
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
    
    float K[2];
    K[0] = KalmanX.P[0][0] / S;
 8003988:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <KalmanX_getAngle+0x238>)
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800398e:	1c18      	adds	r0, r3, #0
 8003990:	f7fc ffa0 	bl	80008d4 <__aeabi_fdiv>
 8003994:	1c03      	adds	r3, r0, #0
 8003996:	1c1a      	adds	r2, r3, #0
 8003998:	2510      	movs	r5, #16
 800399a:	197b      	adds	r3, r7, r5
 800399c:	601a      	str	r2, [r3, #0]
    K[1] = KalmanX.P[1][0] / S;
 800399e:	4b42      	ldr	r3, [pc, #264]	; (8003aa8 <KalmanX_getAngle+0x238>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039a4:	1c18      	adds	r0, r3, #0
 80039a6:	f7fc ff95 	bl	80008d4 <__aeabi_fdiv>
 80039aa:	1c03      	adds	r3, r0, #0
 80039ac:	1c1a      	adds	r2, r3, #0
 80039ae:	197b      	adds	r3, r7, r5
 80039b0:	605a      	str	r2, [r3, #4]

    float y = newAngle - KalmanX.angle;
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <KalmanX_getAngle+0x238>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	1c19      	adds	r1, r3, #0
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7fd fa79 	bl	8000eb0 <__aeabi_fsub>
 80039be:	1c03      	adds	r3, r0, #0
 80039c0:	623b      	str	r3, [r7, #32]
    KalmanX.angle += K[0] * y;
 80039c2:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <KalmanX_getAngle+0x238>)
 80039c4:	68dc      	ldr	r4, [r3, #12]
 80039c6:	197b      	adds	r3, r7, r5
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a39      	ldr	r1, [r7, #32]
 80039cc:	1c18      	adds	r0, r3, #0
 80039ce:	f7fd f949 	bl	8000c64 <__aeabi_fmul>
 80039d2:	1c03      	adds	r3, r0, #0
 80039d4:	1c19      	adds	r1, r3, #0
 80039d6:	1c20      	adds	r0, r4, #0
 80039d8:	f7fc fdde 	bl	8000598 <__aeabi_fadd>
 80039dc:	1c03      	adds	r3, r0, #0
 80039de:	1c1a      	adds	r2, r3, #0
 80039e0:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <KalmanX_getAngle+0x238>)
 80039e2:	60da      	str	r2, [r3, #12]
    KalmanX.bias += K[1] * y;
 80039e4:	4b30      	ldr	r3, [pc, #192]	; (8003aa8 <KalmanX_getAngle+0x238>)
 80039e6:	691c      	ldr	r4, [r3, #16]
 80039e8:	197b      	adds	r3, r7, r5
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	6a39      	ldr	r1, [r7, #32]
 80039ee:	1c18      	adds	r0, r3, #0
 80039f0:	f7fd f938 	bl	8000c64 <__aeabi_fmul>
 80039f4:	1c03      	adds	r3, r0, #0
 80039f6:	1c19      	adds	r1, r3, #0
 80039f8:	1c20      	adds	r0, r4, #0
 80039fa:	f7fc fdcd 	bl	8000598 <__aeabi_fadd>
 80039fe:	1c03      	adds	r3, r0, #0
 8003a00:	1c1a      	adds	r2, r3, #0
 8003a02:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a04:	611a      	str	r2, [r3, #16]

    float P00_temp = KalmanX.P[0][0];
 8003a06:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	61fb      	str	r3, [r7, #28]
    float P01_temp = KalmanX.P[0][1];
 8003a0c:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	61bb      	str	r3, [r7, #24]

    KalmanX.P[0][0] -= K[0] * P00_temp;
 8003a12:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a14:	699c      	ldr	r4, [r3, #24]
 8003a16:	197b      	adds	r3, r7, r5
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69f9      	ldr	r1, [r7, #28]
 8003a1c:	1c18      	adds	r0, r3, #0
 8003a1e:	f7fd f921 	bl	8000c64 <__aeabi_fmul>
 8003a22:	1c03      	adds	r3, r0, #0
 8003a24:	1c19      	adds	r1, r3, #0
 8003a26:	1c20      	adds	r0, r4, #0
 8003a28:	f7fd fa42 	bl	8000eb0 <__aeabi_fsub>
 8003a2c:	1c03      	adds	r3, r0, #0
 8003a2e:	1c1a      	adds	r2, r3, #0
 8003a30:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a32:	619a      	str	r2, [r3, #24]
    KalmanX.P[0][1] -= K[0] * P01_temp;
 8003a34:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a36:	69dc      	ldr	r4, [r3, #28]
 8003a38:	197b      	adds	r3, r7, r5
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	69b9      	ldr	r1, [r7, #24]
 8003a3e:	1c18      	adds	r0, r3, #0
 8003a40:	f7fd f910 	bl	8000c64 <__aeabi_fmul>
 8003a44:	1c03      	adds	r3, r0, #0
 8003a46:	1c19      	adds	r1, r3, #0
 8003a48:	1c20      	adds	r0, r4, #0
 8003a4a:	f7fd fa31 	bl	8000eb0 <__aeabi_fsub>
 8003a4e:	1c03      	adds	r3, r0, #0
 8003a50:	1c1a      	adds	r2, r3, #0
 8003a52:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a54:	61da      	str	r2, [r3, #28]
    KalmanX.P[1][0] -= K[1] * P00_temp;
 8003a56:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a58:	6a1c      	ldr	r4, [r3, #32]
 8003a5a:	197b      	adds	r3, r7, r5
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	69f9      	ldr	r1, [r7, #28]
 8003a60:	1c18      	adds	r0, r3, #0
 8003a62:	f7fd f8ff 	bl	8000c64 <__aeabi_fmul>
 8003a66:	1c03      	adds	r3, r0, #0
 8003a68:	1c19      	adds	r1, r3, #0
 8003a6a:	1c20      	adds	r0, r4, #0
 8003a6c:	f7fd fa20 	bl	8000eb0 <__aeabi_fsub>
 8003a70:	1c03      	adds	r3, r0, #0
 8003a72:	1c1a      	adds	r2, r3, #0
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a76:	621a      	str	r2, [r3, #32]
    KalmanX.P[1][1] -= K[1] * P01_temp;
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a7a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003a7c:	197b      	adds	r3, r7, r5
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	69b9      	ldr	r1, [r7, #24]
 8003a82:	1c18      	adds	r0, r3, #0
 8003a84:	f7fd f8ee 	bl	8000c64 <__aeabi_fmul>
 8003a88:	1c03      	adds	r3, r0, #0
 8003a8a:	1c19      	adds	r1, r3, #0
 8003a8c:	1c20      	adds	r0, r4, #0
 8003a8e:	f7fd fa0f 	bl	8000eb0 <__aeabi_fsub>
 8003a92:	1c03      	adds	r3, r0, #0
 8003a94:	1c1a      	adds	r2, r3, #0
 8003a96:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24

    return KalmanX.angle;
 8003a9a:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <KalmanX_getAngle+0x238>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
}
 8003a9e:	1c18      	adds	r0, r3, #0
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b00a      	add	sp, #40	; 0x28
 8003aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	200002ac 	.word	0x200002ac

08003aac <KalmanY_getAngle>:

static float KalmanY_getAngle(float newAngle, float newRate, float dt) {
 8003aac:	b5b0      	push	{r4, r5, r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
    KalmanY.rate = newRate - KalmanY.bias;
 8003ab8:	4b8a      	ldr	r3, [pc, #552]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	1c19      	adds	r1, r3, #0
 8003abe:	68b8      	ldr	r0, [r7, #8]
 8003ac0:	f7fd f9f6 	bl	8000eb0 <__aeabi_fsub>
 8003ac4:	1c03      	adds	r3, r0, #0
 8003ac6:	1c1a      	adds	r2, r3, #0
 8003ac8:	4b86      	ldr	r3, [pc, #536]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003aca:	615a      	str	r2, [r3, #20]
    KalmanY.angle += dt * KalmanY.rate;
 8003acc:	4b85      	ldr	r3, [pc, #532]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003ace:	68dc      	ldr	r4, [r3, #12]
 8003ad0:	4b84      	ldr	r3, [pc, #528]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	1c18      	adds	r0, r3, #0
 8003ad8:	f7fd f8c4 	bl	8000c64 <__aeabi_fmul>
 8003adc:	1c03      	adds	r3, r0, #0
 8003ade:	1c19      	adds	r1, r3, #0
 8003ae0:	1c20      	adds	r0, r4, #0
 8003ae2:	f7fc fd59 	bl	8000598 <__aeabi_fadd>
 8003ae6:	1c03      	adds	r3, r0, #0
 8003ae8:	1c1a      	adds	r2, r3, #0
 8003aea:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003aec:	60da      	str	r2, [r3, #12]

    KalmanY.P[0][0] += dt * (dt*KalmanY.P[1][1] - KalmanY.P[0][1] - KalmanY.P[1][0] + KalmanY.Q_angle);
 8003aee:	4b7d      	ldr	r3, [pc, #500]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003af0:	699c      	ldr	r4, [r3, #24]
 8003af2:	4b7c      	ldr	r3, [pc, #496]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	1c18      	adds	r0, r3, #0
 8003afa:	f7fd f8b3 	bl	8000c64 <__aeabi_fmul>
 8003afe:	1c03      	adds	r3, r0, #0
 8003b00:	1c1a      	adds	r2, r3, #0
 8003b02:	4b78      	ldr	r3, [pc, #480]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	1c19      	adds	r1, r3, #0
 8003b08:	1c10      	adds	r0, r2, #0
 8003b0a:	f7fd f9d1 	bl	8000eb0 <__aeabi_fsub>
 8003b0e:	1c03      	adds	r3, r0, #0
 8003b10:	1c1a      	adds	r2, r3, #0
 8003b12:	4b74      	ldr	r3, [pc, #464]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	1c19      	adds	r1, r3, #0
 8003b18:	1c10      	adds	r0, r2, #0
 8003b1a:	f7fd f9c9 	bl	8000eb0 <__aeabi_fsub>
 8003b1e:	1c03      	adds	r3, r0, #0
 8003b20:	1c1a      	adds	r2, r3, #0
 8003b22:	4b70      	ldr	r3, [pc, #448]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	1c19      	adds	r1, r3, #0
 8003b28:	1c10      	adds	r0, r2, #0
 8003b2a:	f7fc fd35 	bl	8000598 <__aeabi_fadd>
 8003b2e:	1c03      	adds	r3, r0, #0
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	1c18      	adds	r0, r3, #0
 8003b34:	f7fd f896 	bl	8000c64 <__aeabi_fmul>
 8003b38:	1c03      	adds	r3, r0, #0
 8003b3a:	1c19      	adds	r1, r3, #0
 8003b3c:	1c20      	adds	r0, r4, #0
 8003b3e:	f7fc fd2b 	bl	8000598 <__aeabi_fadd>
 8003b42:	1c03      	adds	r3, r0, #0
 8003b44:	1c1a      	adds	r2, r3, #0
 8003b46:	4b67      	ldr	r3, [pc, #412]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b48:	619a      	str	r2, [r3, #24]
    KalmanY.P[0][1] -= dt * KalmanY.P[1][1];
 8003b4a:	4b66      	ldr	r3, [pc, #408]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b4c:	69dc      	ldr	r4, [r3, #28]
 8003b4e:	4b65      	ldr	r3, [pc, #404]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	1c18      	adds	r0, r3, #0
 8003b56:	f7fd f885 	bl	8000c64 <__aeabi_fmul>
 8003b5a:	1c03      	adds	r3, r0, #0
 8003b5c:	1c19      	adds	r1, r3, #0
 8003b5e:	1c20      	adds	r0, r4, #0
 8003b60:	f7fd f9a6 	bl	8000eb0 <__aeabi_fsub>
 8003b64:	1c03      	adds	r3, r0, #0
 8003b66:	1c1a      	adds	r2, r3, #0
 8003b68:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b6a:	61da      	str	r2, [r3, #28]
    KalmanY.P[1][0] -= dt * KalmanY.P[1][1];
 8003b6c:	4b5d      	ldr	r3, [pc, #372]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b6e:	6a1c      	ldr	r4, [r3, #32]
 8003b70:	4b5c      	ldr	r3, [pc, #368]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	1c18      	adds	r0, r3, #0
 8003b78:	f7fd f874 	bl	8000c64 <__aeabi_fmul>
 8003b7c:	1c03      	adds	r3, r0, #0
 8003b7e:	1c19      	adds	r1, r3, #0
 8003b80:	1c20      	adds	r0, r4, #0
 8003b82:	f7fd f995 	bl	8000eb0 <__aeabi_fsub>
 8003b86:	1c03      	adds	r3, r0, #0
 8003b88:	1c1a      	adds	r2, r3, #0
 8003b8a:	4b56      	ldr	r3, [pc, #344]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b8c:	621a      	str	r2, [r3, #32]
    KalmanY.P[1][1] += KalmanY.Q_bias * dt;
 8003b8e:	4b55      	ldr	r3, [pc, #340]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b90:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003b92:	4b54      	ldr	r3, [pc, #336]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	1c18      	adds	r0, r3, #0
 8003b9a:	f7fd f863 	bl	8000c64 <__aeabi_fmul>
 8003b9e:	1c03      	adds	r3, r0, #0
 8003ba0:	1c19      	adds	r1, r3, #0
 8003ba2:	1c20      	adds	r0, r4, #0
 8003ba4:	f7fc fcf8 	bl	8000598 <__aeabi_fadd>
 8003ba8:	1c03      	adds	r3, r0, #0
 8003baa:	1c1a      	adds	r2, r3, #0
 8003bac:	4b4d      	ldr	r3, [pc, #308]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24
    
    float S = KalmanY.P[0][0] + KalmanY.R_measure;
 8003bb0:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	4b4b      	ldr	r3, [pc, #300]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	1c19      	adds	r1, r3, #0
 8003bba:	1c10      	adds	r0, r2, #0
 8003bbc:	f7fc fcec 	bl	8000598 <__aeabi_fadd>
 8003bc0:	1c03      	adds	r3, r0, #0
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
    
    float K[2];
    K[0] = KalmanY.P[0][0] / S;
 8003bc4:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bca:	1c18      	adds	r0, r3, #0
 8003bcc:	f7fc fe82 	bl	80008d4 <__aeabi_fdiv>
 8003bd0:	1c03      	adds	r3, r0, #0
 8003bd2:	1c1a      	adds	r2, r3, #0
 8003bd4:	2510      	movs	r5, #16
 8003bd6:	197b      	adds	r3, r7, r5
 8003bd8:	601a      	str	r2, [r3, #0]
    K[1] = KalmanY.P[1][0] / S;
 8003bda:	4b42      	ldr	r3, [pc, #264]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003be0:	1c18      	adds	r0, r3, #0
 8003be2:	f7fc fe77 	bl	80008d4 <__aeabi_fdiv>
 8003be6:	1c03      	adds	r3, r0, #0
 8003be8:	1c1a      	adds	r2, r3, #0
 8003bea:	197b      	adds	r3, r7, r5
 8003bec:	605a      	str	r2, [r3, #4]


    float y = newAngle - KalmanY.angle;
 8003bee:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	1c19      	adds	r1, r3, #0
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f7fd f95b 	bl	8000eb0 <__aeabi_fsub>
 8003bfa:	1c03      	adds	r3, r0, #0
 8003bfc:	623b      	str	r3, [r7, #32]

    KalmanY.angle += K[0] * y;
 8003bfe:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003c00:	68dc      	ldr	r4, [r3, #12]
 8003c02:	197b      	adds	r3, r7, r5
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6a39      	ldr	r1, [r7, #32]
 8003c08:	1c18      	adds	r0, r3, #0
 8003c0a:	f7fd f82b 	bl	8000c64 <__aeabi_fmul>
 8003c0e:	1c03      	adds	r3, r0, #0
 8003c10:	1c19      	adds	r1, r3, #0
 8003c12:	1c20      	adds	r0, r4, #0
 8003c14:	f7fc fcc0 	bl	8000598 <__aeabi_fadd>
 8003c18:	1c03      	adds	r3, r0, #0
 8003c1a:	1c1a      	adds	r2, r3, #0
 8003c1c:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003c1e:	60da      	str	r2, [r3, #12]
    KalmanY.bias += K[1] * y;
 8003c20:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003c22:	691c      	ldr	r4, [r3, #16]
 8003c24:	197b      	adds	r3, r7, r5
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	6a39      	ldr	r1, [r7, #32]
 8003c2a:	1c18      	adds	r0, r3, #0
 8003c2c:	f7fd f81a 	bl	8000c64 <__aeabi_fmul>
 8003c30:	1c03      	adds	r3, r0, #0
 8003c32:	1c19      	adds	r1, r3, #0
 8003c34:	1c20      	adds	r0, r4, #0
 8003c36:	f7fc fcaf 	bl	8000598 <__aeabi_fadd>
 8003c3a:	1c03      	adds	r3, r0, #0
 8003c3c:	1c1a      	adds	r2, r3, #0
 8003c3e:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003c40:	611a      	str	r2, [r3, #16]

    float P00_temp = KalmanY.P[0][0];
 8003c42:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	61fb      	str	r3, [r7, #28]
    float P01_temp = KalmanY.P[0][1];
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	61bb      	str	r3, [r7, #24]

    KalmanY.P[0][0] -= K[0] * P00_temp;
 8003c4e:	4b25      	ldr	r3, [pc, #148]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003c50:	699c      	ldr	r4, [r3, #24]
 8003c52:	197b      	adds	r3, r7, r5
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69f9      	ldr	r1, [r7, #28]
 8003c58:	1c18      	adds	r0, r3, #0
 8003c5a:	f7fd f803 	bl	8000c64 <__aeabi_fmul>
 8003c5e:	1c03      	adds	r3, r0, #0
 8003c60:	1c19      	adds	r1, r3, #0
 8003c62:	1c20      	adds	r0, r4, #0
 8003c64:	f7fd f924 	bl	8000eb0 <__aeabi_fsub>
 8003c68:	1c03      	adds	r3, r0, #0
 8003c6a:	1c1a      	adds	r2, r3, #0
 8003c6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003c6e:	619a      	str	r2, [r3, #24]
    KalmanY.P[0][1] -= K[0] * P01_temp;
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003c72:	69dc      	ldr	r4, [r3, #28]
 8003c74:	197b      	adds	r3, r7, r5
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69b9      	ldr	r1, [r7, #24]
 8003c7a:	1c18      	adds	r0, r3, #0
 8003c7c:	f7fc fff2 	bl	8000c64 <__aeabi_fmul>
 8003c80:	1c03      	adds	r3, r0, #0
 8003c82:	1c19      	adds	r1, r3, #0
 8003c84:	1c20      	adds	r0, r4, #0
 8003c86:	f7fd f913 	bl	8000eb0 <__aeabi_fsub>
 8003c8a:	1c03      	adds	r3, r0, #0
 8003c8c:	1c1a      	adds	r2, r3, #0
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003c90:	61da      	str	r2, [r3, #28]
    KalmanY.P[1][0] -= K[1] * P00_temp;
 8003c92:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003c94:	6a1c      	ldr	r4, [r3, #32]
 8003c96:	197b      	adds	r3, r7, r5
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	69f9      	ldr	r1, [r7, #28]
 8003c9c:	1c18      	adds	r0, r3, #0
 8003c9e:	f7fc ffe1 	bl	8000c64 <__aeabi_fmul>
 8003ca2:	1c03      	adds	r3, r0, #0
 8003ca4:	1c19      	adds	r1, r3, #0
 8003ca6:	1c20      	adds	r0, r4, #0
 8003ca8:	f7fd f902 	bl	8000eb0 <__aeabi_fsub>
 8003cac:	1c03      	adds	r3, r0, #0
 8003cae:	1c1a      	adds	r2, r3, #0
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003cb2:	621a      	str	r2, [r3, #32]
    KalmanY.P[1][1] -= K[1] * P01_temp;
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003cb6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003cb8:	197b      	adds	r3, r7, r5
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	1c18      	adds	r0, r3, #0
 8003cc0:	f7fc ffd0 	bl	8000c64 <__aeabi_fmul>
 8003cc4:	1c03      	adds	r3, r0, #0
 8003cc6:	1c19      	adds	r1, r3, #0
 8003cc8:	1c20      	adds	r0, r4, #0
 8003cca:	f7fd f8f1 	bl	8000eb0 <__aeabi_fsub>
 8003cce:	1c03      	adds	r3, r0, #0
 8003cd0:	1c1a      	adds	r2, r3, #0
 8003cd2:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24

    return KalmanY.angle;
 8003cd6:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <KalmanY_getAngle+0x238>)
 8003cd8:	68db      	ldr	r3, [r3, #12]
}
 8003cda:	1c18      	adds	r0, r3, #0
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b00a      	add	sp, #40	; 0x28
 8003ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	200002d4 	.word	0x200002d4

08003ce8 <LSM6DS3_Initialize>:
 * 			        - LSM6DS3_SA0_HIGH_LEVEL address -> (0x6B << 1)
 * 		   timeout: Set the timeout for the I2C peripheral
 * 		   i2c_channel: Define the selected I2C channel for the IMU
 * @retval None
*/
void LSM6DS3_Initialize(SPI_TypeDef* spi_channel, uint16_t timeout) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	000a      	movs	r2, r1
 8003cf2:	1cbb      	adds	r3, r7, #2
 8003cf4:	801a      	strh	r2, [r3, #0]
	
	SPIx_init(spi_channel);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f003 fedd 	bl	8007ab8 <SPIx_init>
	LSM6DS3_parameters.timeout	   = timeout;
 8003cfe:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <LSM6DS3_Initialize+0x2c>)
 8003d00:	1cba      	adds	r2, r7, #2
 8003d02:	8812      	ldrh	r2, [r2, #0]
 8003d04:	809a      	strh	r2, [r3, #4]
	LSM6DS3_parameters.spi_channel = spi_channel;
 8003d06:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <LSM6DS3_Initialize+0x2c>)
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b002      	add	sp, #8
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000360 	.word	0x20000360

08003d18 <LSM6DS3_Detect>:
 * @param  None
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
LSM6DS3_Result LSM6DS3_Detect(uint8_t efforts) {
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	0002      	movs	r2, r0
 8003d20:	1dfb      	adds	r3, r7, #7
 8003d22:	701a      	strb	r2, [r3, #0]
	uint8_t byte;

	while(efforts > 0) {
 8003d24:	e01f      	b.n	8003d66 <LSM6DS3_Detect+0x4e>
		if(LSM6DS3_ReadRegister(LSM6DS3_XL_GS_WHO_AM_I_REG, &byte, sizeof(byte)) == LSM6DS3_OK) {
 8003d26:	240f      	movs	r4, #15
 8003d28:	193b      	adds	r3, r7, r4
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	200f      	movs	r0, #15
 8003d30:	f000 f9c2 	bl	80040b8 <LSM6DS3_ReadRegister>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d111      	bne.n	8003d5c <LSM6DS3_Detect+0x44>
			if(byte == LSM6DS3N_WHO_I_AM_RESPONSE ||
 8003d38:	193b      	adds	r3, r7, r4
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b6c      	cmp	r3, #108	; 0x6c
 8003d3e:	d00b      	beq.n	8003d58 <LSM6DS3_Detect+0x40>
					byte == LSM6DS3_WHO_I_AM_RESPONSE ||
 8003d40:	193b      	adds	r3, r7, r4
 8003d42:	781b      	ldrb	r3, [r3, #0]
			if(byte == LSM6DS3N_WHO_I_AM_RESPONSE ||
 8003d44:	2b69      	cmp	r3, #105	; 0x69
 8003d46:	d007      	beq.n	8003d58 <LSM6DS3_Detect+0x40>
					byte == LSM6DS3TRC_WHO_I_AM_RESPONSE||
 8003d48:	193b      	adds	r3, r7, r4
 8003d4a:	781b      	ldrb	r3, [r3, #0]
					byte == LSM6DS3_WHO_I_AM_RESPONSE ||
 8003d4c:	2b6a      	cmp	r3, #106	; 0x6a
 8003d4e:	d003      	beq.n	8003d58 <LSM6DS3_Detect+0x40>
					byte == LSM6DS3TR_WHO_I_AM_RESPONSE) {
 8003d50:	193b      	adds	r3, r7, r4
 8003d52:	781b      	ldrb	r3, [r3, #0]
					byte == LSM6DS3TRC_WHO_I_AM_RESPONSE||
 8003d54:	2b6b      	cmp	r3, #107	; 0x6b
 8003d56:	d101      	bne.n	8003d5c <LSM6DS3_Detect+0x44>

				return LSM6DS3_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e009      	b.n	8003d70 <LSM6DS3_Detect+0x58>
			}
		}
		//delay_ms(2);
		efforts--;
 8003d5c:	1dfb      	adds	r3, r7, #7
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	1dfb      	adds	r3, r7, #7
 8003d62:	3a01      	subs	r2, #1
 8003d64:	701a      	strb	r2, [r3, #0]
	while(efforts > 0) {
 8003d66:	1dfb      	adds	r3, r7, #7
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1db      	bne.n	8003d26 <LSM6DS3_Detect+0xe>
	}
	return LSM6DS3_FAIL;
 8003d6e:	2301      	movs	r3, #1
}
 8003d70:	0018      	movs	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b005      	add	sp, #20
 8003d76:	bd90      	pop	{r4, r7, pc}

08003d78 <LSM6DS3_XL_Start>:
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
LSM6DS3_Result LSM6DS3_XL_Start(uint8_t XL_Rate, uint8_t XL_Scale, uint8_t XL_Filter) {
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	0004      	movs	r4, r0
 8003d80:	0008      	movs	r0, r1
 8003d82:	0011      	movs	r1, r2
 8003d84:	1dfb      	adds	r3, r7, #7
 8003d86:	1c22      	adds	r2, r4, #0
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	1dbb      	adds	r3, r7, #6
 8003d8c:	1c02      	adds	r2, r0, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	1d7b      	adds	r3, r7, #5
 8003d92:	1c0a      	adds	r2, r1, #0
 8003d94:	701a      	strb	r2, [r3, #0]
	uint8_t byte = (XL_Rate << 4) | ((XL_Scale << 2) & 0x0F) | (XL_Filter & 0x03);
 8003d96:	1dfb      	adds	r3, r7, #7
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	b25a      	sxtb	r2, r3
 8003d9e:	1dbb      	adds	r3, r7, #6
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	210f      	movs	r1, #15
 8003da8:	400b      	ands	r3, r1
 8003daa:	b25b      	sxtb	r3, r3
 8003dac:	4313      	orrs	r3, r2
 8003dae:	b25a      	sxtb	r2, r3
 8003db0:	1d7b      	adds	r3, r7, #5
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	2103      	movs	r1, #3
 8003db8:	400b      	ands	r3, r1
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	230f      	movs	r3, #15
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	701a      	strb	r2, [r3, #0]

	if(LSM6DS3_Verify_XL_Settings(XL_Rate, XL_Scale, XL_Filter) !=  LSM6DS3_OK){
 8003dc8:	1d7b      	adds	r3, r7, #5
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	1dbb      	adds	r3, r7, #6
 8003dce:	7819      	ldrb	r1, [r3, #0]
 8003dd0:	1dfb      	adds	r3, r7, #7
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f000 f815 	bl	8003e04 <LSM6DS3_Verify_XL_Settings>
 8003dda:	1e03      	subs	r3, r0, #0
 8003ddc:	d001      	beq.n	8003de2 <LSM6DS3_XL_Start+0x6a>

		return LSM6DS3_FAIL_PARAMETERS;
 8003dde:	2302      	movs	r3, #2
 8003de0:	e00b      	b.n	8003dfa <LSM6DS3_XL_Start+0x82>
		//xprintf("%s-%d\r\n",__func__,__LINE__);
	}

	if(LSM6DS3_WriteAndVerify(LSM6DS3_XL_GS_CTRL1_XL, &byte, sizeof(byte)) !=  LSM6DS3_OK){
 8003de2:	230f      	movs	r3, #15
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	2201      	movs	r2, #1
 8003de8:	0019      	movs	r1, r3
 8003dea:	2010      	movs	r0, #16
 8003dec:	f000 f988 	bl	8004100 <LSM6DS3_WriteAndVerify>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d001      	beq.n	8003df8 <LSM6DS3_XL_Start+0x80>

		return LSM6DS3_FAIL;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <LSM6DS3_XL_Start+0x82>
		//xprintf("%s-%d\r\n",__func__,__LINE__);
	}

	return LSM6DS3_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b005      	add	sp, #20
 8003e00:	bd90      	pop	{r4, r7, pc}
	...

08003e04 <LSM6DS3_Verify_XL_Settings>:
 * @param  None
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
static LSM6DS3_Result LSM6DS3_Verify_XL_Settings(uint8_t XL_Rate, uint8_t XL_Range, uint8_t XL_Filter) {
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	0004      	movs	r4, r0
 8003e0c:	0008      	movs	r0, r1
 8003e0e:	0011      	movs	r1, r2
 8003e10:	1dfb      	adds	r3, r7, #7
 8003e12:	1c22      	adds	r2, r4, #0
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	1dbb      	adds	r3, r7, #6
 8003e18:	1c02      	adds	r2, r0, #0
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	1d7b      	adds	r3, r7, #5
 8003e1e:	1c0a      	adds	r2, r1, #0
 8003e20:	701a      	strb	r2, [r3, #0]
	if((XL_Rate < XL_12_5Hz) || (XL_Rate > XL_6660Hz))
 8003e22:	1dfb      	adds	r3, r7, #7
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <LSM6DS3_Verify_XL_Settings+0x2e>
 8003e2a:	1dfb      	adds	r3, r7, #7
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b0a      	cmp	r3, #10
 8003e30:	d901      	bls.n	8003e36 <LSM6DS3_Verify_XL_Settings+0x32>
		return LSM6DS3_FAIL_PARAMETERS;
 8003e32:	2302      	movs	r3, #2
 8003e34:	e010      	b.n	8003e58 <LSM6DS3_Verify_XL_Settings+0x54>
	else if((XL_Range < XL_RANGE_2G) || (XL_Range > XL_RANGE_8G))
 8003e36:	1dbb      	adds	r3, r7, #6
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d901      	bls.n	8003e42 <LSM6DS3_Verify_XL_Settings+0x3e>
		return LSM6DS3_FAIL_PARAMETERS;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e00a      	b.n	8003e58 <LSM6DS3_Verify_XL_Settings+0x54>
	else if((XL_Filter < XL_FILTER_400Hz) || (XL_Filter > XL_FILTER_50Hz))
 8003e42:	1d7b      	adds	r3, r7, #5
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d901      	bls.n	8003e4e <LSM6DS3_Verify_XL_Settings+0x4a>
		return LSM6DS3_FAIL_PARAMETERS;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e004      	b.n	8003e58 <LSM6DS3_Verify_XL_Settings+0x54>
	LSM6DS3_parameters.XL_range = XL_Range;
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <LSM6DS3_Verify_XL_Settings+0x5c>)
 8003e50:	1dba      	adds	r2, r7, #6
 8003e52:	7812      	ldrb	r2, [r2, #0]
 8003e54:	701a      	strb	r2, [r3, #0]
	return LSM6DS3_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	0018      	movs	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b003      	add	sp, #12
 8003e5e:	bd90      	pop	{r4, r7, pc}
 8003e60:	20000360 	.word	0x20000360

08003e64 <LSM6DS3_GS_Start>:
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
LSM6DS3_Result LSM6DS3_GS_Start(uint8_t GS_Rate, uint8_t GS_Range) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	1dfb      	adds	r3, r7, #7
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	1dbb      	adds	r3, r7, #6
 8003e72:	1c0a      	adds	r2, r1, #0
 8003e74:	701a      	strb	r2, [r3, #0]
	uint8_t byte = (GS_Rate << 4) | ((GS_Range << 1) & 0x0F);
 8003e76:	1dfb      	adds	r3, r7, #7
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	b25a      	sxtb	r2, r3
 8003e7e:	1dbb      	adds	r3, r7, #6
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	210f      	movs	r1, #15
 8003e88:	400b      	ands	r3, r1
 8003e8a:	b25b      	sxtb	r3, r3
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	b25b      	sxtb	r3, r3
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	210f      	movs	r1, #15
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	701a      	strb	r2, [r3, #0]

	byte &= 0xFE; /* Always secure the LSB is 0 */
 8003e98:	187b      	adds	r3, r7, r1
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4393      	bics	r3, r2
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	701a      	strb	r2, [r3, #0]
	if(LSM6DS3_Verify_GS_Settings(GS_Rate, GS_Range) !=  LSM6DS3_OK){
 8003ea6:	1dbb      	adds	r3, r7, #6
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	1dfb      	adds	r3, r7, #7
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	0011      	movs	r1, r2
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f000 f825 	bl	8003f00 <LSM6DS3_Verify_GS_Settings>
 8003eb6:	1e03      	subs	r3, r0, #0
 8003eb8:	d007      	beq.n	8003eca <LSM6DS3_GS_Start+0x66>

		xprintf("%s-%d\r\n",__func__,__LINE__);
 8003eba:	490f      	ldr	r1, [pc, #60]	; (8003ef8 <LSM6DS3_GS_Start+0x94>)
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <LSM6DS3_GS_Start+0x98>)
 8003ebe:	22b8      	movs	r2, #184	; 0xb8
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f004 faa7 	bl	8008414 <xprintf>
		return LSM6DS3_FAIL_PARAMETERS;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e011      	b.n	8003eee <LSM6DS3_GS_Start+0x8a>

	}

	if(LSM6DS3_WriteAndVerify(LSM6DS3_XL_GS_CTRL2_G, &byte, sizeof(byte)) !=  LSM6DS3_OK){
 8003eca:	230f      	movs	r3, #15
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	2201      	movs	r2, #1
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	2011      	movs	r0, #17
 8003ed4:	f000 f914 	bl	8004100 <LSM6DS3_WriteAndVerify>
 8003ed8:	1e03      	subs	r3, r0, #0
 8003eda:	d007      	beq.n	8003eec <LSM6DS3_GS_Start+0x88>
		xprintf("%s-%d\r\n",__func__,__LINE__);
 8003edc:	4906      	ldr	r1, [pc, #24]	; (8003ef8 <LSM6DS3_GS_Start+0x94>)
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <LSM6DS3_GS_Start+0x98>)
 8003ee0:	22be      	movs	r2, #190	; 0xbe
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f004 fa96 	bl	8008414 <xprintf>
		return LSM6DS3_FAIL;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <LSM6DS3_GS_Start+0x8a>
	}

	return LSM6DS3_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	0800d2f8 	.word	0x0800d2f8
 8003efc:	0800cda0 	.word	0x0800cda0

08003f00 <LSM6DS3_Verify_GS_Settings>:
 * @param  None
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
static LSM6DS3_Result LSM6DS3_Verify_GS_Settings(uint8_t GS_Rate, uint8_t GS_Range) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	0002      	movs	r2, r0
 8003f08:	1dfb      	adds	r3, r7, #7
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	1dbb      	adds	r3, r7, #6
 8003f0e:	1c0a      	adds	r2, r1, #0
 8003f10:	701a      	strb	r2, [r3, #0]
	if((GS_Rate < GS_12_5Hz) || (GS_Rate > GS_1666Hz))
 8003f12:	1dfb      	adds	r3, r7, #7
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <LSM6DS3_Verify_GS_Settings+0x22>
 8003f1a:	1dfb      	adds	r3, r7, #7
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d901      	bls.n	8003f26 <LSM6DS3_Verify_GS_Settings+0x26>
		return LSM6DS3_FAIL_PARAMETERS;
 8003f22:	2302      	movs	r3, #2
 8003f24:	e012      	b.n	8003f4c <LSM6DS3_Verify_GS_Settings+0x4c>
	else if((GS_Range < GS_RANGE_250dps) || (GS_Range > GS_RANGE_2000dps) || (GS_Range == 3) || (GS_Range == 5))
 8003f26:	1dbb      	adds	r3, r7, #6
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d807      	bhi.n	8003f3e <LSM6DS3_Verify_GS_Settings+0x3e>
 8003f2e:	1dbb      	adds	r3, r7, #6
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d003      	beq.n	8003f3e <LSM6DS3_Verify_GS_Settings+0x3e>
 8003f36:	1dbb      	adds	r3, r7, #6
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d101      	bne.n	8003f42 <LSM6DS3_Verify_GS_Settings+0x42>
		return LSM6DS3_FAIL_PARAMETERS;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e004      	b.n	8003f4c <LSM6DS3_Verify_GS_Settings+0x4c>
	LSM6DS3_parameters.GS_range = GS_Range;
 8003f42:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <LSM6DS3_Verify_GS_Settings+0x54>)
 8003f44:	1dba      	adds	r2, r7, #6
 8003f46:	7812      	ldrb	r2, [r2, #0]
 8003f48:	705a      	strb	r2, [r3, #1]
	return LSM6DS3_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000360 	.word	0x20000360

08003f58 <LSM6DS3_IMU_GetMeasurements>:
 * @param  None
 * @retval enum LSM6DS3_Result:
* 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
LSM6DS3_Result LSM6DS3_IMU_GetMeasurements(void) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
	uint8_t bytes[14] = {0};
 8003f5e:	003b      	movs	r3, r7
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	3304      	adds	r3, #4
 8003f66:	220a      	movs	r2, #10
 8003f68:	2100      	movs	r1, #0
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f005 fb9b 	bl	80096a6 <memset>

	if(LSM6DS3_ReadRegister(LSM6DS3_XL_GS_OUT_TEMP_L, bytes, sizeof(bytes)) == LSM6DS3_OK) {
 8003f70:	003b      	movs	r3, r7
 8003f72:	220e      	movs	r2, #14
 8003f74:	0019      	movs	r1, r3
 8003f76:	2020      	movs	r0, #32
 8003f78:	f000 f89e 	bl	80040b8 <LSM6DS3_ReadRegister>
 8003f7c:	1e03      	subs	r3, r0, #0
 8003f7e:	d14e      	bne.n	800401e <LSM6DS3_IMU_GetMeasurements+0xc6>
		LSM6DS3_data.Temperature = (int16_t) (bytes[1]<<8  | bytes[0]);
 8003f80:	003b      	movs	r3, r7
 8003f82:	785b      	ldrb	r3, [r3, #1]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	b21a      	sxth	r2, r3
 8003f88:	003b      	movs	r3, r7
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	b21b      	sxth	r3, r3
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	b21a      	sxth	r2, r3
 8003f92:	4b25      	ldr	r3, [pc, #148]	; (8004028 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 8003f94:	819a      	strh	r2, [r3, #12]
		LSM6DS3_data.GS_x 		 = (int16_t) (bytes[3]<<8  | bytes[2]);
 8003f96:	003b      	movs	r3, r7
 8003f98:	78db      	ldrb	r3, [r3, #3]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	b21a      	sxth	r2, r3
 8003f9e:	003b      	movs	r3, r7
 8003fa0:	789b      	ldrb	r3, [r3, #2]
 8003fa2:	b21b      	sxth	r3, r3
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	b21a      	sxth	r2, r3
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 8003faa:	80da      	strh	r2, [r3, #6]
		LSM6DS3_data.GS_y 		 = (int16_t) (bytes[5]<<8  | bytes[4]);
 8003fac:	003b      	movs	r3, r7
 8003fae:	795b      	ldrb	r3, [r3, #5]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	b21a      	sxth	r2, r3
 8003fb4:	003b      	movs	r3, r7
 8003fb6:	791b      	ldrb	r3, [r3, #4]
 8003fb8:	b21b      	sxth	r3, r3
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	b21a      	sxth	r2, r3
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 8003fc0:	811a      	strh	r2, [r3, #8]
		LSM6DS3_data.GS_z 		 = (int16_t) (bytes[7]<<8  | bytes[6]);
 8003fc2:	003b      	movs	r3, r7
 8003fc4:	79db      	ldrb	r3, [r3, #7]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	b21a      	sxth	r2, r3
 8003fca:	003b      	movs	r3, r7
 8003fcc:	799b      	ldrb	r3, [r3, #6]
 8003fce:	b21b      	sxth	r3, r3
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	b21a      	sxth	r2, r3
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 8003fd6:	815a      	strh	r2, [r3, #10]
		LSM6DS3_data.XL_x 		 = (int16_t) (bytes[9]<<8  | bytes[8]);
 8003fd8:	003b      	movs	r3, r7
 8003fda:	7a5b      	ldrb	r3, [r3, #9]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	b21a      	sxth	r2, r3
 8003fe0:	003b      	movs	r3, r7
 8003fe2:	7a1b      	ldrb	r3, [r3, #8]
 8003fe4:	b21b      	sxth	r3, r3
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	b21a      	sxth	r2, r3
 8003fea:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 8003fec:	801a      	strh	r2, [r3, #0]
		LSM6DS3_data.XL_y 		 = (int16_t) (bytes[11]<<8 | bytes[10]);
 8003fee:	003b      	movs	r3, r7
 8003ff0:	7adb      	ldrb	r3, [r3, #11]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	b21a      	sxth	r2, r3
 8003ff6:	003b      	movs	r3, r7
 8003ff8:	7a9b      	ldrb	r3, [r3, #10]
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	b21a      	sxth	r2, r3
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 8004002:	805a      	strh	r2, [r3, #2]
		LSM6DS3_data.XL_z 		 = (int16_t) (bytes[13]<<8 | bytes[12]);
 8004004:	003b      	movs	r3, r7
 8004006:	7b5b      	ldrb	r3, [r3, #13]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	b21a      	sxth	r2, r3
 800400c:	003b      	movs	r3, r7
 800400e:	7b1b      	ldrb	r3, [r3, #12]
 8004010:	b21b      	sxth	r3, r3
 8004012:	4313      	orrs	r3, r2
 8004014:	b21a      	sxth	r2, r3
 8004016:	4b04      	ldr	r3, [pc, #16]	; (8004028 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 8004018:	809a      	strh	r2, [r3, #4]
		return LSM6DS3_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e000      	b.n	8004020 <LSM6DS3_IMU_GetMeasurements+0xc8>
	}
	return LSM6DS3_FAIL;
 800401e:	2301      	movs	r3, #1
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b004      	add	sp, #16
 8004026:	bd80      	pop	{r7, pc}
 8004028:	2000036c 	.word	0x2000036c

0800402c <LSM6DS3_GetXL_X_Int16>:
/*
 * @brief  Get the raw data of X axe (Accelerometer)
 * @param  none
 * @retval int16_t: Raw data of X axe
*/
int16_t LSM6DS3_GetXL_X_Int16(void) {
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
	return LSM6DS3_data.XL_x;
 8004030:	4b02      	ldr	r3, [pc, #8]	; (800403c <LSM6DS3_GetXL_X_Int16+0x10>)
 8004032:	2200      	movs	r2, #0
 8004034:	5e9b      	ldrsh	r3, [r3, r2]
}
 8004036:	0018      	movs	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	2000036c 	.word	0x2000036c

08004040 <LSM6DS3_GetXL_Y_Int16>:
/*
 * @brief  Get the raw data of Y axe (Accelerometer)
 * @param  None
 * @retval int16_t: Raw data of Y axe
*/
int16_t LSM6DS3_GetXL_Y_Int16(void) {
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
	return LSM6DS3_data.XL_y;
 8004044:	4b02      	ldr	r3, [pc, #8]	; (8004050 <LSM6DS3_GetXL_Y_Int16+0x10>)
 8004046:	2202      	movs	r2, #2
 8004048:	5e9b      	ldrsh	r3, [r3, r2]
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	2000036c 	.word	0x2000036c

08004054 <LSM6DS3_GetXL_Z_Int16>:
/*
 * @brief  Get the raw data of Z axe (Accelerometer)
 * @param  None
 * @retval int16_t: Raw data of Z axe
*/
int16_t LSM6DS3_GetXL_Z_Int16(void) {
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
	return LSM6DS3_data.XL_z;
 8004058:	4b02      	ldr	r3, [pc, #8]	; (8004064 <LSM6DS3_GetXL_Z_Int16+0x10>)
 800405a:	2204      	movs	r2, #4
 800405c:	5e9b      	ldrsh	r3, [r3, r2]
}
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	2000036c 	.word	0x2000036c

08004068 <LSM6DS3_GetGS_X_Int16>:
/*
 * @brief  Get the raw data of X axe (Gyroscope)
 * @param  None
 * @retval int16_t: Raw data of X axe
*/
int16_t LSM6DS3_GetGS_X_Int16(void) {
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
	return LSM6DS3_data.GS_x;
 800406c:	4b02      	ldr	r3, [pc, #8]	; (8004078 <LSM6DS3_GetGS_X_Int16+0x10>)
 800406e:	2206      	movs	r2, #6
 8004070:	5e9b      	ldrsh	r3, [r3, r2]
}
 8004072:	0018      	movs	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	2000036c 	.word	0x2000036c

0800407c <LSM6DS3_GetGS_Y_Int16>:
/*
 * @brief  Get the raw data of Y axe (Gyroscope)
 * @param  None
 * @retval int16_t: Raw data of Y axe
*/
int16_t LSM6DS3_GetGS_Y_Int16(void) {
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
	return LSM6DS3_data.GS_y;
 8004080:	4b02      	ldr	r3, [pc, #8]	; (800408c <LSM6DS3_GetGS_Y_Int16+0x10>)
 8004082:	2208      	movs	r2, #8
 8004084:	5e9b      	ldrsh	r3, [r3, r2]
}
 8004086:	0018      	movs	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	2000036c 	.word	0x2000036c

08004090 <LSM6DS3_GetGS_Z_Int16>:
/*
 * @brief  Get the raw data of Z axe (Gyroscope)
 * @param  None
 * @retval int16_t: Raw data of Z axe
*/
int16_t LSM6DS3_GetGS_Z_Int16(void) {
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
	return LSM6DS3_data.GS_z;
 8004094:	4b02      	ldr	r3, [pc, #8]	; (80040a0 <LSM6DS3_GetGS_Z_Int16+0x10>)
 8004096:	220a      	movs	r2, #10
 8004098:	5e9b      	ldrsh	r3, [r3, r2]
}
 800409a:	0018      	movs	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	2000036c 	.word	0x2000036c

080040a4 <LSM6DS3_Temperature_Int16>:
/*
 * @brief  Get the raw data of temperature
 * @param  None
 * @retval int16_t: Raw data of temperature
*/
int16_t LSM6DS3_Temperature_Int16(void) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
	return LSM6DS3_data.Temperature;
 80040a8:	4b02      	ldr	r3, [pc, #8]	; (80040b4 <LSM6DS3_Temperature_Int16+0x10>)
 80040aa:	220c      	movs	r2, #12
 80040ac:	5e9b      	ldrsh	r3, [r3, r2]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	2000036c 	.word	0x2000036c

080040b8 <LSM6DS3_ReadRegister>:
 * 		   size: Size of data to be written
 * @retval enum LSM6DS3_Result:
* 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
static LSM6DS3_Result LSM6DS3_ReadRegister(uint8_t reg, uint8_t* data, uint16_t size) {
 80040b8:	b5b0      	push	{r4, r5, r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af02      	add	r7, sp, #8
 80040be:	6039      	str	r1, [r7, #0]
 80040c0:	0011      	movs	r1, r2
 80040c2:	1dfb      	adds	r3, r7, #7
 80040c4:	1c02      	adds	r2, r0, #0
 80040c6:	701a      	strb	r2, [r3, #0]
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	1c0a      	adds	r2, r1, #0
 80040cc:	801a      	strh	r2, [r3, #0]
	if(!SPIx_ReadRegister(LSM6DS3_parameters.spi_channel,reg,data,size,LSM6DS3_parameters.timeout))
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <LSM6DS3_ReadRegister+0x44>)
 80040d0:	6898      	ldr	r0, [r3, #8]
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <LSM6DS3_ReadRegister+0x44>)
 80040d4:	889b      	ldrh	r3, [r3, #4]
 80040d6:	1d3a      	adds	r2, r7, #4
 80040d8:	8815      	ldrh	r5, [r2, #0]
 80040da:	683c      	ldr	r4, [r7, #0]
 80040dc:	1dfa      	adds	r2, r7, #7
 80040de:	7811      	ldrb	r1, [r2, #0]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	002b      	movs	r3, r5
 80040e4:	0022      	movs	r2, r4
 80040e6:	f003 fcff 	bl	8007ae8 <SPIx_ReadRegister>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d101      	bne.n	80040f2 <LSM6DS3_ReadRegister+0x3a>
		return LSM6DS3_FAIL;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <LSM6DS3_ReadRegister+0x3c>
	return LSM6DS3_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bdb0      	pop	{r4, r5, r7, pc}
 80040fc:	20000360 	.word	0x20000360

08004100 <LSM6DS3_WriteAndVerify>:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
 * 					- LSM6DS3_FAIL_COMPARE 	   = 3,  Failed due to wrong write/read compare
*/
static LSM6DS3_Result LSM6DS3_WriteAndVerify(uint8_t reg, uint8_t* data, uint16_t size) {
 8004100:	b5b0      	push	{r4, r5, r7, lr}
 8004102:	b08e      	sub	sp, #56	; 0x38
 8004104:	af02      	add	r7, sp, #8
 8004106:	6039      	str	r1, [r7, #0]
 8004108:	0011      	movs	r1, r2
 800410a:	1dfb      	adds	r3, r7, #7
 800410c:	1c02      	adds	r2, r0, #0
 800410e:	701a      	strb	r2, [r3, #0]
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	1c0a      	adds	r2, r1, #0
 8004114:	801a      	strh	r2, [r3, #0]
	uint8_t compare[32] = {0xFF};
 8004116:	230c      	movs	r3, #12
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	22ff      	movs	r2, #255	; 0xff
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	3304      	adds	r3, #4
 8004120:	221c      	movs	r2, #28
 8004122:	2100      	movs	r1, #0
 8004124:	0018      	movs	r0, r3
 8004126:	f005 fabe 	bl	80096a6 <memset>

	if(size > sizeof(compare))
 800412a:	1d3b      	adds	r3, r7, #4
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	2b20      	cmp	r3, #32
 8004130:	d901      	bls.n	8004136 <LSM6DS3_WriteAndVerify+0x36>
		return LSM6DS3_FAIL_PARAMETERS;
 8004132:	2302      	movs	r3, #2
 8004134:	e04b      	b.n	80041ce <LSM6DS3_WriteAndVerify+0xce>

	if(!SPIx_WriteRegister(LSM6DS3_parameters.spi_channel,reg,data,size,LSM6DS3_parameters.timeout))
 8004136:	4b28      	ldr	r3, [pc, #160]	; (80041d8 <LSM6DS3_WriteAndVerify+0xd8>)
 8004138:	6898      	ldr	r0, [r3, #8]
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <LSM6DS3_WriteAndVerify+0xd8>)
 800413c:	889b      	ldrh	r3, [r3, #4]
 800413e:	1d3a      	adds	r2, r7, #4
 8004140:	8815      	ldrh	r5, [r2, #0]
 8004142:	683c      	ldr	r4, [r7, #0]
 8004144:	1dfa      	adds	r2, r7, #7
 8004146:	7811      	ldrb	r1, [r2, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	002b      	movs	r3, r5
 800414c:	0022      	movs	r2, r4
 800414e:	f003 fd07 	bl	8007b60 <SPIx_WriteRegister>
 8004152:	1e03      	subs	r3, r0, #0
 8004154:	d101      	bne.n	800415a <LSM6DS3_WriteAndVerify+0x5a>
		return LSM6DS3_FAIL;
 8004156:	2301      	movs	r3, #1
 8004158:	e039      	b.n	80041ce <LSM6DS3_WriteAndVerify+0xce>


	if(!SPIx_ReadRegister(LSM6DS3_parameters.spi_channel,reg,compare,size,LSM6DS3_parameters.timeout))
 800415a:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <LSM6DS3_WriteAndVerify+0xd8>)
 800415c:	6898      	ldr	r0, [r3, #8]
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <LSM6DS3_WriteAndVerify+0xd8>)
 8004160:	889b      	ldrh	r3, [r3, #4]
 8004162:	1d3a      	adds	r2, r7, #4
 8004164:	8815      	ldrh	r5, [r2, #0]
 8004166:	220c      	movs	r2, #12
 8004168:	18bc      	adds	r4, r7, r2
 800416a:	1dfa      	adds	r2, r7, #7
 800416c:	7811      	ldrb	r1, [r2, #0]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	002b      	movs	r3, r5
 8004172:	0022      	movs	r2, r4
 8004174:	f003 fcb8 	bl	8007ae8 <SPIx_ReadRegister>
 8004178:	1e03      	subs	r3, r0, #0
 800417a:	d101      	bne.n	8004180 <LSM6DS3_WriteAndVerify+0x80>
		return LSM6DS3_FAIL;
 800417c:	2301      	movs	r3, #1
 800417e:	e026      	b.n	80041ce <LSM6DS3_WriteAndVerify+0xce>

	for(uint8_t i=0; i < size; i++) {
 8004180:	232f      	movs	r3, #47	; 0x2f
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e018      	b.n	80041bc <LSM6DS3_WriteAndVerify+0xbc>
		if(compare[i] != data[i]){
 800418a:	212f      	movs	r1, #47	; 0x2f
 800418c:	187b      	adds	r3, r7, r1
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	220c      	movs	r2, #12
 8004192:	18ba      	adds	r2, r7, r2
 8004194:	5cd2      	ldrb	r2, [r2, r3]
 8004196:	187b      	adds	r3, r7, r1
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	18cb      	adds	r3, r1, r3
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d005      	beq.n	80041b0 <LSM6DS3_WriteAndVerify+0xb0>
			xprintf("not equal\r\n");
 80041a4:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <LSM6DS3_WriteAndVerify+0xdc>)
 80041a6:	0018      	movs	r0, r3
 80041a8:	f004 f934 	bl	8008414 <xprintf>
			return LSM6DS3_FAIL_COMPARE;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e00e      	b.n	80041ce <LSM6DS3_WriteAndVerify+0xce>
	for(uint8_t i=0; i < size; i++) {
 80041b0:	212f      	movs	r1, #47	; 0x2f
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	781a      	ldrb	r2, [r3, #0]
 80041b6:	187b      	adds	r3, r7, r1
 80041b8:	3201      	adds	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	232f      	movs	r3, #47	; 0x2f
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	1d3a      	adds	r2, r7, #4
 80041c6:	8812      	ldrh	r2, [r2, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d8de      	bhi.n	800418a <LSM6DS3_WriteAndVerify+0x8a>
		}
	}

	return LSM6DS3_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b00c      	add	sp, #48	; 0x30
 80041d4:	bdb0      	pop	{r4, r5, r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	20000360 	.word	0x20000360
 80041dc:	0800cda8 	.word	0x0800cda8

080041e0 <cmd_response>:
	ptr[7] = HexChar[val & 0xF];
	ptr[8] = 0x0;
}

int cmd_response(char* buff, int size, char *cmd, const char *fmt, ...)
{
 80041e0:	b408      	push	{r3}
 80041e2:	b590      	push	{r4, r7, lr}
 80041e4:	b08a      	sub	sp, #40	; 0x28
 80041e6:	af02      	add	r7, sp, #8
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
	int n = 0;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
    va_list ap;
    n = usnprintf(buff, size, "*SS,%s,V9,%s,", g_config.deviceCode, cmd);
 80041f2:	68b9      	ldr	r1, [r7, #8]
 80041f4:	4c1d      	ldr	r4, [pc, #116]	; (800426c <cmd_response+0x8c>)
 80041f6:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <cmd_response+0x90>)
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	0023      	movs	r3, r4
 8004200:	f003 fc40 	bl	8007a84 <usnprintf>
 8004204:	0003      	movs	r3, r0
 8004206:	61fb      	str	r3, [r7, #28]
    va_start(ap, fmt);
 8004208:	2330      	movs	r3, #48	; 0x30
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	617b      	str	r3, [r7, #20]
    char *bufftmp = buff + (n);
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	18d3      	adds	r3, r2, r3
 8004214:	61bb      	str	r3, [r7, #24]
    n = uvsnprintf(bufftmp, size-(n+1), (char *) fmt, ap );
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3301      	adds	r3, #1
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	0019      	movs	r1, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004224:	69b8      	ldr	r0, [r7, #24]
 8004226:	f003 fa3f 	bl	80076a8 <uvsnprintf>
 800422a:	0003      	movs	r3, r0
 800422c:	61fb      	str	r3, [r7, #28]
    va_end(ap);
    bufftmp[n] = '#';
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	18d3      	adds	r3, r2, r3
 8004234:	2223      	movs	r2, #35	; 0x23
 8004236:	701a      	strb	r2, [r3, #0]
    n++;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	3301      	adds	r3, #1
 800423c:	61fb      	str	r3, [r7, #28]
    bufftmp[n] = '\r';
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	18d3      	adds	r3, r2, r3
 8004244:	220d      	movs	r2, #13
 8004246:	701a      	strb	r2, [r3, #0]
    n++;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	3301      	adds	r3, #1
 800424c:	61fb      	str	r3, [r7, #28]
    bufftmp[n] = '\n';
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	18d3      	adds	r3, r2, r3
 8004254:	220a      	movs	r2, #10
 8004256:	701a      	strb	r2, [r3, #0]
    return n+1;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	3301      	adds	r3, #1
}
 800425c:	0018      	movs	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	b008      	add	sp, #32
 8004262:	bc90      	pop	{r4, r7}
 8004264:	bc08      	pop	{r3}
 8004266:	b001      	add	sp, #4
 8004268:	4718      	bx	r3
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	200004da 	.word	0x200004da
 8004270:	0800cdc8 	.word	0x0800cdc8

08004274 <next_char>:
	strcat(buff, ",V9,");
	strcat(buff, command);
	return 1;
}

int next_char(char* data, char sep, int max) {
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	200b      	movs	r0, #11
 8004280:	183b      	adds	r3, r7, r0
 8004282:	1c0a      	adds	r2, r1, #0
 8004284:	701a      	strb	r2, [r3, #0]
	char *ptr = strchr(data, sep);
 8004286:	183b      	adds	r3, r7, r0
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	0011      	movs	r1, r2
 800428e:	0018      	movs	r0, r3
 8004290:	f005 ff94 	bl	800a1bc <strchr>
 8004294:	0003      	movs	r3, r0
 8004296:	617b      	str	r3, [r7, #20]
	if (ptr) {
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <next_char+0x3a>
		return (ptr - data) >= max ? max : (ptr - data);
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1ad2      	subs	r2, r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4293      	cmp	r3, r2
 80042a8:	dd02      	ble.n	80042b0 <next_char+0x3c>
 80042aa:	0013      	movs	r3, r2
 80042ac:	e000      	b.n	80042b0 <next_char+0x3c>
	} else {
		return 0;
 80042ae:	2300      	movs	r3, #0
	}
}
 80042b0:	0018      	movs	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b006      	add	sp, #24
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <sks_cmd_set_debug>:
	}
}

int write_flash = 0;

static int sks_cmd_set_debug(int from, char* command, int argc, char** argv, int size, int total) {
 80042b8:	b5b0      	push	{r4, r5, r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
 80042c4:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 80042c6:	2317      	movs	r3, #23
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	3310      	adds	r3, #16
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <sks_cmd_set_debug+0x24>
		return size;
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	e023      	b.n	8004324 <sks_cmd_set_debug+0x6c>
	set = atoi(argv[4]);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	3310      	adds	r3, #16
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	0018      	movs	r0, r3
 80042e4:	f005 f99c 	bl	8009620 <atoi>
 80042e8:	0002      	movs	r2, r0
 80042ea:	2117      	movs	r1, #23
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	701a      	strb	r2, [r3, #0]

	g_appStats.debugOn = set;
 80042f0:	4b0e      	ldr	r3, [pc, #56]	; (800432c <sks_cmd_set_debug+0x74>)
 80042f2:	0008      	movs	r0, r1
 80042f4:	187a      	adds	r2, r7, r1
 80042f6:	214d      	movs	r1, #77	; 0x4d
 80042f8:	7812      	ldrb	r2, [r2, #0]
 80042fa:	545a      	strb	r2, [r3, r1]

	cmd_response(Response, sizeof(Response), command, "%d,%d", set, g_appStats.debugOn);
 80042fc:	183b      	adds	r3, r7, r0
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	4a0a      	ldr	r2, [pc, #40]	; (800432c <sks_cmd_set_debug+0x74>)
 8004302:	214d      	movs	r1, #77	; 0x4d
 8004304:	5c52      	ldrb	r2, [r2, r1]
 8004306:	0015      	movs	r5, r2
 8004308:	4c09      	ldr	r4, [pc, #36]	; (8004330 <sks_cmd_set_debug+0x78>)
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	2180      	movs	r1, #128	; 0x80
 800430e:	0049      	lsls	r1, r1, #1
 8004310:	4808      	ldr	r0, [pc, #32]	; (8004334 <sks_cmd_set_debug+0x7c>)
 8004312:	9501      	str	r5, [sp, #4]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	0023      	movs	r3, r4
 8004318:	f7ff ff62 	bl	80041e0 <cmd_response>

	response = 1;
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <sks_cmd_set_debug+0x80>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]

	return size;
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b006      	add	sp, #24
 800432a:	bdb0      	pop	{r4, r5, r7, pc}
 800432c:	200004f4 	.word	0x200004f4
 8004330:	0800cdfc 	.word	0x0800cdfc
 8004334:	20000380 	.word	0x20000380
 8004338:	2000037c 	.word	0x2000037c

0800433c <sks_cmd_set_full>:

static int sks_cmd_set_full(int from, char* command, int argc, char** argv, int size, int total) {
 800433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433e:	b08b      	sub	sp, #44	; 0x2c
 8004340:	af04      	add	r7, sp, #16
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 800434a:	2317      	movs	r3, #23
 800434c:	18fb      	adds	r3, r7, r3
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	3310      	adds	r3, #16
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <sks_cmd_set_full+0x24>
		return size;
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	e044      	b.n	80043ea <sks_cmd_set_full+0xae>
	set = atoi(argv[4]);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	3310      	adds	r3, #16
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	0018      	movs	r0, r3
 8004368:	f005 f95a 	bl	8009620 <atoi>
 800436c:	0002      	movs	r2, r0
 800436e:	2117      	movs	r1, #23
 8004370:	187b      	adds	r3, r7, r1
 8004372:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8004374:	187b      	adds	r3, r7, r1
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d11e      	bne.n	80043ba <sks_cmd_set_full+0x7e>
		if(argv[5] != NULL) {
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	3314      	adds	r3, #20
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d012      	beq.n	80043ac <sks_cmd_set_full+0x70>
			g_config.fullValue = atoi(argv[5]);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	3314      	adds	r3, #20
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0018      	movs	r0, r3
 800438e:	f005 f947 	bl	8009620 <atoi>
 8004392:	0003      	movs	r3, r0
 8004394:	001a      	movs	r2, r3
 8004396:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <sks_cmd_set_full+0xb8>)
 8004398:	60da      	str	r2, [r3, #12]
			if(g_config.fullValue == 0) {
 800439a:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <sks_cmd_set_full+0xb8>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d108      	bne.n	80043b4 <sks_cmd_set_full+0x78>
				g_config.fullValue = g_appStats.frequency;
 80043a2:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <sks_cmd_set_full+0xbc>)
 80043a4:	6a1a      	ldr	r2, [r3, #32]
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <sks_cmd_set_full+0xb8>)
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	e003      	b.n	80043b4 <sks_cmd_set_full+0x78>
			}
		} else {
			g_config.fullValue = g_appStats.frequency;
 80043ac:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <sks_cmd_set_full+0xbc>)
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <sks_cmd_set_full+0xb8>)
 80043b2:	60da      	str	r2, [r3, #12]
		}
		write_flash = 1;
 80043b4:	4b11      	ldr	r3, [pc, #68]	; (80043fc <sks_cmd_set_full+0xc0>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d", set, g_config.emptyValue, g_config.fullValue);
 80043ba:	2317      	movs	r3, #23
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <sks_cmd_set_full+0xb8>)
 80043c2:	6919      	ldr	r1, [r3, #16]
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <sks_cmd_set_full+0xb8>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4e0d      	ldr	r6, [pc, #52]	; (8004400 <sks_cmd_set_full+0xc4>)
 80043ca:	68bd      	ldr	r5, [r7, #8]
 80043cc:	2080      	movs	r0, #128	; 0x80
 80043ce:	0044      	lsls	r4, r0, #1
 80043d0:	480c      	ldr	r0, [pc, #48]	; (8004404 <sks_cmd_set_full+0xc8>)
 80043d2:	9302      	str	r3, [sp, #8]
 80043d4:	9101      	str	r1, [sp, #4]
 80043d6:	9200      	str	r2, [sp, #0]
 80043d8:	0033      	movs	r3, r6
 80043da:	002a      	movs	r2, r5
 80043dc:	0021      	movs	r1, r4
 80043de:	f7ff feff 	bl	80041e0 <cmd_response>

	//raise_command_coming();

	response = 1;
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <sks_cmd_set_full+0xcc>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
	return size;
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b007      	add	sp, #28
 80043f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	200004d8 	.word	0x200004d8
 80043f8:	200004f4 	.word	0x200004f4
 80043fc:	20000480 	.word	0x20000480
 8004400:	0800ce04 	.word	0x0800ce04
 8004404:	20000380 	.word	0x20000380
 8004408:	2000037c 	.word	0x2000037c

0800440c <sks_cmd_set_empty>:

static int sks_cmd_set_empty(int from, char* command, int argc, char** argv, int size, int total) {
 800440c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800440e:	b08b      	sub	sp, #44	; 0x2c
 8004410:	af04      	add	r7, sp, #16
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 800441a:	2317      	movs	r3, #23
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	3310      	adds	r3, #16
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <sks_cmd_set_empty+0x24>
		return size;
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	e044      	b.n	80044ba <sks_cmd_set_empty+0xae>
	set = atoi(argv[4]);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	3310      	adds	r3, #16
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	0018      	movs	r0, r3
 8004438:	f005 f8f2 	bl	8009620 <atoi>
 800443c:	0002      	movs	r2, r0
 800443e:	2117      	movs	r1, #23
 8004440:	187b      	adds	r3, r7, r1
 8004442:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8004444:	187b      	adds	r3, r7, r1
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d11e      	bne.n	800448a <sks_cmd_set_empty+0x7e>
		if(argv[5] != NULL) {
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d012      	beq.n	800447c <sks_cmd_set_empty+0x70>
			g_config.emptyValue = atoi(argv[5]);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	0018      	movs	r0, r3
 800445e:	f005 f8df 	bl	8009620 <atoi>
 8004462:	0003      	movs	r3, r0
 8004464:	001a      	movs	r2, r3
 8004466:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <sks_cmd_set_empty+0xb8>)
 8004468:	611a      	str	r2, [r3, #16]
			if(g_config.emptyValue == 0) {
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <sks_cmd_set_empty+0xb8>)
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d108      	bne.n	8004484 <sks_cmd_set_empty+0x78>
				g_config.emptyValue = g_appStats.frequency;
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <sks_cmd_set_empty+0xbc>)
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <sks_cmd_set_empty+0xb8>)
 8004478:	611a      	str	r2, [r3, #16]
 800447a:	e003      	b.n	8004484 <sks_cmd_set_empty+0x78>
			}
		} else {
			g_config.emptyValue = g_appStats.frequency;
 800447c:	4b12      	ldr	r3, [pc, #72]	; (80044c8 <sks_cmd_set_empty+0xbc>)
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <sks_cmd_set_empty+0xb8>)
 8004482:	611a      	str	r2, [r3, #16]
		}
		write_flash = 1;
 8004484:	4b11      	ldr	r3, [pc, #68]	; (80044cc <sks_cmd_set_empty+0xc0>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]
//	append_number(Response, g_config.emptyValue);
//	strcat(Response, ",");
//	append_number(Response, g_config.fullValue);
//	strcat(Response, "#\r\n");

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d", set, g_config.emptyValue, g_config.fullValue);
 800448a:	2317      	movs	r3, #23
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	781a      	ldrb	r2, [r3, #0]
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <sks_cmd_set_empty+0xb8>)
 8004492:	6919      	ldr	r1, [r3, #16]
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <sks_cmd_set_empty+0xb8>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4e0d      	ldr	r6, [pc, #52]	; (80044d0 <sks_cmd_set_empty+0xc4>)
 800449a:	68bd      	ldr	r5, [r7, #8]
 800449c:	2080      	movs	r0, #128	; 0x80
 800449e:	0044      	lsls	r4, r0, #1
 80044a0:	480c      	ldr	r0, [pc, #48]	; (80044d4 <sks_cmd_set_empty+0xc8>)
 80044a2:	9302      	str	r3, [sp, #8]
 80044a4:	9101      	str	r1, [sp, #4]
 80044a6:	9200      	str	r2, [sp, #0]
 80044a8:	0033      	movs	r3, r6
 80044aa:	002a      	movs	r2, r5
 80044ac:	0021      	movs	r1, r4
 80044ae:	f7ff fe97 	bl	80041e0 <cmd_response>

	//raise_command_coming();

	response = 1;
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <sks_cmd_set_empty+0xcc>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
	return size;
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b007      	add	sp, #28
 80044c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	200004d8 	.word	0x200004d8
 80044c8:	200004f4 	.word	0x200004f4
 80044cc:	20000480 	.word	0x20000480
 80044d0:	0800ce04 	.word	0x0800ce04
 80044d4:	20000380 	.word	0x20000380
 80044d8:	2000037c 	.word	0x2000037c

080044dc <sks_cmd_disable_ema>:

static int sks_cmd_disable_ema(int from, char* command, int argc, char** argv, int size, int total) {
 80044dc:	b5b0      	push	{r4, r5, r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 80044ea:	2317      	movs	r3, #23
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]

	if (argv[4] == NULL)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	3310      	adds	r3, #16
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <sks_cmd_disable_ema+0x24>
		return size;
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	e039      	b.n	8004574 <sks_cmd_disable_ema+0x98>

	set = atoi(argv[4]);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	3310      	adds	r3, #16
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	0018      	movs	r0, r3
 8004508:	f005 f88a 	bl	8009620 <atoi>
 800450c:	0002      	movs	r2, r0
 800450e:	2117      	movs	r1, #23
 8004510:	187b      	adds	r3, r7, r1
 8004512:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8004514:	187b      	adds	r3, r7, r1
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d117      	bne.n	800454c <sks_cmd_disable_ema+0x70>
		if(argv[5] != NULL) {
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	3314      	adds	r3, #20
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00f      	beq.n	8004546 <sks_cmd_disable_ema+0x6a>
			int tmp = atoi(argv[5]);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	3314      	adds	r3, #20
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	0018      	movs	r0, r3
 800452e:	f005 f877 	bl	8009620 <atoi>
 8004532:	0003      	movs	r3, r0
 8004534:	613b      	str	r3, [r7, #16]
			g_config.disableEma = (tmp > 0)?1:0;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	17da      	asrs	r2, r3, #31
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	0fdb      	lsrs	r3, r3, #31
 800453e:	b2db      	uxtb	r3, r3
 8004540:	001a      	movs	r2, r3
 8004542:	4b0e      	ldr	r3, [pc, #56]	; (800457c <sks_cmd_disable_ema+0xa0>)
 8004544:	76da      	strb	r2, [r3, #27]
		}

		write_flash = 1;
 8004546:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <sks_cmd_disable_ema+0xa4>)
 8004548:	2201      	movs	r2, #1
 800454a:	601a      	str	r2, [r3, #0]
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d", set, g_config.disableEma);
 800454c:	2317      	movs	r3, #23
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	4a0a      	ldr	r2, [pc, #40]	; (800457c <sks_cmd_disable_ema+0xa0>)
 8004554:	7ed2      	ldrb	r2, [r2, #27]
 8004556:	0015      	movs	r5, r2
 8004558:	4c0a      	ldr	r4, [pc, #40]	; (8004584 <sks_cmd_disable_ema+0xa8>)
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	2180      	movs	r1, #128	; 0x80
 800455e:	0049      	lsls	r1, r1, #1
 8004560:	4809      	ldr	r0, [pc, #36]	; (8004588 <sks_cmd_disable_ema+0xac>)
 8004562:	9501      	str	r5, [sp, #4]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	0023      	movs	r3, r4
 8004568:	f7ff fe3a 	bl	80041e0 <cmd_response>

	//raise_command_coming();

	response = 1;
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <sks_cmd_disable_ema+0xb0>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]
	return size;
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b006      	add	sp, #24
 800457a:	bdb0      	pop	{r4, r5, r7, pc}
 800457c:	200004d8 	.word	0x200004d8
 8004580:	20000480 	.word	0x20000480
 8004584:	0800cdfc 	.word	0x0800cdfc
 8004588:	20000380 	.word	0x20000380
 800458c:	2000037c 	.word	0x2000037c

08004590 <sks_cmd_interval>:

static int sks_cmd_interval(int from, char* command, int argc, char** argv, int size, int total) {
 8004590:	b5b0      	push	{r4, r5, r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 800459e:	2317      	movs	r3, #23
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]

	if (argv[4] == NULL)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	3310      	adds	r3, #16
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <sks_cmd_interval+0x24>
		return size;
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	e033      	b.n	800461c <sks_cmd_interval+0x8c>

	set = atoi(argv[4]);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	3310      	adds	r3, #16
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	0018      	movs	r0, r3
 80045bc:	f005 f830 	bl	8009620 <atoi>
 80045c0:	0002      	movs	r2, r0
 80045c2:	2117      	movs	r1, #23
 80045c4:	187b      	adds	r3, r7, r1
 80045c6:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 80045c8:	187b      	adds	r3, r7, r1
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d111      	bne.n	80045f4 <sks_cmd_interval+0x64>
		if(argv[5] != NULL) {
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <sks_cmd_interval+0x5e>
			g_config.interval = atoi(argv[5]);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	3314      	adds	r3, #20
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f005 f81d 	bl	8009620 <atoi>
 80045e6:	0003      	movs	r3, r0
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <sks_cmd_interval+0x94>)
 80045ec:	769a      	strb	r2, [r3, #26]
		}

		write_flash = 1;
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <sks_cmd_interval+0x98>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d", set, g_config.interval);
 80045f4:	2317      	movs	r3, #23
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <sks_cmd_interval+0x94>)
 80045fc:	7e92      	ldrb	r2, [r2, #26]
 80045fe:	0015      	movs	r5, r2
 8004600:	4c0a      	ldr	r4, [pc, #40]	; (800462c <sks_cmd_interval+0x9c>)
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	2180      	movs	r1, #128	; 0x80
 8004606:	0049      	lsls	r1, r1, #1
 8004608:	4809      	ldr	r0, [pc, #36]	; (8004630 <sks_cmd_interval+0xa0>)
 800460a:	9501      	str	r5, [sp, #4]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	0023      	movs	r3, r4
 8004610:	f7ff fde6 	bl	80041e0 <cmd_response>

	//raise_command_coming();

	response = 1;
 8004614:	4b07      	ldr	r3, [pc, #28]	; (8004634 <sks_cmd_interval+0xa4>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]
	return size;
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800461c:	0018      	movs	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	b006      	add	sp, #24
 8004622:	bdb0      	pop	{r4, r5, r7, pc}
 8004624:	200004d8 	.word	0x200004d8
 8004628:	20000480 	.word	0x20000480
 800462c:	0800cdfc 	.word	0x0800cdfc
 8004630:	20000380 	.word	0x20000380
 8004634:	2000037c 	.word	0x2000037c

08004638 <sks_cmd_config>:

static int sks_cmd_config(int from, char* command, int argc, char** argv, int size, int total) {
 8004638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800463a:	46ce      	mov	lr, r9
 800463c:	4647      	mov	r7, r8
 800463e:	b580      	push	{r7, lr}
 8004640:	b08f      	sub	sp, #60	; 0x3c
 8004642:	af06      	add	r7, sp, #24
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 800464c:	231f      	movs	r3, #31
 800464e:	18fb      	adds	r3, r7, r3
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	3310      	adds	r3, #16
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <sks_cmd_config+0x2a>
		return size;
 800465e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004660:	e080      	b.n	8004764 <sks_cmd_config+0x12c>

	set = atoi(argv[4]);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	3310      	adds	r3, #16
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	0018      	movs	r0, r3
 800466a:	f004 ffd9 	bl	8009620 <atoi>
 800466e:	0002      	movs	r2, r0
 8004670:	211f      	movs	r1, #31
 8004672:	187b      	adds	r3, r7, r1
 8004674:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8004676:	187b      	adds	r3, r7, r1
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d14e      	bne.n	800471c <sks_cmd_config+0xe4>
		if(argv[5] != NULL) {
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	3314      	adds	r3, #20
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <sks_cmd_config+0x64>
			g_config.timeout3D = atoi(argv[5]);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	3314      	adds	r3, #20
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	0018      	movs	r0, r3
 8004690:	f004 ffc6 	bl	8009620 <atoi>
 8004694:	0003      	movs	r3, r0
 8004696:	b29a      	uxth	r2, r3
 8004698:	4b36      	ldr	r3, [pc, #216]	; (8004774 <sks_cmd_config+0x13c>)
 800469a:	829a      	strh	r2, [r3, #20]
		}

		if(argv[6] != NULL) {
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	3318      	adds	r3, #24
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <sks_cmd_config+0x82>
			g_config.filterMode = atoi(argv[6]);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	3318      	adds	r3, #24
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	0018      	movs	r0, r3
 80046ae:	f004 ffb7 	bl	8009620 <atoi>
 80046b2:	0003      	movs	r3, r0
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <sks_cmd_config+0x13c>)
 80046b8:	75da      	strb	r2, [r3, #23]
		}

		if(argv[7] != NULL) {
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	331c      	adds	r3, #28
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d011      	beq.n	80046e8 <sks_cmd_config+0xb0>
			int diffX = atoi(argv[7]);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	331c      	adds	r3, #28
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f004 ffa8 	bl	8009620 <atoi>
 80046d0:	0003      	movs	r3, r0
 80046d2:	61bb      	str	r3, [r7, #24]
			if(diffX >= 3 && diffX <= 30) {
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	dd06      	ble.n	80046e8 <sks_cmd_config+0xb0>
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b1e      	cmp	r3, #30
 80046de:	dc03      	bgt.n	80046e8 <sks_cmd_config+0xb0>
				g_config.diffX = diffX;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	4b23      	ldr	r3, [pc, #140]	; (8004774 <sks_cmd_config+0x13c>)
 80046e6:	761a      	strb	r2, [r3, #24]
			}
		}

		if(argv[8] != NULL) {
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	3320      	adds	r3, #32
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d011      	beq.n	8004716 <sks_cmd_config+0xde>
			int diffY = atoi(argv[8]);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	3320      	adds	r3, #32
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f004 ff91 	bl	8009620 <atoi>
 80046fe:	0003      	movs	r3, r0
 8004700:	617b      	str	r3, [r7, #20]
			if(diffY >= 3 && diffY <= 30) {
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b02      	cmp	r3, #2
 8004706:	dd06      	ble.n	8004716 <sks_cmd_config+0xde>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b1e      	cmp	r3, #30
 800470c:	dc03      	bgt.n	8004716 <sks_cmd_config+0xde>
				g_config.diffY = diffY;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	b2da      	uxtb	r2, r3
 8004712:	4b18      	ldr	r3, [pc, #96]	; (8004774 <sks_cmd_config+0x13c>)
 8004714:	765a      	strb	r2, [r3, #25]
			}
		}

		write_flash = 1;
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <sks_cmd_config+0x140>)
 8004718:	2201      	movs	r2, #1
 800471a:	601a      	str	r2, [r3, #0]
//	append_int(Response, 2, g_config.diffX);
//	strcat(Response, ",");
//	append_int(Response, 2, g_config.diffY);
//	strcat(Response, "#\r\n");

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d,%d,%d", set, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY);
 800471c:	231f      	movs	r3, #31
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	4699      	mov	r9, r3
 8004724:	4a13      	ldr	r2, [pc, #76]	; (8004774 <sks_cmd_config+0x13c>)
 8004726:	8a92      	ldrh	r2, [r2, #20]
 8004728:	0015      	movs	r5, r2
 800472a:	4a12      	ldr	r2, [pc, #72]	; (8004774 <sks_cmd_config+0x13c>)
 800472c:	7dd2      	ldrb	r2, [r2, #23]
 800472e:	0016      	movs	r6, r2
 8004730:	4a10      	ldr	r2, [pc, #64]	; (8004774 <sks_cmd_config+0x13c>)
 8004732:	7e12      	ldrb	r2, [r2, #24]
 8004734:	4694      	mov	ip, r2
 8004736:	4a0f      	ldr	r2, [pc, #60]	; (8004774 <sks_cmd_config+0x13c>)
 8004738:	7e52      	ldrb	r2, [r2, #25]
 800473a:	4690      	mov	r8, r2
 800473c:	4c0f      	ldr	r4, [pc, #60]	; (800477c <sks_cmd_config+0x144>)
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	2180      	movs	r1, #128	; 0x80
 8004742:	0049      	lsls	r1, r1, #1
 8004744:	480e      	ldr	r0, [pc, #56]	; (8004780 <sks_cmd_config+0x148>)
 8004746:	4643      	mov	r3, r8
 8004748:	9304      	str	r3, [sp, #16]
 800474a:	4663      	mov	r3, ip
 800474c:	9303      	str	r3, [sp, #12]
 800474e:	9602      	str	r6, [sp, #8]
 8004750:	9501      	str	r5, [sp, #4]
 8004752:	464b      	mov	r3, r9
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	0023      	movs	r3, r4
 8004758:	f7ff fd42 	bl	80041e0 <cmd_response>

	response = 1;
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <sks_cmd_config+0x14c>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]
	return size;
 8004762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8004764:	0018      	movs	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	b009      	add	sp, #36	; 0x24
 800476a:	bcc0      	pop	{r6, r7}
 800476c:	46b9      	mov	r9, r7
 800476e:	46b0      	mov	r8, r6
 8004770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	200004d8 	.word	0x200004d8
 8004778:	20000480 	.word	0x20000480
 800477c:	0800ce10 	.word	0x0800ce10
 8004780:	20000380 	.word	0x20000380
 8004784:	2000037c 	.word	0x2000037c

08004788 <sks_cmd_serial>:

static int sks_cmd_serial(int from, char* command, int argc, char** argv, int size, int total) {
 8004788:	b5b0      	push	{r4, r5, r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 8004796:	2317      	movs	r3, #23
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	2200      	movs	r2, #0
 800479c:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	3310      	adds	r3, #16
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <sks_cmd_serial+0x24>
		return size;
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	e03b      	b.n	8004824 <sks_cmd_serial+0x9c>

	set = atoi(argv[4]);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	3310      	adds	r3, #16
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	0018      	movs	r0, r3
 80047b4:	f004 ff34 	bl	8009620 <atoi>
 80047b8:	0002      	movs	r2, r0
 80047ba:	2117      	movs	r1, #23
 80047bc:	187b      	adds	r3, r7, r1
 80047be:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 80047c0:	187b      	adds	r3, r7, r1
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d11a      	bne.n	80047fe <sks_cmd_serial+0x76>
		memset(g_config.deviceCode, 0, sizeof(g_config.deviceCode));
 80047c8:	4b18      	ldr	r3, [pc, #96]	; (800482c <sks_cmd_serial+0xa4>)
 80047ca:	220a      	movs	r2, #10
 80047cc:	2100      	movs	r1, #0
 80047ce:	0018      	movs	r0, r3
 80047d0:	f004 ff69 	bl	80096a6 <memset>
		strncpy(g_config.deviceCode, argv[5], next_char(argv[5], '#', DEVICE_CODE_LEN));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	3314      	adds	r3, #20
 80047d8:	681c      	ldr	r4, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	3314      	adds	r3, #20
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	220a      	movs	r2, #10
 80047e2:	2123      	movs	r1, #35	; 0x23
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7ff fd45 	bl	8004274 <next_char>
 80047ea:	0003      	movs	r3, r0
 80047ec:	001a      	movs	r2, r3
 80047ee:	4b0f      	ldr	r3, [pc, #60]	; (800482c <sks_cmd_serial+0xa4>)
 80047f0:	0021      	movs	r1, r4
 80047f2:	0018      	movs	r0, r3
 80047f4:	f005 fd02 	bl	800a1fc <strncpy>

		write_flash = 1;
 80047f8:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <sks_cmd_serial+0xa8>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
//	append_int(Response, 1, set);
//	strcat(Response, ",");
//	strcat(Response, g_config.deviceCode);
//	strcat(Response, "#\r\n");

	cmd_response(Response, sizeof(Response), command, "%d,%s", set, g_config.deviceCode);
 80047fe:	2317      	movs	r3, #23
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	4d0b      	ldr	r5, [pc, #44]	; (8004834 <sks_cmd_serial+0xac>)
 8004806:	68bc      	ldr	r4, [r7, #8]
 8004808:	2280      	movs	r2, #128	; 0x80
 800480a:	0051      	lsls	r1, r2, #1
 800480c:	480a      	ldr	r0, [pc, #40]	; (8004838 <sks_cmd_serial+0xb0>)
 800480e:	4a07      	ldr	r2, [pc, #28]	; (800482c <sks_cmd_serial+0xa4>)
 8004810:	9201      	str	r2, [sp, #4]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	002b      	movs	r3, r5
 8004816:	0022      	movs	r2, r4
 8004818:	f7ff fce2 	bl	80041e0 <cmd_response>

	response = 1;
 800481c:	4b07      	ldr	r3, [pc, #28]	; (800483c <sks_cmd_serial+0xb4>)
 800481e:	2201      	movs	r2, #1
 8004820:	601a      	str	r2, [r3, #0]
	return size;
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004824:	0018      	movs	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	b006      	add	sp, #24
 800482a:	bdb0      	pop	{r4, r5, r7, pc}
 800482c:	200004da 	.word	0x200004da
 8004830:	20000480 	.word	0x20000480
 8004834:	0800ce20 	.word	0x0800ce20
 8004838:	20000380 	.word	0x20000380
 800483c:	2000037c 	.word	0x2000037c

08004840 <sks_cmd_reset>:

static int sks_cmd_reset(int from, char* command, int argc, char** argv, int size, int total) {
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b089      	sub	sp, #36	; 0x24
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 800484e:	2317      	movs	r3, #23
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	3310      	adds	r3, #16
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <sks_cmd_reset+0x24>
		return size;
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	e021      	b.n	80048a8 <sks_cmd_reset+0x68>

	set = atoi(argv[4]);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	3310      	adds	r3, #16
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	0018      	movs	r0, r3
 800486c:	f004 fed8 	bl	8009620 <atoi>
 8004870:	0002      	movs	r2, r0
 8004872:	2117      	movs	r1, #23
 8004874:	187b      	adds	r3, r7, r1
 8004876:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8004878:	187b      	adds	r3, r7, r1
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d103      	bne.n	8004888 <sks_cmd_reset+0x48>
		g_appStats.resetNow = ulSecCount;
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <sks_cmd_reset+0x70>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <sks_cmd_reset+0x74>)
 8004886:	651a      	str	r2, [r3, #80]	; 0x50
	}

	cmd_response(Response, sizeof(Response), command, "%d", set);
 8004888:	2317      	movs	r3, #23
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	4c0a      	ldr	r4, [pc, #40]	; (80048b8 <sks_cmd_reset+0x78>)
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	2180      	movs	r1, #128	; 0x80
 8004894:	0049      	lsls	r1, r1, #1
 8004896:	4809      	ldr	r0, [pc, #36]	; (80048bc <sks_cmd_reset+0x7c>)
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	0023      	movs	r3, r4
 800489c:	f7ff fca0 	bl	80041e0 <cmd_response>

	response = 1;
 80048a0:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <sks_cmd_reset+0x80>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
	return size;
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b007      	add	sp, #28
 80048ae:	bd90      	pop	{r4, r7, pc}
 80048b0:	200004d0 	.word	0x200004d0
 80048b4:	200004f4 	.word	0x200004f4
 80048b8:	0800ce28 	.word	0x0800ce28
 80048bc:	20000380 	.word	0x20000380
 80048c0:	2000037c 	.word	0x2000037c

080048c4 <sks_cmd_info>:

static int sks_cmd_info(int from, char* command, int argc, char** argv, int size, int total) {
 80048c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c6:	46ce      	mov	lr, r9
 80048c8:	4647      	mov	r7, r8
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b08f      	sub	sp, #60	; 0x3c
 80048ce:	af08      	add	r7, sp, #32
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 80048d8:	2317      	movs	r3, #23
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	2200      	movs	r2, #0
 80048de:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	3310      	adds	r3, #16
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <sks_cmd_info+0x2a>
		return size;
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	e030      	b.n	8004950 <sks_cmd_info+0x8c>
	set = atoi(argv[4]);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	3310      	adds	r3, #16
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	0018      	movs	r0, r3
 80048f6:	f004 fe93 	bl	8009620 <atoi>
 80048fa:	0002      	movs	r2, r0
 80048fc:	2117      	movs	r1, #23
 80048fe:	187b      	adds	r3, r7, r1
 8004900:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d,%d,%d,%s,%s", set, g_config.interval, g_config.filterMode, g_config.emptyValue, g_config.fullValue, g_config.deviceCode, APP_VERSION);
 8004902:	187b      	adds	r3, r7, r1
 8004904:	781a      	ldrb	r2, [r3, #0]
 8004906:	4b16      	ldr	r3, [pc, #88]	; (8004960 <sks_cmd_info+0x9c>)
 8004908:	7e9b      	ldrb	r3, [r3, #26]
 800490a:	4698      	mov	r8, r3
 800490c:	4b14      	ldr	r3, [pc, #80]	; (8004960 <sks_cmd_info+0x9c>)
 800490e:	7ddb      	ldrb	r3, [r3, #23]
 8004910:	4699      	mov	r9, r3
 8004912:	4b13      	ldr	r3, [pc, #76]	; (8004960 <sks_cmd_info+0x9c>)
 8004914:	6919      	ldr	r1, [r3, #16]
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <sks_cmd_info+0x9c>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	4812      	ldr	r0, [pc, #72]	; (8004964 <sks_cmd_info+0xa0>)
 800491c:	4684      	mov	ip, r0
 800491e:	68be      	ldr	r6, [r7, #8]
 8004920:	2080      	movs	r0, #128	; 0x80
 8004922:	0045      	lsls	r5, r0, #1
 8004924:	4c10      	ldr	r4, [pc, #64]	; (8004968 <sks_cmd_info+0xa4>)
 8004926:	4811      	ldr	r0, [pc, #68]	; (800496c <sks_cmd_info+0xa8>)
 8004928:	9006      	str	r0, [sp, #24]
 800492a:	4811      	ldr	r0, [pc, #68]	; (8004970 <sks_cmd_info+0xac>)
 800492c:	9005      	str	r0, [sp, #20]
 800492e:	9304      	str	r3, [sp, #16]
 8004930:	9103      	str	r1, [sp, #12]
 8004932:	464b      	mov	r3, r9
 8004934:	9302      	str	r3, [sp, #8]
 8004936:	4643      	mov	r3, r8
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	9200      	str	r2, [sp, #0]
 800493c:	4663      	mov	r3, ip
 800493e:	0032      	movs	r2, r6
 8004940:	0029      	movs	r1, r5
 8004942:	0020      	movs	r0, r4
 8004944:	f7ff fc4c 	bl	80041e0 <cmd_response>

	//raise_command_coming();

	response = 1;
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <sks_cmd_info+0xb0>)
 800494a:	2201      	movs	r2, #1
 800494c:	601a      	str	r2, [r3, #0]
	return size;
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b007      	add	sp, #28
 8004956:	bcc0      	pop	{r6, r7}
 8004958:	46b9      	mov	r9, r7
 800495a:	46b0      	mov	r8, r6
 800495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	200004d8 	.word	0x200004d8
 8004964:	0800ce2c 	.word	0x0800ce2c
 8004968:	20000380 	.word	0x20000380
 800496c:	0800ce44 	.word	0x0800ce44
 8004970:	200004da 	.word	0x200004da
 8004974:	2000037c 	.word	0x2000037c

08004978 <server_on_command>:
		{ "SF", sks_cmd_set_full }, //get config
		{ "SE", sks_cmd_set_empty }, //get config
		{ "DEBUG", sks_cmd_set_debug }, //get config
		{ NULL, NULL } };

int server_on_command(int from, char* data, int size) {
 8004978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800497a:	b0b1      	sub	sp, #196	; 0xc4
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
	#define SKS_MAX_CMD_LEN 10
	#define SKS_MAX_ARGV 	25
	int result = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	22b4      	movs	r2, #180	; 0xb4
 8004988:	18ba      	adds	r2, r7, r2
 800498a:	6013      	str	r3, [r2, #0]
	int field = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	22b0      	movs	r2, #176	; 0xb0
 8004990:	18ba      	adds	r2, r7, r2
 8004992:	6013      	str	r3, [r2, #0]
	int ftmp;
	int j = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	22ac      	movs	r2, #172	; 0xac
 8004998:	18ba      	adds	r2, r7, r2
 800499a:	6013      	str	r3, [r2, #0]
	char *ptr = data;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	22a8      	movs	r2, #168	; 0xa8
 80049a0:	18ba      	adds	r2, r7, r2
 80049a2:	6013      	str	r3, [r2, #0]

	char command[SKS_MAX_CMD_LEN + 1] = { 0 };
 80049a4:	238c      	movs	r3, #140	; 0x8c
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	3304      	adds	r3, #4
 80049ae:	2207      	movs	r2, #7
 80049b0:	2100      	movs	r1, #0
 80049b2:	0018      	movs	r0, r3
 80049b4:	f004 fe77 	bl	80096a6 <memset>

	int endPos = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	22a4      	movs	r2, #164	; 0xa4
 80049bc:	18ba      	adds	r2, r7, r2
 80049be:	6013      	str	r3, [r2, #0]
	int i = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	24a0      	movs	r4, #160	; 0xa0
 80049c4:	193a      	adds	r2, r7, r4
 80049c6:	6013      	str	r3, [r2, #0]
	char item_buff[20] = { 0 };
 80049c8:	2378      	movs	r3, #120	; 0x78
 80049ca:	18fb      	adds	r3, r7, r3
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	3304      	adds	r3, #4
 80049d2:	2210      	movs	r2, #16
 80049d4:	2100      	movs	r1, #0
 80049d6:	0018      	movs	r0, r3
 80049d8:	f004 fe65 	bl	80096a6 <memset>
	char* arg[SKS_MAX_ARGV];
	for (i = 0; i < size; i++) {
 80049dc:	2300      	movs	r3, #0
 80049de:	193a      	adds	r2, r7, r4
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e023      	b.n	8004a2c <server_on_command+0xb4>
		if ((data[i] == '#') || (data[i] == '\n') || (data[i] == '\0')) {
 80049e4:	21a0      	movs	r1, #160	; 0xa0
 80049e6:	187b      	adds	r3, r7, r1
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	18d3      	adds	r3, r2, r3
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b23      	cmp	r3, #35	; 0x23
 80049f2:	d00d      	beq.n	8004a10 <server_on_command+0x98>
 80049f4:	187b      	adds	r3, r7, r1
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	18d3      	adds	r3, r2, r3
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b0a      	cmp	r3, #10
 8004a00:	d006      	beq.n	8004a10 <server_on_command+0x98>
 8004a02:	187b      	adds	r3, r7, r1
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	18d3      	adds	r3, r2, r3
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d107      	bne.n	8004a20 <server_on_command+0xa8>
			endPos = i + 1;
 8004a10:	23a0      	movs	r3, #160	; 0xa0
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3301      	adds	r3, #1
 8004a18:	22a4      	movs	r2, #164	; 0xa4
 8004a1a:	18ba      	adds	r2, r7, r2
 8004a1c:	6013      	str	r3, [r2, #0]
			break;
 8004a1e:	e00b      	b.n	8004a38 <server_on_command+0xc0>
	for (i = 0; i < size; i++) {
 8004a20:	22a0      	movs	r2, #160	; 0xa0
 8004a22:	18bb      	adds	r3, r7, r2
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	18ba      	adds	r2, r7, r2
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	23a0      	movs	r3, #160	; 0xa0
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	dbd5      	blt.n	80049e4 <server_on_command+0x6c>
		}
	}

	//xprintf("come here: %d\r\n", 1);

	if (endPos == 0)
 8004a38:	23a4      	movs	r3, #164	; 0xa4
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <server_on_command+0xce>
		return 0; //Waiting for end command sign
 8004a42:	2300      	movs	r3, #0
 8004a44:	e17a      	b.n	8004d3c <server_on_command+0x3c4>

	//xprintf("come here: %d, endPos: %d\r\n", 2, endPos);

	for (int i = 0; i < endPos; i++) {
 8004a46:	2300      	movs	r3, #0
 8004a48:	229c      	movs	r2, #156	; 0x9c
 8004a4a:	18ba      	adds	r2, r7, r2
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e0ce      	b.n	8004bee <server_on_command+0x276>
		if ((data[i] == ',') || (data[i] == '\n') || (data[i] == '#') || (data[i] == 0x00)) //complete one item
 8004a50:	219c      	movs	r1, #156	; 0x9c
 8004a52:	187b      	adds	r3, r7, r1
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	18d3      	adds	r3, r2, r3
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b2c      	cmp	r3, #44	; 0x2c
 8004a5e:	d015      	beq.n	8004a8c <server_on_command+0x114>
 8004a60:	187b      	adds	r3, r7, r1
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	18d3      	adds	r3, r2, r3
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b0a      	cmp	r3, #10
 8004a6c:	d00e      	beq.n	8004a8c <server_on_command+0x114>
 8004a6e:	187b      	adds	r3, r7, r1
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	18d3      	adds	r3, r2, r3
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b23      	cmp	r3, #35	; 0x23
 8004a7a:	d007      	beq.n	8004a8c <server_on_command+0x114>
 8004a7c:	187b      	adds	r3, r7, r1
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	18d3      	adds	r3, r2, r3
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d000      	beq.n	8004a8c <server_on_command+0x114>
 8004a8a:	e08d      	b.n	8004ba8 <server_on_command+0x230>
		{
			//xprintf("FIELD0 %d j=%d DATA %s\r\n", field, j, item_buff);

			if (j > 0) {
 8004a8c:	23ac      	movs	r3, #172	; 0xac
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	dd59      	ble.n	8004b4a <server_on_command+0x1d2>
				//xprintf("FIELD1 %d DATA %s, ptr=%s\r\n", field, item_buff, ptr);

				//if(*(uint32_t*)(ptr) == 0x2C53532A) //*SS,
				if(strncmp(ptr, "*SS,", 4) == 0) //*SS,
 8004a96:	49ab      	ldr	r1, [pc, #684]	; (8004d44 <server_on_command+0x3cc>)
 8004a98:	23a8      	movs	r3, #168	; 0xa8
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f005 fb99 	bl	800a1d8 <strncmp>
 8004aa6:	1e03      	subs	r3, r0, #0
 8004aa8:	d103      	bne.n	8004ab2 <server_on_command+0x13a>
				{
					field = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	22b0      	movs	r2, #176	; 0xb0
 8004aae:	18ba      	adds	r2, r7, r2
 8004ab0:	6013      	str	r3, [r2, #0]
				}
				ftmp = field;
 8004ab2:	22b0      	movs	r2, #176	; 0xb0
 8004ab4:	18bb      	adds	r3, r7, r2
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2498      	movs	r4, #152	; 0x98
 8004aba:	1939      	adds	r1, r7, r4
 8004abc:	600b      	str	r3, [r1, #0]

				//xprintf("FIELD %d DATA %s\r\n", field, item_buff);

				arg[field % SKS_MAX_ARGV] = ptr;
 8004abe:	18bb      	adds	r3, r7, r2
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2119      	movs	r1, #25
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f7fb fcb3 	bl	8000430 <__aeabi_idivmod>
 8004aca:	000b      	movs	r3, r1
 8004acc:	001a      	movs	r2, r3
 8004ace:	2314      	movs	r3, #20
 8004ad0:	18fb      	adds	r3, r7, r3
 8004ad2:	0092      	lsls	r2, r2, #2
 8004ad4:	21a8      	movs	r1, #168	; 0xa8
 8004ad6:	1879      	adds	r1, r7, r1
 8004ad8:	6809      	ldr	r1, [r1, #0]
 8004ada:	50d1      	str	r1, [r2, r3]
				switch (ftmp) {
 8004adc:	0022      	movs	r2, r4
 8004ade:	18bb      	adds	r3, r7, r2
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d033      	beq.n	8004b4e <server_on_command+0x1d6>
 8004ae6:	18bb      	adds	r3, r7, r2
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	dc31      	bgt.n	8004b52 <server_on_command+0x1da>
 8004aee:	18bb      	adds	r3, r7, r2
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d019      	beq.n	8004b2a <server_on_command+0x1b2>
 8004af6:	18bb      	adds	r3, r7, r2
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	dc29      	bgt.n	8004b52 <server_on_command+0x1da>
 8004afe:	18bb      	adds	r3, r7, r2
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d004      	beq.n	8004b10 <server_on_command+0x198>
 8004b06:	18bb      	adds	r3, r7, r2
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d023      	beq.n	8004b56 <server_on_command+0x1de>
					memcpy(command, ptr, j < SKS_MAX_CMD_LEN ? j : SKS_MAX_CMD_LEN);
					break;
				case 3:
					break;
				default:
					break;
 8004b0e:	e020      	b.n	8004b52 <server_on_command+0x1da>
					if(strncmp(ptr, "*SS,", 4) != 0) //*SS,
 8004b10:	498c      	ldr	r1, [pc, #560]	; (8004d44 <server_on_command+0x3cc>)
 8004b12:	23a8      	movs	r3, #168	; 0xa8
 8004b14:	18fb      	adds	r3, r7, r3
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2204      	movs	r2, #4
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f005 fb5c 	bl	800a1d8 <strncmp>
 8004b20:	1e03      	subs	r3, r0, #0
 8004b22:	d01a      	beq.n	8004b5a <server_on_command+0x1e2>
						return -1; //*SS,
 8004b24:	2301      	movs	r3, #1
 8004b26:	425b      	negs	r3, r3
 8004b28:	e108      	b.n	8004d3c <server_on_command+0x3c4>
					memcpy(command, ptr, j < SKS_MAX_CMD_LEN ? j : SKS_MAX_CMD_LEN);
 8004b2a:	23ac      	movs	r3, #172	; 0xac
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b0a      	cmp	r3, #10
 8004b32:	dd00      	ble.n	8004b36 <server_on_command+0x1be>
 8004b34:	230a      	movs	r3, #10
 8004b36:	001a      	movs	r2, r3
 8004b38:	23a8      	movs	r3, #168	; 0xa8
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	6819      	ldr	r1, [r3, #0]
 8004b3e:	238c      	movs	r3, #140	; 0x8c
 8004b40:	18fb      	adds	r3, r7, r3
 8004b42:	0018      	movs	r0, r3
 8004b44:	f004 fda6 	bl	8009694 <memcpy>
					break;
 8004b48:	e008      	b.n	8004b5c <server_on_command+0x1e4>
				}
			}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	e006      	b.n	8004b5c <server_on_command+0x1e4>
					break;
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	e004      	b.n	8004b5c <server_on_command+0x1e4>
					break;
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	e002      	b.n	8004b5c <server_on_command+0x1e4>
					break;
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	e000      	b.n	8004b5c <server_on_command+0x1e4>
					break;
 8004b5a:	46c0      	nop			; (mov r8, r8)

			field++;
 8004b5c:	21b0      	movs	r1, #176	; 0xb0
 8004b5e:	187b      	adds	r3, r7, r1
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	187a      	adds	r2, r7, r1
 8004b66:	6013      	str	r3, [r2, #0]
			if (field >= SKS_MAX_ARGV)
 8004b68:	187b      	adds	r3, r7, r1
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b18      	cmp	r3, #24
 8004b6e:	dc48      	bgt.n	8004c02 <server_on_command+0x28a>
				break;

			j = 0; //reset index
 8004b70:	2300      	movs	r3, #0
 8004b72:	22ac      	movs	r2, #172	; 0xac
 8004b74:	18ba      	adds	r2, r7, r2
 8004b76:	6013      	str	r3, [r2, #0]
			ptr = data + i + 1;
 8004b78:	239c      	movs	r3, #156	; 0x9c
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	18d3      	adds	r3, r2, r3
 8004b84:	24a8      	movs	r4, #168	; 0xa8
 8004b86:	193a      	adds	r2, r7, r4
 8004b88:	6013      	str	r3, [r2, #0]
			arg[field % SKS_MAX_ARGV] = ptr;
 8004b8a:	187b      	adds	r3, r7, r1
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2119      	movs	r1, #25
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7fb fc4d 	bl	8000430 <__aeabi_idivmod>
 8004b96:	000b      	movs	r3, r1
 8004b98:	001a      	movs	r2, r3
 8004b9a:	2314      	movs	r3, #20
 8004b9c:	18fb      	adds	r3, r7, r3
 8004b9e:	0092      	lsls	r2, r2, #2
 8004ba0:	1939      	adds	r1, r7, r4
 8004ba2:	6809      	ldr	r1, [r1, #0]
 8004ba4:	50d1      	str	r1, [r2, r3]
 8004ba6:	e01c      	b.n	8004be2 <server_on_command+0x26a>
		} else {
			item_buff[j % sizeof(item_buff)] = data[i];
 8004ba8:	239c      	movs	r3, #156	; 0x9c
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	18d4      	adds	r4, r2, r3
 8004bb2:	25ac      	movs	r5, #172	; 0xac
 8004bb4:	197b      	adds	r3, r7, r5
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2114      	movs	r1, #20
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f7fb fb4e 	bl	800025c <__aeabi_uidivmod>
 8004bc0:	000b      	movs	r3, r1
 8004bc2:	001a      	movs	r2, r3
 8004bc4:	7821      	ldrb	r1, [r4, #0]
 8004bc6:	2078      	movs	r0, #120	; 0x78
 8004bc8:	183b      	adds	r3, r7, r0
 8004bca:	5499      	strb	r1, [r3, r2]
			j++;
 8004bcc:	197b      	adds	r3, r7, r5
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	197a      	adds	r2, r7, r5
 8004bd4:	6013      	str	r3, [r2, #0]
			item_buff[j] = 0x00;
 8004bd6:	183a      	adds	r2, r7, r0
 8004bd8:	197b      	adds	r3, r7, r5
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	18d3      	adds	r3, r2, r3
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < endPos; i++) {
 8004be2:	229c      	movs	r2, #156	; 0x9c
 8004be4:	18bb      	adds	r3, r7, r2
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	18ba      	adds	r2, r7, r2
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	239c      	movs	r3, #156	; 0x9c
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	23a4      	movs	r3, #164	; 0xa4
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	da00      	bge.n	8004c00 <server_on_command+0x288>
 8004bfe:	e727      	b.n	8004a50 <server_on_command+0xd8>
 8004c00:	e000      	b.n	8004c04 <server_on_command+0x28c>
				break;
 8004c02:	46c0      	nop			; (mov r8, r8)
		}
	}

	//xprintf("come here: %d\r\n", 3);

	if (field > SKS_MAX_ARGV)
 8004c04:	23b0      	movs	r3, #176	; 0xb0
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b19      	cmp	r3, #25
 8004c0c:	dd03      	ble.n	8004c16 <server_on_command+0x29e>
		return endPos; //Too many param
 8004c0e:	23a4      	movs	r3, #164	; 0xa4
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	e092      	b.n	8004d3c <server_on_command+0x3c4>

	//xprintf("come here: %d\r\n", 4);

	if (field <= 3)
 8004c16:	23b0      	movs	r3, #176	; 0xb0
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	dc03      	bgt.n	8004c28 <server_on_command+0x2b0>
		return endPos; //Too few param
 8004c20:	23a4      	movs	r3, #164	; 0xa4
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	e089      	b.n	8004d3c <server_on_command+0x3c4>

	//xprintf("server_on_command: %s, command: %s \r\n", data, command);

	i = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	22a0      	movs	r2, #160	; 0xa0
 8004c2c:	18ba      	adds	r2, r7, r2
 8004c2e:	6013      	str	r3, [r2, #0]
	result = -1;
 8004c30:	2301      	movs	r3, #1
 8004c32:	425b      	negs	r3, r3
 8004c34:	22b4      	movs	r2, #180	; 0xb4
 8004c36:	18ba      	adds	r2, r7, r2
 8004c38:	6013      	str	r3, [r2, #0]
	response = 0;
 8004c3a:	4b43      	ldr	r3, [pc, #268]	; (8004d48 <server_on_command+0x3d0>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
	while(handlers[i].cmd) {
 8004c40:	e051      	b.n	8004ce6 <server_on_command+0x36e>
		if (strcmp(command, handlers[i].cmd) == 0) {
 8004c42:	4942      	ldr	r1, [pc, #264]	; (8004d4c <server_on_command+0x3d4>)
 8004c44:	24a0      	movs	r4, #160	; 0xa0
 8004c46:	193b      	adds	r3, r7, r4
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	0013      	movs	r3, r2
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	189b      	adds	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	585a      	ldr	r2, [r3, r1]
 8004c54:	268c      	movs	r6, #140	; 0x8c
 8004c56:	19bb      	adds	r3, r7, r6
 8004c58:	0011      	movs	r1, r2
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f7fb fa52 	bl	8000104 <strcmp>
 8004c60:	1e03      	subs	r3, r0, #0
 8004c62:	d13a      	bne.n	8004cda <server_on_command+0x362>
			//sks_log(LOG_INFO, "COMMAND A %s handlers[%d].cmd=%s", command, i, handlers[i].cmd);
			if (!(handlers[i].dis_mask & from)) //Chi cho phep gui lenh tu nguon
 8004c64:	4939      	ldr	r1, [pc, #228]	; (8004d4c <server_on_command+0x3d4>)
 8004c66:	193b      	adds	r3, r7, r4
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	0013      	movs	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	18cb      	adds	r3, r1, r3
 8004c74:	3308      	adds	r3, #8
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	001a      	movs	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d13e      	bne.n	8004cfe <server_on_command+0x386>
			{
				write_flash = 0;
 8004c80:	4b33      	ldr	r3, [pc, #204]	; (8004d50 <server_on_command+0x3d8>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
				memset(Response, 0, 200);
 8004c86:	4b33      	ldr	r3, [pc, #204]	; (8004d54 <server_on_command+0x3dc>)
 8004c88:	22c8      	movs	r2, #200	; 0xc8
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f004 fd0a 	bl	80096a6 <memset>

				result = handlers[i].handler(from, command, field, arg, endPos, size);
 8004c92:	492e      	ldr	r1, [pc, #184]	; (8004d4c <server_on_command+0x3d4>)
 8004c94:	193b      	adds	r3, r7, r4
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	0013      	movs	r3, r2
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	189b      	adds	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	18cb      	adds	r3, r1, r3
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	681c      	ldr	r4, [r3, #0]
 8004ca6:	2314      	movs	r3, #20
 8004ca8:	18fd      	adds	r5, r7, r3
 8004caa:	23b0      	movs	r3, #176	; 0xb0
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	19b9      	adds	r1, r7, r6
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	23a4      	movs	r3, #164	; 0xa4
 8004cba:	18fb      	adds	r3, r7, r3
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	002b      	movs	r3, r5
 8004cc2:	47a0      	blx	r4
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	22b4      	movs	r2, #180	; 0xb4
 8004cc8:	18ba      	adds	r2, r7, r2
 8004cca:	6013      	str	r3, [r2, #0]
				//sks_log(LOG_INFO, "***********===************COMMAND B%s handlers[%d].cmd=%s, total %d result:%d\r\n", command, i, handlers[i].cmd, size, result);

				if(write_flash) {
 8004ccc:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <server_on_command+0x3d8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d014      	beq.n	8004cfe <server_on_command+0x386>
					write_config();
 8004cd4:	f000 fd06 	bl	80056e4 <write_config>
				}
			}
			break;
 8004cd8:	e011      	b.n	8004cfe <server_on_command+0x386>
		}
		i++;
 8004cda:	22a0      	movs	r2, #160	; 0xa0
 8004cdc:	18bb      	adds	r3, r7, r2
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	18ba      	adds	r2, r7, r2
 8004ce4:	6013      	str	r3, [r2, #0]
	while(handlers[i].cmd) {
 8004ce6:	4919      	ldr	r1, [pc, #100]	; (8004d4c <server_on_command+0x3d4>)
 8004ce8:	23a0      	movs	r3, #160	; 0xa0
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	0013      	movs	r3, r2
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	189b      	adds	r3, r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	585b      	ldr	r3, [r3, r1]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1a2      	bne.n	8004c42 <server_on_command+0x2ca>
 8004cfc:	e000      	b.n	8004d00 <server_on_command+0x388>
			break;
 8004cfe:	46c0      	nop			; (mov r8, r8)
	}

	if (result > 0) {
 8004d00:	23b4      	movs	r3, #180	; 0xb4
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	dd0b      	ble.n	8004d22 <server_on_command+0x3aa>
		if (response) {
 8004d0a:	4b0f      	ldr	r3, [pc, #60]	; (8004d48 <server_on_command+0x3d0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d011      	beq.n	8004d36 <server_on_command+0x3be>
			if (from == SKS_CMD_SOURCE_COM1) {
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10e      	bne.n	8004d36 <server_on_command+0x3be>
				xprintf(Response);
 8004d18:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <server_on_command+0x3dc>)
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f003 fb7a 	bl	8008414 <xprintf>
 8004d20:	e009      	b.n	8004d36 <server_on_command+0x3be>
			} else if (from == SKS_CMD_SOURCE_COM2) {
				//ExtSerial_PutString(Response);
			} else {
			}
		}
	} else if (result < 0) {
 8004d22:	22b4      	movs	r2, #180	; 0xb4
 8004d24:	18bb      	adds	r3, r7, r2
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	da04      	bge.n	8004d36 <server_on_command+0x3be>
		result = endPos;
 8004d2c:	23a4      	movs	r3, #164	; 0xa4
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	18ba      	adds	r2, r7, r2
 8004d34:	6013      	str	r3, [r2, #0]
	}

	return result;
 8004d36:	23b4      	movs	r3, #180	; 0xb4
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	681b      	ldr	r3, [r3, #0]
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b02f      	add	sp, #188	; 0xbc
 8004d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d44:	0800cdd8 	.word	0x0800cdd8
 8004d48:	2000037c 	.word	0x2000037c
 8004d4c:	20000028 	.word	0x20000028
 8004d50:	20000480 	.word	0x20000480
 8004d54:	20000380 	.word	0x20000380

08004d58 <delay_ms>:
	for (i = 0; i < time_us; i++) {
		for (j = 0; j < 7; j++)
			;
	}
}
void delay_ms(unsigned int time_ms) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	uint32_t next_time = ulMiliCount+ time_ms;
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <delay_ms+0x28>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	18d3      	adds	r3, r2, r3
 8004d68:	60fb      	str	r3, [r7, #12]
	while(ulMiliCount<next_time);
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <delay_ms+0x28>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d8fa      	bhi.n	8004d6c <delay_ms+0x14>
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	46c0      	nop			; (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b004      	add	sp, #16
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	200004d4 	.word	0x200004d4

08004d84 <getMicros>:

uint32_t getMicros(void) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
	uint32_t micros;
	micros = ulMiliCount * 1000 + 1000 - SysTick->VAL / 64;
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <getMicros+0x30>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	0013      	movs	r3, r2
 8004d92:	015b      	lsls	r3, r3, #5
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	189b      	adds	r3, r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <getMicros+0x34>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	607b      	str	r3, [r7, #4]

	return micros;
 8004da8:	687b      	ldr	r3, [r7, #4]
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b002      	add	sp, #8
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	200004d4 	.word	0x200004d4
 8004db8:	e000e010 	.word	0xe000e010

08004dbc <gpio_clock_init>:


#include "drv_io.h"
#include "stm32g0xx.h"

void gpio_clock_init(void){
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8004dc0:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <gpio_clock_init+0x3c>)
 8004dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <gpio_clock_init+0x3c>)
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <gpio_clock_init+0x3c>)
 8004dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd0:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <gpio_clock_init+0x3c>)
 8004dd2:	2102      	movs	r1, #2
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 8004dd8:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <gpio_clock_init+0x3c>)
 8004dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <gpio_clock_init+0x3c>)
 8004dde:	2104      	movs	r1, #4
 8004de0:	430a      	orrs	r2, r1
 8004de2:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= RCC_IOPENR_GPIODEN;
 8004de4:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <gpio_clock_init+0x3c>)
 8004de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <gpio_clock_init+0x3c>)
 8004dea:	2108      	movs	r1, #8
 8004dec:	430a      	orrs	r2, r1
 8004dee:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004df0:	46c0      	nop			; (mov r8, r8)
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	40021000 	.word	0x40021000

08004dfc <gpio_pin_int>:

void gpio_pin_int(GPIO_TypeDef *gpio_port, uint16_t gpio_pin, uint8_t gpio_pinMode){
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	0008      	movs	r0, r1
 8004e06:	0011      	movs	r1, r2
 8004e08:	1cbb      	adds	r3, r7, #2
 8004e0a:	1c02      	adds	r2, r0, #0
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	1c7b      	adds	r3, r7, #1
 8004e10:	1c0a      	adds	r2, r1, #0
 8004e12:	701a      	strb	r2, [r3, #0]
	if(gpio_pin_outPut == gpio_pinMode){
 8004e14:	1c7b      	adds	r3, r7, #1
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d117      	bne.n	8004e4c <gpio_pin_int+0x50>
		gpio_port->MODER &= ~(0x03<<(gpio_pin*2));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	1cba      	adds	r2, r7, #2
 8004e22:	8812      	ldrh	r2, [r2, #0]
 8004e24:	0052      	lsls	r2, r2, #1
 8004e26:	2103      	movs	r1, #3
 8004e28:	4091      	lsls	r1, r2
 8004e2a:	000a      	movs	r2, r1
 8004e2c:	43d2      	mvns	r2, r2
 8004e2e:	401a      	ands	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	601a      	str	r2, [r3, #0]
		gpio_port->MODER |= (0x01<<(gpio_pin*2));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	1cba      	adds	r2, r7, #2
 8004e3a:	8812      	ldrh	r2, [r2, #0]
 8004e3c:	0052      	lsls	r2, r2, #1
 8004e3e:	2101      	movs	r1, #1
 8004e40:	4091      	lsls	r1, r2
 8004e42:	000a      	movs	r2, r1
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
	}
	else if(gpio_pin_inPut == gpio_pinMode){
		gpio_port->MODER &= ~(0x03<<(gpio_pin*2));

	}
}
 8004e4a:	e00f      	b.n	8004e6c <gpio_pin_int+0x70>
	else if(gpio_pin_inPut == gpio_pinMode){
 8004e4c:	1c7b      	adds	r3, r7, #1
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d10b      	bne.n	8004e6c <gpio_pin_int+0x70>
		gpio_port->MODER &= ~(0x03<<(gpio_pin*2));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	1cba      	adds	r2, r7, #2
 8004e5a:	8812      	ldrh	r2, [r2, #0]
 8004e5c:	0052      	lsls	r2, r2, #1
 8004e5e:	2103      	movs	r1, #3
 8004e60:	4091      	lsls	r1, r2
 8004e62:	000a      	movs	r2, r1
 8004e64:	43d2      	mvns	r2, r2
 8004e66:	401a      	ands	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	601a      	str	r2, [r3, #0]
}
 8004e6c:	46c0      	nop			; (mov r8, r8)
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b002      	add	sp, #8
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <gpio_write>:

void GpioInterruptInit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
}

void gpio_write(GPIO_TypeDef *gpio_port, uint16_t gpio_pin, uint8_t gpio_pinState){
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	0008      	movs	r0, r1
 8004e7e:	0011      	movs	r1, r2
 8004e80:	1cbb      	adds	r3, r7, #2
 8004e82:	1c02      	adds	r2, r0, #0
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	1c7b      	adds	r3, r7, #1
 8004e88:	1c0a      	adds	r2, r1, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
	if (gpio_pin_reset == gpio_pinState) {
 8004e8c:	1c7b      	adds	r3, r7, #1
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10b      	bne.n	8004eac <gpio_write+0x38>
		gpio_port->ODR &= ~(1 << gpio_pin);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	1cba      	adds	r2, r7, #2
 8004e9a:	8812      	ldrh	r2, [r2, #0]
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4091      	lsls	r1, r2
 8004ea0:	000a      	movs	r2, r1
 8004ea2:	43d2      	mvns	r2, r2
 8004ea4:	401a      	ands	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	615a      	str	r2, [r3, #20]
	} else {
		gpio_port->ODR |= 1 << gpio_pin;
	}
}
 8004eaa:	e009      	b.n	8004ec0 <gpio_write+0x4c>
		gpio_port->ODR |= 1 << gpio_pin;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	1cba      	adds	r2, r7, #2
 8004eb2:	8812      	ldrh	r2, [r2, #0]
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4091      	lsls	r1, r2
 8004eb8:	000a      	movs	r2, r1
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	615a      	str	r2, [r3, #20]
}
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <spi2_cs_low>:

}
void spi1_cs_high(void){

}
void spi2_cs_low(void){
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
	gpio_write(SPI2_CS_PORT, SPI2_CS_PIN, gpio_pin_reset);
 8004ecc:	23a0      	movs	r3, #160	; 0xa0
 8004ece:	05db      	lsls	r3, r3, #23
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2108      	movs	r1, #8
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7ff ffcd 	bl	8004e74 <gpio_write>
}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <spi2_cs_high>:
void spi2_cs_high(void){
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
	gpio_write(SPI2_CS_PORT, SPI2_CS_PIN, gpio_pin_set);
 8004ee4:	23a0      	movs	r3, #160	; 0xa0
 8004ee6:	05db      	lsls	r3, r3, #23
 8004ee8:	2201      	movs	r2, #1
 8004eea:	2108      	movs	r1, #8
 8004eec:	0018      	movs	r0, r3
 8004eee:	f7ff ffc1 	bl	8004e74 <gpio_write>
}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <spi1Init>:

void spi1Init(void){
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0

}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <spi2Init>:
void spi2Init(void){
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
	SPI2_LowLevel_Init();
 8004f08:	f000 f810 	bl	8004f2c <SPI2_LowLevel_Init>
	SPIx_Init(SPI2);
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <spi2Init+0x24>)
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f000 f88c 	bl	800502c <SPIx_Init>
	gpio_pin_int(SPI2_CS_PORT, SPI2_CS_PIN, gpio_pin_outPut);
 8004f14:	23a0      	movs	r3, #160	; 0xa0
 8004f16:	05db      	lsls	r3, r3, #23
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2108      	movs	r1, #8
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7ff ff6d 	bl	8004dfc <gpio_pin_int>
}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40003800 	.word	0x40003800

08004f2c <SPI2_LowLevel_Init>:
static void SPI2_LowLevel_Init(void) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
	uint32_t temp;
	//MISO
	SPI2_MISO_PORT->MODER &= ~(0x03 << (SPI2_MISO_PIN * 2));
 8004f32:	4b36      	ldr	r3, [pc, #216]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b35      	ldr	r3, [pc, #212]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f38:	4935      	ldr	r1, [pc, #212]	; (8005010 <SPI2_LowLevel_Init+0xe4>)
 8004f3a:	400a      	ands	r2, r1
 8004f3c:	601a      	str	r2, [r3, #0]
	SPI2_MISO_PORT->MODER |= (0x02 << (SPI2_MISO_PIN * 2)); //mode AF
 8004f3e:	4b33      	ldr	r3, [pc, #204]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b32      	ldr	r3, [pc, #200]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f44:	2180      	movs	r1, #128	; 0x80
 8004f46:	0589      	lsls	r1, r1, #22
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]

	SPI2_MISO_PORT->ODR &= ~(0x01 << SPI2_MISO_PIN); //push pull
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f4e:	695a      	ldr	r2, [r3, #20]
 8004f50:	4b2e      	ldr	r3, [pc, #184]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f52:	4930      	ldr	r1, [pc, #192]	; (8005014 <SPI2_LowLevel_Init+0xe8>)
 8004f54:	400a      	ands	r2, r1
 8004f56:	615a      	str	r2, [r3, #20]
	SPI2_MISO_PORT->PUPDR &= ~(0x03 << (SPI2_MISO_PIN * 2)); //no pull
 8004f58:	4b2c      	ldr	r3, [pc, #176]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f5e:	492c      	ldr	r1, [pc, #176]	; (8005010 <SPI2_LowLevel_Init+0xe4>)
 8004f60:	400a      	ands	r2, r1
 8004f62:	60da      	str	r2, [r3, #12]

	//SPI2_MISO_PORT->AFR[1] = 0x00;

	temp = SPI2_MISO_PORT->AFR[SPI2_MISO_PIN >> 3u];
 8004f64:	4b29      	ldr	r3, [pc, #164]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_MISO_PIN & 0x07u) * 4u));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2a      	ldr	r2, [pc, #168]	; (8005018 <SPI2_LowLevel_Init+0xec>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_MISO_PIN & 0x07u) * 4u));
	SPI2_MISO_PORT->AFR[SPI2_MISO_PIN >> 3u] = temp;
 8004f72:	4b26      	ldr	r3, [pc, #152]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24

	//MOSI
	SPI2_MOSI_PORT->MODER &= ~(0x03 << (SPI2_MOSI_PIN * 2));
 8004f78:	4b24      	ldr	r3, [pc, #144]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b23      	ldr	r3, [pc, #140]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f7e:	0092      	lsls	r2, r2, #2
 8004f80:	0892      	lsrs	r2, r2, #2
 8004f82:	601a      	str	r2, [r3, #0]
	SPI2_MOSI_PORT->MODER |= (0x02 << (SPI2_MOSI_PIN * 2)); //mode AF
 8004f84:	4b21      	ldr	r3, [pc, #132]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4b20      	ldr	r3, [pc, #128]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	0609      	lsls	r1, r1, #24
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]

	SPI2_MOSI_PORT->ODR &= ~(0x01 << SPI2_MOSI_PIN); //push pull
 8004f92:	4b1e      	ldr	r3, [pc, #120]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	4b1d      	ldr	r3, [pc, #116]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004f98:	4920      	ldr	r1, [pc, #128]	; (800501c <SPI2_LowLevel_Init+0xf0>)
 8004f9a:	400a      	ands	r2, r1
 8004f9c:	615a      	str	r2, [r3, #20]
	SPI2_MOSI_PORT->PUPDR &= ~(0x03 << (SPI2_MOSI_PIN * 2)); //no pull
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	4b1a      	ldr	r3, [pc, #104]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fa4:	0092      	lsls	r2, r2, #2
 8004fa6:	0892      	lsrs	r2, r2, #2
 8004fa8:	60da      	str	r2, [r3, #12]

	//SPI2_MOSI_PORT->AFR[1] = 0x00;
	temp = SPI2_MOSI_PORT->AFR[SPI2_MOSI_PIN >> 3u];
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_MOSI_PIN & 0x07u) * 4u));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_MOSI_PIN & 0x07u) * 4u));
	SPI2_MOSI_PORT->AFR[SPI2_MOSI_PIN >> 3u] = temp;
 8004fb8:	4b14      	ldr	r3, [pc, #80]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

	//SCK
	SPI2_SCK_PORT->MODER &= ~(0x03 << (SPI2_SCK_PIN * 2));
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b12      	ldr	r3, [pc, #72]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fc4:	4916      	ldr	r1, [pc, #88]	; (8005020 <SPI2_LowLevel_Init+0xf4>)
 8004fc6:	400a      	ands	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]
	SPI2_SCK_PORT->MODER |= (0x02 << (SPI2_SCK_PIN * 2)); //mode AF
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b0f      	ldr	r3, [pc, #60]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fd0:	2180      	movs	r1, #128	; 0x80
 8004fd2:	0509      	lsls	r1, r1, #20
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]

	SPI2_SCK_PORT->ODR &= ~(0x01 << SPI2_SCK_PIN); //push pull
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fde:	4911      	ldr	r1, [pc, #68]	; (8005024 <SPI2_LowLevel_Init+0xf8>)
 8004fe0:	400a      	ands	r2, r1
 8004fe2:	615a      	str	r2, [r3, #20]
	SPI2_SCK_PORT->PUPDR &= ~(0x03 << (SPI2_SCK_PIN * 2)); //no pull
 8004fe4:	4b09      	ldr	r3, [pc, #36]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004fea:	490d      	ldr	r1, [pc, #52]	; (8005020 <SPI2_LowLevel_Init+0xf4>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	60da      	str	r2, [r3, #12]

	//SPI2_SCK_PORT->AFR[1] = 0x00;
	temp = SPI2_SCK_PORT->AFR[SPI2_SCK_PIN >> 3u];
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_SCK_PIN & 0x07u) * 4u));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a0b      	ldr	r2, [pc, #44]	; (8005028 <SPI2_LowLevel_Init+0xfc>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_SCK_PIN & 0x07u) * 4u));
	SPI2_SCK_PORT->AFR[SPI2_SCK_PIN >> 3u] = temp;
 8004ffe:	4b03      	ldr	r3, [pc, #12]	; (800500c <SPI2_LowLevel_Init+0xe0>)
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005004:	46c0      	nop			; (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b002      	add	sp, #8
 800500a:	bd80      	pop	{r7, pc}
 800500c:	50000400 	.word	0x50000400
 8005010:	cfffffff 	.word	0xcfffffff
 8005014:	ffffbfff 	.word	0xffffbfff
 8005018:	f0ffffff 	.word	0xf0ffffff
 800501c:	ffff7fff 	.word	0xffff7fff
 8005020:	f3ffffff 	.word	0xf3ffffff
 8005024:	ffffdfff 	.word	0xffffdfff
 8005028:	ff0fffff 	.word	0xff0fffff

0800502c <SPIx_Init>:


static void SPIx_Init(SPI_TypeDef *SPIx){
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
	 RCC->APBENR1 |= RCC_APBENR1_SPI2EN;//clock Enbale
 8005034:	4b3d      	ldr	r3, [pc, #244]	; (800512c <SPIx_Init+0x100>)
 8005036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005038:	4b3c      	ldr	r3, [pc, #240]	; (800512c <SPIx_Init+0x100>)
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	01c9      	lsls	r1, r1, #7
 800503e:	430a      	orrs	r2, r1
 8005040:	63da      	str	r2, [r3, #60]	; 0x3c

	 SPIx->CR1 |= SPI_CR1_MSTR; //MasterMode
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2204      	movs	r2, #4
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_RXONLY;// 2line
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a37      	ldr	r2, [pc, #220]	; (8005130 <SPIx_Init+0x104>)
 8005054:	401a      	ands	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 &= SPI_CR2_DS;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	23f0      	movs	r3, #240	; 0xf0
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	401a      	ands	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	605a      	str	r2, [r3, #4]
	 SPIx->CR2 &= SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2;//8bit
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	23e0      	movs	r3, #224	; 0xe0
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	401a      	ands	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	605a      	str	r2, [r3, #4]
	 SPIx->CR1 &= ~SPI_CR1_CPHA;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2201      	movs	r2, #1
 800507c:	4393      	bics	r3, r2
 800507e:	001a      	movs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_CPOL;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2202      	movs	r2, #2
 800508a:	4393      	bics	r3, r2
 800508c:	001a      	movs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= SPI_CR1_SSM;//soff nss
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2280      	movs	r2, #128	; 0x80
 8005098:	0092      	lsls	r2, r2, #2
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= SPI_CR1_SSI;//soff nss
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2280      	movs	r2, #128	; 0x80
 80050a6:	0052      	lsls	r2, r2, #1
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_BR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2238      	movs	r2, #56	; 0x38
 80050b4:	4393      	bics	r3, r2
 80050b6:	001a      	movs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_2);   //f/8
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2230      	movs	r2, #48	; 0x30
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_LSBFIRST; //SPI_FIRSTBIT_MSB
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2280      	movs	r2, #128	; 0x80
 80050ce:	4393      	bics	r3, r2
 80050d0:	001a      	movs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 &= ~SPI_CR2_FRF;//SPI_TIMODE_DISABLE
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2210      	movs	r2, #16
 80050dc:	4393      	bics	r3, r2
 80050de:	001a      	movs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	605a      	str	r2, [r3, #4]
	 SPIx->CR1 &= ~SPI_CR1_CRCEN;//SPI_CRCCALCULATION_DISABLE
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a12      	ldr	r2, [pc, #72]	; (8005134 <SPIx_Init+0x108>)
 80050ea:	401a      	ands	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 |= SPI_CR2_NSSP;//SPI_NSS_PULSE_ENABLE
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2208      	movs	r2, #8
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	605a      	str	r2, [r3, #4]
	 SPIx->CR2 |= SPI_CR2_FRXTH;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2280      	movs	r2, #128	; 0x80
 8005102:	0152      	lsls	r2, r2, #5
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	605a      	str	r2, [r3, #4]
	 SPIx->I2SCFGR &= ~SPI_I2SCFGR_I2SMOD;//SPI mode is selected
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	4a0a      	ldr	r2, [pc, #40]	; (8005138 <SPIx_Init+0x10c>)
 8005110:	401a      	ands	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	61da      	str	r2, [r3, #28]
	 SPIx->CR1 |= SPI_CR1_SPE;//enable SPI
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2240      	movs	r2, #64	; 0x40
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	601a      	str	r2, [r3, #0]

}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	b002      	add	sp, #8
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	40021000 	.word	0x40021000
 8005130:	fffffbff 	.word	0xfffffbff
 8005134:	ffffdfff 	.word	0xffffdfff
 8005138:	fffff7ff 	.word	0xfffff7ff

0800513c <SPIx_readWrite>:



uint8_t SPIx_readWrite(SPI_TypeDef *SPIx, uint8_t byte){
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	000a      	movs	r2, r1
 8005146:	1cfb      	adds	r3, r7, #3
 8005148:	701a      	strb	r2, [r3, #0]
	uint8_t ret  = 0;
 800514a:	230f      	movs	r3, #15
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
	while(!((SPIx->SR) & SPI_SR_TXE));
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2202      	movs	r2, #2
 800515a:	4013      	ands	r3, r2
 800515c:	d0fa      	beq.n	8005154 <SPIx_readWrite+0x18>
	*((__IO uint8_t *)&SPIx->DR) = byte;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	330c      	adds	r3, #12
 8005162:	1cfa      	adds	r2, r7, #3
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	701a      	strb	r2, [r3, #0]
	while(!((SPIx->SR) & SPI_SR_RXNE));
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2201      	movs	r2, #1
 8005170:	4013      	ands	r3, r2
 8005172:	d0fa      	beq.n	800516a <SPIx_readWrite+0x2e>
	ret =  (uint8_t)SPIx->DR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	210f      	movs	r1, #15
 800517a:	187b      	adds	r3, r7, r1
 800517c:	701a      	strb	r2, [r3, #0]
	return ret;
 800517e:	187b      	adds	r3, r7, r1
 8005180:	781b      	ldrb	r3, [r3, #0]
}
 8005182:	0018      	movs	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	b004      	add	sp, #16
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <FLASH_Lock>:
#include "stm32g031xx.h"
#include "dvr_flash.h"

//#define FLASH_PAGE_SIZE				0x800

void FLASH_Lock(void) {
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <FLASH_Lock+0x18>)
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	4b03      	ldr	r3, [pc, #12]	; (80051a4 <FLASH_Lock+0x18>)
 8005196:	2180      	movs	r1, #128	; 0x80
 8005198:	0609      	lsls	r1, r1, #24
 800519a:	430a      	orrs	r2, r1
 800519c:	615a      	str	r2, [r3, #20]
}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40022000 	.word	0x40022000

080051a8 <FLASH_Unlock>:

void FLASH_Unlock(void) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
	if (FLASH->CR & FLASH_CR_LOCK) {
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <FLASH_Unlock+0x20>)
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	da05      	bge.n	80051c0 <FLASH_Unlock+0x18>
		FLASH->KEYR = FLASH_KEY1;
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <FLASH_Unlock+0x20>)
 80051b6:	4a05      	ldr	r2, [pc, #20]	; (80051cc <FLASH_Unlock+0x24>)
 80051b8:	609a      	str	r2, [r3, #8]
		FLASH->KEYR = FLASH_KEY2;
 80051ba:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <FLASH_Unlock+0x20>)
 80051bc:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <FLASH_Unlock+0x28>)
 80051be:	609a      	str	r2, [r3, #8]
	}
}
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	46c0      	nop			; (mov r8, r8)
 80051c8:	40022000 	.word	0x40022000
 80051cc:	45670123 	.word	0x45670123
 80051d0:	cdef89ab 	.word	0xcdef89ab

080051d4 <FLASH_GetBank1Status>:

	return flashstatus;
}


FLASH_Status FLASH_GetBank1Status(void) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0

	FLASH_Status flashstatus = FLASH_COMPLETE1;
 80051da:	1dfb      	adds	r3, r7, #7
 80051dc:	2204      	movs	r2, #4
 80051de:	701a      	strb	r2, [r3, #0]

	if ((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) {
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <FLASH_GetBank1Status+0x5c>)
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	025b      	lsls	r3, r3, #9
 80051e8:	401a      	ands	r2, r3
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	025b      	lsls	r3, r3, #9
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d103      	bne.n	80051fa <FLASH_GetBank1Status+0x26>
		flashstatus = FLASH_BUSY;
 80051f2:	1dfb      	adds	r3, r7, #7
 80051f4:	2201      	movs	r2, #1
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e014      	b.n	8005224 <FLASH_GetBank1Status+0x50>
	} else {
		if ((FLASH->SR & FLASH_FLAG_BANK1_PROGERR) != 0) {
 80051fa:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <FLASH_GetBank1Status+0x5c>)
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2208      	movs	r2, #8
 8005200:	4013      	ands	r3, r2
 8005202:	d003      	beq.n	800520c <FLASH_GetBank1Status+0x38>
			flashstatus = FLASH_ERROR_PG1;
 8005204:	1dfb      	adds	r3, r7, #7
 8005206:	2202      	movs	r2, #2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e00b      	b.n	8005224 <FLASH_GetBank1Status+0x50>
		} else {
			if ((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0) {
 800520c:	4b08      	ldr	r3, [pc, #32]	; (8005230 <FLASH_GetBank1Status+0x5c>)
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2210      	movs	r2, #16
 8005212:	4013      	ands	r3, r2
 8005214:	d003      	beq.n	800521e <FLASH_GetBank1Status+0x4a>
				flashstatus = FLASH_ERROR_WRP1;
 8005216:	1dfb      	adds	r3, r7, #7
 8005218:	2203      	movs	r2, #3
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e002      	b.n	8005224 <FLASH_GetBank1Status+0x50>
			} else {
				flashstatus = FLASH_COMPLETE1;
 800521e:	1dfb      	adds	r3, r7, #7
 8005220:	2204      	movs	r2, #4
 8005222:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return flashstatus;
 8005224:	1dfb      	adds	r3, r7, #7
 8005226:	781b      	ldrb	r3, [r3, #0]
}
 8005228:	0018      	movs	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	b002      	add	sp, #8
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40022000 	.word	0x40022000

08005234 <FLASH_WaitForLastBank1Operation>:

FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout) {
 8005234:	b5b0      	push	{r4, r5, r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	FLASH_Status status = FLASH_COMPLETE1;
 800523c:	250f      	movs	r5, #15
 800523e:	197b      	adds	r3, r7, r5
 8005240:	2204      	movs	r2, #4
 8005242:	701a      	strb	r2, [r3, #0]

	/* Check for the Flash Status */
	status = FLASH_GetBank1Status();
 8005244:	197c      	adds	r4, r7, r5
 8005246:	f7ff ffc5 	bl	80051d4 <FLASH_GetBank1Status>
 800524a:	0003      	movs	r3, r0
 800524c:	7023      	strb	r3, [r4, #0]
	/* Wait for a Flash operation to complete or a TIMEOUT to occur */
	while ((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00)) {
 800524e:	46c0      	nop			; (mov r8, r8)
		status = FLASH_GetBank1Status();
		Timeout--;
	}
	if (Timeout == 0x00) {
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <FLASH_WaitForLastBank1Operation+0x28>
		status = FLASH_TIMEOUT;
 8005256:	197b      	adds	r3, r7, r5
 8005258:	2205      	movs	r2, #5
 800525a:	701a      	strb	r2, [r3, #0]
	}
	/* Return the operation status */
	return status;
 800525c:	230f      	movs	r3, #15
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	781b      	ldrb	r3, [r3, #0]
}
 8005262:	0018      	movs	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	b004      	add	sp, #16
 8005268:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800526c <FLASH_ErasePage>:
	/* Return the operation status */
	return status;

}

FLASH_Status FLASH_ErasePage(uint32_t Page_Address) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	FLASH_Status status = FLASH_COMPLETE1;
 8005274:	230f      	movs	r3, #15
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	2204      	movs	r2, #4
 800527a:	701a      	strb	r2, [r3, #0]
	//uint32_t page = (Page_Address - BASE_ADDR) / FLASH_PAGE_SIZE;
	uint32_t page = (Page_Address - BASE_ADDR) / 0x800;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	22f8      	movs	r2, #248	; 0xf8
 8005280:	0612      	lsls	r2, r2, #24
 8005282:	4694      	mov	ip, r2
 8005284:	4463      	add	r3, ip
 8005286:	0adb      	lsrs	r3, r3, #11
 8005288:	60bb      	str	r3, [r7, #8]
	while ((FLASH->SR & FLASH_SR_BSY1));
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <FLASH_ErasePage+0x98>)
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	025b      	lsls	r3, r3, #9
 8005294:	4013      	ands	r3, r2
 8005296:	d1f9      	bne.n	800528c <FLASH_ErasePage+0x20>
	FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 8005298:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <FLASH_ErasePage+0x98>)
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	4b19      	ldr	r3, [pc, #100]	; (8005304 <FLASH_ErasePage+0x98>)
 800529e:	2102      	movs	r1, #2
 80052a0:	430a      	orrs	r2, r1
 80052a2:	615a      	str	r2, [r3, #20]
	FLASH->CR &= ~FLASH_CR_PNB;
 80052a4:	4b17      	ldr	r3, [pc, #92]	; (8005304 <FLASH_ErasePage+0x98>)
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	4b16      	ldr	r3, [pc, #88]	; (8005304 <FLASH_ErasePage+0x98>)
 80052aa:	4917      	ldr	r1, [pc, #92]	; (8005308 <FLASH_ErasePage+0x9c>)
 80052ac:	400a      	ands	r2, r1
 80052ae:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_PNB & (page << 3));
 80052b0:	4b14      	ldr	r3, [pc, #80]	; (8005304 <FLASH_ErasePage+0x98>)
 80052b2:	6959      	ldr	r1, [r3, #20]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4a14      	ldr	r2, [pc, #80]	; (800530c <FLASH_ErasePage+0xa0>)
 80052ba:	401a      	ands	r2, r3
 80052bc:	4b11      	ldr	r3, [pc, #68]	; (8005304 <FLASH_ErasePage+0x98>)
 80052be:	430a      	orrs	r2, r1
 80052c0:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <FLASH_ErasePage+0x98>)
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <FLASH_ErasePage+0x98>)
 80052c8:	2180      	movs	r1, #128	; 0x80
 80052ca:	0249      	lsls	r1, r1, #9
 80052cc:	430a      	orrs	r2, r1
 80052ce:	615a      	str	r2, [r3, #20]
	while ((FLASH->SR & FLASH_SR_BSY1));
 80052d0:	46c0      	nop			; (mov r8, r8)
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <FLASH_ErasePage+0x98>)
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	025b      	lsls	r3, r3, #9
 80052da:	4013      	ands	r3, r2
 80052dc:	d1f9      	bne.n	80052d2 <FLASH_ErasePage+0x66>
	FLASH->CR &= ~FLASH_SR_BSY1;
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <FLASH_ErasePage+0x98>)
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	4b08      	ldr	r3, [pc, #32]	; (8005304 <FLASH_ErasePage+0x98>)
 80052e4:	490a      	ldr	r1, [pc, #40]	; (8005310 <FLASH_ErasePage+0xa4>)
 80052e6:	400a      	ands	r2, r1
 80052e8:	615a      	str	r2, [r3, #20]
	FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <FLASH_ErasePage+0x98>)
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <FLASH_ErasePage+0x98>)
 80052f0:	2102      	movs	r1, #2
 80052f2:	438a      	bics	r2, r1
 80052f4:	615a      	str	r2, [r3, #20]
	return status;
 80052f6:	230f      	movs	r3, #15
 80052f8:	18fb      	adds	r3, r7, r3
 80052fa:	781b      	ldrb	r3, [r3, #0]
}
 80052fc:	0018      	movs	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	b004      	add	sp, #16
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40022000 	.word	0x40022000
 8005308:	ffffe007 	.word	0xffffe007
 800530c:	00001ff8 	.word	0x00001ff8
 8005310:	fffeffff 	.word	0xfffeffff

08005314 <FLASH_ProgramDoubleWord>:


void flashProgramDoubleWorld(uint32_t addr, uint64_t data) {
}

FLASH_Status FLASH_ProgramDoubleWord(uint32_t addr, uint64_t data) {
 8005314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	603a      	str	r2, [r7, #0]
 800531e:	607b      	str	r3, [r7, #4]

	FLASH_Status status = FLASH_COMPLETE1;
 8005320:	2117      	movs	r1, #23
 8005322:	187b      	adds	r3, r7, r1
 8005324:	2204      	movs	r2, #4
 8005326:	701a      	strb	r2, [r3, #0]
	status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 8005328:	187e      	adds	r6, r7, r1
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	019b      	lsls	r3, r3, #6
 800532e:	0018      	movs	r0, r3
 8005330:	f7ff ff80 	bl	8005234 <FLASH_WaitForLastBank1Operation>
 8005334:	0003      	movs	r3, r0
 8005336:	7033      	strb	r3, [r6, #0]

	FLASH->CR |= FLASH_CR_PG;/*!< Programming */
 8005338:	4b14      	ldr	r3, [pc, #80]	; (800538c <FLASH_ProgramDoubleWord+0x78>)
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	4b13      	ldr	r3, [pc, #76]	; (800538c <FLASH_ProgramDoubleWord+0x78>)
 800533e:	2101      	movs	r1, #1
 8005340:	430a      	orrs	r2, r1
 8005342:	615a      	str	r2, [r3, #20]
	*(uint32_t*) addr = (uint32_t) data;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800534a:	f3bf 8f6f 	isb	sy
}
 800534e:	46c0      	nop			; (mov r8, r8)
	__ISB();
	*(uint32_t*) (addr + 4U) = (uint32_t) (data >> 32U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	001c      	movs	r4, r3
 8005354:	2300      	movs	r3, #0
 8005356:	001d      	movs	r5, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3304      	adds	r3, #4
 800535c:	0022      	movs	r2, r4
 800535e:	601a      	str	r2, [r3, #0]

	status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 8005360:	2517      	movs	r5, #23
 8005362:	197c      	adds	r4, r7, r5
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	019b      	lsls	r3, r3, #6
 8005368:	0018      	movs	r0, r3
 800536a:	f7ff ff63 	bl	8005234 <FLASH_WaitForLastBank1Operation>
 800536e:	0003      	movs	r3, r0
 8005370:	7023      	strb	r3, [r4, #0]

	FLASH->CR &= ~FLASH_CR_PG;
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <FLASH_ProgramDoubleWord+0x78>)
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <FLASH_ProgramDoubleWord+0x78>)
 8005378:	2101      	movs	r1, #1
 800537a:	438a      	bics	r2, r1
 800537c:	615a      	str	r2, [r3, #20]

	return status;
 800537e:	197b      	adds	r3, r7, r5
 8005380:	781b      	ldrb	r3, [r3, #0]
}
 8005382:	0018      	movs	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	b007      	add	sp, #28
 8005388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	40022000 	.word	0x40022000

08005390 <FLASH_ClearFlag>:


void FLASH_ClearFlag(uint32_t FLASH_FLAG) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	FLASH->SR = FLASH_FLAG;
 8005398:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <FLASH_ClearFlag+0x18>)
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	611a      	str	r2, [r3, #16]
}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b002      	add	sp, #8
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	40022000 	.word	0x40022000

080053ac <usart_x0_init>:

static void COMX0_pin_init(void) ;
static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) ;


void usart_x0_init(uint32_t baudrate) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]

	COMX0_pin_init();
 80053b4:	f000 f82a 	bl	800540c <COMX0_pin_init>
	uartx_init(COMX0, baudrate);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a07      	ldr	r2, [pc, #28]	; (80053d8 <usart_x0_init+0x2c>)
 80053bc:	0019      	movs	r1, r3
 80053be:	0010      	movs	r0, r2
 80053c0:	f000 f8ba 	bl	8005538 <uartx_init>
	COMX0->CR1 |= USART_CR1_RXNEIE_RXFNEIE;//enable RX interrupt
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <usart_x0_init+0x2c>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <usart_x0_init+0x2c>)
 80053ca:	2120      	movs	r1, #32
 80053cc:	430a      	orrs	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]
}
 80053d0:	46c0      	nop			; (mov r8, r8)
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b002      	add	sp, #8
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40013800 	.word	0x40013800

080053dc <usart_x0_send>:

void usart_x0_send(uint8_t c){
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	0002      	movs	r2, r0
 80053e4:	1dfb      	adds	r3, r7, #7
 80053e6:	701a      	strb	r2, [r3, #0]
	while ((COMX0->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 80053e8:	46c0      	nop			; (mov r8, r8)
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <usart_x0_send+0x2c>)
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	2280      	movs	r2, #128	; 0x80
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b80      	cmp	r3, #128	; 0x80
 80053f4:	d1f9      	bne.n	80053ea <usart_x0_send+0xe>
	COMX0->TDR = c;
 80053f6:	4b04      	ldr	r3, [pc, #16]	; (8005408 <usart_x0_send+0x2c>)
 80053f8:	1dfa      	adds	r2, r7, #7
 80053fa:	7812      	ldrb	r2, [r2, #0]
 80053fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	46bd      	mov	sp, r7
 8005402:	b002      	add	sp, #8
 8005404:	bd80      	pop	{r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	40013800 	.word	0x40013800

0800540c <COMX0_pin_init>:

static void COMX0_pin_init(void) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	607b      	str	r3, [r7, #4]
	RCC->IOPENR |= (COMX0_TX_GPIO_CLK | COMX0_TX_GPIO_CLK);
 8005416:	4b42      	ldr	r3, [pc, #264]	; (8005520 <COMX0_pin_init+0x114>)
 8005418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800541a:	4b41      	ldr	r3, [pc, #260]	; (8005520 <COMX0_pin_init+0x114>)
 800541c:	2101      	movs	r1, #1
 800541e:	430a      	orrs	r2, r1
 8005420:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->COMX0_APB_CLK |= COMX0_CLK;
 8005422:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <COMX0_pin_init+0x114>)
 8005424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005426:	4b3e      	ldr	r3, [pc, #248]	; (8005520 <COMX0_pin_init+0x114>)
 8005428:	2180      	movs	r1, #128	; 0x80
 800542a:	01c9      	lsls	r1, r1, #7
 800542c:	430a      	orrs	r2, r1
 800542e:	641a      	str	r2, [r3, #64]	; 0x40

	COMX0_RX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_RX_PIN * 2));
 8005430:	23a0      	movs	r3, #160	; 0xa0
 8005432:	05db      	lsls	r3, r3, #23
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	23a0      	movs	r3, #160	; 0xa0
 8005438:	05db      	lsls	r3, r3, #23
 800543a:	493a      	ldr	r1, [pc, #232]	; (8005524 <COMX0_pin_init+0x118>)
 800543c:	400a      	ands	r2, r1
 800543e:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->MODER |= (0x02 << (COMX0_RX_PIN * 2)); //mode AF
 8005440:	23a0      	movs	r3, #160	; 0xa0
 8005442:	05db      	lsls	r3, r3, #23
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	23a0      	movs	r3, #160	; 0xa0
 8005448:	05db      	lsls	r3, r3, #23
 800544a:	2180      	movs	r1, #128	; 0x80
 800544c:	0389      	lsls	r1, r1, #14
 800544e:	430a      	orrs	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->ODR &= ~(0x01 << COMX0_RX_PIN); //push pull
 8005452:	23a0      	movs	r3, #160	; 0xa0
 8005454:	05db      	lsls	r3, r3, #23
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	23a0      	movs	r3, #160	; 0xa0
 800545a:	05db      	lsls	r3, r3, #23
 800545c:	4932      	ldr	r1, [pc, #200]	; (8005528 <COMX0_pin_init+0x11c>)
 800545e:	400a      	ands	r2, r1
 8005460:	615a      	str	r2, [r3, #20]
	COMX0_RX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_RX_PIN * 2)); //no pull
 8005462:	23a0      	movs	r3, #160	; 0xa0
 8005464:	05db      	lsls	r3, r3, #23
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	23a0      	movs	r3, #160	; 0xa0
 800546a:	05db      	lsls	r3, r3, #23
 800546c:	492d      	ldr	r1, [pc, #180]	; (8005524 <COMX0_pin_init+0x118>)
 800546e:	400a      	ands	r2, r1
 8005470:	60da      	str	r2, [r3, #12]
	COMX0_RX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_RX_PIN); ////speed low
 8005472:	23a0      	movs	r3, #160	; 0xa0
 8005474:	05db      	lsls	r3, r3, #23
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	23a0      	movs	r3, #160	; 0xa0
 800547a:	05db      	lsls	r3, r3, #23
 800547c:	492a      	ldr	r1, [pc, #168]	; (8005528 <COMX0_pin_init+0x11c>)
 800547e:	400a      	ands	r2, r1
 8005480:	609a      	str	r2, [r3, #8]

	COMX0_TX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_TX_PIN * 2));
 8005482:	23a0      	movs	r3, #160	; 0xa0
 8005484:	05db      	lsls	r3, r3, #23
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	23a0      	movs	r3, #160	; 0xa0
 800548a:	05db      	lsls	r3, r3, #23
 800548c:	4927      	ldr	r1, [pc, #156]	; (800552c <COMX0_pin_init+0x120>)
 800548e:	400a      	ands	r2, r1
 8005490:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->MODER |= (0x02 << (COMX0_TX_PIN * 2)); //mode AF
 8005492:	23a0      	movs	r3, #160	; 0xa0
 8005494:	05db      	lsls	r3, r3, #23
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	23a0      	movs	r3, #160	; 0xa0
 800549a:	05db      	lsls	r3, r3, #23
 800549c:	2180      	movs	r1, #128	; 0x80
 800549e:	0309      	lsls	r1, r1, #12
 80054a0:	430a      	orrs	r2, r1
 80054a2:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->ODR &= ~(0x01 << COMX0_TX_PIN); //push pull
 80054a4:	23a0      	movs	r3, #160	; 0xa0
 80054a6:	05db      	lsls	r3, r3, #23
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	23a0      	movs	r3, #160	; 0xa0
 80054ac:	05db      	lsls	r3, r3, #23
 80054ae:	4920      	ldr	r1, [pc, #128]	; (8005530 <COMX0_pin_init+0x124>)
 80054b0:	400a      	ands	r2, r1
 80054b2:	615a      	str	r2, [r3, #20]
	COMX0_TX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_TX_PIN * 2)); //no pull
 80054b4:	23a0      	movs	r3, #160	; 0xa0
 80054b6:	05db      	lsls	r3, r3, #23
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	23a0      	movs	r3, #160	; 0xa0
 80054bc:	05db      	lsls	r3, r3, #23
 80054be:	491b      	ldr	r1, [pc, #108]	; (800552c <COMX0_pin_init+0x120>)
 80054c0:	400a      	ands	r2, r1
 80054c2:	60da      	str	r2, [r3, #12]
	COMX0_TX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_TX_PIN); ////speed low
 80054c4:	23a0      	movs	r3, #160	; 0xa0
 80054c6:	05db      	lsls	r3, r3, #23
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	23a0      	movs	r3, #160	; 0xa0
 80054cc:	05db      	lsls	r3, r3, #23
 80054ce:	4918      	ldr	r1, [pc, #96]	; (8005530 <COMX0_pin_init+0x124>)
 80054d0:	400a      	ands	r2, r1
 80054d2:	609a      	str	r2, [r3, #8]

	temp = COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3u];
 80054d4:	23a0      	movs	r3, #160	; 0xa0
 80054d6:	05db      	lsls	r3, r3, #23
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_RX_PIN & 0x07u) * 4ul));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a15      	ldr	r2, [pc, #84]	; (8005534 <COMX0_pin_init+0x128>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_RX_PIN_AF << ((COMX0_RX_PIN & 0x07u) * 4ul));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2280      	movs	r2, #128	; 0x80
 80054e8:	0052      	lsls	r2, r2, #1
 80054ea:	4313      	orrs	r3, r2
 80054ec:	607b      	str	r3, [r7, #4]
	COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3ul] = temp;
 80054ee:	23a0      	movs	r3, #160	; 0xa0
 80054f0:	05db      	lsls	r3, r3, #23
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24

	temp = COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3u];
 80054f6:	23a0      	movs	r3, #160	; 0xa0
 80054f8:	05db      	lsls	r3, r3, #23
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_TX_PIN & 0x07u) * 4ul));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	22f0      	movs	r2, #240	; 0xf0
 8005502:	4393      	bics	r3, r2
 8005504:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_TX_PIN_AF << ((COMX0_TX_PIN & 0x07u) * 4ul));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2210      	movs	r2, #16
 800550a:	4313      	orrs	r3, r2
 800550c:	607b      	str	r3, [r7, #4]
	COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3ul] = temp;
 800550e:	23a0      	movs	r3, #160	; 0xa0
 8005510:	05db      	lsls	r3, r3, #23
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	46bd      	mov	sp, r7
 800551a:	b002      	add	sp, #8
 800551c:	bd80      	pop	{r7, pc}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	40021000 	.word	0x40021000
 8005524:	ffcfffff 	.word	0xffcfffff
 8005528:	fffffbff 	.word	0xfffffbff
 800552c:	fff3ffff 	.word	0xfff3ffff
 8005530:	fffffdff 	.word	0xfffffdff
 8005534:	fffff0ff 	.word	0xfffff0ff

08005538 <uartx_init>:



static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
	uint32_t BRR_value = SYS_CLOCK / baudrate;
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	4819      	ldr	r0, [pc, #100]	; (80055ac <uartx_init+0x74>)
 8005546:	f7fa fe03 	bl	8000150 <__udivsi3>
 800554a:	0003      	movs	r3, r0
 800554c:	60fb      	str	r3, [r7, #12]

	UARTx->CR1 = 0;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
	// Word length 8n1
	UARTx->CR1 &= ~USART_CR1_M1;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <uartx_init+0x78>)
 800555a:	401a      	ands	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	601a      	str	r2, [r3, #0]
	//Parity disable
	UARTx->CR1 &= ~USART_CR1_PCE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a13      	ldr	r2, [pc, #76]	; (80055b4 <uartx_init+0x7c>)
 8005566:	401a      	ands	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	601a      	str	r2, [r3, #0]
	//mode Tx_Rx
	UARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	220c      	movs	r2, #12
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	601a      	str	r2, [r3, #0]
	//OverSampling 16bit
	UARTx->CR1 &= ~USART_CR1_OVER8;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a0e      	ldr	r2, [pc, #56]	; (80055b8 <uartx_init+0x80>)
 800557e:	401a      	ands	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	601a      	str	r2, [r3, #0]
	//ClockPrescaler no div
	UARTx->PRESC &= USART_PRESC_PRESCALER;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	220f      	movs	r2, #15
 800558a:	401a      	ands	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	62da      	str	r2, [r3, #44]	; 0x2c
	//set baudrate 115200
	UARTx->BRR = BRR_value;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	60da      	str	r2, [r3, #12]
	//rx interupt enable
	//UARTx->CR1 |= USART_CR1_RXNEIE_RXFNEIE;
	UARTx->CR1 |= USART_CR1_UE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2201      	movs	r2, #1
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	601a      	str	r2, [r3, #0]
}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b004      	add	sp, #16
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	03d09000 	.word	0x03d09000
 80055b0:	efffffff 	.word	0xefffffff
 80055b4:	fffffbff 	.word	0xfffffbff
 80055b8:	ffff7fff 	.word	0xffff7fff

080055bc <NMEAChecksum>:
#include "config.h"
#include "flash.h"

volatile FLASH_Status FLASHStatus = FLASH_TIMEOUT;

char NMEAChecksum(char *data, int len) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	char checksum_value = 0;
 80055c6:	2317      	movs	r3, #23
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]

	int string_length = len;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	60fb      	str	r3, [r7, #12]
	int index = 1; // Skip over the $ at the begining of the sentence
 80055d2:	2301      	movs	r3, #1
 80055d4:	613b      	str	r3, [r7, #16]
	while (index < string_length) {
 80055d6:	e00c      	b.n	80055f2 <NMEAChecksum+0x36>
		checksum_value ^= data[index];
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	18d3      	adds	r3, r2, r3
 80055de:	7819      	ldrb	r1, [r3, #0]
 80055e0:	2217      	movs	r2, #23
 80055e2:	18bb      	adds	r3, r7, r2
 80055e4:	18ba      	adds	r2, r7, r2
 80055e6:	7812      	ldrb	r2, [r2, #0]
 80055e8:	404a      	eors	r2, r1
 80055ea:	701a      	strb	r2, [r3, #0]
		index++;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	3301      	adds	r3, #1
 80055f0:	613b      	str	r3, [r7, #16]
	while (index < string_length) {
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	dbee      	blt.n	80055d8 <NMEAChecksum+0x1c>
	}
	return (checksum_value);
 80055fa:	2317      	movs	r3, #23
 80055fc:	18fb      	adds	r3, r7, r3
 80055fe:	781b      	ldrb	r3, [r3, #0]
}
 8005600:	0018      	movs	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	b006      	add	sp, #24
 8005606:	bd80      	pop	{r7, pc}

08005608 <flash_write_config>:

int flash_write_config(uint32_t address, char *pdata, int len) {
 8005608:	b5b0      	push	{r4, r5, r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6178      	str	r0, [r7, #20]
 8005610:	6139      	str	r1, [r7, #16]
 8005612:	60fa      	str	r2, [r7, #12]
	uint32_t *pRecord = (uint64_t*) pdata;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t flash_address = address;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	623b      	str	r3, [r7, #32]
	FLASH_Unlock();
 800561c:	f7ff fdc4 	bl	80051a8 <FLASH_Unlock>
	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PROGERR | FLASH_FLAG_WRPRTERR);
 8005620:	2019      	movs	r0, #25
 8005622:	f7ff feb5 	bl	8005390 <FLASH_ClearFlag>
	if (FLASH_ErasePage(flash_address) != FLASH_COMPLETE1)
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	0018      	movs	r0, r3
 800562a:	f7ff fe1f 	bl	800526c <FLASH_ErasePage>
 800562e:	0003      	movs	r3, r0
 8005630:	2b04      	cmp	r3, #4
 8005632:	d003      	beq.n	800563c <flash_write_config+0x34>
		xprintf("erase flash fail\r\n");
 8005634:	4b18      	ldr	r3, [pc, #96]	; (8005698 <flash_write_config+0x90>)
 8005636:	0018      	movs	r0, r3
 8005638:	f002 feec 	bl	8008414 <xprintf>

	for (int i = 0; i < len; i += 8, pRecord++, flash_address += 8) {
 800563c:	2300      	movs	r3, #0
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	e01e      	b.n	8005680 <flash_write_config+0x78>
		if (!FLASH_ProgramDoubleWord(flash_address, *pRecord)) {
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	001c      	movs	r4, r3
 8005648:	2300      	movs	r3, #0
 800564a:	001d      	movs	r5, r3
 800564c:	6a39      	ldr	r1, [r7, #32]
 800564e:	0022      	movs	r2, r4
 8005650:	002b      	movs	r3, r5
 8005652:	0008      	movs	r0, r1
 8005654:	f7ff fe5e 	bl	8005314 <FLASH_ProgramDoubleWord>
 8005658:	1e03      	subs	r3, r0, #0
 800565a:	d103      	bne.n	8005664 <flash_write_config+0x5c>
			FLASH_Lock();
 800565c:	f7ff fd96 	bl	800518c <FLASH_Lock>
			return 0;
 8005660:	2300      	movs	r3, #0
 8005662:	e014      	b.n	800568e <flash_write_config+0x86>
		}
		if (*(uint64_t*) flash_address != *pRecord) {
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	603b      	str	r3, [r7, #0]
 800566a:	2300      	movs	r3, #0
 800566c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < len; i += 8, pRecord++, flash_address += 8) {
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3308      	adds	r3, #8
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	3304      	adds	r3, #4
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	3308      	adds	r3, #8
 800567e:	623b      	str	r3, [r7, #32]
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	429a      	cmp	r2, r3
 8005686:	dbdc      	blt.n	8005642 <flash_write_config+0x3a>

		}
	}
	FLASH_Lock();
 8005688:	f7ff fd80 	bl	800518c <FLASH_Lock>
	return 1;
 800568c:	2301      	movs	r3, #1
}
 800568e:	0018      	movs	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	b00a      	add	sp, #40	; 0x28
 8005694:	bdb0      	pop	{r4, r5, r7, pc}
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	0800ce94 	.word	0x0800ce94

0800569c <flash_read_config>:

void flash_read_config(uint32_t address, char *pdata, int len) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
	int i;
	uint32_t flash_address = address;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	61bb      	str	r3, [r7, #24]
	uint32_t *ptr = (uint32_t*)pdata;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i+=4,ptr++,flash_address+=4) {
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	e00c      	b.n	80056d0 <flash_read_config+0x34>
		*ptr=*(__IO uint32_t *)flash_address;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < len; i+=4,ptr++,flash_address+=4) {
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3304      	adds	r3, #4
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	3304      	adds	r3, #4
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	3304      	adds	r3, #4
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	dbee      	blt.n	80056b6 <flash_read_config+0x1a>
	}
}
 80056d8:	46c0      	nop			; (mov r8, r8)
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	46bd      	mov	sp, r7
 80056de:	b008      	add	sp, #32
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <write_config>:

void write_config(void) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b0c2      	sub	sp, #264	; 0x108
 80056e8:	af00      	add	r7, sp, #0
	xprintf("write_config\r\n");
 80056ea:	4b24      	ldr	r3, [pc, #144]	; (800577c <write_config+0x98>)
 80056ec:	0018      	movs	r0, r3
 80056ee:	f002 fe91 	bl	8008414 <xprintf>
	g_config.sign = SF_CONFIG_SIGN;
 80056f2:	4b23      	ldr	r3, [pc, #140]	; (8005780 <write_config+0x9c>)
 80056f4:	2264      	movs	r2, #100	; 0x64
 80056f6:	701a      	strb	r2, [r3, #0]
	g_config.configState = 2;
 80056f8:	4b21      	ldr	r3, [pc, #132]	; (8005780 <write_config+0x9c>)
 80056fa:	2202      	movs	r2, #2
 80056fc:	705a      	strb	r2, [r3, #1]
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 80056fe:	4b21      	ldr	r3, [pc, #132]	; (8005784 <write_config+0xa0>)
 8005700:	2284      	movs	r2, #132	; 0x84
 8005702:	0052      	lsls	r2, r2, #1
 8005704:	189b      	adds	r3, r3, r2
 8005706:	19db      	adds	r3, r3, r7
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	3304      	adds	r3, #4
 800570e:	22fc      	movs	r2, #252	; 0xfc
 8005710:	2100      	movs	r1, #0
 8005712:	0018      	movs	r0, r3
 8005714:	f003 ffc7 	bl	80096a6 <memset>
	int pointerSize = sizeof(DEVICE_CONFIG);
 8005718:	231c      	movs	r3, #28
 800571a:	1d7a      	adds	r2, r7, #5
 800571c:	32ff      	adds	r2, #255	; 0xff
 800571e:	6013      	str	r3, [r2, #0]
	int size =
 8005720:	1d7b      	adds	r3, r7, #5
 8005722:	33ff      	adds	r3, #255	; 0xff
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2280      	movs	r2, #128	; 0x80
 8005728:	0052      	lsls	r2, r2, #1
 800572a:	4293      	cmp	r3, r2
 800572c:	dd01      	ble.n	8005732 <write_config+0x4e>
 800572e:	2380      	movs	r3, #128	; 0x80
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	1c7a      	adds	r2, r7, #1
 8005734:	32ff      	adds	r2, #255	; 0xff
 8005736:	6013      	str	r3, [r2, #0]
			pointerSize < SKS_CONFIG_RECORD_SIZE ?
					pointerSize : SKS_CONFIG_RECORD_SIZE;
	memcpy(buffConfig, &g_config, size);
 8005738:	1c7b      	adds	r3, r7, #1
 800573a:	33ff      	adds	r3, #255	; 0xff
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4910      	ldr	r1, [pc, #64]	; (8005780 <write_config+0x9c>)
 8005740:	003b      	movs	r3, r7
 8005742:	0018      	movs	r0, r3
 8005744:	f003 ffa6 	bl	8009694 <memcpy>
	buffConfig[SKS_CONFIG_RECORD_SIZE - 1] = NMEAChecksum(buffConfig, SKS_CONFIG_RECORD_SIZE - 1);
 8005748:	003b      	movs	r3, r7
 800574a:	21ff      	movs	r1, #255	; 0xff
 800574c:	0018      	movs	r0, r3
 800574e:	f7ff ff35 	bl	80055bc <NMEAChecksum>
 8005752:	0003      	movs	r3, r0
 8005754:	0019      	movs	r1, r3
 8005756:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <write_config+0xa0>)
 8005758:	2284      	movs	r2, #132	; 0x84
 800575a:	0052      	lsls	r2, r2, #1
 800575c:	189b      	adds	r3, r3, r2
 800575e:	19db      	adds	r3, r3, r7
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	5499      	strb	r1, [r3, r2]
	flash_write_config(BANK1_CONFIG_START_ADDR, buffConfig,	SKS_CONFIG_RECORD_SIZE);
 8005764:	2380      	movs	r3, #128	; 0x80
 8005766:	005a      	lsls	r2, r3, #1
 8005768:	003b      	movs	r3, r7
 800576a:	4807      	ldr	r0, [pc, #28]	; (8005788 <write_config+0xa4>)
 800576c:	0019      	movs	r1, r3
 800576e:	f7ff ff4b 	bl	8005608 <flash_write_config>
}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	46bd      	mov	sp, r7
 8005776:	b042      	add	sp, #264	; 0x108
 8005778:	bd80      	pop	{r7, pc}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	0800cea8 	.word	0x0800cea8
 8005780:	200004d8 	.word	0x200004d8
 8005784:	fffffef8 	.word	0xfffffef8
 8005788:	0800f800 	.word	0x0800f800

0800578c <make_default_config>:

void make_default_config() {
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
	if(g_config.configState != 2) {
 8005790:	4b16      	ldr	r3, [pc, #88]	; (80057ec <make_default_config+0x60>)
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d026      	beq.n	80057e6 <make_default_config+0x5a>
		//xprintf(, "1234567890");
		sprintf(g_config.deviceCode, "%s", "1234567890");
 8005798:	4a15      	ldr	r2, [pc, #84]	; (80057f0 <make_default_config+0x64>)
 800579a:	4916      	ldr	r1, [pc, #88]	; (80057f4 <make_default_config+0x68>)
 800579c:	4b16      	ldr	r3, [pc, #88]	; (80057f8 <make_default_config+0x6c>)
 800579e:	0018      	movs	r0, r3
 80057a0:	f004 fcec 	bl	800a17c <siprintf>
		g_config.emptyValue = 0;
 80057a4:	4b11      	ldr	r3, [pc, #68]	; (80057ec <make_default_config+0x60>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	611a      	str	r2, [r3, #16]
		g_config.fullValue = 0;
 80057aa:	4b10      	ldr	r3, [pc, #64]	; (80057ec <make_default_config+0x60>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	60da      	str	r2, [r3, #12]
		g_config.timeout3D = 3; //3 minutes
 80057b0:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <make_default_config+0x60>)
 80057b2:	2203      	movs	r2, #3
 80057b4:	829a      	strh	r2, [r3, #20]
		g_config.outputMode = 0;
 80057b6:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <make_default_config+0x60>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	759a      	strb	r2, [r3, #22]
		g_config.diffX = 6;
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <make_default_config+0x60>)
 80057be:	2206      	movs	r2, #6
 80057c0:	761a      	strb	r2, [r3, #24]
		g_config.diffY = 6;
 80057c2:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <make_default_config+0x60>)
 80057c4:	2206      	movs	r2, #6
 80057c6:	765a      	strb	r2, [r3, #25]
		g_config.interval = 1;
 80057c8:	4b08      	ldr	r3, [pc, #32]	; (80057ec <make_default_config+0x60>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	769a      	strb	r2, [r3, #26]

		g_config.configState = 2;
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <make_default_config+0x60>)
 80057d0:	2202      	movs	r2, #2
 80057d2:	705a      	strb	r2, [r3, #1]

		g_config.sign = SF_CONFIG_SIGN;
 80057d4:	4b05      	ldr	r3, [pc, #20]	; (80057ec <make_default_config+0x60>)
 80057d6:	2264      	movs	r2, #100	; 0x64
 80057d8:	701a      	strb	r2, [r3, #0]

		write_config();
 80057da:	f7ff ff83 	bl	80056e4 <write_config>

		xprintf("\r\nWrite default config.\r\n\r\n");
 80057de:	4b07      	ldr	r3, [pc, #28]	; (80057fc <make_default_config+0x70>)
 80057e0:	0018      	movs	r0, r3
 80057e2:	f002 fe17 	bl	8008414 <xprintf>
	} else {
	}
}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	200004d8 	.word	0x200004d8
 80057f0:	0800ceb8 	.word	0x0800ceb8
 80057f4:	0800cec4 	.word	0x0800cec4
 80057f8:	200004da 	.word	0x200004da
 80057fc:	0800cec8 	.word	0x0800cec8

08005800 <load_config>:

void load_config(void) {
 8005800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005802:	b0c5      	sub	sp, #276	; 0x114
 8005804:	af00      	add	r7, sp, #0
	xprintf("load_config\r\n");
 8005806:	4b3c      	ldr	r3, [pc, #240]	; (80058f8 <load_config+0xf8>)
 8005808:	0018      	movs	r0, r3
 800580a:	f002 fe03 	bl	8008414 <xprintf>
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 800580e:	4b3b      	ldr	r3, [pc, #236]	; (80058fc <load_config+0xfc>)
 8005810:	2588      	movs	r5, #136	; 0x88
 8005812:	006d      	lsls	r5, r5, #1
 8005814:	195b      	adds	r3, r3, r5
 8005816:	19db      	adds	r3, r3, r7
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	3304      	adds	r3, #4
 800581e:	22fc      	movs	r2, #252	; 0xfc
 8005820:	2100      	movs	r1, #0
 8005822:	0018      	movs	r0, r3
 8005824:	f003 ff3f 	bl	80096a6 <memset>

	flash_read_config(BANK1_CONFIG_START_ADDR, buffConfig,
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	005a      	lsls	r2, r3, #1
 800582c:	1d3b      	adds	r3, r7, #4
 800582e:	4834      	ldr	r0, [pc, #208]	; (8005900 <load_config+0x100>)
 8005830:	0019      	movs	r1, r3
 8005832:	f7ff ff33 	bl	800569c <flash_read_config>
	SKS_CONFIG_RECORD_SIZE);
	char crc = NMEAChecksum(buffConfig, SKS_CONFIG_RECORD_SIZE - 1);
 8005836:	2610      	movs	r6, #16
 8005838:	36ff      	adds	r6, #255	; 0xff
 800583a:	19bc      	adds	r4, r7, r6
 800583c:	1d3b      	adds	r3, r7, #4
 800583e:	21ff      	movs	r1, #255	; 0xff
 8005840:	0018      	movs	r0, r3
 8005842:	f7ff febb 	bl	80055bc <NMEAChecksum>
 8005846:	0003      	movs	r3, r0
 8005848:	7023      	strb	r3, [r4, #0]
	if ((buffConfig[0] == SF_CONFIG_SIGN) && (crc == buffConfig[SKS_CONFIG_RECORD_SIZE - 1]))
 800584a:	4b2c      	ldr	r3, [pc, #176]	; (80058fc <load_config+0xfc>)
 800584c:	195b      	adds	r3, r3, r5
 800584e:	19db      	adds	r3, r3, r7
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b64      	cmp	r3, #100	; 0x64
 8005854:	d120      	bne.n	8005898 <load_config+0x98>
 8005856:	4b29      	ldr	r3, [pc, #164]	; (80058fc <load_config+0xfc>)
 8005858:	195b      	adds	r3, r3, r5
 800585a:	19db      	adds	r3, r3, r7
 800585c:	22ff      	movs	r2, #255	; 0xff
 800585e:	5c9b      	ldrb	r3, [r3, r2]
 8005860:	19ba      	adds	r2, r7, r6
 8005862:	7812      	ldrb	r2, [r2, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d117      	bne.n	8005898 <load_config+0x98>
	{
		int pointerSize = sizeof(DEVICE_CONFIG);
 8005868:	231c      	movs	r3, #28
 800586a:	2284      	movs	r2, #132	; 0x84
 800586c:	0052      	lsls	r2, r2, #1
 800586e:	18b9      	adds	r1, r7, r2
 8005870:	600b      	str	r3, [r1, #0]
		int size =
 8005872:	18bb      	adds	r3, r7, r2
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2280      	movs	r2, #128	; 0x80
 8005878:	0052      	lsls	r2, r2, #1
 800587a:	4293      	cmp	r3, r2
 800587c:	dd01      	ble.n	8005882 <load_config+0x82>
 800587e:	2380      	movs	r3, #128	; 0x80
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	1d7a      	adds	r2, r7, #5
 8005884:	32ff      	adds	r2, #255	; 0xff
 8005886:	6013      	str	r3, [r2, #0]
				pointerSize < SKS_CONFIG_RECORD_SIZE ?
						pointerSize : SKS_CONFIG_RECORD_SIZE;
		memcpy(&g_config, buffConfig, size);
 8005888:	1d7b      	adds	r3, r7, #5
 800588a:	33ff      	adds	r3, #255	; 0xff
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	1d39      	adds	r1, r7, #4
 8005890:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <load_config+0x104>)
 8005892:	0018      	movs	r0, r3
 8005894:	f003 fefe 	bl	8009694 <memcpy>
	}

	//check and make default config
	make_default_config();
 8005898:	f7ff ff78 	bl	800578c <make_default_config>

	if(g_config.diffX < 3) {
 800589c:	4b19      	ldr	r3, [pc, #100]	; (8005904 <load_config+0x104>)
 800589e:	7e1b      	ldrb	r3, [r3, #24]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d809      	bhi.n	80058b8 <load_config+0xb8>
		g_config.diffX = 5;
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <load_config+0x104>)
 80058a6:	2205      	movs	r2, #5
 80058a8:	761a      	strb	r2, [r3, #24]

		if(g_config.timeout3D <= 1) {
 80058aa:	4b16      	ldr	r3, [pc, #88]	; (8005904 <load_config+0x104>)
 80058ac:	8a9b      	ldrh	r3, [r3, #20]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d802      	bhi.n	80058b8 <load_config+0xb8>
			g_config.timeout3D = 3;
 80058b2:	4b14      	ldr	r3, [pc, #80]	; (8005904 <load_config+0x104>)
 80058b4:	2203      	movs	r2, #3
 80058b6:	829a      	strh	r2, [r3, #20]
		}
	}

	if(g_config.diffY < 3) {
 80058b8:	4b12      	ldr	r3, [pc, #72]	; (8005904 <load_config+0x104>)
 80058ba:	7e5b      	ldrb	r3, [r3, #25]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d809      	bhi.n	80058d4 <load_config+0xd4>
		g_config.diffY = 5;
 80058c0:	4b10      	ldr	r3, [pc, #64]	; (8005904 <load_config+0x104>)
 80058c2:	2205      	movs	r2, #5
 80058c4:	765a      	strb	r2, [r3, #25]

		if(g_config.timeout3D <= 1) {
 80058c6:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <load_config+0x104>)
 80058c8:	8a9b      	ldrh	r3, [r3, #20]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d802      	bhi.n	80058d4 <load_config+0xd4>
			g_config.timeout3D = 3;
 80058ce:	4b0d      	ldr	r3, [pc, #52]	; (8005904 <load_config+0x104>)
 80058d0:	2203      	movs	r2, #3
 80058d2:	829a      	strh	r2, [r3, #20]
		}
	}

	if(g_config.diffX > 30) {
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <load_config+0x104>)
 80058d6:	7e1b      	ldrb	r3, [r3, #24]
 80058d8:	2b1e      	cmp	r3, #30
 80058da:	d902      	bls.n	80058e2 <load_config+0xe2>
		g_config.diffX = 5;
 80058dc:	4b09      	ldr	r3, [pc, #36]	; (8005904 <load_config+0x104>)
 80058de:	2205      	movs	r2, #5
 80058e0:	761a      	strb	r2, [r3, #24]
	}

	if(g_config.diffY > 30) {
 80058e2:	4b08      	ldr	r3, [pc, #32]	; (8005904 <load_config+0x104>)
 80058e4:	7e5b      	ldrb	r3, [r3, #25]
 80058e6:	2b1e      	cmp	r3, #30
 80058e8:	d902      	bls.n	80058f0 <load_config+0xf0>
		g_config.diffY = 5;
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <load_config+0x104>)
 80058ec:	2205      	movs	r2, #5
 80058ee:	765a      	strb	r2, [r3, #25]
	}
}
 80058f0:	46c0      	nop			; (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b045      	add	sp, #276	; 0x114
 80058f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058f8:	0800cee4 	.word	0x0800cee4
 80058fc:	fffffef4 	.word	0xfffffef4
 8005900:	0800f800 	.word	0x0800f800
 8005904:	200004d8 	.word	0x200004d8

08005908 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800590c:	f3bf 8f4f 	dsb	sy
}
 8005910:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005912:	4b04      	ldr	r3, [pc, #16]	; (8005924 <__NVIC_SystemReset+0x1c>)
 8005914:	4a04      	ldr	r2, [pc, #16]	; (8005928 <__NVIC_SystemReset+0x20>)
 8005916:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005918:	f3bf 8f4f 	dsb	sy
}
 800591c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	e7fd      	b.n	800591e <__NVIC_SystemReset+0x16>
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	e000ed00 	.word	0xe000ed00
 8005928:	05fa0004 	.word	0x05fa0004

0800592c <main>:
static void process_command_from_pc(void);
static void handlerSensorData(void);
void calc_fuel_level(void);
static void output_data(void);
static void LSM6DS3_get_angle(void);
int main(void) {
 800592c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592e:	46c6      	mov	lr, r8
 8005930:	b500      	push	{lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af06      	add	r7, sp, #24
#endif

#if SKS_DEBUG_NOW
	g_appStats.debugOn = 1;
#else
	g_appStats.debugOn = 0;
 8005936:	4b2c      	ldr	r3, [pc, #176]	; (80059e8 <main+0xbc>)
 8005938:	224d      	movs	r2, #77	; 0x4d
 800593a:	2100      	movs	r1, #0
 800593c:	5499      	strb	r1, [r3, r2]
#endif

	setup();
 800593e:	f000 f863 	bl	8005a08 <setup>

	xprintf("\r\nSystem ready (%s)\r\n", APP_VERSION);
 8005942:	4a2a      	ldr	r2, [pc, #168]	; (80059ec <main+0xc0>)
 8005944:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <main+0xc4>)
 8005946:	0011      	movs	r1, r2
 8005948:	0018      	movs	r0, r3
 800594a:	f002 fd63 	bl	8008414 <xprintf>
	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_config.fullValue, g_config.emptyValue, g_config.timeout3D,
 800594e:	4b29      	ldr	r3, [pc, #164]	; (80059f4 <main+0xc8>)
 8005950:	68d9      	ldr	r1, [r3, #12]
 8005952:	4b28      	ldr	r3, [pc, #160]	; (80059f4 <main+0xc8>)
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <main+0xc8>)
 8005958:	8a9b      	ldrh	r3, [r3, #20]
 800595a:	4698      	mov	r8, r3
			g_config.filterMode, g_config.interval, g_config.diffX, g_config.diffY, g_config.deviceCode);
 800595c:	4b25      	ldr	r3, [pc, #148]	; (80059f4 <main+0xc8>)
 800595e:	7ddb      	ldrb	r3, [r3, #23]
	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_config.fullValue, g_config.emptyValue, g_config.timeout3D,
 8005960:	001c      	movs	r4, r3
			g_config.filterMode, g_config.interval, g_config.diffX, g_config.diffY, g_config.deviceCode);
 8005962:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <main+0xc8>)
 8005964:	7e9b      	ldrb	r3, [r3, #26]
	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_config.fullValue, g_config.emptyValue, g_config.timeout3D,
 8005966:	001d      	movs	r5, r3
			g_config.filterMode, g_config.interval, g_config.diffX, g_config.diffY, g_config.deviceCode);
 8005968:	4b22      	ldr	r3, [pc, #136]	; (80059f4 <main+0xc8>)
 800596a:	7e1b      	ldrb	r3, [r3, #24]
	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_config.fullValue, g_config.emptyValue, g_config.timeout3D,
 800596c:	001e      	movs	r6, r3
			g_config.filterMode, g_config.interval, g_config.diffX, g_config.diffY, g_config.deviceCode);
 800596e:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <main+0xc8>)
 8005970:	7e5b      	ldrb	r3, [r3, #25]
	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_config.fullValue, g_config.emptyValue, g_config.timeout3D,
 8005972:	469c      	mov	ip, r3
 8005974:	4820      	ldr	r0, [pc, #128]	; (80059f8 <main+0xcc>)
 8005976:	4b21      	ldr	r3, [pc, #132]	; (80059fc <main+0xd0>)
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	4663      	mov	r3, ip
 800597c:	9303      	str	r3, [sp, #12]
 800597e:	9602      	str	r6, [sp, #8]
 8005980:	9501      	str	r5, [sp, #4]
 8005982:	9400      	str	r4, [sp, #0]
 8005984:	4643      	mov	r3, r8
 8005986:	f002 fd45 	bl	8008414 <xprintf>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 800598a:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <main+0xd4>)
 800598c:	210c      	movs	r1, #12
 800598e:	0018      	movs	r0, r3
 8005990:	f002 fffa 	bl	8008988 <HAL_TIM_IC_Start_IT>
	while (1) {
		if (g_appStats.resetNow) {
 8005994:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <main+0xbc>)
 8005996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <main+0x82>
			if (ulSecCount - g_appStats.resetNow >= 3) {
 800599c:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <main+0xd8>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <main+0xbc>)
 80059a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <main+0x82>
				NVIC_SystemReset();
 80059aa:	f7ff ffad 	bl	8005908 <__NVIC_SystemReset>
				return 0;
			}
		}

		Kalman_SetFlag();
 80059ae:	f7fd ff41 	bl	8003834 <Kalman_SetFlag>
		LSM6DS3_get_angle();
 80059b2:	f001 fccd 	bl	8007350 <LSM6DS3_get_angle>

		if (g_appStats.processPcCommand) {
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <main+0xbc>)
 80059b8:	2266      	movs	r2, #102	; 0x66
 80059ba:	5c9b      	ldrb	r3, [r3, r2]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <main+0xa0>
			process_command_from_pc();
 80059c0:	f000 f84a 	bl	8005a58 <process_command_from_pc>
			g_appStats.processPcCommand = 0;
 80059c4:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <main+0xbc>)
 80059c6:	2266      	movs	r2, #102	; 0x66
 80059c8:	2100      	movs	r1, #0
 80059ca:	5499      	strb	r1, [r3, r2]
		}

		// cleanWDT();

		if (g_appStats.freqUpdated) {
 80059cc:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <main+0xbc>)
 80059ce:	2264      	movs	r2, #100	; 0x64
 80059d0:	5c9b      	ldrb	r3, [r3, r2]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <main+0xb6>
			handlerSensorData();
 80059d6:	f000 f8a3 	bl	8005b20 <handlerSensorData>
			g_appStats.freqUpdated = 0;
 80059da:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <main+0xbc>)
 80059dc:	2264      	movs	r2, #100	; 0x64
 80059de:	2100      	movs	r1, #0
 80059e0:	5499      	strb	r1, [r3, r2]
		}

		output_data();
 80059e2:	f000 fb41 	bl	8006068 <output_data>
		if (g_appStats.resetNow) {
 80059e6:	e7d5      	b.n	8005994 <main+0x68>
 80059e8:	200004f4 	.word	0x200004f4
 80059ec:	0800cef4 	.word	0x0800cef4
 80059f0:	0800cf0c 	.word	0x0800cf0c
 80059f4:	200004d8 	.word	0x200004d8
 80059f8:	0800cf24 	.word	0x0800cf24
 80059fc:	200004da 	.word	0x200004da
 8005a00:	20000484 	.word	0x20000484
 8005a04:	200004d0 	.word	0x200004d0

08005a08 <setup>:

	}
	return 0;
}

static void setup(void) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
	systemInit();
 8005a0c:	f002 fab6 	bl	8007f7c <systemInit>
	 MX_TIM2_Init();
 8005a10:	f001 fcee 	bl	80073f0 <MX_TIM2_Init>
	gpio_clock_init();
 8005a14:	f7ff f9d2 	bl	8004dbc <gpio_clock_init>
	spi2Init();
 8005a18:	f7ff fa74 	bl	8004f04 <spi2Init>
	usart_x0_init(19200);
 8005a1c:	2396      	movs	r3, #150	; 0x96
 8005a1e:	01db      	lsls	r3, r3, #7
 8005a20:	0018      	movs	r0, r3
 8005a22:	f7ff fcc3 	bl	80053ac <usart_x0_init>
	xdev_out(usart_x0_send);
 8005a26:	4b08      	ldr	r3, [pc, #32]	; (8005a48 <setup+0x40>)
 8005a28:	4a08      	ldr	r2, [pc, #32]	; (8005a4c <setup+0x44>)
 8005a2a:	601a      	str	r2, [r3, #0]
	load_config();
 8005a2c:	f7ff fee8 	bl	8005800 <load_config>
	LSM6DS3_init();
 8005a30:	f000 f826 	bl	8005a80 <LSM6DS3_init>
	Start_Kalman_Algorithm(10, 1000000.0f);
 8005a34:	4a06      	ldr	r2, [pc, #24]	; (8005a50 <setup+0x48>)
 8005a36:	4b07      	ldr	r3, [pc, #28]	; (8005a54 <setup+0x4c>)
 8005a38:	1c11      	adds	r1, r2, #0
 8005a3a:	1c18      	adds	r0, r3, #0
 8005a3c:	f7fd fc18 	bl	8003270 <Start_Kalman_Algorithm>
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
}
 8005a40:	46c0      	nop			; (mov r8, r8)
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	200011a4 	.word	0x200011a4
 8005a4c:	080053dd 	.word	0x080053dd
 8005a50:	49742400 	.word	0x49742400
 8005a54:	41200000 	.word	0x41200000

08005a58 <process_command_from_pc>:

static void process_command_from_pc(void) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
	if (buff_cmd[0] == '*') {
 8005a5c:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <process_command_from_pc+0x24>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b2a      	cmp	r3, #42	; 0x2a
 8005a64:	d106      	bne.n	8005a74 <process_command_from_pc+0x1c>
		server_on_command(SKS_CMD_SOURCE_COM1, buff_cmd, sizeof(buff_cmd));
 8005a66:	2380      	movs	r3, #128	; 0x80
 8005a68:	005a      	lsls	r2, r3, #1
 8005a6a:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <process_command_from_pc+0x24>)
 8005a6c:	0019      	movs	r1, r3
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f7fe ff82 	bl	8004978 <server_on_command>
	}

}
 8005a74:	46c0      	nop			; (mov r8, r8)
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	20000f98 	.word	0x20000f98

08005a80 <LSM6DS3_init>:

static void LSM6DS3_init(void) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
	LSM6DS3_Initialize(LSM6DS3_SPI, LSM6DS3_DEFAULT_TIMEOUT);
 8005a84:	4b1f      	ldr	r3, [pc, #124]	; (8005b04 <LSM6DS3_init+0x84>)
 8005a86:	2164      	movs	r1, #100	; 0x64
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f7fe f92d 	bl	8003ce8 <LSM6DS3_Initialize>
	delay_ms(200);
 8005a8e:	20c8      	movs	r0, #200	; 0xc8
 8005a90:	f7ff f962 	bl	8004d58 <delay_ms>

	if (LSM6DS3_Detect(10) == LSM6DS3_OK) {
 8005a94:	200a      	movs	r0, #10
 8005a96:	f7fe f93f 	bl	8003d18 <LSM6DS3_Detect>
 8005a9a:	1e03      	subs	r3, r0, #0
 8005a9c:	d12a      	bne.n	8005af4 <LSM6DS3_init+0x74>
		if (SKS_MEM_DEBUG)
			xprintf("LSM6DS3 found\r\n");
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <LSM6DS3_init+0x88>)
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f002 fcb7 	bl	8008414 <xprintf>
		if (LSM6DS3_XL_Start(XL_1666Hz, XL_RANGE_16G, XL_FILTER_400Hz) == LSM6DS3_FAIL) {
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	2008      	movs	r0, #8
 8005aac:	f7fe f964 	bl	8003d78 <LSM6DS3_XL_Start>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d104      	bne.n	8005ac0 <LSM6DS3_init+0x40>
			if (SKS_MEM_DEBUG)
				xprintf("LSM6DS3_XL_Start fail\r\n");
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <LSM6DS3_init+0x8c>)
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f002 fcab 	bl	8008414 <xprintf>
 8005abe:	e003      	b.n	8005ac8 <LSM6DS3_init+0x48>
		} else {
			if (SKS_MEM_DEBUG)
				xprintf("LSM6DS3_XL_Start ok\r\n");
 8005ac0:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <LSM6DS3_init+0x90>)
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f002 fca6 	bl	8008414 <xprintf>
		}
		delay_ms(10);
 8005ac8:	200a      	movs	r0, #10
 8005aca:	f7ff f945 	bl	8004d58 <delay_ms>

		if (LSM6DS3_GS_Start(GS_1666Hz, GS_RANGE_2000dps) != LSM6DS3_OK) {
 8005ace:	2106      	movs	r1, #6
 8005ad0:	2008      	movs	r0, #8
 8005ad2:	f7fe f9c7 	bl	8003e64 <LSM6DS3_GS_Start>
 8005ad6:	1e03      	subs	r3, r0, #0
 8005ad8:	d004      	beq.n	8005ae4 <LSM6DS3_init+0x64>
			if (SKS_MEM_DEBUG)
				xprintf("LSM6DS3_GS_Start fail\r\n");
 8005ada:	4b0e      	ldr	r3, [pc, #56]	; (8005b14 <LSM6DS3_init+0x94>)
 8005adc:	0018      	movs	r0, r3
 8005ade:	f002 fc99 	bl	8008414 <xprintf>
 8005ae2:	e003      	b.n	8005aec <LSM6DS3_init+0x6c>
		} else {
			if (SKS_MEM_DEBUG)
				xprintf("LSM6DS3_GS_Start ok\r\n");
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <LSM6DS3_init+0x98>)
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f002 fc94 	bl	8008414 <xprintf>
		}
		delay_ms(10);
 8005aec:	200a      	movs	r0, #10
 8005aee:	f7ff f933 	bl	8004d58 <delay_ms>
	} else {
		if (SKS_MEM_DEBUG)
			xprintf("LSM6DS3 not found\r\n");
		/* Handle the error */
	}
}
 8005af2:	e003      	b.n	8005afc <LSM6DS3_init+0x7c>
			xprintf("LSM6DS3 not found\r\n");
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <LSM6DS3_init+0x9c>)
 8005af6:	0018      	movs	r0, r3
 8005af8:	f002 fc8c 	bl	8008414 <xprintf>
}
 8005afc:	46c0      	nop			; (mov r8, r8)
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	46c0      	nop			; (mov r8, r8)
 8005b04:	40003800 	.word	0x40003800
 8005b08:	0800cf70 	.word	0x0800cf70
 8005b0c:	0800cf80 	.word	0x0800cf80
 8005b10:	0800cf98 	.word	0x0800cf98
 8005b14:	0800cfb0 	.word	0x0800cfb0
 8005b18:	0800cfc8 	.word	0x0800cfc8
 8005b1c:	0800cfe0 	.word	0x0800cfe0

08005b20 <handlerSensorData>:

static void handlerSensorData(void) {
 8005b20:	b5b0      	push	{r4, r5, r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
	if (freqIdx < MAX_FREQ_AVERAGE && g_appStats.tim15Freq) {
 8005b26:	4b98      	ldr	r3, [pc, #608]	; (8005d88 <handlerSensorData+0x268>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	dc10      	bgt.n	8005b50 <handlerSensorData+0x30>
 8005b2e:	4b97      	ldr	r3, [pc, #604]	; (8005d8c <handlerSensorData+0x26c>)
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00c      	beq.n	8005b50 <handlerSensorData+0x30>
		avrTimFreq[freqIdx] = g_appStats.tim15Freq;
 8005b36:	4b94      	ldr	r3, [pc, #592]	; (8005d88 <handlerSensorData+0x268>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b94      	ldr	r3, [pc, #592]	; (8005d8c <handlerSensorData+0x26c>)
 8005b3c:	69d9      	ldr	r1, [r3, #28]
 8005b3e:	4b94      	ldr	r3, [pc, #592]	; (8005d90 <handlerSensorData+0x270>)
 8005b40:	0092      	lsls	r2, r2, #2
 8005b42:	50d1      	str	r1, [r2, r3]
		freqIdx++;
 8005b44:	4b90      	ldr	r3, [pc, #576]	; (8005d88 <handlerSensorData+0x268>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	4b8f      	ldr	r3, [pc, #572]	; (8005d88 <handlerSensorData+0x268>)
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e002      	b.n	8005b56 <handlerSensorData+0x36>
	} else {
		freqIdx = 0;
 8005b50:	4b8d      	ldr	r3, [pc, #564]	; (8005d88 <handlerSensorData+0x268>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
	}

	if (freqIdx >= MAX_FREQ_AVERAGE) {
 8005b56:	4b8c      	ldr	r3, [pc, #560]	; (8005d88 <handlerSensorData+0x268>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	dd02      	ble.n	8005b64 <handlerSensorData+0x44>
		freqIdx = 0;
 8005b5e:	4b8a      	ldr	r3, [pc, #552]	; (8005d88 <handlerSensorData+0x268>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
	}

	uint32_t sumFreq = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]
	uint32_t avrFreq = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
	int count = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_FREQ_AVERAGE; i++) {
 8005b70:	2300      	movs	r3, #0
 8005b72:	60bb      	str	r3, [r7, #8]
 8005b74:	e012      	b.n	8005b9c <handlerSensorData+0x7c>
		if (avrTimFreq[i]) {
 8005b76:	4b86      	ldr	r3, [pc, #536]	; (8005d90 <handlerSensorData+0x270>)
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	0092      	lsls	r2, r2, #2
 8005b7c:	58d3      	ldr	r3, [r2, r3]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <handlerSensorData+0x76>
			sumFreq += avrTimFreq[i];
 8005b82:	4b83      	ldr	r3, [pc, #524]	; (8005d90 <handlerSensorData+0x270>)
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	0092      	lsls	r2, r2, #2
 8005b88:	58d3      	ldr	r3, [r2, r3]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	18d3      	adds	r3, r2, r3
 8005b8e:	617b      	str	r3, [r7, #20]
			count++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_FREQ_AVERAGE; i++) {
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60bb      	str	r3, [r7, #8]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	dde9      	ble.n	8005b76 <handlerSensorData+0x56>
		}
	}

	if (count > 0) {
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	dd06      	ble.n	8005bb6 <handlerSensorData+0x96>
		avrFreq = sumFreq / count;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	0019      	movs	r1, r3
 8005bac:	6978      	ldr	r0, [r7, #20]
 8005bae:	f7fa facf 	bl	8000150 <__udivsi3>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	613b      	str	r3, [r7, #16]

#if SKS_DEBUG_AVG_FREQUENCY
		xprintf("avrFeq: %d, sumFeq: %d, count:%d, currentFrequency: %d, \r\n",avrFreq, sumFreq, count,  g_appStats.tim15Freq);
	#endif

	if (avrFreq && g_appStats.tim15Freq) {
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01e      	beq.n	8005bfa <handlerSensorData+0xda>
 8005bbc:	4b73      	ldr	r3, [pc, #460]	; (8005d8c <handlerSensorData+0x26c>)
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d01a      	beq.n	8005bfa <handlerSensorData+0xda>
		if (!g_config.disableEma) {
 8005bc4:	4b73      	ldr	r3, [pc, #460]	; (8005d94 <handlerSensorData+0x274>)
 8005bc6:	7edb      	ldrb	r3, [r3, #27]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d113      	bne.n	8005bf4 <handlerSensorData+0xd4>
			addStock((float) avrFreq, &SensorEMA10);
 8005bcc:	6938      	ldr	r0, [r7, #16]
 8005bce:	f7fb fb8b 	bl	80012e8 <__aeabi_ui2f>
 8005bd2:	1c03      	adds	r3, r0, #0
 8005bd4:	1c18      	adds	r0, r3, #0
 8005bd6:	f7fd f9af 	bl	8002f38 <__aeabi_f2d>
 8005bda:	4b6f      	ldr	r3, [pc, #444]	; (8005d98 <handlerSensorData+0x278>)
 8005bdc:	001a      	movs	r2, r3
 8005bde:	f7fd fb0d 	bl	80031fc <addStock>
			avrFreq = SensorEMA10.lastEMA;
 8005be2:	4b6d      	ldr	r3, [pc, #436]	; (8005d98 <handlerSensorData+0x278>)
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	0010      	movs	r0, r2
 8005bea:	0019      	movs	r1, r3
 8005bec:	f7fa fcb6 	bl	800055c <__aeabi_d2uiz>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	613b      	str	r3, [r7, #16]
			;
		}
		g_appStats.frequency = avrFreq; //use for set FULL and EMPTY this Frequency
 8005bf4:	4b65      	ldr	r3, [pc, #404]	; (8005d8c <handlerSensorData+0x26c>)
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	621a      	str	r2, [r3, #32]
	}

	ERROR_STATE error = ERROR_STATE_NORMAL;
 8005bfa:	1dfb      	adds	r3, r7, #7
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]

	if (!g_appStats.tim15Freq) {
 8005c00:	4b62      	ldr	r3, [pc, #392]	; (8005d8c <handlerSensorData+0x26c>)
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d103      	bne.n	8005c10 <handlerSensorData+0xf0>
		error = ERROR_STATE_ZERO;
 8005c08:	1dfb      	adds	r3, r7, #7
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	e046      	b.n	8005c9e <handlerSensorData+0x17e>
	} else if (g_config.emptyValue && avrFreq > (g_config.emptyValue * 1.1)) {
 8005c10:	4b60      	ldr	r3, [pc, #384]	; (8005d94 <handlerSensorData+0x274>)
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d019      	beq.n	8005c4c <handlerSensorData+0x12c>
 8005c18:	6938      	ldr	r0, [r7, #16]
 8005c1a:	f7fd f967 	bl	8002eec <__aeabi_ui2d>
 8005c1e:	0004      	movs	r4, r0
 8005c20:	000d      	movs	r5, r1
 8005c22:	4b5c      	ldr	r3, [pc, #368]	; (8005d94 <handlerSensorData+0x274>)
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	0018      	movs	r0, r3
 8005c28:	f7fd f960 	bl	8002eec <__aeabi_ui2d>
 8005c2c:	4a5b      	ldr	r2, [pc, #364]	; (8005d9c <handlerSensorData+0x27c>)
 8005c2e:	4b5c      	ldr	r3, [pc, #368]	; (8005da0 <handlerSensorData+0x280>)
 8005c30:	f7fc fada 	bl	80021e8 <__aeabi_dmul>
 8005c34:	0002      	movs	r2, r0
 8005c36:	000b      	movs	r3, r1
 8005c38:	0020      	movs	r0, r4
 8005c3a:	0029      	movs	r1, r5
 8005c3c:	f7fa fc28 	bl	8000490 <__aeabi_dcmpgt>
 8005c40:	1e03      	subs	r3, r0, #0
 8005c42:	d003      	beq.n	8005c4c <handlerSensorData+0x12c>
		error = ERROR_STATE_OVER_EMPTY;
 8005c44:	1dfb      	adds	r3, r7, #7
 8005c46:	2202      	movs	r2, #2
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	e028      	b.n	8005c9e <handlerSensorData+0x17e>
	} else if (g_config.fullValue && avrFreq < (g_config.fullValue * 0.9)) {
 8005c4c:	4b51      	ldr	r3, [pc, #324]	; (8005d94 <handlerSensorData+0x274>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d019      	beq.n	8005c88 <handlerSensorData+0x168>
 8005c54:	6938      	ldr	r0, [r7, #16]
 8005c56:	f7fd f949 	bl	8002eec <__aeabi_ui2d>
 8005c5a:	0004      	movs	r4, r0
 8005c5c:	000d      	movs	r5, r1
 8005c5e:	4b4d      	ldr	r3, [pc, #308]	; (8005d94 <handlerSensorData+0x274>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	0018      	movs	r0, r3
 8005c64:	f7fd f942 	bl	8002eec <__aeabi_ui2d>
 8005c68:	4a4e      	ldr	r2, [pc, #312]	; (8005da4 <handlerSensorData+0x284>)
 8005c6a:	4b4f      	ldr	r3, [pc, #316]	; (8005da8 <handlerSensorData+0x288>)
 8005c6c:	f7fc fabc 	bl	80021e8 <__aeabi_dmul>
 8005c70:	0002      	movs	r2, r0
 8005c72:	000b      	movs	r3, r1
 8005c74:	0020      	movs	r0, r4
 8005c76:	0029      	movs	r1, r5
 8005c78:	f7fa fbf6 	bl	8000468 <__aeabi_dcmplt>
 8005c7c:	1e03      	subs	r3, r0, #0
 8005c7e:	d003      	beq.n	8005c88 <handlerSensorData+0x168>
		error = ERROR_STATE_BELOW_FULL;
 8005c80:	1dfb      	adds	r3, r7, #7
 8005c82:	2203      	movs	r2, #3
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	e00a      	b.n	8005c9e <handlerSensorData+0x17e>
	} else if (!g_config.fullValue && !g_config.emptyValue) {
 8005c88:	4b42      	ldr	r3, [pc, #264]	; (8005d94 <handlerSensorData+0x274>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <handlerSensorData+0x17e>
 8005c90:	4b40      	ldr	r3, [pc, #256]	; (8005d94 <handlerSensorData+0x274>)
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <handlerSensorData+0x17e>
		error = ERROR_STATE_NOT_SET_FULL_EMTY;
 8005c98:	1dfb      	adds	r3, r7, #7
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	701a      	strb	r2, [r3, #0]
	}

	g_appStats.errorState = error;
 8005c9e:	4b3b      	ldr	r3, [pc, #236]	; (8005d8c <handlerSensorData+0x26c>)
 8005ca0:	1dfa      	adds	r2, r7, #7
 8005ca2:	2165      	movs	r1, #101	; 0x65
 8005ca4:	7812      	ldrb	r2, [r2, #0]
 8005ca6:	545a      	strb	r2, [r3, r1]

	if (error == ERROR_STATE_NORMAL) {
 8005ca8:	1dfb      	adds	r3, r7, #7
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d166      	bne.n	8005d7e <handlerSensorData+0x25e>
		if (avrFreq > g_config.emptyValue) {
 8005cb0:	4b38      	ldr	r3, [pc, #224]	; (8005d94 <handlerSensorData+0x274>)
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d903      	bls.n	8005cc2 <handlerSensorData+0x1a2>
			avrFreq = g_config.emptyValue;
 8005cba:	4b36      	ldr	r3, [pc, #216]	; (8005d94 <handlerSensorData+0x274>)
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	e007      	b.n	8005cd2 <handlerSensorData+0x1b2>
		} else if (avrFreq < g_config.fullValue) {
 8005cc2:	4b34      	ldr	r3, [pc, #208]	; (8005d94 <handlerSensorData+0x274>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d202      	bcs.n	8005cd2 <handlerSensorData+0x1b2>
			avrFreq = g_config.fullValue;
 8005ccc:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <handlerSensorData+0x274>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	613b      	str	r3, [r7, #16]
		}

		if (lastFreg) {
 8005cd2:	4b36      	ldr	r3, [pc, #216]	; (8005dac <handlerSensorData+0x28c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d037      	beq.n	8005d4a <handlerSensorData+0x22a>
			uint32_t diff = abs(avrFreq - lastFreg);
 8005cda:	4b34      	ldr	r3, [pc, #208]	; (8005dac <handlerSensorData+0x28c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	17da      	asrs	r2, r3, #31
 8005ce4:	189b      	adds	r3, r3, r2
 8005ce6:	4053      	eors	r3, r2
 8005ce8:	603b      	str	r3, [r7, #0]
			if (diff > (lastFreg / 10) && cutOff < 10) {
 8005cea:	4b30      	ldr	r3, [pc, #192]	; (8005dac <handlerSensorData+0x28c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	210a      	movs	r1, #10
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f7fa fa2d 	bl	8000150 <__udivsi3>
 8005cf6:	0003      	movs	r3, r0
 8005cf8:	001a      	movs	r2, r3
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d909      	bls.n	8005d14 <handlerSensorData+0x1f4>
 8005d00:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <handlerSensorData+0x290>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b09      	cmp	r3, #9
 8005d06:	dc05      	bgt.n	8005d14 <handlerSensorData+0x1f4>
				cutOff++;
 8005d08:	4b29      	ldr	r3, [pc, #164]	; (8005db0 <handlerSensorData+0x290>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	4b28      	ldr	r3, [pc, #160]	; (8005db0 <handlerSensorData+0x290>)
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e031      	b.n	8005d78 <handlerSensorData+0x258>
			} else {
				if (!g_config.disableEma) {
 8005d14:	4b1f      	ldr	r3, [pc, #124]	; (8005d94 <handlerSensorData+0x274>)
 8005d16:	7edb      	ldrb	r3, [r3, #27]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10f      	bne.n	8005d3c <handlerSensorData+0x21c>
					addStock(avrFreq, &SensorEMA5);
 8005d1c:	6938      	ldr	r0, [r7, #16]
 8005d1e:	f7fd f8e5 	bl	8002eec <__aeabi_ui2d>
 8005d22:	4b24      	ldr	r3, [pc, #144]	; (8005db4 <handlerSensorData+0x294>)
 8005d24:	001a      	movs	r2, r3
 8005d26:	f7fd fa69 	bl	80031fc <addStock>
					avrFreq = SensorEMA5.lastEMA;
 8005d2a:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <handlerSensorData+0x294>)
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	0010      	movs	r0, r2
 8005d32:	0019      	movs	r1, r3
 8005d34:	f7fa fc12 	bl	800055c <__aeabi_d2uiz>
 8005d38:	0003      	movs	r3, r0
 8005d3a:	613b      	str	r3, [r7, #16]
				}
				g_appStats.emaFrequency = avrFreq;
 8005d3c:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <handlerSensorData+0x26c>)
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24
				cutOff = 0;
 8005d42:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <handlerSensorData+0x290>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	e016      	b.n	8005d78 <handlerSensorData+0x258>
			}
		} else {
			if (!g_config.disableEma) {
 8005d4a:	4b12      	ldr	r3, [pc, #72]	; (8005d94 <handlerSensorData+0x274>)
 8005d4c:	7edb      	ldrb	r3, [r3, #27]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10f      	bne.n	8005d72 <handlerSensorData+0x252>
				addStock(avrFreq, &SensorEMA5);
 8005d52:	6938      	ldr	r0, [r7, #16]
 8005d54:	f7fd f8ca 	bl	8002eec <__aeabi_ui2d>
 8005d58:	4b16      	ldr	r3, [pc, #88]	; (8005db4 <handlerSensorData+0x294>)
 8005d5a:	001a      	movs	r2, r3
 8005d5c:	f7fd fa4e 	bl	80031fc <addStock>
				avrFreq = SensorEMA5.lastEMA;
 8005d60:	4b14      	ldr	r3, [pc, #80]	; (8005db4 <handlerSensorData+0x294>)
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	0010      	movs	r0, r2
 8005d68:	0019      	movs	r1, r3
 8005d6a:	f7fa fbf7 	bl	800055c <__aeabi_d2uiz>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	613b      	str	r3, [r7, #16]
			}
			g_appStats.emaFrequency = avrFreq;
 8005d72:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <handlerSensorData+0x26c>)
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24
		}

		lastFreg = avrFreq;
 8005d78:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <handlerSensorData+0x28c>)
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	601a      	str	r2, [r3, #0]
	}
}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b006      	add	sp, #24
 8005d84:	bdb0      	pop	{r4, r5, r7, pc}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	20000f8c 	.word	0x20000f8c
 8005d8c:	200004f4 	.word	0x200004f4
 8005d90:	20000f78 	.word	0x20000f78
 8005d94:	200004d8 	.word	0x200004d8
 8005d98:	20000010 	.word	0x20000010
 8005d9c:	9999999a 	.word	0x9999999a
 8005da0:	3ff19999 	.word	0x3ff19999
 8005da4:	cccccccd 	.word	0xcccccccd
 8005da8:	3feccccc 	.word	0x3feccccc
 8005dac:	20000f90 	.word	0x20000f90
 8005db0:	20000f94 	.word	0x20000f94
 8005db4:	20000000 	.word	0x20000000

08005db8 <calc_fuel_level>:

void calc_fuel_level(void) {
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b091      	sub	sp, #68	; 0x44
 8005dbc:	af00      	add	r7, sp, #0
	uint32_t diff = abs(g_config.emptyValue - g_config.fullValue);
 8005dbe:	4ba2      	ldr	r3, [pc, #648]	; (8006048 <calc_fuel_level+0x290>)
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	4ba1      	ldr	r3, [pc, #644]	; (8006048 <calc_fuel_level+0x290>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	17da      	asrs	r2, r3, #31
 8005dca:	189b      	adds	r3, r3, r2
 8005dcc:	4053      	eors	r3, r2
 8005dce:	623b      	str	r3, [r7, #32]

	if (g_config.emptyValue > g_config.fullValue && g_config.fullValue && g_config.emptyValue) {
 8005dd0:	4b9d      	ldr	r3, [pc, #628]	; (8006048 <calc_fuel_level+0x290>)
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	4b9c      	ldr	r3, [pc, #624]	; (8006048 <calc_fuel_level+0x290>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d800      	bhi.n	8005dde <calc_fuel_level+0x26>
 8005ddc:	e12f      	b.n	800603e <calc_fuel_level+0x286>
 8005dde:	4b9a      	ldr	r3, [pc, #616]	; (8006048 <calc_fuel_level+0x290>)
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d100      	bne.n	8005de8 <calc_fuel_level+0x30>
 8005de6:	e12a      	b.n	800603e <calc_fuel_level+0x286>
 8005de8:	4b97      	ldr	r3, [pc, #604]	; (8006048 <calc_fuel_level+0x290>)
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d100      	bne.n	8005df2 <calc_fuel_level+0x3a>
 8005df0:	e125      	b.n	800603e <calc_fuel_level+0x286>
		int fuelLevel = g_appStats.fuelLevel;
 8005df2:	4b96      	ldr	r3, [pc, #600]	; (800604c <calc_fuel_level+0x294>)
 8005df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (g_appStats.emaFrequency == 0) {
 8005df8:	4b94      	ldr	r3, [pc, #592]	; (800604c <calc_fuel_level+0x294>)
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d103      	bne.n	8005e08 <calc_fuel_level+0x50>
			g_appStats.directFuelLevel = 0;
 8005e00:	4b92      	ldr	r3, [pc, #584]	; (800604c <calc_fuel_level+0x294>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e06:	e039      	b.n	8005e7c <calc_fuel_level+0xc4>
		} else if (g_appStats.emaFrequency <= g_config.fullValue) {
 8005e08:	4b90      	ldr	r3, [pc, #576]	; (800604c <calc_fuel_level+0x294>)
 8005e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e0c:	4b8e      	ldr	r3, [pc, #568]	; (8006048 <calc_fuel_level+0x290>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d803      	bhi.n	8005e1c <calc_fuel_level+0x64>
			g_appStats.directFuelLevel = MAX_LEVEL;
 8005e14:	4b8d      	ldr	r3, [pc, #564]	; (800604c <calc_fuel_level+0x294>)
 8005e16:	4a8e      	ldr	r2, [pc, #568]	; (8006050 <calc_fuel_level+0x298>)
 8005e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e1a:	e02f      	b.n	8005e7c <calc_fuel_level+0xc4>
		} else if (g_appStats.emaFrequency >= g_config.emptyValue) {
 8005e1c:	4b8b      	ldr	r3, [pc, #556]	; (800604c <calc_fuel_level+0x294>)
 8005e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e20:	4b89      	ldr	r3, [pc, #548]	; (8006048 <calc_fuel_level+0x290>)
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d303      	bcc.n	8005e30 <calc_fuel_level+0x78>
			g_appStats.directFuelLevel = 0;
 8005e28:	4b88      	ldr	r3, [pc, #544]	; (800604c <calc_fuel_level+0x294>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e2e:	e025      	b.n	8005e7c <calc_fuel_level+0xc4>
		} else {
			float nValue = ((((g_config.emptyValue - g_appStats.emaFrequency) * g_config.fullValue)) / (float) (diff * g_appStats.emaFrequency)) * MAX_LEVEL;
 8005e30:	4b85      	ldr	r3, [pc, #532]	; (8006048 <calc_fuel_level+0x290>)
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	4b85      	ldr	r3, [pc, #532]	; (800604c <calc_fuel_level+0x294>)
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	1ad2      	subs	r2, r2, r3
 8005e3a:	4b83      	ldr	r3, [pc, #524]	; (8006048 <calc_fuel_level+0x290>)
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	4353      	muls	r3, r2
 8005e40:	0018      	movs	r0, r3
 8005e42:	f7fb fa51 	bl	80012e8 <__aeabi_ui2f>
 8005e46:	1c04      	adds	r4, r0, #0
 8005e48:	4b80      	ldr	r3, [pc, #512]	; (800604c <calc_fuel_level+0x294>)
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	6a3a      	ldr	r2, [r7, #32]
 8005e4e:	4353      	muls	r3, r2
 8005e50:	0018      	movs	r0, r3
 8005e52:	f7fb fa49 	bl	80012e8 <__aeabi_ui2f>
 8005e56:	1c03      	adds	r3, r0, #0
 8005e58:	1c19      	adds	r1, r3, #0
 8005e5a:	1c20      	adds	r0, r4, #0
 8005e5c:	f7fa fd3a 	bl	80008d4 <__aeabi_fdiv>
 8005e60:	1c03      	adds	r3, r0, #0
 8005e62:	497c      	ldr	r1, [pc, #496]	; (8006054 <calc_fuel_level+0x29c>)
 8005e64:	1c18      	adds	r0, r3, #0
 8005e66:	f7fa fefd 	bl	8000c64 <__aeabi_fmul>
 8005e6a:	1c03      	adds	r3, r0, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
			g_appStats.directFuelLevel = (int) (nValue);
 8005e6e:	69f8      	ldr	r0, [r7, #28]
 8005e70:	f7fb f9cc 	bl	800120c <__aeabi_f2iz>
 8005e74:	0003      	movs	r3, r0
 8005e76:	001a      	movs	r2, r3
 8005e78:	4b74      	ldr	r3, [pc, #464]	; (800604c <calc_fuel_level+0x294>)
 8005e7a:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		if (g_appStats.errorState == ERROR_STATE_NORMAL) {
 8005e7c:	4b73      	ldr	r3, [pc, #460]	; (800604c <calc_fuel_level+0x294>)
 8005e7e:	2265      	movs	r2, #101	; 0x65
 8005e80:	5c9b      	ldrb	r3, [r3, r2]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d102      	bne.n	8005e8c <calc_fuel_level+0xd4>
			fuelLevel = g_appStats.directFuelLevel;
 8005e86:	4b71      	ldr	r3, [pc, #452]	; (800604c <calc_fuel_level+0x294>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		if (preErrorState != ERROR_STATE_NORMAL && g_appStats.errorState == ERROR_STATE_NORMAL) {
 8005e8c:	4b72      	ldr	r3, [pc, #456]	; (8006058 <calc_fuel_level+0x2a0>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <calc_fuel_level+0xee>
 8005e94:	4b6d      	ldr	r3, [pc, #436]	; (800604c <calc_fuel_level+0x294>)
 8005e96:	2265      	movs	r2, #101	; 0x65
 8005e98:	5c9b      	ldrb	r3, [r3, r2]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d103      	bne.n	8005ea6 <calc_fuel_level+0xee>
			lastBackNormal = ulSecCount;
 8005e9e:	4b6f      	ldr	r3, [pc, #444]	; (800605c <calc_fuel_level+0x2a4>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	4b6f      	ldr	r3, [pc, #444]	; (8006060 <calc_fuel_level+0x2a8>)
 8005ea4:	601a      	str	r2, [r3, #0]
		}

		preErrorState = g_appStats.errorState;
 8005ea6:	4b69      	ldr	r3, [pc, #420]	; (800604c <calc_fuel_level+0x294>)
 8005ea8:	2265      	movs	r2, #101	; 0x65
 8005eaa:	5c9a      	ldrb	r2, [r3, r2]
 8005eac:	4b6a      	ldr	r3, [pc, #424]	; (8006058 <calc_fuel_level+0x2a0>)
 8005eae:	701a      	strb	r2, [r3, #0]
		float roll = (int) g_appStats.lsm6ds3.roll;
 8005eb0:	4b66      	ldr	r3, [pc, #408]	; (800604c <calc_fuel_level+0x294>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	1c18      	adds	r0, r3, #0
 8005eb6:	f7fb f9a9 	bl	800120c <__aeabi_f2iz>
 8005eba:	0003      	movs	r3, r0
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7fb f9c5 	bl	800124c <__aeabi_i2f>
 8005ec2:	1c03      	adds	r3, r0, #0
 8005ec4:	61bb      	str	r3, [r7, #24]
		float pitch = (int) g_appStats.lsm6ds3.pitch;
 8005ec6:	4b61      	ldr	r3, [pc, #388]	; (800604c <calc_fuel_level+0x294>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	1c18      	adds	r0, r3, #0
 8005ecc:	f7fb f99e 	bl	800120c <__aeabi_f2iz>
 8005ed0:	0003      	movs	r3, r0
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f7fb f9ba 	bl	800124c <__aeabi_i2f>
 8005ed8:	1c03      	adds	r3, r0, #0
 8005eda:	617b      	str	r3, [r7, #20]
		float yaw = (int) g_appStats.lsm6ds3.yaw;
 8005edc:	4b5b      	ldr	r3, [pc, #364]	; (800604c <calc_fuel_level+0x294>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	1c18      	adds	r0, r3, #0
 8005ee2:	f7fb f993 	bl	800120c <__aeabi_f2iz>
 8005ee6:	0003      	movs	r3, r0
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f7fb f9af 	bl	800124c <__aeabi_i2f>
 8005eee:	1c03      	adds	r3, r0, #0
 8005ef0:	613b      	str	r3, [r7, #16]

		if (g_appStats.errorState == ERROR_STATE_NORMAL
 8005ef2:	4b56      	ldr	r3, [pc, #344]	; (800604c <calc_fuel_level+0x294>)
 8005ef4:	2265      	movs	r2, #101	; 0x65
 8005ef6:	5c9b      	ldrb	r3, [r3, r2]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d156      	bne.n	8005faa <calc_fuel_level+0x1f2>
				&& ((!lastBackNormal && ulSecCount >= 3) || ((uint32_t) (ulSecCount - lastBackNormal) >= SKS_TRUNC_ERROR_SEC))) {
 8005efc:	4b58      	ldr	r3, [pc, #352]	; (8006060 <calc_fuel_level+0x2a8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <calc_fuel_level+0x154>
 8005f04:	4b55      	ldr	r3, [pc, #340]	; (800605c <calc_fuel_level+0x2a4>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d806      	bhi.n	8005f1a <calc_fuel_level+0x162>
 8005f0c:	4b53      	ldr	r3, [pc, #332]	; (800605c <calc_fuel_level+0x2a4>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4b53      	ldr	r3, [pc, #332]	; (8006060 <calc_fuel_level+0x2a8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d947      	bls.n	8005faa <calc_fuel_level+0x1f2>
			int minSecCount = 0xFFFFFFFF;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	425b      	negs	r3, r3
 8005f1e:	63bb      	str	r3, [r7, #56]	; 0x38
			int levelIdx = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
			for (int i = 0; i < MAX_STORE_LEVEL; i++) {
 8005f24:	2300      	movs	r3, #0
 8005f26:	633b      	str	r3, [r7, #48]	; 0x30
 8005f28:	e01b      	b.n	8005f62 <calc_fuel_level+0x1aa>
				STORE_LEVEL *p = &storeLevels[i];
 8005f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f2c:	0013      	movs	r3, r2
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4a4b      	ldr	r2, [pc, #300]	; (8006064 <calc_fuel_level+0x2ac>)
 8005f36:	189b      	adds	r3, r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
				if (!p->secCount) {
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <calc_fuel_level+0x190>
					levelIdx = i;
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005f46:	e00f      	b.n	8005f68 <calc_fuel_level+0x1b0>
				} else if (p->secCount < minSecCount) {
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d204      	bcs.n	8005f5c <calc_fuel_level+0x1a4>
					levelIdx = i;
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
					minSecCount = p->secCount;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	63bb      	str	r3, [r7, #56]	; 0x38
			for (int i = 0; i < MAX_STORE_LEVEL; i++) {
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	3301      	adds	r3, #1
 8005f60:	633b      	str	r3, [r7, #48]	; 0x30
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	2b1d      	cmp	r3, #29
 8005f66:	dde0      	ble.n	8005f2a <calc_fuel_level+0x172>
				}
			}

			STORE_LEVEL *p = &storeLevels[levelIdx];
 8005f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f6a:	0013      	movs	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4a3c      	ldr	r2, [pc, #240]	; (8006064 <calc_fuel_level+0x2ac>)
 8005f74:	189b      	adds	r3, r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
			p->level = fuelLevel;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f7c:	619a      	str	r2, [r3, #24]
			p->secCount = ulSecCount;
 8005f7e:	4b37      	ldr	r3, [pc, #220]	; (800605c <calc_fuel_level+0x2a4>)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	601a      	str	r2, [r3, #0]
			p->x = roll;
 8005f86:	69b8      	ldr	r0, [r7, #24]
 8005f88:	f7fb f940 	bl	800120c <__aeabi_f2iz>
 8005f8c:	0002      	movs	r2, r0
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	60da      	str	r2, [r3, #12]
			p->y = pitch;
 8005f92:	6978      	ldr	r0, [r7, #20]
 8005f94:	f7fb f93a 	bl	800120c <__aeabi_f2iz>
 8005f98:	0002      	movs	r2, r0
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	611a      	str	r2, [r3, #16]
			p->z = yaw;
 8005f9e:	6938      	ldr	r0, [r7, #16]
 8005fa0:	f7fb f934 	bl	800120c <__aeabi_f2iz>
 8005fa4:	0002      	movs	r2, r0
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	615a      	str	r2, [r3, #20]
		}

		int maxSecCount = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
		int level = -1;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	425b      	negs	r3, r3
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < MAX_STORE_LEVEL; i++) {
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb8:	e034      	b.n	8006024 <calc_fuel_level+0x26c>
			STORE_LEVEL *p = &storeLevels[i];
 8005fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbc:	0013      	movs	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4a27      	ldr	r2, [pc, #156]	; (8006064 <calc_fuel_level+0x2ac>)
 8005fc6:	189b      	adds	r3, r3, r2
 8005fc8:	607b      	str	r3, [r7, #4]
			if (p->secCount) {
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d025      	beq.n	800601e <calc_fuel_level+0x266>
				if (p->secCount < (uint32_t) (ulSecCount - SKS_TRUNC_ERROR_SEC)) {
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4b21      	ldr	r3, [pc, #132]	; (800605c <calc_fuel_level+0x2a4>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3b05      	subs	r3, #5
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d20f      	bcs.n	8006000 <calc_fuel_level+0x248>
					if (p->secCount > maxSecCount && p->level) {
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d919      	bls.n	800601e <calc_fuel_level+0x266>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d015      	beq.n	800601e <calc_fuel_level+0x266>
						maxSecCount = p->secCount;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
						level = p->level;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffe:	e00e      	b.n	800601e <calc_fuel_level+0x266>
					}
				} else if (g_appStats.errorState != ERROR_STATE_NORMAL && p->secCount >= (uint32_t) (ulSecCount - SKS_TRUNC_ERROR_SEC)) {
 8006000:	4b12      	ldr	r3, [pc, #72]	; (800604c <calc_fuel_level+0x294>)
 8006002:	2265      	movs	r2, #101	; 0x65
 8006004:	5c9b      	ldrb	r3, [r3, r2]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <calc_fuel_level+0x266>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <calc_fuel_level+0x2a4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3b05      	subs	r3, #5
 8006014:	429a      	cmp	r2, r3
 8006016:	d302      	bcc.n	800601e <calc_fuel_level+0x266>
					p->secCount = 0;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < MAX_STORE_LEVEL; i++) {
 800601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006020:	3301      	adds	r3, #1
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	2b1d      	cmp	r3, #29
 8006028:	ddc7      	ble.n	8005fba <calc_fuel_level+0x202>
				}
			}
		}

		if (level != -1) {
 800602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602c:	3301      	adds	r3, #1
 800602e:	d006      	beq.n	800603e <calc_fuel_level+0x286>
			g_appStats.fuelLevel = level;
 8006030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006032:	4b06      	ldr	r3, [pc, #24]	; (800604c <calc_fuel_level+0x294>)
 8006034:	629a      	str	r2, [r3, #40]	; 0x28
			g_appStats.lastLevelSecCount = ulSecCount;
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <calc_fuel_level+0x2a4>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b04      	ldr	r3, [pc, #16]	; (800604c <calc_fuel_level+0x294>)
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	46bd      	mov	sp, r7
 8006042:	b011      	add	sp, #68	; 0x44
 8006044:	bd90      	pop	{r4, r7, pc}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	200004d8 	.word	0x200004d8
 800604c:	200004f4 	.word	0x200004f4
 8006050:	000003ff 	.word	0x000003ff
 8006054:	447fc000 	.word	0x447fc000
 8006058:	20000f70 	.word	0x20000f70
 800605c:	200004d0 	.word	0x200004d0
 8006060:	20000f74 	.word	0x20000f74
 8006064:	20000bf8 	.word	0x20000bf8

08006068 <output_data>:
static void output_data(void) {
 8006068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800606a:	46de      	mov	lr, fp
 800606c:	4657      	mov	r7, sl
 800606e:	464e      	mov	r6, r9
 8006070:	4645      	mov	r5, r8
 8006072:	b5e0      	push	{r5, r6, r7, lr}
 8006074:	b0cd      	sub	sp, #308	; 0x134
 8006076:	af14      	add	r7, sp, #80	; 0x50
	if (ulSecCount < 2) {
 8006078:	4b45      	ldr	r3, [pc, #276]	; (8006190 <output_data+0x128>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d801      	bhi.n	8006084 <output_data+0x1c>
 8006080:	f001 f94a 	bl	8007318 <output_data+0x12b0>
	 if(lastGetTemper != ulSecCount) {
	 g_appStats.internalTemp = getTemperature();
	 lastGetTemper = ulSecCount;
	 }*/

	int roll = (int) g_appStats.lsm6ds3.roll;
 8006084:	4b43      	ldr	r3, [pc, #268]	; (8006194 <output_data+0x12c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	1c18      	adds	r0, r3, #0
 800608a:	f7fb f8bf 	bl	800120c <__aeabi_f2iz>
 800608e:	0003      	movs	r3, r0
 8006090:	647b      	str	r3, [r7, #68]	; 0x44
	int pitch = (int) g_appStats.lsm6ds3.pitch;
 8006092:	4b40      	ldr	r3, [pc, #256]	; (8006194 <output_data+0x12c>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	1c18      	adds	r0, r3, #0
 8006098:	f7fb f8b8 	bl	800120c <__aeabi_f2iz>
 800609c:	0003      	movs	r3, r0
 800609e:	643b      	str	r3, [r7, #64]	; 0x40
	int yaw = (int) g_appStats.lsm6ds3.yaw;
 80060a0:	4b3c      	ldr	r3, [pc, #240]	; (8006194 <output_data+0x12c>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	1c18      	adds	r0, r3, #0
 80060a6:	f7fb f8b1 	bl	800120c <__aeabi_f2iz>
 80060aa:	0003      	movs	r3, r0
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (ulSecCount != lastStoreAverage) {
 80060ae:	4b38      	ldr	r3, [pc, #224]	; (8006190 <output_data+0x128>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b39      	ldr	r3, [pc, #228]	; (8006198 <output_data+0x130>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d101      	bne.n	80060be <output_data+0x56>
 80060ba:	f001 f92e 	bl	800731a <output_data+0x12b2>
		calc_fuel_level();
 80060be:	f7ff fe7b 	bl	8005db8 <calc_fuel_level>

		int fuelLevel = g_appStats.fuelLevel;
 80060c2:	4b34      	ldr	r3, [pc, #208]	; (8006194 <output_data+0x12c>)
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	22c4      	movs	r2, #196	; 0xc4
 80060c8:	2118      	movs	r1, #24
 80060ca:	1852      	adds	r2, r2, r1
 80060cc:	19d2      	adds	r2, r2, r7
 80060ce:	6013      	str	r3, [r2, #0]

		//store min 3D level
		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 80060d0:	2300      	movs	r3, #0
 80060d2:	22c0      	movs	r2, #192	; 0xc0
 80060d4:	1852      	adds	r2, r2, r1
 80060d6:	19d2      	adds	r2, r2, r7
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	e06c      	b.n	80061b6 <output_data+0x14e>
			if (abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 80060dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060de:	17da      	asrs	r2, r3, #31
 80060e0:	189b      	adds	r3, r3, r2
 80060e2:	4053      	eors	r3, r2
 80060e4:	4a2d      	ldr	r2, [pc, #180]	; (800619c <output_data+0x134>)
 80060e6:	7e12      	ldrb	r2, [r2, #24]
 80060e8:	4293      	cmp	r3, r2
 80060ea:	dc5b      	bgt.n	80061a4 <output_data+0x13c>
 80060ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ee:	17da      	asrs	r2, r3, #31
 80060f0:	189b      	adds	r3, r3, r2
 80060f2:	4053      	eors	r3, r2
 80060f4:	4a29      	ldr	r2, [pc, #164]	; (800619c <output_data+0x134>)
 80060f6:	7e52      	ldrb	r2, [r2, #25]
 80060f8:	4293      	cmp	r3, r2
 80060fa:	dc53      	bgt.n	80061a4 <output_data+0x13c>
				STORE_LEVEL *pMin = &min3DFreq[i];
 80060fc:	23c0      	movs	r3, #192	; 0xc0
 80060fe:	2218      	movs	r2, #24
 8006100:	189b      	adds	r3, r3, r2
 8006102:	19db      	adds	r3, r3, r7
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	0013      	movs	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4a24      	ldr	r2, [pc, #144]	; (80061a0 <output_data+0x138>)
 8006110:	189b      	adds	r3, r3, r2
 8006112:	63bb      	str	r3, [r7, #56]	; 0x38
				if (pMin->secCount == 0 || (ulSecCount - pMin->secCount) > (MAX_NO_AVERAGE * 2) || (abs(roll) <= abs(pMin->x) && abs(pitch) <= abs(pMin->y))) {
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01c      	beq.n	8006156 <output_data+0xee>
 800611c:	4b1c      	ldr	r3, [pc, #112]	; (8006190 <output_data+0x128>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b1e      	cmp	r3, #30
 8006128:	d815      	bhi.n	8006156 <output_data+0xee>
 800612a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612c:	17d9      	asrs	r1, r3, #31
 800612e:	185a      	adds	r2, r3, r1
 8006130:	404a      	eors	r2, r1
 8006132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	17d9      	asrs	r1, r3, #31
 8006138:	185b      	adds	r3, r3, r1
 800613a:	404b      	eors	r3, r1
 800613c:	429a      	cmp	r2, r3
 800613e:	dc31      	bgt.n	80061a4 <output_data+0x13c>
 8006140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006142:	17d9      	asrs	r1, r3, #31
 8006144:	185a      	adds	r2, r3, r1
 8006146:	404a      	eors	r2, r1
 8006148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	17d9      	asrs	r1, r3, #31
 800614e:	185b      	adds	r3, r3, r1
 8006150:	404b      	eors	r3, r1
 8006152:	429a      	cmp	r2, r3
 8006154:	dc26      	bgt.n	80061a4 <output_data+0x13c>
					pMin->secCount = ulSecCount;
 8006156:	4b0e      	ldr	r3, [pc, #56]	; (8006190 <output_data+0x128>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	601a      	str	r2, [r3, #0]
					pMin->frequency = g_appStats.emaFrequency;
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <output_data+0x12c>)
 8006160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	605a      	str	r2, [r3, #4]
					pMin->level = fuelLevel;
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	22c4      	movs	r2, #196	; 0xc4
 800616a:	2118      	movs	r1, #24
 800616c:	1852      	adds	r2, r2, r1
 800616e:	19d2      	adds	r2, r2, r7
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	619a      	str	r2, [r3, #24]
					pMin->vibration = g_appStats.vibrInt;
 8006174:	4b07      	ldr	r3, [pc, #28]	; (8006194 <output_data+0x12c>)
 8006176:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	609a      	str	r2, [r3, #8]
					pMin->x = roll;
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006180:	60da      	str	r2, [r3, #12]
					pMin->y = pitch;
 8006182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006186:	611a      	str	r2, [r3, #16]
					pMin->z = yaw;
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800618c:	615a      	str	r2, [r3, #20]
					break;
 800618e:	e019      	b.n	80061c4 <output_data+0x15c>
 8006190:	200004d0 	.word	0x200004d0
 8006194:	200004f4 	.word	0x200004f4
 8006198:	20000564 	.word	0x20000564
 800619c:	200004d8 	.word	0x200004d8
 80061a0:	2000070c 	.word	0x2000070c
		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 80061a4:	22c0      	movs	r2, #192	; 0xc0
 80061a6:	2118      	movs	r1, #24
 80061a8:	1853      	adds	r3, r2, r1
 80061aa:	19db      	adds	r3, r3, r7
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3301      	adds	r3, #1
 80061b0:	1852      	adds	r2, r2, r1
 80061b2:	19d2      	adds	r2, r2, r7
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	23c0      	movs	r3, #192	; 0xc0
 80061b8:	2218      	movs	r2, #24
 80061ba:	189b      	adds	r3, r3, r2
 80061bc:	19db      	adds	r3, r3, r7
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b0e      	cmp	r3, #14
 80061c2:	dd8b      	ble.n	80060dc <output_data+0x74>
			}
		}
		//end store min 3D level

		//store same 3d level
		if (sameIdx >= MAX_NO_AVERAGE) {
 80061c4:	4be5      	ldr	r3, [pc, #916]	; (800655c <output_data+0x4f4>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b0e      	cmp	r3, #14
 80061ca:	d902      	bls.n	80061d2 <output_data+0x16a>
			sameIdx = 0;
 80061cc:	4be3      	ldr	r3, [pc, #908]	; (800655c <output_data+0x4f4>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
		}

		if (abs(roll - prePulse.x) <= 1 && abs(pitch - prePulse.y) <= 1 && abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 80061d2:	4be3      	ldr	r3, [pc, #908]	; (8006560 <output_data+0x4f8>)
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	3301      	adds	r3, #1
 80061dc:	da00      	bge.n	80061e0 <output_data+0x178>
 80061de:	e081      	b.n	80062e4 <output_data+0x27c>
 80061e0:	4bdf      	ldr	r3, [pc, #892]	; (8006560 <output_data+0x4f8>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	dd00      	ble.n	80061ee <output_data+0x186>
 80061ec:	e07a      	b.n	80062e4 <output_data+0x27c>
 80061ee:	4bdc      	ldr	r3, [pc, #880]	; (8006560 <output_data+0x4f8>)
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	3301      	adds	r3, #1
 80061f8:	db74      	blt.n	80062e4 <output_data+0x27c>
 80061fa:	4bd9      	ldr	r3, [pc, #868]	; (8006560 <output_data+0x4f8>)
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b01      	cmp	r3, #1
 8006204:	dc6e      	bgt.n	80062e4 <output_data+0x27c>
 8006206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006208:	17da      	asrs	r2, r3, #31
 800620a:	189b      	adds	r3, r3, r2
 800620c:	4053      	eors	r3, r2
 800620e:	4ad5      	ldr	r2, [pc, #852]	; (8006564 <output_data+0x4fc>)
 8006210:	7e12      	ldrb	r2, [r2, #24]
 8006212:	4293      	cmp	r3, r2
 8006214:	dc66      	bgt.n	80062e4 <output_data+0x27c>
 8006216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006218:	17da      	asrs	r2, r3, #31
 800621a:	189b      	adds	r3, r3, r2
 800621c:	4053      	eors	r3, r2
 800621e:	4ad1      	ldr	r2, [pc, #836]	; (8006564 <output_data+0x4fc>)
 8006220:	7e52      	ldrb	r2, [r2, #25]
 8006222:	4293      	cmp	r3, r2
 8006224:	dc5e      	bgt.n	80062e4 <output_data+0x27c>
			same3DFreq[sameIdx].secCount = ulSecCount;
 8006226:	4bcd      	ldr	r3, [pc, #820]	; (800655c <output_data+0x4f4>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	0018      	movs	r0, r3
 800622c:	4bce      	ldr	r3, [pc, #824]	; (8006568 <output_data+0x500>)
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	4ace      	ldr	r2, [pc, #824]	; (800656c <output_data+0x504>)
 8006232:	0003      	movs	r3, r0
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	1a1b      	subs	r3, r3, r0
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	5099      	str	r1, [r3, r2]
			same3DFreq[sameIdx].frequency = g_appStats.emaFrequency;
 800623c:	4bc7      	ldr	r3, [pc, #796]	; (800655c <output_data+0x4f4>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	0018      	movs	r0, r3
 8006242:	4bcb      	ldr	r3, [pc, #812]	; (8006570 <output_data+0x508>)
 8006244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006246:	49c9      	ldr	r1, [pc, #804]	; (800656c <output_data+0x504>)
 8006248:	0003      	movs	r3, r0
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	1a1b      	subs	r3, r3, r0
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	18cb      	adds	r3, r1, r3
 8006252:	3304      	adds	r3, #4
 8006254:	601a      	str	r2, [r3, #0]
			same3DFreq[sameIdx].level = fuelLevel;
 8006256:	4bc1      	ldr	r3, [pc, #772]	; (800655c <output_data+0x4f4>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	0019      	movs	r1, r3
 800625c:	4ac3      	ldr	r2, [pc, #780]	; (800656c <output_data+0x504>)
 800625e:	000b      	movs	r3, r1
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	1a5b      	subs	r3, r3, r1
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	18d3      	adds	r3, r2, r3
 8006268:	3318      	adds	r3, #24
 800626a:	22c4      	movs	r2, #196	; 0xc4
 800626c:	2118      	movs	r1, #24
 800626e:	1852      	adds	r2, r2, r1
 8006270:	19d2      	adds	r2, r2, r7
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	601a      	str	r2, [r3, #0]
			same3DFreq[sameIdx].vibration = g_appStats.vibrInt;
 8006276:	4bb9      	ldr	r3, [pc, #740]	; (800655c <output_data+0x4f4>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	0018      	movs	r0, r3
 800627c:	4bbc      	ldr	r3, [pc, #752]	; (8006570 <output_data+0x508>)
 800627e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006280:	49ba      	ldr	r1, [pc, #744]	; (800656c <output_data+0x504>)
 8006282:	0003      	movs	r3, r0
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	1a1b      	subs	r3, r3, r0
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	18cb      	adds	r3, r1, r3
 800628c:	3308      	adds	r3, #8
 800628e:	601a      	str	r2, [r3, #0]
			same3DFreq[sameIdx].x = roll;
 8006290:	4bb2      	ldr	r3, [pc, #712]	; (800655c <output_data+0x4f4>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	0019      	movs	r1, r3
 8006296:	4ab5      	ldr	r2, [pc, #724]	; (800656c <output_data+0x504>)
 8006298:	000b      	movs	r3, r1
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	1a5b      	subs	r3, r3, r1
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	18d3      	adds	r3, r2, r3
 80062a2:	330c      	adds	r3, #12
 80062a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062a6:	601a      	str	r2, [r3, #0]
			same3DFreq[sameIdx].y = pitch;
 80062a8:	4bac      	ldr	r3, [pc, #688]	; (800655c <output_data+0x4f4>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	0019      	movs	r1, r3
 80062ae:	4aaf      	ldr	r2, [pc, #700]	; (800656c <output_data+0x504>)
 80062b0:	000b      	movs	r3, r1
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	1a5b      	subs	r3, r3, r1
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	18d3      	adds	r3, r2, r3
 80062ba:	3310      	adds	r3, #16
 80062bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062be:	601a      	str	r2, [r3, #0]
			same3DFreq[sameIdx].z = yaw;
 80062c0:	4ba6      	ldr	r3, [pc, #664]	; (800655c <output_data+0x4f4>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	0019      	movs	r1, r3
 80062c6:	4aa9      	ldr	r2, [pc, #676]	; (800656c <output_data+0x504>)
 80062c8:	000b      	movs	r3, r1
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	1a5b      	subs	r3, r3, r1
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	18d3      	adds	r3, r2, r3
 80062d2:	3314      	adds	r3, #20
 80062d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062d6:	601a      	str	r2, [r3, #0]
			sameIdx++;
 80062d8:	4ba0      	ldr	r3, [pc, #640]	; (800655c <output_data+0x4f4>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	3301      	adds	r3, #1
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	4b9e      	ldr	r3, [pc, #632]	; (800655c <output_data+0x4f4>)
 80062e2:	701a      	strb	r2, [r3, #0]
		}

		prePulse.x = roll;
 80062e4:	4b9e      	ldr	r3, [pc, #632]	; (8006560 <output_data+0x4f8>)
 80062e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062e8:	60da      	str	r2, [r3, #12]
		prePulse.y = pitch;
 80062ea:	4b9d      	ldr	r3, [pc, #628]	; (8006560 <output_data+0x4f8>)
 80062ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062ee:	611a      	str	r2, [r3, #16]
		//end store same 3d level

		//store average level
		if (idx >= MAX_NO_AVERAGE) {
 80062f0:	4ba0      	ldr	r3, [pc, #640]	; (8006574 <output_data+0x50c>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b0e      	cmp	r3, #14
 80062f6:	d902      	bls.n	80062fe <output_data+0x296>
			idx = 0;
 80062f8:	4b9e      	ldr	r3, [pc, #632]	; (8006574 <output_data+0x50c>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]
		}

		avrFreq[idx].secCount = ulSecCount;
 80062fe:	4b9d      	ldr	r3, [pc, #628]	; (8006574 <output_data+0x50c>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	0018      	movs	r0, r3
 8006304:	4b98      	ldr	r3, [pc, #608]	; (8006568 <output_data+0x500>)
 8006306:	6819      	ldr	r1, [r3, #0]
 8006308:	4a9b      	ldr	r2, [pc, #620]	; (8006578 <output_data+0x510>)
 800630a:	0003      	movs	r3, r0
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	1a1b      	subs	r3, r3, r0
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	5099      	str	r1, [r3, r2]
		avrFreq[idx].frequency = g_appStats.emaFrequency;
 8006314:	4b97      	ldr	r3, [pc, #604]	; (8006574 <output_data+0x50c>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	0018      	movs	r0, r3
 800631a:	4b95      	ldr	r3, [pc, #596]	; (8006570 <output_data+0x508>)
 800631c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800631e:	4996      	ldr	r1, [pc, #600]	; (8006578 <output_data+0x510>)
 8006320:	0003      	movs	r3, r0
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	1a1b      	subs	r3, r3, r0
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	18cb      	adds	r3, r1, r3
 800632a:	3304      	adds	r3, #4
 800632c:	601a      	str	r2, [r3, #0]
		avrFreq[idx].level = fuelLevel;
 800632e:	4b91      	ldr	r3, [pc, #580]	; (8006574 <output_data+0x50c>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	0019      	movs	r1, r3
 8006334:	4a90      	ldr	r2, [pc, #576]	; (8006578 <output_data+0x510>)
 8006336:	000b      	movs	r3, r1
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	1a5b      	subs	r3, r3, r1
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	18d3      	adds	r3, r2, r3
 8006340:	3318      	adds	r3, #24
 8006342:	22c4      	movs	r2, #196	; 0xc4
 8006344:	2118      	movs	r1, #24
 8006346:	1852      	adds	r2, r2, r1
 8006348:	19d2      	adds	r2, r2, r7
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	601a      	str	r2, [r3, #0]
		avrFreq[idx].vibration = g_appStats.vibrInt;
 800634e:	4b89      	ldr	r3, [pc, #548]	; (8006574 <output_data+0x50c>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	0018      	movs	r0, r3
 8006354:	4b86      	ldr	r3, [pc, #536]	; (8006570 <output_data+0x508>)
 8006356:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006358:	4987      	ldr	r1, [pc, #540]	; (8006578 <output_data+0x510>)
 800635a:	0003      	movs	r3, r0
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	1a1b      	subs	r3, r3, r0
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	18cb      	adds	r3, r1, r3
 8006364:	3308      	adds	r3, #8
 8006366:	601a      	str	r2, [r3, #0]
		avrFreq[idx].x = roll;
 8006368:	4b82      	ldr	r3, [pc, #520]	; (8006574 <output_data+0x50c>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	0019      	movs	r1, r3
 800636e:	4a82      	ldr	r2, [pc, #520]	; (8006578 <output_data+0x510>)
 8006370:	000b      	movs	r3, r1
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	1a5b      	subs	r3, r3, r1
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	18d3      	adds	r3, r2, r3
 800637a:	330c      	adds	r3, #12
 800637c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800637e:	601a      	str	r2, [r3, #0]
		avrFreq[idx].y = pitch;
 8006380:	4b7c      	ldr	r3, [pc, #496]	; (8006574 <output_data+0x50c>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	0019      	movs	r1, r3
 8006386:	4a7c      	ldr	r2, [pc, #496]	; (8006578 <output_data+0x510>)
 8006388:	000b      	movs	r3, r1
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	1a5b      	subs	r3, r3, r1
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	18d3      	adds	r3, r2, r3
 8006392:	3310      	adds	r3, #16
 8006394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006396:	601a      	str	r2, [r3, #0]
		avrFreq[idx].z = yaw;
 8006398:	4b76      	ldr	r3, [pc, #472]	; (8006574 <output_data+0x50c>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	0019      	movs	r1, r3
 800639e:	4a76      	ldr	r2, [pc, #472]	; (8006578 <output_data+0x510>)
 80063a0:	000b      	movs	r3, r1
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	1a5b      	subs	r3, r3, r1
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	18d3      	adds	r3, r2, r3
 80063aa:	3314      	adds	r3, #20
 80063ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063ae:	601a      	str	r2, [r3, #0]
		idx++;
 80063b0:	4b70      	ldr	r3, [pc, #448]	; (8006574 <output_data+0x50c>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	4b6e      	ldr	r3, [pc, #440]	; (8006574 <output_data+0x50c>)
 80063ba:	701a      	strb	r2, [r3, #0]
		//end store average level

		//store in range 3D
		if (abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 80063bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063be:	17da      	asrs	r2, r3, #31
 80063c0:	189b      	adds	r3, r3, r2
 80063c2:	4053      	eors	r3, r2
 80063c4:	4a67      	ldr	r2, [pc, #412]	; (8006564 <output_data+0x4fc>)
 80063c6:	7e12      	ldrb	r2, [r2, #24]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	dc6d      	bgt.n	80064a8 <output_data+0x440>
 80063cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ce:	17da      	asrs	r2, r3, #31
 80063d0:	189b      	adds	r3, r3, r2
 80063d2:	4053      	eors	r3, r2
 80063d4:	4a63      	ldr	r2, [pc, #396]	; (8006564 <output_data+0x4fc>)
 80063d6:	7e52      	ldrb	r2, [r2, #25]
 80063d8:	4293      	cmp	r3, r2
 80063da:	dc65      	bgt.n	80064a8 <output_data+0x440>
			if (idx3D >= MAX_NO_AVERAGE) {
 80063dc:	4b67      	ldr	r3, [pc, #412]	; (800657c <output_data+0x514>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b0e      	cmp	r3, #14
 80063e2:	d902      	bls.n	80063ea <output_data+0x382>
				idx3D = 0;
 80063e4:	4b65      	ldr	r3, [pc, #404]	; (800657c <output_data+0x514>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	701a      	strb	r2, [r3, #0]
			}

			avrFreq3D[idx3D].secCount = ulSecCount;
 80063ea:	4b64      	ldr	r3, [pc, #400]	; (800657c <output_data+0x514>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	0018      	movs	r0, r3
 80063f0:	4b5d      	ldr	r3, [pc, #372]	; (8006568 <output_data+0x500>)
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	4a62      	ldr	r2, [pc, #392]	; (8006580 <output_data+0x518>)
 80063f6:	0003      	movs	r3, r0
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	1a1b      	subs	r3, r3, r0
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	5099      	str	r1, [r3, r2]
			avrFreq3D[idx3D].frequency = g_appStats.emaFrequency;
 8006400:	4b5e      	ldr	r3, [pc, #376]	; (800657c <output_data+0x514>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	0018      	movs	r0, r3
 8006406:	4b5a      	ldr	r3, [pc, #360]	; (8006570 <output_data+0x508>)
 8006408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800640a:	495d      	ldr	r1, [pc, #372]	; (8006580 <output_data+0x518>)
 800640c:	0003      	movs	r3, r0
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	1a1b      	subs	r3, r3, r0
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	18cb      	adds	r3, r1, r3
 8006416:	3304      	adds	r3, #4
 8006418:	601a      	str	r2, [r3, #0]
			avrFreq3D[idx3D].level = fuelLevel;
 800641a:	4b58      	ldr	r3, [pc, #352]	; (800657c <output_data+0x514>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	0019      	movs	r1, r3
 8006420:	4a57      	ldr	r2, [pc, #348]	; (8006580 <output_data+0x518>)
 8006422:	000b      	movs	r3, r1
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	1a5b      	subs	r3, r3, r1
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	18d3      	adds	r3, r2, r3
 800642c:	3318      	adds	r3, #24
 800642e:	22c4      	movs	r2, #196	; 0xc4
 8006430:	2118      	movs	r1, #24
 8006432:	1852      	adds	r2, r2, r1
 8006434:	19d2      	adds	r2, r2, r7
 8006436:	6812      	ldr	r2, [r2, #0]
 8006438:	601a      	str	r2, [r3, #0]
			avrFreq3D[idx3D].vibration = g_appStats.vibrInt;
 800643a:	4b50      	ldr	r3, [pc, #320]	; (800657c <output_data+0x514>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	0018      	movs	r0, r3
 8006440:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <output_data+0x508>)
 8006442:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006444:	494e      	ldr	r1, [pc, #312]	; (8006580 <output_data+0x518>)
 8006446:	0003      	movs	r3, r0
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	1a1b      	subs	r3, r3, r0
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	18cb      	adds	r3, r1, r3
 8006450:	3308      	adds	r3, #8
 8006452:	601a      	str	r2, [r3, #0]
			avrFreq3D[idx3D].x = roll;
 8006454:	4b49      	ldr	r3, [pc, #292]	; (800657c <output_data+0x514>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	0019      	movs	r1, r3
 800645a:	4a49      	ldr	r2, [pc, #292]	; (8006580 <output_data+0x518>)
 800645c:	000b      	movs	r3, r1
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	1a5b      	subs	r3, r3, r1
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	18d3      	adds	r3, r2, r3
 8006466:	330c      	adds	r3, #12
 8006468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800646a:	601a      	str	r2, [r3, #0]
			avrFreq3D[idx3D].y = pitch;
 800646c:	4b43      	ldr	r3, [pc, #268]	; (800657c <output_data+0x514>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	0019      	movs	r1, r3
 8006472:	4a43      	ldr	r2, [pc, #268]	; (8006580 <output_data+0x518>)
 8006474:	000b      	movs	r3, r1
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	1a5b      	subs	r3, r3, r1
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	18d3      	adds	r3, r2, r3
 800647e:	3310      	adds	r3, #16
 8006480:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006482:	601a      	str	r2, [r3, #0]
			avrFreq3D[idx3D].z = yaw;
 8006484:	4b3d      	ldr	r3, [pc, #244]	; (800657c <output_data+0x514>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	0019      	movs	r1, r3
 800648a:	4a3d      	ldr	r2, [pc, #244]	; (8006580 <output_data+0x518>)
 800648c:	000b      	movs	r3, r1
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	1a5b      	subs	r3, r3, r1
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	18d3      	adds	r3, r2, r3
 8006496:	3314      	adds	r3, #20
 8006498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800649a:	601a      	str	r2, [r3, #0]
			idx3D++;
 800649c:	4b37      	ldr	r3, [pc, #220]	; (800657c <output_data+0x514>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	4b35      	ldr	r3, [pc, #212]	; (800657c <output_data+0x514>)
 80064a6:	701a      	strb	r2, [r3, #0]
		}
		//end store in range 3D

		//reset all
		g_appStats.fuelLevel3D = -1; //ok
 80064a8:	4b31      	ldr	r3, [pc, #196]	; (8006570 <output_data+0x508>)
 80064aa:	2201      	movs	r2, #1
 80064ac:	4252      	negs	r2, r2
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
		g_appStats.fuelLevel3DMin = -1; //ok
 80064b0:	4b2f      	ldr	r3, [pc, #188]	; (8006570 <output_data+0x508>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	4252      	negs	r2, r2
 80064b6:	63da      	str	r2, [r3, #60]	; 0x3c
		g_appStats.fuelLevel3DSame = -1;
 80064b8:	4b2d      	ldr	r3, [pc, #180]	; (8006570 <output_data+0x508>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	4252      	negs	r2, r2
 80064be:	641a      	str	r2, [r3, #64]	; 0x40
		g_appStats.fuelLevelAvg = -1; //ok
 80064c0:	4b2b      	ldr	r3, [pc, #172]	; (8006570 <output_data+0x508>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	4252      	negs	r2, r2
 80064c6:	635a      	str	r2, [r3, #52]	; 0x34
		g_appStats.fuelLevelMinDiff = -1;
 80064c8:	4b29      	ldr	r3, [pc, #164]	; (8006570 <output_data+0x508>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	4252      	negs	r2, r2
 80064ce:	645a      	str	r2, [r3, #68]	; 0x44

		g_appStats.vibrInt = 0;
 80064d0:	4b27      	ldr	r3, [pc, #156]	; (8006570 <output_data+0x508>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	649a      	str	r2, [r3, #72]	; 0x48

		lastStoreAverage = ulSecCount;
 80064d6:	4b24      	ldr	r3, [pc, #144]	; (8006568 <output_data+0x500>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4b2a      	ldr	r3, [pc, #168]	; (8006584 <output_data+0x51c>)
 80064dc:	601a      	str	r2, [r3, #0]

		unsigned long min3Dx = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	22bc      	movs	r2, #188	; 0xbc
 80064e2:	2118      	movs	r1, #24
 80064e4:	1852      	adds	r2, r2, r1
 80064e6:	19d2      	adds	r2, r2, r7
 80064e8:	6013      	str	r3, [r2, #0]
		unsigned long min3Dy = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	22b8      	movs	r2, #184	; 0xb8
 80064ee:	1852      	adds	r2, r2, r1
 80064f0:	19d2      	adds	r2, r2, r7
 80064f2:	6013      	str	r3, [r2, #0]
		unsigned long min3DVbr = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	22b4      	movs	r2, #180	; 0xb4
 80064f8:	1852      	adds	r2, r2, r1
 80064fa:	19d2      	adds	r2, r2, r7
 80064fc:	6013      	str	r3, [r2, #0]

		unsigned long same3Dx = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	22b0      	movs	r2, #176	; 0xb0
 8006502:	1852      	adds	r2, r2, r1
 8006504:	19d2      	adds	r2, r2, r7
 8006506:	6013      	str	r3, [r2, #0]
		unsigned long same3Dy = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	22ac      	movs	r2, #172	; 0xac
 800650c:	1852      	adds	r2, r2, r1
 800650e:	19d2      	adds	r2, r2, r7
 8006510:	6013      	str	r3, [r2, #0]
		unsigned long same3DVbr = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	22a8      	movs	r2, #168	; 0xa8
 8006516:	1852      	adds	r2, r2, r1
 8006518:	19d2      	adds	r2, r2, r7
 800651a:	6013      	str	r3, [r2, #0]
		unsigned long same3DSecCount = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	22a4      	movs	r2, #164	; 0xa4
 8006520:	1852      	adds	r2, r2, r1
 8006522:	19d2      	adds	r2, r2, r7
 8006524:	6013      	str	r3, [r2, #0]

		uint32_t sumAvrFeq = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	22a0      	movs	r2, #160	; 0xa0
 800652a:	1852      	adds	r2, r2, r1
 800652c:	19d2      	adds	r2, r2, r7
 800652e:	6013      	str	r3, [r2, #0]
		int countAvr = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	229c      	movs	r2, #156	; 0x9c
 8006534:	1852      	adds	r2, r2, r1
 8006536:	19d2      	adds	r2, r2, r7
 8006538:	6013      	str	r3, [r2, #0]

		int sumMinDiff = -1;
 800653a:	2301      	movs	r3, #1
 800653c:	425b      	negs	r3, r3
 800653e:	2298      	movs	r2, #152	; 0x98
 8006540:	1852      	adds	r2, r2, r1
 8006542:	19d2      	adds	r2, r2, r7
 8006544:	6013      	str	r3, [r2, #0]
		long tmpSecCount = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	2294      	movs	r2, #148	; 0x94
 800654a:	1852      	adds	r2, r2, r1
 800654c:	19d2      	adds	r2, r2, r7
 800654e:	6013      	str	r3, [r2, #0]

		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 8006550:	2300      	movs	r3, #0
 8006552:	2290      	movs	r2, #144	; 0x90
 8006554:	1852      	adds	r2, r2, r1
 8006556:	19d2      	adds	r2, r2, r7
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e10f      	b.n	800677c <output_data+0x714>
 800655c:	20000f41 	.word	0x20000f41
 8006560:	20000f54 	.word	0x20000f54
 8006564:	200004d8 	.word	0x200004d8
 8006568:	200004d0 	.word	0x200004d0
 800656c:	20000a54 	.word	0x20000a54
 8006570:	200004f4 	.word	0x200004f4
 8006574:	20000f40 	.word	0x20000f40
 8006578:	20000568 	.word	0x20000568
 800657c:	20000f42 	.word	0x20000f42
 8006580:	200008b0 	.word	0x200008b0
 8006584:	20000564 	.word	0x20000564
			if (avrFreq[i].secCount) {
 8006588:	498f      	ldr	r1, [pc, #572]	; (80067c8 <output_data+0x760>)
 800658a:	2090      	movs	r0, #144	; 0x90
 800658c:	2418      	movs	r4, #24
 800658e:	1903      	adds	r3, r0, r4
 8006590:	19db      	adds	r3, r3, r7
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	0013      	movs	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	585b      	ldr	r3, [r3, r1]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d100      	bne.n	80065a4 <output_data+0x53c>
 80065a2:	e0e2      	b.n	800676a <output_data+0x702>
				sumAvrFeq += avrFreq[i].level;
 80065a4:	4988      	ldr	r1, [pc, #544]	; (80067c8 <output_data+0x760>)
 80065a6:	1903      	adds	r3, r0, r4
 80065a8:	19db      	adds	r3, r3, r7
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	0013      	movs	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	18cb      	adds	r3, r1, r3
 80065b6:	3318      	adds	r3, #24
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	001a      	movs	r2, r3
 80065bc:	21a0      	movs	r1, #160	; 0xa0
 80065be:	190b      	adds	r3, r1, r4
 80065c0:	19db      	adds	r3, r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	189b      	adds	r3, r3, r2
 80065c6:	190a      	adds	r2, r1, r4
 80065c8:	19d2      	adds	r2, r2, r7
 80065ca:	6013      	str	r3, [r2, #0]
				countAvr++;
 80065cc:	229c      	movs	r2, #156	; 0x9c
 80065ce:	1913      	adds	r3, r2, r4
 80065d0:	19db      	adds	r3, r3, r7
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	0021      	movs	r1, r4
 80065d8:	1852      	adds	r2, r2, r1
 80065da:	19d2      	adds	r2, r2, r7
 80065dc:	6013      	str	r3, [r2, #0]

				//count min diff
				int tmpCountMinDiff = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	228c      	movs	r2, #140	; 0x8c
 80065e2:	1852      	adds	r2, r2, r1
 80065e4:	19d2      	adds	r2, r2, r7
 80065e6:	6013      	str	r3, [r2, #0]
				int tmpSumMinDiff = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	2288      	movs	r2, #136	; 0x88
 80065ec:	1852      	adds	r2, r2, r1
 80065ee:	19d2      	adds	r2, r2, r7
 80065f0:	6013      	str	r3, [r2, #0]
				int sumDiff = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	2284      	movs	r2, #132	; 0x84
 80065f6:	1852      	adds	r2, r2, r1
 80065f8:	19d2      	adds	r2, r2, r7
 80065fa:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < MAX_NO_AVERAGE; j++) {
 80065fc:	2300      	movs	r3, #0
 80065fe:	2280      	movs	r2, #128	; 0x80
 8006600:	1852      	adds	r2, r2, r1
 8006602:	19d2      	adds	r2, r2, r7
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e05e      	b.n	80066c6 <output_data+0x65e>
					if (avrFreq[j].secCount && i != j) {
 8006608:	496f      	ldr	r1, [pc, #444]	; (80067c8 <output_data+0x760>)
 800660a:	2480      	movs	r4, #128	; 0x80
 800660c:	2518      	movs	r5, #24
 800660e:	1963      	adds	r3, r4, r5
 8006610:	19db      	adds	r3, r3, r7
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	0013      	movs	r3, r2
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	1a9b      	subs	r3, r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	585b      	ldr	r3, [r3, r1]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d048      	beq.n	80066b4 <output_data+0x64c>
 8006622:	2090      	movs	r0, #144	; 0x90
 8006624:	1943      	adds	r3, r0, r5
 8006626:	19db      	adds	r3, r3, r7
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	1963      	adds	r3, r4, r5
 800662c:	19db      	adds	r3, r3, r7
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d03f      	beq.n	80066b4 <output_data+0x64c>
						long diff = abs(avrFreq[i].level - avrFreq[j].level);
 8006634:	4964      	ldr	r1, [pc, #400]	; (80067c8 <output_data+0x760>)
 8006636:	1943      	adds	r3, r0, r5
 8006638:	19db      	adds	r3, r3, r7
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	0013      	movs	r3, r2
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	18cb      	adds	r3, r1, r3
 8006646:	3318      	adds	r3, #24
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	485f      	ldr	r0, [pc, #380]	; (80067c8 <output_data+0x760>)
 800664c:	1963      	adds	r3, r4, r5
 800664e:	19db      	adds	r3, r3, r7
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	0013      	movs	r3, r2
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	1a9b      	subs	r3, r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	18c3      	adds	r3, r0, r3
 800665c:	3318      	adds	r3, #24
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	1acb      	subs	r3, r1, r3
 8006662:	17da      	asrs	r2, r3, #31
 8006664:	189b      	adds	r3, r3, r2
 8006666:	4053      	eors	r3, r2
 8006668:	61fb      	str	r3, [r7, #28]
						tmpSumMinDiff += avrFreq[j].level;
 800666a:	4957      	ldr	r1, [pc, #348]	; (80067c8 <output_data+0x760>)
 800666c:	1963      	adds	r3, r4, r5
 800666e:	19db      	adds	r3, r3, r7
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	0013      	movs	r3, r2
 8006674:	00db      	lsls	r3, r3, #3
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	18cb      	adds	r3, r1, r3
 800667c:	3318      	adds	r3, #24
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2188      	movs	r1, #136	; 0x88
 8006682:	194a      	adds	r2, r1, r5
 8006684:	19d2      	adds	r2, r2, r7
 8006686:	6812      	ldr	r2, [r2, #0]
 8006688:	18d3      	adds	r3, r2, r3
 800668a:	194a      	adds	r2, r1, r5
 800668c:	19d2      	adds	r2, r2, r7
 800668e:	6013      	str	r3, [r2, #0]
						sumDiff += diff;
 8006690:	2184      	movs	r1, #132	; 0x84
 8006692:	194b      	adds	r3, r1, r5
 8006694:	19db      	adds	r3, r3, r7
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	18d3      	adds	r3, r2, r3
 800669c:	194a      	adds	r2, r1, r5
 800669e:	19d2      	adds	r2, r2, r7
 80066a0:	6013      	str	r3, [r2, #0]
						tmpCountMinDiff++;
 80066a2:	228c      	movs	r2, #140	; 0x8c
 80066a4:	0029      	movs	r1, r5
 80066a6:	1953      	adds	r3, r2, r5
 80066a8:	19db      	adds	r3, r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3301      	adds	r3, #1
 80066ae:	1852      	adds	r2, r2, r1
 80066b0:	19d2      	adds	r2, r2, r7
 80066b2:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < MAX_NO_AVERAGE; j++) {
 80066b4:	2280      	movs	r2, #128	; 0x80
 80066b6:	2118      	movs	r1, #24
 80066b8:	1853      	adds	r3, r2, r1
 80066ba:	19db      	adds	r3, r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	1852      	adds	r2, r2, r1
 80066c2:	19d2      	adds	r2, r2, r7
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	2380      	movs	r3, #128	; 0x80
 80066c8:	2018      	movs	r0, #24
 80066ca:	181b      	adds	r3, r3, r0
 80066cc:	19db      	adds	r3, r3, r7
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b0e      	cmp	r3, #14
 80066d2:	dd99      	ble.n	8006608 <output_data+0x5a0>
					}
				}

				//average
				if (tmpCountMinDiff && (sumMinDiff == -1 || (sumDiff < sumMinDiff && avrFreq[i].secCount > tmpSecCount))) {
 80066d4:	238c      	movs	r3, #140	; 0x8c
 80066d6:	181b      	adds	r3, r3, r0
 80066d8:	19db      	adds	r3, r3, r7
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d044      	beq.n	800676a <output_data+0x702>
 80066e0:	2198      	movs	r1, #152	; 0x98
 80066e2:	180b      	adds	r3, r1, r0
 80066e4:	19db      	adds	r3, r3, r7
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3301      	adds	r3, #1
 80066ea:	d018      	beq.n	800671e <output_data+0x6b6>
 80066ec:	2384      	movs	r3, #132	; 0x84
 80066ee:	181b      	adds	r3, r3, r0
 80066f0:	19db      	adds	r3, r3, r7
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	180b      	adds	r3, r1, r0
 80066f6:	19db      	adds	r3, r3, r7
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	da35      	bge.n	800676a <output_data+0x702>
 80066fe:	4932      	ldr	r1, [pc, #200]	; (80067c8 <output_data+0x760>)
 8006700:	2390      	movs	r3, #144	; 0x90
 8006702:	181b      	adds	r3, r3, r0
 8006704:	19db      	adds	r3, r3, r7
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	0013      	movs	r3, r2
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	1a9b      	subs	r3, r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	585a      	ldr	r2, [r3, r1]
 8006712:	2394      	movs	r3, #148	; 0x94
 8006714:	181b      	adds	r3, r3, r0
 8006716:	19db      	adds	r3, r3, r7
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d925      	bls.n	800676a <output_data+0x702>
					tmpSecCount = avrFreq[i].secCount;
 800671e:	492a      	ldr	r1, [pc, #168]	; (80067c8 <output_data+0x760>)
 8006720:	2390      	movs	r3, #144	; 0x90
 8006722:	2018      	movs	r0, #24
 8006724:	181b      	adds	r3, r3, r0
 8006726:	19db      	adds	r3, r3, r7
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	0013      	movs	r3, r2
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	1a9b      	subs	r3, r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	585b      	ldr	r3, [r3, r1]
 8006734:	2294      	movs	r2, #148	; 0x94
 8006736:	1812      	adds	r2, r2, r0
 8006738:	19d2      	adds	r2, r2, r7
 800673a:	6013      	str	r3, [r2, #0]
					sumMinDiff = sumDiff;
 800673c:	2384      	movs	r3, #132	; 0x84
 800673e:	181b      	adds	r3, r3, r0
 8006740:	19db      	adds	r3, r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2298      	movs	r2, #152	; 0x98
 8006746:	1812      	adds	r2, r2, r0
 8006748:	19d2      	adds	r2, r2, r7
 800674a:	6013      	str	r3, [r2, #0]
					g_appStats.fuelLevelMinDiff = (tmpSumMinDiff / tmpCountMinDiff);
 800674c:	238c      	movs	r3, #140	; 0x8c
 800674e:	0002      	movs	r2, r0
 8006750:	189b      	adds	r3, r3, r2
 8006752:	19db      	adds	r3, r3, r7
 8006754:	6819      	ldr	r1, [r3, #0]
 8006756:	2388      	movs	r3, #136	; 0x88
 8006758:	189b      	adds	r3, r3, r2
 800675a:	19db      	adds	r3, r3, r7
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	f7f9 fd81 	bl	8000264 <__divsi3>
 8006762:	0003      	movs	r3, r0
 8006764:	001a      	movs	r2, r3
 8006766:	4b19      	ldr	r3, [pc, #100]	; (80067cc <output_data+0x764>)
 8006768:	645a      	str	r2, [r3, #68]	; 0x44
		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 800676a:	2290      	movs	r2, #144	; 0x90
 800676c:	2118      	movs	r1, #24
 800676e:	1853      	adds	r3, r2, r1
 8006770:	19db      	adds	r3, r3, r7
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	1852      	adds	r2, r2, r1
 8006778:	19d2      	adds	r2, r2, r7
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	2390      	movs	r3, #144	; 0x90
 800677e:	2218      	movs	r2, #24
 8006780:	189b      	adds	r3, r3, r2
 8006782:	19db      	adds	r3, r3, r7
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b0e      	cmp	r3, #14
 8006788:	dc00      	bgt.n	800678c <output_data+0x724>
 800678a:	e6fd      	b.n	8006588 <output_data+0x520>
				}
			}
		}

		int start = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	2294      	movs	r2, #148	; 0x94
 8006790:	18ba      	adds	r2, r7, r2
 8006792:	6013      	str	r3, [r2, #0]
		int startSame = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	2290      	movs	r2, #144	; 0x90
 8006798:	18ba      	adds	r2, r7, r2
 800679a:	6013      	str	r3, [r2, #0]
		long ulSecCountMax = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	228c      	movs	r2, #140	; 0x8c
 80067a0:	18ba      	adds	r2, r7, r2
 80067a2:	6013      	str	r3, [r2, #0]
		uint32_t sumFeq3D = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	2288      	movs	r2, #136	; 0x88
 80067a8:	18ba      	adds	r2, r7, r2
 80067aa:	6013      	str	r3, [r2, #0]
		int count3D = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	2284      	movs	r2, #132	; 0x84
 80067b0:	18ba      	adds	r2, r7, r2
 80067b2:	6013      	str	r3, [r2, #0]

		uint32_t minDiffFeq3D = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	2280      	movs	r2, #128	; 0x80
 80067b8:	18ba      	adds	r2, r7, r2
 80067ba:	6013      	str	r3, [r2, #0]
		int countMinDiff3D = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	67fb      	str	r3, [r7, #124]	; 0x7c

		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 80067c0:	2300      	movs	r3, #0
 80067c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80067c4:	e25d      	b.n	8006c82 <output_data+0xc1a>
 80067c6:	46c0      	nop			; (mov r8, r8)
 80067c8:	20000568 	.word	0x20000568
 80067cc:	200004f4 	.word	0x200004f4
			uint32_t diffTime = (uint32_t) (ulSecCount - avrFreq3D[i].secCount);
 80067d0:	4b7a      	ldr	r3, [pc, #488]	; (80069bc <output_data+0x954>)
 80067d2:	6819      	ldr	r1, [r3, #0]
 80067d4:	487a      	ldr	r0, [pc, #488]	; (80069c0 <output_data+0x958>)
 80067d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067d8:	0013      	movs	r3, r2
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	1a9b      	subs	r3, r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	581b      	ldr	r3, [r3, r0]
 80067e2:	1acb      	subs	r3, r1, r3
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (avrFreq3D[i].secCount && diffTime <= (g_config.timeout3D * 60)) {
 80067e6:	4976      	ldr	r1, [pc, #472]	; (80069c0 <output_data+0x958>)
 80067e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067ea:	0013      	movs	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	1a9b      	subs	r3, r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	585b      	ldr	r3, [r3, r1]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d100      	bne.n	80067fa <output_data+0x792>
 80067f8:	e13f      	b.n	8006a7a <output_data+0xa12>
 80067fa:	4b72      	ldr	r3, [pc, #456]	; (80069c4 <output_data+0x95c>)
 80067fc:	8a9b      	ldrh	r3, [r3, #20]
 80067fe:	001a      	movs	r2, r3
 8006800:	0013      	movs	r3, r2
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	001a      	movs	r2, r3
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	4293      	cmp	r3, r2
 800680e:	d900      	bls.n	8006812 <output_data+0x7aa>
 8006810:	e133      	b.n	8006a7a <output_data+0xa12>
				if (start == 0) {
 8006812:	2494      	movs	r4, #148	; 0x94
 8006814:	193b      	adds	r3, r7, r4
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d13c      	bne.n	8006896 <output_data+0x82e>
					min3Dx = abs(avrFreq3D[i].x);
 800681c:	4968      	ldr	r1, [pc, #416]	; (80069c0 <output_data+0x958>)
 800681e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006820:	0013      	movs	r3, r2
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	18cb      	adds	r3, r1, r3
 800682a:	330c      	adds	r3, #12
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	17da      	asrs	r2, r3, #31
 8006830:	189b      	adds	r3, r3, r2
 8006832:	4053      	eors	r3, r2
 8006834:	22bc      	movs	r2, #188	; 0xbc
 8006836:	2018      	movs	r0, #24
 8006838:	1812      	adds	r2, r2, r0
 800683a:	19d2      	adds	r2, r2, r7
 800683c:	6013      	str	r3, [r2, #0]
					min3Dy = abs(avrFreq3D[i].y);
 800683e:	4960      	ldr	r1, [pc, #384]	; (80069c0 <output_data+0x958>)
 8006840:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006842:	0013      	movs	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	18cb      	adds	r3, r1, r3
 800684c:	3310      	adds	r3, #16
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	17da      	asrs	r2, r3, #31
 8006852:	189b      	adds	r3, r3, r2
 8006854:	4053      	eors	r3, r2
 8006856:	22b8      	movs	r2, #184	; 0xb8
 8006858:	1812      	adds	r2, r2, r0
 800685a:	19d2      	adds	r2, r2, r7
 800685c:	6013      	str	r3, [r2, #0]
					min3DVbr = avrFreq3D[i].vibration;
 800685e:	4958      	ldr	r1, [pc, #352]	; (80069c0 <output_data+0x958>)
 8006860:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006862:	0013      	movs	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	18cb      	adds	r3, r1, r3
 800686c:	3308      	adds	r3, #8
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	22b4      	movs	r2, #180	; 0xb4
 8006872:	1812      	adds	r2, r2, r0
 8006874:	19d2      	adds	r2, r2, r7
 8006876:	6013      	str	r3, [r2, #0]
					ulSecCountMax = avrFreq3D[i].secCount;
 8006878:	4951      	ldr	r1, [pc, #324]	; (80069c0 <output_data+0x958>)
 800687a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800687c:	0013      	movs	r3, r2
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	1a9b      	subs	r3, r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	585b      	ldr	r3, [r3, r1]
 8006886:	228c      	movs	r2, #140	; 0x8c
 8006888:	18ba      	adds	r2, r7, r2
 800688a:	6013      	str	r3, [r2, #0]
					start++;
 800688c:	193b      	adds	r3, r7, r4
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	193a      	adds	r2, r7, r4
 8006894:	6013      	str	r3, [r2, #0]
				}

				if (abs(avrFreq3D[i].x) <= min3Dx && abs(avrFreq3D[i].y) <= min3Dy && avrFreq3D[i].vibration <= min3DVbr) {
 8006896:	494a      	ldr	r1, [pc, #296]	; (80069c0 <output_data+0x958>)
 8006898:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800689a:	0013      	movs	r3, r2
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	18cb      	adds	r3, r1, r3
 80068a4:	330c      	adds	r3, #12
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	17da      	asrs	r2, r3, #31
 80068aa:	189b      	adds	r3, r3, r2
 80068ac:	4053      	eors	r3, r2
 80068ae:	001a      	movs	r2, r3
 80068b0:	20bc      	movs	r0, #188	; 0xbc
 80068b2:	2618      	movs	r6, #24
 80068b4:	1983      	adds	r3, r0, r6
 80068b6:	19db      	adds	r3, r3, r7
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d360      	bcc.n	8006980 <output_data+0x918>
 80068be:	4940      	ldr	r1, [pc, #256]	; (80069c0 <output_data+0x958>)
 80068c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068c2:	0013      	movs	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	18cb      	adds	r3, r1, r3
 80068cc:	3310      	adds	r3, #16
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	17da      	asrs	r2, r3, #31
 80068d2:	189b      	adds	r3, r3, r2
 80068d4:	4053      	eors	r3, r2
 80068d6:	001a      	movs	r2, r3
 80068d8:	24b8      	movs	r4, #184	; 0xb8
 80068da:	19a3      	adds	r3, r4, r6
 80068dc:	19db      	adds	r3, r3, r7
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d34d      	bcc.n	8006980 <output_data+0x918>
 80068e4:	4936      	ldr	r1, [pc, #216]	; (80069c0 <output_data+0x958>)
 80068e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068e8:	0013      	movs	r3, r2
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	1a9b      	subs	r3, r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	18cb      	adds	r3, r1, r3
 80068f2:	3308      	adds	r3, #8
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	25b4      	movs	r5, #180	; 0xb4
 80068f8:	19aa      	adds	r2, r5, r6
 80068fa:	19d2      	adds	r2, r2, r7
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d33e      	bcc.n	8006980 <output_data+0x918>
					min3Dx = abs(avrFreq3D[i].x);
 8006902:	492f      	ldr	r1, [pc, #188]	; (80069c0 <output_data+0x958>)
 8006904:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006906:	0013      	movs	r3, r2
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	18cb      	adds	r3, r1, r3
 8006910:	330c      	adds	r3, #12
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	17da      	asrs	r2, r3, #31
 8006916:	189b      	adds	r3, r3, r2
 8006918:	4053      	eors	r3, r2
 800691a:	1982      	adds	r2, r0, r6
 800691c:	19d2      	adds	r2, r2, r7
 800691e:	6013      	str	r3, [r2, #0]
					min3Dy = abs(avrFreq3D[i].y);
 8006920:	4927      	ldr	r1, [pc, #156]	; (80069c0 <output_data+0x958>)
 8006922:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006924:	0013      	movs	r3, r2
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	18cb      	adds	r3, r1, r3
 800692e:	3310      	adds	r3, #16
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	17da      	asrs	r2, r3, #31
 8006934:	189b      	adds	r3, r3, r2
 8006936:	4053      	eors	r3, r2
 8006938:	19a2      	adds	r2, r4, r6
 800693a:	19d2      	adds	r2, r2, r7
 800693c:	6013      	str	r3, [r2, #0]
					min3DVbr = avrFreq3D[i].vibration;
 800693e:	4920      	ldr	r1, [pc, #128]	; (80069c0 <output_data+0x958>)
 8006940:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006942:	0013      	movs	r3, r2
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	1a9b      	subs	r3, r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	18cb      	adds	r3, r1, r3
 800694c:	3308      	adds	r3, #8
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	19aa      	adds	r2, r5, r6
 8006952:	19d2      	adds	r2, r2, r7
 8006954:	6013      	str	r3, [r2, #0]
					if (avrFreq3D[i].secCount >= ulSecCountMax) {
 8006956:	491a      	ldr	r1, [pc, #104]	; (80069c0 <output_data+0x958>)
 8006958:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800695a:	0013      	movs	r3, r2
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	1a9b      	subs	r3, r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	585a      	ldr	r2, [r3, r1]
 8006964:	208c      	movs	r0, #140	; 0x8c
 8006966:	183b      	adds	r3, r7, r0
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d308      	bcc.n	8006980 <output_data+0x918>
						ulSecCountMax = avrFreq3D[i].secCount;
 800696e:	4914      	ldr	r1, [pc, #80]	; (80069c0 <output_data+0x958>)
 8006970:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006972:	0013      	movs	r3, r2
 8006974:	00db      	lsls	r3, r3, #3
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	585b      	ldr	r3, [r3, r1]
 800697c:	183a      	adds	r2, r7, r0
 800697e:	6013      	str	r3, [r2, #0]
					}
				}

				//sum to calculate average
				sumFeq3D += avrFreq3D[i].level;
 8006980:	490f      	ldr	r1, [pc, #60]	; (80069c0 <output_data+0x958>)
 8006982:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006984:	0013      	movs	r3, r2
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	1a9b      	subs	r3, r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	18cb      	adds	r3, r1, r3
 800698e:	3318      	adds	r3, #24
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	001a      	movs	r2, r3
 8006994:	2188      	movs	r1, #136	; 0x88
 8006996:	187b      	adds	r3, r7, r1
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	189b      	adds	r3, r3, r2
 800699c:	187a      	adds	r2, r7, r1
 800699e:	6013      	str	r3, [r2, #0]
				count3D++;
 80069a0:	2284      	movs	r2, #132	; 0x84
 80069a2:	18bb      	adds	r3, r7, r2
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3301      	adds	r3, #1
 80069a8:	18ba      	adds	r2, r7, r2
 80069aa:	6013      	str	r3, [r2, #0]

				//check count
				uint32_t tmpMinDiffFeq3D = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	677b      	str	r3, [r7, #116]	; 0x74
				int tmpCount3DMin = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	673b      	str	r3, [r7, #112]	; 0x70
				for (int j = 0; j < MAX_NO_AVERAGE; j++) {
 80069b4:	2300      	movs	r3, #0
 80069b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069b8:	e052      	b.n	8006a60 <output_data+0x9f8>
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	200004d0 	.word	0x200004d0
 80069c0:	200008b0 	.word	0x200008b0
 80069c4:	200004d8 	.word	0x200004d8
					uint32_t diffTime1 = (uint32_t) (ulSecCount - avrFreq3D[j].secCount);
 80069c8:	4be3      	ldr	r3, [pc, #908]	; (8006d58 <output_data+0xcf0>)
 80069ca:	6819      	ldr	r1, [r3, #0]
 80069cc:	48e3      	ldr	r0, [pc, #908]	; (8006d5c <output_data+0xcf4>)
 80069ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069d0:	0013      	movs	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	581b      	ldr	r3, [r3, r0]
 80069da:	1acb      	subs	r3, r1, r3
 80069dc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (avrFreq3D[j].secCount && diffTime1 <= (g_config.timeout3D * 60)) {
 80069de:	49df      	ldr	r1, [pc, #892]	; (8006d5c <output_data+0xcf4>)
 80069e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069e2:	0013      	movs	r3, r2
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	1a9b      	subs	r3, r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	585b      	ldr	r3, [r3, r1]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d034      	beq.n	8006a5a <output_data+0x9f2>
 80069f0:	4bdb      	ldr	r3, [pc, #876]	; (8006d60 <output_data+0xcf8>)
 80069f2:	8a9b      	ldrh	r3, [r3, #20]
 80069f4:	001a      	movs	r2, r3
 80069f6:	0013      	movs	r3, r2
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	001a      	movs	r2, r3
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d829      	bhi.n	8006a5a <output_data+0x9f2>
						int diff = abs(avrFreq3D[i].level - avrFreq3D[j].level);
 8006a06:	49d5      	ldr	r1, [pc, #852]	; (8006d5c <output_data+0xcf4>)
 8006a08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a0a:	0013      	movs	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	1a9b      	subs	r3, r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	18cb      	adds	r3, r1, r3
 8006a14:	3318      	adds	r3, #24
 8006a16:	6819      	ldr	r1, [r3, #0]
 8006a18:	48d0      	ldr	r0, [pc, #832]	; (8006d5c <output_data+0xcf4>)
 8006a1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a1c:	0013      	movs	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	1a9b      	subs	r3, r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	18c3      	adds	r3, r0, r3
 8006a26:	3318      	adds	r3, #24
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	1acb      	subs	r3, r1, r3
 8006a2c:	17da      	asrs	r2, r3, #31
 8006a2e:	189b      	adds	r3, r3, r2
 8006a30:	4053      	eors	r3, r2
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24

						if (diff < 10) {
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	dc0f      	bgt.n	8006a5a <output_data+0x9f2>
							tmpMinDiffFeq3D += avrFreq3D[j].level;
 8006a3a:	49c8      	ldr	r1, [pc, #800]	; (8006d5c <output_data+0xcf4>)
 8006a3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a3e:	0013      	movs	r3, r2
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	1a9b      	subs	r3, r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	18cb      	adds	r3, r1, r3
 8006a48:	3318      	adds	r3, #24
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	001a      	movs	r2, r3
 8006a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a50:	189b      	adds	r3, r3, r2
 8006a52:	677b      	str	r3, [r7, #116]	; 0x74
							tmpCount3DMin++;
 8006a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a56:	3301      	adds	r3, #1
 8006a58:	673b      	str	r3, [r7, #112]	; 0x70
				for (int j = 0; j < MAX_NO_AVERAGE; j++) {
 8006a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a62:	2b0e      	cmp	r3, #14
 8006a64:	ddb0      	ble.n	80069c8 <output_data+0x960>
						}
					}
				}

				//average
				if (tmpCount3DMin > countMinDiff3D) {
 8006a66:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006a68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	dd05      	ble.n	8006a7a <output_data+0xa12>
					minDiffFeq3D = tmpMinDiffFeq3D;
 8006a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a70:	2280      	movs	r2, #128	; 0x80
 8006a72:	18ba      	adds	r2, r7, r2
 8006a74:	6013      	str	r3, [r2, #0]
					countMinDiff3D = tmpCount3DMin;
 8006a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a78:	67fb      	str	r3, [r7, #124]	; 0x7c
				}
			}

			//check same 3d
			uint32_t diffTime2 = (uint32_t) (ulSecCount - same3DFreq[i].secCount);
 8006a7a:	4bb7      	ldr	r3, [pc, #732]	; (8006d58 <output_data+0xcf0>)
 8006a7c:	6819      	ldr	r1, [r3, #0]
 8006a7e:	48b9      	ldr	r0, [pc, #740]	; (8006d64 <output_data+0xcfc>)
 8006a80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a82:	0013      	movs	r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	581b      	ldr	r3, [r3, r0]
 8006a8c:	1acb      	subs	r3, r1, r3
 8006a8e:	623b      	str	r3, [r7, #32]
			if (same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D * 60)) {
 8006a90:	49b4      	ldr	r1, [pc, #720]	; (8006d64 <output_data+0xcfc>)
 8006a92:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a94:	0013      	movs	r3, r2
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	1a9b      	subs	r3, r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	585b      	ldr	r3, [r3, r1]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d100      	bne.n	8006aa4 <output_data+0xa3c>
 8006aa2:	e0eb      	b.n	8006c7c <output_data+0xc14>
 8006aa4:	4bae      	ldr	r3, [pc, #696]	; (8006d60 <output_data+0xcf8>)
 8006aa6:	8a9b      	ldrh	r3, [r3, #20]
 8006aa8:	001a      	movs	r2, r3
 8006aaa:	0013      	movs	r3, r2
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	1a9b      	subs	r3, r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	001a      	movs	r2, r3
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d900      	bls.n	8006abc <output_data+0xa54>
 8006aba:	e0df      	b.n	8006c7c <output_data+0xc14>
				if (startSame == 0) {
 8006abc:	2490      	movs	r4, #144	; 0x90
 8006abe:	193b      	adds	r3, r7, r4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d148      	bne.n	8006b58 <output_data+0xaf0>
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 8006ac6:	49a7      	ldr	r1, [pc, #668]	; (8006d64 <output_data+0xcfc>)
 8006ac8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006aca:	0013      	movs	r3, r2
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	18cb      	adds	r3, r1, r3
 8006ad4:	3318      	adds	r3, #24
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	4ba3      	ldr	r3, [pc, #652]	; (8006d68 <output_data+0xd00>)
 8006ada:	641a      	str	r2, [r3, #64]	; 0x40
					same3Dx = abs(same3DFreq[i].x);
 8006adc:	49a1      	ldr	r1, [pc, #644]	; (8006d64 <output_data+0xcfc>)
 8006ade:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ae0:	0013      	movs	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	18cb      	adds	r3, r1, r3
 8006aea:	330c      	adds	r3, #12
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	17da      	asrs	r2, r3, #31
 8006af0:	189b      	adds	r3, r3, r2
 8006af2:	4053      	eors	r3, r2
 8006af4:	22b0      	movs	r2, #176	; 0xb0
 8006af6:	2018      	movs	r0, #24
 8006af8:	1812      	adds	r2, r2, r0
 8006afa:	19d2      	adds	r2, r2, r7
 8006afc:	6013      	str	r3, [r2, #0]
					same3Dy = abs(same3DFreq[i].y);
 8006afe:	4999      	ldr	r1, [pc, #612]	; (8006d64 <output_data+0xcfc>)
 8006b00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b02:	0013      	movs	r3, r2
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	1a9b      	subs	r3, r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	18cb      	adds	r3, r1, r3
 8006b0c:	3310      	adds	r3, #16
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	17da      	asrs	r2, r3, #31
 8006b12:	189b      	adds	r3, r3, r2
 8006b14:	4053      	eors	r3, r2
 8006b16:	22ac      	movs	r2, #172	; 0xac
 8006b18:	1812      	adds	r2, r2, r0
 8006b1a:	19d2      	adds	r2, r2, r7
 8006b1c:	6013      	str	r3, [r2, #0]
					same3DVbr = same3DFreq[i].vibration;
 8006b1e:	4991      	ldr	r1, [pc, #580]	; (8006d64 <output_data+0xcfc>)
 8006b20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b22:	0013      	movs	r3, r2
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	1a9b      	subs	r3, r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	18cb      	adds	r3, r1, r3
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	22a8      	movs	r2, #168	; 0xa8
 8006b32:	1812      	adds	r2, r2, r0
 8006b34:	19d2      	adds	r2, r2, r7
 8006b36:	6013      	str	r3, [r2, #0]
					same3DSecCount = same3DFreq[i].secCount;
 8006b38:	498a      	ldr	r1, [pc, #552]	; (8006d64 <output_data+0xcfc>)
 8006b3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b3c:	0013      	movs	r3, r2
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	1a9b      	subs	r3, r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	585b      	ldr	r3, [r3, r1]
 8006b46:	22a4      	movs	r2, #164	; 0xa4
 8006b48:	1812      	adds	r2, r2, r0
 8006b4a:	19d2      	adds	r2, r2, r7
 8006b4c:	6013      	str	r3, [r2, #0]
					startSame++;
 8006b4e:	193b      	adds	r3, r7, r4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3301      	adds	r3, #1
 8006b54:	193a      	adds	r2, r7, r4
 8006b56:	6013      	str	r3, [r2, #0]
				}

				if (abs(same3DFreq[i].x) <= same3Dx && abs(same3DFreq[i].y) <= same3Dy && same3DFreq[i].vibration <= same3DVbr
 8006b58:	4982      	ldr	r1, [pc, #520]	; (8006d64 <output_data+0xcfc>)
 8006b5a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b5c:	0013      	movs	r3, r2
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	18cb      	adds	r3, r1, r3
 8006b66:	330c      	adds	r3, #12
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	17da      	asrs	r2, r3, #31
 8006b6c:	189b      	adds	r3, r3, r2
 8006b6e:	4053      	eors	r3, r2
 8006b70:	001a      	movs	r2, r3
 8006b72:	24b0      	movs	r4, #176	; 0xb0
 8006b74:	2018      	movs	r0, #24
 8006b76:	1823      	adds	r3, r4, r0
 8006b78:	19db      	adds	r3, r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d200      	bcs.n	8006b82 <output_data+0xb1a>
 8006b80:	e07c      	b.n	8006c7c <output_data+0xc14>
 8006b82:	4978      	ldr	r1, [pc, #480]	; (8006d64 <output_data+0xcfc>)
 8006b84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b86:	0013      	movs	r3, r2
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	18cb      	adds	r3, r1, r3
 8006b90:	3310      	adds	r3, #16
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	17da      	asrs	r2, r3, #31
 8006b96:	189b      	adds	r3, r3, r2
 8006b98:	4053      	eors	r3, r2
 8006b9a:	001a      	movs	r2, r3
 8006b9c:	25ac      	movs	r5, #172	; 0xac
 8006b9e:	182b      	adds	r3, r5, r0
 8006ba0:	19db      	adds	r3, r3, r7
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d369      	bcc.n	8006c7c <output_data+0xc14>
 8006ba8:	496e      	ldr	r1, [pc, #440]	; (8006d64 <output_data+0xcfc>)
 8006baa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bac:	0013      	movs	r3, r2
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	18cb      	adds	r3, r1, r3
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	26a8      	movs	r6, #168	; 0xa8
 8006bbc:	1831      	adds	r1, r6, r0
 8006bbe:	19ca      	adds	r2, r1, r7
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d35a      	bcc.n	8006c7c <output_data+0xc14>
						&& same3DFreq[i].secCount >= same3DSecCount) {
 8006bc6:	4967      	ldr	r1, [pc, #412]	; (8006d64 <output_data+0xcfc>)
 8006bc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bca:	0013      	movs	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	585b      	ldr	r3, [r3, r1]
 8006bd4:	20a4      	movs	r0, #164	; 0xa4
 8006bd6:	2218      	movs	r2, #24
 8006bd8:	1881      	adds	r1, r0, r2
 8006bda:	19ca      	adds	r2, r1, r7
 8006bdc:	6812      	ldr	r2, [r2, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d84c      	bhi.n	8006c7c <output_data+0xc14>
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 8006be2:	4960      	ldr	r1, [pc, #384]	; (8006d64 <output_data+0xcfc>)
 8006be4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006be6:	0013      	movs	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	18cb      	adds	r3, r1, r3
 8006bf0:	3318      	adds	r3, #24
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	4b5c      	ldr	r3, [pc, #368]	; (8006d68 <output_data+0xd00>)
 8006bf6:	641a      	str	r2, [r3, #64]	; 0x40
					same3Dx = abs(same3DFreq[i].x);
 8006bf8:	495a      	ldr	r1, [pc, #360]	; (8006d64 <output_data+0xcfc>)
 8006bfa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006bfc:	0013      	movs	r3, r2
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	1a9b      	subs	r3, r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	18cb      	adds	r3, r1, r3
 8006c06:	330c      	adds	r3, #12
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	17da      	asrs	r2, r3, #31
 8006c0c:	189b      	adds	r3, r3, r2
 8006c0e:	4053      	eors	r3, r2
 8006c10:	2218      	movs	r2, #24
 8006c12:	18a1      	adds	r1, r4, r2
 8006c14:	19ca      	adds	r2, r1, r7
 8006c16:	6013      	str	r3, [r2, #0]
					same3Dy = abs(same3DFreq[i].y);
 8006c18:	4952      	ldr	r1, [pc, #328]	; (8006d64 <output_data+0xcfc>)
 8006c1a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c1c:	0013      	movs	r3, r2
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	1a9b      	subs	r3, r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	18cb      	adds	r3, r1, r3
 8006c26:	3310      	adds	r3, #16
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	17da      	asrs	r2, r3, #31
 8006c2c:	189b      	adds	r3, r3, r2
 8006c2e:	4053      	eors	r3, r2
 8006c30:	2418      	movs	r4, #24
 8006c32:	192a      	adds	r2, r5, r4
 8006c34:	19d2      	adds	r2, r2, r7
 8006c36:	6013      	str	r3, [r2, #0]
					same3DVbr = same3DFreq[i].vibration;
 8006c38:	494a      	ldr	r1, [pc, #296]	; (8006d64 <output_data+0xcfc>)
 8006c3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c3c:	0013      	movs	r3, r2
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	1a9b      	subs	r3, r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	18cb      	adds	r3, r1, r3
 8006c46:	3308      	adds	r3, #8
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	1932      	adds	r2, r6, r4
 8006c4c:	19d2      	adds	r2, r2, r7
 8006c4e:	6013      	str	r3, [r2, #0]

					if (same3DFreq[i].secCount > same3DSecCount) {
 8006c50:	4944      	ldr	r1, [pc, #272]	; (8006d64 <output_data+0xcfc>)
 8006c52:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c54:	0013      	movs	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	1a9b      	subs	r3, r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	585b      	ldr	r3, [r3, r1]
 8006c5e:	1902      	adds	r2, r0, r4
 8006c60:	19d2      	adds	r2, r2, r7
 8006c62:	6812      	ldr	r2, [r2, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d209      	bcs.n	8006c7c <output_data+0xc14>
						same3DSecCount = same3DFreq[i].secCount;
 8006c68:	493e      	ldr	r1, [pc, #248]	; (8006d64 <output_data+0xcfc>)
 8006c6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c6c:	0013      	movs	r3, r2
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	1a9b      	subs	r3, r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	585b      	ldr	r3, [r3, r1]
 8006c76:	1902      	adds	r2, r0, r4
 8006c78:	19d2      	adds	r2, r2, r7
 8006c7a:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 8006c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c7e:	3301      	adds	r3, #1
 8006c80:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c84:	2b0e      	cmp	r3, #14
 8006c86:	dc00      	bgt.n	8006c8a <output_data+0xc22>
 8006c88:	e5a2      	b.n	80067d0 <output_data+0x768>
					}
				}
			}
		}

		if (countMinDiff3D) {
 8006c8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <output_data+0xc3e>
			g_appStats.fuelLevel3DMin = (minDiffFeq3D / countMinDiff3D);
 8006c90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c92:	0019      	movs	r1, r3
 8006c94:	2380      	movs	r3, #128	; 0x80
 8006c96:	18fb      	adds	r3, r7, r3
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	f7f9 fa59 	bl	8000150 <__udivsi3>
 8006c9e:	0003      	movs	r3, r0
 8006ca0:	001a      	movs	r2, r3
 8006ca2:	4b31      	ldr	r3, [pc, #196]	; (8006d68 <output_data+0xd00>)
 8006ca4:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if (countAvr > 0) {
 8006ca6:	229c      	movs	r2, #156	; 0x9c
 8006ca8:	2018      	movs	r0, #24
 8006caa:	1813      	adds	r3, r2, r0
 8006cac:	19db      	adds	r3, r3, r7
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dd0d      	ble.n	8006cd0 <output_data+0xc68>
			g_appStats.fuelLevelAvg = (sumAvrFeq / countAvr);
 8006cb4:	1813      	adds	r3, r2, r0
 8006cb6:	19db      	adds	r3, r3, r7
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	0019      	movs	r1, r3
 8006cbc:	23a0      	movs	r3, #160	; 0xa0
 8006cbe:	181b      	adds	r3, r3, r0
 8006cc0:	19db      	adds	r3, r3, r7
 8006cc2:	6818      	ldr	r0, [r3, #0]
 8006cc4:	f7f9 fa44 	bl	8000150 <__udivsi3>
 8006cc8:	0003      	movs	r3, r0
 8006cca:	001a      	movs	r2, r3
 8006ccc:	4b26      	ldr	r3, [pc, #152]	; (8006d68 <output_data+0xd00>)
 8006cce:	635a      	str	r2, [r3, #52]	; 0x34
		}

		if (count3D) {
 8006cd0:	2284      	movs	r2, #132	; 0x84
 8006cd2:	18bb      	adds	r3, r7, r2
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00b      	beq.n	8006cf2 <output_data+0xc8a>
			g_appStats.fuelLevel3D = (sumFeq3D / count3D);
 8006cda:	18bb      	adds	r3, r7, r2
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	0019      	movs	r1, r3
 8006ce0:	2388      	movs	r3, #136	; 0x88
 8006ce2:	18fb      	adds	r3, r7, r3
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	f7f9 fa33 	bl	8000150 <__udivsi3>
 8006cea:	0003      	movs	r3, r0
 8006cec:	001a      	movs	r2, r3
 8006cee:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <output_data+0xd00>)
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38
		}

		int diff3D = -1;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	425b      	negs	r3, r3
 8006cf6:	66bb      	str	r3, [r7, #104]	; 0x68

		if (ulSecCountMax) {
 8006cf8:	218c      	movs	r1, #140	; 0x8c
 8006cfa:	187b      	adds	r3, r7, r1
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d005      	beq.n	8006d0e <output_data+0xca6>
			diff3D = (ulSecCount - ulSecCountMax);
 8006d02:	4b15      	ldr	r3, [pc, #84]	; (8006d58 <output_data+0xcf0>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	187b      	adds	r3, r7, r1
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		int step = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	667b      	str	r3, [r7, #100]	; 0x64

		if (g_config.filterMode == AVERAGE_MODE) {
 8006d12:	4b13      	ldr	r3, [pc, #76]	; (8006d60 <output_data+0xcf8>)
 8006d14:	7ddb      	ldrb	r3, [r3, #23]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d137      	bne.n	8006d8a <output_data+0xd22>
			step = 1;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	667b      	str	r3, [r7, #100]	; 0x64

			if (g_appStats.fuelLevel3DMin != -1) {
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <output_data+0xd00>)
 8006d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d22:	3301      	adds	r3, #1
 8006d24:	d009      	beq.n	8006d3a <output_data+0xcd2>
				fuelLevel = g_appStats.fuelLevel3DMin;
 8006d26:	4b10      	ldr	r3, [pc, #64]	; (8006d68 <output_data+0xd00>)
 8006d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2a:	22c4      	movs	r2, #196	; 0xc4
 8006d2c:	2118      	movs	r1, #24
 8006d2e:	1852      	adds	r2, r2, r1
 8006d30:	19d2      	adds	r2, r2, r7
 8006d32:	6013      	str	r3, [r2, #0]
				step = 11;
 8006d34:	230b      	movs	r3, #11
 8006d36:	667b      	str	r3, [r7, #100]	; 0x64
 8006d38:	e1ad      	b.n	8007096 <output_data+0x102e>
			} else if (g_appStats.fuelLevel3D != -1) {
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <output_data+0xd00>)
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	3301      	adds	r3, #1
 8006d40:	d014      	beq.n	8006d6c <output_data+0xd04>
				fuelLevel = g_appStats.fuelLevel3D;
 8006d42:	4b09      	ldr	r3, [pc, #36]	; (8006d68 <output_data+0xd00>)
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	22c4      	movs	r2, #196	; 0xc4
 8006d48:	2118      	movs	r1, #24
 8006d4a:	1852      	adds	r2, r2, r1
 8006d4c:	19d2      	adds	r2, r2, r7
 8006d4e:	6013      	str	r3, [r2, #0]
				step = 12;
 8006d50:	230c      	movs	r3, #12
 8006d52:	667b      	str	r3, [r7, #100]	; 0x64
 8006d54:	e19f      	b.n	8007096 <output_data+0x102e>
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	200004d0 	.word	0x200004d0
 8006d5c:	200008b0 	.word	0x200008b0
 8006d60:	200004d8 	.word	0x200004d8
 8006d64:	20000a54 	.word	0x20000a54
 8006d68:	200004f4 	.word	0x200004f4
			} else if (g_appStats.fuelLevelAvg != -1) {
 8006d6c:	4bc0      	ldr	r3, [pc, #768]	; (8007070 <output_data+0x1008>)
 8006d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d70:	3301      	adds	r3, #1
 8006d72:	d100      	bne.n	8006d76 <output_data+0xd0e>
 8006d74:	e18f      	b.n	8007096 <output_data+0x102e>
				fuelLevel = g_appStats.fuelLevelAvg;
 8006d76:	4bbe      	ldr	r3, [pc, #760]	; (8007070 <output_data+0x1008>)
 8006d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7a:	22c4      	movs	r2, #196	; 0xc4
 8006d7c:	2118      	movs	r1, #24
 8006d7e:	1852      	adds	r2, r2, r1
 8006d80:	19d2      	adds	r2, r2, r7
 8006d82:	6013      	str	r3, [r2, #0]
				step = 13;
 8006d84:	230d      	movs	r3, #13
 8006d86:	667b      	str	r3, [r7, #100]	; 0x64
 8006d88:	e185      	b.n	8007096 <output_data+0x102e>
			}
		} else if (g_config.filterMode == COMPARE_MODE) {
 8006d8a:	4bba      	ldr	r3, [pc, #744]	; (8007074 <output_data+0x100c>)
 8006d8c:	7ddb      	ldrb	r3, [r3, #23]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d000      	beq.n	8006d94 <output_data+0xd2c>
 8006d92:	e0c6      	b.n	8006f22 <output_data+0xeba>
			step = 2;
 8006d94:	2302      	movs	r3, #2
 8006d96:	667b      	str	r3, [r7, #100]	; 0x64

			if (g_appStats.fuelLevel3DSame != -1) {
 8006d98:	4bb5      	ldr	r3, [pc, #724]	; (8007070 <output_data+0x1008>)
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	d009      	beq.n	8006db4 <output_data+0xd4c>
				step = 21;
 8006da0:	2315      	movs	r3, #21
 8006da2:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DSame;
 8006da4:	4bb2      	ldr	r3, [pc, #712]	; (8007070 <output_data+0x1008>)
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	22c4      	movs	r2, #196	; 0xc4
 8006daa:	2118      	movs	r1, #24
 8006dac:	1852      	adds	r2, r2, r1
 8006dae:	19d2      	adds	r2, r2, r7
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	e028      	b.n	8006e06 <output_data+0xd9e>
			} else if (g_appStats.fuelLevel3DMin != -1) {
 8006db4:	4bae      	ldr	r3, [pc, #696]	; (8007070 <output_data+0x1008>)
 8006db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db8:	3301      	adds	r3, #1
 8006dba:	d009      	beq.n	8006dd0 <output_data+0xd68>
				step = 22;
 8006dbc:	2316      	movs	r3, #22
 8006dbe:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DMin;
 8006dc0:	4bab      	ldr	r3, [pc, #684]	; (8007070 <output_data+0x1008>)
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc4:	22c4      	movs	r2, #196	; 0xc4
 8006dc6:	2118      	movs	r1, #24
 8006dc8:	1852      	adds	r2, r2, r1
 8006dca:	19d2      	adds	r2, r2, r7
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e01a      	b.n	8006e06 <output_data+0xd9e>
			} else if (g_appStats.fuelLevel3D != -1) {
 8006dd0:	4ba7      	ldr	r3, [pc, #668]	; (8007070 <output_data+0x1008>)
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	d009      	beq.n	8006dec <output_data+0xd84>
				step = 23;
 8006dd8:	2317      	movs	r3, #23
 8006dda:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3D;
 8006ddc:	4ba4      	ldr	r3, [pc, #656]	; (8007070 <output_data+0x1008>)
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	22c4      	movs	r2, #196	; 0xc4
 8006de2:	2118      	movs	r1, #24
 8006de4:	1852      	adds	r2, r2, r1
 8006de6:	19d2      	adds	r2, r2, r7
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	e00c      	b.n	8006e06 <output_data+0xd9e>
			} else if (g_appStats.fuelLevelAvg != -1) {
 8006dec:	4ba0      	ldr	r3, [pc, #640]	; (8007070 <output_data+0x1008>)
 8006dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df0:	3301      	adds	r3, #1
 8006df2:	d008      	beq.n	8006e06 <output_data+0xd9e>
				step = 24;
 8006df4:	2318      	movs	r3, #24
 8006df6:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevelAvg;
 8006df8:	4b9d      	ldr	r3, [pc, #628]	; (8007070 <output_data+0x1008>)
 8006dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfc:	22c4      	movs	r2, #196	; 0xc4
 8006dfe:	2118      	movs	r1, #24
 8006e00:	1852      	adds	r2, r2, r1
 8006e02:	19d2      	adds	r2, r2, r7
 8006e04:	6013      	str	r3, [r2, #0]
			}

			for (int i = 0; i < COMPARE_LEVELS; i++) {
 8006e06:	2300      	movs	r3, #0
 8006e08:	663b      	str	r3, [r7, #96]	; 0x60
 8006e0a:	e008      	b.n	8006e1e <output_data+0xdb6>
				compare_levels[i] = -1;
 8006e0c:	4b9a      	ldr	r3, [pc, #616]	; (8007078 <output_data+0x1010>)
 8006e0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e10:	0092      	lsls	r2, r2, #2
 8006e12:	2101      	movs	r1, #1
 8006e14:	4249      	negs	r1, r1
 8006e16:	50d1      	str	r1, [r2, r3]
			for (int i = 0; i < COMPARE_LEVELS; i++) {
 8006e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e20:	2b05      	cmp	r3, #5
 8006e22:	ddf3      	ble.n	8006e0c <output_data+0xda4>
			}

			compare_levels[0] = g_appStats.fuelLevel;
 8006e24:	4b92      	ldr	r3, [pc, #584]	; (8007070 <output_data+0x1008>)
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	001a      	movs	r2, r3
 8006e2a:	4b93      	ldr	r3, [pc, #588]	; (8007078 <output_data+0x1010>)
 8006e2c:	601a      	str	r2, [r3, #0]
			compare_levels[1] = g_appStats.fuelLevelAvg;
 8006e2e:	4b90      	ldr	r3, [pc, #576]	; (8007070 <output_data+0x1008>)
 8006e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e32:	4b91      	ldr	r3, [pc, #580]	; (8007078 <output_data+0x1010>)
 8006e34:	605a      	str	r2, [r3, #4]
			compare_levels[2] = g_appStats.fuelLevel3D;
 8006e36:	4b8e      	ldr	r3, [pc, #568]	; (8007070 <output_data+0x1008>)
 8006e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e3a:	4b8f      	ldr	r3, [pc, #572]	; (8007078 <output_data+0x1010>)
 8006e3c:	609a      	str	r2, [r3, #8]
			compare_levels[3] = g_appStats.fuelLevel3DMin;
 8006e3e:	4b8c      	ldr	r3, [pc, #560]	; (8007070 <output_data+0x1008>)
 8006e40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e42:	4b8d      	ldr	r3, [pc, #564]	; (8007078 <output_data+0x1010>)
 8006e44:	60da      	str	r2, [r3, #12]
			compare_levels[4] = g_appStats.fuelLevel3DSame;
 8006e46:	4b8a      	ldr	r3, [pc, #552]	; (8007070 <output_data+0x1008>)
 8006e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e4a:	4b8b      	ldr	r3, [pc, #556]	; (8007078 <output_data+0x1010>)
 8006e4c:	611a      	str	r2, [r3, #16]
			compare_levels[5] = g_appStats.fuelLevelMinDiff;
 8006e4e:	4b88      	ldr	r3, [pc, #544]	; (8007070 <output_data+0x1008>)
 8006e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e52:	4b89      	ldr	r3, [pc, #548]	; (8007078 <output_data+0x1010>)
 8006e54:	615a      	str	r2, [r3, #20]

			int minDiff = -1;
 8006e56:	2301      	movs	r3, #1
 8006e58:	425b      	negs	r3, r3
 8006e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
			long minDiffLevel = -1;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	425b      	negs	r3, r3
 8006e60:	65bb      	str	r3, [r7, #88]	; 0x58
			int countDiff = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	657b      	str	r3, [r7, #84]	; 0x54

			for (int i = 0; i < COMPARE_LEVELS; i++) {
 8006e66:	2300      	movs	r3, #0
 8006e68:	653b      	str	r3, [r7, #80]	; 0x50
 8006e6a:	e04a      	b.n	8006f02 <output_data+0xe9a>
				if (compare_levels[i] >= 0) {
 8006e6c:	4b82      	ldr	r3, [pc, #520]	; (8007078 <output_data+0x1010>)
 8006e6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e70:	0092      	lsls	r2, r2, #2
 8006e72:	58d3      	ldr	r3, [r2, r3]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	db41      	blt.n	8006efc <output_data+0xe94>
					long sumDiff = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
					long level = compare_levels[i];
 8006e7c:	4b7e      	ldr	r3, [pc, #504]	; (8007078 <output_data+0x1010>)
 8006e7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e80:	0092      	lsls	r2, r2, #2
 8006e82:	58d3      	ldr	r3, [r2, r3]
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34

					for (int j = 0; j < COMPARE_LEVELS; j++) {
 8006e86:	2300      	movs	r3, #0
 8006e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e8a:	e01d      	b.n	8006ec8 <output_data+0xe60>
						if (compare_levels[j] >= 0 && i != j) {
 8006e8c:	4b7a      	ldr	r3, [pc, #488]	; (8007078 <output_data+0x1010>)
 8006e8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e90:	0092      	lsls	r2, r2, #2
 8006e92:	58d3      	ldr	r3, [r2, r3]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	db14      	blt.n	8006ec2 <output_data+0xe5a>
 8006e98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d010      	beq.n	8006ec2 <output_data+0xe5a>
							long diff = abs(compare_levels[j] - level);
 8006ea0:	4b75      	ldr	r3, [pc, #468]	; (8007078 <output_data+0x1010>)
 8006ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ea4:	0092      	lsls	r2, r2, #2
 8006ea6:	58d2      	ldr	r2, [r2, r3]
 8006ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	17da      	asrs	r2, r3, #31
 8006eae:	189b      	adds	r3, r3, r2
 8006eb0:	4053      	eors	r3, r2
 8006eb2:	633b      	str	r3, [r7, #48]	; 0x30
							sumDiff += diff;
 8006eb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	18d3      	adds	r3, r2, r3
 8006eba:	64fb      	str	r3, [r7, #76]	; 0x4c
							countDiff++;
 8006ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	657b      	str	r3, [r7, #84]	; 0x54
					for (int j = 0; j < COMPARE_LEVELS; j++) {
 8006ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eca:	2b05      	cmp	r3, #5
 8006ecc:	ddde      	ble.n	8006e8c <output_data+0xe24>
						}
					}

					if (countDiff && (minDiff == -1 || (sumDiff / countDiff) < minDiff)) {
 8006ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d013      	beq.n	8006efc <output_data+0xe94>
 8006ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	d008      	beq.n	8006eec <output_data+0xe84>
 8006eda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006edc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006ede:	f7f9 f9c1 	bl	8000264 <__divsi3>
 8006ee2:	0003      	movs	r3, r0
 8006ee4:	001a      	movs	r2, r3
 8006ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	dd07      	ble.n	8006efc <output_data+0xe94>
						minDiffLevel = level;
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	65bb      	str	r3, [r7, #88]	; 0x58
						minDiff = (sumDiff / countDiff);
 8006ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ef2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006ef4:	f7f9 f9b6 	bl	8000264 <__divsi3>
 8006ef8:	0003      	movs	r3, r0
 8006efa:	65fb      	str	r3, [r7, #92]	; 0x5c
			for (int i = 0; i < COMPARE_LEVELS; i++) {
 8006efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efe:	3301      	adds	r3, #1
 8006f00:	653b      	str	r3, [r7, #80]	; 0x50
 8006f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f04:	2b05      	cmp	r3, #5
 8006f06:	ddb1      	ble.n	8006e6c <output_data+0xe04>
					}
				}
			}

			if (minDiffLevel >= 0) {
 8006f08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da00      	bge.n	8006f10 <output_data+0xea8>
 8006f0e:	e0c2      	b.n	8007096 <output_data+0x102e>
				step = 25;
 8006f10:	2319      	movs	r3, #25
 8006f12:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = minDiffLevel;
 8006f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f16:	22c4      	movs	r2, #196	; 0xc4
 8006f18:	2118      	movs	r1, #24
 8006f1a:	1852      	adds	r2, r2, r1
 8006f1c:	19d2      	adds	r2, r2, r7
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	e0b9      	b.n	8007096 <output_data+0x102e>
			}
		} else if (g_config.filterMode == DIRECT_MODE) {
 8006f22:	4b54      	ldr	r3, [pc, #336]	; (8007074 <output_data+0x100c>)
 8006f24:	7ddb      	ldrb	r3, [r3, #23]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d102      	bne.n	8006f30 <output_data+0xec8>
			//keep value as same current
			step = 3;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	667b      	str	r3, [r7, #100]	; 0x64
 8006f2e:	e0b2      	b.n	8007096 <output_data+0x102e>
		} else if (g_config.filterMode == MIN_MODE) {
 8006f30:	4b50      	ldr	r3, [pc, #320]	; (8007074 <output_data+0x100c>)
 8006f32:	7ddb      	ldrb	r3, [r3, #23]
 8006f34:	2b03      	cmp	r3, #3
 8006f36:	d11e      	bne.n	8006f76 <output_data+0xf0e>
			//keep value as same current
			step = 4;
 8006f38:	2304      	movs	r3, #4
 8006f3a:	667b      	str	r3, [r7, #100]	; 0x64
			if (g_appStats.fuelLevelMinDiff != -1) {
 8006f3c:	4b4c      	ldr	r3, [pc, #304]	; (8007070 <output_data+0x1008>)
 8006f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f40:	3301      	adds	r3, #1
 8006f42:	d009      	beq.n	8006f58 <output_data+0xef0>
				fuelLevel = g_appStats.fuelLevelMinDiff;
 8006f44:	4b4a      	ldr	r3, [pc, #296]	; (8007070 <output_data+0x1008>)
 8006f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f48:	22c4      	movs	r2, #196	; 0xc4
 8006f4a:	2118      	movs	r1, #24
 8006f4c:	1852      	adds	r2, r2, r1
 8006f4e:	19d2      	adds	r2, r2, r7
 8006f50:	6013      	str	r3, [r2, #0]
				step = 41;
 8006f52:	2329      	movs	r3, #41	; 0x29
 8006f54:	667b      	str	r3, [r7, #100]	; 0x64
 8006f56:	e09e      	b.n	8007096 <output_data+0x102e>
			} else if (g_appStats.fuelLevelAvg != -1) {
 8006f58:	4b45      	ldr	r3, [pc, #276]	; (8007070 <output_data+0x1008>)
 8006f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	d100      	bne.n	8006f62 <output_data+0xefa>
 8006f60:	e099      	b.n	8007096 <output_data+0x102e>
				step = 42;
 8006f62:	232a      	movs	r3, #42	; 0x2a
 8006f64:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevelAvg;
 8006f66:	4b42      	ldr	r3, [pc, #264]	; (8007070 <output_data+0x1008>)
 8006f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6a:	22c4      	movs	r2, #196	; 0xc4
 8006f6c:	2118      	movs	r1, #24
 8006f6e:	1852      	adds	r2, r2, r1
 8006f70:	19d2      	adds	r2, r2, r7
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	e08f      	b.n	8007096 <output_data+0x102e>
			}
		} else if (g_config.filterMode == ACCERLATE_MODE_2) {
 8006f76:	4b3f      	ldr	r3, [pc, #252]	; (8007074 <output_data+0x100c>)
 8006f78:	7ddb      	ldrb	r3, [r3, #23]
 8006f7a:	2b05      	cmp	r3, #5
 8006f7c:	d147      	bne.n	800700e <output_data+0xfa6>
			step = 5;
 8006f7e:	2305      	movs	r3, #5
 8006f80:	667b      	str	r3, [r7, #100]	; 0x64
			if (g_appStats.fuelLevel3DSame != -1) {
 8006f82:	4b3b      	ldr	r3, [pc, #236]	; (8007070 <output_data+0x1008>)
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	3301      	adds	r3, #1
 8006f88:	d009      	beq.n	8006f9e <output_data+0xf36>
				step = 51;
 8006f8a:	2333      	movs	r3, #51	; 0x33
 8006f8c:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DSame;
 8006f8e:	4b38      	ldr	r3, [pc, #224]	; (8007070 <output_data+0x1008>)
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	22c4      	movs	r2, #196	; 0xc4
 8006f94:	2118      	movs	r1, #24
 8006f96:	1852      	adds	r2, r2, r1
 8006f98:	19d2      	adds	r2, r2, r7
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	e07b      	b.n	8007096 <output_data+0x102e>
			} else if (g_appStats.fuelLevel3DMin != -1) {
 8006f9e:	4b34      	ldr	r3, [pc, #208]	; (8007070 <output_data+0x1008>)
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	d009      	beq.n	8006fba <output_data+0xf52>
				step = 52;
 8006fa6:	2334      	movs	r3, #52	; 0x34
 8006fa8:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DMin;
 8006faa:	4b31      	ldr	r3, [pc, #196]	; (8007070 <output_data+0x1008>)
 8006fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fae:	22c4      	movs	r2, #196	; 0xc4
 8006fb0:	2118      	movs	r1, #24
 8006fb2:	1852      	adds	r2, r2, r1
 8006fb4:	19d2      	adds	r2, r2, r7
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	e06d      	b.n	8007096 <output_data+0x102e>
			} else if (g_appStats.fuelLevel3D != -1) {
 8006fba:	4b2d      	ldr	r3, [pc, #180]	; (8007070 <output_data+0x1008>)
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	d009      	beq.n	8006fd6 <output_data+0xf6e>
				step = 53;
 8006fc2:	2335      	movs	r3, #53	; 0x35
 8006fc4:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3D;
 8006fc6:	4b2a      	ldr	r3, [pc, #168]	; (8007070 <output_data+0x1008>)
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	22c4      	movs	r2, #196	; 0xc4
 8006fcc:	2118      	movs	r1, #24
 8006fce:	1852      	adds	r2, r2, r1
 8006fd0:	19d2      	adds	r2, r2, r7
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	e05f      	b.n	8007096 <output_data+0x102e>
			} else if (g_appStats.fuelLevelMinDiff != -1) {
 8006fd6:	4b26      	ldr	r3, [pc, #152]	; (8007070 <output_data+0x1008>)
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fda:	3301      	adds	r3, #1
 8006fdc:	d009      	beq.n	8006ff2 <output_data+0xf8a>
				fuelLevel = g_appStats.fuelLevelMinDiff;
 8006fde:	4b24      	ldr	r3, [pc, #144]	; (8007070 <output_data+0x1008>)
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe2:	22c4      	movs	r2, #196	; 0xc4
 8006fe4:	2118      	movs	r1, #24
 8006fe6:	1852      	adds	r2, r2, r1
 8006fe8:	19d2      	adds	r2, r2, r7
 8006fea:	6013      	str	r3, [r2, #0]
				step = 54;
 8006fec:	2336      	movs	r3, #54	; 0x36
 8006fee:	667b      	str	r3, [r7, #100]	; 0x64
 8006ff0:	e051      	b.n	8007096 <output_data+0x102e>
			} else if (g_appStats.fuelLevelAvg != -1) {
 8006ff2:	4b1f      	ldr	r3, [pc, #124]	; (8007070 <output_data+0x1008>)
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	d04d      	beq.n	8007096 <output_data+0x102e>
				step = 55;
 8006ffa:	2337      	movs	r3, #55	; 0x37
 8006ffc:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevelAvg;
 8006ffe:	4b1c      	ldr	r3, [pc, #112]	; (8007070 <output_data+0x1008>)
 8007000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007002:	22c4      	movs	r2, #196	; 0xc4
 8007004:	2118      	movs	r1, #24
 8007006:	1852      	adds	r2, r2, r1
 8007008:	19d2      	adds	r2, r2, r7
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	e043      	b.n	8007096 <output_data+0x102e>
			}
		} else if (g_config.filterMode == ACCERLATE_MODE) {
 800700e:	4b19      	ldr	r3, [pc, #100]	; (8007074 <output_data+0x100c>)
 8007010:	7ddb      	ldrb	r3, [r3, #23]
 8007012:	2b06      	cmp	r3, #6
 8007014:	d13f      	bne.n	8007096 <output_data+0x102e>
			step = 6;
 8007016:	2306      	movs	r3, #6
 8007018:	667b      	str	r3, [r7, #100]	; 0x64
			if (g_appStats.fuelLevel3DSame != -1) {
 800701a:	4b15      	ldr	r3, [pc, #84]	; (8007070 <output_data+0x1008>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	3301      	adds	r3, #1
 8007020:	d009      	beq.n	8007036 <output_data+0xfce>
				step = 61;
 8007022:	233d      	movs	r3, #61	; 0x3d
 8007024:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DSame;
 8007026:	4b12      	ldr	r3, [pc, #72]	; (8007070 <output_data+0x1008>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	22c4      	movs	r2, #196	; 0xc4
 800702c:	2118      	movs	r1, #24
 800702e:	1852      	adds	r2, r2, r1
 8007030:	19d2      	adds	r2, r2, r7
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	e02f      	b.n	8007096 <output_data+0x102e>
			} else if (g_appStats.fuelLevel3DMin != -1) {
 8007036:	4b0e      	ldr	r3, [pc, #56]	; (8007070 <output_data+0x1008>)
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	3301      	adds	r3, #1
 800703c:	d009      	beq.n	8007052 <output_data+0xfea>
				step = 62;
 800703e:	233e      	movs	r3, #62	; 0x3e
 8007040:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DMin;
 8007042:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <output_data+0x1008>)
 8007044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007046:	22c4      	movs	r2, #196	; 0xc4
 8007048:	2118      	movs	r1, #24
 800704a:	1852      	adds	r2, r2, r1
 800704c:	19d2      	adds	r2, r2, r7
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	e021      	b.n	8007096 <output_data+0x102e>
			} else if (g_appStats.fuelLevel3D != -1) {
 8007052:	4b07      	ldr	r3, [pc, #28]	; (8007070 <output_data+0x1008>)
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	3301      	adds	r3, #1
 8007058:	d010      	beq.n	800707c <output_data+0x1014>
				step = 63;
 800705a:	233f      	movs	r3, #63	; 0x3f
 800705c:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3D;
 800705e:	4b04      	ldr	r3, [pc, #16]	; (8007070 <output_data+0x1008>)
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	22c4      	movs	r2, #196	; 0xc4
 8007064:	2118      	movs	r1, #24
 8007066:	1852      	adds	r2, r2, r1
 8007068:	19d2      	adds	r2, r2, r7
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	e013      	b.n	8007096 <output_data+0x102e>
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	200004f4 	.word	0x200004f4
 8007074:	200004d8 	.word	0x200004d8
 8007078:	200000a0 	.word	0x200000a0
			} else if (g_appStats.fuelLevelAvg != -1) {
 800707c:	4bab      	ldr	r3, [pc, #684]	; (800732c <output_data+0x12c4>)
 800707e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007080:	3301      	adds	r3, #1
 8007082:	d008      	beq.n	8007096 <output_data+0x102e>
				step = 63;
 8007084:	233f      	movs	r3, #63	; 0x3f
 8007086:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevelAvg;
 8007088:	4ba8      	ldr	r3, [pc, #672]	; (800732c <output_data+0x12c4>)
 800708a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800708c:	22c4      	movs	r2, #196	; 0xc4
 800708e:	2118      	movs	r1, #24
 8007090:	1852      	adds	r2, r2, r1
 8007092:	19d2      	adds	r2, r2, r7
 8007094:	6013      	str	r3, [r2, #0]
			}
		} else { //delay mode
			//direct mode
		}

		if (ulSecCount >= (SKS_TRUNC_ERROR_SEC * 2)) {
 8007096:	4ba6      	ldr	r3, [pc, #664]	; (8007330 <output_data+0x12c8>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b09      	cmp	r3, #9
 800709c:	d800      	bhi.n	80070a0 <output_data+0x1038>
 800709e:	e13c      	b.n	800731a <output_data+0x12b2>
			if (g_appStats.debugOn == 1) {
 80070a0:	4ba2      	ldr	r3, [pc, #648]	; (800732c <output_data+0x12c4>)
 80070a2:	224d      	movs	r2, #77	; 0x4d
 80070a4:	5c9b      	ldrb	r3, [r3, r2]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d157      	bne.n	800715a <output_data+0x10f2>
				if (ulSecCount != lastSentToTracker) {
 80070aa:	4ba1      	ldr	r3, [pc, #644]	; (8007330 <output_data+0x12c8>)
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4ba1      	ldr	r3, [pc, #644]	; (8007334 <output_data+0x12cc>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d100      	bne.n	80070b8 <output_data+0x1050>
 80070b6:	e130      	b.n	800731a <output_data+0x12b2>
					xprintf("F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%d FU=%u EM=%u x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d step=%d T=%d E=%d\r\n",
 80070b8:	4b9c      	ldr	r3, [pc, #624]	; (800732c <output_data+0x12c4>)
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	469b      	mov	fp, r3
 80070be:	4b9b      	ldr	r3, [pc, #620]	; (800732c <output_data+0x12c4>)
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	4b99      	ldr	r3, [pc, #612]	; (800732c <output_data+0x12c4>)
 80070c6:	69d9      	ldr	r1, [r3, #28]
 80070c8:	6139      	str	r1, [r7, #16]
 80070ca:	4b98      	ldr	r3, [pc, #608]	; (800732c <output_data+0x12c4>)
 80070cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80070ce:	4b97      	ldr	r3, [pc, #604]	; (800732c <output_data+0x12c4>)
 80070d0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80070d2:	4b96      	ldr	r3, [pc, #600]	; (800732c <output_data+0x12c4>)
 80070d4:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 80070d6:	4b95      	ldr	r3, [pc, #596]	; (800732c <output_data+0x12c4>)
 80070d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80070da:	4684      	mov	ip, r0
 80070dc:	4b93      	ldr	r3, [pc, #588]	; (800732c <output_data+0x12c4>)
 80070de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80070e0:	4680      	mov	r8, r0
 80070e2:	4b95      	ldr	r3, [pc, #596]	; (8007338 <output_data+0x12d0>)
 80070e4:	68d8      	ldr	r0, [r3, #12]
 80070e6:	4681      	mov	r9, r0
 80070e8:	4b93      	ldr	r3, [pc, #588]	; (8007338 <output_data+0x12d0>)
 80070ea:	6918      	ldr	r0, [r3, #16]
 80070ec:	4682      	mov	sl, r0
 80070ee:	4b93      	ldr	r3, [pc, #588]	; (800733c <output_data+0x12d4>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	4b8d      	ldr	r3, [pc, #564]	; (800732c <output_data+0x12c4>)
 80070f6:	6e19      	ldr	r1, [r3, #96]	; 0x60
							g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq, fuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3D,
							g_appStats.fuelLevel3DSame, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_config.fullValue, g_config.emptyValue, roll,
							pitch, yaw, idx3D, count3D, diff3D, step, g_appStats.internalTemp, g_appStats.errorState);
 80070f8:	4a8c      	ldr	r2, [pc, #560]	; (800732c <output_data+0x12c4>)
 80070fa:	2365      	movs	r3, #101	; 0x65
 80070fc:	5cd3      	ldrb	r3, [r2, r3]
					xprintf("F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%d FU=%u EM=%u x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d step=%d T=%d E=%d\r\n",
 80070fe:	4890      	ldr	r0, [pc, #576]	; (8007340 <output_data+0x12d8>)
 8007100:	9310      	str	r3, [sp, #64]	; 0x40
 8007102:	910f      	str	r1, [sp, #60]	; 0x3c
 8007104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007106:	930e      	str	r3, [sp, #56]	; 0x38
 8007108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800710a:	930d      	str	r3, [sp, #52]	; 0x34
 800710c:	2384      	movs	r3, #132	; 0x84
 800710e:	18fb      	adds	r3, r7, r3
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	930c      	str	r3, [sp, #48]	; 0x30
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	920b      	str	r2, [sp, #44]	; 0x2c
 8007118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711a:	930a      	str	r3, [sp, #40]	; 0x28
 800711c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800711e:	9309      	str	r3, [sp, #36]	; 0x24
 8007120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007122:	9308      	str	r3, [sp, #32]
 8007124:	4652      	mov	r2, sl
 8007126:	9207      	str	r2, [sp, #28]
 8007128:	464a      	mov	r2, r9
 800712a:	9206      	str	r2, [sp, #24]
 800712c:	4642      	mov	r2, r8
 800712e:	9205      	str	r2, [sp, #20]
 8007130:	4662      	mov	r2, ip
 8007132:	9204      	str	r2, [sp, #16]
 8007134:	9603      	str	r6, [sp, #12]
 8007136:	9502      	str	r5, [sp, #8]
 8007138:	9401      	str	r4, [sp, #4]
 800713a:	24c4      	movs	r4, #196	; 0xc4
 800713c:	2318      	movs	r3, #24
 800713e:	18e3      	adds	r3, r4, r3
 8007140:	19dc      	adds	r4, r3, r7
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4659      	mov	r1, fp
 800714c:	f001 f962 	bl	8008414 <xprintf>
					lastSentToTracker = ulSecCount;
 8007150:	4b77      	ldr	r3, [pc, #476]	; (8007330 <output_data+0x12c8>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	4b77      	ldr	r3, [pc, #476]	; (8007334 <output_data+0x12cc>)
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e0df      	b.n	800731a <output_data+0x12b2>
				}
			} else {
				if (g_config.interval && (ulSecCount - lastSentToTracker) >= g_config.interval) {
 800715a:	4b77      	ldr	r3, [pc, #476]	; (8007338 <output_data+0x12d0>)
 800715c:	7e9b      	ldrb	r3, [r3, #26]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d100      	bne.n	8007164 <output_data+0x10fc>
 8007162:	e0da      	b.n	800731a <output_data+0x12b2>
 8007164:	4b72      	ldr	r3, [pc, #456]	; (8007330 <output_data+0x12c8>)
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b72      	ldr	r3, [pc, #456]	; (8007334 <output_data+0x12cc>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	4a72      	ldr	r2, [pc, #456]	; (8007338 <output_data+0x12d0>)
 8007170:	7e92      	ldrb	r2, [r2, #26]
 8007172:	4293      	cmp	r3, r2
 8007174:	d200      	bcs.n	8007178 <output_data+0x1110>
 8007176:	e0d0      	b.n	800731a <output_data+0x12b2>
					if (fuelLevel < 0) {
 8007178:	22c4      	movs	r2, #196	; 0xc4
 800717a:	2118      	movs	r1, #24
 800717c:	1853      	adds	r3, r2, r1
 800717e:	19db      	adds	r3, r3, r7
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	da03      	bge.n	800718e <output_data+0x1126>
						fuelLevel = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	1852      	adds	r2, r2, r1
 800718a:	19d2      	adds	r2, r2, r7
 800718c:	6013      	str	r3, [r2, #0]

					if (g_appStats.fuelLevel < 0) {
						g_appStats.fuelLevel = 0;
					}

					if (g_appStats.fuelLevelAvg < 0) {
 800718e:	4b67      	ldr	r3, [pc, #412]	; (800732c <output_data+0x12c4>)
 8007190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007192:	2b00      	cmp	r3, #0
 8007194:	da02      	bge.n	800719c <output_data+0x1134>
						g_appStats.fuelLevelAvg = 0;
 8007196:	4b65      	ldr	r3, [pc, #404]	; (800732c <output_data+0x12c4>)
 8007198:	2200      	movs	r2, #0
 800719a:	635a      	str	r2, [r3, #52]	; 0x34
					}

					if (g_appStats.fuelLevel3DMin < 0) {
 800719c:	4b63      	ldr	r3, [pc, #396]	; (800732c <output_data+0x12c4>)
 800719e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	da02      	bge.n	80071aa <output_data+0x1142>
						g_appStats.fuelLevel3DMin = 0;
 80071a4:	4b61      	ldr	r3, [pc, #388]	; (800732c <output_data+0x12c4>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	63da      	str	r2, [r3, #60]	; 0x3c
					}

					if (g_appStats.fuelLevel3DSame < 0) {
 80071aa:	4b60      	ldr	r3, [pc, #384]	; (800732c <output_data+0x12c4>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	da02      	bge.n	80071b8 <output_data+0x1150>
						g_appStats.fuelLevel3DSame = 0;
 80071b2:	4b5e      	ldr	r3, [pc, #376]	; (800732c <output_data+0x12c4>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	641a      	str	r2, [r3, #64]	; 0x40
					}

					if (g_appStats.fuelLevel3D < 0) {
 80071b8:	4b5c      	ldr	r3, [pc, #368]	; (800732c <output_data+0x12c4>)
 80071ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071bc:	2b00      	cmp	r3, #0
 80071be:	da02      	bge.n	80071c6 <output_data+0x115e>
						g_appStats.fuelLevel3D = 0;
 80071c0:	4b5a      	ldr	r3, [pc, #360]	; (800732c <output_data+0x12c4>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	639a      	str	r2, [r3, #56]	; 0x38
					}

					if (g_appStats.debugOn == 99) {
 80071c6:	4b59      	ldr	r3, [pc, #356]	; (800732c <output_data+0x12c4>)
 80071c8:	224d      	movs	r2, #77	; 0x4d
 80071ca:	5c9b      	ldrb	r3, [r3, r2]
 80071cc:	2b63      	cmp	r3, #99	; 0x63
 80071ce:	d156      	bne.n	800727e <output_data+0x1216>
						xprintf(
 80071d0:	4b56      	ldr	r3, [pc, #344]	; (800732c <output_data+0x12c4>)
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	4699      	mov	r9, r3
 80071d6:	4b55      	ldr	r3, [pc, #340]	; (800732c <output_data+0x12c4>)
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	469a      	mov	sl, r3
 80071dc:	4b53      	ldr	r3, [pc, #332]	; (800732c <output_data+0x12c4>)
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	469b      	mov	fp, r3
 80071e2:	4b52      	ldr	r3, [pc, #328]	; (800732c <output_data+0x12c4>)
 80071e4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80071e6:	4b51      	ldr	r3, [pc, #324]	; (800732c <output_data+0x12c4>)
 80071e8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80071ea:	4b50      	ldr	r3, [pc, #320]	; (800732c <output_data+0x12c4>)
 80071ec:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80071ee:	4b4f      	ldr	r3, [pc, #316]	; (800732c <output_data+0x12c4>)
 80071f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f2:	469c      	mov	ip, r3
 80071f4:	4b4d      	ldr	r3, [pc, #308]	; (800732c <output_data+0x12c4>)
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	4698      	mov	r8, r3
 80071fa:	4b50      	ldr	r3, [pc, #320]	; (800733c <output_data+0x12d4>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	617b      	str	r3, [r7, #20]
								"F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d tO=%d fM=%d dX=%d dY=%d ST=%d T=%d E=%d\r\n",
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq, fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg,
								g_appStats.directFuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw, idx3D, count3D, diff3D,
								g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 8007200:	4b4d      	ldr	r3, [pc, #308]	; (8007338 <output_data+0x12d0>)
 8007202:	8a9b      	ldrh	r3, [r3, #20]
						xprintf(
 8007204:	613b      	str	r3, [r7, #16]
								g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 8007206:	4b4c      	ldr	r3, [pc, #304]	; (8007338 <output_data+0x12d0>)
 8007208:	7ddb      	ldrb	r3, [r3, #23]
						xprintf(
 800720a:	60fb      	str	r3, [r7, #12]
								g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 800720c:	4b4a      	ldr	r3, [pc, #296]	; (8007338 <output_data+0x12d0>)
 800720e:	7e1b      	ldrb	r3, [r3, #24]
						xprintf(
 8007210:	60bb      	str	r3, [r7, #8]
								g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 8007212:	4b49      	ldr	r3, [pc, #292]	; (8007338 <output_data+0x12d0>)
 8007214:	7e5b      	ldrb	r3, [r3, #25]
						xprintf(
 8007216:	607b      	str	r3, [r7, #4]
 8007218:	4b44      	ldr	r3, [pc, #272]	; (800732c <output_data+0x12c4>)
 800721a:	6e19      	ldr	r1, [r3, #96]	; 0x60
								g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 800721c:	4a43      	ldr	r2, [pc, #268]	; (800732c <output_data+0x12c4>)
 800721e:	2365      	movs	r3, #101	; 0x65
 8007220:	5cd3      	ldrb	r3, [r2, r3]
						xprintf(
 8007222:	4848      	ldr	r0, [pc, #288]	; (8007344 <output_data+0x12dc>)
 8007224:	9312      	str	r3, [sp, #72]	; 0x48
 8007226:	9111      	str	r1, [sp, #68]	; 0x44
 8007228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800722a:	9310      	str	r3, [sp, #64]	; 0x40
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	920f      	str	r2, [sp, #60]	; 0x3c
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	920e      	str	r2, [sp, #56]	; 0x38
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	920d      	str	r2, [sp, #52]	; 0x34
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	920c      	str	r2, [sp, #48]	; 0x30
 800723c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800723e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007240:	2384      	movs	r3, #132	; 0x84
 8007242:	18fb      	adds	r3, r7, r3
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	930a      	str	r3, [sp, #40]	; 0x28
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	9309      	str	r3, [sp, #36]	; 0x24
 800724c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724e:	9308      	str	r3, [sp, #32]
 8007250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007252:	9307      	str	r3, [sp, #28]
 8007254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007256:	9306      	str	r3, [sp, #24]
 8007258:	4643      	mov	r3, r8
 800725a:	9305      	str	r3, [sp, #20]
 800725c:	4663      	mov	r3, ip
 800725e:	9304      	str	r3, [sp, #16]
 8007260:	9603      	str	r6, [sp, #12]
 8007262:	9502      	str	r5, [sp, #8]
 8007264:	9401      	str	r4, [sp, #4]
 8007266:	23c4      	movs	r3, #196	; 0xc4
 8007268:	2218      	movs	r2, #24
 800726a:	189b      	adds	r3, r3, r2
 800726c:	19db      	adds	r3, r3, r7
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	465b      	mov	r3, fp
 8007274:	4652      	mov	r2, sl
 8007276:	4649      	mov	r1, r9
 8007278:	f001 f8cc 	bl	8008414 <xprintf>
 800727c:	e047      	b.n	800730e <output_data+0x12a6>
					} else {
						xprintf(
 800727e:	4b2b      	ldr	r3, [pc, #172]	; (800732c <output_data+0x12c4>)
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	469a      	mov	sl, r3
 8007284:	4b29      	ldr	r3, [pc, #164]	; (800732c <output_data+0x12c4>)
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	469b      	mov	fp, r3
 800728a:	4b28      	ldr	r3, [pc, #160]	; (800732c <output_data+0x12c4>)
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	4b26      	ldr	r3, [pc, #152]	; (800732c <output_data+0x12c4>)
 8007292:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007294:	4b25      	ldr	r3, [pc, #148]	; (800732c <output_data+0x12c4>)
 8007296:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007298:	4b24      	ldr	r3, [pc, #144]	; (800732c <output_data+0x12c4>)
 800729a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800729c:	4b23      	ldr	r3, [pc, #140]	; (800732c <output_data+0x12c4>)
 800729e:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80072a0:	4b22      	ldr	r3, [pc, #136]	; (800732c <output_data+0x12c4>)
 80072a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072a4:	4694      	mov	ip, r2
 80072a6:	4b21      	ldr	r3, [pc, #132]	; (800732c <output_data+0x12c4>)
 80072a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072aa:	4690      	mov	r8, r2
								"F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d T=%d E=%d FU=%x EM=%x fM=%d V=%s ST=%d\r\n",
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq, fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg,
								g_appStats.directFuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw, g_appStats.internalTemp,
								g_appStats.errorState, g_config.fullValue, g_config.emptyValue, g_config.filterMode, VERSION_NO, step);
 80072ac:	4b1f      	ldr	r3, [pc, #124]	; (800732c <output_data+0x12c4>)
 80072ae:	2265      	movs	r2, #101	; 0x65
 80072b0:	5c9b      	ldrb	r3, [r3, r2]
						xprintf(
 80072b2:	613b      	str	r3, [r7, #16]
 80072b4:	4b20      	ldr	r3, [pc, #128]	; (8007338 <output_data+0x12d0>)
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	4b1f      	ldr	r3, [pc, #124]	; (8007338 <output_data+0x12d0>)
 80072ba:	6918      	ldr	r0, [r3, #16]
 80072bc:	4681      	mov	r9, r0
								g_appStats.errorState, g_config.fullValue, g_config.emptyValue, g_config.filterMode, VERSION_NO, step);
 80072be:	4b1e      	ldr	r3, [pc, #120]	; (8007338 <output_data+0x12d0>)
 80072c0:	7ddb      	ldrb	r3, [r3, #23]
						xprintf(
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	4820      	ldr	r0, [pc, #128]	; (8007348 <output_data+0x12e0>)
 80072c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80072ca:	4b20      	ldr	r3, [pc, #128]	; (800734c <output_data+0x12e4>)
 80072cc:	930e      	str	r3, [sp, #56]	; 0x38
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	930d      	str	r3, [sp, #52]	; 0x34
 80072d2:	464b      	mov	r3, r9
 80072d4:	930c      	str	r3, [sp, #48]	; 0x30
 80072d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	920a      	str	r2, [sp, #40]	; 0x28
 80072dc:	4642      	mov	r2, r8
 80072de:	9209      	str	r2, [sp, #36]	; 0x24
 80072e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e2:	9308      	str	r3, [sp, #32]
 80072e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e6:	9307      	str	r3, [sp, #28]
 80072e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ea:	9306      	str	r3, [sp, #24]
 80072ec:	4662      	mov	r2, ip
 80072ee:	9205      	str	r2, [sp, #20]
 80072f0:	9604      	str	r6, [sp, #16]
 80072f2:	9503      	str	r5, [sp, #12]
 80072f4:	9402      	str	r4, [sp, #8]
 80072f6:	9101      	str	r1, [sp, #4]
 80072f8:	22c4      	movs	r2, #196	; 0xc4
 80072fa:	2318      	movs	r3, #24
 80072fc:	18d3      	adds	r3, r2, r3
 80072fe:	19da      	adds	r2, r3, r7
 8007300:	6813      	ldr	r3, [r2, #0]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	465a      	mov	r2, fp
 8007308:	4651      	mov	r1, sl
 800730a:	f001 f883 	bl	8008414 <xprintf>
					}

					lastSentToTracker = ulSecCount;
 800730e:	4b08      	ldr	r3, [pc, #32]	; (8007330 <output_data+0x12c8>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <output_data+0x12cc>)
 8007314:	601a      	str	r2, [r3, #0]
 8007316:	e000      	b.n	800731a <output_data+0x12b2>
		return;
 8007318:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
 800731a:	46bd      	mov	sp, r7
 800731c:	b039      	add	sp, #228	; 0xe4
 800731e:	bcf0      	pop	{r4, r5, r6, r7}
 8007320:	46bb      	mov	fp, r7
 8007322:	46b2      	mov	sl, r6
 8007324:	46a9      	mov	r9, r5
 8007326:	46a0      	mov	r8, r4
 8007328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800732a:	46c0      	nop			; (mov r8, r8)
 800732c:	200004f4 	.word	0x200004f4
 8007330:	200004d0 	.word	0x200004d0
 8007334:	20000560 	.word	0x20000560
 8007338:	200004d8 	.word	0x200004d8
 800733c:	20000f42 	.word	0x20000f42
 8007340:	0800cff4 	.word	0x0800cff4
 8007344:	0800d070 	.word	0x0800d070
 8007348:	0800d10c 	.word	0x0800d10c
 800734c:	0800d194 	.word	0x0800d194

08007350 <LSM6DS3_get_angle>:

static void LSM6DS3_get_angle(void){
 8007350:	b580      	push	{r7, lr}
 8007352:	b0c0      	sub	sp, #256	; 0x100
 8007354:	af00      	add	r7, sp, #0
	char buf[255]= {0};
 8007356:	4b23      	ldr	r3, [pc, #140]	; (80073e4 <LSM6DS3_get_angle+0x94>)
 8007358:	3301      	adds	r3, #1
 800735a:	33ff      	adds	r3, #255	; 0xff
 800735c:	19db      	adds	r3, r3, r7
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	3304      	adds	r3, #4
 8007364:	22fb      	movs	r2, #251	; 0xfb
 8007366:	2100      	movs	r1, #0
 8007368:	0018      	movs	r0, r3
 800736a:	f002 f99c 	bl	80096a6 <memset>

	if(Kalman_GetFlag()) {
 800736e:	f7fc fa6b 	bl	8003848 <Kalman_GetFlag>
 8007372:	1e03      	subs	r3, r0, #0
 8007374:	d032      	beq.n	80073dc <LSM6DS3_get_angle+0x8c>
		//xprintf("%s-%d\r\n",__func__,__LINE__);
		if(LSM6DS3_IMU_GetMeasurements()==LSM6DS3_OK){
 8007376:	f7fc fdef 	bl	8003f58 <LSM6DS3_IMU_GetMeasurements>
 800737a:	1e03      	subs	r3, r0, #0
 800737c:	d101      	bne.n	8007382 <LSM6DS3_get_angle+0x32>
			Execute_Kalman_Filter();
 800737e:	f7fc f849 	bl	8003414 <Execute_Kalman_Filter>
		}

		if (g_appStats.last_send_data < ulMiliCount) {
 8007382:	4b19      	ldr	r3, [pc, #100]	; (80073e8 <LSM6DS3_get_angle+0x98>)
 8007384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007386:	4b19      	ldr	r3, [pc, #100]	; (80073ec <LSM6DS3_get_angle+0x9c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d224      	bcs.n	80073d8 <LSM6DS3_get_angle+0x88>
			memset(buf, 0, sizeof(buf));
 800738e:	003b      	movs	r3, r7
 8007390:	22ff      	movs	r2, #255	; 0xff
 8007392:	2100      	movs	r1, #0
 8007394:	0018      	movs	r0, r3
 8007396:	f002 f986 	bl	80096a6 <memset>
			g_appStats.lsm6ds3.roll = Kalman_GetRoll();
 800739a:	f7fc fa2f 	bl	80037fc <Kalman_GetRoll>
 800739e:	1c02      	adds	r2, r0, #0
 80073a0:	4b11      	ldr	r3, [pc, #68]	; (80073e8 <LSM6DS3_get_angle+0x98>)
 80073a2:	601a      	str	r2, [r3, #0]
			g_appStats.lsm6ds3.pitch = Kalman_GetPitch();
 80073a4:	f7fc fa20 	bl	80037e8 <Kalman_GetPitch>
 80073a8:	1c02      	adds	r2, r0, #0
 80073aa:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <LSM6DS3_get_angle+0x98>)
 80073ac:	605a      	str	r2, [r3, #4]
			g_appStats.lsm6ds3.yaw = Kalman_Getyaw();
 80073ae:	f7fc fa2f 	bl	8003810 <Kalman_Getyaw>
 80073b2:	1c02      	adds	r2, r0, #0
 80073b4:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <LSM6DS3_get_angle+0x98>)
 80073b6:	609a      	str	r2, [r3, #8]
			g_appStats.lsm6ds3.T = LSM6DS3_Temperature_Int16();
 80073b8:	f7fc fe74 	bl	80040a4 <LSM6DS3_Temperature_Int16>
 80073bc:	0003      	movs	r3, r0
 80073be:	0018      	movs	r0, r3
 80073c0:	f7f9 ff44 	bl	800124c <__aeabi_i2f>
 80073c4:	1c02      	adds	r2, r0, #0
 80073c6:	4b08      	ldr	r3, [pc, #32]	; (80073e8 <LSM6DS3_get_angle+0x98>)
 80073c8:	60da      	str	r2, [r3, #12]
					(int) g_appStats.lsm6ds3.roll,
					(int) g_appStats.lsm6ds3.pitch,
					(int) g_appStats.lsm6ds3.yaw, (int) g_appStats.lsm6ds3.T);
#endif

			g_appStats.last_send_data = ulMiliCount + 500;
 80073ca:	4b08      	ldr	r3, [pc, #32]	; (80073ec <LSM6DS3_get_angle+0x9c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	33f5      	adds	r3, #245	; 0xf5
 80073d0:	33ff      	adds	r3, #255	; 0xff
 80073d2:	001a      	movs	r2, r3
 80073d4:	4b04      	ldr	r3, [pc, #16]	; (80073e8 <LSM6DS3_get_angle+0x98>)
 80073d6:	655a      	str	r2, [r3, #84]	; 0x54
		}

		Kalman_ClearFlag();
 80073d8:	f7fc fa40 	bl	800385c <Kalman_ClearFlag>
	}
}
 80073dc:	46c0      	nop			; (mov r8, r8)
 80073de:	46bd      	mov	sp, r7
 80073e0:	b040      	add	sp, #256	; 0x100
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	ffffff00 	.word	0xffffff00
 80073e8:	200004f4 	.word	0x200004f4
 80073ec:	200004d4 	.word	0x200004d4

080073f0 <MX_TIM2_Init>:

static void MX_TIM2_Init(void) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80073f6:	2314      	movs	r3, #20
 80073f8:	18fb      	adds	r3, r7, r3
 80073fa:	0018      	movs	r0, r3
 80073fc:	230c      	movs	r3, #12
 80073fe:	001a      	movs	r2, r3
 8007400:	2100      	movs	r1, #0
 8007402:	f002 f950 	bl	80096a6 <memset>
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8007406:	1d3b      	adds	r3, r7, #4
 8007408:	0018      	movs	r0, r3
 800740a:	2310      	movs	r3, #16
 800740c:	001a      	movs	r2, r3
 800740e:	2100      	movs	r1, #0
 8007410:	f002 f949 	bl	80096a6 <memset>

	htim2.Instance = TIM2;
 8007414:	4b23      	ldr	r3, [pc, #140]	; (80074a4 <MX_TIM2_Init+0xb4>)
 8007416:	2280      	movs	r2, #128	; 0x80
 8007418:	05d2      	lsls	r2, r2, #23
 800741a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800741c:	4b21      	ldr	r3, [pc, #132]	; (80074a4 <MX_TIM2_Init+0xb4>)
 800741e:	2200      	movs	r2, #0
 8007420:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007422:	4b20      	ldr	r3, [pc, #128]	; (80074a4 <MX_TIM2_Init+0xb4>)
 8007424:	2200      	movs	r2, #0
 8007426:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8007428:	4b1e      	ldr	r3, [pc, #120]	; (80074a4 <MX_TIM2_Init+0xb4>)
 800742a:	2201      	movs	r2, #1
 800742c:	4252      	negs	r2, r2
 800742e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007430:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <MX_TIM2_Init+0xb4>)
 8007432:	2200      	movs	r2, #0
 8007434:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007436:	4b1b      	ldr	r3, [pc, #108]	; (80074a4 <MX_TIM2_Init+0xb4>)
 8007438:	2200      	movs	r2, #0
 800743a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800743c:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <MX_TIM2_Init+0xb4>)
 800743e:	0018      	movs	r0, r3
 8007440:	f001 fa4a 	bl	80088d8 <HAL_TIM_IC_Init>
 8007444:	1e03      	subs	r3, r0, #0
 8007446:	d001      	beq.n	800744c <MX_TIM2_Init+0x5c>
		Error_Handler();
 8007448:	f000 f8f4 	bl	8007634 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800744c:	2114      	movs	r1, #20
 800744e:	187b      	adds	r3, r7, r1
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007454:	187b      	adds	r3, r7, r1
 8007456:	2200      	movs	r2, #0
 8007458:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800745a:	187a      	adds	r2, r7, r1
 800745c:	4b11      	ldr	r3, [pc, #68]	; (80074a4 <MX_TIM2_Init+0xb4>)
 800745e:	0011      	movs	r1, r2
 8007460:	0018      	movs	r0, r3
 8007462:	f002 f85d 	bl	8009520 <HAL_TIMEx_MasterConfigSynchronization>
 8007466:	1e03      	subs	r3, r0, #0
 8007468:	d001      	beq.n	800746e <MX_TIM2_Init+0x7e>
		Error_Handler();
 800746a:	f000 f8e3 	bl	8007634 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800746e:	1d3b      	adds	r3, r7, #4
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007474:	1d3b      	adds	r3, r7, #4
 8007476:	2201      	movs	r2, #1
 8007478:	605a      	str	r2, [r3, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800747a:	1d3b      	adds	r3, r7, #4
 800747c:	2200      	movs	r2, #0
 800747e:	609a      	str	r2, [r3, #8]
	sConfigIC.ICFilter = 0;
 8007480:	1d3b      	adds	r3, r7, #4
 8007482:	2200      	movs	r2, #0
 8007484:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 8007486:	1d39      	adds	r1, r7, #4
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <MX_TIM2_Init+0xb4>)
 800748a:	220c      	movs	r2, #12
 800748c:	0018      	movs	r0, r3
 800748e:	f001 fd97 	bl	8008fc0 <HAL_TIM_IC_ConfigChannel>
 8007492:	1e03      	subs	r3, r0, #0
 8007494:	d001      	beq.n	800749a <MX_TIM2_Init+0xaa>
		Error_Handler();
 8007496:	f000 f8cd 	bl	8007634 <Error_Handler>
	}

}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	46bd      	mov	sp, r7
 800749e:	b008      	add	sp, #32
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	20000484 	.word	0x20000484

080074a8 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]

	if (TIM2 == htim->Instance) {
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	2380      	movs	r3, #128	; 0x80
 80074b6:	05db      	lsls	r3, r3, #23
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d14a      	bne.n	8007552 <HAL_TIM_IC_CaptureCallback+0xaa>
		if (HAL_TIM_ACTIVE_CHANNEL_4 == htim->Channel) {
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7f1b      	ldrb	r3, [r3, #28]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d146      	bne.n	8007552 <HAL_TIM_IC_CaptureCallback+0xaa>
			if (!isFirstCap) {
 80074c4:	4b25      	ldr	r3, [pc, #148]	; (800755c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10b      	bne.n	80074e4 <HAL_TIM_IC_CaptureCallback+0x3c>
				IC4ReadValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	210c      	movs	r1, #12
 80074d0:	0018      	movs	r0, r3
 80074d2:	f001 fe19 	bl	8009108 <HAL_TIM_ReadCapturedValue>
 80074d6:	0002      	movs	r2, r0
 80074d8:	4b21      	ldr	r3, [pc, #132]	; (8007560 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80074da:	601a      	str	r2, [r3, #0]
				isFirstCap = 1;
 80074dc:	4b1f      	ldr	r3, [pc, #124]	; (800755c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80074de:	2201      	movs	r2, #1
 80074e0:	701a      	strb	r2, [r3, #0]
				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
				isFirstCap = 0;
			}
		}
	}
}
 80074e2:	e036      	b.n	8007552 <HAL_TIM_IC_CaptureCallback+0xaa>
				IC4ReadValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	210c      	movs	r1, #12
 80074e8:	0018      	movs	r0, r3
 80074ea:	f001 fe0d 	bl	8009108 <HAL_TIM_ReadCapturedValue>
 80074ee:	0002      	movs	r2, r0
 80074f0:	4b1c      	ldr	r3, [pc, #112]	; (8007564 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80074f2:	601a      	str	r2, [r3, #0]
				capture = (uint32_t) (IC4ReadValue2 - IC4ReadValue1);
 80074f4:	4b1b      	ldr	r3, [pc, #108]	; (8007564 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	4b19      	ldr	r3, [pc, #100]	; (8007560 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	1ad2      	subs	r2, r2, r3
 80074fe:	4b1a      	ldr	r3, [pc, #104]	; (8007568 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8007500:	601a      	str	r2, [r3, #0]
				g_appStats.capture = capture;
 8007502:	4b19      	ldr	r3, [pc, #100]	; (8007568 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	b299      	uxth	r1, r3
 8007508:	4b18      	ldr	r3, [pc, #96]	; (800756c <HAL_TIM_IC_CaptureCallback+0xc4>)
 800750a:	2268      	movs	r2, #104	; 0x68
 800750c:	5299      	strh	r1, [r3, r2]
					g_appStats.tim15Freq = (uint32_t) (TIM2_FREQ / capture);
 800750e:	4b16      	ldr	r3, [pc, #88]	; (8007568 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	0019      	movs	r1, r3
 8007514:	4816      	ldr	r0, [pc, #88]	; (8007570 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8007516:	f7f8 fe1b 	bl	8000150 <__udivsi3>
 800751a:	0003      	movs	r3, r0
 800751c:	001a      	movs	r2, r3
 800751e:	4b13      	ldr	r3, [pc, #76]	; (800756c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8007520:	61da      	str	r2, [r3, #28]
					g_appStats.freqUpdated = 1;
 8007522:	4b12      	ldr	r3, [pc, #72]	; (800756c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8007524:	2264      	movs	r2, #100	; 0x64
 8007526:	2101      	movs	r1, #1
 8007528:	5499      	strb	r1, [r3, r2]
				HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_4);
 800752a:	4b12      	ldr	r3, [pc, #72]	; (8007574 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800752c:	210c      	movs	r1, #12
 800752e:	0018      	movs	r0, r3
 8007530:	f001 fb5a 	bl	8008be8 <HAL_TIM_IC_Stop_IT>
				TIM2->CNT &= 0;
 8007534:	2380      	movs	r3, #128	; 0x80
 8007536:	05db      	lsls	r3, r3, #23
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	2380      	movs	r3, #128	; 0x80
 800753c:	05db      	lsls	r3, r3, #23
 800753e:	2200      	movs	r2, #0
 8007540:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8007542:	4b0c      	ldr	r3, [pc, #48]	; (8007574 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8007544:	210c      	movs	r1, #12
 8007546:	0018      	movs	r0, r3
 8007548:	f001 fa1e 	bl	8008988 <HAL_TIM_IC_Start_IT>
				isFirstCap = 0;
 800754c:	4b03      	ldr	r3, [pc, #12]	; (800755c <HAL_TIM_IC_CaptureCallback+0xb4>)
 800754e:	2200      	movs	r2, #0
 8007550:	701a      	strb	r2, [r3, #0]
}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	46bd      	mov	sp, r7
 8007556:	b002      	add	sp, #8
 8007558:	bd80      	pop	{r7, pc}
 800755a:	46c0      	nop			; (mov r8, r8)
 800755c:	20000f4c 	.word	0x20000f4c
 8007560:	20000f44 	.word	0x20000f44
 8007564:	20000f48 	.word	0x20000f48
 8007568:	20000f50 	.word	0x20000f50
 800756c:	200004f4 	.word	0x200004f4
 8007570:	03d09000 	.word	0x03d09000
 8007574:	20000484 	.word	0x20000484

08007578 <USART1_IRQHandler>:


void USART1_IRQHandler(void) {
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
	uint8_t cChar;
	if (USART1->ISR & USART_ISR_RXNE_RXFNE) {
 800757e:	4b27      	ldr	r3, [pc, #156]	; (800761c <USART1_IRQHandler+0xa4>)
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	2220      	movs	r2, #32
 8007584:	4013      	ands	r3, r2
 8007586:	d045      	beq.n	8007614 <USART1_IRQHandler+0x9c>
		USART1->ICR |= USART_RQR_RXFRQ;
 8007588:	4b24      	ldr	r3, [pc, #144]	; (800761c <USART1_IRQHandler+0xa4>)
 800758a:	6a1a      	ldr	r2, [r3, #32]
 800758c:	4b23      	ldr	r3, [pc, #140]	; (800761c <USART1_IRQHandler+0xa4>)
 800758e:	2108      	movs	r1, #8
 8007590:	430a      	orrs	r2, r1
 8007592:	621a      	str	r2, [r3, #32]
		cChar = USART1->RDR;
 8007594:	4b21      	ldr	r3, [pc, #132]	; (800761c <USART1_IRQHandler+0xa4>)
 8007596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007598:	1dfb      	adds	r3, r7, #7
 800759a:	701a      	strb	r2, [r3, #0]

		if (buff_idx >= 255 || cChar == '*') {
 800759c:	4b20      	ldr	r3, [pc, #128]	; (8007620 <USART1_IRQHandler+0xa8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2bfe      	cmp	r3, #254	; 0xfe
 80075a2:	dc03      	bgt.n	80075ac <USART1_IRQHandler+0x34>
 80075a4:	1dfb      	adds	r3, r7, #7
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b2a      	cmp	r3, #42	; 0x2a
 80075aa:	d102      	bne.n	80075b2 <USART1_IRQHandler+0x3a>
			buff_idx = 0;
 80075ac:	4b1c      	ldr	r3, [pc, #112]	; (8007620 <USART1_IRQHandler+0xa8>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
		}

		if (cChar != '\r' && cChar != '\n') {
 80075b2:	1dfb      	adds	r3, r7, #7
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b0d      	cmp	r3, #13
 80075b8:	d00e      	beq.n	80075d8 <USART1_IRQHandler+0x60>
 80075ba:	1dfb      	adds	r3, r7, #7
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b0a      	cmp	r3, #10
 80075c0:	d00a      	beq.n	80075d8 <USART1_IRQHandler+0x60>
			buff_cmd_tmp[buff_idx] = cChar;
 80075c2:	4b17      	ldr	r3, [pc, #92]	; (8007620 <USART1_IRQHandler+0xa8>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a17      	ldr	r2, [pc, #92]	; (8007624 <USART1_IRQHandler+0xac>)
 80075c8:	1df9      	adds	r1, r7, #7
 80075ca:	7809      	ldrb	r1, [r1, #0]
 80075cc:	54d1      	strb	r1, [r2, r3]
			buff_idx++;
 80075ce:	4b14      	ldr	r3, [pc, #80]	; (8007620 <USART1_IRQHandler+0xa8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	4b12      	ldr	r3, [pc, #72]	; (8007620 <USART1_IRQHandler+0xa8>)
 80075d6:	601a      	str	r2, [r3, #0]
		}

		if (cChar == '#') {
 80075d8:	1dfb      	adds	r3, r7, #7
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b23      	cmp	r3, #35	; 0x23
 80075de:	d115      	bne.n	800760c <USART1_IRQHandler+0x94>
			//copy
			memcpy(buff_cmd, buff_cmd_tmp, buff_idx);
 80075e0:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <USART1_IRQHandler+0xa8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	001a      	movs	r2, r3
 80075e6:	490f      	ldr	r1, [pc, #60]	; (8007624 <USART1_IRQHandler+0xac>)
 80075e8:	4b0f      	ldr	r3, [pc, #60]	; (8007628 <USART1_IRQHandler+0xb0>)
 80075ea:	0018      	movs	r0, r3
 80075ec:	f002 f852 	bl	8009694 <memcpy>
			buff_idx = 0;
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <USART1_IRQHandler+0xa8>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
			g_appStats.processPcCommand = 1;
 80075f6:	4b0d      	ldr	r3, [pc, #52]	; (800762c <USART1_IRQHandler+0xb4>)
 80075f8:	2266      	movs	r2, #102	; 0x66
 80075fa:	2101      	movs	r1, #1
 80075fc:	5499      	strb	r1, [r3, r2]
			memset(buff_cmd_tmp, 0, sizeof(buff_cmd_tmp));
 80075fe:	2380      	movs	r3, #128	; 0x80
 8007600:	005a      	lsls	r2, r3, #1
 8007602:	4b08      	ldr	r3, [pc, #32]	; (8007624 <USART1_IRQHandler+0xac>)
 8007604:	2100      	movs	r1, #0
 8007606:	0018      	movs	r0, r3
 8007608:	f002 f84d 	bl	80096a6 <memset>
		}

		g_appStats.lastReceiveUart = ulSecCount;
 800760c:	4b08      	ldr	r3, [pc, #32]	; (8007630 <USART1_IRQHandler+0xb8>)
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	4b06      	ldr	r3, [pc, #24]	; (800762c <USART1_IRQHandler+0xb4>)
 8007612:	659a      	str	r2, [r3, #88]	; 0x58
	}
}
 8007614:	46c0      	nop			; (mov r8, r8)
 8007616:	46bd      	mov	sp, r7
 8007618:	b002      	add	sp, #8
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40013800 	.word	0x40013800
 8007620:	20001198 	.word	0x20001198
 8007624:	20001098 	.word	0x20001098
 8007628:	20000f98 	.word	0x20000f98
 800762c:	200004f4 	.word	0x200004f4
 8007630:	200004d0 	.word	0x200004d0

08007634 <Error_Handler>:


void Error_Handler(void) {
 8007634:	b580      	push	{r7, lr}
 8007636:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007638:	b672      	cpsid	i
}
 800763a:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	while (1) {
 800763c:	e7fe      	b.n	800763c <Error_Handler+0x8>

0800763e <ustrncpy>:
//! \return Returns \e pcDst.
//
//*****************************************************************************
char *
ustrncpy (char *pcDst, const char *pcSrc, int iNum)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
    //ASSERT(pcDst);

    //
    // Start at the beginning of the source string.
    //
    iCount = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]

    //
    // Copy the source string until we run out of source characters or
    // destination space.
    //
    while(iNum && pcSrc[iCount])
 800764e:	e00d      	b.n	800766c <ustrncpy+0x2e>
    {
        pcDst[iCount] = pcSrc[iCount];
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	18d2      	adds	r2, r2, r3
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	68f9      	ldr	r1, [r7, #12]
 800765a:	18cb      	adds	r3, r1, r3
 800765c:	7812      	ldrb	r2, [r2, #0]
 800765e:	701a      	strb	r2, [r3, #0]
        iCount++;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	3301      	adds	r3, #1
 8007664:	617b      	str	r3, [r7, #20]
        iNum--;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3b01      	subs	r3, #1
 800766a:	607b      	str	r3, [r7, #4]
    while(iNum && pcSrc[iCount])
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d011      	beq.n	8007696 <ustrncpy+0x58>
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	18d3      	adds	r3, r2, r3
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e8      	bne.n	8007650 <ustrncpy+0x12>
    }

    //
    // Pad the destination if we are not yet done.
    //
    while(iNum)
 800767e:	e00a      	b.n	8007696 <ustrncpy+0x58>
    {
        pcDst[iCount++] = (char)0;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	1c5a      	adds	r2, r3, #1
 8007684:	617a      	str	r2, [r7, #20]
 8007686:	001a      	movs	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	189b      	adds	r3, r3, r2
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
        iNum--;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3b01      	subs	r3, #1
 8007694:	607b      	str	r3, [r7, #4]
    while(iNum)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f1      	bne.n	8007680 <ustrncpy+0x42>
    }

    //
    // Pass the destination pointer back to the caller.
    //
    return(pcDst);
 800769c:	68fb      	ldr	r3, [r7, #12]
}
 800769e:	0018      	movs	r0, r3
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b006      	add	sp, #24
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <uvsnprintf>:
//
//*****************************************************************************
int
uvsnprintf(char *pcBuf, unsigned long ulSize, const char *pcString,
           va_list vaArgP)
{
 80076a8:	b590      	push	{r4, r7, lr}
 80076aa:	b08d      	sub	sp, #52	; 0x34
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
    unsigned long ulIdx, ulValue, ulCount, ulBase, ulNeg;
    char *pcStr, cFill;
    int iConvertCount = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	617b      	str	r3, [r7, #20]
    //ASSERT(ulSize != 0);

    //
    // Adjust buffer size limit to allow one space for null termination.
    //
    if(ulSize)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <uvsnprintf+0x1e>
    {
        ulSize--;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	60bb      	str	r3, [r7, #8]
    }

    //
    // Initialize the count of characters converted.
    //
    iConvertCount = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	617b      	str	r3, [r7, #20]

    //
    // Loop while there are more characters in the format string.
    //
    while(*pcString)
 80076ca:	e1c8      	b.n	8007a5e <uvsnprintf+0x3b6>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ulIdx = 0; (pcString[ulIdx] != '%') && (pcString[ulIdx] != '\0');
 80076cc:	2300      	movs	r3, #0
 80076ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076d0:	e002      	b.n	80076d8 <uvsnprintf+0x30>
            ulIdx++)
 80076d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d4:	3301      	adds	r3, #1
 80076d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(ulIdx = 0; (pcString[ulIdx] != '%') && (pcString[ulIdx] != '\0');
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	18d3      	adds	r3, r2, r3
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b25      	cmp	r3, #37	; 0x25
 80076e2:	d005      	beq.n	80076f0 <uvsnprintf+0x48>
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	18d3      	adds	r3, r2, r3
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1f0      	bne.n	80076d2 <uvsnprintf+0x2a>
        //
        // Write this portion of the string to the output buffer.  If there are
        // more characters to write than there is space in the buffer, then
        // only write as much as will fit in the buffer.
        //
        if(ulIdx > ulSize)
 80076f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d90c      	bls.n	8007712 <uvsnprintf+0x6a>
        {
            ustrncpy(pcBuf, pcString, ulSize);
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	0018      	movs	r0, r3
 8007700:	f7ff ff9d 	bl	800763e <ustrncpy>
            pcBuf += ulSize;
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	18d3      	adds	r3, r2, r3
 800770a:	60fb      	str	r3, [r7, #12]
            ulSize = 0;
 800770c:	2300      	movs	r3, #0
 800770e:	60bb      	str	r3, [r7, #8]
 8007710:	e00d      	b.n	800772e <uvsnprintf+0x86>
        }
        else
        {
            ustrncpy(pcBuf, pcString, ulIdx);
 8007712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007714:	6879      	ldr	r1, [r7, #4]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	0018      	movs	r0, r3
 800771a:	f7ff ff90 	bl	800763e <ustrncpy>
            pcBuf += ulIdx;
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007722:	18d3      	adds	r3, r2, r3
 8007724:	60fb      	str	r3, [r7, #12]
            ulSize -= ulIdx;
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	60bb      	str	r3, [r7, #8]
        //
        // Update the conversion count.  This will be the number of characters
        // that should have been written, even if there was not room in the
        // buffer.
        //
        iConvertCount += ulIdx;
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	18d3      	adds	r3, r2, r3
 8007734:	617b      	str	r3, [r7, #20]

        //
        // Skip the portion of the format string that was written.
        //
        pcString += ulIdx;
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	18d3      	adds	r3, r2, r3
 800773c:	607b      	str	r3, [r7, #4]

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b25      	cmp	r3, #37	; 0x25
 8007744:	d000      	beq.n	8007748 <uvsnprintf+0xa0>
 8007746:	e189      	b.n	8007a5c <uvsnprintf+0x3b4>
        {
            //
            // Skip the %.
            //
            pcString++;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3301      	adds	r3, #1
 800774c:	607b      	str	r3, [r7, #4]

            //
            // Set the digit count to zero, and the fill character to space
            // (that is, to the defaults).
            //
            ulCount = 0;
 800774e:	2300      	movs	r3, #0
 8007750:	627b      	str	r3, [r7, #36]	; 0x24
            cFill = ' ';
 8007752:	231b      	movs	r3, #27
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	2220      	movs	r2, #32
 8007758:	701a      	strb	r2, [r3, #0]
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	3b25      	subs	r3, #37	; 0x25
 8007764:	2b53      	cmp	r3, #83	; 0x53
 8007766:	d900      	bls.n	800776a <uvsnprintf+0xc2>
 8007768:	e158      	b.n	8007a1c <uvsnprintf+0x374>
 800776a:	009a      	lsls	r2, r3, #2
 800776c:	4bc2      	ldr	r3, [pc, #776]	; (8007a78 <uvsnprintf+0x3d0>)
 800776e:	18d3      	adds	r3, r2, r3
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	469f      	mov	pc, r3
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ulCount == 0))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3b01      	subs	r3, #1
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b30      	cmp	r3, #48	; 0x30
 800777c:	d106      	bne.n	800778c <uvsnprintf+0xe4>
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <uvsnprintf+0xe4>
                    {
                        cFill = '0';
 8007784:	231b      	movs	r3, #27
 8007786:	18fb      	adds	r3, r7, r3
 8007788:	2230      	movs	r2, #48	; 0x30
 800778a:	701a      	strb	r2, [r3, #0]
                    }

                    //
                    // Update the digit count.
                    //
                    ulCount *= 10;
 800778c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778e:	0013      	movs	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	189b      	adds	r3, r3, r2
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	627b      	str	r3, [r7, #36]	; 0x24
                    ulCount += pcString[-1] - '0';
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3b01      	subs	r3, #1
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	001a      	movs	r2, r3
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	18d3      	adds	r3, r2, r3
 80077a4:	3b30      	subs	r3, #48	; 0x30
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24

                    //
                    // Get the next character.
                    //
                    goto again;
 80077a8:	e7d7      	b.n	800775a <uvsnprintf+0xb2>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	1d1a      	adds	r2, r3, #4
 80077ae:	603a      	str	r2, [r7, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Copy the character to the output buffer, if there is
                    // room.  Update the buffer size remaining.
                    //
                    if(ulSize != 0)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d008      	beq.n	80077cc <uvsnprintf+0x124>
                    {
                        *pcBuf++ = (char)ulValue;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	60fa      	str	r2, [r7, #12]
 80077c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]
                        ulSize--;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	60bb      	str	r3, [r7, #8]
                    }

                    //
                    // Update the conversion count.
                    //
                    iConvertCount++;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	3301      	adds	r3, #1
 80077d0:	617b      	str	r3, [r7, #20]

                    //
                    // This command has been handled.
                    //
                    break;
 80077d2:	e144      	b.n	8007a5e <uvsnprintf+0x3b6>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	1d1a      	adds	r2, r3, #4
 80077d8:	603a      	str	r2, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((long)ulValue < 0)
 80077de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	da05      	bge.n	80077f0 <uvsnprintf+0x148>
                    {
                        //
                        // Make the value positive.
                        //
                        ulValue = -(long)ulValue;
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	425b      	negs	r3, r3
 80077e8:	62bb      	str	r3, [r7, #40]	; 0x28

                        //
                        // Indicate that the value is negative.
                        //
                        ulNeg = 1;
 80077ea:	2301      	movs	r3, #1
 80077ec:	61fb      	str	r3, [r7, #28]
 80077ee:	e001      	b.n	80077f4 <uvsnprintf+0x14c>
                    {
                        //
                        // Indicate that the value is positive so that a
                        // negative sign isn't inserted.
                        //
                        ulNeg = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	61fb      	str	r3, [r7, #28]
                    }

                    //
                    // Set the base to 10.
                    //
                    ulBase = 10;
 80077f4:	230a      	movs	r3, #10
 80077f6:	623b      	str	r3, [r7, #32]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 80077f8:	e06d      	b.n	80078d6 <uvsnprintf+0x22e>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	1d1a      	adds	r2, r3, #4
 80077fe:	603a      	str	r2, [r7, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]

                    //
                    // Determine the length of the string.
                    //
                    for(ulIdx = 0; pcStr[ulIdx] != '\0'; ulIdx++)
 8007804:	2300      	movs	r3, #0
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007808:	e002      	b.n	8007810 <uvsnprintf+0x168>
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	3301      	adds	r3, #1
 800780e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	18d3      	adds	r3, r2, r3
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f6      	bne.n	800780a <uvsnprintf+0x162>
                    //
                    // Update the convert count to include any padding that
                    // should be necessary (regardless of whether we have space
                    // to write it or not).
                    //
                    if(ulCount > ulIdx)
 800781c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	429a      	cmp	r2, r3
 8007822:	d905      	bls.n	8007830 <uvsnprintf+0x188>
                    {
                        iConvertCount += (ulCount - ulIdx);
 8007824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007828:	1ad2      	subs	r2, r2, r3
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	18d3      	adds	r3, r2, r3
 800782e:	617b      	str	r3, [r7, #20]
                    //
                    // Copy the string to the output buffer.  Only copy as much
                    // as will fit in the buffer.  Update the output buffer
                    // pointer and the space remaining.
                    //
                    if(ulIdx > ulSize)
 8007830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	429a      	cmp	r2, r3
 8007836:	d90c      	bls.n	8007852 <uvsnprintf+0x1aa>
                    {
                        ustrncpy(pcBuf, pcStr, ulSize);
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	6939      	ldr	r1, [r7, #16]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	0018      	movs	r0, r3
 8007840:	f7ff fefd 	bl	800763e <ustrncpy>
                        pcBuf += ulSize;
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	18d3      	adds	r3, r2, r3
 800784a:	60fb      	str	r3, [r7, #12]
                        ulSize = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	60bb      	str	r3, [r7, #8]
 8007850:	e029      	b.n	80078a6 <uvsnprintf+0x1fe>
                    }
                    else
                    {
                        ustrncpy(pcBuf, pcStr, ulIdx);
 8007852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007854:	6939      	ldr	r1, [r7, #16]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	0018      	movs	r0, r3
 800785a:	f7ff fef0 	bl	800763e <ustrncpy>
                        pcBuf += ulIdx;
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	18d3      	adds	r3, r2, r3
 8007864:	60fb      	str	r3, [r7, #12]
                        ulSize -= ulIdx;
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	60bb      	str	r3, [r7, #8]

                        //
                        // Write any required padding spaces assuming there is
                        // still space in the buffer.
                        //
                        if(ulCount > ulIdx)
 800786e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	429a      	cmp	r2, r3
 8007874:	d917      	bls.n	80078a6 <uvsnprintf+0x1fe>
                        {
                            ulCount -= ulIdx;
 8007876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
                            if(ulCount > ulSize)
 800787e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	429a      	cmp	r2, r3
 8007884:	d901      	bls.n	800788a <uvsnprintf+0x1e2>
                            {
                                ulCount = ulSize;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
                            }
                            ulSize =- ulCount;
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	425b      	negs	r3, r3
 800788e:	60bb      	str	r3, [r7, #8]

                            while(ulCount--)
 8007890:	e004      	b.n	800789c <uvsnprintf+0x1f4>
                            {
                                *pcBuf++ = ' ';
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	60fa      	str	r2, [r7, #12]
 8007898:	2220      	movs	r2, #32
 800789a:	701a      	strb	r2, [r3, #0]
                            while(ulCount--)
 800789c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789e:	1e5a      	subs	r2, r3, #1
 80078a0:	627a      	str	r2, [r7, #36]	; 0x24
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f5      	bne.n	8007892 <uvsnprintf+0x1ea>
                    //
                    // Update the conversion count.  This will be the number of
                    // characters that should have been written, even if there
                    // was not room in the buffer.
                    //
                    iConvertCount += ulIdx;
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	18d3      	adds	r3, r2, r3
 80078ac:	617b      	str	r3, [r7, #20]

                    //
                    // This command has been handled.
                    //
                    break;
 80078ae:	e0d6      	b.n	8007a5e <uvsnprintf+0x3b6>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	1d1a      	adds	r2, r3, #4
 80078b4:	603a      	str	r2, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Set the base to 10.
                    //
                    ulBase = 10;
 80078ba:	230a      	movs	r3, #10
 80078bc:	623b      	str	r3, [r7, #32]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ulNeg = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 80078c2:	e008      	b.n	80078d6 <uvsnprintf+0x22e>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	1d1a      	adds	r2, r3, #4
 80078c8:	603a      	str	r2, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Set the base to 16.
                    //
                    ulBase = 16;
 80078ce:	2310      	movs	r3, #16
 80078d0:	623b      	str	r3, [r7, #32]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ulNeg = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
 80078d6:	2301      	movs	r3, #1
 80078d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078da:	e006      	b.n	80078ea <uvsnprintf+0x242>
                        (((ulIdx * ulBase) <= ulValue) &&
                         (((ulIdx * ulBase) / ulBase) == ulIdx));
                        ulIdx *= ulBase, ulCount--)
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	6a3a      	ldr	r2, [r7, #32]
 80078e0:	4353      	muls	r3, r2
 80078e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	3b01      	subs	r3, #1
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
                        (((ulIdx * ulBase) <= ulValue) &&
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	6a3a      	ldr	r2, [r7, #32]
 80078ee:	4353      	muls	r3, r2
                    for(ulIdx = 1;
 80078f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d30b      	bcc.n	800790e <uvsnprintf+0x266>
                         (((ulIdx * ulBase) / ulBase) == ulIdx));
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	6a3a      	ldr	r2, [r7, #32]
 80078fa:	4353      	muls	r3, r2
 80078fc:	6a39      	ldr	r1, [r7, #32]
 80078fe:	0018      	movs	r0, r3
 8007900:	f7f8 fc26 	bl	8000150 <__udivsi3>
 8007904:	0003      	movs	r3, r0
 8007906:	001a      	movs	r2, r3
                        (((ulIdx * ulBase) <= ulValue) &&
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	4293      	cmp	r3, r2
 800790c:	d0e6      	beq.n	80078dc <uvsnprintf+0x234>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ulNeg)
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d002      	beq.n	800791a <uvsnprintf+0x272>
                    {
                        ulCount--;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	3b01      	subs	r3, #1
 8007918:	627b      	str	r3, [r7, #36]	; 0x24

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ulNeg && (ulSize != 0) && (cFill == '0'))
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d014      	beq.n	800794a <uvsnprintf+0x2a2>
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d011      	beq.n	800794a <uvsnprintf+0x2a2>
 8007926:	231b      	movs	r3, #27
 8007928:	18fb      	adds	r3, r7, r3
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b30      	cmp	r3, #48	; 0x30
 800792e:	d10c      	bne.n	800794a <uvsnprintf+0x2a2>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        *pcBuf++ = '-';
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	60fa      	str	r2, [r7, #12]
 8007936:	222d      	movs	r2, #45	; 0x2d
 8007938:	701a      	strb	r2, [r3, #0]
                        ulSize--;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	3b01      	subs	r3, #1
 800793e:	60bb      	str	r3, [r7, #8]

                        //
                        // Update the conversion count.
                        //
                        iConvertCount++;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	3301      	adds	r3, #1
 8007944:	617b      	str	r3, [r7, #20]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ulNeg = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	61fb      	str	r3, [r7, #28]

                    //
                    // See if there are more characters in the specified field
                    // width than there are in the conversion of this value.
                    //
                    if((ulCount > 1) && (ulCount < 65536))
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	2b01      	cmp	r3, #1
 800794e:	d91e      	bls.n	800798e <uvsnprintf+0x2e6>
 8007950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007952:	2380      	movs	r3, #128	; 0x80
 8007954:	025b      	lsls	r3, r3, #9
 8007956:	429a      	cmp	r2, r3
 8007958:	d219      	bcs.n	800798e <uvsnprintf+0x2e6>
                    {
                        //
                        // Loop through the required padding characters.
                        //
                        for(ulCount--; ulCount; ulCount--)
 800795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795c:	3b01      	subs	r3, #1
 800795e:	627b      	str	r3, [r7, #36]	; 0x24
 8007960:	e012      	b.n	8007988 <uvsnprintf+0x2e0>
                        {
                            //
                            // Copy the character to the output buffer if there
                            // is room.
                            //
                            if(ulSize != 0)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d009      	beq.n	800797c <uvsnprintf+0x2d4>
                            {
                                *pcBuf++ = cFill;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	60fa      	str	r2, [r7, #12]
 800796e:	221b      	movs	r2, #27
 8007970:	18ba      	adds	r2, r7, r2
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	701a      	strb	r2, [r3, #0]
                                ulSize--;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3b01      	subs	r3, #1
 800797a:	60bb      	str	r3, [r7, #8]
                            }

                            //
                            // Update the conversion count.
                            //
                            iConvertCount++;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	3301      	adds	r3, #1
 8007980:	617b      	str	r3, [r7, #20]
                        for(ulCount--; ulCount; ulCount--)
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	3b01      	subs	r3, #1
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e9      	bne.n	8007962 <uvsnprintf+0x2ba>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ulNeg && (ulSize != 0))
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d02e      	beq.n	80079f2 <uvsnprintf+0x34a>
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d02b      	beq.n	80079f2 <uvsnprintf+0x34a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        *pcBuf++ = '-';
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	60fa      	str	r2, [r7, #12]
 80079a0:	222d      	movs	r2, #45	; 0x2d
 80079a2:	701a      	strb	r2, [r3, #0]
                        ulSize--;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	60bb      	str	r3, [r7, #8]

                        //
                        // Update the conversion count.
                        //
                        iConvertCount++;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	3301      	adds	r3, #1
 80079ae:	617b      	str	r3, [r7, #20]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ulIdx; ulIdx /= ulBase)
 80079b0:	e01f      	b.n	80079f2 <uvsnprintf+0x34a>
                    {
                        //
                        // Copy the character to the output buffer if there is
                        // room.
                        //
                        if(ulSize != 0)
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d013      	beq.n	80079e0 <uvsnprintf+0x338>
                        {
                            *pcBuf++ = g_pcHex[(ulValue / ulIdx) % ulBase];
 80079b8:	4c30      	ldr	r4, [pc, #192]	; (8007a7c <uvsnprintf+0x3d4>)
 80079ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079be:	f7f8 fbc7 	bl	8000150 <__udivsi3>
 80079c2:	0003      	movs	r3, r0
 80079c4:	6a39      	ldr	r1, [r7, #32]
 80079c6:	0018      	movs	r0, r3
 80079c8:	f7f8 fc48 	bl	800025c <__aeabi_uidivmod>
 80079cc:	000b      	movs	r3, r1
 80079ce:	18e2      	adds	r2, r4, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	1c59      	adds	r1, r3, #1
 80079d4:	60f9      	str	r1, [r7, #12]
 80079d6:	7812      	ldrb	r2, [r2, #0]
 80079d8:	701a      	strb	r2, [r3, #0]
                            ulSize--;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	3b01      	subs	r3, #1
 80079de:	60bb      	str	r3, [r7, #8]
                        }

                        //
                        // Update the conversion count.
                        //
                        iConvertCount++;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	3301      	adds	r3, #1
 80079e4:	617b      	str	r3, [r7, #20]
                    for(; ulIdx; ulIdx /= ulBase)
 80079e6:	6a39      	ldr	r1, [r7, #32]
 80079e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079ea:	f7f8 fbb1 	bl	8000150 <__udivsi3>
 80079ee:	0003      	movs	r3, r0
 80079f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1dc      	bne.n	80079b2 <uvsnprintf+0x30a>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 80079f8:	e031      	b.n	8007a5e <uvsnprintf+0x3b6>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    if(ulSize != 0)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d009      	beq.n	8007a14 <uvsnprintf+0x36c>
                    {
                        *pcBuf++ = pcString[-1];
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	60fa      	str	r2, [r7, #12]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	3a01      	subs	r2, #1
 8007a0a:	7812      	ldrb	r2, [r2, #0]
 8007a0c:	701a      	strb	r2, [r3, #0]
                        ulSize--;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	60bb      	str	r3, [r7, #8]
                    }

                    //
                    // Update the conversion count.
                    //
                    iConvertCount++;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	3301      	adds	r3, #1
 8007a18:	617b      	str	r3, [r7, #20]

                    //
                    // This command has been handled.
                    //
                    break;
 8007a1a:	e020      	b.n	8007a5e <uvsnprintf+0x3b6>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    if(ulSize >= 5)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d90c      	bls.n	8007a3c <uvsnprintf+0x394>
                    {
                        ustrncpy(pcBuf, "ERROR", 5);
 8007a22:	4917      	ldr	r1, [pc, #92]	; (8007a80 <uvsnprintf+0x3d8>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2205      	movs	r2, #5
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f7ff fe08 	bl	800763e <ustrncpy>
                        pcBuf += 5;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3305      	adds	r3, #5
 8007a32:	60fb      	str	r3, [r7, #12]
                        ulSize -= 5;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	3b05      	subs	r3, #5
 8007a38:	60bb      	str	r3, [r7, #8]
 8007a3a:	e00b      	b.n	8007a54 <uvsnprintf+0x3ac>
                    }
                    else
                    {
                        ustrncpy(pcBuf, "ERROR", ulSize);
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	4910      	ldr	r1, [pc, #64]	; (8007a80 <uvsnprintf+0x3d8>)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	0018      	movs	r0, r3
 8007a44:	f7ff fdfb 	bl	800763e <ustrncpy>
                        pcBuf += ulSize;
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	18d3      	adds	r3, r2, r3
 8007a4e:	60fb      	str	r3, [r7, #12]
                        ulSize = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60bb      	str	r3, [r7, #8]
                    }

                    //
                    // Update the conversion count.
                    //
                    iConvertCount += 5;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	3305      	adds	r3, #5
 8007a58:	617b      	str	r3, [r7, #20]

                    //
                    // This command has been handled.
                    //
                    break;
 8007a5a:	e000      	b.n	8007a5e <uvsnprintf+0x3b6>
                }
            }
        }
 8007a5c:	46c0      	nop			; (mov r8, r8)
    while(*pcString)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d000      	beq.n	8007a68 <uvsnprintf+0x3c0>
 8007a66:	e631      	b.n	80076cc <uvsnprintf+0x24>
    }

    //
    // Null terminate the string in the buffer.
    //
    *pcBuf = 0;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]

    //
    // Return the number of characters in the full converted string.
    //
    return(iConvertCount);
 8007a6e:	697b      	ldr	r3, [r7, #20]
}
 8007a70:	0018      	movs	r0, r3
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b00d      	add	sp, #52	; 0x34
 8007a76:	bd90      	pop	{r4, r7, pc}
 8007a78:	0800d30c 	.word	0x0800d30c
 8007a7c:	0800d19c 	.word	0x0800d19c
 8007a80:	0800d1b0 	.word	0x0800d1b0

08007a84 <usnprintf>:
//! including the NULL termination character, regardless of space in the
//! buffer.
//
//*****************************************************************************
int usnprintf(char *pcBuf, unsigned long ulSize, const char *pcString, ...)
{
 8007a84:	b40c      	push	{r2, r3}
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b084      	sub	sp, #16
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	6039      	str	r1, [r7, #0]
    va_list vaArgP;

    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);
 8007a90:	231c      	movs	r3, #28
 8007a92:	18fb      	adds	r3, r7, r3
 8007a94:	60bb      	str	r3, [r7, #8]

    //
    // Call vsnprintf to perform the conversion.
    //
    iRet = uvsnprintf(pcBuf, ulSize, pcString, vaArgP);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff fe03 	bl	80076a8 <uvsnprintf>
 8007aa2:	0003      	movs	r3, r0
 8007aa4:	60fb      	str	r3, [r7, #12]
    va_end(vaArgP);

    //
    // Return the conversion count.
    //
    return(iRet);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
}
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b004      	add	sp, #16
 8007aae:	bc80      	pop	{r7}
 8007ab0:	bc08      	pop	{r3}
 8007ab2:	b002      	add	sp, #8
 8007ab4:	4718      	bx	r3
	...

08007ab8 <SPIx_init>:
static uint8_t SPI_SendByte(SPI_TypeDef *SPIx, uint8_t byte, uint16_t timeout);
static uint8_t SPI_readByte(SPI_TypeDef *SPIx, uint8_t*byte, uint16_t timeout);

//////////////////////////////////////////////////////////////////////////////////////////////////////////

void SPIx_init(SPI_TypeDef *SPIx){
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]

	if (SPIx == SPI1) {
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a07      	ldr	r2, [pc, #28]	; (8007ae0 <SPIx_init+0x28>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d101      	bne.n	8007acc <SPIx_init+0x14>
		spi1Init();
 8007ac8:	f7fd fa16 	bl	8004ef8 <spi1Init>
	}
	if (SPIx == SPI2) {
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a05      	ldr	r2, [pc, #20]	; (8007ae4 <SPIx_init+0x2c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d101      	bne.n	8007ad8 <SPIx_init+0x20>
		spi2Init();
 8007ad4:	f7fd fa16 	bl	8004f04 <spi2Init>
	}
}
 8007ad8:	46c0      	nop			; (mov r8, r8)
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b002      	add	sp, #8
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40013000 	.word	0x40013000
 8007ae4:	40003800 	.word	0x40003800

08007ae8 <SPIx_ReadRegister>:


int SPIx_ReadRegister(SPI_TypeDef *SPIx, uint8_t reg, uint8_t *data, uint16_t len, uint16_t timeout){
 8007ae8:	b590      	push	{r4, r7, lr}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	0008      	movs	r0, r1
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	0019      	movs	r1, r3
 8007af6:	240b      	movs	r4, #11
 8007af8:	193b      	adds	r3, r7, r4
 8007afa:	1c02      	adds	r2, r0, #0
 8007afc:	701a      	strb	r2, [r3, #0]
 8007afe:	2308      	movs	r3, #8
 8007b00:	18fb      	adds	r3, r7, r3
 8007b02:	1c0a      	adds	r2, r1, #0
 8007b04:	801a      	strh	r2, [r3, #0]
	else
		spi2_cs_high();

	return 1;
#else
	reg |= 0x80;
 8007b06:	193b      	adds	r3, r7, r4
 8007b08:	193a      	adds	r2, r7, r4
 8007b0a:	7812      	ldrb	r2, [r2, #0]
 8007b0c:	2180      	movs	r1, #128	; 0x80
 8007b0e:	4249      	negs	r1, r1
 8007b10:	430a      	orrs	r2, r1
 8007b12:	701a      	strb	r2, [r3, #0]
	spi2_cs_low();
 8007b14:	f7fd f9d8 	bl	8004ec8 <spi2_cs_low>
	SPIx_readWrite(SPIx, reg);
 8007b18:	193b      	adds	r3, r7, r4
 8007b1a:	781a      	ldrb	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	0011      	movs	r1, r2
 8007b20:	0018      	movs	r0, r3
 8007b22:	f7fd fb0b 	bl	800513c <SPIx_readWrite>
	for (int i = 0; i < len; i++) {
 8007b26:	2300      	movs	r3, #0
 8007b28:	617b      	str	r3, [r7, #20]
 8007b2a:	e00c      	b.n	8007b46 <SPIx_ReadRegister+0x5e>
		*(data + i) = SPIx_readWrite(SPIx, 0x00);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	18d4      	adds	r4, r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2100      	movs	r1, #0
 8007b36:	0018      	movs	r0, r3
 8007b38:	f7fd fb00 	bl	800513c <SPIx_readWrite>
 8007b3c:	0003      	movs	r3, r0
 8007b3e:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++) {
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	3301      	adds	r3, #1
 8007b44:	617b      	str	r3, [r7, #20]
 8007b46:	2308      	movs	r3, #8
 8007b48:	18fb      	adds	r3, r7, r3
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	dbec      	blt.n	8007b2c <SPIx_ReadRegister+0x44>
	}
	spi2_cs_high();
 8007b52:	f7fd f9c5 	bl	8004ee0 <spi2_cs_high>
	return 1;
 8007b56:	2301      	movs	r3, #1
#endif
}
 8007b58:	0018      	movs	r0, r3
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b007      	add	sp, #28
 8007b5e:	bd90      	pop	{r4, r7, pc}

08007b60 <SPIx_WriteRegister>:

int SPIx_WriteRegister(SPI_TypeDef *SPIx, uint8_t reg, uint8_t *data, uint16_t len, uint16_t timeout){
 8007b60:	b590      	push	{r4, r7, lr}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	0008      	movs	r0, r1
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	0019      	movs	r1, r3
 8007b6e:	240b      	movs	r4, #11
 8007b70:	193b      	adds	r3, r7, r4
 8007b72:	1c02      	adds	r2, r0, #0
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	2308      	movs	r3, #8
 8007b78:	18fb      	adds	r3, r7, r3
 8007b7a:	1c0a      	adds	r2, r1, #0
 8007b7c:	801a      	strh	r2, [r3, #0]
	else
		spi2_cs_high();

	return 1;
#else
	spi2_cs_low();
 8007b7e:	f7fd f9a3 	bl	8004ec8 <spi2_cs_low>
	SPIx_readWrite(SPIx, reg);
 8007b82:	193b      	adds	r3, r7, r4
 8007b84:	781a      	ldrb	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	0011      	movs	r1, r2
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f7fd fad6 	bl	800513c <SPIx_readWrite>
	SPIx_readWrite(SPIx, *data);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	781a      	ldrb	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	0011      	movs	r1, r2
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f7fd facf 	bl	800513c <SPIx_readWrite>
	spi2_cs_high();
 8007b9e:	f7fd f99f 	bl	8004ee0 <spi2_cs_high>
#endif
}
 8007ba2:	46c0      	nop			; (mov r8, r8)
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	b005      	add	sp, #20
 8007baa:	bd90      	pop	{r4, r7, pc}

08007bac <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8007bac:	b590      	push	{r4, r7, lr}
 8007bae:	b08b      	sub	sp, #44	; 0x2c
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bb4:	2414      	movs	r4, #20
 8007bb6:	193b      	adds	r3, r7, r4
 8007bb8:	0018      	movs	r0, r3
 8007bba:	2314      	movs	r3, #20
 8007bbc:	001a      	movs	r2, r3
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	f001 fd71 	bl	80096a6 <memset>
  if(htim_ic->Instance==TIM2)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	2380      	movs	r3, #128	; 0x80
 8007bca:	05db      	lsls	r3, r3, #23
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d136      	bne.n	8007c3e <HAL_TIM_IC_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	; (8007c48 <HAL_TIM_IC_MspInit+0x9c>)
 8007bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bd4:	4b1c      	ldr	r3, [pc, #112]	; (8007c48 <HAL_TIM_IC_MspInit+0x9c>)
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	63da      	str	r2, [r3, #60]	; 0x3c
 8007bdc:	4b1a      	ldr	r3, [pc, #104]	; (8007c48 <HAL_TIM_IC_MspInit+0x9c>)
 8007bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be0:	2201      	movs	r2, #1
 8007be2:	4013      	ands	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
 8007be6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007be8:	4b17      	ldr	r3, [pc, #92]	; (8007c48 <HAL_TIM_IC_MspInit+0x9c>)
 8007bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bec:	4b16      	ldr	r3, [pc, #88]	; (8007c48 <HAL_TIM_IC_MspInit+0x9c>)
 8007bee:	2101      	movs	r1, #1
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	635a      	str	r2, [r3, #52]	; 0x34
 8007bf4:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <HAL_TIM_IC_MspInit+0x9c>)
 8007bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007c00:	0021      	movs	r1, r4
 8007c02:	187b      	adds	r3, r7, r1
 8007c04:	2208      	movs	r2, #8
 8007c06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c08:	187b      	adds	r3, r7, r1
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c0e:	187b      	adds	r3, r7, r1
 8007c10:	2200      	movs	r2, #0
 8007c12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c14:	187b      	adds	r3, r7, r1
 8007c16:	2200      	movs	r2, #0
 8007c18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8007c1a:	187b      	adds	r3, r7, r1
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c20:	187a      	adds	r2, r7, r1
 8007c22:	23a0      	movs	r3, #160	; 0xa0
 8007c24:	05db      	lsls	r3, r3, #23
 8007c26:	0011      	movs	r1, r2
 8007c28:	0018      	movs	r0, r3
 8007c2a:	f000 fcf1 	bl	8008610 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2100      	movs	r1, #0
 8007c32:	200f      	movs	r0, #15
 8007c34:	f000 fcc6 	bl	80085c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007c38:	200f      	movs	r0, #15
 8007c3a:	f000 fcd8 	bl	80085ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8007c3e:	46c0      	nop			; (mov r8, r8)
 8007c40:	46bd      	mov	sp, r7
 8007c42:	b00b      	add	sp, #44	; 0x2c
 8007c44:	bd90      	pop	{r4, r7, pc}
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	40021000 	.word	0x40021000

08007c4c <NMI_Handler>:


extern TIM_HandleTypeDef htim2;

void NMI_Handler(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007c50:	e7fe      	b.n	8007c50 <NMI_Handler+0x4>

08007c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c56:	e7fe      	b.n	8007c56 <HardFault_Handler+0x4>

08007c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007c5c:	46c0      	nop			; (mov r8, r8)
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */

void SysTick_Handler(void)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
	//g_appConfig.miliCount++;
	HAL_IncTick();
 8007c70:	f000 fc0e 	bl	8008490 <HAL_IncTick>
	ulTickCount++;
 8007c74:	4b0d      	ldr	r3, [pc, #52]	; (8007cac <SysTick_Handler+0x40>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	4b0c      	ldr	r3, [pc, #48]	; (8007cac <SysTick_Handler+0x40>)
 8007c7c:	601a      	str	r2, [r3, #0]
	ulMiliCount++;
 8007c7e:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <SysTick_Handler+0x44>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <SysTick_Handler+0x44>)
 8007c86:	601a      	str	r2, [r3, #0]

	if (ulTickCount >= 1000) { //1 seconds
 8007c88:	4b08      	ldr	r3, [pc, #32]	; (8007cac <SysTick_Handler+0x40>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	23fa      	movs	r3, #250	; 0xfa
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d307      	bcc.n	8007ca4 <SysTick_Handler+0x38>
		ulTickCount = 0;
 8007c94:	4b05      	ldr	r3, [pc, #20]	; (8007cac <SysTick_Handler+0x40>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	601a      	str	r2, [r3, #0]
		ulSecCount++;
 8007c9a:	4b06      	ldr	r3, [pc, #24]	; (8007cb4 <SysTick_Handler+0x48>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	4b04      	ldr	r3, [pc, #16]	; (8007cb4 <SysTick_Handler+0x48>)
 8007ca2:	601a      	str	r2, [r3, #0]
	}
}
 8007ca4:	46c0      	nop			; (mov r8, r8)
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	46c0      	nop			; (mov r8, r8)
 8007cac:	2000119c 	.word	0x2000119c
 8007cb0:	200004d4 	.word	0x200004d4
 8007cb4:	200004d0 	.word	0x200004d0

08007cb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	af00      	add	r7, sp, #0

}
 8007cbc:	46c0      	nop			; (mov r8, r8)
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007cc8:	4b03      	ldr	r3, [pc, #12]	; (8007cd8 <TIM2_IRQHandler+0x14>)
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f001 f846 	bl	8008d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007cd0:	46c0      	nop			; (mov r8, r8)
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	46c0      	nop			; (mov r8, r8)
 8007cd8:	20000484 	.word	0x20000484

08007cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
	return 1;
 8007ce0:	2301      	movs	r3, #1
}
 8007ce2:	0018      	movs	r0, r3
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <_kill>:

int _kill(int pid, int sig)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007cf2:	f001 fc9b 	bl	800962c <__errno>
 8007cf6:	0003      	movs	r3, r0
 8007cf8:	2216      	movs	r2, #22
 8007cfa:	601a      	str	r2, [r3, #0]
	return -1;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	425b      	negs	r3, r3
}
 8007d00:	0018      	movs	r0, r3
 8007d02:	46bd      	mov	sp, r7
 8007d04:	b002      	add	sp, #8
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <_exit>:

void _exit (int status)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007d10:	2301      	movs	r3, #1
 8007d12:	425a      	negs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	0011      	movs	r1, r2
 8007d18:	0018      	movs	r0, r3
 8007d1a:	f7ff ffe5 	bl	8007ce8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007d1e:	e7fe      	b.n	8007d1e <_exit+0x16>

08007d20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]
 8007d30:	e00a      	b.n	8007d48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007d32:	e000      	b.n	8007d36 <_read+0x16>
 8007d34:	bf00      	nop
 8007d36:	0001      	movs	r1, r0
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	60ba      	str	r2, [r7, #8]
 8007d3e:	b2ca      	uxtb	r2, r1
 8007d40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	3301      	adds	r3, #1
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	dbf0      	blt.n	8007d32 <_read+0x12>
	}

return len;
 8007d50:	687b      	ldr	r3, [r7, #4]
}
 8007d52:	0018      	movs	r0, r3
 8007d54:	46bd      	mov	sp, r7
 8007d56:	b006      	add	sp, #24
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	e009      	b.n	8007d80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	60ba      	str	r2, [r7, #8]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	0018      	movs	r0, r3
 8007d76:	e000      	b.n	8007d7a <_write+0x20>
 8007d78:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	697a      	ldr	r2, [r7, #20]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	dbf1      	blt.n	8007d6c <_write+0x12>
	}
	return len;
 8007d88:	687b      	ldr	r3, [r7, #4]
}
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	b006      	add	sp, #24
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <_close>:

int _close(int file)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
	return -1;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	425b      	negs	r3, r3
}
 8007d9e:	0018      	movs	r0, r3
 8007da0:	46bd      	mov	sp, r7
 8007da2:	b002      	add	sp, #8
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2280      	movs	r2, #128	; 0x80
 8007db4:	0192      	lsls	r2, r2, #6
 8007db6:	605a      	str	r2, [r3, #4]
	return 0;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	0018      	movs	r0, r3
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	b002      	add	sp, #8
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <_isatty>:

int _isatty(int file)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
	return 1;
 8007dca:	2301      	movs	r3, #1
}
 8007dcc:	0018      	movs	r0, r3
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	b002      	add	sp, #8
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
	return 0;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	0018      	movs	r0, r3
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b004      	add	sp, #16
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007df4:	4a14      	ldr	r2, [pc, #80]	; (8007e48 <_sbrk+0x5c>)
 8007df6:	4b15      	ldr	r3, [pc, #84]	; (8007e4c <_sbrk+0x60>)
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007e00:	4b13      	ldr	r3, [pc, #76]	; (8007e50 <_sbrk+0x64>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d102      	bne.n	8007e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007e08:	4b11      	ldr	r3, [pc, #68]	; (8007e50 <_sbrk+0x64>)
 8007e0a:	4a12      	ldr	r2, [pc, #72]	; (8007e54 <_sbrk+0x68>)
 8007e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007e0e:	4b10      	ldr	r3, [pc, #64]	; (8007e50 <_sbrk+0x64>)
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	18d3      	adds	r3, r2, r3
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d207      	bcs.n	8007e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007e1c:	f001 fc06 	bl	800962c <__errno>
 8007e20:	0003      	movs	r3, r0
 8007e22:	220c      	movs	r2, #12
 8007e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007e26:	2301      	movs	r3, #1
 8007e28:	425b      	negs	r3, r3
 8007e2a:	e009      	b.n	8007e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007e2c:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <_sbrk+0x64>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007e32:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <_sbrk+0x64>)
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	18d2      	adds	r2, r2, r3
 8007e3a:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <_sbrk+0x64>)
 8007e3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
}
 8007e40:	0018      	movs	r0, r3
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b006      	add	sp, #24
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	20002000 	.word	0x20002000
 8007e4c:	00000400 	.word	0x00000400
 8007e50:	200011a0 	.word	0x200011a0
 8007e54:	200011c0 	.word	0x200011c0

08007e58 <__NVIC_SetPriority>:
{
 8007e58:	b590      	push	{r4, r7, lr}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	0002      	movs	r2, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	1dfb      	adds	r3, r7, #7
 8007e64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007e66:	1dfb      	adds	r3, r7, #7
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8007e6c:	d828      	bhi.n	8007ec0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007e6e:	4a2f      	ldr	r2, [pc, #188]	; (8007f2c <__NVIC_SetPriority+0xd4>)
 8007e70:	1dfb      	adds	r3, r7, #7
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	b25b      	sxtb	r3, r3
 8007e76:	089b      	lsrs	r3, r3, #2
 8007e78:	33c0      	adds	r3, #192	; 0xc0
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	589b      	ldr	r3, [r3, r2]
 8007e7e:	1dfa      	adds	r2, r7, #7
 8007e80:	7812      	ldrb	r2, [r2, #0]
 8007e82:	0011      	movs	r1, r2
 8007e84:	2203      	movs	r2, #3
 8007e86:	400a      	ands	r2, r1
 8007e88:	00d2      	lsls	r2, r2, #3
 8007e8a:	21ff      	movs	r1, #255	; 0xff
 8007e8c:	4091      	lsls	r1, r2
 8007e8e:	000a      	movs	r2, r1
 8007e90:	43d2      	mvns	r2, r2
 8007e92:	401a      	ands	r2, r3
 8007e94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	019b      	lsls	r3, r3, #6
 8007e9a:	22ff      	movs	r2, #255	; 0xff
 8007e9c:	401a      	ands	r2, r3
 8007e9e:	1dfb      	adds	r3, r7, #7
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	0018      	movs	r0, r3
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	4003      	ands	r3, r0
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007eac:	481f      	ldr	r0, [pc, #124]	; (8007f2c <__NVIC_SetPriority+0xd4>)
 8007eae:	1dfb      	adds	r3, r7, #7
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	b25b      	sxtb	r3, r3
 8007eb4:	089b      	lsrs	r3, r3, #2
 8007eb6:	430a      	orrs	r2, r1
 8007eb8:	33c0      	adds	r3, #192	; 0xc0
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	501a      	str	r2, [r3, r0]
}
 8007ebe:	e031      	b.n	8007f24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007ec0:	4a1b      	ldr	r2, [pc, #108]	; (8007f30 <__NVIC_SetPriority+0xd8>)
 8007ec2:	1dfb      	adds	r3, r7, #7
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	0019      	movs	r1, r3
 8007ec8:	230f      	movs	r3, #15
 8007eca:	400b      	ands	r3, r1
 8007ecc:	3b08      	subs	r3, #8
 8007ece:	089b      	lsrs	r3, r3, #2
 8007ed0:	3306      	adds	r3, #6
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	18d3      	adds	r3, r2, r3
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	1dfa      	adds	r2, r7, #7
 8007edc:	7812      	ldrb	r2, [r2, #0]
 8007ede:	0011      	movs	r1, r2
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	400a      	ands	r2, r1
 8007ee4:	00d2      	lsls	r2, r2, #3
 8007ee6:	21ff      	movs	r1, #255	; 0xff
 8007ee8:	4091      	lsls	r1, r2
 8007eea:	000a      	movs	r2, r1
 8007eec:	43d2      	mvns	r2, r2
 8007eee:	401a      	ands	r2, r3
 8007ef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	019b      	lsls	r3, r3, #6
 8007ef6:	22ff      	movs	r2, #255	; 0xff
 8007ef8:	401a      	ands	r2, r3
 8007efa:	1dfb      	adds	r3, r7, #7
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	0018      	movs	r0, r3
 8007f00:	2303      	movs	r3, #3
 8007f02:	4003      	ands	r3, r0
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007f08:	4809      	ldr	r0, [pc, #36]	; (8007f30 <__NVIC_SetPriority+0xd8>)
 8007f0a:	1dfb      	adds	r3, r7, #7
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	001c      	movs	r4, r3
 8007f10:	230f      	movs	r3, #15
 8007f12:	4023      	ands	r3, r4
 8007f14:	3b08      	subs	r3, #8
 8007f16:	089b      	lsrs	r3, r3, #2
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	3306      	adds	r3, #6
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	18c3      	adds	r3, r0, r3
 8007f20:	3304      	adds	r3, #4
 8007f22:	601a      	str	r2, [r3, #0]
}
 8007f24:	46c0      	nop			; (mov r8, r8)
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b003      	add	sp, #12
 8007f2a:	bd90      	pop	{r4, r7, pc}
 8007f2c:	e000e100 	.word	0xe000e100
 8007f30:	e000ed00 	.word	0xe000ed00

08007f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	1e5a      	subs	r2, r3, #1
 8007f40:	2380      	movs	r3, #128	; 0x80
 8007f42:	045b      	lsls	r3, r3, #17
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d301      	bcc.n	8007f4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e010      	b.n	8007f6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <SysTick_Config+0x44>)
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	3a01      	subs	r2, #1
 8007f52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f54:	2301      	movs	r3, #1
 8007f56:	425b      	negs	r3, r3
 8007f58:	2103      	movs	r1, #3
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f7ff ff7c 	bl	8007e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f60:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <SysTick_Config+0x44>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f66:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <SysTick_Config+0x44>)
 8007f68:	2207      	movs	r2, #7
 8007f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	0018      	movs	r0, r3
 8007f70:	46bd      	mov	sp, r7
 8007f72:	b002      	add	sp, #8
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	46c0      	nop			; (mov r8, r8)
 8007f78:	e000e010 	.word	0xe000e010

08007f7c <systemInit>:

static void SetSysClock(void);
static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
static void systickConfig(void);

void systemInit(void) {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
	SetSysClock();
 8007f80:	f000 f828 	bl	8007fd4 <SetSysClock>
	systickConfig();
 8007f84:	f000 f818 	bl	8007fb8 <systickConfig>
}
 8007f88:	46c0      	nop			; (mov r8, r8)
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <SysTick_CLKSourceConfig>:

static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b04      	cmp	r3, #4
 8007f9c:	d105      	bne.n	8007faa <SysTick_CLKSourceConfig+0x1a>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <SysTick_CLKSourceConfig+0x24>)
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	4b04      	ldr	r3, [pc, #16]	; (8007fb4 <SysTick_CLKSourceConfig+0x24>)
 8007fa4:	2104      	movs	r1, #4
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	601a      	str	r2, [r3, #0]
	}
}
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	46bd      	mov	sp, r7
 8007fae:	b002      	add	sp, #8
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	46c0      	nop			; (mov r8, r8)
 8007fb4:	e000e010 	.word	0xe000e010

08007fb8 <systickConfig>:

static void systickConfig(void) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 8007fbc:	2004      	movs	r0, #4
 8007fbe:	f7ff ffe7 	bl	8007f90 <SysTick_CLKSourceConfig>
	SysTick_Config(systemClock / 1000);
 8007fc2:	23fa      	movs	r3, #250	; 0xfa
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f7ff ffb4 	bl	8007f34 <SysTick_Config>
}
 8007fcc:	46c0      	nop			; (mov r8, r8)
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <SetSysClock>:

static void SetSysClock(void) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t) RCC_CR_HSEON);
 8007fd8:	4b2b      	ldr	r3, [pc, #172]	; (8008088 <SetSysClock+0xb4>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	4b2a      	ldr	r3, [pc, #168]	; (8008088 <SetSysClock+0xb4>)
 8007fde:	2180      	movs	r1, #128	; 0x80
 8007fe0:	0249      	lsls	r1, r1, #9
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	4b27      	ldr	r3, [pc, #156]	; (8008088 <SetSysClock+0xb4>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	2380      	movs	r3, #128	; 0x80
 8007fee:	029b      	lsls	r3, r3, #10
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	d0f9      	beq.n	8007fe8 <SetSysClock+0x14>
		;

	/* Enable Prefetch Buffer and set Flash Latency */
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2;
 8007ff4:	4b25      	ldr	r3, [pc, #148]	; (800808c <SetSysClock+0xb8>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	4b24      	ldr	r3, [pc, #144]	; (800808c <SetSysClock+0xb8>)
 8007ffa:	2182      	movs	r1, #130	; 0x82
 8007ffc:	0049      	lsls	r1, r1, #1
 8007ffe:	430a      	orrs	r2, r1
 8008000:	601a      	str	r2, [r3, #0]
	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// APB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_HPRE);
 8008002:	4b21      	ldr	r3, [pc, #132]	; (8008088 <SetSysClock+0xb4>)
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	4b20      	ldr	r3, [pc, #128]	; (8008088 <SetSysClock+0xb4>)
 8008008:	4921      	ldr	r1, [pc, #132]	; (8008090 <SetSysClock+0xbc>)
 800800a:	400a      	ands	r2, r1
 800800c:	609a      	str	r2, [r3, #8]
	// AHB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_PPRE);
 800800e:	4b1e      	ldr	r3, [pc, #120]	; (8008088 <SetSysClock+0xb4>)
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	4b1d      	ldr	r3, [pc, #116]	; (8008088 <SetSysClock+0xb4>)
 8008014:	491f      	ldr	r1, [pc, #124]	; (8008094 <SetSysClock+0xc0>)
 8008016:	400a      	ands	r2, r1
 8008018:	609a      	str	r2, [r3, #8]

	//PLL INPUT CLOCK SOURCE HSE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 800801a:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <SetSysClock+0xb4>)
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	4b1a      	ldr	r3, [pc, #104]	; (8008088 <SetSysClock+0xb4>)
 8008020:	2103      	movs	r1, #3
 8008022:	430a      	orrs	r2, r1
 8008024:	60da      	str	r2, [r3, #12]

	/* PLL configuration = HSE = 64 MHz */
	//PLLM = 1
	//PLLN = 16
	//PLLR = 2
	RCC->PLLCFGR &= (uint32_t) ((uint32_t) ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN
 8008026:	4b18      	ldr	r3, [pc, #96]	; (8008088 <SetSysClock+0xb4>)
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	4b17      	ldr	r3, [pc, #92]	; (8008088 <SetSysClock+0xb4>)
 800802c:	491a      	ldr	r1, [pc, #104]	; (8008098 <SetSysClock+0xc4>)
 800802e:	400a      	ands	r2, r1
 8008030:	60da      	str	r2, [r3, #12]
			| RCC_PLLCFGR_PLLR));

	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4)
 8008032:	4b15      	ldr	r3, [pc, #84]	; (8008088 <SetSysClock+0xb4>)
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	4b14      	ldr	r3, [pc, #80]	; (8008088 <SetSysClock+0xb4>)
 8008038:	4918      	ldr	r1, [pc, #96]	; (800809c <SetSysClock+0xc8>)
 800803a:	430a      	orrs	r2, r1
 800803c:	60da      	str	r2, [r3, #12]
			| (RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLREN) | (RCC_PLLCFGR_PLLQEN)
			| (RCC_PLLCFGR_PLLSRC_HSE);

	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <SetSysClock+0xb4>)
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4b11      	ldr	r3, [pc, #68]	; (8008088 <SetSysClock+0xb4>)
 8008044:	2180      	movs	r1, #128	; 0x80
 8008046:	0449      	lsls	r1, r1, #17
 8008048:	430a      	orrs	r2, r1
 800804a:	601a      	str	r2, [r3, #0]

	/* Wait till PLL is ready */
	while ((RCC->CR & RCC_CR_PLLRDY) == 0) {
 800804c:	46c0      	nop			; (mov r8, r8)
 800804e:	4b0e      	ldr	r3, [pc, #56]	; (8008088 <SetSysClock+0xb4>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	2380      	movs	r3, #128	; 0x80
 8008054:	049b      	lsls	r3, r3, #18
 8008056:	4013      	ands	r3, r2
 8008058:	d0f9      	beq.n	800804e <SetSysClock+0x7a>
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (uint32_t) ((uint32_t) ~(RCC_CFGR_SW));
 800805a:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <SetSysClock+0xb4>)
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <SetSysClock+0xb4>)
 8008060:	2107      	movs	r1, #7
 8008062:	438a      	bics	r2, r1
 8008064:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= (uint32_t) RCC_CFGR_SW_1;
 8008066:	4b08      	ldr	r3, [pc, #32]	; (8008088 <SetSysClock+0xb4>)
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	4b07      	ldr	r3, [pc, #28]	; (8008088 <SetSysClock+0xb4>)
 800806c:	2102      	movs	r1, #2
 800806e:	430a      	orrs	r2, r1
 8008070:	609a      	str	r2, [r3, #8]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1)
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	4b04      	ldr	r3, [pc, #16]	; (8008088 <SetSysClock+0xb4>)
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	2238      	movs	r2, #56	; 0x38
 800807a:	4013      	ands	r3, r2
 800807c:	2b10      	cmp	r3, #16
 800807e:	d1f9      	bne.n	8008074 <SetSysClock+0xa0>
		;
}
 8008080:	46c0      	nop			; (mov r8, r8)
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40021000 	.word	0x40021000
 800808c:	40022000 	.word	0x40022000
 8008090:	fffff0ff 	.word	0xfffff0ff
 8008094:	ffff8fff 	.word	0xffff8fff
 8008098:	1fff808f 	.word	0x1fff808f
 800809c:	31001003 	.word	0x31001003

080080a0 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	0002      	movs	r2, r0
 80080a8:	1dfb      	adds	r3, r7, #7
 80080aa:	701a      	strb	r2, [r3, #0]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 80080ac:	4b0c      	ldr	r3, [pc, #48]	; (80080e0 <xputc+0x40>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d008      	beq.n	80080c6 <xputc+0x26>
		*outptr++ = (unsigned char)c;
 80080b4:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <xputc+0x40>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	1c59      	adds	r1, r3, #1
 80080ba:	4a09      	ldr	r2, [pc, #36]	; (80080e0 <xputc+0x40>)
 80080bc:	6011      	str	r1, [r2, #0]
 80080be:	1dfa      	adds	r2, r7, #7
 80080c0:	7812      	ldrb	r2, [r2, #0]
 80080c2:	701a      	strb	r2, [r3, #0]
		return;
 80080c4:	e009      	b.n	80080da <xputc+0x3a>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 80080c6:	4b07      	ldr	r3, [pc, #28]	; (80080e4 <xputc+0x44>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d005      	beq.n	80080da <xputc+0x3a>
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <xputc+0x44>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	1dfa      	adds	r2, r7, #7
 80080d4:	7812      	ldrb	r2, [r2, #0]
 80080d6:	0010      	movs	r0, r2
 80080d8:	4798      	blx	r3
}
 80080da:	46bd      	mov	sp, r7
 80080dc:	b002      	add	sp, #8
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	200011a8 	.word	0x200011a8
 80080e4:	200011a4 	.word	0x200011a4

080080e8 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	while (*str)
 80080f0:	e006      	b.n	8008100 <xputs+0x18>
		xputc(*str++);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	0018      	movs	r0, r3
 80080fc:	f7ff ffd0 	bl	80080a0 <xputc>
	while (*str)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1f4      	bne.n	80080f2 <xputs+0xa>
}
 8008108:	46c0      	nop			; (mov r8, r8)
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	46bd      	mov	sp, r7
 800810e:	b002      	add	sp, #8
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8008114:	b590      	push	{r4, r7, lr}
 8008116:	b08f      	sub	sp, #60	; 0x3c
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	211f      	movs	r1, #31
 8008126:	187a      	adds	r2, r7, r1
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	7013      	strb	r3, [r2, #0]
		if (!c) break;				/* End of format? */
 800812c:	000a      	movs	r2, r1
 800812e:	18bb      	adds	r3, r7, r2
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d100      	bne.n	8008138 <xvprintf+0x24>
 8008136:	e164      	b.n	8008402 <xvprintf+0x2ee>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8008138:	18bb      	adds	r3, r7, r2
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b25      	cmp	r3, #37	; 0x25
 800813e:	d005      	beq.n	800814c <xvprintf+0x38>
			xputc(c); continue;
 8008140:	18bb      	adds	r3, r7, r2
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	0018      	movs	r0, r3
 8008146:	f7ff ffab 	bl	80080a0 <xputc>
 800814a:	e159      	b.n	8008400 <xvprintf+0x2ec>
		}
		f = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	607a      	str	r2, [r7, #4]
 8008156:	211f      	movs	r1, #31
 8008158:	187a      	adds	r2, r7, r1
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padded */
 800815e:	187b      	adds	r3, r7, r1
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b30      	cmp	r3, #48	; 0x30
 8008164:	d108      	bne.n	8008178 <xvprintf+0x64>
			f = 1; c = *fmt++;
 8008166:	2301      	movs	r3, #1
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	187a      	adds	r2, r7, r1
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	7013      	strb	r3, [r2, #0]
 8008176:	e00c      	b.n	8008192 <xvprintf+0x7e>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8008178:	211f      	movs	r1, #31
 800817a:	187b      	adds	r3, r7, r1
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b2d      	cmp	r3, #45	; 0x2d
 8008180:	d107      	bne.n	8008192 <xvprintf+0x7e>
				f = 2; c = *fmt++;
 8008182:	2302      	movs	r3, #2
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	1c5a      	adds	r2, r3, #1
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	187a      	adds	r2, r7, r1
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	7013      	strb	r3, [r2, #0]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8008192:	2300      	movs	r3, #0
 8008194:	62bb      	str	r3, [r7, #40]	; 0x28
 8008196:	e011      	b.n	80081bc <xvprintf+0xa8>
			w = w * 10 + c - '0';
 8008198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800819a:	0013      	movs	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	189b      	adds	r3, r3, r2
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	001a      	movs	r2, r3
 80081a4:	211f      	movs	r1, #31
 80081a6:	187b      	adds	r3, r7, r1
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	18d3      	adds	r3, r2, r3
 80081ac:	3b30      	subs	r3, #48	; 0x30
 80081ae:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	187a      	adds	r2, r7, r1
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	7013      	strb	r3, [r2, #0]
 80081bc:	221f      	movs	r2, #31
 80081be:	18bb      	adds	r3, r7, r2
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	2b2f      	cmp	r3, #47	; 0x2f
 80081c4:	d903      	bls.n	80081ce <xvprintf+0xba>
 80081c6:	18bb      	adds	r3, r7, r2
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	2b39      	cmp	r3, #57	; 0x39
 80081cc:	d9e4      	bls.n	8008198 <xvprintf+0x84>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80081ce:	221f      	movs	r2, #31
 80081d0:	18bb      	adds	r3, r7, r2
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b6c      	cmp	r3, #108	; 0x6c
 80081d6:	d003      	beq.n	80081e0 <xvprintf+0xcc>
 80081d8:	18bb      	adds	r3, r7, r2
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b4c      	cmp	r3, #76	; 0x4c
 80081de:	d10a      	bne.n	80081f6 <xvprintf+0xe2>
			f |= 4; c = *fmt++;
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	2204      	movs	r2, #4
 80081e4:	4313      	orrs	r3, r2
 80081e6:	627b      	str	r3, [r7, #36]	; 0x24
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	607a      	str	r2, [r7, #4]
 80081ee:	221f      	movs	r2, #31
 80081f0:	18ba      	adds	r2, r7, r2
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;				/* End of format? */
 80081f6:	221f      	movs	r2, #31
 80081f8:	18bb      	adds	r3, r7, r2
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d100      	bne.n	8008202 <xvprintf+0xee>
 8008200:	e101      	b.n	8008406 <xvprintf+0x2f2>
		d = c;
 8008202:	211e      	movs	r1, #30
 8008204:	187b      	adds	r3, r7, r1
 8008206:	18ba      	adds	r2, r7, r2
 8008208:	7812      	ldrb	r2, [r2, #0]
 800820a:	701a      	strb	r2, [r3, #0]
		if (d >= 'a') d -= 0x20;
 800820c:	187b      	adds	r3, r7, r1
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b60      	cmp	r3, #96	; 0x60
 8008212:	d904      	bls.n	800821e <xvprintf+0x10a>
 8008214:	187b      	adds	r3, r7, r1
 8008216:	187a      	adds	r2, r7, r1
 8008218:	7812      	ldrb	r2, [r2, #0]
 800821a:	3a20      	subs	r2, #32
 800821c:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 800821e:	231e      	movs	r3, #30
 8008220:	18fb      	adds	r3, r7, r3
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	3b42      	subs	r3, #66	; 0x42
 8008226:	2b16      	cmp	r3, #22
 8008228:	d847      	bhi.n	80082ba <xvprintf+0x1a6>
 800822a:	009a      	lsls	r2, r3, #2
 800822c:	4b78      	ldr	r3, [pc, #480]	; (8008410 <xvprintf+0x2fc>)
 800822e:	18d3      	adds	r3, r2, r3
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	1d1a      	adds	r2, r3, #4
 8008238:	603a      	str	r2, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 800823e:	2300      	movs	r3, #0
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008242:	e002      	b.n	800824a <xvprintf+0x136>
 8008244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008246:	3301      	adds	r3, #1
 8008248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	18d3      	adds	r3, r2, r3
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1f6      	bne.n	8008244 <xvprintf+0x130>
			while (!(f & 2) && j++ < w) xputc(' ');
 8008256:	e002      	b.n	800825e <xvprintf+0x14a>
 8008258:	2020      	movs	r0, #32
 800825a:	f7ff ff21 	bl	80080a0 <xputc>
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	2202      	movs	r2, #2
 8008262:	4013      	ands	r3, r2
 8008264:	d105      	bne.n	8008272 <xvprintf+0x15e>
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800826c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800826e:	429a      	cmp	r2, r3
 8008270:	d8f2      	bhi.n	8008258 <xvprintf+0x144>
			xputs(p);
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	0018      	movs	r0, r3
 8008276:	f7ff ff37 	bl	80080e8 <xputs>
			while (j++ < w) xputc(' ');
 800827a:	e002      	b.n	8008282 <xvprintf+0x16e>
 800827c:	2020      	movs	r0, #32
 800827e:	f7ff ff0f 	bl	80080a0 <xputc>
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800828a:	429a      	cmp	r2, r3
 800828c:	d8f6      	bhi.n	800827c <xvprintf+0x168>
			continue;
 800828e:	e0b7      	b.n	8008400 <xvprintf+0x2ec>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	1d1a      	adds	r2, r3, #4
 8008294:	603a      	str	r2, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	b2db      	uxtb	r3, r3
 800829a:	0018      	movs	r0, r3
 800829c:	f7ff ff00 	bl	80080a0 <xputc>
 80082a0:	e0ae      	b.n	8008400 <xvprintf+0x2ec>
		case 'B' :					/* Binary */
			r = 2; break;
 80082a2:	2302      	movs	r3, #2
 80082a4:	637b      	str	r3, [r7, #52]	; 0x34
 80082a6:	e00f      	b.n	80082c8 <xvprintf+0x1b4>
		case 'O' :					/* Octal */
			r = 8; break;
 80082a8:	2308      	movs	r3, #8
 80082aa:	637b      	str	r3, [r7, #52]	; 0x34
 80082ac:	e00c      	b.n	80082c8 <xvprintf+0x1b4>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80082ae:	230a      	movs	r3, #10
 80082b0:	637b      	str	r3, [r7, #52]	; 0x34
 80082b2:	e009      	b.n	80082c8 <xvprintf+0x1b4>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80082b4:	2310      	movs	r3, #16
 80082b6:	637b      	str	r3, [r7, #52]	; 0x34
 80082b8:	e006      	b.n	80082c8 <xvprintf+0x1b4>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 80082ba:	231f      	movs	r3, #31
 80082bc:	18fb      	adds	r3, r7, r3
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	0018      	movs	r0, r3
 80082c2:	f7ff feed 	bl	80080a0 <xputc>
 80082c6:	e09b      	b.n	8008400 <xvprintf+0x2ec>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	2204      	movs	r2, #4
 80082cc:	4013      	ands	r3, r2
 80082ce:	d004      	beq.n	80082da <xvprintf+0x1c6>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	1d1a      	adds	r2, r3, #4
 80082d4:	603a      	str	r2, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	e00d      	b.n	80082f6 <xvprintf+0x1e2>
 80082da:	231e      	movs	r3, #30
 80082dc:	18fb      	adds	r3, r7, r3
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b44      	cmp	r3, #68	; 0x44
 80082e2:	d104      	bne.n	80082ee <xvprintf+0x1da>
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	1d1a      	adds	r2, r3, #4
 80082e8:	603a      	str	r2, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	e003      	b.n	80082f6 <xvprintf+0x1e2>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	1d1a      	adds	r2, r3, #4
 80082f2:	603a      	str	r2, [r7, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 80082f8:	231e      	movs	r3, #30
 80082fa:	18fb      	adds	r3, r7, r3
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b44      	cmp	r3, #68	; 0x44
 8008300:	d109      	bne.n	8008316 <xvprintf+0x202>
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	2b00      	cmp	r3, #0
 8008306:	da06      	bge.n	8008316 <xvprintf+0x202>
			v = 0 - v;
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	425b      	negs	r3, r3
 800830c:	623b      	str	r3, [r7, #32]
			f |= 8;
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	2208      	movs	r2, #8
 8008312:	4313      	orrs	r3, r2
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800831e:	0018      	movs	r0, r3
 8008320:	f7f7 ff9c 	bl	800025c <__aeabi_uidivmod>
 8008324:	000b      	movs	r3, r1
 8008326:	001a      	movs	r2, r3
 8008328:	241e      	movs	r4, #30
 800832a:	193b      	adds	r3, r7, r4
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008330:	6a38      	ldr	r0, [r7, #32]
 8008332:	f7f7 ff0d 	bl	8000150 <__udivsi3>
 8008336:	0003      	movs	r3, r0
 8008338:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800833a:	193b      	adds	r3, r7, r4
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b09      	cmp	r3, #9
 8008340:	d90d      	bls.n	800835e <xvprintf+0x24a>
 8008342:	231f      	movs	r3, #31
 8008344:	18fb      	adds	r3, r7, r3
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b78      	cmp	r3, #120	; 0x78
 800834a:	d101      	bne.n	8008350 <xvprintf+0x23c>
 800834c:	2327      	movs	r3, #39	; 0x27
 800834e:	e000      	b.n	8008352 <xvprintf+0x23e>
 8008350:	2307      	movs	r3, #7
 8008352:	211e      	movs	r1, #30
 8008354:	187a      	adds	r2, r7, r1
 8008356:	1879      	adds	r1, r7, r1
 8008358:	7809      	ldrb	r1, [r1, #0]
 800835a:	185b      	adds	r3, r3, r1
 800835c:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	633a      	str	r2, [r7, #48]	; 0x30
 8008364:	221e      	movs	r2, #30
 8008366:	18ba      	adds	r2, r7, r2
 8008368:	7812      	ldrb	r2, [r2, #0]
 800836a:	3230      	adds	r2, #48	; 0x30
 800836c:	b2d1      	uxtb	r1, r2
 800836e:	2208      	movs	r2, #8
 8008370:	18ba      	adds	r2, r7, r2
 8008372:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof(s));
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <xvprintf+0x26c>
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	2b0f      	cmp	r3, #15
 800837e:	d9cc      	bls.n	800831a <xvprintf+0x206>
		if (f & 8) s[i++] = '-';
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	2208      	movs	r2, #8
 8008384:	4013      	ands	r3, r2
 8008386:	d006      	beq.n	8008396 <xvprintf+0x282>
 8008388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	633a      	str	r2, [r7, #48]	; 0x30
 800838e:	2208      	movs	r2, #8
 8008390:	18ba      	adds	r2, r7, r2
 8008392:	212d      	movs	r1, #45	; 0x2d
 8008394:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	2201      	movs	r2, #1
 800839e:	4013      	ands	r3, r2
 80083a0:	d001      	beq.n	80083a6 <xvprintf+0x292>
 80083a2:	2230      	movs	r2, #48	; 0x30
 80083a4:	e000      	b.n	80083a8 <xvprintf+0x294>
 80083a6:	2220      	movs	r2, #32
 80083a8:	231e      	movs	r3, #30
 80083aa:	18fb      	adds	r3, r7, r3
 80083ac:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) xputc(d);
 80083ae:	e005      	b.n	80083bc <xvprintf+0x2a8>
 80083b0:	231e      	movs	r3, #30
 80083b2:	18fb      	adds	r3, r7, r3
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	0018      	movs	r0, r3
 80083b8:	f7ff fe72 	bl	80080a0 <xputc>
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	2202      	movs	r2, #2
 80083c0:	4013      	ands	r3, r2
 80083c2:	d105      	bne.n	80083d0 <xvprintf+0x2bc>
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d8ef      	bhi.n	80083b0 <xvprintf+0x29c>
		do xputc(s[--i]); while(i);
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	3b01      	subs	r3, #1
 80083d4:	633b      	str	r3, [r7, #48]	; 0x30
 80083d6:	2308      	movs	r3, #8
 80083d8:	18fa      	adds	r2, r7, r3
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	18d3      	adds	r3, r2, r3
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	0018      	movs	r0, r3
 80083e2:	f7ff fe5d 	bl	80080a0 <xputc>
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1f1      	bne.n	80083d0 <xvprintf+0x2bc>
		while (j++ < w) xputc(' ');
 80083ec:	e002      	b.n	80083f4 <xvprintf+0x2e0>
 80083ee:	2020      	movs	r0, #32
 80083f0:	f7ff fe56 	bl	80080a0 <xputc>
 80083f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d8f6      	bhi.n	80083ee <xvprintf+0x2da>
		c = *fmt++;					/* Get a char */
 8008400:	e68d      	b.n	800811e <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8008402:	46c0      	nop			; (mov r8, r8)
 8008404:	e000      	b.n	8008408 <xvprintf+0x2f4>
		if (!c) break;				/* End of format? */
 8008406:	46c0      	nop			; (mov r8, r8)
	}
}
 8008408:	46c0      	nop			; (mov r8, r8)
 800840a:	46bd      	mov	sp, r7
 800840c:	b00f      	add	sp, #60	; 0x3c
 800840e:	bd90      	pop	{r4, r7, pc}
 8008410:	0800d45c 	.word	0x0800d45c

08008414 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8008414:	b40f      	push	{r0, r1, r2, r3}
 8008416:	b580      	push	{r7, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 800841c:	2314      	movs	r3, #20
 800841e:	18fb      	adds	r3, r7, r3
 8008420:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	0011      	movs	r1, r2
 8008428:	0018      	movs	r0, r3
 800842a:	f7ff fe73 	bl	8008114 <xvprintf>
	va_end(arp);
}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	46bd      	mov	sp, r7
 8008432:	b002      	add	sp, #8
 8008434:	bc80      	pop	{r7}
 8008436:	bc08      	pop	{r3}
 8008438:	b004      	add	sp, #16
 800843a:	4718      	bx	r3

0800843c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800843c:	480d      	ldr	r0, [pc, #52]	; (8008474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800843e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  systemInit
 8008440:	f7ff fd9c 	bl	8007f7c <systemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008444:	480c      	ldr	r0, [pc, #48]	; (8008478 <LoopForever+0x6>)
  ldr r1, =_edata
 8008446:	490d      	ldr	r1, [pc, #52]	; (800847c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008448:	4a0d      	ldr	r2, [pc, #52]	; (8008480 <LoopForever+0xe>)
  movs r3, #0
 800844a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800844c:	e002      	b.n	8008454 <LoopCopyDataInit>

0800844e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800844e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008452:	3304      	adds	r3, #4

08008454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008458:	d3f9      	bcc.n	800844e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800845a:	4a0a      	ldr	r2, [pc, #40]	; (8008484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800845c:	4c0a      	ldr	r4, [pc, #40]	; (8008488 <LoopForever+0x16>)
  movs r3, #0
 800845e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008460:	e001      	b.n	8008466 <LoopFillZerobss>

08008462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008464:	3204      	adds	r2, #4

08008466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008468:	d3fb      	bcc.n	8008462 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800846a:	f001 f8e5 	bl	8009638 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800846e:	f7fd fa5d 	bl	800592c <main>

08008472 <LoopForever>:

LoopForever:
  b LoopForever
 8008472:	e7fe      	b.n	8008472 <LoopForever>
  ldr   r0, =_estack
 8008474:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8008478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800847c:	2000028c 	.word	0x2000028c
  ldr r2, =_sidata
 8008480:	0800d918 	.word	0x0800d918
  ldr r2, =_sbss
 8008484:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8008488:	200011c0 	.word	0x200011c0

0800848c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800848c:	e7fe      	b.n	800848c <ADC1_IRQHandler>
	...

08008490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <HAL_IncTick+0x1c>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	001a      	movs	r2, r3
 800849a:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <HAL_IncTick+0x20>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	18d2      	adds	r2, r2, r3
 80084a0:	4b03      	ldr	r3, [pc, #12]	; (80084b0 <HAL_IncTick+0x20>)
 80084a2:	601a      	str	r2, [r3, #0]
}
 80084a4:	46c0      	nop			; (mov r8, r8)
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	46c0      	nop			; (mov r8, r8)
 80084ac:	200000b8 	.word	0x200000b8
 80084b0:	200011ac 	.word	0x200011ac

080084b4 <__NVIC_EnableIRQ>:
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	0002      	movs	r2, r0
 80084bc:	1dfb      	adds	r3, r7, #7
 80084be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80084c0:	1dfb      	adds	r3, r7, #7
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2b7f      	cmp	r3, #127	; 0x7f
 80084c6:	d809      	bhi.n	80084dc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084c8:	1dfb      	adds	r3, r7, #7
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	001a      	movs	r2, r3
 80084ce:	231f      	movs	r3, #31
 80084d0:	401a      	ands	r2, r3
 80084d2:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <__NVIC_EnableIRQ+0x30>)
 80084d4:	2101      	movs	r1, #1
 80084d6:	4091      	lsls	r1, r2
 80084d8:	000a      	movs	r2, r1
 80084da:	601a      	str	r2, [r3, #0]
}
 80084dc:	46c0      	nop			; (mov r8, r8)
 80084de:	46bd      	mov	sp, r7
 80084e0:	b002      	add	sp, #8
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	e000e100 	.word	0xe000e100

080084e8 <__NVIC_SetPriority>:
{
 80084e8:	b590      	push	{r4, r7, lr}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	0002      	movs	r2, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	1dfb      	adds	r3, r7, #7
 80084f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80084f6:	1dfb      	adds	r3, r7, #7
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	2b7f      	cmp	r3, #127	; 0x7f
 80084fc:	d828      	bhi.n	8008550 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80084fe:	4a2f      	ldr	r2, [pc, #188]	; (80085bc <__NVIC_SetPriority+0xd4>)
 8008500:	1dfb      	adds	r3, r7, #7
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b25b      	sxtb	r3, r3
 8008506:	089b      	lsrs	r3, r3, #2
 8008508:	33c0      	adds	r3, #192	; 0xc0
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	589b      	ldr	r3, [r3, r2]
 800850e:	1dfa      	adds	r2, r7, #7
 8008510:	7812      	ldrb	r2, [r2, #0]
 8008512:	0011      	movs	r1, r2
 8008514:	2203      	movs	r2, #3
 8008516:	400a      	ands	r2, r1
 8008518:	00d2      	lsls	r2, r2, #3
 800851a:	21ff      	movs	r1, #255	; 0xff
 800851c:	4091      	lsls	r1, r2
 800851e:	000a      	movs	r2, r1
 8008520:	43d2      	mvns	r2, r2
 8008522:	401a      	ands	r2, r3
 8008524:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	019b      	lsls	r3, r3, #6
 800852a:	22ff      	movs	r2, #255	; 0xff
 800852c:	401a      	ands	r2, r3
 800852e:	1dfb      	adds	r3, r7, #7
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	0018      	movs	r0, r3
 8008534:	2303      	movs	r3, #3
 8008536:	4003      	ands	r3, r0
 8008538:	00db      	lsls	r3, r3, #3
 800853a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800853c:	481f      	ldr	r0, [pc, #124]	; (80085bc <__NVIC_SetPriority+0xd4>)
 800853e:	1dfb      	adds	r3, r7, #7
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	b25b      	sxtb	r3, r3
 8008544:	089b      	lsrs	r3, r3, #2
 8008546:	430a      	orrs	r2, r1
 8008548:	33c0      	adds	r3, #192	; 0xc0
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	501a      	str	r2, [r3, r0]
}
 800854e:	e031      	b.n	80085b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008550:	4a1b      	ldr	r2, [pc, #108]	; (80085c0 <__NVIC_SetPriority+0xd8>)
 8008552:	1dfb      	adds	r3, r7, #7
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	0019      	movs	r1, r3
 8008558:	230f      	movs	r3, #15
 800855a:	400b      	ands	r3, r1
 800855c:	3b08      	subs	r3, #8
 800855e:	089b      	lsrs	r3, r3, #2
 8008560:	3306      	adds	r3, #6
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	18d3      	adds	r3, r2, r3
 8008566:	3304      	adds	r3, #4
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	1dfa      	adds	r2, r7, #7
 800856c:	7812      	ldrb	r2, [r2, #0]
 800856e:	0011      	movs	r1, r2
 8008570:	2203      	movs	r2, #3
 8008572:	400a      	ands	r2, r1
 8008574:	00d2      	lsls	r2, r2, #3
 8008576:	21ff      	movs	r1, #255	; 0xff
 8008578:	4091      	lsls	r1, r2
 800857a:	000a      	movs	r2, r1
 800857c:	43d2      	mvns	r2, r2
 800857e:	401a      	ands	r2, r3
 8008580:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	019b      	lsls	r3, r3, #6
 8008586:	22ff      	movs	r2, #255	; 0xff
 8008588:	401a      	ands	r2, r3
 800858a:	1dfb      	adds	r3, r7, #7
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	0018      	movs	r0, r3
 8008590:	2303      	movs	r3, #3
 8008592:	4003      	ands	r3, r0
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008598:	4809      	ldr	r0, [pc, #36]	; (80085c0 <__NVIC_SetPriority+0xd8>)
 800859a:	1dfb      	adds	r3, r7, #7
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	001c      	movs	r4, r3
 80085a0:	230f      	movs	r3, #15
 80085a2:	4023      	ands	r3, r4
 80085a4:	3b08      	subs	r3, #8
 80085a6:	089b      	lsrs	r3, r3, #2
 80085a8:	430a      	orrs	r2, r1
 80085aa:	3306      	adds	r3, #6
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	18c3      	adds	r3, r0, r3
 80085b0:	3304      	adds	r3, #4
 80085b2:	601a      	str	r2, [r3, #0]
}
 80085b4:	46c0      	nop			; (mov r8, r8)
 80085b6:	46bd      	mov	sp, r7
 80085b8:	b003      	add	sp, #12
 80085ba:	bd90      	pop	{r4, r7, pc}
 80085bc:	e000e100 	.word	0xe000e100
 80085c0:	e000ed00 	.word	0xe000ed00

080085c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	210f      	movs	r1, #15
 80085d0:	187b      	adds	r3, r7, r1
 80085d2:	1c02      	adds	r2, r0, #0
 80085d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	187b      	adds	r3, r7, r1
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b25b      	sxtb	r3, r3
 80085de:	0011      	movs	r1, r2
 80085e0:	0018      	movs	r0, r3
 80085e2:	f7ff ff81 	bl	80084e8 <__NVIC_SetPriority>
}
 80085e6:	46c0      	nop			; (mov r8, r8)
 80085e8:	46bd      	mov	sp, r7
 80085ea:	b004      	add	sp, #16
 80085ec:	bd80      	pop	{r7, pc}

080085ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	0002      	movs	r2, r0
 80085f6:	1dfb      	adds	r3, r7, #7
 80085f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80085fa:	1dfb      	adds	r3, r7, #7
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b25b      	sxtb	r3, r3
 8008600:	0018      	movs	r0, r3
 8008602:	f7ff ff57 	bl	80084b4 <__NVIC_EnableIRQ>
}
 8008606:	46c0      	nop			; (mov r8, r8)
 8008608:	46bd      	mov	sp, r7
 800860a:	b002      	add	sp, #8
 800860c:	bd80      	pop	{r7, pc}
	...

08008610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800861a:	2300      	movs	r3, #0
 800861c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800861e:	e147      	b.n	80088b0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2101      	movs	r1, #1
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	4091      	lsls	r1, r2
 800862a:	000a      	movs	r2, r1
 800862c:	4013      	ands	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d100      	bne.n	8008638 <HAL_GPIO_Init+0x28>
 8008636:	e138      	b.n	80088aa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	2203      	movs	r2, #3
 800863e:	4013      	ands	r3, r2
 8008640:	2b01      	cmp	r3, #1
 8008642:	d005      	beq.n	8008650 <HAL_GPIO_Init+0x40>
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2203      	movs	r2, #3
 800864a:	4013      	ands	r3, r2
 800864c:	2b02      	cmp	r3, #2
 800864e:	d130      	bne.n	80086b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	2203      	movs	r2, #3
 800865c:	409a      	lsls	r2, r3
 800865e:	0013      	movs	r3, r2
 8008660:	43da      	mvns	r2, r3
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	4013      	ands	r3, r2
 8008666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	409a      	lsls	r2, r3
 8008672:	0013      	movs	r3, r2
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008686:	2201      	movs	r2, #1
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	409a      	lsls	r2, r3
 800868c:	0013      	movs	r3, r2
 800868e:	43da      	mvns	r2, r3
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	4013      	ands	r3, r2
 8008694:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	091b      	lsrs	r3, r3, #4
 800869c:	2201      	movs	r2, #1
 800869e:	401a      	ands	r2, r3
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	409a      	lsls	r2, r3
 80086a4:	0013      	movs	r3, r2
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	2203      	movs	r2, #3
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d017      	beq.n	80086ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	2203      	movs	r2, #3
 80086ca:	409a      	lsls	r2, r3
 80086cc:	0013      	movs	r3, r2
 80086ce:	43da      	mvns	r2, r3
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	4013      	ands	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	689a      	ldr	r2, [r3, #8]
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	409a      	lsls	r2, r3
 80086e0:	0013      	movs	r3, r2
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	2203      	movs	r2, #3
 80086f4:	4013      	ands	r3, r2
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d123      	bne.n	8008742 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	08da      	lsrs	r2, r3, #3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3208      	adds	r2, #8
 8008702:	0092      	lsls	r2, r2, #2
 8008704:	58d3      	ldr	r3, [r2, r3]
 8008706:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2207      	movs	r2, #7
 800870c:	4013      	ands	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	220f      	movs	r2, #15
 8008712:	409a      	lsls	r2, r3
 8008714:	0013      	movs	r3, r2
 8008716:	43da      	mvns	r2, r3
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4013      	ands	r3, r2
 800871c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	691a      	ldr	r2, [r3, #16]
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2107      	movs	r1, #7
 8008726:	400b      	ands	r3, r1
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	409a      	lsls	r2, r3
 800872c:	0013      	movs	r3, r2
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	4313      	orrs	r3, r2
 8008732:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	08da      	lsrs	r2, r3, #3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3208      	adds	r2, #8
 800873c:	0092      	lsls	r2, r2, #2
 800873e:	6939      	ldr	r1, [r7, #16]
 8008740:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	2203      	movs	r2, #3
 800874e:	409a      	lsls	r2, r3
 8008750:	0013      	movs	r3, r2
 8008752:	43da      	mvns	r2, r3
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4013      	ands	r3, r2
 8008758:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2203      	movs	r2, #3
 8008760:	401a      	ands	r2, r3
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	409a      	lsls	r2, r3
 8008768:	0013      	movs	r3, r2
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	4313      	orrs	r3, r2
 800876e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	23c0      	movs	r3, #192	; 0xc0
 800877c:	029b      	lsls	r3, r3, #10
 800877e:	4013      	ands	r3, r2
 8008780:	d100      	bne.n	8008784 <HAL_GPIO_Init+0x174>
 8008782:	e092      	b.n	80088aa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008784:	4a50      	ldr	r2, [pc, #320]	; (80088c8 <HAL_GPIO_Init+0x2b8>)
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	089b      	lsrs	r3, r3, #2
 800878a:	3318      	adds	r3, #24
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	589b      	ldr	r3, [r3, r2]
 8008790:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2203      	movs	r2, #3
 8008796:	4013      	ands	r3, r2
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	220f      	movs	r2, #15
 800879c:	409a      	lsls	r2, r3
 800879e:	0013      	movs	r3, r2
 80087a0:	43da      	mvns	r2, r3
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	4013      	ands	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	23a0      	movs	r3, #160	; 0xa0
 80087ac:	05db      	lsls	r3, r3, #23
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d013      	beq.n	80087da <HAL_GPIO_Init+0x1ca>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a45      	ldr	r2, [pc, #276]	; (80088cc <HAL_GPIO_Init+0x2bc>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d00d      	beq.n	80087d6 <HAL_GPIO_Init+0x1c6>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a44      	ldr	r2, [pc, #272]	; (80088d0 <HAL_GPIO_Init+0x2c0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d007      	beq.n	80087d2 <HAL_GPIO_Init+0x1c2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a43      	ldr	r2, [pc, #268]	; (80088d4 <HAL_GPIO_Init+0x2c4>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d101      	bne.n	80087ce <HAL_GPIO_Init+0x1be>
 80087ca:	2303      	movs	r3, #3
 80087cc:	e006      	b.n	80087dc <HAL_GPIO_Init+0x1cc>
 80087ce:	2305      	movs	r3, #5
 80087d0:	e004      	b.n	80087dc <HAL_GPIO_Init+0x1cc>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e002      	b.n	80087dc <HAL_GPIO_Init+0x1cc>
 80087d6:	2301      	movs	r3, #1
 80087d8:	e000      	b.n	80087dc <HAL_GPIO_Init+0x1cc>
 80087da:	2300      	movs	r3, #0
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	2103      	movs	r1, #3
 80087e0:	400a      	ands	r2, r1
 80087e2:	00d2      	lsls	r2, r2, #3
 80087e4:	4093      	lsls	r3, r2
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80087ec:	4936      	ldr	r1, [pc, #216]	; (80088c8 <HAL_GPIO_Init+0x2b8>)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	089b      	lsrs	r3, r3, #2
 80087f2:	3318      	adds	r3, #24
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80087fa:	4b33      	ldr	r3, [pc, #204]	; (80088c8 <HAL_GPIO_Init+0x2b8>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	43da      	mvns	r2, r3
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	4013      	ands	r3, r2
 8008808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	2380      	movs	r3, #128	; 0x80
 8008810:	035b      	lsls	r3, r3, #13
 8008812:	4013      	ands	r3, r2
 8008814:	d003      	beq.n	800881e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4313      	orrs	r3, r2
 800881c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800881e:	4b2a      	ldr	r3, [pc, #168]	; (80088c8 <HAL_GPIO_Init+0x2b8>)
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008824:	4b28      	ldr	r3, [pc, #160]	; (80088c8 <HAL_GPIO_Init+0x2b8>)
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	43da      	mvns	r2, r3
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	4013      	ands	r3, r2
 8008832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	2380      	movs	r3, #128	; 0x80
 800883a:	039b      	lsls	r3, r3, #14
 800883c:	4013      	ands	r3, r2
 800883e:	d003      	beq.n	8008848 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008848:	4b1f      	ldr	r3, [pc, #124]	; (80088c8 <HAL_GPIO_Init+0x2b8>)
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800884e:	4a1e      	ldr	r2, [pc, #120]	; (80088c8 <HAL_GPIO_Init+0x2b8>)
 8008850:	2384      	movs	r3, #132	; 0x84
 8008852:	58d3      	ldr	r3, [r2, r3]
 8008854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	43da      	mvns	r2, r3
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	4013      	ands	r3, r2
 800885e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	2380      	movs	r3, #128	; 0x80
 8008866:	029b      	lsls	r3, r3, #10
 8008868:	4013      	ands	r3, r2
 800886a:	d003      	beq.n	8008874 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4313      	orrs	r3, r2
 8008872:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008874:	4914      	ldr	r1, [pc, #80]	; (80088c8 <HAL_GPIO_Init+0x2b8>)
 8008876:	2284      	movs	r2, #132	; 0x84
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800887c:	4a12      	ldr	r2, [pc, #72]	; (80088c8 <HAL_GPIO_Init+0x2b8>)
 800887e:	2380      	movs	r3, #128	; 0x80
 8008880:	58d3      	ldr	r3, [r2, r3]
 8008882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	43da      	mvns	r2, r3
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	4013      	ands	r3, r2
 800888c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	2380      	movs	r3, #128	; 0x80
 8008894:	025b      	lsls	r3, r3, #9
 8008896:	4013      	ands	r3, r2
 8008898:	d003      	beq.n	80088a2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4313      	orrs	r3, r2
 80088a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80088a2:	4909      	ldr	r1, [pc, #36]	; (80088c8 <HAL_GPIO_Init+0x2b8>)
 80088a4:	2280      	movs	r2, #128	; 0x80
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	3301      	adds	r3, #1
 80088ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	40da      	lsrs	r2, r3
 80088b8:	1e13      	subs	r3, r2, #0
 80088ba:	d000      	beq.n	80088be <HAL_GPIO_Init+0x2ae>
 80088bc:	e6b0      	b.n	8008620 <HAL_GPIO_Init+0x10>
  }
}
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	46c0      	nop			; (mov r8, r8)
 80088c2:	46bd      	mov	sp, r7
 80088c4:	b006      	add	sp, #24
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	40021800 	.word	0x40021800
 80088cc:	50000400 	.word	0x50000400
 80088d0:	50000800 	.word	0x50000800
 80088d4:	50000c00 	.word	0x50000c00

080088d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e04a      	b.n	8008980 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	223d      	movs	r2, #61	; 0x3d
 80088ee:	5c9b      	ldrb	r3, [r3, r2]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d107      	bne.n	8008906 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	223c      	movs	r2, #60	; 0x3c
 80088fa:	2100      	movs	r1, #0
 80088fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	0018      	movs	r0, r3
 8008902:	f7ff f953 	bl	8007bac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	223d      	movs	r2, #61	; 0x3d
 800890a:	2102      	movs	r1, #2
 800890c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	3304      	adds	r3, #4
 8008916:	0019      	movs	r1, r3
 8008918:	0010      	movs	r0, r2
 800891a:	f000 fc49 	bl	80091b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2248      	movs	r2, #72	; 0x48
 8008922:	2101      	movs	r1, #1
 8008924:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	223e      	movs	r2, #62	; 0x3e
 800892a:	2101      	movs	r1, #1
 800892c:	5499      	strb	r1, [r3, r2]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	223f      	movs	r2, #63	; 0x3f
 8008932:	2101      	movs	r1, #1
 8008934:	5499      	strb	r1, [r3, r2]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2240      	movs	r2, #64	; 0x40
 800893a:	2101      	movs	r1, #1
 800893c:	5499      	strb	r1, [r3, r2]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2241      	movs	r2, #65	; 0x41
 8008942:	2101      	movs	r1, #1
 8008944:	5499      	strb	r1, [r3, r2]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2242      	movs	r2, #66	; 0x42
 800894a:	2101      	movs	r1, #1
 800894c:	5499      	strb	r1, [r3, r2]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2243      	movs	r2, #67	; 0x43
 8008952:	2101      	movs	r1, #1
 8008954:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2244      	movs	r2, #68	; 0x44
 800895a:	2101      	movs	r1, #1
 800895c:	5499      	strb	r1, [r3, r2]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2245      	movs	r2, #69	; 0x45
 8008962:	2101      	movs	r1, #1
 8008964:	5499      	strb	r1, [r3, r2]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2246      	movs	r2, #70	; 0x46
 800896a:	2101      	movs	r1, #1
 800896c:	5499      	strb	r1, [r3, r2]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2247      	movs	r2, #71	; 0x47
 8008972:	2101      	movs	r1, #1
 8008974:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	223d      	movs	r2, #61	; 0x3d
 800897a:	2101      	movs	r1, #1
 800897c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	0018      	movs	r0, r3
 8008982:	46bd      	mov	sp, r7
 8008984:	b002      	add	sp, #8
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008992:	230f      	movs	r3, #15
 8008994:	18fb      	adds	r3, r7, r3
 8008996:	2200      	movs	r2, #0
 8008998:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d104      	bne.n	80089aa <HAL_TIM_IC_Start_IT+0x22>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	223e      	movs	r2, #62	; 0x3e
 80089a4:	5c9b      	ldrb	r3, [r3, r2]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	e023      	b.n	80089f2 <HAL_TIM_IC_Start_IT+0x6a>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b04      	cmp	r3, #4
 80089ae:	d104      	bne.n	80089ba <HAL_TIM_IC_Start_IT+0x32>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	223f      	movs	r2, #63	; 0x3f
 80089b4:	5c9b      	ldrb	r3, [r3, r2]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	e01b      	b.n	80089f2 <HAL_TIM_IC_Start_IT+0x6a>
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d104      	bne.n	80089ca <HAL_TIM_IC_Start_IT+0x42>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2240      	movs	r2, #64	; 0x40
 80089c4:	5c9b      	ldrb	r3, [r3, r2]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	e013      	b.n	80089f2 <HAL_TIM_IC_Start_IT+0x6a>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b0c      	cmp	r3, #12
 80089ce:	d104      	bne.n	80089da <HAL_TIM_IC_Start_IT+0x52>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2241      	movs	r2, #65	; 0x41
 80089d4:	5c9b      	ldrb	r3, [r3, r2]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	e00b      	b.n	80089f2 <HAL_TIM_IC_Start_IT+0x6a>
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b10      	cmp	r3, #16
 80089de:	d104      	bne.n	80089ea <HAL_TIM_IC_Start_IT+0x62>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2242      	movs	r2, #66	; 0x42
 80089e4:	5c9b      	ldrb	r3, [r3, r2]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	e003      	b.n	80089f2 <HAL_TIM_IC_Start_IT+0x6a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2243      	movs	r2, #67	; 0x43
 80089ee:	5c9b      	ldrb	r3, [r3, r2]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	220e      	movs	r2, #14
 80089f4:	18ba      	adds	r2, r7, r2
 80089f6:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d104      	bne.n	8008a08 <HAL_TIM_IC_Start_IT+0x80>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2244      	movs	r2, #68	; 0x44
 8008a02:	5c9b      	ldrb	r3, [r3, r2]
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	e013      	b.n	8008a30 <HAL_TIM_IC_Start_IT+0xa8>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	d104      	bne.n	8008a18 <HAL_TIM_IC_Start_IT+0x90>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2245      	movs	r2, #69	; 0x45
 8008a12:	5c9b      	ldrb	r3, [r3, r2]
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	e00b      	b.n	8008a30 <HAL_TIM_IC_Start_IT+0xa8>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2b08      	cmp	r3, #8
 8008a1c:	d104      	bne.n	8008a28 <HAL_TIM_IC_Start_IT+0xa0>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2246      	movs	r2, #70	; 0x46
 8008a22:	5c9b      	ldrb	r3, [r3, r2]
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	e003      	b.n	8008a30 <HAL_TIM_IC_Start_IT+0xa8>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2247      	movs	r2, #71	; 0x47
 8008a2c:	5c9b      	ldrb	r3, [r3, r2]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	210d      	movs	r1, #13
 8008a32:	187a      	adds	r2, r7, r1
 8008a34:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a36:	230e      	movs	r3, #14
 8008a38:	18fb      	adds	r3, r7, r3
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d103      	bne.n	8008a48 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a40:	187b      	adds	r3, r7, r1
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d001      	beq.n	8008a4c <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e0c3      	b.n	8008bd4 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d104      	bne.n	8008a5c <HAL_TIM_IC_Start_IT+0xd4>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	223e      	movs	r2, #62	; 0x3e
 8008a56:	2102      	movs	r1, #2
 8008a58:	5499      	strb	r1, [r3, r2]
 8008a5a:	e023      	b.n	8008aa4 <HAL_TIM_IC_Start_IT+0x11c>
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d104      	bne.n	8008a6c <HAL_TIM_IC_Start_IT+0xe4>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	223f      	movs	r2, #63	; 0x3f
 8008a66:	2102      	movs	r1, #2
 8008a68:	5499      	strb	r1, [r3, r2]
 8008a6a:	e01b      	b.n	8008aa4 <HAL_TIM_IC_Start_IT+0x11c>
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2b08      	cmp	r3, #8
 8008a70:	d104      	bne.n	8008a7c <HAL_TIM_IC_Start_IT+0xf4>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2240      	movs	r2, #64	; 0x40
 8008a76:	2102      	movs	r1, #2
 8008a78:	5499      	strb	r1, [r3, r2]
 8008a7a:	e013      	b.n	8008aa4 <HAL_TIM_IC_Start_IT+0x11c>
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	2b0c      	cmp	r3, #12
 8008a80:	d104      	bne.n	8008a8c <HAL_TIM_IC_Start_IT+0x104>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2241      	movs	r2, #65	; 0x41
 8008a86:	2102      	movs	r1, #2
 8008a88:	5499      	strb	r1, [r3, r2]
 8008a8a:	e00b      	b.n	8008aa4 <HAL_TIM_IC_Start_IT+0x11c>
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2b10      	cmp	r3, #16
 8008a90:	d104      	bne.n	8008a9c <HAL_TIM_IC_Start_IT+0x114>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2242      	movs	r2, #66	; 0x42
 8008a96:	2102      	movs	r1, #2
 8008a98:	5499      	strb	r1, [r3, r2]
 8008a9a:	e003      	b.n	8008aa4 <HAL_TIM_IC_Start_IT+0x11c>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2243      	movs	r2, #67	; 0x43
 8008aa0:	2102      	movs	r1, #2
 8008aa2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d104      	bne.n	8008ab4 <HAL_TIM_IC_Start_IT+0x12c>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2244      	movs	r2, #68	; 0x44
 8008aae:	2102      	movs	r1, #2
 8008ab0:	5499      	strb	r1, [r3, r2]
 8008ab2:	e013      	b.n	8008adc <HAL_TIM_IC_Start_IT+0x154>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	d104      	bne.n	8008ac4 <HAL_TIM_IC_Start_IT+0x13c>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2245      	movs	r2, #69	; 0x45
 8008abe:	2102      	movs	r1, #2
 8008ac0:	5499      	strb	r1, [r3, r2]
 8008ac2:	e00b      	b.n	8008adc <HAL_TIM_IC_Start_IT+0x154>
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b08      	cmp	r3, #8
 8008ac8:	d104      	bne.n	8008ad4 <HAL_TIM_IC_Start_IT+0x14c>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2246      	movs	r2, #70	; 0x46
 8008ace:	2102      	movs	r1, #2
 8008ad0:	5499      	strb	r1, [r3, r2]
 8008ad2:	e003      	b.n	8008adc <HAL_TIM_IC_Start_IT+0x154>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2247      	movs	r2, #71	; 0x47
 8008ad8:	2102      	movs	r1, #2
 8008ada:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b0c      	cmp	r3, #12
 8008ae0:	d02a      	beq.n	8008b38 <HAL_TIM_IC_Start_IT+0x1b0>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b0c      	cmp	r3, #12
 8008ae6:	d830      	bhi.n	8008b4a <HAL_TIM_IC_Start_IT+0x1c2>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b08      	cmp	r3, #8
 8008aec:	d01b      	beq.n	8008b26 <HAL_TIM_IC_Start_IT+0x19e>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d82a      	bhi.n	8008b4a <HAL_TIM_IC_Start_IT+0x1c2>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <HAL_TIM_IC_Start_IT+0x17a>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	d009      	beq.n	8008b14 <HAL_TIM_IC_Start_IT+0x18c>
 8008b00:	e023      	b.n	8008b4a <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2102      	movs	r1, #2
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	60da      	str	r2, [r3, #12]
      break;
 8008b12:	e01f      	b.n	8008b54 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2104      	movs	r1, #4
 8008b20:	430a      	orrs	r2, r1
 8008b22:	60da      	str	r2, [r3, #12]
      break;
 8008b24:	e016      	b.n	8008b54 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68da      	ldr	r2, [r3, #12]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2108      	movs	r1, #8
 8008b32:	430a      	orrs	r2, r1
 8008b34:	60da      	str	r2, [r3, #12]
      break;
 8008b36:	e00d      	b.n	8008b54 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2110      	movs	r1, #16
 8008b44:	430a      	orrs	r2, r1
 8008b46:	60da      	str	r2, [r3, #12]
      break;
 8008b48:	e004      	b.n	8008b54 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8008b4a:	230f      	movs	r3, #15
 8008b4c:	18fb      	adds	r3, r7, r3
 8008b4e:	2201      	movs	r2, #1
 8008b50:	701a      	strb	r2, [r3, #0]
      break;
 8008b52:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8008b54:	230f      	movs	r3, #15
 8008b56:	18fb      	adds	r3, r7, r3
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d137      	bne.n	8008bce <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	2201      	movs	r2, #1
 8008b66:	0018      	movs	r0, r3
 8008b68:	f000 fcb6 	bl	80094d8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1a      	ldr	r2, [pc, #104]	; (8008bdc <HAL_TIM_IC_Start_IT+0x254>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00a      	beq.n	8008b8c <HAL_TIM_IC_Start_IT+0x204>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	2380      	movs	r3, #128	; 0x80
 8008b7c:	05db      	lsls	r3, r3, #23
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d004      	beq.n	8008b8c <HAL_TIM_IC_Start_IT+0x204>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a16      	ldr	r2, [pc, #88]	; (8008be0 <HAL_TIM_IC_Start_IT+0x258>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d116      	bne.n	8008bba <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	4a14      	ldr	r2, [pc, #80]	; (8008be4 <HAL_TIM_IC_Start_IT+0x25c>)
 8008b94:	4013      	ands	r3, r2
 8008b96:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2b06      	cmp	r3, #6
 8008b9c:	d016      	beq.n	8008bcc <HAL_TIM_IC_Start_IT+0x244>
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	2380      	movs	r3, #128	; 0x80
 8008ba2:	025b      	lsls	r3, r3, #9
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d011      	beq.n	8008bcc <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bb8:	e008      	b.n	8008bcc <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	e000      	b.n	8008bce <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bcc:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8008bce:	230f      	movs	r3, #15
 8008bd0:	18fb      	adds	r3, r7, r3
 8008bd2:	781b      	ldrb	r3, [r3, #0]
}
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	b004      	add	sp, #16
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	40012c00 	.word	0x40012c00
 8008be0:	40000400 	.word	0x40000400
 8008be4:	00010007 	.word	0x00010007

08008be8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf2:	230f      	movs	r3, #15
 8008bf4:	18fb      	adds	r3, r7, r3
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b0c      	cmp	r3, #12
 8008bfe:	d02a      	beq.n	8008c56 <HAL_TIM_IC_Stop_IT+0x6e>
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b0c      	cmp	r3, #12
 8008c04:	d830      	bhi.n	8008c68 <HAL_TIM_IC_Stop_IT+0x80>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	d01b      	beq.n	8008c44 <HAL_TIM_IC_Stop_IT+0x5c>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b08      	cmp	r3, #8
 8008c10:	d82a      	bhi.n	8008c68 <HAL_TIM_IC_Stop_IT+0x80>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <HAL_TIM_IC_Stop_IT+0x38>
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d009      	beq.n	8008c32 <HAL_TIM_IC_Stop_IT+0x4a>
 8008c1e:	e023      	b.n	8008c68 <HAL_TIM_IC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2102      	movs	r1, #2
 8008c2c:	438a      	bics	r2, r1
 8008c2e:	60da      	str	r2, [r3, #12]
      break;
 8008c30:	e01f      	b.n	8008c72 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68da      	ldr	r2, [r3, #12]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2104      	movs	r1, #4
 8008c3e:	438a      	bics	r2, r1
 8008c40:	60da      	str	r2, [r3, #12]
      break;
 8008c42:	e016      	b.n	8008c72 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2108      	movs	r1, #8
 8008c50:	438a      	bics	r2, r1
 8008c52:	60da      	str	r2, [r3, #12]
      break;
 8008c54:	e00d      	b.n	8008c72 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2110      	movs	r1, #16
 8008c62:	438a      	bics	r2, r1
 8008c64:	60da      	str	r2, [r3, #12]
      break;
 8008c66:	e004      	b.n	8008c72 <HAL_TIM_IC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8008c68:	230f      	movs	r3, #15
 8008c6a:	18fb      	adds	r3, r7, r3
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	701a      	strb	r2, [r3, #0]
      break;
 8008c70:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8008c72:	230f      	movs	r3, #15
 8008c74:	18fb      	adds	r3, r7, r3
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d000      	beq.n	8008c7e <HAL_TIM_IC_Stop_IT+0x96>
 8008c7c:	e062      	b.n	8008d44 <HAL_TIM_IC_Stop_IT+0x15c>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	2200      	movs	r2, #0
 8008c86:	0018      	movs	r0, r3
 8008c88:	f000 fc26 	bl	80094d8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	4a30      	ldr	r2, [pc, #192]	; (8008d54 <HAL_TIM_IC_Stop_IT+0x16c>)
 8008c94:	4013      	ands	r3, r2
 8008c96:	d10d      	bne.n	8008cb4 <HAL_TIM_IC_Stop_IT+0xcc>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	4a2e      	ldr	r2, [pc, #184]	; (8008d58 <HAL_TIM_IC_Stop_IT+0x170>)
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	d107      	bne.n	8008cb4 <HAL_TIM_IC_Stop_IT+0xcc>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2101      	movs	r1, #1
 8008cb0:	438a      	bics	r2, r1
 8008cb2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d104      	bne.n	8008cc4 <HAL_TIM_IC_Stop_IT+0xdc>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	223e      	movs	r2, #62	; 0x3e
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	5499      	strb	r1, [r3, r2]
 8008cc2:	e023      	b.n	8008d0c <HAL_TIM_IC_Stop_IT+0x124>
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	d104      	bne.n	8008cd4 <HAL_TIM_IC_Stop_IT+0xec>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	223f      	movs	r2, #63	; 0x3f
 8008cce:	2101      	movs	r1, #1
 8008cd0:	5499      	strb	r1, [r3, r2]
 8008cd2:	e01b      	b.n	8008d0c <HAL_TIM_IC_Stop_IT+0x124>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2b08      	cmp	r3, #8
 8008cd8:	d104      	bne.n	8008ce4 <HAL_TIM_IC_Stop_IT+0xfc>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2240      	movs	r2, #64	; 0x40
 8008cde:	2101      	movs	r1, #1
 8008ce0:	5499      	strb	r1, [r3, r2]
 8008ce2:	e013      	b.n	8008d0c <HAL_TIM_IC_Stop_IT+0x124>
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b0c      	cmp	r3, #12
 8008ce8:	d104      	bne.n	8008cf4 <HAL_TIM_IC_Stop_IT+0x10c>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2241      	movs	r2, #65	; 0x41
 8008cee:	2101      	movs	r1, #1
 8008cf0:	5499      	strb	r1, [r3, r2]
 8008cf2:	e00b      	b.n	8008d0c <HAL_TIM_IC_Stop_IT+0x124>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2b10      	cmp	r3, #16
 8008cf8:	d104      	bne.n	8008d04 <HAL_TIM_IC_Stop_IT+0x11c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2242      	movs	r2, #66	; 0x42
 8008cfe:	2101      	movs	r1, #1
 8008d00:	5499      	strb	r1, [r3, r2]
 8008d02:	e003      	b.n	8008d0c <HAL_TIM_IC_Stop_IT+0x124>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2243      	movs	r2, #67	; 0x43
 8008d08:	2101      	movs	r1, #1
 8008d0a:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <HAL_TIM_IC_Stop_IT+0x134>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2244      	movs	r2, #68	; 0x44
 8008d16:	2101      	movs	r1, #1
 8008d18:	5499      	strb	r1, [r3, r2]
 8008d1a:	e013      	b.n	8008d44 <HAL_TIM_IC_Stop_IT+0x15c>
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d104      	bne.n	8008d2c <HAL_TIM_IC_Stop_IT+0x144>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2245      	movs	r2, #69	; 0x45
 8008d26:	2101      	movs	r1, #1
 8008d28:	5499      	strb	r1, [r3, r2]
 8008d2a:	e00b      	b.n	8008d44 <HAL_TIM_IC_Stop_IT+0x15c>
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b08      	cmp	r3, #8
 8008d30:	d104      	bne.n	8008d3c <HAL_TIM_IC_Stop_IT+0x154>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2246      	movs	r2, #70	; 0x46
 8008d36:	2101      	movs	r1, #1
 8008d38:	5499      	strb	r1, [r3, r2]
 8008d3a:	e003      	b.n	8008d44 <HAL_TIM_IC_Stop_IT+0x15c>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2247      	movs	r2, #71	; 0x47
 8008d40:	2101      	movs	r1, #1
 8008d42:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8008d44:	230f      	movs	r3, #15
 8008d46:	18fb      	adds	r3, r7, r3
 8008d48:	781b      	ldrb	r3, [r3, #0]
}
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	b004      	add	sp, #16
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	46c0      	nop			; (mov r8, r8)
 8008d54:	00001111 	.word	0x00001111
 8008d58:	00000444 	.word	0x00000444

08008d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d124      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	2202      	movs	r2, #2
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d11d      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2203      	movs	r2, #3
 8008d86:	4252      	negs	r2, r2
 8008d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	2203      	movs	r2, #3
 8008d98:	4013      	ands	r3, r2
 8008d9a:	d004      	beq.n	8008da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f7fe fb82 	bl	80074a8 <HAL_TIM_IC_CaptureCallback>
 8008da4:	e007      	b.n	8008db6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	0018      	movs	r0, r3
 8008daa:	f000 f9e9 	bl	8009180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	0018      	movs	r0, r3
 8008db2:	f000 f9ed 	bl	8009190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	2204      	movs	r2, #4
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d125      	bne.n	8008e16 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	2204      	movs	r2, #4
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d11e      	bne.n	8008e16 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2205      	movs	r2, #5
 8008dde:	4252      	negs	r2, r2
 8008de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2202      	movs	r2, #2
 8008de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	699a      	ldr	r2, [r3, #24]
 8008dee:	23c0      	movs	r3, #192	; 0xc0
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4013      	ands	r3, r2
 8008df4:	d004      	beq.n	8008e00 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	0018      	movs	r0, r3
 8008dfa:	f7fe fb55 	bl	80074a8 <HAL_TIM_IC_CaptureCallback>
 8008dfe:	e007      	b.n	8008e10 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	0018      	movs	r0, r3
 8008e04:	f000 f9bc 	bl	8009180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	f000 f9c0 	bl	8009190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	2208      	movs	r2, #8
 8008e1e:	4013      	ands	r3, r2
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d124      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	2208      	movs	r2, #8
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	2b08      	cmp	r3, #8
 8008e30:	d11d      	bne.n	8008e6e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2209      	movs	r2, #9
 8008e38:	4252      	negs	r2, r2
 8008e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2204      	movs	r2, #4
 8008e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	2203      	movs	r2, #3
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	d004      	beq.n	8008e58 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	0018      	movs	r0, r3
 8008e52:	f7fe fb29 	bl	80074a8 <HAL_TIM_IC_CaptureCallback>
 8008e56:	e007      	b.n	8008e68 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	f000 f990 	bl	8009180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	0018      	movs	r0, r3
 8008e64:	f000 f994 	bl	8009190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	2210      	movs	r2, #16
 8008e76:	4013      	ands	r3, r2
 8008e78:	2b10      	cmp	r3, #16
 8008e7a:	d125      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	2210      	movs	r2, #16
 8008e84:	4013      	ands	r3, r2
 8008e86:	2b10      	cmp	r3, #16
 8008e88:	d11e      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2211      	movs	r2, #17
 8008e90:	4252      	negs	r2, r2
 8008e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2208      	movs	r2, #8
 8008e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	69da      	ldr	r2, [r3, #28]
 8008ea0:	23c0      	movs	r3, #192	; 0xc0
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	d004      	beq.n	8008eb2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	0018      	movs	r0, r3
 8008eac:	f7fe fafc 	bl	80074a8 <HAL_TIM_IC_CaptureCallback>
 8008eb0:	e007      	b.n	8008ec2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	f000 f963 	bl	8009180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f000 f967 	bl	8009190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d10f      	bne.n	8008ef6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	2201      	movs	r2, #1
 8008ede:	4013      	ands	r3, r2
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d108      	bne.n	8008ef6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2202      	movs	r2, #2
 8008eea:	4252      	negs	r2, r2
 8008eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f000 f93d 	bl	8009170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	2280      	movs	r2, #128	; 0x80
 8008efe:	4013      	ands	r3, r2
 8008f00:	2b80      	cmp	r3, #128	; 0x80
 8008f02:	d10f      	bne.n	8008f24 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	2280      	movs	r2, #128	; 0x80
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	2b80      	cmp	r3, #128	; 0x80
 8008f10:	d108      	bne.n	8008f24 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2281      	movs	r2, #129	; 0x81
 8008f18:	4252      	negs	r2, r2
 8008f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f000 fb6e 	bl	8009600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	691a      	ldr	r2, [r3, #16]
 8008f2a:	2380      	movs	r3, #128	; 0x80
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	401a      	ands	r2, r3
 8008f30:	2380      	movs	r3, #128	; 0x80
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d10e      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	2280      	movs	r2, #128	; 0x80
 8008f40:	4013      	ands	r3, r2
 8008f42:	2b80      	cmp	r3, #128	; 0x80
 8008f44:	d107      	bne.n	8008f56 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a1c      	ldr	r2, [pc, #112]	; (8008fbc <HAL_TIM_IRQHandler+0x260>)
 8008f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	0018      	movs	r0, r3
 8008f52:	f000 fb5d 	bl	8009610 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	2240      	movs	r2, #64	; 0x40
 8008f5e:	4013      	ands	r3, r2
 8008f60:	2b40      	cmp	r3, #64	; 0x40
 8008f62:	d10f      	bne.n	8008f84 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	2240      	movs	r2, #64	; 0x40
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	2b40      	cmp	r3, #64	; 0x40
 8008f70:	d108      	bne.n	8008f84 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2241      	movs	r2, #65	; 0x41
 8008f78:	4252      	negs	r2, r2
 8008f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	0018      	movs	r0, r3
 8008f80:	f000 f90e 	bl	80091a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	2b20      	cmp	r3, #32
 8008f90:	d10f      	bne.n	8008fb2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d108      	bne.n	8008fb2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2221      	movs	r2, #33	; 0x21
 8008fa6:	4252      	negs	r2, r2
 8008fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	0018      	movs	r0, r3
 8008fae:	f000 fb1f 	bl	80095f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fb2:	46c0      	nop			; (mov r8, r8)
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	b002      	add	sp, #8
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	46c0      	nop			; (mov r8, r8)
 8008fbc:	fffffeff 	.word	0xfffffeff

08008fc0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fcc:	2317      	movs	r3, #23
 8008fce:	18fb      	adds	r3, r7, r3
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	223c      	movs	r2, #60	; 0x3c
 8008fd8:	5c9b      	ldrb	r3, [r3, r2]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d101      	bne.n	8008fe2 <HAL_TIM_IC_ConfigChannel+0x22>
 8008fde:	2302      	movs	r3, #2
 8008fe0:	e08c      	b.n	80090fc <HAL_TIM_IC_ConfigChannel+0x13c>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	223c      	movs	r2, #60	; 0x3c
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d11b      	bne.n	8009028 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	6819      	ldr	r1, [r3, #0]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	685a      	ldr	r2, [r3, #4]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	f000 f94c 	bl	800929c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	699a      	ldr	r2, [r3, #24]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	210c      	movs	r1, #12
 8009010:	438a      	bics	r2, r1
 8009012:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6999      	ldr	r1, [r3, #24]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	430a      	orrs	r2, r1
 8009024:	619a      	str	r2, [r3, #24]
 8009026:	e062      	b.n	80090ee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b04      	cmp	r3, #4
 800902c:	d11c      	bne.n	8009068 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	6819      	ldr	r1, [r3, #0]
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f000 f983 	bl	8009348 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	699a      	ldr	r2, [r3, #24]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	492d      	ldr	r1, [pc, #180]	; (8009104 <HAL_TIM_IC_ConfigChannel+0x144>)
 800904e:	400a      	ands	r2, r1
 8009050:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6999      	ldr	r1, [r3, #24]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	021a      	lsls	r2, r3, #8
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	430a      	orrs	r2, r1
 8009064:	619a      	str	r2, [r3, #24]
 8009066:	e042      	b.n	80090ee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b08      	cmp	r3, #8
 800906c:	d11b      	bne.n	80090a6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6818      	ldr	r0, [r3, #0]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	6819      	ldr	r1, [r3, #0]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	f000 f9a5 	bl	80093cc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	69da      	ldr	r2, [r3, #28]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	210c      	movs	r1, #12
 800908e:	438a      	bics	r2, r1
 8009090:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	69d9      	ldr	r1, [r3, #28]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	61da      	str	r2, [r3, #28]
 80090a4:	e023      	b.n	80090ee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b0c      	cmp	r3, #12
 80090aa:	d11c      	bne.n	80090e6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6818      	ldr	r0, [r3, #0]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	6819      	ldr	r1, [r3, #0]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f000 f9c6 	bl	800944c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	69da      	ldr	r2, [r3, #28]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	490e      	ldr	r1, [pc, #56]	; (8009104 <HAL_TIM_IC_ConfigChannel+0x144>)
 80090cc:	400a      	ands	r2, r1
 80090ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	69d9      	ldr	r1, [r3, #28]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	021a      	lsls	r2, r3, #8
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	61da      	str	r2, [r3, #28]
 80090e4:	e003      	b.n	80090ee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80090e6:	2317      	movs	r3, #23
 80090e8:	18fb      	adds	r3, r7, r3
 80090ea:	2201      	movs	r2, #1
 80090ec:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	223c      	movs	r2, #60	; 0x3c
 80090f2:	2100      	movs	r1, #0
 80090f4:	5499      	strb	r1, [r3, r2]

  return status;
 80090f6:	2317      	movs	r3, #23
 80090f8:	18fb      	adds	r3, r7, r3
 80090fa:	781b      	ldrb	r3, [r3, #0]
}
 80090fc:	0018      	movs	r0, r3
 80090fe:	46bd      	mov	sp, r7
 8009100:	b006      	add	sp, #24
 8009102:	bd80      	pop	{r7, pc}
 8009104:	fffff3ff 	.word	0xfffff3ff

08009108 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b0c      	cmp	r3, #12
 800911a:	d01e      	beq.n	800915a <HAL_TIM_ReadCapturedValue+0x52>
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b0c      	cmp	r3, #12
 8009120:	d820      	bhi.n	8009164 <HAL_TIM_ReadCapturedValue+0x5c>
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	2b08      	cmp	r3, #8
 8009126:	d013      	beq.n	8009150 <HAL_TIM_ReadCapturedValue+0x48>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b08      	cmp	r3, #8
 800912c:	d81a      	bhi.n	8009164 <HAL_TIM_ReadCapturedValue+0x5c>
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <HAL_TIM_ReadCapturedValue+0x34>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b04      	cmp	r3, #4
 8009138:	d005      	beq.n	8009146 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800913a:	e013      	b.n	8009164 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009142:	60fb      	str	r3, [r7, #12]
      break;
 8009144:	e00f      	b.n	8009166 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914c:	60fb      	str	r3, [r7, #12]
      break;
 800914e:	e00a      	b.n	8009166 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009156:	60fb      	str	r3, [r7, #12]
      break;
 8009158:	e005      	b.n	8009166 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009160:	60fb      	str	r3, [r7, #12]
      break;
 8009162:	e000      	b.n	8009166 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8009164:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8009166:	68fb      	ldr	r3, [r7, #12]
}
 8009168:	0018      	movs	r0, r3
 800916a:	46bd      	mov	sp, r7
 800916c:	b004      	add	sp, #16
 800916e:	bd80      	pop	{r7, pc}

08009170 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009178:	46c0      	nop			; (mov r8, r8)
 800917a:	46bd      	mov	sp, r7
 800917c:	b002      	add	sp, #8
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009188:	46c0      	nop			; (mov r8, r8)
 800918a:	46bd      	mov	sp, r7
 800918c:	b002      	add	sp, #8
 800918e:	bd80      	pop	{r7, pc}

08009190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009198:	46c0      	nop			; (mov r8, r8)
 800919a:	46bd      	mov	sp, r7
 800919c:	b002      	add	sp, #8
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091a8:	46c0      	nop			; (mov r8, r8)
 80091aa:	46bd      	mov	sp, r7
 80091ac:	b002      	add	sp, #8
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a30      	ldr	r2, [pc, #192]	; (8009284 <TIM_Base_SetConfig+0xd4>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d008      	beq.n	80091da <TIM_Base_SetConfig+0x2a>
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	2380      	movs	r3, #128	; 0x80
 80091cc:	05db      	lsls	r3, r3, #23
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d003      	beq.n	80091da <TIM_Base_SetConfig+0x2a>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a2c      	ldr	r2, [pc, #176]	; (8009288 <TIM_Base_SetConfig+0xd8>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d108      	bne.n	80091ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2270      	movs	r2, #112	; 0x70
 80091de:	4393      	bics	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a25      	ldr	r2, [pc, #148]	; (8009284 <TIM_Base_SetConfig+0xd4>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d014      	beq.n	800921e <TIM_Base_SetConfig+0x6e>
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	2380      	movs	r3, #128	; 0x80
 80091f8:	05db      	lsls	r3, r3, #23
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d00f      	beq.n	800921e <TIM_Base_SetConfig+0x6e>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a21      	ldr	r2, [pc, #132]	; (8009288 <TIM_Base_SetConfig+0xd8>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d00b      	beq.n	800921e <TIM_Base_SetConfig+0x6e>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a20      	ldr	r2, [pc, #128]	; (800928c <TIM_Base_SetConfig+0xdc>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d007      	beq.n	800921e <TIM_Base_SetConfig+0x6e>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a1f      	ldr	r2, [pc, #124]	; (8009290 <TIM_Base_SetConfig+0xe0>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d003      	beq.n	800921e <TIM_Base_SetConfig+0x6e>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a1e      	ldr	r2, [pc, #120]	; (8009294 <TIM_Base_SetConfig+0xe4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d108      	bne.n	8009230 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	4a1d      	ldr	r2, [pc, #116]	; (8009298 <TIM_Base_SetConfig+0xe8>)
 8009222:	4013      	ands	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2280      	movs	r2, #128	; 0x80
 8009234:	4393      	bics	r3, r2
 8009236:	001a      	movs	r2, r3
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	4313      	orrs	r3, r2
 800923e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	689a      	ldr	r2, [r3, #8]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a0a      	ldr	r2, [pc, #40]	; (8009284 <TIM_Base_SetConfig+0xd4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d007      	beq.n	800926e <TIM_Base_SetConfig+0xbe>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a0b      	ldr	r2, [pc, #44]	; (8009290 <TIM_Base_SetConfig+0xe0>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d003      	beq.n	800926e <TIM_Base_SetConfig+0xbe>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a0a      	ldr	r2, [pc, #40]	; (8009294 <TIM_Base_SetConfig+0xe4>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d103      	bne.n	8009276 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	691a      	ldr	r2, [r3, #16]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	615a      	str	r2, [r3, #20]
}
 800927c:	46c0      	nop			; (mov r8, r8)
 800927e:	46bd      	mov	sp, r7
 8009280:	b004      	add	sp, #16
 8009282:	bd80      	pop	{r7, pc}
 8009284:	40012c00 	.word	0x40012c00
 8009288:	40000400 	.word	0x40000400
 800928c:	40002000 	.word	0x40002000
 8009290:	40014400 	.word	0x40014400
 8009294:	40014800 	.word	0x40014800
 8009298:	fffffcff 	.word	0xfffffcff

0800929c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	2201      	movs	r2, #1
 80092b0:	4393      	bics	r3, r2
 80092b2:	001a      	movs	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6a1b      	ldr	r3, [r3, #32]
 80092c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4a1e      	ldr	r2, [pc, #120]	; (8009340 <TIM_TI1_SetConfig+0xa4>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d008      	beq.n	80092de <TIM_TI1_SetConfig+0x42>
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	2380      	movs	r3, #128	; 0x80
 80092d0:	05db      	lsls	r3, r3, #23
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d003      	beq.n	80092de <TIM_TI1_SetConfig+0x42>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	4a1a      	ldr	r2, [pc, #104]	; (8009344 <TIM_TI1_SetConfig+0xa8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d101      	bne.n	80092e2 <TIM_TI1_SetConfig+0x46>
 80092de:	2301      	movs	r3, #1
 80092e0:	e000      	b.n	80092e4 <TIM_TI1_SetConfig+0x48>
 80092e2:	2300      	movs	r3, #0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d008      	beq.n	80092fa <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2203      	movs	r2, #3
 80092ec:	4393      	bics	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	617b      	str	r3, [r7, #20]
 80092f8:	e003      	b.n	8009302 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2201      	movs	r2, #1
 80092fe:	4313      	orrs	r3, r2
 8009300:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	22f0      	movs	r2, #240	; 0xf0
 8009306:	4393      	bics	r3, r2
 8009308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	011b      	lsls	r3, r3, #4
 800930e:	22ff      	movs	r2, #255	; 0xff
 8009310:	4013      	ands	r3, r2
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	220a      	movs	r2, #10
 800931c:	4393      	bics	r3, r2
 800931e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	220a      	movs	r2, #10
 8009324:	4013      	ands	r3, r2
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4313      	orrs	r3, r2
 800932a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	621a      	str	r2, [r3, #32]
}
 8009338:	46c0      	nop			; (mov r8, r8)
 800933a:	46bd      	mov	sp, r7
 800933c:	b006      	add	sp, #24
 800933e:	bd80      	pop	{r7, pc}
 8009340:	40012c00 	.word	0x40012c00
 8009344:	40000400 	.word	0x40000400

08009348 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	2210      	movs	r2, #16
 800935c:	4393      	bics	r3, r2
 800935e:	001a      	movs	r2, r3
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	4a14      	ldr	r2, [pc, #80]	; (80093c4 <TIM_TI2_SetConfig+0x7c>)
 8009374:	4013      	ands	r3, r2
 8009376:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	021b      	lsls	r3, r3, #8
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	4a10      	ldr	r2, [pc, #64]	; (80093c8 <TIM_TI2_SetConfig+0x80>)
 8009386:	4013      	ands	r3, r2
 8009388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	031b      	lsls	r3, r3, #12
 800938e:	041b      	lsls	r3, r3, #16
 8009390:	0c1b      	lsrs	r3, r3, #16
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	4313      	orrs	r3, r2
 8009396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	22a0      	movs	r2, #160	; 0xa0
 800939c:	4393      	bics	r3, r2
 800939e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	011b      	lsls	r3, r3, #4
 80093a4:	22a0      	movs	r2, #160	; 0xa0
 80093a6:	4013      	ands	r3, r2
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	621a      	str	r2, [r3, #32]
}
 80093ba:	46c0      	nop			; (mov r8, r8)
 80093bc:	46bd      	mov	sp, r7
 80093be:	b006      	add	sp, #24
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	46c0      	nop			; (mov r8, r8)
 80093c4:	fffffcff 	.word	0xfffffcff
 80093c8:	ffff0fff 	.word	0xffff0fff

080093cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	4a19      	ldr	r2, [pc, #100]	; (8009444 <TIM_TI3_SetConfig+0x78>)
 80093e0:	401a      	ands	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6a1b      	ldr	r3, [r3, #32]
 80093f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2203      	movs	r2, #3
 80093f6:	4393      	bics	r3, r2
 80093f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4313      	orrs	r3, r2
 8009400:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	22f0      	movs	r2, #240	; 0xf0
 8009406:	4393      	bics	r3, r2
 8009408:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	011b      	lsls	r3, r3, #4
 800940e:	22ff      	movs	r2, #255	; 0xff
 8009410:	4013      	ands	r3, r2
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	4313      	orrs	r3, r2
 8009416:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	4a0b      	ldr	r2, [pc, #44]	; (8009448 <TIM_TI3_SetConfig+0x7c>)
 800941c:	4013      	ands	r3, r2
 800941e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	021a      	lsls	r2, r3, #8
 8009424:	23a0      	movs	r3, #160	; 0xa0
 8009426:	011b      	lsls	r3, r3, #4
 8009428:	4013      	ands	r3, r2
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	4313      	orrs	r3, r2
 800942e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	621a      	str	r2, [r3, #32]
}
 800943c:	46c0      	nop			; (mov r8, r8)
 800943e:	46bd      	mov	sp, r7
 8009440:	b006      	add	sp, #24
 8009442:	bd80      	pop	{r7, pc}
 8009444:	fffffeff 	.word	0xfffffeff
 8009448:	fffff5ff 	.word	0xfffff5ff

0800944c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
 8009458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	4a1a      	ldr	r2, [pc, #104]	; (80094c8 <TIM_TI4_SetConfig+0x7c>)
 8009460:	401a      	ands	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	4a15      	ldr	r2, [pc, #84]	; (80094cc <TIM_TI4_SetConfig+0x80>)
 8009476:	4013      	ands	r3, r2
 8009478:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	4313      	orrs	r3, r2
 8009482:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	4a12      	ldr	r2, [pc, #72]	; (80094d0 <TIM_TI4_SetConfig+0x84>)
 8009488:	4013      	ands	r3, r2
 800948a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	031b      	lsls	r3, r3, #12
 8009490:	041b      	lsls	r3, r3, #16
 8009492:	0c1b      	lsrs	r3, r3, #16
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	4313      	orrs	r3, r2
 8009498:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	4a0d      	ldr	r2, [pc, #52]	; (80094d4 <TIM_TI4_SetConfig+0x88>)
 800949e:	4013      	ands	r3, r2
 80094a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	031a      	lsls	r2, r3, #12
 80094a6:	23a0      	movs	r3, #160	; 0xa0
 80094a8:	021b      	lsls	r3, r3, #8
 80094aa:	4013      	ands	r3, r2
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	621a      	str	r2, [r3, #32]
}
 80094be:	46c0      	nop			; (mov r8, r8)
 80094c0:	46bd      	mov	sp, r7
 80094c2:	b006      	add	sp, #24
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	46c0      	nop			; (mov r8, r8)
 80094c8:	ffffefff 	.word	0xffffefff
 80094cc:	fffffcff 	.word	0xfffffcff
 80094d0:	ffff0fff 	.word	0xffff0fff
 80094d4:	ffff5fff 	.word	0xffff5fff

080094d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	221f      	movs	r2, #31
 80094e8:	4013      	ands	r3, r2
 80094ea:	2201      	movs	r2, #1
 80094ec:	409a      	lsls	r2, r3
 80094ee:	0013      	movs	r3, r2
 80094f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6a1b      	ldr	r3, [r3, #32]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	43d2      	mvns	r2, r2
 80094fa:	401a      	ands	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6a1a      	ldr	r2, [r3, #32]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	211f      	movs	r1, #31
 8009508:	400b      	ands	r3, r1
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	4099      	lsls	r1, r3
 800950e:	000b      	movs	r3, r1
 8009510:	431a      	orrs	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	621a      	str	r2, [r3, #32]
}
 8009516:	46c0      	nop			; (mov r8, r8)
 8009518:	46bd      	mov	sp, r7
 800951a:	b006      	add	sp, #24
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	223c      	movs	r2, #60	; 0x3c
 800952e:	5c9b      	ldrb	r3, [r3, r2]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009534:	2302      	movs	r3, #2
 8009536:	e050      	b.n	80095da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	223c      	movs	r2, #60	; 0x3c
 800953c:	2101      	movs	r1, #1
 800953e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	223d      	movs	r2, #61	; 0x3d
 8009544:	2102      	movs	r1, #2
 8009546:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a21      	ldr	r2, [pc, #132]	; (80095e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d108      	bne.n	8009574 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4a20      	ldr	r2, [pc, #128]	; (80095e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009566:	4013      	ands	r3, r2
 8009568:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	4313      	orrs	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2270      	movs	r2, #112	; 0x70
 8009578:	4393      	bics	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a14      	ldr	r2, [pc, #80]	; (80095e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00a      	beq.n	80095ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	2380      	movs	r3, #128	; 0x80
 800959e:	05db      	lsls	r3, r3, #23
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d004      	beq.n	80095ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a10      	ldr	r2, [pc, #64]	; (80095ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d10c      	bne.n	80095c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2280      	movs	r2, #128	; 0x80
 80095b2:	4393      	bics	r3, r2
 80095b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	223d      	movs	r2, #61	; 0x3d
 80095cc:	2101      	movs	r1, #1
 80095ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	223c      	movs	r2, #60	; 0x3c
 80095d4:	2100      	movs	r1, #0
 80095d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	0018      	movs	r0, r3
 80095dc:	46bd      	mov	sp, r7
 80095de:	b004      	add	sp, #16
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	46c0      	nop			; (mov r8, r8)
 80095e4:	40012c00 	.word	0x40012c00
 80095e8:	ff0fffff 	.word	0xff0fffff
 80095ec:	40000400 	.word	0x40000400

080095f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095f8:	46c0      	nop			; (mov r8, r8)
 80095fa:	46bd      	mov	sp, r7
 80095fc:	b002      	add	sp, #8
 80095fe:	bd80      	pop	{r7, pc}

08009600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009608:	46c0      	nop			; (mov r8, r8)
 800960a:	46bd      	mov	sp, r7
 800960c:	b002      	add	sp, #8
 800960e:	bd80      	pop	{r7, pc}

08009610 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009618:	46c0      	nop			; (mov r8, r8)
 800961a:	46bd      	mov	sp, r7
 800961c:	b002      	add	sp, #8
 800961e:	bd80      	pop	{r7, pc}

08009620 <atoi>:
 8009620:	b510      	push	{r4, lr}
 8009622:	220a      	movs	r2, #10
 8009624:	2100      	movs	r1, #0
 8009626:	f000 fe8b 	bl	800a340 <strtol>
 800962a:	bd10      	pop	{r4, pc}

0800962c <__errno>:
 800962c:	4b01      	ldr	r3, [pc, #4]	; (8009634 <__errno+0x8>)
 800962e:	6818      	ldr	r0, [r3, #0]
 8009630:	4770      	bx	lr
 8009632:	46c0      	nop			; (mov r8, r8)
 8009634:	200000bc 	.word	0x200000bc

08009638 <__libc_init_array>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	2600      	movs	r6, #0
 800963c:	4d0c      	ldr	r5, [pc, #48]	; (8009670 <__libc_init_array+0x38>)
 800963e:	4c0d      	ldr	r4, [pc, #52]	; (8009674 <__libc_init_array+0x3c>)
 8009640:	1b64      	subs	r4, r4, r5
 8009642:	10a4      	asrs	r4, r4, #2
 8009644:	42a6      	cmp	r6, r4
 8009646:	d109      	bne.n	800965c <__libc_init_array+0x24>
 8009648:	2600      	movs	r6, #0
 800964a:	f003 fb9b 	bl	800cd84 <_init>
 800964e:	4d0a      	ldr	r5, [pc, #40]	; (8009678 <__libc_init_array+0x40>)
 8009650:	4c0a      	ldr	r4, [pc, #40]	; (800967c <__libc_init_array+0x44>)
 8009652:	1b64      	subs	r4, r4, r5
 8009654:	10a4      	asrs	r4, r4, #2
 8009656:	42a6      	cmp	r6, r4
 8009658:	d105      	bne.n	8009666 <__libc_init_array+0x2e>
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	00b3      	lsls	r3, r6, #2
 800965e:	58eb      	ldr	r3, [r5, r3]
 8009660:	4798      	blx	r3
 8009662:	3601      	adds	r6, #1
 8009664:	e7ee      	b.n	8009644 <__libc_init_array+0xc>
 8009666:	00b3      	lsls	r3, r6, #2
 8009668:	58eb      	ldr	r3, [r5, r3]
 800966a:	4798      	blx	r3
 800966c:	3601      	adds	r6, #1
 800966e:	e7f2      	b.n	8009656 <__libc_init_array+0x1e>
 8009670:	0800d910 	.word	0x0800d910
 8009674:	0800d910 	.word	0x0800d910
 8009678:	0800d910 	.word	0x0800d910
 800967c:	0800d914 	.word	0x0800d914

08009680 <malloc>:
 8009680:	b510      	push	{r4, lr}
 8009682:	4b03      	ldr	r3, [pc, #12]	; (8009690 <malloc+0x10>)
 8009684:	0001      	movs	r1, r0
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	f000 f882 	bl	8009790 <_malloc_r>
 800968c:	bd10      	pop	{r4, pc}
 800968e:	46c0      	nop			; (mov r8, r8)
 8009690:	200000bc 	.word	0x200000bc

08009694 <memcpy>:
 8009694:	2300      	movs	r3, #0
 8009696:	b510      	push	{r4, lr}
 8009698:	429a      	cmp	r2, r3
 800969a:	d100      	bne.n	800969e <memcpy+0xa>
 800969c:	bd10      	pop	{r4, pc}
 800969e:	5ccc      	ldrb	r4, [r1, r3]
 80096a0:	54c4      	strb	r4, [r0, r3]
 80096a2:	3301      	adds	r3, #1
 80096a4:	e7f8      	b.n	8009698 <memcpy+0x4>

080096a6 <memset>:
 80096a6:	0003      	movs	r3, r0
 80096a8:	1882      	adds	r2, r0, r2
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d100      	bne.n	80096b0 <memset+0xa>
 80096ae:	4770      	bx	lr
 80096b0:	7019      	strb	r1, [r3, #0]
 80096b2:	3301      	adds	r3, #1
 80096b4:	e7f9      	b.n	80096aa <memset+0x4>
	...

080096b8 <_free_r>:
 80096b8:	b570      	push	{r4, r5, r6, lr}
 80096ba:	0005      	movs	r5, r0
 80096bc:	2900      	cmp	r1, #0
 80096be:	d010      	beq.n	80096e2 <_free_r+0x2a>
 80096c0:	1f0c      	subs	r4, r1, #4
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	da00      	bge.n	80096ca <_free_r+0x12>
 80096c8:	18e4      	adds	r4, r4, r3
 80096ca:	0028      	movs	r0, r5
 80096cc:	f001 fd28 	bl	800b120 <__malloc_lock>
 80096d0:	4a1d      	ldr	r2, [pc, #116]	; (8009748 <_free_r+0x90>)
 80096d2:	6813      	ldr	r3, [r2, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d105      	bne.n	80096e4 <_free_r+0x2c>
 80096d8:	6063      	str	r3, [r4, #4]
 80096da:	6014      	str	r4, [r2, #0]
 80096dc:	0028      	movs	r0, r5
 80096de:	f001 fd27 	bl	800b130 <__malloc_unlock>
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	42a3      	cmp	r3, r4
 80096e6:	d908      	bls.n	80096fa <_free_r+0x42>
 80096e8:	6821      	ldr	r1, [r4, #0]
 80096ea:	1860      	adds	r0, r4, r1
 80096ec:	4283      	cmp	r3, r0
 80096ee:	d1f3      	bne.n	80096d8 <_free_r+0x20>
 80096f0:	6818      	ldr	r0, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	1841      	adds	r1, r0, r1
 80096f6:	6021      	str	r1, [r4, #0]
 80096f8:	e7ee      	b.n	80096d8 <_free_r+0x20>
 80096fa:	001a      	movs	r2, r3
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <_free_r+0x4e>
 8009702:	42a3      	cmp	r3, r4
 8009704:	d9f9      	bls.n	80096fa <_free_r+0x42>
 8009706:	6811      	ldr	r1, [r2, #0]
 8009708:	1850      	adds	r0, r2, r1
 800970a:	42a0      	cmp	r0, r4
 800970c:	d10b      	bne.n	8009726 <_free_r+0x6e>
 800970e:	6820      	ldr	r0, [r4, #0]
 8009710:	1809      	adds	r1, r1, r0
 8009712:	1850      	adds	r0, r2, r1
 8009714:	6011      	str	r1, [r2, #0]
 8009716:	4283      	cmp	r3, r0
 8009718:	d1e0      	bne.n	80096dc <_free_r+0x24>
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	1841      	adds	r1, r0, r1
 8009720:	6011      	str	r1, [r2, #0]
 8009722:	6053      	str	r3, [r2, #4]
 8009724:	e7da      	b.n	80096dc <_free_r+0x24>
 8009726:	42a0      	cmp	r0, r4
 8009728:	d902      	bls.n	8009730 <_free_r+0x78>
 800972a:	230c      	movs	r3, #12
 800972c:	602b      	str	r3, [r5, #0]
 800972e:	e7d5      	b.n	80096dc <_free_r+0x24>
 8009730:	6821      	ldr	r1, [r4, #0]
 8009732:	1860      	adds	r0, r4, r1
 8009734:	4283      	cmp	r3, r0
 8009736:	d103      	bne.n	8009740 <_free_r+0x88>
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	1841      	adds	r1, r0, r1
 800973e:	6021      	str	r1, [r4, #0]
 8009740:	6063      	str	r3, [r4, #4]
 8009742:	6054      	str	r4, [r2, #4]
 8009744:	e7ca      	b.n	80096dc <_free_r+0x24>
 8009746:	46c0      	nop			; (mov r8, r8)
 8009748:	200011b0 	.word	0x200011b0

0800974c <sbrk_aligned>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	4e0f      	ldr	r6, [pc, #60]	; (800978c <sbrk_aligned+0x40>)
 8009750:	000d      	movs	r5, r1
 8009752:	6831      	ldr	r1, [r6, #0]
 8009754:	0004      	movs	r4, r0
 8009756:	2900      	cmp	r1, #0
 8009758:	d102      	bne.n	8009760 <sbrk_aligned+0x14>
 800975a:	f000 fcfd 	bl	800a158 <_sbrk_r>
 800975e:	6030      	str	r0, [r6, #0]
 8009760:	0029      	movs	r1, r5
 8009762:	0020      	movs	r0, r4
 8009764:	f000 fcf8 	bl	800a158 <_sbrk_r>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d00a      	beq.n	8009782 <sbrk_aligned+0x36>
 800976c:	2303      	movs	r3, #3
 800976e:	1cc5      	adds	r5, r0, #3
 8009770:	439d      	bics	r5, r3
 8009772:	42a8      	cmp	r0, r5
 8009774:	d007      	beq.n	8009786 <sbrk_aligned+0x3a>
 8009776:	1a29      	subs	r1, r5, r0
 8009778:	0020      	movs	r0, r4
 800977a:	f000 fced 	bl	800a158 <_sbrk_r>
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	d101      	bne.n	8009786 <sbrk_aligned+0x3a>
 8009782:	2501      	movs	r5, #1
 8009784:	426d      	negs	r5, r5
 8009786:	0028      	movs	r0, r5
 8009788:	bd70      	pop	{r4, r5, r6, pc}
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	200011b4 	.word	0x200011b4

08009790 <_malloc_r>:
 8009790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009792:	2203      	movs	r2, #3
 8009794:	1ccb      	adds	r3, r1, #3
 8009796:	4393      	bics	r3, r2
 8009798:	3308      	adds	r3, #8
 800979a:	0006      	movs	r6, r0
 800979c:	001f      	movs	r7, r3
 800979e:	2b0c      	cmp	r3, #12
 80097a0:	d232      	bcs.n	8009808 <_malloc_r+0x78>
 80097a2:	270c      	movs	r7, #12
 80097a4:	42b9      	cmp	r1, r7
 80097a6:	d831      	bhi.n	800980c <_malloc_r+0x7c>
 80097a8:	0030      	movs	r0, r6
 80097aa:	f001 fcb9 	bl	800b120 <__malloc_lock>
 80097ae:	4d32      	ldr	r5, [pc, #200]	; (8009878 <_malloc_r+0xe8>)
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	001c      	movs	r4, r3
 80097b4:	2c00      	cmp	r4, #0
 80097b6:	d12e      	bne.n	8009816 <_malloc_r+0x86>
 80097b8:	0039      	movs	r1, r7
 80097ba:	0030      	movs	r0, r6
 80097bc:	f7ff ffc6 	bl	800974c <sbrk_aligned>
 80097c0:	0004      	movs	r4, r0
 80097c2:	1c43      	adds	r3, r0, #1
 80097c4:	d11e      	bne.n	8009804 <_malloc_r+0x74>
 80097c6:	682c      	ldr	r4, [r5, #0]
 80097c8:	0025      	movs	r5, r4
 80097ca:	2d00      	cmp	r5, #0
 80097cc:	d14a      	bne.n	8009864 <_malloc_r+0xd4>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	0029      	movs	r1, r5
 80097d2:	18e3      	adds	r3, r4, r3
 80097d4:	0030      	movs	r0, r6
 80097d6:	9301      	str	r3, [sp, #4]
 80097d8:	f000 fcbe 	bl	800a158 <_sbrk_r>
 80097dc:	9b01      	ldr	r3, [sp, #4]
 80097de:	4283      	cmp	r3, r0
 80097e0:	d143      	bne.n	800986a <_malloc_r+0xda>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	3703      	adds	r7, #3
 80097e6:	1aff      	subs	r7, r7, r3
 80097e8:	2303      	movs	r3, #3
 80097ea:	439f      	bics	r7, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	2f0c      	cmp	r7, #12
 80097f0:	d200      	bcs.n	80097f4 <_malloc_r+0x64>
 80097f2:	270c      	movs	r7, #12
 80097f4:	0039      	movs	r1, r7
 80097f6:	0030      	movs	r0, r6
 80097f8:	f7ff ffa8 	bl	800974c <sbrk_aligned>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	d034      	beq.n	800986a <_malloc_r+0xda>
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	19df      	adds	r7, r3, r7
 8009804:	6027      	str	r7, [r4, #0]
 8009806:	e013      	b.n	8009830 <_malloc_r+0xa0>
 8009808:	2b00      	cmp	r3, #0
 800980a:	dacb      	bge.n	80097a4 <_malloc_r+0x14>
 800980c:	230c      	movs	r3, #12
 800980e:	2500      	movs	r5, #0
 8009810:	6033      	str	r3, [r6, #0]
 8009812:	0028      	movs	r0, r5
 8009814:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009816:	6822      	ldr	r2, [r4, #0]
 8009818:	1bd1      	subs	r1, r2, r7
 800981a:	d420      	bmi.n	800985e <_malloc_r+0xce>
 800981c:	290b      	cmp	r1, #11
 800981e:	d917      	bls.n	8009850 <_malloc_r+0xc0>
 8009820:	19e2      	adds	r2, r4, r7
 8009822:	6027      	str	r7, [r4, #0]
 8009824:	42a3      	cmp	r3, r4
 8009826:	d111      	bne.n	800984c <_malloc_r+0xbc>
 8009828:	602a      	str	r2, [r5, #0]
 800982a:	6863      	ldr	r3, [r4, #4]
 800982c:	6011      	str	r1, [r2, #0]
 800982e:	6053      	str	r3, [r2, #4]
 8009830:	0030      	movs	r0, r6
 8009832:	0025      	movs	r5, r4
 8009834:	f001 fc7c 	bl	800b130 <__malloc_unlock>
 8009838:	2207      	movs	r2, #7
 800983a:	350b      	adds	r5, #11
 800983c:	1d23      	adds	r3, r4, #4
 800983e:	4395      	bics	r5, r2
 8009840:	1aea      	subs	r2, r5, r3
 8009842:	429d      	cmp	r5, r3
 8009844:	d0e5      	beq.n	8009812 <_malloc_r+0x82>
 8009846:	1b5b      	subs	r3, r3, r5
 8009848:	50a3      	str	r3, [r4, r2]
 800984a:	e7e2      	b.n	8009812 <_malloc_r+0x82>
 800984c:	605a      	str	r2, [r3, #4]
 800984e:	e7ec      	b.n	800982a <_malloc_r+0x9a>
 8009850:	6862      	ldr	r2, [r4, #4]
 8009852:	42a3      	cmp	r3, r4
 8009854:	d101      	bne.n	800985a <_malloc_r+0xca>
 8009856:	602a      	str	r2, [r5, #0]
 8009858:	e7ea      	b.n	8009830 <_malloc_r+0xa0>
 800985a:	605a      	str	r2, [r3, #4]
 800985c:	e7e8      	b.n	8009830 <_malloc_r+0xa0>
 800985e:	0023      	movs	r3, r4
 8009860:	6864      	ldr	r4, [r4, #4]
 8009862:	e7a7      	b.n	80097b4 <_malloc_r+0x24>
 8009864:	002c      	movs	r4, r5
 8009866:	686d      	ldr	r5, [r5, #4]
 8009868:	e7af      	b.n	80097ca <_malloc_r+0x3a>
 800986a:	230c      	movs	r3, #12
 800986c:	0030      	movs	r0, r6
 800986e:	6033      	str	r3, [r6, #0]
 8009870:	f001 fc5e 	bl	800b130 <__malloc_unlock>
 8009874:	e7cd      	b.n	8009812 <_malloc_r+0x82>
 8009876:	46c0      	nop			; (mov r8, r8)
 8009878:	200011b0 	.word	0x200011b0

0800987c <__cvt>:
 800987c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800987e:	001e      	movs	r6, r3
 8009880:	2300      	movs	r3, #0
 8009882:	0014      	movs	r4, r2
 8009884:	b08b      	sub	sp, #44	; 0x2c
 8009886:	429e      	cmp	r6, r3
 8009888:	da04      	bge.n	8009894 <__cvt+0x18>
 800988a:	2180      	movs	r1, #128	; 0x80
 800988c:	0609      	lsls	r1, r1, #24
 800988e:	1873      	adds	r3, r6, r1
 8009890:	001e      	movs	r6, r3
 8009892:	232d      	movs	r3, #45	; 0x2d
 8009894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009896:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009898:	7013      	strb	r3, [r2, #0]
 800989a:	2320      	movs	r3, #32
 800989c:	2203      	movs	r2, #3
 800989e:	439f      	bics	r7, r3
 80098a0:	2f46      	cmp	r7, #70	; 0x46
 80098a2:	d007      	beq.n	80098b4 <__cvt+0x38>
 80098a4:	003b      	movs	r3, r7
 80098a6:	3b45      	subs	r3, #69	; 0x45
 80098a8:	4259      	negs	r1, r3
 80098aa:	414b      	adcs	r3, r1
 80098ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 80098ae:	3a01      	subs	r2, #1
 80098b0:	18cb      	adds	r3, r1, r3
 80098b2:	9310      	str	r3, [sp, #64]	; 0x40
 80098b4:	ab09      	add	r3, sp, #36	; 0x24
 80098b6:	9304      	str	r3, [sp, #16]
 80098b8:	ab08      	add	r3, sp, #32
 80098ba:	9303      	str	r3, [sp, #12]
 80098bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098be:	9200      	str	r2, [sp, #0]
 80098c0:	9302      	str	r3, [sp, #8]
 80098c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098c4:	0022      	movs	r2, r4
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	0033      	movs	r3, r6
 80098ca:	f000 fdef 	bl	800a4ac <_dtoa_r>
 80098ce:	0005      	movs	r5, r0
 80098d0:	2f47      	cmp	r7, #71	; 0x47
 80098d2:	d102      	bne.n	80098da <__cvt+0x5e>
 80098d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098d6:	07db      	lsls	r3, r3, #31
 80098d8:	d528      	bpl.n	800992c <__cvt+0xb0>
 80098da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098dc:	18eb      	adds	r3, r5, r3
 80098de:	9307      	str	r3, [sp, #28]
 80098e0:	2f46      	cmp	r7, #70	; 0x46
 80098e2:	d114      	bne.n	800990e <__cvt+0x92>
 80098e4:	782b      	ldrb	r3, [r5, #0]
 80098e6:	2b30      	cmp	r3, #48	; 0x30
 80098e8:	d10c      	bne.n	8009904 <__cvt+0x88>
 80098ea:	2200      	movs	r2, #0
 80098ec:	2300      	movs	r3, #0
 80098ee:	0020      	movs	r0, r4
 80098f0:	0031      	movs	r1, r6
 80098f2:	f7f6 fdb3 	bl	800045c <__aeabi_dcmpeq>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d104      	bne.n	8009904 <__cvt+0x88>
 80098fa:	2301      	movs	r3, #1
 80098fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098fe:	1a9b      	subs	r3, r3, r2
 8009900:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009902:	6013      	str	r3, [r2, #0]
 8009904:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009906:	9a07      	ldr	r2, [sp, #28]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	18d3      	adds	r3, r2, r3
 800990c:	9307      	str	r3, [sp, #28]
 800990e:	2200      	movs	r2, #0
 8009910:	2300      	movs	r3, #0
 8009912:	0020      	movs	r0, r4
 8009914:	0031      	movs	r1, r6
 8009916:	f7f6 fda1 	bl	800045c <__aeabi_dcmpeq>
 800991a:	2800      	cmp	r0, #0
 800991c:	d001      	beq.n	8009922 <__cvt+0xa6>
 800991e:	9b07      	ldr	r3, [sp, #28]
 8009920:	9309      	str	r3, [sp, #36]	; 0x24
 8009922:	2230      	movs	r2, #48	; 0x30
 8009924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009926:	9907      	ldr	r1, [sp, #28]
 8009928:	428b      	cmp	r3, r1
 800992a:	d306      	bcc.n	800993a <__cvt+0xbe>
 800992c:	0028      	movs	r0, r5
 800992e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009930:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009932:	1b5b      	subs	r3, r3, r5
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	b00b      	add	sp, #44	; 0x2c
 8009938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993a:	1c59      	adds	r1, r3, #1
 800993c:	9109      	str	r1, [sp, #36]	; 0x24
 800993e:	701a      	strb	r2, [r3, #0]
 8009940:	e7f0      	b.n	8009924 <__cvt+0xa8>

08009942 <__exponent>:
 8009942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009944:	1c83      	adds	r3, r0, #2
 8009946:	b087      	sub	sp, #28
 8009948:	9303      	str	r3, [sp, #12]
 800994a:	0005      	movs	r5, r0
 800994c:	000c      	movs	r4, r1
 800994e:	232b      	movs	r3, #43	; 0x2b
 8009950:	7002      	strb	r2, [r0, #0]
 8009952:	2900      	cmp	r1, #0
 8009954:	da01      	bge.n	800995a <__exponent+0x18>
 8009956:	424c      	negs	r4, r1
 8009958:	3302      	adds	r3, #2
 800995a:	706b      	strb	r3, [r5, #1]
 800995c:	2c09      	cmp	r4, #9
 800995e:	dd31      	ble.n	80099c4 <__exponent+0x82>
 8009960:	270a      	movs	r7, #10
 8009962:	ab04      	add	r3, sp, #16
 8009964:	1dde      	adds	r6, r3, #7
 8009966:	0020      	movs	r0, r4
 8009968:	0039      	movs	r1, r7
 800996a:	9601      	str	r6, [sp, #4]
 800996c:	f7f6 fd60 	bl	8000430 <__aeabi_idivmod>
 8009970:	3e01      	subs	r6, #1
 8009972:	3130      	adds	r1, #48	; 0x30
 8009974:	0020      	movs	r0, r4
 8009976:	7031      	strb	r1, [r6, #0]
 8009978:	0039      	movs	r1, r7
 800997a:	9402      	str	r4, [sp, #8]
 800997c:	f7f6 fc72 	bl	8000264 <__divsi3>
 8009980:	9b02      	ldr	r3, [sp, #8]
 8009982:	0004      	movs	r4, r0
 8009984:	2b63      	cmp	r3, #99	; 0x63
 8009986:	dcee      	bgt.n	8009966 <__exponent+0x24>
 8009988:	9b01      	ldr	r3, [sp, #4]
 800998a:	3430      	adds	r4, #48	; 0x30
 800998c:	1e9a      	subs	r2, r3, #2
 800998e:	0013      	movs	r3, r2
 8009990:	9903      	ldr	r1, [sp, #12]
 8009992:	7014      	strb	r4, [r2, #0]
 8009994:	a804      	add	r0, sp, #16
 8009996:	3007      	adds	r0, #7
 8009998:	4298      	cmp	r0, r3
 800999a:	d80e      	bhi.n	80099ba <__exponent+0x78>
 800999c:	ab04      	add	r3, sp, #16
 800999e:	3307      	adds	r3, #7
 80099a0:	2000      	movs	r0, #0
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d804      	bhi.n	80099b0 <__exponent+0x6e>
 80099a6:	ab04      	add	r3, sp, #16
 80099a8:	3009      	adds	r0, #9
 80099aa:	18c0      	adds	r0, r0, r3
 80099ac:	9b01      	ldr	r3, [sp, #4]
 80099ae:	1ac0      	subs	r0, r0, r3
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	1818      	adds	r0, r3, r0
 80099b4:	1b40      	subs	r0, r0, r5
 80099b6:	b007      	add	sp, #28
 80099b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ba:	7818      	ldrb	r0, [r3, #0]
 80099bc:	3301      	adds	r3, #1
 80099be:	7008      	strb	r0, [r1, #0]
 80099c0:	3101      	adds	r1, #1
 80099c2:	e7e7      	b.n	8009994 <__exponent+0x52>
 80099c4:	2330      	movs	r3, #48	; 0x30
 80099c6:	18e4      	adds	r4, r4, r3
 80099c8:	70ab      	strb	r3, [r5, #2]
 80099ca:	1d28      	adds	r0, r5, #4
 80099cc:	70ec      	strb	r4, [r5, #3]
 80099ce:	e7f1      	b.n	80099b4 <__exponent+0x72>

080099d0 <_printf_float>:
 80099d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d2:	b095      	sub	sp, #84	; 0x54
 80099d4:	000c      	movs	r4, r1
 80099d6:	9209      	str	r2, [sp, #36]	; 0x24
 80099d8:	001e      	movs	r6, r3
 80099da:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80099dc:	0007      	movs	r7, r0
 80099de:	f001 fb8f 	bl	800b100 <_localeconv_r>
 80099e2:	6803      	ldr	r3, [r0, #0]
 80099e4:	0018      	movs	r0, r3
 80099e6:	930c      	str	r3, [sp, #48]	; 0x30
 80099e8:	f7f6 fb96 	bl	8000118 <strlen>
 80099ec:	2300      	movs	r3, #0
 80099ee:	9312      	str	r3, [sp, #72]	; 0x48
 80099f0:	7e23      	ldrb	r3, [r4, #24]
 80099f2:	2207      	movs	r2, #7
 80099f4:	930a      	str	r3, [sp, #40]	; 0x28
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	900e      	str	r0, [sp, #56]	; 0x38
 80099fa:	930d      	str	r3, [sp, #52]	; 0x34
 80099fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80099fe:	682b      	ldr	r3, [r5, #0]
 8009a00:	05c9      	lsls	r1, r1, #23
 8009a02:	d547      	bpl.n	8009a94 <_printf_float+0xc4>
 8009a04:	189b      	adds	r3, r3, r2
 8009a06:	4393      	bics	r3, r2
 8009a08:	001a      	movs	r2, r3
 8009a0a:	3208      	adds	r2, #8
 8009a0c:	602a      	str	r2, [r5, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	64a2      	str	r2, [r4, #72]	; 0x48
 8009a14:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009a16:	2201      	movs	r2, #1
 8009a18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009a1a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a1e:	006b      	lsls	r3, r5, #1
 8009a20:	085b      	lsrs	r3, r3, #1
 8009a22:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a24:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a26:	4ba7      	ldr	r3, [pc, #668]	; (8009cc4 <_printf_float+0x2f4>)
 8009a28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a2a:	4252      	negs	r2, r2
 8009a2c:	f7f9 f9da 	bl	8002de4 <__aeabi_dcmpun>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d131      	bne.n	8009a98 <_printf_float+0xc8>
 8009a34:	2201      	movs	r2, #1
 8009a36:	4ba3      	ldr	r3, [pc, #652]	; (8009cc4 <_printf_float+0x2f4>)
 8009a38:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a3c:	4252      	negs	r2, r2
 8009a3e:	f7f6 fd1d 	bl	800047c <__aeabi_dcmple>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d128      	bne.n	8009a98 <_printf_float+0xc8>
 8009a46:	2200      	movs	r2, #0
 8009a48:	2300      	movs	r3, #0
 8009a4a:	0029      	movs	r1, r5
 8009a4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a4e:	f7f6 fd0b 	bl	8000468 <__aeabi_dcmplt>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d003      	beq.n	8009a5e <_printf_float+0x8e>
 8009a56:	0023      	movs	r3, r4
 8009a58:	222d      	movs	r2, #45	; 0x2d
 8009a5a:	3343      	adds	r3, #67	; 0x43
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a60:	4d99      	ldr	r5, [pc, #612]	; (8009cc8 <_printf_float+0x2f8>)
 8009a62:	2b47      	cmp	r3, #71	; 0x47
 8009a64:	d900      	bls.n	8009a68 <_printf_float+0x98>
 8009a66:	4d99      	ldr	r5, [pc, #612]	; (8009ccc <_printf_float+0x2fc>)
 8009a68:	2303      	movs	r3, #3
 8009a6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a6c:	6123      	str	r3, [r4, #16]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	439a      	bics	r2, r3
 8009a72:	2300      	movs	r3, #0
 8009a74:	6022      	str	r2, [r4, #0]
 8009a76:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a7a:	0021      	movs	r1, r4
 8009a7c:	0038      	movs	r0, r7
 8009a7e:	9600      	str	r6, [sp, #0]
 8009a80:	aa13      	add	r2, sp, #76	; 0x4c
 8009a82:	f000 f9e7 	bl	8009e54 <_printf_common>
 8009a86:	1c43      	adds	r3, r0, #1
 8009a88:	d000      	beq.n	8009a8c <_printf_float+0xbc>
 8009a8a:	e0a2      	b.n	8009bd2 <_printf_float+0x202>
 8009a8c:	2001      	movs	r0, #1
 8009a8e:	4240      	negs	r0, r0
 8009a90:	b015      	add	sp, #84	; 0x54
 8009a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a94:	3307      	adds	r3, #7
 8009a96:	e7b6      	b.n	8009a06 <_printf_float+0x36>
 8009a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a9a:	002b      	movs	r3, r5
 8009a9c:	0010      	movs	r0, r2
 8009a9e:	0029      	movs	r1, r5
 8009aa0:	f7f9 f9a0 	bl	8002de4 <__aeabi_dcmpun>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d00b      	beq.n	8009ac0 <_printf_float+0xf0>
 8009aa8:	2d00      	cmp	r5, #0
 8009aaa:	da03      	bge.n	8009ab4 <_printf_float+0xe4>
 8009aac:	0023      	movs	r3, r4
 8009aae:	222d      	movs	r2, #45	; 0x2d
 8009ab0:	3343      	adds	r3, #67	; 0x43
 8009ab2:	701a      	strb	r2, [r3, #0]
 8009ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab6:	4d86      	ldr	r5, [pc, #536]	; (8009cd0 <_printf_float+0x300>)
 8009ab8:	2b47      	cmp	r3, #71	; 0x47
 8009aba:	d9d5      	bls.n	8009a68 <_printf_float+0x98>
 8009abc:	4d85      	ldr	r5, [pc, #532]	; (8009cd4 <_printf_float+0x304>)
 8009abe:	e7d3      	b.n	8009a68 <_printf_float+0x98>
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ac4:	6863      	ldr	r3, [r4, #4]
 8009ac6:	4391      	bics	r1, r2
 8009ac8:	910f      	str	r1, [sp, #60]	; 0x3c
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	d149      	bne.n	8009b62 <_printf_float+0x192>
 8009ace:	3307      	adds	r3, #7
 8009ad0:	6063      	str	r3, [r4, #4]
 8009ad2:	2380      	movs	r3, #128	; 0x80
 8009ad4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	2200      	movs	r2, #0
 8009adc:	9206      	str	r2, [sp, #24]
 8009ade:	aa12      	add	r2, sp, #72	; 0x48
 8009ae0:	9205      	str	r2, [sp, #20]
 8009ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ae4:	a908      	add	r1, sp, #32
 8009ae6:	9204      	str	r2, [sp, #16]
 8009ae8:	aa11      	add	r2, sp, #68	; 0x44
 8009aea:	9203      	str	r2, [sp, #12]
 8009aec:	2223      	movs	r2, #35	; 0x23
 8009aee:	6023      	str	r3, [r4, #0]
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	6863      	ldr	r3, [r4, #4]
 8009af4:	1852      	adds	r2, r2, r1
 8009af6:	9202      	str	r2, [sp, #8]
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	0038      	movs	r0, r7
 8009afc:	002b      	movs	r3, r5
 8009afe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b00:	f7ff febc 	bl	800987c <__cvt>
 8009b04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b06:	0005      	movs	r5, r0
 8009b08:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b0a:	2b47      	cmp	r3, #71	; 0x47
 8009b0c:	d108      	bne.n	8009b20 <_printf_float+0x150>
 8009b0e:	1ccb      	adds	r3, r1, #3
 8009b10:	db02      	blt.n	8009b18 <_printf_float+0x148>
 8009b12:	6863      	ldr	r3, [r4, #4]
 8009b14:	4299      	cmp	r1, r3
 8009b16:	dd48      	ble.n	8009baa <_printf_float+0x1da>
 8009b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b1a:	3b02      	subs	r3, #2
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b22:	2b65      	cmp	r3, #101	; 0x65
 8009b24:	d824      	bhi.n	8009b70 <_printf_float+0x1a0>
 8009b26:	0020      	movs	r0, r4
 8009b28:	001a      	movs	r2, r3
 8009b2a:	3901      	subs	r1, #1
 8009b2c:	3050      	adds	r0, #80	; 0x50
 8009b2e:	9111      	str	r1, [sp, #68]	; 0x44
 8009b30:	f7ff ff07 	bl	8009942 <__exponent>
 8009b34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b36:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b38:	1813      	adds	r3, r2, r0
 8009b3a:	6123      	str	r3, [r4, #16]
 8009b3c:	2a01      	cmp	r2, #1
 8009b3e:	dc02      	bgt.n	8009b46 <_printf_float+0x176>
 8009b40:	6822      	ldr	r2, [r4, #0]
 8009b42:	07d2      	lsls	r2, r2, #31
 8009b44:	d501      	bpl.n	8009b4a <_printf_float+0x17a>
 8009b46:	3301      	adds	r3, #1
 8009b48:	6123      	str	r3, [r4, #16]
 8009b4a:	2323      	movs	r3, #35	; 0x23
 8009b4c:	aa08      	add	r2, sp, #32
 8009b4e:	189b      	adds	r3, r3, r2
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d100      	bne.n	8009b58 <_printf_float+0x188>
 8009b56:	e78f      	b.n	8009a78 <_printf_float+0xa8>
 8009b58:	0023      	movs	r3, r4
 8009b5a:	222d      	movs	r2, #45	; 0x2d
 8009b5c:	3343      	adds	r3, #67	; 0x43
 8009b5e:	701a      	strb	r2, [r3, #0]
 8009b60:	e78a      	b.n	8009a78 <_printf_float+0xa8>
 8009b62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b64:	2a47      	cmp	r2, #71	; 0x47
 8009b66:	d1b4      	bne.n	8009ad2 <_printf_float+0x102>
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1b2      	bne.n	8009ad2 <_printf_float+0x102>
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	e7af      	b.n	8009ad0 <_printf_float+0x100>
 8009b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b72:	2b66      	cmp	r3, #102	; 0x66
 8009b74:	d11b      	bne.n	8009bae <_printf_float+0x1de>
 8009b76:	6863      	ldr	r3, [r4, #4]
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	dd0d      	ble.n	8009b98 <_printf_float+0x1c8>
 8009b7c:	6121      	str	r1, [r4, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d102      	bne.n	8009b88 <_printf_float+0x1b8>
 8009b82:	6822      	ldr	r2, [r4, #0]
 8009b84:	07d2      	lsls	r2, r2, #31
 8009b86:	d502      	bpl.n	8009b8e <_printf_float+0x1be>
 8009b88:	3301      	adds	r3, #1
 8009b8a:	1859      	adds	r1, r3, r1
 8009b8c:	6121      	str	r1, [r4, #16]
 8009b8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b90:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b92:	2300      	movs	r3, #0
 8009b94:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b96:	e7d8      	b.n	8009b4a <_printf_float+0x17a>
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d103      	bne.n	8009ba4 <_printf_float+0x1d4>
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	6821      	ldr	r1, [r4, #0]
 8009ba0:	4211      	tst	r1, r2
 8009ba2:	d000      	beq.n	8009ba6 <_printf_float+0x1d6>
 8009ba4:	1c9a      	adds	r2, r3, #2
 8009ba6:	6122      	str	r2, [r4, #16]
 8009ba8:	e7f1      	b.n	8009b8e <_printf_float+0x1be>
 8009baa:	2367      	movs	r3, #103	; 0x67
 8009bac:	930a      	str	r3, [sp, #40]	; 0x28
 8009bae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	db06      	blt.n	8009bc4 <_printf_float+0x1f4>
 8009bb6:	6822      	ldr	r2, [r4, #0]
 8009bb8:	6123      	str	r3, [r4, #16]
 8009bba:	07d2      	lsls	r2, r2, #31
 8009bbc:	d5e7      	bpl.n	8009b8e <_printf_float+0x1be>
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	6123      	str	r3, [r4, #16]
 8009bc2:	e7e4      	b.n	8009b8e <_printf_float+0x1be>
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	dc01      	bgt.n	8009bce <_printf_float+0x1fe>
 8009bca:	1849      	adds	r1, r1, r1
 8009bcc:	1ac9      	subs	r1, r1, r3
 8009bce:	1852      	adds	r2, r2, r1
 8009bd0:	e7e9      	b.n	8009ba6 <_printf_float+0x1d6>
 8009bd2:	6822      	ldr	r2, [r4, #0]
 8009bd4:	0553      	lsls	r3, r2, #21
 8009bd6:	d407      	bmi.n	8009be8 <_printf_float+0x218>
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	002a      	movs	r2, r5
 8009bdc:	0038      	movs	r0, r7
 8009bde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009be0:	47b0      	blx	r6
 8009be2:	1c43      	adds	r3, r0, #1
 8009be4:	d128      	bne.n	8009c38 <_printf_float+0x268>
 8009be6:	e751      	b.n	8009a8c <_printf_float+0xbc>
 8009be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bea:	2b65      	cmp	r3, #101	; 0x65
 8009bec:	d800      	bhi.n	8009bf0 <_printf_float+0x220>
 8009bee:	e0e1      	b.n	8009db4 <_printf_float+0x3e4>
 8009bf0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009bf2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f7f6 fc30 	bl	800045c <__aeabi_dcmpeq>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d031      	beq.n	8009c64 <_printf_float+0x294>
 8009c00:	2301      	movs	r3, #1
 8009c02:	0038      	movs	r0, r7
 8009c04:	4a34      	ldr	r2, [pc, #208]	; (8009cd8 <_printf_float+0x308>)
 8009c06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c08:	47b0      	blx	r6
 8009c0a:	1c43      	adds	r3, r0, #1
 8009c0c:	d100      	bne.n	8009c10 <_printf_float+0x240>
 8009c0e:	e73d      	b.n	8009a8c <_printf_float+0xbc>
 8009c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c14:	4293      	cmp	r3, r2
 8009c16:	db02      	blt.n	8009c1e <_printf_float+0x24e>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	07db      	lsls	r3, r3, #31
 8009c1c:	d50c      	bpl.n	8009c38 <_printf_float+0x268>
 8009c1e:	0038      	movs	r0, r7
 8009c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c26:	47b0      	blx	r6
 8009c28:	2500      	movs	r5, #0
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	d100      	bne.n	8009c30 <_printf_float+0x260>
 8009c2e:	e72d      	b.n	8009a8c <_printf_float+0xbc>
 8009c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c32:	3b01      	subs	r3, #1
 8009c34:	42ab      	cmp	r3, r5
 8009c36:	dc0a      	bgt.n	8009c4e <_printf_float+0x27e>
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	079b      	lsls	r3, r3, #30
 8009c3c:	d500      	bpl.n	8009c40 <_printf_float+0x270>
 8009c3e:	e106      	b.n	8009e4e <_printf_float+0x47e>
 8009c40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c42:	68e0      	ldr	r0, [r4, #12]
 8009c44:	4298      	cmp	r0, r3
 8009c46:	db00      	blt.n	8009c4a <_printf_float+0x27a>
 8009c48:	e722      	b.n	8009a90 <_printf_float+0xc0>
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	e720      	b.n	8009a90 <_printf_float+0xc0>
 8009c4e:	0022      	movs	r2, r4
 8009c50:	2301      	movs	r3, #1
 8009c52:	0038      	movs	r0, r7
 8009c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c56:	321a      	adds	r2, #26
 8009c58:	47b0      	blx	r6
 8009c5a:	1c43      	adds	r3, r0, #1
 8009c5c:	d100      	bne.n	8009c60 <_printf_float+0x290>
 8009c5e:	e715      	b.n	8009a8c <_printf_float+0xbc>
 8009c60:	3501      	adds	r5, #1
 8009c62:	e7e5      	b.n	8009c30 <_printf_float+0x260>
 8009c64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	dc38      	bgt.n	8009cdc <_printf_float+0x30c>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	0038      	movs	r0, r7
 8009c6e:	4a1a      	ldr	r2, [pc, #104]	; (8009cd8 <_printf_float+0x308>)
 8009c70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c72:	47b0      	blx	r6
 8009c74:	1c43      	adds	r3, r0, #1
 8009c76:	d100      	bne.n	8009c7a <_printf_float+0x2aa>
 8009c78:	e708      	b.n	8009a8c <_printf_float+0xbc>
 8009c7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	d102      	bne.n	8009c88 <_printf_float+0x2b8>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	07db      	lsls	r3, r3, #31
 8009c86:	d5d7      	bpl.n	8009c38 <_printf_float+0x268>
 8009c88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c8a:	0038      	movs	r0, r7
 8009c8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c90:	47b0      	blx	r6
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	d100      	bne.n	8009c98 <_printf_float+0x2c8>
 8009c96:	e6f9      	b.n	8009a8c <_printf_float+0xbc>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ca0:	425b      	negs	r3, r3
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	dc01      	bgt.n	8009caa <_printf_float+0x2da>
 8009ca6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ca8:	e797      	b.n	8009bda <_printf_float+0x20a>
 8009caa:	0022      	movs	r2, r4
 8009cac:	2301      	movs	r3, #1
 8009cae:	0038      	movs	r0, r7
 8009cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cb2:	321a      	adds	r2, #26
 8009cb4:	47b0      	blx	r6
 8009cb6:	1c43      	adds	r3, r0, #1
 8009cb8:	d100      	bne.n	8009cbc <_printf_float+0x2ec>
 8009cba:	e6e7      	b.n	8009a8c <_printf_float+0xbc>
 8009cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	e7eb      	b.n	8009c9a <_printf_float+0x2ca>
 8009cc2:	46c0      	nop			; (mov r8, r8)
 8009cc4:	7fefffff 	.word	0x7fefffff
 8009cc8:	0800d4bc 	.word	0x0800d4bc
 8009ccc:	0800d4c0 	.word	0x0800d4c0
 8009cd0:	0800d4c4 	.word	0x0800d4c4
 8009cd4:	0800d4c8 	.word	0x0800d4c8
 8009cd8:	0800d4cc 	.word	0x0800d4cc
 8009cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ce0:	920a      	str	r2, [sp, #40]	; 0x28
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	dd00      	ble.n	8009ce8 <_printf_float+0x318>
 8009ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dc3c      	bgt.n	8009d68 <_printf_float+0x398>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	930d      	str	r3, [sp, #52]	; 0x34
 8009cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf4:	43db      	mvns	r3, r3
 8009cf6:	17db      	asrs	r3, r3, #31
 8009cf8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d02:	4013      	ands	r3, r2
 8009d04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	dc34      	bgt.n	8009d78 <_printf_float+0x3a8>
 8009d0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d12:	4293      	cmp	r3, r2
 8009d14:	db3d      	blt.n	8009d92 <_printf_float+0x3c2>
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	07db      	lsls	r3, r3, #31
 8009d1a:	d43a      	bmi.n	8009d92 <_printf_float+0x3c2>
 8009d1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d20:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	1a52      	subs	r2, r2, r1
 8009d26:	920a      	str	r2, [sp, #40]	; 0x28
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	dd00      	ble.n	8009d2e <_printf_float+0x35e>
 8009d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8009d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	dc36      	bgt.n	8009da2 <_printf_float+0x3d2>
 8009d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d36:	2500      	movs	r5, #0
 8009d38:	43db      	mvns	r3, r3
 8009d3a:	17db      	asrs	r3, r3, #31
 8009d3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d48:	400a      	ands	r2, r1
 8009d4a:	1a9b      	subs	r3, r3, r2
 8009d4c:	42ab      	cmp	r3, r5
 8009d4e:	dc00      	bgt.n	8009d52 <_printf_float+0x382>
 8009d50:	e772      	b.n	8009c38 <_printf_float+0x268>
 8009d52:	0022      	movs	r2, r4
 8009d54:	2301      	movs	r3, #1
 8009d56:	0038      	movs	r0, r7
 8009d58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d5a:	321a      	adds	r2, #26
 8009d5c:	47b0      	blx	r6
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	d100      	bne.n	8009d64 <_printf_float+0x394>
 8009d62:	e693      	b.n	8009a8c <_printf_float+0xbc>
 8009d64:	3501      	adds	r5, #1
 8009d66:	e7ea      	b.n	8009d3e <_printf_float+0x36e>
 8009d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d6a:	002a      	movs	r2, r5
 8009d6c:	0038      	movs	r0, r7
 8009d6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d70:	47b0      	blx	r6
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d1bb      	bne.n	8009cee <_printf_float+0x31e>
 8009d76:	e689      	b.n	8009a8c <_printf_float+0xbc>
 8009d78:	0022      	movs	r2, r4
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	0038      	movs	r0, r7
 8009d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d80:	321a      	adds	r2, #26
 8009d82:	47b0      	blx	r6
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d100      	bne.n	8009d8a <_printf_float+0x3ba>
 8009d88:	e680      	b.n	8009a8c <_printf_float+0xbc>
 8009d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	930d      	str	r3, [sp, #52]	; 0x34
 8009d90:	e7b3      	b.n	8009cfa <_printf_float+0x32a>
 8009d92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d94:	0038      	movs	r0, r7
 8009d96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d9a:	47b0      	blx	r6
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d1bd      	bne.n	8009d1c <_printf_float+0x34c>
 8009da0:	e674      	b.n	8009a8c <_printf_float+0xbc>
 8009da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da4:	0038      	movs	r0, r7
 8009da6:	18ea      	adds	r2, r5, r3
 8009da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dac:	47b0      	blx	r6
 8009dae:	1c43      	adds	r3, r0, #1
 8009db0:	d1c0      	bne.n	8009d34 <_printf_float+0x364>
 8009db2:	e66b      	b.n	8009a8c <_printf_float+0xbc>
 8009db4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	dc02      	bgt.n	8009dc0 <_printf_float+0x3f0>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	421a      	tst	r2, r3
 8009dbe:	d034      	beq.n	8009e2a <_printf_float+0x45a>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	002a      	movs	r2, r5
 8009dc4:	0038      	movs	r0, r7
 8009dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dc8:	47b0      	blx	r6
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	d100      	bne.n	8009dd0 <_printf_float+0x400>
 8009dce:	e65d      	b.n	8009a8c <_printf_float+0xbc>
 8009dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dd2:	0038      	movs	r0, r7
 8009dd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dd8:	47b0      	blx	r6
 8009dda:	1c43      	adds	r3, r0, #1
 8009ddc:	d100      	bne.n	8009de0 <_printf_float+0x410>
 8009dde:	e655      	b.n	8009a8c <_printf_float+0xbc>
 8009de0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009de2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009de4:	2200      	movs	r2, #0
 8009de6:	2300      	movs	r3, #0
 8009de8:	f7f6 fb38 	bl	800045c <__aeabi_dcmpeq>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d11a      	bne.n	8009e26 <_printf_float+0x456>
 8009df0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009df2:	1c6a      	adds	r2, r5, #1
 8009df4:	3b01      	subs	r3, #1
 8009df6:	0038      	movs	r0, r7
 8009df8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dfa:	47b0      	blx	r6
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d10e      	bne.n	8009e1e <_printf_float+0x44e>
 8009e00:	e644      	b.n	8009a8c <_printf_float+0xbc>
 8009e02:	0022      	movs	r2, r4
 8009e04:	2301      	movs	r3, #1
 8009e06:	0038      	movs	r0, r7
 8009e08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e0a:	321a      	adds	r2, #26
 8009e0c:	47b0      	blx	r6
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d100      	bne.n	8009e14 <_printf_float+0x444>
 8009e12:	e63b      	b.n	8009a8c <_printf_float+0xbc>
 8009e14:	3501      	adds	r5, #1
 8009e16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	42ab      	cmp	r3, r5
 8009e1c:	dcf1      	bgt.n	8009e02 <_printf_float+0x432>
 8009e1e:	0022      	movs	r2, r4
 8009e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e22:	3250      	adds	r2, #80	; 0x50
 8009e24:	e6da      	b.n	8009bdc <_printf_float+0x20c>
 8009e26:	2500      	movs	r5, #0
 8009e28:	e7f5      	b.n	8009e16 <_printf_float+0x446>
 8009e2a:	002a      	movs	r2, r5
 8009e2c:	e7e3      	b.n	8009df6 <_printf_float+0x426>
 8009e2e:	0022      	movs	r2, r4
 8009e30:	2301      	movs	r3, #1
 8009e32:	0038      	movs	r0, r7
 8009e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e36:	3219      	adds	r2, #25
 8009e38:	47b0      	blx	r6
 8009e3a:	1c43      	adds	r3, r0, #1
 8009e3c:	d100      	bne.n	8009e40 <_printf_float+0x470>
 8009e3e:	e625      	b.n	8009a8c <_printf_float+0xbc>
 8009e40:	3501      	adds	r5, #1
 8009e42:	68e3      	ldr	r3, [r4, #12]
 8009e44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e46:	1a9b      	subs	r3, r3, r2
 8009e48:	42ab      	cmp	r3, r5
 8009e4a:	dcf0      	bgt.n	8009e2e <_printf_float+0x45e>
 8009e4c:	e6f8      	b.n	8009c40 <_printf_float+0x270>
 8009e4e:	2500      	movs	r5, #0
 8009e50:	e7f7      	b.n	8009e42 <_printf_float+0x472>
 8009e52:	46c0      	nop			; (mov r8, r8)

08009e54 <_printf_common>:
 8009e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e56:	0015      	movs	r5, r2
 8009e58:	9301      	str	r3, [sp, #4]
 8009e5a:	688a      	ldr	r2, [r1, #8]
 8009e5c:	690b      	ldr	r3, [r1, #16]
 8009e5e:	000c      	movs	r4, r1
 8009e60:	9000      	str	r0, [sp, #0]
 8009e62:	4293      	cmp	r3, r2
 8009e64:	da00      	bge.n	8009e68 <_printf_common+0x14>
 8009e66:	0013      	movs	r3, r2
 8009e68:	0022      	movs	r2, r4
 8009e6a:	602b      	str	r3, [r5, #0]
 8009e6c:	3243      	adds	r2, #67	; 0x43
 8009e6e:	7812      	ldrb	r2, [r2, #0]
 8009e70:	2a00      	cmp	r2, #0
 8009e72:	d001      	beq.n	8009e78 <_printf_common+0x24>
 8009e74:	3301      	adds	r3, #1
 8009e76:	602b      	str	r3, [r5, #0]
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	069b      	lsls	r3, r3, #26
 8009e7c:	d502      	bpl.n	8009e84 <_printf_common+0x30>
 8009e7e:	682b      	ldr	r3, [r5, #0]
 8009e80:	3302      	adds	r3, #2
 8009e82:	602b      	str	r3, [r5, #0]
 8009e84:	6822      	ldr	r2, [r4, #0]
 8009e86:	2306      	movs	r3, #6
 8009e88:	0017      	movs	r7, r2
 8009e8a:	401f      	ands	r7, r3
 8009e8c:	421a      	tst	r2, r3
 8009e8e:	d027      	beq.n	8009ee0 <_printf_common+0x8c>
 8009e90:	0023      	movs	r3, r4
 8009e92:	3343      	adds	r3, #67	; 0x43
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	1e5a      	subs	r2, r3, #1
 8009e98:	4193      	sbcs	r3, r2
 8009e9a:	6822      	ldr	r2, [r4, #0]
 8009e9c:	0692      	lsls	r2, r2, #26
 8009e9e:	d430      	bmi.n	8009f02 <_printf_common+0xae>
 8009ea0:	0022      	movs	r2, r4
 8009ea2:	9901      	ldr	r1, [sp, #4]
 8009ea4:	9800      	ldr	r0, [sp, #0]
 8009ea6:	9e08      	ldr	r6, [sp, #32]
 8009ea8:	3243      	adds	r2, #67	; 0x43
 8009eaa:	47b0      	blx	r6
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	d025      	beq.n	8009efc <_printf_common+0xa8>
 8009eb0:	2306      	movs	r3, #6
 8009eb2:	6820      	ldr	r0, [r4, #0]
 8009eb4:	682a      	ldr	r2, [r5, #0]
 8009eb6:	68e1      	ldr	r1, [r4, #12]
 8009eb8:	2500      	movs	r5, #0
 8009eba:	4003      	ands	r3, r0
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d103      	bne.n	8009ec8 <_printf_common+0x74>
 8009ec0:	1a8d      	subs	r5, r1, r2
 8009ec2:	43eb      	mvns	r3, r5
 8009ec4:	17db      	asrs	r3, r3, #31
 8009ec6:	401d      	ands	r5, r3
 8009ec8:	68a3      	ldr	r3, [r4, #8]
 8009eca:	6922      	ldr	r2, [r4, #16]
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	dd01      	ble.n	8009ed4 <_printf_common+0x80>
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	18ed      	adds	r5, r5, r3
 8009ed4:	2700      	movs	r7, #0
 8009ed6:	42bd      	cmp	r5, r7
 8009ed8:	d120      	bne.n	8009f1c <_printf_common+0xc8>
 8009eda:	2000      	movs	r0, #0
 8009edc:	e010      	b.n	8009f00 <_printf_common+0xac>
 8009ede:	3701      	adds	r7, #1
 8009ee0:	68e3      	ldr	r3, [r4, #12]
 8009ee2:	682a      	ldr	r2, [r5, #0]
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	42bb      	cmp	r3, r7
 8009ee8:	ddd2      	ble.n	8009e90 <_printf_common+0x3c>
 8009eea:	0022      	movs	r2, r4
 8009eec:	2301      	movs	r3, #1
 8009eee:	9901      	ldr	r1, [sp, #4]
 8009ef0:	9800      	ldr	r0, [sp, #0]
 8009ef2:	9e08      	ldr	r6, [sp, #32]
 8009ef4:	3219      	adds	r2, #25
 8009ef6:	47b0      	blx	r6
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d1f0      	bne.n	8009ede <_printf_common+0x8a>
 8009efc:	2001      	movs	r0, #1
 8009efe:	4240      	negs	r0, r0
 8009f00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f02:	2030      	movs	r0, #48	; 0x30
 8009f04:	18e1      	adds	r1, r4, r3
 8009f06:	3143      	adds	r1, #67	; 0x43
 8009f08:	7008      	strb	r0, [r1, #0]
 8009f0a:	0021      	movs	r1, r4
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	3145      	adds	r1, #69	; 0x45
 8009f10:	7809      	ldrb	r1, [r1, #0]
 8009f12:	18a2      	adds	r2, r4, r2
 8009f14:	3243      	adds	r2, #67	; 0x43
 8009f16:	3302      	adds	r3, #2
 8009f18:	7011      	strb	r1, [r2, #0]
 8009f1a:	e7c1      	b.n	8009ea0 <_printf_common+0x4c>
 8009f1c:	0022      	movs	r2, r4
 8009f1e:	2301      	movs	r3, #1
 8009f20:	9901      	ldr	r1, [sp, #4]
 8009f22:	9800      	ldr	r0, [sp, #0]
 8009f24:	9e08      	ldr	r6, [sp, #32]
 8009f26:	321a      	adds	r2, #26
 8009f28:	47b0      	blx	r6
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	d0e6      	beq.n	8009efc <_printf_common+0xa8>
 8009f2e:	3701      	adds	r7, #1
 8009f30:	e7d1      	b.n	8009ed6 <_printf_common+0x82>
	...

08009f34 <_printf_i>:
 8009f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f36:	b08b      	sub	sp, #44	; 0x2c
 8009f38:	9206      	str	r2, [sp, #24]
 8009f3a:	000a      	movs	r2, r1
 8009f3c:	3243      	adds	r2, #67	; 0x43
 8009f3e:	9307      	str	r3, [sp, #28]
 8009f40:	9005      	str	r0, [sp, #20]
 8009f42:	9204      	str	r2, [sp, #16]
 8009f44:	7e0a      	ldrb	r2, [r1, #24]
 8009f46:	000c      	movs	r4, r1
 8009f48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f4a:	2a78      	cmp	r2, #120	; 0x78
 8009f4c:	d807      	bhi.n	8009f5e <_printf_i+0x2a>
 8009f4e:	2a62      	cmp	r2, #98	; 0x62
 8009f50:	d809      	bhi.n	8009f66 <_printf_i+0x32>
 8009f52:	2a00      	cmp	r2, #0
 8009f54:	d100      	bne.n	8009f58 <_printf_i+0x24>
 8009f56:	e0c1      	b.n	800a0dc <_printf_i+0x1a8>
 8009f58:	2a58      	cmp	r2, #88	; 0x58
 8009f5a:	d100      	bne.n	8009f5e <_printf_i+0x2a>
 8009f5c:	e08c      	b.n	800a078 <_printf_i+0x144>
 8009f5e:	0026      	movs	r6, r4
 8009f60:	3642      	adds	r6, #66	; 0x42
 8009f62:	7032      	strb	r2, [r6, #0]
 8009f64:	e022      	b.n	8009fac <_printf_i+0x78>
 8009f66:	0010      	movs	r0, r2
 8009f68:	3863      	subs	r0, #99	; 0x63
 8009f6a:	2815      	cmp	r0, #21
 8009f6c:	d8f7      	bhi.n	8009f5e <_printf_i+0x2a>
 8009f6e:	f7f6 f8e5 	bl	800013c <__gnu_thumb1_case_shi>
 8009f72:	0016      	.short	0x0016
 8009f74:	fff6001f 	.word	0xfff6001f
 8009f78:	fff6fff6 	.word	0xfff6fff6
 8009f7c:	001ffff6 	.word	0x001ffff6
 8009f80:	fff6fff6 	.word	0xfff6fff6
 8009f84:	fff6fff6 	.word	0xfff6fff6
 8009f88:	003600a8 	.word	0x003600a8
 8009f8c:	fff6009a 	.word	0xfff6009a
 8009f90:	00b9fff6 	.word	0x00b9fff6
 8009f94:	0036fff6 	.word	0x0036fff6
 8009f98:	fff6fff6 	.word	0xfff6fff6
 8009f9c:	009e      	.short	0x009e
 8009f9e:	0026      	movs	r6, r4
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	3642      	adds	r6, #66	; 0x42
 8009fa4:	1d11      	adds	r1, r2, #4
 8009fa6:	6019      	str	r1, [r3, #0]
 8009fa8:	6813      	ldr	r3, [r2, #0]
 8009faa:	7033      	strb	r3, [r6, #0]
 8009fac:	2301      	movs	r3, #1
 8009fae:	e0a7      	b.n	800a100 <_printf_i+0x1cc>
 8009fb0:	6808      	ldr	r0, [r1, #0]
 8009fb2:	6819      	ldr	r1, [r3, #0]
 8009fb4:	1d0a      	adds	r2, r1, #4
 8009fb6:	0605      	lsls	r5, r0, #24
 8009fb8:	d50b      	bpl.n	8009fd2 <_printf_i+0x9e>
 8009fba:	680d      	ldr	r5, [r1, #0]
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	2d00      	cmp	r5, #0
 8009fc0:	da03      	bge.n	8009fca <_printf_i+0x96>
 8009fc2:	232d      	movs	r3, #45	; 0x2d
 8009fc4:	9a04      	ldr	r2, [sp, #16]
 8009fc6:	426d      	negs	r5, r5
 8009fc8:	7013      	strb	r3, [r2, #0]
 8009fca:	4b61      	ldr	r3, [pc, #388]	; (800a150 <_printf_i+0x21c>)
 8009fcc:	270a      	movs	r7, #10
 8009fce:	9303      	str	r3, [sp, #12]
 8009fd0:	e01b      	b.n	800a00a <_printf_i+0xd6>
 8009fd2:	680d      	ldr	r5, [r1, #0]
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	0641      	lsls	r1, r0, #25
 8009fd8:	d5f1      	bpl.n	8009fbe <_printf_i+0x8a>
 8009fda:	b22d      	sxth	r5, r5
 8009fdc:	e7ef      	b.n	8009fbe <_printf_i+0x8a>
 8009fde:	680d      	ldr	r5, [r1, #0]
 8009fe0:	6819      	ldr	r1, [r3, #0]
 8009fe2:	1d08      	adds	r0, r1, #4
 8009fe4:	6018      	str	r0, [r3, #0]
 8009fe6:	062e      	lsls	r6, r5, #24
 8009fe8:	d501      	bpl.n	8009fee <_printf_i+0xba>
 8009fea:	680d      	ldr	r5, [r1, #0]
 8009fec:	e003      	b.n	8009ff6 <_printf_i+0xc2>
 8009fee:	066d      	lsls	r5, r5, #25
 8009ff0:	d5fb      	bpl.n	8009fea <_printf_i+0xb6>
 8009ff2:	680d      	ldr	r5, [r1, #0]
 8009ff4:	b2ad      	uxth	r5, r5
 8009ff6:	4b56      	ldr	r3, [pc, #344]	; (800a150 <_printf_i+0x21c>)
 8009ff8:	2708      	movs	r7, #8
 8009ffa:	9303      	str	r3, [sp, #12]
 8009ffc:	2a6f      	cmp	r2, #111	; 0x6f
 8009ffe:	d000      	beq.n	800a002 <_printf_i+0xce>
 800a000:	3702      	adds	r7, #2
 800a002:	0023      	movs	r3, r4
 800a004:	2200      	movs	r2, #0
 800a006:	3343      	adds	r3, #67	; 0x43
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	6863      	ldr	r3, [r4, #4]
 800a00c:	60a3      	str	r3, [r4, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	db03      	blt.n	800a01a <_printf_i+0xe6>
 800a012:	2204      	movs	r2, #4
 800a014:	6821      	ldr	r1, [r4, #0]
 800a016:	4391      	bics	r1, r2
 800a018:	6021      	str	r1, [r4, #0]
 800a01a:	2d00      	cmp	r5, #0
 800a01c:	d102      	bne.n	800a024 <_printf_i+0xf0>
 800a01e:	9e04      	ldr	r6, [sp, #16]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00c      	beq.n	800a03e <_printf_i+0x10a>
 800a024:	9e04      	ldr	r6, [sp, #16]
 800a026:	0028      	movs	r0, r5
 800a028:	0039      	movs	r1, r7
 800a02a:	f7f6 f917 	bl	800025c <__aeabi_uidivmod>
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	3e01      	subs	r6, #1
 800a032:	5c5b      	ldrb	r3, [r3, r1]
 800a034:	7033      	strb	r3, [r6, #0]
 800a036:	002b      	movs	r3, r5
 800a038:	0005      	movs	r5, r0
 800a03a:	429f      	cmp	r7, r3
 800a03c:	d9f3      	bls.n	800a026 <_printf_i+0xf2>
 800a03e:	2f08      	cmp	r7, #8
 800a040:	d109      	bne.n	800a056 <_printf_i+0x122>
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	07db      	lsls	r3, r3, #31
 800a046:	d506      	bpl.n	800a056 <_printf_i+0x122>
 800a048:	6863      	ldr	r3, [r4, #4]
 800a04a:	6922      	ldr	r2, [r4, #16]
 800a04c:	4293      	cmp	r3, r2
 800a04e:	dc02      	bgt.n	800a056 <_printf_i+0x122>
 800a050:	2330      	movs	r3, #48	; 0x30
 800a052:	3e01      	subs	r6, #1
 800a054:	7033      	strb	r3, [r6, #0]
 800a056:	9b04      	ldr	r3, [sp, #16]
 800a058:	1b9b      	subs	r3, r3, r6
 800a05a:	6123      	str	r3, [r4, #16]
 800a05c:	9b07      	ldr	r3, [sp, #28]
 800a05e:	0021      	movs	r1, r4
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	9805      	ldr	r0, [sp, #20]
 800a064:	9b06      	ldr	r3, [sp, #24]
 800a066:	aa09      	add	r2, sp, #36	; 0x24
 800a068:	f7ff fef4 	bl	8009e54 <_printf_common>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	d14c      	bne.n	800a10a <_printf_i+0x1d6>
 800a070:	2001      	movs	r0, #1
 800a072:	4240      	negs	r0, r0
 800a074:	b00b      	add	sp, #44	; 0x2c
 800a076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a078:	3145      	adds	r1, #69	; 0x45
 800a07a:	700a      	strb	r2, [r1, #0]
 800a07c:	4a34      	ldr	r2, [pc, #208]	; (800a150 <_printf_i+0x21c>)
 800a07e:	9203      	str	r2, [sp, #12]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	6821      	ldr	r1, [r4, #0]
 800a084:	ca20      	ldmia	r2!, {r5}
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	0608      	lsls	r0, r1, #24
 800a08a:	d516      	bpl.n	800a0ba <_printf_i+0x186>
 800a08c:	07cb      	lsls	r3, r1, #31
 800a08e:	d502      	bpl.n	800a096 <_printf_i+0x162>
 800a090:	2320      	movs	r3, #32
 800a092:	4319      	orrs	r1, r3
 800a094:	6021      	str	r1, [r4, #0]
 800a096:	2710      	movs	r7, #16
 800a098:	2d00      	cmp	r5, #0
 800a09a:	d1b2      	bne.n	800a002 <_printf_i+0xce>
 800a09c:	2320      	movs	r3, #32
 800a09e:	6822      	ldr	r2, [r4, #0]
 800a0a0:	439a      	bics	r2, r3
 800a0a2:	6022      	str	r2, [r4, #0]
 800a0a4:	e7ad      	b.n	800a002 <_printf_i+0xce>
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	6809      	ldr	r1, [r1, #0]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	6022      	str	r2, [r4, #0]
 800a0ae:	0022      	movs	r2, r4
 800a0b0:	2178      	movs	r1, #120	; 0x78
 800a0b2:	3245      	adds	r2, #69	; 0x45
 800a0b4:	7011      	strb	r1, [r2, #0]
 800a0b6:	4a27      	ldr	r2, [pc, #156]	; (800a154 <_printf_i+0x220>)
 800a0b8:	e7e1      	b.n	800a07e <_printf_i+0x14a>
 800a0ba:	0648      	lsls	r0, r1, #25
 800a0bc:	d5e6      	bpl.n	800a08c <_printf_i+0x158>
 800a0be:	b2ad      	uxth	r5, r5
 800a0c0:	e7e4      	b.n	800a08c <_printf_i+0x158>
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	680d      	ldr	r5, [r1, #0]
 800a0c6:	1d10      	adds	r0, r2, #4
 800a0c8:	6949      	ldr	r1, [r1, #20]
 800a0ca:	6018      	str	r0, [r3, #0]
 800a0cc:	6813      	ldr	r3, [r2, #0]
 800a0ce:	062e      	lsls	r6, r5, #24
 800a0d0:	d501      	bpl.n	800a0d6 <_printf_i+0x1a2>
 800a0d2:	6019      	str	r1, [r3, #0]
 800a0d4:	e002      	b.n	800a0dc <_printf_i+0x1a8>
 800a0d6:	066d      	lsls	r5, r5, #25
 800a0d8:	d5fb      	bpl.n	800a0d2 <_printf_i+0x19e>
 800a0da:	8019      	strh	r1, [r3, #0]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	9e04      	ldr	r6, [sp, #16]
 800a0e0:	6123      	str	r3, [r4, #16]
 800a0e2:	e7bb      	b.n	800a05c <_printf_i+0x128>
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	1d11      	adds	r1, r2, #4
 800a0e8:	6019      	str	r1, [r3, #0]
 800a0ea:	6816      	ldr	r6, [r2, #0]
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	0030      	movs	r0, r6
 800a0f0:	6862      	ldr	r2, [r4, #4]
 800a0f2:	f001 f809 	bl	800b108 <memchr>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d001      	beq.n	800a0fe <_printf_i+0x1ca>
 800a0fa:	1b80      	subs	r0, r0, r6
 800a0fc:	6060      	str	r0, [r4, #4]
 800a0fe:	6863      	ldr	r3, [r4, #4]
 800a100:	6123      	str	r3, [r4, #16]
 800a102:	2300      	movs	r3, #0
 800a104:	9a04      	ldr	r2, [sp, #16]
 800a106:	7013      	strb	r3, [r2, #0]
 800a108:	e7a8      	b.n	800a05c <_printf_i+0x128>
 800a10a:	6923      	ldr	r3, [r4, #16]
 800a10c:	0032      	movs	r2, r6
 800a10e:	9906      	ldr	r1, [sp, #24]
 800a110:	9805      	ldr	r0, [sp, #20]
 800a112:	9d07      	ldr	r5, [sp, #28]
 800a114:	47a8      	blx	r5
 800a116:	1c43      	adds	r3, r0, #1
 800a118:	d0aa      	beq.n	800a070 <_printf_i+0x13c>
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	079b      	lsls	r3, r3, #30
 800a11e:	d415      	bmi.n	800a14c <_printf_i+0x218>
 800a120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a122:	68e0      	ldr	r0, [r4, #12]
 800a124:	4298      	cmp	r0, r3
 800a126:	daa5      	bge.n	800a074 <_printf_i+0x140>
 800a128:	0018      	movs	r0, r3
 800a12a:	e7a3      	b.n	800a074 <_printf_i+0x140>
 800a12c:	0022      	movs	r2, r4
 800a12e:	2301      	movs	r3, #1
 800a130:	9906      	ldr	r1, [sp, #24]
 800a132:	9805      	ldr	r0, [sp, #20]
 800a134:	9e07      	ldr	r6, [sp, #28]
 800a136:	3219      	adds	r2, #25
 800a138:	47b0      	blx	r6
 800a13a:	1c43      	adds	r3, r0, #1
 800a13c:	d098      	beq.n	800a070 <_printf_i+0x13c>
 800a13e:	3501      	adds	r5, #1
 800a140:	68e3      	ldr	r3, [r4, #12]
 800a142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a144:	1a9b      	subs	r3, r3, r2
 800a146:	42ab      	cmp	r3, r5
 800a148:	dcf0      	bgt.n	800a12c <_printf_i+0x1f8>
 800a14a:	e7e9      	b.n	800a120 <_printf_i+0x1ec>
 800a14c:	2500      	movs	r5, #0
 800a14e:	e7f7      	b.n	800a140 <_printf_i+0x20c>
 800a150:	0800d4ce 	.word	0x0800d4ce
 800a154:	0800d4df 	.word	0x0800d4df

0800a158 <_sbrk_r>:
 800a158:	2300      	movs	r3, #0
 800a15a:	b570      	push	{r4, r5, r6, lr}
 800a15c:	4d06      	ldr	r5, [pc, #24]	; (800a178 <_sbrk_r+0x20>)
 800a15e:	0004      	movs	r4, r0
 800a160:	0008      	movs	r0, r1
 800a162:	602b      	str	r3, [r5, #0]
 800a164:	f7fd fe42 	bl	8007dec <_sbrk>
 800a168:	1c43      	adds	r3, r0, #1
 800a16a:	d103      	bne.n	800a174 <_sbrk_r+0x1c>
 800a16c:	682b      	ldr	r3, [r5, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d000      	beq.n	800a174 <_sbrk_r+0x1c>
 800a172:	6023      	str	r3, [r4, #0]
 800a174:	bd70      	pop	{r4, r5, r6, pc}
 800a176:	46c0      	nop			; (mov r8, r8)
 800a178:	200011b8 	.word	0x200011b8

0800a17c <siprintf>:
 800a17c:	b40e      	push	{r1, r2, r3}
 800a17e:	b500      	push	{lr}
 800a180:	490b      	ldr	r1, [pc, #44]	; (800a1b0 <siprintf+0x34>)
 800a182:	b09c      	sub	sp, #112	; 0x70
 800a184:	ab1d      	add	r3, sp, #116	; 0x74
 800a186:	9002      	str	r0, [sp, #8]
 800a188:	9006      	str	r0, [sp, #24]
 800a18a:	9107      	str	r1, [sp, #28]
 800a18c:	9104      	str	r1, [sp, #16]
 800a18e:	4809      	ldr	r0, [pc, #36]	; (800a1b4 <siprintf+0x38>)
 800a190:	4909      	ldr	r1, [pc, #36]	; (800a1b8 <siprintf+0x3c>)
 800a192:	cb04      	ldmia	r3!, {r2}
 800a194:	9105      	str	r1, [sp, #20]
 800a196:	6800      	ldr	r0, [r0, #0]
 800a198:	a902      	add	r1, sp, #8
 800a19a:	9301      	str	r3, [sp, #4]
 800a19c:	f001 fbfa 	bl	800b994 <_svfiprintf_r>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9a02      	ldr	r2, [sp, #8]
 800a1a4:	7013      	strb	r3, [r2, #0]
 800a1a6:	b01c      	add	sp, #112	; 0x70
 800a1a8:	bc08      	pop	{r3}
 800a1aa:	b003      	add	sp, #12
 800a1ac:	4718      	bx	r3
 800a1ae:	46c0      	nop			; (mov r8, r8)
 800a1b0:	7fffffff 	.word	0x7fffffff
 800a1b4:	200000bc 	.word	0x200000bc
 800a1b8:	ffff0208 	.word	0xffff0208

0800a1bc <strchr>:
 800a1bc:	b2c9      	uxtb	r1, r1
 800a1be:	7803      	ldrb	r3, [r0, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d004      	beq.n	800a1ce <strchr+0x12>
 800a1c4:	428b      	cmp	r3, r1
 800a1c6:	d100      	bne.n	800a1ca <strchr+0xe>
 800a1c8:	4770      	bx	lr
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	e7f7      	b.n	800a1be <strchr+0x2>
 800a1ce:	424b      	negs	r3, r1
 800a1d0:	4159      	adcs	r1, r3
 800a1d2:	4249      	negs	r1, r1
 800a1d4:	4008      	ands	r0, r1
 800a1d6:	e7f7      	b.n	800a1c8 <strchr+0xc>

0800a1d8 <strncmp>:
 800a1d8:	b530      	push	{r4, r5, lr}
 800a1da:	0005      	movs	r5, r0
 800a1dc:	1e10      	subs	r0, r2, #0
 800a1de:	d008      	beq.n	800a1f2 <strncmp+0x1a>
 800a1e0:	2400      	movs	r4, #0
 800a1e2:	3a01      	subs	r2, #1
 800a1e4:	5d2b      	ldrb	r3, [r5, r4]
 800a1e6:	5d08      	ldrb	r0, [r1, r4]
 800a1e8:	4283      	cmp	r3, r0
 800a1ea:	d101      	bne.n	800a1f0 <strncmp+0x18>
 800a1ec:	4294      	cmp	r4, r2
 800a1ee:	d101      	bne.n	800a1f4 <strncmp+0x1c>
 800a1f0:	1a18      	subs	r0, r3, r0
 800a1f2:	bd30      	pop	{r4, r5, pc}
 800a1f4:	3401      	adds	r4, #1
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1f4      	bne.n	800a1e4 <strncmp+0xc>
 800a1fa:	e7f9      	b.n	800a1f0 <strncmp+0x18>

0800a1fc <strncpy>:
 800a1fc:	0003      	movs	r3, r0
 800a1fe:	b530      	push	{r4, r5, lr}
 800a200:	001d      	movs	r5, r3
 800a202:	2a00      	cmp	r2, #0
 800a204:	d006      	beq.n	800a214 <strncpy+0x18>
 800a206:	780c      	ldrb	r4, [r1, #0]
 800a208:	3a01      	subs	r2, #1
 800a20a:	3301      	adds	r3, #1
 800a20c:	702c      	strb	r4, [r5, #0]
 800a20e:	3101      	adds	r1, #1
 800a210:	2c00      	cmp	r4, #0
 800a212:	d1f5      	bne.n	800a200 <strncpy+0x4>
 800a214:	2100      	movs	r1, #0
 800a216:	189a      	adds	r2, r3, r2
 800a218:	4293      	cmp	r3, r2
 800a21a:	d100      	bne.n	800a21e <strncpy+0x22>
 800a21c:	bd30      	pop	{r4, r5, pc}
 800a21e:	7019      	strb	r1, [r3, #0]
 800a220:	3301      	adds	r3, #1
 800a222:	e7f9      	b.n	800a218 <strncpy+0x1c>

0800a224 <_strtol_l.constprop.0>:
 800a224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a226:	b087      	sub	sp, #28
 800a228:	001e      	movs	r6, r3
 800a22a:	9005      	str	r0, [sp, #20]
 800a22c:	9101      	str	r1, [sp, #4]
 800a22e:	9202      	str	r2, [sp, #8]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d045      	beq.n	800a2c0 <_strtol_l.constprop.0+0x9c>
 800a234:	000b      	movs	r3, r1
 800a236:	2e24      	cmp	r6, #36	; 0x24
 800a238:	d842      	bhi.n	800a2c0 <_strtol_l.constprop.0+0x9c>
 800a23a:	4a3f      	ldr	r2, [pc, #252]	; (800a338 <_strtol_l.constprop.0+0x114>)
 800a23c:	2108      	movs	r1, #8
 800a23e:	4694      	mov	ip, r2
 800a240:	001a      	movs	r2, r3
 800a242:	4660      	mov	r0, ip
 800a244:	7814      	ldrb	r4, [r2, #0]
 800a246:	3301      	adds	r3, #1
 800a248:	5d00      	ldrb	r0, [r0, r4]
 800a24a:	001d      	movs	r5, r3
 800a24c:	0007      	movs	r7, r0
 800a24e:	400f      	ands	r7, r1
 800a250:	4208      	tst	r0, r1
 800a252:	d1f5      	bne.n	800a240 <_strtol_l.constprop.0+0x1c>
 800a254:	2c2d      	cmp	r4, #45	; 0x2d
 800a256:	d13a      	bne.n	800a2ce <_strtol_l.constprop.0+0xaa>
 800a258:	2701      	movs	r7, #1
 800a25a:	781c      	ldrb	r4, [r3, #0]
 800a25c:	1c95      	adds	r5, r2, #2
 800a25e:	2e00      	cmp	r6, #0
 800a260:	d065      	beq.n	800a32e <_strtol_l.constprop.0+0x10a>
 800a262:	2e10      	cmp	r6, #16
 800a264:	d109      	bne.n	800a27a <_strtol_l.constprop.0+0x56>
 800a266:	2c30      	cmp	r4, #48	; 0x30
 800a268:	d107      	bne.n	800a27a <_strtol_l.constprop.0+0x56>
 800a26a:	2220      	movs	r2, #32
 800a26c:	782b      	ldrb	r3, [r5, #0]
 800a26e:	4393      	bics	r3, r2
 800a270:	2b58      	cmp	r3, #88	; 0x58
 800a272:	d157      	bne.n	800a324 <_strtol_l.constprop.0+0x100>
 800a274:	2610      	movs	r6, #16
 800a276:	786c      	ldrb	r4, [r5, #1]
 800a278:	3502      	adds	r5, #2
 800a27a:	4b30      	ldr	r3, [pc, #192]	; (800a33c <_strtol_l.constprop.0+0x118>)
 800a27c:	0031      	movs	r1, r6
 800a27e:	18fb      	adds	r3, r7, r3
 800a280:	0018      	movs	r0, r3
 800a282:	9303      	str	r3, [sp, #12]
 800a284:	f7f5 ffea 	bl	800025c <__aeabi_uidivmod>
 800a288:	2300      	movs	r3, #0
 800a28a:	2201      	movs	r2, #1
 800a28c:	4684      	mov	ip, r0
 800a28e:	0018      	movs	r0, r3
 800a290:	9104      	str	r1, [sp, #16]
 800a292:	4252      	negs	r2, r2
 800a294:	0021      	movs	r1, r4
 800a296:	3930      	subs	r1, #48	; 0x30
 800a298:	2909      	cmp	r1, #9
 800a29a:	d81d      	bhi.n	800a2d8 <_strtol_l.constprop.0+0xb4>
 800a29c:	000c      	movs	r4, r1
 800a29e:	42a6      	cmp	r6, r4
 800a2a0:	dd28      	ble.n	800a2f4 <_strtol_l.constprop.0+0xd0>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	db24      	blt.n	800a2f0 <_strtol_l.constprop.0+0xcc>
 800a2a6:	0013      	movs	r3, r2
 800a2a8:	4584      	cmp	ip, r0
 800a2aa:	d306      	bcc.n	800a2ba <_strtol_l.constprop.0+0x96>
 800a2ac:	d102      	bne.n	800a2b4 <_strtol_l.constprop.0+0x90>
 800a2ae:	9904      	ldr	r1, [sp, #16]
 800a2b0:	42a1      	cmp	r1, r4
 800a2b2:	db02      	blt.n	800a2ba <_strtol_l.constprop.0+0x96>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	4370      	muls	r0, r6
 800a2b8:	1820      	adds	r0, r4, r0
 800a2ba:	782c      	ldrb	r4, [r5, #0]
 800a2bc:	3501      	adds	r5, #1
 800a2be:	e7e9      	b.n	800a294 <_strtol_l.constprop.0+0x70>
 800a2c0:	f7ff f9b4 	bl	800962c <__errno>
 800a2c4:	2316      	movs	r3, #22
 800a2c6:	6003      	str	r3, [r0, #0]
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	b007      	add	sp, #28
 800a2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ce:	2c2b      	cmp	r4, #43	; 0x2b
 800a2d0:	d1c5      	bne.n	800a25e <_strtol_l.constprop.0+0x3a>
 800a2d2:	781c      	ldrb	r4, [r3, #0]
 800a2d4:	1c95      	adds	r5, r2, #2
 800a2d6:	e7c2      	b.n	800a25e <_strtol_l.constprop.0+0x3a>
 800a2d8:	0021      	movs	r1, r4
 800a2da:	3941      	subs	r1, #65	; 0x41
 800a2dc:	2919      	cmp	r1, #25
 800a2de:	d801      	bhi.n	800a2e4 <_strtol_l.constprop.0+0xc0>
 800a2e0:	3c37      	subs	r4, #55	; 0x37
 800a2e2:	e7dc      	b.n	800a29e <_strtol_l.constprop.0+0x7a>
 800a2e4:	0021      	movs	r1, r4
 800a2e6:	3961      	subs	r1, #97	; 0x61
 800a2e8:	2919      	cmp	r1, #25
 800a2ea:	d803      	bhi.n	800a2f4 <_strtol_l.constprop.0+0xd0>
 800a2ec:	3c57      	subs	r4, #87	; 0x57
 800a2ee:	e7d6      	b.n	800a29e <_strtol_l.constprop.0+0x7a>
 800a2f0:	0013      	movs	r3, r2
 800a2f2:	e7e2      	b.n	800a2ba <_strtol_l.constprop.0+0x96>
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	da09      	bge.n	800a30c <_strtol_l.constprop.0+0xe8>
 800a2f8:	2322      	movs	r3, #34	; 0x22
 800a2fa:	9a05      	ldr	r2, [sp, #20]
 800a2fc:	9803      	ldr	r0, [sp, #12]
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	9b02      	ldr	r3, [sp, #8]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d0e1      	beq.n	800a2ca <_strtol_l.constprop.0+0xa6>
 800a306:	1e6b      	subs	r3, r5, #1
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	e007      	b.n	800a31c <_strtol_l.constprop.0+0xf8>
 800a30c:	2f00      	cmp	r7, #0
 800a30e:	d000      	beq.n	800a312 <_strtol_l.constprop.0+0xee>
 800a310:	4240      	negs	r0, r0
 800a312:	9a02      	ldr	r2, [sp, #8]
 800a314:	2a00      	cmp	r2, #0
 800a316:	d0d8      	beq.n	800a2ca <_strtol_l.constprop.0+0xa6>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1f4      	bne.n	800a306 <_strtol_l.constprop.0+0xe2>
 800a31c:	9b02      	ldr	r3, [sp, #8]
 800a31e:	9a01      	ldr	r2, [sp, #4]
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	e7d2      	b.n	800a2ca <_strtol_l.constprop.0+0xa6>
 800a324:	2430      	movs	r4, #48	; 0x30
 800a326:	2e00      	cmp	r6, #0
 800a328:	d1a7      	bne.n	800a27a <_strtol_l.constprop.0+0x56>
 800a32a:	3608      	adds	r6, #8
 800a32c:	e7a5      	b.n	800a27a <_strtol_l.constprop.0+0x56>
 800a32e:	2c30      	cmp	r4, #48	; 0x30
 800a330:	d09b      	beq.n	800a26a <_strtol_l.constprop.0+0x46>
 800a332:	260a      	movs	r6, #10
 800a334:	e7a1      	b.n	800a27a <_strtol_l.constprop.0+0x56>
 800a336:	46c0      	nop			; (mov r8, r8)
 800a338:	0800d52d 	.word	0x0800d52d
 800a33c:	7fffffff 	.word	0x7fffffff

0800a340 <strtol>:
 800a340:	b510      	push	{r4, lr}
 800a342:	0013      	movs	r3, r2
 800a344:	000a      	movs	r2, r1
 800a346:	0001      	movs	r1, r0
 800a348:	4802      	ldr	r0, [pc, #8]	; (800a354 <strtol+0x14>)
 800a34a:	6800      	ldr	r0, [r0, #0]
 800a34c:	f7ff ff6a 	bl	800a224 <_strtol_l.constprop.0>
 800a350:	bd10      	pop	{r4, pc}
 800a352:	46c0      	nop			; (mov r8, r8)
 800a354:	200000bc 	.word	0x200000bc

0800a358 <__assert_func>:
 800a358:	b530      	push	{r4, r5, lr}
 800a35a:	0014      	movs	r4, r2
 800a35c:	001a      	movs	r2, r3
 800a35e:	4b09      	ldr	r3, [pc, #36]	; (800a384 <__assert_func+0x2c>)
 800a360:	0005      	movs	r5, r0
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	b085      	sub	sp, #20
 800a366:	68d8      	ldr	r0, [r3, #12]
 800a368:	4b07      	ldr	r3, [pc, #28]	; (800a388 <__assert_func+0x30>)
 800a36a:	2c00      	cmp	r4, #0
 800a36c:	d101      	bne.n	800a372 <__assert_func+0x1a>
 800a36e:	4b07      	ldr	r3, [pc, #28]	; (800a38c <__assert_func+0x34>)
 800a370:	001c      	movs	r4, r3
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	9100      	str	r1, [sp, #0]
 800a376:	002b      	movs	r3, r5
 800a378:	4905      	ldr	r1, [pc, #20]	; (800a390 <__assert_func+0x38>)
 800a37a:	9402      	str	r4, [sp, #8]
 800a37c:	f000 feb0 	bl	800b0e0 <fiprintf>
 800a380:	f001 fe38 	bl	800bff4 <abort>
 800a384:	200000bc 	.word	0x200000bc
 800a388:	0800d4f0 	.word	0x0800d4f0
 800a38c:	0800d52b 	.word	0x0800d52b
 800a390:	0800d4fd 	.word	0x0800d4fd

0800a394 <quorem>:
 800a394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a396:	0006      	movs	r6, r0
 800a398:	690b      	ldr	r3, [r1, #16]
 800a39a:	6932      	ldr	r2, [r6, #16]
 800a39c:	b087      	sub	sp, #28
 800a39e:	2000      	movs	r0, #0
 800a3a0:	9103      	str	r1, [sp, #12]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	db65      	blt.n	800a472 <quorem+0xde>
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	009c      	lsls	r4, r3, #2
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	000b      	movs	r3, r1
 800a3ae:	3314      	adds	r3, #20
 800a3b0:	9305      	str	r3, [sp, #20]
 800a3b2:	191b      	adds	r3, r3, r4
 800a3b4:	9304      	str	r3, [sp, #16]
 800a3b6:	0033      	movs	r3, r6
 800a3b8:	3314      	adds	r3, #20
 800a3ba:	9302      	str	r3, [sp, #8]
 800a3bc:	191c      	adds	r4, r3, r4
 800a3be:	9b04      	ldr	r3, [sp, #16]
 800a3c0:	6827      	ldr	r7, [r4, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	0038      	movs	r0, r7
 800a3c6:	1c5d      	adds	r5, r3, #1
 800a3c8:	0029      	movs	r1, r5
 800a3ca:	9301      	str	r3, [sp, #4]
 800a3cc:	f7f5 fec0 	bl	8000150 <__udivsi3>
 800a3d0:	9001      	str	r0, [sp, #4]
 800a3d2:	42af      	cmp	r7, r5
 800a3d4:	d324      	bcc.n	800a420 <quorem+0x8c>
 800a3d6:	2500      	movs	r5, #0
 800a3d8:	46ac      	mov	ip, r5
 800a3da:	9802      	ldr	r0, [sp, #8]
 800a3dc:	9f05      	ldr	r7, [sp, #20]
 800a3de:	cf08      	ldmia	r7!, {r3}
 800a3e0:	9a01      	ldr	r2, [sp, #4]
 800a3e2:	b299      	uxth	r1, r3
 800a3e4:	4351      	muls	r1, r2
 800a3e6:	0c1b      	lsrs	r3, r3, #16
 800a3e8:	4353      	muls	r3, r2
 800a3ea:	1949      	adds	r1, r1, r5
 800a3ec:	0c0a      	lsrs	r2, r1, #16
 800a3ee:	189b      	adds	r3, r3, r2
 800a3f0:	6802      	ldr	r2, [r0, #0]
 800a3f2:	b289      	uxth	r1, r1
 800a3f4:	b292      	uxth	r2, r2
 800a3f6:	4462      	add	r2, ip
 800a3f8:	1a52      	subs	r2, r2, r1
 800a3fa:	6801      	ldr	r1, [r0, #0]
 800a3fc:	0c1d      	lsrs	r5, r3, #16
 800a3fe:	0c09      	lsrs	r1, r1, #16
 800a400:	b29b      	uxth	r3, r3
 800a402:	1acb      	subs	r3, r1, r3
 800a404:	1411      	asrs	r1, r2, #16
 800a406:	185b      	adds	r3, r3, r1
 800a408:	1419      	asrs	r1, r3, #16
 800a40a:	b292      	uxth	r2, r2
 800a40c:	041b      	lsls	r3, r3, #16
 800a40e:	431a      	orrs	r2, r3
 800a410:	9b04      	ldr	r3, [sp, #16]
 800a412:	468c      	mov	ip, r1
 800a414:	c004      	stmia	r0!, {r2}
 800a416:	42bb      	cmp	r3, r7
 800a418:	d2e1      	bcs.n	800a3de <quorem+0x4a>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d030      	beq.n	800a482 <quorem+0xee>
 800a420:	0030      	movs	r0, r6
 800a422:	9903      	ldr	r1, [sp, #12]
 800a424:	f001 f910 	bl	800b648 <__mcmp>
 800a428:	2800      	cmp	r0, #0
 800a42a:	db21      	blt.n	800a470 <quorem+0xdc>
 800a42c:	0030      	movs	r0, r6
 800a42e:	2400      	movs	r4, #0
 800a430:	9b01      	ldr	r3, [sp, #4]
 800a432:	9903      	ldr	r1, [sp, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	3014      	adds	r0, #20
 800a43a:	3114      	adds	r1, #20
 800a43c:	6803      	ldr	r3, [r0, #0]
 800a43e:	c920      	ldmia	r1!, {r5}
 800a440:	b29a      	uxth	r2, r3
 800a442:	1914      	adds	r4, r2, r4
 800a444:	b2aa      	uxth	r2, r5
 800a446:	1aa2      	subs	r2, r4, r2
 800a448:	0c1b      	lsrs	r3, r3, #16
 800a44a:	0c2d      	lsrs	r5, r5, #16
 800a44c:	1414      	asrs	r4, r2, #16
 800a44e:	1b5b      	subs	r3, r3, r5
 800a450:	191b      	adds	r3, r3, r4
 800a452:	141c      	asrs	r4, r3, #16
 800a454:	b292      	uxth	r2, r2
 800a456:	041b      	lsls	r3, r3, #16
 800a458:	4313      	orrs	r3, r2
 800a45a:	c008      	stmia	r0!, {r3}
 800a45c:	9b04      	ldr	r3, [sp, #16]
 800a45e:	428b      	cmp	r3, r1
 800a460:	d2ec      	bcs.n	800a43c <quorem+0xa8>
 800a462:	9b00      	ldr	r3, [sp, #0]
 800a464:	9a02      	ldr	r2, [sp, #8]
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	18d3      	adds	r3, r2, r3
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	2a00      	cmp	r2, #0
 800a46e:	d015      	beq.n	800a49c <quorem+0x108>
 800a470:	9801      	ldr	r0, [sp, #4]
 800a472:	b007      	add	sp, #28
 800a474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d106      	bne.n	800a48a <quorem+0xf6>
 800a47c:	9b00      	ldr	r3, [sp, #0]
 800a47e:	3b01      	subs	r3, #1
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	9b02      	ldr	r3, [sp, #8]
 800a484:	3c04      	subs	r4, #4
 800a486:	42a3      	cmp	r3, r4
 800a488:	d3f5      	bcc.n	800a476 <quorem+0xe2>
 800a48a:	9b00      	ldr	r3, [sp, #0]
 800a48c:	6133      	str	r3, [r6, #16]
 800a48e:	e7c7      	b.n	800a420 <quorem+0x8c>
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	2a00      	cmp	r2, #0
 800a494:	d106      	bne.n	800a4a4 <quorem+0x110>
 800a496:	9a00      	ldr	r2, [sp, #0]
 800a498:	3a01      	subs	r2, #1
 800a49a:	9200      	str	r2, [sp, #0]
 800a49c:	9a02      	ldr	r2, [sp, #8]
 800a49e:	3b04      	subs	r3, #4
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d3f5      	bcc.n	800a490 <quorem+0xfc>
 800a4a4:	9b00      	ldr	r3, [sp, #0]
 800a4a6:	6133      	str	r3, [r6, #16]
 800a4a8:	e7e2      	b.n	800a470 <quorem+0xdc>
	...

0800a4ac <_dtoa_r>:
 800a4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ae:	b09d      	sub	sp, #116	; 0x74
 800a4b0:	9202      	str	r2, [sp, #8]
 800a4b2:	9303      	str	r3, [sp, #12]
 800a4b4:	9b02      	ldr	r3, [sp, #8]
 800a4b6:	9c03      	ldr	r4, [sp, #12]
 800a4b8:	9308      	str	r3, [sp, #32]
 800a4ba:	9409      	str	r4, [sp, #36]	; 0x24
 800a4bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a4be:	0007      	movs	r7, r0
 800a4c0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a4c2:	2c00      	cmp	r4, #0
 800a4c4:	d10e      	bne.n	800a4e4 <_dtoa_r+0x38>
 800a4c6:	2010      	movs	r0, #16
 800a4c8:	f7ff f8da 	bl	8009680 <malloc>
 800a4cc:	1e02      	subs	r2, r0, #0
 800a4ce:	6278      	str	r0, [r7, #36]	; 0x24
 800a4d0:	d104      	bne.n	800a4dc <_dtoa_r+0x30>
 800a4d2:	21ea      	movs	r1, #234	; 0xea
 800a4d4:	4bc7      	ldr	r3, [pc, #796]	; (800a7f4 <_dtoa_r+0x348>)
 800a4d6:	48c8      	ldr	r0, [pc, #800]	; (800a7f8 <_dtoa_r+0x34c>)
 800a4d8:	f7ff ff3e 	bl	800a358 <__assert_func>
 800a4dc:	6044      	str	r4, [r0, #4]
 800a4de:	6084      	str	r4, [r0, #8]
 800a4e0:	6004      	str	r4, [r0, #0]
 800a4e2:	60c4      	str	r4, [r0, #12]
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	6819      	ldr	r1, [r3, #0]
 800a4e8:	2900      	cmp	r1, #0
 800a4ea:	d00a      	beq.n	800a502 <_dtoa_r+0x56>
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	4093      	lsls	r3, r2
 800a4f2:	604a      	str	r2, [r1, #4]
 800a4f4:	608b      	str	r3, [r1, #8]
 800a4f6:	0038      	movs	r0, r7
 800a4f8:	f000 fe66 	bl	800b1c8 <_Bfree>
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	da20      	bge.n	800a54a <_dtoa_r+0x9e>
 800a508:	2301      	movs	r3, #1
 800a50a:	602b      	str	r3, [r5, #0]
 800a50c:	9b03      	ldr	r3, [sp, #12]
 800a50e:	005b      	lsls	r3, r3, #1
 800a510:	085b      	lsrs	r3, r3, #1
 800a512:	9309      	str	r3, [sp, #36]	; 0x24
 800a514:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a516:	4bb9      	ldr	r3, [pc, #740]	; (800a7fc <_dtoa_r+0x350>)
 800a518:	4ab8      	ldr	r2, [pc, #736]	; (800a7fc <_dtoa_r+0x350>)
 800a51a:	402b      	ands	r3, r5
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d117      	bne.n	800a550 <_dtoa_r+0xa4>
 800a520:	4bb7      	ldr	r3, [pc, #732]	; (800a800 <_dtoa_r+0x354>)
 800a522:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a524:	0328      	lsls	r0, r5, #12
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	9b02      	ldr	r3, [sp, #8]
 800a52a:	0b00      	lsrs	r0, r0, #12
 800a52c:	4318      	orrs	r0, r3
 800a52e:	d101      	bne.n	800a534 <_dtoa_r+0x88>
 800a530:	f000 fdbf 	bl	800b0b2 <_dtoa_r+0xc06>
 800a534:	48b3      	ldr	r0, [pc, #716]	; (800a804 <_dtoa_r+0x358>)
 800a536:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a538:	9006      	str	r0, [sp, #24]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d002      	beq.n	800a544 <_dtoa_r+0x98>
 800a53e:	4bb2      	ldr	r3, [pc, #712]	; (800a808 <_dtoa_r+0x35c>)
 800a540:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	9806      	ldr	r0, [sp, #24]
 800a546:	b01d      	add	sp, #116	; 0x74
 800a548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a54a:	2300      	movs	r3, #0
 800a54c:	602b      	str	r3, [r5, #0]
 800a54e:	e7e1      	b.n	800a514 <_dtoa_r+0x68>
 800a550:	9b08      	ldr	r3, [sp, #32]
 800a552:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a554:	9312      	str	r3, [sp, #72]	; 0x48
 800a556:	9413      	str	r4, [sp, #76]	; 0x4c
 800a558:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a55a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a55c:	2200      	movs	r2, #0
 800a55e:	2300      	movs	r3, #0
 800a560:	f7f5 ff7c 	bl	800045c <__aeabi_dcmpeq>
 800a564:	1e04      	subs	r4, r0, #0
 800a566:	d009      	beq.n	800a57c <_dtoa_r+0xd0>
 800a568:	2301      	movs	r3, #1
 800a56a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a56c:	6013      	str	r3, [r2, #0]
 800a56e:	4ba7      	ldr	r3, [pc, #668]	; (800a80c <_dtoa_r+0x360>)
 800a570:	9306      	str	r3, [sp, #24]
 800a572:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a574:	2b00      	cmp	r3, #0
 800a576:	d0e5      	beq.n	800a544 <_dtoa_r+0x98>
 800a578:	4ba5      	ldr	r3, [pc, #660]	; (800a810 <_dtoa_r+0x364>)
 800a57a:	e7e1      	b.n	800a540 <_dtoa_r+0x94>
 800a57c:	ab1a      	add	r3, sp, #104	; 0x68
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	ab1b      	add	r3, sp, #108	; 0x6c
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	0038      	movs	r0, r7
 800a586:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a588:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a58a:	f001 f911 	bl	800b7b0 <__d2b>
 800a58e:	006e      	lsls	r6, r5, #1
 800a590:	9005      	str	r0, [sp, #20]
 800a592:	0d76      	lsrs	r6, r6, #21
 800a594:	d100      	bne.n	800a598 <_dtoa_r+0xec>
 800a596:	e07c      	b.n	800a692 <_dtoa_r+0x1e6>
 800a598:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a59a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a59c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a59e:	4a9d      	ldr	r2, [pc, #628]	; (800a814 <_dtoa_r+0x368>)
 800a5a0:	031b      	lsls	r3, r3, #12
 800a5a2:	0b1b      	lsrs	r3, r3, #12
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	0011      	movs	r1, r2
 800a5a8:	4b9b      	ldr	r3, [pc, #620]	; (800a818 <_dtoa_r+0x36c>)
 800a5aa:	9418      	str	r4, [sp, #96]	; 0x60
 800a5ac:	18f6      	adds	r6, r6, r3
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	4b9a      	ldr	r3, [pc, #616]	; (800a81c <_dtoa_r+0x370>)
 800a5b2:	f7f8 f885 	bl	80026c0 <__aeabi_dsub>
 800a5b6:	4a9a      	ldr	r2, [pc, #616]	; (800a820 <_dtoa_r+0x374>)
 800a5b8:	4b9a      	ldr	r3, [pc, #616]	; (800a824 <_dtoa_r+0x378>)
 800a5ba:	f7f7 fe15 	bl	80021e8 <__aeabi_dmul>
 800a5be:	4a9a      	ldr	r2, [pc, #616]	; (800a828 <_dtoa_r+0x37c>)
 800a5c0:	4b9a      	ldr	r3, [pc, #616]	; (800a82c <_dtoa_r+0x380>)
 800a5c2:	f7f6 fed3 	bl	800136c <__aeabi_dadd>
 800a5c6:	0004      	movs	r4, r0
 800a5c8:	0030      	movs	r0, r6
 800a5ca:	000d      	movs	r5, r1
 800a5cc:	f7f8 fc5e 	bl	8002e8c <__aeabi_i2d>
 800a5d0:	4a97      	ldr	r2, [pc, #604]	; (800a830 <_dtoa_r+0x384>)
 800a5d2:	4b98      	ldr	r3, [pc, #608]	; (800a834 <_dtoa_r+0x388>)
 800a5d4:	f7f7 fe08 	bl	80021e8 <__aeabi_dmul>
 800a5d8:	0002      	movs	r2, r0
 800a5da:	000b      	movs	r3, r1
 800a5dc:	0020      	movs	r0, r4
 800a5de:	0029      	movs	r1, r5
 800a5e0:	f7f6 fec4 	bl	800136c <__aeabi_dadd>
 800a5e4:	0004      	movs	r4, r0
 800a5e6:	000d      	movs	r5, r1
 800a5e8:	f7f8 fc1a 	bl	8002e20 <__aeabi_d2iz>
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	9002      	str	r0, [sp, #8]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	0020      	movs	r0, r4
 800a5f4:	0029      	movs	r1, r5
 800a5f6:	f7f5 ff37 	bl	8000468 <__aeabi_dcmplt>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d00b      	beq.n	800a616 <_dtoa_r+0x16a>
 800a5fe:	9802      	ldr	r0, [sp, #8]
 800a600:	f7f8 fc44 	bl	8002e8c <__aeabi_i2d>
 800a604:	002b      	movs	r3, r5
 800a606:	0022      	movs	r2, r4
 800a608:	f7f5 ff28 	bl	800045c <__aeabi_dcmpeq>
 800a60c:	4243      	negs	r3, r0
 800a60e:	4158      	adcs	r0, r3
 800a610:	9b02      	ldr	r3, [sp, #8]
 800a612:	1a1b      	subs	r3, r3, r0
 800a614:	9302      	str	r3, [sp, #8]
 800a616:	2301      	movs	r3, #1
 800a618:	9316      	str	r3, [sp, #88]	; 0x58
 800a61a:	9b02      	ldr	r3, [sp, #8]
 800a61c:	2b16      	cmp	r3, #22
 800a61e:	d80f      	bhi.n	800a640 <_dtoa_r+0x194>
 800a620:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a622:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a624:	00da      	lsls	r2, r3, #3
 800a626:	4b84      	ldr	r3, [pc, #528]	; (800a838 <_dtoa_r+0x38c>)
 800a628:	189b      	adds	r3, r3, r2
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	f7f5 ff1b 	bl	8000468 <__aeabi_dcmplt>
 800a632:	2800      	cmp	r0, #0
 800a634:	d049      	beq.n	800a6ca <_dtoa_r+0x21e>
 800a636:	9b02      	ldr	r3, [sp, #8]
 800a638:	3b01      	subs	r3, #1
 800a63a:	9302      	str	r3, [sp, #8]
 800a63c:	2300      	movs	r3, #0
 800a63e:	9316      	str	r3, [sp, #88]	; 0x58
 800a640:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a642:	1b9e      	subs	r6, r3, r6
 800a644:	2300      	movs	r3, #0
 800a646:	930a      	str	r3, [sp, #40]	; 0x28
 800a648:	0033      	movs	r3, r6
 800a64a:	3b01      	subs	r3, #1
 800a64c:	930d      	str	r3, [sp, #52]	; 0x34
 800a64e:	d504      	bpl.n	800a65a <_dtoa_r+0x1ae>
 800a650:	2301      	movs	r3, #1
 800a652:	1b9b      	subs	r3, r3, r6
 800a654:	930a      	str	r3, [sp, #40]	; 0x28
 800a656:	2300      	movs	r3, #0
 800a658:	930d      	str	r3, [sp, #52]	; 0x34
 800a65a:	9b02      	ldr	r3, [sp, #8]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	db36      	blt.n	800a6ce <_dtoa_r+0x222>
 800a660:	9a02      	ldr	r2, [sp, #8]
 800a662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a664:	4694      	mov	ip, r2
 800a666:	4463      	add	r3, ip
 800a668:	930d      	str	r3, [sp, #52]	; 0x34
 800a66a:	2300      	movs	r3, #0
 800a66c:	9215      	str	r2, [sp, #84]	; 0x54
 800a66e:	930e      	str	r3, [sp, #56]	; 0x38
 800a670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a672:	2401      	movs	r4, #1
 800a674:	2b09      	cmp	r3, #9
 800a676:	d864      	bhi.n	800a742 <_dtoa_r+0x296>
 800a678:	2b05      	cmp	r3, #5
 800a67a:	dd02      	ble.n	800a682 <_dtoa_r+0x1d6>
 800a67c:	2400      	movs	r4, #0
 800a67e:	3b04      	subs	r3, #4
 800a680:	9322      	str	r3, [sp, #136]	; 0x88
 800a682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a684:	1e98      	subs	r0, r3, #2
 800a686:	2803      	cmp	r0, #3
 800a688:	d864      	bhi.n	800a754 <_dtoa_r+0x2a8>
 800a68a:	f7f5 fd4d 	bl	8000128 <__gnu_thumb1_case_uqi>
 800a68e:	3829      	.short	0x3829
 800a690:	5836      	.short	0x5836
 800a692:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a694:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a696:	189e      	adds	r6, r3, r2
 800a698:	4b68      	ldr	r3, [pc, #416]	; (800a83c <_dtoa_r+0x390>)
 800a69a:	18f2      	adds	r2, r6, r3
 800a69c:	2a20      	cmp	r2, #32
 800a69e:	dd0f      	ble.n	800a6c0 <_dtoa_r+0x214>
 800a6a0:	2340      	movs	r3, #64	; 0x40
 800a6a2:	1a9b      	subs	r3, r3, r2
 800a6a4:	409d      	lsls	r5, r3
 800a6a6:	4b66      	ldr	r3, [pc, #408]	; (800a840 <_dtoa_r+0x394>)
 800a6a8:	9802      	ldr	r0, [sp, #8]
 800a6aa:	18f3      	adds	r3, r6, r3
 800a6ac:	40d8      	lsrs	r0, r3
 800a6ae:	4328      	orrs	r0, r5
 800a6b0:	f7f8 fc1c 	bl	8002eec <__aeabi_ui2d>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	4c63      	ldr	r4, [pc, #396]	; (800a844 <_dtoa_r+0x398>)
 800a6b8:	3e01      	subs	r6, #1
 800a6ba:	1909      	adds	r1, r1, r4
 800a6bc:	9318      	str	r3, [sp, #96]	; 0x60
 800a6be:	e776      	b.n	800a5ae <_dtoa_r+0x102>
 800a6c0:	2320      	movs	r3, #32
 800a6c2:	9802      	ldr	r0, [sp, #8]
 800a6c4:	1a9b      	subs	r3, r3, r2
 800a6c6:	4098      	lsls	r0, r3
 800a6c8:	e7f2      	b.n	800a6b0 <_dtoa_r+0x204>
 800a6ca:	9016      	str	r0, [sp, #88]	; 0x58
 800a6cc:	e7b8      	b.n	800a640 <_dtoa_r+0x194>
 800a6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d0:	9a02      	ldr	r2, [sp, #8]
 800a6d2:	1a9b      	subs	r3, r3, r2
 800a6d4:	930a      	str	r3, [sp, #40]	; 0x28
 800a6d6:	4253      	negs	r3, r2
 800a6d8:	930e      	str	r3, [sp, #56]	; 0x38
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9315      	str	r3, [sp, #84]	; 0x54
 800a6de:	e7c7      	b.n	800a670 <_dtoa_r+0x1c4>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6e6:	930c      	str	r3, [sp, #48]	; 0x30
 800a6e8:	9307      	str	r3, [sp, #28]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	dc13      	bgt.n	800a716 <_dtoa_r+0x26a>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	001a      	movs	r2, r3
 800a6f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a6f4:	9307      	str	r3, [sp, #28]
 800a6f6:	9223      	str	r2, [sp, #140]	; 0x8c
 800a6f8:	e00d      	b.n	800a716 <_dtoa_r+0x26a>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e7f1      	b.n	800a6e2 <_dtoa_r+0x236>
 800a6fe:	2300      	movs	r3, #0
 800a700:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a702:	930f      	str	r3, [sp, #60]	; 0x3c
 800a704:	4694      	mov	ip, r2
 800a706:	9b02      	ldr	r3, [sp, #8]
 800a708:	4463      	add	r3, ip
 800a70a:	930c      	str	r3, [sp, #48]	; 0x30
 800a70c:	3301      	adds	r3, #1
 800a70e:	9307      	str	r3, [sp, #28]
 800a710:	2b00      	cmp	r3, #0
 800a712:	dc00      	bgt.n	800a716 <_dtoa_r+0x26a>
 800a714:	2301      	movs	r3, #1
 800a716:	2200      	movs	r2, #0
 800a718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a71a:	6042      	str	r2, [r0, #4]
 800a71c:	3204      	adds	r2, #4
 800a71e:	0015      	movs	r5, r2
 800a720:	3514      	adds	r5, #20
 800a722:	6841      	ldr	r1, [r0, #4]
 800a724:	429d      	cmp	r5, r3
 800a726:	d919      	bls.n	800a75c <_dtoa_r+0x2b0>
 800a728:	0038      	movs	r0, r7
 800a72a:	f000 fd09 	bl	800b140 <_Balloc>
 800a72e:	9006      	str	r0, [sp, #24]
 800a730:	2800      	cmp	r0, #0
 800a732:	d117      	bne.n	800a764 <_dtoa_r+0x2b8>
 800a734:	21d5      	movs	r1, #213	; 0xd5
 800a736:	0002      	movs	r2, r0
 800a738:	4b43      	ldr	r3, [pc, #268]	; (800a848 <_dtoa_r+0x39c>)
 800a73a:	0049      	lsls	r1, r1, #1
 800a73c:	e6cb      	b.n	800a4d6 <_dtoa_r+0x2a>
 800a73e:	2301      	movs	r3, #1
 800a740:	e7de      	b.n	800a700 <_dtoa_r+0x254>
 800a742:	2300      	movs	r3, #0
 800a744:	940f      	str	r4, [sp, #60]	; 0x3c
 800a746:	9322      	str	r3, [sp, #136]	; 0x88
 800a748:	3b01      	subs	r3, #1
 800a74a:	930c      	str	r3, [sp, #48]	; 0x30
 800a74c:	9307      	str	r3, [sp, #28]
 800a74e:	2200      	movs	r2, #0
 800a750:	3313      	adds	r3, #19
 800a752:	e7d0      	b.n	800a6f6 <_dtoa_r+0x24a>
 800a754:	2301      	movs	r3, #1
 800a756:	930f      	str	r3, [sp, #60]	; 0x3c
 800a758:	3b02      	subs	r3, #2
 800a75a:	e7f6      	b.n	800a74a <_dtoa_r+0x29e>
 800a75c:	3101      	adds	r1, #1
 800a75e:	6041      	str	r1, [r0, #4]
 800a760:	0052      	lsls	r2, r2, #1
 800a762:	e7dc      	b.n	800a71e <_dtoa_r+0x272>
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	9a06      	ldr	r2, [sp, #24]
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	9b07      	ldr	r3, [sp, #28]
 800a76c:	2b0e      	cmp	r3, #14
 800a76e:	d900      	bls.n	800a772 <_dtoa_r+0x2c6>
 800a770:	e0eb      	b.n	800a94a <_dtoa_r+0x49e>
 800a772:	2c00      	cmp	r4, #0
 800a774:	d100      	bne.n	800a778 <_dtoa_r+0x2cc>
 800a776:	e0e8      	b.n	800a94a <_dtoa_r+0x49e>
 800a778:	9b02      	ldr	r3, [sp, #8]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dd68      	ble.n	800a850 <_dtoa_r+0x3a4>
 800a77e:	001a      	movs	r2, r3
 800a780:	210f      	movs	r1, #15
 800a782:	4b2d      	ldr	r3, [pc, #180]	; (800a838 <_dtoa_r+0x38c>)
 800a784:	400a      	ands	r2, r1
 800a786:	00d2      	lsls	r2, r2, #3
 800a788:	189b      	adds	r3, r3, r2
 800a78a:	681d      	ldr	r5, [r3, #0]
 800a78c:	685e      	ldr	r6, [r3, #4]
 800a78e:	9b02      	ldr	r3, [sp, #8]
 800a790:	111c      	asrs	r4, r3, #4
 800a792:	2302      	movs	r3, #2
 800a794:	9310      	str	r3, [sp, #64]	; 0x40
 800a796:	9b02      	ldr	r3, [sp, #8]
 800a798:	05db      	lsls	r3, r3, #23
 800a79a:	d50b      	bpl.n	800a7b4 <_dtoa_r+0x308>
 800a79c:	4b2b      	ldr	r3, [pc, #172]	; (800a84c <_dtoa_r+0x3a0>)
 800a79e:	400c      	ands	r4, r1
 800a7a0:	6a1a      	ldr	r2, [r3, #32]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a7a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a7a8:	f7f7 f91c 	bl	80019e4 <__aeabi_ddiv>
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	9008      	str	r0, [sp, #32]
 800a7b0:	9109      	str	r1, [sp, #36]	; 0x24
 800a7b2:	9310      	str	r3, [sp, #64]	; 0x40
 800a7b4:	4b25      	ldr	r3, [pc, #148]	; (800a84c <_dtoa_r+0x3a0>)
 800a7b6:	9314      	str	r3, [sp, #80]	; 0x50
 800a7b8:	2c00      	cmp	r4, #0
 800a7ba:	d108      	bne.n	800a7ce <_dtoa_r+0x322>
 800a7bc:	9808      	ldr	r0, [sp, #32]
 800a7be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7c0:	002a      	movs	r2, r5
 800a7c2:	0033      	movs	r3, r6
 800a7c4:	f7f7 f90e 	bl	80019e4 <__aeabi_ddiv>
 800a7c8:	9008      	str	r0, [sp, #32]
 800a7ca:	9109      	str	r1, [sp, #36]	; 0x24
 800a7cc:	e05c      	b.n	800a888 <_dtoa_r+0x3dc>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	421c      	tst	r4, r3
 800a7d2:	d00b      	beq.n	800a7ec <_dtoa_r+0x340>
 800a7d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7d6:	0028      	movs	r0, r5
 800a7d8:	3301      	adds	r3, #1
 800a7da:	9310      	str	r3, [sp, #64]	; 0x40
 800a7dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7de:	0031      	movs	r1, r6
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	f7f7 fd00 	bl	80021e8 <__aeabi_dmul>
 800a7e8:	0005      	movs	r5, r0
 800a7ea:	000e      	movs	r6, r1
 800a7ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7ee:	1064      	asrs	r4, r4, #1
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	e7e0      	b.n	800a7b6 <_dtoa_r+0x30a>
 800a7f4:	0800d63a 	.word	0x0800d63a
 800a7f8:	0800d651 	.word	0x0800d651
 800a7fc:	7ff00000 	.word	0x7ff00000
 800a800:	0000270f 	.word	0x0000270f
 800a804:	0800d636 	.word	0x0800d636
 800a808:	0800d639 	.word	0x0800d639
 800a80c:	0800d4cc 	.word	0x0800d4cc
 800a810:	0800d4cd 	.word	0x0800d4cd
 800a814:	3ff00000 	.word	0x3ff00000
 800a818:	fffffc01 	.word	0xfffffc01
 800a81c:	3ff80000 	.word	0x3ff80000
 800a820:	636f4361 	.word	0x636f4361
 800a824:	3fd287a7 	.word	0x3fd287a7
 800a828:	8b60c8b3 	.word	0x8b60c8b3
 800a82c:	3fc68a28 	.word	0x3fc68a28
 800a830:	509f79fb 	.word	0x509f79fb
 800a834:	3fd34413 	.word	0x3fd34413
 800a838:	0800d748 	.word	0x0800d748
 800a83c:	00000432 	.word	0x00000432
 800a840:	00000412 	.word	0x00000412
 800a844:	fe100000 	.word	0xfe100000
 800a848:	0800d6ac 	.word	0x0800d6ac
 800a84c:	0800d720 	.word	0x0800d720
 800a850:	2302      	movs	r3, #2
 800a852:	9310      	str	r3, [sp, #64]	; 0x40
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d016      	beq.n	800a888 <_dtoa_r+0x3dc>
 800a85a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a85c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a85e:	425c      	negs	r4, r3
 800a860:	230f      	movs	r3, #15
 800a862:	4ab6      	ldr	r2, [pc, #728]	; (800ab3c <_dtoa_r+0x690>)
 800a864:	4023      	ands	r3, r4
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	18d3      	adds	r3, r2, r3
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f7f7 fcbb 	bl	80021e8 <__aeabi_dmul>
 800a872:	2601      	movs	r6, #1
 800a874:	2300      	movs	r3, #0
 800a876:	9008      	str	r0, [sp, #32]
 800a878:	9109      	str	r1, [sp, #36]	; 0x24
 800a87a:	4db1      	ldr	r5, [pc, #708]	; (800ab40 <_dtoa_r+0x694>)
 800a87c:	1124      	asrs	r4, r4, #4
 800a87e:	2c00      	cmp	r4, #0
 800a880:	d000      	beq.n	800a884 <_dtoa_r+0x3d8>
 800a882:	e094      	b.n	800a9ae <_dtoa_r+0x502>
 800a884:	2b00      	cmp	r3, #0
 800a886:	d19f      	bne.n	800a7c8 <_dtoa_r+0x31c>
 800a888:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d100      	bne.n	800a890 <_dtoa_r+0x3e4>
 800a88e:	e09b      	b.n	800a9c8 <_dtoa_r+0x51c>
 800a890:	9c08      	ldr	r4, [sp, #32]
 800a892:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a894:	2200      	movs	r2, #0
 800a896:	0020      	movs	r0, r4
 800a898:	0029      	movs	r1, r5
 800a89a:	4baa      	ldr	r3, [pc, #680]	; (800ab44 <_dtoa_r+0x698>)
 800a89c:	f7f5 fde4 	bl	8000468 <__aeabi_dcmplt>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d100      	bne.n	800a8a6 <_dtoa_r+0x3fa>
 800a8a4:	e090      	b.n	800a9c8 <_dtoa_r+0x51c>
 800a8a6:	9b07      	ldr	r3, [sp, #28]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d100      	bne.n	800a8ae <_dtoa_r+0x402>
 800a8ac:	e08c      	b.n	800a9c8 <_dtoa_r+0x51c>
 800a8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	dd46      	ble.n	800a942 <_dtoa_r+0x496>
 800a8b4:	9b02      	ldr	r3, [sp, #8]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	0020      	movs	r0, r4
 800a8ba:	0029      	movs	r1, r5
 800a8bc:	1e5e      	subs	r6, r3, #1
 800a8be:	4ba2      	ldr	r3, [pc, #648]	; (800ab48 <_dtoa_r+0x69c>)
 800a8c0:	f7f7 fc92 	bl	80021e8 <__aeabi_dmul>
 800a8c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8c6:	9008      	str	r0, [sp, #32]
 800a8c8:	9109      	str	r1, [sp, #36]	; 0x24
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	9310      	str	r3, [sp, #64]	; 0x40
 800a8ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a8d2:	9c08      	ldr	r4, [sp, #32]
 800a8d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a8d6:	9314      	str	r3, [sp, #80]	; 0x50
 800a8d8:	f7f8 fad8 	bl	8002e8c <__aeabi_i2d>
 800a8dc:	0022      	movs	r2, r4
 800a8de:	002b      	movs	r3, r5
 800a8e0:	f7f7 fc82 	bl	80021e8 <__aeabi_dmul>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	4b99      	ldr	r3, [pc, #612]	; (800ab4c <_dtoa_r+0x6a0>)
 800a8e8:	f7f6 fd40 	bl	800136c <__aeabi_dadd>
 800a8ec:	9010      	str	r0, [sp, #64]	; 0x40
 800a8ee:	9111      	str	r1, [sp, #68]	; 0x44
 800a8f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a8f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8f4:	9208      	str	r2, [sp, #32]
 800a8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f8:	4a95      	ldr	r2, [pc, #596]	; (800ab50 <_dtoa_r+0x6a4>)
 800a8fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8fc:	4694      	mov	ip, r2
 800a8fe:	4463      	add	r3, ip
 800a900:	9317      	str	r3, [sp, #92]	; 0x5c
 800a902:	9309      	str	r3, [sp, #36]	; 0x24
 800a904:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a906:	2b00      	cmp	r3, #0
 800a908:	d161      	bne.n	800a9ce <_dtoa_r+0x522>
 800a90a:	2200      	movs	r2, #0
 800a90c:	0020      	movs	r0, r4
 800a90e:	0029      	movs	r1, r5
 800a910:	4b90      	ldr	r3, [pc, #576]	; (800ab54 <_dtoa_r+0x6a8>)
 800a912:	f7f7 fed5 	bl	80026c0 <__aeabi_dsub>
 800a916:	9a08      	ldr	r2, [sp, #32]
 800a918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a91a:	0004      	movs	r4, r0
 800a91c:	000d      	movs	r5, r1
 800a91e:	f7f5 fdb7 	bl	8000490 <__aeabi_dcmpgt>
 800a922:	2800      	cmp	r0, #0
 800a924:	d000      	beq.n	800a928 <_dtoa_r+0x47c>
 800a926:	e2af      	b.n	800ae88 <_dtoa_r+0x9dc>
 800a928:	488b      	ldr	r0, [pc, #556]	; (800ab58 <_dtoa_r+0x6ac>)
 800a92a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a92c:	4684      	mov	ip, r0
 800a92e:	4461      	add	r1, ip
 800a930:	000b      	movs	r3, r1
 800a932:	0020      	movs	r0, r4
 800a934:	0029      	movs	r1, r5
 800a936:	9a08      	ldr	r2, [sp, #32]
 800a938:	f7f5 fd96 	bl	8000468 <__aeabi_dcmplt>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	d000      	beq.n	800a942 <_dtoa_r+0x496>
 800a940:	e29f      	b.n	800ae82 <_dtoa_r+0x9d6>
 800a942:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a944:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a946:	9308      	str	r3, [sp, #32]
 800a948:	9409      	str	r4, [sp, #36]	; 0x24
 800a94a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	da00      	bge.n	800a952 <_dtoa_r+0x4a6>
 800a950:	e172      	b.n	800ac38 <_dtoa_r+0x78c>
 800a952:	9a02      	ldr	r2, [sp, #8]
 800a954:	2a0e      	cmp	r2, #14
 800a956:	dd00      	ble.n	800a95a <_dtoa_r+0x4ae>
 800a958:	e16e      	b.n	800ac38 <_dtoa_r+0x78c>
 800a95a:	4b78      	ldr	r3, [pc, #480]	; (800ab3c <_dtoa_r+0x690>)
 800a95c:	00d2      	lsls	r2, r2, #3
 800a95e:	189b      	adds	r3, r3, r2
 800a960:	685c      	ldr	r4, [r3, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	930a      	str	r3, [sp, #40]	; 0x28
 800a966:	940b      	str	r4, [sp, #44]	; 0x2c
 800a968:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	db00      	blt.n	800a970 <_dtoa_r+0x4c4>
 800a96e:	e0f7      	b.n	800ab60 <_dtoa_r+0x6b4>
 800a970:	9b07      	ldr	r3, [sp, #28]
 800a972:	2b00      	cmp	r3, #0
 800a974:	dd00      	ble.n	800a978 <_dtoa_r+0x4cc>
 800a976:	e0f3      	b.n	800ab60 <_dtoa_r+0x6b4>
 800a978:	d000      	beq.n	800a97c <_dtoa_r+0x4d0>
 800a97a:	e282      	b.n	800ae82 <_dtoa_r+0x9d6>
 800a97c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a97e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a980:	2200      	movs	r2, #0
 800a982:	4b74      	ldr	r3, [pc, #464]	; (800ab54 <_dtoa_r+0x6a8>)
 800a984:	f7f7 fc30 	bl	80021e8 <__aeabi_dmul>
 800a988:	9a08      	ldr	r2, [sp, #32]
 800a98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98c:	f7f5 fd8a 	bl	80004a4 <__aeabi_dcmpge>
 800a990:	9e07      	ldr	r6, [sp, #28]
 800a992:	0035      	movs	r5, r6
 800a994:	2800      	cmp	r0, #0
 800a996:	d000      	beq.n	800a99a <_dtoa_r+0x4ee>
 800a998:	e259      	b.n	800ae4e <_dtoa_r+0x9a2>
 800a99a:	9b06      	ldr	r3, [sp, #24]
 800a99c:	9a06      	ldr	r2, [sp, #24]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	9308      	str	r3, [sp, #32]
 800a9a2:	2331      	movs	r3, #49	; 0x31
 800a9a4:	7013      	strb	r3, [r2, #0]
 800a9a6:	9b02      	ldr	r3, [sp, #8]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	9302      	str	r3, [sp, #8]
 800a9ac:	e254      	b.n	800ae58 <_dtoa_r+0x9ac>
 800a9ae:	4234      	tst	r4, r6
 800a9b0:	d007      	beq.n	800a9c2 <_dtoa_r+0x516>
 800a9b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	9310      	str	r3, [sp, #64]	; 0x40
 800a9b8:	682a      	ldr	r2, [r5, #0]
 800a9ba:	686b      	ldr	r3, [r5, #4]
 800a9bc:	f7f7 fc14 	bl	80021e8 <__aeabi_dmul>
 800a9c0:	0033      	movs	r3, r6
 800a9c2:	1064      	asrs	r4, r4, #1
 800a9c4:	3508      	adds	r5, #8
 800a9c6:	e75a      	b.n	800a87e <_dtoa_r+0x3d2>
 800a9c8:	9e02      	ldr	r6, [sp, #8]
 800a9ca:	9b07      	ldr	r3, [sp, #28]
 800a9cc:	e780      	b.n	800a8d0 <_dtoa_r+0x424>
 800a9ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9d2:	1e5a      	subs	r2, r3, #1
 800a9d4:	4b59      	ldr	r3, [pc, #356]	; (800ab3c <_dtoa_r+0x690>)
 800a9d6:	00d2      	lsls	r2, r2, #3
 800a9d8:	189b      	adds	r3, r3, r2
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	2900      	cmp	r1, #0
 800a9e0:	d051      	beq.n	800aa86 <_dtoa_r+0x5da>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	495d      	ldr	r1, [pc, #372]	; (800ab5c <_dtoa_r+0x6b0>)
 800a9e6:	f7f6 fffd 	bl	80019e4 <__aeabi_ddiv>
 800a9ea:	9a08      	ldr	r2, [sp, #32]
 800a9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9ee:	f7f7 fe67 	bl	80026c0 <__aeabi_dsub>
 800a9f2:	9a06      	ldr	r2, [sp, #24]
 800a9f4:	9b06      	ldr	r3, [sp, #24]
 800a9f6:	4694      	mov	ip, r2
 800a9f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800a9fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9fc:	9010      	str	r0, [sp, #64]	; 0x40
 800a9fe:	9111      	str	r1, [sp, #68]	; 0x44
 800aa00:	4463      	add	r3, ip
 800aa02:	9319      	str	r3, [sp, #100]	; 0x64
 800aa04:	0029      	movs	r1, r5
 800aa06:	0020      	movs	r0, r4
 800aa08:	f7f8 fa0a 	bl	8002e20 <__aeabi_d2iz>
 800aa0c:	9014      	str	r0, [sp, #80]	; 0x50
 800aa0e:	f7f8 fa3d 	bl	8002e8c <__aeabi_i2d>
 800aa12:	0002      	movs	r2, r0
 800aa14:	000b      	movs	r3, r1
 800aa16:	0020      	movs	r0, r4
 800aa18:	0029      	movs	r1, r5
 800aa1a:	f7f7 fe51 	bl	80026c0 <__aeabi_dsub>
 800aa1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa22:	3301      	adds	r3, #1
 800aa24:	9308      	str	r3, [sp, #32]
 800aa26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa28:	0004      	movs	r4, r0
 800aa2a:	3330      	adds	r3, #48	; 0x30
 800aa2c:	7013      	strb	r3, [r2, #0]
 800aa2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa32:	000d      	movs	r5, r1
 800aa34:	f7f5 fd18 	bl	8000468 <__aeabi_dcmplt>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d175      	bne.n	800ab28 <_dtoa_r+0x67c>
 800aa3c:	0022      	movs	r2, r4
 800aa3e:	002b      	movs	r3, r5
 800aa40:	2000      	movs	r0, #0
 800aa42:	4940      	ldr	r1, [pc, #256]	; (800ab44 <_dtoa_r+0x698>)
 800aa44:	f7f7 fe3c 	bl	80026c0 <__aeabi_dsub>
 800aa48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa4c:	f7f5 fd0c 	bl	8000468 <__aeabi_dcmplt>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d000      	beq.n	800aa56 <_dtoa_r+0x5aa>
 800aa54:	e0d2      	b.n	800abfc <_dtoa_r+0x750>
 800aa56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa58:	9a08      	ldr	r2, [sp, #32]
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d100      	bne.n	800aa60 <_dtoa_r+0x5b4>
 800aa5e:	e770      	b.n	800a942 <_dtoa_r+0x496>
 800aa60:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aa62:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aa64:	2200      	movs	r2, #0
 800aa66:	4b38      	ldr	r3, [pc, #224]	; (800ab48 <_dtoa_r+0x69c>)
 800aa68:	f7f7 fbbe 	bl	80021e8 <__aeabi_dmul>
 800aa6c:	4b36      	ldr	r3, [pc, #216]	; (800ab48 <_dtoa_r+0x69c>)
 800aa6e:	9010      	str	r0, [sp, #64]	; 0x40
 800aa70:	9111      	str	r1, [sp, #68]	; 0x44
 800aa72:	2200      	movs	r2, #0
 800aa74:	0020      	movs	r0, r4
 800aa76:	0029      	movs	r1, r5
 800aa78:	f7f7 fbb6 	bl	80021e8 <__aeabi_dmul>
 800aa7c:	9b08      	ldr	r3, [sp, #32]
 800aa7e:	0004      	movs	r4, r0
 800aa80:	000d      	movs	r5, r1
 800aa82:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa84:	e7be      	b.n	800aa04 <_dtoa_r+0x558>
 800aa86:	9808      	ldr	r0, [sp, #32]
 800aa88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa8a:	f7f7 fbad 	bl	80021e8 <__aeabi_dmul>
 800aa8e:	9a06      	ldr	r2, [sp, #24]
 800aa90:	9b06      	ldr	r3, [sp, #24]
 800aa92:	4694      	mov	ip, r2
 800aa94:	9308      	str	r3, [sp, #32]
 800aa96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa98:	9010      	str	r0, [sp, #64]	; 0x40
 800aa9a:	9111      	str	r1, [sp, #68]	; 0x44
 800aa9c:	4463      	add	r3, ip
 800aa9e:	9319      	str	r3, [sp, #100]	; 0x64
 800aaa0:	0029      	movs	r1, r5
 800aaa2:	0020      	movs	r0, r4
 800aaa4:	f7f8 f9bc 	bl	8002e20 <__aeabi_d2iz>
 800aaa8:	9017      	str	r0, [sp, #92]	; 0x5c
 800aaaa:	f7f8 f9ef 	bl	8002e8c <__aeabi_i2d>
 800aaae:	0002      	movs	r2, r0
 800aab0:	000b      	movs	r3, r1
 800aab2:	0020      	movs	r0, r4
 800aab4:	0029      	movs	r1, r5
 800aab6:	f7f7 fe03 	bl	80026c0 <__aeabi_dsub>
 800aaba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aabc:	9a08      	ldr	r2, [sp, #32]
 800aabe:	3330      	adds	r3, #48	; 0x30
 800aac0:	7013      	strb	r3, [r2, #0]
 800aac2:	0013      	movs	r3, r2
 800aac4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aac6:	3301      	adds	r3, #1
 800aac8:	0004      	movs	r4, r0
 800aaca:	000d      	movs	r5, r1
 800aacc:	9308      	str	r3, [sp, #32]
 800aace:	4293      	cmp	r3, r2
 800aad0:	d12c      	bne.n	800ab2c <_dtoa_r+0x680>
 800aad2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aad4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aad6:	9a06      	ldr	r2, [sp, #24]
 800aad8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aada:	4694      	mov	ip, r2
 800aadc:	4463      	add	r3, ip
 800aade:	2200      	movs	r2, #0
 800aae0:	9308      	str	r3, [sp, #32]
 800aae2:	4b1e      	ldr	r3, [pc, #120]	; (800ab5c <_dtoa_r+0x6b0>)
 800aae4:	f7f6 fc42 	bl	800136c <__aeabi_dadd>
 800aae8:	0002      	movs	r2, r0
 800aaea:	000b      	movs	r3, r1
 800aaec:	0020      	movs	r0, r4
 800aaee:	0029      	movs	r1, r5
 800aaf0:	f7f5 fcce 	bl	8000490 <__aeabi_dcmpgt>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d000      	beq.n	800aafa <_dtoa_r+0x64e>
 800aaf8:	e080      	b.n	800abfc <_dtoa_r+0x750>
 800aafa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aafc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aafe:	2000      	movs	r0, #0
 800ab00:	4916      	ldr	r1, [pc, #88]	; (800ab5c <_dtoa_r+0x6b0>)
 800ab02:	f7f7 fddd 	bl	80026c0 <__aeabi_dsub>
 800ab06:	0002      	movs	r2, r0
 800ab08:	000b      	movs	r3, r1
 800ab0a:	0020      	movs	r0, r4
 800ab0c:	0029      	movs	r1, r5
 800ab0e:	f7f5 fcab 	bl	8000468 <__aeabi_dcmplt>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d100      	bne.n	800ab18 <_dtoa_r+0x66c>
 800ab16:	e714      	b.n	800a942 <_dtoa_r+0x496>
 800ab18:	9b08      	ldr	r3, [sp, #32]
 800ab1a:	001a      	movs	r2, r3
 800ab1c:	3a01      	subs	r2, #1
 800ab1e:	9208      	str	r2, [sp, #32]
 800ab20:	7812      	ldrb	r2, [r2, #0]
 800ab22:	2a30      	cmp	r2, #48	; 0x30
 800ab24:	d0f8      	beq.n	800ab18 <_dtoa_r+0x66c>
 800ab26:	9308      	str	r3, [sp, #32]
 800ab28:	9602      	str	r6, [sp, #8]
 800ab2a:	e055      	b.n	800abd8 <_dtoa_r+0x72c>
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	4b06      	ldr	r3, [pc, #24]	; (800ab48 <_dtoa_r+0x69c>)
 800ab30:	f7f7 fb5a 	bl	80021e8 <__aeabi_dmul>
 800ab34:	0004      	movs	r4, r0
 800ab36:	000d      	movs	r5, r1
 800ab38:	e7b2      	b.n	800aaa0 <_dtoa_r+0x5f4>
 800ab3a:	46c0      	nop			; (mov r8, r8)
 800ab3c:	0800d748 	.word	0x0800d748
 800ab40:	0800d720 	.word	0x0800d720
 800ab44:	3ff00000 	.word	0x3ff00000
 800ab48:	40240000 	.word	0x40240000
 800ab4c:	401c0000 	.word	0x401c0000
 800ab50:	fcc00000 	.word	0xfcc00000
 800ab54:	40140000 	.word	0x40140000
 800ab58:	7cc00000 	.word	0x7cc00000
 800ab5c:	3fe00000 	.word	0x3fe00000
 800ab60:	9b07      	ldr	r3, [sp, #28]
 800ab62:	9e06      	ldr	r6, [sp, #24]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	199b      	adds	r3, r3, r6
 800ab68:	930c      	str	r3, [sp, #48]	; 0x30
 800ab6a:	9c08      	ldr	r4, [sp, #32]
 800ab6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab72:	0020      	movs	r0, r4
 800ab74:	0029      	movs	r1, r5
 800ab76:	f7f6 ff35 	bl	80019e4 <__aeabi_ddiv>
 800ab7a:	f7f8 f951 	bl	8002e20 <__aeabi_d2iz>
 800ab7e:	9007      	str	r0, [sp, #28]
 800ab80:	f7f8 f984 	bl	8002e8c <__aeabi_i2d>
 800ab84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab88:	f7f7 fb2e 	bl	80021e8 <__aeabi_dmul>
 800ab8c:	0002      	movs	r2, r0
 800ab8e:	000b      	movs	r3, r1
 800ab90:	0020      	movs	r0, r4
 800ab92:	0029      	movs	r1, r5
 800ab94:	f7f7 fd94 	bl	80026c0 <__aeabi_dsub>
 800ab98:	0033      	movs	r3, r6
 800ab9a:	9a07      	ldr	r2, [sp, #28]
 800ab9c:	3601      	adds	r6, #1
 800ab9e:	3230      	adds	r2, #48	; 0x30
 800aba0:	701a      	strb	r2, [r3, #0]
 800aba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aba4:	9608      	str	r6, [sp, #32]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d139      	bne.n	800ac1e <_dtoa_r+0x772>
 800abaa:	0002      	movs	r2, r0
 800abac:	000b      	movs	r3, r1
 800abae:	f7f6 fbdd 	bl	800136c <__aeabi_dadd>
 800abb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb6:	0004      	movs	r4, r0
 800abb8:	000d      	movs	r5, r1
 800abba:	f7f5 fc69 	bl	8000490 <__aeabi_dcmpgt>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d11b      	bne.n	800abfa <_dtoa_r+0x74e>
 800abc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abc6:	0020      	movs	r0, r4
 800abc8:	0029      	movs	r1, r5
 800abca:	f7f5 fc47 	bl	800045c <__aeabi_dcmpeq>
 800abce:	2800      	cmp	r0, #0
 800abd0:	d002      	beq.n	800abd8 <_dtoa_r+0x72c>
 800abd2:	9b07      	ldr	r3, [sp, #28]
 800abd4:	07db      	lsls	r3, r3, #31
 800abd6:	d410      	bmi.n	800abfa <_dtoa_r+0x74e>
 800abd8:	0038      	movs	r0, r7
 800abda:	9905      	ldr	r1, [sp, #20]
 800abdc:	f000 faf4 	bl	800b1c8 <_Bfree>
 800abe0:	2300      	movs	r3, #0
 800abe2:	9a08      	ldr	r2, [sp, #32]
 800abe4:	9802      	ldr	r0, [sp, #8]
 800abe6:	7013      	strb	r3, [r2, #0]
 800abe8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800abea:	3001      	adds	r0, #1
 800abec:	6018      	str	r0, [r3, #0]
 800abee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d100      	bne.n	800abf6 <_dtoa_r+0x74a>
 800abf4:	e4a6      	b.n	800a544 <_dtoa_r+0x98>
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	e4a4      	b.n	800a544 <_dtoa_r+0x98>
 800abfa:	9e02      	ldr	r6, [sp, #8]
 800abfc:	9b08      	ldr	r3, [sp, #32]
 800abfe:	9308      	str	r3, [sp, #32]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	781a      	ldrb	r2, [r3, #0]
 800ac04:	2a39      	cmp	r2, #57	; 0x39
 800ac06:	d106      	bne.n	800ac16 <_dtoa_r+0x76a>
 800ac08:	9a06      	ldr	r2, [sp, #24]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d1f7      	bne.n	800abfe <_dtoa_r+0x752>
 800ac0e:	2230      	movs	r2, #48	; 0x30
 800ac10:	9906      	ldr	r1, [sp, #24]
 800ac12:	3601      	adds	r6, #1
 800ac14:	700a      	strb	r2, [r1, #0]
 800ac16:	781a      	ldrb	r2, [r3, #0]
 800ac18:	3201      	adds	r2, #1
 800ac1a:	701a      	strb	r2, [r3, #0]
 800ac1c:	e784      	b.n	800ab28 <_dtoa_r+0x67c>
 800ac1e:	2200      	movs	r2, #0
 800ac20:	4baa      	ldr	r3, [pc, #680]	; (800aecc <_dtoa_r+0xa20>)
 800ac22:	f7f7 fae1 	bl	80021e8 <__aeabi_dmul>
 800ac26:	2200      	movs	r2, #0
 800ac28:	2300      	movs	r3, #0
 800ac2a:	0004      	movs	r4, r0
 800ac2c:	000d      	movs	r5, r1
 800ac2e:	f7f5 fc15 	bl	800045c <__aeabi_dcmpeq>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d09b      	beq.n	800ab6e <_dtoa_r+0x6c2>
 800ac36:	e7cf      	b.n	800abd8 <_dtoa_r+0x72c>
 800ac38:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac3a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ac3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ac3e:	2d00      	cmp	r5, #0
 800ac40:	d012      	beq.n	800ac68 <_dtoa_r+0x7bc>
 800ac42:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac44:	2a01      	cmp	r2, #1
 800ac46:	dc66      	bgt.n	800ad16 <_dtoa_r+0x86a>
 800ac48:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac4a:	2a00      	cmp	r2, #0
 800ac4c:	d05d      	beq.n	800ad0a <_dtoa_r+0x85e>
 800ac4e:	4aa0      	ldr	r2, [pc, #640]	; (800aed0 <_dtoa_r+0xa24>)
 800ac50:	189b      	adds	r3, r3, r2
 800ac52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac54:	2101      	movs	r1, #1
 800ac56:	18d2      	adds	r2, r2, r3
 800ac58:	920a      	str	r2, [sp, #40]	; 0x28
 800ac5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac5c:	0038      	movs	r0, r7
 800ac5e:	18d3      	adds	r3, r2, r3
 800ac60:	930d      	str	r3, [sp, #52]	; 0x34
 800ac62:	f000 fb61 	bl	800b328 <__i2b>
 800ac66:	0005      	movs	r5, r0
 800ac68:	2c00      	cmp	r4, #0
 800ac6a:	dd0e      	ble.n	800ac8a <_dtoa_r+0x7de>
 800ac6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dd0b      	ble.n	800ac8a <_dtoa_r+0x7de>
 800ac72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac74:	0023      	movs	r3, r4
 800ac76:	4294      	cmp	r4, r2
 800ac78:	dd00      	ble.n	800ac7c <_dtoa_r+0x7d0>
 800ac7a:	0013      	movs	r3, r2
 800ac7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac7e:	1ae4      	subs	r4, r4, r3
 800ac80:	1ad2      	subs	r2, r2, r3
 800ac82:	920a      	str	r2, [sp, #40]	; 0x28
 800ac84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	930d      	str	r3, [sp, #52]	; 0x34
 800ac8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d01f      	beq.n	800acd0 <_dtoa_r+0x824>
 800ac90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d054      	beq.n	800ad40 <_dtoa_r+0x894>
 800ac96:	2e00      	cmp	r6, #0
 800ac98:	dd11      	ble.n	800acbe <_dtoa_r+0x812>
 800ac9a:	0029      	movs	r1, r5
 800ac9c:	0032      	movs	r2, r6
 800ac9e:	0038      	movs	r0, r7
 800aca0:	f000 fc08 	bl	800b4b4 <__pow5mult>
 800aca4:	9a05      	ldr	r2, [sp, #20]
 800aca6:	0001      	movs	r1, r0
 800aca8:	0005      	movs	r5, r0
 800acaa:	0038      	movs	r0, r7
 800acac:	f000 fb52 	bl	800b354 <__multiply>
 800acb0:	9905      	ldr	r1, [sp, #20]
 800acb2:	9014      	str	r0, [sp, #80]	; 0x50
 800acb4:	0038      	movs	r0, r7
 800acb6:	f000 fa87 	bl	800b1c8 <_Bfree>
 800acba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acbc:	9305      	str	r3, [sp, #20]
 800acbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acc0:	1b9a      	subs	r2, r3, r6
 800acc2:	42b3      	cmp	r3, r6
 800acc4:	d004      	beq.n	800acd0 <_dtoa_r+0x824>
 800acc6:	0038      	movs	r0, r7
 800acc8:	9905      	ldr	r1, [sp, #20]
 800acca:	f000 fbf3 	bl	800b4b4 <__pow5mult>
 800acce:	9005      	str	r0, [sp, #20]
 800acd0:	2101      	movs	r1, #1
 800acd2:	0038      	movs	r0, r7
 800acd4:	f000 fb28 	bl	800b328 <__i2b>
 800acd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acda:	0006      	movs	r6, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	dd31      	ble.n	800ad44 <_dtoa_r+0x898>
 800ace0:	001a      	movs	r2, r3
 800ace2:	0001      	movs	r1, r0
 800ace4:	0038      	movs	r0, r7
 800ace6:	f000 fbe5 	bl	800b4b4 <__pow5mult>
 800acea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acec:	0006      	movs	r6, r0
 800acee:	2b01      	cmp	r3, #1
 800acf0:	dd2d      	ble.n	800ad4e <_dtoa_r+0x8a2>
 800acf2:	2300      	movs	r3, #0
 800acf4:	930e      	str	r3, [sp, #56]	; 0x38
 800acf6:	6933      	ldr	r3, [r6, #16]
 800acf8:	3303      	adds	r3, #3
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	18f3      	adds	r3, r6, r3
 800acfe:	6858      	ldr	r0, [r3, #4]
 800ad00:	f000 faca 	bl	800b298 <__hi0bits>
 800ad04:	2320      	movs	r3, #32
 800ad06:	1a18      	subs	r0, r3, r0
 800ad08:	e039      	b.n	800ad7e <_dtoa_r+0x8d2>
 800ad0a:	2336      	movs	r3, #54	; 0x36
 800ad0c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad0e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ad10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad12:	1a9b      	subs	r3, r3, r2
 800ad14:	e79d      	b.n	800ac52 <_dtoa_r+0x7a6>
 800ad16:	9b07      	ldr	r3, [sp, #28]
 800ad18:	1e5e      	subs	r6, r3, #1
 800ad1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad1c:	42b3      	cmp	r3, r6
 800ad1e:	db07      	blt.n	800ad30 <_dtoa_r+0x884>
 800ad20:	1b9e      	subs	r6, r3, r6
 800ad22:	9b07      	ldr	r3, [sp, #28]
 800ad24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	da93      	bge.n	800ac52 <_dtoa_r+0x7a6>
 800ad2a:	1ae4      	subs	r4, r4, r3
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e790      	b.n	800ac52 <_dtoa_r+0x7a6>
 800ad30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad34:	1af3      	subs	r3, r6, r3
 800ad36:	18d3      	adds	r3, r2, r3
 800ad38:	960e      	str	r6, [sp, #56]	; 0x38
 800ad3a:	9315      	str	r3, [sp, #84]	; 0x54
 800ad3c:	2600      	movs	r6, #0
 800ad3e:	e7f0      	b.n	800ad22 <_dtoa_r+0x876>
 800ad40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad42:	e7c0      	b.n	800acc6 <_dtoa_r+0x81a>
 800ad44:	2300      	movs	r3, #0
 800ad46:	930e      	str	r3, [sp, #56]	; 0x38
 800ad48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	dc13      	bgt.n	800ad76 <_dtoa_r+0x8ca>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	930e      	str	r3, [sp, #56]	; 0x38
 800ad52:	9b08      	ldr	r3, [sp, #32]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10e      	bne.n	800ad76 <_dtoa_r+0x8ca>
 800ad58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad5a:	031b      	lsls	r3, r3, #12
 800ad5c:	d10b      	bne.n	800ad76 <_dtoa_r+0x8ca>
 800ad5e:	4b5d      	ldr	r3, [pc, #372]	; (800aed4 <_dtoa_r+0xa28>)
 800ad60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad62:	4213      	tst	r3, r2
 800ad64:	d007      	beq.n	800ad76 <_dtoa_r+0x8ca>
 800ad66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad68:	3301      	adds	r3, #1
 800ad6a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad6e:	3301      	adds	r3, #1
 800ad70:	930d      	str	r3, [sp, #52]	; 0x34
 800ad72:	2301      	movs	r3, #1
 800ad74:	930e      	str	r3, [sp, #56]	; 0x38
 800ad76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad78:	2001      	movs	r0, #1
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1bb      	bne.n	800acf6 <_dtoa_r+0x84a>
 800ad7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad80:	221f      	movs	r2, #31
 800ad82:	1818      	adds	r0, r3, r0
 800ad84:	0003      	movs	r3, r0
 800ad86:	4013      	ands	r3, r2
 800ad88:	4210      	tst	r0, r2
 800ad8a:	d046      	beq.n	800ae1a <_dtoa_r+0x96e>
 800ad8c:	3201      	adds	r2, #1
 800ad8e:	1ad2      	subs	r2, r2, r3
 800ad90:	2a04      	cmp	r2, #4
 800ad92:	dd3f      	ble.n	800ae14 <_dtoa_r+0x968>
 800ad94:	221c      	movs	r2, #28
 800ad96:	1ad3      	subs	r3, r2, r3
 800ad98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad9a:	18e4      	adds	r4, r4, r3
 800ad9c:	18d2      	adds	r2, r2, r3
 800ad9e:	920a      	str	r2, [sp, #40]	; 0x28
 800ada0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ada2:	18d3      	adds	r3, r2, r3
 800ada4:	930d      	str	r3, [sp, #52]	; 0x34
 800ada6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	dd05      	ble.n	800adb8 <_dtoa_r+0x90c>
 800adac:	001a      	movs	r2, r3
 800adae:	0038      	movs	r0, r7
 800adb0:	9905      	ldr	r1, [sp, #20]
 800adb2:	f000 fbdb 	bl	800b56c <__lshift>
 800adb6:	9005      	str	r0, [sp, #20]
 800adb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adba:	2b00      	cmp	r3, #0
 800adbc:	dd05      	ble.n	800adca <_dtoa_r+0x91e>
 800adbe:	0031      	movs	r1, r6
 800adc0:	001a      	movs	r2, r3
 800adc2:	0038      	movs	r0, r7
 800adc4:	f000 fbd2 	bl	800b56c <__lshift>
 800adc8:	0006      	movs	r6, r0
 800adca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d026      	beq.n	800ae1e <_dtoa_r+0x972>
 800add0:	0031      	movs	r1, r6
 800add2:	9805      	ldr	r0, [sp, #20]
 800add4:	f000 fc38 	bl	800b648 <__mcmp>
 800add8:	2800      	cmp	r0, #0
 800adda:	da20      	bge.n	800ae1e <_dtoa_r+0x972>
 800addc:	9b02      	ldr	r3, [sp, #8]
 800adde:	220a      	movs	r2, #10
 800ade0:	3b01      	subs	r3, #1
 800ade2:	9302      	str	r3, [sp, #8]
 800ade4:	0038      	movs	r0, r7
 800ade6:	2300      	movs	r3, #0
 800ade8:	9905      	ldr	r1, [sp, #20]
 800adea:	f000 fa11 	bl	800b210 <__multadd>
 800adee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adf0:	9005      	str	r0, [sp, #20]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d100      	bne.n	800adf8 <_dtoa_r+0x94c>
 800adf6:	e166      	b.n	800b0c6 <_dtoa_r+0xc1a>
 800adf8:	2300      	movs	r3, #0
 800adfa:	0029      	movs	r1, r5
 800adfc:	220a      	movs	r2, #10
 800adfe:	0038      	movs	r0, r7
 800ae00:	f000 fa06 	bl	800b210 <__multadd>
 800ae04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae06:	0005      	movs	r5, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	dc47      	bgt.n	800ae9c <_dtoa_r+0x9f0>
 800ae0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	dc0d      	bgt.n	800ae2e <_dtoa_r+0x982>
 800ae12:	e043      	b.n	800ae9c <_dtoa_r+0x9f0>
 800ae14:	2a04      	cmp	r2, #4
 800ae16:	d0c6      	beq.n	800ada6 <_dtoa_r+0x8fa>
 800ae18:	0013      	movs	r3, r2
 800ae1a:	331c      	adds	r3, #28
 800ae1c:	e7bc      	b.n	800ad98 <_dtoa_r+0x8ec>
 800ae1e:	9b07      	ldr	r3, [sp, #28]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	dc35      	bgt.n	800ae90 <_dtoa_r+0x9e4>
 800ae24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	dd32      	ble.n	800ae90 <_dtoa_r+0x9e4>
 800ae2a:	9b07      	ldr	r3, [sp, #28]
 800ae2c:	930c      	str	r3, [sp, #48]	; 0x30
 800ae2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10c      	bne.n	800ae4e <_dtoa_r+0x9a2>
 800ae34:	0031      	movs	r1, r6
 800ae36:	2205      	movs	r2, #5
 800ae38:	0038      	movs	r0, r7
 800ae3a:	f000 f9e9 	bl	800b210 <__multadd>
 800ae3e:	0006      	movs	r6, r0
 800ae40:	0001      	movs	r1, r0
 800ae42:	9805      	ldr	r0, [sp, #20]
 800ae44:	f000 fc00 	bl	800b648 <__mcmp>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	dd00      	ble.n	800ae4e <_dtoa_r+0x9a2>
 800ae4c:	e5a5      	b.n	800a99a <_dtoa_r+0x4ee>
 800ae4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae50:	43db      	mvns	r3, r3
 800ae52:	9302      	str	r3, [sp, #8]
 800ae54:	9b06      	ldr	r3, [sp, #24]
 800ae56:	9308      	str	r3, [sp, #32]
 800ae58:	2400      	movs	r4, #0
 800ae5a:	0031      	movs	r1, r6
 800ae5c:	0038      	movs	r0, r7
 800ae5e:	f000 f9b3 	bl	800b1c8 <_Bfree>
 800ae62:	2d00      	cmp	r5, #0
 800ae64:	d100      	bne.n	800ae68 <_dtoa_r+0x9bc>
 800ae66:	e6b7      	b.n	800abd8 <_dtoa_r+0x72c>
 800ae68:	2c00      	cmp	r4, #0
 800ae6a:	d005      	beq.n	800ae78 <_dtoa_r+0x9cc>
 800ae6c:	42ac      	cmp	r4, r5
 800ae6e:	d003      	beq.n	800ae78 <_dtoa_r+0x9cc>
 800ae70:	0021      	movs	r1, r4
 800ae72:	0038      	movs	r0, r7
 800ae74:	f000 f9a8 	bl	800b1c8 <_Bfree>
 800ae78:	0029      	movs	r1, r5
 800ae7a:	0038      	movs	r0, r7
 800ae7c:	f000 f9a4 	bl	800b1c8 <_Bfree>
 800ae80:	e6aa      	b.n	800abd8 <_dtoa_r+0x72c>
 800ae82:	2600      	movs	r6, #0
 800ae84:	0035      	movs	r5, r6
 800ae86:	e7e2      	b.n	800ae4e <_dtoa_r+0x9a2>
 800ae88:	9602      	str	r6, [sp, #8]
 800ae8a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800ae8c:	0035      	movs	r5, r6
 800ae8e:	e584      	b.n	800a99a <_dtoa_r+0x4ee>
 800ae90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d100      	bne.n	800ae98 <_dtoa_r+0x9ec>
 800ae96:	e0ce      	b.n	800b036 <_dtoa_r+0xb8a>
 800ae98:	9b07      	ldr	r3, [sp, #28]
 800ae9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ae9c:	2c00      	cmp	r4, #0
 800ae9e:	dd05      	ble.n	800aeac <_dtoa_r+0xa00>
 800aea0:	0029      	movs	r1, r5
 800aea2:	0022      	movs	r2, r4
 800aea4:	0038      	movs	r0, r7
 800aea6:	f000 fb61 	bl	800b56c <__lshift>
 800aeaa:	0005      	movs	r5, r0
 800aeac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeae:	0028      	movs	r0, r5
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d022      	beq.n	800aefa <_dtoa_r+0xa4e>
 800aeb4:	0038      	movs	r0, r7
 800aeb6:	6869      	ldr	r1, [r5, #4]
 800aeb8:	f000 f942 	bl	800b140 <_Balloc>
 800aebc:	1e04      	subs	r4, r0, #0
 800aebe:	d10f      	bne.n	800aee0 <_dtoa_r+0xa34>
 800aec0:	0002      	movs	r2, r0
 800aec2:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <_dtoa_r+0xa2c>)
 800aec4:	4905      	ldr	r1, [pc, #20]	; (800aedc <_dtoa_r+0xa30>)
 800aec6:	f7ff fb06 	bl	800a4d6 <_dtoa_r+0x2a>
 800aeca:	46c0      	nop			; (mov r8, r8)
 800aecc:	40240000 	.word	0x40240000
 800aed0:	00000433 	.word	0x00000433
 800aed4:	7ff00000 	.word	0x7ff00000
 800aed8:	0800d6ac 	.word	0x0800d6ac
 800aedc:	000002ea 	.word	0x000002ea
 800aee0:	0029      	movs	r1, r5
 800aee2:	692b      	ldr	r3, [r5, #16]
 800aee4:	310c      	adds	r1, #12
 800aee6:	1c9a      	adds	r2, r3, #2
 800aee8:	0092      	lsls	r2, r2, #2
 800aeea:	300c      	adds	r0, #12
 800aeec:	f7fe fbd2 	bl	8009694 <memcpy>
 800aef0:	2201      	movs	r2, #1
 800aef2:	0021      	movs	r1, r4
 800aef4:	0038      	movs	r0, r7
 800aef6:	f000 fb39 	bl	800b56c <__lshift>
 800aefa:	9b06      	ldr	r3, [sp, #24]
 800aefc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aefe:	930a      	str	r3, [sp, #40]	; 0x28
 800af00:	3b01      	subs	r3, #1
 800af02:	189b      	adds	r3, r3, r2
 800af04:	2201      	movs	r2, #1
 800af06:	002c      	movs	r4, r5
 800af08:	0005      	movs	r5, r0
 800af0a:	9314      	str	r3, [sp, #80]	; 0x50
 800af0c:	9b08      	ldr	r3, [sp, #32]
 800af0e:	4013      	ands	r3, r2
 800af10:	930f      	str	r3, [sp, #60]	; 0x3c
 800af12:	0031      	movs	r1, r6
 800af14:	9805      	ldr	r0, [sp, #20]
 800af16:	f7ff fa3d 	bl	800a394 <quorem>
 800af1a:	0003      	movs	r3, r0
 800af1c:	0021      	movs	r1, r4
 800af1e:	3330      	adds	r3, #48	; 0x30
 800af20:	900d      	str	r0, [sp, #52]	; 0x34
 800af22:	9805      	ldr	r0, [sp, #20]
 800af24:	9307      	str	r3, [sp, #28]
 800af26:	f000 fb8f 	bl	800b648 <__mcmp>
 800af2a:	002a      	movs	r2, r5
 800af2c:	900e      	str	r0, [sp, #56]	; 0x38
 800af2e:	0031      	movs	r1, r6
 800af30:	0038      	movs	r0, r7
 800af32:	f000 fba5 	bl	800b680 <__mdiff>
 800af36:	68c3      	ldr	r3, [r0, #12]
 800af38:	9008      	str	r0, [sp, #32]
 800af3a:	9310      	str	r3, [sp, #64]	; 0x40
 800af3c:	2301      	movs	r3, #1
 800af3e:	930c      	str	r3, [sp, #48]	; 0x30
 800af40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af42:	2b00      	cmp	r3, #0
 800af44:	d104      	bne.n	800af50 <_dtoa_r+0xaa4>
 800af46:	0001      	movs	r1, r0
 800af48:	9805      	ldr	r0, [sp, #20]
 800af4a:	f000 fb7d 	bl	800b648 <__mcmp>
 800af4e:	900c      	str	r0, [sp, #48]	; 0x30
 800af50:	0038      	movs	r0, r7
 800af52:	9908      	ldr	r1, [sp, #32]
 800af54:	f000 f938 	bl	800b1c8 <_Bfree>
 800af58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af5c:	3301      	adds	r3, #1
 800af5e:	9308      	str	r3, [sp, #32]
 800af60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af62:	4313      	orrs	r3, r2
 800af64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af66:	4313      	orrs	r3, r2
 800af68:	d10c      	bne.n	800af84 <_dtoa_r+0xad8>
 800af6a:	9b07      	ldr	r3, [sp, #28]
 800af6c:	2b39      	cmp	r3, #57	; 0x39
 800af6e:	d026      	beq.n	800afbe <_dtoa_r+0xb12>
 800af70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af72:	2b00      	cmp	r3, #0
 800af74:	dd02      	ble.n	800af7c <_dtoa_r+0xad0>
 800af76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af78:	3331      	adds	r3, #49	; 0x31
 800af7a:	9307      	str	r3, [sp, #28]
 800af7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af7e:	9a07      	ldr	r2, [sp, #28]
 800af80:	701a      	strb	r2, [r3, #0]
 800af82:	e76a      	b.n	800ae5a <_dtoa_r+0x9ae>
 800af84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af86:	2b00      	cmp	r3, #0
 800af88:	db04      	blt.n	800af94 <_dtoa_r+0xae8>
 800af8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af8c:	4313      	orrs	r3, r2
 800af8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af90:	4313      	orrs	r3, r2
 800af92:	d11f      	bne.n	800afd4 <_dtoa_r+0xb28>
 800af94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af96:	2b00      	cmp	r3, #0
 800af98:	ddf0      	ble.n	800af7c <_dtoa_r+0xad0>
 800af9a:	9905      	ldr	r1, [sp, #20]
 800af9c:	2201      	movs	r2, #1
 800af9e:	0038      	movs	r0, r7
 800afa0:	f000 fae4 	bl	800b56c <__lshift>
 800afa4:	0031      	movs	r1, r6
 800afa6:	9005      	str	r0, [sp, #20]
 800afa8:	f000 fb4e 	bl	800b648 <__mcmp>
 800afac:	2800      	cmp	r0, #0
 800afae:	dc03      	bgt.n	800afb8 <_dtoa_r+0xb0c>
 800afb0:	d1e4      	bne.n	800af7c <_dtoa_r+0xad0>
 800afb2:	9b07      	ldr	r3, [sp, #28]
 800afb4:	07db      	lsls	r3, r3, #31
 800afb6:	d5e1      	bpl.n	800af7c <_dtoa_r+0xad0>
 800afb8:	9b07      	ldr	r3, [sp, #28]
 800afba:	2b39      	cmp	r3, #57	; 0x39
 800afbc:	d1db      	bne.n	800af76 <_dtoa_r+0xaca>
 800afbe:	2339      	movs	r3, #57	; 0x39
 800afc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afc2:	7013      	strb	r3, [r2, #0]
 800afc4:	9b08      	ldr	r3, [sp, #32]
 800afc6:	9308      	str	r3, [sp, #32]
 800afc8:	3b01      	subs	r3, #1
 800afca:	781a      	ldrb	r2, [r3, #0]
 800afcc:	2a39      	cmp	r2, #57	; 0x39
 800afce:	d068      	beq.n	800b0a2 <_dtoa_r+0xbf6>
 800afd0:	3201      	adds	r2, #1
 800afd2:	e7d5      	b.n	800af80 <_dtoa_r+0xad4>
 800afd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	dd07      	ble.n	800afea <_dtoa_r+0xb3e>
 800afda:	9b07      	ldr	r3, [sp, #28]
 800afdc:	2b39      	cmp	r3, #57	; 0x39
 800afde:	d0ee      	beq.n	800afbe <_dtoa_r+0xb12>
 800afe0:	9b07      	ldr	r3, [sp, #28]
 800afe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afe4:	3301      	adds	r3, #1
 800afe6:	7013      	strb	r3, [r2, #0]
 800afe8:	e737      	b.n	800ae5a <_dtoa_r+0x9ae>
 800afea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afec:	9a07      	ldr	r2, [sp, #28]
 800afee:	701a      	strb	r2, [r3, #0]
 800aff0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d03e      	beq.n	800b076 <_dtoa_r+0xbca>
 800aff8:	2300      	movs	r3, #0
 800affa:	220a      	movs	r2, #10
 800affc:	9905      	ldr	r1, [sp, #20]
 800affe:	0038      	movs	r0, r7
 800b000:	f000 f906 	bl	800b210 <__multadd>
 800b004:	2300      	movs	r3, #0
 800b006:	9005      	str	r0, [sp, #20]
 800b008:	220a      	movs	r2, #10
 800b00a:	0021      	movs	r1, r4
 800b00c:	0038      	movs	r0, r7
 800b00e:	42ac      	cmp	r4, r5
 800b010:	d106      	bne.n	800b020 <_dtoa_r+0xb74>
 800b012:	f000 f8fd 	bl	800b210 <__multadd>
 800b016:	0004      	movs	r4, r0
 800b018:	0005      	movs	r5, r0
 800b01a:	9b08      	ldr	r3, [sp, #32]
 800b01c:	930a      	str	r3, [sp, #40]	; 0x28
 800b01e:	e778      	b.n	800af12 <_dtoa_r+0xa66>
 800b020:	f000 f8f6 	bl	800b210 <__multadd>
 800b024:	0029      	movs	r1, r5
 800b026:	0004      	movs	r4, r0
 800b028:	2300      	movs	r3, #0
 800b02a:	220a      	movs	r2, #10
 800b02c:	0038      	movs	r0, r7
 800b02e:	f000 f8ef 	bl	800b210 <__multadd>
 800b032:	0005      	movs	r5, r0
 800b034:	e7f1      	b.n	800b01a <_dtoa_r+0xb6e>
 800b036:	9b07      	ldr	r3, [sp, #28]
 800b038:	930c      	str	r3, [sp, #48]	; 0x30
 800b03a:	2400      	movs	r4, #0
 800b03c:	0031      	movs	r1, r6
 800b03e:	9805      	ldr	r0, [sp, #20]
 800b040:	f7ff f9a8 	bl	800a394 <quorem>
 800b044:	9b06      	ldr	r3, [sp, #24]
 800b046:	3030      	adds	r0, #48	; 0x30
 800b048:	5518      	strb	r0, [r3, r4]
 800b04a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b04c:	3401      	adds	r4, #1
 800b04e:	9007      	str	r0, [sp, #28]
 800b050:	42a3      	cmp	r3, r4
 800b052:	dd07      	ble.n	800b064 <_dtoa_r+0xbb8>
 800b054:	2300      	movs	r3, #0
 800b056:	220a      	movs	r2, #10
 800b058:	0038      	movs	r0, r7
 800b05a:	9905      	ldr	r1, [sp, #20]
 800b05c:	f000 f8d8 	bl	800b210 <__multadd>
 800b060:	9005      	str	r0, [sp, #20]
 800b062:	e7eb      	b.n	800b03c <_dtoa_r+0xb90>
 800b064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b066:	2001      	movs	r0, #1
 800b068:	2b00      	cmp	r3, #0
 800b06a:	dd00      	ble.n	800b06e <_dtoa_r+0xbc2>
 800b06c:	0018      	movs	r0, r3
 800b06e:	2400      	movs	r4, #0
 800b070:	9b06      	ldr	r3, [sp, #24]
 800b072:	181b      	adds	r3, r3, r0
 800b074:	9308      	str	r3, [sp, #32]
 800b076:	9905      	ldr	r1, [sp, #20]
 800b078:	2201      	movs	r2, #1
 800b07a:	0038      	movs	r0, r7
 800b07c:	f000 fa76 	bl	800b56c <__lshift>
 800b080:	0031      	movs	r1, r6
 800b082:	9005      	str	r0, [sp, #20]
 800b084:	f000 fae0 	bl	800b648 <__mcmp>
 800b088:	2800      	cmp	r0, #0
 800b08a:	dc9b      	bgt.n	800afc4 <_dtoa_r+0xb18>
 800b08c:	d102      	bne.n	800b094 <_dtoa_r+0xbe8>
 800b08e:	9b07      	ldr	r3, [sp, #28]
 800b090:	07db      	lsls	r3, r3, #31
 800b092:	d497      	bmi.n	800afc4 <_dtoa_r+0xb18>
 800b094:	9b08      	ldr	r3, [sp, #32]
 800b096:	9308      	str	r3, [sp, #32]
 800b098:	3b01      	subs	r3, #1
 800b09a:	781a      	ldrb	r2, [r3, #0]
 800b09c:	2a30      	cmp	r2, #48	; 0x30
 800b09e:	d0fa      	beq.n	800b096 <_dtoa_r+0xbea>
 800b0a0:	e6db      	b.n	800ae5a <_dtoa_r+0x9ae>
 800b0a2:	9a06      	ldr	r2, [sp, #24]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d18e      	bne.n	800afc6 <_dtoa_r+0xb1a>
 800b0a8:	9b02      	ldr	r3, [sp, #8]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	9302      	str	r3, [sp, #8]
 800b0ae:	2331      	movs	r3, #49	; 0x31
 800b0b0:	e799      	b.n	800afe6 <_dtoa_r+0xb3a>
 800b0b2:	4b09      	ldr	r3, [pc, #36]	; (800b0d8 <_dtoa_r+0xc2c>)
 800b0b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b0b6:	9306      	str	r3, [sp, #24]
 800b0b8:	4b08      	ldr	r3, [pc, #32]	; (800b0dc <_dtoa_r+0xc30>)
 800b0ba:	2a00      	cmp	r2, #0
 800b0bc:	d001      	beq.n	800b0c2 <_dtoa_r+0xc16>
 800b0be:	f7ff fa3f 	bl	800a540 <_dtoa_r+0x94>
 800b0c2:	f7ff fa3f 	bl	800a544 <_dtoa_r+0x98>
 800b0c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dcb6      	bgt.n	800b03a <_dtoa_r+0xb8e>
 800b0cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	dd00      	ble.n	800b0d4 <_dtoa_r+0xc28>
 800b0d2:	e6ac      	b.n	800ae2e <_dtoa_r+0x982>
 800b0d4:	e7b1      	b.n	800b03a <_dtoa_r+0xb8e>
 800b0d6:	46c0      	nop			; (mov r8, r8)
 800b0d8:	0800d62d 	.word	0x0800d62d
 800b0dc:	0800d635 	.word	0x0800d635

0800b0e0 <fiprintf>:
 800b0e0:	b40e      	push	{r1, r2, r3}
 800b0e2:	b503      	push	{r0, r1, lr}
 800b0e4:	0001      	movs	r1, r0
 800b0e6:	ab03      	add	r3, sp, #12
 800b0e8:	4804      	ldr	r0, [pc, #16]	; (800b0fc <fiprintf+0x1c>)
 800b0ea:	cb04      	ldmia	r3!, {r2}
 800b0ec:	6800      	ldr	r0, [r0, #0]
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	f000 fd78 	bl	800bbe4 <_vfiprintf_r>
 800b0f4:	b002      	add	sp, #8
 800b0f6:	bc08      	pop	{r3}
 800b0f8:	b003      	add	sp, #12
 800b0fa:	4718      	bx	r3
 800b0fc:	200000bc 	.word	0x200000bc

0800b100 <_localeconv_r>:
 800b100:	4800      	ldr	r0, [pc, #0]	; (800b104 <_localeconv_r+0x4>)
 800b102:	4770      	bx	lr
 800b104:	20000210 	.word	0x20000210

0800b108 <memchr>:
 800b108:	b2c9      	uxtb	r1, r1
 800b10a:	1882      	adds	r2, r0, r2
 800b10c:	4290      	cmp	r0, r2
 800b10e:	d101      	bne.n	800b114 <memchr+0xc>
 800b110:	2000      	movs	r0, #0
 800b112:	4770      	bx	lr
 800b114:	7803      	ldrb	r3, [r0, #0]
 800b116:	428b      	cmp	r3, r1
 800b118:	d0fb      	beq.n	800b112 <memchr+0xa>
 800b11a:	3001      	adds	r0, #1
 800b11c:	e7f6      	b.n	800b10c <memchr+0x4>
	...

0800b120 <__malloc_lock>:
 800b120:	b510      	push	{r4, lr}
 800b122:	4802      	ldr	r0, [pc, #8]	; (800b12c <__malloc_lock+0xc>)
 800b124:	f001 f93d 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800b128:	bd10      	pop	{r4, pc}
 800b12a:	46c0      	nop			; (mov r8, r8)
 800b12c:	200011bc 	.word	0x200011bc

0800b130 <__malloc_unlock>:
 800b130:	b510      	push	{r4, lr}
 800b132:	4802      	ldr	r0, [pc, #8]	; (800b13c <__malloc_unlock+0xc>)
 800b134:	f001 f936 	bl	800c3a4 <__retarget_lock_release_recursive>
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	46c0      	nop			; (mov r8, r8)
 800b13c:	200011bc 	.word	0x200011bc

0800b140 <_Balloc>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b144:	0006      	movs	r6, r0
 800b146:	000c      	movs	r4, r1
 800b148:	2d00      	cmp	r5, #0
 800b14a:	d10e      	bne.n	800b16a <_Balloc+0x2a>
 800b14c:	2010      	movs	r0, #16
 800b14e:	f7fe fa97 	bl	8009680 <malloc>
 800b152:	1e02      	subs	r2, r0, #0
 800b154:	6270      	str	r0, [r6, #36]	; 0x24
 800b156:	d104      	bne.n	800b162 <_Balloc+0x22>
 800b158:	2166      	movs	r1, #102	; 0x66
 800b15a:	4b19      	ldr	r3, [pc, #100]	; (800b1c0 <_Balloc+0x80>)
 800b15c:	4819      	ldr	r0, [pc, #100]	; (800b1c4 <_Balloc+0x84>)
 800b15e:	f7ff f8fb 	bl	800a358 <__assert_func>
 800b162:	6045      	str	r5, [r0, #4]
 800b164:	6085      	str	r5, [r0, #8]
 800b166:	6005      	str	r5, [r0, #0]
 800b168:	60c5      	str	r5, [r0, #12]
 800b16a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800b16c:	68eb      	ldr	r3, [r5, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d013      	beq.n	800b19a <_Balloc+0x5a>
 800b172:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b174:	00a2      	lsls	r2, r4, #2
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	189b      	adds	r3, r3, r2
 800b17a:	6818      	ldr	r0, [r3, #0]
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d118      	bne.n	800b1b2 <_Balloc+0x72>
 800b180:	2101      	movs	r1, #1
 800b182:	000d      	movs	r5, r1
 800b184:	40a5      	lsls	r5, r4
 800b186:	1d6a      	adds	r2, r5, #5
 800b188:	0030      	movs	r0, r6
 800b18a:	0092      	lsls	r2, r2, #2
 800b18c:	f000 fb74 	bl	800b878 <_calloc_r>
 800b190:	2800      	cmp	r0, #0
 800b192:	d00c      	beq.n	800b1ae <_Balloc+0x6e>
 800b194:	6044      	str	r4, [r0, #4]
 800b196:	6085      	str	r5, [r0, #8]
 800b198:	e00d      	b.n	800b1b6 <_Balloc+0x76>
 800b19a:	2221      	movs	r2, #33	; 0x21
 800b19c:	2104      	movs	r1, #4
 800b19e:	0030      	movs	r0, r6
 800b1a0:	f000 fb6a 	bl	800b878 <_calloc_r>
 800b1a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b1a6:	60e8      	str	r0, [r5, #12]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e1      	bne.n	800b172 <_Balloc+0x32>
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	bd70      	pop	{r4, r5, r6, pc}
 800b1b2:	6802      	ldr	r2, [r0, #0]
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	6103      	str	r3, [r0, #16]
 800b1ba:	60c3      	str	r3, [r0, #12]
 800b1bc:	e7f8      	b.n	800b1b0 <_Balloc+0x70>
 800b1be:	46c0      	nop			; (mov r8, r8)
 800b1c0:	0800d63a 	.word	0x0800d63a
 800b1c4:	0800d6bd 	.word	0x0800d6bd

0800b1c8 <_Bfree>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1cc:	0005      	movs	r5, r0
 800b1ce:	000c      	movs	r4, r1
 800b1d0:	2e00      	cmp	r6, #0
 800b1d2:	d10e      	bne.n	800b1f2 <_Bfree+0x2a>
 800b1d4:	2010      	movs	r0, #16
 800b1d6:	f7fe fa53 	bl	8009680 <malloc>
 800b1da:	1e02      	subs	r2, r0, #0
 800b1dc:	6268      	str	r0, [r5, #36]	; 0x24
 800b1de:	d104      	bne.n	800b1ea <_Bfree+0x22>
 800b1e0:	218a      	movs	r1, #138	; 0x8a
 800b1e2:	4b09      	ldr	r3, [pc, #36]	; (800b208 <_Bfree+0x40>)
 800b1e4:	4809      	ldr	r0, [pc, #36]	; (800b20c <_Bfree+0x44>)
 800b1e6:	f7ff f8b7 	bl	800a358 <__assert_func>
 800b1ea:	6046      	str	r6, [r0, #4]
 800b1ec:	6086      	str	r6, [r0, #8]
 800b1ee:	6006      	str	r6, [r0, #0]
 800b1f0:	60c6      	str	r6, [r0, #12]
 800b1f2:	2c00      	cmp	r4, #0
 800b1f4:	d007      	beq.n	800b206 <_Bfree+0x3e>
 800b1f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1f8:	6862      	ldr	r2, [r4, #4]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	0092      	lsls	r2, r2, #2
 800b1fe:	189b      	adds	r3, r3, r2
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	6022      	str	r2, [r4, #0]
 800b204:	601c      	str	r4, [r3, #0]
 800b206:	bd70      	pop	{r4, r5, r6, pc}
 800b208:	0800d63a 	.word	0x0800d63a
 800b20c:	0800d6bd 	.word	0x0800d6bd

0800b210 <__multadd>:
 800b210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b212:	000e      	movs	r6, r1
 800b214:	9001      	str	r0, [sp, #4]
 800b216:	000c      	movs	r4, r1
 800b218:	001d      	movs	r5, r3
 800b21a:	2000      	movs	r0, #0
 800b21c:	690f      	ldr	r7, [r1, #16]
 800b21e:	3614      	adds	r6, #20
 800b220:	6833      	ldr	r3, [r6, #0]
 800b222:	3001      	adds	r0, #1
 800b224:	b299      	uxth	r1, r3
 800b226:	4351      	muls	r1, r2
 800b228:	0c1b      	lsrs	r3, r3, #16
 800b22a:	4353      	muls	r3, r2
 800b22c:	1949      	adds	r1, r1, r5
 800b22e:	0c0d      	lsrs	r5, r1, #16
 800b230:	195b      	adds	r3, r3, r5
 800b232:	0c1d      	lsrs	r5, r3, #16
 800b234:	b289      	uxth	r1, r1
 800b236:	041b      	lsls	r3, r3, #16
 800b238:	185b      	adds	r3, r3, r1
 800b23a:	c608      	stmia	r6!, {r3}
 800b23c:	4287      	cmp	r7, r0
 800b23e:	dcef      	bgt.n	800b220 <__multadd+0x10>
 800b240:	2d00      	cmp	r5, #0
 800b242:	d022      	beq.n	800b28a <__multadd+0x7a>
 800b244:	68a3      	ldr	r3, [r4, #8]
 800b246:	42bb      	cmp	r3, r7
 800b248:	dc19      	bgt.n	800b27e <__multadd+0x6e>
 800b24a:	6863      	ldr	r3, [r4, #4]
 800b24c:	9801      	ldr	r0, [sp, #4]
 800b24e:	1c59      	adds	r1, r3, #1
 800b250:	f7ff ff76 	bl	800b140 <_Balloc>
 800b254:	1e06      	subs	r6, r0, #0
 800b256:	d105      	bne.n	800b264 <__multadd+0x54>
 800b258:	0002      	movs	r2, r0
 800b25a:	21b5      	movs	r1, #181	; 0xb5
 800b25c:	4b0c      	ldr	r3, [pc, #48]	; (800b290 <__multadd+0x80>)
 800b25e:	480d      	ldr	r0, [pc, #52]	; (800b294 <__multadd+0x84>)
 800b260:	f7ff f87a 	bl	800a358 <__assert_func>
 800b264:	0021      	movs	r1, r4
 800b266:	6923      	ldr	r3, [r4, #16]
 800b268:	310c      	adds	r1, #12
 800b26a:	1c9a      	adds	r2, r3, #2
 800b26c:	0092      	lsls	r2, r2, #2
 800b26e:	300c      	adds	r0, #12
 800b270:	f7fe fa10 	bl	8009694 <memcpy>
 800b274:	0021      	movs	r1, r4
 800b276:	9801      	ldr	r0, [sp, #4]
 800b278:	f7ff ffa6 	bl	800b1c8 <_Bfree>
 800b27c:	0034      	movs	r4, r6
 800b27e:	1d3b      	adds	r3, r7, #4
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	18e3      	adds	r3, r4, r3
 800b284:	605d      	str	r5, [r3, #4]
 800b286:	1c7b      	adds	r3, r7, #1
 800b288:	6123      	str	r3, [r4, #16]
 800b28a:	0020      	movs	r0, r4
 800b28c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b28e:	46c0      	nop			; (mov r8, r8)
 800b290:	0800d6ac 	.word	0x0800d6ac
 800b294:	0800d6bd 	.word	0x0800d6bd

0800b298 <__hi0bits>:
 800b298:	0003      	movs	r3, r0
 800b29a:	0c02      	lsrs	r2, r0, #16
 800b29c:	2000      	movs	r0, #0
 800b29e:	4282      	cmp	r2, r0
 800b2a0:	d101      	bne.n	800b2a6 <__hi0bits+0xe>
 800b2a2:	041b      	lsls	r3, r3, #16
 800b2a4:	3010      	adds	r0, #16
 800b2a6:	0e1a      	lsrs	r2, r3, #24
 800b2a8:	d101      	bne.n	800b2ae <__hi0bits+0x16>
 800b2aa:	3008      	adds	r0, #8
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	0f1a      	lsrs	r2, r3, #28
 800b2b0:	d101      	bne.n	800b2b6 <__hi0bits+0x1e>
 800b2b2:	3004      	adds	r0, #4
 800b2b4:	011b      	lsls	r3, r3, #4
 800b2b6:	0f9a      	lsrs	r2, r3, #30
 800b2b8:	d101      	bne.n	800b2be <__hi0bits+0x26>
 800b2ba:	3002      	adds	r0, #2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	db03      	blt.n	800b2ca <__hi0bits+0x32>
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	d400      	bmi.n	800b2ca <__hi0bits+0x32>
 800b2c8:	2020      	movs	r0, #32
 800b2ca:	4770      	bx	lr

0800b2cc <__lo0bits>:
 800b2cc:	6803      	ldr	r3, [r0, #0]
 800b2ce:	0002      	movs	r2, r0
 800b2d0:	2107      	movs	r1, #7
 800b2d2:	0018      	movs	r0, r3
 800b2d4:	4008      	ands	r0, r1
 800b2d6:	420b      	tst	r3, r1
 800b2d8:	d00d      	beq.n	800b2f6 <__lo0bits+0x2a>
 800b2da:	3906      	subs	r1, #6
 800b2dc:	2000      	movs	r0, #0
 800b2de:	420b      	tst	r3, r1
 800b2e0:	d105      	bne.n	800b2ee <__lo0bits+0x22>
 800b2e2:	3002      	adds	r0, #2
 800b2e4:	4203      	tst	r3, r0
 800b2e6:	d003      	beq.n	800b2f0 <__lo0bits+0x24>
 800b2e8:	40cb      	lsrs	r3, r1
 800b2ea:	0008      	movs	r0, r1
 800b2ec:	6013      	str	r3, [r2, #0]
 800b2ee:	4770      	bx	lr
 800b2f0:	089b      	lsrs	r3, r3, #2
 800b2f2:	6013      	str	r3, [r2, #0]
 800b2f4:	e7fb      	b.n	800b2ee <__lo0bits+0x22>
 800b2f6:	b299      	uxth	r1, r3
 800b2f8:	2900      	cmp	r1, #0
 800b2fa:	d101      	bne.n	800b300 <__lo0bits+0x34>
 800b2fc:	2010      	movs	r0, #16
 800b2fe:	0c1b      	lsrs	r3, r3, #16
 800b300:	b2d9      	uxtb	r1, r3
 800b302:	2900      	cmp	r1, #0
 800b304:	d101      	bne.n	800b30a <__lo0bits+0x3e>
 800b306:	3008      	adds	r0, #8
 800b308:	0a1b      	lsrs	r3, r3, #8
 800b30a:	0719      	lsls	r1, r3, #28
 800b30c:	d101      	bne.n	800b312 <__lo0bits+0x46>
 800b30e:	3004      	adds	r0, #4
 800b310:	091b      	lsrs	r3, r3, #4
 800b312:	0799      	lsls	r1, r3, #30
 800b314:	d101      	bne.n	800b31a <__lo0bits+0x4e>
 800b316:	3002      	adds	r0, #2
 800b318:	089b      	lsrs	r3, r3, #2
 800b31a:	07d9      	lsls	r1, r3, #31
 800b31c:	d4e9      	bmi.n	800b2f2 <__lo0bits+0x26>
 800b31e:	3001      	adds	r0, #1
 800b320:	085b      	lsrs	r3, r3, #1
 800b322:	d1e6      	bne.n	800b2f2 <__lo0bits+0x26>
 800b324:	2020      	movs	r0, #32
 800b326:	e7e2      	b.n	800b2ee <__lo0bits+0x22>

0800b328 <__i2b>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	000c      	movs	r4, r1
 800b32c:	2101      	movs	r1, #1
 800b32e:	f7ff ff07 	bl	800b140 <_Balloc>
 800b332:	2800      	cmp	r0, #0
 800b334:	d106      	bne.n	800b344 <__i2b+0x1c>
 800b336:	21a0      	movs	r1, #160	; 0xa0
 800b338:	0002      	movs	r2, r0
 800b33a:	4b04      	ldr	r3, [pc, #16]	; (800b34c <__i2b+0x24>)
 800b33c:	4804      	ldr	r0, [pc, #16]	; (800b350 <__i2b+0x28>)
 800b33e:	0049      	lsls	r1, r1, #1
 800b340:	f7ff f80a 	bl	800a358 <__assert_func>
 800b344:	2301      	movs	r3, #1
 800b346:	6144      	str	r4, [r0, #20]
 800b348:	6103      	str	r3, [r0, #16]
 800b34a:	bd10      	pop	{r4, pc}
 800b34c:	0800d6ac 	.word	0x0800d6ac
 800b350:	0800d6bd 	.word	0x0800d6bd

0800b354 <__multiply>:
 800b354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b356:	690b      	ldr	r3, [r1, #16]
 800b358:	0014      	movs	r4, r2
 800b35a:	6912      	ldr	r2, [r2, #16]
 800b35c:	000d      	movs	r5, r1
 800b35e:	b089      	sub	sp, #36	; 0x24
 800b360:	4293      	cmp	r3, r2
 800b362:	da01      	bge.n	800b368 <__multiply+0x14>
 800b364:	0025      	movs	r5, r4
 800b366:	000c      	movs	r4, r1
 800b368:	692f      	ldr	r7, [r5, #16]
 800b36a:	6926      	ldr	r6, [r4, #16]
 800b36c:	6869      	ldr	r1, [r5, #4]
 800b36e:	19bb      	adds	r3, r7, r6
 800b370:	9302      	str	r3, [sp, #8]
 800b372:	68ab      	ldr	r3, [r5, #8]
 800b374:	19ba      	adds	r2, r7, r6
 800b376:	4293      	cmp	r3, r2
 800b378:	da00      	bge.n	800b37c <__multiply+0x28>
 800b37a:	3101      	adds	r1, #1
 800b37c:	f7ff fee0 	bl	800b140 <_Balloc>
 800b380:	9001      	str	r0, [sp, #4]
 800b382:	2800      	cmp	r0, #0
 800b384:	d106      	bne.n	800b394 <__multiply+0x40>
 800b386:	215e      	movs	r1, #94	; 0x5e
 800b388:	0002      	movs	r2, r0
 800b38a:	4b48      	ldr	r3, [pc, #288]	; (800b4ac <__multiply+0x158>)
 800b38c:	4848      	ldr	r0, [pc, #288]	; (800b4b0 <__multiply+0x15c>)
 800b38e:	31ff      	adds	r1, #255	; 0xff
 800b390:	f7fe ffe2 	bl	800a358 <__assert_func>
 800b394:	9b01      	ldr	r3, [sp, #4]
 800b396:	2200      	movs	r2, #0
 800b398:	3314      	adds	r3, #20
 800b39a:	469c      	mov	ip, r3
 800b39c:	19bb      	adds	r3, r7, r6
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4463      	add	r3, ip
 800b3a2:	9303      	str	r3, [sp, #12]
 800b3a4:	4663      	mov	r3, ip
 800b3a6:	9903      	ldr	r1, [sp, #12]
 800b3a8:	428b      	cmp	r3, r1
 800b3aa:	d32c      	bcc.n	800b406 <__multiply+0xb2>
 800b3ac:	002b      	movs	r3, r5
 800b3ae:	0022      	movs	r2, r4
 800b3b0:	3314      	adds	r3, #20
 800b3b2:	00bf      	lsls	r7, r7, #2
 800b3b4:	3214      	adds	r2, #20
 800b3b6:	9306      	str	r3, [sp, #24]
 800b3b8:	00b6      	lsls	r6, r6, #2
 800b3ba:	19db      	adds	r3, r3, r7
 800b3bc:	9304      	str	r3, [sp, #16]
 800b3be:	1993      	adds	r3, r2, r6
 800b3c0:	9307      	str	r3, [sp, #28]
 800b3c2:	2304      	movs	r3, #4
 800b3c4:	9305      	str	r3, [sp, #20]
 800b3c6:	002b      	movs	r3, r5
 800b3c8:	9904      	ldr	r1, [sp, #16]
 800b3ca:	3315      	adds	r3, #21
 800b3cc:	9200      	str	r2, [sp, #0]
 800b3ce:	4299      	cmp	r1, r3
 800b3d0:	d305      	bcc.n	800b3de <__multiply+0x8a>
 800b3d2:	1b4b      	subs	r3, r1, r5
 800b3d4:	3b15      	subs	r3, #21
 800b3d6:	089b      	lsrs	r3, r3, #2
 800b3d8:	3301      	adds	r3, #1
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	9305      	str	r3, [sp, #20]
 800b3de:	9b07      	ldr	r3, [sp, #28]
 800b3e0:	9a00      	ldr	r2, [sp, #0]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d311      	bcc.n	800b40a <__multiply+0xb6>
 800b3e6:	9b02      	ldr	r3, [sp, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	dd06      	ble.n	800b3fa <__multiply+0xa6>
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	3b04      	subs	r3, #4
 800b3f0:	9303      	str	r3, [sp, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d053      	beq.n	800b4a2 <__multiply+0x14e>
 800b3fa:	9b01      	ldr	r3, [sp, #4]
 800b3fc:	9a02      	ldr	r2, [sp, #8]
 800b3fe:	0018      	movs	r0, r3
 800b400:	611a      	str	r2, [r3, #16]
 800b402:	b009      	add	sp, #36	; 0x24
 800b404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b406:	c304      	stmia	r3!, {r2}
 800b408:	e7cd      	b.n	800b3a6 <__multiply+0x52>
 800b40a:	9b00      	ldr	r3, [sp, #0]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	b298      	uxth	r0, r3
 800b410:	2800      	cmp	r0, #0
 800b412:	d01b      	beq.n	800b44c <__multiply+0xf8>
 800b414:	4667      	mov	r7, ip
 800b416:	2400      	movs	r4, #0
 800b418:	9e06      	ldr	r6, [sp, #24]
 800b41a:	ce02      	ldmia	r6!, {r1}
 800b41c:	683a      	ldr	r2, [r7, #0]
 800b41e:	b28b      	uxth	r3, r1
 800b420:	4343      	muls	r3, r0
 800b422:	b292      	uxth	r2, r2
 800b424:	189b      	adds	r3, r3, r2
 800b426:	191b      	adds	r3, r3, r4
 800b428:	0c0c      	lsrs	r4, r1, #16
 800b42a:	4344      	muls	r4, r0
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	0c11      	lsrs	r1, r2, #16
 800b430:	1861      	adds	r1, r4, r1
 800b432:	0c1c      	lsrs	r4, r3, #16
 800b434:	1909      	adds	r1, r1, r4
 800b436:	0c0c      	lsrs	r4, r1, #16
 800b438:	b29b      	uxth	r3, r3
 800b43a:	0409      	lsls	r1, r1, #16
 800b43c:	430b      	orrs	r3, r1
 800b43e:	c708      	stmia	r7!, {r3}
 800b440:	9b04      	ldr	r3, [sp, #16]
 800b442:	42b3      	cmp	r3, r6
 800b444:	d8e9      	bhi.n	800b41a <__multiply+0xc6>
 800b446:	4663      	mov	r3, ip
 800b448:	9a05      	ldr	r2, [sp, #20]
 800b44a:	509c      	str	r4, [r3, r2]
 800b44c:	9b00      	ldr	r3, [sp, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	0c1e      	lsrs	r6, r3, #16
 800b452:	d020      	beq.n	800b496 <__multiply+0x142>
 800b454:	4663      	mov	r3, ip
 800b456:	002c      	movs	r4, r5
 800b458:	4660      	mov	r0, ip
 800b45a:	2700      	movs	r7, #0
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3414      	adds	r4, #20
 800b460:	6822      	ldr	r2, [r4, #0]
 800b462:	b29b      	uxth	r3, r3
 800b464:	b291      	uxth	r1, r2
 800b466:	4371      	muls	r1, r6
 800b468:	6802      	ldr	r2, [r0, #0]
 800b46a:	0c12      	lsrs	r2, r2, #16
 800b46c:	1889      	adds	r1, r1, r2
 800b46e:	19cf      	adds	r7, r1, r7
 800b470:	0439      	lsls	r1, r7, #16
 800b472:	430b      	orrs	r3, r1
 800b474:	6003      	str	r3, [r0, #0]
 800b476:	cc02      	ldmia	r4!, {r1}
 800b478:	6843      	ldr	r3, [r0, #4]
 800b47a:	0c09      	lsrs	r1, r1, #16
 800b47c:	4371      	muls	r1, r6
 800b47e:	b29b      	uxth	r3, r3
 800b480:	0c3f      	lsrs	r7, r7, #16
 800b482:	18cb      	adds	r3, r1, r3
 800b484:	9a04      	ldr	r2, [sp, #16]
 800b486:	19db      	adds	r3, r3, r7
 800b488:	0c1f      	lsrs	r7, r3, #16
 800b48a:	3004      	adds	r0, #4
 800b48c:	42a2      	cmp	r2, r4
 800b48e:	d8e7      	bhi.n	800b460 <__multiply+0x10c>
 800b490:	4662      	mov	r2, ip
 800b492:	9905      	ldr	r1, [sp, #20]
 800b494:	5053      	str	r3, [r2, r1]
 800b496:	9b00      	ldr	r3, [sp, #0]
 800b498:	3304      	adds	r3, #4
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	2304      	movs	r3, #4
 800b49e:	449c      	add	ip, r3
 800b4a0:	e79d      	b.n	800b3de <__multiply+0x8a>
 800b4a2:	9b02      	ldr	r3, [sp, #8]
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	9302      	str	r3, [sp, #8]
 800b4a8:	e79d      	b.n	800b3e6 <__multiply+0x92>
 800b4aa:	46c0      	nop			; (mov r8, r8)
 800b4ac:	0800d6ac 	.word	0x0800d6ac
 800b4b0:	0800d6bd 	.word	0x0800d6bd

0800b4b4 <__pow5mult>:
 800b4b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	0015      	movs	r5, r2
 800b4ba:	0007      	movs	r7, r0
 800b4bc:	000e      	movs	r6, r1
 800b4be:	401a      	ands	r2, r3
 800b4c0:	421d      	tst	r5, r3
 800b4c2:	d008      	beq.n	800b4d6 <__pow5mult+0x22>
 800b4c4:	4925      	ldr	r1, [pc, #148]	; (800b55c <__pow5mult+0xa8>)
 800b4c6:	3a01      	subs	r2, #1
 800b4c8:	0092      	lsls	r2, r2, #2
 800b4ca:	5852      	ldr	r2, [r2, r1]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	0031      	movs	r1, r6
 800b4d0:	f7ff fe9e 	bl	800b210 <__multadd>
 800b4d4:	0006      	movs	r6, r0
 800b4d6:	10ad      	asrs	r5, r5, #2
 800b4d8:	d03d      	beq.n	800b556 <__pow5mult+0xa2>
 800b4da:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b4dc:	2c00      	cmp	r4, #0
 800b4de:	d10f      	bne.n	800b500 <__pow5mult+0x4c>
 800b4e0:	2010      	movs	r0, #16
 800b4e2:	f7fe f8cd 	bl	8009680 <malloc>
 800b4e6:	1e02      	subs	r2, r0, #0
 800b4e8:	6278      	str	r0, [r7, #36]	; 0x24
 800b4ea:	d105      	bne.n	800b4f8 <__pow5mult+0x44>
 800b4ec:	21d7      	movs	r1, #215	; 0xd7
 800b4ee:	4b1c      	ldr	r3, [pc, #112]	; (800b560 <__pow5mult+0xac>)
 800b4f0:	481c      	ldr	r0, [pc, #112]	; (800b564 <__pow5mult+0xb0>)
 800b4f2:	0049      	lsls	r1, r1, #1
 800b4f4:	f7fe ff30 	bl	800a358 <__assert_func>
 800b4f8:	6044      	str	r4, [r0, #4]
 800b4fa:	6084      	str	r4, [r0, #8]
 800b4fc:	6004      	str	r4, [r0, #0]
 800b4fe:	60c4      	str	r4, [r0, #12]
 800b500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b502:	689c      	ldr	r4, [r3, #8]
 800b504:	9301      	str	r3, [sp, #4]
 800b506:	2c00      	cmp	r4, #0
 800b508:	d108      	bne.n	800b51c <__pow5mult+0x68>
 800b50a:	0038      	movs	r0, r7
 800b50c:	4916      	ldr	r1, [pc, #88]	; (800b568 <__pow5mult+0xb4>)
 800b50e:	f7ff ff0b 	bl	800b328 <__i2b>
 800b512:	9b01      	ldr	r3, [sp, #4]
 800b514:	0004      	movs	r4, r0
 800b516:	6098      	str	r0, [r3, #8]
 800b518:	2300      	movs	r3, #0
 800b51a:	6003      	str	r3, [r0, #0]
 800b51c:	2301      	movs	r3, #1
 800b51e:	421d      	tst	r5, r3
 800b520:	d00a      	beq.n	800b538 <__pow5mult+0x84>
 800b522:	0031      	movs	r1, r6
 800b524:	0022      	movs	r2, r4
 800b526:	0038      	movs	r0, r7
 800b528:	f7ff ff14 	bl	800b354 <__multiply>
 800b52c:	0031      	movs	r1, r6
 800b52e:	9001      	str	r0, [sp, #4]
 800b530:	0038      	movs	r0, r7
 800b532:	f7ff fe49 	bl	800b1c8 <_Bfree>
 800b536:	9e01      	ldr	r6, [sp, #4]
 800b538:	106d      	asrs	r5, r5, #1
 800b53a:	d00c      	beq.n	800b556 <__pow5mult+0xa2>
 800b53c:	6820      	ldr	r0, [r4, #0]
 800b53e:	2800      	cmp	r0, #0
 800b540:	d107      	bne.n	800b552 <__pow5mult+0x9e>
 800b542:	0022      	movs	r2, r4
 800b544:	0021      	movs	r1, r4
 800b546:	0038      	movs	r0, r7
 800b548:	f7ff ff04 	bl	800b354 <__multiply>
 800b54c:	2300      	movs	r3, #0
 800b54e:	6020      	str	r0, [r4, #0]
 800b550:	6003      	str	r3, [r0, #0]
 800b552:	0004      	movs	r4, r0
 800b554:	e7e2      	b.n	800b51c <__pow5mult+0x68>
 800b556:	0030      	movs	r0, r6
 800b558:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b55a:	46c0      	nop			; (mov r8, r8)
 800b55c:	0800d810 	.word	0x0800d810
 800b560:	0800d63a 	.word	0x0800d63a
 800b564:	0800d6bd 	.word	0x0800d6bd
 800b568:	00000271 	.word	0x00000271

0800b56c <__lshift>:
 800b56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b56e:	000c      	movs	r4, r1
 800b570:	0017      	movs	r7, r2
 800b572:	6923      	ldr	r3, [r4, #16]
 800b574:	1155      	asrs	r5, r2, #5
 800b576:	b087      	sub	sp, #28
 800b578:	18eb      	adds	r3, r5, r3
 800b57a:	9302      	str	r3, [sp, #8]
 800b57c:	3301      	adds	r3, #1
 800b57e:	9301      	str	r3, [sp, #4]
 800b580:	6849      	ldr	r1, [r1, #4]
 800b582:	68a3      	ldr	r3, [r4, #8]
 800b584:	9004      	str	r0, [sp, #16]
 800b586:	9a01      	ldr	r2, [sp, #4]
 800b588:	4293      	cmp	r3, r2
 800b58a:	db10      	blt.n	800b5ae <__lshift+0x42>
 800b58c:	9804      	ldr	r0, [sp, #16]
 800b58e:	f7ff fdd7 	bl	800b140 <_Balloc>
 800b592:	2300      	movs	r3, #0
 800b594:	0002      	movs	r2, r0
 800b596:	0006      	movs	r6, r0
 800b598:	0019      	movs	r1, r3
 800b59a:	3214      	adds	r2, #20
 800b59c:	4298      	cmp	r0, r3
 800b59e:	d10c      	bne.n	800b5ba <__lshift+0x4e>
 800b5a0:	21da      	movs	r1, #218	; 0xda
 800b5a2:	0002      	movs	r2, r0
 800b5a4:	4b26      	ldr	r3, [pc, #152]	; (800b640 <__lshift+0xd4>)
 800b5a6:	4827      	ldr	r0, [pc, #156]	; (800b644 <__lshift+0xd8>)
 800b5a8:	31ff      	adds	r1, #255	; 0xff
 800b5aa:	f7fe fed5 	bl	800a358 <__assert_func>
 800b5ae:	3101      	adds	r1, #1
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	e7e8      	b.n	800b586 <__lshift+0x1a>
 800b5b4:	0098      	lsls	r0, r3, #2
 800b5b6:	5011      	str	r1, [r2, r0]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	42ab      	cmp	r3, r5
 800b5bc:	dbfa      	blt.n	800b5b4 <__lshift+0x48>
 800b5be:	43eb      	mvns	r3, r5
 800b5c0:	17db      	asrs	r3, r3, #31
 800b5c2:	401d      	ands	r5, r3
 800b5c4:	211f      	movs	r1, #31
 800b5c6:	0023      	movs	r3, r4
 800b5c8:	0038      	movs	r0, r7
 800b5ca:	00ad      	lsls	r5, r5, #2
 800b5cc:	1955      	adds	r5, r2, r5
 800b5ce:	6922      	ldr	r2, [r4, #16]
 800b5d0:	3314      	adds	r3, #20
 800b5d2:	0092      	lsls	r2, r2, #2
 800b5d4:	4008      	ands	r0, r1
 800b5d6:	4684      	mov	ip, r0
 800b5d8:	189a      	adds	r2, r3, r2
 800b5da:	420f      	tst	r7, r1
 800b5dc:	d02a      	beq.n	800b634 <__lshift+0xc8>
 800b5de:	3101      	adds	r1, #1
 800b5e0:	1a09      	subs	r1, r1, r0
 800b5e2:	9105      	str	r1, [sp, #20]
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	9503      	str	r5, [sp, #12]
 800b5e8:	4667      	mov	r7, ip
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	40b8      	lsls	r0, r7
 800b5ee:	4301      	orrs	r1, r0
 800b5f0:	9803      	ldr	r0, [sp, #12]
 800b5f2:	c002      	stmia	r0!, {r1}
 800b5f4:	cb02      	ldmia	r3!, {r1}
 800b5f6:	9003      	str	r0, [sp, #12]
 800b5f8:	9805      	ldr	r0, [sp, #20]
 800b5fa:	40c1      	lsrs	r1, r0
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d8f3      	bhi.n	800b5e8 <__lshift+0x7c>
 800b600:	0020      	movs	r0, r4
 800b602:	3015      	adds	r0, #21
 800b604:	2304      	movs	r3, #4
 800b606:	4282      	cmp	r2, r0
 800b608:	d304      	bcc.n	800b614 <__lshift+0xa8>
 800b60a:	1b13      	subs	r3, r2, r4
 800b60c:	3b15      	subs	r3, #21
 800b60e:	089b      	lsrs	r3, r3, #2
 800b610:	3301      	adds	r3, #1
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	50e9      	str	r1, [r5, r3]
 800b616:	2900      	cmp	r1, #0
 800b618:	d002      	beq.n	800b620 <__lshift+0xb4>
 800b61a:	9b02      	ldr	r3, [sp, #8]
 800b61c:	3302      	adds	r3, #2
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	9b01      	ldr	r3, [sp, #4]
 800b622:	9804      	ldr	r0, [sp, #16]
 800b624:	3b01      	subs	r3, #1
 800b626:	0021      	movs	r1, r4
 800b628:	6133      	str	r3, [r6, #16]
 800b62a:	f7ff fdcd 	bl	800b1c8 <_Bfree>
 800b62e:	0030      	movs	r0, r6
 800b630:	b007      	add	sp, #28
 800b632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b634:	cb02      	ldmia	r3!, {r1}
 800b636:	c502      	stmia	r5!, {r1}
 800b638:	429a      	cmp	r2, r3
 800b63a:	d8fb      	bhi.n	800b634 <__lshift+0xc8>
 800b63c:	e7f0      	b.n	800b620 <__lshift+0xb4>
 800b63e:	46c0      	nop			; (mov r8, r8)
 800b640:	0800d6ac 	.word	0x0800d6ac
 800b644:	0800d6bd 	.word	0x0800d6bd

0800b648 <__mcmp>:
 800b648:	6902      	ldr	r2, [r0, #16]
 800b64a:	690b      	ldr	r3, [r1, #16]
 800b64c:	b530      	push	{r4, r5, lr}
 800b64e:	0004      	movs	r4, r0
 800b650:	1ad0      	subs	r0, r2, r3
 800b652:	429a      	cmp	r2, r3
 800b654:	d10d      	bne.n	800b672 <__mcmp+0x2a>
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	3414      	adds	r4, #20
 800b65a:	3114      	adds	r1, #20
 800b65c:	18e2      	adds	r2, r4, r3
 800b65e:	18c9      	adds	r1, r1, r3
 800b660:	3a04      	subs	r2, #4
 800b662:	3904      	subs	r1, #4
 800b664:	6815      	ldr	r5, [r2, #0]
 800b666:	680b      	ldr	r3, [r1, #0]
 800b668:	429d      	cmp	r5, r3
 800b66a:	d003      	beq.n	800b674 <__mcmp+0x2c>
 800b66c:	2001      	movs	r0, #1
 800b66e:	429d      	cmp	r5, r3
 800b670:	d303      	bcc.n	800b67a <__mcmp+0x32>
 800b672:	bd30      	pop	{r4, r5, pc}
 800b674:	4294      	cmp	r4, r2
 800b676:	d3f3      	bcc.n	800b660 <__mcmp+0x18>
 800b678:	e7fb      	b.n	800b672 <__mcmp+0x2a>
 800b67a:	4240      	negs	r0, r0
 800b67c:	e7f9      	b.n	800b672 <__mcmp+0x2a>
	...

0800b680 <__mdiff>:
 800b680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b682:	000e      	movs	r6, r1
 800b684:	0007      	movs	r7, r0
 800b686:	0011      	movs	r1, r2
 800b688:	0030      	movs	r0, r6
 800b68a:	b087      	sub	sp, #28
 800b68c:	0014      	movs	r4, r2
 800b68e:	f7ff ffdb 	bl	800b648 <__mcmp>
 800b692:	1e05      	subs	r5, r0, #0
 800b694:	d110      	bne.n	800b6b8 <__mdiff+0x38>
 800b696:	0001      	movs	r1, r0
 800b698:	0038      	movs	r0, r7
 800b69a:	f7ff fd51 	bl	800b140 <_Balloc>
 800b69e:	1e02      	subs	r2, r0, #0
 800b6a0:	d104      	bne.n	800b6ac <__mdiff+0x2c>
 800b6a2:	4b40      	ldr	r3, [pc, #256]	; (800b7a4 <__mdiff+0x124>)
 800b6a4:	4940      	ldr	r1, [pc, #256]	; (800b7a8 <__mdiff+0x128>)
 800b6a6:	4841      	ldr	r0, [pc, #260]	; (800b7ac <__mdiff+0x12c>)
 800b6a8:	f7fe fe56 	bl	800a358 <__assert_func>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	6145      	str	r5, [r0, #20]
 800b6b0:	6103      	str	r3, [r0, #16]
 800b6b2:	0010      	movs	r0, r2
 800b6b4:	b007      	add	sp, #28
 800b6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	9301      	str	r3, [sp, #4]
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	db04      	blt.n	800b6ca <__mdiff+0x4a>
 800b6c0:	0023      	movs	r3, r4
 800b6c2:	0034      	movs	r4, r6
 800b6c4:	001e      	movs	r6, r3
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	9301      	str	r3, [sp, #4]
 800b6ca:	0038      	movs	r0, r7
 800b6cc:	6861      	ldr	r1, [r4, #4]
 800b6ce:	f7ff fd37 	bl	800b140 <_Balloc>
 800b6d2:	1e02      	subs	r2, r0, #0
 800b6d4:	d103      	bne.n	800b6de <__mdiff+0x5e>
 800b6d6:	2190      	movs	r1, #144	; 0x90
 800b6d8:	4b32      	ldr	r3, [pc, #200]	; (800b7a4 <__mdiff+0x124>)
 800b6da:	0089      	lsls	r1, r1, #2
 800b6dc:	e7e3      	b.n	800b6a6 <__mdiff+0x26>
 800b6de:	9b01      	ldr	r3, [sp, #4]
 800b6e0:	2700      	movs	r7, #0
 800b6e2:	60c3      	str	r3, [r0, #12]
 800b6e4:	6920      	ldr	r0, [r4, #16]
 800b6e6:	3414      	adds	r4, #20
 800b6e8:	9401      	str	r4, [sp, #4]
 800b6ea:	9b01      	ldr	r3, [sp, #4]
 800b6ec:	0084      	lsls	r4, r0, #2
 800b6ee:	191b      	adds	r3, r3, r4
 800b6f0:	0034      	movs	r4, r6
 800b6f2:	9302      	str	r3, [sp, #8]
 800b6f4:	6933      	ldr	r3, [r6, #16]
 800b6f6:	3414      	adds	r4, #20
 800b6f8:	0099      	lsls	r1, r3, #2
 800b6fa:	1863      	adds	r3, r4, r1
 800b6fc:	9303      	str	r3, [sp, #12]
 800b6fe:	0013      	movs	r3, r2
 800b700:	3314      	adds	r3, #20
 800b702:	469c      	mov	ip, r3
 800b704:	9305      	str	r3, [sp, #20]
 800b706:	9b01      	ldr	r3, [sp, #4]
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	9b04      	ldr	r3, [sp, #16]
 800b70c:	cc02      	ldmia	r4!, {r1}
 800b70e:	cb20      	ldmia	r3!, {r5}
 800b710:	9304      	str	r3, [sp, #16]
 800b712:	b2ab      	uxth	r3, r5
 800b714:	19df      	adds	r7, r3, r7
 800b716:	b28b      	uxth	r3, r1
 800b718:	1afb      	subs	r3, r7, r3
 800b71a:	0c09      	lsrs	r1, r1, #16
 800b71c:	0c2d      	lsrs	r5, r5, #16
 800b71e:	1a6d      	subs	r5, r5, r1
 800b720:	1419      	asrs	r1, r3, #16
 800b722:	186d      	adds	r5, r5, r1
 800b724:	4661      	mov	r1, ip
 800b726:	142f      	asrs	r7, r5, #16
 800b728:	b29b      	uxth	r3, r3
 800b72a:	042d      	lsls	r5, r5, #16
 800b72c:	432b      	orrs	r3, r5
 800b72e:	c108      	stmia	r1!, {r3}
 800b730:	9b03      	ldr	r3, [sp, #12]
 800b732:	468c      	mov	ip, r1
 800b734:	42a3      	cmp	r3, r4
 800b736:	d8e8      	bhi.n	800b70a <__mdiff+0x8a>
 800b738:	0031      	movs	r1, r6
 800b73a:	9c03      	ldr	r4, [sp, #12]
 800b73c:	3115      	adds	r1, #21
 800b73e:	2304      	movs	r3, #4
 800b740:	428c      	cmp	r4, r1
 800b742:	d304      	bcc.n	800b74e <__mdiff+0xce>
 800b744:	1ba3      	subs	r3, r4, r6
 800b746:	3b15      	subs	r3, #21
 800b748:	089b      	lsrs	r3, r3, #2
 800b74a:	3301      	adds	r3, #1
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	9901      	ldr	r1, [sp, #4]
 800b750:	18cc      	adds	r4, r1, r3
 800b752:	9905      	ldr	r1, [sp, #20]
 800b754:	0026      	movs	r6, r4
 800b756:	18cb      	adds	r3, r1, r3
 800b758:	469c      	mov	ip, r3
 800b75a:	9902      	ldr	r1, [sp, #8]
 800b75c:	428e      	cmp	r6, r1
 800b75e:	d310      	bcc.n	800b782 <__mdiff+0x102>
 800b760:	9e02      	ldr	r6, [sp, #8]
 800b762:	1ee1      	subs	r1, r4, #3
 800b764:	2500      	movs	r5, #0
 800b766:	428e      	cmp	r6, r1
 800b768:	d304      	bcc.n	800b774 <__mdiff+0xf4>
 800b76a:	0031      	movs	r1, r6
 800b76c:	3103      	adds	r1, #3
 800b76e:	1b0c      	subs	r4, r1, r4
 800b770:	08a4      	lsrs	r4, r4, #2
 800b772:	00a5      	lsls	r5, r4, #2
 800b774:	195b      	adds	r3, r3, r5
 800b776:	3b04      	subs	r3, #4
 800b778:	6819      	ldr	r1, [r3, #0]
 800b77a:	2900      	cmp	r1, #0
 800b77c:	d00f      	beq.n	800b79e <__mdiff+0x11e>
 800b77e:	6110      	str	r0, [r2, #16]
 800b780:	e797      	b.n	800b6b2 <__mdiff+0x32>
 800b782:	ce02      	ldmia	r6!, {r1}
 800b784:	b28d      	uxth	r5, r1
 800b786:	19ed      	adds	r5, r5, r7
 800b788:	0c0f      	lsrs	r7, r1, #16
 800b78a:	1429      	asrs	r1, r5, #16
 800b78c:	1879      	adds	r1, r7, r1
 800b78e:	140f      	asrs	r7, r1, #16
 800b790:	b2ad      	uxth	r5, r5
 800b792:	0409      	lsls	r1, r1, #16
 800b794:	430d      	orrs	r5, r1
 800b796:	4661      	mov	r1, ip
 800b798:	c120      	stmia	r1!, {r5}
 800b79a:	468c      	mov	ip, r1
 800b79c:	e7dd      	b.n	800b75a <__mdiff+0xda>
 800b79e:	3801      	subs	r0, #1
 800b7a0:	e7e9      	b.n	800b776 <__mdiff+0xf6>
 800b7a2:	46c0      	nop			; (mov r8, r8)
 800b7a4:	0800d6ac 	.word	0x0800d6ac
 800b7a8:	00000232 	.word	0x00000232
 800b7ac:	0800d6bd 	.word	0x0800d6bd

0800b7b0 <__d2b>:
 800b7b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7b2:	2101      	movs	r1, #1
 800b7b4:	0014      	movs	r4, r2
 800b7b6:	001e      	movs	r6, r3
 800b7b8:	9f08      	ldr	r7, [sp, #32]
 800b7ba:	f7ff fcc1 	bl	800b140 <_Balloc>
 800b7be:	1e05      	subs	r5, r0, #0
 800b7c0:	d105      	bne.n	800b7ce <__d2b+0x1e>
 800b7c2:	0002      	movs	r2, r0
 800b7c4:	4b26      	ldr	r3, [pc, #152]	; (800b860 <__d2b+0xb0>)
 800b7c6:	4927      	ldr	r1, [pc, #156]	; (800b864 <__d2b+0xb4>)
 800b7c8:	4827      	ldr	r0, [pc, #156]	; (800b868 <__d2b+0xb8>)
 800b7ca:	f7fe fdc5 	bl	800a358 <__assert_func>
 800b7ce:	0333      	lsls	r3, r6, #12
 800b7d0:	0076      	lsls	r6, r6, #1
 800b7d2:	0b1b      	lsrs	r3, r3, #12
 800b7d4:	0d76      	lsrs	r6, r6, #21
 800b7d6:	d124      	bne.n	800b822 <__d2b+0x72>
 800b7d8:	9301      	str	r3, [sp, #4]
 800b7da:	2c00      	cmp	r4, #0
 800b7dc:	d027      	beq.n	800b82e <__d2b+0x7e>
 800b7de:	4668      	mov	r0, sp
 800b7e0:	9400      	str	r4, [sp, #0]
 800b7e2:	f7ff fd73 	bl	800b2cc <__lo0bits>
 800b7e6:	9c00      	ldr	r4, [sp, #0]
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d01e      	beq.n	800b82a <__d2b+0x7a>
 800b7ec:	9b01      	ldr	r3, [sp, #4]
 800b7ee:	2120      	movs	r1, #32
 800b7f0:	001a      	movs	r2, r3
 800b7f2:	1a09      	subs	r1, r1, r0
 800b7f4:	408a      	lsls	r2, r1
 800b7f6:	40c3      	lsrs	r3, r0
 800b7f8:	4322      	orrs	r2, r4
 800b7fa:	616a      	str	r2, [r5, #20]
 800b7fc:	9301      	str	r3, [sp, #4]
 800b7fe:	9c01      	ldr	r4, [sp, #4]
 800b800:	61ac      	str	r4, [r5, #24]
 800b802:	1e63      	subs	r3, r4, #1
 800b804:	419c      	sbcs	r4, r3
 800b806:	3401      	adds	r4, #1
 800b808:	612c      	str	r4, [r5, #16]
 800b80a:	2e00      	cmp	r6, #0
 800b80c:	d018      	beq.n	800b840 <__d2b+0x90>
 800b80e:	4b17      	ldr	r3, [pc, #92]	; (800b86c <__d2b+0xbc>)
 800b810:	18f6      	adds	r6, r6, r3
 800b812:	2335      	movs	r3, #53	; 0x35
 800b814:	1836      	adds	r6, r6, r0
 800b816:	1a18      	subs	r0, r3, r0
 800b818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b81a:	603e      	str	r6, [r7, #0]
 800b81c:	6018      	str	r0, [r3, #0]
 800b81e:	0028      	movs	r0, r5
 800b820:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b822:	2280      	movs	r2, #128	; 0x80
 800b824:	0352      	lsls	r2, r2, #13
 800b826:	4313      	orrs	r3, r2
 800b828:	e7d6      	b.n	800b7d8 <__d2b+0x28>
 800b82a:	616c      	str	r4, [r5, #20]
 800b82c:	e7e7      	b.n	800b7fe <__d2b+0x4e>
 800b82e:	a801      	add	r0, sp, #4
 800b830:	f7ff fd4c 	bl	800b2cc <__lo0bits>
 800b834:	2401      	movs	r4, #1
 800b836:	9b01      	ldr	r3, [sp, #4]
 800b838:	612c      	str	r4, [r5, #16]
 800b83a:	616b      	str	r3, [r5, #20]
 800b83c:	3020      	adds	r0, #32
 800b83e:	e7e4      	b.n	800b80a <__d2b+0x5a>
 800b840:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <__d2b+0xc0>)
 800b842:	18c0      	adds	r0, r0, r3
 800b844:	4b0b      	ldr	r3, [pc, #44]	; (800b874 <__d2b+0xc4>)
 800b846:	6038      	str	r0, [r7, #0]
 800b848:	18e3      	adds	r3, r4, r3
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	18eb      	adds	r3, r5, r3
 800b84e:	6958      	ldr	r0, [r3, #20]
 800b850:	f7ff fd22 	bl	800b298 <__hi0bits>
 800b854:	0164      	lsls	r4, r4, #5
 800b856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b858:	1a24      	subs	r4, r4, r0
 800b85a:	601c      	str	r4, [r3, #0]
 800b85c:	e7df      	b.n	800b81e <__d2b+0x6e>
 800b85e:	46c0      	nop			; (mov r8, r8)
 800b860:	0800d6ac 	.word	0x0800d6ac
 800b864:	0000030a 	.word	0x0000030a
 800b868:	0800d6bd 	.word	0x0800d6bd
 800b86c:	fffffbcd 	.word	0xfffffbcd
 800b870:	fffffbce 	.word	0xfffffbce
 800b874:	3fffffff 	.word	0x3fffffff

0800b878 <_calloc_r>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	0c13      	lsrs	r3, r2, #16
 800b87c:	0c0d      	lsrs	r5, r1, #16
 800b87e:	d11e      	bne.n	800b8be <_calloc_r+0x46>
 800b880:	2b00      	cmp	r3, #0
 800b882:	d10c      	bne.n	800b89e <_calloc_r+0x26>
 800b884:	b289      	uxth	r1, r1
 800b886:	b294      	uxth	r4, r2
 800b888:	434c      	muls	r4, r1
 800b88a:	0021      	movs	r1, r4
 800b88c:	f7fd ff80 	bl	8009790 <_malloc_r>
 800b890:	1e05      	subs	r5, r0, #0
 800b892:	d01b      	beq.n	800b8cc <_calloc_r+0x54>
 800b894:	0022      	movs	r2, r4
 800b896:	2100      	movs	r1, #0
 800b898:	f7fd ff05 	bl	80096a6 <memset>
 800b89c:	e016      	b.n	800b8cc <_calloc_r+0x54>
 800b89e:	1c1d      	adds	r5, r3, #0
 800b8a0:	1c0b      	adds	r3, r1, #0
 800b8a2:	b292      	uxth	r2, r2
 800b8a4:	b289      	uxth	r1, r1
 800b8a6:	b29c      	uxth	r4, r3
 800b8a8:	4351      	muls	r1, r2
 800b8aa:	b2ab      	uxth	r3, r5
 800b8ac:	4363      	muls	r3, r4
 800b8ae:	0c0c      	lsrs	r4, r1, #16
 800b8b0:	191c      	adds	r4, r3, r4
 800b8b2:	0c22      	lsrs	r2, r4, #16
 800b8b4:	d107      	bne.n	800b8c6 <_calloc_r+0x4e>
 800b8b6:	0424      	lsls	r4, r4, #16
 800b8b8:	b289      	uxth	r1, r1
 800b8ba:	430c      	orrs	r4, r1
 800b8bc:	e7e5      	b.n	800b88a <_calloc_r+0x12>
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <_calloc_r+0x4e>
 800b8c2:	1c13      	adds	r3, r2, #0
 800b8c4:	e7ed      	b.n	800b8a2 <_calloc_r+0x2a>
 800b8c6:	230c      	movs	r3, #12
 800b8c8:	2500      	movs	r5, #0
 800b8ca:	6003      	str	r3, [r0, #0]
 800b8cc:	0028      	movs	r0, r5
 800b8ce:	bd70      	pop	{r4, r5, r6, pc}

0800b8d0 <__ssputs_r>:
 800b8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8d2:	688e      	ldr	r6, [r1, #8]
 800b8d4:	b085      	sub	sp, #20
 800b8d6:	0007      	movs	r7, r0
 800b8d8:	000c      	movs	r4, r1
 800b8da:	9203      	str	r2, [sp, #12]
 800b8dc:	9301      	str	r3, [sp, #4]
 800b8de:	429e      	cmp	r6, r3
 800b8e0:	d83c      	bhi.n	800b95c <__ssputs_r+0x8c>
 800b8e2:	2390      	movs	r3, #144	; 0x90
 800b8e4:	898a      	ldrh	r2, [r1, #12]
 800b8e6:	00db      	lsls	r3, r3, #3
 800b8e8:	421a      	tst	r2, r3
 800b8ea:	d034      	beq.n	800b956 <__ssputs_r+0x86>
 800b8ec:	6909      	ldr	r1, [r1, #16]
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	6960      	ldr	r0, [r4, #20]
 800b8f2:	1a5b      	subs	r3, r3, r1
 800b8f4:	9302      	str	r3, [sp, #8]
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	4343      	muls	r3, r0
 800b8fa:	0fdd      	lsrs	r5, r3, #31
 800b8fc:	18ed      	adds	r5, r5, r3
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	9802      	ldr	r0, [sp, #8]
 800b902:	3301      	adds	r3, #1
 800b904:	181b      	adds	r3, r3, r0
 800b906:	106d      	asrs	r5, r5, #1
 800b908:	42ab      	cmp	r3, r5
 800b90a:	d900      	bls.n	800b90e <__ssputs_r+0x3e>
 800b90c:	001d      	movs	r5, r3
 800b90e:	0553      	lsls	r3, r2, #21
 800b910:	d532      	bpl.n	800b978 <__ssputs_r+0xa8>
 800b912:	0029      	movs	r1, r5
 800b914:	0038      	movs	r0, r7
 800b916:	f7fd ff3b 	bl	8009790 <_malloc_r>
 800b91a:	1e06      	subs	r6, r0, #0
 800b91c:	d109      	bne.n	800b932 <__ssputs_r+0x62>
 800b91e:	230c      	movs	r3, #12
 800b920:	603b      	str	r3, [r7, #0]
 800b922:	2340      	movs	r3, #64	; 0x40
 800b924:	2001      	movs	r0, #1
 800b926:	89a2      	ldrh	r2, [r4, #12]
 800b928:	4240      	negs	r0, r0
 800b92a:	4313      	orrs	r3, r2
 800b92c:	81a3      	strh	r3, [r4, #12]
 800b92e:	b005      	add	sp, #20
 800b930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b932:	9a02      	ldr	r2, [sp, #8]
 800b934:	6921      	ldr	r1, [r4, #16]
 800b936:	f7fd fead 	bl	8009694 <memcpy>
 800b93a:	89a3      	ldrh	r3, [r4, #12]
 800b93c:	4a14      	ldr	r2, [pc, #80]	; (800b990 <__ssputs_r+0xc0>)
 800b93e:	401a      	ands	r2, r3
 800b940:	2380      	movs	r3, #128	; 0x80
 800b942:	4313      	orrs	r3, r2
 800b944:	81a3      	strh	r3, [r4, #12]
 800b946:	9b02      	ldr	r3, [sp, #8]
 800b948:	6126      	str	r6, [r4, #16]
 800b94a:	18f6      	adds	r6, r6, r3
 800b94c:	6026      	str	r6, [r4, #0]
 800b94e:	6165      	str	r5, [r4, #20]
 800b950:	9e01      	ldr	r6, [sp, #4]
 800b952:	1aed      	subs	r5, r5, r3
 800b954:	60a5      	str	r5, [r4, #8]
 800b956:	9b01      	ldr	r3, [sp, #4]
 800b958:	429e      	cmp	r6, r3
 800b95a:	d900      	bls.n	800b95e <__ssputs_r+0x8e>
 800b95c:	9e01      	ldr	r6, [sp, #4]
 800b95e:	0032      	movs	r2, r6
 800b960:	9903      	ldr	r1, [sp, #12]
 800b962:	6820      	ldr	r0, [r4, #0]
 800b964:	f000 fd9e 	bl	800c4a4 <memmove>
 800b968:	68a3      	ldr	r3, [r4, #8]
 800b96a:	2000      	movs	r0, #0
 800b96c:	1b9b      	subs	r3, r3, r6
 800b96e:	60a3      	str	r3, [r4, #8]
 800b970:	6823      	ldr	r3, [r4, #0]
 800b972:	199e      	adds	r6, r3, r6
 800b974:	6026      	str	r6, [r4, #0]
 800b976:	e7da      	b.n	800b92e <__ssputs_r+0x5e>
 800b978:	002a      	movs	r2, r5
 800b97a:	0038      	movs	r0, r7
 800b97c:	f000 fda5 	bl	800c4ca <_realloc_r>
 800b980:	1e06      	subs	r6, r0, #0
 800b982:	d1e0      	bne.n	800b946 <__ssputs_r+0x76>
 800b984:	0038      	movs	r0, r7
 800b986:	6921      	ldr	r1, [r4, #16]
 800b988:	f7fd fe96 	bl	80096b8 <_free_r>
 800b98c:	e7c7      	b.n	800b91e <__ssputs_r+0x4e>
 800b98e:	46c0      	nop			; (mov r8, r8)
 800b990:	fffffb7f 	.word	0xfffffb7f

0800b994 <_svfiprintf_r>:
 800b994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b996:	b0a1      	sub	sp, #132	; 0x84
 800b998:	9003      	str	r0, [sp, #12]
 800b99a:	001d      	movs	r5, r3
 800b99c:	898b      	ldrh	r3, [r1, #12]
 800b99e:	000f      	movs	r7, r1
 800b9a0:	0016      	movs	r6, r2
 800b9a2:	061b      	lsls	r3, r3, #24
 800b9a4:	d511      	bpl.n	800b9ca <_svfiprintf_r+0x36>
 800b9a6:	690b      	ldr	r3, [r1, #16]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10e      	bne.n	800b9ca <_svfiprintf_r+0x36>
 800b9ac:	2140      	movs	r1, #64	; 0x40
 800b9ae:	f7fd feef 	bl	8009790 <_malloc_r>
 800b9b2:	6038      	str	r0, [r7, #0]
 800b9b4:	6138      	str	r0, [r7, #16]
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d105      	bne.n	800b9c6 <_svfiprintf_r+0x32>
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	9a03      	ldr	r2, [sp, #12]
 800b9be:	3801      	subs	r0, #1
 800b9c0:	6013      	str	r3, [r2, #0]
 800b9c2:	b021      	add	sp, #132	; 0x84
 800b9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9c6:	2340      	movs	r3, #64	; 0x40
 800b9c8:	617b      	str	r3, [r7, #20]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	ac08      	add	r4, sp, #32
 800b9ce:	6163      	str	r3, [r4, #20]
 800b9d0:	3320      	adds	r3, #32
 800b9d2:	7663      	strb	r3, [r4, #25]
 800b9d4:	3310      	adds	r3, #16
 800b9d6:	76a3      	strb	r3, [r4, #26]
 800b9d8:	9507      	str	r5, [sp, #28]
 800b9da:	0035      	movs	r5, r6
 800b9dc:	782b      	ldrb	r3, [r5, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d001      	beq.n	800b9e6 <_svfiprintf_r+0x52>
 800b9e2:	2b25      	cmp	r3, #37	; 0x25
 800b9e4:	d147      	bne.n	800ba76 <_svfiprintf_r+0xe2>
 800b9e6:	1bab      	subs	r3, r5, r6
 800b9e8:	9305      	str	r3, [sp, #20]
 800b9ea:	42b5      	cmp	r5, r6
 800b9ec:	d00c      	beq.n	800ba08 <_svfiprintf_r+0x74>
 800b9ee:	0032      	movs	r2, r6
 800b9f0:	0039      	movs	r1, r7
 800b9f2:	9803      	ldr	r0, [sp, #12]
 800b9f4:	f7ff ff6c 	bl	800b8d0 <__ssputs_r>
 800b9f8:	1c43      	adds	r3, r0, #1
 800b9fa:	d100      	bne.n	800b9fe <_svfiprintf_r+0x6a>
 800b9fc:	e0ae      	b.n	800bb5c <_svfiprintf_r+0x1c8>
 800b9fe:	6962      	ldr	r2, [r4, #20]
 800ba00:	9b05      	ldr	r3, [sp, #20]
 800ba02:	4694      	mov	ip, r2
 800ba04:	4463      	add	r3, ip
 800ba06:	6163      	str	r3, [r4, #20]
 800ba08:	782b      	ldrb	r3, [r5, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d100      	bne.n	800ba10 <_svfiprintf_r+0x7c>
 800ba0e:	e0a5      	b.n	800bb5c <_svfiprintf_r+0x1c8>
 800ba10:	2201      	movs	r2, #1
 800ba12:	2300      	movs	r3, #0
 800ba14:	4252      	negs	r2, r2
 800ba16:	6062      	str	r2, [r4, #4]
 800ba18:	a904      	add	r1, sp, #16
 800ba1a:	3254      	adds	r2, #84	; 0x54
 800ba1c:	1852      	adds	r2, r2, r1
 800ba1e:	1c6e      	adds	r6, r5, #1
 800ba20:	6023      	str	r3, [r4, #0]
 800ba22:	60e3      	str	r3, [r4, #12]
 800ba24:	60a3      	str	r3, [r4, #8]
 800ba26:	7013      	strb	r3, [r2, #0]
 800ba28:	65a3      	str	r3, [r4, #88]	; 0x58
 800ba2a:	2205      	movs	r2, #5
 800ba2c:	7831      	ldrb	r1, [r6, #0]
 800ba2e:	4854      	ldr	r0, [pc, #336]	; (800bb80 <_svfiprintf_r+0x1ec>)
 800ba30:	f7ff fb6a 	bl	800b108 <memchr>
 800ba34:	1c75      	adds	r5, r6, #1
 800ba36:	2800      	cmp	r0, #0
 800ba38:	d11f      	bne.n	800ba7a <_svfiprintf_r+0xe6>
 800ba3a:	6822      	ldr	r2, [r4, #0]
 800ba3c:	06d3      	lsls	r3, r2, #27
 800ba3e:	d504      	bpl.n	800ba4a <_svfiprintf_r+0xb6>
 800ba40:	2353      	movs	r3, #83	; 0x53
 800ba42:	a904      	add	r1, sp, #16
 800ba44:	185b      	adds	r3, r3, r1
 800ba46:	2120      	movs	r1, #32
 800ba48:	7019      	strb	r1, [r3, #0]
 800ba4a:	0713      	lsls	r3, r2, #28
 800ba4c:	d504      	bpl.n	800ba58 <_svfiprintf_r+0xc4>
 800ba4e:	2353      	movs	r3, #83	; 0x53
 800ba50:	a904      	add	r1, sp, #16
 800ba52:	185b      	adds	r3, r3, r1
 800ba54:	212b      	movs	r1, #43	; 0x2b
 800ba56:	7019      	strb	r1, [r3, #0]
 800ba58:	7833      	ldrb	r3, [r6, #0]
 800ba5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba5c:	d016      	beq.n	800ba8c <_svfiprintf_r+0xf8>
 800ba5e:	0035      	movs	r5, r6
 800ba60:	2100      	movs	r1, #0
 800ba62:	200a      	movs	r0, #10
 800ba64:	68e3      	ldr	r3, [r4, #12]
 800ba66:	782a      	ldrb	r2, [r5, #0]
 800ba68:	1c6e      	adds	r6, r5, #1
 800ba6a:	3a30      	subs	r2, #48	; 0x30
 800ba6c:	2a09      	cmp	r2, #9
 800ba6e:	d94e      	bls.n	800bb0e <_svfiprintf_r+0x17a>
 800ba70:	2900      	cmp	r1, #0
 800ba72:	d111      	bne.n	800ba98 <_svfiprintf_r+0x104>
 800ba74:	e017      	b.n	800baa6 <_svfiprintf_r+0x112>
 800ba76:	3501      	adds	r5, #1
 800ba78:	e7b0      	b.n	800b9dc <_svfiprintf_r+0x48>
 800ba7a:	4b41      	ldr	r3, [pc, #260]	; (800bb80 <_svfiprintf_r+0x1ec>)
 800ba7c:	6822      	ldr	r2, [r4, #0]
 800ba7e:	1ac0      	subs	r0, r0, r3
 800ba80:	2301      	movs	r3, #1
 800ba82:	4083      	lsls	r3, r0
 800ba84:	4313      	orrs	r3, r2
 800ba86:	002e      	movs	r6, r5
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	e7ce      	b.n	800ba2a <_svfiprintf_r+0x96>
 800ba8c:	9b07      	ldr	r3, [sp, #28]
 800ba8e:	1d19      	adds	r1, r3, #4
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	9107      	str	r1, [sp, #28]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	db01      	blt.n	800ba9c <_svfiprintf_r+0x108>
 800ba98:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba9a:	e004      	b.n	800baa6 <_svfiprintf_r+0x112>
 800ba9c:	425b      	negs	r3, r3
 800ba9e:	60e3      	str	r3, [r4, #12]
 800baa0:	2302      	movs	r3, #2
 800baa2:	4313      	orrs	r3, r2
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	782b      	ldrb	r3, [r5, #0]
 800baa8:	2b2e      	cmp	r3, #46	; 0x2e
 800baaa:	d10a      	bne.n	800bac2 <_svfiprintf_r+0x12e>
 800baac:	786b      	ldrb	r3, [r5, #1]
 800baae:	2b2a      	cmp	r3, #42	; 0x2a
 800bab0:	d135      	bne.n	800bb1e <_svfiprintf_r+0x18a>
 800bab2:	9b07      	ldr	r3, [sp, #28]
 800bab4:	3502      	adds	r5, #2
 800bab6:	1d1a      	adds	r2, r3, #4
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	9207      	str	r2, [sp, #28]
 800babc:	2b00      	cmp	r3, #0
 800babe:	db2b      	blt.n	800bb18 <_svfiprintf_r+0x184>
 800bac0:	9309      	str	r3, [sp, #36]	; 0x24
 800bac2:	4e30      	ldr	r6, [pc, #192]	; (800bb84 <_svfiprintf_r+0x1f0>)
 800bac4:	2203      	movs	r2, #3
 800bac6:	0030      	movs	r0, r6
 800bac8:	7829      	ldrb	r1, [r5, #0]
 800baca:	f7ff fb1d 	bl	800b108 <memchr>
 800bace:	2800      	cmp	r0, #0
 800bad0:	d006      	beq.n	800bae0 <_svfiprintf_r+0x14c>
 800bad2:	2340      	movs	r3, #64	; 0x40
 800bad4:	1b80      	subs	r0, r0, r6
 800bad6:	4083      	lsls	r3, r0
 800bad8:	6822      	ldr	r2, [r4, #0]
 800bada:	3501      	adds	r5, #1
 800badc:	4313      	orrs	r3, r2
 800bade:	6023      	str	r3, [r4, #0]
 800bae0:	7829      	ldrb	r1, [r5, #0]
 800bae2:	2206      	movs	r2, #6
 800bae4:	4828      	ldr	r0, [pc, #160]	; (800bb88 <_svfiprintf_r+0x1f4>)
 800bae6:	1c6e      	adds	r6, r5, #1
 800bae8:	7621      	strb	r1, [r4, #24]
 800baea:	f7ff fb0d 	bl	800b108 <memchr>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d03c      	beq.n	800bb6c <_svfiprintf_r+0x1d8>
 800baf2:	4b26      	ldr	r3, [pc, #152]	; (800bb8c <_svfiprintf_r+0x1f8>)
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d125      	bne.n	800bb44 <_svfiprintf_r+0x1b0>
 800baf8:	2207      	movs	r2, #7
 800bafa:	9b07      	ldr	r3, [sp, #28]
 800bafc:	3307      	adds	r3, #7
 800bafe:	4393      	bics	r3, r2
 800bb00:	3308      	adds	r3, #8
 800bb02:	9307      	str	r3, [sp, #28]
 800bb04:	6963      	ldr	r3, [r4, #20]
 800bb06:	9a04      	ldr	r2, [sp, #16]
 800bb08:	189b      	adds	r3, r3, r2
 800bb0a:	6163      	str	r3, [r4, #20]
 800bb0c:	e765      	b.n	800b9da <_svfiprintf_r+0x46>
 800bb0e:	4343      	muls	r3, r0
 800bb10:	0035      	movs	r5, r6
 800bb12:	2101      	movs	r1, #1
 800bb14:	189b      	adds	r3, r3, r2
 800bb16:	e7a6      	b.n	800ba66 <_svfiprintf_r+0xd2>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	425b      	negs	r3, r3
 800bb1c:	e7d0      	b.n	800bac0 <_svfiprintf_r+0x12c>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	200a      	movs	r0, #10
 800bb22:	001a      	movs	r2, r3
 800bb24:	3501      	adds	r5, #1
 800bb26:	6063      	str	r3, [r4, #4]
 800bb28:	7829      	ldrb	r1, [r5, #0]
 800bb2a:	1c6e      	adds	r6, r5, #1
 800bb2c:	3930      	subs	r1, #48	; 0x30
 800bb2e:	2909      	cmp	r1, #9
 800bb30:	d903      	bls.n	800bb3a <_svfiprintf_r+0x1a6>
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0c5      	beq.n	800bac2 <_svfiprintf_r+0x12e>
 800bb36:	9209      	str	r2, [sp, #36]	; 0x24
 800bb38:	e7c3      	b.n	800bac2 <_svfiprintf_r+0x12e>
 800bb3a:	4342      	muls	r2, r0
 800bb3c:	0035      	movs	r5, r6
 800bb3e:	2301      	movs	r3, #1
 800bb40:	1852      	adds	r2, r2, r1
 800bb42:	e7f1      	b.n	800bb28 <_svfiprintf_r+0x194>
 800bb44:	ab07      	add	r3, sp, #28
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	003a      	movs	r2, r7
 800bb4a:	0021      	movs	r1, r4
 800bb4c:	4b10      	ldr	r3, [pc, #64]	; (800bb90 <_svfiprintf_r+0x1fc>)
 800bb4e:	9803      	ldr	r0, [sp, #12]
 800bb50:	f7fd ff3e 	bl	80099d0 <_printf_float>
 800bb54:	9004      	str	r0, [sp, #16]
 800bb56:	9b04      	ldr	r3, [sp, #16]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	d1d3      	bne.n	800bb04 <_svfiprintf_r+0x170>
 800bb5c:	89bb      	ldrh	r3, [r7, #12]
 800bb5e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bb60:	065b      	lsls	r3, r3, #25
 800bb62:	d400      	bmi.n	800bb66 <_svfiprintf_r+0x1d2>
 800bb64:	e72d      	b.n	800b9c2 <_svfiprintf_r+0x2e>
 800bb66:	2001      	movs	r0, #1
 800bb68:	4240      	negs	r0, r0
 800bb6a:	e72a      	b.n	800b9c2 <_svfiprintf_r+0x2e>
 800bb6c:	ab07      	add	r3, sp, #28
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	003a      	movs	r2, r7
 800bb72:	0021      	movs	r1, r4
 800bb74:	4b06      	ldr	r3, [pc, #24]	; (800bb90 <_svfiprintf_r+0x1fc>)
 800bb76:	9803      	ldr	r0, [sp, #12]
 800bb78:	f7fe f9dc 	bl	8009f34 <_printf_i>
 800bb7c:	e7ea      	b.n	800bb54 <_svfiprintf_r+0x1c0>
 800bb7e:	46c0      	nop			; (mov r8, r8)
 800bb80:	0800d81c 	.word	0x0800d81c
 800bb84:	0800d822 	.word	0x0800d822
 800bb88:	0800d826 	.word	0x0800d826
 800bb8c:	080099d1 	.word	0x080099d1
 800bb90:	0800b8d1 	.word	0x0800b8d1

0800bb94 <__sfputc_r>:
 800bb94:	6893      	ldr	r3, [r2, #8]
 800bb96:	b510      	push	{r4, lr}
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	6093      	str	r3, [r2, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	da04      	bge.n	800bbaa <__sfputc_r+0x16>
 800bba0:	6994      	ldr	r4, [r2, #24]
 800bba2:	42a3      	cmp	r3, r4
 800bba4:	db07      	blt.n	800bbb6 <__sfputc_r+0x22>
 800bba6:	290a      	cmp	r1, #10
 800bba8:	d005      	beq.n	800bbb6 <__sfputc_r+0x22>
 800bbaa:	6813      	ldr	r3, [r2, #0]
 800bbac:	1c58      	adds	r0, r3, #1
 800bbae:	6010      	str	r0, [r2, #0]
 800bbb0:	7019      	strb	r1, [r3, #0]
 800bbb2:	0008      	movs	r0, r1
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	f000 f94f 	bl	800be58 <__swbuf_r>
 800bbba:	0001      	movs	r1, r0
 800bbbc:	e7f9      	b.n	800bbb2 <__sfputc_r+0x1e>

0800bbbe <__sfputs_r>:
 800bbbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc0:	0006      	movs	r6, r0
 800bbc2:	000f      	movs	r7, r1
 800bbc4:	0014      	movs	r4, r2
 800bbc6:	18d5      	adds	r5, r2, r3
 800bbc8:	42ac      	cmp	r4, r5
 800bbca:	d101      	bne.n	800bbd0 <__sfputs_r+0x12>
 800bbcc:	2000      	movs	r0, #0
 800bbce:	e007      	b.n	800bbe0 <__sfputs_r+0x22>
 800bbd0:	7821      	ldrb	r1, [r4, #0]
 800bbd2:	003a      	movs	r2, r7
 800bbd4:	0030      	movs	r0, r6
 800bbd6:	f7ff ffdd 	bl	800bb94 <__sfputc_r>
 800bbda:	3401      	adds	r4, #1
 800bbdc:	1c43      	adds	r3, r0, #1
 800bbde:	d1f3      	bne.n	800bbc8 <__sfputs_r+0xa>
 800bbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbe4 <_vfiprintf_r>:
 800bbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbe6:	b0a1      	sub	sp, #132	; 0x84
 800bbe8:	0006      	movs	r6, r0
 800bbea:	000c      	movs	r4, r1
 800bbec:	001f      	movs	r7, r3
 800bbee:	9203      	str	r2, [sp, #12]
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d004      	beq.n	800bbfe <_vfiprintf_r+0x1a>
 800bbf4:	6983      	ldr	r3, [r0, #24]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <_vfiprintf_r+0x1a>
 800bbfa:	f000 fb31 	bl	800c260 <__sinit>
 800bbfe:	4b8e      	ldr	r3, [pc, #568]	; (800be38 <_vfiprintf_r+0x254>)
 800bc00:	429c      	cmp	r4, r3
 800bc02:	d11c      	bne.n	800bc3e <_vfiprintf_r+0x5a>
 800bc04:	6874      	ldr	r4, [r6, #4]
 800bc06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc08:	07db      	lsls	r3, r3, #31
 800bc0a:	d405      	bmi.n	800bc18 <_vfiprintf_r+0x34>
 800bc0c:	89a3      	ldrh	r3, [r4, #12]
 800bc0e:	059b      	lsls	r3, r3, #22
 800bc10:	d402      	bmi.n	800bc18 <_vfiprintf_r+0x34>
 800bc12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc14:	f000 fbc5 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	071b      	lsls	r3, r3, #28
 800bc1c:	d502      	bpl.n	800bc24 <_vfiprintf_r+0x40>
 800bc1e:	6923      	ldr	r3, [r4, #16]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d11d      	bne.n	800bc60 <_vfiprintf_r+0x7c>
 800bc24:	0021      	movs	r1, r4
 800bc26:	0030      	movs	r0, r6
 800bc28:	f000 f96c 	bl	800bf04 <__swsetup_r>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d017      	beq.n	800bc60 <_vfiprintf_r+0x7c>
 800bc30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc32:	07db      	lsls	r3, r3, #31
 800bc34:	d50d      	bpl.n	800bc52 <_vfiprintf_r+0x6e>
 800bc36:	2001      	movs	r0, #1
 800bc38:	4240      	negs	r0, r0
 800bc3a:	b021      	add	sp, #132	; 0x84
 800bc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc3e:	4b7f      	ldr	r3, [pc, #508]	; (800be3c <_vfiprintf_r+0x258>)
 800bc40:	429c      	cmp	r4, r3
 800bc42:	d101      	bne.n	800bc48 <_vfiprintf_r+0x64>
 800bc44:	68b4      	ldr	r4, [r6, #8]
 800bc46:	e7de      	b.n	800bc06 <_vfiprintf_r+0x22>
 800bc48:	4b7d      	ldr	r3, [pc, #500]	; (800be40 <_vfiprintf_r+0x25c>)
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	d1db      	bne.n	800bc06 <_vfiprintf_r+0x22>
 800bc4e:	68f4      	ldr	r4, [r6, #12]
 800bc50:	e7d9      	b.n	800bc06 <_vfiprintf_r+0x22>
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	059b      	lsls	r3, r3, #22
 800bc56:	d4ee      	bmi.n	800bc36 <_vfiprintf_r+0x52>
 800bc58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc5a:	f000 fba3 	bl	800c3a4 <__retarget_lock_release_recursive>
 800bc5e:	e7ea      	b.n	800bc36 <_vfiprintf_r+0x52>
 800bc60:	2300      	movs	r3, #0
 800bc62:	ad08      	add	r5, sp, #32
 800bc64:	616b      	str	r3, [r5, #20]
 800bc66:	3320      	adds	r3, #32
 800bc68:	766b      	strb	r3, [r5, #25]
 800bc6a:	3310      	adds	r3, #16
 800bc6c:	76ab      	strb	r3, [r5, #26]
 800bc6e:	9707      	str	r7, [sp, #28]
 800bc70:	9f03      	ldr	r7, [sp, #12]
 800bc72:	783b      	ldrb	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <_vfiprintf_r+0x98>
 800bc78:	2b25      	cmp	r3, #37	; 0x25
 800bc7a:	d14e      	bne.n	800bd1a <_vfiprintf_r+0x136>
 800bc7c:	9b03      	ldr	r3, [sp, #12]
 800bc7e:	1afb      	subs	r3, r7, r3
 800bc80:	9305      	str	r3, [sp, #20]
 800bc82:	9b03      	ldr	r3, [sp, #12]
 800bc84:	429f      	cmp	r7, r3
 800bc86:	d00d      	beq.n	800bca4 <_vfiprintf_r+0xc0>
 800bc88:	9b05      	ldr	r3, [sp, #20]
 800bc8a:	0021      	movs	r1, r4
 800bc8c:	0030      	movs	r0, r6
 800bc8e:	9a03      	ldr	r2, [sp, #12]
 800bc90:	f7ff ff95 	bl	800bbbe <__sfputs_r>
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	d100      	bne.n	800bc9a <_vfiprintf_r+0xb6>
 800bc98:	e0b5      	b.n	800be06 <_vfiprintf_r+0x222>
 800bc9a:	696a      	ldr	r2, [r5, #20]
 800bc9c:	9b05      	ldr	r3, [sp, #20]
 800bc9e:	4694      	mov	ip, r2
 800bca0:	4463      	add	r3, ip
 800bca2:	616b      	str	r3, [r5, #20]
 800bca4:	783b      	ldrb	r3, [r7, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d100      	bne.n	800bcac <_vfiprintf_r+0xc8>
 800bcaa:	e0ac      	b.n	800be06 <_vfiprintf_r+0x222>
 800bcac:	2201      	movs	r2, #1
 800bcae:	1c7b      	adds	r3, r7, #1
 800bcb0:	9303      	str	r3, [sp, #12]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	4252      	negs	r2, r2
 800bcb6:	606a      	str	r2, [r5, #4]
 800bcb8:	a904      	add	r1, sp, #16
 800bcba:	3254      	adds	r2, #84	; 0x54
 800bcbc:	1852      	adds	r2, r2, r1
 800bcbe:	602b      	str	r3, [r5, #0]
 800bcc0:	60eb      	str	r3, [r5, #12]
 800bcc2:	60ab      	str	r3, [r5, #8]
 800bcc4:	7013      	strb	r3, [r2, #0]
 800bcc6:	65ab      	str	r3, [r5, #88]	; 0x58
 800bcc8:	9b03      	ldr	r3, [sp, #12]
 800bcca:	2205      	movs	r2, #5
 800bccc:	7819      	ldrb	r1, [r3, #0]
 800bcce:	485d      	ldr	r0, [pc, #372]	; (800be44 <_vfiprintf_r+0x260>)
 800bcd0:	f7ff fa1a 	bl	800b108 <memchr>
 800bcd4:	9b03      	ldr	r3, [sp, #12]
 800bcd6:	1c5f      	adds	r7, r3, #1
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d120      	bne.n	800bd1e <_vfiprintf_r+0x13a>
 800bcdc:	682a      	ldr	r2, [r5, #0]
 800bcde:	06d3      	lsls	r3, r2, #27
 800bce0:	d504      	bpl.n	800bcec <_vfiprintf_r+0x108>
 800bce2:	2353      	movs	r3, #83	; 0x53
 800bce4:	a904      	add	r1, sp, #16
 800bce6:	185b      	adds	r3, r3, r1
 800bce8:	2120      	movs	r1, #32
 800bcea:	7019      	strb	r1, [r3, #0]
 800bcec:	0713      	lsls	r3, r2, #28
 800bcee:	d504      	bpl.n	800bcfa <_vfiprintf_r+0x116>
 800bcf0:	2353      	movs	r3, #83	; 0x53
 800bcf2:	a904      	add	r1, sp, #16
 800bcf4:	185b      	adds	r3, r3, r1
 800bcf6:	212b      	movs	r1, #43	; 0x2b
 800bcf8:	7019      	strb	r1, [r3, #0]
 800bcfa:	9b03      	ldr	r3, [sp, #12]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	2b2a      	cmp	r3, #42	; 0x2a
 800bd00:	d016      	beq.n	800bd30 <_vfiprintf_r+0x14c>
 800bd02:	2100      	movs	r1, #0
 800bd04:	68eb      	ldr	r3, [r5, #12]
 800bd06:	9f03      	ldr	r7, [sp, #12]
 800bd08:	783a      	ldrb	r2, [r7, #0]
 800bd0a:	1c78      	adds	r0, r7, #1
 800bd0c:	3a30      	subs	r2, #48	; 0x30
 800bd0e:	4684      	mov	ip, r0
 800bd10:	2a09      	cmp	r2, #9
 800bd12:	d94f      	bls.n	800bdb4 <_vfiprintf_r+0x1d0>
 800bd14:	2900      	cmp	r1, #0
 800bd16:	d111      	bne.n	800bd3c <_vfiprintf_r+0x158>
 800bd18:	e017      	b.n	800bd4a <_vfiprintf_r+0x166>
 800bd1a:	3701      	adds	r7, #1
 800bd1c:	e7a9      	b.n	800bc72 <_vfiprintf_r+0x8e>
 800bd1e:	4b49      	ldr	r3, [pc, #292]	; (800be44 <_vfiprintf_r+0x260>)
 800bd20:	682a      	ldr	r2, [r5, #0]
 800bd22:	1ac0      	subs	r0, r0, r3
 800bd24:	2301      	movs	r3, #1
 800bd26:	4083      	lsls	r3, r0
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	602b      	str	r3, [r5, #0]
 800bd2c:	9703      	str	r7, [sp, #12]
 800bd2e:	e7cb      	b.n	800bcc8 <_vfiprintf_r+0xe4>
 800bd30:	9b07      	ldr	r3, [sp, #28]
 800bd32:	1d19      	adds	r1, r3, #4
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	9107      	str	r1, [sp, #28]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	db01      	blt.n	800bd40 <_vfiprintf_r+0x15c>
 800bd3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd3e:	e004      	b.n	800bd4a <_vfiprintf_r+0x166>
 800bd40:	425b      	negs	r3, r3
 800bd42:	60eb      	str	r3, [r5, #12]
 800bd44:	2302      	movs	r3, #2
 800bd46:	4313      	orrs	r3, r2
 800bd48:	602b      	str	r3, [r5, #0]
 800bd4a:	783b      	ldrb	r3, [r7, #0]
 800bd4c:	2b2e      	cmp	r3, #46	; 0x2e
 800bd4e:	d10a      	bne.n	800bd66 <_vfiprintf_r+0x182>
 800bd50:	787b      	ldrb	r3, [r7, #1]
 800bd52:	2b2a      	cmp	r3, #42	; 0x2a
 800bd54:	d137      	bne.n	800bdc6 <_vfiprintf_r+0x1e2>
 800bd56:	9b07      	ldr	r3, [sp, #28]
 800bd58:	3702      	adds	r7, #2
 800bd5a:	1d1a      	adds	r2, r3, #4
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	9207      	str	r2, [sp, #28]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	db2d      	blt.n	800bdc0 <_vfiprintf_r+0x1dc>
 800bd64:	9309      	str	r3, [sp, #36]	; 0x24
 800bd66:	2203      	movs	r2, #3
 800bd68:	7839      	ldrb	r1, [r7, #0]
 800bd6a:	4837      	ldr	r0, [pc, #220]	; (800be48 <_vfiprintf_r+0x264>)
 800bd6c:	f7ff f9cc 	bl	800b108 <memchr>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d007      	beq.n	800bd84 <_vfiprintf_r+0x1a0>
 800bd74:	4b34      	ldr	r3, [pc, #208]	; (800be48 <_vfiprintf_r+0x264>)
 800bd76:	682a      	ldr	r2, [r5, #0]
 800bd78:	1ac0      	subs	r0, r0, r3
 800bd7a:	2340      	movs	r3, #64	; 0x40
 800bd7c:	4083      	lsls	r3, r0
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	3701      	adds	r7, #1
 800bd82:	602b      	str	r3, [r5, #0]
 800bd84:	7839      	ldrb	r1, [r7, #0]
 800bd86:	1c7b      	adds	r3, r7, #1
 800bd88:	2206      	movs	r2, #6
 800bd8a:	4830      	ldr	r0, [pc, #192]	; (800be4c <_vfiprintf_r+0x268>)
 800bd8c:	9303      	str	r3, [sp, #12]
 800bd8e:	7629      	strb	r1, [r5, #24]
 800bd90:	f7ff f9ba 	bl	800b108 <memchr>
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d045      	beq.n	800be24 <_vfiprintf_r+0x240>
 800bd98:	4b2d      	ldr	r3, [pc, #180]	; (800be50 <_vfiprintf_r+0x26c>)
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d127      	bne.n	800bdee <_vfiprintf_r+0x20a>
 800bd9e:	2207      	movs	r2, #7
 800bda0:	9b07      	ldr	r3, [sp, #28]
 800bda2:	3307      	adds	r3, #7
 800bda4:	4393      	bics	r3, r2
 800bda6:	3308      	adds	r3, #8
 800bda8:	9307      	str	r3, [sp, #28]
 800bdaa:	696b      	ldr	r3, [r5, #20]
 800bdac:	9a04      	ldr	r2, [sp, #16]
 800bdae:	189b      	adds	r3, r3, r2
 800bdb0:	616b      	str	r3, [r5, #20]
 800bdb2:	e75d      	b.n	800bc70 <_vfiprintf_r+0x8c>
 800bdb4:	210a      	movs	r1, #10
 800bdb6:	434b      	muls	r3, r1
 800bdb8:	4667      	mov	r7, ip
 800bdba:	189b      	adds	r3, r3, r2
 800bdbc:	3909      	subs	r1, #9
 800bdbe:	e7a3      	b.n	800bd08 <_vfiprintf_r+0x124>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	425b      	negs	r3, r3
 800bdc4:	e7ce      	b.n	800bd64 <_vfiprintf_r+0x180>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	001a      	movs	r2, r3
 800bdca:	3701      	adds	r7, #1
 800bdcc:	606b      	str	r3, [r5, #4]
 800bdce:	7839      	ldrb	r1, [r7, #0]
 800bdd0:	1c78      	adds	r0, r7, #1
 800bdd2:	3930      	subs	r1, #48	; 0x30
 800bdd4:	4684      	mov	ip, r0
 800bdd6:	2909      	cmp	r1, #9
 800bdd8:	d903      	bls.n	800bde2 <_vfiprintf_r+0x1fe>
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d0c3      	beq.n	800bd66 <_vfiprintf_r+0x182>
 800bdde:	9209      	str	r2, [sp, #36]	; 0x24
 800bde0:	e7c1      	b.n	800bd66 <_vfiprintf_r+0x182>
 800bde2:	230a      	movs	r3, #10
 800bde4:	435a      	muls	r2, r3
 800bde6:	4667      	mov	r7, ip
 800bde8:	1852      	adds	r2, r2, r1
 800bdea:	3b09      	subs	r3, #9
 800bdec:	e7ef      	b.n	800bdce <_vfiprintf_r+0x1ea>
 800bdee:	ab07      	add	r3, sp, #28
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	0022      	movs	r2, r4
 800bdf4:	0029      	movs	r1, r5
 800bdf6:	0030      	movs	r0, r6
 800bdf8:	4b16      	ldr	r3, [pc, #88]	; (800be54 <_vfiprintf_r+0x270>)
 800bdfa:	f7fd fde9 	bl	80099d0 <_printf_float>
 800bdfe:	9004      	str	r0, [sp, #16]
 800be00:	9b04      	ldr	r3, [sp, #16]
 800be02:	3301      	adds	r3, #1
 800be04:	d1d1      	bne.n	800bdaa <_vfiprintf_r+0x1c6>
 800be06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be08:	07db      	lsls	r3, r3, #31
 800be0a:	d405      	bmi.n	800be18 <_vfiprintf_r+0x234>
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	059b      	lsls	r3, r3, #22
 800be10:	d402      	bmi.n	800be18 <_vfiprintf_r+0x234>
 800be12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be14:	f000 fac6 	bl	800c3a4 <__retarget_lock_release_recursive>
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	065b      	lsls	r3, r3, #25
 800be1c:	d500      	bpl.n	800be20 <_vfiprintf_r+0x23c>
 800be1e:	e70a      	b.n	800bc36 <_vfiprintf_r+0x52>
 800be20:	980d      	ldr	r0, [sp, #52]	; 0x34
 800be22:	e70a      	b.n	800bc3a <_vfiprintf_r+0x56>
 800be24:	ab07      	add	r3, sp, #28
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	0022      	movs	r2, r4
 800be2a:	0029      	movs	r1, r5
 800be2c:	0030      	movs	r0, r6
 800be2e:	4b09      	ldr	r3, [pc, #36]	; (800be54 <_vfiprintf_r+0x270>)
 800be30:	f7fe f880 	bl	8009f34 <_printf_i>
 800be34:	e7e3      	b.n	800bdfe <_vfiprintf_r+0x21a>
 800be36:	46c0      	nop			; (mov r8, r8)
 800be38:	0800d850 	.word	0x0800d850
 800be3c:	0800d870 	.word	0x0800d870
 800be40:	0800d830 	.word	0x0800d830
 800be44:	0800d81c 	.word	0x0800d81c
 800be48:	0800d822 	.word	0x0800d822
 800be4c:	0800d826 	.word	0x0800d826
 800be50:	080099d1 	.word	0x080099d1
 800be54:	0800bbbf 	.word	0x0800bbbf

0800be58 <__swbuf_r>:
 800be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5a:	0005      	movs	r5, r0
 800be5c:	000e      	movs	r6, r1
 800be5e:	0014      	movs	r4, r2
 800be60:	2800      	cmp	r0, #0
 800be62:	d004      	beq.n	800be6e <__swbuf_r+0x16>
 800be64:	6983      	ldr	r3, [r0, #24]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <__swbuf_r+0x16>
 800be6a:	f000 f9f9 	bl	800c260 <__sinit>
 800be6e:	4b22      	ldr	r3, [pc, #136]	; (800bef8 <__swbuf_r+0xa0>)
 800be70:	429c      	cmp	r4, r3
 800be72:	d12e      	bne.n	800bed2 <__swbuf_r+0x7a>
 800be74:	686c      	ldr	r4, [r5, #4]
 800be76:	69a3      	ldr	r3, [r4, #24]
 800be78:	60a3      	str	r3, [r4, #8]
 800be7a:	89a3      	ldrh	r3, [r4, #12]
 800be7c:	071b      	lsls	r3, r3, #28
 800be7e:	d532      	bpl.n	800bee6 <__swbuf_r+0x8e>
 800be80:	6923      	ldr	r3, [r4, #16]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d02f      	beq.n	800bee6 <__swbuf_r+0x8e>
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	6922      	ldr	r2, [r4, #16]
 800be8a:	b2f7      	uxtb	r7, r6
 800be8c:	1a98      	subs	r0, r3, r2
 800be8e:	6963      	ldr	r3, [r4, #20]
 800be90:	b2f6      	uxtb	r6, r6
 800be92:	4283      	cmp	r3, r0
 800be94:	dc05      	bgt.n	800bea2 <__swbuf_r+0x4a>
 800be96:	0021      	movs	r1, r4
 800be98:	0028      	movs	r0, r5
 800be9a:	f000 f93f 	bl	800c11c <_fflush_r>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d127      	bne.n	800bef2 <__swbuf_r+0x9a>
 800bea2:	68a3      	ldr	r3, [r4, #8]
 800bea4:	3001      	adds	r0, #1
 800bea6:	3b01      	subs	r3, #1
 800bea8:	60a3      	str	r3, [r4, #8]
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	6022      	str	r2, [r4, #0]
 800beb0:	701f      	strb	r7, [r3, #0]
 800beb2:	6963      	ldr	r3, [r4, #20]
 800beb4:	4283      	cmp	r3, r0
 800beb6:	d004      	beq.n	800bec2 <__swbuf_r+0x6a>
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	07db      	lsls	r3, r3, #31
 800bebc:	d507      	bpl.n	800bece <__swbuf_r+0x76>
 800bebe:	2e0a      	cmp	r6, #10
 800bec0:	d105      	bne.n	800bece <__swbuf_r+0x76>
 800bec2:	0021      	movs	r1, r4
 800bec4:	0028      	movs	r0, r5
 800bec6:	f000 f929 	bl	800c11c <_fflush_r>
 800beca:	2800      	cmp	r0, #0
 800becc:	d111      	bne.n	800bef2 <__swbuf_r+0x9a>
 800bece:	0030      	movs	r0, r6
 800bed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bed2:	4b0a      	ldr	r3, [pc, #40]	; (800befc <__swbuf_r+0xa4>)
 800bed4:	429c      	cmp	r4, r3
 800bed6:	d101      	bne.n	800bedc <__swbuf_r+0x84>
 800bed8:	68ac      	ldr	r4, [r5, #8]
 800beda:	e7cc      	b.n	800be76 <__swbuf_r+0x1e>
 800bedc:	4b08      	ldr	r3, [pc, #32]	; (800bf00 <__swbuf_r+0xa8>)
 800bede:	429c      	cmp	r4, r3
 800bee0:	d1c9      	bne.n	800be76 <__swbuf_r+0x1e>
 800bee2:	68ec      	ldr	r4, [r5, #12]
 800bee4:	e7c7      	b.n	800be76 <__swbuf_r+0x1e>
 800bee6:	0021      	movs	r1, r4
 800bee8:	0028      	movs	r0, r5
 800beea:	f000 f80b 	bl	800bf04 <__swsetup_r>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d0c9      	beq.n	800be86 <__swbuf_r+0x2e>
 800bef2:	2601      	movs	r6, #1
 800bef4:	4276      	negs	r6, r6
 800bef6:	e7ea      	b.n	800bece <__swbuf_r+0x76>
 800bef8:	0800d850 	.word	0x0800d850
 800befc:	0800d870 	.word	0x0800d870
 800bf00:	0800d830 	.word	0x0800d830

0800bf04 <__swsetup_r>:
 800bf04:	4b37      	ldr	r3, [pc, #220]	; (800bfe4 <__swsetup_r+0xe0>)
 800bf06:	b570      	push	{r4, r5, r6, lr}
 800bf08:	681d      	ldr	r5, [r3, #0]
 800bf0a:	0006      	movs	r6, r0
 800bf0c:	000c      	movs	r4, r1
 800bf0e:	2d00      	cmp	r5, #0
 800bf10:	d005      	beq.n	800bf1e <__swsetup_r+0x1a>
 800bf12:	69ab      	ldr	r3, [r5, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d102      	bne.n	800bf1e <__swsetup_r+0x1a>
 800bf18:	0028      	movs	r0, r5
 800bf1a:	f000 f9a1 	bl	800c260 <__sinit>
 800bf1e:	4b32      	ldr	r3, [pc, #200]	; (800bfe8 <__swsetup_r+0xe4>)
 800bf20:	429c      	cmp	r4, r3
 800bf22:	d10f      	bne.n	800bf44 <__swsetup_r+0x40>
 800bf24:	686c      	ldr	r4, [r5, #4]
 800bf26:	230c      	movs	r3, #12
 800bf28:	5ee2      	ldrsh	r2, [r4, r3]
 800bf2a:	b293      	uxth	r3, r2
 800bf2c:	0711      	lsls	r1, r2, #28
 800bf2e:	d42d      	bmi.n	800bf8c <__swsetup_r+0x88>
 800bf30:	06d9      	lsls	r1, r3, #27
 800bf32:	d411      	bmi.n	800bf58 <__swsetup_r+0x54>
 800bf34:	2309      	movs	r3, #9
 800bf36:	2001      	movs	r0, #1
 800bf38:	6033      	str	r3, [r6, #0]
 800bf3a:	3337      	adds	r3, #55	; 0x37
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	81a3      	strh	r3, [r4, #12]
 800bf40:	4240      	negs	r0, r0
 800bf42:	bd70      	pop	{r4, r5, r6, pc}
 800bf44:	4b29      	ldr	r3, [pc, #164]	; (800bfec <__swsetup_r+0xe8>)
 800bf46:	429c      	cmp	r4, r3
 800bf48:	d101      	bne.n	800bf4e <__swsetup_r+0x4a>
 800bf4a:	68ac      	ldr	r4, [r5, #8]
 800bf4c:	e7eb      	b.n	800bf26 <__swsetup_r+0x22>
 800bf4e:	4b28      	ldr	r3, [pc, #160]	; (800bff0 <__swsetup_r+0xec>)
 800bf50:	429c      	cmp	r4, r3
 800bf52:	d1e8      	bne.n	800bf26 <__swsetup_r+0x22>
 800bf54:	68ec      	ldr	r4, [r5, #12]
 800bf56:	e7e6      	b.n	800bf26 <__swsetup_r+0x22>
 800bf58:	075b      	lsls	r3, r3, #29
 800bf5a:	d513      	bpl.n	800bf84 <__swsetup_r+0x80>
 800bf5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf5e:	2900      	cmp	r1, #0
 800bf60:	d008      	beq.n	800bf74 <__swsetup_r+0x70>
 800bf62:	0023      	movs	r3, r4
 800bf64:	3344      	adds	r3, #68	; 0x44
 800bf66:	4299      	cmp	r1, r3
 800bf68:	d002      	beq.n	800bf70 <__swsetup_r+0x6c>
 800bf6a:	0030      	movs	r0, r6
 800bf6c:	f7fd fba4 	bl	80096b8 <_free_r>
 800bf70:	2300      	movs	r3, #0
 800bf72:	6363      	str	r3, [r4, #52]	; 0x34
 800bf74:	2224      	movs	r2, #36	; 0x24
 800bf76:	89a3      	ldrh	r3, [r4, #12]
 800bf78:	4393      	bics	r3, r2
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	6063      	str	r3, [r4, #4]
 800bf80:	6923      	ldr	r3, [r4, #16]
 800bf82:	6023      	str	r3, [r4, #0]
 800bf84:	2308      	movs	r3, #8
 800bf86:	89a2      	ldrh	r2, [r4, #12]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	81a3      	strh	r3, [r4, #12]
 800bf8c:	6923      	ldr	r3, [r4, #16]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10b      	bne.n	800bfaa <__swsetup_r+0xa6>
 800bf92:	21a0      	movs	r1, #160	; 0xa0
 800bf94:	2280      	movs	r2, #128	; 0x80
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	0089      	lsls	r1, r1, #2
 800bf9a:	0092      	lsls	r2, r2, #2
 800bf9c:	400b      	ands	r3, r1
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d003      	beq.n	800bfaa <__swsetup_r+0xa6>
 800bfa2:	0021      	movs	r1, r4
 800bfa4:	0030      	movs	r0, r6
 800bfa6:	f000 fa27 	bl	800c3f8 <__smakebuf_r>
 800bfaa:	220c      	movs	r2, #12
 800bfac:	5ea3      	ldrsh	r3, [r4, r2]
 800bfae:	2001      	movs	r0, #1
 800bfb0:	001a      	movs	r2, r3
 800bfb2:	b299      	uxth	r1, r3
 800bfb4:	4002      	ands	r2, r0
 800bfb6:	4203      	tst	r3, r0
 800bfb8:	d00f      	beq.n	800bfda <__swsetup_r+0xd6>
 800bfba:	2200      	movs	r2, #0
 800bfbc:	60a2      	str	r2, [r4, #8]
 800bfbe:	6962      	ldr	r2, [r4, #20]
 800bfc0:	4252      	negs	r2, r2
 800bfc2:	61a2      	str	r2, [r4, #24]
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	6922      	ldr	r2, [r4, #16]
 800bfc8:	4282      	cmp	r2, r0
 800bfca:	d1ba      	bne.n	800bf42 <__swsetup_r+0x3e>
 800bfcc:	060a      	lsls	r2, r1, #24
 800bfce:	d5b8      	bpl.n	800bf42 <__swsetup_r+0x3e>
 800bfd0:	2240      	movs	r2, #64	; 0x40
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	81a3      	strh	r3, [r4, #12]
 800bfd6:	3801      	subs	r0, #1
 800bfd8:	e7b3      	b.n	800bf42 <__swsetup_r+0x3e>
 800bfda:	0788      	lsls	r0, r1, #30
 800bfdc:	d400      	bmi.n	800bfe0 <__swsetup_r+0xdc>
 800bfde:	6962      	ldr	r2, [r4, #20]
 800bfe0:	60a2      	str	r2, [r4, #8]
 800bfe2:	e7ef      	b.n	800bfc4 <__swsetup_r+0xc0>
 800bfe4:	200000bc 	.word	0x200000bc
 800bfe8:	0800d850 	.word	0x0800d850
 800bfec:	0800d870 	.word	0x0800d870
 800bff0:	0800d830 	.word	0x0800d830

0800bff4 <abort>:
 800bff4:	2006      	movs	r0, #6
 800bff6:	b510      	push	{r4, lr}
 800bff8:	f000 fac0 	bl	800c57c <raise>
 800bffc:	2001      	movs	r0, #1
 800bffe:	f7fb fe83 	bl	8007d08 <_exit>
	...

0800c004 <__sflush_r>:
 800c004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c006:	898b      	ldrh	r3, [r1, #12]
 800c008:	0005      	movs	r5, r0
 800c00a:	000c      	movs	r4, r1
 800c00c:	071a      	lsls	r2, r3, #28
 800c00e:	d45f      	bmi.n	800c0d0 <__sflush_r+0xcc>
 800c010:	684a      	ldr	r2, [r1, #4]
 800c012:	2a00      	cmp	r2, #0
 800c014:	dc04      	bgt.n	800c020 <__sflush_r+0x1c>
 800c016:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c018:	2a00      	cmp	r2, #0
 800c01a:	dc01      	bgt.n	800c020 <__sflush_r+0x1c>
 800c01c:	2000      	movs	r0, #0
 800c01e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c020:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c022:	2f00      	cmp	r7, #0
 800c024:	d0fa      	beq.n	800c01c <__sflush_r+0x18>
 800c026:	2200      	movs	r2, #0
 800c028:	2180      	movs	r1, #128	; 0x80
 800c02a:	682e      	ldr	r6, [r5, #0]
 800c02c:	602a      	str	r2, [r5, #0]
 800c02e:	001a      	movs	r2, r3
 800c030:	0149      	lsls	r1, r1, #5
 800c032:	400a      	ands	r2, r1
 800c034:	420b      	tst	r3, r1
 800c036:	d034      	beq.n	800c0a2 <__sflush_r+0x9e>
 800c038:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c03a:	89a3      	ldrh	r3, [r4, #12]
 800c03c:	075b      	lsls	r3, r3, #29
 800c03e:	d506      	bpl.n	800c04e <__sflush_r+0x4a>
 800c040:	6863      	ldr	r3, [r4, #4]
 800c042:	1ac0      	subs	r0, r0, r3
 800c044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <__sflush_r+0x4a>
 800c04a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c04c:	1ac0      	subs	r0, r0, r3
 800c04e:	0002      	movs	r2, r0
 800c050:	6a21      	ldr	r1, [r4, #32]
 800c052:	2300      	movs	r3, #0
 800c054:	0028      	movs	r0, r5
 800c056:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c058:	47b8      	blx	r7
 800c05a:	89a1      	ldrh	r1, [r4, #12]
 800c05c:	1c43      	adds	r3, r0, #1
 800c05e:	d106      	bne.n	800c06e <__sflush_r+0x6a>
 800c060:	682b      	ldr	r3, [r5, #0]
 800c062:	2b1d      	cmp	r3, #29
 800c064:	d831      	bhi.n	800c0ca <__sflush_r+0xc6>
 800c066:	4a2c      	ldr	r2, [pc, #176]	; (800c118 <__sflush_r+0x114>)
 800c068:	40da      	lsrs	r2, r3
 800c06a:	07d3      	lsls	r3, r2, #31
 800c06c:	d52d      	bpl.n	800c0ca <__sflush_r+0xc6>
 800c06e:	2300      	movs	r3, #0
 800c070:	6063      	str	r3, [r4, #4]
 800c072:	6923      	ldr	r3, [r4, #16]
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	04cb      	lsls	r3, r1, #19
 800c078:	d505      	bpl.n	800c086 <__sflush_r+0x82>
 800c07a:	1c43      	adds	r3, r0, #1
 800c07c:	d102      	bne.n	800c084 <__sflush_r+0x80>
 800c07e:	682b      	ldr	r3, [r5, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d100      	bne.n	800c086 <__sflush_r+0x82>
 800c084:	6560      	str	r0, [r4, #84]	; 0x54
 800c086:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c088:	602e      	str	r6, [r5, #0]
 800c08a:	2900      	cmp	r1, #0
 800c08c:	d0c6      	beq.n	800c01c <__sflush_r+0x18>
 800c08e:	0023      	movs	r3, r4
 800c090:	3344      	adds	r3, #68	; 0x44
 800c092:	4299      	cmp	r1, r3
 800c094:	d002      	beq.n	800c09c <__sflush_r+0x98>
 800c096:	0028      	movs	r0, r5
 800c098:	f7fd fb0e 	bl	80096b8 <_free_r>
 800c09c:	2000      	movs	r0, #0
 800c09e:	6360      	str	r0, [r4, #52]	; 0x34
 800c0a0:	e7bd      	b.n	800c01e <__sflush_r+0x1a>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	0028      	movs	r0, r5
 800c0a6:	6a21      	ldr	r1, [r4, #32]
 800c0a8:	47b8      	blx	r7
 800c0aa:	1c43      	adds	r3, r0, #1
 800c0ac:	d1c5      	bne.n	800c03a <__sflush_r+0x36>
 800c0ae:	682b      	ldr	r3, [r5, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0c2      	beq.n	800c03a <__sflush_r+0x36>
 800c0b4:	2b1d      	cmp	r3, #29
 800c0b6:	d001      	beq.n	800c0bc <__sflush_r+0xb8>
 800c0b8:	2b16      	cmp	r3, #22
 800c0ba:	d101      	bne.n	800c0c0 <__sflush_r+0xbc>
 800c0bc:	602e      	str	r6, [r5, #0]
 800c0be:	e7ad      	b.n	800c01c <__sflush_r+0x18>
 800c0c0:	2340      	movs	r3, #64	; 0x40
 800c0c2:	89a2      	ldrh	r2, [r4, #12]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	81a3      	strh	r3, [r4, #12]
 800c0c8:	e7a9      	b.n	800c01e <__sflush_r+0x1a>
 800c0ca:	2340      	movs	r3, #64	; 0x40
 800c0cc:	430b      	orrs	r3, r1
 800c0ce:	e7fa      	b.n	800c0c6 <__sflush_r+0xc2>
 800c0d0:	690f      	ldr	r7, [r1, #16]
 800c0d2:	2f00      	cmp	r7, #0
 800c0d4:	d0a2      	beq.n	800c01c <__sflush_r+0x18>
 800c0d6:	680a      	ldr	r2, [r1, #0]
 800c0d8:	600f      	str	r7, [r1, #0]
 800c0da:	1bd2      	subs	r2, r2, r7
 800c0dc:	9201      	str	r2, [sp, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	079b      	lsls	r3, r3, #30
 800c0e2:	d100      	bne.n	800c0e6 <__sflush_r+0xe2>
 800c0e4:	694a      	ldr	r2, [r1, #20]
 800c0e6:	60a2      	str	r2, [r4, #8]
 800c0e8:	9b01      	ldr	r3, [sp, #4]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	dc00      	bgt.n	800c0f0 <__sflush_r+0xec>
 800c0ee:	e795      	b.n	800c01c <__sflush_r+0x18>
 800c0f0:	003a      	movs	r2, r7
 800c0f2:	0028      	movs	r0, r5
 800c0f4:	9b01      	ldr	r3, [sp, #4]
 800c0f6:	6a21      	ldr	r1, [r4, #32]
 800c0f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c0fa:	47b0      	blx	r6
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	dc06      	bgt.n	800c10e <__sflush_r+0x10a>
 800c100:	2340      	movs	r3, #64	; 0x40
 800c102:	2001      	movs	r0, #1
 800c104:	89a2      	ldrh	r2, [r4, #12]
 800c106:	4240      	negs	r0, r0
 800c108:	4313      	orrs	r3, r2
 800c10a:	81a3      	strh	r3, [r4, #12]
 800c10c:	e787      	b.n	800c01e <__sflush_r+0x1a>
 800c10e:	9b01      	ldr	r3, [sp, #4]
 800c110:	183f      	adds	r7, r7, r0
 800c112:	1a1b      	subs	r3, r3, r0
 800c114:	9301      	str	r3, [sp, #4]
 800c116:	e7e7      	b.n	800c0e8 <__sflush_r+0xe4>
 800c118:	20400001 	.word	0x20400001

0800c11c <_fflush_r>:
 800c11c:	690b      	ldr	r3, [r1, #16]
 800c11e:	b570      	push	{r4, r5, r6, lr}
 800c120:	0005      	movs	r5, r0
 800c122:	000c      	movs	r4, r1
 800c124:	2b00      	cmp	r3, #0
 800c126:	d102      	bne.n	800c12e <_fflush_r+0x12>
 800c128:	2500      	movs	r5, #0
 800c12a:	0028      	movs	r0, r5
 800c12c:	bd70      	pop	{r4, r5, r6, pc}
 800c12e:	2800      	cmp	r0, #0
 800c130:	d004      	beq.n	800c13c <_fflush_r+0x20>
 800c132:	6983      	ldr	r3, [r0, #24]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d101      	bne.n	800c13c <_fflush_r+0x20>
 800c138:	f000 f892 	bl	800c260 <__sinit>
 800c13c:	4b14      	ldr	r3, [pc, #80]	; (800c190 <_fflush_r+0x74>)
 800c13e:	429c      	cmp	r4, r3
 800c140:	d11b      	bne.n	800c17a <_fflush_r+0x5e>
 800c142:	686c      	ldr	r4, [r5, #4]
 800c144:	220c      	movs	r2, #12
 800c146:	5ea3      	ldrsh	r3, [r4, r2]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d0ed      	beq.n	800c128 <_fflush_r+0xc>
 800c14c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c14e:	07d2      	lsls	r2, r2, #31
 800c150:	d404      	bmi.n	800c15c <_fflush_r+0x40>
 800c152:	059b      	lsls	r3, r3, #22
 800c154:	d402      	bmi.n	800c15c <_fflush_r+0x40>
 800c156:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c158:	f000 f923 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800c15c:	0028      	movs	r0, r5
 800c15e:	0021      	movs	r1, r4
 800c160:	f7ff ff50 	bl	800c004 <__sflush_r>
 800c164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c166:	0005      	movs	r5, r0
 800c168:	07db      	lsls	r3, r3, #31
 800c16a:	d4de      	bmi.n	800c12a <_fflush_r+0xe>
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	059b      	lsls	r3, r3, #22
 800c170:	d4db      	bmi.n	800c12a <_fflush_r+0xe>
 800c172:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c174:	f000 f916 	bl	800c3a4 <__retarget_lock_release_recursive>
 800c178:	e7d7      	b.n	800c12a <_fflush_r+0xe>
 800c17a:	4b06      	ldr	r3, [pc, #24]	; (800c194 <_fflush_r+0x78>)
 800c17c:	429c      	cmp	r4, r3
 800c17e:	d101      	bne.n	800c184 <_fflush_r+0x68>
 800c180:	68ac      	ldr	r4, [r5, #8]
 800c182:	e7df      	b.n	800c144 <_fflush_r+0x28>
 800c184:	4b04      	ldr	r3, [pc, #16]	; (800c198 <_fflush_r+0x7c>)
 800c186:	429c      	cmp	r4, r3
 800c188:	d1dc      	bne.n	800c144 <_fflush_r+0x28>
 800c18a:	68ec      	ldr	r4, [r5, #12]
 800c18c:	e7da      	b.n	800c144 <_fflush_r+0x28>
 800c18e:	46c0      	nop			; (mov r8, r8)
 800c190:	0800d850 	.word	0x0800d850
 800c194:	0800d870 	.word	0x0800d870
 800c198:	0800d830 	.word	0x0800d830

0800c19c <std>:
 800c19c:	2300      	movs	r3, #0
 800c19e:	b510      	push	{r4, lr}
 800c1a0:	0004      	movs	r4, r0
 800c1a2:	6003      	str	r3, [r0, #0]
 800c1a4:	6043      	str	r3, [r0, #4]
 800c1a6:	6083      	str	r3, [r0, #8]
 800c1a8:	8181      	strh	r1, [r0, #12]
 800c1aa:	6643      	str	r3, [r0, #100]	; 0x64
 800c1ac:	0019      	movs	r1, r3
 800c1ae:	81c2      	strh	r2, [r0, #14]
 800c1b0:	6103      	str	r3, [r0, #16]
 800c1b2:	6143      	str	r3, [r0, #20]
 800c1b4:	6183      	str	r3, [r0, #24]
 800c1b6:	2208      	movs	r2, #8
 800c1b8:	305c      	adds	r0, #92	; 0x5c
 800c1ba:	f7fd fa74 	bl	80096a6 <memset>
 800c1be:	4b05      	ldr	r3, [pc, #20]	; (800c1d4 <std+0x38>)
 800c1c0:	6224      	str	r4, [r4, #32]
 800c1c2:	6263      	str	r3, [r4, #36]	; 0x24
 800c1c4:	4b04      	ldr	r3, [pc, #16]	; (800c1d8 <std+0x3c>)
 800c1c6:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1c8:	4b04      	ldr	r3, [pc, #16]	; (800c1dc <std+0x40>)
 800c1ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1cc:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <std+0x44>)
 800c1ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c1d0:	bd10      	pop	{r4, pc}
 800c1d2:	46c0      	nop			; (mov r8, r8)
 800c1d4:	0800c5bd 	.word	0x0800c5bd
 800c1d8:	0800c5e5 	.word	0x0800c5e5
 800c1dc:	0800c61d 	.word	0x0800c61d
 800c1e0:	0800c649 	.word	0x0800c649

0800c1e4 <_cleanup_r>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	4902      	ldr	r1, [pc, #8]	; (800c1f0 <_cleanup_r+0xc>)
 800c1e8:	f000 f8ba 	bl	800c360 <_fwalk_reent>
 800c1ec:	bd10      	pop	{r4, pc}
 800c1ee:	46c0      	nop			; (mov r8, r8)
 800c1f0:	0800c11d 	.word	0x0800c11d

0800c1f4 <__sfmoreglue>:
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	2568      	movs	r5, #104	; 0x68
 800c1f8:	1e4a      	subs	r2, r1, #1
 800c1fa:	4355      	muls	r5, r2
 800c1fc:	000e      	movs	r6, r1
 800c1fe:	0029      	movs	r1, r5
 800c200:	3174      	adds	r1, #116	; 0x74
 800c202:	f7fd fac5 	bl	8009790 <_malloc_r>
 800c206:	1e04      	subs	r4, r0, #0
 800c208:	d008      	beq.n	800c21c <__sfmoreglue+0x28>
 800c20a:	2100      	movs	r1, #0
 800c20c:	002a      	movs	r2, r5
 800c20e:	6001      	str	r1, [r0, #0]
 800c210:	6046      	str	r6, [r0, #4]
 800c212:	300c      	adds	r0, #12
 800c214:	60a0      	str	r0, [r4, #8]
 800c216:	3268      	adds	r2, #104	; 0x68
 800c218:	f7fd fa45 	bl	80096a6 <memset>
 800c21c:	0020      	movs	r0, r4
 800c21e:	bd70      	pop	{r4, r5, r6, pc}

0800c220 <__sfp_lock_acquire>:
 800c220:	b510      	push	{r4, lr}
 800c222:	4802      	ldr	r0, [pc, #8]	; (800c22c <__sfp_lock_acquire+0xc>)
 800c224:	f000 f8bd 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800c228:	bd10      	pop	{r4, pc}
 800c22a:	46c0      	nop			; (mov r8, r8)
 800c22c:	200011bd 	.word	0x200011bd

0800c230 <__sfp_lock_release>:
 800c230:	b510      	push	{r4, lr}
 800c232:	4802      	ldr	r0, [pc, #8]	; (800c23c <__sfp_lock_release+0xc>)
 800c234:	f000 f8b6 	bl	800c3a4 <__retarget_lock_release_recursive>
 800c238:	bd10      	pop	{r4, pc}
 800c23a:	46c0      	nop			; (mov r8, r8)
 800c23c:	200011bd 	.word	0x200011bd

0800c240 <__sinit_lock_acquire>:
 800c240:	b510      	push	{r4, lr}
 800c242:	4802      	ldr	r0, [pc, #8]	; (800c24c <__sinit_lock_acquire+0xc>)
 800c244:	f000 f8ad 	bl	800c3a2 <__retarget_lock_acquire_recursive>
 800c248:	bd10      	pop	{r4, pc}
 800c24a:	46c0      	nop			; (mov r8, r8)
 800c24c:	200011be 	.word	0x200011be

0800c250 <__sinit_lock_release>:
 800c250:	b510      	push	{r4, lr}
 800c252:	4802      	ldr	r0, [pc, #8]	; (800c25c <__sinit_lock_release+0xc>)
 800c254:	f000 f8a6 	bl	800c3a4 <__retarget_lock_release_recursive>
 800c258:	bd10      	pop	{r4, pc}
 800c25a:	46c0      	nop			; (mov r8, r8)
 800c25c:	200011be 	.word	0x200011be

0800c260 <__sinit>:
 800c260:	b513      	push	{r0, r1, r4, lr}
 800c262:	0004      	movs	r4, r0
 800c264:	f7ff ffec 	bl	800c240 <__sinit_lock_acquire>
 800c268:	69a3      	ldr	r3, [r4, #24]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d002      	beq.n	800c274 <__sinit+0x14>
 800c26e:	f7ff ffef 	bl	800c250 <__sinit_lock_release>
 800c272:	bd13      	pop	{r0, r1, r4, pc}
 800c274:	64a3      	str	r3, [r4, #72]	; 0x48
 800c276:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c278:	6523      	str	r3, [r4, #80]	; 0x50
 800c27a:	4b13      	ldr	r3, [pc, #76]	; (800c2c8 <__sinit+0x68>)
 800c27c:	4a13      	ldr	r2, [pc, #76]	; (800c2cc <__sinit+0x6c>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	62a2      	str	r2, [r4, #40]	; 0x28
 800c282:	9301      	str	r3, [sp, #4]
 800c284:	42a3      	cmp	r3, r4
 800c286:	d101      	bne.n	800c28c <__sinit+0x2c>
 800c288:	2301      	movs	r3, #1
 800c28a:	61a3      	str	r3, [r4, #24]
 800c28c:	0020      	movs	r0, r4
 800c28e:	f000 f81f 	bl	800c2d0 <__sfp>
 800c292:	6060      	str	r0, [r4, #4]
 800c294:	0020      	movs	r0, r4
 800c296:	f000 f81b 	bl	800c2d0 <__sfp>
 800c29a:	60a0      	str	r0, [r4, #8]
 800c29c:	0020      	movs	r0, r4
 800c29e:	f000 f817 	bl	800c2d0 <__sfp>
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	2104      	movs	r1, #4
 800c2a6:	60e0      	str	r0, [r4, #12]
 800c2a8:	6860      	ldr	r0, [r4, #4]
 800c2aa:	f7ff ff77 	bl	800c19c <std>
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	2109      	movs	r1, #9
 800c2b2:	68a0      	ldr	r0, [r4, #8]
 800c2b4:	f7ff ff72 	bl	800c19c <std>
 800c2b8:	2202      	movs	r2, #2
 800c2ba:	2112      	movs	r1, #18
 800c2bc:	68e0      	ldr	r0, [r4, #12]
 800c2be:	f7ff ff6d 	bl	800c19c <std>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	61a3      	str	r3, [r4, #24]
 800c2c6:	e7d2      	b.n	800c26e <__sinit+0xe>
 800c2c8:	0800d4b8 	.word	0x0800d4b8
 800c2cc:	0800c1e5 	.word	0x0800c1e5

0800c2d0 <__sfp>:
 800c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d2:	0007      	movs	r7, r0
 800c2d4:	f7ff ffa4 	bl	800c220 <__sfp_lock_acquire>
 800c2d8:	4b1f      	ldr	r3, [pc, #124]	; (800c358 <__sfp+0x88>)
 800c2da:	681e      	ldr	r6, [r3, #0]
 800c2dc:	69b3      	ldr	r3, [r6, #24]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d102      	bne.n	800c2e8 <__sfp+0x18>
 800c2e2:	0030      	movs	r0, r6
 800c2e4:	f7ff ffbc 	bl	800c260 <__sinit>
 800c2e8:	3648      	adds	r6, #72	; 0x48
 800c2ea:	68b4      	ldr	r4, [r6, #8]
 800c2ec:	6873      	ldr	r3, [r6, #4]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	d504      	bpl.n	800c2fc <__sfp+0x2c>
 800c2f2:	6833      	ldr	r3, [r6, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d022      	beq.n	800c33e <__sfp+0x6e>
 800c2f8:	6836      	ldr	r6, [r6, #0]
 800c2fa:	e7f6      	b.n	800c2ea <__sfp+0x1a>
 800c2fc:	220c      	movs	r2, #12
 800c2fe:	5ea5      	ldrsh	r5, [r4, r2]
 800c300:	2d00      	cmp	r5, #0
 800c302:	d11a      	bne.n	800c33a <__sfp+0x6a>
 800c304:	0020      	movs	r0, r4
 800c306:	4b15      	ldr	r3, [pc, #84]	; (800c35c <__sfp+0x8c>)
 800c308:	3058      	adds	r0, #88	; 0x58
 800c30a:	60e3      	str	r3, [r4, #12]
 800c30c:	6665      	str	r5, [r4, #100]	; 0x64
 800c30e:	f000 f847 	bl	800c3a0 <__retarget_lock_init_recursive>
 800c312:	f7ff ff8d 	bl	800c230 <__sfp_lock_release>
 800c316:	0020      	movs	r0, r4
 800c318:	2208      	movs	r2, #8
 800c31a:	0029      	movs	r1, r5
 800c31c:	6025      	str	r5, [r4, #0]
 800c31e:	60a5      	str	r5, [r4, #8]
 800c320:	6065      	str	r5, [r4, #4]
 800c322:	6125      	str	r5, [r4, #16]
 800c324:	6165      	str	r5, [r4, #20]
 800c326:	61a5      	str	r5, [r4, #24]
 800c328:	305c      	adds	r0, #92	; 0x5c
 800c32a:	f7fd f9bc 	bl	80096a6 <memset>
 800c32e:	6365      	str	r5, [r4, #52]	; 0x34
 800c330:	63a5      	str	r5, [r4, #56]	; 0x38
 800c332:	64a5      	str	r5, [r4, #72]	; 0x48
 800c334:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c336:	0020      	movs	r0, r4
 800c338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c33a:	3468      	adds	r4, #104	; 0x68
 800c33c:	e7d7      	b.n	800c2ee <__sfp+0x1e>
 800c33e:	2104      	movs	r1, #4
 800c340:	0038      	movs	r0, r7
 800c342:	f7ff ff57 	bl	800c1f4 <__sfmoreglue>
 800c346:	1e04      	subs	r4, r0, #0
 800c348:	6030      	str	r0, [r6, #0]
 800c34a:	d1d5      	bne.n	800c2f8 <__sfp+0x28>
 800c34c:	f7ff ff70 	bl	800c230 <__sfp_lock_release>
 800c350:	230c      	movs	r3, #12
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	e7ef      	b.n	800c336 <__sfp+0x66>
 800c356:	46c0      	nop			; (mov r8, r8)
 800c358:	0800d4b8 	.word	0x0800d4b8
 800c35c:	ffff0001 	.word	0xffff0001

0800c360 <_fwalk_reent>:
 800c360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c362:	0004      	movs	r4, r0
 800c364:	0006      	movs	r6, r0
 800c366:	2700      	movs	r7, #0
 800c368:	9101      	str	r1, [sp, #4]
 800c36a:	3448      	adds	r4, #72	; 0x48
 800c36c:	6863      	ldr	r3, [r4, #4]
 800c36e:	68a5      	ldr	r5, [r4, #8]
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	9b00      	ldr	r3, [sp, #0]
 800c374:	3b01      	subs	r3, #1
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	d504      	bpl.n	800c384 <_fwalk_reent+0x24>
 800c37a:	6824      	ldr	r4, [r4, #0]
 800c37c:	2c00      	cmp	r4, #0
 800c37e:	d1f5      	bne.n	800c36c <_fwalk_reent+0xc>
 800c380:	0038      	movs	r0, r7
 800c382:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c384:	89ab      	ldrh	r3, [r5, #12]
 800c386:	2b01      	cmp	r3, #1
 800c388:	d908      	bls.n	800c39c <_fwalk_reent+0x3c>
 800c38a:	220e      	movs	r2, #14
 800c38c:	5eab      	ldrsh	r3, [r5, r2]
 800c38e:	3301      	adds	r3, #1
 800c390:	d004      	beq.n	800c39c <_fwalk_reent+0x3c>
 800c392:	0029      	movs	r1, r5
 800c394:	0030      	movs	r0, r6
 800c396:	9b01      	ldr	r3, [sp, #4]
 800c398:	4798      	blx	r3
 800c39a:	4307      	orrs	r7, r0
 800c39c:	3568      	adds	r5, #104	; 0x68
 800c39e:	e7e8      	b.n	800c372 <_fwalk_reent+0x12>

0800c3a0 <__retarget_lock_init_recursive>:
 800c3a0:	4770      	bx	lr

0800c3a2 <__retarget_lock_acquire_recursive>:
 800c3a2:	4770      	bx	lr

0800c3a4 <__retarget_lock_release_recursive>:
 800c3a4:	4770      	bx	lr
	...

0800c3a8 <__swhatbuf_r>:
 800c3a8:	b570      	push	{r4, r5, r6, lr}
 800c3aa:	000e      	movs	r6, r1
 800c3ac:	001d      	movs	r5, r3
 800c3ae:	230e      	movs	r3, #14
 800c3b0:	5ec9      	ldrsh	r1, [r1, r3]
 800c3b2:	0014      	movs	r4, r2
 800c3b4:	b096      	sub	sp, #88	; 0x58
 800c3b6:	2900      	cmp	r1, #0
 800c3b8:	da08      	bge.n	800c3cc <__swhatbuf_r+0x24>
 800c3ba:	220c      	movs	r2, #12
 800c3bc:	5eb3      	ldrsh	r3, [r6, r2]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	602a      	str	r2, [r5, #0]
 800c3c2:	061b      	lsls	r3, r3, #24
 800c3c4:	d411      	bmi.n	800c3ea <__swhatbuf_r+0x42>
 800c3c6:	2380      	movs	r3, #128	; 0x80
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	e00f      	b.n	800c3ec <__swhatbuf_r+0x44>
 800c3cc:	466a      	mov	r2, sp
 800c3ce:	f000 f975 	bl	800c6bc <_fstat_r>
 800c3d2:	2800      	cmp	r0, #0
 800c3d4:	dbf1      	blt.n	800c3ba <__swhatbuf_r+0x12>
 800c3d6:	23f0      	movs	r3, #240	; 0xf0
 800c3d8:	9901      	ldr	r1, [sp, #4]
 800c3da:	021b      	lsls	r3, r3, #8
 800c3dc:	4019      	ands	r1, r3
 800c3de:	4b05      	ldr	r3, [pc, #20]	; (800c3f4 <__swhatbuf_r+0x4c>)
 800c3e0:	18c9      	adds	r1, r1, r3
 800c3e2:	424b      	negs	r3, r1
 800c3e4:	4159      	adcs	r1, r3
 800c3e6:	6029      	str	r1, [r5, #0]
 800c3e8:	e7ed      	b.n	800c3c6 <__swhatbuf_r+0x1e>
 800c3ea:	2340      	movs	r3, #64	; 0x40
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	6023      	str	r3, [r4, #0]
 800c3f0:	b016      	add	sp, #88	; 0x58
 800c3f2:	bd70      	pop	{r4, r5, r6, pc}
 800c3f4:	ffffe000 	.word	0xffffe000

0800c3f8 <__smakebuf_r>:
 800c3f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3fa:	2602      	movs	r6, #2
 800c3fc:	898b      	ldrh	r3, [r1, #12]
 800c3fe:	0005      	movs	r5, r0
 800c400:	000c      	movs	r4, r1
 800c402:	4233      	tst	r3, r6
 800c404:	d006      	beq.n	800c414 <__smakebuf_r+0x1c>
 800c406:	0023      	movs	r3, r4
 800c408:	3347      	adds	r3, #71	; 0x47
 800c40a:	6023      	str	r3, [r4, #0]
 800c40c:	6123      	str	r3, [r4, #16]
 800c40e:	2301      	movs	r3, #1
 800c410:	6163      	str	r3, [r4, #20]
 800c412:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c414:	466a      	mov	r2, sp
 800c416:	ab01      	add	r3, sp, #4
 800c418:	f7ff ffc6 	bl	800c3a8 <__swhatbuf_r>
 800c41c:	9900      	ldr	r1, [sp, #0]
 800c41e:	0007      	movs	r7, r0
 800c420:	0028      	movs	r0, r5
 800c422:	f7fd f9b5 	bl	8009790 <_malloc_r>
 800c426:	2800      	cmp	r0, #0
 800c428:	d108      	bne.n	800c43c <__smakebuf_r+0x44>
 800c42a:	220c      	movs	r2, #12
 800c42c:	5ea3      	ldrsh	r3, [r4, r2]
 800c42e:	059a      	lsls	r2, r3, #22
 800c430:	d4ef      	bmi.n	800c412 <__smakebuf_r+0x1a>
 800c432:	2203      	movs	r2, #3
 800c434:	4393      	bics	r3, r2
 800c436:	431e      	orrs	r6, r3
 800c438:	81a6      	strh	r6, [r4, #12]
 800c43a:	e7e4      	b.n	800c406 <__smakebuf_r+0xe>
 800c43c:	4b0f      	ldr	r3, [pc, #60]	; (800c47c <__smakebuf_r+0x84>)
 800c43e:	62ab      	str	r3, [r5, #40]	; 0x28
 800c440:	2380      	movs	r3, #128	; 0x80
 800c442:	89a2      	ldrh	r2, [r4, #12]
 800c444:	6020      	str	r0, [r4, #0]
 800c446:	4313      	orrs	r3, r2
 800c448:	81a3      	strh	r3, [r4, #12]
 800c44a:	9b00      	ldr	r3, [sp, #0]
 800c44c:	6120      	str	r0, [r4, #16]
 800c44e:	6163      	str	r3, [r4, #20]
 800c450:	9b01      	ldr	r3, [sp, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00d      	beq.n	800c472 <__smakebuf_r+0x7a>
 800c456:	0028      	movs	r0, r5
 800c458:	230e      	movs	r3, #14
 800c45a:	5ee1      	ldrsh	r1, [r4, r3]
 800c45c:	f000 f940 	bl	800c6e0 <_isatty_r>
 800c460:	2800      	cmp	r0, #0
 800c462:	d006      	beq.n	800c472 <__smakebuf_r+0x7a>
 800c464:	2203      	movs	r2, #3
 800c466:	89a3      	ldrh	r3, [r4, #12]
 800c468:	4393      	bics	r3, r2
 800c46a:	001a      	movs	r2, r3
 800c46c:	2301      	movs	r3, #1
 800c46e:	4313      	orrs	r3, r2
 800c470:	81a3      	strh	r3, [r4, #12]
 800c472:	89a0      	ldrh	r0, [r4, #12]
 800c474:	4307      	orrs	r7, r0
 800c476:	81a7      	strh	r7, [r4, #12]
 800c478:	e7cb      	b.n	800c412 <__smakebuf_r+0x1a>
 800c47a:	46c0      	nop			; (mov r8, r8)
 800c47c:	0800c1e5 	.word	0x0800c1e5

0800c480 <__ascii_mbtowc>:
 800c480:	b082      	sub	sp, #8
 800c482:	2900      	cmp	r1, #0
 800c484:	d100      	bne.n	800c488 <__ascii_mbtowc+0x8>
 800c486:	a901      	add	r1, sp, #4
 800c488:	1e10      	subs	r0, r2, #0
 800c48a:	d006      	beq.n	800c49a <__ascii_mbtowc+0x1a>
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d006      	beq.n	800c49e <__ascii_mbtowc+0x1e>
 800c490:	7813      	ldrb	r3, [r2, #0]
 800c492:	600b      	str	r3, [r1, #0]
 800c494:	7810      	ldrb	r0, [r2, #0]
 800c496:	1e43      	subs	r3, r0, #1
 800c498:	4198      	sbcs	r0, r3
 800c49a:	b002      	add	sp, #8
 800c49c:	4770      	bx	lr
 800c49e:	2002      	movs	r0, #2
 800c4a0:	4240      	negs	r0, r0
 800c4a2:	e7fa      	b.n	800c49a <__ascii_mbtowc+0x1a>

0800c4a4 <memmove>:
 800c4a4:	b510      	push	{r4, lr}
 800c4a6:	4288      	cmp	r0, r1
 800c4a8:	d902      	bls.n	800c4b0 <memmove+0xc>
 800c4aa:	188b      	adds	r3, r1, r2
 800c4ac:	4298      	cmp	r0, r3
 800c4ae:	d303      	bcc.n	800c4b8 <memmove+0x14>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	e007      	b.n	800c4c4 <memmove+0x20>
 800c4b4:	5c8b      	ldrb	r3, [r1, r2]
 800c4b6:	5483      	strb	r3, [r0, r2]
 800c4b8:	3a01      	subs	r2, #1
 800c4ba:	d2fb      	bcs.n	800c4b4 <memmove+0x10>
 800c4bc:	bd10      	pop	{r4, pc}
 800c4be:	5ccc      	ldrb	r4, [r1, r3]
 800c4c0:	54c4      	strb	r4, [r0, r3]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d1fa      	bne.n	800c4be <memmove+0x1a>
 800c4c8:	e7f8      	b.n	800c4bc <memmove+0x18>

0800c4ca <_realloc_r>:
 800c4ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4cc:	0007      	movs	r7, r0
 800c4ce:	000e      	movs	r6, r1
 800c4d0:	0014      	movs	r4, r2
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	d105      	bne.n	800c4e2 <_realloc_r+0x18>
 800c4d6:	0011      	movs	r1, r2
 800c4d8:	f7fd f95a 	bl	8009790 <_malloc_r>
 800c4dc:	0005      	movs	r5, r0
 800c4de:	0028      	movs	r0, r5
 800c4e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	d103      	bne.n	800c4ee <_realloc_r+0x24>
 800c4e6:	f7fd f8e7 	bl	80096b8 <_free_r>
 800c4ea:	0025      	movs	r5, r4
 800c4ec:	e7f7      	b.n	800c4de <_realloc_r+0x14>
 800c4ee:	f000 f91d 	bl	800c72c <_malloc_usable_size_r>
 800c4f2:	9001      	str	r0, [sp, #4]
 800c4f4:	4284      	cmp	r4, r0
 800c4f6:	d803      	bhi.n	800c500 <_realloc_r+0x36>
 800c4f8:	0035      	movs	r5, r6
 800c4fa:	0843      	lsrs	r3, r0, #1
 800c4fc:	42a3      	cmp	r3, r4
 800c4fe:	d3ee      	bcc.n	800c4de <_realloc_r+0x14>
 800c500:	0021      	movs	r1, r4
 800c502:	0038      	movs	r0, r7
 800c504:	f7fd f944 	bl	8009790 <_malloc_r>
 800c508:	1e05      	subs	r5, r0, #0
 800c50a:	d0e8      	beq.n	800c4de <_realloc_r+0x14>
 800c50c:	9b01      	ldr	r3, [sp, #4]
 800c50e:	0022      	movs	r2, r4
 800c510:	429c      	cmp	r4, r3
 800c512:	d900      	bls.n	800c516 <_realloc_r+0x4c>
 800c514:	001a      	movs	r2, r3
 800c516:	0031      	movs	r1, r6
 800c518:	0028      	movs	r0, r5
 800c51a:	f7fd f8bb 	bl	8009694 <memcpy>
 800c51e:	0031      	movs	r1, r6
 800c520:	0038      	movs	r0, r7
 800c522:	f7fd f8c9 	bl	80096b8 <_free_r>
 800c526:	e7da      	b.n	800c4de <_realloc_r+0x14>

0800c528 <_raise_r>:
 800c528:	b570      	push	{r4, r5, r6, lr}
 800c52a:	0004      	movs	r4, r0
 800c52c:	000d      	movs	r5, r1
 800c52e:	291f      	cmp	r1, #31
 800c530:	d904      	bls.n	800c53c <_raise_r+0x14>
 800c532:	2316      	movs	r3, #22
 800c534:	6003      	str	r3, [r0, #0]
 800c536:	2001      	movs	r0, #1
 800c538:	4240      	negs	r0, r0
 800c53a:	bd70      	pop	{r4, r5, r6, pc}
 800c53c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d004      	beq.n	800c54c <_raise_r+0x24>
 800c542:	008a      	lsls	r2, r1, #2
 800c544:	189b      	adds	r3, r3, r2
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	2a00      	cmp	r2, #0
 800c54a:	d108      	bne.n	800c55e <_raise_r+0x36>
 800c54c:	0020      	movs	r0, r4
 800c54e:	f000 f831 	bl	800c5b4 <_getpid_r>
 800c552:	002a      	movs	r2, r5
 800c554:	0001      	movs	r1, r0
 800c556:	0020      	movs	r0, r4
 800c558:	f000 f81a 	bl	800c590 <_kill_r>
 800c55c:	e7ed      	b.n	800c53a <_raise_r+0x12>
 800c55e:	2000      	movs	r0, #0
 800c560:	2a01      	cmp	r2, #1
 800c562:	d0ea      	beq.n	800c53a <_raise_r+0x12>
 800c564:	1c51      	adds	r1, r2, #1
 800c566:	d103      	bne.n	800c570 <_raise_r+0x48>
 800c568:	2316      	movs	r3, #22
 800c56a:	3001      	adds	r0, #1
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	e7e4      	b.n	800c53a <_raise_r+0x12>
 800c570:	2400      	movs	r4, #0
 800c572:	0028      	movs	r0, r5
 800c574:	601c      	str	r4, [r3, #0]
 800c576:	4790      	blx	r2
 800c578:	0020      	movs	r0, r4
 800c57a:	e7de      	b.n	800c53a <_raise_r+0x12>

0800c57c <raise>:
 800c57c:	b510      	push	{r4, lr}
 800c57e:	4b03      	ldr	r3, [pc, #12]	; (800c58c <raise+0x10>)
 800c580:	0001      	movs	r1, r0
 800c582:	6818      	ldr	r0, [r3, #0]
 800c584:	f7ff ffd0 	bl	800c528 <_raise_r>
 800c588:	bd10      	pop	{r4, pc}
 800c58a:	46c0      	nop			; (mov r8, r8)
 800c58c:	200000bc 	.word	0x200000bc

0800c590 <_kill_r>:
 800c590:	2300      	movs	r3, #0
 800c592:	b570      	push	{r4, r5, r6, lr}
 800c594:	4d06      	ldr	r5, [pc, #24]	; (800c5b0 <_kill_r+0x20>)
 800c596:	0004      	movs	r4, r0
 800c598:	0008      	movs	r0, r1
 800c59a:	0011      	movs	r1, r2
 800c59c:	602b      	str	r3, [r5, #0]
 800c59e:	f7fb fba3 	bl	8007ce8 <_kill>
 800c5a2:	1c43      	adds	r3, r0, #1
 800c5a4:	d103      	bne.n	800c5ae <_kill_r+0x1e>
 800c5a6:	682b      	ldr	r3, [r5, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d000      	beq.n	800c5ae <_kill_r+0x1e>
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}
 800c5b0:	200011b8 	.word	0x200011b8

0800c5b4 <_getpid_r>:
 800c5b4:	b510      	push	{r4, lr}
 800c5b6:	f7fb fb91 	bl	8007cdc <_getpid>
 800c5ba:	bd10      	pop	{r4, pc}

0800c5bc <__sread>:
 800c5bc:	b570      	push	{r4, r5, r6, lr}
 800c5be:	000c      	movs	r4, r1
 800c5c0:	250e      	movs	r5, #14
 800c5c2:	5f49      	ldrsh	r1, [r1, r5]
 800c5c4:	f000 f8ba 	bl	800c73c <_read_r>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	db03      	blt.n	800c5d4 <__sread+0x18>
 800c5cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c5ce:	181b      	adds	r3, r3, r0
 800c5d0:	6563      	str	r3, [r4, #84]	; 0x54
 800c5d2:	bd70      	pop	{r4, r5, r6, pc}
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	4a02      	ldr	r2, [pc, #8]	; (800c5e0 <__sread+0x24>)
 800c5d8:	4013      	ands	r3, r2
 800c5da:	81a3      	strh	r3, [r4, #12]
 800c5dc:	e7f9      	b.n	800c5d2 <__sread+0x16>
 800c5de:	46c0      	nop			; (mov r8, r8)
 800c5e0:	ffffefff 	.word	0xffffefff

0800c5e4 <__swrite>:
 800c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e6:	001f      	movs	r7, r3
 800c5e8:	898b      	ldrh	r3, [r1, #12]
 800c5ea:	0005      	movs	r5, r0
 800c5ec:	000c      	movs	r4, r1
 800c5ee:	0016      	movs	r6, r2
 800c5f0:	05db      	lsls	r3, r3, #23
 800c5f2:	d505      	bpl.n	800c600 <__swrite+0x1c>
 800c5f4:	230e      	movs	r3, #14
 800c5f6:	5ec9      	ldrsh	r1, [r1, r3]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	f000 f882 	bl	800c704 <_lseek_r>
 800c600:	89a3      	ldrh	r3, [r4, #12]
 800c602:	4a05      	ldr	r2, [pc, #20]	; (800c618 <__swrite+0x34>)
 800c604:	0028      	movs	r0, r5
 800c606:	4013      	ands	r3, r2
 800c608:	81a3      	strh	r3, [r4, #12]
 800c60a:	0032      	movs	r2, r6
 800c60c:	230e      	movs	r3, #14
 800c60e:	5ee1      	ldrsh	r1, [r4, r3]
 800c610:	003b      	movs	r3, r7
 800c612:	f000 f82d 	bl	800c670 <_write_r>
 800c616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c618:	ffffefff 	.word	0xffffefff

0800c61c <__sseek>:
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	000c      	movs	r4, r1
 800c620:	250e      	movs	r5, #14
 800c622:	5f49      	ldrsh	r1, [r1, r5]
 800c624:	f000 f86e 	bl	800c704 <_lseek_r>
 800c628:	89a3      	ldrh	r3, [r4, #12]
 800c62a:	1c42      	adds	r2, r0, #1
 800c62c:	d103      	bne.n	800c636 <__sseek+0x1a>
 800c62e:	4a05      	ldr	r2, [pc, #20]	; (800c644 <__sseek+0x28>)
 800c630:	4013      	ands	r3, r2
 800c632:	81a3      	strh	r3, [r4, #12]
 800c634:	bd70      	pop	{r4, r5, r6, pc}
 800c636:	2280      	movs	r2, #128	; 0x80
 800c638:	0152      	lsls	r2, r2, #5
 800c63a:	4313      	orrs	r3, r2
 800c63c:	81a3      	strh	r3, [r4, #12]
 800c63e:	6560      	str	r0, [r4, #84]	; 0x54
 800c640:	e7f8      	b.n	800c634 <__sseek+0x18>
 800c642:	46c0      	nop			; (mov r8, r8)
 800c644:	ffffefff 	.word	0xffffefff

0800c648 <__sclose>:
 800c648:	b510      	push	{r4, lr}
 800c64a:	230e      	movs	r3, #14
 800c64c:	5ec9      	ldrsh	r1, [r1, r3]
 800c64e:	f000 f823 	bl	800c698 <_close_r>
 800c652:	bd10      	pop	{r4, pc}

0800c654 <__ascii_wctomb>:
 800c654:	0003      	movs	r3, r0
 800c656:	1e08      	subs	r0, r1, #0
 800c658:	d005      	beq.n	800c666 <__ascii_wctomb+0x12>
 800c65a:	2aff      	cmp	r2, #255	; 0xff
 800c65c:	d904      	bls.n	800c668 <__ascii_wctomb+0x14>
 800c65e:	228a      	movs	r2, #138	; 0x8a
 800c660:	2001      	movs	r0, #1
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	4240      	negs	r0, r0
 800c666:	4770      	bx	lr
 800c668:	2001      	movs	r0, #1
 800c66a:	700a      	strb	r2, [r1, #0]
 800c66c:	e7fb      	b.n	800c666 <__ascii_wctomb+0x12>
	...

0800c670 <_write_r>:
 800c670:	b570      	push	{r4, r5, r6, lr}
 800c672:	0004      	movs	r4, r0
 800c674:	0008      	movs	r0, r1
 800c676:	0011      	movs	r1, r2
 800c678:	001a      	movs	r2, r3
 800c67a:	2300      	movs	r3, #0
 800c67c:	4d05      	ldr	r5, [pc, #20]	; (800c694 <_write_r+0x24>)
 800c67e:	602b      	str	r3, [r5, #0]
 800c680:	f7fb fb6b 	bl	8007d5a <_write>
 800c684:	1c43      	adds	r3, r0, #1
 800c686:	d103      	bne.n	800c690 <_write_r+0x20>
 800c688:	682b      	ldr	r3, [r5, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d000      	beq.n	800c690 <_write_r+0x20>
 800c68e:	6023      	str	r3, [r4, #0]
 800c690:	bd70      	pop	{r4, r5, r6, pc}
 800c692:	46c0      	nop			; (mov r8, r8)
 800c694:	200011b8 	.word	0x200011b8

0800c698 <_close_r>:
 800c698:	2300      	movs	r3, #0
 800c69a:	b570      	push	{r4, r5, r6, lr}
 800c69c:	4d06      	ldr	r5, [pc, #24]	; (800c6b8 <_close_r+0x20>)
 800c69e:	0004      	movs	r4, r0
 800c6a0:	0008      	movs	r0, r1
 800c6a2:	602b      	str	r3, [r5, #0]
 800c6a4:	f7fb fb75 	bl	8007d92 <_close>
 800c6a8:	1c43      	adds	r3, r0, #1
 800c6aa:	d103      	bne.n	800c6b4 <_close_r+0x1c>
 800c6ac:	682b      	ldr	r3, [r5, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d000      	beq.n	800c6b4 <_close_r+0x1c>
 800c6b2:	6023      	str	r3, [r4, #0]
 800c6b4:	bd70      	pop	{r4, r5, r6, pc}
 800c6b6:	46c0      	nop			; (mov r8, r8)
 800c6b8:	200011b8 	.word	0x200011b8

0800c6bc <_fstat_r>:
 800c6bc:	2300      	movs	r3, #0
 800c6be:	b570      	push	{r4, r5, r6, lr}
 800c6c0:	4d06      	ldr	r5, [pc, #24]	; (800c6dc <_fstat_r+0x20>)
 800c6c2:	0004      	movs	r4, r0
 800c6c4:	0008      	movs	r0, r1
 800c6c6:	0011      	movs	r1, r2
 800c6c8:	602b      	str	r3, [r5, #0]
 800c6ca:	f7fb fb6c 	bl	8007da6 <_fstat>
 800c6ce:	1c43      	adds	r3, r0, #1
 800c6d0:	d103      	bne.n	800c6da <_fstat_r+0x1e>
 800c6d2:	682b      	ldr	r3, [r5, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d000      	beq.n	800c6da <_fstat_r+0x1e>
 800c6d8:	6023      	str	r3, [r4, #0]
 800c6da:	bd70      	pop	{r4, r5, r6, pc}
 800c6dc:	200011b8 	.word	0x200011b8

0800c6e0 <_isatty_r>:
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	b570      	push	{r4, r5, r6, lr}
 800c6e4:	4d06      	ldr	r5, [pc, #24]	; (800c700 <_isatty_r+0x20>)
 800c6e6:	0004      	movs	r4, r0
 800c6e8:	0008      	movs	r0, r1
 800c6ea:	602b      	str	r3, [r5, #0]
 800c6ec:	f7fb fb69 	bl	8007dc2 <_isatty>
 800c6f0:	1c43      	adds	r3, r0, #1
 800c6f2:	d103      	bne.n	800c6fc <_isatty_r+0x1c>
 800c6f4:	682b      	ldr	r3, [r5, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d000      	beq.n	800c6fc <_isatty_r+0x1c>
 800c6fa:	6023      	str	r3, [r4, #0]
 800c6fc:	bd70      	pop	{r4, r5, r6, pc}
 800c6fe:	46c0      	nop			; (mov r8, r8)
 800c700:	200011b8 	.word	0x200011b8

0800c704 <_lseek_r>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	0004      	movs	r4, r0
 800c708:	0008      	movs	r0, r1
 800c70a:	0011      	movs	r1, r2
 800c70c:	001a      	movs	r2, r3
 800c70e:	2300      	movs	r3, #0
 800c710:	4d05      	ldr	r5, [pc, #20]	; (800c728 <_lseek_r+0x24>)
 800c712:	602b      	str	r3, [r5, #0]
 800c714:	f7fb fb5e 	bl	8007dd4 <_lseek>
 800c718:	1c43      	adds	r3, r0, #1
 800c71a:	d103      	bne.n	800c724 <_lseek_r+0x20>
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d000      	beq.n	800c724 <_lseek_r+0x20>
 800c722:	6023      	str	r3, [r4, #0]
 800c724:	bd70      	pop	{r4, r5, r6, pc}
 800c726:	46c0      	nop			; (mov r8, r8)
 800c728:	200011b8 	.word	0x200011b8

0800c72c <_malloc_usable_size_r>:
 800c72c:	1f0b      	subs	r3, r1, #4
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	1f18      	subs	r0, r3, #4
 800c732:	2b00      	cmp	r3, #0
 800c734:	da01      	bge.n	800c73a <_malloc_usable_size_r+0xe>
 800c736:	580b      	ldr	r3, [r1, r0]
 800c738:	18c0      	adds	r0, r0, r3
 800c73a:	4770      	bx	lr

0800c73c <_read_r>:
 800c73c:	b570      	push	{r4, r5, r6, lr}
 800c73e:	0004      	movs	r4, r0
 800c740:	0008      	movs	r0, r1
 800c742:	0011      	movs	r1, r2
 800c744:	001a      	movs	r2, r3
 800c746:	2300      	movs	r3, #0
 800c748:	4d05      	ldr	r5, [pc, #20]	; (800c760 <_read_r+0x24>)
 800c74a:	602b      	str	r3, [r5, #0]
 800c74c:	f7fb fae8 	bl	8007d20 <_read>
 800c750:	1c43      	adds	r3, r0, #1
 800c752:	d103      	bne.n	800c75c <_read_r+0x20>
 800c754:	682b      	ldr	r3, [r5, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d000      	beq.n	800c75c <_read_r+0x20>
 800c75a:	6023      	str	r3, [r4, #0]
 800c75c:	bd70      	pop	{r4, r5, r6, pc}
 800c75e:	46c0      	nop			; (mov r8, r8)
 800c760:	200011b8 	.word	0x200011b8

0800c764 <atan>:
 800c764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c766:	4b98      	ldr	r3, [pc, #608]	; (800c9c8 <atan+0x264>)
 800c768:	b085      	sub	sp, #20
 800c76a:	004e      	lsls	r6, r1, #1
 800c76c:	0004      	movs	r4, r0
 800c76e:	000d      	movs	r5, r1
 800c770:	9103      	str	r1, [sp, #12]
 800c772:	0876      	lsrs	r6, r6, #1
 800c774:	429e      	cmp	r6, r3
 800c776:	dd18      	ble.n	800c7aa <atan+0x46>
 800c778:	4b94      	ldr	r3, [pc, #592]	; (800c9cc <atan+0x268>)
 800c77a:	429e      	cmp	r6, r3
 800c77c:	dc02      	bgt.n	800c784 <atan+0x20>
 800c77e:	d10a      	bne.n	800c796 <atan+0x32>
 800c780:	2800      	cmp	r0, #0
 800c782:	d008      	beq.n	800c796 <atan+0x32>
 800c784:	0022      	movs	r2, r4
 800c786:	002b      	movs	r3, r5
 800c788:	0020      	movs	r0, r4
 800c78a:	0029      	movs	r1, r5
 800c78c:	f7f4 fdee 	bl	800136c <__aeabi_dadd>
 800c790:	0004      	movs	r4, r0
 800c792:	000d      	movs	r5, r1
 800c794:	e005      	b.n	800c7a2 <atan+0x3e>
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	4c8d      	ldr	r4, [pc, #564]	; (800c9d0 <atan+0x26c>)
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	dd00      	ble.n	800c7a0 <atan+0x3c>
 800c79e:	e110      	b.n	800c9c2 <atan+0x25e>
 800c7a0:	4d8c      	ldr	r5, [pc, #560]	; (800c9d4 <atan+0x270>)
 800c7a2:	0020      	movs	r0, r4
 800c7a4:	0029      	movs	r1, r5
 800c7a6:	b005      	add	sp, #20
 800c7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7aa:	4b8b      	ldr	r3, [pc, #556]	; (800c9d8 <atan+0x274>)
 800c7ac:	429e      	cmp	r6, r3
 800c7ae:	dc0f      	bgt.n	800c7d0 <atan+0x6c>
 800c7b0:	4b8a      	ldr	r3, [pc, #552]	; (800c9dc <atan+0x278>)
 800c7b2:	429e      	cmp	r6, r3
 800c7b4:	dc09      	bgt.n	800c7ca <atan+0x66>
 800c7b6:	4a8a      	ldr	r2, [pc, #552]	; (800c9e0 <atan+0x27c>)
 800c7b8:	4b8a      	ldr	r3, [pc, #552]	; (800c9e4 <atan+0x280>)
 800c7ba:	f7f4 fdd7 	bl	800136c <__aeabi_dadd>
 800c7be:	2200      	movs	r2, #0
 800c7c0:	4b89      	ldr	r3, [pc, #548]	; (800c9e8 <atan+0x284>)
 800c7c2:	f7f3 fe65 	bl	8000490 <__aeabi_dcmpgt>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d1eb      	bne.n	800c7a2 <atan+0x3e>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	425b      	negs	r3, r3
 800c7ce:	e025      	b.n	800c81c <atan+0xb8>
 800c7d0:	f000 f948 	bl	800ca64 <fabs>
 800c7d4:	4b85      	ldr	r3, [pc, #532]	; (800c9ec <atan+0x288>)
 800c7d6:	0004      	movs	r4, r0
 800c7d8:	000d      	movs	r5, r1
 800c7da:	429e      	cmp	r6, r3
 800c7dc:	dd00      	ble.n	800c7e0 <atan+0x7c>
 800c7de:	e0aa      	b.n	800c936 <atan+0x1d2>
 800c7e0:	4b83      	ldr	r3, [pc, #524]	; (800c9f0 <atan+0x28c>)
 800c7e2:	429e      	cmp	r6, r3
 800c7e4:	dd00      	ble.n	800c7e8 <atan+0x84>
 800c7e6:	e090      	b.n	800c90a <atan+0x1a6>
 800c7e8:	0002      	movs	r2, r0
 800c7ea:	000b      	movs	r3, r1
 800c7ec:	f7f4 fdbe 	bl	800136c <__aeabi_dadd>
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	4b7d      	ldr	r3, [pc, #500]	; (800c9e8 <atan+0x284>)
 800c7f4:	f7f5 ff64 	bl	80026c0 <__aeabi_dsub>
 800c7f8:	2380      	movs	r3, #128	; 0x80
 800c7fa:	0006      	movs	r6, r0
 800c7fc:	000f      	movs	r7, r1
 800c7fe:	2200      	movs	r2, #0
 800c800:	0020      	movs	r0, r4
 800c802:	0029      	movs	r1, r5
 800c804:	05db      	lsls	r3, r3, #23
 800c806:	f7f4 fdb1 	bl	800136c <__aeabi_dadd>
 800c80a:	000b      	movs	r3, r1
 800c80c:	0002      	movs	r2, r0
 800c80e:	0039      	movs	r1, r7
 800c810:	0030      	movs	r0, r6
 800c812:	f7f5 f8e7 	bl	80019e4 <__aeabi_ddiv>
 800c816:	2300      	movs	r3, #0
 800c818:	0004      	movs	r4, r0
 800c81a:	000d      	movs	r5, r1
 800c81c:	0022      	movs	r2, r4
 800c81e:	9302      	str	r3, [sp, #8]
 800c820:	0020      	movs	r0, r4
 800c822:	002b      	movs	r3, r5
 800c824:	0029      	movs	r1, r5
 800c826:	f7f5 fcdf 	bl	80021e8 <__aeabi_dmul>
 800c82a:	0002      	movs	r2, r0
 800c82c:	000b      	movs	r3, r1
 800c82e:	9000      	str	r0, [sp, #0]
 800c830:	9101      	str	r1, [sp, #4]
 800c832:	f7f5 fcd9 	bl	80021e8 <__aeabi_dmul>
 800c836:	0006      	movs	r6, r0
 800c838:	000f      	movs	r7, r1
 800c83a:	4a6e      	ldr	r2, [pc, #440]	; (800c9f4 <atan+0x290>)
 800c83c:	4b6e      	ldr	r3, [pc, #440]	; (800c9f8 <atan+0x294>)
 800c83e:	f7f5 fcd3 	bl	80021e8 <__aeabi_dmul>
 800c842:	4a6e      	ldr	r2, [pc, #440]	; (800c9fc <atan+0x298>)
 800c844:	4b6e      	ldr	r3, [pc, #440]	; (800ca00 <atan+0x29c>)
 800c846:	f7f4 fd91 	bl	800136c <__aeabi_dadd>
 800c84a:	0032      	movs	r2, r6
 800c84c:	003b      	movs	r3, r7
 800c84e:	f7f5 fccb 	bl	80021e8 <__aeabi_dmul>
 800c852:	4a6c      	ldr	r2, [pc, #432]	; (800ca04 <atan+0x2a0>)
 800c854:	4b6c      	ldr	r3, [pc, #432]	; (800ca08 <atan+0x2a4>)
 800c856:	f7f4 fd89 	bl	800136c <__aeabi_dadd>
 800c85a:	0032      	movs	r2, r6
 800c85c:	003b      	movs	r3, r7
 800c85e:	f7f5 fcc3 	bl	80021e8 <__aeabi_dmul>
 800c862:	4a6a      	ldr	r2, [pc, #424]	; (800ca0c <atan+0x2a8>)
 800c864:	4b6a      	ldr	r3, [pc, #424]	; (800ca10 <atan+0x2ac>)
 800c866:	f7f4 fd81 	bl	800136c <__aeabi_dadd>
 800c86a:	0032      	movs	r2, r6
 800c86c:	003b      	movs	r3, r7
 800c86e:	f7f5 fcbb 	bl	80021e8 <__aeabi_dmul>
 800c872:	4a68      	ldr	r2, [pc, #416]	; (800ca14 <atan+0x2b0>)
 800c874:	4b68      	ldr	r3, [pc, #416]	; (800ca18 <atan+0x2b4>)
 800c876:	f7f4 fd79 	bl	800136c <__aeabi_dadd>
 800c87a:	0032      	movs	r2, r6
 800c87c:	003b      	movs	r3, r7
 800c87e:	f7f5 fcb3 	bl	80021e8 <__aeabi_dmul>
 800c882:	4a66      	ldr	r2, [pc, #408]	; (800ca1c <atan+0x2b8>)
 800c884:	4b66      	ldr	r3, [pc, #408]	; (800ca20 <atan+0x2bc>)
 800c886:	f7f4 fd71 	bl	800136c <__aeabi_dadd>
 800c88a:	9a00      	ldr	r2, [sp, #0]
 800c88c:	9b01      	ldr	r3, [sp, #4]
 800c88e:	f7f5 fcab 	bl	80021e8 <__aeabi_dmul>
 800c892:	4a64      	ldr	r2, [pc, #400]	; (800ca24 <atan+0x2c0>)
 800c894:	9000      	str	r0, [sp, #0]
 800c896:	9101      	str	r1, [sp, #4]
 800c898:	4b63      	ldr	r3, [pc, #396]	; (800ca28 <atan+0x2c4>)
 800c89a:	0030      	movs	r0, r6
 800c89c:	0039      	movs	r1, r7
 800c89e:	f7f5 fca3 	bl	80021e8 <__aeabi_dmul>
 800c8a2:	4a62      	ldr	r2, [pc, #392]	; (800ca2c <atan+0x2c8>)
 800c8a4:	4b62      	ldr	r3, [pc, #392]	; (800ca30 <atan+0x2cc>)
 800c8a6:	f7f5 ff0b 	bl	80026c0 <__aeabi_dsub>
 800c8aa:	0032      	movs	r2, r6
 800c8ac:	003b      	movs	r3, r7
 800c8ae:	f7f5 fc9b 	bl	80021e8 <__aeabi_dmul>
 800c8b2:	4a60      	ldr	r2, [pc, #384]	; (800ca34 <atan+0x2d0>)
 800c8b4:	4b60      	ldr	r3, [pc, #384]	; (800ca38 <atan+0x2d4>)
 800c8b6:	f7f5 ff03 	bl	80026c0 <__aeabi_dsub>
 800c8ba:	0032      	movs	r2, r6
 800c8bc:	003b      	movs	r3, r7
 800c8be:	f7f5 fc93 	bl	80021e8 <__aeabi_dmul>
 800c8c2:	4a5e      	ldr	r2, [pc, #376]	; (800ca3c <atan+0x2d8>)
 800c8c4:	4b5e      	ldr	r3, [pc, #376]	; (800ca40 <atan+0x2dc>)
 800c8c6:	f7f5 fefb 	bl	80026c0 <__aeabi_dsub>
 800c8ca:	0032      	movs	r2, r6
 800c8cc:	003b      	movs	r3, r7
 800c8ce:	f7f5 fc8b 	bl	80021e8 <__aeabi_dmul>
 800c8d2:	4a5c      	ldr	r2, [pc, #368]	; (800ca44 <atan+0x2e0>)
 800c8d4:	4b5c      	ldr	r3, [pc, #368]	; (800ca48 <atan+0x2e4>)
 800c8d6:	f7f5 fef3 	bl	80026c0 <__aeabi_dsub>
 800c8da:	0032      	movs	r2, r6
 800c8dc:	003b      	movs	r3, r7
 800c8de:	f7f5 fc83 	bl	80021e8 <__aeabi_dmul>
 800c8e2:	0002      	movs	r2, r0
 800c8e4:	000b      	movs	r3, r1
 800c8e6:	9800      	ldr	r0, [sp, #0]
 800c8e8:	9901      	ldr	r1, [sp, #4]
 800c8ea:	f7f4 fd3f 	bl	800136c <__aeabi_dadd>
 800c8ee:	002b      	movs	r3, r5
 800c8f0:	0022      	movs	r2, r4
 800c8f2:	f7f5 fc79 	bl	80021e8 <__aeabi_dmul>
 800c8f6:	9b02      	ldr	r3, [sp, #8]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	d143      	bne.n	800c984 <atan+0x220>
 800c8fc:	0002      	movs	r2, r0
 800c8fe:	000b      	movs	r3, r1
 800c900:	0020      	movs	r0, r4
 800c902:	0029      	movs	r1, r5
 800c904:	f7f5 fedc 	bl	80026c0 <__aeabi_dsub>
 800c908:	e742      	b.n	800c790 <atan+0x2c>
 800c90a:	2200      	movs	r2, #0
 800c90c:	4b36      	ldr	r3, [pc, #216]	; (800c9e8 <atan+0x284>)
 800c90e:	f7f5 fed7 	bl	80026c0 <__aeabi_dsub>
 800c912:	2200      	movs	r2, #0
 800c914:	0006      	movs	r6, r0
 800c916:	000f      	movs	r7, r1
 800c918:	0020      	movs	r0, r4
 800c91a:	0029      	movs	r1, r5
 800c91c:	4b32      	ldr	r3, [pc, #200]	; (800c9e8 <atan+0x284>)
 800c91e:	f7f4 fd25 	bl	800136c <__aeabi_dadd>
 800c922:	000b      	movs	r3, r1
 800c924:	0002      	movs	r2, r0
 800c926:	0039      	movs	r1, r7
 800c928:	0030      	movs	r0, r6
 800c92a:	f7f5 f85b 	bl	80019e4 <__aeabi_ddiv>
 800c92e:	2301      	movs	r3, #1
 800c930:	0004      	movs	r4, r0
 800c932:	000d      	movs	r5, r1
 800c934:	e772      	b.n	800c81c <atan+0xb8>
 800c936:	4b45      	ldr	r3, [pc, #276]	; (800ca4c <atan+0x2e8>)
 800c938:	429e      	cmp	r6, r3
 800c93a:	dc19      	bgt.n	800c970 <atan+0x20c>
 800c93c:	2200      	movs	r2, #0
 800c93e:	4b44      	ldr	r3, [pc, #272]	; (800ca50 <atan+0x2ec>)
 800c940:	f7f5 febe 	bl	80026c0 <__aeabi_dsub>
 800c944:	2200      	movs	r2, #0
 800c946:	0006      	movs	r6, r0
 800c948:	000f      	movs	r7, r1
 800c94a:	0020      	movs	r0, r4
 800c94c:	0029      	movs	r1, r5
 800c94e:	4b40      	ldr	r3, [pc, #256]	; (800ca50 <atan+0x2ec>)
 800c950:	f7f5 fc4a 	bl	80021e8 <__aeabi_dmul>
 800c954:	2200      	movs	r2, #0
 800c956:	4b24      	ldr	r3, [pc, #144]	; (800c9e8 <atan+0x284>)
 800c958:	f7f4 fd08 	bl	800136c <__aeabi_dadd>
 800c95c:	000b      	movs	r3, r1
 800c95e:	0002      	movs	r2, r0
 800c960:	0039      	movs	r1, r7
 800c962:	0030      	movs	r0, r6
 800c964:	f7f5 f83e 	bl	80019e4 <__aeabi_ddiv>
 800c968:	2302      	movs	r3, #2
 800c96a:	0004      	movs	r4, r0
 800c96c:	000d      	movs	r5, r1
 800c96e:	e755      	b.n	800c81c <atan+0xb8>
 800c970:	000b      	movs	r3, r1
 800c972:	0002      	movs	r2, r0
 800c974:	4937      	ldr	r1, [pc, #220]	; (800ca54 <atan+0x2f0>)
 800c976:	2000      	movs	r0, #0
 800c978:	f7f5 f834 	bl	80019e4 <__aeabi_ddiv>
 800c97c:	2303      	movs	r3, #3
 800c97e:	0004      	movs	r4, r0
 800c980:	000d      	movs	r5, r1
 800c982:	e74b      	b.n	800c81c <atan+0xb8>
 800c984:	9b02      	ldr	r3, [sp, #8]
 800c986:	4f34      	ldr	r7, [pc, #208]	; (800ca58 <atan+0x2f4>)
 800c988:	00de      	lsls	r6, r3, #3
 800c98a:	4b34      	ldr	r3, [pc, #208]	; (800ca5c <atan+0x2f8>)
 800c98c:	19bf      	adds	r7, r7, r6
 800c98e:	199e      	adds	r6, r3, r6
 800c990:	6832      	ldr	r2, [r6, #0]
 800c992:	6873      	ldr	r3, [r6, #4]
 800c994:	f7f5 fe94 	bl	80026c0 <__aeabi_dsub>
 800c998:	0022      	movs	r2, r4
 800c99a:	002b      	movs	r3, r5
 800c99c:	f7f5 fe90 	bl	80026c0 <__aeabi_dsub>
 800c9a0:	000b      	movs	r3, r1
 800c9a2:	0002      	movs	r2, r0
 800c9a4:	6838      	ldr	r0, [r7, #0]
 800c9a6:	6879      	ldr	r1, [r7, #4]
 800c9a8:	f7f5 fe8a 	bl	80026c0 <__aeabi_dsub>
 800c9ac:	9b03      	ldr	r3, [sp, #12]
 800c9ae:	0004      	movs	r4, r0
 800c9b0:	000d      	movs	r5, r1
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	db00      	blt.n	800c9b8 <atan+0x254>
 800c9b6:	e6f4      	b.n	800c7a2 <atan+0x3e>
 800c9b8:	2180      	movs	r1, #128	; 0x80
 800c9ba:	0609      	lsls	r1, r1, #24
 800c9bc:	186b      	adds	r3, r5, r1
 800c9be:	001d      	movs	r5, r3
 800c9c0:	e6ef      	b.n	800c7a2 <atan+0x3e>
 800c9c2:	4d27      	ldr	r5, [pc, #156]	; (800ca60 <atan+0x2fc>)
 800c9c4:	e6ed      	b.n	800c7a2 <atan+0x3e>
 800c9c6:	46c0      	nop			; (mov r8, r8)
 800c9c8:	440fffff 	.word	0x440fffff
 800c9cc:	7ff00000 	.word	0x7ff00000
 800c9d0:	54442d18 	.word	0x54442d18
 800c9d4:	bff921fb 	.word	0xbff921fb
 800c9d8:	3fdbffff 	.word	0x3fdbffff
 800c9dc:	3e1fffff 	.word	0x3e1fffff
 800c9e0:	8800759c 	.word	0x8800759c
 800c9e4:	7e37e43c 	.word	0x7e37e43c
 800c9e8:	3ff00000 	.word	0x3ff00000
 800c9ec:	3ff2ffff 	.word	0x3ff2ffff
 800c9f0:	3fe5ffff 	.word	0x3fe5ffff
 800c9f4:	e322da11 	.word	0xe322da11
 800c9f8:	3f90ad3a 	.word	0x3f90ad3a
 800c9fc:	24760deb 	.word	0x24760deb
 800ca00:	3fa97b4b 	.word	0x3fa97b4b
 800ca04:	a0d03d51 	.word	0xa0d03d51
 800ca08:	3fb10d66 	.word	0x3fb10d66
 800ca0c:	c54c206e 	.word	0xc54c206e
 800ca10:	3fb745cd 	.word	0x3fb745cd
 800ca14:	920083ff 	.word	0x920083ff
 800ca18:	3fc24924 	.word	0x3fc24924
 800ca1c:	5555550d 	.word	0x5555550d
 800ca20:	3fd55555 	.word	0x3fd55555
 800ca24:	2c6a6c2f 	.word	0x2c6a6c2f
 800ca28:	bfa2b444 	.word	0xbfa2b444
 800ca2c:	52defd9a 	.word	0x52defd9a
 800ca30:	3fadde2d 	.word	0x3fadde2d
 800ca34:	af749a6d 	.word	0xaf749a6d
 800ca38:	3fb3b0f2 	.word	0x3fb3b0f2
 800ca3c:	fe231671 	.word	0xfe231671
 800ca40:	3fbc71c6 	.word	0x3fbc71c6
 800ca44:	9998ebc4 	.word	0x9998ebc4
 800ca48:	3fc99999 	.word	0x3fc99999
 800ca4c:	40037fff 	.word	0x40037fff
 800ca50:	3ff80000 	.word	0x3ff80000
 800ca54:	bff00000 	.word	0xbff00000
 800ca58:	0800d8a0 	.word	0x0800d8a0
 800ca5c:	0800d8c0 	.word	0x0800d8c0
 800ca60:	3ff921fb 	.word	0x3ff921fb

0800ca64 <fabs>:
 800ca64:	004b      	lsls	r3, r1, #1
 800ca66:	0859      	lsrs	r1, r3, #1
 800ca68:	4770      	bx	lr

0800ca6a <atan2>:
 800ca6a:	b510      	push	{r4, lr}
 800ca6c:	f000 f828 	bl	800cac0 <__ieee754_atan2>
 800ca70:	bd10      	pop	{r4, pc}

0800ca72 <sqrt>:
 800ca72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca74:	0004      	movs	r4, r0
 800ca76:	000d      	movs	r5, r1
 800ca78:	f000 f8ce 	bl	800cc18 <__ieee754_sqrt>
 800ca7c:	0022      	movs	r2, r4
 800ca7e:	0006      	movs	r6, r0
 800ca80:	000f      	movs	r7, r1
 800ca82:	002b      	movs	r3, r5
 800ca84:	0020      	movs	r0, r4
 800ca86:	0029      	movs	r1, r5
 800ca88:	f7f6 f9ac 	bl	8002de4 <__aeabi_dcmpun>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d113      	bne.n	800cab8 <sqrt+0x46>
 800ca90:	2200      	movs	r2, #0
 800ca92:	2300      	movs	r3, #0
 800ca94:	0020      	movs	r0, r4
 800ca96:	0029      	movs	r1, r5
 800ca98:	f7f3 fce6 	bl	8000468 <__aeabi_dcmplt>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d00b      	beq.n	800cab8 <sqrt+0x46>
 800caa0:	f7fc fdc4 	bl	800962c <__errno>
 800caa4:	2321      	movs	r3, #33	; 0x21
 800caa6:	2200      	movs	r2, #0
 800caa8:	6003      	str	r3, [r0, #0]
 800caaa:	2300      	movs	r3, #0
 800caac:	0010      	movs	r0, r2
 800caae:	0019      	movs	r1, r3
 800cab0:	f7f4 ff98 	bl	80019e4 <__aeabi_ddiv>
 800cab4:	0006      	movs	r6, r0
 800cab6:	000f      	movs	r7, r1
 800cab8:	0030      	movs	r0, r6
 800caba:	0039      	movs	r1, r7
 800cabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cac0 <__ieee754_atan2>:
 800cac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cac2:	0016      	movs	r6, r2
 800cac4:	001d      	movs	r5, r3
 800cac6:	005a      	lsls	r2, r3, #1
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	4273      	negs	r3, r6
 800cacc:	4333      	orrs	r3, r6
 800cace:	4f46      	ldr	r7, [pc, #280]	; (800cbe8 <__ieee754_atan2+0x128>)
 800cad0:	0852      	lsrs	r2, r2, #1
 800cad2:	0fdb      	lsrs	r3, r3, #31
 800cad4:	4313      	orrs	r3, r2
 800cad6:	42bb      	cmp	r3, r7
 800cad8:	d809      	bhi.n	800caee <__ieee754_atan2+0x2e>
 800cada:	4244      	negs	r4, r0
 800cadc:	004b      	lsls	r3, r1, #1
 800cade:	4304      	orrs	r4, r0
 800cae0:	085b      	lsrs	r3, r3, #1
 800cae2:	0fe4      	lsrs	r4, r4, #31
 800cae4:	9100      	str	r1, [sp, #0]
 800cae6:	9001      	str	r0, [sp, #4]
 800cae8:	431c      	orrs	r4, r3
 800caea:	42bc      	cmp	r4, r7
 800caec:	d905      	bls.n	800cafa <__ieee754_atan2+0x3a>
 800caee:	0032      	movs	r2, r6
 800caf0:	002b      	movs	r3, r5
 800caf2:	f7f4 fc3b 	bl	800136c <__aeabi_dadd>
 800caf6:	b003      	add	sp, #12
 800caf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cafa:	4c3c      	ldr	r4, [pc, #240]	; (800cbec <__ieee754_atan2+0x12c>)
 800cafc:	192c      	adds	r4, r5, r4
 800cafe:	4334      	orrs	r4, r6
 800cb00:	d102      	bne.n	800cb08 <__ieee754_atan2+0x48>
 800cb02:	f7ff fe2f 	bl	800c764 <atan>
 800cb06:	e7f6      	b.n	800caf6 <__ieee754_atan2+0x36>
 800cb08:	17ac      	asrs	r4, r5, #30
 800cb0a:	46a4      	mov	ip, r4
 800cb0c:	2402      	movs	r4, #2
 800cb0e:	4667      	mov	r7, ip
 800cb10:	403c      	ands	r4, r7
 800cb12:	9f00      	ldr	r7, [sp, #0]
 800cb14:	0fff      	lsrs	r7, r7, #31
 800cb16:	433c      	orrs	r4, r7
 800cb18:	9f01      	ldr	r7, [sp, #4]
 800cb1a:	431f      	orrs	r7, r3
 800cb1c:	d106      	bne.n	800cb2c <__ieee754_atan2+0x6c>
 800cb1e:	2c02      	cmp	r4, #2
 800cb20:	d056      	beq.n	800cbd0 <__ieee754_atan2+0x110>
 800cb22:	2c03      	cmp	r4, #3
 800cb24:	d1e7      	bne.n	800caf6 <__ieee754_atan2+0x36>
 800cb26:	4832      	ldr	r0, [pc, #200]	; (800cbf0 <__ieee754_atan2+0x130>)
 800cb28:	4932      	ldr	r1, [pc, #200]	; (800cbf4 <__ieee754_atan2+0x134>)
 800cb2a:	e7e4      	b.n	800caf6 <__ieee754_atan2+0x36>
 800cb2c:	0017      	movs	r7, r2
 800cb2e:	4337      	orrs	r7, r6
 800cb30:	d105      	bne.n	800cb3e <__ieee754_atan2+0x7e>
 800cb32:	9b00      	ldr	r3, [sp, #0]
 800cb34:	482e      	ldr	r0, [pc, #184]	; (800cbf0 <__ieee754_atan2+0x130>)
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	da53      	bge.n	800cbe2 <__ieee754_atan2+0x122>
 800cb3a:	492f      	ldr	r1, [pc, #188]	; (800cbf8 <__ieee754_atan2+0x138>)
 800cb3c:	e7db      	b.n	800caf6 <__ieee754_atan2+0x36>
 800cb3e:	4f2a      	ldr	r7, [pc, #168]	; (800cbe8 <__ieee754_atan2+0x128>)
 800cb40:	42ba      	cmp	r2, r7
 800cb42:	d10f      	bne.n	800cb64 <__ieee754_atan2+0xa4>
 800cb44:	3c01      	subs	r4, #1
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d107      	bne.n	800cb5a <__ieee754_atan2+0x9a>
 800cb4a:	2c02      	cmp	r4, #2
 800cb4c:	d843      	bhi.n	800cbd6 <__ieee754_atan2+0x116>
 800cb4e:	4b2b      	ldr	r3, [pc, #172]	; (800cbfc <__ieee754_atan2+0x13c>)
 800cb50:	00e4      	lsls	r4, r4, #3
 800cb52:	191c      	adds	r4, r3, r4
 800cb54:	6820      	ldr	r0, [r4, #0]
 800cb56:	6861      	ldr	r1, [r4, #4]
 800cb58:	e7cd      	b.n	800caf6 <__ieee754_atan2+0x36>
 800cb5a:	2c02      	cmp	r4, #2
 800cb5c:	d83e      	bhi.n	800cbdc <__ieee754_atan2+0x11c>
 800cb5e:	4b28      	ldr	r3, [pc, #160]	; (800cc00 <__ieee754_atan2+0x140>)
 800cb60:	00e4      	lsls	r4, r4, #3
 800cb62:	e7f6      	b.n	800cb52 <__ieee754_atan2+0x92>
 800cb64:	4f20      	ldr	r7, [pc, #128]	; (800cbe8 <__ieee754_atan2+0x128>)
 800cb66:	42bb      	cmp	r3, r7
 800cb68:	d0e3      	beq.n	800cb32 <__ieee754_atan2+0x72>
 800cb6a:	1a9b      	subs	r3, r3, r2
 800cb6c:	151b      	asrs	r3, r3, #20
 800cb6e:	2b3c      	cmp	r3, #60	; 0x3c
 800cb70:	dc18      	bgt.n	800cba4 <__ieee754_atan2+0xe4>
 800cb72:	2d00      	cmp	r5, #0
 800cb74:	da01      	bge.n	800cb7a <__ieee754_atan2+0xba>
 800cb76:	333c      	adds	r3, #60	; 0x3c
 800cb78:	db17      	blt.n	800cbaa <__ieee754_atan2+0xea>
 800cb7a:	0032      	movs	r2, r6
 800cb7c:	002b      	movs	r3, r5
 800cb7e:	f7f4 ff31 	bl	80019e4 <__aeabi_ddiv>
 800cb82:	f7ff ff6f 	bl	800ca64 <fabs>
 800cb86:	f7ff fded 	bl	800c764 <atan>
 800cb8a:	2c01      	cmp	r4, #1
 800cb8c:	d010      	beq.n	800cbb0 <__ieee754_atan2+0xf0>
 800cb8e:	2c02      	cmp	r4, #2
 800cb90:	d013      	beq.n	800cbba <__ieee754_atan2+0xfa>
 800cb92:	2c00      	cmp	r4, #0
 800cb94:	d0af      	beq.n	800caf6 <__ieee754_atan2+0x36>
 800cb96:	4a1b      	ldr	r2, [pc, #108]	; (800cc04 <__ieee754_atan2+0x144>)
 800cb98:	4b1b      	ldr	r3, [pc, #108]	; (800cc08 <__ieee754_atan2+0x148>)
 800cb9a:	f7f5 fd91 	bl	80026c0 <__aeabi_dsub>
 800cb9e:	4a14      	ldr	r2, [pc, #80]	; (800cbf0 <__ieee754_atan2+0x130>)
 800cba0:	4b1a      	ldr	r3, [pc, #104]	; (800cc0c <__ieee754_atan2+0x14c>)
 800cba2:	e012      	b.n	800cbca <__ieee754_atan2+0x10a>
 800cba4:	4812      	ldr	r0, [pc, #72]	; (800cbf0 <__ieee754_atan2+0x130>)
 800cba6:	491a      	ldr	r1, [pc, #104]	; (800cc10 <__ieee754_atan2+0x150>)
 800cba8:	e7ef      	b.n	800cb8a <__ieee754_atan2+0xca>
 800cbaa:	2000      	movs	r0, #0
 800cbac:	2100      	movs	r1, #0
 800cbae:	e7ec      	b.n	800cb8a <__ieee754_atan2+0xca>
 800cbb0:	2480      	movs	r4, #128	; 0x80
 800cbb2:	0624      	lsls	r4, r4, #24
 800cbb4:	190b      	adds	r3, r1, r4
 800cbb6:	0019      	movs	r1, r3
 800cbb8:	e79d      	b.n	800caf6 <__ieee754_atan2+0x36>
 800cbba:	4a12      	ldr	r2, [pc, #72]	; (800cc04 <__ieee754_atan2+0x144>)
 800cbbc:	4b12      	ldr	r3, [pc, #72]	; (800cc08 <__ieee754_atan2+0x148>)
 800cbbe:	f7f5 fd7f 	bl	80026c0 <__aeabi_dsub>
 800cbc2:	0002      	movs	r2, r0
 800cbc4:	000b      	movs	r3, r1
 800cbc6:	480a      	ldr	r0, [pc, #40]	; (800cbf0 <__ieee754_atan2+0x130>)
 800cbc8:	4910      	ldr	r1, [pc, #64]	; (800cc0c <__ieee754_atan2+0x14c>)
 800cbca:	f7f5 fd79 	bl	80026c0 <__aeabi_dsub>
 800cbce:	e792      	b.n	800caf6 <__ieee754_atan2+0x36>
 800cbd0:	4807      	ldr	r0, [pc, #28]	; (800cbf0 <__ieee754_atan2+0x130>)
 800cbd2:	490e      	ldr	r1, [pc, #56]	; (800cc0c <__ieee754_atan2+0x14c>)
 800cbd4:	e78f      	b.n	800caf6 <__ieee754_atan2+0x36>
 800cbd6:	4806      	ldr	r0, [pc, #24]	; (800cbf0 <__ieee754_atan2+0x130>)
 800cbd8:	490e      	ldr	r1, [pc, #56]	; (800cc14 <__ieee754_atan2+0x154>)
 800cbda:	e78c      	b.n	800caf6 <__ieee754_atan2+0x36>
 800cbdc:	2000      	movs	r0, #0
 800cbde:	2100      	movs	r1, #0
 800cbe0:	e789      	b.n	800caf6 <__ieee754_atan2+0x36>
 800cbe2:	490b      	ldr	r1, [pc, #44]	; (800cc10 <__ieee754_atan2+0x150>)
 800cbe4:	e787      	b.n	800caf6 <__ieee754_atan2+0x36>
 800cbe6:	46c0      	nop			; (mov r8, r8)
 800cbe8:	7ff00000 	.word	0x7ff00000
 800cbec:	c0100000 	.word	0xc0100000
 800cbf0:	54442d18 	.word	0x54442d18
 800cbf4:	c00921fb 	.word	0xc00921fb
 800cbf8:	bff921fb 	.word	0xbff921fb
 800cbfc:	0800d8e0 	.word	0x0800d8e0
 800cc00:	0800d8f8 	.word	0x0800d8f8
 800cc04:	33145c07 	.word	0x33145c07
 800cc08:	3ca1a626 	.word	0x3ca1a626
 800cc0c:	400921fb 	.word	0x400921fb
 800cc10:	3ff921fb 	.word	0x3ff921fb
 800cc14:	3fe921fb 	.word	0x3fe921fb

0800cc18 <__ieee754_sqrt>:
 800cc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc1a:	000b      	movs	r3, r1
 800cc1c:	000c      	movs	r4, r1
 800cc1e:	4956      	ldr	r1, [pc, #344]	; (800cd78 <__ieee754_sqrt+0x160>)
 800cc20:	0005      	movs	r5, r0
 800cc22:	0002      	movs	r2, r0
 800cc24:	0008      	movs	r0, r1
 800cc26:	b085      	sub	sp, #20
 800cc28:	4020      	ands	r0, r4
 800cc2a:	4288      	cmp	r0, r1
 800cc2c:	d10f      	bne.n	800cc4e <__ieee754_sqrt+0x36>
 800cc2e:	0028      	movs	r0, r5
 800cc30:	0021      	movs	r1, r4
 800cc32:	f7f5 fad9 	bl	80021e8 <__aeabi_dmul>
 800cc36:	0002      	movs	r2, r0
 800cc38:	000b      	movs	r3, r1
 800cc3a:	0028      	movs	r0, r5
 800cc3c:	0021      	movs	r1, r4
 800cc3e:	f7f4 fb95 	bl	800136c <__aeabi_dadd>
 800cc42:	0005      	movs	r5, r0
 800cc44:	000c      	movs	r4, r1
 800cc46:	0028      	movs	r0, r5
 800cc48:	0021      	movs	r1, r4
 800cc4a:	b005      	add	sp, #20
 800cc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc4e:	2c00      	cmp	r4, #0
 800cc50:	dc10      	bgt.n	800cc74 <__ieee754_sqrt+0x5c>
 800cc52:	0061      	lsls	r1, r4, #1
 800cc54:	0849      	lsrs	r1, r1, #1
 800cc56:	4329      	orrs	r1, r5
 800cc58:	d0f5      	beq.n	800cc46 <__ieee754_sqrt+0x2e>
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	428c      	cmp	r4, r1
 800cc5e:	d100      	bne.n	800cc62 <__ieee754_sqrt+0x4a>
 800cc60:	e080      	b.n	800cd64 <__ieee754_sqrt+0x14c>
 800cc62:	0028      	movs	r0, r5
 800cc64:	0021      	movs	r1, r4
 800cc66:	f7f5 fd2b 	bl	80026c0 <__aeabi_dsub>
 800cc6a:	0002      	movs	r2, r0
 800cc6c:	000b      	movs	r3, r1
 800cc6e:	f7f4 feb9 	bl	80019e4 <__aeabi_ddiv>
 800cc72:	e7e6      	b.n	800cc42 <__ieee754_sqrt+0x2a>
 800cc74:	1521      	asrs	r1, r4, #20
 800cc76:	d075      	beq.n	800cd64 <__ieee754_sqrt+0x14c>
 800cc78:	4840      	ldr	r0, [pc, #256]	; (800cd7c <__ieee754_sqrt+0x164>)
 800cc7a:	031b      	lsls	r3, r3, #12
 800cc7c:	180c      	adds	r4, r1, r0
 800cc7e:	2080      	movs	r0, #128	; 0x80
 800cc80:	0b1b      	lsrs	r3, r3, #12
 800cc82:	0340      	lsls	r0, r0, #13
 800cc84:	4303      	orrs	r3, r0
 800cc86:	07c9      	lsls	r1, r1, #31
 800cc88:	d403      	bmi.n	800cc92 <__ieee754_sqrt+0x7a>
 800cc8a:	0fd1      	lsrs	r1, r2, #31
 800cc8c:	005b      	lsls	r3, r3, #1
 800cc8e:	185b      	adds	r3, r3, r1
 800cc90:	0052      	lsls	r2, r2, #1
 800cc92:	1061      	asrs	r1, r4, #1
 800cc94:	2400      	movs	r4, #0
 800cc96:	9103      	str	r1, [sp, #12]
 800cc98:	005b      	lsls	r3, r3, #1
 800cc9a:	0fd1      	lsrs	r1, r2, #31
 800cc9c:	185b      	adds	r3, r3, r1
 800cc9e:	2180      	movs	r1, #128	; 0x80
 800cca0:	2516      	movs	r5, #22
 800cca2:	0020      	movs	r0, r4
 800cca4:	0052      	lsls	r2, r2, #1
 800cca6:	0389      	lsls	r1, r1, #14
 800cca8:	1846      	adds	r6, r0, r1
 800ccaa:	429e      	cmp	r6, r3
 800ccac:	dc02      	bgt.n	800ccb4 <__ieee754_sqrt+0x9c>
 800ccae:	1870      	adds	r0, r6, r1
 800ccb0:	1b9b      	subs	r3, r3, r6
 800ccb2:	1864      	adds	r4, r4, r1
 800ccb4:	0fd6      	lsrs	r6, r2, #31
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	3d01      	subs	r5, #1
 800ccba:	18f3      	adds	r3, r6, r3
 800ccbc:	0052      	lsls	r2, r2, #1
 800ccbe:	0849      	lsrs	r1, r1, #1
 800ccc0:	2d00      	cmp	r5, #0
 800ccc2:	d1f1      	bne.n	800cca8 <__ieee754_sqrt+0x90>
 800ccc4:	2620      	movs	r6, #32
 800ccc6:	2780      	movs	r7, #128	; 0x80
 800ccc8:	0029      	movs	r1, r5
 800ccca:	9601      	str	r6, [sp, #4]
 800cccc:	063f      	lsls	r7, r7, #24
 800ccce:	197e      	adds	r6, r7, r5
 800ccd0:	46b4      	mov	ip, r6
 800ccd2:	4283      	cmp	r3, r0
 800ccd4:	dc02      	bgt.n	800ccdc <__ieee754_sqrt+0xc4>
 800ccd6:	d114      	bne.n	800cd02 <__ieee754_sqrt+0xea>
 800ccd8:	4296      	cmp	r6, r2
 800ccda:	d812      	bhi.n	800cd02 <__ieee754_sqrt+0xea>
 800ccdc:	4665      	mov	r5, ip
 800ccde:	4666      	mov	r6, ip
 800cce0:	19ed      	adds	r5, r5, r7
 800cce2:	9002      	str	r0, [sp, #8]
 800cce4:	2e00      	cmp	r6, #0
 800cce6:	da03      	bge.n	800ccf0 <__ieee754_sqrt+0xd8>
 800cce8:	43ee      	mvns	r6, r5
 800ccea:	0ff6      	lsrs	r6, r6, #31
 800ccec:	1986      	adds	r6, r0, r6
 800ccee:	9602      	str	r6, [sp, #8]
 800ccf0:	1a1b      	subs	r3, r3, r0
 800ccf2:	4562      	cmp	r2, ip
 800ccf4:	4180      	sbcs	r0, r0
 800ccf6:	4240      	negs	r0, r0
 800ccf8:	1a1b      	subs	r3, r3, r0
 800ccfa:	4660      	mov	r0, ip
 800ccfc:	1a12      	subs	r2, r2, r0
 800ccfe:	9802      	ldr	r0, [sp, #8]
 800cd00:	19c9      	adds	r1, r1, r7
 800cd02:	0fd6      	lsrs	r6, r2, #31
 800cd04:	005b      	lsls	r3, r3, #1
 800cd06:	199b      	adds	r3, r3, r6
 800cd08:	9e01      	ldr	r6, [sp, #4]
 800cd0a:	0052      	lsls	r2, r2, #1
 800cd0c:	3e01      	subs	r6, #1
 800cd0e:	087f      	lsrs	r7, r7, #1
 800cd10:	9601      	str	r6, [sp, #4]
 800cd12:	2e00      	cmp	r6, #0
 800cd14:	d1db      	bne.n	800ccce <__ieee754_sqrt+0xb6>
 800cd16:	4313      	orrs	r3, r2
 800cd18:	d003      	beq.n	800cd22 <__ieee754_sqrt+0x10a>
 800cd1a:	1c4b      	adds	r3, r1, #1
 800cd1c:	d127      	bne.n	800cd6e <__ieee754_sqrt+0x156>
 800cd1e:	0031      	movs	r1, r6
 800cd20:	3401      	adds	r4, #1
 800cd22:	4b17      	ldr	r3, [pc, #92]	; (800cd80 <__ieee754_sqrt+0x168>)
 800cd24:	1060      	asrs	r0, r4, #1
 800cd26:	18c0      	adds	r0, r0, r3
 800cd28:	0849      	lsrs	r1, r1, #1
 800cd2a:	07e3      	lsls	r3, r4, #31
 800cd2c:	d502      	bpl.n	800cd34 <__ieee754_sqrt+0x11c>
 800cd2e:	2380      	movs	r3, #128	; 0x80
 800cd30:	061b      	lsls	r3, r3, #24
 800cd32:	4319      	orrs	r1, r3
 800cd34:	9b03      	ldr	r3, [sp, #12]
 800cd36:	000d      	movs	r5, r1
 800cd38:	051c      	lsls	r4, r3, #20
 800cd3a:	1823      	adds	r3, r4, r0
 800cd3c:	001c      	movs	r4, r3
 800cd3e:	e782      	b.n	800cc46 <__ieee754_sqrt+0x2e>
 800cd40:	0ad3      	lsrs	r3, r2, #11
 800cd42:	3815      	subs	r0, #21
 800cd44:	0552      	lsls	r2, r2, #21
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d0fa      	beq.n	800cd40 <__ieee754_sqrt+0x128>
 800cd4a:	2480      	movs	r4, #128	; 0x80
 800cd4c:	0364      	lsls	r4, r4, #13
 800cd4e:	4223      	tst	r3, r4
 800cd50:	d00a      	beq.n	800cd68 <__ieee754_sqrt+0x150>
 800cd52:	2420      	movs	r4, #32
 800cd54:	0016      	movs	r6, r2
 800cd56:	1a64      	subs	r4, r4, r1
 800cd58:	40e6      	lsrs	r6, r4
 800cd5a:	1e4d      	subs	r5, r1, #1
 800cd5c:	408a      	lsls	r2, r1
 800cd5e:	4333      	orrs	r3, r6
 800cd60:	1b41      	subs	r1, r0, r5
 800cd62:	e789      	b.n	800cc78 <__ieee754_sqrt+0x60>
 800cd64:	2000      	movs	r0, #0
 800cd66:	e7ee      	b.n	800cd46 <__ieee754_sqrt+0x12e>
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	3101      	adds	r1, #1
 800cd6c:	e7ef      	b.n	800cd4e <__ieee754_sqrt+0x136>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	3101      	adds	r1, #1
 800cd72:	4399      	bics	r1, r3
 800cd74:	e7d5      	b.n	800cd22 <__ieee754_sqrt+0x10a>
 800cd76:	46c0      	nop			; (mov r8, r8)
 800cd78:	7ff00000 	.word	0x7ff00000
 800cd7c:	fffffc01 	.word	0xfffffc01
 800cd80:	3fe00000 	.word	0x3fe00000

0800cd84 <_init>:
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd86:	46c0      	nop			; (mov r8, r8)
 800cd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8a:	bc08      	pop	{r3}
 800cd8c:	469e      	mov	lr, r3
 800cd8e:	4770      	bx	lr

0800cd90 <_fini>:
 800cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd92:	46c0      	nop			; (mov r8, r8)
 800cd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd96:	bc08      	pop	{r3}
 800cd98:	469e      	mov	lr, r3
 800cd9a:	4770      	bx	lr
