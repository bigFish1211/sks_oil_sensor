
g031_oilSensor_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b80  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  08009c40  08009c40  00019c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a26c  0800a26c  00020234  2**0
                  CONTENTS
  4 .ARM          00000000  0800a26c  0800a26c  00020234  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a26c  0800a26c  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a26c  0800a26c  0001a26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a270  0800a270  0001a270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800a274  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000238  0800a4a8  00020238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  0800a4a8  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b10  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3a  00000000  00000000  00032d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000357a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00036720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019264  00000000  00000000  00037570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013473  00000000  00000000  000507d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c26a  00000000  00000000  00063c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffeb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af8  00000000  00000000  000fff04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000238 	.word	0x20000238
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009c24 	.word	0x08009c24

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000023c 	.word	0x2000023c
 8000100:	08009c24 	.word	0x08009c24

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fdf7 	bl	800202c <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fd47 	bl	8001edc <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fde9 	bl	800202c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fddf 	bl	800202c <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd6f 	bl	8001f60 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd65 	bl	8001f60 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fb73 	bl	8000b98 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 faff 	bl	8000ac0 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fb65 	bl	8000b98 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fb5b 	bl	8000b98 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fb0b 	bl	8000b0c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fb01 	bl	8000b0c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_d2uiz>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	2200      	movs	r2, #0
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <__aeabi_d2uiz+0x38>)
 800051e:	0004      	movs	r4, r0
 8000520:	000d      	movs	r5, r1
 8000522:	f7ff ffb5 	bl	8000490 <__aeabi_dcmpge>
 8000526:	2800      	cmp	r0, #0
 8000528:	d104      	bne.n	8000534 <__aeabi_d2uiz+0x1c>
 800052a:	0020      	movs	r0, r4
 800052c:	0029      	movs	r1, r5
 800052e:	f002 fbfd 	bl	8002d2c <__aeabi_d2iz>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <__aeabi_d2uiz+0x38>)
 8000536:	2200      	movs	r2, #0
 8000538:	0020      	movs	r0, r4
 800053a:	0029      	movs	r1, r5
 800053c:	f002 f846 	bl	80025cc <__aeabi_dsub>
 8000540:	f002 fbf4 	bl	8002d2c <__aeabi_d2iz>
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	061b      	lsls	r3, r3, #24
 8000548:	469c      	mov	ip, r3
 800054a:	4460      	add	r0, ip
 800054c:	e7f1      	b.n	8000532 <__aeabi_d2uiz+0x1a>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	41e00000 	.word	0x41e00000

08000554 <__aeabi_fadd>:
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000556:	46c6      	mov	lr, r8
 8000558:	0243      	lsls	r3, r0, #9
 800055a:	0a5b      	lsrs	r3, r3, #9
 800055c:	024e      	lsls	r6, r1, #9
 800055e:	0045      	lsls	r5, r0, #1
 8000560:	004f      	lsls	r7, r1, #1
 8000562:	00da      	lsls	r2, r3, #3
 8000564:	0fc4      	lsrs	r4, r0, #31
 8000566:	469c      	mov	ip, r3
 8000568:	0a70      	lsrs	r0, r6, #9
 800056a:	4690      	mov	r8, r2
 800056c:	b500      	push	{lr}
 800056e:	0e2d      	lsrs	r5, r5, #24
 8000570:	0e3f      	lsrs	r7, r7, #24
 8000572:	0fc9      	lsrs	r1, r1, #31
 8000574:	09b6      	lsrs	r6, r6, #6
 8000576:	428c      	cmp	r4, r1
 8000578:	d04b      	beq.n	8000612 <__aeabi_fadd+0xbe>
 800057a:	1bea      	subs	r2, r5, r7
 800057c:	2a00      	cmp	r2, #0
 800057e:	dd36      	ble.n	80005ee <__aeabi_fadd+0x9a>
 8000580:	2f00      	cmp	r7, #0
 8000582:	d061      	beq.n	8000648 <__aeabi_fadd+0xf4>
 8000584:	2dff      	cmp	r5, #255	; 0xff
 8000586:	d100      	bne.n	800058a <__aeabi_fadd+0x36>
 8000588:	e0ad      	b.n	80006e6 <__aeabi_fadd+0x192>
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	04db      	lsls	r3, r3, #19
 800058e:	431e      	orrs	r6, r3
 8000590:	2a1b      	cmp	r2, #27
 8000592:	dc00      	bgt.n	8000596 <__aeabi_fadd+0x42>
 8000594:	e0d3      	b.n	800073e <__aeabi_fadd+0x1ea>
 8000596:	2001      	movs	r0, #1
 8000598:	4643      	mov	r3, r8
 800059a:	1a18      	subs	r0, r3, r0
 800059c:	0143      	lsls	r3, r0, #5
 800059e:	d400      	bmi.n	80005a2 <__aeabi_fadd+0x4e>
 80005a0:	e08c      	b.n	80006bc <__aeabi_fadd+0x168>
 80005a2:	0180      	lsls	r0, r0, #6
 80005a4:	0987      	lsrs	r7, r0, #6
 80005a6:	0038      	movs	r0, r7
 80005a8:	f002 fd1c 	bl	8002fe4 <__clzsi2>
 80005ac:	3805      	subs	r0, #5
 80005ae:	4087      	lsls	r7, r0
 80005b0:	4285      	cmp	r5, r0
 80005b2:	dc00      	bgt.n	80005b6 <__aeabi_fadd+0x62>
 80005b4:	e0b6      	b.n	8000724 <__aeabi_fadd+0x1d0>
 80005b6:	1a2d      	subs	r5, r5, r0
 80005b8:	48b3      	ldr	r0, [pc, #716]	; (8000888 <__aeabi_fadd+0x334>)
 80005ba:	4038      	ands	r0, r7
 80005bc:	0743      	lsls	r3, r0, #29
 80005be:	d004      	beq.n	80005ca <__aeabi_fadd+0x76>
 80005c0:	230f      	movs	r3, #15
 80005c2:	4003      	ands	r3, r0
 80005c4:	2b04      	cmp	r3, #4
 80005c6:	d000      	beq.n	80005ca <__aeabi_fadd+0x76>
 80005c8:	3004      	adds	r0, #4
 80005ca:	0143      	lsls	r3, r0, #5
 80005cc:	d400      	bmi.n	80005d0 <__aeabi_fadd+0x7c>
 80005ce:	e078      	b.n	80006c2 <__aeabi_fadd+0x16e>
 80005d0:	1c6a      	adds	r2, r5, #1
 80005d2:	2dfe      	cmp	r5, #254	; 0xfe
 80005d4:	d065      	beq.n	80006a2 <__aeabi_fadd+0x14e>
 80005d6:	0180      	lsls	r0, r0, #6
 80005d8:	0a43      	lsrs	r3, r0, #9
 80005da:	469c      	mov	ip, r3
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	4663      	mov	r3, ip
 80005e0:	05d0      	lsls	r0, r2, #23
 80005e2:	4318      	orrs	r0, r3
 80005e4:	07e4      	lsls	r4, r4, #31
 80005e6:	4320      	orrs	r0, r4
 80005e8:	bc80      	pop	{r7}
 80005ea:	46b8      	mov	r8, r7
 80005ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d035      	beq.n	800065e <__aeabi_fadd+0x10a>
 80005f2:	1b7a      	subs	r2, r7, r5
 80005f4:	2d00      	cmp	r5, #0
 80005f6:	d000      	beq.n	80005fa <__aeabi_fadd+0xa6>
 80005f8:	e0af      	b.n	800075a <__aeabi_fadd+0x206>
 80005fa:	4643      	mov	r3, r8
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0xae>
 8000600:	e0a7      	b.n	8000752 <__aeabi_fadd+0x1fe>
 8000602:	1e53      	subs	r3, r2, #1
 8000604:	2a01      	cmp	r2, #1
 8000606:	d100      	bne.n	800060a <__aeabi_fadd+0xb6>
 8000608:	e12f      	b.n	800086a <__aeabi_fadd+0x316>
 800060a:	2aff      	cmp	r2, #255	; 0xff
 800060c:	d069      	beq.n	80006e2 <__aeabi_fadd+0x18e>
 800060e:	001a      	movs	r2, r3
 8000610:	e0aa      	b.n	8000768 <__aeabi_fadd+0x214>
 8000612:	1be9      	subs	r1, r5, r7
 8000614:	2900      	cmp	r1, #0
 8000616:	dd70      	ble.n	80006fa <__aeabi_fadd+0x1a6>
 8000618:	2f00      	cmp	r7, #0
 800061a:	d037      	beq.n	800068c <__aeabi_fadd+0x138>
 800061c:	2dff      	cmp	r5, #255	; 0xff
 800061e:	d062      	beq.n	80006e6 <__aeabi_fadd+0x192>
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	04db      	lsls	r3, r3, #19
 8000624:	431e      	orrs	r6, r3
 8000626:	291b      	cmp	r1, #27
 8000628:	dc00      	bgt.n	800062c <__aeabi_fadd+0xd8>
 800062a:	e0b0      	b.n	800078e <__aeabi_fadd+0x23a>
 800062c:	2001      	movs	r0, #1
 800062e:	4440      	add	r0, r8
 8000630:	0143      	lsls	r3, r0, #5
 8000632:	d543      	bpl.n	80006bc <__aeabi_fadd+0x168>
 8000634:	3501      	adds	r5, #1
 8000636:	2dff      	cmp	r5, #255	; 0xff
 8000638:	d033      	beq.n	80006a2 <__aeabi_fadd+0x14e>
 800063a:	2301      	movs	r3, #1
 800063c:	4a93      	ldr	r2, [pc, #588]	; (800088c <__aeabi_fadd+0x338>)
 800063e:	4003      	ands	r3, r0
 8000640:	0840      	lsrs	r0, r0, #1
 8000642:	4010      	ands	r0, r2
 8000644:	4318      	orrs	r0, r3
 8000646:	e7b9      	b.n	80005bc <__aeabi_fadd+0x68>
 8000648:	2e00      	cmp	r6, #0
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0xfa>
 800064c:	e083      	b.n	8000756 <__aeabi_fadd+0x202>
 800064e:	1e51      	subs	r1, r2, #1
 8000650:	2a01      	cmp	r2, #1
 8000652:	d100      	bne.n	8000656 <__aeabi_fadd+0x102>
 8000654:	e0d8      	b.n	8000808 <__aeabi_fadd+0x2b4>
 8000656:	2aff      	cmp	r2, #255	; 0xff
 8000658:	d045      	beq.n	80006e6 <__aeabi_fadd+0x192>
 800065a:	000a      	movs	r2, r1
 800065c:	e798      	b.n	8000590 <__aeabi_fadd+0x3c>
 800065e:	27fe      	movs	r7, #254	; 0xfe
 8000660:	1c6a      	adds	r2, r5, #1
 8000662:	4217      	tst	r7, r2
 8000664:	d000      	beq.n	8000668 <__aeabi_fadd+0x114>
 8000666:	e086      	b.n	8000776 <__aeabi_fadd+0x222>
 8000668:	2d00      	cmp	r5, #0
 800066a:	d000      	beq.n	800066e <__aeabi_fadd+0x11a>
 800066c:	e0b7      	b.n	80007de <__aeabi_fadd+0x28a>
 800066e:	4643      	mov	r3, r8
 8000670:	2b00      	cmp	r3, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x122>
 8000674:	e0f3      	b.n	800085e <__aeabi_fadd+0x30a>
 8000676:	2200      	movs	r2, #0
 8000678:	2e00      	cmp	r6, #0
 800067a:	d0b0      	beq.n	80005de <__aeabi_fadd+0x8a>
 800067c:	1b98      	subs	r0, r3, r6
 800067e:	0143      	lsls	r3, r0, #5
 8000680:	d400      	bmi.n	8000684 <__aeabi_fadd+0x130>
 8000682:	e0fa      	b.n	800087a <__aeabi_fadd+0x326>
 8000684:	4643      	mov	r3, r8
 8000686:	000c      	movs	r4, r1
 8000688:	1af0      	subs	r0, r6, r3
 800068a:	e797      	b.n	80005bc <__aeabi_fadd+0x68>
 800068c:	2e00      	cmp	r6, #0
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x13e>
 8000690:	e0c8      	b.n	8000824 <__aeabi_fadd+0x2d0>
 8000692:	1e4a      	subs	r2, r1, #1
 8000694:	2901      	cmp	r1, #1
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x146>
 8000698:	e0ae      	b.n	80007f8 <__aeabi_fadd+0x2a4>
 800069a:	29ff      	cmp	r1, #255	; 0xff
 800069c:	d023      	beq.n	80006e6 <__aeabi_fadd+0x192>
 800069e:	0011      	movs	r1, r2
 80006a0:	e7c1      	b.n	8000626 <__aeabi_fadd+0xd2>
 80006a2:	2300      	movs	r3, #0
 80006a4:	22ff      	movs	r2, #255	; 0xff
 80006a6:	469c      	mov	ip, r3
 80006a8:	e799      	b.n	80005de <__aeabi_fadd+0x8a>
 80006aa:	21fe      	movs	r1, #254	; 0xfe
 80006ac:	1c6a      	adds	r2, r5, #1
 80006ae:	4211      	tst	r1, r2
 80006b0:	d077      	beq.n	80007a2 <__aeabi_fadd+0x24e>
 80006b2:	2aff      	cmp	r2, #255	; 0xff
 80006b4:	d0f5      	beq.n	80006a2 <__aeabi_fadd+0x14e>
 80006b6:	0015      	movs	r5, r2
 80006b8:	4446      	add	r6, r8
 80006ba:	0870      	lsrs	r0, r6, #1
 80006bc:	0743      	lsls	r3, r0, #29
 80006be:	d000      	beq.n	80006c2 <__aeabi_fadd+0x16e>
 80006c0:	e77e      	b.n	80005c0 <__aeabi_fadd+0x6c>
 80006c2:	08c3      	lsrs	r3, r0, #3
 80006c4:	2dff      	cmp	r5, #255	; 0xff
 80006c6:	d00e      	beq.n	80006e6 <__aeabi_fadd+0x192>
 80006c8:	025b      	lsls	r3, r3, #9
 80006ca:	0a5b      	lsrs	r3, r3, #9
 80006cc:	469c      	mov	ip, r3
 80006ce:	b2ea      	uxtb	r2, r5
 80006d0:	e785      	b.n	80005de <__aeabi_fadd+0x8a>
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	d007      	beq.n	80006e6 <__aeabi_fadd+0x192>
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	03d2      	lsls	r2, r2, #15
 80006da:	4213      	tst	r3, r2
 80006dc:	d003      	beq.n	80006e6 <__aeabi_fadd+0x192>
 80006de:	4210      	tst	r0, r2
 80006e0:	d101      	bne.n	80006e6 <__aeabi_fadd+0x192>
 80006e2:	000c      	movs	r4, r1
 80006e4:	0003      	movs	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0db      	beq.n	80006a2 <__aeabi_fadd+0x14e>
 80006ea:	2080      	movs	r0, #128	; 0x80
 80006ec:	03c0      	lsls	r0, r0, #15
 80006ee:	4318      	orrs	r0, r3
 80006f0:	0240      	lsls	r0, r0, #9
 80006f2:	0a43      	lsrs	r3, r0, #9
 80006f4:	469c      	mov	ip, r3
 80006f6:	22ff      	movs	r2, #255	; 0xff
 80006f8:	e771      	b.n	80005de <__aeabi_fadd+0x8a>
 80006fa:	2900      	cmp	r1, #0
 80006fc:	d0d5      	beq.n	80006aa <__aeabi_fadd+0x156>
 80006fe:	1b7a      	subs	r2, r7, r5
 8000700:	2d00      	cmp	r5, #0
 8000702:	d160      	bne.n	80007c6 <__aeabi_fadd+0x272>
 8000704:	4643      	mov	r3, r8
 8000706:	2b00      	cmp	r3, #0
 8000708:	d024      	beq.n	8000754 <__aeabi_fadd+0x200>
 800070a:	1e53      	subs	r3, r2, #1
 800070c:	2a01      	cmp	r2, #1
 800070e:	d073      	beq.n	80007f8 <__aeabi_fadd+0x2a4>
 8000710:	2aff      	cmp	r2, #255	; 0xff
 8000712:	d0e7      	beq.n	80006e4 <__aeabi_fadd+0x190>
 8000714:	001a      	movs	r2, r3
 8000716:	2a1b      	cmp	r2, #27
 8000718:	dc00      	bgt.n	800071c <__aeabi_fadd+0x1c8>
 800071a:	e085      	b.n	8000828 <__aeabi_fadd+0x2d4>
 800071c:	2001      	movs	r0, #1
 800071e:	003d      	movs	r5, r7
 8000720:	1980      	adds	r0, r0, r6
 8000722:	e785      	b.n	8000630 <__aeabi_fadd+0xdc>
 8000724:	2320      	movs	r3, #32
 8000726:	003a      	movs	r2, r7
 8000728:	1b45      	subs	r5, r0, r5
 800072a:	0038      	movs	r0, r7
 800072c:	3501      	adds	r5, #1
 800072e:	40ea      	lsrs	r2, r5
 8000730:	1b5d      	subs	r5, r3, r5
 8000732:	40a8      	lsls	r0, r5
 8000734:	1e43      	subs	r3, r0, #1
 8000736:	4198      	sbcs	r0, r3
 8000738:	2500      	movs	r5, #0
 800073a:	4310      	orrs	r0, r2
 800073c:	e73e      	b.n	80005bc <__aeabi_fadd+0x68>
 800073e:	2320      	movs	r3, #32
 8000740:	0030      	movs	r0, r6
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	0031      	movs	r1, r6
 8000746:	4098      	lsls	r0, r3
 8000748:	40d1      	lsrs	r1, r2
 800074a:	1e43      	subs	r3, r0, #1
 800074c:	4198      	sbcs	r0, r3
 800074e:	4308      	orrs	r0, r1
 8000750:	e722      	b.n	8000598 <__aeabi_fadd+0x44>
 8000752:	000c      	movs	r4, r1
 8000754:	0003      	movs	r3, r0
 8000756:	0015      	movs	r5, r2
 8000758:	e7b4      	b.n	80006c4 <__aeabi_fadd+0x170>
 800075a:	2fff      	cmp	r7, #255	; 0xff
 800075c:	d0c1      	beq.n	80006e2 <__aeabi_fadd+0x18e>
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	4640      	mov	r0, r8
 8000762:	04db      	lsls	r3, r3, #19
 8000764:	4318      	orrs	r0, r3
 8000766:	4680      	mov	r8, r0
 8000768:	2a1b      	cmp	r2, #27
 800076a:	dd51      	ble.n	8000810 <__aeabi_fadd+0x2bc>
 800076c:	2001      	movs	r0, #1
 800076e:	000c      	movs	r4, r1
 8000770:	003d      	movs	r5, r7
 8000772:	1a30      	subs	r0, r6, r0
 8000774:	e712      	b.n	800059c <__aeabi_fadd+0x48>
 8000776:	4643      	mov	r3, r8
 8000778:	1b9f      	subs	r7, r3, r6
 800077a:	017b      	lsls	r3, r7, #5
 800077c:	d42b      	bmi.n	80007d6 <__aeabi_fadd+0x282>
 800077e:	2f00      	cmp	r7, #0
 8000780:	d000      	beq.n	8000784 <__aeabi_fadd+0x230>
 8000782:	e710      	b.n	80005a6 <__aeabi_fadd+0x52>
 8000784:	2300      	movs	r3, #0
 8000786:	2400      	movs	r4, #0
 8000788:	2200      	movs	r2, #0
 800078a:	469c      	mov	ip, r3
 800078c:	e727      	b.n	80005de <__aeabi_fadd+0x8a>
 800078e:	2320      	movs	r3, #32
 8000790:	0032      	movs	r2, r6
 8000792:	0030      	movs	r0, r6
 8000794:	40ca      	lsrs	r2, r1
 8000796:	1a59      	subs	r1, r3, r1
 8000798:	4088      	lsls	r0, r1
 800079a:	1e43      	subs	r3, r0, #1
 800079c:	4198      	sbcs	r0, r3
 800079e:	4310      	orrs	r0, r2
 80007a0:	e745      	b.n	800062e <__aeabi_fadd+0xda>
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d14a      	bne.n	800083c <__aeabi_fadd+0x2e8>
 80007a6:	4643      	mov	r3, r8
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d063      	beq.n	8000874 <__aeabi_fadd+0x320>
 80007ac:	2200      	movs	r2, #0
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x260>
 80007b2:	e714      	b.n	80005de <__aeabi_fadd+0x8a>
 80007b4:	0030      	movs	r0, r6
 80007b6:	4440      	add	r0, r8
 80007b8:	0143      	lsls	r3, r0, #5
 80007ba:	d400      	bmi.n	80007be <__aeabi_fadd+0x26a>
 80007bc:	e77e      	b.n	80006bc <__aeabi_fadd+0x168>
 80007be:	4b32      	ldr	r3, [pc, #200]	; (8000888 <__aeabi_fadd+0x334>)
 80007c0:	3501      	adds	r5, #1
 80007c2:	4018      	ands	r0, r3
 80007c4:	e77a      	b.n	80006bc <__aeabi_fadd+0x168>
 80007c6:	2fff      	cmp	r7, #255	; 0xff
 80007c8:	d08c      	beq.n	80006e4 <__aeabi_fadd+0x190>
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	4641      	mov	r1, r8
 80007ce:	04db      	lsls	r3, r3, #19
 80007d0:	4319      	orrs	r1, r3
 80007d2:	4688      	mov	r8, r1
 80007d4:	e79f      	b.n	8000716 <__aeabi_fadd+0x1c2>
 80007d6:	4643      	mov	r3, r8
 80007d8:	000c      	movs	r4, r1
 80007da:	1af7      	subs	r7, r6, r3
 80007dc:	e6e3      	b.n	80005a6 <__aeabi_fadd+0x52>
 80007de:	4642      	mov	r2, r8
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	d000      	beq.n	80007e6 <__aeabi_fadd+0x292>
 80007e4:	e775      	b.n	80006d2 <__aeabi_fadd+0x17e>
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d000      	beq.n	80007ec <__aeabi_fadd+0x298>
 80007ea:	e77a      	b.n	80006e2 <__aeabi_fadd+0x18e>
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	03db      	lsls	r3, r3, #15
 80007f0:	2400      	movs	r4, #0
 80007f2:	469c      	mov	ip, r3
 80007f4:	22ff      	movs	r2, #255	; 0xff
 80007f6:	e6f2      	b.n	80005de <__aeabi_fadd+0x8a>
 80007f8:	0030      	movs	r0, r6
 80007fa:	4440      	add	r0, r8
 80007fc:	2501      	movs	r5, #1
 80007fe:	0143      	lsls	r3, r0, #5
 8000800:	d400      	bmi.n	8000804 <__aeabi_fadd+0x2b0>
 8000802:	e75b      	b.n	80006bc <__aeabi_fadd+0x168>
 8000804:	2502      	movs	r5, #2
 8000806:	e718      	b.n	800063a <__aeabi_fadd+0xe6>
 8000808:	4643      	mov	r3, r8
 800080a:	2501      	movs	r5, #1
 800080c:	1b98      	subs	r0, r3, r6
 800080e:	e6c5      	b.n	800059c <__aeabi_fadd+0x48>
 8000810:	2320      	movs	r3, #32
 8000812:	4644      	mov	r4, r8
 8000814:	4640      	mov	r0, r8
 8000816:	40d4      	lsrs	r4, r2
 8000818:	1a9a      	subs	r2, r3, r2
 800081a:	4090      	lsls	r0, r2
 800081c:	1e43      	subs	r3, r0, #1
 800081e:	4198      	sbcs	r0, r3
 8000820:	4320      	orrs	r0, r4
 8000822:	e7a4      	b.n	800076e <__aeabi_fadd+0x21a>
 8000824:	000d      	movs	r5, r1
 8000826:	e74d      	b.n	80006c4 <__aeabi_fadd+0x170>
 8000828:	2320      	movs	r3, #32
 800082a:	4641      	mov	r1, r8
 800082c:	4640      	mov	r0, r8
 800082e:	40d1      	lsrs	r1, r2
 8000830:	1a9a      	subs	r2, r3, r2
 8000832:	4090      	lsls	r0, r2
 8000834:	1e43      	subs	r3, r0, #1
 8000836:	4198      	sbcs	r0, r3
 8000838:	4308      	orrs	r0, r1
 800083a:	e770      	b.n	800071e <__aeabi_fadd+0x1ca>
 800083c:	4642      	mov	r2, r8
 800083e:	2a00      	cmp	r2, #0
 8000840:	d100      	bne.n	8000844 <__aeabi_fadd+0x2f0>
 8000842:	e74f      	b.n	80006e4 <__aeabi_fadd+0x190>
 8000844:	2e00      	cmp	r6, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fadd+0x2f6>
 8000848:	e74d      	b.n	80006e6 <__aeabi_fadd+0x192>
 800084a:	2280      	movs	r2, #128	; 0x80
 800084c:	03d2      	lsls	r2, r2, #15
 800084e:	4213      	tst	r3, r2
 8000850:	d100      	bne.n	8000854 <__aeabi_fadd+0x300>
 8000852:	e748      	b.n	80006e6 <__aeabi_fadd+0x192>
 8000854:	4210      	tst	r0, r2
 8000856:	d000      	beq.n	800085a <__aeabi_fadd+0x306>
 8000858:	e745      	b.n	80006e6 <__aeabi_fadd+0x192>
 800085a:	0003      	movs	r3, r0
 800085c:	e743      	b.n	80006e6 <__aeabi_fadd+0x192>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d090      	beq.n	8000784 <__aeabi_fadd+0x230>
 8000862:	000c      	movs	r4, r1
 8000864:	4684      	mov	ip, r0
 8000866:	2200      	movs	r2, #0
 8000868:	e6b9      	b.n	80005de <__aeabi_fadd+0x8a>
 800086a:	4643      	mov	r3, r8
 800086c:	000c      	movs	r4, r1
 800086e:	1af0      	subs	r0, r6, r3
 8000870:	3501      	adds	r5, #1
 8000872:	e693      	b.n	800059c <__aeabi_fadd+0x48>
 8000874:	4684      	mov	ip, r0
 8000876:	2200      	movs	r2, #0
 8000878:	e6b1      	b.n	80005de <__aeabi_fadd+0x8a>
 800087a:	2800      	cmp	r0, #0
 800087c:	d000      	beq.n	8000880 <__aeabi_fadd+0x32c>
 800087e:	e71d      	b.n	80006bc <__aeabi_fadd+0x168>
 8000880:	2300      	movs	r3, #0
 8000882:	2400      	movs	r4, #0
 8000884:	469c      	mov	ip, r3
 8000886:	e6aa      	b.n	80005de <__aeabi_fadd+0x8a>
 8000888:	fbffffff 	.word	0xfbffffff
 800088c:	7dffffff 	.word	0x7dffffff

08000890 <__aeabi_fdiv>:
 8000890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000892:	464f      	mov	r7, r9
 8000894:	4646      	mov	r6, r8
 8000896:	46d6      	mov	lr, sl
 8000898:	0245      	lsls	r5, r0, #9
 800089a:	b5c0      	push	{r6, r7, lr}
 800089c:	0047      	lsls	r7, r0, #1
 800089e:	1c0c      	adds	r4, r1, #0
 80008a0:	0a6d      	lsrs	r5, r5, #9
 80008a2:	0e3f      	lsrs	r7, r7, #24
 80008a4:	0fc6      	lsrs	r6, r0, #31
 80008a6:	2f00      	cmp	r7, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_fdiv+0x1c>
 80008aa:	e070      	b.n	800098e <__aeabi_fdiv+0xfe>
 80008ac:	2fff      	cmp	r7, #255	; 0xff
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fdiv+0x22>
 80008b0:	e075      	b.n	800099e <__aeabi_fdiv+0x10e>
 80008b2:	00eb      	lsls	r3, r5, #3
 80008b4:	2580      	movs	r5, #128	; 0x80
 80008b6:	04ed      	lsls	r5, r5, #19
 80008b8:	431d      	orrs	r5, r3
 80008ba:	2300      	movs	r3, #0
 80008bc:	4699      	mov	r9, r3
 80008be:	469a      	mov	sl, r3
 80008c0:	3f7f      	subs	r7, #127	; 0x7f
 80008c2:	0260      	lsls	r0, r4, #9
 80008c4:	0a43      	lsrs	r3, r0, #9
 80008c6:	4698      	mov	r8, r3
 80008c8:	0063      	lsls	r3, r4, #1
 80008ca:	0e1b      	lsrs	r3, r3, #24
 80008cc:	0fe4      	lsrs	r4, r4, #31
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d04e      	beq.n	8000970 <__aeabi_fdiv+0xe0>
 80008d2:	2bff      	cmp	r3, #255	; 0xff
 80008d4:	d046      	beq.n	8000964 <__aeabi_fdiv+0xd4>
 80008d6:	4642      	mov	r2, r8
 80008d8:	00d0      	lsls	r0, r2, #3
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	04d2      	lsls	r2, r2, #19
 80008de:	4302      	orrs	r2, r0
 80008e0:	4690      	mov	r8, r2
 80008e2:	2200      	movs	r2, #0
 80008e4:	3b7f      	subs	r3, #127	; 0x7f
 80008e6:	0031      	movs	r1, r6
 80008e8:	1aff      	subs	r7, r7, r3
 80008ea:	464b      	mov	r3, r9
 80008ec:	4061      	eors	r1, r4
 80008ee:	b2c9      	uxtb	r1, r1
 80008f0:	4313      	orrs	r3, r2
 80008f2:	2b0f      	cmp	r3, #15
 80008f4:	d900      	bls.n	80008f8 <__aeabi_fdiv+0x68>
 80008f6:	e0b5      	b.n	8000a64 <__aeabi_fdiv+0x1d4>
 80008f8:	486e      	ldr	r0, [pc, #440]	; (8000ab4 <__aeabi_fdiv+0x224>)
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	58c3      	ldr	r3, [r0, r3]
 80008fe:	469f      	mov	pc, r3
 8000900:	2300      	movs	r3, #0
 8000902:	4698      	mov	r8, r3
 8000904:	0026      	movs	r6, r4
 8000906:	4645      	mov	r5, r8
 8000908:	4692      	mov	sl, r2
 800090a:	4653      	mov	r3, sl
 800090c:	2b02      	cmp	r3, #2
 800090e:	d100      	bne.n	8000912 <__aeabi_fdiv+0x82>
 8000910:	e089      	b.n	8000a26 <__aeabi_fdiv+0x196>
 8000912:	2b03      	cmp	r3, #3
 8000914:	d100      	bne.n	8000918 <__aeabi_fdiv+0x88>
 8000916:	e09e      	b.n	8000a56 <__aeabi_fdiv+0x1c6>
 8000918:	2b01      	cmp	r3, #1
 800091a:	d018      	beq.n	800094e <__aeabi_fdiv+0xbe>
 800091c:	003b      	movs	r3, r7
 800091e:	337f      	adds	r3, #127	; 0x7f
 8000920:	2b00      	cmp	r3, #0
 8000922:	dd69      	ble.n	80009f8 <__aeabi_fdiv+0x168>
 8000924:	076a      	lsls	r2, r5, #29
 8000926:	d004      	beq.n	8000932 <__aeabi_fdiv+0xa2>
 8000928:	220f      	movs	r2, #15
 800092a:	402a      	ands	r2, r5
 800092c:	2a04      	cmp	r2, #4
 800092e:	d000      	beq.n	8000932 <__aeabi_fdiv+0xa2>
 8000930:	3504      	adds	r5, #4
 8000932:	012a      	lsls	r2, r5, #4
 8000934:	d503      	bpl.n	800093e <__aeabi_fdiv+0xae>
 8000936:	4b60      	ldr	r3, [pc, #384]	; (8000ab8 <__aeabi_fdiv+0x228>)
 8000938:	401d      	ands	r5, r3
 800093a:	003b      	movs	r3, r7
 800093c:	3380      	adds	r3, #128	; 0x80
 800093e:	2bfe      	cmp	r3, #254	; 0xfe
 8000940:	dd00      	ble.n	8000944 <__aeabi_fdiv+0xb4>
 8000942:	e070      	b.n	8000a26 <__aeabi_fdiv+0x196>
 8000944:	01ad      	lsls	r5, r5, #6
 8000946:	0a6d      	lsrs	r5, r5, #9
 8000948:	b2d8      	uxtb	r0, r3
 800094a:	e002      	b.n	8000952 <__aeabi_fdiv+0xc2>
 800094c:	000e      	movs	r6, r1
 800094e:	2000      	movs	r0, #0
 8000950:	2500      	movs	r5, #0
 8000952:	05c0      	lsls	r0, r0, #23
 8000954:	4328      	orrs	r0, r5
 8000956:	07f6      	lsls	r6, r6, #31
 8000958:	4330      	orrs	r0, r6
 800095a:	bce0      	pop	{r5, r6, r7}
 800095c:	46ba      	mov	sl, r7
 800095e:	46b1      	mov	r9, r6
 8000960:	46a8      	mov	r8, r5
 8000962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000964:	4643      	mov	r3, r8
 8000966:	2b00      	cmp	r3, #0
 8000968:	d13f      	bne.n	80009ea <__aeabi_fdiv+0x15a>
 800096a:	2202      	movs	r2, #2
 800096c:	3fff      	subs	r7, #255	; 0xff
 800096e:	e003      	b.n	8000978 <__aeabi_fdiv+0xe8>
 8000970:	4643      	mov	r3, r8
 8000972:	2b00      	cmp	r3, #0
 8000974:	d12d      	bne.n	80009d2 <__aeabi_fdiv+0x142>
 8000976:	2201      	movs	r2, #1
 8000978:	0031      	movs	r1, r6
 800097a:	464b      	mov	r3, r9
 800097c:	4061      	eors	r1, r4
 800097e:	b2c9      	uxtb	r1, r1
 8000980:	4313      	orrs	r3, r2
 8000982:	2b0f      	cmp	r3, #15
 8000984:	d834      	bhi.n	80009f0 <__aeabi_fdiv+0x160>
 8000986:	484d      	ldr	r0, [pc, #308]	; (8000abc <__aeabi_fdiv+0x22c>)
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	58c3      	ldr	r3, [r0, r3]
 800098c:	469f      	mov	pc, r3
 800098e:	2d00      	cmp	r5, #0
 8000990:	d113      	bne.n	80009ba <__aeabi_fdiv+0x12a>
 8000992:	2304      	movs	r3, #4
 8000994:	4699      	mov	r9, r3
 8000996:	3b03      	subs	r3, #3
 8000998:	2700      	movs	r7, #0
 800099a:	469a      	mov	sl, r3
 800099c:	e791      	b.n	80008c2 <__aeabi_fdiv+0x32>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d105      	bne.n	80009ae <__aeabi_fdiv+0x11e>
 80009a2:	2308      	movs	r3, #8
 80009a4:	4699      	mov	r9, r3
 80009a6:	3b06      	subs	r3, #6
 80009a8:	27ff      	movs	r7, #255	; 0xff
 80009aa:	469a      	mov	sl, r3
 80009ac:	e789      	b.n	80008c2 <__aeabi_fdiv+0x32>
 80009ae:	230c      	movs	r3, #12
 80009b0:	4699      	mov	r9, r3
 80009b2:	3b09      	subs	r3, #9
 80009b4:	27ff      	movs	r7, #255	; 0xff
 80009b6:	469a      	mov	sl, r3
 80009b8:	e783      	b.n	80008c2 <__aeabi_fdiv+0x32>
 80009ba:	0028      	movs	r0, r5
 80009bc:	f002 fb12 	bl	8002fe4 <__clzsi2>
 80009c0:	2776      	movs	r7, #118	; 0x76
 80009c2:	1f43      	subs	r3, r0, #5
 80009c4:	409d      	lsls	r5, r3
 80009c6:	2300      	movs	r3, #0
 80009c8:	427f      	negs	r7, r7
 80009ca:	4699      	mov	r9, r3
 80009cc:	469a      	mov	sl, r3
 80009ce:	1a3f      	subs	r7, r7, r0
 80009d0:	e777      	b.n	80008c2 <__aeabi_fdiv+0x32>
 80009d2:	4640      	mov	r0, r8
 80009d4:	f002 fb06 	bl	8002fe4 <__clzsi2>
 80009d8:	4642      	mov	r2, r8
 80009da:	1f43      	subs	r3, r0, #5
 80009dc:	409a      	lsls	r2, r3
 80009de:	2376      	movs	r3, #118	; 0x76
 80009e0:	425b      	negs	r3, r3
 80009e2:	4690      	mov	r8, r2
 80009e4:	1a1b      	subs	r3, r3, r0
 80009e6:	2200      	movs	r2, #0
 80009e8:	e77d      	b.n	80008e6 <__aeabi_fdiv+0x56>
 80009ea:	23ff      	movs	r3, #255	; 0xff
 80009ec:	2203      	movs	r2, #3
 80009ee:	e77a      	b.n	80008e6 <__aeabi_fdiv+0x56>
 80009f0:	000e      	movs	r6, r1
 80009f2:	20ff      	movs	r0, #255	; 0xff
 80009f4:	2500      	movs	r5, #0
 80009f6:	e7ac      	b.n	8000952 <__aeabi_fdiv+0xc2>
 80009f8:	2001      	movs	r0, #1
 80009fa:	1ac0      	subs	r0, r0, r3
 80009fc:	281b      	cmp	r0, #27
 80009fe:	dca6      	bgt.n	800094e <__aeabi_fdiv+0xbe>
 8000a00:	379e      	adds	r7, #158	; 0x9e
 8000a02:	002a      	movs	r2, r5
 8000a04:	40bd      	lsls	r5, r7
 8000a06:	40c2      	lsrs	r2, r0
 8000a08:	1e6b      	subs	r3, r5, #1
 8000a0a:	419d      	sbcs	r5, r3
 8000a0c:	4315      	orrs	r5, r2
 8000a0e:	076b      	lsls	r3, r5, #29
 8000a10:	d004      	beq.n	8000a1c <__aeabi_fdiv+0x18c>
 8000a12:	230f      	movs	r3, #15
 8000a14:	402b      	ands	r3, r5
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fdiv+0x18c>
 8000a1a:	3504      	adds	r5, #4
 8000a1c:	016b      	lsls	r3, r5, #5
 8000a1e:	d544      	bpl.n	8000aaa <__aeabi_fdiv+0x21a>
 8000a20:	2001      	movs	r0, #1
 8000a22:	2500      	movs	r5, #0
 8000a24:	e795      	b.n	8000952 <__aeabi_fdiv+0xc2>
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	2500      	movs	r5, #0
 8000a2a:	e792      	b.n	8000952 <__aeabi_fdiv+0xc2>
 8000a2c:	2580      	movs	r5, #128	; 0x80
 8000a2e:	2600      	movs	r6, #0
 8000a30:	20ff      	movs	r0, #255	; 0xff
 8000a32:	03ed      	lsls	r5, r5, #15
 8000a34:	e78d      	b.n	8000952 <__aeabi_fdiv+0xc2>
 8000a36:	2300      	movs	r3, #0
 8000a38:	4698      	mov	r8, r3
 8000a3a:	2080      	movs	r0, #128	; 0x80
 8000a3c:	03c0      	lsls	r0, r0, #15
 8000a3e:	4205      	tst	r5, r0
 8000a40:	d009      	beq.n	8000a56 <__aeabi_fdiv+0x1c6>
 8000a42:	4643      	mov	r3, r8
 8000a44:	4203      	tst	r3, r0
 8000a46:	d106      	bne.n	8000a56 <__aeabi_fdiv+0x1c6>
 8000a48:	4645      	mov	r5, r8
 8000a4a:	4305      	orrs	r5, r0
 8000a4c:	026d      	lsls	r5, r5, #9
 8000a4e:	0026      	movs	r6, r4
 8000a50:	20ff      	movs	r0, #255	; 0xff
 8000a52:	0a6d      	lsrs	r5, r5, #9
 8000a54:	e77d      	b.n	8000952 <__aeabi_fdiv+0xc2>
 8000a56:	2080      	movs	r0, #128	; 0x80
 8000a58:	03c0      	lsls	r0, r0, #15
 8000a5a:	4305      	orrs	r5, r0
 8000a5c:	026d      	lsls	r5, r5, #9
 8000a5e:	20ff      	movs	r0, #255	; 0xff
 8000a60:	0a6d      	lsrs	r5, r5, #9
 8000a62:	e776      	b.n	8000952 <__aeabi_fdiv+0xc2>
 8000a64:	4642      	mov	r2, r8
 8000a66:	016b      	lsls	r3, r5, #5
 8000a68:	0150      	lsls	r0, r2, #5
 8000a6a:	4283      	cmp	r3, r0
 8000a6c:	d219      	bcs.n	8000aa2 <__aeabi_fdiv+0x212>
 8000a6e:	221b      	movs	r2, #27
 8000a70:	2500      	movs	r5, #0
 8000a72:	3f01      	subs	r7, #1
 8000a74:	2601      	movs	r6, #1
 8000a76:	001c      	movs	r4, r3
 8000a78:	006d      	lsls	r5, r5, #1
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	2c00      	cmp	r4, #0
 8000a7e:	db01      	blt.n	8000a84 <__aeabi_fdiv+0x1f4>
 8000a80:	4298      	cmp	r0, r3
 8000a82:	d801      	bhi.n	8000a88 <__aeabi_fdiv+0x1f8>
 8000a84:	1a1b      	subs	r3, r3, r0
 8000a86:	4335      	orrs	r5, r6
 8000a88:	3a01      	subs	r2, #1
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d1f3      	bne.n	8000a76 <__aeabi_fdiv+0x1e6>
 8000a8e:	1e5a      	subs	r2, r3, #1
 8000a90:	4193      	sbcs	r3, r2
 8000a92:	431d      	orrs	r5, r3
 8000a94:	003b      	movs	r3, r7
 8000a96:	337f      	adds	r3, #127	; 0x7f
 8000a98:	000e      	movs	r6, r1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	dd00      	ble.n	8000aa0 <__aeabi_fdiv+0x210>
 8000a9e:	e741      	b.n	8000924 <__aeabi_fdiv+0x94>
 8000aa0:	e7aa      	b.n	80009f8 <__aeabi_fdiv+0x168>
 8000aa2:	221a      	movs	r2, #26
 8000aa4:	2501      	movs	r5, #1
 8000aa6:	1a1b      	subs	r3, r3, r0
 8000aa8:	e7e4      	b.n	8000a74 <__aeabi_fdiv+0x1e4>
 8000aaa:	01ad      	lsls	r5, r5, #6
 8000aac:	2000      	movs	r0, #0
 8000aae:	0a6d      	lsrs	r5, r5, #9
 8000ab0:	e74f      	b.n	8000952 <__aeabi_fdiv+0xc2>
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	08009d00 	.word	0x08009d00
 8000ab8:	f7ffffff 	.word	0xf7ffffff
 8000abc:	08009d40 	.word	0x08009d40

08000ac0 <__eqsf2>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	0042      	lsls	r2, r0, #1
 8000ac4:	0245      	lsls	r5, r0, #9
 8000ac6:	024e      	lsls	r6, r1, #9
 8000ac8:	004c      	lsls	r4, r1, #1
 8000aca:	0fc3      	lsrs	r3, r0, #31
 8000acc:	0a6d      	lsrs	r5, r5, #9
 8000ace:	2001      	movs	r0, #1
 8000ad0:	0e12      	lsrs	r2, r2, #24
 8000ad2:	0a76      	lsrs	r6, r6, #9
 8000ad4:	0e24      	lsrs	r4, r4, #24
 8000ad6:	0fc9      	lsrs	r1, r1, #31
 8000ad8:	2aff      	cmp	r2, #255	; 0xff
 8000ada:	d006      	beq.n	8000aea <__eqsf2+0x2a>
 8000adc:	2cff      	cmp	r4, #255	; 0xff
 8000ade:	d003      	beq.n	8000ae8 <__eqsf2+0x28>
 8000ae0:	42a2      	cmp	r2, r4
 8000ae2:	d101      	bne.n	8000ae8 <__eqsf2+0x28>
 8000ae4:	42b5      	cmp	r5, r6
 8000ae6:	d006      	beq.n	8000af6 <__eqsf2+0x36>
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d1fc      	bne.n	8000ae8 <__eqsf2+0x28>
 8000aee:	2cff      	cmp	r4, #255	; 0xff
 8000af0:	d1fa      	bne.n	8000ae8 <__eqsf2+0x28>
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d1f8      	bne.n	8000ae8 <__eqsf2+0x28>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d006      	beq.n	8000b08 <__eqsf2+0x48>
 8000afa:	2001      	movs	r0, #1
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d1f3      	bne.n	8000ae8 <__eqsf2+0x28>
 8000b00:	0028      	movs	r0, r5
 8000b02:	1e43      	subs	r3, r0, #1
 8000b04:	4198      	sbcs	r0, r3
 8000b06:	e7ef      	b.n	8000ae8 <__eqsf2+0x28>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	e7ed      	b.n	8000ae8 <__eqsf2+0x28>

08000b0c <__gesf2>:
 8000b0c:	b570      	push	{r4, r5, r6, lr}
 8000b0e:	0042      	lsls	r2, r0, #1
 8000b10:	0245      	lsls	r5, r0, #9
 8000b12:	024e      	lsls	r6, r1, #9
 8000b14:	004c      	lsls	r4, r1, #1
 8000b16:	0fc3      	lsrs	r3, r0, #31
 8000b18:	0a6d      	lsrs	r5, r5, #9
 8000b1a:	0e12      	lsrs	r2, r2, #24
 8000b1c:	0a76      	lsrs	r6, r6, #9
 8000b1e:	0e24      	lsrs	r4, r4, #24
 8000b20:	0fc8      	lsrs	r0, r1, #31
 8000b22:	2aff      	cmp	r2, #255	; 0xff
 8000b24:	d01b      	beq.n	8000b5e <__gesf2+0x52>
 8000b26:	2cff      	cmp	r4, #255	; 0xff
 8000b28:	d00e      	beq.n	8000b48 <__gesf2+0x3c>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d11b      	bne.n	8000b66 <__gesf2+0x5a>
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d101      	bne.n	8000b36 <__gesf2+0x2a>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d01c      	beq.n	8000b70 <__gesf2+0x64>
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d00c      	beq.n	8000b54 <__gesf2+0x48>
 8000b3a:	4283      	cmp	r3, r0
 8000b3c:	d01c      	beq.n	8000b78 <__gesf2+0x6c>
 8000b3e:	2102      	movs	r1, #2
 8000b40:	1e58      	subs	r0, r3, #1
 8000b42:	4008      	ands	r0, r1
 8000b44:	3801      	subs	r0, #1
 8000b46:	bd70      	pop	{r4, r5, r6, pc}
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d122      	bne.n	8000b92 <__gesf2+0x86>
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	d1f4      	bne.n	8000b3a <__gesf2+0x2e>
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d1f2      	bne.n	8000b3a <__gesf2+0x2e>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d1f6      	bne.n	8000b46 <__gesf2+0x3a>
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	e7f3      	b.n	8000b46 <__gesf2+0x3a>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d117      	bne.n	8000b92 <__gesf2+0x86>
 8000b62:	2cff      	cmp	r4, #255	; 0xff
 8000b64:	d0f0      	beq.n	8000b48 <__gesf2+0x3c>
 8000b66:	2c00      	cmp	r4, #0
 8000b68:	d1e7      	bne.n	8000b3a <__gesf2+0x2e>
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d1e5      	bne.n	8000b3a <__gesf2+0x2e>
 8000b6e:	e7e6      	b.n	8000b3e <__gesf2+0x32>
 8000b70:	2000      	movs	r0, #0
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	d0e7      	beq.n	8000b46 <__gesf2+0x3a>
 8000b76:	e7e2      	b.n	8000b3e <__gesf2+0x32>
 8000b78:	42a2      	cmp	r2, r4
 8000b7a:	dc05      	bgt.n	8000b88 <__gesf2+0x7c>
 8000b7c:	dbea      	blt.n	8000b54 <__gesf2+0x48>
 8000b7e:	42b5      	cmp	r5, r6
 8000b80:	d802      	bhi.n	8000b88 <__gesf2+0x7c>
 8000b82:	d3e7      	bcc.n	8000b54 <__gesf2+0x48>
 8000b84:	2000      	movs	r0, #0
 8000b86:	e7de      	b.n	8000b46 <__gesf2+0x3a>
 8000b88:	4243      	negs	r3, r0
 8000b8a:	4158      	adcs	r0, r3
 8000b8c:	0040      	lsls	r0, r0, #1
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7d9      	b.n	8000b46 <__gesf2+0x3a>
 8000b92:	2002      	movs	r0, #2
 8000b94:	4240      	negs	r0, r0
 8000b96:	e7d6      	b.n	8000b46 <__gesf2+0x3a>

08000b98 <__lesf2>:
 8000b98:	b570      	push	{r4, r5, r6, lr}
 8000b9a:	0042      	lsls	r2, r0, #1
 8000b9c:	0245      	lsls	r5, r0, #9
 8000b9e:	024e      	lsls	r6, r1, #9
 8000ba0:	004c      	lsls	r4, r1, #1
 8000ba2:	0fc3      	lsrs	r3, r0, #31
 8000ba4:	0a6d      	lsrs	r5, r5, #9
 8000ba6:	0e12      	lsrs	r2, r2, #24
 8000ba8:	0a76      	lsrs	r6, r6, #9
 8000baa:	0e24      	lsrs	r4, r4, #24
 8000bac:	0fc8      	lsrs	r0, r1, #31
 8000bae:	2aff      	cmp	r2, #255	; 0xff
 8000bb0:	d00b      	beq.n	8000bca <__lesf2+0x32>
 8000bb2:	2cff      	cmp	r4, #255	; 0xff
 8000bb4:	d00d      	beq.n	8000bd2 <__lesf2+0x3a>
 8000bb6:	2a00      	cmp	r2, #0
 8000bb8:	d11f      	bne.n	8000bfa <__lesf2+0x62>
 8000bba:	2c00      	cmp	r4, #0
 8000bbc:	d116      	bne.n	8000bec <__lesf2+0x54>
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d114      	bne.n	8000bec <__lesf2+0x54>
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	2d00      	cmp	r5, #0
 8000bc6:	d010      	beq.n	8000bea <__lesf2+0x52>
 8000bc8:	e009      	b.n	8000bde <__lesf2+0x46>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d10c      	bne.n	8000be8 <__lesf2+0x50>
 8000bce:	2cff      	cmp	r4, #255	; 0xff
 8000bd0:	d113      	bne.n	8000bfa <__lesf2+0x62>
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d108      	bne.n	8000be8 <__lesf2+0x50>
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d008      	beq.n	8000bec <__lesf2+0x54>
 8000bda:	4283      	cmp	r3, r0
 8000bdc:	d012      	beq.n	8000c04 <__lesf2+0x6c>
 8000bde:	2102      	movs	r1, #2
 8000be0:	1e58      	subs	r0, r3, #1
 8000be2:	4008      	ands	r0, r1
 8000be4:	3801      	subs	r0, #1
 8000be6:	e000      	b.n	8000bea <__lesf2+0x52>
 8000be8:	2002      	movs	r0, #2
 8000bea:	bd70      	pop	{r4, r5, r6, pc}
 8000bec:	2d00      	cmp	r5, #0
 8000bee:	d1f4      	bne.n	8000bda <__lesf2+0x42>
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	d1fa      	bne.n	8000bea <__lesf2+0x52>
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	e7f7      	b.n	8000bea <__lesf2+0x52>
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d1ed      	bne.n	8000bda <__lesf2+0x42>
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d1eb      	bne.n	8000bda <__lesf2+0x42>
 8000c02:	e7ec      	b.n	8000bde <__lesf2+0x46>
 8000c04:	42a2      	cmp	r2, r4
 8000c06:	dc05      	bgt.n	8000c14 <__lesf2+0x7c>
 8000c08:	dbf2      	blt.n	8000bf0 <__lesf2+0x58>
 8000c0a:	42b5      	cmp	r5, r6
 8000c0c:	d802      	bhi.n	8000c14 <__lesf2+0x7c>
 8000c0e:	d3ef      	bcc.n	8000bf0 <__lesf2+0x58>
 8000c10:	2000      	movs	r0, #0
 8000c12:	e7ea      	b.n	8000bea <__lesf2+0x52>
 8000c14:	4243      	negs	r3, r0
 8000c16:	4158      	adcs	r0, r3
 8000c18:	0040      	lsls	r0, r0, #1
 8000c1a:	3801      	subs	r0, #1
 8000c1c:	e7e5      	b.n	8000bea <__lesf2+0x52>
 8000c1e:	46c0      	nop			; (mov r8, r8)

08000c20 <__aeabi_fmul>:
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	464f      	mov	r7, r9
 8000c24:	4646      	mov	r6, r8
 8000c26:	46d6      	mov	lr, sl
 8000c28:	0244      	lsls	r4, r0, #9
 8000c2a:	0045      	lsls	r5, r0, #1
 8000c2c:	b5c0      	push	{r6, r7, lr}
 8000c2e:	0a64      	lsrs	r4, r4, #9
 8000c30:	1c0f      	adds	r7, r1, #0
 8000c32:	0e2d      	lsrs	r5, r5, #24
 8000c34:	0fc6      	lsrs	r6, r0, #31
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fmul+0x1c>
 8000c3a:	e08d      	b.n	8000d58 <__aeabi_fmul+0x138>
 8000c3c:	2dff      	cmp	r5, #255	; 0xff
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_fmul+0x22>
 8000c40:	e092      	b.n	8000d68 <__aeabi_fmul+0x148>
 8000c42:	2300      	movs	r3, #0
 8000c44:	2080      	movs	r0, #128	; 0x80
 8000c46:	4699      	mov	r9, r3
 8000c48:	469a      	mov	sl, r3
 8000c4a:	00e4      	lsls	r4, r4, #3
 8000c4c:	04c0      	lsls	r0, r0, #19
 8000c4e:	4304      	orrs	r4, r0
 8000c50:	3d7f      	subs	r5, #127	; 0x7f
 8000c52:	0278      	lsls	r0, r7, #9
 8000c54:	0a43      	lsrs	r3, r0, #9
 8000c56:	4698      	mov	r8, r3
 8000c58:	007b      	lsls	r3, r7, #1
 8000c5a:	0e1b      	lsrs	r3, r3, #24
 8000c5c:	0fff      	lsrs	r7, r7, #31
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fmul+0x44>
 8000c62:	e070      	b.n	8000d46 <__aeabi_fmul+0x126>
 8000c64:	2bff      	cmp	r3, #255	; 0xff
 8000c66:	d100      	bne.n	8000c6a <__aeabi_fmul+0x4a>
 8000c68:	e086      	b.n	8000d78 <__aeabi_fmul+0x158>
 8000c6a:	4642      	mov	r2, r8
 8000c6c:	00d0      	lsls	r0, r2, #3
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	3b7f      	subs	r3, #127	; 0x7f
 8000c72:	18ed      	adds	r5, r5, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	04d2      	lsls	r2, r2, #19
 8000c78:	4302      	orrs	r2, r0
 8000c7a:	4690      	mov	r8, r2
 8000c7c:	469c      	mov	ip, r3
 8000c7e:	0031      	movs	r1, r6
 8000c80:	464b      	mov	r3, r9
 8000c82:	4079      	eors	r1, r7
 8000c84:	1c68      	adds	r0, r5, #1
 8000c86:	2b0f      	cmp	r3, #15
 8000c88:	d81c      	bhi.n	8000cc4 <__aeabi_fmul+0xa4>
 8000c8a:	4a76      	ldr	r2, [pc, #472]	; (8000e64 <__aeabi_fmul+0x244>)
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	58d3      	ldr	r3, [r2, r3]
 8000c90:	469f      	mov	pc, r3
 8000c92:	0039      	movs	r1, r7
 8000c94:	4644      	mov	r4, r8
 8000c96:	46e2      	mov	sl, ip
 8000c98:	4653      	mov	r3, sl
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d00f      	beq.n	8000cbe <__aeabi_fmul+0x9e>
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fmul+0x84>
 8000ca2:	e0d7      	b.n	8000e54 <__aeabi_fmul+0x234>
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d137      	bne.n	8000d18 <__aeabi_fmul+0xf8>
 8000ca8:	2000      	movs	r0, #0
 8000caa:	2400      	movs	r4, #0
 8000cac:	05c0      	lsls	r0, r0, #23
 8000cae:	4320      	orrs	r0, r4
 8000cb0:	07c9      	lsls	r1, r1, #31
 8000cb2:	4308      	orrs	r0, r1
 8000cb4:	bce0      	pop	{r5, r6, r7}
 8000cb6:	46ba      	mov	sl, r7
 8000cb8:	46b1      	mov	r9, r6
 8000cba:	46a8      	mov	r8, r5
 8000cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cbe:	20ff      	movs	r0, #255	; 0xff
 8000cc0:	2400      	movs	r4, #0
 8000cc2:	e7f3      	b.n	8000cac <__aeabi_fmul+0x8c>
 8000cc4:	0c26      	lsrs	r6, r4, #16
 8000cc6:	0424      	lsls	r4, r4, #16
 8000cc8:	0c22      	lsrs	r2, r4, #16
 8000cca:	4644      	mov	r4, r8
 8000ccc:	0424      	lsls	r4, r4, #16
 8000cce:	0c24      	lsrs	r4, r4, #16
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	0027      	movs	r7, r4
 8000cd4:	0c1b      	lsrs	r3, r3, #16
 8000cd6:	4357      	muls	r7, r2
 8000cd8:	4374      	muls	r4, r6
 8000cda:	435a      	muls	r2, r3
 8000cdc:	435e      	muls	r6, r3
 8000cde:	1912      	adds	r2, r2, r4
 8000ce0:	0c3b      	lsrs	r3, r7, #16
 8000ce2:	189b      	adds	r3, r3, r2
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	d903      	bls.n	8000cf0 <__aeabi_fmul+0xd0>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	0252      	lsls	r2, r2, #9
 8000cec:	4694      	mov	ip, r2
 8000cee:	4466      	add	r6, ip
 8000cf0:	043f      	lsls	r7, r7, #16
 8000cf2:	041a      	lsls	r2, r3, #16
 8000cf4:	0c3f      	lsrs	r7, r7, #16
 8000cf6:	19d2      	adds	r2, r2, r7
 8000cf8:	0194      	lsls	r4, r2, #6
 8000cfa:	1e67      	subs	r7, r4, #1
 8000cfc:	41bc      	sbcs	r4, r7
 8000cfe:	0c1b      	lsrs	r3, r3, #16
 8000d00:	0e92      	lsrs	r2, r2, #26
 8000d02:	199b      	adds	r3, r3, r6
 8000d04:	4314      	orrs	r4, r2
 8000d06:	019b      	lsls	r3, r3, #6
 8000d08:	431c      	orrs	r4, r3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	d400      	bmi.n	8000d10 <__aeabi_fmul+0xf0>
 8000d0e:	e09b      	b.n	8000e48 <__aeabi_fmul+0x228>
 8000d10:	2301      	movs	r3, #1
 8000d12:	0862      	lsrs	r2, r4, #1
 8000d14:	401c      	ands	r4, r3
 8000d16:	4314      	orrs	r4, r2
 8000d18:	0002      	movs	r2, r0
 8000d1a:	327f      	adds	r2, #127	; 0x7f
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	dd64      	ble.n	8000dea <__aeabi_fmul+0x1ca>
 8000d20:	0763      	lsls	r3, r4, #29
 8000d22:	d004      	beq.n	8000d2e <__aeabi_fmul+0x10e>
 8000d24:	230f      	movs	r3, #15
 8000d26:	4023      	ands	r3, r4
 8000d28:	2b04      	cmp	r3, #4
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_fmul+0x10e>
 8000d2c:	3404      	adds	r4, #4
 8000d2e:	0123      	lsls	r3, r4, #4
 8000d30:	d503      	bpl.n	8000d3a <__aeabi_fmul+0x11a>
 8000d32:	0002      	movs	r2, r0
 8000d34:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <__aeabi_fmul+0x248>)
 8000d36:	3280      	adds	r2, #128	; 0x80
 8000d38:	401c      	ands	r4, r3
 8000d3a:	2afe      	cmp	r2, #254	; 0xfe
 8000d3c:	dcbf      	bgt.n	8000cbe <__aeabi_fmul+0x9e>
 8000d3e:	01a4      	lsls	r4, r4, #6
 8000d40:	0a64      	lsrs	r4, r4, #9
 8000d42:	b2d0      	uxtb	r0, r2
 8000d44:	e7b2      	b.n	8000cac <__aeabi_fmul+0x8c>
 8000d46:	4643      	mov	r3, r8
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d13d      	bne.n	8000dc8 <__aeabi_fmul+0x1a8>
 8000d4c:	464a      	mov	r2, r9
 8000d4e:	3301      	adds	r3, #1
 8000d50:	431a      	orrs	r2, r3
 8000d52:	4691      	mov	r9, r2
 8000d54:	469c      	mov	ip, r3
 8000d56:	e792      	b.n	8000c7e <__aeabi_fmul+0x5e>
 8000d58:	2c00      	cmp	r4, #0
 8000d5a:	d129      	bne.n	8000db0 <__aeabi_fmul+0x190>
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	4699      	mov	r9, r3
 8000d60:	3b03      	subs	r3, #3
 8000d62:	2500      	movs	r5, #0
 8000d64:	469a      	mov	sl, r3
 8000d66:	e774      	b.n	8000c52 <__aeabi_fmul+0x32>
 8000d68:	2c00      	cmp	r4, #0
 8000d6a:	d11b      	bne.n	8000da4 <__aeabi_fmul+0x184>
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	4699      	mov	r9, r3
 8000d70:	3b06      	subs	r3, #6
 8000d72:	25ff      	movs	r5, #255	; 0xff
 8000d74:	469a      	mov	sl, r3
 8000d76:	e76c      	b.n	8000c52 <__aeabi_fmul+0x32>
 8000d78:	4643      	mov	r3, r8
 8000d7a:	35ff      	adds	r5, #255	; 0xff
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10b      	bne.n	8000d98 <__aeabi_fmul+0x178>
 8000d80:	2302      	movs	r3, #2
 8000d82:	464a      	mov	r2, r9
 8000d84:	431a      	orrs	r2, r3
 8000d86:	4691      	mov	r9, r2
 8000d88:	469c      	mov	ip, r3
 8000d8a:	e778      	b.n	8000c7e <__aeabi_fmul+0x5e>
 8000d8c:	4653      	mov	r3, sl
 8000d8e:	0031      	movs	r1, r6
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d000      	beq.n	8000d96 <__aeabi_fmul+0x176>
 8000d94:	e783      	b.n	8000c9e <__aeabi_fmul+0x7e>
 8000d96:	e792      	b.n	8000cbe <__aeabi_fmul+0x9e>
 8000d98:	2303      	movs	r3, #3
 8000d9a:	464a      	mov	r2, r9
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	4691      	mov	r9, r2
 8000da0:	469c      	mov	ip, r3
 8000da2:	e76c      	b.n	8000c7e <__aeabi_fmul+0x5e>
 8000da4:	230c      	movs	r3, #12
 8000da6:	4699      	mov	r9, r3
 8000da8:	3b09      	subs	r3, #9
 8000daa:	25ff      	movs	r5, #255	; 0xff
 8000dac:	469a      	mov	sl, r3
 8000dae:	e750      	b.n	8000c52 <__aeabi_fmul+0x32>
 8000db0:	0020      	movs	r0, r4
 8000db2:	f002 f917 	bl	8002fe4 <__clzsi2>
 8000db6:	2576      	movs	r5, #118	; 0x76
 8000db8:	1f43      	subs	r3, r0, #5
 8000dba:	409c      	lsls	r4, r3
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	426d      	negs	r5, r5
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	469a      	mov	sl, r3
 8000dc4:	1a2d      	subs	r5, r5, r0
 8000dc6:	e744      	b.n	8000c52 <__aeabi_fmul+0x32>
 8000dc8:	4640      	mov	r0, r8
 8000dca:	f002 f90b 	bl	8002fe4 <__clzsi2>
 8000dce:	4642      	mov	r2, r8
 8000dd0:	1f43      	subs	r3, r0, #5
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	1a2d      	subs	r5, r5, r0
 8000dd8:	4690      	mov	r8, r2
 8000dda:	469c      	mov	ip, r3
 8000ddc:	3d76      	subs	r5, #118	; 0x76
 8000dde:	e74e      	b.n	8000c7e <__aeabi_fmul+0x5e>
 8000de0:	2480      	movs	r4, #128	; 0x80
 8000de2:	2100      	movs	r1, #0
 8000de4:	20ff      	movs	r0, #255	; 0xff
 8000de6:	03e4      	lsls	r4, r4, #15
 8000de8:	e760      	b.n	8000cac <__aeabi_fmul+0x8c>
 8000dea:	2301      	movs	r3, #1
 8000dec:	1a9b      	subs	r3, r3, r2
 8000dee:	2b1b      	cmp	r3, #27
 8000df0:	dd00      	ble.n	8000df4 <__aeabi_fmul+0x1d4>
 8000df2:	e759      	b.n	8000ca8 <__aeabi_fmul+0x88>
 8000df4:	0022      	movs	r2, r4
 8000df6:	309e      	adds	r0, #158	; 0x9e
 8000df8:	40da      	lsrs	r2, r3
 8000dfa:	4084      	lsls	r4, r0
 8000dfc:	0013      	movs	r3, r2
 8000dfe:	1e62      	subs	r2, r4, #1
 8000e00:	4194      	sbcs	r4, r2
 8000e02:	431c      	orrs	r4, r3
 8000e04:	0763      	lsls	r3, r4, #29
 8000e06:	d004      	beq.n	8000e12 <__aeabi_fmul+0x1f2>
 8000e08:	230f      	movs	r3, #15
 8000e0a:	4023      	ands	r3, r4
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d000      	beq.n	8000e12 <__aeabi_fmul+0x1f2>
 8000e10:	3404      	adds	r4, #4
 8000e12:	0163      	lsls	r3, r4, #5
 8000e14:	d51a      	bpl.n	8000e4c <__aeabi_fmul+0x22c>
 8000e16:	2001      	movs	r0, #1
 8000e18:	2400      	movs	r4, #0
 8000e1a:	e747      	b.n	8000cac <__aeabi_fmul+0x8c>
 8000e1c:	2080      	movs	r0, #128	; 0x80
 8000e1e:	03c0      	lsls	r0, r0, #15
 8000e20:	4204      	tst	r4, r0
 8000e22:	d009      	beq.n	8000e38 <__aeabi_fmul+0x218>
 8000e24:	4643      	mov	r3, r8
 8000e26:	4203      	tst	r3, r0
 8000e28:	d106      	bne.n	8000e38 <__aeabi_fmul+0x218>
 8000e2a:	4644      	mov	r4, r8
 8000e2c:	4304      	orrs	r4, r0
 8000e2e:	0264      	lsls	r4, r4, #9
 8000e30:	0039      	movs	r1, r7
 8000e32:	20ff      	movs	r0, #255	; 0xff
 8000e34:	0a64      	lsrs	r4, r4, #9
 8000e36:	e739      	b.n	8000cac <__aeabi_fmul+0x8c>
 8000e38:	2080      	movs	r0, #128	; 0x80
 8000e3a:	03c0      	lsls	r0, r0, #15
 8000e3c:	4304      	orrs	r4, r0
 8000e3e:	0264      	lsls	r4, r4, #9
 8000e40:	0031      	movs	r1, r6
 8000e42:	20ff      	movs	r0, #255	; 0xff
 8000e44:	0a64      	lsrs	r4, r4, #9
 8000e46:	e731      	b.n	8000cac <__aeabi_fmul+0x8c>
 8000e48:	0028      	movs	r0, r5
 8000e4a:	e765      	b.n	8000d18 <__aeabi_fmul+0xf8>
 8000e4c:	01a4      	lsls	r4, r4, #6
 8000e4e:	2000      	movs	r0, #0
 8000e50:	0a64      	lsrs	r4, r4, #9
 8000e52:	e72b      	b.n	8000cac <__aeabi_fmul+0x8c>
 8000e54:	2080      	movs	r0, #128	; 0x80
 8000e56:	03c0      	lsls	r0, r0, #15
 8000e58:	4304      	orrs	r4, r0
 8000e5a:	0264      	lsls	r4, r4, #9
 8000e5c:	20ff      	movs	r0, #255	; 0xff
 8000e5e:	0a64      	lsrs	r4, r4, #9
 8000e60:	e724      	b.n	8000cac <__aeabi_fmul+0x8c>
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	08009d80 	.word	0x08009d80
 8000e68:	f7ffffff 	.word	0xf7ffffff

08000e6c <__aeabi_fsub>:
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6e:	46ce      	mov	lr, r9
 8000e70:	4647      	mov	r7, r8
 8000e72:	0243      	lsls	r3, r0, #9
 8000e74:	0a5b      	lsrs	r3, r3, #9
 8000e76:	024e      	lsls	r6, r1, #9
 8000e78:	00da      	lsls	r2, r3, #3
 8000e7a:	4694      	mov	ip, r2
 8000e7c:	0a72      	lsrs	r2, r6, #9
 8000e7e:	4691      	mov	r9, r2
 8000e80:	0045      	lsls	r5, r0, #1
 8000e82:	004a      	lsls	r2, r1, #1
 8000e84:	b580      	push	{r7, lr}
 8000e86:	0e2d      	lsrs	r5, r5, #24
 8000e88:	001f      	movs	r7, r3
 8000e8a:	0fc4      	lsrs	r4, r0, #31
 8000e8c:	0e12      	lsrs	r2, r2, #24
 8000e8e:	0fc9      	lsrs	r1, r1, #31
 8000e90:	09b6      	lsrs	r6, r6, #6
 8000e92:	2aff      	cmp	r2, #255	; 0xff
 8000e94:	d05b      	beq.n	8000f4e <__aeabi_fsub+0xe2>
 8000e96:	2001      	movs	r0, #1
 8000e98:	4041      	eors	r1, r0
 8000e9a:	428c      	cmp	r4, r1
 8000e9c:	d039      	beq.n	8000f12 <__aeabi_fsub+0xa6>
 8000e9e:	1aa8      	subs	r0, r5, r2
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	dd5a      	ble.n	8000f5a <__aeabi_fsub+0xee>
 8000ea4:	2a00      	cmp	r2, #0
 8000ea6:	d06a      	beq.n	8000f7e <__aeabi_fsub+0x112>
 8000ea8:	2dff      	cmp	r5, #255	; 0xff
 8000eaa:	d100      	bne.n	8000eae <__aeabi_fsub+0x42>
 8000eac:	e0d9      	b.n	8001062 <__aeabi_fsub+0x1f6>
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	04d2      	lsls	r2, r2, #19
 8000eb2:	4316      	orrs	r6, r2
 8000eb4:	281b      	cmp	r0, #27
 8000eb6:	dc00      	bgt.n	8000eba <__aeabi_fsub+0x4e>
 8000eb8:	e0e9      	b.n	800108e <__aeabi_fsub+0x222>
 8000eba:	2001      	movs	r0, #1
 8000ebc:	4663      	mov	r3, ip
 8000ebe:	1a18      	subs	r0, r3, r0
 8000ec0:	0143      	lsls	r3, r0, #5
 8000ec2:	d400      	bmi.n	8000ec6 <__aeabi_fsub+0x5a>
 8000ec4:	e0b4      	b.n	8001030 <__aeabi_fsub+0x1c4>
 8000ec6:	0180      	lsls	r0, r0, #6
 8000ec8:	0987      	lsrs	r7, r0, #6
 8000eca:	0038      	movs	r0, r7
 8000ecc:	f002 f88a 	bl	8002fe4 <__clzsi2>
 8000ed0:	3805      	subs	r0, #5
 8000ed2:	4087      	lsls	r7, r0
 8000ed4:	4285      	cmp	r5, r0
 8000ed6:	dc00      	bgt.n	8000eda <__aeabi_fsub+0x6e>
 8000ed8:	e0cc      	b.n	8001074 <__aeabi_fsub+0x208>
 8000eda:	1a2d      	subs	r5, r5, r0
 8000edc:	48b5      	ldr	r0, [pc, #724]	; (80011b4 <__aeabi_fsub+0x348>)
 8000ede:	4038      	ands	r0, r7
 8000ee0:	0743      	lsls	r3, r0, #29
 8000ee2:	d004      	beq.n	8000eee <__aeabi_fsub+0x82>
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	4003      	ands	r3, r0
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d000      	beq.n	8000eee <__aeabi_fsub+0x82>
 8000eec:	3004      	adds	r0, #4
 8000eee:	0143      	lsls	r3, r0, #5
 8000ef0:	d400      	bmi.n	8000ef4 <__aeabi_fsub+0x88>
 8000ef2:	e0a0      	b.n	8001036 <__aeabi_fsub+0x1ca>
 8000ef4:	1c6a      	adds	r2, r5, #1
 8000ef6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x90>
 8000efa:	e08d      	b.n	8001018 <__aeabi_fsub+0x1ac>
 8000efc:	0180      	lsls	r0, r0, #6
 8000efe:	0a47      	lsrs	r7, r0, #9
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	05d0      	lsls	r0, r2, #23
 8000f04:	4338      	orrs	r0, r7
 8000f06:	07e4      	lsls	r4, r4, #31
 8000f08:	4320      	orrs	r0, r4
 8000f0a:	bcc0      	pop	{r6, r7}
 8000f0c:	46b9      	mov	r9, r7
 8000f0e:	46b0      	mov	r8, r6
 8000f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f12:	1aa8      	subs	r0, r5, r2
 8000f14:	4680      	mov	r8, r0
 8000f16:	2800      	cmp	r0, #0
 8000f18:	dd45      	ble.n	8000fa6 <__aeabi_fsub+0x13a>
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d070      	beq.n	8001000 <__aeabi_fsub+0x194>
 8000f1e:	2dff      	cmp	r5, #255	; 0xff
 8000f20:	d100      	bne.n	8000f24 <__aeabi_fsub+0xb8>
 8000f22:	e09e      	b.n	8001062 <__aeabi_fsub+0x1f6>
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	04db      	lsls	r3, r3, #19
 8000f28:	431e      	orrs	r6, r3
 8000f2a:	4643      	mov	r3, r8
 8000f2c:	2b1b      	cmp	r3, #27
 8000f2e:	dc00      	bgt.n	8000f32 <__aeabi_fsub+0xc6>
 8000f30:	e0d2      	b.n	80010d8 <__aeabi_fsub+0x26c>
 8000f32:	2001      	movs	r0, #1
 8000f34:	4460      	add	r0, ip
 8000f36:	0143      	lsls	r3, r0, #5
 8000f38:	d57a      	bpl.n	8001030 <__aeabi_fsub+0x1c4>
 8000f3a:	3501      	adds	r5, #1
 8000f3c:	2dff      	cmp	r5, #255	; 0xff
 8000f3e:	d06b      	beq.n	8001018 <__aeabi_fsub+0x1ac>
 8000f40:	2301      	movs	r3, #1
 8000f42:	4a9d      	ldr	r2, [pc, #628]	; (80011b8 <__aeabi_fsub+0x34c>)
 8000f44:	4003      	ands	r3, r0
 8000f46:	0840      	lsrs	r0, r0, #1
 8000f48:	4010      	ands	r0, r2
 8000f4a:	4318      	orrs	r0, r3
 8000f4c:	e7c8      	b.n	8000ee0 <__aeabi_fsub+0x74>
 8000f4e:	2e00      	cmp	r6, #0
 8000f50:	d020      	beq.n	8000f94 <__aeabi_fsub+0x128>
 8000f52:	428c      	cmp	r4, r1
 8000f54:	d023      	beq.n	8000f9e <__aeabi_fsub+0x132>
 8000f56:	0028      	movs	r0, r5
 8000f58:	38ff      	subs	r0, #255	; 0xff
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d039      	beq.n	8000fd2 <__aeabi_fsub+0x166>
 8000f5e:	1b57      	subs	r7, r2, r5
 8000f60:	2d00      	cmp	r5, #0
 8000f62:	d000      	beq.n	8000f66 <__aeabi_fsub+0xfa>
 8000f64:	e09d      	b.n	80010a2 <__aeabi_fsub+0x236>
 8000f66:	4663      	mov	r3, ip
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x102>
 8000f6c:	e0db      	b.n	8001126 <__aeabi_fsub+0x2ba>
 8000f6e:	1e7b      	subs	r3, r7, #1
 8000f70:	2f01      	cmp	r7, #1
 8000f72:	d100      	bne.n	8000f76 <__aeabi_fsub+0x10a>
 8000f74:	e10d      	b.n	8001192 <__aeabi_fsub+0x326>
 8000f76:	2fff      	cmp	r7, #255	; 0xff
 8000f78:	d071      	beq.n	800105e <__aeabi_fsub+0x1f2>
 8000f7a:	001f      	movs	r7, r3
 8000f7c:	e098      	b.n	80010b0 <__aeabi_fsub+0x244>
 8000f7e:	2e00      	cmp	r6, #0
 8000f80:	d100      	bne.n	8000f84 <__aeabi_fsub+0x118>
 8000f82:	e0a7      	b.n	80010d4 <__aeabi_fsub+0x268>
 8000f84:	1e42      	subs	r2, r0, #1
 8000f86:	2801      	cmp	r0, #1
 8000f88:	d100      	bne.n	8000f8c <__aeabi_fsub+0x120>
 8000f8a:	e0e6      	b.n	800115a <__aeabi_fsub+0x2ee>
 8000f8c:	28ff      	cmp	r0, #255	; 0xff
 8000f8e:	d068      	beq.n	8001062 <__aeabi_fsub+0x1f6>
 8000f90:	0010      	movs	r0, r2
 8000f92:	e78f      	b.n	8000eb4 <__aeabi_fsub+0x48>
 8000f94:	2001      	movs	r0, #1
 8000f96:	4041      	eors	r1, r0
 8000f98:	42a1      	cmp	r1, r4
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_fsub+0x132>
 8000f9c:	e77f      	b.n	8000e9e <__aeabi_fsub+0x32>
 8000f9e:	20ff      	movs	r0, #255	; 0xff
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	4680      	mov	r8, r0
 8000fa4:	44a8      	add	r8, r5
 8000fa6:	4640      	mov	r0, r8
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	d038      	beq.n	800101e <__aeabi_fsub+0x1b2>
 8000fac:	1b51      	subs	r1, r2, r5
 8000fae:	2d00      	cmp	r5, #0
 8000fb0:	d100      	bne.n	8000fb4 <__aeabi_fsub+0x148>
 8000fb2:	e0ae      	b.n	8001112 <__aeabi_fsub+0x2a6>
 8000fb4:	2aff      	cmp	r2, #255	; 0xff
 8000fb6:	d100      	bne.n	8000fba <__aeabi_fsub+0x14e>
 8000fb8:	e0df      	b.n	800117a <__aeabi_fsub+0x30e>
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	4660      	mov	r0, ip
 8000fbe:	04db      	lsls	r3, r3, #19
 8000fc0:	4318      	orrs	r0, r3
 8000fc2:	4684      	mov	ip, r0
 8000fc4:	291b      	cmp	r1, #27
 8000fc6:	dc00      	bgt.n	8000fca <__aeabi_fsub+0x15e>
 8000fc8:	e0d9      	b.n	800117e <__aeabi_fsub+0x312>
 8000fca:	2001      	movs	r0, #1
 8000fcc:	0015      	movs	r5, r2
 8000fce:	1980      	adds	r0, r0, r6
 8000fd0:	e7b1      	b.n	8000f36 <__aeabi_fsub+0xca>
 8000fd2:	20fe      	movs	r0, #254	; 0xfe
 8000fd4:	1c6a      	adds	r2, r5, #1
 8000fd6:	4210      	tst	r0, r2
 8000fd8:	d171      	bne.n	80010be <__aeabi_fsub+0x252>
 8000fda:	2d00      	cmp	r5, #0
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_fsub+0x174>
 8000fde:	e0a6      	b.n	800112e <__aeabi_fsub+0x2c2>
 8000fe0:	4663      	mov	r3, ip
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x17c>
 8000fe6:	e0d9      	b.n	800119c <__aeabi_fsub+0x330>
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2e00      	cmp	r6, #0
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_fsub+0x184>
 8000fee:	e788      	b.n	8000f02 <__aeabi_fsub+0x96>
 8000ff0:	1b98      	subs	r0, r3, r6
 8000ff2:	0143      	lsls	r3, r0, #5
 8000ff4:	d400      	bmi.n	8000ff8 <__aeabi_fsub+0x18c>
 8000ff6:	e0e1      	b.n	80011bc <__aeabi_fsub+0x350>
 8000ff8:	4663      	mov	r3, ip
 8000ffa:	000c      	movs	r4, r1
 8000ffc:	1af0      	subs	r0, r6, r3
 8000ffe:	e76f      	b.n	8000ee0 <__aeabi_fsub+0x74>
 8001000:	2e00      	cmp	r6, #0
 8001002:	d100      	bne.n	8001006 <__aeabi_fsub+0x19a>
 8001004:	e0b7      	b.n	8001176 <__aeabi_fsub+0x30a>
 8001006:	0002      	movs	r2, r0
 8001008:	3a01      	subs	r2, #1
 800100a:	2801      	cmp	r0, #1
 800100c:	d100      	bne.n	8001010 <__aeabi_fsub+0x1a4>
 800100e:	e09c      	b.n	800114a <__aeabi_fsub+0x2de>
 8001010:	28ff      	cmp	r0, #255	; 0xff
 8001012:	d026      	beq.n	8001062 <__aeabi_fsub+0x1f6>
 8001014:	4690      	mov	r8, r2
 8001016:	e788      	b.n	8000f2a <__aeabi_fsub+0xbe>
 8001018:	22ff      	movs	r2, #255	; 0xff
 800101a:	2700      	movs	r7, #0
 800101c:	e771      	b.n	8000f02 <__aeabi_fsub+0x96>
 800101e:	20fe      	movs	r0, #254	; 0xfe
 8001020:	1c6a      	adds	r2, r5, #1
 8001022:	4210      	tst	r0, r2
 8001024:	d064      	beq.n	80010f0 <__aeabi_fsub+0x284>
 8001026:	2aff      	cmp	r2, #255	; 0xff
 8001028:	d0f6      	beq.n	8001018 <__aeabi_fsub+0x1ac>
 800102a:	0015      	movs	r5, r2
 800102c:	4466      	add	r6, ip
 800102e:	0870      	lsrs	r0, r6, #1
 8001030:	0743      	lsls	r3, r0, #29
 8001032:	d000      	beq.n	8001036 <__aeabi_fsub+0x1ca>
 8001034:	e756      	b.n	8000ee4 <__aeabi_fsub+0x78>
 8001036:	08c3      	lsrs	r3, r0, #3
 8001038:	2dff      	cmp	r5, #255	; 0xff
 800103a:	d012      	beq.n	8001062 <__aeabi_fsub+0x1f6>
 800103c:	025b      	lsls	r3, r3, #9
 800103e:	0a5f      	lsrs	r7, r3, #9
 8001040:	b2ea      	uxtb	r2, r5
 8001042:	e75e      	b.n	8000f02 <__aeabi_fsub+0x96>
 8001044:	4662      	mov	r2, ip
 8001046:	2a00      	cmp	r2, #0
 8001048:	d100      	bne.n	800104c <__aeabi_fsub+0x1e0>
 800104a:	e096      	b.n	800117a <__aeabi_fsub+0x30e>
 800104c:	2e00      	cmp	r6, #0
 800104e:	d008      	beq.n	8001062 <__aeabi_fsub+0x1f6>
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	03d2      	lsls	r2, r2, #15
 8001054:	4213      	tst	r3, r2
 8001056:	d004      	beq.n	8001062 <__aeabi_fsub+0x1f6>
 8001058:	4648      	mov	r0, r9
 800105a:	4210      	tst	r0, r2
 800105c:	d101      	bne.n	8001062 <__aeabi_fsub+0x1f6>
 800105e:	000c      	movs	r4, r1
 8001060:	464b      	mov	r3, r9
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0d8      	beq.n	8001018 <__aeabi_fsub+0x1ac>
 8001066:	2780      	movs	r7, #128	; 0x80
 8001068:	03ff      	lsls	r7, r7, #15
 800106a:	431f      	orrs	r7, r3
 800106c:	027f      	lsls	r7, r7, #9
 800106e:	22ff      	movs	r2, #255	; 0xff
 8001070:	0a7f      	lsrs	r7, r7, #9
 8001072:	e746      	b.n	8000f02 <__aeabi_fsub+0x96>
 8001074:	2320      	movs	r3, #32
 8001076:	003a      	movs	r2, r7
 8001078:	1b45      	subs	r5, r0, r5
 800107a:	0038      	movs	r0, r7
 800107c:	3501      	adds	r5, #1
 800107e:	40ea      	lsrs	r2, r5
 8001080:	1b5d      	subs	r5, r3, r5
 8001082:	40a8      	lsls	r0, r5
 8001084:	1e43      	subs	r3, r0, #1
 8001086:	4198      	sbcs	r0, r3
 8001088:	2500      	movs	r5, #0
 800108a:	4310      	orrs	r0, r2
 800108c:	e728      	b.n	8000ee0 <__aeabi_fsub+0x74>
 800108e:	2320      	movs	r3, #32
 8001090:	1a1b      	subs	r3, r3, r0
 8001092:	0032      	movs	r2, r6
 8001094:	409e      	lsls	r6, r3
 8001096:	40c2      	lsrs	r2, r0
 8001098:	0030      	movs	r0, r6
 800109a:	1e43      	subs	r3, r0, #1
 800109c:	4198      	sbcs	r0, r3
 800109e:	4310      	orrs	r0, r2
 80010a0:	e70c      	b.n	8000ebc <__aeabi_fsub+0x50>
 80010a2:	2aff      	cmp	r2, #255	; 0xff
 80010a4:	d0db      	beq.n	800105e <__aeabi_fsub+0x1f2>
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	4660      	mov	r0, ip
 80010aa:	04db      	lsls	r3, r3, #19
 80010ac:	4318      	orrs	r0, r3
 80010ae:	4684      	mov	ip, r0
 80010b0:	2f1b      	cmp	r7, #27
 80010b2:	dd56      	ble.n	8001162 <__aeabi_fsub+0x2f6>
 80010b4:	2001      	movs	r0, #1
 80010b6:	000c      	movs	r4, r1
 80010b8:	0015      	movs	r5, r2
 80010ba:	1a30      	subs	r0, r6, r0
 80010bc:	e700      	b.n	8000ec0 <__aeabi_fsub+0x54>
 80010be:	4663      	mov	r3, ip
 80010c0:	1b9f      	subs	r7, r3, r6
 80010c2:	017b      	lsls	r3, r7, #5
 80010c4:	d43d      	bmi.n	8001142 <__aeabi_fsub+0x2d6>
 80010c6:	2f00      	cmp	r7, #0
 80010c8:	d000      	beq.n	80010cc <__aeabi_fsub+0x260>
 80010ca:	e6fe      	b.n	8000eca <__aeabi_fsub+0x5e>
 80010cc:	2400      	movs	r4, #0
 80010ce:	2200      	movs	r2, #0
 80010d0:	2700      	movs	r7, #0
 80010d2:	e716      	b.n	8000f02 <__aeabi_fsub+0x96>
 80010d4:	0005      	movs	r5, r0
 80010d6:	e7af      	b.n	8001038 <__aeabi_fsub+0x1cc>
 80010d8:	0032      	movs	r2, r6
 80010da:	4643      	mov	r3, r8
 80010dc:	4641      	mov	r1, r8
 80010de:	40da      	lsrs	r2, r3
 80010e0:	2320      	movs	r3, #32
 80010e2:	1a5b      	subs	r3, r3, r1
 80010e4:	409e      	lsls	r6, r3
 80010e6:	0030      	movs	r0, r6
 80010e8:	1e43      	subs	r3, r0, #1
 80010ea:	4198      	sbcs	r0, r3
 80010ec:	4310      	orrs	r0, r2
 80010ee:	e721      	b.n	8000f34 <__aeabi_fsub+0xc8>
 80010f0:	2d00      	cmp	r5, #0
 80010f2:	d1a7      	bne.n	8001044 <__aeabi_fsub+0x1d8>
 80010f4:	4663      	mov	r3, ip
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d059      	beq.n	80011ae <__aeabi_fsub+0x342>
 80010fa:	2200      	movs	r2, #0
 80010fc:	2e00      	cmp	r6, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_fsub+0x296>
 8001100:	e6ff      	b.n	8000f02 <__aeabi_fsub+0x96>
 8001102:	0030      	movs	r0, r6
 8001104:	4460      	add	r0, ip
 8001106:	0143      	lsls	r3, r0, #5
 8001108:	d592      	bpl.n	8001030 <__aeabi_fsub+0x1c4>
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <__aeabi_fsub+0x348>)
 800110c:	3501      	adds	r5, #1
 800110e:	4018      	ands	r0, r3
 8001110:	e78e      	b.n	8001030 <__aeabi_fsub+0x1c4>
 8001112:	4663      	mov	r3, ip
 8001114:	2b00      	cmp	r3, #0
 8001116:	d047      	beq.n	80011a8 <__aeabi_fsub+0x33c>
 8001118:	1e4b      	subs	r3, r1, #1
 800111a:	2901      	cmp	r1, #1
 800111c:	d015      	beq.n	800114a <__aeabi_fsub+0x2de>
 800111e:	29ff      	cmp	r1, #255	; 0xff
 8001120:	d02b      	beq.n	800117a <__aeabi_fsub+0x30e>
 8001122:	0019      	movs	r1, r3
 8001124:	e74e      	b.n	8000fc4 <__aeabi_fsub+0x158>
 8001126:	000c      	movs	r4, r1
 8001128:	464b      	mov	r3, r9
 800112a:	003d      	movs	r5, r7
 800112c:	e784      	b.n	8001038 <__aeabi_fsub+0x1cc>
 800112e:	4662      	mov	r2, ip
 8001130:	2a00      	cmp	r2, #0
 8001132:	d18b      	bne.n	800104c <__aeabi_fsub+0x1e0>
 8001134:	2e00      	cmp	r6, #0
 8001136:	d192      	bne.n	800105e <__aeabi_fsub+0x1f2>
 8001138:	2780      	movs	r7, #128	; 0x80
 800113a:	2400      	movs	r4, #0
 800113c:	22ff      	movs	r2, #255	; 0xff
 800113e:	03ff      	lsls	r7, r7, #15
 8001140:	e6df      	b.n	8000f02 <__aeabi_fsub+0x96>
 8001142:	4663      	mov	r3, ip
 8001144:	000c      	movs	r4, r1
 8001146:	1af7      	subs	r7, r6, r3
 8001148:	e6bf      	b.n	8000eca <__aeabi_fsub+0x5e>
 800114a:	0030      	movs	r0, r6
 800114c:	4460      	add	r0, ip
 800114e:	2501      	movs	r5, #1
 8001150:	0143      	lsls	r3, r0, #5
 8001152:	d400      	bmi.n	8001156 <__aeabi_fsub+0x2ea>
 8001154:	e76c      	b.n	8001030 <__aeabi_fsub+0x1c4>
 8001156:	2502      	movs	r5, #2
 8001158:	e6f2      	b.n	8000f40 <__aeabi_fsub+0xd4>
 800115a:	4663      	mov	r3, ip
 800115c:	2501      	movs	r5, #1
 800115e:	1b98      	subs	r0, r3, r6
 8001160:	e6ae      	b.n	8000ec0 <__aeabi_fsub+0x54>
 8001162:	2320      	movs	r3, #32
 8001164:	4664      	mov	r4, ip
 8001166:	4660      	mov	r0, ip
 8001168:	40fc      	lsrs	r4, r7
 800116a:	1bdf      	subs	r7, r3, r7
 800116c:	40b8      	lsls	r0, r7
 800116e:	1e43      	subs	r3, r0, #1
 8001170:	4198      	sbcs	r0, r3
 8001172:	4320      	orrs	r0, r4
 8001174:	e79f      	b.n	80010b6 <__aeabi_fsub+0x24a>
 8001176:	0005      	movs	r5, r0
 8001178:	e75e      	b.n	8001038 <__aeabi_fsub+0x1cc>
 800117a:	464b      	mov	r3, r9
 800117c:	e771      	b.n	8001062 <__aeabi_fsub+0x1f6>
 800117e:	2320      	movs	r3, #32
 8001180:	4665      	mov	r5, ip
 8001182:	4660      	mov	r0, ip
 8001184:	40cd      	lsrs	r5, r1
 8001186:	1a59      	subs	r1, r3, r1
 8001188:	4088      	lsls	r0, r1
 800118a:	1e43      	subs	r3, r0, #1
 800118c:	4198      	sbcs	r0, r3
 800118e:	4328      	orrs	r0, r5
 8001190:	e71c      	b.n	8000fcc <__aeabi_fsub+0x160>
 8001192:	4663      	mov	r3, ip
 8001194:	000c      	movs	r4, r1
 8001196:	2501      	movs	r5, #1
 8001198:	1af0      	subs	r0, r6, r3
 800119a:	e691      	b.n	8000ec0 <__aeabi_fsub+0x54>
 800119c:	2e00      	cmp	r6, #0
 800119e:	d095      	beq.n	80010cc <__aeabi_fsub+0x260>
 80011a0:	000c      	movs	r4, r1
 80011a2:	464f      	mov	r7, r9
 80011a4:	2200      	movs	r2, #0
 80011a6:	e6ac      	b.n	8000f02 <__aeabi_fsub+0x96>
 80011a8:	464b      	mov	r3, r9
 80011aa:	000d      	movs	r5, r1
 80011ac:	e744      	b.n	8001038 <__aeabi_fsub+0x1cc>
 80011ae:	464f      	mov	r7, r9
 80011b0:	2200      	movs	r2, #0
 80011b2:	e6a6      	b.n	8000f02 <__aeabi_fsub+0x96>
 80011b4:	fbffffff 	.word	0xfbffffff
 80011b8:	7dffffff 	.word	0x7dffffff
 80011bc:	2800      	cmp	r0, #0
 80011be:	d000      	beq.n	80011c2 <__aeabi_fsub+0x356>
 80011c0:	e736      	b.n	8001030 <__aeabi_fsub+0x1c4>
 80011c2:	2400      	movs	r4, #0
 80011c4:	2700      	movs	r7, #0
 80011c6:	e69c      	b.n	8000f02 <__aeabi_fsub+0x96>

080011c8 <__aeabi_fcmpun>:
 80011c8:	0243      	lsls	r3, r0, #9
 80011ca:	024a      	lsls	r2, r1, #9
 80011cc:	0040      	lsls	r0, r0, #1
 80011ce:	0049      	lsls	r1, r1, #1
 80011d0:	0a5b      	lsrs	r3, r3, #9
 80011d2:	0a52      	lsrs	r2, r2, #9
 80011d4:	0e09      	lsrs	r1, r1, #24
 80011d6:	0e00      	lsrs	r0, r0, #24
 80011d8:	28ff      	cmp	r0, #255	; 0xff
 80011da:	d006      	beq.n	80011ea <__aeabi_fcmpun+0x22>
 80011dc:	2000      	movs	r0, #0
 80011de:	29ff      	cmp	r1, #255	; 0xff
 80011e0:	d102      	bne.n	80011e8 <__aeabi_fcmpun+0x20>
 80011e2:	1e53      	subs	r3, r2, #1
 80011e4:	419a      	sbcs	r2, r3
 80011e6:	0010      	movs	r0, r2
 80011e8:	4770      	bx	lr
 80011ea:	38fe      	subs	r0, #254	; 0xfe
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1fb      	bne.n	80011e8 <__aeabi_fcmpun+0x20>
 80011f0:	e7f4      	b.n	80011dc <__aeabi_fcmpun+0x14>
 80011f2:	46c0      	nop			; (mov r8, r8)

080011f4 <__aeabi_ui2f>:
 80011f4:	b570      	push	{r4, r5, r6, lr}
 80011f6:	1e05      	subs	r5, r0, #0
 80011f8:	d00e      	beq.n	8001218 <__aeabi_ui2f+0x24>
 80011fa:	f001 fef3 	bl	8002fe4 <__clzsi2>
 80011fe:	239e      	movs	r3, #158	; 0x9e
 8001200:	0004      	movs	r4, r0
 8001202:	1a1b      	subs	r3, r3, r0
 8001204:	2b96      	cmp	r3, #150	; 0x96
 8001206:	dc0c      	bgt.n	8001222 <__aeabi_ui2f+0x2e>
 8001208:	2808      	cmp	r0, #8
 800120a:	dd01      	ble.n	8001210 <__aeabi_ui2f+0x1c>
 800120c:	3c08      	subs	r4, #8
 800120e:	40a5      	lsls	r5, r4
 8001210:	026d      	lsls	r5, r5, #9
 8001212:	0a6d      	lsrs	r5, r5, #9
 8001214:	b2d8      	uxtb	r0, r3
 8001216:	e001      	b.n	800121c <__aeabi_ui2f+0x28>
 8001218:	2000      	movs	r0, #0
 800121a:	2500      	movs	r5, #0
 800121c:	05c0      	lsls	r0, r0, #23
 800121e:	4328      	orrs	r0, r5
 8001220:	bd70      	pop	{r4, r5, r6, pc}
 8001222:	2b99      	cmp	r3, #153	; 0x99
 8001224:	dd09      	ble.n	800123a <__aeabi_ui2f+0x46>
 8001226:	0002      	movs	r2, r0
 8001228:	0029      	movs	r1, r5
 800122a:	321b      	adds	r2, #27
 800122c:	4091      	lsls	r1, r2
 800122e:	1e4a      	subs	r2, r1, #1
 8001230:	4191      	sbcs	r1, r2
 8001232:	2205      	movs	r2, #5
 8001234:	1a12      	subs	r2, r2, r0
 8001236:	40d5      	lsrs	r5, r2
 8001238:	430d      	orrs	r5, r1
 800123a:	2c05      	cmp	r4, #5
 800123c:	dc12      	bgt.n	8001264 <__aeabi_ui2f+0x70>
 800123e:	0029      	movs	r1, r5
 8001240:	4e0c      	ldr	r6, [pc, #48]	; (8001274 <__aeabi_ui2f+0x80>)
 8001242:	4031      	ands	r1, r6
 8001244:	076a      	lsls	r2, r5, #29
 8001246:	d009      	beq.n	800125c <__aeabi_ui2f+0x68>
 8001248:	200f      	movs	r0, #15
 800124a:	4028      	ands	r0, r5
 800124c:	2804      	cmp	r0, #4
 800124e:	d005      	beq.n	800125c <__aeabi_ui2f+0x68>
 8001250:	3104      	adds	r1, #4
 8001252:	014a      	lsls	r2, r1, #5
 8001254:	d502      	bpl.n	800125c <__aeabi_ui2f+0x68>
 8001256:	239f      	movs	r3, #159	; 0x9f
 8001258:	4031      	ands	r1, r6
 800125a:	1b1b      	subs	r3, r3, r4
 800125c:	0189      	lsls	r1, r1, #6
 800125e:	0a4d      	lsrs	r5, r1, #9
 8001260:	b2d8      	uxtb	r0, r3
 8001262:	e7db      	b.n	800121c <__aeabi_ui2f+0x28>
 8001264:	1f62      	subs	r2, r4, #5
 8001266:	4095      	lsls	r5, r2
 8001268:	0029      	movs	r1, r5
 800126a:	4e02      	ldr	r6, [pc, #8]	; (8001274 <__aeabi_ui2f+0x80>)
 800126c:	4031      	ands	r1, r6
 800126e:	076a      	lsls	r2, r5, #29
 8001270:	d0f4      	beq.n	800125c <__aeabi_ui2f+0x68>
 8001272:	e7e9      	b.n	8001248 <__aeabi_ui2f+0x54>
 8001274:	fbffffff 	.word	0xfbffffff

08001278 <__aeabi_dadd>:
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	464f      	mov	r7, r9
 800127c:	4646      	mov	r6, r8
 800127e:	46d6      	mov	lr, sl
 8001280:	000d      	movs	r5, r1
 8001282:	0004      	movs	r4, r0
 8001284:	b5c0      	push	{r6, r7, lr}
 8001286:	001f      	movs	r7, r3
 8001288:	0011      	movs	r1, r2
 800128a:	0328      	lsls	r0, r5, #12
 800128c:	0f62      	lsrs	r2, r4, #29
 800128e:	0a40      	lsrs	r0, r0, #9
 8001290:	4310      	orrs	r0, r2
 8001292:	007a      	lsls	r2, r7, #1
 8001294:	0d52      	lsrs	r2, r2, #21
 8001296:	00e3      	lsls	r3, r4, #3
 8001298:	033c      	lsls	r4, r7, #12
 800129a:	4691      	mov	r9, r2
 800129c:	0a64      	lsrs	r4, r4, #9
 800129e:	0ffa      	lsrs	r2, r7, #31
 80012a0:	0f4f      	lsrs	r7, r1, #29
 80012a2:	006e      	lsls	r6, r5, #1
 80012a4:	4327      	orrs	r7, r4
 80012a6:	4692      	mov	sl, r2
 80012a8:	46b8      	mov	r8, r7
 80012aa:	0d76      	lsrs	r6, r6, #21
 80012ac:	0fed      	lsrs	r5, r5, #31
 80012ae:	00c9      	lsls	r1, r1, #3
 80012b0:	4295      	cmp	r5, r2
 80012b2:	d100      	bne.n	80012b6 <__aeabi_dadd+0x3e>
 80012b4:	e099      	b.n	80013ea <__aeabi_dadd+0x172>
 80012b6:	464c      	mov	r4, r9
 80012b8:	1b34      	subs	r4, r6, r4
 80012ba:	46a4      	mov	ip, r4
 80012bc:	2c00      	cmp	r4, #0
 80012be:	dc00      	bgt.n	80012c2 <__aeabi_dadd+0x4a>
 80012c0:	e07c      	b.n	80013bc <__aeabi_dadd+0x144>
 80012c2:	464a      	mov	r2, r9
 80012c4:	2a00      	cmp	r2, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_dadd+0x52>
 80012c8:	e0b8      	b.n	800143c <__aeabi_dadd+0x1c4>
 80012ca:	4ac5      	ldr	r2, [pc, #788]	; (80015e0 <__aeabi_dadd+0x368>)
 80012cc:	4296      	cmp	r6, r2
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dadd+0x5a>
 80012d0:	e11c      	b.n	800150c <__aeabi_dadd+0x294>
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	003c      	movs	r4, r7
 80012d6:	0412      	lsls	r2, r2, #16
 80012d8:	4314      	orrs	r4, r2
 80012da:	46a0      	mov	r8, r4
 80012dc:	4662      	mov	r2, ip
 80012de:	2a38      	cmp	r2, #56	; 0x38
 80012e0:	dd00      	ble.n	80012e4 <__aeabi_dadd+0x6c>
 80012e2:	e161      	b.n	80015a8 <__aeabi_dadd+0x330>
 80012e4:	2a1f      	cmp	r2, #31
 80012e6:	dd00      	ble.n	80012ea <__aeabi_dadd+0x72>
 80012e8:	e1cc      	b.n	8001684 <__aeabi_dadd+0x40c>
 80012ea:	4664      	mov	r4, ip
 80012ec:	2220      	movs	r2, #32
 80012ee:	1b12      	subs	r2, r2, r4
 80012f0:	4644      	mov	r4, r8
 80012f2:	4094      	lsls	r4, r2
 80012f4:	000f      	movs	r7, r1
 80012f6:	46a1      	mov	r9, r4
 80012f8:	4664      	mov	r4, ip
 80012fa:	4091      	lsls	r1, r2
 80012fc:	40e7      	lsrs	r7, r4
 80012fe:	464c      	mov	r4, r9
 8001300:	1e4a      	subs	r2, r1, #1
 8001302:	4191      	sbcs	r1, r2
 8001304:	433c      	orrs	r4, r7
 8001306:	4642      	mov	r2, r8
 8001308:	4321      	orrs	r1, r4
 800130a:	4664      	mov	r4, ip
 800130c:	40e2      	lsrs	r2, r4
 800130e:	1a80      	subs	r0, r0, r2
 8001310:	1a5c      	subs	r4, r3, r1
 8001312:	42a3      	cmp	r3, r4
 8001314:	419b      	sbcs	r3, r3
 8001316:	425f      	negs	r7, r3
 8001318:	1bc7      	subs	r7, r0, r7
 800131a:	023b      	lsls	r3, r7, #8
 800131c:	d400      	bmi.n	8001320 <__aeabi_dadd+0xa8>
 800131e:	e0d0      	b.n	80014c2 <__aeabi_dadd+0x24a>
 8001320:	027f      	lsls	r7, r7, #9
 8001322:	0a7f      	lsrs	r7, r7, #9
 8001324:	2f00      	cmp	r7, #0
 8001326:	d100      	bne.n	800132a <__aeabi_dadd+0xb2>
 8001328:	e0ff      	b.n	800152a <__aeabi_dadd+0x2b2>
 800132a:	0038      	movs	r0, r7
 800132c:	f001 fe5a 	bl	8002fe4 <__clzsi2>
 8001330:	0001      	movs	r1, r0
 8001332:	3908      	subs	r1, #8
 8001334:	2320      	movs	r3, #32
 8001336:	0022      	movs	r2, r4
 8001338:	1a5b      	subs	r3, r3, r1
 800133a:	408f      	lsls	r7, r1
 800133c:	40da      	lsrs	r2, r3
 800133e:	408c      	lsls	r4, r1
 8001340:	4317      	orrs	r7, r2
 8001342:	42b1      	cmp	r1, r6
 8001344:	da00      	bge.n	8001348 <__aeabi_dadd+0xd0>
 8001346:	e0ff      	b.n	8001548 <__aeabi_dadd+0x2d0>
 8001348:	1b89      	subs	r1, r1, r6
 800134a:	1c4b      	adds	r3, r1, #1
 800134c:	2b1f      	cmp	r3, #31
 800134e:	dd00      	ble.n	8001352 <__aeabi_dadd+0xda>
 8001350:	e0a8      	b.n	80014a4 <__aeabi_dadd+0x22c>
 8001352:	2220      	movs	r2, #32
 8001354:	0039      	movs	r1, r7
 8001356:	1ad2      	subs	r2, r2, r3
 8001358:	0020      	movs	r0, r4
 800135a:	4094      	lsls	r4, r2
 800135c:	4091      	lsls	r1, r2
 800135e:	40d8      	lsrs	r0, r3
 8001360:	1e62      	subs	r2, r4, #1
 8001362:	4194      	sbcs	r4, r2
 8001364:	40df      	lsrs	r7, r3
 8001366:	2600      	movs	r6, #0
 8001368:	4301      	orrs	r1, r0
 800136a:	430c      	orrs	r4, r1
 800136c:	0763      	lsls	r3, r4, #29
 800136e:	d009      	beq.n	8001384 <__aeabi_dadd+0x10c>
 8001370:	230f      	movs	r3, #15
 8001372:	4023      	ands	r3, r4
 8001374:	2b04      	cmp	r3, #4
 8001376:	d005      	beq.n	8001384 <__aeabi_dadd+0x10c>
 8001378:	1d23      	adds	r3, r4, #4
 800137a:	42a3      	cmp	r3, r4
 800137c:	41a4      	sbcs	r4, r4
 800137e:	4264      	negs	r4, r4
 8001380:	193f      	adds	r7, r7, r4
 8001382:	001c      	movs	r4, r3
 8001384:	023b      	lsls	r3, r7, #8
 8001386:	d400      	bmi.n	800138a <__aeabi_dadd+0x112>
 8001388:	e09e      	b.n	80014c8 <__aeabi_dadd+0x250>
 800138a:	4b95      	ldr	r3, [pc, #596]	; (80015e0 <__aeabi_dadd+0x368>)
 800138c:	3601      	adds	r6, #1
 800138e:	429e      	cmp	r6, r3
 8001390:	d100      	bne.n	8001394 <__aeabi_dadd+0x11c>
 8001392:	e0b7      	b.n	8001504 <__aeabi_dadd+0x28c>
 8001394:	4a93      	ldr	r2, [pc, #588]	; (80015e4 <__aeabi_dadd+0x36c>)
 8001396:	08e4      	lsrs	r4, r4, #3
 8001398:	4017      	ands	r7, r2
 800139a:	077b      	lsls	r3, r7, #29
 800139c:	0571      	lsls	r1, r6, #21
 800139e:	027f      	lsls	r7, r7, #9
 80013a0:	4323      	orrs	r3, r4
 80013a2:	0b3f      	lsrs	r7, r7, #12
 80013a4:	0d4a      	lsrs	r2, r1, #21
 80013a6:	0512      	lsls	r2, r2, #20
 80013a8:	433a      	orrs	r2, r7
 80013aa:	07ed      	lsls	r5, r5, #31
 80013ac:	432a      	orrs	r2, r5
 80013ae:	0018      	movs	r0, r3
 80013b0:	0011      	movs	r1, r2
 80013b2:	bce0      	pop	{r5, r6, r7}
 80013b4:	46ba      	mov	sl, r7
 80013b6:	46b1      	mov	r9, r6
 80013b8:	46a8      	mov	r8, r5
 80013ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d04b      	beq.n	8001458 <__aeabi_dadd+0x1e0>
 80013c0:	464c      	mov	r4, r9
 80013c2:	1ba4      	subs	r4, r4, r6
 80013c4:	46a4      	mov	ip, r4
 80013c6:	2e00      	cmp	r6, #0
 80013c8:	d000      	beq.n	80013cc <__aeabi_dadd+0x154>
 80013ca:	e123      	b.n	8001614 <__aeabi_dadd+0x39c>
 80013cc:	0004      	movs	r4, r0
 80013ce:	431c      	orrs	r4, r3
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dadd+0x15c>
 80013d2:	e1af      	b.n	8001734 <__aeabi_dadd+0x4bc>
 80013d4:	4662      	mov	r2, ip
 80013d6:	1e54      	subs	r4, r2, #1
 80013d8:	2a01      	cmp	r2, #1
 80013da:	d100      	bne.n	80013de <__aeabi_dadd+0x166>
 80013dc:	e215      	b.n	800180a <__aeabi_dadd+0x592>
 80013de:	4d80      	ldr	r5, [pc, #512]	; (80015e0 <__aeabi_dadd+0x368>)
 80013e0:	45ac      	cmp	ip, r5
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x16e>
 80013e4:	e1c8      	b.n	8001778 <__aeabi_dadd+0x500>
 80013e6:	46a4      	mov	ip, r4
 80013e8:	e11b      	b.n	8001622 <__aeabi_dadd+0x3aa>
 80013ea:	464a      	mov	r2, r9
 80013ec:	1ab2      	subs	r2, r6, r2
 80013ee:	4694      	mov	ip, r2
 80013f0:	2a00      	cmp	r2, #0
 80013f2:	dc00      	bgt.n	80013f6 <__aeabi_dadd+0x17e>
 80013f4:	e0ac      	b.n	8001550 <__aeabi_dadd+0x2d8>
 80013f6:	464a      	mov	r2, r9
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	d043      	beq.n	8001484 <__aeabi_dadd+0x20c>
 80013fc:	4a78      	ldr	r2, [pc, #480]	; (80015e0 <__aeabi_dadd+0x368>)
 80013fe:	4296      	cmp	r6, r2
 8001400:	d100      	bne.n	8001404 <__aeabi_dadd+0x18c>
 8001402:	e1af      	b.n	8001764 <__aeabi_dadd+0x4ec>
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	003c      	movs	r4, r7
 8001408:	0412      	lsls	r2, r2, #16
 800140a:	4314      	orrs	r4, r2
 800140c:	46a0      	mov	r8, r4
 800140e:	4662      	mov	r2, ip
 8001410:	2a38      	cmp	r2, #56	; 0x38
 8001412:	dc67      	bgt.n	80014e4 <__aeabi_dadd+0x26c>
 8001414:	2a1f      	cmp	r2, #31
 8001416:	dc00      	bgt.n	800141a <__aeabi_dadd+0x1a2>
 8001418:	e15f      	b.n	80016da <__aeabi_dadd+0x462>
 800141a:	4647      	mov	r7, r8
 800141c:	3a20      	subs	r2, #32
 800141e:	40d7      	lsrs	r7, r2
 8001420:	4662      	mov	r2, ip
 8001422:	2a20      	cmp	r2, #32
 8001424:	d005      	beq.n	8001432 <__aeabi_dadd+0x1ba>
 8001426:	4664      	mov	r4, ip
 8001428:	2240      	movs	r2, #64	; 0x40
 800142a:	1b12      	subs	r2, r2, r4
 800142c:	4644      	mov	r4, r8
 800142e:	4094      	lsls	r4, r2
 8001430:	4321      	orrs	r1, r4
 8001432:	1e4a      	subs	r2, r1, #1
 8001434:	4191      	sbcs	r1, r2
 8001436:	000c      	movs	r4, r1
 8001438:	433c      	orrs	r4, r7
 800143a:	e057      	b.n	80014ec <__aeabi_dadd+0x274>
 800143c:	003a      	movs	r2, r7
 800143e:	430a      	orrs	r2, r1
 8001440:	d100      	bne.n	8001444 <__aeabi_dadd+0x1cc>
 8001442:	e105      	b.n	8001650 <__aeabi_dadd+0x3d8>
 8001444:	0022      	movs	r2, r4
 8001446:	3a01      	subs	r2, #1
 8001448:	2c01      	cmp	r4, #1
 800144a:	d100      	bne.n	800144e <__aeabi_dadd+0x1d6>
 800144c:	e182      	b.n	8001754 <__aeabi_dadd+0x4dc>
 800144e:	4c64      	ldr	r4, [pc, #400]	; (80015e0 <__aeabi_dadd+0x368>)
 8001450:	45a4      	cmp	ip, r4
 8001452:	d05b      	beq.n	800150c <__aeabi_dadd+0x294>
 8001454:	4694      	mov	ip, r2
 8001456:	e741      	b.n	80012dc <__aeabi_dadd+0x64>
 8001458:	4c63      	ldr	r4, [pc, #396]	; (80015e8 <__aeabi_dadd+0x370>)
 800145a:	1c77      	adds	r7, r6, #1
 800145c:	4227      	tst	r7, r4
 800145e:	d000      	beq.n	8001462 <__aeabi_dadd+0x1ea>
 8001460:	e0c4      	b.n	80015ec <__aeabi_dadd+0x374>
 8001462:	0004      	movs	r4, r0
 8001464:	431c      	orrs	r4, r3
 8001466:	2e00      	cmp	r6, #0
 8001468:	d000      	beq.n	800146c <__aeabi_dadd+0x1f4>
 800146a:	e169      	b.n	8001740 <__aeabi_dadd+0x4c8>
 800146c:	2c00      	cmp	r4, #0
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x1fa>
 8001470:	e1bf      	b.n	80017f2 <__aeabi_dadd+0x57a>
 8001472:	4644      	mov	r4, r8
 8001474:	430c      	orrs	r4, r1
 8001476:	d000      	beq.n	800147a <__aeabi_dadd+0x202>
 8001478:	e1d0      	b.n	800181c <__aeabi_dadd+0x5a4>
 800147a:	0742      	lsls	r2, r0, #29
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	4313      	orrs	r3, r2
 8001480:	08c0      	lsrs	r0, r0, #3
 8001482:	e029      	b.n	80014d8 <__aeabi_dadd+0x260>
 8001484:	003a      	movs	r2, r7
 8001486:	430a      	orrs	r2, r1
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x214>
 800148a:	e170      	b.n	800176e <__aeabi_dadd+0x4f6>
 800148c:	4662      	mov	r2, ip
 800148e:	4664      	mov	r4, ip
 8001490:	3a01      	subs	r2, #1
 8001492:	2c01      	cmp	r4, #1
 8001494:	d100      	bne.n	8001498 <__aeabi_dadd+0x220>
 8001496:	e0e0      	b.n	800165a <__aeabi_dadd+0x3e2>
 8001498:	4c51      	ldr	r4, [pc, #324]	; (80015e0 <__aeabi_dadd+0x368>)
 800149a:	45a4      	cmp	ip, r4
 800149c:	d100      	bne.n	80014a0 <__aeabi_dadd+0x228>
 800149e:	e161      	b.n	8001764 <__aeabi_dadd+0x4ec>
 80014a0:	4694      	mov	ip, r2
 80014a2:	e7b4      	b.n	800140e <__aeabi_dadd+0x196>
 80014a4:	003a      	movs	r2, r7
 80014a6:	391f      	subs	r1, #31
 80014a8:	40ca      	lsrs	r2, r1
 80014aa:	0011      	movs	r1, r2
 80014ac:	2b20      	cmp	r3, #32
 80014ae:	d003      	beq.n	80014b8 <__aeabi_dadd+0x240>
 80014b0:	2240      	movs	r2, #64	; 0x40
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	409f      	lsls	r7, r3
 80014b6:	433c      	orrs	r4, r7
 80014b8:	1e63      	subs	r3, r4, #1
 80014ba:	419c      	sbcs	r4, r3
 80014bc:	2700      	movs	r7, #0
 80014be:	2600      	movs	r6, #0
 80014c0:	430c      	orrs	r4, r1
 80014c2:	0763      	lsls	r3, r4, #29
 80014c4:	d000      	beq.n	80014c8 <__aeabi_dadd+0x250>
 80014c6:	e753      	b.n	8001370 <__aeabi_dadd+0xf8>
 80014c8:	46b4      	mov	ip, r6
 80014ca:	08e4      	lsrs	r4, r4, #3
 80014cc:	077b      	lsls	r3, r7, #29
 80014ce:	4323      	orrs	r3, r4
 80014d0:	08f8      	lsrs	r0, r7, #3
 80014d2:	4a43      	ldr	r2, [pc, #268]	; (80015e0 <__aeabi_dadd+0x368>)
 80014d4:	4594      	cmp	ip, r2
 80014d6:	d01d      	beq.n	8001514 <__aeabi_dadd+0x29c>
 80014d8:	4662      	mov	r2, ip
 80014da:	0307      	lsls	r7, r0, #12
 80014dc:	0552      	lsls	r2, r2, #21
 80014de:	0b3f      	lsrs	r7, r7, #12
 80014e0:	0d52      	lsrs	r2, r2, #21
 80014e2:	e760      	b.n	80013a6 <__aeabi_dadd+0x12e>
 80014e4:	4644      	mov	r4, r8
 80014e6:	430c      	orrs	r4, r1
 80014e8:	1e62      	subs	r2, r4, #1
 80014ea:	4194      	sbcs	r4, r2
 80014ec:	18e4      	adds	r4, r4, r3
 80014ee:	429c      	cmp	r4, r3
 80014f0:	419b      	sbcs	r3, r3
 80014f2:	425f      	negs	r7, r3
 80014f4:	183f      	adds	r7, r7, r0
 80014f6:	023b      	lsls	r3, r7, #8
 80014f8:	d5e3      	bpl.n	80014c2 <__aeabi_dadd+0x24a>
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <__aeabi_dadd+0x368>)
 80014fc:	3601      	adds	r6, #1
 80014fe:	429e      	cmp	r6, r3
 8001500:	d000      	beq.n	8001504 <__aeabi_dadd+0x28c>
 8001502:	e0b5      	b.n	8001670 <__aeabi_dadd+0x3f8>
 8001504:	0032      	movs	r2, r6
 8001506:	2700      	movs	r7, #0
 8001508:	2300      	movs	r3, #0
 800150a:	e74c      	b.n	80013a6 <__aeabi_dadd+0x12e>
 800150c:	0742      	lsls	r2, r0, #29
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	4313      	orrs	r3, r2
 8001512:	08c0      	lsrs	r0, r0, #3
 8001514:	001a      	movs	r2, r3
 8001516:	4302      	orrs	r2, r0
 8001518:	d100      	bne.n	800151c <__aeabi_dadd+0x2a4>
 800151a:	e1e1      	b.n	80018e0 <__aeabi_dadd+0x668>
 800151c:	2780      	movs	r7, #128	; 0x80
 800151e:	033f      	lsls	r7, r7, #12
 8001520:	4307      	orrs	r7, r0
 8001522:	033f      	lsls	r7, r7, #12
 8001524:	4a2e      	ldr	r2, [pc, #184]	; (80015e0 <__aeabi_dadd+0x368>)
 8001526:	0b3f      	lsrs	r7, r7, #12
 8001528:	e73d      	b.n	80013a6 <__aeabi_dadd+0x12e>
 800152a:	0020      	movs	r0, r4
 800152c:	f001 fd5a 	bl	8002fe4 <__clzsi2>
 8001530:	0001      	movs	r1, r0
 8001532:	3118      	adds	r1, #24
 8001534:	291f      	cmp	r1, #31
 8001536:	dc00      	bgt.n	800153a <__aeabi_dadd+0x2c2>
 8001538:	e6fc      	b.n	8001334 <__aeabi_dadd+0xbc>
 800153a:	3808      	subs	r0, #8
 800153c:	4084      	lsls	r4, r0
 800153e:	0027      	movs	r7, r4
 8001540:	2400      	movs	r4, #0
 8001542:	42b1      	cmp	r1, r6
 8001544:	db00      	blt.n	8001548 <__aeabi_dadd+0x2d0>
 8001546:	e6ff      	b.n	8001348 <__aeabi_dadd+0xd0>
 8001548:	4a26      	ldr	r2, [pc, #152]	; (80015e4 <__aeabi_dadd+0x36c>)
 800154a:	1a76      	subs	r6, r6, r1
 800154c:	4017      	ands	r7, r2
 800154e:	e70d      	b.n	800136c <__aeabi_dadd+0xf4>
 8001550:	2a00      	cmp	r2, #0
 8001552:	d02f      	beq.n	80015b4 <__aeabi_dadd+0x33c>
 8001554:	464a      	mov	r2, r9
 8001556:	1b92      	subs	r2, r2, r6
 8001558:	4694      	mov	ip, r2
 800155a:	2e00      	cmp	r6, #0
 800155c:	d100      	bne.n	8001560 <__aeabi_dadd+0x2e8>
 800155e:	e0ad      	b.n	80016bc <__aeabi_dadd+0x444>
 8001560:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <__aeabi_dadd+0x368>)
 8001562:	4591      	cmp	r9, r2
 8001564:	d100      	bne.n	8001568 <__aeabi_dadd+0x2f0>
 8001566:	e10f      	b.n	8001788 <__aeabi_dadd+0x510>
 8001568:	2280      	movs	r2, #128	; 0x80
 800156a:	0412      	lsls	r2, r2, #16
 800156c:	4310      	orrs	r0, r2
 800156e:	4662      	mov	r2, ip
 8001570:	2a38      	cmp	r2, #56	; 0x38
 8001572:	dd00      	ble.n	8001576 <__aeabi_dadd+0x2fe>
 8001574:	e10f      	b.n	8001796 <__aeabi_dadd+0x51e>
 8001576:	2a1f      	cmp	r2, #31
 8001578:	dd00      	ble.n	800157c <__aeabi_dadd+0x304>
 800157a:	e180      	b.n	800187e <__aeabi_dadd+0x606>
 800157c:	4664      	mov	r4, ip
 800157e:	2220      	movs	r2, #32
 8001580:	001e      	movs	r6, r3
 8001582:	1b12      	subs	r2, r2, r4
 8001584:	4667      	mov	r7, ip
 8001586:	0004      	movs	r4, r0
 8001588:	4093      	lsls	r3, r2
 800158a:	4094      	lsls	r4, r2
 800158c:	40fe      	lsrs	r6, r7
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	4193      	sbcs	r3, r2
 8001592:	40f8      	lsrs	r0, r7
 8001594:	4334      	orrs	r4, r6
 8001596:	431c      	orrs	r4, r3
 8001598:	4480      	add	r8, r0
 800159a:	1864      	adds	r4, r4, r1
 800159c:	428c      	cmp	r4, r1
 800159e:	41bf      	sbcs	r7, r7
 80015a0:	427f      	negs	r7, r7
 80015a2:	464e      	mov	r6, r9
 80015a4:	4447      	add	r7, r8
 80015a6:	e7a6      	b.n	80014f6 <__aeabi_dadd+0x27e>
 80015a8:	4642      	mov	r2, r8
 80015aa:	430a      	orrs	r2, r1
 80015ac:	0011      	movs	r1, r2
 80015ae:	1e4a      	subs	r2, r1, #1
 80015b0:	4191      	sbcs	r1, r2
 80015b2:	e6ad      	b.n	8001310 <__aeabi_dadd+0x98>
 80015b4:	4c0c      	ldr	r4, [pc, #48]	; (80015e8 <__aeabi_dadd+0x370>)
 80015b6:	1c72      	adds	r2, r6, #1
 80015b8:	4222      	tst	r2, r4
 80015ba:	d000      	beq.n	80015be <__aeabi_dadd+0x346>
 80015bc:	e0a1      	b.n	8001702 <__aeabi_dadd+0x48a>
 80015be:	0002      	movs	r2, r0
 80015c0:	431a      	orrs	r2, r3
 80015c2:	2e00      	cmp	r6, #0
 80015c4:	d000      	beq.n	80015c8 <__aeabi_dadd+0x350>
 80015c6:	e0fa      	b.n	80017be <__aeabi_dadd+0x546>
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x356>
 80015cc:	e145      	b.n	800185a <__aeabi_dadd+0x5e2>
 80015ce:	003a      	movs	r2, r7
 80015d0:	430a      	orrs	r2, r1
 80015d2:	d000      	beq.n	80015d6 <__aeabi_dadd+0x35e>
 80015d4:	e146      	b.n	8001864 <__aeabi_dadd+0x5ec>
 80015d6:	0742      	lsls	r2, r0, #29
 80015d8:	08db      	lsrs	r3, r3, #3
 80015da:	4313      	orrs	r3, r2
 80015dc:	08c0      	lsrs	r0, r0, #3
 80015de:	e77b      	b.n	80014d8 <__aeabi_dadd+0x260>
 80015e0:	000007ff 	.word	0x000007ff
 80015e4:	ff7fffff 	.word	0xff7fffff
 80015e8:	000007fe 	.word	0x000007fe
 80015ec:	4647      	mov	r7, r8
 80015ee:	1a5c      	subs	r4, r3, r1
 80015f0:	1bc2      	subs	r2, r0, r7
 80015f2:	42a3      	cmp	r3, r4
 80015f4:	41bf      	sbcs	r7, r7
 80015f6:	427f      	negs	r7, r7
 80015f8:	46b9      	mov	r9, r7
 80015fa:	0017      	movs	r7, r2
 80015fc:	464a      	mov	r2, r9
 80015fe:	1abf      	subs	r7, r7, r2
 8001600:	023a      	lsls	r2, r7, #8
 8001602:	d500      	bpl.n	8001606 <__aeabi_dadd+0x38e>
 8001604:	e08d      	b.n	8001722 <__aeabi_dadd+0x4aa>
 8001606:	0023      	movs	r3, r4
 8001608:	433b      	orrs	r3, r7
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x396>
 800160c:	e68a      	b.n	8001324 <__aeabi_dadd+0xac>
 800160e:	2000      	movs	r0, #0
 8001610:	2500      	movs	r5, #0
 8001612:	e761      	b.n	80014d8 <__aeabi_dadd+0x260>
 8001614:	4cb4      	ldr	r4, [pc, #720]	; (80018e8 <__aeabi_dadd+0x670>)
 8001616:	45a1      	cmp	r9, r4
 8001618:	d100      	bne.n	800161c <__aeabi_dadd+0x3a4>
 800161a:	e0ad      	b.n	8001778 <__aeabi_dadd+0x500>
 800161c:	2480      	movs	r4, #128	; 0x80
 800161e:	0424      	lsls	r4, r4, #16
 8001620:	4320      	orrs	r0, r4
 8001622:	4664      	mov	r4, ip
 8001624:	2c38      	cmp	r4, #56	; 0x38
 8001626:	dc3d      	bgt.n	80016a4 <__aeabi_dadd+0x42c>
 8001628:	4662      	mov	r2, ip
 800162a:	2c1f      	cmp	r4, #31
 800162c:	dd00      	ble.n	8001630 <__aeabi_dadd+0x3b8>
 800162e:	e0b7      	b.n	80017a0 <__aeabi_dadd+0x528>
 8001630:	2520      	movs	r5, #32
 8001632:	001e      	movs	r6, r3
 8001634:	1b2d      	subs	r5, r5, r4
 8001636:	0004      	movs	r4, r0
 8001638:	40ab      	lsls	r3, r5
 800163a:	40ac      	lsls	r4, r5
 800163c:	40d6      	lsrs	r6, r2
 800163e:	40d0      	lsrs	r0, r2
 8001640:	4642      	mov	r2, r8
 8001642:	1e5d      	subs	r5, r3, #1
 8001644:	41ab      	sbcs	r3, r5
 8001646:	4334      	orrs	r4, r6
 8001648:	1a12      	subs	r2, r2, r0
 800164a:	4690      	mov	r8, r2
 800164c:	4323      	orrs	r3, r4
 800164e:	e02c      	b.n	80016aa <__aeabi_dadd+0x432>
 8001650:	0742      	lsls	r2, r0, #29
 8001652:	08db      	lsrs	r3, r3, #3
 8001654:	4313      	orrs	r3, r2
 8001656:	08c0      	lsrs	r0, r0, #3
 8001658:	e73b      	b.n	80014d2 <__aeabi_dadd+0x25a>
 800165a:	185c      	adds	r4, r3, r1
 800165c:	429c      	cmp	r4, r3
 800165e:	419b      	sbcs	r3, r3
 8001660:	4440      	add	r0, r8
 8001662:	425b      	negs	r3, r3
 8001664:	18c7      	adds	r7, r0, r3
 8001666:	2601      	movs	r6, #1
 8001668:	023b      	lsls	r3, r7, #8
 800166a:	d400      	bmi.n	800166e <__aeabi_dadd+0x3f6>
 800166c:	e729      	b.n	80014c2 <__aeabi_dadd+0x24a>
 800166e:	2602      	movs	r6, #2
 8001670:	4a9e      	ldr	r2, [pc, #632]	; (80018ec <__aeabi_dadd+0x674>)
 8001672:	0863      	lsrs	r3, r4, #1
 8001674:	4017      	ands	r7, r2
 8001676:	2201      	movs	r2, #1
 8001678:	4014      	ands	r4, r2
 800167a:	431c      	orrs	r4, r3
 800167c:	07fb      	lsls	r3, r7, #31
 800167e:	431c      	orrs	r4, r3
 8001680:	087f      	lsrs	r7, r7, #1
 8001682:	e673      	b.n	800136c <__aeabi_dadd+0xf4>
 8001684:	4644      	mov	r4, r8
 8001686:	3a20      	subs	r2, #32
 8001688:	40d4      	lsrs	r4, r2
 800168a:	4662      	mov	r2, ip
 800168c:	2a20      	cmp	r2, #32
 800168e:	d005      	beq.n	800169c <__aeabi_dadd+0x424>
 8001690:	4667      	mov	r7, ip
 8001692:	2240      	movs	r2, #64	; 0x40
 8001694:	1bd2      	subs	r2, r2, r7
 8001696:	4647      	mov	r7, r8
 8001698:	4097      	lsls	r7, r2
 800169a:	4339      	orrs	r1, r7
 800169c:	1e4a      	subs	r2, r1, #1
 800169e:	4191      	sbcs	r1, r2
 80016a0:	4321      	orrs	r1, r4
 80016a2:	e635      	b.n	8001310 <__aeabi_dadd+0x98>
 80016a4:	4303      	orrs	r3, r0
 80016a6:	1e58      	subs	r0, r3, #1
 80016a8:	4183      	sbcs	r3, r0
 80016aa:	1acc      	subs	r4, r1, r3
 80016ac:	42a1      	cmp	r1, r4
 80016ae:	41bf      	sbcs	r7, r7
 80016b0:	4643      	mov	r3, r8
 80016b2:	427f      	negs	r7, r7
 80016b4:	4655      	mov	r5, sl
 80016b6:	464e      	mov	r6, r9
 80016b8:	1bdf      	subs	r7, r3, r7
 80016ba:	e62e      	b.n	800131a <__aeabi_dadd+0xa2>
 80016bc:	0002      	movs	r2, r0
 80016be:	431a      	orrs	r2, r3
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dadd+0x44c>
 80016c2:	e0bd      	b.n	8001840 <__aeabi_dadd+0x5c8>
 80016c4:	4662      	mov	r2, ip
 80016c6:	4664      	mov	r4, ip
 80016c8:	3a01      	subs	r2, #1
 80016ca:	2c01      	cmp	r4, #1
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dadd+0x458>
 80016ce:	e0e5      	b.n	800189c <__aeabi_dadd+0x624>
 80016d0:	4c85      	ldr	r4, [pc, #532]	; (80018e8 <__aeabi_dadd+0x670>)
 80016d2:	45a4      	cmp	ip, r4
 80016d4:	d058      	beq.n	8001788 <__aeabi_dadd+0x510>
 80016d6:	4694      	mov	ip, r2
 80016d8:	e749      	b.n	800156e <__aeabi_dadd+0x2f6>
 80016da:	4664      	mov	r4, ip
 80016dc:	2220      	movs	r2, #32
 80016de:	1b12      	subs	r2, r2, r4
 80016e0:	4644      	mov	r4, r8
 80016e2:	4094      	lsls	r4, r2
 80016e4:	000f      	movs	r7, r1
 80016e6:	46a1      	mov	r9, r4
 80016e8:	4664      	mov	r4, ip
 80016ea:	4091      	lsls	r1, r2
 80016ec:	40e7      	lsrs	r7, r4
 80016ee:	464c      	mov	r4, r9
 80016f0:	1e4a      	subs	r2, r1, #1
 80016f2:	4191      	sbcs	r1, r2
 80016f4:	433c      	orrs	r4, r7
 80016f6:	4642      	mov	r2, r8
 80016f8:	430c      	orrs	r4, r1
 80016fa:	4661      	mov	r1, ip
 80016fc:	40ca      	lsrs	r2, r1
 80016fe:	1880      	adds	r0, r0, r2
 8001700:	e6f4      	b.n	80014ec <__aeabi_dadd+0x274>
 8001702:	4c79      	ldr	r4, [pc, #484]	; (80018e8 <__aeabi_dadd+0x670>)
 8001704:	42a2      	cmp	r2, r4
 8001706:	d100      	bne.n	800170a <__aeabi_dadd+0x492>
 8001708:	e6fd      	b.n	8001506 <__aeabi_dadd+0x28e>
 800170a:	1859      	adds	r1, r3, r1
 800170c:	4299      	cmp	r1, r3
 800170e:	419b      	sbcs	r3, r3
 8001710:	4440      	add	r0, r8
 8001712:	425f      	negs	r7, r3
 8001714:	19c7      	adds	r7, r0, r7
 8001716:	07fc      	lsls	r4, r7, #31
 8001718:	0849      	lsrs	r1, r1, #1
 800171a:	0016      	movs	r6, r2
 800171c:	430c      	orrs	r4, r1
 800171e:	087f      	lsrs	r7, r7, #1
 8001720:	e6cf      	b.n	80014c2 <__aeabi_dadd+0x24a>
 8001722:	1acc      	subs	r4, r1, r3
 8001724:	42a1      	cmp	r1, r4
 8001726:	41bf      	sbcs	r7, r7
 8001728:	4643      	mov	r3, r8
 800172a:	427f      	negs	r7, r7
 800172c:	1a18      	subs	r0, r3, r0
 800172e:	4655      	mov	r5, sl
 8001730:	1bc7      	subs	r7, r0, r7
 8001732:	e5f7      	b.n	8001324 <__aeabi_dadd+0xac>
 8001734:	08c9      	lsrs	r1, r1, #3
 8001736:	077b      	lsls	r3, r7, #29
 8001738:	4655      	mov	r5, sl
 800173a:	430b      	orrs	r3, r1
 800173c:	08f8      	lsrs	r0, r7, #3
 800173e:	e6c8      	b.n	80014d2 <__aeabi_dadd+0x25a>
 8001740:	2c00      	cmp	r4, #0
 8001742:	d000      	beq.n	8001746 <__aeabi_dadd+0x4ce>
 8001744:	e081      	b.n	800184a <__aeabi_dadd+0x5d2>
 8001746:	4643      	mov	r3, r8
 8001748:	430b      	orrs	r3, r1
 800174a:	d115      	bne.n	8001778 <__aeabi_dadd+0x500>
 800174c:	2080      	movs	r0, #128	; 0x80
 800174e:	2500      	movs	r5, #0
 8001750:	0300      	lsls	r0, r0, #12
 8001752:	e6e3      	b.n	800151c <__aeabi_dadd+0x2a4>
 8001754:	1a5c      	subs	r4, r3, r1
 8001756:	42a3      	cmp	r3, r4
 8001758:	419b      	sbcs	r3, r3
 800175a:	1bc7      	subs	r7, r0, r7
 800175c:	425b      	negs	r3, r3
 800175e:	2601      	movs	r6, #1
 8001760:	1aff      	subs	r7, r7, r3
 8001762:	e5da      	b.n	800131a <__aeabi_dadd+0xa2>
 8001764:	0742      	lsls	r2, r0, #29
 8001766:	08db      	lsrs	r3, r3, #3
 8001768:	4313      	orrs	r3, r2
 800176a:	08c0      	lsrs	r0, r0, #3
 800176c:	e6d2      	b.n	8001514 <__aeabi_dadd+0x29c>
 800176e:	0742      	lsls	r2, r0, #29
 8001770:	08db      	lsrs	r3, r3, #3
 8001772:	4313      	orrs	r3, r2
 8001774:	08c0      	lsrs	r0, r0, #3
 8001776:	e6ac      	b.n	80014d2 <__aeabi_dadd+0x25a>
 8001778:	4643      	mov	r3, r8
 800177a:	4642      	mov	r2, r8
 800177c:	08c9      	lsrs	r1, r1, #3
 800177e:	075b      	lsls	r3, r3, #29
 8001780:	4655      	mov	r5, sl
 8001782:	430b      	orrs	r3, r1
 8001784:	08d0      	lsrs	r0, r2, #3
 8001786:	e6c5      	b.n	8001514 <__aeabi_dadd+0x29c>
 8001788:	4643      	mov	r3, r8
 800178a:	4642      	mov	r2, r8
 800178c:	075b      	lsls	r3, r3, #29
 800178e:	08c9      	lsrs	r1, r1, #3
 8001790:	430b      	orrs	r3, r1
 8001792:	08d0      	lsrs	r0, r2, #3
 8001794:	e6be      	b.n	8001514 <__aeabi_dadd+0x29c>
 8001796:	4303      	orrs	r3, r0
 8001798:	001c      	movs	r4, r3
 800179a:	1e63      	subs	r3, r4, #1
 800179c:	419c      	sbcs	r4, r3
 800179e:	e6fc      	b.n	800159a <__aeabi_dadd+0x322>
 80017a0:	0002      	movs	r2, r0
 80017a2:	3c20      	subs	r4, #32
 80017a4:	40e2      	lsrs	r2, r4
 80017a6:	0014      	movs	r4, r2
 80017a8:	4662      	mov	r2, ip
 80017aa:	2a20      	cmp	r2, #32
 80017ac:	d003      	beq.n	80017b6 <__aeabi_dadd+0x53e>
 80017ae:	2540      	movs	r5, #64	; 0x40
 80017b0:	1aad      	subs	r5, r5, r2
 80017b2:	40a8      	lsls	r0, r5
 80017b4:	4303      	orrs	r3, r0
 80017b6:	1e58      	subs	r0, r3, #1
 80017b8:	4183      	sbcs	r3, r0
 80017ba:	4323      	orrs	r3, r4
 80017bc:	e775      	b.n	80016aa <__aeabi_dadd+0x432>
 80017be:	2a00      	cmp	r2, #0
 80017c0:	d0e2      	beq.n	8001788 <__aeabi_dadd+0x510>
 80017c2:	003a      	movs	r2, r7
 80017c4:	430a      	orrs	r2, r1
 80017c6:	d0cd      	beq.n	8001764 <__aeabi_dadd+0x4ec>
 80017c8:	0742      	lsls	r2, r0, #29
 80017ca:	08db      	lsrs	r3, r3, #3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	08c0      	lsrs	r0, r0, #3
 80017d2:	0312      	lsls	r2, r2, #12
 80017d4:	4210      	tst	r0, r2
 80017d6:	d006      	beq.n	80017e6 <__aeabi_dadd+0x56e>
 80017d8:	08fc      	lsrs	r4, r7, #3
 80017da:	4214      	tst	r4, r2
 80017dc:	d103      	bne.n	80017e6 <__aeabi_dadd+0x56e>
 80017de:	0020      	movs	r0, r4
 80017e0:	08cb      	lsrs	r3, r1, #3
 80017e2:	077a      	lsls	r2, r7, #29
 80017e4:	4313      	orrs	r3, r2
 80017e6:	0f5a      	lsrs	r2, r3, #29
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	0752      	lsls	r2, r2, #29
 80017ec:	08db      	lsrs	r3, r3, #3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	e690      	b.n	8001514 <__aeabi_dadd+0x29c>
 80017f2:	4643      	mov	r3, r8
 80017f4:	430b      	orrs	r3, r1
 80017f6:	d100      	bne.n	80017fa <__aeabi_dadd+0x582>
 80017f8:	e709      	b.n	800160e <__aeabi_dadd+0x396>
 80017fa:	4643      	mov	r3, r8
 80017fc:	4642      	mov	r2, r8
 80017fe:	08c9      	lsrs	r1, r1, #3
 8001800:	075b      	lsls	r3, r3, #29
 8001802:	4655      	mov	r5, sl
 8001804:	430b      	orrs	r3, r1
 8001806:	08d0      	lsrs	r0, r2, #3
 8001808:	e666      	b.n	80014d8 <__aeabi_dadd+0x260>
 800180a:	1acc      	subs	r4, r1, r3
 800180c:	42a1      	cmp	r1, r4
 800180e:	4189      	sbcs	r1, r1
 8001810:	1a3f      	subs	r7, r7, r0
 8001812:	4249      	negs	r1, r1
 8001814:	4655      	mov	r5, sl
 8001816:	2601      	movs	r6, #1
 8001818:	1a7f      	subs	r7, r7, r1
 800181a:	e57e      	b.n	800131a <__aeabi_dadd+0xa2>
 800181c:	4642      	mov	r2, r8
 800181e:	1a5c      	subs	r4, r3, r1
 8001820:	1a87      	subs	r7, r0, r2
 8001822:	42a3      	cmp	r3, r4
 8001824:	4192      	sbcs	r2, r2
 8001826:	4252      	negs	r2, r2
 8001828:	1abf      	subs	r7, r7, r2
 800182a:	023a      	lsls	r2, r7, #8
 800182c:	d53d      	bpl.n	80018aa <__aeabi_dadd+0x632>
 800182e:	1acc      	subs	r4, r1, r3
 8001830:	42a1      	cmp	r1, r4
 8001832:	4189      	sbcs	r1, r1
 8001834:	4643      	mov	r3, r8
 8001836:	4249      	negs	r1, r1
 8001838:	1a1f      	subs	r7, r3, r0
 800183a:	4655      	mov	r5, sl
 800183c:	1a7f      	subs	r7, r7, r1
 800183e:	e595      	b.n	800136c <__aeabi_dadd+0xf4>
 8001840:	077b      	lsls	r3, r7, #29
 8001842:	08c9      	lsrs	r1, r1, #3
 8001844:	430b      	orrs	r3, r1
 8001846:	08f8      	lsrs	r0, r7, #3
 8001848:	e643      	b.n	80014d2 <__aeabi_dadd+0x25a>
 800184a:	4644      	mov	r4, r8
 800184c:	08db      	lsrs	r3, r3, #3
 800184e:	430c      	orrs	r4, r1
 8001850:	d130      	bne.n	80018b4 <__aeabi_dadd+0x63c>
 8001852:	0742      	lsls	r2, r0, #29
 8001854:	4313      	orrs	r3, r2
 8001856:	08c0      	lsrs	r0, r0, #3
 8001858:	e65c      	b.n	8001514 <__aeabi_dadd+0x29c>
 800185a:	077b      	lsls	r3, r7, #29
 800185c:	08c9      	lsrs	r1, r1, #3
 800185e:	430b      	orrs	r3, r1
 8001860:	08f8      	lsrs	r0, r7, #3
 8001862:	e639      	b.n	80014d8 <__aeabi_dadd+0x260>
 8001864:	185c      	adds	r4, r3, r1
 8001866:	429c      	cmp	r4, r3
 8001868:	419b      	sbcs	r3, r3
 800186a:	4440      	add	r0, r8
 800186c:	425b      	negs	r3, r3
 800186e:	18c7      	adds	r7, r0, r3
 8001870:	023b      	lsls	r3, r7, #8
 8001872:	d400      	bmi.n	8001876 <__aeabi_dadd+0x5fe>
 8001874:	e625      	b.n	80014c2 <__aeabi_dadd+0x24a>
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <__aeabi_dadd+0x674>)
 8001878:	2601      	movs	r6, #1
 800187a:	401f      	ands	r7, r3
 800187c:	e621      	b.n	80014c2 <__aeabi_dadd+0x24a>
 800187e:	0004      	movs	r4, r0
 8001880:	3a20      	subs	r2, #32
 8001882:	40d4      	lsrs	r4, r2
 8001884:	4662      	mov	r2, ip
 8001886:	2a20      	cmp	r2, #32
 8001888:	d004      	beq.n	8001894 <__aeabi_dadd+0x61c>
 800188a:	2240      	movs	r2, #64	; 0x40
 800188c:	4666      	mov	r6, ip
 800188e:	1b92      	subs	r2, r2, r6
 8001890:	4090      	lsls	r0, r2
 8001892:	4303      	orrs	r3, r0
 8001894:	1e5a      	subs	r2, r3, #1
 8001896:	4193      	sbcs	r3, r2
 8001898:	431c      	orrs	r4, r3
 800189a:	e67e      	b.n	800159a <__aeabi_dadd+0x322>
 800189c:	185c      	adds	r4, r3, r1
 800189e:	428c      	cmp	r4, r1
 80018a0:	4189      	sbcs	r1, r1
 80018a2:	4440      	add	r0, r8
 80018a4:	4249      	negs	r1, r1
 80018a6:	1847      	adds	r7, r0, r1
 80018a8:	e6dd      	b.n	8001666 <__aeabi_dadd+0x3ee>
 80018aa:	0023      	movs	r3, r4
 80018ac:	433b      	orrs	r3, r7
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x63a>
 80018b0:	e6ad      	b.n	800160e <__aeabi_dadd+0x396>
 80018b2:	e606      	b.n	80014c2 <__aeabi_dadd+0x24a>
 80018b4:	0744      	lsls	r4, r0, #29
 80018b6:	4323      	orrs	r3, r4
 80018b8:	2480      	movs	r4, #128	; 0x80
 80018ba:	08c0      	lsrs	r0, r0, #3
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	4220      	tst	r0, r4
 80018c0:	d008      	beq.n	80018d4 <__aeabi_dadd+0x65c>
 80018c2:	4642      	mov	r2, r8
 80018c4:	08d6      	lsrs	r6, r2, #3
 80018c6:	4226      	tst	r6, r4
 80018c8:	d104      	bne.n	80018d4 <__aeabi_dadd+0x65c>
 80018ca:	4655      	mov	r5, sl
 80018cc:	0030      	movs	r0, r6
 80018ce:	08cb      	lsrs	r3, r1, #3
 80018d0:	0751      	lsls	r1, r2, #29
 80018d2:	430b      	orrs	r3, r1
 80018d4:	0f5a      	lsrs	r2, r3, #29
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	0752      	lsls	r2, r2, #29
 80018dc:	4313      	orrs	r3, r2
 80018de:	e619      	b.n	8001514 <__aeabi_dadd+0x29c>
 80018e0:	2300      	movs	r3, #0
 80018e2:	4a01      	ldr	r2, [pc, #4]	; (80018e8 <__aeabi_dadd+0x670>)
 80018e4:	001f      	movs	r7, r3
 80018e6:	e55e      	b.n	80013a6 <__aeabi_dadd+0x12e>
 80018e8:	000007ff 	.word	0x000007ff
 80018ec:	ff7fffff 	.word	0xff7fffff

080018f0 <__aeabi_ddiv>:
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f2:	4657      	mov	r7, sl
 80018f4:	464e      	mov	r6, r9
 80018f6:	4645      	mov	r5, r8
 80018f8:	46de      	mov	lr, fp
 80018fa:	b5e0      	push	{r5, r6, r7, lr}
 80018fc:	4681      	mov	r9, r0
 80018fe:	0005      	movs	r5, r0
 8001900:	030c      	lsls	r4, r1, #12
 8001902:	0048      	lsls	r0, r1, #1
 8001904:	4692      	mov	sl, r2
 8001906:	001f      	movs	r7, r3
 8001908:	b085      	sub	sp, #20
 800190a:	0b24      	lsrs	r4, r4, #12
 800190c:	0d40      	lsrs	r0, r0, #21
 800190e:	0fce      	lsrs	r6, r1, #31
 8001910:	2800      	cmp	r0, #0
 8001912:	d100      	bne.n	8001916 <__aeabi_ddiv+0x26>
 8001914:	e156      	b.n	8001bc4 <__aeabi_ddiv+0x2d4>
 8001916:	4bd4      	ldr	r3, [pc, #848]	; (8001c68 <__aeabi_ddiv+0x378>)
 8001918:	4298      	cmp	r0, r3
 800191a:	d100      	bne.n	800191e <__aeabi_ddiv+0x2e>
 800191c:	e172      	b.n	8001c04 <__aeabi_ddiv+0x314>
 800191e:	0f6b      	lsrs	r3, r5, #29
 8001920:	00e4      	lsls	r4, r4, #3
 8001922:	431c      	orrs	r4, r3
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	041b      	lsls	r3, r3, #16
 8001928:	4323      	orrs	r3, r4
 800192a:	4698      	mov	r8, r3
 800192c:	4bcf      	ldr	r3, [pc, #828]	; (8001c6c <__aeabi_ddiv+0x37c>)
 800192e:	00ed      	lsls	r5, r5, #3
 8001930:	469b      	mov	fp, r3
 8001932:	2300      	movs	r3, #0
 8001934:	4699      	mov	r9, r3
 8001936:	4483      	add	fp, r0
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	033c      	lsls	r4, r7, #12
 800193c:	007b      	lsls	r3, r7, #1
 800193e:	4650      	mov	r0, sl
 8001940:	0b24      	lsrs	r4, r4, #12
 8001942:	0d5b      	lsrs	r3, r3, #21
 8001944:	0fff      	lsrs	r7, r7, #31
 8001946:	2b00      	cmp	r3, #0
 8001948:	d100      	bne.n	800194c <__aeabi_ddiv+0x5c>
 800194a:	e11f      	b.n	8001b8c <__aeabi_ddiv+0x29c>
 800194c:	4ac6      	ldr	r2, [pc, #792]	; (8001c68 <__aeabi_ddiv+0x378>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d100      	bne.n	8001954 <__aeabi_ddiv+0x64>
 8001952:	e162      	b.n	8001c1a <__aeabi_ddiv+0x32a>
 8001954:	49c5      	ldr	r1, [pc, #788]	; (8001c6c <__aeabi_ddiv+0x37c>)
 8001956:	0f42      	lsrs	r2, r0, #29
 8001958:	468c      	mov	ip, r1
 800195a:	00e4      	lsls	r4, r4, #3
 800195c:	4659      	mov	r1, fp
 800195e:	4314      	orrs	r4, r2
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	4463      	add	r3, ip
 8001964:	0412      	lsls	r2, r2, #16
 8001966:	1acb      	subs	r3, r1, r3
 8001968:	4314      	orrs	r4, r2
 800196a:	469b      	mov	fp, r3
 800196c:	00c2      	lsls	r2, r0, #3
 800196e:	2000      	movs	r0, #0
 8001970:	0033      	movs	r3, r6
 8001972:	407b      	eors	r3, r7
 8001974:	469a      	mov	sl, r3
 8001976:	464b      	mov	r3, r9
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d827      	bhi.n	80019cc <__aeabi_ddiv+0xdc>
 800197c:	49bc      	ldr	r1, [pc, #752]	; (8001c70 <__aeabi_ddiv+0x380>)
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	58cb      	ldr	r3, [r1, r3]
 8001982:	469f      	mov	pc, r3
 8001984:	46b2      	mov	sl, r6
 8001986:	9b00      	ldr	r3, [sp, #0]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d016      	beq.n	80019ba <__aeabi_ddiv+0xca>
 800198c:	2b03      	cmp	r3, #3
 800198e:	d100      	bne.n	8001992 <__aeabi_ddiv+0xa2>
 8001990:	e28e      	b.n	8001eb0 <__aeabi_ddiv+0x5c0>
 8001992:	2b01      	cmp	r3, #1
 8001994:	d000      	beq.n	8001998 <__aeabi_ddiv+0xa8>
 8001996:	e0d9      	b.n	8001b4c <__aeabi_ddiv+0x25c>
 8001998:	2300      	movs	r3, #0
 800199a:	2400      	movs	r4, #0
 800199c:	2500      	movs	r5, #0
 800199e:	4652      	mov	r2, sl
 80019a0:	051b      	lsls	r3, r3, #20
 80019a2:	4323      	orrs	r3, r4
 80019a4:	07d2      	lsls	r2, r2, #31
 80019a6:	4313      	orrs	r3, r2
 80019a8:	0028      	movs	r0, r5
 80019aa:	0019      	movs	r1, r3
 80019ac:	b005      	add	sp, #20
 80019ae:	bcf0      	pop	{r4, r5, r6, r7}
 80019b0:	46bb      	mov	fp, r7
 80019b2:	46b2      	mov	sl, r6
 80019b4:	46a9      	mov	r9, r5
 80019b6:	46a0      	mov	r8, r4
 80019b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ba:	2400      	movs	r4, #0
 80019bc:	2500      	movs	r5, #0
 80019be:	4baa      	ldr	r3, [pc, #680]	; (8001c68 <__aeabi_ddiv+0x378>)
 80019c0:	e7ed      	b.n	800199e <__aeabi_ddiv+0xae>
 80019c2:	46ba      	mov	sl, r7
 80019c4:	46a0      	mov	r8, r4
 80019c6:	0015      	movs	r5, r2
 80019c8:	9000      	str	r0, [sp, #0]
 80019ca:	e7dc      	b.n	8001986 <__aeabi_ddiv+0x96>
 80019cc:	4544      	cmp	r4, r8
 80019ce:	d200      	bcs.n	80019d2 <__aeabi_ddiv+0xe2>
 80019d0:	e1c7      	b.n	8001d62 <__aeabi_ddiv+0x472>
 80019d2:	d100      	bne.n	80019d6 <__aeabi_ddiv+0xe6>
 80019d4:	e1c2      	b.n	8001d5c <__aeabi_ddiv+0x46c>
 80019d6:	2301      	movs	r3, #1
 80019d8:	425b      	negs	r3, r3
 80019da:	469c      	mov	ip, r3
 80019dc:	002e      	movs	r6, r5
 80019de:	4640      	mov	r0, r8
 80019e0:	2500      	movs	r5, #0
 80019e2:	44e3      	add	fp, ip
 80019e4:	0223      	lsls	r3, r4, #8
 80019e6:	0e14      	lsrs	r4, r2, #24
 80019e8:	431c      	orrs	r4, r3
 80019ea:	0c1b      	lsrs	r3, r3, #16
 80019ec:	4699      	mov	r9, r3
 80019ee:	0423      	lsls	r3, r4, #16
 80019f0:	0c1f      	lsrs	r7, r3, #16
 80019f2:	0212      	lsls	r2, r2, #8
 80019f4:	4649      	mov	r1, r9
 80019f6:	9200      	str	r2, [sp, #0]
 80019f8:	9701      	str	r7, [sp, #4]
 80019fa:	f7fe fc25 	bl	8000248 <__aeabi_uidivmod>
 80019fe:	0002      	movs	r2, r0
 8001a00:	437a      	muls	r2, r7
 8001a02:	040b      	lsls	r3, r1, #16
 8001a04:	0c31      	lsrs	r1, r6, #16
 8001a06:	4680      	mov	r8, r0
 8001a08:	4319      	orrs	r1, r3
 8001a0a:	428a      	cmp	r2, r1
 8001a0c:	d907      	bls.n	8001a1e <__aeabi_ddiv+0x12e>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	425b      	negs	r3, r3
 8001a12:	469c      	mov	ip, r3
 8001a14:	1909      	adds	r1, r1, r4
 8001a16:	44e0      	add	r8, ip
 8001a18:	428c      	cmp	r4, r1
 8001a1a:	d800      	bhi.n	8001a1e <__aeabi_ddiv+0x12e>
 8001a1c:	e207      	b.n	8001e2e <__aeabi_ddiv+0x53e>
 8001a1e:	1a88      	subs	r0, r1, r2
 8001a20:	4649      	mov	r1, r9
 8001a22:	f7fe fc11 	bl	8000248 <__aeabi_uidivmod>
 8001a26:	0409      	lsls	r1, r1, #16
 8001a28:	468c      	mov	ip, r1
 8001a2a:	0431      	lsls	r1, r6, #16
 8001a2c:	4666      	mov	r6, ip
 8001a2e:	9a01      	ldr	r2, [sp, #4]
 8001a30:	0c09      	lsrs	r1, r1, #16
 8001a32:	4342      	muls	r2, r0
 8001a34:	0003      	movs	r3, r0
 8001a36:	4331      	orrs	r1, r6
 8001a38:	428a      	cmp	r2, r1
 8001a3a:	d904      	bls.n	8001a46 <__aeabi_ddiv+0x156>
 8001a3c:	1909      	adds	r1, r1, r4
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	428c      	cmp	r4, r1
 8001a42:	d800      	bhi.n	8001a46 <__aeabi_ddiv+0x156>
 8001a44:	e1ed      	b.n	8001e22 <__aeabi_ddiv+0x532>
 8001a46:	1a88      	subs	r0, r1, r2
 8001a48:	4642      	mov	r2, r8
 8001a4a:	0412      	lsls	r2, r2, #16
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	4690      	mov	r8, r2
 8001a50:	4641      	mov	r1, r8
 8001a52:	9b00      	ldr	r3, [sp, #0]
 8001a54:	040e      	lsls	r6, r1, #16
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	001f      	movs	r7, r3
 8001a5a:	9302      	str	r3, [sp, #8]
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	0c36      	lsrs	r6, r6, #16
 8001a60:	041b      	lsls	r3, r3, #16
 8001a62:	0c19      	lsrs	r1, r3, #16
 8001a64:	000b      	movs	r3, r1
 8001a66:	4373      	muls	r3, r6
 8001a68:	0c12      	lsrs	r2, r2, #16
 8001a6a:	437e      	muls	r6, r7
 8001a6c:	9103      	str	r1, [sp, #12]
 8001a6e:	4351      	muls	r1, r2
 8001a70:	437a      	muls	r2, r7
 8001a72:	0c1f      	lsrs	r7, r3, #16
 8001a74:	46bc      	mov	ip, r7
 8001a76:	1876      	adds	r6, r6, r1
 8001a78:	4466      	add	r6, ip
 8001a7a:	42b1      	cmp	r1, r6
 8001a7c:	d903      	bls.n	8001a86 <__aeabi_ddiv+0x196>
 8001a7e:	2180      	movs	r1, #128	; 0x80
 8001a80:	0249      	lsls	r1, r1, #9
 8001a82:	468c      	mov	ip, r1
 8001a84:	4462      	add	r2, ip
 8001a86:	0c31      	lsrs	r1, r6, #16
 8001a88:	188a      	adds	r2, r1, r2
 8001a8a:	0431      	lsls	r1, r6, #16
 8001a8c:	041e      	lsls	r6, r3, #16
 8001a8e:	0c36      	lsrs	r6, r6, #16
 8001a90:	198e      	adds	r6, r1, r6
 8001a92:	4290      	cmp	r0, r2
 8001a94:	d302      	bcc.n	8001a9c <__aeabi_ddiv+0x1ac>
 8001a96:	d112      	bne.n	8001abe <__aeabi_ddiv+0x1ce>
 8001a98:	42b5      	cmp	r5, r6
 8001a9a:	d210      	bcs.n	8001abe <__aeabi_ddiv+0x1ce>
 8001a9c:	4643      	mov	r3, r8
 8001a9e:	1e59      	subs	r1, r3, #1
 8001aa0:	9b00      	ldr	r3, [sp, #0]
 8001aa2:	469c      	mov	ip, r3
 8001aa4:	4465      	add	r5, ip
 8001aa6:	001f      	movs	r7, r3
 8001aa8:	429d      	cmp	r5, r3
 8001aaa:	419b      	sbcs	r3, r3
 8001aac:	425b      	negs	r3, r3
 8001aae:	191b      	adds	r3, r3, r4
 8001ab0:	18c0      	adds	r0, r0, r3
 8001ab2:	4284      	cmp	r4, r0
 8001ab4:	d200      	bcs.n	8001ab8 <__aeabi_ddiv+0x1c8>
 8001ab6:	e1a0      	b.n	8001dfa <__aeabi_ddiv+0x50a>
 8001ab8:	d100      	bne.n	8001abc <__aeabi_ddiv+0x1cc>
 8001aba:	e19b      	b.n	8001df4 <__aeabi_ddiv+0x504>
 8001abc:	4688      	mov	r8, r1
 8001abe:	1bae      	subs	r6, r5, r6
 8001ac0:	42b5      	cmp	r5, r6
 8001ac2:	41ad      	sbcs	r5, r5
 8001ac4:	1a80      	subs	r0, r0, r2
 8001ac6:	426d      	negs	r5, r5
 8001ac8:	1b40      	subs	r0, r0, r5
 8001aca:	4284      	cmp	r4, r0
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_ddiv+0x1e0>
 8001ace:	e1d5      	b.n	8001e7c <__aeabi_ddiv+0x58c>
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	f7fe fbb9 	bl	8000248 <__aeabi_uidivmod>
 8001ad6:	9a01      	ldr	r2, [sp, #4]
 8001ad8:	040b      	lsls	r3, r1, #16
 8001ada:	4342      	muls	r2, r0
 8001adc:	0c31      	lsrs	r1, r6, #16
 8001ade:	0005      	movs	r5, r0
 8001ae0:	4319      	orrs	r1, r3
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	d900      	bls.n	8001ae8 <__aeabi_ddiv+0x1f8>
 8001ae6:	e16c      	b.n	8001dc2 <__aeabi_ddiv+0x4d2>
 8001ae8:	1a88      	subs	r0, r1, r2
 8001aea:	4649      	mov	r1, r9
 8001aec:	f7fe fbac 	bl	8000248 <__aeabi_uidivmod>
 8001af0:	9a01      	ldr	r2, [sp, #4]
 8001af2:	0436      	lsls	r6, r6, #16
 8001af4:	4342      	muls	r2, r0
 8001af6:	0409      	lsls	r1, r1, #16
 8001af8:	0c36      	lsrs	r6, r6, #16
 8001afa:	0003      	movs	r3, r0
 8001afc:	430e      	orrs	r6, r1
 8001afe:	42b2      	cmp	r2, r6
 8001b00:	d900      	bls.n	8001b04 <__aeabi_ddiv+0x214>
 8001b02:	e153      	b.n	8001dac <__aeabi_ddiv+0x4bc>
 8001b04:	9803      	ldr	r0, [sp, #12]
 8001b06:	1ab6      	subs	r6, r6, r2
 8001b08:	0002      	movs	r2, r0
 8001b0a:	042d      	lsls	r5, r5, #16
 8001b0c:	431d      	orrs	r5, r3
 8001b0e:	9f02      	ldr	r7, [sp, #8]
 8001b10:	042b      	lsls	r3, r5, #16
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	435a      	muls	r2, r3
 8001b16:	437b      	muls	r3, r7
 8001b18:	469c      	mov	ip, r3
 8001b1a:	0c29      	lsrs	r1, r5, #16
 8001b1c:	4348      	muls	r0, r1
 8001b1e:	0c13      	lsrs	r3, r2, #16
 8001b20:	4484      	add	ip, r0
 8001b22:	4463      	add	r3, ip
 8001b24:	4379      	muls	r1, r7
 8001b26:	4298      	cmp	r0, r3
 8001b28:	d903      	bls.n	8001b32 <__aeabi_ddiv+0x242>
 8001b2a:	2080      	movs	r0, #128	; 0x80
 8001b2c:	0240      	lsls	r0, r0, #9
 8001b2e:	4684      	mov	ip, r0
 8001b30:	4461      	add	r1, ip
 8001b32:	0c18      	lsrs	r0, r3, #16
 8001b34:	0412      	lsls	r2, r2, #16
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	0c12      	lsrs	r2, r2, #16
 8001b3a:	1841      	adds	r1, r0, r1
 8001b3c:	189b      	adds	r3, r3, r2
 8001b3e:	428e      	cmp	r6, r1
 8001b40:	d200      	bcs.n	8001b44 <__aeabi_ddiv+0x254>
 8001b42:	e0ff      	b.n	8001d44 <__aeabi_ddiv+0x454>
 8001b44:	d100      	bne.n	8001b48 <__aeabi_ddiv+0x258>
 8001b46:	e0fa      	b.n	8001d3e <__aeabi_ddiv+0x44e>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	431d      	orrs	r5, r3
 8001b4c:	4a49      	ldr	r2, [pc, #292]	; (8001c74 <__aeabi_ddiv+0x384>)
 8001b4e:	445a      	add	r2, fp
 8001b50:	2a00      	cmp	r2, #0
 8001b52:	dc00      	bgt.n	8001b56 <__aeabi_ddiv+0x266>
 8001b54:	e0aa      	b.n	8001cac <__aeabi_ddiv+0x3bc>
 8001b56:	076b      	lsls	r3, r5, #29
 8001b58:	d000      	beq.n	8001b5c <__aeabi_ddiv+0x26c>
 8001b5a:	e13d      	b.n	8001dd8 <__aeabi_ddiv+0x4e8>
 8001b5c:	08ed      	lsrs	r5, r5, #3
 8001b5e:	4643      	mov	r3, r8
 8001b60:	01db      	lsls	r3, r3, #7
 8001b62:	d506      	bpl.n	8001b72 <__aeabi_ddiv+0x282>
 8001b64:	4642      	mov	r2, r8
 8001b66:	4b44      	ldr	r3, [pc, #272]	; (8001c78 <__aeabi_ddiv+0x388>)
 8001b68:	401a      	ands	r2, r3
 8001b6a:	4690      	mov	r8, r2
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	00d2      	lsls	r2, r2, #3
 8001b70:	445a      	add	r2, fp
 8001b72:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <__aeabi_ddiv+0x38c>)
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dd00      	ble.n	8001b7a <__aeabi_ddiv+0x28a>
 8001b78:	e71f      	b.n	80019ba <__aeabi_ddiv+0xca>
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	075b      	lsls	r3, r3, #29
 8001b7e:	431d      	orrs	r5, r3
 8001b80:	4643      	mov	r3, r8
 8001b82:	0552      	lsls	r2, r2, #21
 8001b84:	025c      	lsls	r4, r3, #9
 8001b86:	0b24      	lsrs	r4, r4, #12
 8001b88:	0d53      	lsrs	r3, r2, #21
 8001b8a:	e708      	b.n	800199e <__aeabi_ddiv+0xae>
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	4322      	orrs	r2, r4
 8001b90:	d100      	bne.n	8001b94 <__aeabi_ddiv+0x2a4>
 8001b92:	e07b      	b.n	8001c8c <__aeabi_ddiv+0x39c>
 8001b94:	2c00      	cmp	r4, #0
 8001b96:	d100      	bne.n	8001b9a <__aeabi_ddiv+0x2aa>
 8001b98:	e0fa      	b.n	8001d90 <__aeabi_ddiv+0x4a0>
 8001b9a:	0020      	movs	r0, r4
 8001b9c:	f001 fa22 	bl	8002fe4 <__clzsi2>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	3a0b      	subs	r2, #11
 8001ba4:	231d      	movs	r3, #29
 8001ba6:	0001      	movs	r1, r0
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	4652      	mov	r2, sl
 8001bac:	3908      	subs	r1, #8
 8001bae:	40da      	lsrs	r2, r3
 8001bb0:	408c      	lsls	r4, r1
 8001bb2:	4314      	orrs	r4, r2
 8001bb4:	4652      	mov	r2, sl
 8001bb6:	408a      	lsls	r2, r1
 8001bb8:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <__aeabi_ddiv+0x390>)
 8001bba:	4458      	add	r0, fp
 8001bbc:	469b      	mov	fp, r3
 8001bbe:	4483      	add	fp, r0
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	e6d5      	b.n	8001970 <__aeabi_ddiv+0x80>
 8001bc4:	464b      	mov	r3, r9
 8001bc6:	4323      	orrs	r3, r4
 8001bc8:	4698      	mov	r8, r3
 8001bca:	d044      	beq.n	8001c56 <__aeabi_ddiv+0x366>
 8001bcc:	2c00      	cmp	r4, #0
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_ddiv+0x2e2>
 8001bd0:	e0ce      	b.n	8001d70 <__aeabi_ddiv+0x480>
 8001bd2:	0020      	movs	r0, r4
 8001bd4:	f001 fa06 	bl	8002fe4 <__clzsi2>
 8001bd8:	0001      	movs	r1, r0
 8001bda:	0002      	movs	r2, r0
 8001bdc:	390b      	subs	r1, #11
 8001bde:	231d      	movs	r3, #29
 8001be0:	1a5b      	subs	r3, r3, r1
 8001be2:	4649      	mov	r1, r9
 8001be4:	0010      	movs	r0, r2
 8001be6:	40d9      	lsrs	r1, r3
 8001be8:	3808      	subs	r0, #8
 8001bea:	4084      	lsls	r4, r0
 8001bec:	000b      	movs	r3, r1
 8001bee:	464d      	mov	r5, r9
 8001bf0:	4323      	orrs	r3, r4
 8001bf2:	4698      	mov	r8, r3
 8001bf4:	4085      	lsls	r5, r0
 8001bf6:	4823      	ldr	r0, [pc, #140]	; (8001c84 <__aeabi_ddiv+0x394>)
 8001bf8:	1a83      	subs	r3, r0, r2
 8001bfa:	469b      	mov	fp, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	4699      	mov	r9, r3
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	e69a      	b.n	800193a <__aeabi_ddiv+0x4a>
 8001c04:	464b      	mov	r3, r9
 8001c06:	4323      	orrs	r3, r4
 8001c08:	4698      	mov	r8, r3
 8001c0a:	d11d      	bne.n	8001c48 <__aeabi_ddiv+0x358>
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	4699      	mov	r9, r3
 8001c10:	3b06      	subs	r3, #6
 8001c12:	2500      	movs	r5, #0
 8001c14:	4683      	mov	fp, r0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	e68f      	b.n	800193a <__aeabi_ddiv+0x4a>
 8001c1a:	4652      	mov	r2, sl
 8001c1c:	4322      	orrs	r2, r4
 8001c1e:	d109      	bne.n	8001c34 <__aeabi_ddiv+0x344>
 8001c20:	2302      	movs	r3, #2
 8001c22:	4649      	mov	r1, r9
 8001c24:	4319      	orrs	r1, r3
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <__aeabi_ddiv+0x398>)
 8001c28:	4689      	mov	r9, r1
 8001c2a:	469c      	mov	ip, r3
 8001c2c:	2400      	movs	r4, #0
 8001c2e:	2002      	movs	r0, #2
 8001c30:	44e3      	add	fp, ip
 8001c32:	e69d      	b.n	8001970 <__aeabi_ddiv+0x80>
 8001c34:	2303      	movs	r3, #3
 8001c36:	464a      	mov	r2, r9
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <__aeabi_ddiv+0x398>)
 8001c3c:	4691      	mov	r9, r2
 8001c3e:	469c      	mov	ip, r3
 8001c40:	4652      	mov	r2, sl
 8001c42:	2003      	movs	r0, #3
 8001c44:	44e3      	add	fp, ip
 8001c46:	e693      	b.n	8001970 <__aeabi_ddiv+0x80>
 8001c48:	230c      	movs	r3, #12
 8001c4a:	4699      	mov	r9, r3
 8001c4c:	3b09      	subs	r3, #9
 8001c4e:	46a0      	mov	r8, r4
 8001c50:	4683      	mov	fp, r0
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	e671      	b.n	800193a <__aeabi_ddiv+0x4a>
 8001c56:	2304      	movs	r3, #4
 8001c58:	4699      	mov	r9, r3
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	469b      	mov	fp, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	2500      	movs	r5, #0
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	e669      	b.n	800193a <__aeabi_ddiv+0x4a>
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	000007ff 	.word	0x000007ff
 8001c6c:	fffffc01 	.word	0xfffffc01
 8001c70:	08009dc0 	.word	0x08009dc0
 8001c74:	000003ff 	.word	0x000003ff
 8001c78:	feffffff 	.word	0xfeffffff
 8001c7c:	000007fe 	.word	0x000007fe
 8001c80:	000003f3 	.word	0x000003f3
 8001c84:	fffffc0d 	.word	0xfffffc0d
 8001c88:	fffff801 	.word	0xfffff801
 8001c8c:	4649      	mov	r1, r9
 8001c8e:	2301      	movs	r3, #1
 8001c90:	4319      	orrs	r1, r3
 8001c92:	4689      	mov	r9, r1
 8001c94:	2400      	movs	r4, #0
 8001c96:	2001      	movs	r0, #1
 8001c98:	e66a      	b.n	8001970 <__aeabi_ddiv+0x80>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2480      	movs	r4, #128	; 0x80
 8001c9e:	469a      	mov	sl, r3
 8001ca0:	2500      	movs	r5, #0
 8001ca2:	4b8a      	ldr	r3, [pc, #552]	; (8001ecc <__aeabi_ddiv+0x5dc>)
 8001ca4:	0324      	lsls	r4, r4, #12
 8001ca6:	e67a      	b.n	800199e <__aeabi_ddiv+0xae>
 8001ca8:	2501      	movs	r5, #1
 8001caa:	426d      	negs	r5, r5
 8001cac:	2301      	movs	r3, #1
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	2b38      	cmp	r3, #56	; 0x38
 8001cb2:	dd00      	ble.n	8001cb6 <__aeabi_ddiv+0x3c6>
 8001cb4:	e670      	b.n	8001998 <__aeabi_ddiv+0xa8>
 8001cb6:	2b1f      	cmp	r3, #31
 8001cb8:	dc00      	bgt.n	8001cbc <__aeabi_ddiv+0x3cc>
 8001cba:	e0bf      	b.n	8001e3c <__aeabi_ddiv+0x54c>
 8001cbc:	211f      	movs	r1, #31
 8001cbe:	4249      	negs	r1, r1
 8001cc0:	1a8a      	subs	r2, r1, r2
 8001cc2:	4641      	mov	r1, r8
 8001cc4:	40d1      	lsrs	r1, r2
 8001cc6:	000a      	movs	r2, r1
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	d004      	beq.n	8001cd6 <__aeabi_ddiv+0x3e6>
 8001ccc:	4641      	mov	r1, r8
 8001cce:	4b80      	ldr	r3, [pc, #512]	; (8001ed0 <__aeabi_ddiv+0x5e0>)
 8001cd0:	445b      	add	r3, fp
 8001cd2:	4099      	lsls	r1, r3
 8001cd4:	430d      	orrs	r5, r1
 8001cd6:	1e6b      	subs	r3, r5, #1
 8001cd8:	419d      	sbcs	r5, r3
 8001cda:	2307      	movs	r3, #7
 8001cdc:	432a      	orrs	r2, r5
 8001cde:	001d      	movs	r5, r3
 8001ce0:	2400      	movs	r4, #0
 8001ce2:	4015      	ands	r5, r2
 8001ce4:	4213      	tst	r3, r2
 8001ce6:	d100      	bne.n	8001cea <__aeabi_ddiv+0x3fa>
 8001ce8:	e0d4      	b.n	8001e94 <__aeabi_ddiv+0x5a4>
 8001cea:	210f      	movs	r1, #15
 8001cec:	2300      	movs	r3, #0
 8001cee:	4011      	ands	r1, r2
 8001cf0:	2904      	cmp	r1, #4
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_ddiv+0x406>
 8001cf4:	e0cb      	b.n	8001e8e <__aeabi_ddiv+0x59e>
 8001cf6:	1d11      	adds	r1, r2, #4
 8001cf8:	4291      	cmp	r1, r2
 8001cfa:	4192      	sbcs	r2, r2
 8001cfc:	4252      	negs	r2, r2
 8001cfe:	189b      	adds	r3, r3, r2
 8001d00:	000a      	movs	r2, r1
 8001d02:	0219      	lsls	r1, r3, #8
 8001d04:	d400      	bmi.n	8001d08 <__aeabi_ddiv+0x418>
 8001d06:	e0c2      	b.n	8001e8e <__aeabi_ddiv+0x59e>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	2400      	movs	r4, #0
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	e646      	b.n	800199e <__aeabi_ddiv+0xae>
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	4641      	mov	r1, r8
 8001d14:	031b      	lsls	r3, r3, #12
 8001d16:	4219      	tst	r1, r3
 8001d18:	d008      	beq.n	8001d2c <__aeabi_ddiv+0x43c>
 8001d1a:	421c      	tst	r4, r3
 8001d1c:	d106      	bne.n	8001d2c <__aeabi_ddiv+0x43c>
 8001d1e:	431c      	orrs	r4, r3
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	46ba      	mov	sl, r7
 8001d24:	0015      	movs	r5, r2
 8001d26:	4b69      	ldr	r3, [pc, #420]	; (8001ecc <__aeabi_ddiv+0x5dc>)
 8001d28:	0b24      	lsrs	r4, r4, #12
 8001d2a:	e638      	b.n	800199e <__aeabi_ddiv+0xae>
 8001d2c:	2480      	movs	r4, #128	; 0x80
 8001d2e:	4643      	mov	r3, r8
 8001d30:	0324      	lsls	r4, r4, #12
 8001d32:	431c      	orrs	r4, r3
 8001d34:	0324      	lsls	r4, r4, #12
 8001d36:	46b2      	mov	sl, r6
 8001d38:	4b64      	ldr	r3, [pc, #400]	; (8001ecc <__aeabi_ddiv+0x5dc>)
 8001d3a:	0b24      	lsrs	r4, r4, #12
 8001d3c:	e62f      	b.n	800199e <__aeabi_ddiv+0xae>
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d100      	bne.n	8001d44 <__aeabi_ddiv+0x454>
 8001d42:	e703      	b.n	8001b4c <__aeabi_ddiv+0x25c>
 8001d44:	19a6      	adds	r6, r4, r6
 8001d46:	1e68      	subs	r0, r5, #1
 8001d48:	42a6      	cmp	r6, r4
 8001d4a:	d200      	bcs.n	8001d4e <__aeabi_ddiv+0x45e>
 8001d4c:	e08d      	b.n	8001e6a <__aeabi_ddiv+0x57a>
 8001d4e:	428e      	cmp	r6, r1
 8001d50:	d200      	bcs.n	8001d54 <__aeabi_ddiv+0x464>
 8001d52:	e0a3      	b.n	8001e9c <__aeabi_ddiv+0x5ac>
 8001d54:	d100      	bne.n	8001d58 <__aeabi_ddiv+0x468>
 8001d56:	e0b3      	b.n	8001ec0 <__aeabi_ddiv+0x5d0>
 8001d58:	0005      	movs	r5, r0
 8001d5a:	e6f5      	b.n	8001b48 <__aeabi_ddiv+0x258>
 8001d5c:	42aa      	cmp	r2, r5
 8001d5e:	d900      	bls.n	8001d62 <__aeabi_ddiv+0x472>
 8001d60:	e639      	b.n	80019d6 <__aeabi_ddiv+0xe6>
 8001d62:	4643      	mov	r3, r8
 8001d64:	07de      	lsls	r6, r3, #31
 8001d66:	0858      	lsrs	r0, r3, #1
 8001d68:	086b      	lsrs	r3, r5, #1
 8001d6a:	431e      	orrs	r6, r3
 8001d6c:	07ed      	lsls	r5, r5, #31
 8001d6e:	e639      	b.n	80019e4 <__aeabi_ddiv+0xf4>
 8001d70:	4648      	mov	r0, r9
 8001d72:	f001 f937 	bl	8002fe4 <__clzsi2>
 8001d76:	0001      	movs	r1, r0
 8001d78:	0002      	movs	r2, r0
 8001d7a:	3115      	adds	r1, #21
 8001d7c:	3220      	adds	r2, #32
 8001d7e:	291c      	cmp	r1, #28
 8001d80:	dc00      	bgt.n	8001d84 <__aeabi_ddiv+0x494>
 8001d82:	e72c      	b.n	8001bde <__aeabi_ddiv+0x2ee>
 8001d84:	464b      	mov	r3, r9
 8001d86:	3808      	subs	r0, #8
 8001d88:	4083      	lsls	r3, r0
 8001d8a:	2500      	movs	r5, #0
 8001d8c:	4698      	mov	r8, r3
 8001d8e:	e732      	b.n	8001bf6 <__aeabi_ddiv+0x306>
 8001d90:	f001 f928 	bl	8002fe4 <__clzsi2>
 8001d94:	0003      	movs	r3, r0
 8001d96:	001a      	movs	r2, r3
 8001d98:	3215      	adds	r2, #21
 8001d9a:	3020      	adds	r0, #32
 8001d9c:	2a1c      	cmp	r2, #28
 8001d9e:	dc00      	bgt.n	8001da2 <__aeabi_ddiv+0x4b2>
 8001da0:	e700      	b.n	8001ba4 <__aeabi_ddiv+0x2b4>
 8001da2:	4654      	mov	r4, sl
 8001da4:	3b08      	subs	r3, #8
 8001da6:	2200      	movs	r2, #0
 8001da8:	409c      	lsls	r4, r3
 8001daa:	e705      	b.n	8001bb8 <__aeabi_ddiv+0x2c8>
 8001dac:	1936      	adds	r6, r6, r4
 8001dae:	3b01      	subs	r3, #1
 8001db0:	42b4      	cmp	r4, r6
 8001db2:	d900      	bls.n	8001db6 <__aeabi_ddiv+0x4c6>
 8001db4:	e6a6      	b.n	8001b04 <__aeabi_ddiv+0x214>
 8001db6:	42b2      	cmp	r2, r6
 8001db8:	d800      	bhi.n	8001dbc <__aeabi_ddiv+0x4cc>
 8001dba:	e6a3      	b.n	8001b04 <__aeabi_ddiv+0x214>
 8001dbc:	1e83      	subs	r3, r0, #2
 8001dbe:	1936      	adds	r6, r6, r4
 8001dc0:	e6a0      	b.n	8001b04 <__aeabi_ddiv+0x214>
 8001dc2:	1909      	adds	r1, r1, r4
 8001dc4:	3d01      	subs	r5, #1
 8001dc6:	428c      	cmp	r4, r1
 8001dc8:	d900      	bls.n	8001dcc <__aeabi_ddiv+0x4dc>
 8001dca:	e68d      	b.n	8001ae8 <__aeabi_ddiv+0x1f8>
 8001dcc:	428a      	cmp	r2, r1
 8001dce:	d800      	bhi.n	8001dd2 <__aeabi_ddiv+0x4e2>
 8001dd0:	e68a      	b.n	8001ae8 <__aeabi_ddiv+0x1f8>
 8001dd2:	1e85      	subs	r5, r0, #2
 8001dd4:	1909      	adds	r1, r1, r4
 8001dd6:	e687      	b.n	8001ae8 <__aeabi_ddiv+0x1f8>
 8001dd8:	230f      	movs	r3, #15
 8001dda:	402b      	ands	r3, r5
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d100      	bne.n	8001de2 <__aeabi_ddiv+0x4f2>
 8001de0:	e6bc      	b.n	8001b5c <__aeabi_ddiv+0x26c>
 8001de2:	2305      	movs	r3, #5
 8001de4:	425b      	negs	r3, r3
 8001de6:	42ab      	cmp	r3, r5
 8001de8:	419b      	sbcs	r3, r3
 8001dea:	3504      	adds	r5, #4
 8001dec:	425b      	negs	r3, r3
 8001dee:	08ed      	lsrs	r5, r5, #3
 8001df0:	4498      	add	r8, r3
 8001df2:	e6b4      	b.n	8001b5e <__aeabi_ddiv+0x26e>
 8001df4:	42af      	cmp	r7, r5
 8001df6:	d900      	bls.n	8001dfa <__aeabi_ddiv+0x50a>
 8001df8:	e660      	b.n	8001abc <__aeabi_ddiv+0x1cc>
 8001dfa:	4282      	cmp	r2, r0
 8001dfc:	d804      	bhi.n	8001e08 <__aeabi_ddiv+0x518>
 8001dfe:	d000      	beq.n	8001e02 <__aeabi_ddiv+0x512>
 8001e00:	e65c      	b.n	8001abc <__aeabi_ddiv+0x1cc>
 8001e02:	42ae      	cmp	r6, r5
 8001e04:	d800      	bhi.n	8001e08 <__aeabi_ddiv+0x518>
 8001e06:	e659      	b.n	8001abc <__aeabi_ddiv+0x1cc>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	425b      	negs	r3, r3
 8001e0c:	469c      	mov	ip, r3
 8001e0e:	9b00      	ldr	r3, [sp, #0]
 8001e10:	44e0      	add	r8, ip
 8001e12:	469c      	mov	ip, r3
 8001e14:	4465      	add	r5, ip
 8001e16:	429d      	cmp	r5, r3
 8001e18:	419b      	sbcs	r3, r3
 8001e1a:	425b      	negs	r3, r3
 8001e1c:	191b      	adds	r3, r3, r4
 8001e1e:	18c0      	adds	r0, r0, r3
 8001e20:	e64d      	b.n	8001abe <__aeabi_ddiv+0x1ce>
 8001e22:	428a      	cmp	r2, r1
 8001e24:	d800      	bhi.n	8001e28 <__aeabi_ddiv+0x538>
 8001e26:	e60e      	b.n	8001a46 <__aeabi_ddiv+0x156>
 8001e28:	1e83      	subs	r3, r0, #2
 8001e2a:	1909      	adds	r1, r1, r4
 8001e2c:	e60b      	b.n	8001a46 <__aeabi_ddiv+0x156>
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d800      	bhi.n	8001e34 <__aeabi_ddiv+0x544>
 8001e32:	e5f4      	b.n	8001a1e <__aeabi_ddiv+0x12e>
 8001e34:	1e83      	subs	r3, r0, #2
 8001e36:	4698      	mov	r8, r3
 8001e38:	1909      	adds	r1, r1, r4
 8001e3a:	e5f0      	b.n	8001a1e <__aeabi_ddiv+0x12e>
 8001e3c:	4925      	ldr	r1, [pc, #148]	; (8001ed4 <__aeabi_ddiv+0x5e4>)
 8001e3e:	0028      	movs	r0, r5
 8001e40:	4459      	add	r1, fp
 8001e42:	408d      	lsls	r5, r1
 8001e44:	4642      	mov	r2, r8
 8001e46:	408a      	lsls	r2, r1
 8001e48:	1e69      	subs	r1, r5, #1
 8001e4a:	418d      	sbcs	r5, r1
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	40d8      	lsrs	r0, r3
 8001e50:	40d9      	lsrs	r1, r3
 8001e52:	4302      	orrs	r2, r0
 8001e54:	432a      	orrs	r2, r5
 8001e56:	000b      	movs	r3, r1
 8001e58:	0751      	lsls	r1, r2, #29
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_ddiv+0x56e>
 8001e5c:	e751      	b.n	8001d02 <__aeabi_ddiv+0x412>
 8001e5e:	210f      	movs	r1, #15
 8001e60:	4011      	ands	r1, r2
 8001e62:	2904      	cmp	r1, #4
 8001e64:	d000      	beq.n	8001e68 <__aeabi_ddiv+0x578>
 8001e66:	e746      	b.n	8001cf6 <__aeabi_ddiv+0x406>
 8001e68:	e74b      	b.n	8001d02 <__aeabi_ddiv+0x412>
 8001e6a:	0005      	movs	r5, r0
 8001e6c:	428e      	cmp	r6, r1
 8001e6e:	d000      	beq.n	8001e72 <__aeabi_ddiv+0x582>
 8001e70:	e66a      	b.n	8001b48 <__aeabi_ddiv+0x258>
 8001e72:	9a00      	ldr	r2, [sp, #0]
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d000      	beq.n	8001e7a <__aeabi_ddiv+0x58a>
 8001e78:	e666      	b.n	8001b48 <__aeabi_ddiv+0x258>
 8001e7a:	e667      	b.n	8001b4c <__aeabi_ddiv+0x25c>
 8001e7c:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <__aeabi_ddiv+0x5e8>)
 8001e7e:	445a      	add	r2, fp
 8001e80:	2a00      	cmp	r2, #0
 8001e82:	dc00      	bgt.n	8001e86 <__aeabi_ddiv+0x596>
 8001e84:	e710      	b.n	8001ca8 <__aeabi_ddiv+0x3b8>
 8001e86:	2301      	movs	r3, #1
 8001e88:	2500      	movs	r5, #0
 8001e8a:	4498      	add	r8, r3
 8001e8c:	e667      	b.n	8001b5e <__aeabi_ddiv+0x26e>
 8001e8e:	075d      	lsls	r5, r3, #29
 8001e90:	025b      	lsls	r3, r3, #9
 8001e92:	0b1c      	lsrs	r4, r3, #12
 8001e94:	08d2      	lsrs	r2, r2, #3
 8001e96:	2300      	movs	r3, #0
 8001e98:	4315      	orrs	r5, r2
 8001e9a:	e580      	b.n	800199e <__aeabi_ddiv+0xae>
 8001e9c:	9800      	ldr	r0, [sp, #0]
 8001e9e:	3d02      	subs	r5, #2
 8001ea0:	0042      	lsls	r2, r0, #1
 8001ea2:	4282      	cmp	r2, r0
 8001ea4:	41bf      	sbcs	r7, r7
 8001ea6:	427f      	negs	r7, r7
 8001ea8:	193c      	adds	r4, r7, r4
 8001eaa:	1936      	adds	r6, r6, r4
 8001eac:	9200      	str	r2, [sp, #0]
 8001eae:	e7dd      	b.n	8001e6c <__aeabi_ddiv+0x57c>
 8001eb0:	2480      	movs	r4, #128	; 0x80
 8001eb2:	4643      	mov	r3, r8
 8001eb4:	0324      	lsls	r4, r4, #12
 8001eb6:	431c      	orrs	r4, r3
 8001eb8:	0324      	lsls	r4, r4, #12
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__aeabi_ddiv+0x5dc>)
 8001ebc:	0b24      	lsrs	r4, r4, #12
 8001ebe:	e56e      	b.n	800199e <__aeabi_ddiv+0xae>
 8001ec0:	9a00      	ldr	r2, [sp, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3ea      	bcc.n	8001e9c <__aeabi_ddiv+0x5ac>
 8001ec6:	0005      	movs	r5, r0
 8001ec8:	e7d3      	b.n	8001e72 <__aeabi_ddiv+0x582>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	000007ff 	.word	0x000007ff
 8001ed0:	0000043e 	.word	0x0000043e
 8001ed4:	0000041e 	.word	0x0000041e
 8001ed8:	000003ff 	.word	0x000003ff

08001edc <__eqdf2>:
 8001edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ede:	464e      	mov	r6, r9
 8001ee0:	4645      	mov	r5, r8
 8001ee2:	46de      	mov	lr, fp
 8001ee4:	4657      	mov	r7, sl
 8001ee6:	4690      	mov	r8, r2
 8001ee8:	b5e0      	push	{r5, r6, r7, lr}
 8001eea:	0017      	movs	r7, r2
 8001eec:	031a      	lsls	r2, r3, #12
 8001eee:	0b12      	lsrs	r2, r2, #12
 8001ef0:	0005      	movs	r5, r0
 8001ef2:	4684      	mov	ip, r0
 8001ef4:	4819      	ldr	r0, [pc, #100]	; (8001f5c <__eqdf2+0x80>)
 8001ef6:	030e      	lsls	r6, r1, #12
 8001ef8:	004c      	lsls	r4, r1, #1
 8001efa:	4691      	mov	r9, r2
 8001efc:	005a      	lsls	r2, r3, #1
 8001efe:	0fdb      	lsrs	r3, r3, #31
 8001f00:	469b      	mov	fp, r3
 8001f02:	0b36      	lsrs	r6, r6, #12
 8001f04:	0d64      	lsrs	r4, r4, #21
 8001f06:	0fc9      	lsrs	r1, r1, #31
 8001f08:	0d52      	lsrs	r2, r2, #21
 8001f0a:	4284      	cmp	r4, r0
 8001f0c:	d019      	beq.n	8001f42 <__eqdf2+0x66>
 8001f0e:	4282      	cmp	r2, r0
 8001f10:	d010      	beq.n	8001f34 <__eqdf2+0x58>
 8001f12:	2001      	movs	r0, #1
 8001f14:	4294      	cmp	r4, r2
 8001f16:	d10e      	bne.n	8001f36 <__eqdf2+0x5a>
 8001f18:	454e      	cmp	r6, r9
 8001f1a:	d10c      	bne.n	8001f36 <__eqdf2+0x5a>
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	45c4      	cmp	ip, r8
 8001f20:	d109      	bne.n	8001f36 <__eqdf2+0x5a>
 8001f22:	4559      	cmp	r1, fp
 8001f24:	d017      	beq.n	8001f56 <__eqdf2+0x7a>
 8001f26:	2c00      	cmp	r4, #0
 8001f28:	d105      	bne.n	8001f36 <__eqdf2+0x5a>
 8001f2a:	0030      	movs	r0, r6
 8001f2c:	4328      	orrs	r0, r5
 8001f2e:	1e43      	subs	r3, r0, #1
 8001f30:	4198      	sbcs	r0, r3
 8001f32:	e000      	b.n	8001f36 <__eqdf2+0x5a>
 8001f34:	2001      	movs	r0, #1
 8001f36:	bcf0      	pop	{r4, r5, r6, r7}
 8001f38:	46bb      	mov	fp, r7
 8001f3a:	46b2      	mov	sl, r6
 8001f3c:	46a9      	mov	r9, r5
 8001f3e:	46a0      	mov	r8, r4
 8001f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f42:	0033      	movs	r3, r6
 8001f44:	2001      	movs	r0, #1
 8001f46:	432b      	orrs	r3, r5
 8001f48:	d1f5      	bne.n	8001f36 <__eqdf2+0x5a>
 8001f4a:	42a2      	cmp	r2, r4
 8001f4c:	d1f3      	bne.n	8001f36 <__eqdf2+0x5a>
 8001f4e:	464b      	mov	r3, r9
 8001f50:	433b      	orrs	r3, r7
 8001f52:	d1f0      	bne.n	8001f36 <__eqdf2+0x5a>
 8001f54:	e7e2      	b.n	8001f1c <__eqdf2+0x40>
 8001f56:	2000      	movs	r0, #0
 8001f58:	e7ed      	b.n	8001f36 <__eqdf2+0x5a>
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	000007ff 	.word	0x000007ff

08001f60 <__gedf2>:
 8001f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f62:	4647      	mov	r7, r8
 8001f64:	46ce      	mov	lr, r9
 8001f66:	0004      	movs	r4, r0
 8001f68:	0018      	movs	r0, r3
 8001f6a:	0016      	movs	r6, r2
 8001f6c:	031b      	lsls	r3, r3, #12
 8001f6e:	0b1b      	lsrs	r3, r3, #12
 8001f70:	4d2d      	ldr	r5, [pc, #180]	; (8002028 <__gedf2+0xc8>)
 8001f72:	004a      	lsls	r2, r1, #1
 8001f74:	4699      	mov	r9, r3
 8001f76:	b580      	push	{r7, lr}
 8001f78:	0043      	lsls	r3, r0, #1
 8001f7a:	030f      	lsls	r7, r1, #12
 8001f7c:	46a4      	mov	ip, r4
 8001f7e:	46b0      	mov	r8, r6
 8001f80:	0b3f      	lsrs	r7, r7, #12
 8001f82:	0d52      	lsrs	r2, r2, #21
 8001f84:	0fc9      	lsrs	r1, r1, #31
 8001f86:	0d5b      	lsrs	r3, r3, #21
 8001f88:	0fc0      	lsrs	r0, r0, #31
 8001f8a:	42aa      	cmp	r2, r5
 8001f8c:	d021      	beq.n	8001fd2 <__gedf2+0x72>
 8001f8e:	42ab      	cmp	r3, r5
 8001f90:	d013      	beq.n	8001fba <__gedf2+0x5a>
 8001f92:	2a00      	cmp	r2, #0
 8001f94:	d122      	bne.n	8001fdc <__gedf2+0x7c>
 8001f96:	433c      	orrs	r4, r7
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <__gedf2+0x42>
 8001f9c:	464d      	mov	r5, r9
 8001f9e:	432e      	orrs	r6, r5
 8001fa0:	d022      	beq.n	8001fe8 <__gedf2+0x88>
 8001fa2:	2c00      	cmp	r4, #0
 8001fa4:	d010      	beq.n	8001fc8 <__gedf2+0x68>
 8001fa6:	4281      	cmp	r1, r0
 8001fa8:	d022      	beq.n	8001ff0 <__gedf2+0x90>
 8001faa:	2002      	movs	r0, #2
 8001fac:	3901      	subs	r1, #1
 8001fae:	4008      	ands	r0, r1
 8001fb0:	3801      	subs	r0, #1
 8001fb2:	bcc0      	pop	{r6, r7}
 8001fb4:	46b9      	mov	r9, r7
 8001fb6:	46b0      	mov	r8, r6
 8001fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fba:	464d      	mov	r5, r9
 8001fbc:	432e      	orrs	r6, r5
 8001fbe:	d129      	bne.n	8002014 <__gedf2+0xb4>
 8001fc0:	2a00      	cmp	r2, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <__gedf2+0x46>
 8001fc4:	433c      	orrs	r4, r7
 8001fc6:	d1ee      	bne.n	8001fa6 <__gedf2+0x46>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	d1f2      	bne.n	8001fb2 <__gedf2+0x52>
 8001fcc:	2001      	movs	r0, #1
 8001fce:	4240      	negs	r0, r0
 8001fd0:	e7ef      	b.n	8001fb2 <__gedf2+0x52>
 8001fd2:	003d      	movs	r5, r7
 8001fd4:	4325      	orrs	r5, r4
 8001fd6:	d11d      	bne.n	8002014 <__gedf2+0xb4>
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d0ee      	beq.n	8001fba <__gedf2+0x5a>
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e2      	bne.n	8001fa6 <__gedf2+0x46>
 8001fe0:	464c      	mov	r4, r9
 8001fe2:	4326      	orrs	r6, r4
 8001fe4:	d1df      	bne.n	8001fa6 <__gedf2+0x46>
 8001fe6:	e7e0      	b.n	8001faa <__gedf2+0x4a>
 8001fe8:	2000      	movs	r0, #0
 8001fea:	2c00      	cmp	r4, #0
 8001fec:	d0e1      	beq.n	8001fb2 <__gedf2+0x52>
 8001fee:	e7dc      	b.n	8001faa <__gedf2+0x4a>
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dc0a      	bgt.n	800200a <__gedf2+0xaa>
 8001ff4:	dbe8      	blt.n	8001fc8 <__gedf2+0x68>
 8001ff6:	454f      	cmp	r7, r9
 8001ff8:	d8d7      	bhi.n	8001faa <__gedf2+0x4a>
 8001ffa:	d00e      	beq.n	800201a <__gedf2+0xba>
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	454f      	cmp	r7, r9
 8002000:	d2d7      	bcs.n	8001fb2 <__gedf2+0x52>
 8002002:	2900      	cmp	r1, #0
 8002004:	d0e2      	beq.n	8001fcc <__gedf2+0x6c>
 8002006:	0008      	movs	r0, r1
 8002008:	e7d3      	b.n	8001fb2 <__gedf2+0x52>
 800200a:	4243      	negs	r3, r0
 800200c:	4158      	adcs	r0, r3
 800200e:	0040      	lsls	r0, r0, #1
 8002010:	3801      	subs	r0, #1
 8002012:	e7ce      	b.n	8001fb2 <__gedf2+0x52>
 8002014:	2002      	movs	r0, #2
 8002016:	4240      	negs	r0, r0
 8002018:	e7cb      	b.n	8001fb2 <__gedf2+0x52>
 800201a:	45c4      	cmp	ip, r8
 800201c:	d8c5      	bhi.n	8001faa <__gedf2+0x4a>
 800201e:	2000      	movs	r0, #0
 8002020:	45c4      	cmp	ip, r8
 8002022:	d2c6      	bcs.n	8001fb2 <__gedf2+0x52>
 8002024:	e7ed      	b.n	8002002 <__gedf2+0xa2>
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	000007ff 	.word	0x000007ff

0800202c <__ledf2>:
 800202c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800202e:	4647      	mov	r7, r8
 8002030:	46ce      	mov	lr, r9
 8002032:	0004      	movs	r4, r0
 8002034:	0018      	movs	r0, r3
 8002036:	0016      	movs	r6, r2
 8002038:	031b      	lsls	r3, r3, #12
 800203a:	0b1b      	lsrs	r3, r3, #12
 800203c:	4d2c      	ldr	r5, [pc, #176]	; (80020f0 <__ledf2+0xc4>)
 800203e:	004a      	lsls	r2, r1, #1
 8002040:	4699      	mov	r9, r3
 8002042:	b580      	push	{r7, lr}
 8002044:	0043      	lsls	r3, r0, #1
 8002046:	030f      	lsls	r7, r1, #12
 8002048:	46a4      	mov	ip, r4
 800204a:	46b0      	mov	r8, r6
 800204c:	0b3f      	lsrs	r7, r7, #12
 800204e:	0d52      	lsrs	r2, r2, #21
 8002050:	0fc9      	lsrs	r1, r1, #31
 8002052:	0d5b      	lsrs	r3, r3, #21
 8002054:	0fc0      	lsrs	r0, r0, #31
 8002056:	42aa      	cmp	r2, r5
 8002058:	d00d      	beq.n	8002076 <__ledf2+0x4a>
 800205a:	42ab      	cmp	r3, r5
 800205c:	d010      	beq.n	8002080 <__ledf2+0x54>
 800205e:	2a00      	cmp	r2, #0
 8002060:	d127      	bne.n	80020b2 <__ledf2+0x86>
 8002062:	433c      	orrs	r4, r7
 8002064:	2b00      	cmp	r3, #0
 8002066:	d111      	bne.n	800208c <__ledf2+0x60>
 8002068:	464d      	mov	r5, r9
 800206a:	432e      	orrs	r6, r5
 800206c:	d10e      	bne.n	800208c <__ledf2+0x60>
 800206e:	2000      	movs	r0, #0
 8002070:	2c00      	cmp	r4, #0
 8002072:	d015      	beq.n	80020a0 <__ledf2+0x74>
 8002074:	e00e      	b.n	8002094 <__ledf2+0x68>
 8002076:	003d      	movs	r5, r7
 8002078:	4325      	orrs	r5, r4
 800207a:	d110      	bne.n	800209e <__ledf2+0x72>
 800207c:	4293      	cmp	r3, r2
 800207e:	d118      	bne.n	80020b2 <__ledf2+0x86>
 8002080:	464d      	mov	r5, r9
 8002082:	432e      	orrs	r6, r5
 8002084:	d10b      	bne.n	800209e <__ledf2+0x72>
 8002086:	2a00      	cmp	r2, #0
 8002088:	d102      	bne.n	8002090 <__ledf2+0x64>
 800208a:	433c      	orrs	r4, r7
 800208c:	2c00      	cmp	r4, #0
 800208e:	d00b      	beq.n	80020a8 <__ledf2+0x7c>
 8002090:	4281      	cmp	r1, r0
 8002092:	d014      	beq.n	80020be <__ledf2+0x92>
 8002094:	2002      	movs	r0, #2
 8002096:	3901      	subs	r1, #1
 8002098:	4008      	ands	r0, r1
 800209a:	3801      	subs	r0, #1
 800209c:	e000      	b.n	80020a0 <__ledf2+0x74>
 800209e:	2002      	movs	r0, #2
 80020a0:	bcc0      	pop	{r6, r7}
 80020a2:	46b9      	mov	r9, r7
 80020a4:	46b0      	mov	r8, r6
 80020a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d1f9      	bne.n	80020a0 <__ledf2+0x74>
 80020ac:	2001      	movs	r0, #1
 80020ae:	4240      	negs	r0, r0
 80020b0:	e7f6      	b.n	80020a0 <__ledf2+0x74>
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ec      	bne.n	8002090 <__ledf2+0x64>
 80020b6:	464c      	mov	r4, r9
 80020b8:	4326      	orrs	r6, r4
 80020ba:	d1e9      	bne.n	8002090 <__ledf2+0x64>
 80020bc:	e7ea      	b.n	8002094 <__ledf2+0x68>
 80020be:	429a      	cmp	r2, r3
 80020c0:	dd04      	ble.n	80020cc <__ledf2+0xa0>
 80020c2:	4243      	negs	r3, r0
 80020c4:	4158      	adcs	r0, r3
 80020c6:	0040      	lsls	r0, r0, #1
 80020c8:	3801      	subs	r0, #1
 80020ca:	e7e9      	b.n	80020a0 <__ledf2+0x74>
 80020cc:	429a      	cmp	r2, r3
 80020ce:	dbeb      	blt.n	80020a8 <__ledf2+0x7c>
 80020d0:	454f      	cmp	r7, r9
 80020d2:	d8df      	bhi.n	8002094 <__ledf2+0x68>
 80020d4:	d006      	beq.n	80020e4 <__ledf2+0xb8>
 80020d6:	2000      	movs	r0, #0
 80020d8:	454f      	cmp	r7, r9
 80020da:	d2e1      	bcs.n	80020a0 <__ledf2+0x74>
 80020dc:	2900      	cmp	r1, #0
 80020de:	d0e5      	beq.n	80020ac <__ledf2+0x80>
 80020e0:	0008      	movs	r0, r1
 80020e2:	e7dd      	b.n	80020a0 <__ledf2+0x74>
 80020e4:	45c4      	cmp	ip, r8
 80020e6:	d8d5      	bhi.n	8002094 <__ledf2+0x68>
 80020e8:	2000      	movs	r0, #0
 80020ea:	45c4      	cmp	ip, r8
 80020ec:	d2d8      	bcs.n	80020a0 <__ledf2+0x74>
 80020ee:	e7f5      	b.n	80020dc <__ledf2+0xb0>
 80020f0:	000007ff 	.word	0x000007ff

080020f4 <__aeabi_dmul>:
 80020f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f6:	4657      	mov	r7, sl
 80020f8:	464e      	mov	r6, r9
 80020fa:	4645      	mov	r5, r8
 80020fc:	46de      	mov	lr, fp
 80020fe:	b5e0      	push	{r5, r6, r7, lr}
 8002100:	4698      	mov	r8, r3
 8002102:	030c      	lsls	r4, r1, #12
 8002104:	004b      	lsls	r3, r1, #1
 8002106:	0006      	movs	r6, r0
 8002108:	4692      	mov	sl, r2
 800210a:	b087      	sub	sp, #28
 800210c:	0b24      	lsrs	r4, r4, #12
 800210e:	0d5b      	lsrs	r3, r3, #21
 8002110:	0fcf      	lsrs	r7, r1, #31
 8002112:	2b00      	cmp	r3, #0
 8002114:	d100      	bne.n	8002118 <__aeabi_dmul+0x24>
 8002116:	e15c      	b.n	80023d2 <__aeabi_dmul+0x2de>
 8002118:	4ad9      	ldr	r2, [pc, #868]	; (8002480 <__aeabi_dmul+0x38c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d100      	bne.n	8002120 <__aeabi_dmul+0x2c>
 800211e:	e175      	b.n	800240c <__aeabi_dmul+0x318>
 8002120:	0f42      	lsrs	r2, r0, #29
 8002122:	00e4      	lsls	r4, r4, #3
 8002124:	4314      	orrs	r4, r2
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	0412      	lsls	r2, r2, #16
 800212a:	4314      	orrs	r4, r2
 800212c:	4ad5      	ldr	r2, [pc, #852]	; (8002484 <__aeabi_dmul+0x390>)
 800212e:	00c5      	lsls	r5, r0, #3
 8002130:	4694      	mov	ip, r2
 8002132:	4463      	add	r3, ip
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2300      	movs	r3, #0
 8002138:	4699      	mov	r9, r3
 800213a:	469b      	mov	fp, r3
 800213c:	4643      	mov	r3, r8
 800213e:	4642      	mov	r2, r8
 8002140:	031e      	lsls	r6, r3, #12
 8002142:	0fd2      	lsrs	r2, r2, #31
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4650      	mov	r0, sl
 8002148:	4690      	mov	r8, r2
 800214a:	0b36      	lsrs	r6, r6, #12
 800214c:	0d5b      	lsrs	r3, r3, #21
 800214e:	d100      	bne.n	8002152 <__aeabi_dmul+0x5e>
 8002150:	e120      	b.n	8002394 <__aeabi_dmul+0x2a0>
 8002152:	4acb      	ldr	r2, [pc, #812]	; (8002480 <__aeabi_dmul+0x38c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d100      	bne.n	800215a <__aeabi_dmul+0x66>
 8002158:	e162      	b.n	8002420 <__aeabi_dmul+0x32c>
 800215a:	49ca      	ldr	r1, [pc, #808]	; (8002484 <__aeabi_dmul+0x390>)
 800215c:	0f42      	lsrs	r2, r0, #29
 800215e:	468c      	mov	ip, r1
 8002160:	9900      	ldr	r1, [sp, #0]
 8002162:	4463      	add	r3, ip
 8002164:	00f6      	lsls	r6, r6, #3
 8002166:	468c      	mov	ip, r1
 8002168:	4316      	orrs	r6, r2
 800216a:	2280      	movs	r2, #128	; 0x80
 800216c:	449c      	add	ip, r3
 800216e:	0412      	lsls	r2, r2, #16
 8002170:	4663      	mov	r3, ip
 8002172:	4316      	orrs	r6, r2
 8002174:	00c2      	lsls	r2, r0, #3
 8002176:	2000      	movs	r0, #0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	9900      	ldr	r1, [sp, #0]
 800217c:	4643      	mov	r3, r8
 800217e:	3101      	adds	r1, #1
 8002180:	468c      	mov	ip, r1
 8002182:	4649      	mov	r1, r9
 8002184:	407b      	eors	r3, r7
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	290f      	cmp	r1, #15
 800218a:	d826      	bhi.n	80021da <__aeabi_dmul+0xe6>
 800218c:	4bbe      	ldr	r3, [pc, #760]	; (8002488 <__aeabi_dmul+0x394>)
 800218e:	0089      	lsls	r1, r1, #2
 8002190:	5859      	ldr	r1, [r3, r1]
 8002192:	468f      	mov	pc, r1
 8002194:	4643      	mov	r3, r8
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	0034      	movs	r4, r6
 800219a:	0015      	movs	r5, r2
 800219c:	4683      	mov	fp, r0
 800219e:	465b      	mov	r3, fp
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d016      	beq.n	80021d2 <__aeabi_dmul+0xde>
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d100      	bne.n	80021aa <__aeabi_dmul+0xb6>
 80021a8:	e203      	b.n	80025b2 <__aeabi_dmul+0x4be>
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d000      	beq.n	80021b0 <__aeabi_dmul+0xbc>
 80021ae:	e0cd      	b.n	800234c <__aeabi_dmul+0x258>
 80021b0:	2200      	movs	r2, #0
 80021b2:	2400      	movs	r4, #0
 80021b4:	2500      	movs	r5, #0
 80021b6:	9b01      	ldr	r3, [sp, #4]
 80021b8:	0512      	lsls	r2, r2, #20
 80021ba:	4322      	orrs	r2, r4
 80021bc:	07db      	lsls	r3, r3, #31
 80021be:	431a      	orrs	r2, r3
 80021c0:	0028      	movs	r0, r5
 80021c2:	0011      	movs	r1, r2
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2400      	movs	r4, #0
 80021d4:	2500      	movs	r5, #0
 80021d6:	4aaa      	ldr	r2, [pc, #680]	; (8002480 <__aeabi_dmul+0x38c>)
 80021d8:	e7ed      	b.n	80021b6 <__aeabi_dmul+0xc2>
 80021da:	0c28      	lsrs	r0, r5, #16
 80021dc:	042d      	lsls	r5, r5, #16
 80021de:	0c2d      	lsrs	r5, r5, #16
 80021e0:	002b      	movs	r3, r5
 80021e2:	0c11      	lsrs	r1, r2, #16
 80021e4:	0412      	lsls	r2, r2, #16
 80021e6:	0c12      	lsrs	r2, r2, #16
 80021e8:	4353      	muls	r3, r2
 80021ea:	4698      	mov	r8, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	002f      	movs	r7, r5
 80021f0:	4343      	muls	r3, r0
 80021f2:	4699      	mov	r9, r3
 80021f4:	434f      	muls	r7, r1
 80021f6:	444f      	add	r7, r9
 80021f8:	46bb      	mov	fp, r7
 80021fa:	4647      	mov	r7, r8
 80021fc:	000b      	movs	r3, r1
 80021fe:	0c3f      	lsrs	r7, r7, #16
 8002200:	46ba      	mov	sl, r7
 8002202:	4343      	muls	r3, r0
 8002204:	44da      	add	sl, fp
 8002206:	9302      	str	r3, [sp, #8]
 8002208:	45d1      	cmp	r9, sl
 800220a:	d904      	bls.n	8002216 <__aeabi_dmul+0x122>
 800220c:	2780      	movs	r7, #128	; 0x80
 800220e:	027f      	lsls	r7, r7, #9
 8002210:	46b9      	mov	r9, r7
 8002212:	444b      	add	r3, r9
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	4653      	mov	r3, sl
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	469b      	mov	fp, r3
 800221c:	4653      	mov	r3, sl
 800221e:	041f      	lsls	r7, r3, #16
 8002220:	4643      	mov	r3, r8
 8002222:	041b      	lsls	r3, r3, #16
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	4698      	mov	r8, r3
 8002228:	003b      	movs	r3, r7
 800222a:	4443      	add	r3, r8
 800222c:	9304      	str	r3, [sp, #16]
 800222e:	0c33      	lsrs	r3, r6, #16
 8002230:	0436      	lsls	r6, r6, #16
 8002232:	0c36      	lsrs	r6, r6, #16
 8002234:	4698      	mov	r8, r3
 8002236:	0033      	movs	r3, r6
 8002238:	4343      	muls	r3, r0
 800223a:	4699      	mov	r9, r3
 800223c:	4643      	mov	r3, r8
 800223e:	4343      	muls	r3, r0
 8002240:	002f      	movs	r7, r5
 8002242:	469a      	mov	sl, r3
 8002244:	4643      	mov	r3, r8
 8002246:	4377      	muls	r7, r6
 8002248:	435d      	muls	r5, r3
 800224a:	0c38      	lsrs	r0, r7, #16
 800224c:	444d      	add	r5, r9
 800224e:	1945      	adds	r5, r0, r5
 8002250:	45a9      	cmp	r9, r5
 8002252:	d903      	bls.n	800225c <__aeabi_dmul+0x168>
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	025b      	lsls	r3, r3, #9
 8002258:	4699      	mov	r9, r3
 800225a:	44ca      	add	sl, r9
 800225c:	043f      	lsls	r7, r7, #16
 800225e:	0c28      	lsrs	r0, r5, #16
 8002260:	0c3f      	lsrs	r7, r7, #16
 8002262:	042d      	lsls	r5, r5, #16
 8002264:	19ed      	adds	r5, r5, r7
 8002266:	0c27      	lsrs	r7, r4, #16
 8002268:	0424      	lsls	r4, r4, #16
 800226a:	0c24      	lsrs	r4, r4, #16
 800226c:	0003      	movs	r3, r0
 800226e:	0020      	movs	r0, r4
 8002270:	4350      	muls	r0, r2
 8002272:	437a      	muls	r2, r7
 8002274:	4691      	mov	r9, r2
 8002276:	003a      	movs	r2, r7
 8002278:	4453      	add	r3, sl
 800227a:	9305      	str	r3, [sp, #20]
 800227c:	0c03      	lsrs	r3, r0, #16
 800227e:	469a      	mov	sl, r3
 8002280:	434a      	muls	r2, r1
 8002282:	4361      	muls	r1, r4
 8002284:	4449      	add	r1, r9
 8002286:	4451      	add	r1, sl
 8002288:	44ab      	add	fp, r5
 800228a:	4589      	cmp	r9, r1
 800228c:	d903      	bls.n	8002296 <__aeabi_dmul+0x1a2>
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	025b      	lsls	r3, r3, #9
 8002292:	4699      	mov	r9, r3
 8002294:	444a      	add	r2, r9
 8002296:	0400      	lsls	r0, r0, #16
 8002298:	0c0b      	lsrs	r3, r1, #16
 800229a:	0c00      	lsrs	r0, r0, #16
 800229c:	0409      	lsls	r1, r1, #16
 800229e:	1809      	adds	r1, r1, r0
 80022a0:	0020      	movs	r0, r4
 80022a2:	4699      	mov	r9, r3
 80022a4:	4643      	mov	r3, r8
 80022a6:	4370      	muls	r0, r6
 80022a8:	435c      	muls	r4, r3
 80022aa:	437e      	muls	r6, r7
 80022ac:	435f      	muls	r7, r3
 80022ae:	0c03      	lsrs	r3, r0, #16
 80022b0:	4698      	mov	r8, r3
 80022b2:	19a4      	adds	r4, r4, r6
 80022b4:	4444      	add	r4, r8
 80022b6:	444a      	add	r2, r9
 80022b8:	9703      	str	r7, [sp, #12]
 80022ba:	42a6      	cmp	r6, r4
 80022bc:	d904      	bls.n	80022c8 <__aeabi_dmul+0x1d4>
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	025b      	lsls	r3, r3, #9
 80022c2:	4698      	mov	r8, r3
 80022c4:	4447      	add	r7, r8
 80022c6:	9703      	str	r7, [sp, #12]
 80022c8:	0423      	lsls	r3, r4, #16
 80022ca:	9e02      	ldr	r6, [sp, #8]
 80022cc:	469a      	mov	sl, r3
 80022ce:	9b05      	ldr	r3, [sp, #20]
 80022d0:	445e      	add	r6, fp
 80022d2:	4698      	mov	r8, r3
 80022d4:	42ae      	cmp	r6, r5
 80022d6:	41ad      	sbcs	r5, r5
 80022d8:	1876      	adds	r6, r6, r1
 80022da:	428e      	cmp	r6, r1
 80022dc:	4189      	sbcs	r1, r1
 80022de:	0400      	lsls	r0, r0, #16
 80022e0:	0c00      	lsrs	r0, r0, #16
 80022e2:	4450      	add	r0, sl
 80022e4:	4440      	add	r0, r8
 80022e6:	426d      	negs	r5, r5
 80022e8:	1947      	adds	r7, r0, r5
 80022ea:	46b8      	mov	r8, r7
 80022ec:	4693      	mov	fp, r2
 80022ee:	4249      	negs	r1, r1
 80022f0:	4689      	mov	r9, r1
 80022f2:	44c3      	add	fp, r8
 80022f4:	44d9      	add	r9, fp
 80022f6:	4298      	cmp	r0, r3
 80022f8:	4180      	sbcs	r0, r0
 80022fa:	45a8      	cmp	r8, r5
 80022fc:	41ad      	sbcs	r5, r5
 80022fe:	4593      	cmp	fp, r2
 8002300:	4192      	sbcs	r2, r2
 8002302:	4589      	cmp	r9, r1
 8002304:	4189      	sbcs	r1, r1
 8002306:	426d      	negs	r5, r5
 8002308:	4240      	negs	r0, r0
 800230a:	4328      	orrs	r0, r5
 800230c:	0c24      	lsrs	r4, r4, #16
 800230e:	4252      	negs	r2, r2
 8002310:	4249      	negs	r1, r1
 8002312:	430a      	orrs	r2, r1
 8002314:	9b03      	ldr	r3, [sp, #12]
 8002316:	1900      	adds	r0, r0, r4
 8002318:	1880      	adds	r0, r0, r2
 800231a:	18c7      	adds	r7, r0, r3
 800231c:	464b      	mov	r3, r9
 800231e:	0ddc      	lsrs	r4, r3, #23
 8002320:	9b04      	ldr	r3, [sp, #16]
 8002322:	0275      	lsls	r5, r6, #9
 8002324:	431d      	orrs	r5, r3
 8002326:	1e6a      	subs	r2, r5, #1
 8002328:	4195      	sbcs	r5, r2
 800232a:	464b      	mov	r3, r9
 800232c:	0df6      	lsrs	r6, r6, #23
 800232e:	027f      	lsls	r7, r7, #9
 8002330:	4335      	orrs	r5, r6
 8002332:	025a      	lsls	r2, r3, #9
 8002334:	433c      	orrs	r4, r7
 8002336:	4315      	orrs	r5, r2
 8002338:	01fb      	lsls	r3, r7, #7
 800233a:	d400      	bmi.n	800233e <__aeabi_dmul+0x24a>
 800233c:	e11c      	b.n	8002578 <__aeabi_dmul+0x484>
 800233e:	2101      	movs	r1, #1
 8002340:	086a      	lsrs	r2, r5, #1
 8002342:	400d      	ands	r5, r1
 8002344:	4315      	orrs	r5, r2
 8002346:	07e2      	lsls	r2, r4, #31
 8002348:	4315      	orrs	r5, r2
 800234a:	0864      	lsrs	r4, r4, #1
 800234c:	494f      	ldr	r1, [pc, #316]	; (800248c <__aeabi_dmul+0x398>)
 800234e:	4461      	add	r1, ip
 8002350:	2900      	cmp	r1, #0
 8002352:	dc00      	bgt.n	8002356 <__aeabi_dmul+0x262>
 8002354:	e0b0      	b.n	80024b8 <__aeabi_dmul+0x3c4>
 8002356:	076b      	lsls	r3, r5, #29
 8002358:	d009      	beq.n	800236e <__aeabi_dmul+0x27a>
 800235a:	220f      	movs	r2, #15
 800235c:	402a      	ands	r2, r5
 800235e:	2a04      	cmp	r2, #4
 8002360:	d005      	beq.n	800236e <__aeabi_dmul+0x27a>
 8002362:	1d2a      	adds	r2, r5, #4
 8002364:	42aa      	cmp	r2, r5
 8002366:	41ad      	sbcs	r5, r5
 8002368:	426d      	negs	r5, r5
 800236a:	1964      	adds	r4, r4, r5
 800236c:	0015      	movs	r5, r2
 800236e:	01e3      	lsls	r3, r4, #7
 8002370:	d504      	bpl.n	800237c <__aeabi_dmul+0x288>
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	4a46      	ldr	r2, [pc, #280]	; (8002490 <__aeabi_dmul+0x39c>)
 8002376:	00c9      	lsls	r1, r1, #3
 8002378:	4014      	ands	r4, r2
 800237a:	4461      	add	r1, ip
 800237c:	4a45      	ldr	r2, [pc, #276]	; (8002494 <__aeabi_dmul+0x3a0>)
 800237e:	4291      	cmp	r1, r2
 8002380:	dd00      	ble.n	8002384 <__aeabi_dmul+0x290>
 8002382:	e726      	b.n	80021d2 <__aeabi_dmul+0xde>
 8002384:	0762      	lsls	r2, r4, #29
 8002386:	08ed      	lsrs	r5, r5, #3
 8002388:	0264      	lsls	r4, r4, #9
 800238a:	0549      	lsls	r1, r1, #21
 800238c:	4315      	orrs	r5, r2
 800238e:	0b24      	lsrs	r4, r4, #12
 8002390:	0d4a      	lsrs	r2, r1, #21
 8002392:	e710      	b.n	80021b6 <__aeabi_dmul+0xc2>
 8002394:	4652      	mov	r2, sl
 8002396:	4332      	orrs	r2, r6
 8002398:	d100      	bne.n	800239c <__aeabi_dmul+0x2a8>
 800239a:	e07f      	b.n	800249c <__aeabi_dmul+0x3a8>
 800239c:	2e00      	cmp	r6, #0
 800239e:	d100      	bne.n	80023a2 <__aeabi_dmul+0x2ae>
 80023a0:	e0dc      	b.n	800255c <__aeabi_dmul+0x468>
 80023a2:	0030      	movs	r0, r6
 80023a4:	f000 fe1e 	bl	8002fe4 <__clzsi2>
 80023a8:	0002      	movs	r2, r0
 80023aa:	3a0b      	subs	r2, #11
 80023ac:	231d      	movs	r3, #29
 80023ae:	0001      	movs	r1, r0
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	4652      	mov	r2, sl
 80023b4:	3908      	subs	r1, #8
 80023b6:	40da      	lsrs	r2, r3
 80023b8:	408e      	lsls	r6, r1
 80023ba:	4316      	orrs	r6, r2
 80023bc:	4652      	mov	r2, sl
 80023be:	408a      	lsls	r2, r1
 80023c0:	9b00      	ldr	r3, [sp, #0]
 80023c2:	4935      	ldr	r1, [pc, #212]	; (8002498 <__aeabi_dmul+0x3a4>)
 80023c4:	1a18      	subs	r0, r3, r0
 80023c6:	0003      	movs	r3, r0
 80023c8:	468c      	mov	ip, r1
 80023ca:	4463      	add	r3, ip
 80023cc:	2000      	movs	r0, #0
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	e6d3      	b.n	800217a <__aeabi_dmul+0x86>
 80023d2:	0025      	movs	r5, r4
 80023d4:	4305      	orrs	r5, r0
 80023d6:	d04a      	beq.n	800246e <__aeabi_dmul+0x37a>
 80023d8:	2c00      	cmp	r4, #0
 80023da:	d100      	bne.n	80023de <__aeabi_dmul+0x2ea>
 80023dc:	e0b0      	b.n	8002540 <__aeabi_dmul+0x44c>
 80023de:	0020      	movs	r0, r4
 80023e0:	f000 fe00 	bl	8002fe4 <__clzsi2>
 80023e4:	0001      	movs	r1, r0
 80023e6:	0002      	movs	r2, r0
 80023e8:	390b      	subs	r1, #11
 80023ea:	231d      	movs	r3, #29
 80023ec:	0010      	movs	r0, r2
 80023ee:	1a5b      	subs	r3, r3, r1
 80023f0:	0031      	movs	r1, r6
 80023f2:	0035      	movs	r5, r6
 80023f4:	3808      	subs	r0, #8
 80023f6:	4084      	lsls	r4, r0
 80023f8:	40d9      	lsrs	r1, r3
 80023fa:	4085      	lsls	r5, r0
 80023fc:	430c      	orrs	r4, r1
 80023fe:	4826      	ldr	r0, [pc, #152]	; (8002498 <__aeabi_dmul+0x3a4>)
 8002400:	1a83      	subs	r3, r0, r2
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	2300      	movs	r3, #0
 8002406:	4699      	mov	r9, r3
 8002408:	469b      	mov	fp, r3
 800240a:	e697      	b.n	800213c <__aeabi_dmul+0x48>
 800240c:	0005      	movs	r5, r0
 800240e:	4325      	orrs	r5, r4
 8002410:	d126      	bne.n	8002460 <__aeabi_dmul+0x36c>
 8002412:	2208      	movs	r2, #8
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2302      	movs	r3, #2
 8002418:	2400      	movs	r4, #0
 800241a:	4691      	mov	r9, r2
 800241c:	469b      	mov	fp, r3
 800241e:	e68d      	b.n	800213c <__aeabi_dmul+0x48>
 8002420:	4652      	mov	r2, sl
 8002422:	9b00      	ldr	r3, [sp, #0]
 8002424:	4332      	orrs	r2, r6
 8002426:	d110      	bne.n	800244a <__aeabi_dmul+0x356>
 8002428:	4915      	ldr	r1, [pc, #84]	; (8002480 <__aeabi_dmul+0x38c>)
 800242a:	2600      	movs	r6, #0
 800242c:	468c      	mov	ip, r1
 800242e:	4463      	add	r3, ip
 8002430:	4649      	mov	r1, r9
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2302      	movs	r3, #2
 8002436:	4319      	orrs	r1, r3
 8002438:	4689      	mov	r9, r1
 800243a:	2002      	movs	r0, #2
 800243c:	e69d      	b.n	800217a <__aeabi_dmul+0x86>
 800243e:	465b      	mov	r3, fp
 8002440:	9701      	str	r7, [sp, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d000      	beq.n	8002448 <__aeabi_dmul+0x354>
 8002446:	e6ad      	b.n	80021a4 <__aeabi_dmul+0xb0>
 8002448:	e6c3      	b.n	80021d2 <__aeabi_dmul+0xde>
 800244a:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <__aeabi_dmul+0x38c>)
 800244c:	2003      	movs	r0, #3
 800244e:	4694      	mov	ip, r2
 8002450:	4463      	add	r3, ip
 8002452:	464a      	mov	r2, r9
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2303      	movs	r3, #3
 8002458:	431a      	orrs	r2, r3
 800245a:	4691      	mov	r9, r2
 800245c:	4652      	mov	r2, sl
 800245e:	e68c      	b.n	800217a <__aeabi_dmul+0x86>
 8002460:	220c      	movs	r2, #12
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2303      	movs	r3, #3
 8002466:	0005      	movs	r5, r0
 8002468:	4691      	mov	r9, r2
 800246a:	469b      	mov	fp, r3
 800246c:	e666      	b.n	800213c <__aeabi_dmul+0x48>
 800246e:	2304      	movs	r3, #4
 8002470:	4699      	mov	r9, r3
 8002472:	2300      	movs	r3, #0
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	3301      	adds	r3, #1
 8002478:	2400      	movs	r4, #0
 800247a:	469b      	mov	fp, r3
 800247c:	e65e      	b.n	800213c <__aeabi_dmul+0x48>
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	000007ff 	.word	0x000007ff
 8002484:	fffffc01 	.word	0xfffffc01
 8002488:	08009e00 	.word	0x08009e00
 800248c:	000003ff 	.word	0x000003ff
 8002490:	feffffff 	.word	0xfeffffff
 8002494:	000007fe 	.word	0x000007fe
 8002498:	fffffc0d 	.word	0xfffffc0d
 800249c:	4649      	mov	r1, r9
 800249e:	2301      	movs	r3, #1
 80024a0:	4319      	orrs	r1, r3
 80024a2:	4689      	mov	r9, r1
 80024a4:	2600      	movs	r6, #0
 80024a6:	2001      	movs	r0, #1
 80024a8:	e667      	b.n	800217a <__aeabi_dmul+0x86>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2480      	movs	r4, #128	; 0x80
 80024ae:	2500      	movs	r5, #0
 80024b0:	4a43      	ldr	r2, [pc, #268]	; (80025c0 <__aeabi_dmul+0x4cc>)
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	0324      	lsls	r4, r4, #12
 80024b6:	e67e      	b.n	80021b6 <__aeabi_dmul+0xc2>
 80024b8:	2001      	movs	r0, #1
 80024ba:	1a40      	subs	r0, r0, r1
 80024bc:	2838      	cmp	r0, #56	; 0x38
 80024be:	dd00      	ble.n	80024c2 <__aeabi_dmul+0x3ce>
 80024c0:	e676      	b.n	80021b0 <__aeabi_dmul+0xbc>
 80024c2:	281f      	cmp	r0, #31
 80024c4:	dd5b      	ble.n	800257e <__aeabi_dmul+0x48a>
 80024c6:	221f      	movs	r2, #31
 80024c8:	0023      	movs	r3, r4
 80024ca:	4252      	negs	r2, r2
 80024cc:	1a51      	subs	r1, r2, r1
 80024ce:	40cb      	lsrs	r3, r1
 80024d0:	0019      	movs	r1, r3
 80024d2:	2820      	cmp	r0, #32
 80024d4:	d003      	beq.n	80024de <__aeabi_dmul+0x3ea>
 80024d6:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <__aeabi_dmul+0x4d0>)
 80024d8:	4462      	add	r2, ip
 80024da:	4094      	lsls	r4, r2
 80024dc:	4325      	orrs	r5, r4
 80024de:	1e6a      	subs	r2, r5, #1
 80024e0:	4195      	sbcs	r5, r2
 80024e2:	002a      	movs	r2, r5
 80024e4:	430a      	orrs	r2, r1
 80024e6:	2107      	movs	r1, #7
 80024e8:	000d      	movs	r5, r1
 80024ea:	2400      	movs	r4, #0
 80024ec:	4015      	ands	r5, r2
 80024ee:	4211      	tst	r1, r2
 80024f0:	d05b      	beq.n	80025aa <__aeabi_dmul+0x4b6>
 80024f2:	210f      	movs	r1, #15
 80024f4:	2400      	movs	r4, #0
 80024f6:	4011      	ands	r1, r2
 80024f8:	2904      	cmp	r1, #4
 80024fa:	d053      	beq.n	80025a4 <__aeabi_dmul+0x4b0>
 80024fc:	1d11      	adds	r1, r2, #4
 80024fe:	4291      	cmp	r1, r2
 8002500:	4192      	sbcs	r2, r2
 8002502:	4252      	negs	r2, r2
 8002504:	18a4      	adds	r4, r4, r2
 8002506:	000a      	movs	r2, r1
 8002508:	0223      	lsls	r3, r4, #8
 800250a:	d54b      	bpl.n	80025a4 <__aeabi_dmul+0x4b0>
 800250c:	2201      	movs	r2, #1
 800250e:	2400      	movs	r4, #0
 8002510:	2500      	movs	r5, #0
 8002512:	e650      	b.n	80021b6 <__aeabi_dmul+0xc2>
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	031b      	lsls	r3, r3, #12
 8002518:	421c      	tst	r4, r3
 800251a:	d009      	beq.n	8002530 <__aeabi_dmul+0x43c>
 800251c:	421e      	tst	r6, r3
 800251e:	d107      	bne.n	8002530 <__aeabi_dmul+0x43c>
 8002520:	4333      	orrs	r3, r6
 8002522:	031c      	lsls	r4, r3, #12
 8002524:	4643      	mov	r3, r8
 8002526:	0015      	movs	r5, r2
 8002528:	0b24      	lsrs	r4, r4, #12
 800252a:	4a25      	ldr	r2, [pc, #148]	; (80025c0 <__aeabi_dmul+0x4cc>)
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	e642      	b.n	80021b6 <__aeabi_dmul+0xc2>
 8002530:	2280      	movs	r2, #128	; 0x80
 8002532:	0312      	lsls	r2, r2, #12
 8002534:	4314      	orrs	r4, r2
 8002536:	0324      	lsls	r4, r4, #12
 8002538:	4a21      	ldr	r2, [pc, #132]	; (80025c0 <__aeabi_dmul+0x4cc>)
 800253a:	0b24      	lsrs	r4, r4, #12
 800253c:	9701      	str	r7, [sp, #4]
 800253e:	e63a      	b.n	80021b6 <__aeabi_dmul+0xc2>
 8002540:	f000 fd50 	bl	8002fe4 <__clzsi2>
 8002544:	0001      	movs	r1, r0
 8002546:	0002      	movs	r2, r0
 8002548:	3115      	adds	r1, #21
 800254a:	3220      	adds	r2, #32
 800254c:	291c      	cmp	r1, #28
 800254e:	dc00      	bgt.n	8002552 <__aeabi_dmul+0x45e>
 8002550:	e74b      	b.n	80023ea <__aeabi_dmul+0x2f6>
 8002552:	0034      	movs	r4, r6
 8002554:	3808      	subs	r0, #8
 8002556:	2500      	movs	r5, #0
 8002558:	4084      	lsls	r4, r0
 800255a:	e750      	b.n	80023fe <__aeabi_dmul+0x30a>
 800255c:	f000 fd42 	bl	8002fe4 <__clzsi2>
 8002560:	0003      	movs	r3, r0
 8002562:	001a      	movs	r2, r3
 8002564:	3215      	adds	r2, #21
 8002566:	3020      	adds	r0, #32
 8002568:	2a1c      	cmp	r2, #28
 800256a:	dc00      	bgt.n	800256e <__aeabi_dmul+0x47a>
 800256c:	e71e      	b.n	80023ac <__aeabi_dmul+0x2b8>
 800256e:	4656      	mov	r6, sl
 8002570:	3b08      	subs	r3, #8
 8002572:	2200      	movs	r2, #0
 8002574:	409e      	lsls	r6, r3
 8002576:	e723      	b.n	80023c0 <__aeabi_dmul+0x2cc>
 8002578:	9b00      	ldr	r3, [sp, #0]
 800257a:	469c      	mov	ip, r3
 800257c:	e6e6      	b.n	800234c <__aeabi_dmul+0x258>
 800257e:	4912      	ldr	r1, [pc, #72]	; (80025c8 <__aeabi_dmul+0x4d4>)
 8002580:	0022      	movs	r2, r4
 8002582:	4461      	add	r1, ip
 8002584:	002e      	movs	r6, r5
 8002586:	408d      	lsls	r5, r1
 8002588:	408a      	lsls	r2, r1
 800258a:	40c6      	lsrs	r6, r0
 800258c:	1e69      	subs	r1, r5, #1
 800258e:	418d      	sbcs	r5, r1
 8002590:	4332      	orrs	r2, r6
 8002592:	432a      	orrs	r2, r5
 8002594:	40c4      	lsrs	r4, r0
 8002596:	0753      	lsls	r3, r2, #29
 8002598:	d0b6      	beq.n	8002508 <__aeabi_dmul+0x414>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d1ac      	bne.n	80024fc <__aeabi_dmul+0x408>
 80025a2:	e7b1      	b.n	8002508 <__aeabi_dmul+0x414>
 80025a4:	0765      	lsls	r5, r4, #29
 80025a6:	0264      	lsls	r4, r4, #9
 80025a8:	0b24      	lsrs	r4, r4, #12
 80025aa:	08d2      	lsrs	r2, r2, #3
 80025ac:	4315      	orrs	r5, r2
 80025ae:	2200      	movs	r2, #0
 80025b0:	e601      	b.n	80021b6 <__aeabi_dmul+0xc2>
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	0312      	lsls	r2, r2, #12
 80025b6:	4314      	orrs	r4, r2
 80025b8:	0324      	lsls	r4, r4, #12
 80025ba:	4a01      	ldr	r2, [pc, #4]	; (80025c0 <__aeabi_dmul+0x4cc>)
 80025bc:	0b24      	lsrs	r4, r4, #12
 80025be:	e5fa      	b.n	80021b6 <__aeabi_dmul+0xc2>
 80025c0:	000007ff 	.word	0x000007ff
 80025c4:	0000043e 	.word	0x0000043e
 80025c8:	0000041e 	.word	0x0000041e

080025cc <__aeabi_dsub>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	4657      	mov	r7, sl
 80025d0:	464e      	mov	r6, r9
 80025d2:	4645      	mov	r5, r8
 80025d4:	46de      	mov	lr, fp
 80025d6:	b5e0      	push	{r5, r6, r7, lr}
 80025d8:	001e      	movs	r6, r3
 80025da:	0017      	movs	r7, r2
 80025dc:	004a      	lsls	r2, r1, #1
 80025de:	030b      	lsls	r3, r1, #12
 80025e0:	0d52      	lsrs	r2, r2, #21
 80025e2:	0a5b      	lsrs	r3, r3, #9
 80025e4:	4690      	mov	r8, r2
 80025e6:	0f42      	lsrs	r2, r0, #29
 80025e8:	431a      	orrs	r2, r3
 80025ea:	0fcd      	lsrs	r5, r1, #31
 80025ec:	4ccd      	ldr	r4, [pc, #820]	; (8002924 <__aeabi_dsub+0x358>)
 80025ee:	0331      	lsls	r1, r6, #12
 80025f0:	00c3      	lsls	r3, r0, #3
 80025f2:	4694      	mov	ip, r2
 80025f4:	0070      	lsls	r0, r6, #1
 80025f6:	0f7a      	lsrs	r2, r7, #29
 80025f8:	0a49      	lsrs	r1, r1, #9
 80025fa:	00ff      	lsls	r7, r7, #3
 80025fc:	469a      	mov	sl, r3
 80025fe:	46b9      	mov	r9, r7
 8002600:	0d40      	lsrs	r0, r0, #21
 8002602:	0ff6      	lsrs	r6, r6, #31
 8002604:	4311      	orrs	r1, r2
 8002606:	42a0      	cmp	r0, r4
 8002608:	d100      	bne.n	800260c <__aeabi_dsub+0x40>
 800260a:	e0b1      	b.n	8002770 <__aeabi_dsub+0x1a4>
 800260c:	2201      	movs	r2, #1
 800260e:	4056      	eors	r6, r2
 8002610:	46b3      	mov	fp, r6
 8002612:	42b5      	cmp	r5, r6
 8002614:	d100      	bne.n	8002618 <__aeabi_dsub+0x4c>
 8002616:	e088      	b.n	800272a <__aeabi_dsub+0x15e>
 8002618:	4642      	mov	r2, r8
 800261a:	1a12      	subs	r2, r2, r0
 800261c:	2a00      	cmp	r2, #0
 800261e:	dc00      	bgt.n	8002622 <__aeabi_dsub+0x56>
 8002620:	e0ae      	b.n	8002780 <__aeabi_dsub+0x1b4>
 8002622:	2800      	cmp	r0, #0
 8002624:	d100      	bne.n	8002628 <__aeabi_dsub+0x5c>
 8002626:	e0c1      	b.n	80027ac <__aeabi_dsub+0x1e0>
 8002628:	48be      	ldr	r0, [pc, #760]	; (8002924 <__aeabi_dsub+0x358>)
 800262a:	4580      	cmp	r8, r0
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0x64>
 800262e:	e151      	b.n	80028d4 <__aeabi_dsub+0x308>
 8002630:	2080      	movs	r0, #128	; 0x80
 8002632:	0400      	lsls	r0, r0, #16
 8002634:	4301      	orrs	r1, r0
 8002636:	2a38      	cmp	r2, #56	; 0x38
 8002638:	dd00      	ble.n	800263c <__aeabi_dsub+0x70>
 800263a:	e17b      	b.n	8002934 <__aeabi_dsub+0x368>
 800263c:	2a1f      	cmp	r2, #31
 800263e:	dd00      	ble.n	8002642 <__aeabi_dsub+0x76>
 8002640:	e1ee      	b.n	8002a20 <__aeabi_dsub+0x454>
 8002642:	2020      	movs	r0, #32
 8002644:	003e      	movs	r6, r7
 8002646:	1a80      	subs	r0, r0, r2
 8002648:	000c      	movs	r4, r1
 800264a:	40d6      	lsrs	r6, r2
 800264c:	40d1      	lsrs	r1, r2
 800264e:	4087      	lsls	r7, r0
 8002650:	4662      	mov	r2, ip
 8002652:	4084      	lsls	r4, r0
 8002654:	1a52      	subs	r2, r2, r1
 8002656:	1e78      	subs	r0, r7, #1
 8002658:	4187      	sbcs	r7, r0
 800265a:	4694      	mov	ip, r2
 800265c:	4334      	orrs	r4, r6
 800265e:	4327      	orrs	r7, r4
 8002660:	1bdc      	subs	r4, r3, r7
 8002662:	42a3      	cmp	r3, r4
 8002664:	419b      	sbcs	r3, r3
 8002666:	4662      	mov	r2, ip
 8002668:	425b      	negs	r3, r3
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	4699      	mov	r9, r3
 800266e:	464b      	mov	r3, r9
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	d400      	bmi.n	8002676 <__aeabi_dsub+0xaa>
 8002674:	e118      	b.n	80028a8 <__aeabi_dsub+0x2dc>
 8002676:	464b      	mov	r3, r9
 8002678:	0258      	lsls	r0, r3, #9
 800267a:	0a43      	lsrs	r3, r0, #9
 800267c:	4699      	mov	r9, r3
 800267e:	464b      	mov	r3, r9
 8002680:	2b00      	cmp	r3, #0
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0xba>
 8002684:	e137      	b.n	80028f6 <__aeabi_dsub+0x32a>
 8002686:	4648      	mov	r0, r9
 8002688:	f000 fcac 	bl	8002fe4 <__clzsi2>
 800268c:	0001      	movs	r1, r0
 800268e:	3908      	subs	r1, #8
 8002690:	2320      	movs	r3, #32
 8002692:	0022      	movs	r2, r4
 8002694:	4648      	mov	r0, r9
 8002696:	1a5b      	subs	r3, r3, r1
 8002698:	40da      	lsrs	r2, r3
 800269a:	4088      	lsls	r0, r1
 800269c:	408c      	lsls	r4, r1
 800269e:	4643      	mov	r3, r8
 80026a0:	4310      	orrs	r0, r2
 80026a2:	4588      	cmp	r8, r1
 80026a4:	dd00      	ble.n	80026a8 <__aeabi_dsub+0xdc>
 80026a6:	e136      	b.n	8002916 <__aeabi_dsub+0x34a>
 80026a8:	1ac9      	subs	r1, r1, r3
 80026aa:	1c4b      	adds	r3, r1, #1
 80026ac:	2b1f      	cmp	r3, #31
 80026ae:	dd00      	ble.n	80026b2 <__aeabi_dsub+0xe6>
 80026b0:	e0ea      	b.n	8002888 <__aeabi_dsub+0x2bc>
 80026b2:	2220      	movs	r2, #32
 80026b4:	0026      	movs	r6, r4
 80026b6:	1ad2      	subs	r2, r2, r3
 80026b8:	0001      	movs	r1, r0
 80026ba:	4094      	lsls	r4, r2
 80026bc:	40de      	lsrs	r6, r3
 80026be:	40d8      	lsrs	r0, r3
 80026c0:	2300      	movs	r3, #0
 80026c2:	4091      	lsls	r1, r2
 80026c4:	1e62      	subs	r2, r4, #1
 80026c6:	4194      	sbcs	r4, r2
 80026c8:	4681      	mov	r9, r0
 80026ca:	4698      	mov	r8, r3
 80026cc:	4331      	orrs	r1, r6
 80026ce:	430c      	orrs	r4, r1
 80026d0:	0763      	lsls	r3, r4, #29
 80026d2:	d009      	beq.n	80026e8 <__aeabi_dsub+0x11c>
 80026d4:	230f      	movs	r3, #15
 80026d6:	4023      	ands	r3, r4
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d005      	beq.n	80026e8 <__aeabi_dsub+0x11c>
 80026dc:	1d23      	adds	r3, r4, #4
 80026de:	42a3      	cmp	r3, r4
 80026e0:	41a4      	sbcs	r4, r4
 80026e2:	4264      	negs	r4, r4
 80026e4:	44a1      	add	r9, r4
 80026e6:	001c      	movs	r4, r3
 80026e8:	464b      	mov	r3, r9
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	d400      	bmi.n	80026f0 <__aeabi_dsub+0x124>
 80026ee:	e0de      	b.n	80028ae <__aeabi_dsub+0x2e2>
 80026f0:	4641      	mov	r1, r8
 80026f2:	4b8c      	ldr	r3, [pc, #560]	; (8002924 <__aeabi_dsub+0x358>)
 80026f4:	3101      	adds	r1, #1
 80026f6:	4299      	cmp	r1, r3
 80026f8:	d100      	bne.n	80026fc <__aeabi_dsub+0x130>
 80026fa:	e0e7      	b.n	80028cc <__aeabi_dsub+0x300>
 80026fc:	464b      	mov	r3, r9
 80026fe:	488a      	ldr	r0, [pc, #552]	; (8002928 <__aeabi_dsub+0x35c>)
 8002700:	08e4      	lsrs	r4, r4, #3
 8002702:	4003      	ands	r3, r0
 8002704:	0018      	movs	r0, r3
 8002706:	0549      	lsls	r1, r1, #21
 8002708:	075b      	lsls	r3, r3, #29
 800270a:	0240      	lsls	r0, r0, #9
 800270c:	4323      	orrs	r3, r4
 800270e:	0d4a      	lsrs	r2, r1, #21
 8002710:	0b04      	lsrs	r4, r0, #12
 8002712:	0512      	lsls	r2, r2, #20
 8002714:	07ed      	lsls	r5, r5, #31
 8002716:	4322      	orrs	r2, r4
 8002718:	432a      	orrs	r2, r5
 800271a:	0018      	movs	r0, r3
 800271c:	0011      	movs	r1, r2
 800271e:	bcf0      	pop	{r4, r5, r6, r7}
 8002720:	46bb      	mov	fp, r7
 8002722:	46b2      	mov	sl, r6
 8002724:	46a9      	mov	r9, r5
 8002726:	46a0      	mov	r8, r4
 8002728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800272a:	4642      	mov	r2, r8
 800272c:	1a12      	subs	r2, r2, r0
 800272e:	2a00      	cmp	r2, #0
 8002730:	dd52      	ble.n	80027d8 <__aeabi_dsub+0x20c>
 8002732:	2800      	cmp	r0, #0
 8002734:	d100      	bne.n	8002738 <__aeabi_dsub+0x16c>
 8002736:	e09c      	b.n	8002872 <__aeabi_dsub+0x2a6>
 8002738:	45a0      	cmp	r8, r4
 800273a:	d100      	bne.n	800273e <__aeabi_dsub+0x172>
 800273c:	e0ca      	b.n	80028d4 <__aeabi_dsub+0x308>
 800273e:	2080      	movs	r0, #128	; 0x80
 8002740:	0400      	lsls	r0, r0, #16
 8002742:	4301      	orrs	r1, r0
 8002744:	2a38      	cmp	r2, #56	; 0x38
 8002746:	dd00      	ble.n	800274a <__aeabi_dsub+0x17e>
 8002748:	e149      	b.n	80029de <__aeabi_dsub+0x412>
 800274a:	2a1f      	cmp	r2, #31
 800274c:	dc00      	bgt.n	8002750 <__aeabi_dsub+0x184>
 800274e:	e197      	b.n	8002a80 <__aeabi_dsub+0x4b4>
 8002750:	0010      	movs	r0, r2
 8002752:	000e      	movs	r6, r1
 8002754:	3820      	subs	r0, #32
 8002756:	40c6      	lsrs	r6, r0
 8002758:	2a20      	cmp	r2, #32
 800275a:	d004      	beq.n	8002766 <__aeabi_dsub+0x19a>
 800275c:	2040      	movs	r0, #64	; 0x40
 800275e:	1a82      	subs	r2, r0, r2
 8002760:	4091      	lsls	r1, r2
 8002762:	430f      	orrs	r7, r1
 8002764:	46b9      	mov	r9, r7
 8002766:	464c      	mov	r4, r9
 8002768:	1e62      	subs	r2, r4, #1
 800276a:	4194      	sbcs	r4, r2
 800276c:	4334      	orrs	r4, r6
 800276e:	e13a      	b.n	80029e6 <__aeabi_dsub+0x41a>
 8002770:	000a      	movs	r2, r1
 8002772:	433a      	orrs	r2, r7
 8002774:	d028      	beq.n	80027c8 <__aeabi_dsub+0x1fc>
 8002776:	46b3      	mov	fp, r6
 8002778:	42b5      	cmp	r5, r6
 800277a:	d02b      	beq.n	80027d4 <__aeabi_dsub+0x208>
 800277c:	4a6b      	ldr	r2, [pc, #428]	; (800292c <__aeabi_dsub+0x360>)
 800277e:	4442      	add	r2, r8
 8002780:	2a00      	cmp	r2, #0
 8002782:	d05d      	beq.n	8002840 <__aeabi_dsub+0x274>
 8002784:	4642      	mov	r2, r8
 8002786:	4644      	mov	r4, r8
 8002788:	1a82      	subs	r2, r0, r2
 800278a:	2c00      	cmp	r4, #0
 800278c:	d000      	beq.n	8002790 <__aeabi_dsub+0x1c4>
 800278e:	e0f5      	b.n	800297c <__aeabi_dsub+0x3b0>
 8002790:	4665      	mov	r5, ip
 8002792:	431d      	orrs	r5, r3
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x1cc>
 8002796:	e19c      	b.n	8002ad2 <__aeabi_dsub+0x506>
 8002798:	1e55      	subs	r5, r2, #1
 800279a:	2a01      	cmp	r2, #1
 800279c:	d100      	bne.n	80027a0 <__aeabi_dsub+0x1d4>
 800279e:	e1fb      	b.n	8002b98 <__aeabi_dsub+0x5cc>
 80027a0:	4c60      	ldr	r4, [pc, #384]	; (8002924 <__aeabi_dsub+0x358>)
 80027a2:	42a2      	cmp	r2, r4
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x1dc>
 80027a6:	e1bd      	b.n	8002b24 <__aeabi_dsub+0x558>
 80027a8:	002a      	movs	r2, r5
 80027aa:	e0f0      	b.n	800298e <__aeabi_dsub+0x3c2>
 80027ac:	0008      	movs	r0, r1
 80027ae:	4338      	orrs	r0, r7
 80027b0:	d100      	bne.n	80027b4 <__aeabi_dsub+0x1e8>
 80027b2:	e0c3      	b.n	800293c <__aeabi_dsub+0x370>
 80027b4:	1e50      	subs	r0, r2, #1
 80027b6:	2a01      	cmp	r2, #1
 80027b8:	d100      	bne.n	80027bc <__aeabi_dsub+0x1f0>
 80027ba:	e1a8      	b.n	8002b0e <__aeabi_dsub+0x542>
 80027bc:	4c59      	ldr	r4, [pc, #356]	; (8002924 <__aeabi_dsub+0x358>)
 80027be:	42a2      	cmp	r2, r4
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x1f8>
 80027c2:	e087      	b.n	80028d4 <__aeabi_dsub+0x308>
 80027c4:	0002      	movs	r2, r0
 80027c6:	e736      	b.n	8002636 <__aeabi_dsub+0x6a>
 80027c8:	2201      	movs	r2, #1
 80027ca:	4056      	eors	r6, r2
 80027cc:	46b3      	mov	fp, r6
 80027ce:	42b5      	cmp	r5, r6
 80027d0:	d000      	beq.n	80027d4 <__aeabi_dsub+0x208>
 80027d2:	e721      	b.n	8002618 <__aeabi_dsub+0x4c>
 80027d4:	4a55      	ldr	r2, [pc, #340]	; (800292c <__aeabi_dsub+0x360>)
 80027d6:	4442      	add	r2, r8
 80027d8:	2a00      	cmp	r2, #0
 80027da:	d100      	bne.n	80027de <__aeabi_dsub+0x212>
 80027dc:	e0b5      	b.n	800294a <__aeabi_dsub+0x37e>
 80027de:	4642      	mov	r2, r8
 80027e0:	4644      	mov	r4, r8
 80027e2:	1a82      	subs	r2, r0, r2
 80027e4:	2c00      	cmp	r4, #0
 80027e6:	d100      	bne.n	80027ea <__aeabi_dsub+0x21e>
 80027e8:	e138      	b.n	8002a5c <__aeabi_dsub+0x490>
 80027ea:	4e4e      	ldr	r6, [pc, #312]	; (8002924 <__aeabi_dsub+0x358>)
 80027ec:	42b0      	cmp	r0, r6
 80027ee:	d100      	bne.n	80027f2 <__aeabi_dsub+0x226>
 80027f0:	e1de      	b.n	8002bb0 <__aeabi_dsub+0x5e4>
 80027f2:	2680      	movs	r6, #128	; 0x80
 80027f4:	4664      	mov	r4, ip
 80027f6:	0436      	lsls	r6, r6, #16
 80027f8:	4334      	orrs	r4, r6
 80027fa:	46a4      	mov	ip, r4
 80027fc:	2a38      	cmp	r2, #56	; 0x38
 80027fe:	dd00      	ble.n	8002802 <__aeabi_dsub+0x236>
 8002800:	e196      	b.n	8002b30 <__aeabi_dsub+0x564>
 8002802:	2a1f      	cmp	r2, #31
 8002804:	dd00      	ble.n	8002808 <__aeabi_dsub+0x23c>
 8002806:	e224      	b.n	8002c52 <__aeabi_dsub+0x686>
 8002808:	2620      	movs	r6, #32
 800280a:	1ab4      	subs	r4, r6, r2
 800280c:	46a2      	mov	sl, r4
 800280e:	4664      	mov	r4, ip
 8002810:	4656      	mov	r6, sl
 8002812:	40b4      	lsls	r4, r6
 8002814:	46a1      	mov	r9, r4
 8002816:	001c      	movs	r4, r3
 8002818:	464e      	mov	r6, r9
 800281a:	40d4      	lsrs	r4, r2
 800281c:	4326      	orrs	r6, r4
 800281e:	0034      	movs	r4, r6
 8002820:	4656      	mov	r6, sl
 8002822:	40b3      	lsls	r3, r6
 8002824:	1e5e      	subs	r6, r3, #1
 8002826:	41b3      	sbcs	r3, r6
 8002828:	431c      	orrs	r4, r3
 800282a:	4663      	mov	r3, ip
 800282c:	40d3      	lsrs	r3, r2
 800282e:	18c9      	adds	r1, r1, r3
 8002830:	19e4      	adds	r4, r4, r7
 8002832:	42bc      	cmp	r4, r7
 8002834:	41bf      	sbcs	r7, r7
 8002836:	427f      	negs	r7, r7
 8002838:	46b9      	mov	r9, r7
 800283a:	4680      	mov	r8, r0
 800283c:	4489      	add	r9, r1
 800283e:	e0d8      	b.n	80029f2 <__aeabi_dsub+0x426>
 8002840:	4640      	mov	r0, r8
 8002842:	4c3b      	ldr	r4, [pc, #236]	; (8002930 <__aeabi_dsub+0x364>)
 8002844:	3001      	adds	r0, #1
 8002846:	4220      	tst	r0, r4
 8002848:	d000      	beq.n	800284c <__aeabi_dsub+0x280>
 800284a:	e0b4      	b.n	80029b6 <__aeabi_dsub+0x3ea>
 800284c:	4640      	mov	r0, r8
 800284e:	2800      	cmp	r0, #0
 8002850:	d000      	beq.n	8002854 <__aeabi_dsub+0x288>
 8002852:	e144      	b.n	8002ade <__aeabi_dsub+0x512>
 8002854:	4660      	mov	r0, ip
 8002856:	4318      	orrs	r0, r3
 8002858:	d100      	bne.n	800285c <__aeabi_dsub+0x290>
 800285a:	e190      	b.n	8002b7e <__aeabi_dsub+0x5b2>
 800285c:	0008      	movs	r0, r1
 800285e:	4338      	orrs	r0, r7
 8002860:	d000      	beq.n	8002864 <__aeabi_dsub+0x298>
 8002862:	e1aa      	b.n	8002bba <__aeabi_dsub+0x5ee>
 8002864:	4661      	mov	r1, ip
 8002866:	08db      	lsrs	r3, r3, #3
 8002868:	0749      	lsls	r1, r1, #29
 800286a:	430b      	orrs	r3, r1
 800286c:	4661      	mov	r1, ip
 800286e:	08cc      	lsrs	r4, r1, #3
 8002870:	e027      	b.n	80028c2 <__aeabi_dsub+0x2f6>
 8002872:	0008      	movs	r0, r1
 8002874:	4338      	orrs	r0, r7
 8002876:	d061      	beq.n	800293c <__aeabi_dsub+0x370>
 8002878:	1e50      	subs	r0, r2, #1
 800287a:	2a01      	cmp	r2, #1
 800287c:	d100      	bne.n	8002880 <__aeabi_dsub+0x2b4>
 800287e:	e139      	b.n	8002af4 <__aeabi_dsub+0x528>
 8002880:	42a2      	cmp	r2, r4
 8002882:	d027      	beq.n	80028d4 <__aeabi_dsub+0x308>
 8002884:	0002      	movs	r2, r0
 8002886:	e75d      	b.n	8002744 <__aeabi_dsub+0x178>
 8002888:	0002      	movs	r2, r0
 800288a:	391f      	subs	r1, #31
 800288c:	40ca      	lsrs	r2, r1
 800288e:	0011      	movs	r1, r2
 8002890:	2b20      	cmp	r3, #32
 8002892:	d003      	beq.n	800289c <__aeabi_dsub+0x2d0>
 8002894:	2240      	movs	r2, #64	; 0x40
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	4098      	lsls	r0, r3
 800289a:	4304      	orrs	r4, r0
 800289c:	1e63      	subs	r3, r4, #1
 800289e:	419c      	sbcs	r4, r3
 80028a0:	2300      	movs	r3, #0
 80028a2:	4699      	mov	r9, r3
 80028a4:	4698      	mov	r8, r3
 80028a6:	430c      	orrs	r4, r1
 80028a8:	0763      	lsls	r3, r4, #29
 80028aa:	d000      	beq.n	80028ae <__aeabi_dsub+0x2e2>
 80028ac:	e712      	b.n	80026d4 <__aeabi_dsub+0x108>
 80028ae:	464b      	mov	r3, r9
 80028b0:	464a      	mov	r2, r9
 80028b2:	08e4      	lsrs	r4, r4, #3
 80028b4:	075b      	lsls	r3, r3, #29
 80028b6:	4323      	orrs	r3, r4
 80028b8:	08d4      	lsrs	r4, r2, #3
 80028ba:	4642      	mov	r2, r8
 80028bc:	4919      	ldr	r1, [pc, #100]	; (8002924 <__aeabi_dsub+0x358>)
 80028be:	428a      	cmp	r2, r1
 80028c0:	d00e      	beq.n	80028e0 <__aeabi_dsub+0x314>
 80028c2:	0324      	lsls	r4, r4, #12
 80028c4:	0552      	lsls	r2, r2, #21
 80028c6:	0b24      	lsrs	r4, r4, #12
 80028c8:	0d52      	lsrs	r2, r2, #21
 80028ca:	e722      	b.n	8002712 <__aeabi_dsub+0x146>
 80028cc:	000a      	movs	r2, r1
 80028ce:	2400      	movs	r4, #0
 80028d0:	2300      	movs	r3, #0
 80028d2:	e71e      	b.n	8002712 <__aeabi_dsub+0x146>
 80028d4:	08db      	lsrs	r3, r3, #3
 80028d6:	4662      	mov	r2, ip
 80028d8:	0752      	lsls	r2, r2, #29
 80028da:	4313      	orrs	r3, r2
 80028dc:	4662      	mov	r2, ip
 80028de:	08d4      	lsrs	r4, r2, #3
 80028e0:	001a      	movs	r2, r3
 80028e2:	4322      	orrs	r2, r4
 80028e4:	d100      	bne.n	80028e8 <__aeabi_dsub+0x31c>
 80028e6:	e1fc      	b.n	8002ce2 <__aeabi_dsub+0x716>
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	0312      	lsls	r2, r2, #12
 80028ec:	4314      	orrs	r4, r2
 80028ee:	0324      	lsls	r4, r4, #12
 80028f0:	4a0c      	ldr	r2, [pc, #48]	; (8002924 <__aeabi_dsub+0x358>)
 80028f2:	0b24      	lsrs	r4, r4, #12
 80028f4:	e70d      	b.n	8002712 <__aeabi_dsub+0x146>
 80028f6:	0020      	movs	r0, r4
 80028f8:	f000 fb74 	bl	8002fe4 <__clzsi2>
 80028fc:	0001      	movs	r1, r0
 80028fe:	3118      	adds	r1, #24
 8002900:	291f      	cmp	r1, #31
 8002902:	dc00      	bgt.n	8002906 <__aeabi_dsub+0x33a>
 8002904:	e6c4      	b.n	8002690 <__aeabi_dsub+0xc4>
 8002906:	3808      	subs	r0, #8
 8002908:	4084      	lsls	r4, r0
 800290a:	4643      	mov	r3, r8
 800290c:	0020      	movs	r0, r4
 800290e:	2400      	movs	r4, #0
 8002910:	4588      	cmp	r8, r1
 8002912:	dc00      	bgt.n	8002916 <__aeabi_dsub+0x34a>
 8002914:	e6c8      	b.n	80026a8 <__aeabi_dsub+0xdc>
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <__aeabi_dsub+0x35c>)
 8002918:	1a5b      	subs	r3, r3, r1
 800291a:	4010      	ands	r0, r2
 800291c:	4698      	mov	r8, r3
 800291e:	4681      	mov	r9, r0
 8002920:	e6d6      	b.n	80026d0 <__aeabi_dsub+0x104>
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	000007ff 	.word	0x000007ff
 8002928:	ff7fffff 	.word	0xff7fffff
 800292c:	fffff801 	.word	0xfffff801
 8002930:	000007fe 	.word	0x000007fe
 8002934:	430f      	orrs	r7, r1
 8002936:	1e7a      	subs	r2, r7, #1
 8002938:	4197      	sbcs	r7, r2
 800293a:	e691      	b.n	8002660 <__aeabi_dsub+0x94>
 800293c:	4661      	mov	r1, ip
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	0749      	lsls	r1, r1, #29
 8002942:	430b      	orrs	r3, r1
 8002944:	4661      	mov	r1, ip
 8002946:	08cc      	lsrs	r4, r1, #3
 8002948:	e7b8      	b.n	80028bc <__aeabi_dsub+0x2f0>
 800294a:	4640      	mov	r0, r8
 800294c:	4cd3      	ldr	r4, [pc, #844]	; (8002c9c <__aeabi_dsub+0x6d0>)
 800294e:	3001      	adds	r0, #1
 8002950:	4220      	tst	r0, r4
 8002952:	d000      	beq.n	8002956 <__aeabi_dsub+0x38a>
 8002954:	e0a2      	b.n	8002a9c <__aeabi_dsub+0x4d0>
 8002956:	4640      	mov	r0, r8
 8002958:	2800      	cmp	r0, #0
 800295a:	d000      	beq.n	800295e <__aeabi_dsub+0x392>
 800295c:	e101      	b.n	8002b62 <__aeabi_dsub+0x596>
 800295e:	4660      	mov	r0, ip
 8002960:	4318      	orrs	r0, r3
 8002962:	d100      	bne.n	8002966 <__aeabi_dsub+0x39a>
 8002964:	e15e      	b.n	8002c24 <__aeabi_dsub+0x658>
 8002966:	0008      	movs	r0, r1
 8002968:	4338      	orrs	r0, r7
 800296a:	d000      	beq.n	800296e <__aeabi_dsub+0x3a2>
 800296c:	e15f      	b.n	8002c2e <__aeabi_dsub+0x662>
 800296e:	4661      	mov	r1, ip
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	0749      	lsls	r1, r1, #29
 8002974:	430b      	orrs	r3, r1
 8002976:	4661      	mov	r1, ip
 8002978:	08cc      	lsrs	r4, r1, #3
 800297a:	e7a2      	b.n	80028c2 <__aeabi_dsub+0x2f6>
 800297c:	4dc8      	ldr	r5, [pc, #800]	; (8002ca0 <__aeabi_dsub+0x6d4>)
 800297e:	42a8      	cmp	r0, r5
 8002980:	d100      	bne.n	8002984 <__aeabi_dsub+0x3b8>
 8002982:	e0cf      	b.n	8002b24 <__aeabi_dsub+0x558>
 8002984:	2580      	movs	r5, #128	; 0x80
 8002986:	4664      	mov	r4, ip
 8002988:	042d      	lsls	r5, r5, #16
 800298a:	432c      	orrs	r4, r5
 800298c:	46a4      	mov	ip, r4
 800298e:	2a38      	cmp	r2, #56	; 0x38
 8002990:	dc56      	bgt.n	8002a40 <__aeabi_dsub+0x474>
 8002992:	2a1f      	cmp	r2, #31
 8002994:	dd00      	ble.n	8002998 <__aeabi_dsub+0x3cc>
 8002996:	e0d1      	b.n	8002b3c <__aeabi_dsub+0x570>
 8002998:	2520      	movs	r5, #32
 800299a:	001e      	movs	r6, r3
 800299c:	1aad      	subs	r5, r5, r2
 800299e:	4664      	mov	r4, ip
 80029a0:	40ab      	lsls	r3, r5
 80029a2:	40ac      	lsls	r4, r5
 80029a4:	40d6      	lsrs	r6, r2
 80029a6:	1e5d      	subs	r5, r3, #1
 80029a8:	41ab      	sbcs	r3, r5
 80029aa:	4334      	orrs	r4, r6
 80029ac:	4323      	orrs	r3, r4
 80029ae:	4664      	mov	r4, ip
 80029b0:	40d4      	lsrs	r4, r2
 80029b2:	1b09      	subs	r1, r1, r4
 80029b4:	e049      	b.n	8002a4a <__aeabi_dsub+0x47e>
 80029b6:	4660      	mov	r0, ip
 80029b8:	1bdc      	subs	r4, r3, r7
 80029ba:	1a46      	subs	r6, r0, r1
 80029bc:	42a3      	cmp	r3, r4
 80029be:	4180      	sbcs	r0, r0
 80029c0:	4240      	negs	r0, r0
 80029c2:	4681      	mov	r9, r0
 80029c4:	0030      	movs	r0, r6
 80029c6:	464e      	mov	r6, r9
 80029c8:	1b80      	subs	r0, r0, r6
 80029ca:	4681      	mov	r9, r0
 80029cc:	0200      	lsls	r0, r0, #8
 80029ce:	d476      	bmi.n	8002abe <__aeabi_dsub+0x4f2>
 80029d0:	464b      	mov	r3, r9
 80029d2:	4323      	orrs	r3, r4
 80029d4:	d000      	beq.n	80029d8 <__aeabi_dsub+0x40c>
 80029d6:	e652      	b.n	800267e <__aeabi_dsub+0xb2>
 80029d8:	2400      	movs	r4, #0
 80029da:	2500      	movs	r5, #0
 80029dc:	e771      	b.n	80028c2 <__aeabi_dsub+0x2f6>
 80029de:	4339      	orrs	r1, r7
 80029e0:	000c      	movs	r4, r1
 80029e2:	1e62      	subs	r2, r4, #1
 80029e4:	4194      	sbcs	r4, r2
 80029e6:	18e4      	adds	r4, r4, r3
 80029e8:	429c      	cmp	r4, r3
 80029ea:	419b      	sbcs	r3, r3
 80029ec:	425b      	negs	r3, r3
 80029ee:	4463      	add	r3, ip
 80029f0:	4699      	mov	r9, r3
 80029f2:	464b      	mov	r3, r9
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	d400      	bmi.n	80029fa <__aeabi_dsub+0x42e>
 80029f8:	e756      	b.n	80028a8 <__aeabi_dsub+0x2dc>
 80029fa:	2301      	movs	r3, #1
 80029fc:	469c      	mov	ip, r3
 80029fe:	4ba8      	ldr	r3, [pc, #672]	; (8002ca0 <__aeabi_dsub+0x6d4>)
 8002a00:	44e0      	add	r8, ip
 8002a02:	4598      	cmp	r8, r3
 8002a04:	d038      	beq.n	8002a78 <__aeabi_dsub+0x4ac>
 8002a06:	464b      	mov	r3, r9
 8002a08:	48a6      	ldr	r0, [pc, #664]	; (8002ca4 <__aeabi_dsub+0x6d8>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4003      	ands	r3, r0
 8002a0e:	0018      	movs	r0, r3
 8002a10:	0863      	lsrs	r3, r4, #1
 8002a12:	4014      	ands	r4, r2
 8002a14:	431c      	orrs	r4, r3
 8002a16:	07c3      	lsls	r3, r0, #31
 8002a18:	431c      	orrs	r4, r3
 8002a1a:	0843      	lsrs	r3, r0, #1
 8002a1c:	4699      	mov	r9, r3
 8002a1e:	e657      	b.n	80026d0 <__aeabi_dsub+0x104>
 8002a20:	0010      	movs	r0, r2
 8002a22:	000e      	movs	r6, r1
 8002a24:	3820      	subs	r0, #32
 8002a26:	40c6      	lsrs	r6, r0
 8002a28:	2a20      	cmp	r2, #32
 8002a2a:	d004      	beq.n	8002a36 <__aeabi_dsub+0x46a>
 8002a2c:	2040      	movs	r0, #64	; 0x40
 8002a2e:	1a82      	subs	r2, r0, r2
 8002a30:	4091      	lsls	r1, r2
 8002a32:	430f      	orrs	r7, r1
 8002a34:	46b9      	mov	r9, r7
 8002a36:	464f      	mov	r7, r9
 8002a38:	1e7a      	subs	r2, r7, #1
 8002a3a:	4197      	sbcs	r7, r2
 8002a3c:	4337      	orrs	r7, r6
 8002a3e:	e60f      	b.n	8002660 <__aeabi_dsub+0x94>
 8002a40:	4662      	mov	r2, ip
 8002a42:	431a      	orrs	r2, r3
 8002a44:	0013      	movs	r3, r2
 8002a46:	1e5a      	subs	r2, r3, #1
 8002a48:	4193      	sbcs	r3, r2
 8002a4a:	1afc      	subs	r4, r7, r3
 8002a4c:	42a7      	cmp	r7, r4
 8002a4e:	41bf      	sbcs	r7, r7
 8002a50:	427f      	negs	r7, r7
 8002a52:	1bcb      	subs	r3, r1, r7
 8002a54:	4699      	mov	r9, r3
 8002a56:	465d      	mov	r5, fp
 8002a58:	4680      	mov	r8, r0
 8002a5a:	e608      	b.n	800266e <__aeabi_dsub+0xa2>
 8002a5c:	4666      	mov	r6, ip
 8002a5e:	431e      	orrs	r6, r3
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x498>
 8002a62:	e0be      	b.n	8002be2 <__aeabi_dsub+0x616>
 8002a64:	1e56      	subs	r6, r2, #1
 8002a66:	2a01      	cmp	r2, #1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x4a0>
 8002a6a:	e109      	b.n	8002c80 <__aeabi_dsub+0x6b4>
 8002a6c:	4c8c      	ldr	r4, [pc, #560]	; (8002ca0 <__aeabi_dsub+0x6d4>)
 8002a6e:	42a2      	cmp	r2, r4
 8002a70:	d100      	bne.n	8002a74 <__aeabi_dsub+0x4a8>
 8002a72:	e119      	b.n	8002ca8 <__aeabi_dsub+0x6dc>
 8002a74:	0032      	movs	r2, r6
 8002a76:	e6c1      	b.n	80027fc <__aeabi_dsub+0x230>
 8002a78:	4642      	mov	r2, r8
 8002a7a:	2400      	movs	r4, #0
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e648      	b.n	8002712 <__aeabi_dsub+0x146>
 8002a80:	2020      	movs	r0, #32
 8002a82:	000c      	movs	r4, r1
 8002a84:	1a80      	subs	r0, r0, r2
 8002a86:	003e      	movs	r6, r7
 8002a88:	4087      	lsls	r7, r0
 8002a8a:	4084      	lsls	r4, r0
 8002a8c:	40d6      	lsrs	r6, r2
 8002a8e:	1e78      	subs	r0, r7, #1
 8002a90:	4187      	sbcs	r7, r0
 8002a92:	40d1      	lsrs	r1, r2
 8002a94:	4334      	orrs	r4, r6
 8002a96:	433c      	orrs	r4, r7
 8002a98:	448c      	add	ip, r1
 8002a9a:	e7a4      	b.n	80029e6 <__aeabi_dsub+0x41a>
 8002a9c:	4a80      	ldr	r2, [pc, #512]	; (8002ca0 <__aeabi_dsub+0x6d4>)
 8002a9e:	4290      	cmp	r0, r2
 8002aa0:	d100      	bne.n	8002aa4 <__aeabi_dsub+0x4d8>
 8002aa2:	e0e9      	b.n	8002c78 <__aeabi_dsub+0x6ac>
 8002aa4:	19df      	adds	r7, r3, r7
 8002aa6:	429f      	cmp	r7, r3
 8002aa8:	419b      	sbcs	r3, r3
 8002aaa:	4461      	add	r1, ip
 8002aac:	425b      	negs	r3, r3
 8002aae:	18c9      	adds	r1, r1, r3
 8002ab0:	07cc      	lsls	r4, r1, #31
 8002ab2:	087f      	lsrs	r7, r7, #1
 8002ab4:	084b      	lsrs	r3, r1, #1
 8002ab6:	4699      	mov	r9, r3
 8002ab8:	4680      	mov	r8, r0
 8002aba:	433c      	orrs	r4, r7
 8002abc:	e6f4      	b.n	80028a8 <__aeabi_dsub+0x2dc>
 8002abe:	1afc      	subs	r4, r7, r3
 8002ac0:	42a7      	cmp	r7, r4
 8002ac2:	41bf      	sbcs	r7, r7
 8002ac4:	4663      	mov	r3, ip
 8002ac6:	427f      	negs	r7, r7
 8002ac8:	1ac9      	subs	r1, r1, r3
 8002aca:	1bcb      	subs	r3, r1, r7
 8002acc:	4699      	mov	r9, r3
 8002ace:	465d      	mov	r5, fp
 8002ad0:	e5d5      	b.n	800267e <__aeabi_dsub+0xb2>
 8002ad2:	08ff      	lsrs	r7, r7, #3
 8002ad4:	074b      	lsls	r3, r1, #29
 8002ad6:	465d      	mov	r5, fp
 8002ad8:	433b      	orrs	r3, r7
 8002ada:	08cc      	lsrs	r4, r1, #3
 8002adc:	e6ee      	b.n	80028bc <__aeabi_dsub+0x2f0>
 8002ade:	4662      	mov	r2, ip
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	d000      	beq.n	8002ae6 <__aeabi_dsub+0x51a>
 8002ae4:	e082      	b.n	8002bec <__aeabi_dsub+0x620>
 8002ae6:	000b      	movs	r3, r1
 8002ae8:	433b      	orrs	r3, r7
 8002aea:	d11b      	bne.n	8002b24 <__aeabi_dsub+0x558>
 8002aec:	2480      	movs	r4, #128	; 0x80
 8002aee:	2500      	movs	r5, #0
 8002af0:	0324      	lsls	r4, r4, #12
 8002af2:	e6f9      	b.n	80028e8 <__aeabi_dsub+0x31c>
 8002af4:	19dc      	adds	r4, r3, r7
 8002af6:	429c      	cmp	r4, r3
 8002af8:	419b      	sbcs	r3, r3
 8002afa:	4461      	add	r1, ip
 8002afc:	4689      	mov	r9, r1
 8002afe:	425b      	negs	r3, r3
 8002b00:	4499      	add	r9, r3
 8002b02:	464b      	mov	r3, r9
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	d444      	bmi.n	8002b92 <__aeabi_dsub+0x5c6>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	4698      	mov	r8, r3
 8002b0c:	e6cc      	b.n	80028a8 <__aeabi_dsub+0x2dc>
 8002b0e:	1bdc      	subs	r4, r3, r7
 8002b10:	4662      	mov	r2, ip
 8002b12:	42a3      	cmp	r3, r4
 8002b14:	419b      	sbcs	r3, r3
 8002b16:	1a51      	subs	r1, r2, r1
 8002b18:	425b      	negs	r3, r3
 8002b1a:	1acb      	subs	r3, r1, r3
 8002b1c:	4699      	mov	r9, r3
 8002b1e:	2301      	movs	r3, #1
 8002b20:	4698      	mov	r8, r3
 8002b22:	e5a4      	b.n	800266e <__aeabi_dsub+0xa2>
 8002b24:	08ff      	lsrs	r7, r7, #3
 8002b26:	074b      	lsls	r3, r1, #29
 8002b28:	465d      	mov	r5, fp
 8002b2a:	433b      	orrs	r3, r7
 8002b2c:	08cc      	lsrs	r4, r1, #3
 8002b2e:	e6d7      	b.n	80028e0 <__aeabi_dsub+0x314>
 8002b30:	4662      	mov	r2, ip
 8002b32:	431a      	orrs	r2, r3
 8002b34:	0014      	movs	r4, r2
 8002b36:	1e63      	subs	r3, r4, #1
 8002b38:	419c      	sbcs	r4, r3
 8002b3a:	e679      	b.n	8002830 <__aeabi_dsub+0x264>
 8002b3c:	0015      	movs	r5, r2
 8002b3e:	4664      	mov	r4, ip
 8002b40:	3d20      	subs	r5, #32
 8002b42:	40ec      	lsrs	r4, r5
 8002b44:	46a0      	mov	r8, r4
 8002b46:	2a20      	cmp	r2, #32
 8002b48:	d005      	beq.n	8002b56 <__aeabi_dsub+0x58a>
 8002b4a:	2540      	movs	r5, #64	; 0x40
 8002b4c:	4664      	mov	r4, ip
 8002b4e:	1aaa      	subs	r2, r5, r2
 8002b50:	4094      	lsls	r4, r2
 8002b52:	4323      	orrs	r3, r4
 8002b54:	469a      	mov	sl, r3
 8002b56:	4654      	mov	r4, sl
 8002b58:	1e63      	subs	r3, r4, #1
 8002b5a:	419c      	sbcs	r4, r3
 8002b5c:	4643      	mov	r3, r8
 8002b5e:	4323      	orrs	r3, r4
 8002b60:	e773      	b.n	8002a4a <__aeabi_dsub+0x47e>
 8002b62:	4662      	mov	r2, ip
 8002b64:	431a      	orrs	r2, r3
 8002b66:	d023      	beq.n	8002bb0 <__aeabi_dsub+0x5e4>
 8002b68:	000a      	movs	r2, r1
 8002b6a:	433a      	orrs	r2, r7
 8002b6c:	d000      	beq.n	8002b70 <__aeabi_dsub+0x5a4>
 8002b6e:	e0a0      	b.n	8002cb2 <__aeabi_dsub+0x6e6>
 8002b70:	4662      	mov	r2, ip
 8002b72:	08db      	lsrs	r3, r3, #3
 8002b74:	0752      	lsls	r2, r2, #29
 8002b76:	4313      	orrs	r3, r2
 8002b78:	4662      	mov	r2, ip
 8002b7a:	08d4      	lsrs	r4, r2, #3
 8002b7c:	e6b0      	b.n	80028e0 <__aeabi_dsub+0x314>
 8002b7e:	000b      	movs	r3, r1
 8002b80:	433b      	orrs	r3, r7
 8002b82:	d100      	bne.n	8002b86 <__aeabi_dsub+0x5ba>
 8002b84:	e728      	b.n	80029d8 <__aeabi_dsub+0x40c>
 8002b86:	08ff      	lsrs	r7, r7, #3
 8002b88:	074b      	lsls	r3, r1, #29
 8002b8a:	465d      	mov	r5, fp
 8002b8c:	433b      	orrs	r3, r7
 8002b8e:	08cc      	lsrs	r4, r1, #3
 8002b90:	e697      	b.n	80028c2 <__aeabi_dsub+0x2f6>
 8002b92:	2302      	movs	r3, #2
 8002b94:	4698      	mov	r8, r3
 8002b96:	e736      	b.n	8002a06 <__aeabi_dsub+0x43a>
 8002b98:	1afc      	subs	r4, r7, r3
 8002b9a:	42a7      	cmp	r7, r4
 8002b9c:	41bf      	sbcs	r7, r7
 8002b9e:	4663      	mov	r3, ip
 8002ba0:	427f      	negs	r7, r7
 8002ba2:	1ac9      	subs	r1, r1, r3
 8002ba4:	1bcb      	subs	r3, r1, r7
 8002ba6:	4699      	mov	r9, r3
 8002ba8:	2301      	movs	r3, #1
 8002baa:	465d      	mov	r5, fp
 8002bac:	4698      	mov	r8, r3
 8002bae:	e55e      	b.n	800266e <__aeabi_dsub+0xa2>
 8002bb0:	074b      	lsls	r3, r1, #29
 8002bb2:	08ff      	lsrs	r7, r7, #3
 8002bb4:	433b      	orrs	r3, r7
 8002bb6:	08cc      	lsrs	r4, r1, #3
 8002bb8:	e692      	b.n	80028e0 <__aeabi_dsub+0x314>
 8002bba:	1bdc      	subs	r4, r3, r7
 8002bbc:	4660      	mov	r0, ip
 8002bbe:	42a3      	cmp	r3, r4
 8002bc0:	41b6      	sbcs	r6, r6
 8002bc2:	1a40      	subs	r0, r0, r1
 8002bc4:	4276      	negs	r6, r6
 8002bc6:	1b80      	subs	r0, r0, r6
 8002bc8:	4681      	mov	r9, r0
 8002bca:	0200      	lsls	r0, r0, #8
 8002bcc:	d560      	bpl.n	8002c90 <__aeabi_dsub+0x6c4>
 8002bce:	1afc      	subs	r4, r7, r3
 8002bd0:	42a7      	cmp	r7, r4
 8002bd2:	41bf      	sbcs	r7, r7
 8002bd4:	4663      	mov	r3, ip
 8002bd6:	427f      	negs	r7, r7
 8002bd8:	1ac9      	subs	r1, r1, r3
 8002bda:	1bcb      	subs	r3, r1, r7
 8002bdc:	4699      	mov	r9, r3
 8002bde:	465d      	mov	r5, fp
 8002be0:	e576      	b.n	80026d0 <__aeabi_dsub+0x104>
 8002be2:	08ff      	lsrs	r7, r7, #3
 8002be4:	074b      	lsls	r3, r1, #29
 8002be6:	433b      	orrs	r3, r7
 8002be8:	08cc      	lsrs	r4, r1, #3
 8002bea:	e667      	b.n	80028bc <__aeabi_dsub+0x2f0>
 8002bec:	000a      	movs	r2, r1
 8002bee:	08db      	lsrs	r3, r3, #3
 8002bf0:	433a      	orrs	r2, r7
 8002bf2:	d100      	bne.n	8002bf6 <__aeabi_dsub+0x62a>
 8002bf4:	e66f      	b.n	80028d6 <__aeabi_dsub+0x30a>
 8002bf6:	4662      	mov	r2, ip
 8002bf8:	0752      	lsls	r2, r2, #29
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	4662      	mov	r2, ip
 8002bfe:	08d4      	lsrs	r4, r2, #3
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	0312      	lsls	r2, r2, #12
 8002c04:	4214      	tst	r4, r2
 8002c06:	d007      	beq.n	8002c18 <__aeabi_dsub+0x64c>
 8002c08:	08c8      	lsrs	r0, r1, #3
 8002c0a:	4210      	tst	r0, r2
 8002c0c:	d104      	bne.n	8002c18 <__aeabi_dsub+0x64c>
 8002c0e:	465d      	mov	r5, fp
 8002c10:	0004      	movs	r4, r0
 8002c12:	08fb      	lsrs	r3, r7, #3
 8002c14:	0749      	lsls	r1, r1, #29
 8002c16:	430b      	orrs	r3, r1
 8002c18:	0f5a      	lsrs	r2, r3, #29
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	08db      	lsrs	r3, r3, #3
 8002c1e:	0752      	lsls	r2, r2, #29
 8002c20:	4313      	orrs	r3, r2
 8002c22:	e65d      	b.n	80028e0 <__aeabi_dsub+0x314>
 8002c24:	074b      	lsls	r3, r1, #29
 8002c26:	08ff      	lsrs	r7, r7, #3
 8002c28:	433b      	orrs	r3, r7
 8002c2a:	08cc      	lsrs	r4, r1, #3
 8002c2c:	e649      	b.n	80028c2 <__aeabi_dsub+0x2f6>
 8002c2e:	19dc      	adds	r4, r3, r7
 8002c30:	429c      	cmp	r4, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4461      	add	r1, ip
 8002c36:	4689      	mov	r9, r1
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4499      	add	r9, r3
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	d400      	bmi.n	8002c44 <__aeabi_dsub+0x678>
 8002c42:	e631      	b.n	80028a8 <__aeabi_dsub+0x2dc>
 8002c44:	464a      	mov	r2, r9
 8002c46:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <__aeabi_dsub+0x6d8>)
 8002c48:	401a      	ands	r2, r3
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4691      	mov	r9, r2
 8002c4e:	4698      	mov	r8, r3
 8002c50:	e62a      	b.n	80028a8 <__aeabi_dsub+0x2dc>
 8002c52:	0016      	movs	r6, r2
 8002c54:	4664      	mov	r4, ip
 8002c56:	3e20      	subs	r6, #32
 8002c58:	40f4      	lsrs	r4, r6
 8002c5a:	46a0      	mov	r8, r4
 8002c5c:	2a20      	cmp	r2, #32
 8002c5e:	d005      	beq.n	8002c6c <__aeabi_dsub+0x6a0>
 8002c60:	2640      	movs	r6, #64	; 0x40
 8002c62:	4664      	mov	r4, ip
 8002c64:	1ab2      	subs	r2, r6, r2
 8002c66:	4094      	lsls	r4, r2
 8002c68:	4323      	orrs	r3, r4
 8002c6a:	469a      	mov	sl, r3
 8002c6c:	4654      	mov	r4, sl
 8002c6e:	1e63      	subs	r3, r4, #1
 8002c70:	419c      	sbcs	r4, r3
 8002c72:	4643      	mov	r3, r8
 8002c74:	431c      	orrs	r4, r3
 8002c76:	e5db      	b.n	8002830 <__aeabi_dsub+0x264>
 8002c78:	0002      	movs	r2, r0
 8002c7a:	2400      	movs	r4, #0
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e548      	b.n	8002712 <__aeabi_dsub+0x146>
 8002c80:	19dc      	adds	r4, r3, r7
 8002c82:	42bc      	cmp	r4, r7
 8002c84:	41bf      	sbcs	r7, r7
 8002c86:	4461      	add	r1, ip
 8002c88:	4689      	mov	r9, r1
 8002c8a:	427f      	negs	r7, r7
 8002c8c:	44b9      	add	r9, r7
 8002c8e:	e738      	b.n	8002b02 <__aeabi_dsub+0x536>
 8002c90:	464b      	mov	r3, r9
 8002c92:	4323      	orrs	r3, r4
 8002c94:	d100      	bne.n	8002c98 <__aeabi_dsub+0x6cc>
 8002c96:	e69f      	b.n	80029d8 <__aeabi_dsub+0x40c>
 8002c98:	e606      	b.n	80028a8 <__aeabi_dsub+0x2dc>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	000007fe 	.word	0x000007fe
 8002ca0:	000007ff 	.word	0x000007ff
 8002ca4:	ff7fffff 	.word	0xff7fffff
 8002ca8:	08ff      	lsrs	r7, r7, #3
 8002caa:	074b      	lsls	r3, r1, #29
 8002cac:	433b      	orrs	r3, r7
 8002cae:	08cc      	lsrs	r4, r1, #3
 8002cb0:	e616      	b.n	80028e0 <__aeabi_dsub+0x314>
 8002cb2:	4662      	mov	r2, ip
 8002cb4:	08db      	lsrs	r3, r3, #3
 8002cb6:	0752      	lsls	r2, r2, #29
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	4662      	mov	r2, ip
 8002cbc:	08d4      	lsrs	r4, r2, #3
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	0312      	lsls	r2, r2, #12
 8002cc2:	4214      	tst	r4, r2
 8002cc4:	d007      	beq.n	8002cd6 <__aeabi_dsub+0x70a>
 8002cc6:	08c8      	lsrs	r0, r1, #3
 8002cc8:	4210      	tst	r0, r2
 8002cca:	d104      	bne.n	8002cd6 <__aeabi_dsub+0x70a>
 8002ccc:	465d      	mov	r5, fp
 8002cce:	0004      	movs	r4, r0
 8002cd0:	08fb      	lsrs	r3, r7, #3
 8002cd2:	0749      	lsls	r1, r1, #29
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	0f5a      	lsrs	r2, r3, #29
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	0752      	lsls	r2, r2, #29
 8002cdc:	08db      	lsrs	r3, r3, #3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	e5fe      	b.n	80028e0 <__aeabi_dsub+0x314>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	4a01      	ldr	r2, [pc, #4]	; (8002cec <__aeabi_dsub+0x720>)
 8002ce6:	001c      	movs	r4, r3
 8002ce8:	e513      	b.n	8002712 <__aeabi_dsub+0x146>
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	000007ff 	.word	0x000007ff

08002cf0 <__aeabi_dcmpun>:
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	0005      	movs	r5, r0
 8002cf4:	480c      	ldr	r0, [pc, #48]	; (8002d28 <__aeabi_dcmpun+0x38>)
 8002cf6:	031c      	lsls	r4, r3, #12
 8002cf8:	0016      	movs	r6, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	030a      	lsls	r2, r1, #12
 8002cfe:	0049      	lsls	r1, r1, #1
 8002d00:	0b12      	lsrs	r2, r2, #12
 8002d02:	0d49      	lsrs	r1, r1, #21
 8002d04:	0b24      	lsrs	r4, r4, #12
 8002d06:	0d5b      	lsrs	r3, r3, #21
 8002d08:	4281      	cmp	r1, r0
 8002d0a:	d008      	beq.n	8002d1e <__aeabi_dcmpun+0x2e>
 8002d0c:	4a06      	ldr	r2, [pc, #24]	; (8002d28 <__aeabi_dcmpun+0x38>)
 8002d0e:	2000      	movs	r0, #0
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d103      	bne.n	8002d1c <__aeabi_dcmpun+0x2c>
 8002d14:	0020      	movs	r0, r4
 8002d16:	4330      	orrs	r0, r6
 8002d18:	1e43      	subs	r3, r0, #1
 8002d1a:	4198      	sbcs	r0, r3
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
 8002d1e:	2001      	movs	r0, #1
 8002d20:	432a      	orrs	r2, r5
 8002d22:	d1fb      	bne.n	8002d1c <__aeabi_dcmpun+0x2c>
 8002d24:	e7f2      	b.n	8002d0c <__aeabi_dcmpun+0x1c>
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	000007ff 	.word	0x000007ff

08002d2c <__aeabi_d2iz>:
 8002d2c:	000a      	movs	r2, r1
 8002d2e:	b530      	push	{r4, r5, lr}
 8002d30:	4c13      	ldr	r4, [pc, #76]	; (8002d80 <__aeabi_d2iz+0x54>)
 8002d32:	0053      	lsls	r3, r2, #1
 8002d34:	0309      	lsls	r1, r1, #12
 8002d36:	0005      	movs	r5, r0
 8002d38:	0b09      	lsrs	r1, r1, #12
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	0d5b      	lsrs	r3, r3, #21
 8002d3e:	0fd2      	lsrs	r2, r2, #31
 8002d40:	42a3      	cmp	r3, r4
 8002d42:	dd04      	ble.n	8002d4e <__aeabi_d2iz+0x22>
 8002d44:	480f      	ldr	r0, [pc, #60]	; (8002d84 <__aeabi_d2iz+0x58>)
 8002d46:	4283      	cmp	r3, r0
 8002d48:	dd02      	ble.n	8002d50 <__aeabi_d2iz+0x24>
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <__aeabi_d2iz+0x5c>)
 8002d4c:	18d0      	adds	r0, r2, r3
 8002d4e:	bd30      	pop	{r4, r5, pc}
 8002d50:	2080      	movs	r0, #128	; 0x80
 8002d52:	0340      	lsls	r0, r0, #13
 8002d54:	4301      	orrs	r1, r0
 8002d56:	480d      	ldr	r0, [pc, #52]	; (8002d8c <__aeabi_d2iz+0x60>)
 8002d58:	1ac0      	subs	r0, r0, r3
 8002d5a:	281f      	cmp	r0, #31
 8002d5c:	dd08      	ble.n	8002d70 <__aeabi_d2iz+0x44>
 8002d5e:	480c      	ldr	r0, [pc, #48]	; (8002d90 <__aeabi_d2iz+0x64>)
 8002d60:	1ac3      	subs	r3, r0, r3
 8002d62:	40d9      	lsrs	r1, r3
 8002d64:	000b      	movs	r3, r1
 8002d66:	4258      	negs	r0, r3
 8002d68:	2a00      	cmp	r2, #0
 8002d6a:	d1f0      	bne.n	8002d4e <__aeabi_d2iz+0x22>
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	e7ee      	b.n	8002d4e <__aeabi_d2iz+0x22>
 8002d70:	4c08      	ldr	r4, [pc, #32]	; (8002d94 <__aeabi_d2iz+0x68>)
 8002d72:	40c5      	lsrs	r5, r0
 8002d74:	46a4      	mov	ip, r4
 8002d76:	4463      	add	r3, ip
 8002d78:	4099      	lsls	r1, r3
 8002d7a:	000b      	movs	r3, r1
 8002d7c:	432b      	orrs	r3, r5
 8002d7e:	e7f2      	b.n	8002d66 <__aeabi_d2iz+0x3a>
 8002d80:	000003fe 	.word	0x000003fe
 8002d84:	0000041d 	.word	0x0000041d
 8002d88:	7fffffff 	.word	0x7fffffff
 8002d8c:	00000433 	.word	0x00000433
 8002d90:	00000413 	.word	0x00000413
 8002d94:	fffffbed 	.word	0xfffffbed

08002d98 <__aeabi_i2d>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d016      	beq.n	8002dcc <__aeabi_i2d+0x34>
 8002d9e:	17c3      	asrs	r3, r0, #31
 8002da0:	18c5      	adds	r5, r0, r3
 8002da2:	405d      	eors	r5, r3
 8002da4:	0fc4      	lsrs	r4, r0, #31
 8002da6:	0028      	movs	r0, r5
 8002da8:	f000 f91c 	bl	8002fe4 <__clzsi2>
 8002dac:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <__aeabi_i2d+0x5c>)
 8002dae:	1a12      	subs	r2, r2, r0
 8002db0:	280a      	cmp	r0, #10
 8002db2:	dc16      	bgt.n	8002de2 <__aeabi_i2d+0x4a>
 8002db4:	0003      	movs	r3, r0
 8002db6:	002e      	movs	r6, r5
 8002db8:	3315      	adds	r3, #21
 8002dba:	409e      	lsls	r6, r3
 8002dbc:	230b      	movs	r3, #11
 8002dbe:	1a18      	subs	r0, r3, r0
 8002dc0:	40c5      	lsrs	r5, r0
 8002dc2:	0552      	lsls	r2, r2, #21
 8002dc4:	032d      	lsls	r5, r5, #12
 8002dc6:	0b2d      	lsrs	r5, r5, #12
 8002dc8:	0d53      	lsrs	r3, r2, #21
 8002dca:	e003      	b.n	8002dd4 <__aeabi_i2d+0x3c>
 8002dcc:	2400      	movs	r4, #0
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2500      	movs	r5, #0
 8002dd2:	2600      	movs	r6, #0
 8002dd4:	051b      	lsls	r3, r3, #20
 8002dd6:	432b      	orrs	r3, r5
 8002dd8:	07e4      	lsls	r4, r4, #31
 8002dda:	4323      	orrs	r3, r4
 8002ddc:	0030      	movs	r0, r6
 8002dde:	0019      	movs	r1, r3
 8002de0:	bd70      	pop	{r4, r5, r6, pc}
 8002de2:	380b      	subs	r0, #11
 8002de4:	4085      	lsls	r5, r0
 8002de6:	0552      	lsls	r2, r2, #21
 8002de8:	032d      	lsls	r5, r5, #12
 8002dea:	2600      	movs	r6, #0
 8002dec:	0b2d      	lsrs	r5, r5, #12
 8002dee:	0d53      	lsrs	r3, r2, #21
 8002df0:	e7f0      	b.n	8002dd4 <__aeabi_i2d+0x3c>
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	0000041e 	.word	0x0000041e

08002df8 <__aeabi_ui2d>:
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	1e04      	subs	r4, r0, #0
 8002dfc:	d010      	beq.n	8002e20 <__aeabi_ui2d+0x28>
 8002dfe:	f000 f8f1 	bl	8002fe4 <__clzsi2>
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <__aeabi_ui2d+0x48>)
 8002e04:	1a1b      	subs	r3, r3, r0
 8002e06:	280a      	cmp	r0, #10
 8002e08:	dc11      	bgt.n	8002e2e <__aeabi_ui2d+0x36>
 8002e0a:	220b      	movs	r2, #11
 8002e0c:	0021      	movs	r1, r4
 8002e0e:	1a12      	subs	r2, r2, r0
 8002e10:	40d1      	lsrs	r1, r2
 8002e12:	3015      	adds	r0, #21
 8002e14:	030a      	lsls	r2, r1, #12
 8002e16:	055b      	lsls	r3, r3, #21
 8002e18:	4084      	lsls	r4, r0
 8002e1a:	0b12      	lsrs	r2, r2, #12
 8002e1c:	0d5b      	lsrs	r3, r3, #21
 8002e1e:	e001      	b.n	8002e24 <__aeabi_ui2d+0x2c>
 8002e20:	2300      	movs	r3, #0
 8002e22:	2200      	movs	r2, #0
 8002e24:	051b      	lsls	r3, r3, #20
 8002e26:	4313      	orrs	r3, r2
 8002e28:	0020      	movs	r0, r4
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	bd10      	pop	{r4, pc}
 8002e2e:	0022      	movs	r2, r4
 8002e30:	380b      	subs	r0, #11
 8002e32:	4082      	lsls	r2, r0
 8002e34:	055b      	lsls	r3, r3, #21
 8002e36:	0312      	lsls	r2, r2, #12
 8002e38:	2400      	movs	r4, #0
 8002e3a:	0b12      	lsrs	r2, r2, #12
 8002e3c:	0d5b      	lsrs	r3, r3, #21
 8002e3e:	e7f1      	b.n	8002e24 <__aeabi_ui2d+0x2c>
 8002e40:	0000041e 	.word	0x0000041e

08002e44 <__aeabi_f2d>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	0043      	lsls	r3, r0, #1
 8002e48:	0246      	lsls	r6, r0, #9
 8002e4a:	0fc4      	lsrs	r4, r0, #31
 8002e4c:	20fe      	movs	r0, #254	; 0xfe
 8002e4e:	0e1b      	lsrs	r3, r3, #24
 8002e50:	1c59      	adds	r1, r3, #1
 8002e52:	0a75      	lsrs	r5, r6, #9
 8002e54:	4208      	tst	r0, r1
 8002e56:	d00c      	beq.n	8002e72 <__aeabi_f2d+0x2e>
 8002e58:	22e0      	movs	r2, #224	; 0xe0
 8002e5a:	0092      	lsls	r2, r2, #2
 8002e5c:	4694      	mov	ip, r2
 8002e5e:	076d      	lsls	r5, r5, #29
 8002e60:	0b36      	lsrs	r6, r6, #12
 8002e62:	4463      	add	r3, ip
 8002e64:	051b      	lsls	r3, r3, #20
 8002e66:	4333      	orrs	r3, r6
 8002e68:	07e4      	lsls	r4, r4, #31
 8002e6a:	4323      	orrs	r3, r4
 8002e6c:	0028      	movs	r0, r5
 8002e6e:	0019      	movs	r1, r3
 8002e70:	bd70      	pop	{r4, r5, r6, pc}
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d114      	bne.n	8002ea0 <__aeabi_f2d+0x5c>
 8002e76:	2d00      	cmp	r5, #0
 8002e78:	d01b      	beq.n	8002eb2 <__aeabi_f2d+0x6e>
 8002e7a:	0028      	movs	r0, r5
 8002e7c:	f000 f8b2 	bl	8002fe4 <__clzsi2>
 8002e80:	280a      	cmp	r0, #10
 8002e82:	dc1c      	bgt.n	8002ebe <__aeabi_f2d+0x7a>
 8002e84:	230b      	movs	r3, #11
 8002e86:	002e      	movs	r6, r5
 8002e88:	1a1b      	subs	r3, r3, r0
 8002e8a:	40de      	lsrs	r6, r3
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	3315      	adds	r3, #21
 8002e90:	409d      	lsls	r5, r3
 8002e92:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <__aeabi_f2d+0x88>)
 8002e94:	0336      	lsls	r6, r6, #12
 8002e96:	1a12      	subs	r2, r2, r0
 8002e98:	0552      	lsls	r2, r2, #21
 8002e9a:	0b36      	lsrs	r6, r6, #12
 8002e9c:	0d53      	lsrs	r3, r2, #21
 8002e9e:	e7e1      	b.n	8002e64 <__aeabi_f2d+0x20>
 8002ea0:	2d00      	cmp	r5, #0
 8002ea2:	d009      	beq.n	8002eb8 <__aeabi_f2d+0x74>
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	0b36      	lsrs	r6, r6, #12
 8002ea8:	0312      	lsls	r2, r2, #12
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <__aeabi_f2d+0x8c>)
 8002eac:	076d      	lsls	r5, r5, #29
 8002eae:	4316      	orrs	r6, r2
 8002eb0:	e7d8      	b.n	8002e64 <__aeabi_f2d+0x20>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	e7d5      	b.n	8002e64 <__aeabi_f2d+0x20>
 8002eb8:	2600      	movs	r6, #0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <__aeabi_f2d+0x8c>)
 8002ebc:	e7d2      	b.n	8002e64 <__aeabi_f2d+0x20>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	3b0b      	subs	r3, #11
 8002ec2:	409d      	lsls	r5, r3
 8002ec4:	002e      	movs	r6, r5
 8002ec6:	2500      	movs	r5, #0
 8002ec8:	e7e3      	b.n	8002e92 <__aeabi_f2d+0x4e>
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	00000389 	.word	0x00000389
 8002ed0:	000007ff 	.word	0x000007ff

08002ed4 <__aeabi_d2f>:
 8002ed4:	0002      	movs	r2, r0
 8002ed6:	004b      	lsls	r3, r1, #1
 8002ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eda:	0d5b      	lsrs	r3, r3, #21
 8002edc:	030c      	lsls	r4, r1, #12
 8002ede:	4e3d      	ldr	r6, [pc, #244]	; (8002fd4 <__aeabi_d2f+0x100>)
 8002ee0:	0a64      	lsrs	r4, r4, #9
 8002ee2:	0f40      	lsrs	r0, r0, #29
 8002ee4:	1c5f      	adds	r7, r3, #1
 8002ee6:	0fc9      	lsrs	r1, r1, #31
 8002ee8:	4304      	orrs	r4, r0
 8002eea:	00d5      	lsls	r5, r2, #3
 8002eec:	4237      	tst	r7, r6
 8002eee:	d00a      	beq.n	8002f06 <__aeabi_d2f+0x32>
 8002ef0:	4839      	ldr	r0, [pc, #228]	; (8002fd8 <__aeabi_d2f+0x104>)
 8002ef2:	181e      	adds	r6, r3, r0
 8002ef4:	2efe      	cmp	r6, #254	; 0xfe
 8002ef6:	dd16      	ble.n	8002f26 <__aeabi_d2f+0x52>
 8002ef8:	20ff      	movs	r0, #255	; 0xff
 8002efa:	2400      	movs	r4, #0
 8002efc:	05c0      	lsls	r0, r0, #23
 8002efe:	4320      	orrs	r0, r4
 8002f00:	07c9      	lsls	r1, r1, #31
 8002f02:	4308      	orrs	r0, r1
 8002f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <__aeabi_d2f+0x44>
 8002f0a:	432c      	orrs	r4, r5
 8002f0c:	d026      	beq.n	8002f5c <__aeabi_d2f+0x88>
 8002f0e:	2205      	movs	r2, #5
 8002f10:	0192      	lsls	r2, r2, #6
 8002f12:	0a54      	lsrs	r4, r2, #9
 8002f14:	b2d8      	uxtb	r0, r3
 8002f16:	e7f1      	b.n	8002efc <__aeabi_d2f+0x28>
 8002f18:	4325      	orrs	r5, r4
 8002f1a:	d0ed      	beq.n	8002ef8 <__aeabi_d2f+0x24>
 8002f1c:	2080      	movs	r0, #128	; 0x80
 8002f1e:	03c0      	lsls	r0, r0, #15
 8002f20:	4304      	orrs	r4, r0
 8002f22:	20ff      	movs	r0, #255	; 0xff
 8002f24:	e7ea      	b.n	8002efc <__aeabi_d2f+0x28>
 8002f26:	2e00      	cmp	r6, #0
 8002f28:	dd1b      	ble.n	8002f62 <__aeabi_d2f+0x8e>
 8002f2a:	0192      	lsls	r2, r2, #6
 8002f2c:	1e53      	subs	r3, r2, #1
 8002f2e:	419a      	sbcs	r2, r3
 8002f30:	00e4      	lsls	r4, r4, #3
 8002f32:	0f6d      	lsrs	r5, r5, #29
 8002f34:	4322      	orrs	r2, r4
 8002f36:	432a      	orrs	r2, r5
 8002f38:	0753      	lsls	r3, r2, #29
 8002f3a:	d048      	beq.n	8002fce <__aeabi_d2f+0xfa>
 8002f3c:	230f      	movs	r3, #15
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d000      	beq.n	8002f46 <__aeabi_d2f+0x72>
 8002f44:	3204      	adds	r2, #4
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	04db      	lsls	r3, r3, #19
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d03f      	beq.n	8002fce <__aeabi_d2f+0xfa>
 8002f4e:	1c70      	adds	r0, r6, #1
 8002f50:	2efe      	cmp	r6, #254	; 0xfe
 8002f52:	d0d1      	beq.n	8002ef8 <__aeabi_d2f+0x24>
 8002f54:	0192      	lsls	r2, r2, #6
 8002f56:	0a54      	lsrs	r4, r2, #9
 8002f58:	b2c0      	uxtb	r0, r0
 8002f5a:	e7cf      	b.n	8002efc <__aeabi_d2f+0x28>
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	2400      	movs	r4, #0
 8002f60:	e7cc      	b.n	8002efc <__aeabi_d2f+0x28>
 8002f62:	0032      	movs	r2, r6
 8002f64:	3217      	adds	r2, #23
 8002f66:	db22      	blt.n	8002fae <__aeabi_d2f+0xda>
 8002f68:	2080      	movs	r0, #128	; 0x80
 8002f6a:	0400      	lsls	r0, r0, #16
 8002f6c:	4320      	orrs	r0, r4
 8002f6e:	241e      	movs	r4, #30
 8002f70:	1ba4      	subs	r4, r4, r6
 8002f72:	2c1f      	cmp	r4, #31
 8002f74:	dd1d      	ble.n	8002fb2 <__aeabi_d2f+0xde>
 8002f76:	2202      	movs	r2, #2
 8002f78:	4252      	negs	r2, r2
 8002f7a:	1b96      	subs	r6, r2, r6
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	40f2      	lsrs	r2, r6
 8002f80:	0016      	movs	r6, r2
 8002f82:	2c20      	cmp	r4, #32
 8002f84:	d004      	beq.n	8002f90 <__aeabi_d2f+0xbc>
 8002f86:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <__aeabi_d2f+0x108>)
 8002f88:	4694      	mov	ip, r2
 8002f8a:	4463      	add	r3, ip
 8002f8c:	4098      	lsls	r0, r3
 8002f8e:	4305      	orrs	r5, r0
 8002f90:	002a      	movs	r2, r5
 8002f92:	1e53      	subs	r3, r2, #1
 8002f94:	419a      	sbcs	r2, r3
 8002f96:	4332      	orrs	r2, r6
 8002f98:	2600      	movs	r6, #0
 8002f9a:	0753      	lsls	r3, r2, #29
 8002f9c:	d1ce      	bne.n	8002f3c <__aeabi_d2f+0x68>
 8002f9e:	2480      	movs	r4, #128	; 0x80
 8002fa0:	0013      	movs	r3, r2
 8002fa2:	04e4      	lsls	r4, r4, #19
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	4023      	ands	r3, r4
 8002fa8:	4222      	tst	r2, r4
 8002faa:	d1d3      	bne.n	8002f54 <__aeabi_d2f+0x80>
 8002fac:	e7b0      	b.n	8002f10 <__aeabi_d2f+0x3c>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e7ad      	b.n	8002f0e <__aeabi_d2f+0x3a>
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <__aeabi_d2f+0x10c>)
 8002fb4:	4694      	mov	ip, r2
 8002fb6:	002a      	movs	r2, r5
 8002fb8:	40e2      	lsrs	r2, r4
 8002fba:	0014      	movs	r4, r2
 8002fbc:	002a      	movs	r2, r5
 8002fbe:	4463      	add	r3, ip
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	4098      	lsls	r0, r3
 8002fc4:	1e55      	subs	r5, r2, #1
 8002fc6:	41aa      	sbcs	r2, r5
 8002fc8:	4302      	orrs	r2, r0
 8002fca:	4322      	orrs	r2, r4
 8002fcc:	e7e4      	b.n	8002f98 <__aeabi_d2f+0xc4>
 8002fce:	0033      	movs	r3, r6
 8002fd0:	e79e      	b.n	8002f10 <__aeabi_d2f+0x3c>
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	000007fe 	.word	0x000007fe
 8002fd8:	fffffc80 	.word	0xfffffc80
 8002fdc:	fffffca2 	.word	0xfffffca2
 8002fe0:	fffffc82 	.word	0xfffffc82

08002fe4 <__clzsi2>:
 8002fe4:	211c      	movs	r1, #28
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	041b      	lsls	r3, r3, #16
 8002fea:	4298      	cmp	r0, r3
 8002fec:	d301      	bcc.n	8002ff2 <__clzsi2+0xe>
 8002fee:	0c00      	lsrs	r0, r0, #16
 8002ff0:	3910      	subs	r1, #16
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	4298      	cmp	r0, r3
 8002ff6:	d301      	bcc.n	8002ffc <__clzsi2+0x18>
 8002ff8:	0a00      	lsrs	r0, r0, #8
 8002ffa:	3908      	subs	r1, #8
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	4298      	cmp	r0, r3
 8003000:	d301      	bcc.n	8003006 <__clzsi2+0x22>
 8003002:	0900      	lsrs	r0, r0, #4
 8003004:	3904      	subs	r1, #4
 8003006:	a202      	add	r2, pc, #8	; (adr r2, 8003010 <__clzsi2+0x2c>)
 8003008:	5c10      	ldrb	r0, [r2, r0]
 800300a:	1840      	adds	r0, r0, r1
 800300c:	4770      	bx	lr
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	02020304 	.word	0x02020304
 8003014:	01010101 	.word	0x01010101
	...

08003020 <calcMA>:
			.size 		= 0,
			.lastEMA 	= 0
};

double calcMA(double previousAverage, unsigned int previousNumDays,
		double newStock) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60b8      	str	r0, [r7, #8]
 8003028:	60f9      	str	r1, [r7, #12]
 800302a:	607a      	str	r2, [r7, #4]

	double result = 0;
 800302c:	2200      	movs	r2, #0
 800302e:	2300      	movs	r3, #0
 8003030:	613a      	str	r2, [r7, #16]
 8003032:	617b      	str	r3, [r7, #20]
	result = previousNumDays * previousAverage + newStock;
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff fedf 	bl	8002df8 <__aeabi_ui2d>
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f7ff f859 	bl	80020f4 <__aeabi_dmul>
 8003042:	0002      	movs	r2, r0
 8003044:	000b      	movs	r3, r1
 8003046:	6a38      	ldr	r0, [r7, #32]
 8003048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800304a:	f7fe f915 	bl	8001278 <__aeabi_dadd>
 800304e:	0002      	movs	r2, r0
 8003050:	000b      	movs	r3, r1
 8003052:	613a      	str	r2, [r7, #16]
 8003054:	617b      	str	r3, [r7, #20]
	return result / (previousNumDays + 1.0);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fece 	bl	8002df8 <__aeabi_ui2d>
 800305c:	2200      	movs	r2, #0
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <calcMA+0x60>)
 8003060:	f7fe f90a 	bl	8001278 <__aeabi_dadd>
 8003064:	0002      	movs	r2, r0
 8003066:	000b      	movs	r3, r1
 8003068:	6938      	ldr	r0, [r7, #16]
 800306a:	6979      	ldr	r1, [r7, #20]
 800306c:	f7fe fc40 	bl	80018f0 <__aeabi_ddiv>
 8003070:	0002      	movs	r2, r0
 8003072:	000b      	movs	r3, r1

}
 8003074:	0010      	movs	r0, r2
 8003076:	0019      	movs	r1, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	b006      	add	sp, #24
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	3ff00000 	.word	0x3ff00000

08003084 <calcEMA>:

double calcEMA(double previousAverage, int timePeriod, double newStock) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	60b8      	str	r0, [r7, #8]
 800308c:	60f9      	str	r1, [r7, #12]
 800308e:	607a      	str	r2, [r7, #4]
	double result = 0, mult = 0;
 8003090:	2200      	movs	r2, #0
 8003092:	2300      	movs	r3, #0
 8003094:	61ba      	str	r2, [r7, #24]
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	2200      	movs	r2, #0
 800309a:	2300      	movs	r3, #0
 800309c:	613a      	str	r2, [r7, #16]
 800309e:	617b      	str	r3, [r7, #20]
	mult = 2.0 / (timePeriod + 1.0);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fe79 	bl	8002d98 <__aeabi_i2d>
 80030a6:	2200      	movs	r2, #0
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <calcEMA+0x80>)
 80030aa:	f7fe f8e5 	bl	8001278 <__aeabi_dadd>
 80030ae:	0002      	movs	r2, r0
 80030b0:	000b      	movs	r3, r1
 80030b2:	2000      	movs	r0, #0
 80030b4:	2180      	movs	r1, #128	; 0x80
 80030b6:	05c9      	lsls	r1, r1, #23
 80030b8:	f7fe fc1a 	bl	80018f0 <__aeabi_ddiv>
 80030bc:	0002      	movs	r2, r0
 80030be:	000b      	movs	r3, r1
 80030c0:	613a      	str	r2, [r7, #16]
 80030c2:	617b      	str	r3, [r7, #20]
	result = (newStock - previousAverage) * mult + previousAverage;
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030cc:	f7ff fa7e 	bl	80025cc <__aeabi_dsub>
 80030d0:	0002      	movs	r2, r0
 80030d2:	000b      	movs	r3, r1
 80030d4:	0010      	movs	r0, r2
 80030d6:	0019      	movs	r1, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f7ff f80a 	bl	80020f4 <__aeabi_dmul>
 80030e0:	0002      	movs	r2, r0
 80030e2:	000b      	movs	r3, r1
 80030e4:	68b8      	ldr	r0, [r7, #8]
 80030e6:	68f9      	ldr	r1, [r7, #12]
 80030e8:	f7fe f8c6 	bl	8001278 <__aeabi_dadd>
 80030ec:	0002      	movs	r2, r0
 80030ee:	000b      	movs	r3, r1
 80030f0:	61ba      	str	r2, [r7, #24]
 80030f2:	61fb      	str	r3, [r7, #28]
	return result;
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	69fb      	ldr	r3, [r7, #28]

}
 80030f8:	0010      	movs	r0, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b008      	add	sp, #32
 8003100:	bd80      	pop	{r7, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	3ff00000 	.word	0x3ff00000

08003108 <addStock>:

void addStock(double newStock, EMA_t*EMA){
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b087      	sub	sp, #28
 800310c:	af02      	add	r7, sp, #8
 800310e:	60b8      	str	r0, [r7, #8]
 8003110:	60f9      	str	r1, [r7, #12]
 8003112:	607a      	str	r2, [r7, #4]
	EMA->size++;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	605a      	str	r2, [r3, #4]
	if(EMA->size < EMA->timePreiod){
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	8812      	ldrh	r2, [r2, #0]
 8003126:	4293      	cmp	r3, r2
 8003128:	d212      	bcs.n	8003150 <addStock+0x48>
		EMA->lastEMA = calcMA(EMA->lastEMA, EMA->size -1 , newStock);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6898      	ldr	r0, [r3, #8]
 800312e:	68d9      	ldr	r1, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	1e5c      	subs	r4, r3, #1
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	9200      	str	r2, [sp, #0]
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	0022      	movs	r2, r4
 8003140:	f7ff ff6e 	bl	8003020 <calcMA>
 8003144:	0002      	movs	r2, r0
 8003146:	000b      	movs	r3, r1
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	608a      	str	r2, [r1, #8]
 800314c:	60cb      	str	r3, [r1, #12]
	}
	else{
		EMA->lastEMA = calcEMA(EMA->lastEMA, EMA->timePreiod, newStock);
	}
}
 800314e:	e011      	b.n	8003174 <addStock+0x6c>
		EMA->lastEMA = calcEMA(EMA->lastEMA, EMA->timePreiod, newStock);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6898      	ldr	r0, [r3, #8]
 8003154:	68d9      	ldr	r1, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	001c      	movs	r4, r3
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	9200      	str	r2, [sp, #0]
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	0022      	movs	r2, r4
 8003166:	f7ff ff8d 	bl	8003084 <calcEMA>
 800316a:	0002      	movs	r2, r0
 800316c:	000b      	movs	r3, r1
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	608a      	str	r2, [r1, #8]
 8003172:	60cb      	str	r3, [r1, #12]
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b005      	add	sp, #20
 800317a:	bd90      	pop	{r4, r7, pc}

0800317c <getAverage>:

double getAverage(void) {
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
	switch (sensorConfig.ema) {
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <getAverage+0x4c>)
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d818      	bhi.n	80031ba <getAverage+0x3e>
 8003188:	009a      	lsls	r2, r3, #2
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <getAverage+0x50>)
 800318c:	18d3      	adds	r3, r2, r3
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	469f      	mov	pc, r3
	case EMA5:
		return SensorEMA5.lastEMA;
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <getAverage+0x54>)
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	e012      	b.n	80031c0 <getAverage+0x44>
		break;
	case EMA10:
		return SensorEMA10.lastEMA;
 800319a:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <getAverage+0x58>)
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	e00e      	b.n	80031c0 <getAverage+0x44>
		break;
	case EMA15:
		return SensorEMA15.lastEMA;
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <getAverage+0x5c>)
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	e00a      	b.n	80031c0 <getAverage+0x44>
		break;
	case EMA30:
		return SensorEMA30.lastEMA;
 80031aa:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <getAverage+0x60>)
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	e006      	b.n	80031c0 <getAverage+0x44>
		break;
	case EMA50:
		return SensorEMA50.lastEMA;
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <getAverage+0x64>)
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	e002      	b.n	80031c0 <getAverage+0x44>
		break;
	default:
		return SensorEMA5.lastEMA;
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <getAverage+0x54>)
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	68db      	ldr	r3, [r3, #12]
		break;
	}
}
 80031c0:	0010      	movs	r0, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	200003c0 	.word	0x200003c0
 80031cc:	08009e40 	.word	0x08009e40
 80031d0:	20000000 	.word	0x20000000
 80031d4:	20000010 	.word	0x20000010
 80031d8:	20000020 	.word	0x20000020
 80031dc:	20000030 	.word	0x20000030
 80031e0:	20000040 	.word	0x20000040

080031e4 <Madgwick_init>:
    float roll;
    float pitch;
    float yaw;
    char anglesComputed;

void Madgwick_init(float sampleFrequency) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    beta = betaDef;
 80031ec:	4b11      	ldr	r3, [pc, #68]	; (8003234 <Madgwick_init+0x50>)
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <Madgwick_init+0x54>)
 80031f0:	601a      	str	r2, [r3, #0]
	q0 = 1.0f;
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <Madgwick_init+0x58>)
 80031f4:	22fe      	movs	r2, #254	; 0xfe
 80031f6:	0592      	lsls	r2, r2, #22
 80031f8:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <Madgwick_init+0x5c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 8003200:	4b10      	ldr	r3, [pc, #64]	; (8003244 <Madgwick_init+0x60>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 8003206:	4b10      	ldr	r3, [pc, #64]	; (8003248 <Madgwick_init+0x64>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
	invSampleFreq = 1.0f / sampleFreqDef;
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <Madgwick_init+0x68>)
 800320e:	22ec      	movs	r2, #236	; 0xec
 8003210:	0592      	lsls	r2, r2, #22
 8003212:	601a      	str	r2, [r3, #0]
	anglesComputed = 0;
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <Madgwick_init+0x6c>)
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]

    invSampleFreq = 1.0f / sampleFrequency;
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	20fe      	movs	r0, #254	; 0xfe
 800321e:	0580      	lsls	r0, r0, #22
 8003220:	f7fd fb36 	bl	8000890 <__aeabi_fdiv>
 8003224:	1c03      	adds	r3, r0, #0
 8003226:	1c1a      	adds	r2, r3, #0
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <Madgwick_init+0x68>)
 800322a:	601a      	str	r2, [r3, #0]
    }
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	b002      	add	sp, #8
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000254 	.word	0x20000254
 8003238:	3dcccccd 	.word	0x3dcccccd
 800323c:	20000258 	.word	0x20000258
 8003240:	2000025c 	.word	0x2000025c
 8003244:	20000260 	.word	0x20000260
 8003248:	20000264 	.word	0x20000264
 800324c:	20000268 	.word	0x20000268
 8003250:	20000278 	.word	0x20000278

08003254 <Madgwick_updateIMU>:
}

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Madgwick_updateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b09b      	sub	sp, #108	; 0x6c
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 8003262:	49fa      	ldr	r1, [pc, #1000]	; (800364c <Madgwick_updateIMU+0x3f8>)
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7fd fcdb 	bl	8000c20 <__aeabi_fmul>
 800326a:	1c03      	adds	r3, r0, #0
 800326c:	60fb      	str	r3, [r7, #12]
	gy *= 0.0174533f;
 800326e:	49f7      	ldr	r1, [pc, #988]	; (800364c <Madgwick_updateIMU+0x3f8>)
 8003270:	68b8      	ldr	r0, [r7, #8]
 8003272:	f7fd fcd5 	bl	8000c20 <__aeabi_fmul>
 8003276:	1c03      	adds	r3, r0, #0
 8003278:	60bb      	str	r3, [r7, #8]
	gz *= 0.0174533f;
 800327a:	49f4      	ldr	r1, [pc, #976]	; (800364c <Madgwick_updateIMU+0x3f8>)
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fd fccf 	bl	8000c20 <__aeabi_fmul>
 8003282:	1c03      	adds	r3, r0, #0
 8003284:	607b      	str	r3, [r7, #4]

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003286:	4bf2      	ldr	r3, [pc, #968]	; (8003650 <Madgwick_updateIMU+0x3fc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	0612      	lsls	r2, r2, #24
 800328e:	4053      	eors	r3, r2
 8003290:	68f9      	ldr	r1, [r7, #12]
 8003292:	1c18      	adds	r0, r3, #0
 8003294:	f7fd fcc4 	bl	8000c20 <__aeabi_fmul>
 8003298:	1c03      	adds	r3, r0, #0
 800329a:	1c1c      	adds	r4, r3, #0
 800329c:	4bed      	ldr	r3, [pc, #948]	; (8003654 <Madgwick_updateIMU+0x400>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	1c18      	adds	r0, r3, #0
 80032a4:	f7fd fcbc 	bl	8000c20 <__aeabi_fmul>
 80032a8:	1c03      	adds	r3, r0, #0
 80032aa:	1c19      	adds	r1, r3, #0
 80032ac:	1c20      	adds	r0, r4, #0
 80032ae:	f7fd fddd 	bl	8000e6c <__aeabi_fsub>
 80032b2:	1c03      	adds	r3, r0, #0
 80032b4:	1c1c      	adds	r4, r3, #0
 80032b6:	4be8      	ldr	r3, [pc, #928]	; (8003658 <Madgwick_updateIMU+0x404>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	1c18      	adds	r0, r3, #0
 80032be:	f7fd fcaf 	bl	8000c20 <__aeabi_fmul>
 80032c2:	1c03      	adds	r3, r0, #0
 80032c4:	1c19      	adds	r1, r3, #0
 80032c6:	1c20      	adds	r0, r4, #0
 80032c8:	f7fd fdd0 	bl	8000e6c <__aeabi_fsub>
 80032cc:	1c03      	adds	r3, r0, #0
 80032ce:	21fc      	movs	r1, #252	; 0xfc
 80032d0:	0589      	lsls	r1, r1, #22
 80032d2:	1c18      	adds	r0, r3, #0
 80032d4:	f7fd fca4 	bl	8000c20 <__aeabi_fmul>
 80032d8:	1c03      	adds	r3, r0, #0
 80032da:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80032dc:	4bdf      	ldr	r3, [pc, #892]	; (800365c <Madgwick_updateIMU+0x408>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68f9      	ldr	r1, [r7, #12]
 80032e2:	1c18      	adds	r0, r3, #0
 80032e4:	f7fd fc9c 	bl	8000c20 <__aeabi_fmul>
 80032e8:	1c03      	adds	r3, r0, #0
 80032ea:	1c1c      	adds	r4, r3, #0
 80032ec:	4bd9      	ldr	r3, [pc, #868]	; (8003654 <Madgwick_updateIMU+0x400>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	1c18      	adds	r0, r3, #0
 80032f4:	f7fd fc94 	bl	8000c20 <__aeabi_fmul>
 80032f8:	1c03      	adds	r3, r0, #0
 80032fa:	1c19      	adds	r1, r3, #0
 80032fc:	1c20      	adds	r0, r4, #0
 80032fe:	f7fd f929 	bl	8000554 <__aeabi_fadd>
 8003302:	1c03      	adds	r3, r0, #0
 8003304:	1c1c      	adds	r4, r3, #0
 8003306:	4bd4      	ldr	r3, [pc, #848]	; (8003658 <Madgwick_updateIMU+0x404>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	1c18      	adds	r0, r3, #0
 800330e:	f7fd fc87 	bl	8000c20 <__aeabi_fmul>
 8003312:	1c03      	adds	r3, r0, #0
 8003314:	1c19      	adds	r1, r3, #0
 8003316:	1c20      	adds	r0, r4, #0
 8003318:	f7fd fda8 	bl	8000e6c <__aeabi_fsub>
 800331c:	1c03      	adds	r3, r0, #0
 800331e:	21fc      	movs	r1, #252	; 0xfc
 8003320:	0589      	lsls	r1, r1, #22
 8003322:	1c18      	adds	r0, r3, #0
 8003324:	f7fd fc7c 	bl	8000c20 <__aeabi_fmul>
 8003328:	1c03      	adds	r3, r0, #0
 800332a:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800332c:	4bcb      	ldr	r3, [pc, #812]	; (800365c <Madgwick_updateIMU+0x408>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	1c18      	adds	r0, r3, #0
 8003334:	f7fd fc74 	bl	8000c20 <__aeabi_fmul>
 8003338:	1c03      	adds	r3, r0, #0
 800333a:	1c1c      	adds	r4, r3, #0
 800333c:	4bc4      	ldr	r3, [pc, #784]	; (8003650 <Madgwick_updateIMU+0x3fc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	1c18      	adds	r0, r3, #0
 8003344:	f7fd fc6c 	bl	8000c20 <__aeabi_fmul>
 8003348:	1c03      	adds	r3, r0, #0
 800334a:	1c19      	adds	r1, r3, #0
 800334c:	1c20      	adds	r0, r4, #0
 800334e:	f7fd fd8d 	bl	8000e6c <__aeabi_fsub>
 8003352:	1c03      	adds	r3, r0, #0
 8003354:	1c1c      	adds	r4, r3, #0
 8003356:	4bc0      	ldr	r3, [pc, #768]	; (8003658 <Madgwick_updateIMU+0x404>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68f9      	ldr	r1, [r7, #12]
 800335c:	1c18      	adds	r0, r3, #0
 800335e:	f7fd fc5f 	bl	8000c20 <__aeabi_fmul>
 8003362:	1c03      	adds	r3, r0, #0
 8003364:	1c19      	adds	r1, r3, #0
 8003366:	1c20      	adds	r0, r4, #0
 8003368:	f7fd f8f4 	bl	8000554 <__aeabi_fadd>
 800336c:	1c03      	adds	r3, r0, #0
 800336e:	21fc      	movs	r1, #252	; 0xfc
 8003370:	0589      	lsls	r1, r1, #22
 8003372:	1c18      	adds	r0, r3, #0
 8003374:	f7fd fc54 	bl	8000c20 <__aeabi_fmul>
 8003378:	1c03      	adds	r3, r0, #0
 800337a:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800337c:	4bb7      	ldr	r3, [pc, #732]	; (800365c <Madgwick_updateIMU+0x408>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	1c18      	adds	r0, r3, #0
 8003384:	f7fd fc4c 	bl	8000c20 <__aeabi_fmul>
 8003388:	1c03      	adds	r3, r0, #0
 800338a:	1c1c      	adds	r4, r3, #0
 800338c:	4bb0      	ldr	r3, [pc, #704]	; (8003650 <Madgwick_updateIMU+0x3fc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	1c18      	adds	r0, r3, #0
 8003394:	f7fd fc44 	bl	8000c20 <__aeabi_fmul>
 8003398:	1c03      	adds	r3, r0, #0
 800339a:	1c19      	adds	r1, r3, #0
 800339c:	1c20      	adds	r0, r4, #0
 800339e:	f7fd f8d9 	bl	8000554 <__aeabi_fadd>
 80033a2:	1c03      	adds	r3, r0, #0
 80033a4:	1c1c      	adds	r4, r3, #0
 80033a6:	4bab      	ldr	r3, [pc, #684]	; (8003654 <Madgwick_updateIMU+0x400>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	1c18      	adds	r0, r3, #0
 80033ae:	f7fd fc37 	bl	8000c20 <__aeabi_fmul>
 80033b2:	1c03      	adds	r3, r0, #0
 80033b4:	1c19      	adds	r1, r3, #0
 80033b6:	1c20      	adds	r0, r4, #0
 80033b8:	f7fd fd58 	bl	8000e6c <__aeabi_fsub>
 80033bc:	1c03      	adds	r3, r0, #0
 80033be:	21fc      	movs	r1, #252	; 0xfc
 80033c0:	0589      	lsls	r1, r1, #22
 80033c2:	1c18      	adds	r0, r3, #0
 80033c4:	f7fd fc2c 	bl	8000c20 <__aeabi_fmul>
 80033c8:	1c03      	adds	r3, r0, #0
 80033ca:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80033cc:	2100      	movs	r1, #0
 80033ce:	6838      	ldr	r0, [r7, #0]
 80033d0:	f7fd f874 	bl	80004bc <__aeabi_fcmpeq>
 80033d4:	1e03      	subs	r3, r0, #0
 80033d6:	d00c      	beq.n	80033f2 <Madgwick_updateIMU+0x19e>
 80033d8:	2100      	movs	r1, #0
 80033da:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80033dc:	f7fd f86e 	bl	80004bc <__aeabi_fcmpeq>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d006      	beq.n	80033f2 <Madgwick_updateIMU+0x19e>
 80033e4:	2100      	movs	r1, #0
 80033e6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80033e8:	f7fd f868 	bl	80004bc <__aeabi_fcmpeq>
 80033ec:	1e03      	subs	r3, r0, #0
 80033ee:	d000      	beq.n	80033f2 <Madgwick_updateIMU+0x19e>
 80033f0:	e235      	b.n	800385e <Madgwick_updateIMU+0x60a>

		// Normalise accelerometer measurement
		recipNorm = Madgwick_invSqrt(ax * ax + ay * ay + az * az);
 80033f2:	6839      	ldr	r1, [r7, #0]
 80033f4:	6838      	ldr	r0, [r7, #0]
 80033f6:	f7fd fc13 	bl	8000c20 <__aeabi_fmul>
 80033fa:	1c03      	adds	r3, r0, #0
 80033fc:	1c1c      	adds	r4, r3, #0
 80033fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003400:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003402:	f7fd fc0d 	bl	8000c20 <__aeabi_fmul>
 8003406:	1c03      	adds	r3, r0, #0
 8003408:	1c19      	adds	r1, r3, #0
 800340a:	1c20      	adds	r0, r4, #0
 800340c:	f7fd f8a2 	bl	8000554 <__aeabi_fadd>
 8003410:	1c03      	adds	r3, r0, #0
 8003412:	1c1c      	adds	r4, r3, #0
 8003414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003416:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003418:	f7fd fc02 	bl	8000c20 <__aeabi_fmul>
 800341c:	1c03      	adds	r3, r0, #0
 800341e:	1c19      	adds	r1, r3, #0
 8003420:	1c20      	adds	r0, r4, #0
 8003422:	f7fd f897 	bl	8000554 <__aeabi_fadd>
 8003426:	1c03      	adds	r3, r0, #0
 8003428:	1c18      	adds	r0, r3, #0
 800342a:	f000 fad9 	bl	80039e0 <Madgwick_invSqrt>
 800342e:	1c03      	adds	r3, r0, #0
 8003430:	657b      	str	r3, [r7, #84]	; 0x54
		ax *= recipNorm;
 8003432:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003434:	6838      	ldr	r0, [r7, #0]
 8003436:	f7fd fbf3 	bl	8000c20 <__aeabi_fmul>
 800343a:	1c03      	adds	r3, r0, #0
 800343c:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 800343e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003440:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003442:	f7fd fbed 	bl	8000c20 <__aeabi_fmul>
 8003446:	1c03      	adds	r3, r0, #0
 8003448:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;
 800344a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800344c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800344e:	f7fd fbe7 	bl	8000c20 <__aeabi_fmul>
 8003452:	1c03      	adds	r3, r0, #0
 8003454:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8003456:	4b81      	ldr	r3, [pc, #516]	; (800365c <Madgwick_updateIMU+0x408>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	1c19      	adds	r1, r3, #0
 800345c:	1c18      	adds	r0, r3, #0
 800345e:	f7fd f879 	bl	8000554 <__aeabi_fadd>
 8003462:	1c03      	adds	r3, r0, #0
 8003464:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 8003466:	4b7a      	ldr	r3, [pc, #488]	; (8003650 <Madgwick_updateIMU+0x3fc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1c19      	adds	r1, r3, #0
 800346c:	1c18      	adds	r0, r3, #0
 800346e:	f7fd f871 	bl	8000554 <__aeabi_fadd>
 8003472:	1c03      	adds	r3, r0, #0
 8003474:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 8003476:	4b77      	ldr	r3, [pc, #476]	; (8003654 <Madgwick_updateIMU+0x400>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	1c19      	adds	r1, r3, #0
 800347c:	1c18      	adds	r0, r3, #0
 800347e:	f7fd f869 	bl	8000554 <__aeabi_fadd>
 8003482:	1c03      	adds	r3, r0, #0
 8003484:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 8003486:	4b74      	ldr	r3, [pc, #464]	; (8003658 <Madgwick_updateIMU+0x404>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	1c19      	adds	r1, r3, #0
 800348c:	1c18      	adds	r0, r3, #0
 800348e:	f7fd f861 	bl	8000554 <__aeabi_fadd>
 8003492:	1c03      	adds	r3, r0, #0
 8003494:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 8003496:	4b71      	ldr	r3, [pc, #452]	; (800365c <Madgwick_updateIMU+0x408>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2181      	movs	r1, #129	; 0x81
 800349c:	05c9      	lsls	r1, r1, #23
 800349e:	1c18      	adds	r0, r3, #0
 80034a0:	f7fd fbbe 	bl	8000c20 <__aeabi_fmul>
 80034a4:	1c03      	adds	r3, r0, #0
 80034a6:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 80034a8:	4b69      	ldr	r3, [pc, #420]	; (8003650 <Madgwick_updateIMU+0x3fc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2181      	movs	r1, #129	; 0x81
 80034ae:	05c9      	lsls	r1, r1, #23
 80034b0:	1c18      	adds	r0, r3, #0
 80034b2:	f7fd fbb5 	bl	8000c20 <__aeabi_fmul>
 80034b6:	1c03      	adds	r3, r0, #0
 80034b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 80034ba:	4b66      	ldr	r3, [pc, #408]	; (8003654 <Madgwick_updateIMU+0x400>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2181      	movs	r1, #129	; 0x81
 80034c0:	05c9      	lsls	r1, r1, #23
 80034c2:	1c18      	adds	r0, r3, #0
 80034c4:	f7fd fbac 	bl	8000c20 <__aeabi_fmul>
 80034c8:	1c03      	adds	r3, r0, #0
 80034ca:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 80034cc:	4b60      	ldr	r3, [pc, #384]	; (8003650 <Madgwick_updateIMU+0x3fc>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2182      	movs	r1, #130	; 0x82
 80034d2:	05c9      	lsls	r1, r1, #23
 80034d4:	1c18      	adds	r0, r3, #0
 80034d6:	f7fd fba3 	bl	8000c20 <__aeabi_fmul>
 80034da:	1c03      	adds	r3, r0, #0
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 80034de:	4b5d      	ldr	r3, [pc, #372]	; (8003654 <Madgwick_updateIMU+0x400>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2182      	movs	r1, #130	; 0x82
 80034e4:	05c9      	lsls	r1, r1, #23
 80034e6:	1c18      	adds	r0, r3, #0
 80034e8:	f7fd fb9a 	bl	8000c20 <__aeabi_fmul>
 80034ec:	1c03      	adds	r3, r0, #0
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
		q0q0 = q0 * q0;
 80034f0:	4b5a      	ldr	r3, [pc, #360]	; (800365c <Madgwick_updateIMU+0x408>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4b59      	ldr	r3, [pc, #356]	; (800365c <Madgwick_updateIMU+0x408>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	1c19      	adds	r1, r3, #0
 80034fa:	1c10      	adds	r0, r2, #0
 80034fc:	f7fd fb90 	bl	8000c20 <__aeabi_fmul>
 8003500:	1c03      	adds	r3, r0, #0
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 8003504:	4b52      	ldr	r3, [pc, #328]	; (8003650 <Madgwick_updateIMU+0x3fc>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b51      	ldr	r3, [pc, #324]	; (8003650 <Madgwick_updateIMU+0x3fc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	1c19      	adds	r1, r3, #0
 800350e:	1c10      	adds	r0, r2, #0
 8003510:	f7fd fb86 	bl	8000c20 <__aeabi_fmul>
 8003514:	1c03      	adds	r3, r0, #0
 8003516:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 8003518:	4b4e      	ldr	r3, [pc, #312]	; (8003654 <Madgwick_updateIMU+0x400>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b4d      	ldr	r3, [pc, #308]	; (8003654 <Madgwick_updateIMU+0x400>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	1c19      	adds	r1, r3, #0
 8003522:	1c10      	adds	r0, r2, #0
 8003524:	f7fd fb7c 	bl	8000c20 <__aeabi_fmul>
 8003528:	1c03      	adds	r3, r0, #0
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 800352c:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <Madgwick_updateIMU+0x404>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b49      	ldr	r3, [pc, #292]	; (8003658 <Madgwick_updateIMU+0x404>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	1c19      	adds	r1, r3, #0
 8003536:	1c10      	adds	r0, r2, #0
 8003538:	f7fd fb72 	bl	8000c20 <__aeabi_fmul>
 800353c:	1c03      	adds	r3, r0, #0
 800353e:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003542:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003544:	f7fd fb6c 	bl	8000c20 <__aeabi_fmul>
 8003548:	1c03      	adds	r3, r0, #0
 800354a:	1c1c      	adds	r4, r3, #0
 800354c:	6839      	ldr	r1, [r7, #0]
 800354e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003550:	f7fd fb66 	bl	8000c20 <__aeabi_fmul>
 8003554:	1c03      	adds	r3, r0, #0
 8003556:	1c19      	adds	r1, r3, #0
 8003558:	1c20      	adds	r0, r4, #0
 800355a:	f7fc fffb 	bl	8000554 <__aeabi_fadd>
 800355e:	1c03      	adds	r3, r0, #0
 8003560:	1c1c      	adds	r4, r3, #0
 8003562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003564:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003566:	f7fd fb5b 	bl	8000c20 <__aeabi_fmul>
 800356a:	1c03      	adds	r3, r0, #0
 800356c:	1c19      	adds	r1, r3, #0
 800356e:	1c20      	adds	r0, r4, #0
 8003570:	f7fc fff0 	bl	8000554 <__aeabi_fadd>
 8003574:	1c03      	adds	r3, r0, #0
 8003576:	1c1c      	adds	r4, r3, #0
 8003578:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800357a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800357c:	f7fd fb50 	bl	8000c20 <__aeabi_fmul>
 8003580:	1c03      	adds	r3, r0, #0
 8003582:	1c19      	adds	r1, r3, #0
 8003584:	1c20      	adds	r0, r4, #0
 8003586:	f7fd fc71 	bl	8000e6c <__aeabi_fsub>
 800358a:	1c03      	adds	r3, r0, #0
 800358c:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800358e:	6a39      	ldr	r1, [r7, #32]
 8003590:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003592:	f7fd fb45 	bl	8000c20 <__aeabi_fmul>
 8003596:	1c03      	adds	r3, r0, #0
 8003598:	1c1c      	adds	r4, r3, #0
 800359a:	6839      	ldr	r1, [r7, #0]
 800359c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800359e:	f7fd fb3f 	bl	8000c20 <__aeabi_fmul>
 80035a2:	1c03      	adds	r3, r0, #0
 80035a4:	1c19      	adds	r1, r3, #0
 80035a6:	1c20      	adds	r0, r4, #0
 80035a8:	f7fd fc60 	bl	8000e6c <__aeabi_fsub>
 80035ac:	1c03      	adds	r3, r0, #0
 80035ae:	1c1c      	adds	r4, r3, #0
 80035b0:	2181      	movs	r1, #129	; 0x81
 80035b2:	05c9      	lsls	r1, r1, #23
 80035b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035b6:	f7fd fb33 	bl	8000c20 <__aeabi_fmul>
 80035ba:	1c03      	adds	r3, r0, #0
 80035bc:	1c1a      	adds	r2, r3, #0
 80035be:	4b24      	ldr	r3, [pc, #144]	; (8003650 <Madgwick_updateIMU+0x3fc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	1c19      	adds	r1, r3, #0
 80035c4:	1c10      	adds	r0, r2, #0
 80035c6:	f7fd fb2b 	bl	8000c20 <__aeabi_fmul>
 80035ca:	1c03      	adds	r3, r0, #0
 80035cc:	1c19      	adds	r1, r3, #0
 80035ce:	1c20      	adds	r0, r4, #0
 80035d0:	f7fc ffc0 	bl	8000554 <__aeabi_fadd>
 80035d4:	1c03      	adds	r3, r0, #0
 80035d6:	1c1c      	adds	r4, r3, #0
 80035d8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80035da:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035dc:	f7fd fb20 	bl	8000c20 <__aeabi_fmul>
 80035e0:	1c03      	adds	r3, r0, #0
 80035e2:	1c19      	adds	r1, r3, #0
 80035e4:	1c20      	adds	r0, r4, #0
 80035e6:	f7fd fc41 	bl	8000e6c <__aeabi_fsub>
 80035ea:	1c03      	adds	r3, r0, #0
 80035ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035ee:	1c18      	adds	r0, r3, #0
 80035f0:	f7fd fc3c 	bl	8000e6c <__aeabi_fsub>
 80035f4:	1c03      	adds	r3, r0, #0
 80035f6:	1c1c      	adds	r4, r3, #0
 80035f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035fc:	f7fd fb10 	bl	8000c20 <__aeabi_fmul>
 8003600:	1c03      	adds	r3, r0, #0
 8003602:	1c19      	adds	r1, r3, #0
 8003604:	1c20      	adds	r0, r4, #0
 8003606:	f7fc ffa5 	bl	8000554 <__aeabi_fadd>
 800360a:	1c03      	adds	r3, r0, #0
 800360c:	1c1c      	adds	r4, r3, #0
 800360e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003610:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003612:	f7fd fb05 	bl	8000c20 <__aeabi_fmul>
 8003616:	1c03      	adds	r3, r0, #0
 8003618:	1c19      	adds	r1, r3, #0
 800361a:	1c20      	adds	r0, r4, #0
 800361c:	f7fc ff9a 	bl	8000554 <__aeabi_fadd>
 8003620:	1c03      	adds	r3, r0, #0
 8003622:	1c1c      	adds	r4, r3, #0
 8003624:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003626:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003628:	f7fd fafa 	bl	8000c20 <__aeabi_fmul>
 800362c:	1c03      	adds	r3, r0, #0
 800362e:	1c19      	adds	r1, r3, #0
 8003630:	1c20      	adds	r0, r4, #0
 8003632:	f7fc ff8f 	bl	8000554 <__aeabi_fadd>
 8003636:	1c03      	adds	r3, r0, #0
 8003638:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800363a:	2181      	movs	r1, #129	; 0x81
 800363c:	05c9      	lsls	r1, r1, #23
 800363e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003640:	f7fd faee 	bl	8000c20 <__aeabi_fmul>
 8003644:	1c03      	adds	r3, r0, #0
 8003646:	1c1a      	adds	r2, r3, #0
 8003648:	e00a      	b.n	8003660 <Madgwick_updateIMU+0x40c>
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	3c8efa39 	.word	0x3c8efa39
 8003650:	2000025c 	.word	0x2000025c
 8003654:	20000260 	.word	0x20000260
 8003658:	20000264 	.word	0x20000264
 800365c:	20000258 	.word	0x20000258
 8003660:	4bd8      	ldr	r3, [pc, #864]	; (80039c4 <Madgwick_updateIMU+0x770>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1c19      	adds	r1, r3, #0
 8003666:	1c10      	adds	r0, r2, #0
 8003668:	f7fd fada 	bl	8000c20 <__aeabi_fmul>
 800366c:	1c03      	adds	r3, r0, #0
 800366e:	1c1c      	adds	r4, r3, #0
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003674:	f7fd fad4 	bl	8000c20 <__aeabi_fmul>
 8003678:	1c03      	adds	r3, r0, #0
 800367a:	1c19      	adds	r1, r3, #0
 800367c:	1c20      	adds	r0, r4, #0
 800367e:	f7fc ff69 	bl	8000554 <__aeabi_fadd>
 8003682:	1c03      	adds	r3, r0, #0
 8003684:	1c1c      	adds	r4, r3, #0
 8003686:	6a39      	ldr	r1, [r7, #32]
 8003688:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800368a:	f7fd fac9 	bl	8000c20 <__aeabi_fmul>
 800368e:	1c03      	adds	r3, r0, #0
 8003690:	1c19      	adds	r1, r3, #0
 8003692:	1c20      	adds	r0, r4, #0
 8003694:	f7fc ff5e 	bl	8000554 <__aeabi_fadd>
 8003698:	1c03      	adds	r3, r0, #0
 800369a:	1c1c      	adds	r4, r3, #0
 800369c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800369e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80036a0:	f7fd fabe 	bl	8000c20 <__aeabi_fmul>
 80036a4:	1c03      	adds	r3, r0, #0
 80036a6:	1c19      	adds	r1, r3, #0
 80036a8:	1c20      	adds	r0, r4, #0
 80036aa:	f7fd fbdf 	bl	8000e6c <__aeabi_fsub>
 80036ae:	1c03      	adds	r3, r0, #0
 80036b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036b2:	1c18      	adds	r0, r3, #0
 80036b4:	f7fd fbda 	bl	8000e6c <__aeabi_fsub>
 80036b8:	1c03      	adds	r3, r0, #0
 80036ba:	1c1c      	adds	r4, r3, #0
 80036bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036c0:	f7fd faae 	bl	8000c20 <__aeabi_fmul>
 80036c4:	1c03      	adds	r3, r0, #0
 80036c6:	1c19      	adds	r1, r3, #0
 80036c8:	1c20      	adds	r0, r4, #0
 80036ca:	f7fc ff43 	bl	8000554 <__aeabi_fadd>
 80036ce:	1c03      	adds	r3, r0, #0
 80036d0:	1c1c      	adds	r4, r3, #0
 80036d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036d6:	f7fd faa3 	bl	8000c20 <__aeabi_fmul>
 80036da:	1c03      	adds	r3, r0, #0
 80036dc:	1c19      	adds	r1, r3, #0
 80036de:	1c20      	adds	r0, r4, #0
 80036e0:	f7fc ff38 	bl	8000554 <__aeabi_fadd>
 80036e4:	1c03      	adds	r3, r0, #0
 80036e6:	1c1c      	adds	r4, r3, #0
 80036e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036ec:	f7fd fa98 	bl	8000c20 <__aeabi_fmul>
 80036f0:	1c03      	adds	r3, r0, #0
 80036f2:	1c19      	adds	r1, r3, #0
 80036f4:	1c20      	adds	r0, r4, #0
 80036f6:	f7fc ff2d 	bl	8000554 <__aeabi_fadd>
 80036fa:	1c03      	adds	r3, r0, #0
 80036fc:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80036fe:	2181      	movs	r1, #129	; 0x81
 8003700:	05c9      	lsls	r1, r1, #23
 8003702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003704:	f7fd fa8c 	bl	8000c20 <__aeabi_fmul>
 8003708:	1c03      	adds	r3, r0, #0
 800370a:	1c1a      	adds	r2, r3, #0
 800370c:	4bae      	ldr	r3, [pc, #696]	; (80039c8 <Madgwick_updateIMU+0x774>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	1c19      	adds	r1, r3, #0
 8003712:	1c10      	adds	r0, r2, #0
 8003714:	f7fd fa84 	bl	8000c20 <__aeabi_fmul>
 8003718:	1c03      	adds	r3, r0, #0
 800371a:	1c1c      	adds	r4, r3, #0
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003720:	f7fd fa7e 	bl	8000c20 <__aeabi_fmul>
 8003724:	1c03      	adds	r3, r0, #0
 8003726:	1c19      	adds	r1, r3, #0
 8003728:	1c20      	adds	r0, r4, #0
 800372a:	f7fd fb9f 	bl	8000e6c <__aeabi_fsub>
 800372e:	1c03      	adds	r3, r0, #0
 8003730:	1c1c      	adds	r4, r3, #0
 8003732:	2181      	movs	r1, #129	; 0x81
 8003734:	05c9      	lsls	r1, r1, #23
 8003736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003738:	f7fd fa72 	bl	8000c20 <__aeabi_fmul>
 800373c:	1c03      	adds	r3, r0, #0
 800373e:	1c1a      	adds	r2, r3, #0
 8003740:	4ba1      	ldr	r3, [pc, #644]	; (80039c8 <Madgwick_updateIMU+0x774>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	1c19      	adds	r1, r3, #0
 8003746:	1c10      	adds	r0, r2, #0
 8003748:	f7fd fa6a 	bl	8000c20 <__aeabi_fmul>
 800374c:	1c03      	adds	r3, r0, #0
 800374e:	1c19      	adds	r1, r3, #0
 8003750:	1c20      	adds	r0, r4, #0
 8003752:	f7fc feff 	bl	8000554 <__aeabi_fadd>
 8003756:	1c03      	adds	r3, r0, #0
 8003758:	1c1c      	adds	r4, r3, #0
 800375a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800375c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800375e:	f7fd fa5f 	bl	8000c20 <__aeabi_fmul>
 8003762:	1c03      	adds	r3, r0, #0
 8003764:	1c19      	adds	r1, r3, #0
 8003766:	1c20      	adds	r0, r4, #0
 8003768:	f7fd fb80 	bl	8000e6c <__aeabi_fsub>
 800376c:	1c03      	adds	r3, r0, #0
 800376e:	613b      	str	r3, [r7, #16]
		recipNorm = Madgwick_invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8003770:	69f9      	ldr	r1, [r7, #28]
 8003772:	69f8      	ldr	r0, [r7, #28]
 8003774:	f7fd fa54 	bl	8000c20 <__aeabi_fmul>
 8003778:	1c03      	adds	r3, r0, #0
 800377a:	1c1c      	adds	r4, r3, #0
 800377c:	69b9      	ldr	r1, [r7, #24]
 800377e:	69b8      	ldr	r0, [r7, #24]
 8003780:	f7fd fa4e 	bl	8000c20 <__aeabi_fmul>
 8003784:	1c03      	adds	r3, r0, #0
 8003786:	1c19      	adds	r1, r3, #0
 8003788:	1c20      	adds	r0, r4, #0
 800378a:	f7fc fee3 	bl	8000554 <__aeabi_fadd>
 800378e:	1c03      	adds	r3, r0, #0
 8003790:	1c1c      	adds	r4, r3, #0
 8003792:	6979      	ldr	r1, [r7, #20]
 8003794:	6978      	ldr	r0, [r7, #20]
 8003796:	f7fd fa43 	bl	8000c20 <__aeabi_fmul>
 800379a:	1c03      	adds	r3, r0, #0
 800379c:	1c19      	adds	r1, r3, #0
 800379e:	1c20      	adds	r0, r4, #0
 80037a0:	f7fc fed8 	bl	8000554 <__aeabi_fadd>
 80037a4:	1c03      	adds	r3, r0, #0
 80037a6:	1c1c      	adds	r4, r3, #0
 80037a8:	6939      	ldr	r1, [r7, #16]
 80037aa:	6938      	ldr	r0, [r7, #16]
 80037ac:	f7fd fa38 	bl	8000c20 <__aeabi_fmul>
 80037b0:	1c03      	adds	r3, r0, #0
 80037b2:	1c19      	adds	r1, r3, #0
 80037b4:	1c20      	adds	r0, r4, #0
 80037b6:	f7fc fecd 	bl	8000554 <__aeabi_fadd>
 80037ba:	1c03      	adds	r3, r0, #0
 80037bc:	1c18      	adds	r0, r3, #0
 80037be:	f000 f90f 	bl	80039e0 <Madgwick_invSqrt>
 80037c2:	1c03      	adds	r3, r0, #0
 80037c4:	657b      	str	r3, [r7, #84]	; 0x54
		s0 *= recipNorm;
 80037c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037c8:	69f8      	ldr	r0, [r7, #28]
 80037ca:	f7fd fa29 	bl	8000c20 <__aeabi_fmul>
 80037ce:	1c03      	adds	r3, r0, #0
 80037d0:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 80037d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037d4:	69b8      	ldr	r0, [r7, #24]
 80037d6:	f7fd fa23 	bl	8000c20 <__aeabi_fmul>
 80037da:	1c03      	adds	r3, r0, #0
 80037dc:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 80037de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037e0:	6978      	ldr	r0, [r7, #20]
 80037e2:	f7fd fa1d 	bl	8000c20 <__aeabi_fmul>
 80037e6:	1c03      	adds	r3, r0, #0
 80037e8:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 80037ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037ec:	6938      	ldr	r0, [r7, #16]
 80037ee:	f7fd fa17 	bl	8000c20 <__aeabi_fmul>
 80037f2:	1c03      	adds	r3, r0, #0
 80037f4:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 80037f6:	4b75      	ldr	r3, [pc, #468]	; (80039cc <Madgwick_updateIMU+0x778>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69f9      	ldr	r1, [r7, #28]
 80037fc:	1c18      	adds	r0, r3, #0
 80037fe:	f7fd fa0f 	bl	8000c20 <__aeabi_fmul>
 8003802:	1c03      	adds	r3, r0, #0
 8003804:	1c19      	adds	r1, r3, #0
 8003806:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003808:	f7fd fb30 	bl	8000e6c <__aeabi_fsub>
 800380c:	1c03      	adds	r3, r0, #0
 800380e:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8003810:	4b6e      	ldr	r3, [pc, #440]	; (80039cc <Madgwick_updateIMU+0x778>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69b9      	ldr	r1, [r7, #24]
 8003816:	1c18      	adds	r0, r3, #0
 8003818:	f7fd fa02 	bl	8000c20 <__aeabi_fmul>
 800381c:	1c03      	adds	r3, r0, #0
 800381e:	1c19      	adds	r1, r3, #0
 8003820:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003822:	f7fd fb23 	bl	8000e6c <__aeabi_fsub>
 8003826:	1c03      	adds	r3, r0, #0
 8003828:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 800382a:	4b68      	ldr	r3, [pc, #416]	; (80039cc <Madgwick_updateIMU+0x778>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6979      	ldr	r1, [r7, #20]
 8003830:	1c18      	adds	r0, r3, #0
 8003832:	f7fd f9f5 	bl	8000c20 <__aeabi_fmul>
 8003836:	1c03      	adds	r3, r0, #0
 8003838:	1c19      	adds	r1, r3, #0
 800383a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800383c:	f7fd fb16 	bl	8000e6c <__aeabi_fsub>
 8003840:	1c03      	adds	r3, r0, #0
 8003842:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 8003844:	4b61      	ldr	r3, [pc, #388]	; (80039cc <Madgwick_updateIMU+0x778>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6939      	ldr	r1, [r7, #16]
 800384a:	1c18      	adds	r0, r3, #0
 800384c:	f7fd f9e8 	bl	8000c20 <__aeabi_fmul>
 8003850:	1c03      	adds	r3, r0, #0
 8003852:	1c19      	adds	r1, r3, #0
 8003854:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003856:	f7fd fb09 	bl	8000e6c <__aeabi_fsub>
 800385a:	1c03      	adds	r3, r0, #0
 800385c:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * invSampleFreq;
 800385e:	4b5c      	ldr	r3, [pc, #368]	; (80039d0 <Madgwick_updateIMU+0x77c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003864:	1c18      	adds	r0, r3, #0
 8003866:	f7fd f9db 	bl	8000c20 <__aeabi_fmul>
 800386a:	1c03      	adds	r3, r0, #0
 800386c:	1c1a      	adds	r2, r3, #0
 800386e:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <Madgwick_updateIMU+0x780>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	1c19      	adds	r1, r3, #0
 8003874:	1c10      	adds	r0, r2, #0
 8003876:	f7fc fe6d 	bl	8000554 <__aeabi_fadd>
 800387a:	1c03      	adds	r3, r0, #0
 800387c:	1c1a      	adds	r2, r3, #0
 800387e:	4b55      	ldr	r3, [pc, #340]	; (80039d4 <Madgwick_updateIMU+0x780>)
 8003880:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * invSampleFreq;
 8003882:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <Madgwick_updateIMU+0x77c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003888:	1c18      	adds	r0, r3, #0
 800388a:	f7fd f9c9 	bl	8000c20 <__aeabi_fmul>
 800388e:	1c03      	adds	r3, r0, #0
 8003890:	1c1a      	adds	r2, r3, #0
 8003892:	4b51      	ldr	r3, [pc, #324]	; (80039d8 <Madgwick_updateIMU+0x784>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	1c19      	adds	r1, r3, #0
 8003898:	1c10      	adds	r0, r2, #0
 800389a:	f7fc fe5b 	bl	8000554 <__aeabi_fadd>
 800389e:	1c03      	adds	r3, r0, #0
 80038a0:	1c1a      	adds	r2, r3, #0
 80038a2:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <Madgwick_updateIMU+0x784>)
 80038a4:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * invSampleFreq;
 80038a6:	4b4a      	ldr	r3, [pc, #296]	; (80039d0 <Madgwick_updateIMU+0x77c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80038ac:	1c18      	adds	r0, r3, #0
 80038ae:	f7fd f9b7 	bl	8000c20 <__aeabi_fmul>
 80038b2:	1c03      	adds	r3, r0, #0
 80038b4:	1c1a      	adds	r2, r3, #0
 80038b6:	4b43      	ldr	r3, [pc, #268]	; (80039c4 <Madgwick_updateIMU+0x770>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	1c19      	adds	r1, r3, #0
 80038bc:	1c10      	adds	r0, r2, #0
 80038be:	f7fc fe49 	bl	8000554 <__aeabi_fadd>
 80038c2:	1c03      	adds	r3, r0, #0
 80038c4:	1c1a      	adds	r2, r3, #0
 80038c6:	4b3f      	ldr	r3, [pc, #252]	; (80039c4 <Madgwick_updateIMU+0x770>)
 80038c8:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * invSampleFreq;
 80038ca:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <Madgwick_updateIMU+0x77c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038d0:	1c18      	adds	r0, r3, #0
 80038d2:	f7fd f9a5 	bl	8000c20 <__aeabi_fmul>
 80038d6:	1c03      	adds	r3, r0, #0
 80038d8:	1c1a      	adds	r2, r3, #0
 80038da:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <Madgwick_updateIMU+0x774>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	1c19      	adds	r1, r3, #0
 80038e0:	1c10      	adds	r0, r2, #0
 80038e2:	f7fc fe37 	bl	8000554 <__aeabi_fadd>
 80038e6:	1c03      	adds	r3, r0, #0
 80038e8:	1c1a      	adds	r2, r3, #0
 80038ea:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <Madgwick_updateIMU+0x774>)
 80038ec:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = Madgwick_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <Madgwick_updateIMU+0x780>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <Madgwick_updateIMU+0x780>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	1c19      	adds	r1, r3, #0
 80038f8:	1c10      	adds	r0, r2, #0
 80038fa:	f7fd f991 	bl	8000c20 <__aeabi_fmul>
 80038fe:	1c03      	adds	r3, r0, #0
 8003900:	1c1c      	adds	r4, r3, #0
 8003902:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <Madgwick_updateIMU+0x784>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <Madgwick_updateIMU+0x784>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	1c19      	adds	r1, r3, #0
 800390c:	1c10      	adds	r0, r2, #0
 800390e:	f7fd f987 	bl	8000c20 <__aeabi_fmul>
 8003912:	1c03      	adds	r3, r0, #0
 8003914:	1c19      	adds	r1, r3, #0
 8003916:	1c20      	adds	r0, r4, #0
 8003918:	f7fc fe1c 	bl	8000554 <__aeabi_fadd>
 800391c:	1c03      	adds	r3, r0, #0
 800391e:	1c1c      	adds	r4, r3, #0
 8003920:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <Madgwick_updateIMU+0x770>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <Madgwick_updateIMU+0x770>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	1c19      	adds	r1, r3, #0
 800392a:	1c10      	adds	r0, r2, #0
 800392c:	f7fd f978 	bl	8000c20 <__aeabi_fmul>
 8003930:	1c03      	adds	r3, r0, #0
 8003932:	1c19      	adds	r1, r3, #0
 8003934:	1c20      	adds	r0, r4, #0
 8003936:	f7fc fe0d 	bl	8000554 <__aeabi_fadd>
 800393a:	1c03      	adds	r3, r0, #0
 800393c:	1c1c      	adds	r4, r3, #0
 800393e:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <Madgwick_updateIMU+0x774>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <Madgwick_updateIMU+0x774>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	1c19      	adds	r1, r3, #0
 8003948:	1c10      	adds	r0, r2, #0
 800394a:	f7fd f969 	bl	8000c20 <__aeabi_fmul>
 800394e:	1c03      	adds	r3, r0, #0
 8003950:	1c19      	adds	r1, r3, #0
 8003952:	1c20      	adds	r0, r4, #0
 8003954:	f7fc fdfe 	bl	8000554 <__aeabi_fadd>
 8003958:	1c03      	adds	r3, r0, #0
 800395a:	1c18      	adds	r0, r3, #0
 800395c:	f000 f840 	bl	80039e0 <Madgwick_invSqrt>
 8003960:	1c03      	adds	r3, r0, #0
 8003962:	657b      	str	r3, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <Madgwick_updateIMU+0x780>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800396a:	1c18      	adds	r0, r3, #0
 800396c:	f7fd f958 	bl	8000c20 <__aeabi_fmul>
 8003970:	1c03      	adds	r3, r0, #0
 8003972:	1c1a      	adds	r2, r3, #0
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <Madgwick_updateIMU+0x780>)
 8003976:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8003978:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <Madgwick_updateIMU+0x784>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800397e:	1c18      	adds	r0, r3, #0
 8003980:	f7fd f94e 	bl	8000c20 <__aeabi_fmul>
 8003984:	1c03      	adds	r3, r0, #0
 8003986:	1c1a      	adds	r2, r3, #0
 8003988:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <Madgwick_updateIMU+0x784>)
 800398a:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <Madgwick_updateIMU+0x770>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003992:	1c18      	adds	r0, r3, #0
 8003994:	f7fd f944 	bl	8000c20 <__aeabi_fmul>
 8003998:	1c03      	adds	r3, r0, #0
 800399a:	1c1a      	adds	r2, r3, #0
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <Madgwick_updateIMU+0x770>)
 800399e:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <Madgwick_updateIMU+0x774>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039a6:	1c18      	adds	r0, r3, #0
 80039a8:	f7fd f93a 	bl	8000c20 <__aeabi_fmul>
 80039ac:	1c03      	adds	r3, r0, #0
 80039ae:	1c1a      	adds	r2, r3, #0
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <Madgwick_updateIMU+0x774>)
 80039b2:	601a      	str	r2, [r3, #0]
	anglesComputed = 0;
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <Madgwick_updateIMU+0x788>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b01b      	add	sp, #108	; 0x6c
 80039c0:	bd90      	pop	{r4, r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20000260 	.word	0x20000260
 80039c8:	20000264 	.word	0x20000264
 80039cc:	20000254 	.word	0x20000254
 80039d0:	20000268 	.word	0x20000268
 80039d4:	20000258 	.word	0x20000258
 80039d8:	2000025c 	.word	0x2000025c
 80039dc:	20000278 	.word	0x20000278

080039e0 <Madgwick_invSqrt>:

static float Madgwick_invSqrt(float x) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 80039e8:	21fc      	movs	r1, #252	; 0xfc
 80039ea:	0589      	lsls	r1, r1, #22
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7fd f917 	bl	8000c20 <__aeabi_fmul>
 80039f2:	1c03      	adds	r3, r0, #0
 80039f4:	617b      	str	r3, [r7, #20]
	float y = x;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80039fa:	2310      	movs	r3, #16
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	105b      	asrs	r3, r3, #1
 8003a06:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <Madgwick_invSqrt+0xac>)
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003a0c:	230c      	movs	r3, #12
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	6979      	ldr	r1, [r7, #20]
 8003a18:	1c18      	adds	r0, r3, #0
 8003a1a:	f7fd f901 	bl	8000c20 <__aeabi_fmul>
 8003a1e:	1c03      	adds	r3, r0, #0
 8003a20:	1c1a      	adds	r2, r3, #0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1c19      	adds	r1, r3, #0
 8003a26:	1c10      	adds	r0, r2, #0
 8003a28:	f7fd f8fa 	bl	8000c20 <__aeabi_fmul>
 8003a2c:	1c03      	adds	r3, r0, #0
 8003a2e:	1c19      	adds	r1, r3, #0
 8003a30:	20ff      	movs	r0, #255	; 0xff
 8003a32:	0580      	lsls	r0, r0, #22
 8003a34:	f7fd fa1a 	bl	8000e6c <__aeabi_fsub>
 8003a38:	1c03      	adds	r3, r0, #0
 8003a3a:	1c1a      	adds	r2, r3, #0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1c19      	adds	r1, r3, #0
 8003a40:	1c10      	adds	r0, r2, #0
 8003a42:	f7fd f8ed 	bl	8000c20 <__aeabi_fmul>
 8003a46:	1c03      	adds	r3, r0, #0
 8003a48:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6979      	ldr	r1, [r7, #20]
 8003a4e:	1c18      	adds	r0, r3, #0
 8003a50:	f7fd f8e6 	bl	8000c20 <__aeabi_fmul>
 8003a54:	1c03      	adds	r3, r0, #0
 8003a56:	1c1a      	adds	r2, r3, #0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1c19      	adds	r1, r3, #0
 8003a5c:	1c10      	adds	r0, r2, #0
 8003a5e:	f7fd f8df 	bl	8000c20 <__aeabi_fmul>
 8003a62:	1c03      	adds	r3, r0, #0
 8003a64:	1c19      	adds	r1, r3, #0
 8003a66:	20ff      	movs	r0, #255	; 0xff
 8003a68:	0580      	lsls	r0, r0, #22
 8003a6a:	f7fd f9ff 	bl	8000e6c <__aeabi_fsub>
 8003a6e:	1c03      	adds	r3, r0, #0
 8003a70:	1c1a      	adds	r2, r3, #0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1c19      	adds	r1, r3, #0
 8003a76:	1c10      	adds	r0, r2, #0
 8003a78:	f7fd f8d2 	bl	8000c20 <__aeabi_fmul>
 8003a7c:	1c03      	adds	r3, r0, #0
 8003a7e:	613b      	str	r3, [r7, #16]
	return y;
 8003a80:	693b      	ldr	r3, [r7, #16]
}
 8003a82:	1c18      	adds	r0, r3, #0
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b006      	add	sp, #24
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	5f3759df 	.word	0x5f3759df

08003a90 <Madgwick_computeAngles>:

void Madgwick_computeAngles()
{
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8003a94:	4b52      	ldr	r3, [pc, #328]	; (8003be0 <Madgwick_computeAngles+0x150>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b52      	ldr	r3, [pc, #328]	; (8003be4 <Madgwick_computeAngles+0x154>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	1c19      	adds	r1, r3, #0
 8003a9e:	1c10      	adds	r0, r2, #0
 8003aa0:	f7fd f8be 	bl	8000c20 <__aeabi_fmul>
 8003aa4:	1c03      	adds	r3, r0, #0
 8003aa6:	1c1c      	adds	r4, r3, #0
 8003aa8:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <Madgwick_computeAngles+0x158>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <Madgwick_computeAngles+0x15c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	1c19      	adds	r1, r3, #0
 8003ab2:	1c10      	adds	r0, r2, #0
 8003ab4:	f7fd f8b4 	bl	8000c20 <__aeabi_fmul>
 8003ab8:	1c03      	adds	r3, r0, #0
 8003aba:	1c19      	adds	r1, r3, #0
 8003abc:	1c20      	adds	r0, r4, #0
 8003abe:	f7fc fd49 	bl	8000554 <__aeabi_fadd>
 8003ac2:	1c03      	adds	r3, r0, #0
 8003ac4:	1c1c      	adds	r4, r3, #0
 8003ac6:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <Madgwick_computeAngles+0x154>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	4b46      	ldr	r3, [pc, #280]	; (8003be4 <Madgwick_computeAngles+0x154>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	1c19      	adds	r1, r3, #0
 8003ad0:	1c10      	adds	r0, r2, #0
 8003ad2:	f7fd f8a5 	bl	8000c20 <__aeabi_fmul>
 8003ad6:	1c03      	adds	r3, r0, #0
 8003ad8:	1c19      	adds	r1, r3, #0
 8003ada:	20fc      	movs	r0, #252	; 0xfc
 8003adc:	0580      	lsls	r0, r0, #22
 8003ade:	f7fd f9c5 	bl	8000e6c <__aeabi_fsub>
 8003ae2:	1c03      	adds	r3, r0, #0
 8003ae4:	1c1d      	adds	r5, r3, #0
 8003ae6:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <Madgwick_computeAngles+0x158>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b3f      	ldr	r3, [pc, #252]	; (8003be8 <Madgwick_computeAngles+0x158>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	1c19      	adds	r1, r3, #0
 8003af0:	1c10      	adds	r0, r2, #0
 8003af2:	f7fd f895 	bl	8000c20 <__aeabi_fmul>
 8003af6:	1c03      	adds	r3, r0, #0
 8003af8:	1c19      	adds	r1, r3, #0
 8003afa:	1c28      	adds	r0, r5, #0
 8003afc:	f7fd f9b6 	bl	8000e6c <__aeabi_fsub>
 8003b00:	1c03      	adds	r3, r0, #0
 8003b02:	1c19      	adds	r1, r3, #0
 8003b04:	1c20      	adds	r0, r4, #0
 8003b06:	f005 fd55 	bl	80095b4 <atan2f>
 8003b0a:	1c02      	adds	r2, r0, #0
 8003b0c:	4b38      	ldr	r3, [pc, #224]	; (8003bf0 <Madgwick_computeAngles+0x160>)
 8003b0e:	601a      	str	r2, [r3, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8003b10:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <Madgwick_computeAngles+0x154>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b35      	ldr	r3, [pc, #212]	; (8003bec <Madgwick_computeAngles+0x15c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	1c19      	adds	r1, r3, #0
 8003b1a:	1c10      	adds	r0, r2, #0
 8003b1c:	f7fd f880 	bl	8000c20 <__aeabi_fmul>
 8003b20:	1c03      	adds	r3, r0, #0
 8003b22:	1c1c      	adds	r4, r3, #0
 8003b24:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <Madgwick_computeAngles+0x150>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <Madgwick_computeAngles+0x158>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	1c19      	adds	r1, r3, #0
 8003b2e:	1c10      	adds	r0, r2, #0
 8003b30:	f7fd f876 	bl	8000c20 <__aeabi_fmul>
 8003b34:	1c03      	adds	r3, r0, #0
 8003b36:	1c19      	adds	r1, r3, #0
 8003b38:	1c20      	adds	r0, r4, #0
 8003b3a:	f7fd f997 	bl	8000e6c <__aeabi_fsub>
 8003b3e:	1c03      	adds	r3, r0, #0
 8003b40:	21c0      	movs	r1, #192	; 0xc0
 8003b42:	0609      	lsls	r1, r1, #24
 8003b44:	1c18      	adds	r0, r3, #0
 8003b46:	f7fd f86b 	bl	8000c20 <__aeabi_fmul>
 8003b4a:	1c03      	adds	r3, r0, #0
 8003b4c:	1c18      	adds	r0, r3, #0
 8003b4e:	f005 fd11 	bl	8009574 <asinf>
 8003b52:	1c02      	adds	r2, r0, #0
 8003b54:	4b27      	ldr	r3, [pc, #156]	; (8003bf4 <Madgwick_computeAngles+0x164>)
 8003b56:	601a      	str	r2, [r3, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 8003b58:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <Madgwick_computeAngles+0x154>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <Madgwick_computeAngles+0x158>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	1c19      	adds	r1, r3, #0
 8003b62:	1c10      	adds	r0, r2, #0
 8003b64:	f7fd f85c 	bl	8000c20 <__aeabi_fmul>
 8003b68:	1c03      	adds	r3, r0, #0
 8003b6a:	1c1c      	adds	r4, r3, #0
 8003b6c:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <Madgwick_computeAngles+0x150>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <Madgwick_computeAngles+0x15c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	1c19      	adds	r1, r3, #0
 8003b76:	1c10      	adds	r0, r2, #0
 8003b78:	f7fd f852 	bl	8000c20 <__aeabi_fmul>
 8003b7c:	1c03      	adds	r3, r0, #0
 8003b7e:	1c19      	adds	r1, r3, #0
 8003b80:	1c20      	adds	r0, r4, #0
 8003b82:	f7fc fce7 	bl	8000554 <__aeabi_fadd>
 8003b86:	1c03      	adds	r3, r0, #0
 8003b88:	1c1c      	adds	r4, r3, #0
 8003b8a:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <Madgwick_computeAngles+0x158>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <Madgwick_computeAngles+0x158>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	1c19      	adds	r1, r3, #0
 8003b94:	1c10      	adds	r0, r2, #0
 8003b96:	f7fd f843 	bl	8000c20 <__aeabi_fmul>
 8003b9a:	1c03      	adds	r3, r0, #0
 8003b9c:	1c19      	adds	r1, r3, #0
 8003b9e:	20fc      	movs	r0, #252	; 0xfc
 8003ba0:	0580      	lsls	r0, r0, #22
 8003ba2:	f7fd f963 	bl	8000e6c <__aeabi_fsub>
 8003ba6:	1c03      	adds	r3, r0, #0
 8003ba8:	1c1d      	adds	r5, r3, #0
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <Madgwick_computeAngles+0x15c>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <Madgwick_computeAngles+0x15c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	1c19      	adds	r1, r3, #0
 8003bb4:	1c10      	adds	r0, r2, #0
 8003bb6:	f7fd f833 	bl	8000c20 <__aeabi_fmul>
 8003bba:	1c03      	adds	r3, r0, #0
 8003bbc:	1c19      	adds	r1, r3, #0
 8003bbe:	1c28      	adds	r0, r5, #0
 8003bc0:	f7fd f954 	bl	8000e6c <__aeabi_fsub>
 8003bc4:	1c03      	adds	r3, r0, #0
 8003bc6:	1c19      	adds	r1, r3, #0
 8003bc8:	1c20      	adds	r0, r4, #0
 8003bca:	f005 fcf3 	bl	80095b4 <atan2f>
 8003bce:	1c02      	adds	r2, r0, #0
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <Madgwick_computeAngles+0x168>)
 8003bd2:	601a      	str	r2, [r3, #0]
	anglesComputed = 1;
 8003bd4:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <Madgwick_computeAngles+0x16c>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bdb0      	pop	{r4, r5, r7, pc}
 8003be0:	20000258 	.word	0x20000258
 8003be4:	2000025c 	.word	0x2000025c
 8003be8:	20000260 	.word	0x20000260
 8003bec:	20000264 	.word	0x20000264
 8003bf0:	2000026c 	.word	0x2000026c
 8003bf4:	20000270 	.word	0x20000270
 8003bf8:	20000274 	.word	0x20000274
 8003bfc:	20000278 	.word	0x20000278

08003c00 <Madgwick_getRoll>:

    float Madgwick_getRoll() {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
        if (!anglesComputed) Madgwick_computeAngles();
 8003c04:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <Madgwick_getRoll+0x24>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <Madgwick_getRoll+0x10>
 8003c0c:	f7ff ff40 	bl	8003a90 <Madgwick_computeAngles>
        return roll * 57.29578f;
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <Madgwick_getRoll+0x28>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4905      	ldr	r1, [pc, #20]	; (8003c2c <Madgwick_getRoll+0x2c>)
 8003c16:	1c18      	adds	r0, r3, #0
 8003c18:	f7fd f802 	bl	8000c20 <__aeabi_fmul>
 8003c1c:	1c03      	adds	r3, r0, #0
    }
 8003c1e:	1c18      	adds	r0, r3, #0
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000278 	.word	0x20000278
 8003c28:	2000026c 	.word	0x2000026c
 8003c2c:	42652ee1 	.word	0x42652ee1

08003c30 <Madgwick_getPitch>:
    float Madgwick_getPitch() {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
        if (!anglesComputed) Madgwick_computeAngles();
 8003c34:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <Madgwick_getPitch+0x24>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <Madgwick_getPitch+0x10>
 8003c3c:	f7ff ff28 	bl	8003a90 <Madgwick_computeAngles>
        return pitch * 57.29578f;
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <Madgwick_getPitch+0x28>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4905      	ldr	r1, [pc, #20]	; (8003c5c <Madgwick_getPitch+0x2c>)
 8003c46:	1c18      	adds	r0, r3, #0
 8003c48:	f7fc ffea 	bl	8000c20 <__aeabi_fmul>
 8003c4c:	1c03      	adds	r3, r0, #0
    }
 8003c4e:	1c18      	adds	r0, r3, #0
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20000278 	.word	0x20000278
 8003c58:	20000270 	.word	0x20000270
 8003c5c:	42652ee1 	.word	0x42652ee1

08003c60 <Madgwick_getYaw>:
    float Madgwick_getYaw() {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
//    	static float value = 0.05;
//    	value += value;
        if (!anglesComputed) Madgwick_computeAngles();
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <Madgwick_getYaw+0x30>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <Madgwick_getYaw+0x10>
 8003c6c:	f7ff ff10 	bl	8003a90 <Madgwick_computeAngles>
        return (yaw * 57.29578f + 180.0f);
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <Madgwick_getYaw+0x34>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4908      	ldr	r1, [pc, #32]	; (8003c98 <Madgwick_getYaw+0x38>)
 8003c76:	1c18      	adds	r0, r3, #0
 8003c78:	f7fc ffd2 	bl	8000c20 <__aeabi_fmul>
 8003c7c:	1c03      	adds	r3, r0, #0
 8003c7e:	4907      	ldr	r1, [pc, #28]	; (8003c9c <Madgwick_getYaw+0x3c>)
 8003c80:	1c18      	adds	r0, r3, #0
 8003c82:	f7fc fc67 	bl	8000554 <__aeabi_fadd>
 8003c86:	1c03      	adds	r3, r0, #0
    }
 8003c88:	1c18      	adds	r0, r3, #0
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	20000278 	.word	0x20000278
 8003c94:	20000274 	.word	0x20000274
 8003c98:	42652ee1 	.word	0x42652ee1
 8003c9c:	43340000 	.word	0x43340000

08003ca0 <gpio_clock_init>:


#include "drv_io.h"
#include "stm32g0xx.h"

void gpio_clock_init(void){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8003ca4:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <gpio_clock_init+0x3c>)
 8003ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <gpio_clock_init+0x3c>)
 8003caa:	2101      	movs	r1, #1
 8003cac:	430a      	orrs	r2, r1
 8003cae:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <gpio_clock_init+0x3c>)
 8003cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <gpio_clock_init+0x3c>)
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <gpio_clock_init+0x3c>)
 8003cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <gpio_clock_init+0x3c>)
 8003cc2:	2104      	movs	r1, #4
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= RCC_IOPENR_GPIODEN;
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <gpio_clock_init+0x3c>)
 8003cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <gpio_clock_init+0x3c>)
 8003cce:	2108      	movs	r1, #8
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	40021000 	.word	0x40021000

08003ce0 <gpio_pin_int>:

void gpio_pin_int(GPIO_TypeDef *gpio_port, uint16_t gpio_pin, uint8_t gpio_pinMode){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	0008      	movs	r0, r1
 8003cea:	0011      	movs	r1, r2
 8003cec:	1cbb      	adds	r3, r7, #2
 8003cee:	1c02      	adds	r2, r0, #0
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	1c7b      	adds	r3, r7, #1
 8003cf4:	1c0a      	adds	r2, r1, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
	if(gpio_pin_outPut == gpio_pinMode){
 8003cf8:	1c7b      	adds	r3, r7, #1
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d117      	bne.n	8003d30 <gpio_pin_int+0x50>
		gpio_port->MODER &= ~(0x03<<(gpio_pin*2));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1cba      	adds	r2, r7, #2
 8003d06:	8812      	ldrh	r2, [r2, #0]
 8003d08:	0052      	lsls	r2, r2, #1
 8003d0a:	2103      	movs	r1, #3
 8003d0c:	4091      	lsls	r1, r2
 8003d0e:	000a      	movs	r2, r1
 8003d10:	43d2      	mvns	r2, r2
 8003d12:	401a      	ands	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	601a      	str	r2, [r3, #0]
		gpio_port->MODER |= (0x01<<(gpio_pin*2));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1cba      	adds	r2, r7, #2
 8003d1e:	8812      	ldrh	r2, [r2, #0]
 8003d20:	0052      	lsls	r2, r2, #1
 8003d22:	2101      	movs	r1, #1
 8003d24:	4091      	lsls	r1, r2
 8003d26:	000a      	movs	r2, r1
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	601a      	str	r2, [r3, #0]
	}
	else if(gpio_pin_inPut == gpio_pinMode){
		gpio_port->MODER &= ~(0x03<<(gpio_pin*2));

	}
}
 8003d2e:	e00f      	b.n	8003d50 <gpio_pin_int+0x70>
	else if(gpio_pin_inPut == gpio_pinMode){
 8003d30:	1c7b      	adds	r3, r7, #1
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10b      	bne.n	8003d50 <gpio_pin_int+0x70>
		gpio_port->MODER &= ~(0x03<<(gpio_pin*2));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	1cba      	adds	r2, r7, #2
 8003d3e:	8812      	ldrh	r2, [r2, #0]
 8003d40:	0052      	lsls	r2, r2, #1
 8003d42:	2103      	movs	r1, #3
 8003d44:	4091      	lsls	r1, r2
 8003d46:	000a      	movs	r2, r1
 8003d48:	43d2      	mvns	r2, r2
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	601a      	str	r2, [r3, #0]
}
 8003d50:	46c0      	nop			; (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <gpio_write>:

void GpioInterruptInit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
}

void gpio_write(GPIO_TypeDef *gpio_port, uint16_t gpio_pin, uint8_t gpio_pinState){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	0008      	movs	r0, r1
 8003d62:	0011      	movs	r1, r2
 8003d64:	1cbb      	adds	r3, r7, #2
 8003d66:	1c02      	adds	r2, r0, #0
 8003d68:	801a      	strh	r2, [r3, #0]
 8003d6a:	1c7b      	adds	r3, r7, #1
 8003d6c:	1c0a      	adds	r2, r1, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
	if (gpio_pin_reset == gpio_pinState) {
 8003d70:	1c7b      	adds	r3, r7, #1
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <gpio_write+0x38>
		gpio_port->ODR &= ~(1 << gpio_pin);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	1cba      	adds	r2, r7, #2
 8003d7e:	8812      	ldrh	r2, [r2, #0]
 8003d80:	2101      	movs	r1, #1
 8003d82:	4091      	lsls	r1, r2
 8003d84:	000a      	movs	r2, r1
 8003d86:	43d2      	mvns	r2, r2
 8003d88:	401a      	ands	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	615a      	str	r2, [r3, #20]
	} else {
		gpio_port->ODR |= 1 << gpio_pin;
	}
}
 8003d8e:	e009      	b.n	8003da4 <gpio_write+0x4c>
		gpio_port->ODR |= 1 << gpio_pin;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	1cba      	adds	r2, r7, #2
 8003d96:	8812      	ldrh	r2, [r2, #0]
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4091      	lsls	r1, r2
 8003d9c:	000a      	movs	r2, r1
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	615a      	str	r2, [r3, #20]
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b002      	add	sp, #8
 8003daa:	bd80      	pop	{r7, pc}

08003dac <spi2_cs_low>:
#define SPI2_CS_PORT 		GPIOA

static void SPI2_LowLevel_Init(void);
static void SPIx_Init(SPI_TypeDef *SPIx);

void spi2_cs_low(void){
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
	gpio_write(SPI2_CS_PORT, SPI2_CS_PIN, gpio_pin_reset);
 8003db0:	23a0      	movs	r3, #160	; 0xa0
 8003db2:	05db      	lsls	r3, r3, #23
 8003db4:	2200      	movs	r2, #0
 8003db6:	2108      	movs	r1, #8
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff ffcd 	bl	8003d58 <gpio_write>
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <spi2_cs_high>:
void spi2_cs_high(void){
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
	gpio_write(SPI2_CS_PORT, SPI2_CS_PIN, gpio_pin_set);
 8003dc8:	23a0      	movs	r3, #160	; 0xa0
 8003dca:	05db      	lsls	r3, r3, #23
 8003dcc:	2201      	movs	r2, #1
 8003dce:	2108      	movs	r1, #8
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7ff ffc1 	bl	8003d58 <gpio_write>
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <spi2Init>:

void spi2Init(void){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
	SPI2_LowLevel_Init();
 8003de0:	f000 f810 	bl	8003e04 <SPI2_LowLevel_Init>
	SPIx_Init(SPI2);
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <spi2Init+0x24>)
 8003de6:	0018      	movs	r0, r3
 8003de8:	f000 f88c 	bl	8003f04 <SPIx_Init>
	gpio_pin_int(SPI2_CS_PORT, SPI2_CS_PIN, gpio_pin_outPut);
 8003dec:	23a0      	movs	r3, #160	; 0xa0
 8003dee:	05db      	lsls	r3, r3, #23
 8003df0:	2200      	movs	r2, #0
 8003df2:	2108      	movs	r1, #8
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7ff ff73 	bl	8003ce0 <gpio_pin_int>
}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40003800 	.word	0x40003800

08003e04 <SPI2_LowLevel_Init>:
static void SPI2_LowLevel_Init(void) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
	uint32_t temp;
	//MISO
	SPI2_MISO_PORT->MODER &= ~(0x03 << (SPI2_MISO_PIN * 2));
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b35      	ldr	r3, [pc, #212]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e10:	4935      	ldr	r1, [pc, #212]	; (8003ee8 <SPI2_LowLevel_Init+0xe4>)
 8003e12:	400a      	ands	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
	SPI2_MISO_PORT->MODER |= (0x02 << (SPI2_MISO_PIN * 2)); //mode AF
 8003e16:	4b33      	ldr	r3, [pc, #204]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e1c:	2180      	movs	r1, #128	; 0x80
 8003e1e:	0589      	lsls	r1, r1, #22
 8003e20:	430a      	orrs	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]

	SPI2_MISO_PORT->ODR &= ~(0x01 << SPI2_MISO_PIN); //push pull
 8003e24:	4b2f      	ldr	r3, [pc, #188]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	4b2e      	ldr	r3, [pc, #184]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e2a:	4930      	ldr	r1, [pc, #192]	; (8003eec <SPI2_LowLevel_Init+0xe8>)
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	615a      	str	r2, [r3, #20]
	SPI2_MISO_PORT->PUPDR &= ~(0x03 << (SPI2_MISO_PIN * 2)); //no pull
 8003e30:	4b2c      	ldr	r3, [pc, #176]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e36:	492c      	ldr	r1, [pc, #176]	; (8003ee8 <SPI2_LowLevel_Init+0xe4>)
 8003e38:	400a      	ands	r2, r1
 8003e3a:	60da      	str	r2, [r3, #12]

	//SPI2_MISO_PORT->AFR[1] = 0x00;

	temp = SPI2_MISO_PORT->AFR[SPI2_MISO_PIN >> 3u];
 8003e3c:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_MISO_PIN & 0x07u) * 4u));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2a      	ldr	r2, [pc, #168]	; (8003ef0 <SPI2_LowLevel_Init+0xec>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_MISO_PIN & 0x07u) * 4u));
	SPI2_MISO_PORT->AFR[SPI2_MISO_PIN >> 3u] = temp;
 8003e4a:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

	//MOSI
	SPI2_MOSI_PORT->MODER &= ~(0x03 << (SPI2_MOSI_PIN * 2));
 8003e50:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e56:	0092      	lsls	r2, r2, #2
 8003e58:	0892      	lsrs	r2, r2, #2
 8003e5a:	601a      	str	r2, [r3, #0]
	SPI2_MOSI_PORT->MODER |= (0x02 << (SPI2_MOSI_PIN * 2)); //mode AF
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e62:	2180      	movs	r1, #128	; 0x80
 8003e64:	0609      	lsls	r1, r1, #24
 8003e66:	430a      	orrs	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]

	SPI2_MOSI_PORT->ODR &= ~(0x01 << SPI2_MOSI_PIN); //push pull
 8003e6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e70:	4920      	ldr	r1, [pc, #128]	; (8003ef4 <SPI2_LowLevel_Init+0xf0>)
 8003e72:	400a      	ands	r2, r1
 8003e74:	615a      	str	r2, [r3, #20]
	SPI2_MOSI_PORT->PUPDR &= ~(0x03 << (SPI2_MOSI_PIN * 2)); //no pull
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e7c:	0092      	lsls	r2, r2, #2
 8003e7e:	0892      	lsrs	r2, r2, #2
 8003e80:	60da      	str	r2, [r3, #12]

	//SPI2_MOSI_PORT->AFR[1] = 0x00;
	temp = SPI2_MOSI_PORT->AFR[SPI2_MOSI_PIN >> 3u];
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_MOSI_PIN & 0x07u) * 4u));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_MOSI_PIN & 0x07u) * 4u));
	SPI2_MOSI_PORT->AFR[SPI2_MOSI_PIN >> 3u] = temp;
 8003e90:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

	//SCK
	SPI2_SCK_PORT->MODER &= ~(0x03 << (SPI2_SCK_PIN * 2));
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003e9c:	4916      	ldr	r1, [pc, #88]	; (8003ef8 <SPI2_LowLevel_Init+0xf4>)
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
	SPI2_SCK_PORT->MODER |= (0x02 << (SPI2_SCK_PIN * 2)); //mode AF
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003ea8:	2180      	movs	r1, #128	; 0x80
 8003eaa:	0509      	lsls	r1, r1, #20
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]

	SPI2_SCK_PORT->ODR &= ~(0x01 << SPI2_SCK_PIN); //push pull
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003eb6:	4911      	ldr	r1, [pc, #68]	; (8003efc <SPI2_LowLevel_Init+0xf8>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	615a      	str	r2, [r3, #20]
	SPI2_SCK_PORT->PUPDR &= ~(0x03 << (SPI2_SCK_PIN * 2)); //no pull
 8003ebc:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003ec2:	490d      	ldr	r1, [pc, #52]	; (8003ef8 <SPI2_LowLevel_Init+0xf4>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]

	//SPI2_SCK_PORT->AFR[1] = 0x00;
	temp = SPI2_SCK_PORT->AFR[SPI2_SCK_PIN >> 3u];
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_SCK_PIN & 0x07u) * 4u));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <SPI2_LowLevel_Init+0xfc>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_SCK_PIN & 0x07u) * 4u));
	SPI2_SCK_PORT->AFR[SPI2_SCK_PIN >> 3u] = temp;
 8003ed6:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <SPI2_LowLevel_Init+0xe0>)
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24

}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b002      	add	sp, #8
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	50000400 	.word	0x50000400
 8003ee8:	cfffffff 	.word	0xcfffffff
 8003eec:	ffffbfff 	.word	0xffffbfff
 8003ef0:	f0ffffff 	.word	0xf0ffffff
 8003ef4:	ffff7fff 	.word	0xffff7fff
 8003ef8:	f3ffffff 	.word	0xf3ffffff
 8003efc:	ffffdfff 	.word	0xffffdfff
 8003f00:	ff0fffff 	.word	0xff0fffff

08003f04 <SPIx_Init>:


static void SPIx_Init(SPI_TypeDef *SPIx){
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
	 RCC->APBENR1 |= RCC_APBENR1_SPI2EN;//clock Enbale
 8003f0c:	4b3d      	ldr	r3, [pc, #244]	; (8004004 <SPIx_Init+0x100>)
 8003f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f10:	4b3c      	ldr	r3, [pc, #240]	; (8004004 <SPIx_Init+0x100>)
 8003f12:	2180      	movs	r1, #128	; 0x80
 8003f14:	01c9      	lsls	r1, r1, #7
 8003f16:	430a      	orrs	r2, r1
 8003f18:	63da      	str	r2, [r3, #60]	; 0x3c

	 SPIx->CR1 |= SPI_CR1_MSTR; //MasterMode
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2204      	movs	r2, #4
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_RXONLY;// 2line
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a37      	ldr	r2, [pc, #220]	; (8004008 <SPIx_Init+0x104>)
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 &= SPI_CR2_DS;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	23f0      	movs	r3, #240	; 0xf0
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	605a      	str	r2, [r3, #4]
	 SPIx->CR2 &= SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2;//8bit
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	23e0      	movs	r3, #224	; 0xe0
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	401a      	ands	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	605a      	str	r2, [r3, #4]
	 SPIx->CR1 &= ~SPI_CR1_CPHA;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2201      	movs	r2, #1
 8003f54:	4393      	bics	r3, r2
 8003f56:	001a      	movs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_CPOL;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2202      	movs	r2, #2
 8003f62:	4393      	bics	r3, r2
 8003f64:	001a      	movs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= SPI_CR1_SSM;//soff nss
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2280      	movs	r2, #128	; 0x80
 8003f70:	0092      	lsls	r2, r2, #2
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= SPI_CR1_SSI;//soff nss
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2280      	movs	r2, #128	; 0x80
 8003f7e:	0052      	lsls	r2, r2, #1
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_BR;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2238      	movs	r2, #56	; 0x38
 8003f8c:	4393      	bics	r3, r2
 8003f8e:	001a      	movs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_2);   //f/8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2230      	movs	r2, #48	; 0x30
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_LSBFIRST; //SPI_FIRSTBIT_MSB
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	4393      	bics	r3, r2
 8003fa8:	001a      	movs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 &= ~SPI_CR2_FRF;//SPI_TIMODE_DISABLE
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2210      	movs	r2, #16
 8003fb4:	4393      	bics	r3, r2
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	605a      	str	r2, [r3, #4]
	 SPIx->CR1 &= ~SPI_CR1_CRCEN;//SPI_CRCCALCULATION_DISABLE
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a12      	ldr	r2, [pc, #72]	; (800400c <SPIx_Init+0x108>)
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 |= SPI_CR2_NSSP;//SPI_NSS_PULSE_ENABLE
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2208      	movs	r2, #8
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	605a      	str	r2, [r3, #4]
	 SPIx->CR2 |= SPI_CR2_FRXTH;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2280      	movs	r2, #128	; 0x80
 8003fda:	0152      	lsls	r2, r2, #5
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	605a      	str	r2, [r3, #4]
	 SPIx->I2SCFGR &= ~SPI_I2SCFGR_I2SMOD;//SPI mode is selected
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <SPIx_Init+0x10c>)
 8003fe8:	401a      	ands	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	61da      	str	r2, [r3, #28]
	 SPIx->CR1 |= SPI_CR1_SPE;//enable SPI
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2240      	movs	r2, #64	; 0x40
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	601a      	str	r2, [r3, #0]

}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b002      	add	sp, #8
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	40021000 	.word	0x40021000
 8004008:	fffffbff 	.word	0xfffffbff
 800400c:	ffffdfff 	.word	0xffffdfff
 8004010:	fffff7ff 	.word	0xfffff7ff

08004014 <SPIx_readWrite>:



uint8_t SPIx_readWrite(SPI_TypeDef *SPIx, uint8_t byte){
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	000a      	movs	r2, r1
 800401e:	1cfb      	adds	r3, r7, #3
 8004020:	701a      	strb	r2, [r3, #0]
	uint8_t ret  = 0;
 8004022:	230f      	movs	r3, #15
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
	while(!((SPIx->SR) & SPI_SR_TXE));
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2202      	movs	r2, #2
 8004032:	4013      	ands	r3, r2
 8004034:	d0fa      	beq.n	800402c <SPIx_readWrite+0x18>
	*((__IO uint8_t *)&SPIx->DR) = byte;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	330c      	adds	r3, #12
 800403a:	1cfa      	adds	r2, r7, #3
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	701a      	strb	r2, [r3, #0]
	while(!((SPIx->SR) & SPI_SR_RXNE));
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2201      	movs	r2, #1
 8004048:	4013      	ands	r3, r2
 800404a:	d0fa      	beq.n	8004042 <SPIx_readWrite+0x2e>
	ret =  (uint8_t)SPIx->DR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	210f      	movs	r1, #15
 8004052:	187b      	adds	r3, r7, r1
 8004054:	701a      	strb	r2, [r3, #0]
	return ret;
 8004056:	187b      	adds	r3, r7, r1
 8004058:	781b      	ldrb	r3, [r3, #0]
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b004      	add	sp, #16
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <usart_x0_init>:

static void COMX0_pin_init(void) ;
static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) ;


void usart_x0_init(uint32_t baudrate) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]

	COMX0_pin_init();
 800406c:	f000 f82a 	bl	80040c4 <COMX0_pin_init>
	uartx_init(COMX0, baudrate);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a07      	ldr	r2, [pc, #28]	; (8004090 <usart_x0_init+0x2c>)
 8004074:	0019      	movs	r1, r3
 8004076:	0010      	movs	r0, r2
 8004078:	f000 f8ba 	bl	80041f0 <uartx_init>
	COMX0->CR1 |= USART_CR1_RXNEIE_RXFNEIE;//enable RX interrupt
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <usart_x0_init+0x2c>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <usart_x0_init+0x2c>)
 8004082:	2120      	movs	r1, #32
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]
}
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b002      	add	sp, #8
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40013800 	.word	0x40013800

08004094 <usart_x0_send>:

void usart_x0_send(uint8_t c){
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	0002      	movs	r2, r0
 800409c:	1dfb      	adds	r3, r7, #7
 800409e:	701a      	strb	r2, [r3, #0]
	while ((COMX0->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <usart_x0_send+0x2c>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b80      	cmp	r3, #128	; 0x80
 80040ac:	d1f9      	bne.n	80040a2 <usart_x0_send+0xe>
	COMX0->TDR = c;
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <usart_x0_send+0x2c>)
 80040b0:	1dfa      	adds	r2, r7, #7
 80040b2:	7812      	ldrb	r2, [r2, #0]
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b002      	add	sp, #8
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	40013800 	.word	0x40013800

080040c4 <COMX0_pin_init>:

static void COMX0_pin_init(void) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	607b      	str	r3, [r7, #4]
	RCC->IOPENR |= (COMX0_TX_GPIO_CLK | COMX0_TX_GPIO_CLK);
 80040ce:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <COMX0_pin_init+0x114>)
 80040d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d2:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <COMX0_pin_init+0x114>)
 80040d4:	2101      	movs	r1, #1
 80040d6:	430a      	orrs	r2, r1
 80040d8:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->COMX0_APB_CLK |= COMX0_CLK;
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <COMX0_pin_init+0x114>)
 80040dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040de:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <COMX0_pin_init+0x114>)
 80040e0:	2180      	movs	r1, #128	; 0x80
 80040e2:	01c9      	lsls	r1, r1, #7
 80040e4:	430a      	orrs	r2, r1
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40

	COMX0_RX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_RX_PIN * 2));
 80040e8:	23a0      	movs	r3, #160	; 0xa0
 80040ea:	05db      	lsls	r3, r3, #23
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	23a0      	movs	r3, #160	; 0xa0
 80040f0:	05db      	lsls	r3, r3, #23
 80040f2:	493a      	ldr	r1, [pc, #232]	; (80041dc <COMX0_pin_init+0x118>)
 80040f4:	400a      	ands	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->MODER |= (0x02 << (COMX0_RX_PIN * 2)); //mode AF
 80040f8:	23a0      	movs	r3, #160	; 0xa0
 80040fa:	05db      	lsls	r3, r3, #23
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	23a0      	movs	r3, #160	; 0xa0
 8004100:	05db      	lsls	r3, r3, #23
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	0389      	lsls	r1, r1, #14
 8004106:	430a      	orrs	r2, r1
 8004108:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->ODR &= ~(0x01 << COMX0_RX_PIN); //push pull
 800410a:	23a0      	movs	r3, #160	; 0xa0
 800410c:	05db      	lsls	r3, r3, #23
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	23a0      	movs	r3, #160	; 0xa0
 8004112:	05db      	lsls	r3, r3, #23
 8004114:	4932      	ldr	r1, [pc, #200]	; (80041e0 <COMX0_pin_init+0x11c>)
 8004116:	400a      	ands	r2, r1
 8004118:	615a      	str	r2, [r3, #20]
	COMX0_RX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_RX_PIN * 2)); //no pull
 800411a:	23a0      	movs	r3, #160	; 0xa0
 800411c:	05db      	lsls	r3, r3, #23
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	23a0      	movs	r3, #160	; 0xa0
 8004122:	05db      	lsls	r3, r3, #23
 8004124:	492d      	ldr	r1, [pc, #180]	; (80041dc <COMX0_pin_init+0x118>)
 8004126:	400a      	ands	r2, r1
 8004128:	60da      	str	r2, [r3, #12]
	COMX0_RX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_RX_PIN); ////speed low
 800412a:	23a0      	movs	r3, #160	; 0xa0
 800412c:	05db      	lsls	r3, r3, #23
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	23a0      	movs	r3, #160	; 0xa0
 8004132:	05db      	lsls	r3, r3, #23
 8004134:	492a      	ldr	r1, [pc, #168]	; (80041e0 <COMX0_pin_init+0x11c>)
 8004136:	400a      	ands	r2, r1
 8004138:	609a      	str	r2, [r3, #8]

	COMX0_TX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_TX_PIN * 2));
 800413a:	23a0      	movs	r3, #160	; 0xa0
 800413c:	05db      	lsls	r3, r3, #23
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	23a0      	movs	r3, #160	; 0xa0
 8004142:	05db      	lsls	r3, r3, #23
 8004144:	4927      	ldr	r1, [pc, #156]	; (80041e4 <COMX0_pin_init+0x120>)
 8004146:	400a      	ands	r2, r1
 8004148:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->MODER |= (0x02 << (COMX0_TX_PIN * 2)); //mode AF
 800414a:	23a0      	movs	r3, #160	; 0xa0
 800414c:	05db      	lsls	r3, r3, #23
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	23a0      	movs	r3, #160	; 0xa0
 8004152:	05db      	lsls	r3, r3, #23
 8004154:	2180      	movs	r1, #128	; 0x80
 8004156:	0309      	lsls	r1, r1, #12
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->ODR &= ~(0x01 << COMX0_TX_PIN); //push pull
 800415c:	23a0      	movs	r3, #160	; 0xa0
 800415e:	05db      	lsls	r3, r3, #23
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	23a0      	movs	r3, #160	; 0xa0
 8004164:	05db      	lsls	r3, r3, #23
 8004166:	4920      	ldr	r1, [pc, #128]	; (80041e8 <COMX0_pin_init+0x124>)
 8004168:	400a      	ands	r2, r1
 800416a:	615a      	str	r2, [r3, #20]
	COMX0_TX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_TX_PIN * 2)); //no pull
 800416c:	23a0      	movs	r3, #160	; 0xa0
 800416e:	05db      	lsls	r3, r3, #23
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	23a0      	movs	r3, #160	; 0xa0
 8004174:	05db      	lsls	r3, r3, #23
 8004176:	491b      	ldr	r1, [pc, #108]	; (80041e4 <COMX0_pin_init+0x120>)
 8004178:	400a      	ands	r2, r1
 800417a:	60da      	str	r2, [r3, #12]
	COMX0_TX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_TX_PIN); ////speed low
 800417c:	23a0      	movs	r3, #160	; 0xa0
 800417e:	05db      	lsls	r3, r3, #23
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	23a0      	movs	r3, #160	; 0xa0
 8004184:	05db      	lsls	r3, r3, #23
 8004186:	4918      	ldr	r1, [pc, #96]	; (80041e8 <COMX0_pin_init+0x124>)
 8004188:	400a      	ands	r2, r1
 800418a:	609a      	str	r2, [r3, #8]

	temp = COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3u];
 800418c:	23a0      	movs	r3, #160	; 0xa0
 800418e:	05db      	lsls	r3, r3, #23
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_RX_PIN & 0x07u) * 4ul));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a15      	ldr	r2, [pc, #84]	; (80041ec <COMX0_pin_init+0x128>)
 8004198:	4013      	ands	r3, r2
 800419a:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_RX_PIN_AF << ((COMX0_RX_PIN & 0x07u) * 4ul));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2280      	movs	r2, #128	; 0x80
 80041a0:	0052      	lsls	r2, r2, #1
 80041a2:	4313      	orrs	r3, r2
 80041a4:	607b      	str	r3, [r7, #4]
	COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3ul] = temp;
 80041a6:	23a0      	movs	r3, #160	; 0xa0
 80041a8:	05db      	lsls	r3, r3, #23
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

	temp = COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3u];
 80041ae:	23a0      	movs	r3, #160	; 0xa0
 80041b0:	05db      	lsls	r3, r3, #23
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_TX_PIN & 0x07u) * 4ul));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	22f0      	movs	r2, #240	; 0xf0
 80041ba:	4393      	bics	r3, r2
 80041bc:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_TX_PIN_AF << ((COMX0_TX_PIN & 0x07u) * 4ul));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2210      	movs	r2, #16
 80041c2:	4313      	orrs	r3, r2
 80041c4:	607b      	str	r3, [r7, #4]
	COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3ul] = temp;
 80041c6:	23a0      	movs	r3, #160	; 0xa0
 80041c8:	05db      	lsls	r3, r3, #23
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b002      	add	sp, #8
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	40021000 	.word	0x40021000
 80041dc:	ffcfffff 	.word	0xffcfffff
 80041e0:	fffffbff 	.word	0xfffffbff
 80041e4:	fff3ffff 	.word	0xfff3ffff
 80041e8:	fffffdff 	.word	0xfffffdff
 80041ec:	fffff0ff 	.word	0xfffff0ff

080041f0 <uartx_init>:



static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
	uint32_t BRR_value = SYS_CLOCK / baudrate;
 80041fa:	6839      	ldr	r1, [r7, #0]
 80041fc:	4819      	ldr	r0, [pc, #100]	; (8004264 <uartx_init+0x74>)
 80041fe:	f7fb ff9d 	bl	800013c <__udivsi3>
 8004202:	0003      	movs	r3, r0
 8004204:	60fb      	str	r3, [r7, #12]

	UARTx->CR1 = 0;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
	// Word length 8n1
	UARTx->CR1 &= ~USART_CR1_M1;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a15      	ldr	r2, [pc, #84]	; (8004268 <uartx_init+0x78>)
 8004212:	401a      	ands	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	601a      	str	r2, [r3, #0]
	//Parity disable
	UARTx->CR1 &= ~USART_CR1_PCE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a13      	ldr	r2, [pc, #76]	; (800426c <uartx_init+0x7c>)
 800421e:	401a      	ands	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	601a      	str	r2, [r3, #0]
	//mode Tx_Rx
	UARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	220c      	movs	r2, #12
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	601a      	str	r2, [r3, #0]
	//OverSampling 16bit
	UARTx->CR1 &= ~USART_CR1_OVER8;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <uartx_init+0x80>)
 8004236:	401a      	ands	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]
	//ClockPrescaler no div
	UARTx->PRESC &= USART_PRESC_PRESCALER;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	220f      	movs	r2, #15
 8004242:	401a      	ands	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c
	//set baudrate 115200
	UARTx->BRR = BRR_value;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	60da      	str	r2, [r3, #12]
	//rx interupt enable
	//UARTx->CR1 |= USART_CR1_RXNEIE_RXFNEIE;
	UARTx->CR1 |= USART_CR1_UE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2201      	movs	r2, #1
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b004      	add	sp, #16
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	03d09000 	.word	0x03d09000
 8004268:	efffffff 	.word	0xefffffff
 800426c:	fffffbff 	.word	0xfffffbff
 8004270:	ffff7fff 	.word	0xffff7fff

08004274 <Lsm6ds3_int>:
uint8_t team = 0;
uint8_t teap = 0;
int value = 0;

int Lsm6ds3_int()
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
	team = Lsm6ds3_readRegister(WHO_AM_I_REG);
 8004278:	200f      	movs	r0, #15
 800427a:	f000 f94d 	bl	8004518 <Lsm6ds3_readRegister>
 800427e:	0003      	movs	r3, r0
 8004280:	b2da      	uxtb	r2, r3
 8004282:	4b12      	ldr	r3, [pc, #72]	; (80042cc <Lsm6ds3_int+0x58>)
 8004284:	701a      	strb	r2, [r3, #0]
	if(Lsm6ds3_readRegister(WHO_AM_I_REG) == LSM6DSTR_ADDRESS){
 8004286:	200f      	movs	r0, #15
 8004288:	f000 f946 	bl	8004518 <Lsm6ds3_readRegister>
 800428c:	0003      	movs	r3, r0
 800428e:	2b6b      	cmp	r3, #107	; 0x6b
 8004290:	d118      	bne.n	80042c4 <Lsm6ds3_int+0x50>
		//set the gyroscope control register to work at 104 Hz, 2000 dps and in bypass mode
		Lsm6ds3_writeRegister(CTRL2_G, 0x4C);
 8004292:	214c      	movs	r1, #76	; 0x4c
 8004294:	2011      	movs	r0, #17
 8004296:	f000 f9a3 	bl	80045e0 <Lsm6ds3_writeRegister>
		teap = Lsm6ds3_readRegister(CTRL2_G);
 800429a:	2011      	movs	r0, #17
 800429c:	f000 f93c 	bl	8004518 <Lsm6ds3_readRegister>
 80042a0:	0003      	movs	r3, r0
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <Lsm6ds3_int+0x5c>)
 80042a6:	701a      	strb	r2, [r3, #0]

		// Set the Accelerometer control register to work at 104 Hz, 4 g,and in bypass mode and enable ODR/4
		// low pass filter (check figure9 of LSM6DS3's datasheet)
		Lsm6ds3_writeRegister(CTRL1_XL, 0x4A);
 80042a8:	214a      	movs	r1, #74	; 0x4a
 80042aa:	2010      	movs	r0, #16
 80042ac:	f000 f998 	bl	80045e0 <Lsm6ds3_writeRegister>

		// set gyroscope power mode to high performance and bandwidth to 16 MHz
		Lsm6ds3_writeRegister(CTRL7_G, 0x00);
 80042b0:	2100      	movs	r1, #0
 80042b2:	2016      	movs	r0, #22
 80042b4:	f000 f994 	bl	80045e0 <Lsm6ds3_writeRegister>

		// Set the ODR config register to ODR/4
		Lsm6ds3_writeRegister(CTRL8_XL, 0x09);
 80042b8:	2109      	movs	r1, #9
 80042ba:	2017      	movs	r0, #23
 80042bc:	f000 f990 	bl	80045e0 <Lsm6ds3_writeRegister>
		return 1;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <Lsm6ds3_int+0x52>
	}
	else {
		return 0;
 80042c4:	2300      	movs	r3, #0
	}
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000279 	.word	0x20000279
 80042d0:	2000027a 	.word	0x2000027a

080042d4 <Lsm6ds3_readAcceleration>:
	Lsm6ds3_writeRegister(CTRL2_G, 0x00);
	Lsm6ds3_writeRegister(CTRL1_XL, 0x00);
}

int Lsm6ds3_readAcceleration(float *x, float* y, float* z)
{
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b08d      	sub	sp, #52	; 0x34
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  int16_t data[3]={0};
 80042e0:	2428      	movs	r4, #40	; 0x28
 80042e2:	193b      	adds	r3, r7, r4
 80042e4:	0018      	movs	r0, r3
 80042e6:	2306      	movs	r3, #6
 80042e8:	001a      	movs	r2, r3
 80042ea:	2100      	movs	r1, #0
 80042ec:	f002 fadf 	bl	80068ae <memset>
  long double _data[3]={0};
 80042f0:	2310      	movs	r3, #16
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	0018      	movs	r0, r3
 80042f6:	2318      	movs	r3, #24
 80042f8:	001a      	movs	r2, r3
 80042fa:	2100      	movs	r1, #0
 80042fc:	f002 fad7 	bl	80068ae <memset>

  if (!Lsm6ds3_readRegisters(OUTX_L_XL, (uint8_t*)data, sizeof(data))) {
 8004300:	193b      	adds	r3, r7, r4
 8004302:	2206      	movs	r2, #6
 8004304:	0019      	movs	r1, r3
 8004306:	2028      	movs	r0, #40	; 0x28
 8004308:	f000 f928 	bl	800455c <Lsm6ds3_readRegisters>
 800430c:	1e03      	subs	r3, r0, #0
 800430e:	d107      	bne.n	8004320 <Lsm6ds3_readAcceleration+0x4c>
    x = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
    y = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	60bb      	str	r3, [r7, #8]
    z = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	607b      	str	r3, [r7, #4]
    return 0;
 800431c:	2300      	movs	r3, #0
 800431e:	e052      	b.n	80043c6 <Lsm6ds3_readAcceleration+0xf2>
  }
  *x = data[0] * 4.0 / 32768.0;
 8004320:	2428      	movs	r4, #40	; 0x28
 8004322:	193b      	adds	r3, r7, r4
 8004324:	2200      	movs	r2, #0
 8004326:	5e9b      	ldrsh	r3, [r3, r2]
 8004328:	0018      	movs	r0, r3
 800432a:	f7fe fd35 	bl	8002d98 <__aeabi_i2d>
 800432e:	2200      	movs	r2, #0
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <Lsm6ds3_readAcceleration+0xfc>)
 8004332:	f7fd fedf 	bl	80020f4 <__aeabi_dmul>
 8004336:	0002      	movs	r2, r0
 8004338:	000b      	movs	r3, r1
 800433a:	0010      	movs	r0, r2
 800433c:	0019      	movs	r1, r3
 800433e:	2200      	movs	r2, #0
 8004340:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <Lsm6ds3_readAcceleration+0x100>)
 8004342:	f7fd fad5 	bl	80018f0 <__aeabi_ddiv>
 8004346:	0002      	movs	r2, r0
 8004348:	000b      	movs	r3, r1
 800434a:	0010      	movs	r0, r2
 800434c:	0019      	movs	r1, r3
 800434e:	f7fe fdc1 	bl	8002ed4 <__aeabi_d2f>
 8004352:	1c02      	adds	r2, r0, #0
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]
  *y = data[1] * 4.0 / 32768.0;
 8004358:	193b      	adds	r3, r7, r4
 800435a:	2202      	movs	r2, #2
 800435c:	5e9b      	ldrsh	r3, [r3, r2]
 800435e:	0018      	movs	r0, r3
 8004360:	f7fe fd1a 	bl	8002d98 <__aeabi_i2d>
 8004364:	2200      	movs	r2, #0
 8004366:	4b1a      	ldr	r3, [pc, #104]	; (80043d0 <Lsm6ds3_readAcceleration+0xfc>)
 8004368:	f7fd fec4 	bl	80020f4 <__aeabi_dmul>
 800436c:	0002      	movs	r2, r0
 800436e:	000b      	movs	r3, r1
 8004370:	0010      	movs	r0, r2
 8004372:	0019      	movs	r1, r3
 8004374:	2200      	movs	r2, #0
 8004376:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <Lsm6ds3_readAcceleration+0x100>)
 8004378:	f7fd faba 	bl	80018f0 <__aeabi_ddiv>
 800437c:	0002      	movs	r2, r0
 800437e:	000b      	movs	r3, r1
 8004380:	0010      	movs	r0, r2
 8004382:	0019      	movs	r1, r3
 8004384:	f7fe fda6 	bl	8002ed4 <__aeabi_d2f>
 8004388:	1c02      	adds	r2, r0, #0
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	601a      	str	r2, [r3, #0]
  *z = data[2] * 4.0 / 32768.0;
 800438e:	193b      	adds	r3, r7, r4
 8004390:	2204      	movs	r2, #4
 8004392:	5e9b      	ldrsh	r3, [r3, r2]
 8004394:	0018      	movs	r0, r3
 8004396:	f7fe fcff 	bl	8002d98 <__aeabi_i2d>
 800439a:	2200      	movs	r2, #0
 800439c:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <Lsm6ds3_readAcceleration+0xfc>)
 800439e:	f7fd fea9 	bl	80020f4 <__aeabi_dmul>
 80043a2:	0002      	movs	r2, r0
 80043a4:	000b      	movs	r3, r1
 80043a6:	0010      	movs	r0, r2
 80043a8:	0019      	movs	r1, r3
 80043aa:	2200      	movs	r2, #0
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <Lsm6ds3_readAcceleration+0x100>)
 80043ae:	f7fd fa9f 	bl	80018f0 <__aeabi_ddiv>
 80043b2:	0002      	movs	r2, r0
 80043b4:	000b      	movs	r3, r1
 80043b6:	0010      	movs	r0, r2
 80043b8:	0019      	movs	r1, r3
 80043ba:	f7fe fd8b 	bl	8002ed4 <__aeabi_d2f>
 80043be:	1c02      	adds	r2, r0, #0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	601a      	str	r2, [r3, #0]
  return 1;
 80043c4:	2301      	movs	r3, #1
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b00d      	add	sp, #52	; 0x34
 80043cc:	bd90      	pop	{r4, r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	40100000 	.word	0x40100000
 80043d4:	40e00000 	.word	0x40e00000

080043d8 <Lsm6ds3_accelerationAvailable>:
int acc;
int Lsm6ds3_accelerationAvailable()
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
	acc = Lsm6ds3_readRegister(STATUS_REG);
 80043dc:	201e      	movs	r0, #30
 80043de:	f000 f89b 	bl	8004518 <Lsm6ds3_readRegister>
 80043e2:	0002      	movs	r2, r0
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <Lsm6ds3_accelerationAvailable+0x28>)
 80043e6:	601a      	str	r2, [r3, #0]
  if (acc & 0x01) {
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <Lsm6ds3_accelerationAvailable+0x28>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2201      	movs	r2, #1
 80043ee:	4013      	ands	r3, r2
 80043f0:	d001      	beq.n	80043f6 <Lsm6ds3_accelerationAvailable+0x1e>
    return 1;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <Lsm6ds3_accelerationAvailable+0x20>
  }
  return 0;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	0018      	movs	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	2000027c 	.word	0x2000027c

08004404 <Lsm6ds3_readGyroscope>:

int Lsm6ds3_readGyroscope(float* x, float* y, float* z)
{
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  int16_t data[3]={0};
 8004410:	2410      	movs	r4, #16
 8004412:	193b      	adds	r3, r7, r4
 8004414:	0018      	movs	r0, r3
 8004416:	2306      	movs	r3, #6
 8004418:	001a      	movs	r2, r3
 800441a:	2100      	movs	r1, #0
 800441c:	f002 fa47 	bl	80068ae <memset>

  if (!Lsm6ds3_readRegisters(OUTX_L_G, (uint8_t*)data, sizeof(data))) {
 8004420:	193b      	adds	r3, r7, r4
 8004422:	2206      	movs	r2, #6
 8004424:	0019      	movs	r1, r3
 8004426:	2022      	movs	r0, #34	; 0x22
 8004428:	f000 f898 	bl	800455c <Lsm6ds3_readRegisters>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d107      	bne.n	8004440 <Lsm6ds3_readGyroscope+0x3c>
    x = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
    y = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	60bb      	str	r3, [r7, #8]
    z = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	607b      	str	r3, [r7, #4]
    return 0;
 800443c:	2300      	movs	r3, #0
 800443e:	e052      	b.n	80044e6 <Lsm6ds3_readGyroscope+0xe2>
  }
  *x = data[0] * 2000.0 / 32768.0;
 8004440:	2410      	movs	r4, #16
 8004442:	193b      	adds	r3, r7, r4
 8004444:	2200      	movs	r2, #0
 8004446:	5e9b      	ldrsh	r3, [r3, r2]
 8004448:	0018      	movs	r0, r3
 800444a:	f7fe fca5 	bl	8002d98 <__aeabi_i2d>
 800444e:	2200      	movs	r2, #0
 8004450:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <Lsm6ds3_readGyroscope+0xec>)
 8004452:	f7fd fe4f 	bl	80020f4 <__aeabi_dmul>
 8004456:	0002      	movs	r2, r0
 8004458:	000b      	movs	r3, r1
 800445a:	0010      	movs	r0, r2
 800445c:	0019      	movs	r1, r3
 800445e:	2200      	movs	r2, #0
 8004460:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <Lsm6ds3_readGyroscope+0xf0>)
 8004462:	f7fd fa45 	bl	80018f0 <__aeabi_ddiv>
 8004466:	0002      	movs	r2, r0
 8004468:	000b      	movs	r3, r1
 800446a:	0010      	movs	r0, r2
 800446c:	0019      	movs	r1, r3
 800446e:	f7fe fd31 	bl	8002ed4 <__aeabi_d2f>
 8004472:	1c02      	adds	r2, r0, #0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	601a      	str	r2, [r3, #0]
  *y = data[1] * 2000.0 / 32768.0;
 8004478:	193b      	adds	r3, r7, r4
 800447a:	2202      	movs	r2, #2
 800447c:	5e9b      	ldrsh	r3, [r3, r2]
 800447e:	0018      	movs	r0, r3
 8004480:	f7fe fc8a 	bl	8002d98 <__aeabi_i2d>
 8004484:	2200      	movs	r2, #0
 8004486:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <Lsm6ds3_readGyroscope+0xec>)
 8004488:	f7fd fe34 	bl	80020f4 <__aeabi_dmul>
 800448c:	0002      	movs	r2, r0
 800448e:	000b      	movs	r3, r1
 8004490:	0010      	movs	r0, r2
 8004492:	0019      	movs	r1, r3
 8004494:	2200      	movs	r2, #0
 8004496:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <Lsm6ds3_readGyroscope+0xf0>)
 8004498:	f7fd fa2a 	bl	80018f0 <__aeabi_ddiv>
 800449c:	0002      	movs	r2, r0
 800449e:	000b      	movs	r3, r1
 80044a0:	0010      	movs	r0, r2
 80044a2:	0019      	movs	r1, r3
 80044a4:	f7fe fd16 	bl	8002ed4 <__aeabi_d2f>
 80044a8:	1c02      	adds	r2, r0, #0
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	601a      	str	r2, [r3, #0]
  *z = data[2] * 2000.0 / 32768.0;
 80044ae:	193b      	adds	r3, r7, r4
 80044b0:	2204      	movs	r2, #4
 80044b2:	5e9b      	ldrsh	r3, [r3, r2]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7fe fc6f 	bl	8002d98 <__aeabi_i2d>
 80044ba:	2200      	movs	r2, #0
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <Lsm6ds3_readGyroscope+0xec>)
 80044be:	f7fd fe19 	bl	80020f4 <__aeabi_dmul>
 80044c2:	0002      	movs	r2, r0
 80044c4:	000b      	movs	r3, r1
 80044c6:	0010      	movs	r0, r2
 80044c8:	0019      	movs	r1, r3
 80044ca:	2200      	movs	r2, #0
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <Lsm6ds3_readGyroscope+0xf0>)
 80044ce:	f7fd fa0f 	bl	80018f0 <__aeabi_ddiv>
 80044d2:	0002      	movs	r2, r0
 80044d4:	000b      	movs	r3, r1
 80044d6:	0010      	movs	r0, r2
 80044d8:	0019      	movs	r1, r3
 80044da:	f7fe fcfb 	bl	8002ed4 <__aeabi_d2f>
 80044de:	1c02      	adds	r2, r0, #0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	601a      	str	r2, [r3, #0]
  return 1;
 80044e4:	2301      	movs	r3, #1
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b007      	add	sp, #28
 80044ec:	bd90      	pop	{r4, r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	409f4000 	.word	0x409f4000
 80044f4:	40e00000 	.word	0x40e00000

080044f8 <Lsm6ds3_gyroscopeAvailable>:

int Lsm6ds3_gyroscopeAvailable()
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  if (Lsm6ds3_readRegister(STATUS_REG) & 0x02) {
 80044fc:	201e      	movs	r0, #30
 80044fe:	f000 f80b 	bl	8004518 <Lsm6ds3_readRegister>
 8004502:	0003      	movs	r3, r0
 8004504:	2202      	movs	r2, #2
 8004506:	4013      	ands	r3, r2
 8004508:	d001      	beq.n	800450e <Lsm6ds3_gyroscopeAvailable+0x16>
    return 1;
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <Lsm6ds3_gyroscopeAvailable+0x18>
  }
  return 0;
 800450e:	2300      	movs	r3, #0
}
 8004510:	0018      	movs	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <Lsm6ds3_readRegister>:
{
  return 104.0F;
}
int readRegister;
int Lsm6ds3_readRegister(uint8_t address)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	0002      	movs	r2, r0
 8004520:	1dfb      	adds	r3, r7, #7
 8004522:	701a      	strb	r2, [r3, #0]
  uint8_t value;

  if (Lsm6ds3_readRegisters(address, &value, sizeof(value)) != 1) {
 8004524:	230f      	movs	r3, #15
 8004526:	18f9      	adds	r1, r7, r3
 8004528:	1dfb      	adds	r3, r7, #7
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2201      	movs	r2, #1
 800452e:	0018      	movs	r0, r3
 8004530:	f000 f814 	bl	800455c <Lsm6ds3_readRegisters>
 8004534:	0003      	movs	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d006      	beq.n	8004548 <Lsm6ds3_readRegister+0x30>
	  readRegister= -1;
 800453a:	4b07      	ldr	r3, [pc, #28]	; (8004558 <Lsm6ds3_readRegister+0x40>)
 800453c:	2201      	movs	r2, #1
 800453e:	4252      	negs	r2, r2
 8004540:	601a      	str	r2, [r3, #0]
	  return readRegister;
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <Lsm6ds3_readRegister+0x40>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	e002      	b.n	800454e <Lsm6ds3_readRegister+0x36>
  }
  return value;
 8004548:	230f      	movs	r3, #15
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	781b      	ldrb	r3, [r3, #0]
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b004      	add	sp, #16
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	20000280 	.word	0x20000280

0800455c <Lsm6ds3_readRegisters>:

int Lsm6ds3_readRegisters(uint8_t address, uint8_t* data, size_t length)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	240f      	movs	r4, #15
 8004568:	193b      	adds	r3, r7, r4
 800456a:	1c02      	adds	r2, r0, #0
 800456c:	701a      	strb	r2, [r3, #0]
	address |= 0x80;
 800456e:	193b      	adds	r3, r7, r4
 8004570:	193a      	adds	r2, r7, r4
 8004572:	7812      	ldrb	r2, [r2, #0]
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	4249      	negs	r1, r1
 8004578:	430a      	orrs	r2, r1
 800457a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	0059      	lsls	r1, r3, #1
 8004580:	23a0      	movs	r3, #160	; 0xa0
 8004582:	05db      	lsls	r3, r3, #23
 8004584:	2200      	movs	r2, #0
 8004586:	0018      	movs	r0, r3
 8004588:	f001 f9f2 	bl	8005970 <HAL_GPIO_WritePin>
	SPIx_readWrite(LSM6DS3_SPI, address);
 800458c:	193b      	adds	r3, r7, r4
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	4a12      	ldr	r2, [pc, #72]	; (80045dc <Lsm6ds3_readRegisters+0x80>)
 8004592:	0019      	movs	r1, r3
 8004594:	0010      	movs	r0, r2
 8004596:	f7ff fd3d 	bl	8004014 <SPIx_readWrite>
	for(int i=0; i<length; i++){
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	e00c      	b.n	80045ba <Lsm6ds3_readRegisters+0x5e>
		*(data+i) = SPIx_readWrite(LSM6DS3_SPI, 0x00);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	18d4      	adds	r4, r2, r3
 80045a6:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <Lsm6ds3_readRegisters+0x80>)
 80045a8:	2100      	movs	r1, #0
 80045aa:	0018      	movs	r0, r3
 80045ac:	f7ff fd32 	bl	8004014 <SPIx_readWrite>
 80045b0:	0003      	movs	r3, r0
 80045b2:	7023      	strb	r3, [r4, #0]
	for(int i=0; i<length; i++){
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	3301      	adds	r3, #1
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d8ee      	bhi.n	80045a0 <Lsm6ds3_readRegisters+0x44>
	}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	0059      	lsls	r1, r3, #1
 80045c6:	23a0      	movs	r3, #160	; 0xa0
 80045c8:	05db      	lsls	r3, r3, #23
 80045ca:	2201      	movs	r2, #1
 80045cc:	0018      	movs	r0, r3
 80045ce:	f001 f9cf 	bl	8005970 <HAL_GPIO_WritePin>
	return 1;
 80045d2:	2301      	movs	r3, #1
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b007      	add	sp, #28
 80045da:	bd90      	pop	{r4, r7, pc}
 80045dc:	40003800 	.word	0x40003800

080045e0 <Lsm6ds3_writeRegister>:

int Lsm6ds3_writeRegister(uint8_t address, uint8_t value)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	0002      	movs	r2, r0
 80045e8:	1dfb      	adds	r3, r7, #7
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	1dbb      	adds	r3, r7, #6
 80045ee:	1c0a      	adds	r2, r1, #0
 80045f0:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
	//gpio_write(gpio_port, gpio_pin, gpio_pinState);
	spi2_cs_low();
 80045f2:	f7ff fbdb 	bl	8003dac <spi2_cs_low>
	SPIx_readWrite(LSM6DS3_SPI, address);
 80045f6:	1dfb      	adds	r3, r7, #7
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	4a09      	ldr	r2, [pc, #36]	; (8004620 <Lsm6ds3_writeRegister+0x40>)
 80045fc:	0019      	movs	r1, r3
 80045fe:	0010      	movs	r0, r2
 8004600:	f7ff fd08 	bl	8004014 <SPIx_readWrite>
	SPIx_readWrite(LSM6DS3_SPI, value);
 8004604:	1dbb      	adds	r3, r7, #6
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	4a05      	ldr	r2, [pc, #20]	; (8004620 <Lsm6ds3_writeRegister+0x40>)
 800460a:	0019      	movs	r1, r3
 800460c:	0010      	movs	r0, r2
 800460e:	f7ff fd01 	bl	8004014 <SPIx_readWrite>
	spi2_cs_high();
 8004612:	f7ff fbd7 	bl	8003dc4 <spi2_cs_high>
}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	0018      	movs	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	b002      	add	sp, #8
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40003800 	.word	0x40003800

08004624 <Lsm6ds3_printRotationAngles>:

void Lsm6ds3_printRotationAngles() {
 8004624:	b5b0      	push	{r4, r5, r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af02      	add	r7, sp, #8
   float ax, ay, az;  // accelerometer values
   float gx, gy, gz;  // gyroscope values
   if (Lsm6ds3_accelerationAvailable() && Lsm6ds3_gyroscopeAvailable()
 800462a:	f7ff fed5 	bl	80043d8 <Lsm6ds3_accelerationAvailable>
 800462e:	1e03      	subs	r3, r0, #0
 8004630:	d032      	beq.n	8004698 <Lsm6ds3_printRotationAngles+0x74>
 8004632:	f7ff ff61 	bl	80044f8 <Lsm6ds3_gyroscopeAvailable>
 8004636:	1e03      	subs	r3, r0, #0
 8004638:	d02e      	beq.n	8004698 <Lsm6ds3_printRotationAngles+0x74>
      && Lsm6ds3_readAcceleration(&ax, &ay, &az) && Lsm6ds3_readGyroscope(&gx, &gy, &gz)) {
 800463a:	230c      	movs	r3, #12
 800463c:	18fa      	adds	r2, r7, r3
 800463e:	2310      	movs	r3, #16
 8004640:	18f9      	adds	r1, r7, r3
 8004642:	2314      	movs	r3, #20
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	0018      	movs	r0, r3
 8004648:	f7ff fe44 	bl	80042d4 <Lsm6ds3_readAcceleration>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d023      	beq.n	8004698 <Lsm6ds3_printRotationAngles+0x74>
 8004650:	003a      	movs	r2, r7
 8004652:	1d39      	adds	r1, r7, #4
 8004654:	2308      	movs	r3, #8
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	0018      	movs	r0, r3
 800465a:	f7ff fed3 	bl	8004404 <Lsm6ds3_readGyroscope>
 800465e:	1e03      	subs	r3, r0, #0
 8004660:	d01a      	beq.n	8004698 <Lsm6ds3_printRotationAngles+0x74>

	      Madgwick_updateIMU(gx, gy, gz, ax, ay, az);
 8004662:	68b8      	ldr	r0, [r7, #8]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	683c      	ldr	r4, [r7, #0]
 8004668:	697d      	ldr	r5, [r7, #20]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	9201      	str	r2, [sp, #4]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	1c2b      	adds	r3, r5, #0
 8004674:	1c22      	adds	r2, r4, #0
 8004676:	f7fe fded 	bl	8003254 <Madgwick_updateIMU>
	      roll  = Madgwick_getRoll();
 800467a:	f7ff fac1 	bl	8003c00 <Madgwick_getRoll>
 800467e:	1c02      	adds	r2, r0, #0
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <Lsm6ds3_printRotationAngles+0x7c>)
 8004682:	601a      	str	r2, [r3, #0]
	      pitch = Madgwick_getPitch();
 8004684:	f7ff fad4 	bl	8003c30 <Madgwick_getPitch>
 8004688:	1c02      	adds	r2, r0, #0
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <Lsm6ds3_printRotationAngles+0x80>)
 800468c:	601a      	str	r2, [r3, #0]
	      yaw   = Madgwick_getYaw();
 800468e:	f7ff fae7 	bl	8003c60 <Madgwick_getYaw>
 8004692:	1c02      	adds	r2, r0, #0
 8004694:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <Lsm6ds3_printRotationAngles+0x84>)
 8004696:	601a      	str	r2, [r3, #0]
   }
}
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b006      	add	sp, #24
 800469e:	bdb0      	pop	{r4, r5, r7, pc}
 80046a0:	2000026c 	.word	0x2000026c
 80046a4:	20000270 	.word	0x20000270
 80046a8:	20000274 	.word	0x20000274

080046ac <_write>:
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	e00b      	b.n	80046d6 <_write+0x2a>
		HAL_UART_Transmit(&huart1, (uint8_t*) ptr++, 1, 1000); //((*ptr++));
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	1c4b      	adds	r3, r1, #1
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	23fa      	movs	r3, #250	; 0xfa
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4807      	ldr	r0, [pc, #28]	; (80046e8 <_write+0x3c>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	f001 ff58 	bl	8006580 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3301      	adds	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	dbef      	blt.n	80046be <_write+0x12>
	}
	return len;
 80046de:	687b      	ldr	r3, [r7, #4]
}
 80046e0:	0018      	movs	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b006      	add	sp, #24
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	200002d0 	.word	0x200002d0

080046ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80046f0:	f000 fdcd 	bl	800528e <HAL_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
 // MX_GPIO_Init();
  //MX_ADC1_Init();
  MX_TIM2_Init();
 80046f4:	f000 f804 	bl	8004700 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  mainTask();
 80046f8:	f000 f864 	bl	80047c4 <mainTask>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80046fc:	e7fe      	b.n	80046fc <main+0x10>
	...

08004700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004706:	2314      	movs	r3, #20
 8004708:	18fb      	adds	r3, r7, r3
 800470a:	0018      	movs	r0, r3
 800470c:	230c      	movs	r3, #12
 800470e:	001a      	movs	r2, r3
 8004710:	2100      	movs	r1, #0
 8004712:	f002 f8cc 	bl	80068ae <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004716:	1d3b      	adds	r3, r7, #4
 8004718:	0018      	movs	r0, r3
 800471a:	2310      	movs	r3, #16
 800471c:	001a      	movs	r2, r3
 800471e:	2100      	movs	r1, #0
 8004720:	f002 f8c5 	bl	80068ae <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004724:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <MX_TIM2_Init+0xb4>)
 8004726:	2280      	movs	r2, #128	; 0x80
 8004728:	05d2      	lsls	r2, r2, #23
 800472a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800472c:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <MX_TIM2_Init+0xb4>)
 800472e:	2200      	movs	r2, #0
 8004730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004732:	4b20      	ldr	r3, [pc, #128]	; (80047b4 <MX_TIM2_Init+0xb4>)
 8004734:	2200      	movs	r2, #0
 8004736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <MX_TIM2_Init+0xb4>)
 800473a:	2201      	movs	r2, #1
 800473c:	4252      	negs	r2, r2
 800473e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004740:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <MX_TIM2_Init+0xb4>)
 8004742:	2200      	movs	r2, #0
 8004744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004746:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <MX_TIM2_Init+0xb4>)
 8004748:	2200      	movs	r2, #0
 800474a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800474c:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <MX_TIM2_Init+0xb4>)
 800474e:	0018      	movs	r0, r3
 8004750:	f001 f92b 	bl	80059aa <HAL_TIM_IC_Init>
 8004754:	1e03      	subs	r3, r0, #0
 8004756:	d001      	beq.n	800475c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004758:	f000 f82e 	bl	80047b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800475c:	2114      	movs	r1, #20
 800475e:	187b      	adds	r3, r7, r1
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004764:	187b      	adds	r3, r7, r1
 8004766:	2200      	movs	r2, #0
 8004768:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800476a:	187a      	adds	r2, r7, r1
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <MX_TIM2_Init+0xb4>)
 800476e:	0011      	movs	r1, r2
 8004770:	0018      	movs	r0, r3
 8004772:	f001 fe85 	bl	8006480 <HAL_TIMEx_MasterConfigSynchronization>
 8004776:	1e03      	subs	r3, r0, #0
 8004778:	d001      	beq.n	800477e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800477a:	f000 f81d 	bl	80047b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800477e:	1d3b      	adds	r3, r7, #4
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004784:	1d3b      	adds	r3, r7, #4
 8004786:	2201      	movs	r2, #1
 8004788:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	2200      	movs	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8004790:	1d3b      	adds	r3, r7, #4
 8004792:	2200      	movs	r2, #0
 8004794:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004796:	1d39      	adds	r1, r7, #4
 8004798:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <MX_TIM2_Init+0xb4>)
 800479a:	220c      	movs	r2, #12
 800479c:	0018      	movs	r0, r3
 800479e:	f001 fbbf 	bl	8005f20 <HAL_TIM_IC_ConfigChannel>
 80047a2:	1e03      	subs	r3, r0, #0
 80047a4:	d001      	beq.n	80047aa <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80047a6:	f000 f807 	bl	80047b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b008      	add	sp, #32
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	20000284 	.word	0x20000284

080047b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047bc:	b672      	cpsid	i
}
 80047be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047c0:	e7fe      	b.n	80047c0 <Error_Handler+0x8>
	...

080047c4 <mainTask>:
uint32_t freq_total01 =0,freq_total02 =0;

uint32_t time_=0;


int mainTask(void) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
	setup();
 80047c8:	f000 f832 	bl	8004830 <setup>
	while (1) {
		if(((uint32_t)(g_appConfig.miliCount - time_)) > 100){
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <mainTask+0x5c>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <mainTask+0x60>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b64      	cmp	r3, #100	; 0x64
 80047d8:	d905      	bls.n	80047e6 <mainTask+0x22>
			Lsm6ds3_printRotationAngles();
 80047da:	f7ff ff23 	bl	8004624 <Lsm6ds3_printRotationAngles>
			time_ = g_appConfig.miliCount;
 80047de:	4b10      	ldr	r3, [pc, #64]	; (8004820 <mainTask+0x5c>)
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <mainTask+0x60>)
 80047e4:	601a      	str	r2, [r3, #0]
		}

///////////////////////////////////////////////////
#if USING_EMA
		if (g_appConfig.wirteConfigNow) {
 80047e6:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <mainTask+0x5c>)
 80047e8:	7c9b      	ldrb	r3, [r3, #18]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d006      	beq.n	80047fc <mainTask+0x38>
			g_appConfig.wirteConfigNow = 0;
 80047ee:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <mainTask+0x5c>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	749a      	strb	r2, [r3, #18]
			printf("SKS_OIL_SENSOR wirte now\r\n");
 80047f4:	4b0c      	ldr	r3, [pc, #48]	; (8004828 <mainTask+0x64>)
 80047f6:	0018      	movs	r0, r3
 80047f8:	f002 fd5c 	bl	80072b4 <puts>
			//write_config();
		}

		handlerSensorData();
 80047fc:	f000 f892 	bl	8004924 <handlerSensorData>
		if ((uint32_t) (g_appConfig.miliCount - g_appConfig.lastRaise)
 8004800:	4b07      	ldr	r3, [pc, #28]	; (8004820 <mainTask+0x5c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <mainTask+0x5c>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	1ad2      	subs	r2, r2, r3
				>= sensorConfig.update_freq) {
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <mainTask+0x68>)
 800480c:	685b      	ldr	r3, [r3, #4]
		if ((uint32_t) (g_appConfig.miliCount - g_appConfig.lastRaise)
 800480e:	429a      	cmp	r2, r3
 8004810:	d3dc      	bcc.n	80047cc <mainTask+0x8>
			g_appConfig.lastRaise = g_appConfig.miliCount;
 8004812:	4b03      	ldr	r3, [pc, #12]	; (8004820 <mainTask+0x5c>)
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b02      	ldr	r3, [pc, #8]	; (8004820 <mainTask+0x5c>)
 8004818:	60da      	str	r2, [r3, #12]
			displaySensorData();
 800481a:	f000 fa33 	bl	8004c84 <displaySensorData>
		if(((uint32_t)(g_appConfig.miliCount - time_)) > 100){
 800481e:	e7d5      	b.n	80047cc <mainTask+0x8>
 8004820:	20000408 	.word	0x20000408
 8004824:	20000640 	.word	0x20000640
 8004828:	08009c40 	.word	0x08009c40
 800482c:	200003c0 	.word	0x200003c0

08004830 <setup>:
#endif
	}
	return 0;
}

static void setup(void){
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
	//MX_GPIO_Init();
	gpio_clock_init();
 8004834:	f7ff fa34 	bl	8003ca0 <gpio_clock_init>
	spi2Init();
 8004838:	f7ff fad0 	bl	8003ddc <spi2Init>
	usart_x0_init(115200);
 800483c:	23e1      	movs	r3, #225	; 0xe1
 800483e:	025b      	lsls	r3, r3, #9
 8004840:	0018      	movs	r0, r3
 8004842:	f7ff fc0f 	bl	8004064 <usart_x0_init>
	xdev_out(usart_x0_send);
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <setup+0x44>)
 8004848:	4a0b      	ldr	r2, [pc, #44]	; (8004878 <setup+0x48>)
 800484a:	601a      	str	r2, [r3, #0]
	Madgwick_init(SAMPLE_RATE);
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <setup+0x4c>)
 800484e:	1c18      	adds	r0, r3, #0
 8004850:	f7fe fcc8 	bl	80031e4 <Madgwick_init>
	if (!Lsm6ds3_int()) {
 8004854:	f7ff fd0e 	bl	8004274 <Lsm6ds3_int>
 8004858:	1e03      	subs	r3, r0, #0
 800485a:	d103      	bne.n	8004864 <setup+0x34>
		printf("LSM6DS3 installation failed\r\n");
 800485c:	4b08      	ldr	r3, [pc, #32]	; (8004880 <setup+0x50>)
 800485e:	0018      	movs	r0, r3
 8004860:	f002 fd28 	bl	80072b4 <puts>
	}
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8004864:	4b07      	ldr	r3, [pc, #28]	; (8004884 <setup+0x54>)
 8004866:	210c      	movs	r1, #12
 8004868:	0018      	movs	r0, r3
 800486a:	f001 f8f7 	bl	8005a5c <HAL_TIM_IC_Start_IT>
	//load_config();
}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000648 	.word	0x20000648
 8004878:	08004095 	.word	0x08004095
 800487c:	41200000 	.word	0x41200000
 8004880:	08009c5c 	.word	0x08009c5c
 8004884:	20000284 	.word	0x20000284

08004888 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

	if (TIM2 == htim->Instance)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	05db      	lsls	r3, r3, #23
 8004898:	429a      	cmp	r2, r3
 800489a:	d138      	bne.n	800490e <HAL_TIM_IC_CaptureCallback+0x86>
	{
		if (HAL_TIM_ACTIVE_CHANNEL_4 == htim->Channel) {
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	7f1b      	ldrb	r3, [r3, #28]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d134      	bne.n	800490e <HAL_TIM_IC_CaptureCallback+0x86>
					if (!sensorCapture.isFirstCap) {
 80048a4:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <HAL_TIM_IC_CaptureCallback+0x90>)
 80048a6:	7a1b      	ldrb	r3, [r3, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10b      	bne.n	80048c4 <HAL_TIM_IC_CaptureCallback+0x3c>
						sensorCapture.IC1_VAL = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	210c      	movs	r1, #12
 80048b0:	0018      	movs	r0, r3
 80048b2:	f001 fbd9 	bl	8006068 <HAL_TIM_ReadCapturedValue>
 80048b6:	0002      	movs	r2, r0
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_TIM_IC_CaptureCallback+0x90>)
 80048ba:	601a      	str	r2, [r3, #0]
						sensorCapture.isFirstCap = 1;
 80048bc:	4b16      	ldr	r3, [pc, #88]	; (8004918 <HAL_TIM_IC_CaptureCallback+0x90>)
 80048be:	2201      	movs	r2, #1
 80048c0:	721a      	strb	r2, [r3, #8]
						__HAL_TIM_SET_COUNTER(&htim2, 0);
						sensorCapture.isFirstCap = 0;
					}
				}
	}
}
 80048c2:	e024      	b.n	800490e <HAL_TIM_IC_CaptureCallback+0x86>
						sensorCapture.IC2_VAL = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	210c      	movs	r1, #12
 80048c8:	0018      	movs	r0, r3
 80048ca:	f001 fbcd 	bl	8006068 <HAL_TIM_ReadCapturedValue>
 80048ce:	0002      	movs	r2, r0
 80048d0:	4b11      	ldr	r3, [pc, #68]	; (8004918 <HAL_TIM_IC_CaptureCallback+0x90>)
 80048d2:	605a      	str	r2, [r3, #4]
						sensorCapture.diffirent = (uint32_t) (sensorCapture.IC2_VAL - sensorCapture.IC1_VAL);
 80048d4:	4b10      	ldr	r3, [pc, #64]	; (8004918 <HAL_TIM_IC_CaptureCallback+0x90>)
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <HAL_TIM_IC_CaptureCallback+0x90>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	1ad2      	subs	r2, r2, r3
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <HAL_TIM_IC_CaptureCallback+0x90>)
 80048e0:	60da      	str	r2, [r3, #12]
						sensorCapture.freq = TIM2_FREQ / sensorCapture.diffirent;
 80048e2:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <HAL_TIM_IC_CaptureCallback+0x90>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	0019      	movs	r1, r3
 80048e8:	480c      	ldr	r0, [pc, #48]	; (800491c <HAL_TIM_IC_CaptureCallback+0x94>)
 80048ea:	f7fb fc27 	bl	800013c <__udivsi3>
 80048ee:	0003      	movs	r3, r0
 80048f0:	001a      	movs	r2, r3
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_TIM_IC_CaptureCallback+0x90>)
 80048f4:	611a      	str	r2, [r3, #16]
						sensorCapture.freq_update =1;
 80048f6:	4a08      	ldr	r2, [pc, #32]	; (8004918 <HAL_TIM_IC_CaptureCallback+0x90>)
 80048f8:	2387      	movs	r3, #135	; 0x87
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	2101      	movs	r1, #1
 80048fe:	54d1      	strb	r1, [r2, r3]
						__HAL_TIM_SET_COUNTER(&htim2, 0);
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <HAL_TIM_IC_CaptureCallback+0x98>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2200      	movs	r2, #0
 8004906:	625a      	str	r2, [r3, #36]	; 0x24
						sensorCapture.isFirstCap = 0;
 8004908:	4b03      	ldr	r3, [pc, #12]	; (8004918 <HAL_TIM_IC_CaptureCallback+0x90>)
 800490a:	2200      	movs	r2, #0
 800490c:	721a      	strb	r2, [r3, #8]
}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b002      	add	sp, #8
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			; (mov r8, r8)
 8004918:	2000041c 	.word	0x2000041c
 800491c:	03d09000 	.word	0x03d09000
 8004920:	20000284 	.word	0x20000284

08004924 <handlerSensorData>:

static void handlerSensorData(void) {
 8004924:	b5b0      	push	{r4, r5, r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
	uint32_t tmp_sensor = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]

	if (sensorCapture.freq_update) { //pick up data
 800492e:	4ac7      	ldr	r2, [pc, #796]	; (8004c4c <handlerSensorData+0x328>)
 8004930:	2387      	movs	r3, #135	; 0x87
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	5cd3      	ldrb	r3, [r2, r3]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d100      	bne.n	800493c <handlerSensorData+0x18>
 800493a:	e183      	b.n	8004c44 <handlerSensorData+0x320>
		sensorCapture.freq_update = 0;
 800493c:	4ac3      	ldr	r2, [pc, #780]	; (8004c4c <handlerSensorData+0x328>)
 800493e:	2387      	movs	r3, #135	; 0x87
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	2100      	movs	r1, #0
 8004944:	54d1      	strb	r1, [r2, r3]
		if (!sensorCapture.freq) {
 8004946:	4bc1      	ldr	r3, [pc, #772]	; (8004c4c <handlerSensorData+0x328>)
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d104      	bne.n	8004958 <handlerSensorData+0x34>
			sensorAttr.errors = UNDER_FULL_FREQ;
 800494e:	4bc0      	ldr	r3, [pc, #768]	; (8004c50 <handlerSensorData+0x32c>)
 8004950:	2234      	movs	r2, #52	; 0x34
 8004952:	2102      	movs	r1, #2
 8004954:	5499      	strb	r1, [r3, r2]
			return;
 8004956:	e175      	b.n	8004c44 <handlerSensorData+0x320>
		}
		if ((sensor_avg.idx < sensor_avg.preiod)) {
 8004958:	4bbe      	ldr	r3, [pc, #760]	; (8004c54 <handlerSensorData+0x330>)
 800495a:	791a      	ldrb	r2, [r3, #4]
 800495c:	4bbd      	ldr	r3, [pc, #756]	; (8004c54 <handlerSensorData+0x330>)
 800495e:	795b      	ldrb	r3, [r3, #5]
 8004960:	429a      	cmp	r2, r3
 8004962:	d20d      	bcs.n	8004980 <handlerSensorData+0x5c>
			sensor_avg.sum += sensorCapture.freq;
 8004964:	4bbb      	ldr	r3, [pc, #748]	; (8004c54 <handlerSensorData+0x330>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4bb8      	ldr	r3, [pc, #736]	; (8004c4c <handlerSensorData+0x328>)
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	18d2      	adds	r2, r2, r3
 800496e:	4bb9      	ldr	r3, [pc, #740]	; (8004c54 <handlerSensorData+0x330>)
 8004970:	601a      	str	r2, [r3, #0]
			sensor_avg.idx++;
 8004972:	4bb8      	ldr	r3, [pc, #736]	; (8004c54 <handlerSensorData+0x330>)
 8004974:	791b      	ldrb	r3, [r3, #4]
 8004976:	3301      	adds	r3, #1
 8004978:	b2da      	uxtb	r2, r3
 800497a:	4bb6      	ldr	r3, [pc, #728]	; (8004c54 <handlerSensorData+0x330>)
 800497c:	711a      	strb	r2, [r3, #4]
			return;
 800497e:	e161      	b.n	8004c44 <handlerSensorData+0x320>
		} else {
			sensorCapture.time++;
 8004980:	4ab2      	ldr	r2, [pc, #712]	; (8004c4c <handlerSensorData+0x328>)
 8004982:	2388      	movs	r3, #136	; 0x88
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	58d3      	ldr	r3, [r2, r3]
 8004988:	1c59      	adds	r1, r3, #1
 800498a:	4ab0      	ldr	r2, [pc, #704]	; (8004c4c <handlerSensorData+0x328>)
 800498c:	2388      	movs	r3, #136	; 0x88
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	50d1      	str	r1, [r2, r3]
			tmp_sensor = sensor_avg.sum / sensor_avg.preiod;
 8004992:	4bb0      	ldr	r3, [pc, #704]	; (8004c54 <handlerSensorData+0x330>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4baf      	ldr	r3, [pc, #700]	; (8004c54 <handlerSensorData+0x330>)
 8004998:	795b      	ldrb	r3, [r3, #5]
 800499a:	0019      	movs	r1, r3
 800499c:	0010      	movs	r0, r2
 800499e:	f7fb fbcd 	bl	800013c <__udivsi3>
 80049a2:	0003      	movs	r3, r0
 80049a4:	61fb      	str	r3, [r7, #28]
			addStock((float) tmp_sensor, &SensorEMA10);
 80049a6:	69f8      	ldr	r0, [r7, #28]
 80049a8:	f7fc fc24 	bl	80011f4 <__aeabi_ui2f>
 80049ac:	1c03      	adds	r3, r0, #0
 80049ae:	1c18      	adds	r0, r3, #0
 80049b0:	f7fe fa48 	bl	8002e44 <__aeabi_f2d>
 80049b4:	4ba8      	ldr	r3, [pc, #672]	; (8004c58 <handlerSensorData+0x334>)
 80049b6:	001a      	movs	r2, r3
 80049b8:	f7fe fba6 	bl	8003108 <addStock>
			sensor_avg.sum = 0;
 80049bc:	4ba5      	ldr	r3, [pc, #660]	; (8004c54 <handlerSensorData+0x330>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
			sensor_avg.idx = 0;
 80049c2:	4ba4      	ldr	r3, [pc, #656]	; (8004c54 <handlerSensorData+0x330>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	711a      	strb	r2, [r3, #4]
			//}
			//if ((uint32_t) (g_appConfig.miliCount - sensorAttr.lastRasie) > 100)
			//{

			sensorAttr.lastRasie = g_appConfig.miliCount;
 80049c8:	4ba4      	ldr	r3, [pc, #656]	; (8004c5c <handlerSensorData+0x338>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4ba0      	ldr	r3, [pc, #640]	; (8004c50 <handlerSensorData+0x32c>)
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
			if (tmp_sensor < (uint32_t) (sensorConfig.full * 0.9)) {
 80049d0:	4ba3      	ldr	r3, [pc, #652]	; (8004c60 <handlerSensorData+0x33c>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	0018      	movs	r0, r3
 80049d6:	f7fe fa0f 	bl	8002df8 <__aeabi_ui2d>
 80049da:	4aa2      	ldr	r2, [pc, #648]	; (8004c64 <handlerSensorData+0x340>)
 80049dc:	4ba2      	ldr	r3, [pc, #648]	; (8004c68 <handlerSensorData+0x344>)
 80049de:	f7fd fb89 	bl	80020f4 <__aeabi_dmul>
 80049e2:	0002      	movs	r2, r0
 80049e4:	000b      	movs	r3, r1
 80049e6:	0010      	movs	r0, r2
 80049e8:	0019      	movs	r1, r3
 80049ea:	f7fb fd95 	bl	8000518 <__aeabi_d2uiz>
 80049ee:	0002      	movs	r2, r0
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d204      	bcs.n	8004a00 <handlerSensorData+0xdc>
				sensorAttr.errors = UNDER_FULL_FREQ;
 80049f6:	4b96      	ldr	r3, [pc, #600]	; (8004c50 <handlerSensorData+0x32c>)
 80049f8:	2234      	movs	r2, #52	; 0x34
 80049fa:	2102      	movs	r1, #2
 80049fc:	5499      	strb	r1, [r3, r2]
				return;
 80049fe:	e121      	b.n	8004c44 <handlerSensorData+0x320>
			}
			if (tmp_sensor > (uint32_t) (sensorConfig.empty * 1.1)) {
 8004a00:	4b97      	ldr	r3, [pc, #604]	; (8004c60 <handlerSensorData+0x33c>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7fe f9f7 	bl	8002df8 <__aeabi_ui2d>
 8004a0a:	4a98      	ldr	r2, [pc, #608]	; (8004c6c <handlerSensorData+0x348>)
 8004a0c:	4b98      	ldr	r3, [pc, #608]	; (8004c70 <handlerSensorData+0x34c>)
 8004a0e:	f7fd fb71 	bl	80020f4 <__aeabi_dmul>
 8004a12:	0002      	movs	r2, r0
 8004a14:	000b      	movs	r3, r1
 8004a16:	0010      	movs	r0, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	f7fb fd7d 	bl	8000518 <__aeabi_d2uiz>
 8004a1e:	0002      	movs	r2, r0
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d904      	bls.n	8004a30 <handlerSensorData+0x10c>
				sensorAttr.errors = OVER_EMPTY_FREQ;
 8004a26:	4b8a      	ldr	r3, [pc, #552]	; (8004c50 <handlerSensorData+0x32c>)
 8004a28:	2234      	movs	r2, #52	; 0x34
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	5499      	strb	r1, [r3, r2]
				return;
 8004a2e:	e109      	b.n	8004c44 <handlerSensorData+0x320>
			}

			sensorAttr.errors = NO_ERR;
 8004a30:	4b87      	ldr	r3, [pc, #540]	; (8004c50 <handlerSensorData+0x32c>)
 8004a32:	2234      	movs	r2, #52	; 0x34
 8004a34:	2100      	movs	r1, #0
 8004a36:	5499      	strb	r1, [r3, r2]

			if (sensorCapture.freq > sensorConfig.empty) {
 8004a38:	4b84      	ldr	r3, [pc, #528]	; (8004c4c <handlerSensorData+0x328>)
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	4b88      	ldr	r3, [pc, #544]	; (8004c60 <handlerSensorData+0x33c>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d904      	bls.n	8004a4e <handlerSensorData+0x12a>
				sensorAttr.freq = sensorConfig.empty;
 8004a44:	4b86      	ldr	r3, [pc, #536]	; (8004c60 <handlerSensorData+0x33c>)
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	4b81      	ldr	r3, [pc, #516]	; (8004c50 <handlerSensorData+0x32c>)
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	e00d      	b.n	8004a6a <handlerSensorData+0x146>
			} else if (sensorCapture.freq < sensorConfig.full) {
 8004a4e:	4b7f      	ldr	r3, [pc, #508]	; (8004c4c <handlerSensorData+0x328>)
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	4b83      	ldr	r3, [pc, #524]	; (8004c60 <handlerSensorData+0x33c>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d204      	bcs.n	8004a64 <handlerSensorData+0x140>
				sensorAttr.freq = sensorConfig.full;
 8004a5a:	4b81      	ldr	r3, [pc, #516]	; (8004c60 <handlerSensorData+0x33c>)
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	4b7c      	ldr	r3, [pc, #496]	; (8004c50 <handlerSensorData+0x32c>)
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e002      	b.n	8004a6a <handlerSensorData+0x146>
			} else {
				sensorAttr.freq = tmp_sensor;
 8004a64:	4b7a      	ldr	r3, [pc, #488]	; (8004c50 <handlerSensorData+0x32c>)
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	601a      	str	r2, [r3, #0]
			}

			//sensorAttr.freq = sensorCapture.freq;

			if (sensorAttr.freq >= sensorAttr.last_freq)
 8004a6a:	4b79      	ldr	r3, [pc, #484]	; (8004c50 <handlerSensorData+0x32c>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b78      	ldr	r3, [pc, #480]	; (8004c50 <handlerSensorData+0x32c>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d30d      	bcc.n	8004a92 <handlerSensorData+0x16e>
				sensorAttr.dif = sensorAttr.freq
 8004a76:	4b76      	ldr	r3, [pc, #472]	; (8004c50 <handlerSensorData+0x32c>)
 8004a78:	681c      	ldr	r4, [r3, #0]
						- (uint32_t) sensorAttr.last_ema_freq;
 8004a7a:	4b75      	ldr	r3, [pc, #468]	; (8004c50 <handlerSensorData+0x32c>)
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	0010      	movs	r0, r2
 8004a82:	0019      	movs	r1, r3
 8004a84:	f7fb fd48 	bl	8000518 <__aeabi_d2uiz>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	1ae2      	subs	r2, r4, r3
				sensorAttr.dif = sensorAttr.freq
 8004a8c:	4b70      	ldr	r3, [pc, #448]	; (8004c50 <handlerSensorData+0x32c>)
 8004a8e:	609a      	str	r2, [r3, #8]
 8004a90:	e00c      	b.n	8004aac <handlerSensorData+0x188>
			else
				sensorAttr.dif = (uint32_t) sensorAttr.last_ema_freq
 8004a92:	4b6f      	ldr	r3, [pc, #444]	; (8004c50 <handlerSensorData+0x32c>)
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	0010      	movs	r0, r2
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	f7fb fd3c 	bl	8000518 <__aeabi_d2uiz>
 8004aa0:	0002      	movs	r2, r0
						- sensorAttr.freq;
 8004aa2:	4b6b      	ldr	r3, [pc, #428]	; (8004c50 <handlerSensorData+0x32c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	1ad2      	subs	r2, r2, r3
				sensorAttr.dif = (uint32_t) sensorAttr.last_ema_freq
 8004aa8:	4b69      	ldr	r3, [pc, #420]	; (8004c50 <handlerSensorData+0x32c>)
 8004aaa:	609a      	str	r2, [r3, #8]

			if ((sensorAttr.dif > (uint32_t) (sensorAttr.last_freq / 10))
 8004aac:	4b68      	ldr	r3, [pc, #416]	; (8004c50 <handlerSensorData+0x32c>)
 8004aae:	689c      	ldr	r4, [r3, #8]
 8004ab0:	4b67      	ldr	r3, [pc, #412]	; (8004c50 <handlerSensorData+0x32c>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	210a      	movs	r1, #10
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f7fb fb40 	bl	800013c <__udivsi3>
 8004abc:	0003      	movs	r3, r0
 8004abe:	429c      	cmp	r4, r3
 8004ac0:	d90e      	bls.n	8004ae0 <handlerSensorData+0x1bc>
					&& (sensorAttr.cut_off < 10)
 8004ac2:	4b63      	ldr	r3, [pc, #396]	; (8004c50 <handlerSensorData+0x32c>)
 8004ac4:	899b      	ldrh	r3, [r3, #12]
 8004ac6:	2b09      	cmp	r3, #9
 8004ac8:	d80a      	bhi.n	8004ae0 <handlerSensorData+0x1bc>
					&& (sensorAttr.last_freq != 0)) {
 8004aca:	4b61      	ldr	r3, [pc, #388]	; (8004c50 <handlerSensorData+0x32c>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d006      	beq.n	8004ae0 <handlerSensorData+0x1bc>
				//skip
				sensorAttr.cut_off++;
 8004ad2:	4b5f      	ldr	r3, [pc, #380]	; (8004c50 <handlerSensorData+0x32c>)
 8004ad4:	899b      	ldrh	r3, [r3, #12]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	4b5d      	ldr	r3, [pc, #372]	; (8004c50 <handlerSensorData+0x32c>)
 8004adc:	819a      	strh	r2, [r3, #12]
				return;
 8004ade:	e0b1      	b.n	8004c44 <handlerSensorData+0x320>
			} else {
				//use this data
				addStock(sensorAttr.freq, &SensorEMA5);
 8004ae0:	4b5b      	ldr	r3, [pc, #364]	; (8004c50 <handlerSensorData+0x32c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7fe f987 	bl	8002df8 <__aeabi_ui2d>
 8004aea:	4b62      	ldr	r3, [pc, #392]	; (8004c74 <handlerSensorData+0x350>)
 8004aec:	001a      	movs	r2, r3
 8004aee:	f7fe fb0b 	bl	8003108 <addStock>
				sensorAttr.cut_off = 0;
 8004af2:	4b57      	ldr	r3, [pc, #348]	; (8004c50 <handlerSensorData+0x32c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	819a      	strh	r2, [r3, #12]
				sensorAttr.last_freq = sensorAttr.freq;
 8004af8:	4b55      	ldr	r3, [pc, #340]	; (8004c50 <handlerSensorData+0x32c>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4b54      	ldr	r3, [pc, #336]	; (8004c50 <handlerSensorData+0x32c>)
 8004afe:	605a      	str	r2, [r3, #4]
			}

			sensorAttr.ema_freq = getAverage();
 8004b00:	f7fe fb3c 	bl	800317c <getAverage>
 8004b04:	0002      	movs	r2, r0
 8004b06:	000b      	movs	r3, r1
 8004b08:	4951      	ldr	r1, [pc, #324]	; (8004c50 <handlerSensorData+0x32c>)
 8004b0a:	610a      	str	r2, [r1, #16]
 8004b0c:	614b      	str	r3, [r1, #20]

			if (sensorAttr.ema_freq >= sensorConfig.empty) {
 8004b0e:	4b50      	ldr	r3, [pc, #320]	; (8004c50 <handlerSensorData+0x32c>)
 8004b10:	691c      	ldr	r4, [r3, #16]
 8004b12:	695d      	ldr	r5, [r3, #20]
 8004b14:	4b52      	ldr	r3, [pc, #328]	; (8004c60 <handlerSensorData+0x33c>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7fe f96d 	bl	8002df8 <__aeabi_ui2d>
 8004b1e:	0002      	movs	r2, r0
 8004b20:	000b      	movs	r3, r1
 8004b22:	0020      	movs	r0, r4
 8004b24:	0029      	movs	r1, r5
 8004b26:	f7fb fcb3 	bl	8000490 <__aeabi_dcmpge>
 8004b2a:	1e03      	subs	r3, r0, #0
 8004b2c:	d012      	beq.n	8004b54 <handlerSensorData+0x230>

				sensorAttr.ema_freq = sensorConfig.empty;
 8004b2e:	4b4c      	ldr	r3, [pc, #304]	; (8004c60 <handlerSensorData+0x33c>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	0018      	movs	r0, r3
 8004b34:	f7fe f960 	bl	8002df8 <__aeabi_ui2d>
 8004b38:	0002      	movs	r2, r0
 8004b3a:	000b      	movs	r3, r1
 8004b3c:	4944      	ldr	r1, [pc, #272]	; (8004c50 <handlerSensorData+0x32c>)
 8004b3e:	610a      	str	r2, [r1, #16]
 8004b40:	614b      	str	r3, [r1, #20]
				sensorAttr.NF = 0;
 8004b42:	4943      	ldr	r1, [pc, #268]	; (8004c50 <handlerSensorData+0x32c>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	2300      	movs	r3, #0
 8004b48:	620a      	str	r2, [r1, #32]
 8004b4a:	624b      	str	r3, [r1, #36]	; 0x24
				sensorAttr.N = 0;
 8004b4c:	4b40      	ldr	r3, [pc, #256]	; (8004c50 <handlerSensorData+0x32c>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	851a      	strh	r2, [r3, #40]	; 0x28
 8004b52:	e077      	b.n	8004c44 <handlerSensorData+0x320>

			} else if (sensorAttr.ema_freq <= sensorConfig.full) {
 8004b54:	4b3e      	ldr	r3, [pc, #248]	; (8004c50 <handlerSensorData+0x32c>)
 8004b56:	691c      	ldr	r4, [r3, #16]
 8004b58:	695d      	ldr	r5, [r3, #20]
 8004b5a:	4b41      	ldr	r3, [pc, #260]	; (8004c60 <handlerSensorData+0x33c>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f7fe f94a 	bl	8002df8 <__aeabi_ui2d>
 8004b64:	0002      	movs	r2, r0
 8004b66:	000b      	movs	r3, r1
 8004b68:	0020      	movs	r0, r4
 8004b6a:	0029      	movs	r1, r5
 8004b6c:	f7fb fc7c 	bl	8000468 <__aeabi_dcmple>
 8004b70:	1e03      	subs	r3, r0, #0
 8004b72:	d012      	beq.n	8004b9a <handlerSensorData+0x276>

				sensorAttr.ema_freq = sensorConfig.full;
 8004b74:	4b3a      	ldr	r3, [pc, #232]	; (8004c60 <handlerSensorData+0x33c>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f7fe f93d 	bl	8002df8 <__aeabi_ui2d>
 8004b7e:	0002      	movs	r2, r0
 8004b80:	000b      	movs	r3, r1
 8004b82:	4933      	ldr	r1, [pc, #204]	; (8004c50 <handlerSensorData+0x32c>)
 8004b84:	610a      	str	r2, [r1, #16]
 8004b86:	614b      	str	r3, [r1, #20]
				sensorAttr.NF = 1.0;
 8004b88:	4931      	ldr	r1, [pc, #196]	; (8004c50 <handlerSensorData+0x32c>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	4b3a      	ldr	r3, [pc, #232]	; (8004c78 <handlerSensorData+0x354>)
 8004b8e:	620a      	str	r2, [r1, #32]
 8004b90:	624b      	str	r3, [r1, #36]	; 0x24
				sensorAttr.N = 1023;
 8004b92:	4b2f      	ldr	r3, [pc, #188]	; (8004c50 <handlerSensorData+0x32c>)
 8004b94:	4a39      	ldr	r2, [pc, #228]	; (8004c7c <handlerSensorData+0x358>)
 8004b96:	851a      	strh	r2, [r3, #40]	; 0x28
 8004b98:	e054      	b.n	8004c44 <handlerSensorData+0x320>
			} else {

				double Te = (double) (1.0 / (double) sensorConfig.empty);
 8004b9a:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <handlerSensorData+0x33c>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7fe f92a 	bl	8002df8 <__aeabi_ui2d>
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	000b      	movs	r3, r1
 8004ba8:	2000      	movs	r0, #0
 8004baa:	4933      	ldr	r1, [pc, #204]	; (8004c78 <handlerSensorData+0x354>)
 8004bac:	f7fc fea0 	bl	80018f0 <__aeabi_ddiv>
 8004bb0:	0002      	movs	r2, r0
 8004bb2:	000b      	movs	r3, r1
 8004bb4:	613a      	str	r2, [r7, #16]
 8004bb6:	617b      	str	r3, [r7, #20]
				double Tf = (double) (1.0 / (double) sensorConfig.full);
 8004bb8:	4b29      	ldr	r3, [pc, #164]	; (8004c60 <handlerSensorData+0x33c>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f7fe f91b 	bl	8002df8 <__aeabi_ui2d>
 8004bc2:	0002      	movs	r2, r0
 8004bc4:	000b      	movs	r3, r1
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	492b      	ldr	r1, [pc, #172]	; (8004c78 <handlerSensorData+0x354>)
 8004bca:	f7fc fe91 	bl	80018f0 <__aeabi_ddiv>
 8004bce:	0002      	movs	r2, r0
 8004bd0:	000b      	movs	r3, r1
 8004bd2:	60ba      	str	r2, [r7, #8]
 8004bd4:	60fb      	str	r3, [r7, #12]
				double Tx = (double) (1.0 / sensorAttr.ema_freq);
 8004bd6:	4b1e      	ldr	r3, [pc, #120]	; (8004c50 <handlerSensorData+0x32c>)
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	2000      	movs	r0, #0
 8004bde:	4926      	ldr	r1, [pc, #152]	; (8004c78 <handlerSensorData+0x354>)
 8004be0:	f7fc fe86 	bl	80018f0 <__aeabi_ddiv>
 8004be4:	0002      	movs	r2, r0
 8004be6:	000b      	movs	r3, r1
 8004be8:	603a      	str	r2, [r7, #0]
 8004bea:	607b      	str	r3, [r7, #4]
				sensorAttr.NF = (double) ((Tx - Te) / (Tf - Te));
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	6838      	ldr	r0, [r7, #0]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	f7fd fcea 	bl	80025cc <__aeabi_dsub>
 8004bf8:	0002      	movs	r2, r0
 8004bfa:	000b      	movs	r3, r1
 8004bfc:	0014      	movs	r4, r2
 8004bfe:	001d      	movs	r5, r3
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	68b8      	ldr	r0, [r7, #8]
 8004c06:	68f9      	ldr	r1, [r7, #12]
 8004c08:	f7fd fce0 	bl	80025cc <__aeabi_dsub>
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	000b      	movs	r3, r1
 8004c10:	0020      	movs	r0, r4
 8004c12:	0029      	movs	r1, r5
 8004c14:	f7fc fe6c 	bl	80018f0 <__aeabi_ddiv>
 8004c18:	0002      	movs	r2, r0
 8004c1a:	000b      	movs	r3, r1
 8004c1c:	490c      	ldr	r1, [pc, #48]	; (8004c50 <handlerSensorData+0x32c>)
 8004c1e:	620a      	str	r2, [r1, #32]
 8004c20:	624b      	str	r3, [r1, #36]	; 0x24
				sensorAttr.N = (uint16_t) (sensorAttr.NF * 1023);
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <handlerSensorData+0x32c>)
 8004c24:	6a18      	ldr	r0, [r3, #32]
 8004c26:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <handlerSensorData+0x35c>)
 8004c2c:	f7fd fa62 	bl	80020f4 <__aeabi_dmul>
 8004c30:	0002      	movs	r2, r0
 8004c32:	000b      	movs	r3, r1
 8004c34:	0010      	movs	r0, r2
 8004c36:	0019      	movs	r1, r3
 8004c38:	f7fb fc6e 	bl	8000518 <__aeabi_d2uiz>
 8004c3c:	0003      	movs	r3, r0
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <handlerSensorData+0x32c>)
 8004c42:	851a      	strh	r2, [r3, #40]	; 0x28
			}

		}
	}

}
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b008      	add	sp, #32
 8004c48:	bdb0      	pop	{r4, r5, r7, pc}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	2000041c 	.word	0x2000041c
 8004c50:	200003d0 	.word	0x200003d0
 8004c54:	20000050 	.word	0x20000050
 8004c58:	20000010 	.word	0x20000010
 8004c5c:	20000408 	.word	0x20000408
 8004c60:	200003c0 	.word	0x200003c0
 8004c64:	cccccccd 	.word	0xcccccccd
 8004c68:	3feccccc 	.word	0x3feccccc
 8004c6c:	9999999a 	.word	0x9999999a
 8004c70:	3ff19999 	.word	0x3ff19999
 8004c74:	20000000 	.word	0x20000000
 8004c78:	3ff00000 	.word	0x3ff00000
 8004c7c:	000003ff 	.word	0x000003ff
 8004c80:	408ff800 	.word	0x408ff800

08004c84 <displaySensorData>:

char buf__[100] = {0};
static void displaySensorData(void) {
 8004c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c86:	46d6      	mov	lr, sl
 8004c88:	464f      	mov	r7, r9
 8004c8a:	4646      	mov	r6, r8
 8004c8c:	b5c0      	push	{r6, r7, lr}
 8004c8e:	b096      	sub	sp, #88	; 0x58
 8004c90:	af12      	add	r7, sp, #72	; 0x48
	printf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%0.0f y=%0.0f z=%0.0f T=%d E=%x FU=%x EM=%x fM=%d\r\n", sensorCapture.freq, ((uint32_t)sensorAttr.ema_freq), 0, sensorAttr.N, 0, 0, 0, 0, 0,
 8004c92:	4b2b      	ldr	r3, [pc, #172]	; (8004d40 <displaySensorData+0xbc>)
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	4698      	mov	r8, r3
 8004c98:	4b2a      	ldr	r3, [pc, #168]	; (8004d44 <displaySensorData+0xc0>)
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	0010      	movs	r0, r2
 8004ca0:	0019      	movs	r1, r3
 8004ca2:	f7fb fc39 	bl	8000518 <__aeabi_d2uiz>
 8004ca6:	4681      	mov	r9, r0
 8004ca8:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <displaySensorData+0xc0>)
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cac:	469a      	mov	sl, r3
 8004cae:	4b26      	ldr	r3, [pc, #152]	; (8004d48 <displaySensorData+0xc4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	1c18      	adds	r0, r3, #0
 8004cb4:	f7fe f8c6 	bl	8002e44 <__aeabi_f2d>
 8004cb8:	0004      	movs	r4, r0
 8004cba:	000d      	movs	r5, r1
 8004cbc:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <displaySensorData+0xc8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	1c18      	adds	r0, r3, #0
 8004cc2:	f7fe f8bf 	bl	8002e44 <__aeabi_f2d>
 8004cc6:	60b8      	str	r0, [r7, #8]
 8004cc8:	60f9      	str	r1, [r7, #12]
 8004cca:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <displaySensorData+0xcc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	1c18      	adds	r0, r3, #0
 8004cd0:	f7fe f8b8 	bl	8002e44 <__aeabi_f2d>
 8004cd4:	6038      	str	r0, [r7, #0]
 8004cd6:	6079      	str	r1, [r7, #4]
 8004cd8:	491e      	ldr	r1, [pc, #120]	; (8004d54 <displaySensorData+0xd0>)
 8004cda:	6888      	ldr	r0, [r1, #8]
 8004cdc:	491d      	ldr	r1, [pc, #116]	; (8004d54 <displaySensorData+0xd0>)
 8004cde:	68c9      	ldr	r1, [r1, #12]
 8004ce0:	4e1d      	ldr	r6, [pc, #116]	; (8004d58 <displaySensorData+0xd4>)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	469c      	mov	ip, r3
 8004ce6:	4663      	mov	r3, ip
 8004ce8:	9310      	str	r3, [sp, #64]	; 0x40
 8004cea:	910f      	str	r1, [sp, #60]	; 0x3c
 8004cec:	900e      	str	r0, [sp, #56]	; 0x38
 8004cee:	2100      	movs	r1, #0
 8004cf0:	910d      	str	r1, [sp, #52]	; 0x34
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	910c      	str	r1, [sp, #48]	; 0x30
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	920a      	str	r2, [sp, #40]	; 0x28
 8004cfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	9208      	str	r2, [sp, #32]
 8004d04:	9309      	str	r3, [sp, #36]	; 0x24
 8004d06:	9406      	str	r4, [sp, #24]
 8004d08:	9507      	str	r5, [sp, #28]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	9305      	str	r3, [sp, #20]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	9304      	str	r3, [sp, #16]
 8004d12:	2300      	movs	r3, #0
 8004d14:	9303      	str	r3, [sp, #12]
 8004d16:	2300      	movs	r3, #0
 8004d18:	9302      	str	r3, [sp, #8]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	4653      	mov	r3, sl
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	2300      	movs	r3, #0
 8004d24:	464a      	mov	r2, r9
 8004d26:	4641      	mov	r1, r8
 8004d28:	0030      	movs	r0, r6
 8004d2a:	f002 fa37 	bl	800719c <iprintf>
			roll,pitch,yaw,
			0, 0, sensorConfig.full, sensorConfig.empty, 0);
}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b004      	add	sp, #16
 8004d34:	bce0      	pop	{r5, r6, r7}
 8004d36:	46ba      	mov	sl, r7
 8004d38:	46b1      	mov	r9, r6
 8004d3a:	46a8      	mov	r8, r5
 8004d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	2000041c 	.word	0x2000041c
 8004d44:	200003d0 	.word	0x200003d0
 8004d48:	2000026c 	.word	0x2000026c
 8004d4c:	20000270 	.word	0x20000270
 8004d50:	20000274 	.word	0x20000274
 8004d54:	200003c0 	.word	0x200003c0
 8004d58:	08009c7c 	.word	0x08009c7c

08004d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d62:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <HAL_MspInit+0x44>)
 8004d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d66:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <HAL_MspInit+0x44>)
 8004d68:	2101      	movs	r1, #1
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8004d6e:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <HAL_MspInit+0x44>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	2201      	movs	r2, #1
 8004d74:	4013      	ands	r3, r2
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <HAL_MspInit+0x44>)
 8004d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d7e:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <HAL_MspInit+0x44>)
 8004d80:	2180      	movs	r1, #128	; 0x80
 8004d82:	0549      	lsls	r1, r1, #21
 8004d84:	430a      	orrs	r2, r1
 8004d86:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <HAL_MspInit+0x44>)
 8004d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d8c:	2380      	movs	r3, #128	; 0x80
 8004d8e:	055b      	lsls	r3, r3, #21
 8004d90:	4013      	ands	r3, r2
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b002      	add	sp, #8
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	40021000 	.word	0x40021000

08004da4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004da4:	b590      	push	{r4, r7, lr}
 8004da6:	b08b      	sub	sp, #44	; 0x2c
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dac:	2414      	movs	r4, #20
 8004dae:	193b      	adds	r3, r7, r4
 8004db0:	0018      	movs	r0, r3
 8004db2:	2314      	movs	r3, #20
 8004db4:	001a      	movs	r2, r3
 8004db6:	2100      	movs	r1, #0
 8004db8:	f001 fd79 	bl	80068ae <memset>
  if(htim_ic->Instance==TIM2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	05db      	lsls	r3, r3, #23
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d136      	bne.n	8004e36 <HAL_TIM_IC_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <HAL_TIM_IC_MspInit+0x9c>)
 8004dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dcc:	4b1c      	ldr	r3, [pc, #112]	; (8004e40 <HAL_TIM_IC_MspInit+0x9c>)
 8004dce:	2101      	movs	r1, #1
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <HAL_TIM_IC_MspInit+0x9c>)
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd8:	2201      	movs	r2, #1
 8004dda:	4013      	ands	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004de0:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <HAL_TIM_IC_MspInit+0x9c>)
 8004de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de4:	4b16      	ldr	r3, [pc, #88]	; (8004e40 <HAL_TIM_IC_MspInit+0x9c>)
 8004de6:	2101      	movs	r1, #1
 8004de8:	430a      	orrs	r2, r1
 8004dea:	635a      	str	r2, [r3, #52]	; 0x34
 8004dec:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <HAL_TIM_IC_MspInit+0x9c>)
 8004dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df0:	2201      	movs	r2, #1
 8004df2:	4013      	ands	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004df8:	0021      	movs	r1, r4
 8004dfa:	187b      	adds	r3, r7, r1
 8004dfc:	2208      	movs	r2, #8
 8004dfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e00:	187b      	adds	r3, r7, r1
 8004e02:	2202      	movs	r2, #2
 8004e04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e06:	187b      	adds	r3, r7, r1
 8004e08:	2200      	movs	r2, #0
 8004e0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0c:	187b      	adds	r3, r7, r1
 8004e0e:	2200      	movs	r2, #0
 8004e10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004e12:	187b      	adds	r3, r7, r1
 8004e14:	2202      	movs	r2, #2
 8004e16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e18:	187a      	adds	r2, r7, r1
 8004e1a:	23a0      	movs	r3, #160	; 0xa0
 8004e1c:	05db      	lsls	r3, r3, #23
 8004e1e:	0011      	movs	r1, r2
 8004e20:	0018      	movs	r0, r3
 8004e22:	f000 fc41 	bl	80056a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004e26:	2200      	movs	r2, #0
 8004e28:	2100      	movs	r1, #0
 8004e2a:	200f      	movs	r0, #15
 8004e2c:	f000 fb58 	bl	80054e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e30:	200f      	movs	r0, #15
 8004e32:	f000 fb6a 	bl	800550a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b00b      	add	sp, #44	; 0x2c
 8004e3c:	bd90      	pop	{r4, r7, pc}
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	40021000 	.word	0x40021000

08004e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e48:	e7fe      	b.n	8004e48 <NMI_Handler+0x4>

08004e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e4e:	e7fe      	b.n	8004e4e <HardFault_Handler+0x4>

08004e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_appConfig.miliCount++;
 8004e68:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <SysTick_Handler+0x18>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <SysTick_Handler+0x18>)
 8004e70:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e72:	f000 fa6d 	bl	8005350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000408 	.word	0x20000408

08004e80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <DMA1_Channel1_IRQHandler+0x14>)
 8004e86:	0018      	movs	r0, r3
 8004e88:	f000 fb5c 	bl	8005544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e8c:	46c0      	nop			; (mov r8, r8)
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	20000364 	.word	0x20000364

08004e98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004e9c:	4b03      	ldr	r3, [pc, #12]	; (8004eac <TIM2_IRQHandler+0x14>)
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f000 ff0c 	bl	8005cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ea4:	46c0      	nop			; (mov r8, r8)
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	20000284 	.word	0x20000284

08004eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
	return 1;
 8004eb4:	2301      	movs	r3, #1
}
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <_kill>:

int _kill(int pid, int sig)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004ec6:	f001 fcbf 	bl	8006848 <__errno>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	2216      	movs	r2, #22
 8004ece:	601a      	str	r2, [r3, #0]
	return -1;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	425b      	negs	r3, r3
}
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b002      	add	sp, #8
 8004eda:	bd80      	pop	{r7, pc}

08004edc <_exit>:

void _exit (int status)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	425a      	negs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	0011      	movs	r1, r2
 8004eec:	0018      	movs	r0, r3
 8004eee:	f7ff ffe5 	bl	8004ebc <_kill>
	while (1) {}		/* Make sure we hang here */
 8004ef2:	e7fe      	b.n	8004ef2 <_exit+0x16>

08004ef4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f00:	2300      	movs	r3, #0
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e00a      	b.n	8004f1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f06:	e000      	b.n	8004f0a <_read+0x16>
 8004f08:	bf00      	nop
 8004f0a:	0001      	movs	r1, r0
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	60ba      	str	r2, [r7, #8]
 8004f12:	b2ca      	uxtb	r2, r1
 8004f14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	dbf0      	blt.n	8004f06 <_read+0x12>
	}

return len;
 8004f24:	687b      	ldr	r3, [r7, #4]
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b006      	add	sp, #24
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
	return -1;
 8004f36:	2301      	movs	r3, #1
 8004f38:	425b      	negs	r3, r3
}
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b002      	add	sp, #8
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2280      	movs	r2, #128	; 0x80
 8004f50:	0192      	lsls	r2, r2, #6
 8004f52:	605a      	str	r2, [r3, #4]
	return 0;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	0018      	movs	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b002      	add	sp, #8
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <_isatty>:

int _isatty(int file)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
	return 1;
 8004f66:	2301      	movs	r3, #1
}
 8004f68:	0018      	movs	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	b002      	add	sp, #8
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	0018      	movs	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b004      	add	sp, #16
 8004f84:	bd80      	pop	{r7, pc}
	...

08004f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f90:	4a14      	ldr	r2, [pc, #80]	; (8004fe4 <_sbrk+0x5c>)
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <_sbrk+0x60>)
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f9c:	4b13      	ldr	r3, [pc, #76]	; (8004fec <_sbrk+0x64>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fa4:	4b11      	ldr	r3, [pc, #68]	; (8004fec <_sbrk+0x64>)
 8004fa6:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <_sbrk+0x68>)
 8004fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <_sbrk+0x64>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	18d3      	adds	r3, r2, r3
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d207      	bcs.n	8004fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fb8:	f001 fc46 	bl	8006848 <__errno>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	220c      	movs	r2, #12
 8004fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	425b      	negs	r3, r3
 8004fc6:	e009      	b.n	8004fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <_sbrk+0x64>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fce:	4b07      	ldr	r3, [pc, #28]	; (8004fec <_sbrk+0x64>)
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	18d2      	adds	r2, r2, r3
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <_sbrk+0x64>)
 8004fd8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004fda:	68fb      	ldr	r3, [r7, #12]
}
 8004fdc:	0018      	movs	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b006      	add	sp, #24
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	20002000 	.word	0x20002000
 8004fe8:	00000400 	.word	0x00000400
 8004fec:	20000644 	.word	0x20000644
 8004ff0:	20000660 	.word	0x20000660

08004ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ff4:	b590      	push	{r4, r7, lr}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	0002      	movs	r2, r0
 8004ffc:	6039      	str	r1, [r7, #0]
 8004ffe:	1dfb      	adds	r3, r7, #7
 8005000:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005002:	1dfb      	adds	r3, r7, #7
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b7f      	cmp	r3, #127	; 0x7f
 8005008:	d828      	bhi.n	800505c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800500a:	4a2f      	ldr	r2, [pc, #188]	; (80050c8 <__NVIC_SetPriority+0xd4>)
 800500c:	1dfb      	adds	r3, r7, #7
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	b25b      	sxtb	r3, r3
 8005012:	089b      	lsrs	r3, r3, #2
 8005014:	33c0      	adds	r3, #192	; 0xc0
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	589b      	ldr	r3, [r3, r2]
 800501a:	1dfa      	adds	r2, r7, #7
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	0011      	movs	r1, r2
 8005020:	2203      	movs	r2, #3
 8005022:	400a      	ands	r2, r1
 8005024:	00d2      	lsls	r2, r2, #3
 8005026:	21ff      	movs	r1, #255	; 0xff
 8005028:	4091      	lsls	r1, r2
 800502a:	000a      	movs	r2, r1
 800502c:	43d2      	mvns	r2, r2
 800502e:	401a      	ands	r2, r3
 8005030:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	22ff      	movs	r2, #255	; 0xff
 8005038:	401a      	ands	r2, r3
 800503a:	1dfb      	adds	r3, r7, #7
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	0018      	movs	r0, r3
 8005040:	2303      	movs	r3, #3
 8005042:	4003      	ands	r3, r0
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005048:	481f      	ldr	r0, [pc, #124]	; (80050c8 <__NVIC_SetPriority+0xd4>)
 800504a:	1dfb      	adds	r3, r7, #7
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b25b      	sxtb	r3, r3
 8005050:	089b      	lsrs	r3, r3, #2
 8005052:	430a      	orrs	r2, r1
 8005054:	33c0      	adds	r3, #192	; 0xc0
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800505a:	e031      	b.n	80050c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800505c:	4a1b      	ldr	r2, [pc, #108]	; (80050cc <__NVIC_SetPriority+0xd8>)
 800505e:	1dfb      	adds	r3, r7, #7
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	0019      	movs	r1, r3
 8005064:	230f      	movs	r3, #15
 8005066:	400b      	ands	r3, r1
 8005068:	3b08      	subs	r3, #8
 800506a:	089b      	lsrs	r3, r3, #2
 800506c:	3306      	adds	r3, #6
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	18d3      	adds	r3, r2, r3
 8005072:	3304      	adds	r3, #4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	1dfa      	adds	r2, r7, #7
 8005078:	7812      	ldrb	r2, [r2, #0]
 800507a:	0011      	movs	r1, r2
 800507c:	2203      	movs	r2, #3
 800507e:	400a      	ands	r2, r1
 8005080:	00d2      	lsls	r2, r2, #3
 8005082:	21ff      	movs	r1, #255	; 0xff
 8005084:	4091      	lsls	r1, r2
 8005086:	000a      	movs	r2, r1
 8005088:	43d2      	mvns	r2, r2
 800508a:	401a      	ands	r2, r3
 800508c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	019b      	lsls	r3, r3, #6
 8005092:	22ff      	movs	r2, #255	; 0xff
 8005094:	401a      	ands	r2, r3
 8005096:	1dfb      	adds	r3, r7, #7
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	0018      	movs	r0, r3
 800509c:	2303      	movs	r3, #3
 800509e:	4003      	ands	r3, r0
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050a4:	4809      	ldr	r0, [pc, #36]	; (80050cc <__NVIC_SetPriority+0xd8>)
 80050a6:	1dfb      	adds	r3, r7, #7
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	001c      	movs	r4, r3
 80050ac:	230f      	movs	r3, #15
 80050ae:	4023      	ands	r3, r4
 80050b0:	3b08      	subs	r3, #8
 80050b2:	089b      	lsrs	r3, r3, #2
 80050b4:	430a      	orrs	r2, r1
 80050b6:	3306      	adds	r3, #6
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	18c3      	adds	r3, r0, r3
 80050bc:	3304      	adds	r3, #4
 80050be:	601a      	str	r2, [r3, #0]
}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b003      	add	sp, #12
 80050c6:	bd90      	pop	{r4, r7, pc}
 80050c8:	e000e100 	.word	0xe000e100
 80050cc:	e000ed00 	.word	0xe000ed00

080050d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	1e5a      	subs	r2, r3, #1
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	045b      	lsls	r3, r3, #17
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d301      	bcc.n	80050e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050e4:	2301      	movs	r3, #1
 80050e6:	e010      	b.n	800510a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050e8:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <SysTick_Config+0x44>)
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	3a01      	subs	r2, #1
 80050ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050f0:	2301      	movs	r3, #1
 80050f2:	425b      	negs	r3, r3
 80050f4:	2103      	movs	r1, #3
 80050f6:	0018      	movs	r0, r3
 80050f8:	f7ff ff7c 	bl	8004ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <SysTick_Config+0x44>)
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005102:	4b04      	ldr	r3, [pc, #16]	; (8005114 <SysTick_Config+0x44>)
 8005104:	2207      	movs	r2, #7
 8005106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005108:	2300      	movs	r3, #0
}
 800510a:	0018      	movs	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	b002      	add	sp, #8
 8005110:	bd80      	pop	{r7, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	e000e010 	.word	0xe000e010

08005118 <systemInit>:

static void SetSysClock(void);
static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
static void systickConfig(void);

void systemInit(void) {
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
	SetSysClock();
 800511c:	f000 f828 	bl	8005170 <SetSysClock>
	systickConfig();
 8005120:	f000 f818 	bl	8005154 <systickConfig>
}
 8005124:	46c0      	nop			; (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <SysTick_CLKSourceConfig>:

static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b04      	cmp	r3, #4
 8005138:	d105      	bne.n	8005146 <SysTick_CLKSourceConfig+0x1a>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <SysTick_CLKSourceConfig+0x24>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b04      	ldr	r3, [pc, #16]	; (8005150 <SysTick_CLKSourceConfig+0x24>)
 8005140:	2104      	movs	r1, #4
 8005142:	430a      	orrs	r2, r1
 8005144:	601a      	str	r2, [r3, #0]
	}
}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	b002      	add	sp, #8
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	e000e010 	.word	0xe000e010

08005154 <systickConfig>:

static void systickConfig(void) {
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 8005158:	2004      	movs	r0, #4
 800515a:	f7ff ffe7 	bl	800512c <SysTick_CLKSourceConfig>
	SysTick_Config(systemClock / 1000);
 800515e:	23fa      	movs	r3, #250	; 0xfa
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	0018      	movs	r0, r3
 8005164:	f7ff ffb4 	bl	80050d0 <SysTick_Config>
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <SetSysClock>:

static void SetSysClock(void) {
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t) RCC_CR_HSEON);
 8005174:	4b2b      	ldr	r3, [pc, #172]	; (8005224 <SetSysClock+0xb4>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b2a      	ldr	r3, [pc, #168]	; (8005224 <SetSysClock+0xb4>)
 800517a:	2180      	movs	r1, #128	; 0x80
 800517c:	0249      	lsls	r1, r1, #9
 800517e:	430a      	orrs	r2, r1
 8005180:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	4b27      	ldr	r3, [pc, #156]	; (8005224 <SetSysClock+0xb4>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	029b      	lsls	r3, r3, #10
 800518c:	4013      	ands	r3, r2
 800518e:	d0f9      	beq.n	8005184 <SetSysClock+0x14>
		;

	/* Enable Prefetch Buffer and set Flash Latency */
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2;
 8005190:	4b25      	ldr	r3, [pc, #148]	; (8005228 <SetSysClock+0xb8>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b24      	ldr	r3, [pc, #144]	; (8005228 <SetSysClock+0xb8>)
 8005196:	2182      	movs	r1, #130	; 0x82
 8005198:	0049      	lsls	r1, r1, #1
 800519a:	430a      	orrs	r2, r1
 800519c:	601a      	str	r2, [r3, #0]
	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// APB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_HPRE);
 800519e:	4b21      	ldr	r3, [pc, #132]	; (8005224 <SetSysClock+0xb4>)
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	4b20      	ldr	r3, [pc, #128]	; (8005224 <SetSysClock+0xb4>)
 80051a4:	4921      	ldr	r1, [pc, #132]	; (800522c <SetSysClock+0xbc>)
 80051a6:	400a      	ands	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]
	// AHB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_PPRE);
 80051aa:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <SetSysClock+0xb4>)
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <SetSysClock+0xb4>)
 80051b0:	491f      	ldr	r1, [pc, #124]	; (8005230 <SetSysClock+0xc0>)
 80051b2:	400a      	ands	r2, r1
 80051b4:	609a      	str	r2, [r3, #8]

	//PLL INPUT CLOCK SOURCE HSE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 80051b6:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <SetSysClock+0xb4>)
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <SetSysClock+0xb4>)
 80051bc:	2103      	movs	r1, #3
 80051be:	430a      	orrs	r2, r1
 80051c0:	60da      	str	r2, [r3, #12]

	/* PLL configuration = HSE = 64 MHz */
	//PLLM = 1
	//PLLN = 16
	//PLLR = 2
	RCC->PLLCFGR &= (uint32_t) ((uint32_t) ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN
 80051c2:	4b18      	ldr	r3, [pc, #96]	; (8005224 <SetSysClock+0xb4>)
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	4b17      	ldr	r3, [pc, #92]	; (8005224 <SetSysClock+0xb4>)
 80051c8:	491a      	ldr	r1, [pc, #104]	; (8005234 <SetSysClock+0xc4>)
 80051ca:	400a      	ands	r2, r1
 80051cc:	60da      	str	r2, [r3, #12]
			| RCC_PLLCFGR_PLLR));

	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4)
 80051ce:	4b15      	ldr	r3, [pc, #84]	; (8005224 <SetSysClock+0xb4>)
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	4b14      	ldr	r3, [pc, #80]	; (8005224 <SetSysClock+0xb4>)
 80051d4:	4918      	ldr	r1, [pc, #96]	; (8005238 <SetSysClock+0xc8>)
 80051d6:	430a      	orrs	r2, r1
 80051d8:	60da      	str	r2, [r3, #12]
			| (RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLREN) | (RCC_PLLCFGR_PLLQEN)
			| (RCC_PLLCFGR_PLLSRC_HSE);

	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 80051da:	4b12      	ldr	r3, [pc, #72]	; (8005224 <SetSysClock+0xb4>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	4b11      	ldr	r3, [pc, #68]	; (8005224 <SetSysClock+0xb4>)
 80051e0:	2180      	movs	r1, #128	; 0x80
 80051e2:	0449      	lsls	r1, r1, #17
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]

	/* Wait till PLL is ready */
	while ((RCC->CR & RCC_CR_PLLRDY) == 0) {
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	4b0e      	ldr	r3, [pc, #56]	; (8005224 <SetSysClock+0xb4>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	2380      	movs	r3, #128	; 0x80
 80051f0:	049b      	lsls	r3, r3, #18
 80051f2:	4013      	ands	r3, r2
 80051f4:	d0f9      	beq.n	80051ea <SetSysClock+0x7a>
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (uint32_t) ((uint32_t) ~(RCC_CFGR_SW));
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <SetSysClock+0xb4>)
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <SetSysClock+0xb4>)
 80051fc:	2107      	movs	r1, #7
 80051fe:	438a      	bics	r2, r1
 8005200:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= (uint32_t) RCC_CFGR_SW_1;
 8005202:	4b08      	ldr	r3, [pc, #32]	; (8005224 <SetSysClock+0xb4>)
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	4b07      	ldr	r3, [pc, #28]	; (8005224 <SetSysClock+0xb4>)
 8005208:	2102      	movs	r1, #2
 800520a:	430a      	orrs	r2, r1
 800520c:	609a      	str	r2, [r3, #8]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1)
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <SetSysClock+0xb4>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2238      	movs	r2, #56	; 0x38
 8005216:	4013      	ands	r3, r2
 8005218:	2b10      	cmp	r3, #16
 800521a:	d1f9      	bne.n	8005210 <SetSysClock+0xa0>
		;
}
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40021000 	.word	0x40021000
 8005228:	40022000 	.word	0x40022000
 800522c:	fffff0ff 	.word	0xfffff0ff
 8005230:	ffff8fff 	.word	0xffff8fff
 8005234:	1fff808f 	.word	0x1fff808f
 8005238:	31001003 	.word	0x31001003

0800523c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800523c:	480d      	ldr	r0, [pc, #52]	; (8005274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800523e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  systemInit
 8005240:	f7ff ff6a 	bl	8005118 <systemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005244:	480c      	ldr	r0, [pc, #48]	; (8005278 <LoopForever+0x6>)
  ldr r1, =_edata
 8005246:	490d      	ldr	r1, [pc, #52]	; (800527c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005248:	4a0d      	ldr	r2, [pc, #52]	; (8005280 <LoopForever+0xe>)
  movs r3, #0
 800524a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800524c:	e002      	b.n	8005254 <LoopCopyDataInit>

0800524e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800524e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005252:	3304      	adds	r3, #4

08005254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005258:	d3f9      	bcc.n	800524e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800525a:	4a0a      	ldr	r2, [pc, #40]	; (8005284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800525c:	4c0a      	ldr	r4, [pc, #40]	; (8005288 <LoopForever+0x16>)
  movs r3, #0
 800525e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005260:	e001      	b.n	8005266 <LoopFillZerobss>

08005262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005264:	3204      	adds	r2, #4

08005266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005268:	d3fb      	bcc.n	8005262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800526a:	f001 faf3 	bl	8006854 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800526e:	f7ff fa3d 	bl	80046ec <main>

08005272 <LoopForever>:

LoopForever:
  b LoopForever
 8005272:	e7fe      	b.n	8005272 <LoopForever>
  ldr   r0, =_estack
 8005274:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800527c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8005280:	0800a274 	.word	0x0800a274
  ldr r2, =_sbss
 8005284:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8005288:	20000660 	.word	0x20000660

0800528c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800528c:	e7fe      	b.n	800528c <ADC1_IRQHandler>

0800528e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005294:	1dfb      	adds	r3, r7, #7
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
//  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800529a:	2003      	movs	r0, #3
 800529c:	f000 f80e 	bl	80052bc <HAL_InitTick>
 80052a0:	1e03      	subs	r3, r0, #0
 80052a2:	d003      	beq.n	80052ac <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80052a4:	1dfb      	adds	r3, r7, #7
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e001      	b.n	80052b0 <HAL_Init+0x22>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80052ac:	f7ff fd56 	bl	8004d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80052b0:	1dfb      	adds	r3, r7, #7
 80052b2:	781b      	ldrb	r3, [r3, #0]
}
 80052b4:	0018      	movs	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	b002      	add	sp, #8
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80052c4:	230f      	movs	r3, #15
 80052c6:	18fb      	adds	r3, r7, r3
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80052cc:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <HAL_InitTick+0x88>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d02b      	beq.n	800532c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80052d4:	4b1c      	ldr	r3, [pc, #112]	; (8005348 <HAL_InitTick+0x8c>)
 80052d6:	681c      	ldr	r4, [r3, #0]
 80052d8:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <HAL_InitTick+0x88>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	0019      	movs	r1, r3
 80052de:	23fa      	movs	r3, #250	; 0xfa
 80052e0:	0098      	lsls	r0, r3, #2
 80052e2:	f7fa ff2b 	bl	800013c <__udivsi3>
 80052e6:	0003      	movs	r3, r0
 80052e8:	0019      	movs	r1, r3
 80052ea:	0020      	movs	r0, r4
 80052ec:	f7fa ff26 	bl	800013c <__udivsi3>
 80052f0:	0003      	movs	r3, r0
 80052f2:	0018      	movs	r0, r3
 80052f4:	f000 f919 	bl	800552a <HAL_SYSTICK_Config>
 80052f8:	1e03      	subs	r3, r0, #0
 80052fa:	d112      	bne.n	8005322 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d80a      	bhi.n	8005318 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	2301      	movs	r3, #1
 8005306:	425b      	negs	r3, r3
 8005308:	2200      	movs	r2, #0
 800530a:	0018      	movs	r0, r3
 800530c:	f000 f8e8 	bl	80054e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005310:	4b0e      	ldr	r3, [pc, #56]	; (800534c <HAL_InitTick+0x90>)
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e00d      	b.n	8005334 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005318:	230f      	movs	r3, #15
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	e008      	b.n	8005334 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005322:	230f      	movs	r3, #15
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	e003      	b.n	8005334 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800532c:	230f      	movs	r3, #15
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	2201      	movs	r2, #1
 8005332:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005334:	230f      	movs	r3, #15
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	781b      	ldrb	r3, [r3, #0]
}
 800533a:	0018      	movs	r0, r3
 800533c:	46bd      	mov	sp, r7
 800533e:	b005      	add	sp, #20
 8005340:	bd90      	pop	{r4, r7, pc}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	20000060 	.word	0x20000060
 8005348:	20000058 	.word	0x20000058
 800534c:	2000005c 	.word	0x2000005c

08005350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <HAL_IncTick+0x1c>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	001a      	movs	r2, r3
 800535a:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_IncTick+0x20>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	18d2      	adds	r2, r2, r3
 8005360:	4b03      	ldr	r3, [pc, #12]	; (8005370 <HAL_IncTick+0x20>)
 8005362:	601a      	str	r2, [r3, #0]
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	20000060 	.word	0x20000060
 8005370:	2000064c 	.word	0x2000064c

08005374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  return uwTick;
 8005378:	4b02      	ldr	r3, [pc, #8]	; (8005384 <HAL_GetTick+0x10>)
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	0018      	movs	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	2000064c 	.word	0x2000064c

08005388 <__NVIC_EnableIRQ>:
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	0002      	movs	r2, r0
 8005390:	1dfb      	adds	r3, r7, #7
 8005392:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005394:	1dfb      	adds	r3, r7, #7
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b7f      	cmp	r3, #127	; 0x7f
 800539a:	d809      	bhi.n	80053b0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800539c:	1dfb      	adds	r3, r7, #7
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	001a      	movs	r2, r3
 80053a2:	231f      	movs	r3, #31
 80053a4:	401a      	ands	r2, r3
 80053a6:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <__NVIC_EnableIRQ+0x30>)
 80053a8:	2101      	movs	r1, #1
 80053aa:	4091      	lsls	r1, r2
 80053ac:	000a      	movs	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]
}
 80053b0:	46c0      	nop			; (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b002      	add	sp, #8
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	e000e100 	.word	0xe000e100

080053bc <__NVIC_SetPriority>:
{
 80053bc:	b590      	push	{r4, r7, lr}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	0002      	movs	r2, r0
 80053c4:	6039      	str	r1, [r7, #0]
 80053c6:	1dfb      	adds	r3, r7, #7
 80053c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053ca:	1dfb      	adds	r3, r7, #7
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b7f      	cmp	r3, #127	; 0x7f
 80053d0:	d828      	bhi.n	8005424 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80053d2:	4a2f      	ldr	r2, [pc, #188]	; (8005490 <__NVIC_SetPriority+0xd4>)
 80053d4:	1dfb      	adds	r3, r7, #7
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	b25b      	sxtb	r3, r3
 80053da:	089b      	lsrs	r3, r3, #2
 80053dc:	33c0      	adds	r3, #192	; 0xc0
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	589b      	ldr	r3, [r3, r2]
 80053e2:	1dfa      	adds	r2, r7, #7
 80053e4:	7812      	ldrb	r2, [r2, #0]
 80053e6:	0011      	movs	r1, r2
 80053e8:	2203      	movs	r2, #3
 80053ea:	400a      	ands	r2, r1
 80053ec:	00d2      	lsls	r2, r2, #3
 80053ee:	21ff      	movs	r1, #255	; 0xff
 80053f0:	4091      	lsls	r1, r2
 80053f2:	000a      	movs	r2, r1
 80053f4:	43d2      	mvns	r2, r2
 80053f6:	401a      	ands	r2, r3
 80053f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	22ff      	movs	r2, #255	; 0xff
 8005400:	401a      	ands	r2, r3
 8005402:	1dfb      	adds	r3, r7, #7
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	0018      	movs	r0, r3
 8005408:	2303      	movs	r3, #3
 800540a:	4003      	ands	r3, r0
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005410:	481f      	ldr	r0, [pc, #124]	; (8005490 <__NVIC_SetPriority+0xd4>)
 8005412:	1dfb      	adds	r3, r7, #7
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	b25b      	sxtb	r3, r3
 8005418:	089b      	lsrs	r3, r3, #2
 800541a:	430a      	orrs	r2, r1
 800541c:	33c0      	adds	r3, #192	; 0xc0
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	501a      	str	r2, [r3, r0]
}
 8005422:	e031      	b.n	8005488 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005424:	4a1b      	ldr	r2, [pc, #108]	; (8005494 <__NVIC_SetPriority+0xd8>)
 8005426:	1dfb      	adds	r3, r7, #7
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	0019      	movs	r1, r3
 800542c:	230f      	movs	r3, #15
 800542e:	400b      	ands	r3, r1
 8005430:	3b08      	subs	r3, #8
 8005432:	089b      	lsrs	r3, r3, #2
 8005434:	3306      	adds	r3, #6
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	18d3      	adds	r3, r2, r3
 800543a:	3304      	adds	r3, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	1dfa      	adds	r2, r7, #7
 8005440:	7812      	ldrb	r2, [r2, #0]
 8005442:	0011      	movs	r1, r2
 8005444:	2203      	movs	r2, #3
 8005446:	400a      	ands	r2, r1
 8005448:	00d2      	lsls	r2, r2, #3
 800544a:	21ff      	movs	r1, #255	; 0xff
 800544c:	4091      	lsls	r1, r2
 800544e:	000a      	movs	r2, r1
 8005450:	43d2      	mvns	r2, r2
 8005452:	401a      	ands	r2, r3
 8005454:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	019b      	lsls	r3, r3, #6
 800545a:	22ff      	movs	r2, #255	; 0xff
 800545c:	401a      	ands	r2, r3
 800545e:	1dfb      	adds	r3, r7, #7
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	0018      	movs	r0, r3
 8005464:	2303      	movs	r3, #3
 8005466:	4003      	ands	r3, r0
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800546c:	4809      	ldr	r0, [pc, #36]	; (8005494 <__NVIC_SetPriority+0xd8>)
 800546e:	1dfb      	adds	r3, r7, #7
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	001c      	movs	r4, r3
 8005474:	230f      	movs	r3, #15
 8005476:	4023      	ands	r3, r4
 8005478:	3b08      	subs	r3, #8
 800547a:	089b      	lsrs	r3, r3, #2
 800547c:	430a      	orrs	r2, r1
 800547e:	3306      	adds	r3, #6
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	18c3      	adds	r3, r0, r3
 8005484:	3304      	adds	r3, #4
 8005486:	601a      	str	r2, [r3, #0]
}
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	b003      	add	sp, #12
 800548e:	bd90      	pop	{r4, r7, pc}
 8005490:	e000e100 	.word	0xe000e100
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <SysTick_Config>:
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	1e5a      	subs	r2, r3, #1
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	045b      	lsls	r3, r3, #17
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d301      	bcc.n	80054b0 <SysTick_Config+0x18>
    return (1UL);                                                   /* Reload value impossible */
 80054ac:	2301      	movs	r3, #1
 80054ae:	e010      	b.n	80054d2 <SysTick_Config+0x3a>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <SysTick_Config+0x44>)
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	3a01      	subs	r2, #1
 80054b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054b8:	2301      	movs	r3, #1
 80054ba:	425b      	negs	r3, r3
 80054bc:	2103      	movs	r1, #3
 80054be:	0018      	movs	r0, r3
 80054c0:	f7ff ff7c 	bl	80053bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <SysTick_Config+0x44>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054ca:	4b04      	ldr	r3, [pc, #16]	; (80054dc <SysTick_Config+0x44>)
 80054cc:	2207      	movs	r2, #7
 80054ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	0018      	movs	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b002      	add	sp, #8
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	e000e010 	.word	0xe000e010

080054e0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
 80054ea:	210f      	movs	r1, #15
 80054ec:	187b      	adds	r3, r7, r1
 80054ee:	1c02      	adds	r2, r0, #0
 80054f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	187b      	adds	r3, r7, r1
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	0011      	movs	r1, r2
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7ff ff5d 	bl	80053bc <__NVIC_SetPriority>
}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	46bd      	mov	sp, r7
 8005506:	b004      	add	sp, #16
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	0002      	movs	r2, r0
 8005512:	1dfb      	adds	r3, r7, #7
 8005514:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005516:	1dfb      	adds	r3, r7, #7
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	b25b      	sxtb	r3, r3
 800551c:	0018      	movs	r0, r3
 800551e:	f7ff ff33 	bl	8005388 <__NVIC_EnableIRQ>
}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	46bd      	mov	sp, r7
 8005526:	b002      	add	sp, #8
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	0018      	movs	r0, r3
 8005536:	f7ff ffaf 	bl	8005498 <SysTick_Config>
 800553a:	0003      	movs	r3, r0
}
 800553c:	0018      	movs	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	b002      	add	sp, #8
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800554c:	4b55      	ldr	r3, [pc, #340]	; (80056a4 <HAL_DMA_IRQHandler+0x160>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	221c      	movs	r2, #28
 8005560:	4013      	ands	r3, r2
 8005562:	2204      	movs	r2, #4
 8005564:	409a      	lsls	r2, r3
 8005566:	0013      	movs	r3, r2
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	4013      	ands	r3, r2
 800556c:	d027      	beq.n	80055be <HAL_DMA_IRQHandler+0x7a>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2204      	movs	r2, #4
 8005572:	4013      	ands	r3, r2
 8005574:	d023      	beq.n	80055be <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2220      	movs	r2, #32
 800557e:	4013      	ands	r3, r2
 8005580:	d107      	bne.n	8005592 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2104      	movs	r1, #4
 800558e:	438a      	bics	r2, r1
 8005590:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005592:	4b44      	ldr	r3, [pc, #272]	; (80056a4 <HAL_DMA_IRQHandler+0x160>)
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	221c      	movs	r2, #28
 800559c:	4013      	ands	r3, r2
 800559e:	2204      	movs	r2, #4
 80055a0:	409a      	lsls	r2, r3
 80055a2:	4b40      	ldr	r3, [pc, #256]	; (80056a4 <HAL_DMA_IRQHandler+0x160>)
 80055a4:	430a      	orrs	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d100      	bne.n	80055b2 <HAL_DMA_IRQHandler+0x6e>
 80055b0:	e073      	b.n	800569a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	0010      	movs	r0, r2
 80055ba:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80055bc:	e06d      	b.n	800569a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	221c      	movs	r2, #28
 80055c4:	4013      	ands	r3, r2
 80055c6:	2202      	movs	r2, #2
 80055c8:	409a      	lsls	r2, r3
 80055ca:	0013      	movs	r3, r2
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4013      	ands	r3, r2
 80055d0:	d02e      	beq.n	8005630 <HAL_DMA_IRQHandler+0xec>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2202      	movs	r2, #2
 80055d6:	4013      	ands	r3, r2
 80055d8:	d02a      	beq.n	8005630 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2220      	movs	r2, #32
 80055e2:	4013      	ands	r3, r2
 80055e4:	d10b      	bne.n	80055fe <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	210a      	movs	r1, #10
 80055f2:	438a      	bics	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2225      	movs	r2, #37	; 0x25
 80055fa:	2101      	movs	r1, #1
 80055fc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80055fe:	4b29      	ldr	r3, [pc, #164]	; (80056a4 <HAL_DMA_IRQHandler+0x160>)
 8005600:	6859      	ldr	r1, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	221c      	movs	r2, #28
 8005608:	4013      	ands	r3, r2
 800560a:	2202      	movs	r2, #2
 800560c:	409a      	lsls	r2, r3
 800560e:	4b25      	ldr	r3, [pc, #148]	; (80056a4 <HAL_DMA_IRQHandler+0x160>)
 8005610:	430a      	orrs	r2, r1
 8005612:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2224      	movs	r2, #36	; 0x24
 8005618:	2100      	movs	r1, #0
 800561a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d03a      	beq.n	800569a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	0010      	movs	r0, r2
 800562c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800562e:	e034      	b.n	800569a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	221c      	movs	r2, #28
 8005636:	4013      	ands	r3, r2
 8005638:	2208      	movs	r2, #8
 800563a:	409a      	lsls	r2, r3
 800563c:	0013      	movs	r3, r2
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4013      	ands	r3, r2
 8005642:	d02b      	beq.n	800569c <HAL_DMA_IRQHandler+0x158>
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2208      	movs	r2, #8
 8005648:	4013      	ands	r3, r2
 800564a:	d027      	beq.n	800569c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	210e      	movs	r1, #14
 8005658:	438a      	bics	r2, r1
 800565a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800565c:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <HAL_DMA_IRQHandler+0x160>)
 800565e:	6859      	ldr	r1, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	221c      	movs	r2, #28
 8005666:	4013      	ands	r3, r2
 8005668:	2201      	movs	r2, #1
 800566a:	409a      	lsls	r2, r3
 800566c:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <HAL_DMA_IRQHandler+0x160>)
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2225      	movs	r2, #37	; 0x25
 800567c:	2101      	movs	r1, #1
 800567e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2224      	movs	r2, #36	; 0x24
 8005684:	2100      	movs	r1, #0
 8005686:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	0010      	movs	r0, r2
 8005698:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	46c0      	nop			; (mov r8, r8)
}
 800569e:	46bd      	mov	sp, r7
 80056a0:	b004      	add	sp, #16
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40020000 	.word	0x40020000

080056a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056b2:	2300      	movs	r3, #0
 80056b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056b6:	e147      	b.n	8005948 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2101      	movs	r1, #1
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4091      	lsls	r1, r2
 80056c2:	000a      	movs	r2, r1
 80056c4:	4013      	ands	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d100      	bne.n	80056d0 <HAL_GPIO_Init+0x28>
 80056ce:	e138      	b.n	8005942 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2203      	movs	r2, #3
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d005      	beq.n	80056e8 <HAL_GPIO_Init+0x40>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2203      	movs	r2, #3
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d130      	bne.n	800574a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	2203      	movs	r2, #3
 80056f4:	409a      	lsls	r2, r3
 80056f6:	0013      	movs	r3, r2
 80056f8:	43da      	mvns	r2, r3
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4013      	ands	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	409a      	lsls	r2, r3
 800570a:	0013      	movs	r3, r2
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800571e:	2201      	movs	r2, #1
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	409a      	lsls	r2, r3
 8005724:	0013      	movs	r3, r2
 8005726:	43da      	mvns	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4013      	ands	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	091b      	lsrs	r3, r3, #4
 8005734:	2201      	movs	r2, #1
 8005736:	401a      	ands	r2, r3
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	409a      	lsls	r2, r3
 800573c:	0013      	movs	r3, r2
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2203      	movs	r2, #3
 8005750:	4013      	ands	r3, r2
 8005752:	2b03      	cmp	r3, #3
 8005754:	d017      	beq.n	8005786 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	2203      	movs	r2, #3
 8005762:	409a      	lsls	r2, r3
 8005764:	0013      	movs	r3, r2
 8005766:	43da      	mvns	r2, r3
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4013      	ands	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	409a      	lsls	r2, r3
 8005778:	0013      	movs	r3, r2
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	4313      	orrs	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2203      	movs	r2, #3
 800578c:	4013      	ands	r3, r2
 800578e:	2b02      	cmp	r3, #2
 8005790:	d123      	bne.n	80057da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	08da      	lsrs	r2, r3, #3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3208      	adds	r2, #8
 800579a:	0092      	lsls	r2, r2, #2
 800579c:	58d3      	ldr	r3, [r2, r3]
 800579e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2207      	movs	r2, #7
 80057a4:	4013      	ands	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	220f      	movs	r2, #15
 80057aa:	409a      	lsls	r2, r3
 80057ac:	0013      	movs	r3, r2
 80057ae:	43da      	mvns	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4013      	ands	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2107      	movs	r1, #7
 80057be:	400b      	ands	r3, r1
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	409a      	lsls	r2, r3
 80057c4:	0013      	movs	r3, r2
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	08da      	lsrs	r2, r3, #3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3208      	adds	r2, #8
 80057d4:	0092      	lsls	r2, r2, #2
 80057d6:	6939      	ldr	r1, [r7, #16]
 80057d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	2203      	movs	r2, #3
 80057e6:	409a      	lsls	r2, r3
 80057e8:	0013      	movs	r3, r2
 80057ea:	43da      	mvns	r2, r3
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4013      	ands	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2203      	movs	r2, #3
 80057f8:	401a      	ands	r2, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	409a      	lsls	r2, r3
 8005800:	0013      	movs	r3, r2
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	23c0      	movs	r3, #192	; 0xc0
 8005814:	029b      	lsls	r3, r3, #10
 8005816:	4013      	ands	r3, r2
 8005818:	d100      	bne.n	800581c <HAL_GPIO_Init+0x174>
 800581a:	e092      	b.n	8005942 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800581c:	4a50      	ldr	r2, [pc, #320]	; (8005960 <HAL_GPIO_Init+0x2b8>)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	089b      	lsrs	r3, r3, #2
 8005822:	3318      	adds	r3, #24
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	589b      	ldr	r3, [r3, r2]
 8005828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2203      	movs	r2, #3
 800582e:	4013      	ands	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	220f      	movs	r2, #15
 8005834:	409a      	lsls	r2, r3
 8005836:	0013      	movs	r3, r2
 8005838:	43da      	mvns	r2, r3
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4013      	ands	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	23a0      	movs	r3, #160	; 0xa0
 8005844:	05db      	lsls	r3, r3, #23
 8005846:	429a      	cmp	r2, r3
 8005848:	d013      	beq.n	8005872 <HAL_GPIO_Init+0x1ca>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a45      	ldr	r2, [pc, #276]	; (8005964 <HAL_GPIO_Init+0x2bc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00d      	beq.n	800586e <HAL_GPIO_Init+0x1c6>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a44      	ldr	r2, [pc, #272]	; (8005968 <HAL_GPIO_Init+0x2c0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d007      	beq.n	800586a <HAL_GPIO_Init+0x1c2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a43      	ldr	r2, [pc, #268]	; (800596c <HAL_GPIO_Init+0x2c4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d101      	bne.n	8005866 <HAL_GPIO_Init+0x1be>
 8005862:	2303      	movs	r3, #3
 8005864:	e006      	b.n	8005874 <HAL_GPIO_Init+0x1cc>
 8005866:	2305      	movs	r3, #5
 8005868:	e004      	b.n	8005874 <HAL_GPIO_Init+0x1cc>
 800586a:	2302      	movs	r3, #2
 800586c:	e002      	b.n	8005874 <HAL_GPIO_Init+0x1cc>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_GPIO_Init+0x1cc>
 8005872:	2300      	movs	r3, #0
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	2103      	movs	r1, #3
 8005878:	400a      	ands	r2, r1
 800587a:	00d2      	lsls	r2, r2, #3
 800587c:	4093      	lsls	r3, r2
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8005884:	4936      	ldr	r1, [pc, #216]	; (8005960 <HAL_GPIO_Init+0x2b8>)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	089b      	lsrs	r3, r3, #2
 800588a:	3318      	adds	r3, #24
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005892:	4b33      	ldr	r3, [pc, #204]	; (8005960 <HAL_GPIO_Init+0x2b8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	43da      	mvns	r2, r3
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	4013      	ands	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	035b      	lsls	r3, r3, #13
 80058aa:	4013      	ands	r3, r2
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058b6:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <HAL_GPIO_Init+0x2b8>)
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80058bc:	4b28      	ldr	r3, [pc, #160]	; (8005960 <HAL_GPIO_Init+0x2b8>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	43da      	mvns	r2, r3
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4013      	ands	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	039b      	lsls	r3, r3, #14
 80058d4:	4013      	ands	r3, r2
 80058d6:	d003      	beq.n	80058e0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058e0:	4b1f      	ldr	r3, [pc, #124]	; (8005960 <HAL_GPIO_Init+0x2b8>)
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80058e6:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <HAL_GPIO_Init+0x2b8>)
 80058e8:	2384      	movs	r3, #132	; 0x84
 80058ea:	58d3      	ldr	r3, [r2, r3]
 80058ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	43da      	mvns	r2, r3
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4013      	ands	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	029b      	lsls	r3, r3, #10
 8005900:	4013      	ands	r3, r2
 8005902:	d003      	beq.n	800590c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800590c:	4914      	ldr	r1, [pc, #80]	; (8005960 <HAL_GPIO_Init+0x2b8>)
 800590e:	2284      	movs	r2, #132	; 0x84
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005914:	4a12      	ldr	r2, [pc, #72]	; (8005960 <HAL_GPIO_Init+0x2b8>)
 8005916:	2380      	movs	r3, #128	; 0x80
 8005918:	58d3      	ldr	r3, [r2, r3]
 800591a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	43da      	mvns	r2, r3
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4013      	ands	r3, r2
 8005924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	2380      	movs	r3, #128	; 0x80
 800592c:	025b      	lsls	r3, r3, #9
 800592e:	4013      	ands	r3, r2
 8005930:	d003      	beq.n	800593a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800593a:	4909      	ldr	r1, [pc, #36]	; (8005960 <HAL_GPIO_Init+0x2b8>)
 800593c:	2280      	movs	r2, #128	; 0x80
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	3301      	adds	r3, #1
 8005946:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	40da      	lsrs	r2, r3
 8005950:	1e13      	subs	r3, r2, #0
 8005952:	d000      	beq.n	8005956 <HAL_GPIO_Init+0x2ae>
 8005954:	e6b0      	b.n	80056b8 <HAL_GPIO_Init+0x10>
  }
}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	46c0      	nop			; (mov r8, r8)
 800595a:	46bd      	mov	sp, r7
 800595c:	b006      	add	sp, #24
 800595e:	bd80      	pop	{r7, pc}
 8005960:	40021800 	.word	0x40021800
 8005964:	50000400 	.word	0x50000400
 8005968:	50000800 	.word	0x50000800
 800596c:	50000c00 	.word	0x50000c00

08005970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	0008      	movs	r0, r1
 800597a:	0011      	movs	r1, r2
 800597c:	1cbb      	adds	r3, r7, #2
 800597e:	1c02      	adds	r2, r0, #0
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	1c7b      	adds	r3, r7, #1
 8005984:	1c0a      	adds	r2, r1, #0
 8005986:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005988:	1c7b      	adds	r3, r7, #1
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005990:	1cbb      	adds	r3, r7, #2
 8005992:	881a      	ldrh	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005998:	e003      	b.n	80059a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800599a:	1cbb      	adds	r3, r7, #2
 800599c:	881a      	ldrh	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	46bd      	mov	sp, r7
 80059a6:	b002      	add	sp, #8
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e04a      	b.n	8005a52 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	223d      	movs	r2, #61	; 0x3d
 80059c0:	5c9b      	ldrb	r3, [r3, r2]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	223c      	movs	r2, #60	; 0x3c
 80059cc:	2100      	movs	r1, #0
 80059ce:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7ff f9e6 	bl	8004da4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	223d      	movs	r2, #61	; 0x3d
 80059dc:	2102      	movs	r1, #2
 80059de:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3304      	adds	r3, #4
 80059e8:	0019      	movs	r1, r3
 80059ea:	0010      	movs	r0, r2
 80059ec:	f000 fb90 	bl	8006110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2248      	movs	r2, #72	; 0x48
 80059f4:	2101      	movs	r1, #1
 80059f6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	223e      	movs	r2, #62	; 0x3e
 80059fc:	2101      	movs	r1, #1
 80059fe:	5499      	strb	r1, [r3, r2]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	223f      	movs	r2, #63	; 0x3f
 8005a04:	2101      	movs	r1, #1
 8005a06:	5499      	strb	r1, [r3, r2]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2240      	movs	r2, #64	; 0x40
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	5499      	strb	r1, [r3, r2]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2241      	movs	r2, #65	; 0x41
 8005a14:	2101      	movs	r1, #1
 8005a16:	5499      	strb	r1, [r3, r2]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2242      	movs	r2, #66	; 0x42
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	5499      	strb	r1, [r3, r2]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2243      	movs	r2, #67	; 0x43
 8005a24:	2101      	movs	r1, #1
 8005a26:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2244      	movs	r2, #68	; 0x44
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	5499      	strb	r1, [r3, r2]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2245      	movs	r2, #69	; 0x45
 8005a34:	2101      	movs	r1, #1
 8005a36:	5499      	strb	r1, [r3, r2]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2246      	movs	r2, #70	; 0x46
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	5499      	strb	r1, [r3, r2]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2247      	movs	r2, #71	; 0x47
 8005a44:	2101      	movs	r1, #1
 8005a46:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	223d      	movs	r2, #61	; 0x3d
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b002      	add	sp, #8
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a66:	230f      	movs	r3, #15
 8005a68:	18fb      	adds	r3, r7, r3
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <HAL_TIM_IC_Start_IT+0x22>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	223e      	movs	r2, #62	; 0x3e
 8005a78:	5c9b      	ldrb	r3, [r3, r2]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	e023      	b.n	8005ac6 <HAL_TIM_IC_Start_IT+0x6a>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_IC_Start_IT+0x32>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	223f      	movs	r2, #63	; 0x3f
 8005a88:	5c9b      	ldrb	r3, [r3, r2]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	e01b      	b.n	8005ac6 <HAL_TIM_IC_Start_IT+0x6a>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_IC_Start_IT+0x42>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2240      	movs	r2, #64	; 0x40
 8005a98:	5c9b      	ldrb	r3, [r3, r2]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	e013      	b.n	8005ac6 <HAL_TIM_IC_Start_IT+0x6a>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b0c      	cmp	r3, #12
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_IC_Start_IT+0x52>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2241      	movs	r2, #65	; 0x41
 8005aa8:	5c9b      	ldrb	r3, [r3, r2]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	e00b      	b.n	8005ac6 <HAL_TIM_IC_Start_IT+0x6a>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_IC_Start_IT+0x62>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2242      	movs	r2, #66	; 0x42
 8005ab8:	5c9b      	ldrb	r3, [r3, r2]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	e003      	b.n	8005ac6 <HAL_TIM_IC_Start_IT+0x6a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2243      	movs	r2, #67	; 0x43
 8005ac2:	5c9b      	ldrb	r3, [r3, r2]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	220e      	movs	r2, #14
 8005ac8:	18ba      	adds	r2, r7, r2
 8005aca:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d104      	bne.n	8005adc <HAL_TIM_IC_Start_IT+0x80>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2244      	movs	r2, #68	; 0x44
 8005ad6:	5c9b      	ldrb	r3, [r3, r2]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	e013      	b.n	8005b04 <HAL_TIM_IC_Start_IT+0xa8>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d104      	bne.n	8005aec <HAL_TIM_IC_Start_IT+0x90>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2245      	movs	r2, #69	; 0x45
 8005ae6:	5c9b      	ldrb	r3, [r3, r2]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	e00b      	b.n	8005b04 <HAL_TIM_IC_Start_IT+0xa8>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d104      	bne.n	8005afc <HAL_TIM_IC_Start_IT+0xa0>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2246      	movs	r2, #70	; 0x46
 8005af6:	5c9b      	ldrb	r3, [r3, r2]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	e003      	b.n	8005b04 <HAL_TIM_IC_Start_IT+0xa8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2247      	movs	r2, #71	; 0x47
 8005b00:	5c9b      	ldrb	r3, [r3, r2]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	210d      	movs	r1, #13
 8005b06:	187a      	adds	r2, r7, r1
 8005b08:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b0a:	230e      	movs	r3, #14
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d103      	bne.n	8005b1c <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b14:	187b      	adds	r3, r7, r1
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d001      	beq.n	8005b20 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0c3      	b.n	8005ca8 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <HAL_TIM_IC_Start_IT+0xd4>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	223e      	movs	r2, #62	; 0x3e
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	5499      	strb	r1, [r3, r2]
 8005b2e:	e023      	b.n	8005b78 <HAL_TIM_IC_Start_IT+0x11c>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d104      	bne.n	8005b40 <HAL_TIM_IC_Start_IT+0xe4>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	223f      	movs	r2, #63	; 0x3f
 8005b3a:	2102      	movs	r1, #2
 8005b3c:	5499      	strb	r1, [r3, r2]
 8005b3e:	e01b      	b.n	8005b78 <HAL_TIM_IC_Start_IT+0x11c>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d104      	bne.n	8005b50 <HAL_TIM_IC_Start_IT+0xf4>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2240      	movs	r2, #64	; 0x40
 8005b4a:	2102      	movs	r1, #2
 8005b4c:	5499      	strb	r1, [r3, r2]
 8005b4e:	e013      	b.n	8005b78 <HAL_TIM_IC_Start_IT+0x11c>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b0c      	cmp	r3, #12
 8005b54:	d104      	bne.n	8005b60 <HAL_TIM_IC_Start_IT+0x104>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2241      	movs	r2, #65	; 0x41
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	5499      	strb	r1, [r3, r2]
 8005b5e:	e00b      	b.n	8005b78 <HAL_TIM_IC_Start_IT+0x11c>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b10      	cmp	r3, #16
 8005b64:	d104      	bne.n	8005b70 <HAL_TIM_IC_Start_IT+0x114>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2242      	movs	r2, #66	; 0x42
 8005b6a:	2102      	movs	r1, #2
 8005b6c:	5499      	strb	r1, [r3, r2]
 8005b6e:	e003      	b.n	8005b78 <HAL_TIM_IC_Start_IT+0x11c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2243      	movs	r2, #67	; 0x43
 8005b74:	2102      	movs	r1, #2
 8005b76:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d104      	bne.n	8005b88 <HAL_TIM_IC_Start_IT+0x12c>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2244      	movs	r2, #68	; 0x44
 8005b82:	2102      	movs	r1, #2
 8005b84:	5499      	strb	r1, [r3, r2]
 8005b86:	e013      	b.n	8005bb0 <HAL_TIM_IC_Start_IT+0x154>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d104      	bne.n	8005b98 <HAL_TIM_IC_Start_IT+0x13c>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2245      	movs	r2, #69	; 0x45
 8005b92:	2102      	movs	r1, #2
 8005b94:	5499      	strb	r1, [r3, r2]
 8005b96:	e00b      	b.n	8005bb0 <HAL_TIM_IC_Start_IT+0x154>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d104      	bne.n	8005ba8 <HAL_TIM_IC_Start_IT+0x14c>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2246      	movs	r2, #70	; 0x46
 8005ba2:	2102      	movs	r1, #2
 8005ba4:	5499      	strb	r1, [r3, r2]
 8005ba6:	e003      	b.n	8005bb0 <HAL_TIM_IC_Start_IT+0x154>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2247      	movs	r2, #71	; 0x47
 8005bac:	2102      	movs	r1, #2
 8005bae:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b0c      	cmp	r3, #12
 8005bb4:	d02a      	beq.n	8005c0c <HAL_TIM_IC_Start_IT+0x1b0>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b0c      	cmp	r3, #12
 8005bba:	d830      	bhi.n	8005c1e <HAL_TIM_IC_Start_IT+0x1c2>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d01b      	beq.n	8005bfa <HAL_TIM_IC_Start_IT+0x19e>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d82a      	bhi.n	8005c1e <HAL_TIM_IC_Start_IT+0x1c2>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IC_Start_IT+0x17a>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d009      	beq.n	8005be8 <HAL_TIM_IC_Start_IT+0x18c>
 8005bd4:	e023      	b.n	8005c1e <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2102      	movs	r1, #2
 8005be2:	430a      	orrs	r2, r1
 8005be4:	60da      	str	r2, [r3, #12]
      break;
 8005be6:	e01f      	b.n	8005c28 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2104      	movs	r1, #4
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	60da      	str	r2, [r3, #12]
      break;
 8005bf8:	e016      	b.n	8005c28 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2108      	movs	r1, #8
 8005c06:	430a      	orrs	r2, r1
 8005c08:	60da      	str	r2, [r3, #12]
      break;
 8005c0a:	e00d      	b.n	8005c28 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2110      	movs	r1, #16
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	60da      	str	r2, [r3, #12]
      break;
 8005c1c:	e004      	b.n	8005c28 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8005c1e:	230f      	movs	r3, #15
 8005c20:	18fb      	adds	r3, r7, r3
 8005c22:	2201      	movs	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]
      break;
 8005c26:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005c28:	230f      	movs	r3, #15
 8005c2a:	18fb      	adds	r3, r7, r3
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d137      	bne.n	8005ca2 <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f000 fbfc 	bl	8006438 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1a      	ldr	r2, [pc, #104]	; (8005cb0 <HAL_TIM_IC_Start_IT+0x254>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00a      	beq.n	8005c60 <HAL_TIM_IC_Start_IT+0x204>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	05db      	lsls	r3, r3, #23
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d004      	beq.n	8005c60 <HAL_TIM_IC_Start_IT+0x204>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <HAL_TIM_IC_Start_IT+0x258>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d116      	bne.n	8005c8e <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	4a14      	ldr	r2, [pc, #80]	; (8005cb8 <HAL_TIM_IC_Start_IT+0x25c>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b06      	cmp	r3, #6
 8005c70:	d016      	beq.n	8005ca0 <HAL_TIM_IC_Start_IT+0x244>
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	2380      	movs	r3, #128	; 0x80
 8005c76:	025b      	lsls	r3, r3, #9
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d011      	beq.n	8005ca0 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2101      	movs	r1, #1
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8c:	e008      	b.n	8005ca0 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2101      	movs	r1, #1
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	e000      	b.n	8005ca2 <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ca0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8005ca2:	230f      	movs	r3, #15
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	781b      	ldrb	r3, [r3, #0]
}
 8005ca8:	0018      	movs	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b004      	add	sp, #16
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40012c00 	.word	0x40012c00
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	00010007 	.word	0x00010007

08005cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	4013      	ands	r3, r2
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d124      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d11d      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	4252      	negs	r2, r2
 8005ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	0018      	movs	r0, r3
 8005d00:	f7fe fdc2 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 8005d04:	e007      	b.n	8005d16 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f000 f9e9 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	0018      	movs	r0, r3
 8005d12:	f000 f9ed 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	2204      	movs	r2, #4
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d125      	bne.n	8005d76 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2204      	movs	r2, #4
 8005d32:	4013      	ands	r3, r2
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d11e      	bne.n	8005d76 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2205      	movs	r2, #5
 8005d3e:	4252      	negs	r2, r2
 8005d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	23c0      	movs	r3, #192	; 0xc0
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4013      	ands	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	0018      	movs	r0, r3
 8005d5a:	f7fe fd95 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 8005d5e:	e007      	b.n	8005d70 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	0018      	movs	r0, r3
 8005d64:	f000 f9bc 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 f9c0 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2208      	movs	r2, #8
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d124      	bne.n	8005dce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2208      	movs	r2, #8
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d11d      	bne.n	8005dce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2209      	movs	r2, #9
 8005d98:	4252      	negs	r2, r2
 8005d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2204      	movs	r2, #4
 8005da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	2203      	movs	r2, #3
 8005daa:	4013      	ands	r3, r2
 8005dac:	d004      	beq.n	8005db8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	0018      	movs	r0, r3
 8005db2:	f7fe fd69 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 8005db6:	e007      	b.n	8005dc8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	0018      	movs	r0, r3
 8005dbc:	f000 f990 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f000 f994 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	2210      	movs	r2, #16
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d125      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2210      	movs	r2, #16
 8005de4:	4013      	ands	r3, r2
 8005de6:	2b10      	cmp	r3, #16
 8005de8:	d11e      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2211      	movs	r2, #17
 8005df0:	4252      	negs	r2, r2
 8005df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2208      	movs	r2, #8
 8005df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	23c0      	movs	r3, #192	; 0xc0
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4013      	ands	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f7fe fd3c 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 8005e10:	e007      	b.n	8005e22 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f000 f963 	bl	80060e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f000 f967 	bl	80060f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d10f      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d108      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	4252      	negs	r2, r2
 8005e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	0018      	movs	r0, r3
 8005e52:	f000 f93d 	bl	80060d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2280      	movs	r2, #128	; 0x80
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2b80      	cmp	r3, #128	; 0x80
 8005e62:	d10f      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	2280      	movs	r2, #128	; 0x80
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b80      	cmp	r3, #128	; 0x80
 8005e70:	d108      	bne.n	8005e84 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2281      	movs	r2, #129	; 0x81
 8005e78:	4252      	negs	r2, r2
 8005e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f000 fb6e 	bl	8006560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	401a      	ands	r2, r3
 8005e90:	2380      	movs	r3, #128	; 0x80
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d10e      	bne.n	8005eb6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2280      	movs	r2, #128	; 0x80
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2b80      	cmp	r3, #128	; 0x80
 8005ea4:	d107      	bne.n	8005eb6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <HAL_TIM_IRQHandler+0x260>)
 8005eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f000 fb5d 	bl	8006570 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2240      	movs	r2, #64	; 0x40
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d10f      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	2240      	movs	r2, #64	; 0x40
 8005ecc:	4013      	ands	r3, r2
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	d108      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2241      	movs	r2, #65	; 0x41
 8005ed8:	4252      	negs	r2, r2
 8005eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f000 f90e 	bl	8006100 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2220      	movs	r2, #32
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d10f      	bne.n	8005f12 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d108      	bne.n	8005f12 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2221      	movs	r2, #33	; 0x21
 8005f06:	4252      	negs	r2, r2
 8005f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f000 fb1f 	bl	8006550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b002      	add	sp, #8
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	fffffeff 	.word	0xfffffeff

08005f20 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2c:	2317      	movs	r3, #23
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	223c      	movs	r2, #60	; 0x3c
 8005f38:	5c9b      	ldrb	r3, [r3, r2]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_TIM_IC_ConfigChannel+0x22>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e08c      	b.n	800605c <HAL_TIM_IC_ConfigChannel+0x13c>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	223c      	movs	r2, #60	; 0x3c
 8005f46:	2101      	movs	r1, #1
 8005f48:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d11b      	bne.n	8005f88 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6819      	ldr	r1, [r3, #0]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f000 f94c 	bl	80061fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	210c      	movs	r1, #12
 8005f70:	438a      	bics	r2, r1
 8005f72:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6999      	ldr	r1, [r3, #24]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	619a      	str	r2, [r3, #24]
 8005f86:	e062      	b.n	800604e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d11c      	bne.n	8005fc8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6819      	ldr	r1, [r3, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f000 f983 	bl	80062a8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699a      	ldr	r2, [r3, #24]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	492d      	ldr	r1, [pc, #180]	; (8006064 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005fae:	400a      	ands	r2, r1
 8005fb0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6999      	ldr	r1, [r3, #24]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	021a      	lsls	r2, r3, #8
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	619a      	str	r2, [r3, #24]
 8005fc6:	e042      	b.n	800604e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d11b      	bne.n	8006006 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	6819      	ldr	r1, [r3, #0]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f000 f9a5 	bl	800632c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	210c      	movs	r1, #12
 8005fee:	438a      	bics	r2, r1
 8005ff0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69d9      	ldr	r1, [r3, #28]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	61da      	str	r2, [r3, #28]
 8006004:	e023      	b.n	800604e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b0c      	cmp	r3, #12
 800600a:	d11c      	bne.n	8006046 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f000 f9c6 	bl	80063ac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69da      	ldr	r2, [r3, #28]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	490e      	ldr	r1, [pc, #56]	; (8006064 <HAL_TIM_IC_ConfigChannel+0x144>)
 800602c:	400a      	ands	r2, r1
 800602e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69d9      	ldr	r1, [r3, #28]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	021a      	lsls	r2, r3, #8
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	61da      	str	r2, [r3, #28]
 8006044:	e003      	b.n	800604e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8006046:	2317      	movs	r3, #23
 8006048:	18fb      	adds	r3, r7, r3
 800604a:	2201      	movs	r2, #1
 800604c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	223c      	movs	r2, #60	; 0x3c
 8006052:	2100      	movs	r1, #0
 8006054:	5499      	strb	r1, [r3, r2]

  return status;
 8006056:	2317      	movs	r3, #23
 8006058:	18fb      	adds	r3, r7, r3
 800605a:	781b      	ldrb	r3, [r3, #0]
}
 800605c:	0018      	movs	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	b006      	add	sp, #24
 8006062:	bd80      	pop	{r7, pc}
 8006064:	fffff3ff 	.word	0xfffff3ff

08006068 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d01e      	beq.n	80060ba <HAL_TIM_ReadCapturedValue+0x52>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b0c      	cmp	r3, #12
 8006080:	d820      	bhi.n	80060c4 <HAL_TIM_ReadCapturedValue+0x5c>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b08      	cmp	r3, #8
 8006086:	d013      	beq.n	80060b0 <HAL_TIM_ReadCapturedValue+0x48>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2b08      	cmp	r3, #8
 800608c:	d81a      	bhi.n	80060c4 <HAL_TIM_ReadCapturedValue+0x5c>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_TIM_ReadCapturedValue+0x34>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b04      	cmp	r3, #4
 8006098:	d005      	beq.n	80060a6 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800609a:	e013      	b.n	80060c4 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a2:	60fb      	str	r3, [r7, #12]
      break;
 80060a4:	e00f      	b.n	80060c6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	60fb      	str	r3, [r7, #12]
      break;
 80060ae:	e00a      	b.n	80060c6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	60fb      	str	r3, [r7, #12]
      break;
 80060b8:	e005      	b.n	80060c6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	60fb      	str	r3, [r7, #12]
      break;
 80060c2:	e000      	b.n	80060c6 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80060c4:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80060c6:	68fb      	ldr	r3, [r7, #12]
}
 80060c8:	0018      	movs	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	b004      	add	sp, #16
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060d8:	46c0      	nop			; (mov r8, r8)
 80060da:	46bd      	mov	sp, r7
 80060dc:	b002      	add	sp, #8
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060e8:	46c0      	nop			; (mov r8, r8)
 80060ea:	46bd      	mov	sp, r7
 80060ec:	b002      	add	sp, #8
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060f8:	46c0      	nop			; (mov r8, r8)
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b002      	add	sp, #8
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006108:	46c0      	nop			; (mov r8, r8)
 800610a:	46bd      	mov	sp, r7
 800610c:	b002      	add	sp, #8
 800610e:	bd80      	pop	{r7, pc}

08006110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a30      	ldr	r2, [pc, #192]	; (80061e4 <TIM_Base_SetConfig+0xd4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d008      	beq.n	800613a <TIM_Base_SetConfig+0x2a>
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	2380      	movs	r3, #128	; 0x80
 800612c:	05db      	lsls	r3, r3, #23
 800612e:	429a      	cmp	r2, r3
 8006130:	d003      	beq.n	800613a <TIM_Base_SetConfig+0x2a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2c      	ldr	r2, [pc, #176]	; (80061e8 <TIM_Base_SetConfig+0xd8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d108      	bne.n	800614c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2270      	movs	r2, #112	; 0x70
 800613e:	4393      	bics	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4313      	orrs	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a25      	ldr	r2, [pc, #148]	; (80061e4 <TIM_Base_SetConfig+0xd4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d014      	beq.n	800617e <TIM_Base_SetConfig+0x6e>
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	05db      	lsls	r3, r3, #23
 800615a:	429a      	cmp	r2, r3
 800615c:	d00f      	beq.n	800617e <TIM_Base_SetConfig+0x6e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a21      	ldr	r2, [pc, #132]	; (80061e8 <TIM_Base_SetConfig+0xd8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00b      	beq.n	800617e <TIM_Base_SetConfig+0x6e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a20      	ldr	r2, [pc, #128]	; (80061ec <TIM_Base_SetConfig+0xdc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d007      	beq.n	800617e <TIM_Base_SetConfig+0x6e>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a1f      	ldr	r2, [pc, #124]	; (80061f0 <TIM_Base_SetConfig+0xe0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d003      	beq.n	800617e <TIM_Base_SetConfig+0x6e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a1e      	ldr	r2, [pc, #120]	; (80061f4 <TIM_Base_SetConfig+0xe4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d108      	bne.n	8006190 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a1d      	ldr	r2, [pc, #116]	; (80061f8 <TIM_Base_SetConfig+0xe8>)
 8006182:	4013      	ands	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2280      	movs	r2, #128	; 0x80
 8006194:	4393      	bics	r3, r2
 8006196:	001a      	movs	r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a0a      	ldr	r2, [pc, #40]	; (80061e4 <TIM_Base_SetConfig+0xd4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d007      	beq.n	80061ce <TIM_Base_SetConfig+0xbe>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a0b      	ldr	r2, [pc, #44]	; (80061f0 <TIM_Base_SetConfig+0xe0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d003      	beq.n	80061ce <TIM_Base_SetConfig+0xbe>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a0a      	ldr	r2, [pc, #40]	; (80061f4 <TIM_Base_SetConfig+0xe4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d103      	bne.n	80061d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	615a      	str	r2, [r3, #20]
}
 80061dc:	46c0      	nop			; (mov r8, r8)
 80061de:	46bd      	mov	sp, r7
 80061e0:	b004      	add	sp, #16
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40012c00 	.word	0x40012c00
 80061e8:	40000400 	.word	0x40000400
 80061ec:	40002000 	.word	0x40002000
 80061f0:	40014400 	.word	0x40014400
 80061f4:	40014800 	.word	0x40014800
 80061f8:	fffffcff 	.word	0xfffffcff

080061fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	2201      	movs	r2, #1
 8006210:	4393      	bics	r3, r2
 8006212:	001a      	movs	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4a1e      	ldr	r2, [pc, #120]	; (80062a0 <TIM_TI1_SetConfig+0xa4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d008      	beq.n	800623e <TIM_TI1_SetConfig+0x42>
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	2380      	movs	r3, #128	; 0x80
 8006230:	05db      	lsls	r3, r3, #23
 8006232:	429a      	cmp	r2, r3
 8006234:	d003      	beq.n	800623e <TIM_TI1_SetConfig+0x42>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <TIM_TI1_SetConfig+0xa8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d101      	bne.n	8006242 <TIM_TI1_SetConfig+0x46>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <TIM_TI1_SetConfig+0x48>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2203      	movs	r2, #3
 800624c:	4393      	bics	r3, r2
 800624e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	e003      	b.n	8006262 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2201      	movs	r2, #1
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	22f0      	movs	r2, #240	; 0xf0
 8006266:	4393      	bics	r3, r2
 8006268:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	22ff      	movs	r2, #255	; 0xff
 8006270:	4013      	ands	r3, r2
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	220a      	movs	r2, #10
 800627c:	4393      	bics	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	220a      	movs	r2, #10
 8006284:	4013      	ands	r3, r2
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	621a      	str	r2, [r3, #32]
}
 8006298:	46c0      	nop			; (mov r8, r8)
 800629a:	46bd      	mov	sp, r7
 800629c:	b006      	add	sp, #24
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	40012c00 	.word	0x40012c00
 80062a4:	40000400 	.word	0x40000400

080062a8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	2210      	movs	r2, #16
 80062bc:	4393      	bics	r3, r2
 80062be:	001a      	movs	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	4a14      	ldr	r2, [pc, #80]	; (8006324 <TIM_TI2_SetConfig+0x7c>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4a10      	ldr	r2, [pc, #64]	; (8006328 <TIM_TI2_SetConfig+0x80>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	031b      	lsls	r3, r3, #12
 80062ee:	041b      	lsls	r3, r3, #16
 80062f0:	0c1b      	lsrs	r3, r3, #16
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	22a0      	movs	r2, #160	; 0xa0
 80062fc:	4393      	bics	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	22a0      	movs	r2, #160	; 0xa0
 8006306:	4013      	ands	r3, r2
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	46bd      	mov	sp, r7
 800631e:	b006      	add	sp, #24
 8006320:	bd80      	pop	{r7, pc}
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	fffffcff 	.word	0xfffffcff
 8006328:	ffff0fff 	.word	0xffff0fff

0800632c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	4a19      	ldr	r2, [pc, #100]	; (80063a4 <TIM_TI3_SetConfig+0x78>)
 8006340:	401a      	ands	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2203      	movs	r2, #3
 8006356:	4393      	bics	r3, r2
 8006358:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	22f0      	movs	r2, #240	; 0xf0
 8006366:	4393      	bics	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	22ff      	movs	r2, #255	; 0xff
 8006370:	4013      	ands	r3, r2
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4a0b      	ldr	r2, [pc, #44]	; (80063a8 <TIM_TI3_SetConfig+0x7c>)
 800637c:	4013      	ands	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	021a      	lsls	r2, r3, #8
 8006384:	23a0      	movs	r3, #160	; 0xa0
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	4013      	ands	r3, r2
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	621a      	str	r2, [r3, #32]
}
 800639c:	46c0      	nop			; (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b006      	add	sp, #24
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	fffffeff 	.word	0xfffffeff
 80063a8:	fffff5ff 	.word	0xfffff5ff

080063ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	4a1a      	ldr	r2, [pc, #104]	; (8006428 <TIM_TI4_SetConfig+0x7c>)
 80063c0:	401a      	ands	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4a15      	ldr	r2, [pc, #84]	; (800642c <TIM_TI4_SetConfig+0x80>)
 80063d6:	4013      	ands	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	4a12      	ldr	r2, [pc, #72]	; (8006430 <TIM_TI4_SetConfig+0x84>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	031b      	lsls	r3, r3, #12
 80063f0:	041b      	lsls	r3, r3, #16
 80063f2:	0c1b      	lsrs	r3, r3, #16
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4a0d      	ldr	r2, [pc, #52]	; (8006434 <TIM_TI4_SetConfig+0x88>)
 80063fe:	4013      	ands	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	031a      	lsls	r2, r3, #12
 8006406:	23a0      	movs	r3, #160	; 0xa0
 8006408:	021b      	lsls	r3, r3, #8
 800640a:	4013      	ands	r3, r2
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	46bd      	mov	sp, r7
 8006422:	b006      	add	sp, #24
 8006424:	bd80      	pop	{r7, pc}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	ffffefff 	.word	0xffffefff
 800642c:	fffffcff 	.word	0xfffffcff
 8006430:	ffff0fff 	.word	0xffff0fff
 8006434:	ffff5fff 	.word	0xffff5fff

08006438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	221f      	movs	r2, #31
 8006448:	4013      	ands	r3, r2
 800644a:	2201      	movs	r2, #1
 800644c:	409a      	lsls	r2, r3
 800644e:	0013      	movs	r3, r2
 8006450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	43d2      	mvns	r2, r2
 800645a:	401a      	ands	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a1a      	ldr	r2, [r3, #32]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	211f      	movs	r1, #31
 8006468:	400b      	ands	r3, r1
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	4099      	lsls	r1, r3
 800646e:	000b      	movs	r3, r1
 8006470:	431a      	orrs	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]
}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	46bd      	mov	sp, r7
 800647a:	b006      	add	sp, #24
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	223c      	movs	r2, #60	; 0x3c
 800648e:	5c9b      	ldrb	r3, [r3, r2]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006494:	2302      	movs	r3, #2
 8006496:	e050      	b.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	223c      	movs	r2, #60	; 0x3c
 800649c:	2101      	movs	r1, #1
 800649e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	223d      	movs	r2, #61	; 0x3d
 80064a4:	2102      	movs	r1, #2
 80064a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a21      	ldr	r2, [pc, #132]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d108      	bne.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a20      	ldr	r2, [pc, #128]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2270      	movs	r2, #112	; 0x70
 80064d8:	4393      	bics	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a14      	ldr	r2, [pc, #80]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00a      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	2380      	movs	r3, #128	; 0x80
 80064fe:	05db      	lsls	r3, r3, #23
 8006500:	429a      	cmp	r2, r3
 8006502:	d004      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a10      	ldr	r2, [pc, #64]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10c      	bne.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2280      	movs	r2, #128	; 0x80
 8006512:	4393      	bics	r3, r2
 8006514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4313      	orrs	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	223d      	movs	r2, #61	; 0x3d
 800652c:	2101      	movs	r1, #1
 800652e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	223c      	movs	r2, #60	; 0x3c
 8006534:	2100      	movs	r1, #0
 8006536:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	0018      	movs	r0, r3
 800653c:	46bd      	mov	sp, r7
 800653e:	b004      	add	sp, #16
 8006540:	bd80      	pop	{r7, pc}
 8006542:	46c0      	nop			; (mov r8, r8)
 8006544:	40012c00 	.word	0x40012c00
 8006548:	ff0fffff 	.word	0xff0fffff
 800654c:	40000400 	.word	0x40000400

08006550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006558:	46c0      	nop			; (mov r8, r8)
 800655a:	46bd      	mov	sp, r7
 800655c:	b002      	add	sp, #8
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006568:	46c0      	nop			; (mov r8, r8)
 800656a:	46bd      	mov	sp, r7
 800656c:	b002      	add	sp, #8
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006578:	46c0      	nop			; (mov r8, r8)
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08a      	sub	sp, #40	; 0x28
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	1dbb      	adds	r3, r7, #6
 800658e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2288      	movs	r2, #136	; 0x88
 8006594:	589b      	ldr	r3, [r3, r2]
 8006596:	2b20      	cmp	r3, #32
 8006598:	d000      	beq.n	800659c <HAL_UART_Transmit+0x1c>
 800659a:	e088      	b.n	80066ae <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_UART_Transmit+0x2a>
 80065a2:	1dbb      	adds	r3, r7, #6
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e080      	b.n	80066b0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	015b      	lsls	r3, r3, #5
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d109      	bne.n	80065ce <HAL_UART_Transmit+0x4e>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d105      	bne.n	80065ce <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2201      	movs	r2, #1
 80065c6:	4013      	ands	r3, r2
 80065c8:	d001      	beq.n	80065ce <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e070      	b.n	80066b0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2290      	movs	r2, #144	; 0x90
 80065d2:	2100      	movs	r1, #0
 80065d4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2288      	movs	r2, #136	; 0x88
 80065da:	2121      	movs	r1, #33	; 0x21
 80065dc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065de:	f7fe fec9 	bl	8005374 <HAL_GetTick>
 80065e2:	0003      	movs	r3, r0
 80065e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1dba      	adds	r2, r7, #6
 80065ea:	2154      	movs	r1, #84	; 0x54
 80065ec:	8812      	ldrh	r2, [r2, #0]
 80065ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	1dba      	adds	r2, r7, #6
 80065f4:	2156      	movs	r1, #86	; 0x56
 80065f6:	8812      	ldrh	r2, [r2, #0]
 80065f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	015b      	lsls	r3, r3, #5
 8006602:	429a      	cmp	r2, r3
 8006604:	d108      	bne.n	8006618 <HAL_UART_Transmit+0x98>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d104      	bne.n	8006618 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800660e:	2300      	movs	r3, #0
 8006610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	e003      	b.n	8006620 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800661c:	2300      	movs	r3, #0
 800661e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006620:	e02c      	b.n	800667c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	0013      	movs	r3, r2
 800662c:	2200      	movs	r2, #0
 800662e:	2180      	movs	r1, #128	; 0x80
 8006630:	f000 f842 	bl	80066b8 <UART_WaitOnFlagUntilTimeout>
 8006634:	1e03      	subs	r3, r0, #0
 8006636:	d001      	beq.n	800663c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e039      	b.n	80066b0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10b      	bne.n	800665a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	001a      	movs	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	05d2      	lsls	r2, r2, #23
 800664e:	0dd2      	lsrs	r2, r2, #23
 8006650:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	3302      	adds	r3, #2
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	e007      	b.n	800666a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	781a      	ldrb	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	3301      	adds	r3, #1
 8006668:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2256      	movs	r2, #86	; 0x56
 800666e:	5a9b      	ldrh	r3, [r3, r2]
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b299      	uxth	r1, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2256      	movs	r2, #86	; 0x56
 800667a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2256      	movs	r2, #86	; 0x56
 8006680:	5a9b      	ldrh	r3, [r3, r2]
 8006682:	b29b      	uxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1cc      	bne.n	8006622 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	0013      	movs	r3, r2
 8006692:	2200      	movs	r2, #0
 8006694:	2140      	movs	r1, #64	; 0x40
 8006696:	f000 f80f 	bl	80066b8 <UART_WaitOnFlagUntilTimeout>
 800669a:	1e03      	subs	r3, r0, #0
 800669c:	d001      	beq.n	80066a2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e006      	b.n	80066b0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2288      	movs	r2, #136	; 0x88
 80066a6:	2120      	movs	r1, #32
 80066a8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e000      	b.n	80066b0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80066ae:	2302      	movs	r3, #2
  }
}
 80066b0:	0018      	movs	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	b008      	add	sp, #32
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b094      	sub	sp, #80	; 0x50
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	1dfb      	adds	r3, r7, #7
 80066c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c8:	e0a7      	b.n	800681a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066cc:	3301      	adds	r3, #1
 80066ce:	d100      	bne.n	80066d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80066d0:	e0a3      	b.n	800681a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d2:	f7fe fe4f 	bl	8005374 <HAL_GetTick>
 80066d6:	0002      	movs	r2, r0
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066de:	429a      	cmp	r2, r3
 80066e0:	d302      	bcc.n	80066e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d13f      	bne.n	8006768 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e8:	f3ef 8310 	mrs	r3, PRIMASK
 80066ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80066f0:	647b      	str	r3, [r7, #68]	; 0x44
 80066f2:	2301      	movs	r3, #1
 80066f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	f383 8810 	msr	PRIMASK, r3
}
 80066fc:	46c0      	nop			; (mov r8, r8)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	494e      	ldr	r1, [pc, #312]	; (8006844 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800670a:	400a      	ands	r2, r1
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006710:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	f383 8810 	msr	PRIMASK, r3
}
 8006718:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800671a:	f3ef 8310 	mrs	r3, PRIMASK
 800671e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006722:	643b      	str	r3, [r7, #64]	; 0x40
 8006724:	2301      	movs	r3, #1
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	f383 8810 	msr	PRIMASK, r3
}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2101      	movs	r1, #1
 800673c:	438a      	bics	r2, r1
 800673e:	609a      	str	r2, [r3, #8]
 8006740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006746:	f383 8810 	msr	PRIMASK, r3
}
 800674a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2288      	movs	r2, #136	; 0x88
 8006750:	2120      	movs	r1, #32
 8006752:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	228c      	movs	r2, #140	; 0x8c
 8006758:	2120      	movs	r1, #32
 800675a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2284      	movs	r2, #132	; 0x84
 8006760:	2100      	movs	r1, #0
 8006762:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e069      	b.n	800683c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2204      	movs	r2, #4
 8006770:	4013      	ands	r3, r2
 8006772:	d052      	beq.n	800681a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69da      	ldr	r2, [r3, #28]
 800677a:	2380      	movs	r3, #128	; 0x80
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	401a      	ands	r2, r3
 8006780:	2380      	movs	r3, #128	; 0x80
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	429a      	cmp	r2, r3
 8006786:	d148      	bne.n	800681a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2280      	movs	r2, #128	; 0x80
 800678e:	0112      	lsls	r2, r2, #4
 8006790:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006792:	f3ef 8310 	mrs	r3, PRIMASK
 8006796:	613b      	str	r3, [r7, #16]
  return(result);
 8006798:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800679a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800679c:	2301      	movs	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f383 8810 	msr	PRIMASK, r3
}
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4924      	ldr	r1, [pc, #144]	; (8006844 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80067b4:	400a      	ands	r2, r1
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f383 8810 	msr	PRIMASK, r3
}
 80067c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067c4:	f3ef 8310 	mrs	r3, PRIMASK
 80067c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80067ca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80067ce:	2301      	movs	r3, #1
 80067d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f383 8810 	msr	PRIMASK, r3
}
 80067d8:	46c0      	nop			; (mov r8, r8)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2101      	movs	r1, #1
 80067e6:	438a      	bics	r2, r1
 80067e8:	609a      	str	r2, [r3, #8]
 80067ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	f383 8810 	msr	PRIMASK, r3
}
 80067f4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2288      	movs	r2, #136	; 0x88
 80067fa:	2120      	movs	r1, #32
 80067fc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	228c      	movs	r2, #140	; 0x8c
 8006802:	2120      	movs	r1, #32
 8006804:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2290      	movs	r2, #144	; 0x90
 800680a:	2120      	movs	r1, #32
 800680c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2284      	movs	r2, #132	; 0x84
 8006812:	2100      	movs	r1, #0
 8006814:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e010      	b.n	800683c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	4013      	ands	r3, r2
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	425a      	negs	r2, r3
 800682a:	4153      	adcs	r3, r2
 800682c:	b2db      	uxtb	r3, r3
 800682e:	001a      	movs	r2, r3
 8006830:	1dfb      	adds	r3, r7, #7
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	d100      	bne.n	800683a <UART_WaitOnFlagUntilTimeout+0x182>
 8006838:	e747      	b.n	80066ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b014      	add	sp, #80	; 0x50
 8006842:	bd80      	pop	{r7, pc}
 8006844:	fffffe5f 	.word	0xfffffe5f

08006848 <__errno>:
 8006848:	4b01      	ldr	r3, [pc, #4]	; (8006850 <__errno+0x8>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	4770      	bx	lr
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	20000064 	.word	0x20000064

08006854 <__libc_init_array>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	2600      	movs	r6, #0
 8006858:	4d0c      	ldr	r5, [pc, #48]	; (800688c <__libc_init_array+0x38>)
 800685a:	4c0d      	ldr	r4, [pc, #52]	; (8006890 <__libc_init_array+0x3c>)
 800685c:	1b64      	subs	r4, r4, r5
 800685e:	10a4      	asrs	r4, r4, #2
 8006860:	42a6      	cmp	r6, r4
 8006862:	d109      	bne.n	8006878 <__libc_init_array+0x24>
 8006864:	2600      	movs	r6, #0
 8006866:	f003 f9dd 	bl	8009c24 <_init>
 800686a:	4d0a      	ldr	r5, [pc, #40]	; (8006894 <__libc_init_array+0x40>)
 800686c:	4c0a      	ldr	r4, [pc, #40]	; (8006898 <__libc_init_array+0x44>)
 800686e:	1b64      	subs	r4, r4, r5
 8006870:	10a4      	asrs	r4, r4, #2
 8006872:	42a6      	cmp	r6, r4
 8006874:	d105      	bne.n	8006882 <__libc_init_array+0x2e>
 8006876:	bd70      	pop	{r4, r5, r6, pc}
 8006878:	00b3      	lsls	r3, r6, #2
 800687a:	58eb      	ldr	r3, [r5, r3]
 800687c:	4798      	blx	r3
 800687e:	3601      	adds	r6, #1
 8006880:	e7ee      	b.n	8006860 <__libc_init_array+0xc>
 8006882:	00b3      	lsls	r3, r6, #2
 8006884:	58eb      	ldr	r3, [r5, r3]
 8006886:	4798      	blx	r3
 8006888:	3601      	adds	r6, #1
 800688a:	e7f2      	b.n	8006872 <__libc_init_array+0x1e>
 800688c:	0800a26c 	.word	0x0800a26c
 8006890:	0800a26c 	.word	0x0800a26c
 8006894:	0800a26c 	.word	0x0800a26c
 8006898:	0800a270 	.word	0x0800a270

0800689c <memcpy>:
 800689c:	2300      	movs	r3, #0
 800689e:	b510      	push	{r4, lr}
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d100      	bne.n	80068a6 <memcpy+0xa>
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	5ccc      	ldrb	r4, [r1, r3]
 80068a8:	54c4      	strb	r4, [r0, r3]
 80068aa:	3301      	adds	r3, #1
 80068ac:	e7f8      	b.n	80068a0 <memcpy+0x4>

080068ae <memset>:
 80068ae:	0003      	movs	r3, r0
 80068b0:	1882      	adds	r2, r0, r2
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d100      	bne.n	80068b8 <memset+0xa>
 80068b6:	4770      	bx	lr
 80068b8:	7019      	strb	r1, [r3, #0]
 80068ba:	3301      	adds	r3, #1
 80068bc:	e7f9      	b.n	80068b2 <memset+0x4>

080068be <__cvt>:
 80068be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068c0:	001e      	movs	r6, r3
 80068c2:	2300      	movs	r3, #0
 80068c4:	0014      	movs	r4, r2
 80068c6:	b08b      	sub	sp, #44	; 0x2c
 80068c8:	429e      	cmp	r6, r3
 80068ca:	da04      	bge.n	80068d6 <__cvt+0x18>
 80068cc:	2180      	movs	r1, #128	; 0x80
 80068ce:	0609      	lsls	r1, r1, #24
 80068d0:	1873      	adds	r3, r6, r1
 80068d2:	001e      	movs	r6, r3
 80068d4:	232d      	movs	r3, #45	; 0x2d
 80068d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068d8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80068da:	7013      	strb	r3, [r2, #0]
 80068dc:	2320      	movs	r3, #32
 80068de:	2203      	movs	r2, #3
 80068e0:	439f      	bics	r7, r3
 80068e2:	2f46      	cmp	r7, #70	; 0x46
 80068e4:	d007      	beq.n	80068f6 <__cvt+0x38>
 80068e6:	003b      	movs	r3, r7
 80068e8:	3b45      	subs	r3, #69	; 0x45
 80068ea:	4259      	negs	r1, r3
 80068ec:	414b      	adcs	r3, r1
 80068ee:	9910      	ldr	r1, [sp, #64]	; 0x40
 80068f0:	3a01      	subs	r2, #1
 80068f2:	18cb      	adds	r3, r1, r3
 80068f4:	9310      	str	r3, [sp, #64]	; 0x40
 80068f6:	ab09      	add	r3, sp, #36	; 0x24
 80068f8:	9304      	str	r3, [sp, #16]
 80068fa:	ab08      	add	r3, sp, #32
 80068fc:	9303      	str	r3, [sp, #12]
 80068fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006900:	9200      	str	r2, [sp, #0]
 8006902:	9302      	str	r3, [sp, #8]
 8006904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006906:	0022      	movs	r2, r4
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	0033      	movs	r3, r6
 800690c:	f000 fe36 	bl	800757c <_dtoa_r>
 8006910:	0005      	movs	r5, r0
 8006912:	2f47      	cmp	r7, #71	; 0x47
 8006914:	d102      	bne.n	800691c <__cvt+0x5e>
 8006916:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006918:	07db      	lsls	r3, r3, #31
 800691a:	d528      	bpl.n	800696e <__cvt+0xb0>
 800691c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800691e:	18eb      	adds	r3, r5, r3
 8006920:	9307      	str	r3, [sp, #28]
 8006922:	2f46      	cmp	r7, #70	; 0x46
 8006924:	d114      	bne.n	8006950 <__cvt+0x92>
 8006926:	782b      	ldrb	r3, [r5, #0]
 8006928:	2b30      	cmp	r3, #48	; 0x30
 800692a:	d10c      	bne.n	8006946 <__cvt+0x88>
 800692c:	2200      	movs	r2, #0
 800692e:	2300      	movs	r3, #0
 8006930:	0020      	movs	r0, r4
 8006932:	0031      	movs	r1, r6
 8006934:	f7f9 fd88 	bl	8000448 <__aeabi_dcmpeq>
 8006938:	2800      	cmp	r0, #0
 800693a:	d104      	bne.n	8006946 <__cvt+0x88>
 800693c:	2301      	movs	r3, #1
 800693e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006948:	9a07      	ldr	r2, [sp, #28]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	18d3      	adds	r3, r2, r3
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	2200      	movs	r2, #0
 8006952:	2300      	movs	r3, #0
 8006954:	0020      	movs	r0, r4
 8006956:	0031      	movs	r1, r6
 8006958:	f7f9 fd76 	bl	8000448 <__aeabi_dcmpeq>
 800695c:	2800      	cmp	r0, #0
 800695e:	d001      	beq.n	8006964 <__cvt+0xa6>
 8006960:	9b07      	ldr	r3, [sp, #28]
 8006962:	9309      	str	r3, [sp, #36]	; 0x24
 8006964:	2230      	movs	r2, #48	; 0x30
 8006966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006968:	9907      	ldr	r1, [sp, #28]
 800696a:	428b      	cmp	r3, r1
 800696c:	d306      	bcc.n	800697c <__cvt+0xbe>
 800696e:	0028      	movs	r0, r5
 8006970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006972:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006974:	1b5b      	subs	r3, r3, r5
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	b00b      	add	sp, #44	; 0x2c
 800697a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800697c:	1c59      	adds	r1, r3, #1
 800697e:	9109      	str	r1, [sp, #36]	; 0x24
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	e7f0      	b.n	8006966 <__cvt+0xa8>

08006984 <__exponent>:
 8006984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006986:	1c83      	adds	r3, r0, #2
 8006988:	b087      	sub	sp, #28
 800698a:	9303      	str	r3, [sp, #12]
 800698c:	0005      	movs	r5, r0
 800698e:	000c      	movs	r4, r1
 8006990:	232b      	movs	r3, #43	; 0x2b
 8006992:	7002      	strb	r2, [r0, #0]
 8006994:	2900      	cmp	r1, #0
 8006996:	da01      	bge.n	800699c <__exponent+0x18>
 8006998:	424c      	negs	r4, r1
 800699a:	3302      	adds	r3, #2
 800699c:	706b      	strb	r3, [r5, #1]
 800699e:	2c09      	cmp	r4, #9
 80069a0:	dd31      	ble.n	8006a06 <__exponent+0x82>
 80069a2:	270a      	movs	r7, #10
 80069a4:	ab04      	add	r3, sp, #16
 80069a6:	1dde      	adds	r6, r3, #7
 80069a8:	0020      	movs	r0, r4
 80069aa:	0039      	movs	r1, r7
 80069ac:	9601      	str	r6, [sp, #4]
 80069ae:	f7f9 fd35 	bl	800041c <__aeabi_idivmod>
 80069b2:	3e01      	subs	r6, #1
 80069b4:	3130      	adds	r1, #48	; 0x30
 80069b6:	0020      	movs	r0, r4
 80069b8:	7031      	strb	r1, [r6, #0]
 80069ba:	0039      	movs	r1, r7
 80069bc:	9402      	str	r4, [sp, #8]
 80069be:	f7f9 fc47 	bl	8000250 <__divsi3>
 80069c2:	9b02      	ldr	r3, [sp, #8]
 80069c4:	0004      	movs	r4, r0
 80069c6:	2b63      	cmp	r3, #99	; 0x63
 80069c8:	dcee      	bgt.n	80069a8 <__exponent+0x24>
 80069ca:	9b01      	ldr	r3, [sp, #4]
 80069cc:	3430      	adds	r4, #48	; 0x30
 80069ce:	1e9a      	subs	r2, r3, #2
 80069d0:	0013      	movs	r3, r2
 80069d2:	9903      	ldr	r1, [sp, #12]
 80069d4:	7014      	strb	r4, [r2, #0]
 80069d6:	a804      	add	r0, sp, #16
 80069d8:	3007      	adds	r0, #7
 80069da:	4298      	cmp	r0, r3
 80069dc:	d80e      	bhi.n	80069fc <__exponent+0x78>
 80069de:	ab04      	add	r3, sp, #16
 80069e0:	3307      	adds	r3, #7
 80069e2:	2000      	movs	r0, #0
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d804      	bhi.n	80069f2 <__exponent+0x6e>
 80069e8:	ab04      	add	r3, sp, #16
 80069ea:	3009      	adds	r0, #9
 80069ec:	18c0      	adds	r0, r0, r3
 80069ee:	9b01      	ldr	r3, [sp, #4]
 80069f0:	1ac0      	subs	r0, r0, r3
 80069f2:	9b03      	ldr	r3, [sp, #12]
 80069f4:	1818      	adds	r0, r3, r0
 80069f6:	1b40      	subs	r0, r0, r5
 80069f8:	b007      	add	sp, #28
 80069fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fc:	7818      	ldrb	r0, [r3, #0]
 80069fe:	3301      	adds	r3, #1
 8006a00:	7008      	strb	r0, [r1, #0]
 8006a02:	3101      	adds	r1, #1
 8006a04:	e7e7      	b.n	80069d6 <__exponent+0x52>
 8006a06:	2330      	movs	r3, #48	; 0x30
 8006a08:	18e4      	adds	r4, r4, r3
 8006a0a:	70ab      	strb	r3, [r5, #2]
 8006a0c:	1d28      	adds	r0, r5, #4
 8006a0e:	70ec      	strb	r4, [r5, #3]
 8006a10:	e7f1      	b.n	80069f6 <__exponent+0x72>
	...

08006a14 <_printf_float>:
 8006a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a16:	b095      	sub	sp, #84	; 0x54
 8006a18:	000c      	movs	r4, r1
 8006a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a1c:	001e      	movs	r6, r3
 8006a1e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006a20:	0007      	movs	r7, r0
 8006a22:	f001 fd93 	bl	800854c <_localeconv_r>
 8006a26:	6803      	ldr	r3, [r0, #0]
 8006a28:	0018      	movs	r0, r3
 8006a2a:	930c      	str	r3, [sp, #48]	; 0x30
 8006a2c:	f7f9 fb6a 	bl	8000104 <strlen>
 8006a30:	2300      	movs	r3, #0
 8006a32:	9312      	str	r3, [sp, #72]	; 0x48
 8006a34:	7e23      	ldrb	r3, [r4, #24]
 8006a36:	2207      	movs	r2, #7
 8006a38:	930a      	str	r3, [sp, #40]	; 0x28
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	900e      	str	r0, [sp, #56]	; 0x38
 8006a3e:	930d      	str	r3, [sp, #52]	; 0x34
 8006a40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a42:	682b      	ldr	r3, [r5, #0]
 8006a44:	05c9      	lsls	r1, r1, #23
 8006a46:	d547      	bpl.n	8006ad8 <_printf_float+0xc4>
 8006a48:	189b      	adds	r3, r3, r2
 8006a4a:	4393      	bics	r3, r2
 8006a4c:	001a      	movs	r2, r3
 8006a4e:	3208      	adds	r2, #8
 8006a50:	602a      	str	r2, [r5, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	64a2      	str	r2, [r4, #72]	; 0x48
 8006a58:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006a5e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006a60:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a62:	006b      	lsls	r3, r5, #1
 8006a64:	085b      	lsrs	r3, r3, #1
 8006a66:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006a6a:	4ba7      	ldr	r3, [pc, #668]	; (8006d08 <_printf_float+0x2f4>)
 8006a6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a6e:	4252      	negs	r2, r2
 8006a70:	f7fc f93e 	bl	8002cf0 <__aeabi_dcmpun>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d131      	bne.n	8006adc <_printf_float+0xc8>
 8006a78:	2201      	movs	r2, #1
 8006a7a:	4ba3      	ldr	r3, [pc, #652]	; (8006d08 <_printf_float+0x2f4>)
 8006a7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006a7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a80:	4252      	negs	r2, r2
 8006a82:	f7f9 fcf1 	bl	8000468 <__aeabi_dcmple>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d128      	bne.n	8006adc <_printf_float+0xc8>
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	0029      	movs	r1, r5
 8006a90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006a92:	f7f9 fcdf 	bl	8000454 <__aeabi_dcmplt>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d003      	beq.n	8006aa2 <_printf_float+0x8e>
 8006a9a:	0023      	movs	r3, r4
 8006a9c:	222d      	movs	r2, #45	; 0x2d
 8006a9e:	3343      	adds	r3, #67	; 0x43
 8006aa0:	701a      	strb	r2, [r3, #0]
 8006aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aa4:	4d99      	ldr	r5, [pc, #612]	; (8006d0c <_printf_float+0x2f8>)
 8006aa6:	2b47      	cmp	r3, #71	; 0x47
 8006aa8:	d900      	bls.n	8006aac <_printf_float+0x98>
 8006aaa:	4d99      	ldr	r5, [pc, #612]	; (8006d10 <_printf_float+0x2fc>)
 8006aac:	2303      	movs	r3, #3
 8006aae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ab0:	6123      	str	r3, [r4, #16]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	439a      	bics	r2, r3
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	6022      	str	r2, [r4, #0]
 8006aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8006abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abe:	0021      	movs	r1, r4
 8006ac0:	0038      	movs	r0, r7
 8006ac2:	9600      	str	r6, [sp, #0]
 8006ac4:	aa13      	add	r2, sp, #76	; 0x4c
 8006ac6:	f000 f9e7 	bl	8006e98 <_printf_common>
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	d000      	beq.n	8006ad0 <_printf_float+0xbc>
 8006ace:	e0a2      	b.n	8006c16 <_printf_float+0x202>
 8006ad0:	2001      	movs	r0, #1
 8006ad2:	4240      	negs	r0, r0
 8006ad4:	b015      	add	sp, #84	; 0x54
 8006ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad8:	3307      	adds	r3, #7
 8006ada:	e7b6      	b.n	8006a4a <_printf_float+0x36>
 8006adc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ade:	002b      	movs	r3, r5
 8006ae0:	0010      	movs	r0, r2
 8006ae2:	0029      	movs	r1, r5
 8006ae4:	f7fc f904 	bl	8002cf0 <__aeabi_dcmpun>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d00b      	beq.n	8006b04 <_printf_float+0xf0>
 8006aec:	2d00      	cmp	r5, #0
 8006aee:	da03      	bge.n	8006af8 <_printf_float+0xe4>
 8006af0:	0023      	movs	r3, r4
 8006af2:	222d      	movs	r2, #45	; 0x2d
 8006af4:	3343      	adds	r3, #67	; 0x43
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afa:	4d86      	ldr	r5, [pc, #536]	; (8006d14 <_printf_float+0x300>)
 8006afc:	2b47      	cmp	r3, #71	; 0x47
 8006afe:	d9d5      	bls.n	8006aac <_printf_float+0x98>
 8006b00:	4d85      	ldr	r5, [pc, #532]	; (8006d18 <_printf_float+0x304>)
 8006b02:	e7d3      	b.n	8006aac <_printf_float+0x98>
 8006b04:	2220      	movs	r2, #32
 8006b06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b08:	6863      	ldr	r3, [r4, #4]
 8006b0a:	4391      	bics	r1, r2
 8006b0c:	910f      	str	r1, [sp, #60]	; 0x3c
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	d149      	bne.n	8006ba6 <_printf_float+0x192>
 8006b12:	3307      	adds	r3, #7
 8006b14:	6063      	str	r3, [r4, #4]
 8006b16:	2380      	movs	r3, #128	; 0x80
 8006b18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	2200      	movs	r2, #0
 8006b20:	9206      	str	r2, [sp, #24]
 8006b22:	aa12      	add	r2, sp, #72	; 0x48
 8006b24:	9205      	str	r2, [sp, #20]
 8006b26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b28:	a908      	add	r1, sp, #32
 8006b2a:	9204      	str	r2, [sp, #16]
 8006b2c:	aa11      	add	r2, sp, #68	; 0x44
 8006b2e:	9203      	str	r2, [sp, #12]
 8006b30:	2223      	movs	r2, #35	; 0x23
 8006b32:	6023      	str	r3, [r4, #0]
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	6863      	ldr	r3, [r4, #4]
 8006b38:	1852      	adds	r2, r2, r1
 8006b3a:	9202      	str	r2, [sp, #8]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	0038      	movs	r0, r7
 8006b40:	002b      	movs	r3, r5
 8006b42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b44:	f7ff febb 	bl	80068be <__cvt>
 8006b48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b4a:	0005      	movs	r5, r0
 8006b4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006b4e:	2b47      	cmp	r3, #71	; 0x47
 8006b50:	d108      	bne.n	8006b64 <_printf_float+0x150>
 8006b52:	1ccb      	adds	r3, r1, #3
 8006b54:	db02      	blt.n	8006b5c <_printf_float+0x148>
 8006b56:	6863      	ldr	r3, [r4, #4]
 8006b58:	4299      	cmp	r1, r3
 8006b5a:	dd48      	ble.n	8006bee <_printf_float+0x1da>
 8006b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5e:	3b02      	subs	r3, #2
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	930a      	str	r3, [sp, #40]	; 0x28
 8006b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b66:	2b65      	cmp	r3, #101	; 0x65
 8006b68:	d824      	bhi.n	8006bb4 <_printf_float+0x1a0>
 8006b6a:	0020      	movs	r0, r4
 8006b6c:	001a      	movs	r2, r3
 8006b6e:	3901      	subs	r1, #1
 8006b70:	3050      	adds	r0, #80	; 0x50
 8006b72:	9111      	str	r1, [sp, #68]	; 0x44
 8006b74:	f7ff ff06 	bl	8006984 <__exponent>
 8006b78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006b7c:	1813      	adds	r3, r2, r0
 8006b7e:	6123      	str	r3, [r4, #16]
 8006b80:	2a01      	cmp	r2, #1
 8006b82:	dc02      	bgt.n	8006b8a <_printf_float+0x176>
 8006b84:	6822      	ldr	r2, [r4, #0]
 8006b86:	07d2      	lsls	r2, r2, #31
 8006b88:	d501      	bpl.n	8006b8e <_printf_float+0x17a>
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	6123      	str	r3, [r4, #16]
 8006b8e:	2323      	movs	r3, #35	; 0x23
 8006b90:	aa08      	add	r2, sp, #32
 8006b92:	189b      	adds	r3, r3, r2
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d100      	bne.n	8006b9c <_printf_float+0x188>
 8006b9a:	e78f      	b.n	8006abc <_printf_float+0xa8>
 8006b9c:	0023      	movs	r3, r4
 8006b9e:	222d      	movs	r2, #45	; 0x2d
 8006ba0:	3343      	adds	r3, #67	; 0x43
 8006ba2:	701a      	strb	r2, [r3, #0]
 8006ba4:	e78a      	b.n	8006abc <_printf_float+0xa8>
 8006ba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ba8:	2a47      	cmp	r2, #71	; 0x47
 8006baa:	d1b4      	bne.n	8006b16 <_printf_float+0x102>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1b2      	bne.n	8006b16 <_printf_float+0x102>
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	e7af      	b.n	8006b14 <_printf_float+0x100>
 8006bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb6:	2b66      	cmp	r3, #102	; 0x66
 8006bb8:	d11b      	bne.n	8006bf2 <_printf_float+0x1de>
 8006bba:	6863      	ldr	r3, [r4, #4]
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	dd0d      	ble.n	8006bdc <_printf_float+0x1c8>
 8006bc0:	6121      	str	r1, [r4, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d102      	bne.n	8006bcc <_printf_float+0x1b8>
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	07d2      	lsls	r2, r2, #31
 8006bca:	d502      	bpl.n	8006bd2 <_printf_float+0x1be>
 8006bcc:	3301      	adds	r3, #1
 8006bce:	1859      	adds	r1, r3, r1
 8006bd0:	6121      	str	r1, [r4, #16]
 8006bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bd4:	65a3      	str	r3, [r4, #88]	; 0x58
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bda:	e7d8      	b.n	8006b8e <_printf_float+0x17a>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <_printf_float+0x1d4>
 8006be0:	2201      	movs	r2, #1
 8006be2:	6821      	ldr	r1, [r4, #0]
 8006be4:	4211      	tst	r1, r2
 8006be6:	d000      	beq.n	8006bea <_printf_float+0x1d6>
 8006be8:	1c9a      	adds	r2, r3, #2
 8006bea:	6122      	str	r2, [r4, #16]
 8006bec:	e7f1      	b.n	8006bd2 <_printf_float+0x1be>
 8006bee:	2367      	movs	r3, #103	; 0x67
 8006bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	db06      	blt.n	8006c08 <_printf_float+0x1f4>
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	07d2      	lsls	r2, r2, #31
 8006c00:	d5e7      	bpl.n	8006bd2 <_printf_float+0x1be>
 8006c02:	3301      	adds	r3, #1
 8006c04:	6123      	str	r3, [r4, #16]
 8006c06:	e7e4      	b.n	8006bd2 <_printf_float+0x1be>
 8006c08:	2101      	movs	r1, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	dc01      	bgt.n	8006c12 <_printf_float+0x1fe>
 8006c0e:	1849      	adds	r1, r1, r1
 8006c10:	1ac9      	subs	r1, r1, r3
 8006c12:	1852      	adds	r2, r2, r1
 8006c14:	e7e9      	b.n	8006bea <_printf_float+0x1d6>
 8006c16:	6822      	ldr	r2, [r4, #0]
 8006c18:	0553      	lsls	r3, r2, #21
 8006c1a:	d407      	bmi.n	8006c2c <_printf_float+0x218>
 8006c1c:	6923      	ldr	r3, [r4, #16]
 8006c1e:	002a      	movs	r2, r5
 8006c20:	0038      	movs	r0, r7
 8006c22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c24:	47b0      	blx	r6
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d128      	bne.n	8006c7c <_printf_float+0x268>
 8006c2a:	e751      	b.n	8006ad0 <_printf_float+0xbc>
 8006c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2e:	2b65      	cmp	r3, #101	; 0x65
 8006c30:	d800      	bhi.n	8006c34 <_printf_float+0x220>
 8006c32:	e0e1      	b.n	8006df8 <_printf_float+0x3e4>
 8006c34:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006c36:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f7f9 fc04 	bl	8000448 <__aeabi_dcmpeq>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d031      	beq.n	8006ca8 <_printf_float+0x294>
 8006c44:	2301      	movs	r3, #1
 8006c46:	0038      	movs	r0, r7
 8006c48:	4a34      	ldr	r2, [pc, #208]	; (8006d1c <_printf_float+0x308>)
 8006c4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c4c:	47b0      	blx	r6
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	d100      	bne.n	8006c54 <_printf_float+0x240>
 8006c52:	e73d      	b.n	8006ad0 <_printf_float+0xbc>
 8006c54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	db02      	blt.n	8006c62 <_printf_float+0x24e>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	07db      	lsls	r3, r3, #31
 8006c60:	d50c      	bpl.n	8006c7c <_printf_float+0x268>
 8006c62:	0038      	movs	r0, r7
 8006c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c6a:	47b0      	blx	r6
 8006c6c:	2500      	movs	r5, #0
 8006c6e:	1c43      	adds	r3, r0, #1
 8006c70:	d100      	bne.n	8006c74 <_printf_float+0x260>
 8006c72:	e72d      	b.n	8006ad0 <_printf_float+0xbc>
 8006c74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c76:	3b01      	subs	r3, #1
 8006c78:	42ab      	cmp	r3, r5
 8006c7a:	dc0a      	bgt.n	8006c92 <_printf_float+0x27e>
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	079b      	lsls	r3, r3, #30
 8006c80:	d500      	bpl.n	8006c84 <_printf_float+0x270>
 8006c82:	e106      	b.n	8006e92 <_printf_float+0x47e>
 8006c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c86:	68e0      	ldr	r0, [r4, #12]
 8006c88:	4298      	cmp	r0, r3
 8006c8a:	db00      	blt.n	8006c8e <_printf_float+0x27a>
 8006c8c:	e722      	b.n	8006ad4 <_printf_float+0xc0>
 8006c8e:	0018      	movs	r0, r3
 8006c90:	e720      	b.n	8006ad4 <_printf_float+0xc0>
 8006c92:	0022      	movs	r2, r4
 8006c94:	2301      	movs	r3, #1
 8006c96:	0038      	movs	r0, r7
 8006c98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c9a:	321a      	adds	r2, #26
 8006c9c:	47b0      	blx	r6
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	d100      	bne.n	8006ca4 <_printf_float+0x290>
 8006ca2:	e715      	b.n	8006ad0 <_printf_float+0xbc>
 8006ca4:	3501      	adds	r5, #1
 8006ca6:	e7e5      	b.n	8006c74 <_printf_float+0x260>
 8006ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	dc38      	bgt.n	8006d20 <_printf_float+0x30c>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	0038      	movs	r0, r7
 8006cb2:	4a1a      	ldr	r2, [pc, #104]	; (8006d1c <_printf_float+0x308>)
 8006cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cb6:	47b0      	blx	r6
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d100      	bne.n	8006cbe <_printf_float+0x2aa>
 8006cbc:	e708      	b.n	8006ad0 <_printf_float+0xbc>
 8006cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	d102      	bne.n	8006ccc <_printf_float+0x2b8>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	07db      	lsls	r3, r3, #31
 8006cca:	d5d7      	bpl.n	8006c7c <_printf_float+0x268>
 8006ccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cce:	0038      	movs	r0, r7
 8006cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cd4:	47b0      	blx	r6
 8006cd6:	1c43      	adds	r3, r0, #1
 8006cd8:	d100      	bne.n	8006cdc <_printf_float+0x2c8>
 8006cda:	e6f9      	b.n	8006ad0 <_printf_float+0xbc>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	930a      	str	r3, [sp, #40]	; 0x28
 8006ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ce2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ce4:	425b      	negs	r3, r3
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	dc01      	bgt.n	8006cee <_printf_float+0x2da>
 8006cea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cec:	e797      	b.n	8006c1e <_printf_float+0x20a>
 8006cee:	0022      	movs	r2, r4
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	0038      	movs	r0, r7
 8006cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cf6:	321a      	adds	r2, #26
 8006cf8:	47b0      	blx	r6
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	d100      	bne.n	8006d00 <_printf_float+0x2ec>
 8006cfe:	e6e7      	b.n	8006ad0 <_printf_float+0xbc>
 8006d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d02:	3301      	adds	r3, #1
 8006d04:	e7eb      	b.n	8006cde <_printf_float+0x2ca>
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	7fefffff 	.word	0x7fefffff
 8006d0c:	08009e58 	.word	0x08009e58
 8006d10:	08009e5c 	.word	0x08009e5c
 8006d14:	08009e60 	.word	0x08009e60
 8006d18:	08009e64 	.word	0x08009e64
 8006d1c:	08009e68 	.word	0x08009e68
 8006d20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d24:	920a      	str	r2, [sp, #40]	; 0x28
 8006d26:	429a      	cmp	r2, r3
 8006d28:	dd00      	ble.n	8006d2c <_printf_float+0x318>
 8006d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dc3c      	bgt.n	8006dac <_printf_float+0x398>
 8006d32:	2300      	movs	r3, #0
 8006d34:	930d      	str	r3, [sp, #52]	; 0x34
 8006d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	17db      	asrs	r3, r3, #31
 8006d3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d46:	4013      	ands	r3, r2
 8006d48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	dc34      	bgt.n	8006dbc <_printf_float+0x3a8>
 8006d52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d56:	4293      	cmp	r3, r2
 8006d58:	db3d      	blt.n	8006dd6 <_printf_float+0x3c2>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	07db      	lsls	r3, r3, #31
 8006d5e:	d43a      	bmi.n	8006dd6 <_printf_float+0x3c2>
 8006d60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	1a52      	subs	r2, r2, r1
 8006d6a:	920a      	str	r2, [sp, #40]	; 0x28
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	dd00      	ble.n	8006d72 <_printf_float+0x35e>
 8006d70:	930a      	str	r3, [sp, #40]	; 0x28
 8006d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dc36      	bgt.n	8006de6 <_printf_float+0x3d2>
 8006d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d7a:	2500      	movs	r5, #0
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	17db      	asrs	r3, r3, #31
 8006d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d88:	1a9b      	subs	r3, r3, r2
 8006d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d8c:	400a      	ands	r2, r1
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	dc00      	bgt.n	8006d96 <_printf_float+0x382>
 8006d94:	e772      	b.n	8006c7c <_printf_float+0x268>
 8006d96:	0022      	movs	r2, r4
 8006d98:	2301      	movs	r3, #1
 8006d9a:	0038      	movs	r0, r7
 8006d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d9e:	321a      	adds	r2, #26
 8006da0:	47b0      	blx	r6
 8006da2:	1c43      	adds	r3, r0, #1
 8006da4:	d100      	bne.n	8006da8 <_printf_float+0x394>
 8006da6:	e693      	b.n	8006ad0 <_printf_float+0xbc>
 8006da8:	3501      	adds	r5, #1
 8006daa:	e7ea      	b.n	8006d82 <_printf_float+0x36e>
 8006dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dae:	002a      	movs	r2, r5
 8006db0:	0038      	movs	r0, r7
 8006db2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006db4:	47b0      	blx	r6
 8006db6:	1c43      	adds	r3, r0, #1
 8006db8:	d1bb      	bne.n	8006d32 <_printf_float+0x31e>
 8006dba:	e689      	b.n	8006ad0 <_printf_float+0xbc>
 8006dbc:	0022      	movs	r2, r4
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	0038      	movs	r0, r7
 8006dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dc4:	321a      	adds	r2, #26
 8006dc6:	47b0      	blx	r6
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d100      	bne.n	8006dce <_printf_float+0x3ba>
 8006dcc:	e680      	b.n	8006ad0 <_printf_float+0xbc>
 8006dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	930d      	str	r3, [sp, #52]	; 0x34
 8006dd4:	e7b3      	b.n	8006d3e <_printf_float+0x32a>
 8006dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dd8:	0038      	movs	r0, r7
 8006dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ddc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dde:	47b0      	blx	r6
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d1bd      	bne.n	8006d60 <_printf_float+0x34c>
 8006de4:	e674      	b.n	8006ad0 <_printf_float+0xbc>
 8006de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de8:	0038      	movs	r0, r7
 8006dea:	18ea      	adds	r2, r5, r3
 8006dec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df0:	47b0      	blx	r6
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	d1c0      	bne.n	8006d78 <_printf_float+0x364>
 8006df6:	e66b      	b.n	8006ad0 <_printf_float+0xbc>
 8006df8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	dc02      	bgt.n	8006e04 <_printf_float+0x3f0>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	421a      	tst	r2, r3
 8006e02:	d034      	beq.n	8006e6e <_printf_float+0x45a>
 8006e04:	2301      	movs	r3, #1
 8006e06:	002a      	movs	r2, r5
 8006e08:	0038      	movs	r0, r7
 8006e0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e0c:	47b0      	blx	r6
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d100      	bne.n	8006e14 <_printf_float+0x400>
 8006e12:	e65d      	b.n	8006ad0 <_printf_float+0xbc>
 8006e14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e16:	0038      	movs	r0, r7
 8006e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e1c:	47b0      	blx	r6
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	d100      	bne.n	8006e24 <_printf_float+0x410>
 8006e22:	e655      	b.n	8006ad0 <_printf_float+0xbc>
 8006e24:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006e26:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f7f9 fb0c 	bl	8000448 <__aeabi_dcmpeq>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d11a      	bne.n	8006e6a <_printf_float+0x456>
 8006e34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e36:	1c6a      	adds	r2, r5, #1
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	0038      	movs	r0, r7
 8006e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e3e:	47b0      	blx	r6
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d10e      	bne.n	8006e62 <_printf_float+0x44e>
 8006e44:	e644      	b.n	8006ad0 <_printf_float+0xbc>
 8006e46:	0022      	movs	r2, r4
 8006e48:	2301      	movs	r3, #1
 8006e4a:	0038      	movs	r0, r7
 8006e4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e4e:	321a      	adds	r2, #26
 8006e50:	47b0      	blx	r6
 8006e52:	1c43      	adds	r3, r0, #1
 8006e54:	d100      	bne.n	8006e58 <_printf_float+0x444>
 8006e56:	e63b      	b.n	8006ad0 <_printf_float+0xbc>
 8006e58:	3501      	adds	r5, #1
 8006e5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	42ab      	cmp	r3, r5
 8006e60:	dcf1      	bgt.n	8006e46 <_printf_float+0x432>
 8006e62:	0022      	movs	r2, r4
 8006e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e66:	3250      	adds	r2, #80	; 0x50
 8006e68:	e6da      	b.n	8006c20 <_printf_float+0x20c>
 8006e6a:	2500      	movs	r5, #0
 8006e6c:	e7f5      	b.n	8006e5a <_printf_float+0x446>
 8006e6e:	002a      	movs	r2, r5
 8006e70:	e7e3      	b.n	8006e3a <_printf_float+0x426>
 8006e72:	0022      	movs	r2, r4
 8006e74:	2301      	movs	r3, #1
 8006e76:	0038      	movs	r0, r7
 8006e78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e7a:	3219      	adds	r2, #25
 8006e7c:	47b0      	blx	r6
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	d100      	bne.n	8006e84 <_printf_float+0x470>
 8006e82:	e625      	b.n	8006ad0 <_printf_float+0xbc>
 8006e84:	3501      	adds	r5, #1
 8006e86:	68e3      	ldr	r3, [r4, #12]
 8006e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	42ab      	cmp	r3, r5
 8006e8e:	dcf0      	bgt.n	8006e72 <_printf_float+0x45e>
 8006e90:	e6f8      	b.n	8006c84 <_printf_float+0x270>
 8006e92:	2500      	movs	r5, #0
 8006e94:	e7f7      	b.n	8006e86 <_printf_float+0x472>
 8006e96:	46c0      	nop			; (mov r8, r8)

08006e98 <_printf_common>:
 8006e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e9a:	0015      	movs	r5, r2
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	688a      	ldr	r2, [r1, #8]
 8006ea0:	690b      	ldr	r3, [r1, #16]
 8006ea2:	000c      	movs	r4, r1
 8006ea4:	9000      	str	r0, [sp, #0]
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	da00      	bge.n	8006eac <_printf_common+0x14>
 8006eaa:	0013      	movs	r3, r2
 8006eac:	0022      	movs	r2, r4
 8006eae:	602b      	str	r3, [r5, #0]
 8006eb0:	3243      	adds	r2, #67	; 0x43
 8006eb2:	7812      	ldrb	r2, [r2, #0]
 8006eb4:	2a00      	cmp	r2, #0
 8006eb6:	d001      	beq.n	8006ebc <_printf_common+0x24>
 8006eb8:	3301      	adds	r3, #1
 8006eba:	602b      	str	r3, [r5, #0]
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	069b      	lsls	r3, r3, #26
 8006ec0:	d502      	bpl.n	8006ec8 <_printf_common+0x30>
 8006ec2:	682b      	ldr	r3, [r5, #0]
 8006ec4:	3302      	adds	r3, #2
 8006ec6:	602b      	str	r3, [r5, #0]
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	2306      	movs	r3, #6
 8006ecc:	0017      	movs	r7, r2
 8006ece:	401f      	ands	r7, r3
 8006ed0:	421a      	tst	r2, r3
 8006ed2:	d027      	beq.n	8006f24 <_printf_common+0x8c>
 8006ed4:	0023      	movs	r3, r4
 8006ed6:	3343      	adds	r3, #67	; 0x43
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	1e5a      	subs	r2, r3, #1
 8006edc:	4193      	sbcs	r3, r2
 8006ede:	6822      	ldr	r2, [r4, #0]
 8006ee0:	0692      	lsls	r2, r2, #26
 8006ee2:	d430      	bmi.n	8006f46 <_printf_common+0xae>
 8006ee4:	0022      	movs	r2, r4
 8006ee6:	9901      	ldr	r1, [sp, #4]
 8006ee8:	9800      	ldr	r0, [sp, #0]
 8006eea:	9e08      	ldr	r6, [sp, #32]
 8006eec:	3243      	adds	r2, #67	; 0x43
 8006eee:	47b0      	blx	r6
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d025      	beq.n	8006f40 <_printf_common+0xa8>
 8006ef4:	2306      	movs	r3, #6
 8006ef6:	6820      	ldr	r0, [r4, #0]
 8006ef8:	682a      	ldr	r2, [r5, #0]
 8006efa:	68e1      	ldr	r1, [r4, #12]
 8006efc:	2500      	movs	r5, #0
 8006efe:	4003      	ands	r3, r0
 8006f00:	2b04      	cmp	r3, #4
 8006f02:	d103      	bne.n	8006f0c <_printf_common+0x74>
 8006f04:	1a8d      	subs	r5, r1, r2
 8006f06:	43eb      	mvns	r3, r5
 8006f08:	17db      	asrs	r3, r3, #31
 8006f0a:	401d      	ands	r5, r3
 8006f0c:	68a3      	ldr	r3, [r4, #8]
 8006f0e:	6922      	ldr	r2, [r4, #16]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	dd01      	ble.n	8006f18 <_printf_common+0x80>
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	18ed      	adds	r5, r5, r3
 8006f18:	2700      	movs	r7, #0
 8006f1a:	42bd      	cmp	r5, r7
 8006f1c:	d120      	bne.n	8006f60 <_printf_common+0xc8>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	e010      	b.n	8006f44 <_printf_common+0xac>
 8006f22:	3701      	adds	r7, #1
 8006f24:	68e3      	ldr	r3, [r4, #12]
 8006f26:	682a      	ldr	r2, [r5, #0]
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	42bb      	cmp	r3, r7
 8006f2c:	ddd2      	ble.n	8006ed4 <_printf_common+0x3c>
 8006f2e:	0022      	movs	r2, r4
 8006f30:	2301      	movs	r3, #1
 8006f32:	9901      	ldr	r1, [sp, #4]
 8006f34:	9800      	ldr	r0, [sp, #0]
 8006f36:	9e08      	ldr	r6, [sp, #32]
 8006f38:	3219      	adds	r2, #25
 8006f3a:	47b0      	blx	r6
 8006f3c:	1c43      	adds	r3, r0, #1
 8006f3e:	d1f0      	bne.n	8006f22 <_printf_common+0x8a>
 8006f40:	2001      	movs	r0, #1
 8006f42:	4240      	negs	r0, r0
 8006f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f46:	2030      	movs	r0, #48	; 0x30
 8006f48:	18e1      	adds	r1, r4, r3
 8006f4a:	3143      	adds	r1, #67	; 0x43
 8006f4c:	7008      	strb	r0, [r1, #0]
 8006f4e:	0021      	movs	r1, r4
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	3145      	adds	r1, #69	; 0x45
 8006f54:	7809      	ldrb	r1, [r1, #0]
 8006f56:	18a2      	adds	r2, r4, r2
 8006f58:	3243      	adds	r2, #67	; 0x43
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	7011      	strb	r1, [r2, #0]
 8006f5e:	e7c1      	b.n	8006ee4 <_printf_common+0x4c>
 8006f60:	0022      	movs	r2, r4
 8006f62:	2301      	movs	r3, #1
 8006f64:	9901      	ldr	r1, [sp, #4]
 8006f66:	9800      	ldr	r0, [sp, #0]
 8006f68:	9e08      	ldr	r6, [sp, #32]
 8006f6a:	321a      	adds	r2, #26
 8006f6c:	47b0      	blx	r6
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	d0e6      	beq.n	8006f40 <_printf_common+0xa8>
 8006f72:	3701      	adds	r7, #1
 8006f74:	e7d1      	b.n	8006f1a <_printf_common+0x82>
	...

08006f78 <_printf_i>:
 8006f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f7a:	b08b      	sub	sp, #44	; 0x2c
 8006f7c:	9206      	str	r2, [sp, #24]
 8006f7e:	000a      	movs	r2, r1
 8006f80:	3243      	adds	r2, #67	; 0x43
 8006f82:	9307      	str	r3, [sp, #28]
 8006f84:	9005      	str	r0, [sp, #20]
 8006f86:	9204      	str	r2, [sp, #16]
 8006f88:	7e0a      	ldrb	r2, [r1, #24]
 8006f8a:	000c      	movs	r4, r1
 8006f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f8e:	2a78      	cmp	r2, #120	; 0x78
 8006f90:	d807      	bhi.n	8006fa2 <_printf_i+0x2a>
 8006f92:	2a62      	cmp	r2, #98	; 0x62
 8006f94:	d809      	bhi.n	8006faa <_printf_i+0x32>
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	d100      	bne.n	8006f9c <_printf_i+0x24>
 8006f9a:	e0c1      	b.n	8007120 <_printf_i+0x1a8>
 8006f9c:	2a58      	cmp	r2, #88	; 0x58
 8006f9e:	d100      	bne.n	8006fa2 <_printf_i+0x2a>
 8006fa0:	e08c      	b.n	80070bc <_printf_i+0x144>
 8006fa2:	0026      	movs	r6, r4
 8006fa4:	3642      	adds	r6, #66	; 0x42
 8006fa6:	7032      	strb	r2, [r6, #0]
 8006fa8:	e022      	b.n	8006ff0 <_printf_i+0x78>
 8006faa:	0010      	movs	r0, r2
 8006fac:	3863      	subs	r0, #99	; 0x63
 8006fae:	2815      	cmp	r0, #21
 8006fb0:	d8f7      	bhi.n	8006fa2 <_printf_i+0x2a>
 8006fb2:	f7f9 f8b9 	bl	8000128 <__gnu_thumb1_case_shi>
 8006fb6:	0016      	.short	0x0016
 8006fb8:	fff6001f 	.word	0xfff6001f
 8006fbc:	fff6fff6 	.word	0xfff6fff6
 8006fc0:	001ffff6 	.word	0x001ffff6
 8006fc4:	fff6fff6 	.word	0xfff6fff6
 8006fc8:	fff6fff6 	.word	0xfff6fff6
 8006fcc:	003600a8 	.word	0x003600a8
 8006fd0:	fff6009a 	.word	0xfff6009a
 8006fd4:	00b9fff6 	.word	0x00b9fff6
 8006fd8:	0036fff6 	.word	0x0036fff6
 8006fdc:	fff6fff6 	.word	0xfff6fff6
 8006fe0:	009e      	.short	0x009e
 8006fe2:	0026      	movs	r6, r4
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	3642      	adds	r6, #66	; 0x42
 8006fe8:	1d11      	adds	r1, r2, #4
 8006fea:	6019      	str	r1, [r3, #0]
 8006fec:	6813      	ldr	r3, [r2, #0]
 8006fee:	7033      	strb	r3, [r6, #0]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e0a7      	b.n	8007144 <_printf_i+0x1cc>
 8006ff4:	6808      	ldr	r0, [r1, #0]
 8006ff6:	6819      	ldr	r1, [r3, #0]
 8006ff8:	1d0a      	adds	r2, r1, #4
 8006ffa:	0605      	lsls	r5, r0, #24
 8006ffc:	d50b      	bpl.n	8007016 <_printf_i+0x9e>
 8006ffe:	680d      	ldr	r5, [r1, #0]
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	2d00      	cmp	r5, #0
 8007004:	da03      	bge.n	800700e <_printf_i+0x96>
 8007006:	232d      	movs	r3, #45	; 0x2d
 8007008:	9a04      	ldr	r2, [sp, #16]
 800700a:	426d      	negs	r5, r5
 800700c:	7013      	strb	r3, [r2, #0]
 800700e:	4b61      	ldr	r3, [pc, #388]	; (8007194 <_printf_i+0x21c>)
 8007010:	270a      	movs	r7, #10
 8007012:	9303      	str	r3, [sp, #12]
 8007014:	e01b      	b.n	800704e <_printf_i+0xd6>
 8007016:	680d      	ldr	r5, [r1, #0]
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	0641      	lsls	r1, r0, #25
 800701c:	d5f1      	bpl.n	8007002 <_printf_i+0x8a>
 800701e:	b22d      	sxth	r5, r5
 8007020:	e7ef      	b.n	8007002 <_printf_i+0x8a>
 8007022:	680d      	ldr	r5, [r1, #0]
 8007024:	6819      	ldr	r1, [r3, #0]
 8007026:	1d08      	adds	r0, r1, #4
 8007028:	6018      	str	r0, [r3, #0]
 800702a:	062e      	lsls	r6, r5, #24
 800702c:	d501      	bpl.n	8007032 <_printf_i+0xba>
 800702e:	680d      	ldr	r5, [r1, #0]
 8007030:	e003      	b.n	800703a <_printf_i+0xc2>
 8007032:	066d      	lsls	r5, r5, #25
 8007034:	d5fb      	bpl.n	800702e <_printf_i+0xb6>
 8007036:	680d      	ldr	r5, [r1, #0]
 8007038:	b2ad      	uxth	r5, r5
 800703a:	4b56      	ldr	r3, [pc, #344]	; (8007194 <_printf_i+0x21c>)
 800703c:	2708      	movs	r7, #8
 800703e:	9303      	str	r3, [sp, #12]
 8007040:	2a6f      	cmp	r2, #111	; 0x6f
 8007042:	d000      	beq.n	8007046 <_printf_i+0xce>
 8007044:	3702      	adds	r7, #2
 8007046:	0023      	movs	r3, r4
 8007048:	2200      	movs	r2, #0
 800704a:	3343      	adds	r3, #67	; 0x43
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	6863      	ldr	r3, [r4, #4]
 8007050:	60a3      	str	r3, [r4, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	db03      	blt.n	800705e <_printf_i+0xe6>
 8007056:	2204      	movs	r2, #4
 8007058:	6821      	ldr	r1, [r4, #0]
 800705a:	4391      	bics	r1, r2
 800705c:	6021      	str	r1, [r4, #0]
 800705e:	2d00      	cmp	r5, #0
 8007060:	d102      	bne.n	8007068 <_printf_i+0xf0>
 8007062:	9e04      	ldr	r6, [sp, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00c      	beq.n	8007082 <_printf_i+0x10a>
 8007068:	9e04      	ldr	r6, [sp, #16]
 800706a:	0028      	movs	r0, r5
 800706c:	0039      	movs	r1, r7
 800706e:	f7f9 f8eb 	bl	8000248 <__aeabi_uidivmod>
 8007072:	9b03      	ldr	r3, [sp, #12]
 8007074:	3e01      	subs	r6, #1
 8007076:	5c5b      	ldrb	r3, [r3, r1]
 8007078:	7033      	strb	r3, [r6, #0]
 800707a:	002b      	movs	r3, r5
 800707c:	0005      	movs	r5, r0
 800707e:	429f      	cmp	r7, r3
 8007080:	d9f3      	bls.n	800706a <_printf_i+0xf2>
 8007082:	2f08      	cmp	r7, #8
 8007084:	d109      	bne.n	800709a <_printf_i+0x122>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	07db      	lsls	r3, r3, #31
 800708a:	d506      	bpl.n	800709a <_printf_i+0x122>
 800708c:	6863      	ldr	r3, [r4, #4]
 800708e:	6922      	ldr	r2, [r4, #16]
 8007090:	4293      	cmp	r3, r2
 8007092:	dc02      	bgt.n	800709a <_printf_i+0x122>
 8007094:	2330      	movs	r3, #48	; 0x30
 8007096:	3e01      	subs	r6, #1
 8007098:	7033      	strb	r3, [r6, #0]
 800709a:	9b04      	ldr	r3, [sp, #16]
 800709c:	1b9b      	subs	r3, r3, r6
 800709e:	6123      	str	r3, [r4, #16]
 80070a0:	9b07      	ldr	r3, [sp, #28]
 80070a2:	0021      	movs	r1, r4
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	9805      	ldr	r0, [sp, #20]
 80070a8:	9b06      	ldr	r3, [sp, #24]
 80070aa:	aa09      	add	r2, sp, #36	; 0x24
 80070ac:	f7ff fef4 	bl	8006e98 <_printf_common>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d14c      	bne.n	800714e <_printf_i+0x1d6>
 80070b4:	2001      	movs	r0, #1
 80070b6:	4240      	negs	r0, r0
 80070b8:	b00b      	add	sp, #44	; 0x2c
 80070ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070bc:	3145      	adds	r1, #69	; 0x45
 80070be:	700a      	strb	r2, [r1, #0]
 80070c0:	4a34      	ldr	r2, [pc, #208]	; (8007194 <_printf_i+0x21c>)
 80070c2:	9203      	str	r2, [sp, #12]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	6821      	ldr	r1, [r4, #0]
 80070c8:	ca20      	ldmia	r2!, {r5}
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	0608      	lsls	r0, r1, #24
 80070ce:	d516      	bpl.n	80070fe <_printf_i+0x186>
 80070d0:	07cb      	lsls	r3, r1, #31
 80070d2:	d502      	bpl.n	80070da <_printf_i+0x162>
 80070d4:	2320      	movs	r3, #32
 80070d6:	4319      	orrs	r1, r3
 80070d8:	6021      	str	r1, [r4, #0]
 80070da:	2710      	movs	r7, #16
 80070dc:	2d00      	cmp	r5, #0
 80070de:	d1b2      	bne.n	8007046 <_printf_i+0xce>
 80070e0:	2320      	movs	r3, #32
 80070e2:	6822      	ldr	r2, [r4, #0]
 80070e4:	439a      	bics	r2, r3
 80070e6:	6022      	str	r2, [r4, #0]
 80070e8:	e7ad      	b.n	8007046 <_printf_i+0xce>
 80070ea:	2220      	movs	r2, #32
 80070ec:	6809      	ldr	r1, [r1, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	6022      	str	r2, [r4, #0]
 80070f2:	0022      	movs	r2, r4
 80070f4:	2178      	movs	r1, #120	; 0x78
 80070f6:	3245      	adds	r2, #69	; 0x45
 80070f8:	7011      	strb	r1, [r2, #0]
 80070fa:	4a27      	ldr	r2, [pc, #156]	; (8007198 <_printf_i+0x220>)
 80070fc:	e7e1      	b.n	80070c2 <_printf_i+0x14a>
 80070fe:	0648      	lsls	r0, r1, #25
 8007100:	d5e6      	bpl.n	80070d0 <_printf_i+0x158>
 8007102:	b2ad      	uxth	r5, r5
 8007104:	e7e4      	b.n	80070d0 <_printf_i+0x158>
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	680d      	ldr	r5, [r1, #0]
 800710a:	1d10      	adds	r0, r2, #4
 800710c:	6949      	ldr	r1, [r1, #20]
 800710e:	6018      	str	r0, [r3, #0]
 8007110:	6813      	ldr	r3, [r2, #0]
 8007112:	062e      	lsls	r6, r5, #24
 8007114:	d501      	bpl.n	800711a <_printf_i+0x1a2>
 8007116:	6019      	str	r1, [r3, #0]
 8007118:	e002      	b.n	8007120 <_printf_i+0x1a8>
 800711a:	066d      	lsls	r5, r5, #25
 800711c:	d5fb      	bpl.n	8007116 <_printf_i+0x19e>
 800711e:	8019      	strh	r1, [r3, #0]
 8007120:	2300      	movs	r3, #0
 8007122:	9e04      	ldr	r6, [sp, #16]
 8007124:	6123      	str	r3, [r4, #16]
 8007126:	e7bb      	b.n	80070a0 <_printf_i+0x128>
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	1d11      	adds	r1, r2, #4
 800712c:	6019      	str	r1, [r3, #0]
 800712e:	6816      	ldr	r6, [r2, #0]
 8007130:	2100      	movs	r1, #0
 8007132:	0030      	movs	r0, r6
 8007134:	6862      	ldr	r2, [r4, #4]
 8007136:	f001 fa87 	bl	8008648 <memchr>
 800713a:	2800      	cmp	r0, #0
 800713c:	d001      	beq.n	8007142 <_printf_i+0x1ca>
 800713e:	1b80      	subs	r0, r0, r6
 8007140:	6060      	str	r0, [r4, #4]
 8007142:	6863      	ldr	r3, [r4, #4]
 8007144:	6123      	str	r3, [r4, #16]
 8007146:	2300      	movs	r3, #0
 8007148:	9a04      	ldr	r2, [sp, #16]
 800714a:	7013      	strb	r3, [r2, #0]
 800714c:	e7a8      	b.n	80070a0 <_printf_i+0x128>
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	0032      	movs	r2, r6
 8007152:	9906      	ldr	r1, [sp, #24]
 8007154:	9805      	ldr	r0, [sp, #20]
 8007156:	9d07      	ldr	r5, [sp, #28]
 8007158:	47a8      	blx	r5
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	d0aa      	beq.n	80070b4 <_printf_i+0x13c>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	079b      	lsls	r3, r3, #30
 8007162:	d415      	bmi.n	8007190 <_printf_i+0x218>
 8007164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007166:	68e0      	ldr	r0, [r4, #12]
 8007168:	4298      	cmp	r0, r3
 800716a:	daa5      	bge.n	80070b8 <_printf_i+0x140>
 800716c:	0018      	movs	r0, r3
 800716e:	e7a3      	b.n	80070b8 <_printf_i+0x140>
 8007170:	0022      	movs	r2, r4
 8007172:	2301      	movs	r3, #1
 8007174:	9906      	ldr	r1, [sp, #24]
 8007176:	9805      	ldr	r0, [sp, #20]
 8007178:	9e07      	ldr	r6, [sp, #28]
 800717a:	3219      	adds	r2, #25
 800717c:	47b0      	blx	r6
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	d098      	beq.n	80070b4 <_printf_i+0x13c>
 8007182:	3501      	adds	r5, #1
 8007184:	68e3      	ldr	r3, [r4, #12]
 8007186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	42ab      	cmp	r3, r5
 800718c:	dcf0      	bgt.n	8007170 <_printf_i+0x1f8>
 800718e:	e7e9      	b.n	8007164 <_printf_i+0x1ec>
 8007190:	2500      	movs	r5, #0
 8007192:	e7f7      	b.n	8007184 <_printf_i+0x20c>
 8007194:	08009e6a 	.word	0x08009e6a
 8007198:	08009e7b 	.word	0x08009e7b

0800719c <iprintf>:
 800719c:	b40f      	push	{r0, r1, r2, r3}
 800719e:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <iprintf+0x30>)
 80071a0:	b513      	push	{r0, r1, r4, lr}
 80071a2:	681c      	ldr	r4, [r3, #0]
 80071a4:	2c00      	cmp	r4, #0
 80071a6:	d005      	beq.n	80071b4 <iprintf+0x18>
 80071a8:	69a3      	ldr	r3, [r4, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d102      	bne.n	80071b4 <iprintf+0x18>
 80071ae:	0020      	movs	r0, r4
 80071b0:	f001 f92c 	bl	800840c <__sinit>
 80071b4:	ab05      	add	r3, sp, #20
 80071b6:	0020      	movs	r0, r4
 80071b8:	9a04      	ldr	r2, [sp, #16]
 80071ba:	68a1      	ldr	r1, [r4, #8]
 80071bc:	9301      	str	r3, [sp, #4]
 80071be:	f001 ff21 	bl	8009004 <_vfiprintf_r>
 80071c2:	bc16      	pop	{r1, r2, r4}
 80071c4:	bc08      	pop	{r3}
 80071c6:	b004      	add	sp, #16
 80071c8:	4718      	bx	r3
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	20000064 	.word	0x20000064

080071d0 <_puts_r>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	0005      	movs	r5, r0
 80071d4:	000e      	movs	r6, r1
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d004      	beq.n	80071e4 <_puts_r+0x14>
 80071da:	6983      	ldr	r3, [r0, #24]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <_puts_r+0x14>
 80071e0:	f001 f914 	bl	800840c <__sinit>
 80071e4:	69ab      	ldr	r3, [r5, #24]
 80071e6:	68ac      	ldr	r4, [r5, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d102      	bne.n	80071f2 <_puts_r+0x22>
 80071ec:	0028      	movs	r0, r5
 80071ee:	f001 f90d 	bl	800840c <__sinit>
 80071f2:	4b2d      	ldr	r3, [pc, #180]	; (80072a8 <_puts_r+0xd8>)
 80071f4:	429c      	cmp	r4, r3
 80071f6:	d122      	bne.n	800723e <_puts_r+0x6e>
 80071f8:	686c      	ldr	r4, [r5, #4]
 80071fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071fc:	07db      	lsls	r3, r3, #31
 80071fe:	d405      	bmi.n	800720c <_puts_r+0x3c>
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	059b      	lsls	r3, r3, #22
 8007204:	d402      	bmi.n	800720c <_puts_r+0x3c>
 8007206:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007208:	f001 f9a5 	bl	8008556 <__retarget_lock_acquire_recursive>
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	071b      	lsls	r3, r3, #28
 8007210:	d502      	bpl.n	8007218 <_puts_r+0x48>
 8007212:	6923      	ldr	r3, [r4, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d129      	bne.n	800726c <_puts_r+0x9c>
 8007218:	0021      	movs	r1, r4
 800721a:	0028      	movs	r0, r5
 800721c:	f000 f8aa 	bl	8007374 <__swsetup_r>
 8007220:	2800      	cmp	r0, #0
 8007222:	d023      	beq.n	800726c <_puts_r+0x9c>
 8007224:	2501      	movs	r5, #1
 8007226:	426d      	negs	r5, r5
 8007228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800722a:	07db      	lsls	r3, r3, #31
 800722c:	d405      	bmi.n	800723a <_puts_r+0x6a>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	059b      	lsls	r3, r3, #22
 8007232:	d402      	bmi.n	800723a <_puts_r+0x6a>
 8007234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007236:	f001 f98f 	bl	8008558 <__retarget_lock_release_recursive>
 800723a:	0028      	movs	r0, r5
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	4b1b      	ldr	r3, [pc, #108]	; (80072ac <_puts_r+0xdc>)
 8007240:	429c      	cmp	r4, r3
 8007242:	d101      	bne.n	8007248 <_puts_r+0x78>
 8007244:	68ac      	ldr	r4, [r5, #8]
 8007246:	e7d8      	b.n	80071fa <_puts_r+0x2a>
 8007248:	4b19      	ldr	r3, [pc, #100]	; (80072b0 <_puts_r+0xe0>)
 800724a:	429c      	cmp	r4, r3
 800724c:	d1d5      	bne.n	80071fa <_puts_r+0x2a>
 800724e:	68ec      	ldr	r4, [r5, #12]
 8007250:	e7d3      	b.n	80071fa <_puts_r+0x2a>
 8007252:	3601      	adds	r6, #1
 8007254:	60a3      	str	r3, [r4, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	da04      	bge.n	8007264 <_puts_r+0x94>
 800725a:	69a2      	ldr	r2, [r4, #24]
 800725c:	429a      	cmp	r2, r3
 800725e:	dc16      	bgt.n	800728e <_puts_r+0xbe>
 8007260:	290a      	cmp	r1, #10
 8007262:	d014      	beq.n	800728e <_puts_r+0xbe>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	6022      	str	r2, [r4, #0]
 800726a:	7019      	strb	r1, [r3, #0]
 800726c:	68a3      	ldr	r3, [r4, #8]
 800726e:	7831      	ldrb	r1, [r6, #0]
 8007270:	3b01      	subs	r3, #1
 8007272:	2900      	cmp	r1, #0
 8007274:	d1ed      	bne.n	8007252 <_puts_r+0x82>
 8007276:	60a3      	str	r3, [r4, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	da0f      	bge.n	800729c <_puts_r+0xcc>
 800727c:	0028      	movs	r0, r5
 800727e:	0022      	movs	r2, r4
 8007280:	310a      	adds	r1, #10
 8007282:	f000 f821 	bl	80072c8 <__swbuf_r>
 8007286:	250a      	movs	r5, #10
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d1cd      	bne.n	8007228 <_puts_r+0x58>
 800728c:	e7ca      	b.n	8007224 <_puts_r+0x54>
 800728e:	0022      	movs	r2, r4
 8007290:	0028      	movs	r0, r5
 8007292:	f000 f819 	bl	80072c8 <__swbuf_r>
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	d1e8      	bne.n	800726c <_puts_r+0x9c>
 800729a:	e7c3      	b.n	8007224 <_puts_r+0x54>
 800729c:	250a      	movs	r5, #10
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	6022      	str	r2, [r4, #0]
 80072a4:	701d      	strb	r5, [r3, #0]
 80072a6:	e7bf      	b.n	8007228 <_puts_r+0x58>
 80072a8:	0800a040 	.word	0x0800a040
 80072ac:	0800a060 	.word	0x0800a060
 80072b0:	0800a020 	.word	0x0800a020

080072b4 <puts>:
 80072b4:	b510      	push	{r4, lr}
 80072b6:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <puts+0x10>)
 80072b8:	0001      	movs	r1, r0
 80072ba:	6818      	ldr	r0, [r3, #0]
 80072bc:	f7ff ff88 	bl	80071d0 <_puts_r>
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	20000064 	.word	0x20000064

080072c8 <__swbuf_r>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	0005      	movs	r5, r0
 80072cc:	000e      	movs	r6, r1
 80072ce:	0014      	movs	r4, r2
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d004      	beq.n	80072de <__swbuf_r+0x16>
 80072d4:	6983      	ldr	r3, [r0, #24]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <__swbuf_r+0x16>
 80072da:	f001 f897 	bl	800840c <__sinit>
 80072de:	4b22      	ldr	r3, [pc, #136]	; (8007368 <__swbuf_r+0xa0>)
 80072e0:	429c      	cmp	r4, r3
 80072e2:	d12e      	bne.n	8007342 <__swbuf_r+0x7a>
 80072e4:	686c      	ldr	r4, [r5, #4]
 80072e6:	69a3      	ldr	r3, [r4, #24]
 80072e8:	60a3      	str	r3, [r4, #8]
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	071b      	lsls	r3, r3, #28
 80072ee:	d532      	bpl.n	8007356 <__swbuf_r+0x8e>
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d02f      	beq.n	8007356 <__swbuf_r+0x8e>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	6922      	ldr	r2, [r4, #16]
 80072fa:	b2f7      	uxtb	r7, r6
 80072fc:	1a98      	subs	r0, r3, r2
 80072fe:	6963      	ldr	r3, [r4, #20]
 8007300:	b2f6      	uxtb	r6, r6
 8007302:	4283      	cmp	r3, r0
 8007304:	dc05      	bgt.n	8007312 <__swbuf_r+0x4a>
 8007306:	0021      	movs	r1, r4
 8007308:	0028      	movs	r0, r5
 800730a:	f000 ffdd 	bl	80082c8 <_fflush_r>
 800730e:	2800      	cmp	r0, #0
 8007310:	d127      	bne.n	8007362 <__swbuf_r+0x9a>
 8007312:	68a3      	ldr	r3, [r4, #8]
 8007314:	3001      	adds	r0, #1
 8007316:	3b01      	subs	r3, #1
 8007318:	60a3      	str	r3, [r4, #8]
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	6022      	str	r2, [r4, #0]
 8007320:	701f      	strb	r7, [r3, #0]
 8007322:	6963      	ldr	r3, [r4, #20]
 8007324:	4283      	cmp	r3, r0
 8007326:	d004      	beq.n	8007332 <__swbuf_r+0x6a>
 8007328:	89a3      	ldrh	r3, [r4, #12]
 800732a:	07db      	lsls	r3, r3, #31
 800732c:	d507      	bpl.n	800733e <__swbuf_r+0x76>
 800732e:	2e0a      	cmp	r6, #10
 8007330:	d105      	bne.n	800733e <__swbuf_r+0x76>
 8007332:	0021      	movs	r1, r4
 8007334:	0028      	movs	r0, r5
 8007336:	f000 ffc7 	bl	80082c8 <_fflush_r>
 800733a:	2800      	cmp	r0, #0
 800733c:	d111      	bne.n	8007362 <__swbuf_r+0x9a>
 800733e:	0030      	movs	r0, r6
 8007340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007342:	4b0a      	ldr	r3, [pc, #40]	; (800736c <__swbuf_r+0xa4>)
 8007344:	429c      	cmp	r4, r3
 8007346:	d101      	bne.n	800734c <__swbuf_r+0x84>
 8007348:	68ac      	ldr	r4, [r5, #8]
 800734a:	e7cc      	b.n	80072e6 <__swbuf_r+0x1e>
 800734c:	4b08      	ldr	r3, [pc, #32]	; (8007370 <__swbuf_r+0xa8>)
 800734e:	429c      	cmp	r4, r3
 8007350:	d1c9      	bne.n	80072e6 <__swbuf_r+0x1e>
 8007352:	68ec      	ldr	r4, [r5, #12]
 8007354:	e7c7      	b.n	80072e6 <__swbuf_r+0x1e>
 8007356:	0021      	movs	r1, r4
 8007358:	0028      	movs	r0, r5
 800735a:	f000 f80b 	bl	8007374 <__swsetup_r>
 800735e:	2800      	cmp	r0, #0
 8007360:	d0c9      	beq.n	80072f6 <__swbuf_r+0x2e>
 8007362:	2601      	movs	r6, #1
 8007364:	4276      	negs	r6, r6
 8007366:	e7ea      	b.n	800733e <__swbuf_r+0x76>
 8007368:	0800a040 	.word	0x0800a040
 800736c:	0800a060 	.word	0x0800a060
 8007370:	0800a020 	.word	0x0800a020

08007374 <__swsetup_r>:
 8007374:	4b37      	ldr	r3, [pc, #220]	; (8007454 <__swsetup_r+0xe0>)
 8007376:	b570      	push	{r4, r5, r6, lr}
 8007378:	681d      	ldr	r5, [r3, #0]
 800737a:	0006      	movs	r6, r0
 800737c:	000c      	movs	r4, r1
 800737e:	2d00      	cmp	r5, #0
 8007380:	d005      	beq.n	800738e <__swsetup_r+0x1a>
 8007382:	69ab      	ldr	r3, [r5, #24]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d102      	bne.n	800738e <__swsetup_r+0x1a>
 8007388:	0028      	movs	r0, r5
 800738a:	f001 f83f 	bl	800840c <__sinit>
 800738e:	4b32      	ldr	r3, [pc, #200]	; (8007458 <__swsetup_r+0xe4>)
 8007390:	429c      	cmp	r4, r3
 8007392:	d10f      	bne.n	80073b4 <__swsetup_r+0x40>
 8007394:	686c      	ldr	r4, [r5, #4]
 8007396:	230c      	movs	r3, #12
 8007398:	5ee2      	ldrsh	r2, [r4, r3]
 800739a:	b293      	uxth	r3, r2
 800739c:	0711      	lsls	r1, r2, #28
 800739e:	d42d      	bmi.n	80073fc <__swsetup_r+0x88>
 80073a0:	06d9      	lsls	r1, r3, #27
 80073a2:	d411      	bmi.n	80073c8 <__swsetup_r+0x54>
 80073a4:	2309      	movs	r3, #9
 80073a6:	2001      	movs	r0, #1
 80073a8:	6033      	str	r3, [r6, #0]
 80073aa:	3337      	adds	r3, #55	; 0x37
 80073ac:	4313      	orrs	r3, r2
 80073ae:	81a3      	strh	r3, [r4, #12]
 80073b0:	4240      	negs	r0, r0
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	4b29      	ldr	r3, [pc, #164]	; (800745c <__swsetup_r+0xe8>)
 80073b6:	429c      	cmp	r4, r3
 80073b8:	d101      	bne.n	80073be <__swsetup_r+0x4a>
 80073ba:	68ac      	ldr	r4, [r5, #8]
 80073bc:	e7eb      	b.n	8007396 <__swsetup_r+0x22>
 80073be:	4b28      	ldr	r3, [pc, #160]	; (8007460 <__swsetup_r+0xec>)
 80073c0:	429c      	cmp	r4, r3
 80073c2:	d1e8      	bne.n	8007396 <__swsetup_r+0x22>
 80073c4:	68ec      	ldr	r4, [r5, #12]
 80073c6:	e7e6      	b.n	8007396 <__swsetup_r+0x22>
 80073c8:	075b      	lsls	r3, r3, #29
 80073ca:	d513      	bpl.n	80073f4 <__swsetup_r+0x80>
 80073cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073ce:	2900      	cmp	r1, #0
 80073d0:	d008      	beq.n	80073e4 <__swsetup_r+0x70>
 80073d2:	0023      	movs	r3, r4
 80073d4:	3344      	adds	r3, #68	; 0x44
 80073d6:	4299      	cmp	r1, r3
 80073d8:	d002      	beq.n	80073e0 <__swsetup_r+0x6c>
 80073da:	0030      	movs	r0, r6
 80073dc:	f001 fd08 	bl	8008df0 <_free_r>
 80073e0:	2300      	movs	r3, #0
 80073e2:	6363      	str	r3, [r4, #52]	; 0x34
 80073e4:	2224      	movs	r2, #36	; 0x24
 80073e6:	89a3      	ldrh	r3, [r4, #12]
 80073e8:	4393      	bics	r3, r2
 80073ea:	81a3      	strh	r3, [r4, #12]
 80073ec:	2300      	movs	r3, #0
 80073ee:	6063      	str	r3, [r4, #4]
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	6023      	str	r3, [r4, #0]
 80073f4:	2308      	movs	r3, #8
 80073f6:	89a2      	ldrh	r2, [r4, #12]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10b      	bne.n	800741a <__swsetup_r+0xa6>
 8007402:	21a0      	movs	r1, #160	; 0xa0
 8007404:	2280      	movs	r2, #128	; 0x80
 8007406:	89a3      	ldrh	r3, [r4, #12]
 8007408:	0089      	lsls	r1, r1, #2
 800740a:	0092      	lsls	r2, r2, #2
 800740c:	400b      	ands	r3, r1
 800740e:	4293      	cmp	r3, r2
 8007410:	d003      	beq.n	800741a <__swsetup_r+0xa6>
 8007412:	0021      	movs	r1, r4
 8007414:	0030      	movs	r0, r6
 8007416:	f001 f8c9 	bl	80085ac <__smakebuf_r>
 800741a:	220c      	movs	r2, #12
 800741c:	5ea3      	ldrsh	r3, [r4, r2]
 800741e:	2001      	movs	r0, #1
 8007420:	001a      	movs	r2, r3
 8007422:	b299      	uxth	r1, r3
 8007424:	4002      	ands	r2, r0
 8007426:	4203      	tst	r3, r0
 8007428:	d00f      	beq.n	800744a <__swsetup_r+0xd6>
 800742a:	2200      	movs	r2, #0
 800742c:	60a2      	str	r2, [r4, #8]
 800742e:	6962      	ldr	r2, [r4, #20]
 8007430:	4252      	negs	r2, r2
 8007432:	61a2      	str	r2, [r4, #24]
 8007434:	2000      	movs	r0, #0
 8007436:	6922      	ldr	r2, [r4, #16]
 8007438:	4282      	cmp	r2, r0
 800743a:	d1ba      	bne.n	80073b2 <__swsetup_r+0x3e>
 800743c:	060a      	lsls	r2, r1, #24
 800743e:	d5b8      	bpl.n	80073b2 <__swsetup_r+0x3e>
 8007440:	2240      	movs	r2, #64	; 0x40
 8007442:	4313      	orrs	r3, r2
 8007444:	81a3      	strh	r3, [r4, #12]
 8007446:	3801      	subs	r0, #1
 8007448:	e7b3      	b.n	80073b2 <__swsetup_r+0x3e>
 800744a:	0788      	lsls	r0, r1, #30
 800744c:	d400      	bmi.n	8007450 <__swsetup_r+0xdc>
 800744e:	6962      	ldr	r2, [r4, #20]
 8007450:	60a2      	str	r2, [r4, #8]
 8007452:	e7ef      	b.n	8007434 <__swsetup_r+0xc0>
 8007454:	20000064 	.word	0x20000064
 8007458:	0800a040 	.word	0x0800a040
 800745c:	0800a060 	.word	0x0800a060
 8007460:	0800a020 	.word	0x0800a020

08007464 <quorem>:
 8007464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007466:	0006      	movs	r6, r0
 8007468:	690b      	ldr	r3, [r1, #16]
 800746a:	6932      	ldr	r2, [r6, #16]
 800746c:	b087      	sub	sp, #28
 800746e:	2000      	movs	r0, #0
 8007470:	9103      	str	r1, [sp, #12]
 8007472:	429a      	cmp	r2, r3
 8007474:	db65      	blt.n	8007542 <quorem+0xde>
 8007476:	3b01      	subs	r3, #1
 8007478:	009c      	lsls	r4, r3, #2
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	000b      	movs	r3, r1
 800747e:	3314      	adds	r3, #20
 8007480:	9305      	str	r3, [sp, #20]
 8007482:	191b      	adds	r3, r3, r4
 8007484:	9304      	str	r3, [sp, #16]
 8007486:	0033      	movs	r3, r6
 8007488:	3314      	adds	r3, #20
 800748a:	9302      	str	r3, [sp, #8]
 800748c:	191c      	adds	r4, r3, r4
 800748e:	9b04      	ldr	r3, [sp, #16]
 8007490:	6827      	ldr	r7, [r4, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	0038      	movs	r0, r7
 8007496:	1c5d      	adds	r5, r3, #1
 8007498:	0029      	movs	r1, r5
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	f7f8 fe4e 	bl	800013c <__udivsi3>
 80074a0:	9001      	str	r0, [sp, #4]
 80074a2:	42af      	cmp	r7, r5
 80074a4:	d324      	bcc.n	80074f0 <quorem+0x8c>
 80074a6:	2500      	movs	r5, #0
 80074a8:	46ac      	mov	ip, r5
 80074aa:	9802      	ldr	r0, [sp, #8]
 80074ac:	9f05      	ldr	r7, [sp, #20]
 80074ae:	cf08      	ldmia	r7!, {r3}
 80074b0:	9a01      	ldr	r2, [sp, #4]
 80074b2:	b299      	uxth	r1, r3
 80074b4:	4351      	muls	r1, r2
 80074b6:	0c1b      	lsrs	r3, r3, #16
 80074b8:	4353      	muls	r3, r2
 80074ba:	1949      	adds	r1, r1, r5
 80074bc:	0c0a      	lsrs	r2, r1, #16
 80074be:	189b      	adds	r3, r3, r2
 80074c0:	6802      	ldr	r2, [r0, #0]
 80074c2:	b289      	uxth	r1, r1
 80074c4:	b292      	uxth	r2, r2
 80074c6:	4462      	add	r2, ip
 80074c8:	1a52      	subs	r2, r2, r1
 80074ca:	6801      	ldr	r1, [r0, #0]
 80074cc:	0c1d      	lsrs	r5, r3, #16
 80074ce:	0c09      	lsrs	r1, r1, #16
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	1acb      	subs	r3, r1, r3
 80074d4:	1411      	asrs	r1, r2, #16
 80074d6:	185b      	adds	r3, r3, r1
 80074d8:	1419      	asrs	r1, r3, #16
 80074da:	b292      	uxth	r2, r2
 80074dc:	041b      	lsls	r3, r3, #16
 80074de:	431a      	orrs	r2, r3
 80074e0:	9b04      	ldr	r3, [sp, #16]
 80074e2:	468c      	mov	ip, r1
 80074e4:	c004      	stmia	r0!, {r2}
 80074e6:	42bb      	cmp	r3, r7
 80074e8:	d2e1      	bcs.n	80074ae <quorem+0x4a>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d030      	beq.n	8007552 <quorem+0xee>
 80074f0:	0030      	movs	r0, r6
 80074f2:	9903      	ldr	r1, [sp, #12]
 80074f4:	f001 fb38 	bl	8008b68 <__mcmp>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	db21      	blt.n	8007540 <quorem+0xdc>
 80074fc:	0030      	movs	r0, r6
 80074fe:	2400      	movs	r4, #0
 8007500:	9b01      	ldr	r3, [sp, #4]
 8007502:	9903      	ldr	r1, [sp, #12]
 8007504:	3301      	adds	r3, #1
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	3014      	adds	r0, #20
 800750a:	3114      	adds	r1, #20
 800750c:	6803      	ldr	r3, [r0, #0]
 800750e:	c920      	ldmia	r1!, {r5}
 8007510:	b29a      	uxth	r2, r3
 8007512:	1914      	adds	r4, r2, r4
 8007514:	b2aa      	uxth	r2, r5
 8007516:	1aa2      	subs	r2, r4, r2
 8007518:	0c1b      	lsrs	r3, r3, #16
 800751a:	0c2d      	lsrs	r5, r5, #16
 800751c:	1414      	asrs	r4, r2, #16
 800751e:	1b5b      	subs	r3, r3, r5
 8007520:	191b      	adds	r3, r3, r4
 8007522:	141c      	asrs	r4, r3, #16
 8007524:	b292      	uxth	r2, r2
 8007526:	041b      	lsls	r3, r3, #16
 8007528:	4313      	orrs	r3, r2
 800752a:	c008      	stmia	r0!, {r3}
 800752c:	9b04      	ldr	r3, [sp, #16]
 800752e:	428b      	cmp	r3, r1
 8007530:	d2ec      	bcs.n	800750c <quorem+0xa8>
 8007532:	9b00      	ldr	r3, [sp, #0]
 8007534:	9a02      	ldr	r2, [sp, #8]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	18d3      	adds	r3, r2, r3
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	2a00      	cmp	r2, #0
 800753e:	d015      	beq.n	800756c <quorem+0x108>
 8007540:	9801      	ldr	r0, [sp, #4]
 8007542:	b007      	add	sp, #28
 8007544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d106      	bne.n	800755a <quorem+0xf6>
 800754c:	9b00      	ldr	r3, [sp, #0]
 800754e:	3b01      	subs	r3, #1
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	9b02      	ldr	r3, [sp, #8]
 8007554:	3c04      	subs	r4, #4
 8007556:	42a3      	cmp	r3, r4
 8007558:	d3f5      	bcc.n	8007546 <quorem+0xe2>
 800755a:	9b00      	ldr	r3, [sp, #0]
 800755c:	6133      	str	r3, [r6, #16]
 800755e:	e7c7      	b.n	80074f0 <quorem+0x8c>
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	2a00      	cmp	r2, #0
 8007564:	d106      	bne.n	8007574 <quorem+0x110>
 8007566:	9a00      	ldr	r2, [sp, #0]
 8007568:	3a01      	subs	r2, #1
 800756a:	9200      	str	r2, [sp, #0]
 800756c:	9a02      	ldr	r2, [sp, #8]
 800756e:	3b04      	subs	r3, #4
 8007570:	429a      	cmp	r2, r3
 8007572:	d3f5      	bcc.n	8007560 <quorem+0xfc>
 8007574:	9b00      	ldr	r3, [sp, #0]
 8007576:	6133      	str	r3, [r6, #16]
 8007578:	e7e2      	b.n	8007540 <quorem+0xdc>
	...

0800757c <_dtoa_r>:
 800757c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800757e:	b09d      	sub	sp, #116	; 0x74
 8007580:	9202      	str	r2, [sp, #8]
 8007582:	9303      	str	r3, [sp, #12]
 8007584:	9b02      	ldr	r3, [sp, #8]
 8007586:	9c03      	ldr	r4, [sp, #12]
 8007588:	9308      	str	r3, [sp, #32]
 800758a:	9409      	str	r4, [sp, #36]	; 0x24
 800758c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800758e:	0007      	movs	r7, r0
 8007590:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007592:	2c00      	cmp	r4, #0
 8007594:	d10e      	bne.n	80075b4 <_dtoa_r+0x38>
 8007596:	2010      	movs	r0, #16
 8007598:	f001 f84c 	bl	8008634 <malloc>
 800759c:	1e02      	subs	r2, r0, #0
 800759e:	6278      	str	r0, [r7, #36]	; 0x24
 80075a0:	d104      	bne.n	80075ac <_dtoa_r+0x30>
 80075a2:	21ea      	movs	r1, #234	; 0xea
 80075a4:	4bc7      	ldr	r3, [pc, #796]	; (80078c4 <_dtoa_r+0x348>)
 80075a6:	48c8      	ldr	r0, [pc, #800]	; (80078c8 <_dtoa_r+0x34c>)
 80075a8:	f001 fed8 	bl	800935c <__assert_func>
 80075ac:	6044      	str	r4, [r0, #4]
 80075ae:	6084      	str	r4, [r0, #8]
 80075b0:	6004      	str	r4, [r0, #0]
 80075b2:	60c4      	str	r4, [r0, #12]
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	6819      	ldr	r1, [r3, #0]
 80075b8:	2900      	cmp	r1, #0
 80075ba:	d00a      	beq.n	80075d2 <_dtoa_r+0x56>
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	2301      	movs	r3, #1
 80075c0:	4093      	lsls	r3, r2
 80075c2:	604a      	str	r2, [r1, #4]
 80075c4:	608b      	str	r3, [r1, #8]
 80075c6:	0038      	movs	r0, r7
 80075c8:	f001 f88e 	bl	80086e8 <_Bfree>
 80075cc:	2200      	movs	r2, #0
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	601a      	str	r2, [r3, #0]
 80075d2:	9b03      	ldr	r3, [sp, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	da20      	bge.n	800761a <_dtoa_r+0x9e>
 80075d8:	2301      	movs	r3, #1
 80075da:	602b      	str	r3, [r5, #0]
 80075dc:	9b03      	ldr	r3, [sp, #12]
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	085b      	lsrs	r3, r3, #1
 80075e2:	9309      	str	r3, [sp, #36]	; 0x24
 80075e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80075e6:	4bb9      	ldr	r3, [pc, #740]	; (80078cc <_dtoa_r+0x350>)
 80075e8:	4ab8      	ldr	r2, [pc, #736]	; (80078cc <_dtoa_r+0x350>)
 80075ea:	402b      	ands	r3, r5
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d117      	bne.n	8007620 <_dtoa_r+0xa4>
 80075f0:	4bb7      	ldr	r3, [pc, #732]	; (80078d0 <_dtoa_r+0x354>)
 80075f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80075f4:	0328      	lsls	r0, r5, #12
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	9b02      	ldr	r3, [sp, #8]
 80075fa:	0b00      	lsrs	r0, r0, #12
 80075fc:	4318      	orrs	r0, r3
 80075fe:	d101      	bne.n	8007604 <_dtoa_r+0x88>
 8007600:	f000 fdbf 	bl	8008182 <_dtoa_r+0xc06>
 8007604:	48b3      	ldr	r0, [pc, #716]	; (80078d4 <_dtoa_r+0x358>)
 8007606:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007608:	9006      	str	r0, [sp, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <_dtoa_r+0x98>
 800760e:	4bb2      	ldr	r3, [pc, #712]	; (80078d8 <_dtoa_r+0x35c>)
 8007610:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	9806      	ldr	r0, [sp, #24]
 8007616:	b01d      	add	sp, #116	; 0x74
 8007618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800761a:	2300      	movs	r3, #0
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	e7e1      	b.n	80075e4 <_dtoa_r+0x68>
 8007620:	9b08      	ldr	r3, [sp, #32]
 8007622:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007624:	9312      	str	r3, [sp, #72]	; 0x48
 8007626:	9413      	str	r4, [sp, #76]	; 0x4c
 8007628:	9812      	ldr	r0, [sp, #72]	; 0x48
 800762a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800762c:	2200      	movs	r2, #0
 800762e:	2300      	movs	r3, #0
 8007630:	f7f8 ff0a 	bl	8000448 <__aeabi_dcmpeq>
 8007634:	1e04      	subs	r4, r0, #0
 8007636:	d009      	beq.n	800764c <_dtoa_r+0xd0>
 8007638:	2301      	movs	r3, #1
 800763a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	4ba7      	ldr	r3, [pc, #668]	; (80078dc <_dtoa_r+0x360>)
 8007640:	9306      	str	r3, [sp, #24]
 8007642:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0e5      	beq.n	8007614 <_dtoa_r+0x98>
 8007648:	4ba5      	ldr	r3, [pc, #660]	; (80078e0 <_dtoa_r+0x364>)
 800764a:	e7e1      	b.n	8007610 <_dtoa_r+0x94>
 800764c:	ab1a      	add	r3, sp, #104	; 0x68
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	ab1b      	add	r3, sp, #108	; 0x6c
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	0038      	movs	r0, r7
 8007656:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800765a:	f001 fb39 	bl	8008cd0 <__d2b>
 800765e:	006e      	lsls	r6, r5, #1
 8007660:	9005      	str	r0, [sp, #20]
 8007662:	0d76      	lsrs	r6, r6, #21
 8007664:	d100      	bne.n	8007668 <_dtoa_r+0xec>
 8007666:	e07c      	b.n	8007762 <_dtoa_r+0x1e6>
 8007668:	9812      	ldr	r0, [sp, #72]	; 0x48
 800766a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800766c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800766e:	4a9d      	ldr	r2, [pc, #628]	; (80078e4 <_dtoa_r+0x368>)
 8007670:	031b      	lsls	r3, r3, #12
 8007672:	0b1b      	lsrs	r3, r3, #12
 8007674:	431a      	orrs	r2, r3
 8007676:	0011      	movs	r1, r2
 8007678:	4b9b      	ldr	r3, [pc, #620]	; (80078e8 <_dtoa_r+0x36c>)
 800767a:	9418      	str	r4, [sp, #96]	; 0x60
 800767c:	18f6      	adds	r6, r6, r3
 800767e:	2200      	movs	r2, #0
 8007680:	4b9a      	ldr	r3, [pc, #616]	; (80078ec <_dtoa_r+0x370>)
 8007682:	f7fa ffa3 	bl	80025cc <__aeabi_dsub>
 8007686:	4a9a      	ldr	r2, [pc, #616]	; (80078f0 <_dtoa_r+0x374>)
 8007688:	4b9a      	ldr	r3, [pc, #616]	; (80078f4 <_dtoa_r+0x378>)
 800768a:	f7fa fd33 	bl	80020f4 <__aeabi_dmul>
 800768e:	4a9a      	ldr	r2, [pc, #616]	; (80078f8 <_dtoa_r+0x37c>)
 8007690:	4b9a      	ldr	r3, [pc, #616]	; (80078fc <_dtoa_r+0x380>)
 8007692:	f7f9 fdf1 	bl	8001278 <__aeabi_dadd>
 8007696:	0004      	movs	r4, r0
 8007698:	0030      	movs	r0, r6
 800769a:	000d      	movs	r5, r1
 800769c:	f7fb fb7c 	bl	8002d98 <__aeabi_i2d>
 80076a0:	4a97      	ldr	r2, [pc, #604]	; (8007900 <_dtoa_r+0x384>)
 80076a2:	4b98      	ldr	r3, [pc, #608]	; (8007904 <_dtoa_r+0x388>)
 80076a4:	f7fa fd26 	bl	80020f4 <__aeabi_dmul>
 80076a8:	0002      	movs	r2, r0
 80076aa:	000b      	movs	r3, r1
 80076ac:	0020      	movs	r0, r4
 80076ae:	0029      	movs	r1, r5
 80076b0:	f7f9 fde2 	bl	8001278 <__aeabi_dadd>
 80076b4:	0004      	movs	r4, r0
 80076b6:	000d      	movs	r5, r1
 80076b8:	f7fb fb38 	bl	8002d2c <__aeabi_d2iz>
 80076bc:	2200      	movs	r2, #0
 80076be:	9002      	str	r0, [sp, #8]
 80076c0:	2300      	movs	r3, #0
 80076c2:	0020      	movs	r0, r4
 80076c4:	0029      	movs	r1, r5
 80076c6:	f7f8 fec5 	bl	8000454 <__aeabi_dcmplt>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d00b      	beq.n	80076e6 <_dtoa_r+0x16a>
 80076ce:	9802      	ldr	r0, [sp, #8]
 80076d0:	f7fb fb62 	bl	8002d98 <__aeabi_i2d>
 80076d4:	002b      	movs	r3, r5
 80076d6:	0022      	movs	r2, r4
 80076d8:	f7f8 feb6 	bl	8000448 <__aeabi_dcmpeq>
 80076dc:	4243      	negs	r3, r0
 80076de:	4158      	adcs	r0, r3
 80076e0:	9b02      	ldr	r3, [sp, #8]
 80076e2:	1a1b      	subs	r3, r3, r0
 80076e4:	9302      	str	r3, [sp, #8]
 80076e6:	2301      	movs	r3, #1
 80076e8:	9316      	str	r3, [sp, #88]	; 0x58
 80076ea:	9b02      	ldr	r3, [sp, #8]
 80076ec:	2b16      	cmp	r3, #22
 80076ee:	d80f      	bhi.n	8007710 <_dtoa_r+0x194>
 80076f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80076f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80076f4:	00da      	lsls	r2, r3, #3
 80076f6:	4b84      	ldr	r3, [pc, #528]	; (8007908 <_dtoa_r+0x38c>)
 80076f8:	189b      	adds	r3, r3, r2
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f7f8 fea9 	bl	8000454 <__aeabi_dcmplt>
 8007702:	2800      	cmp	r0, #0
 8007704:	d049      	beq.n	800779a <_dtoa_r+0x21e>
 8007706:	9b02      	ldr	r3, [sp, #8]
 8007708:	3b01      	subs	r3, #1
 800770a:	9302      	str	r3, [sp, #8]
 800770c:	2300      	movs	r3, #0
 800770e:	9316      	str	r3, [sp, #88]	; 0x58
 8007710:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007712:	1b9e      	subs	r6, r3, r6
 8007714:	2300      	movs	r3, #0
 8007716:	930a      	str	r3, [sp, #40]	; 0x28
 8007718:	0033      	movs	r3, r6
 800771a:	3b01      	subs	r3, #1
 800771c:	930d      	str	r3, [sp, #52]	; 0x34
 800771e:	d504      	bpl.n	800772a <_dtoa_r+0x1ae>
 8007720:	2301      	movs	r3, #1
 8007722:	1b9b      	subs	r3, r3, r6
 8007724:	930a      	str	r3, [sp, #40]	; 0x28
 8007726:	2300      	movs	r3, #0
 8007728:	930d      	str	r3, [sp, #52]	; 0x34
 800772a:	9b02      	ldr	r3, [sp, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	db36      	blt.n	800779e <_dtoa_r+0x222>
 8007730:	9a02      	ldr	r2, [sp, #8]
 8007732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007734:	4694      	mov	ip, r2
 8007736:	4463      	add	r3, ip
 8007738:	930d      	str	r3, [sp, #52]	; 0x34
 800773a:	2300      	movs	r3, #0
 800773c:	9215      	str	r2, [sp, #84]	; 0x54
 800773e:	930e      	str	r3, [sp, #56]	; 0x38
 8007740:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007742:	2401      	movs	r4, #1
 8007744:	2b09      	cmp	r3, #9
 8007746:	d864      	bhi.n	8007812 <_dtoa_r+0x296>
 8007748:	2b05      	cmp	r3, #5
 800774a:	dd02      	ble.n	8007752 <_dtoa_r+0x1d6>
 800774c:	2400      	movs	r4, #0
 800774e:	3b04      	subs	r3, #4
 8007750:	9322      	str	r3, [sp, #136]	; 0x88
 8007752:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007754:	1e98      	subs	r0, r3, #2
 8007756:	2803      	cmp	r0, #3
 8007758:	d864      	bhi.n	8007824 <_dtoa_r+0x2a8>
 800775a:	f7f8 fcdb 	bl	8000114 <__gnu_thumb1_case_uqi>
 800775e:	3829      	.short	0x3829
 8007760:	5836      	.short	0x5836
 8007762:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007764:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007766:	189e      	adds	r6, r3, r2
 8007768:	4b68      	ldr	r3, [pc, #416]	; (800790c <_dtoa_r+0x390>)
 800776a:	18f2      	adds	r2, r6, r3
 800776c:	2a20      	cmp	r2, #32
 800776e:	dd0f      	ble.n	8007790 <_dtoa_r+0x214>
 8007770:	2340      	movs	r3, #64	; 0x40
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	409d      	lsls	r5, r3
 8007776:	4b66      	ldr	r3, [pc, #408]	; (8007910 <_dtoa_r+0x394>)
 8007778:	9802      	ldr	r0, [sp, #8]
 800777a:	18f3      	adds	r3, r6, r3
 800777c:	40d8      	lsrs	r0, r3
 800777e:	4328      	orrs	r0, r5
 8007780:	f7fb fb3a 	bl	8002df8 <__aeabi_ui2d>
 8007784:	2301      	movs	r3, #1
 8007786:	4c63      	ldr	r4, [pc, #396]	; (8007914 <_dtoa_r+0x398>)
 8007788:	3e01      	subs	r6, #1
 800778a:	1909      	adds	r1, r1, r4
 800778c:	9318      	str	r3, [sp, #96]	; 0x60
 800778e:	e776      	b.n	800767e <_dtoa_r+0x102>
 8007790:	2320      	movs	r3, #32
 8007792:	9802      	ldr	r0, [sp, #8]
 8007794:	1a9b      	subs	r3, r3, r2
 8007796:	4098      	lsls	r0, r3
 8007798:	e7f2      	b.n	8007780 <_dtoa_r+0x204>
 800779a:	9016      	str	r0, [sp, #88]	; 0x58
 800779c:	e7b8      	b.n	8007710 <_dtoa_r+0x194>
 800779e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a0:	9a02      	ldr	r2, [sp, #8]
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	930a      	str	r3, [sp, #40]	; 0x28
 80077a6:	4253      	negs	r3, r2
 80077a8:	930e      	str	r3, [sp, #56]	; 0x38
 80077aa:	2300      	movs	r3, #0
 80077ac:	9315      	str	r3, [sp, #84]	; 0x54
 80077ae:	e7c7      	b.n	8007740 <_dtoa_r+0x1c4>
 80077b0:	2300      	movs	r3, #0
 80077b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80077b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077b6:	930c      	str	r3, [sp, #48]	; 0x30
 80077b8:	9307      	str	r3, [sp, #28]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	dc13      	bgt.n	80077e6 <_dtoa_r+0x26a>
 80077be:	2301      	movs	r3, #1
 80077c0:	001a      	movs	r2, r3
 80077c2:	930c      	str	r3, [sp, #48]	; 0x30
 80077c4:	9307      	str	r3, [sp, #28]
 80077c6:	9223      	str	r2, [sp, #140]	; 0x8c
 80077c8:	e00d      	b.n	80077e6 <_dtoa_r+0x26a>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e7f1      	b.n	80077b2 <_dtoa_r+0x236>
 80077ce:	2300      	movs	r3, #0
 80077d0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80077d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80077d4:	4694      	mov	ip, r2
 80077d6:	9b02      	ldr	r3, [sp, #8]
 80077d8:	4463      	add	r3, ip
 80077da:	930c      	str	r3, [sp, #48]	; 0x30
 80077dc:	3301      	adds	r3, #1
 80077de:	9307      	str	r3, [sp, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	dc00      	bgt.n	80077e6 <_dtoa_r+0x26a>
 80077e4:	2301      	movs	r3, #1
 80077e6:	2200      	movs	r2, #0
 80077e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077ea:	6042      	str	r2, [r0, #4]
 80077ec:	3204      	adds	r2, #4
 80077ee:	0015      	movs	r5, r2
 80077f0:	3514      	adds	r5, #20
 80077f2:	6841      	ldr	r1, [r0, #4]
 80077f4:	429d      	cmp	r5, r3
 80077f6:	d919      	bls.n	800782c <_dtoa_r+0x2b0>
 80077f8:	0038      	movs	r0, r7
 80077fa:	f000 ff31 	bl	8008660 <_Balloc>
 80077fe:	9006      	str	r0, [sp, #24]
 8007800:	2800      	cmp	r0, #0
 8007802:	d117      	bne.n	8007834 <_dtoa_r+0x2b8>
 8007804:	21d5      	movs	r1, #213	; 0xd5
 8007806:	0002      	movs	r2, r0
 8007808:	4b43      	ldr	r3, [pc, #268]	; (8007918 <_dtoa_r+0x39c>)
 800780a:	0049      	lsls	r1, r1, #1
 800780c:	e6cb      	b.n	80075a6 <_dtoa_r+0x2a>
 800780e:	2301      	movs	r3, #1
 8007810:	e7de      	b.n	80077d0 <_dtoa_r+0x254>
 8007812:	2300      	movs	r3, #0
 8007814:	940f      	str	r4, [sp, #60]	; 0x3c
 8007816:	9322      	str	r3, [sp, #136]	; 0x88
 8007818:	3b01      	subs	r3, #1
 800781a:	930c      	str	r3, [sp, #48]	; 0x30
 800781c:	9307      	str	r3, [sp, #28]
 800781e:	2200      	movs	r2, #0
 8007820:	3313      	adds	r3, #19
 8007822:	e7d0      	b.n	80077c6 <_dtoa_r+0x24a>
 8007824:	2301      	movs	r3, #1
 8007826:	930f      	str	r3, [sp, #60]	; 0x3c
 8007828:	3b02      	subs	r3, #2
 800782a:	e7f6      	b.n	800781a <_dtoa_r+0x29e>
 800782c:	3101      	adds	r1, #1
 800782e:	6041      	str	r1, [r0, #4]
 8007830:	0052      	lsls	r2, r2, #1
 8007832:	e7dc      	b.n	80077ee <_dtoa_r+0x272>
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	9a06      	ldr	r2, [sp, #24]
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	9b07      	ldr	r3, [sp, #28]
 800783c:	2b0e      	cmp	r3, #14
 800783e:	d900      	bls.n	8007842 <_dtoa_r+0x2c6>
 8007840:	e0eb      	b.n	8007a1a <_dtoa_r+0x49e>
 8007842:	2c00      	cmp	r4, #0
 8007844:	d100      	bne.n	8007848 <_dtoa_r+0x2cc>
 8007846:	e0e8      	b.n	8007a1a <_dtoa_r+0x49e>
 8007848:	9b02      	ldr	r3, [sp, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	dd68      	ble.n	8007920 <_dtoa_r+0x3a4>
 800784e:	001a      	movs	r2, r3
 8007850:	210f      	movs	r1, #15
 8007852:	4b2d      	ldr	r3, [pc, #180]	; (8007908 <_dtoa_r+0x38c>)
 8007854:	400a      	ands	r2, r1
 8007856:	00d2      	lsls	r2, r2, #3
 8007858:	189b      	adds	r3, r3, r2
 800785a:	681d      	ldr	r5, [r3, #0]
 800785c:	685e      	ldr	r6, [r3, #4]
 800785e:	9b02      	ldr	r3, [sp, #8]
 8007860:	111c      	asrs	r4, r3, #4
 8007862:	2302      	movs	r3, #2
 8007864:	9310      	str	r3, [sp, #64]	; 0x40
 8007866:	9b02      	ldr	r3, [sp, #8]
 8007868:	05db      	lsls	r3, r3, #23
 800786a:	d50b      	bpl.n	8007884 <_dtoa_r+0x308>
 800786c:	4b2b      	ldr	r3, [pc, #172]	; (800791c <_dtoa_r+0x3a0>)
 800786e:	400c      	ands	r4, r1
 8007870:	6a1a      	ldr	r2, [r3, #32]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007876:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007878:	f7fa f83a 	bl	80018f0 <__aeabi_ddiv>
 800787c:	2303      	movs	r3, #3
 800787e:	9008      	str	r0, [sp, #32]
 8007880:	9109      	str	r1, [sp, #36]	; 0x24
 8007882:	9310      	str	r3, [sp, #64]	; 0x40
 8007884:	4b25      	ldr	r3, [pc, #148]	; (800791c <_dtoa_r+0x3a0>)
 8007886:	9314      	str	r3, [sp, #80]	; 0x50
 8007888:	2c00      	cmp	r4, #0
 800788a:	d108      	bne.n	800789e <_dtoa_r+0x322>
 800788c:	9808      	ldr	r0, [sp, #32]
 800788e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007890:	002a      	movs	r2, r5
 8007892:	0033      	movs	r3, r6
 8007894:	f7fa f82c 	bl	80018f0 <__aeabi_ddiv>
 8007898:	9008      	str	r0, [sp, #32]
 800789a:	9109      	str	r1, [sp, #36]	; 0x24
 800789c:	e05c      	b.n	8007958 <_dtoa_r+0x3dc>
 800789e:	2301      	movs	r3, #1
 80078a0:	421c      	tst	r4, r3
 80078a2:	d00b      	beq.n	80078bc <_dtoa_r+0x340>
 80078a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a6:	0028      	movs	r0, r5
 80078a8:	3301      	adds	r3, #1
 80078aa:	9310      	str	r3, [sp, #64]	; 0x40
 80078ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078ae:	0031      	movs	r1, r6
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f7fa fc1e 	bl	80020f4 <__aeabi_dmul>
 80078b8:	0005      	movs	r5, r0
 80078ba:	000e      	movs	r6, r1
 80078bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078be:	1064      	asrs	r4, r4, #1
 80078c0:	3308      	adds	r3, #8
 80078c2:	e7e0      	b.n	8007886 <_dtoa_r+0x30a>
 80078c4:	08009f9a 	.word	0x08009f9a
 80078c8:	08009fb1 	.word	0x08009fb1
 80078cc:	7ff00000 	.word	0x7ff00000
 80078d0:	0000270f 	.word	0x0000270f
 80078d4:	08009f96 	.word	0x08009f96
 80078d8:	08009f99 	.word	0x08009f99
 80078dc:	08009e68 	.word	0x08009e68
 80078e0:	08009e69 	.word	0x08009e69
 80078e4:	3ff00000 	.word	0x3ff00000
 80078e8:	fffffc01 	.word	0xfffffc01
 80078ec:	3ff80000 	.word	0x3ff80000
 80078f0:	636f4361 	.word	0x636f4361
 80078f4:	3fd287a7 	.word	0x3fd287a7
 80078f8:	8b60c8b3 	.word	0x8b60c8b3
 80078fc:	3fc68a28 	.word	0x3fc68a28
 8007900:	509f79fb 	.word	0x509f79fb
 8007904:	3fd34413 	.word	0x3fd34413
 8007908:	0800a108 	.word	0x0800a108
 800790c:	00000432 	.word	0x00000432
 8007910:	00000412 	.word	0x00000412
 8007914:	fe100000 	.word	0xfe100000
 8007918:	0800a00c 	.word	0x0800a00c
 800791c:	0800a0e0 	.word	0x0800a0e0
 8007920:	2302      	movs	r3, #2
 8007922:	9310      	str	r3, [sp, #64]	; 0x40
 8007924:	9b02      	ldr	r3, [sp, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d016      	beq.n	8007958 <_dtoa_r+0x3dc>
 800792a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800792c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800792e:	425c      	negs	r4, r3
 8007930:	230f      	movs	r3, #15
 8007932:	4ab6      	ldr	r2, [pc, #728]	; (8007c0c <_dtoa_r+0x690>)
 8007934:	4023      	ands	r3, r4
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	18d3      	adds	r3, r2, r3
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f7fa fbd9 	bl	80020f4 <__aeabi_dmul>
 8007942:	2601      	movs	r6, #1
 8007944:	2300      	movs	r3, #0
 8007946:	9008      	str	r0, [sp, #32]
 8007948:	9109      	str	r1, [sp, #36]	; 0x24
 800794a:	4db1      	ldr	r5, [pc, #708]	; (8007c10 <_dtoa_r+0x694>)
 800794c:	1124      	asrs	r4, r4, #4
 800794e:	2c00      	cmp	r4, #0
 8007950:	d000      	beq.n	8007954 <_dtoa_r+0x3d8>
 8007952:	e094      	b.n	8007a7e <_dtoa_r+0x502>
 8007954:	2b00      	cmp	r3, #0
 8007956:	d19f      	bne.n	8007898 <_dtoa_r+0x31c>
 8007958:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800795a:	2b00      	cmp	r3, #0
 800795c:	d100      	bne.n	8007960 <_dtoa_r+0x3e4>
 800795e:	e09b      	b.n	8007a98 <_dtoa_r+0x51c>
 8007960:	9c08      	ldr	r4, [sp, #32]
 8007962:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007964:	2200      	movs	r2, #0
 8007966:	0020      	movs	r0, r4
 8007968:	0029      	movs	r1, r5
 800796a:	4baa      	ldr	r3, [pc, #680]	; (8007c14 <_dtoa_r+0x698>)
 800796c:	f7f8 fd72 	bl	8000454 <__aeabi_dcmplt>
 8007970:	2800      	cmp	r0, #0
 8007972:	d100      	bne.n	8007976 <_dtoa_r+0x3fa>
 8007974:	e090      	b.n	8007a98 <_dtoa_r+0x51c>
 8007976:	9b07      	ldr	r3, [sp, #28]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d100      	bne.n	800797e <_dtoa_r+0x402>
 800797c:	e08c      	b.n	8007a98 <_dtoa_r+0x51c>
 800797e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007980:	2b00      	cmp	r3, #0
 8007982:	dd46      	ble.n	8007a12 <_dtoa_r+0x496>
 8007984:	9b02      	ldr	r3, [sp, #8]
 8007986:	2200      	movs	r2, #0
 8007988:	0020      	movs	r0, r4
 800798a:	0029      	movs	r1, r5
 800798c:	1e5e      	subs	r6, r3, #1
 800798e:	4ba2      	ldr	r3, [pc, #648]	; (8007c18 <_dtoa_r+0x69c>)
 8007990:	f7fa fbb0 	bl	80020f4 <__aeabi_dmul>
 8007994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007996:	9008      	str	r0, [sp, #32]
 8007998:	9109      	str	r1, [sp, #36]	; 0x24
 800799a:	3301      	adds	r3, #1
 800799c:	9310      	str	r3, [sp, #64]	; 0x40
 800799e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80079a2:	9c08      	ldr	r4, [sp, #32]
 80079a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80079a6:	9314      	str	r3, [sp, #80]	; 0x50
 80079a8:	f7fb f9f6 	bl	8002d98 <__aeabi_i2d>
 80079ac:	0022      	movs	r2, r4
 80079ae:	002b      	movs	r3, r5
 80079b0:	f7fa fba0 	bl	80020f4 <__aeabi_dmul>
 80079b4:	2200      	movs	r2, #0
 80079b6:	4b99      	ldr	r3, [pc, #612]	; (8007c1c <_dtoa_r+0x6a0>)
 80079b8:	f7f9 fc5e 	bl	8001278 <__aeabi_dadd>
 80079bc:	9010      	str	r0, [sp, #64]	; 0x40
 80079be:	9111      	str	r1, [sp, #68]	; 0x44
 80079c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079c4:	9208      	str	r2, [sp, #32]
 80079c6:	9309      	str	r3, [sp, #36]	; 0x24
 80079c8:	4a95      	ldr	r2, [pc, #596]	; (8007c20 <_dtoa_r+0x6a4>)
 80079ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079cc:	4694      	mov	ip, r2
 80079ce:	4463      	add	r3, ip
 80079d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80079d2:	9309      	str	r3, [sp, #36]	; 0x24
 80079d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d161      	bne.n	8007a9e <_dtoa_r+0x522>
 80079da:	2200      	movs	r2, #0
 80079dc:	0020      	movs	r0, r4
 80079de:	0029      	movs	r1, r5
 80079e0:	4b90      	ldr	r3, [pc, #576]	; (8007c24 <_dtoa_r+0x6a8>)
 80079e2:	f7fa fdf3 	bl	80025cc <__aeabi_dsub>
 80079e6:	9a08      	ldr	r2, [sp, #32]
 80079e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80079ea:	0004      	movs	r4, r0
 80079ec:	000d      	movs	r5, r1
 80079ee:	f7f8 fd45 	bl	800047c <__aeabi_dcmpgt>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d000      	beq.n	80079f8 <_dtoa_r+0x47c>
 80079f6:	e2af      	b.n	8007f58 <_dtoa_r+0x9dc>
 80079f8:	488b      	ldr	r0, [pc, #556]	; (8007c28 <_dtoa_r+0x6ac>)
 80079fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80079fc:	4684      	mov	ip, r0
 80079fe:	4461      	add	r1, ip
 8007a00:	000b      	movs	r3, r1
 8007a02:	0020      	movs	r0, r4
 8007a04:	0029      	movs	r1, r5
 8007a06:	9a08      	ldr	r2, [sp, #32]
 8007a08:	f7f8 fd24 	bl	8000454 <__aeabi_dcmplt>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d000      	beq.n	8007a12 <_dtoa_r+0x496>
 8007a10:	e29f      	b.n	8007f52 <_dtoa_r+0x9d6>
 8007a12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a14:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007a16:	9308      	str	r3, [sp, #32]
 8007a18:	9409      	str	r4, [sp, #36]	; 0x24
 8007a1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	da00      	bge.n	8007a22 <_dtoa_r+0x4a6>
 8007a20:	e172      	b.n	8007d08 <_dtoa_r+0x78c>
 8007a22:	9a02      	ldr	r2, [sp, #8]
 8007a24:	2a0e      	cmp	r2, #14
 8007a26:	dd00      	ble.n	8007a2a <_dtoa_r+0x4ae>
 8007a28:	e16e      	b.n	8007d08 <_dtoa_r+0x78c>
 8007a2a:	4b78      	ldr	r3, [pc, #480]	; (8007c0c <_dtoa_r+0x690>)
 8007a2c:	00d2      	lsls	r2, r2, #3
 8007a2e:	189b      	adds	r3, r3, r2
 8007a30:	685c      	ldr	r4, [r3, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	930a      	str	r3, [sp, #40]	; 0x28
 8007a36:	940b      	str	r4, [sp, #44]	; 0x2c
 8007a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	db00      	blt.n	8007a40 <_dtoa_r+0x4c4>
 8007a3e:	e0f7      	b.n	8007c30 <_dtoa_r+0x6b4>
 8007a40:	9b07      	ldr	r3, [sp, #28]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dd00      	ble.n	8007a48 <_dtoa_r+0x4cc>
 8007a46:	e0f3      	b.n	8007c30 <_dtoa_r+0x6b4>
 8007a48:	d000      	beq.n	8007a4c <_dtoa_r+0x4d0>
 8007a4a:	e282      	b.n	8007f52 <_dtoa_r+0x9d6>
 8007a4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a50:	2200      	movs	r2, #0
 8007a52:	4b74      	ldr	r3, [pc, #464]	; (8007c24 <_dtoa_r+0x6a8>)
 8007a54:	f7fa fb4e 	bl	80020f4 <__aeabi_dmul>
 8007a58:	9a08      	ldr	r2, [sp, #32]
 8007a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5c:	f7f8 fd18 	bl	8000490 <__aeabi_dcmpge>
 8007a60:	9e07      	ldr	r6, [sp, #28]
 8007a62:	0035      	movs	r5, r6
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d000      	beq.n	8007a6a <_dtoa_r+0x4ee>
 8007a68:	e259      	b.n	8007f1e <_dtoa_r+0x9a2>
 8007a6a:	9b06      	ldr	r3, [sp, #24]
 8007a6c:	9a06      	ldr	r2, [sp, #24]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	9308      	str	r3, [sp, #32]
 8007a72:	2331      	movs	r3, #49	; 0x31
 8007a74:	7013      	strb	r3, [r2, #0]
 8007a76:	9b02      	ldr	r3, [sp, #8]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	9302      	str	r3, [sp, #8]
 8007a7c:	e254      	b.n	8007f28 <_dtoa_r+0x9ac>
 8007a7e:	4234      	tst	r4, r6
 8007a80:	d007      	beq.n	8007a92 <_dtoa_r+0x516>
 8007a82:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a84:	3301      	adds	r3, #1
 8007a86:	9310      	str	r3, [sp, #64]	; 0x40
 8007a88:	682a      	ldr	r2, [r5, #0]
 8007a8a:	686b      	ldr	r3, [r5, #4]
 8007a8c:	f7fa fb32 	bl	80020f4 <__aeabi_dmul>
 8007a90:	0033      	movs	r3, r6
 8007a92:	1064      	asrs	r4, r4, #1
 8007a94:	3508      	adds	r5, #8
 8007a96:	e75a      	b.n	800794e <_dtoa_r+0x3d2>
 8007a98:	9e02      	ldr	r6, [sp, #8]
 8007a9a:	9b07      	ldr	r3, [sp, #28]
 8007a9c:	e780      	b.n	80079a0 <_dtoa_r+0x424>
 8007a9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007aa0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007aa2:	1e5a      	subs	r2, r3, #1
 8007aa4:	4b59      	ldr	r3, [pc, #356]	; (8007c0c <_dtoa_r+0x690>)
 8007aa6:	00d2      	lsls	r2, r2, #3
 8007aa8:	189b      	adds	r3, r3, r2
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2900      	cmp	r1, #0
 8007ab0:	d051      	beq.n	8007b56 <_dtoa_r+0x5da>
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	495d      	ldr	r1, [pc, #372]	; (8007c2c <_dtoa_r+0x6b0>)
 8007ab6:	f7f9 ff1b 	bl	80018f0 <__aeabi_ddiv>
 8007aba:	9a08      	ldr	r2, [sp, #32]
 8007abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007abe:	f7fa fd85 	bl	80025cc <__aeabi_dsub>
 8007ac2:	9a06      	ldr	r2, [sp, #24]
 8007ac4:	9b06      	ldr	r3, [sp, #24]
 8007ac6:	4694      	mov	ip, r2
 8007ac8:	9317      	str	r3, [sp, #92]	; 0x5c
 8007aca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007acc:	9010      	str	r0, [sp, #64]	; 0x40
 8007ace:	9111      	str	r1, [sp, #68]	; 0x44
 8007ad0:	4463      	add	r3, ip
 8007ad2:	9319      	str	r3, [sp, #100]	; 0x64
 8007ad4:	0029      	movs	r1, r5
 8007ad6:	0020      	movs	r0, r4
 8007ad8:	f7fb f928 	bl	8002d2c <__aeabi_d2iz>
 8007adc:	9014      	str	r0, [sp, #80]	; 0x50
 8007ade:	f7fb f95b 	bl	8002d98 <__aeabi_i2d>
 8007ae2:	0002      	movs	r2, r0
 8007ae4:	000b      	movs	r3, r1
 8007ae6:	0020      	movs	r0, r4
 8007ae8:	0029      	movs	r1, r5
 8007aea:	f7fa fd6f 	bl	80025cc <__aeabi_dsub>
 8007aee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007af0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007af2:	3301      	adds	r3, #1
 8007af4:	9308      	str	r3, [sp, #32]
 8007af6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007af8:	0004      	movs	r4, r0
 8007afa:	3330      	adds	r3, #48	; 0x30
 8007afc:	7013      	strb	r3, [r2, #0]
 8007afe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b02:	000d      	movs	r5, r1
 8007b04:	f7f8 fca6 	bl	8000454 <__aeabi_dcmplt>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d175      	bne.n	8007bf8 <_dtoa_r+0x67c>
 8007b0c:	0022      	movs	r2, r4
 8007b0e:	002b      	movs	r3, r5
 8007b10:	2000      	movs	r0, #0
 8007b12:	4940      	ldr	r1, [pc, #256]	; (8007c14 <_dtoa_r+0x698>)
 8007b14:	f7fa fd5a 	bl	80025cc <__aeabi_dsub>
 8007b18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b1c:	f7f8 fc9a 	bl	8000454 <__aeabi_dcmplt>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d000      	beq.n	8007b26 <_dtoa_r+0x5aa>
 8007b24:	e0d2      	b.n	8007ccc <_dtoa_r+0x750>
 8007b26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b28:	9a08      	ldr	r2, [sp, #32]
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d100      	bne.n	8007b30 <_dtoa_r+0x5b4>
 8007b2e:	e770      	b.n	8007a12 <_dtoa_r+0x496>
 8007b30:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007b32:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007b34:	2200      	movs	r2, #0
 8007b36:	4b38      	ldr	r3, [pc, #224]	; (8007c18 <_dtoa_r+0x69c>)
 8007b38:	f7fa fadc 	bl	80020f4 <__aeabi_dmul>
 8007b3c:	4b36      	ldr	r3, [pc, #216]	; (8007c18 <_dtoa_r+0x69c>)
 8007b3e:	9010      	str	r0, [sp, #64]	; 0x40
 8007b40:	9111      	str	r1, [sp, #68]	; 0x44
 8007b42:	2200      	movs	r2, #0
 8007b44:	0020      	movs	r0, r4
 8007b46:	0029      	movs	r1, r5
 8007b48:	f7fa fad4 	bl	80020f4 <__aeabi_dmul>
 8007b4c:	9b08      	ldr	r3, [sp, #32]
 8007b4e:	0004      	movs	r4, r0
 8007b50:	000d      	movs	r5, r1
 8007b52:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b54:	e7be      	b.n	8007ad4 <_dtoa_r+0x558>
 8007b56:	9808      	ldr	r0, [sp, #32]
 8007b58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b5a:	f7fa facb 	bl	80020f4 <__aeabi_dmul>
 8007b5e:	9a06      	ldr	r2, [sp, #24]
 8007b60:	9b06      	ldr	r3, [sp, #24]
 8007b62:	4694      	mov	ip, r2
 8007b64:	9308      	str	r3, [sp, #32]
 8007b66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b68:	9010      	str	r0, [sp, #64]	; 0x40
 8007b6a:	9111      	str	r1, [sp, #68]	; 0x44
 8007b6c:	4463      	add	r3, ip
 8007b6e:	9319      	str	r3, [sp, #100]	; 0x64
 8007b70:	0029      	movs	r1, r5
 8007b72:	0020      	movs	r0, r4
 8007b74:	f7fb f8da 	bl	8002d2c <__aeabi_d2iz>
 8007b78:	9017      	str	r0, [sp, #92]	; 0x5c
 8007b7a:	f7fb f90d 	bl	8002d98 <__aeabi_i2d>
 8007b7e:	0002      	movs	r2, r0
 8007b80:	000b      	movs	r3, r1
 8007b82:	0020      	movs	r0, r4
 8007b84:	0029      	movs	r1, r5
 8007b86:	f7fa fd21 	bl	80025cc <__aeabi_dsub>
 8007b8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b8c:	9a08      	ldr	r2, [sp, #32]
 8007b8e:	3330      	adds	r3, #48	; 0x30
 8007b90:	7013      	strb	r3, [r2, #0]
 8007b92:	0013      	movs	r3, r2
 8007b94:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b96:	3301      	adds	r3, #1
 8007b98:	0004      	movs	r4, r0
 8007b9a:	000d      	movs	r5, r1
 8007b9c:	9308      	str	r3, [sp, #32]
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d12c      	bne.n	8007bfc <_dtoa_r+0x680>
 8007ba2:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007ba4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ba6:	9a06      	ldr	r2, [sp, #24]
 8007ba8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007baa:	4694      	mov	ip, r2
 8007bac:	4463      	add	r3, ip
 8007bae:	2200      	movs	r2, #0
 8007bb0:	9308      	str	r3, [sp, #32]
 8007bb2:	4b1e      	ldr	r3, [pc, #120]	; (8007c2c <_dtoa_r+0x6b0>)
 8007bb4:	f7f9 fb60 	bl	8001278 <__aeabi_dadd>
 8007bb8:	0002      	movs	r2, r0
 8007bba:	000b      	movs	r3, r1
 8007bbc:	0020      	movs	r0, r4
 8007bbe:	0029      	movs	r1, r5
 8007bc0:	f7f8 fc5c 	bl	800047c <__aeabi_dcmpgt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d000      	beq.n	8007bca <_dtoa_r+0x64e>
 8007bc8:	e080      	b.n	8007ccc <_dtoa_r+0x750>
 8007bca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007bcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bce:	2000      	movs	r0, #0
 8007bd0:	4916      	ldr	r1, [pc, #88]	; (8007c2c <_dtoa_r+0x6b0>)
 8007bd2:	f7fa fcfb 	bl	80025cc <__aeabi_dsub>
 8007bd6:	0002      	movs	r2, r0
 8007bd8:	000b      	movs	r3, r1
 8007bda:	0020      	movs	r0, r4
 8007bdc:	0029      	movs	r1, r5
 8007bde:	f7f8 fc39 	bl	8000454 <__aeabi_dcmplt>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d100      	bne.n	8007be8 <_dtoa_r+0x66c>
 8007be6:	e714      	b.n	8007a12 <_dtoa_r+0x496>
 8007be8:	9b08      	ldr	r3, [sp, #32]
 8007bea:	001a      	movs	r2, r3
 8007bec:	3a01      	subs	r2, #1
 8007bee:	9208      	str	r2, [sp, #32]
 8007bf0:	7812      	ldrb	r2, [r2, #0]
 8007bf2:	2a30      	cmp	r2, #48	; 0x30
 8007bf4:	d0f8      	beq.n	8007be8 <_dtoa_r+0x66c>
 8007bf6:	9308      	str	r3, [sp, #32]
 8007bf8:	9602      	str	r6, [sp, #8]
 8007bfa:	e055      	b.n	8007ca8 <_dtoa_r+0x72c>
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4b06      	ldr	r3, [pc, #24]	; (8007c18 <_dtoa_r+0x69c>)
 8007c00:	f7fa fa78 	bl	80020f4 <__aeabi_dmul>
 8007c04:	0004      	movs	r4, r0
 8007c06:	000d      	movs	r5, r1
 8007c08:	e7b2      	b.n	8007b70 <_dtoa_r+0x5f4>
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	0800a108 	.word	0x0800a108
 8007c10:	0800a0e0 	.word	0x0800a0e0
 8007c14:	3ff00000 	.word	0x3ff00000
 8007c18:	40240000 	.word	0x40240000
 8007c1c:	401c0000 	.word	0x401c0000
 8007c20:	fcc00000 	.word	0xfcc00000
 8007c24:	40140000 	.word	0x40140000
 8007c28:	7cc00000 	.word	0x7cc00000
 8007c2c:	3fe00000 	.word	0x3fe00000
 8007c30:	9b07      	ldr	r3, [sp, #28]
 8007c32:	9e06      	ldr	r6, [sp, #24]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	199b      	adds	r3, r3, r6
 8007c38:	930c      	str	r3, [sp, #48]	; 0x30
 8007c3a:	9c08      	ldr	r4, [sp, #32]
 8007c3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c42:	0020      	movs	r0, r4
 8007c44:	0029      	movs	r1, r5
 8007c46:	f7f9 fe53 	bl	80018f0 <__aeabi_ddiv>
 8007c4a:	f7fb f86f 	bl	8002d2c <__aeabi_d2iz>
 8007c4e:	9007      	str	r0, [sp, #28]
 8007c50:	f7fb f8a2 	bl	8002d98 <__aeabi_i2d>
 8007c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c58:	f7fa fa4c 	bl	80020f4 <__aeabi_dmul>
 8007c5c:	0002      	movs	r2, r0
 8007c5e:	000b      	movs	r3, r1
 8007c60:	0020      	movs	r0, r4
 8007c62:	0029      	movs	r1, r5
 8007c64:	f7fa fcb2 	bl	80025cc <__aeabi_dsub>
 8007c68:	0033      	movs	r3, r6
 8007c6a:	9a07      	ldr	r2, [sp, #28]
 8007c6c:	3601      	adds	r6, #1
 8007c6e:	3230      	adds	r2, #48	; 0x30
 8007c70:	701a      	strb	r2, [r3, #0]
 8007c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c74:	9608      	str	r6, [sp, #32]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d139      	bne.n	8007cee <_dtoa_r+0x772>
 8007c7a:	0002      	movs	r2, r0
 8007c7c:	000b      	movs	r3, r1
 8007c7e:	f7f9 fafb 	bl	8001278 <__aeabi_dadd>
 8007c82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c86:	0004      	movs	r4, r0
 8007c88:	000d      	movs	r5, r1
 8007c8a:	f7f8 fbf7 	bl	800047c <__aeabi_dcmpgt>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d11b      	bne.n	8007cca <_dtoa_r+0x74e>
 8007c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c96:	0020      	movs	r0, r4
 8007c98:	0029      	movs	r1, r5
 8007c9a:	f7f8 fbd5 	bl	8000448 <__aeabi_dcmpeq>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d002      	beq.n	8007ca8 <_dtoa_r+0x72c>
 8007ca2:	9b07      	ldr	r3, [sp, #28]
 8007ca4:	07db      	lsls	r3, r3, #31
 8007ca6:	d410      	bmi.n	8007cca <_dtoa_r+0x74e>
 8007ca8:	0038      	movs	r0, r7
 8007caa:	9905      	ldr	r1, [sp, #20]
 8007cac:	f000 fd1c 	bl	80086e8 <_Bfree>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	9a08      	ldr	r2, [sp, #32]
 8007cb4:	9802      	ldr	r0, [sp, #8]
 8007cb6:	7013      	strb	r3, [r2, #0]
 8007cb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007cba:	3001      	adds	r0, #1
 8007cbc:	6018      	str	r0, [r3, #0]
 8007cbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d100      	bne.n	8007cc6 <_dtoa_r+0x74a>
 8007cc4:	e4a6      	b.n	8007614 <_dtoa_r+0x98>
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	e4a4      	b.n	8007614 <_dtoa_r+0x98>
 8007cca:	9e02      	ldr	r6, [sp, #8]
 8007ccc:	9b08      	ldr	r3, [sp, #32]
 8007cce:	9308      	str	r3, [sp, #32]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	781a      	ldrb	r2, [r3, #0]
 8007cd4:	2a39      	cmp	r2, #57	; 0x39
 8007cd6:	d106      	bne.n	8007ce6 <_dtoa_r+0x76a>
 8007cd8:	9a06      	ldr	r2, [sp, #24]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d1f7      	bne.n	8007cce <_dtoa_r+0x752>
 8007cde:	2230      	movs	r2, #48	; 0x30
 8007ce0:	9906      	ldr	r1, [sp, #24]
 8007ce2:	3601      	adds	r6, #1
 8007ce4:	700a      	strb	r2, [r1, #0]
 8007ce6:	781a      	ldrb	r2, [r3, #0]
 8007ce8:	3201      	adds	r2, #1
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e784      	b.n	8007bf8 <_dtoa_r+0x67c>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	4baa      	ldr	r3, [pc, #680]	; (8007f9c <_dtoa_r+0xa20>)
 8007cf2:	f7fa f9ff 	bl	80020f4 <__aeabi_dmul>
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	0004      	movs	r4, r0
 8007cfc:	000d      	movs	r5, r1
 8007cfe:	f7f8 fba3 	bl	8000448 <__aeabi_dcmpeq>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d09b      	beq.n	8007c3e <_dtoa_r+0x6c2>
 8007d06:	e7cf      	b.n	8007ca8 <_dtoa_r+0x72c>
 8007d08:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d0a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007d0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d0e:	2d00      	cmp	r5, #0
 8007d10:	d012      	beq.n	8007d38 <_dtoa_r+0x7bc>
 8007d12:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d14:	2a01      	cmp	r2, #1
 8007d16:	dc66      	bgt.n	8007de6 <_dtoa_r+0x86a>
 8007d18:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d1a:	2a00      	cmp	r2, #0
 8007d1c:	d05d      	beq.n	8007dda <_dtoa_r+0x85e>
 8007d1e:	4aa0      	ldr	r2, [pc, #640]	; (8007fa0 <_dtoa_r+0xa24>)
 8007d20:	189b      	adds	r3, r3, r2
 8007d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d24:	2101      	movs	r1, #1
 8007d26:	18d2      	adds	r2, r2, r3
 8007d28:	920a      	str	r2, [sp, #40]	; 0x28
 8007d2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d2c:	0038      	movs	r0, r7
 8007d2e:	18d3      	adds	r3, r2, r3
 8007d30:	930d      	str	r3, [sp, #52]	; 0x34
 8007d32:	f000 fd89 	bl	8008848 <__i2b>
 8007d36:	0005      	movs	r5, r0
 8007d38:	2c00      	cmp	r4, #0
 8007d3a:	dd0e      	ble.n	8007d5a <_dtoa_r+0x7de>
 8007d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	dd0b      	ble.n	8007d5a <_dtoa_r+0x7de>
 8007d42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d44:	0023      	movs	r3, r4
 8007d46:	4294      	cmp	r4, r2
 8007d48:	dd00      	ble.n	8007d4c <_dtoa_r+0x7d0>
 8007d4a:	0013      	movs	r3, r2
 8007d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d4e:	1ae4      	subs	r4, r4, r3
 8007d50:	1ad2      	subs	r2, r2, r3
 8007d52:	920a      	str	r2, [sp, #40]	; 0x28
 8007d54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	930d      	str	r3, [sp, #52]	; 0x34
 8007d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01f      	beq.n	8007da0 <_dtoa_r+0x824>
 8007d60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d054      	beq.n	8007e10 <_dtoa_r+0x894>
 8007d66:	2e00      	cmp	r6, #0
 8007d68:	dd11      	ble.n	8007d8e <_dtoa_r+0x812>
 8007d6a:	0029      	movs	r1, r5
 8007d6c:	0032      	movs	r2, r6
 8007d6e:	0038      	movs	r0, r7
 8007d70:	f000 fe30 	bl	80089d4 <__pow5mult>
 8007d74:	9a05      	ldr	r2, [sp, #20]
 8007d76:	0001      	movs	r1, r0
 8007d78:	0005      	movs	r5, r0
 8007d7a:	0038      	movs	r0, r7
 8007d7c:	f000 fd7a 	bl	8008874 <__multiply>
 8007d80:	9905      	ldr	r1, [sp, #20]
 8007d82:	9014      	str	r0, [sp, #80]	; 0x50
 8007d84:	0038      	movs	r0, r7
 8007d86:	f000 fcaf 	bl	80086e8 <_Bfree>
 8007d8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d8c:	9305      	str	r3, [sp, #20]
 8007d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d90:	1b9a      	subs	r2, r3, r6
 8007d92:	42b3      	cmp	r3, r6
 8007d94:	d004      	beq.n	8007da0 <_dtoa_r+0x824>
 8007d96:	0038      	movs	r0, r7
 8007d98:	9905      	ldr	r1, [sp, #20]
 8007d9a:	f000 fe1b 	bl	80089d4 <__pow5mult>
 8007d9e:	9005      	str	r0, [sp, #20]
 8007da0:	2101      	movs	r1, #1
 8007da2:	0038      	movs	r0, r7
 8007da4:	f000 fd50 	bl	8008848 <__i2b>
 8007da8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007daa:	0006      	movs	r6, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dd31      	ble.n	8007e14 <_dtoa_r+0x898>
 8007db0:	001a      	movs	r2, r3
 8007db2:	0001      	movs	r1, r0
 8007db4:	0038      	movs	r0, r7
 8007db6:	f000 fe0d 	bl	80089d4 <__pow5mult>
 8007dba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dbc:	0006      	movs	r6, r0
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	dd2d      	ble.n	8007e1e <_dtoa_r+0x8a2>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	930e      	str	r3, [sp, #56]	; 0x38
 8007dc6:	6933      	ldr	r3, [r6, #16]
 8007dc8:	3303      	adds	r3, #3
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	18f3      	adds	r3, r6, r3
 8007dce:	6858      	ldr	r0, [r3, #4]
 8007dd0:	f000 fcf2 	bl	80087b8 <__hi0bits>
 8007dd4:	2320      	movs	r3, #32
 8007dd6:	1a18      	subs	r0, r3, r0
 8007dd8:	e039      	b.n	8007e4e <_dtoa_r+0x8d2>
 8007dda:	2336      	movs	r3, #54	; 0x36
 8007ddc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007dde:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007de0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007de2:	1a9b      	subs	r3, r3, r2
 8007de4:	e79d      	b.n	8007d22 <_dtoa_r+0x7a6>
 8007de6:	9b07      	ldr	r3, [sp, #28]
 8007de8:	1e5e      	subs	r6, r3, #1
 8007dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dec:	42b3      	cmp	r3, r6
 8007dee:	db07      	blt.n	8007e00 <_dtoa_r+0x884>
 8007df0:	1b9e      	subs	r6, r3, r6
 8007df2:	9b07      	ldr	r3, [sp, #28]
 8007df4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	da93      	bge.n	8007d22 <_dtoa_r+0x7a6>
 8007dfa:	1ae4      	subs	r4, r4, r3
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	e790      	b.n	8007d22 <_dtoa_r+0x7a6>
 8007e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e04:	1af3      	subs	r3, r6, r3
 8007e06:	18d3      	adds	r3, r2, r3
 8007e08:	960e      	str	r6, [sp, #56]	; 0x38
 8007e0a:	9315      	str	r3, [sp, #84]	; 0x54
 8007e0c:	2600      	movs	r6, #0
 8007e0e:	e7f0      	b.n	8007df2 <_dtoa_r+0x876>
 8007e10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e12:	e7c0      	b.n	8007d96 <_dtoa_r+0x81a>
 8007e14:	2300      	movs	r3, #0
 8007e16:	930e      	str	r3, [sp, #56]	; 0x38
 8007e18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	dc13      	bgt.n	8007e46 <_dtoa_r+0x8ca>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	930e      	str	r3, [sp, #56]	; 0x38
 8007e22:	9b08      	ldr	r3, [sp, #32]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10e      	bne.n	8007e46 <_dtoa_r+0x8ca>
 8007e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e2a:	031b      	lsls	r3, r3, #12
 8007e2c:	d10b      	bne.n	8007e46 <_dtoa_r+0x8ca>
 8007e2e:	4b5d      	ldr	r3, [pc, #372]	; (8007fa4 <_dtoa_r+0xa28>)
 8007e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e32:	4213      	tst	r3, r2
 8007e34:	d007      	beq.n	8007e46 <_dtoa_r+0x8ca>
 8007e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e38:	3301      	adds	r3, #1
 8007e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e3e:	3301      	adds	r3, #1
 8007e40:	930d      	str	r3, [sp, #52]	; 0x34
 8007e42:	2301      	movs	r3, #1
 8007e44:	930e      	str	r3, [sp, #56]	; 0x38
 8007e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e48:	2001      	movs	r0, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1bb      	bne.n	8007dc6 <_dtoa_r+0x84a>
 8007e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e50:	221f      	movs	r2, #31
 8007e52:	1818      	adds	r0, r3, r0
 8007e54:	0003      	movs	r3, r0
 8007e56:	4013      	ands	r3, r2
 8007e58:	4210      	tst	r0, r2
 8007e5a:	d046      	beq.n	8007eea <_dtoa_r+0x96e>
 8007e5c:	3201      	adds	r2, #1
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	2a04      	cmp	r2, #4
 8007e62:	dd3f      	ble.n	8007ee4 <_dtoa_r+0x968>
 8007e64:	221c      	movs	r2, #28
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e6a:	18e4      	adds	r4, r4, r3
 8007e6c:	18d2      	adds	r2, r2, r3
 8007e6e:	920a      	str	r2, [sp, #40]	; 0x28
 8007e70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e72:	18d3      	adds	r3, r2, r3
 8007e74:	930d      	str	r3, [sp, #52]	; 0x34
 8007e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	dd05      	ble.n	8007e88 <_dtoa_r+0x90c>
 8007e7c:	001a      	movs	r2, r3
 8007e7e:	0038      	movs	r0, r7
 8007e80:	9905      	ldr	r1, [sp, #20]
 8007e82:	f000 fe03 	bl	8008a8c <__lshift>
 8007e86:	9005      	str	r0, [sp, #20]
 8007e88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	dd05      	ble.n	8007e9a <_dtoa_r+0x91e>
 8007e8e:	0031      	movs	r1, r6
 8007e90:	001a      	movs	r2, r3
 8007e92:	0038      	movs	r0, r7
 8007e94:	f000 fdfa 	bl	8008a8c <__lshift>
 8007e98:	0006      	movs	r6, r0
 8007e9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d026      	beq.n	8007eee <_dtoa_r+0x972>
 8007ea0:	0031      	movs	r1, r6
 8007ea2:	9805      	ldr	r0, [sp, #20]
 8007ea4:	f000 fe60 	bl	8008b68 <__mcmp>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	da20      	bge.n	8007eee <_dtoa_r+0x972>
 8007eac:	9b02      	ldr	r3, [sp, #8]
 8007eae:	220a      	movs	r2, #10
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	9302      	str	r3, [sp, #8]
 8007eb4:	0038      	movs	r0, r7
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9905      	ldr	r1, [sp, #20]
 8007eba:	f000 fc39 	bl	8008730 <__multadd>
 8007ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ec0:	9005      	str	r0, [sp, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d100      	bne.n	8007ec8 <_dtoa_r+0x94c>
 8007ec6:	e166      	b.n	8008196 <_dtoa_r+0xc1a>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	0029      	movs	r1, r5
 8007ecc:	220a      	movs	r2, #10
 8007ece:	0038      	movs	r0, r7
 8007ed0:	f000 fc2e 	bl	8008730 <__multadd>
 8007ed4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ed6:	0005      	movs	r5, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	dc47      	bgt.n	8007f6c <_dtoa_r+0x9f0>
 8007edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	dc0d      	bgt.n	8007efe <_dtoa_r+0x982>
 8007ee2:	e043      	b.n	8007f6c <_dtoa_r+0x9f0>
 8007ee4:	2a04      	cmp	r2, #4
 8007ee6:	d0c6      	beq.n	8007e76 <_dtoa_r+0x8fa>
 8007ee8:	0013      	movs	r3, r2
 8007eea:	331c      	adds	r3, #28
 8007eec:	e7bc      	b.n	8007e68 <_dtoa_r+0x8ec>
 8007eee:	9b07      	ldr	r3, [sp, #28]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dc35      	bgt.n	8007f60 <_dtoa_r+0x9e4>
 8007ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	dd32      	ble.n	8007f60 <_dtoa_r+0x9e4>
 8007efa:	9b07      	ldr	r3, [sp, #28]
 8007efc:	930c      	str	r3, [sp, #48]	; 0x30
 8007efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10c      	bne.n	8007f1e <_dtoa_r+0x9a2>
 8007f04:	0031      	movs	r1, r6
 8007f06:	2205      	movs	r2, #5
 8007f08:	0038      	movs	r0, r7
 8007f0a:	f000 fc11 	bl	8008730 <__multadd>
 8007f0e:	0006      	movs	r6, r0
 8007f10:	0001      	movs	r1, r0
 8007f12:	9805      	ldr	r0, [sp, #20]
 8007f14:	f000 fe28 	bl	8008b68 <__mcmp>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	dd00      	ble.n	8007f1e <_dtoa_r+0x9a2>
 8007f1c:	e5a5      	b.n	8007a6a <_dtoa_r+0x4ee>
 8007f1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f20:	43db      	mvns	r3, r3
 8007f22:	9302      	str	r3, [sp, #8]
 8007f24:	9b06      	ldr	r3, [sp, #24]
 8007f26:	9308      	str	r3, [sp, #32]
 8007f28:	2400      	movs	r4, #0
 8007f2a:	0031      	movs	r1, r6
 8007f2c:	0038      	movs	r0, r7
 8007f2e:	f000 fbdb 	bl	80086e8 <_Bfree>
 8007f32:	2d00      	cmp	r5, #0
 8007f34:	d100      	bne.n	8007f38 <_dtoa_r+0x9bc>
 8007f36:	e6b7      	b.n	8007ca8 <_dtoa_r+0x72c>
 8007f38:	2c00      	cmp	r4, #0
 8007f3a:	d005      	beq.n	8007f48 <_dtoa_r+0x9cc>
 8007f3c:	42ac      	cmp	r4, r5
 8007f3e:	d003      	beq.n	8007f48 <_dtoa_r+0x9cc>
 8007f40:	0021      	movs	r1, r4
 8007f42:	0038      	movs	r0, r7
 8007f44:	f000 fbd0 	bl	80086e8 <_Bfree>
 8007f48:	0029      	movs	r1, r5
 8007f4a:	0038      	movs	r0, r7
 8007f4c:	f000 fbcc 	bl	80086e8 <_Bfree>
 8007f50:	e6aa      	b.n	8007ca8 <_dtoa_r+0x72c>
 8007f52:	2600      	movs	r6, #0
 8007f54:	0035      	movs	r5, r6
 8007f56:	e7e2      	b.n	8007f1e <_dtoa_r+0x9a2>
 8007f58:	9602      	str	r6, [sp, #8]
 8007f5a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007f5c:	0035      	movs	r5, r6
 8007f5e:	e584      	b.n	8007a6a <_dtoa_r+0x4ee>
 8007f60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d100      	bne.n	8007f68 <_dtoa_r+0x9ec>
 8007f66:	e0ce      	b.n	8008106 <_dtoa_r+0xb8a>
 8007f68:	9b07      	ldr	r3, [sp, #28]
 8007f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f6c:	2c00      	cmp	r4, #0
 8007f6e:	dd05      	ble.n	8007f7c <_dtoa_r+0xa00>
 8007f70:	0029      	movs	r1, r5
 8007f72:	0022      	movs	r2, r4
 8007f74:	0038      	movs	r0, r7
 8007f76:	f000 fd89 	bl	8008a8c <__lshift>
 8007f7a:	0005      	movs	r5, r0
 8007f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f7e:	0028      	movs	r0, r5
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d022      	beq.n	8007fca <_dtoa_r+0xa4e>
 8007f84:	0038      	movs	r0, r7
 8007f86:	6869      	ldr	r1, [r5, #4]
 8007f88:	f000 fb6a 	bl	8008660 <_Balloc>
 8007f8c:	1e04      	subs	r4, r0, #0
 8007f8e:	d10f      	bne.n	8007fb0 <_dtoa_r+0xa34>
 8007f90:	0002      	movs	r2, r0
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <_dtoa_r+0xa2c>)
 8007f94:	4905      	ldr	r1, [pc, #20]	; (8007fac <_dtoa_r+0xa30>)
 8007f96:	f7ff fb06 	bl	80075a6 <_dtoa_r+0x2a>
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	40240000 	.word	0x40240000
 8007fa0:	00000433 	.word	0x00000433
 8007fa4:	7ff00000 	.word	0x7ff00000
 8007fa8:	0800a00c 	.word	0x0800a00c
 8007fac:	000002ea 	.word	0x000002ea
 8007fb0:	0029      	movs	r1, r5
 8007fb2:	692b      	ldr	r3, [r5, #16]
 8007fb4:	310c      	adds	r1, #12
 8007fb6:	1c9a      	adds	r2, r3, #2
 8007fb8:	0092      	lsls	r2, r2, #2
 8007fba:	300c      	adds	r0, #12
 8007fbc:	f7fe fc6e 	bl	800689c <memcpy>
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	0021      	movs	r1, r4
 8007fc4:	0038      	movs	r0, r7
 8007fc6:	f000 fd61 	bl	8008a8c <__lshift>
 8007fca:	9b06      	ldr	r3, [sp, #24]
 8007fcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fce:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	189b      	adds	r3, r3, r2
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	002c      	movs	r4, r5
 8007fd8:	0005      	movs	r5, r0
 8007fda:	9314      	str	r3, [sp, #80]	; 0x50
 8007fdc:	9b08      	ldr	r3, [sp, #32]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fe2:	0031      	movs	r1, r6
 8007fe4:	9805      	ldr	r0, [sp, #20]
 8007fe6:	f7ff fa3d 	bl	8007464 <quorem>
 8007fea:	0003      	movs	r3, r0
 8007fec:	0021      	movs	r1, r4
 8007fee:	3330      	adds	r3, #48	; 0x30
 8007ff0:	900d      	str	r0, [sp, #52]	; 0x34
 8007ff2:	9805      	ldr	r0, [sp, #20]
 8007ff4:	9307      	str	r3, [sp, #28]
 8007ff6:	f000 fdb7 	bl	8008b68 <__mcmp>
 8007ffa:	002a      	movs	r2, r5
 8007ffc:	900e      	str	r0, [sp, #56]	; 0x38
 8007ffe:	0031      	movs	r1, r6
 8008000:	0038      	movs	r0, r7
 8008002:	f000 fdcd 	bl	8008ba0 <__mdiff>
 8008006:	68c3      	ldr	r3, [r0, #12]
 8008008:	9008      	str	r0, [sp, #32]
 800800a:	9310      	str	r3, [sp, #64]	; 0x40
 800800c:	2301      	movs	r3, #1
 800800e:	930c      	str	r3, [sp, #48]	; 0x30
 8008010:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008012:	2b00      	cmp	r3, #0
 8008014:	d104      	bne.n	8008020 <_dtoa_r+0xaa4>
 8008016:	0001      	movs	r1, r0
 8008018:	9805      	ldr	r0, [sp, #20]
 800801a:	f000 fda5 	bl	8008b68 <__mcmp>
 800801e:	900c      	str	r0, [sp, #48]	; 0x30
 8008020:	0038      	movs	r0, r7
 8008022:	9908      	ldr	r1, [sp, #32]
 8008024:	f000 fb60 	bl	80086e8 <_Bfree>
 8008028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800802a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800802c:	3301      	adds	r3, #1
 800802e:	9308      	str	r3, [sp, #32]
 8008030:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008032:	4313      	orrs	r3, r2
 8008034:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008036:	4313      	orrs	r3, r2
 8008038:	d10c      	bne.n	8008054 <_dtoa_r+0xad8>
 800803a:	9b07      	ldr	r3, [sp, #28]
 800803c:	2b39      	cmp	r3, #57	; 0x39
 800803e:	d026      	beq.n	800808e <_dtoa_r+0xb12>
 8008040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008042:	2b00      	cmp	r3, #0
 8008044:	dd02      	ble.n	800804c <_dtoa_r+0xad0>
 8008046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008048:	3331      	adds	r3, #49	; 0x31
 800804a:	9307      	str	r3, [sp, #28]
 800804c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800804e:	9a07      	ldr	r2, [sp, #28]
 8008050:	701a      	strb	r2, [r3, #0]
 8008052:	e76a      	b.n	8007f2a <_dtoa_r+0x9ae>
 8008054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008056:	2b00      	cmp	r3, #0
 8008058:	db04      	blt.n	8008064 <_dtoa_r+0xae8>
 800805a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800805c:	4313      	orrs	r3, r2
 800805e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008060:	4313      	orrs	r3, r2
 8008062:	d11f      	bne.n	80080a4 <_dtoa_r+0xb28>
 8008064:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008066:	2b00      	cmp	r3, #0
 8008068:	ddf0      	ble.n	800804c <_dtoa_r+0xad0>
 800806a:	9905      	ldr	r1, [sp, #20]
 800806c:	2201      	movs	r2, #1
 800806e:	0038      	movs	r0, r7
 8008070:	f000 fd0c 	bl	8008a8c <__lshift>
 8008074:	0031      	movs	r1, r6
 8008076:	9005      	str	r0, [sp, #20]
 8008078:	f000 fd76 	bl	8008b68 <__mcmp>
 800807c:	2800      	cmp	r0, #0
 800807e:	dc03      	bgt.n	8008088 <_dtoa_r+0xb0c>
 8008080:	d1e4      	bne.n	800804c <_dtoa_r+0xad0>
 8008082:	9b07      	ldr	r3, [sp, #28]
 8008084:	07db      	lsls	r3, r3, #31
 8008086:	d5e1      	bpl.n	800804c <_dtoa_r+0xad0>
 8008088:	9b07      	ldr	r3, [sp, #28]
 800808a:	2b39      	cmp	r3, #57	; 0x39
 800808c:	d1db      	bne.n	8008046 <_dtoa_r+0xaca>
 800808e:	2339      	movs	r3, #57	; 0x39
 8008090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008092:	7013      	strb	r3, [r2, #0]
 8008094:	9b08      	ldr	r3, [sp, #32]
 8008096:	9308      	str	r3, [sp, #32]
 8008098:	3b01      	subs	r3, #1
 800809a:	781a      	ldrb	r2, [r3, #0]
 800809c:	2a39      	cmp	r2, #57	; 0x39
 800809e:	d068      	beq.n	8008172 <_dtoa_r+0xbf6>
 80080a0:	3201      	adds	r2, #1
 80080a2:	e7d5      	b.n	8008050 <_dtoa_r+0xad4>
 80080a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	dd07      	ble.n	80080ba <_dtoa_r+0xb3e>
 80080aa:	9b07      	ldr	r3, [sp, #28]
 80080ac:	2b39      	cmp	r3, #57	; 0x39
 80080ae:	d0ee      	beq.n	800808e <_dtoa_r+0xb12>
 80080b0:	9b07      	ldr	r3, [sp, #28]
 80080b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080b4:	3301      	adds	r3, #1
 80080b6:	7013      	strb	r3, [r2, #0]
 80080b8:	e737      	b.n	8007f2a <_dtoa_r+0x9ae>
 80080ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080bc:	9a07      	ldr	r2, [sp, #28]
 80080be:	701a      	strb	r2, [r3, #0]
 80080c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d03e      	beq.n	8008146 <_dtoa_r+0xbca>
 80080c8:	2300      	movs	r3, #0
 80080ca:	220a      	movs	r2, #10
 80080cc:	9905      	ldr	r1, [sp, #20]
 80080ce:	0038      	movs	r0, r7
 80080d0:	f000 fb2e 	bl	8008730 <__multadd>
 80080d4:	2300      	movs	r3, #0
 80080d6:	9005      	str	r0, [sp, #20]
 80080d8:	220a      	movs	r2, #10
 80080da:	0021      	movs	r1, r4
 80080dc:	0038      	movs	r0, r7
 80080de:	42ac      	cmp	r4, r5
 80080e0:	d106      	bne.n	80080f0 <_dtoa_r+0xb74>
 80080e2:	f000 fb25 	bl	8008730 <__multadd>
 80080e6:	0004      	movs	r4, r0
 80080e8:	0005      	movs	r5, r0
 80080ea:	9b08      	ldr	r3, [sp, #32]
 80080ec:	930a      	str	r3, [sp, #40]	; 0x28
 80080ee:	e778      	b.n	8007fe2 <_dtoa_r+0xa66>
 80080f0:	f000 fb1e 	bl	8008730 <__multadd>
 80080f4:	0029      	movs	r1, r5
 80080f6:	0004      	movs	r4, r0
 80080f8:	2300      	movs	r3, #0
 80080fa:	220a      	movs	r2, #10
 80080fc:	0038      	movs	r0, r7
 80080fe:	f000 fb17 	bl	8008730 <__multadd>
 8008102:	0005      	movs	r5, r0
 8008104:	e7f1      	b.n	80080ea <_dtoa_r+0xb6e>
 8008106:	9b07      	ldr	r3, [sp, #28]
 8008108:	930c      	str	r3, [sp, #48]	; 0x30
 800810a:	2400      	movs	r4, #0
 800810c:	0031      	movs	r1, r6
 800810e:	9805      	ldr	r0, [sp, #20]
 8008110:	f7ff f9a8 	bl	8007464 <quorem>
 8008114:	9b06      	ldr	r3, [sp, #24]
 8008116:	3030      	adds	r0, #48	; 0x30
 8008118:	5518      	strb	r0, [r3, r4]
 800811a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800811c:	3401      	adds	r4, #1
 800811e:	9007      	str	r0, [sp, #28]
 8008120:	42a3      	cmp	r3, r4
 8008122:	dd07      	ble.n	8008134 <_dtoa_r+0xbb8>
 8008124:	2300      	movs	r3, #0
 8008126:	220a      	movs	r2, #10
 8008128:	0038      	movs	r0, r7
 800812a:	9905      	ldr	r1, [sp, #20]
 800812c:	f000 fb00 	bl	8008730 <__multadd>
 8008130:	9005      	str	r0, [sp, #20]
 8008132:	e7eb      	b.n	800810c <_dtoa_r+0xb90>
 8008134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008136:	2001      	movs	r0, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	dd00      	ble.n	800813e <_dtoa_r+0xbc2>
 800813c:	0018      	movs	r0, r3
 800813e:	2400      	movs	r4, #0
 8008140:	9b06      	ldr	r3, [sp, #24]
 8008142:	181b      	adds	r3, r3, r0
 8008144:	9308      	str	r3, [sp, #32]
 8008146:	9905      	ldr	r1, [sp, #20]
 8008148:	2201      	movs	r2, #1
 800814a:	0038      	movs	r0, r7
 800814c:	f000 fc9e 	bl	8008a8c <__lshift>
 8008150:	0031      	movs	r1, r6
 8008152:	9005      	str	r0, [sp, #20]
 8008154:	f000 fd08 	bl	8008b68 <__mcmp>
 8008158:	2800      	cmp	r0, #0
 800815a:	dc9b      	bgt.n	8008094 <_dtoa_r+0xb18>
 800815c:	d102      	bne.n	8008164 <_dtoa_r+0xbe8>
 800815e:	9b07      	ldr	r3, [sp, #28]
 8008160:	07db      	lsls	r3, r3, #31
 8008162:	d497      	bmi.n	8008094 <_dtoa_r+0xb18>
 8008164:	9b08      	ldr	r3, [sp, #32]
 8008166:	9308      	str	r3, [sp, #32]
 8008168:	3b01      	subs	r3, #1
 800816a:	781a      	ldrb	r2, [r3, #0]
 800816c:	2a30      	cmp	r2, #48	; 0x30
 800816e:	d0fa      	beq.n	8008166 <_dtoa_r+0xbea>
 8008170:	e6db      	b.n	8007f2a <_dtoa_r+0x9ae>
 8008172:	9a06      	ldr	r2, [sp, #24]
 8008174:	429a      	cmp	r2, r3
 8008176:	d18e      	bne.n	8008096 <_dtoa_r+0xb1a>
 8008178:	9b02      	ldr	r3, [sp, #8]
 800817a:	3301      	adds	r3, #1
 800817c:	9302      	str	r3, [sp, #8]
 800817e:	2331      	movs	r3, #49	; 0x31
 8008180:	e799      	b.n	80080b6 <_dtoa_r+0xb3a>
 8008182:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <_dtoa_r+0xc2c>)
 8008184:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008186:	9306      	str	r3, [sp, #24]
 8008188:	4b08      	ldr	r3, [pc, #32]	; (80081ac <_dtoa_r+0xc30>)
 800818a:	2a00      	cmp	r2, #0
 800818c:	d001      	beq.n	8008192 <_dtoa_r+0xc16>
 800818e:	f7ff fa3f 	bl	8007610 <_dtoa_r+0x94>
 8008192:	f7ff fa3f 	bl	8007614 <_dtoa_r+0x98>
 8008196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008198:	2b00      	cmp	r3, #0
 800819a:	dcb6      	bgt.n	800810a <_dtoa_r+0xb8e>
 800819c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800819e:	2b02      	cmp	r3, #2
 80081a0:	dd00      	ble.n	80081a4 <_dtoa_r+0xc28>
 80081a2:	e6ac      	b.n	8007efe <_dtoa_r+0x982>
 80081a4:	e7b1      	b.n	800810a <_dtoa_r+0xb8e>
 80081a6:	46c0      	nop			; (mov r8, r8)
 80081a8:	08009f8d 	.word	0x08009f8d
 80081ac:	08009f95 	.word	0x08009f95

080081b0 <__sflush_r>:
 80081b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081b2:	898b      	ldrh	r3, [r1, #12]
 80081b4:	0005      	movs	r5, r0
 80081b6:	000c      	movs	r4, r1
 80081b8:	071a      	lsls	r2, r3, #28
 80081ba:	d45f      	bmi.n	800827c <__sflush_r+0xcc>
 80081bc:	684a      	ldr	r2, [r1, #4]
 80081be:	2a00      	cmp	r2, #0
 80081c0:	dc04      	bgt.n	80081cc <__sflush_r+0x1c>
 80081c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	dc01      	bgt.n	80081cc <__sflush_r+0x1c>
 80081c8:	2000      	movs	r0, #0
 80081ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80081ce:	2f00      	cmp	r7, #0
 80081d0:	d0fa      	beq.n	80081c8 <__sflush_r+0x18>
 80081d2:	2200      	movs	r2, #0
 80081d4:	2180      	movs	r1, #128	; 0x80
 80081d6:	682e      	ldr	r6, [r5, #0]
 80081d8:	602a      	str	r2, [r5, #0]
 80081da:	001a      	movs	r2, r3
 80081dc:	0149      	lsls	r1, r1, #5
 80081de:	400a      	ands	r2, r1
 80081e0:	420b      	tst	r3, r1
 80081e2:	d034      	beq.n	800824e <__sflush_r+0x9e>
 80081e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	075b      	lsls	r3, r3, #29
 80081ea:	d506      	bpl.n	80081fa <__sflush_r+0x4a>
 80081ec:	6863      	ldr	r3, [r4, #4]
 80081ee:	1ac0      	subs	r0, r0, r3
 80081f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <__sflush_r+0x4a>
 80081f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081f8:	1ac0      	subs	r0, r0, r3
 80081fa:	0002      	movs	r2, r0
 80081fc:	6a21      	ldr	r1, [r4, #32]
 80081fe:	2300      	movs	r3, #0
 8008200:	0028      	movs	r0, r5
 8008202:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008204:	47b8      	blx	r7
 8008206:	89a1      	ldrh	r1, [r4, #12]
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d106      	bne.n	800821a <__sflush_r+0x6a>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	2b1d      	cmp	r3, #29
 8008210:	d831      	bhi.n	8008276 <__sflush_r+0xc6>
 8008212:	4a2c      	ldr	r2, [pc, #176]	; (80082c4 <__sflush_r+0x114>)
 8008214:	40da      	lsrs	r2, r3
 8008216:	07d3      	lsls	r3, r2, #31
 8008218:	d52d      	bpl.n	8008276 <__sflush_r+0xc6>
 800821a:	2300      	movs	r3, #0
 800821c:	6063      	str	r3, [r4, #4]
 800821e:	6923      	ldr	r3, [r4, #16]
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	04cb      	lsls	r3, r1, #19
 8008224:	d505      	bpl.n	8008232 <__sflush_r+0x82>
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	d102      	bne.n	8008230 <__sflush_r+0x80>
 800822a:	682b      	ldr	r3, [r5, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d100      	bne.n	8008232 <__sflush_r+0x82>
 8008230:	6560      	str	r0, [r4, #84]	; 0x54
 8008232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008234:	602e      	str	r6, [r5, #0]
 8008236:	2900      	cmp	r1, #0
 8008238:	d0c6      	beq.n	80081c8 <__sflush_r+0x18>
 800823a:	0023      	movs	r3, r4
 800823c:	3344      	adds	r3, #68	; 0x44
 800823e:	4299      	cmp	r1, r3
 8008240:	d002      	beq.n	8008248 <__sflush_r+0x98>
 8008242:	0028      	movs	r0, r5
 8008244:	f000 fdd4 	bl	8008df0 <_free_r>
 8008248:	2000      	movs	r0, #0
 800824a:	6360      	str	r0, [r4, #52]	; 0x34
 800824c:	e7bd      	b.n	80081ca <__sflush_r+0x1a>
 800824e:	2301      	movs	r3, #1
 8008250:	0028      	movs	r0, r5
 8008252:	6a21      	ldr	r1, [r4, #32]
 8008254:	47b8      	blx	r7
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	d1c5      	bne.n	80081e6 <__sflush_r+0x36>
 800825a:	682b      	ldr	r3, [r5, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d0c2      	beq.n	80081e6 <__sflush_r+0x36>
 8008260:	2b1d      	cmp	r3, #29
 8008262:	d001      	beq.n	8008268 <__sflush_r+0xb8>
 8008264:	2b16      	cmp	r3, #22
 8008266:	d101      	bne.n	800826c <__sflush_r+0xbc>
 8008268:	602e      	str	r6, [r5, #0]
 800826a:	e7ad      	b.n	80081c8 <__sflush_r+0x18>
 800826c:	2340      	movs	r3, #64	; 0x40
 800826e:	89a2      	ldrh	r2, [r4, #12]
 8008270:	4313      	orrs	r3, r2
 8008272:	81a3      	strh	r3, [r4, #12]
 8008274:	e7a9      	b.n	80081ca <__sflush_r+0x1a>
 8008276:	2340      	movs	r3, #64	; 0x40
 8008278:	430b      	orrs	r3, r1
 800827a:	e7fa      	b.n	8008272 <__sflush_r+0xc2>
 800827c:	690f      	ldr	r7, [r1, #16]
 800827e:	2f00      	cmp	r7, #0
 8008280:	d0a2      	beq.n	80081c8 <__sflush_r+0x18>
 8008282:	680a      	ldr	r2, [r1, #0]
 8008284:	600f      	str	r7, [r1, #0]
 8008286:	1bd2      	subs	r2, r2, r7
 8008288:	9201      	str	r2, [sp, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	079b      	lsls	r3, r3, #30
 800828e:	d100      	bne.n	8008292 <__sflush_r+0xe2>
 8008290:	694a      	ldr	r2, [r1, #20]
 8008292:	60a2      	str	r2, [r4, #8]
 8008294:	9b01      	ldr	r3, [sp, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	dc00      	bgt.n	800829c <__sflush_r+0xec>
 800829a:	e795      	b.n	80081c8 <__sflush_r+0x18>
 800829c:	003a      	movs	r2, r7
 800829e:	0028      	movs	r0, r5
 80082a0:	9b01      	ldr	r3, [sp, #4]
 80082a2:	6a21      	ldr	r1, [r4, #32]
 80082a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082a6:	47b0      	blx	r6
 80082a8:	2800      	cmp	r0, #0
 80082aa:	dc06      	bgt.n	80082ba <__sflush_r+0x10a>
 80082ac:	2340      	movs	r3, #64	; 0x40
 80082ae:	2001      	movs	r0, #1
 80082b0:	89a2      	ldrh	r2, [r4, #12]
 80082b2:	4240      	negs	r0, r0
 80082b4:	4313      	orrs	r3, r2
 80082b6:	81a3      	strh	r3, [r4, #12]
 80082b8:	e787      	b.n	80081ca <__sflush_r+0x1a>
 80082ba:	9b01      	ldr	r3, [sp, #4]
 80082bc:	183f      	adds	r7, r7, r0
 80082be:	1a1b      	subs	r3, r3, r0
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	e7e7      	b.n	8008294 <__sflush_r+0xe4>
 80082c4:	20400001 	.word	0x20400001

080082c8 <_fflush_r>:
 80082c8:	690b      	ldr	r3, [r1, #16]
 80082ca:	b570      	push	{r4, r5, r6, lr}
 80082cc:	0005      	movs	r5, r0
 80082ce:	000c      	movs	r4, r1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <_fflush_r+0x12>
 80082d4:	2500      	movs	r5, #0
 80082d6:	0028      	movs	r0, r5
 80082d8:	bd70      	pop	{r4, r5, r6, pc}
 80082da:	2800      	cmp	r0, #0
 80082dc:	d004      	beq.n	80082e8 <_fflush_r+0x20>
 80082de:	6983      	ldr	r3, [r0, #24]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <_fflush_r+0x20>
 80082e4:	f000 f892 	bl	800840c <__sinit>
 80082e8:	4b14      	ldr	r3, [pc, #80]	; (800833c <_fflush_r+0x74>)
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d11b      	bne.n	8008326 <_fflush_r+0x5e>
 80082ee:	686c      	ldr	r4, [r5, #4]
 80082f0:	220c      	movs	r2, #12
 80082f2:	5ea3      	ldrsh	r3, [r4, r2]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0ed      	beq.n	80082d4 <_fflush_r+0xc>
 80082f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082fa:	07d2      	lsls	r2, r2, #31
 80082fc:	d404      	bmi.n	8008308 <_fflush_r+0x40>
 80082fe:	059b      	lsls	r3, r3, #22
 8008300:	d402      	bmi.n	8008308 <_fflush_r+0x40>
 8008302:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008304:	f000 f927 	bl	8008556 <__retarget_lock_acquire_recursive>
 8008308:	0028      	movs	r0, r5
 800830a:	0021      	movs	r1, r4
 800830c:	f7ff ff50 	bl	80081b0 <__sflush_r>
 8008310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008312:	0005      	movs	r5, r0
 8008314:	07db      	lsls	r3, r3, #31
 8008316:	d4de      	bmi.n	80082d6 <_fflush_r+0xe>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	059b      	lsls	r3, r3, #22
 800831c:	d4db      	bmi.n	80082d6 <_fflush_r+0xe>
 800831e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008320:	f000 f91a 	bl	8008558 <__retarget_lock_release_recursive>
 8008324:	e7d7      	b.n	80082d6 <_fflush_r+0xe>
 8008326:	4b06      	ldr	r3, [pc, #24]	; (8008340 <_fflush_r+0x78>)
 8008328:	429c      	cmp	r4, r3
 800832a:	d101      	bne.n	8008330 <_fflush_r+0x68>
 800832c:	68ac      	ldr	r4, [r5, #8]
 800832e:	e7df      	b.n	80082f0 <_fflush_r+0x28>
 8008330:	4b04      	ldr	r3, [pc, #16]	; (8008344 <_fflush_r+0x7c>)
 8008332:	429c      	cmp	r4, r3
 8008334:	d1dc      	bne.n	80082f0 <_fflush_r+0x28>
 8008336:	68ec      	ldr	r4, [r5, #12]
 8008338:	e7da      	b.n	80082f0 <_fflush_r+0x28>
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	0800a040 	.word	0x0800a040
 8008340:	0800a060 	.word	0x0800a060
 8008344:	0800a020 	.word	0x0800a020

08008348 <std>:
 8008348:	2300      	movs	r3, #0
 800834a:	b510      	push	{r4, lr}
 800834c:	0004      	movs	r4, r0
 800834e:	6003      	str	r3, [r0, #0]
 8008350:	6043      	str	r3, [r0, #4]
 8008352:	6083      	str	r3, [r0, #8]
 8008354:	8181      	strh	r1, [r0, #12]
 8008356:	6643      	str	r3, [r0, #100]	; 0x64
 8008358:	0019      	movs	r1, r3
 800835a:	81c2      	strh	r2, [r0, #14]
 800835c:	6103      	str	r3, [r0, #16]
 800835e:	6143      	str	r3, [r0, #20]
 8008360:	6183      	str	r3, [r0, #24]
 8008362:	2208      	movs	r2, #8
 8008364:	305c      	adds	r0, #92	; 0x5c
 8008366:	f7fe faa2 	bl	80068ae <memset>
 800836a:	4b05      	ldr	r3, [pc, #20]	; (8008380 <std+0x38>)
 800836c:	6224      	str	r4, [r4, #32]
 800836e:	6263      	str	r3, [r4, #36]	; 0x24
 8008370:	4b04      	ldr	r3, [pc, #16]	; (8008384 <std+0x3c>)
 8008372:	62a3      	str	r3, [r4, #40]	; 0x28
 8008374:	4b04      	ldr	r3, [pc, #16]	; (8008388 <std+0x40>)
 8008376:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008378:	4b04      	ldr	r3, [pc, #16]	; (800838c <std+0x44>)
 800837a:	6323      	str	r3, [r4, #48]	; 0x30
 800837c:	bd10      	pop	{r4, pc}
 800837e:	46c0      	nop			; (mov r8, r8)
 8008380:	0800929d 	.word	0x0800929d
 8008384:	080092c5 	.word	0x080092c5
 8008388:	080092fd 	.word	0x080092fd
 800838c:	08009329 	.word	0x08009329

08008390 <_cleanup_r>:
 8008390:	b510      	push	{r4, lr}
 8008392:	4902      	ldr	r1, [pc, #8]	; (800839c <_cleanup_r+0xc>)
 8008394:	f000 f8ba 	bl	800850c <_fwalk_reent>
 8008398:	bd10      	pop	{r4, pc}
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	080082c9 	.word	0x080082c9

080083a0 <__sfmoreglue>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	2568      	movs	r5, #104	; 0x68
 80083a4:	1e4a      	subs	r2, r1, #1
 80083a6:	4355      	muls	r5, r2
 80083a8:	000e      	movs	r6, r1
 80083aa:	0029      	movs	r1, r5
 80083ac:	3174      	adds	r1, #116	; 0x74
 80083ae:	f000 fd8b 	bl	8008ec8 <_malloc_r>
 80083b2:	1e04      	subs	r4, r0, #0
 80083b4:	d008      	beq.n	80083c8 <__sfmoreglue+0x28>
 80083b6:	2100      	movs	r1, #0
 80083b8:	002a      	movs	r2, r5
 80083ba:	6001      	str	r1, [r0, #0]
 80083bc:	6046      	str	r6, [r0, #4]
 80083be:	300c      	adds	r0, #12
 80083c0:	60a0      	str	r0, [r4, #8]
 80083c2:	3268      	adds	r2, #104	; 0x68
 80083c4:	f7fe fa73 	bl	80068ae <memset>
 80083c8:	0020      	movs	r0, r4
 80083ca:	bd70      	pop	{r4, r5, r6, pc}

080083cc <__sfp_lock_acquire>:
 80083cc:	b510      	push	{r4, lr}
 80083ce:	4802      	ldr	r0, [pc, #8]	; (80083d8 <__sfp_lock_acquire+0xc>)
 80083d0:	f000 f8c1 	bl	8008556 <__retarget_lock_acquire_recursive>
 80083d4:	bd10      	pop	{r4, pc}
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	20000651 	.word	0x20000651

080083dc <__sfp_lock_release>:
 80083dc:	b510      	push	{r4, lr}
 80083de:	4802      	ldr	r0, [pc, #8]	; (80083e8 <__sfp_lock_release+0xc>)
 80083e0:	f000 f8ba 	bl	8008558 <__retarget_lock_release_recursive>
 80083e4:	bd10      	pop	{r4, pc}
 80083e6:	46c0      	nop			; (mov r8, r8)
 80083e8:	20000651 	.word	0x20000651

080083ec <__sinit_lock_acquire>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	4802      	ldr	r0, [pc, #8]	; (80083f8 <__sinit_lock_acquire+0xc>)
 80083f0:	f000 f8b1 	bl	8008556 <__retarget_lock_acquire_recursive>
 80083f4:	bd10      	pop	{r4, pc}
 80083f6:	46c0      	nop			; (mov r8, r8)
 80083f8:	20000652 	.word	0x20000652

080083fc <__sinit_lock_release>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	4802      	ldr	r0, [pc, #8]	; (8008408 <__sinit_lock_release+0xc>)
 8008400:	f000 f8aa 	bl	8008558 <__retarget_lock_release_recursive>
 8008404:	bd10      	pop	{r4, pc}
 8008406:	46c0      	nop			; (mov r8, r8)
 8008408:	20000652 	.word	0x20000652

0800840c <__sinit>:
 800840c:	b513      	push	{r0, r1, r4, lr}
 800840e:	0004      	movs	r4, r0
 8008410:	f7ff ffec 	bl	80083ec <__sinit_lock_acquire>
 8008414:	69a3      	ldr	r3, [r4, #24]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <__sinit+0x14>
 800841a:	f7ff ffef 	bl	80083fc <__sinit_lock_release>
 800841e:	bd13      	pop	{r0, r1, r4, pc}
 8008420:	64a3      	str	r3, [r4, #72]	; 0x48
 8008422:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008424:	6523      	str	r3, [r4, #80]	; 0x50
 8008426:	4b13      	ldr	r3, [pc, #76]	; (8008474 <__sinit+0x68>)
 8008428:	4a13      	ldr	r2, [pc, #76]	; (8008478 <__sinit+0x6c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	62a2      	str	r2, [r4, #40]	; 0x28
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	42a3      	cmp	r3, r4
 8008432:	d101      	bne.n	8008438 <__sinit+0x2c>
 8008434:	2301      	movs	r3, #1
 8008436:	61a3      	str	r3, [r4, #24]
 8008438:	0020      	movs	r0, r4
 800843a:	f000 f81f 	bl	800847c <__sfp>
 800843e:	6060      	str	r0, [r4, #4]
 8008440:	0020      	movs	r0, r4
 8008442:	f000 f81b 	bl	800847c <__sfp>
 8008446:	60a0      	str	r0, [r4, #8]
 8008448:	0020      	movs	r0, r4
 800844a:	f000 f817 	bl	800847c <__sfp>
 800844e:	2200      	movs	r2, #0
 8008450:	2104      	movs	r1, #4
 8008452:	60e0      	str	r0, [r4, #12]
 8008454:	6860      	ldr	r0, [r4, #4]
 8008456:	f7ff ff77 	bl	8008348 <std>
 800845a:	2201      	movs	r2, #1
 800845c:	2109      	movs	r1, #9
 800845e:	68a0      	ldr	r0, [r4, #8]
 8008460:	f7ff ff72 	bl	8008348 <std>
 8008464:	2202      	movs	r2, #2
 8008466:	2112      	movs	r1, #18
 8008468:	68e0      	ldr	r0, [r4, #12]
 800846a:	f7ff ff6d 	bl	8008348 <std>
 800846e:	2301      	movs	r3, #1
 8008470:	61a3      	str	r3, [r4, #24]
 8008472:	e7d2      	b.n	800841a <__sinit+0xe>
 8008474:	08009e54 	.word	0x08009e54
 8008478:	08008391 	.word	0x08008391

0800847c <__sfp>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	0007      	movs	r7, r0
 8008480:	f7ff ffa4 	bl	80083cc <__sfp_lock_acquire>
 8008484:	4b1f      	ldr	r3, [pc, #124]	; (8008504 <__sfp+0x88>)
 8008486:	681e      	ldr	r6, [r3, #0]
 8008488:	69b3      	ldr	r3, [r6, #24]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d102      	bne.n	8008494 <__sfp+0x18>
 800848e:	0030      	movs	r0, r6
 8008490:	f7ff ffbc 	bl	800840c <__sinit>
 8008494:	3648      	adds	r6, #72	; 0x48
 8008496:	68b4      	ldr	r4, [r6, #8]
 8008498:	6873      	ldr	r3, [r6, #4]
 800849a:	3b01      	subs	r3, #1
 800849c:	d504      	bpl.n	80084a8 <__sfp+0x2c>
 800849e:	6833      	ldr	r3, [r6, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d022      	beq.n	80084ea <__sfp+0x6e>
 80084a4:	6836      	ldr	r6, [r6, #0]
 80084a6:	e7f6      	b.n	8008496 <__sfp+0x1a>
 80084a8:	220c      	movs	r2, #12
 80084aa:	5ea5      	ldrsh	r5, [r4, r2]
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	d11a      	bne.n	80084e6 <__sfp+0x6a>
 80084b0:	0020      	movs	r0, r4
 80084b2:	4b15      	ldr	r3, [pc, #84]	; (8008508 <__sfp+0x8c>)
 80084b4:	3058      	adds	r0, #88	; 0x58
 80084b6:	60e3      	str	r3, [r4, #12]
 80084b8:	6665      	str	r5, [r4, #100]	; 0x64
 80084ba:	f000 f84b 	bl	8008554 <__retarget_lock_init_recursive>
 80084be:	f7ff ff8d 	bl	80083dc <__sfp_lock_release>
 80084c2:	0020      	movs	r0, r4
 80084c4:	2208      	movs	r2, #8
 80084c6:	0029      	movs	r1, r5
 80084c8:	6025      	str	r5, [r4, #0]
 80084ca:	60a5      	str	r5, [r4, #8]
 80084cc:	6065      	str	r5, [r4, #4]
 80084ce:	6125      	str	r5, [r4, #16]
 80084d0:	6165      	str	r5, [r4, #20]
 80084d2:	61a5      	str	r5, [r4, #24]
 80084d4:	305c      	adds	r0, #92	; 0x5c
 80084d6:	f7fe f9ea 	bl	80068ae <memset>
 80084da:	6365      	str	r5, [r4, #52]	; 0x34
 80084dc:	63a5      	str	r5, [r4, #56]	; 0x38
 80084de:	64a5      	str	r5, [r4, #72]	; 0x48
 80084e0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80084e2:	0020      	movs	r0, r4
 80084e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e6:	3468      	adds	r4, #104	; 0x68
 80084e8:	e7d7      	b.n	800849a <__sfp+0x1e>
 80084ea:	2104      	movs	r1, #4
 80084ec:	0038      	movs	r0, r7
 80084ee:	f7ff ff57 	bl	80083a0 <__sfmoreglue>
 80084f2:	1e04      	subs	r4, r0, #0
 80084f4:	6030      	str	r0, [r6, #0]
 80084f6:	d1d5      	bne.n	80084a4 <__sfp+0x28>
 80084f8:	f7ff ff70 	bl	80083dc <__sfp_lock_release>
 80084fc:	230c      	movs	r3, #12
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	e7ef      	b.n	80084e2 <__sfp+0x66>
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	08009e54 	.word	0x08009e54
 8008508:	ffff0001 	.word	0xffff0001

0800850c <_fwalk_reent>:
 800850c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800850e:	0004      	movs	r4, r0
 8008510:	0006      	movs	r6, r0
 8008512:	2700      	movs	r7, #0
 8008514:	9101      	str	r1, [sp, #4]
 8008516:	3448      	adds	r4, #72	; 0x48
 8008518:	6863      	ldr	r3, [r4, #4]
 800851a:	68a5      	ldr	r5, [r4, #8]
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	9b00      	ldr	r3, [sp, #0]
 8008520:	3b01      	subs	r3, #1
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	d504      	bpl.n	8008530 <_fwalk_reent+0x24>
 8008526:	6824      	ldr	r4, [r4, #0]
 8008528:	2c00      	cmp	r4, #0
 800852a:	d1f5      	bne.n	8008518 <_fwalk_reent+0xc>
 800852c:	0038      	movs	r0, r7
 800852e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008530:	89ab      	ldrh	r3, [r5, #12]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d908      	bls.n	8008548 <_fwalk_reent+0x3c>
 8008536:	220e      	movs	r2, #14
 8008538:	5eab      	ldrsh	r3, [r5, r2]
 800853a:	3301      	adds	r3, #1
 800853c:	d004      	beq.n	8008548 <_fwalk_reent+0x3c>
 800853e:	0029      	movs	r1, r5
 8008540:	0030      	movs	r0, r6
 8008542:	9b01      	ldr	r3, [sp, #4]
 8008544:	4798      	blx	r3
 8008546:	4307      	orrs	r7, r0
 8008548:	3568      	adds	r5, #104	; 0x68
 800854a:	e7e8      	b.n	800851e <_fwalk_reent+0x12>

0800854c <_localeconv_r>:
 800854c:	4800      	ldr	r0, [pc, #0]	; (8008550 <_localeconv_r+0x4>)
 800854e:	4770      	bx	lr
 8008550:	200001b8 	.word	0x200001b8

08008554 <__retarget_lock_init_recursive>:
 8008554:	4770      	bx	lr

08008556 <__retarget_lock_acquire_recursive>:
 8008556:	4770      	bx	lr

08008558 <__retarget_lock_release_recursive>:
 8008558:	4770      	bx	lr
	...

0800855c <__swhatbuf_r>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	000e      	movs	r6, r1
 8008560:	001d      	movs	r5, r3
 8008562:	230e      	movs	r3, #14
 8008564:	5ec9      	ldrsh	r1, [r1, r3]
 8008566:	0014      	movs	r4, r2
 8008568:	b096      	sub	sp, #88	; 0x58
 800856a:	2900      	cmp	r1, #0
 800856c:	da08      	bge.n	8008580 <__swhatbuf_r+0x24>
 800856e:	220c      	movs	r2, #12
 8008570:	5eb3      	ldrsh	r3, [r6, r2]
 8008572:	2200      	movs	r2, #0
 8008574:	602a      	str	r2, [r5, #0]
 8008576:	061b      	lsls	r3, r3, #24
 8008578:	d411      	bmi.n	800859e <__swhatbuf_r+0x42>
 800857a:	2380      	movs	r3, #128	; 0x80
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	e00f      	b.n	80085a0 <__swhatbuf_r+0x44>
 8008580:	466a      	mov	r2, sp
 8008582:	f000 ff2b 	bl	80093dc <_fstat_r>
 8008586:	2800      	cmp	r0, #0
 8008588:	dbf1      	blt.n	800856e <__swhatbuf_r+0x12>
 800858a:	23f0      	movs	r3, #240	; 0xf0
 800858c:	9901      	ldr	r1, [sp, #4]
 800858e:	021b      	lsls	r3, r3, #8
 8008590:	4019      	ands	r1, r3
 8008592:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <__swhatbuf_r+0x4c>)
 8008594:	18c9      	adds	r1, r1, r3
 8008596:	424b      	negs	r3, r1
 8008598:	4159      	adcs	r1, r3
 800859a:	6029      	str	r1, [r5, #0]
 800859c:	e7ed      	b.n	800857a <__swhatbuf_r+0x1e>
 800859e:	2340      	movs	r3, #64	; 0x40
 80085a0:	2000      	movs	r0, #0
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	b016      	add	sp, #88	; 0x58
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	ffffe000 	.word	0xffffe000

080085ac <__smakebuf_r>:
 80085ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ae:	2602      	movs	r6, #2
 80085b0:	898b      	ldrh	r3, [r1, #12]
 80085b2:	0005      	movs	r5, r0
 80085b4:	000c      	movs	r4, r1
 80085b6:	4233      	tst	r3, r6
 80085b8:	d006      	beq.n	80085c8 <__smakebuf_r+0x1c>
 80085ba:	0023      	movs	r3, r4
 80085bc:	3347      	adds	r3, #71	; 0x47
 80085be:	6023      	str	r3, [r4, #0]
 80085c0:	6123      	str	r3, [r4, #16]
 80085c2:	2301      	movs	r3, #1
 80085c4:	6163      	str	r3, [r4, #20]
 80085c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80085c8:	466a      	mov	r2, sp
 80085ca:	ab01      	add	r3, sp, #4
 80085cc:	f7ff ffc6 	bl	800855c <__swhatbuf_r>
 80085d0:	9900      	ldr	r1, [sp, #0]
 80085d2:	0007      	movs	r7, r0
 80085d4:	0028      	movs	r0, r5
 80085d6:	f000 fc77 	bl	8008ec8 <_malloc_r>
 80085da:	2800      	cmp	r0, #0
 80085dc:	d108      	bne.n	80085f0 <__smakebuf_r+0x44>
 80085de:	220c      	movs	r2, #12
 80085e0:	5ea3      	ldrsh	r3, [r4, r2]
 80085e2:	059a      	lsls	r2, r3, #22
 80085e4:	d4ef      	bmi.n	80085c6 <__smakebuf_r+0x1a>
 80085e6:	2203      	movs	r2, #3
 80085e8:	4393      	bics	r3, r2
 80085ea:	431e      	orrs	r6, r3
 80085ec:	81a6      	strh	r6, [r4, #12]
 80085ee:	e7e4      	b.n	80085ba <__smakebuf_r+0xe>
 80085f0:	4b0f      	ldr	r3, [pc, #60]	; (8008630 <__smakebuf_r+0x84>)
 80085f2:	62ab      	str	r3, [r5, #40]	; 0x28
 80085f4:	2380      	movs	r3, #128	; 0x80
 80085f6:	89a2      	ldrh	r2, [r4, #12]
 80085f8:	6020      	str	r0, [r4, #0]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	9b00      	ldr	r3, [sp, #0]
 8008600:	6120      	str	r0, [r4, #16]
 8008602:	6163      	str	r3, [r4, #20]
 8008604:	9b01      	ldr	r3, [sp, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00d      	beq.n	8008626 <__smakebuf_r+0x7a>
 800860a:	0028      	movs	r0, r5
 800860c:	230e      	movs	r3, #14
 800860e:	5ee1      	ldrsh	r1, [r4, r3]
 8008610:	f000 fef6 	bl	8009400 <_isatty_r>
 8008614:	2800      	cmp	r0, #0
 8008616:	d006      	beq.n	8008626 <__smakebuf_r+0x7a>
 8008618:	2203      	movs	r2, #3
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	4393      	bics	r3, r2
 800861e:	001a      	movs	r2, r3
 8008620:	2301      	movs	r3, #1
 8008622:	4313      	orrs	r3, r2
 8008624:	81a3      	strh	r3, [r4, #12]
 8008626:	89a0      	ldrh	r0, [r4, #12]
 8008628:	4307      	orrs	r7, r0
 800862a:	81a7      	strh	r7, [r4, #12]
 800862c:	e7cb      	b.n	80085c6 <__smakebuf_r+0x1a>
 800862e:	46c0      	nop			; (mov r8, r8)
 8008630:	08008391 	.word	0x08008391

08008634 <malloc>:
 8008634:	b510      	push	{r4, lr}
 8008636:	4b03      	ldr	r3, [pc, #12]	; (8008644 <malloc+0x10>)
 8008638:	0001      	movs	r1, r0
 800863a:	6818      	ldr	r0, [r3, #0]
 800863c:	f000 fc44 	bl	8008ec8 <_malloc_r>
 8008640:	bd10      	pop	{r4, pc}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	20000064 	.word	0x20000064

08008648 <memchr>:
 8008648:	b2c9      	uxtb	r1, r1
 800864a:	1882      	adds	r2, r0, r2
 800864c:	4290      	cmp	r0, r2
 800864e:	d101      	bne.n	8008654 <memchr+0xc>
 8008650:	2000      	movs	r0, #0
 8008652:	4770      	bx	lr
 8008654:	7803      	ldrb	r3, [r0, #0]
 8008656:	428b      	cmp	r3, r1
 8008658:	d0fb      	beq.n	8008652 <memchr+0xa>
 800865a:	3001      	adds	r0, #1
 800865c:	e7f6      	b.n	800864c <memchr+0x4>
	...

08008660 <_Balloc>:
 8008660:	b570      	push	{r4, r5, r6, lr}
 8008662:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008664:	0006      	movs	r6, r0
 8008666:	000c      	movs	r4, r1
 8008668:	2d00      	cmp	r5, #0
 800866a:	d10e      	bne.n	800868a <_Balloc+0x2a>
 800866c:	2010      	movs	r0, #16
 800866e:	f7ff ffe1 	bl	8008634 <malloc>
 8008672:	1e02      	subs	r2, r0, #0
 8008674:	6270      	str	r0, [r6, #36]	; 0x24
 8008676:	d104      	bne.n	8008682 <_Balloc+0x22>
 8008678:	2166      	movs	r1, #102	; 0x66
 800867a:	4b19      	ldr	r3, [pc, #100]	; (80086e0 <_Balloc+0x80>)
 800867c:	4819      	ldr	r0, [pc, #100]	; (80086e4 <_Balloc+0x84>)
 800867e:	f000 fe6d 	bl	800935c <__assert_func>
 8008682:	6045      	str	r5, [r0, #4]
 8008684:	6085      	str	r5, [r0, #8]
 8008686:	6005      	str	r5, [r0, #0]
 8008688:	60c5      	str	r5, [r0, #12]
 800868a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800868c:	68eb      	ldr	r3, [r5, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d013      	beq.n	80086ba <_Balloc+0x5a>
 8008692:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008694:	00a2      	lsls	r2, r4, #2
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	189b      	adds	r3, r3, r2
 800869a:	6818      	ldr	r0, [r3, #0]
 800869c:	2800      	cmp	r0, #0
 800869e:	d118      	bne.n	80086d2 <_Balloc+0x72>
 80086a0:	2101      	movs	r1, #1
 80086a2:	000d      	movs	r5, r1
 80086a4:	40a5      	lsls	r5, r4
 80086a6:	1d6a      	adds	r2, r5, #5
 80086a8:	0030      	movs	r0, r6
 80086aa:	0092      	lsls	r2, r2, #2
 80086ac:	f000 fb74 	bl	8008d98 <_calloc_r>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d00c      	beq.n	80086ce <_Balloc+0x6e>
 80086b4:	6044      	str	r4, [r0, #4]
 80086b6:	6085      	str	r5, [r0, #8]
 80086b8:	e00d      	b.n	80086d6 <_Balloc+0x76>
 80086ba:	2221      	movs	r2, #33	; 0x21
 80086bc:	2104      	movs	r1, #4
 80086be:	0030      	movs	r0, r6
 80086c0:	f000 fb6a 	bl	8008d98 <_calloc_r>
 80086c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80086c6:	60e8      	str	r0, [r5, #12]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e1      	bne.n	8008692 <_Balloc+0x32>
 80086ce:	2000      	movs	r0, #0
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	6802      	ldr	r2, [r0, #0]
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	2300      	movs	r3, #0
 80086d8:	6103      	str	r3, [r0, #16]
 80086da:	60c3      	str	r3, [r0, #12]
 80086dc:	e7f8      	b.n	80086d0 <_Balloc+0x70>
 80086de:	46c0      	nop			; (mov r8, r8)
 80086e0:	08009f9a 	.word	0x08009f9a
 80086e4:	0800a080 	.word	0x0800a080

080086e8 <_Bfree>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086ec:	0005      	movs	r5, r0
 80086ee:	000c      	movs	r4, r1
 80086f0:	2e00      	cmp	r6, #0
 80086f2:	d10e      	bne.n	8008712 <_Bfree+0x2a>
 80086f4:	2010      	movs	r0, #16
 80086f6:	f7ff ff9d 	bl	8008634 <malloc>
 80086fa:	1e02      	subs	r2, r0, #0
 80086fc:	6268      	str	r0, [r5, #36]	; 0x24
 80086fe:	d104      	bne.n	800870a <_Bfree+0x22>
 8008700:	218a      	movs	r1, #138	; 0x8a
 8008702:	4b09      	ldr	r3, [pc, #36]	; (8008728 <_Bfree+0x40>)
 8008704:	4809      	ldr	r0, [pc, #36]	; (800872c <_Bfree+0x44>)
 8008706:	f000 fe29 	bl	800935c <__assert_func>
 800870a:	6046      	str	r6, [r0, #4]
 800870c:	6086      	str	r6, [r0, #8]
 800870e:	6006      	str	r6, [r0, #0]
 8008710:	60c6      	str	r6, [r0, #12]
 8008712:	2c00      	cmp	r4, #0
 8008714:	d007      	beq.n	8008726 <_Bfree+0x3e>
 8008716:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008718:	6862      	ldr	r2, [r4, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	0092      	lsls	r2, r2, #2
 800871e:	189b      	adds	r3, r3, r2
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	6022      	str	r2, [r4, #0]
 8008724:	601c      	str	r4, [r3, #0]
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	08009f9a 	.word	0x08009f9a
 800872c:	0800a080 	.word	0x0800a080

08008730 <__multadd>:
 8008730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008732:	000e      	movs	r6, r1
 8008734:	9001      	str	r0, [sp, #4]
 8008736:	000c      	movs	r4, r1
 8008738:	001d      	movs	r5, r3
 800873a:	2000      	movs	r0, #0
 800873c:	690f      	ldr	r7, [r1, #16]
 800873e:	3614      	adds	r6, #20
 8008740:	6833      	ldr	r3, [r6, #0]
 8008742:	3001      	adds	r0, #1
 8008744:	b299      	uxth	r1, r3
 8008746:	4351      	muls	r1, r2
 8008748:	0c1b      	lsrs	r3, r3, #16
 800874a:	4353      	muls	r3, r2
 800874c:	1949      	adds	r1, r1, r5
 800874e:	0c0d      	lsrs	r5, r1, #16
 8008750:	195b      	adds	r3, r3, r5
 8008752:	0c1d      	lsrs	r5, r3, #16
 8008754:	b289      	uxth	r1, r1
 8008756:	041b      	lsls	r3, r3, #16
 8008758:	185b      	adds	r3, r3, r1
 800875a:	c608      	stmia	r6!, {r3}
 800875c:	4287      	cmp	r7, r0
 800875e:	dcef      	bgt.n	8008740 <__multadd+0x10>
 8008760:	2d00      	cmp	r5, #0
 8008762:	d022      	beq.n	80087aa <__multadd+0x7a>
 8008764:	68a3      	ldr	r3, [r4, #8]
 8008766:	42bb      	cmp	r3, r7
 8008768:	dc19      	bgt.n	800879e <__multadd+0x6e>
 800876a:	6863      	ldr	r3, [r4, #4]
 800876c:	9801      	ldr	r0, [sp, #4]
 800876e:	1c59      	adds	r1, r3, #1
 8008770:	f7ff ff76 	bl	8008660 <_Balloc>
 8008774:	1e06      	subs	r6, r0, #0
 8008776:	d105      	bne.n	8008784 <__multadd+0x54>
 8008778:	0002      	movs	r2, r0
 800877a:	21b5      	movs	r1, #181	; 0xb5
 800877c:	4b0c      	ldr	r3, [pc, #48]	; (80087b0 <__multadd+0x80>)
 800877e:	480d      	ldr	r0, [pc, #52]	; (80087b4 <__multadd+0x84>)
 8008780:	f000 fdec 	bl	800935c <__assert_func>
 8008784:	0021      	movs	r1, r4
 8008786:	6923      	ldr	r3, [r4, #16]
 8008788:	310c      	adds	r1, #12
 800878a:	1c9a      	adds	r2, r3, #2
 800878c:	0092      	lsls	r2, r2, #2
 800878e:	300c      	adds	r0, #12
 8008790:	f7fe f884 	bl	800689c <memcpy>
 8008794:	0021      	movs	r1, r4
 8008796:	9801      	ldr	r0, [sp, #4]
 8008798:	f7ff ffa6 	bl	80086e8 <_Bfree>
 800879c:	0034      	movs	r4, r6
 800879e:	1d3b      	adds	r3, r7, #4
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	18e3      	adds	r3, r4, r3
 80087a4:	605d      	str	r5, [r3, #4]
 80087a6:	1c7b      	adds	r3, r7, #1
 80087a8:	6123      	str	r3, [r4, #16]
 80087aa:	0020      	movs	r0, r4
 80087ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087ae:	46c0      	nop			; (mov r8, r8)
 80087b0:	0800a00c 	.word	0x0800a00c
 80087b4:	0800a080 	.word	0x0800a080

080087b8 <__hi0bits>:
 80087b8:	0003      	movs	r3, r0
 80087ba:	0c02      	lsrs	r2, r0, #16
 80087bc:	2000      	movs	r0, #0
 80087be:	4282      	cmp	r2, r0
 80087c0:	d101      	bne.n	80087c6 <__hi0bits+0xe>
 80087c2:	041b      	lsls	r3, r3, #16
 80087c4:	3010      	adds	r0, #16
 80087c6:	0e1a      	lsrs	r2, r3, #24
 80087c8:	d101      	bne.n	80087ce <__hi0bits+0x16>
 80087ca:	3008      	adds	r0, #8
 80087cc:	021b      	lsls	r3, r3, #8
 80087ce:	0f1a      	lsrs	r2, r3, #28
 80087d0:	d101      	bne.n	80087d6 <__hi0bits+0x1e>
 80087d2:	3004      	adds	r0, #4
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	0f9a      	lsrs	r2, r3, #30
 80087d8:	d101      	bne.n	80087de <__hi0bits+0x26>
 80087da:	3002      	adds	r0, #2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	db03      	blt.n	80087ea <__hi0bits+0x32>
 80087e2:	3001      	adds	r0, #1
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	d400      	bmi.n	80087ea <__hi0bits+0x32>
 80087e8:	2020      	movs	r0, #32
 80087ea:	4770      	bx	lr

080087ec <__lo0bits>:
 80087ec:	6803      	ldr	r3, [r0, #0]
 80087ee:	0002      	movs	r2, r0
 80087f0:	2107      	movs	r1, #7
 80087f2:	0018      	movs	r0, r3
 80087f4:	4008      	ands	r0, r1
 80087f6:	420b      	tst	r3, r1
 80087f8:	d00d      	beq.n	8008816 <__lo0bits+0x2a>
 80087fa:	3906      	subs	r1, #6
 80087fc:	2000      	movs	r0, #0
 80087fe:	420b      	tst	r3, r1
 8008800:	d105      	bne.n	800880e <__lo0bits+0x22>
 8008802:	3002      	adds	r0, #2
 8008804:	4203      	tst	r3, r0
 8008806:	d003      	beq.n	8008810 <__lo0bits+0x24>
 8008808:	40cb      	lsrs	r3, r1
 800880a:	0008      	movs	r0, r1
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	4770      	bx	lr
 8008810:	089b      	lsrs	r3, r3, #2
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	e7fb      	b.n	800880e <__lo0bits+0x22>
 8008816:	b299      	uxth	r1, r3
 8008818:	2900      	cmp	r1, #0
 800881a:	d101      	bne.n	8008820 <__lo0bits+0x34>
 800881c:	2010      	movs	r0, #16
 800881e:	0c1b      	lsrs	r3, r3, #16
 8008820:	b2d9      	uxtb	r1, r3
 8008822:	2900      	cmp	r1, #0
 8008824:	d101      	bne.n	800882a <__lo0bits+0x3e>
 8008826:	3008      	adds	r0, #8
 8008828:	0a1b      	lsrs	r3, r3, #8
 800882a:	0719      	lsls	r1, r3, #28
 800882c:	d101      	bne.n	8008832 <__lo0bits+0x46>
 800882e:	3004      	adds	r0, #4
 8008830:	091b      	lsrs	r3, r3, #4
 8008832:	0799      	lsls	r1, r3, #30
 8008834:	d101      	bne.n	800883a <__lo0bits+0x4e>
 8008836:	3002      	adds	r0, #2
 8008838:	089b      	lsrs	r3, r3, #2
 800883a:	07d9      	lsls	r1, r3, #31
 800883c:	d4e9      	bmi.n	8008812 <__lo0bits+0x26>
 800883e:	3001      	adds	r0, #1
 8008840:	085b      	lsrs	r3, r3, #1
 8008842:	d1e6      	bne.n	8008812 <__lo0bits+0x26>
 8008844:	2020      	movs	r0, #32
 8008846:	e7e2      	b.n	800880e <__lo0bits+0x22>

08008848 <__i2b>:
 8008848:	b510      	push	{r4, lr}
 800884a:	000c      	movs	r4, r1
 800884c:	2101      	movs	r1, #1
 800884e:	f7ff ff07 	bl	8008660 <_Balloc>
 8008852:	2800      	cmp	r0, #0
 8008854:	d106      	bne.n	8008864 <__i2b+0x1c>
 8008856:	21a0      	movs	r1, #160	; 0xa0
 8008858:	0002      	movs	r2, r0
 800885a:	4b04      	ldr	r3, [pc, #16]	; (800886c <__i2b+0x24>)
 800885c:	4804      	ldr	r0, [pc, #16]	; (8008870 <__i2b+0x28>)
 800885e:	0049      	lsls	r1, r1, #1
 8008860:	f000 fd7c 	bl	800935c <__assert_func>
 8008864:	2301      	movs	r3, #1
 8008866:	6144      	str	r4, [r0, #20]
 8008868:	6103      	str	r3, [r0, #16]
 800886a:	bd10      	pop	{r4, pc}
 800886c:	0800a00c 	.word	0x0800a00c
 8008870:	0800a080 	.word	0x0800a080

08008874 <__multiply>:
 8008874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008876:	690b      	ldr	r3, [r1, #16]
 8008878:	0014      	movs	r4, r2
 800887a:	6912      	ldr	r2, [r2, #16]
 800887c:	000d      	movs	r5, r1
 800887e:	b089      	sub	sp, #36	; 0x24
 8008880:	4293      	cmp	r3, r2
 8008882:	da01      	bge.n	8008888 <__multiply+0x14>
 8008884:	0025      	movs	r5, r4
 8008886:	000c      	movs	r4, r1
 8008888:	692f      	ldr	r7, [r5, #16]
 800888a:	6926      	ldr	r6, [r4, #16]
 800888c:	6869      	ldr	r1, [r5, #4]
 800888e:	19bb      	adds	r3, r7, r6
 8008890:	9302      	str	r3, [sp, #8]
 8008892:	68ab      	ldr	r3, [r5, #8]
 8008894:	19ba      	adds	r2, r7, r6
 8008896:	4293      	cmp	r3, r2
 8008898:	da00      	bge.n	800889c <__multiply+0x28>
 800889a:	3101      	adds	r1, #1
 800889c:	f7ff fee0 	bl	8008660 <_Balloc>
 80088a0:	9001      	str	r0, [sp, #4]
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d106      	bne.n	80088b4 <__multiply+0x40>
 80088a6:	215e      	movs	r1, #94	; 0x5e
 80088a8:	0002      	movs	r2, r0
 80088aa:	4b48      	ldr	r3, [pc, #288]	; (80089cc <__multiply+0x158>)
 80088ac:	4848      	ldr	r0, [pc, #288]	; (80089d0 <__multiply+0x15c>)
 80088ae:	31ff      	adds	r1, #255	; 0xff
 80088b0:	f000 fd54 	bl	800935c <__assert_func>
 80088b4:	9b01      	ldr	r3, [sp, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	3314      	adds	r3, #20
 80088ba:	469c      	mov	ip, r3
 80088bc:	19bb      	adds	r3, r7, r6
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4463      	add	r3, ip
 80088c2:	9303      	str	r3, [sp, #12]
 80088c4:	4663      	mov	r3, ip
 80088c6:	9903      	ldr	r1, [sp, #12]
 80088c8:	428b      	cmp	r3, r1
 80088ca:	d32c      	bcc.n	8008926 <__multiply+0xb2>
 80088cc:	002b      	movs	r3, r5
 80088ce:	0022      	movs	r2, r4
 80088d0:	3314      	adds	r3, #20
 80088d2:	00bf      	lsls	r7, r7, #2
 80088d4:	3214      	adds	r2, #20
 80088d6:	9306      	str	r3, [sp, #24]
 80088d8:	00b6      	lsls	r6, r6, #2
 80088da:	19db      	adds	r3, r3, r7
 80088dc:	9304      	str	r3, [sp, #16]
 80088de:	1993      	adds	r3, r2, r6
 80088e0:	9307      	str	r3, [sp, #28]
 80088e2:	2304      	movs	r3, #4
 80088e4:	9305      	str	r3, [sp, #20]
 80088e6:	002b      	movs	r3, r5
 80088e8:	9904      	ldr	r1, [sp, #16]
 80088ea:	3315      	adds	r3, #21
 80088ec:	9200      	str	r2, [sp, #0]
 80088ee:	4299      	cmp	r1, r3
 80088f0:	d305      	bcc.n	80088fe <__multiply+0x8a>
 80088f2:	1b4b      	subs	r3, r1, r5
 80088f4:	3b15      	subs	r3, #21
 80088f6:	089b      	lsrs	r3, r3, #2
 80088f8:	3301      	adds	r3, #1
 80088fa:	009b      	lsls	r3, r3, #2
 80088fc:	9305      	str	r3, [sp, #20]
 80088fe:	9b07      	ldr	r3, [sp, #28]
 8008900:	9a00      	ldr	r2, [sp, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d311      	bcc.n	800892a <__multiply+0xb6>
 8008906:	9b02      	ldr	r3, [sp, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	dd06      	ble.n	800891a <__multiply+0xa6>
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	3b04      	subs	r3, #4
 8008910:	9303      	str	r3, [sp, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d053      	beq.n	80089c2 <__multiply+0x14e>
 800891a:	9b01      	ldr	r3, [sp, #4]
 800891c:	9a02      	ldr	r2, [sp, #8]
 800891e:	0018      	movs	r0, r3
 8008920:	611a      	str	r2, [r3, #16]
 8008922:	b009      	add	sp, #36	; 0x24
 8008924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008926:	c304      	stmia	r3!, {r2}
 8008928:	e7cd      	b.n	80088c6 <__multiply+0x52>
 800892a:	9b00      	ldr	r3, [sp, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	b298      	uxth	r0, r3
 8008930:	2800      	cmp	r0, #0
 8008932:	d01b      	beq.n	800896c <__multiply+0xf8>
 8008934:	4667      	mov	r7, ip
 8008936:	2400      	movs	r4, #0
 8008938:	9e06      	ldr	r6, [sp, #24]
 800893a:	ce02      	ldmia	r6!, {r1}
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	b28b      	uxth	r3, r1
 8008940:	4343      	muls	r3, r0
 8008942:	b292      	uxth	r2, r2
 8008944:	189b      	adds	r3, r3, r2
 8008946:	191b      	adds	r3, r3, r4
 8008948:	0c0c      	lsrs	r4, r1, #16
 800894a:	4344      	muls	r4, r0
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	0c11      	lsrs	r1, r2, #16
 8008950:	1861      	adds	r1, r4, r1
 8008952:	0c1c      	lsrs	r4, r3, #16
 8008954:	1909      	adds	r1, r1, r4
 8008956:	0c0c      	lsrs	r4, r1, #16
 8008958:	b29b      	uxth	r3, r3
 800895a:	0409      	lsls	r1, r1, #16
 800895c:	430b      	orrs	r3, r1
 800895e:	c708      	stmia	r7!, {r3}
 8008960:	9b04      	ldr	r3, [sp, #16]
 8008962:	42b3      	cmp	r3, r6
 8008964:	d8e9      	bhi.n	800893a <__multiply+0xc6>
 8008966:	4663      	mov	r3, ip
 8008968:	9a05      	ldr	r2, [sp, #20]
 800896a:	509c      	str	r4, [r3, r2]
 800896c:	9b00      	ldr	r3, [sp, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	0c1e      	lsrs	r6, r3, #16
 8008972:	d020      	beq.n	80089b6 <__multiply+0x142>
 8008974:	4663      	mov	r3, ip
 8008976:	002c      	movs	r4, r5
 8008978:	4660      	mov	r0, ip
 800897a:	2700      	movs	r7, #0
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3414      	adds	r4, #20
 8008980:	6822      	ldr	r2, [r4, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	b291      	uxth	r1, r2
 8008986:	4371      	muls	r1, r6
 8008988:	6802      	ldr	r2, [r0, #0]
 800898a:	0c12      	lsrs	r2, r2, #16
 800898c:	1889      	adds	r1, r1, r2
 800898e:	19cf      	adds	r7, r1, r7
 8008990:	0439      	lsls	r1, r7, #16
 8008992:	430b      	orrs	r3, r1
 8008994:	6003      	str	r3, [r0, #0]
 8008996:	cc02      	ldmia	r4!, {r1}
 8008998:	6843      	ldr	r3, [r0, #4]
 800899a:	0c09      	lsrs	r1, r1, #16
 800899c:	4371      	muls	r1, r6
 800899e:	b29b      	uxth	r3, r3
 80089a0:	0c3f      	lsrs	r7, r7, #16
 80089a2:	18cb      	adds	r3, r1, r3
 80089a4:	9a04      	ldr	r2, [sp, #16]
 80089a6:	19db      	adds	r3, r3, r7
 80089a8:	0c1f      	lsrs	r7, r3, #16
 80089aa:	3004      	adds	r0, #4
 80089ac:	42a2      	cmp	r2, r4
 80089ae:	d8e7      	bhi.n	8008980 <__multiply+0x10c>
 80089b0:	4662      	mov	r2, ip
 80089b2:	9905      	ldr	r1, [sp, #20]
 80089b4:	5053      	str	r3, [r2, r1]
 80089b6:	9b00      	ldr	r3, [sp, #0]
 80089b8:	3304      	adds	r3, #4
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	2304      	movs	r3, #4
 80089be:	449c      	add	ip, r3
 80089c0:	e79d      	b.n	80088fe <__multiply+0x8a>
 80089c2:	9b02      	ldr	r3, [sp, #8]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	9302      	str	r3, [sp, #8]
 80089c8:	e79d      	b.n	8008906 <__multiply+0x92>
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	0800a00c 	.word	0x0800a00c
 80089d0:	0800a080 	.word	0x0800a080

080089d4 <__pow5mult>:
 80089d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089d6:	2303      	movs	r3, #3
 80089d8:	0015      	movs	r5, r2
 80089da:	0007      	movs	r7, r0
 80089dc:	000e      	movs	r6, r1
 80089de:	401a      	ands	r2, r3
 80089e0:	421d      	tst	r5, r3
 80089e2:	d008      	beq.n	80089f6 <__pow5mult+0x22>
 80089e4:	4925      	ldr	r1, [pc, #148]	; (8008a7c <__pow5mult+0xa8>)
 80089e6:	3a01      	subs	r2, #1
 80089e8:	0092      	lsls	r2, r2, #2
 80089ea:	5852      	ldr	r2, [r2, r1]
 80089ec:	2300      	movs	r3, #0
 80089ee:	0031      	movs	r1, r6
 80089f0:	f7ff fe9e 	bl	8008730 <__multadd>
 80089f4:	0006      	movs	r6, r0
 80089f6:	10ad      	asrs	r5, r5, #2
 80089f8:	d03d      	beq.n	8008a76 <__pow5mult+0xa2>
 80089fa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80089fc:	2c00      	cmp	r4, #0
 80089fe:	d10f      	bne.n	8008a20 <__pow5mult+0x4c>
 8008a00:	2010      	movs	r0, #16
 8008a02:	f7ff fe17 	bl	8008634 <malloc>
 8008a06:	1e02      	subs	r2, r0, #0
 8008a08:	6278      	str	r0, [r7, #36]	; 0x24
 8008a0a:	d105      	bne.n	8008a18 <__pow5mult+0x44>
 8008a0c:	21d7      	movs	r1, #215	; 0xd7
 8008a0e:	4b1c      	ldr	r3, [pc, #112]	; (8008a80 <__pow5mult+0xac>)
 8008a10:	481c      	ldr	r0, [pc, #112]	; (8008a84 <__pow5mult+0xb0>)
 8008a12:	0049      	lsls	r1, r1, #1
 8008a14:	f000 fca2 	bl	800935c <__assert_func>
 8008a18:	6044      	str	r4, [r0, #4]
 8008a1a:	6084      	str	r4, [r0, #8]
 8008a1c:	6004      	str	r4, [r0, #0]
 8008a1e:	60c4      	str	r4, [r0, #12]
 8008a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a22:	689c      	ldr	r4, [r3, #8]
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	2c00      	cmp	r4, #0
 8008a28:	d108      	bne.n	8008a3c <__pow5mult+0x68>
 8008a2a:	0038      	movs	r0, r7
 8008a2c:	4916      	ldr	r1, [pc, #88]	; (8008a88 <__pow5mult+0xb4>)
 8008a2e:	f7ff ff0b 	bl	8008848 <__i2b>
 8008a32:	9b01      	ldr	r3, [sp, #4]
 8008a34:	0004      	movs	r4, r0
 8008a36:	6098      	str	r0, [r3, #8]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	6003      	str	r3, [r0, #0]
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	421d      	tst	r5, r3
 8008a40:	d00a      	beq.n	8008a58 <__pow5mult+0x84>
 8008a42:	0031      	movs	r1, r6
 8008a44:	0022      	movs	r2, r4
 8008a46:	0038      	movs	r0, r7
 8008a48:	f7ff ff14 	bl	8008874 <__multiply>
 8008a4c:	0031      	movs	r1, r6
 8008a4e:	9001      	str	r0, [sp, #4]
 8008a50:	0038      	movs	r0, r7
 8008a52:	f7ff fe49 	bl	80086e8 <_Bfree>
 8008a56:	9e01      	ldr	r6, [sp, #4]
 8008a58:	106d      	asrs	r5, r5, #1
 8008a5a:	d00c      	beq.n	8008a76 <__pow5mult+0xa2>
 8008a5c:	6820      	ldr	r0, [r4, #0]
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d107      	bne.n	8008a72 <__pow5mult+0x9e>
 8008a62:	0022      	movs	r2, r4
 8008a64:	0021      	movs	r1, r4
 8008a66:	0038      	movs	r0, r7
 8008a68:	f7ff ff04 	bl	8008874 <__multiply>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	6020      	str	r0, [r4, #0]
 8008a70:	6003      	str	r3, [r0, #0]
 8008a72:	0004      	movs	r4, r0
 8008a74:	e7e2      	b.n	8008a3c <__pow5mult+0x68>
 8008a76:	0030      	movs	r0, r6
 8008a78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a7a:	46c0      	nop			; (mov r8, r8)
 8008a7c:	0800a1d0 	.word	0x0800a1d0
 8008a80:	08009f9a 	.word	0x08009f9a
 8008a84:	0800a080 	.word	0x0800a080
 8008a88:	00000271 	.word	0x00000271

08008a8c <__lshift>:
 8008a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a8e:	000c      	movs	r4, r1
 8008a90:	0017      	movs	r7, r2
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	1155      	asrs	r5, r2, #5
 8008a96:	b087      	sub	sp, #28
 8008a98:	18eb      	adds	r3, r5, r3
 8008a9a:	9302      	str	r3, [sp, #8]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	9301      	str	r3, [sp, #4]
 8008aa0:	6849      	ldr	r1, [r1, #4]
 8008aa2:	68a3      	ldr	r3, [r4, #8]
 8008aa4:	9004      	str	r0, [sp, #16]
 8008aa6:	9a01      	ldr	r2, [sp, #4]
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	db10      	blt.n	8008ace <__lshift+0x42>
 8008aac:	9804      	ldr	r0, [sp, #16]
 8008aae:	f7ff fdd7 	bl	8008660 <_Balloc>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	0002      	movs	r2, r0
 8008ab6:	0006      	movs	r6, r0
 8008ab8:	0019      	movs	r1, r3
 8008aba:	3214      	adds	r2, #20
 8008abc:	4298      	cmp	r0, r3
 8008abe:	d10c      	bne.n	8008ada <__lshift+0x4e>
 8008ac0:	21da      	movs	r1, #218	; 0xda
 8008ac2:	0002      	movs	r2, r0
 8008ac4:	4b26      	ldr	r3, [pc, #152]	; (8008b60 <__lshift+0xd4>)
 8008ac6:	4827      	ldr	r0, [pc, #156]	; (8008b64 <__lshift+0xd8>)
 8008ac8:	31ff      	adds	r1, #255	; 0xff
 8008aca:	f000 fc47 	bl	800935c <__assert_func>
 8008ace:	3101      	adds	r1, #1
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	e7e8      	b.n	8008aa6 <__lshift+0x1a>
 8008ad4:	0098      	lsls	r0, r3, #2
 8008ad6:	5011      	str	r1, [r2, r0]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	42ab      	cmp	r3, r5
 8008adc:	dbfa      	blt.n	8008ad4 <__lshift+0x48>
 8008ade:	43eb      	mvns	r3, r5
 8008ae0:	17db      	asrs	r3, r3, #31
 8008ae2:	401d      	ands	r5, r3
 8008ae4:	211f      	movs	r1, #31
 8008ae6:	0023      	movs	r3, r4
 8008ae8:	0038      	movs	r0, r7
 8008aea:	00ad      	lsls	r5, r5, #2
 8008aec:	1955      	adds	r5, r2, r5
 8008aee:	6922      	ldr	r2, [r4, #16]
 8008af0:	3314      	adds	r3, #20
 8008af2:	0092      	lsls	r2, r2, #2
 8008af4:	4008      	ands	r0, r1
 8008af6:	4684      	mov	ip, r0
 8008af8:	189a      	adds	r2, r3, r2
 8008afa:	420f      	tst	r7, r1
 8008afc:	d02a      	beq.n	8008b54 <__lshift+0xc8>
 8008afe:	3101      	adds	r1, #1
 8008b00:	1a09      	subs	r1, r1, r0
 8008b02:	9105      	str	r1, [sp, #20]
 8008b04:	2100      	movs	r1, #0
 8008b06:	9503      	str	r5, [sp, #12]
 8008b08:	4667      	mov	r7, ip
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	40b8      	lsls	r0, r7
 8008b0e:	4301      	orrs	r1, r0
 8008b10:	9803      	ldr	r0, [sp, #12]
 8008b12:	c002      	stmia	r0!, {r1}
 8008b14:	cb02      	ldmia	r3!, {r1}
 8008b16:	9003      	str	r0, [sp, #12]
 8008b18:	9805      	ldr	r0, [sp, #20]
 8008b1a:	40c1      	lsrs	r1, r0
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d8f3      	bhi.n	8008b08 <__lshift+0x7c>
 8008b20:	0020      	movs	r0, r4
 8008b22:	3015      	adds	r0, #21
 8008b24:	2304      	movs	r3, #4
 8008b26:	4282      	cmp	r2, r0
 8008b28:	d304      	bcc.n	8008b34 <__lshift+0xa8>
 8008b2a:	1b13      	subs	r3, r2, r4
 8008b2c:	3b15      	subs	r3, #21
 8008b2e:	089b      	lsrs	r3, r3, #2
 8008b30:	3301      	adds	r3, #1
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	50e9      	str	r1, [r5, r3]
 8008b36:	2900      	cmp	r1, #0
 8008b38:	d002      	beq.n	8008b40 <__lshift+0xb4>
 8008b3a:	9b02      	ldr	r3, [sp, #8]
 8008b3c:	3302      	adds	r3, #2
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	9b01      	ldr	r3, [sp, #4]
 8008b42:	9804      	ldr	r0, [sp, #16]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	0021      	movs	r1, r4
 8008b48:	6133      	str	r3, [r6, #16]
 8008b4a:	f7ff fdcd 	bl	80086e8 <_Bfree>
 8008b4e:	0030      	movs	r0, r6
 8008b50:	b007      	add	sp, #28
 8008b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b54:	cb02      	ldmia	r3!, {r1}
 8008b56:	c502      	stmia	r5!, {r1}
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d8fb      	bhi.n	8008b54 <__lshift+0xc8>
 8008b5c:	e7f0      	b.n	8008b40 <__lshift+0xb4>
 8008b5e:	46c0      	nop			; (mov r8, r8)
 8008b60:	0800a00c 	.word	0x0800a00c
 8008b64:	0800a080 	.word	0x0800a080

08008b68 <__mcmp>:
 8008b68:	6902      	ldr	r2, [r0, #16]
 8008b6a:	690b      	ldr	r3, [r1, #16]
 8008b6c:	b530      	push	{r4, r5, lr}
 8008b6e:	0004      	movs	r4, r0
 8008b70:	1ad0      	subs	r0, r2, r3
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d10d      	bne.n	8008b92 <__mcmp+0x2a>
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	3414      	adds	r4, #20
 8008b7a:	3114      	adds	r1, #20
 8008b7c:	18e2      	adds	r2, r4, r3
 8008b7e:	18c9      	adds	r1, r1, r3
 8008b80:	3a04      	subs	r2, #4
 8008b82:	3904      	subs	r1, #4
 8008b84:	6815      	ldr	r5, [r2, #0]
 8008b86:	680b      	ldr	r3, [r1, #0]
 8008b88:	429d      	cmp	r5, r3
 8008b8a:	d003      	beq.n	8008b94 <__mcmp+0x2c>
 8008b8c:	2001      	movs	r0, #1
 8008b8e:	429d      	cmp	r5, r3
 8008b90:	d303      	bcc.n	8008b9a <__mcmp+0x32>
 8008b92:	bd30      	pop	{r4, r5, pc}
 8008b94:	4294      	cmp	r4, r2
 8008b96:	d3f3      	bcc.n	8008b80 <__mcmp+0x18>
 8008b98:	e7fb      	b.n	8008b92 <__mcmp+0x2a>
 8008b9a:	4240      	negs	r0, r0
 8008b9c:	e7f9      	b.n	8008b92 <__mcmp+0x2a>
	...

08008ba0 <__mdiff>:
 8008ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ba2:	000e      	movs	r6, r1
 8008ba4:	0007      	movs	r7, r0
 8008ba6:	0011      	movs	r1, r2
 8008ba8:	0030      	movs	r0, r6
 8008baa:	b087      	sub	sp, #28
 8008bac:	0014      	movs	r4, r2
 8008bae:	f7ff ffdb 	bl	8008b68 <__mcmp>
 8008bb2:	1e05      	subs	r5, r0, #0
 8008bb4:	d110      	bne.n	8008bd8 <__mdiff+0x38>
 8008bb6:	0001      	movs	r1, r0
 8008bb8:	0038      	movs	r0, r7
 8008bba:	f7ff fd51 	bl	8008660 <_Balloc>
 8008bbe:	1e02      	subs	r2, r0, #0
 8008bc0:	d104      	bne.n	8008bcc <__mdiff+0x2c>
 8008bc2:	4b40      	ldr	r3, [pc, #256]	; (8008cc4 <__mdiff+0x124>)
 8008bc4:	4940      	ldr	r1, [pc, #256]	; (8008cc8 <__mdiff+0x128>)
 8008bc6:	4841      	ldr	r0, [pc, #260]	; (8008ccc <__mdiff+0x12c>)
 8008bc8:	f000 fbc8 	bl	800935c <__assert_func>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	6145      	str	r5, [r0, #20]
 8008bd0:	6103      	str	r3, [r0, #16]
 8008bd2:	0010      	movs	r0, r2
 8008bd4:	b007      	add	sp, #28
 8008bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bd8:	2301      	movs	r3, #1
 8008bda:	9301      	str	r3, [sp, #4]
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	db04      	blt.n	8008bea <__mdiff+0x4a>
 8008be0:	0023      	movs	r3, r4
 8008be2:	0034      	movs	r4, r6
 8008be4:	001e      	movs	r6, r3
 8008be6:	2300      	movs	r3, #0
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	0038      	movs	r0, r7
 8008bec:	6861      	ldr	r1, [r4, #4]
 8008bee:	f7ff fd37 	bl	8008660 <_Balloc>
 8008bf2:	1e02      	subs	r2, r0, #0
 8008bf4:	d103      	bne.n	8008bfe <__mdiff+0x5e>
 8008bf6:	2190      	movs	r1, #144	; 0x90
 8008bf8:	4b32      	ldr	r3, [pc, #200]	; (8008cc4 <__mdiff+0x124>)
 8008bfa:	0089      	lsls	r1, r1, #2
 8008bfc:	e7e3      	b.n	8008bc6 <__mdiff+0x26>
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	2700      	movs	r7, #0
 8008c02:	60c3      	str	r3, [r0, #12]
 8008c04:	6920      	ldr	r0, [r4, #16]
 8008c06:	3414      	adds	r4, #20
 8008c08:	9401      	str	r4, [sp, #4]
 8008c0a:	9b01      	ldr	r3, [sp, #4]
 8008c0c:	0084      	lsls	r4, r0, #2
 8008c0e:	191b      	adds	r3, r3, r4
 8008c10:	0034      	movs	r4, r6
 8008c12:	9302      	str	r3, [sp, #8]
 8008c14:	6933      	ldr	r3, [r6, #16]
 8008c16:	3414      	adds	r4, #20
 8008c18:	0099      	lsls	r1, r3, #2
 8008c1a:	1863      	adds	r3, r4, r1
 8008c1c:	9303      	str	r3, [sp, #12]
 8008c1e:	0013      	movs	r3, r2
 8008c20:	3314      	adds	r3, #20
 8008c22:	469c      	mov	ip, r3
 8008c24:	9305      	str	r3, [sp, #20]
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	9304      	str	r3, [sp, #16]
 8008c2a:	9b04      	ldr	r3, [sp, #16]
 8008c2c:	cc02      	ldmia	r4!, {r1}
 8008c2e:	cb20      	ldmia	r3!, {r5}
 8008c30:	9304      	str	r3, [sp, #16]
 8008c32:	b2ab      	uxth	r3, r5
 8008c34:	19df      	adds	r7, r3, r7
 8008c36:	b28b      	uxth	r3, r1
 8008c38:	1afb      	subs	r3, r7, r3
 8008c3a:	0c09      	lsrs	r1, r1, #16
 8008c3c:	0c2d      	lsrs	r5, r5, #16
 8008c3e:	1a6d      	subs	r5, r5, r1
 8008c40:	1419      	asrs	r1, r3, #16
 8008c42:	186d      	adds	r5, r5, r1
 8008c44:	4661      	mov	r1, ip
 8008c46:	142f      	asrs	r7, r5, #16
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	042d      	lsls	r5, r5, #16
 8008c4c:	432b      	orrs	r3, r5
 8008c4e:	c108      	stmia	r1!, {r3}
 8008c50:	9b03      	ldr	r3, [sp, #12]
 8008c52:	468c      	mov	ip, r1
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d8e8      	bhi.n	8008c2a <__mdiff+0x8a>
 8008c58:	0031      	movs	r1, r6
 8008c5a:	9c03      	ldr	r4, [sp, #12]
 8008c5c:	3115      	adds	r1, #21
 8008c5e:	2304      	movs	r3, #4
 8008c60:	428c      	cmp	r4, r1
 8008c62:	d304      	bcc.n	8008c6e <__mdiff+0xce>
 8008c64:	1ba3      	subs	r3, r4, r6
 8008c66:	3b15      	subs	r3, #21
 8008c68:	089b      	lsrs	r3, r3, #2
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	9901      	ldr	r1, [sp, #4]
 8008c70:	18cc      	adds	r4, r1, r3
 8008c72:	9905      	ldr	r1, [sp, #20]
 8008c74:	0026      	movs	r6, r4
 8008c76:	18cb      	adds	r3, r1, r3
 8008c78:	469c      	mov	ip, r3
 8008c7a:	9902      	ldr	r1, [sp, #8]
 8008c7c:	428e      	cmp	r6, r1
 8008c7e:	d310      	bcc.n	8008ca2 <__mdiff+0x102>
 8008c80:	9e02      	ldr	r6, [sp, #8]
 8008c82:	1ee1      	subs	r1, r4, #3
 8008c84:	2500      	movs	r5, #0
 8008c86:	428e      	cmp	r6, r1
 8008c88:	d304      	bcc.n	8008c94 <__mdiff+0xf4>
 8008c8a:	0031      	movs	r1, r6
 8008c8c:	3103      	adds	r1, #3
 8008c8e:	1b0c      	subs	r4, r1, r4
 8008c90:	08a4      	lsrs	r4, r4, #2
 8008c92:	00a5      	lsls	r5, r4, #2
 8008c94:	195b      	adds	r3, r3, r5
 8008c96:	3b04      	subs	r3, #4
 8008c98:	6819      	ldr	r1, [r3, #0]
 8008c9a:	2900      	cmp	r1, #0
 8008c9c:	d00f      	beq.n	8008cbe <__mdiff+0x11e>
 8008c9e:	6110      	str	r0, [r2, #16]
 8008ca0:	e797      	b.n	8008bd2 <__mdiff+0x32>
 8008ca2:	ce02      	ldmia	r6!, {r1}
 8008ca4:	b28d      	uxth	r5, r1
 8008ca6:	19ed      	adds	r5, r5, r7
 8008ca8:	0c0f      	lsrs	r7, r1, #16
 8008caa:	1429      	asrs	r1, r5, #16
 8008cac:	1879      	adds	r1, r7, r1
 8008cae:	140f      	asrs	r7, r1, #16
 8008cb0:	b2ad      	uxth	r5, r5
 8008cb2:	0409      	lsls	r1, r1, #16
 8008cb4:	430d      	orrs	r5, r1
 8008cb6:	4661      	mov	r1, ip
 8008cb8:	c120      	stmia	r1!, {r5}
 8008cba:	468c      	mov	ip, r1
 8008cbc:	e7dd      	b.n	8008c7a <__mdiff+0xda>
 8008cbe:	3801      	subs	r0, #1
 8008cc0:	e7e9      	b.n	8008c96 <__mdiff+0xf6>
 8008cc2:	46c0      	nop			; (mov r8, r8)
 8008cc4:	0800a00c 	.word	0x0800a00c
 8008cc8:	00000232 	.word	0x00000232
 8008ccc:	0800a080 	.word	0x0800a080

08008cd0 <__d2b>:
 8008cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	0014      	movs	r4, r2
 8008cd6:	001e      	movs	r6, r3
 8008cd8:	9f08      	ldr	r7, [sp, #32]
 8008cda:	f7ff fcc1 	bl	8008660 <_Balloc>
 8008cde:	1e05      	subs	r5, r0, #0
 8008ce0:	d105      	bne.n	8008cee <__d2b+0x1e>
 8008ce2:	0002      	movs	r2, r0
 8008ce4:	4b26      	ldr	r3, [pc, #152]	; (8008d80 <__d2b+0xb0>)
 8008ce6:	4927      	ldr	r1, [pc, #156]	; (8008d84 <__d2b+0xb4>)
 8008ce8:	4827      	ldr	r0, [pc, #156]	; (8008d88 <__d2b+0xb8>)
 8008cea:	f000 fb37 	bl	800935c <__assert_func>
 8008cee:	0333      	lsls	r3, r6, #12
 8008cf0:	0076      	lsls	r6, r6, #1
 8008cf2:	0b1b      	lsrs	r3, r3, #12
 8008cf4:	0d76      	lsrs	r6, r6, #21
 8008cf6:	d124      	bne.n	8008d42 <__d2b+0x72>
 8008cf8:	9301      	str	r3, [sp, #4]
 8008cfa:	2c00      	cmp	r4, #0
 8008cfc:	d027      	beq.n	8008d4e <__d2b+0x7e>
 8008cfe:	4668      	mov	r0, sp
 8008d00:	9400      	str	r4, [sp, #0]
 8008d02:	f7ff fd73 	bl	80087ec <__lo0bits>
 8008d06:	9c00      	ldr	r4, [sp, #0]
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d01e      	beq.n	8008d4a <__d2b+0x7a>
 8008d0c:	9b01      	ldr	r3, [sp, #4]
 8008d0e:	2120      	movs	r1, #32
 8008d10:	001a      	movs	r2, r3
 8008d12:	1a09      	subs	r1, r1, r0
 8008d14:	408a      	lsls	r2, r1
 8008d16:	40c3      	lsrs	r3, r0
 8008d18:	4322      	orrs	r2, r4
 8008d1a:	616a      	str	r2, [r5, #20]
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	9c01      	ldr	r4, [sp, #4]
 8008d20:	61ac      	str	r4, [r5, #24]
 8008d22:	1e63      	subs	r3, r4, #1
 8008d24:	419c      	sbcs	r4, r3
 8008d26:	3401      	adds	r4, #1
 8008d28:	612c      	str	r4, [r5, #16]
 8008d2a:	2e00      	cmp	r6, #0
 8008d2c:	d018      	beq.n	8008d60 <__d2b+0x90>
 8008d2e:	4b17      	ldr	r3, [pc, #92]	; (8008d8c <__d2b+0xbc>)
 8008d30:	18f6      	adds	r6, r6, r3
 8008d32:	2335      	movs	r3, #53	; 0x35
 8008d34:	1836      	adds	r6, r6, r0
 8008d36:	1a18      	subs	r0, r3, r0
 8008d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3a:	603e      	str	r6, [r7, #0]
 8008d3c:	6018      	str	r0, [r3, #0]
 8008d3e:	0028      	movs	r0, r5
 8008d40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d42:	2280      	movs	r2, #128	; 0x80
 8008d44:	0352      	lsls	r2, r2, #13
 8008d46:	4313      	orrs	r3, r2
 8008d48:	e7d6      	b.n	8008cf8 <__d2b+0x28>
 8008d4a:	616c      	str	r4, [r5, #20]
 8008d4c:	e7e7      	b.n	8008d1e <__d2b+0x4e>
 8008d4e:	a801      	add	r0, sp, #4
 8008d50:	f7ff fd4c 	bl	80087ec <__lo0bits>
 8008d54:	2401      	movs	r4, #1
 8008d56:	9b01      	ldr	r3, [sp, #4]
 8008d58:	612c      	str	r4, [r5, #16]
 8008d5a:	616b      	str	r3, [r5, #20]
 8008d5c:	3020      	adds	r0, #32
 8008d5e:	e7e4      	b.n	8008d2a <__d2b+0x5a>
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <__d2b+0xc0>)
 8008d62:	18c0      	adds	r0, r0, r3
 8008d64:	4b0b      	ldr	r3, [pc, #44]	; (8008d94 <__d2b+0xc4>)
 8008d66:	6038      	str	r0, [r7, #0]
 8008d68:	18e3      	adds	r3, r4, r3
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	18eb      	adds	r3, r5, r3
 8008d6e:	6958      	ldr	r0, [r3, #20]
 8008d70:	f7ff fd22 	bl	80087b8 <__hi0bits>
 8008d74:	0164      	lsls	r4, r4, #5
 8008d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d78:	1a24      	subs	r4, r4, r0
 8008d7a:	601c      	str	r4, [r3, #0]
 8008d7c:	e7df      	b.n	8008d3e <__d2b+0x6e>
 8008d7e:	46c0      	nop			; (mov r8, r8)
 8008d80:	0800a00c 	.word	0x0800a00c
 8008d84:	0000030a 	.word	0x0000030a
 8008d88:	0800a080 	.word	0x0800a080
 8008d8c:	fffffbcd 	.word	0xfffffbcd
 8008d90:	fffffbce 	.word	0xfffffbce
 8008d94:	3fffffff 	.word	0x3fffffff

08008d98 <_calloc_r>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	0c13      	lsrs	r3, r2, #16
 8008d9c:	0c0d      	lsrs	r5, r1, #16
 8008d9e:	d11e      	bne.n	8008dde <_calloc_r+0x46>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10c      	bne.n	8008dbe <_calloc_r+0x26>
 8008da4:	b289      	uxth	r1, r1
 8008da6:	b294      	uxth	r4, r2
 8008da8:	434c      	muls	r4, r1
 8008daa:	0021      	movs	r1, r4
 8008dac:	f000 f88c 	bl	8008ec8 <_malloc_r>
 8008db0:	1e05      	subs	r5, r0, #0
 8008db2:	d01b      	beq.n	8008dec <_calloc_r+0x54>
 8008db4:	0022      	movs	r2, r4
 8008db6:	2100      	movs	r1, #0
 8008db8:	f7fd fd79 	bl	80068ae <memset>
 8008dbc:	e016      	b.n	8008dec <_calloc_r+0x54>
 8008dbe:	1c1d      	adds	r5, r3, #0
 8008dc0:	1c0b      	adds	r3, r1, #0
 8008dc2:	b292      	uxth	r2, r2
 8008dc4:	b289      	uxth	r1, r1
 8008dc6:	b29c      	uxth	r4, r3
 8008dc8:	4351      	muls	r1, r2
 8008dca:	b2ab      	uxth	r3, r5
 8008dcc:	4363      	muls	r3, r4
 8008dce:	0c0c      	lsrs	r4, r1, #16
 8008dd0:	191c      	adds	r4, r3, r4
 8008dd2:	0c22      	lsrs	r2, r4, #16
 8008dd4:	d107      	bne.n	8008de6 <_calloc_r+0x4e>
 8008dd6:	0424      	lsls	r4, r4, #16
 8008dd8:	b289      	uxth	r1, r1
 8008dda:	430c      	orrs	r4, r1
 8008ddc:	e7e5      	b.n	8008daa <_calloc_r+0x12>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <_calloc_r+0x4e>
 8008de2:	1c13      	adds	r3, r2, #0
 8008de4:	e7ed      	b.n	8008dc2 <_calloc_r+0x2a>
 8008de6:	230c      	movs	r3, #12
 8008de8:	2500      	movs	r5, #0
 8008dea:	6003      	str	r3, [r0, #0]
 8008dec:	0028      	movs	r0, r5
 8008dee:	bd70      	pop	{r4, r5, r6, pc}

08008df0 <_free_r>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	0005      	movs	r5, r0
 8008df4:	2900      	cmp	r1, #0
 8008df6:	d010      	beq.n	8008e1a <_free_r+0x2a>
 8008df8:	1f0c      	subs	r4, r1, #4
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	da00      	bge.n	8008e02 <_free_r+0x12>
 8008e00:	18e4      	adds	r4, r4, r3
 8008e02:	0028      	movs	r0, r5
 8008e04:	f000 fb34 	bl	8009470 <__malloc_lock>
 8008e08:	4a1d      	ldr	r2, [pc, #116]	; (8008e80 <_free_r+0x90>)
 8008e0a:	6813      	ldr	r3, [r2, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d105      	bne.n	8008e1c <_free_r+0x2c>
 8008e10:	6063      	str	r3, [r4, #4]
 8008e12:	6014      	str	r4, [r2, #0]
 8008e14:	0028      	movs	r0, r5
 8008e16:	f000 fb33 	bl	8009480 <__malloc_unlock>
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	d908      	bls.n	8008e32 <_free_r+0x42>
 8008e20:	6821      	ldr	r1, [r4, #0]
 8008e22:	1860      	adds	r0, r4, r1
 8008e24:	4283      	cmp	r3, r0
 8008e26:	d1f3      	bne.n	8008e10 <_free_r+0x20>
 8008e28:	6818      	ldr	r0, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	1841      	adds	r1, r0, r1
 8008e2e:	6021      	str	r1, [r4, #0]
 8008e30:	e7ee      	b.n	8008e10 <_free_r+0x20>
 8008e32:	001a      	movs	r2, r3
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <_free_r+0x4e>
 8008e3a:	42a3      	cmp	r3, r4
 8008e3c:	d9f9      	bls.n	8008e32 <_free_r+0x42>
 8008e3e:	6811      	ldr	r1, [r2, #0]
 8008e40:	1850      	adds	r0, r2, r1
 8008e42:	42a0      	cmp	r0, r4
 8008e44:	d10b      	bne.n	8008e5e <_free_r+0x6e>
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	1809      	adds	r1, r1, r0
 8008e4a:	1850      	adds	r0, r2, r1
 8008e4c:	6011      	str	r1, [r2, #0]
 8008e4e:	4283      	cmp	r3, r0
 8008e50:	d1e0      	bne.n	8008e14 <_free_r+0x24>
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	1841      	adds	r1, r0, r1
 8008e58:	6011      	str	r1, [r2, #0]
 8008e5a:	6053      	str	r3, [r2, #4]
 8008e5c:	e7da      	b.n	8008e14 <_free_r+0x24>
 8008e5e:	42a0      	cmp	r0, r4
 8008e60:	d902      	bls.n	8008e68 <_free_r+0x78>
 8008e62:	230c      	movs	r3, #12
 8008e64:	602b      	str	r3, [r5, #0]
 8008e66:	e7d5      	b.n	8008e14 <_free_r+0x24>
 8008e68:	6821      	ldr	r1, [r4, #0]
 8008e6a:	1860      	adds	r0, r4, r1
 8008e6c:	4283      	cmp	r3, r0
 8008e6e:	d103      	bne.n	8008e78 <_free_r+0x88>
 8008e70:	6818      	ldr	r0, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	1841      	adds	r1, r0, r1
 8008e76:	6021      	str	r1, [r4, #0]
 8008e78:	6063      	str	r3, [r4, #4]
 8008e7a:	6054      	str	r4, [r2, #4]
 8008e7c:	e7ca      	b.n	8008e14 <_free_r+0x24>
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	20000654 	.word	0x20000654

08008e84 <sbrk_aligned>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	4e0f      	ldr	r6, [pc, #60]	; (8008ec4 <sbrk_aligned+0x40>)
 8008e88:	000d      	movs	r5, r1
 8008e8a:	6831      	ldr	r1, [r6, #0]
 8008e8c:	0004      	movs	r4, r0
 8008e8e:	2900      	cmp	r1, #0
 8008e90:	d102      	bne.n	8008e98 <sbrk_aligned+0x14>
 8008e92:	f000 f9f1 	bl	8009278 <_sbrk_r>
 8008e96:	6030      	str	r0, [r6, #0]
 8008e98:	0029      	movs	r1, r5
 8008e9a:	0020      	movs	r0, r4
 8008e9c:	f000 f9ec 	bl	8009278 <_sbrk_r>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d00a      	beq.n	8008eba <sbrk_aligned+0x36>
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	1cc5      	adds	r5, r0, #3
 8008ea8:	439d      	bics	r5, r3
 8008eaa:	42a8      	cmp	r0, r5
 8008eac:	d007      	beq.n	8008ebe <sbrk_aligned+0x3a>
 8008eae:	1a29      	subs	r1, r5, r0
 8008eb0:	0020      	movs	r0, r4
 8008eb2:	f000 f9e1 	bl	8009278 <_sbrk_r>
 8008eb6:	1c43      	adds	r3, r0, #1
 8008eb8:	d101      	bne.n	8008ebe <sbrk_aligned+0x3a>
 8008eba:	2501      	movs	r5, #1
 8008ebc:	426d      	negs	r5, r5
 8008ebe:	0028      	movs	r0, r5
 8008ec0:	bd70      	pop	{r4, r5, r6, pc}
 8008ec2:	46c0      	nop			; (mov r8, r8)
 8008ec4:	20000658 	.word	0x20000658

08008ec8 <_malloc_r>:
 8008ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eca:	2203      	movs	r2, #3
 8008ecc:	1ccb      	adds	r3, r1, #3
 8008ece:	4393      	bics	r3, r2
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	0006      	movs	r6, r0
 8008ed4:	001f      	movs	r7, r3
 8008ed6:	2b0c      	cmp	r3, #12
 8008ed8:	d232      	bcs.n	8008f40 <_malloc_r+0x78>
 8008eda:	270c      	movs	r7, #12
 8008edc:	42b9      	cmp	r1, r7
 8008ede:	d831      	bhi.n	8008f44 <_malloc_r+0x7c>
 8008ee0:	0030      	movs	r0, r6
 8008ee2:	f000 fac5 	bl	8009470 <__malloc_lock>
 8008ee6:	4d32      	ldr	r5, [pc, #200]	; (8008fb0 <_malloc_r+0xe8>)
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	001c      	movs	r4, r3
 8008eec:	2c00      	cmp	r4, #0
 8008eee:	d12e      	bne.n	8008f4e <_malloc_r+0x86>
 8008ef0:	0039      	movs	r1, r7
 8008ef2:	0030      	movs	r0, r6
 8008ef4:	f7ff ffc6 	bl	8008e84 <sbrk_aligned>
 8008ef8:	0004      	movs	r4, r0
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	d11e      	bne.n	8008f3c <_malloc_r+0x74>
 8008efe:	682c      	ldr	r4, [r5, #0]
 8008f00:	0025      	movs	r5, r4
 8008f02:	2d00      	cmp	r5, #0
 8008f04:	d14a      	bne.n	8008f9c <_malloc_r+0xd4>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	0029      	movs	r1, r5
 8008f0a:	18e3      	adds	r3, r4, r3
 8008f0c:	0030      	movs	r0, r6
 8008f0e:	9301      	str	r3, [sp, #4]
 8008f10:	f000 f9b2 	bl	8009278 <_sbrk_r>
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	4283      	cmp	r3, r0
 8008f18:	d143      	bne.n	8008fa2 <_malloc_r+0xda>
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	3703      	adds	r7, #3
 8008f1e:	1aff      	subs	r7, r7, r3
 8008f20:	2303      	movs	r3, #3
 8008f22:	439f      	bics	r7, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	2f0c      	cmp	r7, #12
 8008f28:	d200      	bcs.n	8008f2c <_malloc_r+0x64>
 8008f2a:	270c      	movs	r7, #12
 8008f2c:	0039      	movs	r1, r7
 8008f2e:	0030      	movs	r0, r6
 8008f30:	f7ff ffa8 	bl	8008e84 <sbrk_aligned>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d034      	beq.n	8008fa2 <_malloc_r+0xda>
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	19df      	adds	r7, r3, r7
 8008f3c:	6027      	str	r7, [r4, #0]
 8008f3e:	e013      	b.n	8008f68 <_malloc_r+0xa0>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	dacb      	bge.n	8008edc <_malloc_r+0x14>
 8008f44:	230c      	movs	r3, #12
 8008f46:	2500      	movs	r5, #0
 8008f48:	6033      	str	r3, [r6, #0]
 8008f4a:	0028      	movs	r0, r5
 8008f4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f4e:	6822      	ldr	r2, [r4, #0]
 8008f50:	1bd1      	subs	r1, r2, r7
 8008f52:	d420      	bmi.n	8008f96 <_malloc_r+0xce>
 8008f54:	290b      	cmp	r1, #11
 8008f56:	d917      	bls.n	8008f88 <_malloc_r+0xc0>
 8008f58:	19e2      	adds	r2, r4, r7
 8008f5a:	6027      	str	r7, [r4, #0]
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	d111      	bne.n	8008f84 <_malloc_r+0xbc>
 8008f60:	602a      	str	r2, [r5, #0]
 8008f62:	6863      	ldr	r3, [r4, #4]
 8008f64:	6011      	str	r1, [r2, #0]
 8008f66:	6053      	str	r3, [r2, #4]
 8008f68:	0030      	movs	r0, r6
 8008f6a:	0025      	movs	r5, r4
 8008f6c:	f000 fa88 	bl	8009480 <__malloc_unlock>
 8008f70:	2207      	movs	r2, #7
 8008f72:	350b      	adds	r5, #11
 8008f74:	1d23      	adds	r3, r4, #4
 8008f76:	4395      	bics	r5, r2
 8008f78:	1aea      	subs	r2, r5, r3
 8008f7a:	429d      	cmp	r5, r3
 8008f7c:	d0e5      	beq.n	8008f4a <_malloc_r+0x82>
 8008f7e:	1b5b      	subs	r3, r3, r5
 8008f80:	50a3      	str	r3, [r4, r2]
 8008f82:	e7e2      	b.n	8008f4a <_malloc_r+0x82>
 8008f84:	605a      	str	r2, [r3, #4]
 8008f86:	e7ec      	b.n	8008f62 <_malloc_r+0x9a>
 8008f88:	6862      	ldr	r2, [r4, #4]
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	d101      	bne.n	8008f92 <_malloc_r+0xca>
 8008f8e:	602a      	str	r2, [r5, #0]
 8008f90:	e7ea      	b.n	8008f68 <_malloc_r+0xa0>
 8008f92:	605a      	str	r2, [r3, #4]
 8008f94:	e7e8      	b.n	8008f68 <_malloc_r+0xa0>
 8008f96:	0023      	movs	r3, r4
 8008f98:	6864      	ldr	r4, [r4, #4]
 8008f9a:	e7a7      	b.n	8008eec <_malloc_r+0x24>
 8008f9c:	002c      	movs	r4, r5
 8008f9e:	686d      	ldr	r5, [r5, #4]
 8008fa0:	e7af      	b.n	8008f02 <_malloc_r+0x3a>
 8008fa2:	230c      	movs	r3, #12
 8008fa4:	0030      	movs	r0, r6
 8008fa6:	6033      	str	r3, [r6, #0]
 8008fa8:	f000 fa6a 	bl	8009480 <__malloc_unlock>
 8008fac:	e7cd      	b.n	8008f4a <_malloc_r+0x82>
 8008fae:	46c0      	nop			; (mov r8, r8)
 8008fb0:	20000654 	.word	0x20000654

08008fb4 <__sfputc_r>:
 8008fb4:	6893      	ldr	r3, [r2, #8]
 8008fb6:	b510      	push	{r4, lr}
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	6093      	str	r3, [r2, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	da04      	bge.n	8008fca <__sfputc_r+0x16>
 8008fc0:	6994      	ldr	r4, [r2, #24]
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	db07      	blt.n	8008fd6 <__sfputc_r+0x22>
 8008fc6:	290a      	cmp	r1, #10
 8008fc8:	d005      	beq.n	8008fd6 <__sfputc_r+0x22>
 8008fca:	6813      	ldr	r3, [r2, #0]
 8008fcc:	1c58      	adds	r0, r3, #1
 8008fce:	6010      	str	r0, [r2, #0]
 8008fd0:	7019      	strb	r1, [r3, #0]
 8008fd2:	0008      	movs	r0, r1
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	f7fe f977 	bl	80072c8 <__swbuf_r>
 8008fda:	0001      	movs	r1, r0
 8008fdc:	e7f9      	b.n	8008fd2 <__sfputc_r+0x1e>

08008fde <__sfputs_r>:
 8008fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe0:	0006      	movs	r6, r0
 8008fe2:	000f      	movs	r7, r1
 8008fe4:	0014      	movs	r4, r2
 8008fe6:	18d5      	adds	r5, r2, r3
 8008fe8:	42ac      	cmp	r4, r5
 8008fea:	d101      	bne.n	8008ff0 <__sfputs_r+0x12>
 8008fec:	2000      	movs	r0, #0
 8008fee:	e007      	b.n	8009000 <__sfputs_r+0x22>
 8008ff0:	7821      	ldrb	r1, [r4, #0]
 8008ff2:	003a      	movs	r2, r7
 8008ff4:	0030      	movs	r0, r6
 8008ff6:	f7ff ffdd 	bl	8008fb4 <__sfputc_r>
 8008ffa:	3401      	adds	r4, #1
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	d1f3      	bne.n	8008fe8 <__sfputs_r+0xa>
 8009000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009004 <_vfiprintf_r>:
 8009004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009006:	b0a1      	sub	sp, #132	; 0x84
 8009008:	0006      	movs	r6, r0
 800900a:	000c      	movs	r4, r1
 800900c:	001f      	movs	r7, r3
 800900e:	9203      	str	r2, [sp, #12]
 8009010:	2800      	cmp	r0, #0
 8009012:	d004      	beq.n	800901e <_vfiprintf_r+0x1a>
 8009014:	6983      	ldr	r3, [r0, #24]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <_vfiprintf_r+0x1a>
 800901a:	f7ff f9f7 	bl	800840c <__sinit>
 800901e:	4b8e      	ldr	r3, [pc, #568]	; (8009258 <_vfiprintf_r+0x254>)
 8009020:	429c      	cmp	r4, r3
 8009022:	d11c      	bne.n	800905e <_vfiprintf_r+0x5a>
 8009024:	6874      	ldr	r4, [r6, #4]
 8009026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009028:	07db      	lsls	r3, r3, #31
 800902a:	d405      	bmi.n	8009038 <_vfiprintf_r+0x34>
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	059b      	lsls	r3, r3, #22
 8009030:	d402      	bmi.n	8009038 <_vfiprintf_r+0x34>
 8009032:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009034:	f7ff fa8f 	bl	8008556 <__retarget_lock_acquire_recursive>
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	071b      	lsls	r3, r3, #28
 800903c:	d502      	bpl.n	8009044 <_vfiprintf_r+0x40>
 800903e:	6923      	ldr	r3, [r4, #16]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d11d      	bne.n	8009080 <_vfiprintf_r+0x7c>
 8009044:	0021      	movs	r1, r4
 8009046:	0030      	movs	r0, r6
 8009048:	f7fe f994 	bl	8007374 <__swsetup_r>
 800904c:	2800      	cmp	r0, #0
 800904e:	d017      	beq.n	8009080 <_vfiprintf_r+0x7c>
 8009050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009052:	07db      	lsls	r3, r3, #31
 8009054:	d50d      	bpl.n	8009072 <_vfiprintf_r+0x6e>
 8009056:	2001      	movs	r0, #1
 8009058:	4240      	negs	r0, r0
 800905a:	b021      	add	sp, #132	; 0x84
 800905c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800905e:	4b7f      	ldr	r3, [pc, #508]	; (800925c <_vfiprintf_r+0x258>)
 8009060:	429c      	cmp	r4, r3
 8009062:	d101      	bne.n	8009068 <_vfiprintf_r+0x64>
 8009064:	68b4      	ldr	r4, [r6, #8]
 8009066:	e7de      	b.n	8009026 <_vfiprintf_r+0x22>
 8009068:	4b7d      	ldr	r3, [pc, #500]	; (8009260 <_vfiprintf_r+0x25c>)
 800906a:	429c      	cmp	r4, r3
 800906c:	d1db      	bne.n	8009026 <_vfiprintf_r+0x22>
 800906e:	68f4      	ldr	r4, [r6, #12]
 8009070:	e7d9      	b.n	8009026 <_vfiprintf_r+0x22>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	059b      	lsls	r3, r3, #22
 8009076:	d4ee      	bmi.n	8009056 <_vfiprintf_r+0x52>
 8009078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800907a:	f7ff fa6d 	bl	8008558 <__retarget_lock_release_recursive>
 800907e:	e7ea      	b.n	8009056 <_vfiprintf_r+0x52>
 8009080:	2300      	movs	r3, #0
 8009082:	ad08      	add	r5, sp, #32
 8009084:	616b      	str	r3, [r5, #20]
 8009086:	3320      	adds	r3, #32
 8009088:	766b      	strb	r3, [r5, #25]
 800908a:	3310      	adds	r3, #16
 800908c:	76ab      	strb	r3, [r5, #26]
 800908e:	9707      	str	r7, [sp, #28]
 8009090:	9f03      	ldr	r7, [sp, #12]
 8009092:	783b      	ldrb	r3, [r7, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <_vfiprintf_r+0x98>
 8009098:	2b25      	cmp	r3, #37	; 0x25
 800909a:	d14e      	bne.n	800913a <_vfiprintf_r+0x136>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	1afb      	subs	r3, r7, r3
 80090a0:	9305      	str	r3, [sp, #20]
 80090a2:	9b03      	ldr	r3, [sp, #12]
 80090a4:	429f      	cmp	r7, r3
 80090a6:	d00d      	beq.n	80090c4 <_vfiprintf_r+0xc0>
 80090a8:	9b05      	ldr	r3, [sp, #20]
 80090aa:	0021      	movs	r1, r4
 80090ac:	0030      	movs	r0, r6
 80090ae:	9a03      	ldr	r2, [sp, #12]
 80090b0:	f7ff ff95 	bl	8008fde <__sfputs_r>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d100      	bne.n	80090ba <_vfiprintf_r+0xb6>
 80090b8:	e0b5      	b.n	8009226 <_vfiprintf_r+0x222>
 80090ba:	696a      	ldr	r2, [r5, #20]
 80090bc:	9b05      	ldr	r3, [sp, #20]
 80090be:	4694      	mov	ip, r2
 80090c0:	4463      	add	r3, ip
 80090c2:	616b      	str	r3, [r5, #20]
 80090c4:	783b      	ldrb	r3, [r7, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d100      	bne.n	80090cc <_vfiprintf_r+0xc8>
 80090ca:	e0ac      	b.n	8009226 <_vfiprintf_r+0x222>
 80090cc:	2201      	movs	r2, #1
 80090ce:	1c7b      	adds	r3, r7, #1
 80090d0:	9303      	str	r3, [sp, #12]
 80090d2:	2300      	movs	r3, #0
 80090d4:	4252      	negs	r2, r2
 80090d6:	606a      	str	r2, [r5, #4]
 80090d8:	a904      	add	r1, sp, #16
 80090da:	3254      	adds	r2, #84	; 0x54
 80090dc:	1852      	adds	r2, r2, r1
 80090de:	602b      	str	r3, [r5, #0]
 80090e0:	60eb      	str	r3, [r5, #12]
 80090e2:	60ab      	str	r3, [r5, #8]
 80090e4:	7013      	strb	r3, [r2, #0]
 80090e6:	65ab      	str	r3, [r5, #88]	; 0x58
 80090e8:	9b03      	ldr	r3, [sp, #12]
 80090ea:	2205      	movs	r2, #5
 80090ec:	7819      	ldrb	r1, [r3, #0]
 80090ee:	485d      	ldr	r0, [pc, #372]	; (8009264 <_vfiprintf_r+0x260>)
 80090f0:	f7ff faaa 	bl	8008648 <memchr>
 80090f4:	9b03      	ldr	r3, [sp, #12]
 80090f6:	1c5f      	adds	r7, r3, #1
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d120      	bne.n	800913e <_vfiprintf_r+0x13a>
 80090fc:	682a      	ldr	r2, [r5, #0]
 80090fe:	06d3      	lsls	r3, r2, #27
 8009100:	d504      	bpl.n	800910c <_vfiprintf_r+0x108>
 8009102:	2353      	movs	r3, #83	; 0x53
 8009104:	a904      	add	r1, sp, #16
 8009106:	185b      	adds	r3, r3, r1
 8009108:	2120      	movs	r1, #32
 800910a:	7019      	strb	r1, [r3, #0]
 800910c:	0713      	lsls	r3, r2, #28
 800910e:	d504      	bpl.n	800911a <_vfiprintf_r+0x116>
 8009110:	2353      	movs	r3, #83	; 0x53
 8009112:	a904      	add	r1, sp, #16
 8009114:	185b      	adds	r3, r3, r1
 8009116:	212b      	movs	r1, #43	; 0x2b
 8009118:	7019      	strb	r1, [r3, #0]
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b2a      	cmp	r3, #42	; 0x2a
 8009120:	d016      	beq.n	8009150 <_vfiprintf_r+0x14c>
 8009122:	2100      	movs	r1, #0
 8009124:	68eb      	ldr	r3, [r5, #12]
 8009126:	9f03      	ldr	r7, [sp, #12]
 8009128:	783a      	ldrb	r2, [r7, #0]
 800912a:	1c78      	adds	r0, r7, #1
 800912c:	3a30      	subs	r2, #48	; 0x30
 800912e:	4684      	mov	ip, r0
 8009130:	2a09      	cmp	r2, #9
 8009132:	d94f      	bls.n	80091d4 <_vfiprintf_r+0x1d0>
 8009134:	2900      	cmp	r1, #0
 8009136:	d111      	bne.n	800915c <_vfiprintf_r+0x158>
 8009138:	e017      	b.n	800916a <_vfiprintf_r+0x166>
 800913a:	3701      	adds	r7, #1
 800913c:	e7a9      	b.n	8009092 <_vfiprintf_r+0x8e>
 800913e:	4b49      	ldr	r3, [pc, #292]	; (8009264 <_vfiprintf_r+0x260>)
 8009140:	682a      	ldr	r2, [r5, #0]
 8009142:	1ac0      	subs	r0, r0, r3
 8009144:	2301      	movs	r3, #1
 8009146:	4083      	lsls	r3, r0
 8009148:	4313      	orrs	r3, r2
 800914a:	602b      	str	r3, [r5, #0]
 800914c:	9703      	str	r7, [sp, #12]
 800914e:	e7cb      	b.n	80090e8 <_vfiprintf_r+0xe4>
 8009150:	9b07      	ldr	r3, [sp, #28]
 8009152:	1d19      	adds	r1, r3, #4
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	9107      	str	r1, [sp, #28]
 8009158:	2b00      	cmp	r3, #0
 800915a:	db01      	blt.n	8009160 <_vfiprintf_r+0x15c>
 800915c:	930b      	str	r3, [sp, #44]	; 0x2c
 800915e:	e004      	b.n	800916a <_vfiprintf_r+0x166>
 8009160:	425b      	negs	r3, r3
 8009162:	60eb      	str	r3, [r5, #12]
 8009164:	2302      	movs	r3, #2
 8009166:	4313      	orrs	r3, r2
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	783b      	ldrb	r3, [r7, #0]
 800916c:	2b2e      	cmp	r3, #46	; 0x2e
 800916e:	d10a      	bne.n	8009186 <_vfiprintf_r+0x182>
 8009170:	787b      	ldrb	r3, [r7, #1]
 8009172:	2b2a      	cmp	r3, #42	; 0x2a
 8009174:	d137      	bne.n	80091e6 <_vfiprintf_r+0x1e2>
 8009176:	9b07      	ldr	r3, [sp, #28]
 8009178:	3702      	adds	r7, #2
 800917a:	1d1a      	adds	r2, r3, #4
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	9207      	str	r2, [sp, #28]
 8009180:	2b00      	cmp	r3, #0
 8009182:	db2d      	blt.n	80091e0 <_vfiprintf_r+0x1dc>
 8009184:	9309      	str	r3, [sp, #36]	; 0x24
 8009186:	2203      	movs	r2, #3
 8009188:	7839      	ldrb	r1, [r7, #0]
 800918a:	4837      	ldr	r0, [pc, #220]	; (8009268 <_vfiprintf_r+0x264>)
 800918c:	f7ff fa5c 	bl	8008648 <memchr>
 8009190:	2800      	cmp	r0, #0
 8009192:	d007      	beq.n	80091a4 <_vfiprintf_r+0x1a0>
 8009194:	4b34      	ldr	r3, [pc, #208]	; (8009268 <_vfiprintf_r+0x264>)
 8009196:	682a      	ldr	r2, [r5, #0]
 8009198:	1ac0      	subs	r0, r0, r3
 800919a:	2340      	movs	r3, #64	; 0x40
 800919c:	4083      	lsls	r3, r0
 800919e:	4313      	orrs	r3, r2
 80091a0:	3701      	adds	r7, #1
 80091a2:	602b      	str	r3, [r5, #0]
 80091a4:	7839      	ldrb	r1, [r7, #0]
 80091a6:	1c7b      	adds	r3, r7, #1
 80091a8:	2206      	movs	r2, #6
 80091aa:	4830      	ldr	r0, [pc, #192]	; (800926c <_vfiprintf_r+0x268>)
 80091ac:	9303      	str	r3, [sp, #12]
 80091ae:	7629      	strb	r1, [r5, #24]
 80091b0:	f7ff fa4a 	bl	8008648 <memchr>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d045      	beq.n	8009244 <_vfiprintf_r+0x240>
 80091b8:	4b2d      	ldr	r3, [pc, #180]	; (8009270 <_vfiprintf_r+0x26c>)
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d127      	bne.n	800920e <_vfiprintf_r+0x20a>
 80091be:	2207      	movs	r2, #7
 80091c0:	9b07      	ldr	r3, [sp, #28]
 80091c2:	3307      	adds	r3, #7
 80091c4:	4393      	bics	r3, r2
 80091c6:	3308      	adds	r3, #8
 80091c8:	9307      	str	r3, [sp, #28]
 80091ca:	696b      	ldr	r3, [r5, #20]
 80091cc:	9a04      	ldr	r2, [sp, #16]
 80091ce:	189b      	adds	r3, r3, r2
 80091d0:	616b      	str	r3, [r5, #20]
 80091d2:	e75d      	b.n	8009090 <_vfiprintf_r+0x8c>
 80091d4:	210a      	movs	r1, #10
 80091d6:	434b      	muls	r3, r1
 80091d8:	4667      	mov	r7, ip
 80091da:	189b      	adds	r3, r3, r2
 80091dc:	3909      	subs	r1, #9
 80091de:	e7a3      	b.n	8009128 <_vfiprintf_r+0x124>
 80091e0:	2301      	movs	r3, #1
 80091e2:	425b      	negs	r3, r3
 80091e4:	e7ce      	b.n	8009184 <_vfiprintf_r+0x180>
 80091e6:	2300      	movs	r3, #0
 80091e8:	001a      	movs	r2, r3
 80091ea:	3701      	adds	r7, #1
 80091ec:	606b      	str	r3, [r5, #4]
 80091ee:	7839      	ldrb	r1, [r7, #0]
 80091f0:	1c78      	adds	r0, r7, #1
 80091f2:	3930      	subs	r1, #48	; 0x30
 80091f4:	4684      	mov	ip, r0
 80091f6:	2909      	cmp	r1, #9
 80091f8:	d903      	bls.n	8009202 <_vfiprintf_r+0x1fe>
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0c3      	beq.n	8009186 <_vfiprintf_r+0x182>
 80091fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009200:	e7c1      	b.n	8009186 <_vfiprintf_r+0x182>
 8009202:	230a      	movs	r3, #10
 8009204:	435a      	muls	r2, r3
 8009206:	4667      	mov	r7, ip
 8009208:	1852      	adds	r2, r2, r1
 800920a:	3b09      	subs	r3, #9
 800920c:	e7ef      	b.n	80091ee <_vfiprintf_r+0x1ea>
 800920e:	ab07      	add	r3, sp, #28
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	0022      	movs	r2, r4
 8009214:	0029      	movs	r1, r5
 8009216:	0030      	movs	r0, r6
 8009218:	4b16      	ldr	r3, [pc, #88]	; (8009274 <_vfiprintf_r+0x270>)
 800921a:	f7fd fbfb 	bl	8006a14 <_printf_float>
 800921e:	9004      	str	r0, [sp, #16]
 8009220:	9b04      	ldr	r3, [sp, #16]
 8009222:	3301      	adds	r3, #1
 8009224:	d1d1      	bne.n	80091ca <_vfiprintf_r+0x1c6>
 8009226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009228:	07db      	lsls	r3, r3, #31
 800922a:	d405      	bmi.n	8009238 <_vfiprintf_r+0x234>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	059b      	lsls	r3, r3, #22
 8009230:	d402      	bmi.n	8009238 <_vfiprintf_r+0x234>
 8009232:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009234:	f7ff f990 	bl	8008558 <__retarget_lock_release_recursive>
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	065b      	lsls	r3, r3, #25
 800923c:	d500      	bpl.n	8009240 <_vfiprintf_r+0x23c>
 800923e:	e70a      	b.n	8009056 <_vfiprintf_r+0x52>
 8009240:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009242:	e70a      	b.n	800905a <_vfiprintf_r+0x56>
 8009244:	ab07      	add	r3, sp, #28
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	0022      	movs	r2, r4
 800924a:	0029      	movs	r1, r5
 800924c:	0030      	movs	r0, r6
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <_vfiprintf_r+0x270>)
 8009250:	f7fd fe92 	bl	8006f78 <_printf_i>
 8009254:	e7e3      	b.n	800921e <_vfiprintf_r+0x21a>
 8009256:	46c0      	nop			; (mov r8, r8)
 8009258:	0800a040 	.word	0x0800a040
 800925c:	0800a060 	.word	0x0800a060
 8009260:	0800a020 	.word	0x0800a020
 8009264:	0800a1dc 	.word	0x0800a1dc
 8009268:	0800a1e2 	.word	0x0800a1e2
 800926c:	0800a1e6 	.word	0x0800a1e6
 8009270:	08006a15 	.word	0x08006a15
 8009274:	08008fdf 	.word	0x08008fdf

08009278 <_sbrk_r>:
 8009278:	2300      	movs	r3, #0
 800927a:	b570      	push	{r4, r5, r6, lr}
 800927c:	4d06      	ldr	r5, [pc, #24]	; (8009298 <_sbrk_r+0x20>)
 800927e:	0004      	movs	r4, r0
 8009280:	0008      	movs	r0, r1
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	f7fb fe80 	bl	8004f88 <_sbrk>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d103      	bne.n	8009294 <_sbrk_r+0x1c>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d000      	beq.n	8009294 <_sbrk_r+0x1c>
 8009292:	6023      	str	r3, [r4, #0]
 8009294:	bd70      	pop	{r4, r5, r6, pc}
 8009296:	46c0      	nop			; (mov r8, r8)
 8009298:	2000065c 	.word	0x2000065c

0800929c <__sread>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	000c      	movs	r4, r1
 80092a0:	250e      	movs	r5, #14
 80092a2:	5f49      	ldrsh	r1, [r1, r5]
 80092a4:	f000 f8f4 	bl	8009490 <_read_r>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	db03      	blt.n	80092b4 <__sread+0x18>
 80092ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80092ae:	181b      	adds	r3, r3, r0
 80092b0:	6563      	str	r3, [r4, #84]	; 0x54
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	4a02      	ldr	r2, [pc, #8]	; (80092c0 <__sread+0x24>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	e7f9      	b.n	80092b2 <__sread+0x16>
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	ffffefff 	.word	0xffffefff

080092c4 <__swrite>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	001f      	movs	r7, r3
 80092c8:	898b      	ldrh	r3, [r1, #12]
 80092ca:	0005      	movs	r5, r0
 80092cc:	000c      	movs	r4, r1
 80092ce:	0016      	movs	r6, r2
 80092d0:	05db      	lsls	r3, r3, #23
 80092d2:	d505      	bpl.n	80092e0 <__swrite+0x1c>
 80092d4:	230e      	movs	r3, #14
 80092d6:	5ec9      	ldrsh	r1, [r1, r3]
 80092d8:	2200      	movs	r2, #0
 80092da:	2302      	movs	r3, #2
 80092dc:	f000 f8a2 	bl	8009424 <_lseek_r>
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	4a05      	ldr	r2, [pc, #20]	; (80092f8 <__swrite+0x34>)
 80092e4:	0028      	movs	r0, r5
 80092e6:	4013      	ands	r3, r2
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	0032      	movs	r2, r6
 80092ec:	230e      	movs	r3, #14
 80092ee:	5ee1      	ldrsh	r1, [r4, r3]
 80092f0:	003b      	movs	r3, r7
 80092f2:	f000 f81f 	bl	8009334 <_write_r>
 80092f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f8:	ffffefff 	.word	0xffffefff

080092fc <__sseek>:
 80092fc:	b570      	push	{r4, r5, r6, lr}
 80092fe:	000c      	movs	r4, r1
 8009300:	250e      	movs	r5, #14
 8009302:	5f49      	ldrsh	r1, [r1, r5]
 8009304:	f000 f88e 	bl	8009424 <_lseek_r>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	1c42      	adds	r2, r0, #1
 800930c:	d103      	bne.n	8009316 <__sseek+0x1a>
 800930e:	4a05      	ldr	r2, [pc, #20]	; (8009324 <__sseek+0x28>)
 8009310:	4013      	ands	r3, r2
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	bd70      	pop	{r4, r5, r6, pc}
 8009316:	2280      	movs	r2, #128	; 0x80
 8009318:	0152      	lsls	r2, r2, #5
 800931a:	4313      	orrs	r3, r2
 800931c:	81a3      	strh	r3, [r4, #12]
 800931e:	6560      	str	r0, [r4, #84]	; 0x54
 8009320:	e7f8      	b.n	8009314 <__sseek+0x18>
 8009322:	46c0      	nop			; (mov r8, r8)
 8009324:	ffffefff 	.word	0xffffefff

08009328 <__sclose>:
 8009328:	b510      	push	{r4, lr}
 800932a:	230e      	movs	r3, #14
 800932c:	5ec9      	ldrsh	r1, [r1, r3]
 800932e:	f000 f833 	bl	8009398 <_close_r>
 8009332:	bd10      	pop	{r4, pc}

08009334 <_write_r>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	0004      	movs	r4, r0
 8009338:	0008      	movs	r0, r1
 800933a:	0011      	movs	r1, r2
 800933c:	001a      	movs	r2, r3
 800933e:	2300      	movs	r3, #0
 8009340:	4d05      	ldr	r5, [pc, #20]	; (8009358 <_write_r+0x24>)
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	f7fb f9b2 	bl	80046ac <_write>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d103      	bne.n	8009354 <_write_r+0x20>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d000      	beq.n	8009354 <_write_r+0x20>
 8009352:	6023      	str	r3, [r4, #0]
 8009354:	bd70      	pop	{r4, r5, r6, pc}
 8009356:	46c0      	nop			; (mov r8, r8)
 8009358:	2000065c 	.word	0x2000065c

0800935c <__assert_func>:
 800935c:	b530      	push	{r4, r5, lr}
 800935e:	0014      	movs	r4, r2
 8009360:	001a      	movs	r2, r3
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <__assert_func+0x2c>)
 8009364:	0005      	movs	r5, r0
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	b085      	sub	sp, #20
 800936a:	68d8      	ldr	r0, [r3, #12]
 800936c:	4b07      	ldr	r3, [pc, #28]	; (800938c <__assert_func+0x30>)
 800936e:	2c00      	cmp	r4, #0
 8009370:	d101      	bne.n	8009376 <__assert_func+0x1a>
 8009372:	4b07      	ldr	r3, [pc, #28]	; (8009390 <__assert_func+0x34>)
 8009374:	001c      	movs	r4, r3
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	9100      	str	r1, [sp, #0]
 800937a:	002b      	movs	r3, r5
 800937c:	4905      	ldr	r1, [pc, #20]	; (8009394 <__assert_func+0x38>)
 800937e:	9402      	str	r4, [sp, #8]
 8009380:	f000 f81c 	bl	80093bc <fiprintf>
 8009384:	f000 f8a5 	bl	80094d2 <abort>
 8009388:	20000064 	.word	0x20000064
 800938c:	0800a1ed 	.word	0x0800a1ed
 8009390:	0800a228 	.word	0x0800a228
 8009394:	0800a1fa 	.word	0x0800a1fa

08009398 <_close_r>:
 8009398:	2300      	movs	r3, #0
 800939a:	b570      	push	{r4, r5, r6, lr}
 800939c:	4d06      	ldr	r5, [pc, #24]	; (80093b8 <_close_r+0x20>)
 800939e:	0004      	movs	r4, r0
 80093a0:	0008      	movs	r0, r1
 80093a2:	602b      	str	r3, [r5, #0]
 80093a4:	f7fb fdc3 	bl	8004f2e <_close>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d103      	bne.n	80093b4 <_close_r+0x1c>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d000      	beq.n	80093b4 <_close_r+0x1c>
 80093b2:	6023      	str	r3, [r4, #0]
 80093b4:	bd70      	pop	{r4, r5, r6, pc}
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	2000065c 	.word	0x2000065c

080093bc <fiprintf>:
 80093bc:	b40e      	push	{r1, r2, r3}
 80093be:	b503      	push	{r0, r1, lr}
 80093c0:	0001      	movs	r1, r0
 80093c2:	ab03      	add	r3, sp, #12
 80093c4:	4804      	ldr	r0, [pc, #16]	; (80093d8 <fiprintf+0x1c>)
 80093c6:	cb04      	ldmia	r3!, {r2}
 80093c8:	6800      	ldr	r0, [r0, #0]
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	f7ff fe1a 	bl	8009004 <_vfiprintf_r>
 80093d0:	b002      	add	sp, #8
 80093d2:	bc08      	pop	{r3}
 80093d4:	b003      	add	sp, #12
 80093d6:	4718      	bx	r3
 80093d8:	20000064 	.word	0x20000064

080093dc <_fstat_r>:
 80093dc:	2300      	movs	r3, #0
 80093de:	b570      	push	{r4, r5, r6, lr}
 80093e0:	4d06      	ldr	r5, [pc, #24]	; (80093fc <_fstat_r+0x20>)
 80093e2:	0004      	movs	r4, r0
 80093e4:	0008      	movs	r0, r1
 80093e6:	0011      	movs	r1, r2
 80093e8:	602b      	str	r3, [r5, #0]
 80093ea:	f7fb fdaa 	bl	8004f42 <_fstat>
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	d103      	bne.n	80093fa <_fstat_r+0x1e>
 80093f2:	682b      	ldr	r3, [r5, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d000      	beq.n	80093fa <_fstat_r+0x1e>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	2000065c 	.word	0x2000065c

08009400 <_isatty_r>:
 8009400:	2300      	movs	r3, #0
 8009402:	b570      	push	{r4, r5, r6, lr}
 8009404:	4d06      	ldr	r5, [pc, #24]	; (8009420 <_isatty_r+0x20>)
 8009406:	0004      	movs	r4, r0
 8009408:	0008      	movs	r0, r1
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	f7fb fda7 	bl	8004f5e <_isatty>
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d103      	bne.n	800941c <_isatty_r+0x1c>
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d000      	beq.n	800941c <_isatty_r+0x1c>
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	bd70      	pop	{r4, r5, r6, pc}
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	2000065c 	.word	0x2000065c

08009424 <_lseek_r>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	0004      	movs	r4, r0
 8009428:	0008      	movs	r0, r1
 800942a:	0011      	movs	r1, r2
 800942c:	001a      	movs	r2, r3
 800942e:	2300      	movs	r3, #0
 8009430:	4d05      	ldr	r5, [pc, #20]	; (8009448 <_lseek_r+0x24>)
 8009432:	602b      	str	r3, [r5, #0]
 8009434:	f7fb fd9c 	bl	8004f70 <_lseek>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d103      	bne.n	8009444 <_lseek_r+0x20>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d000      	beq.n	8009444 <_lseek_r+0x20>
 8009442:	6023      	str	r3, [r4, #0]
 8009444:	bd70      	pop	{r4, r5, r6, pc}
 8009446:	46c0      	nop			; (mov r8, r8)
 8009448:	2000065c 	.word	0x2000065c

0800944c <__ascii_mbtowc>:
 800944c:	b082      	sub	sp, #8
 800944e:	2900      	cmp	r1, #0
 8009450:	d100      	bne.n	8009454 <__ascii_mbtowc+0x8>
 8009452:	a901      	add	r1, sp, #4
 8009454:	1e10      	subs	r0, r2, #0
 8009456:	d006      	beq.n	8009466 <__ascii_mbtowc+0x1a>
 8009458:	2b00      	cmp	r3, #0
 800945a:	d006      	beq.n	800946a <__ascii_mbtowc+0x1e>
 800945c:	7813      	ldrb	r3, [r2, #0]
 800945e:	600b      	str	r3, [r1, #0]
 8009460:	7810      	ldrb	r0, [r2, #0]
 8009462:	1e43      	subs	r3, r0, #1
 8009464:	4198      	sbcs	r0, r3
 8009466:	b002      	add	sp, #8
 8009468:	4770      	bx	lr
 800946a:	2002      	movs	r0, #2
 800946c:	4240      	negs	r0, r0
 800946e:	e7fa      	b.n	8009466 <__ascii_mbtowc+0x1a>

08009470 <__malloc_lock>:
 8009470:	b510      	push	{r4, lr}
 8009472:	4802      	ldr	r0, [pc, #8]	; (800947c <__malloc_lock+0xc>)
 8009474:	f7ff f86f 	bl	8008556 <__retarget_lock_acquire_recursive>
 8009478:	bd10      	pop	{r4, pc}
 800947a:	46c0      	nop			; (mov r8, r8)
 800947c:	20000650 	.word	0x20000650

08009480 <__malloc_unlock>:
 8009480:	b510      	push	{r4, lr}
 8009482:	4802      	ldr	r0, [pc, #8]	; (800948c <__malloc_unlock+0xc>)
 8009484:	f7ff f868 	bl	8008558 <__retarget_lock_release_recursive>
 8009488:	bd10      	pop	{r4, pc}
 800948a:	46c0      	nop			; (mov r8, r8)
 800948c:	20000650 	.word	0x20000650

08009490 <_read_r>:
 8009490:	b570      	push	{r4, r5, r6, lr}
 8009492:	0004      	movs	r4, r0
 8009494:	0008      	movs	r0, r1
 8009496:	0011      	movs	r1, r2
 8009498:	001a      	movs	r2, r3
 800949a:	2300      	movs	r3, #0
 800949c:	4d05      	ldr	r5, [pc, #20]	; (80094b4 <_read_r+0x24>)
 800949e:	602b      	str	r3, [r5, #0]
 80094a0:	f7fb fd28 	bl	8004ef4 <_read>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d103      	bne.n	80094b0 <_read_r+0x20>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d000      	beq.n	80094b0 <_read_r+0x20>
 80094ae:	6023      	str	r3, [r4, #0]
 80094b0:	bd70      	pop	{r4, r5, r6, pc}
 80094b2:	46c0      	nop			; (mov r8, r8)
 80094b4:	2000065c 	.word	0x2000065c

080094b8 <__ascii_wctomb>:
 80094b8:	0003      	movs	r3, r0
 80094ba:	1e08      	subs	r0, r1, #0
 80094bc:	d005      	beq.n	80094ca <__ascii_wctomb+0x12>
 80094be:	2aff      	cmp	r2, #255	; 0xff
 80094c0:	d904      	bls.n	80094cc <__ascii_wctomb+0x14>
 80094c2:	228a      	movs	r2, #138	; 0x8a
 80094c4:	2001      	movs	r0, #1
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	4240      	negs	r0, r0
 80094ca:	4770      	bx	lr
 80094cc:	2001      	movs	r0, #1
 80094ce:	700a      	strb	r2, [r1, #0]
 80094d0:	e7fb      	b.n	80094ca <__ascii_wctomb+0x12>

080094d2 <abort>:
 80094d2:	2006      	movs	r0, #6
 80094d4:	b510      	push	{r4, lr}
 80094d6:	f000 f82d 	bl	8009534 <raise>
 80094da:	2001      	movs	r0, #1
 80094dc:	f7fb fcfe 	bl	8004edc <_exit>

080094e0 <_raise_r>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	0004      	movs	r4, r0
 80094e4:	000d      	movs	r5, r1
 80094e6:	291f      	cmp	r1, #31
 80094e8:	d904      	bls.n	80094f4 <_raise_r+0x14>
 80094ea:	2316      	movs	r3, #22
 80094ec:	6003      	str	r3, [r0, #0]
 80094ee:	2001      	movs	r0, #1
 80094f0:	4240      	negs	r0, r0
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d004      	beq.n	8009504 <_raise_r+0x24>
 80094fa:	008a      	lsls	r2, r1, #2
 80094fc:	189b      	adds	r3, r3, r2
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	2a00      	cmp	r2, #0
 8009502:	d108      	bne.n	8009516 <_raise_r+0x36>
 8009504:	0020      	movs	r0, r4
 8009506:	f000 f831 	bl	800956c <_getpid_r>
 800950a:	002a      	movs	r2, r5
 800950c:	0001      	movs	r1, r0
 800950e:	0020      	movs	r0, r4
 8009510:	f000 f81a 	bl	8009548 <_kill_r>
 8009514:	e7ed      	b.n	80094f2 <_raise_r+0x12>
 8009516:	2000      	movs	r0, #0
 8009518:	2a01      	cmp	r2, #1
 800951a:	d0ea      	beq.n	80094f2 <_raise_r+0x12>
 800951c:	1c51      	adds	r1, r2, #1
 800951e:	d103      	bne.n	8009528 <_raise_r+0x48>
 8009520:	2316      	movs	r3, #22
 8009522:	3001      	adds	r0, #1
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	e7e4      	b.n	80094f2 <_raise_r+0x12>
 8009528:	2400      	movs	r4, #0
 800952a:	0028      	movs	r0, r5
 800952c:	601c      	str	r4, [r3, #0]
 800952e:	4790      	blx	r2
 8009530:	0020      	movs	r0, r4
 8009532:	e7de      	b.n	80094f2 <_raise_r+0x12>

08009534 <raise>:
 8009534:	b510      	push	{r4, lr}
 8009536:	4b03      	ldr	r3, [pc, #12]	; (8009544 <raise+0x10>)
 8009538:	0001      	movs	r1, r0
 800953a:	6818      	ldr	r0, [r3, #0]
 800953c:	f7ff ffd0 	bl	80094e0 <_raise_r>
 8009540:	bd10      	pop	{r4, pc}
 8009542:	46c0      	nop			; (mov r8, r8)
 8009544:	20000064 	.word	0x20000064

08009548 <_kill_r>:
 8009548:	2300      	movs	r3, #0
 800954a:	b570      	push	{r4, r5, r6, lr}
 800954c:	4d06      	ldr	r5, [pc, #24]	; (8009568 <_kill_r+0x20>)
 800954e:	0004      	movs	r4, r0
 8009550:	0008      	movs	r0, r1
 8009552:	0011      	movs	r1, r2
 8009554:	602b      	str	r3, [r5, #0]
 8009556:	f7fb fcb1 	bl	8004ebc <_kill>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	d103      	bne.n	8009566 <_kill_r+0x1e>
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d000      	beq.n	8009566 <_kill_r+0x1e>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	2000065c 	.word	0x2000065c

0800956c <_getpid_r>:
 800956c:	b510      	push	{r4, lr}
 800956e:	f7fb fc9f 	bl	8004eb0 <_getpid>
 8009572:	bd10      	pop	{r4, pc}

08009574 <asinf>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	1c05      	adds	r5, r0, #0
 8009578:	f000 f820 	bl	80095bc <__ieee754_asinf>
 800957c:	1c29      	adds	r1, r5, #0
 800957e:	1c04      	adds	r4, r0, #0
 8009580:	1c28      	adds	r0, r5, #0
 8009582:	f7f7 fe21 	bl	80011c8 <__aeabi_fcmpun>
 8009586:	2800      	cmp	r0, #0
 8009588:	d110      	bne.n	80095ac <asinf+0x38>
 800958a:	1c28      	adds	r0, r5, #0
 800958c:	f000 fb42 	bl	8009c14 <fabsf>
 8009590:	21fe      	movs	r1, #254	; 0xfe
 8009592:	0589      	lsls	r1, r1, #22
 8009594:	f7f6 ffac 	bl	80004f0 <__aeabi_fcmpgt>
 8009598:	2800      	cmp	r0, #0
 800959a:	d007      	beq.n	80095ac <asinf+0x38>
 800959c:	f7fd f954 	bl	8006848 <__errno>
 80095a0:	2321      	movs	r3, #33	; 0x21
 80095a2:	6003      	str	r3, [r0, #0]
 80095a4:	4802      	ldr	r0, [pc, #8]	; (80095b0 <asinf+0x3c>)
 80095a6:	f000 fb39 	bl	8009c1c <nanf>
 80095aa:	1c04      	adds	r4, r0, #0
 80095ac:	1c20      	adds	r0, r4, #0
 80095ae:	bd70      	pop	{r4, r5, r6, pc}
 80095b0:	0800a228 	.word	0x0800a228

080095b4 <atan2f>:
 80095b4:	b510      	push	{r4, lr}
 80095b6:	f000 f949 	bl	800984c <__ieee754_atan2f>
 80095ba:	bd10      	pop	{r4, pc}

080095bc <__ieee754_asinf>:
 80095bc:	23fe      	movs	r3, #254	; 0xfe
 80095be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c0:	0046      	lsls	r6, r0, #1
 80095c2:	b085      	sub	sp, #20
 80095c4:	1c04      	adds	r4, r0, #0
 80095c6:	9002      	str	r0, [sp, #8]
 80095c8:	0876      	lsrs	r6, r6, #1
 80095ca:	059b      	lsls	r3, r3, #22
 80095cc:	429e      	cmp	r6, r3
 80095ce:	d10c      	bne.n	80095ea <__ieee754_asinf+0x2e>
 80095d0:	498e      	ldr	r1, [pc, #568]	; (800980c <__ieee754_asinf+0x250>)
 80095d2:	f7f7 fb25 	bl	8000c20 <__aeabi_fmul>
 80095d6:	498e      	ldr	r1, [pc, #568]	; (8009810 <__ieee754_asinf+0x254>)
 80095d8:	1c05      	adds	r5, r0, #0
 80095da:	1c20      	adds	r0, r4, #0
 80095dc:	f7f7 fb20 	bl	8000c20 <__aeabi_fmul>
 80095e0:	1c01      	adds	r1, r0, #0
 80095e2:	1c28      	adds	r0, r5, #0
 80095e4:	f7f6 ffb6 	bl	8000554 <__aeabi_fadd>
 80095e8:	e007      	b.n	80095fa <__ieee754_asinf+0x3e>
 80095ea:	429e      	cmp	r6, r3
 80095ec:	dd09      	ble.n	8009602 <__ieee754_asinf+0x46>
 80095ee:	1c01      	adds	r1, r0, #0
 80095f0:	f7f7 fc3c 	bl	8000e6c <__aeabi_fsub>
 80095f4:	1c01      	adds	r1, r0, #0
 80095f6:	f7f7 f94b 	bl	8000890 <__aeabi_fdiv>
 80095fa:	1c04      	adds	r4, r0, #0
 80095fc:	1c20      	adds	r0, r4, #0
 80095fe:	b005      	add	sp, #20
 8009600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009602:	23fc      	movs	r3, #252	; 0xfc
 8009604:	059b      	lsls	r3, r3, #22
 8009606:	429e      	cmp	r6, r3
 8009608:	da0c      	bge.n	8009624 <__ieee754_asinf+0x68>
 800960a:	23c8      	movs	r3, #200	; 0xc8
 800960c:	059b      	lsls	r3, r3, #22
 800960e:	429e      	cmp	r6, r3
 8009610:	da76      	bge.n	8009700 <__ieee754_asinf+0x144>
 8009612:	4980      	ldr	r1, [pc, #512]	; (8009814 <__ieee754_asinf+0x258>)
 8009614:	f7f6 ff9e 	bl	8000554 <__aeabi_fadd>
 8009618:	21fe      	movs	r1, #254	; 0xfe
 800961a:	0589      	lsls	r1, r1, #22
 800961c:	f7f6 ff68 	bl	80004f0 <__aeabi_fcmpgt>
 8009620:	2800      	cmp	r0, #0
 8009622:	d1eb      	bne.n	80095fc <__ieee754_asinf+0x40>
 8009624:	1c20      	adds	r0, r4, #0
 8009626:	f000 faf5 	bl	8009c14 <fabsf>
 800962a:	1c01      	adds	r1, r0, #0
 800962c:	20fe      	movs	r0, #254	; 0xfe
 800962e:	0580      	lsls	r0, r0, #22
 8009630:	f7f7 fc1c 	bl	8000e6c <__aeabi_fsub>
 8009634:	21fc      	movs	r1, #252	; 0xfc
 8009636:	0589      	lsls	r1, r1, #22
 8009638:	f7f7 faf2 	bl	8000c20 <__aeabi_fmul>
 800963c:	4976      	ldr	r1, [pc, #472]	; (8009818 <__ieee754_asinf+0x25c>)
 800963e:	1c04      	adds	r4, r0, #0
 8009640:	f7f7 faee 	bl	8000c20 <__aeabi_fmul>
 8009644:	4975      	ldr	r1, [pc, #468]	; (800981c <__ieee754_asinf+0x260>)
 8009646:	f7f6 ff85 	bl	8000554 <__aeabi_fadd>
 800964a:	1c21      	adds	r1, r4, #0
 800964c:	f7f7 fae8 	bl	8000c20 <__aeabi_fmul>
 8009650:	4973      	ldr	r1, [pc, #460]	; (8009820 <__ieee754_asinf+0x264>)
 8009652:	f7f7 fc0b 	bl	8000e6c <__aeabi_fsub>
 8009656:	1c21      	adds	r1, r4, #0
 8009658:	f7f7 fae2 	bl	8000c20 <__aeabi_fmul>
 800965c:	4971      	ldr	r1, [pc, #452]	; (8009824 <__ieee754_asinf+0x268>)
 800965e:	f7f6 ff79 	bl	8000554 <__aeabi_fadd>
 8009662:	1c21      	adds	r1, r4, #0
 8009664:	f7f7 fadc 	bl	8000c20 <__aeabi_fmul>
 8009668:	496f      	ldr	r1, [pc, #444]	; (8009828 <__ieee754_asinf+0x26c>)
 800966a:	f7f7 fbff 	bl	8000e6c <__aeabi_fsub>
 800966e:	1c21      	adds	r1, r4, #0
 8009670:	f7f7 fad6 	bl	8000c20 <__aeabi_fmul>
 8009674:	496d      	ldr	r1, [pc, #436]	; (800982c <__ieee754_asinf+0x270>)
 8009676:	f7f6 ff6d 	bl	8000554 <__aeabi_fadd>
 800967a:	1c21      	adds	r1, r4, #0
 800967c:	f7f7 fad0 	bl	8000c20 <__aeabi_fmul>
 8009680:	496b      	ldr	r1, [pc, #428]	; (8009830 <__ieee754_asinf+0x274>)
 8009682:	9001      	str	r0, [sp, #4]
 8009684:	1c20      	adds	r0, r4, #0
 8009686:	f7f7 facb 	bl	8000c20 <__aeabi_fmul>
 800968a:	496a      	ldr	r1, [pc, #424]	; (8009834 <__ieee754_asinf+0x278>)
 800968c:	f7f7 fbee 	bl	8000e6c <__aeabi_fsub>
 8009690:	1c21      	adds	r1, r4, #0
 8009692:	f7f7 fac5 	bl	8000c20 <__aeabi_fmul>
 8009696:	4968      	ldr	r1, [pc, #416]	; (8009838 <__ieee754_asinf+0x27c>)
 8009698:	f7f6 ff5c 	bl	8000554 <__aeabi_fadd>
 800969c:	1c21      	adds	r1, r4, #0
 800969e:	f7f7 fabf 	bl	8000c20 <__aeabi_fmul>
 80096a2:	4966      	ldr	r1, [pc, #408]	; (800983c <__ieee754_asinf+0x280>)
 80096a4:	f7f7 fbe2 	bl	8000e6c <__aeabi_fsub>
 80096a8:	1c21      	adds	r1, r4, #0
 80096aa:	f7f7 fab9 	bl	8000c20 <__aeabi_fmul>
 80096ae:	21fe      	movs	r1, #254	; 0xfe
 80096b0:	0589      	lsls	r1, r1, #22
 80096b2:	f7f6 ff4f 	bl	8000554 <__aeabi_fadd>
 80096b6:	1c07      	adds	r7, r0, #0
 80096b8:	1c20      	adds	r0, r4, #0
 80096ba:	f000 f943 	bl	8009944 <__ieee754_sqrtf>
 80096be:	4b60      	ldr	r3, [pc, #384]	; (8009840 <__ieee754_asinf+0x284>)
 80096c0:	1c05      	adds	r5, r0, #0
 80096c2:	429e      	cmp	r6, r3
 80096c4:	dd66      	ble.n	8009794 <__ieee754_asinf+0x1d8>
 80096c6:	1c39      	adds	r1, r7, #0
 80096c8:	9801      	ldr	r0, [sp, #4]
 80096ca:	f7f7 f8e1 	bl	8000890 <__aeabi_fdiv>
 80096ce:	1c29      	adds	r1, r5, #0
 80096d0:	f7f7 faa6 	bl	8000c20 <__aeabi_fmul>
 80096d4:	1c29      	adds	r1, r5, #0
 80096d6:	f7f6 ff3d 	bl	8000554 <__aeabi_fadd>
 80096da:	1c01      	adds	r1, r0, #0
 80096dc:	f7f6 ff3a 	bl	8000554 <__aeabi_fadd>
 80096e0:	4958      	ldr	r1, [pc, #352]	; (8009844 <__ieee754_asinf+0x288>)
 80096e2:	f7f6 ff37 	bl	8000554 <__aeabi_fadd>
 80096e6:	1c01      	adds	r1, r0, #0
 80096e8:	4848      	ldr	r0, [pc, #288]	; (800980c <__ieee754_asinf+0x250>)
 80096ea:	f7f7 fbbf 	bl	8000e6c <__aeabi_fsub>
 80096ee:	9b02      	ldr	r3, [sp, #8]
 80096f0:	1c04      	adds	r4, r0, #0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dd00      	ble.n	80096f8 <__ieee754_asinf+0x13c>
 80096f6:	e781      	b.n	80095fc <__ieee754_asinf+0x40>
 80096f8:	2380      	movs	r3, #128	; 0x80
 80096fa:	061b      	lsls	r3, r3, #24
 80096fc:	18c4      	adds	r4, r0, r3
 80096fe:	e77d      	b.n	80095fc <__ieee754_asinf+0x40>
 8009700:	1c01      	adds	r1, r0, #0
 8009702:	f7f7 fa8d 	bl	8000c20 <__aeabi_fmul>
 8009706:	4944      	ldr	r1, [pc, #272]	; (8009818 <__ieee754_asinf+0x25c>)
 8009708:	1c05      	adds	r5, r0, #0
 800970a:	f7f7 fa89 	bl	8000c20 <__aeabi_fmul>
 800970e:	4943      	ldr	r1, [pc, #268]	; (800981c <__ieee754_asinf+0x260>)
 8009710:	f7f6 ff20 	bl	8000554 <__aeabi_fadd>
 8009714:	1c29      	adds	r1, r5, #0
 8009716:	f7f7 fa83 	bl	8000c20 <__aeabi_fmul>
 800971a:	4941      	ldr	r1, [pc, #260]	; (8009820 <__ieee754_asinf+0x264>)
 800971c:	f7f7 fba6 	bl	8000e6c <__aeabi_fsub>
 8009720:	1c29      	adds	r1, r5, #0
 8009722:	f7f7 fa7d 	bl	8000c20 <__aeabi_fmul>
 8009726:	493f      	ldr	r1, [pc, #252]	; (8009824 <__ieee754_asinf+0x268>)
 8009728:	f7f6 ff14 	bl	8000554 <__aeabi_fadd>
 800972c:	1c29      	adds	r1, r5, #0
 800972e:	f7f7 fa77 	bl	8000c20 <__aeabi_fmul>
 8009732:	493d      	ldr	r1, [pc, #244]	; (8009828 <__ieee754_asinf+0x26c>)
 8009734:	f7f7 fb9a 	bl	8000e6c <__aeabi_fsub>
 8009738:	1c29      	adds	r1, r5, #0
 800973a:	f7f7 fa71 	bl	8000c20 <__aeabi_fmul>
 800973e:	493b      	ldr	r1, [pc, #236]	; (800982c <__ieee754_asinf+0x270>)
 8009740:	f7f6 ff08 	bl	8000554 <__aeabi_fadd>
 8009744:	1c29      	adds	r1, r5, #0
 8009746:	f7f7 fa6b 	bl	8000c20 <__aeabi_fmul>
 800974a:	4939      	ldr	r1, [pc, #228]	; (8009830 <__ieee754_asinf+0x274>)
 800974c:	1c06      	adds	r6, r0, #0
 800974e:	1c28      	adds	r0, r5, #0
 8009750:	f7f7 fa66 	bl	8000c20 <__aeabi_fmul>
 8009754:	4937      	ldr	r1, [pc, #220]	; (8009834 <__ieee754_asinf+0x278>)
 8009756:	f7f7 fb89 	bl	8000e6c <__aeabi_fsub>
 800975a:	1c29      	adds	r1, r5, #0
 800975c:	f7f7 fa60 	bl	8000c20 <__aeabi_fmul>
 8009760:	4935      	ldr	r1, [pc, #212]	; (8009838 <__ieee754_asinf+0x27c>)
 8009762:	f7f6 fef7 	bl	8000554 <__aeabi_fadd>
 8009766:	1c29      	adds	r1, r5, #0
 8009768:	f7f7 fa5a 	bl	8000c20 <__aeabi_fmul>
 800976c:	4933      	ldr	r1, [pc, #204]	; (800983c <__ieee754_asinf+0x280>)
 800976e:	f7f7 fb7d 	bl	8000e6c <__aeabi_fsub>
 8009772:	1c29      	adds	r1, r5, #0
 8009774:	f7f7 fa54 	bl	8000c20 <__aeabi_fmul>
 8009778:	21fe      	movs	r1, #254	; 0xfe
 800977a:	0589      	lsls	r1, r1, #22
 800977c:	f7f6 feea 	bl	8000554 <__aeabi_fadd>
 8009780:	1c01      	adds	r1, r0, #0
 8009782:	1c30      	adds	r0, r6, #0
 8009784:	f7f7 f884 	bl	8000890 <__aeabi_fdiv>
 8009788:	1c21      	adds	r1, r4, #0
 800978a:	f7f7 fa49 	bl	8000c20 <__aeabi_fmul>
 800978e:	1c01      	adds	r1, r0, #0
 8009790:	1c20      	adds	r0, r4, #0
 8009792:	e727      	b.n	80095e4 <__ieee754_asinf+0x28>
 8009794:	1c01      	adds	r1, r0, #0
 8009796:	0b06      	lsrs	r6, r0, #12
 8009798:	f7f6 fedc 	bl	8000554 <__aeabi_fadd>
 800979c:	1c39      	adds	r1, r7, #0
 800979e:	9003      	str	r0, [sp, #12]
 80097a0:	9801      	ldr	r0, [sp, #4]
 80097a2:	f7f7 f875 	bl	8000890 <__aeabi_fdiv>
 80097a6:	1c01      	adds	r1, r0, #0
 80097a8:	9803      	ldr	r0, [sp, #12]
 80097aa:	f7f7 fa39 	bl	8000c20 <__aeabi_fmul>
 80097ae:	0336      	lsls	r6, r6, #12
 80097b0:	1c07      	adds	r7, r0, #0
 80097b2:	1c31      	adds	r1, r6, #0
 80097b4:	1c30      	adds	r0, r6, #0
 80097b6:	f7f7 fa33 	bl	8000c20 <__aeabi_fmul>
 80097ba:	1c01      	adds	r1, r0, #0
 80097bc:	1c20      	adds	r0, r4, #0
 80097be:	f7f7 fb55 	bl	8000e6c <__aeabi_fsub>
 80097c2:	1c31      	adds	r1, r6, #0
 80097c4:	1c04      	adds	r4, r0, #0
 80097c6:	1c28      	adds	r0, r5, #0
 80097c8:	f7f6 fec4 	bl	8000554 <__aeabi_fadd>
 80097cc:	1c01      	adds	r1, r0, #0
 80097ce:	1c20      	adds	r0, r4, #0
 80097d0:	f7f7 f85e 	bl	8000890 <__aeabi_fdiv>
 80097d4:	1c01      	adds	r1, r0, #0
 80097d6:	f7f6 febd 	bl	8000554 <__aeabi_fadd>
 80097da:	1c01      	adds	r1, r0, #0
 80097dc:	480c      	ldr	r0, [pc, #48]	; (8009810 <__ieee754_asinf+0x254>)
 80097de:	f7f7 fb45 	bl	8000e6c <__aeabi_fsub>
 80097e2:	1c01      	adds	r1, r0, #0
 80097e4:	1c38      	adds	r0, r7, #0
 80097e6:	f7f7 fb41 	bl	8000e6c <__aeabi_fsub>
 80097ea:	1c31      	adds	r1, r6, #0
 80097ec:	1c04      	adds	r4, r0, #0
 80097ee:	1c30      	adds	r0, r6, #0
 80097f0:	f7f6 feb0 	bl	8000554 <__aeabi_fadd>
 80097f4:	1c01      	adds	r1, r0, #0
 80097f6:	4814      	ldr	r0, [pc, #80]	; (8009848 <__ieee754_asinf+0x28c>)
 80097f8:	f7f7 fb38 	bl	8000e6c <__aeabi_fsub>
 80097fc:	1c01      	adds	r1, r0, #0
 80097fe:	1c20      	adds	r0, r4, #0
 8009800:	f7f7 fb34 	bl	8000e6c <__aeabi_fsub>
 8009804:	1c01      	adds	r1, r0, #0
 8009806:	4810      	ldr	r0, [pc, #64]	; (8009848 <__ieee754_asinf+0x28c>)
 8009808:	e76f      	b.n	80096ea <__ieee754_asinf+0x12e>
 800980a:	46c0      	nop			; (mov r8, r8)
 800980c:	3fc90fdb 	.word	0x3fc90fdb
 8009810:	b33bbd2e 	.word	0xb33bbd2e
 8009814:	7149f2ca 	.word	0x7149f2ca
 8009818:	3811ef08 	.word	0x3811ef08
 800981c:	3a4f7f04 	.word	0x3a4f7f04
 8009820:	3d241146 	.word	0x3d241146
 8009824:	3e4e0aa8 	.word	0x3e4e0aa8
 8009828:	3ea6b090 	.word	0x3ea6b090
 800982c:	3e2aaaab 	.word	0x3e2aaaab
 8009830:	3d9dc62e 	.word	0x3d9dc62e
 8009834:	3f303361 	.word	0x3f303361
 8009838:	4001572d 	.word	0x4001572d
 800983c:	4019d139 	.word	0x4019d139
 8009840:	3f799999 	.word	0x3f799999
 8009844:	333bbd2e 	.word	0x333bbd2e
 8009848:	3f490fdb 	.word	0x3f490fdb

0800984c <__ieee754_atan2f>:
 800984c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800984e:	25ff      	movs	r5, #255	; 0xff
 8009850:	004a      	lsls	r2, r1, #1
 8009852:	9101      	str	r1, [sp, #4]
 8009854:	0852      	lsrs	r2, r2, #1
 8009856:	05ed      	lsls	r5, r5, #23
 8009858:	42aa      	cmp	r2, r5
 800985a:	dc04      	bgt.n	8009866 <__ieee754_atan2f+0x1a>
 800985c:	0043      	lsls	r3, r0, #1
 800985e:	0007      	movs	r7, r0
 8009860:	085b      	lsrs	r3, r3, #1
 8009862:	42ab      	cmp	r3, r5
 8009864:	dd02      	ble.n	800986c <__ieee754_atan2f+0x20>
 8009866:	f7f6 fe75 	bl	8000554 <__aeabi_fadd>
 800986a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800986c:	24fe      	movs	r4, #254	; 0xfe
 800986e:	05a4      	lsls	r4, r4, #22
 8009870:	42a1      	cmp	r1, r4
 8009872:	d102      	bne.n	800987a <__ieee754_atan2f+0x2e>
 8009874:	f000 f8be 	bl	80099f4 <atanf>
 8009878:	e7f7      	b.n	800986a <__ieee754_atan2f+0x1e>
 800987a:	2602      	movs	r6, #2
 800987c:	178c      	asrs	r4, r1, #30
 800987e:	4034      	ands	r4, r6
 8009880:	0fc6      	lsrs	r6, r0, #31
 8009882:	4334      	orrs	r4, r6
 8009884:	2b00      	cmp	r3, #0
 8009886:	d105      	bne.n	8009894 <__ieee754_atan2f+0x48>
 8009888:	2c02      	cmp	r4, #2
 800988a:	d045      	beq.n	8009918 <__ieee754_atan2f+0xcc>
 800988c:	2c03      	cmp	r4, #3
 800988e:	d1ec      	bne.n	800986a <__ieee754_atan2f+0x1e>
 8009890:	4824      	ldr	r0, [pc, #144]	; (8009924 <__ieee754_atan2f+0xd8>)
 8009892:	e7ea      	b.n	800986a <__ieee754_atan2f+0x1e>
 8009894:	2a00      	cmp	r2, #0
 8009896:	d103      	bne.n	80098a0 <__ieee754_atan2f+0x54>
 8009898:	2f00      	cmp	r7, #0
 800989a:	da41      	bge.n	8009920 <__ieee754_atan2f+0xd4>
 800989c:	4822      	ldr	r0, [pc, #136]	; (8009928 <__ieee754_atan2f+0xdc>)
 800989e:	e7e4      	b.n	800986a <__ieee754_atan2f+0x1e>
 80098a0:	42aa      	cmp	r2, r5
 80098a2:	d10e      	bne.n	80098c2 <__ieee754_atan2f+0x76>
 80098a4:	3c01      	subs	r4, #1
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d105      	bne.n	80098b6 <__ieee754_atan2f+0x6a>
 80098aa:	2c02      	cmp	r4, #2
 80098ac:	d836      	bhi.n	800991c <__ieee754_atan2f+0xd0>
 80098ae:	4b1f      	ldr	r3, [pc, #124]	; (800992c <__ieee754_atan2f+0xe0>)
 80098b0:	00a4      	lsls	r4, r4, #2
 80098b2:	58e0      	ldr	r0, [r4, r3]
 80098b4:	e7d9      	b.n	800986a <__ieee754_atan2f+0x1e>
 80098b6:	2000      	movs	r0, #0
 80098b8:	2c02      	cmp	r4, #2
 80098ba:	d8d6      	bhi.n	800986a <__ieee754_atan2f+0x1e>
 80098bc:	4b1c      	ldr	r3, [pc, #112]	; (8009930 <__ieee754_atan2f+0xe4>)
 80098be:	00a4      	lsls	r4, r4, #2
 80098c0:	e7f7      	b.n	80098b2 <__ieee754_atan2f+0x66>
 80098c2:	42ab      	cmp	r3, r5
 80098c4:	d0e8      	beq.n	8009898 <__ieee754_atan2f+0x4c>
 80098c6:	1a9b      	subs	r3, r3, r2
 80098c8:	15db      	asrs	r3, r3, #23
 80098ca:	2b3c      	cmp	r3, #60	; 0x3c
 80098cc:	dc14      	bgt.n	80098f8 <__ieee754_atan2f+0xac>
 80098ce:	2900      	cmp	r1, #0
 80098d0:	da01      	bge.n	80098d6 <__ieee754_atan2f+0x8a>
 80098d2:	333c      	adds	r3, #60	; 0x3c
 80098d4:	db12      	blt.n	80098fc <__ieee754_atan2f+0xb0>
 80098d6:	f7f6 ffdb 	bl	8000890 <__aeabi_fdiv>
 80098da:	f000 f99b 	bl	8009c14 <fabsf>
 80098de:	f000 f889 	bl	80099f4 <atanf>
 80098e2:	2c01      	cmp	r4, #1
 80098e4:	d00c      	beq.n	8009900 <__ieee754_atan2f+0xb4>
 80098e6:	2c02      	cmp	r4, #2
 80098e8:	d00e      	beq.n	8009908 <__ieee754_atan2f+0xbc>
 80098ea:	2c00      	cmp	r4, #0
 80098ec:	d0bd      	beq.n	800986a <__ieee754_atan2f+0x1e>
 80098ee:	4911      	ldr	r1, [pc, #68]	; (8009934 <__ieee754_atan2f+0xe8>)
 80098f0:	f7f6 fe30 	bl	8000554 <__aeabi_fadd>
 80098f4:	4910      	ldr	r1, [pc, #64]	; (8009938 <__ieee754_atan2f+0xec>)
 80098f6:	e00c      	b.n	8009912 <__ieee754_atan2f+0xc6>
 80098f8:	4810      	ldr	r0, [pc, #64]	; (800993c <__ieee754_atan2f+0xf0>)
 80098fa:	e7f2      	b.n	80098e2 <__ieee754_atan2f+0x96>
 80098fc:	2000      	movs	r0, #0
 80098fe:	e7f0      	b.n	80098e2 <__ieee754_atan2f+0x96>
 8009900:	2380      	movs	r3, #128	; 0x80
 8009902:	061b      	lsls	r3, r3, #24
 8009904:	18c0      	adds	r0, r0, r3
 8009906:	e7b0      	b.n	800986a <__ieee754_atan2f+0x1e>
 8009908:	490a      	ldr	r1, [pc, #40]	; (8009934 <__ieee754_atan2f+0xe8>)
 800990a:	f7f6 fe23 	bl	8000554 <__aeabi_fadd>
 800990e:	1c01      	adds	r1, r0, #0
 8009910:	4809      	ldr	r0, [pc, #36]	; (8009938 <__ieee754_atan2f+0xec>)
 8009912:	f7f7 faab 	bl	8000e6c <__aeabi_fsub>
 8009916:	e7a8      	b.n	800986a <__ieee754_atan2f+0x1e>
 8009918:	4807      	ldr	r0, [pc, #28]	; (8009938 <__ieee754_atan2f+0xec>)
 800991a:	e7a6      	b.n	800986a <__ieee754_atan2f+0x1e>
 800991c:	4808      	ldr	r0, [pc, #32]	; (8009940 <__ieee754_atan2f+0xf4>)
 800991e:	e7a4      	b.n	800986a <__ieee754_atan2f+0x1e>
 8009920:	4806      	ldr	r0, [pc, #24]	; (800993c <__ieee754_atan2f+0xf0>)
 8009922:	e7a2      	b.n	800986a <__ieee754_atan2f+0x1e>
 8009924:	c0490fdb 	.word	0xc0490fdb
 8009928:	bfc90fdb 	.word	0xbfc90fdb
 800992c:	0800a234 	.word	0x0800a234
 8009930:	0800a240 	.word	0x0800a240
 8009934:	33bbbd2e 	.word	0x33bbbd2e
 8009938:	40490fdb 	.word	0x40490fdb
 800993c:	3fc90fdb 	.word	0x3fc90fdb
 8009940:	3f490fdb 	.word	0x3f490fdb

08009944 <__ieee754_sqrtf>:
 8009944:	0042      	lsls	r2, r0, #1
 8009946:	0003      	movs	r3, r0
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	1c04      	adds	r4, r0, #0
 800994c:	20ff      	movs	r0, #255	; 0xff
 800994e:	0852      	lsrs	r2, r2, #1
 8009950:	05c0      	lsls	r0, r0, #23
 8009952:	4282      	cmp	r2, r0
 8009954:	d30a      	bcc.n	800996c <__ieee754_sqrtf+0x28>
 8009956:	1c21      	adds	r1, r4, #0
 8009958:	1c20      	adds	r0, r4, #0
 800995a:	f7f7 f961 	bl	8000c20 <__aeabi_fmul>
 800995e:	1c01      	adds	r1, r0, #0
 8009960:	1c20      	adds	r0, r4, #0
 8009962:	f7f6 fdf7 	bl	8000554 <__aeabi_fadd>
 8009966:	1c04      	adds	r4, r0, #0
 8009968:	1c20      	adds	r0, r4, #0
 800996a:	bd70      	pop	{r4, r5, r6, pc}
 800996c:	2a00      	cmp	r2, #0
 800996e:	d0fb      	beq.n	8009968 <__ieee754_sqrtf+0x24>
 8009970:	2c00      	cmp	r4, #0
 8009972:	da07      	bge.n	8009984 <__ieee754_sqrtf+0x40>
 8009974:	1c21      	adds	r1, r4, #0
 8009976:	1c20      	adds	r0, r4, #0
 8009978:	f7f7 fa78 	bl	8000e6c <__aeabi_fsub>
 800997c:	1c01      	adds	r1, r0, #0
 800997e:	f7f6 ff87 	bl	8000890 <__aeabi_fdiv>
 8009982:	e7f0      	b.n	8009966 <__ieee754_sqrtf+0x22>
 8009984:	0022      	movs	r2, r4
 8009986:	15e1      	asrs	r1, r4, #23
 8009988:	4002      	ands	r2, r0
 800998a:	4204      	tst	r4, r0
 800998c:	d02e      	beq.n	80099ec <__ieee754_sqrtf+0xa8>
 800998e:	2280      	movs	r2, #128	; 0x80
 8009990:	000c      	movs	r4, r1
 8009992:	025b      	lsls	r3, r3, #9
 8009994:	0a5b      	lsrs	r3, r3, #9
 8009996:	0412      	lsls	r2, r2, #16
 8009998:	3c7f      	subs	r4, #127	; 0x7f
 800999a:	4313      	orrs	r3, r2
 800999c:	07ca      	lsls	r2, r1, #31
 800999e:	d400      	bmi.n	80099a2 <__ieee754_sqrtf+0x5e>
 80099a0:	005b      	lsls	r3, r3, #1
 80099a2:	2200      	movs	r2, #0
 80099a4:	2180      	movs	r1, #128	; 0x80
 80099a6:	2019      	movs	r0, #25
 80099a8:	0016      	movs	r6, r2
 80099aa:	1064      	asrs	r4, r4, #1
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	0449      	lsls	r1, r1, #17
 80099b0:	1875      	adds	r5, r6, r1
 80099b2:	429d      	cmp	r5, r3
 80099b4:	dc02      	bgt.n	80099bc <__ieee754_sqrtf+0x78>
 80099b6:	186e      	adds	r6, r5, r1
 80099b8:	1b5b      	subs	r3, r3, r5
 80099ba:	1852      	adds	r2, r2, r1
 80099bc:	3801      	subs	r0, #1
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	0849      	lsrs	r1, r1, #1
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d1f4      	bne.n	80099b0 <__ieee754_sqrtf+0x6c>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <__ieee754_sqrtf+0x8c>
 80099ca:	2301      	movs	r3, #1
 80099cc:	3201      	adds	r2, #1
 80099ce:	439a      	bics	r2, r3
 80099d0:	23fc      	movs	r3, #252	; 0xfc
 80099d2:	1052      	asrs	r2, r2, #1
 80099d4:	059b      	lsls	r3, r3, #22
 80099d6:	18d2      	adds	r2, r2, r3
 80099d8:	05e4      	lsls	r4, r4, #23
 80099da:	18a4      	adds	r4, r4, r2
 80099dc:	e7c4      	b.n	8009968 <__ieee754_sqrtf+0x24>
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	3201      	adds	r2, #1
 80099e2:	4203      	tst	r3, r0
 80099e4:	d0fb      	beq.n	80099de <__ieee754_sqrtf+0x9a>
 80099e6:	3a01      	subs	r2, #1
 80099e8:	1a89      	subs	r1, r1, r2
 80099ea:	e7d0      	b.n	800998e <__ieee754_sqrtf+0x4a>
 80099ec:	2080      	movs	r0, #128	; 0x80
 80099ee:	0400      	lsls	r0, r0, #16
 80099f0:	e7f7      	b.n	80099e2 <__ieee754_sqrtf+0x9e>
	...

080099f4 <atanf>:
 80099f4:	23a1      	movs	r3, #161	; 0xa1
 80099f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099f8:	0045      	lsls	r5, r0, #1
 80099fa:	1c04      	adds	r4, r0, #0
 80099fc:	9001      	str	r0, [sp, #4]
 80099fe:	086d      	lsrs	r5, r5, #1
 8009a00:	05db      	lsls	r3, r3, #23
 8009a02:	429d      	cmp	r5, r3
 8009a04:	db0f      	blt.n	8009a26 <atanf+0x32>
 8009a06:	23ff      	movs	r3, #255	; 0xff
 8009a08:	05db      	lsls	r3, r3, #23
 8009a0a:	429d      	cmp	r5, r3
 8009a0c:	dd04      	ble.n	8009a18 <atanf+0x24>
 8009a0e:	1c01      	adds	r1, r0, #0
 8009a10:	f7f6 fda0 	bl	8000554 <__aeabi_fadd>
 8009a14:	1c04      	adds	r4, r0, #0
 8009a16:	e004      	b.n	8009a22 <atanf+0x2e>
 8009a18:	9b01      	ldr	r3, [sp, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	dd00      	ble.n	8009a20 <atanf+0x2c>
 8009a1e:	e0cc      	b.n	8009bba <atanf+0x1c6>
 8009a20:	4c67      	ldr	r4, [pc, #412]	; (8009bc0 <atanf+0x1cc>)
 8009a22:	1c20      	adds	r0, r4, #0
 8009a24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a26:	4b67      	ldr	r3, [pc, #412]	; (8009bc4 <atanf+0x1d0>)
 8009a28:	429d      	cmp	r5, r3
 8009a2a:	dc0f      	bgt.n	8009a4c <atanf+0x58>
 8009a2c:	23c4      	movs	r3, #196	; 0xc4
 8009a2e:	059b      	lsls	r3, r3, #22
 8009a30:	429d      	cmp	r5, r3
 8009a32:	da08      	bge.n	8009a46 <atanf+0x52>
 8009a34:	4964      	ldr	r1, [pc, #400]	; (8009bc8 <atanf+0x1d4>)
 8009a36:	f7f6 fd8d 	bl	8000554 <__aeabi_fadd>
 8009a3a:	21fe      	movs	r1, #254	; 0xfe
 8009a3c:	0589      	lsls	r1, r1, #22
 8009a3e:	f7f6 fd57 	bl	80004f0 <__aeabi_fcmpgt>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d1ed      	bne.n	8009a22 <atanf+0x2e>
 8009a46:	2601      	movs	r6, #1
 8009a48:	4276      	negs	r6, r6
 8009a4a:	e01b      	b.n	8009a84 <atanf+0x90>
 8009a4c:	f000 f8e2 	bl	8009c14 <fabsf>
 8009a50:	4b5e      	ldr	r3, [pc, #376]	; (8009bcc <atanf+0x1d8>)
 8009a52:	1c04      	adds	r4, r0, #0
 8009a54:	429d      	cmp	r5, r3
 8009a56:	dc7b      	bgt.n	8009b50 <atanf+0x15c>
 8009a58:	4b5d      	ldr	r3, [pc, #372]	; (8009bd0 <atanf+0x1dc>)
 8009a5a:	429d      	cmp	r5, r3
 8009a5c:	dc67      	bgt.n	8009b2e <atanf+0x13a>
 8009a5e:	1c01      	adds	r1, r0, #0
 8009a60:	f7f6 fd78 	bl	8000554 <__aeabi_fadd>
 8009a64:	21fe      	movs	r1, #254	; 0xfe
 8009a66:	0589      	lsls	r1, r1, #22
 8009a68:	f7f7 fa00 	bl	8000e6c <__aeabi_fsub>
 8009a6c:	2180      	movs	r1, #128	; 0x80
 8009a6e:	1c05      	adds	r5, r0, #0
 8009a70:	05c9      	lsls	r1, r1, #23
 8009a72:	1c20      	adds	r0, r4, #0
 8009a74:	f7f6 fd6e 	bl	8000554 <__aeabi_fadd>
 8009a78:	1c01      	adds	r1, r0, #0
 8009a7a:	1c28      	adds	r0, r5, #0
 8009a7c:	f7f6 ff08 	bl	8000890 <__aeabi_fdiv>
 8009a80:	2600      	movs	r6, #0
 8009a82:	1c04      	adds	r4, r0, #0
 8009a84:	1c21      	adds	r1, r4, #0
 8009a86:	1c20      	adds	r0, r4, #0
 8009a88:	f7f7 f8ca 	bl	8000c20 <__aeabi_fmul>
 8009a8c:	1c01      	adds	r1, r0, #0
 8009a8e:	1c07      	adds	r7, r0, #0
 8009a90:	f7f7 f8c6 	bl	8000c20 <__aeabi_fmul>
 8009a94:	494f      	ldr	r1, [pc, #316]	; (8009bd4 <atanf+0x1e0>)
 8009a96:	1c05      	adds	r5, r0, #0
 8009a98:	f7f7 f8c2 	bl	8000c20 <__aeabi_fmul>
 8009a9c:	494e      	ldr	r1, [pc, #312]	; (8009bd8 <atanf+0x1e4>)
 8009a9e:	f7f6 fd59 	bl	8000554 <__aeabi_fadd>
 8009aa2:	1c29      	adds	r1, r5, #0
 8009aa4:	f7f7 f8bc 	bl	8000c20 <__aeabi_fmul>
 8009aa8:	494c      	ldr	r1, [pc, #304]	; (8009bdc <atanf+0x1e8>)
 8009aaa:	f7f6 fd53 	bl	8000554 <__aeabi_fadd>
 8009aae:	1c29      	adds	r1, r5, #0
 8009ab0:	f7f7 f8b6 	bl	8000c20 <__aeabi_fmul>
 8009ab4:	494a      	ldr	r1, [pc, #296]	; (8009be0 <atanf+0x1ec>)
 8009ab6:	f7f6 fd4d 	bl	8000554 <__aeabi_fadd>
 8009aba:	1c29      	adds	r1, r5, #0
 8009abc:	f7f7 f8b0 	bl	8000c20 <__aeabi_fmul>
 8009ac0:	4948      	ldr	r1, [pc, #288]	; (8009be4 <atanf+0x1f0>)
 8009ac2:	f7f6 fd47 	bl	8000554 <__aeabi_fadd>
 8009ac6:	1c29      	adds	r1, r5, #0
 8009ac8:	f7f7 f8aa 	bl	8000c20 <__aeabi_fmul>
 8009acc:	4946      	ldr	r1, [pc, #280]	; (8009be8 <atanf+0x1f4>)
 8009ace:	f7f6 fd41 	bl	8000554 <__aeabi_fadd>
 8009ad2:	1c39      	adds	r1, r7, #0
 8009ad4:	f7f7 f8a4 	bl	8000c20 <__aeabi_fmul>
 8009ad8:	4944      	ldr	r1, [pc, #272]	; (8009bec <atanf+0x1f8>)
 8009ada:	1c07      	adds	r7, r0, #0
 8009adc:	1c28      	adds	r0, r5, #0
 8009ade:	f7f7 f89f 	bl	8000c20 <__aeabi_fmul>
 8009ae2:	4943      	ldr	r1, [pc, #268]	; (8009bf0 <atanf+0x1fc>)
 8009ae4:	f7f7 f9c2 	bl	8000e6c <__aeabi_fsub>
 8009ae8:	1c29      	adds	r1, r5, #0
 8009aea:	f7f7 f899 	bl	8000c20 <__aeabi_fmul>
 8009aee:	4941      	ldr	r1, [pc, #260]	; (8009bf4 <atanf+0x200>)
 8009af0:	f7f7 f9bc 	bl	8000e6c <__aeabi_fsub>
 8009af4:	1c29      	adds	r1, r5, #0
 8009af6:	f7f7 f893 	bl	8000c20 <__aeabi_fmul>
 8009afa:	493f      	ldr	r1, [pc, #252]	; (8009bf8 <atanf+0x204>)
 8009afc:	f7f7 f9b6 	bl	8000e6c <__aeabi_fsub>
 8009b00:	1c29      	adds	r1, r5, #0
 8009b02:	f7f7 f88d 	bl	8000c20 <__aeabi_fmul>
 8009b06:	493d      	ldr	r1, [pc, #244]	; (8009bfc <atanf+0x208>)
 8009b08:	f7f7 f9b0 	bl	8000e6c <__aeabi_fsub>
 8009b0c:	1c29      	adds	r1, r5, #0
 8009b0e:	f7f7 f887 	bl	8000c20 <__aeabi_fmul>
 8009b12:	1c01      	adds	r1, r0, #0
 8009b14:	1c38      	adds	r0, r7, #0
 8009b16:	f7f6 fd1d 	bl	8000554 <__aeabi_fadd>
 8009b1a:	1c21      	adds	r1, r4, #0
 8009b1c:	f7f7 f880 	bl	8000c20 <__aeabi_fmul>
 8009b20:	1c73      	adds	r3, r6, #1
 8009b22:	d134      	bne.n	8009b8e <atanf+0x19a>
 8009b24:	1c01      	adds	r1, r0, #0
 8009b26:	1c20      	adds	r0, r4, #0
 8009b28:	f7f7 f9a0 	bl	8000e6c <__aeabi_fsub>
 8009b2c:	e772      	b.n	8009a14 <atanf+0x20>
 8009b2e:	21fe      	movs	r1, #254	; 0xfe
 8009b30:	0589      	lsls	r1, r1, #22
 8009b32:	f7f7 f99b 	bl	8000e6c <__aeabi_fsub>
 8009b36:	21fe      	movs	r1, #254	; 0xfe
 8009b38:	1c05      	adds	r5, r0, #0
 8009b3a:	0589      	lsls	r1, r1, #22
 8009b3c:	1c20      	adds	r0, r4, #0
 8009b3e:	f7f6 fd09 	bl	8000554 <__aeabi_fadd>
 8009b42:	1c01      	adds	r1, r0, #0
 8009b44:	1c28      	adds	r0, r5, #0
 8009b46:	f7f6 fea3 	bl	8000890 <__aeabi_fdiv>
 8009b4a:	2601      	movs	r6, #1
 8009b4c:	1c04      	adds	r4, r0, #0
 8009b4e:	e799      	b.n	8009a84 <atanf+0x90>
 8009b50:	4b2b      	ldr	r3, [pc, #172]	; (8009c00 <atanf+0x20c>)
 8009b52:	429d      	cmp	r5, r3
 8009b54:	dc14      	bgt.n	8009b80 <atanf+0x18c>
 8009b56:	21ff      	movs	r1, #255	; 0xff
 8009b58:	0589      	lsls	r1, r1, #22
 8009b5a:	f7f7 f987 	bl	8000e6c <__aeabi_fsub>
 8009b5e:	21ff      	movs	r1, #255	; 0xff
 8009b60:	1c05      	adds	r5, r0, #0
 8009b62:	0589      	lsls	r1, r1, #22
 8009b64:	1c20      	adds	r0, r4, #0
 8009b66:	f7f7 f85b 	bl	8000c20 <__aeabi_fmul>
 8009b6a:	21fe      	movs	r1, #254	; 0xfe
 8009b6c:	0589      	lsls	r1, r1, #22
 8009b6e:	f7f6 fcf1 	bl	8000554 <__aeabi_fadd>
 8009b72:	1c01      	adds	r1, r0, #0
 8009b74:	1c28      	adds	r0, r5, #0
 8009b76:	f7f6 fe8b 	bl	8000890 <__aeabi_fdiv>
 8009b7a:	2602      	movs	r6, #2
 8009b7c:	1c04      	adds	r4, r0, #0
 8009b7e:	e781      	b.n	8009a84 <atanf+0x90>
 8009b80:	1c01      	adds	r1, r0, #0
 8009b82:	4820      	ldr	r0, [pc, #128]	; (8009c04 <atanf+0x210>)
 8009b84:	f7f6 fe84 	bl	8000890 <__aeabi_fdiv>
 8009b88:	2603      	movs	r6, #3
 8009b8a:	1c04      	adds	r4, r0, #0
 8009b8c:	e77a      	b.n	8009a84 <atanf+0x90>
 8009b8e:	4b1e      	ldr	r3, [pc, #120]	; (8009c08 <atanf+0x214>)
 8009b90:	00b6      	lsls	r6, r6, #2
 8009b92:	58f1      	ldr	r1, [r6, r3]
 8009b94:	f7f7 f96a 	bl	8000e6c <__aeabi_fsub>
 8009b98:	1c21      	adds	r1, r4, #0
 8009b9a:	f7f7 f967 	bl	8000e6c <__aeabi_fsub>
 8009b9e:	4b1b      	ldr	r3, [pc, #108]	; (8009c0c <atanf+0x218>)
 8009ba0:	1c01      	adds	r1, r0, #0
 8009ba2:	58f0      	ldr	r0, [r6, r3]
 8009ba4:	f7f7 f962 	bl	8000e6c <__aeabi_fsub>
 8009ba8:	9b01      	ldr	r3, [sp, #4]
 8009baa:	1c04      	adds	r4, r0, #0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	db00      	blt.n	8009bb2 <atanf+0x1be>
 8009bb0:	e737      	b.n	8009a22 <atanf+0x2e>
 8009bb2:	2380      	movs	r3, #128	; 0x80
 8009bb4:	061b      	lsls	r3, r3, #24
 8009bb6:	18c4      	adds	r4, r0, r3
 8009bb8:	e733      	b.n	8009a22 <atanf+0x2e>
 8009bba:	4c15      	ldr	r4, [pc, #84]	; (8009c10 <atanf+0x21c>)
 8009bbc:	e731      	b.n	8009a22 <atanf+0x2e>
 8009bbe:	46c0      	nop			; (mov r8, r8)
 8009bc0:	bfc90fdb 	.word	0xbfc90fdb
 8009bc4:	3edfffff 	.word	0x3edfffff
 8009bc8:	7149f2ca 	.word	0x7149f2ca
 8009bcc:	3f97ffff 	.word	0x3f97ffff
 8009bd0:	3f2fffff 	.word	0x3f2fffff
 8009bd4:	3c8569d7 	.word	0x3c8569d7
 8009bd8:	3d4bda59 	.word	0x3d4bda59
 8009bdc:	3d886b35 	.word	0x3d886b35
 8009be0:	3dba2e6e 	.word	0x3dba2e6e
 8009be4:	3e124925 	.word	0x3e124925
 8009be8:	3eaaaaab 	.word	0x3eaaaaab
 8009bec:	bd15a221 	.word	0xbd15a221
 8009bf0:	3d6ef16b 	.word	0x3d6ef16b
 8009bf4:	3d9d8795 	.word	0x3d9d8795
 8009bf8:	3de38e38 	.word	0x3de38e38
 8009bfc:	3e4ccccd 	.word	0x3e4ccccd
 8009c00:	401bffff 	.word	0x401bffff
 8009c04:	bf800000 	.word	0xbf800000
 8009c08:	0800a25c 	.word	0x0800a25c
 8009c0c:	0800a24c 	.word	0x0800a24c
 8009c10:	3fc90fdb 	.word	0x3fc90fdb

08009c14 <fabsf>:
 8009c14:	0040      	lsls	r0, r0, #1
 8009c16:	0840      	lsrs	r0, r0, #1
 8009c18:	4770      	bx	lr
	...

08009c1c <nanf>:
 8009c1c:	4800      	ldr	r0, [pc, #0]	; (8009c20 <nanf+0x4>)
 8009c1e:	4770      	bx	lr
 8009c20:	7fc00000 	.word	0x7fc00000

08009c24 <_init>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	46c0      	nop			; (mov r8, r8)
 8009c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c2a:	bc08      	pop	{r3}
 8009c2c:	469e      	mov	lr, r3
 8009c2e:	4770      	bx	lr

08009c30 <_fini>:
 8009c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c32:	46c0      	nop			; (mov r8, r8)
 8009c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c36:	bc08      	pop	{r3}
 8009c38:	469e      	mov	lr, r3
 8009c3a:	4770      	bx	lr
