
g031_oilSensor_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08002800  08002800  00002800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a518  080028bc  080028bc  000028bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  0800cdd8  0800cdd8  0000cdd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d670  0800d670  00010120  2**0
                  CONTENTS
  4 .ARM          00000000  0800d670  0800d670  00010120  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d670  0800d670  00010120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d670  0800d670  0000d670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d674  0800d674  0000d674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800d678  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f30  20000120  0800d798  00010120  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001050  0800d798  00011050  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef89  00000000  00000000  00010148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d44  00000000  00000000  0001f0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00021e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00022ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043e4  00000000  00000000  00023a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a3a  00000000  00000000  00027e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c2d9  00000000  00000000  0003a876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6b4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fec  00000000  00000000  000d6ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080028bc <__do_global_dtors_aux>:
 80028bc:	b510      	push	{r4, lr}
 80028be:	4c06      	ldr	r4, [pc, #24]	; (80028d8 <__do_global_dtors_aux+0x1c>)
 80028c0:	7823      	ldrb	r3, [r4, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d107      	bne.n	80028d6 <__do_global_dtors_aux+0x1a>
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <__do_global_dtors_aux+0x20>)
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <__do_global_dtors_aux+0x16>
 80028cc:	4804      	ldr	r0, [pc, #16]	; (80028e0 <__do_global_dtors_aux+0x24>)
 80028ce:	e000      	b.n	80028d2 <__do_global_dtors_aux+0x16>
 80028d0:	bf00      	nop
 80028d2:	2301      	movs	r3, #1
 80028d4:	7023      	strb	r3, [r4, #0]
 80028d6:	bd10      	pop	{r4, pc}
 80028d8:	20000120 	.word	0x20000120
 80028dc:	00000000 	.word	0x00000000
 80028e0:	0800cdbc 	.word	0x0800cdbc

080028e4 <frame_dummy>:
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <frame_dummy+0x14>)
 80028e6:	b510      	push	{r4, lr}
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <frame_dummy+0x10>
 80028ec:	4903      	ldr	r1, [pc, #12]	; (80028fc <frame_dummy+0x18>)
 80028ee:	4804      	ldr	r0, [pc, #16]	; (8002900 <frame_dummy+0x1c>)
 80028f0:	e000      	b.n	80028f4 <frame_dummy+0x10>
 80028f2:	bf00      	nop
 80028f4:	bd10      	pop	{r4, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	00000000 	.word	0x00000000
 80028fc:	20000124 	.word	0x20000124
 8002900:	0800cdbc 	.word	0x0800cdbc

08002904 <strcmp>:
 8002904:	7802      	ldrb	r2, [r0, #0]
 8002906:	780b      	ldrb	r3, [r1, #0]
 8002908:	2a00      	cmp	r2, #0
 800290a:	d003      	beq.n	8002914 <strcmp+0x10>
 800290c:	3001      	adds	r0, #1
 800290e:	3101      	adds	r1, #1
 8002910:	429a      	cmp	r2, r3
 8002912:	d0f7      	beq.n	8002904 <strcmp>
 8002914:	1ad0      	subs	r0, r2, r3
 8002916:	4770      	bx	lr

08002918 <__gnu_thumb1_case_shi>:
 8002918:	b403      	push	{r0, r1}
 800291a:	4671      	mov	r1, lr
 800291c:	0849      	lsrs	r1, r1, #1
 800291e:	0040      	lsls	r0, r0, #1
 8002920:	0049      	lsls	r1, r1, #1
 8002922:	5e09      	ldrsh	r1, [r1, r0]
 8002924:	0049      	lsls	r1, r1, #1
 8002926:	448e      	add	lr, r1
 8002928:	bc03      	pop	{r0, r1}
 800292a:	4770      	bx	lr

0800292c <__udivsi3>:
 800292c:	2200      	movs	r2, #0
 800292e:	0843      	lsrs	r3, r0, #1
 8002930:	428b      	cmp	r3, r1
 8002932:	d374      	bcc.n	8002a1e <__udivsi3+0xf2>
 8002934:	0903      	lsrs	r3, r0, #4
 8002936:	428b      	cmp	r3, r1
 8002938:	d35f      	bcc.n	80029fa <__udivsi3+0xce>
 800293a:	0a03      	lsrs	r3, r0, #8
 800293c:	428b      	cmp	r3, r1
 800293e:	d344      	bcc.n	80029ca <__udivsi3+0x9e>
 8002940:	0b03      	lsrs	r3, r0, #12
 8002942:	428b      	cmp	r3, r1
 8002944:	d328      	bcc.n	8002998 <__udivsi3+0x6c>
 8002946:	0c03      	lsrs	r3, r0, #16
 8002948:	428b      	cmp	r3, r1
 800294a:	d30d      	bcc.n	8002968 <__udivsi3+0x3c>
 800294c:	22ff      	movs	r2, #255	; 0xff
 800294e:	0209      	lsls	r1, r1, #8
 8002950:	ba12      	rev	r2, r2
 8002952:	0c03      	lsrs	r3, r0, #16
 8002954:	428b      	cmp	r3, r1
 8002956:	d302      	bcc.n	800295e <__udivsi3+0x32>
 8002958:	1212      	asrs	r2, r2, #8
 800295a:	0209      	lsls	r1, r1, #8
 800295c:	d065      	beq.n	8002a2a <__udivsi3+0xfe>
 800295e:	0b03      	lsrs	r3, r0, #12
 8002960:	428b      	cmp	r3, r1
 8002962:	d319      	bcc.n	8002998 <__udivsi3+0x6c>
 8002964:	e000      	b.n	8002968 <__udivsi3+0x3c>
 8002966:	0a09      	lsrs	r1, r1, #8
 8002968:	0bc3      	lsrs	r3, r0, #15
 800296a:	428b      	cmp	r3, r1
 800296c:	d301      	bcc.n	8002972 <__udivsi3+0x46>
 800296e:	03cb      	lsls	r3, r1, #15
 8002970:	1ac0      	subs	r0, r0, r3
 8002972:	4152      	adcs	r2, r2
 8002974:	0b83      	lsrs	r3, r0, #14
 8002976:	428b      	cmp	r3, r1
 8002978:	d301      	bcc.n	800297e <__udivsi3+0x52>
 800297a:	038b      	lsls	r3, r1, #14
 800297c:	1ac0      	subs	r0, r0, r3
 800297e:	4152      	adcs	r2, r2
 8002980:	0b43      	lsrs	r3, r0, #13
 8002982:	428b      	cmp	r3, r1
 8002984:	d301      	bcc.n	800298a <__udivsi3+0x5e>
 8002986:	034b      	lsls	r3, r1, #13
 8002988:	1ac0      	subs	r0, r0, r3
 800298a:	4152      	adcs	r2, r2
 800298c:	0b03      	lsrs	r3, r0, #12
 800298e:	428b      	cmp	r3, r1
 8002990:	d301      	bcc.n	8002996 <__udivsi3+0x6a>
 8002992:	030b      	lsls	r3, r1, #12
 8002994:	1ac0      	subs	r0, r0, r3
 8002996:	4152      	adcs	r2, r2
 8002998:	0ac3      	lsrs	r3, r0, #11
 800299a:	428b      	cmp	r3, r1
 800299c:	d301      	bcc.n	80029a2 <__udivsi3+0x76>
 800299e:	02cb      	lsls	r3, r1, #11
 80029a0:	1ac0      	subs	r0, r0, r3
 80029a2:	4152      	adcs	r2, r2
 80029a4:	0a83      	lsrs	r3, r0, #10
 80029a6:	428b      	cmp	r3, r1
 80029a8:	d301      	bcc.n	80029ae <__udivsi3+0x82>
 80029aa:	028b      	lsls	r3, r1, #10
 80029ac:	1ac0      	subs	r0, r0, r3
 80029ae:	4152      	adcs	r2, r2
 80029b0:	0a43      	lsrs	r3, r0, #9
 80029b2:	428b      	cmp	r3, r1
 80029b4:	d301      	bcc.n	80029ba <__udivsi3+0x8e>
 80029b6:	024b      	lsls	r3, r1, #9
 80029b8:	1ac0      	subs	r0, r0, r3
 80029ba:	4152      	adcs	r2, r2
 80029bc:	0a03      	lsrs	r3, r0, #8
 80029be:	428b      	cmp	r3, r1
 80029c0:	d301      	bcc.n	80029c6 <__udivsi3+0x9a>
 80029c2:	020b      	lsls	r3, r1, #8
 80029c4:	1ac0      	subs	r0, r0, r3
 80029c6:	4152      	adcs	r2, r2
 80029c8:	d2cd      	bcs.n	8002966 <__udivsi3+0x3a>
 80029ca:	09c3      	lsrs	r3, r0, #7
 80029cc:	428b      	cmp	r3, r1
 80029ce:	d301      	bcc.n	80029d4 <__udivsi3+0xa8>
 80029d0:	01cb      	lsls	r3, r1, #7
 80029d2:	1ac0      	subs	r0, r0, r3
 80029d4:	4152      	adcs	r2, r2
 80029d6:	0983      	lsrs	r3, r0, #6
 80029d8:	428b      	cmp	r3, r1
 80029da:	d301      	bcc.n	80029e0 <__udivsi3+0xb4>
 80029dc:	018b      	lsls	r3, r1, #6
 80029de:	1ac0      	subs	r0, r0, r3
 80029e0:	4152      	adcs	r2, r2
 80029e2:	0943      	lsrs	r3, r0, #5
 80029e4:	428b      	cmp	r3, r1
 80029e6:	d301      	bcc.n	80029ec <__udivsi3+0xc0>
 80029e8:	014b      	lsls	r3, r1, #5
 80029ea:	1ac0      	subs	r0, r0, r3
 80029ec:	4152      	adcs	r2, r2
 80029ee:	0903      	lsrs	r3, r0, #4
 80029f0:	428b      	cmp	r3, r1
 80029f2:	d301      	bcc.n	80029f8 <__udivsi3+0xcc>
 80029f4:	010b      	lsls	r3, r1, #4
 80029f6:	1ac0      	subs	r0, r0, r3
 80029f8:	4152      	adcs	r2, r2
 80029fa:	08c3      	lsrs	r3, r0, #3
 80029fc:	428b      	cmp	r3, r1
 80029fe:	d301      	bcc.n	8002a04 <__udivsi3+0xd8>
 8002a00:	00cb      	lsls	r3, r1, #3
 8002a02:	1ac0      	subs	r0, r0, r3
 8002a04:	4152      	adcs	r2, r2
 8002a06:	0883      	lsrs	r3, r0, #2
 8002a08:	428b      	cmp	r3, r1
 8002a0a:	d301      	bcc.n	8002a10 <__udivsi3+0xe4>
 8002a0c:	008b      	lsls	r3, r1, #2
 8002a0e:	1ac0      	subs	r0, r0, r3
 8002a10:	4152      	adcs	r2, r2
 8002a12:	0843      	lsrs	r3, r0, #1
 8002a14:	428b      	cmp	r3, r1
 8002a16:	d301      	bcc.n	8002a1c <__udivsi3+0xf0>
 8002a18:	004b      	lsls	r3, r1, #1
 8002a1a:	1ac0      	subs	r0, r0, r3
 8002a1c:	4152      	adcs	r2, r2
 8002a1e:	1a41      	subs	r1, r0, r1
 8002a20:	d200      	bcs.n	8002a24 <__udivsi3+0xf8>
 8002a22:	4601      	mov	r1, r0
 8002a24:	4152      	adcs	r2, r2
 8002a26:	4610      	mov	r0, r2
 8002a28:	4770      	bx	lr
 8002a2a:	e7ff      	b.n	8002a2c <__udivsi3+0x100>
 8002a2c:	b501      	push	{r0, lr}
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f000 f8f0 	bl	8002c14 <__aeabi_idiv0>
 8002a34:	bd02      	pop	{r1, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)

08002a38 <__aeabi_uidivmod>:
 8002a38:	2900      	cmp	r1, #0
 8002a3a:	d0f7      	beq.n	8002a2c <__udivsi3+0x100>
 8002a3c:	e776      	b.n	800292c <__udivsi3>
 8002a3e:	4770      	bx	lr

08002a40 <__divsi3>:
 8002a40:	4603      	mov	r3, r0
 8002a42:	430b      	orrs	r3, r1
 8002a44:	d47f      	bmi.n	8002b46 <__divsi3+0x106>
 8002a46:	2200      	movs	r2, #0
 8002a48:	0843      	lsrs	r3, r0, #1
 8002a4a:	428b      	cmp	r3, r1
 8002a4c:	d374      	bcc.n	8002b38 <__divsi3+0xf8>
 8002a4e:	0903      	lsrs	r3, r0, #4
 8002a50:	428b      	cmp	r3, r1
 8002a52:	d35f      	bcc.n	8002b14 <__divsi3+0xd4>
 8002a54:	0a03      	lsrs	r3, r0, #8
 8002a56:	428b      	cmp	r3, r1
 8002a58:	d344      	bcc.n	8002ae4 <__divsi3+0xa4>
 8002a5a:	0b03      	lsrs	r3, r0, #12
 8002a5c:	428b      	cmp	r3, r1
 8002a5e:	d328      	bcc.n	8002ab2 <__divsi3+0x72>
 8002a60:	0c03      	lsrs	r3, r0, #16
 8002a62:	428b      	cmp	r3, r1
 8002a64:	d30d      	bcc.n	8002a82 <__divsi3+0x42>
 8002a66:	22ff      	movs	r2, #255	; 0xff
 8002a68:	0209      	lsls	r1, r1, #8
 8002a6a:	ba12      	rev	r2, r2
 8002a6c:	0c03      	lsrs	r3, r0, #16
 8002a6e:	428b      	cmp	r3, r1
 8002a70:	d302      	bcc.n	8002a78 <__divsi3+0x38>
 8002a72:	1212      	asrs	r2, r2, #8
 8002a74:	0209      	lsls	r1, r1, #8
 8002a76:	d065      	beq.n	8002b44 <__divsi3+0x104>
 8002a78:	0b03      	lsrs	r3, r0, #12
 8002a7a:	428b      	cmp	r3, r1
 8002a7c:	d319      	bcc.n	8002ab2 <__divsi3+0x72>
 8002a7e:	e000      	b.n	8002a82 <__divsi3+0x42>
 8002a80:	0a09      	lsrs	r1, r1, #8
 8002a82:	0bc3      	lsrs	r3, r0, #15
 8002a84:	428b      	cmp	r3, r1
 8002a86:	d301      	bcc.n	8002a8c <__divsi3+0x4c>
 8002a88:	03cb      	lsls	r3, r1, #15
 8002a8a:	1ac0      	subs	r0, r0, r3
 8002a8c:	4152      	adcs	r2, r2
 8002a8e:	0b83      	lsrs	r3, r0, #14
 8002a90:	428b      	cmp	r3, r1
 8002a92:	d301      	bcc.n	8002a98 <__divsi3+0x58>
 8002a94:	038b      	lsls	r3, r1, #14
 8002a96:	1ac0      	subs	r0, r0, r3
 8002a98:	4152      	adcs	r2, r2
 8002a9a:	0b43      	lsrs	r3, r0, #13
 8002a9c:	428b      	cmp	r3, r1
 8002a9e:	d301      	bcc.n	8002aa4 <__divsi3+0x64>
 8002aa0:	034b      	lsls	r3, r1, #13
 8002aa2:	1ac0      	subs	r0, r0, r3
 8002aa4:	4152      	adcs	r2, r2
 8002aa6:	0b03      	lsrs	r3, r0, #12
 8002aa8:	428b      	cmp	r3, r1
 8002aaa:	d301      	bcc.n	8002ab0 <__divsi3+0x70>
 8002aac:	030b      	lsls	r3, r1, #12
 8002aae:	1ac0      	subs	r0, r0, r3
 8002ab0:	4152      	adcs	r2, r2
 8002ab2:	0ac3      	lsrs	r3, r0, #11
 8002ab4:	428b      	cmp	r3, r1
 8002ab6:	d301      	bcc.n	8002abc <__divsi3+0x7c>
 8002ab8:	02cb      	lsls	r3, r1, #11
 8002aba:	1ac0      	subs	r0, r0, r3
 8002abc:	4152      	adcs	r2, r2
 8002abe:	0a83      	lsrs	r3, r0, #10
 8002ac0:	428b      	cmp	r3, r1
 8002ac2:	d301      	bcc.n	8002ac8 <__divsi3+0x88>
 8002ac4:	028b      	lsls	r3, r1, #10
 8002ac6:	1ac0      	subs	r0, r0, r3
 8002ac8:	4152      	adcs	r2, r2
 8002aca:	0a43      	lsrs	r3, r0, #9
 8002acc:	428b      	cmp	r3, r1
 8002ace:	d301      	bcc.n	8002ad4 <__divsi3+0x94>
 8002ad0:	024b      	lsls	r3, r1, #9
 8002ad2:	1ac0      	subs	r0, r0, r3
 8002ad4:	4152      	adcs	r2, r2
 8002ad6:	0a03      	lsrs	r3, r0, #8
 8002ad8:	428b      	cmp	r3, r1
 8002ada:	d301      	bcc.n	8002ae0 <__divsi3+0xa0>
 8002adc:	020b      	lsls	r3, r1, #8
 8002ade:	1ac0      	subs	r0, r0, r3
 8002ae0:	4152      	adcs	r2, r2
 8002ae2:	d2cd      	bcs.n	8002a80 <__divsi3+0x40>
 8002ae4:	09c3      	lsrs	r3, r0, #7
 8002ae6:	428b      	cmp	r3, r1
 8002ae8:	d301      	bcc.n	8002aee <__divsi3+0xae>
 8002aea:	01cb      	lsls	r3, r1, #7
 8002aec:	1ac0      	subs	r0, r0, r3
 8002aee:	4152      	adcs	r2, r2
 8002af0:	0983      	lsrs	r3, r0, #6
 8002af2:	428b      	cmp	r3, r1
 8002af4:	d301      	bcc.n	8002afa <__divsi3+0xba>
 8002af6:	018b      	lsls	r3, r1, #6
 8002af8:	1ac0      	subs	r0, r0, r3
 8002afa:	4152      	adcs	r2, r2
 8002afc:	0943      	lsrs	r3, r0, #5
 8002afe:	428b      	cmp	r3, r1
 8002b00:	d301      	bcc.n	8002b06 <__divsi3+0xc6>
 8002b02:	014b      	lsls	r3, r1, #5
 8002b04:	1ac0      	subs	r0, r0, r3
 8002b06:	4152      	adcs	r2, r2
 8002b08:	0903      	lsrs	r3, r0, #4
 8002b0a:	428b      	cmp	r3, r1
 8002b0c:	d301      	bcc.n	8002b12 <__divsi3+0xd2>
 8002b0e:	010b      	lsls	r3, r1, #4
 8002b10:	1ac0      	subs	r0, r0, r3
 8002b12:	4152      	adcs	r2, r2
 8002b14:	08c3      	lsrs	r3, r0, #3
 8002b16:	428b      	cmp	r3, r1
 8002b18:	d301      	bcc.n	8002b1e <__divsi3+0xde>
 8002b1a:	00cb      	lsls	r3, r1, #3
 8002b1c:	1ac0      	subs	r0, r0, r3
 8002b1e:	4152      	adcs	r2, r2
 8002b20:	0883      	lsrs	r3, r0, #2
 8002b22:	428b      	cmp	r3, r1
 8002b24:	d301      	bcc.n	8002b2a <__divsi3+0xea>
 8002b26:	008b      	lsls	r3, r1, #2
 8002b28:	1ac0      	subs	r0, r0, r3
 8002b2a:	4152      	adcs	r2, r2
 8002b2c:	0843      	lsrs	r3, r0, #1
 8002b2e:	428b      	cmp	r3, r1
 8002b30:	d301      	bcc.n	8002b36 <__divsi3+0xf6>
 8002b32:	004b      	lsls	r3, r1, #1
 8002b34:	1ac0      	subs	r0, r0, r3
 8002b36:	4152      	adcs	r2, r2
 8002b38:	1a41      	subs	r1, r0, r1
 8002b3a:	d200      	bcs.n	8002b3e <__divsi3+0xfe>
 8002b3c:	4601      	mov	r1, r0
 8002b3e:	4152      	adcs	r2, r2
 8002b40:	4610      	mov	r0, r2
 8002b42:	4770      	bx	lr
 8002b44:	e05d      	b.n	8002c02 <__divsi3+0x1c2>
 8002b46:	0fca      	lsrs	r2, r1, #31
 8002b48:	d000      	beq.n	8002b4c <__divsi3+0x10c>
 8002b4a:	4249      	negs	r1, r1
 8002b4c:	1003      	asrs	r3, r0, #32
 8002b4e:	d300      	bcc.n	8002b52 <__divsi3+0x112>
 8002b50:	4240      	negs	r0, r0
 8002b52:	4053      	eors	r3, r2
 8002b54:	2200      	movs	r2, #0
 8002b56:	469c      	mov	ip, r3
 8002b58:	0903      	lsrs	r3, r0, #4
 8002b5a:	428b      	cmp	r3, r1
 8002b5c:	d32d      	bcc.n	8002bba <__divsi3+0x17a>
 8002b5e:	0a03      	lsrs	r3, r0, #8
 8002b60:	428b      	cmp	r3, r1
 8002b62:	d312      	bcc.n	8002b8a <__divsi3+0x14a>
 8002b64:	22fc      	movs	r2, #252	; 0xfc
 8002b66:	0189      	lsls	r1, r1, #6
 8002b68:	ba12      	rev	r2, r2
 8002b6a:	0a03      	lsrs	r3, r0, #8
 8002b6c:	428b      	cmp	r3, r1
 8002b6e:	d30c      	bcc.n	8002b8a <__divsi3+0x14a>
 8002b70:	0189      	lsls	r1, r1, #6
 8002b72:	1192      	asrs	r2, r2, #6
 8002b74:	428b      	cmp	r3, r1
 8002b76:	d308      	bcc.n	8002b8a <__divsi3+0x14a>
 8002b78:	0189      	lsls	r1, r1, #6
 8002b7a:	1192      	asrs	r2, r2, #6
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	d304      	bcc.n	8002b8a <__divsi3+0x14a>
 8002b80:	0189      	lsls	r1, r1, #6
 8002b82:	d03a      	beq.n	8002bfa <__divsi3+0x1ba>
 8002b84:	1192      	asrs	r2, r2, #6
 8002b86:	e000      	b.n	8002b8a <__divsi3+0x14a>
 8002b88:	0989      	lsrs	r1, r1, #6
 8002b8a:	09c3      	lsrs	r3, r0, #7
 8002b8c:	428b      	cmp	r3, r1
 8002b8e:	d301      	bcc.n	8002b94 <__divsi3+0x154>
 8002b90:	01cb      	lsls	r3, r1, #7
 8002b92:	1ac0      	subs	r0, r0, r3
 8002b94:	4152      	adcs	r2, r2
 8002b96:	0983      	lsrs	r3, r0, #6
 8002b98:	428b      	cmp	r3, r1
 8002b9a:	d301      	bcc.n	8002ba0 <__divsi3+0x160>
 8002b9c:	018b      	lsls	r3, r1, #6
 8002b9e:	1ac0      	subs	r0, r0, r3
 8002ba0:	4152      	adcs	r2, r2
 8002ba2:	0943      	lsrs	r3, r0, #5
 8002ba4:	428b      	cmp	r3, r1
 8002ba6:	d301      	bcc.n	8002bac <__divsi3+0x16c>
 8002ba8:	014b      	lsls	r3, r1, #5
 8002baa:	1ac0      	subs	r0, r0, r3
 8002bac:	4152      	adcs	r2, r2
 8002bae:	0903      	lsrs	r3, r0, #4
 8002bb0:	428b      	cmp	r3, r1
 8002bb2:	d301      	bcc.n	8002bb8 <__divsi3+0x178>
 8002bb4:	010b      	lsls	r3, r1, #4
 8002bb6:	1ac0      	subs	r0, r0, r3
 8002bb8:	4152      	adcs	r2, r2
 8002bba:	08c3      	lsrs	r3, r0, #3
 8002bbc:	428b      	cmp	r3, r1
 8002bbe:	d301      	bcc.n	8002bc4 <__divsi3+0x184>
 8002bc0:	00cb      	lsls	r3, r1, #3
 8002bc2:	1ac0      	subs	r0, r0, r3
 8002bc4:	4152      	adcs	r2, r2
 8002bc6:	0883      	lsrs	r3, r0, #2
 8002bc8:	428b      	cmp	r3, r1
 8002bca:	d301      	bcc.n	8002bd0 <__divsi3+0x190>
 8002bcc:	008b      	lsls	r3, r1, #2
 8002bce:	1ac0      	subs	r0, r0, r3
 8002bd0:	4152      	adcs	r2, r2
 8002bd2:	d2d9      	bcs.n	8002b88 <__divsi3+0x148>
 8002bd4:	0843      	lsrs	r3, r0, #1
 8002bd6:	428b      	cmp	r3, r1
 8002bd8:	d301      	bcc.n	8002bde <__divsi3+0x19e>
 8002bda:	004b      	lsls	r3, r1, #1
 8002bdc:	1ac0      	subs	r0, r0, r3
 8002bde:	4152      	adcs	r2, r2
 8002be0:	1a41      	subs	r1, r0, r1
 8002be2:	d200      	bcs.n	8002be6 <__divsi3+0x1a6>
 8002be4:	4601      	mov	r1, r0
 8002be6:	4663      	mov	r3, ip
 8002be8:	4152      	adcs	r2, r2
 8002bea:	105b      	asrs	r3, r3, #1
 8002bec:	4610      	mov	r0, r2
 8002bee:	d301      	bcc.n	8002bf4 <__divsi3+0x1b4>
 8002bf0:	4240      	negs	r0, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d500      	bpl.n	8002bf8 <__divsi3+0x1b8>
 8002bf6:	4249      	negs	r1, r1
 8002bf8:	4770      	bx	lr
 8002bfa:	4663      	mov	r3, ip
 8002bfc:	105b      	asrs	r3, r3, #1
 8002bfe:	d300      	bcc.n	8002c02 <__divsi3+0x1c2>
 8002c00:	4240      	negs	r0, r0
 8002c02:	b501      	push	{r0, lr}
 8002c04:	2000      	movs	r0, #0
 8002c06:	f000 f805 	bl	8002c14 <__aeabi_idiv0>
 8002c0a:	bd02      	pop	{r1, pc}

08002c0c <__aeabi_idivmod>:
 8002c0c:	2900      	cmp	r1, #0
 8002c0e:	d0f8      	beq.n	8002c02 <__divsi3+0x1c2>
 8002c10:	e716      	b.n	8002a40 <__divsi3>
 8002c12:	4770      	bx	lr

08002c14 <__aeabi_idiv0>:
 8002c14:	4770      	bx	lr
 8002c16:	46c0      	nop			; (mov r8, r8)

08002c18 <__aeabi_cdrcmple>:
 8002c18:	4684      	mov	ip, r0
 8002c1a:	0010      	movs	r0, r2
 8002c1c:	4662      	mov	r2, ip
 8002c1e:	468c      	mov	ip, r1
 8002c20:	0019      	movs	r1, r3
 8002c22:	4663      	mov	r3, ip
 8002c24:	e000      	b.n	8002c28 <__aeabi_cdcmpeq>
 8002c26:	46c0      	nop			; (mov r8, r8)

08002c28 <__aeabi_cdcmpeq>:
 8002c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002c2a:	f001 fd7d 	bl	8004728 <__ledf2>
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d401      	bmi.n	8002c36 <__aeabi_cdcmpeq+0xe>
 8002c32:	2100      	movs	r1, #0
 8002c34:	42c8      	cmn	r0, r1
 8002c36:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002c38 <__aeabi_dcmpeq>:
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	f001 fccd 	bl	80045d8 <__eqdf2>
 8002c3e:	4240      	negs	r0, r0
 8002c40:	3001      	adds	r0, #1
 8002c42:	bd10      	pop	{r4, pc}

08002c44 <__aeabi_dcmplt>:
 8002c44:	b510      	push	{r4, lr}
 8002c46:	f001 fd6f 	bl	8004728 <__ledf2>
 8002c4a:	2800      	cmp	r0, #0
 8002c4c:	db01      	blt.n	8002c52 <__aeabi_dcmplt+0xe>
 8002c4e:	2000      	movs	r0, #0
 8002c50:	bd10      	pop	{r4, pc}
 8002c52:	2001      	movs	r0, #1
 8002c54:	bd10      	pop	{r4, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)

08002c58 <__aeabi_dcmple>:
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	f001 fd65 	bl	8004728 <__ledf2>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	dd01      	ble.n	8002c66 <__aeabi_dcmple+0xe>
 8002c62:	2000      	movs	r0, #0
 8002c64:	bd10      	pop	{r4, pc}
 8002c66:	2001      	movs	r0, #1
 8002c68:	bd10      	pop	{r4, pc}
 8002c6a:	46c0      	nop			; (mov r8, r8)

08002c6c <__aeabi_dcmpgt>:
 8002c6c:	b510      	push	{r4, lr}
 8002c6e:	f001 fcf5 	bl	800465c <__gedf2>
 8002c72:	2800      	cmp	r0, #0
 8002c74:	dc01      	bgt.n	8002c7a <__aeabi_dcmpgt+0xe>
 8002c76:	2000      	movs	r0, #0
 8002c78:	bd10      	pop	{r4, pc}
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	bd10      	pop	{r4, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)

08002c80 <__aeabi_dcmpge>:
 8002c80:	b510      	push	{r4, lr}
 8002c82:	f001 fceb 	bl	800465c <__gedf2>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	da01      	bge.n	8002c8e <__aeabi_dcmpge+0xe>
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	bd10      	pop	{r4, pc}
 8002c8e:	2001      	movs	r0, #1
 8002c90:	bd10      	pop	{r4, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)

08002c94 <__aeabi_f2uiz>:
 8002c94:	219e      	movs	r1, #158	; 0x9e
 8002c96:	b510      	push	{r4, lr}
 8002c98:	05c9      	lsls	r1, r1, #23
 8002c9a:	1c04      	adds	r4, r0, #0
 8002c9c:	f002 fd50 	bl	8005740 <__aeabi_fcmpge>
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	d103      	bne.n	8002cac <__aeabi_f2uiz+0x18>
 8002ca4:	1c20      	adds	r0, r4, #0
 8002ca6:	f000 fdb5 	bl	8003814 <__aeabi_f2iz>
 8002caa:	bd10      	pop	{r4, pc}
 8002cac:	219e      	movs	r1, #158	; 0x9e
 8002cae:	1c20      	adds	r0, r4, #0
 8002cb0:	05c9      	lsls	r1, r1, #23
 8002cb2:	f000 fc01 	bl	80034b8 <__aeabi_fsub>
 8002cb6:	f000 fdad 	bl	8003814 <__aeabi_f2iz>
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	469c      	mov	ip, r3
 8002cc0:	4460      	add	r0, ip
 8002cc2:	e7f2      	b.n	8002caa <__aeabi_f2uiz+0x16>

08002cc4 <__aeabi_d2uiz>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <__aeabi_d2uiz+0x38>)
 8002cca:	0004      	movs	r4, r0
 8002ccc:	000d      	movs	r5, r1
 8002cce:	f7ff ffd7 	bl	8002c80 <__aeabi_dcmpge>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d104      	bne.n	8002ce0 <__aeabi_d2uiz+0x1c>
 8002cd6:	0020      	movs	r0, r4
 8002cd8:	0029      	movs	r1, r5
 8002cda:	f002 fba5 	bl	8005428 <__aeabi_d2iz>
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <__aeabi_d2uiz+0x38>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	0020      	movs	r0, r4
 8002ce6:	0029      	movs	r1, r5
 8002ce8:	f001 ffee 	bl	8004cc8 <__aeabi_dsub>
 8002cec:	f002 fb9c 	bl	8005428 <__aeabi_d2iz>
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	061b      	lsls	r3, r3, #24
 8002cf4:	469c      	mov	ip, r3
 8002cf6:	4460      	add	r0, ip
 8002cf8:	e7f1      	b.n	8002cde <__aeabi_d2uiz+0x1a>
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	41e00000 	.word	0x41e00000

08002d00 <__aeabi_fadd>:
 8002d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d02:	46c6      	mov	lr, r8
 8002d04:	0243      	lsls	r3, r0, #9
 8002d06:	0a5b      	lsrs	r3, r3, #9
 8002d08:	024e      	lsls	r6, r1, #9
 8002d0a:	0045      	lsls	r5, r0, #1
 8002d0c:	004f      	lsls	r7, r1, #1
 8002d0e:	00da      	lsls	r2, r3, #3
 8002d10:	0fc4      	lsrs	r4, r0, #31
 8002d12:	469c      	mov	ip, r3
 8002d14:	0a70      	lsrs	r0, r6, #9
 8002d16:	4690      	mov	r8, r2
 8002d18:	b500      	push	{lr}
 8002d1a:	0e2d      	lsrs	r5, r5, #24
 8002d1c:	0e3f      	lsrs	r7, r7, #24
 8002d1e:	0fc9      	lsrs	r1, r1, #31
 8002d20:	09b6      	lsrs	r6, r6, #6
 8002d22:	428c      	cmp	r4, r1
 8002d24:	d04b      	beq.n	8002dbe <__aeabi_fadd+0xbe>
 8002d26:	1bea      	subs	r2, r5, r7
 8002d28:	2a00      	cmp	r2, #0
 8002d2a:	dd36      	ble.n	8002d9a <__aeabi_fadd+0x9a>
 8002d2c:	2f00      	cmp	r7, #0
 8002d2e:	d061      	beq.n	8002df4 <__aeabi_fadd+0xf4>
 8002d30:	2dff      	cmp	r5, #255	; 0xff
 8002d32:	d100      	bne.n	8002d36 <__aeabi_fadd+0x36>
 8002d34:	e0ad      	b.n	8002e92 <__aeabi_fadd+0x192>
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	04db      	lsls	r3, r3, #19
 8002d3a:	431e      	orrs	r6, r3
 8002d3c:	2a1b      	cmp	r2, #27
 8002d3e:	dc00      	bgt.n	8002d42 <__aeabi_fadd+0x42>
 8002d40:	e0d3      	b.n	8002eea <__aeabi_fadd+0x1ea>
 8002d42:	2001      	movs	r0, #1
 8002d44:	4643      	mov	r3, r8
 8002d46:	1a18      	subs	r0, r3, r0
 8002d48:	0143      	lsls	r3, r0, #5
 8002d4a:	d400      	bmi.n	8002d4e <__aeabi_fadd+0x4e>
 8002d4c:	e08c      	b.n	8002e68 <__aeabi_fadd+0x168>
 8002d4e:	0180      	lsls	r0, r0, #6
 8002d50:	0987      	lsrs	r7, r0, #6
 8002d52:	0038      	movs	r0, r7
 8002d54:	f002 fcfe 	bl	8005754 <__clzsi2>
 8002d58:	3805      	subs	r0, #5
 8002d5a:	4087      	lsls	r7, r0
 8002d5c:	4285      	cmp	r5, r0
 8002d5e:	dc00      	bgt.n	8002d62 <__aeabi_fadd+0x62>
 8002d60:	e0b6      	b.n	8002ed0 <__aeabi_fadd+0x1d0>
 8002d62:	1a2d      	subs	r5, r5, r0
 8002d64:	48b3      	ldr	r0, [pc, #716]	; (8003034 <__aeabi_fadd+0x334>)
 8002d66:	4038      	ands	r0, r7
 8002d68:	0743      	lsls	r3, r0, #29
 8002d6a:	d004      	beq.n	8002d76 <__aeabi_fadd+0x76>
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	4003      	ands	r3, r0
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d000      	beq.n	8002d76 <__aeabi_fadd+0x76>
 8002d74:	3004      	adds	r0, #4
 8002d76:	0143      	lsls	r3, r0, #5
 8002d78:	d400      	bmi.n	8002d7c <__aeabi_fadd+0x7c>
 8002d7a:	e078      	b.n	8002e6e <__aeabi_fadd+0x16e>
 8002d7c:	1c6a      	adds	r2, r5, #1
 8002d7e:	2dfe      	cmp	r5, #254	; 0xfe
 8002d80:	d065      	beq.n	8002e4e <__aeabi_fadd+0x14e>
 8002d82:	0180      	lsls	r0, r0, #6
 8002d84:	0a43      	lsrs	r3, r0, #9
 8002d86:	469c      	mov	ip, r3
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	4663      	mov	r3, ip
 8002d8c:	05d0      	lsls	r0, r2, #23
 8002d8e:	4318      	orrs	r0, r3
 8002d90:	07e4      	lsls	r4, r4, #31
 8002d92:	4320      	orrs	r0, r4
 8002d94:	bc80      	pop	{r7}
 8002d96:	46b8      	mov	r8, r7
 8002d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d9a:	2a00      	cmp	r2, #0
 8002d9c:	d035      	beq.n	8002e0a <__aeabi_fadd+0x10a>
 8002d9e:	1b7a      	subs	r2, r7, r5
 8002da0:	2d00      	cmp	r5, #0
 8002da2:	d000      	beq.n	8002da6 <__aeabi_fadd+0xa6>
 8002da4:	e0af      	b.n	8002f06 <__aeabi_fadd+0x206>
 8002da6:	4643      	mov	r3, r8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d100      	bne.n	8002dae <__aeabi_fadd+0xae>
 8002dac:	e0a7      	b.n	8002efe <__aeabi_fadd+0x1fe>
 8002dae:	1e53      	subs	r3, r2, #1
 8002db0:	2a01      	cmp	r2, #1
 8002db2:	d100      	bne.n	8002db6 <__aeabi_fadd+0xb6>
 8002db4:	e12f      	b.n	8003016 <__aeabi_fadd+0x316>
 8002db6:	2aff      	cmp	r2, #255	; 0xff
 8002db8:	d069      	beq.n	8002e8e <__aeabi_fadd+0x18e>
 8002dba:	001a      	movs	r2, r3
 8002dbc:	e0aa      	b.n	8002f14 <__aeabi_fadd+0x214>
 8002dbe:	1be9      	subs	r1, r5, r7
 8002dc0:	2900      	cmp	r1, #0
 8002dc2:	dd70      	ble.n	8002ea6 <__aeabi_fadd+0x1a6>
 8002dc4:	2f00      	cmp	r7, #0
 8002dc6:	d037      	beq.n	8002e38 <__aeabi_fadd+0x138>
 8002dc8:	2dff      	cmp	r5, #255	; 0xff
 8002dca:	d062      	beq.n	8002e92 <__aeabi_fadd+0x192>
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	04db      	lsls	r3, r3, #19
 8002dd0:	431e      	orrs	r6, r3
 8002dd2:	291b      	cmp	r1, #27
 8002dd4:	dc00      	bgt.n	8002dd8 <__aeabi_fadd+0xd8>
 8002dd6:	e0b0      	b.n	8002f3a <__aeabi_fadd+0x23a>
 8002dd8:	2001      	movs	r0, #1
 8002dda:	4440      	add	r0, r8
 8002ddc:	0143      	lsls	r3, r0, #5
 8002dde:	d543      	bpl.n	8002e68 <__aeabi_fadd+0x168>
 8002de0:	3501      	adds	r5, #1
 8002de2:	2dff      	cmp	r5, #255	; 0xff
 8002de4:	d033      	beq.n	8002e4e <__aeabi_fadd+0x14e>
 8002de6:	2301      	movs	r3, #1
 8002de8:	4a93      	ldr	r2, [pc, #588]	; (8003038 <__aeabi_fadd+0x338>)
 8002dea:	4003      	ands	r3, r0
 8002dec:	0840      	lsrs	r0, r0, #1
 8002dee:	4010      	ands	r0, r2
 8002df0:	4318      	orrs	r0, r3
 8002df2:	e7b9      	b.n	8002d68 <__aeabi_fadd+0x68>
 8002df4:	2e00      	cmp	r6, #0
 8002df6:	d100      	bne.n	8002dfa <__aeabi_fadd+0xfa>
 8002df8:	e083      	b.n	8002f02 <__aeabi_fadd+0x202>
 8002dfa:	1e51      	subs	r1, r2, #1
 8002dfc:	2a01      	cmp	r2, #1
 8002dfe:	d100      	bne.n	8002e02 <__aeabi_fadd+0x102>
 8002e00:	e0d8      	b.n	8002fb4 <__aeabi_fadd+0x2b4>
 8002e02:	2aff      	cmp	r2, #255	; 0xff
 8002e04:	d045      	beq.n	8002e92 <__aeabi_fadd+0x192>
 8002e06:	000a      	movs	r2, r1
 8002e08:	e798      	b.n	8002d3c <__aeabi_fadd+0x3c>
 8002e0a:	27fe      	movs	r7, #254	; 0xfe
 8002e0c:	1c6a      	adds	r2, r5, #1
 8002e0e:	4217      	tst	r7, r2
 8002e10:	d000      	beq.n	8002e14 <__aeabi_fadd+0x114>
 8002e12:	e086      	b.n	8002f22 <__aeabi_fadd+0x222>
 8002e14:	2d00      	cmp	r5, #0
 8002e16:	d000      	beq.n	8002e1a <__aeabi_fadd+0x11a>
 8002e18:	e0b7      	b.n	8002f8a <__aeabi_fadd+0x28a>
 8002e1a:	4643      	mov	r3, r8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d100      	bne.n	8002e22 <__aeabi_fadd+0x122>
 8002e20:	e0f3      	b.n	800300a <__aeabi_fadd+0x30a>
 8002e22:	2200      	movs	r2, #0
 8002e24:	2e00      	cmp	r6, #0
 8002e26:	d0b0      	beq.n	8002d8a <__aeabi_fadd+0x8a>
 8002e28:	1b98      	subs	r0, r3, r6
 8002e2a:	0143      	lsls	r3, r0, #5
 8002e2c:	d400      	bmi.n	8002e30 <__aeabi_fadd+0x130>
 8002e2e:	e0fa      	b.n	8003026 <__aeabi_fadd+0x326>
 8002e30:	4643      	mov	r3, r8
 8002e32:	000c      	movs	r4, r1
 8002e34:	1af0      	subs	r0, r6, r3
 8002e36:	e797      	b.n	8002d68 <__aeabi_fadd+0x68>
 8002e38:	2e00      	cmp	r6, #0
 8002e3a:	d100      	bne.n	8002e3e <__aeabi_fadd+0x13e>
 8002e3c:	e0c8      	b.n	8002fd0 <__aeabi_fadd+0x2d0>
 8002e3e:	1e4a      	subs	r2, r1, #1
 8002e40:	2901      	cmp	r1, #1
 8002e42:	d100      	bne.n	8002e46 <__aeabi_fadd+0x146>
 8002e44:	e0ae      	b.n	8002fa4 <__aeabi_fadd+0x2a4>
 8002e46:	29ff      	cmp	r1, #255	; 0xff
 8002e48:	d023      	beq.n	8002e92 <__aeabi_fadd+0x192>
 8002e4a:	0011      	movs	r1, r2
 8002e4c:	e7c1      	b.n	8002dd2 <__aeabi_fadd+0xd2>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	22ff      	movs	r2, #255	; 0xff
 8002e52:	469c      	mov	ip, r3
 8002e54:	e799      	b.n	8002d8a <__aeabi_fadd+0x8a>
 8002e56:	21fe      	movs	r1, #254	; 0xfe
 8002e58:	1c6a      	adds	r2, r5, #1
 8002e5a:	4211      	tst	r1, r2
 8002e5c:	d077      	beq.n	8002f4e <__aeabi_fadd+0x24e>
 8002e5e:	2aff      	cmp	r2, #255	; 0xff
 8002e60:	d0f5      	beq.n	8002e4e <__aeabi_fadd+0x14e>
 8002e62:	0015      	movs	r5, r2
 8002e64:	4446      	add	r6, r8
 8002e66:	0870      	lsrs	r0, r6, #1
 8002e68:	0743      	lsls	r3, r0, #29
 8002e6a:	d000      	beq.n	8002e6e <__aeabi_fadd+0x16e>
 8002e6c:	e77e      	b.n	8002d6c <__aeabi_fadd+0x6c>
 8002e6e:	08c3      	lsrs	r3, r0, #3
 8002e70:	2dff      	cmp	r5, #255	; 0xff
 8002e72:	d00e      	beq.n	8002e92 <__aeabi_fadd+0x192>
 8002e74:	025b      	lsls	r3, r3, #9
 8002e76:	0a5b      	lsrs	r3, r3, #9
 8002e78:	469c      	mov	ip, r3
 8002e7a:	b2ea      	uxtb	r2, r5
 8002e7c:	e785      	b.n	8002d8a <__aeabi_fadd+0x8a>
 8002e7e:	2e00      	cmp	r6, #0
 8002e80:	d007      	beq.n	8002e92 <__aeabi_fadd+0x192>
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	03d2      	lsls	r2, r2, #15
 8002e86:	4213      	tst	r3, r2
 8002e88:	d003      	beq.n	8002e92 <__aeabi_fadd+0x192>
 8002e8a:	4210      	tst	r0, r2
 8002e8c:	d101      	bne.n	8002e92 <__aeabi_fadd+0x192>
 8002e8e:	000c      	movs	r4, r1
 8002e90:	0003      	movs	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0db      	beq.n	8002e4e <__aeabi_fadd+0x14e>
 8002e96:	2080      	movs	r0, #128	; 0x80
 8002e98:	03c0      	lsls	r0, r0, #15
 8002e9a:	4318      	orrs	r0, r3
 8002e9c:	0240      	lsls	r0, r0, #9
 8002e9e:	0a43      	lsrs	r3, r0, #9
 8002ea0:	469c      	mov	ip, r3
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	e771      	b.n	8002d8a <__aeabi_fadd+0x8a>
 8002ea6:	2900      	cmp	r1, #0
 8002ea8:	d0d5      	beq.n	8002e56 <__aeabi_fadd+0x156>
 8002eaa:	1b7a      	subs	r2, r7, r5
 8002eac:	2d00      	cmp	r5, #0
 8002eae:	d160      	bne.n	8002f72 <__aeabi_fadd+0x272>
 8002eb0:	4643      	mov	r3, r8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d024      	beq.n	8002f00 <__aeabi_fadd+0x200>
 8002eb6:	1e53      	subs	r3, r2, #1
 8002eb8:	2a01      	cmp	r2, #1
 8002eba:	d073      	beq.n	8002fa4 <__aeabi_fadd+0x2a4>
 8002ebc:	2aff      	cmp	r2, #255	; 0xff
 8002ebe:	d0e7      	beq.n	8002e90 <__aeabi_fadd+0x190>
 8002ec0:	001a      	movs	r2, r3
 8002ec2:	2a1b      	cmp	r2, #27
 8002ec4:	dc00      	bgt.n	8002ec8 <__aeabi_fadd+0x1c8>
 8002ec6:	e085      	b.n	8002fd4 <__aeabi_fadd+0x2d4>
 8002ec8:	2001      	movs	r0, #1
 8002eca:	003d      	movs	r5, r7
 8002ecc:	1980      	adds	r0, r0, r6
 8002ece:	e785      	b.n	8002ddc <__aeabi_fadd+0xdc>
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	003a      	movs	r2, r7
 8002ed4:	1b45      	subs	r5, r0, r5
 8002ed6:	0038      	movs	r0, r7
 8002ed8:	3501      	adds	r5, #1
 8002eda:	40ea      	lsrs	r2, r5
 8002edc:	1b5d      	subs	r5, r3, r5
 8002ede:	40a8      	lsls	r0, r5
 8002ee0:	1e43      	subs	r3, r0, #1
 8002ee2:	4198      	sbcs	r0, r3
 8002ee4:	2500      	movs	r5, #0
 8002ee6:	4310      	orrs	r0, r2
 8002ee8:	e73e      	b.n	8002d68 <__aeabi_fadd+0x68>
 8002eea:	2320      	movs	r3, #32
 8002eec:	0030      	movs	r0, r6
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	0031      	movs	r1, r6
 8002ef2:	4098      	lsls	r0, r3
 8002ef4:	40d1      	lsrs	r1, r2
 8002ef6:	1e43      	subs	r3, r0, #1
 8002ef8:	4198      	sbcs	r0, r3
 8002efa:	4308      	orrs	r0, r1
 8002efc:	e722      	b.n	8002d44 <__aeabi_fadd+0x44>
 8002efe:	000c      	movs	r4, r1
 8002f00:	0003      	movs	r3, r0
 8002f02:	0015      	movs	r5, r2
 8002f04:	e7b4      	b.n	8002e70 <__aeabi_fadd+0x170>
 8002f06:	2fff      	cmp	r7, #255	; 0xff
 8002f08:	d0c1      	beq.n	8002e8e <__aeabi_fadd+0x18e>
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	4640      	mov	r0, r8
 8002f0e:	04db      	lsls	r3, r3, #19
 8002f10:	4318      	orrs	r0, r3
 8002f12:	4680      	mov	r8, r0
 8002f14:	2a1b      	cmp	r2, #27
 8002f16:	dd51      	ble.n	8002fbc <__aeabi_fadd+0x2bc>
 8002f18:	2001      	movs	r0, #1
 8002f1a:	000c      	movs	r4, r1
 8002f1c:	003d      	movs	r5, r7
 8002f1e:	1a30      	subs	r0, r6, r0
 8002f20:	e712      	b.n	8002d48 <__aeabi_fadd+0x48>
 8002f22:	4643      	mov	r3, r8
 8002f24:	1b9f      	subs	r7, r3, r6
 8002f26:	017b      	lsls	r3, r7, #5
 8002f28:	d42b      	bmi.n	8002f82 <__aeabi_fadd+0x282>
 8002f2a:	2f00      	cmp	r7, #0
 8002f2c:	d000      	beq.n	8002f30 <__aeabi_fadd+0x230>
 8002f2e:	e710      	b.n	8002d52 <__aeabi_fadd+0x52>
 8002f30:	2300      	movs	r3, #0
 8002f32:	2400      	movs	r4, #0
 8002f34:	2200      	movs	r2, #0
 8002f36:	469c      	mov	ip, r3
 8002f38:	e727      	b.n	8002d8a <__aeabi_fadd+0x8a>
 8002f3a:	2320      	movs	r3, #32
 8002f3c:	0032      	movs	r2, r6
 8002f3e:	0030      	movs	r0, r6
 8002f40:	40ca      	lsrs	r2, r1
 8002f42:	1a59      	subs	r1, r3, r1
 8002f44:	4088      	lsls	r0, r1
 8002f46:	1e43      	subs	r3, r0, #1
 8002f48:	4198      	sbcs	r0, r3
 8002f4a:	4310      	orrs	r0, r2
 8002f4c:	e745      	b.n	8002dda <__aeabi_fadd+0xda>
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	d14a      	bne.n	8002fe8 <__aeabi_fadd+0x2e8>
 8002f52:	4643      	mov	r3, r8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d063      	beq.n	8003020 <__aeabi_fadd+0x320>
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2e00      	cmp	r6, #0
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_fadd+0x260>
 8002f5e:	e714      	b.n	8002d8a <__aeabi_fadd+0x8a>
 8002f60:	0030      	movs	r0, r6
 8002f62:	4440      	add	r0, r8
 8002f64:	0143      	lsls	r3, r0, #5
 8002f66:	d400      	bmi.n	8002f6a <__aeabi_fadd+0x26a>
 8002f68:	e77e      	b.n	8002e68 <__aeabi_fadd+0x168>
 8002f6a:	4b32      	ldr	r3, [pc, #200]	; (8003034 <__aeabi_fadd+0x334>)
 8002f6c:	3501      	adds	r5, #1
 8002f6e:	4018      	ands	r0, r3
 8002f70:	e77a      	b.n	8002e68 <__aeabi_fadd+0x168>
 8002f72:	2fff      	cmp	r7, #255	; 0xff
 8002f74:	d08c      	beq.n	8002e90 <__aeabi_fadd+0x190>
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	4641      	mov	r1, r8
 8002f7a:	04db      	lsls	r3, r3, #19
 8002f7c:	4319      	orrs	r1, r3
 8002f7e:	4688      	mov	r8, r1
 8002f80:	e79f      	b.n	8002ec2 <__aeabi_fadd+0x1c2>
 8002f82:	4643      	mov	r3, r8
 8002f84:	000c      	movs	r4, r1
 8002f86:	1af7      	subs	r7, r6, r3
 8002f88:	e6e3      	b.n	8002d52 <__aeabi_fadd+0x52>
 8002f8a:	4642      	mov	r2, r8
 8002f8c:	2a00      	cmp	r2, #0
 8002f8e:	d000      	beq.n	8002f92 <__aeabi_fadd+0x292>
 8002f90:	e775      	b.n	8002e7e <__aeabi_fadd+0x17e>
 8002f92:	2e00      	cmp	r6, #0
 8002f94:	d000      	beq.n	8002f98 <__aeabi_fadd+0x298>
 8002f96:	e77a      	b.n	8002e8e <__aeabi_fadd+0x18e>
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	03db      	lsls	r3, r3, #15
 8002f9c:	2400      	movs	r4, #0
 8002f9e:	469c      	mov	ip, r3
 8002fa0:	22ff      	movs	r2, #255	; 0xff
 8002fa2:	e6f2      	b.n	8002d8a <__aeabi_fadd+0x8a>
 8002fa4:	0030      	movs	r0, r6
 8002fa6:	4440      	add	r0, r8
 8002fa8:	2501      	movs	r5, #1
 8002faa:	0143      	lsls	r3, r0, #5
 8002fac:	d400      	bmi.n	8002fb0 <__aeabi_fadd+0x2b0>
 8002fae:	e75b      	b.n	8002e68 <__aeabi_fadd+0x168>
 8002fb0:	2502      	movs	r5, #2
 8002fb2:	e718      	b.n	8002de6 <__aeabi_fadd+0xe6>
 8002fb4:	4643      	mov	r3, r8
 8002fb6:	2501      	movs	r5, #1
 8002fb8:	1b98      	subs	r0, r3, r6
 8002fba:	e6c5      	b.n	8002d48 <__aeabi_fadd+0x48>
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	4644      	mov	r4, r8
 8002fc0:	4640      	mov	r0, r8
 8002fc2:	40d4      	lsrs	r4, r2
 8002fc4:	1a9a      	subs	r2, r3, r2
 8002fc6:	4090      	lsls	r0, r2
 8002fc8:	1e43      	subs	r3, r0, #1
 8002fca:	4198      	sbcs	r0, r3
 8002fcc:	4320      	orrs	r0, r4
 8002fce:	e7a4      	b.n	8002f1a <__aeabi_fadd+0x21a>
 8002fd0:	000d      	movs	r5, r1
 8002fd2:	e74d      	b.n	8002e70 <__aeabi_fadd+0x170>
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	4641      	mov	r1, r8
 8002fd8:	4640      	mov	r0, r8
 8002fda:	40d1      	lsrs	r1, r2
 8002fdc:	1a9a      	subs	r2, r3, r2
 8002fde:	4090      	lsls	r0, r2
 8002fe0:	1e43      	subs	r3, r0, #1
 8002fe2:	4198      	sbcs	r0, r3
 8002fe4:	4308      	orrs	r0, r1
 8002fe6:	e770      	b.n	8002eca <__aeabi_fadd+0x1ca>
 8002fe8:	4642      	mov	r2, r8
 8002fea:	2a00      	cmp	r2, #0
 8002fec:	d100      	bne.n	8002ff0 <__aeabi_fadd+0x2f0>
 8002fee:	e74f      	b.n	8002e90 <__aeabi_fadd+0x190>
 8002ff0:	2e00      	cmp	r6, #0
 8002ff2:	d100      	bne.n	8002ff6 <__aeabi_fadd+0x2f6>
 8002ff4:	e74d      	b.n	8002e92 <__aeabi_fadd+0x192>
 8002ff6:	2280      	movs	r2, #128	; 0x80
 8002ff8:	03d2      	lsls	r2, r2, #15
 8002ffa:	4213      	tst	r3, r2
 8002ffc:	d100      	bne.n	8003000 <__aeabi_fadd+0x300>
 8002ffe:	e748      	b.n	8002e92 <__aeabi_fadd+0x192>
 8003000:	4210      	tst	r0, r2
 8003002:	d000      	beq.n	8003006 <__aeabi_fadd+0x306>
 8003004:	e745      	b.n	8002e92 <__aeabi_fadd+0x192>
 8003006:	0003      	movs	r3, r0
 8003008:	e743      	b.n	8002e92 <__aeabi_fadd+0x192>
 800300a:	2e00      	cmp	r6, #0
 800300c:	d090      	beq.n	8002f30 <__aeabi_fadd+0x230>
 800300e:	000c      	movs	r4, r1
 8003010:	4684      	mov	ip, r0
 8003012:	2200      	movs	r2, #0
 8003014:	e6b9      	b.n	8002d8a <__aeabi_fadd+0x8a>
 8003016:	4643      	mov	r3, r8
 8003018:	000c      	movs	r4, r1
 800301a:	1af0      	subs	r0, r6, r3
 800301c:	3501      	adds	r5, #1
 800301e:	e693      	b.n	8002d48 <__aeabi_fadd+0x48>
 8003020:	4684      	mov	ip, r0
 8003022:	2200      	movs	r2, #0
 8003024:	e6b1      	b.n	8002d8a <__aeabi_fadd+0x8a>
 8003026:	2800      	cmp	r0, #0
 8003028:	d000      	beq.n	800302c <__aeabi_fadd+0x32c>
 800302a:	e71d      	b.n	8002e68 <__aeabi_fadd+0x168>
 800302c:	2300      	movs	r3, #0
 800302e:	2400      	movs	r4, #0
 8003030:	469c      	mov	ip, r3
 8003032:	e6aa      	b.n	8002d8a <__aeabi_fadd+0x8a>
 8003034:	fbffffff 	.word	0xfbffffff
 8003038:	7dffffff 	.word	0x7dffffff

0800303c <__aeabi_fdiv>:
 800303c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303e:	464f      	mov	r7, r9
 8003040:	4646      	mov	r6, r8
 8003042:	46d6      	mov	lr, sl
 8003044:	0245      	lsls	r5, r0, #9
 8003046:	b5c0      	push	{r6, r7, lr}
 8003048:	0047      	lsls	r7, r0, #1
 800304a:	1c0c      	adds	r4, r1, #0
 800304c:	0a6d      	lsrs	r5, r5, #9
 800304e:	0e3f      	lsrs	r7, r7, #24
 8003050:	0fc6      	lsrs	r6, r0, #31
 8003052:	2f00      	cmp	r7, #0
 8003054:	d100      	bne.n	8003058 <__aeabi_fdiv+0x1c>
 8003056:	e070      	b.n	800313a <__aeabi_fdiv+0xfe>
 8003058:	2fff      	cmp	r7, #255	; 0xff
 800305a:	d100      	bne.n	800305e <__aeabi_fdiv+0x22>
 800305c:	e075      	b.n	800314a <__aeabi_fdiv+0x10e>
 800305e:	00eb      	lsls	r3, r5, #3
 8003060:	2580      	movs	r5, #128	; 0x80
 8003062:	04ed      	lsls	r5, r5, #19
 8003064:	431d      	orrs	r5, r3
 8003066:	2300      	movs	r3, #0
 8003068:	4699      	mov	r9, r3
 800306a:	469a      	mov	sl, r3
 800306c:	3f7f      	subs	r7, #127	; 0x7f
 800306e:	0260      	lsls	r0, r4, #9
 8003070:	0a43      	lsrs	r3, r0, #9
 8003072:	4698      	mov	r8, r3
 8003074:	0063      	lsls	r3, r4, #1
 8003076:	0e1b      	lsrs	r3, r3, #24
 8003078:	0fe4      	lsrs	r4, r4, #31
 800307a:	2b00      	cmp	r3, #0
 800307c:	d04e      	beq.n	800311c <__aeabi_fdiv+0xe0>
 800307e:	2bff      	cmp	r3, #255	; 0xff
 8003080:	d046      	beq.n	8003110 <__aeabi_fdiv+0xd4>
 8003082:	4642      	mov	r2, r8
 8003084:	00d0      	lsls	r0, r2, #3
 8003086:	2280      	movs	r2, #128	; 0x80
 8003088:	04d2      	lsls	r2, r2, #19
 800308a:	4302      	orrs	r2, r0
 800308c:	4690      	mov	r8, r2
 800308e:	2200      	movs	r2, #0
 8003090:	3b7f      	subs	r3, #127	; 0x7f
 8003092:	0031      	movs	r1, r6
 8003094:	1aff      	subs	r7, r7, r3
 8003096:	464b      	mov	r3, r9
 8003098:	4061      	eors	r1, r4
 800309a:	b2c9      	uxtb	r1, r1
 800309c:	4313      	orrs	r3, r2
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	d900      	bls.n	80030a4 <__aeabi_fdiv+0x68>
 80030a2:	e0b5      	b.n	8003210 <__aeabi_fdiv+0x1d4>
 80030a4:	486e      	ldr	r0, [pc, #440]	; (8003260 <__aeabi_fdiv+0x224>)
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	58c3      	ldr	r3, [r0, r3]
 80030aa:	469f      	mov	pc, r3
 80030ac:	2300      	movs	r3, #0
 80030ae:	4698      	mov	r8, r3
 80030b0:	0026      	movs	r6, r4
 80030b2:	4645      	mov	r5, r8
 80030b4:	4692      	mov	sl, r2
 80030b6:	4653      	mov	r3, sl
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d100      	bne.n	80030be <__aeabi_fdiv+0x82>
 80030bc:	e089      	b.n	80031d2 <__aeabi_fdiv+0x196>
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d100      	bne.n	80030c4 <__aeabi_fdiv+0x88>
 80030c2:	e09e      	b.n	8003202 <__aeabi_fdiv+0x1c6>
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d018      	beq.n	80030fa <__aeabi_fdiv+0xbe>
 80030c8:	003b      	movs	r3, r7
 80030ca:	337f      	adds	r3, #127	; 0x7f
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dd69      	ble.n	80031a4 <__aeabi_fdiv+0x168>
 80030d0:	076a      	lsls	r2, r5, #29
 80030d2:	d004      	beq.n	80030de <__aeabi_fdiv+0xa2>
 80030d4:	220f      	movs	r2, #15
 80030d6:	402a      	ands	r2, r5
 80030d8:	2a04      	cmp	r2, #4
 80030da:	d000      	beq.n	80030de <__aeabi_fdiv+0xa2>
 80030dc:	3504      	adds	r5, #4
 80030de:	012a      	lsls	r2, r5, #4
 80030e0:	d503      	bpl.n	80030ea <__aeabi_fdiv+0xae>
 80030e2:	4b60      	ldr	r3, [pc, #384]	; (8003264 <__aeabi_fdiv+0x228>)
 80030e4:	401d      	ands	r5, r3
 80030e6:	003b      	movs	r3, r7
 80030e8:	3380      	adds	r3, #128	; 0x80
 80030ea:	2bfe      	cmp	r3, #254	; 0xfe
 80030ec:	dd00      	ble.n	80030f0 <__aeabi_fdiv+0xb4>
 80030ee:	e070      	b.n	80031d2 <__aeabi_fdiv+0x196>
 80030f0:	01ad      	lsls	r5, r5, #6
 80030f2:	0a6d      	lsrs	r5, r5, #9
 80030f4:	b2d8      	uxtb	r0, r3
 80030f6:	e002      	b.n	80030fe <__aeabi_fdiv+0xc2>
 80030f8:	000e      	movs	r6, r1
 80030fa:	2000      	movs	r0, #0
 80030fc:	2500      	movs	r5, #0
 80030fe:	05c0      	lsls	r0, r0, #23
 8003100:	4328      	orrs	r0, r5
 8003102:	07f6      	lsls	r6, r6, #31
 8003104:	4330      	orrs	r0, r6
 8003106:	bce0      	pop	{r5, r6, r7}
 8003108:	46ba      	mov	sl, r7
 800310a:	46b1      	mov	r9, r6
 800310c:	46a8      	mov	r8, r5
 800310e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003110:	4643      	mov	r3, r8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d13f      	bne.n	8003196 <__aeabi_fdiv+0x15a>
 8003116:	2202      	movs	r2, #2
 8003118:	3fff      	subs	r7, #255	; 0xff
 800311a:	e003      	b.n	8003124 <__aeabi_fdiv+0xe8>
 800311c:	4643      	mov	r3, r8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d12d      	bne.n	800317e <__aeabi_fdiv+0x142>
 8003122:	2201      	movs	r2, #1
 8003124:	0031      	movs	r1, r6
 8003126:	464b      	mov	r3, r9
 8003128:	4061      	eors	r1, r4
 800312a:	b2c9      	uxtb	r1, r1
 800312c:	4313      	orrs	r3, r2
 800312e:	2b0f      	cmp	r3, #15
 8003130:	d834      	bhi.n	800319c <__aeabi_fdiv+0x160>
 8003132:	484d      	ldr	r0, [pc, #308]	; (8003268 <__aeabi_fdiv+0x22c>)
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	58c3      	ldr	r3, [r0, r3]
 8003138:	469f      	mov	pc, r3
 800313a:	2d00      	cmp	r5, #0
 800313c:	d113      	bne.n	8003166 <__aeabi_fdiv+0x12a>
 800313e:	2304      	movs	r3, #4
 8003140:	4699      	mov	r9, r3
 8003142:	3b03      	subs	r3, #3
 8003144:	2700      	movs	r7, #0
 8003146:	469a      	mov	sl, r3
 8003148:	e791      	b.n	800306e <__aeabi_fdiv+0x32>
 800314a:	2d00      	cmp	r5, #0
 800314c:	d105      	bne.n	800315a <__aeabi_fdiv+0x11e>
 800314e:	2308      	movs	r3, #8
 8003150:	4699      	mov	r9, r3
 8003152:	3b06      	subs	r3, #6
 8003154:	27ff      	movs	r7, #255	; 0xff
 8003156:	469a      	mov	sl, r3
 8003158:	e789      	b.n	800306e <__aeabi_fdiv+0x32>
 800315a:	230c      	movs	r3, #12
 800315c:	4699      	mov	r9, r3
 800315e:	3b09      	subs	r3, #9
 8003160:	27ff      	movs	r7, #255	; 0xff
 8003162:	469a      	mov	sl, r3
 8003164:	e783      	b.n	800306e <__aeabi_fdiv+0x32>
 8003166:	0028      	movs	r0, r5
 8003168:	f002 faf4 	bl	8005754 <__clzsi2>
 800316c:	2776      	movs	r7, #118	; 0x76
 800316e:	1f43      	subs	r3, r0, #5
 8003170:	409d      	lsls	r5, r3
 8003172:	2300      	movs	r3, #0
 8003174:	427f      	negs	r7, r7
 8003176:	4699      	mov	r9, r3
 8003178:	469a      	mov	sl, r3
 800317a:	1a3f      	subs	r7, r7, r0
 800317c:	e777      	b.n	800306e <__aeabi_fdiv+0x32>
 800317e:	4640      	mov	r0, r8
 8003180:	f002 fae8 	bl	8005754 <__clzsi2>
 8003184:	4642      	mov	r2, r8
 8003186:	1f43      	subs	r3, r0, #5
 8003188:	409a      	lsls	r2, r3
 800318a:	2376      	movs	r3, #118	; 0x76
 800318c:	425b      	negs	r3, r3
 800318e:	4690      	mov	r8, r2
 8003190:	1a1b      	subs	r3, r3, r0
 8003192:	2200      	movs	r2, #0
 8003194:	e77d      	b.n	8003092 <__aeabi_fdiv+0x56>
 8003196:	23ff      	movs	r3, #255	; 0xff
 8003198:	2203      	movs	r2, #3
 800319a:	e77a      	b.n	8003092 <__aeabi_fdiv+0x56>
 800319c:	000e      	movs	r6, r1
 800319e:	20ff      	movs	r0, #255	; 0xff
 80031a0:	2500      	movs	r5, #0
 80031a2:	e7ac      	b.n	80030fe <__aeabi_fdiv+0xc2>
 80031a4:	2001      	movs	r0, #1
 80031a6:	1ac0      	subs	r0, r0, r3
 80031a8:	281b      	cmp	r0, #27
 80031aa:	dca6      	bgt.n	80030fa <__aeabi_fdiv+0xbe>
 80031ac:	379e      	adds	r7, #158	; 0x9e
 80031ae:	002a      	movs	r2, r5
 80031b0:	40bd      	lsls	r5, r7
 80031b2:	40c2      	lsrs	r2, r0
 80031b4:	1e6b      	subs	r3, r5, #1
 80031b6:	419d      	sbcs	r5, r3
 80031b8:	4315      	orrs	r5, r2
 80031ba:	076b      	lsls	r3, r5, #29
 80031bc:	d004      	beq.n	80031c8 <__aeabi_fdiv+0x18c>
 80031be:	230f      	movs	r3, #15
 80031c0:	402b      	ands	r3, r5
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d000      	beq.n	80031c8 <__aeabi_fdiv+0x18c>
 80031c6:	3504      	adds	r5, #4
 80031c8:	016b      	lsls	r3, r5, #5
 80031ca:	d544      	bpl.n	8003256 <__aeabi_fdiv+0x21a>
 80031cc:	2001      	movs	r0, #1
 80031ce:	2500      	movs	r5, #0
 80031d0:	e795      	b.n	80030fe <__aeabi_fdiv+0xc2>
 80031d2:	20ff      	movs	r0, #255	; 0xff
 80031d4:	2500      	movs	r5, #0
 80031d6:	e792      	b.n	80030fe <__aeabi_fdiv+0xc2>
 80031d8:	2580      	movs	r5, #128	; 0x80
 80031da:	2600      	movs	r6, #0
 80031dc:	20ff      	movs	r0, #255	; 0xff
 80031de:	03ed      	lsls	r5, r5, #15
 80031e0:	e78d      	b.n	80030fe <__aeabi_fdiv+0xc2>
 80031e2:	2300      	movs	r3, #0
 80031e4:	4698      	mov	r8, r3
 80031e6:	2080      	movs	r0, #128	; 0x80
 80031e8:	03c0      	lsls	r0, r0, #15
 80031ea:	4205      	tst	r5, r0
 80031ec:	d009      	beq.n	8003202 <__aeabi_fdiv+0x1c6>
 80031ee:	4643      	mov	r3, r8
 80031f0:	4203      	tst	r3, r0
 80031f2:	d106      	bne.n	8003202 <__aeabi_fdiv+0x1c6>
 80031f4:	4645      	mov	r5, r8
 80031f6:	4305      	orrs	r5, r0
 80031f8:	026d      	lsls	r5, r5, #9
 80031fa:	0026      	movs	r6, r4
 80031fc:	20ff      	movs	r0, #255	; 0xff
 80031fe:	0a6d      	lsrs	r5, r5, #9
 8003200:	e77d      	b.n	80030fe <__aeabi_fdiv+0xc2>
 8003202:	2080      	movs	r0, #128	; 0x80
 8003204:	03c0      	lsls	r0, r0, #15
 8003206:	4305      	orrs	r5, r0
 8003208:	026d      	lsls	r5, r5, #9
 800320a:	20ff      	movs	r0, #255	; 0xff
 800320c:	0a6d      	lsrs	r5, r5, #9
 800320e:	e776      	b.n	80030fe <__aeabi_fdiv+0xc2>
 8003210:	4642      	mov	r2, r8
 8003212:	016b      	lsls	r3, r5, #5
 8003214:	0150      	lsls	r0, r2, #5
 8003216:	4283      	cmp	r3, r0
 8003218:	d219      	bcs.n	800324e <__aeabi_fdiv+0x212>
 800321a:	221b      	movs	r2, #27
 800321c:	2500      	movs	r5, #0
 800321e:	3f01      	subs	r7, #1
 8003220:	2601      	movs	r6, #1
 8003222:	001c      	movs	r4, r3
 8003224:	006d      	lsls	r5, r5, #1
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	2c00      	cmp	r4, #0
 800322a:	db01      	blt.n	8003230 <__aeabi_fdiv+0x1f4>
 800322c:	4298      	cmp	r0, r3
 800322e:	d801      	bhi.n	8003234 <__aeabi_fdiv+0x1f8>
 8003230:	1a1b      	subs	r3, r3, r0
 8003232:	4335      	orrs	r5, r6
 8003234:	3a01      	subs	r2, #1
 8003236:	2a00      	cmp	r2, #0
 8003238:	d1f3      	bne.n	8003222 <__aeabi_fdiv+0x1e6>
 800323a:	1e5a      	subs	r2, r3, #1
 800323c:	4193      	sbcs	r3, r2
 800323e:	431d      	orrs	r5, r3
 8003240:	003b      	movs	r3, r7
 8003242:	337f      	adds	r3, #127	; 0x7f
 8003244:	000e      	movs	r6, r1
 8003246:	2b00      	cmp	r3, #0
 8003248:	dd00      	ble.n	800324c <__aeabi_fdiv+0x210>
 800324a:	e741      	b.n	80030d0 <__aeabi_fdiv+0x94>
 800324c:	e7aa      	b.n	80031a4 <__aeabi_fdiv+0x168>
 800324e:	221a      	movs	r2, #26
 8003250:	2501      	movs	r5, #1
 8003252:	1a1b      	subs	r3, r3, r0
 8003254:	e7e4      	b.n	8003220 <__aeabi_fdiv+0x1e4>
 8003256:	01ad      	lsls	r5, r5, #6
 8003258:	2000      	movs	r0, #0
 800325a:	0a6d      	lsrs	r5, r5, #9
 800325c:	e74f      	b.n	80030fe <__aeabi_fdiv+0xc2>
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	0800d16c 	.word	0x0800d16c
 8003264:	f7ffffff 	.word	0xf7ffffff
 8003268:	0800d1ac 	.word	0x0800d1ac

0800326c <__aeabi_fmul>:
 800326c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326e:	464f      	mov	r7, r9
 8003270:	4646      	mov	r6, r8
 8003272:	46d6      	mov	lr, sl
 8003274:	0244      	lsls	r4, r0, #9
 8003276:	0045      	lsls	r5, r0, #1
 8003278:	b5c0      	push	{r6, r7, lr}
 800327a:	0a64      	lsrs	r4, r4, #9
 800327c:	1c0f      	adds	r7, r1, #0
 800327e:	0e2d      	lsrs	r5, r5, #24
 8003280:	0fc6      	lsrs	r6, r0, #31
 8003282:	2d00      	cmp	r5, #0
 8003284:	d100      	bne.n	8003288 <__aeabi_fmul+0x1c>
 8003286:	e08d      	b.n	80033a4 <__aeabi_fmul+0x138>
 8003288:	2dff      	cmp	r5, #255	; 0xff
 800328a:	d100      	bne.n	800328e <__aeabi_fmul+0x22>
 800328c:	e092      	b.n	80033b4 <__aeabi_fmul+0x148>
 800328e:	2300      	movs	r3, #0
 8003290:	2080      	movs	r0, #128	; 0x80
 8003292:	4699      	mov	r9, r3
 8003294:	469a      	mov	sl, r3
 8003296:	00e4      	lsls	r4, r4, #3
 8003298:	04c0      	lsls	r0, r0, #19
 800329a:	4304      	orrs	r4, r0
 800329c:	3d7f      	subs	r5, #127	; 0x7f
 800329e:	0278      	lsls	r0, r7, #9
 80032a0:	0a43      	lsrs	r3, r0, #9
 80032a2:	4698      	mov	r8, r3
 80032a4:	007b      	lsls	r3, r7, #1
 80032a6:	0e1b      	lsrs	r3, r3, #24
 80032a8:	0fff      	lsrs	r7, r7, #31
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d100      	bne.n	80032b0 <__aeabi_fmul+0x44>
 80032ae:	e070      	b.n	8003392 <__aeabi_fmul+0x126>
 80032b0:	2bff      	cmp	r3, #255	; 0xff
 80032b2:	d100      	bne.n	80032b6 <__aeabi_fmul+0x4a>
 80032b4:	e086      	b.n	80033c4 <__aeabi_fmul+0x158>
 80032b6:	4642      	mov	r2, r8
 80032b8:	00d0      	lsls	r0, r2, #3
 80032ba:	2280      	movs	r2, #128	; 0x80
 80032bc:	3b7f      	subs	r3, #127	; 0x7f
 80032be:	18ed      	adds	r5, r5, r3
 80032c0:	2300      	movs	r3, #0
 80032c2:	04d2      	lsls	r2, r2, #19
 80032c4:	4302      	orrs	r2, r0
 80032c6:	4690      	mov	r8, r2
 80032c8:	469c      	mov	ip, r3
 80032ca:	0031      	movs	r1, r6
 80032cc:	464b      	mov	r3, r9
 80032ce:	4079      	eors	r1, r7
 80032d0:	1c68      	adds	r0, r5, #1
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	d81c      	bhi.n	8003310 <__aeabi_fmul+0xa4>
 80032d6:	4a76      	ldr	r2, [pc, #472]	; (80034b0 <__aeabi_fmul+0x244>)
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	58d3      	ldr	r3, [r2, r3]
 80032dc:	469f      	mov	pc, r3
 80032de:	0039      	movs	r1, r7
 80032e0:	4644      	mov	r4, r8
 80032e2:	46e2      	mov	sl, ip
 80032e4:	4653      	mov	r3, sl
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d00f      	beq.n	800330a <__aeabi_fmul+0x9e>
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d100      	bne.n	80032f0 <__aeabi_fmul+0x84>
 80032ee:	e0d7      	b.n	80034a0 <__aeabi_fmul+0x234>
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d137      	bne.n	8003364 <__aeabi_fmul+0xf8>
 80032f4:	2000      	movs	r0, #0
 80032f6:	2400      	movs	r4, #0
 80032f8:	05c0      	lsls	r0, r0, #23
 80032fa:	4320      	orrs	r0, r4
 80032fc:	07c9      	lsls	r1, r1, #31
 80032fe:	4308      	orrs	r0, r1
 8003300:	bce0      	pop	{r5, r6, r7}
 8003302:	46ba      	mov	sl, r7
 8003304:	46b1      	mov	r9, r6
 8003306:	46a8      	mov	r8, r5
 8003308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800330a:	20ff      	movs	r0, #255	; 0xff
 800330c:	2400      	movs	r4, #0
 800330e:	e7f3      	b.n	80032f8 <__aeabi_fmul+0x8c>
 8003310:	0c26      	lsrs	r6, r4, #16
 8003312:	0424      	lsls	r4, r4, #16
 8003314:	0c22      	lsrs	r2, r4, #16
 8003316:	4644      	mov	r4, r8
 8003318:	0424      	lsls	r4, r4, #16
 800331a:	0c24      	lsrs	r4, r4, #16
 800331c:	4643      	mov	r3, r8
 800331e:	0027      	movs	r7, r4
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	4357      	muls	r7, r2
 8003324:	4374      	muls	r4, r6
 8003326:	435a      	muls	r2, r3
 8003328:	435e      	muls	r6, r3
 800332a:	1912      	adds	r2, r2, r4
 800332c:	0c3b      	lsrs	r3, r7, #16
 800332e:	189b      	adds	r3, r3, r2
 8003330:	429c      	cmp	r4, r3
 8003332:	d903      	bls.n	800333c <__aeabi_fmul+0xd0>
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	0252      	lsls	r2, r2, #9
 8003338:	4694      	mov	ip, r2
 800333a:	4466      	add	r6, ip
 800333c:	043f      	lsls	r7, r7, #16
 800333e:	041a      	lsls	r2, r3, #16
 8003340:	0c3f      	lsrs	r7, r7, #16
 8003342:	19d2      	adds	r2, r2, r7
 8003344:	0194      	lsls	r4, r2, #6
 8003346:	1e67      	subs	r7, r4, #1
 8003348:	41bc      	sbcs	r4, r7
 800334a:	0c1b      	lsrs	r3, r3, #16
 800334c:	0e92      	lsrs	r2, r2, #26
 800334e:	199b      	adds	r3, r3, r6
 8003350:	4314      	orrs	r4, r2
 8003352:	019b      	lsls	r3, r3, #6
 8003354:	431c      	orrs	r4, r3
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	d400      	bmi.n	800335c <__aeabi_fmul+0xf0>
 800335a:	e09b      	b.n	8003494 <__aeabi_fmul+0x228>
 800335c:	2301      	movs	r3, #1
 800335e:	0862      	lsrs	r2, r4, #1
 8003360:	401c      	ands	r4, r3
 8003362:	4314      	orrs	r4, r2
 8003364:	0002      	movs	r2, r0
 8003366:	327f      	adds	r2, #127	; 0x7f
 8003368:	2a00      	cmp	r2, #0
 800336a:	dd64      	ble.n	8003436 <__aeabi_fmul+0x1ca>
 800336c:	0763      	lsls	r3, r4, #29
 800336e:	d004      	beq.n	800337a <__aeabi_fmul+0x10e>
 8003370:	230f      	movs	r3, #15
 8003372:	4023      	ands	r3, r4
 8003374:	2b04      	cmp	r3, #4
 8003376:	d000      	beq.n	800337a <__aeabi_fmul+0x10e>
 8003378:	3404      	adds	r4, #4
 800337a:	0123      	lsls	r3, r4, #4
 800337c:	d503      	bpl.n	8003386 <__aeabi_fmul+0x11a>
 800337e:	0002      	movs	r2, r0
 8003380:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <__aeabi_fmul+0x248>)
 8003382:	3280      	adds	r2, #128	; 0x80
 8003384:	401c      	ands	r4, r3
 8003386:	2afe      	cmp	r2, #254	; 0xfe
 8003388:	dcbf      	bgt.n	800330a <__aeabi_fmul+0x9e>
 800338a:	01a4      	lsls	r4, r4, #6
 800338c:	0a64      	lsrs	r4, r4, #9
 800338e:	b2d0      	uxtb	r0, r2
 8003390:	e7b2      	b.n	80032f8 <__aeabi_fmul+0x8c>
 8003392:	4643      	mov	r3, r8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d13d      	bne.n	8003414 <__aeabi_fmul+0x1a8>
 8003398:	464a      	mov	r2, r9
 800339a:	3301      	adds	r3, #1
 800339c:	431a      	orrs	r2, r3
 800339e:	4691      	mov	r9, r2
 80033a0:	469c      	mov	ip, r3
 80033a2:	e792      	b.n	80032ca <__aeabi_fmul+0x5e>
 80033a4:	2c00      	cmp	r4, #0
 80033a6:	d129      	bne.n	80033fc <__aeabi_fmul+0x190>
 80033a8:	2304      	movs	r3, #4
 80033aa:	4699      	mov	r9, r3
 80033ac:	3b03      	subs	r3, #3
 80033ae:	2500      	movs	r5, #0
 80033b0:	469a      	mov	sl, r3
 80033b2:	e774      	b.n	800329e <__aeabi_fmul+0x32>
 80033b4:	2c00      	cmp	r4, #0
 80033b6:	d11b      	bne.n	80033f0 <__aeabi_fmul+0x184>
 80033b8:	2308      	movs	r3, #8
 80033ba:	4699      	mov	r9, r3
 80033bc:	3b06      	subs	r3, #6
 80033be:	25ff      	movs	r5, #255	; 0xff
 80033c0:	469a      	mov	sl, r3
 80033c2:	e76c      	b.n	800329e <__aeabi_fmul+0x32>
 80033c4:	4643      	mov	r3, r8
 80033c6:	35ff      	adds	r5, #255	; 0xff
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10b      	bne.n	80033e4 <__aeabi_fmul+0x178>
 80033cc:	2302      	movs	r3, #2
 80033ce:	464a      	mov	r2, r9
 80033d0:	431a      	orrs	r2, r3
 80033d2:	4691      	mov	r9, r2
 80033d4:	469c      	mov	ip, r3
 80033d6:	e778      	b.n	80032ca <__aeabi_fmul+0x5e>
 80033d8:	4653      	mov	r3, sl
 80033da:	0031      	movs	r1, r6
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d000      	beq.n	80033e2 <__aeabi_fmul+0x176>
 80033e0:	e783      	b.n	80032ea <__aeabi_fmul+0x7e>
 80033e2:	e792      	b.n	800330a <__aeabi_fmul+0x9e>
 80033e4:	2303      	movs	r3, #3
 80033e6:	464a      	mov	r2, r9
 80033e8:	431a      	orrs	r2, r3
 80033ea:	4691      	mov	r9, r2
 80033ec:	469c      	mov	ip, r3
 80033ee:	e76c      	b.n	80032ca <__aeabi_fmul+0x5e>
 80033f0:	230c      	movs	r3, #12
 80033f2:	4699      	mov	r9, r3
 80033f4:	3b09      	subs	r3, #9
 80033f6:	25ff      	movs	r5, #255	; 0xff
 80033f8:	469a      	mov	sl, r3
 80033fa:	e750      	b.n	800329e <__aeabi_fmul+0x32>
 80033fc:	0020      	movs	r0, r4
 80033fe:	f002 f9a9 	bl	8005754 <__clzsi2>
 8003402:	2576      	movs	r5, #118	; 0x76
 8003404:	1f43      	subs	r3, r0, #5
 8003406:	409c      	lsls	r4, r3
 8003408:	2300      	movs	r3, #0
 800340a:	426d      	negs	r5, r5
 800340c:	4699      	mov	r9, r3
 800340e:	469a      	mov	sl, r3
 8003410:	1a2d      	subs	r5, r5, r0
 8003412:	e744      	b.n	800329e <__aeabi_fmul+0x32>
 8003414:	4640      	mov	r0, r8
 8003416:	f002 f99d 	bl	8005754 <__clzsi2>
 800341a:	4642      	mov	r2, r8
 800341c:	1f43      	subs	r3, r0, #5
 800341e:	409a      	lsls	r2, r3
 8003420:	2300      	movs	r3, #0
 8003422:	1a2d      	subs	r5, r5, r0
 8003424:	4690      	mov	r8, r2
 8003426:	469c      	mov	ip, r3
 8003428:	3d76      	subs	r5, #118	; 0x76
 800342a:	e74e      	b.n	80032ca <__aeabi_fmul+0x5e>
 800342c:	2480      	movs	r4, #128	; 0x80
 800342e:	2100      	movs	r1, #0
 8003430:	20ff      	movs	r0, #255	; 0xff
 8003432:	03e4      	lsls	r4, r4, #15
 8003434:	e760      	b.n	80032f8 <__aeabi_fmul+0x8c>
 8003436:	2301      	movs	r3, #1
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	2b1b      	cmp	r3, #27
 800343c:	dd00      	ble.n	8003440 <__aeabi_fmul+0x1d4>
 800343e:	e759      	b.n	80032f4 <__aeabi_fmul+0x88>
 8003440:	0022      	movs	r2, r4
 8003442:	309e      	adds	r0, #158	; 0x9e
 8003444:	40da      	lsrs	r2, r3
 8003446:	4084      	lsls	r4, r0
 8003448:	0013      	movs	r3, r2
 800344a:	1e62      	subs	r2, r4, #1
 800344c:	4194      	sbcs	r4, r2
 800344e:	431c      	orrs	r4, r3
 8003450:	0763      	lsls	r3, r4, #29
 8003452:	d004      	beq.n	800345e <__aeabi_fmul+0x1f2>
 8003454:	230f      	movs	r3, #15
 8003456:	4023      	ands	r3, r4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d000      	beq.n	800345e <__aeabi_fmul+0x1f2>
 800345c:	3404      	adds	r4, #4
 800345e:	0163      	lsls	r3, r4, #5
 8003460:	d51a      	bpl.n	8003498 <__aeabi_fmul+0x22c>
 8003462:	2001      	movs	r0, #1
 8003464:	2400      	movs	r4, #0
 8003466:	e747      	b.n	80032f8 <__aeabi_fmul+0x8c>
 8003468:	2080      	movs	r0, #128	; 0x80
 800346a:	03c0      	lsls	r0, r0, #15
 800346c:	4204      	tst	r4, r0
 800346e:	d009      	beq.n	8003484 <__aeabi_fmul+0x218>
 8003470:	4643      	mov	r3, r8
 8003472:	4203      	tst	r3, r0
 8003474:	d106      	bne.n	8003484 <__aeabi_fmul+0x218>
 8003476:	4644      	mov	r4, r8
 8003478:	4304      	orrs	r4, r0
 800347a:	0264      	lsls	r4, r4, #9
 800347c:	0039      	movs	r1, r7
 800347e:	20ff      	movs	r0, #255	; 0xff
 8003480:	0a64      	lsrs	r4, r4, #9
 8003482:	e739      	b.n	80032f8 <__aeabi_fmul+0x8c>
 8003484:	2080      	movs	r0, #128	; 0x80
 8003486:	03c0      	lsls	r0, r0, #15
 8003488:	4304      	orrs	r4, r0
 800348a:	0264      	lsls	r4, r4, #9
 800348c:	0031      	movs	r1, r6
 800348e:	20ff      	movs	r0, #255	; 0xff
 8003490:	0a64      	lsrs	r4, r4, #9
 8003492:	e731      	b.n	80032f8 <__aeabi_fmul+0x8c>
 8003494:	0028      	movs	r0, r5
 8003496:	e765      	b.n	8003364 <__aeabi_fmul+0xf8>
 8003498:	01a4      	lsls	r4, r4, #6
 800349a:	2000      	movs	r0, #0
 800349c:	0a64      	lsrs	r4, r4, #9
 800349e:	e72b      	b.n	80032f8 <__aeabi_fmul+0x8c>
 80034a0:	2080      	movs	r0, #128	; 0x80
 80034a2:	03c0      	lsls	r0, r0, #15
 80034a4:	4304      	orrs	r4, r0
 80034a6:	0264      	lsls	r4, r4, #9
 80034a8:	20ff      	movs	r0, #255	; 0xff
 80034aa:	0a64      	lsrs	r4, r4, #9
 80034ac:	e724      	b.n	80032f8 <__aeabi_fmul+0x8c>
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	0800d1ec 	.word	0x0800d1ec
 80034b4:	f7ffffff 	.word	0xf7ffffff

080034b8 <__aeabi_fsub>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	46ce      	mov	lr, r9
 80034bc:	4647      	mov	r7, r8
 80034be:	0243      	lsls	r3, r0, #9
 80034c0:	0a5b      	lsrs	r3, r3, #9
 80034c2:	024e      	lsls	r6, r1, #9
 80034c4:	00da      	lsls	r2, r3, #3
 80034c6:	4694      	mov	ip, r2
 80034c8:	0a72      	lsrs	r2, r6, #9
 80034ca:	4691      	mov	r9, r2
 80034cc:	0045      	lsls	r5, r0, #1
 80034ce:	004a      	lsls	r2, r1, #1
 80034d0:	b580      	push	{r7, lr}
 80034d2:	0e2d      	lsrs	r5, r5, #24
 80034d4:	001f      	movs	r7, r3
 80034d6:	0fc4      	lsrs	r4, r0, #31
 80034d8:	0e12      	lsrs	r2, r2, #24
 80034da:	0fc9      	lsrs	r1, r1, #31
 80034dc:	09b6      	lsrs	r6, r6, #6
 80034de:	2aff      	cmp	r2, #255	; 0xff
 80034e0:	d05b      	beq.n	800359a <__aeabi_fsub+0xe2>
 80034e2:	2001      	movs	r0, #1
 80034e4:	4041      	eors	r1, r0
 80034e6:	428c      	cmp	r4, r1
 80034e8:	d039      	beq.n	800355e <__aeabi_fsub+0xa6>
 80034ea:	1aa8      	subs	r0, r5, r2
 80034ec:	2800      	cmp	r0, #0
 80034ee:	dd5a      	ble.n	80035a6 <__aeabi_fsub+0xee>
 80034f0:	2a00      	cmp	r2, #0
 80034f2:	d06a      	beq.n	80035ca <__aeabi_fsub+0x112>
 80034f4:	2dff      	cmp	r5, #255	; 0xff
 80034f6:	d100      	bne.n	80034fa <__aeabi_fsub+0x42>
 80034f8:	e0d9      	b.n	80036ae <__aeabi_fsub+0x1f6>
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	04d2      	lsls	r2, r2, #19
 80034fe:	4316      	orrs	r6, r2
 8003500:	281b      	cmp	r0, #27
 8003502:	dc00      	bgt.n	8003506 <__aeabi_fsub+0x4e>
 8003504:	e0e9      	b.n	80036da <__aeabi_fsub+0x222>
 8003506:	2001      	movs	r0, #1
 8003508:	4663      	mov	r3, ip
 800350a:	1a18      	subs	r0, r3, r0
 800350c:	0143      	lsls	r3, r0, #5
 800350e:	d400      	bmi.n	8003512 <__aeabi_fsub+0x5a>
 8003510:	e0b4      	b.n	800367c <__aeabi_fsub+0x1c4>
 8003512:	0180      	lsls	r0, r0, #6
 8003514:	0987      	lsrs	r7, r0, #6
 8003516:	0038      	movs	r0, r7
 8003518:	f002 f91c 	bl	8005754 <__clzsi2>
 800351c:	3805      	subs	r0, #5
 800351e:	4087      	lsls	r7, r0
 8003520:	4285      	cmp	r5, r0
 8003522:	dc00      	bgt.n	8003526 <__aeabi_fsub+0x6e>
 8003524:	e0cc      	b.n	80036c0 <__aeabi_fsub+0x208>
 8003526:	1a2d      	subs	r5, r5, r0
 8003528:	48b5      	ldr	r0, [pc, #724]	; (8003800 <__aeabi_fsub+0x348>)
 800352a:	4038      	ands	r0, r7
 800352c:	0743      	lsls	r3, r0, #29
 800352e:	d004      	beq.n	800353a <__aeabi_fsub+0x82>
 8003530:	230f      	movs	r3, #15
 8003532:	4003      	ands	r3, r0
 8003534:	2b04      	cmp	r3, #4
 8003536:	d000      	beq.n	800353a <__aeabi_fsub+0x82>
 8003538:	3004      	adds	r0, #4
 800353a:	0143      	lsls	r3, r0, #5
 800353c:	d400      	bmi.n	8003540 <__aeabi_fsub+0x88>
 800353e:	e0a0      	b.n	8003682 <__aeabi_fsub+0x1ca>
 8003540:	1c6a      	adds	r2, r5, #1
 8003542:	2dfe      	cmp	r5, #254	; 0xfe
 8003544:	d100      	bne.n	8003548 <__aeabi_fsub+0x90>
 8003546:	e08d      	b.n	8003664 <__aeabi_fsub+0x1ac>
 8003548:	0180      	lsls	r0, r0, #6
 800354a:	0a47      	lsrs	r7, r0, #9
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	05d0      	lsls	r0, r2, #23
 8003550:	4338      	orrs	r0, r7
 8003552:	07e4      	lsls	r4, r4, #31
 8003554:	4320      	orrs	r0, r4
 8003556:	bcc0      	pop	{r6, r7}
 8003558:	46b9      	mov	r9, r7
 800355a:	46b0      	mov	r8, r6
 800355c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800355e:	1aa8      	subs	r0, r5, r2
 8003560:	4680      	mov	r8, r0
 8003562:	2800      	cmp	r0, #0
 8003564:	dd45      	ble.n	80035f2 <__aeabi_fsub+0x13a>
 8003566:	2a00      	cmp	r2, #0
 8003568:	d070      	beq.n	800364c <__aeabi_fsub+0x194>
 800356a:	2dff      	cmp	r5, #255	; 0xff
 800356c:	d100      	bne.n	8003570 <__aeabi_fsub+0xb8>
 800356e:	e09e      	b.n	80036ae <__aeabi_fsub+0x1f6>
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	04db      	lsls	r3, r3, #19
 8003574:	431e      	orrs	r6, r3
 8003576:	4643      	mov	r3, r8
 8003578:	2b1b      	cmp	r3, #27
 800357a:	dc00      	bgt.n	800357e <__aeabi_fsub+0xc6>
 800357c:	e0d2      	b.n	8003724 <__aeabi_fsub+0x26c>
 800357e:	2001      	movs	r0, #1
 8003580:	4460      	add	r0, ip
 8003582:	0143      	lsls	r3, r0, #5
 8003584:	d57a      	bpl.n	800367c <__aeabi_fsub+0x1c4>
 8003586:	3501      	adds	r5, #1
 8003588:	2dff      	cmp	r5, #255	; 0xff
 800358a:	d06b      	beq.n	8003664 <__aeabi_fsub+0x1ac>
 800358c:	2301      	movs	r3, #1
 800358e:	4a9d      	ldr	r2, [pc, #628]	; (8003804 <__aeabi_fsub+0x34c>)
 8003590:	4003      	ands	r3, r0
 8003592:	0840      	lsrs	r0, r0, #1
 8003594:	4010      	ands	r0, r2
 8003596:	4318      	orrs	r0, r3
 8003598:	e7c8      	b.n	800352c <__aeabi_fsub+0x74>
 800359a:	2e00      	cmp	r6, #0
 800359c:	d020      	beq.n	80035e0 <__aeabi_fsub+0x128>
 800359e:	428c      	cmp	r4, r1
 80035a0:	d023      	beq.n	80035ea <__aeabi_fsub+0x132>
 80035a2:	0028      	movs	r0, r5
 80035a4:	38ff      	subs	r0, #255	; 0xff
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d039      	beq.n	800361e <__aeabi_fsub+0x166>
 80035aa:	1b57      	subs	r7, r2, r5
 80035ac:	2d00      	cmp	r5, #0
 80035ae:	d000      	beq.n	80035b2 <__aeabi_fsub+0xfa>
 80035b0:	e09d      	b.n	80036ee <__aeabi_fsub+0x236>
 80035b2:	4663      	mov	r3, ip
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d100      	bne.n	80035ba <__aeabi_fsub+0x102>
 80035b8:	e0db      	b.n	8003772 <__aeabi_fsub+0x2ba>
 80035ba:	1e7b      	subs	r3, r7, #1
 80035bc:	2f01      	cmp	r7, #1
 80035be:	d100      	bne.n	80035c2 <__aeabi_fsub+0x10a>
 80035c0:	e10d      	b.n	80037de <__aeabi_fsub+0x326>
 80035c2:	2fff      	cmp	r7, #255	; 0xff
 80035c4:	d071      	beq.n	80036aa <__aeabi_fsub+0x1f2>
 80035c6:	001f      	movs	r7, r3
 80035c8:	e098      	b.n	80036fc <__aeabi_fsub+0x244>
 80035ca:	2e00      	cmp	r6, #0
 80035cc:	d100      	bne.n	80035d0 <__aeabi_fsub+0x118>
 80035ce:	e0a7      	b.n	8003720 <__aeabi_fsub+0x268>
 80035d0:	1e42      	subs	r2, r0, #1
 80035d2:	2801      	cmp	r0, #1
 80035d4:	d100      	bne.n	80035d8 <__aeabi_fsub+0x120>
 80035d6:	e0e6      	b.n	80037a6 <__aeabi_fsub+0x2ee>
 80035d8:	28ff      	cmp	r0, #255	; 0xff
 80035da:	d068      	beq.n	80036ae <__aeabi_fsub+0x1f6>
 80035dc:	0010      	movs	r0, r2
 80035de:	e78f      	b.n	8003500 <__aeabi_fsub+0x48>
 80035e0:	2001      	movs	r0, #1
 80035e2:	4041      	eors	r1, r0
 80035e4:	42a1      	cmp	r1, r4
 80035e6:	d000      	beq.n	80035ea <__aeabi_fsub+0x132>
 80035e8:	e77f      	b.n	80034ea <__aeabi_fsub+0x32>
 80035ea:	20ff      	movs	r0, #255	; 0xff
 80035ec:	4240      	negs	r0, r0
 80035ee:	4680      	mov	r8, r0
 80035f0:	44a8      	add	r8, r5
 80035f2:	4640      	mov	r0, r8
 80035f4:	2800      	cmp	r0, #0
 80035f6:	d038      	beq.n	800366a <__aeabi_fsub+0x1b2>
 80035f8:	1b51      	subs	r1, r2, r5
 80035fa:	2d00      	cmp	r5, #0
 80035fc:	d100      	bne.n	8003600 <__aeabi_fsub+0x148>
 80035fe:	e0ae      	b.n	800375e <__aeabi_fsub+0x2a6>
 8003600:	2aff      	cmp	r2, #255	; 0xff
 8003602:	d100      	bne.n	8003606 <__aeabi_fsub+0x14e>
 8003604:	e0df      	b.n	80037c6 <__aeabi_fsub+0x30e>
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	4660      	mov	r0, ip
 800360a:	04db      	lsls	r3, r3, #19
 800360c:	4318      	orrs	r0, r3
 800360e:	4684      	mov	ip, r0
 8003610:	291b      	cmp	r1, #27
 8003612:	dc00      	bgt.n	8003616 <__aeabi_fsub+0x15e>
 8003614:	e0d9      	b.n	80037ca <__aeabi_fsub+0x312>
 8003616:	2001      	movs	r0, #1
 8003618:	0015      	movs	r5, r2
 800361a:	1980      	adds	r0, r0, r6
 800361c:	e7b1      	b.n	8003582 <__aeabi_fsub+0xca>
 800361e:	20fe      	movs	r0, #254	; 0xfe
 8003620:	1c6a      	adds	r2, r5, #1
 8003622:	4210      	tst	r0, r2
 8003624:	d171      	bne.n	800370a <__aeabi_fsub+0x252>
 8003626:	2d00      	cmp	r5, #0
 8003628:	d000      	beq.n	800362c <__aeabi_fsub+0x174>
 800362a:	e0a6      	b.n	800377a <__aeabi_fsub+0x2c2>
 800362c:	4663      	mov	r3, ip
 800362e:	2b00      	cmp	r3, #0
 8003630:	d100      	bne.n	8003634 <__aeabi_fsub+0x17c>
 8003632:	e0d9      	b.n	80037e8 <__aeabi_fsub+0x330>
 8003634:	2200      	movs	r2, #0
 8003636:	2e00      	cmp	r6, #0
 8003638:	d100      	bne.n	800363c <__aeabi_fsub+0x184>
 800363a:	e788      	b.n	800354e <__aeabi_fsub+0x96>
 800363c:	1b98      	subs	r0, r3, r6
 800363e:	0143      	lsls	r3, r0, #5
 8003640:	d400      	bmi.n	8003644 <__aeabi_fsub+0x18c>
 8003642:	e0e1      	b.n	8003808 <__aeabi_fsub+0x350>
 8003644:	4663      	mov	r3, ip
 8003646:	000c      	movs	r4, r1
 8003648:	1af0      	subs	r0, r6, r3
 800364a:	e76f      	b.n	800352c <__aeabi_fsub+0x74>
 800364c:	2e00      	cmp	r6, #0
 800364e:	d100      	bne.n	8003652 <__aeabi_fsub+0x19a>
 8003650:	e0b7      	b.n	80037c2 <__aeabi_fsub+0x30a>
 8003652:	0002      	movs	r2, r0
 8003654:	3a01      	subs	r2, #1
 8003656:	2801      	cmp	r0, #1
 8003658:	d100      	bne.n	800365c <__aeabi_fsub+0x1a4>
 800365a:	e09c      	b.n	8003796 <__aeabi_fsub+0x2de>
 800365c:	28ff      	cmp	r0, #255	; 0xff
 800365e:	d026      	beq.n	80036ae <__aeabi_fsub+0x1f6>
 8003660:	4690      	mov	r8, r2
 8003662:	e788      	b.n	8003576 <__aeabi_fsub+0xbe>
 8003664:	22ff      	movs	r2, #255	; 0xff
 8003666:	2700      	movs	r7, #0
 8003668:	e771      	b.n	800354e <__aeabi_fsub+0x96>
 800366a:	20fe      	movs	r0, #254	; 0xfe
 800366c:	1c6a      	adds	r2, r5, #1
 800366e:	4210      	tst	r0, r2
 8003670:	d064      	beq.n	800373c <__aeabi_fsub+0x284>
 8003672:	2aff      	cmp	r2, #255	; 0xff
 8003674:	d0f6      	beq.n	8003664 <__aeabi_fsub+0x1ac>
 8003676:	0015      	movs	r5, r2
 8003678:	4466      	add	r6, ip
 800367a:	0870      	lsrs	r0, r6, #1
 800367c:	0743      	lsls	r3, r0, #29
 800367e:	d000      	beq.n	8003682 <__aeabi_fsub+0x1ca>
 8003680:	e756      	b.n	8003530 <__aeabi_fsub+0x78>
 8003682:	08c3      	lsrs	r3, r0, #3
 8003684:	2dff      	cmp	r5, #255	; 0xff
 8003686:	d012      	beq.n	80036ae <__aeabi_fsub+0x1f6>
 8003688:	025b      	lsls	r3, r3, #9
 800368a:	0a5f      	lsrs	r7, r3, #9
 800368c:	b2ea      	uxtb	r2, r5
 800368e:	e75e      	b.n	800354e <__aeabi_fsub+0x96>
 8003690:	4662      	mov	r2, ip
 8003692:	2a00      	cmp	r2, #0
 8003694:	d100      	bne.n	8003698 <__aeabi_fsub+0x1e0>
 8003696:	e096      	b.n	80037c6 <__aeabi_fsub+0x30e>
 8003698:	2e00      	cmp	r6, #0
 800369a:	d008      	beq.n	80036ae <__aeabi_fsub+0x1f6>
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	03d2      	lsls	r2, r2, #15
 80036a0:	4213      	tst	r3, r2
 80036a2:	d004      	beq.n	80036ae <__aeabi_fsub+0x1f6>
 80036a4:	4648      	mov	r0, r9
 80036a6:	4210      	tst	r0, r2
 80036a8:	d101      	bne.n	80036ae <__aeabi_fsub+0x1f6>
 80036aa:	000c      	movs	r4, r1
 80036ac:	464b      	mov	r3, r9
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0d8      	beq.n	8003664 <__aeabi_fsub+0x1ac>
 80036b2:	2780      	movs	r7, #128	; 0x80
 80036b4:	03ff      	lsls	r7, r7, #15
 80036b6:	431f      	orrs	r7, r3
 80036b8:	027f      	lsls	r7, r7, #9
 80036ba:	22ff      	movs	r2, #255	; 0xff
 80036bc:	0a7f      	lsrs	r7, r7, #9
 80036be:	e746      	b.n	800354e <__aeabi_fsub+0x96>
 80036c0:	2320      	movs	r3, #32
 80036c2:	003a      	movs	r2, r7
 80036c4:	1b45      	subs	r5, r0, r5
 80036c6:	0038      	movs	r0, r7
 80036c8:	3501      	adds	r5, #1
 80036ca:	40ea      	lsrs	r2, r5
 80036cc:	1b5d      	subs	r5, r3, r5
 80036ce:	40a8      	lsls	r0, r5
 80036d0:	1e43      	subs	r3, r0, #1
 80036d2:	4198      	sbcs	r0, r3
 80036d4:	2500      	movs	r5, #0
 80036d6:	4310      	orrs	r0, r2
 80036d8:	e728      	b.n	800352c <__aeabi_fsub+0x74>
 80036da:	2320      	movs	r3, #32
 80036dc:	1a1b      	subs	r3, r3, r0
 80036de:	0032      	movs	r2, r6
 80036e0:	409e      	lsls	r6, r3
 80036e2:	40c2      	lsrs	r2, r0
 80036e4:	0030      	movs	r0, r6
 80036e6:	1e43      	subs	r3, r0, #1
 80036e8:	4198      	sbcs	r0, r3
 80036ea:	4310      	orrs	r0, r2
 80036ec:	e70c      	b.n	8003508 <__aeabi_fsub+0x50>
 80036ee:	2aff      	cmp	r2, #255	; 0xff
 80036f0:	d0db      	beq.n	80036aa <__aeabi_fsub+0x1f2>
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	4660      	mov	r0, ip
 80036f6:	04db      	lsls	r3, r3, #19
 80036f8:	4318      	orrs	r0, r3
 80036fa:	4684      	mov	ip, r0
 80036fc:	2f1b      	cmp	r7, #27
 80036fe:	dd56      	ble.n	80037ae <__aeabi_fsub+0x2f6>
 8003700:	2001      	movs	r0, #1
 8003702:	000c      	movs	r4, r1
 8003704:	0015      	movs	r5, r2
 8003706:	1a30      	subs	r0, r6, r0
 8003708:	e700      	b.n	800350c <__aeabi_fsub+0x54>
 800370a:	4663      	mov	r3, ip
 800370c:	1b9f      	subs	r7, r3, r6
 800370e:	017b      	lsls	r3, r7, #5
 8003710:	d43d      	bmi.n	800378e <__aeabi_fsub+0x2d6>
 8003712:	2f00      	cmp	r7, #0
 8003714:	d000      	beq.n	8003718 <__aeabi_fsub+0x260>
 8003716:	e6fe      	b.n	8003516 <__aeabi_fsub+0x5e>
 8003718:	2400      	movs	r4, #0
 800371a:	2200      	movs	r2, #0
 800371c:	2700      	movs	r7, #0
 800371e:	e716      	b.n	800354e <__aeabi_fsub+0x96>
 8003720:	0005      	movs	r5, r0
 8003722:	e7af      	b.n	8003684 <__aeabi_fsub+0x1cc>
 8003724:	0032      	movs	r2, r6
 8003726:	4643      	mov	r3, r8
 8003728:	4641      	mov	r1, r8
 800372a:	40da      	lsrs	r2, r3
 800372c:	2320      	movs	r3, #32
 800372e:	1a5b      	subs	r3, r3, r1
 8003730:	409e      	lsls	r6, r3
 8003732:	0030      	movs	r0, r6
 8003734:	1e43      	subs	r3, r0, #1
 8003736:	4198      	sbcs	r0, r3
 8003738:	4310      	orrs	r0, r2
 800373a:	e721      	b.n	8003580 <__aeabi_fsub+0xc8>
 800373c:	2d00      	cmp	r5, #0
 800373e:	d1a7      	bne.n	8003690 <__aeabi_fsub+0x1d8>
 8003740:	4663      	mov	r3, ip
 8003742:	2b00      	cmp	r3, #0
 8003744:	d059      	beq.n	80037fa <__aeabi_fsub+0x342>
 8003746:	2200      	movs	r2, #0
 8003748:	2e00      	cmp	r6, #0
 800374a:	d100      	bne.n	800374e <__aeabi_fsub+0x296>
 800374c:	e6ff      	b.n	800354e <__aeabi_fsub+0x96>
 800374e:	0030      	movs	r0, r6
 8003750:	4460      	add	r0, ip
 8003752:	0143      	lsls	r3, r0, #5
 8003754:	d592      	bpl.n	800367c <__aeabi_fsub+0x1c4>
 8003756:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <__aeabi_fsub+0x348>)
 8003758:	3501      	adds	r5, #1
 800375a:	4018      	ands	r0, r3
 800375c:	e78e      	b.n	800367c <__aeabi_fsub+0x1c4>
 800375e:	4663      	mov	r3, ip
 8003760:	2b00      	cmp	r3, #0
 8003762:	d047      	beq.n	80037f4 <__aeabi_fsub+0x33c>
 8003764:	1e4b      	subs	r3, r1, #1
 8003766:	2901      	cmp	r1, #1
 8003768:	d015      	beq.n	8003796 <__aeabi_fsub+0x2de>
 800376a:	29ff      	cmp	r1, #255	; 0xff
 800376c:	d02b      	beq.n	80037c6 <__aeabi_fsub+0x30e>
 800376e:	0019      	movs	r1, r3
 8003770:	e74e      	b.n	8003610 <__aeabi_fsub+0x158>
 8003772:	000c      	movs	r4, r1
 8003774:	464b      	mov	r3, r9
 8003776:	003d      	movs	r5, r7
 8003778:	e784      	b.n	8003684 <__aeabi_fsub+0x1cc>
 800377a:	4662      	mov	r2, ip
 800377c:	2a00      	cmp	r2, #0
 800377e:	d18b      	bne.n	8003698 <__aeabi_fsub+0x1e0>
 8003780:	2e00      	cmp	r6, #0
 8003782:	d192      	bne.n	80036aa <__aeabi_fsub+0x1f2>
 8003784:	2780      	movs	r7, #128	; 0x80
 8003786:	2400      	movs	r4, #0
 8003788:	22ff      	movs	r2, #255	; 0xff
 800378a:	03ff      	lsls	r7, r7, #15
 800378c:	e6df      	b.n	800354e <__aeabi_fsub+0x96>
 800378e:	4663      	mov	r3, ip
 8003790:	000c      	movs	r4, r1
 8003792:	1af7      	subs	r7, r6, r3
 8003794:	e6bf      	b.n	8003516 <__aeabi_fsub+0x5e>
 8003796:	0030      	movs	r0, r6
 8003798:	4460      	add	r0, ip
 800379a:	2501      	movs	r5, #1
 800379c:	0143      	lsls	r3, r0, #5
 800379e:	d400      	bmi.n	80037a2 <__aeabi_fsub+0x2ea>
 80037a0:	e76c      	b.n	800367c <__aeabi_fsub+0x1c4>
 80037a2:	2502      	movs	r5, #2
 80037a4:	e6f2      	b.n	800358c <__aeabi_fsub+0xd4>
 80037a6:	4663      	mov	r3, ip
 80037a8:	2501      	movs	r5, #1
 80037aa:	1b98      	subs	r0, r3, r6
 80037ac:	e6ae      	b.n	800350c <__aeabi_fsub+0x54>
 80037ae:	2320      	movs	r3, #32
 80037b0:	4664      	mov	r4, ip
 80037b2:	4660      	mov	r0, ip
 80037b4:	40fc      	lsrs	r4, r7
 80037b6:	1bdf      	subs	r7, r3, r7
 80037b8:	40b8      	lsls	r0, r7
 80037ba:	1e43      	subs	r3, r0, #1
 80037bc:	4198      	sbcs	r0, r3
 80037be:	4320      	orrs	r0, r4
 80037c0:	e79f      	b.n	8003702 <__aeabi_fsub+0x24a>
 80037c2:	0005      	movs	r5, r0
 80037c4:	e75e      	b.n	8003684 <__aeabi_fsub+0x1cc>
 80037c6:	464b      	mov	r3, r9
 80037c8:	e771      	b.n	80036ae <__aeabi_fsub+0x1f6>
 80037ca:	2320      	movs	r3, #32
 80037cc:	4665      	mov	r5, ip
 80037ce:	4660      	mov	r0, ip
 80037d0:	40cd      	lsrs	r5, r1
 80037d2:	1a59      	subs	r1, r3, r1
 80037d4:	4088      	lsls	r0, r1
 80037d6:	1e43      	subs	r3, r0, #1
 80037d8:	4198      	sbcs	r0, r3
 80037da:	4328      	orrs	r0, r5
 80037dc:	e71c      	b.n	8003618 <__aeabi_fsub+0x160>
 80037de:	4663      	mov	r3, ip
 80037e0:	000c      	movs	r4, r1
 80037e2:	2501      	movs	r5, #1
 80037e4:	1af0      	subs	r0, r6, r3
 80037e6:	e691      	b.n	800350c <__aeabi_fsub+0x54>
 80037e8:	2e00      	cmp	r6, #0
 80037ea:	d095      	beq.n	8003718 <__aeabi_fsub+0x260>
 80037ec:	000c      	movs	r4, r1
 80037ee:	464f      	mov	r7, r9
 80037f0:	2200      	movs	r2, #0
 80037f2:	e6ac      	b.n	800354e <__aeabi_fsub+0x96>
 80037f4:	464b      	mov	r3, r9
 80037f6:	000d      	movs	r5, r1
 80037f8:	e744      	b.n	8003684 <__aeabi_fsub+0x1cc>
 80037fa:	464f      	mov	r7, r9
 80037fc:	2200      	movs	r2, #0
 80037fe:	e6a6      	b.n	800354e <__aeabi_fsub+0x96>
 8003800:	fbffffff 	.word	0xfbffffff
 8003804:	7dffffff 	.word	0x7dffffff
 8003808:	2800      	cmp	r0, #0
 800380a:	d000      	beq.n	800380e <__aeabi_fsub+0x356>
 800380c:	e736      	b.n	800367c <__aeabi_fsub+0x1c4>
 800380e:	2400      	movs	r4, #0
 8003810:	2700      	movs	r7, #0
 8003812:	e69c      	b.n	800354e <__aeabi_fsub+0x96>

08003814 <__aeabi_f2iz>:
 8003814:	0241      	lsls	r1, r0, #9
 8003816:	0042      	lsls	r2, r0, #1
 8003818:	0fc3      	lsrs	r3, r0, #31
 800381a:	0a49      	lsrs	r1, r1, #9
 800381c:	2000      	movs	r0, #0
 800381e:	0e12      	lsrs	r2, r2, #24
 8003820:	2a7e      	cmp	r2, #126	; 0x7e
 8003822:	dd03      	ble.n	800382c <__aeabi_f2iz+0x18>
 8003824:	2a9d      	cmp	r2, #157	; 0x9d
 8003826:	dd02      	ble.n	800382e <__aeabi_f2iz+0x1a>
 8003828:	4a09      	ldr	r2, [pc, #36]	; (8003850 <__aeabi_f2iz+0x3c>)
 800382a:	1898      	adds	r0, r3, r2
 800382c:	4770      	bx	lr
 800382e:	2080      	movs	r0, #128	; 0x80
 8003830:	0400      	lsls	r0, r0, #16
 8003832:	4301      	orrs	r1, r0
 8003834:	2a95      	cmp	r2, #149	; 0x95
 8003836:	dc07      	bgt.n	8003848 <__aeabi_f2iz+0x34>
 8003838:	2096      	movs	r0, #150	; 0x96
 800383a:	1a82      	subs	r2, r0, r2
 800383c:	40d1      	lsrs	r1, r2
 800383e:	4248      	negs	r0, r1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f3      	bne.n	800382c <__aeabi_f2iz+0x18>
 8003844:	0008      	movs	r0, r1
 8003846:	e7f1      	b.n	800382c <__aeabi_f2iz+0x18>
 8003848:	3a96      	subs	r2, #150	; 0x96
 800384a:	4091      	lsls	r1, r2
 800384c:	e7f7      	b.n	800383e <__aeabi_f2iz+0x2a>
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	7fffffff 	.word	0x7fffffff

08003854 <__aeabi_i2f>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	2800      	cmp	r0, #0
 8003858:	d013      	beq.n	8003882 <__aeabi_i2f+0x2e>
 800385a:	17c3      	asrs	r3, r0, #31
 800385c:	18c6      	adds	r6, r0, r3
 800385e:	405e      	eors	r6, r3
 8003860:	0fc4      	lsrs	r4, r0, #31
 8003862:	0030      	movs	r0, r6
 8003864:	f001 ff76 	bl	8005754 <__clzsi2>
 8003868:	239e      	movs	r3, #158	; 0x9e
 800386a:	0005      	movs	r5, r0
 800386c:	1a1b      	subs	r3, r3, r0
 800386e:	2b96      	cmp	r3, #150	; 0x96
 8003870:	dc0f      	bgt.n	8003892 <__aeabi_i2f+0x3e>
 8003872:	2808      	cmp	r0, #8
 8003874:	dd01      	ble.n	800387a <__aeabi_i2f+0x26>
 8003876:	3d08      	subs	r5, #8
 8003878:	40ae      	lsls	r6, r5
 800387a:	0276      	lsls	r6, r6, #9
 800387c:	0a76      	lsrs	r6, r6, #9
 800387e:	b2d8      	uxtb	r0, r3
 8003880:	e002      	b.n	8003888 <__aeabi_i2f+0x34>
 8003882:	2400      	movs	r4, #0
 8003884:	2000      	movs	r0, #0
 8003886:	2600      	movs	r6, #0
 8003888:	05c0      	lsls	r0, r0, #23
 800388a:	4330      	orrs	r0, r6
 800388c:	07e4      	lsls	r4, r4, #31
 800388e:	4320      	orrs	r0, r4
 8003890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003892:	2b99      	cmp	r3, #153	; 0x99
 8003894:	dd0c      	ble.n	80038b0 <__aeabi_i2f+0x5c>
 8003896:	2205      	movs	r2, #5
 8003898:	0031      	movs	r1, r6
 800389a:	1a12      	subs	r2, r2, r0
 800389c:	40d1      	lsrs	r1, r2
 800389e:	000a      	movs	r2, r1
 80038a0:	0001      	movs	r1, r0
 80038a2:	0030      	movs	r0, r6
 80038a4:	311b      	adds	r1, #27
 80038a6:	4088      	lsls	r0, r1
 80038a8:	1e41      	subs	r1, r0, #1
 80038aa:	4188      	sbcs	r0, r1
 80038ac:	4302      	orrs	r2, r0
 80038ae:	0016      	movs	r6, r2
 80038b0:	2d05      	cmp	r5, #5
 80038b2:	dc12      	bgt.n	80038da <__aeabi_i2f+0x86>
 80038b4:	0031      	movs	r1, r6
 80038b6:	4f0d      	ldr	r7, [pc, #52]	; (80038ec <__aeabi_i2f+0x98>)
 80038b8:	4039      	ands	r1, r7
 80038ba:	0772      	lsls	r2, r6, #29
 80038bc:	d009      	beq.n	80038d2 <__aeabi_i2f+0x7e>
 80038be:	200f      	movs	r0, #15
 80038c0:	4030      	ands	r0, r6
 80038c2:	2804      	cmp	r0, #4
 80038c4:	d005      	beq.n	80038d2 <__aeabi_i2f+0x7e>
 80038c6:	3104      	adds	r1, #4
 80038c8:	014a      	lsls	r2, r1, #5
 80038ca:	d502      	bpl.n	80038d2 <__aeabi_i2f+0x7e>
 80038cc:	239f      	movs	r3, #159	; 0x9f
 80038ce:	4039      	ands	r1, r7
 80038d0:	1b5b      	subs	r3, r3, r5
 80038d2:	0189      	lsls	r1, r1, #6
 80038d4:	0a4e      	lsrs	r6, r1, #9
 80038d6:	b2d8      	uxtb	r0, r3
 80038d8:	e7d6      	b.n	8003888 <__aeabi_i2f+0x34>
 80038da:	1f6a      	subs	r2, r5, #5
 80038dc:	4096      	lsls	r6, r2
 80038de:	0031      	movs	r1, r6
 80038e0:	4f02      	ldr	r7, [pc, #8]	; (80038ec <__aeabi_i2f+0x98>)
 80038e2:	4039      	ands	r1, r7
 80038e4:	0772      	lsls	r2, r6, #29
 80038e6:	d0f4      	beq.n	80038d2 <__aeabi_i2f+0x7e>
 80038e8:	e7e9      	b.n	80038be <__aeabi_i2f+0x6a>
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	fbffffff 	.word	0xfbffffff

080038f0 <__aeabi_ui2f>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	1e05      	subs	r5, r0, #0
 80038f4:	d00e      	beq.n	8003914 <__aeabi_ui2f+0x24>
 80038f6:	f001 ff2d 	bl	8005754 <__clzsi2>
 80038fa:	239e      	movs	r3, #158	; 0x9e
 80038fc:	0004      	movs	r4, r0
 80038fe:	1a1b      	subs	r3, r3, r0
 8003900:	2b96      	cmp	r3, #150	; 0x96
 8003902:	dc0c      	bgt.n	800391e <__aeabi_ui2f+0x2e>
 8003904:	2808      	cmp	r0, #8
 8003906:	dd01      	ble.n	800390c <__aeabi_ui2f+0x1c>
 8003908:	3c08      	subs	r4, #8
 800390a:	40a5      	lsls	r5, r4
 800390c:	026d      	lsls	r5, r5, #9
 800390e:	0a6d      	lsrs	r5, r5, #9
 8003910:	b2d8      	uxtb	r0, r3
 8003912:	e001      	b.n	8003918 <__aeabi_ui2f+0x28>
 8003914:	2000      	movs	r0, #0
 8003916:	2500      	movs	r5, #0
 8003918:	05c0      	lsls	r0, r0, #23
 800391a:	4328      	orrs	r0, r5
 800391c:	bd70      	pop	{r4, r5, r6, pc}
 800391e:	2b99      	cmp	r3, #153	; 0x99
 8003920:	dd09      	ble.n	8003936 <__aeabi_ui2f+0x46>
 8003922:	0002      	movs	r2, r0
 8003924:	0029      	movs	r1, r5
 8003926:	321b      	adds	r2, #27
 8003928:	4091      	lsls	r1, r2
 800392a:	1e4a      	subs	r2, r1, #1
 800392c:	4191      	sbcs	r1, r2
 800392e:	2205      	movs	r2, #5
 8003930:	1a12      	subs	r2, r2, r0
 8003932:	40d5      	lsrs	r5, r2
 8003934:	430d      	orrs	r5, r1
 8003936:	2c05      	cmp	r4, #5
 8003938:	dc12      	bgt.n	8003960 <__aeabi_ui2f+0x70>
 800393a:	0029      	movs	r1, r5
 800393c:	4e0c      	ldr	r6, [pc, #48]	; (8003970 <__aeabi_ui2f+0x80>)
 800393e:	4031      	ands	r1, r6
 8003940:	076a      	lsls	r2, r5, #29
 8003942:	d009      	beq.n	8003958 <__aeabi_ui2f+0x68>
 8003944:	200f      	movs	r0, #15
 8003946:	4028      	ands	r0, r5
 8003948:	2804      	cmp	r0, #4
 800394a:	d005      	beq.n	8003958 <__aeabi_ui2f+0x68>
 800394c:	3104      	adds	r1, #4
 800394e:	014a      	lsls	r2, r1, #5
 8003950:	d502      	bpl.n	8003958 <__aeabi_ui2f+0x68>
 8003952:	239f      	movs	r3, #159	; 0x9f
 8003954:	4031      	ands	r1, r6
 8003956:	1b1b      	subs	r3, r3, r4
 8003958:	0189      	lsls	r1, r1, #6
 800395a:	0a4d      	lsrs	r5, r1, #9
 800395c:	b2d8      	uxtb	r0, r3
 800395e:	e7db      	b.n	8003918 <__aeabi_ui2f+0x28>
 8003960:	1f62      	subs	r2, r4, #5
 8003962:	4095      	lsls	r5, r2
 8003964:	0029      	movs	r1, r5
 8003966:	4e02      	ldr	r6, [pc, #8]	; (8003970 <__aeabi_ui2f+0x80>)
 8003968:	4031      	ands	r1, r6
 800396a:	076a      	lsls	r2, r5, #29
 800396c:	d0f4      	beq.n	8003958 <__aeabi_ui2f+0x68>
 800396e:	e7e9      	b.n	8003944 <__aeabi_ui2f+0x54>
 8003970:	fbffffff 	.word	0xfbffffff

08003974 <__aeabi_dadd>:
 8003974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003976:	464f      	mov	r7, r9
 8003978:	4646      	mov	r6, r8
 800397a:	46d6      	mov	lr, sl
 800397c:	000d      	movs	r5, r1
 800397e:	0004      	movs	r4, r0
 8003980:	b5c0      	push	{r6, r7, lr}
 8003982:	001f      	movs	r7, r3
 8003984:	0011      	movs	r1, r2
 8003986:	0328      	lsls	r0, r5, #12
 8003988:	0f62      	lsrs	r2, r4, #29
 800398a:	0a40      	lsrs	r0, r0, #9
 800398c:	4310      	orrs	r0, r2
 800398e:	007a      	lsls	r2, r7, #1
 8003990:	0d52      	lsrs	r2, r2, #21
 8003992:	00e3      	lsls	r3, r4, #3
 8003994:	033c      	lsls	r4, r7, #12
 8003996:	4691      	mov	r9, r2
 8003998:	0a64      	lsrs	r4, r4, #9
 800399a:	0ffa      	lsrs	r2, r7, #31
 800399c:	0f4f      	lsrs	r7, r1, #29
 800399e:	006e      	lsls	r6, r5, #1
 80039a0:	4327      	orrs	r7, r4
 80039a2:	4692      	mov	sl, r2
 80039a4:	46b8      	mov	r8, r7
 80039a6:	0d76      	lsrs	r6, r6, #21
 80039a8:	0fed      	lsrs	r5, r5, #31
 80039aa:	00c9      	lsls	r1, r1, #3
 80039ac:	4295      	cmp	r5, r2
 80039ae:	d100      	bne.n	80039b2 <__aeabi_dadd+0x3e>
 80039b0:	e099      	b.n	8003ae6 <__aeabi_dadd+0x172>
 80039b2:	464c      	mov	r4, r9
 80039b4:	1b34      	subs	r4, r6, r4
 80039b6:	46a4      	mov	ip, r4
 80039b8:	2c00      	cmp	r4, #0
 80039ba:	dc00      	bgt.n	80039be <__aeabi_dadd+0x4a>
 80039bc:	e07c      	b.n	8003ab8 <__aeabi_dadd+0x144>
 80039be:	464a      	mov	r2, r9
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	d100      	bne.n	80039c6 <__aeabi_dadd+0x52>
 80039c4:	e0b8      	b.n	8003b38 <__aeabi_dadd+0x1c4>
 80039c6:	4ac5      	ldr	r2, [pc, #788]	; (8003cdc <__aeabi_dadd+0x368>)
 80039c8:	4296      	cmp	r6, r2
 80039ca:	d100      	bne.n	80039ce <__aeabi_dadd+0x5a>
 80039cc:	e11c      	b.n	8003c08 <__aeabi_dadd+0x294>
 80039ce:	2280      	movs	r2, #128	; 0x80
 80039d0:	003c      	movs	r4, r7
 80039d2:	0412      	lsls	r2, r2, #16
 80039d4:	4314      	orrs	r4, r2
 80039d6:	46a0      	mov	r8, r4
 80039d8:	4662      	mov	r2, ip
 80039da:	2a38      	cmp	r2, #56	; 0x38
 80039dc:	dd00      	ble.n	80039e0 <__aeabi_dadd+0x6c>
 80039de:	e161      	b.n	8003ca4 <__aeabi_dadd+0x330>
 80039e0:	2a1f      	cmp	r2, #31
 80039e2:	dd00      	ble.n	80039e6 <__aeabi_dadd+0x72>
 80039e4:	e1cc      	b.n	8003d80 <__aeabi_dadd+0x40c>
 80039e6:	4664      	mov	r4, ip
 80039e8:	2220      	movs	r2, #32
 80039ea:	1b12      	subs	r2, r2, r4
 80039ec:	4644      	mov	r4, r8
 80039ee:	4094      	lsls	r4, r2
 80039f0:	000f      	movs	r7, r1
 80039f2:	46a1      	mov	r9, r4
 80039f4:	4664      	mov	r4, ip
 80039f6:	4091      	lsls	r1, r2
 80039f8:	40e7      	lsrs	r7, r4
 80039fa:	464c      	mov	r4, r9
 80039fc:	1e4a      	subs	r2, r1, #1
 80039fe:	4191      	sbcs	r1, r2
 8003a00:	433c      	orrs	r4, r7
 8003a02:	4642      	mov	r2, r8
 8003a04:	4321      	orrs	r1, r4
 8003a06:	4664      	mov	r4, ip
 8003a08:	40e2      	lsrs	r2, r4
 8003a0a:	1a80      	subs	r0, r0, r2
 8003a0c:	1a5c      	subs	r4, r3, r1
 8003a0e:	42a3      	cmp	r3, r4
 8003a10:	419b      	sbcs	r3, r3
 8003a12:	425f      	negs	r7, r3
 8003a14:	1bc7      	subs	r7, r0, r7
 8003a16:	023b      	lsls	r3, r7, #8
 8003a18:	d400      	bmi.n	8003a1c <__aeabi_dadd+0xa8>
 8003a1a:	e0d0      	b.n	8003bbe <__aeabi_dadd+0x24a>
 8003a1c:	027f      	lsls	r7, r7, #9
 8003a1e:	0a7f      	lsrs	r7, r7, #9
 8003a20:	2f00      	cmp	r7, #0
 8003a22:	d100      	bne.n	8003a26 <__aeabi_dadd+0xb2>
 8003a24:	e0ff      	b.n	8003c26 <__aeabi_dadd+0x2b2>
 8003a26:	0038      	movs	r0, r7
 8003a28:	f001 fe94 	bl	8005754 <__clzsi2>
 8003a2c:	0001      	movs	r1, r0
 8003a2e:	3908      	subs	r1, #8
 8003a30:	2320      	movs	r3, #32
 8003a32:	0022      	movs	r2, r4
 8003a34:	1a5b      	subs	r3, r3, r1
 8003a36:	408f      	lsls	r7, r1
 8003a38:	40da      	lsrs	r2, r3
 8003a3a:	408c      	lsls	r4, r1
 8003a3c:	4317      	orrs	r7, r2
 8003a3e:	42b1      	cmp	r1, r6
 8003a40:	da00      	bge.n	8003a44 <__aeabi_dadd+0xd0>
 8003a42:	e0ff      	b.n	8003c44 <__aeabi_dadd+0x2d0>
 8003a44:	1b89      	subs	r1, r1, r6
 8003a46:	1c4b      	adds	r3, r1, #1
 8003a48:	2b1f      	cmp	r3, #31
 8003a4a:	dd00      	ble.n	8003a4e <__aeabi_dadd+0xda>
 8003a4c:	e0a8      	b.n	8003ba0 <__aeabi_dadd+0x22c>
 8003a4e:	2220      	movs	r2, #32
 8003a50:	0039      	movs	r1, r7
 8003a52:	1ad2      	subs	r2, r2, r3
 8003a54:	0020      	movs	r0, r4
 8003a56:	4094      	lsls	r4, r2
 8003a58:	4091      	lsls	r1, r2
 8003a5a:	40d8      	lsrs	r0, r3
 8003a5c:	1e62      	subs	r2, r4, #1
 8003a5e:	4194      	sbcs	r4, r2
 8003a60:	40df      	lsrs	r7, r3
 8003a62:	2600      	movs	r6, #0
 8003a64:	4301      	orrs	r1, r0
 8003a66:	430c      	orrs	r4, r1
 8003a68:	0763      	lsls	r3, r4, #29
 8003a6a:	d009      	beq.n	8003a80 <__aeabi_dadd+0x10c>
 8003a6c:	230f      	movs	r3, #15
 8003a6e:	4023      	ands	r3, r4
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d005      	beq.n	8003a80 <__aeabi_dadd+0x10c>
 8003a74:	1d23      	adds	r3, r4, #4
 8003a76:	42a3      	cmp	r3, r4
 8003a78:	41a4      	sbcs	r4, r4
 8003a7a:	4264      	negs	r4, r4
 8003a7c:	193f      	adds	r7, r7, r4
 8003a7e:	001c      	movs	r4, r3
 8003a80:	023b      	lsls	r3, r7, #8
 8003a82:	d400      	bmi.n	8003a86 <__aeabi_dadd+0x112>
 8003a84:	e09e      	b.n	8003bc4 <__aeabi_dadd+0x250>
 8003a86:	4b95      	ldr	r3, [pc, #596]	; (8003cdc <__aeabi_dadd+0x368>)
 8003a88:	3601      	adds	r6, #1
 8003a8a:	429e      	cmp	r6, r3
 8003a8c:	d100      	bne.n	8003a90 <__aeabi_dadd+0x11c>
 8003a8e:	e0b7      	b.n	8003c00 <__aeabi_dadd+0x28c>
 8003a90:	4a93      	ldr	r2, [pc, #588]	; (8003ce0 <__aeabi_dadd+0x36c>)
 8003a92:	08e4      	lsrs	r4, r4, #3
 8003a94:	4017      	ands	r7, r2
 8003a96:	077b      	lsls	r3, r7, #29
 8003a98:	0571      	lsls	r1, r6, #21
 8003a9a:	027f      	lsls	r7, r7, #9
 8003a9c:	4323      	orrs	r3, r4
 8003a9e:	0b3f      	lsrs	r7, r7, #12
 8003aa0:	0d4a      	lsrs	r2, r1, #21
 8003aa2:	0512      	lsls	r2, r2, #20
 8003aa4:	433a      	orrs	r2, r7
 8003aa6:	07ed      	lsls	r5, r5, #31
 8003aa8:	432a      	orrs	r2, r5
 8003aaa:	0018      	movs	r0, r3
 8003aac:	0011      	movs	r1, r2
 8003aae:	bce0      	pop	{r5, r6, r7}
 8003ab0:	46ba      	mov	sl, r7
 8003ab2:	46b1      	mov	r9, r6
 8003ab4:	46a8      	mov	r8, r5
 8003ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ab8:	2c00      	cmp	r4, #0
 8003aba:	d04b      	beq.n	8003b54 <__aeabi_dadd+0x1e0>
 8003abc:	464c      	mov	r4, r9
 8003abe:	1ba4      	subs	r4, r4, r6
 8003ac0:	46a4      	mov	ip, r4
 8003ac2:	2e00      	cmp	r6, #0
 8003ac4:	d000      	beq.n	8003ac8 <__aeabi_dadd+0x154>
 8003ac6:	e123      	b.n	8003d10 <__aeabi_dadd+0x39c>
 8003ac8:	0004      	movs	r4, r0
 8003aca:	431c      	orrs	r4, r3
 8003acc:	d100      	bne.n	8003ad0 <__aeabi_dadd+0x15c>
 8003ace:	e1af      	b.n	8003e30 <__aeabi_dadd+0x4bc>
 8003ad0:	4662      	mov	r2, ip
 8003ad2:	1e54      	subs	r4, r2, #1
 8003ad4:	2a01      	cmp	r2, #1
 8003ad6:	d100      	bne.n	8003ada <__aeabi_dadd+0x166>
 8003ad8:	e215      	b.n	8003f06 <__aeabi_dadd+0x592>
 8003ada:	4d80      	ldr	r5, [pc, #512]	; (8003cdc <__aeabi_dadd+0x368>)
 8003adc:	45ac      	cmp	ip, r5
 8003ade:	d100      	bne.n	8003ae2 <__aeabi_dadd+0x16e>
 8003ae0:	e1c8      	b.n	8003e74 <__aeabi_dadd+0x500>
 8003ae2:	46a4      	mov	ip, r4
 8003ae4:	e11b      	b.n	8003d1e <__aeabi_dadd+0x3aa>
 8003ae6:	464a      	mov	r2, r9
 8003ae8:	1ab2      	subs	r2, r6, r2
 8003aea:	4694      	mov	ip, r2
 8003aec:	2a00      	cmp	r2, #0
 8003aee:	dc00      	bgt.n	8003af2 <__aeabi_dadd+0x17e>
 8003af0:	e0ac      	b.n	8003c4c <__aeabi_dadd+0x2d8>
 8003af2:	464a      	mov	r2, r9
 8003af4:	2a00      	cmp	r2, #0
 8003af6:	d043      	beq.n	8003b80 <__aeabi_dadd+0x20c>
 8003af8:	4a78      	ldr	r2, [pc, #480]	; (8003cdc <__aeabi_dadd+0x368>)
 8003afa:	4296      	cmp	r6, r2
 8003afc:	d100      	bne.n	8003b00 <__aeabi_dadd+0x18c>
 8003afe:	e1af      	b.n	8003e60 <__aeabi_dadd+0x4ec>
 8003b00:	2280      	movs	r2, #128	; 0x80
 8003b02:	003c      	movs	r4, r7
 8003b04:	0412      	lsls	r2, r2, #16
 8003b06:	4314      	orrs	r4, r2
 8003b08:	46a0      	mov	r8, r4
 8003b0a:	4662      	mov	r2, ip
 8003b0c:	2a38      	cmp	r2, #56	; 0x38
 8003b0e:	dc67      	bgt.n	8003be0 <__aeabi_dadd+0x26c>
 8003b10:	2a1f      	cmp	r2, #31
 8003b12:	dc00      	bgt.n	8003b16 <__aeabi_dadd+0x1a2>
 8003b14:	e15f      	b.n	8003dd6 <__aeabi_dadd+0x462>
 8003b16:	4647      	mov	r7, r8
 8003b18:	3a20      	subs	r2, #32
 8003b1a:	40d7      	lsrs	r7, r2
 8003b1c:	4662      	mov	r2, ip
 8003b1e:	2a20      	cmp	r2, #32
 8003b20:	d005      	beq.n	8003b2e <__aeabi_dadd+0x1ba>
 8003b22:	4664      	mov	r4, ip
 8003b24:	2240      	movs	r2, #64	; 0x40
 8003b26:	1b12      	subs	r2, r2, r4
 8003b28:	4644      	mov	r4, r8
 8003b2a:	4094      	lsls	r4, r2
 8003b2c:	4321      	orrs	r1, r4
 8003b2e:	1e4a      	subs	r2, r1, #1
 8003b30:	4191      	sbcs	r1, r2
 8003b32:	000c      	movs	r4, r1
 8003b34:	433c      	orrs	r4, r7
 8003b36:	e057      	b.n	8003be8 <__aeabi_dadd+0x274>
 8003b38:	003a      	movs	r2, r7
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	d100      	bne.n	8003b40 <__aeabi_dadd+0x1cc>
 8003b3e:	e105      	b.n	8003d4c <__aeabi_dadd+0x3d8>
 8003b40:	0022      	movs	r2, r4
 8003b42:	3a01      	subs	r2, #1
 8003b44:	2c01      	cmp	r4, #1
 8003b46:	d100      	bne.n	8003b4a <__aeabi_dadd+0x1d6>
 8003b48:	e182      	b.n	8003e50 <__aeabi_dadd+0x4dc>
 8003b4a:	4c64      	ldr	r4, [pc, #400]	; (8003cdc <__aeabi_dadd+0x368>)
 8003b4c:	45a4      	cmp	ip, r4
 8003b4e:	d05b      	beq.n	8003c08 <__aeabi_dadd+0x294>
 8003b50:	4694      	mov	ip, r2
 8003b52:	e741      	b.n	80039d8 <__aeabi_dadd+0x64>
 8003b54:	4c63      	ldr	r4, [pc, #396]	; (8003ce4 <__aeabi_dadd+0x370>)
 8003b56:	1c77      	adds	r7, r6, #1
 8003b58:	4227      	tst	r7, r4
 8003b5a:	d000      	beq.n	8003b5e <__aeabi_dadd+0x1ea>
 8003b5c:	e0c4      	b.n	8003ce8 <__aeabi_dadd+0x374>
 8003b5e:	0004      	movs	r4, r0
 8003b60:	431c      	orrs	r4, r3
 8003b62:	2e00      	cmp	r6, #0
 8003b64:	d000      	beq.n	8003b68 <__aeabi_dadd+0x1f4>
 8003b66:	e169      	b.n	8003e3c <__aeabi_dadd+0x4c8>
 8003b68:	2c00      	cmp	r4, #0
 8003b6a:	d100      	bne.n	8003b6e <__aeabi_dadd+0x1fa>
 8003b6c:	e1bf      	b.n	8003eee <__aeabi_dadd+0x57a>
 8003b6e:	4644      	mov	r4, r8
 8003b70:	430c      	orrs	r4, r1
 8003b72:	d000      	beq.n	8003b76 <__aeabi_dadd+0x202>
 8003b74:	e1d0      	b.n	8003f18 <__aeabi_dadd+0x5a4>
 8003b76:	0742      	lsls	r2, r0, #29
 8003b78:	08db      	lsrs	r3, r3, #3
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	08c0      	lsrs	r0, r0, #3
 8003b7e:	e029      	b.n	8003bd4 <__aeabi_dadd+0x260>
 8003b80:	003a      	movs	r2, r7
 8003b82:	430a      	orrs	r2, r1
 8003b84:	d100      	bne.n	8003b88 <__aeabi_dadd+0x214>
 8003b86:	e170      	b.n	8003e6a <__aeabi_dadd+0x4f6>
 8003b88:	4662      	mov	r2, ip
 8003b8a:	4664      	mov	r4, ip
 8003b8c:	3a01      	subs	r2, #1
 8003b8e:	2c01      	cmp	r4, #1
 8003b90:	d100      	bne.n	8003b94 <__aeabi_dadd+0x220>
 8003b92:	e0e0      	b.n	8003d56 <__aeabi_dadd+0x3e2>
 8003b94:	4c51      	ldr	r4, [pc, #324]	; (8003cdc <__aeabi_dadd+0x368>)
 8003b96:	45a4      	cmp	ip, r4
 8003b98:	d100      	bne.n	8003b9c <__aeabi_dadd+0x228>
 8003b9a:	e161      	b.n	8003e60 <__aeabi_dadd+0x4ec>
 8003b9c:	4694      	mov	ip, r2
 8003b9e:	e7b4      	b.n	8003b0a <__aeabi_dadd+0x196>
 8003ba0:	003a      	movs	r2, r7
 8003ba2:	391f      	subs	r1, #31
 8003ba4:	40ca      	lsrs	r2, r1
 8003ba6:	0011      	movs	r1, r2
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d003      	beq.n	8003bb4 <__aeabi_dadd+0x240>
 8003bac:	2240      	movs	r2, #64	; 0x40
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	409f      	lsls	r7, r3
 8003bb2:	433c      	orrs	r4, r7
 8003bb4:	1e63      	subs	r3, r4, #1
 8003bb6:	419c      	sbcs	r4, r3
 8003bb8:	2700      	movs	r7, #0
 8003bba:	2600      	movs	r6, #0
 8003bbc:	430c      	orrs	r4, r1
 8003bbe:	0763      	lsls	r3, r4, #29
 8003bc0:	d000      	beq.n	8003bc4 <__aeabi_dadd+0x250>
 8003bc2:	e753      	b.n	8003a6c <__aeabi_dadd+0xf8>
 8003bc4:	46b4      	mov	ip, r6
 8003bc6:	08e4      	lsrs	r4, r4, #3
 8003bc8:	077b      	lsls	r3, r7, #29
 8003bca:	4323      	orrs	r3, r4
 8003bcc:	08f8      	lsrs	r0, r7, #3
 8003bce:	4a43      	ldr	r2, [pc, #268]	; (8003cdc <__aeabi_dadd+0x368>)
 8003bd0:	4594      	cmp	ip, r2
 8003bd2:	d01d      	beq.n	8003c10 <__aeabi_dadd+0x29c>
 8003bd4:	4662      	mov	r2, ip
 8003bd6:	0307      	lsls	r7, r0, #12
 8003bd8:	0552      	lsls	r2, r2, #21
 8003bda:	0b3f      	lsrs	r7, r7, #12
 8003bdc:	0d52      	lsrs	r2, r2, #21
 8003bde:	e760      	b.n	8003aa2 <__aeabi_dadd+0x12e>
 8003be0:	4644      	mov	r4, r8
 8003be2:	430c      	orrs	r4, r1
 8003be4:	1e62      	subs	r2, r4, #1
 8003be6:	4194      	sbcs	r4, r2
 8003be8:	18e4      	adds	r4, r4, r3
 8003bea:	429c      	cmp	r4, r3
 8003bec:	419b      	sbcs	r3, r3
 8003bee:	425f      	negs	r7, r3
 8003bf0:	183f      	adds	r7, r7, r0
 8003bf2:	023b      	lsls	r3, r7, #8
 8003bf4:	d5e3      	bpl.n	8003bbe <__aeabi_dadd+0x24a>
 8003bf6:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <__aeabi_dadd+0x368>)
 8003bf8:	3601      	adds	r6, #1
 8003bfa:	429e      	cmp	r6, r3
 8003bfc:	d000      	beq.n	8003c00 <__aeabi_dadd+0x28c>
 8003bfe:	e0b5      	b.n	8003d6c <__aeabi_dadd+0x3f8>
 8003c00:	0032      	movs	r2, r6
 8003c02:	2700      	movs	r7, #0
 8003c04:	2300      	movs	r3, #0
 8003c06:	e74c      	b.n	8003aa2 <__aeabi_dadd+0x12e>
 8003c08:	0742      	lsls	r2, r0, #29
 8003c0a:	08db      	lsrs	r3, r3, #3
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	08c0      	lsrs	r0, r0, #3
 8003c10:	001a      	movs	r2, r3
 8003c12:	4302      	orrs	r2, r0
 8003c14:	d100      	bne.n	8003c18 <__aeabi_dadd+0x2a4>
 8003c16:	e1e1      	b.n	8003fdc <__aeabi_dadd+0x668>
 8003c18:	2780      	movs	r7, #128	; 0x80
 8003c1a:	033f      	lsls	r7, r7, #12
 8003c1c:	4307      	orrs	r7, r0
 8003c1e:	033f      	lsls	r7, r7, #12
 8003c20:	4a2e      	ldr	r2, [pc, #184]	; (8003cdc <__aeabi_dadd+0x368>)
 8003c22:	0b3f      	lsrs	r7, r7, #12
 8003c24:	e73d      	b.n	8003aa2 <__aeabi_dadd+0x12e>
 8003c26:	0020      	movs	r0, r4
 8003c28:	f001 fd94 	bl	8005754 <__clzsi2>
 8003c2c:	0001      	movs	r1, r0
 8003c2e:	3118      	adds	r1, #24
 8003c30:	291f      	cmp	r1, #31
 8003c32:	dc00      	bgt.n	8003c36 <__aeabi_dadd+0x2c2>
 8003c34:	e6fc      	b.n	8003a30 <__aeabi_dadd+0xbc>
 8003c36:	3808      	subs	r0, #8
 8003c38:	4084      	lsls	r4, r0
 8003c3a:	0027      	movs	r7, r4
 8003c3c:	2400      	movs	r4, #0
 8003c3e:	42b1      	cmp	r1, r6
 8003c40:	db00      	blt.n	8003c44 <__aeabi_dadd+0x2d0>
 8003c42:	e6ff      	b.n	8003a44 <__aeabi_dadd+0xd0>
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <__aeabi_dadd+0x36c>)
 8003c46:	1a76      	subs	r6, r6, r1
 8003c48:	4017      	ands	r7, r2
 8003c4a:	e70d      	b.n	8003a68 <__aeabi_dadd+0xf4>
 8003c4c:	2a00      	cmp	r2, #0
 8003c4e:	d02f      	beq.n	8003cb0 <__aeabi_dadd+0x33c>
 8003c50:	464a      	mov	r2, r9
 8003c52:	1b92      	subs	r2, r2, r6
 8003c54:	4694      	mov	ip, r2
 8003c56:	2e00      	cmp	r6, #0
 8003c58:	d100      	bne.n	8003c5c <__aeabi_dadd+0x2e8>
 8003c5a:	e0ad      	b.n	8003db8 <__aeabi_dadd+0x444>
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <__aeabi_dadd+0x368>)
 8003c5e:	4591      	cmp	r9, r2
 8003c60:	d100      	bne.n	8003c64 <__aeabi_dadd+0x2f0>
 8003c62:	e10f      	b.n	8003e84 <__aeabi_dadd+0x510>
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	0412      	lsls	r2, r2, #16
 8003c68:	4310      	orrs	r0, r2
 8003c6a:	4662      	mov	r2, ip
 8003c6c:	2a38      	cmp	r2, #56	; 0x38
 8003c6e:	dd00      	ble.n	8003c72 <__aeabi_dadd+0x2fe>
 8003c70:	e10f      	b.n	8003e92 <__aeabi_dadd+0x51e>
 8003c72:	2a1f      	cmp	r2, #31
 8003c74:	dd00      	ble.n	8003c78 <__aeabi_dadd+0x304>
 8003c76:	e180      	b.n	8003f7a <__aeabi_dadd+0x606>
 8003c78:	4664      	mov	r4, ip
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	001e      	movs	r6, r3
 8003c7e:	1b12      	subs	r2, r2, r4
 8003c80:	4667      	mov	r7, ip
 8003c82:	0004      	movs	r4, r0
 8003c84:	4093      	lsls	r3, r2
 8003c86:	4094      	lsls	r4, r2
 8003c88:	40fe      	lsrs	r6, r7
 8003c8a:	1e5a      	subs	r2, r3, #1
 8003c8c:	4193      	sbcs	r3, r2
 8003c8e:	40f8      	lsrs	r0, r7
 8003c90:	4334      	orrs	r4, r6
 8003c92:	431c      	orrs	r4, r3
 8003c94:	4480      	add	r8, r0
 8003c96:	1864      	adds	r4, r4, r1
 8003c98:	428c      	cmp	r4, r1
 8003c9a:	41bf      	sbcs	r7, r7
 8003c9c:	427f      	negs	r7, r7
 8003c9e:	464e      	mov	r6, r9
 8003ca0:	4447      	add	r7, r8
 8003ca2:	e7a6      	b.n	8003bf2 <__aeabi_dadd+0x27e>
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	0011      	movs	r1, r2
 8003caa:	1e4a      	subs	r2, r1, #1
 8003cac:	4191      	sbcs	r1, r2
 8003cae:	e6ad      	b.n	8003a0c <__aeabi_dadd+0x98>
 8003cb0:	4c0c      	ldr	r4, [pc, #48]	; (8003ce4 <__aeabi_dadd+0x370>)
 8003cb2:	1c72      	adds	r2, r6, #1
 8003cb4:	4222      	tst	r2, r4
 8003cb6:	d000      	beq.n	8003cba <__aeabi_dadd+0x346>
 8003cb8:	e0a1      	b.n	8003dfe <__aeabi_dadd+0x48a>
 8003cba:	0002      	movs	r2, r0
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	2e00      	cmp	r6, #0
 8003cc0:	d000      	beq.n	8003cc4 <__aeabi_dadd+0x350>
 8003cc2:	e0fa      	b.n	8003eba <__aeabi_dadd+0x546>
 8003cc4:	2a00      	cmp	r2, #0
 8003cc6:	d100      	bne.n	8003cca <__aeabi_dadd+0x356>
 8003cc8:	e145      	b.n	8003f56 <__aeabi_dadd+0x5e2>
 8003cca:	003a      	movs	r2, r7
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	d000      	beq.n	8003cd2 <__aeabi_dadd+0x35e>
 8003cd0:	e146      	b.n	8003f60 <__aeabi_dadd+0x5ec>
 8003cd2:	0742      	lsls	r2, r0, #29
 8003cd4:	08db      	lsrs	r3, r3, #3
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	08c0      	lsrs	r0, r0, #3
 8003cda:	e77b      	b.n	8003bd4 <__aeabi_dadd+0x260>
 8003cdc:	000007ff 	.word	0x000007ff
 8003ce0:	ff7fffff 	.word	0xff7fffff
 8003ce4:	000007fe 	.word	0x000007fe
 8003ce8:	4647      	mov	r7, r8
 8003cea:	1a5c      	subs	r4, r3, r1
 8003cec:	1bc2      	subs	r2, r0, r7
 8003cee:	42a3      	cmp	r3, r4
 8003cf0:	41bf      	sbcs	r7, r7
 8003cf2:	427f      	negs	r7, r7
 8003cf4:	46b9      	mov	r9, r7
 8003cf6:	0017      	movs	r7, r2
 8003cf8:	464a      	mov	r2, r9
 8003cfa:	1abf      	subs	r7, r7, r2
 8003cfc:	023a      	lsls	r2, r7, #8
 8003cfe:	d500      	bpl.n	8003d02 <__aeabi_dadd+0x38e>
 8003d00:	e08d      	b.n	8003e1e <__aeabi_dadd+0x4aa>
 8003d02:	0023      	movs	r3, r4
 8003d04:	433b      	orrs	r3, r7
 8003d06:	d000      	beq.n	8003d0a <__aeabi_dadd+0x396>
 8003d08:	e68a      	b.n	8003a20 <__aeabi_dadd+0xac>
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	2500      	movs	r5, #0
 8003d0e:	e761      	b.n	8003bd4 <__aeabi_dadd+0x260>
 8003d10:	4cb4      	ldr	r4, [pc, #720]	; (8003fe4 <__aeabi_dadd+0x670>)
 8003d12:	45a1      	cmp	r9, r4
 8003d14:	d100      	bne.n	8003d18 <__aeabi_dadd+0x3a4>
 8003d16:	e0ad      	b.n	8003e74 <__aeabi_dadd+0x500>
 8003d18:	2480      	movs	r4, #128	; 0x80
 8003d1a:	0424      	lsls	r4, r4, #16
 8003d1c:	4320      	orrs	r0, r4
 8003d1e:	4664      	mov	r4, ip
 8003d20:	2c38      	cmp	r4, #56	; 0x38
 8003d22:	dc3d      	bgt.n	8003da0 <__aeabi_dadd+0x42c>
 8003d24:	4662      	mov	r2, ip
 8003d26:	2c1f      	cmp	r4, #31
 8003d28:	dd00      	ble.n	8003d2c <__aeabi_dadd+0x3b8>
 8003d2a:	e0b7      	b.n	8003e9c <__aeabi_dadd+0x528>
 8003d2c:	2520      	movs	r5, #32
 8003d2e:	001e      	movs	r6, r3
 8003d30:	1b2d      	subs	r5, r5, r4
 8003d32:	0004      	movs	r4, r0
 8003d34:	40ab      	lsls	r3, r5
 8003d36:	40ac      	lsls	r4, r5
 8003d38:	40d6      	lsrs	r6, r2
 8003d3a:	40d0      	lsrs	r0, r2
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	1e5d      	subs	r5, r3, #1
 8003d40:	41ab      	sbcs	r3, r5
 8003d42:	4334      	orrs	r4, r6
 8003d44:	1a12      	subs	r2, r2, r0
 8003d46:	4690      	mov	r8, r2
 8003d48:	4323      	orrs	r3, r4
 8003d4a:	e02c      	b.n	8003da6 <__aeabi_dadd+0x432>
 8003d4c:	0742      	lsls	r2, r0, #29
 8003d4e:	08db      	lsrs	r3, r3, #3
 8003d50:	4313      	orrs	r3, r2
 8003d52:	08c0      	lsrs	r0, r0, #3
 8003d54:	e73b      	b.n	8003bce <__aeabi_dadd+0x25a>
 8003d56:	185c      	adds	r4, r3, r1
 8003d58:	429c      	cmp	r4, r3
 8003d5a:	419b      	sbcs	r3, r3
 8003d5c:	4440      	add	r0, r8
 8003d5e:	425b      	negs	r3, r3
 8003d60:	18c7      	adds	r7, r0, r3
 8003d62:	2601      	movs	r6, #1
 8003d64:	023b      	lsls	r3, r7, #8
 8003d66:	d400      	bmi.n	8003d6a <__aeabi_dadd+0x3f6>
 8003d68:	e729      	b.n	8003bbe <__aeabi_dadd+0x24a>
 8003d6a:	2602      	movs	r6, #2
 8003d6c:	4a9e      	ldr	r2, [pc, #632]	; (8003fe8 <__aeabi_dadd+0x674>)
 8003d6e:	0863      	lsrs	r3, r4, #1
 8003d70:	4017      	ands	r7, r2
 8003d72:	2201      	movs	r2, #1
 8003d74:	4014      	ands	r4, r2
 8003d76:	431c      	orrs	r4, r3
 8003d78:	07fb      	lsls	r3, r7, #31
 8003d7a:	431c      	orrs	r4, r3
 8003d7c:	087f      	lsrs	r7, r7, #1
 8003d7e:	e673      	b.n	8003a68 <__aeabi_dadd+0xf4>
 8003d80:	4644      	mov	r4, r8
 8003d82:	3a20      	subs	r2, #32
 8003d84:	40d4      	lsrs	r4, r2
 8003d86:	4662      	mov	r2, ip
 8003d88:	2a20      	cmp	r2, #32
 8003d8a:	d005      	beq.n	8003d98 <__aeabi_dadd+0x424>
 8003d8c:	4667      	mov	r7, ip
 8003d8e:	2240      	movs	r2, #64	; 0x40
 8003d90:	1bd2      	subs	r2, r2, r7
 8003d92:	4647      	mov	r7, r8
 8003d94:	4097      	lsls	r7, r2
 8003d96:	4339      	orrs	r1, r7
 8003d98:	1e4a      	subs	r2, r1, #1
 8003d9a:	4191      	sbcs	r1, r2
 8003d9c:	4321      	orrs	r1, r4
 8003d9e:	e635      	b.n	8003a0c <__aeabi_dadd+0x98>
 8003da0:	4303      	orrs	r3, r0
 8003da2:	1e58      	subs	r0, r3, #1
 8003da4:	4183      	sbcs	r3, r0
 8003da6:	1acc      	subs	r4, r1, r3
 8003da8:	42a1      	cmp	r1, r4
 8003daa:	41bf      	sbcs	r7, r7
 8003dac:	4643      	mov	r3, r8
 8003dae:	427f      	negs	r7, r7
 8003db0:	4655      	mov	r5, sl
 8003db2:	464e      	mov	r6, r9
 8003db4:	1bdf      	subs	r7, r3, r7
 8003db6:	e62e      	b.n	8003a16 <__aeabi_dadd+0xa2>
 8003db8:	0002      	movs	r2, r0
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	d100      	bne.n	8003dc0 <__aeabi_dadd+0x44c>
 8003dbe:	e0bd      	b.n	8003f3c <__aeabi_dadd+0x5c8>
 8003dc0:	4662      	mov	r2, ip
 8003dc2:	4664      	mov	r4, ip
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	2c01      	cmp	r4, #1
 8003dc8:	d100      	bne.n	8003dcc <__aeabi_dadd+0x458>
 8003dca:	e0e5      	b.n	8003f98 <__aeabi_dadd+0x624>
 8003dcc:	4c85      	ldr	r4, [pc, #532]	; (8003fe4 <__aeabi_dadd+0x670>)
 8003dce:	45a4      	cmp	ip, r4
 8003dd0:	d058      	beq.n	8003e84 <__aeabi_dadd+0x510>
 8003dd2:	4694      	mov	ip, r2
 8003dd4:	e749      	b.n	8003c6a <__aeabi_dadd+0x2f6>
 8003dd6:	4664      	mov	r4, ip
 8003dd8:	2220      	movs	r2, #32
 8003dda:	1b12      	subs	r2, r2, r4
 8003ddc:	4644      	mov	r4, r8
 8003dde:	4094      	lsls	r4, r2
 8003de0:	000f      	movs	r7, r1
 8003de2:	46a1      	mov	r9, r4
 8003de4:	4664      	mov	r4, ip
 8003de6:	4091      	lsls	r1, r2
 8003de8:	40e7      	lsrs	r7, r4
 8003dea:	464c      	mov	r4, r9
 8003dec:	1e4a      	subs	r2, r1, #1
 8003dee:	4191      	sbcs	r1, r2
 8003df0:	433c      	orrs	r4, r7
 8003df2:	4642      	mov	r2, r8
 8003df4:	430c      	orrs	r4, r1
 8003df6:	4661      	mov	r1, ip
 8003df8:	40ca      	lsrs	r2, r1
 8003dfa:	1880      	adds	r0, r0, r2
 8003dfc:	e6f4      	b.n	8003be8 <__aeabi_dadd+0x274>
 8003dfe:	4c79      	ldr	r4, [pc, #484]	; (8003fe4 <__aeabi_dadd+0x670>)
 8003e00:	42a2      	cmp	r2, r4
 8003e02:	d100      	bne.n	8003e06 <__aeabi_dadd+0x492>
 8003e04:	e6fd      	b.n	8003c02 <__aeabi_dadd+0x28e>
 8003e06:	1859      	adds	r1, r3, r1
 8003e08:	4299      	cmp	r1, r3
 8003e0a:	419b      	sbcs	r3, r3
 8003e0c:	4440      	add	r0, r8
 8003e0e:	425f      	negs	r7, r3
 8003e10:	19c7      	adds	r7, r0, r7
 8003e12:	07fc      	lsls	r4, r7, #31
 8003e14:	0849      	lsrs	r1, r1, #1
 8003e16:	0016      	movs	r6, r2
 8003e18:	430c      	orrs	r4, r1
 8003e1a:	087f      	lsrs	r7, r7, #1
 8003e1c:	e6cf      	b.n	8003bbe <__aeabi_dadd+0x24a>
 8003e1e:	1acc      	subs	r4, r1, r3
 8003e20:	42a1      	cmp	r1, r4
 8003e22:	41bf      	sbcs	r7, r7
 8003e24:	4643      	mov	r3, r8
 8003e26:	427f      	negs	r7, r7
 8003e28:	1a18      	subs	r0, r3, r0
 8003e2a:	4655      	mov	r5, sl
 8003e2c:	1bc7      	subs	r7, r0, r7
 8003e2e:	e5f7      	b.n	8003a20 <__aeabi_dadd+0xac>
 8003e30:	08c9      	lsrs	r1, r1, #3
 8003e32:	077b      	lsls	r3, r7, #29
 8003e34:	4655      	mov	r5, sl
 8003e36:	430b      	orrs	r3, r1
 8003e38:	08f8      	lsrs	r0, r7, #3
 8003e3a:	e6c8      	b.n	8003bce <__aeabi_dadd+0x25a>
 8003e3c:	2c00      	cmp	r4, #0
 8003e3e:	d000      	beq.n	8003e42 <__aeabi_dadd+0x4ce>
 8003e40:	e081      	b.n	8003f46 <__aeabi_dadd+0x5d2>
 8003e42:	4643      	mov	r3, r8
 8003e44:	430b      	orrs	r3, r1
 8003e46:	d115      	bne.n	8003e74 <__aeabi_dadd+0x500>
 8003e48:	2080      	movs	r0, #128	; 0x80
 8003e4a:	2500      	movs	r5, #0
 8003e4c:	0300      	lsls	r0, r0, #12
 8003e4e:	e6e3      	b.n	8003c18 <__aeabi_dadd+0x2a4>
 8003e50:	1a5c      	subs	r4, r3, r1
 8003e52:	42a3      	cmp	r3, r4
 8003e54:	419b      	sbcs	r3, r3
 8003e56:	1bc7      	subs	r7, r0, r7
 8003e58:	425b      	negs	r3, r3
 8003e5a:	2601      	movs	r6, #1
 8003e5c:	1aff      	subs	r7, r7, r3
 8003e5e:	e5da      	b.n	8003a16 <__aeabi_dadd+0xa2>
 8003e60:	0742      	lsls	r2, r0, #29
 8003e62:	08db      	lsrs	r3, r3, #3
 8003e64:	4313      	orrs	r3, r2
 8003e66:	08c0      	lsrs	r0, r0, #3
 8003e68:	e6d2      	b.n	8003c10 <__aeabi_dadd+0x29c>
 8003e6a:	0742      	lsls	r2, r0, #29
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	08c0      	lsrs	r0, r0, #3
 8003e72:	e6ac      	b.n	8003bce <__aeabi_dadd+0x25a>
 8003e74:	4643      	mov	r3, r8
 8003e76:	4642      	mov	r2, r8
 8003e78:	08c9      	lsrs	r1, r1, #3
 8003e7a:	075b      	lsls	r3, r3, #29
 8003e7c:	4655      	mov	r5, sl
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	08d0      	lsrs	r0, r2, #3
 8003e82:	e6c5      	b.n	8003c10 <__aeabi_dadd+0x29c>
 8003e84:	4643      	mov	r3, r8
 8003e86:	4642      	mov	r2, r8
 8003e88:	075b      	lsls	r3, r3, #29
 8003e8a:	08c9      	lsrs	r1, r1, #3
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	08d0      	lsrs	r0, r2, #3
 8003e90:	e6be      	b.n	8003c10 <__aeabi_dadd+0x29c>
 8003e92:	4303      	orrs	r3, r0
 8003e94:	001c      	movs	r4, r3
 8003e96:	1e63      	subs	r3, r4, #1
 8003e98:	419c      	sbcs	r4, r3
 8003e9a:	e6fc      	b.n	8003c96 <__aeabi_dadd+0x322>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	3c20      	subs	r4, #32
 8003ea0:	40e2      	lsrs	r2, r4
 8003ea2:	0014      	movs	r4, r2
 8003ea4:	4662      	mov	r2, ip
 8003ea6:	2a20      	cmp	r2, #32
 8003ea8:	d003      	beq.n	8003eb2 <__aeabi_dadd+0x53e>
 8003eaa:	2540      	movs	r5, #64	; 0x40
 8003eac:	1aad      	subs	r5, r5, r2
 8003eae:	40a8      	lsls	r0, r5
 8003eb0:	4303      	orrs	r3, r0
 8003eb2:	1e58      	subs	r0, r3, #1
 8003eb4:	4183      	sbcs	r3, r0
 8003eb6:	4323      	orrs	r3, r4
 8003eb8:	e775      	b.n	8003da6 <__aeabi_dadd+0x432>
 8003eba:	2a00      	cmp	r2, #0
 8003ebc:	d0e2      	beq.n	8003e84 <__aeabi_dadd+0x510>
 8003ebe:	003a      	movs	r2, r7
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	d0cd      	beq.n	8003e60 <__aeabi_dadd+0x4ec>
 8003ec4:	0742      	lsls	r2, r0, #29
 8003ec6:	08db      	lsrs	r3, r3, #3
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	2280      	movs	r2, #128	; 0x80
 8003ecc:	08c0      	lsrs	r0, r0, #3
 8003ece:	0312      	lsls	r2, r2, #12
 8003ed0:	4210      	tst	r0, r2
 8003ed2:	d006      	beq.n	8003ee2 <__aeabi_dadd+0x56e>
 8003ed4:	08fc      	lsrs	r4, r7, #3
 8003ed6:	4214      	tst	r4, r2
 8003ed8:	d103      	bne.n	8003ee2 <__aeabi_dadd+0x56e>
 8003eda:	0020      	movs	r0, r4
 8003edc:	08cb      	lsrs	r3, r1, #3
 8003ede:	077a      	lsls	r2, r7, #29
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	0f5a      	lsrs	r2, r3, #29
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	0752      	lsls	r2, r2, #29
 8003ee8:	08db      	lsrs	r3, r3, #3
 8003eea:	4313      	orrs	r3, r2
 8003eec:	e690      	b.n	8003c10 <__aeabi_dadd+0x29c>
 8003eee:	4643      	mov	r3, r8
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	d100      	bne.n	8003ef6 <__aeabi_dadd+0x582>
 8003ef4:	e709      	b.n	8003d0a <__aeabi_dadd+0x396>
 8003ef6:	4643      	mov	r3, r8
 8003ef8:	4642      	mov	r2, r8
 8003efa:	08c9      	lsrs	r1, r1, #3
 8003efc:	075b      	lsls	r3, r3, #29
 8003efe:	4655      	mov	r5, sl
 8003f00:	430b      	orrs	r3, r1
 8003f02:	08d0      	lsrs	r0, r2, #3
 8003f04:	e666      	b.n	8003bd4 <__aeabi_dadd+0x260>
 8003f06:	1acc      	subs	r4, r1, r3
 8003f08:	42a1      	cmp	r1, r4
 8003f0a:	4189      	sbcs	r1, r1
 8003f0c:	1a3f      	subs	r7, r7, r0
 8003f0e:	4249      	negs	r1, r1
 8003f10:	4655      	mov	r5, sl
 8003f12:	2601      	movs	r6, #1
 8003f14:	1a7f      	subs	r7, r7, r1
 8003f16:	e57e      	b.n	8003a16 <__aeabi_dadd+0xa2>
 8003f18:	4642      	mov	r2, r8
 8003f1a:	1a5c      	subs	r4, r3, r1
 8003f1c:	1a87      	subs	r7, r0, r2
 8003f1e:	42a3      	cmp	r3, r4
 8003f20:	4192      	sbcs	r2, r2
 8003f22:	4252      	negs	r2, r2
 8003f24:	1abf      	subs	r7, r7, r2
 8003f26:	023a      	lsls	r2, r7, #8
 8003f28:	d53d      	bpl.n	8003fa6 <__aeabi_dadd+0x632>
 8003f2a:	1acc      	subs	r4, r1, r3
 8003f2c:	42a1      	cmp	r1, r4
 8003f2e:	4189      	sbcs	r1, r1
 8003f30:	4643      	mov	r3, r8
 8003f32:	4249      	negs	r1, r1
 8003f34:	1a1f      	subs	r7, r3, r0
 8003f36:	4655      	mov	r5, sl
 8003f38:	1a7f      	subs	r7, r7, r1
 8003f3a:	e595      	b.n	8003a68 <__aeabi_dadd+0xf4>
 8003f3c:	077b      	lsls	r3, r7, #29
 8003f3e:	08c9      	lsrs	r1, r1, #3
 8003f40:	430b      	orrs	r3, r1
 8003f42:	08f8      	lsrs	r0, r7, #3
 8003f44:	e643      	b.n	8003bce <__aeabi_dadd+0x25a>
 8003f46:	4644      	mov	r4, r8
 8003f48:	08db      	lsrs	r3, r3, #3
 8003f4a:	430c      	orrs	r4, r1
 8003f4c:	d130      	bne.n	8003fb0 <__aeabi_dadd+0x63c>
 8003f4e:	0742      	lsls	r2, r0, #29
 8003f50:	4313      	orrs	r3, r2
 8003f52:	08c0      	lsrs	r0, r0, #3
 8003f54:	e65c      	b.n	8003c10 <__aeabi_dadd+0x29c>
 8003f56:	077b      	lsls	r3, r7, #29
 8003f58:	08c9      	lsrs	r1, r1, #3
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	08f8      	lsrs	r0, r7, #3
 8003f5e:	e639      	b.n	8003bd4 <__aeabi_dadd+0x260>
 8003f60:	185c      	adds	r4, r3, r1
 8003f62:	429c      	cmp	r4, r3
 8003f64:	419b      	sbcs	r3, r3
 8003f66:	4440      	add	r0, r8
 8003f68:	425b      	negs	r3, r3
 8003f6a:	18c7      	adds	r7, r0, r3
 8003f6c:	023b      	lsls	r3, r7, #8
 8003f6e:	d400      	bmi.n	8003f72 <__aeabi_dadd+0x5fe>
 8003f70:	e625      	b.n	8003bbe <__aeabi_dadd+0x24a>
 8003f72:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <__aeabi_dadd+0x674>)
 8003f74:	2601      	movs	r6, #1
 8003f76:	401f      	ands	r7, r3
 8003f78:	e621      	b.n	8003bbe <__aeabi_dadd+0x24a>
 8003f7a:	0004      	movs	r4, r0
 8003f7c:	3a20      	subs	r2, #32
 8003f7e:	40d4      	lsrs	r4, r2
 8003f80:	4662      	mov	r2, ip
 8003f82:	2a20      	cmp	r2, #32
 8003f84:	d004      	beq.n	8003f90 <__aeabi_dadd+0x61c>
 8003f86:	2240      	movs	r2, #64	; 0x40
 8003f88:	4666      	mov	r6, ip
 8003f8a:	1b92      	subs	r2, r2, r6
 8003f8c:	4090      	lsls	r0, r2
 8003f8e:	4303      	orrs	r3, r0
 8003f90:	1e5a      	subs	r2, r3, #1
 8003f92:	4193      	sbcs	r3, r2
 8003f94:	431c      	orrs	r4, r3
 8003f96:	e67e      	b.n	8003c96 <__aeabi_dadd+0x322>
 8003f98:	185c      	adds	r4, r3, r1
 8003f9a:	428c      	cmp	r4, r1
 8003f9c:	4189      	sbcs	r1, r1
 8003f9e:	4440      	add	r0, r8
 8003fa0:	4249      	negs	r1, r1
 8003fa2:	1847      	adds	r7, r0, r1
 8003fa4:	e6dd      	b.n	8003d62 <__aeabi_dadd+0x3ee>
 8003fa6:	0023      	movs	r3, r4
 8003fa8:	433b      	orrs	r3, r7
 8003faa:	d100      	bne.n	8003fae <__aeabi_dadd+0x63a>
 8003fac:	e6ad      	b.n	8003d0a <__aeabi_dadd+0x396>
 8003fae:	e606      	b.n	8003bbe <__aeabi_dadd+0x24a>
 8003fb0:	0744      	lsls	r4, r0, #29
 8003fb2:	4323      	orrs	r3, r4
 8003fb4:	2480      	movs	r4, #128	; 0x80
 8003fb6:	08c0      	lsrs	r0, r0, #3
 8003fb8:	0324      	lsls	r4, r4, #12
 8003fba:	4220      	tst	r0, r4
 8003fbc:	d008      	beq.n	8003fd0 <__aeabi_dadd+0x65c>
 8003fbe:	4642      	mov	r2, r8
 8003fc0:	08d6      	lsrs	r6, r2, #3
 8003fc2:	4226      	tst	r6, r4
 8003fc4:	d104      	bne.n	8003fd0 <__aeabi_dadd+0x65c>
 8003fc6:	4655      	mov	r5, sl
 8003fc8:	0030      	movs	r0, r6
 8003fca:	08cb      	lsrs	r3, r1, #3
 8003fcc:	0751      	lsls	r1, r2, #29
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	0f5a      	lsrs	r2, r3, #29
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	08db      	lsrs	r3, r3, #3
 8003fd6:	0752      	lsls	r2, r2, #29
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	e619      	b.n	8003c10 <__aeabi_dadd+0x29c>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	4a01      	ldr	r2, [pc, #4]	; (8003fe4 <__aeabi_dadd+0x670>)
 8003fe0:	001f      	movs	r7, r3
 8003fe2:	e55e      	b.n	8003aa2 <__aeabi_dadd+0x12e>
 8003fe4:	000007ff 	.word	0x000007ff
 8003fe8:	ff7fffff 	.word	0xff7fffff

08003fec <__aeabi_ddiv>:
 8003fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fee:	4657      	mov	r7, sl
 8003ff0:	464e      	mov	r6, r9
 8003ff2:	4645      	mov	r5, r8
 8003ff4:	46de      	mov	lr, fp
 8003ff6:	b5e0      	push	{r5, r6, r7, lr}
 8003ff8:	4681      	mov	r9, r0
 8003ffa:	0005      	movs	r5, r0
 8003ffc:	030c      	lsls	r4, r1, #12
 8003ffe:	0048      	lsls	r0, r1, #1
 8004000:	4692      	mov	sl, r2
 8004002:	001f      	movs	r7, r3
 8004004:	b085      	sub	sp, #20
 8004006:	0b24      	lsrs	r4, r4, #12
 8004008:	0d40      	lsrs	r0, r0, #21
 800400a:	0fce      	lsrs	r6, r1, #31
 800400c:	2800      	cmp	r0, #0
 800400e:	d100      	bne.n	8004012 <__aeabi_ddiv+0x26>
 8004010:	e156      	b.n	80042c0 <__aeabi_ddiv+0x2d4>
 8004012:	4bd4      	ldr	r3, [pc, #848]	; (8004364 <__aeabi_ddiv+0x378>)
 8004014:	4298      	cmp	r0, r3
 8004016:	d100      	bne.n	800401a <__aeabi_ddiv+0x2e>
 8004018:	e172      	b.n	8004300 <__aeabi_ddiv+0x314>
 800401a:	0f6b      	lsrs	r3, r5, #29
 800401c:	00e4      	lsls	r4, r4, #3
 800401e:	431c      	orrs	r4, r3
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	4323      	orrs	r3, r4
 8004026:	4698      	mov	r8, r3
 8004028:	4bcf      	ldr	r3, [pc, #828]	; (8004368 <__aeabi_ddiv+0x37c>)
 800402a:	00ed      	lsls	r5, r5, #3
 800402c:	469b      	mov	fp, r3
 800402e:	2300      	movs	r3, #0
 8004030:	4699      	mov	r9, r3
 8004032:	4483      	add	fp, r0
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	033c      	lsls	r4, r7, #12
 8004038:	007b      	lsls	r3, r7, #1
 800403a:	4650      	mov	r0, sl
 800403c:	0b24      	lsrs	r4, r4, #12
 800403e:	0d5b      	lsrs	r3, r3, #21
 8004040:	0fff      	lsrs	r7, r7, #31
 8004042:	2b00      	cmp	r3, #0
 8004044:	d100      	bne.n	8004048 <__aeabi_ddiv+0x5c>
 8004046:	e11f      	b.n	8004288 <__aeabi_ddiv+0x29c>
 8004048:	4ac6      	ldr	r2, [pc, #792]	; (8004364 <__aeabi_ddiv+0x378>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d100      	bne.n	8004050 <__aeabi_ddiv+0x64>
 800404e:	e162      	b.n	8004316 <__aeabi_ddiv+0x32a>
 8004050:	49c5      	ldr	r1, [pc, #788]	; (8004368 <__aeabi_ddiv+0x37c>)
 8004052:	0f42      	lsrs	r2, r0, #29
 8004054:	468c      	mov	ip, r1
 8004056:	00e4      	lsls	r4, r4, #3
 8004058:	4659      	mov	r1, fp
 800405a:	4314      	orrs	r4, r2
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	4463      	add	r3, ip
 8004060:	0412      	lsls	r2, r2, #16
 8004062:	1acb      	subs	r3, r1, r3
 8004064:	4314      	orrs	r4, r2
 8004066:	469b      	mov	fp, r3
 8004068:	00c2      	lsls	r2, r0, #3
 800406a:	2000      	movs	r0, #0
 800406c:	0033      	movs	r3, r6
 800406e:	407b      	eors	r3, r7
 8004070:	469a      	mov	sl, r3
 8004072:	464b      	mov	r3, r9
 8004074:	2b0f      	cmp	r3, #15
 8004076:	d827      	bhi.n	80040c8 <__aeabi_ddiv+0xdc>
 8004078:	49bc      	ldr	r1, [pc, #752]	; (800436c <__aeabi_ddiv+0x380>)
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	58cb      	ldr	r3, [r1, r3]
 800407e:	469f      	mov	pc, r3
 8004080:	46b2      	mov	sl, r6
 8004082:	9b00      	ldr	r3, [sp, #0]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d016      	beq.n	80040b6 <__aeabi_ddiv+0xca>
 8004088:	2b03      	cmp	r3, #3
 800408a:	d100      	bne.n	800408e <__aeabi_ddiv+0xa2>
 800408c:	e28e      	b.n	80045ac <__aeabi_ddiv+0x5c0>
 800408e:	2b01      	cmp	r3, #1
 8004090:	d000      	beq.n	8004094 <__aeabi_ddiv+0xa8>
 8004092:	e0d9      	b.n	8004248 <__aeabi_ddiv+0x25c>
 8004094:	2300      	movs	r3, #0
 8004096:	2400      	movs	r4, #0
 8004098:	2500      	movs	r5, #0
 800409a:	4652      	mov	r2, sl
 800409c:	051b      	lsls	r3, r3, #20
 800409e:	4323      	orrs	r3, r4
 80040a0:	07d2      	lsls	r2, r2, #31
 80040a2:	4313      	orrs	r3, r2
 80040a4:	0028      	movs	r0, r5
 80040a6:	0019      	movs	r1, r3
 80040a8:	b005      	add	sp, #20
 80040aa:	bcf0      	pop	{r4, r5, r6, r7}
 80040ac:	46bb      	mov	fp, r7
 80040ae:	46b2      	mov	sl, r6
 80040b0:	46a9      	mov	r9, r5
 80040b2:	46a0      	mov	r8, r4
 80040b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b6:	2400      	movs	r4, #0
 80040b8:	2500      	movs	r5, #0
 80040ba:	4baa      	ldr	r3, [pc, #680]	; (8004364 <__aeabi_ddiv+0x378>)
 80040bc:	e7ed      	b.n	800409a <__aeabi_ddiv+0xae>
 80040be:	46ba      	mov	sl, r7
 80040c0:	46a0      	mov	r8, r4
 80040c2:	0015      	movs	r5, r2
 80040c4:	9000      	str	r0, [sp, #0]
 80040c6:	e7dc      	b.n	8004082 <__aeabi_ddiv+0x96>
 80040c8:	4544      	cmp	r4, r8
 80040ca:	d200      	bcs.n	80040ce <__aeabi_ddiv+0xe2>
 80040cc:	e1c7      	b.n	800445e <__aeabi_ddiv+0x472>
 80040ce:	d100      	bne.n	80040d2 <__aeabi_ddiv+0xe6>
 80040d0:	e1c2      	b.n	8004458 <__aeabi_ddiv+0x46c>
 80040d2:	2301      	movs	r3, #1
 80040d4:	425b      	negs	r3, r3
 80040d6:	469c      	mov	ip, r3
 80040d8:	002e      	movs	r6, r5
 80040da:	4640      	mov	r0, r8
 80040dc:	2500      	movs	r5, #0
 80040de:	44e3      	add	fp, ip
 80040e0:	0223      	lsls	r3, r4, #8
 80040e2:	0e14      	lsrs	r4, r2, #24
 80040e4:	431c      	orrs	r4, r3
 80040e6:	0c1b      	lsrs	r3, r3, #16
 80040e8:	4699      	mov	r9, r3
 80040ea:	0423      	lsls	r3, r4, #16
 80040ec:	0c1f      	lsrs	r7, r3, #16
 80040ee:	0212      	lsls	r2, r2, #8
 80040f0:	4649      	mov	r1, r9
 80040f2:	9200      	str	r2, [sp, #0]
 80040f4:	9701      	str	r7, [sp, #4]
 80040f6:	f7fe fc9f 	bl	8002a38 <__aeabi_uidivmod>
 80040fa:	0002      	movs	r2, r0
 80040fc:	437a      	muls	r2, r7
 80040fe:	040b      	lsls	r3, r1, #16
 8004100:	0c31      	lsrs	r1, r6, #16
 8004102:	4680      	mov	r8, r0
 8004104:	4319      	orrs	r1, r3
 8004106:	428a      	cmp	r2, r1
 8004108:	d907      	bls.n	800411a <__aeabi_ddiv+0x12e>
 800410a:	2301      	movs	r3, #1
 800410c:	425b      	negs	r3, r3
 800410e:	469c      	mov	ip, r3
 8004110:	1909      	adds	r1, r1, r4
 8004112:	44e0      	add	r8, ip
 8004114:	428c      	cmp	r4, r1
 8004116:	d800      	bhi.n	800411a <__aeabi_ddiv+0x12e>
 8004118:	e207      	b.n	800452a <__aeabi_ddiv+0x53e>
 800411a:	1a88      	subs	r0, r1, r2
 800411c:	4649      	mov	r1, r9
 800411e:	f7fe fc8b 	bl	8002a38 <__aeabi_uidivmod>
 8004122:	0409      	lsls	r1, r1, #16
 8004124:	468c      	mov	ip, r1
 8004126:	0431      	lsls	r1, r6, #16
 8004128:	4666      	mov	r6, ip
 800412a:	9a01      	ldr	r2, [sp, #4]
 800412c:	0c09      	lsrs	r1, r1, #16
 800412e:	4342      	muls	r2, r0
 8004130:	0003      	movs	r3, r0
 8004132:	4331      	orrs	r1, r6
 8004134:	428a      	cmp	r2, r1
 8004136:	d904      	bls.n	8004142 <__aeabi_ddiv+0x156>
 8004138:	1909      	adds	r1, r1, r4
 800413a:	3b01      	subs	r3, #1
 800413c:	428c      	cmp	r4, r1
 800413e:	d800      	bhi.n	8004142 <__aeabi_ddiv+0x156>
 8004140:	e1ed      	b.n	800451e <__aeabi_ddiv+0x532>
 8004142:	1a88      	subs	r0, r1, r2
 8004144:	4642      	mov	r2, r8
 8004146:	0412      	lsls	r2, r2, #16
 8004148:	431a      	orrs	r2, r3
 800414a:	4690      	mov	r8, r2
 800414c:	4641      	mov	r1, r8
 800414e:	9b00      	ldr	r3, [sp, #0]
 8004150:	040e      	lsls	r6, r1, #16
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	001f      	movs	r7, r3
 8004156:	9302      	str	r3, [sp, #8]
 8004158:	9b00      	ldr	r3, [sp, #0]
 800415a:	0c36      	lsrs	r6, r6, #16
 800415c:	041b      	lsls	r3, r3, #16
 800415e:	0c19      	lsrs	r1, r3, #16
 8004160:	000b      	movs	r3, r1
 8004162:	4373      	muls	r3, r6
 8004164:	0c12      	lsrs	r2, r2, #16
 8004166:	437e      	muls	r6, r7
 8004168:	9103      	str	r1, [sp, #12]
 800416a:	4351      	muls	r1, r2
 800416c:	437a      	muls	r2, r7
 800416e:	0c1f      	lsrs	r7, r3, #16
 8004170:	46bc      	mov	ip, r7
 8004172:	1876      	adds	r6, r6, r1
 8004174:	4466      	add	r6, ip
 8004176:	42b1      	cmp	r1, r6
 8004178:	d903      	bls.n	8004182 <__aeabi_ddiv+0x196>
 800417a:	2180      	movs	r1, #128	; 0x80
 800417c:	0249      	lsls	r1, r1, #9
 800417e:	468c      	mov	ip, r1
 8004180:	4462      	add	r2, ip
 8004182:	0c31      	lsrs	r1, r6, #16
 8004184:	188a      	adds	r2, r1, r2
 8004186:	0431      	lsls	r1, r6, #16
 8004188:	041e      	lsls	r6, r3, #16
 800418a:	0c36      	lsrs	r6, r6, #16
 800418c:	198e      	adds	r6, r1, r6
 800418e:	4290      	cmp	r0, r2
 8004190:	d302      	bcc.n	8004198 <__aeabi_ddiv+0x1ac>
 8004192:	d112      	bne.n	80041ba <__aeabi_ddiv+0x1ce>
 8004194:	42b5      	cmp	r5, r6
 8004196:	d210      	bcs.n	80041ba <__aeabi_ddiv+0x1ce>
 8004198:	4643      	mov	r3, r8
 800419a:	1e59      	subs	r1, r3, #1
 800419c:	9b00      	ldr	r3, [sp, #0]
 800419e:	469c      	mov	ip, r3
 80041a0:	4465      	add	r5, ip
 80041a2:	001f      	movs	r7, r3
 80041a4:	429d      	cmp	r5, r3
 80041a6:	419b      	sbcs	r3, r3
 80041a8:	425b      	negs	r3, r3
 80041aa:	191b      	adds	r3, r3, r4
 80041ac:	18c0      	adds	r0, r0, r3
 80041ae:	4284      	cmp	r4, r0
 80041b0:	d200      	bcs.n	80041b4 <__aeabi_ddiv+0x1c8>
 80041b2:	e1a0      	b.n	80044f6 <__aeabi_ddiv+0x50a>
 80041b4:	d100      	bne.n	80041b8 <__aeabi_ddiv+0x1cc>
 80041b6:	e19b      	b.n	80044f0 <__aeabi_ddiv+0x504>
 80041b8:	4688      	mov	r8, r1
 80041ba:	1bae      	subs	r6, r5, r6
 80041bc:	42b5      	cmp	r5, r6
 80041be:	41ad      	sbcs	r5, r5
 80041c0:	1a80      	subs	r0, r0, r2
 80041c2:	426d      	negs	r5, r5
 80041c4:	1b40      	subs	r0, r0, r5
 80041c6:	4284      	cmp	r4, r0
 80041c8:	d100      	bne.n	80041cc <__aeabi_ddiv+0x1e0>
 80041ca:	e1d5      	b.n	8004578 <__aeabi_ddiv+0x58c>
 80041cc:	4649      	mov	r1, r9
 80041ce:	f7fe fc33 	bl	8002a38 <__aeabi_uidivmod>
 80041d2:	9a01      	ldr	r2, [sp, #4]
 80041d4:	040b      	lsls	r3, r1, #16
 80041d6:	4342      	muls	r2, r0
 80041d8:	0c31      	lsrs	r1, r6, #16
 80041da:	0005      	movs	r5, r0
 80041dc:	4319      	orrs	r1, r3
 80041de:	428a      	cmp	r2, r1
 80041e0:	d900      	bls.n	80041e4 <__aeabi_ddiv+0x1f8>
 80041e2:	e16c      	b.n	80044be <__aeabi_ddiv+0x4d2>
 80041e4:	1a88      	subs	r0, r1, r2
 80041e6:	4649      	mov	r1, r9
 80041e8:	f7fe fc26 	bl	8002a38 <__aeabi_uidivmod>
 80041ec:	9a01      	ldr	r2, [sp, #4]
 80041ee:	0436      	lsls	r6, r6, #16
 80041f0:	4342      	muls	r2, r0
 80041f2:	0409      	lsls	r1, r1, #16
 80041f4:	0c36      	lsrs	r6, r6, #16
 80041f6:	0003      	movs	r3, r0
 80041f8:	430e      	orrs	r6, r1
 80041fa:	42b2      	cmp	r2, r6
 80041fc:	d900      	bls.n	8004200 <__aeabi_ddiv+0x214>
 80041fe:	e153      	b.n	80044a8 <__aeabi_ddiv+0x4bc>
 8004200:	9803      	ldr	r0, [sp, #12]
 8004202:	1ab6      	subs	r6, r6, r2
 8004204:	0002      	movs	r2, r0
 8004206:	042d      	lsls	r5, r5, #16
 8004208:	431d      	orrs	r5, r3
 800420a:	9f02      	ldr	r7, [sp, #8]
 800420c:	042b      	lsls	r3, r5, #16
 800420e:	0c1b      	lsrs	r3, r3, #16
 8004210:	435a      	muls	r2, r3
 8004212:	437b      	muls	r3, r7
 8004214:	469c      	mov	ip, r3
 8004216:	0c29      	lsrs	r1, r5, #16
 8004218:	4348      	muls	r0, r1
 800421a:	0c13      	lsrs	r3, r2, #16
 800421c:	4484      	add	ip, r0
 800421e:	4463      	add	r3, ip
 8004220:	4379      	muls	r1, r7
 8004222:	4298      	cmp	r0, r3
 8004224:	d903      	bls.n	800422e <__aeabi_ddiv+0x242>
 8004226:	2080      	movs	r0, #128	; 0x80
 8004228:	0240      	lsls	r0, r0, #9
 800422a:	4684      	mov	ip, r0
 800422c:	4461      	add	r1, ip
 800422e:	0c18      	lsrs	r0, r3, #16
 8004230:	0412      	lsls	r2, r2, #16
 8004232:	041b      	lsls	r3, r3, #16
 8004234:	0c12      	lsrs	r2, r2, #16
 8004236:	1841      	adds	r1, r0, r1
 8004238:	189b      	adds	r3, r3, r2
 800423a:	428e      	cmp	r6, r1
 800423c:	d200      	bcs.n	8004240 <__aeabi_ddiv+0x254>
 800423e:	e0ff      	b.n	8004440 <__aeabi_ddiv+0x454>
 8004240:	d100      	bne.n	8004244 <__aeabi_ddiv+0x258>
 8004242:	e0fa      	b.n	800443a <__aeabi_ddiv+0x44e>
 8004244:	2301      	movs	r3, #1
 8004246:	431d      	orrs	r5, r3
 8004248:	4a49      	ldr	r2, [pc, #292]	; (8004370 <__aeabi_ddiv+0x384>)
 800424a:	445a      	add	r2, fp
 800424c:	2a00      	cmp	r2, #0
 800424e:	dc00      	bgt.n	8004252 <__aeabi_ddiv+0x266>
 8004250:	e0aa      	b.n	80043a8 <__aeabi_ddiv+0x3bc>
 8004252:	076b      	lsls	r3, r5, #29
 8004254:	d000      	beq.n	8004258 <__aeabi_ddiv+0x26c>
 8004256:	e13d      	b.n	80044d4 <__aeabi_ddiv+0x4e8>
 8004258:	08ed      	lsrs	r5, r5, #3
 800425a:	4643      	mov	r3, r8
 800425c:	01db      	lsls	r3, r3, #7
 800425e:	d506      	bpl.n	800426e <__aeabi_ddiv+0x282>
 8004260:	4642      	mov	r2, r8
 8004262:	4b44      	ldr	r3, [pc, #272]	; (8004374 <__aeabi_ddiv+0x388>)
 8004264:	401a      	ands	r2, r3
 8004266:	4690      	mov	r8, r2
 8004268:	2280      	movs	r2, #128	; 0x80
 800426a:	00d2      	lsls	r2, r2, #3
 800426c:	445a      	add	r2, fp
 800426e:	4b42      	ldr	r3, [pc, #264]	; (8004378 <__aeabi_ddiv+0x38c>)
 8004270:	429a      	cmp	r2, r3
 8004272:	dd00      	ble.n	8004276 <__aeabi_ddiv+0x28a>
 8004274:	e71f      	b.n	80040b6 <__aeabi_ddiv+0xca>
 8004276:	4643      	mov	r3, r8
 8004278:	075b      	lsls	r3, r3, #29
 800427a:	431d      	orrs	r5, r3
 800427c:	4643      	mov	r3, r8
 800427e:	0552      	lsls	r2, r2, #21
 8004280:	025c      	lsls	r4, r3, #9
 8004282:	0b24      	lsrs	r4, r4, #12
 8004284:	0d53      	lsrs	r3, r2, #21
 8004286:	e708      	b.n	800409a <__aeabi_ddiv+0xae>
 8004288:	4652      	mov	r2, sl
 800428a:	4322      	orrs	r2, r4
 800428c:	d100      	bne.n	8004290 <__aeabi_ddiv+0x2a4>
 800428e:	e07b      	b.n	8004388 <__aeabi_ddiv+0x39c>
 8004290:	2c00      	cmp	r4, #0
 8004292:	d100      	bne.n	8004296 <__aeabi_ddiv+0x2aa>
 8004294:	e0fa      	b.n	800448c <__aeabi_ddiv+0x4a0>
 8004296:	0020      	movs	r0, r4
 8004298:	f001 fa5c 	bl	8005754 <__clzsi2>
 800429c:	0002      	movs	r2, r0
 800429e:	3a0b      	subs	r2, #11
 80042a0:	231d      	movs	r3, #29
 80042a2:	0001      	movs	r1, r0
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	4652      	mov	r2, sl
 80042a8:	3908      	subs	r1, #8
 80042aa:	40da      	lsrs	r2, r3
 80042ac:	408c      	lsls	r4, r1
 80042ae:	4314      	orrs	r4, r2
 80042b0:	4652      	mov	r2, sl
 80042b2:	408a      	lsls	r2, r1
 80042b4:	4b31      	ldr	r3, [pc, #196]	; (800437c <__aeabi_ddiv+0x390>)
 80042b6:	4458      	add	r0, fp
 80042b8:	469b      	mov	fp, r3
 80042ba:	4483      	add	fp, r0
 80042bc:	2000      	movs	r0, #0
 80042be:	e6d5      	b.n	800406c <__aeabi_ddiv+0x80>
 80042c0:	464b      	mov	r3, r9
 80042c2:	4323      	orrs	r3, r4
 80042c4:	4698      	mov	r8, r3
 80042c6:	d044      	beq.n	8004352 <__aeabi_ddiv+0x366>
 80042c8:	2c00      	cmp	r4, #0
 80042ca:	d100      	bne.n	80042ce <__aeabi_ddiv+0x2e2>
 80042cc:	e0ce      	b.n	800446c <__aeabi_ddiv+0x480>
 80042ce:	0020      	movs	r0, r4
 80042d0:	f001 fa40 	bl	8005754 <__clzsi2>
 80042d4:	0001      	movs	r1, r0
 80042d6:	0002      	movs	r2, r0
 80042d8:	390b      	subs	r1, #11
 80042da:	231d      	movs	r3, #29
 80042dc:	1a5b      	subs	r3, r3, r1
 80042de:	4649      	mov	r1, r9
 80042e0:	0010      	movs	r0, r2
 80042e2:	40d9      	lsrs	r1, r3
 80042e4:	3808      	subs	r0, #8
 80042e6:	4084      	lsls	r4, r0
 80042e8:	000b      	movs	r3, r1
 80042ea:	464d      	mov	r5, r9
 80042ec:	4323      	orrs	r3, r4
 80042ee:	4698      	mov	r8, r3
 80042f0:	4085      	lsls	r5, r0
 80042f2:	4823      	ldr	r0, [pc, #140]	; (8004380 <__aeabi_ddiv+0x394>)
 80042f4:	1a83      	subs	r3, r0, r2
 80042f6:	469b      	mov	fp, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	4699      	mov	r9, r3
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	e69a      	b.n	8004036 <__aeabi_ddiv+0x4a>
 8004300:	464b      	mov	r3, r9
 8004302:	4323      	orrs	r3, r4
 8004304:	4698      	mov	r8, r3
 8004306:	d11d      	bne.n	8004344 <__aeabi_ddiv+0x358>
 8004308:	2308      	movs	r3, #8
 800430a:	4699      	mov	r9, r3
 800430c:	3b06      	subs	r3, #6
 800430e:	2500      	movs	r5, #0
 8004310:	4683      	mov	fp, r0
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	e68f      	b.n	8004036 <__aeabi_ddiv+0x4a>
 8004316:	4652      	mov	r2, sl
 8004318:	4322      	orrs	r2, r4
 800431a:	d109      	bne.n	8004330 <__aeabi_ddiv+0x344>
 800431c:	2302      	movs	r3, #2
 800431e:	4649      	mov	r1, r9
 8004320:	4319      	orrs	r1, r3
 8004322:	4b18      	ldr	r3, [pc, #96]	; (8004384 <__aeabi_ddiv+0x398>)
 8004324:	4689      	mov	r9, r1
 8004326:	469c      	mov	ip, r3
 8004328:	2400      	movs	r4, #0
 800432a:	2002      	movs	r0, #2
 800432c:	44e3      	add	fp, ip
 800432e:	e69d      	b.n	800406c <__aeabi_ddiv+0x80>
 8004330:	2303      	movs	r3, #3
 8004332:	464a      	mov	r2, r9
 8004334:	431a      	orrs	r2, r3
 8004336:	4b13      	ldr	r3, [pc, #76]	; (8004384 <__aeabi_ddiv+0x398>)
 8004338:	4691      	mov	r9, r2
 800433a:	469c      	mov	ip, r3
 800433c:	4652      	mov	r2, sl
 800433e:	2003      	movs	r0, #3
 8004340:	44e3      	add	fp, ip
 8004342:	e693      	b.n	800406c <__aeabi_ddiv+0x80>
 8004344:	230c      	movs	r3, #12
 8004346:	4699      	mov	r9, r3
 8004348:	3b09      	subs	r3, #9
 800434a:	46a0      	mov	r8, r4
 800434c:	4683      	mov	fp, r0
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	e671      	b.n	8004036 <__aeabi_ddiv+0x4a>
 8004352:	2304      	movs	r3, #4
 8004354:	4699      	mov	r9, r3
 8004356:	2300      	movs	r3, #0
 8004358:	469b      	mov	fp, r3
 800435a:	3301      	adds	r3, #1
 800435c:	2500      	movs	r5, #0
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	e669      	b.n	8004036 <__aeabi_ddiv+0x4a>
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	000007ff 	.word	0x000007ff
 8004368:	fffffc01 	.word	0xfffffc01
 800436c:	0800d22c 	.word	0x0800d22c
 8004370:	000003ff 	.word	0x000003ff
 8004374:	feffffff 	.word	0xfeffffff
 8004378:	000007fe 	.word	0x000007fe
 800437c:	000003f3 	.word	0x000003f3
 8004380:	fffffc0d 	.word	0xfffffc0d
 8004384:	fffff801 	.word	0xfffff801
 8004388:	4649      	mov	r1, r9
 800438a:	2301      	movs	r3, #1
 800438c:	4319      	orrs	r1, r3
 800438e:	4689      	mov	r9, r1
 8004390:	2400      	movs	r4, #0
 8004392:	2001      	movs	r0, #1
 8004394:	e66a      	b.n	800406c <__aeabi_ddiv+0x80>
 8004396:	2300      	movs	r3, #0
 8004398:	2480      	movs	r4, #128	; 0x80
 800439a:	469a      	mov	sl, r3
 800439c:	2500      	movs	r5, #0
 800439e:	4b8a      	ldr	r3, [pc, #552]	; (80045c8 <__aeabi_ddiv+0x5dc>)
 80043a0:	0324      	lsls	r4, r4, #12
 80043a2:	e67a      	b.n	800409a <__aeabi_ddiv+0xae>
 80043a4:	2501      	movs	r5, #1
 80043a6:	426d      	negs	r5, r5
 80043a8:	2301      	movs	r3, #1
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	2b38      	cmp	r3, #56	; 0x38
 80043ae:	dd00      	ble.n	80043b2 <__aeabi_ddiv+0x3c6>
 80043b0:	e670      	b.n	8004094 <__aeabi_ddiv+0xa8>
 80043b2:	2b1f      	cmp	r3, #31
 80043b4:	dc00      	bgt.n	80043b8 <__aeabi_ddiv+0x3cc>
 80043b6:	e0bf      	b.n	8004538 <__aeabi_ddiv+0x54c>
 80043b8:	211f      	movs	r1, #31
 80043ba:	4249      	negs	r1, r1
 80043bc:	1a8a      	subs	r2, r1, r2
 80043be:	4641      	mov	r1, r8
 80043c0:	40d1      	lsrs	r1, r2
 80043c2:	000a      	movs	r2, r1
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d004      	beq.n	80043d2 <__aeabi_ddiv+0x3e6>
 80043c8:	4641      	mov	r1, r8
 80043ca:	4b80      	ldr	r3, [pc, #512]	; (80045cc <__aeabi_ddiv+0x5e0>)
 80043cc:	445b      	add	r3, fp
 80043ce:	4099      	lsls	r1, r3
 80043d0:	430d      	orrs	r5, r1
 80043d2:	1e6b      	subs	r3, r5, #1
 80043d4:	419d      	sbcs	r5, r3
 80043d6:	2307      	movs	r3, #7
 80043d8:	432a      	orrs	r2, r5
 80043da:	001d      	movs	r5, r3
 80043dc:	2400      	movs	r4, #0
 80043de:	4015      	ands	r5, r2
 80043e0:	4213      	tst	r3, r2
 80043e2:	d100      	bne.n	80043e6 <__aeabi_ddiv+0x3fa>
 80043e4:	e0d4      	b.n	8004590 <__aeabi_ddiv+0x5a4>
 80043e6:	210f      	movs	r1, #15
 80043e8:	2300      	movs	r3, #0
 80043ea:	4011      	ands	r1, r2
 80043ec:	2904      	cmp	r1, #4
 80043ee:	d100      	bne.n	80043f2 <__aeabi_ddiv+0x406>
 80043f0:	e0cb      	b.n	800458a <__aeabi_ddiv+0x59e>
 80043f2:	1d11      	adds	r1, r2, #4
 80043f4:	4291      	cmp	r1, r2
 80043f6:	4192      	sbcs	r2, r2
 80043f8:	4252      	negs	r2, r2
 80043fa:	189b      	adds	r3, r3, r2
 80043fc:	000a      	movs	r2, r1
 80043fe:	0219      	lsls	r1, r3, #8
 8004400:	d400      	bmi.n	8004404 <__aeabi_ddiv+0x418>
 8004402:	e0c2      	b.n	800458a <__aeabi_ddiv+0x59e>
 8004404:	2301      	movs	r3, #1
 8004406:	2400      	movs	r4, #0
 8004408:	2500      	movs	r5, #0
 800440a:	e646      	b.n	800409a <__aeabi_ddiv+0xae>
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	4641      	mov	r1, r8
 8004410:	031b      	lsls	r3, r3, #12
 8004412:	4219      	tst	r1, r3
 8004414:	d008      	beq.n	8004428 <__aeabi_ddiv+0x43c>
 8004416:	421c      	tst	r4, r3
 8004418:	d106      	bne.n	8004428 <__aeabi_ddiv+0x43c>
 800441a:	431c      	orrs	r4, r3
 800441c:	0324      	lsls	r4, r4, #12
 800441e:	46ba      	mov	sl, r7
 8004420:	0015      	movs	r5, r2
 8004422:	4b69      	ldr	r3, [pc, #420]	; (80045c8 <__aeabi_ddiv+0x5dc>)
 8004424:	0b24      	lsrs	r4, r4, #12
 8004426:	e638      	b.n	800409a <__aeabi_ddiv+0xae>
 8004428:	2480      	movs	r4, #128	; 0x80
 800442a:	4643      	mov	r3, r8
 800442c:	0324      	lsls	r4, r4, #12
 800442e:	431c      	orrs	r4, r3
 8004430:	0324      	lsls	r4, r4, #12
 8004432:	46b2      	mov	sl, r6
 8004434:	4b64      	ldr	r3, [pc, #400]	; (80045c8 <__aeabi_ddiv+0x5dc>)
 8004436:	0b24      	lsrs	r4, r4, #12
 8004438:	e62f      	b.n	800409a <__aeabi_ddiv+0xae>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d100      	bne.n	8004440 <__aeabi_ddiv+0x454>
 800443e:	e703      	b.n	8004248 <__aeabi_ddiv+0x25c>
 8004440:	19a6      	adds	r6, r4, r6
 8004442:	1e68      	subs	r0, r5, #1
 8004444:	42a6      	cmp	r6, r4
 8004446:	d200      	bcs.n	800444a <__aeabi_ddiv+0x45e>
 8004448:	e08d      	b.n	8004566 <__aeabi_ddiv+0x57a>
 800444a:	428e      	cmp	r6, r1
 800444c:	d200      	bcs.n	8004450 <__aeabi_ddiv+0x464>
 800444e:	e0a3      	b.n	8004598 <__aeabi_ddiv+0x5ac>
 8004450:	d100      	bne.n	8004454 <__aeabi_ddiv+0x468>
 8004452:	e0b3      	b.n	80045bc <__aeabi_ddiv+0x5d0>
 8004454:	0005      	movs	r5, r0
 8004456:	e6f5      	b.n	8004244 <__aeabi_ddiv+0x258>
 8004458:	42aa      	cmp	r2, r5
 800445a:	d900      	bls.n	800445e <__aeabi_ddiv+0x472>
 800445c:	e639      	b.n	80040d2 <__aeabi_ddiv+0xe6>
 800445e:	4643      	mov	r3, r8
 8004460:	07de      	lsls	r6, r3, #31
 8004462:	0858      	lsrs	r0, r3, #1
 8004464:	086b      	lsrs	r3, r5, #1
 8004466:	431e      	orrs	r6, r3
 8004468:	07ed      	lsls	r5, r5, #31
 800446a:	e639      	b.n	80040e0 <__aeabi_ddiv+0xf4>
 800446c:	4648      	mov	r0, r9
 800446e:	f001 f971 	bl	8005754 <__clzsi2>
 8004472:	0001      	movs	r1, r0
 8004474:	0002      	movs	r2, r0
 8004476:	3115      	adds	r1, #21
 8004478:	3220      	adds	r2, #32
 800447a:	291c      	cmp	r1, #28
 800447c:	dc00      	bgt.n	8004480 <__aeabi_ddiv+0x494>
 800447e:	e72c      	b.n	80042da <__aeabi_ddiv+0x2ee>
 8004480:	464b      	mov	r3, r9
 8004482:	3808      	subs	r0, #8
 8004484:	4083      	lsls	r3, r0
 8004486:	2500      	movs	r5, #0
 8004488:	4698      	mov	r8, r3
 800448a:	e732      	b.n	80042f2 <__aeabi_ddiv+0x306>
 800448c:	f001 f962 	bl	8005754 <__clzsi2>
 8004490:	0003      	movs	r3, r0
 8004492:	001a      	movs	r2, r3
 8004494:	3215      	adds	r2, #21
 8004496:	3020      	adds	r0, #32
 8004498:	2a1c      	cmp	r2, #28
 800449a:	dc00      	bgt.n	800449e <__aeabi_ddiv+0x4b2>
 800449c:	e700      	b.n	80042a0 <__aeabi_ddiv+0x2b4>
 800449e:	4654      	mov	r4, sl
 80044a0:	3b08      	subs	r3, #8
 80044a2:	2200      	movs	r2, #0
 80044a4:	409c      	lsls	r4, r3
 80044a6:	e705      	b.n	80042b4 <__aeabi_ddiv+0x2c8>
 80044a8:	1936      	adds	r6, r6, r4
 80044aa:	3b01      	subs	r3, #1
 80044ac:	42b4      	cmp	r4, r6
 80044ae:	d900      	bls.n	80044b2 <__aeabi_ddiv+0x4c6>
 80044b0:	e6a6      	b.n	8004200 <__aeabi_ddiv+0x214>
 80044b2:	42b2      	cmp	r2, r6
 80044b4:	d800      	bhi.n	80044b8 <__aeabi_ddiv+0x4cc>
 80044b6:	e6a3      	b.n	8004200 <__aeabi_ddiv+0x214>
 80044b8:	1e83      	subs	r3, r0, #2
 80044ba:	1936      	adds	r6, r6, r4
 80044bc:	e6a0      	b.n	8004200 <__aeabi_ddiv+0x214>
 80044be:	1909      	adds	r1, r1, r4
 80044c0:	3d01      	subs	r5, #1
 80044c2:	428c      	cmp	r4, r1
 80044c4:	d900      	bls.n	80044c8 <__aeabi_ddiv+0x4dc>
 80044c6:	e68d      	b.n	80041e4 <__aeabi_ddiv+0x1f8>
 80044c8:	428a      	cmp	r2, r1
 80044ca:	d800      	bhi.n	80044ce <__aeabi_ddiv+0x4e2>
 80044cc:	e68a      	b.n	80041e4 <__aeabi_ddiv+0x1f8>
 80044ce:	1e85      	subs	r5, r0, #2
 80044d0:	1909      	adds	r1, r1, r4
 80044d2:	e687      	b.n	80041e4 <__aeabi_ddiv+0x1f8>
 80044d4:	230f      	movs	r3, #15
 80044d6:	402b      	ands	r3, r5
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d100      	bne.n	80044de <__aeabi_ddiv+0x4f2>
 80044dc:	e6bc      	b.n	8004258 <__aeabi_ddiv+0x26c>
 80044de:	2305      	movs	r3, #5
 80044e0:	425b      	negs	r3, r3
 80044e2:	42ab      	cmp	r3, r5
 80044e4:	419b      	sbcs	r3, r3
 80044e6:	3504      	adds	r5, #4
 80044e8:	425b      	negs	r3, r3
 80044ea:	08ed      	lsrs	r5, r5, #3
 80044ec:	4498      	add	r8, r3
 80044ee:	e6b4      	b.n	800425a <__aeabi_ddiv+0x26e>
 80044f0:	42af      	cmp	r7, r5
 80044f2:	d900      	bls.n	80044f6 <__aeabi_ddiv+0x50a>
 80044f4:	e660      	b.n	80041b8 <__aeabi_ddiv+0x1cc>
 80044f6:	4282      	cmp	r2, r0
 80044f8:	d804      	bhi.n	8004504 <__aeabi_ddiv+0x518>
 80044fa:	d000      	beq.n	80044fe <__aeabi_ddiv+0x512>
 80044fc:	e65c      	b.n	80041b8 <__aeabi_ddiv+0x1cc>
 80044fe:	42ae      	cmp	r6, r5
 8004500:	d800      	bhi.n	8004504 <__aeabi_ddiv+0x518>
 8004502:	e659      	b.n	80041b8 <__aeabi_ddiv+0x1cc>
 8004504:	2302      	movs	r3, #2
 8004506:	425b      	negs	r3, r3
 8004508:	469c      	mov	ip, r3
 800450a:	9b00      	ldr	r3, [sp, #0]
 800450c:	44e0      	add	r8, ip
 800450e:	469c      	mov	ip, r3
 8004510:	4465      	add	r5, ip
 8004512:	429d      	cmp	r5, r3
 8004514:	419b      	sbcs	r3, r3
 8004516:	425b      	negs	r3, r3
 8004518:	191b      	adds	r3, r3, r4
 800451a:	18c0      	adds	r0, r0, r3
 800451c:	e64d      	b.n	80041ba <__aeabi_ddiv+0x1ce>
 800451e:	428a      	cmp	r2, r1
 8004520:	d800      	bhi.n	8004524 <__aeabi_ddiv+0x538>
 8004522:	e60e      	b.n	8004142 <__aeabi_ddiv+0x156>
 8004524:	1e83      	subs	r3, r0, #2
 8004526:	1909      	adds	r1, r1, r4
 8004528:	e60b      	b.n	8004142 <__aeabi_ddiv+0x156>
 800452a:	428a      	cmp	r2, r1
 800452c:	d800      	bhi.n	8004530 <__aeabi_ddiv+0x544>
 800452e:	e5f4      	b.n	800411a <__aeabi_ddiv+0x12e>
 8004530:	1e83      	subs	r3, r0, #2
 8004532:	4698      	mov	r8, r3
 8004534:	1909      	adds	r1, r1, r4
 8004536:	e5f0      	b.n	800411a <__aeabi_ddiv+0x12e>
 8004538:	4925      	ldr	r1, [pc, #148]	; (80045d0 <__aeabi_ddiv+0x5e4>)
 800453a:	0028      	movs	r0, r5
 800453c:	4459      	add	r1, fp
 800453e:	408d      	lsls	r5, r1
 8004540:	4642      	mov	r2, r8
 8004542:	408a      	lsls	r2, r1
 8004544:	1e69      	subs	r1, r5, #1
 8004546:	418d      	sbcs	r5, r1
 8004548:	4641      	mov	r1, r8
 800454a:	40d8      	lsrs	r0, r3
 800454c:	40d9      	lsrs	r1, r3
 800454e:	4302      	orrs	r2, r0
 8004550:	432a      	orrs	r2, r5
 8004552:	000b      	movs	r3, r1
 8004554:	0751      	lsls	r1, r2, #29
 8004556:	d100      	bne.n	800455a <__aeabi_ddiv+0x56e>
 8004558:	e751      	b.n	80043fe <__aeabi_ddiv+0x412>
 800455a:	210f      	movs	r1, #15
 800455c:	4011      	ands	r1, r2
 800455e:	2904      	cmp	r1, #4
 8004560:	d000      	beq.n	8004564 <__aeabi_ddiv+0x578>
 8004562:	e746      	b.n	80043f2 <__aeabi_ddiv+0x406>
 8004564:	e74b      	b.n	80043fe <__aeabi_ddiv+0x412>
 8004566:	0005      	movs	r5, r0
 8004568:	428e      	cmp	r6, r1
 800456a:	d000      	beq.n	800456e <__aeabi_ddiv+0x582>
 800456c:	e66a      	b.n	8004244 <__aeabi_ddiv+0x258>
 800456e:	9a00      	ldr	r2, [sp, #0]
 8004570:	4293      	cmp	r3, r2
 8004572:	d000      	beq.n	8004576 <__aeabi_ddiv+0x58a>
 8004574:	e666      	b.n	8004244 <__aeabi_ddiv+0x258>
 8004576:	e667      	b.n	8004248 <__aeabi_ddiv+0x25c>
 8004578:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <__aeabi_ddiv+0x5e8>)
 800457a:	445a      	add	r2, fp
 800457c:	2a00      	cmp	r2, #0
 800457e:	dc00      	bgt.n	8004582 <__aeabi_ddiv+0x596>
 8004580:	e710      	b.n	80043a4 <__aeabi_ddiv+0x3b8>
 8004582:	2301      	movs	r3, #1
 8004584:	2500      	movs	r5, #0
 8004586:	4498      	add	r8, r3
 8004588:	e667      	b.n	800425a <__aeabi_ddiv+0x26e>
 800458a:	075d      	lsls	r5, r3, #29
 800458c:	025b      	lsls	r3, r3, #9
 800458e:	0b1c      	lsrs	r4, r3, #12
 8004590:	08d2      	lsrs	r2, r2, #3
 8004592:	2300      	movs	r3, #0
 8004594:	4315      	orrs	r5, r2
 8004596:	e580      	b.n	800409a <__aeabi_ddiv+0xae>
 8004598:	9800      	ldr	r0, [sp, #0]
 800459a:	3d02      	subs	r5, #2
 800459c:	0042      	lsls	r2, r0, #1
 800459e:	4282      	cmp	r2, r0
 80045a0:	41bf      	sbcs	r7, r7
 80045a2:	427f      	negs	r7, r7
 80045a4:	193c      	adds	r4, r7, r4
 80045a6:	1936      	adds	r6, r6, r4
 80045a8:	9200      	str	r2, [sp, #0]
 80045aa:	e7dd      	b.n	8004568 <__aeabi_ddiv+0x57c>
 80045ac:	2480      	movs	r4, #128	; 0x80
 80045ae:	4643      	mov	r3, r8
 80045b0:	0324      	lsls	r4, r4, #12
 80045b2:	431c      	orrs	r4, r3
 80045b4:	0324      	lsls	r4, r4, #12
 80045b6:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <__aeabi_ddiv+0x5dc>)
 80045b8:	0b24      	lsrs	r4, r4, #12
 80045ba:	e56e      	b.n	800409a <__aeabi_ddiv+0xae>
 80045bc:	9a00      	ldr	r2, [sp, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d3ea      	bcc.n	8004598 <__aeabi_ddiv+0x5ac>
 80045c2:	0005      	movs	r5, r0
 80045c4:	e7d3      	b.n	800456e <__aeabi_ddiv+0x582>
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	000007ff 	.word	0x000007ff
 80045cc:	0000043e 	.word	0x0000043e
 80045d0:	0000041e 	.word	0x0000041e
 80045d4:	000003ff 	.word	0x000003ff

080045d8 <__eqdf2>:
 80045d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045da:	464e      	mov	r6, r9
 80045dc:	4645      	mov	r5, r8
 80045de:	46de      	mov	lr, fp
 80045e0:	4657      	mov	r7, sl
 80045e2:	4690      	mov	r8, r2
 80045e4:	b5e0      	push	{r5, r6, r7, lr}
 80045e6:	0017      	movs	r7, r2
 80045e8:	031a      	lsls	r2, r3, #12
 80045ea:	0b12      	lsrs	r2, r2, #12
 80045ec:	0005      	movs	r5, r0
 80045ee:	4684      	mov	ip, r0
 80045f0:	4819      	ldr	r0, [pc, #100]	; (8004658 <__eqdf2+0x80>)
 80045f2:	030e      	lsls	r6, r1, #12
 80045f4:	004c      	lsls	r4, r1, #1
 80045f6:	4691      	mov	r9, r2
 80045f8:	005a      	lsls	r2, r3, #1
 80045fa:	0fdb      	lsrs	r3, r3, #31
 80045fc:	469b      	mov	fp, r3
 80045fe:	0b36      	lsrs	r6, r6, #12
 8004600:	0d64      	lsrs	r4, r4, #21
 8004602:	0fc9      	lsrs	r1, r1, #31
 8004604:	0d52      	lsrs	r2, r2, #21
 8004606:	4284      	cmp	r4, r0
 8004608:	d019      	beq.n	800463e <__eqdf2+0x66>
 800460a:	4282      	cmp	r2, r0
 800460c:	d010      	beq.n	8004630 <__eqdf2+0x58>
 800460e:	2001      	movs	r0, #1
 8004610:	4294      	cmp	r4, r2
 8004612:	d10e      	bne.n	8004632 <__eqdf2+0x5a>
 8004614:	454e      	cmp	r6, r9
 8004616:	d10c      	bne.n	8004632 <__eqdf2+0x5a>
 8004618:	2001      	movs	r0, #1
 800461a:	45c4      	cmp	ip, r8
 800461c:	d109      	bne.n	8004632 <__eqdf2+0x5a>
 800461e:	4559      	cmp	r1, fp
 8004620:	d017      	beq.n	8004652 <__eqdf2+0x7a>
 8004622:	2c00      	cmp	r4, #0
 8004624:	d105      	bne.n	8004632 <__eqdf2+0x5a>
 8004626:	0030      	movs	r0, r6
 8004628:	4328      	orrs	r0, r5
 800462a:	1e43      	subs	r3, r0, #1
 800462c:	4198      	sbcs	r0, r3
 800462e:	e000      	b.n	8004632 <__eqdf2+0x5a>
 8004630:	2001      	movs	r0, #1
 8004632:	bcf0      	pop	{r4, r5, r6, r7}
 8004634:	46bb      	mov	fp, r7
 8004636:	46b2      	mov	sl, r6
 8004638:	46a9      	mov	r9, r5
 800463a:	46a0      	mov	r8, r4
 800463c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800463e:	0033      	movs	r3, r6
 8004640:	2001      	movs	r0, #1
 8004642:	432b      	orrs	r3, r5
 8004644:	d1f5      	bne.n	8004632 <__eqdf2+0x5a>
 8004646:	42a2      	cmp	r2, r4
 8004648:	d1f3      	bne.n	8004632 <__eqdf2+0x5a>
 800464a:	464b      	mov	r3, r9
 800464c:	433b      	orrs	r3, r7
 800464e:	d1f0      	bne.n	8004632 <__eqdf2+0x5a>
 8004650:	e7e2      	b.n	8004618 <__eqdf2+0x40>
 8004652:	2000      	movs	r0, #0
 8004654:	e7ed      	b.n	8004632 <__eqdf2+0x5a>
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	000007ff 	.word	0x000007ff

0800465c <__gedf2>:
 800465c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800465e:	4647      	mov	r7, r8
 8004660:	46ce      	mov	lr, r9
 8004662:	0004      	movs	r4, r0
 8004664:	0018      	movs	r0, r3
 8004666:	0016      	movs	r6, r2
 8004668:	031b      	lsls	r3, r3, #12
 800466a:	0b1b      	lsrs	r3, r3, #12
 800466c:	4d2d      	ldr	r5, [pc, #180]	; (8004724 <__gedf2+0xc8>)
 800466e:	004a      	lsls	r2, r1, #1
 8004670:	4699      	mov	r9, r3
 8004672:	b580      	push	{r7, lr}
 8004674:	0043      	lsls	r3, r0, #1
 8004676:	030f      	lsls	r7, r1, #12
 8004678:	46a4      	mov	ip, r4
 800467a:	46b0      	mov	r8, r6
 800467c:	0b3f      	lsrs	r7, r7, #12
 800467e:	0d52      	lsrs	r2, r2, #21
 8004680:	0fc9      	lsrs	r1, r1, #31
 8004682:	0d5b      	lsrs	r3, r3, #21
 8004684:	0fc0      	lsrs	r0, r0, #31
 8004686:	42aa      	cmp	r2, r5
 8004688:	d021      	beq.n	80046ce <__gedf2+0x72>
 800468a:	42ab      	cmp	r3, r5
 800468c:	d013      	beq.n	80046b6 <__gedf2+0x5a>
 800468e:	2a00      	cmp	r2, #0
 8004690:	d122      	bne.n	80046d8 <__gedf2+0x7c>
 8004692:	433c      	orrs	r4, r7
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <__gedf2+0x42>
 8004698:	464d      	mov	r5, r9
 800469a:	432e      	orrs	r6, r5
 800469c:	d022      	beq.n	80046e4 <__gedf2+0x88>
 800469e:	2c00      	cmp	r4, #0
 80046a0:	d010      	beq.n	80046c4 <__gedf2+0x68>
 80046a2:	4281      	cmp	r1, r0
 80046a4:	d022      	beq.n	80046ec <__gedf2+0x90>
 80046a6:	2002      	movs	r0, #2
 80046a8:	3901      	subs	r1, #1
 80046aa:	4008      	ands	r0, r1
 80046ac:	3801      	subs	r0, #1
 80046ae:	bcc0      	pop	{r6, r7}
 80046b0:	46b9      	mov	r9, r7
 80046b2:	46b0      	mov	r8, r6
 80046b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b6:	464d      	mov	r5, r9
 80046b8:	432e      	orrs	r6, r5
 80046ba:	d129      	bne.n	8004710 <__gedf2+0xb4>
 80046bc:	2a00      	cmp	r2, #0
 80046be:	d1f0      	bne.n	80046a2 <__gedf2+0x46>
 80046c0:	433c      	orrs	r4, r7
 80046c2:	d1ee      	bne.n	80046a2 <__gedf2+0x46>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d1f2      	bne.n	80046ae <__gedf2+0x52>
 80046c8:	2001      	movs	r0, #1
 80046ca:	4240      	negs	r0, r0
 80046cc:	e7ef      	b.n	80046ae <__gedf2+0x52>
 80046ce:	003d      	movs	r5, r7
 80046d0:	4325      	orrs	r5, r4
 80046d2:	d11d      	bne.n	8004710 <__gedf2+0xb4>
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d0ee      	beq.n	80046b6 <__gedf2+0x5a>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e2      	bne.n	80046a2 <__gedf2+0x46>
 80046dc:	464c      	mov	r4, r9
 80046de:	4326      	orrs	r6, r4
 80046e0:	d1df      	bne.n	80046a2 <__gedf2+0x46>
 80046e2:	e7e0      	b.n	80046a6 <__gedf2+0x4a>
 80046e4:	2000      	movs	r0, #0
 80046e6:	2c00      	cmp	r4, #0
 80046e8:	d0e1      	beq.n	80046ae <__gedf2+0x52>
 80046ea:	e7dc      	b.n	80046a6 <__gedf2+0x4a>
 80046ec:	429a      	cmp	r2, r3
 80046ee:	dc0a      	bgt.n	8004706 <__gedf2+0xaa>
 80046f0:	dbe8      	blt.n	80046c4 <__gedf2+0x68>
 80046f2:	454f      	cmp	r7, r9
 80046f4:	d8d7      	bhi.n	80046a6 <__gedf2+0x4a>
 80046f6:	d00e      	beq.n	8004716 <__gedf2+0xba>
 80046f8:	2000      	movs	r0, #0
 80046fa:	454f      	cmp	r7, r9
 80046fc:	d2d7      	bcs.n	80046ae <__gedf2+0x52>
 80046fe:	2900      	cmp	r1, #0
 8004700:	d0e2      	beq.n	80046c8 <__gedf2+0x6c>
 8004702:	0008      	movs	r0, r1
 8004704:	e7d3      	b.n	80046ae <__gedf2+0x52>
 8004706:	4243      	negs	r3, r0
 8004708:	4158      	adcs	r0, r3
 800470a:	0040      	lsls	r0, r0, #1
 800470c:	3801      	subs	r0, #1
 800470e:	e7ce      	b.n	80046ae <__gedf2+0x52>
 8004710:	2002      	movs	r0, #2
 8004712:	4240      	negs	r0, r0
 8004714:	e7cb      	b.n	80046ae <__gedf2+0x52>
 8004716:	45c4      	cmp	ip, r8
 8004718:	d8c5      	bhi.n	80046a6 <__gedf2+0x4a>
 800471a:	2000      	movs	r0, #0
 800471c:	45c4      	cmp	ip, r8
 800471e:	d2c6      	bcs.n	80046ae <__gedf2+0x52>
 8004720:	e7ed      	b.n	80046fe <__gedf2+0xa2>
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	000007ff 	.word	0x000007ff

08004728 <__ledf2>:
 8004728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800472a:	4647      	mov	r7, r8
 800472c:	46ce      	mov	lr, r9
 800472e:	0004      	movs	r4, r0
 8004730:	0018      	movs	r0, r3
 8004732:	0016      	movs	r6, r2
 8004734:	031b      	lsls	r3, r3, #12
 8004736:	0b1b      	lsrs	r3, r3, #12
 8004738:	4d2c      	ldr	r5, [pc, #176]	; (80047ec <__ledf2+0xc4>)
 800473a:	004a      	lsls	r2, r1, #1
 800473c:	4699      	mov	r9, r3
 800473e:	b580      	push	{r7, lr}
 8004740:	0043      	lsls	r3, r0, #1
 8004742:	030f      	lsls	r7, r1, #12
 8004744:	46a4      	mov	ip, r4
 8004746:	46b0      	mov	r8, r6
 8004748:	0b3f      	lsrs	r7, r7, #12
 800474a:	0d52      	lsrs	r2, r2, #21
 800474c:	0fc9      	lsrs	r1, r1, #31
 800474e:	0d5b      	lsrs	r3, r3, #21
 8004750:	0fc0      	lsrs	r0, r0, #31
 8004752:	42aa      	cmp	r2, r5
 8004754:	d00d      	beq.n	8004772 <__ledf2+0x4a>
 8004756:	42ab      	cmp	r3, r5
 8004758:	d010      	beq.n	800477c <__ledf2+0x54>
 800475a:	2a00      	cmp	r2, #0
 800475c:	d127      	bne.n	80047ae <__ledf2+0x86>
 800475e:	433c      	orrs	r4, r7
 8004760:	2b00      	cmp	r3, #0
 8004762:	d111      	bne.n	8004788 <__ledf2+0x60>
 8004764:	464d      	mov	r5, r9
 8004766:	432e      	orrs	r6, r5
 8004768:	d10e      	bne.n	8004788 <__ledf2+0x60>
 800476a:	2000      	movs	r0, #0
 800476c:	2c00      	cmp	r4, #0
 800476e:	d015      	beq.n	800479c <__ledf2+0x74>
 8004770:	e00e      	b.n	8004790 <__ledf2+0x68>
 8004772:	003d      	movs	r5, r7
 8004774:	4325      	orrs	r5, r4
 8004776:	d110      	bne.n	800479a <__ledf2+0x72>
 8004778:	4293      	cmp	r3, r2
 800477a:	d118      	bne.n	80047ae <__ledf2+0x86>
 800477c:	464d      	mov	r5, r9
 800477e:	432e      	orrs	r6, r5
 8004780:	d10b      	bne.n	800479a <__ledf2+0x72>
 8004782:	2a00      	cmp	r2, #0
 8004784:	d102      	bne.n	800478c <__ledf2+0x64>
 8004786:	433c      	orrs	r4, r7
 8004788:	2c00      	cmp	r4, #0
 800478a:	d00b      	beq.n	80047a4 <__ledf2+0x7c>
 800478c:	4281      	cmp	r1, r0
 800478e:	d014      	beq.n	80047ba <__ledf2+0x92>
 8004790:	2002      	movs	r0, #2
 8004792:	3901      	subs	r1, #1
 8004794:	4008      	ands	r0, r1
 8004796:	3801      	subs	r0, #1
 8004798:	e000      	b.n	800479c <__ledf2+0x74>
 800479a:	2002      	movs	r0, #2
 800479c:	bcc0      	pop	{r6, r7}
 800479e:	46b9      	mov	r9, r7
 80047a0:	46b0      	mov	r8, r6
 80047a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d1f9      	bne.n	800479c <__ledf2+0x74>
 80047a8:	2001      	movs	r0, #1
 80047aa:	4240      	negs	r0, r0
 80047ac:	e7f6      	b.n	800479c <__ledf2+0x74>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ec      	bne.n	800478c <__ledf2+0x64>
 80047b2:	464c      	mov	r4, r9
 80047b4:	4326      	orrs	r6, r4
 80047b6:	d1e9      	bne.n	800478c <__ledf2+0x64>
 80047b8:	e7ea      	b.n	8004790 <__ledf2+0x68>
 80047ba:	429a      	cmp	r2, r3
 80047bc:	dd04      	ble.n	80047c8 <__ledf2+0xa0>
 80047be:	4243      	negs	r3, r0
 80047c0:	4158      	adcs	r0, r3
 80047c2:	0040      	lsls	r0, r0, #1
 80047c4:	3801      	subs	r0, #1
 80047c6:	e7e9      	b.n	800479c <__ledf2+0x74>
 80047c8:	429a      	cmp	r2, r3
 80047ca:	dbeb      	blt.n	80047a4 <__ledf2+0x7c>
 80047cc:	454f      	cmp	r7, r9
 80047ce:	d8df      	bhi.n	8004790 <__ledf2+0x68>
 80047d0:	d006      	beq.n	80047e0 <__ledf2+0xb8>
 80047d2:	2000      	movs	r0, #0
 80047d4:	454f      	cmp	r7, r9
 80047d6:	d2e1      	bcs.n	800479c <__ledf2+0x74>
 80047d8:	2900      	cmp	r1, #0
 80047da:	d0e5      	beq.n	80047a8 <__ledf2+0x80>
 80047dc:	0008      	movs	r0, r1
 80047de:	e7dd      	b.n	800479c <__ledf2+0x74>
 80047e0:	45c4      	cmp	ip, r8
 80047e2:	d8d5      	bhi.n	8004790 <__ledf2+0x68>
 80047e4:	2000      	movs	r0, #0
 80047e6:	45c4      	cmp	ip, r8
 80047e8:	d2d8      	bcs.n	800479c <__ledf2+0x74>
 80047ea:	e7f5      	b.n	80047d8 <__ledf2+0xb0>
 80047ec:	000007ff 	.word	0x000007ff

080047f0 <__aeabi_dmul>:
 80047f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f2:	4657      	mov	r7, sl
 80047f4:	464e      	mov	r6, r9
 80047f6:	4645      	mov	r5, r8
 80047f8:	46de      	mov	lr, fp
 80047fa:	b5e0      	push	{r5, r6, r7, lr}
 80047fc:	4698      	mov	r8, r3
 80047fe:	030c      	lsls	r4, r1, #12
 8004800:	004b      	lsls	r3, r1, #1
 8004802:	0006      	movs	r6, r0
 8004804:	4692      	mov	sl, r2
 8004806:	b087      	sub	sp, #28
 8004808:	0b24      	lsrs	r4, r4, #12
 800480a:	0d5b      	lsrs	r3, r3, #21
 800480c:	0fcf      	lsrs	r7, r1, #31
 800480e:	2b00      	cmp	r3, #0
 8004810:	d100      	bne.n	8004814 <__aeabi_dmul+0x24>
 8004812:	e15c      	b.n	8004ace <__aeabi_dmul+0x2de>
 8004814:	4ad9      	ldr	r2, [pc, #868]	; (8004b7c <__aeabi_dmul+0x38c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d100      	bne.n	800481c <__aeabi_dmul+0x2c>
 800481a:	e175      	b.n	8004b08 <__aeabi_dmul+0x318>
 800481c:	0f42      	lsrs	r2, r0, #29
 800481e:	00e4      	lsls	r4, r4, #3
 8004820:	4314      	orrs	r4, r2
 8004822:	2280      	movs	r2, #128	; 0x80
 8004824:	0412      	lsls	r2, r2, #16
 8004826:	4314      	orrs	r4, r2
 8004828:	4ad5      	ldr	r2, [pc, #852]	; (8004b80 <__aeabi_dmul+0x390>)
 800482a:	00c5      	lsls	r5, r0, #3
 800482c:	4694      	mov	ip, r2
 800482e:	4463      	add	r3, ip
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	2300      	movs	r3, #0
 8004834:	4699      	mov	r9, r3
 8004836:	469b      	mov	fp, r3
 8004838:	4643      	mov	r3, r8
 800483a:	4642      	mov	r2, r8
 800483c:	031e      	lsls	r6, r3, #12
 800483e:	0fd2      	lsrs	r2, r2, #31
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	4650      	mov	r0, sl
 8004844:	4690      	mov	r8, r2
 8004846:	0b36      	lsrs	r6, r6, #12
 8004848:	0d5b      	lsrs	r3, r3, #21
 800484a:	d100      	bne.n	800484e <__aeabi_dmul+0x5e>
 800484c:	e120      	b.n	8004a90 <__aeabi_dmul+0x2a0>
 800484e:	4acb      	ldr	r2, [pc, #812]	; (8004b7c <__aeabi_dmul+0x38c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d100      	bne.n	8004856 <__aeabi_dmul+0x66>
 8004854:	e162      	b.n	8004b1c <__aeabi_dmul+0x32c>
 8004856:	49ca      	ldr	r1, [pc, #808]	; (8004b80 <__aeabi_dmul+0x390>)
 8004858:	0f42      	lsrs	r2, r0, #29
 800485a:	468c      	mov	ip, r1
 800485c:	9900      	ldr	r1, [sp, #0]
 800485e:	4463      	add	r3, ip
 8004860:	00f6      	lsls	r6, r6, #3
 8004862:	468c      	mov	ip, r1
 8004864:	4316      	orrs	r6, r2
 8004866:	2280      	movs	r2, #128	; 0x80
 8004868:	449c      	add	ip, r3
 800486a:	0412      	lsls	r2, r2, #16
 800486c:	4663      	mov	r3, ip
 800486e:	4316      	orrs	r6, r2
 8004870:	00c2      	lsls	r2, r0, #3
 8004872:	2000      	movs	r0, #0
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	9900      	ldr	r1, [sp, #0]
 8004878:	4643      	mov	r3, r8
 800487a:	3101      	adds	r1, #1
 800487c:	468c      	mov	ip, r1
 800487e:	4649      	mov	r1, r9
 8004880:	407b      	eors	r3, r7
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	290f      	cmp	r1, #15
 8004886:	d826      	bhi.n	80048d6 <__aeabi_dmul+0xe6>
 8004888:	4bbe      	ldr	r3, [pc, #760]	; (8004b84 <__aeabi_dmul+0x394>)
 800488a:	0089      	lsls	r1, r1, #2
 800488c:	5859      	ldr	r1, [r3, r1]
 800488e:	468f      	mov	pc, r1
 8004890:	4643      	mov	r3, r8
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	0034      	movs	r4, r6
 8004896:	0015      	movs	r5, r2
 8004898:	4683      	mov	fp, r0
 800489a:	465b      	mov	r3, fp
 800489c:	2b02      	cmp	r3, #2
 800489e:	d016      	beq.n	80048ce <__aeabi_dmul+0xde>
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d100      	bne.n	80048a6 <__aeabi_dmul+0xb6>
 80048a4:	e203      	b.n	8004cae <__aeabi_dmul+0x4be>
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d000      	beq.n	80048ac <__aeabi_dmul+0xbc>
 80048aa:	e0cd      	b.n	8004a48 <__aeabi_dmul+0x258>
 80048ac:	2200      	movs	r2, #0
 80048ae:	2400      	movs	r4, #0
 80048b0:	2500      	movs	r5, #0
 80048b2:	9b01      	ldr	r3, [sp, #4]
 80048b4:	0512      	lsls	r2, r2, #20
 80048b6:	4322      	orrs	r2, r4
 80048b8:	07db      	lsls	r3, r3, #31
 80048ba:	431a      	orrs	r2, r3
 80048bc:	0028      	movs	r0, r5
 80048be:	0011      	movs	r1, r2
 80048c0:	b007      	add	sp, #28
 80048c2:	bcf0      	pop	{r4, r5, r6, r7}
 80048c4:	46bb      	mov	fp, r7
 80048c6:	46b2      	mov	sl, r6
 80048c8:	46a9      	mov	r9, r5
 80048ca:	46a0      	mov	r8, r4
 80048cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ce:	2400      	movs	r4, #0
 80048d0:	2500      	movs	r5, #0
 80048d2:	4aaa      	ldr	r2, [pc, #680]	; (8004b7c <__aeabi_dmul+0x38c>)
 80048d4:	e7ed      	b.n	80048b2 <__aeabi_dmul+0xc2>
 80048d6:	0c28      	lsrs	r0, r5, #16
 80048d8:	042d      	lsls	r5, r5, #16
 80048da:	0c2d      	lsrs	r5, r5, #16
 80048dc:	002b      	movs	r3, r5
 80048de:	0c11      	lsrs	r1, r2, #16
 80048e0:	0412      	lsls	r2, r2, #16
 80048e2:	0c12      	lsrs	r2, r2, #16
 80048e4:	4353      	muls	r3, r2
 80048e6:	4698      	mov	r8, r3
 80048e8:	0013      	movs	r3, r2
 80048ea:	002f      	movs	r7, r5
 80048ec:	4343      	muls	r3, r0
 80048ee:	4699      	mov	r9, r3
 80048f0:	434f      	muls	r7, r1
 80048f2:	444f      	add	r7, r9
 80048f4:	46bb      	mov	fp, r7
 80048f6:	4647      	mov	r7, r8
 80048f8:	000b      	movs	r3, r1
 80048fa:	0c3f      	lsrs	r7, r7, #16
 80048fc:	46ba      	mov	sl, r7
 80048fe:	4343      	muls	r3, r0
 8004900:	44da      	add	sl, fp
 8004902:	9302      	str	r3, [sp, #8]
 8004904:	45d1      	cmp	r9, sl
 8004906:	d904      	bls.n	8004912 <__aeabi_dmul+0x122>
 8004908:	2780      	movs	r7, #128	; 0x80
 800490a:	027f      	lsls	r7, r7, #9
 800490c:	46b9      	mov	r9, r7
 800490e:	444b      	add	r3, r9
 8004910:	9302      	str	r3, [sp, #8]
 8004912:	4653      	mov	r3, sl
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	469b      	mov	fp, r3
 8004918:	4653      	mov	r3, sl
 800491a:	041f      	lsls	r7, r3, #16
 800491c:	4643      	mov	r3, r8
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	4698      	mov	r8, r3
 8004924:	003b      	movs	r3, r7
 8004926:	4443      	add	r3, r8
 8004928:	9304      	str	r3, [sp, #16]
 800492a:	0c33      	lsrs	r3, r6, #16
 800492c:	0436      	lsls	r6, r6, #16
 800492e:	0c36      	lsrs	r6, r6, #16
 8004930:	4698      	mov	r8, r3
 8004932:	0033      	movs	r3, r6
 8004934:	4343      	muls	r3, r0
 8004936:	4699      	mov	r9, r3
 8004938:	4643      	mov	r3, r8
 800493a:	4343      	muls	r3, r0
 800493c:	002f      	movs	r7, r5
 800493e:	469a      	mov	sl, r3
 8004940:	4643      	mov	r3, r8
 8004942:	4377      	muls	r7, r6
 8004944:	435d      	muls	r5, r3
 8004946:	0c38      	lsrs	r0, r7, #16
 8004948:	444d      	add	r5, r9
 800494a:	1945      	adds	r5, r0, r5
 800494c:	45a9      	cmp	r9, r5
 800494e:	d903      	bls.n	8004958 <__aeabi_dmul+0x168>
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	025b      	lsls	r3, r3, #9
 8004954:	4699      	mov	r9, r3
 8004956:	44ca      	add	sl, r9
 8004958:	043f      	lsls	r7, r7, #16
 800495a:	0c28      	lsrs	r0, r5, #16
 800495c:	0c3f      	lsrs	r7, r7, #16
 800495e:	042d      	lsls	r5, r5, #16
 8004960:	19ed      	adds	r5, r5, r7
 8004962:	0c27      	lsrs	r7, r4, #16
 8004964:	0424      	lsls	r4, r4, #16
 8004966:	0c24      	lsrs	r4, r4, #16
 8004968:	0003      	movs	r3, r0
 800496a:	0020      	movs	r0, r4
 800496c:	4350      	muls	r0, r2
 800496e:	437a      	muls	r2, r7
 8004970:	4691      	mov	r9, r2
 8004972:	003a      	movs	r2, r7
 8004974:	4453      	add	r3, sl
 8004976:	9305      	str	r3, [sp, #20]
 8004978:	0c03      	lsrs	r3, r0, #16
 800497a:	469a      	mov	sl, r3
 800497c:	434a      	muls	r2, r1
 800497e:	4361      	muls	r1, r4
 8004980:	4449      	add	r1, r9
 8004982:	4451      	add	r1, sl
 8004984:	44ab      	add	fp, r5
 8004986:	4589      	cmp	r9, r1
 8004988:	d903      	bls.n	8004992 <__aeabi_dmul+0x1a2>
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	025b      	lsls	r3, r3, #9
 800498e:	4699      	mov	r9, r3
 8004990:	444a      	add	r2, r9
 8004992:	0400      	lsls	r0, r0, #16
 8004994:	0c0b      	lsrs	r3, r1, #16
 8004996:	0c00      	lsrs	r0, r0, #16
 8004998:	0409      	lsls	r1, r1, #16
 800499a:	1809      	adds	r1, r1, r0
 800499c:	0020      	movs	r0, r4
 800499e:	4699      	mov	r9, r3
 80049a0:	4643      	mov	r3, r8
 80049a2:	4370      	muls	r0, r6
 80049a4:	435c      	muls	r4, r3
 80049a6:	437e      	muls	r6, r7
 80049a8:	435f      	muls	r7, r3
 80049aa:	0c03      	lsrs	r3, r0, #16
 80049ac:	4698      	mov	r8, r3
 80049ae:	19a4      	adds	r4, r4, r6
 80049b0:	4444      	add	r4, r8
 80049b2:	444a      	add	r2, r9
 80049b4:	9703      	str	r7, [sp, #12]
 80049b6:	42a6      	cmp	r6, r4
 80049b8:	d904      	bls.n	80049c4 <__aeabi_dmul+0x1d4>
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	025b      	lsls	r3, r3, #9
 80049be:	4698      	mov	r8, r3
 80049c0:	4447      	add	r7, r8
 80049c2:	9703      	str	r7, [sp, #12]
 80049c4:	0423      	lsls	r3, r4, #16
 80049c6:	9e02      	ldr	r6, [sp, #8]
 80049c8:	469a      	mov	sl, r3
 80049ca:	9b05      	ldr	r3, [sp, #20]
 80049cc:	445e      	add	r6, fp
 80049ce:	4698      	mov	r8, r3
 80049d0:	42ae      	cmp	r6, r5
 80049d2:	41ad      	sbcs	r5, r5
 80049d4:	1876      	adds	r6, r6, r1
 80049d6:	428e      	cmp	r6, r1
 80049d8:	4189      	sbcs	r1, r1
 80049da:	0400      	lsls	r0, r0, #16
 80049dc:	0c00      	lsrs	r0, r0, #16
 80049de:	4450      	add	r0, sl
 80049e0:	4440      	add	r0, r8
 80049e2:	426d      	negs	r5, r5
 80049e4:	1947      	adds	r7, r0, r5
 80049e6:	46b8      	mov	r8, r7
 80049e8:	4693      	mov	fp, r2
 80049ea:	4249      	negs	r1, r1
 80049ec:	4689      	mov	r9, r1
 80049ee:	44c3      	add	fp, r8
 80049f0:	44d9      	add	r9, fp
 80049f2:	4298      	cmp	r0, r3
 80049f4:	4180      	sbcs	r0, r0
 80049f6:	45a8      	cmp	r8, r5
 80049f8:	41ad      	sbcs	r5, r5
 80049fa:	4593      	cmp	fp, r2
 80049fc:	4192      	sbcs	r2, r2
 80049fe:	4589      	cmp	r9, r1
 8004a00:	4189      	sbcs	r1, r1
 8004a02:	426d      	negs	r5, r5
 8004a04:	4240      	negs	r0, r0
 8004a06:	4328      	orrs	r0, r5
 8004a08:	0c24      	lsrs	r4, r4, #16
 8004a0a:	4252      	negs	r2, r2
 8004a0c:	4249      	negs	r1, r1
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	9b03      	ldr	r3, [sp, #12]
 8004a12:	1900      	adds	r0, r0, r4
 8004a14:	1880      	adds	r0, r0, r2
 8004a16:	18c7      	adds	r7, r0, r3
 8004a18:	464b      	mov	r3, r9
 8004a1a:	0ddc      	lsrs	r4, r3, #23
 8004a1c:	9b04      	ldr	r3, [sp, #16]
 8004a1e:	0275      	lsls	r5, r6, #9
 8004a20:	431d      	orrs	r5, r3
 8004a22:	1e6a      	subs	r2, r5, #1
 8004a24:	4195      	sbcs	r5, r2
 8004a26:	464b      	mov	r3, r9
 8004a28:	0df6      	lsrs	r6, r6, #23
 8004a2a:	027f      	lsls	r7, r7, #9
 8004a2c:	4335      	orrs	r5, r6
 8004a2e:	025a      	lsls	r2, r3, #9
 8004a30:	433c      	orrs	r4, r7
 8004a32:	4315      	orrs	r5, r2
 8004a34:	01fb      	lsls	r3, r7, #7
 8004a36:	d400      	bmi.n	8004a3a <__aeabi_dmul+0x24a>
 8004a38:	e11c      	b.n	8004c74 <__aeabi_dmul+0x484>
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	086a      	lsrs	r2, r5, #1
 8004a3e:	400d      	ands	r5, r1
 8004a40:	4315      	orrs	r5, r2
 8004a42:	07e2      	lsls	r2, r4, #31
 8004a44:	4315      	orrs	r5, r2
 8004a46:	0864      	lsrs	r4, r4, #1
 8004a48:	494f      	ldr	r1, [pc, #316]	; (8004b88 <__aeabi_dmul+0x398>)
 8004a4a:	4461      	add	r1, ip
 8004a4c:	2900      	cmp	r1, #0
 8004a4e:	dc00      	bgt.n	8004a52 <__aeabi_dmul+0x262>
 8004a50:	e0b0      	b.n	8004bb4 <__aeabi_dmul+0x3c4>
 8004a52:	076b      	lsls	r3, r5, #29
 8004a54:	d009      	beq.n	8004a6a <__aeabi_dmul+0x27a>
 8004a56:	220f      	movs	r2, #15
 8004a58:	402a      	ands	r2, r5
 8004a5a:	2a04      	cmp	r2, #4
 8004a5c:	d005      	beq.n	8004a6a <__aeabi_dmul+0x27a>
 8004a5e:	1d2a      	adds	r2, r5, #4
 8004a60:	42aa      	cmp	r2, r5
 8004a62:	41ad      	sbcs	r5, r5
 8004a64:	426d      	negs	r5, r5
 8004a66:	1964      	adds	r4, r4, r5
 8004a68:	0015      	movs	r5, r2
 8004a6a:	01e3      	lsls	r3, r4, #7
 8004a6c:	d504      	bpl.n	8004a78 <__aeabi_dmul+0x288>
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	4a46      	ldr	r2, [pc, #280]	; (8004b8c <__aeabi_dmul+0x39c>)
 8004a72:	00c9      	lsls	r1, r1, #3
 8004a74:	4014      	ands	r4, r2
 8004a76:	4461      	add	r1, ip
 8004a78:	4a45      	ldr	r2, [pc, #276]	; (8004b90 <__aeabi_dmul+0x3a0>)
 8004a7a:	4291      	cmp	r1, r2
 8004a7c:	dd00      	ble.n	8004a80 <__aeabi_dmul+0x290>
 8004a7e:	e726      	b.n	80048ce <__aeabi_dmul+0xde>
 8004a80:	0762      	lsls	r2, r4, #29
 8004a82:	08ed      	lsrs	r5, r5, #3
 8004a84:	0264      	lsls	r4, r4, #9
 8004a86:	0549      	lsls	r1, r1, #21
 8004a88:	4315      	orrs	r5, r2
 8004a8a:	0b24      	lsrs	r4, r4, #12
 8004a8c:	0d4a      	lsrs	r2, r1, #21
 8004a8e:	e710      	b.n	80048b2 <__aeabi_dmul+0xc2>
 8004a90:	4652      	mov	r2, sl
 8004a92:	4332      	orrs	r2, r6
 8004a94:	d100      	bne.n	8004a98 <__aeabi_dmul+0x2a8>
 8004a96:	e07f      	b.n	8004b98 <__aeabi_dmul+0x3a8>
 8004a98:	2e00      	cmp	r6, #0
 8004a9a:	d100      	bne.n	8004a9e <__aeabi_dmul+0x2ae>
 8004a9c:	e0dc      	b.n	8004c58 <__aeabi_dmul+0x468>
 8004a9e:	0030      	movs	r0, r6
 8004aa0:	f000 fe58 	bl	8005754 <__clzsi2>
 8004aa4:	0002      	movs	r2, r0
 8004aa6:	3a0b      	subs	r2, #11
 8004aa8:	231d      	movs	r3, #29
 8004aaa:	0001      	movs	r1, r0
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	4652      	mov	r2, sl
 8004ab0:	3908      	subs	r1, #8
 8004ab2:	40da      	lsrs	r2, r3
 8004ab4:	408e      	lsls	r6, r1
 8004ab6:	4316      	orrs	r6, r2
 8004ab8:	4652      	mov	r2, sl
 8004aba:	408a      	lsls	r2, r1
 8004abc:	9b00      	ldr	r3, [sp, #0]
 8004abe:	4935      	ldr	r1, [pc, #212]	; (8004b94 <__aeabi_dmul+0x3a4>)
 8004ac0:	1a18      	subs	r0, r3, r0
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	468c      	mov	ip, r1
 8004ac6:	4463      	add	r3, ip
 8004ac8:	2000      	movs	r0, #0
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	e6d3      	b.n	8004876 <__aeabi_dmul+0x86>
 8004ace:	0025      	movs	r5, r4
 8004ad0:	4305      	orrs	r5, r0
 8004ad2:	d04a      	beq.n	8004b6a <__aeabi_dmul+0x37a>
 8004ad4:	2c00      	cmp	r4, #0
 8004ad6:	d100      	bne.n	8004ada <__aeabi_dmul+0x2ea>
 8004ad8:	e0b0      	b.n	8004c3c <__aeabi_dmul+0x44c>
 8004ada:	0020      	movs	r0, r4
 8004adc:	f000 fe3a 	bl	8005754 <__clzsi2>
 8004ae0:	0001      	movs	r1, r0
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	390b      	subs	r1, #11
 8004ae6:	231d      	movs	r3, #29
 8004ae8:	0010      	movs	r0, r2
 8004aea:	1a5b      	subs	r3, r3, r1
 8004aec:	0031      	movs	r1, r6
 8004aee:	0035      	movs	r5, r6
 8004af0:	3808      	subs	r0, #8
 8004af2:	4084      	lsls	r4, r0
 8004af4:	40d9      	lsrs	r1, r3
 8004af6:	4085      	lsls	r5, r0
 8004af8:	430c      	orrs	r4, r1
 8004afa:	4826      	ldr	r0, [pc, #152]	; (8004b94 <__aeabi_dmul+0x3a4>)
 8004afc:	1a83      	subs	r3, r0, r2
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	2300      	movs	r3, #0
 8004b02:	4699      	mov	r9, r3
 8004b04:	469b      	mov	fp, r3
 8004b06:	e697      	b.n	8004838 <__aeabi_dmul+0x48>
 8004b08:	0005      	movs	r5, r0
 8004b0a:	4325      	orrs	r5, r4
 8004b0c:	d126      	bne.n	8004b5c <__aeabi_dmul+0x36c>
 8004b0e:	2208      	movs	r2, #8
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	2302      	movs	r3, #2
 8004b14:	2400      	movs	r4, #0
 8004b16:	4691      	mov	r9, r2
 8004b18:	469b      	mov	fp, r3
 8004b1a:	e68d      	b.n	8004838 <__aeabi_dmul+0x48>
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	9b00      	ldr	r3, [sp, #0]
 8004b20:	4332      	orrs	r2, r6
 8004b22:	d110      	bne.n	8004b46 <__aeabi_dmul+0x356>
 8004b24:	4915      	ldr	r1, [pc, #84]	; (8004b7c <__aeabi_dmul+0x38c>)
 8004b26:	2600      	movs	r6, #0
 8004b28:	468c      	mov	ip, r1
 8004b2a:	4463      	add	r3, ip
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	2302      	movs	r3, #2
 8004b32:	4319      	orrs	r1, r3
 8004b34:	4689      	mov	r9, r1
 8004b36:	2002      	movs	r0, #2
 8004b38:	e69d      	b.n	8004876 <__aeabi_dmul+0x86>
 8004b3a:	465b      	mov	r3, fp
 8004b3c:	9701      	str	r7, [sp, #4]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d000      	beq.n	8004b44 <__aeabi_dmul+0x354>
 8004b42:	e6ad      	b.n	80048a0 <__aeabi_dmul+0xb0>
 8004b44:	e6c3      	b.n	80048ce <__aeabi_dmul+0xde>
 8004b46:	4a0d      	ldr	r2, [pc, #52]	; (8004b7c <__aeabi_dmul+0x38c>)
 8004b48:	2003      	movs	r0, #3
 8004b4a:	4694      	mov	ip, r2
 8004b4c:	4463      	add	r3, ip
 8004b4e:	464a      	mov	r2, r9
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	2303      	movs	r3, #3
 8004b54:	431a      	orrs	r2, r3
 8004b56:	4691      	mov	r9, r2
 8004b58:	4652      	mov	r2, sl
 8004b5a:	e68c      	b.n	8004876 <__aeabi_dmul+0x86>
 8004b5c:	220c      	movs	r2, #12
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	2303      	movs	r3, #3
 8004b62:	0005      	movs	r5, r0
 8004b64:	4691      	mov	r9, r2
 8004b66:	469b      	mov	fp, r3
 8004b68:	e666      	b.n	8004838 <__aeabi_dmul+0x48>
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	4699      	mov	r9, r3
 8004b6e:	2300      	movs	r3, #0
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	2400      	movs	r4, #0
 8004b76:	469b      	mov	fp, r3
 8004b78:	e65e      	b.n	8004838 <__aeabi_dmul+0x48>
 8004b7a:	46c0      	nop			; (mov r8, r8)
 8004b7c:	000007ff 	.word	0x000007ff
 8004b80:	fffffc01 	.word	0xfffffc01
 8004b84:	0800d26c 	.word	0x0800d26c
 8004b88:	000003ff 	.word	0x000003ff
 8004b8c:	feffffff 	.word	0xfeffffff
 8004b90:	000007fe 	.word	0x000007fe
 8004b94:	fffffc0d 	.word	0xfffffc0d
 8004b98:	4649      	mov	r1, r9
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4319      	orrs	r1, r3
 8004b9e:	4689      	mov	r9, r1
 8004ba0:	2600      	movs	r6, #0
 8004ba2:	2001      	movs	r0, #1
 8004ba4:	e667      	b.n	8004876 <__aeabi_dmul+0x86>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2480      	movs	r4, #128	; 0x80
 8004baa:	2500      	movs	r5, #0
 8004bac:	4a43      	ldr	r2, [pc, #268]	; (8004cbc <__aeabi_dmul+0x4cc>)
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	0324      	lsls	r4, r4, #12
 8004bb2:	e67e      	b.n	80048b2 <__aeabi_dmul+0xc2>
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	1a40      	subs	r0, r0, r1
 8004bb8:	2838      	cmp	r0, #56	; 0x38
 8004bba:	dd00      	ble.n	8004bbe <__aeabi_dmul+0x3ce>
 8004bbc:	e676      	b.n	80048ac <__aeabi_dmul+0xbc>
 8004bbe:	281f      	cmp	r0, #31
 8004bc0:	dd5b      	ble.n	8004c7a <__aeabi_dmul+0x48a>
 8004bc2:	221f      	movs	r2, #31
 8004bc4:	0023      	movs	r3, r4
 8004bc6:	4252      	negs	r2, r2
 8004bc8:	1a51      	subs	r1, r2, r1
 8004bca:	40cb      	lsrs	r3, r1
 8004bcc:	0019      	movs	r1, r3
 8004bce:	2820      	cmp	r0, #32
 8004bd0:	d003      	beq.n	8004bda <__aeabi_dmul+0x3ea>
 8004bd2:	4a3b      	ldr	r2, [pc, #236]	; (8004cc0 <__aeabi_dmul+0x4d0>)
 8004bd4:	4462      	add	r2, ip
 8004bd6:	4094      	lsls	r4, r2
 8004bd8:	4325      	orrs	r5, r4
 8004bda:	1e6a      	subs	r2, r5, #1
 8004bdc:	4195      	sbcs	r5, r2
 8004bde:	002a      	movs	r2, r5
 8004be0:	430a      	orrs	r2, r1
 8004be2:	2107      	movs	r1, #7
 8004be4:	000d      	movs	r5, r1
 8004be6:	2400      	movs	r4, #0
 8004be8:	4015      	ands	r5, r2
 8004bea:	4211      	tst	r1, r2
 8004bec:	d05b      	beq.n	8004ca6 <__aeabi_dmul+0x4b6>
 8004bee:	210f      	movs	r1, #15
 8004bf0:	2400      	movs	r4, #0
 8004bf2:	4011      	ands	r1, r2
 8004bf4:	2904      	cmp	r1, #4
 8004bf6:	d053      	beq.n	8004ca0 <__aeabi_dmul+0x4b0>
 8004bf8:	1d11      	adds	r1, r2, #4
 8004bfa:	4291      	cmp	r1, r2
 8004bfc:	4192      	sbcs	r2, r2
 8004bfe:	4252      	negs	r2, r2
 8004c00:	18a4      	adds	r4, r4, r2
 8004c02:	000a      	movs	r2, r1
 8004c04:	0223      	lsls	r3, r4, #8
 8004c06:	d54b      	bpl.n	8004ca0 <__aeabi_dmul+0x4b0>
 8004c08:	2201      	movs	r2, #1
 8004c0a:	2400      	movs	r4, #0
 8004c0c:	2500      	movs	r5, #0
 8004c0e:	e650      	b.n	80048b2 <__aeabi_dmul+0xc2>
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	031b      	lsls	r3, r3, #12
 8004c14:	421c      	tst	r4, r3
 8004c16:	d009      	beq.n	8004c2c <__aeabi_dmul+0x43c>
 8004c18:	421e      	tst	r6, r3
 8004c1a:	d107      	bne.n	8004c2c <__aeabi_dmul+0x43c>
 8004c1c:	4333      	orrs	r3, r6
 8004c1e:	031c      	lsls	r4, r3, #12
 8004c20:	4643      	mov	r3, r8
 8004c22:	0015      	movs	r5, r2
 8004c24:	0b24      	lsrs	r4, r4, #12
 8004c26:	4a25      	ldr	r2, [pc, #148]	; (8004cbc <__aeabi_dmul+0x4cc>)
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	e642      	b.n	80048b2 <__aeabi_dmul+0xc2>
 8004c2c:	2280      	movs	r2, #128	; 0x80
 8004c2e:	0312      	lsls	r2, r2, #12
 8004c30:	4314      	orrs	r4, r2
 8004c32:	0324      	lsls	r4, r4, #12
 8004c34:	4a21      	ldr	r2, [pc, #132]	; (8004cbc <__aeabi_dmul+0x4cc>)
 8004c36:	0b24      	lsrs	r4, r4, #12
 8004c38:	9701      	str	r7, [sp, #4]
 8004c3a:	e63a      	b.n	80048b2 <__aeabi_dmul+0xc2>
 8004c3c:	f000 fd8a 	bl	8005754 <__clzsi2>
 8004c40:	0001      	movs	r1, r0
 8004c42:	0002      	movs	r2, r0
 8004c44:	3115      	adds	r1, #21
 8004c46:	3220      	adds	r2, #32
 8004c48:	291c      	cmp	r1, #28
 8004c4a:	dc00      	bgt.n	8004c4e <__aeabi_dmul+0x45e>
 8004c4c:	e74b      	b.n	8004ae6 <__aeabi_dmul+0x2f6>
 8004c4e:	0034      	movs	r4, r6
 8004c50:	3808      	subs	r0, #8
 8004c52:	2500      	movs	r5, #0
 8004c54:	4084      	lsls	r4, r0
 8004c56:	e750      	b.n	8004afa <__aeabi_dmul+0x30a>
 8004c58:	f000 fd7c 	bl	8005754 <__clzsi2>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	001a      	movs	r2, r3
 8004c60:	3215      	adds	r2, #21
 8004c62:	3020      	adds	r0, #32
 8004c64:	2a1c      	cmp	r2, #28
 8004c66:	dc00      	bgt.n	8004c6a <__aeabi_dmul+0x47a>
 8004c68:	e71e      	b.n	8004aa8 <__aeabi_dmul+0x2b8>
 8004c6a:	4656      	mov	r6, sl
 8004c6c:	3b08      	subs	r3, #8
 8004c6e:	2200      	movs	r2, #0
 8004c70:	409e      	lsls	r6, r3
 8004c72:	e723      	b.n	8004abc <__aeabi_dmul+0x2cc>
 8004c74:	9b00      	ldr	r3, [sp, #0]
 8004c76:	469c      	mov	ip, r3
 8004c78:	e6e6      	b.n	8004a48 <__aeabi_dmul+0x258>
 8004c7a:	4912      	ldr	r1, [pc, #72]	; (8004cc4 <__aeabi_dmul+0x4d4>)
 8004c7c:	0022      	movs	r2, r4
 8004c7e:	4461      	add	r1, ip
 8004c80:	002e      	movs	r6, r5
 8004c82:	408d      	lsls	r5, r1
 8004c84:	408a      	lsls	r2, r1
 8004c86:	40c6      	lsrs	r6, r0
 8004c88:	1e69      	subs	r1, r5, #1
 8004c8a:	418d      	sbcs	r5, r1
 8004c8c:	4332      	orrs	r2, r6
 8004c8e:	432a      	orrs	r2, r5
 8004c90:	40c4      	lsrs	r4, r0
 8004c92:	0753      	lsls	r3, r2, #29
 8004c94:	d0b6      	beq.n	8004c04 <__aeabi_dmul+0x414>
 8004c96:	210f      	movs	r1, #15
 8004c98:	4011      	ands	r1, r2
 8004c9a:	2904      	cmp	r1, #4
 8004c9c:	d1ac      	bne.n	8004bf8 <__aeabi_dmul+0x408>
 8004c9e:	e7b1      	b.n	8004c04 <__aeabi_dmul+0x414>
 8004ca0:	0765      	lsls	r5, r4, #29
 8004ca2:	0264      	lsls	r4, r4, #9
 8004ca4:	0b24      	lsrs	r4, r4, #12
 8004ca6:	08d2      	lsrs	r2, r2, #3
 8004ca8:	4315      	orrs	r5, r2
 8004caa:	2200      	movs	r2, #0
 8004cac:	e601      	b.n	80048b2 <__aeabi_dmul+0xc2>
 8004cae:	2280      	movs	r2, #128	; 0x80
 8004cb0:	0312      	lsls	r2, r2, #12
 8004cb2:	4314      	orrs	r4, r2
 8004cb4:	0324      	lsls	r4, r4, #12
 8004cb6:	4a01      	ldr	r2, [pc, #4]	; (8004cbc <__aeabi_dmul+0x4cc>)
 8004cb8:	0b24      	lsrs	r4, r4, #12
 8004cba:	e5fa      	b.n	80048b2 <__aeabi_dmul+0xc2>
 8004cbc:	000007ff 	.word	0x000007ff
 8004cc0:	0000043e 	.word	0x0000043e
 8004cc4:	0000041e 	.word	0x0000041e

08004cc8 <__aeabi_dsub>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	4657      	mov	r7, sl
 8004ccc:	464e      	mov	r6, r9
 8004cce:	4645      	mov	r5, r8
 8004cd0:	46de      	mov	lr, fp
 8004cd2:	b5e0      	push	{r5, r6, r7, lr}
 8004cd4:	001e      	movs	r6, r3
 8004cd6:	0017      	movs	r7, r2
 8004cd8:	004a      	lsls	r2, r1, #1
 8004cda:	030b      	lsls	r3, r1, #12
 8004cdc:	0d52      	lsrs	r2, r2, #21
 8004cde:	0a5b      	lsrs	r3, r3, #9
 8004ce0:	4690      	mov	r8, r2
 8004ce2:	0f42      	lsrs	r2, r0, #29
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	0fcd      	lsrs	r5, r1, #31
 8004ce8:	4ccd      	ldr	r4, [pc, #820]	; (8005020 <__aeabi_dsub+0x358>)
 8004cea:	0331      	lsls	r1, r6, #12
 8004cec:	00c3      	lsls	r3, r0, #3
 8004cee:	4694      	mov	ip, r2
 8004cf0:	0070      	lsls	r0, r6, #1
 8004cf2:	0f7a      	lsrs	r2, r7, #29
 8004cf4:	0a49      	lsrs	r1, r1, #9
 8004cf6:	00ff      	lsls	r7, r7, #3
 8004cf8:	469a      	mov	sl, r3
 8004cfa:	46b9      	mov	r9, r7
 8004cfc:	0d40      	lsrs	r0, r0, #21
 8004cfe:	0ff6      	lsrs	r6, r6, #31
 8004d00:	4311      	orrs	r1, r2
 8004d02:	42a0      	cmp	r0, r4
 8004d04:	d100      	bne.n	8004d08 <__aeabi_dsub+0x40>
 8004d06:	e0b1      	b.n	8004e6c <__aeabi_dsub+0x1a4>
 8004d08:	2201      	movs	r2, #1
 8004d0a:	4056      	eors	r6, r2
 8004d0c:	46b3      	mov	fp, r6
 8004d0e:	42b5      	cmp	r5, r6
 8004d10:	d100      	bne.n	8004d14 <__aeabi_dsub+0x4c>
 8004d12:	e088      	b.n	8004e26 <__aeabi_dsub+0x15e>
 8004d14:	4642      	mov	r2, r8
 8004d16:	1a12      	subs	r2, r2, r0
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	dc00      	bgt.n	8004d1e <__aeabi_dsub+0x56>
 8004d1c:	e0ae      	b.n	8004e7c <__aeabi_dsub+0x1b4>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d100      	bne.n	8004d24 <__aeabi_dsub+0x5c>
 8004d22:	e0c1      	b.n	8004ea8 <__aeabi_dsub+0x1e0>
 8004d24:	48be      	ldr	r0, [pc, #760]	; (8005020 <__aeabi_dsub+0x358>)
 8004d26:	4580      	cmp	r8, r0
 8004d28:	d100      	bne.n	8004d2c <__aeabi_dsub+0x64>
 8004d2a:	e151      	b.n	8004fd0 <__aeabi_dsub+0x308>
 8004d2c:	2080      	movs	r0, #128	; 0x80
 8004d2e:	0400      	lsls	r0, r0, #16
 8004d30:	4301      	orrs	r1, r0
 8004d32:	2a38      	cmp	r2, #56	; 0x38
 8004d34:	dd00      	ble.n	8004d38 <__aeabi_dsub+0x70>
 8004d36:	e17b      	b.n	8005030 <__aeabi_dsub+0x368>
 8004d38:	2a1f      	cmp	r2, #31
 8004d3a:	dd00      	ble.n	8004d3e <__aeabi_dsub+0x76>
 8004d3c:	e1ee      	b.n	800511c <__aeabi_dsub+0x454>
 8004d3e:	2020      	movs	r0, #32
 8004d40:	003e      	movs	r6, r7
 8004d42:	1a80      	subs	r0, r0, r2
 8004d44:	000c      	movs	r4, r1
 8004d46:	40d6      	lsrs	r6, r2
 8004d48:	40d1      	lsrs	r1, r2
 8004d4a:	4087      	lsls	r7, r0
 8004d4c:	4662      	mov	r2, ip
 8004d4e:	4084      	lsls	r4, r0
 8004d50:	1a52      	subs	r2, r2, r1
 8004d52:	1e78      	subs	r0, r7, #1
 8004d54:	4187      	sbcs	r7, r0
 8004d56:	4694      	mov	ip, r2
 8004d58:	4334      	orrs	r4, r6
 8004d5a:	4327      	orrs	r7, r4
 8004d5c:	1bdc      	subs	r4, r3, r7
 8004d5e:	42a3      	cmp	r3, r4
 8004d60:	419b      	sbcs	r3, r3
 8004d62:	4662      	mov	r2, ip
 8004d64:	425b      	negs	r3, r3
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	4699      	mov	r9, r3
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	d400      	bmi.n	8004d72 <__aeabi_dsub+0xaa>
 8004d70:	e118      	b.n	8004fa4 <__aeabi_dsub+0x2dc>
 8004d72:	464b      	mov	r3, r9
 8004d74:	0258      	lsls	r0, r3, #9
 8004d76:	0a43      	lsrs	r3, r0, #9
 8004d78:	4699      	mov	r9, r3
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d100      	bne.n	8004d82 <__aeabi_dsub+0xba>
 8004d80:	e137      	b.n	8004ff2 <__aeabi_dsub+0x32a>
 8004d82:	4648      	mov	r0, r9
 8004d84:	f000 fce6 	bl	8005754 <__clzsi2>
 8004d88:	0001      	movs	r1, r0
 8004d8a:	3908      	subs	r1, #8
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	0022      	movs	r2, r4
 8004d90:	4648      	mov	r0, r9
 8004d92:	1a5b      	subs	r3, r3, r1
 8004d94:	40da      	lsrs	r2, r3
 8004d96:	4088      	lsls	r0, r1
 8004d98:	408c      	lsls	r4, r1
 8004d9a:	4643      	mov	r3, r8
 8004d9c:	4310      	orrs	r0, r2
 8004d9e:	4588      	cmp	r8, r1
 8004da0:	dd00      	ble.n	8004da4 <__aeabi_dsub+0xdc>
 8004da2:	e136      	b.n	8005012 <__aeabi_dsub+0x34a>
 8004da4:	1ac9      	subs	r1, r1, r3
 8004da6:	1c4b      	adds	r3, r1, #1
 8004da8:	2b1f      	cmp	r3, #31
 8004daa:	dd00      	ble.n	8004dae <__aeabi_dsub+0xe6>
 8004dac:	e0ea      	b.n	8004f84 <__aeabi_dsub+0x2bc>
 8004dae:	2220      	movs	r2, #32
 8004db0:	0026      	movs	r6, r4
 8004db2:	1ad2      	subs	r2, r2, r3
 8004db4:	0001      	movs	r1, r0
 8004db6:	4094      	lsls	r4, r2
 8004db8:	40de      	lsrs	r6, r3
 8004dba:	40d8      	lsrs	r0, r3
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	4091      	lsls	r1, r2
 8004dc0:	1e62      	subs	r2, r4, #1
 8004dc2:	4194      	sbcs	r4, r2
 8004dc4:	4681      	mov	r9, r0
 8004dc6:	4698      	mov	r8, r3
 8004dc8:	4331      	orrs	r1, r6
 8004dca:	430c      	orrs	r4, r1
 8004dcc:	0763      	lsls	r3, r4, #29
 8004dce:	d009      	beq.n	8004de4 <__aeabi_dsub+0x11c>
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	4023      	ands	r3, r4
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d005      	beq.n	8004de4 <__aeabi_dsub+0x11c>
 8004dd8:	1d23      	adds	r3, r4, #4
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	41a4      	sbcs	r4, r4
 8004dde:	4264      	negs	r4, r4
 8004de0:	44a1      	add	r9, r4
 8004de2:	001c      	movs	r4, r3
 8004de4:	464b      	mov	r3, r9
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	d400      	bmi.n	8004dec <__aeabi_dsub+0x124>
 8004dea:	e0de      	b.n	8004faa <__aeabi_dsub+0x2e2>
 8004dec:	4641      	mov	r1, r8
 8004dee:	4b8c      	ldr	r3, [pc, #560]	; (8005020 <__aeabi_dsub+0x358>)
 8004df0:	3101      	adds	r1, #1
 8004df2:	4299      	cmp	r1, r3
 8004df4:	d100      	bne.n	8004df8 <__aeabi_dsub+0x130>
 8004df6:	e0e7      	b.n	8004fc8 <__aeabi_dsub+0x300>
 8004df8:	464b      	mov	r3, r9
 8004dfa:	488a      	ldr	r0, [pc, #552]	; (8005024 <__aeabi_dsub+0x35c>)
 8004dfc:	08e4      	lsrs	r4, r4, #3
 8004dfe:	4003      	ands	r3, r0
 8004e00:	0018      	movs	r0, r3
 8004e02:	0549      	lsls	r1, r1, #21
 8004e04:	075b      	lsls	r3, r3, #29
 8004e06:	0240      	lsls	r0, r0, #9
 8004e08:	4323      	orrs	r3, r4
 8004e0a:	0d4a      	lsrs	r2, r1, #21
 8004e0c:	0b04      	lsrs	r4, r0, #12
 8004e0e:	0512      	lsls	r2, r2, #20
 8004e10:	07ed      	lsls	r5, r5, #31
 8004e12:	4322      	orrs	r2, r4
 8004e14:	432a      	orrs	r2, r5
 8004e16:	0018      	movs	r0, r3
 8004e18:	0011      	movs	r1, r2
 8004e1a:	bcf0      	pop	{r4, r5, r6, r7}
 8004e1c:	46bb      	mov	fp, r7
 8004e1e:	46b2      	mov	sl, r6
 8004e20:	46a9      	mov	r9, r5
 8004e22:	46a0      	mov	r8, r4
 8004e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e26:	4642      	mov	r2, r8
 8004e28:	1a12      	subs	r2, r2, r0
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	dd52      	ble.n	8004ed4 <__aeabi_dsub+0x20c>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d100      	bne.n	8004e34 <__aeabi_dsub+0x16c>
 8004e32:	e09c      	b.n	8004f6e <__aeabi_dsub+0x2a6>
 8004e34:	45a0      	cmp	r8, r4
 8004e36:	d100      	bne.n	8004e3a <__aeabi_dsub+0x172>
 8004e38:	e0ca      	b.n	8004fd0 <__aeabi_dsub+0x308>
 8004e3a:	2080      	movs	r0, #128	; 0x80
 8004e3c:	0400      	lsls	r0, r0, #16
 8004e3e:	4301      	orrs	r1, r0
 8004e40:	2a38      	cmp	r2, #56	; 0x38
 8004e42:	dd00      	ble.n	8004e46 <__aeabi_dsub+0x17e>
 8004e44:	e149      	b.n	80050da <__aeabi_dsub+0x412>
 8004e46:	2a1f      	cmp	r2, #31
 8004e48:	dc00      	bgt.n	8004e4c <__aeabi_dsub+0x184>
 8004e4a:	e197      	b.n	800517c <__aeabi_dsub+0x4b4>
 8004e4c:	0010      	movs	r0, r2
 8004e4e:	000e      	movs	r6, r1
 8004e50:	3820      	subs	r0, #32
 8004e52:	40c6      	lsrs	r6, r0
 8004e54:	2a20      	cmp	r2, #32
 8004e56:	d004      	beq.n	8004e62 <__aeabi_dsub+0x19a>
 8004e58:	2040      	movs	r0, #64	; 0x40
 8004e5a:	1a82      	subs	r2, r0, r2
 8004e5c:	4091      	lsls	r1, r2
 8004e5e:	430f      	orrs	r7, r1
 8004e60:	46b9      	mov	r9, r7
 8004e62:	464c      	mov	r4, r9
 8004e64:	1e62      	subs	r2, r4, #1
 8004e66:	4194      	sbcs	r4, r2
 8004e68:	4334      	orrs	r4, r6
 8004e6a:	e13a      	b.n	80050e2 <__aeabi_dsub+0x41a>
 8004e6c:	000a      	movs	r2, r1
 8004e6e:	433a      	orrs	r2, r7
 8004e70:	d028      	beq.n	8004ec4 <__aeabi_dsub+0x1fc>
 8004e72:	46b3      	mov	fp, r6
 8004e74:	42b5      	cmp	r5, r6
 8004e76:	d02b      	beq.n	8004ed0 <__aeabi_dsub+0x208>
 8004e78:	4a6b      	ldr	r2, [pc, #428]	; (8005028 <__aeabi_dsub+0x360>)
 8004e7a:	4442      	add	r2, r8
 8004e7c:	2a00      	cmp	r2, #0
 8004e7e:	d05d      	beq.n	8004f3c <__aeabi_dsub+0x274>
 8004e80:	4642      	mov	r2, r8
 8004e82:	4644      	mov	r4, r8
 8004e84:	1a82      	subs	r2, r0, r2
 8004e86:	2c00      	cmp	r4, #0
 8004e88:	d000      	beq.n	8004e8c <__aeabi_dsub+0x1c4>
 8004e8a:	e0f5      	b.n	8005078 <__aeabi_dsub+0x3b0>
 8004e8c:	4665      	mov	r5, ip
 8004e8e:	431d      	orrs	r5, r3
 8004e90:	d100      	bne.n	8004e94 <__aeabi_dsub+0x1cc>
 8004e92:	e19c      	b.n	80051ce <__aeabi_dsub+0x506>
 8004e94:	1e55      	subs	r5, r2, #1
 8004e96:	2a01      	cmp	r2, #1
 8004e98:	d100      	bne.n	8004e9c <__aeabi_dsub+0x1d4>
 8004e9a:	e1fb      	b.n	8005294 <__aeabi_dsub+0x5cc>
 8004e9c:	4c60      	ldr	r4, [pc, #384]	; (8005020 <__aeabi_dsub+0x358>)
 8004e9e:	42a2      	cmp	r2, r4
 8004ea0:	d100      	bne.n	8004ea4 <__aeabi_dsub+0x1dc>
 8004ea2:	e1bd      	b.n	8005220 <__aeabi_dsub+0x558>
 8004ea4:	002a      	movs	r2, r5
 8004ea6:	e0f0      	b.n	800508a <__aeabi_dsub+0x3c2>
 8004ea8:	0008      	movs	r0, r1
 8004eaa:	4338      	orrs	r0, r7
 8004eac:	d100      	bne.n	8004eb0 <__aeabi_dsub+0x1e8>
 8004eae:	e0c3      	b.n	8005038 <__aeabi_dsub+0x370>
 8004eb0:	1e50      	subs	r0, r2, #1
 8004eb2:	2a01      	cmp	r2, #1
 8004eb4:	d100      	bne.n	8004eb8 <__aeabi_dsub+0x1f0>
 8004eb6:	e1a8      	b.n	800520a <__aeabi_dsub+0x542>
 8004eb8:	4c59      	ldr	r4, [pc, #356]	; (8005020 <__aeabi_dsub+0x358>)
 8004eba:	42a2      	cmp	r2, r4
 8004ebc:	d100      	bne.n	8004ec0 <__aeabi_dsub+0x1f8>
 8004ebe:	e087      	b.n	8004fd0 <__aeabi_dsub+0x308>
 8004ec0:	0002      	movs	r2, r0
 8004ec2:	e736      	b.n	8004d32 <__aeabi_dsub+0x6a>
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	4056      	eors	r6, r2
 8004ec8:	46b3      	mov	fp, r6
 8004eca:	42b5      	cmp	r5, r6
 8004ecc:	d000      	beq.n	8004ed0 <__aeabi_dsub+0x208>
 8004ece:	e721      	b.n	8004d14 <__aeabi_dsub+0x4c>
 8004ed0:	4a55      	ldr	r2, [pc, #340]	; (8005028 <__aeabi_dsub+0x360>)
 8004ed2:	4442      	add	r2, r8
 8004ed4:	2a00      	cmp	r2, #0
 8004ed6:	d100      	bne.n	8004eda <__aeabi_dsub+0x212>
 8004ed8:	e0b5      	b.n	8005046 <__aeabi_dsub+0x37e>
 8004eda:	4642      	mov	r2, r8
 8004edc:	4644      	mov	r4, r8
 8004ede:	1a82      	subs	r2, r0, r2
 8004ee0:	2c00      	cmp	r4, #0
 8004ee2:	d100      	bne.n	8004ee6 <__aeabi_dsub+0x21e>
 8004ee4:	e138      	b.n	8005158 <__aeabi_dsub+0x490>
 8004ee6:	4e4e      	ldr	r6, [pc, #312]	; (8005020 <__aeabi_dsub+0x358>)
 8004ee8:	42b0      	cmp	r0, r6
 8004eea:	d100      	bne.n	8004eee <__aeabi_dsub+0x226>
 8004eec:	e1de      	b.n	80052ac <__aeabi_dsub+0x5e4>
 8004eee:	2680      	movs	r6, #128	; 0x80
 8004ef0:	4664      	mov	r4, ip
 8004ef2:	0436      	lsls	r6, r6, #16
 8004ef4:	4334      	orrs	r4, r6
 8004ef6:	46a4      	mov	ip, r4
 8004ef8:	2a38      	cmp	r2, #56	; 0x38
 8004efa:	dd00      	ble.n	8004efe <__aeabi_dsub+0x236>
 8004efc:	e196      	b.n	800522c <__aeabi_dsub+0x564>
 8004efe:	2a1f      	cmp	r2, #31
 8004f00:	dd00      	ble.n	8004f04 <__aeabi_dsub+0x23c>
 8004f02:	e224      	b.n	800534e <__aeabi_dsub+0x686>
 8004f04:	2620      	movs	r6, #32
 8004f06:	1ab4      	subs	r4, r6, r2
 8004f08:	46a2      	mov	sl, r4
 8004f0a:	4664      	mov	r4, ip
 8004f0c:	4656      	mov	r6, sl
 8004f0e:	40b4      	lsls	r4, r6
 8004f10:	46a1      	mov	r9, r4
 8004f12:	001c      	movs	r4, r3
 8004f14:	464e      	mov	r6, r9
 8004f16:	40d4      	lsrs	r4, r2
 8004f18:	4326      	orrs	r6, r4
 8004f1a:	0034      	movs	r4, r6
 8004f1c:	4656      	mov	r6, sl
 8004f1e:	40b3      	lsls	r3, r6
 8004f20:	1e5e      	subs	r6, r3, #1
 8004f22:	41b3      	sbcs	r3, r6
 8004f24:	431c      	orrs	r4, r3
 8004f26:	4663      	mov	r3, ip
 8004f28:	40d3      	lsrs	r3, r2
 8004f2a:	18c9      	adds	r1, r1, r3
 8004f2c:	19e4      	adds	r4, r4, r7
 8004f2e:	42bc      	cmp	r4, r7
 8004f30:	41bf      	sbcs	r7, r7
 8004f32:	427f      	negs	r7, r7
 8004f34:	46b9      	mov	r9, r7
 8004f36:	4680      	mov	r8, r0
 8004f38:	4489      	add	r9, r1
 8004f3a:	e0d8      	b.n	80050ee <__aeabi_dsub+0x426>
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	4c3b      	ldr	r4, [pc, #236]	; (800502c <__aeabi_dsub+0x364>)
 8004f40:	3001      	adds	r0, #1
 8004f42:	4220      	tst	r0, r4
 8004f44:	d000      	beq.n	8004f48 <__aeabi_dsub+0x280>
 8004f46:	e0b4      	b.n	80050b2 <__aeabi_dsub+0x3ea>
 8004f48:	4640      	mov	r0, r8
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d000      	beq.n	8004f50 <__aeabi_dsub+0x288>
 8004f4e:	e144      	b.n	80051da <__aeabi_dsub+0x512>
 8004f50:	4660      	mov	r0, ip
 8004f52:	4318      	orrs	r0, r3
 8004f54:	d100      	bne.n	8004f58 <__aeabi_dsub+0x290>
 8004f56:	e190      	b.n	800527a <__aeabi_dsub+0x5b2>
 8004f58:	0008      	movs	r0, r1
 8004f5a:	4338      	orrs	r0, r7
 8004f5c:	d000      	beq.n	8004f60 <__aeabi_dsub+0x298>
 8004f5e:	e1aa      	b.n	80052b6 <__aeabi_dsub+0x5ee>
 8004f60:	4661      	mov	r1, ip
 8004f62:	08db      	lsrs	r3, r3, #3
 8004f64:	0749      	lsls	r1, r1, #29
 8004f66:	430b      	orrs	r3, r1
 8004f68:	4661      	mov	r1, ip
 8004f6a:	08cc      	lsrs	r4, r1, #3
 8004f6c:	e027      	b.n	8004fbe <__aeabi_dsub+0x2f6>
 8004f6e:	0008      	movs	r0, r1
 8004f70:	4338      	orrs	r0, r7
 8004f72:	d061      	beq.n	8005038 <__aeabi_dsub+0x370>
 8004f74:	1e50      	subs	r0, r2, #1
 8004f76:	2a01      	cmp	r2, #1
 8004f78:	d100      	bne.n	8004f7c <__aeabi_dsub+0x2b4>
 8004f7a:	e139      	b.n	80051f0 <__aeabi_dsub+0x528>
 8004f7c:	42a2      	cmp	r2, r4
 8004f7e:	d027      	beq.n	8004fd0 <__aeabi_dsub+0x308>
 8004f80:	0002      	movs	r2, r0
 8004f82:	e75d      	b.n	8004e40 <__aeabi_dsub+0x178>
 8004f84:	0002      	movs	r2, r0
 8004f86:	391f      	subs	r1, #31
 8004f88:	40ca      	lsrs	r2, r1
 8004f8a:	0011      	movs	r1, r2
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d003      	beq.n	8004f98 <__aeabi_dsub+0x2d0>
 8004f90:	2240      	movs	r2, #64	; 0x40
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	4098      	lsls	r0, r3
 8004f96:	4304      	orrs	r4, r0
 8004f98:	1e63      	subs	r3, r4, #1
 8004f9a:	419c      	sbcs	r4, r3
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4699      	mov	r9, r3
 8004fa0:	4698      	mov	r8, r3
 8004fa2:	430c      	orrs	r4, r1
 8004fa4:	0763      	lsls	r3, r4, #29
 8004fa6:	d000      	beq.n	8004faa <__aeabi_dsub+0x2e2>
 8004fa8:	e712      	b.n	8004dd0 <__aeabi_dsub+0x108>
 8004faa:	464b      	mov	r3, r9
 8004fac:	464a      	mov	r2, r9
 8004fae:	08e4      	lsrs	r4, r4, #3
 8004fb0:	075b      	lsls	r3, r3, #29
 8004fb2:	4323      	orrs	r3, r4
 8004fb4:	08d4      	lsrs	r4, r2, #3
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	4919      	ldr	r1, [pc, #100]	; (8005020 <__aeabi_dsub+0x358>)
 8004fba:	428a      	cmp	r2, r1
 8004fbc:	d00e      	beq.n	8004fdc <__aeabi_dsub+0x314>
 8004fbe:	0324      	lsls	r4, r4, #12
 8004fc0:	0552      	lsls	r2, r2, #21
 8004fc2:	0b24      	lsrs	r4, r4, #12
 8004fc4:	0d52      	lsrs	r2, r2, #21
 8004fc6:	e722      	b.n	8004e0e <__aeabi_dsub+0x146>
 8004fc8:	000a      	movs	r2, r1
 8004fca:	2400      	movs	r4, #0
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e71e      	b.n	8004e0e <__aeabi_dsub+0x146>
 8004fd0:	08db      	lsrs	r3, r3, #3
 8004fd2:	4662      	mov	r2, ip
 8004fd4:	0752      	lsls	r2, r2, #29
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	4662      	mov	r2, ip
 8004fda:	08d4      	lsrs	r4, r2, #3
 8004fdc:	001a      	movs	r2, r3
 8004fde:	4322      	orrs	r2, r4
 8004fe0:	d100      	bne.n	8004fe4 <__aeabi_dsub+0x31c>
 8004fe2:	e1fc      	b.n	80053de <__aeabi_dsub+0x716>
 8004fe4:	2280      	movs	r2, #128	; 0x80
 8004fe6:	0312      	lsls	r2, r2, #12
 8004fe8:	4314      	orrs	r4, r2
 8004fea:	0324      	lsls	r4, r4, #12
 8004fec:	4a0c      	ldr	r2, [pc, #48]	; (8005020 <__aeabi_dsub+0x358>)
 8004fee:	0b24      	lsrs	r4, r4, #12
 8004ff0:	e70d      	b.n	8004e0e <__aeabi_dsub+0x146>
 8004ff2:	0020      	movs	r0, r4
 8004ff4:	f000 fbae 	bl	8005754 <__clzsi2>
 8004ff8:	0001      	movs	r1, r0
 8004ffa:	3118      	adds	r1, #24
 8004ffc:	291f      	cmp	r1, #31
 8004ffe:	dc00      	bgt.n	8005002 <__aeabi_dsub+0x33a>
 8005000:	e6c4      	b.n	8004d8c <__aeabi_dsub+0xc4>
 8005002:	3808      	subs	r0, #8
 8005004:	4084      	lsls	r4, r0
 8005006:	4643      	mov	r3, r8
 8005008:	0020      	movs	r0, r4
 800500a:	2400      	movs	r4, #0
 800500c:	4588      	cmp	r8, r1
 800500e:	dc00      	bgt.n	8005012 <__aeabi_dsub+0x34a>
 8005010:	e6c8      	b.n	8004da4 <__aeabi_dsub+0xdc>
 8005012:	4a04      	ldr	r2, [pc, #16]	; (8005024 <__aeabi_dsub+0x35c>)
 8005014:	1a5b      	subs	r3, r3, r1
 8005016:	4010      	ands	r0, r2
 8005018:	4698      	mov	r8, r3
 800501a:	4681      	mov	r9, r0
 800501c:	e6d6      	b.n	8004dcc <__aeabi_dsub+0x104>
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	000007ff 	.word	0x000007ff
 8005024:	ff7fffff 	.word	0xff7fffff
 8005028:	fffff801 	.word	0xfffff801
 800502c:	000007fe 	.word	0x000007fe
 8005030:	430f      	orrs	r7, r1
 8005032:	1e7a      	subs	r2, r7, #1
 8005034:	4197      	sbcs	r7, r2
 8005036:	e691      	b.n	8004d5c <__aeabi_dsub+0x94>
 8005038:	4661      	mov	r1, ip
 800503a:	08db      	lsrs	r3, r3, #3
 800503c:	0749      	lsls	r1, r1, #29
 800503e:	430b      	orrs	r3, r1
 8005040:	4661      	mov	r1, ip
 8005042:	08cc      	lsrs	r4, r1, #3
 8005044:	e7b8      	b.n	8004fb8 <__aeabi_dsub+0x2f0>
 8005046:	4640      	mov	r0, r8
 8005048:	4cd3      	ldr	r4, [pc, #844]	; (8005398 <__aeabi_dsub+0x6d0>)
 800504a:	3001      	adds	r0, #1
 800504c:	4220      	tst	r0, r4
 800504e:	d000      	beq.n	8005052 <__aeabi_dsub+0x38a>
 8005050:	e0a2      	b.n	8005198 <__aeabi_dsub+0x4d0>
 8005052:	4640      	mov	r0, r8
 8005054:	2800      	cmp	r0, #0
 8005056:	d000      	beq.n	800505a <__aeabi_dsub+0x392>
 8005058:	e101      	b.n	800525e <__aeabi_dsub+0x596>
 800505a:	4660      	mov	r0, ip
 800505c:	4318      	orrs	r0, r3
 800505e:	d100      	bne.n	8005062 <__aeabi_dsub+0x39a>
 8005060:	e15e      	b.n	8005320 <__aeabi_dsub+0x658>
 8005062:	0008      	movs	r0, r1
 8005064:	4338      	orrs	r0, r7
 8005066:	d000      	beq.n	800506a <__aeabi_dsub+0x3a2>
 8005068:	e15f      	b.n	800532a <__aeabi_dsub+0x662>
 800506a:	4661      	mov	r1, ip
 800506c:	08db      	lsrs	r3, r3, #3
 800506e:	0749      	lsls	r1, r1, #29
 8005070:	430b      	orrs	r3, r1
 8005072:	4661      	mov	r1, ip
 8005074:	08cc      	lsrs	r4, r1, #3
 8005076:	e7a2      	b.n	8004fbe <__aeabi_dsub+0x2f6>
 8005078:	4dc8      	ldr	r5, [pc, #800]	; (800539c <__aeabi_dsub+0x6d4>)
 800507a:	42a8      	cmp	r0, r5
 800507c:	d100      	bne.n	8005080 <__aeabi_dsub+0x3b8>
 800507e:	e0cf      	b.n	8005220 <__aeabi_dsub+0x558>
 8005080:	2580      	movs	r5, #128	; 0x80
 8005082:	4664      	mov	r4, ip
 8005084:	042d      	lsls	r5, r5, #16
 8005086:	432c      	orrs	r4, r5
 8005088:	46a4      	mov	ip, r4
 800508a:	2a38      	cmp	r2, #56	; 0x38
 800508c:	dc56      	bgt.n	800513c <__aeabi_dsub+0x474>
 800508e:	2a1f      	cmp	r2, #31
 8005090:	dd00      	ble.n	8005094 <__aeabi_dsub+0x3cc>
 8005092:	e0d1      	b.n	8005238 <__aeabi_dsub+0x570>
 8005094:	2520      	movs	r5, #32
 8005096:	001e      	movs	r6, r3
 8005098:	1aad      	subs	r5, r5, r2
 800509a:	4664      	mov	r4, ip
 800509c:	40ab      	lsls	r3, r5
 800509e:	40ac      	lsls	r4, r5
 80050a0:	40d6      	lsrs	r6, r2
 80050a2:	1e5d      	subs	r5, r3, #1
 80050a4:	41ab      	sbcs	r3, r5
 80050a6:	4334      	orrs	r4, r6
 80050a8:	4323      	orrs	r3, r4
 80050aa:	4664      	mov	r4, ip
 80050ac:	40d4      	lsrs	r4, r2
 80050ae:	1b09      	subs	r1, r1, r4
 80050b0:	e049      	b.n	8005146 <__aeabi_dsub+0x47e>
 80050b2:	4660      	mov	r0, ip
 80050b4:	1bdc      	subs	r4, r3, r7
 80050b6:	1a46      	subs	r6, r0, r1
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	4180      	sbcs	r0, r0
 80050bc:	4240      	negs	r0, r0
 80050be:	4681      	mov	r9, r0
 80050c0:	0030      	movs	r0, r6
 80050c2:	464e      	mov	r6, r9
 80050c4:	1b80      	subs	r0, r0, r6
 80050c6:	4681      	mov	r9, r0
 80050c8:	0200      	lsls	r0, r0, #8
 80050ca:	d476      	bmi.n	80051ba <__aeabi_dsub+0x4f2>
 80050cc:	464b      	mov	r3, r9
 80050ce:	4323      	orrs	r3, r4
 80050d0:	d000      	beq.n	80050d4 <__aeabi_dsub+0x40c>
 80050d2:	e652      	b.n	8004d7a <__aeabi_dsub+0xb2>
 80050d4:	2400      	movs	r4, #0
 80050d6:	2500      	movs	r5, #0
 80050d8:	e771      	b.n	8004fbe <__aeabi_dsub+0x2f6>
 80050da:	4339      	orrs	r1, r7
 80050dc:	000c      	movs	r4, r1
 80050de:	1e62      	subs	r2, r4, #1
 80050e0:	4194      	sbcs	r4, r2
 80050e2:	18e4      	adds	r4, r4, r3
 80050e4:	429c      	cmp	r4, r3
 80050e6:	419b      	sbcs	r3, r3
 80050e8:	425b      	negs	r3, r3
 80050ea:	4463      	add	r3, ip
 80050ec:	4699      	mov	r9, r3
 80050ee:	464b      	mov	r3, r9
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	d400      	bmi.n	80050f6 <__aeabi_dsub+0x42e>
 80050f4:	e756      	b.n	8004fa4 <__aeabi_dsub+0x2dc>
 80050f6:	2301      	movs	r3, #1
 80050f8:	469c      	mov	ip, r3
 80050fa:	4ba8      	ldr	r3, [pc, #672]	; (800539c <__aeabi_dsub+0x6d4>)
 80050fc:	44e0      	add	r8, ip
 80050fe:	4598      	cmp	r8, r3
 8005100:	d038      	beq.n	8005174 <__aeabi_dsub+0x4ac>
 8005102:	464b      	mov	r3, r9
 8005104:	48a6      	ldr	r0, [pc, #664]	; (80053a0 <__aeabi_dsub+0x6d8>)
 8005106:	2201      	movs	r2, #1
 8005108:	4003      	ands	r3, r0
 800510a:	0018      	movs	r0, r3
 800510c:	0863      	lsrs	r3, r4, #1
 800510e:	4014      	ands	r4, r2
 8005110:	431c      	orrs	r4, r3
 8005112:	07c3      	lsls	r3, r0, #31
 8005114:	431c      	orrs	r4, r3
 8005116:	0843      	lsrs	r3, r0, #1
 8005118:	4699      	mov	r9, r3
 800511a:	e657      	b.n	8004dcc <__aeabi_dsub+0x104>
 800511c:	0010      	movs	r0, r2
 800511e:	000e      	movs	r6, r1
 8005120:	3820      	subs	r0, #32
 8005122:	40c6      	lsrs	r6, r0
 8005124:	2a20      	cmp	r2, #32
 8005126:	d004      	beq.n	8005132 <__aeabi_dsub+0x46a>
 8005128:	2040      	movs	r0, #64	; 0x40
 800512a:	1a82      	subs	r2, r0, r2
 800512c:	4091      	lsls	r1, r2
 800512e:	430f      	orrs	r7, r1
 8005130:	46b9      	mov	r9, r7
 8005132:	464f      	mov	r7, r9
 8005134:	1e7a      	subs	r2, r7, #1
 8005136:	4197      	sbcs	r7, r2
 8005138:	4337      	orrs	r7, r6
 800513a:	e60f      	b.n	8004d5c <__aeabi_dsub+0x94>
 800513c:	4662      	mov	r2, ip
 800513e:	431a      	orrs	r2, r3
 8005140:	0013      	movs	r3, r2
 8005142:	1e5a      	subs	r2, r3, #1
 8005144:	4193      	sbcs	r3, r2
 8005146:	1afc      	subs	r4, r7, r3
 8005148:	42a7      	cmp	r7, r4
 800514a:	41bf      	sbcs	r7, r7
 800514c:	427f      	negs	r7, r7
 800514e:	1bcb      	subs	r3, r1, r7
 8005150:	4699      	mov	r9, r3
 8005152:	465d      	mov	r5, fp
 8005154:	4680      	mov	r8, r0
 8005156:	e608      	b.n	8004d6a <__aeabi_dsub+0xa2>
 8005158:	4666      	mov	r6, ip
 800515a:	431e      	orrs	r6, r3
 800515c:	d100      	bne.n	8005160 <__aeabi_dsub+0x498>
 800515e:	e0be      	b.n	80052de <__aeabi_dsub+0x616>
 8005160:	1e56      	subs	r6, r2, #1
 8005162:	2a01      	cmp	r2, #1
 8005164:	d100      	bne.n	8005168 <__aeabi_dsub+0x4a0>
 8005166:	e109      	b.n	800537c <__aeabi_dsub+0x6b4>
 8005168:	4c8c      	ldr	r4, [pc, #560]	; (800539c <__aeabi_dsub+0x6d4>)
 800516a:	42a2      	cmp	r2, r4
 800516c:	d100      	bne.n	8005170 <__aeabi_dsub+0x4a8>
 800516e:	e119      	b.n	80053a4 <__aeabi_dsub+0x6dc>
 8005170:	0032      	movs	r2, r6
 8005172:	e6c1      	b.n	8004ef8 <__aeabi_dsub+0x230>
 8005174:	4642      	mov	r2, r8
 8005176:	2400      	movs	r4, #0
 8005178:	2300      	movs	r3, #0
 800517a:	e648      	b.n	8004e0e <__aeabi_dsub+0x146>
 800517c:	2020      	movs	r0, #32
 800517e:	000c      	movs	r4, r1
 8005180:	1a80      	subs	r0, r0, r2
 8005182:	003e      	movs	r6, r7
 8005184:	4087      	lsls	r7, r0
 8005186:	4084      	lsls	r4, r0
 8005188:	40d6      	lsrs	r6, r2
 800518a:	1e78      	subs	r0, r7, #1
 800518c:	4187      	sbcs	r7, r0
 800518e:	40d1      	lsrs	r1, r2
 8005190:	4334      	orrs	r4, r6
 8005192:	433c      	orrs	r4, r7
 8005194:	448c      	add	ip, r1
 8005196:	e7a4      	b.n	80050e2 <__aeabi_dsub+0x41a>
 8005198:	4a80      	ldr	r2, [pc, #512]	; (800539c <__aeabi_dsub+0x6d4>)
 800519a:	4290      	cmp	r0, r2
 800519c:	d100      	bne.n	80051a0 <__aeabi_dsub+0x4d8>
 800519e:	e0e9      	b.n	8005374 <__aeabi_dsub+0x6ac>
 80051a0:	19df      	adds	r7, r3, r7
 80051a2:	429f      	cmp	r7, r3
 80051a4:	419b      	sbcs	r3, r3
 80051a6:	4461      	add	r1, ip
 80051a8:	425b      	negs	r3, r3
 80051aa:	18c9      	adds	r1, r1, r3
 80051ac:	07cc      	lsls	r4, r1, #31
 80051ae:	087f      	lsrs	r7, r7, #1
 80051b0:	084b      	lsrs	r3, r1, #1
 80051b2:	4699      	mov	r9, r3
 80051b4:	4680      	mov	r8, r0
 80051b6:	433c      	orrs	r4, r7
 80051b8:	e6f4      	b.n	8004fa4 <__aeabi_dsub+0x2dc>
 80051ba:	1afc      	subs	r4, r7, r3
 80051bc:	42a7      	cmp	r7, r4
 80051be:	41bf      	sbcs	r7, r7
 80051c0:	4663      	mov	r3, ip
 80051c2:	427f      	negs	r7, r7
 80051c4:	1ac9      	subs	r1, r1, r3
 80051c6:	1bcb      	subs	r3, r1, r7
 80051c8:	4699      	mov	r9, r3
 80051ca:	465d      	mov	r5, fp
 80051cc:	e5d5      	b.n	8004d7a <__aeabi_dsub+0xb2>
 80051ce:	08ff      	lsrs	r7, r7, #3
 80051d0:	074b      	lsls	r3, r1, #29
 80051d2:	465d      	mov	r5, fp
 80051d4:	433b      	orrs	r3, r7
 80051d6:	08cc      	lsrs	r4, r1, #3
 80051d8:	e6ee      	b.n	8004fb8 <__aeabi_dsub+0x2f0>
 80051da:	4662      	mov	r2, ip
 80051dc:	431a      	orrs	r2, r3
 80051de:	d000      	beq.n	80051e2 <__aeabi_dsub+0x51a>
 80051e0:	e082      	b.n	80052e8 <__aeabi_dsub+0x620>
 80051e2:	000b      	movs	r3, r1
 80051e4:	433b      	orrs	r3, r7
 80051e6:	d11b      	bne.n	8005220 <__aeabi_dsub+0x558>
 80051e8:	2480      	movs	r4, #128	; 0x80
 80051ea:	2500      	movs	r5, #0
 80051ec:	0324      	lsls	r4, r4, #12
 80051ee:	e6f9      	b.n	8004fe4 <__aeabi_dsub+0x31c>
 80051f0:	19dc      	adds	r4, r3, r7
 80051f2:	429c      	cmp	r4, r3
 80051f4:	419b      	sbcs	r3, r3
 80051f6:	4461      	add	r1, ip
 80051f8:	4689      	mov	r9, r1
 80051fa:	425b      	negs	r3, r3
 80051fc:	4499      	add	r9, r3
 80051fe:	464b      	mov	r3, r9
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	d444      	bmi.n	800528e <__aeabi_dsub+0x5c6>
 8005204:	2301      	movs	r3, #1
 8005206:	4698      	mov	r8, r3
 8005208:	e6cc      	b.n	8004fa4 <__aeabi_dsub+0x2dc>
 800520a:	1bdc      	subs	r4, r3, r7
 800520c:	4662      	mov	r2, ip
 800520e:	42a3      	cmp	r3, r4
 8005210:	419b      	sbcs	r3, r3
 8005212:	1a51      	subs	r1, r2, r1
 8005214:	425b      	negs	r3, r3
 8005216:	1acb      	subs	r3, r1, r3
 8005218:	4699      	mov	r9, r3
 800521a:	2301      	movs	r3, #1
 800521c:	4698      	mov	r8, r3
 800521e:	e5a4      	b.n	8004d6a <__aeabi_dsub+0xa2>
 8005220:	08ff      	lsrs	r7, r7, #3
 8005222:	074b      	lsls	r3, r1, #29
 8005224:	465d      	mov	r5, fp
 8005226:	433b      	orrs	r3, r7
 8005228:	08cc      	lsrs	r4, r1, #3
 800522a:	e6d7      	b.n	8004fdc <__aeabi_dsub+0x314>
 800522c:	4662      	mov	r2, ip
 800522e:	431a      	orrs	r2, r3
 8005230:	0014      	movs	r4, r2
 8005232:	1e63      	subs	r3, r4, #1
 8005234:	419c      	sbcs	r4, r3
 8005236:	e679      	b.n	8004f2c <__aeabi_dsub+0x264>
 8005238:	0015      	movs	r5, r2
 800523a:	4664      	mov	r4, ip
 800523c:	3d20      	subs	r5, #32
 800523e:	40ec      	lsrs	r4, r5
 8005240:	46a0      	mov	r8, r4
 8005242:	2a20      	cmp	r2, #32
 8005244:	d005      	beq.n	8005252 <__aeabi_dsub+0x58a>
 8005246:	2540      	movs	r5, #64	; 0x40
 8005248:	4664      	mov	r4, ip
 800524a:	1aaa      	subs	r2, r5, r2
 800524c:	4094      	lsls	r4, r2
 800524e:	4323      	orrs	r3, r4
 8005250:	469a      	mov	sl, r3
 8005252:	4654      	mov	r4, sl
 8005254:	1e63      	subs	r3, r4, #1
 8005256:	419c      	sbcs	r4, r3
 8005258:	4643      	mov	r3, r8
 800525a:	4323      	orrs	r3, r4
 800525c:	e773      	b.n	8005146 <__aeabi_dsub+0x47e>
 800525e:	4662      	mov	r2, ip
 8005260:	431a      	orrs	r2, r3
 8005262:	d023      	beq.n	80052ac <__aeabi_dsub+0x5e4>
 8005264:	000a      	movs	r2, r1
 8005266:	433a      	orrs	r2, r7
 8005268:	d000      	beq.n	800526c <__aeabi_dsub+0x5a4>
 800526a:	e0a0      	b.n	80053ae <__aeabi_dsub+0x6e6>
 800526c:	4662      	mov	r2, ip
 800526e:	08db      	lsrs	r3, r3, #3
 8005270:	0752      	lsls	r2, r2, #29
 8005272:	4313      	orrs	r3, r2
 8005274:	4662      	mov	r2, ip
 8005276:	08d4      	lsrs	r4, r2, #3
 8005278:	e6b0      	b.n	8004fdc <__aeabi_dsub+0x314>
 800527a:	000b      	movs	r3, r1
 800527c:	433b      	orrs	r3, r7
 800527e:	d100      	bne.n	8005282 <__aeabi_dsub+0x5ba>
 8005280:	e728      	b.n	80050d4 <__aeabi_dsub+0x40c>
 8005282:	08ff      	lsrs	r7, r7, #3
 8005284:	074b      	lsls	r3, r1, #29
 8005286:	465d      	mov	r5, fp
 8005288:	433b      	orrs	r3, r7
 800528a:	08cc      	lsrs	r4, r1, #3
 800528c:	e697      	b.n	8004fbe <__aeabi_dsub+0x2f6>
 800528e:	2302      	movs	r3, #2
 8005290:	4698      	mov	r8, r3
 8005292:	e736      	b.n	8005102 <__aeabi_dsub+0x43a>
 8005294:	1afc      	subs	r4, r7, r3
 8005296:	42a7      	cmp	r7, r4
 8005298:	41bf      	sbcs	r7, r7
 800529a:	4663      	mov	r3, ip
 800529c:	427f      	negs	r7, r7
 800529e:	1ac9      	subs	r1, r1, r3
 80052a0:	1bcb      	subs	r3, r1, r7
 80052a2:	4699      	mov	r9, r3
 80052a4:	2301      	movs	r3, #1
 80052a6:	465d      	mov	r5, fp
 80052a8:	4698      	mov	r8, r3
 80052aa:	e55e      	b.n	8004d6a <__aeabi_dsub+0xa2>
 80052ac:	074b      	lsls	r3, r1, #29
 80052ae:	08ff      	lsrs	r7, r7, #3
 80052b0:	433b      	orrs	r3, r7
 80052b2:	08cc      	lsrs	r4, r1, #3
 80052b4:	e692      	b.n	8004fdc <__aeabi_dsub+0x314>
 80052b6:	1bdc      	subs	r4, r3, r7
 80052b8:	4660      	mov	r0, ip
 80052ba:	42a3      	cmp	r3, r4
 80052bc:	41b6      	sbcs	r6, r6
 80052be:	1a40      	subs	r0, r0, r1
 80052c0:	4276      	negs	r6, r6
 80052c2:	1b80      	subs	r0, r0, r6
 80052c4:	4681      	mov	r9, r0
 80052c6:	0200      	lsls	r0, r0, #8
 80052c8:	d560      	bpl.n	800538c <__aeabi_dsub+0x6c4>
 80052ca:	1afc      	subs	r4, r7, r3
 80052cc:	42a7      	cmp	r7, r4
 80052ce:	41bf      	sbcs	r7, r7
 80052d0:	4663      	mov	r3, ip
 80052d2:	427f      	negs	r7, r7
 80052d4:	1ac9      	subs	r1, r1, r3
 80052d6:	1bcb      	subs	r3, r1, r7
 80052d8:	4699      	mov	r9, r3
 80052da:	465d      	mov	r5, fp
 80052dc:	e576      	b.n	8004dcc <__aeabi_dsub+0x104>
 80052de:	08ff      	lsrs	r7, r7, #3
 80052e0:	074b      	lsls	r3, r1, #29
 80052e2:	433b      	orrs	r3, r7
 80052e4:	08cc      	lsrs	r4, r1, #3
 80052e6:	e667      	b.n	8004fb8 <__aeabi_dsub+0x2f0>
 80052e8:	000a      	movs	r2, r1
 80052ea:	08db      	lsrs	r3, r3, #3
 80052ec:	433a      	orrs	r2, r7
 80052ee:	d100      	bne.n	80052f2 <__aeabi_dsub+0x62a>
 80052f0:	e66f      	b.n	8004fd2 <__aeabi_dsub+0x30a>
 80052f2:	4662      	mov	r2, ip
 80052f4:	0752      	lsls	r2, r2, #29
 80052f6:	4313      	orrs	r3, r2
 80052f8:	4662      	mov	r2, ip
 80052fa:	08d4      	lsrs	r4, r2, #3
 80052fc:	2280      	movs	r2, #128	; 0x80
 80052fe:	0312      	lsls	r2, r2, #12
 8005300:	4214      	tst	r4, r2
 8005302:	d007      	beq.n	8005314 <__aeabi_dsub+0x64c>
 8005304:	08c8      	lsrs	r0, r1, #3
 8005306:	4210      	tst	r0, r2
 8005308:	d104      	bne.n	8005314 <__aeabi_dsub+0x64c>
 800530a:	465d      	mov	r5, fp
 800530c:	0004      	movs	r4, r0
 800530e:	08fb      	lsrs	r3, r7, #3
 8005310:	0749      	lsls	r1, r1, #29
 8005312:	430b      	orrs	r3, r1
 8005314:	0f5a      	lsrs	r2, r3, #29
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	08db      	lsrs	r3, r3, #3
 800531a:	0752      	lsls	r2, r2, #29
 800531c:	4313      	orrs	r3, r2
 800531e:	e65d      	b.n	8004fdc <__aeabi_dsub+0x314>
 8005320:	074b      	lsls	r3, r1, #29
 8005322:	08ff      	lsrs	r7, r7, #3
 8005324:	433b      	orrs	r3, r7
 8005326:	08cc      	lsrs	r4, r1, #3
 8005328:	e649      	b.n	8004fbe <__aeabi_dsub+0x2f6>
 800532a:	19dc      	adds	r4, r3, r7
 800532c:	429c      	cmp	r4, r3
 800532e:	419b      	sbcs	r3, r3
 8005330:	4461      	add	r1, ip
 8005332:	4689      	mov	r9, r1
 8005334:	425b      	negs	r3, r3
 8005336:	4499      	add	r9, r3
 8005338:	464b      	mov	r3, r9
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	d400      	bmi.n	8005340 <__aeabi_dsub+0x678>
 800533e:	e631      	b.n	8004fa4 <__aeabi_dsub+0x2dc>
 8005340:	464a      	mov	r2, r9
 8005342:	4b17      	ldr	r3, [pc, #92]	; (80053a0 <__aeabi_dsub+0x6d8>)
 8005344:	401a      	ands	r2, r3
 8005346:	2301      	movs	r3, #1
 8005348:	4691      	mov	r9, r2
 800534a:	4698      	mov	r8, r3
 800534c:	e62a      	b.n	8004fa4 <__aeabi_dsub+0x2dc>
 800534e:	0016      	movs	r6, r2
 8005350:	4664      	mov	r4, ip
 8005352:	3e20      	subs	r6, #32
 8005354:	40f4      	lsrs	r4, r6
 8005356:	46a0      	mov	r8, r4
 8005358:	2a20      	cmp	r2, #32
 800535a:	d005      	beq.n	8005368 <__aeabi_dsub+0x6a0>
 800535c:	2640      	movs	r6, #64	; 0x40
 800535e:	4664      	mov	r4, ip
 8005360:	1ab2      	subs	r2, r6, r2
 8005362:	4094      	lsls	r4, r2
 8005364:	4323      	orrs	r3, r4
 8005366:	469a      	mov	sl, r3
 8005368:	4654      	mov	r4, sl
 800536a:	1e63      	subs	r3, r4, #1
 800536c:	419c      	sbcs	r4, r3
 800536e:	4643      	mov	r3, r8
 8005370:	431c      	orrs	r4, r3
 8005372:	e5db      	b.n	8004f2c <__aeabi_dsub+0x264>
 8005374:	0002      	movs	r2, r0
 8005376:	2400      	movs	r4, #0
 8005378:	2300      	movs	r3, #0
 800537a:	e548      	b.n	8004e0e <__aeabi_dsub+0x146>
 800537c:	19dc      	adds	r4, r3, r7
 800537e:	42bc      	cmp	r4, r7
 8005380:	41bf      	sbcs	r7, r7
 8005382:	4461      	add	r1, ip
 8005384:	4689      	mov	r9, r1
 8005386:	427f      	negs	r7, r7
 8005388:	44b9      	add	r9, r7
 800538a:	e738      	b.n	80051fe <__aeabi_dsub+0x536>
 800538c:	464b      	mov	r3, r9
 800538e:	4323      	orrs	r3, r4
 8005390:	d100      	bne.n	8005394 <__aeabi_dsub+0x6cc>
 8005392:	e69f      	b.n	80050d4 <__aeabi_dsub+0x40c>
 8005394:	e606      	b.n	8004fa4 <__aeabi_dsub+0x2dc>
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	000007fe 	.word	0x000007fe
 800539c:	000007ff 	.word	0x000007ff
 80053a0:	ff7fffff 	.word	0xff7fffff
 80053a4:	08ff      	lsrs	r7, r7, #3
 80053a6:	074b      	lsls	r3, r1, #29
 80053a8:	433b      	orrs	r3, r7
 80053aa:	08cc      	lsrs	r4, r1, #3
 80053ac:	e616      	b.n	8004fdc <__aeabi_dsub+0x314>
 80053ae:	4662      	mov	r2, ip
 80053b0:	08db      	lsrs	r3, r3, #3
 80053b2:	0752      	lsls	r2, r2, #29
 80053b4:	4313      	orrs	r3, r2
 80053b6:	4662      	mov	r2, ip
 80053b8:	08d4      	lsrs	r4, r2, #3
 80053ba:	2280      	movs	r2, #128	; 0x80
 80053bc:	0312      	lsls	r2, r2, #12
 80053be:	4214      	tst	r4, r2
 80053c0:	d007      	beq.n	80053d2 <__aeabi_dsub+0x70a>
 80053c2:	08c8      	lsrs	r0, r1, #3
 80053c4:	4210      	tst	r0, r2
 80053c6:	d104      	bne.n	80053d2 <__aeabi_dsub+0x70a>
 80053c8:	465d      	mov	r5, fp
 80053ca:	0004      	movs	r4, r0
 80053cc:	08fb      	lsrs	r3, r7, #3
 80053ce:	0749      	lsls	r1, r1, #29
 80053d0:	430b      	orrs	r3, r1
 80053d2:	0f5a      	lsrs	r2, r3, #29
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	0752      	lsls	r2, r2, #29
 80053d8:	08db      	lsrs	r3, r3, #3
 80053da:	4313      	orrs	r3, r2
 80053dc:	e5fe      	b.n	8004fdc <__aeabi_dsub+0x314>
 80053de:	2300      	movs	r3, #0
 80053e0:	4a01      	ldr	r2, [pc, #4]	; (80053e8 <__aeabi_dsub+0x720>)
 80053e2:	001c      	movs	r4, r3
 80053e4:	e513      	b.n	8004e0e <__aeabi_dsub+0x146>
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	000007ff 	.word	0x000007ff

080053ec <__aeabi_dcmpun>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	0005      	movs	r5, r0
 80053f0:	480c      	ldr	r0, [pc, #48]	; (8005424 <__aeabi_dcmpun+0x38>)
 80053f2:	031c      	lsls	r4, r3, #12
 80053f4:	0016      	movs	r6, r2
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	030a      	lsls	r2, r1, #12
 80053fa:	0049      	lsls	r1, r1, #1
 80053fc:	0b12      	lsrs	r2, r2, #12
 80053fe:	0d49      	lsrs	r1, r1, #21
 8005400:	0b24      	lsrs	r4, r4, #12
 8005402:	0d5b      	lsrs	r3, r3, #21
 8005404:	4281      	cmp	r1, r0
 8005406:	d008      	beq.n	800541a <__aeabi_dcmpun+0x2e>
 8005408:	4a06      	ldr	r2, [pc, #24]	; (8005424 <__aeabi_dcmpun+0x38>)
 800540a:	2000      	movs	r0, #0
 800540c:	4293      	cmp	r3, r2
 800540e:	d103      	bne.n	8005418 <__aeabi_dcmpun+0x2c>
 8005410:	0020      	movs	r0, r4
 8005412:	4330      	orrs	r0, r6
 8005414:	1e43      	subs	r3, r0, #1
 8005416:	4198      	sbcs	r0, r3
 8005418:	bd70      	pop	{r4, r5, r6, pc}
 800541a:	2001      	movs	r0, #1
 800541c:	432a      	orrs	r2, r5
 800541e:	d1fb      	bne.n	8005418 <__aeabi_dcmpun+0x2c>
 8005420:	e7f2      	b.n	8005408 <__aeabi_dcmpun+0x1c>
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	000007ff 	.word	0x000007ff

08005428 <__aeabi_d2iz>:
 8005428:	000a      	movs	r2, r1
 800542a:	b530      	push	{r4, r5, lr}
 800542c:	4c13      	ldr	r4, [pc, #76]	; (800547c <__aeabi_d2iz+0x54>)
 800542e:	0053      	lsls	r3, r2, #1
 8005430:	0309      	lsls	r1, r1, #12
 8005432:	0005      	movs	r5, r0
 8005434:	0b09      	lsrs	r1, r1, #12
 8005436:	2000      	movs	r0, #0
 8005438:	0d5b      	lsrs	r3, r3, #21
 800543a:	0fd2      	lsrs	r2, r2, #31
 800543c:	42a3      	cmp	r3, r4
 800543e:	dd04      	ble.n	800544a <__aeabi_d2iz+0x22>
 8005440:	480f      	ldr	r0, [pc, #60]	; (8005480 <__aeabi_d2iz+0x58>)
 8005442:	4283      	cmp	r3, r0
 8005444:	dd02      	ble.n	800544c <__aeabi_d2iz+0x24>
 8005446:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <__aeabi_d2iz+0x5c>)
 8005448:	18d0      	adds	r0, r2, r3
 800544a:	bd30      	pop	{r4, r5, pc}
 800544c:	2080      	movs	r0, #128	; 0x80
 800544e:	0340      	lsls	r0, r0, #13
 8005450:	4301      	orrs	r1, r0
 8005452:	480d      	ldr	r0, [pc, #52]	; (8005488 <__aeabi_d2iz+0x60>)
 8005454:	1ac0      	subs	r0, r0, r3
 8005456:	281f      	cmp	r0, #31
 8005458:	dd08      	ble.n	800546c <__aeabi_d2iz+0x44>
 800545a:	480c      	ldr	r0, [pc, #48]	; (800548c <__aeabi_d2iz+0x64>)
 800545c:	1ac3      	subs	r3, r0, r3
 800545e:	40d9      	lsrs	r1, r3
 8005460:	000b      	movs	r3, r1
 8005462:	4258      	negs	r0, r3
 8005464:	2a00      	cmp	r2, #0
 8005466:	d1f0      	bne.n	800544a <__aeabi_d2iz+0x22>
 8005468:	0018      	movs	r0, r3
 800546a:	e7ee      	b.n	800544a <__aeabi_d2iz+0x22>
 800546c:	4c08      	ldr	r4, [pc, #32]	; (8005490 <__aeabi_d2iz+0x68>)
 800546e:	40c5      	lsrs	r5, r0
 8005470:	46a4      	mov	ip, r4
 8005472:	4463      	add	r3, ip
 8005474:	4099      	lsls	r1, r3
 8005476:	000b      	movs	r3, r1
 8005478:	432b      	orrs	r3, r5
 800547a:	e7f2      	b.n	8005462 <__aeabi_d2iz+0x3a>
 800547c:	000003fe 	.word	0x000003fe
 8005480:	0000041d 	.word	0x0000041d
 8005484:	7fffffff 	.word	0x7fffffff
 8005488:	00000433 	.word	0x00000433
 800548c:	00000413 	.word	0x00000413
 8005490:	fffffbed 	.word	0xfffffbed

08005494 <__aeabi_i2d>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	2800      	cmp	r0, #0
 8005498:	d016      	beq.n	80054c8 <__aeabi_i2d+0x34>
 800549a:	17c3      	asrs	r3, r0, #31
 800549c:	18c5      	adds	r5, r0, r3
 800549e:	405d      	eors	r5, r3
 80054a0:	0fc4      	lsrs	r4, r0, #31
 80054a2:	0028      	movs	r0, r5
 80054a4:	f000 f956 	bl	8005754 <__clzsi2>
 80054a8:	4a11      	ldr	r2, [pc, #68]	; (80054f0 <__aeabi_i2d+0x5c>)
 80054aa:	1a12      	subs	r2, r2, r0
 80054ac:	280a      	cmp	r0, #10
 80054ae:	dc16      	bgt.n	80054de <__aeabi_i2d+0x4a>
 80054b0:	0003      	movs	r3, r0
 80054b2:	002e      	movs	r6, r5
 80054b4:	3315      	adds	r3, #21
 80054b6:	409e      	lsls	r6, r3
 80054b8:	230b      	movs	r3, #11
 80054ba:	1a18      	subs	r0, r3, r0
 80054bc:	40c5      	lsrs	r5, r0
 80054be:	0552      	lsls	r2, r2, #21
 80054c0:	032d      	lsls	r5, r5, #12
 80054c2:	0b2d      	lsrs	r5, r5, #12
 80054c4:	0d53      	lsrs	r3, r2, #21
 80054c6:	e003      	b.n	80054d0 <__aeabi_i2d+0x3c>
 80054c8:	2400      	movs	r4, #0
 80054ca:	2300      	movs	r3, #0
 80054cc:	2500      	movs	r5, #0
 80054ce:	2600      	movs	r6, #0
 80054d0:	051b      	lsls	r3, r3, #20
 80054d2:	432b      	orrs	r3, r5
 80054d4:	07e4      	lsls	r4, r4, #31
 80054d6:	4323      	orrs	r3, r4
 80054d8:	0030      	movs	r0, r6
 80054da:	0019      	movs	r1, r3
 80054dc:	bd70      	pop	{r4, r5, r6, pc}
 80054de:	380b      	subs	r0, #11
 80054e0:	4085      	lsls	r5, r0
 80054e2:	0552      	lsls	r2, r2, #21
 80054e4:	032d      	lsls	r5, r5, #12
 80054e6:	2600      	movs	r6, #0
 80054e8:	0b2d      	lsrs	r5, r5, #12
 80054ea:	0d53      	lsrs	r3, r2, #21
 80054ec:	e7f0      	b.n	80054d0 <__aeabi_i2d+0x3c>
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	0000041e 	.word	0x0000041e

080054f4 <__aeabi_ui2d>:
 80054f4:	b510      	push	{r4, lr}
 80054f6:	1e04      	subs	r4, r0, #0
 80054f8:	d010      	beq.n	800551c <__aeabi_ui2d+0x28>
 80054fa:	f000 f92b 	bl	8005754 <__clzsi2>
 80054fe:	4b0f      	ldr	r3, [pc, #60]	; (800553c <__aeabi_ui2d+0x48>)
 8005500:	1a1b      	subs	r3, r3, r0
 8005502:	280a      	cmp	r0, #10
 8005504:	dc11      	bgt.n	800552a <__aeabi_ui2d+0x36>
 8005506:	220b      	movs	r2, #11
 8005508:	0021      	movs	r1, r4
 800550a:	1a12      	subs	r2, r2, r0
 800550c:	40d1      	lsrs	r1, r2
 800550e:	3015      	adds	r0, #21
 8005510:	030a      	lsls	r2, r1, #12
 8005512:	055b      	lsls	r3, r3, #21
 8005514:	4084      	lsls	r4, r0
 8005516:	0b12      	lsrs	r2, r2, #12
 8005518:	0d5b      	lsrs	r3, r3, #21
 800551a:	e001      	b.n	8005520 <__aeabi_ui2d+0x2c>
 800551c:	2300      	movs	r3, #0
 800551e:	2200      	movs	r2, #0
 8005520:	051b      	lsls	r3, r3, #20
 8005522:	4313      	orrs	r3, r2
 8005524:	0020      	movs	r0, r4
 8005526:	0019      	movs	r1, r3
 8005528:	bd10      	pop	{r4, pc}
 800552a:	0022      	movs	r2, r4
 800552c:	380b      	subs	r0, #11
 800552e:	4082      	lsls	r2, r0
 8005530:	055b      	lsls	r3, r3, #21
 8005532:	0312      	lsls	r2, r2, #12
 8005534:	2400      	movs	r4, #0
 8005536:	0b12      	lsrs	r2, r2, #12
 8005538:	0d5b      	lsrs	r3, r3, #21
 800553a:	e7f1      	b.n	8005520 <__aeabi_ui2d+0x2c>
 800553c:	0000041e 	.word	0x0000041e

08005540 <__aeabi_f2d>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	0043      	lsls	r3, r0, #1
 8005544:	0246      	lsls	r6, r0, #9
 8005546:	0fc4      	lsrs	r4, r0, #31
 8005548:	20fe      	movs	r0, #254	; 0xfe
 800554a:	0e1b      	lsrs	r3, r3, #24
 800554c:	1c59      	adds	r1, r3, #1
 800554e:	0a75      	lsrs	r5, r6, #9
 8005550:	4208      	tst	r0, r1
 8005552:	d00c      	beq.n	800556e <__aeabi_f2d+0x2e>
 8005554:	22e0      	movs	r2, #224	; 0xe0
 8005556:	0092      	lsls	r2, r2, #2
 8005558:	4694      	mov	ip, r2
 800555a:	076d      	lsls	r5, r5, #29
 800555c:	0b36      	lsrs	r6, r6, #12
 800555e:	4463      	add	r3, ip
 8005560:	051b      	lsls	r3, r3, #20
 8005562:	4333      	orrs	r3, r6
 8005564:	07e4      	lsls	r4, r4, #31
 8005566:	4323      	orrs	r3, r4
 8005568:	0028      	movs	r0, r5
 800556a:	0019      	movs	r1, r3
 800556c:	bd70      	pop	{r4, r5, r6, pc}
 800556e:	2b00      	cmp	r3, #0
 8005570:	d114      	bne.n	800559c <__aeabi_f2d+0x5c>
 8005572:	2d00      	cmp	r5, #0
 8005574:	d01b      	beq.n	80055ae <__aeabi_f2d+0x6e>
 8005576:	0028      	movs	r0, r5
 8005578:	f000 f8ec 	bl	8005754 <__clzsi2>
 800557c:	280a      	cmp	r0, #10
 800557e:	dc1c      	bgt.n	80055ba <__aeabi_f2d+0x7a>
 8005580:	230b      	movs	r3, #11
 8005582:	002e      	movs	r6, r5
 8005584:	1a1b      	subs	r3, r3, r0
 8005586:	40de      	lsrs	r6, r3
 8005588:	0003      	movs	r3, r0
 800558a:	3315      	adds	r3, #21
 800558c:	409d      	lsls	r5, r3
 800558e:	4a0e      	ldr	r2, [pc, #56]	; (80055c8 <__aeabi_f2d+0x88>)
 8005590:	0336      	lsls	r6, r6, #12
 8005592:	1a12      	subs	r2, r2, r0
 8005594:	0552      	lsls	r2, r2, #21
 8005596:	0b36      	lsrs	r6, r6, #12
 8005598:	0d53      	lsrs	r3, r2, #21
 800559a:	e7e1      	b.n	8005560 <__aeabi_f2d+0x20>
 800559c:	2d00      	cmp	r5, #0
 800559e:	d009      	beq.n	80055b4 <__aeabi_f2d+0x74>
 80055a0:	2280      	movs	r2, #128	; 0x80
 80055a2:	0b36      	lsrs	r6, r6, #12
 80055a4:	0312      	lsls	r2, r2, #12
 80055a6:	4b09      	ldr	r3, [pc, #36]	; (80055cc <__aeabi_f2d+0x8c>)
 80055a8:	076d      	lsls	r5, r5, #29
 80055aa:	4316      	orrs	r6, r2
 80055ac:	e7d8      	b.n	8005560 <__aeabi_f2d+0x20>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2600      	movs	r6, #0
 80055b2:	e7d5      	b.n	8005560 <__aeabi_f2d+0x20>
 80055b4:	2600      	movs	r6, #0
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <__aeabi_f2d+0x8c>)
 80055b8:	e7d2      	b.n	8005560 <__aeabi_f2d+0x20>
 80055ba:	0003      	movs	r3, r0
 80055bc:	3b0b      	subs	r3, #11
 80055be:	409d      	lsls	r5, r3
 80055c0:	002e      	movs	r6, r5
 80055c2:	2500      	movs	r5, #0
 80055c4:	e7e3      	b.n	800558e <__aeabi_f2d+0x4e>
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	00000389 	.word	0x00000389
 80055cc:	000007ff 	.word	0x000007ff

080055d0 <__aeabi_d2f>:
 80055d0:	0002      	movs	r2, r0
 80055d2:	004b      	lsls	r3, r1, #1
 80055d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d6:	0d5b      	lsrs	r3, r3, #21
 80055d8:	030c      	lsls	r4, r1, #12
 80055da:	4e3d      	ldr	r6, [pc, #244]	; (80056d0 <__aeabi_d2f+0x100>)
 80055dc:	0a64      	lsrs	r4, r4, #9
 80055de:	0f40      	lsrs	r0, r0, #29
 80055e0:	1c5f      	adds	r7, r3, #1
 80055e2:	0fc9      	lsrs	r1, r1, #31
 80055e4:	4304      	orrs	r4, r0
 80055e6:	00d5      	lsls	r5, r2, #3
 80055e8:	4237      	tst	r7, r6
 80055ea:	d00a      	beq.n	8005602 <__aeabi_d2f+0x32>
 80055ec:	4839      	ldr	r0, [pc, #228]	; (80056d4 <__aeabi_d2f+0x104>)
 80055ee:	181e      	adds	r6, r3, r0
 80055f0:	2efe      	cmp	r6, #254	; 0xfe
 80055f2:	dd16      	ble.n	8005622 <__aeabi_d2f+0x52>
 80055f4:	20ff      	movs	r0, #255	; 0xff
 80055f6:	2400      	movs	r4, #0
 80055f8:	05c0      	lsls	r0, r0, #23
 80055fa:	4320      	orrs	r0, r4
 80055fc:	07c9      	lsls	r1, r1, #31
 80055fe:	4308      	orrs	r0, r1
 8005600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <__aeabi_d2f+0x44>
 8005606:	432c      	orrs	r4, r5
 8005608:	d026      	beq.n	8005658 <__aeabi_d2f+0x88>
 800560a:	2205      	movs	r2, #5
 800560c:	0192      	lsls	r2, r2, #6
 800560e:	0a54      	lsrs	r4, r2, #9
 8005610:	b2d8      	uxtb	r0, r3
 8005612:	e7f1      	b.n	80055f8 <__aeabi_d2f+0x28>
 8005614:	4325      	orrs	r5, r4
 8005616:	d0ed      	beq.n	80055f4 <__aeabi_d2f+0x24>
 8005618:	2080      	movs	r0, #128	; 0x80
 800561a:	03c0      	lsls	r0, r0, #15
 800561c:	4304      	orrs	r4, r0
 800561e:	20ff      	movs	r0, #255	; 0xff
 8005620:	e7ea      	b.n	80055f8 <__aeabi_d2f+0x28>
 8005622:	2e00      	cmp	r6, #0
 8005624:	dd1b      	ble.n	800565e <__aeabi_d2f+0x8e>
 8005626:	0192      	lsls	r2, r2, #6
 8005628:	1e53      	subs	r3, r2, #1
 800562a:	419a      	sbcs	r2, r3
 800562c:	00e4      	lsls	r4, r4, #3
 800562e:	0f6d      	lsrs	r5, r5, #29
 8005630:	4322      	orrs	r2, r4
 8005632:	432a      	orrs	r2, r5
 8005634:	0753      	lsls	r3, r2, #29
 8005636:	d048      	beq.n	80056ca <__aeabi_d2f+0xfa>
 8005638:	230f      	movs	r3, #15
 800563a:	4013      	ands	r3, r2
 800563c:	2b04      	cmp	r3, #4
 800563e:	d000      	beq.n	8005642 <__aeabi_d2f+0x72>
 8005640:	3204      	adds	r2, #4
 8005642:	2380      	movs	r3, #128	; 0x80
 8005644:	04db      	lsls	r3, r3, #19
 8005646:	4013      	ands	r3, r2
 8005648:	d03f      	beq.n	80056ca <__aeabi_d2f+0xfa>
 800564a:	1c70      	adds	r0, r6, #1
 800564c:	2efe      	cmp	r6, #254	; 0xfe
 800564e:	d0d1      	beq.n	80055f4 <__aeabi_d2f+0x24>
 8005650:	0192      	lsls	r2, r2, #6
 8005652:	0a54      	lsrs	r4, r2, #9
 8005654:	b2c0      	uxtb	r0, r0
 8005656:	e7cf      	b.n	80055f8 <__aeabi_d2f+0x28>
 8005658:	2000      	movs	r0, #0
 800565a:	2400      	movs	r4, #0
 800565c:	e7cc      	b.n	80055f8 <__aeabi_d2f+0x28>
 800565e:	0032      	movs	r2, r6
 8005660:	3217      	adds	r2, #23
 8005662:	db22      	blt.n	80056aa <__aeabi_d2f+0xda>
 8005664:	2080      	movs	r0, #128	; 0x80
 8005666:	0400      	lsls	r0, r0, #16
 8005668:	4320      	orrs	r0, r4
 800566a:	241e      	movs	r4, #30
 800566c:	1ba4      	subs	r4, r4, r6
 800566e:	2c1f      	cmp	r4, #31
 8005670:	dd1d      	ble.n	80056ae <__aeabi_d2f+0xde>
 8005672:	2202      	movs	r2, #2
 8005674:	4252      	negs	r2, r2
 8005676:	1b96      	subs	r6, r2, r6
 8005678:	0002      	movs	r2, r0
 800567a:	40f2      	lsrs	r2, r6
 800567c:	0016      	movs	r6, r2
 800567e:	2c20      	cmp	r4, #32
 8005680:	d004      	beq.n	800568c <__aeabi_d2f+0xbc>
 8005682:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <__aeabi_d2f+0x108>)
 8005684:	4694      	mov	ip, r2
 8005686:	4463      	add	r3, ip
 8005688:	4098      	lsls	r0, r3
 800568a:	4305      	orrs	r5, r0
 800568c:	002a      	movs	r2, r5
 800568e:	1e53      	subs	r3, r2, #1
 8005690:	419a      	sbcs	r2, r3
 8005692:	4332      	orrs	r2, r6
 8005694:	2600      	movs	r6, #0
 8005696:	0753      	lsls	r3, r2, #29
 8005698:	d1ce      	bne.n	8005638 <__aeabi_d2f+0x68>
 800569a:	2480      	movs	r4, #128	; 0x80
 800569c:	0013      	movs	r3, r2
 800569e:	04e4      	lsls	r4, r4, #19
 80056a0:	2001      	movs	r0, #1
 80056a2:	4023      	ands	r3, r4
 80056a4:	4222      	tst	r2, r4
 80056a6:	d1d3      	bne.n	8005650 <__aeabi_d2f+0x80>
 80056a8:	e7b0      	b.n	800560c <__aeabi_d2f+0x3c>
 80056aa:	2300      	movs	r3, #0
 80056ac:	e7ad      	b.n	800560a <__aeabi_d2f+0x3a>
 80056ae:	4a0b      	ldr	r2, [pc, #44]	; (80056dc <__aeabi_d2f+0x10c>)
 80056b0:	4694      	mov	ip, r2
 80056b2:	002a      	movs	r2, r5
 80056b4:	40e2      	lsrs	r2, r4
 80056b6:	0014      	movs	r4, r2
 80056b8:	002a      	movs	r2, r5
 80056ba:	4463      	add	r3, ip
 80056bc:	409a      	lsls	r2, r3
 80056be:	4098      	lsls	r0, r3
 80056c0:	1e55      	subs	r5, r2, #1
 80056c2:	41aa      	sbcs	r2, r5
 80056c4:	4302      	orrs	r2, r0
 80056c6:	4322      	orrs	r2, r4
 80056c8:	e7e4      	b.n	8005694 <__aeabi_d2f+0xc4>
 80056ca:	0033      	movs	r3, r6
 80056cc:	e79e      	b.n	800560c <__aeabi_d2f+0x3c>
 80056ce:	46c0      	nop			; (mov r8, r8)
 80056d0:	000007fe 	.word	0x000007fe
 80056d4:	fffffc80 	.word	0xfffffc80
 80056d8:	fffffca2 	.word	0xfffffca2
 80056dc:	fffffc82 	.word	0xfffffc82

080056e0 <__aeabi_cfrcmple>:
 80056e0:	4684      	mov	ip, r0
 80056e2:	0008      	movs	r0, r1
 80056e4:	4661      	mov	r1, ip
 80056e6:	e7ff      	b.n	80056e8 <__aeabi_cfcmpeq>

080056e8 <__aeabi_cfcmpeq>:
 80056e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056ea:	f000 f8bd 	bl	8005868 <__lesf2>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d401      	bmi.n	80056f6 <__aeabi_cfcmpeq+0xe>
 80056f2:	2100      	movs	r1, #0
 80056f4:	42c8      	cmn	r0, r1
 80056f6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080056f8 <__aeabi_fcmpeq>:
 80056f8:	b510      	push	{r4, lr}
 80056fa:	f000 f849 	bl	8005790 <__eqsf2>
 80056fe:	4240      	negs	r0, r0
 8005700:	3001      	adds	r0, #1
 8005702:	bd10      	pop	{r4, pc}

08005704 <__aeabi_fcmplt>:
 8005704:	b510      	push	{r4, lr}
 8005706:	f000 f8af 	bl	8005868 <__lesf2>
 800570a:	2800      	cmp	r0, #0
 800570c:	db01      	blt.n	8005712 <__aeabi_fcmplt+0xe>
 800570e:	2000      	movs	r0, #0
 8005710:	bd10      	pop	{r4, pc}
 8005712:	2001      	movs	r0, #1
 8005714:	bd10      	pop	{r4, pc}
 8005716:	46c0      	nop			; (mov r8, r8)

08005718 <__aeabi_fcmple>:
 8005718:	b510      	push	{r4, lr}
 800571a:	f000 f8a5 	bl	8005868 <__lesf2>
 800571e:	2800      	cmp	r0, #0
 8005720:	dd01      	ble.n	8005726 <__aeabi_fcmple+0xe>
 8005722:	2000      	movs	r0, #0
 8005724:	bd10      	pop	{r4, pc}
 8005726:	2001      	movs	r0, #1
 8005728:	bd10      	pop	{r4, pc}
 800572a:	46c0      	nop			; (mov r8, r8)

0800572c <__aeabi_fcmpgt>:
 800572c:	b510      	push	{r4, lr}
 800572e:	f000 f855 	bl	80057dc <__gesf2>
 8005732:	2800      	cmp	r0, #0
 8005734:	dc01      	bgt.n	800573a <__aeabi_fcmpgt+0xe>
 8005736:	2000      	movs	r0, #0
 8005738:	bd10      	pop	{r4, pc}
 800573a:	2001      	movs	r0, #1
 800573c:	bd10      	pop	{r4, pc}
 800573e:	46c0      	nop			; (mov r8, r8)

08005740 <__aeabi_fcmpge>:
 8005740:	b510      	push	{r4, lr}
 8005742:	f000 f84b 	bl	80057dc <__gesf2>
 8005746:	2800      	cmp	r0, #0
 8005748:	da01      	bge.n	800574e <__aeabi_fcmpge+0xe>
 800574a:	2000      	movs	r0, #0
 800574c:	bd10      	pop	{r4, pc}
 800574e:	2001      	movs	r0, #1
 8005750:	bd10      	pop	{r4, pc}
 8005752:	46c0      	nop			; (mov r8, r8)

08005754 <__clzsi2>:
 8005754:	211c      	movs	r1, #28
 8005756:	2301      	movs	r3, #1
 8005758:	041b      	lsls	r3, r3, #16
 800575a:	4298      	cmp	r0, r3
 800575c:	d301      	bcc.n	8005762 <__clzsi2+0xe>
 800575e:	0c00      	lsrs	r0, r0, #16
 8005760:	3910      	subs	r1, #16
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	4298      	cmp	r0, r3
 8005766:	d301      	bcc.n	800576c <__clzsi2+0x18>
 8005768:	0a00      	lsrs	r0, r0, #8
 800576a:	3908      	subs	r1, #8
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	4298      	cmp	r0, r3
 8005770:	d301      	bcc.n	8005776 <__clzsi2+0x22>
 8005772:	0900      	lsrs	r0, r0, #4
 8005774:	3904      	subs	r1, #4
 8005776:	a202      	add	r2, pc, #8	; (adr r2, 8005780 <__clzsi2+0x2c>)
 8005778:	5c10      	ldrb	r0, [r2, r0]
 800577a:	1840      	adds	r0, r0, r1
 800577c:	4770      	bx	lr
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	02020304 	.word	0x02020304
 8005784:	01010101 	.word	0x01010101
	...

08005790 <__eqsf2>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	0042      	lsls	r2, r0, #1
 8005794:	0245      	lsls	r5, r0, #9
 8005796:	024e      	lsls	r6, r1, #9
 8005798:	004c      	lsls	r4, r1, #1
 800579a:	0fc3      	lsrs	r3, r0, #31
 800579c:	0a6d      	lsrs	r5, r5, #9
 800579e:	2001      	movs	r0, #1
 80057a0:	0e12      	lsrs	r2, r2, #24
 80057a2:	0a76      	lsrs	r6, r6, #9
 80057a4:	0e24      	lsrs	r4, r4, #24
 80057a6:	0fc9      	lsrs	r1, r1, #31
 80057a8:	2aff      	cmp	r2, #255	; 0xff
 80057aa:	d006      	beq.n	80057ba <__eqsf2+0x2a>
 80057ac:	2cff      	cmp	r4, #255	; 0xff
 80057ae:	d003      	beq.n	80057b8 <__eqsf2+0x28>
 80057b0:	42a2      	cmp	r2, r4
 80057b2:	d101      	bne.n	80057b8 <__eqsf2+0x28>
 80057b4:	42b5      	cmp	r5, r6
 80057b6:	d006      	beq.n	80057c6 <__eqsf2+0x36>
 80057b8:	bd70      	pop	{r4, r5, r6, pc}
 80057ba:	2d00      	cmp	r5, #0
 80057bc:	d1fc      	bne.n	80057b8 <__eqsf2+0x28>
 80057be:	2cff      	cmp	r4, #255	; 0xff
 80057c0:	d1fa      	bne.n	80057b8 <__eqsf2+0x28>
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	d1f8      	bne.n	80057b8 <__eqsf2+0x28>
 80057c6:	428b      	cmp	r3, r1
 80057c8:	d006      	beq.n	80057d8 <__eqsf2+0x48>
 80057ca:	2001      	movs	r0, #1
 80057cc:	2a00      	cmp	r2, #0
 80057ce:	d1f3      	bne.n	80057b8 <__eqsf2+0x28>
 80057d0:	0028      	movs	r0, r5
 80057d2:	1e43      	subs	r3, r0, #1
 80057d4:	4198      	sbcs	r0, r3
 80057d6:	e7ef      	b.n	80057b8 <__eqsf2+0x28>
 80057d8:	2000      	movs	r0, #0
 80057da:	e7ed      	b.n	80057b8 <__eqsf2+0x28>

080057dc <__gesf2>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	0042      	lsls	r2, r0, #1
 80057e0:	0245      	lsls	r5, r0, #9
 80057e2:	024e      	lsls	r6, r1, #9
 80057e4:	004c      	lsls	r4, r1, #1
 80057e6:	0fc3      	lsrs	r3, r0, #31
 80057e8:	0a6d      	lsrs	r5, r5, #9
 80057ea:	0e12      	lsrs	r2, r2, #24
 80057ec:	0a76      	lsrs	r6, r6, #9
 80057ee:	0e24      	lsrs	r4, r4, #24
 80057f0:	0fc8      	lsrs	r0, r1, #31
 80057f2:	2aff      	cmp	r2, #255	; 0xff
 80057f4:	d01b      	beq.n	800582e <__gesf2+0x52>
 80057f6:	2cff      	cmp	r4, #255	; 0xff
 80057f8:	d00e      	beq.n	8005818 <__gesf2+0x3c>
 80057fa:	2a00      	cmp	r2, #0
 80057fc:	d11b      	bne.n	8005836 <__gesf2+0x5a>
 80057fe:	2c00      	cmp	r4, #0
 8005800:	d101      	bne.n	8005806 <__gesf2+0x2a>
 8005802:	2e00      	cmp	r6, #0
 8005804:	d01c      	beq.n	8005840 <__gesf2+0x64>
 8005806:	2d00      	cmp	r5, #0
 8005808:	d00c      	beq.n	8005824 <__gesf2+0x48>
 800580a:	4283      	cmp	r3, r0
 800580c:	d01c      	beq.n	8005848 <__gesf2+0x6c>
 800580e:	2102      	movs	r1, #2
 8005810:	1e58      	subs	r0, r3, #1
 8005812:	4008      	ands	r0, r1
 8005814:	3801      	subs	r0, #1
 8005816:	bd70      	pop	{r4, r5, r6, pc}
 8005818:	2e00      	cmp	r6, #0
 800581a:	d122      	bne.n	8005862 <__gesf2+0x86>
 800581c:	2a00      	cmp	r2, #0
 800581e:	d1f4      	bne.n	800580a <__gesf2+0x2e>
 8005820:	2d00      	cmp	r5, #0
 8005822:	d1f2      	bne.n	800580a <__gesf2+0x2e>
 8005824:	2800      	cmp	r0, #0
 8005826:	d1f6      	bne.n	8005816 <__gesf2+0x3a>
 8005828:	2001      	movs	r0, #1
 800582a:	4240      	negs	r0, r0
 800582c:	e7f3      	b.n	8005816 <__gesf2+0x3a>
 800582e:	2d00      	cmp	r5, #0
 8005830:	d117      	bne.n	8005862 <__gesf2+0x86>
 8005832:	2cff      	cmp	r4, #255	; 0xff
 8005834:	d0f0      	beq.n	8005818 <__gesf2+0x3c>
 8005836:	2c00      	cmp	r4, #0
 8005838:	d1e7      	bne.n	800580a <__gesf2+0x2e>
 800583a:	2e00      	cmp	r6, #0
 800583c:	d1e5      	bne.n	800580a <__gesf2+0x2e>
 800583e:	e7e6      	b.n	800580e <__gesf2+0x32>
 8005840:	2000      	movs	r0, #0
 8005842:	2d00      	cmp	r5, #0
 8005844:	d0e7      	beq.n	8005816 <__gesf2+0x3a>
 8005846:	e7e2      	b.n	800580e <__gesf2+0x32>
 8005848:	42a2      	cmp	r2, r4
 800584a:	dc05      	bgt.n	8005858 <__gesf2+0x7c>
 800584c:	dbea      	blt.n	8005824 <__gesf2+0x48>
 800584e:	42b5      	cmp	r5, r6
 8005850:	d802      	bhi.n	8005858 <__gesf2+0x7c>
 8005852:	d3e7      	bcc.n	8005824 <__gesf2+0x48>
 8005854:	2000      	movs	r0, #0
 8005856:	e7de      	b.n	8005816 <__gesf2+0x3a>
 8005858:	4243      	negs	r3, r0
 800585a:	4158      	adcs	r0, r3
 800585c:	0040      	lsls	r0, r0, #1
 800585e:	3801      	subs	r0, #1
 8005860:	e7d9      	b.n	8005816 <__gesf2+0x3a>
 8005862:	2002      	movs	r0, #2
 8005864:	4240      	negs	r0, r0
 8005866:	e7d6      	b.n	8005816 <__gesf2+0x3a>

08005868 <__lesf2>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	0042      	lsls	r2, r0, #1
 800586c:	0245      	lsls	r5, r0, #9
 800586e:	024e      	lsls	r6, r1, #9
 8005870:	004c      	lsls	r4, r1, #1
 8005872:	0fc3      	lsrs	r3, r0, #31
 8005874:	0a6d      	lsrs	r5, r5, #9
 8005876:	0e12      	lsrs	r2, r2, #24
 8005878:	0a76      	lsrs	r6, r6, #9
 800587a:	0e24      	lsrs	r4, r4, #24
 800587c:	0fc8      	lsrs	r0, r1, #31
 800587e:	2aff      	cmp	r2, #255	; 0xff
 8005880:	d00b      	beq.n	800589a <__lesf2+0x32>
 8005882:	2cff      	cmp	r4, #255	; 0xff
 8005884:	d00d      	beq.n	80058a2 <__lesf2+0x3a>
 8005886:	2a00      	cmp	r2, #0
 8005888:	d11f      	bne.n	80058ca <__lesf2+0x62>
 800588a:	2c00      	cmp	r4, #0
 800588c:	d116      	bne.n	80058bc <__lesf2+0x54>
 800588e:	2e00      	cmp	r6, #0
 8005890:	d114      	bne.n	80058bc <__lesf2+0x54>
 8005892:	2000      	movs	r0, #0
 8005894:	2d00      	cmp	r5, #0
 8005896:	d010      	beq.n	80058ba <__lesf2+0x52>
 8005898:	e009      	b.n	80058ae <__lesf2+0x46>
 800589a:	2d00      	cmp	r5, #0
 800589c:	d10c      	bne.n	80058b8 <__lesf2+0x50>
 800589e:	2cff      	cmp	r4, #255	; 0xff
 80058a0:	d113      	bne.n	80058ca <__lesf2+0x62>
 80058a2:	2e00      	cmp	r6, #0
 80058a4:	d108      	bne.n	80058b8 <__lesf2+0x50>
 80058a6:	2a00      	cmp	r2, #0
 80058a8:	d008      	beq.n	80058bc <__lesf2+0x54>
 80058aa:	4283      	cmp	r3, r0
 80058ac:	d012      	beq.n	80058d4 <__lesf2+0x6c>
 80058ae:	2102      	movs	r1, #2
 80058b0:	1e58      	subs	r0, r3, #1
 80058b2:	4008      	ands	r0, r1
 80058b4:	3801      	subs	r0, #1
 80058b6:	e000      	b.n	80058ba <__lesf2+0x52>
 80058b8:	2002      	movs	r0, #2
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	2d00      	cmp	r5, #0
 80058be:	d1f4      	bne.n	80058aa <__lesf2+0x42>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d1fa      	bne.n	80058ba <__lesf2+0x52>
 80058c4:	2001      	movs	r0, #1
 80058c6:	4240      	negs	r0, r0
 80058c8:	e7f7      	b.n	80058ba <__lesf2+0x52>
 80058ca:	2c00      	cmp	r4, #0
 80058cc:	d1ed      	bne.n	80058aa <__lesf2+0x42>
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	d1eb      	bne.n	80058aa <__lesf2+0x42>
 80058d2:	e7ec      	b.n	80058ae <__lesf2+0x46>
 80058d4:	42a2      	cmp	r2, r4
 80058d6:	dc05      	bgt.n	80058e4 <__lesf2+0x7c>
 80058d8:	dbf2      	blt.n	80058c0 <__lesf2+0x58>
 80058da:	42b5      	cmp	r5, r6
 80058dc:	d802      	bhi.n	80058e4 <__lesf2+0x7c>
 80058de:	d3ef      	bcc.n	80058c0 <__lesf2+0x58>
 80058e0:	2000      	movs	r0, #0
 80058e2:	e7ea      	b.n	80058ba <__lesf2+0x52>
 80058e4:	4243      	negs	r3, r0
 80058e6:	4158      	adcs	r0, r3
 80058e8:	0040      	lsls	r0, r0, #1
 80058ea:	3801      	subs	r0, #1
 80058ec:	e7e5      	b.n	80058ba <__lesf2+0x52>
 80058ee:	46c0      	nop			; (mov r8, r8)

080058f0 <calcMA>:
			.size 		= 0,
			.lastEMA 	= 0
};

double calcMA(double previousAverage, unsigned int previousNumDays,
		double newStock) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60b8      	str	r0, [r7, #8]
 80058f8:	60f9      	str	r1, [r7, #12]
 80058fa:	607a      	str	r2, [r7, #4]

	double result = 0;
 80058fc:	2200      	movs	r2, #0
 80058fe:	2300      	movs	r3, #0
 8005900:	613a      	str	r2, [r7, #16]
 8005902:	617b      	str	r3, [r7, #20]
	result = previousNumDays * previousAverage + newStock;
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fdf5 	bl	80054f4 <__aeabi_ui2d>
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f7fe ff6f 	bl	80047f0 <__aeabi_dmul>
 8005912:	0002      	movs	r2, r0
 8005914:	000b      	movs	r3, r1
 8005916:	6a38      	ldr	r0, [r7, #32]
 8005918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591a:	f7fe f82b 	bl	8003974 <__aeabi_dadd>
 800591e:	0002      	movs	r2, r0
 8005920:	000b      	movs	r3, r1
 8005922:	613a      	str	r2, [r7, #16]
 8005924:	617b      	str	r3, [r7, #20]
	return result / (previousNumDays + 1.0);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff fde4 	bl	80054f4 <__aeabi_ui2d>
 800592c:	2200      	movs	r2, #0
 800592e:	4b08      	ldr	r3, [pc, #32]	; (8005950 <calcMA+0x60>)
 8005930:	f7fe f820 	bl	8003974 <__aeabi_dadd>
 8005934:	0002      	movs	r2, r0
 8005936:	000b      	movs	r3, r1
 8005938:	6938      	ldr	r0, [r7, #16]
 800593a:	6979      	ldr	r1, [r7, #20]
 800593c:	f7fe fb56 	bl	8003fec <__aeabi_ddiv>
 8005940:	0002      	movs	r2, r0
 8005942:	000b      	movs	r3, r1

}
 8005944:	0010      	movs	r0, r2
 8005946:	0019      	movs	r1, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	b006      	add	sp, #24
 800594c:	bd80      	pop	{r7, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	3ff00000 	.word	0x3ff00000

08005954 <calcEMA>:

double calcEMA(double previousAverage, int timePeriod, double newStock) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	60b8      	str	r0, [r7, #8]
 800595c:	60f9      	str	r1, [r7, #12]
 800595e:	607a      	str	r2, [r7, #4]
	double result = 0, mult = 0;
 8005960:	2200      	movs	r2, #0
 8005962:	2300      	movs	r3, #0
 8005964:	61ba      	str	r2, [r7, #24]
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	2200      	movs	r2, #0
 800596a:	2300      	movs	r3, #0
 800596c:	613a      	str	r2, [r7, #16]
 800596e:	617b      	str	r3, [r7, #20]
	mult = 2.0 / (timePeriod + 1.0);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fd8f 	bl	8005494 <__aeabi_i2d>
 8005976:	2200      	movs	r2, #0
 8005978:	4b16      	ldr	r3, [pc, #88]	; (80059d4 <calcEMA+0x80>)
 800597a:	f7fd fffb 	bl	8003974 <__aeabi_dadd>
 800597e:	0002      	movs	r2, r0
 8005980:	000b      	movs	r3, r1
 8005982:	2000      	movs	r0, #0
 8005984:	2180      	movs	r1, #128	; 0x80
 8005986:	05c9      	lsls	r1, r1, #23
 8005988:	f7fe fb30 	bl	8003fec <__aeabi_ddiv>
 800598c:	0002      	movs	r2, r0
 800598e:	000b      	movs	r3, r1
 8005990:	613a      	str	r2, [r7, #16]
 8005992:	617b      	str	r3, [r7, #20]
	result = (newStock - previousAverage) * mult + previousAverage;
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800599a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800599c:	f7ff f994 	bl	8004cc8 <__aeabi_dsub>
 80059a0:	0002      	movs	r2, r0
 80059a2:	000b      	movs	r3, r1
 80059a4:	0010      	movs	r0, r2
 80059a6:	0019      	movs	r1, r3
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f7fe ff20 	bl	80047f0 <__aeabi_dmul>
 80059b0:	0002      	movs	r2, r0
 80059b2:	000b      	movs	r3, r1
 80059b4:	68b8      	ldr	r0, [r7, #8]
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	f7fd ffdc 	bl	8003974 <__aeabi_dadd>
 80059bc:	0002      	movs	r2, r0
 80059be:	000b      	movs	r3, r1
 80059c0:	61ba      	str	r2, [r7, #24]
 80059c2:	61fb      	str	r3, [r7, #28]
	return result;
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	69fb      	ldr	r3, [r7, #28]

}
 80059c8:	0010      	movs	r0, r2
 80059ca:	0019      	movs	r1, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	b008      	add	sp, #32
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	3ff00000 	.word	0x3ff00000

080059d8 <addStock>:

void addStock(double newStock, EMA_t*EMA){
 80059d8:	b590      	push	{r4, r7, lr}
 80059da:	b087      	sub	sp, #28
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60b8      	str	r0, [r7, #8]
 80059e0:	60f9      	str	r1, [r7, #12]
 80059e2:	607a      	str	r2, [r7, #4]
	EMA->size++;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	605a      	str	r2, [r3, #4]
	if(EMA->size < EMA->timePreiod){
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	8812      	ldrh	r2, [r2, #0]
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d212      	bcs.n	8005a20 <addStock+0x48>
		EMA->lastEMA = calcMA(EMA->lastEMA, EMA->size -1 , newStock);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6898      	ldr	r0, [r3, #8]
 80059fe:	68d9      	ldr	r1, [r3, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	1e5c      	subs	r4, r3, #1
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	9200      	str	r2, [sp, #0]
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	0022      	movs	r2, r4
 8005a10:	f7ff ff6e 	bl	80058f0 <calcMA>
 8005a14:	0002      	movs	r2, r0
 8005a16:	000b      	movs	r3, r1
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	608a      	str	r2, [r1, #8]
 8005a1c:	60cb      	str	r3, [r1, #12]
	}
	else{
		EMA->lastEMA = calcEMA(EMA->lastEMA, EMA->timePreiod, newStock);
	}
}
 8005a1e:	e011      	b.n	8005a44 <addStock+0x6c>
		EMA->lastEMA = calcEMA(EMA->lastEMA, EMA->timePreiod, newStock);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6898      	ldr	r0, [r3, #8]
 8005a24:	68d9      	ldr	r1, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	001c      	movs	r4, r3
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	9200      	str	r2, [sp, #0]
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	0022      	movs	r2, r4
 8005a36:	f7ff ff8d 	bl	8005954 <calcEMA>
 8005a3a:	0002      	movs	r2, r0
 8005a3c:	000b      	movs	r3, r1
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	608a      	str	r2, [r1, #8]
 8005a42:	60cb      	str	r3, [r1, #12]
}
 8005a44:	46c0      	nop			; (mov r8, r8)
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b005      	add	sp, #20
 8005a4a:	bd90      	pop	{r4, r7, pc}

08005a4c <Start_Kalman_Algorithm>:
static float Calculated_Pitch, Calculated_Roll, Calculated_yaw,Tick_frequency;

extern void IWDT_clear(void);

void Start_Kalman_Algorithm(float executeMaxTicks, float timebase)
{
 8005a4c:	b5b0      	push	{r4, r5, r7, lr}
 8005a4e:	b08e      	sub	sp, #56	; 0x38
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
    double accX, accY, accZ; 
  
    /* We will set the variables like so, these can also be tuned by the user */
    KalmanX.Q_angle      = 0.001f;
 8005a56:	4b5d      	ldr	r3, [pc, #372]	; (8005bcc <Start_Kalman_Algorithm+0x180>)
 8005a58:	4a5d      	ldr	r2, [pc, #372]	; (8005bd0 <Start_Kalman_Algorithm+0x184>)
 8005a5a:	601a      	str	r2, [r3, #0]
    KalmanX.Q_bias       = 0.003f;
 8005a5c:	4b5b      	ldr	r3, [pc, #364]	; (8005bcc <Start_Kalman_Algorithm+0x180>)
 8005a5e:	4a5d      	ldr	r2, [pc, #372]	; (8005bd4 <Start_Kalman_Algorithm+0x188>)
 8005a60:	605a      	str	r2, [r3, #4]
    KalmanX.R_measure    = 0.03f;
 8005a62:	4b5a      	ldr	r3, [pc, #360]	; (8005bcc <Start_Kalman_Algorithm+0x180>)
 8005a64:	4a5c      	ldr	r2, [pc, #368]	; (8005bd8 <Start_Kalman_Algorithm+0x18c>)
 8005a66:	609a      	str	r2, [r3, #8]
    KalmanX.angle        = 0.0f;     
 8005a68:	4b58      	ldr	r3, [pc, #352]	; (8005bcc <Start_Kalman_Algorithm+0x180>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	60da      	str	r2, [r3, #12]
    KalmanX.bias         = 0.0f;
 8005a6e:	4b57      	ldr	r3, [pc, #348]	; (8005bcc <Start_Kalman_Algorithm+0x180>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	611a      	str	r2, [r3, #16]
    KalmanX.P[0][0]      = 0.0f; 
 8005a74:	4b55      	ldr	r3, [pc, #340]	; (8005bcc <Start_Kalman_Algorithm+0x180>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	619a      	str	r2, [r3, #24]
    KalmanX.P[0][1]      = 0.0f;
 8005a7a:	4b54      	ldr	r3, [pc, #336]	; (8005bcc <Start_Kalman_Algorithm+0x180>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	61da      	str	r2, [r3, #28]
    KalmanX.P[1][0]      = 0.0f;
 8005a80:	4b52      	ldr	r3, [pc, #328]	; (8005bcc <Start_Kalman_Algorithm+0x180>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	621a      	str	r2, [r3, #32]
    KalmanX.P[1][1]      = 0.0f;
 8005a86:	4b51      	ldr	r3, [pc, #324]	; (8005bcc <Start_Kalman_Algorithm+0x180>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	625a      	str	r2, [r3, #36]	; 0x24
    
    KalmanY.Q_angle      = 0.001f;
 8005a8c:	4b53      	ldr	r3, [pc, #332]	; (8005bdc <Start_Kalman_Algorithm+0x190>)
 8005a8e:	4a50      	ldr	r2, [pc, #320]	; (8005bd0 <Start_Kalman_Algorithm+0x184>)
 8005a90:	601a      	str	r2, [r3, #0]
    KalmanY.Q_bias       = 0.003f;
 8005a92:	4b52      	ldr	r3, [pc, #328]	; (8005bdc <Start_Kalman_Algorithm+0x190>)
 8005a94:	4a4f      	ldr	r2, [pc, #316]	; (8005bd4 <Start_Kalman_Algorithm+0x188>)
 8005a96:	605a      	str	r2, [r3, #4]
    KalmanY.R_measure    = 0.03f;
 8005a98:	4b50      	ldr	r3, [pc, #320]	; (8005bdc <Start_Kalman_Algorithm+0x190>)
 8005a9a:	4a4f      	ldr	r2, [pc, #316]	; (8005bd8 <Start_Kalman_Algorithm+0x18c>)
 8005a9c:	609a      	str	r2, [r3, #8]
    KalmanY.angle        = 0.0f;     
 8005a9e:	4b4f      	ldr	r3, [pc, #316]	; (8005bdc <Start_Kalman_Algorithm+0x190>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	60da      	str	r2, [r3, #12]
    KalmanY.bias         = 0.0f;
 8005aa4:	4b4d      	ldr	r3, [pc, #308]	; (8005bdc <Start_Kalman_Algorithm+0x190>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]
    KalmanY.P[0][0]      = 0.0f; 
 8005aaa:	4b4c      	ldr	r3, [pc, #304]	; (8005bdc <Start_Kalman_Algorithm+0x190>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	619a      	str	r2, [r3, #24]
    KalmanY.P[0][1]      = 0.0f;
 8005ab0:	4b4a      	ldr	r3, [pc, #296]	; (8005bdc <Start_Kalman_Algorithm+0x190>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	61da      	str	r2, [r3, #28]
    KalmanY.P[1][0]      = 0.0f;
 8005ab6:	4b49      	ldr	r3, [pc, #292]	; (8005bdc <Start_Kalman_Algorithm+0x190>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	621a      	str	r2, [r3, #32]
    KalmanY.P[1][1]      = 0.0f;
 8005abc:	4b47      	ldr	r3, [pc, #284]	; (8005bdc <Start_Kalman_Algorithm+0x190>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24
    
    
    LSM6DS3_IMU_GetMeasurements();
 8005ac2:	f000 fe37 	bl	8006734 <LSM6DS3_IMU_GetMeasurements>
    accX =   LSM6DS3_GetXL_X_Int16();
 8005ac6:	f000 fe9f 	bl	8006808 <LSM6DS3_GetXL_X_Int16>
 8005aca:	0003      	movs	r3, r0
 8005acc:	0018      	movs	r0, r3
 8005ace:	f7ff fce1 	bl	8005494 <__aeabi_i2d>
 8005ad2:	0002      	movs	r2, r0
 8005ad4:	000b      	movs	r3, r1
 8005ad6:	633a      	str	r2, [r7, #48]	; 0x30
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34
    accY =   LSM6DS3_GetXL_Y_Int16();
 8005ada:	f000 fe9f 	bl	800681c <LSM6DS3_GetXL_Y_Int16>
 8005ade:	0003      	movs	r3, r0
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7ff fcd7 	bl	8005494 <__aeabi_i2d>
 8005ae6:	0002      	movs	r2, r0
 8005ae8:	000b      	movs	r3, r1
 8005aea:	62ba      	str	r2, [r7, #40]	; 0x28
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    accZ =   LSM6DS3_GetXL_Z_Int16();
 8005aee:	f000 fe9f 	bl	8006830 <LSM6DS3_GetXL_Z_Int16>
 8005af2:	0003      	movs	r3, r0
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7ff fccd 	bl	8005494 <__aeabi_i2d>
 8005afa:	0002      	movs	r2, r0
 8005afc:	000b      	movs	r3, r1
 8005afe:	623a      	str	r2, [r7, #32]
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
    
    #ifdef RESTRICT_PITCH
        double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b0a:	f006 ffca 	bl	800caa2 <atan2>
 8005b0e:	2280      	movs	r2, #128	; 0x80
 8005b10:	0592      	lsls	r2, r2, #22
 8005b12:	4b33      	ldr	r3, [pc, #204]	; (8005be0 <Start_Kalman_Algorithm+0x194>)
 8005b14:	f7fe fe6c 	bl	80047f0 <__aeabi_dmul>
 8005b18:	0002      	movs	r2, r0
 8005b1a:	000b      	movs	r3, r1
 8005b1c:	61ba      	str	r2, [r7, #24]
 8005b1e:	61fb      	str	r3, [r7, #28]
        double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	001c      	movs	r4, r3
 8005b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b26:	2280      	movs	r2, #128	; 0x80
 8005b28:	0612      	lsls	r2, r2, #24
 8005b2a:	405a      	eors	r2, r3
 8005b2c:	0015      	movs	r5, r2
 8005b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b36:	f7fe fe5b 	bl	80047f0 <__aeabi_dmul>
 8005b3a:	0002      	movs	r2, r0
 8005b3c:	000b      	movs	r3, r1
 8005b3e:	603a      	str	r2, [r7, #0]
 8005b40:	607b      	str	r3, [r7, #4]
 8005b42:	6a3a      	ldr	r2, [r7, #32]
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	6a38      	ldr	r0, [r7, #32]
 8005b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b4a:	f7fe fe51 	bl	80047f0 <__aeabi_dmul>
 8005b4e:	0002      	movs	r2, r0
 8005b50:	000b      	movs	r3, r1
 8005b52:	6838      	ldr	r0, [r7, #0]
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	f7fd ff0d 	bl	8003974 <__aeabi_dadd>
 8005b5a:	0002      	movs	r2, r0
 8005b5c:	000b      	movs	r3, r1
 8005b5e:	0010      	movs	r0, r2
 8005b60:	0019      	movs	r1, r3
 8005b62:	f006 ffa2 	bl	800caaa <sqrt>
 8005b66:	0002      	movs	r2, r0
 8005b68:	000b      	movs	r3, r1
 8005b6a:	0020      	movs	r0, r4
 8005b6c:	0029      	movs	r1, r5
 8005b6e:	f7fe fa3d 	bl	8003fec <__aeabi_ddiv>
 8005b72:	0002      	movs	r2, r0
 8005b74:	000b      	movs	r3, r1
 8005b76:	0010      	movs	r0, r2
 8005b78:	0019      	movs	r1, r3
 8005b7a:	f006 fe0f 	bl	800c79c <atan>
 8005b7e:	2280      	movs	r2, #128	; 0x80
 8005b80:	0592      	lsls	r2, r2, #22
 8005b82:	4b17      	ldr	r3, [pc, #92]	; (8005be0 <Start_Kalman_Algorithm+0x194>)
 8005b84:	f7fe fe34 	bl	80047f0 <__aeabi_dmul>
 8005b88:	0002      	movs	r2, r0
 8005b8a:	000b      	movs	r3, r1
 8005b8c:	613a      	str	r2, [r7, #16]
 8005b8e:	617b      	str	r3, [r7, #20]
    #else 
        double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
        double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
    #endif
    
   KalmanX.angle    = roll;
 8005b90:	69b8      	ldr	r0, [r7, #24]
 8005b92:	69f9      	ldr	r1, [r7, #28]
 8005b94:	f7ff fd1c 	bl	80055d0 <__aeabi_d2f>
 8005b98:	1c02      	adds	r2, r0, #0
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <Start_Kalman_Algorithm+0x180>)
 8005b9c:	60da      	str	r2, [r3, #12]
   KalmanY.angle 	= pitch;
 8005b9e:	6938      	ldr	r0, [r7, #16]
 8005ba0:	6979      	ldr	r1, [r7, #20]
 8005ba2:	f7ff fd15 	bl	80055d0 <__aeabi_d2f>
 8005ba6:	1c02      	adds	r2, r0, #0
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <Start_Kalman_Algorithm+0x190>)
 8005baa:	60da      	str	r2, [r3, #12]
   Tick_frequency	= timebase;
 8005bac:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <Start_Kalman_Algorithm+0x198>)
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	601a      	str	r2, [r3, #0]
   ExecuteMax	    = executeMaxTicks;
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7fd f86e 	bl	8002c94 <__aeabi_f2uiz>
 8005bb8:	0002      	movs	r2, r0
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <Start_Kalman_Algorithm+0x19c>)
 8005bbc:	601a      	str	r2, [r3, #0]
   Kalman_Timer  	= 0;
 8005bbe:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <Start_Kalman_Algorithm+0x1a0>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b00e      	add	sp, #56	; 0x38
 8005bca:	bdb0      	pop	{r4, r5, r7, pc}
 8005bcc:	2000013c 	.word	0x2000013c
 8005bd0:	3a83126f 	.word	0x3a83126f
 8005bd4:	3b449ba6 	.word	0x3b449ba6
 8005bd8:	3cf5c28f 	.word	0x3cf5c28f
 8005bdc:	20000164 	.word	0x20000164
 8005be0:	404ca5dc 	.word	0x404ca5dc
 8005be4:	200001b0 	.word	0x200001b0
 8005be8:	2000019c 	.word	0x2000019c
 8005bec:	20000198 	.word	0x20000198

08005bf0 <Execute_Kalman_Filter>:
   
	double accX, accY, accZ;
	double gyroX,gyroY,gyroZ;

void Execute_Kalman_Filter(void) 
{
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf2:	46c6      	mov	lr, r8
 8005bf4:	b500      	push	{lr}
 8005bf6:	b094      	sub	sp, #80	; 0x50
 8005bf8:	af00      	add	r7, sp, #0
  double timing_kalman;
  double kalAngleX=0;
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  double kalAngleY=0;
 8005c02:	2200      	movs	r2, #0
 8005c04:	2300      	movs	r3, #0
 8005c06:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c08:	63fb      	str	r3, [r7, #60]	; 0x3c
	//double accX, accY, accZ;
	//double gyroX,gyroY,gyroZ;
  static uint32_t current_time,last_time = 0;

  current_time = Kalman_GetTick();
 8005c0a:	f000 f9f9 	bl	8006000 <Kalman_GetTick>
 8005c0e:	0002      	movs	r2, r0
 8005c10:	4bd7      	ldr	r3, [pc, #860]	; (8005f70 <Execute_Kalman_Filter+0x380>)
 8005c12:	601a      	str	r2, [r3, #0]
  timing_kalman = (double) (((uint32_t)(current_time - last_time)) / Tick_frequency);
 8005c14:	4bd6      	ldr	r3, [pc, #856]	; (8005f70 <Execute_Kalman_Filter+0x380>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	4bd6      	ldr	r3, [pc, #856]	; (8005f74 <Execute_Kalman_Filter+0x384>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7fd fe66 	bl	80038f0 <__aeabi_ui2f>
 8005c24:	1c02      	adds	r2, r0, #0
 8005c26:	4bd4      	ldr	r3, [pc, #848]	; (8005f78 <Execute_Kalman_Filter+0x388>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	1c19      	adds	r1, r3, #0
 8005c2c:	1c10      	adds	r0, r2, #0
 8005c2e:	f7fd fa05 	bl	800303c <__aeabi_fdiv>
 8005c32:	1c03      	adds	r3, r0, #0
 8005c34:	1c18      	adds	r0, r3, #0
 8005c36:	f7ff fc83 	bl	8005540 <__aeabi_f2d>
 8005c3a:	0002      	movs	r2, r0
 8005c3c:	000b      	movs	r3, r1
 8005c3e:	633a      	str	r2, [r7, #48]	; 0x30
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
  last_time = current_time;
 8005c42:	4bcb      	ldr	r3, [pc, #812]	; (8005f70 <Execute_Kalman_Filter+0x380>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4bcb      	ldr	r3, [pc, #812]	; (8005f74 <Execute_Kalman_Filter+0x384>)
 8005c48:	601a      	str	r2, [r3, #0]

  accX  = LSM6DS3_GetXL_X_Int16();
 8005c4a:	f000 fddd 	bl	8006808 <LSM6DS3_GetXL_X_Int16>
 8005c4e:	0003      	movs	r3, r0
 8005c50:	0018      	movs	r0, r3
 8005c52:	f7ff fc1f 	bl	8005494 <__aeabi_i2d>
 8005c56:	0002      	movs	r2, r0
 8005c58:	000b      	movs	r3, r1
 8005c5a:	49c8      	ldr	r1, [pc, #800]	; (8005f7c <Execute_Kalman_Filter+0x38c>)
 8005c5c:	600a      	str	r2, [r1, #0]
 8005c5e:	604b      	str	r3, [r1, #4]
  accY  = LSM6DS3_GetXL_Y_Int16();
 8005c60:	f000 fddc 	bl	800681c <LSM6DS3_GetXL_Y_Int16>
 8005c64:	0003      	movs	r3, r0
 8005c66:	0018      	movs	r0, r3
 8005c68:	f7ff fc14 	bl	8005494 <__aeabi_i2d>
 8005c6c:	0002      	movs	r2, r0
 8005c6e:	000b      	movs	r3, r1
 8005c70:	49c3      	ldr	r1, [pc, #780]	; (8005f80 <Execute_Kalman_Filter+0x390>)
 8005c72:	600a      	str	r2, [r1, #0]
 8005c74:	604b      	str	r3, [r1, #4]
  accZ  = LSM6DS3_GetXL_Z_Int16();
 8005c76:	f000 fddb 	bl	8006830 <LSM6DS3_GetXL_Z_Int16>
 8005c7a:	0003      	movs	r3, r0
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7ff fc09 	bl	8005494 <__aeabi_i2d>
 8005c82:	0002      	movs	r2, r0
 8005c84:	000b      	movs	r3, r1
 8005c86:	49bf      	ldr	r1, [pc, #764]	; (8005f84 <Execute_Kalman_Filter+0x394>)
 8005c88:	600a      	str	r2, [r1, #0]
 8005c8a:	604b      	str	r3, [r1, #4]
  gyroX = LSM6DS3_GetGS_X_Int16();
 8005c8c:	f000 fdda 	bl	8006844 <LSM6DS3_GetGS_X_Int16>
 8005c90:	0003      	movs	r3, r0
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7ff fbfe 	bl	8005494 <__aeabi_i2d>
 8005c98:	0002      	movs	r2, r0
 8005c9a:	000b      	movs	r3, r1
 8005c9c:	49ba      	ldr	r1, [pc, #744]	; (8005f88 <Execute_Kalman_Filter+0x398>)
 8005c9e:	600a      	str	r2, [r1, #0]
 8005ca0:	604b      	str	r3, [r1, #4]
  gyroY = LSM6DS3_GetGS_Y_Int16();
 8005ca2:	f000 fdd9 	bl	8006858 <LSM6DS3_GetGS_Y_Int16>
 8005ca6:	0003      	movs	r3, r0
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7ff fbf3 	bl	8005494 <__aeabi_i2d>
 8005cae:	0002      	movs	r2, r0
 8005cb0:	000b      	movs	r3, r1
 8005cb2:	49b6      	ldr	r1, [pc, #728]	; (8005f8c <Execute_Kalman_Filter+0x39c>)
 8005cb4:	600a      	str	r2, [r1, #0]
 8005cb6:	604b      	str	r3, [r1, #4]
  gyroZ = LSM6DS3_GetGS_Z_Int16();
 8005cb8:	f000 fdd8 	bl	800686c <LSM6DS3_GetGS_Z_Int16>
 8005cbc:	0003      	movs	r3, r0
 8005cbe:	0018      	movs	r0, r3
 8005cc0:	f7ff fbe8 	bl	8005494 <__aeabi_i2d>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	000b      	movs	r3, r1
 8005cc8:	49b1      	ldr	r1, [pc, #708]	; (8005f90 <Execute_Kalman_Filter+0x3a0>)
 8005cca:	600a      	str	r2, [r1, #0]
 8005ccc:	604b      	str	r3, [r1, #4]

  #ifdef RESTRICT_PITCH
    double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 8005cce:	4bac      	ldr	r3, [pc, #688]	; (8005f80 <Execute_Kalman_Filter+0x390>)
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	6859      	ldr	r1, [r3, #4]
 8005cd4:	4bab      	ldr	r3, [pc, #684]	; (8005f84 <Execute_Kalman_Filter+0x394>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f006 fee2 	bl	800caa2 <atan2>
 8005cde:	2280      	movs	r2, #128	; 0x80
 8005ce0:	0592      	lsls	r2, r2, #22
 8005ce2:	4bac      	ldr	r3, [pc, #688]	; (8005f94 <Execute_Kalman_Filter+0x3a4>)
 8005ce4:	f7fe fd84 	bl	80047f0 <__aeabi_dmul>
 8005ce8:	0002      	movs	r2, r0
 8005cea:	000b      	movs	r3, r1
 8005cec:	62ba      	str	r2, [r7, #40]	; 0x28
 8005cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 8005cf0:	4ba2      	ldr	r3, [pc, #648]	; (8005f7c <Execute_Kalman_Filter+0x38c>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	0011      	movs	r1, r2
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	2180      	movs	r1, #128	; 0x80
 8005cfc:	0609      	lsls	r1, r1, #24
 8005cfe:	4059      	eors	r1, r3
 8005d00:	60f9      	str	r1, [r7, #12]
 8005d02:	4b9f      	ldr	r3, [pc, #636]	; (8005f80 <Execute_Kalman_Filter+0x390>)
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	6859      	ldr	r1, [r3, #4]
 8005d08:	4b9d      	ldr	r3, [pc, #628]	; (8005f80 <Execute_Kalman_Filter+0x390>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f7fe fd6f 	bl	80047f0 <__aeabi_dmul>
 8005d12:	0002      	movs	r2, r0
 8005d14:	000b      	movs	r3, r1
 8005d16:	603a      	str	r2, [r7, #0]
 8005d18:	607b      	str	r3, [r7, #4]
 8005d1a:	4b9a      	ldr	r3, [pc, #616]	; (8005f84 <Execute_Kalman_Filter+0x394>)
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	6859      	ldr	r1, [r3, #4]
 8005d20:	4b98      	ldr	r3, [pc, #608]	; (8005f84 <Execute_Kalman_Filter+0x394>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f7fe fd63 	bl	80047f0 <__aeabi_dmul>
 8005d2a:	0002      	movs	r2, r0
 8005d2c:	000b      	movs	r3, r1
 8005d2e:	6838      	ldr	r0, [r7, #0]
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	f7fd fe1f 	bl	8003974 <__aeabi_dadd>
 8005d36:	0002      	movs	r2, r0
 8005d38:	000b      	movs	r3, r1
 8005d3a:	0010      	movs	r0, r2
 8005d3c:	0019      	movs	r1, r3
 8005d3e:	f006 feb4 	bl	800caaa <sqrt>
 8005d42:	0002      	movs	r2, r0
 8005d44:	000b      	movs	r3, r1
 8005d46:	68b8      	ldr	r0, [r7, #8]
 8005d48:	68f9      	ldr	r1, [r7, #12]
 8005d4a:	f7fe f94f 	bl	8003fec <__aeabi_ddiv>
 8005d4e:	0002      	movs	r2, r0
 8005d50:	000b      	movs	r3, r1
 8005d52:	0010      	movs	r0, r2
 8005d54:	0019      	movs	r1, r3
 8005d56:	f006 fd21 	bl	800c79c <atan>
 8005d5a:	2280      	movs	r2, #128	; 0x80
 8005d5c:	0592      	lsls	r2, r2, #22
 8005d5e:	4b8d      	ldr	r3, [pc, #564]	; (8005f94 <Execute_Kalman_Filter+0x3a4>)
 8005d60:	f7fe fd46 	bl	80047f0 <__aeabi_dmul>
 8005d64:	0002      	movs	r2, r0
 8005d66:	000b      	movs	r3, r1
 8005d68:	623a      	str	r2, [r7, #32]
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
  #else // Eq. 28 and 29
    double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
    double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
  #endif
       
	double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
 8005d6c:	4b86      	ldr	r3, [pc, #536]	; (8005f88 <Execute_Kalman_Filter+0x398>)
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	6859      	ldr	r1, [r3, #4]
 8005d72:	2280      	movs	r2, #128	; 0x80
 8005d74:	05d2      	lsls	r2, r2, #23
 8005d76:	4b88      	ldr	r3, [pc, #544]	; (8005f98 <Execute_Kalman_Filter+0x3a8>)
 8005d78:	f7fe fd3a 	bl	80047f0 <__aeabi_dmul>
 8005d7c:	0002      	movs	r2, r0
 8005d7e:	000b      	movs	r3, r1
 8005d80:	61ba      	str	r2, [r7, #24]
 8005d82:	61fb      	str	r3, [r7, #28]
	double gyroYrate = gyroY * 0.007f; /* Convert to deg/s */
 8005d84:	4b81      	ldr	r3, [pc, #516]	; (8005f8c <Execute_Kalman_Filter+0x39c>)
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	6859      	ldr	r1, [r3, #4]
 8005d8a:	2280      	movs	r2, #128	; 0x80
 8005d8c:	05d2      	lsls	r2, r2, #23
 8005d8e:	4b82      	ldr	r3, [pc, #520]	; (8005f98 <Execute_Kalman_Filter+0x3a8>)
 8005d90:	f7fe fd2e 	bl	80047f0 <__aeabi_dmul>
 8005d94:	0002      	movs	r2, r0
 8005d96:	000b      	movs	r3, r1
 8005d98:	643a      	str	r2, [r7, #64]	; 0x40
 8005d9a:	647b      	str	r3, [r7, #68]	; 0x44
	double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
 8005d9c:	4b7c      	ldr	r3, [pc, #496]	; (8005f90 <Execute_Kalman_Filter+0x3a0>)
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	4b7e      	ldr	r3, [pc, #504]	; (8005f9c <Execute_Kalman_Filter+0x3ac>)
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f7fe ff8e 	bl	8004cc8 <__aeabi_dsub>
 8005dac:	0002      	movs	r2, r0
 8005dae:	000b      	movs	r3, r1
 8005db0:	0010      	movs	r0, r2
 8005db2:	0019      	movs	r1, r3
 8005db4:	2280      	movs	r2, #128	; 0x80
 8005db6:	05d2      	lsls	r2, r2, #23
 8005db8:	4b77      	ldr	r3, [pc, #476]	; (8005f98 <Execute_Kalman_Filter+0x3a8>)
 8005dba:	f7fe fd19 	bl	80047f0 <__aeabi_dmul>
 8005dbe:	0002      	movs	r2, r0
 8005dc0:	000b      	movs	r3, r1
 8005dc2:	613a      	str	r2, [r7, #16]
 8005dc4:	617b      	str	r3, [r7, #20]
	kalAngleZ = kalAngleZ+gyroZrate*timing_kalman;
 8005dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dca:	6938      	ldr	r0, [r7, #16]
 8005dcc:	6979      	ldr	r1, [r7, #20]
 8005dce:	f7fe fd0f 	bl	80047f0 <__aeabi_dmul>
 8005dd2:	0002      	movs	r2, r0
 8005dd4:	000b      	movs	r3, r1
 8005dd6:	0010      	movs	r0, r2
 8005dd8:	0019      	movs	r1, r3
 8005dda:	4b71      	ldr	r3, [pc, #452]	; (8005fa0 <Execute_Kalman_Filter+0x3b0>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f7fd fdc8 	bl	8003974 <__aeabi_dadd>
 8005de4:	0002      	movs	r2, r0
 8005de6:	000b      	movs	r3, r1
 8005de8:	496d      	ldr	r1, [pc, #436]	; (8005fa0 <Execute_Kalman_Filter+0x3b0>)
 8005dea:	600a      	str	r2, [r1, #0]
 8005dec:	604b      	str	r3, [r1, #4]

	if(kalAngleZ>360){
 8005dee:	4b6c      	ldr	r3, [pc, #432]	; (8005fa0 <Execute_Kalman_Filter+0x3b0>)
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	6859      	ldr	r1, [r3, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	4b6b      	ldr	r3, [pc, #428]	; (8005fa4 <Execute_Kalman_Filter+0x3b4>)
 8005df8:	f7fc ff38 	bl	8002c6c <__aeabi_dcmpgt>
 8005dfc:	1e03      	subs	r3, r0, #0
 8005dfe:	d00c      	beq.n	8005e1a <Execute_Kalman_Filter+0x22a>
		kalAngleZ-=360;
 8005e00:	4b67      	ldr	r3, [pc, #412]	; (8005fa0 <Execute_Kalman_Filter+0x3b0>)
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	6859      	ldr	r1, [r3, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	4b66      	ldr	r3, [pc, #408]	; (8005fa4 <Execute_Kalman_Filter+0x3b4>)
 8005e0a:	f7fe ff5d 	bl	8004cc8 <__aeabi_dsub>
 8005e0e:	0002      	movs	r2, r0
 8005e10:	000b      	movs	r3, r1
 8005e12:	4963      	ldr	r1, [pc, #396]	; (8005fa0 <Execute_Kalman_Filter+0x3b0>)
 8005e14:	600a      	str	r2, [r1, #0]
 8005e16:	604b      	str	r3, [r1, #4]
 8005e18:	e014      	b.n	8005e44 <Execute_Kalman_Filter+0x254>
	}
	else if(kalAngleZ<-360){
 8005e1a:	4b61      	ldr	r3, [pc, #388]	; (8005fa0 <Execute_Kalman_Filter+0x3b0>)
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	6859      	ldr	r1, [r3, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	4b61      	ldr	r3, [pc, #388]	; (8005fa8 <Execute_Kalman_Filter+0x3b8>)
 8005e24:	f7fc ff0e 	bl	8002c44 <__aeabi_dcmplt>
 8005e28:	1e03      	subs	r3, r0, #0
 8005e2a:	d00b      	beq.n	8005e44 <Execute_Kalman_Filter+0x254>
		kalAngleZ+=360;
 8005e2c:	4b5c      	ldr	r3, [pc, #368]	; (8005fa0 <Execute_Kalman_Filter+0x3b0>)
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	4b5b      	ldr	r3, [pc, #364]	; (8005fa4 <Execute_Kalman_Filter+0x3b4>)
 8005e36:	f7fd fd9d 	bl	8003974 <__aeabi_dadd>
 8005e3a:	0002      	movs	r2, r0
 8005e3c:	000b      	movs	r3, r1
 8005e3e:	4958      	ldr	r1, [pc, #352]	; (8005fa0 <Execute_Kalman_Filter+0x3b0>)
 8005e40:	600a      	str	r2, [r1, #0]
 8005e42:	604b      	str	r3, [r1, #4]
	}

  #ifdef RESTRICT_PITCH
  /* This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees */
  if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90)) 
 8005e44:	2200      	movs	r2, #0
 8005e46:	4b59      	ldr	r3, [pc, #356]	; (8005fac <Execute_Kalman_Filter+0x3bc>)
 8005e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e4c:	f7fc fefa 	bl	8002c44 <__aeabi_dcmplt>
 8005e50:	1e03      	subs	r3, r0, #0
 8005e52:	d007      	beq.n	8005e64 <Execute_Kalman_Filter+0x274>
 8005e54:	2200      	movs	r2, #0
 8005e56:	4b56      	ldr	r3, [pc, #344]	; (8005fb0 <Execute_Kalman_Filter+0x3c0>)
 8005e58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005e5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005e5c:	f7fc ff06 	bl	8002c6c <__aeabi_dcmpgt>
 8005e60:	1e03      	subs	r3, r0, #0
 8005e62:	d10f      	bne.n	8005e84 <Execute_Kalman_Filter+0x294>
 8005e64:	2200      	movs	r2, #0
 8005e66:	4b52      	ldr	r3, [pc, #328]	; (8005fb0 <Execute_Kalman_Filter+0x3c0>)
 8005e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e6c:	f7fc fefe 	bl	8002c6c <__aeabi_dcmpgt>
 8005e70:	1e03      	subs	r3, r0, #0
 8005e72:	d013      	beq.n	8005e9c <Execute_Kalman_Filter+0x2ac>
 8005e74:	2200      	movs	r2, #0
 8005e76:	4b4d      	ldr	r3, [pc, #308]	; (8005fac <Execute_Kalman_Filter+0x3bc>)
 8005e78:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005e7a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005e7c:	f7fc fee2 	bl	8002c44 <__aeabi_dcmplt>
 8005e80:	1e03      	subs	r3, r0, #0
 8005e82:	d00b      	beq.n	8005e9c <Execute_Kalman_Filter+0x2ac>
  {
	KalmanX.angle = roll;
 8005e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e88:	f7ff fba2 	bl	80055d0 <__aeabi_d2f>
 8005e8c:	1c02      	adds	r2, r0, #0
 8005e8e:	4b49      	ldr	r3, [pc, #292]	; (8005fb4 <Execute_Kalman_Filter+0x3c4>)
 8005e90:	60da      	str	r2, [r3, #12]
    kalAngleX = roll;
 8005e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e96:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e9a:	e01b      	b.n	8005ed4 <Execute_Kalman_Filter+0x2e4>
  } 
  else
  {
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman); /* Calculate the angle using a Kalman filter */
 8005e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ea0:	f7ff fb96 	bl	80055d0 <__aeabi_d2f>
 8005ea4:	1c06      	adds	r6, r0, #0
 8005ea6:	69b8      	ldr	r0, [r7, #24]
 8005ea8:	69f9      	ldr	r1, [r7, #28]
 8005eaa:	f7ff fb91 	bl	80055d0 <__aeabi_d2f>
 8005eae:	4680      	mov	r8, r0
 8005eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005eb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005eb4:	f7ff fb8c 	bl	80055d0 <__aeabi_d2f>
 8005eb8:	1c03      	adds	r3, r0, #0
 8005eba:	1c1a      	adds	r2, r3, #0
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	1c30      	adds	r0, r6, #0
 8005ec0:	f000 f8c4 	bl	800604c <KalmanX_getAngle>
 8005ec4:	1c03      	adds	r3, r0, #0
 8005ec6:	1c18      	adds	r0, r3, #0
 8005ec8:	f7ff fb3a 	bl	8005540 <__aeabi_f2d>
 8005ecc:	0002      	movs	r2, r0
 8005ece:	000b      	movs	r3, r1
 8005ed0:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  } 

  if (abs(kalAngleX) > 90)
 8005ed4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005ed6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005ed8:	f7ff faa6 	bl	8005428 <__aeabi_d2iz>
 8005edc:	0003      	movs	r3, r0
 8005ede:	17da      	asrs	r2, r3, #31
 8005ee0:	189b      	adds	r3, r3, r2
 8005ee2:	4053      	eors	r3, r2
 8005ee4:	2b5a      	cmp	r3, #90	; 0x5a
 8005ee6:	dd08      	ble.n	8005efa <Execute_Kalman_Filter+0x30a>
  {
    gyroYrate = - gyroYrate; /* Invert rate, so it fits the restricted accelerometer reading */
 8005ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eea:	001c      	movs	r4, r3
 8005eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eee:	2280      	movs	r2, #128	; 0x80
 8005ef0:	0612      	lsls	r2, r2, #24
 8005ef2:	405a      	eors	r2, r3
 8005ef4:	0015      	movs	r5, r2
 8005ef6:	643c      	str	r4, [r7, #64]	; 0x40
 8005ef8:	647d      	str	r5, [r7, #68]	; 0x44
  }
  kalAngleY = KalmanY_getAngle(pitch, gyroYrate, timing_kalman);
 8005efa:	6a38      	ldr	r0, [r7, #32]
 8005efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005efe:	f7ff fb67 	bl	80055d0 <__aeabi_d2f>
 8005f02:	1c04      	adds	r4, r0, #0
 8005f04:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005f06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f08:	f7ff fb62 	bl	80055d0 <__aeabi_d2f>
 8005f0c:	1c05      	adds	r5, r0, #0
 8005f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f12:	f7ff fb5d 	bl	80055d0 <__aeabi_d2f>
 8005f16:	1c03      	adds	r3, r0, #0
 8005f18:	1c1a      	adds	r2, r3, #0
 8005f1a:	1c29      	adds	r1, r5, #0
 8005f1c:	1c20      	adds	r0, r4, #0
 8005f1e:	f000 f9b3 	bl	8006288 <KalmanY_getAngle>
 8005f22:	1c03      	adds	r3, r0, #0
 8005f24:	1c18      	adds	r0, r3, #0
 8005f26:	f7ff fb0b 	bl	8005540 <__aeabi_f2d>
 8005f2a:	0002      	movs	r2, r0
 8005f2c:	000b      	movs	r3, r1
 8005f2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
      gyroXrate = -gyroXrate; /* Invert rate, so it fits the restriced accelerometer reading */
    }
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman);
  #endif
   Calculated_Roll  =  (float) (kalAngleX);
 8005f32:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005f34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005f36:	f7ff fb4b 	bl	80055d0 <__aeabi_d2f>
 8005f3a:	1c02      	adds	r2, r0, #0
 8005f3c:	4b1e      	ldr	r3, [pc, #120]	; (8005fb8 <Execute_Kalman_Filter+0x3c8>)
 8005f3e:	601a      	str	r2, [r3, #0]
   Calculated_Pitch  = (float) (kalAngleY);
 8005f40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f44:	f7ff fb44 	bl	80055d0 <__aeabi_d2f>
 8005f48:	1c02      	adds	r2, r0, #0
 8005f4a:	4b1c      	ldr	r3, [pc, #112]	; (8005fbc <Execute_Kalman_Filter+0x3cc>)
 8005f4c:	601a      	str	r2, [r3, #0]
   Calculated_yaw  = (float) (kalAngleZ);
 8005f4e:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <Execute_Kalman_Filter+0x3b0>)
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	0010      	movs	r0, r2
 8005f56:	0019      	movs	r1, r3
 8005f58:	f7ff fb3a 	bl	80055d0 <__aeabi_d2f>
 8005f5c:	1c02      	adds	r2, r0, #0
 8005f5e:	4b18      	ldr	r3, [pc, #96]	; (8005fc0 <Execute_Kalman_Filter+0x3d0>)
 8005f60:	601a      	str	r2, [r3, #0]
}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	46bd      	mov	sp, r7
 8005f66:	b014      	add	sp, #80	; 0x50
 8005f68:	bc80      	pop	{r7}
 8005f6a:	46b8      	mov	r8, r7
 8005f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	200001e8 	.word	0x200001e8
 8005f74:	200001ec 	.word	0x200001ec
 8005f78:	200001b0 	.word	0x200001b0
 8005f7c:	200001b8 	.word	0x200001b8
 8005f80:	200001c0 	.word	0x200001c0
 8005f84:	200001c8 	.word	0x200001c8
 8005f88:	200001d0 	.word	0x200001d0
 8005f8c:	200001d8 	.word	0x200001d8
 8005f90:	200001e0 	.word	0x200001e0
 8005f94:	404ca5dc 	.word	0x404ca5dc
 8005f98:	3f7cac08 	.word	0x3f7cac08
 8005f9c:	20000020 	.word	0x20000020
 8005fa0:	20000190 	.word	0x20000190
 8005fa4:	40768000 	.word	0x40768000
 8005fa8:	c0768000 	.word	0xc0768000
 8005fac:	c0568000 	.word	0xc0568000
 8005fb0:	40568000 	.word	0x40568000
 8005fb4:	2000013c 	.word	0x2000013c
 8005fb8:	200001a8 	.word	0x200001a8
 8005fbc:	200001a4 	.word	0x200001a4
 8005fc0:	200001ac 	.word	0x200001ac

08005fc4 <Kalman_GetPitch>:

float Kalman_GetPitch(void) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  return Calculated_Pitch;
 8005fc8:	4b02      	ldr	r3, [pc, #8]	; (8005fd4 <Kalman_GetPitch+0x10>)
 8005fca:	681b      	ldr	r3, [r3, #0]
}
 8005fcc:	1c18      	adds	r0, r3, #0
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	200001a4 	.word	0x200001a4

08005fd8 <Kalman_GetRoll>:

float Kalman_GetRoll(void) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  return Calculated_Roll;
 8005fdc:	4b02      	ldr	r3, [pc, #8]	; (8005fe8 <Kalman_GetRoll+0x10>)
 8005fde:	681b      	ldr	r3, [r3, #0]
}
 8005fe0:	1c18      	adds	r0, r3, #0
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	46c0      	nop			; (mov r8, r8)
 8005fe8:	200001a8 	.word	0x200001a8

08005fec <Kalman_Getyaw>:

float Kalman_Getyaw(void) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
#if 1
  return Calculated_yaw;
 8005ff0:	4b02      	ldr	r3, [pc, #8]	; (8005ffc <Kalman_Getyaw+0x10>)
 8005ff2:	681b      	ldr	r3, [r3, #0]

  double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
  	kalAngleZ = kalAngleZ+gyroZrate*timing_kalman;
  	return kalAngleZ;
#endif
}
 8005ff4:	1c18      	adds	r0, r3, #0
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	200001ac 	.word	0x200001ac

08006000 <Kalman_GetTick>:
		ExecuteTicks = 0;
	}
}

uint32_t Kalman_GetTick(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
	//return Kalman_Timer;
	return getMicros();
 8006004:	f001 faac 	bl	8007560 <getMicros>
 8006008:	0003      	movs	r3, r0
}
 800600a:	0018      	movs	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <Kalman_SetFlag>:

void Kalman_SetFlag(void) {
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
	KalmanFlag = 1;
 8006014:	4b02      	ldr	r3, [pc, #8]	; (8006020 <Kalman_SetFlag+0x10>)
 8006016:	2201      	movs	r2, #1
 8006018:	701a      	strb	r2, [r3, #0]
}
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	200001a0 	.word	0x200001a0

08006024 <Kalman_GetFlag>:

uint8_t Kalman_GetFlag(void) {
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
	return KalmanFlag;
 8006028:	4b02      	ldr	r3, [pc, #8]	; (8006034 <Kalman_GetFlag+0x10>)
 800602a:	781b      	ldrb	r3, [r3, #0]
}
 800602c:	0018      	movs	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	200001a0 	.word	0x200001a0

08006038 <Kalman_ClearFlag>:

void Kalman_ClearFlag(void) {
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
	KalmanFlag = 0;
 800603c:	4b02      	ldr	r3, [pc, #8]	; (8006048 <Kalman_ClearFlag+0x10>)
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]
}
 8006042:	46c0      	nop			; (mov r8, r8)
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	200001a0 	.word	0x200001a0

0800604c <KalmanX_getAngle>:

static float KalmanX_getAngle(float newAngle, float newRate, float dt) {
 800604c:	b5b0      	push	{r4, r5, r7, lr}
 800604e:	b08a      	sub	sp, #40	; 0x28
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
    KalmanX.rate = newRate - KalmanX.bias;
 8006058:	4b8a      	ldr	r3, [pc, #552]	; (8006284 <KalmanX_getAngle+0x238>)
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	1c19      	adds	r1, r3, #0
 800605e:	68b8      	ldr	r0, [r7, #8]
 8006060:	f7fd fa2a 	bl	80034b8 <__aeabi_fsub>
 8006064:	1c03      	adds	r3, r0, #0
 8006066:	1c1a      	adds	r2, r3, #0
 8006068:	4b86      	ldr	r3, [pc, #536]	; (8006284 <KalmanX_getAngle+0x238>)
 800606a:	615a      	str	r2, [r3, #20]
    KalmanX.angle += dt * KalmanX.rate;
 800606c:	4b85      	ldr	r3, [pc, #532]	; (8006284 <KalmanX_getAngle+0x238>)
 800606e:	68dc      	ldr	r4, [r3, #12]
 8006070:	4b84      	ldr	r3, [pc, #528]	; (8006284 <KalmanX_getAngle+0x238>)
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	1c18      	adds	r0, r3, #0
 8006078:	f7fd f8f8 	bl	800326c <__aeabi_fmul>
 800607c:	1c03      	adds	r3, r0, #0
 800607e:	1c19      	adds	r1, r3, #0
 8006080:	1c20      	adds	r0, r4, #0
 8006082:	f7fc fe3d 	bl	8002d00 <__aeabi_fadd>
 8006086:	1c03      	adds	r3, r0, #0
 8006088:	1c1a      	adds	r2, r3, #0
 800608a:	4b7e      	ldr	r3, [pc, #504]	; (8006284 <KalmanX_getAngle+0x238>)
 800608c:	60da      	str	r2, [r3, #12]

    KalmanX.P[0][0] += dt * (dt*KalmanX.P[1][1] - KalmanX.P[0][1] - KalmanX.P[1][0] + KalmanX.Q_angle);
 800608e:	4b7d      	ldr	r3, [pc, #500]	; (8006284 <KalmanX_getAngle+0x238>)
 8006090:	699c      	ldr	r4, [r3, #24]
 8006092:	4b7c      	ldr	r3, [pc, #496]	; (8006284 <KalmanX_getAngle+0x238>)
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	1c18      	adds	r0, r3, #0
 800609a:	f7fd f8e7 	bl	800326c <__aeabi_fmul>
 800609e:	1c03      	adds	r3, r0, #0
 80060a0:	1c1a      	adds	r2, r3, #0
 80060a2:	4b78      	ldr	r3, [pc, #480]	; (8006284 <KalmanX_getAngle+0x238>)
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	1c19      	adds	r1, r3, #0
 80060a8:	1c10      	adds	r0, r2, #0
 80060aa:	f7fd fa05 	bl	80034b8 <__aeabi_fsub>
 80060ae:	1c03      	adds	r3, r0, #0
 80060b0:	1c1a      	adds	r2, r3, #0
 80060b2:	4b74      	ldr	r3, [pc, #464]	; (8006284 <KalmanX_getAngle+0x238>)
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	1c19      	adds	r1, r3, #0
 80060b8:	1c10      	adds	r0, r2, #0
 80060ba:	f7fd f9fd 	bl	80034b8 <__aeabi_fsub>
 80060be:	1c03      	adds	r3, r0, #0
 80060c0:	1c1a      	adds	r2, r3, #0
 80060c2:	4b70      	ldr	r3, [pc, #448]	; (8006284 <KalmanX_getAngle+0x238>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	1c19      	adds	r1, r3, #0
 80060c8:	1c10      	adds	r0, r2, #0
 80060ca:	f7fc fe19 	bl	8002d00 <__aeabi_fadd>
 80060ce:	1c03      	adds	r3, r0, #0
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	1c18      	adds	r0, r3, #0
 80060d4:	f7fd f8ca 	bl	800326c <__aeabi_fmul>
 80060d8:	1c03      	adds	r3, r0, #0
 80060da:	1c19      	adds	r1, r3, #0
 80060dc:	1c20      	adds	r0, r4, #0
 80060de:	f7fc fe0f 	bl	8002d00 <__aeabi_fadd>
 80060e2:	1c03      	adds	r3, r0, #0
 80060e4:	1c1a      	adds	r2, r3, #0
 80060e6:	4b67      	ldr	r3, [pc, #412]	; (8006284 <KalmanX_getAngle+0x238>)
 80060e8:	619a      	str	r2, [r3, #24]
    KalmanX.P[0][1] -= dt * KalmanX.P[1][1];
 80060ea:	4b66      	ldr	r3, [pc, #408]	; (8006284 <KalmanX_getAngle+0x238>)
 80060ec:	69dc      	ldr	r4, [r3, #28]
 80060ee:	4b65      	ldr	r3, [pc, #404]	; (8006284 <KalmanX_getAngle+0x238>)
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	1c18      	adds	r0, r3, #0
 80060f6:	f7fd f8b9 	bl	800326c <__aeabi_fmul>
 80060fa:	1c03      	adds	r3, r0, #0
 80060fc:	1c19      	adds	r1, r3, #0
 80060fe:	1c20      	adds	r0, r4, #0
 8006100:	f7fd f9da 	bl	80034b8 <__aeabi_fsub>
 8006104:	1c03      	adds	r3, r0, #0
 8006106:	1c1a      	adds	r2, r3, #0
 8006108:	4b5e      	ldr	r3, [pc, #376]	; (8006284 <KalmanX_getAngle+0x238>)
 800610a:	61da      	str	r2, [r3, #28]
    KalmanX.P[1][0] -= dt * KalmanX.P[1][1];
 800610c:	4b5d      	ldr	r3, [pc, #372]	; (8006284 <KalmanX_getAngle+0x238>)
 800610e:	6a1c      	ldr	r4, [r3, #32]
 8006110:	4b5c      	ldr	r3, [pc, #368]	; (8006284 <KalmanX_getAngle+0x238>)
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	6879      	ldr	r1, [r7, #4]
 8006116:	1c18      	adds	r0, r3, #0
 8006118:	f7fd f8a8 	bl	800326c <__aeabi_fmul>
 800611c:	1c03      	adds	r3, r0, #0
 800611e:	1c19      	adds	r1, r3, #0
 8006120:	1c20      	adds	r0, r4, #0
 8006122:	f7fd f9c9 	bl	80034b8 <__aeabi_fsub>
 8006126:	1c03      	adds	r3, r0, #0
 8006128:	1c1a      	adds	r2, r3, #0
 800612a:	4b56      	ldr	r3, [pc, #344]	; (8006284 <KalmanX_getAngle+0x238>)
 800612c:	621a      	str	r2, [r3, #32]
    KalmanX.P[1][1] += KalmanX.Q_bias * dt;
 800612e:	4b55      	ldr	r3, [pc, #340]	; (8006284 <KalmanX_getAngle+0x238>)
 8006130:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006132:	4b54      	ldr	r3, [pc, #336]	; (8006284 <KalmanX_getAngle+0x238>)
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	1c18      	adds	r0, r3, #0
 800613a:	f7fd f897 	bl	800326c <__aeabi_fmul>
 800613e:	1c03      	adds	r3, r0, #0
 8006140:	1c19      	adds	r1, r3, #0
 8006142:	1c20      	adds	r0, r4, #0
 8006144:	f7fc fddc 	bl	8002d00 <__aeabi_fadd>
 8006148:	1c03      	adds	r3, r0, #0
 800614a:	1c1a      	adds	r2, r3, #0
 800614c:	4b4d      	ldr	r3, [pc, #308]	; (8006284 <KalmanX_getAngle+0x238>)
 800614e:	625a      	str	r2, [r3, #36]	; 0x24
    
    float S = KalmanX.P[0][0] + KalmanX.R_measure;
 8006150:	4b4c      	ldr	r3, [pc, #304]	; (8006284 <KalmanX_getAngle+0x238>)
 8006152:	699a      	ldr	r2, [r3, #24]
 8006154:	4b4b      	ldr	r3, [pc, #300]	; (8006284 <KalmanX_getAngle+0x238>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	1c19      	adds	r1, r3, #0
 800615a:	1c10      	adds	r0, r2, #0
 800615c:	f7fc fdd0 	bl	8002d00 <__aeabi_fadd>
 8006160:	1c03      	adds	r3, r0, #0
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
    
    float K[2];
    K[0] = KalmanX.P[0][0] / S;
 8006164:	4b47      	ldr	r3, [pc, #284]	; (8006284 <KalmanX_getAngle+0x238>)
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800616a:	1c18      	adds	r0, r3, #0
 800616c:	f7fc ff66 	bl	800303c <__aeabi_fdiv>
 8006170:	1c03      	adds	r3, r0, #0
 8006172:	1c1a      	adds	r2, r3, #0
 8006174:	2510      	movs	r5, #16
 8006176:	197b      	adds	r3, r7, r5
 8006178:	601a      	str	r2, [r3, #0]
    K[1] = KalmanX.P[1][0] / S;
 800617a:	4b42      	ldr	r3, [pc, #264]	; (8006284 <KalmanX_getAngle+0x238>)
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006180:	1c18      	adds	r0, r3, #0
 8006182:	f7fc ff5b 	bl	800303c <__aeabi_fdiv>
 8006186:	1c03      	adds	r3, r0, #0
 8006188:	1c1a      	adds	r2, r3, #0
 800618a:	197b      	adds	r3, r7, r5
 800618c:	605a      	str	r2, [r3, #4]

    float y = newAngle - KalmanX.angle;
 800618e:	4b3d      	ldr	r3, [pc, #244]	; (8006284 <KalmanX_getAngle+0x238>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	1c19      	adds	r1, r3, #0
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7fd f98f 	bl	80034b8 <__aeabi_fsub>
 800619a:	1c03      	adds	r3, r0, #0
 800619c:	623b      	str	r3, [r7, #32]
    KalmanX.angle += K[0] * y;
 800619e:	4b39      	ldr	r3, [pc, #228]	; (8006284 <KalmanX_getAngle+0x238>)
 80061a0:	68dc      	ldr	r4, [r3, #12]
 80061a2:	197b      	adds	r3, r7, r5
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a39      	ldr	r1, [r7, #32]
 80061a8:	1c18      	adds	r0, r3, #0
 80061aa:	f7fd f85f 	bl	800326c <__aeabi_fmul>
 80061ae:	1c03      	adds	r3, r0, #0
 80061b0:	1c19      	adds	r1, r3, #0
 80061b2:	1c20      	adds	r0, r4, #0
 80061b4:	f7fc fda4 	bl	8002d00 <__aeabi_fadd>
 80061b8:	1c03      	adds	r3, r0, #0
 80061ba:	1c1a      	adds	r2, r3, #0
 80061bc:	4b31      	ldr	r3, [pc, #196]	; (8006284 <KalmanX_getAngle+0x238>)
 80061be:	60da      	str	r2, [r3, #12]
    KalmanX.bias += K[1] * y;
 80061c0:	4b30      	ldr	r3, [pc, #192]	; (8006284 <KalmanX_getAngle+0x238>)
 80061c2:	691c      	ldr	r4, [r3, #16]
 80061c4:	197b      	adds	r3, r7, r5
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	6a39      	ldr	r1, [r7, #32]
 80061ca:	1c18      	adds	r0, r3, #0
 80061cc:	f7fd f84e 	bl	800326c <__aeabi_fmul>
 80061d0:	1c03      	adds	r3, r0, #0
 80061d2:	1c19      	adds	r1, r3, #0
 80061d4:	1c20      	adds	r0, r4, #0
 80061d6:	f7fc fd93 	bl	8002d00 <__aeabi_fadd>
 80061da:	1c03      	adds	r3, r0, #0
 80061dc:	1c1a      	adds	r2, r3, #0
 80061de:	4b29      	ldr	r3, [pc, #164]	; (8006284 <KalmanX_getAngle+0x238>)
 80061e0:	611a      	str	r2, [r3, #16]

    float P00_temp = KalmanX.P[0][0];
 80061e2:	4b28      	ldr	r3, [pc, #160]	; (8006284 <KalmanX_getAngle+0x238>)
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	61fb      	str	r3, [r7, #28]
    float P01_temp = KalmanX.P[0][1];
 80061e8:	4b26      	ldr	r3, [pc, #152]	; (8006284 <KalmanX_getAngle+0x238>)
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	61bb      	str	r3, [r7, #24]

    KalmanX.P[0][0] -= K[0] * P00_temp;
 80061ee:	4b25      	ldr	r3, [pc, #148]	; (8006284 <KalmanX_getAngle+0x238>)
 80061f0:	699c      	ldr	r4, [r3, #24]
 80061f2:	197b      	adds	r3, r7, r5
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69f9      	ldr	r1, [r7, #28]
 80061f8:	1c18      	adds	r0, r3, #0
 80061fa:	f7fd f837 	bl	800326c <__aeabi_fmul>
 80061fe:	1c03      	adds	r3, r0, #0
 8006200:	1c19      	adds	r1, r3, #0
 8006202:	1c20      	adds	r0, r4, #0
 8006204:	f7fd f958 	bl	80034b8 <__aeabi_fsub>
 8006208:	1c03      	adds	r3, r0, #0
 800620a:	1c1a      	adds	r2, r3, #0
 800620c:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <KalmanX_getAngle+0x238>)
 800620e:	619a      	str	r2, [r3, #24]
    KalmanX.P[0][1] -= K[0] * P01_temp;
 8006210:	4b1c      	ldr	r3, [pc, #112]	; (8006284 <KalmanX_getAngle+0x238>)
 8006212:	69dc      	ldr	r4, [r3, #28]
 8006214:	197b      	adds	r3, r7, r5
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69b9      	ldr	r1, [r7, #24]
 800621a:	1c18      	adds	r0, r3, #0
 800621c:	f7fd f826 	bl	800326c <__aeabi_fmul>
 8006220:	1c03      	adds	r3, r0, #0
 8006222:	1c19      	adds	r1, r3, #0
 8006224:	1c20      	adds	r0, r4, #0
 8006226:	f7fd f947 	bl	80034b8 <__aeabi_fsub>
 800622a:	1c03      	adds	r3, r0, #0
 800622c:	1c1a      	adds	r2, r3, #0
 800622e:	4b15      	ldr	r3, [pc, #84]	; (8006284 <KalmanX_getAngle+0x238>)
 8006230:	61da      	str	r2, [r3, #28]
    KalmanX.P[1][0] -= K[1] * P00_temp;
 8006232:	4b14      	ldr	r3, [pc, #80]	; (8006284 <KalmanX_getAngle+0x238>)
 8006234:	6a1c      	ldr	r4, [r3, #32]
 8006236:	197b      	adds	r3, r7, r5
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	69f9      	ldr	r1, [r7, #28]
 800623c:	1c18      	adds	r0, r3, #0
 800623e:	f7fd f815 	bl	800326c <__aeabi_fmul>
 8006242:	1c03      	adds	r3, r0, #0
 8006244:	1c19      	adds	r1, r3, #0
 8006246:	1c20      	adds	r0, r4, #0
 8006248:	f7fd f936 	bl	80034b8 <__aeabi_fsub>
 800624c:	1c03      	adds	r3, r0, #0
 800624e:	1c1a      	adds	r2, r3, #0
 8006250:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <KalmanX_getAngle+0x238>)
 8006252:	621a      	str	r2, [r3, #32]
    KalmanX.P[1][1] -= K[1] * P01_temp;
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <KalmanX_getAngle+0x238>)
 8006256:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006258:	197b      	adds	r3, r7, r5
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	69b9      	ldr	r1, [r7, #24]
 800625e:	1c18      	adds	r0, r3, #0
 8006260:	f7fd f804 	bl	800326c <__aeabi_fmul>
 8006264:	1c03      	adds	r3, r0, #0
 8006266:	1c19      	adds	r1, r3, #0
 8006268:	1c20      	adds	r0, r4, #0
 800626a:	f7fd f925 	bl	80034b8 <__aeabi_fsub>
 800626e:	1c03      	adds	r3, r0, #0
 8006270:	1c1a      	adds	r2, r3, #0
 8006272:	4b04      	ldr	r3, [pc, #16]	; (8006284 <KalmanX_getAngle+0x238>)
 8006274:	625a      	str	r2, [r3, #36]	; 0x24

    return KalmanX.angle;
 8006276:	4b03      	ldr	r3, [pc, #12]	; (8006284 <KalmanX_getAngle+0x238>)
 8006278:	68db      	ldr	r3, [r3, #12]
}
 800627a:	1c18      	adds	r0, r3, #0
 800627c:	46bd      	mov	sp, r7
 800627e:	b00a      	add	sp, #40	; 0x28
 8006280:	bdb0      	pop	{r4, r5, r7, pc}
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	2000013c 	.word	0x2000013c

08006288 <KalmanY_getAngle>:

static float KalmanY_getAngle(float newAngle, float newRate, float dt) {
 8006288:	b5b0      	push	{r4, r5, r7, lr}
 800628a:	b08a      	sub	sp, #40	; 0x28
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
    KalmanY.rate = newRate - KalmanY.bias;
 8006294:	4b8a      	ldr	r3, [pc, #552]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	1c19      	adds	r1, r3, #0
 800629a:	68b8      	ldr	r0, [r7, #8]
 800629c:	f7fd f90c 	bl	80034b8 <__aeabi_fsub>
 80062a0:	1c03      	adds	r3, r0, #0
 80062a2:	1c1a      	adds	r2, r3, #0
 80062a4:	4b86      	ldr	r3, [pc, #536]	; (80064c0 <KalmanY_getAngle+0x238>)
 80062a6:	615a      	str	r2, [r3, #20]
    KalmanY.angle += dt * KalmanY.rate;
 80062a8:	4b85      	ldr	r3, [pc, #532]	; (80064c0 <KalmanY_getAngle+0x238>)
 80062aa:	68dc      	ldr	r4, [r3, #12]
 80062ac:	4b84      	ldr	r3, [pc, #528]	; (80064c0 <KalmanY_getAngle+0x238>)
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	1c18      	adds	r0, r3, #0
 80062b4:	f7fc ffda 	bl	800326c <__aeabi_fmul>
 80062b8:	1c03      	adds	r3, r0, #0
 80062ba:	1c19      	adds	r1, r3, #0
 80062bc:	1c20      	adds	r0, r4, #0
 80062be:	f7fc fd1f 	bl	8002d00 <__aeabi_fadd>
 80062c2:	1c03      	adds	r3, r0, #0
 80062c4:	1c1a      	adds	r2, r3, #0
 80062c6:	4b7e      	ldr	r3, [pc, #504]	; (80064c0 <KalmanY_getAngle+0x238>)
 80062c8:	60da      	str	r2, [r3, #12]

    KalmanY.P[0][0] += dt * (dt*KalmanY.P[1][1] - KalmanY.P[0][1] - KalmanY.P[1][0] + KalmanY.Q_angle);
 80062ca:	4b7d      	ldr	r3, [pc, #500]	; (80064c0 <KalmanY_getAngle+0x238>)
 80062cc:	699c      	ldr	r4, [r3, #24]
 80062ce:	4b7c      	ldr	r3, [pc, #496]	; (80064c0 <KalmanY_getAngle+0x238>)
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	1c18      	adds	r0, r3, #0
 80062d6:	f7fc ffc9 	bl	800326c <__aeabi_fmul>
 80062da:	1c03      	adds	r3, r0, #0
 80062dc:	1c1a      	adds	r2, r3, #0
 80062de:	4b78      	ldr	r3, [pc, #480]	; (80064c0 <KalmanY_getAngle+0x238>)
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	1c19      	adds	r1, r3, #0
 80062e4:	1c10      	adds	r0, r2, #0
 80062e6:	f7fd f8e7 	bl	80034b8 <__aeabi_fsub>
 80062ea:	1c03      	adds	r3, r0, #0
 80062ec:	1c1a      	adds	r2, r3, #0
 80062ee:	4b74      	ldr	r3, [pc, #464]	; (80064c0 <KalmanY_getAngle+0x238>)
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	1c19      	adds	r1, r3, #0
 80062f4:	1c10      	adds	r0, r2, #0
 80062f6:	f7fd f8df 	bl	80034b8 <__aeabi_fsub>
 80062fa:	1c03      	adds	r3, r0, #0
 80062fc:	1c1a      	adds	r2, r3, #0
 80062fe:	4b70      	ldr	r3, [pc, #448]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	1c19      	adds	r1, r3, #0
 8006304:	1c10      	adds	r0, r2, #0
 8006306:	f7fc fcfb 	bl	8002d00 <__aeabi_fadd>
 800630a:	1c03      	adds	r3, r0, #0
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	1c18      	adds	r0, r3, #0
 8006310:	f7fc ffac 	bl	800326c <__aeabi_fmul>
 8006314:	1c03      	adds	r3, r0, #0
 8006316:	1c19      	adds	r1, r3, #0
 8006318:	1c20      	adds	r0, r4, #0
 800631a:	f7fc fcf1 	bl	8002d00 <__aeabi_fadd>
 800631e:	1c03      	adds	r3, r0, #0
 8006320:	1c1a      	adds	r2, r3, #0
 8006322:	4b67      	ldr	r3, [pc, #412]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006324:	619a      	str	r2, [r3, #24]
    KalmanY.P[0][1] -= dt * KalmanY.P[1][1];
 8006326:	4b66      	ldr	r3, [pc, #408]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006328:	69dc      	ldr	r4, [r3, #28]
 800632a:	4b65      	ldr	r3, [pc, #404]	; (80064c0 <KalmanY_getAngle+0x238>)
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	1c18      	adds	r0, r3, #0
 8006332:	f7fc ff9b 	bl	800326c <__aeabi_fmul>
 8006336:	1c03      	adds	r3, r0, #0
 8006338:	1c19      	adds	r1, r3, #0
 800633a:	1c20      	adds	r0, r4, #0
 800633c:	f7fd f8bc 	bl	80034b8 <__aeabi_fsub>
 8006340:	1c03      	adds	r3, r0, #0
 8006342:	1c1a      	adds	r2, r3, #0
 8006344:	4b5e      	ldr	r3, [pc, #376]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006346:	61da      	str	r2, [r3, #28]
    KalmanY.P[1][0] -= dt * KalmanY.P[1][1];
 8006348:	4b5d      	ldr	r3, [pc, #372]	; (80064c0 <KalmanY_getAngle+0x238>)
 800634a:	6a1c      	ldr	r4, [r3, #32]
 800634c:	4b5c      	ldr	r3, [pc, #368]	; (80064c0 <KalmanY_getAngle+0x238>)
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	1c18      	adds	r0, r3, #0
 8006354:	f7fc ff8a 	bl	800326c <__aeabi_fmul>
 8006358:	1c03      	adds	r3, r0, #0
 800635a:	1c19      	adds	r1, r3, #0
 800635c:	1c20      	adds	r0, r4, #0
 800635e:	f7fd f8ab 	bl	80034b8 <__aeabi_fsub>
 8006362:	1c03      	adds	r3, r0, #0
 8006364:	1c1a      	adds	r2, r3, #0
 8006366:	4b56      	ldr	r3, [pc, #344]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006368:	621a      	str	r2, [r3, #32]
    KalmanY.P[1][1] += KalmanY.Q_bias * dt;
 800636a:	4b55      	ldr	r3, [pc, #340]	; (80064c0 <KalmanY_getAngle+0x238>)
 800636c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800636e:	4b54      	ldr	r3, [pc, #336]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	1c18      	adds	r0, r3, #0
 8006376:	f7fc ff79 	bl	800326c <__aeabi_fmul>
 800637a:	1c03      	adds	r3, r0, #0
 800637c:	1c19      	adds	r1, r3, #0
 800637e:	1c20      	adds	r0, r4, #0
 8006380:	f7fc fcbe 	bl	8002d00 <__aeabi_fadd>
 8006384:	1c03      	adds	r3, r0, #0
 8006386:	1c1a      	adds	r2, r3, #0
 8006388:	4b4d      	ldr	r3, [pc, #308]	; (80064c0 <KalmanY_getAngle+0x238>)
 800638a:	625a      	str	r2, [r3, #36]	; 0x24
    
    float S = KalmanY.P[0][0] + KalmanY.R_measure;
 800638c:	4b4c      	ldr	r3, [pc, #304]	; (80064c0 <KalmanY_getAngle+0x238>)
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	4b4b      	ldr	r3, [pc, #300]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	1c19      	adds	r1, r3, #0
 8006396:	1c10      	adds	r0, r2, #0
 8006398:	f7fc fcb2 	bl	8002d00 <__aeabi_fadd>
 800639c:	1c03      	adds	r3, r0, #0
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
    
    float K[2];
    K[0] = KalmanY.P[0][0] / S;
 80063a0:	4b47      	ldr	r3, [pc, #284]	; (80064c0 <KalmanY_getAngle+0x238>)
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063a6:	1c18      	adds	r0, r3, #0
 80063a8:	f7fc fe48 	bl	800303c <__aeabi_fdiv>
 80063ac:	1c03      	adds	r3, r0, #0
 80063ae:	1c1a      	adds	r2, r3, #0
 80063b0:	2510      	movs	r5, #16
 80063b2:	197b      	adds	r3, r7, r5
 80063b4:	601a      	str	r2, [r3, #0]
    K[1] = KalmanY.P[1][0] / S;
 80063b6:	4b42      	ldr	r3, [pc, #264]	; (80064c0 <KalmanY_getAngle+0x238>)
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063bc:	1c18      	adds	r0, r3, #0
 80063be:	f7fc fe3d 	bl	800303c <__aeabi_fdiv>
 80063c2:	1c03      	adds	r3, r0, #0
 80063c4:	1c1a      	adds	r2, r3, #0
 80063c6:	197b      	adds	r3, r7, r5
 80063c8:	605a      	str	r2, [r3, #4]


    float y = newAngle - KalmanY.angle;
 80063ca:	4b3d      	ldr	r3, [pc, #244]	; (80064c0 <KalmanY_getAngle+0x238>)
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	1c19      	adds	r1, r3, #0
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f7fd f871 	bl	80034b8 <__aeabi_fsub>
 80063d6:	1c03      	adds	r3, r0, #0
 80063d8:	623b      	str	r3, [r7, #32]

    KalmanY.angle += K[0] * y;
 80063da:	4b39      	ldr	r3, [pc, #228]	; (80064c0 <KalmanY_getAngle+0x238>)
 80063dc:	68dc      	ldr	r4, [r3, #12]
 80063de:	197b      	adds	r3, r7, r5
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6a39      	ldr	r1, [r7, #32]
 80063e4:	1c18      	adds	r0, r3, #0
 80063e6:	f7fc ff41 	bl	800326c <__aeabi_fmul>
 80063ea:	1c03      	adds	r3, r0, #0
 80063ec:	1c19      	adds	r1, r3, #0
 80063ee:	1c20      	adds	r0, r4, #0
 80063f0:	f7fc fc86 	bl	8002d00 <__aeabi_fadd>
 80063f4:	1c03      	adds	r3, r0, #0
 80063f6:	1c1a      	adds	r2, r3, #0
 80063f8:	4b31      	ldr	r3, [pc, #196]	; (80064c0 <KalmanY_getAngle+0x238>)
 80063fa:	60da      	str	r2, [r3, #12]
    KalmanY.bias += K[1] * y;
 80063fc:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <KalmanY_getAngle+0x238>)
 80063fe:	691c      	ldr	r4, [r3, #16]
 8006400:	197b      	adds	r3, r7, r5
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	6a39      	ldr	r1, [r7, #32]
 8006406:	1c18      	adds	r0, r3, #0
 8006408:	f7fc ff30 	bl	800326c <__aeabi_fmul>
 800640c:	1c03      	adds	r3, r0, #0
 800640e:	1c19      	adds	r1, r3, #0
 8006410:	1c20      	adds	r0, r4, #0
 8006412:	f7fc fc75 	bl	8002d00 <__aeabi_fadd>
 8006416:	1c03      	adds	r3, r0, #0
 8006418:	1c1a      	adds	r2, r3, #0
 800641a:	4b29      	ldr	r3, [pc, #164]	; (80064c0 <KalmanY_getAngle+0x238>)
 800641c:	611a      	str	r2, [r3, #16]

    float P00_temp = KalmanY.P[0][0];
 800641e:	4b28      	ldr	r3, [pc, #160]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	61fb      	str	r3, [r7, #28]
    float P01_temp = KalmanY.P[0][1];
 8006424:	4b26      	ldr	r3, [pc, #152]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	61bb      	str	r3, [r7, #24]

    KalmanY.P[0][0] -= K[0] * P00_temp;
 800642a:	4b25      	ldr	r3, [pc, #148]	; (80064c0 <KalmanY_getAngle+0x238>)
 800642c:	699c      	ldr	r4, [r3, #24]
 800642e:	197b      	adds	r3, r7, r5
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69f9      	ldr	r1, [r7, #28]
 8006434:	1c18      	adds	r0, r3, #0
 8006436:	f7fc ff19 	bl	800326c <__aeabi_fmul>
 800643a:	1c03      	adds	r3, r0, #0
 800643c:	1c19      	adds	r1, r3, #0
 800643e:	1c20      	adds	r0, r4, #0
 8006440:	f7fd f83a 	bl	80034b8 <__aeabi_fsub>
 8006444:	1c03      	adds	r3, r0, #0
 8006446:	1c1a      	adds	r2, r3, #0
 8006448:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <KalmanY_getAngle+0x238>)
 800644a:	619a      	str	r2, [r3, #24]
    KalmanY.P[0][1] -= K[0] * P01_temp;
 800644c:	4b1c      	ldr	r3, [pc, #112]	; (80064c0 <KalmanY_getAngle+0x238>)
 800644e:	69dc      	ldr	r4, [r3, #28]
 8006450:	197b      	adds	r3, r7, r5
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69b9      	ldr	r1, [r7, #24]
 8006456:	1c18      	adds	r0, r3, #0
 8006458:	f7fc ff08 	bl	800326c <__aeabi_fmul>
 800645c:	1c03      	adds	r3, r0, #0
 800645e:	1c19      	adds	r1, r3, #0
 8006460:	1c20      	adds	r0, r4, #0
 8006462:	f7fd f829 	bl	80034b8 <__aeabi_fsub>
 8006466:	1c03      	adds	r3, r0, #0
 8006468:	1c1a      	adds	r2, r3, #0
 800646a:	4b15      	ldr	r3, [pc, #84]	; (80064c0 <KalmanY_getAngle+0x238>)
 800646c:	61da      	str	r2, [r3, #28]
    KalmanY.P[1][0] -= K[1] * P00_temp;
 800646e:	4b14      	ldr	r3, [pc, #80]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006470:	6a1c      	ldr	r4, [r3, #32]
 8006472:	197b      	adds	r3, r7, r5
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	69f9      	ldr	r1, [r7, #28]
 8006478:	1c18      	adds	r0, r3, #0
 800647a:	f7fc fef7 	bl	800326c <__aeabi_fmul>
 800647e:	1c03      	adds	r3, r0, #0
 8006480:	1c19      	adds	r1, r3, #0
 8006482:	1c20      	adds	r0, r4, #0
 8006484:	f7fd f818 	bl	80034b8 <__aeabi_fsub>
 8006488:	1c03      	adds	r3, r0, #0
 800648a:	1c1a      	adds	r2, r3, #0
 800648c:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <KalmanY_getAngle+0x238>)
 800648e:	621a      	str	r2, [r3, #32]
    KalmanY.P[1][1] -= K[1] * P01_temp;
 8006490:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <KalmanY_getAngle+0x238>)
 8006492:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006494:	197b      	adds	r3, r7, r5
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	69b9      	ldr	r1, [r7, #24]
 800649a:	1c18      	adds	r0, r3, #0
 800649c:	f7fc fee6 	bl	800326c <__aeabi_fmul>
 80064a0:	1c03      	adds	r3, r0, #0
 80064a2:	1c19      	adds	r1, r3, #0
 80064a4:	1c20      	adds	r0, r4, #0
 80064a6:	f7fd f807 	bl	80034b8 <__aeabi_fsub>
 80064aa:	1c03      	adds	r3, r0, #0
 80064ac:	1c1a      	adds	r2, r3, #0
 80064ae:	4b04      	ldr	r3, [pc, #16]	; (80064c0 <KalmanY_getAngle+0x238>)
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24

    return KalmanY.angle;
 80064b2:	4b03      	ldr	r3, [pc, #12]	; (80064c0 <KalmanY_getAngle+0x238>)
 80064b4:	68db      	ldr	r3, [r3, #12]
}
 80064b6:	1c18      	adds	r0, r3, #0
 80064b8:	46bd      	mov	sp, r7
 80064ba:	b00a      	add	sp, #40	; 0x28
 80064bc:	bdb0      	pop	{r4, r5, r7, pc}
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	20000164 	.word	0x20000164

080064c4 <LSM6DS3_Initialize>:
 * 			        - LSM6DS3_SA0_HIGH_LEVEL address -> (0x6B << 1)
 * 		   timeout: Set the timeout for the I2C peripheral
 * 		   i2c_channel: Define the selected I2C channel for the IMU
 * @retval None
*/
void LSM6DS3_Initialize(SPI_TypeDef* spi_channel, uint16_t timeout) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	000a      	movs	r2, r1
 80064ce:	1cbb      	adds	r3, r7, #2
 80064d0:	801a      	strh	r2, [r3, #0]
	
	SPIx_init(spi_channel);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	0018      	movs	r0, r3
 80064d6:	f003 fec5 	bl	800a264 <SPIx_init>
	LSM6DS3_parameters.timeout	   = timeout;
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <LSM6DS3_Initialize+0x2c>)
 80064dc:	1cba      	adds	r2, r7, #2
 80064de:	8812      	ldrh	r2, [r2, #0]
 80064e0:	809a      	strh	r2, [r3, #4]
	LSM6DS3_parameters.spi_channel = spi_channel;
 80064e2:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <LSM6DS3_Initialize+0x2c>)
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	46c0      	nop			; (mov r8, r8)
 80064ea:	46bd      	mov	sp, r7
 80064ec:	b002      	add	sp, #8
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	200001f0 	.word	0x200001f0

080064f4 <LSM6DS3_Detect>:
 * @param  None
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
LSM6DS3_Result LSM6DS3_Detect(uint8_t efforts) {
 80064f4:	b590      	push	{r4, r7, lr}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	0002      	movs	r2, r0
 80064fc:	1dfb      	adds	r3, r7, #7
 80064fe:	701a      	strb	r2, [r3, #0]
	uint8_t byte;

	while(efforts > 0) {
 8006500:	e01f      	b.n	8006542 <LSM6DS3_Detect+0x4e>
		if(LSM6DS3_ReadRegister(LSM6DS3_XL_GS_WHO_AM_I_REG, &byte, sizeof(byte)) == LSM6DS3_OK) {
 8006502:	240f      	movs	r4, #15
 8006504:	193b      	adds	r3, r7, r4
 8006506:	2201      	movs	r2, #1
 8006508:	0019      	movs	r1, r3
 800650a:	200f      	movs	r0, #15
 800650c:	f000 f9c2 	bl	8006894 <LSM6DS3_ReadRegister>
 8006510:	1e03      	subs	r3, r0, #0
 8006512:	d111      	bne.n	8006538 <LSM6DS3_Detect+0x44>
			if(byte == LSM6DS3N_WHO_I_AM_RESPONSE ||
 8006514:	193b      	adds	r3, r7, r4
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	2b6c      	cmp	r3, #108	; 0x6c
 800651a:	d00b      	beq.n	8006534 <LSM6DS3_Detect+0x40>
					byte == LSM6DS3_WHO_I_AM_RESPONSE ||
 800651c:	193b      	adds	r3, r7, r4
 800651e:	781b      	ldrb	r3, [r3, #0]
			if(byte == LSM6DS3N_WHO_I_AM_RESPONSE ||
 8006520:	2b69      	cmp	r3, #105	; 0x69
 8006522:	d007      	beq.n	8006534 <LSM6DS3_Detect+0x40>
					byte == LSM6DS3TRC_WHO_I_AM_RESPONSE||
 8006524:	193b      	adds	r3, r7, r4
 8006526:	781b      	ldrb	r3, [r3, #0]
					byte == LSM6DS3_WHO_I_AM_RESPONSE ||
 8006528:	2b6a      	cmp	r3, #106	; 0x6a
 800652a:	d003      	beq.n	8006534 <LSM6DS3_Detect+0x40>
					byte == LSM6DS3TR_WHO_I_AM_RESPONSE) {
 800652c:	193b      	adds	r3, r7, r4
 800652e:	781b      	ldrb	r3, [r3, #0]
					byte == LSM6DS3TRC_WHO_I_AM_RESPONSE||
 8006530:	2b6b      	cmp	r3, #107	; 0x6b
 8006532:	d101      	bne.n	8006538 <LSM6DS3_Detect+0x44>

				return LSM6DS3_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	e009      	b.n	800654c <LSM6DS3_Detect+0x58>
			}
		}
		//delay_ms(2);
		efforts--;
 8006538:	1dfb      	adds	r3, r7, #7
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	1dfb      	adds	r3, r7, #7
 800653e:	3a01      	subs	r2, #1
 8006540:	701a      	strb	r2, [r3, #0]
	while(efforts > 0) {
 8006542:	1dfb      	adds	r3, r7, #7
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1db      	bne.n	8006502 <LSM6DS3_Detect+0xe>
	}
	return LSM6DS3_FAIL;
 800654a:	2301      	movs	r3, #1
}
 800654c:	0018      	movs	r0, r3
 800654e:	46bd      	mov	sp, r7
 8006550:	b005      	add	sp, #20
 8006552:	bd90      	pop	{r4, r7, pc}

08006554 <LSM6DS3_XL_Start>:
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
LSM6DS3_Result LSM6DS3_XL_Start(uint8_t XL_Rate, uint8_t XL_Scale, uint8_t XL_Filter) {
 8006554:	b590      	push	{r4, r7, lr}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	0004      	movs	r4, r0
 800655c:	0008      	movs	r0, r1
 800655e:	0011      	movs	r1, r2
 8006560:	1dfb      	adds	r3, r7, #7
 8006562:	1c22      	adds	r2, r4, #0
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	1dbb      	adds	r3, r7, #6
 8006568:	1c02      	adds	r2, r0, #0
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	1d7b      	adds	r3, r7, #5
 800656e:	1c0a      	adds	r2, r1, #0
 8006570:	701a      	strb	r2, [r3, #0]
	uint8_t byte = (XL_Rate << 4) | ((XL_Scale << 2) & 0x0F) | (XL_Filter & 0x03);
 8006572:	1dfb      	adds	r3, r7, #7
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	b25a      	sxtb	r2, r3
 800657a:	1dbb      	adds	r3, r7, #6
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	b25b      	sxtb	r3, r3
 8006582:	210f      	movs	r1, #15
 8006584:	400b      	ands	r3, r1
 8006586:	b25b      	sxtb	r3, r3
 8006588:	4313      	orrs	r3, r2
 800658a:	b25a      	sxtb	r2, r3
 800658c:	1d7b      	adds	r3, r7, #5
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	b25b      	sxtb	r3, r3
 8006592:	2103      	movs	r1, #3
 8006594:	400b      	ands	r3, r1
 8006596:	b25b      	sxtb	r3, r3
 8006598:	4313      	orrs	r3, r2
 800659a:	b25b      	sxtb	r3, r3
 800659c:	b2da      	uxtb	r2, r3
 800659e:	230f      	movs	r3, #15
 80065a0:	18fb      	adds	r3, r7, r3
 80065a2:	701a      	strb	r2, [r3, #0]

	if(LSM6DS3_Verify_XL_Settings(XL_Rate, XL_Scale, XL_Filter) !=  LSM6DS3_OK){
 80065a4:	1d7b      	adds	r3, r7, #5
 80065a6:	781a      	ldrb	r2, [r3, #0]
 80065a8:	1dbb      	adds	r3, r7, #6
 80065aa:	7819      	ldrb	r1, [r3, #0]
 80065ac:	1dfb      	adds	r3, r7, #7
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	0018      	movs	r0, r3
 80065b2:	f000 f815 	bl	80065e0 <LSM6DS3_Verify_XL_Settings>
 80065b6:	1e03      	subs	r3, r0, #0
 80065b8:	d001      	beq.n	80065be <LSM6DS3_XL_Start+0x6a>

		return LSM6DS3_FAIL_PARAMETERS;
 80065ba:	2302      	movs	r3, #2
 80065bc:	e00b      	b.n	80065d6 <LSM6DS3_XL_Start+0x82>
		//xprintf("%s-%d\r\n",__func__,__LINE__);
	}

	if(LSM6DS3_WriteAndVerify(LSM6DS3_XL_GS_CTRL1_XL, &byte, sizeof(byte)) !=  LSM6DS3_OK){
 80065be:	230f      	movs	r3, #15
 80065c0:	18fb      	adds	r3, r7, r3
 80065c2:	2201      	movs	r2, #1
 80065c4:	0019      	movs	r1, r3
 80065c6:	2010      	movs	r0, #16
 80065c8:	f000 f988 	bl	80068dc <LSM6DS3_WriteAndVerify>
 80065cc:	1e03      	subs	r3, r0, #0
 80065ce:	d001      	beq.n	80065d4 <LSM6DS3_XL_Start+0x80>

		return LSM6DS3_FAIL;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <LSM6DS3_XL_Start+0x82>
		//xprintf("%s-%d\r\n",__func__,__LINE__);
	}

	return LSM6DS3_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	0018      	movs	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	b005      	add	sp, #20
 80065dc:	bd90      	pop	{r4, r7, pc}
	...

080065e0 <LSM6DS3_Verify_XL_Settings>:
 * @param  None
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
static LSM6DS3_Result LSM6DS3_Verify_XL_Settings(uint8_t XL_Rate, uint8_t XL_Range, uint8_t XL_Filter) {
 80065e0:	b590      	push	{r4, r7, lr}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	0004      	movs	r4, r0
 80065e8:	0008      	movs	r0, r1
 80065ea:	0011      	movs	r1, r2
 80065ec:	1dfb      	adds	r3, r7, #7
 80065ee:	1c22      	adds	r2, r4, #0
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	1dbb      	adds	r3, r7, #6
 80065f4:	1c02      	adds	r2, r0, #0
 80065f6:	701a      	strb	r2, [r3, #0]
 80065f8:	1d7b      	adds	r3, r7, #5
 80065fa:	1c0a      	adds	r2, r1, #0
 80065fc:	701a      	strb	r2, [r3, #0]
	if((XL_Rate < XL_12_5Hz) || (XL_Rate > XL_6660Hz))
 80065fe:	1dfb      	adds	r3, r7, #7
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <LSM6DS3_Verify_XL_Settings+0x2e>
 8006606:	1dfb      	adds	r3, r7, #7
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b0a      	cmp	r3, #10
 800660c:	d901      	bls.n	8006612 <LSM6DS3_Verify_XL_Settings+0x32>
		return LSM6DS3_FAIL_PARAMETERS;
 800660e:	2302      	movs	r3, #2
 8006610:	e010      	b.n	8006634 <LSM6DS3_Verify_XL_Settings+0x54>
	else if((XL_Range < XL_RANGE_2G) || (XL_Range > XL_RANGE_8G))
 8006612:	1dbb      	adds	r3, r7, #6
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b03      	cmp	r3, #3
 8006618:	d901      	bls.n	800661e <LSM6DS3_Verify_XL_Settings+0x3e>
		return LSM6DS3_FAIL_PARAMETERS;
 800661a:	2302      	movs	r3, #2
 800661c:	e00a      	b.n	8006634 <LSM6DS3_Verify_XL_Settings+0x54>
	else if((XL_Filter < XL_FILTER_400Hz) || (XL_Filter > XL_FILTER_50Hz))
 800661e:	1d7b      	adds	r3, r7, #5
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	2b03      	cmp	r3, #3
 8006624:	d901      	bls.n	800662a <LSM6DS3_Verify_XL_Settings+0x4a>
		return LSM6DS3_FAIL_PARAMETERS;
 8006626:	2302      	movs	r3, #2
 8006628:	e004      	b.n	8006634 <LSM6DS3_Verify_XL_Settings+0x54>
	LSM6DS3_parameters.XL_range = XL_Range;
 800662a:	4b04      	ldr	r3, [pc, #16]	; (800663c <LSM6DS3_Verify_XL_Settings+0x5c>)
 800662c:	1dba      	adds	r2, r7, #6
 800662e:	7812      	ldrb	r2, [r2, #0]
 8006630:	701a      	strb	r2, [r3, #0]
	return LSM6DS3_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	0018      	movs	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	b003      	add	sp, #12
 800663a:	bd90      	pop	{r4, r7, pc}
 800663c:	200001f0 	.word	0x200001f0

08006640 <LSM6DS3_GS_Start>:
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
LSM6DS3_Result LSM6DS3_GS_Start(uint8_t GS_Rate, uint8_t GS_Range) {
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	0002      	movs	r2, r0
 8006648:	1dfb      	adds	r3, r7, #7
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	1dbb      	adds	r3, r7, #6
 800664e:	1c0a      	adds	r2, r1, #0
 8006650:	701a      	strb	r2, [r3, #0]
	uint8_t byte = (GS_Rate << 4) | ((GS_Range << 1) & 0x0F);
 8006652:	1dfb      	adds	r3, r7, #7
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	b25a      	sxtb	r2, r3
 800665a:	1dbb      	adds	r3, r7, #6
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	b25b      	sxtb	r3, r3
 8006662:	210f      	movs	r1, #15
 8006664:	400b      	ands	r3, r1
 8006666:	b25b      	sxtb	r3, r3
 8006668:	4313      	orrs	r3, r2
 800666a:	b25b      	sxtb	r3, r3
 800666c:	b2da      	uxtb	r2, r3
 800666e:	210f      	movs	r1, #15
 8006670:	187b      	adds	r3, r7, r1
 8006672:	701a      	strb	r2, [r3, #0]

	byte &= 0xFE; /* Always secure the LSB is 0 */
 8006674:	187b      	adds	r3, r7, r1
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2201      	movs	r2, #1
 800667a:	4393      	bics	r3, r2
 800667c:	b2da      	uxtb	r2, r3
 800667e:	187b      	adds	r3, r7, r1
 8006680:	701a      	strb	r2, [r3, #0]
	if(LSM6DS3_Verify_GS_Settings(GS_Rate, GS_Range) !=  LSM6DS3_OK){
 8006682:	1dbb      	adds	r3, r7, #6
 8006684:	781a      	ldrb	r2, [r3, #0]
 8006686:	1dfb      	adds	r3, r7, #7
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	0011      	movs	r1, r2
 800668c:	0018      	movs	r0, r3
 800668e:	f000 f825 	bl	80066dc <LSM6DS3_Verify_GS_Settings>
 8006692:	1e03      	subs	r3, r0, #0
 8006694:	d007      	beq.n	80066a6 <LSM6DS3_GS_Start+0x66>

		xprintf("%s-%d\r\n",__func__,__LINE__);
 8006696:	490f      	ldr	r1, [pc, #60]	; (80066d4 <LSM6DS3_GS_Start+0x94>)
 8006698:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <LSM6DS3_GS_Start+0x98>)
 800669a:	22b8      	movs	r2, #184	; 0xb8
 800669c:	0018      	movs	r0, r3
 800669e:	f004 fa07 	bl	800aab0 <xprintf>
		return LSM6DS3_FAIL_PARAMETERS;
 80066a2:	2302      	movs	r3, #2
 80066a4:	e011      	b.n	80066ca <LSM6DS3_GS_Start+0x8a>

	}

	if(LSM6DS3_WriteAndVerify(LSM6DS3_XL_GS_CTRL2_G, &byte, sizeof(byte)) !=  LSM6DS3_OK){
 80066a6:	230f      	movs	r3, #15
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	2201      	movs	r2, #1
 80066ac:	0019      	movs	r1, r3
 80066ae:	2011      	movs	r0, #17
 80066b0:	f000 f914 	bl	80068dc <LSM6DS3_WriteAndVerify>
 80066b4:	1e03      	subs	r3, r0, #0
 80066b6:	d007      	beq.n	80066c8 <LSM6DS3_GS_Start+0x88>
		xprintf("%s-%d\r\n",__func__,__LINE__);
 80066b8:	4906      	ldr	r1, [pc, #24]	; (80066d4 <LSM6DS3_GS_Start+0x94>)
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <LSM6DS3_GS_Start+0x98>)
 80066bc:	22be      	movs	r2, #190	; 0xbe
 80066be:	0018      	movs	r0, r3
 80066c0:	f004 f9f6 	bl	800aab0 <xprintf>
		return LSM6DS3_FAIL;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <LSM6DS3_GS_Start+0x8a>
	}

	return LSM6DS3_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	0018      	movs	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	b004      	add	sp, #16
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	0800d2ac 	.word	0x0800d2ac
 80066d8:	0800cdd8 	.word	0x0800cdd8

080066dc <LSM6DS3_Verify_GS_Settings>:
 * @param  None
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
static LSM6DS3_Result LSM6DS3_Verify_GS_Settings(uint8_t GS_Rate, uint8_t GS_Range) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	0002      	movs	r2, r0
 80066e4:	1dfb      	adds	r3, r7, #7
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	1dbb      	adds	r3, r7, #6
 80066ea:	1c0a      	adds	r2, r1, #0
 80066ec:	701a      	strb	r2, [r3, #0]
	if((GS_Rate < GS_12_5Hz) || (GS_Rate > GS_1666Hz))
 80066ee:	1dfb      	adds	r3, r7, #7
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <LSM6DS3_Verify_GS_Settings+0x22>
 80066f6:	1dfb      	adds	r3, r7, #7
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d901      	bls.n	8006702 <LSM6DS3_Verify_GS_Settings+0x26>
		return LSM6DS3_FAIL_PARAMETERS;
 80066fe:	2302      	movs	r3, #2
 8006700:	e012      	b.n	8006728 <LSM6DS3_Verify_GS_Settings+0x4c>
	else if((GS_Range < GS_RANGE_250dps) || (GS_Range > GS_RANGE_2000dps) || (GS_Range == 3) || (GS_Range == 5))
 8006702:	1dbb      	adds	r3, r7, #6
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b06      	cmp	r3, #6
 8006708:	d807      	bhi.n	800671a <LSM6DS3_Verify_GS_Settings+0x3e>
 800670a:	1dbb      	adds	r3, r7, #6
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b03      	cmp	r3, #3
 8006710:	d003      	beq.n	800671a <LSM6DS3_Verify_GS_Settings+0x3e>
 8006712:	1dbb      	adds	r3, r7, #6
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b05      	cmp	r3, #5
 8006718:	d101      	bne.n	800671e <LSM6DS3_Verify_GS_Settings+0x42>
		return LSM6DS3_FAIL_PARAMETERS;
 800671a:	2302      	movs	r3, #2
 800671c:	e004      	b.n	8006728 <LSM6DS3_Verify_GS_Settings+0x4c>
	LSM6DS3_parameters.GS_range = GS_Range;
 800671e:	4b04      	ldr	r3, [pc, #16]	; (8006730 <LSM6DS3_Verify_GS_Settings+0x54>)
 8006720:	1dba      	adds	r2, r7, #6
 8006722:	7812      	ldrb	r2, [r2, #0]
 8006724:	705a      	strb	r2, [r3, #1]
	return LSM6DS3_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	0018      	movs	r0, r3
 800672a:	46bd      	mov	sp, r7
 800672c:	b002      	add	sp, #8
 800672e:	bd80      	pop	{r7, pc}
 8006730:	200001f0 	.word	0x200001f0

08006734 <LSM6DS3_IMU_GetMeasurements>:
 * @param  None
 * @retval enum LSM6DS3_Result:
* 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
LSM6DS3_Result LSM6DS3_IMU_GetMeasurements(void) {
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
	uint8_t bytes[14] = {0};
 800673a:	003b      	movs	r3, r7
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	3304      	adds	r3, #4
 8006742:	220a      	movs	r2, #10
 8006744:	2100      	movs	r1, #0
 8006746:	0018      	movs	r0, r3
 8006748:	f005 faf1 	bl	800bd2e <memset>

	if(LSM6DS3_ReadRegister(LSM6DS3_XL_GS_OUT_TEMP_L, bytes, sizeof(bytes)) == LSM6DS3_OK) {
 800674c:	003b      	movs	r3, r7
 800674e:	220e      	movs	r2, #14
 8006750:	0019      	movs	r1, r3
 8006752:	2020      	movs	r0, #32
 8006754:	f000 f89e 	bl	8006894 <LSM6DS3_ReadRegister>
 8006758:	1e03      	subs	r3, r0, #0
 800675a:	d14e      	bne.n	80067fa <LSM6DS3_IMU_GetMeasurements+0xc6>
		LSM6DS3_data.Temperature = (int16_t) (bytes[1]<<8  | bytes[0]);
 800675c:	003b      	movs	r3, r7
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	b21a      	sxth	r2, r3
 8006764:	003b      	movs	r3, r7
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	b21b      	sxth	r3, r3
 800676a:	4313      	orrs	r3, r2
 800676c:	b21a      	sxth	r2, r3
 800676e:	4b25      	ldr	r3, [pc, #148]	; (8006804 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 8006770:	819a      	strh	r2, [r3, #12]
		LSM6DS3_data.GS_x 		 = (int16_t) (bytes[3]<<8  | bytes[2]);
 8006772:	003b      	movs	r3, r7
 8006774:	78db      	ldrb	r3, [r3, #3]
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	b21a      	sxth	r2, r3
 800677a:	003b      	movs	r3, r7
 800677c:	789b      	ldrb	r3, [r3, #2]
 800677e:	b21b      	sxth	r3, r3
 8006780:	4313      	orrs	r3, r2
 8006782:	b21a      	sxth	r2, r3
 8006784:	4b1f      	ldr	r3, [pc, #124]	; (8006804 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 8006786:	80da      	strh	r2, [r3, #6]
		LSM6DS3_data.GS_y 		 = (int16_t) (bytes[5]<<8  | bytes[4]);
 8006788:	003b      	movs	r3, r7
 800678a:	795b      	ldrb	r3, [r3, #5]
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	b21a      	sxth	r2, r3
 8006790:	003b      	movs	r3, r7
 8006792:	791b      	ldrb	r3, [r3, #4]
 8006794:	b21b      	sxth	r3, r3
 8006796:	4313      	orrs	r3, r2
 8006798:	b21a      	sxth	r2, r3
 800679a:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 800679c:	811a      	strh	r2, [r3, #8]
		LSM6DS3_data.GS_z 		 = (int16_t) (bytes[7]<<8  | bytes[6]);
 800679e:	003b      	movs	r3, r7
 80067a0:	79db      	ldrb	r3, [r3, #7]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	b21a      	sxth	r2, r3
 80067a6:	003b      	movs	r3, r7
 80067a8:	799b      	ldrb	r3, [r3, #6]
 80067aa:	b21b      	sxth	r3, r3
 80067ac:	4313      	orrs	r3, r2
 80067ae:	b21a      	sxth	r2, r3
 80067b0:	4b14      	ldr	r3, [pc, #80]	; (8006804 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 80067b2:	815a      	strh	r2, [r3, #10]
		LSM6DS3_data.XL_x 		 = (int16_t) (bytes[9]<<8  | bytes[8]);
 80067b4:	003b      	movs	r3, r7
 80067b6:	7a5b      	ldrb	r3, [r3, #9]
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	b21a      	sxth	r2, r3
 80067bc:	003b      	movs	r3, r7
 80067be:	7a1b      	ldrb	r3, [r3, #8]
 80067c0:	b21b      	sxth	r3, r3
 80067c2:	4313      	orrs	r3, r2
 80067c4:	b21a      	sxth	r2, r3
 80067c6:	4b0f      	ldr	r3, [pc, #60]	; (8006804 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 80067c8:	801a      	strh	r2, [r3, #0]
		LSM6DS3_data.XL_y 		 = (int16_t) (bytes[11]<<8 | bytes[10]);
 80067ca:	003b      	movs	r3, r7
 80067cc:	7adb      	ldrb	r3, [r3, #11]
 80067ce:	021b      	lsls	r3, r3, #8
 80067d0:	b21a      	sxth	r2, r3
 80067d2:	003b      	movs	r3, r7
 80067d4:	7a9b      	ldrb	r3, [r3, #10]
 80067d6:	b21b      	sxth	r3, r3
 80067d8:	4313      	orrs	r3, r2
 80067da:	b21a      	sxth	r2, r3
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 80067de:	805a      	strh	r2, [r3, #2]
		LSM6DS3_data.XL_z 		 = (int16_t) (bytes[13]<<8 | bytes[12]);
 80067e0:	003b      	movs	r3, r7
 80067e2:	7b5b      	ldrb	r3, [r3, #13]
 80067e4:	021b      	lsls	r3, r3, #8
 80067e6:	b21a      	sxth	r2, r3
 80067e8:	003b      	movs	r3, r7
 80067ea:	7b1b      	ldrb	r3, [r3, #12]
 80067ec:	b21b      	sxth	r3, r3
 80067ee:	4313      	orrs	r3, r2
 80067f0:	b21a      	sxth	r2, r3
 80067f2:	4b04      	ldr	r3, [pc, #16]	; (8006804 <LSM6DS3_IMU_GetMeasurements+0xd0>)
 80067f4:	809a      	strh	r2, [r3, #4]
		return LSM6DS3_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	e000      	b.n	80067fc <LSM6DS3_IMU_GetMeasurements+0xc8>
	}
	return LSM6DS3_FAIL;
 80067fa:	2301      	movs	r3, #1
}
 80067fc:	0018      	movs	r0, r3
 80067fe:	46bd      	mov	sp, r7
 8006800:	b004      	add	sp, #16
 8006802:	bd80      	pop	{r7, pc}
 8006804:	200001fc 	.word	0x200001fc

08006808 <LSM6DS3_GetXL_X_Int16>:
/*
 * @brief  Get the raw data of X axe (Accelerometer)
 * @param  none
 * @retval int16_t: Raw data of X axe
*/
int16_t LSM6DS3_GetXL_X_Int16(void) {
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
	return LSM6DS3_data.XL_x;
 800680c:	4b02      	ldr	r3, [pc, #8]	; (8006818 <LSM6DS3_GetXL_X_Int16+0x10>)
 800680e:	2200      	movs	r2, #0
 8006810:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006812:	0018      	movs	r0, r3
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	200001fc 	.word	0x200001fc

0800681c <LSM6DS3_GetXL_Y_Int16>:
/*
 * @brief  Get the raw data of Y axe (Accelerometer)
 * @param  None
 * @retval int16_t: Raw data of Y axe
*/
int16_t LSM6DS3_GetXL_Y_Int16(void) {
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
	return LSM6DS3_data.XL_y;
 8006820:	4b02      	ldr	r3, [pc, #8]	; (800682c <LSM6DS3_GetXL_Y_Int16+0x10>)
 8006822:	2202      	movs	r2, #2
 8006824:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006826:	0018      	movs	r0, r3
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	200001fc 	.word	0x200001fc

08006830 <LSM6DS3_GetXL_Z_Int16>:
/*
 * @brief  Get the raw data of Z axe (Accelerometer)
 * @param  None
 * @retval int16_t: Raw data of Z axe
*/
int16_t LSM6DS3_GetXL_Z_Int16(void) {
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
	return LSM6DS3_data.XL_z;
 8006834:	4b02      	ldr	r3, [pc, #8]	; (8006840 <LSM6DS3_GetXL_Z_Int16+0x10>)
 8006836:	2204      	movs	r2, #4
 8006838:	5e9b      	ldrsh	r3, [r3, r2]
}
 800683a:	0018      	movs	r0, r3
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	200001fc 	.word	0x200001fc

08006844 <LSM6DS3_GetGS_X_Int16>:
/*
 * @brief  Get the raw data of X axe (Gyroscope)
 * @param  None
 * @retval int16_t: Raw data of X axe
*/
int16_t LSM6DS3_GetGS_X_Int16(void) {
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
	return LSM6DS3_data.GS_x;
 8006848:	4b02      	ldr	r3, [pc, #8]	; (8006854 <LSM6DS3_GetGS_X_Int16+0x10>)
 800684a:	2206      	movs	r2, #6
 800684c:	5e9b      	ldrsh	r3, [r3, r2]
}
 800684e:	0018      	movs	r0, r3
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	200001fc 	.word	0x200001fc

08006858 <LSM6DS3_GetGS_Y_Int16>:
/*
 * @brief  Get the raw data of Y axe (Gyroscope)
 * @param  None
 * @retval int16_t: Raw data of Y axe
*/
int16_t LSM6DS3_GetGS_Y_Int16(void) {
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
	return LSM6DS3_data.GS_y;
 800685c:	4b02      	ldr	r3, [pc, #8]	; (8006868 <LSM6DS3_GetGS_Y_Int16+0x10>)
 800685e:	2208      	movs	r2, #8
 8006860:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006862:	0018      	movs	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	200001fc 	.word	0x200001fc

0800686c <LSM6DS3_GetGS_Z_Int16>:
/*
 * @brief  Get the raw data of Z axe (Gyroscope)
 * @param  None
 * @retval int16_t: Raw data of Z axe
*/
int16_t LSM6DS3_GetGS_Z_Int16(void) {
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
	return LSM6DS3_data.GS_z;
 8006870:	4b02      	ldr	r3, [pc, #8]	; (800687c <LSM6DS3_GetGS_Z_Int16+0x10>)
 8006872:	220a      	movs	r2, #10
 8006874:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006876:	0018      	movs	r0, r3
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200001fc 	.word	0x200001fc

08006880 <LSM6DS3_Temperature_Int16>:
/*
 * @brief  Get the raw data of temperature
 * @param  None
 * @retval int16_t: Raw data of temperature
*/
int16_t LSM6DS3_Temperature_Int16(void) {
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
	return LSM6DS3_data.Temperature;
 8006884:	4b02      	ldr	r3, [pc, #8]	; (8006890 <LSM6DS3_Temperature_Int16+0x10>)
 8006886:	220c      	movs	r2, #12
 8006888:	5e9b      	ldrsh	r3, [r3, r2]
}
 800688a:	0018      	movs	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	200001fc 	.word	0x200001fc

08006894 <LSM6DS3_ReadRegister>:
 * 		   size: Size of data to be written
 * @retval enum LSM6DS3_Result:
* 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
static LSM6DS3_Result LSM6DS3_ReadRegister(uint8_t reg, uint8_t* data, uint16_t size) {
 8006894:	b5b0      	push	{r4, r5, r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af02      	add	r7, sp, #8
 800689a:	6039      	str	r1, [r7, #0]
 800689c:	0011      	movs	r1, r2
 800689e:	1dfb      	adds	r3, r7, #7
 80068a0:	1c02      	adds	r2, r0, #0
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	1d3b      	adds	r3, r7, #4
 80068a6:	1c0a      	adds	r2, r1, #0
 80068a8:	801a      	strh	r2, [r3, #0]
	if(!SPIx_ReadRegister(LSM6DS3_parameters.spi_channel,reg,data,size,LSM6DS3_parameters.timeout))
 80068aa:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <LSM6DS3_ReadRegister+0x44>)
 80068ac:	6898      	ldr	r0, [r3, #8]
 80068ae:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <LSM6DS3_ReadRegister+0x44>)
 80068b0:	889b      	ldrh	r3, [r3, #4]
 80068b2:	1d3a      	adds	r2, r7, #4
 80068b4:	8815      	ldrh	r5, [r2, #0]
 80068b6:	683c      	ldr	r4, [r7, #0]
 80068b8:	1dfa      	adds	r2, r7, #7
 80068ba:	7811      	ldrb	r1, [r2, #0]
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	002b      	movs	r3, r5
 80068c0:	0022      	movs	r2, r4
 80068c2:	f003 fce7 	bl	800a294 <SPIx_ReadRegister>
 80068c6:	1e03      	subs	r3, r0, #0
 80068c8:	d101      	bne.n	80068ce <LSM6DS3_ReadRegister+0x3a>
		return LSM6DS3_FAIL;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e000      	b.n	80068d0 <LSM6DS3_ReadRegister+0x3c>
	return LSM6DS3_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	0018      	movs	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	b002      	add	sp, #8
 80068d6:	bdb0      	pop	{r4, r5, r7, pc}
 80068d8:	200001f0 	.word	0x200001f0

080068dc <LSM6DS3_WriteAndVerify>:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
 * 					- LSM6DS3_FAIL_COMPARE 	   = 3,  Failed due to wrong write/read compare
*/
static LSM6DS3_Result LSM6DS3_WriteAndVerify(uint8_t reg, uint8_t* data, uint16_t size) {
 80068dc:	b5b0      	push	{r4, r5, r7, lr}
 80068de:	b08e      	sub	sp, #56	; 0x38
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	6039      	str	r1, [r7, #0]
 80068e4:	0011      	movs	r1, r2
 80068e6:	1dfb      	adds	r3, r7, #7
 80068e8:	1c02      	adds	r2, r0, #0
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	1d3b      	adds	r3, r7, #4
 80068ee:	1c0a      	adds	r2, r1, #0
 80068f0:	801a      	strh	r2, [r3, #0]
	uint8_t compare[32] = {0xFF};
 80068f2:	230c      	movs	r3, #12
 80068f4:	18fb      	adds	r3, r7, r3
 80068f6:	22ff      	movs	r2, #255	; 0xff
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	3304      	adds	r3, #4
 80068fc:	221c      	movs	r2, #28
 80068fe:	2100      	movs	r1, #0
 8006900:	0018      	movs	r0, r3
 8006902:	f005 fa14 	bl	800bd2e <memset>

	if(size > sizeof(compare))
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	2b20      	cmp	r3, #32
 800690c:	d901      	bls.n	8006912 <LSM6DS3_WriteAndVerify+0x36>
		return LSM6DS3_FAIL_PARAMETERS;
 800690e:	2302      	movs	r3, #2
 8006910:	e04b      	b.n	80069aa <LSM6DS3_WriteAndVerify+0xce>

	if(!SPIx_WriteRegister(LSM6DS3_parameters.spi_channel,reg,data,size,LSM6DS3_parameters.timeout))
 8006912:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <LSM6DS3_WriteAndVerify+0xd8>)
 8006914:	6898      	ldr	r0, [r3, #8]
 8006916:	4b27      	ldr	r3, [pc, #156]	; (80069b4 <LSM6DS3_WriteAndVerify+0xd8>)
 8006918:	889b      	ldrh	r3, [r3, #4]
 800691a:	1d3a      	adds	r2, r7, #4
 800691c:	8815      	ldrh	r5, [r2, #0]
 800691e:	683c      	ldr	r4, [r7, #0]
 8006920:	1dfa      	adds	r2, r7, #7
 8006922:	7811      	ldrb	r1, [r2, #0]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	002b      	movs	r3, r5
 8006928:	0022      	movs	r2, r4
 800692a:	f003 fcef 	bl	800a30c <SPIx_WriteRegister>
 800692e:	1e03      	subs	r3, r0, #0
 8006930:	d101      	bne.n	8006936 <LSM6DS3_WriteAndVerify+0x5a>
		return LSM6DS3_FAIL;
 8006932:	2301      	movs	r3, #1
 8006934:	e039      	b.n	80069aa <LSM6DS3_WriteAndVerify+0xce>


	if(!SPIx_ReadRegister(LSM6DS3_parameters.spi_channel,reg,compare,size,LSM6DS3_parameters.timeout))
 8006936:	4b1f      	ldr	r3, [pc, #124]	; (80069b4 <LSM6DS3_WriteAndVerify+0xd8>)
 8006938:	6898      	ldr	r0, [r3, #8]
 800693a:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <LSM6DS3_WriteAndVerify+0xd8>)
 800693c:	889b      	ldrh	r3, [r3, #4]
 800693e:	1d3a      	adds	r2, r7, #4
 8006940:	8815      	ldrh	r5, [r2, #0]
 8006942:	220c      	movs	r2, #12
 8006944:	18bc      	adds	r4, r7, r2
 8006946:	1dfa      	adds	r2, r7, #7
 8006948:	7811      	ldrb	r1, [r2, #0]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	002b      	movs	r3, r5
 800694e:	0022      	movs	r2, r4
 8006950:	f003 fca0 	bl	800a294 <SPIx_ReadRegister>
 8006954:	1e03      	subs	r3, r0, #0
 8006956:	d101      	bne.n	800695c <LSM6DS3_WriteAndVerify+0x80>
		return LSM6DS3_FAIL;
 8006958:	2301      	movs	r3, #1
 800695a:	e026      	b.n	80069aa <LSM6DS3_WriteAndVerify+0xce>

	for(uint8_t i=0; i < size; i++) {
 800695c:	232f      	movs	r3, #47	; 0x2f
 800695e:	18fb      	adds	r3, r7, r3
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	e018      	b.n	8006998 <LSM6DS3_WriteAndVerify+0xbc>
		if(compare[i] != data[i]){
 8006966:	212f      	movs	r1, #47	; 0x2f
 8006968:	187b      	adds	r3, r7, r1
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	220c      	movs	r2, #12
 800696e:	18ba      	adds	r2, r7, r2
 8006970:	5cd2      	ldrb	r2, [r2, r3]
 8006972:	187b      	adds	r3, r7, r1
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	18cb      	adds	r3, r1, r3
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d005      	beq.n	800698c <LSM6DS3_WriteAndVerify+0xb0>
			xprintf("not equal\r\n");
 8006980:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <LSM6DS3_WriteAndVerify+0xdc>)
 8006982:	0018      	movs	r0, r3
 8006984:	f004 f894 	bl	800aab0 <xprintf>
			return LSM6DS3_FAIL_COMPARE;
 8006988:	2303      	movs	r3, #3
 800698a:	e00e      	b.n	80069aa <LSM6DS3_WriteAndVerify+0xce>
	for(uint8_t i=0; i < size; i++) {
 800698c:	212f      	movs	r1, #47	; 0x2f
 800698e:	187b      	adds	r3, r7, r1
 8006990:	781a      	ldrb	r2, [r3, #0]
 8006992:	187b      	adds	r3, r7, r1
 8006994:	3201      	adds	r2, #1
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	232f      	movs	r3, #47	; 0x2f
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	1d3a      	adds	r2, r7, #4
 80069a2:	8812      	ldrh	r2, [r2, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d8de      	bhi.n	8006966 <LSM6DS3_WriteAndVerify+0x8a>
		}
	}

	return LSM6DS3_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	0018      	movs	r0, r3
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b00c      	add	sp, #48	; 0x30
 80069b0:	bdb0      	pop	{r4, r5, r7, pc}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	200001f0 	.word	0x200001f0
 80069b8:	0800cde0 	.word	0x0800cde0

080069bc <cmd_response>:
	ptr[7] = HexChar[val & 0xF];
	ptr[8] = 0x0;
}

int cmd_response(char* buff, int size, char *cmd, const char *fmt, ...)
{
 80069bc:	b408      	push	{r3}
 80069be:	b590      	push	{r4, r7, lr}
 80069c0:	b08a      	sub	sp, #40	; 0x28
 80069c2:	af02      	add	r7, sp, #8
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
	int n = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	61fb      	str	r3, [r7, #28]
    va_list ap;
    n = usnprintf(buff, size, "*SS,%s,V9,%s,", g_config.deviceCode, cmd);
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	4c1d      	ldr	r4, [pc, #116]	; (8006a48 <cmd_response+0x8c>)
 80069d2:	4a1e      	ldr	r2, [pc, #120]	; (8006a4c <cmd_response+0x90>)
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	0023      	movs	r3, r4
 80069dc:	f003 fc28 	bl	800a230 <usnprintf>
 80069e0:	0003      	movs	r3, r0
 80069e2:	61fb      	str	r3, [r7, #28]
    va_start(ap, fmt);
 80069e4:	2330      	movs	r3, #48	; 0x30
 80069e6:	18fb      	adds	r3, r7, r3
 80069e8:	617b      	str	r3, [r7, #20]
    char *bufftmp = buff + (n);
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	18d3      	adds	r3, r2, r3
 80069f0:	61bb      	str	r3, [r7, #24]
    n = uvsnprintf(bufftmp, size-(n+1), (char *) fmt, ap );
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	3301      	adds	r3, #1
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	0019      	movs	r1, r3
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a00:	69b8      	ldr	r0, [r7, #24]
 8006a02:	f003 fa27 	bl	8009e54 <uvsnprintf>
 8006a06:	0003      	movs	r3, r0
 8006a08:	61fb      	str	r3, [r7, #28]
    va_end(ap);
    bufftmp[n] = '#';
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	18d3      	adds	r3, r2, r3
 8006a10:	2223      	movs	r2, #35	; 0x23
 8006a12:	701a      	strb	r2, [r3, #0]
    n++;
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	3301      	adds	r3, #1
 8006a18:	61fb      	str	r3, [r7, #28]
    bufftmp[n] = '\r';
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	18d3      	adds	r3, r2, r3
 8006a20:	220d      	movs	r2, #13
 8006a22:	701a      	strb	r2, [r3, #0]
    n++;
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	3301      	adds	r3, #1
 8006a28:	61fb      	str	r3, [r7, #28]
    bufftmp[n] = '\n';
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	18d3      	adds	r3, r2, r3
 8006a30:	220a      	movs	r2, #10
 8006a32:	701a      	strb	r2, [r3, #0]
    return n+1;
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	3301      	adds	r3, #1
}
 8006a38:	0018      	movs	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b008      	add	sp, #32
 8006a3e:	bc90      	pop	{r4, r7}
 8006a40:	bc08      	pop	{r3}
 8006a42:	b001      	add	sp, #4
 8006a44:	4718      	bx	r3
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	2000036a 	.word	0x2000036a
 8006a4c:	0800ce00 	.word	0x0800ce00

08006a50 <next_char>:
	strcat(buff, ",V9,");
	strcat(buff, command);
	return 1;
}

int next_char(char* data, char sep, int max) {
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	607a      	str	r2, [r7, #4]
 8006a5a:	200b      	movs	r0, #11
 8006a5c:	183b      	adds	r3, r7, r0
 8006a5e:	1c0a      	adds	r2, r1, #0
 8006a60:	701a      	strb	r2, [r3, #0]
	char *ptr = strchr(data, sep);
 8006a62:	183b      	adds	r3, r7, r0
 8006a64:	781a      	ldrb	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	0011      	movs	r1, r2
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f005 fa7c 	bl	800bf68 <strchr>
 8006a70:	0003      	movs	r3, r0
 8006a72:	617b      	str	r3, [r7, #20]
	if (ptr) {
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <next_char+0x3a>
		return (ptr - data) >= max ? max : (ptr - data);
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4293      	cmp	r3, r2
 8006a84:	dd02      	ble.n	8006a8c <next_char+0x3c>
 8006a86:	0013      	movs	r3, r2
 8006a88:	e000      	b.n	8006a8c <next_char+0x3c>
	} else {
		return 0;
 8006a8a:	2300      	movs	r3, #0
	}
}
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b006      	add	sp, #24
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <sks_cmd_set_debug>:
	}
}

int write_flash = 0;

static int sks_cmd_set_debug(int from, char* command, int argc, char** argv, int size, int total) {
 8006a94:	b5b0      	push	{r4, r5, r7, lr}
 8006a96:	b088      	sub	sp, #32
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 8006aa2:	2317      	movs	r3, #23
 8006aa4:	18fb      	adds	r3, r7, r3
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	3310      	adds	r3, #16
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <sks_cmd_set_debug+0x24>
		return size;
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	e023      	b.n	8006b00 <sks_cmd_set_debug+0x6c>
	set = atoi(argv[4]);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	3310      	adds	r3, #16
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	0018      	movs	r0, r3
 8006ac0:	f005 f8fc 	bl	800bcbc <atoi>
 8006ac4:	0002      	movs	r2, r0
 8006ac6:	2117      	movs	r1, #23
 8006ac8:	187b      	adds	r3, r7, r1
 8006aca:	701a      	strb	r2, [r3, #0]

	g_appStats.debugOn = set;
 8006acc:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <sks_cmd_set_debug+0x74>)
 8006ace:	0008      	movs	r0, r1
 8006ad0:	187a      	adds	r2, r7, r1
 8006ad2:	214d      	movs	r1, #77	; 0x4d
 8006ad4:	7812      	ldrb	r2, [r2, #0]
 8006ad6:	545a      	strb	r2, [r3, r1]

	cmd_response(Response, sizeof(Response), command, "%d,%d", set, g_appStats.debugOn);
 8006ad8:	183b      	adds	r3, r7, r0
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <sks_cmd_set_debug+0x74>)
 8006ade:	214d      	movs	r1, #77	; 0x4d
 8006ae0:	5c52      	ldrb	r2, [r2, r1]
 8006ae2:	0015      	movs	r5, r2
 8006ae4:	4c09      	ldr	r4, [pc, #36]	; (8006b0c <sks_cmd_set_debug+0x78>)
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	2180      	movs	r1, #128	; 0x80
 8006aea:	0049      	lsls	r1, r1, #1
 8006aec:	4808      	ldr	r0, [pc, #32]	; (8006b10 <sks_cmd_set_debug+0x7c>)
 8006aee:	9501      	str	r5, [sp, #4]
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	0023      	movs	r3, r4
 8006af4:	f7ff ff62 	bl	80069bc <cmd_response>

	response = 1;
 8006af8:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <sks_cmd_set_debug+0x80>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	601a      	str	r2, [r3, #0]

	return size;
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006b00:	0018      	movs	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b006      	add	sp, #24
 8006b06:	bdb0      	pop	{r4, r5, r7, pc}
 8006b08:	20000384 	.word	0x20000384
 8006b0c:	0800ce34 	.word	0x0800ce34
 8006b10:	20000210 	.word	0x20000210
 8006b14:	2000020c 	.word	0x2000020c

08006b18 <sks_cmd_set_full>:

static int sks_cmd_set_full(int from, char* command, int argc, char** argv, int size, int total) {
 8006b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1a:	b08b      	sub	sp, #44	; 0x2c
 8006b1c:	af04      	add	r7, sp, #16
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 8006b26:	2317      	movs	r3, #23
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	3310      	adds	r3, #16
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <sks_cmd_set_full+0x24>
		return size;
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	e044      	b.n	8006bc6 <sks_cmd_set_full+0xae>
	set = atoi(argv[4]);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	3310      	adds	r3, #16
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	0018      	movs	r0, r3
 8006b44:	f005 f8ba 	bl	800bcbc <atoi>
 8006b48:	0002      	movs	r2, r0
 8006b4a:	2117      	movs	r1, #23
 8006b4c:	187b      	adds	r3, r7, r1
 8006b4e:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8006b50:	187b      	adds	r3, r7, r1
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d11e      	bne.n	8006b96 <sks_cmd_set_full+0x7e>
		if(argv[5] != NULL) {
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d012      	beq.n	8006b88 <sks_cmd_set_full+0x70>
			g_config.fullValue = atoi(argv[5]);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	3314      	adds	r3, #20
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f005 f8a7 	bl	800bcbc <atoi>
 8006b6e:	0003      	movs	r3, r0
 8006b70:	001a      	movs	r2, r3
 8006b72:	4b17      	ldr	r3, [pc, #92]	; (8006bd0 <sks_cmd_set_full+0xb8>)
 8006b74:	60da      	str	r2, [r3, #12]
			if(g_config.fullValue == 0) {
 8006b76:	4b16      	ldr	r3, [pc, #88]	; (8006bd0 <sks_cmd_set_full+0xb8>)
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d108      	bne.n	8006b90 <sks_cmd_set_full+0x78>
				g_config.fullValue = g_appStats.frequency;
 8006b7e:	4b15      	ldr	r3, [pc, #84]	; (8006bd4 <sks_cmd_set_full+0xbc>)
 8006b80:	6a1a      	ldr	r2, [r3, #32]
 8006b82:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <sks_cmd_set_full+0xb8>)
 8006b84:	60da      	str	r2, [r3, #12]
 8006b86:	e003      	b.n	8006b90 <sks_cmd_set_full+0x78>
			}
		} else {
			g_config.fullValue = g_appStats.frequency;
 8006b88:	4b12      	ldr	r3, [pc, #72]	; (8006bd4 <sks_cmd_set_full+0xbc>)
 8006b8a:	6a1a      	ldr	r2, [r3, #32]
 8006b8c:	4b10      	ldr	r3, [pc, #64]	; (8006bd0 <sks_cmd_set_full+0xb8>)
 8006b8e:	60da      	str	r2, [r3, #12]
		}
		write_flash = 1;
 8006b90:	4b11      	ldr	r3, [pc, #68]	; (8006bd8 <sks_cmd_set_full+0xc0>)
 8006b92:	2201      	movs	r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d", set, g_config.emptyValue, g_config.fullValue);
 8006b96:	2317      	movs	r3, #23
 8006b98:	18fb      	adds	r3, r7, r3
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	4b0c      	ldr	r3, [pc, #48]	; (8006bd0 <sks_cmd_set_full+0xb8>)
 8006b9e:	6919      	ldr	r1, [r3, #16]
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <sks_cmd_set_full+0xb8>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	4e0d      	ldr	r6, [pc, #52]	; (8006bdc <sks_cmd_set_full+0xc4>)
 8006ba6:	68bd      	ldr	r5, [r7, #8]
 8006ba8:	2080      	movs	r0, #128	; 0x80
 8006baa:	0044      	lsls	r4, r0, #1
 8006bac:	480c      	ldr	r0, [pc, #48]	; (8006be0 <sks_cmd_set_full+0xc8>)
 8006bae:	9302      	str	r3, [sp, #8]
 8006bb0:	9101      	str	r1, [sp, #4]
 8006bb2:	9200      	str	r2, [sp, #0]
 8006bb4:	0033      	movs	r3, r6
 8006bb6:	002a      	movs	r2, r5
 8006bb8:	0021      	movs	r1, r4
 8006bba:	f7ff feff 	bl	80069bc <cmd_response>

	//raise_command_coming();

	response = 1;
 8006bbe:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <sks_cmd_set_full+0xcc>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
	return size;
 8006bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006bc6:	0018      	movs	r0, r3
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	b007      	add	sp, #28
 8006bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bce:	46c0      	nop			; (mov r8, r8)
 8006bd0:	20000368 	.word	0x20000368
 8006bd4:	20000384 	.word	0x20000384
 8006bd8:	20000310 	.word	0x20000310
 8006bdc:	0800ce3c 	.word	0x0800ce3c
 8006be0:	20000210 	.word	0x20000210
 8006be4:	2000020c 	.word	0x2000020c

08006be8 <sks_cmd_set_empty>:

static int sks_cmd_set_empty(int from, char* command, int argc, char** argv, int size, int total) {
 8006be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bea:	b08b      	sub	sp, #44	; 0x2c
 8006bec:	af04      	add	r7, sp, #16
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 8006bf6:	2317      	movs	r3, #23
 8006bf8:	18fb      	adds	r3, r7, r3
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	3310      	adds	r3, #16
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <sks_cmd_set_empty+0x24>
		return size;
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	e044      	b.n	8006c96 <sks_cmd_set_empty+0xae>
	set = atoi(argv[4]);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	3310      	adds	r3, #16
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f005 f852 	bl	800bcbc <atoi>
 8006c18:	0002      	movs	r2, r0
 8006c1a:	2117      	movs	r1, #23
 8006c1c:	187b      	adds	r3, r7, r1
 8006c1e:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8006c20:	187b      	adds	r3, r7, r1
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d11e      	bne.n	8006c66 <sks_cmd_set_empty+0x7e>
		if(argv[5] != NULL) {
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	3314      	adds	r3, #20
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d012      	beq.n	8006c58 <sks_cmd_set_empty+0x70>
			g_config.emptyValue = atoi(argv[5]);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	3314      	adds	r3, #20
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f005 f83f 	bl	800bcbc <atoi>
 8006c3e:	0003      	movs	r3, r0
 8006c40:	001a      	movs	r2, r3
 8006c42:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <sks_cmd_set_empty+0xb8>)
 8006c44:	611a      	str	r2, [r3, #16]
			if(g_config.emptyValue == 0) {
 8006c46:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <sks_cmd_set_empty+0xb8>)
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d108      	bne.n	8006c60 <sks_cmd_set_empty+0x78>
				g_config.emptyValue = g_appStats.frequency;
 8006c4e:	4b15      	ldr	r3, [pc, #84]	; (8006ca4 <sks_cmd_set_empty+0xbc>)
 8006c50:	6a1a      	ldr	r2, [r3, #32]
 8006c52:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <sks_cmd_set_empty+0xb8>)
 8006c54:	611a      	str	r2, [r3, #16]
 8006c56:	e003      	b.n	8006c60 <sks_cmd_set_empty+0x78>
			}
		} else {
			g_config.emptyValue = g_appStats.frequency;
 8006c58:	4b12      	ldr	r3, [pc, #72]	; (8006ca4 <sks_cmd_set_empty+0xbc>)
 8006c5a:	6a1a      	ldr	r2, [r3, #32]
 8006c5c:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <sks_cmd_set_empty+0xb8>)
 8006c5e:	611a      	str	r2, [r3, #16]
		}
		write_flash = 1;
 8006c60:	4b11      	ldr	r3, [pc, #68]	; (8006ca8 <sks_cmd_set_empty+0xc0>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
//	append_number(Response, g_config.emptyValue);
//	strcat(Response, ",");
//	append_number(Response, g_config.fullValue);
//	strcat(Response, "#\r\n");

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d", set, g_config.emptyValue, g_config.fullValue);
 8006c66:	2317      	movs	r3, #23
 8006c68:	18fb      	adds	r3, r7, r3
 8006c6a:	781a      	ldrb	r2, [r3, #0]
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <sks_cmd_set_empty+0xb8>)
 8006c6e:	6919      	ldr	r1, [r3, #16]
 8006c70:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <sks_cmd_set_empty+0xb8>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4e0d      	ldr	r6, [pc, #52]	; (8006cac <sks_cmd_set_empty+0xc4>)
 8006c76:	68bd      	ldr	r5, [r7, #8]
 8006c78:	2080      	movs	r0, #128	; 0x80
 8006c7a:	0044      	lsls	r4, r0, #1
 8006c7c:	480c      	ldr	r0, [pc, #48]	; (8006cb0 <sks_cmd_set_empty+0xc8>)
 8006c7e:	9302      	str	r3, [sp, #8]
 8006c80:	9101      	str	r1, [sp, #4]
 8006c82:	9200      	str	r2, [sp, #0]
 8006c84:	0033      	movs	r3, r6
 8006c86:	002a      	movs	r2, r5
 8006c88:	0021      	movs	r1, r4
 8006c8a:	f7ff fe97 	bl	80069bc <cmd_response>

	//raise_command_coming();

	response = 1;
 8006c8e:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <sks_cmd_set_empty+0xcc>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
	return size;
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006c96:	0018      	movs	r0, r3
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	b007      	add	sp, #28
 8006c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	20000368 	.word	0x20000368
 8006ca4:	20000384 	.word	0x20000384
 8006ca8:	20000310 	.word	0x20000310
 8006cac:	0800ce3c 	.word	0x0800ce3c
 8006cb0:	20000210 	.word	0x20000210
 8006cb4:	2000020c 	.word	0x2000020c

08006cb8 <sks_cmd_disable_ema>:

static int sks_cmd_disable_ema(int from, char* command, int argc, char** argv, int size, int total) {
 8006cb8:	b5b0      	push	{r4, r5, r7, lr}
 8006cba:	b088      	sub	sp, #32
 8006cbc:	af02      	add	r7, sp, #8
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 8006cc6:	2317      	movs	r3, #23
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]

	if (argv[4] == NULL)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	3310      	adds	r3, #16
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <sks_cmd_disable_ema+0x24>
		return size;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	e039      	b.n	8006d50 <sks_cmd_disable_ema+0x98>

	set = atoi(argv[4]);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	3310      	adds	r3, #16
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f004 ffea 	bl	800bcbc <atoi>
 8006ce8:	0002      	movs	r2, r0
 8006cea:	2117      	movs	r1, #23
 8006cec:	187b      	adds	r3, r7, r1
 8006cee:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8006cf0:	187b      	adds	r3, r7, r1
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d117      	bne.n	8006d28 <sks_cmd_disable_ema+0x70>
		if(argv[5] != NULL) {
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	3314      	adds	r3, #20
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00f      	beq.n	8006d22 <sks_cmd_disable_ema+0x6a>
			int tmp = atoi(argv[5]);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	3314      	adds	r3, #20
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f004 ffd7 	bl	800bcbc <atoi>
 8006d0e:	0003      	movs	r3, r0
 8006d10:	613b      	str	r3, [r7, #16]
			g_config.disableEma = (tmp > 0)?1:0;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	17da      	asrs	r2, r3, #31
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	0fdb      	lsrs	r3, r3, #31
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	001a      	movs	r2, r3
 8006d1e:	4b0e      	ldr	r3, [pc, #56]	; (8006d58 <sks_cmd_disable_ema+0xa0>)
 8006d20:	76da      	strb	r2, [r3, #27]
		}

		write_flash = 1;
 8006d22:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <sks_cmd_disable_ema+0xa4>)
 8006d24:	2201      	movs	r2, #1
 8006d26:	601a      	str	r2, [r3, #0]
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d", set, g_config.disableEma);
 8006d28:	2317      	movs	r3, #23
 8006d2a:	18fb      	adds	r3, r7, r3
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <sks_cmd_disable_ema+0xa0>)
 8006d30:	7ed2      	ldrb	r2, [r2, #27]
 8006d32:	0015      	movs	r5, r2
 8006d34:	4c0a      	ldr	r4, [pc, #40]	; (8006d60 <sks_cmd_disable_ema+0xa8>)
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	2180      	movs	r1, #128	; 0x80
 8006d3a:	0049      	lsls	r1, r1, #1
 8006d3c:	4809      	ldr	r0, [pc, #36]	; (8006d64 <sks_cmd_disable_ema+0xac>)
 8006d3e:	9501      	str	r5, [sp, #4]
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	0023      	movs	r3, r4
 8006d44:	f7ff fe3a 	bl	80069bc <cmd_response>

	//raise_command_coming();

	response = 1;
 8006d48:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <sks_cmd_disable_ema+0xb0>)
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
	return size;
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006d50:	0018      	movs	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b006      	add	sp, #24
 8006d56:	bdb0      	pop	{r4, r5, r7, pc}
 8006d58:	20000368 	.word	0x20000368
 8006d5c:	20000310 	.word	0x20000310
 8006d60:	0800ce34 	.word	0x0800ce34
 8006d64:	20000210 	.word	0x20000210
 8006d68:	2000020c 	.word	0x2000020c

08006d6c <sks_cmd_interval>:

static int sks_cmd_interval(int from, char* command, int argc, char** argv, int size, int total) {
 8006d6c:	b5b0      	push	{r4, r5, r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 8006d7a:	2317      	movs	r3, #23
 8006d7c:	18fb      	adds	r3, r7, r3
 8006d7e:	2200      	movs	r2, #0
 8006d80:	701a      	strb	r2, [r3, #0]

	if (argv[4] == NULL)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	3310      	adds	r3, #16
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <sks_cmd_interval+0x24>
		return size;
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	e033      	b.n	8006df8 <sks_cmd_interval+0x8c>

	set = atoi(argv[4]);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	3310      	adds	r3, #16
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	0018      	movs	r0, r3
 8006d98:	f004 ff90 	bl	800bcbc <atoi>
 8006d9c:	0002      	movs	r2, r0
 8006d9e:	2117      	movs	r1, #23
 8006da0:	187b      	adds	r3, r7, r1
 8006da2:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8006da4:	187b      	adds	r3, r7, r1
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d111      	bne.n	8006dd0 <sks_cmd_interval+0x64>
		if(argv[5] != NULL) {
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	3314      	adds	r3, #20
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <sks_cmd_interval+0x5e>
			g_config.interval = atoi(argv[5]);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	3314      	adds	r3, #20
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f004 ff7d 	bl	800bcbc <atoi>
 8006dc2:	0003      	movs	r3, r0
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <sks_cmd_interval+0x94>)
 8006dc8:	769a      	strb	r2, [r3, #26]
		}

		write_flash = 1;
 8006dca:	4b0e      	ldr	r3, [pc, #56]	; (8006e04 <sks_cmd_interval+0x98>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d", set, g_config.interval);
 8006dd0:	2317      	movs	r3, #23
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	4a0a      	ldr	r2, [pc, #40]	; (8006e00 <sks_cmd_interval+0x94>)
 8006dd8:	7e92      	ldrb	r2, [r2, #26]
 8006dda:	0015      	movs	r5, r2
 8006ddc:	4c0a      	ldr	r4, [pc, #40]	; (8006e08 <sks_cmd_interval+0x9c>)
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	2180      	movs	r1, #128	; 0x80
 8006de2:	0049      	lsls	r1, r1, #1
 8006de4:	4809      	ldr	r0, [pc, #36]	; (8006e0c <sks_cmd_interval+0xa0>)
 8006de6:	9501      	str	r5, [sp, #4]
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	0023      	movs	r3, r4
 8006dec:	f7ff fde6 	bl	80069bc <cmd_response>

	//raise_command_coming();

	response = 1;
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <sks_cmd_interval+0xa4>)
 8006df2:	2201      	movs	r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
	return size;
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006df8:	0018      	movs	r0, r3
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b006      	add	sp, #24
 8006dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8006e00:	20000368 	.word	0x20000368
 8006e04:	20000310 	.word	0x20000310
 8006e08:	0800ce34 	.word	0x0800ce34
 8006e0c:	20000210 	.word	0x20000210
 8006e10:	2000020c 	.word	0x2000020c

08006e14 <sks_cmd_config>:

static int sks_cmd_config(int from, char* command, int argc, char** argv, int size, int total) {
 8006e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e16:	46ce      	mov	lr, r9
 8006e18:	4647      	mov	r7, r8
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b08f      	sub	sp, #60	; 0x3c
 8006e1e:	af06      	add	r7, sp, #24
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
 8006e26:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 8006e28:	231f      	movs	r3, #31
 8006e2a:	18fb      	adds	r3, r7, r3
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	3310      	adds	r3, #16
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <sks_cmd_config+0x2a>
		return size;
 8006e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3c:	e080      	b.n	8006f40 <sks_cmd_config+0x12c>

	set = atoi(argv[4]);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	3310      	adds	r3, #16
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	0018      	movs	r0, r3
 8006e46:	f004 ff39 	bl	800bcbc <atoi>
 8006e4a:	0002      	movs	r2, r0
 8006e4c:	211f      	movs	r1, #31
 8006e4e:	187b      	adds	r3, r7, r1
 8006e50:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8006e52:	187b      	adds	r3, r7, r1
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d14e      	bne.n	8006ef8 <sks_cmd_config+0xe4>
		if(argv[5] != NULL) {
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	3314      	adds	r3, #20
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <sks_cmd_config+0x64>
			g_config.timeout3D = atoi(argv[5]);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	3314      	adds	r3, #20
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f004 ff26 	bl	800bcbc <atoi>
 8006e70:	0003      	movs	r3, r0
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	4b36      	ldr	r3, [pc, #216]	; (8006f50 <sks_cmd_config+0x13c>)
 8006e76:	829a      	strh	r2, [r3, #20]
		}

		if(argv[6] != NULL) {
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	3318      	adds	r3, #24
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <sks_cmd_config+0x82>
			g_config.filterMode = atoi(argv[6]);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	3318      	adds	r3, #24
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f004 ff17 	bl	800bcbc <atoi>
 8006e8e:	0003      	movs	r3, r0
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	4b2f      	ldr	r3, [pc, #188]	; (8006f50 <sks_cmd_config+0x13c>)
 8006e94:	75da      	strb	r2, [r3, #23]
		}

		if(argv[7] != NULL) {
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	331c      	adds	r3, #28
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d011      	beq.n	8006ec4 <sks_cmd_config+0xb0>
			int diffX = atoi(argv[7]);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	331c      	adds	r3, #28
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f004 ff08 	bl	800bcbc <atoi>
 8006eac:	0003      	movs	r3, r0
 8006eae:	61bb      	str	r3, [r7, #24]
			if(diffX >= 3 && diffX <= 30) {
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	dd06      	ble.n	8006ec4 <sks_cmd_config+0xb0>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b1e      	cmp	r3, #30
 8006eba:	dc03      	bgt.n	8006ec4 <sks_cmd_config+0xb0>
				g_config.diffX = diffX;
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	4b23      	ldr	r3, [pc, #140]	; (8006f50 <sks_cmd_config+0x13c>)
 8006ec2:	761a      	strb	r2, [r3, #24]
			}
		}

		if(argv[8] != NULL) {
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	3320      	adds	r3, #32
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d011      	beq.n	8006ef2 <sks_cmd_config+0xde>
			int diffY = atoi(argv[8]);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	3320      	adds	r3, #32
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f004 fef1 	bl	800bcbc <atoi>
 8006eda:	0003      	movs	r3, r0
 8006edc:	617b      	str	r3, [r7, #20]
			if(diffY >= 3 && diffY <= 30) {
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	dd06      	ble.n	8006ef2 <sks_cmd_config+0xde>
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2b1e      	cmp	r3, #30
 8006ee8:	dc03      	bgt.n	8006ef2 <sks_cmd_config+0xde>
				g_config.diffY = diffY;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	4b18      	ldr	r3, [pc, #96]	; (8006f50 <sks_cmd_config+0x13c>)
 8006ef0:	765a      	strb	r2, [r3, #25]
			}
		}

		write_flash = 1;
 8006ef2:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <sks_cmd_config+0x140>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]
//	append_int(Response, 2, g_config.diffX);
//	strcat(Response, ",");
//	append_int(Response, 2, g_config.diffY);
//	strcat(Response, "#\r\n");

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d,%d,%d", set, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY);
 8006ef8:	231f      	movs	r3, #31
 8006efa:	18fb      	adds	r3, r7, r3
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	4699      	mov	r9, r3
 8006f00:	4a13      	ldr	r2, [pc, #76]	; (8006f50 <sks_cmd_config+0x13c>)
 8006f02:	8a92      	ldrh	r2, [r2, #20]
 8006f04:	0015      	movs	r5, r2
 8006f06:	4a12      	ldr	r2, [pc, #72]	; (8006f50 <sks_cmd_config+0x13c>)
 8006f08:	7dd2      	ldrb	r2, [r2, #23]
 8006f0a:	0016      	movs	r6, r2
 8006f0c:	4a10      	ldr	r2, [pc, #64]	; (8006f50 <sks_cmd_config+0x13c>)
 8006f0e:	7e12      	ldrb	r2, [r2, #24]
 8006f10:	4694      	mov	ip, r2
 8006f12:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <sks_cmd_config+0x13c>)
 8006f14:	7e52      	ldrb	r2, [r2, #25]
 8006f16:	4690      	mov	r8, r2
 8006f18:	4c0f      	ldr	r4, [pc, #60]	; (8006f58 <sks_cmd_config+0x144>)
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	2180      	movs	r1, #128	; 0x80
 8006f1e:	0049      	lsls	r1, r1, #1
 8006f20:	480e      	ldr	r0, [pc, #56]	; (8006f5c <sks_cmd_config+0x148>)
 8006f22:	4643      	mov	r3, r8
 8006f24:	9304      	str	r3, [sp, #16]
 8006f26:	4663      	mov	r3, ip
 8006f28:	9303      	str	r3, [sp, #12]
 8006f2a:	9602      	str	r6, [sp, #8]
 8006f2c:	9501      	str	r5, [sp, #4]
 8006f2e:	464b      	mov	r3, r9
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	0023      	movs	r3, r4
 8006f34:	f7ff fd42 	bl	80069bc <cmd_response>

	response = 1;
 8006f38:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <sks_cmd_config+0x14c>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
	return size;
 8006f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8006f40:	0018      	movs	r0, r3
 8006f42:	46bd      	mov	sp, r7
 8006f44:	b009      	add	sp, #36	; 0x24
 8006f46:	bcc0      	pop	{r6, r7}
 8006f48:	46b9      	mov	r9, r7
 8006f4a:	46b0      	mov	r8, r6
 8006f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	20000368 	.word	0x20000368
 8006f54:	20000310 	.word	0x20000310
 8006f58:	0800ce48 	.word	0x0800ce48
 8006f5c:	20000210 	.word	0x20000210
 8006f60:	2000020c 	.word	0x2000020c

08006f64 <sks_cmd_serial>:

static int sks_cmd_serial(int from, char* command, int argc, char** argv, int size, int total) {
 8006f64:	b5b0      	push	{r4, r5, r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af02      	add	r7, sp, #8
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 8006f72:	2317      	movs	r3, #23
 8006f74:	18fb      	adds	r3, r7, r3
 8006f76:	2200      	movs	r2, #0
 8006f78:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	3310      	adds	r3, #16
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <sks_cmd_serial+0x24>
		return size;
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	e03b      	b.n	8007000 <sks_cmd_serial+0x9c>

	set = atoi(argv[4]);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	3310      	adds	r3, #16
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	0018      	movs	r0, r3
 8006f90:	f004 fe94 	bl	800bcbc <atoi>
 8006f94:	0002      	movs	r2, r0
 8006f96:	2117      	movs	r1, #23
 8006f98:	187b      	adds	r3, r7, r1
 8006f9a:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8006f9c:	187b      	adds	r3, r7, r1
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d11a      	bne.n	8006fda <sks_cmd_serial+0x76>
		memset(g_config.deviceCode, 0, sizeof(g_config.deviceCode));
 8006fa4:	4b18      	ldr	r3, [pc, #96]	; (8007008 <sks_cmd_serial+0xa4>)
 8006fa6:	220a      	movs	r2, #10
 8006fa8:	2100      	movs	r1, #0
 8006faa:	0018      	movs	r0, r3
 8006fac:	f004 febf 	bl	800bd2e <memset>
		strncpy(g_config.deviceCode, argv[5], next_char(argv[5], '#', DEVICE_CODE_LEN));
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	3314      	adds	r3, #20
 8006fb4:	681c      	ldr	r4, [r3, #0]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	3314      	adds	r3, #20
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	220a      	movs	r2, #10
 8006fbe:	2123      	movs	r1, #35	; 0x23
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f7ff fd45 	bl	8006a50 <next_char>
 8006fc6:	0003      	movs	r3, r0
 8006fc8:	001a      	movs	r2, r3
 8006fca:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <sks_cmd_serial+0xa4>)
 8006fcc:	0021      	movs	r1, r4
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f004 ffea 	bl	800bfa8 <strncpy>

		write_flash = 1;
 8006fd4:	4b0d      	ldr	r3, [pc, #52]	; (800700c <sks_cmd_serial+0xa8>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]
//	append_int(Response, 1, set);
//	strcat(Response, ",");
//	strcat(Response, g_config.deviceCode);
//	strcat(Response, "#\r\n");

	cmd_response(Response, sizeof(Response), command, "%d,%s", set, g_config.deviceCode);
 8006fda:	2317      	movs	r3, #23
 8006fdc:	18fb      	adds	r3, r7, r3
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	4d0b      	ldr	r5, [pc, #44]	; (8007010 <sks_cmd_serial+0xac>)
 8006fe2:	68bc      	ldr	r4, [r7, #8]
 8006fe4:	2280      	movs	r2, #128	; 0x80
 8006fe6:	0051      	lsls	r1, r2, #1
 8006fe8:	480a      	ldr	r0, [pc, #40]	; (8007014 <sks_cmd_serial+0xb0>)
 8006fea:	4a07      	ldr	r2, [pc, #28]	; (8007008 <sks_cmd_serial+0xa4>)
 8006fec:	9201      	str	r2, [sp, #4]
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	002b      	movs	r3, r5
 8006ff2:	0022      	movs	r2, r4
 8006ff4:	f7ff fce2 	bl	80069bc <cmd_response>

	response = 1;
 8006ff8:	4b07      	ldr	r3, [pc, #28]	; (8007018 <sks_cmd_serial+0xb4>)
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]
	return size;
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007000:	0018      	movs	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	b006      	add	sp, #24
 8007006:	bdb0      	pop	{r4, r5, r7, pc}
 8007008:	2000036a 	.word	0x2000036a
 800700c:	20000310 	.word	0x20000310
 8007010:	0800ce58 	.word	0x0800ce58
 8007014:	20000210 	.word	0x20000210
 8007018:	2000020c 	.word	0x2000020c

0800701c <sks_cmd_reset>:

static int sks_cmd_reset(int from, char* command, int argc, char** argv, int size, int total) {
 800701c:	b590      	push	{r4, r7, lr}
 800701e:	b089      	sub	sp, #36	; 0x24
 8007020:	af02      	add	r7, sp, #8
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 800702a:	2317      	movs	r3, #23
 800702c:	18fb      	adds	r3, r7, r3
 800702e:	2200      	movs	r2, #0
 8007030:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	3310      	adds	r3, #16
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <sks_cmd_reset+0x24>
		return size;
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	e021      	b.n	8007084 <sks_cmd_reset+0x68>

	set = atoi(argv[4]);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	3310      	adds	r3, #16
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	0018      	movs	r0, r3
 8007048:	f004 fe38 	bl	800bcbc <atoi>
 800704c:	0002      	movs	r2, r0
 800704e:	2117      	movs	r1, #23
 8007050:	187b      	adds	r3, r7, r1
 8007052:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
 8007054:	187b      	adds	r3, r7, r1
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d103      	bne.n	8007064 <sks_cmd_reset+0x48>
		g_appStats.resetNow = ulSecCount;
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <sks_cmd_reset+0x70>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <sks_cmd_reset+0x74>)
 8007062:	651a      	str	r2, [r3, #80]	; 0x50
	}

	cmd_response(Response, sizeof(Response), command, "%d", set);
 8007064:	2317      	movs	r3, #23
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	4c0a      	ldr	r4, [pc, #40]	; (8007094 <sks_cmd_reset+0x78>)
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	2180      	movs	r1, #128	; 0x80
 8007070:	0049      	lsls	r1, r1, #1
 8007072:	4809      	ldr	r0, [pc, #36]	; (8007098 <sks_cmd_reset+0x7c>)
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	0023      	movs	r3, r4
 8007078:	f7ff fca0 	bl	80069bc <cmd_response>

	response = 1;
 800707c:	4b07      	ldr	r3, [pc, #28]	; (800709c <sks_cmd_reset+0x80>)
 800707e:	2201      	movs	r2, #1
 8007080:	601a      	str	r2, [r3, #0]
	return size;
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007084:	0018      	movs	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	b007      	add	sp, #28
 800708a:	bd90      	pop	{r4, r7, pc}
 800708c:	20000360 	.word	0x20000360
 8007090:	20000384 	.word	0x20000384
 8007094:	0800ce60 	.word	0x0800ce60
 8007098:	20000210 	.word	0x20000210
 800709c:	2000020c 	.word	0x2000020c

080070a0 <sks_cmd_info>:

static int sks_cmd_info(int from, char* command, int argc, char** argv, int size, int total) {
 80070a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070a2:	46ce      	mov	lr, r9
 80070a4:	4647      	mov	r7, r8
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b08f      	sub	sp, #60	; 0x3c
 80070aa:	af08      	add	r7, sp, #32
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	607a      	str	r2, [r7, #4]
 80070b2:	603b      	str	r3, [r7, #0]
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
 80070b4:	2317      	movs	r3, #23
 80070b6:	18fb      	adds	r3, r7, r3
 80070b8:	2200      	movs	r2, #0
 80070ba:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	3310      	adds	r3, #16
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <sks_cmd_info+0x2a>
		return size;
 80070c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c8:	e030      	b.n	800712c <sks_cmd_info+0x8c>
	set = atoi(argv[4]);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	3310      	adds	r3, #16
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	0018      	movs	r0, r3
 80070d2:	f004 fdf3 	bl	800bcbc <atoi>
 80070d6:	0002      	movs	r2, r0
 80070d8:	2117      	movs	r1, #23
 80070da:	187b      	adds	r3, r7, r1
 80070dc:	701a      	strb	r2, [r3, #0]

	if(set == 1) {
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d,%d,%d,%s,%s", set, g_config.interval, g_config.filterMode, g_config.emptyValue, g_config.fullValue, g_config.deviceCode, APP_VERSION);
 80070de:	187b      	adds	r3, r7, r1
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	4b16      	ldr	r3, [pc, #88]	; (800713c <sks_cmd_info+0x9c>)
 80070e4:	7e9b      	ldrb	r3, [r3, #26]
 80070e6:	4698      	mov	r8, r3
 80070e8:	4b14      	ldr	r3, [pc, #80]	; (800713c <sks_cmd_info+0x9c>)
 80070ea:	7ddb      	ldrb	r3, [r3, #23]
 80070ec:	4699      	mov	r9, r3
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <sks_cmd_info+0x9c>)
 80070f0:	6919      	ldr	r1, [r3, #16]
 80070f2:	4b12      	ldr	r3, [pc, #72]	; (800713c <sks_cmd_info+0x9c>)
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	4812      	ldr	r0, [pc, #72]	; (8007140 <sks_cmd_info+0xa0>)
 80070f8:	4684      	mov	ip, r0
 80070fa:	68be      	ldr	r6, [r7, #8]
 80070fc:	2080      	movs	r0, #128	; 0x80
 80070fe:	0045      	lsls	r5, r0, #1
 8007100:	4c10      	ldr	r4, [pc, #64]	; (8007144 <sks_cmd_info+0xa4>)
 8007102:	4811      	ldr	r0, [pc, #68]	; (8007148 <sks_cmd_info+0xa8>)
 8007104:	9006      	str	r0, [sp, #24]
 8007106:	4811      	ldr	r0, [pc, #68]	; (800714c <sks_cmd_info+0xac>)
 8007108:	9005      	str	r0, [sp, #20]
 800710a:	9304      	str	r3, [sp, #16]
 800710c:	9103      	str	r1, [sp, #12]
 800710e:	464b      	mov	r3, r9
 8007110:	9302      	str	r3, [sp, #8]
 8007112:	4643      	mov	r3, r8
 8007114:	9301      	str	r3, [sp, #4]
 8007116:	9200      	str	r2, [sp, #0]
 8007118:	4663      	mov	r3, ip
 800711a:	0032      	movs	r2, r6
 800711c:	0029      	movs	r1, r5
 800711e:	0020      	movs	r0, r4
 8007120:	f7ff fc4c 	bl	80069bc <cmd_response>

	//raise_command_coming();

	response = 1;
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <sks_cmd_info+0xb0>)
 8007126:	2201      	movs	r2, #1
 8007128:	601a      	str	r2, [r3, #0]
	return size;
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800712c:	0018      	movs	r0, r3
 800712e:	46bd      	mov	sp, r7
 8007130:	b007      	add	sp, #28
 8007132:	bcc0      	pop	{r6, r7}
 8007134:	46b9      	mov	r9, r7
 8007136:	46b0      	mov	r8, r6
 8007138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	20000368 	.word	0x20000368
 8007140:	0800ce64 	.word	0x0800ce64
 8007144:	20000210 	.word	0x20000210
 8007148:	0800ce7c 	.word	0x0800ce7c
 800714c:	2000036a 	.word	0x2000036a
 8007150:	2000020c 	.word	0x2000020c

08007154 <server_on_command>:
		{ "SF", sks_cmd_set_full }, //get config
		{ "SE", sks_cmd_set_empty }, //get config
		{ "DEBUG", sks_cmd_set_debug }, //get config
		{ NULL, NULL } };

int server_on_command(int from, char* data, int size) {
 8007154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007156:	b0b1      	sub	sp, #196	; 0xc4
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
	#define SKS_MAX_CMD_LEN 10
	#define SKS_MAX_ARGV 	25
	int result = 0;
 8007160:	2300      	movs	r3, #0
 8007162:	22b4      	movs	r2, #180	; 0xb4
 8007164:	18ba      	adds	r2, r7, r2
 8007166:	6013      	str	r3, [r2, #0]
	int field = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	22b0      	movs	r2, #176	; 0xb0
 800716c:	18ba      	adds	r2, r7, r2
 800716e:	6013      	str	r3, [r2, #0]
	int ftmp;
	int j = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	22ac      	movs	r2, #172	; 0xac
 8007174:	18ba      	adds	r2, r7, r2
 8007176:	6013      	str	r3, [r2, #0]
	char *ptr = data;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	22a8      	movs	r2, #168	; 0xa8
 800717c:	18ba      	adds	r2, r7, r2
 800717e:	6013      	str	r3, [r2, #0]

	char command[SKS_MAX_CMD_LEN + 1] = { 0 };
 8007180:	238c      	movs	r3, #140	; 0x8c
 8007182:	18fb      	adds	r3, r7, r3
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	3304      	adds	r3, #4
 800718a:	2207      	movs	r2, #7
 800718c:	2100      	movs	r1, #0
 800718e:	0018      	movs	r0, r3
 8007190:	f004 fdcd 	bl	800bd2e <memset>

	int endPos = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	22a4      	movs	r2, #164	; 0xa4
 8007198:	18ba      	adds	r2, r7, r2
 800719a:	6013      	str	r3, [r2, #0]
	int i = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	24a0      	movs	r4, #160	; 0xa0
 80071a0:	193a      	adds	r2, r7, r4
 80071a2:	6013      	str	r3, [r2, #0]
	char item_buff[20] = { 0 };
 80071a4:	2378      	movs	r3, #120	; 0x78
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	3304      	adds	r3, #4
 80071ae:	2210      	movs	r2, #16
 80071b0:	2100      	movs	r1, #0
 80071b2:	0018      	movs	r0, r3
 80071b4:	f004 fdbb 	bl	800bd2e <memset>
	char* arg[SKS_MAX_ARGV];
	for (i = 0; i < size; i++) {
 80071b8:	2300      	movs	r3, #0
 80071ba:	193a      	adds	r2, r7, r4
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	e023      	b.n	8007208 <server_on_command+0xb4>
		if ((data[i] == '#') || (data[i] == '\n') || (data[i] == '\0')) {
 80071c0:	21a0      	movs	r1, #160	; 0xa0
 80071c2:	187b      	adds	r3, r7, r1
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	18d3      	adds	r3, r2, r3
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b23      	cmp	r3, #35	; 0x23
 80071ce:	d00d      	beq.n	80071ec <server_on_command+0x98>
 80071d0:	187b      	adds	r3, r7, r1
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	18d3      	adds	r3, r2, r3
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b0a      	cmp	r3, #10
 80071dc:	d006      	beq.n	80071ec <server_on_command+0x98>
 80071de:	187b      	adds	r3, r7, r1
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	18d3      	adds	r3, r2, r3
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d107      	bne.n	80071fc <server_on_command+0xa8>
			endPos = i + 1;
 80071ec:	23a0      	movs	r3, #160	; 0xa0
 80071ee:	18fb      	adds	r3, r7, r3
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3301      	adds	r3, #1
 80071f4:	22a4      	movs	r2, #164	; 0xa4
 80071f6:	18ba      	adds	r2, r7, r2
 80071f8:	6013      	str	r3, [r2, #0]
			break;
 80071fa:	e00b      	b.n	8007214 <server_on_command+0xc0>
	for (i = 0; i < size; i++) {
 80071fc:	22a0      	movs	r2, #160	; 0xa0
 80071fe:	18bb      	adds	r3, r7, r2
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	18ba      	adds	r2, r7, r2
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	23a0      	movs	r3, #160	; 0xa0
 800720a:	18fb      	adds	r3, r7, r3
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	dbd5      	blt.n	80071c0 <server_on_command+0x6c>
		}
	}

	//xprintf("come here: %d\r\n", 1);

	if (endPos == 0)
 8007214:	23a4      	movs	r3, #164	; 0xa4
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <server_on_command+0xce>
		return 0; //Waiting for end command sign
 800721e:	2300      	movs	r3, #0
 8007220:	e17a      	b.n	8007518 <server_on_command+0x3c4>

	//xprintf("come here: %d, endPos: %d\r\n", 2, endPos);

	for (int i = 0; i < endPos; i++) {
 8007222:	2300      	movs	r3, #0
 8007224:	229c      	movs	r2, #156	; 0x9c
 8007226:	18ba      	adds	r2, r7, r2
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	e0ce      	b.n	80073ca <server_on_command+0x276>
		if ((data[i] == ',') || (data[i] == '\n') || (data[i] == '#') || (data[i] == 0x00)) //complete one item
 800722c:	219c      	movs	r1, #156	; 0x9c
 800722e:	187b      	adds	r3, r7, r1
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	18d3      	adds	r3, r2, r3
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b2c      	cmp	r3, #44	; 0x2c
 800723a:	d015      	beq.n	8007268 <server_on_command+0x114>
 800723c:	187b      	adds	r3, r7, r1
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	18d3      	adds	r3, r2, r3
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b0a      	cmp	r3, #10
 8007248:	d00e      	beq.n	8007268 <server_on_command+0x114>
 800724a:	187b      	adds	r3, r7, r1
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	18d3      	adds	r3, r2, r3
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	2b23      	cmp	r3, #35	; 0x23
 8007256:	d007      	beq.n	8007268 <server_on_command+0x114>
 8007258:	187b      	adds	r3, r7, r1
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	18d3      	adds	r3, r2, r3
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d000      	beq.n	8007268 <server_on_command+0x114>
 8007266:	e08d      	b.n	8007384 <server_on_command+0x230>
		{
			//xprintf("FIELD0 %d j=%d DATA %s\r\n", field, j, item_buff);

			if (j > 0) {
 8007268:	23ac      	movs	r3, #172	; 0xac
 800726a:	18fb      	adds	r3, r7, r3
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	dd59      	ble.n	8007326 <server_on_command+0x1d2>
				//xprintf("FIELD1 %d DATA %s, ptr=%s\r\n", field, item_buff, ptr);

				//if(*(uint32_t*)(ptr) == 0x2C53532A) //*SS,
				if(strncmp(ptr, "*SS,", 4) == 0) //*SS,
 8007272:	49ab      	ldr	r1, [pc, #684]	; (8007520 <server_on_command+0x3cc>)
 8007274:	23a8      	movs	r3, #168	; 0xa8
 8007276:	18fb      	adds	r3, r7, r3
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2204      	movs	r2, #4
 800727c:	0018      	movs	r0, r3
 800727e:	f004 fe81 	bl	800bf84 <strncmp>
 8007282:	1e03      	subs	r3, r0, #0
 8007284:	d103      	bne.n	800728e <server_on_command+0x13a>
				{
					field = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	22b0      	movs	r2, #176	; 0xb0
 800728a:	18ba      	adds	r2, r7, r2
 800728c:	6013      	str	r3, [r2, #0]
				}
				ftmp = field;
 800728e:	22b0      	movs	r2, #176	; 0xb0
 8007290:	18bb      	adds	r3, r7, r2
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2498      	movs	r4, #152	; 0x98
 8007296:	1939      	adds	r1, r7, r4
 8007298:	600b      	str	r3, [r1, #0]

				//xprintf("FIELD %d DATA %s\r\n", field, item_buff);

				arg[field % SKS_MAX_ARGV] = ptr;
 800729a:	18bb      	adds	r3, r7, r2
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2119      	movs	r1, #25
 80072a0:	0018      	movs	r0, r3
 80072a2:	f7fb fcb3 	bl	8002c0c <__aeabi_idivmod>
 80072a6:	000b      	movs	r3, r1
 80072a8:	001a      	movs	r2, r3
 80072aa:	2314      	movs	r3, #20
 80072ac:	18fb      	adds	r3, r7, r3
 80072ae:	0092      	lsls	r2, r2, #2
 80072b0:	21a8      	movs	r1, #168	; 0xa8
 80072b2:	1879      	adds	r1, r7, r1
 80072b4:	6809      	ldr	r1, [r1, #0]
 80072b6:	50d1      	str	r1, [r2, r3]
				switch (ftmp) {
 80072b8:	0022      	movs	r2, r4
 80072ba:	18bb      	adds	r3, r7, r2
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d033      	beq.n	800732a <server_on_command+0x1d6>
 80072c2:	18bb      	adds	r3, r7, r2
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	dc31      	bgt.n	800732e <server_on_command+0x1da>
 80072ca:	18bb      	adds	r3, r7, r2
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d019      	beq.n	8007306 <server_on_command+0x1b2>
 80072d2:	18bb      	adds	r3, r7, r2
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	dc29      	bgt.n	800732e <server_on_command+0x1da>
 80072da:	18bb      	adds	r3, r7, r2
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <server_on_command+0x198>
 80072e2:	18bb      	adds	r3, r7, r2
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d023      	beq.n	8007332 <server_on_command+0x1de>
					memcpy(command, ptr, j < SKS_MAX_CMD_LEN ? j : SKS_MAX_CMD_LEN);
					break;
				case 3:
					break;
				default:
					break;
 80072ea:	e020      	b.n	800732e <server_on_command+0x1da>
					if(strncmp(ptr, "*SS,", 4) != 0) //*SS,
 80072ec:	498c      	ldr	r1, [pc, #560]	; (8007520 <server_on_command+0x3cc>)
 80072ee:	23a8      	movs	r3, #168	; 0xa8
 80072f0:	18fb      	adds	r3, r7, r3
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2204      	movs	r2, #4
 80072f6:	0018      	movs	r0, r3
 80072f8:	f004 fe44 	bl	800bf84 <strncmp>
 80072fc:	1e03      	subs	r3, r0, #0
 80072fe:	d01a      	beq.n	8007336 <server_on_command+0x1e2>
						return -1; //*SS,
 8007300:	2301      	movs	r3, #1
 8007302:	425b      	negs	r3, r3
 8007304:	e108      	b.n	8007518 <server_on_command+0x3c4>
					memcpy(command, ptr, j < SKS_MAX_CMD_LEN ? j : SKS_MAX_CMD_LEN);
 8007306:	23ac      	movs	r3, #172	; 0xac
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b0a      	cmp	r3, #10
 800730e:	dd00      	ble.n	8007312 <server_on_command+0x1be>
 8007310:	230a      	movs	r3, #10
 8007312:	001a      	movs	r2, r3
 8007314:	23a8      	movs	r3, #168	; 0xa8
 8007316:	18fb      	adds	r3, r7, r3
 8007318:	6819      	ldr	r1, [r3, #0]
 800731a:	238c      	movs	r3, #140	; 0x8c
 800731c:	18fb      	adds	r3, r7, r3
 800731e:	0018      	movs	r0, r3
 8007320:	f004 fcfc 	bl	800bd1c <memcpy>
					break;
 8007324:	e008      	b.n	8007338 <server_on_command+0x1e4>
				}
			}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	e006      	b.n	8007338 <server_on_command+0x1e4>
					break;
 800732a:	46c0      	nop			; (mov r8, r8)
 800732c:	e004      	b.n	8007338 <server_on_command+0x1e4>
					break;
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	e002      	b.n	8007338 <server_on_command+0x1e4>
					break;
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	e000      	b.n	8007338 <server_on_command+0x1e4>
					break;
 8007336:	46c0      	nop			; (mov r8, r8)

			field++;
 8007338:	21b0      	movs	r1, #176	; 0xb0
 800733a:	187b      	adds	r3, r7, r1
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3301      	adds	r3, #1
 8007340:	187a      	adds	r2, r7, r1
 8007342:	6013      	str	r3, [r2, #0]
			if (field >= SKS_MAX_ARGV)
 8007344:	187b      	adds	r3, r7, r1
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b18      	cmp	r3, #24
 800734a:	dc48      	bgt.n	80073de <server_on_command+0x28a>
				break;

			j = 0; //reset index
 800734c:	2300      	movs	r3, #0
 800734e:	22ac      	movs	r2, #172	; 0xac
 8007350:	18ba      	adds	r2, r7, r2
 8007352:	6013      	str	r3, [r2, #0]
			ptr = data + i + 1;
 8007354:	239c      	movs	r3, #156	; 0x9c
 8007356:	18fb      	adds	r3, r7, r3
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3301      	adds	r3, #1
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	18d3      	adds	r3, r2, r3
 8007360:	24a8      	movs	r4, #168	; 0xa8
 8007362:	193a      	adds	r2, r7, r4
 8007364:	6013      	str	r3, [r2, #0]
			arg[field % SKS_MAX_ARGV] = ptr;
 8007366:	187b      	adds	r3, r7, r1
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2119      	movs	r1, #25
 800736c:	0018      	movs	r0, r3
 800736e:	f7fb fc4d 	bl	8002c0c <__aeabi_idivmod>
 8007372:	000b      	movs	r3, r1
 8007374:	001a      	movs	r2, r3
 8007376:	2314      	movs	r3, #20
 8007378:	18fb      	adds	r3, r7, r3
 800737a:	0092      	lsls	r2, r2, #2
 800737c:	1939      	adds	r1, r7, r4
 800737e:	6809      	ldr	r1, [r1, #0]
 8007380:	50d1      	str	r1, [r2, r3]
 8007382:	e01c      	b.n	80073be <server_on_command+0x26a>
		} else {
			item_buff[j % sizeof(item_buff)] = data[i];
 8007384:	239c      	movs	r3, #156	; 0x9c
 8007386:	18fb      	adds	r3, r7, r3
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	18d4      	adds	r4, r2, r3
 800738e:	25ac      	movs	r5, #172	; 0xac
 8007390:	197b      	adds	r3, r7, r5
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2114      	movs	r1, #20
 8007396:	0018      	movs	r0, r3
 8007398:	f7fb fb4e 	bl	8002a38 <__aeabi_uidivmod>
 800739c:	000b      	movs	r3, r1
 800739e:	001a      	movs	r2, r3
 80073a0:	7821      	ldrb	r1, [r4, #0]
 80073a2:	2078      	movs	r0, #120	; 0x78
 80073a4:	183b      	adds	r3, r7, r0
 80073a6:	5499      	strb	r1, [r3, r2]
			j++;
 80073a8:	197b      	adds	r3, r7, r5
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3301      	adds	r3, #1
 80073ae:	197a      	adds	r2, r7, r5
 80073b0:	6013      	str	r3, [r2, #0]
			item_buff[j] = 0x00;
 80073b2:	183a      	adds	r2, r7, r0
 80073b4:	197b      	adds	r3, r7, r5
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	18d3      	adds	r3, r2, r3
 80073ba:	2200      	movs	r2, #0
 80073bc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < endPos; i++) {
 80073be:	229c      	movs	r2, #156	; 0x9c
 80073c0:	18bb      	adds	r3, r7, r2
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	18ba      	adds	r2, r7, r2
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	239c      	movs	r3, #156	; 0x9c
 80073cc:	18fb      	adds	r3, r7, r3
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	23a4      	movs	r3, #164	; 0xa4
 80073d2:	18fb      	adds	r3, r7, r3
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	da00      	bge.n	80073dc <server_on_command+0x288>
 80073da:	e727      	b.n	800722c <server_on_command+0xd8>
 80073dc:	e000      	b.n	80073e0 <server_on_command+0x28c>
				break;
 80073de:	46c0      	nop			; (mov r8, r8)
		}
	}

	//xprintf("come here: %d\r\n", 3);

	if (field > SKS_MAX_ARGV)
 80073e0:	23b0      	movs	r3, #176	; 0xb0
 80073e2:	18fb      	adds	r3, r7, r3
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b19      	cmp	r3, #25
 80073e8:	dd03      	ble.n	80073f2 <server_on_command+0x29e>
		return endPos; //Too many param
 80073ea:	23a4      	movs	r3, #164	; 0xa4
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	e092      	b.n	8007518 <server_on_command+0x3c4>

	//xprintf("come here: %d\r\n", 4);

	if (field <= 3)
 80073f2:	23b0      	movs	r3, #176	; 0xb0
 80073f4:	18fb      	adds	r3, r7, r3
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	dc03      	bgt.n	8007404 <server_on_command+0x2b0>
		return endPos; //Too few param
 80073fc:	23a4      	movs	r3, #164	; 0xa4
 80073fe:	18fb      	adds	r3, r7, r3
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	e089      	b.n	8007518 <server_on_command+0x3c4>

	//xprintf("server_on_command: %s, command: %s \r\n", data, command);

	i = 0;
 8007404:	2300      	movs	r3, #0
 8007406:	22a0      	movs	r2, #160	; 0xa0
 8007408:	18ba      	adds	r2, r7, r2
 800740a:	6013      	str	r3, [r2, #0]
	result = -1;
 800740c:	2301      	movs	r3, #1
 800740e:	425b      	negs	r3, r3
 8007410:	22b4      	movs	r2, #180	; 0xb4
 8007412:	18ba      	adds	r2, r7, r2
 8007414:	6013      	str	r3, [r2, #0]
	response = 0;
 8007416:	4b43      	ldr	r3, [pc, #268]	; (8007524 <server_on_command+0x3d0>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
	while(handlers[i].cmd) {
 800741c:	e051      	b.n	80074c2 <server_on_command+0x36e>
		if (strcmp(command, handlers[i].cmd) == 0) {
 800741e:	4942      	ldr	r1, [pc, #264]	; (8007528 <server_on_command+0x3d4>)
 8007420:	24a0      	movs	r4, #160	; 0xa0
 8007422:	193b      	adds	r3, r7, r4
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	0013      	movs	r3, r2
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	189b      	adds	r3, r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	585a      	ldr	r2, [r3, r1]
 8007430:	268c      	movs	r6, #140	; 0x8c
 8007432:	19bb      	adds	r3, r7, r6
 8007434:	0011      	movs	r1, r2
 8007436:	0018      	movs	r0, r3
 8007438:	f7fb fa64 	bl	8002904 <strcmp>
 800743c:	1e03      	subs	r3, r0, #0
 800743e:	d13a      	bne.n	80074b6 <server_on_command+0x362>
			//sks_log(LOG_INFO, "COMMAND A %s handlers[%d].cmd=%s", command, i, handlers[i].cmd);
			if (!(handlers[i].dis_mask & from)) //Chi cho phep gui lenh tu nguon
 8007440:	4939      	ldr	r1, [pc, #228]	; (8007528 <server_on_command+0x3d4>)
 8007442:	193b      	adds	r3, r7, r4
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	0013      	movs	r3, r2
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	189b      	adds	r3, r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	18cb      	adds	r3, r1, r3
 8007450:	3308      	adds	r3, #8
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	001a      	movs	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4013      	ands	r3, r2
 800745a:	d13e      	bne.n	80074da <server_on_command+0x386>
			{
				write_flash = 0;
 800745c:	4b33      	ldr	r3, [pc, #204]	; (800752c <server_on_command+0x3d8>)
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
				memset(Response, 0, 200);
 8007462:	4b33      	ldr	r3, [pc, #204]	; (8007530 <server_on_command+0x3dc>)
 8007464:	22c8      	movs	r2, #200	; 0xc8
 8007466:	2100      	movs	r1, #0
 8007468:	0018      	movs	r0, r3
 800746a:	f004 fc60 	bl	800bd2e <memset>

				result = handlers[i].handler(from, command, field, arg, endPos, size);
 800746e:	492e      	ldr	r1, [pc, #184]	; (8007528 <server_on_command+0x3d4>)
 8007470:	193b      	adds	r3, r7, r4
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	0013      	movs	r3, r2
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	189b      	adds	r3, r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	18cb      	adds	r3, r1, r3
 800747e:	3304      	adds	r3, #4
 8007480:	681c      	ldr	r4, [r3, #0]
 8007482:	2314      	movs	r3, #20
 8007484:	18fd      	adds	r5, r7, r3
 8007486:	23b0      	movs	r3, #176	; 0xb0
 8007488:	18fb      	adds	r3, r7, r3
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	19b9      	adds	r1, r7, r6
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	9301      	str	r3, [sp, #4]
 8007494:	23a4      	movs	r3, #164	; 0xa4
 8007496:	18fb      	adds	r3, r7, r3
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	002b      	movs	r3, r5
 800749e:	47a0      	blx	r4
 80074a0:	0003      	movs	r3, r0
 80074a2:	22b4      	movs	r2, #180	; 0xb4
 80074a4:	18ba      	adds	r2, r7, r2
 80074a6:	6013      	str	r3, [r2, #0]
				//sks_log(LOG_INFO, "***********===************COMMAND B%s handlers[%d].cmd=%s, total %d result:%d\r\n", command, i, handlers[i].cmd, size, result);

				if(write_flash) {
 80074a8:	4b20      	ldr	r3, [pc, #128]	; (800752c <server_on_command+0x3d8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d014      	beq.n	80074da <server_on_command+0x386>
					write_config();
 80074b0:	f000 fd0e 	bl	8007ed0 <write_config>
				}
			}
			break;
 80074b4:	e011      	b.n	80074da <server_on_command+0x386>
		}
		i++;
 80074b6:	22a0      	movs	r2, #160	; 0xa0
 80074b8:	18bb      	adds	r3, r7, r2
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	3301      	adds	r3, #1
 80074be:	18ba      	adds	r2, r7, r2
 80074c0:	6013      	str	r3, [r2, #0]
	while(handlers[i].cmd) {
 80074c2:	4919      	ldr	r1, [pc, #100]	; (8007528 <server_on_command+0x3d4>)
 80074c4:	23a0      	movs	r3, #160	; 0xa0
 80074c6:	18fb      	adds	r3, r7, r3
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	0013      	movs	r3, r2
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	189b      	adds	r3, r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	585b      	ldr	r3, [r3, r1]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1a2      	bne.n	800741e <server_on_command+0x2ca>
 80074d8:	e000      	b.n	80074dc <server_on_command+0x388>
			break;
 80074da:	46c0      	nop			; (mov r8, r8)
	}

	if (result > 0) {
 80074dc:	23b4      	movs	r3, #180	; 0xb4
 80074de:	18fb      	adds	r3, r7, r3
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	dd0b      	ble.n	80074fe <server_on_command+0x3aa>
		if (response) {
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <server_on_command+0x3d0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d011      	beq.n	8007512 <server_on_command+0x3be>
			if (from == SKS_CMD_SOURCE_COM1) {
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d10e      	bne.n	8007512 <server_on_command+0x3be>
				xprintf(Response);
 80074f4:	4b0e      	ldr	r3, [pc, #56]	; (8007530 <server_on_command+0x3dc>)
 80074f6:	0018      	movs	r0, r3
 80074f8:	f003 fada 	bl	800aab0 <xprintf>
 80074fc:	e009      	b.n	8007512 <server_on_command+0x3be>
			} else if (from == SKS_CMD_SOURCE_COM2) {
				//ExtSerial_PutString(Response);
			} else {
			}
		}
	} else if (result < 0) {
 80074fe:	22b4      	movs	r2, #180	; 0xb4
 8007500:	18bb      	adds	r3, r7, r2
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	da04      	bge.n	8007512 <server_on_command+0x3be>
		result = endPos;
 8007508:	23a4      	movs	r3, #164	; 0xa4
 800750a:	18fb      	adds	r3, r7, r3
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	18ba      	adds	r2, r7, r2
 8007510:	6013      	str	r3, [r2, #0]
	}

	return result;
 8007512:	23b4      	movs	r3, #180	; 0xb4
 8007514:	18fb      	adds	r3, r7, r3
 8007516:	681b      	ldr	r3, [r3, #0]
}
 8007518:	0018      	movs	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	b02f      	add	sp, #188	; 0xbc
 800751e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007520:	0800ce10 	.word	0x0800ce10
 8007524:	2000020c 	.word	0x2000020c
 8007528:	20000028 	.word	0x20000028
 800752c:	20000310 	.word	0x20000310
 8007530:	20000210 	.word	0x20000210

08007534 <delay_ms>:
	for (i = 0; i < time_us; i++) {
		for (j = 0; j < 7; j++)
			;
	}
}
void delay_ms(unsigned int time_ms) {
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	uint32_t next_time = ulMiliCount+ time_ms;
 800753c:	4b07      	ldr	r3, [pc, #28]	; (800755c <delay_ms+0x28>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	18d3      	adds	r3, r2, r3
 8007544:	60fb      	str	r3, [r7, #12]
	while(ulMiliCount<next_time);
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <delay_ms+0x28>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	429a      	cmp	r2, r3
 8007550:	d8fa      	bhi.n	8007548 <delay_ms+0x14>
}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	46c0      	nop			; (mov r8, r8)
 8007556:	46bd      	mov	sp, r7
 8007558:	b004      	add	sp, #16
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000364 	.word	0x20000364

08007560 <getMicros>:

uint32_t getMicros(void) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
	uint32_t micros;
	micros = ulMiliCount * 1000 + 1000 - SysTick->VAL / 64;
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <getMicros+0x30>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	0013      	movs	r3, r2
 800756e:	015b      	lsls	r3, r3, #5
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	189b      	adds	r3, r3, r2
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	001a      	movs	r2, r3
 800757a:	4b06      	ldr	r3, [pc, #24]	; (8007594 <getMicros+0x34>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	099b      	lsrs	r3, r3, #6
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	607b      	str	r3, [r7, #4]

	return micros;
 8007584:	687b      	ldr	r3, [r7, #4]
}
 8007586:	0018      	movs	r0, r3
 8007588:	46bd      	mov	sp, r7
 800758a:	b002      	add	sp, #8
 800758c:	bd80      	pop	{r7, pc}
 800758e:	46c0      	nop			; (mov r8, r8)
 8007590:	20000364 	.word	0x20000364
 8007594:	e000e010 	.word	0xe000e010

08007598 <gpio_clock_init>:


#include "drv_io.h"
#include "stm32g0xx.h"

void gpio_clock_init(void){
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 800759c:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <gpio_clock_init+0x3c>)
 800759e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075a0:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <gpio_clock_init+0x3c>)
 80075a2:	2101      	movs	r1, #1
 80075a4:	430a      	orrs	r2, r1
 80075a6:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 80075a8:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <gpio_clock_init+0x3c>)
 80075aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075ac:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <gpio_clock_init+0x3c>)
 80075ae:	2102      	movs	r1, #2
 80075b0:	430a      	orrs	r2, r1
 80075b2:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= RCC_IOPENR_GPIOCEN;
 80075b4:	4b07      	ldr	r3, [pc, #28]	; (80075d4 <gpio_clock_init+0x3c>)
 80075b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075b8:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <gpio_clock_init+0x3c>)
 80075ba:	2104      	movs	r1, #4
 80075bc:	430a      	orrs	r2, r1
 80075be:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= RCC_IOPENR_GPIODEN;
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <gpio_clock_init+0x3c>)
 80075c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075c4:	4b03      	ldr	r3, [pc, #12]	; (80075d4 <gpio_clock_init+0x3c>)
 80075c6:	2108      	movs	r1, #8
 80075c8:	430a      	orrs	r2, r1
 80075ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80075cc:	46c0      	nop			; (mov r8, r8)
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	46c0      	nop			; (mov r8, r8)
 80075d4:	40021000 	.word	0x40021000

080075d8 <gpio_pin_int>:

void gpio_pin_int(GPIO_TypeDef *gpio_port, uint16_t gpio_pin, uint8_t gpio_pinMode){
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	0008      	movs	r0, r1
 80075e2:	0011      	movs	r1, r2
 80075e4:	1cbb      	adds	r3, r7, #2
 80075e6:	1c02      	adds	r2, r0, #0
 80075e8:	801a      	strh	r2, [r3, #0]
 80075ea:	1c7b      	adds	r3, r7, #1
 80075ec:	1c0a      	adds	r2, r1, #0
 80075ee:	701a      	strb	r2, [r3, #0]
	if(gpio_pin_outPut == gpio_pinMode){
 80075f0:	1c7b      	adds	r3, r7, #1
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d117      	bne.n	8007628 <gpio_pin_int+0x50>
		gpio_port->MODER &= ~(0x03<<(gpio_pin*2));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	1cba      	adds	r2, r7, #2
 80075fe:	8812      	ldrh	r2, [r2, #0]
 8007600:	0052      	lsls	r2, r2, #1
 8007602:	2103      	movs	r1, #3
 8007604:	4091      	lsls	r1, r2
 8007606:	000a      	movs	r2, r1
 8007608:	43d2      	mvns	r2, r2
 800760a:	401a      	ands	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	601a      	str	r2, [r3, #0]
		gpio_port->MODER |= (0x01<<(gpio_pin*2));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	1cba      	adds	r2, r7, #2
 8007616:	8812      	ldrh	r2, [r2, #0]
 8007618:	0052      	lsls	r2, r2, #1
 800761a:	2101      	movs	r1, #1
 800761c:	4091      	lsls	r1, r2
 800761e:	000a      	movs	r2, r1
 8007620:	431a      	orrs	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]
	}
	else if(gpio_pin_inPut == gpio_pinMode){
		gpio_port->MODER &= ~(0x03<<(gpio_pin*2));

	}
}
 8007626:	e00f      	b.n	8007648 <gpio_pin_int+0x70>
	else if(gpio_pin_inPut == gpio_pinMode){
 8007628:	1c7b      	adds	r3, r7, #1
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d10b      	bne.n	8007648 <gpio_pin_int+0x70>
		gpio_port->MODER &= ~(0x03<<(gpio_pin*2));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	1cba      	adds	r2, r7, #2
 8007636:	8812      	ldrh	r2, [r2, #0]
 8007638:	0052      	lsls	r2, r2, #1
 800763a:	2103      	movs	r1, #3
 800763c:	4091      	lsls	r1, r2
 800763e:	000a      	movs	r2, r1
 8007640:	43d2      	mvns	r2, r2
 8007642:	401a      	ands	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	601a      	str	r2, [r3, #0]
}
 8007648:	46c0      	nop			; (mov r8, r8)
 800764a:	46bd      	mov	sp, r7
 800764c:	b002      	add	sp, #8
 800764e:	bd80      	pop	{r7, pc}

08007650 <gpio_write>:

void GpioInterruptInit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
}

void gpio_write(GPIO_TypeDef *gpio_port, uint16_t gpio_pin, uint8_t gpio_pinState){
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	0008      	movs	r0, r1
 800765a:	0011      	movs	r1, r2
 800765c:	1cbb      	adds	r3, r7, #2
 800765e:	1c02      	adds	r2, r0, #0
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	1c7b      	adds	r3, r7, #1
 8007664:	1c0a      	adds	r2, r1, #0
 8007666:	701a      	strb	r2, [r3, #0]
	if (gpio_pin_reset == gpio_pinState) {
 8007668:	1c7b      	adds	r3, r7, #1
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10b      	bne.n	8007688 <gpio_write+0x38>
		gpio_port->ODR &= ~(1 << gpio_pin);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	1cba      	adds	r2, r7, #2
 8007676:	8812      	ldrh	r2, [r2, #0]
 8007678:	2101      	movs	r1, #1
 800767a:	4091      	lsls	r1, r2
 800767c:	000a      	movs	r2, r1
 800767e:	43d2      	mvns	r2, r2
 8007680:	401a      	ands	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	615a      	str	r2, [r3, #20]
	} else {
		gpio_port->ODR |= 1 << gpio_pin;
	}
}
 8007686:	e009      	b.n	800769c <gpio_write+0x4c>
		gpio_port->ODR |= 1 << gpio_pin;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	1cba      	adds	r2, r7, #2
 800768e:	8812      	ldrh	r2, [r2, #0]
 8007690:	2101      	movs	r1, #1
 8007692:	4091      	lsls	r1, r2
 8007694:	000a      	movs	r2, r1
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	615a      	str	r2, [r3, #20]
}
 800769c:	46c0      	nop			; (mov r8, r8)
 800769e:	46bd      	mov	sp, r7
 80076a0:	b002      	add	sp, #8
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <spi2_cs_low>:

}
void spi1_cs_high(void){

}
void spi2_cs_low(void){
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
	gpio_write(SPI2_CS_PORT, SPI2_CS_PIN, gpio_pin_reset);
 80076a8:	23a0      	movs	r3, #160	; 0xa0
 80076aa:	05db      	lsls	r3, r3, #23
 80076ac:	2200      	movs	r2, #0
 80076ae:	2108      	movs	r1, #8
 80076b0:	0018      	movs	r0, r3
 80076b2:	f7ff ffcd 	bl	8007650 <gpio_write>
}
 80076b6:	46c0      	nop			; (mov r8, r8)
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <spi2_cs_high>:
void spi2_cs_high(void){
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
	gpio_write(SPI2_CS_PORT, SPI2_CS_PIN, gpio_pin_set);
 80076c0:	23a0      	movs	r3, #160	; 0xa0
 80076c2:	05db      	lsls	r3, r3, #23
 80076c4:	2201      	movs	r2, #1
 80076c6:	2108      	movs	r1, #8
 80076c8:	0018      	movs	r0, r3
 80076ca:	f7ff ffc1 	bl	8007650 <gpio_write>
}
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <spi1Init>:

void spi1Init(void){
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0

}
 80076d8:	46c0      	nop			; (mov r8, r8)
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <spi2Init>:
void spi2Init(void){
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
	SPI2_LowLevel_Init();
 80076e4:	f000 f810 	bl	8007708 <SPI2_LowLevel_Init>
	SPIx_Init(SPI2);
 80076e8:	4b06      	ldr	r3, [pc, #24]	; (8007704 <spi2Init+0x24>)
 80076ea:	0018      	movs	r0, r3
 80076ec:	f000 f88c 	bl	8007808 <SPIx_Init>
	gpio_pin_int(SPI2_CS_PORT, SPI2_CS_PIN, gpio_pin_outPut);
 80076f0:	23a0      	movs	r3, #160	; 0xa0
 80076f2:	05db      	lsls	r3, r3, #23
 80076f4:	2200      	movs	r2, #0
 80076f6:	2108      	movs	r1, #8
 80076f8:	0018      	movs	r0, r3
 80076fa:	f7ff ff6d 	bl	80075d8 <gpio_pin_int>
}
 80076fe:	46c0      	nop			; (mov r8, r8)
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40003800 	.word	0x40003800

08007708 <SPI2_LowLevel_Init>:
static void SPI2_LowLevel_Init(void) {
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
	uint32_t temp;
	//MISO
	SPI2_MISO_PORT->MODER &= ~(0x03 << (SPI2_MISO_PIN * 2));
 800770e:	4b36      	ldr	r3, [pc, #216]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	4b35      	ldr	r3, [pc, #212]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007714:	4935      	ldr	r1, [pc, #212]	; (80077ec <SPI2_LowLevel_Init+0xe4>)
 8007716:	400a      	ands	r2, r1
 8007718:	601a      	str	r2, [r3, #0]
	SPI2_MISO_PORT->MODER |= (0x02 << (SPI2_MISO_PIN * 2)); //mode AF
 800771a:	4b33      	ldr	r3, [pc, #204]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	4b32      	ldr	r3, [pc, #200]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007720:	2180      	movs	r1, #128	; 0x80
 8007722:	0589      	lsls	r1, r1, #22
 8007724:	430a      	orrs	r2, r1
 8007726:	601a      	str	r2, [r3, #0]

	SPI2_MISO_PORT->ODR &= ~(0x01 << SPI2_MISO_PIN); //push pull
 8007728:	4b2f      	ldr	r3, [pc, #188]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 800772a:	695a      	ldr	r2, [r3, #20]
 800772c:	4b2e      	ldr	r3, [pc, #184]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 800772e:	4930      	ldr	r1, [pc, #192]	; (80077f0 <SPI2_LowLevel_Init+0xe8>)
 8007730:	400a      	ands	r2, r1
 8007732:	615a      	str	r2, [r3, #20]
	SPI2_MISO_PORT->PUPDR &= ~(0x03 << (SPI2_MISO_PIN * 2)); //no pull
 8007734:	4b2c      	ldr	r3, [pc, #176]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	4b2b      	ldr	r3, [pc, #172]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 800773a:	492c      	ldr	r1, [pc, #176]	; (80077ec <SPI2_LowLevel_Init+0xe4>)
 800773c:	400a      	ands	r2, r1
 800773e:	60da      	str	r2, [r3, #12]

	//SPI2_MISO_PORT->AFR[1] = 0x00;

	temp = SPI2_MISO_PORT->AFR[SPI2_MISO_PIN >> 3u];
 8007740:	4b29      	ldr	r3, [pc, #164]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_MISO_PIN & 0x07u) * 4u));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a2a      	ldr	r2, [pc, #168]	; (80077f4 <SPI2_LowLevel_Init+0xec>)
 800774a:	4013      	ands	r3, r2
 800774c:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_MISO_PIN & 0x07u) * 4u));
	SPI2_MISO_PORT->AFR[SPI2_MISO_PIN >> 3u] = temp;
 800774e:	4b26      	ldr	r3, [pc, #152]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	625a      	str	r2, [r3, #36]	; 0x24

	//MOSI
	SPI2_MOSI_PORT->MODER &= ~(0x03 << (SPI2_MOSI_PIN * 2));
 8007754:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	4b23      	ldr	r3, [pc, #140]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 800775a:	0092      	lsls	r2, r2, #2
 800775c:	0892      	lsrs	r2, r2, #2
 800775e:	601a      	str	r2, [r3, #0]
	SPI2_MOSI_PORT->MODER |= (0x02 << (SPI2_MOSI_PIN * 2)); //mode AF
 8007760:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	4b20      	ldr	r3, [pc, #128]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007766:	2180      	movs	r1, #128	; 0x80
 8007768:	0609      	lsls	r1, r1, #24
 800776a:	430a      	orrs	r2, r1
 800776c:	601a      	str	r2, [r3, #0]

	SPI2_MOSI_PORT->ODR &= ~(0x01 << SPI2_MOSI_PIN); //push pull
 800776e:	4b1e      	ldr	r3, [pc, #120]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007774:	4920      	ldr	r1, [pc, #128]	; (80077f8 <SPI2_LowLevel_Init+0xf0>)
 8007776:	400a      	ands	r2, r1
 8007778:	615a      	str	r2, [r3, #20]
	SPI2_MOSI_PORT->PUPDR &= ~(0x03 << (SPI2_MOSI_PIN * 2)); //no pull
 800777a:	4b1b      	ldr	r3, [pc, #108]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007780:	0092      	lsls	r2, r2, #2
 8007782:	0892      	lsrs	r2, r2, #2
 8007784:	60da      	str	r2, [r3, #12]

	//SPI2_MOSI_PORT->AFR[1] = 0x00;
	temp = SPI2_MOSI_PORT->AFR[SPI2_MOSI_PIN >> 3u];
 8007786:	4b18      	ldr	r3, [pc, #96]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_MOSI_PIN & 0x07u) * 4u));
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	091b      	lsrs	r3, r3, #4
 8007792:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_MOSI_PIN & 0x07u) * 4u));
	SPI2_MOSI_PORT->AFR[SPI2_MOSI_PIN >> 3u] = temp;
 8007794:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	625a      	str	r2, [r3, #36]	; 0x24

	//SCK
	SPI2_SCK_PORT->MODER &= ~(0x03 << (SPI2_SCK_PIN * 2));
 800779a:	4b13      	ldr	r3, [pc, #76]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 80077a0:	4916      	ldr	r1, [pc, #88]	; (80077fc <SPI2_LowLevel_Init+0xf4>)
 80077a2:	400a      	ands	r2, r1
 80077a4:	601a      	str	r2, [r3, #0]
	SPI2_SCK_PORT->MODER |= (0x02 << (SPI2_SCK_PIN * 2)); //mode AF
 80077a6:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 80077ac:	2180      	movs	r1, #128	; 0x80
 80077ae:	0509      	lsls	r1, r1, #20
 80077b0:	430a      	orrs	r2, r1
 80077b2:	601a      	str	r2, [r3, #0]

	SPI2_SCK_PORT->ODR &= ~(0x01 << SPI2_SCK_PIN); //push pull
 80077b4:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 80077b6:	695a      	ldr	r2, [r3, #20]
 80077b8:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 80077ba:	4911      	ldr	r1, [pc, #68]	; (8007800 <SPI2_LowLevel_Init+0xf8>)
 80077bc:	400a      	ands	r2, r1
 80077be:	615a      	str	r2, [r3, #20]
	SPI2_SCK_PORT->PUPDR &= ~(0x03 << (SPI2_SCK_PIN * 2)); //no pull
 80077c0:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 80077c6:	490d      	ldr	r1, [pc, #52]	; (80077fc <SPI2_LowLevel_Init+0xf4>)
 80077c8:	400a      	ands	r2, r1
 80077ca:	60da      	str	r2, [r3, #12]

	//SPI2_SCK_PORT->AFR[1] = 0x00;
	temp = SPI2_SCK_PORT->AFR[SPI2_SCK_PIN >> 3u];
 80077cc:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_SCK_PIN & 0x07u) * 4u));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a0b      	ldr	r2, [pc, #44]	; (8007804 <SPI2_LowLevel_Init+0xfc>)
 80077d6:	4013      	ands	r3, r2
 80077d8:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_SCK_PIN & 0x07u) * 4u));
	SPI2_SCK_PORT->AFR[SPI2_SCK_PIN >> 3u] = temp;
 80077da:	4b03      	ldr	r3, [pc, #12]	; (80077e8 <SPI2_LowLevel_Init+0xe0>)
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	625a      	str	r2, [r3, #36]	; 0x24

}
 80077e0:	46c0      	nop			; (mov r8, r8)
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b002      	add	sp, #8
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	50000400 	.word	0x50000400
 80077ec:	cfffffff 	.word	0xcfffffff
 80077f0:	ffffbfff 	.word	0xffffbfff
 80077f4:	f0ffffff 	.word	0xf0ffffff
 80077f8:	ffff7fff 	.word	0xffff7fff
 80077fc:	f3ffffff 	.word	0xf3ffffff
 8007800:	ffffdfff 	.word	0xffffdfff
 8007804:	ff0fffff 	.word	0xff0fffff

08007808 <SPIx_Init>:


static void SPIx_Init(SPI_TypeDef *SPIx){
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
	 RCC->APBENR1 |= RCC_APBENR1_SPI2EN;//clock Enbale
 8007810:	4b3d      	ldr	r3, [pc, #244]	; (8007908 <SPIx_Init+0x100>)
 8007812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007814:	4b3c      	ldr	r3, [pc, #240]	; (8007908 <SPIx_Init+0x100>)
 8007816:	2180      	movs	r1, #128	; 0x80
 8007818:	01c9      	lsls	r1, r1, #7
 800781a:	430a      	orrs	r2, r1
 800781c:	63da      	str	r2, [r3, #60]	; 0x3c

	 SPIx->CR1 |= SPI_CR1_MSTR; //MasterMode
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2204      	movs	r2, #4
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_RXONLY;// 2line
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a37      	ldr	r2, [pc, #220]	; (800790c <SPIx_Init+0x104>)
 8007830:	401a      	ands	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 &= SPI_CR2_DS;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	23f0      	movs	r3, #240	; 0xf0
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	401a      	ands	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	605a      	str	r2, [r3, #4]
	 SPIx->CR2 &= SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2;//8bit
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	23e0      	movs	r3, #224	; 0xe0
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	401a      	ands	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	605a      	str	r2, [r3, #4]
	 SPIx->CR1 &= ~SPI_CR1_CPHA;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2201      	movs	r2, #1
 8007858:	4393      	bics	r3, r2
 800785a:	001a      	movs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_CPOL;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2202      	movs	r2, #2
 8007866:	4393      	bics	r3, r2
 8007868:	001a      	movs	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= SPI_CR1_SSM;//soff nss
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2280      	movs	r2, #128	; 0x80
 8007874:	0092      	lsls	r2, r2, #2
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= SPI_CR1_SSI;//soff nss
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2280      	movs	r2, #128	; 0x80
 8007882:	0052      	lsls	r2, r2, #1
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_BR;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2238      	movs	r2, #56	; 0x38
 8007890:	4393      	bics	r3, r2
 8007892:	001a      	movs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_2);   //f/8
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2230      	movs	r2, #48	; 0x30
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_LSBFIRST; //SPI_FIRSTBIT_MSB
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2280      	movs	r2, #128	; 0x80
 80078aa:	4393      	bics	r3, r2
 80078ac:	001a      	movs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 &= ~SPI_CR2_FRF;//SPI_TIMODE_DISABLE
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2210      	movs	r2, #16
 80078b8:	4393      	bics	r3, r2
 80078ba:	001a      	movs	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	605a      	str	r2, [r3, #4]
	 SPIx->CR1 &= ~SPI_CR1_CRCEN;//SPI_CRCCALCULATION_DISABLE
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a12      	ldr	r2, [pc, #72]	; (8007910 <SPIx_Init+0x108>)
 80078c6:	401a      	ands	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 |= SPI_CR2_NSSP;//SPI_NSS_PULSE_ENABLE
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2208      	movs	r2, #8
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	605a      	str	r2, [r3, #4]
	 SPIx->CR2 |= SPI_CR2_FRXTH;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2280      	movs	r2, #128	; 0x80
 80078de:	0152      	lsls	r2, r2, #5
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	605a      	str	r2, [r3, #4]
	 SPIx->I2SCFGR &= ~SPI_I2SCFGR_I2SMOD;//SPI mode is selected
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	4a0a      	ldr	r2, [pc, #40]	; (8007914 <SPIx_Init+0x10c>)
 80078ec:	401a      	ands	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	61da      	str	r2, [r3, #28]
	 SPIx->CR1 |= SPI_CR1_SPE;//enable SPI
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2240      	movs	r2, #64	; 0x40
 80078f8:	431a      	orrs	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]

}
 80078fe:	46c0      	nop			; (mov r8, r8)
 8007900:	46bd      	mov	sp, r7
 8007902:	b002      	add	sp, #8
 8007904:	bd80      	pop	{r7, pc}
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	40021000 	.word	0x40021000
 800790c:	fffffbff 	.word	0xfffffbff
 8007910:	ffffdfff 	.word	0xffffdfff
 8007914:	fffff7ff 	.word	0xfffff7ff

08007918 <SPIx_readWrite>:



uint8_t SPIx_readWrite(SPI_TypeDef *SPIx, uint8_t byte){
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	000a      	movs	r2, r1
 8007922:	1cfb      	adds	r3, r7, #3
 8007924:	701a      	strb	r2, [r3, #0]
	uint8_t ret  = 0;
 8007926:	230f      	movs	r3, #15
 8007928:	18fb      	adds	r3, r7, r3
 800792a:	2200      	movs	r2, #0
 800792c:	701a      	strb	r2, [r3, #0]
	while(!((SPIx->SR) & SPI_SR_TXE));
 800792e:	46c0      	nop			; (mov r8, r8)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	2202      	movs	r2, #2
 8007936:	4013      	ands	r3, r2
 8007938:	d0fa      	beq.n	8007930 <SPIx_readWrite+0x18>
	*((__IO uint8_t *)&SPIx->DR) = byte;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	330c      	adds	r3, #12
 800793e:	1cfa      	adds	r2, r7, #3
 8007940:	7812      	ldrb	r2, [r2, #0]
 8007942:	701a      	strb	r2, [r3, #0]
	while(!((SPIx->SR) & SPI_SR_RXNE));
 8007944:	46c0      	nop			; (mov r8, r8)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	2201      	movs	r2, #1
 800794c:	4013      	ands	r3, r2
 800794e:	d0fa      	beq.n	8007946 <SPIx_readWrite+0x2e>
	ret =  (uint8_t)SPIx->DR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	210f      	movs	r1, #15
 8007956:	187b      	adds	r3, r7, r1
 8007958:	701a      	strb	r2, [r3, #0]
	return ret;
 800795a:	187b      	adds	r3, r7, r1
 800795c:	781b      	ldrb	r3, [r3, #0]
}
 800795e:	0018      	movs	r0, r3
 8007960:	46bd      	mov	sp, r7
 8007962:	b004      	add	sp, #16
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <FLASH_Lock>:
#include "stm32g031xx.h"
#include "dvr_flash.h"

//#define FLASH_PAGE_SIZE				0x800

void FLASH_Lock(void) {
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 800796c:	4b04      	ldr	r3, [pc, #16]	; (8007980 <FLASH_Lock+0x18>)
 800796e:	695a      	ldr	r2, [r3, #20]
 8007970:	4b03      	ldr	r3, [pc, #12]	; (8007980 <FLASH_Lock+0x18>)
 8007972:	2180      	movs	r1, #128	; 0x80
 8007974:	0609      	lsls	r1, r1, #24
 8007976:	430a      	orrs	r2, r1
 8007978:	615a      	str	r2, [r3, #20]
}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	40022000 	.word	0x40022000

08007984 <FLASH_Unlock>:

void FLASH_Unlock(void) {
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
	if (FLASH->CR & FLASH_CR_LOCK) {
 8007988:	4b06      	ldr	r3, [pc, #24]	; (80079a4 <FLASH_Unlock+0x20>)
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	da05      	bge.n	800799c <FLASH_Unlock+0x18>
		FLASH->KEYR = FLASH_KEY1;
 8007990:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <FLASH_Unlock+0x20>)
 8007992:	4a05      	ldr	r2, [pc, #20]	; (80079a8 <FLASH_Unlock+0x24>)
 8007994:	609a      	str	r2, [r3, #8]
		FLASH->KEYR = FLASH_KEY2;
 8007996:	4b03      	ldr	r3, [pc, #12]	; (80079a4 <FLASH_Unlock+0x20>)
 8007998:	4a04      	ldr	r2, [pc, #16]	; (80079ac <FLASH_Unlock+0x28>)
 800799a:	609a      	str	r2, [r3, #8]
	}
}
 800799c:	46c0      	nop			; (mov r8, r8)
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	46c0      	nop			; (mov r8, r8)
 80079a4:	40022000 	.word	0x40022000
 80079a8:	45670123 	.word	0x45670123
 80079ac:	cdef89ab 	.word	0xcdef89ab

080079b0 <FLASH_GetBank1Status>:

	return flashstatus;
}


FLASH_Status FLASH_GetBank1Status(void) {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0

	FLASH_Status flashstatus = FLASH_COMPLETE1;
 80079b6:	1dfb      	adds	r3, r7, #7
 80079b8:	2204      	movs	r2, #4
 80079ba:	701a      	strb	r2, [r3, #0]

	if ((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) {
 80079bc:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <FLASH_GetBank1Status+0x5c>)
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	2380      	movs	r3, #128	; 0x80
 80079c2:	025b      	lsls	r3, r3, #9
 80079c4:	401a      	ands	r2, r3
 80079c6:	2380      	movs	r3, #128	; 0x80
 80079c8:	025b      	lsls	r3, r3, #9
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d103      	bne.n	80079d6 <FLASH_GetBank1Status+0x26>
		flashstatus = FLASH_BUSY;
 80079ce:	1dfb      	adds	r3, r7, #7
 80079d0:	2201      	movs	r2, #1
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	e014      	b.n	8007a00 <FLASH_GetBank1Status+0x50>
	} else {
		if ((FLASH->SR & FLASH_FLAG_BANK1_PROGERR) != 0) {
 80079d6:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <FLASH_GetBank1Status+0x5c>)
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2208      	movs	r2, #8
 80079dc:	4013      	ands	r3, r2
 80079de:	d003      	beq.n	80079e8 <FLASH_GetBank1Status+0x38>
			flashstatus = FLASH_ERROR_PG1;
 80079e0:	1dfb      	adds	r3, r7, #7
 80079e2:	2202      	movs	r2, #2
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	e00b      	b.n	8007a00 <FLASH_GetBank1Status+0x50>
		} else {
			if ((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0) {
 80079e8:	4b08      	ldr	r3, [pc, #32]	; (8007a0c <FLASH_GetBank1Status+0x5c>)
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	2210      	movs	r2, #16
 80079ee:	4013      	ands	r3, r2
 80079f0:	d003      	beq.n	80079fa <FLASH_GetBank1Status+0x4a>
				flashstatus = FLASH_ERROR_WRP1;
 80079f2:	1dfb      	adds	r3, r7, #7
 80079f4:	2203      	movs	r2, #3
 80079f6:	701a      	strb	r2, [r3, #0]
 80079f8:	e002      	b.n	8007a00 <FLASH_GetBank1Status+0x50>
			} else {
				flashstatus = FLASH_COMPLETE1;
 80079fa:	1dfb      	adds	r3, r7, #7
 80079fc:	2204      	movs	r2, #4
 80079fe:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return flashstatus;
 8007a00:	1dfb      	adds	r3, r7, #7
 8007a02:	781b      	ldrb	r3, [r3, #0]
}
 8007a04:	0018      	movs	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	b002      	add	sp, #8
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	40022000 	.word	0x40022000

08007a10 <FLASH_WaitForLastBank1Operation>:

FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout) {
 8007a10:	b5b0      	push	{r4, r5, r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	FLASH_Status status = FLASH_COMPLETE1;
 8007a18:	250f      	movs	r5, #15
 8007a1a:	197b      	adds	r3, r7, r5
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	701a      	strb	r2, [r3, #0]

	/* Check for the Flash Status */
	status = FLASH_GetBank1Status();
 8007a20:	197c      	adds	r4, r7, r5
 8007a22:	f7ff ffc5 	bl	80079b0 <FLASH_GetBank1Status>
 8007a26:	0003      	movs	r3, r0
 8007a28:	7023      	strb	r3, [r4, #0]
	/* Wait for a Flash operation to complete or a TIMEOUT to occur */
	while ((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00)) {
 8007a2a:	46c0      	nop			; (mov r8, r8)
		status = FLASH_GetBank1Status();
		Timeout--;
	}
	if (Timeout == 0x00) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d102      	bne.n	8007a38 <FLASH_WaitForLastBank1Operation+0x28>
		status = FLASH_TIMEOUT;
 8007a32:	197b      	adds	r3, r7, r5
 8007a34:	2205      	movs	r2, #5
 8007a36:	701a      	strb	r2, [r3, #0]
	}
	/* Return the operation status */
	return status;
 8007a38:	230f      	movs	r3, #15
 8007a3a:	18fb      	adds	r3, r7, r3
 8007a3c:	781b      	ldrb	r3, [r3, #0]
}
 8007a3e:	0018      	movs	r0, r3
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b004      	add	sp, #16
 8007a44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007a48 <FLASH_ErasePage>:
	/* Return the operation status */
	return status;

}

FLASH_Status FLASH_ErasePage(uint32_t Page_Address) {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	FLASH_Status status = FLASH_COMPLETE1;
 8007a50:	230f      	movs	r3, #15
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	2204      	movs	r2, #4
 8007a56:	701a      	strb	r2, [r3, #0]
	//uint32_t page = (Page_Address - BASE_ADDR) / FLASH_PAGE_SIZE;
	uint32_t page = (Page_Address - BASE_ADDR) / 0x800;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	22f8      	movs	r2, #248	; 0xf8
 8007a5c:	0612      	lsls	r2, r2, #24
 8007a5e:	4694      	mov	ip, r2
 8007a60:	4463      	add	r3, ip
 8007a62:	0adb      	lsrs	r3, r3, #11
 8007a64:	60bb      	str	r3, [r7, #8]
	while ((FLASH->SR & FLASH_SR_BSY1));
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	2380      	movs	r3, #128	; 0x80
 8007a6e:	025b      	lsls	r3, r3, #9
 8007a70:	4013      	ands	r3, r2
 8007a72:	d1f9      	bne.n	8007a68 <FLASH_ErasePage+0x20>
	FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 8007a74:	4b1a      	ldr	r3, [pc, #104]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007a76:	695a      	ldr	r2, [r3, #20]
 8007a78:	4b19      	ldr	r3, [pc, #100]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007a7a:	2102      	movs	r1, #2
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	615a      	str	r2, [r3, #20]
	FLASH->CR &= ~FLASH_CR_PNB;
 8007a80:	4b17      	ldr	r3, [pc, #92]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007a82:	695a      	ldr	r2, [r3, #20]
 8007a84:	4b16      	ldr	r3, [pc, #88]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007a86:	4917      	ldr	r1, [pc, #92]	; (8007ae4 <FLASH_ErasePage+0x9c>)
 8007a88:	400a      	ands	r2, r1
 8007a8a:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_PNB & (page << 3));
 8007a8c:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007a8e:	6959      	ldr	r1, [r3, #20]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	4a14      	ldr	r2, [pc, #80]	; (8007ae8 <FLASH_ErasePage+0xa0>)
 8007a96:	401a      	ands	r2, r3
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 8007a9e:	4b10      	ldr	r3, [pc, #64]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007aa0:	695a      	ldr	r2, [r3, #20]
 8007aa2:	4b0f      	ldr	r3, [pc, #60]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007aa4:	2180      	movs	r1, #128	; 0x80
 8007aa6:	0249      	lsls	r1, r1, #9
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	615a      	str	r2, [r3, #20]
	while ((FLASH->SR & FLASH_SR_BSY1));
 8007aac:	46c0      	nop			; (mov r8, r8)
 8007aae:	4b0c      	ldr	r3, [pc, #48]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007ab0:	691a      	ldr	r2, [r3, #16]
 8007ab2:	2380      	movs	r3, #128	; 0x80
 8007ab4:	025b      	lsls	r3, r3, #9
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	d1f9      	bne.n	8007aae <FLASH_ErasePage+0x66>
	FLASH->CR &= ~FLASH_SR_BSY1;
 8007aba:	4b09      	ldr	r3, [pc, #36]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007abc:	695a      	ldr	r2, [r3, #20]
 8007abe:	4b08      	ldr	r3, [pc, #32]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007ac0:	490a      	ldr	r1, [pc, #40]	; (8007aec <FLASH_ErasePage+0xa4>)
 8007ac2:	400a      	ands	r2, r1
 8007ac4:	615a      	str	r2, [r3, #20]
	FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 8007ac6:	4b06      	ldr	r3, [pc, #24]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007ac8:	695a      	ldr	r2, [r3, #20]
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <FLASH_ErasePage+0x98>)
 8007acc:	2102      	movs	r1, #2
 8007ace:	438a      	bics	r2, r1
 8007ad0:	615a      	str	r2, [r3, #20]
	return status;
 8007ad2:	230f      	movs	r3, #15
 8007ad4:	18fb      	adds	r3, r7, r3
 8007ad6:	781b      	ldrb	r3, [r3, #0]
}
 8007ad8:	0018      	movs	r0, r3
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b004      	add	sp, #16
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40022000 	.word	0x40022000
 8007ae4:	ffffe007 	.word	0xffffe007
 8007ae8:	00001ff8 	.word	0x00001ff8
 8007aec:	fffeffff 	.word	0xfffeffff

08007af0 <FLASH_ProgramDoubleWord>:


void flashProgramDoubleWorld(uint32_t addr, uint64_t data) {
}

FLASH_Status FLASH_ProgramDoubleWord(uint32_t addr, uint64_t data) {
 8007af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	603a      	str	r2, [r7, #0]
 8007afa:	607b      	str	r3, [r7, #4]

	FLASH_Status status = FLASH_COMPLETE1;
 8007afc:	2117      	movs	r1, #23
 8007afe:	187b      	adds	r3, r7, r1
 8007b00:	2204      	movs	r2, #4
 8007b02:	701a      	strb	r2, [r3, #0]
	status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 8007b04:	187e      	adds	r6, r7, r1
 8007b06:	2380      	movs	r3, #128	; 0x80
 8007b08:	019b      	lsls	r3, r3, #6
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f7ff ff80 	bl	8007a10 <FLASH_WaitForLastBank1Operation>
 8007b10:	0003      	movs	r3, r0
 8007b12:	7033      	strb	r3, [r6, #0]

	FLASH->CR |= FLASH_CR_PG;/*!< Programming */
 8007b14:	4b14      	ldr	r3, [pc, #80]	; (8007b68 <FLASH_ProgramDoubleWord+0x78>)
 8007b16:	695a      	ldr	r2, [r3, #20]
 8007b18:	4b13      	ldr	r3, [pc, #76]	; (8007b68 <FLASH_ProgramDoubleWord+0x78>)
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	615a      	str	r2, [r3, #20]
	*(uint32_t*) addr = (uint32_t) data;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8007b26:	f3bf 8f6f 	isb	sy
}
 8007b2a:	46c0      	nop			; (mov r8, r8)
	__ISB();
	*(uint32_t*) (addr + 4U) = (uint32_t) (data >> 32U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	001c      	movs	r4, r3
 8007b30:	2300      	movs	r3, #0
 8007b32:	001d      	movs	r5, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3304      	adds	r3, #4
 8007b38:	0022      	movs	r2, r4
 8007b3a:	601a      	str	r2, [r3, #0]

	status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 8007b3c:	2517      	movs	r5, #23
 8007b3e:	197c      	adds	r4, r7, r5
 8007b40:	2380      	movs	r3, #128	; 0x80
 8007b42:	019b      	lsls	r3, r3, #6
 8007b44:	0018      	movs	r0, r3
 8007b46:	f7ff ff63 	bl	8007a10 <FLASH_WaitForLastBank1Operation>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	7023      	strb	r3, [r4, #0]

	FLASH->CR &= ~FLASH_CR_PG;
 8007b4e:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <FLASH_ProgramDoubleWord+0x78>)
 8007b50:	695a      	ldr	r2, [r3, #20]
 8007b52:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <FLASH_ProgramDoubleWord+0x78>)
 8007b54:	2101      	movs	r1, #1
 8007b56:	438a      	bics	r2, r1
 8007b58:	615a      	str	r2, [r3, #20]

	return status;
 8007b5a:	197b      	adds	r3, r7, r5
 8007b5c:	781b      	ldrb	r3, [r3, #0]
}
 8007b5e:	0018      	movs	r0, r3
 8007b60:	46bd      	mov	sp, r7
 8007b62:	b007      	add	sp, #28
 8007b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	40022000 	.word	0x40022000

08007b6c <FLASH_ClearFlag>:


void FLASH_ClearFlag(uint32_t FLASH_FLAG) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	FLASH->SR = FLASH_FLAG;
 8007b74:	4b03      	ldr	r3, [pc, #12]	; (8007b84 <FLASH_ClearFlag+0x18>)
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	611a      	str	r2, [r3, #16]
}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	b002      	add	sp, #8
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	40022000 	.word	0x40022000

08007b88 <usart_x0_init>:

static void COMX0_pin_init(void) ;
static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) ;


void usart_x0_init(uint32_t baudrate) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]

	COMX0_pin_init();
 8007b90:	f000 f82a 	bl	8007be8 <COMX0_pin_init>
	uartx_init(COMX0, baudrate);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a07      	ldr	r2, [pc, #28]	; (8007bb4 <usart_x0_init+0x2c>)
 8007b98:	0019      	movs	r1, r3
 8007b9a:	0010      	movs	r0, r2
 8007b9c:	f000 f8ba 	bl	8007d14 <uartx_init>
	COMX0->CR1 |= USART_CR1_RXNEIE_RXFNEIE;//enable RX interrupt
 8007ba0:	4b04      	ldr	r3, [pc, #16]	; (8007bb4 <usart_x0_init+0x2c>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	4b03      	ldr	r3, [pc, #12]	; (8007bb4 <usart_x0_init+0x2c>)
 8007ba6:	2120      	movs	r1, #32
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	601a      	str	r2, [r3, #0]
}
 8007bac:	46c0      	nop			; (mov r8, r8)
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	b002      	add	sp, #8
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	40013800 	.word	0x40013800

08007bb8 <usart_x0_send>:

void usart_x0_send(uint8_t c){
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	0002      	movs	r2, r0
 8007bc0:	1dfb      	adds	r3, r7, #7
 8007bc2:	701a      	strb	r2, [r3, #0]
	while ((COMX0->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 8007bc4:	46c0      	nop			; (mov r8, r8)
 8007bc6:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <usart_x0_send+0x2c>)
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	2280      	movs	r2, #128	; 0x80
 8007bcc:	4013      	ands	r3, r2
 8007bce:	2b80      	cmp	r3, #128	; 0x80
 8007bd0:	d1f9      	bne.n	8007bc6 <usart_x0_send+0xe>
	COMX0->TDR = c;
 8007bd2:	4b04      	ldr	r3, [pc, #16]	; (8007be4 <usart_x0_send+0x2c>)
 8007bd4:	1dfa      	adds	r2, r7, #7
 8007bd6:	7812      	ldrb	r2, [r2, #0]
 8007bd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007bda:	46c0      	nop			; (mov r8, r8)
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	b002      	add	sp, #8
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	40013800 	.word	0x40013800

08007be8 <COMX0_pin_init>:

static void COMX0_pin_init(void) {
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	607b      	str	r3, [r7, #4]
	RCC->IOPENR |= (COMX0_TX_GPIO_CLK | COMX0_TX_GPIO_CLK);
 8007bf2:	4b42      	ldr	r3, [pc, #264]	; (8007cfc <COMX0_pin_init+0x114>)
 8007bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bf6:	4b41      	ldr	r3, [pc, #260]	; (8007cfc <COMX0_pin_init+0x114>)
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->COMX0_APB_CLK |= COMX0_CLK;
 8007bfe:	4b3f      	ldr	r3, [pc, #252]	; (8007cfc <COMX0_pin_init+0x114>)
 8007c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c02:	4b3e      	ldr	r3, [pc, #248]	; (8007cfc <COMX0_pin_init+0x114>)
 8007c04:	2180      	movs	r1, #128	; 0x80
 8007c06:	01c9      	lsls	r1, r1, #7
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	641a      	str	r2, [r3, #64]	; 0x40

	COMX0_RX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_RX_PIN * 2));
 8007c0c:	23a0      	movs	r3, #160	; 0xa0
 8007c0e:	05db      	lsls	r3, r3, #23
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	23a0      	movs	r3, #160	; 0xa0
 8007c14:	05db      	lsls	r3, r3, #23
 8007c16:	493a      	ldr	r1, [pc, #232]	; (8007d00 <COMX0_pin_init+0x118>)
 8007c18:	400a      	ands	r2, r1
 8007c1a:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->MODER |= (0x02 << (COMX0_RX_PIN * 2)); //mode AF
 8007c1c:	23a0      	movs	r3, #160	; 0xa0
 8007c1e:	05db      	lsls	r3, r3, #23
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	23a0      	movs	r3, #160	; 0xa0
 8007c24:	05db      	lsls	r3, r3, #23
 8007c26:	2180      	movs	r1, #128	; 0x80
 8007c28:	0389      	lsls	r1, r1, #14
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->ODR &= ~(0x01 << COMX0_RX_PIN); //push pull
 8007c2e:	23a0      	movs	r3, #160	; 0xa0
 8007c30:	05db      	lsls	r3, r3, #23
 8007c32:	695a      	ldr	r2, [r3, #20]
 8007c34:	23a0      	movs	r3, #160	; 0xa0
 8007c36:	05db      	lsls	r3, r3, #23
 8007c38:	4932      	ldr	r1, [pc, #200]	; (8007d04 <COMX0_pin_init+0x11c>)
 8007c3a:	400a      	ands	r2, r1
 8007c3c:	615a      	str	r2, [r3, #20]
	COMX0_RX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_RX_PIN * 2)); //no pull
 8007c3e:	23a0      	movs	r3, #160	; 0xa0
 8007c40:	05db      	lsls	r3, r3, #23
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	23a0      	movs	r3, #160	; 0xa0
 8007c46:	05db      	lsls	r3, r3, #23
 8007c48:	492d      	ldr	r1, [pc, #180]	; (8007d00 <COMX0_pin_init+0x118>)
 8007c4a:	400a      	ands	r2, r1
 8007c4c:	60da      	str	r2, [r3, #12]
	COMX0_RX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_RX_PIN); ////speed low
 8007c4e:	23a0      	movs	r3, #160	; 0xa0
 8007c50:	05db      	lsls	r3, r3, #23
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	23a0      	movs	r3, #160	; 0xa0
 8007c56:	05db      	lsls	r3, r3, #23
 8007c58:	492a      	ldr	r1, [pc, #168]	; (8007d04 <COMX0_pin_init+0x11c>)
 8007c5a:	400a      	ands	r2, r1
 8007c5c:	609a      	str	r2, [r3, #8]

	COMX0_TX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_TX_PIN * 2));
 8007c5e:	23a0      	movs	r3, #160	; 0xa0
 8007c60:	05db      	lsls	r3, r3, #23
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	23a0      	movs	r3, #160	; 0xa0
 8007c66:	05db      	lsls	r3, r3, #23
 8007c68:	4927      	ldr	r1, [pc, #156]	; (8007d08 <COMX0_pin_init+0x120>)
 8007c6a:	400a      	ands	r2, r1
 8007c6c:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->MODER |= (0x02 << (COMX0_TX_PIN * 2)); //mode AF
 8007c6e:	23a0      	movs	r3, #160	; 0xa0
 8007c70:	05db      	lsls	r3, r3, #23
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	23a0      	movs	r3, #160	; 0xa0
 8007c76:	05db      	lsls	r3, r3, #23
 8007c78:	2180      	movs	r1, #128	; 0x80
 8007c7a:	0309      	lsls	r1, r1, #12
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->ODR &= ~(0x01 << COMX0_TX_PIN); //push pull
 8007c80:	23a0      	movs	r3, #160	; 0xa0
 8007c82:	05db      	lsls	r3, r3, #23
 8007c84:	695a      	ldr	r2, [r3, #20]
 8007c86:	23a0      	movs	r3, #160	; 0xa0
 8007c88:	05db      	lsls	r3, r3, #23
 8007c8a:	4920      	ldr	r1, [pc, #128]	; (8007d0c <COMX0_pin_init+0x124>)
 8007c8c:	400a      	ands	r2, r1
 8007c8e:	615a      	str	r2, [r3, #20]
	COMX0_TX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_TX_PIN * 2)); //no pull
 8007c90:	23a0      	movs	r3, #160	; 0xa0
 8007c92:	05db      	lsls	r3, r3, #23
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	23a0      	movs	r3, #160	; 0xa0
 8007c98:	05db      	lsls	r3, r3, #23
 8007c9a:	491b      	ldr	r1, [pc, #108]	; (8007d08 <COMX0_pin_init+0x120>)
 8007c9c:	400a      	ands	r2, r1
 8007c9e:	60da      	str	r2, [r3, #12]
	COMX0_TX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_TX_PIN); ////speed low
 8007ca0:	23a0      	movs	r3, #160	; 0xa0
 8007ca2:	05db      	lsls	r3, r3, #23
 8007ca4:	689a      	ldr	r2, [r3, #8]
 8007ca6:	23a0      	movs	r3, #160	; 0xa0
 8007ca8:	05db      	lsls	r3, r3, #23
 8007caa:	4918      	ldr	r1, [pc, #96]	; (8007d0c <COMX0_pin_init+0x124>)
 8007cac:	400a      	ands	r2, r1
 8007cae:	609a      	str	r2, [r3, #8]

	temp = COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3u];
 8007cb0:	23a0      	movs	r3, #160	; 0xa0
 8007cb2:	05db      	lsls	r3, r3, #23
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_RX_PIN & 0x07u) * 4ul));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a15      	ldr	r2, [pc, #84]	; (8007d10 <COMX0_pin_init+0x128>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_RX_PIN_AF << ((COMX0_RX_PIN & 0x07u) * 4ul));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2280      	movs	r2, #128	; 0x80
 8007cc4:	0052      	lsls	r2, r2, #1
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	607b      	str	r3, [r7, #4]
	COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3ul] = temp;
 8007cca:	23a0      	movs	r3, #160	; 0xa0
 8007ccc:	05db      	lsls	r3, r3, #23
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	625a      	str	r2, [r3, #36]	; 0x24

	temp = COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3u];
 8007cd2:	23a0      	movs	r3, #160	; 0xa0
 8007cd4:	05db      	lsls	r3, r3, #23
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_TX_PIN & 0x07u) * 4ul));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	22f0      	movs	r2, #240	; 0xf0
 8007cde:	4393      	bics	r3, r2
 8007ce0:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_TX_PIN_AF << ((COMX0_TX_PIN & 0x07u) * 4ul));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2210      	movs	r2, #16
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	607b      	str	r3, [r7, #4]
	COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3ul] = temp;
 8007cea:	23a0      	movs	r3, #160	; 0xa0
 8007cec:	05db      	lsls	r3, r3, #23
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	b002      	add	sp, #8
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	40021000 	.word	0x40021000
 8007d00:	ffcfffff 	.word	0xffcfffff
 8007d04:	fffffbff 	.word	0xfffffbff
 8007d08:	fff3ffff 	.word	0xfff3ffff
 8007d0c:	fffffdff 	.word	0xfffffdff
 8007d10:	fffff0ff 	.word	0xfffff0ff

08007d14 <uartx_init>:



static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) {
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	uint32_t BRR_value = SYS_CLOCK / baudrate;
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	4819      	ldr	r0, [pc, #100]	; (8007d88 <uartx_init+0x74>)
 8007d22:	f7fa fe03 	bl	800292c <__udivsi3>
 8007d26:	0003      	movs	r3, r0
 8007d28:	60fb      	str	r3, [r7, #12]

	UARTx->CR1 = 0;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]
	// Word length 8n1
	UARTx->CR1 &= ~USART_CR1_M1;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <uartx_init+0x78>)
 8007d36:	401a      	ands	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]
	//Parity disable
	UARTx->CR1 &= ~USART_CR1_PCE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a13      	ldr	r2, [pc, #76]	; (8007d90 <uartx_init+0x7c>)
 8007d42:	401a      	ands	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	601a      	str	r2, [r3, #0]
	//mode Tx_Rx
	UARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	220c      	movs	r2, #12
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	601a      	str	r2, [r3, #0]
	//OverSampling 16bit
	UARTx->CR1 &= ~USART_CR1_OVER8;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a0e      	ldr	r2, [pc, #56]	; (8007d94 <uartx_init+0x80>)
 8007d5a:	401a      	ands	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	601a      	str	r2, [r3, #0]
	//ClockPrescaler no div
	UARTx->PRESC &= USART_PRESC_PRESCALER;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d64:	220f      	movs	r2, #15
 8007d66:	401a      	ands	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	62da      	str	r2, [r3, #44]	; 0x2c
	//set baudrate 115200
	UARTx->BRR = BRR_value;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	60da      	str	r2, [r3, #12]
	//rx interupt enable
	//UARTx->CR1 |= USART_CR1_RXNEIE_RXFNEIE;
	UARTx->CR1 |= USART_CR1_UE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2201      	movs	r2, #1
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	46bd      	mov	sp, r7
 8007d82:	b004      	add	sp, #16
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	03d09000 	.word	0x03d09000
 8007d8c:	efffffff 	.word	0xefffffff
 8007d90:	fffffbff 	.word	0xfffffbff
 8007d94:	ffff7fff 	.word	0xffff7fff

08007d98 <NMEAChecksum>:
#include "config.h"
#include "flash.h"

volatile FLASH_Status FLASHStatus = FLASH_TIMEOUT;

char NMEAChecksum(char *data, int len) {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
	char checksum_value = 0;
 8007da2:	2317      	movs	r3, #23
 8007da4:	18fb      	adds	r3, r7, r3
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]

	int string_length = len;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	60fb      	str	r3, [r7, #12]
	int index = 1; // Skip over the $ at the begining of the sentence
 8007dae:	2301      	movs	r3, #1
 8007db0:	613b      	str	r3, [r7, #16]
	while (index < string_length) {
 8007db2:	e00c      	b.n	8007dce <NMEAChecksum+0x36>
		checksum_value ^= data[index];
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	18d3      	adds	r3, r2, r3
 8007dba:	7819      	ldrb	r1, [r3, #0]
 8007dbc:	2217      	movs	r2, #23
 8007dbe:	18bb      	adds	r3, r7, r2
 8007dc0:	18ba      	adds	r2, r7, r2
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	404a      	eors	r2, r1
 8007dc6:	701a      	strb	r2, [r3, #0]
		index++;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	613b      	str	r3, [r7, #16]
	while (index < string_length) {
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	dbee      	blt.n	8007db4 <NMEAChecksum+0x1c>
	}
	return (checksum_value);
 8007dd6:	2317      	movs	r3, #23
 8007dd8:	18fb      	adds	r3, r7, r3
 8007dda:	781b      	ldrb	r3, [r3, #0]
}
 8007ddc:	0018      	movs	r0, r3
 8007dde:	46bd      	mov	sp, r7
 8007de0:	b006      	add	sp, #24
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <flash_write_config>:

int flash_write_config(uint32_t address, char *pdata, int len) {
 8007de4:	b5b0      	push	{r4, r5, r7, lr}
 8007de6:	b08a      	sub	sp, #40	; 0x28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6178      	str	r0, [r7, #20]
 8007dec:	6139      	str	r1, [r7, #16]
 8007dee:	60fa      	str	r2, [r7, #12]
	uint32_t *pRecord = (uint64_t*) pdata;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t flash_address = address;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	623b      	str	r3, [r7, #32]
	FLASH_Unlock();
 8007df8:	f7ff fdc4 	bl	8007984 <FLASH_Unlock>
	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PROGERR | FLASH_FLAG_WRPRTERR);
 8007dfc:	2019      	movs	r0, #25
 8007dfe:	f7ff feb5 	bl	8007b6c <FLASH_ClearFlag>
	if (FLASH_ErasePage(flash_address) != FLASH_COMPLETE1)
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	0018      	movs	r0, r3
 8007e06:	f7ff fe1f 	bl	8007a48 <FLASH_ErasePage>
 8007e0a:	0003      	movs	r3, r0
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d003      	beq.n	8007e18 <flash_write_config+0x34>
		xprintf("erase flash fail\r\n");
 8007e10:	4b1c      	ldr	r3, [pc, #112]	; (8007e84 <flash_write_config+0xa0>)
 8007e12:	0018      	movs	r0, r3
 8007e14:	f002 fe4c 	bl	800aab0 <xprintf>

	for (int i = 0; i < len; i += 8, pRecord++, flash_address += 8) {
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61fb      	str	r3, [r7, #28]
 8007e1c:	e027      	b.n	8007e6e <flash_write_config+0x8a>
		if (!FLASH_ProgramDoubleWord(flash_address, *pRecord)) {
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	2300      	movs	r3, #0
 8007e26:	607b      	str	r3, [r7, #4]
 8007e28:	6a39      	ldr	r1, [r7, #32]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	0008      	movs	r0, r1
 8007e30:	f7ff fe5e 	bl	8007af0 <FLASH_ProgramDoubleWord>
 8007e34:	1e03      	subs	r3, r0, #0
 8007e36:	d103      	bne.n	8007e40 <flash_write_config+0x5c>
			FLASH_Lock();
 8007e38:	f7ff fd96 	bl	8007968 <FLASH_Lock>
			return 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	e01d      	b.n	8007e7c <flash_write_config+0x98>
		}
		if (*(uint64_t*) flash_address != *pRecord) {
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e48:	6809      	ldr	r1, [r1, #0]
 8007e4a:	000c      	movs	r4, r1
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	000d      	movs	r5, r1
 8007e50:	42a2      	cmp	r2, r4
 8007e52:	d101      	bne.n	8007e58 <flash_write_config+0x74>
 8007e54:	42ab      	cmp	r3, r5
 8007e56:	d001      	beq.n	8007e5c <flash_write_config+0x78>
			return 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	e00f      	b.n	8007e7c <flash_write_config+0x98>
	for (int i = 0; i < len; i += 8, pRecord++, flash_address += 8) {
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	3308      	adds	r3, #8
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	3304      	adds	r3, #4
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	3308      	adds	r3, #8
 8007e6c:	623b      	str	r3, [r7, #32]
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	dbd3      	blt.n	8007e1e <flash_write_config+0x3a>
		}
	}
	FLASH_Lock();
 8007e76:	f7ff fd77 	bl	8007968 <FLASH_Lock>
	return 1;
 8007e7a:	2301      	movs	r3, #1
}
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	b00a      	add	sp, #40	; 0x28
 8007e82:	bdb0      	pop	{r4, r5, r7, pc}
 8007e84:	0800cecc 	.word	0x0800cecc

08007e88 <flash_read_config>:

void flash_read_config(uint32_t address, char *pdata, int len) {
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
	int i;
	uint32_t flash_address = address;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	61bb      	str	r3, [r7, #24]
	uint32_t *ptr = (uint32_t*)pdata;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i+=4,ptr++,flash_address+=4) {
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e00c      	b.n	8007ebc <flash_read_config+0x34>
		*ptr=*(__IO uint32_t *)flash_address;
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < len; i+=4,ptr++,flash_address+=4) {
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	3304      	adds	r3, #4
 8007eae:	61fb      	str	r3, [r7, #28]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	617b      	str	r3, [r7, #20]
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	61bb      	str	r3, [r7, #24]
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	dbee      	blt.n	8007ea2 <flash_read_config+0x1a>
	}
}
 8007ec4:	46c0      	nop			; (mov r8, r8)
 8007ec6:	46c0      	nop			; (mov r8, r8)
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	b008      	add	sp, #32
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <write_config>:

void write_config(void) {
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b0c2      	sub	sp, #264	; 0x108
 8007ed4:	af00      	add	r7, sp, #0
	xprintf("write_config\r\n");
 8007ed6:	4b24      	ldr	r3, [pc, #144]	; (8007f68 <write_config+0x98>)
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f002 fde9 	bl	800aab0 <xprintf>
	g_config.sign = SF_CONFIG_SIGN;
 8007ede:	4b23      	ldr	r3, [pc, #140]	; (8007f6c <write_config+0x9c>)
 8007ee0:	2264      	movs	r2, #100	; 0x64
 8007ee2:	701a      	strb	r2, [r3, #0]
	g_config.configState = 2;
 8007ee4:	4b21      	ldr	r3, [pc, #132]	; (8007f6c <write_config+0x9c>)
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	705a      	strb	r2, [r3, #1]
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 8007eea:	4b21      	ldr	r3, [pc, #132]	; (8007f70 <write_config+0xa0>)
 8007eec:	2284      	movs	r2, #132	; 0x84
 8007eee:	0052      	lsls	r2, r2, #1
 8007ef0:	189b      	adds	r3, r3, r2
 8007ef2:	19db      	adds	r3, r3, r7
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	22fc      	movs	r2, #252	; 0xfc
 8007efc:	2100      	movs	r1, #0
 8007efe:	0018      	movs	r0, r3
 8007f00:	f003 ff15 	bl	800bd2e <memset>
	int pointerSize = sizeof(DEVICE_CONFIG);
 8007f04:	231c      	movs	r3, #28
 8007f06:	1d7a      	adds	r2, r7, #5
 8007f08:	32ff      	adds	r2, #255	; 0xff
 8007f0a:	6013      	str	r3, [r2, #0]
	int size =
 8007f0c:	1d7b      	adds	r3, r7, #5
 8007f0e:	33ff      	adds	r3, #255	; 0xff
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2280      	movs	r2, #128	; 0x80
 8007f14:	0052      	lsls	r2, r2, #1
 8007f16:	4293      	cmp	r3, r2
 8007f18:	dd01      	ble.n	8007f1e <write_config+0x4e>
 8007f1a:	2380      	movs	r3, #128	; 0x80
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	1c7a      	adds	r2, r7, #1
 8007f20:	32ff      	adds	r2, #255	; 0xff
 8007f22:	6013      	str	r3, [r2, #0]
			pointerSize < SKS_CONFIG_RECORD_SIZE ?
					pointerSize : SKS_CONFIG_RECORD_SIZE;
	memcpy(buffConfig, &g_config, size);
 8007f24:	1c7b      	adds	r3, r7, #1
 8007f26:	33ff      	adds	r3, #255	; 0xff
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	4910      	ldr	r1, [pc, #64]	; (8007f6c <write_config+0x9c>)
 8007f2c:	003b      	movs	r3, r7
 8007f2e:	0018      	movs	r0, r3
 8007f30:	f003 fef4 	bl	800bd1c <memcpy>
	buffConfig[SKS_CONFIG_RECORD_SIZE - 1] = NMEAChecksum(buffConfig, SKS_CONFIG_RECORD_SIZE - 2);
 8007f34:	003b      	movs	r3, r7
 8007f36:	21fe      	movs	r1, #254	; 0xfe
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f7ff ff2d 	bl	8007d98 <NMEAChecksum>
 8007f3e:	0003      	movs	r3, r0
 8007f40:	0019      	movs	r1, r3
 8007f42:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <write_config+0xa0>)
 8007f44:	2284      	movs	r2, #132	; 0x84
 8007f46:	0052      	lsls	r2, r2, #1
 8007f48:	189b      	adds	r3, r3, r2
 8007f4a:	19db      	adds	r3, r3, r7
 8007f4c:	22ff      	movs	r2, #255	; 0xff
 8007f4e:	5499      	strb	r1, [r3, r2]
	flash_write_config(BANK1_CONFIG_START_ADDR, buffConfig,	SKS_CONFIG_RECORD_SIZE);
 8007f50:	2380      	movs	r3, #128	; 0x80
 8007f52:	005a      	lsls	r2, r3, #1
 8007f54:	003b      	movs	r3, r7
 8007f56:	4807      	ldr	r0, [pc, #28]	; (8007f74 <write_config+0xa4>)
 8007f58:	0019      	movs	r1, r3
 8007f5a:	f7ff ff43 	bl	8007de4 <flash_write_config>
}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	46bd      	mov	sp, r7
 8007f62:	b042      	add	sp, #264	; 0x108
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	0800cee0 	.word	0x0800cee0
 8007f6c:	20000368 	.word	0x20000368
 8007f70:	fffffef8 	.word	0xfffffef8
 8007f74:	0800f800 	.word	0x0800f800

08007f78 <make_default_config>:

void make_default_config() {
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	af00      	add	r7, sp, #0
	if(g_config.configState != 2) {
 8007f7c:	4b16      	ldr	r3, [pc, #88]	; (8007fd8 <make_default_config+0x60>)
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d026      	beq.n	8007fd2 <make_default_config+0x5a>
		//xprintf(, "1234567890");
		sprintf(g_config.deviceCode, "%s", "1234567890");
 8007f84:	4a15      	ldr	r2, [pc, #84]	; (8007fdc <make_default_config+0x64>)
 8007f86:	4916      	ldr	r1, [pc, #88]	; (8007fe0 <make_default_config+0x68>)
 8007f88:	4b16      	ldr	r3, [pc, #88]	; (8007fe4 <make_default_config+0x6c>)
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	f003 ffcc 	bl	800bf28 <siprintf>
		g_config.emptyValue = 0;
 8007f90:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <make_default_config+0x60>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	611a      	str	r2, [r3, #16]
		g_config.fullValue = 0;
 8007f96:	4b10      	ldr	r3, [pc, #64]	; (8007fd8 <make_default_config+0x60>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	60da      	str	r2, [r3, #12]
		g_config.timeout3D = 3; //3 minutes
 8007f9c:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <make_default_config+0x60>)
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	829a      	strh	r2, [r3, #20]
		g_config.outputMode = 0;
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	; (8007fd8 <make_default_config+0x60>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	759a      	strb	r2, [r3, #22]
		g_config.diffX = 6;
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	; (8007fd8 <make_default_config+0x60>)
 8007faa:	2206      	movs	r2, #6
 8007fac:	761a      	strb	r2, [r3, #24]
		g_config.diffY = 6;
 8007fae:	4b0a      	ldr	r3, [pc, #40]	; (8007fd8 <make_default_config+0x60>)
 8007fb0:	2206      	movs	r2, #6
 8007fb2:	765a      	strb	r2, [r3, #25]
		g_config.interval = 1;
 8007fb4:	4b08      	ldr	r3, [pc, #32]	; (8007fd8 <make_default_config+0x60>)
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	769a      	strb	r2, [r3, #26]

		g_config.configState = 2;
 8007fba:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <make_default_config+0x60>)
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	705a      	strb	r2, [r3, #1]

		g_config.sign = SF_CONFIG_SIGN;
 8007fc0:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <make_default_config+0x60>)
 8007fc2:	2264      	movs	r2, #100	; 0x64
 8007fc4:	701a      	strb	r2, [r3, #0]

		write_config();
 8007fc6:	f7ff ff83 	bl	8007ed0 <write_config>

		xprintf("\r\nWrite default config.\r\n\r\n");
 8007fca:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <make_default_config+0x70>)
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f002 fd6f 	bl	800aab0 <xprintf>
	} else {
	}
}
 8007fd2:	46c0      	nop			; (mov r8, r8)
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000368 	.word	0x20000368
 8007fdc:	0800cef0 	.word	0x0800cef0
 8007fe0:	0800cefc 	.word	0x0800cefc
 8007fe4:	2000036a 	.word	0x2000036a
 8007fe8:	0800cf00 	.word	0x0800cf00

08007fec <load_config>:

void load_config(void) {
 8007fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fee:	b0c5      	sub	sp, #276	; 0x114
 8007ff0:	af00      	add	r7, sp, #0
	xprintf("load_config\r\n");
 8007ff2:	4b3c      	ldr	r3, [pc, #240]	; (80080e4 <load_config+0xf8>)
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f002 fd5b 	bl	800aab0 <xprintf>
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 8007ffa:	4b3b      	ldr	r3, [pc, #236]	; (80080e8 <load_config+0xfc>)
 8007ffc:	2588      	movs	r5, #136	; 0x88
 8007ffe:	006d      	lsls	r5, r5, #1
 8008000:	195b      	adds	r3, r3, r5
 8008002:	19db      	adds	r3, r3, r7
 8008004:	2200      	movs	r2, #0
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	3304      	adds	r3, #4
 800800a:	22fc      	movs	r2, #252	; 0xfc
 800800c:	2100      	movs	r1, #0
 800800e:	0018      	movs	r0, r3
 8008010:	f003 fe8d 	bl	800bd2e <memset>

	flash_read_config(BANK1_CONFIG_START_ADDR, buffConfig,
 8008014:	2380      	movs	r3, #128	; 0x80
 8008016:	005a      	lsls	r2, r3, #1
 8008018:	1d3b      	adds	r3, r7, #4
 800801a:	4834      	ldr	r0, [pc, #208]	; (80080ec <load_config+0x100>)
 800801c:	0019      	movs	r1, r3
 800801e:	f7ff ff33 	bl	8007e88 <flash_read_config>
	SKS_CONFIG_RECORD_SIZE);
	char crc = NMEAChecksum(buffConfig, SKS_CONFIG_RECORD_SIZE - 2);
 8008022:	2610      	movs	r6, #16
 8008024:	36ff      	adds	r6, #255	; 0xff
 8008026:	19bc      	adds	r4, r7, r6
 8008028:	1d3b      	adds	r3, r7, #4
 800802a:	21fe      	movs	r1, #254	; 0xfe
 800802c:	0018      	movs	r0, r3
 800802e:	f7ff feb3 	bl	8007d98 <NMEAChecksum>
 8008032:	0003      	movs	r3, r0
 8008034:	7023      	strb	r3, [r4, #0]
	if ((buffConfig[0] == SF_CONFIG_SIGN) && (crc == buffConfig[SKS_CONFIG_RECORD_SIZE - 2]))
 8008036:	4b2c      	ldr	r3, [pc, #176]	; (80080e8 <load_config+0xfc>)
 8008038:	195b      	adds	r3, r3, r5
 800803a:	19db      	adds	r3, r3, r7
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	2b64      	cmp	r3, #100	; 0x64
 8008040:	d120      	bne.n	8008084 <load_config+0x98>
 8008042:	4b29      	ldr	r3, [pc, #164]	; (80080e8 <load_config+0xfc>)
 8008044:	195b      	adds	r3, r3, r5
 8008046:	19db      	adds	r3, r3, r7
 8008048:	22fe      	movs	r2, #254	; 0xfe
 800804a:	5c9b      	ldrb	r3, [r3, r2]
 800804c:	19ba      	adds	r2, r7, r6
 800804e:	7812      	ldrb	r2, [r2, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d117      	bne.n	8008084 <load_config+0x98>
	{
		int pointerSize = sizeof(DEVICE_CONFIG);
 8008054:	231c      	movs	r3, #28
 8008056:	2284      	movs	r2, #132	; 0x84
 8008058:	0052      	lsls	r2, r2, #1
 800805a:	18b9      	adds	r1, r7, r2
 800805c:	600b      	str	r3, [r1, #0]
		int size =
 800805e:	18bb      	adds	r3, r7, r2
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2280      	movs	r2, #128	; 0x80
 8008064:	0052      	lsls	r2, r2, #1
 8008066:	4293      	cmp	r3, r2
 8008068:	dd01      	ble.n	800806e <load_config+0x82>
 800806a:	2380      	movs	r3, #128	; 0x80
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	1d7a      	adds	r2, r7, #5
 8008070:	32ff      	adds	r2, #255	; 0xff
 8008072:	6013      	str	r3, [r2, #0]
				pointerSize < SKS_CONFIG_RECORD_SIZE ?
						pointerSize : SKS_CONFIG_RECORD_SIZE;
		memcpy(&g_config, buffConfig, size);
 8008074:	1d7b      	adds	r3, r7, #5
 8008076:	33ff      	adds	r3, #255	; 0xff
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	1d39      	adds	r1, r7, #4
 800807c:	4b1c      	ldr	r3, [pc, #112]	; (80080f0 <load_config+0x104>)
 800807e:	0018      	movs	r0, r3
 8008080:	f003 fe4c 	bl	800bd1c <memcpy>
	}

	//check and make default config
	make_default_config();
 8008084:	f7ff ff78 	bl	8007f78 <make_default_config>

	if(g_config.diffX < 3) {
 8008088:	4b19      	ldr	r3, [pc, #100]	; (80080f0 <load_config+0x104>)
 800808a:	7e1b      	ldrb	r3, [r3, #24]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d809      	bhi.n	80080a4 <load_config+0xb8>
		g_config.diffX = 5;
 8008090:	4b17      	ldr	r3, [pc, #92]	; (80080f0 <load_config+0x104>)
 8008092:	2205      	movs	r2, #5
 8008094:	761a      	strb	r2, [r3, #24]

		if(g_config.timeout3D <= 1) {
 8008096:	4b16      	ldr	r3, [pc, #88]	; (80080f0 <load_config+0x104>)
 8008098:	8a9b      	ldrh	r3, [r3, #20]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d802      	bhi.n	80080a4 <load_config+0xb8>
			g_config.timeout3D = 3;
 800809e:	4b14      	ldr	r3, [pc, #80]	; (80080f0 <load_config+0x104>)
 80080a0:	2203      	movs	r2, #3
 80080a2:	829a      	strh	r2, [r3, #20]
		}
	}

	if(g_config.diffY < 3) {
 80080a4:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <load_config+0x104>)
 80080a6:	7e5b      	ldrb	r3, [r3, #25]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d809      	bhi.n	80080c0 <load_config+0xd4>
		g_config.diffY = 5;
 80080ac:	4b10      	ldr	r3, [pc, #64]	; (80080f0 <load_config+0x104>)
 80080ae:	2205      	movs	r2, #5
 80080b0:	765a      	strb	r2, [r3, #25]

		if(g_config.timeout3D <= 1) {
 80080b2:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <load_config+0x104>)
 80080b4:	8a9b      	ldrh	r3, [r3, #20]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d802      	bhi.n	80080c0 <load_config+0xd4>
			g_config.timeout3D = 3;
 80080ba:	4b0d      	ldr	r3, [pc, #52]	; (80080f0 <load_config+0x104>)
 80080bc:	2203      	movs	r2, #3
 80080be:	829a      	strh	r2, [r3, #20]
		}
	}

	if(g_config.diffX > 30) {
 80080c0:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <load_config+0x104>)
 80080c2:	7e1b      	ldrb	r3, [r3, #24]
 80080c4:	2b1e      	cmp	r3, #30
 80080c6:	d902      	bls.n	80080ce <load_config+0xe2>
		g_config.diffX = 5;
 80080c8:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <load_config+0x104>)
 80080ca:	2205      	movs	r2, #5
 80080cc:	761a      	strb	r2, [r3, #24]
	}

	if(g_config.diffY > 30) {
 80080ce:	4b08      	ldr	r3, [pc, #32]	; (80080f0 <load_config+0x104>)
 80080d0:	7e5b      	ldrb	r3, [r3, #25]
 80080d2:	2b1e      	cmp	r3, #30
 80080d4:	d902      	bls.n	80080dc <load_config+0xf0>
		g_config.diffY = 5;
 80080d6:	4b06      	ldr	r3, [pc, #24]	; (80080f0 <load_config+0x104>)
 80080d8:	2205      	movs	r2, #5
 80080da:	765a      	strb	r2, [r3, #25]
	}
}
 80080dc:	46c0      	nop			; (mov r8, r8)
 80080de:	46bd      	mov	sp, r7
 80080e0:	b045      	add	sp, #276	; 0x114
 80080e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e4:	0800cf1c 	.word	0x0800cf1c
 80080e8:	fffffef4 	.word	0xfffffef4
 80080ec:	0800f800 	.word	0x0800f800
 80080f0:	20000368 	.word	0x20000368

080080f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80080f8:	f3bf 8f4f 	dsb	sy
}
 80080fc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80080fe:	4b04      	ldr	r3, [pc, #16]	; (8008110 <__NVIC_SystemReset+0x1c>)
 8008100:	4a04      	ldr	r2, [pc, #16]	; (8008114 <__NVIC_SystemReset+0x20>)
 8008102:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008104:	f3bf 8f4f 	dsb	sy
}
 8008108:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800810a:	46c0      	nop			; (mov r8, r8)
 800810c:	e7fd      	b.n	800810a <__NVIC_SystemReset+0x16>
 800810e:	46c0      	nop			; (mov r8, r8)
 8008110:	e000ed00 	.word	0xe000ed00
 8008114:	05fa0004 	.word	0x05fa0004

08008118 <main>:
static void process_command_from_pc(void);
static void handlerSensorData(void);
void calc_fuel_level(void);
static void output_data(void);
static void LSM6DS3_get_angle(void);
int main(void) {
 8008118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800811a:	46c6      	mov	lr, r8
 800811c:	b500      	push	{lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af06      	add	r7, sp, #24
#ifdef USING_BOOTLOADER
	SCB->VTOR = (uint32_t) APPLICATION_ADDRESS;
 8008122:	4b30      	ldr	r3, [pc, #192]	; (80081e4 <main+0xcc>)
 8008124:	4a30      	ldr	r2, [pc, #192]	; (80081e8 <main+0xd0>)
 8008126:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8008128:	f3bf 8f4f 	dsb	sy
}
 800812c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 800812e:	b662      	cpsie	i
}
 8008130:	46c0      	nop			; (mov r8, r8)
#endif

#if SKS_DEBUG_NOW
	g_appStats.debugOn = 1;
#else
	g_appStats.debugOn = 0;
 8008132:	4b2e      	ldr	r3, [pc, #184]	; (80081ec <main+0xd4>)
 8008134:	224d      	movs	r2, #77	; 0x4d
 8008136:	2100      	movs	r1, #0
 8008138:	5499      	strb	r1, [r3, r2]
#endif

	setup();
 800813a:	f000 f867 	bl	800820c <setup>

	xprintf("\r\nSystem ready (%s)\r\n", APP_VERSION);
 800813e:	4a2c      	ldr	r2, [pc, #176]	; (80081f0 <main+0xd8>)
 8008140:	4b2c      	ldr	r3, [pc, #176]	; (80081f4 <main+0xdc>)
 8008142:	0011      	movs	r1, r2
 8008144:	0018      	movs	r0, r3
 8008146:	f002 fcb3 	bl	800aab0 <xprintf>
	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_config.fullValue, g_config.emptyValue, g_config.timeout3D,
 800814a:	4b2b      	ldr	r3, [pc, #172]	; (80081f8 <main+0xe0>)
 800814c:	68d9      	ldr	r1, [r3, #12]
 800814e:	4b2a      	ldr	r3, [pc, #168]	; (80081f8 <main+0xe0>)
 8008150:	691a      	ldr	r2, [r3, #16]
 8008152:	4b29      	ldr	r3, [pc, #164]	; (80081f8 <main+0xe0>)
 8008154:	8a9b      	ldrh	r3, [r3, #20]
 8008156:	4698      	mov	r8, r3
			g_config.filterMode, g_config.interval, g_config.diffX, g_config.diffY, g_config.deviceCode);
 8008158:	4b27      	ldr	r3, [pc, #156]	; (80081f8 <main+0xe0>)
 800815a:	7ddb      	ldrb	r3, [r3, #23]
	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_config.fullValue, g_config.emptyValue, g_config.timeout3D,
 800815c:	001c      	movs	r4, r3
			g_config.filterMode, g_config.interval, g_config.diffX, g_config.diffY, g_config.deviceCode);
 800815e:	4b26      	ldr	r3, [pc, #152]	; (80081f8 <main+0xe0>)
 8008160:	7e9b      	ldrb	r3, [r3, #26]
	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_config.fullValue, g_config.emptyValue, g_config.timeout3D,
 8008162:	001d      	movs	r5, r3
			g_config.filterMode, g_config.interval, g_config.diffX, g_config.diffY, g_config.deviceCode);
 8008164:	4b24      	ldr	r3, [pc, #144]	; (80081f8 <main+0xe0>)
 8008166:	7e1b      	ldrb	r3, [r3, #24]
	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_config.fullValue, g_config.emptyValue, g_config.timeout3D,
 8008168:	001e      	movs	r6, r3
			g_config.filterMode, g_config.interval, g_config.diffX, g_config.diffY, g_config.deviceCode);
 800816a:	4b23      	ldr	r3, [pc, #140]	; (80081f8 <main+0xe0>)
 800816c:	7e5b      	ldrb	r3, [r3, #25]
	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_config.fullValue, g_config.emptyValue, g_config.timeout3D,
 800816e:	469c      	mov	ip, r3
 8008170:	4822      	ldr	r0, [pc, #136]	; (80081fc <main+0xe4>)
 8008172:	4b23      	ldr	r3, [pc, #140]	; (8008200 <main+0xe8>)
 8008174:	9304      	str	r3, [sp, #16]
 8008176:	4663      	mov	r3, ip
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	9602      	str	r6, [sp, #8]
 800817c:	9501      	str	r5, [sp, #4]
 800817e:	9400      	str	r4, [sp, #0]
 8008180:	4643      	mov	r3, r8
 8008182:	f002 fc95 	bl	800aab0 <xprintf>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8008186:	4b1f      	ldr	r3, [pc, #124]	; (8008204 <main+0xec>)
 8008188:	210c      	movs	r1, #12
 800818a:	0018      	movs	r0, r3
 800818c:	f002 ff4a 	bl	800b024 <HAL_TIM_IC_Start_IT>
	while (1) {
		if (g_appStats.resetNow) {
 8008190:	4b16      	ldr	r3, [pc, #88]	; (80081ec <main+0xd4>)
 8008192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008194:	2b00      	cmp	r3, #0
 8008196:	d008      	beq.n	80081aa <main+0x92>
			if (ulSecCount - g_appStats.resetNow >= 3) {
 8008198:	4b1b      	ldr	r3, [pc, #108]	; (8008208 <main+0xf0>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	4b13      	ldr	r3, [pc, #76]	; (80081ec <main+0xd4>)
 800819e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d901      	bls.n	80081aa <main+0x92>
				NVIC_SystemReset();
 80081a6:	f7ff ffa5 	bl	80080f4 <__NVIC_SystemReset>
				return 0;
			}
		}

		Kalman_SetFlag();
 80081aa:	f7fd ff31 	bl	8006010 <Kalman_SetFlag>
		LSM6DS3_get_angle();
 80081ae:	f001 fca5 	bl	8009afc <LSM6DS3_get_angle>

		if (g_appStats.processPcCommand) {
 80081b2:	4b0e      	ldr	r3, [pc, #56]	; (80081ec <main+0xd4>)
 80081b4:	2266      	movs	r2, #102	; 0x66
 80081b6:	5c9b      	ldrb	r3, [r3, r2]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d005      	beq.n	80081c8 <main+0xb0>
			process_command_from_pc();
 80081bc:	f000 f84e 	bl	800825c <process_command_from_pc>
			g_appStats.processPcCommand = 0;
 80081c0:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <main+0xd4>)
 80081c2:	2266      	movs	r2, #102	; 0x66
 80081c4:	2100      	movs	r1, #0
 80081c6:	5499      	strb	r1, [r3, r2]
		}

		// cleanWDT();

		if (g_appStats.freqUpdated) {
 80081c8:	4b08      	ldr	r3, [pc, #32]	; (80081ec <main+0xd4>)
 80081ca:	2264      	movs	r2, #100	; 0x64
 80081cc:	5c9b      	ldrb	r3, [r3, r2]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d005      	beq.n	80081de <main+0xc6>
			handlerSensorData();
 80081d2:	f000 f87b 	bl	80082cc <handlerSensorData>
			g_appStats.freqUpdated = 0;
 80081d6:	4b05      	ldr	r3, [pc, #20]	; (80081ec <main+0xd4>)
 80081d8:	2264      	movs	r2, #100	; 0x64
 80081da:	2100      	movs	r1, #0
 80081dc:	5499      	strb	r1, [r3, r2]
		}

		output_data();
 80081de:	f000 fb19 	bl	8008814 <output_data>
		if (g_appStats.resetNow) {
 80081e2:	e7d5      	b.n	8008190 <main+0x78>
 80081e4:	e000ed00 	.word	0xe000ed00
 80081e8:	08002800 	.word	0x08002800
 80081ec:	20000384 	.word	0x20000384
 80081f0:	0800cf2c 	.word	0x0800cf2c
 80081f4:	0800cf44 	.word	0x0800cf44
 80081f8:	20000368 	.word	0x20000368
 80081fc:	0800cf5c 	.word	0x0800cf5c
 8008200:	2000036a 	.word	0x2000036a
 8008204:	20000314 	.word	0x20000314
 8008208:	20000360 	.word	0x20000360

0800820c <setup>:

	}
	return 0;
}

static void setup(void) {
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
	systemInit();
 8008210:	f002 fa02 	bl	800a618 <systemInit>
	MX_TIM2_Init();
 8008214:	f001 fcc2 	bl	8009b9c <MX_TIM2_Init>
	gpio_clock_init();
 8008218:	f7ff f9be 	bl	8007598 <gpio_clock_init>
	spi2Init();
 800821c:	f7ff fa60 	bl	80076e0 <spi2Init>
	usart_x0_init(19200);
 8008220:	2396      	movs	r3, #150	; 0x96
 8008222:	01db      	lsls	r3, r3, #7
 8008224:	0018      	movs	r0, r3
 8008226:	f7ff fcaf 	bl	8007b88 <usart_x0_init>
	xdev_out(usart_x0_send);
 800822a:	4b08      	ldr	r3, [pc, #32]	; (800824c <setup+0x40>)
 800822c:	4a08      	ldr	r2, [pc, #32]	; (8008250 <setup+0x44>)
 800822e:	601a      	str	r2, [r3, #0]
	load_config();
 8008230:	f7ff fedc 	bl	8007fec <load_config>
	LSM6DS3_init();
 8008234:	f000 f826 	bl	8008284 <LSM6DS3_init>
	Start_Kalman_Algorithm(10, 1000000.0f);
 8008238:	4a06      	ldr	r2, [pc, #24]	; (8008254 <setup+0x48>)
 800823a:	4b07      	ldr	r3, [pc, #28]	; (8008258 <setup+0x4c>)
 800823c:	1c11      	adds	r1, r2, #0
 800823e:	1c18      	adds	r0, r3, #0
 8008240:	f7fd fc04 	bl	8005a4c <Start_Kalman_Algorithm>
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
}
 8008244:	46c0      	nop			; (mov r8, r8)
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	46c0      	nop			; (mov r8, r8)
 800824c:	20001034 	.word	0x20001034
 8008250:	08007bb9 	.word	0x08007bb9
 8008254:	49742400 	.word	0x49742400
 8008258:	41200000 	.word	0x41200000

0800825c <process_command_from_pc>:

static void process_command_from_pc(void) {
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
	if (buff_cmd[0] == '*') {
 8008260:	4b07      	ldr	r3, [pc, #28]	; (8008280 <process_command_from_pc+0x24>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b2a      	cmp	r3, #42	; 0x2a
 8008268:	d106      	bne.n	8008278 <process_command_from_pc+0x1c>
		server_on_command(SKS_CMD_SOURCE_COM1, buff_cmd, sizeof(buff_cmd));
 800826a:	2380      	movs	r3, #128	; 0x80
 800826c:	005a      	lsls	r2, r3, #1
 800826e:	4b04      	ldr	r3, [pc, #16]	; (8008280 <process_command_from_pc+0x24>)
 8008270:	0019      	movs	r1, r3
 8008272:	2001      	movs	r0, #1
 8008274:	f7fe ff6e 	bl	8007154 <server_on_command>
	}

}
 8008278:	46c0      	nop			; (mov r8, r8)
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	20000e28 	.word	0x20000e28

08008284 <LSM6DS3_init>:

static void LSM6DS3_init(void) {
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
	LSM6DS3_Initialize(LSM6DS3_SPI, LSM6DS3_DEFAULT_TIMEOUT);
 8008288:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <LSM6DS3_init+0x44>)
 800828a:	2164      	movs	r1, #100	; 0x64
 800828c:	0018      	movs	r0, r3
 800828e:	f7fe f919 	bl	80064c4 <LSM6DS3_Initialize>
	delay_ms(200);
 8008292:	20c8      	movs	r0, #200	; 0xc8
 8008294:	f7ff f94e 	bl	8007534 <delay_ms>

	if (LSM6DS3_Detect(10) == LSM6DS3_OK) {
 8008298:	200a      	movs	r0, #10
 800829a:	f7fe f92b 	bl	80064f4 <LSM6DS3_Detect>
 800829e:	1e03      	subs	r3, r0, #0
 80082a0:	d10e      	bne.n	80082c0 <LSM6DS3_init+0x3c>
		if (SKS_MEM_DEBUG)
			xprintf("LSM6DS3 found\r\n");
		if (LSM6DS3_XL_Start(XL_1666Hz, XL_RANGE_16G, XL_FILTER_400Hz) == LSM6DS3_FAIL) {
 80082a2:	2200      	movs	r2, #0
 80082a4:	2101      	movs	r1, #1
 80082a6:	2008      	movs	r0, #8
 80082a8:	f7fe f954 	bl	8006554 <LSM6DS3_XL_Start>
				xprintf("LSM6DS3_XL_Start fail\r\n");
		} else {
			if (SKS_MEM_DEBUG)
				xprintf("LSM6DS3_XL_Start ok\r\n");
		}
		delay_ms(10);
 80082ac:	200a      	movs	r0, #10
 80082ae:	f7ff f941 	bl	8007534 <delay_ms>

		if (LSM6DS3_GS_Start(GS_1666Hz, GS_RANGE_2000dps) != LSM6DS3_OK) {
 80082b2:	2106      	movs	r1, #6
 80082b4:	2008      	movs	r0, #8
 80082b6:	f7fe f9c3 	bl	8006640 <LSM6DS3_GS_Start>
				xprintf("LSM6DS3_GS_Start fail\r\n");
		} else {
			if (SKS_MEM_DEBUG)
				xprintf("LSM6DS3_GS_Start ok\r\n");
		}
		delay_ms(10);
 80082ba:	200a      	movs	r0, #10
 80082bc:	f7ff f93a 	bl	8007534 <delay_ms>
	} else {
		if (SKS_MEM_DEBUG)
			xprintf("LSM6DS3 not found\r\n");
		/* Handle the error */
	}
}
 80082c0:	46c0      	nop			; (mov r8, r8)
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	46c0      	nop			; (mov r8, r8)
 80082c8:	40003800 	.word	0x40003800

080082cc <handlerSensorData>:

static void handlerSensorData(void) {
 80082cc:	b5b0      	push	{r4, r5, r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
	if (freqIdx < MAX_FREQ_AVERAGE && g_appStats.tim15Freq) {
 80082d2:	4b98      	ldr	r3, [pc, #608]	; (8008534 <handlerSensorData+0x268>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	dc10      	bgt.n	80082fc <handlerSensorData+0x30>
 80082da:	4b97      	ldr	r3, [pc, #604]	; (8008538 <handlerSensorData+0x26c>)
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00c      	beq.n	80082fc <handlerSensorData+0x30>
		avrTimFreq[freqIdx] = g_appStats.tim15Freq;
 80082e2:	4b94      	ldr	r3, [pc, #592]	; (8008534 <handlerSensorData+0x268>)
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	4b94      	ldr	r3, [pc, #592]	; (8008538 <handlerSensorData+0x26c>)
 80082e8:	69d9      	ldr	r1, [r3, #28]
 80082ea:	4b94      	ldr	r3, [pc, #592]	; (800853c <handlerSensorData+0x270>)
 80082ec:	0092      	lsls	r2, r2, #2
 80082ee:	50d1      	str	r1, [r2, r3]
		freqIdx++;
 80082f0:	4b90      	ldr	r3, [pc, #576]	; (8008534 <handlerSensorData+0x268>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	4b8f      	ldr	r3, [pc, #572]	; (8008534 <handlerSensorData+0x268>)
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e002      	b.n	8008302 <handlerSensorData+0x36>
	} else {
		freqIdx = 0;
 80082fc:	4b8d      	ldr	r3, [pc, #564]	; (8008534 <handlerSensorData+0x268>)
 80082fe:	2200      	movs	r2, #0
 8008300:	601a      	str	r2, [r3, #0]
	}

	if (freqIdx >= MAX_FREQ_AVERAGE) {
 8008302:	4b8c      	ldr	r3, [pc, #560]	; (8008534 <handlerSensorData+0x268>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b04      	cmp	r3, #4
 8008308:	dd02      	ble.n	8008310 <handlerSensorData+0x44>
		freqIdx = 0;
 800830a:	4b8a      	ldr	r3, [pc, #552]	; (8008534 <handlerSensorData+0x268>)
 800830c:	2200      	movs	r2, #0
 800830e:	601a      	str	r2, [r3, #0]
	}

	uint32_t sumFreq = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	617b      	str	r3, [r7, #20]
	uint32_t avrFreq = 0;
 8008314:	2300      	movs	r3, #0
 8008316:	613b      	str	r3, [r7, #16]
	int count = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_FREQ_AVERAGE; i++) {
 800831c:	2300      	movs	r3, #0
 800831e:	60bb      	str	r3, [r7, #8]
 8008320:	e012      	b.n	8008348 <handlerSensorData+0x7c>
		if (avrTimFreq[i]) {
 8008322:	4b86      	ldr	r3, [pc, #536]	; (800853c <handlerSensorData+0x270>)
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	0092      	lsls	r2, r2, #2
 8008328:	58d3      	ldr	r3, [r2, r3]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d009      	beq.n	8008342 <handlerSensorData+0x76>
			sumFreq += avrTimFreq[i];
 800832e:	4b83      	ldr	r3, [pc, #524]	; (800853c <handlerSensorData+0x270>)
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	0092      	lsls	r2, r2, #2
 8008334:	58d3      	ldr	r3, [r2, r3]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	18d3      	adds	r3, r2, r3
 800833a:	617b      	str	r3, [r7, #20]
			count++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < MAX_FREQ_AVERAGE; i++) {
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	3301      	adds	r3, #1
 8008346:	60bb      	str	r3, [r7, #8]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b04      	cmp	r3, #4
 800834c:	dde9      	ble.n	8008322 <handlerSensorData+0x56>
		}
	}

	if (count > 0) {
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	dd06      	ble.n	8008362 <handlerSensorData+0x96>
		avrFreq = sumFreq / count;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	0019      	movs	r1, r3
 8008358:	6978      	ldr	r0, [r7, #20]
 800835a:	f7fa fae7 	bl	800292c <__udivsi3>
 800835e:	0003      	movs	r3, r0
 8008360:	613b      	str	r3, [r7, #16]

#if SKS_DEBUG_AVG_FREQUENCY
		xprintf("avrFeq: %d, sumFeq: %d, count:%d, currentFrequency: %d, \r\n",avrFreq, sumFreq, count,  g_appStats.tim15Freq);
	#endif

	if (avrFreq && g_appStats.tim15Freq) {
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01e      	beq.n	80083a6 <handlerSensorData+0xda>
 8008368:	4b73      	ldr	r3, [pc, #460]	; (8008538 <handlerSensorData+0x26c>)
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01a      	beq.n	80083a6 <handlerSensorData+0xda>
		if (!g_config.disableEma) {
 8008370:	4b73      	ldr	r3, [pc, #460]	; (8008540 <handlerSensorData+0x274>)
 8008372:	7edb      	ldrb	r3, [r3, #27]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d113      	bne.n	80083a0 <handlerSensorData+0xd4>
			addStock((float) avrFreq, &SensorEMA10);
 8008378:	6938      	ldr	r0, [r7, #16]
 800837a:	f7fb fab9 	bl	80038f0 <__aeabi_ui2f>
 800837e:	1c03      	adds	r3, r0, #0
 8008380:	1c18      	adds	r0, r3, #0
 8008382:	f7fd f8dd 	bl	8005540 <__aeabi_f2d>
 8008386:	4b6f      	ldr	r3, [pc, #444]	; (8008544 <handlerSensorData+0x278>)
 8008388:	001a      	movs	r2, r3
 800838a:	f7fd fb25 	bl	80059d8 <addStock>
			avrFreq = SensorEMA10.lastEMA;
 800838e:	4b6d      	ldr	r3, [pc, #436]	; (8008544 <handlerSensorData+0x278>)
 8008390:	689a      	ldr	r2, [r3, #8]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	0010      	movs	r0, r2
 8008396:	0019      	movs	r1, r3
 8008398:	f7fa fc94 	bl	8002cc4 <__aeabi_d2uiz>
 800839c:	0003      	movs	r3, r0
 800839e:	613b      	str	r3, [r7, #16]
			;
		}
		g_appStats.frequency = avrFreq; //use for set FULL and EMPTY this Frequency
 80083a0:	4b65      	ldr	r3, [pc, #404]	; (8008538 <handlerSensorData+0x26c>)
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	621a      	str	r2, [r3, #32]
	}

	ERROR_STATE error = ERROR_STATE_NORMAL;
 80083a6:	1dfb      	adds	r3, r7, #7
 80083a8:	2200      	movs	r2, #0
 80083aa:	701a      	strb	r2, [r3, #0]

	if (!g_appStats.tim15Freq) {
 80083ac:	4b62      	ldr	r3, [pc, #392]	; (8008538 <handlerSensorData+0x26c>)
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d103      	bne.n	80083bc <handlerSensorData+0xf0>
		error = ERROR_STATE_ZERO;
 80083b4:	1dfb      	adds	r3, r7, #7
 80083b6:	2201      	movs	r2, #1
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	e046      	b.n	800844a <handlerSensorData+0x17e>
	} else if (g_config.emptyValue && avrFreq > (g_config.emptyValue * 1.1)) {
 80083bc:	4b60      	ldr	r3, [pc, #384]	; (8008540 <handlerSensorData+0x274>)
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d019      	beq.n	80083f8 <handlerSensorData+0x12c>
 80083c4:	6938      	ldr	r0, [r7, #16]
 80083c6:	f7fd f895 	bl	80054f4 <__aeabi_ui2d>
 80083ca:	0004      	movs	r4, r0
 80083cc:	000d      	movs	r5, r1
 80083ce:	4b5c      	ldr	r3, [pc, #368]	; (8008540 <handlerSensorData+0x274>)
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	0018      	movs	r0, r3
 80083d4:	f7fd f88e 	bl	80054f4 <__aeabi_ui2d>
 80083d8:	4a5b      	ldr	r2, [pc, #364]	; (8008548 <handlerSensorData+0x27c>)
 80083da:	4b5c      	ldr	r3, [pc, #368]	; (800854c <handlerSensorData+0x280>)
 80083dc:	f7fc fa08 	bl	80047f0 <__aeabi_dmul>
 80083e0:	0002      	movs	r2, r0
 80083e2:	000b      	movs	r3, r1
 80083e4:	0020      	movs	r0, r4
 80083e6:	0029      	movs	r1, r5
 80083e8:	f7fa fc40 	bl	8002c6c <__aeabi_dcmpgt>
 80083ec:	1e03      	subs	r3, r0, #0
 80083ee:	d003      	beq.n	80083f8 <handlerSensorData+0x12c>
		error = ERROR_STATE_OVER_EMPTY;
 80083f0:	1dfb      	adds	r3, r7, #7
 80083f2:	2202      	movs	r2, #2
 80083f4:	701a      	strb	r2, [r3, #0]
 80083f6:	e028      	b.n	800844a <handlerSensorData+0x17e>
	} else if (g_config.fullValue && avrFreq < (g_config.fullValue * 0.9)) {
 80083f8:	4b51      	ldr	r3, [pc, #324]	; (8008540 <handlerSensorData+0x274>)
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d019      	beq.n	8008434 <handlerSensorData+0x168>
 8008400:	6938      	ldr	r0, [r7, #16]
 8008402:	f7fd f877 	bl	80054f4 <__aeabi_ui2d>
 8008406:	0004      	movs	r4, r0
 8008408:	000d      	movs	r5, r1
 800840a:	4b4d      	ldr	r3, [pc, #308]	; (8008540 <handlerSensorData+0x274>)
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	0018      	movs	r0, r3
 8008410:	f7fd f870 	bl	80054f4 <__aeabi_ui2d>
 8008414:	4a4e      	ldr	r2, [pc, #312]	; (8008550 <handlerSensorData+0x284>)
 8008416:	4b4f      	ldr	r3, [pc, #316]	; (8008554 <handlerSensorData+0x288>)
 8008418:	f7fc f9ea 	bl	80047f0 <__aeabi_dmul>
 800841c:	0002      	movs	r2, r0
 800841e:	000b      	movs	r3, r1
 8008420:	0020      	movs	r0, r4
 8008422:	0029      	movs	r1, r5
 8008424:	f7fa fc0e 	bl	8002c44 <__aeabi_dcmplt>
 8008428:	1e03      	subs	r3, r0, #0
 800842a:	d003      	beq.n	8008434 <handlerSensorData+0x168>
		error = ERROR_STATE_BELOW_FULL;
 800842c:	1dfb      	adds	r3, r7, #7
 800842e:	2203      	movs	r2, #3
 8008430:	701a      	strb	r2, [r3, #0]
 8008432:	e00a      	b.n	800844a <handlerSensorData+0x17e>
	} else if (!g_config.fullValue && !g_config.emptyValue) {
 8008434:	4b42      	ldr	r3, [pc, #264]	; (8008540 <handlerSensorData+0x274>)
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <handlerSensorData+0x17e>
 800843c:	4b40      	ldr	r3, [pc, #256]	; (8008540 <handlerSensorData+0x274>)
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <handlerSensorData+0x17e>
		error = ERROR_STATE_NOT_SET_FULL_EMTY;
 8008444:	1dfb      	adds	r3, r7, #7
 8008446:	2204      	movs	r2, #4
 8008448:	701a      	strb	r2, [r3, #0]
	}

	g_appStats.errorState = error;
 800844a:	4b3b      	ldr	r3, [pc, #236]	; (8008538 <handlerSensorData+0x26c>)
 800844c:	1dfa      	adds	r2, r7, #7
 800844e:	2165      	movs	r1, #101	; 0x65
 8008450:	7812      	ldrb	r2, [r2, #0]
 8008452:	545a      	strb	r2, [r3, r1]

	if (error == ERROR_STATE_NORMAL) {
 8008454:	1dfb      	adds	r3, r7, #7
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d166      	bne.n	800852a <handlerSensorData+0x25e>
		if (avrFreq > g_config.emptyValue) {
 800845c:	4b38      	ldr	r3, [pc, #224]	; (8008540 <handlerSensorData+0x274>)
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	429a      	cmp	r2, r3
 8008464:	d903      	bls.n	800846e <handlerSensorData+0x1a2>
			avrFreq = g_config.emptyValue;
 8008466:	4b36      	ldr	r3, [pc, #216]	; (8008540 <handlerSensorData+0x274>)
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	613b      	str	r3, [r7, #16]
 800846c:	e007      	b.n	800847e <handlerSensorData+0x1b2>
		} else if (avrFreq < g_config.fullValue) {
 800846e:	4b34      	ldr	r3, [pc, #208]	; (8008540 <handlerSensorData+0x274>)
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	429a      	cmp	r2, r3
 8008476:	d202      	bcs.n	800847e <handlerSensorData+0x1b2>
			avrFreq = g_config.fullValue;
 8008478:	4b31      	ldr	r3, [pc, #196]	; (8008540 <handlerSensorData+0x274>)
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	613b      	str	r3, [r7, #16]
		}

		if (lastFreg) {
 800847e:	4b36      	ldr	r3, [pc, #216]	; (8008558 <handlerSensorData+0x28c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d037      	beq.n	80084f6 <handlerSensorData+0x22a>
			uint32_t diff = abs(avrFreq - lastFreg);
 8008486:	4b34      	ldr	r3, [pc, #208]	; (8008558 <handlerSensorData+0x28c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	17da      	asrs	r2, r3, #31
 8008490:	189b      	adds	r3, r3, r2
 8008492:	4053      	eors	r3, r2
 8008494:	603b      	str	r3, [r7, #0]
			if (diff > (lastFreg / 10) && cutOff < 10) {
 8008496:	4b30      	ldr	r3, [pc, #192]	; (8008558 <handlerSensorData+0x28c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	210a      	movs	r1, #10
 800849c:	0018      	movs	r0, r3
 800849e:	f7fa fa45 	bl	800292c <__udivsi3>
 80084a2:	0003      	movs	r3, r0
 80084a4:	001a      	movs	r2, r3
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d909      	bls.n	80084c0 <handlerSensorData+0x1f4>
 80084ac:	4b2b      	ldr	r3, [pc, #172]	; (800855c <handlerSensorData+0x290>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b09      	cmp	r3, #9
 80084b2:	dc05      	bgt.n	80084c0 <handlerSensorData+0x1f4>
				cutOff++;
 80084b4:	4b29      	ldr	r3, [pc, #164]	; (800855c <handlerSensorData+0x290>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	4b28      	ldr	r3, [pc, #160]	; (800855c <handlerSensorData+0x290>)
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	e031      	b.n	8008524 <handlerSensorData+0x258>
			} else {
				if (!g_config.disableEma) {
 80084c0:	4b1f      	ldr	r3, [pc, #124]	; (8008540 <handlerSensorData+0x274>)
 80084c2:	7edb      	ldrb	r3, [r3, #27]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10f      	bne.n	80084e8 <handlerSensorData+0x21c>
					addStock(avrFreq, &SensorEMA5);
 80084c8:	6938      	ldr	r0, [r7, #16]
 80084ca:	f7fd f813 	bl	80054f4 <__aeabi_ui2d>
 80084ce:	4b24      	ldr	r3, [pc, #144]	; (8008560 <handlerSensorData+0x294>)
 80084d0:	001a      	movs	r2, r3
 80084d2:	f7fd fa81 	bl	80059d8 <addStock>
					avrFreq = SensorEMA5.lastEMA;
 80084d6:	4b22      	ldr	r3, [pc, #136]	; (8008560 <handlerSensorData+0x294>)
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	0010      	movs	r0, r2
 80084de:	0019      	movs	r1, r3
 80084e0:	f7fa fbf0 	bl	8002cc4 <__aeabi_d2uiz>
 80084e4:	0003      	movs	r3, r0
 80084e6:	613b      	str	r3, [r7, #16]
				}
				g_appStats.emaFrequency = avrFreq;
 80084e8:	4b13      	ldr	r3, [pc, #76]	; (8008538 <handlerSensorData+0x26c>)
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	625a      	str	r2, [r3, #36]	; 0x24
				cutOff = 0;
 80084ee:	4b1b      	ldr	r3, [pc, #108]	; (800855c <handlerSensorData+0x290>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	e016      	b.n	8008524 <handlerSensorData+0x258>
			}
		} else {
			if (!g_config.disableEma) {
 80084f6:	4b12      	ldr	r3, [pc, #72]	; (8008540 <handlerSensorData+0x274>)
 80084f8:	7edb      	ldrb	r3, [r3, #27]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10f      	bne.n	800851e <handlerSensorData+0x252>
				addStock(avrFreq, &SensorEMA5);
 80084fe:	6938      	ldr	r0, [r7, #16]
 8008500:	f7fc fff8 	bl	80054f4 <__aeabi_ui2d>
 8008504:	4b16      	ldr	r3, [pc, #88]	; (8008560 <handlerSensorData+0x294>)
 8008506:	001a      	movs	r2, r3
 8008508:	f7fd fa66 	bl	80059d8 <addStock>
				avrFreq = SensorEMA5.lastEMA;
 800850c:	4b14      	ldr	r3, [pc, #80]	; (8008560 <handlerSensorData+0x294>)
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	0010      	movs	r0, r2
 8008514:	0019      	movs	r1, r3
 8008516:	f7fa fbd5 	bl	8002cc4 <__aeabi_d2uiz>
 800851a:	0003      	movs	r3, r0
 800851c:	613b      	str	r3, [r7, #16]
			}
			g_appStats.emaFrequency = avrFreq;
 800851e:	4b06      	ldr	r3, [pc, #24]	; (8008538 <handlerSensorData+0x26c>)
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	625a      	str	r2, [r3, #36]	; 0x24
		}

		lastFreg = avrFreq;
 8008524:	4b0c      	ldr	r3, [pc, #48]	; (8008558 <handlerSensorData+0x28c>)
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	601a      	str	r2, [r3, #0]
	}
}
 800852a:	46c0      	nop			; (mov r8, r8)
 800852c:	46bd      	mov	sp, r7
 800852e:	b006      	add	sp, #24
 8008530:	bdb0      	pop	{r4, r5, r7, pc}
 8008532:	46c0      	nop			; (mov r8, r8)
 8008534:	20000e1c 	.word	0x20000e1c
 8008538:	20000384 	.word	0x20000384
 800853c:	20000e08 	.word	0x20000e08
 8008540:	20000368 	.word	0x20000368
 8008544:	20000010 	.word	0x20000010
 8008548:	9999999a 	.word	0x9999999a
 800854c:	3ff19999 	.word	0x3ff19999
 8008550:	cccccccd 	.word	0xcccccccd
 8008554:	3feccccc 	.word	0x3feccccc
 8008558:	20000e20 	.word	0x20000e20
 800855c:	20000e24 	.word	0x20000e24
 8008560:	20000000 	.word	0x20000000

08008564 <calc_fuel_level>:

void calc_fuel_level(void) {
 8008564:	b590      	push	{r4, r7, lr}
 8008566:	b091      	sub	sp, #68	; 0x44
 8008568:	af00      	add	r7, sp, #0
	uint32_t diff = abs(g_config.emptyValue - g_config.fullValue);
 800856a:	4ba2      	ldr	r3, [pc, #648]	; (80087f4 <calc_fuel_level+0x290>)
 800856c:	691a      	ldr	r2, [r3, #16]
 800856e:	4ba1      	ldr	r3, [pc, #644]	; (80087f4 <calc_fuel_level+0x290>)
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	17da      	asrs	r2, r3, #31
 8008576:	189b      	adds	r3, r3, r2
 8008578:	4053      	eors	r3, r2
 800857a:	623b      	str	r3, [r7, #32]

	if (g_config.emptyValue > g_config.fullValue && g_config.fullValue && g_config.emptyValue) {
 800857c:	4b9d      	ldr	r3, [pc, #628]	; (80087f4 <calc_fuel_level+0x290>)
 800857e:	691a      	ldr	r2, [r3, #16]
 8008580:	4b9c      	ldr	r3, [pc, #624]	; (80087f4 <calc_fuel_level+0x290>)
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	429a      	cmp	r2, r3
 8008586:	d800      	bhi.n	800858a <calc_fuel_level+0x26>
 8008588:	e12f      	b.n	80087ea <calc_fuel_level+0x286>
 800858a:	4b9a      	ldr	r3, [pc, #616]	; (80087f4 <calc_fuel_level+0x290>)
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d100      	bne.n	8008594 <calc_fuel_level+0x30>
 8008592:	e12a      	b.n	80087ea <calc_fuel_level+0x286>
 8008594:	4b97      	ldr	r3, [pc, #604]	; (80087f4 <calc_fuel_level+0x290>)
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d100      	bne.n	800859e <calc_fuel_level+0x3a>
 800859c:	e125      	b.n	80087ea <calc_fuel_level+0x286>
		int fuelLevel = g_appStats.fuelLevel;
 800859e:	4b96      	ldr	r3, [pc, #600]	; (80087f8 <calc_fuel_level+0x294>)
 80085a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (g_appStats.emaFrequency == 0) {
 80085a4:	4b94      	ldr	r3, [pc, #592]	; (80087f8 <calc_fuel_level+0x294>)
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d103      	bne.n	80085b4 <calc_fuel_level+0x50>
			g_appStats.directFuelLevel = 0;
 80085ac:	4b92      	ldr	r3, [pc, #584]	; (80087f8 <calc_fuel_level+0x294>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80085b2:	e039      	b.n	8008628 <calc_fuel_level+0xc4>
		} else if (g_appStats.emaFrequency <= g_config.fullValue) {
 80085b4:	4b90      	ldr	r3, [pc, #576]	; (80087f8 <calc_fuel_level+0x294>)
 80085b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085b8:	4b8e      	ldr	r3, [pc, #568]	; (80087f4 <calc_fuel_level+0x290>)
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d803      	bhi.n	80085c8 <calc_fuel_level+0x64>
			g_appStats.directFuelLevel = MAX_LEVEL;
 80085c0:	4b8d      	ldr	r3, [pc, #564]	; (80087f8 <calc_fuel_level+0x294>)
 80085c2:	4a8e      	ldr	r2, [pc, #568]	; (80087fc <calc_fuel_level+0x298>)
 80085c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80085c6:	e02f      	b.n	8008628 <calc_fuel_level+0xc4>
		} else if (g_appStats.emaFrequency >= g_config.emptyValue) {
 80085c8:	4b8b      	ldr	r3, [pc, #556]	; (80087f8 <calc_fuel_level+0x294>)
 80085ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085cc:	4b89      	ldr	r3, [pc, #548]	; (80087f4 <calc_fuel_level+0x290>)
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d303      	bcc.n	80085dc <calc_fuel_level+0x78>
			g_appStats.directFuelLevel = 0;
 80085d4:	4b88      	ldr	r3, [pc, #544]	; (80087f8 <calc_fuel_level+0x294>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80085da:	e025      	b.n	8008628 <calc_fuel_level+0xc4>
		} else {
			float nValue = ((((g_config.emptyValue - g_appStats.emaFrequency) * g_config.fullValue)) / (float) (diff * g_appStats.emaFrequency)) * MAX_LEVEL;
 80085dc:	4b85      	ldr	r3, [pc, #532]	; (80087f4 <calc_fuel_level+0x290>)
 80085de:	691a      	ldr	r2, [r3, #16]
 80085e0:	4b85      	ldr	r3, [pc, #532]	; (80087f8 <calc_fuel_level+0x294>)
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	1ad2      	subs	r2, r2, r3
 80085e6:	4b83      	ldr	r3, [pc, #524]	; (80087f4 <calc_fuel_level+0x290>)
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	4353      	muls	r3, r2
 80085ec:	0018      	movs	r0, r3
 80085ee:	f7fb f97f 	bl	80038f0 <__aeabi_ui2f>
 80085f2:	1c04      	adds	r4, r0, #0
 80085f4:	4b80      	ldr	r3, [pc, #512]	; (80087f8 <calc_fuel_level+0x294>)
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	6a3a      	ldr	r2, [r7, #32]
 80085fa:	4353      	muls	r3, r2
 80085fc:	0018      	movs	r0, r3
 80085fe:	f7fb f977 	bl	80038f0 <__aeabi_ui2f>
 8008602:	1c03      	adds	r3, r0, #0
 8008604:	1c19      	adds	r1, r3, #0
 8008606:	1c20      	adds	r0, r4, #0
 8008608:	f7fa fd18 	bl	800303c <__aeabi_fdiv>
 800860c:	1c03      	adds	r3, r0, #0
 800860e:	497c      	ldr	r1, [pc, #496]	; (8008800 <calc_fuel_level+0x29c>)
 8008610:	1c18      	adds	r0, r3, #0
 8008612:	f7fa fe2b 	bl	800326c <__aeabi_fmul>
 8008616:	1c03      	adds	r3, r0, #0
 8008618:	61fb      	str	r3, [r7, #28]
			g_appStats.directFuelLevel = (int) (nValue);
 800861a:	69f8      	ldr	r0, [r7, #28]
 800861c:	f7fb f8fa 	bl	8003814 <__aeabi_f2iz>
 8008620:	0003      	movs	r3, r0
 8008622:	001a      	movs	r2, r3
 8008624:	4b74      	ldr	r3, [pc, #464]	; (80087f8 <calc_fuel_level+0x294>)
 8008626:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		if (g_appStats.errorState == ERROR_STATE_NORMAL) {
 8008628:	4b73      	ldr	r3, [pc, #460]	; (80087f8 <calc_fuel_level+0x294>)
 800862a:	2265      	movs	r2, #101	; 0x65
 800862c:	5c9b      	ldrb	r3, [r3, r2]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d102      	bne.n	8008638 <calc_fuel_level+0xd4>
			fuelLevel = g_appStats.directFuelLevel;
 8008632:	4b71      	ldr	r3, [pc, #452]	; (80087f8 <calc_fuel_level+0x294>)
 8008634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008636:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		if (preErrorState != ERROR_STATE_NORMAL && g_appStats.errorState == ERROR_STATE_NORMAL) {
 8008638:	4b72      	ldr	r3, [pc, #456]	; (8008804 <calc_fuel_level+0x2a0>)
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d008      	beq.n	8008652 <calc_fuel_level+0xee>
 8008640:	4b6d      	ldr	r3, [pc, #436]	; (80087f8 <calc_fuel_level+0x294>)
 8008642:	2265      	movs	r2, #101	; 0x65
 8008644:	5c9b      	ldrb	r3, [r3, r2]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d103      	bne.n	8008652 <calc_fuel_level+0xee>
			lastBackNormal = ulSecCount;
 800864a:	4b6f      	ldr	r3, [pc, #444]	; (8008808 <calc_fuel_level+0x2a4>)
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	4b6f      	ldr	r3, [pc, #444]	; (800880c <calc_fuel_level+0x2a8>)
 8008650:	601a      	str	r2, [r3, #0]
		}

		preErrorState = g_appStats.errorState;
 8008652:	4b69      	ldr	r3, [pc, #420]	; (80087f8 <calc_fuel_level+0x294>)
 8008654:	2265      	movs	r2, #101	; 0x65
 8008656:	5c9a      	ldrb	r2, [r3, r2]
 8008658:	4b6a      	ldr	r3, [pc, #424]	; (8008804 <calc_fuel_level+0x2a0>)
 800865a:	701a      	strb	r2, [r3, #0]
		float roll = (int) g_appStats.lsm6ds3.roll;
 800865c:	4b66      	ldr	r3, [pc, #408]	; (80087f8 <calc_fuel_level+0x294>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	1c18      	adds	r0, r3, #0
 8008662:	f7fb f8d7 	bl	8003814 <__aeabi_f2iz>
 8008666:	0003      	movs	r3, r0
 8008668:	0018      	movs	r0, r3
 800866a:	f7fb f8f3 	bl	8003854 <__aeabi_i2f>
 800866e:	1c03      	adds	r3, r0, #0
 8008670:	61bb      	str	r3, [r7, #24]
		float pitch = (int) g_appStats.lsm6ds3.pitch;
 8008672:	4b61      	ldr	r3, [pc, #388]	; (80087f8 <calc_fuel_level+0x294>)
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	1c18      	adds	r0, r3, #0
 8008678:	f7fb f8cc 	bl	8003814 <__aeabi_f2iz>
 800867c:	0003      	movs	r3, r0
 800867e:	0018      	movs	r0, r3
 8008680:	f7fb f8e8 	bl	8003854 <__aeabi_i2f>
 8008684:	1c03      	adds	r3, r0, #0
 8008686:	617b      	str	r3, [r7, #20]
		float yaw = (int) g_appStats.lsm6ds3.yaw;
 8008688:	4b5b      	ldr	r3, [pc, #364]	; (80087f8 <calc_fuel_level+0x294>)
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	1c18      	adds	r0, r3, #0
 800868e:	f7fb f8c1 	bl	8003814 <__aeabi_f2iz>
 8008692:	0003      	movs	r3, r0
 8008694:	0018      	movs	r0, r3
 8008696:	f7fb f8dd 	bl	8003854 <__aeabi_i2f>
 800869a:	1c03      	adds	r3, r0, #0
 800869c:	613b      	str	r3, [r7, #16]

		if (g_appStats.errorState == ERROR_STATE_NORMAL
 800869e:	4b56      	ldr	r3, [pc, #344]	; (80087f8 <calc_fuel_level+0x294>)
 80086a0:	2265      	movs	r2, #101	; 0x65
 80086a2:	5c9b      	ldrb	r3, [r3, r2]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d156      	bne.n	8008756 <calc_fuel_level+0x1f2>
				&& ((!lastBackNormal && ulSecCount >= 3) || ((uint32_t) (ulSecCount - lastBackNormal) >= SKS_TRUNC_ERROR_SEC))) {
 80086a8:	4b58      	ldr	r3, [pc, #352]	; (800880c <calc_fuel_level+0x2a8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d103      	bne.n	80086b8 <calc_fuel_level+0x154>
 80086b0:	4b55      	ldr	r3, [pc, #340]	; (8008808 <calc_fuel_level+0x2a4>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d806      	bhi.n	80086c6 <calc_fuel_level+0x162>
 80086b8:	4b53      	ldr	r3, [pc, #332]	; (8008808 <calc_fuel_level+0x2a4>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	4b53      	ldr	r3, [pc, #332]	; (800880c <calc_fuel_level+0x2a8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d947      	bls.n	8008756 <calc_fuel_level+0x1f2>
			int minSecCount = 0xFFFFFFFF;
 80086c6:	2301      	movs	r3, #1
 80086c8:	425b      	negs	r3, r3
 80086ca:	63bb      	str	r3, [r7, #56]	; 0x38
			int levelIdx = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	637b      	str	r3, [r7, #52]	; 0x34
			for (int i = 0; i < MAX_STORE_LEVEL; i++) {
 80086d0:	2300      	movs	r3, #0
 80086d2:	633b      	str	r3, [r7, #48]	; 0x30
 80086d4:	e01b      	b.n	800870e <calc_fuel_level+0x1aa>
				STORE_LEVEL *p = &storeLevels[i];
 80086d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d8:	0013      	movs	r3, r2
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	1a9b      	subs	r3, r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4a4b      	ldr	r2, [pc, #300]	; (8008810 <calc_fuel_level+0x2ac>)
 80086e2:	189b      	adds	r3, r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]
				if (!p->secCount) {
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <calc_fuel_level+0x190>
					levelIdx = i;
 80086ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80086f2:	e00f      	b.n	8008714 <calc_fuel_level+0x1b0>
				} else if (p->secCount < minSecCount) {
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d204      	bcs.n	8008708 <calc_fuel_level+0x1a4>
					levelIdx = i;
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	637b      	str	r3, [r7, #52]	; 0x34
					minSecCount = p->secCount;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	63bb      	str	r3, [r7, #56]	; 0x38
			for (int i = 0; i < MAX_STORE_LEVEL; i++) {
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	3301      	adds	r3, #1
 800870c:	633b      	str	r3, [r7, #48]	; 0x30
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	2b1d      	cmp	r3, #29
 8008712:	dde0      	ble.n	80086d6 <calc_fuel_level+0x172>
				}
			}

			STORE_LEVEL *p = &storeLevels[levelIdx];
 8008714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008716:	0013      	movs	r3, r2
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	1a9b      	subs	r3, r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4a3c      	ldr	r2, [pc, #240]	; (8008810 <calc_fuel_level+0x2ac>)
 8008720:	189b      	adds	r3, r3, r2
 8008722:	60bb      	str	r3, [r7, #8]
			p->level = fuelLevel;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008728:	619a      	str	r2, [r3, #24]
			p->secCount = ulSecCount;
 800872a:	4b37      	ldr	r3, [pc, #220]	; (8008808 <calc_fuel_level+0x2a4>)
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	601a      	str	r2, [r3, #0]
			p->x = roll;
 8008732:	69b8      	ldr	r0, [r7, #24]
 8008734:	f7fb f86e 	bl	8003814 <__aeabi_f2iz>
 8008738:	0002      	movs	r2, r0
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	60da      	str	r2, [r3, #12]
			p->y = pitch;
 800873e:	6978      	ldr	r0, [r7, #20]
 8008740:	f7fb f868 	bl	8003814 <__aeabi_f2iz>
 8008744:	0002      	movs	r2, r0
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	611a      	str	r2, [r3, #16]
			p->z = yaw;
 800874a:	6938      	ldr	r0, [r7, #16]
 800874c:	f7fb f862 	bl	8003814 <__aeabi_f2iz>
 8008750:	0002      	movs	r2, r0
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	615a      	str	r2, [r3, #20]
		}

		int maxSecCount = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	62fb      	str	r3, [r7, #44]	; 0x2c
		int level = -1;
 800875a:	2301      	movs	r3, #1
 800875c:	425b      	negs	r3, r3
 800875e:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int i = 0; i < MAX_STORE_LEVEL; i++) {
 8008760:	2300      	movs	r3, #0
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
 8008764:	e034      	b.n	80087d0 <calc_fuel_level+0x26c>
			STORE_LEVEL *p = &storeLevels[i];
 8008766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008768:	0013      	movs	r3, r2
 800876a:	00db      	lsls	r3, r3, #3
 800876c:	1a9b      	subs	r3, r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4a27      	ldr	r2, [pc, #156]	; (8008810 <calc_fuel_level+0x2ac>)
 8008772:	189b      	adds	r3, r3, r2
 8008774:	607b      	str	r3, [r7, #4]
			if (p->secCount) {
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d025      	beq.n	80087ca <calc_fuel_level+0x266>
				if (p->secCount < (uint32_t) (ulSecCount - SKS_TRUNC_ERROR_SEC)) {
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4b21      	ldr	r3, [pc, #132]	; (8008808 <calc_fuel_level+0x2a4>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3b05      	subs	r3, #5
 8008788:	429a      	cmp	r2, r3
 800878a:	d20f      	bcs.n	80087ac <calc_fuel_level+0x248>
					if (p->secCount > maxSecCount && p->level) {
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008792:	429a      	cmp	r2, r3
 8008794:	d919      	bls.n	80087ca <calc_fuel_level+0x266>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d015      	beq.n	80087ca <calc_fuel_level+0x266>
						maxSecCount = p->secCount;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	62fb      	str	r3, [r7, #44]	; 0x2c
						level = p->level;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087aa:	e00e      	b.n	80087ca <calc_fuel_level+0x266>
					}
				} else if (g_appStats.errorState != ERROR_STATE_NORMAL && p->secCount >= (uint32_t) (ulSecCount - SKS_TRUNC_ERROR_SEC)) {
 80087ac:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <calc_fuel_level+0x294>)
 80087ae:	2265      	movs	r2, #101	; 0x65
 80087b0:	5c9b      	ldrb	r3, [r3, r2]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d009      	beq.n	80087ca <calc_fuel_level+0x266>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	4b13      	ldr	r3, [pc, #76]	; (8008808 <calc_fuel_level+0x2a4>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3b05      	subs	r3, #5
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d302      	bcc.n	80087ca <calc_fuel_level+0x266>
					p->secCount = 0;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < MAX_STORE_LEVEL; i++) {
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	3301      	adds	r3, #1
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	2b1d      	cmp	r3, #29
 80087d4:	ddc7      	ble.n	8008766 <calc_fuel_level+0x202>
				}
			}
		}

		if (level != -1) {
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	3301      	adds	r3, #1
 80087da:	d006      	beq.n	80087ea <calc_fuel_level+0x286>
			g_appStats.fuelLevel = level;
 80087dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087de:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <calc_fuel_level+0x294>)
 80087e0:	629a      	str	r2, [r3, #40]	; 0x28
			g_appStats.lastLevelSecCount = ulSecCount;
 80087e2:	4b09      	ldr	r3, [pc, #36]	; (8008808 <calc_fuel_level+0x2a4>)
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <calc_fuel_level+0x294>)
 80087e8:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
}
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	46bd      	mov	sp, r7
 80087ee:	b011      	add	sp, #68	; 0x44
 80087f0:	bd90      	pop	{r4, r7, pc}
 80087f2:	46c0      	nop			; (mov r8, r8)
 80087f4:	20000368 	.word	0x20000368
 80087f8:	20000384 	.word	0x20000384
 80087fc:	000003ff 	.word	0x000003ff
 8008800:	447fc000 	.word	0x447fc000
 8008804:	20000e00 	.word	0x20000e00
 8008808:	20000360 	.word	0x20000360
 800880c:	20000e04 	.word	0x20000e04
 8008810:	20000a88 	.word	0x20000a88

08008814 <output_data>:
static void output_data(void) {
 8008814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008816:	46de      	mov	lr, fp
 8008818:	4657      	mov	r7, sl
 800881a:	464e      	mov	r6, r9
 800881c:	4645      	mov	r5, r8
 800881e:	b5e0      	push	{r5, r6, r7, lr}
 8008820:	b0cd      	sub	sp, #308	; 0x134
 8008822:	af14      	add	r7, sp, #80	; 0x50
	if (ulSecCount < 2) {
 8008824:	4b45      	ldr	r3, [pc, #276]	; (800893c <output_data+0x128>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d801      	bhi.n	8008830 <output_data+0x1c>
 800882c:	f001 f94a 	bl	8009ac4 <output_data+0x12b0>
	 if(lastGetTemper != ulSecCount) {
	 g_appStats.internalTemp = getTemperature();
	 lastGetTemper = ulSecCount;
	 }*/

	int roll = (int) g_appStats.lsm6ds3.roll;
 8008830:	4b43      	ldr	r3, [pc, #268]	; (8008940 <output_data+0x12c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	1c18      	adds	r0, r3, #0
 8008836:	f7fa ffed 	bl	8003814 <__aeabi_f2iz>
 800883a:	0003      	movs	r3, r0
 800883c:	647b      	str	r3, [r7, #68]	; 0x44
	int pitch = (int) g_appStats.lsm6ds3.pitch;
 800883e:	4b40      	ldr	r3, [pc, #256]	; (8008940 <output_data+0x12c>)
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	1c18      	adds	r0, r3, #0
 8008844:	f7fa ffe6 	bl	8003814 <__aeabi_f2iz>
 8008848:	0003      	movs	r3, r0
 800884a:	643b      	str	r3, [r7, #64]	; 0x40
	int yaw = (int) g_appStats.lsm6ds3.yaw;
 800884c:	4b3c      	ldr	r3, [pc, #240]	; (8008940 <output_data+0x12c>)
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	1c18      	adds	r0, r3, #0
 8008852:	f7fa ffdf 	bl	8003814 <__aeabi_f2iz>
 8008856:	0003      	movs	r3, r0
 8008858:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (ulSecCount != lastStoreAverage) {
 800885a:	4b38      	ldr	r3, [pc, #224]	; (800893c <output_data+0x128>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	4b39      	ldr	r3, [pc, #228]	; (8008944 <output_data+0x130>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	429a      	cmp	r2, r3
 8008864:	d101      	bne.n	800886a <output_data+0x56>
 8008866:	f001 f92e 	bl	8009ac6 <output_data+0x12b2>
		calc_fuel_level();
 800886a:	f7ff fe7b 	bl	8008564 <calc_fuel_level>

		int fuelLevel = g_appStats.fuelLevel;
 800886e:	4b34      	ldr	r3, [pc, #208]	; (8008940 <output_data+0x12c>)
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	22c4      	movs	r2, #196	; 0xc4
 8008874:	2118      	movs	r1, #24
 8008876:	1852      	adds	r2, r2, r1
 8008878:	19d2      	adds	r2, r2, r7
 800887a:	6013      	str	r3, [r2, #0]

		//store min 3D level
		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 800887c:	2300      	movs	r3, #0
 800887e:	22c0      	movs	r2, #192	; 0xc0
 8008880:	1852      	adds	r2, r2, r1
 8008882:	19d2      	adds	r2, r2, r7
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	e06c      	b.n	8008962 <output_data+0x14e>
			if (abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 8008888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888a:	17da      	asrs	r2, r3, #31
 800888c:	189b      	adds	r3, r3, r2
 800888e:	4053      	eors	r3, r2
 8008890:	4a2d      	ldr	r2, [pc, #180]	; (8008948 <output_data+0x134>)
 8008892:	7e12      	ldrb	r2, [r2, #24]
 8008894:	4293      	cmp	r3, r2
 8008896:	dc5b      	bgt.n	8008950 <output_data+0x13c>
 8008898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800889a:	17da      	asrs	r2, r3, #31
 800889c:	189b      	adds	r3, r3, r2
 800889e:	4053      	eors	r3, r2
 80088a0:	4a29      	ldr	r2, [pc, #164]	; (8008948 <output_data+0x134>)
 80088a2:	7e52      	ldrb	r2, [r2, #25]
 80088a4:	4293      	cmp	r3, r2
 80088a6:	dc53      	bgt.n	8008950 <output_data+0x13c>
				STORE_LEVEL *pMin = &min3DFreq[i];
 80088a8:	23c0      	movs	r3, #192	; 0xc0
 80088aa:	2218      	movs	r2, #24
 80088ac:	189b      	adds	r3, r3, r2
 80088ae:	19db      	adds	r3, r3, r7
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	0013      	movs	r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	1a9b      	subs	r3, r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4a24      	ldr	r2, [pc, #144]	; (800894c <output_data+0x138>)
 80088bc:	189b      	adds	r3, r3, r2
 80088be:	63bb      	str	r3, [r7, #56]	; 0x38
				if (pMin->secCount == 0 || (ulSecCount - pMin->secCount) > (MAX_NO_AVERAGE * 2) || (abs(roll) <= abs(pMin->x) && abs(pitch) <= abs(pMin->y))) {
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d01c      	beq.n	8008902 <output_data+0xee>
 80088c8:	4b1c      	ldr	r3, [pc, #112]	; (800893c <output_data+0x128>)
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b1e      	cmp	r3, #30
 80088d4:	d815      	bhi.n	8008902 <output_data+0xee>
 80088d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d8:	17d9      	asrs	r1, r3, #31
 80088da:	185a      	adds	r2, r3, r1
 80088dc:	404a      	eors	r2, r1
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	17d9      	asrs	r1, r3, #31
 80088e4:	185b      	adds	r3, r3, r1
 80088e6:	404b      	eors	r3, r1
 80088e8:	429a      	cmp	r2, r3
 80088ea:	dc31      	bgt.n	8008950 <output_data+0x13c>
 80088ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ee:	17d9      	asrs	r1, r3, #31
 80088f0:	185a      	adds	r2, r3, r1
 80088f2:	404a      	eors	r2, r1
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	17d9      	asrs	r1, r3, #31
 80088fa:	185b      	adds	r3, r3, r1
 80088fc:	404b      	eors	r3, r1
 80088fe:	429a      	cmp	r2, r3
 8008900:	dc26      	bgt.n	8008950 <output_data+0x13c>
					pMin->secCount = ulSecCount;
 8008902:	4b0e      	ldr	r3, [pc, #56]	; (800893c <output_data+0x128>)
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008908:	601a      	str	r2, [r3, #0]
					pMin->frequency = g_appStats.emaFrequency;
 800890a:	4b0d      	ldr	r3, [pc, #52]	; (8008940 <output_data+0x12c>)
 800890c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	605a      	str	r2, [r3, #4]
					pMin->level = fuelLevel;
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	22c4      	movs	r2, #196	; 0xc4
 8008916:	2118      	movs	r1, #24
 8008918:	1852      	adds	r2, r2, r1
 800891a:	19d2      	adds	r2, r2, r7
 800891c:	6812      	ldr	r2, [r2, #0]
 800891e:	619a      	str	r2, [r3, #24]
					pMin->vibration = g_appStats.vibrInt;
 8008920:	4b07      	ldr	r3, [pc, #28]	; (8008940 <output_data+0x12c>)
 8008922:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	609a      	str	r2, [r3, #8]
					pMin->x = roll;
 8008928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800892c:	60da      	str	r2, [r3, #12]
					pMin->y = pitch;
 800892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008930:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008932:	611a      	str	r2, [r3, #16]
					pMin->z = yaw;
 8008934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008938:	615a      	str	r2, [r3, #20]
					break;
 800893a:	e019      	b.n	8008970 <output_data+0x15c>
 800893c:	20000360 	.word	0x20000360
 8008940:	20000384 	.word	0x20000384
 8008944:	200003f4 	.word	0x200003f4
 8008948:	20000368 	.word	0x20000368
 800894c:	2000059c 	.word	0x2000059c
		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 8008950:	22c0      	movs	r2, #192	; 0xc0
 8008952:	2118      	movs	r1, #24
 8008954:	1853      	adds	r3, r2, r1
 8008956:	19db      	adds	r3, r3, r7
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3301      	adds	r3, #1
 800895c:	1852      	adds	r2, r2, r1
 800895e:	19d2      	adds	r2, r2, r7
 8008960:	6013      	str	r3, [r2, #0]
 8008962:	23c0      	movs	r3, #192	; 0xc0
 8008964:	2218      	movs	r2, #24
 8008966:	189b      	adds	r3, r3, r2
 8008968:	19db      	adds	r3, r3, r7
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b0e      	cmp	r3, #14
 800896e:	dd8b      	ble.n	8008888 <output_data+0x74>
			}
		}
		//end store min 3D level

		//store same 3d level
		if (sameIdx >= MAX_NO_AVERAGE) {
 8008970:	4be5      	ldr	r3, [pc, #916]	; (8008d08 <output_data+0x4f4>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b0e      	cmp	r3, #14
 8008976:	d902      	bls.n	800897e <output_data+0x16a>
			sameIdx = 0;
 8008978:	4be3      	ldr	r3, [pc, #908]	; (8008d08 <output_data+0x4f4>)
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
		}

		if (abs(roll - prePulse.x) <= 1 && abs(pitch - prePulse.y) <= 1 && abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 800897e:	4be3      	ldr	r3, [pc, #908]	; (8008d0c <output_data+0x4f8>)
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	3301      	adds	r3, #1
 8008988:	da00      	bge.n	800898c <output_data+0x178>
 800898a:	e081      	b.n	8008a90 <output_data+0x27c>
 800898c:	4bdf      	ldr	r3, [pc, #892]	; (8008d0c <output_data+0x4f8>)
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	2b01      	cmp	r3, #1
 8008996:	dd00      	ble.n	800899a <output_data+0x186>
 8008998:	e07a      	b.n	8008a90 <output_data+0x27c>
 800899a:	4bdc      	ldr	r3, [pc, #880]	; (8008d0c <output_data+0x4f8>)
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	3301      	adds	r3, #1
 80089a4:	db74      	blt.n	8008a90 <output_data+0x27c>
 80089a6:	4bd9      	ldr	r3, [pc, #868]	; (8008d0c <output_data+0x4f8>)
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	dc6e      	bgt.n	8008a90 <output_data+0x27c>
 80089b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b4:	17da      	asrs	r2, r3, #31
 80089b6:	189b      	adds	r3, r3, r2
 80089b8:	4053      	eors	r3, r2
 80089ba:	4ad5      	ldr	r2, [pc, #852]	; (8008d10 <output_data+0x4fc>)
 80089bc:	7e12      	ldrb	r2, [r2, #24]
 80089be:	4293      	cmp	r3, r2
 80089c0:	dc66      	bgt.n	8008a90 <output_data+0x27c>
 80089c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c4:	17da      	asrs	r2, r3, #31
 80089c6:	189b      	adds	r3, r3, r2
 80089c8:	4053      	eors	r3, r2
 80089ca:	4ad1      	ldr	r2, [pc, #836]	; (8008d10 <output_data+0x4fc>)
 80089cc:	7e52      	ldrb	r2, [r2, #25]
 80089ce:	4293      	cmp	r3, r2
 80089d0:	dc5e      	bgt.n	8008a90 <output_data+0x27c>
			same3DFreq[sameIdx].secCount = ulSecCount;
 80089d2:	4bcd      	ldr	r3, [pc, #820]	; (8008d08 <output_data+0x4f4>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	0018      	movs	r0, r3
 80089d8:	4bce      	ldr	r3, [pc, #824]	; (8008d14 <output_data+0x500>)
 80089da:	6819      	ldr	r1, [r3, #0]
 80089dc:	4ace      	ldr	r2, [pc, #824]	; (8008d18 <output_data+0x504>)
 80089de:	0003      	movs	r3, r0
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	1a1b      	subs	r3, r3, r0
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	5099      	str	r1, [r3, r2]
			same3DFreq[sameIdx].frequency = g_appStats.emaFrequency;
 80089e8:	4bc7      	ldr	r3, [pc, #796]	; (8008d08 <output_data+0x4f4>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	0018      	movs	r0, r3
 80089ee:	4bcb      	ldr	r3, [pc, #812]	; (8008d1c <output_data+0x508>)
 80089f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089f2:	49c9      	ldr	r1, [pc, #804]	; (8008d18 <output_data+0x504>)
 80089f4:	0003      	movs	r3, r0
 80089f6:	00db      	lsls	r3, r3, #3
 80089f8:	1a1b      	subs	r3, r3, r0
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	18cb      	adds	r3, r1, r3
 80089fe:	3304      	adds	r3, #4
 8008a00:	601a      	str	r2, [r3, #0]
			same3DFreq[sameIdx].level = fuelLevel;
 8008a02:	4bc1      	ldr	r3, [pc, #772]	; (8008d08 <output_data+0x4f4>)
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	0019      	movs	r1, r3
 8008a08:	4ac3      	ldr	r2, [pc, #780]	; (8008d18 <output_data+0x504>)
 8008a0a:	000b      	movs	r3, r1
 8008a0c:	00db      	lsls	r3, r3, #3
 8008a0e:	1a5b      	subs	r3, r3, r1
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	18d3      	adds	r3, r2, r3
 8008a14:	3318      	adds	r3, #24
 8008a16:	22c4      	movs	r2, #196	; 0xc4
 8008a18:	2118      	movs	r1, #24
 8008a1a:	1852      	adds	r2, r2, r1
 8008a1c:	19d2      	adds	r2, r2, r7
 8008a1e:	6812      	ldr	r2, [r2, #0]
 8008a20:	601a      	str	r2, [r3, #0]
			same3DFreq[sameIdx].vibration = g_appStats.vibrInt;
 8008a22:	4bb9      	ldr	r3, [pc, #740]	; (8008d08 <output_data+0x4f4>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	0018      	movs	r0, r3
 8008a28:	4bbc      	ldr	r3, [pc, #752]	; (8008d1c <output_data+0x508>)
 8008a2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a2c:	49ba      	ldr	r1, [pc, #744]	; (8008d18 <output_data+0x504>)
 8008a2e:	0003      	movs	r3, r0
 8008a30:	00db      	lsls	r3, r3, #3
 8008a32:	1a1b      	subs	r3, r3, r0
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	18cb      	adds	r3, r1, r3
 8008a38:	3308      	adds	r3, #8
 8008a3a:	601a      	str	r2, [r3, #0]
			same3DFreq[sameIdx].x = roll;
 8008a3c:	4bb2      	ldr	r3, [pc, #712]	; (8008d08 <output_data+0x4f4>)
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	0019      	movs	r1, r3
 8008a42:	4ab5      	ldr	r2, [pc, #724]	; (8008d18 <output_data+0x504>)
 8008a44:	000b      	movs	r3, r1
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	1a5b      	subs	r3, r3, r1
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	18d3      	adds	r3, r2, r3
 8008a4e:	330c      	adds	r3, #12
 8008a50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a52:	601a      	str	r2, [r3, #0]
			same3DFreq[sameIdx].y = pitch;
 8008a54:	4bac      	ldr	r3, [pc, #688]	; (8008d08 <output_data+0x4f4>)
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	0019      	movs	r1, r3
 8008a5a:	4aaf      	ldr	r2, [pc, #700]	; (8008d18 <output_data+0x504>)
 8008a5c:	000b      	movs	r3, r1
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	1a5b      	subs	r3, r3, r1
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	18d3      	adds	r3, r2, r3
 8008a66:	3310      	adds	r3, #16
 8008a68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a6a:	601a      	str	r2, [r3, #0]
			same3DFreq[sameIdx].z = yaw;
 8008a6c:	4ba6      	ldr	r3, [pc, #664]	; (8008d08 <output_data+0x4f4>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	0019      	movs	r1, r3
 8008a72:	4aa9      	ldr	r2, [pc, #676]	; (8008d18 <output_data+0x504>)
 8008a74:	000b      	movs	r3, r1
 8008a76:	00db      	lsls	r3, r3, #3
 8008a78:	1a5b      	subs	r3, r3, r1
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	18d3      	adds	r3, r2, r3
 8008a7e:	3314      	adds	r3, #20
 8008a80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a82:	601a      	str	r2, [r3, #0]
			sameIdx++;
 8008a84:	4ba0      	ldr	r3, [pc, #640]	; (8008d08 <output_data+0x4f4>)
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	4b9e      	ldr	r3, [pc, #632]	; (8008d08 <output_data+0x4f4>)
 8008a8e:	701a      	strb	r2, [r3, #0]
		}

		prePulse.x = roll;
 8008a90:	4b9e      	ldr	r3, [pc, #632]	; (8008d0c <output_data+0x4f8>)
 8008a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a94:	60da      	str	r2, [r3, #12]
		prePulse.y = pitch;
 8008a96:	4b9d      	ldr	r3, [pc, #628]	; (8008d0c <output_data+0x4f8>)
 8008a98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a9a:	611a      	str	r2, [r3, #16]
		//end store same 3d level

		//store average level
		if (idx >= MAX_NO_AVERAGE) {
 8008a9c:	4ba0      	ldr	r3, [pc, #640]	; (8008d20 <output_data+0x50c>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b0e      	cmp	r3, #14
 8008aa2:	d902      	bls.n	8008aaa <output_data+0x296>
			idx = 0;
 8008aa4:	4b9e      	ldr	r3, [pc, #632]	; (8008d20 <output_data+0x50c>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	701a      	strb	r2, [r3, #0]
		}

		avrFreq[idx].secCount = ulSecCount;
 8008aaa:	4b9d      	ldr	r3, [pc, #628]	; (8008d20 <output_data+0x50c>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	0018      	movs	r0, r3
 8008ab0:	4b98      	ldr	r3, [pc, #608]	; (8008d14 <output_data+0x500>)
 8008ab2:	6819      	ldr	r1, [r3, #0]
 8008ab4:	4a9b      	ldr	r2, [pc, #620]	; (8008d24 <output_data+0x510>)
 8008ab6:	0003      	movs	r3, r0
 8008ab8:	00db      	lsls	r3, r3, #3
 8008aba:	1a1b      	subs	r3, r3, r0
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	5099      	str	r1, [r3, r2]
		avrFreq[idx].frequency = g_appStats.emaFrequency;
 8008ac0:	4b97      	ldr	r3, [pc, #604]	; (8008d20 <output_data+0x50c>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	4b95      	ldr	r3, [pc, #596]	; (8008d1c <output_data+0x508>)
 8008ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008aca:	4996      	ldr	r1, [pc, #600]	; (8008d24 <output_data+0x510>)
 8008acc:	0003      	movs	r3, r0
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	1a1b      	subs	r3, r3, r0
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	18cb      	adds	r3, r1, r3
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	601a      	str	r2, [r3, #0]
		avrFreq[idx].level = fuelLevel;
 8008ada:	4b91      	ldr	r3, [pc, #580]	; (8008d20 <output_data+0x50c>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	0019      	movs	r1, r3
 8008ae0:	4a90      	ldr	r2, [pc, #576]	; (8008d24 <output_data+0x510>)
 8008ae2:	000b      	movs	r3, r1
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	1a5b      	subs	r3, r3, r1
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	18d3      	adds	r3, r2, r3
 8008aec:	3318      	adds	r3, #24
 8008aee:	22c4      	movs	r2, #196	; 0xc4
 8008af0:	2118      	movs	r1, #24
 8008af2:	1852      	adds	r2, r2, r1
 8008af4:	19d2      	adds	r2, r2, r7
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	601a      	str	r2, [r3, #0]
		avrFreq[idx].vibration = g_appStats.vibrInt;
 8008afa:	4b89      	ldr	r3, [pc, #548]	; (8008d20 <output_data+0x50c>)
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	0018      	movs	r0, r3
 8008b00:	4b86      	ldr	r3, [pc, #536]	; (8008d1c <output_data+0x508>)
 8008b02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b04:	4987      	ldr	r1, [pc, #540]	; (8008d24 <output_data+0x510>)
 8008b06:	0003      	movs	r3, r0
 8008b08:	00db      	lsls	r3, r3, #3
 8008b0a:	1a1b      	subs	r3, r3, r0
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	18cb      	adds	r3, r1, r3
 8008b10:	3308      	adds	r3, #8
 8008b12:	601a      	str	r2, [r3, #0]
		avrFreq[idx].x = roll;
 8008b14:	4b82      	ldr	r3, [pc, #520]	; (8008d20 <output_data+0x50c>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	0019      	movs	r1, r3
 8008b1a:	4a82      	ldr	r2, [pc, #520]	; (8008d24 <output_data+0x510>)
 8008b1c:	000b      	movs	r3, r1
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	1a5b      	subs	r3, r3, r1
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	18d3      	adds	r3, r2, r3
 8008b26:	330c      	adds	r3, #12
 8008b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b2a:	601a      	str	r2, [r3, #0]
		avrFreq[idx].y = pitch;
 8008b2c:	4b7c      	ldr	r3, [pc, #496]	; (8008d20 <output_data+0x50c>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	0019      	movs	r1, r3
 8008b32:	4a7c      	ldr	r2, [pc, #496]	; (8008d24 <output_data+0x510>)
 8008b34:	000b      	movs	r3, r1
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	1a5b      	subs	r3, r3, r1
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	18d3      	adds	r3, r2, r3
 8008b3e:	3310      	adds	r3, #16
 8008b40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b42:	601a      	str	r2, [r3, #0]
		avrFreq[idx].z = yaw;
 8008b44:	4b76      	ldr	r3, [pc, #472]	; (8008d20 <output_data+0x50c>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	0019      	movs	r1, r3
 8008b4a:	4a76      	ldr	r2, [pc, #472]	; (8008d24 <output_data+0x510>)
 8008b4c:	000b      	movs	r3, r1
 8008b4e:	00db      	lsls	r3, r3, #3
 8008b50:	1a5b      	subs	r3, r3, r1
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	18d3      	adds	r3, r2, r3
 8008b56:	3314      	adds	r3, #20
 8008b58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b5a:	601a      	str	r2, [r3, #0]
		idx++;
 8008b5c:	4b70      	ldr	r3, [pc, #448]	; (8008d20 <output_data+0x50c>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	3301      	adds	r3, #1
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	4b6e      	ldr	r3, [pc, #440]	; (8008d20 <output_data+0x50c>)
 8008b66:	701a      	strb	r2, [r3, #0]
		//end store average level

		//store in range 3D
		if (abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 8008b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b6a:	17da      	asrs	r2, r3, #31
 8008b6c:	189b      	adds	r3, r3, r2
 8008b6e:	4053      	eors	r3, r2
 8008b70:	4a67      	ldr	r2, [pc, #412]	; (8008d10 <output_data+0x4fc>)
 8008b72:	7e12      	ldrb	r2, [r2, #24]
 8008b74:	4293      	cmp	r3, r2
 8008b76:	dc6d      	bgt.n	8008c54 <output_data+0x440>
 8008b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b7a:	17da      	asrs	r2, r3, #31
 8008b7c:	189b      	adds	r3, r3, r2
 8008b7e:	4053      	eors	r3, r2
 8008b80:	4a63      	ldr	r2, [pc, #396]	; (8008d10 <output_data+0x4fc>)
 8008b82:	7e52      	ldrb	r2, [r2, #25]
 8008b84:	4293      	cmp	r3, r2
 8008b86:	dc65      	bgt.n	8008c54 <output_data+0x440>
			if (idx3D >= MAX_NO_AVERAGE) {
 8008b88:	4b67      	ldr	r3, [pc, #412]	; (8008d28 <output_data+0x514>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b0e      	cmp	r3, #14
 8008b8e:	d902      	bls.n	8008b96 <output_data+0x382>
				idx3D = 0;
 8008b90:	4b65      	ldr	r3, [pc, #404]	; (8008d28 <output_data+0x514>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	701a      	strb	r2, [r3, #0]
			}

			avrFreq3D[idx3D].secCount = ulSecCount;
 8008b96:	4b64      	ldr	r3, [pc, #400]	; (8008d28 <output_data+0x514>)
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	4b5d      	ldr	r3, [pc, #372]	; (8008d14 <output_data+0x500>)
 8008b9e:	6819      	ldr	r1, [r3, #0]
 8008ba0:	4a62      	ldr	r2, [pc, #392]	; (8008d2c <output_data+0x518>)
 8008ba2:	0003      	movs	r3, r0
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	1a1b      	subs	r3, r3, r0
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	5099      	str	r1, [r3, r2]
			avrFreq3D[idx3D].frequency = g_appStats.emaFrequency;
 8008bac:	4b5e      	ldr	r3, [pc, #376]	; (8008d28 <output_data+0x514>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	0018      	movs	r0, r3
 8008bb2:	4b5a      	ldr	r3, [pc, #360]	; (8008d1c <output_data+0x508>)
 8008bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bb6:	495d      	ldr	r1, [pc, #372]	; (8008d2c <output_data+0x518>)
 8008bb8:	0003      	movs	r3, r0
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	1a1b      	subs	r3, r3, r0
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	18cb      	adds	r3, r1, r3
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	601a      	str	r2, [r3, #0]
			avrFreq3D[idx3D].level = fuelLevel;
 8008bc6:	4b58      	ldr	r3, [pc, #352]	; (8008d28 <output_data+0x514>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	0019      	movs	r1, r3
 8008bcc:	4a57      	ldr	r2, [pc, #348]	; (8008d2c <output_data+0x518>)
 8008bce:	000b      	movs	r3, r1
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	1a5b      	subs	r3, r3, r1
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	18d3      	adds	r3, r2, r3
 8008bd8:	3318      	adds	r3, #24
 8008bda:	22c4      	movs	r2, #196	; 0xc4
 8008bdc:	2118      	movs	r1, #24
 8008bde:	1852      	adds	r2, r2, r1
 8008be0:	19d2      	adds	r2, r2, r7
 8008be2:	6812      	ldr	r2, [r2, #0]
 8008be4:	601a      	str	r2, [r3, #0]
			avrFreq3D[idx3D].vibration = g_appStats.vibrInt;
 8008be6:	4b50      	ldr	r3, [pc, #320]	; (8008d28 <output_data+0x514>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	0018      	movs	r0, r3
 8008bec:	4b4b      	ldr	r3, [pc, #300]	; (8008d1c <output_data+0x508>)
 8008bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bf0:	494e      	ldr	r1, [pc, #312]	; (8008d2c <output_data+0x518>)
 8008bf2:	0003      	movs	r3, r0
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	1a1b      	subs	r3, r3, r0
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	18cb      	adds	r3, r1, r3
 8008bfc:	3308      	adds	r3, #8
 8008bfe:	601a      	str	r2, [r3, #0]
			avrFreq3D[idx3D].x = roll;
 8008c00:	4b49      	ldr	r3, [pc, #292]	; (8008d28 <output_data+0x514>)
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	0019      	movs	r1, r3
 8008c06:	4a49      	ldr	r2, [pc, #292]	; (8008d2c <output_data+0x518>)
 8008c08:	000b      	movs	r3, r1
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	1a5b      	subs	r3, r3, r1
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	18d3      	adds	r3, r2, r3
 8008c12:	330c      	adds	r3, #12
 8008c14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c16:	601a      	str	r2, [r3, #0]
			avrFreq3D[idx3D].y = pitch;
 8008c18:	4b43      	ldr	r3, [pc, #268]	; (8008d28 <output_data+0x514>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	0019      	movs	r1, r3
 8008c1e:	4a43      	ldr	r2, [pc, #268]	; (8008d2c <output_data+0x518>)
 8008c20:	000b      	movs	r3, r1
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	1a5b      	subs	r3, r3, r1
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	18d3      	adds	r3, r2, r3
 8008c2a:	3310      	adds	r3, #16
 8008c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c2e:	601a      	str	r2, [r3, #0]
			avrFreq3D[idx3D].z = yaw;
 8008c30:	4b3d      	ldr	r3, [pc, #244]	; (8008d28 <output_data+0x514>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	0019      	movs	r1, r3
 8008c36:	4a3d      	ldr	r2, [pc, #244]	; (8008d2c <output_data+0x518>)
 8008c38:	000b      	movs	r3, r1
 8008c3a:	00db      	lsls	r3, r3, #3
 8008c3c:	1a5b      	subs	r3, r3, r1
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	18d3      	adds	r3, r2, r3
 8008c42:	3314      	adds	r3, #20
 8008c44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c46:	601a      	str	r2, [r3, #0]
			idx3D++;
 8008c48:	4b37      	ldr	r3, [pc, #220]	; (8008d28 <output_data+0x514>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	4b35      	ldr	r3, [pc, #212]	; (8008d28 <output_data+0x514>)
 8008c52:	701a      	strb	r2, [r3, #0]
		}
		//end store in range 3D

		//reset all
		g_appStats.fuelLevel3D = -1; //ok
 8008c54:	4b31      	ldr	r3, [pc, #196]	; (8008d1c <output_data+0x508>)
 8008c56:	2201      	movs	r2, #1
 8008c58:	4252      	negs	r2, r2
 8008c5a:	639a      	str	r2, [r3, #56]	; 0x38
		g_appStats.fuelLevel3DMin = -1; //ok
 8008c5c:	4b2f      	ldr	r3, [pc, #188]	; (8008d1c <output_data+0x508>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	4252      	negs	r2, r2
 8008c62:	63da      	str	r2, [r3, #60]	; 0x3c
		g_appStats.fuelLevel3DSame = -1;
 8008c64:	4b2d      	ldr	r3, [pc, #180]	; (8008d1c <output_data+0x508>)
 8008c66:	2201      	movs	r2, #1
 8008c68:	4252      	negs	r2, r2
 8008c6a:	641a      	str	r2, [r3, #64]	; 0x40
		g_appStats.fuelLevelAvg = -1; //ok
 8008c6c:	4b2b      	ldr	r3, [pc, #172]	; (8008d1c <output_data+0x508>)
 8008c6e:	2201      	movs	r2, #1
 8008c70:	4252      	negs	r2, r2
 8008c72:	635a      	str	r2, [r3, #52]	; 0x34
		g_appStats.fuelLevelMinDiff = -1;
 8008c74:	4b29      	ldr	r3, [pc, #164]	; (8008d1c <output_data+0x508>)
 8008c76:	2201      	movs	r2, #1
 8008c78:	4252      	negs	r2, r2
 8008c7a:	645a      	str	r2, [r3, #68]	; 0x44

		g_appStats.vibrInt = 0;
 8008c7c:	4b27      	ldr	r3, [pc, #156]	; (8008d1c <output_data+0x508>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	649a      	str	r2, [r3, #72]	; 0x48

		lastStoreAverage = ulSecCount;
 8008c82:	4b24      	ldr	r3, [pc, #144]	; (8008d14 <output_data+0x500>)
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	4b2a      	ldr	r3, [pc, #168]	; (8008d30 <output_data+0x51c>)
 8008c88:	601a      	str	r2, [r3, #0]

		unsigned long min3Dx = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	22bc      	movs	r2, #188	; 0xbc
 8008c8e:	2118      	movs	r1, #24
 8008c90:	1852      	adds	r2, r2, r1
 8008c92:	19d2      	adds	r2, r2, r7
 8008c94:	6013      	str	r3, [r2, #0]
		unsigned long min3Dy = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	22b8      	movs	r2, #184	; 0xb8
 8008c9a:	1852      	adds	r2, r2, r1
 8008c9c:	19d2      	adds	r2, r2, r7
 8008c9e:	6013      	str	r3, [r2, #0]
		unsigned long min3DVbr = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	22b4      	movs	r2, #180	; 0xb4
 8008ca4:	1852      	adds	r2, r2, r1
 8008ca6:	19d2      	adds	r2, r2, r7
 8008ca8:	6013      	str	r3, [r2, #0]

		unsigned long same3Dx = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	22b0      	movs	r2, #176	; 0xb0
 8008cae:	1852      	adds	r2, r2, r1
 8008cb0:	19d2      	adds	r2, r2, r7
 8008cb2:	6013      	str	r3, [r2, #0]
		unsigned long same3Dy = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	22ac      	movs	r2, #172	; 0xac
 8008cb8:	1852      	adds	r2, r2, r1
 8008cba:	19d2      	adds	r2, r2, r7
 8008cbc:	6013      	str	r3, [r2, #0]
		unsigned long same3DVbr = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	22a8      	movs	r2, #168	; 0xa8
 8008cc2:	1852      	adds	r2, r2, r1
 8008cc4:	19d2      	adds	r2, r2, r7
 8008cc6:	6013      	str	r3, [r2, #0]
		unsigned long same3DSecCount = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	22a4      	movs	r2, #164	; 0xa4
 8008ccc:	1852      	adds	r2, r2, r1
 8008cce:	19d2      	adds	r2, r2, r7
 8008cd0:	6013      	str	r3, [r2, #0]

		uint32_t sumAvrFeq = 0;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	22a0      	movs	r2, #160	; 0xa0
 8008cd6:	1852      	adds	r2, r2, r1
 8008cd8:	19d2      	adds	r2, r2, r7
 8008cda:	6013      	str	r3, [r2, #0]
		int countAvr = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	229c      	movs	r2, #156	; 0x9c
 8008ce0:	1852      	adds	r2, r2, r1
 8008ce2:	19d2      	adds	r2, r2, r7
 8008ce4:	6013      	str	r3, [r2, #0]

		int sumMinDiff = -1;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	425b      	negs	r3, r3
 8008cea:	2298      	movs	r2, #152	; 0x98
 8008cec:	1852      	adds	r2, r2, r1
 8008cee:	19d2      	adds	r2, r2, r7
 8008cf0:	6013      	str	r3, [r2, #0]
		long tmpSecCount = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	2294      	movs	r2, #148	; 0x94
 8008cf6:	1852      	adds	r2, r2, r1
 8008cf8:	19d2      	adds	r2, r2, r7
 8008cfa:	6013      	str	r3, [r2, #0]

		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	2290      	movs	r2, #144	; 0x90
 8008d00:	1852      	adds	r2, r2, r1
 8008d02:	19d2      	adds	r2, r2, r7
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	e10f      	b.n	8008f28 <output_data+0x714>
 8008d08:	20000dd1 	.word	0x20000dd1
 8008d0c:	20000de4 	.word	0x20000de4
 8008d10:	20000368 	.word	0x20000368
 8008d14:	20000360 	.word	0x20000360
 8008d18:	200008e4 	.word	0x200008e4
 8008d1c:	20000384 	.word	0x20000384
 8008d20:	20000dd0 	.word	0x20000dd0
 8008d24:	200003f8 	.word	0x200003f8
 8008d28:	20000dd2 	.word	0x20000dd2
 8008d2c:	20000740 	.word	0x20000740
 8008d30:	200003f4 	.word	0x200003f4
			if (avrFreq[i].secCount) {
 8008d34:	498f      	ldr	r1, [pc, #572]	; (8008f74 <output_data+0x760>)
 8008d36:	2090      	movs	r0, #144	; 0x90
 8008d38:	2418      	movs	r4, #24
 8008d3a:	1903      	adds	r3, r0, r4
 8008d3c:	19db      	adds	r3, r3, r7
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	0013      	movs	r3, r2
 8008d42:	00db      	lsls	r3, r3, #3
 8008d44:	1a9b      	subs	r3, r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	585b      	ldr	r3, [r3, r1]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d100      	bne.n	8008d50 <output_data+0x53c>
 8008d4e:	e0e2      	b.n	8008f16 <output_data+0x702>
				sumAvrFeq += avrFreq[i].level;
 8008d50:	4988      	ldr	r1, [pc, #544]	; (8008f74 <output_data+0x760>)
 8008d52:	1903      	adds	r3, r0, r4
 8008d54:	19db      	adds	r3, r3, r7
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	0013      	movs	r3, r2
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	1a9b      	subs	r3, r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	18cb      	adds	r3, r1, r3
 8008d62:	3318      	adds	r3, #24
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	001a      	movs	r2, r3
 8008d68:	21a0      	movs	r1, #160	; 0xa0
 8008d6a:	190b      	adds	r3, r1, r4
 8008d6c:	19db      	adds	r3, r3, r7
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	189b      	adds	r3, r3, r2
 8008d72:	190a      	adds	r2, r1, r4
 8008d74:	19d2      	adds	r2, r2, r7
 8008d76:	6013      	str	r3, [r2, #0]
				countAvr++;
 8008d78:	229c      	movs	r2, #156	; 0x9c
 8008d7a:	1913      	adds	r3, r2, r4
 8008d7c:	19db      	adds	r3, r3, r7
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3301      	adds	r3, #1
 8008d82:	0021      	movs	r1, r4
 8008d84:	1852      	adds	r2, r2, r1
 8008d86:	19d2      	adds	r2, r2, r7
 8008d88:	6013      	str	r3, [r2, #0]

				//count min diff
				int tmpCountMinDiff = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	228c      	movs	r2, #140	; 0x8c
 8008d8e:	1852      	adds	r2, r2, r1
 8008d90:	19d2      	adds	r2, r2, r7
 8008d92:	6013      	str	r3, [r2, #0]
				int tmpSumMinDiff = 0;
 8008d94:	2300      	movs	r3, #0
 8008d96:	2288      	movs	r2, #136	; 0x88
 8008d98:	1852      	adds	r2, r2, r1
 8008d9a:	19d2      	adds	r2, r2, r7
 8008d9c:	6013      	str	r3, [r2, #0]
				int sumDiff = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	2284      	movs	r2, #132	; 0x84
 8008da2:	1852      	adds	r2, r2, r1
 8008da4:	19d2      	adds	r2, r2, r7
 8008da6:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < MAX_NO_AVERAGE; j++) {
 8008da8:	2300      	movs	r3, #0
 8008daa:	2280      	movs	r2, #128	; 0x80
 8008dac:	1852      	adds	r2, r2, r1
 8008dae:	19d2      	adds	r2, r2, r7
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	e05e      	b.n	8008e72 <output_data+0x65e>
					if (avrFreq[j].secCount && i != j) {
 8008db4:	496f      	ldr	r1, [pc, #444]	; (8008f74 <output_data+0x760>)
 8008db6:	2480      	movs	r4, #128	; 0x80
 8008db8:	2518      	movs	r5, #24
 8008dba:	1963      	adds	r3, r4, r5
 8008dbc:	19db      	adds	r3, r3, r7
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	0013      	movs	r3, r2
 8008dc2:	00db      	lsls	r3, r3, #3
 8008dc4:	1a9b      	subs	r3, r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	585b      	ldr	r3, [r3, r1]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d048      	beq.n	8008e60 <output_data+0x64c>
 8008dce:	2090      	movs	r0, #144	; 0x90
 8008dd0:	1943      	adds	r3, r0, r5
 8008dd2:	19db      	adds	r3, r3, r7
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	1963      	adds	r3, r4, r5
 8008dd8:	19db      	adds	r3, r3, r7
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d03f      	beq.n	8008e60 <output_data+0x64c>
						long diff = abs(avrFreq[i].level - avrFreq[j].level);
 8008de0:	4964      	ldr	r1, [pc, #400]	; (8008f74 <output_data+0x760>)
 8008de2:	1943      	adds	r3, r0, r5
 8008de4:	19db      	adds	r3, r3, r7
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	0013      	movs	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	1a9b      	subs	r3, r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	18cb      	adds	r3, r1, r3
 8008df2:	3318      	adds	r3, #24
 8008df4:	6819      	ldr	r1, [r3, #0]
 8008df6:	485f      	ldr	r0, [pc, #380]	; (8008f74 <output_data+0x760>)
 8008df8:	1963      	adds	r3, r4, r5
 8008dfa:	19db      	adds	r3, r3, r7
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	0013      	movs	r3, r2
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	18c3      	adds	r3, r0, r3
 8008e08:	3318      	adds	r3, #24
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	1acb      	subs	r3, r1, r3
 8008e0e:	17da      	asrs	r2, r3, #31
 8008e10:	189b      	adds	r3, r3, r2
 8008e12:	4053      	eors	r3, r2
 8008e14:	61fb      	str	r3, [r7, #28]
						tmpSumMinDiff += avrFreq[j].level;
 8008e16:	4957      	ldr	r1, [pc, #348]	; (8008f74 <output_data+0x760>)
 8008e18:	1963      	adds	r3, r4, r5
 8008e1a:	19db      	adds	r3, r3, r7
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	0013      	movs	r3, r2
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	1a9b      	subs	r3, r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	18cb      	adds	r3, r1, r3
 8008e28:	3318      	adds	r3, #24
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2188      	movs	r1, #136	; 0x88
 8008e2e:	194a      	adds	r2, r1, r5
 8008e30:	19d2      	adds	r2, r2, r7
 8008e32:	6812      	ldr	r2, [r2, #0]
 8008e34:	18d3      	adds	r3, r2, r3
 8008e36:	194a      	adds	r2, r1, r5
 8008e38:	19d2      	adds	r2, r2, r7
 8008e3a:	6013      	str	r3, [r2, #0]
						sumDiff += diff;
 8008e3c:	2184      	movs	r1, #132	; 0x84
 8008e3e:	194b      	adds	r3, r1, r5
 8008e40:	19db      	adds	r3, r3, r7
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	18d3      	adds	r3, r2, r3
 8008e48:	194a      	adds	r2, r1, r5
 8008e4a:	19d2      	adds	r2, r2, r7
 8008e4c:	6013      	str	r3, [r2, #0]
						tmpCountMinDiff++;
 8008e4e:	228c      	movs	r2, #140	; 0x8c
 8008e50:	0029      	movs	r1, r5
 8008e52:	1953      	adds	r3, r2, r5
 8008e54:	19db      	adds	r3, r3, r7
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	1852      	adds	r2, r2, r1
 8008e5c:	19d2      	adds	r2, r2, r7
 8008e5e:	6013      	str	r3, [r2, #0]
				for (int j = 0; j < MAX_NO_AVERAGE; j++) {
 8008e60:	2280      	movs	r2, #128	; 0x80
 8008e62:	2118      	movs	r1, #24
 8008e64:	1853      	adds	r3, r2, r1
 8008e66:	19db      	adds	r3, r3, r7
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	1852      	adds	r2, r2, r1
 8008e6e:	19d2      	adds	r2, r2, r7
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	2380      	movs	r3, #128	; 0x80
 8008e74:	2018      	movs	r0, #24
 8008e76:	181b      	adds	r3, r3, r0
 8008e78:	19db      	adds	r3, r3, r7
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b0e      	cmp	r3, #14
 8008e7e:	dd99      	ble.n	8008db4 <output_data+0x5a0>
					}
				}

				//average
				if (tmpCountMinDiff && (sumMinDiff == -1 || (sumDiff < sumMinDiff && avrFreq[i].secCount > tmpSecCount))) {
 8008e80:	238c      	movs	r3, #140	; 0x8c
 8008e82:	181b      	adds	r3, r3, r0
 8008e84:	19db      	adds	r3, r3, r7
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d044      	beq.n	8008f16 <output_data+0x702>
 8008e8c:	2198      	movs	r1, #152	; 0x98
 8008e8e:	180b      	adds	r3, r1, r0
 8008e90:	19db      	adds	r3, r3, r7
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3301      	adds	r3, #1
 8008e96:	d018      	beq.n	8008eca <output_data+0x6b6>
 8008e98:	2384      	movs	r3, #132	; 0x84
 8008e9a:	181b      	adds	r3, r3, r0
 8008e9c:	19db      	adds	r3, r3, r7
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	180b      	adds	r3, r1, r0
 8008ea2:	19db      	adds	r3, r3, r7
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	da35      	bge.n	8008f16 <output_data+0x702>
 8008eaa:	4932      	ldr	r1, [pc, #200]	; (8008f74 <output_data+0x760>)
 8008eac:	2390      	movs	r3, #144	; 0x90
 8008eae:	181b      	adds	r3, r3, r0
 8008eb0:	19db      	adds	r3, r3, r7
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	0013      	movs	r3, r2
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	1a9b      	subs	r3, r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	585a      	ldr	r2, [r3, r1]
 8008ebe:	2394      	movs	r3, #148	; 0x94
 8008ec0:	181b      	adds	r3, r3, r0
 8008ec2:	19db      	adds	r3, r3, r7
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d925      	bls.n	8008f16 <output_data+0x702>
					tmpSecCount = avrFreq[i].secCount;
 8008eca:	492a      	ldr	r1, [pc, #168]	; (8008f74 <output_data+0x760>)
 8008ecc:	2390      	movs	r3, #144	; 0x90
 8008ece:	2018      	movs	r0, #24
 8008ed0:	181b      	adds	r3, r3, r0
 8008ed2:	19db      	adds	r3, r3, r7
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	0013      	movs	r3, r2
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	1a9b      	subs	r3, r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	585b      	ldr	r3, [r3, r1]
 8008ee0:	2294      	movs	r2, #148	; 0x94
 8008ee2:	1812      	adds	r2, r2, r0
 8008ee4:	19d2      	adds	r2, r2, r7
 8008ee6:	6013      	str	r3, [r2, #0]
					sumMinDiff = sumDiff;
 8008ee8:	2384      	movs	r3, #132	; 0x84
 8008eea:	181b      	adds	r3, r3, r0
 8008eec:	19db      	adds	r3, r3, r7
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2298      	movs	r2, #152	; 0x98
 8008ef2:	1812      	adds	r2, r2, r0
 8008ef4:	19d2      	adds	r2, r2, r7
 8008ef6:	6013      	str	r3, [r2, #0]
					g_appStats.fuelLevelMinDiff = (tmpSumMinDiff / tmpCountMinDiff);
 8008ef8:	238c      	movs	r3, #140	; 0x8c
 8008efa:	0002      	movs	r2, r0
 8008efc:	189b      	adds	r3, r3, r2
 8008efe:	19db      	adds	r3, r3, r7
 8008f00:	6819      	ldr	r1, [r3, #0]
 8008f02:	2388      	movs	r3, #136	; 0x88
 8008f04:	189b      	adds	r3, r3, r2
 8008f06:	19db      	adds	r3, r3, r7
 8008f08:	6818      	ldr	r0, [r3, #0]
 8008f0a:	f7f9 fd99 	bl	8002a40 <__divsi3>
 8008f0e:	0003      	movs	r3, r0
 8008f10:	001a      	movs	r2, r3
 8008f12:	4b19      	ldr	r3, [pc, #100]	; (8008f78 <output_data+0x764>)
 8008f14:	645a      	str	r2, [r3, #68]	; 0x44
		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 8008f16:	2290      	movs	r2, #144	; 0x90
 8008f18:	2118      	movs	r1, #24
 8008f1a:	1853      	adds	r3, r2, r1
 8008f1c:	19db      	adds	r3, r3, r7
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3301      	adds	r3, #1
 8008f22:	1852      	adds	r2, r2, r1
 8008f24:	19d2      	adds	r2, r2, r7
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	2390      	movs	r3, #144	; 0x90
 8008f2a:	2218      	movs	r2, #24
 8008f2c:	189b      	adds	r3, r3, r2
 8008f2e:	19db      	adds	r3, r3, r7
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b0e      	cmp	r3, #14
 8008f34:	dc00      	bgt.n	8008f38 <output_data+0x724>
 8008f36:	e6fd      	b.n	8008d34 <output_data+0x520>
				}
			}
		}

		int start = 0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	2294      	movs	r2, #148	; 0x94
 8008f3c:	18ba      	adds	r2, r7, r2
 8008f3e:	6013      	str	r3, [r2, #0]
		int startSame = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	2290      	movs	r2, #144	; 0x90
 8008f44:	18ba      	adds	r2, r7, r2
 8008f46:	6013      	str	r3, [r2, #0]
		long ulSecCountMax = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	228c      	movs	r2, #140	; 0x8c
 8008f4c:	18ba      	adds	r2, r7, r2
 8008f4e:	6013      	str	r3, [r2, #0]
		uint32_t sumFeq3D = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	2288      	movs	r2, #136	; 0x88
 8008f54:	18ba      	adds	r2, r7, r2
 8008f56:	6013      	str	r3, [r2, #0]
		int count3D = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	2284      	movs	r2, #132	; 0x84
 8008f5c:	18ba      	adds	r2, r7, r2
 8008f5e:	6013      	str	r3, [r2, #0]

		uint32_t minDiffFeq3D = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	2280      	movs	r2, #128	; 0x80
 8008f64:	18ba      	adds	r2, r7, r2
 8008f66:	6013      	str	r3, [r2, #0]
		int countMinDiff3D = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	67fb      	str	r3, [r7, #124]	; 0x7c

		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f70:	e25d      	b.n	800942e <output_data+0xc1a>
 8008f72:	46c0      	nop			; (mov r8, r8)
 8008f74:	200003f8 	.word	0x200003f8
 8008f78:	20000384 	.word	0x20000384
			uint32_t diffTime = (uint32_t) (ulSecCount - avrFreq3D[i].secCount);
 8008f7c:	4b7a      	ldr	r3, [pc, #488]	; (8009168 <output_data+0x954>)
 8008f7e:	6819      	ldr	r1, [r3, #0]
 8008f80:	487a      	ldr	r0, [pc, #488]	; (800916c <output_data+0x958>)
 8008f82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f84:	0013      	movs	r3, r2
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	581b      	ldr	r3, [r3, r0]
 8008f8e:	1acb      	subs	r3, r1, r3
 8008f90:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (avrFreq3D[i].secCount && diffTime <= (g_config.timeout3D * 60)) {
 8008f92:	4976      	ldr	r1, [pc, #472]	; (800916c <output_data+0x958>)
 8008f94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f96:	0013      	movs	r3, r2
 8008f98:	00db      	lsls	r3, r3, #3
 8008f9a:	1a9b      	subs	r3, r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	585b      	ldr	r3, [r3, r1]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d100      	bne.n	8008fa6 <output_data+0x792>
 8008fa4:	e13f      	b.n	8009226 <output_data+0xa12>
 8008fa6:	4b72      	ldr	r3, [pc, #456]	; (8009170 <output_data+0x95c>)
 8008fa8:	8a9b      	ldrh	r3, [r3, #20]
 8008faa:	001a      	movs	r2, r3
 8008fac:	0013      	movs	r3, r2
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	1a9b      	subs	r3, r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	001a      	movs	r2, r3
 8008fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d900      	bls.n	8008fbe <output_data+0x7aa>
 8008fbc:	e133      	b.n	8009226 <output_data+0xa12>
				if (start == 0) {
 8008fbe:	2494      	movs	r4, #148	; 0x94
 8008fc0:	193b      	adds	r3, r7, r4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d13c      	bne.n	8009042 <output_data+0x82e>
					min3Dx = abs(avrFreq3D[i].x);
 8008fc8:	4968      	ldr	r1, [pc, #416]	; (800916c <output_data+0x958>)
 8008fca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fcc:	0013      	movs	r3, r2
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	1a9b      	subs	r3, r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	18cb      	adds	r3, r1, r3
 8008fd6:	330c      	adds	r3, #12
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	17da      	asrs	r2, r3, #31
 8008fdc:	189b      	adds	r3, r3, r2
 8008fde:	4053      	eors	r3, r2
 8008fe0:	22bc      	movs	r2, #188	; 0xbc
 8008fe2:	2018      	movs	r0, #24
 8008fe4:	1812      	adds	r2, r2, r0
 8008fe6:	19d2      	adds	r2, r2, r7
 8008fe8:	6013      	str	r3, [r2, #0]
					min3Dy = abs(avrFreq3D[i].y);
 8008fea:	4960      	ldr	r1, [pc, #384]	; (800916c <output_data+0x958>)
 8008fec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fee:	0013      	movs	r3, r2
 8008ff0:	00db      	lsls	r3, r3, #3
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	18cb      	adds	r3, r1, r3
 8008ff8:	3310      	adds	r3, #16
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	17da      	asrs	r2, r3, #31
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	4053      	eors	r3, r2
 8009002:	22b8      	movs	r2, #184	; 0xb8
 8009004:	1812      	adds	r2, r2, r0
 8009006:	19d2      	adds	r2, r2, r7
 8009008:	6013      	str	r3, [r2, #0]
					min3DVbr = avrFreq3D[i].vibration;
 800900a:	4958      	ldr	r1, [pc, #352]	; (800916c <output_data+0x958>)
 800900c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800900e:	0013      	movs	r3, r2
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	1a9b      	subs	r3, r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	18cb      	adds	r3, r1, r3
 8009018:	3308      	adds	r3, #8
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	22b4      	movs	r2, #180	; 0xb4
 800901e:	1812      	adds	r2, r2, r0
 8009020:	19d2      	adds	r2, r2, r7
 8009022:	6013      	str	r3, [r2, #0]
					ulSecCountMax = avrFreq3D[i].secCount;
 8009024:	4951      	ldr	r1, [pc, #324]	; (800916c <output_data+0x958>)
 8009026:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009028:	0013      	movs	r3, r2
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	1a9b      	subs	r3, r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	585b      	ldr	r3, [r3, r1]
 8009032:	228c      	movs	r2, #140	; 0x8c
 8009034:	18ba      	adds	r2, r7, r2
 8009036:	6013      	str	r3, [r2, #0]
					start++;
 8009038:	193b      	adds	r3, r7, r4
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3301      	adds	r3, #1
 800903e:	193a      	adds	r2, r7, r4
 8009040:	6013      	str	r3, [r2, #0]
				}

				if (abs(avrFreq3D[i].x) <= min3Dx && abs(avrFreq3D[i].y) <= min3Dy && avrFreq3D[i].vibration <= min3DVbr) {
 8009042:	494a      	ldr	r1, [pc, #296]	; (800916c <output_data+0x958>)
 8009044:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009046:	0013      	movs	r3, r2
 8009048:	00db      	lsls	r3, r3, #3
 800904a:	1a9b      	subs	r3, r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	18cb      	adds	r3, r1, r3
 8009050:	330c      	adds	r3, #12
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	17da      	asrs	r2, r3, #31
 8009056:	189b      	adds	r3, r3, r2
 8009058:	4053      	eors	r3, r2
 800905a:	001a      	movs	r2, r3
 800905c:	20bc      	movs	r0, #188	; 0xbc
 800905e:	2618      	movs	r6, #24
 8009060:	1983      	adds	r3, r0, r6
 8009062:	19db      	adds	r3, r3, r7
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4293      	cmp	r3, r2
 8009068:	d360      	bcc.n	800912c <output_data+0x918>
 800906a:	4940      	ldr	r1, [pc, #256]	; (800916c <output_data+0x958>)
 800906c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800906e:	0013      	movs	r3, r2
 8009070:	00db      	lsls	r3, r3, #3
 8009072:	1a9b      	subs	r3, r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	18cb      	adds	r3, r1, r3
 8009078:	3310      	adds	r3, #16
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	17da      	asrs	r2, r3, #31
 800907e:	189b      	adds	r3, r3, r2
 8009080:	4053      	eors	r3, r2
 8009082:	001a      	movs	r2, r3
 8009084:	24b8      	movs	r4, #184	; 0xb8
 8009086:	19a3      	adds	r3, r4, r6
 8009088:	19db      	adds	r3, r3, r7
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4293      	cmp	r3, r2
 800908e:	d34d      	bcc.n	800912c <output_data+0x918>
 8009090:	4936      	ldr	r1, [pc, #216]	; (800916c <output_data+0x958>)
 8009092:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009094:	0013      	movs	r3, r2
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	1a9b      	subs	r3, r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	18cb      	adds	r3, r1, r3
 800909e:	3308      	adds	r3, #8
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	25b4      	movs	r5, #180	; 0xb4
 80090a4:	19aa      	adds	r2, r5, r6
 80090a6:	19d2      	adds	r2, r2, r7
 80090a8:	6812      	ldr	r2, [r2, #0]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d33e      	bcc.n	800912c <output_data+0x918>
					min3Dx = abs(avrFreq3D[i].x);
 80090ae:	492f      	ldr	r1, [pc, #188]	; (800916c <output_data+0x958>)
 80090b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090b2:	0013      	movs	r3, r2
 80090b4:	00db      	lsls	r3, r3, #3
 80090b6:	1a9b      	subs	r3, r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	18cb      	adds	r3, r1, r3
 80090bc:	330c      	adds	r3, #12
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	17da      	asrs	r2, r3, #31
 80090c2:	189b      	adds	r3, r3, r2
 80090c4:	4053      	eors	r3, r2
 80090c6:	1982      	adds	r2, r0, r6
 80090c8:	19d2      	adds	r2, r2, r7
 80090ca:	6013      	str	r3, [r2, #0]
					min3Dy = abs(avrFreq3D[i].y);
 80090cc:	4927      	ldr	r1, [pc, #156]	; (800916c <output_data+0x958>)
 80090ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090d0:	0013      	movs	r3, r2
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	18cb      	adds	r3, r1, r3
 80090da:	3310      	adds	r3, #16
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	17da      	asrs	r2, r3, #31
 80090e0:	189b      	adds	r3, r3, r2
 80090e2:	4053      	eors	r3, r2
 80090e4:	19a2      	adds	r2, r4, r6
 80090e6:	19d2      	adds	r2, r2, r7
 80090e8:	6013      	str	r3, [r2, #0]
					min3DVbr = avrFreq3D[i].vibration;
 80090ea:	4920      	ldr	r1, [pc, #128]	; (800916c <output_data+0x958>)
 80090ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090ee:	0013      	movs	r3, r2
 80090f0:	00db      	lsls	r3, r3, #3
 80090f2:	1a9b      	subs	r3, r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	18cb      	adds	r3, r1, r3
 80090f8:	3308      	adds	r3, #8
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	19aa      	adds	r2, r5, r6
 80090fe:	19d2      	adds	r2, r2, r7
 8009100:	6013      	str	r3, [r2, #0]
					if (avrFreq3D[i].secCount >= ulSecCountMax) {
 8009102:	491a      	ldr	r1, [pc, #104]	; (800916c <output_data+0x958>)
 8009104:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009106:	0013      	movs	r3, r2
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	1a9b      	subs	r3, r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	585a      	ldr	r2, [r3, r1]
 8009110:	208c      	movs	r0, #140	; 0x8c
 8009112:	183b      	adds	r3, r7, r0
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	d308      	bcc.n	800912c <output_data+0x918>
						ulSecCountMax = avrFreq3D[i].secCount;
 800911a:	4914      	ldr	r1, [pc, #80]	; (800916c <output_data+0x958>)
 800911c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800911e:	0013      	movs	r3, r2
 8009120:	00db      	lsls	r3, r3, #3
 8009122:	1a9b      	subs	r3, r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	585b      	ldr	r3, [r3, r1]
 8009128:	183a      	adds	r2, r7, r0
 800912a:	6013      	str	r3, [r2, #0]
					}
				}

				//sum to calculate average
				sumFeq3D += avrFreq3D[i].level;
 800912c:	490f      	ldr	r1, [pc, #60]	; (800916c <output_data+0x958>)
 800912e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009130:	0013      	movs	r3, r2
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	18cb      	adds	r3, r1, r3
 800913a:	3318      	adds	r3, #24
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	001a      	movs	r2, r3
 8009140:	2188      	movs	r1, #136	; 0x88
 8009142:	187b      	adds	r3, r7, r1
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	189b      	adds	r3, r3, r2
 8009148:	187a      	adds	r2, r7, r1
 800914a:	6013      	str	r3, [r2, #0]
				count3D++;
 800914c:	2284      	movs	r2, #132	; 0x84
 800914e:	18bb      	adds	r3, r7, r2
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	18ba      	adds	r2, r7, r2
 8009156:	6013      	str	r3, [r2, #0]

				//check count
				uint32_t tmpMinDiffFeq3D = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	677b      	str	r3, [r7, #116]	; 0x74
				int tmpCount3DMin = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	673b      	str	r3, [r7, #112]	; 0x70
				for (int j = 0; j < MAX_NO_AVERAGE; j++) {
 8009160:	2300      	movs	r3, #0
 8009162:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009164:	e052      	b.n	800920c <output_data+0x9f8>
 8009166:	46c0      	nop			; (mov r8, r8)
 8009168:	20000360 	.word	0x20000360
 800916c:	20000740 	.word	0x20000740
 8009170:	20000368 	.word	0x20000368
					uint32_t diffTime1 = (uint32_t) (ulSecCount - avrFreq3D[j].secCount);
 8009174:	4be3      	ldr	r3, [pc, #908]	; (8009504 <output_data+0xcf0>)
 8009176:	6819      	ldr	r1, [r3, #0]
 8009178:	48e3      	ldr	r0, [pc, #908]	; (8009508 <output_data+0xcf4>)
 800917a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800917c:	0013      	movs	r3, r2
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	1a9b      	subs	r3, r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	581b      	ldr	r3, [r3, r0]
 8009186:	1acb      	subs	r3, r1, r3
 8009188:	62bb      	str	r3, [r7, #40]	; 0x28
					if (avrFreq3D[j].secCount && diffTime1 <= (g_config.timeout3D * 60)) {
 800918a:	49df      	ldr	r1, [pc, #892]	; (8009508 <output_data+0xcf4>)
 800918c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800918e:	0013      	movs	r3, r2
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	585b      	ldr	r3, [r3, r1]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d034      	beq.n	8009206 <output_data+0x9f2>
 800919c:	4bdb      	ldr	r3, [pc, #876]	; (800950c <output_data+0xcf8>)
 800919e:	8a9b      	ldrh	r3, [r3, #20]
 80091a0:	001a      	movs	r2, r3
 80091a2:	0013      	movs	r3, r2
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	1a9b      	subs	r3, r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	001a      	movs	r2, r3
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d829      	bhi.n	8009206 <output_data+0x9f2>
						int diff = abs(avrFreq3D[i].level - avrFreq3D[j].level);
 80091b2:	49d5      	ldr	r1, [pc, #852]	; (8009508 <output_data+0xcf4>)
 80091b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80091b6:	0013      	movs	r3, r2
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	1a9b      	subs	r3, r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	18cb      	adds	r3, r1, r3
 80091c0:	3318      	adds	r3, #24
 80091c2:	6819      	ldr	r1, [r3, #0]
 80091c4:	48d0      	ldr	r0, [pc, #832]	; (8009508 <output_data+0xcf4>)
 80091c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091c8:	0013      	movs	r3, r2
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	1a9b      	subs	r3, r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	18c3      	adds	r3, r0, r3
 80091d2:	3318      	adds	r3, #24
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	1acb      	subs	r3, r1, r3
 80091d8:	17da      	asrs	r2, r3, #31
 80091da:	189b      	adds	r3, r3, r2
 80091dc:	4053      	eors	r3, r2
 80091de:	627b      	str	r3, [r7, #36]	; 0x24

						if (diff < 10) {
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	2b09      	cmp	r3, #9
 80091e4:	dc0f      	bgt.n	8009206 <output_data+0x9f2>
							tmpMinDiffFeq3D += avrFreq3D[j].level;
 80091e6:	49c8      	ldr	r1, [pc, #800]	; (8009508 <output_data+0xcf4>)
 80091e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091ea:	0013      	movs	r3, r2
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	18cb      	adds	r3, r1, r3
 80091f4:	3318      	adds	r3, #24
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	001a      	movs	r2, r3
 80091fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091fc:	189b      	adds	r3, r3, r2
 80091fe:	677b      	str	r3, [r7, #116]	; 0x74
							tmpCount3DMin++;
 8009200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009202:	3301      	adds	r3, #1
 8009204:	673b      	str	r3, [r7, #112]	; 0x70
				for (int j = 0; j < MAX_NO_AVERAGE; j++) {
 8009206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009208:	3301      	adds	r3, #1
 800920a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800920c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800920e:	2b0e      	cmp	r3, #14
 8009210:	ddb0      	ble.n	8009174 <output_data+0x960>
						}
					}
				}

				//average
				if (tmpCount3DMin > countMinDiff3D) {
 8009212:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009214:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009216:	429a      	cmp	r2, r3
 8009218:	dd05      	ble.n	8009226 <output_data+0xa12>
					minDiffFeq3D = tmpMinDiffFeq3D;
 800921a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800921c:	2280      	movs	r2, #128	; 0x80
 800921e:	18ba      	adds	r2, r7, r2
 8009220:	6013      	str	r3, [r2, #0]
					countMinDiff3D = tmpCount3DMin;
 8009222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009224:	67fb      	str	r3, [r7, #124]	; 0x7c
				}
			}

			//check same 3d
			uint32_t diffTime2 = (uint32_t) (ulSecCount - same3DFreq[i].secCount);
 8009226:	4bb7      	ldr	r3, [pc, #732]	; (8009504 <output_data+0xcf0>)
 8009228:	6819      	ldr	r1, [r3, #0]
 800922a:	48b9      	ldr	r0, [pc, #740]	; (8009510 <output_data+0xcfc>)
 800922c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800922e:	0013      	movs	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	1a9b      	subs	r3, r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	581b      	ldr	r3, [r3, r0]
 8009238:	1acb      	subs	r3, r1, r3
 800923a:	623b      	str	r3, [r7, #32]
			if (same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D * 60)) {
 800923c:	49b4      	ldr	r1, [pc, #720]	; (8009510 <output_data+0xcfc>)
 800923e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009240:	0013      	movs	r3, r2
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	1a9b      	subs	r3, r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	585b      	ldr	r3, [r3, r1]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d100      	bne.n	8009250 <output_data+0xa3c>
 800924e:	e0eb      	b.n	8009428 <output_data+0xc14>
 8009250:	4bae      	ldr	r3, [pc, #696]	; (800950c <output_data+0xcf8>)
 8009252:	8a9b      	ldrh	r3, [r3, #20]
 8009254:	001a      	movs	r2, r3
 8009256:	0013      	movs	r3, r2
 8009258:	011b      	lsls	r3, r3, #4
 800925a:	1a9b      	subs	r3, r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	001a      	movs	r2, r3
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	4293      	cmp	r3, r2
 8009264:	d900      	bls.n	8009268 <output_data+0xa54>
 8009266:	e0df      	b.n	8009428 <output_data+0xc14>
				if (startSame == 0) {
 8009268:	2490      	movs	r4, #144	; 0x90
 800926a:	193b      	adds	r3, r7, r4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d148      	bne.n	8009304 <output_data+0xaf0>
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 8009272:	49a7      	ldr	r1, [pc, #668]	; (8009510 <output_data+0xcfc>)
 8009274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009276:	0013      	movs	r3, r2
 8009278:	00db      	lsls	r3, r3, #3
 800927a:	1a9b      	subs	r3, r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	18cb      	adds	r3, r1, r3
 8009280:	3318      	adds	r3, #24
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	4ba3      	ldr	r3, [pc, #652]	; (8009514 <output_data+0xd00>)
 8009286:	641a      	str	r2, [r3, #64]	; 0x40
					same3Dx = abs(same3DFreq[i].x);
 8009288:	49a1      	ldr	r1, [pc, #644]	; (8009510 <output_data+0xcfc>)
 800928a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800928c:	0013      	movs	r3, r2
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	1a9b      	subs	r3, r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	18cb      	adds	r3, r1, r3
 8009296:	330c      	adds	r3, #12
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	17da      	asrs	r2, r3, #31
 800929c:	189b      	adds	r3, r3, r2
 800929e:	4053      	eors	r3, r2
 80092a0:	22b0      	movs	r2, #176	; 0xb0
 80092a2:	2018      	movs	r0, #24
 80092a4:	1812      	adds	r2, r2, r0
 80092a6:	19d2      	adds	r2, r2, r7
 80092a8:	6013      	str	r3, [r2, #0]
					same3Dy = abs(same3DFreq[i].y);
 80092aa:	4999      	ldr	r1, [pc, #612]	; (8009510 <output_data+0xcfc>)
 80092ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092ae:	0013      	movs	r3, r2
 80092b0:	00db      	lsls	r3, r3, #3
 80092b2:	1a9b      	subs	r3, r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	18cb      	adds	r3, r1, r3
 80092b8:	3310      	adds	r3, #16
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	17da      	asrs	r2, r3, #31
 80092be:	189b      	adds	r3, r3, r2
 80092c0:	4053      	eors	r3, r2
 80092c2:	22ac      	movs	r2, #172	; 0xac
 80092c4:	1812      	adds	r2, r2, r0
 80092c6:	19d2      	adds	r2, r2, r7
 80092c8:	6013      	str	r3, [r2, #0]
					same3DVbr = same3DFreq[i].vibration;
 80092ca:	4991      	ldr	r1, [pc, #580]	; (8009510 <output_data+0xcfc>)
 80092cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092ce:	0013      	movs	r3, r2
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	1a9b      	subs	r3, r3, r2
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	18cb      	adds	r3, r1, r3
 80092d8:	3308      	adds	r3, #8
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	22a8      	movs	r2, #168	; 0xa8
 80092de:	1812      	adds	r2, r2, r0
 80092e0:	19d2      	adds	r2, r2, r7
 80092e2:	6013      	str	r3, [r2, #0]
					same3DSecCount = same3DFreq[i].secCount;
 80092e4:	498a      	ldr	r1, [pc, #552]	; (8009510 <output_data+0xcfc>)
 80092e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092e8:	0013      	movs	r3, r2
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	585b      	ldr	r3, [r3, r1]
 80092f2:	22a4      	movs	r2, #164	; 0xa4
 80092f4:	1812      	adds	r2, r2, r0
 80092f6:	19d2      	adds	r2, r2, r7
 80092f8:	6013      	str	r3, [r2, #0]
					startSame++;
 80092fa:	193b      	adds	r3, r7, r4
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3301      	adds	r3, #1
 8009300:	193a      	adds	r2, r7, r4
 8009302:	6013      	str	r3, [r2, #0]
				}

				if (abs(same3DFreq[i].x) <= same3Dx && abs(same3DFreq[i].y) <= same3Dy && same3DFreq[i].vibration <= same3DVbr
 8009304:	4982      	ldr	r1, [pc, #520]	; (8009510 <output_data+0xcfc>)
 8009306:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009308:	0013      	movs	r3, r2
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	1a9b      	subs	r3, r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	18cb      	adds	r3, r1, r3
 8009312:	330c      	adds	r3, #12
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	17da      	asrs	r2, r3, #31
 8009318:	189b      	adds	r3, r3, r2
 800931a:	4053      	eors	r3, r2
 800931c:	001a      	movs	r2, r3
 800931e:	24b0      	movs	r4, #176	; 0xb0
 8009320:	2018      	movs	r0, #24
 8009322:	1823      	adds	r3, r4, r0
 8009324:	19db      	adds	r3, r3, r7
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4293      	cmp	r3, r2
 800932a:	d200      	bcs.n	800932e <output_data+0xb1a>
 800932c:	e07c      	b.n	8009428 <output_data+0xc14>
 800932e:	4978      	ldr	r1, [pc, #480]	; (8009510 <output_data+0xcfc>)
 8009330:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009332:	0013      	movs	r3, r2
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	1a9b      	subs	r3, r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	18cb      	adds	r3, r1, r3
 800933c:	3310      	adds	r3, #16
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	17da      	asrs	r2, r3, #31
 8009342:	189b      	adds	r3, r3, r2
 8009344:	4053      	eors	r3, r2
 8009346:	001a      	movs	r2, r3
 8009348:	25ac      	movs	r5, #172	; 0xac
 800934a:	182b      	adds	r3, r5, r0
 800934c:	19db      	adds	r3, r3, r7
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4293      	cmp	r3, r2
 8009352:	d369      	bcc.n	8009428 <output_data+0xc14>
 8009354:	496e      	ldr	r1, [pc, #440]	; (8009510 <output_data+0xcfc>)
 8009356:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009358:	0013      	movs	r3, r2
 800935a:	00db      	lsls	r3, r3, #3
 800935c:	1a9b      	subs	r3, r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	18cb      	adds	r3, r1, r3
 8009362:	3308      	adds	r3, #8
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	26a8      	movs	r6, #168	; 0xa8
 8009368:	1831      	adds	r1, r6, r0
 800936a:	19ca      	adds	r2, r1, r7
 800936c:	6812      	ldr	r2, [r2, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d35a      	bcc.n	8009428 <output_data+0xc14>
						&& same3DFreq[i].secCount >= same3DSecCount) {
 8009372:	4967      	ldr	r1, [pc, #412]	; (8009510 <output_data+0xcfc>)
 8009374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009376:	0013      	movs	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	1a9b      	subs	r3, r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	585b      	ldr	r3, [r3, r1]
 8009380:	20a4      	movs	r0, #164	; 0xa4
 8009382:	2218      	movs	r2, #24
 8009384:	1881      	adds	r1, r0, r2
 8009386:	19ca      	adds	r2, r1, r7
 8009388:	6812      	ldr	r2, [r2, #0]
 800938a:	429a      	cmp	r2, r3
 800938c:	d84c      	bhi.n	8009428 <output_data+0xc14>
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 800938e:	4960      	ldr	r1, [pc, #384]	; (8009510 <output_data+0xcfc>)
 8009390:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009392:	0013      	movs	r3, r2
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	1a9b      	subs	r3, r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	18cb      	adds	r3, r1, r3
 800939c:	3318      	adds	r3, #24
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	4b5c      	ldr	r3, [pc, #368]	; (8009514 <output_data+0xd00>)
 80093a2:	641a      	str	r2, [r3, #64]	; 0x40
					same3Dx = abs(same3DFreq[i].x);
 80093a4:	495a      	ldr	r1, [pc, #360]	; (8009510 <output_data+0xcfc>)
 80093a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80093a8:	0013      	movs	r3, r2
 80093aa:	00db      	lsls	r3, r3, #3
 80093ac:	1a9b      	subs	r3, r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	18cb      	adds	r3, r1, r3
 80093b2:	330c      	adds	r3, #12
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	17da      	asrs	r2, r3, #31
 80093b8:	189b      	adds	r3, r3, r2
 80093ba:	4053      	eors	r3, r2
 80093bc:	2218      	movs	r2, #24
 80093be:	18a1      	adds	r1, r4, r2
 80093c0:	19ca      	adds	r2, r1, r7
 80093c2:	6013      	str	r3, [r2, #0]
					same3Dy = abs(same3DFreq[i].y);
 80093c4:	4952      	ldr	r1, [pc, #328]	; (8009510 <output_data+0xcfc>)
 80093c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80093c8:	0013      	movs	r3, r2
 80093ca:	00db      	lsls	r3, r3, #3
 80093cc:	1a9b      	subs	r3, r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	18cb      	adds	r3, r1, r3
 80093d2:	3310      	adds	r3, #16
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	17da      	asrs	r2, r3, #31
 80093d8:	189b      	adds	r3, r3, r2
 80093da:	4053      	eors	r3, r2
 80093dc:	2418      	movs	r4, #24
 80093de:	192a      	adds	r2, r5, r4
 80093e0:	19d2      	adds	r2, r2, r7
 80093e2:	6013      	str	r3, [r2, #0]
					same3DVbr = same3DFreq[i].vibration;
 80093e4:	494a      	ldr	r1, [pc, #296]	; (8009510 <output_data+0xcfc>)
 80093e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80093e8:	0013      	movs	r3, r2
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	1a9b      	subs	r3, r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	18cb      	adds	r3, r1, r3
 80093f2:	3308      	adds	r3, #8
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	1932      	adds	r2, r6, r4
 80093f8:	19d2      	adds	r2, r2, r7
 80093fa:	6013      	str	r3, [r2, #0]

					if (same3DFreq[i].secCount > same3DSecCount) {
 80093fc:	4944      	ldr	r1, [pc, #272]	; (8009510 <output_data+0xcfc>)
 80093fe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009400:	0013      	movs	r3, r2
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	1a9b      	subs	r3, r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	585b      	ldr	r3, [r3, r1]
 800940a:	1902      	adds	r2, r0, r4
 800940c:	19d2      	adds	r2, r2, r7
 800940e:	6812      	ldr	r2, [r2, #0]
 8009410:	429a      	cmp	r2, r3
 8009412:	d209      	bcs.n	8009428 <output_data+0xc14>
						same3DSecCount = same3DFreq[i].secCount;
 8009414:	493e      	ldr	r1, [pc, #248]	; (8009510 <output_data+0xcfc>)
 8009416:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009418:	0013      	movs	r3, r2
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	1a9b      	subs	r3, r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	585b      	ldr	r3, [r3, r1]
 8009422:	1902      	adds	r2, r0, r4
 8009424:	19d2      	adds	r2, r2, r7
 8009426:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < MAX_NO_AVERAGE; i++) {
 8009428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800942a:	3301      	adds	r3, #1
 800942c:	67bb      	str	r3, [r7, #120]	; 0x78
 800942e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009430:	2b0e      	cmp	r3, #14
 8009432:	dc00      	bgt.n	8009436 <output_data+0xc22>
 8009434:	e5a2      	b.n	8008f7c <output_data+0x768>
					}
				}
			}
		}

		if (countMinDiff3D) {
 8009436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00a      	beq.n	8009452 <output_data+0xc3e>
			g_appStats.fuelLevel3DMin = (minDiffFeq3D / countMinDiff3D);
 800943c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800943e:	0019      	movs	r1, r3
 8009440:	2380      	movs	r3, #128	; 0x80
 8009442:	18fb      	adds	r3, r7, r3
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	f7f9 fa71 	bl	800292c <__udivsi3>
 800944a:	0003      	movs	r3, r0
 800944c:	001a      	movs	r2, r3
 800944e:	4b31      	ldr	r3, [pc, #196]	; (8009514 <output_data+0xd00>)
 8009450:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if (countAvr > 0) {
 8009452:	229c      	movs	r2, #156	; 0x9c
 8009454:	2018      	movs	r0, #24
 8009456:	1813      	adds	r3, r2, r0
 8009458:	19db      	adds	r3, r3, r7
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	dd0d      	ble.n	800947c <output_data+0xc68>
			g_appStats.fuelLevelAvg = (sumAvrFeq / countAvr);
 8009460:	1813      	adds	r3, r2, r0
 8009462:	19db      	adds	r3, r3, r7
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	0019      	movs	r1, r3
 8009468:	23a0      	movs	r3, #160	; 0xa0
 800946a:	181b      	adds	r3, r3, r0
 800946c:	19db      	adds	r3, r3, r7
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	f7f9 fa5c 	bl	800292c <__udivsi3>
 8009474:	0003      	movs	r3, r0
 8009476:	001a      	movs	r2, r3
 8009478:	4b26      	ldr	r3, [pc, #152]	; (8009514 <output_data+0xd00>)
 800947a:	635a      	str	r2, [r3, #52]	; 0x34
		}

		if (count3D) {
 800947c:	2284      	movs	r2, #132	; 0x84
 800947e:	18bb      	adds	r3, r7, r2
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00b      	beq.n	800949e <output_data+0xc8a>
			g_appStats.fuelLevel3D = (sumFeq3D / count3D);
 8009486:	18bb      	adds	r3, r7, r2
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	0019      	movs	r1, r3
 800948c:	2388      	movs	r3, #136	; 0x88
 800948e:	18fb      	adds	r3, r7, r3
 8009490:	6818      	ldr	r0, [r3, #0]
 8009492:	f7f9 fa4b 	bl	800292c <__udivsi3>
 8009496:	0003      	movs	r3, r0
 8009498:	001a      	movs	r2, r3
 800949a:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <output_data+0xd00>)
 800949c:	639a      	str	r2, [r3, #56]	; 0x38
		}

		int diff3D = -1;
 800949e:	2301      	movs	r3, #1
 80094a0:	425b      	negs	r3, r3
 80094a2:	66bb      	str	r3, [r7, #104]	; 0x68

		if (ulSecCountMax) {
 80094a4:	218c      	movs	r1, #140	; 0x8c
 80094a6:	187b      	adds	r3, r7, r1
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d005      	beq.n	80094ba <output_data+0xca6>
			diff3D = (ulSecCount - ulSecCountMax);
 80094ae:	4b15      	ldr	r3, [pc, #84]	; (8009504 <output_data+0xcf0>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	187b      	adds	r3, r7, r1
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		int step = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	667b      	str	r3, [r7, #100]	; 0x64

		if (g_config.filterMode == AVERAGE_MODE) {
 80094be:	4b13      	ldr	r3, [pc, #76]	; (800950c <output_data+0xcf8>)
 80094c0:	7ddb      	ldrb	r3, [r3, #23]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d137      	bne.n	8009536 <output_data+0xd22>
			step = 1;
 80094c6:	2301      	movs	r3, #1
 80094c8:	667b      	str	r3, [r7, #100]	; 0x64

			if (g_appStats.fuelLevel3DMin != -1) {
 80094ca:	4b12      	ldr	r3, [pc, #72]	; (8009514 <output_data+0xd00>)
 80094cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ce:	3301      	adds	r3, #1
 80094d0:	d009      	beq.n	80094e6 <output_data+0xcd2>
				fuelLevel = g_appStats.fuelLevel3DMin;
 80094d2:	4b10      	ldr	r3, [pc, #64]	; (8009514 <output_data+0xd00>)
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	22c4      	movs	r2, #196	; 0xc4
 80094d8:	2118      	movs	r1, #24
 80094da:	1852      	adds	r2, r2, r1
 80094dc:	19d2      	adds	r2, r2, r7
 80094de:	6013      	str	r3, [r2, #0]
				step = 11;
 80094e0:	230b      	movs	r3, #11
 80094e2:	667b      	str	r3, [r7, #100]	; 0x64
 80094e4:	e1ad      	b.n	8009842 <output_data+0x102e>
			} else if (g_appStats.fuelLevel3D != -1) {
 80094e6:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <output_data+0xd00>)
 80094e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ea:	3301      	adds	r3, #1
 80094ec:	d014      	beq.n	8009518 <output_data+0xd04>
				fuelLevel = g_appStats.fuelLevel3D;
 80094ee:	4b09      	ldr	r3, [pc, #36]	; (8009514 <output_data+0xd00>)
 80094f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f2:	22c4      	movs	r2, #196	; 0xc4
 80094f4:	2118      	movs	r1, #24
 80094f6:	1852      	adds	r2, r2, r1
 80094f8:	19d2      	adds	r2, r2, r7
 80094fa:	6013      	str	r3, [r2, #0]
				step = 12;
 80094fc:	230c      	movs	r3, #12
 80094fe:	667b      	str	r3, [r7, #100]	; 0x64
 8009500:	e19f      	b.n	8009842 <output_data+0x102e>
 8009502:	46c0      	nop			; (mov r8, r8)
 8009504:	20000360 	.word	0x20000360
 8009508:	20000740 	.word	0x20000740
 800950c:	20000368 	.word	0x20000368
 8009510:	200008e4 	.word	0x200008e4
 8009514:	20000384 	.word	0x20000384
			} else if (g_appStats.fuelLevelAvg != -1) {
 8009518:	4bc0      	ldr	r3, [pc, #768]	; (800981c <output_data+0x1008>)
 800951a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800951c:	3301      	adds	r3, #1
 800951e:	d100      	bne.n	8009522 <output_data+0xd0e>
 8009520:	e18f      	b.n	8009842 <output_data+0x102e>
				fuelLevel = g_appStats.fuelLevelAvg;
 8009522:	4bbe      	ldr	r3, [pc, #760]	; (800981c <output_data+0x1008>)
 8009524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009526:	22c4      	movs	r2, #196	; 0xc4
 8009528:	2118      	movs	r1, #24
 800952a:	1852      	adds	r2, r2, r1
 800952c:	19d2      	adds	r2, r2, r7
 800952e:	6013      	str	r3, [r2, #0]
				step = 13;
 8009530:	230d      	movs	r3, #13
 8009532:	667b      	str	r3, [r7, #100]	; 0x64
 8009534:	e185      	b.n	8009842 <output_data+0x102e>
			}
		} else if (g_config.filterMode == COMPARE_MODE) {
 8009536:	4bba      	ldr	r3, [pc, #744]	; (8009820 <output_data+0x100c>)
 8009538:	7ddb      	ldrb	r3, [r3, #23]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d000      	beq.n	8009540 <output_data+0xd2c>
 800953e:	e0c6      	b.n	80096ce <output_data+0xeba>
			step = 2;
 8009540:	2302      	movs	r3, #2
 8009542:	667b      	str	r3, [r7, #100]	; 0x64

			if (g_appStats.fuelLevel3DSame != -1) {
 8009544:	4bb5      	ldr	r3, [pc, #724]	; (800981c <output_data+0x1008>)
 8009546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009548:	3301      	adds	r3, #1
 800954a:	d009      	beq.n	8009560 <output_data+0xd4c>
				step = 21;
 800954c:	2315      	movs	r3, #21
 800954e:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DSame;
 8009550:	4bb2      	ldr	r3, [pc, #712]	; (800981c <output_data+0x1008>)
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	22c4      	movs	r2, #196	; 0xc4
 8009556:	2118      	movs	r1, #24
 8009558:	1852      	adds	r2, r2, r1
 800955a:	19d2      	adds	r2, r2, r7
 800955c:	6013      	str	r3, [r2, #0]
 800955e:	e028      	b.n	80095b2 <output_data+0xd9e>
			} else if (g_appStats.fuelLevel3DMin != -1) {
 8009560:	4bae      	ldr	r3, [pc, #696]	; (800981c <output_data+0x1008>)
 8009562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009564:	3301      	adds	r3, #1
 8009566:	d009      	beq.n	800957c <output_data+0xd68>
				step = 22;
 8009568:	2316      	movs	r3, #22
 800956a:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DMin;
 800956c:	4bab      	ldr	r3, [pc, #684]	; (800981c <output_data+0x1008>)
 800956e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009570:	22c4      	movs	r2, #196	; 0xc4
 8009572:	2118      	movs	r1, #24
 8009574:	1852      	adds	r2, r2, r1
 8009576:	19d2      	adds	r2, r2, r7
 8009578:	6013      	str	r3, [r2, #0]
 800957a:	e01a      	b.n	80095b2 <output_data+0xd9e>
			} else if (g_appStats.fuelLevel3D != -1) {
 800957c:	4ba7      	ldr	r3, [pc, #668]	; (800981c <output_data+0x1008>)
 800957e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009580:	3301      	adds	r3, #1
 8009582:	d009      	beq.n	8009598 <output_data+0xd84>
				step = 23;
 8009584:	2317      	movs	r3, #23
 8009586:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3D;
 8009588:	4ba4      	ldr	r3, [pc, #656]	; (800981c <output_data+0x1008>)
 800958a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958c:	22c4      	movs	r2, #196	; 0xc4
 800958e:	2118      	movs	r1, #24
 8009590:	1852      	adds	r2, r2, r1
 8009592:	19d2      	adds	r2, r2, r7
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	e00c      	b.n	80095b2 <output_data+0xd9e>
			} else if (g_appStats.fuelLevelAvg != -1) {
 8009598:	4ba0      	ldr	r3, [pc, #640]	; (800981c <output_data+0x1008>)
 800959a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959c:	3301      	adds	r3, #1
 800959e:	d008      	beq.n	80095b2 <output_data+0xd9e>
				step = 24;
 80095a0:	2318      	movs	r3, #24
 80095a2:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevelAvg;
 80095a4:	4b9d      	ldr	r3, [pc, #628]	; (800981c <output_data+0x1008>)
 80095a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a8:	22c4      	movs	r2, #196	; 0xc4
 80095aa:	2118      	movs	r1, #24
 80095ac:	1852      	adds	r2, r2, r1
 80095ae:	19d2      	adds	r2, r2, r7
 80095b0:	6013      	str	r3, [r2, #0]
			}

			for (int i = 0; i < COMPARE_LEVELS; i++) {
 80095b2:	2300      	movs	r3, #0
 80095b4:	663b      	str	r3, [r7, #96]	; 0x60
 80095b6:	e008      	b.n	80095ca <output_data+0xdb6>
				compare_levels[i] = -1;
 80095b8:	4b9a      	ldr	r3, [pc, #616]	; (8009824 <output_data+0x1010>)
 80095ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095bc:	0092      	lsls	r2, r2, #2
 80095be:	2101      	movs	r1, #1
 80095c0:	4249      	negs	r1, r1
 80095c2:	50d1      	str	r1, [r2, r3]
			for (int i = 0; i < COMPARE_LEVELS; i++) {
 80095c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095c6:	3301      	adds	r3, #1
 80095c8:	663b      	str	r3, [r7, #96]	; 0x60
 80095ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095cc:	2b05      	cmp	r3, #5
 80095ce:	ddf3      	ble.n	80095b8 <output_data+0xda4>
			}

			compare_levels[0] = g_appStats.fuelLevel;
 80095d0:	4b92      	ldr	r3, [pc, #584]	; (800981c <output_data+0x1008>)
 80095d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d4:	001a      	movs	r2, r3
 80095d6:	4b93      	ldr	r3, [pc, #588]	; (8009824 <output_data+0x1010>)
 80095d8:	601a      	str	r2, [r3, #0]
			compare_levels[1] = g_appStats.fuelLevelAvg;
 80095da:	4b90      	ldr	r3, [pc, #576]	; (800981c <output_data+0x1008>)
 80095dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095de:	4b91      	ldr	r3, [pc, #580]	; (8009824 <output_data+0x1010>)
 80095e0:	605a      	str	r2, [r3, #4]
			compare_levels[2] = g_appStats.fuelLevel3D;
 80095e2:	4b8e      	ldr	r3, [pc, #568]	; (800981c <output_data+0x1008>)
 80095e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095e6:	4b8f      	ldr	r3, [pc, #572]	; (8009824 <output_data+0x1010>)
 80095e8:	609a      	str	r2, [r3, #8]
			compare_levels[3] = g_appStats.fuelLevel3DMin;
 80095ea:	4b8c      	ldr	r3, [pc, #560]	; (800981c <output_data+0x1008>)
 80095ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095ee:	4b8d      	ldr	r3, [pc, #564]	; (8009824 <output_data+0x1010>)
 80095f0:	60da      	str	r2, [r3, #12]
			compare_levels[4] = g_appStats.fuelLevel3DSame;
 80095f2:	4b8a      	ldr	r3, [pc, #552]	; (800981c <output_data+0x1008>)
 80095f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095f6:	4b8b      	ldr	r3, [pc, #556]	; (8009824 <output_data+0x1010>)
 80095f8:	611a      	str	r2, [r3, #16]
			compare_levels[5] = g_appStats.fuelLevelMinDiff;
 80095fa:	4b88      	ldr	r3, [pc, #544]	; (800981c <output_data+0x1008>)
 80095fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095fe:	4b89      	ldr	r3, [pc, #548]	; (8009824 <output_data+0x1010>)
 8009600:	615a      	str	r2, [r3, #20]

			int minDiff = -1;
 8009602:	2301      	movs	r3, #1
 8009604:	425b      	negs	r3, r3
 8009606:	65fb      	str	r3, [r7, #92]	; 0x5c
			long minDiffLevel = -1;
 8009608:	2301      	movs	r3, #1
 800960a:	425b      	negs	r3, r3
 800960c:	65bb      	str	r3, [r7, #88]	; 0x58
			int countDiff = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	657b      	str	r3, [r7, #84]	; 0x54

			for (int i = 0; i < COMPARE_LEVELS; i++) {
 8009612:	2300      	movs	r3, #0
 8009614:	653b      	str	r3, [r7, #80]	; 0x50
 8009616:	e04a      	b.n	80096ae <output_data+0xe9a>
				if (compare_levels[i] >= 0) {
 8009618:	4b82      	ldr	r3, [pc, #520]	; (8009824 <output_data+0x1010>)
 800961a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800961c:	0092      	lsls	r2, r2, #2
 800961e:	58d3      	ldr	r3, [r2, r3]
 8009620:	2b00      	cmp	r3, #0
 8009622:	db41      	blt.n	80096a8 <output_data+0xe94>
					long sumDiff = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	64fb      	str	r3, [r7, #76]	; 0x4c
					long level = compare_levels[i];
 8009628:	4b7e      	ldr	r3, [pc, #504]	; (8009824 <output_data+0x1010>)
 800962a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800962c:	0092      	lsls	r2, r2, #2
 800962e:	58d3      	ldr	r3, [r2, r3]
 8009630:	637b      	str	r3, [r7, #52]	; 0x34

					for (int j = 0; j < COMPARE_LEVELS; j++) {
 8009632:	2300      	movs	r3, #0
 8009634:	64bb      	str	r3, [r7, #72]	; 0x48
 8009636:	e01d      	b.n	8009674 <output_data+0xe60>
						if (compare_levels[j] >= 0 && i != j) {
 8009638:	4b7a      	ldr	r3, [pc, #488]	; (8009824 <output_data+0x1010>)
 800963a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800963c:	0092      	lsls	r2, r2, #2
 800963e:	58d3      	ldr	r3, [r2, r3]
 8009640:	2b00      	cmp	r3, #0
 8009642:	db14      	blt.n	800966e <output_data+0xe5a>
 8009644:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009648:	429a      	cmp	r2, r3
 800964a:	d010      	beq.n	800966e <output_data+0xe5a>
							long diff = abs(compare_levels[j] - level);
 800964c:	4b75      	ldr	r3, [pc, #468]	; (8009824 <output_data+0x1010>)
 800964e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009650:	0092      	lsls	r2, r2, #2
 8009652:	58d2      	ldr	r2, [r2, r3]
 8009654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	17da      	asrs	r2, r3, #31
 800965a:	189b      	adds	r3, r3, r2
 800965c:	4053      	eors	r3, r2
 800965e:	633b      	str	r3, [r7, #48]	; 0x30
							sumDiff += diff;
 8009660:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	18d3      	adds	r3, r2, r3
 8009666:	64fb      	str	r3, [r7, #76]	; 0x4c
							countDiff++;
 8009668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800966a:	3301      	adds	r3, #1
 800966c:	657b      	str	r3, [r7, #84]	; 0x54
					for (int j = 0; j < COMPARE_LEVELS; j++) {
 800966e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009670:	3301      	adds	r3, #1
 8009672:	64bb      	str	r3, [r7, #72]	; 0x48
 8009674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009676:	2b05      	cmp	r3, #5
 8009678:	ddde      	ble.n	8009638 <output_data+0xe24>
						}
					}

					if (countDiff && (minDiff == -1 || (sumDiff / countDiff) < minDiff)) {
 800967a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800967c:	2b00      	cmp	r3, #0
 800967e:	d013      	beq.n	80096a8 <output_data+0xe94>
 8009680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009682:	3301      	adds	r3, #1
 8009684:	d008      	beq.n	8009698 <output_data+0xe84>
 8009686:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009688:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800968a:	f7f9 f9d9 	bl	8002a40 <__divsi3>
 800968e:	0003      	movs	r3, r0
 8009690:	001a      	movs	r2, r3
 8009692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009694:	4293      	cmp	r3, r2
 8009696:	dd07      	ble.n	80096a8 <output_data+0xe94>
						minDiffLevel = level;
 8009698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800969a:	65bb      	str	r3, [r7, #88]	; 0x58
						minDiff = (sumDiff / countDiff);
 800969c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800969e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80096a0:	f7f9 f9ce 	bl	8002a40 <__divsi3>
 80096a4:	0003      	movs	r3, r0
 80096a6:	65fb      	str	r3, [r7, #92]	; 0x5c
			for (int i = 0; i < COMPARE_LEVELS; i++) {
 80096a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096aa:	3301      	adds	r3, #1
 80096ac:	653b      	str	r3, [r7, #80]	; 0x50
 80096ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b0:	2b05      	cmp	r3, #5
 80096b2:	ddb1      	ble.n	8009618 <output_data+0xe04>
					}
				}
			}

			if (minDiffLevel >= 0) {
 80096b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	da00      	bge.n	80096bc <output_data+0xea8>
 80096ba:	e0c2      	b.n	8009842 <output_data+0x102e>
				step = 25;
 80096bc:	2319      	movs	r3, #25
 80096be:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = minDiffLevel;
 80096c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096c2:	22c4      	movs	r2, #196	; 0xc4
 80096c4:	2118      	movs	r1, #24
 80096c6:	1852      	adds	r2, r2, r1
 80096c8:	19d2      	adds	r2, r2, r7
 80096ca:	6013      	str	r3, [r2, #0]
 80096cc:	e0b9      	b.n	8009842 <output_data+0x102e>
			}
		} else if (g_config.filterMode == DIRECT_MODE) {
 80096ce:	4b54      	ldr	r3, [pc, #336]	; (8009820 <output_data+0x100c>)
 80096d0:	7ddb      	ldrb	r3, [r3, #23]
 80096d2:	2b04      	cmp	r3, #4
 80096d4:	d102      	bne.n	80096dc <output_data+0xec8>
			//keep value as same current
			step = 3;
 80096d6:	2303      	movs	r3, #3
 80096d8:	667b      	str	r3, [r7, #100]	; 0x64
 80096da:	e0b2      	b.n	8009842 <output_data+0x102e>
		} else if (g_config.filterMode == MIN_MODE) {
 80096dc:	4b50      	ldr	r3, [pc, #320]	; (8009820 <output_data+0x100c>)
 80096de:	7ddb      	ldrb	r3, [r3, #23]
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d11e      	bne.n	8009722 <output_data+0xf0e>
			//keep value as same current
			step = 4;
 80096e4:	2304      	movs	r3, #4
 80096e6:	667b      	str	r3, [r7, #100]	; 0x64
			if (g_appStats.fuelLevelMinDiff != -1) {
 80096e8:	4b4c      	ldr	r3, [pc, #304]	; (800981c <output_data+0x1008>)
 80096ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ec:	3301      	adds	r3, #1
 80096ee:	d009      	beq.n	8009704 <output_data+0xef0>
				fuelLevel = g_appStats.fuelLevelMinDiff;
 80096f0:	4b4a      	ldr	r3, [pc, #296]	; (800981c <output_data+0x1008>)
 80096f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f4:	22c4      	movs	r2, #196	; 0xc4
 80096f6:	2118      	movs	r1, #24
 80096f8:	1852      	adds	r2, r2, r1
 80096fa:	19d2      	adds	r2, r2, r7
 80096fc:	6013      	str	r3, [r2, #0]
				step = 41;
 80096fe:	2329      	movs	r3, #41	; 0x29
 8009700:	667b      	str	r3, [r7, #100]	; 0x64
 8009702:	e09e      	b.n	8009842 <output_data+0x102e>
			} else if (g_appStats.fuelLevelAvg != -1) {
 8009704:	4b45      	ldr	r3, [pc, #276]	; (800981c <output_data+0x1008>)
 8009706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009708:	3301      	adds	r3, #1
 800970a:	d100      	bne.n	800970e <output_data+0xefa>
 800970c:	e099      	b.n	8009842 <output_data+0x102e>
				step = 42;
 800970e:	232a      	movs	r3, #42	; 0x2a
 8009710:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevelAvg;
 8009712:	4b42      	ldr	r3, [pc, #264]	; (800981c <output_data+0x1008>)
 8009714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009716:	22c4      	movs	r2, #196	; 0xc4
 8009718:	2118      	movs	r1, #24
 800971a:	1852      	adds	r2, r2, r1
 800971c:	19d2      	adds	r2, r2, r7
 800971e:	6013      	str	r3, [r2, #0]
 8009720:	e08f      	b.n	8009842 <output_data+0x102e>
			}
		} else if (g_config.filterMode == ACCERLATE_MODE_2) {
 8009722:	4b3f      	ldr	r3, [pc, #252]	; (8009820 <output_data+0x100c>)
 8009724:	7ddb      	ldrb	r3, [r3, #23]
 8009726:	2b05      	cmp	r3, #5
 8009728:	d147      	bne.n	80097ba <output_data+0xfa6>
			step = 5;
 800972a:	2305      	movs	r3, #5
 800972c:	667b      	str	r3, [r7, #100]	; 0x64
			if (g_appStats.fuelLevel3DSame != -1) {
 800972e:	4b3b      	ldr	r3, [pc, #236]	; (800981c <output_data+0x1008>)
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	3301      	adds	r3, #1
 8009734:	d009      	beq.n	800974a <output_data+0xf36>
				step = 51;
 8009736:	2333      	movs	r3, #51	; 0x33
 8009738:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DSame;
 800973a:	4b38      	ldr	r3, [pc, #224]	; (800981c <output_data+0x1008>)
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	22c4      	movs	r2, #196	; 0xc4
 8009740:	2118      	movs	r1, #24
 8009742:	1852      	adds	r2, r2, r1
 8009744:	19d2      	adds	r2, r2, r7
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	e07b      	b.n	8009842 <output_data+0x102e>
			} else if (g_appStats.fuelLevel3DMin != -1) {
 800974a:	4b34      	ldr	r3, [pc, #208]	; (800981c <output_data+0x1008>)
 800974c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974e:	3301      	adds	r3, #1
 8009750:	d009      	beq.n	8009766 <output_data+0xf52>
				step = 52;
 8009752:	2334      	movs	r3, #52	; 0x34
 8009754:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DMin;
 8009756:	4b31      	ldr	r3, [pc, #196]	; (800981c <output_data+0x1008>)
 8009758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975a:	22c4      	movs	r2, #196	; 0xc4
 800975c:	2118      	movs	r1, #24
 800975e:	1852      	adds	r2, r2, r1
 8009760:	19d2      	adds	r2, r2, r7
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	e06d      	b.n	8009842 <output_data+0x102e>
			} else if (g_appStats.fuelLevel3D != -1) {
 8009766:	4b2d      	ldr	r3, [pc, #180]	; (800981c <output_data+0x1008>)
 8009768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976a:	3301      	adds	r3, #1
 800976c:	d009      	beq.n	8009782 <output_data+0xf6e>
				step = 53;
 800976e:	2335      	movs	r3, #53	; 0x35
 8009770:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3D;
 8009772:	4b2a      	ldr	r3, [pc, #168]	; (800981c <output_data+0x1008>)
 8009774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009776:	22c4      	movs	r2, #196	; 0xc4
 8009778:	2118      	movs	r1, #24
 800977a:	1852      	adds	r2, r2, r1
 800977c:	19d2      	adds	r2, r2, r7
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	e05f      	b.n	8009842 <output_data+0x102e>
			} else if (g_appStats.fuelLevelMinDiff != -1) {
 8009782:	4b26      	ldr	r3, [pc, #152]	; (800981c <output_data+0x1008>)
 8009784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009786:	3301      	adds	r3, #1
 8009788:	d009      	beq.n	800979e <output_data+0xf8a>
				fuelLevel = g_appStats.fuelLevelMinDiff;
 800978a:	4b24      	ldr	r3, [pc, #144]	; (800981c <output_data+0x1008>)
 800978c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800978e:	22c4      	movs	r2, #196	; 0xc4
 8009790:	2118      	movs	r1, #24
 8009792:	1852      	adds	r2, r2, r1
 8009794:	19d2      	adds	r2, r2, r7
 8009796:	6013      	str	r3, [r2, #0]
				step = 54;
 8009798:	2336      	movs	r3, #54	; 0x36
 800979a:	667b      	str	r3, [r7, #100]	; 0x64
 800979c:	e051      	b.n	8009842 <output_data+0x102e>
			} else if (g_appStats.fuelLevelAvg != -1) {
 800979e:	4b1f      	ldr	r3, [pc, #124]	; (800981c <output_data+0x1008>)
 80097a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a2:	3301      	adds	r3, #1
 80097a4:	d04d      	beq.n	8009842 <output_data+0x102e>
				step = 55;
 80097a6:	2337      	movs	r3, #55	; 0x37
 80097a8:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevelAvg;
 80097aa:	4b1c      	ldr	r3, [pc, #112]	; (800981c <output_data+0x1008>)
 80097ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ae:	22c4      	movs	r2, #196	; 0xc4
 80097b0:	2118      	movs	r1, #24
 80097b2:	1852      	adds	r2, r2, r1
 80097b4:	19d2      	adds	r2, r2, r7
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	e043      	b.n	8009842 <output_data+0x102e>
			}
		} else if (g_config.filterMode == ACCERLATE_MODE) {
 80097ba:	4b19      	ldr	r3, [pc, #100]	; (8009820 <output_data+0x100c>)
 80097bc:	7ddb      	ldrb	r3, [r3, #23]
 80097be:	2b06      	cmp	r3, #6
 80097c0:	d13f      	bne.n	8009842 <output_data+0x102e>
			step = 6;
 80097c2:	2306      	movs	r3, #6
 80097c4:	667b      	str	r3, [r7, #100]	; 0x64
			if (g_appStats.fuelLevel3DSame != -1) {
 80097c6:	4b15      	ldr	r3, [pc, #84]	; (800981c <output_data+0x1008>)
 80097c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ca:	3301      	adds	r3, #1
 80097cc:	d009      	beq.n	80097e2 <output_data+0xfce>
				step = 61;
 80097ce:	233d      	movs	r3, #61	; 0x3d
 80097d0:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DSame;
 80097d2:	4b12      	ldr	r3, [pc, #72]	; (800981c <output_data+0x1008>)
 80097d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d6:	22c4      	movs	r2, #196	; 0xc4
 80097d8:	2118      	movs	r1, #24
 80097da:	1852      	adds	r2, r2, r1
 80097dc:	19d2      	adds	r2, r2, r7
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	e02f      	b.n	8009842 <output_data+0x102e>
			} else if (g_appStats.fuelLevel3DMin != -1) {
 80097e2:	4b0e      	ldr	r3, [pc, #56]	; (800981c <output_data+0x1008>)
 80097e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e6:	3301      	adds	r3, #1
 80097e8:	d009      	beq.n	80097fe <output_data+0xfea>
				step = 62;
 80097ea:	233e      	movs	r3, #62	; 0x3e
 80097ec:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3DMin;
 80097ee:	4b0b      	ldr	r3, [pc, #44]	; (800981c <output_data+0x1008>)
 80097f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f2:	22c4      	movs	r2, #196	; 0xc4
 80097f4:	2118      	movs	r1, #24
 80097f6:	1852      	adds	r2, r2, r1
 80097f8:	19d2      	adds	r2, r2, r7
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	e021      	b.n	8009842 <output_data+0x102e>
			} else if (g_appStats.fuelLevel3D != -1) {
 80097fe:	4b07      	ldr	r3, [pc, #28]	; (800981c <output_data+0x1008>)
 8009800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009802:	3301      	adds	r3, #1
 8009804:	d010      	beq.n	8009828 <output_data+0x1014>
				step = 63;
 8009806:	233f      	movs	r3, #63	; 0x3f
 8009808:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevel3D;
 800980a:	4b04      	ldr	r3, [pc, #16]	; (800981c <output_data+0x1008>)
 800980c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980e:	22c4      	movs	r2, #196	; 0xc4
 8009810:	2118      	movs	r1, #24
 8009812:	1852      	adds	r2, r2, r1
 8009814:	19d2      	adds	r2, r2, r7
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	e013      	b.n	8009842 <output_data+0x102e>
 800981a:	46c0      	nop			; (mov r8, r8)
 800981c:	20000384 	.word	0x20000384
 8009820:	20000368 	.word	0x20000368
 8009824:	200000a0 	.word	0x200000a0
			} else if (g_appStats.fuelLevelAvg != -1) {
 8009828:	4bab      	ldr	r3, [pc, #684]	; (8009ad8 <output_data+0x12c4>)
 800982a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982c:	3301      	adds	r3, #1
 800982e:	d008      	beq.n	8009842 <output_data+0x102e>
				step = 63;
 8009830:	233f      	movs	r3, #63	; 0x3f
 8009832:	667b      	str	r3, [r7, #100]	; 0x64
				fuelLevel = g_appStats.fuelLevelAvg;
 8009834:	4ba8      	ldr	r3, [pc, #672]	; (8009ad8 <output_data+0x12c4>)
 8009836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009838:	22c4      	movs	r2, #196	; 0xc4
 800983a:	2118      	movs	r1, #24
 800983c:	1852      	adds	r2, r2, r1
 800983e:	19d2      	adds	r2, r2, r7
 8009840:	6013      	str	r3, [r2, #0]
			}
		} else { //delay mode
			//direct mode
		}

		if (ulSecCount >= (SKS_TRUNC_ERROR_SEC * 2)) {
 8009842:	4ba6      	ldr	r3, [pc, #664]	; (8009adc <output_data+0x12c8>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b09      	cmp	r3, #9
 8009848:	d800      	bhi.n	800984c <output_data+0x1038>
 800984a:	e13c      	b.n	8009ac6 <output_data+0x12b2>
			if (g_appStats.debugOn == 1) {
 800984c:	4ba2      	ldr	r3, [pc, #648]	; (8009ad8 <output_data+0x12c4>)
 800984e:	224d      	movs	r2, #77	; 0x4d
 8009850:	5c9b      	ldrb	r3, [r3, r2]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d157      	bne.n	8009906 <output_data+0x10f2>
				if (ulSecCount != lastSentToTracker) {
 8009856:	4ba1      	ldr	r3, [pc, #644]	; (8009adc <output_data+0x12c8>)
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	4ba1      	ldr	r3, [pc, #644]	; (8009ae0 <output_data+0x12cc>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d100      	bne.n	8009864 <output_data+0x1050>
 8009862:	e130      	b.n	8009ac6 <output_data+0x12b2>
					xprintf("F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%d FU=%u EM=%u x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d step=%d T=%d E=%d\r\n",
 8009864:	4b9c      	ldr	r3, [pc, #624]	; (8009ad8 <output_data+0x12c4>)
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	469b      	mov	fp, r3
 800986a:	4b9b      	ldr	r3, [pc, #620]	; (8009ad8 <output_data+0x12c4>)
 800986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	4b99      	ldr	r3, [pc, #612]	; (8009ad8 <output_data+0x12c4>)
 8009872:	69d9      	ldr	r1, [r3, #28]
 8009874:	6139      	str	r1, [r7, #16]
 8009876:	4b98      	ldr	r3, [pc, #608]	; (8009ad8 <output_data+0x12c4>)
 8009878:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800987a:	4b97      	ldr	r3, [pc, #604]	; (8009ad8 <output_data+0x12c4>)
 800987c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800987e:	4b96      	ldr	r3, [pc, #600]	; (8009ad8 <output_data+0x12c4>)
 8009880:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8009882:	4b95      	ldr	r3, [pc, #596]	; (8009ad8 <output_data+0x12c4>)
 8009884:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009886:	4684      	mov	ip, r0
 8009888:	4b93      	ldr	r3, [pc, #588]	; (8009ad8 <output_data+0x12c4>)
 800988a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800988c:	4680      	mov	r8, r0
 800988e:	4b95      	ldr	r3, [pc, #596]	; (8009ae4 <output_data+0x12d0>)
 8009890:	68d8      	ldr	r0, [r3, #12]
 8009892:	4681      	mov	r9, r0
 8009894:	4b93      	ldr	r3, [pc, #588]	; (8009ae4 <output_data+0x12d0>)
 8009896:	6918      	ldr	r0, [r3, #16]
 8009898:	4682      	mov	sl, r0
 800989a:	4b93      	ldr	r3, [pc, #588]	; (8009ae8 <output_data+0x12d4>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	4b8d      	ldr	r3, [pc, #564]	; (8009ad8 <output_data+0x12c4>)
 80098a2:	6e19      	ldr	r1, [r3, #96]	; 0x60
							g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq, fuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3D,
							g_appStats.fuelLevel3DSame, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_config.fullValue, g_config.emptyValue, roll,
							pitch, yaw, idx3D, count3D, diff3D, step, g_appStats.internalTemp, g_appStats.errorState);
 80098a4:	4a8c      	ldr	r2, [pc, #560]	; (8009ad8 <output_data+0x12c4>)
 80098a6:	2365      	movs	r3, #101	; 0x65
 80098a8:	5cd3      	ldrb	r3, [r2, r3]
					xprintf("F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%d FU=%u EM=%u x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d step=%d T=%d E=%d\r\n",
 80098aa:	4890      	ldr	r0, [pc, #576]	; (8009aec <output_data+0x12d8>)
 80098ac:	9310      	str	r3, [sp, #64]	; 0x40
 80098ae:	910f      	str	r1, [sp, #60]	; 0x3c
 80098b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098b2:	930e      	str	r3, [sp, #56]	; 0x38
 80098b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098b6:	930d      	str	r3, [sp, #52]	; 0x34
 80098b8:	2384      	movs	r3, #132	; 0x84
 80098ba:	18fb      	adds	r3, r7, r3
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	930c      	str	r3, [sp, #48]	; 0x30
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80098c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098c6:	930a      	str	r3, [sp, #40]	; 0x28
 80098c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ca:	9309      	str	r3, [sp, #36]	; 0x24
 80098cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ce:	9308      	str	r3, [sp, #32]
 80098d0:	4652      	mov	r2, sl
 80098d2:	9207      	str	r2, [sp, #28]
 80098d4:	464a      	mov	r2, r9
 80098d6:	9206      	str	r2, [sp, #24]
 80098d8:	4642      	mov	r2, r8
 80098da:	9205      	str	r2, [sp, #20]
 80098dc:	4662      	mov	r2, ip
 80098de:	9204      	str	r2, [sp, #16]
 80098e0:	9603      	str	r6, [sp, #12]
 80098e2:	9502      	str	r5, [sp, #8]
 80098e4:	9401      	str	r4, [sp, #4]
 80098e6:	24c4      	movs	r4, #196	; 0xc4
 80098e8:	2318      	movs	r3, #24
 80098ea:	18e3      	adds	r3, r4, r3
 80098ec:	19dc      	adds	r4, r3, r7
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	4659      	mov	r1, fp
 80098f8:	f001 f8da 	bl	800aab0 <xprintf>
					lastSentToTracker = ulSecCount;
 80098fc:	4b77      	ldr	r3, [pc, #476]	; (8009adc <output_data+0x12c8>)
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	4b77      	ldr	r3, [pc, #476]	; (8009ae0 <output_data+0x12cc>)
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	e0df      	b.n	8009ac6 <output_data+0x12b2>
				}
			} else {
				if (g_config.interval && (ulSecCount - lastSentToTracker) >= g_config.interval) {
 8009906:	4b77      	ldr	r3, [pc, #476]	; (8009ae4 <output_data+0x12d0>)
 8009908:	7e9b      	ldrb	r3, [r3, #26]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d100      	bne.n	8009910 <output_data+0x10fc>
 800990e:	e0da      	b.n	8009ac6 <output_data+0x12b2>
 8009910:	4b72      	ldr	r3, [pc, #456]	; (8009adc <output_data+0x12c8>)
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	4b72      	ldr	r3, [pc, #456]	; (8009ae0 <output_data+0x12cc>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	4a72      	ldr	r2, [pc, #456]	; (8009ae4 <output_data+0x12d0>)
 800991c:	7e92      	ldrb	r2, [r2, #26]
 800991e:	4293      	cmp	r3, r2
 8009920:	d200      	bcs.n	8009924 <output_data+0x1110>
 8009922:	e0d0      	b.n	8009ac6 <output_data+0x12b2>
					if (fuelLevel < 0) {
 8009924:	22c4      	movs	r2, #196	; 0xc4
 8009926:	2118      	movs	r1, #24
 8009928:	1853      	adds	r3, r2, r1
 800992a:	19db      	adds	r3, r3, r7
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	da03      	bge.n	800993a <output_data+0x1126>
						fuelLevel = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	1852      	adds	r2, r2, r1
 8009936:	19d2      	adds	r2, r2, r7
 8009938:	6013      	str	r3, [r2, #0]

					if (g_appStats.fuelLevel < 0) {
						g_appStats.fuelLevel = 0;
					}

					if (g_appStats.fuelLevelAvg < 0) {
 800993a:	4b67      	ldr	r3, [pc, #412]	; (8009ad8 <output_data+0x12c4>)
 800993c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993e:	2b00      	cmp	r3, #0
 8009940:	da02      	bge.n	8009948 <output_data+0x1134>
						g_appStats.fuelLevelAvg = 0;
 8009942:	4b65      	ldr	r3, [pc, #404]	; (8009ad8 <output_data+0x12c4>)
 8009944:	2200      	movs	r2, #0
 8009946:	635a      	str	r2, [r3, #52]	; 0x34
					}

					if (g_appStats.fuelLevel3DMin < 0) {
 8009948:	4b63      	ldr	r3, [pc, #396]	; (8009ad8 <output_data+0x12c4>)
 800994a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800994c:	2b00      	cmp	r3, #0
 800994e:	da02      	bge.n	8009956 <output_data+0x1142>
						g_appStats.fuelLevel3DMin = 0;
 8009950:	4b61      	ldr	r3, [pc, #388]	; (8009ad8 <output_data+0x12c4>)
 8009952:	2200      	movs	r2, #0
 8009954:	63da      	str	r2, [r3, #60]	; 0x3c
					}

					if (g_appStats.fuelLevel3DSame < 0) {
 8009956:	4b60      	ldr	r3, [pc, #384]	; (8009ad8 <output_data+0x12c4>)
 8009958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995a:	2b00      	cmp	r3, #0
 800995c:	da02      	bge.n	8009964 <output_data+0x1150>
						g_appStats.fuelLevel3DSame = 0;
 800995e:	4b5e      	ldr	r3, [pc, #376]	; (8009ad8 <output_data+0x12c4>)
 8009960:	2200      	movs	r2, #0
 8009962:	641a      	str	r2, [r3, #64]	; 0x40
					}

					if (g_appStats.fuelLevel3D < 0) {
 8009964:	4b5c      	ldr	r3, [pc, #368]	; (8009ad8 <output_data+0x12c4>)
 8009966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009968:	2b00      	cmp	r3, #0
 800996a:	da02      	bge.n	8009972 <output_data+0x115e>
						g_appStats.fuelLevel3D = 0;
 800996c:	4b5a      	ldr	r3, [pc, #360]	; (8009ad8 <output_data+0x12c4>)
 800996e:	2200      	movs	r2, #0
 8009970:	639a      	str	r2, [r3, #56]	; 0x38
					}

					if (g_appStats.debugOn == 99) {
 8009972:	4b59      	ldr	r3, [pc, #356]	; (8009ad8 <output_data+0x12c4>)
 8009974:	224d      	movs	r2, #77	; 0x4d
 8009976:	5c9b      	ldrb	r3, [r3, r2]
 8009978:	2b63      	cmp	r3, #99	; 0x63
 800997a:	d156      	bne.n	8009a2a <output_data+0x1216>
						xprintf(
 800997c:	4b56      	ldr	r3, [pc, #344]	; (8009ad8 <output_data+0x12c4>)
 800997e:	6a1b      	ldr	r3, [r3, #32]
 8009980:	4699      	mov	r9, r3
 8009982:	4b55      	ldr	r3, [pc, #340]	; (8009ad8 <output_data+0x12c4>)
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	469a      	mov	sl, r3
 8009988:	4b53      	ldr	r3, [pc, #332]	; (8009ad8 <output_data+0x12c4>)
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	469b      	mov	fp, r3
 800998e:	4b52      	ldr	r3, [pc, #328]	; (8009ad8 <output_data+0x12c4>)
 8009990:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009992:	4b51      	ldr	r3, [pc, #324]	; (8009ad8 <output_data+0x12c4>)
 8009994:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009996:	4b50      	ldr	r3, [pc, #320]	; (8009ad8 <output_data+0x12c4>)
 8009998:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800999a:	4b4f      	ldr	r3, [pc, #316]	; (8009ad8 <output_data+0x12c4>)
 800999c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999e:	469c      	mov	ip, r3
 80099a0:	4b4d      	ldr	r3, [pc, #308]	; (8009ad8 <output_data+0x12c4>)
 80099a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a4:	4698      	mov	r8, r3
 80099a6:	4b50      	ldr	r3, [pc, #320]	; (8009ae8 <output_data+0x12d4>)
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	617b      	str	r3, [r7, #20]
								"F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d tO=%d fM=%d dX=%d dY=%d ST=%d T=%d E=%d\r\n",
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq, fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg,
								g_appStats.directFuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw, idx3D, count3D, diff3D,
								g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 80099ac:	4b4d      	ldr	r3, [pc, #308]	; (8009ae4 <output_data+0x12d0>)
 80099ae:	8a9b      	ldrh	r3, [r3, #20]
						xprintf(
 80099b0:	613b      	str	r3, [r7, #16]
								g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 80099b2:	4b4c      	ldr	r3, [pc, #304]	; (8009ae4 <output_data+0x12d0>)
 80099b4:	7ddb      	ldrb	r3, [r3, #23]
						xprintf(
 80099b6:	60fb      	str	r3, [r7, #12]
								g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 80099b8:	4b4a      	ldr	r3, [pc, #296]	; (8009ae4 <output_data+0x12d0>)
 80099ba:	7e1b      	ldrb	r3, [r3, #24]
						xprintf(
 80099bc:	60bb      	str	r3, [r7, #8]
								g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 80099be:	4b49      	ldr	r3, [pc, #292]	; (8009ae4 <output_data+0x12d0>)
 80099c0:	7e5b      	ldrb	r3, [r3, #25]
						xprintf(
 80099c2:	607b      	str	r3, [r7, #4]
 80099c4:	4b44      	ldr	r3, [pc, #272]	; (8009ad8 <output_data+0x12c4>)
 80099c6:	6e19      	ldr	r1, [r3, #96]	; 0x60
								g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 80099c8:	4a43      	ldr	r2, [pc, #268]	; (8009ad8 <output_data+0x12c4>)
 80099ca:	2365      	movs	r3, #101	; 0x65
 80099cc:	5cd3      	ldrb	r3, [r2, r3]
						xprintf(
 80099ce:	4848      	ldr	r0, [pc, #288]	; (8009af0 <output_data+0x12dc>)
 80099d0:	9312      	str	r3, [sp, #72]	; 0x48
 80099d2:	9111      	str	r1, [sp, #68]	; 0x44
 80099d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099d6:	9310      	str	r3, [sp, #64]	; 0x40
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	920f      	str	r2, [sp, #60]	; 0x3c
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	920e      	str	r2, [sp, #56]	; 0x38
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	920d      	str	r2, [sp, #52]	; 0x34
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	920c      	str	r2, [sp, #48]	; 0x30
 80099e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80099ec:	2384      	movs	r3, #132	; 0x84
 80099ee:	18fb      	adds	r3, r7, r3
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	930a      	str	r3, [sp, #40]	; 0x28
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	9309      	str	r3, [sp, #36]	; 0x24
 80099f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fa:	9308      	str	r3, [sp, #32]
 80099fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099fe:	9307      	str	r3, [sp, #28]
 8009a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a02:	9306      	str	r3, [sp, #24]
 8009a04:	4643      	mov	r3, r8
 8009a06:	9305      	str	r3, [sp, #20]
 8009a08:	4663      	mov	r3, ip
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	9603      	str	r6, [sp, #12]
 8009a0e:	9502      	str	r5, [sp, #8]
 8009a10:	9401      	str	r4, [sp, #4]
 8009a12:	23c4      	movs	r3, #196	; 0xc4
 8009a14:	2218      	movs	r2, #24
 8009a16:	189b      	adds	r3, r3, r2
 8009a18:	19db      	adds	r3, r3, r7
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	465b      	mov	r3, fp
 8009a20:	4652      	mov	r2, sl
 8009a22:	4649      	mov	r1, r9
 8009a24:	f001 f844 	bl	800aab0 <xprintf>
 8009a28:	e047      	b.n	8009aba <output_data+0x12a6>
					} else {
						xprintf(
 8009a2a:	4b2b      	ldr	r3, [pc, #172]	; (8009ad8 <output_data+0x12c4>)
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	469a      	mov	sl, r3
 8009a30:	4b29      	ldr	r3, [pc, #164]	; (8009ad8 <output_data+0x12c4>)
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	469b      	mov	fp, r3
 8009a36:	4b28      	ldr	r3, [pc, #160]	; (8009ad8 <output_data+0x12c4>)
 8009a38:	69db      	ldr	r3, [r3, #28]
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	4b26      	ldr	r3, [pc, #152]	; (8009ad8 <output_data+0x12c4>)
 8009a3e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009a40:	4b25      	ldr	r3, [pc, #148]	; (8009ad8 <output_data+0x12c4>)
 8009a42:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009a44:	4b24      	ldr	r3, [pc, #144]	; (8009ad8 <output_data+0x12c4>)
 8009a46:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8009a48:	4b23      	ldr	r3, [pc, #140]	; (8009ad8 <output_data+0x12c4>)
 8009a4a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8009a4c:	4b22      	ldr	r3, [pc, #136]	; (8009ad8 <output_data+0x12c4>)
 8009a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a50:	4694      	mov	ip, r2
 8009a52:	4b21      	ldr	r3, [pc, #132]	; (8009ad8 <output_data+0x12c4>)
 8009a54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009a56:	4690      	mov	r8, r2
								"F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d T=%d E=%d FU=%x EM=%x fM=%d V=%s ST=%d\r\n",
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq, fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg,
								g_appStats.directFuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw, g_appStats.internalTemp,
								g_appStats.errorState, g_config.fullValue, g_config.emptyValue, g_config.filterMode, VERSION_NO, step);
 8009a58:	4b1f      	ldr	r3, [pc, #124]	; (8009ad8 <output_data+0x12c4>)
 8009a5a:	2265      	movs	r2, #101	; 0x65
 8009a5c:	5c9b      	ldrb	r3, [r3, r2]
						xprintf(
 8009a5e:	613b      	str	r3, [r7, #16]
 8009a60:	4b20      	ldr	r3, [pc, #128]	; (8009ae4 <output_data+0x12d0>)
 8009a62:	68da      	ldr	r2, [r3, #12]
 8009a64:	4b1f      	ldr	r3, [pc, #124]	; (8009ae4 <output_data+0x12d0>)
 8009a66:	6918      	ldr	r0, [r3, #16]
 8009a68:	4681      	mov	r9, r0
								g_appStats.errorState, g_config.fullValue, g_config.emptyValue, g_config.filterMode, VERSION_NO, step);
 8009a6a:	4b1e      	ldr	r3, [pc, #120]	; (8009ae4 <output_data+0x12d0>)
 8009a6c:	7ddb      	ldrb	r3, [r3, #23]
						xprintf(
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	4820      	ldr	r0, [pc, #128]	; (8009af4 <output_data+0x12e0>)
 8009a72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a74:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a76:	4b20      	ldr	r3, [pc, #128]	; (8009af8 <output_data+0x12e4>)
 8009a78:	930e      	str	r3, [sp, #56]	; 0x38
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a7e:	464b      	mov	r3, r9
 8009a80:	930c      	str	r3, [sp, #48]	; 0x30
 8009a82:	920b      	str	r2, [sp, #44]	; 0x2c
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	920a      	str	r2, [sp, #40]	; 0x28
 8009a88:	4642      	mov	r2, r8
 8009a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a8e:	9308      	str	r3, [sp, #32]
 8009a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a92:	9307      	str	r3, [sp, #28]
 8009a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a96:	9306      	str	r3, [sp, #24]
 8009a98:	4662      	mov	r2, ip
 8009a9a:	9205      	str	r2, [sp, #20]
 8009a9c:	9604      	str	r6, [sp, #16]
 8009a9e:	9503      	str	r5, [sp, #12]
 8009aa0:	9402      	str	r4, [sp, #8]
 8009aa2:	9101      	str	r1, [sp, #4]
 8009aa4:	22c4      	movs	r2, #196	; 0xc4
 8009aa6:	2318      	movs	r3, #24
 8009aa8:	18d3      	adds	r3, r2, r3
 8009aaa:	19da      	adds	r2, r3, r7
 8009aac:	6813      	ldr	r3, [r2, #0]
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	465a      	mov	r2, fp
 8009ab4:	4651      	mov	r1, sl
 8009ab6:	f000 fffb 	bl	800aab0 <xprintf>
					}

					lastSentToTracker = ulSecCount;
 8009aba:	4b08      	ldr	r3, [pc, #32]	; (8009adc <output_data+0x12c8>)
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	4b08      	ldr	r3, [pc, #32]	; (8009ae0 <output_data+0x12cc>)
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	e000      	b.n	8009ac6 <output_data+0x12b2>
		return;
 8009ac4:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	b039      	add	sp, #228	; 0xe4
 8009aca:	bcf0      	pop	{r4, r5, r6, r7}
 8009acc:	46bb      	mov	fp, r7
 8009ace:	46b2      	mov	sl, r6
 8009ad0:	46a9      	mov	r9, r5
 8009ad2:	46a0      	mov	r8, r4
 8009ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad6:	46c0      	nop			; (mov r8, r8)
 8009ad8:	20000384 	.word	0x20000384
 8009adc:	20000360 	.word	0x20000360
 8009ae0:	200003f0 	.word	0x200003f0
 8009ae4:	20000368 	.word	0x20000368
 8009ae8:	20000dd2 	.word	0x20000dd2
 8009aec:	0800cfa8 	.word	0x0800cfa8
 8009af0:	0800d024 	.word	0x0800d024
 8009af4:	0800d0c0 	.word	0x0800d0c0
 8009af8:	0800d148 	.word	0x0800d148

08009afc <LSM6DS3_get_angle>:

static void LSM6DS3_get_angle(void){
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b0c0      	sub	sp, #256	; 0x100
 8009b00:	af00      	add	r7, sp, #0
	char buf[255]= {0};
 8009b02:	4b23      	ldr	r3, [pc, #140]	; (8009b90 <LSM6DS3_get_angle+0x94>)
 8009b04:	3301      	adds	r3, #1
 8009b06:	33ff      	adds	r3, #255	; 0xff
 8009b08:	19db      	adds	r3, r3, r7
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	22fb      	movs	r2, #251	; 0xfb
 8009b12:	2100      	movs	r1, #0
 8009b14:	0018      	movs	r0, r3
 8009b16:	f002 f90a 	bl	800bd2e <memset>

	if(Kalman_GetFlag()) {
 8009b1a:	f7fc fa83 	bl	8006024 <Kalman_GetFlag>
 8009b1e:	1e03      	subs	r3, r0, #0
 8009b20:	d032      	beq.n	8009b88 <LSM6DS3_get_angle+0x8c>
		//xprintf("%s-%d\r\n",__func__,__LINE__);
		if(LSM6DS3_IMU_GetMeasurements()==LSM6DS3_OK){
 8009b22:	f7fc fe07 	bl	8006734 <LSM6DS3_IMU_GetMeasurements>
 8009b26:	1e03      	subs	r3, r0, #0
 8009b28:	d101      	bne.n	8009b2e <LSM6DS3_get_angle+0x32>
			Execute_Kalman_Filter();
 8009b2a:	f7fc f861 	bl	8005bf0 <Execute_Kalman_Filter>
		}

		if (g_appStats.last_send_data < ulMiliCount) {
 8009b2e:	4b19      	ldr	r3, [pc, #100]	; (8009b94 <LSM6DS3_get_angle+0x98>)
 8009b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b32:	4b19      	ldr	r3, [pc, #100]	; (8009b98 <LSM6DS3_get_angle+0x9c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d224      	bcs.n	8009b84 <LSM6DS3_get_angle+0x88>
			memset(buf, 0, sizeof(buf));
 8009b3a:	003b      	movs	r3, r7
 8009b3c:	22ff      	movs	r2, #255	; 0xff
 8009b3e:	2100      	movs	r1, #0
 8009b40:	0018      	movs	r0, r3
 8009b42:	f002 f8f4 	bl	800bd2e <memset>
			g_appStats.lsm6ds3.roll = Kalman_GetRoll();
 8009b46:	f7fc fa47 	bl	8005fd8 <Kalman_GetRoll>
 8009b4a:	1c02      	adds	r2, r0, #0
 8009b4c:	4b11      	ldr	r3, [pc, #68]	; (8009b94 <LSM6DS3_get_angle+0x98>)
 8009b4e:	601a      	str	r2, [r3, #0]
			g_appStats.lsm6ds3.pitch = Kalman_GetPitch();
 8009b50:	f7fc fa38 	bl	8005fc4 <Kalman_GetPitch>
 8009b54:	1c02      	adds	r2, r0, #0
 8009b56:	4b0f      	ldr	r3, [pc, #60]	; (8009b94 <LSM6DS3_get_angle+0x98>)
 8009b58:	605a      	str	r2, [r3, #4]
			g_appStats.lsm6ds3.yaw = Kalman_Getyaw();
 8009b5a:	f7fc fa47 	bl	8005fec <Kalman_Getyaw>
 8009b5e:	1c02      	adds	r2, r0, #0
 8009b60:	4b0c      	ldr	r3, [pc, #48]	; (8009b94 <LSM6DS3_get_angle+0x98>)
 8009b62:	609a      	str	r2, [r3, #8]
			g_appStats.lsm6ds3.T = LSM6DS3_Temperature_Int16();
 8009b64:	f7fc fe8c 	bl	8006880 <LSM6DS3_Temperature_Int16>
 8009b68:	0003      	movs	r3, r0
 8009b6a:	0018      	movs	r0, r3
 8009b6c:	f7f9 fe72 	bl	8003854 <__aeabi_i2f>
 8009b70:	1c02      	adds	r2, r0, #0
 8009b72:	4b08      	ldr	r3, [pc, #32]	; (8009b94 <LSM6DS3_get_angle+0x98>)
 8009b74:	60da      	str	r2, [r3, #12]
					(int) g_appStats.lsm6ds3.roll,
					(int) g_appStats.lsm6ds3.pitch,
					(int) g_appStats.lsm6ds3.yaw, (int) g_appStats.lsm6ds3.T);
#endif

			g_appStats.last_send_data = ulMiliCount + 500;
 8009b76:	4b08      	ldr	r3, [pc, #32]	; (8009b98 <LSM6DS3_get_angle+0x9c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	33f5      	adds	r3, #245	; 0xf5
 8009b7c:	33ff      	adds	r3, #255	; 0xff
 8009b7e:	001a      	movs	r2, r3
 8009b80:	4b04      	ldr	r3, [pc, #16]	; (8009b94 <LSM6DS3_get_angle+0x98>)
 8009b82:	655a      	str	r2, [r3, #84]	; 0x54
		}

		Kalman_ClearFlag();
 8009b84:	f7fc fa58 	bl	8006038 <Kalman_ClearFlag>
	}
}
 8009b88:	46c0      	nop			; (mov r8, r8)
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	b040      	add	sp, #256	; 0x100
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	ffffff00 	.word	0xffffff00
 8009b94:	20000384 	.word	0x20000384
 8009b98:	20000364 	.word	0x20000364

08009b9c <MX_TIM2_Init>:

static void MX_TIM2_Init(void) {
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b088      	sub	sp, #32
 8009ba0:	af00      	add	r7, sp, #0

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8009ba2:	2314      	movs	r3, #20
 8009ba4:	18fb      	adds	r3, r7, r3
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	230c      	movs	r3, #12
 8009baa:	001a      	movs	r2, r3
 8009bac:	2100      	movs	r1, #0
 8009bae:	f002 f8be 	bl	800bd2e <memset>
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8009bb2:	1d3b      	adds	r3, r7, #4
 8009bb4:	0018      	movs	r0, r3
 8009bb6:	2310      	movs	r3, #16
 8009bb8:	001a      	movs	r2, r3
 8009bba:	2100      	movs	r1, #0
 8009bbc:	f002 f8b7 	bl	800bd2e <memset>

	htim2.Instance = TIM2;
 8009bc0:	4b23      	ldr	r3, [pc, #140]	; (8009c50 <MX_TIM2_Init+0xb4>)
 8009bc2:	2280      	movs	r2, #128	; 0x80
 8009bc4:	05d2      	lsls	r2, r2, #23
 8009bc6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8009bc8:	4b21      	ldr	r3, [pc, #132]	; (8009c50 <MX_TIM2_Init+0xb4>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009bce:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <MX_TIM2_Init+0xb4>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8009bd4:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <MX_TIM2_Init+0xb4>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	4252      	negs	r2, r2
 8009bda:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bdc:	4b1c      	ldr	r3, [pc, #112]	; (8009c50 <MX_TIM2_Init+0xb4>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009be2:	4b1b      	ldr	r3, [pc, #108]	; (8009c50 <MX_TIM2_Init+0xb4>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8009be8:	4b19      	ldr	r3, [pc, #100]	; (8009c50 <MX_TIM2_Init+0xb4>)
 8009bea:	0018      	movs	r0, r3
 8009bec:	f001 f9c2 	bl	800af74 <HAL_TIM_IC_Init>
 8009bf0:	1e03      	subs	r3, r0, #0
 8009bf2:	d001      	beq.n	8009bf8 <MX_TIM2_Init+0x5c>
		Error_Handler();
 8009bf4:	f000 f8f4 	bl	8009de0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bf8:	2114      	movs	r1, #20
 8009bfa:	187b      	adds	r3, r7, r1
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c00:	187b      	adds	r3, r7, r1
 8009c02:	2200      	movs	r2, #0
 8009c04:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8009c06:	187a      	adds	r2, r7, r1
 8009c08:	4b11      	ldr	r3, [pc, #68]	; (8009c50 <MX_TIM2_Init+0xb4>)
 8009c0a:	0011      	movs	r1, r2
 8009c0c:	0018      	movs	r0, r3
 8009c0e:	f001 ffd5 	bl	800bbbc <HAL_TIMEx_MasterConfigSynchronization>
 8009c12:	1e03      	subs	r3, r0, #0
 8009c14:	d001      	beq.n	8009c1a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8009c16:	f000 f8e3 	bl	8009de0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8009c1a:	1d3b      	adds	r3, r7, #4
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8009c20:	1d3b      	adds	r3, r7, #4
 8009c22:	2201      	movs	r2, #1
 8009c24:	605a      	str	r2, [r3, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8009c26:	1d3b      	adds	r3, r7, #4
 8009c28:	2200      	movs	r2, #0
 8009c2a:	609a      	str	r2, [r3, #8]
	sConfigIC.ICFilter = 0;
 8009c2c:	1d3b      	adds	r3, r7, #4
 8009c2e:	2200      	movs	r2, #0
 8009c30:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 8009c32:	1d39      	adds	r1, r7, #4
 8009c34:	4b06      	ldr	r3, [pc, #24]	; (8009c50 <MX_TIM2_Init+0xb4>)
 8009c36:	220c      	movs	r2, #12
 8009c38:	0018      	movs	r0, r3
 8009c3a:	f001 fd0f 	bl	800b65c <HAL_TIM_IC_ConfigChannel>
 8009c3e:	1e03      	subs	r3, r0, #0
 8009c40:	d001      	beq.n	8009c46 <MX_TIM2_Init+0xaa>
		Error_Handler();
 8009c42:	f000 f8cd 	bl	8009de0 <Error_Handler>
	}

}
 8009c46:	46c0      	nop			; (mov r8, r8)
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	b008      	add	sp, #32
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	46c0      	nop			; (mov r8, r8)
 8009c50:	20000314 	.word	0x20000314

08009c54 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]

	if (TIM2 == htim->Instance) {
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	2380      	movs	r3, #128	; 0x80
 8009c62:	05db      	lsls	r3, r3, #23
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d14a      	bne.n	8009cfe <HAL_TIM_IC_CaptureCallback+0xaa>
		if (HAL_TIM_ACTIVE_CHANNEL_4 == htim->Channel) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	7f1b      	ldrb	r3, [r3, #28]
 8009c6c:	2b08      	cmp	r3, #8
 8009c6e:	d146      	bne.n	8009cfe <HAL_TIM_IC_CaptureCallback+0xaa>
			if (!isFirstCap) {
 8009c70:	4b25      	ldr	r3, [pc, #148]	; (8009d08 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10b      	bne.n	8009c90 <HAL_TIM_IC_CaptureCallback+0x3c>
				IC4ReadValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	210c      	movs	r1, #12
 8009c7c:	0018      	movs	r0, r3
 8009c7e:	f001 fd91 	bl	800b7a4 <HAL_TIM_ReadCapturedValue>
 8009c82:	0002      	movs	r2, r0
 8009c84:	4b21      	ldr	r3, [pc, #132]	; (8009d0c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8009c86:	601a      	str	r2, [r3, #0]
				isFirstCap = 1;
 8009c88:	4b1f      	ldr	r3, [pc, #124]	; (8009d08 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	701a      	strb	r2, [r3, #0]
				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
				isFirstCap = 0;
			}
		}
	}
}
 8009c8e:	e036      	b.n	8009cfe <HAL_TIM_IC_CaptureCallback+0xaa>
				IC4ReadValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	210c      	movs	r1, #12
 8009c94:	0018      	movs	r0, r3
 8009c96:	f001 fd85 	bl	800b7a4 <HAL_TIM_ReadCapturedValue>
 8009c9a:	0002      	movs	r2, r0
 8009c9c:	4b1c      	ldr	r3, [pc, #112]	; (8009d10 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8009c9e:	601a      	str	r2, [r3, #0]
				capture = (uint32_t) (IC4ReadValue2 - IC4ReadValue1);
 8009ca0:	4b1b      	ldr	r3, [pc, #108]	; (8009d10 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	4b19      	ldr	r3, [pc, #100]	; (8009d0c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	1ad2      	subs	r2, r2, r3
 8009caa:	4b1a      	ldr	r3, [pc, #104]	; (8009d14 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8009cac:	601a      	str	r2, [r3, #0]
				g_appStats.capture = capture;
 8009cae:	4b19      	ldr	r3, [pc, #100]	; (8009d14 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	b299      	uxth	r1, r3
 8009cb4:	4b18      	ldr	r3, [pc, #96]	; (8009d18 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8009cb6:	2268      	movs	r2, #104	; 0x68
 8009cb8:	5299      	strh	r1, [r3, r2]
					g_appStats.tim15Freq = (uint32_t) (TIM2_FREQ / capture);
 8009cba:	4b16      	ldr	r3, [pc, #88]	; (8009d14 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	0019      	movs	r1, r3
 8009cc0:	4816      	ldr	r0, [pc, #88]	; (8009d1c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8009cc2:	f7f8 fe33 	bl	800292c <__udivsi3>
 8009cc6:	0003      	movs	r3, r0
 8009cc8:	001a      	movs	r2, r3
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8009ccc:	61da      	str	r2, [r3, #28]
					g_appStats.freqUpdated = 1;
 8009cce:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8009cd0:	2264      	movs	r2, #100	; 0x64
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	5499      	strb	r1, [r3, r2]
				HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8009cd6:	4b12      	ldr	r3, [pc, #72]	; (8009d20 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8009cd8:	210c      	movs	r1, #12
 8009cda:	0018      	movs	r0, r3
 8009cdc:	f001 fad2 	bl	800b284 <HAL_TIM_IC_Stop_IT>
				TIM2->CNT &= 0;
 8009ce0:	2380      	movs	r3, #128	; 0x80
 8009ce2:	05db      	lsls	r3, r3, #23
 8009ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce6:	2380      	movs	r3, #128	; 0x80
 8009ce8:	05db      	lsls	r3, r3, #23
 8009cea:	2200      	movs	r2, #0
 8009cec:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 8009cee:	4b0c      	ldr	r3, [pc, #48]	; (8009d20 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8009cf0:	210c      	movs	r1, #12
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	f001 f996 	bl	800b024 <HAL_TIM_IC_Start_IT>
				isFirstCap = 0;
 8009cf8:	4b03      	ldr	r3, [pc, #12]	; (8009d08 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	701a      	strb	r2, [r3, #0]
}
 8009cfe:	46c0      	nop			; (mov r8, r8)
 8009d00:	46bd      	mov	sp, r7
 8009d02:	b002      	add	sp, #8
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	20000ddc 	.word	0x20000ddc
 8009d0c:	20000dd4 	.word	0x20000dd4
 8009d10:	20000dd8 	.word	0x20000dd8
 8009d14:	20000de0 	.word	0x20000de0
 8009d18:	20000384 	.word	0x20000384
 8009d1c:	03d09000 	.word	0x03d09000
 8009d20:	20000314 	.word	0x20000314

08009d24 <USART1_IRQHandler>:


void USART1_IRQHandler(void) {
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
	uint8_t cChar;
	if (USART1->ISR & USART_ISR_RXNE_RXFNE) {
 8009d2a:	4b27      	ldr	r3, [pc, #156]	; (8009dc8 <USART1_IRQHandler+0xa4>)
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	4013      	ands	r3, r2
 8009d32:	d045      	beq.n	8009dc0 <USART1_IRQHandler+0x9c>
		USART1->ICR |= USART_RQR_RXFRQ;
 8009d34:	4b24      	ldr	r3, [pc, #144]	; (8009dc8 <USART1_IRQHandler+0xa4>)
 8009d36:	6a1a      	ldr	r2, [r3, #32]
 8009d38:	4b23      	ldr	r3, [pc, #140]	; (8009dc8 <USART1_IRQHandler+0xa4>)
 8009d3a:	2108      	movs	r1, #8
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	621a      	str	r2, [r3, #32]
		cChar = USART1->RDR;
 8009d40:	4b21      	ldr	r3, [pc, #132]	; (8009dc8 <USART1_IRQHandler+0xa4>)
 8009d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d44:	1dfb      	adds	r3, r7, #7
 8009d46:	701a      	strb	r2, [r3, #0]

		if (buff_idx >= 255 || cChar == '*') {
 8009d48:	4b20      	ldr	r3, [pc, #128]	; (8009dcc <USART1_IRQHandler+0xa8>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2bfe      	cmp	r3, #254	; 0xfe
 8009d4e:	dc03      	bgt.n	8009d58 <USART1_IRQHandler+0x34>
 8009d50:	1dfb      	adds	r3, r7, #7
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b2a      	cmp	r3, #42	; 0x2a
 8009d56:	d102      	bne.n	8009d5e <USART1_IRQHandler+0x3a>
			buff_idx = 0;
 8009d58:	4b1c      	ldr	r3, [pc, #112]	; (8009dcc <USART1_IRQHandler+0xa8>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]
		}

		if (cChar != '\r' && cChar != '\n') {
 8009d5e:	1dfb      	adds	r3, r7, #7
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	2b0d      	cmp	r3, #13
 8009d64:	d00e      	beq.n	8009d84 <USART1_IRQHandler+0x60>
 8009d66:	1dfb      	adds	r3, r7, #7
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	2b0a      	cmp	r3, #10
 8009d6c:	d00a      	beq.n	8009d84 <USART1_IRQHandler+0x60>
			buff_cmd_tmp[buff_idx] = cChar;
 8009d6e:	4b17      	ldr	r3, [pc, #92]	; (8009dcc <USART1_IRQHandler+0xa8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a17      	ldr	r2, [pc, #92]	; (8009dd0 <USART1_IRQHandler+0xac>)
 8009d74:	1df9      	adds	r1, r7, #7
 8009d76:	7809      	ldrb	r1, [r1, #0]
 8009d78:	54d1      	strb	r1, [r2, r3]
			buff_idx++;
 8009d7a:	4b14      	ldr	r3, [pc, #80]	; (8009dcc <USART1_IRQHandler+0xa8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	4b12      	ldr	r3, [pc, #72]	; (8009dcc <USART1_IRQHandler+0xa8>)
 8009d82:	601a      	str	r2, [r3, #0]
		}

		if (cChar == '#') {
 8009d84:	1dfb      	adds	r3, r7, #7
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b23      	cmp	r3, #35	; 0x23
 8009d8a:	d115      	bne.n	8009db8 <USART1_IRQHandler+0x94>
			//copy
			memcpy(buff_cmd, buff_cmd_tmp, buff_idx);
 8009d8c:	4b0f      	ldr	r3, [pc, #60]	; (8009dcc <USART1_IRQHandler+0xa8>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	001a      	movs	r2, r3
 8009d92:	490f      	ldr	r1, [pc, #60]	; (8009dd0 <USART1_IRQHandler+0xac>)
 8009d94:	4b0f      	ldr	r3, [pc, #60]	; (8009dd4 <USART1_IRQHandler+0xb0>)
 8009d96:	0018      	movs	r0, r3
 8009d98:	f001 ffc0 	bl	800bd1c <memcpy>
			buff_idx = 0;
 8009d9c:	4b0b      	ldr	r3, [pc, #44]	; (8009dcc <USART1_IRQHandler+0xa8>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	601a      	str	r2, [r3, #0]
			g_appStats.processPcCommand = 1;
 8009da2:	4b0d      	ldr	r3, [pc, #52]	; (8009dd8 <USART1_IRQHandler+0xb4>)
 8009da4:	2266      	movs	r2, #102	; 0x66
 8009da6:	2101      	movs	r1, #1
 8009da8:	5499      	strb	r1, [r3, r2]
			memset(buff_cmd_tmp, 0, sizeof(buff_cmd_tmp));
 8009daa:	2380      	movs	r3, #128	; 0x80
 8009dac:	005a      	lsls	r2, r3, #1
 8009dae:	4b08      	ldr	r3, [pc, #32]	; (8009dd0 <USART1_IRQHandler+0xac>)
 8009db0:	2100      	movs	r1, #0
 8009db2:	0018      	movs	r0, r3
 8009db4:	f001 ffbb 	bl	800bd2e <memset>
		}

		g_appStats.lastReceiveUart = ulSecCount;
 8009db8:	4b08      	ldr	r3, [pc, #32]	; (8009ddc <USART1_IRQHandler+0xb8>)
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	4b06      	ldr	r3, [pc, #24]	; (8009dd8 <USART1_IRQHandler+0xb4>)
 8009dbe:	659a      	str	r2, [r3, #88]	; 0x58
	}
}
 8009dc0:	46c0      	nop			; (mov r8, r8)
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	b002      	add	sp, #8
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	40013800 	.word	0x40013800
 8009dcc:	20001028 	.word	0x20001028
 8009dd0:	20000f28 	.word	0x20000f28
 8009dd4:	20000e28 	.word	0x20000e28
 8009dd8:	20000384 	.word	0x20000384
 8009ddc:	20000360 	.word	0x20000360

08009de0 <Error_Handler>:


void Error_Handler(void) {
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009de4:	b672      	cpsid	i
}
 8009de6:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	while (1) {
 8009de8:	e7fe      	b.n	8009de8 <Error_Handler+0x8>

08009dea <ustrncpy>:
//! \return Returns \e pcDst.
//
//*****************************************************************************
char *
ustrncpy (char *pcDst, const char *pcSrc, int iNum)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b086      	sub	sp, #24
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	60f8      	str	r0, [r7, #12]
 8009df2:	60b9      	str	r1, [r7, #8]
 8009df4:	607a      	str	r2, [r7, #4]
    //ASSERT(pcDst);

    //
    // Start at the beginning of the source string.
    //
    iCount = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	617b      	str	r3, [r7, #20]

    //
    // Copy the source string until we run out of source characters or
    // destination space.
    //
    while(iNum && pcSrc[iCount])
 8009dfa:	e00d      	b.n	8009e18 <ustrncpy+0x2e>
    {
        pcDst[iCount] = pcSrc[iCount];
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	18d2      	adds	r2, r2, r3
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	68f9      	ldr	r1, [r7, #12]
 8009e06:	18cb      	adds	r3, r1, r3
 8009e08:	7812      	ldrb	r2, [r2, #0]
 8009e0a:	701a      	strb	r2, [r3, #0]
        iCount++;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	617b      	str	r3, [r7, #20]
        iNum--;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	607b      	str	r3, [r7, #4]
    while(iNum && pcSrc[iCount])
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d011      	beq.n	8009e42 <ustrncpy+0x58>
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	18d3      	adds	r3, r2, r3
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1e8      	bne.n	8009dfc <ustrncpy+0x12>
    }

    //
    // Pad the destination if we are not yet done.
    //
    while(iNum)
 8009e2a:	e00a      	b.n	8009e42 <ustrncpy+0x58>
    {
        pcDst[iCount++] = (char)0;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	617a      	str	r2, [r7, #20]
 8009e32:	001a      	movs	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	189b      	adds	r3, r3, r2
 8009e38:	2200      	movs	r2, #0
 8009e3a:	701a      	strb	r2, [r3, #0]
        iNum--;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	607b      	str	r3, [r7, #4]
    while(iNum)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1f1      	bne.n	8009e2c <ustrncpy+0x42>
    }

    //
    // Pass the destination pointer back to the caller.
    //
    return(pcDst);
 8009e48:	68fb      	ldr	r3, [r7, #12]
}
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	b006      	add	sp, #24
 8009e50:	bd80      	pop	{r7, pc}
	...

08009e54 <uvsnprintf>:
//
//*****************************************************************************
int
uvsnprintf(char *pcBuf, unsigned long ulSize, const char *pcString,
           va_list vaArgP)
{
 8009e54:	b590      	push	{r4, r7, lr}
 8009e56:	b08d      	sub	sp, #52	; 0x34
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	603b      	str	r3, [r7, #0]
    unsigned long ulIdx, ulValue, ulCount, ulBase, ulNeg;
    char *pcStr, cFill;
    int iConvertCount = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	617b      	str	r3, [r7, #20]
    //ASSERT(ulSize != 0);

    //
    // Adjust buffer size limit to allow one space for null termination.
    //
    if(ulSize)
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <uvsnprintf+0x1e>
    {
        ulSize--;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	60bb      	str	r3, [r7, #8]
    }

    //
    // Initialize the count of characters converted.
    //
    iConvertCount = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	617b      	str	r3, [r7, #20]

    //
    // Loop while there are more characters in the format string.
    //
    while(*pcString)
 8009e76:	e1c8      	b.n	800a20a <uvsnprintf+0x3b6>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ulIdx = 0; (pcString[ulIdx] != '%') && (pcString[ulIdx] != '\0');
 8009e78:	2300      	movs	r3, #0
 8009e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e7c:	e002      	b.n	8009e84 <uvsnprintf+0x30>
            ulIdx++)
 8009e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e80:	3301      	adds	r3, #1
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c
        for(ulIdx = 0; (pcString[ulIdx] != '%') && (pcString[ulIdx] != '\0');
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e88:	18d3      	adds	r3, r2, r3
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	2b25      	cmp	r3, #37	; 0x25
 8009e8e:	d005      	beq.n	8009e9c <uvsnprintf+0x48>
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e94:	18d3      	adds	r3, r2, r3
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1f0      	bne.n	8009e7e <uvsnprintf+0x2a>
        //
        // Write this portion of the string to the output buffer.  If there are
        // more characters to write than there is space in the buffer, then
        // only write as much as will fit in the buffer.
        //
        if(ulIdx > ulSize)
 8009e9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d90c      	bls.n	8009ebe <uvsnprintf+0x6a>
        {
            ustrncpy(pcBuf, pcString, ulSize);
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	0018      	movs	r0, r3
 8009eac:	f7ff ff9d 	bl	8009dea <ustrncpy>
            pcBuf += ulSize;
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	18d3      	adds	r3, r2, r3
 8009eb6:	60fb      	str	r3, [r7, #12]
            ulSize = 0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	60bb      	str	r3, [r7, #8]
 8009ebc:	e00d      	b.n	8009eda <uvsnprintf+0x86>
        }
        else
        {
            ustrncpy(pcBuf, pcString, ulIdx);
 8009ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	0018      	movs	r0, r3
 8009ec6:	f7ff ff90 	bl	8009dea <ustrncpy>
            pcBuf += ulIdx;
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ece:	18d3      	adds	r3, r2, r3
 8009ed0:	60fb      	str	r3, [r7, #12]
            ulSize -= ulIdx;
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	60bb      	str	r3, [r7, #8]
        //
        // Update the conversion count.  This will be the number of characters
        // that should have been written, even if there was not room in the
        // buffer.
        //
        iConvertCount += ulIdx;
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ede:	18d3      	adds	r3, r2, r3
 8009ee0:	617b      	str	r3, [r7, #20]

        //
        // Skip the portion of the format string that was written.
        //
        pcString += ulIdx;
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee6:	18d3      	adds	r3, r2, r3
 8009ee8:	607b      	str	r3, [r7, #4]

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2b25      	cmp	r3, #37	; 0x25
 8009ef0:	d000      	beq.n	8009ef4 <uvsnprintf+0xa0>
 8009ef2:	e189      	b.n	800a208 <uvsnprintf+0x3b4>
        {
            //
            // Skip the %.
            //
            pcString++;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	607b      	str	r3, [r7, #4]

            //
            // Set the digit count to zero, and the fill character to space
            // (that is, to the defaults).
            //
            ulCount = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	627b      	str	r3, [r7, #36]	; 0x24
            cFill = ' ';
 8009efe:	231b      	movs	r3, #27
 8009f00:	18fb      	adds	r3, r7, r3
 8009f02:	2220      	movs	r2, #32
 8009f04:	701a      	strb	r2, [r3, #0]
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	1c5a      	adds	r2, r3, #1
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	3b25      	subs	r3, #37	; 0x25
 8009f10:	2b53      	cmp	r3, #83	; 0x53
 8009f12:	d900      	bls.n	8009f16 <uvsnprintf+0xc2>
 8009f14:	e158      	b.n	800a1c8 <uvsnprintf+0x374>
 8009f16:	009a      	lsls	r2, r3, #2
 8009f18:	4bc2      	ldr	r3, [pc, #776]	; (800a224 <uvsnprintf+0x3d0>)
 8009f1a:	18d3      	adds	r3, r2, r3
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	469f      	mov	pc, r3
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ulCount == 0))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b30      	cmp	r3, #48	; 0x30
 8009f28:	d106      	bne.n	8009f38 <uvsnprintf+0xe4>
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d103      	bne.n	8009f38 <uvsnprintf+0xe4>
                    {
                        cFill = '0';
 8009f30:	231b      	movs	r3, #27
 8009f32:	18fb      	adds	r3, r7, r3
 8009f34:	2230      	movs	r2, #48	; 0x30
 8009f36:	701a      	strb	r2, [r3, #0]
                    }

                    //
                    // Update the digit count.
                    //
                    ulCount *= 10;
 8009f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3a:	0013      	movs	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	189b      	adds	r3, r3, r2
 8009f40:	005b      	lsls	r3, r3, #1
 8009f42:	627b      	str	r3, [r7, #36]	; 0x24
                    ulCount += pcString[-1] - '0';
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3b01      	subs	r3, #1
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	001a      	movs	r2, r3
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	18d3      	adds	r3, r2, r3
 8009f50:	3b30      	subs	r3, #48	; 0x30
 8009f52:	627b      	str	r3, [r7, #36]	; 0x24

                    //
                    // Get the next character.
                    //
                    goto again;
 8009f54:	e7d7      	b.n	8009f06 <uvsnprintf+0xb2>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	1d1a      	adds	r2, r3, #4
 8009f5a:	603a      	str	r2, [r7, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Copy the character to the output buffer, if there is
                    // room.  Update the buffer size remaining.
                    //
                    if(ulSize != 0)
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d008      	beq.n	8009f78 <uvsnprintf+0x124>
                    {
                        *pcBuf++ = (char)ulValue;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	60fa      	str	r2, [r7, #12]
 8009f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f6e:	b2d2      	uxtb	r2, r2
 8009f70:	701a      	strb	r2, [r3, #0]
                        ulSize--;
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	3b01      	subs	r3, #1
 8009f76:	60bb      	str	r3, [r7, #8]
                    }

                    //
                    // Update the conversion count.
                    //
                    iConvertCount++;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	617b      	str	r3, [r7, #20]

                    //
                    // This command has been handled.
                    //
                    break;
 8009f7e:	e144      	b.n	800a20a <uvsnprintf+0x3b6>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	1d1a      	adds	r2, r3, #4
 8009f84:	603a      	str	r2, [r7, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((long)ulValue < 0)
 8009f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	da05      	bge.n	8009f9c <uvsnprintf+0x148>
                    {
                        //
                        // Make the value positive.
                        //
                        ulValue = -(long)ulValue;
 8009f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f92:	425b      	negs	r3, r3
 8009f94:	62bb      	str	r3, [r7, #40]	; 0x28

                        //
                        // Indicate that the value is negative.
                        //
                        ulNeg = 1;
 8009f96:	2301      	movs	r3, #1
 8009f98:	61fb      	str	r3, [r7, #28]
 8009f9a:	e001      	b.n	8009fa0 <uvsnprintf+0x14c>
                    {
                        //
                        // Indicate that the value is positive so that a
                        // negative sign isn't inserted.
                        //
                        ulNeg = 0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	61fb      	str	r3, [r7, #28]
                    }

                    //
                    // Set the base to 10.
                    //
                    ulBase = 10;
 8009fa0:	230a      	movs	r3, #10
 8009fa2:	623b      	str	r3, [r7, #32]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8009fa4:	e06d      	b.n	800a082 <uvsnprintf+0x22e>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	1d1a      	adds	r2, r3, #4
 8009faa:	603a      	str	r2, [r7, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	613b      	str	r3, [r7, #16]

                    //
                    // Determine the length of the string.
                    //
                    for(ulIdx = 0; pcStr[ulIdx] != '\0'; ulIdx++)
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fb4:	e002      	b.n	8009fbc <uvsnprintf+0x168>
 8009fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb8:	3301      	adds	r3, #1
 8009fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc0:	18d3      	adds	r3, r2, r3
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1f6      	bne.n	8009fb6 <uvsnprintf+0x162>
                    //
                    // Update the convert count to include any padding that
                    // should be necessary (regardless of whether we have space
                    // to write it or not).
                    //
                    if(ulCount > ulIdx)
 8009fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d905      	bls.n	8009fdc <uvsnprintf+0x188>
                    {
                        iConvertCount += (ulCount - ulIdx);
 8009fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	1ad2      	subs	r2, r2, r3
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	18d3      	adds	r3, r2, r3
 8009fda:	617b      	str	r3, [r7, #20]
                    //
                    // Copy the string to the output buffer.  Only copy as much
                    // as will fit in the buffer.  Update the output buffer
                    // pointer and the space remaining.
                    //
                    if(ulIdx > ulSize)
 8009fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d90c      	bls.n	8009ffe <uvsnprintf+0x1aa>
                    {
                        ustrncpy(pcBuf, pcStr, ulSize);
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	6939      	ldr	r1, [r7, #16]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	0018      	movs	r0, r3
 8009fec:	f7ff fefd 	bl	8009dea <ustrncpy>
                        pcBuf += ulSize;
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	18d3      	adds	r3, r2, r3
 8009ff6:	60fb      	str	r3, [r7, #12]
                        ulSize = 0;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	60bb      	str	r3, [r7, #8]
 8009ffc:	e029      	b.n	800a052 <uvsnprintf+0x1fe>
                    }
                    else
                    {
                        ustrncpy(pcBuf, pcStr, ulIdx);
 8009ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a000:	6939      	ldr	r1, [r7, #16]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	0018      	movs	r0, r3
 800a006:	f7ff fef0 	bl	8009dea <ustrncpy>
                        pcBuf += ulIdx;
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00e:	18d3      	adds	r3, r2, r3
 800a010:	60fb      	str	r3, [r7, #12]
                        ulSize -= ulIdx;
 800a012:	68ba      	ldr	r2, [r7, #8]
 800a014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	60bb      	str	r3, [r7, #8]

                        //
                        // Write any required padding spaces assuming there is
                        // still space in the buffer.
                        //
                        if(ulCount > ulIdx)
 800a01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01e:	429a      	cmp	r2, r3
 800a020:	d917      	bls.n	800a052 <uvsnprintf+0x1fe>
                        {
                            ulCount -= ulIdx;
 800a022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
                            if(ulCount > ulSize)
 800a02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d901      	bls.n	800a036 <uvsnprintf+0x1e2>
                            {
                                ulCount = ulSize;
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	627b      	str	r3, [r7, #36]	; 0x24
                            }
                            ulSize =- ulCount;
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	425b      	negs	r3, r3
 800a03a:	60bb      	str	r3, [r7, #8]

                            while(ulCount--)
 800a03c:	e004      	b.n	800a048 <uvsnprintf+0x1f4>
                            {
                                *pcBuf++ = ' ';
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	1c5a      	adds	r2, r3, #1
 800a042:	60fa      	str	r2, [r7, #12]
 800a044:	2220      	movs	r2, #32
 800a046:	701a      	strb	r2, [r3, #0]
                            while(ulCount--)
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	1e5a      	subs	r2, r3, #1
 800a04c:	627a      	str	r2, [r7, #36]	; 0x24
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1f5      	bne.n	800a03e <uvsnprintf+0x1ea>
                    //
                    // Update the conversion count.  This will be the number of
                    // characters that should have been written, even if there
                    // was not room in the buffer.
                    //
                    iConvertCount += ulIdx;
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a056:	18d3      	adds	r3, r2, r3
 800a058:	617b      	str	r3, [r7, #20]

                    //
                    // This command has been handled.
                    //
                    break;
 800a05a:	e0d6      	b.n	800a20a <uvsnprintf+0x3b6>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	1d1a      	adds	r2, r3, #4
 800a060:	603a      	str	r2, [r7, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Set the base to 10.
                    //
                    ulBase = 10;
 800a066:	230a      	movs	r3, #10
 800a068:	623b      	str	r3, [r7, #32]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ulNeg = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	61fb      	str	r3, [r7, #28]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 800a06e:	e008      	b.n	800a082 <uvsnprintf+0x22e>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	1d1a      	adds	r2, r3, #4
 800a074:	603a      	str	r2, [r7, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	62bb      	str	r3, [r7, #40]	; 0x28

                    //
                    // Set the base to 16.
                    //
                    ulBase = 16;
 800a07a:	2310      	movs	r3, #16
 800a07c:	623b      	str	r3, [r7, #32]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ulNeg = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	61fb      	str	r3, [r7, #28]
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
 800a082:	2301      	movs	r3, #1
 800a084:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a086:	e006      	b.n	800a096 <uvsnprintf+0x242>
                        (((ulIdx * ulBase) <= ulValue) &&
                         (((ulIdx * ulBase) / ulBase) == ulIdx));
                        ulIdx *= ulBase, ulCount--)
 800a088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08a:	6a3a      	ldr	r2, [r7, #32]
 800a08c:	4353      	muls	r3, r2
 800a08e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	3b01      	subs	r3, #1
 800a094:	627b      	str	r3, [r7, #36]	; 0x24
                        (((ulIdx * ulBase) <= ulValue) &&
 800a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a098:	6a3a      	ldr	r2, [r7, #32]
 800a09a:	4353      	muls	r3, r2
                    for(ulIdx = 1;
 800a09c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d30b      	bcc.n	800a0ba <uvsnprintf+0x266>
                         (((ulIdx * ulBase) / ulBase) == ulIdx));
 800a0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a4:	6a3a      	ldr	r2, [r7, #32]
 800a0a6:	4353      	muls	r3, r2
 800a0a8:	6a39      	ldr	r1, [r7, #32]
 800a0aa:	0018      	movs	r0, r3
 800a0ac:	f7f8 fc3e 	bl	800292c <__udivsi3>
 800a0b0:	0003      	movs	r3, r0
 800a0b2:	001a      	movs	r2, r3
                        (((ulIdx * ulBase) <= ulValue) &&
 800a0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d0e6      	beq.n	800a088 <uvsnprintf+0x234>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ulNeg)
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <uvsnprintf+0x272>
                    {
                        ulCount--;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ulNeg && (ulSize != 0) && (cFill == '0'))
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d014      	beq.n	800a0f6 <uvsnprintf+0x2a2>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d011      	beq.n	800a0f6 <uvsnprintf+0x2a2>
 800a0d2:	231b      	movs	r3, #27
 800a0d4:	18fb      	adds	r3, r7, r3
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b30      	cmp	r3, #48	; 0x30
 800a0da:	d10c      	bne.n	800a0f6 <uvsnprintf+0x2a2>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        *pcBuf++ = '-';
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	1c5a      	adds	r2, r3, #1
 800a0e0:	60fa      	str	r2, [r7, #12]
 800a0e2:	222d      	movs	r2, #45	; 0x2d
 800a0e4:	701a      	strb	r2, [r3, #0]
                        ulSize--;
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	60bb      	str	r3, [r7, #8]

                        //
                        // Update the conversion count.
                        //
                        iConvertCount++;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	617b      	str	r3, [r7, #20]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ulNeg = 0;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61fb      	str	r3, [r7, #28]

                    //
                    // See if there are more characters in the specified field
                    // width than there are in the conversion of this value.
                    //
                    if((ulCount > 1) && (ulCount < 65536))
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d91e      	bls.n	800a13a <uvsnprintf+0x2e6>
 800a0fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fe:	2380      	movs	r3, #128	; 0x80
 800a100:	025b      	lsls	r3, r3, #9
 800a102:	429a      	cmp	r2, r3
 800a104:	d219      	bcs.n	800a13a <uvsnprintf+0x2e6>
                    {
                        //
                        // Loop through the required padding characters.
                        //
                        for(ulCount--; ulCount; ulCount--)
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	3b01      	subs	r3, #1
 800a10a:	627b      	str	r3, [r7, #36]	; 0x24
 800a10c:	e012      	b.n	800a134 <uvsnprintf+0x2e0>
                        {
                            //
                            // Copy the character to the output buffer if there
                            // is room.
                            //
                            if(ulSize != 0)
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d009      	beq.n	800a128 <uvsnprintf+0x2d4>
                            {
                                *pcBuf++ = cFill;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	60fa      	str	r2, [r7, #12]
 800a11a:	221b      	movs	r2, #27
 800a11c:	18ba      	adds	r2, r7, r2
 800a11e:	7812      	ldrb	r2, [r2, #0]
 800a120:	701a      	strb	r2, [r3, #0]
                                ulSize--;
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	3b01      	subs	r3, #1
 800a126:	60bb      	str	r3, [r7, #8]
                            }

                            //
                            // Update the conversion count.
                            //
                            iConvertCount++;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	3301      	adds	r3, #1
 800a12c:	617b      	str	r3, [r7, #20]
                        for(ulCount--; ulCount; ulCount--)
 800a12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a130:	3b01      	subs	r3, #1
 800a132:	627b      	str	r3, [r7, #36]	; 0x24
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1e9      	bne.n	800a10e <uvsnprintf+0x2ba>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ulNeg && (ulSize != 0))
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d02e      	beq.n	800a19e <uvsnprintf+0x34a>
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d02b      	beq.n	800a19e <uvsnprintf+0x34a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        *pcBuf++ = '-';
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	60fa      	str	r2, [r7, #12]
 800a14c:	222d      	movs	r2, #45	; 0x2d
 800a14e:	701a      	strb	r2, [r3, #0]
                        ulSize--;
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	3b01      	subs	r3, #1
 800a154:	60bb      	str	r3, [r7, #8]

                        //
                        // Update the conversion count.
                        //
                        iConvertCount++;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	3301      	adds	r3, #1
 800a15a:	617b      	str	r3, [r7, #20]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ulIdx; ulIdx /= ulBase)
 800a15c:	e01f      	b.n	800a19e <uvsnprintf+0x34a>
                    {
                        //
                        // Copy the character to the output buffer if there is
                        // room.
                        //
                        if(ulSize != 0)
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d013      	beq.n	800a18c <uvsnprintf+0x338>
                        {
                            *pcBuf++ = g_pcHex[(ulValue / ulIdx) % ulBase];
 800a164:	4c30      	ldr	r4, [pc, #192]	; (800a228 <uvsnprintf+0x3d4>)
 800a166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a16a:	f7f8 fbdf 	bl	800292c <__udivsi3>
 800a16e:	0003      	movs	r3, r0
 800a170:	6a39      	ldr	r1, [r7, #32]
 800a172:	0018      	movs	r0, r3
 800a174:	f7f8 fc60 	bl	8002a38 <__aeabi_uidivmod>
 800a178:	000b      	movs	r3, r1
 800a17a:	18e2      	adds	r2, r4, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	1c59      	adds	r1, r3, #1
 800a180:	60f9      	str	r1, [r7, #12]
 800a182:	7812      	ldrb	r2, [r2, #0]
 800a184:	701a      	strb	r2, [r3, #0]
                            ulSize--;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	3b01      	subs	r3, #1
 800a18a:	60bb      	str	r3, [r7, #8]
                        }

                        //
                        // Update the conversion count.
                        //
                        iConvertCount++;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	3301      	adds	r3, #1
 800a190:	617b      	str	r3, [r7, #20]
                    for(; ulIdx; ulIdx /= ulBase)
 800a192:	6a39      	ldr	r1, [r7, #32]
 800a194:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a196:	f7f8 fbc9 	bl	800292c <__udivsi3>
 800a19a:	0003      	movs	r3, r0
 800a19c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1dc      	bne.n	800a15e <uvsnprintf+0x30a>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 800a1a4:	e031      	b.n	800a20a <uvsnprintf+0x3b6>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    if(ulSize != 0)
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d009      	beq.n	800a1c0 <uvsnprintf+0x36c>
                    {
                        *pcBuf++ = pcString[-1];
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	60fa      	str	r2, [r7, #12]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	3a01      	subs	r2, #1
 800a1b6:	7812      	ldrb	r2, [r2, #0]
 800a1b8:	701a      	strb	r2, [r3, #0]
                        ulSize--;
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	60bb      	str	r3, [r7, #8]
                    }

                    //
                    // Update the conversion count.
                    //
                    iConvertCount++;
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	617b      	str	r3, [r7, #20]

                    //
                    // This command has been handled.
                    //
                    break;
 800a1c6:	e020      	b.n	800a20a <uvsnprintf+0x3b6>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    if(ulSize >= 5)
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d90c      	bls.n	800a1e8 <uvsnprintf+0x394>
                    {
                        ustrncpy(pcBuf, "ERROR", 5);
 800a1ce:	4917      	ldr	r1, [pc, #92]	; (800a22c <uvsnprintf+0x3d8>)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2205      	movs	r2, #5
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f7ff fe08 	bl	8009dea <ustrncpy>
                        pcBuf += 5;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3305      	adds	r3, #5
 800a1de:	60fb      	str	r3, [r7, #12]
                        ulSize -= 5;
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	3b05      	subs	r3, #5
 800a1e4:	60bb      	str	r3, [r7, #8]
 800a1e6:	e00b      	b.n	800a200 <uvsnprintf+0x3ac>
                    }
                    else
                    {
                        ustrncpy(pcBuf, "ERROR", ulSize);
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	4910      	ldr	r1, [pc, #64]	; (800a22c <uvsnprintf+0x3d8>)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	0018      	movs	r0, r3
 800a1f0:	f7ff fdfb 	bl	8009dea <ustrncpy>
                        pcBuf += ulSize;
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	18d3      	adds	r3, r2, r3
 800a1fa:	60fb      	str	r3, [r7, #12]
                        ulSize = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	60bb      	str	r3, [r7, #8]
                    }

                    //
                    // Update the conversion count.
                    //
                    iConvertCount += 5;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	3305      	adds	r3, #5
 800a204:	617b      	str	r3, [r7, #20]

                    //
                    // This command has been handled.
                    //
                    break;
 800a206:	e000      	b.n	800a20a <uvsnprintf+0x3b6>
                }
            }
        }
 800a208:	46c0      	nop			; (mov r8, r8)
    while(*pcString)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d000      	beq.n	800a214 <uvsnprintf+0x3c0>
 800a212:	e631      	b.n	8009e78 <uvsnprintf+0x24>
    }

    //
    // Null terminate the string in the buffer.
    //
    *pcBuf = 0;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	701a      	strb	r2, [r3, #0]

    //
    // Return the number of characters in the full converted string.
    //
    return(iConvertCount);
 800a21a:	697b      	ldr	r3, [r7, #20]
}
 800a21c:	0018      	movs	r0, r3
 800a21e:	46bd      	mov	sp, r7
 800a220:	b00d      	add	sp, #52	; 0x34
 800a222:	bd90      	pop	{r4, r7, pc}
 800a224:	0800d2c0 	.word	0x0800d2c0
 800a228:	0800d150 	.word	0x0800d150
 800a22c:	0800d164 	.word	0x0800d164

0800a230 <usnprintf>:
//! including the NULL termination character, regardless of space in the
//! buffer.
//
//*****************************************************************************
int usnprintf(char *pcBuf, unsigned long ulSize, const char *pcString, ...)
{
 800a230:	b40c      	push	{r2, r3}
 800a232:	b580      	push	{r7, lr}
 800a234:	b084      	sub	sp, #16
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
    va_list vaArgP;

    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);
 800a23c:	231c      	movs	r3, #28
 800a23e:	18fb      	adds	r3, r7, r3
 800a240:	60bb      	str	r3, [r7, #8]

    //
    // Call vsnprintf to perform the conversion.
    //
    iRet = uvsnprintf(pcBuf, ulSize, pcString, vaArgP);
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	69ba      	ldr	r2, [r7, #24]
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f7ff fe03 	bl	8009e54 <uvsnprintf>
 800a24e:	0003      	movs	r3, r0
 800a250:	60fb      	str	r3, [r7, #12]
    va_end(vaArgP);

    //
    // Return the conversion count.
    //
    return(iRet);
 800a252:	68fb      	ldr	r3, [r7, #12]
}
 800a254:	0018      	movs	r0, r3
 800a256:	46bd      	mov	sp, r7
 800a258:	b004      	add	sp, #16
 800a25a:	bc80      	pop	{r7}
 800a25c:	bc08      	pop	{r3}
 800a25e:	b002      	add	sp, #8
 800a260:	4718      	bx	r3
	...

0800a264 <SPIx_init>:
static uint8_t SPI_SendByte(SPI_TypeDef *SPIx, uint8_t byte, uint16_t timeout);
static uint8_t SPI_readByte(SPI_TypeDef *SPIx, uint8_t*byte, uint16_t timeout);

//////////////////////////////////////////////////////////////////////////////////////////////////////////

void SPIx_init(SPI_TypeDef *SPIx){
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]

	if (SPIx == SPI1) {
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a07      	ldr	r2, [pc, #28]	; (800a28c <SPIx_init+0x28>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d101      	bne.n	800a278 <SPIx_init+0x14>
		spi1Init();
 800a274:	f7fd fa2e 	bl	80076d4 <spi1Init>
	}
	if (SPIx == SPI2) {
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a05      	ldr	r2, [pc, #20]	; (800a290 <SPIx_init+0x2c>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d101      	bne.n	800a284 <SPIx_init+0x20>
		spi2Init();
 800a280:	f7fd fa2e 	bl	80076e0 <spi2Init>
	}
}
 800a284:	46c0      	nop			; (mov r8, r8)
 800a286:	46bd      	mov	sp, r7
 800a288:	b002      	add	sp, #8
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	40013000 	.word	0x40013000
 800a290:	40003800 	.word	0x40003800

0800a294 <SPIx_ReadRegister>:


int SPIx_ReadRegister(SPI_TypeDef *SPIx, uint8_t reg, uint8_t *data, uint16_t len, uint16_t timeout){
 800a294:	b590      	push	{r4, r7, lr}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	0008      	movs	r0, r1
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	0019      	movs	r1, r3
 800a2a2:	240b      	movs	r4, #11
 800a2a4:	193b      	adds	r3, r7, r4
 800a2a6:	1c02      	adds	r2, r0, #0
 800a2a8:	701a      	strb	r2, [r3, #0]
 800a2aa:	2308      	movs	r3, #8
 800a2ac:	18fb      	adds	r3, r7, r3
 800a2ae:	1c0a      	adds	r2, r1, #0
 800a2b0:	801a      	strh	r2, [r3, #0]
	else
		spi2_cs_high();

	return 1;
#else
	reg |= 0x80;
 800a2b2:	193b      	adds	r3, r7, r4
 800a2b4:	193a      	adds	r2, r7, r4
 800a2b6:	7812      	ldrb	r2, [r2, #0]
 800a2b8:	2180      	movs	r1, #128	; 0x80
 800a2ba:	4249      	negs	r1, r1
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	701a      	strb	r2, [r3, #0]
	spi2_cs_low();
 800a2c0:	f7fd f9f0 	bl	80076a4 <spi2_cs_low>
	SPIx_readWrite(SPIx, reg);
 800a2c4:	193b      	adds	r3, r7, r4
 800a2c6:	781a      	ldrb	r2, [r3, #0]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	0011      	movs	r1, r2
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	f7fd fb23 	bl	8007918 <SPIx_readWrite>
	for (int i = 0; i < len; i++) {
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	617b      	str	r3, [r7, #20]
 800a2d6:	e00c      	b.n	800a2f2 <SPIx_ReadRegister+0x5e>
		*(data + i) = SPIx_readWrite(SPIx, 0x00);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	18d4      	adds	r4, r2, r3
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	f7fd fb18 	bl	8007918 <SPIx_readWrite>
 800a2e8:	0003      	movs	r3, r0
 800a2ea:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++) {
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	617b      	str	r3, [r7, #20]
 800a2f2:	2308      	movs	r3, #8
 800a2f4:	18fb      	adds	r3, r7, r3
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	dbec      	blt.n	800a2d8 <SPIx_ReadRegister+0x44>
	}
	spi2_cs_high();
 800a2fe:	f7fd f9dd 	bl	80076bc <spi2_cs_high>
	return 1;
 800a302:	2301      	movs	r3, #1
#endif
}
 800a304:	0018      	movs	r0, r3
 800a306:	46bd      	mov	sp, r7
 800a308:	b007      	add	sp, #28
 800a30a:	bd90      	pop	{r4, r7, pc}

0800a30c <SPIx_WriteRegister>:

int SPIx_WriteRegister(SPI_TypeDef *SPIx, uint8_t reg, uint8_t *data, uint16_t len, uint16_t timeout){
 800a30c:	b590      	push	{r4, r7, lr}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	0008      	movs	r0, r1
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	0019      	movs	r1, r3
 800a31a:	240b      	movs	r4, #11
 800a31c:	193b      	adds	r3, r7, r4
 800a31e:	1c02      	adds	r2, r0, #0
 800a320:	701a      	strb	r2, [r3, #0]
 800a322:	2308      	movs	r3, #8
 800a324:	18fb      	adds	r3, r7, r3
 800a326:	1c0a      	adds	r2, r1, #0
 800a328:	801a      	strh	r2, [r3, #0]
	else
		spi2_cs_high();

	return 1;
#else
	spi2_cs_low();
 800a32a:	f7fd f9bb 	bl	80076a4 <spi2_cs_low>
	SPIx_readWrite(SPIx, reg);
 800a32e:	193b      	adds	r3, r7, r4
 800a330:	781a      	ldrb	r2, [r3, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	0011      	movs	r1, r2
 800a336:	0018      	movs	r0, r3
 800a338:	f7fd faee 	bl	8007918 <SPIx_readWrite>
	SPIx_readWrite(SPIx, *data);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	781a      	ldrb	r2, [r3, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	0011      	movs	r1, r2
 800a344:	0018      	movs	r0, r3
 800a346:	f7fd fae7 	bl	8007918 <SPIx_readWrite>
	spi2_cs_high();
 800a34a:	f7fd f9b7 	bl	80076bc <spi2_cs_high>
#endif
}
 800a34e:	46c0      	nop			; (mov r8, r8)
 800a350:	0018      	movs	r0, r3
 800a352:	46bd      	mov	sp, r7
 800a354:	b005      	add	sp, #20
 800a356:	bd90      	pop	{r4, r7, pc}

0800a358 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800a358:	b590      	push	{r4, r7, lr}
 800a35a:	b08b      	sub	sp, #44	; 0x2c
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a360:	2414      	movs	r4, #20
 800a362:	193b      	adds	r3, r7, r4
 800a364:	0018      	movs	r0, r3
 800a366:	2314      	movs	r3, #20
 800a368:	001a      	movs	r2, r3
 800a36a:	2100      	movs	r1, #0
 800a36c:	f001 fcdf 	bl	800bd2e <memset>
  if(htim_ic->Instance==TIM2)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	2380      	movs	r3, #128	; 0x80
 800a376:	05db      	lsls	r3, r3, #23
 800a378:	429a      	cmp	r2, r3
 800a37a:	d136      	bne.n	800a3ea <HAL_TIM_IC_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a37c:	4b1d      	ldr	r3, [pc, #116]	; (800a3f4 <HAL_TIM_IC_MspInit+0x9c>)
 800a37e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a380:	4b1c      	ldr	r3, [pc, #112]	; (800a3f4 <HAL_TIM_IC_MspInit+0x9c>)
 800a382:	2101      	movs	r1, #1
 800a384:	430a      	orrs	r2, r1
 800a386:	63da      	str	r2, [r3, #60]	; 0x3c
 800a388:	4b1a      	ldr	r3, [pc, #104]	; (800a3f4 <HAL_TIM_IC_MspInit+0x9c>)
 800a38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38c:	2201      	movs	r2, #1
 800a38e:	4013      	ands	r3, r2
 800a390:	613b      	str	r3, [r7, #16]
 800a392:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a394:	4b17      	ldr	r3, [pc, #92]	; (800a3f4 <HAL_TIM_IC_MspInit+0x9c>)
 800a396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a398:	4b16      	ldr	r3, [pc, #88]	; (800a3f4 <HAL_TIM_IC_MspInit+0x9c>)
 800a39a:	2101      	movs	r1, #1
 800a39c:	430a      	orrs	r2, r1
 800a39e:	635a      	str	r2, [r3, #52]	; 0x34
 800a3a0:	4b14      	ldr	r3, [pc, #80]	; (800a3f4 <HAL_TIM_IC_MspInit+0x9c>)
 800a3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	60fb      	str	r3, [r7, #12]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a3ac:	0021      	movs	r1, r4
 800a3ae:	187b      	adds	r3, r7, r1
 800a3b0:	2208      	movs	r2, #8
 800a3b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3b4:	187b      	adds	r3, r7, r1
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ba:	187b      	adds	r3, r7, r1
 800a3bc:	2200      	movs	r2, #0
 800a3be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3c0:	187b      	adds	r3, r7, r1
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800a3c6:	187b      	adds	r3, r7, r1
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3cc:	187a      	adds	r2, r7, r1
 800a3ce:	23a0      	movs	r3, #160	; 0xa0
 800a3d0:	05db      	lsls	r3, r3, #23
 800a3d2:	0011      	movs	r1, r2
 800a3d4:	0018      	movs	r0, r3
 800a3d6:	f000 fc69 	bl	800acac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	200f      	movs	r0, #15
 800a3e0:	f000 fc3e 	bl	800ac60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a3e4:	200f      	movs	r0, #15
 800a3e6:	f000 fc50 	bl	800ac8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800a3ea:	46c0      	nop			; (mov r8, r8)
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	b00b      	add	sp, #44	; 0x2c
 800a3f0:	bd90      	pop	{r4, r7, pc}
 800a3f2:	46c0      	nop			; (mov r8, r8)
 800a3f4:	40021000 	.word	0x40021000

0800a3f8 <NMI_Handler>:


extern TIM_HandleTypeDef htim2;

void NMI_Handler(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a3fc:	e7fe      	b.n	800a3fc <NMI_Handler+0x4>

0800a3fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a402:	e7fe      	b.n	800a402 <HardFault_Handler+0x4>

0800a404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800a408:	46c0      	nop			; (mov r8, r8)
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a412:	46c0      	nop			; (mov r8, r8)
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */

void SysTick_Handler(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0
	//g_appConfig.miliCount++;
	HAL_IncTick();
 800a41c:	f000 fb86 	bl	800ab2c <HAL_IncTick>
	ulTickCount++;
 800a420:	4b0d      	ldr	r3, [pc, #52]	; (800a458 <SysTick_Handler+0x40>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	4b0c      	ldr	r3, [pc, #48]	; (800a458 <SysTick_Handler+0x40>)
 800a428:	601a      	str	r2, [r3, #0]
	ulMiliCount++;
 800a42a:	4b0c      	ldr	r3, [pc, #48]	; (800a45c <SysTick_Handler+0x44>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <SysTick_Handler+0x44>)
 800a432:	601a      	str	r2, [r3, #0]

	if (ulTickCount >= 1000) { //1 seconds
 800a434:	4b08      	ldr	r3, [pc, #32]	; (800a458 <SysTick_Handler+0x40>)
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	23fa      	movs	r3, #250	; 0xfa
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d307      	bcc.n	800a450 <SysTick_Handler+0x38>
		ulTickCount = 0;
 800a440:	4b05      	ldr	r3, [pc, #20]	; (800a458 <SysTick_Handler+0x40>)
 800a442:	2200      	movs	r2, #0
 800a444:	601a      	str	r2, [r3, #0]
		ulSecCount++;
 800a446:	4b06      	ldr	r3, [pc, #24]	; (800a460 <SysTick_Handler+0x48>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	1c5a      	adds	r2, r3, #1
 800a44c:	4b04      	ldr	r3, [pc, #16]	; (800a460 <SysTick_Handler+0x48>)
 800a44e:	601a      	str	r2, [r3, #0]
	}
}
 800a450:	46c0      	nop			; (mov r8, r8)
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	2000102c 	.word	0x2000102c
 800a45c:	20000364 	.word	0x20000364
 800a460:	20000360 	.word	0x20000360

0800a464 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	af00      	add	r7, sp, #0

}
 800a468:	46c0      	nop			; (mov r8, r8)
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
	...

0800a470 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a474:	4b03      	ldr	r3, [pc, #12]	; (800a484 <TIM2_IRQHandler+0x14>)
 800a476:	0018      	movs	r0, r3
 800a478:	f000 ffbe 	bl	800b3f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a47c:	46c0      	nop			; (mov r8, r8)
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	46c0      	nop			; (mov r8, r8)
 800a484:	20000314 	.word	0x20000314

0800a488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a490:	4a14      	ldr	r2, [pc, #80]	; (800a4e4 <_sbrk+0x5c>)
 800a492:	4b15      	ldr	r3, [pc, #84]	; (800a4e8 <_sbrk+0x60>)
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a49c:	4b13      	ldr	r3, [pc, #76]	; (800a4ec <_sbrk+0x64>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d102      	bne.n	800a4aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a4a4:	4b11      	ldr	r3, [pc, #68]	; (800a4ec <_sbrk+0x64>)
 800a4a6:	4a12      	ldr	r2, [pc, #72]	; (800a4f0 <_sbrk+0x68>)
 800a4a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a4aa:	4b10      	ldr	r3, [pc, #64]	; (800a4ec <_sbrk+0x64>)
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	18d3      	adds	r3, r2, r3
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d207      	bcs.n	800a4c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a4b8:	f001 fc06 	bl	800bcc8 <__errno>
 800a4bc:	0003      	movs	r3, r0
 800a4be:	220c      	movs	r2, #12
 800a4c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	425b      	negs	r3, r3
 800a4c6:	e009      	b.n	800a4dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a4c8:	4b08      	ldr	r3, [pc, #32]	; (800a4ec <_sbrk+0x64>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a4ce:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <_sbrk+0x64>)
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	18d2      	adds	r2, r2, r3
 800a4d6:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <_sbrk+0x64>)
 800a4d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800a4da:	68fb      	ldr	r3, [r7, #12]
}
 800a4dc:	0018      	movs	r0, r3
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	b006      	add	sp, #24
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	20002000 	.word	0x20002000
 800a4e8:	00000400 	.word	0x00000400
 800a4ec:	20001030 	.word	0x20001030
 800a4f0:	20001050 	.word	0x20001050

0800a4f4 <__NVIC_SetPriority>:
{
 800a4f4:	b590      	push	{r4, r7, lr}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	0002      	movs	r2, r0
 800a4fc:	6039      	str	r1, [r7, #0]
 800a4fe:	1dfb      	adds	r3, r7, #7
 800a500:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a502:	1dfb      	adds	r3, r7, #7
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	2b7f      	cmp	r3, #127	; 0x7f
 800a508:	d828      	bhi.n	800a55c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a50a:	4a2f      	ldr	r2, [pc, #188]	; (800a5c8 <__NVIC_SetPriority+0xd4>)
 800a50c:	1dfb      	adds	r3, r7, #7
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	b25b      	sxtb	r3, r3
 800a512:	089b      	lsrs	r3, r3, #2
 800a514:	33c0      	adds	r3, #192	; 0xc0
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	589b      	ldr	r3, [r3, r2]
 800a51a:	1dfa      	adds	r2, r7, #7
 800a51c:	7812      	ldrb	r2, [r2, #0]
 800a51e:	0011      	movs	r1, r2
 800a520:	2203      	movs	r2, #3
 800a522:	400a      	ands	r2, r1
 800a524:	00d2      	lsls	r2, r2, #3
 800a526:	21ff      	movs	r1, #255	; 0xff
 800a528:	4091      	lsls	r1, r2
 800a52a:	000a      	movs	r2, r1
 800a52c:	43d2      	mvns	r2, r2
 800a52e:	401a      	ands	r2, r3
 800a530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	019b      	lsls	r3, r3, #6
 800a536:	22ff      	movs	r2, #255	; 0xff
 800a538:	401a      	ands	r2, r3
 800a53a:	1dfb      	adds	r3, r7, #7
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	0018      	movs	r0, r3
 800a540:	2303      	movs	r3, #3
 800a542:	4003      	ands	r3, r0
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a548:	481f      	ldr	r0, [pc, #124]	; (800a5c8 <__NVIC_SetPriority+0xd4>)
 800a54a:	1dfb      	adds	r3, r7, #7
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	b25b      	sxtb	r3, r3
 800a550:	089b      	lsrs	r3, r3, #2
 800a552:	430a      	orrs	r2, r1
 800a554:	33c0      	adds	r3, #192	; 0xc0
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	501a      	str	r2, [r3, r0]
}
 800a55a:	e031      	b.n	800a5c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a55c:	4a1b      	ldr	r2, [pc, #108]	; (800a5cc <__NVIC_SetPriority+0xd8>)
 800a55e:	1dfb      	adds	r3, r7, #7
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	0019      	movs	r1, r3
 800a564:	230f      	movs	r3, #15
 800a566:	400b      	ands	r3, r1
 800a568:	3b08      	subs	r3, #8
 800a56a:	089b      	lsrs	r3, r3, #2
 800a56c:	3306      	adds	r3, #6
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	18d3      	adds	r3, r2, r3
 800a572:	3304      	adds	r3, #4
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	1dfa      	adds	r2, r7, #7
 800a578:	7812      	ldrb	r2, [r2, #0]
 800a57a:	0011      	movs	r1, r2
 800a57c:	2203      	movs	r2, #3
 800a57e:	400a      	ands	r2, r1
 800a580:	00d2      	lsls	r2, r2, #3
 800a582:	21ff      	movs	r1, #255	; 0xff
 800a584:	4091      	lsls	r1, r2
 800a586:	000a      	movs	r2, r1
 800a588:	43d2      	mvns	r2, r2
 800a58a:	401a      	ands	r2, r3
 800a58c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	019b      	lsls	r3, r3, #6
 800a592:	22ff      	movs	r2, #255	; 0xff
 800a594:	401a      	ands	r2, r3
 800a596:	1dfb      	adds	r3, r7, #7
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	0018      	movs	r0, r3
 800a59c:	2303      	movs	r3, #3
 800a59e:	4003      	ands	r3, r0
 800a5a0:	00db      	lsls	r3, r3, #3
 800a5a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a5a4:	4809      	ldr	r0, [pc, #36]	; (800a5cc <__NVIC_SetPriority+0xd8>)
 800a5a6:	1dfb      	adds	r3, r7, #7
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	001c      	movs	r4, r3
 800a5ac:	230f      	movs	r3, #15
 800a5ae:	4023      	ands	r3, r4
 800a5b0:	3b08      	subs	r3, #8
 800a5b2:	089b      	lsrs	r3, r3, #2
 800a5b4:	430a      	orrs	r2, r1
 800a5b6:	3306      	adds	r3, #6
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	18c3      	adds	r3, r0, r3
 800a5bc:	3304      	adds	r3, #4
 800a5be:	601a      	str	r2, [r3, #0]
}
 800a5c0:	46c0      	nop			; (mov r8, r8)
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	b003      	add	sp, #12
 800a5c6:	bd90      	pop	{r4, r7, pc}
 800a5c8:	e000e100 	.word	0xe000e100
 800a5cc:	e000ed00 	.word	0xe000ed00

0800a5d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	1e5a      	subs	r2, r3, #1
 800a5dc:	2380      	movs	r3, #128	; 0x80
 800a5de:	045b      	lsls	r3, r3, #17
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d301      	bcc.n	800a5e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e010      	b.n	800a60a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a5e8:	4b0a      	ldr	r3, [pc, #40]	; (800a614 <SysTick_Config+0x44>)
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	3a01      	subs	r2, #1
 800a5ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	425b      	negs	r3, r3
 800a5f4:	2103      	movs	r1, #3
 800a5f6:	0018      	movs	r0, r3
 800a5f8:	f7ff ff7c 	bl	800a4f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a5fc:	4b05      	ldr	r3, [pc, #20]	; (800a614 <SysTick_Config+0x44>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a602:	4b04      	ldr	r3, [pc, #16]	; (800a614 <SysTick_Config+0x44>)
 800a604:	2207      	movs	r2, #7
 800a606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a608:	2300      	movs	r3, #0
}
 800a60a:	0018      	movs	r0, r3
 800a60c:	46bd      	mov	sp, r7
 800a60e:	b002      	add	sp, #8
 800a610:	bd80      	pop	{r7, pc}
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	e000e010 	.word	0xe000e010

0800a618 <systemInit>:

static void SetSysClock(void);
static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
static void systickConfig(void);

void systemInit(void) {
 800a618:	b580      	push	{r7, lr}
 800a61a:	af00      	add	r7, sp, #0
	SetSysClock();
 800a61c:	f000 f828 	bl	800a670 <SetSysClock>
	systickConfig();
 800a620:	f000 f818 	bl	800a654 <systickConfig>
}
 800a624:	46c0      	nop			; (mov r8, r8)
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
	...

0800a62c <SysTick_CLKSourceConfig>:

static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b04      	cmp	r3, #4
 800a638:	d105      	bne.n	800a646 <SysTick_CLKSourceConfig+0x1a>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800a63a:	4b05      	ldr	r3, [pc, #20]	; (800a650 <SysTick_CLKSourceConfig+0x24>)
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b04      	ldr	r3, [pc, #16]	; (800a650 <SysTick_CLKSourceConfig+0x24>)
 800a640:	2104      	movs	r1, #4
 800a642:	430a      	orrs	r2, r1
 800a644:	601a      	str	r2, [r3, #0]
	}
}
 800a646:	46c0      	nop			; (mov r8, r8)
 800a648:	46bd      	mov	sp, r7
 800a64a:	b002      	add	sp, #8
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	46c0      	nop			; (mov r8, r8)
 800a650:	e000e010 	.word	0xe000e010

0800a654 <systickConfig>:

static void systickConfig(void) {
 800a654:	b580      	push	{r7, lr}
 800a656:	af00      	add	r7, sp, #0
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 800a658:	2004      	movs	r0, #4
 800a65a:	f7ff ffe7 	bl	800a62c <SysTick_CLKSourceConfig>
	SysTick_Config(systemClock / 1000);
 800a65e:	23fa      	movs	r3, #250	; 0xfa
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	0018      	movs	r0, r3
 800a664:	f7ff ffb4 	bl	800a5d0 <SysTick_Config>
}
 800a668:	46c0      	nop			; (mov r8, r8)
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
	...

0800a670 <SetSysClock>:

static void SetSysClock(void) {
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t) RCC_CR_HSEON);
 800a674:	4b2b      	ldr	r3, [pc, #172]	; (800a724 <SetSysClock+0xb4>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	4b2a      	ldr	r3, [pc, #168]	; (800a724 <SetSysClock+0xb4>)
 800a67a:	2180      	movs	r1, #128	; 0x80
 800a67c:	0249      	lsls	r1, r1, #9
 800a67e:	430a      	orrs	r2, r1
 800a680:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800a682:	46c0      	nop			; (mov r8, r8)
 800a684:	4b27      	ldr	r3, [pc, #156]	; (800a724 <SetSysClock+0xb4>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	2380      	movs	r3, #128	; 0x80
 800a68a:	029b      	lsls	r3, r3, #10
 800a68c:	4013      	ands	r3, r2
 800a68e:	d0f9      	beq.n	800a684 <SetSysClock+0x14>
		;

	/* Enable Prefetch Buffer and set Flash Latency */
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2;
 800a690:	4b25      	ldr	r3, [pc, #148]	; (800a728 <SetSysClock+0xb8>)
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	4b24      	ldr	r3, [pc, #144]	; (800a728 <SetSysClock+0xb8>)
 800a696:	2182      	movs	r1, #130	; 0x82
 800a698:	0049      	lsls	r1, r1, #1
 800a69a:	430a      	orrs	r2, r1
 800a69c:	601a      	str	r2, [r3, #0]
	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// APB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_HPRE);
 800a69e:	4b21      	ldr	r3, [pc, #132]	; (800a724 <SetSysClock+0xb4>)
 800a6a0:	689a      	ldr	r2, [r3, #8]
 800a6a2:	4b20      	ldr	r3, [pc, #128]	; (800a724 <SetSysClock+0xb4>)
 800a6a4:	4921      	ldr	r1, [pc, #132]	; (800a72c <SetSysClock+0xbc>)
 800a6a6:	400a      	ands	r2, r1
 800a6a8:	609a      	str	r2, [r3, #8]
	// AHB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_PPRE);
 800a6aa:	4b1e      	ldr	r3, [pc, #120]	; (800a724 <SetSysClock+0xb4>)
 800a6ac:	689a      	ldr	r2, [r3, #8]
 800a6ae:	4b1d      	ldr	r3, [pc, #116]	; (800a724 <SetSysClock+0xb4>)
 800a6b0:	491f      	ldr	r1, [pc, #124]	; (800a730 <SetSysClock+0xc0>)
 800a6b2:	400a      	ands	r2, r1
 800a6b4:	609a      	str	r2, [r3, #8]

	//PLL INPUT CLOCK SOURCE HSE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 800a6b6:	4b1b      	ldr	r3, [pc, #108]	; (800a724 <SetSysClock+0xb4>)
 800a6b8:	68da      	ldr	r2, [r3, #12]
 800a6ba:	4b1a      	ldr	r3, [pc, #104]	; (800a724 <SetSysClock+0xb4>)
 800a6bc:	2103      	movs	r1, #3
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	60da      	str	r2, [r3, #12]

	/* PLL configuration = HSE = 64 MHz */
	//PLLM = 1
	//PLLN = 16
	//PLLR = 2
	RCC->PLLCFGR &= (uint32_t) ((uint32_t) ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN
 800a6c2:	4b18      	ldr	r3, [pc, #96]	; (800a724 <SetSysClock+0xb4>)
 800a6c4:	68da      	ldr	r2, [r3, #12]
 800a6c6:	4b17      	ldr	r3, [pc, #92]	; (800a724 <SetSysClock+0xb4>)
 800a6c8:	491a      	ldr	r1, [pc, #104]	; (800a734 <SetSysClock+0xc4>)
 800a6ca:	400a      	ands	r2, r1
 800a6cc:	60da      	str	r2, [r3, #12]
			| RCC_PLLCFGR_PLLR));

	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4)
 800a6ce:	4b15      	ldr	r3, [pc, #84]	; (800a724 <SetSysClock+0xb4>)
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	4b14      	ldr	r3, [pc, #80]	; (800a724 <SetSysClock+0xb4>)
 800a6d4:	4918      	ldr	r1, [pc, #96]	; (800a738 <SetSysClock+0xc8>)
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	60da      	str	r2, [r3, #12]
			| (RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLREN) | (RCC_PLLCFGR_PLLQEN)
			| (RCC_PLLCFGR_PLLSRC_HSE);

	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 800a6da:	4b12      	ldr	r3, [pc, #72]	; (800a724 <SetSysClock+0xb4>)
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	4b11      	ldr	r3, [pc, #68]	; (800a724 <SetSysClock+0xb4>)
 800a6e0:	2180      	movs	r1, #128	; 0x80
 800a6e2:	0449      	lsls	r1, r1, #17
 800a6e4:	430a      	orrs	r2, r1
 800a6e6:	601a      	str	r2, [r3, #0]

	/* Wait till PLL is ready */
	while ((RCC->CR & RCC_CR_PLLRDY) == 0) {
 800a6e8:	46c0      	nop			; (mov r8, r8)
 800a6ea:	4b0e      	ldr	r3, [pc, #56]	; (800a724 <SetSysClock+0xb4>)
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	2380      	movs	r3, #128	; 0x80
 800a6f0:	049b      	lsls	r3, r3, #18
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	d0f9      	beq.n	800a6ea <SetSysClock+0x7a>
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (uint32_t) ((uint32_t) ~(RCC_CFGR_SW));
 800a6f6:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <SetSysClock+0xb4>)
 800a6f8:	689a      	ldr	r2, [r3, #8]
 800a6fa:	4b0a      	ldr	r3, [pc, #40]	; (800a724 <SetSysClock+0xb4>)
 800a6fc:	2107      	movs	r1, #7
 800a6fe:	438a      	bics	r2, r1
 800a700:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= (uint32_t) RCC_CFGR_SW_1;
 800a702:	4b08      	ldr	r3, [pc, #32]	; (800a724 <SetSysClock+0xb4>)
 800a704:	689a      	ldr	r2, [r3, #8]
 800a706:	4b07      	ldr	r3, [pc, #28]	; (800a724 <SetSysClock+0xb4>)
 800a708:	2102      	movs	r1, #2
 800a70a:	430a      	orrs	r2, r1
 800a70c:	609a      	str	r2, [r3, #8]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1)
 800a70e:	46c0      	nop			; (mov r8, r8)
 800a710:	4b04      	ldr	r3, [pc, #16]	; (800a724 <SetSysClock+0xb4>)
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	2238      	movs	r2, #56	; 0x38
 800a716:	4013      	ands	r3, r2
 800a718:	2b10      	cmp	r3, #16
 800a71a:	d1f9      	bne.n	800a710 <SetSysClock+0xa0>
		;
}
 800a71c:	46c0      	nop			; (mov r8, r8)
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	40021000 	.word	0x40021000
 800a728:	40022000 	.word	0x40022000
 800a72c:	fffff0ff 	.word	0xfffff0ff
 800a730:	ffff8fff 	.word	0xffff8fff
 800a734:	1fff808f 	.word	0x1fff808f
 800a738:	31001003 	.word	0x31001003

0800a73c <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	0002      	movs	r2, r0
 800a744:	1dfb      	adds	r3, r7, #7
 800a746:	701a      	strb	r2, [r3, #0]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 800a748:	4b0c      	ldr	r3, [pc, #48]	; (800a77c <xputc+0x40>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d008      	beq.n	800a762 <xputc+0x26>
		*outptr++ = (unsigned char)c;
 800a750:	4b0a      	ldr	r3, [pc, #40]	; (800a77c <xputc+0x40>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	1c59      	adds	r1, r3, #1
 800a756:	4a09      	ldr	r2, [pc, #36]	; (800a77c <xputc+0x40>)
 800a758:	6011      	str	r1, [r2, #0]
 800a75a:	1dfa      	adds	r2, r7, #7
 800a75c:	7812      	ldrb	r2, [r2, #0]
 800a75e:	701a      	strb	r2, [r3, #0]
		return;
 800a760:	e009      	b.n	800a776 <xputc+0x3a>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 800a762:	4b07      	ldr	r3, [pc, #28]	; (800a780 <xputc+0x44>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d005      	beq.n	800a776 <xputc+0x3a>
 800a76a:	4b05      	ldr	r3, [pc, #20]	; (800a780 <xputc+0x44>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	1dfa      	adds	r2, r7, #7
 800a770:	7812      	ldrb	r2, [r2, #0]
 800a772:	0010      	movs	r0, r2
 800a774:	4798      	blx	r3
}
 800a776:	46bd      	mov	sp, r7
 800a778:	b002      	add	sp, #8
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	20001038 	.word	0x20001038
 800a780:	20001034 	.word	0x20001034

0800a784 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
	while (*str)
 800a78c:	e006      	b.n	800a79c <xputs+0x18>
		xputc(*str++);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	0018      	movs	r0, r3
 800a798:	f7ff ffd0 	bl	800a73c <xputc>
	while (*str)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1f4      	bne.n	800a78e <xputs+0xa>
}
 800a7a4:	46c0      	nop			; (mov r8, r8)
 800a7a6:	46c0      	nop			; (mov r8, r8)
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	b002      	add	sp, #8
 800a7ac:	bd80      	pop	{r7, pc}
	...

0800a7b0 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 800a7b0:	b590      	push	{r4, r7, lr}
 800a7b2:	b08f      	sub	sp, #60	; 0x3c
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	1c5a      	adds	r2, r3, #1
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	211f      	movs	r1, #31
 800a7c2:	187a      	adds	r2, r7, r1
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	7013      	strb	r3, [r2, #0]
		if (!c) break;				/* End of format? */
 800a7c8:	000a      	movs	r2, r1
 800a7ca:	18bb      	adds	r3, r7, r2
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d100      	bne.n	800a7d4 <xvprintf+0x24>
 800a7d2:	e164      	b.n	800aa9e <xvprintf+0x2ee>
		if (c != '%') {				/* Pass through it if not a % sequense */
 800a7d4:	18bb      	adds	r3, r7, r2
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	2b25      	cmp	r3, #37	; 0x25
 800a7da:	d005      	beq.n	800a7e8 <xvprintf+0x38>
			xputc(c); continue;
 800a7dc:	18bb      	adds	r3, r7, r2
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	f7ff ffab 	bl	800a73c <xputc>
 800a7e6:	e159      	b.n	800aa9c <xvprintf+0x2ec>
		}
		f = 0;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	607a      	str	r2, [r7, #4]
 800a7f2:	211f      	movs	r1, #31
 800a7f4:	187a      	adds	r2, r7, r1
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padded */
 800a7fa:	187b      	adds	r3, r7, r1
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b30      	cmp	r3, #48	; 0x30
 800a800:	d108      	bne.n	800a814 <xvprintf+0x64>
			f = 1; c = *fmt++;
 800a802:	2301      	movs	r3, #1
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	607a      	str	r2, [r7, #4]
 800a80c:	187a      	adds	r2, r7, r1
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	7013      	strb	r3, [r2, #0]
 800a812:	e00c      	b.n	800a82e <xvprintf+0x7e>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a814:	211f      	movs	r1, #31
 800a816:	187b      	adds	r3, r7, r1
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	2b2d      	cmp	r3, #45	; 0x2d
 800a81c:	d107      	bne.n	800a82e <xvprintf+0x7e>
				f = 2; c = *fmt++;
 800a81e:	2302      	movs	r3, #2
 800a820:	627b      	str	r3, [r7, #36]	; 0x24
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	1c5a      	adds	r2, r3, #1
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	187a      	adds	r2, r7, r1
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	7013      	strb	r3, [r2, #0]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800a82e:	2300      	movs	r3, #0
 800a830:	62bb      	str	r3, [r7, #40]	; 0x28
 800a832:	e011      	b.n	800a858 <xvprintf+0xa8>
			w = w * 10 + c - '0';
 800a834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a836:	0013      	movs	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	189b      	adds	r3, r3, r2
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	001a      	movs	r2, r3
 800a840:	211f      	movs	r1, #31
 800a842:	187b      	adds	r3, r7, r1
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	18d3      	adds	r3, r2, r3
 800a848:	3b30      	subs	r3, #48	; 0x30
 800a84a:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	1c5a      	adds	r2, r3, #1
 800a850:	607a      	str	r2, [r7, #4]
 800a852:	187a      	adds	r2, r7, r1
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	7013      	strb	r3, [r2, #0]
 800a858:	221f      	movs	r2, #31
 800a85a:	18bb      	adds	r3, r7, r2
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	2b2f      	cmp	r3, #47	; 0x2f
 800a860:	d903      	bls.n	800a86a <xvprintf+0xba>
 800a862:	18bb      	adds	r3, r7, r2
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b39      	cmp	r3, #57	; 0x39
 800a868:	d9e4      	bls.n	800a834 <xvprintf+0x84>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a86a:	221f      	movs	r2, #31
 800a86c:	18bb      	adds	r3, r7, r2
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2b6c      	cmp	r3, #108	; 0x6c
 800a872:	d003      	beq.n	800a87c <xvprintf+0xcc>
 800a874:	18bb      	adds	r3, r7, r2
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	2b4c      	cmp	r3, #76	; 0x4c
 800a87a:	d10a      	bne.n	800a892 <xvprintf+0xe2>
			f |= 4; c = *fmt++;
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	2204      	movs	r2, #4
 800a880:	4313      	orrs	r3, r2
 800a882:	627b      	str	r3, [r7, #36]	; 0x24
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	1c5a      	adds	r2, r3, #1
 800a888:	607a      	str	r2, [r7, #4]
 800a88a:	221f      	movs	r2, #31
 800a88c:	18ba      	adds	r2, r7, r2
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;				/* End of format? */
 800a892:	221f      	movs	r2, #31
 800a894:	18bb      	adds	r3, r7, r2
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d100      	bne.n	800a89e <xvprintf+0xee>
 800a89c:	e101      	b.n	800aaa2 <xvprintf+0x2f2>
		d = c;
 800a89e:	211e      	movs	r1, #30
 800a8a0:	187b      	adds	r3, r7, r1
 800a8a2:	18ba      	adds	r2, r7, r2
 800a8a4:	7812      	ldrb	r2, [r2, #0]
 800a8a6:	701a      	strb	r2, [r3, #0]
		if (d >= 'a') d -= 0x20;
 800a8a8:	187b      	adds	r3, r7, r1
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	2b60      	cmp	r3, #96	; 0x60
 800a8ae:	d904      	bls.n	800a8ba <xvprintf+0x10a>
 800a8b0:	187b      	adds	r3, r7, r1
 800a8b2:	187a      	adds	r2, r7, r1
 800a8b4:	7812      	ldrb	r2, [r2, #0]
 800a8b6:	3a20      	subs	r2, #32
 800a8b8:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 800a8ba:	231e      	movs	r3, #30
 800a8bc:	18fb      	adds	r3, r7, r3
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	3b42      	subs	r3, #66	; 0x42
 800a8c2:	2b16      	cmp	r3, #22
 800a8c4:	d847      	bhi.n	800a956 <xvprintf+0x1a6>
 800a8c6:	009a      	lsls	r2, r3, #2
 800a8c8:	4b78      	ldr	r3, [pc, #480]	; (800aaac <xvprintf+0x2fc>)
 800a8ca:	18d3      	adds	r3, r2, r3
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	1d1a      	adds	r2, r3, #4
 800a8d4:	603a      	str	r2, [r7, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8de:	e002      	b.n	800a8e6 <xvprintf+0x136>
 800a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8e6:	69ba      	ldr	r2, [r7, #24]
 800a8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ea:	18d3      	adds	r3, r2, r3
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1f6      	bne.n	800a8e0 <xvprintf+0x130>
			while (!(f & 2) && j++ < w) xputc(' ');
 800a8f2:	e002      	b.n	800a8fa <xvprintf+0x14a>
 800a8f4:	2020      	movs	r0, #32
 800a8f6:	f7ff ff21 	bl	800a73c <xputc>
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	4013      	ands	r3, r2
 800a900:	d105      	bne.n	800a90e <xvprintf+0x15e>
 800a902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a904:	1c5a      	adds	r2, r3, #1
 800a906:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d8f2      	bhi.n	800a8f4 <xvprintf+0x144>
			xputs(p);
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	0018      	movs	r0, r3
 800a912:	f7ff ff37 	bl	800a784 <xputs>
			while (j++ < w) xputc(' ');
 800a916:	e002      	b.n	800a91e <xvprintf+0x16e>
 800a918:	2020      	movs	r0, #32
 800a91a:	f7ff ff0f 	bl	800a73c <xputc>
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a926:	429a      	cmp	r2, r3
 800a928:	d8f6      	bhi.n	800a918 <xvprintf+0x168>
			continue;
 800a92a:	e0b7      	b.n	800aa9c <xvprintf+0x2ec>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	1d1a      	adds	r2, r3, #4
 800a930:	603a      	str	r2, [r7, #0]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	b2db      	uxtb	r3, r3
 800a936:	0018      	movs	r0, r3
 800a938:	f7ff ff00 	bl	800a73c <xputc>
 800a93c:	e0ae      	b.n	800aa9c <xvprintf+0x2ec>
		case 'B' :					/* Binary */
			r = 2; break;
 800a93e:	2302      	movs	r3, #2
 800a940:	637b      	str	r3, [r7, #52]	; 0x34
 800a942:	e00f      	b.n	800a964 <xvprintf+0x1b4>
		case 'O' :					/* Octal */
			r = 8; break;
 800a944:	2308      	movs	r3, #8
 800a946:	637b      	str	r3, [r7, #52]	; 0x34
 800a948:	e00c      	b.n	800a964 <xvprintf+0x1b4>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800a94a:	230a      	movs	r3, #10
 800a94c:	637b      	str	r3, [r7, #52]	; 0x34
 800a94e:	e009      	b.n	800a964 <xvprintf+0x1b4>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800a950:	2310      	movs	r3, #16
 800a952:	637b      	str	r3, [r7, #52]	; 0x34
 800a954:	e006      	b.n	800a964 <xvprintf+0x1b4>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 800a956:	231f      	movs	r3, #31
 800a958:	18fb      	adds	r3, r7, r3
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	0018      	movs	r0, r3
 800a95e:	f7ff feed 	bl	800a73c <xputc>
 800a962:	e09b      	b.n	800aa9c <xvprintf+0x2ec>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	2204      	movs	r2, #4
 800a968:	4013      	ands	r3, r2
 800a96a:	d004      	beq.n	800a976 <xvprintf+0x1c6>
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	1d1a      	adds	r2, r3, #4
 800a970:	603a      	str	r2, [r7, #0]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	e00d      	b.n	800a992 <xvprintf+0x1e2>
 800a976:	231e      	movs	r3, #30
 800a978:	18fb      	adds	r3, r7, r3
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b44      	cmp	r3, #68	; 0x44
 800a97e:	d104      	bne.n	800a98a <xvprintf+0x1da>
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	1d1a      	adds	r2, r3, #4
 800a984:	603a      	str	r2, [r7, #0]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	e003      	b.n	800a992 <xvprintf+0x1e2>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	1d1a      	adds	r2, r3, #4
 800a98e:	603a      	str	r2, [r7, #0]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 800a994:	231e      	movs	r3, #30
 800a996:	18fb      	adds	r3, r7, r3
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2b44      	cmp	r3, #68	; 0x44
 800a99c:	d109      	bne.n	800a9b2 <xvprintf+0x202>
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	da06      	bge.n	800a9b2 <xvprintf+0x202>
			v = 0 - v;
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	425b      	negs	r3, r3
 800a9a8:	623b      	str	r3, [r7, #32]
			f |= 8;
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ac:	2208      	movs	r2, #8
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	f7f8 f83c 	bl	8002a38 <__aeabi_uidivmod>
 800a9c0:	000b      	movs	r3, r1
 800a9c2:	001a      	movs	r2, r3
 800a9c4:	241e      	movs	r4, #30
 800a9c6:	193b      	adds	r3, r7, r4
 800a9c8:	701a      	strb	r2, [r3, #0]
 800a9ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a9cc:	6a38      	ldr	r0, [r7, #32]
 800a9ce:	f7f7 ffad 	bl	800292c <__udivsi3>
 800a9d2:	0003      	movs	r3, r0
 800a9d4:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a9d6:	193b      	adds	r3, r7, r4
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	2b09      	cmp	r3, #9
 800a9dc:	d90d      	bls.n	800a9fa <xvprintf+0x24a>
 800a9de:	231f      	movs	r3, #31
 800a9e0:	18fb      	adds	r3, r7, r3
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b78      	cmp	r3, #120	; 0x78
 800a9e6:	d101      	bne.n	800a9ec <xvprintf+0x23c>
 800a9e8:	2327      	movs	r3, #39	; 0x27
 800a9ea:	e000      	b.n	800a9ee <xvprintf+0x23e>
 800a9ec:	2307      	movs	r3, #7
 800a9ee:	211e      	movs	r1, #30
 800a9f0:	187a      	adds	r2, r7, r1
 800a9f2:	1879      	adds	r1, r7, r1
 800a9f4:	7809      	ldrb	r1, [r1, #0]
 800a9f6:	185b      	adds	r3, r3, r1
 800a9f8:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	633a      	str	r2, [r7, #48]	; 0x30
 800aa00:	221e      	movs	r2, #30
 800aa02:	18ba      	adds	r2, r7, r2
 800aa04:	7812      	ldrb	r2, [r2, #0]
 800aa06:	3230      	adds	r2, #48	; 0x30
 800aa08:	b2d1      	uxtb	r1, r2
 800aa0a:	2208      	movs	r2, #8
 800aa0c:	18ba      	adds	r2, r7, r2
 800aa0e:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof(s));
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d002      	beq.n	800aa1c <xvprintf+0x26c>
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	2b0f      	cmp	r3, #15
 800aa1a:	d9cc      	bls.n	800a9b6 <xvprintf+0x206>
		if (f & 8) s[i++] = '-';
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	2208      	movs	r2, #8
 800aa20:	4013      	ands	r3, r2
 800aa22:	d006      	beq.n	800aa32 <xvprintf+0x282>
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	633a      	str	r2, [r7, #48]	; 0x30
 800aa2a:	2208      	movs	r2, #8
 800aa2c:	18ba      	adds	r2, r7, r2
 800aa2e:	212d      	movs	r1, #45	; 0x2d
 800aa30:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	2201      	movs	r2, #1
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	d001      	beq.n	800aa42 <xvprintf+0x292>
 800aa3e:	2230      	movs	r2, #48	; 0x30
 800aa40:	e000      	b.n	800aa44 <xvprintf+0x294>
 800aa42:	2220      	movs	r2, #32
 800aa44:	231e      	movs	r3, #30
 800aa46:	18fb      	adds	r3, r7, r3
 800aa48:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) xputc(d);
 800aa4a:	e005      	b.n	800aa58 <xvprintf+0x2a8>
 800aa4c:	231e      	movs	r3, #30
 800aa4e:	18fb      	adds	r3, r7, r3
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	0018      	movs	r0, r3
 800aa54:	f7ff fe72 	bl	800a73c <xputc>
 800aa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	d105      	bne.n	800aa6c <xvprintf+0x2bc>
 800aa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d8ef      	bhi.n	800aa4c <xvprintf+0x29c>
		do xputc(s[--i]); while(i);
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	633b      	str	r3, [r7, #48]	; 0x30
 800aa72:	2308      	movs	r3, #8
 800aa74:	18fa      	adds	r2, r7, r3
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	18d3      	adds	r3, r2, r3
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	0018      	movs	r0, r3
 800aa7e:	f7ff fe5d 	bl	800a73c <xputc>
 800aa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1f1      	bne.n	800aa6c <xvprintf+0x2bc>
		while (j++ < w) xputc(' ');
 800aa88:	e002      	b.n	800aa90 <xvprintf+0x2e0>
 800aa8a:	2020      	movs	r0, #32
 800aa8c:	f7ff fe56 	bl	800a73c <xputc>
 800aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d8f6      	bhi.n	800aa8a <xvprintf+0x2da>
		c = *fmt++;					/* Get a char */
 800aa9c:	e68d      	b.n	800a7ba <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 800aa9e:	46c0      	nop			; (mov r8, r8)
 800aaa0:	e000      	b.n	800aaa4 <xvprintf+0x2f4>
		if (!c) break;				/* End of format? */
 800aaa2:	46c0      	nop			; (mov r8, r8)
	}
}
 800aaa4:	46c0      	nop			; (mov r8, r8)
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	b00f      	add	sp, #60	; 0x3c
 800aaaa:	bd90      	pop	{r4, r7, pc}
 800aaac:	0800d410 	.word	0x0800d410

0800aab0 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 800aab0:	b40f      	push	{r0, r1, r2, r3}
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b082      	sub	sp, #8
 800aab6:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 800aab8:	2314      	movs	r3, #20
 800aaba:	18fb      	adds	r3, r7, r3
 800aabc:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	0011      	movs	r1, r2
 800aac4:	0018      	movs	r0, r3
 800aac6:	f7ff fe73 	bl	800a7b0 <xvprintf>
	va_end(arp);
}
 800aaca:	46c0      	nop			; (mov r8, r8)
 800aacc:	46bd      	mov	sp, r7
 800aace:	b002      	add	sp, #8
 800aad0:	bc80      	pop	{r7}
 800aad2:	bc08      	pop	{r3}
 800aad4:	b004      	add	sp, #16
 800aad6:	4718      	bx	r3

0800aad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800aad8:	480d      	ldr	r0, [pc, #52]	; (800ab10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800aada:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  systemInit
 800aadc:	f7ff fd9c 	bl	800a618 <systemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800aae0:	480c      	ldr	r0, [pc, #48]	; (800ab14 <LoopForever+0x6>)
  ldr r1, =_edata
 800aae2:	490d      	ldr	r1, [pc, #52]	; (800ab18 <LoopForever+0xa>)
  ldr r2, =_sidata
 800aae4:	4a0d      	ldr	r2, [pc, #52]	; (800ab1c <LoopForever+0xe>)
  movs r3, #0
 800aae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800aae8:	e002      	b.n	800aaf0 <LoopCopyDataInit>

0800aaea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aaea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aaec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aaee:	3304      	adds	r3, #4

0800aaf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aaf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aaf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aaf4:	d3f9      	bcc.n	800aaea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aaf6:	4a0a      	ldr	r2, [pc, #40]	; (800ab20 <LoopForever+0x12>)
  ldr r4, =_ebss
 800aaf8:	4c0a      	ldr	r4, [pc, #40]	; (800ab24 <LoopForever+0x16>)
  movs r3, #0
 800aafa:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aafc:	e001      	b.n	800ab02 <LoopFillZerobss>

0800aafe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aafe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ab00:	3204      	adds	r2, #4

0800ab02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ab02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ab04:	d3fb      	bcc.n	800aafe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800ab06:	f001 f8e5 	bl	800bcd4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800ab0a:	f7fd fb05 	bl	8008118 <main>

0800ab0e <LoopForever>:

LoopForever:
  b LoopForever
 800ab0e:	e7fe      	b.n	800ab0e <LoopForever>
  ldr   r0, =_estack
 800ab10:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800ab14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ab18:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 800ab1c:	0800d678 	.word	0x0800d678
  ldr r2, =_sbss
 800ab20:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 800ab24:	20001050 	.word	0x20001050

0800ab28 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ab28:	e7fe      	b.n	800ab28 <ADC1_IRQHandler>
	...

0800ab2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ab30:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <HAL_IncTick+0x1c>)
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	001a      	movs	r2, r3
 800ab36:	4b05      	ldr	r3, [pc, #20]	; (800ab4c <HAL_IncTick+0x20>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	18d2      	adds	r2, r2, r3
 800ab3c:	4b03      	ldr	r3, [pc, #12]	; (800ab4c <HAL_IncTick+0x20>)
 800ab3e:	601a      	str	r2, [r3, #0]
}
 800ab40:	46c0      	nop			; (mov r8, r8)
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	46c0      	nop			; (mov r8, r8)
 800ab48:	200000b8 	.word	0x200000b8
 800ab4c:	2000103c 	.word	0x2000103c

0800ab50 <__NVIC_EnableIRQ>:
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	0002      	movs	r2, r0
 800ab58:	1dfb      	adds	r3, r7, #7
 800ab5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ab5c:	1dfb      	adds	r3, r7, #7
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b7f      	cmp	r3, #127	; 0x7f
 800ab62:	d809      	bhi.n	800ab78 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab64:	1dfb      	adds	r3, r7, #7
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	001a      	movs	r2, r3
 800ab6a:	231f      	movs	r3, #31
 800ab6c:	401a      	ands	r2, r3
 800ab6e:	4b04      	ldr	r3, [pc, #16]	; (800ab80 <__NVIC_EnableIRQ+0x30>)
 800ab70:	2101      	movs	r1, #1
 800ab72:	4091      	lsls	r1, r2
 800ab74:	000a      	movs	r2, r1
 800ab76:	601a      	str	r2, [r3, #0]
}
 800ab78:	46c0      	nop			; (mov r8, r8)
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	b002      	add	sp, #8
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	e000e100 	.word	0xe000e100

0800ab84 <__NVIC_SetPriority>:
{
 800ab84:	b590      	push	{r4, r7, lr}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	0002      	movs	r2, r0
 800ab8c:	6039      	str	r1, [r7, #0]
 800ab8e:	1dfb      	adds	r3, r7, #7
 800ab90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ab92:	1dfb      	adds	r3, r7, #7
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b7f      	cmp	r3, #127	; 0x7f
 800ab98:	d828      	bhi.n	800abec <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab9a:	4a2f      	ldr	r2, [pc, #188]	; (800ac58 <__NVIC_SetPriority+0xd4>)
 800ab9c:	1dfb      	adds	r3, r7, #7
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	b25b      	sxtb	r3, r3
 800aba2:	089b      	lsrs	r3, r3, #2
 800aba4:	33c0      	adds	r3, #192	; 0xc0
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	589b      	ldr	r3, [r3, r2]
 800abaa:	1dfa      	adds	r2, r7, #7
 800abac:	7812      	ldrb	r2, [r2, #0]
 800abae:	0011      	movs	r1, r2
 800abb0:	2203      	movs	r2, #3
 800abb2:	400a      	ands	r2, r1
 800abb4:	00d2      	lsls	r2, r2, #3
 800abb6:	21ff      	movs	r1, #255	; 0xff
 800abb8:	4091      	lsls	r1, r2
 800abba:	000a      	movs	r2, r1
 800abbc:	43d2      	mvns	r2, r2
 800abbe:	401a      	ands	r2, r3
 800abc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	019b      	lsls	r3, r3, #6
 800abc6:	22ff      	movs	r2, #255	; 0xff
 800abc8:	401a      	ands	r2, r3
 800abca:	1dfb      	adds	r3, r7, #7
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	0018      	movs	r0, r3
 800abd0:	2303      	movs	r3, #3
 800abd2:	4003      	ands	r3, r0
 800abd4:	00db      	lsls	r3, r3, #3
 800abd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800abd8:	481f      	ldr	r0, [pc, #124]	; (800ac58 <__NVIC_SetPriority+0xd4>)
 800abda:	1dfb      	adds	r3, r7, #7
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	b25b      	sxtb	r3, r3
 800abe0:	089b      	lsrs	r3, r3, #2
 800abe2:	430a      	orrs	r2, r1
 800abe4:	33c0      	adds	r3, #192	; 0xc0
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	501a      	str	r2, [r3, r0]
}
 800abea:	e031      	b.n	800ac50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800abec:	4a1b      	ldr	r2, [pc, #108]	; (800ac5c <__NVIC_SetPriority+0xd8>)
 800abee:	1dfb      	adds	r3, r7, #7
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	0019      	movs	r1, r3
 800abf4:	230f      	movs	r3, #15
 800abf6:	400b      	ands	r3, r1
 800abf8:	3b08      	subs	r3, #8
 800abfa:	089b      	lsrs	r3, r3, #2
 800abfc:	3306      	adds	r3, #6
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	18d3      	adds	r3, r2, r3
 800ac02:	3304      	adds	r3, #4
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	1dfa      	adds	r2, r7, #7
 800ac08:	7812      	ldrb	r2, [r2, #0]
 800ac0a:	0011      	movs	r1, r2
 800ac0c:	2203      	movs	r2, #3
 800ac0e:	400a      	ands	r2, r1
 800ac10:	00d2      	lsls	r2, r2, #3
 800ac12:	21ff      	movs	r1, #255	; 0xff
 800ac14:	4091      	lsls	r1, r2
 800ac16:	000a      	movs	r2, r1
 800ac18:	43d2      	mvns	r2, r2
 800ac1a:	401a      	ands	r2, r3
 800ac1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	019b      	lsls	r3, r3, #6
 800ac22:	22ff      	movs	r2, #255	; 0xff
 800ac24:	401a      	ands	r2, r3
 800ac26:	1dfb      	adds	r3, r7, #7
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	0018      	movs	r0, r3
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	4003      	ands	r3, r0
 800ac30:	00db      	lsls	r3, r3, #3
 800ac32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ac34:	4809      	ldr	r0, [pc, #36]	; (800ac5c <__NVIC_SetPriority+0xd8>)
 800ac36:	1dfb      	adds	r3, r7, #7
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	001c      	movs	r4, r3
 800ac3c:	230f      	movs	r3, #15
 800ac3e:	4023      	ands	r3, r4
 800ac40:	3b08      	subs	r3, #8
 800ac42:	089b      	lsrs	r3, r3, #2
 800ac44:	430a      	orrs	r2, r1
 800ac46:	3306      	adds	r3, #6
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	18c3      	adds	r3, r0, r3
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	601a      	str	r2, [r3, #0]
}
 800ac50:	46c0      	nop			; (mov r8, r8)
 800ac52:	46bd      	mov	sp, r7
 800ac54:	b003      	add	sp, #12
 800ac56:	bd90      	pop	{r4, r7, pc}
 800ac58:	e000e100 	.word	0xe000e100
 800ac5c:	e000ed00 	.word	0xe000ed00

0800ac60 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60b9      	str	r1, [r7, #8]
 800ac68:	607a      	str	r2, [r7, #4]
 800ac6a:	210f      	movs	r1, #15
 800ac6c:	187b      	adds	r3, r7, r1
 800ac6e:	1c02      	adds	r2, r0, #0
 800ac70:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	187b      	adds	r3, r7, r1
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	b25b      	sxtb	r3, r3
 800ac7a:	0011      	movs	r1, r2
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	f7ff ff81 	bl	800ab84 <__NVIC_SetPriority>
}
 800ac82:	46c0      	nop			; (mov r8, r8)
 800ac84:	46bd      	mov	sp, r7
 800ac86:	b004      	add	sp, #16
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b082      	sub	sp, #8
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	0002      	movs	r2, r0
 800ac92:	1dfb      	adds	r3, r7, #7
 800ac94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ac96:	1dfb      	adds	r3, r7, #7
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	b25b      	sxtb	r3, r3
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	f7ff ff57 	bl	800ab50 <__NVIC_EnableIRQ>
}
 800aca2:	46c0      	nop			; (mov r8, r8)
 800aca4:	46bd      	mov	sp, r7
 800aca6:	b002      	add	sp, #8
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800acb6:	2300      	movs	r3, #0
 800acb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800acba:	e147      	b.n	800af4c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2101      	movs	r1, #1
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	4091      	lsls	r1, r2
 800acc6:	000a      	movs	r2, r1
 800acc8:	4013      	ands	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d100      	bne.n	800acd4 <HAL_GPIO_Init+0x28>
 800acd2:	e138      	b.n	800af46 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	2203      	movs	r2, #3
 800acda:	4013      	ands	r3, r2
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d005      	beq.n	800acec <HAL_GPIO_Init+0x40>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	2203      	movs	r2, #3
 800ace6:	4013      	ands	r3, r2
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d130      	bne.n	800ad4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	005b      	lsls	r3, r3, #1
 800acf6:	2203      	movs	r2, #3
 800acf8:	409a      	lsls	r2, r3
 800acfa:	0013      	movs	r3, r2
 800acfc:	43da      	mvns	r2, r3
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	4013      	ands	r3, r2
 800ad02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	68da      	ldr	r2, [r3, #12]
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	005b      	lsls	r3, r3, #1
 800ad0c:	409a      	lsls	r2, r3
 800ad0e:	0013      	movs	r3, r2
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ad22:	2201      	movs	r2, #1
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	409a      	lsls	r2, r3
 800ad28:	0013      	movs	r3, r2
 800ad2a:	43da      	mvns	r2, r3
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	4013      	ands	r3, r2
 800ad30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	091b      	lsrs	r3, r3, #4
 800ad38:	2201      	movs	r2, #1
 800ad3a:	401a      	ands	r2, r3
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	409a      	lsls	r2, r3
 800ad40:	0013      	movs	r3, r2
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	2203      	movs	r2, #3
 800ad54:	4013      	ands	r3, r2
 800ad56:	2b03      	cmp	r3, #3
 800ad58:	d017      	beq.n	800ad8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	2203      	movs	r2, #3
 800ad66:	409a      	lsls	r2, r3
 800ad68:	0013      	movs	r3, r2
 800ad6a:	43da      	mvns	r2, r3
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	4013      	ands	r3, r2
 800ad70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	689a      	ldr	r2, [r3, #8]
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	005b      	lsls	r3, r3, #1
 800ad7a:	409a      	lsls	r2, r3
 800ad7c:	0013      	movs	r3, r2
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	2203      	movs	r2, #3
 800ad90:	4013      	ands	r3, r2
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d123      	bne.n	800adde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	08da      	lsrs	r2, r3, #3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3208      	adds	r2, #8
 800ad9e:	0092      	lsls	r2, r2, #2
 800ada0:	58d3      	ldr	r3, [r2, r3]
 800ada2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	2207      	movs	r2, #7
 800ada8:	4013      	ands	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	220f      	movs	r2, #15
 800adae:	409a      	lsls	r2, r3
 800adb0:	0013      	movs	r3, r2
 800adb2:	43da      	mvns	r2, r3
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	4013      	ands	r3, r2
 800adb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	691a      	ldr	r2, [r3, #16]
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2107      	movs	r1, #7
 800adc2:	400b      	ands	r3, r1
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	409a      	lsls	r2, r3
 800adc8:	0013      	movs	r3, r2
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	4313      	orrs	r3, r2
 800adce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	08da      	lsrs	r2, r3, #3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3208      	adds	r2, #8
 800add8:	0092      	lsls	r2, r2, #2
 800adda:	6939      	ldr	r1, [r7, #16]
 800addc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	2203      	movs	r2, #3
 800adea:	409a      	lsls	r2, r3
 800adec:	0013      	movs	r3, r2
 800adee:	43da      	mvns	r2, r3
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	4013      	ands	r3, r2
 800adf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	2203      	movs	r2, #3
 800adfc:	401a      	ands	r2, r3
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	005b      	lsls	r3, r3, #1
 800ae02:	409a      	lsls	r2, r3
 800ae04:	0013      	movs	r3, r2
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	693a      	ldr	r2, [r7, #16]
 800ae10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	685a      	ldr	r2, [r3, #4]
 800ae16:	23c0      	movs	r3, #192	; 0xc0
 800ae18:	029b      	lsls	r3, r3, #10
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	d100      	bne.n	800ae20 <HAL_GPIO_Init+0x174>
 800ae1e:	e092      	b.n	800af46 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800ae20:	4a50      	ldr	r2, [pc, #320]	; (800af64 <HAL_GPIO_Init+0x2b8>)
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	089b      	lsrs	r3, r3, #2
 800ae26:	3318      	adds	r3, #24
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	589b      	ldr	r3, [r3, r2]
 800ae2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2203      	movs	r2, #3
 800ae32:	4013      	ands	r3, r2
 800ae34:	00db      	lsls	r3, r3, #3
 800ae36:	220f      	movs	r2, #15
 800ae38:	409a      	lsls	r2, r3
 800ae3a:	0013      	movs	r3, r2
 800ae3c:	43da      	mvns	r2, r3
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	4013      	ands	r3, r2
 800ae42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	23a0      	movs	r3, #160	; 0xa0
 800ae48:	05db      	lsls	r3, r3, #23
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d013      	beq.n	800ae76 <HAL_GPIO_Init+0x1ca>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a45      	ldr	r2, [pc, #276]	; (800af68 <HAL_GPIO_Init+0x2bc>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d00d      	beq.n	800ae72 <HAL_GPIO_Init+0x1c6>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a44      	ldr	r2, [pc, #272]	; (800af6c <HAL_GPIO_Init+0x2c0>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d007      	beq.n	800ae6e <HAL_GPIO_Init+0x1c2>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4a43      	ldr	r2, [pc, #268]	; (800af70 <HAL_GPIO_Init+0x2c4>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d101      	bne.n	800ae6a <HAL_GPIO_Init+0x1be>
 800ae66:	2303      	movs	r3, #3
 800ae68:	e006      	b.n	800ae78 <HAL_GPIO_Init+0x1cc>
 800ae6a:	2305      	movs	r3, #5
 800ae6c:	e004      	b.n	800ae78 <HAL_GPIO_Init+0x1cc>
 800ae6e:	2302      	movs	r3, #2
 800ae70:	e002      	b.n	800ae78 <HAL_GPIO_Init+0x1cc>
 800ae72:	2301      	movs	r3, #1
 800ae74:	e000      	b.n	800ae78 <HAL_GPIO_Init+0x1cc>
 800ae76:	2300      	movs	r3, #0
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	2103      	movs	r1, #3
 800ae7c:	400a      	ands	r2, r1
 800ae7e:	00d2      	lsls	r2, r2, #3
 800ae80:	4093      	lsls	r3, r2
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800ae88:	4936      	ldr	r1, [pc, #216]	; (800af64 <HAL_GPIO_Init+0x2b8>)
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	089b      	lsrs	r3, r3, #2
 800ae8e:	3318      	adds	r3, #24
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	693a      	ldr	r2, [r7, #16]
 800ae94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ae96:	4b33      	ldr	r3, [pc, #204]	; (800af64 <HAL_GPIO_Init+0x2b8>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	43da      	mvns	r2, r3
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	4013      	ands	r3, r2
 800aea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	2380      	movs	r3, #128	; 0x80
 800aeac:	035b      	lsls	r3, r3, #13
 800aeae:	4013      	ands	r3, r2
 800aeb0:	d003      	beq.n	800aeba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800aeba:	4b2a      	ldr	r3, [pc, #168]	; (800af64 <HAL_GPIO_Init+0x2b8>)
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800aec0:	4b28      	ldr	r3, [pc, #160]	; (800af64 <HAL_GPIO_Init+0x2b8>)
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	43da      	mvns	r2, r3
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	4013      	ands	r3, r2
 800aece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	2380      	movs	r3, #128	; 0x80
 800aed6:	039b      	lsls	r3, r3, #14
 800aed8:	4013      	ands	r3, r2
 800aeda:	d003      	beq.n	800aee4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4313      	orrs	r3, r2
 800aee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800aee4:	4b1f      	ldr	r3, [pc, #124]	; (800af64 <HAL_GPIO_Init+0x2b8>)
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800aeea:	4a1e      	ldr	r2, [pc, #120]	; (800af64 <HAL_GPIO_Init+0x2b8>)
 800aeec:	2384      	movs	r3, #132	; 0x84
 800aeee:	58d3      	ldr	r3, [r2, r3]
 800aef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	43da      	mvns	r2, r3
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	4013      	ands	r3, r2
 800aefa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	2380      	movs	r3, #128	; 0x80
 800af02:	029b      	lsls	r3, r3, #10
 800af04:	4013      	ands	r3, r2
 800af06:	d003      	beq.n	800af10 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800af08:	693a      	ldr	r2, [r7, #16]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800af10:	4914      	ldr	r1, [pc, #80]	; (800af64 <HAL_GPIO_Init+0x2b8>)
 800af12:	2284      	movs	r2, #132	; 0x84
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800af18:	4a12      	ldr	r2, [pc, #72]	; (800af64 <HAL_GPIO_Init+0x2b8>)
 800af1a:	2380      	movs	r3, #128	; 0x80
 800af1c:	58d3      	ldr	r3, [r2, r3]
 800af1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	43da      	mvns	r2, r3
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	4013      	ands	r3, r2
 800af28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	2380      	movs	r3, #128	; 0x80
 800af30:	025b      	lsls	r3, r3, #9
 800af32:	4013      	ands	r3, r2
 800af34:	d003      	beq.n	800af3e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800af3e:	4909      	ldr	r1, [pc, #36]	; (800af64 <HAL_GPIO_Init+0x2b8>)
 800af40:	2280      	movs	r2, #128	; 0x80
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	3301      	adds	r3, #1
 800af4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	40da      	lsrs	r2, r3
 800af54:	1e13      	subs	r3, r2, #0
 800af56:	d000      	beq.n	800af5a <HAL_GPIO_Init+0x2ae>
 800af58:	e6b0      	b.n	800acbc <HAL_GPIO_Init+0x10>
  }
}
 800af5a:	46c0      	nop			; (mov r8, r8)
 800af5c:	46c0      	nop			; (mov r8, r8)
 800af5e:	46bd      	mov	sp, r7
 800af60:	b006      	add	sp, #24
 800af62:	bd80      	pop	{r7, pc}
 800af64:	40021800 	.word	0x40021800
 800af68:	50000400 	.word	0x50000400
 800af6c:	50000800 	.word	0x50000800
 800af70:	50000c00 	.word	0x50000c00

0800af74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e04a      	b.n	800b01c <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	223d      	movs	r2, #61	; 0x3d
 800af8a:	5c9b      	ldrb	r3, [r3, r2]
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d107      	bne.n	800afa2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	223c      	movs	r2, #60	; 0x3c
 800af96:	2100      	movs	r1, #0
 800af98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	0018      	movs	r0, r3
 800af9e:	f7ff f9db 	bl	800a358 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	223d      	movs	r2, #61	; 0x3d
 800afa6:	2102      	movs	r1, #2
 800afa8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3304      	adds	r3, #4
 800afb2:	0019      	movs	r1, r3
 800afb4:	0010      	movs	r0, r2
 800afb6:	f000 fc49 	bl	800b84c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2248      	movs	r2, #72	; 0x48
 800afbe:	2101      	movs	r1, #1
 800afc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	223e      	movs	r2, #62	; 0x3e
 800afc6:	2101      	movs	r1, #1
 800afc8:	5499      	strb	r1, [r3, r2]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	223f      	movs	r2, #63	; 0x3f
 800afce:	2101      	movs	r1, #1
 800afd0:	5499      	strb	r1, [r3, r2]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2240      	movs	r2, #64	; 0x40
 800afd6:	2101      	movs	r1, #1
 800afd8:	5499      	strb	r1, [r3, r2]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2241      	movs	r2, #65	; 0x41
 800afde:	2101      	movs	r1, #1
 800afe0:	5499      	strb	r1, [r3, r2]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2242      	movs	r2, #66	; 0x42
 800afe6:	2101      	movs	r1, #1
 800afe8:	5499      	strb	r1, [r3, r2]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2243      	movs	r2, #67	; 0x43
 800afee:	2101      	movs	r1, #1
 800aff0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2244      	movs	r2, #68	; 0x44
 800aff6:	2101      	movs	r1, #1
 800aff8:	5499      	strb	r1, [r3, r2]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2245      	movs	r2, #69	; 0x45
 800affe:	2101      	movs	r1, #1
 800b000:	5499      	strb	r1, [r3, r2]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2246      	movs	r2, #70	; 0x46
 800b006:	2101      	movs	r1, #1
 800b008:	5499      	strb	r1, [r3, r2]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2247      	movs	r2, #71	; 0x47
 800b00e:	2101      	movs	r1, #1
 800b010:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	223d      	movs	r2, #61	; 0x3d
 800b016:	2101      	movs	r1, #1
 800b018:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	0018      	movs	r0, r3
 800b01e:	46bd      	mov	sp, r7
 800b020:	b002      	add	sp, #8
 800b022:	bd80      	pop	{r7, pc}

0800b024 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b02e:	230f      	movs	r3, #15
 800b030:	18fb      	adds	r3, r7, r3
 800b032:	2200      	movs	r2, #0
 800b034:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d104      	bne.n	800b046 <HAL_TIM_IC_Start_IT+0x22>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	223e      	movs	r2, #62	; 0x3e
 800b040:	5c9b      	ldrb	r3, [r3, r2]
 800b042:	b2db      	uxtb	r3, r3
 800b044:	e023      	b.n	800b08e <HAL_TIM_IC_Start_IT+0x6a>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b04      	cmp	r3, #4
 800b04a:	d104      	bne.n	800b056 <HAL_TIM_IC_Start_IT+0x32>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	223f      	movs	r2, #63	; 0x3f
 800b050:	5c9b      	ldrb	r3, [r3, r2]
 800b052:	b2db      	uxtb	r3, r3
 800b054:	e01b      	b.n	800b08e <HAL_TIM_IC_Start_IT+0x6a>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b08      	cmp	r3, #8
 800b05a:	d104      	bne.n	800b066 <HAL_TIM_IC_Start_IT+0x42>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2240      	movs	r2, #64	; 0x40
 800b060:	5c9b      	ldrb	r3, [r3, r2]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	e013      	b.n	800b08e <HAL_TIM_IC_Start_IT+0x6a>
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b0c      	cmp	r3, #12
 800b06a:	d104      	bne.n	800b076 <HAL_TIM_IC_Start_IT+0x52>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2241      	movs	r2, #65	; 0x41
 800b070:	5c9b      	ldrb	r3, [r3, r2]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	e00b      	b.n	800b08e <HAL_TIM_IC_Start_IT+0x6a>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b10      	cmp	r3, #16
 800b07a:	d104      	bne.n	800b086 <HAL_TIM_IC_Start_IT+0x62>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2242      	movs	r2, #66	; 0x42
 800b080:	5c9b      	ldrb	r3, [r3, r2]
 800b082:	b2db      	uxtb	r3, r3
 800b084:	e003      	b.n	800b08e <HAL_TIM_IC_Start_IT+0x6a>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2243      	movs	r2, #67	; 0x43
 800b08a:	5c9b      	ldrb	r3, [r3, r2]
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	220e      	movs	r2, #14
 800b090:	18ba      	adds	r2, r7, r2
 800b092:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d104      	bne.n	800b0a4 <HAL_TIM_IC_Start_IT+0x80>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2244      	movs	r2, #68	; 0x44
 800b09e:	5c9b      	ldrb	r3, [r3, r2]
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	e013      	b.n	800b0cc <HAL_TIM_IC_Start_IT+0xa8>
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	2b04      	cmp	r3, #4
 800b0a8:	d104      	bne.n	800b0b4 <HAL_TIM_IC_Start_IT+0x90>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2245      	movs	r2, #69	; 0x45
 800b0ae:	5c9b      	ldrb	r3, [r3, r2]
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	e00b      	b.n	800b0cc <HAL_TIM_IC_Start_IT+0xa8>
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	2b08      	cmp	r3, #8
 800b0b8:	d104      	bne.n	800b0c4 <HAL_TIM_IC_Start_IT+0xa0>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2246      	movs	r2, #70	; 0x46
 800b0be:	5c9b      	ldrb	r3, [r3, r2]
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	e003      	b.n	800b0cc <HAL_TIM_IC_Start_IT+0xa8>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2247      	movs	r2, #71	; 0x47
 800b0c8:	5c9b      	ldrb	r3, [r3, r2]
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	210d      	movs	r1, #13
 800b0ce:	187a      	adds	r2, r7, r1
 800b0d0:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0d2:	230e      	movs	r3, #14
 800b0d4:	18fb      	adds	r3, r7, r3
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d103      	bne.n	800b0e4 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800b0dc:	187b      	adds	r3, r7, r1
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d001      	beq.n	800b0e8 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e0c3      	b.n	800b270 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d104      	bne.n	800b0f8 <HAL_TIM_IC_Start_IT+0xd4>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	223e      	movs	r2, #62	; 0x3e
 800b0f2:	2102      	movs	r1, #2
 800b0f4:	5499      	strb	r1, [r3, r2]
 800b0f6:	e023      	b.n	800b140 <HAL_TIM_IC_Start_IT+0x11c>
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	d104      	bne.n	800b108 <HAL_TIM_IC_Start_IT+0xe4>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	223f      	movs	r2, #63	; 0x3f
 800b102:	2102      	movs	r1, #2
 800b104:	5499      	strb	r1, [r3, r2]
 800b106:	e01b      	b.n	800b140 <HAL_TIM_IC_Start_IT+0x11c>
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	2b08      	cmp	r3, #8
 800b10c:	d104      	bne.n	800b118 <HAL_TIM_IC_Start_IT+0xf4>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2240      	movs	r2, #64	; 0x40
 800b112:	2102      	movs	r1, #2
 800b114:	5499      	strb	r1, [r3, r2]
 800b116:	e013      	b.n	800b140 <HAL_TIM_IC_Start_IT+0x11c>
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2b0c      	cmp	r3, #12
 800b11c:	d104      	bne.n	800b128 <HAL_TIM_IC_Start_IT+0x104>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2241      	movs	r2, #65	; 0x41
 800b122:	2102      	movs	r1, #2
 800b124:	5499      	strb	r1, [r3, r2]
 800b126:	e00b      	b.n	800b140 <HAL_TIM_IC_Start_IT+0x11c>
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	2b10      	cmp	r3, #16
 800b12c:	d104      	bne.n	800b138 <HAL_TIM_IC_Start_IT+0x114>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2242      	movs	r2, #66	; 0x42
 800b132:	2102      	movs	r1, #2
 800b134:	5499      	strb	r1, [r3, r2]
 800b136:	e003      	b.n	800b140 <HAL_TIM_IC_Start_IT+0x11c>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2243      	movs	r2, #67	; 0x43
 800b13c:	2102      	movs	r1, #2
 800b13e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d104      	bne.n	800b150 <HAL_TIM_IC_Start_IT+0x12c>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2244      	movs	r2, #68	; 0x44
 800b14a:	2102      	movs	r1, #2
 800b14c:	5499      	strb	r1, [r3, r2]
 800b14e:	e013      	b.n	800b178 <HAL_TIM_IC_Start_IT+0x154>
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	2b04      	cmp	r3, #4
 800b154:	d104      	bne.n	800b160 <HAL_TIM_IC_Start_IT+0x13c>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2245      	movs	r2, #69	; 0x45
 800b15a:	2102      	movs	r1, #2
 800b15c:	5499      	strb	r1, [r3, r2]
 800b15e:	e00b      	b.n	800b178 <HAL_TIM_IC_Start_IT+0x154>
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	2b08      	cmp	r3, #8
 800b164:	d104      	bne.n	800b170 <HAL_TIM_IC_Start_IT+0x14c>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2246      	movs	r2, #70	; 0x46
 800b16a:	2102      	movs	r1, #2
 800b16c:	5499      	strb	r1, [r3, r2]
 800b16e:	e003      	b.n	800b178 <HAL_TIM_IC_Start_IT+0x154>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2247      	movs	r2, #71	; 0x47
 800b174:	2102      	movs	r1, #2
 800b176:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2b0c      	cmp	r3, #12
 800b17c:	d02a      	beq.n	800b1d4 <HAL_TIM_IC_Start_IT+0x1b0>
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b0c      	cmp	r3, #12
 800b182:	d830      	bhi.n	800b1e6 <HAL_TIM_IC_Start_IT+0x1c2>
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2b08      	cmp	r3, #8
 800b188:	d01b      	beq.n	800b1c2 <HAL_TIM_IC_Start_IT+0x19e>
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b08      	cmp	r3, #8
 800b18e:	d82a      	bhi.n	800b1e6 <HAL_TIM_IC_Start_IT+0x1c2>
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d003      	beq.n	800b19e <HAL_TIM_IC_Start_IT+0x17a>
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	2b04      	cmp	r3, #4
 800b19a:	d009      	beq.n	800b1b0 <HAL_TIM_IC_Start_IT+0x18c>
 800b19c:	e023      	b.n	800b1e6 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68da      	ldr	r2, [r3, #12]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2102      	movs	r1, #2
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	60da      	str	r2, [r3, #12]
      break;
 800b1ae:	e01f      	b.n	800b1f0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	68da      	ldr	r2, [r3, #12]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2104      	movs	r1, #4
 800b1bc:	430a      	orrs	r2, r1
 800b1be:	60da      	str	r2, [r3, #12]
      break;
 800b1c0:	e016      	b.n	800b1f0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68da      	ldr	r2, [r3, #12]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2108      	movs	r1, #8
 800b1ce:	430a      	orrs	r2, r1
 800b1d0:	60da      	str	r2, [r3, #12]
      break;
 800b1d2:	e00d      	b.n	800b1f0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68da      	ldr	r2, [r3, #12]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2110      	movs	r1, #16
 800b1e0:	430a      	orrs	r2, r1
 800b1e2:	60da      	str	r2, [r3, #12]
      break;
 800b1e4:	e004      	b.n	800b1f0 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800b1e6:	230f      	movs	r3, #15
 800b1e8:	18fb      	adds	r3, r7, r3
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	701a      	strb	r2, [r3, #0]
      break;
 800b1ee:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800b1f0:	230f      	movs	r3, #15
 800b1f2:	18fb      	adds	r3, r7, r3
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d137      	bne.n	800b26a <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	2201      	movs	r2, #1
 800b202:	0018      	movs	r0, r3
 800b204:	f000 fcb6 	bl	800bb74 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a1a      	ldr	r2, [pc, #104]	; (800b278 <HAL_TIM_IC_Start_IT+0x254>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d00a      	beq.n	800b228 <HAL_TIM_IC_Start_IT+0x204>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	2380      	movs	r3, #128	; 0x80
 800b218:	05db      	lsls	r3, r3, #23
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d004      	beq.n	800b228 <HAL_TIM_IC_Start_IT+0x204>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a16      	ldr	r2, [pc, #88]	; (800b27c <HAL_TIM_IC_Start_IT+0x258>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d116      	bne.n	800b256 <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	4a14      	ldr	r2, [pc, #80]	; (800b280 <HAL_TIM_IC_Start_IT+0x25c>)
 800b230:	4013      	ands	r3, r2
 800b232:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2b06      	cmp	r3, #6
 800b238:	d016      	beq.n	800b268 <HAL_TIM_IC_Start_IT+0x244>
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	2380      	movs	r3, #128	; 0x80
 800b23e:	025b      	lsls	r3, r3, #9
 800b240:	429a      	cmp	r2, r3
 800b242:	d011      	beq.n	800b268 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2101      	movs	r1, #1
 800b250:	430a      	orrs	r2, r1
 800b252:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b254:	e008      	b.n	800b268 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2101      	movs	r1, #1
 800b262:	430a      	orrs	r2, r1
 800b264:	601a      	str	r2, [r3, #0]
 800b266:	e000      	b.n	800b26a <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b268:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800b26a:	230f      	movs	r3, #15
 800b26c:	18fb      	adds	r3, r7, r3
 800b26e:	781b      	ldrb	r3, [r3, #0]
}
 800b270:	0018      	movs	r0, r3
 800b272:	46bd      	mov	sp, r7
 800b274:	b004      	add	sp, #16
 800b276:	bd80      	pop	{r7, pc}
 800b278:	40012c00 	.word	0x40012c00
 800b27c:	40000400 	.word	0x40000400
 800b280:	00010007 	.word	0x00010007

0800b284 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b28e:	230f      	movs	r3, #15
 800b290:	18fb      	adds	r3, r7, r3
 800b292:	2200      	movs	r2, #0
 800b294:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b0c      	cmp	r3, #12
 800b29a:	d02a      	beq.n	800b2f2 <HAL_TIM_IC_Stop_IT+0x6e>
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	2b0c      	cmp	r3, #12
 800b2a0:	d830      	bhi.n	800b304 <HAL_TIM_IC_Stop_IT+0x80>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b08      	cmp	r3, #8
 800b2a6:	d01b      	beq.n	800b2e0 <HAL_TIM_IC_Stop_IT+0x5c>
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2b08      	cmp	r3, #8
 800b2ac:	d82a      	bhi.n	800b304 <HAL_TIM_IC_Stop_IT+0x80>
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d003      	beq.n	800b2bc <HAL_TIM_IC_Stop_IT+0x38>
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	d009      	beq.n	800b2ce <HAL_TIM_IC_Stop_IT+0x4a>
 800b2ba:	e023      	b.n	800b304 <HAL_TIM_IC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68da      	ldr	r2, [r3, #12]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2102      	movs	r1, #2
 800b2c8:	438a      	bics	r2, r1
 800b2ca:	60da      	str	r2, [r3, #12]
      break;
 800b2cc:	e01f      	b.n	800b30e <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68da      	ldr	r2, [r3, #12]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2104      	movs	r1, #4
 800b2da:	438a      	bics	r2, r1
 800b2dc:	60da      	str	r2, [r3, #12]
      break;
 800b2de:	e016      	b.n	800b30e <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2108      	movs	r1, #8
 800b2ec:	438a      	bics	r2, r1
 800b2ee:	60da      	str	r2, [r3, #12]
      break;
 800b2f0:	e00d      	b.n	800b30e <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2110      	movs	r1, #16
 800b2fe:	438a      	bics	r2, r1
 800b300:	60da      	str	r2, [r3, #12]
      break;
 800b302:	e004      	b.n	800b30e <HAL_TIM_IC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 800b304:	230f      	movs	r3, #15
 800b306:	18fb      	adds	r3, r7, r3
 800b308:	2201      	movs	r2, #1
 800b30a:	701a      	strb	r2, [r3, #0]
      break;
 800b30c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800b30e:	230f      	movs	r3, #15
 800b310:	18fb      	adds	r3, r7, r3
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d000      	beq.n	800b31a <HAL_TIM_IC_Stop_IT+0x96>
 800b318:	e062      	b.n	800b3e0 <HAL_TIM_IC_Stop_IT+0x15c>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	2200      	movs	r2, #0
 800b322:	0018      	movs	r0, r3
 800b324:	f000 fc26 	bl	800bb74 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	4a30      	ldr	r2, [pc, #192]	; (800b3f0 <HAL_TIM_IC_Stop_IT+0x16c>)
 800b330:	4013      	ands	r3, r2
 800b332:	d10d      	bne.n	800b350 <HAL_TIM_IC_Stop_IT+0xcc>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	4a2e      	ldr	r2, [pc, #184]	; (800b3f4 <HAL_TIM_IC_Stop_IT+0x170>)
 800b33c:	4013      	ands	r3, r2
 800b33e:	d107      	bne.n	800b350 <HAL_TIM_IC_Stop_IT+0xcc>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2101      	movs	r1, #1
 800b34c:	438a      	bics	r2, r1
 800b34e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d104      	bne.n	800b360 <HAL_TIM_IC_Stop_IT+0xdc>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	223e      	movs	r2, #62	; 0x3e
 800b35a:	2101      	movs	r1, #1
 800b35c:	5499      	strb	r1, [r3, r2]
 800b35e:	e023      	b.n	800b3a8 <HAL_TIM_IC_Stop_IT+0x124>
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	2b04      	cmp	r3, #4
 800b364:	d104      	bne.n	800b370 <HAL_TIM_IC_Stop_IT+0xec>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	223f      	movs	r2, #63	; 0x3f
 800b36a:	2101      	movs	r1, #1
 800b36c:	5499      	strb	r1, [r3, r2]
 800b36e:	e01b      	b.n	800b3a8 <HAL_TIM_IC_Stop_IT+0x124>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	2b08      	cmp	r3, #8
 800b374:	d104      	bne.n	800b380 <HAL_TIM_IC_Stop_IT+0xfc>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2240      	movs	r2, #64	; 0x40
 800b37a:	2101      	movs	r1, #1
 800b37c:	5499      	strb	r1, [r3, r2]
 800b37e:	e013      	b.n	800b3a8 <HAL_TIM_IC_Stop_IT+0x124>
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2b0c      	cmp	r3, #12
 800b384:	d104      	bne.n	800b390 <HAL_TIM_IC_Stop_IT+0x10c>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2241      	movs	r2, #65	; 0x41
 800b38a:	2101      	movs	r1, #1
 800b38c:	5499      	strb	r1, [r3, r2]
 800b38e:	e00b      	b.n	800b3a8 <HAL_TIM_IC_Stop_IT+0x124>
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	2b10      	cmp	r3, #16
 800b394:	d104      	bne.n	800b3a0 <HAL_TIM_IC_Stop_IT+0x11c>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2242      	movs	r2, #66	; 0x42
 800b39a:	2101      	movs	r1, #1
 800b39c:	5499      	strb	r1, [r3, r2]
 800b39e:	e003      	b.n	800b3a8 <HAL_TIM_IC_Stop_IT+0x124>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2243      	movs	r2, #67	; 0x43
 800b3a4:	2101      	movs	r1, #1
 800b3a6:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d104      	bne.n	800b3b8 <HAL_TIM_IC_Stop_IT+0x134>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2244      	movs	r2, #68	; 0x44
 800b3b2:	2101      	movs	r1, #1
 800b3b4:	5499      	strb	r1, [r3, r2]
 800b3b6:	e013      	b.n	800b3e0 <HAL_TIM_IC_Stop_IT+0x15c>
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	2b04      	cmp	r3, #4
 800b3bc:	d104      	bne.n	800b3c8 <HAL_TIM_IC_Stop_IT+0x144>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2245      	movs	r2, #69	; 0x45
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	5499      	strb	r1, [r3, r2]
 800b3c6:	e00b      	b.n	800b3e0 <HAL_TIM_IC_Stop_IT+0x15c>
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	2b08      	cmp	r3, #8
 800b3cc:	d104      	bne.n	800b3d8 <HAL_TIM_IC_Stop_IT+0x154>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2246      	movs	r2, #70	; 0x46
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	5499      	strb	r1, [r3, r2]
 800b3d6:	e003      	b.n	800b3e0 <HAL_TIM_IC_Stop_IT+0x15c>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2247      	movs	r2, #71	; 0x47
 800b3dc:	2101      	movs	r1, #1
 800b3de:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800b3e0:	230f      	movs	r3, #15
 800b3e2:	18fb      	adds	r3, r7, r3
 800b3e4:	781b      	ldrb	r3, [r3, #0]
}
 800b3e6:	0018      	movs	r0, r3
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	b004      	add	sp, #16
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	46c0      	nop			; (mov r8, r8)
 800b3f0:	00001111 	.word	0x00001111
 800b3f4:	00000444 	.word	0x00000444

0800b3f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	2202      	movs	r2, #2
 800b408:	4013      	ands	r3, r2
 800b40a:	2b02      	cmp	r3, #2
 800b40c:	d124      	bne.n	800b458 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	2202      	movs	r2, #2
 800b416:	4013      	ands	r3, r2
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d11d      	bne.n	800b458 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2203      	movs	r2, #3
 800b422:	4252      	negs	r2, r2
 800b424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	2203      	movs	r2, #3
 800b434:	4013      	ands	r3, r2
 800b436:	d004      	beq.n	800b442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	0018      	movs	r0, r3
 800b43c:	f7fe fc0a 	bl	8009c54 <HAL_TIM_IC_CaptureCallback>
 800b440:	e007      	b.n	800b452 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	0018      	movs	r0, r3
 800b446:	f000 f9e9 	bl	800b81c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	0018      	movs	r0, r3
 800b44e:	f000 f9ed 	bl	800b82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	2204      	movs	r2, #4
 800b460:	4013      	ands	r3, r2
 800b462:	2b04      	cmp	r3, #4
 800b464:	d125      	bne.n	800b4b2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	2204      	movs	r2, #4
 800b46e:	4013      	ands	r3, r2
 800b470:	2b04      	cmp	r3, #4
 800b472:	d11e      	bne.n	800b4b2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2205      	movs	r2, #5
 800b47a:	4252      	negs	r2, r2
 800b47c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2202      	movs	r2, #2
 800b482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	699a      	ldr	r2, [r3, #24]
 800b48a:	23c0      	movs	r3, #192	; 0xc0
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4013      	ands	r3, r2
 800b490:	d004      	beq.n	800b49c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	0018      	movs	r0, r3
 800b496:	f7fe fbdd 	bl	8009c54 <HAL_TIM_IC_CaptureCallback>
 800b49a:	e007      	b.n	800b4ac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	0018      	movs	r0, r3
 800b4a0:	f000 f9bc 	bl	800b81c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	0018      	movs	r0, r3
 800b4a8:	f000 f9c0 	bl	800b82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	2208      	movs	r2, #8
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	2b08      	cmp	r3, #8
 800b4be:	d124      	bne.n	800b50a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	2208      	movs	r2, #8
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	2b08      	cmp	r3, #8
 800b4cc:	d11d      	bne.n	800b50a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2209      	movs	r2, #9
 800b4d4:	4252      	negs	r2, r2
 800b4d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2204      	movs	r2, #4
 800b4dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	2203      	movs	r2, #3
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	d004      	beq.n	800b4f4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	0018      	movs	r0, r3
 800b4ee:	f7fe fbb1 	bl	8009c54 <HAL_TIM_IC_CaptureCallback>
 800b4f2:	e007      	b.n	800b504 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	f000 f990 	bl	800b81c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	0018      	movs	r0, r3
 800b500:	f000 f994 	bl	800b82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	2210      	movs	r2, #16
 800b512:	4013      	ands	r3, r2
 800b514:	2b10      	cmp	r3, #16
 800b516:	d125      	bne.n	800b564 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	2210      	movs	r2, #16
 800b520:	4013      	ands	r3, r2
 800b522:	2b10      	cmp	r3, #16
 800b524:	d11e      	bne.n	800b564 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2211      	movs	r2, #17
 800b52c:	4252      	negs	r2, r2
 800b52e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2208      	movs	r2, #8
 800b534:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	69da      	ldr	r2, [r3, #28]
 800b53c:	23c0      	movs	r3, #192	; 0xc0
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4013      	ands	r3, r2
 800b542:	d004      	beq.n	800b54e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	0018      	movs	r0, r3
 800b548:	f7fe fb84 	bl	8009c54 <HAL_TIM_IC_CaptureCallback>
 800b54c:	e007      	b.n	800b55e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	0018      	movs	r0, r3
 800b552:	f000 f963 	bl	800b81c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	0018      	movs	r0, r3
 800b55a:	f000 f967 	bl	800b82c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	2201      	movs	r2, #1
 800b56c:	4013      	ands	r3, r2
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d10f      	bne.n	800b592 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	2201      	movs	r2, #1
 800b57a:	4013      	ands	r3, r2
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d108      	bne.n	800b592 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2202      	movs	r2, #2
 800b586:	4252      	negs	r2, r2
 800b588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	0018      	movs	r0, r3
 800b58e:	f000 f93d 	bl	800b80c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	2280      	movs	r2, #128	; 0x80
 800b59a:	4013      	ands	r3, r2
 800b59c:	2b80      	cmp	r3, #128	; 0x80
 800b59e:	d10f      	bne.n	800b5c0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	2280      	movs	r2, #128	; 0x80
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	2b80      	cmp	r3, #128	; 0x80
 800b5ac:	d108      	bne.n	800b5c0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2281      	movs	r2, #129	; 0x81
 800b5b4:	4252      	negs	r2, r2
 800b5b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	0018      	movs	r0, r3
 800b5bc:	f000 fb6e 	bl	800bc9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	691a      	ldr	r2, [r3, #16]
 800b5c6:	2380      	movs	r3, #128	; 0x80
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	401a      	ands	r2, r3
 800b5cc:	2380      	movs	r3, #128	; 0x80
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d10e      	bne.n	800b5f2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	2280      	movs	r2, #128	; 0x80
 800b5dc:	4013      	ands	r3, r2
 800b5de:	2b80      	cmp	r3, #128	; 0x80
 800b5e0:	d107      	bne.n	800b5f2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a1c      	ldr	r2, [pc, #112]	; (800b658 <HAL_TIM_IRQHandler+0x260>)
 800b5e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	0018      	movs	r0, r3
 800b5ee:	f000 fb5d 	bl	800bcac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	2240      	movs	r2, #64	; 0x40
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	2b40      	cmp	r3, #64	; 0x40
 800b5fe:	d10f      	bne.n	800b620 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	2240      	movs	r2, #64	; 0x40
 800b608:	4013      	ands	r3, r2
 800b60a:	2b40      	cmp	r3, #64	; 0x40
 800b60c:	d108      	bne.n	800b620 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2241      	movs	r2, #65	; 0x41
 800b614:	4252      	negs	r2, r2
 800b616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	0018      	movs	r0, r3
 800b61c:	f000 f90e 	bl	800b83c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	691b      	ldr	r3, [r3, #16]
 800b626:	2220      	movs	r2, #32
 800b628:	4013      	ands	r3, r2
 800b62a:	2b20      	cmp	r3, #32
 800b62c:	d10f      	bne.n	800b64e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	2220      	movs	r2, #32
 800b636:	4013      	ands	r3, r2
 800b638:	2b20      	cmp	r3, #32
 800b63a:	d108      	bne.n	800b64e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2221      	movs	r2, #33	; 0x21
 800b642:	4252      	negs	r2, r2
 800b644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	0018      	movs	r0, r3
 800b64a:	f000 fb1f 	bl	800bc8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b64e:	46c0      	nop			; (mov r8, r8)
 800b650:	46bd      	mov	sp, r7
 800b652:	b002      	add	sp, #8
 800b654:	bd80      	pop	{r7, pc}
 800b656:	46c0      	nop			; (mov r8, r8)
 800b658:	fffffeff 	.word	0xfffffeff

0800b65c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b668:	2317      	movs	r3, #23
 800b66a:	18fb      	adds	r3, r7, r3
 800b66c:	2200      	movs	r2, #0
 800b66e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	223c      	movs	r2, #60	; 0x3c
 800b674:	5c9b      	ldrb	r3, [r3, r2]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d101      	bne.n	800b67e <HAL_TIM_IC_ConfigChannel+0x22>
 800b67a:	2302      	movs	r3, #2
 800b67c:	e08c      	b.n	800b798 <HAL_TIM_IC_ConfigChannel+0x13c>
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	223c      	movs	r2, #60	; 0x3c
 800b682:	2101      	movs	r1, #1
 800b684:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d11b      	bne.n	800b6c4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6818      	ldr	r0, [r3, #0]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	6819      	ldr	r1, [r3, #0]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	685a      	ldr	r2, [r3, #4]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	f000 f94c 	bl	800b938 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	699a      	ldr	r2, [r3, #24]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	210c      	movs	r1, #12
 800b6ac:	438a      	bics	r2, r1
 800b6ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6999      	ldr	r1, [r3, #24]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	689a      	ldr	r2, [r3, #8]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	430a      	orrs	r2, r1
 800b6c0:	619a      	str	r2, [r3, #24]
 800b6c2:	e062      	b.n	800b78a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b04      	cmp	r3, #4
 800b6c8:	d11c      	bne.n	800b704 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	6819      	ldr	r1, [r3, #0]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f000 f983 	bl	800b9e4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	699a      	ldr	r2, [r3, #24]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	492d      	ldr	r1, [pc, #180]	; (800b7a0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800b6ea:	400a      	ands	r2, r1
 800b6ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6999      	ldr	r1, [r3, #24]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	021a      	lsls	r2, r3, #8
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	430a      	orrs	r2, r1
 800b700:	619a      	str	r2, [r3, #24]
 800b702:	e042      	b.n	800b78a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b08      	cmp	r3, #8
 800b708:	d11b      	bne.n	800b742 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6818      	ldr	r0, [r3, #0]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	6819      	ldr	r1, [r3, #0]
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	685a      	ldr	r2, [r3, #4]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	f000 f9a5 	bl	800ba68 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	69da      	ldr	r2, [r3, #28]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	210c      	movs	r1, #12
 800b72a:	438a      	bics	r2, r1
 800b72c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	69d9      	ldr	r1, [r3, #28]
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	689a      	ldr	r2, [r3, #8]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	430a      	orrs	r2, r1
 800b73e:	61da      	str	r2, [r3, #28]
 800b740:	e023      	b.n	800b78a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b0c      	cmp	r3, #12
 800b746:	d11c      	bne.n	800b782 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6818      	ldr	r0, [r3, #0]
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	6819      	ldr	r1, [r3, #0]
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	f000 f9c6 	bl	800bae8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	69da      	ldr	r2, [r3, #28]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	490e      	ldr	r1, [pc, #56]	; (800b7a0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800b768:	400a      	ands	r2, r1
 800b76a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	69d9      	ldr	r1, [r3, #28]
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	021a      	lsls	r2, r3, #8
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	430a      	orrs	r2, r1
 800b77e:	61da      	str	r2, [r3, #28]
 800b780:	e003      	b.n	800b78a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800b782:	2317      	movs	r3, #23
 800b784:	18fb      	adds	r3, r7, r3
 800b786:	2201      	movs	r2, #1
 800b788:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	223c      	movs	r2, #60	; 0x3c
 800b78e:	2100      	movs	r1, #0
 800b790:	5499      	strb	r1, [r3, r2]

  return status;
 800b792:	2317      	movs	r3, #23
 800b794:	18fb      	adds	r3, r7, r3
 800b796:	781b      	ldrb	r3, [r3, #0]
}
 800b798:	0018      	movs	r0, r3
 800b79a:	46bd      	mov	sp, r7
 800b79c:	b006      	add	sp, #24
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	fffff3ff 	.word	0xfffff3ff

0800b7a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	2b0c      	cmp	r3, #12
 800b7b6:	d01e      	beq.n	800b7f6 <HAL_TIM_ReadCapturedValue+0x52>
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2b0c      	cmp	r3, #12
 800b7bc:	d820      	bhi.n	800b800 <HAL_TIM_ReadCapturedValue+0x5c>
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	d013      	beq.n	800b7ec <HAL_TIM_ReadCapturedValue+0x48>
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2b08      	cmp	r3, #8
 800b7c8:	d81a      	bhi.n	800b800 <HAL_TIM_ReadCapturedValue+0x5c>
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <HAL_TIM_ReadCapturedValue+0x34>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	d005      	beq.n	800b7e2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800b7d6:	e013      	b.n	800b800 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7de:	60fb      	str	r3, [r7, #12]
      break;
 800b7e0:	e00f      	b.n	800b802 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e8:	60fb      	str	r3, [r7, #12]
      break;
 800b7ea:	e00a      	b.n	800b802 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7f2:	60fb      	str	r3, [r7, #12]
      break;
 800b7f4:	e005      	b.n	800b802 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fc:	60fb      	str	r3, [r7, #12]
      break;
 800b7fe:	e000      	b.n	800b802 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800b800:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 800b802:	68fb      	ldr	r3, [r7, #12]
}
 800b804:	0018      	movs	r0, r3
 800b806:	46bd      	mov	sp, r7
 800b808:	b004      	add	sp, #16
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b814:	46c0      	nop			; (mov r8, r8)
 800b816:	46bd      	mov	sp, r7
 800b818:	b002      	add	sp, #8
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b824:	46c0      	nop			; (mov r8, r8)
 800b826:	46bd      	mov	sp, r7
 800b828:	b002      	add	sp, #8
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b834:	46c0      	nop			; (mov r8, r8)
 800b836:	46bd      	mov	sp, r7
 800b838:	b002      	add	sp, #8
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b844:	46c0      	nop			; (mov r8, r8)
 800b846:	46bd      	mov	sp, r7
 800b848:	b002      	add	sp, #8
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a30      	ldr	r2, [pc, #192]	; (800b920 <TIM_Base_SetConfig+0xd4>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d008      	beq.n	800b876 <TIM_Base_SetConfig+0x2a>
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	2380      	movs	r3, #128	; 0x80
 800b868:	05db      	lsls	r3, r3, #23
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d003      	beq.n	800b876 <TIM_Base_SetConfig+0x2a>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a2c      	ldr	r2, [pc, #176]	; (800b924 <TIM_Base_SetConfig+0xd8>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d108      	bne.n	800b888 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2270      	movs	r2, #112	; 0x70
 800b87a:	4393      	bics	r3, r2
 800b87c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	4313      	orrs	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a25      	ldr	r2, [pc, #148]	; (800b920 <TIM_Base_SetConfig+0xd4>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d014      	beq.n	800b8ba <TIM_Base_SetConfig+0x6e>
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	2380      	movs	r3, #128	; 0x80
 800b894:	05db      	lsls	r3, r3, #23
 800b896:	429a      	cmp	r2, r3
 800b898:	d00f      	beq.n	800b8ba <TIM_Base_SetConfig+0x6e>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4a21      	ldr	r2, [pc, #132]	; (800b924 <TIM_Base_SetConfig+0xd8>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d00b      	beq.n	800b8ba <TIM_Base_SetConfig+0x6e>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	4a20      	ldr	r2, [pc, #128]	; (800b928 <TIM_Base_SetConfig+0xdc>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d007      	beq.n	800b8ba <TIM_Base_SetConfig+0x6e>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a1f      	ldr	r2, [pc, #124]	; (800b92c <TIM_Base_SetConfig+0xe0>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d003      	beq.n	800b8ba <TIM_Base_SetConfig+0x6e>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	4a1e      	ldr	r2, [pc, #120]	; (800b930 <TIM_Base_SetConfig+0xe4>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d108      	bne.n	800b8cc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	4a1d      	ldr	r2, [pc, #116]	; (800b934 <TIM_Base_SetConfig+0xe8>)
 800b8be:	4013      	ands	r3, r2
 800b8c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2280      	movs	r2, #128	; 0x80
 800b8d0:	4393      	bics	r3, r2
 800b8d2:	001a      	movs	r2, r3
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	695b      	ldr	r3, [r3, #20]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	689a      	ldr	r2, [r3, #8]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4a0a      	ldr	r2, [pc, #40]	; (800b920 <TIM_Base_SetConfig+0xd4>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d007      	beq.n	800b90a <TIM_Base_SetConfig+0xbe>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4a0b      	ldr	r2, [pc, #44]	; (800b92c <TIM_Base_SetConfig+0xe0>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d003      	beq.n	800b90a <TIM_Base_SetConfig+0xbe>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4a0a      	ldr	r2, [pc, #40]	; (800b930 <TIM_Base_SetConfig+0xe4>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d103      	bne.n	800b912 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	691a      	ldr	r2, [r3, #16]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2201      	movs	r2, #1
 800b916:	615a      	str	r2, [r3, #20]
}
 800b918:	46c0      	nop			; (mov r8, r8)
 800b91a:	46bd      	mov	sp, r7
 800b91c:	b004      	add	sp, #16
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	40012c00 	.word	0x40012c00
 800b924:	40000400 	.word	0x40000400
 800b928:	40002000 	.word	0x40002000
 800b92c:	40014400 	.word	0x40014400
 800b930:	40014800 	.word	0x40014800
 800b934:	fffffcff 	.word	0xfffffcff

0800b938 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	2201      	movs	r2, #1
 800b94c:	4393      	bics	r3, r2
 800b94e:	001a      	movs	r2, r3
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4a1e      	ldr	r2, [pc, #120]	; (800b9dc <TIM_TI1_SetConfig+0xa4>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d008      	beq.n	800b97a <TIM_TI1_SetConfig+0x42>
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	2380      	movs	r3, #128	; 0x80
 800b96c:	05db      	lsls	r3, r3, #23
 800b96e:	429a      	cmp	r2, r3
 800b970:	d003      	beq.n	800b97a <TIM_TI1_SetConfig+0x42>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	4a1a      	ldr	r2, [pc, #104]	; (800b9e0 <TIM_TI1_SetConfig+0xa8>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d101      	bne.n	800b97e <TIM_TI1_SetConfig+0x46>
 800b97a:	2301      	movs	r3, #1
 800b97c:	e000      	b.n	800b980 <TIM_TI1_SetConfig+0x48>
 800b97e:	2300      	movs	r3, #0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d008      	beq.n	800b996 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	2203      	movs	r2, #3
 800b988:	4393      	bics	r3, r2
 800b98a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4313      	orrs	r3, r2
 800b992:	617b      	str	r3, [r7, #20]
 800b994:	e003      	b.n	800b99e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	2201      	movs	r2, #1
 800b99a:	4313      	orrs	r3, r2
 800b99c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	22f0      	movs	r2, #240	; 0xf0
 800b9a2:	4393      	bics	r3, r2
 800b9a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	011b      	lsls	r3, r3, #4
 800b9aa:	22ff      	movs	r2, #255	; 0xff
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	220a      	movs	r2, #10
 800b9b8:	4393      	bics	r3, r2
 800b9ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	220a      	movs	r2, #10
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	697a      	ldr	r2, [r7, #20]
 800b9cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	621a      	str	r2, [r3, #32]
}
 800b9d4:	46c0      	nop			; (mov r8, r8)
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	b006      	add	sp, #24
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	40012c00 	.word	0x40012c00
 800b9e0:	40000400 	.word	0x40000400

0800b9e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	2210      	movs	r2, #16
 800b9f8:	4393      	bics	r3, r2
 800b9fa:	001a      	movs	r2, r3
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6a1b      	ldr	r3, [r3, #32]
 800ba0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	4a14      	ldr	r2, [pc, #80]	; (800ba60 <TIM_TI2_SetConfig+0x7c>)
 800ba10:	4013      	ands	r3, r2
 800ba12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	021b      	lsls	r3, r3, #8
 800ba18:	697a      	ldr	r2, [r7, #20]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	4a10      	ldr	r2, [pc, #64]	; (800ba64 <TIM_TI2_SetConfig+0x80>)
 800ba22:	4013      	ands	r3, r2
 800ba24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	031b      	lsls	r3, r3, #12
 800ba2a:	041b      	lsls	r3, r3, #16
 800ba2c:	0c1b      	lsrs	r3, r3, #16
 800ba2e:	697a      	ldr	r2, [r7, #20]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	22a0      	movs	r2, #160	; 0xa0
 800ba38:	4393      	bics	r3, r2
 800ba3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	011b      	lsls	r3, r3, #4
 800ba40:	22a0      	movs	r2, #160	; 0xa0
 800ba42:	4013      	ands	r3, r2
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	621a      	str	r2, [r3, #32]
}
 800ba56:	46c0      	nop			; (mov r8, r8)
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	b006      	add	sp, #24
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	fffffcff 	.word	0xfffffcff
 800ba64:	ffff0fff 	.word	0xffff0fff

0800ba68 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	4a19      	ldr	r2, [pc, #100]	; (800bae0 <TIM_TI3_SetConfig+0x78>)
 800ba7c:	401a      	ands	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	69db      	ldr	r3, [r3, #28]
 800ba86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6a1b      	ldr	r3, [r3, #32]
 800ba8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	2203      	movs	r2, #3
 800ba92:	4393      	bics	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	22f0      	movs	r2, #240	; 0xf0
 800baa2:	4393      	bics	r3, r2
 800baa4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	011b      	lsls	r3, r3, #4
 800baaa:	22ff      	movs	r2, #255	; 0xff
 800baac:	4013      	ands	r3, r2
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	4a0b      	ldr	r2, [pc, #44]	; (800bae4 <TIM_TI3_SetConfig+0x7c>)
 800bab8:	4013      	ands	r3, r2
 800baba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	021a      	lsls	r2, r3, #8
 800bac0:	23a0      	movs	r3, #160	; 0xa0
 800bac2:	011b      	lsls	r3, r3, #4
 800bac4:	4013      	ands	r3, r2
 800bac6:	693a      	ldr	r2, [r7, #16]
 800bac8:	4313      	orrs	r3, r2
 800baca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	693a      	ldr	r2, [r7, #16]
 800bad6:	621a      	str	r2, [r3, #32]
}
 800bad8:	46c0      	nop			; (mov r8, r8)
 800bada:	46bd      	mov	sp, r7
 800badc:	b006      	add	sp, #24
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	fffffeff 	.word	0xfffffeff
 800bae4:	fffff5ff 	.word	0xfffff5ff

0800bae8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	4a1a      	ldr	r2, [pc, #104]	; (800bb64 <TIM_TI4_SetConfig+0x7c>)
 800bafc:	401a      	ands	r2, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6a1b      	ldr	r3, [r3, #32]
 800bb0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	4a15      	ldr	r2, [pc, #84]	; (800bb68 <TIM_TI4_SetConfig+0x80>)
 800bb12:	4013      	ands	r3, r2
 800bb14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	021b      	lsls	r3, r3, #8
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	4a12      	ldr	r2, [pc, #72]	; (800bb6c <TIM_TI4_SetConfig+0x84>)
 800bb24:	4013      	ands	r3, r2
 800bb26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	031b      	lsls	r3, r3, #12
 800bb2c:	041b      	lsls	r3, r3, #16
 800bb2e:	0c1b      	lsrs	r3, r3, #16
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	4a0d      	ldr	r2, [pc, #52]	; (800bb70 <TIM_TI4_SetConfig+0x88>)
 800bb3a:	4013      	ands	r3, r2
 800bb3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	031a      	lsls	r2, r3, #12
 800bb42:	23a0      	movs	r3, #160	; 0xa0
 800bb44:	021b      	lsls	r3, r3, #8
 800bb46:	4013      	ands	r3, r2
 800bb48:	693a      	ldr	r2, [r7, #16]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	697a      	ldr	r2, [r7, #20]
 800bb52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	693a      	ldr	r2, [r7, #16]
 800bb58:	621a      	str	r2, [r3, #32]
}
 800bb5a:	46c0      	nop			; (mov r8, r8)
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	b006      	add	sp, #24
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	46c0      	nop			; (mov r8, r8)
 800bb64:	ffffefff 	.word	0xffffefff
 800bb68:	fffffcff 	.word	0xfffffcff
 800bb6c:	ffff0fff 	.word	0xffff0fff
 800bb70:	ffff5fff 	.word	0xffff5fff

0800bb74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b086      	sub	sp, #24
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	221f      	movs	r2, #31
 800bb84:	4013      	ands	r3, r2
 800bb86:	2201      	movs	r2, #1
 800bb88:	409a      	lsls	r2, r3
 800bb8a:	0013      	movs	r3, r2
 800bb8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6a1b      	ldr	r3, [r3, #32]
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	43d2      	mvns	r2, r2
 800bb96:	401a      	ands	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6a1a      	ldr	r2, [r3, #32]
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	211f      	movs	r1, #31
 800bba4:	400b      	ands	r3, r1
 800bba6:	6879      	ldr	r1, [r7, #4]
 800bba8:	4099      	lsls	r1, r3
 800bbaa:	000b      	movs	r3, r1
 800bbac:	431a      	orrs	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	621a      	str	r2, [r3, #32]
}
 800bbb2:	46c0      	nop			; (mov r8, r8)
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	b006      	add	sp, #24
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	223c      	movs	r2, #60	; 0x3c
 800bbca:	5c9b      	ldrb	r3, [r3, r2]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d101      	bne.n	800bbd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	e050      	b.n	800bc76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	223c      	movs	r2, #60	; 0x3c
 800bbd8:	2101      	movs	r1, #1
 800bbda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	223d      	movs	r2, #61	; 0x3d
 800bbe0:	2102      	movs	r1, #2
 800bbe2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a21      	ldr	r2, [pc, #132]	; (800bc80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d108      	bne.n	800bc10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	4a20      	ldr	r2, [pc, #128]	; (800bc84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bc02:	4013      	ands	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	685b      	ldr	r3, [r3, #4]
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2270      	movs	r2, #112	; 0x70
 800bc14:	4393      	bics	r3, r2
 800bc16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a14      	ldr	r2, [pc, #80]	; (800bc80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d00a      	beq.n	800bc4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	2380      	movs	r3, #128	; 0x80
 800bc3a:	05db      	lsls	r3, r3, #23
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d004      	beq.n	800bc4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a10      	ldr	r2, [pc, #64]	; (800bc88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d10c      	bne.n	800bc64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2280      	movs	r2, #128	; 0x80
 800bc4e:	4393      	bics	r3, r2
 800bc50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	223d      	movs	r2, #61	; 0x3d
 800bc68:	2101      	movs	r1, #1
 800bc6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	223c      	movs	r2, #60	; 0x3c
 800bc70:	2100      	movs	r1, #0
 800bc72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	0018      	movs	r0, r3
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	b004      	add	sp, #16
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	46c0      	nop			; (mov r8, r8)
 800bc80:	40012c00 	.word	0x40012c00
 800bc84:	ff0fffff 	.word	0xff0fffff
 800bc88:	40000400 	.word	0x40000400

0800bc8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc94:	46c0      	nop			; (mov r8, r8)
 800bc96:	46bd      	mov	sp, r7
 800bc98:	b002      	add	sp, #8
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bca4:	46c0      	nop			; (mov r8, r8)
 800bca6:	46bd      	mov	sp, r7
 800bca8:	b002      	add	sp, #8
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcb4:	46c0      	nop			; (mov r8, r8)
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	b002      	add	sp, #8
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <atoi>:
 800bcbc:	b510      	push	{r4, lr}
 800bcbe:	220a      	movs	r2, #10
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	f000 fa13 	bl	800c0ec <strtol>
 800bcc6:	bd10      	pop	{r4, pc}

0800bcc8 <__errno>:
 800bcc8:	4b01      	ldr	r3, [pc, #4]	; (800bcd0 <__errno+0x8>)
 800bcca:	6818      	ldr	r0, [r3, #0]
 800bccc:	4770      	bx	lr
 800bcce:	46c0      	nop			; (mov r8, r8)
 800bcd0:	200000bc 	.word	0x200000bc

0800bcd4 <__libc_init_array>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	2600      	movs	r6, #0
 800bcd8:	4d0c      	ldr	r5, [pc, #48]	; (800bd0c <__libc_init_array+0x38>)
 800bcda:	4c0d      	ldr	r4, [pc, #52]	; (800bd10 <__libc_init_array+0x3c>)
 800bcdc:	1b64      	subs	r4, r4, r5
 800bcde:	10a4      	asrs	r4, r4, #2
 800bce0:	42a6      	cmp	r6, r4
 800bce2:	d109      	bne.n	800bcf8 <__libc_init_array+0x24>
 800bce4:	2600      	movs	r6, #0
 800bce6:	f001 f869 	bl	800cdbc <_init>
 800bcea:	4d0a      	ldr	r5, [pc, #40]	; (800bd14 <__libc_init_array+0x40>)
 800bcec:	4c0a      	ldr	r4, [pc, #40]	; (800bd18 <__libc_init_array+0x44>)
 800bcee:	1b64      	subs	r4, r4, r5
 800bcf0:	10a4      	asrs	r4, r4, #2
 800bcf2:	42a6      	cmp	r6, r4
 800bcf4:	d105      	bne.n	800bd02 <__libc_init_array+0x2e>
 800bcf6:	bd70      	pop	{r4, r5, r6, pc}
 800bcf8:	00b3      	lsls	r3, r6, #2
 800bcfa:	58eb      	ldr	r3, [r5, r3]
 800bcfc:	4798      	blx	r3
 800bcfe:	3601      	adds	r6, #1
 800bd00:	e7ee      	b.n	800bce0 <__libc_init_array+0xc>
 800bd02:	00b3      	lsls	r3, r6, #2
 800bd04:	58eb      	ldr	r3, [r5, r3]
 800bd06:	4798      	blx	r3
 800bd08:	3601      	adds	r6, #1
 800bd0a:	e7f2      	b.n	800bcf2 <__libc_init_array+0x1e>
 800bd0c:	0800d670 	.word	0x0800d670
 800bd10:	0800d670 	.word	0x0800d670
 800bd14:	0800d670 	.word	0x0800d670
 800bd18:	0800d674 	.word	0x0800d674

0800bd1c <memcpy>:
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	b510      	push	{r4, lr}
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d100      	bne.n	800bd26 <memcpy+0xa>
 800bd24:	bd10      	pop	{r4, pc}
 800bd26:	5ccc      	ldrb	r4, [r1, r3]
 800bd28:	54c4      	strb	r4, [r0, r3]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	e7f8      	b.n	800bd20 <memcpy+0x4>

0800bd2e <memset>:
 800bd2e:	0003      	movs	r3, r0
 800bd30:	1882      	adds	r2, r0, r2
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d100      	bne.n	800bd38 <memset+0xa>
 800bd36:	4770      	bx	lr
 800bd38:	7019      	strb	r1, [r3, #0]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	e7f9      	b.n	800bd32 <memset+0x4>
	...

0800bd40 <_free_r>:
 800bd40:	b570      	push	{r4, r5, r6, lr}
 800bd42:	0005      	movs	r5, r0
 800bd44:	2900      	cmp	r1, #0
 800bd46:	d010      	beq.n	800bd6a <_free_r+0x2a>
 800bd48:	1f0c      	subs	r4, r1, #4
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	da00      	bge.n	800bd52 <_free_r+0x12>
 800bd50:	18e4      	adds	r4, r4, r3
 800bd52:	0028      	movs	r0, r5
 800bd54:	f000 f9d6 	bl	800c104 <__malloc_lock>
 800bd58:	4a1d      	ldr	r2, [pc, #116]	; (800bdd0 <_free_r+0x90>)
 800bd5a:	6813      	ldr	r3, [r2, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d105      	bne.n	800bd6c <_free_r+0x2c>
 800bd60:	6063      	str	r3, [r4, #4]
 800bd62:	6014      	str	r4, [r2, #0]
 800bd64:	0028      	movs	r0, r5
 800bd66:	f000 f9d5 	bl	800c114 <__malloc_unlock>
 800bd6a:	bd70      	pop	{r4, r5, r6, pc}
 800bd6c:	42a3      	cmp	r3, r4
 800bd6e:	d908      	bls.n	800bd82 <_free_r+0x42>
 800bd70:	6821      	ldr	r1, [r4, #0]
 800bd72:	1860      	adds	r0, r4, r1
 800bd74:	4283      	cmp	r3, r0
 800bd76:	d1f3      	bne.n	800bd60 <_free_r+0x20>
 800bd78:	6818      	ldr	r0, [r3, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	1841      	adds	r1, r0, r1
 800bd7e:	6021      	str	r1, [r4, #0]
 800bd80:	e7ee      	b.n	800bd60 <_free_r+0x20>
 800bd82:	001a      	movs	r2, r3
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d001      	beq.n	800bd8e <_free_r+0x4e>
 800bd8a:	42a3      	cmp	r3, r4
 800bd8c:	d9f9      	bls.n	800bd82 <_free_r+0x42>
 800bd8e:	6811      	ldr	r1, [r2, #0]
 800bd90:	1850      	adds	r0, r2, r1
 800bd92:	42a0      	cmp	r0, r4
 800bd94:	d10b      	bne.n	800bdae <_free_r+0x6e>
 800bd96:	6820      	ldr	r0, [r4, #0]
 800bd98:	1809      	adds	r1, r1, r0
 800bd9a:	1850      	adds	r0, r2, r1
 800bd9c:	6011      	str	r1, [r2, #0]
 800bd9e:	4283      	cmp	r3, r0
 800bda0:	d1e0      	bne.n	800bd64 <_free_r+0x24>
 800bda2:	6818      	ldr	r0, [r3, #0]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	1841      	adds	r1, r0, r1
 800bda8:	6011      	str	r1, [r2, #0]
 800bdaa:	6053      	str	r3, [r2, #4]
 800bdac:	e7da      	b.n	800bd64 <_free_r+0x24>
 800bdae:	42a0      	cmp	r0, r4
 800bdb0:	d902      	bls.n	800bdb8 <_free_r+0x78>
 800bdb2:	230c      	movs	r3, #12
 800bdb4:	602b      	str	r3, [r5, #0]
 800bdb6:	e7d5      	b.n	800bd64 <_free_r+0x24>
 800bdb8:	6821      	ldr	r1, [r4, #0]
 800bdba:	1860      	adds	r0, r4, r1
 800bdbc:	4283      	cmp	r3, r0
 800bdbe:	d103      	bne.n	800bdc8 <_free_r+0x88>
 800bdc0:	6818      	ldr	r0, [r3, #0]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	1841      	adds	r1, r0, r1
 800bdc6:	6021      	str	r1, [r4, #0]
 800bdc8:	6063      	str	r3, [r4, #4]
 800bdca:	6054      	str	r4, [r2, #4]
 800bdcc:	e7ca      	b.n	800bd64 <_free_r+0x24>
 800bdce:	46c0      	nop			; (mov r8, r8)
 800bdd0:	20001040 	.word	0x20001040

0800bdd4 <sbrk_aligned>:
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	4e0f      	ldr	r6, [pc, #60]	; (800be14 <sbrk_aligned+0x40>)
 800bdd8:	000d      	movs	r5, r1
 800bdda:	6831      	ldr	r1, [r6, #0]
 800bddc:	0004      	movs	r4, r0
 800bdde:	2900      	cmp	r1, #0
 800bde0:	d102      	bne.n	800bde8 <sbrk_aligned+0x14>
 800bde2:	f000 f88f 	bl	800bf04 <_sbrk_r>
 800bde6:	6030      	str	r0, [r6, #0]
 800bde8:	0029      	movs	r1, r5
 800bdea:	0020      	movs	r0, r4
 800bdec:	f000 f88a 	bl	800bf04 <_sbrk_r>
 800bdf0:	1c43      	adds	r3, r0, #1
 800bdf2:	d00a      	beq.n	800be0a <sbrk_aligned+0x36>
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	1cc5      	adds	r5, r0, #3
 800bdf8:	439d      	bics	r5, r3
 800bdfa:	42a8      	cmp	r0, r5
 800bdfc:	d007      	beq.n	800be0e <sbrk_aligned+0x3a>
 800bdfe:	1a29      	subs	r1, r5, r0
 800be00:	0020      	movs	r0, r4
 800be02:	f000 f87f 	bl	800bf04 <_sbrk_r>
 800be06:	1c43      	adds	r3, r0, #1
 800be08:	d101      	bne.n	800be0e <sbrk_aligned+0x3a>
 800be0a:	2501      	movs	r5, #1
 800be0c:	426d      	negs	r5, r5
 800be0e:	0028      	movs	r0, r5
 800be10:	bd70      	pop	{r4, r5, r6, pc}
 800be12:	46c0      	nop			; (mov r8, r8)
 800be14:	20001044 	.word	0x20001044

0800be18 <_malloc_r>:
 800be18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be1a:	2203      	movs	r2, #3
 800be1c:	1ccb      	adds	r3, r1, #3
 800be1e:	4393      	bics	r3, r2
 800be20:	3308      	adds	r3, #8
 800be22:	0006      	movs	r6, r0
 800be24:	001f      	movs	r7, r3
 800be26:	2b0c      	cmp	r3, #12
 800be28:	d232      	bcs.n	800be90 <_malloc_r+0x78>
 800be2a:	270c      	movs	r7, #12
 800be2c:	42b9      	cmp	r1, r7
 800be2e:	d831      	bhi.n	800be94 <_malloc_r+0x7c>
 800be30:	0030      	movs	r0, r6
 800be32:	f000 f967 	bl	800c104 <__malloc_lock>
 800be36:	4d32      	ldr	r5, [pc, #200]	; (800bf00 <_malloc_r+0xe8>)
 800be38:	682b      	ldr	r3, [r5, #0]
 800be3a:	001c      	movs	r4, r3
 800be3c:	2c00      	cmp	r4, #0
 800be3e:	d12e      	bne.n	800be9e <_malloc_r+0x86>
 800be40:	0039      	movs	r1, r7
 800be42:	0030      	movs	r0, r6
 800be44:	f7ff ffc6 	bl	800bdd4 <sbrk_aligned>
 800be48:	0004      	movs	r4, r0
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	d11e      	bne.n	800be8c <_malloc_r+0x74>
 800be4e:	682c      	ldr	r4, [r5, #0]
 800be50:	0025      	movs	r5, r4
 800be52:	2d00      	cmp	r5, #0
 800be54:	d14a      	bne.n	800beec <_malloc_r+0xd4>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	0029      	movs	r1, r5
 800be5a:	18e3      	adds	r3, r4, r3
 800be5c:	0030      	movs	r0, r6
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	f000 f850 	bl	800bf04 <_sbrk_r>
 800be64:	9b01      	ldr	r3, [sp, #4]
 800be66:	4283      	cmp	r3, r0
 800be68:	d143      	bne.n	800bef2 <_malloc_r+0xda>
 800be6a:	6823      	ldr	r3, [r4, #0]
 800be6c:	3703      	adds	r7, #3
 800be6e:	1aff      	subs	r7, r7, r3
 800be70:	2303      	movs	r3, #3
 800be72:	439f      	bics	r7, r3
 800be74:	3708      	adds	r7, #8
 800be76:	2f0c      	cmp	r7, #12
 800be78:	d200      	bcs.n	800be7c <_malloc_r+0x64>
 800be7a:	270c      	movs	r7, #12
 800be7c:	0039      	movs	r1, r7
 800be7e:	0030      	movs	r0, r6
 800be80:	f7ff ffa8 	bl	800bdd4 <sbrk_aligned>
 800be84:	1c43      	adds	r3, r0, #1
 800be86:	d034      	beq.n	800bef2 <_malloc_r+0xda>
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	19df      	adds	r7, r3, r7
 800be8c:	6027      	str	r7, [r4, #0]
 800be8e:	e013      	b.n	800beb8 <_malloc_r+0xa0>
 800be90:	2b00      	cmp	r3, #0
 800be92:	dacb      	bge.n	800be2c <_malloc_r+0x14>
 800be94:	230c      	movs	r3, #12
 800be96:	2500      	movs	r5, #0
 800be98:	6033      	str	r3, [r6, #0]
 800be9a:	0028      	movs	r0, r5
 800be9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be9e:	6822      	ldr	r2, [r4, #0]
 800bea0:	1bd1      	subs	r1, r2, r7
 800bea2:	d420      	bmi.n	800bee6 <_malloc_r+0xce>
 800bea4:	290b      	cmp	r1, #11
 800bea6:	d917      	bls.n	800bed8 <_malloc_r+0xc0>
 800bea8:	19e2      	adds	r2, r4, r7
 800beaa:	6027      	str	r7, [r4, #0]
 800beac:	42a3      	cmp	r3, r4
 800beae:	d111      	bne.n	800bed4 <_malloc_r+0xbc>
 800beb0:	602a      	str	r2, [r5, #0]
 800beb2:	6863      	ldr	r3, [r4, #4]
 800beb4:	6011      	str	r1, [r2, #0]
 800beb6:	6053      	str	r3, [r2, #4]
 800beb8:	0030      	movs	r0, r6
 800beba:	0025      	movs	r5, r4
 800bebc:	f000 f92a 	bl	800c114 <__malloc_unlock>
 800bec0:	2207      	movs	r2, #7
 800bec2:	350b      	adds	r5, #11
 800bec4:	1d23      	adds	r3, r4, #4
 800bec6:	4395      	bics	r5, r2
 800bec8:	1aea      	subs	r2, r5, r3
 800beca:	429d      	cmp	r5, r3
 800becc:	d0e5      	beq.n	800be9a <_malloc_r+0x82>
 800bece:	1b5b      	subs	r3, r3, r5
 800bed0:	50a3      	str	r3, [r4, r2]
 800bed2:	e7e2      	b.n	800be9a <_malloc_r+0x82>
 800bed4:	605a      	str	r2, [r3, #4]
 800bed6:	e7ec      	b.n	800beb2 <_malloc_r+0x9a>
 800bed8:	6862      	ldr	r2, [r4, #4]
 800beda:	42a3      	cmp	r3, r4
 800bedc:	d101      	bne.n	800bee2 <_malloc_r+0xca>
 800bede:	602a      	str	r2, [r5, #0]
 800bee0:	e7ea      	b.n	800beb8 <_malloc_r+0xa0>
 800bee2:	605a      	str	r2, [r3, #4]
 800bee4:	e7e8      	b.n	800beb8 <_malloc_r+0xa0>
 800bee6:	0023      	movs	r3, r4
 800bee8:	6864      	ldr	r4, [r4, #4]
 800beea:	e7a7      	b.n	800be3c <_malloc_r+0x24>
 800beec:	002c      	movs	r4, r5
 800beee:	686d      	ldr	r5, [r5, #4]
 800bef0:	e7af      	b.n	800be52 <_malloc_r+0x3a>
 800bef2:	230c      	movs	r3, #12
 800bef4:	0030      	movs	r0, r6
 800bef6:	6033      	str	r3, [r6, #0]
 800bef8:	f000 f90c 	bl	800c114 <__malloc_unlock>
 800befc:	e7cd      	b.n	800be9a <_malloc_r+0x82>
 800befe:	46c0      	nop			; (mov r8, r8)
 800bf00:	20001040 	.word	0x20001040

0800bf04 <_sbrk_r>:
 800bf04:	2300      	movs	r3, #0
 800bf06:	b570      	push	{r4, r5, r6, lr}
 800bf08:	4d06      	ldr	r5, [pc, #24]	; (800bf24 <_sbrk_r+0x20>)
 800bf0a:	0004      	movs	r4, r0
 800bf0c:	0008      	movs	r0, r1
 800bf0e:	602b      	str	r3, [r5, #0]
 800bf10:	f7fe faba 	bl	800a488 <_sbrk>
 800bf14:	1c43      	adds	r3, r0, #1
 800bf16:	d103      	bne.n	800bf20 <_sbrk_r+0x1c>
 800bf18:	682b      	ldr	r3, [r5, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d000      	beq.n	800bf20 <_sbrk_r+0x1c>
 800bf1e:	6023      	str	r3, [r4, #0]
 800bf20:	bd70      	pop	{r4, r5, r6, pc}
 800bf22:	46c0      	nop			; (mov r8, r8)
 800bf24:	20001048 	.word	0x20001048

0800bf28 <siprintf>:
 800bf28:	b40e      	push	{r1, r2, r3}
 800bf2a:	b500      	push	{lr}
 800bf2c:	490b      	ldr	r1, [pc, #44]	; (800bf5c <siprintf+0x34>)
 800bf2e:	b09c      	sub	sp, #112	; 0x70
 800bf30:	ab1d      	add	r3, sp, #116	; 0x74
 800bf32:	9002      	str	r0, [sp, #8]
 800bf34:	9006      	str	r0, [sp, #24]
 800bf36:	9107      	str	r1, [sp, #28]
 800bf38:	9104      	str	r1, [sp, #16]
 800bf3a:	4809      	ldr	r0, [pc, #36]	; (800bf60 <siprintf+0x38>)
 800bf3c:	4909      	ldr	r1, [pc, #36]	; (800bf64 <siprintf+0x3c>)
 800bf3e:	cb04      	ldmia	r3!, {r2}
 800bf40:	9105      	str	r1, [sp, #20]
 800bf42:	6800      	ldr	r0, [r0, #0]
 800bf44:	a902      	add	r1, sp, #8
 800bf46:	9301      	str	r3, [sp, #4]
 800bf48:	f000 f94e 	bl	800c1e8 <_svfiprintf_r>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9a02      	ldr	r2, [sp, #8]
 800bf50:	7013      	strb	r3, [r2, #0]
 800bf52:	b01c      	add	sp, #112	; 0x70
 800bf54:	bc08      	pop	{r3}
 800bf56:	b003      	add	sp, #12
 800bf58:	4718      	bx	r3
 800bf5a:	46c0      	nop			; (mov r8, r8)
 800bf5c:	7fffffff 	.word	0x7fffffff
 800bf60:	200000bc 	.word	0x200000bc
 800bf64:	ffff0208 	.word	0xffff0208

0800bf68 <strchr>:
 800bf68:	b2c9      	uxtb	r1, r1
 800bf6a:	7803      	ldrb	r3, [r0, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d004      	beq.n	800bf7a <strchr+0x12>
 800bf70:	428b      	cmp	r3, r1
 800bf72:	d100      	bne.n	800bf76 <strchr+0xe>
 800bf74:	4770      	bx	lr
 800bf76:	3001      	adds	r0, #1
 800bf78:	e7f7      	b.n	800bf6a <strchr+0x2>
 800bf7a:	424b      	negs	r3, r1
 800bf7c:	4159      	adcs	r1, r3
 800bf7e:	4249      	negs	r1, r1
 800bf80:	4008      	ands	r0, r1
 800bf82:	e7f7      	b.n	800bf74 <strchr+0xc>

0800bf84 <strncmp>:
 800bf84:	b530      	push	{r4, r5, lr}
 800bf86:	0005      	movs	r5, r0
 800bf88:	1e10      	subs	r0, r2, #0
 800bf8a:	d008      	beq.n	800bf9e <strncmp+0x1a>
 800bf8c:	2400      	movs	r4, #0
 800bf8e:	3a01      	subs	r2, #1
 800bf90:	5d2b      	ldrb	r3, [r5, r4]
 800bf92:	5d08      	ldrb	r0, [r1, r4]
 800bf94:	4283      	cmp	r3, r0
 800bf96:	d101      	bne.n	800bf9c <strncmp+0x18>
 800bf98:	4294      	cmp	r4, r2
 800bf9a:	d101      	bne.n	800bfa0 <strncmp+0x1c>
 800bf9c:	1a18      	subs	r0, r3, r0
 800bf9e:	bd30      	pop	{r4, r5, pc}
 800bfa0:	3401      	adds	r4, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1f4      	bne.n	800bf90 <strncmp+0xc>
 800bfa6:	e7f9      	b.n	800bf9c <strncmp+0x18>

0800bfa8 <strncpy>:
 800bfa8:	0003      	movs	r3, r0
 800bfaa:	b530      	push	{r4, r5, lr}
 800bfac:	001d      	movs	r5, r3
 800bfae:	2a00      	cmp	r2, #0
 800bfb0:	d006      	beq.n	800bfc0 <strncpy+0x18>
 800bfb2:	780c      	ldrb	r4, [r1, #0]
 800bfb4:	3a01      	subs	r2, #1
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	702c      	strb	r4, [r5, #0]
 800bfba:	3101      	adds	r1, #1
 800bfbc:	2c00      	cmp	r4, #0
 800bfbe:	d1f5      	bne.n	800bfac <strncpy+0x4>
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	189a      	adds	r2, r3, r2
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d100      	bne.n	800bfca <strncpy+0x22>
 800bfc8:	bd30      	pop	{r4, r5, pc}
 800bfca:	7019      	strb	r1, [r3, #0]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	e7f9      	b.n	800bfc4 <strncpy+0x1c>

0800bfd0 <_strtol_l.constprop.0>:
 800bfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd2:	b087      	sub	sp, #28
 800bfd4:	001e      	movs	r6, r3
 800bfd6:	9005      	str	r0, [sp, #20]
 800bfd8:	9101      	str	r1, [sp, #4]
 800bfda:	9202      	str	r2, [sp, #8]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d045      	beq.n	800c06c <_strtol_l.constprop.0+0x9c>
 800bfe0:	000b      	movs	r3, r1
 800bfe2:	2e24      	cmp	r6, #36	; 0x24
 800bfe4:	d842      	bhi.n	800c06c <_strtol_l.constprop.0+0x9c>
 800bfe6:	4a3f      	ldr	r2, [pc, #252]	; (800c0e4 <_strtol_l.constprop.0+0x114>)
 800bfe8:	2108      	movs	r1, #8
 800bfea:	4694      	mov	ip, r2
 800bfec:	001a      	movs	r2, r3
 800bfee:	4660      	mov	r0, ip
 800bff0:	7814      	ldrb	r4, [r2, #0]
 800bff2:	3301      	adds	r3, #1
 800bff4:	5d00      	ldrb	r0, [r0, r4]
 800bff6:	001d      	movs	r5, r3
 800bff8:	0007      	movs	r7, r0
 800bffa:	400f      	ands	r7, r1
 800bffc:	4208      	tst	r0, r1
 800bffe:	d1f5      	bne.n	800bfec <_strtol_l.constprop.0+0x1c>
 800c000:	2c2d      	cmp	r4, #45	; 0x2d
 800c002:	d13a      	bne.n	800c07a <_strtol_l.constprop.0+0xaa>
 800c004:	2701      	movs	r7, #1
 800c006:	781c      	ldrb	r4, [r3, #0]
 800c008:	1c95      	adds	r5, r2, #2
 800c00a:	2e00      	cmp	r6, #0
 800c00c:	d065      	beq.n	800c0da <_strtol_l.constprop.0+0x10a>
 800c00e:	2e10      	cmp	r6, #16
 800c010:	d109      	bne.n	800c026 <_strtol_l.constprop.0+0x56>
 800c012:	2c30      	cmp	r4, #48	; 0x30
 800c014:	d107      	bne.n	800c026 <_strtol_l.constprop.0+0x56>
 800c016:	2220      	movs	r2, #32
 800c018:	782b      	ldrb	r3, [r5, #0]
 800c01a:	4393      	bics	r3, r2
 800c01c:	2b58      	cmp	r3, #88	; 0x58
 800c01e:	d157      	bne.n	800c0d0 <_strtol_l.constprop.0+0x100>
 800c020:	2610      	movs	r6, #16
 800c022:	786c      	ldrb	r4, [r5, #1]
 800c024:	3502      	adds	r5, #2
 800c026:	4b30      	ldr	r3, [pc, #192]	; (800c0e8 <_strtol_l.constprop.0+0x118>)
 800c028:	0031      	movs	r1, r6
 800c02a:	18fb      	adds	r3, r7, r3
 800c02c:	0018      	movs	r0, r3
 800c02e:	9303      	str	r3, [sp, #12]
 800c030:	f7f6 fd02 	bl	8002a38 <__aeabi_uidivmod>
 800c034:	2300      	movs	r3, #0
 800c036:	2201      	movs	r2, #1
 800c038:	4684      	mov	ip, r0
 800c03a:	0018      	movs	r0, r3
 800c03c:	9104      	str	r1, [sp, #16]
 800c03e:	4252      	negs	r2, r2
 800c040:	0021      	movs	r1, r4
 800c042:	3930      	subs	r1, #48	; 0x30
 800c044:	2909      	cmp	r1, #9
 800c046:	d81d      	bhi.n	800c084 <_strtol_l.constprop.0+0xb4>
 800c048:	000c      	movs	r4, r1
 800c04a:	42a6      	cmp	r6, r4
 800c04c:	dd28      	ble.n	800c0a0 <_strtol_l.constprop.0+0xd0>
 800c04e:	2b00      	cmp	r3, #0
 800c050:	db24      	blt.n	800c09c <_strtol_l.constprop.0+0xcc>
 800c052:	0013      	movs	r3, r2
 800c054:	4584      	cmp	ip, r0
 800c056:	d306      	bcc.n	800c066 <_strtol_l.constprop.0+0x96>
 800c058:	d102      	bne.n	800c060 <_strtol_l.constprop.0+0x90>
 800c05a:	9904      	ldr	r1, [sp, #16]
 800c05c:	42a1      	cmp	r1, r4
 800c05e:	db02      	blt.n	800c066 <_strtol_l.constprop.0+0x96>
 800c060:	2301      	movs	r3, #1
 800c062:	4370      	muls	r0, r6
 800c064:	1820      	adds	r0, r4, r0
 800c066:	782c      	ldrb	r4, [r5, #0]
 800c068:	3501      	adds	r5, #1
 800c06a:	e7e9      	b.n	800c040 <_strtol_l.constprop.0+0x70>
 800c06c:	f7ff fe2c 	bl	800bcc8 <__errno>
 800c070:	2316      	movs	r3, #22
 800c072:	6003      	str	r3, [r0, #0]
 800c074:	2000      	movs	r0, #0
 800c076:	b007      	add	sp, #28
 800c078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c07a:	2c2b      	cmp	r4, #43	; 0x2b
 800c07c:	d1c5      	bne.n	800c00a <_strtol_l.constprop.0+0x3a>
 800c07e:	781c      	ldrb	r4, [r3, #0]
 800c080:	1c95      	adds	r5, r2, #2
 800c082:	e7c2      	b.n	800c00a <_strtol_l.constprop.0+0x3a>
 800c084:	0021      	movs	r1, r4
 800c086:	3941      	subs	r1, #65	; 0x41
 800c088:	2919      	cmp	r1, #25
 800c08a:	d801      	bhi.n	800c090 <_strtol_l.constprop.0+0xc0>
 800c08c:	3c37      	subs	r4, #55	; 0x37
 800c08e:	e7dc      	b.n	800c04a <_strtol_l.constprop.0+0x7a>
 800c090:	0021      	movs	r1, r4
 800c092:	3961      	subs	r1, #97	; 0x61
 800c094:	2919      	cmp	r1, #25
 800c096:	d803      	bhi.n	800c0a0 <_strtol_l.constprop.0+0xd0>
 800c098:	3c57      	subs	r4, #87	; 0x57
 800c09a:	e7d6      	b.n	800c04a <_strtol_l.constprop.0+0x7a>
 800c09c:	0013      	movs	r3, r2
 800c09e:	e7e2      	b.n	800c066 <_strtol_l.constprop.0+0x96>
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	da09      	bge.n	800c0b8 <_strtol_l.constprop.0+0xe8>
 800c0a4:	2322      	movs	r3, #34	; 0x22
 800c0a6:	9a05      	ldr	r2, [sp, #20]
 800c0a8:	9803      	ldr	r0, [sp, #12]
 800c0aa:	6013      	str	r3, [r2, #0]
 800c0ac:	9b02      	ldr	r3, [sp, #8]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d0e1      	beq.n	800c076 <_strtol_l.constprop.0+0xa6>
 800c0b2:	1e6b      	subs	r3, r5, #1
 800c0b4:	9301      	str	r3, [sp, #4]
 800c0b6:	e007      	b.n	800c0c8 <_strtol_l.constprop.0+0xf8>
 800c0b8:	2f00      	cmp	r7, #0
 800c0ba:	d000      	beq.n	800c0be <_strtol_l.constprop.0+0xee>
 800c0bc:	4240      	negs	r0, r0
 800c0be:	9a02      	ldr	r2, [sp, #8]
 800c0c0:	2a00      	cmp	r2, #0
 800c0c2:	d0d8      	beq.n	800c076 <_strtol_l.constprop.0+0xa6>
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d1f4      	bne.n	800c0b2 <_strtol_l.constprop.0+0xe2>
 800c0c8:	9b02      	ldr	r3, [sp, #8]
 800c0ca:	9a01      	ldr	r2, [sp, #4]
 800c0cc:	601a      	str	r2, [r3, #0]
 800c0ce:	e7d2      	b.n	800c076 <_strtol_l.constprop.0+0xa6>
 800c0d0:	2430      	movs	r4, #48	; 0x30
 800c0d2:	2e00      	cmp	r6, #0
 800c0d4:	d1a7      	bne.n	800c026 <_strtol_l.constprop.0+0x56>
 800c0d6:	3608      	adds	r6, #8
 800c0d8:	e7a5      	b.n	800c026 <_strtol_l.constprop.0+0x56>
 800c0da:	2c30      	cmp	r4, #48	; 0x30
 800c0dc:	d09b      	beq.n	800c016 <_strtol_l.constprop.0+0x46>
 800c0de:	260a      	movs	r6, #10
 800c0e0:	e7a1      	b.n	800c026 <_strtol_l.constprop.0+0x56>
 800c0e2:	46c0      	nop			; (mov r8, r8)
 800c0e4:	0800d46d 	.word	0x0800d46d
 800c0e8:	7fffffff 	.word	0x7fffffff

0800c0ec <strtol>:
 800c0ec:	b510      	push	{r4, lr}
 800c0ee:	0013      	movs	r3, r2
 800c0f0:	000a      	movs	r2, r1
 800c0f2:	0001      	movs	r1, r0
 800c0f4:	4802      	ldr	r0, [pc, #8]	; (800c100 <strtol+0x14>)
 800c0f6:	6800      	ldr	r0, [r0, #0]
 800c0f8:	f7ff ff6a 	bl	800bfd0 <_strtol_l.constprop.0>
 800c0fc:	bd10      	pop	{r4, pc}
 800c0fe:	46c0      	nop			; (mov r8, r8)
 800c100:	200000bc 	.word	0x200000bc

0800c104 <__malloc_lock>:
 800c104:	b510      	push	{r4, lr}
 800c106:	4802      	ldr	r0, [pc, #8]	; (800c110 <__malloc_lock+0xc>)
 800c108:	f000 faf0 	bl	800c6ec <__retarget_lock_acquire_recursive>
 800c10c:	bd10      	pop	{r4, pc}
 800c10e:	46c0      	nop			; (mov r8, r8)
 800c110:	2000104c 	.word	0x2000104c

0800c114 <__malloc_unlock>:
 800c114:	b510      	push	{r4, lr}
 800c116:	4802      	ldr	r0, [pc, #8]	; (800c120 <__malloc_unlock+0xc>)
 800c118:	f000 fae9 	bl	800c6ee <__retarget_lock_release_recursive>
 800c11c:	bd10      	pop	{r4, pc}
 800c11e:	46c0      	nop			; (mov r8, r8)
 800c120:	2000104c 	.word	0x2000104c

0800c124 <__ssputs_r>:
 800c124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c126:	688e      	ldr	r6, [r1, #8]
 800c128:	b085      	sub	sp, #20
 800c12a:	0007      	movs	r7, r0
 800c12c:	000c      	movs	r4, r1
 800c12e:	9203      	str	r2, [sp, #12]
 800c130:	9301      	str	r3, [sp, #4]
 800c132:	429e      	cmp	r6, r3
 800c134:	d83c      	bhi.n	800c1b0 <__ssputs_r+0x8c>
 800c136:	2390      	movs	r3, #144	; 0x90
 800c138:	898a      	ldrh	r2, [r1, #12]
 800c13a:	00db      	lsls	r3, r3, #3
 800c13c:	421a      	tst	r2, r3
 800c13e:	d034      	beq.n	800c1aa <__ssputs_r+0x86>
 800c140:	6909      	ldr	r1, [r1, #16]
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	6960      	ldr	r0, [r4, #20]
 800c146:	1a5b      	subs	r3, r3, r1
 800c148:	9302      	str	r3, [sp, #8]
 800c14a:	2303      	movs	r3, #3
 800c14c:	4343      	muls	r3, r0
 800c14e:	0fdd      	lsrs	r5, r3, #31
 800c150:	18ed      	adds	r5, r5, r3
 800c152:	9b01      	ldr	r3, [sp, #4]
 800c154:	9802      	ldr	r0, [sp, #8]
 800c156:	3301      	adds	r3, #1
 800c158:	181b      	adds	r3, r3, r0
 800c15a:	106d      	asrs	r5, r5, #1
 800c15c:	42ab      	cmp	r3, r5
 800c15e:	d900      	bls.n	800c162 <__ssputs_r+0x3e>
 800c160:	001d      	movs	r5, r3
 800c162:	0553      	lsls	r3, r2, #21
 800c164:	d532      	bpl.n	800c1cc <__ssputs_r+0xa8>
 800c166:	0029      	movs	r1, r5
 800c168:	0038      	movs	r0, r7
 800c16a:	f7ff fe55 	bl	800be18 <_malloc_r>
 800c16e:	1e06      	subs	r6, r0, #0
 800c170:	d109      	bne.n	800c186 <__ssputs_r+0x62>
 800c172:	230c      	movs	r3, #12
 800c174:	603b      	str	r3, [r7, #0]
 800c176:	2340      	movs	r3, #64	; 0x40
 800c178:	2001      	movs	r0, #1
 800c17a:	89a2      	ldrh	r2, [r4, #12]
 800c17c:	4240      	negs	r0, r0
 800c17e:	4313      	orrs	r3, r2
 800c180:	81a3      	strh	r3, [r4, #12]
 800c182:	b005      	add	sp, #20
 800c184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c186:	9a02      	ldr	r2, [sp, #8]
 800c188:	6921      	ldr	r1, [r4, #16]
 800c18a:	f7ff fdc7 	bl	800bd1c <memcpy>
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	4a14      	ldr	r2, [pc, #80]	; (800c1e4 <__ssputs_r+0xc0>)
 800c192:	401a      	ands	r2, r3
 800c194:	2380      	movs	r3, #128	; 0x80
 800c196:	4313      	orrs	r3, r2
 800c198:	81a3      	strh	r3, [r4, #12]
 800c19a:	9b02      	ldr	r3, [sp, #8]
 800c19c:	6126      	str	r6, [r4, #16]
 800c19e:	18f6      	adds	r6, r6, r3
 800c1a0:	6026      	str	r6, [r4, #0]
 800c1a2:	6165      	str	r5, [r4, #20]
 800c1a4:	9e01      	ldr	r6, [sp, #4]
 800c1a6:	1aed      	subs	r5, r5, r3
 800c1a8:	60a5      	str	r5, [r4, #8]
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	429e      	cmp	r6, r3
 800c1ae:	d900      	bls.n	800c1b2 <__ssputs_r+0x8e>
 800c1b0:	9e01      	ldr	r6, [sp, #4]
 800c1b2:	0032      	movs	r2, r6
 800c1b4:	9903      	ldr	r1, [sp, #12]
 800c1b6:	6820      	ldr	r0, [r4, #0]
 800c1b8:	f000 faa5 	bl	800c706 <memmove>
 800c1bc:	68a3      	ldr	r3, [r4, #8]
 800c1be:	2000      	movs	r0, #0
 800c1c0:	1b9b      	subs	r3, r3, r6
 800c1c2:	60a3      	str	r3, [r4, #8]
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	199e      	adds	r6, r3, r6
 800c1c8:	6026      	str	r6, [r4, #0]
 800c1ca:	e7da      	b.n	800c182 <__ssputs_r+0x5e>
 800c1cc:	002a      	movs	r2, r5
 800c1ce:	0038      	movs	r0, r7
 800c1d0:	f000 faac 	bl	800c72c <_realloc_r>
 800c1d4:	1e06      	subs	r6, r0, #0
 800c1d6:	d1e0      	bne.n	800c19a <__ssputs_r+0x76>
 800c1d8:	0038      	movs	r0, r7
 800c1da:	6921      	ldr	r1, [r4, #16]
 800c1dc:	f7ff fdb0 	bl	800bd40 <_free_r>
 800c1e0:	e7c7      	b.n	800c172 <__ssputs_r+0x4e>
 800c1e2:	46c0      	nop			; (mov r8, r8)
 800c1e4:	fffffb7f 	.word	0xfffffb7f

0800c1e8 <_svfiprintf_r>:
 800c1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ea:	b0a1      	sub	sp, #132	; 0x84
 800c1ec:	9003      	str	r0, [sp, #12]
 800c1ee:	001d      	movs	r5, r3
 800c1f0:	898b      	ldrh	r3, [r1, #12]
 800c1f2:	000f      	movs	r7, r1
 800c1f4:	0016      	movs	r6, r2
 800c1f6:	061b      	lsls	r3, r3, #24
 800c1f8:	d511      	bpl.n	800c21e <_svfiprintf_r+0x36>
 800c1fa:	690b      	ldr	r3, [r1, #16]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10e      	bne.n	800c21e <_svfiprintf_r+0x36>
 800c200:	2140      	movs	r1, #64	; 0x40
 800c202:	f7ff fe09 	bl	800be18 <_malloc_r>
 800c206:	6038      	str	r0, [r7, #0]
 800c208:	6138      	str	r0, [r7, #16]
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d105      	bne.n	800c21a <_svfiprintf_r+0x32>
 800c20e:	230c      	movs	r3, #12
 800c210:	9a03      	ldr	r2, [sp, #12]
 800c212:	3801      	subs	r0, #1
 800c214:	6013      	str	r3, [r2, #0]
 800c216:	b021      	add	sp, #132	; 0x84
 800c218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c21a:	2340      	movs	r3, #64	; 0x40
 800c21c:	617b      	str	r3, [r7, #20]
 800c21e:	2300      	movs	r3, #0
 800c220:	ac08      	add	r4, sp, #32
 800c222:	6163      	str	r3, [r4, #20]
 800c224:	3320      	adds	r3, #32
 800c226:	7663      	strb	r3, [r4, #25]
 800c228:	3310      	adds	r3, #16
 800c22a:	76a3      	strb	r3, [r4, #26]
 800c22c:	9507      	str	r5, [sp, #28]
 800c22e:	0035      	movs	r5, r6
 800c230:	782b      	ldrb	r3, [r5, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <_svfiprintf_r+0x52>
 800c236:	2b25      	cmp	r3, #37	; 0x25
 800c238:	d147      	bne.n	800c2ca <_svfiprintf_r+0xe2>
 800c23a:	1bab      	subs	r3, r5, r6
 800c23c:	9305      	str	r3, [sp, #20]
 800c23e:	42b5      	cmp	r5, r6
 800c240:	d00c      	beq.n	800c25c <_svfiprintf_r+0x74>
 800c242:	0032      	movs	r2, r6
 800c244:	0039      	movs	r1, r7
 800c246:	9803      	ldr	r0, [sp, #12]
 800c248:	f7ff ff6c 	bl	800c124 <__ssputs_r>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d100      	bne.n	800c252 <_svfiprintf_r+0x6a>
 800c250:	e0ae      	b.n	800c3b0 <_svfiprintf_r+0x1c8>
 800c252:	6962      	ldr	r2, [r4, #20]
 800c254:	9b05      	ldr	r3, [sp, #20]
 800c256:	4694      	mov	ip, r2
 800c258:	4463      	add	r3, ip
 800c25a:	6163      	str	r3, [r4, #20]
 800c25c:	782b      	ldrb	r3, [r5, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d100      	bne.n	800c264 <_svfiprintf_r+0x7c>
 800c262:	e0a5      	b.n	800c3b0 <_svfiprintf_r+0x1c8>
 800c264:	2201      	movs	r2, #1
 800c266:	2300      	movs	r3, #0
 800c268:	4252      	negs	r2, r2
 800c26a:	6062      	str	r2, [r4, #4]
 800c26c:	a904      	add	r1, sp, #16
 800c26e:	3254      	adds	r2, #84	; 0x54
 800c270:	1852      	adds	r2, r2, r1
 800c272:	1c6e      	adds	r6, r5, #1
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	60e3      	str	r3, [r4, #12]
 800c278:	60a3      	str	r3, [r4, #8]
 800c27a:	7013      	strb	r3, [r2, #0]
 800c27c:	65a3      	str	r3, [r4, #88]	; 0x58
 800c27e:	2205      	movs	r2, #5
 800c280:	7831      	ldrb	r1, [r6, #0]
 800c282:	4854      	ldr	r0, [pc, #336]	; (800c3d4 <_svfiprintf_r+0x1ec>)
 800c284:	f000 fa34 	bl	800c6f0 <memchr>
 800c288:	1c75      	adds	r5, r6, #1
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d11f      	bne.n	800c2ce <_svfiprintf_r+0xe6>
 800c28e:	6822      	ldr	r2, [r4, #0]
 800c290:	06d3      	lsls	r3, r2, #27
 800c292:	d504      	bpl.n	800c29e <_svfiprintf_r+0xb6>
 800c294:	2353      	movs	r3, #83	; 0x53
 800c296:	a904      	add	r1, sp, #16
 800c298:	185b      	adds	r3, r3, r1
 800c29a:	2120      	movs	r1, #32
 800c29c:	7019      	strb	r1, [r3, #0]
 800c29e:	0713      	lsls	r3, r2, #28
 800c2a0:	d504      	bpl.n	800c2ac <_svfiprintf_r+0xc4>
 800c2a2:	2353      	movs	r3, #83	; 0x53
 800c2a4:	a904      	add	r1, sp, #16
 800c2a6:	185b      	adds	r3, r3, r1
 800c2a8:	212b      	movs	r1, #43	; 0x2b
 800c2aa:	7019      	strb	r1, [r3, #0]
 800c2ac:	7833      	ldrb	r3, [r6, #0]
 800c2ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c2b0:	d016      	beq.n	800c2e0 <_svfiprintf_r+0xf8>
 800c2b2:	0035      	movs	r5, r6
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	200a      	movs	r0, #10
 800c2b8:	68e3      	ldr	r3, [r4, #12]
 800c2ba:	782a      	ldrb	r2, [r5, #0]
 800c2bc:	1c6e      	adds	r6, r5, #1
 800c2be:	3a30      	subs	r2, #48	; 0x30
 800c2c0:	2a09      	cmp	r2, #9
 800c2c2:	d94e      	bls.n	800c362 <_svfiprintf_r+0x17a>
 800c2c4:	2900      	cmp	r1, #0
 800c2c6:	d111      	bne.n	800c2ec <_svfiprintf_r+0x104>
 800c2c8:	e017      	b.n	800c2fa <_svfiprintf_r+0x112>
 800c2ca:	3501      	adds	r5, #1
 800c2cc:	e7b0      	b.n	800c230 <_svfiprintf_r+0x48>
 800c2ce:	4b41      	ldr	r3, [pc, #260]	; (800c3d4 <_svfiprintf_r+0x1ec>)
 800c2d0:	6822      	ldr	r2, [r4, #0]
 800c2d2:	1ac0      	subs	r0, r0, r3
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	4083      	lsls	r3, r0
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	002e      	movs	r6, r5
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	e7ce      	b.n	800c27e <_svfiprintf_r+0x96>
 800c2e0:	9b07      	ldr	r3, [sp, #28]
 800c2e2:	1d19      	adds	r1, r3, #4
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	9107      	str	r1, [sp, #28]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	db01      	blt.n	800c2f0 <_svfiprintf_r+0x108>
 800c2ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2ee:	e004      	b.n	800c2fa <_svfiprintf_r+0x112>
 800c2f0:	425b      	negs	r3, r3
 800c2f2:	60e3      	str	r3, [r4, #12]
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	782b      	ldrb	r3, [r5, #0]
 800c2fc:	2b2e      	cmp	r3, #46	; 0x2e
 800c2fe:	d10a      	bne.n	800c316 <_svfiprintf_r+0x12e>
 800c300:	786b      	ldrb	r3, [r5, #1]
 800c302:	2b2a      	cmp	r3, #42	; 0x2a
 800c304:	d135      	bne.n	800c372 <_svfiprintf_r+0x18a>
 800c306:	9b07      	ldr	r3, [sp, #28]
 800c308:	3502      	adds	r5, #2
 800c30a:	1d1a      	adds	r2, r3, #4
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	9207      	str	r2, [sp, #28]
 800c310:	2b00      	cmp	r3, #0
 800c312:	db2b      	blt.n	800c36c <_svfiprintf_r+0x184>
 800c314:	9309      	str	r3, [sp, #36]	; 0x24
 800c316:	4e30      	ldr	r6, [pc, #192]	; (800c3d8 <_svfiprintf_r+0x1f0>)
 800c318:	2203      	movs	r2, #3
 800c31a:	0030      	movs	r0, r6
 800c31c:	7829      	ldrb	r1, [r5, #0]
 800c31e:	f000 f9e7 	bl	800c6f0 <memchr>
 800c322:	2800      	cmp	r0, #0
 800c324:	d006      	beq.n	800c334 <_svfiprintf_r+0x14c>
 800c326:	2340      	movs	r3, #64	; 0x40
 800c328:	1b80      	subs	r0, r0, r6
 800c32a:	4083      	lsls	r3, r0
 800c32c:	6822      	ldr	r2, [r4, #0]
 800c32e:	3501      	adds	r5, #1
 800c330:	4313      	orrs	r3, r2
 800c332:	6023      	str	r3, [r4, #0]
 800c334:	7829      	ldrb	r1, [r5, #0]
 800c336:	2206      	movs	r2, #6
 800c338:	4828      	ldr	r0, [pc, #160]	; (800c3dc <_svfiprintf_r+0x1f4>)
 800c33a:	1c6e      	adds	r6, r5, #1
 800c33c:	7621      	strb	r1, [r4, #24]
 800c33e:	f000 f9d7 	bl	800c6f0 <memchr>
 800c342:	2800      	cmp	r0, #0
 800c344:	d03c      	beq.n	800c3c0 <_svfiprintf_r+0x1d8>
 800c346:	4b26      	ldr	r3, [pc, #152]	; (800c3e0 <_svfiprintf_r+0x1f8>)
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d125      	bne.n	800c398 <_svfiprintf_r+0x1b0>
 800c34c:	2207      	movs	r2, #7
 800c34e:	9b07      	ldr	r3, [sp, #28]
 800c350:	3307      	adds	r3, #7
 800c352:	4393      	bics	r3, r2
 800c354:	3308      	adds	r3, #8
 800c356:	9307      	str	r3, [sp, #28]
 800c358:	6963      	ldr	r3, [r4, #20]
 800c35a:	9a04      	ldr	r2, [sp, #16]
 800c35c:	189b      	adds	r3, r3, r2
 800c35e:	6163      	str	r3, [r4, #20]
 800c360:	e765      	b.n	800c22e <_svfiprintf_r+0x46>
 800c362:	4343      	muls	r3, r0
 800c364:	0035      	movs	r5, r6
 800c366:	2101      	movs	r1, #1
 800c368:	189b      	adds	r3, r3, r2
 800c36a:	e7a6      	b.n	800c2ba <_svfiprintf_r+0xd2>
 800c36c:	2301      	movs	r3, #1
 800c36e:	425b      	negs	r3, r3
 800c370:	e7d0      	b.n	800c314 <_svfiprintf_r+0x12c>
 800c372:	2300      	movs	r3, #0
 800c374:	200a      	movs	r0, #10
 800c376:	001a      	movs	r2, r3
 800c378:	3501      	adds	r5, #1
 800c37a:	6063      	str	r3, [r4, #4]
 800c37c:	7829      	ldrb	r1, [r5, #0]
 800c37e:	1c6e      	adds	r6, r5, #1
 800c380:	3930      	subs	r1, #48	; 0x30
 800c382:	2909      	cmp	r1, #9
 800c384:	d903      	bls.n	800c38e <_svfiprintf_r+0x1a6>
 800c386:	2b00      	cmp	r3, #0
 800c388:	d0c5      	beq.n	800c316 <_svfiprintf_r+0x12e>
 800c38a:	9209      	str	r2, [sp, #36]	; 0x24
 800c38c:	e7c3      	b.n	800c316 <_svfiprintf_r+0x12e>
 800c38e:	4342      	muls	r2, r0
 800c390:	0035      	movs	r5, r6
 800c392:	2301      	movs	r3, #1
 800c394:	1852      	adds	r2, r2, r1
 800c396:	e7f1      	b.n	800c37c <_svfiprintf_r+0x194>
 800c398:	ab07      	add	r3, sp, #28
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	003a      	movs	r2, r7
 800c39e:	0021      	movs	r1, r4
 800c3a0:	4b10      	ldr	r3, [pc, #64]	; (800c3e4 <_svfiprintf_r+0x1fc>)
 800c3a2:	9803      	ldr	r0, [sp, #12]
 800c3a4:	e000      	b.n	800c3a8 <_svfiprintf_r+0x1c0>
 800c3a6:	bf00      	nop
 800c3a8:	9004      	str	r0, [sp, #16]
 800c3aa:	9b04      	ldr	r3, [sp, #16]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	d1d3      	bne.n	800c358 <_svfiprintf_r+0x170>
 800c3b0:	89bb      	ldrh	r3, [r7, #12]
 800c3b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c3b4:	065b      	lsls	r3, r3, #25
 800c3b6:	d400      	bmi.n	800c3ba <_svfiprintf_r+0x1d2>
 800c3b8:	e72d      	b.n	800c216 <_svfiprintf_r+0x2e>
 800c3ba:	2001      	movs	r0, #1
 800c3bc:	4240      	negs	r0, r0
 800c3be:	e72a      	b.n	800c216 <_svfiprintf_r+0x2e>
 800c3c0:	ab07      	add	r3, sp, #28
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	003a      	movs	r2, r7
 800c3c6:	0021      	movs	r1, r4
 800c3c8:	4b06      	ldr	r3, [pc, #24]	; (800c3e4 <_svfiprintf_r+0x1fc>)
 800c3ca:	9803      	ldr	r0, [sp, #12]
 800c3cc:	f000 f87c 	bl	800c4c8 <_printf_i>
 800c3d0:	e7ea      	b.n	800c3a8 <_svfiprintf_r+0x1c0>
 800c3d2:	46c0      	nop			; (mov r8, r8)
 800c3d4:	0800d56d 	.word	0x0800d56d
 800c3d8:	0800d573 	.word	0x0800d573
 800c3dc:	0800d577 	.word	0x0800d577
 800c3e0:	00000000 	.word	0x00000000
 800c3e4:	0800c125 	.word	0x0800c125

0800c3e8 <_printf_common>:
 800c3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3ea:	0015      	movs	r5, r2
 800c3ec:	9301      	str	r3, [sp, #4]
 800c3ee:	688a      	ldr	r2, [r1, #8]
 800c3f0:	690b      	ldr	r3, [r1, #16]
 800c3f2:	000c      	movs	r4, r1
 800c3f4:	9000      	str	r0, [sp, #0]
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	da00      	bge.n	800c3fc <_printf_common+0x14>
 800c3fa:	0013      	movs	r3, r2
 800c3fc:	0022      	movs	r2, r4
 800c3fe:	602b      	str	r3, [r5, #0]
 800c400:	3243      	adds	r2, #67	; 0x43
 800c402:	7812      	ldrb	r2, [r2, #0]
 800c404:	2a00      	cmp	r2, #0
 800c406:	d001      	beq.n	800c40c <_printf_common+0x24>
 800c408:	3301      	adds	r3, #1
 800c40a:	602b      	str	r3, [r5, #0]
 800c40c:	6823      	ldr	r3, [r4, #0]
 800c40e:	069b      	lsls	r3, r3, #26
 800c410:	d502      	bpl.n	800c418 <_printf_common+0x30>
 800c412:	682b      	ldr	r3, [r5, #0]
 800c414:	3302      	adds	r3, #2
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	6822      	ldr	r2, [r4, #0]
 800c41a:	2306      	movs	r3, #6
 800c41c:	0017      	movs	r7, r2
 800c41e:	401f      	ands	r7, r3
 800c420:	421a      	tst	r2, r3
 800c422:	d027      	beq.n	800c474 <_printf_common+0x8c>
 800c424:	0023      	movs	r3, r4
 800c426:	3343      	adds	r3, #67	; 0x43
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	1e5a      	subs	r2, r3, #1
 800c42c:	4193      	sbcs	r3, r2
 800c42e:	6822      	ldr	r2, [r4, #0]
 800c430:	0692      	lsls	r2, r2, #26
 800c432:	d430      	bmi.n	800c496 <_printf_common+0xae>
 800c434:	0022      	movs	r2, r4
 800c436:	9901      	ldr	r1, [sp, #4]
 800c438:	9800      	ldr	r0, [sp, #0]
 800c43a:	9e08      	ldr	r6, [sp, #32]
 800c43c:	3243      	adds	r2, #67	; 0x43
 800c43e:	47b0      	blx	r6
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d025      	beq.n	800c490 <_printf_common+0xa8>
 800c444:	2306      	movs	r3, #6
 800c446:	6820      	ldr	r0, [r4, #0]
 800c448:	682a      	ldr	r2, [r5, #0]
 800c44a:	68e1      	ldr	r1, [r4, #12]
 800c44c:	2500      	movs	r5, #0
 800c44e:	4003      	ands	r3, r0
 800c450:	2b04      	cmp	r3, #4
 800c452:	d103      	bne.n	800c45c <_printf_common+0x74>
 800c454:	1a8d      	subs	r5, r1, r2
 800c456:	43eb      	mvns	r3, r5
 800c458:	17db      	asrs	r3, r3, #31
 800c45a:	401d      	ands	r5, r3
 800c45c:	68a3      	ldr	r3, [r4, #8]
 800c45e:	6922      	ldr	r2, [r4, #16]
 800c460:	4293      	cmp	r3, r2
 800c462:	dd01      	ble.n	800c468 <_printf_common+0x80>
 800c464:	1a9b      	subs	r3, r3, r2
 800c466:	18ed      	adds	r5, r5, r3
 800c468:	2700      	movs	r7, #0
 800c46a:	42bd      	cmp	r5, r7
 800c46c:	d120      	bne.n	800c4b0 <_printf_common+0xc8>
 800c46e:	2000      	movs	r0, #0
 800c470:	e010      	b.n	800c494 <_printf_common+0xac>
 800c472:	3701      	adds	r7, #1
 800c474:	68e3      	ldr	r3, [r4, #12]
 800c476:	682a      	ldr	r2, [r5, #0]
 800c478:	1a9b      	subs	r3, r3, r2
 800c47a:	42bb      	cmp	r3, r7
 800c47c:	ddd2      	ble.n	800c424 <_printf_common+0x3c>
 800c47e:	0022      	movs	r2, r4
 800c480:	2301      	movs	r3, #1
 800c482:	9901      	ldr	r1, [sp, #4]
 800c484:	9800      	ldr	r0, [sp, #0]
 800c486:	9e08      	ldr	r6, [sp, #32]
 800c488:	3219      	adds	r2, #25
 800c48a:	47b0      	blx	r6
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	d1f0      	bne.n	800c472 <_printf_common+0x8a>
 800c490:	2001      	movs	r0, #1
 800c492:	4240      	negs	r0, r0
 800c494:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c496:	2030      	movs	r0, #48	; 0x30
 800c498:	18e1      	adds	r1, r4, r3
 800c49a:	3143      	adds	r1, #67	; 0x43
 800c49c:	7008      	strb	r0, [r1, #0]
 800c49e:	0021      	movs	r1, r4
 800c4a0:	1c5a      	adds	r2, r3, #1
 800c4a2:	3145      	adds	r1, #69	; 0x45
 800c4a4:	7809      	ldrb	r1, [r1, #0]
 800c4a6:	18a2      	adds	r2, r4, r2
 800c4a8:	3243      	adds	r2, #67	; 0x43
 800c4aa:	3302      	adds	r3, #2
 800c4ac:	7011      	strb	r1, [r2, #0]
 800c4ae:	e7c1      	b.n	800c434 <_printf_common+0x4c>
 800c4b0:	0022      	movs	r2, r4
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	9901      	ldr	r1, [sp, #4]
 800c4b6:	9800      	ldr	r0, [sp, #0]
 800c4b8:	9e08      	ldr	r6, [sp, #32]
 800c4ba:	321a      	adds	r2, #26
 800c4bc:	47b0      	blx	r6
 800c4be:	1c43      	adds	r3, r0, #1
 800c4c0:	d0e6      	beq.n	800c490 <_printf_common+0xa8>
 800c4c2:	3701      	adds	r7, #1
 800c4c4:	e7d1      	b.n	800c46a <_printf_common+0x82>
	...

0800c4c8 <_printf_i>:
 800c4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ca:	b08b      	sub	sp, #44	; 0x2c
 800c4cc:	9206      	str	r2, [sp, #24]
 800c4ce:	000a      	movs	r2, r1
 800c4d0:	3243      	adds	r2, #67	; 0x43
 800c4d2:	9307      	str	r3, [sp, #28]
 800c4d4:	9005      	str	r0, [sp, #20]
 800c4d6:	9204      	str	r2, [sp, #16]
 800c4d8:	7e0a      	ldrb	r2, [r1, #24]
 800c4da:	000c      	movs	r4, r1
 800c4dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4de:	2a78      	cmp	r2, #120	; 0x78
 800c4e0:	d807      	bhi.n	800c4f2 <_printf_i+0x2a>
 800c4e2:	2a62      	cmp	r2, #98	; 0x62
 800c4e4:	d809      	bhi.n	800c4fa <_printf_i+0x32>
 800c4e6:	2a00      	cmp	r2, #0
 800c4e8:	d100      	bne.n	800c4ec <_printf_i+0x24>
 800c4ea:	e0c1      	b.n	800c670 <_printf_i+0x1a8>
 800c4ec:	2a58      	cmp	r2, #88	; 0x58
 800c4ee:	d100      	bne.n	800c4f2 <_printf_i+0x2a>
 800c4f0:	e08c      	b.n	800c60c <_printf_i+0x144>
 800c4f2:	0026      	movs	r6, r4
 800c4f4:	3642      	adds	r6, #66	; 0x42
 800c4f6:	7032      	strb	r2, [r6, #0]
 800c4f8:	e022      	b.n	800c540 <_printf_i+0x78>
 800c4fa:	0010      	movs	r0, r2
 800c4fc:	3863      	subs	r0, #99	; 0x63
 800c4fe:	2815      	cmp	r0, #21
 800c500:	d8f7      	bhi.n	800c4f2 <_printf_i+0x2a>
 800c502:	f7f6 fa09 	bl	8002918 <__gnu_thumb1_case_shi>
 800c506:	0016      	.short	0x0016
 800c508:	fff6001f 	.word	0xfff6001f
 800c50c:	fff6fff6 	.word	0xfff6fff6
 800c510:	001ffff6 	.word	0x001ffff6
 800c514:	fff6fff6 	.word	0xfff6fff6
 800c518:	fff6fff6 	.word	0xfff6fff6
 800c51c:	003600a8 	.word	0x003600a8
 800c520:	fff6009a 	.word	0xfff6009a
 800c524:	00b9fff6 	.word	0x00b9fff6
 800c528:	0036fff6 	.word	0x0036fff6
 800c52c:	fff6fff6 	.word	0xfff6fff6
 800c530:	009e      	.short	0x009e
 800c532:	0026      	movs	r6, r4
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	3642      	adds	r6, #66	; 0x42
 800c538:	1d11      	adds	r1, r2, #4
 800c53a:	6019      	str	r1, [r3, #0]
 800c53c:	6813      	ldr	r3, [r2, #0]
 800c53e:	7033      	strb	r3, [r6, #0]
 800c540:	2301      	movs	r3, #1
 800c542:	e0a7      	b.n	800c694 <_printf_i+0x1cc>
 800c544:	6808      	ldr	r0, [r1, #0]
 800c546:	6819      	ldr	r1, [r3, #0]
 800c548:	1d0a      	adds	r2, r1, #4
 800c54a:	0605      	lsls	r5, r0, #24
 800c54c:	d50b      	bpl.n	800c566 <_printf_i+0x9e>
 800c54e:	680d      	ldr	r5, [r1, #0]
 800c550:	601a      	str	r2, [r3, #0]
 800c552:	2d00      	cmp	r5, #0
 800c554:	da03      	bge.n	800c55e <_printf_i+0x96>
 800c556:	232d      	movs	r3, #45	; 0x2d
 800c558:	9a04      	ldr	r2, [sp, #16]
 800c55a:	426d      	negs	r5, r5
 800c55c:	7013      	strb	r3, [r2, #0]
 800c55e:	4b61      	ldr	r3, [pc, #388]	; (800c6e4 <_printf_i+0x21c>)
 800c560:	270a      	movs	r7, #10
 800c562:	9303      	str	r3, [sp, #12]
 800c564:	e01b      	b.n	800c59e <_printf_i+0xd6>
 800c566:	680d      	ldr	r5, [r1, #0]
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	0641      	lsls	r1, r0, #25
 800c56c:	d5f1      	bpl.n	800c552 <_printf_i+0x8a>
 800c56e:	b22d      	sxth	r5, r5
 800c570:	e7ef      	b.n	800c552 <_printf_i+0x8a>
 800c572:	680d      	ldr	r5, [r1, #0]
 800c574:	6819      	ldr	r1, [r3, #0]
 800c576:	1d08      	adds	r0, r1, #4
 800c578:	6018      	str	r0, [r3, #0]
 800c57a:	062e      	lsls	r6, r5, #24
 800c57c:	d501      	bpl.n	800c582 <_printf_i+0xba>
 800c57e:	680d      	ldr	r5, [r1, #0]
 800c580:	e003      	b.n	800c58a <_printf_i+0xc2>
 800c582:	066d      	lsls	r5, r5, #25
 800c584:	d5fb      	bpl.n	800c57e <_printf_i+0xb6>
 800c586:	680d      	ldr	r5, [r1, #0]
 800c588:	b2ad      	uxth	r5, r5
 800c58a:	4b56      	ldr	r3, [pc, #344]	; (800c6e4 <_printf_i+0x21c>)
 800c58c:	2708      	movs	r7, #8
 800c58e:	9303      	str	r3, [sp, #12]
 800c590:	2a6f      	cmp	r2, #111	; 0x6f
 800c592:	d000      	beq.n	800c596 <_printf_i+0xce>
 800c594:	3702      	adds	r7, #2
 800c596:	0023      	movs	r3, r4
 800c598:	2200      	movs	r2, #0
 800c59a:	3343      	adds	r3, #67	; 0x43
 800c59c:	701a      	strb	r2, [r3, #0]
 800c59e:	6863      	ldr	r3, [r4, #4]
 800c5a0:	60a3      	str	r3, [r4, #8]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	db03      	blt.n	800c5ae <_printf_i+0xe6>
 800c5a6:	2204      	movs	r2, #4
 800c5a8:	6821      	ldr	r1, [r4, #0]
 800c5aa:	4391      	bics	r1, r2
 800c5ac:	6021      	str	r1, [r4, #0]
 800c5ae:	2d00      	cmp	r5, #0
 800c5b0:	d102      	bne.n	800c5b8 <_printf_i+0xf0>
 800c5b2:	9e04      	ldr	r6, [sp, #16]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00c      	beq.n	800c5d2 <_printf_i+0x10a>
 800c5b8:	9e04      	ldr	r6, [sp, #16]
 800c5ba:	0028      	movs	r0, r5
 800c5bc:	0039      	movs	r1, r7
 800c5be:	f7f6 fa3b 	bl	8002a38 <__aeabi_uidivmod>
 800c5c2:	9b03      	ldr	r3, [sp, #12]
 800c5c4:	3e01      	subs	r6, #1
 800c5c6:	5c5b      	ldrb	r3, [r3, r1]
 800c5c8:	7033      	strb	r3, [r6, #0]
 800c5ca:	002b      	movs	r3, r5
 800c5cc:	0005      	movs	r5, r0
 800c5ce:	429f      	cmp	r7, r3
 800c5d0:	d9f3      	bls.n	800c5ba <_printf_i+0xf2>
 800c5d2:	2f08      	cmp	r7, #8
 800c5d4:	d109      	bne.n	800c5ea <_printf_i+0x122>
 800c5d6:	6823      	ldr	r3, [r4, #0]
 800c5d8:	07db      	lsls	r3, r3, #31
 800c5da:	d506      	bpl.n	800c5ea <_printf_i+0x122>
 800c5dc:	6863      	ldr	r3, [r4, #4]
 800c5de:	6922      	ldr	r2, [r4, #16]
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	dc02      	bgt.n	800c5ea <_printf_i+0x122>
 800c5e4:	2330      	movs	r3, #48	; 0x30
 800c5e6:	3e01      	subs	r6, #1
 800c5e8:	7033      	strb	r3, [r6, #0]
 800c5ea:	9b04      	ldr	r3, [sp, #16]
 800c5ec:	1b9b      	subs	r3, r3, r6
 800c5ee:	6123      	str	r3, [r4, #16]
 800c5f0:	9b07      	ldr	r3, [sp, #28]
 800c5f2:	0021      	movs	r1, r4
 800c5f4:	9300      	str	r3, [sp, #0]
 800c5f6:	9805      	ldr	r0, [sp, #20]
 800c5f8:	9b06      	ldr	r3, [sp, #24]
 800c5fa:	aa09      	add	r2, sp, #36	; 0x24
 800c5fc:	f7ff fef4 	bl	800c3e8 <_printf_common>
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	d14c      	bne.n	800c69e <_printf_i+0x1d6>
 800c604:	2001      	movs	r0, #1
 800c606:	4240      	negs	r0, r0
 800c608:	b00b      	add	sp, #44	; 0x2c
 800c60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c60c:	3145      	adds	r1, #69	; 0x45
 800c60e:	700a      	strb	r2, [r1, #0]
 800c610:	4a34      	ldr	r2, [pc, #208]	; (800c6e4 <_printf_i+0x21c>)
 800c612:	9203      	str	r2, [sp, #12]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	6821      	ldr	r1, [r4, #0]
 800c618:	ca20      	ldmia	r2!, {r5}
 800c61a:	601a      	str	r2, [r3, #0]
 800c61c:	0608      	lsls	r0, r1, #24
 800c61e:	d516      	bpl.n	800c64e <_printf_i+0x186>
 800c620:	07cb      	lsls	r3, r1, #31
 800c622:	d502      	bpl.n	800c62a <_printf_i+0x162>
 800c624:	2320      	movs	r3, #32
 800c626:	4319      	orrs	r1, r3
 800c628:	6021      	str	r1, [r4, #0]
 800c62a:	2710      	movs	r7, #16
 800c62c:	2d00      	cmp	r5, #0
 800c62e:	d1b2      	bne.n	800c596 <_printf_i+0xce>
 800c630:	2320      	movs	r3, #32
 800c632:	6822      	ldr	r2, [r4, #0]
 800c634:	439a      	bics	r2, r3
 800c636:	6022      	str	r2, [r4, #0]
 800c638:	e7ad      	b.n	800c596 <_printf_i+0xce>
 800c63a:	2220      	movs	r2, #32
 800c63c:	6809      	ldr	r1, [r1, #0]
 800c63e:	430a      	orrs	r2, r1
 800c640:	6022      	str	r2, [r4, #0]
 800c642:	0022      	movs	r2, r4
 800c644:	2178      	movs	r1, #120	; 0x78
 800c646:	3245      	adds	r2, #69	; 0x45
 800c648:	7011      	strb	r1, [r2, #0]
 800c64a:	4a27      	ldr	r2, [pc, #156]	; (800c6e8 <_printf_i+0x220>)
 800c64c:	e7e1      	b.n	800c612 <_printf_i+0x14a>
 800c64e:	0648      	lsls	r0, r1, #25
 800c650:	d5e6      	bpl.n	800c620 <_printf_i+0x158>
 800c652:	b2ad      	uxth	r5, r5
 800c654:	e7e4      	b.n	800c620 <_printf_i+0x158>
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	680d      	ldr	r5, [r1, #0]
 800c65a:	1d10      	adds	r0, r2, #4
 800c65c:	6949      	ldr	r1, [r1, #20]
 800c65e:	6018      	str	r0, [r3, #0]
 800c660:	6813      	ldr	r3, [r2, #0]
 800c662:	062e      	lsls	r6, r5, #24
 800c664:	d501      	bpl.n	800c66a <_printf_i+0x1a2>
 800c666:	6019      	str	r1, [r3, #0]
 800c668:	e002      	b.n	800c670 <_printf_i+0x1a8>
 800c66a:	066d      	lsls	r5, r5, #25
 800c66c:	d5fb      	bpl.n	800c666 <_printf_i+0x19e>
 800c66e:	8019      	strh	r1, [r3, #0]
 800c670:	2300      	movs	r3, #0
 800c672:	9e04      	ldr	r6, [sp, #16]
 800c674:	6123      	str	r3, [r4, #16]
 800c676:	e7bb      	b.n	800c5f0 <_printf_i+0x128>
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	1d11      	adds	r1, r2, #4
 800c67c:	6019      	str	r1, [r3, #0]
 800c67e:	6816      	ldr	r6, [r2, #0]
 800c680:	2100      	movs	r1, #0
 800c682:	0030      	movs	r0, r6
 800c684:	6862      	ldr	r2, [r4, #4]
 800c686:	f000 f833 	bl	800c6f0 <memchr>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d001      	beq.n	800c692 <_printf_i+0x1ca>
 800c68e:	1b80      	subs	r0, r0, r6
 800c690:	6060      	str	r0, [r4, #4]
 800c692:	6863      	ldr	r3, [r4, #4]
 800c694:	6123      	str	r3, [r4, #16]
 800c696:	2300      	movs	r3, #0
 800c698:	9a04      	ldr	r2, [sp, #16]
 800c69a:	7013      	strb	r3, [r2, #0]
 800c69c:	e7a8      	b.n	800c5f0 <_printf_i+0x128>
 800c69e:	6923      	ldr	r3, [r4, #16]
 800c6a0:	0032      	movs	r2, r6
 800c6a2:	9906      	ldr	r1, [sp, #24]
 800c6a4:	9805      	ldr	r0, [sp, #20]
 800c6a6:	9d07      	ldr	r5, [sp, #28]
 800c6a8:	47a8      	blx	r5
 800c6aa:	1c43      	adds	r3, r0, #1
 800c6ac:	d0aa      	beq.n	800c604 <_printf_i+0x13c>
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	079b      	lsls	r3, r3, #30
 800c6b2:	d415      	bmi.n	800c6e0 <_printf_i+0x218>
 800c6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b6:	68e0      	ldr	r0, [r4, #12]
 800c6b8:	4298      	cmp	r0, r3
 800c6ba:	daa5      	bge.n	800c608 <_printf_i+0x140>
 800c6bc:	0018      	movs	r0, r3
 800c6be:	e7a3      	b.n	800c608 <_printf_i+0x140>
 800c6c0:	0022      	movs	r2, r4
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	9906      	ldr	r1, [sp, #24]
 800c6c6:	9805      	ldr	r0, [sp, #20]
 800c6c8:	9e07      	ldr	r6, [sp, #28]
 800c6ca:	3219      	adds	r2, #25
 800c6cc:	47b0      	blx	r6
 800c6ce:	1c43      	adds	r3, r0, #1
 800c6d0:	d098      	beq.n	800c604 <_printf_i+0x13c>
 800c6d2:	3501      	adds	r5, #1
 800c6d4:	68e3      	ldr	r3, [r4, #12]
 800c6d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6d8:	1a9b      	subs	r3, r3, r2
 800c6da:	42ab      	cmp	r3, r5
 800c6dc:	dcf0      	bgt.n	800c6c0 <_printf_i+0x1f8>
 800c6de:	e7e9      	b.n	800c6b4 <_printf_i+0x1ec>
 800c6e0:	2500      	movs	r5, #0
 800c6e2:	e7f7      	b.n	800c6d4 <_printf_i+0x20c>
 800c6e4:	0800d57e 	.word	0x0800d57e
 800c6e8:	0800d58f 	.word	0x0800d58f

0800c6ec <__retarget_lock_acquire_recursive>:
 800c6ec:	4770      	bx	lr

0800c6ee <__retarget_lock_release_recursive>:
 800c6ee:	4770      	bx	lr

0800c6f0 <memchr>:
 800c6f0:	b2c9      	uxtb	r1, r1
 800c6f2:	1882      	adds	r2, r0, r2
 800c6f4:	4290      	cmp	r0, r2
 800c6f6:	d101      	bne.n	800c6fc <memchr+0xc>
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	4770      	bx	lr
 800c6fc:	7803      	ldrb	r3, [r0, #0]
 800c6fe:	428b      	cmp	r3, r1
 800c700:	d0fb      	beq.n	800c6fa <memchr+0xa>
 800c702:	3001      	adds	r0, #1
 800c704:	e7f6      	b.n	800c6f4 <memchr+0x4>

0800c706 <memmove>:
 800c706:	b510      	push	{r4, lr}
 800c708:	4288      	cmp	r0, r1
 800c70a:	d902      	bls.n	800c712 <memmove+0xc>
 800c70c:	188b      	adds	r3, r1, r2
 800c70e:	4298      	cmp	r0, r3
 800c710:	d303      	bcc.n	800c71a <memmove+0x14>
 800c712:	2300      	movs	r3, #0
 800c714:	e007      	b.n	800c726 <memmove+0x20>
 800c716:	5c8b      	ldrb	r3, [r1, r2]
 800c718:	5483      	strb	r3, [r0, r2]
 800c71a:	3a01      	subs	r2, #1
 800c71c:	d2fb      	bcs.n	800c716 <memmove+0x10>
 800c71e:	bd10      	pop	{r4, pc}
 800c720:	5ccc      	ldrb	r4, [r1, r3]
 800c722:	54c4      	strb	r4, [r0, r3]
 800c724:	3301      	adds	r3, #1
 800c726:	429a      	cmp	r2, r3
 800c728:	d1fa      	bne.n	800c720 <memmove+0x1a>
 800c72a:	e7f8      	b.n	800c71e <memmove+0x18>

0800c72c <_realloc_r>:
 800c72c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c72e:	0007      	movs	r7, r0
 800c730:	000e      	movs	r6, r1
 800c732:	0014      	movs	r4, r2
 800c734:	2900      	cmp	r1, #0
 800c736:	d105      	bne.n	800c744 <_realloc_r+0x18>
 800c738:	0011      	movs	r1, r2
 800c73a:	f7ff fb6d 	bl	800be18 <_malloc_r>
 800c73e:	0005      	movs	r5, r0
 800c740:	0028      	movs	r0, r5
 800c742:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c744:	2a00      	cmp	r2, #0
 800c746:	d103      	bne.n	800c750 <_realloc_r+0x24>
 800c748:	f7ff fafa 	bl	800bd40 <_free_r>
 800c74c:	0025      	movs	r5, r4
 800c74e:	e7f7      	b.n	800c740 <_realloc_r+0x14>
 800c750:	f000 f81b 	bl	800c78a <_malloc_usable_size_r>
 800c754:	9001      	str	r0, [sp, #4]
 800c756:	4284      	cmp	r4, r0
 800c758:	d803      	bhi.n	800c762 <_realloc_r+0x36>
 800c75a:	0035      	movs	r5, r6
 800c75c:	0843      	lsrs	r3, r0, #1
 800c75e:	42a3      	cmp	r3, r4
 800c760:	d3ee      	bcc.n	800c740 <_realloc_r+0x14>
 800c762:	0021      	movs	r1, r4
 800c764:	0038      	movs	r0, r7
 800c766:	f7ff fb57 	bl	800be18 <_malloc_r>
 800c76a:	1e05      	subs	r5, r0, #0
 800c76c:	d0e8      	beq.n	800c740 <_realloc_r+0x14>
 800c76e:	9b01      	ldr	r3, [sp, #4]
 800c770:	0022      	movs	r2, r4
 800c772:	429c      	cmp	r4, r3
 800c774:	d900      	bls.n	800c778 <_realloc_r+0x4c>
 800c776:	001a      	movs	r2, r3
 800c778:	0031      	movs	r1, r6
 800c77a:	0028      	movs	r0, r5
 800c77c:	f7ff face 	bl	800bd1c <memcpy>
 800c780:	0031      	movs	r1, r6
 800c782:	0038      	movs	r0, r7
 800c784:	f7ff fadc 	bl	800bd40 <_free_r>
 800c788:	e7da      	b.n	800c740 <_realloc_r+0x14>

0800c78a <_malloc_usable_size_r>:
 800c78a:	1f0b      	subs	r3, r1, #4
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	1f18      	subs	r0, r3, #4
 800c790:	2b00      	cmp	r3, #0
 800c792:	da01      	bge.n	800c798 <_malloc_usable_size_r+0xe>
 800c794:	580b      	ldr	r3, [r1, r0]
 800c796:	18c0      	adds	r0, r0, r3
 800c798:	4770      	bx	lr
	...

0800c79c <atan>:
 800c79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c79e:	4b98      	ldr	r3, [pc, #608]	; (800ca00 <atan+0x264>)
 800c7a0:	b085      	sub	sp, #20
 800c7a2:	004e      	lsls	r6, r1, #1
 800c7a4:	0004      	movs	r4, r0
 800c7a6:	000d      	movs	r5, r1
 800c7a8:	9103      	str	r1, [sp, #12]
 800c7aa:	0876      	lsrs	r6, r6, #1
 800c7ac:	429e      	cmp	r6, r3
 800c7ae:	dd18      	ble.n	800c7e2 <atan+0x46>
 800c7b0:	4b94      	ldr	r3, [pc, #592]	; (800ca04 <atan+0x268>)
 800c7b2:	429e      	cmp	r6, r3
 800c7b4:	dc02      	bgt.n	800c7bc <atan+0x20>
 800c7b6:	d10a      	bne.n	800c7ce <atan+0x32>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	d008      	beq.n	800c7ce <atan+0x32>
 800c7bc:	0022      	movs	r2, r4
 800c7be:	002b      	movs	r3, r5
 800c7c0:	0020      	movs	r0, r4
 800c7c2:	0029      	movs	r1, r5
 800c7c4:	f7f7 f8d6 	bl	8003974 <__aeabi_dadd>
 800c7c8:	0004      	movs	r4, r0
 800c7ca:	000d      	movs	r5, r1
 800c7cc:	e005      	b.n	800c7da <atan+0x3e>
 800c7ce:	9b03      	ldr	r3, [sp, #12]
 800c7d0:	4c8d      	ldr	r4, [pc, #564]	; (800ca08 <atan+0x26c>)
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	dd00      	ble.n	800c7d8 <atan+0x3c>
 800c7d6:	e110      	b.n	800c9fa <atan+0x25e>
 800c7d8:	4d8c      	ldr	r5, [pc, #560]	; (800ca0c <atan+0x270>)
 800c7da:	0020      	movs	r0, r4
 800c7dc:	0029      	movs	r1, r5
 800c7de:	b005      	add	sp, #20
 800c7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7e2:	4b8b      	ldr	r3, [pc, #556]	; (800ca10 <atan+0x274>)
 800c7e4:	429e      	cmp	r6, r3
 800c7e6:	dc0f      	bgt.n	800c808 <atan+0x6c>
 800c7e8:	4b8a      	ldr	r3, [pc, #552]	; (800ca14 <atan+0x278>)
 800c7ea:	429e      	cmp	r6, r3
 800c7ec:	dc09      	bgt.n	800c802 <atan+0x66>
 800c7ee:	4a8a      	ldr	r2, [pc, #552]	; (800ca18 <atan+0x27c>)
 800c7f0:	4b8a      	ldr	r3, [pc, #552]	; (800ca1c <atan+0x280>)
 800c7f2:	f7f7 f8bf 	bl	8003974 <__aeabi_dadd>
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	4b89      	ldr	r3, [pc, #548]	; (800ca20 <atan+0x284>)
 800c7fa:	f7f6 fa37 	bl	8002c6c <__aeabi_dcmpgt>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d1eb      	bne.n	800c7da <atan+0x3e>
 800c802:	2301      	movs	r3, #1
 800c804:	425b      	negs	r3, r3
 800c806:	e025      	b.n	800c854 <atan+0xb8>
 800c808:	f000 f948 	bl	800ca9c <fabs>
 800c80c:	4b85      	ldr	r3, [pc, #532]	; (800ca24 <atan+0x288>)
 800c80e:	0004      	movs	r4, r0
 800c810:	000d      	movs	r5, r1
 800c812:	429e      	cmp	r6, r3
 800c814:	dd00      	ble.n	800c818 <atan+0x7c>
 800c816:	e0aa      	b.n	800c96e <atan+0x1d2>
 800c818:	4b83      	ldr	r3, [pc, #524]	; (800ca28 <atan+0x28c>)
 800c81a:	429e      	cmp	r6, r3
 800c81c:	dd00      	ble.n	800c820 <atan+0x84>
 800c81e:	e090      	b.n	800c942 <atan+0x1a6>
 800c820:	0002      	movs	r2, r0
 800c822:	000b      	movs	r3, r1
 800c824:	f7f7 f8a6 	bl	8003974 <__aeabi_dadd>
 800c828:	2200      	movs	r2, #0
 800c82a:	4b7d      	ldr	r3, [pc, #500]	; (800ca20 <atan+0x284>)
 800c82c:	f7f8 fa4c 	bl	8004cc8 <__aeabi_dsub>
 800c830:	2380      	movs	r3, #128	; 0x80
 800c832:	0006      	movs	r6, r0
 800c834:	000f      	movs	r7, r1
 800c836:	2200      	movs	r2, #0
 800c838:	0020      	movs	r0, r4
 800c83a:	0029      	movs	r1, r5
 800c83c:	05db      	lsls	r3, r3, #23
 800c83e:	f7f7 f899 	bl	8003974 <__aeabi_dadd>
 800c842:	000b      	movs	r3, r1
 800c844:	0002      	movs	r2, r0
 800c846:	0039      	movs	r1, r7
 800c848:	0030      	movs	r0, r6
 800c84a:	f7f7 fbcf 	bl	8003fec <__aeabi_ddiv>
 800c84e:	2300      	movs	r3, #0
 800c850:	0004      	movs	r4, r0
 800c852:	000d      	movs	r5, r1
 800c854:	0022      	movs	r2, r4
 800c856:	9302      	str	r3, [sp, #8]
 800c858:	0020      	movs	r0, r4
 800c85a:	002b      	movs	r3, r5
 800c85c:	0029      	movs	r1, r5
 800c85e:	f7f7 ffc7 	bl	80047f0 <__aeabi_dmul>
 800c862:	0002      	movs	r2, r0
 800c864:	000b      	movs	r3, r1
 800c866:	9000      	str	r0, [sp, #0]
 800c868:	9101      	str	r1, [sp, #4]
 800c86a:	f7f7 ffc1 	bl	80047f0 <__aeabi_dmul>
 800c86e:	0006      	movs	r6, r0
 800c870:	000f      	movs	r7, r1
 800c872:	4a6e      	ldr	r2, [pc, #440]	; (800ca2c <atan+0x290>)
 800c874:	4b6e      	ldr	r3, [pc, #440]	; (800ca30 <atan+0x294>)
 800c876:	f7f7 ffbb 	bl	80047f0 <__aeabi_dmul>
 800c87a:	4a6e      	ldr	r2, [pc, #440]	; (800ca34 <atan+0x298>)
 800c87c:	4b6e      	ldr	r3, [pc, #440]	; (800ca38 <atan+0x29c>)
 800c87e:	f7f7 f879 	bl	8003974 <__aeabi_dadd>
 800c882:	0032      	movs	r2, r6
 800c884:	003b      	movs	r3, r7
 800c886:	f7f7 ffb3 	bl	80047f0 <__aeabi_dmul>
 800c88a:	4a6c      	ldr	r2, [pc, #432]	; (800ca3c <atan+0x2a0>)
 800c88c:	4b6c      	ldr	r3, [pc, #432]	; (800ca40 <atan+0x2a4>)
 800c88e:	f7f7 f871 	bl	8003974 <__aeabi_dadd>
 800c892:	0032      	movs	r2, r6
 800c894:	003b      	movs	r3, r7
 800c896:	f7f7 ffab 	bl	80047f0 <__aeabi_dmul>
 800c89a:	4a6a      	ldr	r2, [pc, #424]	; (800ca44 <atan+0x2a8>)
 800c89c:	4b6a      	ldr	r3, [pc, #424]	; (800ca48 <atan+0x2ac>)
 800c89e:	f7f7 f869 	bl	8003974 <__aeabi_dadd>
 800c8a2:	0032      	movs	r2, r6
 800c8a4:	003b      	movs	r3, r7
 800c8a6:	f7f7 ffa3 	bl	80047f0 <__aeabi_dmul>
 800c8aa:	4a68      	ldr	r2, [pc, #416]	; (800ca4c <atan+0x2b0>)
 800c8ac:	4b68      	ldr	r3, [pc, #416]	; (800ca50 <atan+0x2b4>)
 800c8ae:	f7f7 f861 	bl	8003974 <__aeabi_dadd>
 800c8b2:	0032      	movs	r2, r6
 800c8b4:	003b      	movs	r3, r7
 800c8b6:	f7f7 ff9b 	bl	80047f0 <__aeabi_dmul>
 800c8ba:	4a66      	ldr	r2, [pc, #408]	; (800ca54 <atan+0x2b8>)
 800c8bc:	4b66      	ldr	r3, [pc, #408]	; (800ca58 <atan+0x2bc>)
 800c8be:	f7f7 f859 	bl	8003974 <__aeabi_dadd>
 800c8c2:	9a00      	ldr	r2, [sp, #0]
 800c8c4:	9b01      	ldr	r3, [sp, #4]
 800c8c6:	f7f7 ff93 	bl	80047f0 <__aeabi_dmul>
 800c8ca:	4a64      	ldr	r2, [pc, #400]	; (800ca5c <atan+0x2c0>)
 800c8cc:	9000      	str	r0, [sp, #0]
 800c8ce:	9101      	str	r1, [sp, #4]
 800c8d0:	4b63      	ldr	r3, [pc, #396]	; (800ca60 <atan+0x2c4>)
 800c8d2:	0030      	movs	r0, r6
 800c8d4:	0039      	movs	r1, r7
 800c8d6:	f7f7 ff8b 	bl	80047f0 <__aeabi_dmul>
 800c8da:	4a62      	ldr	r2, [pc, #392]	; (800ca64 <atan+0x2c8>)
 800c8dc:	4b62      	ldr	r3, [pc, #392]	; (800ca68 <atan+0x2cc>)
 800c8de:	f7f8 f9f3 	bl	8004cc8 <__aeabi_dsub>
 800c8e2:	0032      	movs	r2, r6
 800c8e4:	003b      	movs	r3, r7
 800c8e6:	f7f7 ff83 	bl	80047f0 <__aeabi_dmul>
 800c8ea:	4a60      	ldr	r2, [pc, #384]	; (800ca6c <atan+0x2d0>)
 800c8ec:	4b60      	ldr	r3, [pc, #384]	; (800ca70 <atan+0x2d4>)
 800c8ee:	f7f8 f9eb 	bl	8004cc8 <__aeabi_dsub>
 800c8f2:	0032      	movs	r2, r6
 800c8f4:	003b      	movs	r3, r7
 800c8f6:	f7f7 ff7b 	bl	80047f0 <__aeabi_dmul>
 800c8fa:	4a5e      	ldr	r2, [pc, #376]	; (800ca74 <atan+0x2d8>)
 800c8fc:	4b5e      	ldr	r3, [pc, #376]	; (800ca78 <atan+0x2dc>)
 800c8fe:	f7f8 f9e3 	bl	8004cc8 <__aeabi_dsub>
 800c902:	0032      	movs	r2, r6
 800c904:	003b      	movs	r3, r7
 800c906:	f7f7 ff73 	bl	80047f0 <__aeabi_dmul>
 800c90a:	4a5c      	ldr	r2, [pc, #368]	; (800ca7c <atan+0x2e0>)
 800c90c:	4b5c      	ldr	r3, [pc, #368]	; (800ca80 <atan+0x2e4>)
 800c90e:	f7f8 f9db 	bl	8004cc8 <__aeabi_dsub>
 800c912:	0032      	movs	r2, r6
 800c914:	003b      	movs	r3, r7
 800c916:	f7f7 ff6b 	bl	80047f0 <__aeabi_dmul>
 800c91a:	0002      	movs	r2, r0
 800c91c:	000b      	movs	r3, r1
 800c91e:	9800      	ldr	r0, [sp, #0]
 800c920:	9901      	ldr	r1, [sp, #4]
 800c922:	f7f7 f827 	bl	8003974 <__aeabi_dadd>
 800c926:	002b      	movs	r3, r5
 800c928:	0022      	movs	r2, r4
 800c92a:	f7f7 ff61 	bl	80047f0 <__aeabi_dmul>
 800c92e:	9b02      	ldr	r3, [sp, #8]
 800c930:	3301      	adds	r3, #1
 800c932:	d143      	bne.n	800c9bc <atan+0x220>
 800c934:	0002      	movs	r2, r0
 800c936:	000b      	movs	r3, r1
 800c938:	0020      	movs	r0, r4
 800c93a:	0029      	movs	r1, r5
 800c93c:	f7f8 f9c4 	bl	8004cc8 <__aeabi_dsub>
 800c940:	e742      	b.n	800c7c8 <atan+0x2c>
 800c942:	2200      	movs	r2, #0
 800c944:	4b36      	ldr	r3, [pc, #216]	; (800ca20 <atan+0x284>)
 800c946:	f7f8 f9bf 	bl	8004cc8 <__aeabi_dsub>
 800c94a:	2200      	movs	r2, #0
 800c94c:	0006      	movs	r6, r0
 800c94e:	000f      	movs	r7, r1
 800c950:	0020      	movs	r0, r4
 800c952:	0029      	movs	r1, r5
 800c954:	4b32      	ldr	r3, [pc, #200]	; (800ca20 <atan+0x284>)
 800c956:	f7f7 f80d 	bl	8003974 <__aeabi_dadd>
 800c95a:	000b      	movs	r3, r1
 800c95c:	0002      	movs	r2, r0
 800c95e:	0039      	movs	r1, r7
 800c960:	0030      	movs	r0, r6
 800c962:	f7f7 fb43 	bl	8003fec <__aeabi_ddiv>
 800c966:	2301      	movs	r3, #1
 800c968:	0004      	movs	r4, r0
 800c96a:	000d      	movs	r5, r1
 800c96c:	e772      	b.n	800c854 <atan+0xb8>
 800c96e:	4b45      	ldr	r3, [pc, #276]	; (800ca84 <atan+0x2e8>)
 800c970:	429e      	cmp	r6, r3
 800c972:	dc19      	bgt.n	800c9a8 <atan+0x20c>
 800c974:	2200      	movs	r2, #0
 800c976:	4b44      	ldr	r3, [pc, #272]	; (800ca88 <atan+0x2ec>)
 800c978:	f7f8 f9a6 	bl	8004cc8 <__aeabi_dsub>
 800c97c:	2200      	movs	r2, #0
 800c97e:	0006      	movs	r6, r0
 800c980:	000f      	movs	r7, r1
 800c982:	0020      	movs	r0, r4
 800c984:	0029      	movs	r1, r5
 800c986:	4b40      	ldr	r3, [pc, #256]	; (800ca88 <atan+0x2ec>)
 800c988:	f7f7 ff32 	bl	80047f0 <__aeabi_dmul>
 800c98c:	2200      	movs	r2, #0
 800c98e:	4b24      	ldr	r3, [pc, #144]	; (800ca20 <atan+0x284>)
 800c990:	f7f6 fff0 	bl	8003974 <__aeabi_dadd>
 800c994:	000b      	movs	r3, r1
 800c996:	0002      	movs	r2, r0
 800c998:	0039      	movs	r1, r7
 800c99a:	0030      	movs	r0, r6
 800c99c:	f7f7 fb26 	bl	8003fec <__aeabi_ddiv>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	0004      	movs	r4, r0
 800c9a4:	000d      	movs	r5, r1
 800c9a6:	e755      	b.n	800c854 <atan+0xb8>
 800c9a8:	000b      	movs	r3, r1
 800c9aa:	0002      	movs	r2, r0
 800c9ac:	4937      	ldr	r1, [pc, #220]	; (800ca8c <atan+0x2f0>)
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	f7f7 fb1c 	bl	8003fec <__aeabi_ddiv>
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	0004      	movs	r4, r0
 800c9b8:	000d      	movs	r5, r1
 800c9ba:	e74b      	b.n	800c854 <atan+0xb8>
 800c9bc:	9b02      	ldr	r3, [sp, #8]
 800c9be:	4f34      	ldr	r7, [pc, #208]	; (800ca90 <atan+0x2f4>)
 800c9c0:	00de      	lsls	r6, r3, #3
 800c9c2:	4b34      	ldr	r3, [pc, #208]	; (800ca94 <atan+0x2f8>)
 800c9c4:	19bf      	adds	r7, r7, r6
 800c9c6:	199e      	adds	r6, r3, r6
 800c9c8:	6832      	ldr	r2, [r6, #0]
 800c9ca:	6873      	ldr	r3, [r6, #4]
 800c9cc:	f7f8 f97c 	bl	8004cc8 <__aeabi_dsub>
 800c9d0:	0022      	movs	r2, r4
 800c9d2:	002b      	movs	r3, r5
 800c9d4:	f7f8 f978 	bl	8004cc8 <__aeabi_dsub>
 800c9d8:	000b      	movs	r3, r1
 800c9da:	0002      	movs	r2, r0
 800c9dc:	6838      	ldr	r0, [r7, #0]
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	f7f8 f972 	bl	8004cc8 <__aeabi_dsub>
 800c9e4:	9b03      	ldr	r3, [sp, #12]
 800c9e6:	0004      	movs	r4, r0
 800c9e8:	000d      	movs	r5, r1
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	db00      	blt.n	800c9f0 <atan+0x254>
 800c9ee:	e6f4      	b.n	800c7da <atan+0x3e>
 800c9f0:	2180      	movs	r1, #128	; 0x80
 800c9f2:	0609      	lsls	r1, r1, #24
 800c9f4:	186b      	adds	r3, r5, r1
 800c9f6:	001d      	movs	r5, r3
 800c9f8:	e6ef      	b.n	800c7da <atan+0x3e>
 800c9fa:	4d27      	ldr	r5, [pc, #156]	; (800ca98 <atan+0x2fc>)
 800c9fc:	e6ed      	b.n	800c7da <atan+0x3e>
 800c9fe:	46c0      	nop			; (mov r8, r8)
 800ca00:	440fffff 	.word	0x440fffff
 800ca04:	7ff00000 	.word	0x7ff00000
 800ca08:	54442d18 	.word	0x54442d18
 800ca0c:	bff921fb 	.word	0xbff921fb
 800ca10:	3fdbffff 	.word	0x3fdbffff
 800ca14:	3e1fffff 	.word	0x3e1fffff
 800ca18:	8800759c 	.word	0x8800759c
 800ca1c:	7e37e43c 	.word	0x7e37e43c
 800ca20:	3ff00000 	.word	0x3ff00000
 800ca24:	3ff2ffff 	.word	0x3ff2ffff
 800ca28:	3fe5ffff 	.word	0x3fe5ffff
 800ca2c:	e322da11 	.word	0xe322da11
 800ca30:	3f90ad3a 	.word	0x3f90ad3a
 800ca34:	24760deb 	.word	0x24760deb
 800ca38:	3fa97b4b 	.word	0x3fa97b4b
 800ca3c:	a0d03d51 	.word	0xa0d03d51
 800ca40:	3fb10d66 	.word	0x3fb10d66
 800ca44:	c54c206e 	.word	0xc54c206e
 800ca48:	3fb745cd 	.word	0x3fb745cd
 800ca4c:	920083ff 	.word	0x920083ff
 800ca50:	3fc24924 	.word	0x3fc24924
 800ca54:	5555550d 	.word	0x5555550d
 800ca58:	3fd55555 	.word	0x3fd55555
 800ca5c:	2c6a6c2f 	.word	0x2c6a6c2f
 800ca60:	bfa2b444 	.word	0xbfa2b444
 800ca64:	52defd9a 	.word	0x52defd9a
 800ca68:	3fadde2d 	.word	0x3fadde2d
 800ca6c:	af749a6d 	.word	0xaf749a6d
 800ca70:	3fb3b0f2 	.word	0x3fb3b0f2
 800ca74:	fe231671 	.word	0xfe231671
 800ca78:	3fbc71c6 	.word	0x3fbc71c6
 800ca7c:	9998ebc4 	.word	0x9998ebc4
 800ca80:	3fc99999 	.word	0x3fc99999
 800ca84:	40037fff 	.word	0x40037fff
 800ca88:	3ff80000 	.word	0x3ff80000
 800ca8c:	bff00000 	.word	0xbff00000
 800ca90:	0800d600 	.word	0x0800d600
 800ca94:	0800d620 	.word	0x0800d620
 800ca98:	3ff921fb 	.word	0x3ff921fb

0800ca9c <fabs>:
 800ca9c:	004b      	lsls	r3, r1, #1
 800ca9e:	0859      	lsrs	r1, r3, #1
 800caa0:	4770      	bx	lr

0800caa2 <atan2>:
 800caa2:	b510      	push	{r4, lr}
 800caa4:	f000 f828 	bl	800caf8 <__ieee754_atan2>
 800caa8:	bd10      	pop	{r4, pc}

0800caaa <sqrt>:
 800caaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caac:	0004      	movs	r4, r0
 800caae:	000d      	movs	r5, r1
 800cab0:	f000 f8ce 	bl	800cc50 <__ieee754_sqrt>
 800cab4:	0022      	movs	r2, r4
 800cab6:	0006      	movs	r6, r0
 800cab8:	000f      	movs	r7, r1
 800caba:	002b      	movs	r3, r5
 800cabc:	0020      	movs	r0, r4
 800cabe:	0029      	movs	r1, r5
 800cac0:	f7f8 fc94 	bl	80053ec <__aeabi_dcmpun>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d113      	bne.n	800caf0 <sqrt+0x46>
 800cac8:	2200      	movs	r2, #0
 800caca:	2300      	movs	r3, #0
 800cacc:	0020      	movs	r0, r4
 800cace:	0029      	movs	r1, r5
 800cad0:	f7f6 f8b8 	bl	8002c44 <__aeabi_dcmplt>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d00b      	beq.n	800caf0 <sqrt+0x46>
 800cad8:	f7ff f8f6 	bl	800bcc8 <__errno>
 800cadc:	2321      	movs	r3, #33	; 0x21
 800cade:	2200      	movs	r2, #0
 800cae0:	6003      	str	r3, [r0, #0]
 800cae2:	2300      	movs	r3, #0
 800cae4:	0010      	movs	r0, r2
 800cae6:	0019      	movs	r1, r3
 800cae8:	f7f7 fa80 	bl	8003fec <__aeabi_ddiv>
 800caec:	0006      	movs	r6, r0
 800caee:	000f      	movs	r7, r1
 800caf0:	0030      	movs	r0, r6
 800caf2:	0039      	movs	r1, r7
 800caf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800caf8 <__ieee754_atan2>:
 800caf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cafa:	0016      	movs	r6, r2
 800cafc:	001d      	movs	r5, r3
 800cafe:	005a      	lsls	r2, r3, #1
 800cb00:	9300      	str	r3, [sp, #0]
 800cb02:	4273      	negs	r3, r6
 800cb04:	4333      	orrs	r3, r6
 800cb06:	4f46      	ldr	r7, [pc, #280]	; (800cc20 <__ieee754_atan2+0x128>)
 800cb08:	0852      	lsrs	r2, r2, #1
 800cb0a:	0fdb      	lsrs	r3, r3, #31
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	42bb      	cmp	r3, r7
 800cb10:	d809      	bhi.n	800cb26 <__ieee754_atan2+0x2e>
 800cb12:	4244      	negs	r4, r0
 800cb14:	004b      	lsls	r3, r1, #1
 800cb16:	4304      	orrs	r4, r0
 800cb18:	085b      	lsrs	r3, r3, #1
 800cb1a:	0fe4      	lsrs	r4, r4, #31
 800cb1c:	9100      	str	r1, [sp, #0]
 800cb1e:	9001      	str	r0, [sp, #4]
 800cb20:	431c      	orrs	r4, r3
 800cb22:	42bc      	cmp	r4, r7
 800cb24:	d905      	bls.n	800cb32 <__ieee754_atan2+0x3a>
 800cb26:	0032      	movs	r2, r6
 800cb28:	002b      	movs	r3, r5
 800cb2a:	f7f6 ff23 	bl	8003974 <__aeabi_dadd>
 800cb2e:	b003      	add	sp, #12
 800cb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb32:	4c3c      	ldr	r4, [pc, #240]	; (800cc24 <__ieee754_atan2+0x12c>)
 800cb34:	192c      	adds	r4, r5, r4
 800cb36:	4334      	orrs	r4, r6
 800cb38:	d102      	bne.n	800cb40 <__ieee754_atan2+0x48>
 800cb3a:	f7ff fe2f 	bl	800c79c <atan>
 800cb3e:	e7f6      	b.n	800cb2e <__ieee754_atan2+0x36>
 800cb40:	17ac      	asrs	r4, r5, #30
 800cb42:	46a4      	mov	ip, r4
 800cb44:	2402      	movs	r4, #2
 800cb46:	4667      	mov	r7, ip
 800cb48:	403c      	ands	r4, r7
 800cb4a:	9f00      	ldr	r7, [sp, #0]
 800cb4c:	0fff      	lsrs	r7, r7, #31
 800cb4e:	433c      	orrs	r4, r7
 800cb50:	9f01      	ldr	r7, [sp, #4]
 800cb52:	431f      	orrs	r7, r3
 800cb54:	d106      	bne.n	800cb64 <__ieee754_atan2+0x6c>
 800cb56:	2c02      	cmp	r4, #2
 800cb58:	d056      	beq.n	800cc08 <__ieee754_atan2+0x110>
 800cb5a:	2c03      	cmp	r4, #3
 800cb5c:	d1e7      	bne.n	800cb2e <__ieee754_atan2+0x36>
 800cb5e:	4832      	ldr	r0, [pc, #200]	; (800cc28 <__ieee754_atan2+0x130>)
 800cb60:	4932      	ldr	r1, [pc, #200]	; (800cc2c <__ieee754_atan2+0x134>)
 800cb62:	e7e4      	b.n	800cb2e <__ieee754_atan2+0x36>
 800cb64:	0017      	movs	r7, r2
 800cb66:	4337      	orrs	r7, r6
 800cb68:	d105      	bne.n	800cb76 <__ieee754_atan2+0x7e>
 800cb6a:	9b00      	ldr	r3, [sp, #0]
 800cb6c:	482e      	ldr	r0, [pc, #184]	; (800cc28 <__ieee754_atan2+0x130>)
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	da53      	bge.n	800cc1a <__ieee754_atan2+0x122>
 800cb72:	492f      	ldr	r1, [pc, #188]	; (800cc30 <__ieee754_atan2+0x138>)
 800cb74:	e7db      	b.n	800cb2e <__ieee754_atan2+0x36>
 800cb76:	4f2a      	ldr	r7, [pc, #168]	; (800cc20 <__ieee754_atan2+0x128>)
 800cb78:	42ba      	cmp	r2, r7
 800cb7a:	d10f      	bne.n	800cb9c <__ieee754_atan2+0xa4>
 800cb7c:	3c01      	subs	r4, #1
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d107      	bne.n	800cb92 <__ieee754_atan2+0x9a>
 800cb82:	2c02      	cmp	r4, #2
 800cb84:	d843      	bhi.n	800cc0e <__ieee754_atan2+0x116>
 800cb86:	4b2b      	ldr	r3, [pc, #172]	; (800cc34 <__ieee754_atan2+0x13c>)
 800cb88:	00e4      	lsls	r4, r4, #3
 800cb8a:	191c      	adds	r4, r3, r4
 800cb8c:	6820      	ldr	r0, [r4, #0]
 800cb8e:	6861      	ldr	r1, [r4, #4]
 800cb90:	e7cd      	b.n	800cb2e <__ieee754_atan2+0x36>
 800cb92:	2c02      	cmp	r4, #2
 800cb94:	d83e      	bhi.n	800cc14 <__ieee754_atan2+0x11c>
 800cb96:	4b28      	ldr	r3, [pc, #160]	; (800cc38 <__ieee754_atan2+0x140>)
 800cb98:	00e4      	lsls	r4, r4, #3
 800cb9a:	e7f6      	b.n	800cb8a <__ieee754_atan2+0x92>
 800cb9c:	4f20      	ldr	r7, [pc, #128]	; (800cc20 <__ieee754_atan2+0x128>)
 800cb9e:	42bb      	cmp	r3, r7
 800cba0:	d0e3      	beq.n	800cb6a <__ieee754_atan2+0x72>
 800cba2:	1a9b      	subs	r3, r3, r2
 800cba4:	151b      	asrs	r3, r3, #20
 800cba6:	2b3c      	cmp	r3, #60	; 0x3c
 800cba8:	dc18      	bgt.n	800cbdc <__ieee754_atan2+0xe4>
 800cbaa:	2d00      	cmp	r5, #0
 800cbac:	da01      	bge.n	800cbb2 <__ieee754_atan2+0xba>
 800cbae:	333c      	adds	r3, #60	; 0x3c
 800cbb0:	db17      	blt.n	800cbe2 <__ieee754_atan2+0xea>
 800cbb2:	0032      	movs	r2, r6
 800cbb4:	002b      	movs	r3, r5
 800cbb6:	f7f7 fa19 	bl	8003fec <__aeabi_ddiv>
 800cbba:	f7ff ff6f 	bl	800ca9c <fabs>
 800cbbe:	f7ff fded 	bl	800c79c <atan>
 800cbc2:	2c01      	cmp	r4, #1
 800cbc4:	d010      	beq.n	800cbe8 <__ieee754_atan2+0xf0>
 800cbc6:	2c02      	cmp	r4, #2
 800cbc8:	d013      	beq.n	800cbf2 <__ieee754_atan2+0xfa>
 800cbca:	2c00      	cmp	r4, #0
 800cbcc:	d0af      	beq.n	800cb2e <__ieee754_atan2+0x36>
 800cbce:	4a1b      	ldr	r2, [pc, #108]	; (800cc3c <__ieee754_atan2+0x144>)
 800cbd0:	4b1b      	ldr	r3, [pc, #108]	; (800cc40 <__ieee754_atan2+0x148>)
 800cbd2:	f7f8 f879 	bl	8004cc8 <__aeabi_dsub>
 800cbd6:	4a14      	ldr	r2, [pc, #80]	; (800cc28 <__ieee754_atan2+0x130>)
 800cbd8:	4b1a      	ldr	r3, [pc, #104]	; (800cc44 <__ieee754_atan2+0x14c>)
 800cbda:	e012      	b.n	800cc02 <__ieee754_atan2+0x10a>
 800cbdc:	4812      	ldr	r0, [pc, #72]	; (800cc28 <__ieee754_atan2+0x130>)
 800cbde:	491a      	ldr	r1, [pc, #104]	; (800cc48 <__ieee754_atan2+0x150>)
 800cbe0:	e7ef      	b.n	800cbc2 <__ieee754_atan2+0xca>
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	e7ec      	b.n	800cbc2 <__ieee754_atan2+0xca>
 800cbe8:	2480      	movs	r4, #128	; 0x80
 800cbea:	0624      	lsls	r4, r4, #24
 800cbec:	190b      	adds	r3, r1, r4
 800cbee:	0019      	movs	r1, r3
 800cbf0:	e79d      	b.n	800cb2e <__ieee754_atan2+0x36>
 800cbf2:	4a12      	ldr	r2, [pc, #72]	; (800cc3c <__ieee754_atan2+0x144>)
 800cbf4:	4b12      	ldr	r3, [pc, #72]	; (800cc40 <__ieee754_atan2+0x148>)
 800cbf6:	f7f8 f867 	bl	8004cc8 <__aeabi_dsub>
 800cbfa:	0002      	movs	r2, r0
 800cbfc:	000b      	movs	r3, r1
 800cbfe:	480a      	ldr	r0, [pc, #40]	; (800cc28 <__ieee754_atan2+0x130>)
 800cc00:	4910      	ldr	r1, [pc, #64]	; (800cc44 <__ieee754_atan2+0x14c>)
 800cc02:	f7f8 f861 	bl	8004cc8 <__aeabi_dsub>
 800cc06:	e792      	b.n	800cb2e <__ieee754_atan2+0x36>
 800cc08:	4807      	ldr	r0, [pc, #28]	; (800cc28 <__ieee754_atan2+0x130>)
 800cc0a:	490e      	ldr	r1, [pc, #56]	; (800cc44 <__ieee754_atan2+0x14c>)
 800cc0c:	e78f      	b.n	800cb2e <__ieee754_atan2+0x36>
 800cc0e:	4806      	ldr	r0, [pc, #24]	; (800cc28 <__ieee754_atan2+0x130>)
 800cc10:	490e      	ldr	r1, [pc, #56]	; (800cc4c <__ieee754_atan2+0x154>)
 800cc12:	e78c      	b.n	800cb2e <__ieee754_atan2+0x36>
 800cc14:	2000      	movs	r0, #0
 800cc16:	2100      	movs	r1, #0
 800cc18:	e789      	b.n	800cb2e <__ieee754_atan2+0x36>
 800cc1a:	490b      	ldr	r1, [pc, #44]	; (800cc48 <__ieee754_atan2+0x150>)
 800cc1c:	e787      	b.n	800cb2e <__ieee754_atan2+0x36>
 800cc1e:	46c0      	nop			; (mov r8, r8)
 800cc20:	7ff00000 	.word	0x7ff00000
 800cc24:	c0100000 	.word	0xc0100000
 800cc28:	54442d18 	.word	0x54442d18
 800cc2c:	c00921fb 	.word	0xc00921fb
 800cc30:	bff921fb 	.word	0xbff921fb
 800cc34:	0800d640 	.word	0x0800d640
 800cc38:	0800d658 	.word	0x0800d658
 800cc3c:	33145c07 	.word	0x33145c07
 800cc40:	3ca1a626 	.word	0x3ca1a626
 800cc44:	400921fb 	.word	0x400921fb
 800cc48:	3ff921fb 	.word	0x3ff921fb
 800cc4c:	3fe921fb 	.word	0x3fe921fb

0800cc50 <__ieee754_sqrt>:
 800cc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc52:	000b      	movs	r3, r1
 800cc54:	000c      	movs	r4, r1
 800cc56:	4956      	ldr	r1, [pc, #344]	; (800cdb0 <__ieee754_sqrt+0x160>)
 800cc58:	0005      	movs	r5, r0
 800cc5a:	0002      	movs	r2, r0
 800cc5c:	0008      	movs	r0, r1
 800cc5e:	b085      	sub	sp, #20
 800cc60:	4020      	ands	r0, r4
 800cc62:	4288      	cmp	r0, r1
 800cc64:	d10f      	bne.n	800cc86 <__ieee754_sqrt+0x36>
 800cc66:	0028      	movs	r0, r5
 800cc68:	0021      	movs	r1, r4
 800cc6a:	f7f7 fdc1 	bl	80047f0 <__aeabi_dmul>
 800cc6e:	0002      	movs	r2, r0
 800cc70:	000b      	movs	r3, r1
 800cc72:	0028      	movs	r0, r5
 800cc74:	0021      	movs	r1, r4
 800cc76:	f7f6 fe7d 	bl	8003974 <__aeabi_dadd>
 800cc7a:	0005      	movs	r5, r0
 800cc7c:	000c      	movs	r4, r1
 800cc7e:	0028      	movs	r0, r5
 800cc80:	0021      	movs	r1, r4
 800cc82:	b005      	add	sp, #20
 800cc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc86:	2c00      	cmp	r4, #0
 800cc88:	dc10      	bgt.n	800ccac <__ieee754_sqrt+0x5c>
 800cc8a:	0061      	lsls	r1, r4, #1
 800cc8c:	0849      	lsrs	r1, r1, #1
 800cc8e:	4329      	orrs	r1, r5
 800cc90:	d0f5      	beq.n	800cc7e <__ieee754_sqrt+0x2e>
 800cc92:	2100      	movs	r1, #0
 800cc94:	428c      	cmp	r4, r1
 800cc96:	d100      	bne.n	800cc9a <__ieee754_sqrt+0x4a>
 800cc98:	e080      	b.n	800cd9c <__ieee754_sqrt+0x14c>
 800cc9a:	0028      	movs	r0, r5
 800cc9c:	0021      	movs	r1, r4
 800cc9e:	f7f8 f813 	bl	8004cc8 <__aeabi_dsub>
 800cca2:	0002      	movs	r2, r0
 800cca4:	000b      	movs	r3, r1
 800cca6:	f7f7 f9a1 	bl	8003fec <__aeabi_ddiv>
 800ccaa:	e7e6      	b.n	800cc7a <__ieee754_sqrt+0x2a>
 800ccac:	1521      	asrs	r1, r4, #20
 800ccae:	d075      	beq.n	800cd9c <__ieee754_sqrt+0x14c>
 800ccb0:	4840      	ldr	r0, [pc, #256]	; (800cdb4 <__ieee754_sqrt+0x164>)
 800ccb2:	031b      	lsls	r3, r3, #12
 800ccb4:	180c      	adds	r4, r1, r0
 800ccb6:	2080      	movs	r0, #128	; 0x80
 800ccb8:	0b1b      	lsrs	r3, r3, #12
 800ccba:	0340      	lsls	r0, r0, #13
 800ccbc:	4303      	orrs	r3, r0
 800ccbe:	07c9      	lsls	r1, r1, #31
 800ccc0:	d403      	bmi.n	800ccca <__ieee754_sqrt+0x7a>
 800ccc2:	0fd1      	lsrs	r1, r2, #31
 800ccc4:	005b      	lsls	r3, r3, #1
 800ccc6:	185b      	adds	r3, r3, r1
 800ccc8:	0052      	lsls	r2, r2, #1
 800ccca:	1061      	asrs	r1, r4, #1
 800cccc:	2400      	movs	r4, #0
 800ccce:	9103      	str	r1, [sp, #12]
 800ccd0:	005b      	lsls	r3, r3, #1
 800ccd2:	0fd1      	lsrs	r1, r2, #31
 800ccd4:	185b      	adds	r3, r3, r1
 800ccd6:	2180      	movs	r1, #128	; 0x80
 800ccd8:	2516      	movs	r5, #22
 800ccda:	0020      	movs	r0, r4
 800ccdc:	0052      	lsls	r2, r2, #1
 800ccde:	0389      	lsls	r1, r1, #14
 800cce0:	1846      	adds	r6, r0, r1
 800cce2:	429e      	cmp	r6, r3
 800cce4:	dc02      	bgt.n	800ccec <__ieee754_sqrt+0x9c>
 800cce6:	1870      	adds	r0, r6, r1
 800cce8:	1b9b      	subs	r3, r3, r6
 800ccea:	1864      	adds	r4, r4, r1
 800ccec:	0fd6      	lsrs	r6, r2, #31
 800ccee:	005b      	lsls	r3, r3, #1
 800ccf0:	3d01      	subs	r5, #1
 800ccf2:	18f3      	adds	r3, r6, r3
 800ccf4:	0052      	lsls	r2, r2, #1
 800ccf6:	0849      	lsrs	r1, r1, #1
 800ccf8:	2d00      	cmp	r5, #0
 800ccfa:	d1f1      	bne.n	800cce0 <__ieee754_sqrt+0x90>
 800ccfc:	2620      	movs	r6, #32
 800ccfe:	2780      	movs	r7, #128	; 0x80
 800cd00:	0029      	movs	r1, r5
 800cd02:	9601      	str	r6, [sp, #4]
 800cd04:	063f      	lsls	r7, r7, #24
 800cd06:	197e      	adds	r6, r7, r5
 800cd08:	46b4      	mov	ip, r6
 800cd0a:	4283      	cmp	r3, r0
 800cd0c:	dc02      	bgt.n	800cd14 <__ieee754_sqrt+0xc4>
 800cd0e:	d114      	bne.n	800cd3a <__ieee754_sqrt+0xea>
 800cd10:	4296      	cmp	r6, r2
 800cd12:	d812      	bhi.n	800cd3a <__ieee754_sqrt+0xea>
 800cd14:	4665      	mov	r5, ip
 800cd16:	4666      	mov	r6, ip
 800cd18:	19ed      	adds	r5, r5, r7
 800cd1a:	9002      	str	r0, [sp, #8]
 800cd1c:	2e00      	cmp	r6, #0
 800cd1e:	da03      	bge.n	800cd28 <__ieee754_sqrt+0xd8>
 800cd20:	43ee      	mvns	r6, r5
 800cd22:	0ff6      	lsrs	r6, r6, #31
 800cd24:	1986      	adds	r6, r0, r6
 800cd26:	9602      	str	r6, [sp, #8]
 800cd28:	1a1b      	subs	r3, r3, r0
 800cd2a:	4562      	cmp	r2, ip
 800cd2c:	4180      	sbcs	r0, r0
 800cd2e:	4240      	negs	r0, r0
 800cd30:	1a1b      	subs	r3, r3, r0
 800cd32:	4660      	mov	r0, ip
 800cd34:	1a12      	subs	r2, r2, r0
 800cd36:	9802      	ldr	r0, [sp, #8]
 800cd38:	19c9      	adds	r1, r1, r7
 800cd3a:	0fd6      	lsrs	r6, r2, #31
 800cd3c:	005b      	lsls	r3, r3, #1
 800cd3e:	199b      	adds	r3, r3, r6
 800cd40:	9e01      	ldr	r6, [sp, #4]
 800cd42:	0052      	lsls	r2, r2, #1
 800cd44:	3e01      	subs	r6, #1
 800cd46:	087f      	lsrs	r7, r7, #1
 800cd48:	9601      	str	r6, [sp, #4]
 800cd4a:	2e00      	cmp	r6, #0
 800cd4c:	d1db      	bne.n	800cd06 <__ieee754_sqrt+0xb6>
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	d003      	beq.n	800cd5a <__ieee754_sqrt+0x10a>
 800cd52:	1c4b      	adds	r3, r1, #1
 800cd54:	d127      	bne.n	800cda6 <__ieee754_sqrt+0x156>
 800cd56:	0031      	movs	r1, r6
 800cd58:	3401      	adds	r4, #1
 800cd5a:	4b17      	ldr	r3, [pc, #92]	; (800cdb8 <__ieee754_sqrt+0x168>)
 800cd5c:	1060      	asrs	r0, r4, #1
 800cd5e:	18c0      	adds	r0, r0, r3
 800cd60:	0849      	lsrs	r1, r1, #1
 800cd62:	07e3      	lsls	r3, r4, #31
 800cd64:	d502      	bpl.n	800cd6c <__ieee754_sqrt+0x11c>
 800cd66:	2380      	movs	r3, #128	; 0x80
 800cd68:	061b      	lsls	r3, r3, #24
 800cd6a:	4319      	orrs	r1, r3
 800cd6c:	9b03      	ldr	r3, [sp, #12]
 800cd6e:	000d      	movs	r5, r1
 800cd70:	051c      	lsls	r4, r3, #20
 800cd72:	1823      	adds	r3, r4, r0
 800cd74:	001c      	movs	r4, r3
 800cd76:	e782      	b.n	800cc7e <__ieee754_sqrt+0x2e>
 800cd78:	0ad3      	lsrs	r3, r2, #11
 800cd7a:	3815      	subs	r0, #21
 800cd7c:	0552      	lsls	r2, r2, #21
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d0fa      	beq.n	800cd78 <__ieee754_sqrt+0x128>
 800cd82:	2480      	movs	r4, #128	; 0x80
 800cd84:	0364      	lsls	r4, r4, #13
 800cd86:	4223      	tst	r3, r4
 800cd88:	d00a      	beq.n	800cda0 <__ieee754_sqrt+0x150>
 800cd8a:	2420      	movs	r4, #32
 800cd8c:	0016      	movs	r6, r2
 800cd8e:	1a64      	subs	r4, r4, r1
 800cd90:	40e6      	lsrs	r6, r4
 800cd92:	1e4d      	subs	r5, r1, #1
 800cd94:	408a      	lsls	r2, r1
 800cd96:	4333      	orrs	r3, r6
 800cd98:	1b41      	subs	r1, r0, r5
 800cd9a:	e789      	b.n	800ccb0 <__ieee754_sqrt+0x60>
 800cd9c:	2000      	movs	r0, #0
 800cd9e:	e7ee      	b.n	800cd7e <__ieee754_sqrt+0x12e>
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	3101      	adds	r1, #1
 800cda4:	e7ef      	b.n	800cd86 <__ieee754_sqrt+0x136>
 800cda6:	2301      	movs	r3, #1
 800cda8:	3101      	adds	r1, #1
 800cdaa:	4399      	bics	r1, r3
 800cdac:	e7d5      	b.n	800cd5a <__ieee754_sqrt+0x10a>
 800cdae:	46c0      	nop			; (mov r8, r8)
 800cdb0:	7ff00000 	.word	0x7ff00000
 800cdb4:	fffffc01 	.word	0xfffffc01
 800cdb8:	3fe00000 	.word	0x3fe00000

0800cdbc <_init>:
 800cdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdbe:	46c0      	nop			; (mov r8, r8)
 800cdc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdc2:	bc08      	pop	{r3}
 800cdc4:	469e      	mov	lr, r3
 800cdc6:	4770      	bx	lr

0800cdc8 <_fini>:
 800cdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdca:	46c0      	nop			; (mov r8, r8)
 800cdcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdce:	bc08      	pop	{r3}
 800cdd0:	469e      	mov	lr, r3
 800cdd2:	4770      	bx	lr
