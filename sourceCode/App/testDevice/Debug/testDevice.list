
testDevice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aa4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b60  08000b68  00010b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b60  08000b60  00010b68  2**0
                  CONTENTS
  4 .ARM          00000000  08000b60  08000b60  00010b68  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b60  08000b68  00010b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b60  08000b60  00010b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b64  08000b64  00010b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000000  08000b68  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000b68  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010b68  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bd1  00000000  00000000  00010b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000899  00000000  00000000  00012761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00013000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000138  00000000  00000000  00013190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c0e7  00000000  00000000  000132c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f71  00000000  00000000  0001f3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004910d  00000000  00000000  00021320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006a42d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000043c  00000000  00000000  0006a480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000b48 	.word	0x08000b48

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000b48 	.word	0x08000b48

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <dma_init>:

#include "drv_dma.h"
#include "stm32g031xx.h"


void dma_init(DMA_Channel_TypeDef *DMA_channelx){
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]

//	DMAMUX1_RequestGenerator1->RGCR = 0;
//	DMAMUX1_RequestGenStatus->RGCFR =1;
	//Enable clock
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <dma_init+0x80>)
 8000226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000228:	4b1c      	ldr	r3, [pc, #112]	; (800029c <dma_init+0x80>)
 800022a:	2101      	movs	r1, #1
 800022c:	430a      	orrs	r2, r1
 800022e:	639a      	str	r2, [r3, #56]	; 0x38
	//enable interrupt
	DMA_channelx->CCR |= (DMA_CCR_TCIE |DMA_CCR_TEIE);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	220a      	movs	r2, #10
 8000236:	431a      	orrs	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	601a      	str	r2, [r3, #0]
	//set data direction
	//read form peripheral
	DMA_channelx->CCR &= ~DMA_CCR_DIR;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2210      	movs	r2, #16
 8000242:	4393      	bics	r3, r2
 8000244:	001a      	movs	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	601a      	str	r2, [r3, #0]
	//enable CIRC mode
	DMA_channelx->CCR |= DMA_CCR_CIRC;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	2220      	movs	r2, #32
 8000250:	431a      	orrs	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	601a      	str	r2, [r3, #0]
	//enable memory increment
	DMA_channelx->CCR |= DMA_CCR_MINC;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	431a      	orrs	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
	//set peripheral data size //8bit
	DMA_channelx->CCR &= ~DMA_CCR_PSIZE;	//00
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <dma_init+0x84>)
 8000268:	401a      	ands	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
	//set peripheral memmory size //8bit
	DMA_channelx->CCR &= ~DMA_CCR_MSIZE;	//00
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <dma_init+0x88>)
 8000274:	401a      	ands	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]
	//Set the Priority Level LOW
	DMA_channelx->CCR &= ~DMA_CCR_PL; // 00
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <dma_init+0x8c>)
 8000280:	401a      	ands	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	601a      	str	r2, [r3, #0]

	//DMAMUX1_Channel0->CCR &= ~DMAMUX_CxCR_DMAREQ_ID;
	DMAMUX1_Channel0->CCR |= 0x32;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <dma_init+0x90>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <dma_init+0x90>)
 800028c:	2132      	movs	r1, #50	; 0x32
 800028e:	430a      	orrs	r2, r1
 8000290:	601a      	str	r2, [r3, #0]

}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b002      	add	sp, #8
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	40021000 	.word	0x40021000
 80002a0:	fffffcff 	.word	0xfffffcff
 80002a4:	fffff3ff 	.word	0xfffff3ff
 80002a8:	ffffcfff 	.word	0xffffcfff
 80002ac:	40020800 	.word	0x40020800

080002b0 <dma_config>:
void dma_config(DMA_Channel_TypeDef *DMA_channelx,uint32_t srcAdd, uint32_t destAdd, uint16_t datasize){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
 80002bc:	001a      	movs	r2, r3
 80002be:	1cbb      	adds	r3, r7, #2
 80002c0:	801a      	strh	r2, [r3, #0]
	//Set the data size in CNDTR Register
	DMA_channelx->CNDTR = datasize;
 80002c2:	1cbb      	adds	r3, r7, #2
 80002c4:	881a      	ldrh	r2, [r3, #0]
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	605a      	str	r2, [r3, #4]
	//Set the  peripheral address in PAR Register
	DMA_channelx->CPAR = srcAdd;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	68ba      	ldr	r2, [r7, #8]
 80002ce:	609a      	str	r2, [r3, #8]
	//Set the  Memory address in MAR Register
	DMA_channelx->CMAR = destAdd;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	60da      	str	r2, [r3, #12]
	//enable DMA
	DMA_channelx->CCR |= DMA_CCR_EN;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2201      	movs	r2, #1
 80002dc:	431a      	orrs	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	601a      	str	r2, [r3, #0]
}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	b004      	add	sp, #16
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <DMA_Channel1_IRQHandler>:

void DMA_Channel1_IRQHandler(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	//half tran
	if(((DMA1->ISR)&DMA_ISR_HTIF1) == DMA_ISR_HTIF1){
 80002f0:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <DMA_Channel1_IRQHandler+0x3c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2204      	movs	r2, #4
 80002f6:	4013      	ands	r3, r2
 80002f8:	2b04      	cmp	r3, #4
 80002fa:	d105      	bne.n	8000308 <DMA_Channel1_IRQHandler+0x1c>
		DMA1->IFCR |= DMA_IFCR_CHTIF1;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <DMA_Channel1_IRQHandler+0x3c>)
 80002fe:	685a      	ldr	r2, [r3, #4]
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <DMA_Channel1_IRQHandler+0x3c>)
 8000302:	2104      	movs	r1, #4
 8000304:	430a      	orrs	r2, r1
 8000306:	605a      	str	r2, [r3, #4]
	}
	//full
	if(((DMA1->ISR)&DMA_ISR_TCIF1)== DMA_ISR_TCIF1){
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <DMA_Channel1_IRQHandler+0x3c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2202      	movs	r2, #2
 800030e:	4013      	ands	r3, r2
 8000310:	2b02      	cmp	r3, #2
 8000312:	d105      	bne.n	8000320 <DMA_Channel1_IRQHandler+0x34>
		DMA1->IFCR |= DMA_IFCR_CGIF1;
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <DMA_Channel1_IRQHandler+0x3c>)
 8000316:	685a      	ldr	r2, [r3, #4]
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <DMA_Channel1_IRQHandler+0x3c>)
 800031a:	2101      	movs	r1, #1
 800031c:	430a      	orrs	r2, r1
 800031e:	605a      	str	r2, [r3, #4]
	}
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	40020000 	.word	0x40020000

0800032c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	0002      	movs	r2, r0
 8000334:	1dfb      	adds	r3, r7, #7
 8000336:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b7f      	cmp	r3, #127	; 0x7f
 800033e:	d809      	bhi.n	8000354 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000340:	1dfb      	adds	r3, r7, #7
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	001a      	movs	r2, r3
 8000346:	231f      	movs	r3, #31
 8000348:	401a      	ands	r2, r3
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <__NVIC_EnableIRQ+0x30>)
 800034c:	2101      	movs	r1, #1
 800034e:	4091      	lsls	r1, r2
 8000350:	000a      	movs	r2, r1
 8000352:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b002      	add	sp, #8
 800035a:	bd80      	pop	{r7, pc}
 800035c:	e000e100 	.word	0xe000e100

08000360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	0002      	movs	r2, r0
 8000368:	6039      	str	r1, [r7, #0]
 800036a:	1dfb      	adds	r3, r7, #7
 800036c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800036e:	1dfb      	adds	r3, r7, #7
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b7f      	cmp	r3, #127	; 0x7f
 8000374:	d828      	bhi.n	80003c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000376:	4a2f      	ldr	r2, [pc, #188]	; (8000434 <__NVIC_SetPriority+0xd4>)
 8000378:	1dfb      	adds	r3, r7, #7
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	b25b      	sxtb	r3, r3
 800037e:	089b      	lsrs	r3, r3, #2
 8000380:	33c0      	adds	r3, #192	; 0xc0
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	589b      	ldr	r3, [r3, r2]
 8000386:	1dfa      	adds	r2, r7, #7
 8000388:	7812      	ldrb	r2, [r2, #0]
 800038a:	0011      	movs	r1, r2
 800038c:	2203      	movs	r2, #3
 800038e:	400a      	ands	r2, r1
 8000390:	00d2      	lsls	r2, r2, #3
 8000392:	21ff      	movs	r1, #255	; 0xff
 8000394:	4091      	lsls	r1, r2
 8000396:	000a      	movs	r2, r1
 8000398:	43d2      	mvns	r2, r2
 800039a:	401a      	ands	r2, r3
 800039c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	019b      	lsls	r3, r3, #6
 80003a2:	22ff      	movs	r2, #255	; 0xff
 80003a4:	401a      	ands	r2, r3
 80003a6:	1dfb      	adds	r3, r7, #7
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	0018      	movs	r0, r3
 80003ac:	2303      	movs	r3, #3
 80003ae:	4003      	ands	r3, r0
 80003b0:	00db      	lsls	r3, r3, #3
 80003b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003b4:	481f      	ldr	r0, [pc, #124]	; (8000434 <__NVIC_SetPriority+0xd4>)
 80003b6:	1dfb      	adds	r3, r7, #7
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	b25b      	sxtb	r3, r3
 80003bc:	089b      	lsrs	r3, r3, #2
 80003be:	430a      	orrs	r2, r1
 80003c0:	33c0      	adds	r3, #192	; 0xc0
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003c6:	e031      	b.n	800042c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c8:	4a1b      	ldr	r2, [pc, #108]	; (8000438 <__NVIC_SetPriority+0xd8>)
 80003ca:	1dfb      	adds	r3, r7, #7
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	0019      	movs	r1, r3
 80003d0:	230f      	movs	r3, #15
 80003d2:	400b      	ands	r3, r1
 80003d4:	3b08      	subs	r3, #8
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	3306      	adds	r3, #6
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	18d3      	adds	r3, r2, r3
 80003de:	3304      	adds	r3, #4
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	1dfa      	adds	r2, r7, #7
 80003e4:	7812      	ldrb	r2, [r2, #0]
 80003e6:	0011      	movs	r1, r2
 80003e8:	2203      	movs	r2, #3
 80003ea:	400a      	ands	r2, r1
 80003ec:	00d2      	lsls	r2, r2, #3
 80003ee:	21ff      	movs	r1, #255	; 0xff
 80003f0:	4091      	lsls	r1, r2
 80003f2:	000a      	movs	r2, r1
 80003f4:	43d2      	mvns	r2, r2
 80003f6:	401a      	ands	r2, r3
 80003f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	019b      	lsls	r3, r3, #6
 80003fe:	22ff      	movs	r2, #255	; 0xff
 8000400:	401a      	ands	r2, r3
 8000402:	1dfb      	adds	r3, r7, #7
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	0018      	movs	r0, r3
 8000408:	2303      	movs	r3, #3
 800040a:	4003      	ands	r3, r0
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000410:	4809      	ldr	r0, [pc, #36]	; (8000438 <__NVIC_SetPriority+0xd8>)
 8000412:	1dfb      	adds	r3, r7, #7
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	001c      	movs	r4, r3
 8000418:	230f      	movs	r3, #15
 800041a:	4023      	ands	r3, r4
 800041c:	3b08      	subs	r3, #8
 800041e:	089b      	lsrs	r3, r3, #2
 8000420:	430a      	orrs	r2, r1
 8000422:	3306      	adds	r3, #6
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	18c3      	adds	r3, r0, r3
 8000428:	3304      	adds	r3, #4
 800042a:	601a      	str	r2, [r3, #0]
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b003      	add	sp, #12
 8000432:	bd90      	pop	{r4, r7, pc}
 8000434:	e000e100 	.word	0xe000e100
 8000438:	e000ed00 	.word	0xe000ed00

0800043c <usart_x0_init>:


static void COMX0_pin_init(void) ;
static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) ;

void usart_x0_init(uint32_t baudrate) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]

	COMX0_pin_init();
 8000444:	f000 f838 	bl	80004b8 <COMX0_pin_init>
	uartx_init(COMX0, baudrate);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <usart_x0_init+0x48>)
 800044c:	0019      	movs	r1, r3
 800044e:	0010      	movs	r0, r2
 8000450:	f000 f8c8 	bl	80005e4 <uartx_init>
#if USART_IDLE_INTERRUPT
	COMX0->CR1 |= USART_CR1_IDLEIE;
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <usart_x0_init+0x48>)
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <usart_x0_init+0x48>)
 800045a:	2110      	movs	r1, #16
 800045c:	430a      	orrs	r2, r1
 800045e:	601a      	str	r2, [r3, #0]
#endif
#if USART_RX_INTERRUPT
	COMX0->CR1 |= USART_CR1_RXNEIE_RXFNEIE; //enable RX interrupt
#endif
#if USART_RX_DMA
	COMX0->CR3 |= USART_CR3_DMAR;
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <usart_x0_init+0x48>)
 8000462:	689a      	ldr	r2, [r3, #8]
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <usart_x0_init+0x48>)
 8000466:	2140      	movs	r1, #64	; 0x40
 8000468:	430a      	orrs	r2, r1
 800046a:	609a      	str	r2, [r3, #8]
#endif
	NVIC_SetPriority(COMX0_IRQn, 1);
 800046c:	2101      	movs	r1, #1
 800046e:	201b      	movs	r0, #27
 8000470:	f7ff ff76 	bl	8000360 <__NVIC_SetPriority>
	NVIC_EnableIRQ(COMX0_IRQn);
 8000474:	201b      	movs	r0, #27
 8000476:	f7ff ff59 	bl	800032c <__NVIC_EnableIRQ>
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	40013800 	.word	0x40013800

08000488 <usart_x0_send>:

void usart_x0_send(uint8_t c){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	0002      	movs	r2, r0
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	701a      	strb	r2, [r3, #0]
	while ((COMX0->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <usart_x0_send+0x2c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	2280      	movs	r2, #128	; 0x80
 800049c:	4013      	ands	r3, r2
 800049e:	2b80      	cmp	r3, #128	; 0x80
 80004a0:	d1f9      	bne.n	8000496 <usart_x0_send+0xe>
	COMX0->TDR = c;
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <usart_x0_send+0x2c>)
 80004a4:	1dfa      	adds	r2, r7, #7
 80004a6:	7812      	ldrb	r2, [r2, #0]
 80004a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b002      	add	sp, #8
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	40013800 	.word	0x40013800

080004b8 <COMX0_pin_init>:


static void COMX0_pin_init(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
	RCC->IOPENR |= (COMX0_TX_GPIO_CLK | COMX0_TX_GPIO_CLK);
 80004c2:	4b42      	ldr	r3, [pc, #264]	; (80005cc <COMX0_pin_init+0x114>)
 80004c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004c6:	4b41      	ldr	r3, [pc, #260]	; (80005cc <COMX0_pin_init+0x114>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	430a      	orrs	r2, r1
 80004cc:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->COMX0_APB_CLK |= COMX0_CLK;
 80004ce:	4b3f      	ldr	r3, [pc, #252]	; (80005cc <COMX0_pin_init+0x114>)
 80004d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004d2:	4b3e      	ldr	r3, [pc, #248]	; (80005cc <COMX0_pin_init+0x114>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	01c9      	lsls	r1, r1, #7
 80004d8:	430a      	orrs	r2, r1
 80004da:	641a      	str	r2, [r3, #64]	; 0x40

	COMX0_RX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_RX_PIN * 2));
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	23a0      	movs	r3, #160	; 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	493a      	ldr	r1, [pc, #232]	; (80005d0 <COMX0_pin_init+0x118>)
 80004e8:	400a      	ands	r2, r1
 80004ea:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->MODER |= (0x02 << (COMX0_RX_PIN * 2)); //mode AF
 80004ec:	23a0      	movs	r3, #160	; 0xa0
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	23a0      	movs	r3, #160	; 0xa0
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	0389      	lsls	r1, r1, #14
 80004fa:	430a      	orrs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->ODR &= ~(0x01 << COMX0_RX_PIN); //push pull
 80004fe:	23a0      	movs	r3, #160	; 0xa0
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	23a0      	movs	r3, #160	; 0xa0
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	4932      	ldr	r1, [pc, #200]	; (80005d4 <COMX0_pin_init+0x11c>)
 800050a:	400a      	ands	r2, r1
 800050c:	615a      	str	r2, [r3, #20]
	COMX0_RX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_RX_PIN * 2)); //no pull
 800050e:	23a0      	movs	r3, #160	; 0xa0
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	68da      	ldr	r2, [r3, #12]
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	492d      	ldr	r1, [pc, #180]	; (80005d0 <COMX0_pin_init+0x118>)
 800051a:	400a      	ands	r2, r1
 800051c:	60da      	str	r2, [r3, #12]
	COMX0_RX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_RX_PIN); ////speed low
 800051e:	23a0      	movs	r3, #160	; 0xa0
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	689a      	ldr	r2, [r3, #8]
 8000524:	23a0      	movs	r3, #160	; 0xa0
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	492a      	ldr	r1, [pc, #168]	; (80005d4 <COMX0_pin_init+0x11c>)
 800052a:	400a      	ands	r2, r1
 800052c:	609a      	str	r2, [r3, #8]

	COMX0_TX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_TX_PIN * 2));
 800052e:	23a0      	movs	r3, #160	; 0xa0
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	23a0      	movs	r3, #160	; 0xa0
 8000536:	05db      	lsls	r3, r3, #23
 8000538:	4927      	ldr	r1, [pc, #156]	; (80005d8 <COMX0_pin_init+0x120>)
 800053a:	400a      	ands	r2, r1
 800053c:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->MODER |= (0x02 << (COMX0_TX_PIN * 2)); //mode AF
 800053e:	23a0      	movs	r3, #160	; 0xa0
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	23a0      	movs	r3, #160	; 0xa0
 8000546:	05db      	lsls	r3, r3, #23
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	0309      	lsls	r1, r1, #12
 800054c:	430a      	orrs	r2, r1
 800054e:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->ODR &= ~(0x01 << COMX0_TX_PIN); //push pull
 8000550:	23a0      	movs	r3, #160	; 0xa0
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	695a      	ldr	r2, [r3, #20]
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	4920      	ldr	r1, [pc, #128]	; (80005dc <COMX0_pin_init+0x124>)
 800055c:	400a      	ands	r2, r1
 800055e:	615a      	str	r2, [r3, #20]
	COMX0_TX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_TX_PIN * 2)); //no pull
 8000560:	23a0      	movs	r3, #160	; 0xa0
 8000562:	05db      	lsls	r3, r3, #23
 8000564:	68da      	ldr	r2, [r3, #12]
 8000566:	23a0      	movs	r3, #160	; 0xa0
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	491b      	ldr	r1, [pc, #108]	; (80005d8 <COMX0_pin_init+0x120>)
 800056c:	400a      	ands	r2, r1
 800056e:	60da      	str	r2, [r3, #12]
	COMX0_TX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_TX_PIN); ////speed low
 8000570:	23a0      	movs	r3, #160	; 0xa0
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	689a      	ldr	r2, [r3, #8]
 8000576:	23a0      	movs	r3, #160	; 0xa0
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	4918      	ldr	r1, [pc, #96]	; (80005dc <COMX0_pin_init+0x124>)
 800057c:	400a      	ands	r2, r1
 800057e:	609a      	str	r2, [r3, #8]

	temp = COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3u];
 8000580:	23a0      	movs	r3, #160	; 0xa0
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000586:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_RX_PIN & 0x07u) * 4ul));
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a15      	ldr	r2, [pc, #84]	; (80005e0 <COMX0_pin_init+0x128>)
 800058c:	4013      	ands	r3, r2
 800058e:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_RX_PIN_AF << ((COMX0_RX_PIN & 0x07u) * 4ul));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	0052      	lsls	r2, r2, #1
 8000596:	4313      	orrs	r3, r2
 8000598:	607b      	str	r3, [r7, #4]
	COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3ul] = temp;
 800059a:	23a0      	movs	r3, #160	; 0xa0
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	625a      	str	r2, [r3, #36]	; 0x24

	temp = COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3u];
 80005a2:	23a0      	movs	r3, #160	; 0xa0
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a8:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_TX_PIN & 0x07u) * 4ul));
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	22f0      	movs	r2, #240	; 0xf0
 80005ae:	4393      	bics	r3, r2
 80005b0:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_TX_PIN_AF << ((COMX0_TX_PIN & 0x07u) * 4ul));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2210      	movs	r2, #16
 80005b6:	4313      	orrs	r3, r2
 80005b8:	607b      	str	r3, [r7, #4]
	COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3ul] = temp;
 80005ba:	23a0      	movs	r3, #160	; 0xa0
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	40021000 	.word	0x40021000
 80005d0:	ffcfffff 	.word	0xffcfffff
 80005d4:	fffffbff 	.word	0xfffffbff
 80005d8:	fff3ffff 	.word	0xfff3ffff
 80005dc:	fffffdff 	.word	0xfffffdff
 80005e0:	fffff0ff 	.word	0xfffff0ff

080005e4 <uartx_init>:



static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	uint32_t BRR_value = SYS_CLOCK / baudrate;
 80005ee:	6839      	ldr	r1, [r7, #0]
 80005f0:	4819      	ldr	r0, [pc, #100]	; (8000658 <uartx_init+0x74>)
 80005f2:	f7ff fd87 	bl	8000104 <__udivsi3>
 80005f6:	0003      	movs	r3, r0
 80005f8:	60fb      	str	r3, [r7, #12]

	UARTx->CR1 = 0;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
	// Word length 8n1
	UARTx->CR1 &= ~USART_CR1_M1;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a15      	ldr	r2, [pc, #84]	; (800065c <uartx_init+0x78>)
 8000606:	401a      	ands	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	601a      	str	r2, [r3, #0]
	//Parity disable
	UARTx->CR1 &= ~USART_CR1_PCE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a13      	ldr	r2, [pc, #76]	; (8000660 <uartx_init+0x7c>)
 8000612:	401a      	ands	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	601a      	str	r2, [r3, #0]
	//mode Tx_Rx
	UARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	220c      	movs	r2, #12
 800061e:	431a      	orrs	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	601a      	str	r2, [r3, #0]
	//OverSampling 16bit
	UARTx->CR1 &= ~USART_CR1_OVER8;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <uartx_init+0x80>)
 800062a:	401a      	ands	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	601a      	str	r2, [r3, #0]
	//ClockPrescaler no div
	UARTx->PRESC &= USART_PRESC_PRESCALER;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000634:	220f      	movs	r2, #15
 8000636:	401a      	ands	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
	//set baudrate 115200
	UARTx->BRR = BRR_value;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	60da      	str	r2, [r3, #12]
	//rx interupt enable
	//UARTx->CR1 |= USART_CR1_RXNEIE_RXFNEIE;
	UARTx->CR1 |= USART_CR1_UE;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2201      	movs	r2, #1
 8000648:	431a      	orrs	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	601a      	str	r2, [r3, #0]
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b004      	add	sp, #16
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	03d09000 	.word	0x03d09000
 800065c:	efffffff 	.word	0xefffffff
 8000660:	fffffbff 	.word	0xfffffbff
 8000664:	ffff7fff 	.word	0xffff7fff

08000668 <USART1_IRQHandler>:


void USART1_IRQHandler(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	if (USART1->ISR & USART_ISR_RXNE_RXFNE) {
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <USART1_IRQHandler+0x44>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	2220      	movs	r2, #32
 8000674:	4013      	ands	r3, r2
 8000676:	d009      	beq.n	800068c <USART1_IRQHandler+0x24>
		USART1->ICR |= USART_RQR_RXFRQ;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <USART1_IRQHandler+0x44>)
 800067a:	6a1a      	ldr	r2, [r3, #32]
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <USART1_IRQHandler+0x44>)
 800067e:	2108      	movs	r1, #8
 8000680:	430a      	orrs	r2, r1
 8000682:	621a      	str	r2, [r3, #32]
		uint8_t cChar = USART1->RDR;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <USART1_IRQHandler+0x44>)
 8000686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	701a      	strb	r2, [r3, #0]
	}
	if (USART1->ISR & USART_ISR_IDLE){
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <USART1_IRQHandler+0x44>)
 800068e:	69db      	ldr	r3, [r3, #28]
 8000690:	2210      	movs	r2, #16
 8000692:	4013      	ands	r3, r2
 8000694:	d005      	beq.n	80006a2 <USART1_IRQHandler+0x3a>
		USART1->ICR |= USART_ICR_IDLECF;
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <USART1_IRQHandler+0x44>)
 8000698:	6a1a      	ldr	r2, [r3, #32]
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <USART1_IRQHandler+0x44>)
 800069c:	2110      	movs	r1, #16
 800069e:	430a      	orrs	r2, r1
 80006a0:	621a      	str	r2, [r3, #32]
	}
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40013800 	.word	0x40013800

080006b0 <__NVIC_EnableIRQ>:
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	0002      	movs	r2, r0
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b7f      	cmp	r3, #127	; 0x7f
 80006c2:	d809      	bhi.n	80006d8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	001a      	movs	r2, r3
 80006ca:	231f      	movs	r3, #31
 80006cc:	401a      	ands	r2, r3
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <__NVIC_EnableIRQ+0x30>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	4091      	lsls	r1, r2
 80006d4:	000a      	movs	r2, r1
 80006d6:	601a      	str	r2, [r3, #0]
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <__NVIC_SetPriority>:
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	0002      	movs	r2, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b7f      	cmp	r3, #127	; 0x7f
 80006f8:	d828      	bhi.n	800074c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006fa:	4a2f      	ldr	r2, [pc, #188]	; (80007b8 <__NVIC_SetPriority+0xd4>)
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	089b      	lsrs	r3, r3, #2
 8000704:	33c0      	adds	r3, #192	; 0xc0
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	589b      	ldr	r3, [r3, r2]
 800070a:	1dfa      	adds	r2, r7, #7
 800070c:	7812      	ldrb	r2, [r2, #0]
 800070e:	0011      	movs	r1, r2
 8000710:	2203      	movs	r2, #3
 8000712:	400a      	ands	r2, r1
 8000714:	00d2      	lsls	r2, r2, #3
 8000716:	21ff      	movs	r1, #255	; 0xff
 8000718:	4091      	lsls	r1, r2
 800071a:	000a      	movs	r2, r1
 800071c:	43d2      	mvns	r2, r2
 800071e:	401a      	ands	r2, r3
 8000720:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	019b      	lsls	r3, r3, #6
 8000726:	22ff      	movs	r2, #255	; 0xff
 8000728:	401a      	ands	r2, r3
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	0018      	movs	r0, r3
 8000730:	2303      	movs	r3, #3
 8000732:	4003      	ands	r3, r0
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000738:	481f      	ldr	r0, [pc, #124]	; (80007b8 <__NVIC_SetPriority+0xd4>)
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b25b      	sxtb	r3, r3
 8000740:	089b      	lsrs	r3, r3, #2
 8000742:	430a      	orrs	r2, r1
 8000744:	33c0      	adds	r3, #192	; 0xc0
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	501a      	str	r2, [r3, r0]
}
 800074a:	e031      	b.n	80007b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074c:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <__NVIC_SetPriority+0xd8>)
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	0019      	movs	r1, r3
 8000754:	230f      	movs	r3, #15
 8000756:	400b      	ands	r3, r1
 8000758:	3b08      	subs	r3, #8
 800075a:	089b      	lsrs	r3, r3, #2
 800075c:	3306      	adds	r3, #6
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	18d3      	adds	r3, r2, r3
 8000762:	3304      	adds	r3, #4
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1dfa      	adds	r2, r7, #7
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	0011      	movs	r1, r2
 800076c:	2203      	movs	r2, #3
 800076e:	400a      	ands	r2, r1
 8000770:	00d2      	lsls	r2, r2, #3
 8000772:	21ff      	movs	r1, #255	; 0xff
 8000774:	4091      	lsls	r1, r2
 8000776:	000a      	movs	r2, r1
 8000778:	43d2      	mvns	r2, r2
 800077a:	401a      	ands	r2, r3
 800077c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	019b      	lsls	r3, r3, #6
 8000782:	22ff      	movs	r2, #255	; 0xff
 8000784:	401a      	ands	r2, r3
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	0018      	movs	r0, r3
 800078c:	2303      	movs	r3, #3
 800078e:	4003      	ands	r3, r0
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <__NVIC_SetPriority+0xd8>)
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	001c      	movs	r4, r3
 800079c:	230f      	movs	r3, #15
 800079e:	4023      	ands	r3, r4
 80007a0:	3b08      	subs	r3, #8
 80007a2:	089b      	lsrs	r3, r3, #2
 80007a4:	430a      	orrs	r2, r1
 80007a6:	3306      	adds	r3, #6
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	18c3      	adds	r3, r0, r3
 80007ac:	3304      	adds	r3, #4
 80007ae:	601a      	str	r2, [r3, #0]
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b003      	add	sp, #12
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	e000e100 	.word	0xe000e100
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <main>:
uint8_t com_x0_rx_buf[COM_X0_RX_SIZE];

uint32_t lastPushData = 0;
static void setup(void);

int main(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	setup();
 80007c4:	f000 f802 	bl	80007cc <setup>
	while (1) {
 80007c8:	e7fe      	b.n	80007c8 <main+0x8>
	...

080007cc <setup>:
		}*/
	}
	return 0;
}

static void setup(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	usart_x0_init(115200);
 80007d0:	23e1      	movs	r3, #225	; 0xe1
 80007d2:	025b      	lsls	r3, r3, #9
 80007d4:	0018      	movs	r0, r3
 80007d6:	f7ff fe31 	bl	800043c <usart_x0_init>
	xdev_out(usart_x0_send);
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <setup+0x3c>)
 80007dc:	4a0b      	ldr	r2, [pc, #44]	; (800080c <setup+0x40>)
 80007de:	601a      	str	r2, [r3, #0]
	dma_init(DMA1_Channel1);
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <setup+0x44>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff fd1a 	bl	800021c <dma_init>
	dma_config(DMA1_Channel1,(uint32_t) &USART1->RDR, (uint32_t)com_x0_rx_buf, COM_X0_RX_SIZE);
 80007e8:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <setup+0x48>)
 80007ea:	490b      	ldr	r1, [pc, #44]	; (8000818 <setup+0x4c>)
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <setup+0x44>)
 80007ee:	2314      	movs	r3, #20
 80007f0:	f7ff fd5e 	bl	80002b0 <dma_config>
	NVIC_SetPriority (DMA1_Channel1_IRQn, 0);
 80007f4:	2100      	movs	r1, #0
 80007f6:	2009      	movs	r0, #9
 80007f8:	f7ff ff74 	bl	80006e4 <__NVIC_SetPriority>
	NVIC_EnableIRQ (DMA1_Channel1_IRQn);
 80007fc:	2009      	movs	r0, #9
 80007fe:	f7ff ff57 	bl	80006b0 <__NVIC_EnableIRQ>
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000003c 	.word	0x2000003c
 800080c:	08000489 	.word	0x08000489
 8000810:	40020008 	.word	0x40020008
 8000814:	20000028 	.word	0x20000028
 8000818:	40013824 	.word	0x40013824

0800081c <SysTick_Handler>:

void SysTick_Handler(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	ulMiliCount++;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <SysTick_Handler+0x3c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <SysTick_Handler+0x3c>)
 8000828:	601a      	str	r2, [r3, #0]
	ulTickCount++;
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <SysTick_Handler+0x40>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <SysTick_Handler+0x40>)
 8000832:	601a      	str	r2, [r3, #0]
	if (ulTickCount > 1000) {
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <SysTick_Handler+0x40>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	23fa      	movs	r3, #250	; 0xfa
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	429a      	cmp	r2, r3
 800083e:	d907      	bls.n	8000850 <SysTick_Handler+0x34>
		ulTickCount = 0;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SysTick_Handler+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
		ulSecCount++;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <SysTick_Handler+0x44>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <SysTick_Handler+0x44>)
 800084e:	601a      	str	r2, [r3, #0]
	}
}
 8000850:	46c0      	nop			; (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	2000001c 	.word	0x2000001c
 800085c:	20000024 	.word	0x20000024
 8000860:	20000020 	.word	0x20000020

08000864 <__NVIC_SetPriority>:
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	0002      	movs	r2, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b7f      	cmp	r3, #127	; 0x7f
 8000878:	d828      	bhi.n	80008cc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800087a:	4a2f      	ldr	r2, [pc, #188]	; (8000938 <__NVIC_SetPriority+0xd4>)
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b25b      	sxtb	r3, r3
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	33c0      	adds	r3, #192	; 0xc0
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	589b      	ldr	r3, [r3, r2]
 800088a:	1dfa      	adds	r2, r7, #7
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	0011      	movs	r1, r2
 8000890:	2203      	movs	r2, #3
 8000892:	400a      	ands	r2, r1
 8000894:	00d2      	lsls	r2, r2, #3
 8000896:	21ff      	movs	r1, #255	; 0xff
 8000898:	4091      	lsls	r1, r2
 800089a:	000a      	movs	r2, r1
 800089c:	43d2      	mvns	r2, r2
 800089e:	401a      	ands	r2, r3
 80008a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	401a      	ands	r2, r3
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	0018      	movs	r0, r3
 80008b0:	2303      	movs	r3, #3
 80008b2:	4003      	ands	r3, r0
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b8:	481f      	ldr	r0, [pc, #124]	; (8000938 <__NVIC_SetPriority+0xd4>)
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	089b      	lsrs	r3, r3, #2
 80008c2:	430a      	orrs	r2, r1
 80008c4:	33c0      	adds	r3, #192	; 0xc0
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	501a      	str	r2, [r3, r0]
}
 80008ca:	e031      	b.n	8000930 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008cc:	4a1b      	ldr	r2, [pc, #108]	; (800093c <__NVIC_SetPriority+0xd8>)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	0019      	movs	r1, r3
 80008d4:	230f      	movs	r3, #15
 80008d6:	400b      	ands	r3, r1
 80008d8:	3b08      	subs	r3, #8
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	3306      	adds	r3, #6
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	18d3      	adds	r3, r2, r3
 80008e2:	3304      	adds	r3, #4
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	1dfa      	adds	r2, r7, #7
 80008e8:	7812      	ldrb	r2, [r2, #0]
 80008ea:	0011      	movs	r1, r2
 80008ec:	2203      	movs	r2, #3
 80008ee:	400a      	ands	r2, r1
 80008f0:	00d2      	lsls	r2, r2, #3
 80008f2:	21ff      	movs	r1, #255	; 0xff
 80008f4:	4091      	lsls	r1, r2
 80008f6:	000a      	movs	r2, r1
 80008f8:	43d2      	mvns	r2, r2
 80008fa:	401a      	ands	r2, r3
 80008fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	22ff      	movs	r2, #255	; 0xff
 8000904:	401a      	ands	r2, r3
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	0018      	movs	r0, r3
 800090c:	2303      	movs	r3, #3
 800090e:	4003      	ands	r3, r0
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <__NVIC_SetPriority+0xd8>)
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	001c      	movs	r4, r3
 800091c:	230f      	movs	r3, #15
 800091e:	4023      	ands	r3, r4
 8000920:	3b08      	subs	r3, #8
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	430a      	orrs	r2, r1
 8000926:	3306      	adds	r3, #6
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	18c3      	adds	r3, r0, r3
 800092c:	3304      	adds	r3, #4
 800092e:	601a      	str	r2, [r3, #0]
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b003      	add	sp, #12
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	1e5a      	subs	r2, r3, #1
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	045b      	lsls	r3, r3, #17
 8000950:	429a      	cmp	r2, r3
 8000952:	d301      	bcc.n	8000958 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000954:	2301      	movs	r3, #1
 8000956:	e010      	b.n	800097a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <SysTick_Config+0x44>)
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	3a01      	subs	r2, #1
 800095e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000960:	2301      	movs	r3, #1
 8000962:	425b      	negs	r3, r3
 8000964:	2103      	movs	r1, #3
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff ff7c 	bl	8000864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <SysTick_Config+0x44>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <SysTick_Config+0x44>)
 8000974:	2207      	movs	r2, #7
 8000976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000978:	2300      	movs	r3, #0
}
 800097a:	0018      	movs	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	e000e010 	.word	0xe000e010

08000988 <SystemInit>:

static void SetSysClock(void);
static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
static void systickConfig(void);

void SystemInit(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	SetSysClock();
 800098c:	f000 f828 	bl	80009e0 <SetSysClock>
	systickConfig();
 8000990:	f000 f818 	bl	80009c4 <systickConfig>
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <SysTick_CLKSourceConfig>:

static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	d105      	bne.n	80009b6 <SysTick_CLKSourceConfig+0x1a>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <SysTick_CLKSourceConfig+0x24>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <SysTick_CLKSourceConfig+0x24>)
 80009b0:	2104      	movs	r1, #4
 80009b2:	430a      	orrs	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]
	}
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b002      	add	sp, #8
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	e000e010 	.word	0xe000e010

080009c4 <systickConfig>:

static void systickConfig(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 80009c8:	2004      	movs	r0, #4
 80009ca:	f7ff ffe7 	bl	800099c <SysTick_CLKSourceConfig>
	SysTick_Config(systemClock / 1000);
 80009ce:	23fa      	movs	r3, #250	; 0xfa
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff ffb4 	bl	8000940 <SysTick_Config>
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <SetSysClock>:

static void SetSysClock(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t) RCC_CR_HSEON);
 80009e4:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <SetSysClock+0xb4>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <SetSysClock+0xb4>)
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	0249      	lsls	r1, r1, #9
 80009ee:	430a      	orrs	r2, r1
 80009f0:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <SetSysClock+0xb4>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	029b      	lsls	r3, r3, #10
 80009fc:	4013      	ands	r3, r2
 80009fe:	d0f9      	beq.n	80009f4 <SetSysClock+0x14>
		;

	/* Enable Prefetch Buffer and set Flash Latency */
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2;
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <SetSysClock+0xb8>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <SetSysClock+0xb8>)
 8000a06:	2182      	movs	r1, #130	; 0x82
 8000a08:	0049      	lsls	r1, r1, #1
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	601a      	str	r2, [r3, #0]
	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// APB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_HPRE);
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <SetSysClock+0xb4>)
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <SetSysClock+0xb4>)
 8000a14:	4921      	ldr	r1, [pc, #132]	; (8000a9c <SetSysClock+0xbc>)
 8000a16:	400a      	ands	r2, r1
 8000a18:	609a      	str	r2, [r3, #8]
	// AHB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_PPRE);
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <SetSysClock+0xb4>)
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <SetSysClock+0xb4>)
 8000a20:	491f      	ldr	r1, [pc, #124]	; (8000aa0 <SetSysClock+0xc0>)
 8000a22:	400a      	ands	r2, r1
 8000a24:	609a      	str	r2, [r3, #8]

	//PLL INPUT CLOCK SOURCE HSE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <SetSysClock+0xb4>)
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <SetSysClock+0xb4>)
 8000a2c:	2103      	movs	r1, #3
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	60da      	str	r2, [r3, #12]

	/* PLL configuration = HSE = 64 MHz */
	//PLLM = 1
	//PLLN = 16
	//PLLR = 2
	RCC->PLLCFGR &= (uint32_t) ((uint32_t) ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <SetSysClock+0xb4>)
 8000a34:	68da      	ldr	r2, [r3, #12]
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <SetSysClock+0xb4>)
 8000a38:	491a      	ldr	r1, [pc, #104]	; (8000aa4 <SetSysClock+0xc4>)
 8000a3a:	400a      	ands	r2, r1
 8000a3c:	60da      	str	r2, [r3, #12]
			| RCC_PLLCFGR_PLLR));

	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4)
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <SetSysClock+0xb4>)
 8000a40:	68da      	ldr	r2, [r3, #12]
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <SetSysClock+0xb4>)
 8000a44:	4918      	ldr	r1, [pc, #96]	; (8000aa8 <SetSysClock+0xc8>)
 8000a46:	430a      	orrs	r2, r1
 8000a48:	60da      	str	r2, [r3, #12]
			| (RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLREN) | (RCC_PLLCFGR_PLLQEN)
			| (RCC_PLLCFGR_PLLSRC_HSE);

	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <SetSysClock+0xb4>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <SetSysClock+0xb4>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	0449      	lsls	r1, r1, #17
 8000a54:	430a      	orrs	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]

	/* Wait till PLL is ready */
	while ((RCC->CR & RCC_CR_PLLRDY) == 0) {
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <SetSysClock+0xb4>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	049b      	lsls	r3, r3, #18
 8000a62:	4013      	ands	r3, r2
 8000a64:	d0f9      	beq.n	8000a5a <SetSysClock+0x7a>
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (uint32_t) ((uint32_t) ~(RCC_CFGR_SW));
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <SetSysClock+0xb4>)
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <SetSysClock+0xb4>)
 8000a6c:	2107      	movs	r1, #7
 8000a6e:	438a      	bics	r2, r1
 8000a70:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= (uint32_t) RCC_CFGR_SW_1;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <SetSysClock+0xb4>)
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <SetSysClock+0xb4>)
 8000a78:	2102      	movs	r1, #2
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	609a      	str	r2, [r3, #8]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1)
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SetSysClock+0xb4>)
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	2238      	movs	r2, #56	; 0x38
 8000a86:	4013      	ands	r3, r2
 8000a88:	2b10      	cmp	r3, #16
 8000a8a:	d1f9      	bne.n	8000a80 <SetSysClock+0xa0>
		;
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40022000 	.word	0x40022000
 8000a9c:	fffff0ff 	.word	0xfffff0ff
 8000aa0:	ffff8fff 	.word	0xffff8fff
 8000aa4:	1fff808f 	.word	0x1fff808f
 8000aa8:	31001003 	.word	0x31001003

08000aac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab0:	f7ff ff6a 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab6:	490d      	ldr	r1, [pc, #52]	; (8000aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <LoopForever+0xe>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000acc:	4c0a      	ldr	r4, [pc, #40]	; (8000af8 <LoopForever+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ada:	f000 f811 	bl	8000b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ade:	f7ff fe6f 	bl	80007c0 <main>

08000ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
  ldr   r0, =_estack
 8000ae4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000af0:	08000b68 	.word	0x08000b68
  ldr r2, =_sbss
 8000af4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000af8:	20000040 	.word	0x20000040

08000afc <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_COMP_IRQHandler>
	...

08000b00 <__libc_init_array>:
 8000b00:	b570      	push	{r4, r5, r6, lr}
 8000b02:	2600      	movs	r6, #0
 8000b04:	4d0c      	ldr	r5, [pc, #48]	; (8000b38 <__libc_init_array+0x38>)
 8000b06:	4c0d      	ldr	r4, [pc, #52]	; (8000b3c <__libc_init_array+0x3c>)
 8000b08:	1b64      	subs	r4, r4, r5
 8000b0a:	10a4      	asrs	r4, r4, #2
 8000b0c:	42a6      	cmp	r6, r4
 8000b0e:	d109      	bne.n	8000b24 <__libc_init_array+0x24>
 8000b10:	2600      	movs	r6, #0
 8000b12:	f000 f819 	bl	8000b48 <_init>
 8000b16:	4d0a      	ldr	r5, [pc, #40]	; (8000b40 <__libc_init_array+0x40>)
 8000b18:	4c0a      	ldr	r4, [pc, #40]	; (8000b44 <__libc_init_array+0x44>)
 8000b1a:	1b64      	subs	r4, r4, r5
 8000b1c:	10a4      	asrs	r4, r4, #2
 8000b1e:	42a6      	cmp	r6, r4
 8000b20:	d105      	bne.n	8000b2e <__libc_init_array+0x2e>
 8000b22:	bd70      	pop	{r4, r5, r6, pc}
 8000b24:	00b3      	lsls	r3, r6, #2
 8000b26:	58eb      	ldr	r3, [r5, r3]
 8000b28:	4798      	blx	r3
 8000b2a:	3601      	adds	r6, #1
 8000b2c:	e7ee      	b.n	8000b0c <__libc_init_array+0xc>
 8000b2e:	00b3      	lsls	r3, r6, #2
 8000b30:	58eb      	ldr	r3, [r5, r3]
 8000b32:	4798      	blx	r3
 8000b34:	3601      	adds	r6, #1
 8000b36:	e7f2      	b.n	8000b1e <__libc_init_array+0x1e>
 8000b38:	08000b60 	.word	0x08000b60
 8000b3c:	08000b60 	.word	0x08000b60
 8000b40:	08000b60 	.word	0x08000b60
 8000b44:	08000b64 	.word	0x08000b64

08000b48 <_init>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b4e:	bc08      	pop	{r3}
 8000b50:	469e      	mov	lr, r3
 8000b52:	4770      	bx	lr

08000b54 <_fini>:
 8000b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b5a:	bc08      	pop	{r3}
 8000b5c:	469e      	mov	lr, r3
 8000b5e:	4770      	bx	lr
