
g031_sbl_noHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023fc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080024b8  080024b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002710  08002710  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002710  08002710  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002710  08002710  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002710  08002710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002714  08002714  00012714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  2000006c  08002784  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08002784  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000029e4  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e89  00000000  00000000  00022a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f8  00000000  00000000  00023908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000270  00000000  00000000  00023c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e86b  00000000  00000000  00023e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003b12  00000000  00000000  000326db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004ac57  00000000  00000000  000361ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00080e44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000118c  00000000  00000000  00080e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080024a0 	.word	0x080024a0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	080024a0 	.word	0x080024a0

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <sendStartDowload>:
//#include  "core_cm0plus.h"
#include  "stm32g031xx.h"

#define FW_KEY										0x534B532A

static void sendStartDowload(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	xprintf("OK\r\n");
 8000234:	4b03      	ldr	r3, [pc, #12]	; (8000244 <sendStartDowload+0x14>)
 8000236:	0018      	movs	r0, r3
 8000238:	f001 f84a 	bl	80012d0 <xprintf>
}
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	080024b8 	.word	0x080024b8

08000248 <sendACK>:

static void sendACK(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	xprintf("ACK\r\n");
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <sendACK+0x14>)
 800024e:	0018      	movs	r0, r3
 8000250:	f001 f83e 	bl	80012d0 <xprintf>
}
 8000254:	46c0      	nop			; (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	080024c0 	.word	0x080024c0

08000260 <sendNACK>:

static void sendNACK(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	xprintf("NACK\r\n");
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <sendNACK+0x14>)
 8000266:	0018      	movs	r0, r3
 8000268:	f001 f832 	bl	80012d0 <xprintf>
}
 800026c:	46c0      	nop			; (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	080024c8 	.word	0x080024c8

08000278 <sendERROR>:

static void sendERROR(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	xprintf("ERROR\r\n");
 800027c:	4b03      	ldr	r3, [pc, #12]	; (800028c <sendERROR+0x14>)
 800027e:	0018      	movs	r0, r3
 8000280:	f001 f826 	bl	80012d0 <xprintf>
}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	080024d0 	.word	0x080024d0

08000290 <getFirmWareInfo>:



T_FIRMWARE appFirmWare;

int getFirmWareInfo(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	int result  = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
	uint32_t lastRaiseTime = g_appStats.secCount;
 800029a:	4b21      	ldr	r3, [pc, #132]	; (8000320 <getFirmWareInfo+0x90>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	60bb      	str	r3, [r7, #8]
	pc_comm.lastRaise = g_appStats.miliCount;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <getFirmWareInfo+0x90>)
 80002a2:	685a      	ldr	r2, [r3, #4]
 80002a4:	4b1f      	ldr	r3, [pc, #124]	; (8000324 <getFirmWareInfo+0x94>)
 80002a6:	4920      	ldr	r1, [pc, #128]	; (8000328 <getFirmWareInfo+0x98>)
 80002a8:	505a      	str	r2, [r3, r1]
	while((uint32_t)(g_appStats.secCount-lastRaiseTime) < UPLOAD_TIMEOUT){
 80002aa:	e025      	b.n	80002f8 <getFirmWareInfo+0x68>

		if(pc_comm.rxLen && ((uint32_t)(g_appStats.miliCount - pc_comm.lastRaise)>100)){
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <getFirmWareInfo+0x94>)
 80002ae:	4a1f      	ldr	r2, [pc, #124]	; (800032c <getFirmWareInfo+0x9c>)
 80002b0:	5a9b      	ldrh	r3, [r3, r2]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d020      	beq.n	80002f8 <getFirmWareInfo+0x68>
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <getFirmWareInfo+0x90>)
 80002b8:	685a      	ldr	r2, [r3, #4]
 80002ba:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <getFirmWareInfo+0x94>)
 80002bc:	491a      	ldr	r1, [pc, #104]	; (8000328 <getFirmWareInfo+0x98>)
 80002be:	585b      	ldr	r3, [r3, r1]
 80002c0:	1ad3      	subs	r3, r2, r3
 80002c2:	2b64      	cmp	r3, #100	; 0x64
 80002c4:	d918      	bls.n	80002f8 <getFirmWareInfo+0x68>

			appFirmWare.key = *(uint32_t*) (pc_comm.rxBuff);
 80002c6:	4b17      	ldr	r3, [pc, #92]	; (8000324 <getFirmWareInfo+0x94>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	4b19      	ldr	r3, [pc, #100]	; (8000330 <getFirmWareInfo+0xa0>)
 80002cc:	601a      	str	r2, [r3, #0]

			if (FW_KEY == appFirmWare.key) {
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <getFirmWareInfo+0xa0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a18      	ldr	r2, [pc, #96]	; (8000334 <getFirmWareInfo+0xa4>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d10f      	bne.n	80002f8 <getFirmWareInfo+0x68>

				char *str = (uint32_t)(pc_comm.rxBuff + 4);
 80002d8:	4b17      	ldr	r3, [pc, #92]	; (8000338 <getFirmWareInfo+0xa8>)
 80002da:	607b      	str	r3, [r7, #4]
				appFirmWare.len = atoi(str);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	0018      	movs	r0, r3
 80002e0:	f001 f833 	bl	800134a <atoi>
 80002e4:	0003      	movs	r3, r0
 80002e6:	001a      	movs	r2, r3
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <getFirmWareInfo+0xa0>)
 80002ea:	605a      	str	r2, [r3, #4]
				appFirmWare.available = 1;
 80002ec:	4b10      	ldr	r3, [pc, #64]	; (8000330 <getFirmWareInfo+0xa0>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	721a      	strb	r2, [r3, #8]
				result = 1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	60fb      	str	r3, [r7, #12]
				break;
 80002f6:	e005      	b.n	8000304 <getFirmWareInfo+0x74>
	while((uint32_t)(g_appStats.secCount-lastRaiseTime) < UPLOAD_TIMEOUT){
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <getFirmWareInfo+0x90>)
 80002fa:	689a      	ldr	r2, [r3, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	1ad3      	subs	r3, r2, r3
 8000300:	2b02      	cmp	r3, #2
 8000302:	d9d3      	bls.n	80002ac <getFirmWareInfo+0x1c>
			}

		}
	}

	pc_comm.rxLen = 0;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <getFirmWareInfo+0x94>)
 8000306:	4a09      	ldr	r2, [pc, #36]	; (800032c <getFirmWareInfo+0x9c>)
 8000308:	2100      	movs	r1, #0
 800030a:	5299      	strh	r1, [r3, r2]
	pc_comm.idx = 0;
 800030c:	4a05      	ldr	r2, [pc, #20]	; (8000324 <getFirmWareInfo+0x94>)
 800030e:	2380      	movs	r3, #128	; 0x80
 8000310:	011b      	lsls	r3, r3, #4
 8000312:	2100      	movs	r1, #0
 8000314:	52d1      	strh	r1, [r2, r3]
	return result;
 8000316:	68fb      	ldr	r3, [r7, #12]
}
 8000318:	0018      	movs	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	b004      	add	sp, #16
 800031e:	bd80      	pop	{r7, pc}
 8000320:	200000a4 	.word	0x200000a4
 8000324:	200000c0 	.word	0x200000c0
 8000328:	00000804 	.word	0x00000804
 800032c:	00000808 	.word	0x00000808
 8000330:	20000088 	.word	0x20000088
 8000334:	534b532a 	.word	0x534b532a
 8000338:	200000c4 	.word	0x200000c4

0800033c <downLoadDataInNewFirmWare>:

uint32_t imgSize = 0;
uint32_t AppStartPage = FLASH_APPLICATION_PAGE;
int imgtrue = 0;
volatile uint32_t testS = 0;
int downLoadDataInNewFirmWare(uint32_t size){
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

	imgSize = size;
 8000344:	4b3a      	ldr	r3, [pc, #232]	; (8000430 <downLoadDataInNewFirmWare+0xf4>)
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	601a      	str	r2, [r3, #0]
	sendStartDowload();
 800034a:	f7ff ff71 	bl	8000230 <sendStartDowload>
	uint32_t lastRaiseTime = g_appStats.secCount;
 800034e:	4b39      	ldr	r3, [pc, #228]	; (8000434 <downLoadDataInNewFirmWare+0xf8>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	60fb      	str	r3, [r7, #12]
	pc_comm.lastRaise = g_appStats.miliCount;
 8000354:	4b37      	ldr	r3, [pc, #220]	; (8000434 <downLoadDataInNewFirmWare+0xf8>)
 8000356:	685a      	ldr	r2, [r3, #4]
 8000358:	4b37      	ldr	r3, [pc, #220]	; (8000438 <downLoadDataInNewFirmWare+0xfc>)
 800035a:	4938      	ldr	r1, [pc, #224]	; (800043c <downLoadDataInNewFirmWare+0x100>)
 800035c:	505a      	str	r2, [r3, r1]
	while (imgSize
 800035e:	e056      	b.n	800040e <downLoadDataInNewFirmWare+0xd2>
			&& ((uint32_t) (g_appStats.secCount - lastRaiseTime)
					< GET_PACKAGE_TIMEOUT)) {

		testS = (uint32_t) (g_appStats.miliCount - pc_comm.lastRaise);
 8000360:	4b34      	ldr	r3, [pc, #208]	; (8000434 <downLoadDataInNewFirmWare+0xf8>)
 8000362:	685a      	ldr	r2, [r3, #4]
 8000364:	4b34      	ldr	r3, [pc, #208]	; (8000438 <downLoadDataInNewFirmWare+0xfc>)
 8000366:	4935      	ldr	r1, [pc, #212]	; (800043c <downLoadDataInNewFirmWare+0x100>)
 8000368:	585b      	ldr	r3, [r3, r1]
 800036a:	1ad2      	subs	r2, r2, r3
 800036c:	4b34      	ldr	r3, [pc, #208]	; (8000440 <downLoadDataInNewFirmWare+0x104>)
 800036e:	601a      	str	r2, [r3, #0]

		if (pc_comm.rxLen && (testS > COMM_MAX_TIMEOUT)
 8000370:	4b31      	ldr	r3, [pc, #196]	; (8000438 <downLoadDataInNewFirmWare+0xfc>)
 8000372:	4a34      	ldr	r2, [pc, #208]	; (8000444 <downLoadDataInNewFirmWare+0x108>)
 8000374:	5a9b      	ldrh	r3, [r3, r2]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d049      	beq.n	800040e <downLoadDataInNewFirmWare+0xd2>
 800037a:	4b31      	ldr	r3, [pc, #196]	; (8000440 <downLoadDataInNewFirmWare+0x104>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b64      	cmp	r3, #100	; 0x64
 8000380:	d945      	bls.n	800040e <downLoadDataInNewFirmWare+0xd2>
				&& (testS != 0xffffffff)) {
 8000382:	4b2f      	ldr	r3, [pc, #188]	; (8000440 <downLoadDataInNewFirmWare+0x104>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	d041      	beq.n	800040e <downLoadDataInNewFirmWare+0xd2>

			lastRaiseTime = g_appStats.secCount;
 800038a:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <downLoadDataInNewFirmWare+0xf8>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	60fb      	str	r3, [r7, #12]

			if ((pc_comm.rxLen != FLASH_PAGE_SIZE) && (imgSize >= FLASH_PAGE_SIZE)) {
 8000390:	4b29      	ldr	r3, [pc, #164]	; (8000438 <downLoadDataInNewFirmWare+0xfc>)
 8000392:	4a2c      	ldr	r2, [pc, #176]	; (8000444 <downLoadDataInNewFirmWare+0x108>)
 8000394:	5a9a      	ldrh	r2, [r3, r2]
 8000396:	2380      	movs	r3, #128	; 0x80
 8000398:	011b      	lsls	r3, r3, #4
 800039a:	429a      	cmp	r2, r3
 800039c:	d00c      	beq.n	80003b8 <downLoadDataInNewFirmWare+0x7c>
 800039e:	4b24      	ldr	r3, [pc, #144]	; (8000430 <downLoadDataInNewFirmWare+0xf4>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	2380      	movs	r3, #128	; 0x80
 80003a4:	011b      	lsls	r3, r3, #4
 80003a6:	429a      	cmp	r2, r3
 80003a8:	d306      	bcc.n	80003b8 <downLoadDataInNewFirmWare+0x7c>
				sendERROR();
 80003aa:	f7ff ff65 	bl	8000278 <sendERROR>
				imgtrue = 1;
 80003ae:	4b26      	ldr	r3, [pc, #152]	; (8000448 <downLoadDataInNewFirmWare+0x10c>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	601a      	str	r2, [r3, #0]
				return 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	e037      	b.n	8000428 <downLoadDataInNewFirmWare+0xec>

			}

			if (!FlashWritePage(AppStartPage, pc_comm.rxBuff, pc_comm.rxLen)) {
 80003b8:	4b24      	ldr	r3, [pc, #144]	; (800044c <downLoadDataInNewFirmWare+0x110>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	b298      	uxth	r0, r3
 80003be:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <downLoadDataInNewFirmWare+0xfc>)
 80003c0:	4a20      	ldr	r2, [pc, #128]	; (8000444 <downLoadDataInNewFirmWare+0x108>)
 80003c2:	5a9a      	ldrh	r2, [r3, r2]
 80003c4:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <downLoadDataInNewFirmWare+0xfc>)
 80003c6:	0019      	movs	r1, r3
 80003c8:	f000 f908 	bl	80005dc <FlashWritePage>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d101      	bne.n	80003d4 <downLoadDataInNewFirmWare+0x98>
				return 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	e029      	b.n	8000428 <downLoadDataInNewFirmWare+0xec>
			}

			pc_comm.lastRaise = g_appStats.miliCount;
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <downLoadDataInNewFirmWare+0xf8>)
 80003d6:	685a      	ldr	r2, [r3, #4]
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <downLoadDataInNewFirmWare+0xfc>)
 80003da:	4918      	ldr	r1, [pc, #96]	; (800043c <downLoadDataInNewFirmWare+0x100>)
 80003dc:	505a      	str	r2, [r3, r1]
			imgSize = imgSize - pc_comm.rxLen;
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <downLoadDataInNewFirmWare+0xf4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a15      	ldr	r2, [pc, #84]	; (8000438 <downLoadDataInNewFirmWare+0xfc>)
 80003e4:	4917      	ldr	r1, [pc, #92]	; (8000444 <downLoadDataInNewFirmWare+0x108>)
 80003e6:	5a52      	ldrh	r2, [r2, r1]
 80003e8:	1a9a      	subs	r2, r3, r2
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <downLoadDataInNewFirmWare+0xf4>)
 80003ec:	601a      	str	r2, [r3, #0]
			AppStartPage++;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <downLoadDataInNewFirmWare+0x110>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	4b15      	ldr	r3, [pc, #84]	; (800044c <downLoadDataInNewFirmWare+0x110>)
 80003f6:	601a      	str	r2, [r3, #0]
			pc_comm.rxLen = 0;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <downLoadDataInNewFirmWare+0xfc>)
 80003fa:	4a12      	ldr	r2, [pc, #72]	; (8000444 <downLoadDataInNewFirmWare+0x108>)
 80003fc:	2100      	movs	r1, #0
 80003fe:	5299      	strh	r1, [r3, r2]
			pc_comm.idx = 0;
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <downLoadDataInNewFirmWare+0xfc>)
 8000402:	2380      	movs	r3, #128	; 0x80
 8000404:	011b      	lsls	r3, r3, #4
 8000406:	2100      	movs	r1, #0
 8000408:	52d1      	strh	r1, [r2, r3]
			sendACK();
 800040a:	f7ff ff1d 	bl	8000248 <sendACK>
	while (imgSize
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <downLoadDataInNewFirmWare+0xf4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d005      	beq.n	8000422 <downLoadDataInNewFirmWare+0xe6>
			&& ((uint32_t) (g_appStats.secCount - lastRaiseTime)
 8000416:	4b07      	ldr	r3, [pc, #28]	; (8000434 <downLoadDataInNewFirmWare+0xf8>)
 8000418:	689a      	ldr	r2, [r3, #8]
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	2b04      	cmp	r3, #4
 8000420:	d99e      	bls.n	8000360 <downLoadDataInNewFirmWare+0x24>

		}
	}
	sendNACK();
 8000422:	f7ff ff1d 	bl	8000260 <sendNACK>

	return 1;
 8000426:	2301      	movs	r3, #1
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	b004      	add	sp, #16
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000094 	.word	0x20000094
 8000434:	200000a4 	.word	0x200000a4
 8000438:	200000c0 	.word	0x200000c0
 800043c:	00000804 	.word	0x00000804
 8000440:	2000009c 	.word	0x2000009c
 8000444:	00000808 	.word	0x00000808
 8000448:	20000098 	.word	0x20000098
 800044c:	20000000 	.word	0x20000000

08000450 <jumpToApplication>:

void jumpToApplication(void){
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
	void (*SysMemBootJump)(void);
	volatile uint32_t addr = FLASH_APPLICATION_ADDR;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <jumpToApplication+0x4c>)
 8000458:	607b      	str	r3, [r7, #4]

	RCC_DeInit();
 800045a:	f000 fb87 	bl	8000b6c <RCC_DeInit>

	SysTick->CTRL = 0;
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <jumpToApplication+0x50>)
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000464:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <jumpToApplication+0x50>)
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800046a:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <jumpToApplication+0x50>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	46c0      	nop			; (mov r8, r8)

	__disable_irq();

	SYSCFG->CFGR1 = 0x01;
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <jumpToApplication+0x54>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]

	SysMemBootJump = (void (*)(void)) (*((uint32_t*) (addr + 4)));
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	3304      	adds	r3, #4
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	60fb      	str	r3, [r7, #12]

	__set_MSP(*(uint32_t*) addr);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	f383 8808 	msr	MSP, r3
}
 800048e:	46c0      	nop			; (mov r8, r8)

	SysMemBootJump();
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	4798      	blx	r3
}
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b004      	add	sp, #16
 800049a:	bd80      	pop	{r7, pc}
 800049c:	08002800 	.word	0x08002800
 80004a0:	e000e010 	.word	0xe000e010
 80004a4:	40010000 	.word	0x40010000

080004a8 <flash_lock>:
		index++;
	}
	return (checksum_value);
}

static void flash_lock(void){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	  FLASH->CR |= FLASH_CR_LOCK;
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <flash_lock+0x18>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <flash_lock+0x18>)
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	0609      	lsls	r1, r1, #24
 80004b6:	430a      	orrs	r2, r1
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40022000 	.word	0x40022000

080004c4 <flash_unlock>:

static void flash_unlock(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	if (FLASH->CR & FLASH_CR_LOCK) {
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <flash_unlock+0x20>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	da05      	bge.n	80004dc <flash_unlock+0x18>
		FLASH->KEYR = FLASH_KEY1;
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <flash_unlock+0x20>)
 80004d2:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <flash_unlock+0x24>)
 80004d4:	609a      	str	r2, [r3, #8]
		FLASH->KEYR = FLASH_KEY2;
 80004d6:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <flash_unlock+0x20>)
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <flash_unlock+0x28>)
 80004da:	609a      	str	r2, [r3, #8]
	}
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40022000 	.word	0x40022000
 80004e8:	45670123 	.word	0x45670123
 80004ec:	cdef89ab 	.word	0xcdef89ab

080004f0 <flashEraserPage>:

int flashEraserPage(uint32_t Page){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	}
	 return 1;
#else
	// flash_unlock();

	while ((FLASH->SR & FLASH_SR_BSY1));
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <flashEraserPage+0x74>)
 80004fc:	691a      	ldr	r2, [r3, #16]
 80004fe:	2380      	movs	r3, #128	; 0x80
 8000500:	025b      	lsls	r3, r3, #9
 8000502:	4013      	ands	r3, r2
 8000504:	d1f9      	bne.n	80004fa <flashEraserPage+0xa>
	FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <flashEraserPage+0x74>)
 8000508:	695a      	ldr	r2, [r3, #20]
 800050a:	4b16      	ldr	r3, [pc, #88]	; (8000564 <flashEraserPage+0x74>)
 800050c:	2102      	movs	r1, #2
 800050e:	430a      	orrs	r2, r1
 8000510:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_PNB & (Page<<3));
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <flashEraserPage+0x74>)
 8000514:	6959      	ldr	r1, [r3, #20]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	4a13      	ldr	r2, [pc, #76]	; (8000568 <flashEraserPage+0x78>)
 800051c:	401a      	ands	r2, r3
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <flashEraserPage+0x74>)
 8000520:	430a      	orrs	r2, r1
 8000522:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <flashEraserPage+0x74>)
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <flashEraserPage+0x74>)
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0249      	lsls	r1, r1, #9
 800052e:	430a      	orrs	r2, r1
 8000530:	615a      	str	r2, [r3, #20]
	while ((FLASH->SR & FLASH_SR_BSY1));
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <flashEraserPage+0x74>)
 8000536:	691a      	ldr	r2, [r3, #16]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	025b      	lsls	r3, r3, #9
 800053c:	4013      	ands	r3, r2
 800053e:	d1f9      	bne.n	8000534 <flashEraserPage+0x44>
	FLASH->CR &= ~FLASH_SR_BSY1;
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <flashEraserPage+0x74>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <flashEraserPage+0x74>)
 8000546:	4909      	ldr	r1, [pc, #36]	; (800056c <flashEraserPage+0x7c>)
 8000548:	400a      	ands	r2, r1
 800054a:	615a      	str	r2, [r3, #20]
	FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <flashEraserPage+0x74>)
 800054e:	695a      	ldr	r2, [r3, #20]
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <flashEraserPage+0x74>)
 8000552:	2102      	movs	r1, #2
 8000554:	438a      	bics	r2, r1
 8000556:	615a      	str	r2, [r3, #20]

	//flash_lock();
	return 1;
 8000558:	2301      	movs	r3, #1
#endif
}
 800055a:	0018      	movs	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40022000 	.word	0x40022000
 8000568:	00001ff8 	.word	0x00001ff8
 800056c:	fffeffff 	.word	0xfffeffff

08000570 <flash_ProgramDoubleWord>:
	FLASH->CR &= ~FLASH_CR_PG;

	return 1;
}

int flash_ProgramDoubleWord(uint32_t addr, uint64_t data){
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	603a      	str	r2, [r7, #0]
 800057a:	607b      	str	r3, [r7, #4]

	while((FLASH->SR & FLASH_SR_BSY1));
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <flash_ProgramDoubleWord+0x68>)
 8000580:	691a      	ldr	r2, [r3, #16]
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	025b      	lsls	r3, r3, #9
 8000586:	4013      	ands	r3, r2
 8000588:	d1f9      	bne.n	800057e <flash_ProgramDoubleWord+0xe>
	FLASH->CR |= FLASH_CR_PG;
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <flash_ProgramDoubleWord+0x68>)
 800058c:	695a      	ldr	r2, [r3, #20]
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <flash_ProgramDoubleWord+0x68>)
 8000590:	2101      	movs	r1, #1
 8000592:	430a      	orrs	r2, r1
 8000594:	615a      	str	r2, [r3, #20]

	*(uint32_t*)addr = (uint32_t)data;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800059c:	f3bf 8f6f 	isb	sy
}
 80005a0:	46c0      	nop			; (mov r8, r8)
	__ISB();
	 *(uint32_t *)(addr + 4U) = (uint32_t)(data >> 32U);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	001c      	movs	r4, r3
 80005a6:	2300      	movs	r3, #0
 80005a8:	001d      	movs	r5, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	3304      	adds	r3, #4
 80005ae:	0022      	movs	r2, r4
 80005b0:	601a      	str	r2, [r3, #0]
	while((FLASH->SR & FLASH_SR_BSY1));
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <flash_ProgramDoubleWord+0x68>)
 80005b6:	691a      	ldr	r2, [r3, #16]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	025b      	lsls	r3, r3, #9
 80005bc:	4013      	ands	r3, r2
 80005be:	d1f9      	bne.n	80005b4 <flash_ProgramDoubleWord+0x44>
	FLASH->CR &= ~FLASH_CR_PG;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <flash_ProgramDoubleWord+0x68>)
 80005c2:	695a      	ldr	r2, [r3, #20]
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <flash_ProgramDoubleWord+0x68>)
 80005c6:	2101      	movs	r1, #1
 80005c8:	438a      	bics	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
	return 1;
 80005cc:	2301      	movs	r3, #1
}
 80005ce:	0018      	movs	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b004      	add	sp, #16
 80005d4:	bdb0      	pop	{r4, r5, r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	40022000 	.word	0x40022000

080005dc <FlashWritePage>:


int FlashWritePage(uint16_t pageNum, uint8_t *pdata,uint16_t len){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6039      	str	r1, [r7, #0]
 80005e4:	0011      	movs	r1, r2
 80005e6:	1dbb      	adds	r3, r7, #6
 80005e8:	1c02      	adds	r2, r0, #0
 80005ea:	801a      	strh	r2, [r3, #0]
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	1c0a      	adds	r2, r1, #0
 80005f0:	801a      	strh	r2, [r3, #0]

	uint32_t pageAddr = (uint32_t) (pageNum * FLASH_PAGE_SIZE + FLASH_BASE);
 80005f2:	1dbb      	adds	r3, r7, #6
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	0252      	lsls	r2, r2, #9
 80005fa:	4694      	mov	ip, r2
 80005fc:	4463      	add	r3, ip
 80005fe:	02db      	lsls	r3, r3, #11
 8000600:	617b      	str	r3, [r7, #20]
	uint64_t *pRecord = (uint64_t*) pdata;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	613b      	str	r3, [r7, #16]

	flash_unlock();
 8000606:	f7ff ff5d 	bl	80004c4 <flash_unlock>
	//clear flag
	FLASH->SR &= ~(FLASH_SR_EOP|FLASH_SR_WRPERR|FLASH_SR_PGAERR);
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <FlashWritePage+0x90>)
 800060c:	691a      	ldr	r2, [r3, #16]
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <FlashWritePage+0x90>)
 8000610:	2131      	movs	r1, #49	; 0x31
 8000612:	438a      	bics	r2, r1
 8000614:	611a      	str	r2, [r3, #16]
	flashEraserPage(pageNum);
 8000616:	1dbb      	adds	r3, r7, #6
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff ff68 	bl	80004f0 <flashEraserPage>
	for (int i = 0; i < len; i += 8,pRecord++,pageAddr += 8) {
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e015      	b.n	8000652 <FlashWritePage+0x76>
		if (!flash_ProgramDoubleWord(pageAddr, *pRecord)) {
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	6979      	ldr	r1, [r7, #20]
 800062e:	0008      	movs	r0, r1
 8000630:	f7ff ff9e 	bl	8000570 <flash_ProgramDoubleWord>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d103      	bne.n	8000640 <FlashWritePage+0x64>
			flash_lock();
 8000638:	f7ff ff36 	bl	80004a8 <flash_lock>
			return 0;
 800063c:	2300      	movs	r3, #0
 800063e:	e010      	b.n	8000662 <FlashWritePage+0x86>
	for (int i = 0; i < len; i += 8,pRecord++,pageAddr += 8) {
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3308      	adds	r3, #8
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	3308      	adds	r3, #8
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	3308      	adds	r3, #8
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbe4      	blt.n	8000626 <FlashWritePage+0x4a>
		}
	}
	flash_lock();
 800065c:	f7ff ff24 	bl	80004a8 <flash_lock>
	return 1;
 8000660:	2301      	movs	r3, #1
}
 8000662:	0018      	movs	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	b006      	add	sp, #24
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	40022000 	.word	0x40022000

08000670 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000674:	f3bf 8f4f 	dsb	sy
}
 8000678:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_SystemReset+0x1c>)
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <__NVIC_SystemReset+0x20>)
 800067e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000680:	f3bf 8f4f 	dsb	sy
}
 8000684:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	e7fd      	b.n	8000686 <__NVIC_SystemReset+0x16>
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	05fa0004 	.word	0x05fa0004

08000694 <_write>:
START_CONFIG g_config;

static int setup(void);

int _write(int file, char *ptr, int len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	e009      	b.n	80006ba <_write+0x26>
	{
		PC_putChar(*ptr++);
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	60ba      	str	r2, [r7, #8]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fb32 	bl	8000d18 <PC_putChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	3301      	adds	r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	429a      	cmp	r2, r3
 80006c0:	dbf1      	blt.n	80006a6 <_write+0x12>
	}
	return len;
 80006c2:	687b      	ldr	r3, [r7, #4]
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b006      	add	sp, #24
 80006ca:	bd80      	pop	{r7, pc}

080006cc <main>:

int main(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	setup();
 80006d0:	f000 f82e 	bl	8000730 <setup>
	xprintf("%s",VERSION);
 80006d4:	4a11      	ldr	r2, [pc, #68]	; (800071c <main+0x50>)
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <main+0x54>)
 80006d8:	0011      	movs	r1, r2
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fdf8 	bl	80012d0 <xprintf>
	if (getFirmWareInfo()) {
 80006e0:	f7ff fdd6 	bl	8000290 <getFirmWareInfo>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d015      	beq.n	8000714 <main+0x48>
		if (downLoadDataInNewFirmWare(appFirmWare.len)) {
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <main+0x58>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	0018      	movs	r0, r3
 80006ee:	f7ff fe25 	bl	800033c <downLoadDataInNewFirmWare>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d010      	beq.n	8000718 <main+0x4c>
			xprintf("download fw success ...\r\n");
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <main+0x5c>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fde9 	bl	80012d0 <xprintf>
			xputc(printf("system reset \r\n"));
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <main+0x60>)
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fe5b 	bl	80013bc <iprintf>
 8000706:	0003      	movs	r3, r0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fc26 	bl	8000f5c <xputc>
			NVIC_SystemReset();
 8000710:	f7ff ffae 	bl	8000670 <__NVIC_SystemReset>
			//jumpToApplication();
		}
	} else {
		jumpToApplication();
 8000714:	f7ff fe9c 	bl	8000450 <jumpToApplication>
	}

	while (1) {
 8000718:	e7fe      	b.n	8000718 <main+0x4c>
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	080024d8 	.word	0x080024d8
 8000720:	080024e8 	.word	0x080024e8
 8000724:	20000088 	.word	0x20000088
 8000728:	080024ec 	.word	0x080024ec
 800072c:	08002508 	.word	0x08002508

08000730 <setup>:
	}
	return 0;
}


static int setup(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	systemInit();
 8000734:	f000 f988 	bl	8000a48 <systemInit>
	comm_init();
 8000738:	f000 fae4 	bl	8000d04 <comm_init>
	xdev_out(PC_putChar);
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <setup+0x1c>)
 800073e:	4a04      	ldr	r2, [pc, #16]	; (8000750 <setup+0x20>)
 8000740:	601a      	str	r2, [r3, #0]
	return 0;
 8000742:	2300      	movs	r3, #0

}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	200008d0 	.word	0x200008d0
 8000750:	08000d19 	.word	0x08000d19

08000754 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	++g_appStats.miliCount;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <SysTick_Handler+0x3c>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <SysTick_Handler+0x3c>)
 8000760:	605a      	str	r2, [r3, #4]
	++g_appStats.tickCount;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <SysTick_Handler+0x3c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <SysTick_Handler+0x3c>)
 800076a:	601a      	str	r2, [r3, #0]
	if (g_appStats.tickCount >= 1000) {
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <SysTick_Handler+0x3c>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	23fa      	movs	r3, #250	; 0xfa
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	429a      	cmp	r2, r3
 8000776:	d307      	bcc.n	8000788 <SysTick_Handler+0x34>
		g_appStats.tickCount = 0;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Handler+0x3c>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
		++g_appStats.secCount;
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Handler+0x3c>)
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	4b02      	ldr	r3, [pc, #8]	; (8000790 <SysTick_Handler+0x3c>)
 8000786:	609a      	str	r2, [r3, #8]
	}
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	200000a4 	.word	0x200000a4

08000794 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

	uint8_t cChar;
	if (USART1->ISR & USART_ISR_RXNE_RXFNE) {
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <USART1_IRQHandler+0x78>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	2220      	movs	r2, #32
 80007a0:	4013      	ands	r3, r2
 80007a2:	d02e      	beq.n	8000802 <USART1_IRQHandler+0x6e>
		charCount++;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <USART1_IRQHandler+0x7c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	1c5a      	adds	r2, r3, #1
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <USART1_IRQHandler+0x7c>)
 80007ac:	601a      	str	r2, [r3, #0]
		cChar = USART1->RDR;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <USART1_IRQHandler+0x78>)
 80007b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	701a      	strb	r2, [r3, #0]
		pc_comm.rxBuff[pc_comm.idx] = cChar;
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <USART1_IRQHandler+0x80>)
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	5ad3      	ldrh	r3, [r2, r3]
 80007be:	0019      	movs	r1, r3
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <USART1_IRQHandler+0x80>)
 80007c2:	1dfa      	adds	r2, r7, #7
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	545a      	strb	r2, [r3, r1]
		pc_comm.idx++;
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <USART1_IRQHandler+0x80>)
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	5ad3      	ldrh	r3, [r2, r3]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b299      	uxth	r1, r3
 80007d4:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <USART1_IRQHandler+0x80>)
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	52d1      	strh	r1, [r2, r3]
		pc_comm.rxLen++;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <USART1_IRQHandler+0x80>)
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <USART1_IRQHandler+0x84>)
 80007e0:	5a9b      	ldrh	r3, [r3, r2]
 80007e2:	3301      	adds	r3, #1
 80007e4:	b299      	uxth	r1, r3
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <USART1_IRQHandler+0x80>)
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <USART1_IRQHandler+0x84>)
 80007ea:	5299      	strh	r1, [r3, r2]
		//clear flag;
		pc_comm.lastRaise = g_appStats.miliCount;
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <USART1_IRQHandler+0x88>)
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <USART1_IRQHandler+0x80>)
 80007f2:	490b      	ldr	r1, [pc, #44]	; (8000820 <USART1_IRQHandler+0x8c>)
 80007f4:	505a      	str	r2, [r3, r1]
		USART1->ICR |= USART_RQR_RXFRQ;
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <USART1_IRQHandler+0x78>)
 80007f8:	6a1a      	ldr	r2, [r3, #32]
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <USART1_IRQHandler+0x78>)
 80007fc:	2108      	movs	r1, #8
 80007fe:	430a      	orrs	r2, r1
 8000800:	621a      	str	r2, [r3, #32]
	}
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40013800 	.word	0x40013800
 8000810:	200000a0 	.word	0x200000a0
 8000814:	200000c0 	.word	0x200000c0
 8000818:	00000808 	.word	0x00000808
 800081c:	200000a4 	.word	0x200000a4
 8000820:	00000804 	.word	0x00000804

08000824 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e00a      	b.n	800084c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000836:	e000      	b.n	800083a <_read+0x16>
 8000838:	bf00      	nop
 800083a:	0001      	movs	r1, r0
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	1c5a      	adds	r2, r3, #1
 8000840:	60ba      	str	r2, [r7, #8]
 8000842:	b2ca      	uxtb	r2, r1
 8000844:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	dbf0      	blt.n	8000836 <_read+0x12>
	}

return len;
 8000854:	687b      	ldr	r3, [r7, #4]
}
 8000856:	0018      	movs	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	b006      	add	sp, #24
 800085c:	bd80      	pop	{r7, pc}

0800085e <_close>:
	}
	return len;
}

int _close(int file)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	return -1;
 8000866:	2301      	movs	r3, #1
 8000868:	425b      	negs	r3, r3
}
 800086a:	0018      	movs	r0, r3
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}

08000872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	0192      	lsls	r2, r2, #6
 8000882:	605a      	str	r2, [r3, #4]
	return 0;
 8000884:	2300      	movs	r3, #0
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}

0800088e <_isatty>:

int _isatty(int file)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	return 1;
 8000896:	2301      	movs	r3, #1
}
 8000898:	0018      	movs	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	return 0;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	0018      	movs	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b004      	add	sp, #16
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c0:	4a14      	ldr	r2, [pc, #80]	; (8000914 <_sbrk+0x5c>)
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <_sbrk+0x60>)
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d102      	bne.n	80008da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <_sbrk+0x64>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <_sbrk+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	18d3      	adds	r3, r2, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d207      	bcs.n	80008f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e8:	f000 fd36 	bl	8001358 <__errno>
 80008ec:	0003      	movs	r3, r0
 80008ee:	220c      	movs	r2, #12
 80008f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	425b      	negs	r3, r3
 80008f6:	e009      	b.n	800090c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	18d2      	adds	r2, r2, r3
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <_sbrk+0x64>)
 8000908:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800090a:	68fb      	ldr	r3, [r7, #12]
}
 800090c:	0018      	movs	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	b006      	add	sp, #24
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20002000 	.word	0x20002000
 8000918:	00000400 	.word	0x00000400
 800091c:	200008cc 	.word	0x200008cc
 8000920:	200008e8 	.word	0x200008e8

08000924 <__NVIC_SetPriority>:
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	0002      	movs	r2, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b7f      	cmp	r3, #127	; 0x7f
 8000938:	d828      	bhi.n	800098c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093a:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <__NVIC_SetPriority+0xd4>)
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b25b      	sxtb	r3, r3
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	33c0      	adds	r3, #192	; 0xc0
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	589b      	ldr	r3, [r3, r2]
 800094a:	1dfa      	adds	r2, r7, #7
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	0011      	movs	r1, r2
 8000950:	2203      	movs	r2, #3
 8000952:	400a      	ands	r2, r1
 8000954:	00d2      	lsls	r2, r2, #3
 8000956:	21ff      	movs	r1, #255	; 0xff
 8000958:	4091      	lsls	r1, r2
 800095a:	000a      	movs	r2, r1
 800095c:	43d2      	mvns	r2, r2
 800095e:	401a      	ands	r2, r3
 8000960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	019b      	lsls	r3, r3, #6
 8000966:	22ff      	movs	r2, #255	; 0xff
 8000968:	401a      	ands	r2, r3
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	0018      	movs	r0, r3
 8000970:	2303      	movs	r3, #3
 8000972:	4003      	ands	r3, r0
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000978:	481f      	ldr	r0, [pc, #124]	; (80009f8 <__NVIC_SetPriority+0xd4>)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	089b      	lsrs	r3, r3, #2
 8000982:	430a      	orrs	r2, r1
 8000984:	33c0      	adds	r3, #192	; 0xc0
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	501a      	str	r2, [r3, r0]
}
 800098a:	e031      	b.n	80009f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <__NVIC_SetPriority+0xd8>)
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	0019      	movs	r1, r3
 8000994:	230f      	movs	r3, #15
 8000996:	400b      	ands	r3, r1
 8000998:	3b08      	subs	r3, #8
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	3306      	adds	r3, #6
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	3304      	adds	r3, #4
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	1dfa      	adds	r2, r7, #7
 80009a8:	7812      	ldrb	r2, [r2, #0]
 80009aa:	0011      	movs	r1, r2
 80009ac:	2203      	movs	r2, #3
 80009ae:	400a      	ands	r2, r1
 80009b0:	00d2      	lsls	r2, r2, #3
 80009b2:	21ff      	movs	r1, #255	; 0xff
 80009b4:	4091      	lsls	r1, r2
 80009b6:	000a      	movs	r2, r1
 80009b8:	43d2      	mvns	r2, r2
 80009ba:	401a      	ands	r2, r3
 80009bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	019b      	lsls	r3, r3, #6
 80009c2:	22ff      	movs	r2, #255	; 0xff
 80009c4:	401a      	ands	r2, r3
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	0018      	movs	r0, r3
 80009cc:	2303      	movs	r3, #3
 80009ce:	4003      	ands	r3, r0
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <__NVIC_SetPriority+0xd8>)
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	001c      	movs	r4, r3
 80009dc:	230f      	movs	r3, #15
 80009de:	4023      	ands	r3, r4
 80009e0:	3b08      	subs	r3, #8
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	430a      	orrs	r2, r1
 80009e6:	3306      	adds	r3, #6
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	18c3      	adds	r3, r0, r3
 80009ec:	3304      	adds	r3, #4
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b003      	add	sp, #12
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	045b      	lsls	r3, r3, #17
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d301      	bcc.n	8000a18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a14:	2301      	movs	r3, #1
 8000a16:	e010      	b.n	8000a3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <SysTick_Config+0x44>)
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	3a01      	subs	r2, #1
 8000a1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a20:	2301      	movs	r3, #1
 8000a22:	425b      	negs	r3, r3
 8000a24:	2103      	movs	r1, #3
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff ff7c 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SysTick_Config+0x44>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SysTick_Config+0x44>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <systemInit>:

static void SetSysClock(void);
static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
static void systickConfig(void);

void systemInit(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	SetSysClock();
 8000a4c:	f000 f828 	bl	8000aa0 <SetSysClock>
	systickConfig();
 8000a50:	f000 f818 	bl	8000a84 <systickConfig>
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <SysTick_CLKSourceConfig>:

static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d105      	bne.n	8000a76 <SysTick_CLKSourceConfig+0x1a>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SysTick_CLKSourceConfig+0x24>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SysTick_CLKSourceConfig+0x24>)
 8000a70:	2104      	movs	r1, #4
 8000a72:	430a      	orrs	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]
	}
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <systickConfig>:

static void systickConfig(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 8000a88:	2004      	movs	r0, #4
 8000a8a:	f7ff ffe7 	bl	8000a5c <SysTick_CLKSourceConfig>
	SysTick_Config(systemClock / 1000);
 8000a8e:	23fa      	movs	r3, #250	; 0xfa
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff ffb4 	bl	8000a00 <SysTick_Config>
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <SetSysClock>:

static void SetSysClock(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t) RCC_CR_HSEON);
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <SetSysClock+0xb4>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <SetSysClock+0xb4>)
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <SetSysClock+0xb4>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	029b      	lsls	r3, r3, #10
 8000abc:	4013      	ands	r3, r2
 8000abe:	d0f9      	beq.n	8000ab4 <SetSysClock+0x14>
		;

	/* Enable Prefetch Buffer and set Flash Latency */
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2;
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <SetSysClock+0xb8>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <SetSysClock+0xb8>)
 8000ac6:	2182      	movs	r1, #130	; 0x82
 8000ac8:	0049      	lsls	r1, r1, #1
 8000aca:	430a      	orrs	r2, r1
 8000acc:	601a      	str	r2, [r3, #0]
	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// APB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_HPRE);
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <SetSysClock+0xb4>)
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <SetSysClock+0xb4>)
 8000ad4:	4921      	ldr	r1, [pc, #132]	; (8000b5c <SetSysClock+0xbc>)
 8000ad6:	400a      	ands	r2, r1
 8000ad8:	609a      	str	r2, [r3, #8]
	// AHB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_PPRE);
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <SetSysClock+0xb4>)
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <SetSysClock+0xb4>)
 8000ae0:	491f      	ldr	r1, [pc, #124]	; (8000b60 <SetSysClock+0xc0>)
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	609a      	str	r2, [r3, #8]

	//PLL INPUT CLOCK SOURCE HSE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <SetSysClock+0xb4>)
 8000ae8:	68da      	ldr	r2, [r3, #12]
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <SetSysClock+0xb4>)
 8000aec:	2103      	movs	r1, #3
 8000aee:	430a      	orrs	r2, r1
 8000af0:	60da      	str	r2, [r3, #12]

	/* PLL configuration = HSE = 64 MHz */
	//PLLM = 1
	//PLLN = 16
	//PLLR = 2
	RCC->PLLCFGR &= (uint32_t) ((uint32_t) ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <SetSysClock+0xb4>)
 8000af4:	68da      	ldr	r2, [r3, #12]
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <SetSysClock+0xb4>)
 8000af8:	491a      	ldr	r1, [pc, #104]	; (8000b64 <SetSysClock+0xc4>)
 8000afa:	400a      	ands	r2, r1
 8000afc:	60da      	str	r2, [r3, #12]
			| RCC_PLLCFGR_PLLR));

	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <SetSysClock+0xb4>)
 8000b00:	68da      	ldr	r2, [r3, #12]
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <SetSysClock+0xb4>)
 8000b04:	4918      	ldr	r1, [pc, #96]	; (8000b68 <SetSysClock+0xc8>)
 8000b06:	430a      	orrs	r2, r1
 8000b08:	60da      	str	r2, [r3, #12]
			| (RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLREN) | (RCC_PLLCFGR_PLLQEN)
			| (RCC_PLLCFGR_PLLSRC_HSE);

	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <SetSysClock+0xb4>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <SetSysClock+0xb4>)
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	0449      	lsls	r1, r1, #17
 8000b14:	430a      	orrs	r2, r1
 8000b16:	601a      	str	r2, [r3, #0]

	/* Wait till PLL is ready */
	while ((RCC->CR & RCC_CR_PLLRDY) == 0) {
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <SetSysClock+0xb4>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	049b      	lsls	r3, r3, #18
 8000b22:	4013      	ands	r3, r2
 8000b24:	d0f9      	beq.n	8000b1a <SetSysClock+0x7a>
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (uint32_t) ((uint32_t) ~(RCC_CFGR_SW));
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <SetSysClock+0xb4>)
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <SetSysClock+0xb4>)
 8000b2c:	2107      	movs	r1, #7
 8000b2e:	438a      	bics	r2, r1
 8000b30:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= (uint32_t) RCC_CFGR_SW_1;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <SetSysClock+0xb4>)
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <SetSysClock+0xb4>)
 8000b38:	2102      	movs	r1, #2
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	609a      	str	r2, [r3, #8]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1)
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SetSysClock+0xb4>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	2238      	movs	r2, #56	; 0x38
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b10      	cmp	r3, #16
 8000b4a:	d1f9      	bne.n	8000b40 <SetSysClock+0xa0>
		;
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	fffff0ff 	.word	0xfffff0ff
 8000b60:	ffff8fff 	.word	0xffff8fff
 8000b64:	1fff808f 	.word	0x1fff808f
 8000b68:	31001003 	.word	0x31001003

08000b6c <RCC_DeInit>:

void RCC_DeInit(void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	  /* Set HSION bit to the reset value */
		RCC->CR |= RCC_CR_HSION;
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <RCC_DeInit+0x7c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <RCC_DeInit+0x7c>)
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	0049      	lsls	r1, r1, #1
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]
	  /* Wait till HSI is ready */
		while((RCC->CR& RCC_CR_HSIRDY)==0);
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <RCC_DeInit+0x7c>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	4013      	ands	r3, r2
 8000b8a:	d0f9      	beq.n	8000b80 <RCC_DeInit+0x14>
	  /* Set HSITRIM[6:0] bits to the reset value */
	  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <RCC_DeInit+0x7c>)
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	01d2      	lsls	r2, r2, #7
 8000b92:	605a      	str	r2, [r3, #4]
	  /* Reset CFGR register (HSI is selected as system clock source) */
	  RCC->CFGR = 0x00000000u;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <RCC_DeInit+0x7c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
	  /* Wait till HSI is ready */
	  while((RCC->CFGR & RCC_CFGR_SWS) != 0U)
 8000b9a:	e003      	b.n	8000ba4 <RCC_DeInit+0x38>
	  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
	  RCC->CR = RCC_CR_HSION;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <RCC_DeInit+0x7c>)
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	0052      	lsls	r2, r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]
	  while((RCC->CFGR & RCC_CFGR_SWS) != 0U)
 8000ba4:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <RCC_DeInit+0x7c>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	2238      	movs	r2, #56	; 0x38
 8000baa:	4013      	ands	r3, r2
 8000bac:	d1f6      	bne.n	8000b9c <RCC_DeInit+0x30>
	  /* Then again to HSEBYP in case bypass was enabled */
	  RCC->CR = RCC_CR_HSION;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <RCC_DeInit+0x7c>)
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	0052      	lsls	r2, r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]
	  /* Wait till PLL is ready */
	  while ((RCC->CR & RCC_CR_PLLRDY) != 0U)
 8000bb6:	e003      	b.n	8000bc0 <RCC_DeInit+0x54>
	  /* once PLL is OFF, reset PLLCFGR register to default value */
	  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <RCC_DeInit+0x7c>)
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	0152      	lsls	r2, r2, #5
 8000bbe:	60da      	str	r2, [r3, #12]
	  while ((RCC->CR & RCC_CR_PLLRDY) != 0U)
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <RCC_DeInit+0x7c>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	049b      	lsls	r3, r3, #18
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d1f5      	bne.n	8000bb8 <RCC_DeInit+0x4c>
	  /* Disable all interrupts */
	  RCC->CIER = 0x00000000u;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <RCC_DeInit+0x7c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
	  /* Clear all flags */
	  RCC->CICR = 0xFFFFFFFFu;
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <RCC_DeInit+0x7c>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4252      	negs	r2, r2
 8000bd8:	621a      	str	r2, [r3, #32]
	  /* Update the SystemCoreClock global variable */
	  SystemCoreClock = HSI_VALUE;
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <RCC_DeInit+0x80>)
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <RCC_DeInit+0x84>)
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	40021000 	.word	0x40021000
 8000bec:	20000004 	.word	0x20000004
 8000bf0:	00f42400 	.word	0x00f42400

08000bf4 <__NVIC_EnableIRQ>:
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b7f      	cmp	r3, #127	; 0x7f
 8000c06:	d809      	bhi.n	8000c1c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	231f      	movs	r3, #31
 8000c10:	401a      	ands	r2, r3
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_EnableIRQ+0x30>)
 8000c14:	2101      	movs	r1, #1
 8000c16:	4091      	lsls	r1, r2
 8000c18:	000a      	movs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	0002      	movs	r2, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c3c:	d828      	bhi.n	8000c90 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c3e:	4a2f      	ldr	r2, [pc, #188]	; (8000cfc <__NVIC_SetPriority+0xd4>)
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b25b      	sxtb	r3, r3
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	33c0      	adds	r3, #192	; 0xc0
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	589b      	ldr	r3, [r3, r2]
 8000c4e:	1dfa      	adds	r2, r7, #7
 8000c50:	7812      	ldrb	r2, [r2, #0]
 8000c52:	0011      	movs	r1, r2
 8000c54:	2203      	movs	r2, #3
 8000c56:	400a      	ands	r2, r1
 8000c58:	00d2      	lsls	r2, r2, #3
 8000c5a:	21ff      	movs	r1, #255	; 0xff
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	000a      	movs	r2, r1
 8000c60:	43d2      	mvns	r2, r2
 8000c62:	401a      	ands	r2, r3
 8000c64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	22ff      	movs	r2, #255	; 0xff
 8000c6c:	401a      	ands	r2, r3
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	0018      	movs	r0, r3
 8000c74:	2303      	movs	r3, #3
 8000c76:	4003      	ands	r3, r0
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c7c:	481f      	ldr	r0, [pc, #124]	; (8000cfc <__NVIC_SetPriority+0xd4>)
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b25b      	sxtb	r3, r3
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	430a      	orrs	r2, r1
 8000c88:	33c0      	adds	r3, #192	; 0xc0
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	501a      	str	r2, [r3, r0]
}
 8000c8e:	e031      	b.n	8000cf4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c90:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <__NVIC_SetPriority+0xd8>)
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	0019      	movs	r1, r3
 8000c98:	230f      	movs	r3, #15
 8000c9a:	400b      	ands	r3, r1
 8000c9c:	3b08      	subs	r3, #8
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3306      	adds	r3, #6
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	18d3      	adds	r3, r2, r3
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	1dfa      	adds	r2, r7, #7
 8000cac:	7812      	ldrb	r2, [r2, #0]
 8000cae:	0011      	movs	r1, r2
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	400a      	ands	r2, r1
 8000cb4:	00d2      	lsls	r2, r2, #3
 8000cb6:	21ff      	movs	r1, #255	; 0xff
 8000cb8:	4091      	lsls	r1, r2
 8000cba:	000a      	movs	r2, r1
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	019b      	lsls	r3, r3, #6
 8000cc6:	22ff      	movs	r2, #255	; 0xff
 8000cc8:	401a      	ands	r2, r3
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	0018      	movs	r0, r3
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	4003      	ands	r3, r0
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <__NVIC_SetPriority+0xd8>)
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	001c      	movs	r4, r3
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	4023      	ands	r3, r4
 8000ce4:	3b08      	subs	r3, #8
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	3306      	adds	r3, #6
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	18c3      	adds	r3, r0, r3
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	601a      	str	r2, [r3, #0]
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b003      	add	sp, #12
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <comm_init>:
static void MX_USART1_UART_Init(uint32_t baud);
static void uart1_putChar(uint8_t ch);
static void uart1_putString(uint8_t *str);
static void uart1_putArray(uint8_t *str, int len);

void comm_init(void){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0

	MX_USART1_UART_Init(PC_COMM_BAUD);
 8000d08:	2396      	movs	r3, #150	; 0x96
 8000d0a:	01db      	lsls	r3, r3, #7
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f000 f82b 	bl	8000d68 <MX_USART1_UART_Init>
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <PC_putChar>:


void PC_putChar(uint8_t ch){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	701a      	strb	r2, [r3, #0]
	uart1_putChar(ch);
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 f805 	bl	8000d38 <uart1_putChar>
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <uart1_putChar>:

void PC_putArray(uint8_t *str, int len){
	uart1_putArray(str,len);
}

static void uart1_putChar(uint8_t ch){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0002      	movs	r2, r0
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	701a      	strb	r2, [r3, #0]
	while ((USART1->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <uart1_putChar+0x2c>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b80      	cmp	r3, #128	; 0x80
 8000d50:	d1f9      	bne.n	8000d46 <uart1_putChar+0xe>
	USART1->TDR = ch;
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <uart1_putChar+0x2c>)
 8000d54:	1dfa      	adds	r2, r7, #7
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40013800 	.word	0x40013800

08000d68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(uint32_t baud)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Peripheral clock enable */
  	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8000d70:	4b70      	ldr	r3, [pc, #448]	; (8000f34 <MX_USART1_UART_Init+0x1cc>)
 8000d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d74:	4b6f      	ldr	r3, [pc, #444]	; (8000f34 <MX_USART1_UART_Init+0x1cc>)
 8000d76:	2101      	movs	r1, #1
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34
  	RCC->APBENR2 |= RCC_APBENR2_USART1EN;
 8000d7c:	4b6d      	ldr	r3, [pc, #436]	; (8000f34 <MX_USART1_UART_Init+0x1cc>)
 8000d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d80:	4b6c      	ldr	r3, [pc, #432]	; (8000f34 <MX_USART1_UART_Init+0x1cc>)
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	01c9      	lsls	r1, r1, #7
 8000d86:	430a      	orrs	r2, r1
 8000d88:	641a      	str	r2, [r3, #64]	; 0x40
  	    PA10     ------> USART1_RX
  	    PA9    ------> USART1_TX
  	    */
  	/*PB6     ------> USART1_TX*/
  	//mode AF
  	GPIOA->MODER &= ~GPIO_MODER_MODE9;
 8000d8a:	23a0      	movs	r3, #160	; 0xa0
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	23a0      	movs	r3, #160	; 0xa0
 8000d92:	05db      	lsls	r3, r3, #23
 8000d94:	4968      	ldr	r1, [pc, #416]	; (8000f38 <MX_USART1_UART_Init+0x1d0>)
 8000d96:	400a      	ands	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
  	GPIOA->MODER |=  GPIO_MODER_MODE9_1;//mode AF
 8000d9a:	23a0      	movs	r3, #160	; 0xa0
 8000d9c:	05db      	lsls	r3, r3, #23
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	23a0      	movs	r3, #160	; 0xa0
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	0309      	lsls	r1, r1, #12
 8000da8:	430a      	orrs	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]
  	//mode push-pull
  	GPIOA ->OTYPER &= ~GPIO_OTYPER_OT9;
 8000dac:	23a0      	movs	r3, #160	; 0xa0
 8000dae:	05db      	lsls	r3, r3, #23
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	23a0      	movs	r3, #160	; 0xa0
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	4961      	ldr	r1, [pc, #388]	; (8000f3c <MX_USART1_UART_Init+0x1d4>)
 8000db8:	400a      	ands	r2, r1
 8000dba:	605a      	str	r2, [r3, #4]
  	//type noPull
  	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD9;
 8000dbc:	23a0      	movs	r3, #160	; 0xa0
 8000dbe:	05db      	lsls	r3, r3, #23
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	23a0      	movs	r3, #160	; 0xa0
 8000dc4:	05db      	lsls	r3, r3, #23
 8000dc6:	495c      	ldr	r1, [pc, #368]	; (8000f38 <MX_USART1_UART_Init+0x1d0>)
 8000dc8:	400a      	ands	r2, r1
 8000dca:	60da      	str	r2, [r3, #12]
  	//speed low
  	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED9;
 8000dcc:	23a0      	movs	r3, #160	; 0xa0
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	23a0      	movs	r3, #160	; 0xa0
 8000dd4:	05db      	lsls	r3, r3, #23
 8000dd6:	4958      	ldr	r1, [pc, #352]	; (8000f38 <MX_USART1_UART_Init+0x1d0>)
 8000dd8:	400a      	ands	r2, r1
 8000dda:	609a      	str	r2, [r3, #8]

  	/*PB7     ------> USART1_RX*/
  	//modeAF
  	GPIOA->MODER &= ~GPIO_MODER_MODE10;
 8000ddc:	23a0      	movs	r3, #160	; 0xa0
 8000dde:	05db      	lsls	r3, r3, #23
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	23a0      	movs	r3, #160	; 0xa0
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	4956      	ldr	r1, [pc, #344]	; (8000f40 <MX_USART1_UART_Init+0x1d8>)
 8000de8:	400a      	ands	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]
  	GPIOA->MODER |=  GPIO_MODER_MODE10_1;//mode AF
 8000dec:	23a0      	movs	r3, #160	; 0xa0
 8000dee:	05db      	lsls	r3, r3, #23
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	23a0      	movs	r3, #160	; 0xa0
 8000df4:	05db      	lsls	r3, r3, #23
 8000df6:	2180      	movs	r1, #128	; 0x80
 8000df8:	0389      	lsls	r1, r1, #14
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]
	//mode push-pull
  	GPIOA ->OTYPER &= ~GPIO_OTYPER_OT10;
 8000dfe:	23a0      	movs	r3, #160	; 0xa0
 8000e00:	05db      	lsls	r3, r3, #23
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	23a0      	movs	r3, #160	; 0xa0
 8000e06:	05db      	lsls	r3, r3, #23
 8000e08:	494e      	ldr	r1, [pc, #312]	; (8000f44 <MX_USART1_UART_Init+0x1dc>)
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	605a      	str	r2, [r3, #4]
  	//type noPull
  	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD10;
 8000e0e:	23a0      	movs	r3, #160	; 0xa0
 8000e10:	05db      	lsls	r3, r3, #23
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	23a0      	movs	r3, #160	; 0xa0
 8000e16:	05db      	lsls	r3, r3, #23
 8000e18:	4949      	ldr	r1, [pc, #292]	; (8000f40 <MX_USART1_UART_Init+0x1d8>)
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	60da      	str	r2, [r3, #12]
  	//speed low
  	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED10;
 8000e1e:	23a0      	movs	r3, #160	; 0xa0
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	23a0      	movs	r3, #160	; 0xa0
 8000e26:	05db      	lsls	r3, r3, #23
 8000e28:	4945      	ldr	r1, [pc, #276]	; (8000f40 <MX_USART1_UART_Init+0x1d8>)
 8000e2a:	400a      	ands	r2, r1
 8000e2c:	609a      	str	r2, [r3, #8]
  	//sel AF0 for uart
  	/*GPIOA->AFR[0] &= ~GPIO_AFRH_AFSEL9;//AF1
  	GPIOA->AFR[0] &= ~GPIO_AFRH_AFSEL10;//AF1S*/
  	//0b0001

  	GPIOA->AFR[1] |=  GPIO_AFRH_AFSEL9_0;//AF1
 8000e2e:	23a0      	movs	r3, #160	; 0xa0
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e34:	23a0      	movs	r3, #160	; 0xa0
 8000e36:	05db      	lsls	r3, r3, #23
 8000e38:	2110      	movs	r1, #16
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL9_1;
 8000e3e:	23a0      	movs	r3, #160	; 0xa0
 8000e40:	05db      	lsls	r3, r3, #23
 8000e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e44:	23a0      	movs	r3, #160	; 0xa0
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	2120      	movs	r1, #32
 8000e4a:	438a      	bics	r2, r1
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL9_2;
 8000e4e:	23a0      	movs	r3, #160	; 0xa0
 8000e50:	05db      	lsls	r3, r3, #23
 8000e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e54:	23a0      	movs	r3, #160	; 0xa0
 8000e56:	05db      	lsls	r3, r3, #23
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	438a      	bics	r2, r1
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL9_3;
 8000e5e:	23a0      	movs	r3, #160	; 0xa0
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e64:	23a0      	movs	r3, #160	; 0xa0
 8000e66:	05db      	lsls	r3, r3, #23
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	438a      	bics	r2, r1
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
  	//0b001
	GPIOA->AFR[1] |=  GPIO_AFRH_AFSEL10_0;//AF1
 8000e6e:	23a0      	movs	r3, #160	; 0xa0
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e74:	23a0      	movs	r3, #160	; 0xa0
 8000e76:	05db      	lsls	r3, r3, #23
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	0049      	lsls	r1, r1, #1
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL10_1;
 8000e80:	23a0      	movs	r3, #160	; 0xa0
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e86:	23a0      	movs	r3, #160	; 0xa0
 8000e88:	05db      	lsls	r3, r3, #23
 8000e8a:	492c      	ldr	r1, [pc, #176]	; (8000f3c <MX_USART1_UART_Init+0x1d4>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL10_2;
 8000e90:	23a0      	movs	r3, #160	; 0xa0
 8000e92:	05db      	lsls	r3, r3, #23
 8000e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e96:	23a0      	movs	r3, #160	; 0xa0
 8000e98:	05db      	lsls	r3, r3, #23
 8000e9a:	492a      	ldr	r1, [pc, #168]	; (8000f44 <MX_USART1_UART_Init+0x1dc>)
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL10_3;
 8000ea0:	23a0      	movs	r3, #160	; 0xa0
 8000ea2:	05db      	lsls	r3, r3, #23
 8000ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea6:	23a0      	movs	r3, #160	; 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	4927      	ldr	r1, [pc, #156]	; (8000f48 <MX_USART1_UART_Init+0x1e0>)
 8000eac:	400a      	ands	r2, r1
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24


  	USART1->CR1 = 0;
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
  	// Word length 8n1
  	USART1->CR1 &= ~USART_CR1_M1;
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000ebc:	4924      	ldr	r1, [pc, #144]	; (8000f50 <MX_USART1_UART_Init+0x1e8>)
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]
  	//Parity disable
  	USART1->CR1 &= ~USART_CR1_PCE;
 8000ec2:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000ec8:	491e      	ldr	r1, [pc, #120]	; (8000f44 <MX_USART1_UART_Init+0x1dc>)
 8000eca:	400a      	ands	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
  	//mode Tx_Rx
  	USART1->CR1 |= USART_CR1_TE;
 8000ece:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000ed4:	2108      	movs	r1, #8
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
  	USART1->CR1 |= USART_CR1_RE;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]
  	//OverSampling 16bit
  	USART1->CR1 &= ~USART_CR1_OVER8;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000eec:	4919      	ldr	r1, [pc, #100]	; (8000f54 <MX_USART1_UART_Init+0x1ec>)
 8000eee:	400a      	ands	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]
  	//ClockPrescaler no div
  	USART1->PRESC &= USART_PRESC_PRESCALER;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000ef8:	210f      	movs	r1, #15
 8000efa:	400a      	ands	r2, r1
 8000efc:	62da      	str	r2, [r3, #44]	; 0x2c
  	//set baudrate 115200
	USART1->BRR = 0xd05;
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000f00:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <MX_USART1_UART_Init+0x1f0>)
 8000f02:	60da      	str	r2, [r3, #12]
  	//USART1->BRR = 0x22b;

  	//rx interupt enable
  	USART1->CR1 |= USART_CR1_RXNEIE_RXFNEIE;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]

  	//set uart1 interrupt
  	NVIC_SetPriority(USART1_IRQn, 0);
 8000f10:	2100      	movs	r1, #0
 8000f12:	201b      	movs	r0, #27
 8000f14:	f7ff fe88 	bl	8000c28 <__NVIC_SetPriority>
  	NVIC_EnableIRQ(USART1_IRQn);
 8000f18:	201b      	movs	r0, #27
 8000f1a:	f7ff fe6b 	bl	8000bf4 <__NVIC_EnableIRQ>

  	//uart enable
  	USART1->CR1 |= USART_CR1_UE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_USART1_UART_Init+0x1e4>)
 8000f24:	2101      	movs	r1, #1
 8000f26:	430a      	orrs	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	40021000 	.word	0x40021000
 8000f38:	fff3ffff 	.word	0xfff3ffff
 8000f3c:	fffffdff 	.word	0xfffffdff
 8000f40:	ffcfffff 	.word	0xffcfffff
 8000f44:	fffffbff 	.word	0xfffffbff
 8000f48:	fffff7ff 	.word	0xfffff7ff
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	efffffff 	.word	0xefffffff
 8000f54:	ffff7fff 	.word	0xffff7fff
 8000f58:	00000d05 	.word	0x00000d05

08000f5c <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	0002      	movs	r2, r0
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	701a      	strb	r2, [r3, #0]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <xputc+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d008      	beq.n	8000f82 <xputc+0x26>
		*outptr++ = (unsigned char)c;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <xputc+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	1c59      	adds	r1, r3, #1
 8000f76:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <xputc+0x40>)
 8000f78:	6011      	str	r1, [r2, #0]
 8000f7a:	1dfa      	adds	r2, r7, #7
 8000f7c:	7812      	ldrb	r2, [r2, #0]
 8000f7e:	701a      	strb	r2, [r3, #0]
		return;
 8000f80:	e009      	b.n	8000f96 <xputc+0x3a>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <xputc+0x44>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d005      	beq.n	8000f96 <xputc+0x3a>
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <xputc+0x44>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	1dfa      	adds	r2, r7, #7
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	0010      	movs	r0, r2
 8000f94:	4798      	blx	r3
}
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b002      	add	sp, #8
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200008d4 	.word	0x200008d4
 8000fa0:	200008d0 	.word	0x200008d0

08000fa4 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	while (*str)
 8000fac:	e006      	b.n	8000fbc <xputs+0x18>
		xputc(*str++);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff ffd0 	bl	8000f5c <xputc>
	while (*str)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1f4      	bne.n	8000fae <xputs+0xa>
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b08f      	sub	sp, #60	; 0x3c
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	211f      	movs	r1, #31
 8000fe2:	187a      	adds	r2, r7, r1
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	7013      	strb	r3, [r2, #0]
		if (!c) break;				/* End of format? */
 8000fe8:	000a      	movs	r2, r1
 8000fea:	18bb      	adds	r3, r7, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d100      	bne.n	8000ff4 <xvprintf+0x24>
 8000ff2:	e164      	b.n	80012be <xvprintf+0x2ee>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8000ff4:	18bb      	adds	r3, r7, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b25      	cmp	r3, #37	; 0x25
 8000ffa:	d005      	beq.n	8001008 <xvprintf+0x38>
			xputc(c); continue;
 8000ffc:	18bb      	adds	r3, r7, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff ffab 	bl	8000f5c <xputc>
 8001006:	e159      	b.n	80012bc <xvprintf+0x2ec>
		}
		f = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	211f      	movs	r1, #31
 8001014:	187a      	adds	r2, r7, r1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padded */
 800101a:	187b      	adds	r3, r7, r1
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b30      	cmp	r3, #48	; 0x30
 8001020:	d108      	bne.n	8001034 <xvprintf+0x64>
			f = 1; c = *fmt++;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	187a      	adds	r2, r7, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	7013      	strb	r3, [r2, #0]
 8001032:	e00c      	b.n	800104e <xvprintf+0x7e>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8001034:	211f      	movs	r1, #31
 8001036:	187b      	adds	r3, r7, r1
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b2d      	cmp	r3, #45	; 0x2d
 800103c:	d107      	bne.n	800104e <xvprintf+0x7e>
				f = 2; c = *fmt++;
 800103e:	2302      	movs	r3, #2
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	187a      	adds	r2, r7, r1
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	7013      	strb	r3, [r2, #0]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
 8001052:	e011      	b.n	8001078 <xvprintf+0xa8>
			w = w * 10 + c - '0';
 8001054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001056:	0013      	movs	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	189b      	adds	r3, r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	001a      	movs	r2, r3
 8001060:	211f      	movs	r1, #31
 8001062:	187b      	adds	r3, r7, r1
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	18d3      	adds	r3, r2, r3
 8001068:	3b30      	subs	r3, #48	; 0x30
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	187a      	adds	r2, r7, r1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	7013      	strb	r3, [r2, #0]
 8001078:	221f      	movs	r2, #31
 800107a:	18bb      	adds	r3, r7, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b2f      	cmp	r3, #47	; 0x2f
 8001080:	d903      	bls.n	800108a <xvprintf+0xba>
 8001082:	18bb      	adds	r3, r7, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b39      	cmp	r3, #57	; 0x39
 8001088:	d9e4      	bls.n	8001054 <xvprintf+0x84>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800108a:	221f      	movs	r2, #31
 800108c:	18bb      	adds	r3, r7, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b6c      	cmp	r3, #108	; 0x6c
 8001092:	d003      	beq.n	800109c <xvprintf+0xcc>
 8001094:	18bb      	adds	r3, r7, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b4c      	cmp	r3, #76	; 0x4c
 800109a:	d10a      	bne.n	80010b2 <xvprintf+0xe2>
			f |= 4; c = *fmt++;
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	2204      	movs	r2, #4
 80010a0:	4313      	orrs	r3, r2
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	221f      	movs	r2, #31
 80010ac:	18ba      	adds	r2, r7, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;				/* End of format? */
 80010b2:	221f      	movs	r2, #31
 80010b4:	18bb      	adds	r3, r7, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d100      	bne.n	80010be <xvprintf+0xee>
 80010bc:	e101      	b.n	80012c2 <xvprintf+0x2f2>
		d = c;
 80010be:	211e      	movs	r1, #30
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	18ba      	adds	r2, r7, r2
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
		if (d >= 'a') d -= 0x20;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b60      	cmp	r3, #96	; 0x60
 80010ce:	d904      	bls.n	80010da <xvprintf+0x10a>
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	187a      	adds	r2, r7, r1
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	3a20      	subs	r2, #32
 80010d8:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 80010da:	231e      	movs	r3, #30
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	3b42      	subs	r3, #66	; 0x42
 80010e2:	2b16      	cmp	r3, #22
 80010e4:	d847      	bhi.n	8001176 <xvprintf+0x1a6>
 80010e6:	009a      	lsls	r2, r3, #2
 80010e8:	4b78      	ldr	r3, [pc, #480]	; (80012cc <xvprintf+0x2fc>)
 80010ea:	18d3      	adds	r3, r2, r3
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	1d1a      	adds	r2, r3, #4
 80010f4:	603a      	str	r2, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010fe:	e002      	b.n	8001106 <xvprintf+0x136>
 8001100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001102:	3301      	adds	r3, #1
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	18d3      	adds	r3, r2, r3
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f6      	bne.n	8001100 <xvprintf+0x130>
			while (!(f & 2) && j++ < w) xputc(' ');
 8001112:	e002      	b.n	800111a <xvprintf+0x14a>
 8001114:	2020      	movs	r0, #32
 8001116:	f7ff ff21 	bl	8000f5c <xputc>
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	2202      	movs	r2, #2
 800111e:	4013      	ands	r3, r2
 8001120:	d105      	bne.n	800112e <xvprintf+0x15e>
 8001122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800112a:	429a      	cmp	r2, r3
 800112c:	d8f2      	bhi.n	8001114 <xvprintf+0x144>
			xputs(p);
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff ff37 	bl	8000fa4 <xputs>
			while (j++ < w) xputc(' ');
 8001136:	e002      	b.n	800113e <xvprintf+0x16e>
 8001138:	2020      	movs	r0, #32
 800113a:	f7ff ff0f 	bl	8000f5c <xputc>
 800113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001146:	429a      	cmp	r2, r3
 8001148:	d8f6      	bhi.n	8001138 <xvprintf+0x168>
			continue;
 800114a:	e0b7      	b.n	80012bc <xvprintf+0x2ec>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	1d1a      	adds	r2, r3, #4
 8001150:	603a      	str	r2, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff ff00 	bl	8000f5c <xputc>
 800115c:	e0ae      	b.n	80012bc <xvprintf+0x2ec>
		case 'B' :					/* Binary */
			r = 2; break;
 800115e:	2302      	movs	r3, #2
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
 8001162:	e00f      	b.n	8001184 <xvprintf+0x1b4>
		case 'O' :					/* Octal */
			r = 8; break;
 8001164:	2308      	movs	r3, #8
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
 8001168:	e00c      	b.n	8001184 <xvprintf+0x1b4>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800116a:	230a      	movs	r3, #10
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
 800116e:	e009      	b.n	8001184 <xvprintf+0x1b4>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8001170:	2310      	movs	r3, #16
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
 8001174:	e006      	b.n	8001184 <xvprintf+0x1b4>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8001176:	231f      	movs	r3, #31
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff feed 	bl	8000f5c <xputc>
 8001182:	e09b      	b.n	80012bc <xvprintf+0x2ec>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	2204      	movs	r2, #4
 8001188:	4013      	ands	r3, r2
 800118a:	d004      	beq.n	8001196 <xvprintf+0x1c6>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	1d1a      	adds	r2, r3, #4
 8001190:	603a      	str	r2, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	e00d      	b.n	80011b2 <xvprintf+0x1e2>
 8001196:	231e      	movs	r3, #30
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b44      	cmp	r3, #68	; 0x44
 800119e:	d104      	bne.n	80011aa <xvprintf+0x1da>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	1d1a      	adds	r2, r3, #4
 80011a4:	603a      	str	r2, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	e003      	b.n	80011b2 <xvprintf+0x1e2>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	1d1a      	adds	r2, r3, #4
 80011ae:	603a      	str	r2, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 80011b4:	231e      	movs	r3, #30
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b44      	cmp	r3, #68	; 0x44
 80011bc:	d109      	bne.n	80011d2 <xvprintf+0x202>
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da06      	bge.n	80011d2 <xvprintf+0x202>
			v = 0 - v;
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	425b      	negs	r3, r3
 80011c8:	623b      	str	r3, [r7, #32]
			f |= 8;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	2208      	movs	r2, #8
 80011ce:	4313      	orrs	r3, r2
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011da:	0018      	movs	r0, r3
 80011dc:	f7ff f822 	bl	8000224 <__aeabi_uidivmod>
 80011e0:	000b      	movs	r3, r1
 80011e2:	001a      	movs	r2, r3
 80011e4:	241e      	movs	r4, #30
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80011ec:	6a38      	ldr	r0, [r7, #32]
 80011ee:	f7fe ff93 	bl	8000118 <__udivsi3>
 80011f2:	0003      	movs	r3, r0
 80011f4:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80011f6:	193b      	adds	r3, r7, r4
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b09      	cmp	r3, #9
 80011fc:	d90d      	bls.n	800121a <xvprintf+0x24a>
 80011fe:	231f      	movs	r3, #31
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b78      	cmp	r3, #120	; 0x78
 8001206:	d101      	bne.n	800120c <xvprintf+0x23c>
 8001208:	2327      	movs	r3, #39	; 0x27
 800120a:	e000      	b.n	800120e <xvprintf+0x23e>
 800120c:	2307      	movs	r3, #7
 800120e:	211e      	movs	r1, #30
 8001210:	187a      	adds	r2, r7, r1
 8001212:	1879      	adds	r1, r7, r1
 8001214:	7809      	ldrb	r1, [r1, #0]
 8001216:	185b      	adds	r3, r3, r1
 8001218:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 800121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	633a      	str	r2, [r7, #48]	; 0x30
 8001220:	221e      	movs	r2, #30
 8001222:	18ba      	adds	r2, r7, r2
 8001224:	7812      	ldrb	r2, [r2, #0]
 8001226:	3230      	adds	r2, #48	; 0x30
 8001228:	b2d1      	uxtb	r1, r2
 800122a:	2208      	movs	r2, #8
 800122c:	18ba      	adds	r2, r7, r2
 800122e:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof(s));
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <xvprintf+0x26c>
 8001236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d9cc      	bls.n	80011d6 <xvprintf+0x206>
		if (f & 8) s[i++] = '-';
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	2208      	movs	r2, #8
 8001240:	4013      	ands	r3, r2
 8001242:	d006      	beq.n	8001252 <xvprintf+0x282>
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	633a      	str	r2, [r7, #48]	; 0x30
 800124a:	2208      	movs	r2, #8
 800124c:	18ba      	adds	r2, r7, r2
 800124e:	212d      	movs	r1, #45	; 0x2d
 8001250:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 8001252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	2201      	movs	r2, #1
 800125a:	4013      	ands	r3, r2
 800125c:	d001      	beq.n	8001262 <xvprintf+0x292>
 800125e:	2230      	movs	r2, #48	; 0x30
 8001260:	e000      	b.n	8001264 <xvprintf+0x294>
 8001262:	2220      	movs	r2, #32
 8001264:	231e      	movs	r3, #30
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) xputc(d);
 800126a:	e005      	b.n	8001278 <xvprintf+0x2a8>
 800126c:	231e      	movs	r3, #30
 800126e:	18fb      	adds	r3, r7, r3
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	0018      	movs	r0, r3
 8001274:	f7ff fe72 	bl	8000f5c <xputc>
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d105      	bne.n	800128c <xvprintf+0x2bc>
 8001280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001288:	429a      	cmp	r2, r3
 800128a:	d8ef      	bhi.n	800126c <xvprintf+0x29c>
		do xputc(s[--i]); while(i);
 800128c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128e:	3b01      	subs	r3, #1
 8001290:	633b      	str	r3, [r7, #48]	; 0x30
 8001292:	2308      	movs	r3, #8
 8001294:	18fa      	adds	r2, r7, r3
 8001296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001298:	18d3      	adds	r3, r2, r3
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff fe5d 	bl	8000f5c <xputc>
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f1      	bne.n	800128c <xvprintf+0x2bc>
		while (j++ < w) xputc(' ');
 80012a8:	e002      	b.n	80012b0 <xvprintf+0x2e0>
 80012aa:	2020      	movs	r0, #32
 80012ac:	f7ff fe56 	bl	8000f5c <xputc>
 80012b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80012b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f6      	bhi.n	80012aa <xvprintf+0x2da>
		c = *fmt++;					/* Get a char */
 80012bc:	e68d      	b.n	8000fda <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	e000      	b.n	80012c4 <xvprintf+0x2f4>
		if (!c) break;				/* End of format? */
 80012c2:	46c0      	nop			; (mov r8, r8)
	}
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b00f      	add	sp, #60	; 0x3c
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	08002518 	.word	0x08002518

080012d0 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 80012d0:	b40f      	push	{r0, r1, r2, r3}
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 80012d8:	2314      	movs	r3, #20
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	0011      	movs	r1, r2
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff fe73 	bl	8000fd0 <xvprintf>
	va_end(arp);
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bc80      	pop	{r7}
 80012f2:	bc08      	pop	{r3}
 80012f4:	b004      	add	sp, #16
 80012f6:	4718      	bx	r3

080012f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012fc:	e000      	b.n	8001300 <Reset_Handler+0x8>
 80012fe:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopForever+0x6>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopForever+0xe>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopForever+0x16>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001326:	f000 f81d 	bl	8001364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132a:	f7ff f9cf 	bl	80006cc <main>

0800132e <LoopForever>:

LoopForever:
    b LoopForever
 800132e:	e7fe      	b.n	800132e <LoopForever>
  ldr   r0, =_estack
 8001330:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800133c:	08002718 	.word	0x08002718
  ldr r2, =_sbss
 8001340:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001344:	200008e8 	.word	0x200008e8

08001348 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC_COMP_IRQHandler>

0800134a <atoi>:
 800134a:	b510      	push	{r4, lr}
 800134c:	220a      	movs	r2, #10
 800134e:	2100      	movs	r1, #0
 8001350:	f000 f8dc 	bl	800150c <strtol>
 8001354:	bd10      	pop	{r4, pc}
	...

08001358 <__errno>:
 8001358:	4b01      	ldr	r3, [pc, #4]	; (8001360 <__errno+0x8>)
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	4770      	bx	lr
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	20000008 	.word	0x20000008

08001364 <__libc_init_array>:
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	2600      	movs	r6, #0
 8001368:	4d0c      	ldr	r5, [pc, #48]	; (800139c <__libc_init_array+0x38>)
 800136a:	4c0d      	ldr	r4, [pc, #52]	; (80013a0 <__libc_init_array+0x3c>)
 800136c:	1b64      	subs	r4, r4, r5
 800136e:	10a4      	asrs	r4, r4, #2
 8001370:	42a6      	cmp	r6, r4
 8001372:	d109      	bne.n	8001388 <__libc_init_array+0x24>
 8001374:	2600      	movs	r6, #0
 8001376:	f001 f893 	bl	80024a0 <_init>
 800137a:	4d0a      	ldr	r5, [pc, #40]	; (80013a4 <__libc_init_array+0x40>)
 800137c:	4c0a      	ldr	r4, [pc, #40]	; (80013a8 <__libc_init_array+0x44>)
 800137e:	1b64      	subs	r4, r4, r5
 8001380:	10a4      	asrs	r4, r4, #2
 8001382:	42a6      	cmp	r6, r4
 8001384:	d105      	bne.n	8001392 <__libc_init_array+0x2e>
 8001386:	bd70      	pop	{r4, r5, r6, pc}
 8001388:	00b3      	lsls	r3, r6, #2
 800138a:	58eb      	ldr	r3, [r5, r3]
 800138c:	4798      	blx	r3
 800138e:	3601      	adds	r6, #1
 8001390:	e7ee      	b.n	8001370 <__libc_init_array+0xc>
 8001392:	00b3      	lsls	r3, r6, #2
 8001394:	58eb      	ldr	r3, [r5, r3]
 8001396:	4798      	blx	r3
 8001398:	3601      	adds	r6, #1
 800139a:	e7f2      	b.n	8001382 <__libc_init_array+0x1e>
 800139c:	08002710 	.word	0x08002710
 80013a0:	08002710 	.word	0x08002710
 80013a4:	08002710 	.word	0x08002710
 80013a8:	08002714 	.word	0x08002714

080013ac <memset>:
 80013ac:	0003      	movs	r3, r0
 80013ae:	1882      	adds	r2, r0, r2
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d100      	bne.n	80013b6 <memset+0xa>
 80013b4:	4770      	bx	lr
 80013b6:	7019      	strb	r1, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	e7f9      	b.n	80013b0 <memset+0x4>

080013bc <iprintf>:
 80013bc:	b40f      	push	{r0, r1, r2, r3}
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <iprintf+0x30>)
 80013c0:	b513      	push	{r0, r1, r4, lr}
 80013c2:	681c      	ldr	r4, [r3, #0]
 80013c4:	2c00      	cmp	r4, #0
 80013c6:	d005      	beq.n	80013d4 <iprintf+0x18>
 80013c8:	69a3      	ldr	r3, [r4, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <iprintf+0x18>
 80013ce:	0020      	movs	r0, r4
 80013d0:	f000 f90a 	bl	80015e8 <__sinit>
 80013d4:	ab05      	add	r3, sp, #20
 80013d6:	0020      	movs	r0, r4
 80013d8:	9a04      	ldr	r2, [sp, #16]
 80013da:	68a1      	ldr	r1, [r4, #8]
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	f000 fa67 	bl	80018b0 <_vfiprintf_r>
 80013e2:	bc16      	pop	{r1, r2, r4}
 80013e4:	bc08      	pop	{r3}
 80013e6:	b004      	add	sp, #16
 80013e8:	4718      	bx	r3
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	20000008 	.word	0x20000008

080013f0 <_strtol_l.constprop.0>:
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b087      	sub	sp, #28
 80013f4:	001e      	movs	r6, r3
 80013f6:	9005      	str	r0, [sp, #20]
 80013f8:	9101      	str	r1, [sp, #4]
 80013fa:	9202      	str	r2, [sp, #8]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d045      	beq.n	800148c <_strtol_l.constprop.0+0x9c>
 8001400:	000b      	movs	r3, r1
 8001402:	2e24      	cmp	r6, #36	; 0x24
 8001404:	d842      	bhi.n	800148c <_strtol_l.constprop.0+0x9c>
 8001406:	4a3f      	ldr	r2, [pc, #252]	; (8001504 <_strtol_l.constprop.0+0x114>)
 8001408:	2108      	movs	r1, #8
 800140a:	4694      	mov	ip, r2
 800140c:	001a      	movs	r2, r3
 800140e:	4660      	mov	r0, ip
 8001410:	7814      	ldrb	r4, [r2, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	5d00      	ldrb	r0, [r0, r4]
 8001416:	001d      	movs	r5, r3
 8001418:	0007      	movs	r7, r0
 800141a:	400f      	ands	r7, r1
 800141c:	4208      	tst	r0, r1
 800141e:	d1f5      	bne.n	800140c <_strtol_l.constprop.0+0x1c>
 8001420:	2c2d      	cmp	r4, #45	; 0x2d
 8001422:	d13a      	bne.n	800149a <_strtol_l.constprop.0+0xaa>
 8001424:	2701      	movs	r7, #1
 8001426:	781c      	ldrb	r4, [r3, #0]
 8001428:	1c95      	adds	r5, r2, #2
 800142a:	2e00      	cmp	r6, #0
 800142c:	d065      	beq.n	80014fa <_strtol_l.constprop.0+0x10a>
 800142e:	2e10      	cmp	r6, #16
 8001430:	d109      	bne.n	8001446 <_strtol_l.constprop.0+0x56>
 8001432:	2c30      	cmp	r4, #48	; 0x30
 8001434:	d107      	bne.n	8001446 <_strtol_l.constprop.0+0x56>
 8001436:	2220      	movs	r2, #32
 8001438:	782b      	ldrb	r3, [r5, #0]
 800143a:	4393      	bics	r3, r2
 800143c:	2b58      	cmp	r3, #88	; 0x58
 800143e:	d157      	bne.n	80014f0 <_strtol_l.constprop.0+0x100>
 8001440:	2610      	movs	r6, #16
 8001442:	786c      	ldrb	r4, [r5, #1]
 8001444:	3502      	adds	r5, #2
 8001446:	4b30      	ldr	r3, [pc, #192]	; (8001508 <_strtol_l.constprop.0+0x118>)
 8001448:	0031      	movs	r1, r6
 800144a:	18fb      	adds	r3, r7, r3
 800144c:	0018      	movs	r0, r3
 800144e:	9303      	str	r3, [sp, #12]
 8001450:	f7fe fee8 	bl	8000224 <__aeabi_uidivmod>
 8001454:	2300      	movs	r3, #0
 8001456:	2201      	movs	r2, #1
 8001458:	4684      	mov	ip, r0
 800145a:	0018      	movs	r0, r3
 800145c:	9104      	str	r1, [sp, #16]
 800145e:	4252      	negs	r2, r2
 8001460:	0021      	movs	r1, r4
 8001462:	3930      	subs	r1, #48	; 0x30
 8001464:	2909      	cmp	r1, #9
 8001466:	d81d      	bhi.n	80014a4 <_strtol_l.constprop.0+0xb4>
 8001468:	000c      	movs	r4, r1
 800146a:	42a6      	cmp	r6, r4
 800146c:	dd28      	ble.n	80014c0 <_strtol_l.constprop.0+0xd0>
 800146e:	2b00      	cmp	r3, #0
 8001470:	db24      	blt.n	80014bc <_strtol_l.constprop.0+0xcc>
 8001472:	0013      	movs	r3, r2
 8001474:	4584      	cmp	ip, r0
 8001476:	d306      	bcc.n	8001486 <_strtol_l.constprop.0+0x96>
 8001478:	d102      	bne.n	8001480 <_strtol_l.constprop.0+0x90>
 800147a:	9904      	ldr	r1, [sp, #16]
 800147c:	42a1      	cmp	r1, r4
 800147e:	db02      	blt.n	8001486 <_strtol_l.constprop.0+0x96>
 8001480:	2301      	movs	r3, #1
 8001482:	4370      	muls	r0, r6
 8001484:	1820      	adds	r0, r4, r0
 8001486:	782c      	ldrb	r4, [r5, #0]
 8001488:	3501      	adds	r5, #1
 800148a:	e7e9      	b.n	8001460 <_strtol_l.constprop.0+0x70>
 800148c:	f7ff ff64 	bl	8001358 <__errno>
 8001490:	2316      	movs	r3, #22
 8001492:	6003      	str	r3, [r0, #0]
 8001494:	2000      	movs	r0, #0
 8001496:	b007      	add	sp, #28
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149a:	2c2b      	cmp	r4, #43	; 0x2b
 800149c:	d1c5      	bne.n	800142a <_strtol_l.constprop.0+0x3a>
 800149e:	781c      	ldrb	r4, [r3, #0]
 80014a0:	1c95      	adds	r5, r2, #2
 80014a2:	e7c2      	b.n	800142a <_strtol_l.constprop.0+0x3a>
 80014a4:	0021      	movs	r1, r4
 80014a6:	3941      	subs	r1, #65	; 0x41
 80014a8:	2919      	cmp	r1, #25
 80014aa:	d801      	bhi.n	80014b0 <_strtol_l.constprop.0+0xc0>
 80014ac:	3c37      	subs	r4, #55	; 0x37
 80014ae:	e7dc      	b.n	800146a <_strtol_l.constprop.0+0x7a>
 80014b0:	0021      	movs	r1, r4
 80014b2:	3961      	subs	r1, #97	; 0x61
 80014b4:	2919      	cmp	r1, #25
 80014b6:	d803      	bhi.n	80014c0 <_strtol_l.constprop.0+0xd0>
 80014b8:	3c57      	subs	r4, #87	; 0x57
 80014ba:	e7d6      	b.n	800146a <_strtol_l.constprop.0+0x7a>
 80014bc:	0013      	movs	r3, r2
 80014be:	e7e2      	b.n	8001486 <_strtol_l.constprop.0+0x96>
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	da09      	bge.n	80014d8 <_strtol_l.constprop.0+0xe8>
 80014c4:	2322      	movs	r3, #34	; 0x22
 80014c6:	9a05      	ldr	r2, [sp, #20]
 80014c8:	9803      	ldr	r0, [sp, #12]
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	9b02      	ldr	r3, [sp, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0e1      	beq.n	8001496 <_strtol_l.constprop.0+0xa6>
 80014d2:	1e6b      	subs	r3, r5, #1
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	e007      	b.n	80014e8 <_strtol_l.constprop.0+0xf8>
 80014d8:	2f00      	cmp	r7, #0
 80014da:	d000      	beq.n	80014de <_strtol_l.constprop.0+0xee>
 80014dc:	4240      	negs	r0, r0
 80014de:	9a02      	ldr	r2, [sp, #8]
 80014e0:	2a00      	cmp	r2, #0
 80014e2:	d0d8      	beq.n	8001496 <_strtol_l.constprop.0+0xa6>
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f4      	bne.n	80014d2 <_strtol_l.constprop.0+0xe2>
 80014e8:	9b02      	ldr	r3, [sp, #8]
 80014ea:	9a01      	ldr	r2, [sp, #4]
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e7d2      	b.n	8001496 <_strtol_l.constprop.0+0xa6>
 80014f0:	2430      	movs	r4, #48	; 0x30
 80014f2:	2e00      	cmp	r6, #0
 80014f4:	d1a7      	bne.n	8001446 <_strtol_l.constprop.0+0x56>
 80014f6:	3608      	adds	r6, #8
 80014f8:	e7a5      	b.n	8001446 <_strtol_l.constprop.0+0x56>
 80014fa:	2c30      	cmp	r4, #48	; 0x30
 80014fc:	d09b      	beq.n	8001436 <_strtol_l.constprop.0+0x46>
 80014fe:	260a      	movs	r6, #10
 8001500:	e7a1      	b.n	8001446 <_strtol_l.constprop.0+0x56>
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	08002579 	.word	0x08002579
 8001508:	7fffffff 	.word	0x7fffffff

0800150c <strtol>:
 800150c:	b510      	push	{r4, lr}
 800150e:	0013      	movs	r3, r2
 8001510:	000a      	movs	r2, r1
 8001512:	0001      	movs	r1, r0
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <strtol+0x14>)
 8001516:	6800      	ldr	r0, [r0, #0]
 8001518:	f7ff ff6a 	bl	80013f0 <_strtol_l.constprop.0>
 800151c:	bd10      	pop	{r4, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	20000008 	.word	0x20000008

08001524 <std>:
 8001524:	2300      	movs	r3, #0
 8001526:	b510      	push	{r4, lr}
 8001528:	0004      	movs	r4, r0
 800152a:	6003      	str	r3, [r0, #0]
 800152c:	6043      	str	r3, [r0, #4]
 800152e:	6083      	str	r3, [r0, #8]
 8001530:	8181      	strh	r1, [r0, #12]
 8001532:	6643      	str	r3, [r0, #100]	; 0x64
 8001534:	0019      	movs	r1, r3
 8001536:	81c2      	strh	r2, [r0, #14]
 8001538:	6103      	str	r3, [r0, #16]
 800153a:	6143      	str	r3, [r0, #20]
 800153c:	6183      	str	r3, [r0, #24]
 800153e:	2208      	movs	r2, #8
 8001540:	305c      	adds	r0, #92	; 0x5c
 8001542:	f7ff ff33 	bl	80013ac <memset>
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <std+0x38>)
 8001548:	6224      	str	r4, [r4, #32]
 800154a:	6263      	str	r3, [r4, #36]	; 0x24
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <std+0x3c>)
 800154e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <std+0x40>)
 8001552:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <std+0x44>)
 8001556:	6323      	str	r3, [r4, #48]	; 0x30
 8001558:	bd10      	pop	{r4, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	08001e4d 	.word	0x08001e4d
 8001560:	08001e75 	.word	0x08001e75
 8001564:	08001ead 	.word	0x08001ead
 8001568:	08001ed9 	.word	0x08001ed9

0800156c <_cleanup_r>:
 800156c:	b510      	push	{r4, lr}
 800156e:	4902      	ldr	r1, [pc, #8]	; (8001578 <_cleanup_r+0xc>)
 8001570:	f000 f8ba 	bl	80016e8 <_fwalk_reent>
 8001574:	bd10      	pop	{r4, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	080021e5 	.word	0x080021e5

0800157c <__sfmoreglue>:
 800157c:	b570      	push	{r4, r5, r6, lr}
 800157e:	2568      	movs	r5, #104	; 0x68
 8001580:	1e4a      	subs	r2, r1, #1
 8001582:	4355      	muls	r5, r2
 8001584:	000e      	movs	r6, r1
 8001586:	0029      	movs	r1, r5
 8001588:	3174      	adds	r1, #116	; 0x74
 800158a:	f000 f8f3 	bl	8001774 <_malloc_r>
 800158e:	1e04      	subs	r4, r0, #0
 8001590:	d008      	beq.n	80015a4 <__sfmoreglue+0x28>
 8001592:	2100      	movs	r1, #0
 8001594:	002a      	movs	r2, r5
 8001596:	6001      	str	r1, [r0, #0]
 8001598:	6046      	str	r6, [r0, #4]
 800159a:	300c      	adds	r0, #12
 800159c:	60a0      	str	r0, [r4, #8]
 800159e:	3268      	adds	r2, #104	; 0x68
 80015a0:	f7ff ff04 	bl	80013ac <memset>
 80015a4:	0020      	movs	r0, r4
 80015a6:	bd70      	pop	{r4, r5, r6, pc}

080015a8 <__sfp_lock_acquire>:
 80015a8:	b510      	push	{r4, lr}
 80015aa:	4802      	ldr	r0, [pc, #8]	; (80015b4 <__sfp_lock_acquire+0xc>)
 80015ac:	f000 f8bd 	bl	800172a <__retarget_lock_acquire_recursive>
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	200008d9 	.word	0x200008d9

080015b8 <__sfp_lock_release>:
 80015b8:	b510      	push	{r4, lr}
 80015ba:	4802      	ldr	r0, [pc, #8]	; (80015c4 <__sfp_lock_release+0xc>)
 80015bc:	f000 f8b6 	bl	800172c <__retarget_lock_release_recursive>
 80015c0:	bd10      	pop	{r4, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	200008d9 	.word	0x200008d9

080015c8 <__sinit_lock_acquire>:
 80015c8:	b510      	push	{r4, lr}
 80015ca:	4802      	ldr	r0, [pc, #8]	; (80015d4 <__sinit_lock_acquire+0xc>)
 80015cc:	f000 f8ad 	bl	800172a <__retarget_lock_acquire_recursive>
 80015d0:	bd10      	pop	{r4, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	200008da 	.word	0x200008da

080015d8 <__sinit_lock_release>:
 80015d8:	b510      	push	{r4, lr}
 80015da:	4802      	ldr	r0, [pc, #8]	; (80015e4 <__sinit_lock_release+0xc>)
 80015dc:	f000 f8a6 	bl	800172c <__retarget_lock_release_recursive>
 80015e0:	bd10      	pop	{r4, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	200008da 	.word	0x200008da

080015e8 <__sinit>:
 80015e8:	b513      	push	{r0, r1, r4, lr}
 80015ea:	0004      	movs	r4, r0
 80015ec:	f7ff ffec 	bl	80015c8 <__sinit_lock_acquire>
 80015f0:	69a3      	ldr	r3, [r4, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <__sinit+0x14>
 80015f6:	f7ff ffef 	bl	80015d8 <__sinit_lock_release>
 80015fa:	bd13      	pop	{r0, r1, r4, pc}
 80015fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80015fe:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001600:	6523      	str	r3, [r4, #80]	; 0x50
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <__sinit+0x68>)
 8001604:	4a13      	ldr	r2, [pc, #76]	; (8001654 <__sinit+0x6c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	62a2      	str	r2, [r4, #40]	; 0x28
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	42a3      	cmp	r3, r4
 800160e:	d101      	bne.n	8001614 <__sinit+0x2c>
 8001610:	2301      	movs	r3, #1
 8001612:	61a3      	str	r3, [r4, #24]
 8001614:	0020      	movs	r0, r4
 8001616:	f000 f81f 	bl	8001658 <__sfp>
 800161a:	6060      	str	r0, [r4, #4]
 800161c:	0020      	movs	r0, r4
 800161e:	f000 f81b 	bl	8001658 <__sfp>
 8001622:	60a0      	str	r0, [r4, #8]
 8001624:	0020      	movs	r0, r4
 8001626:	f000 f817 	bl	8001658 <__sfp>
 800162a:	2200      	movs	r2, #0
 800162c:	2104      	movs	r1, #4
 800162e:	60e0      	str	r0, [r4, #12]
 8001630:	6860      	ldr	r0, [r4, #4]
 8001632:	f7ff ff77 	bl	8001524 <std>
 8001636:	2201      	movs	r2, #1
 8001638:	2109      	movs	r1, #9
 800163a:	68a0      	ldr	r0, [r4, #8]
 800163c:	f7ff ff72 	bl	8001524 <std>
 8001640:	2202      	movs	r2, #2
 8001642:	2112      	movs	r1, #18
 8001644:	68e0      	ldr	r0, [r4, #12]
 8001646:	f7ff ff6d 	bl	8001524 <std>
 800164a:	2301      	movs	r3, #1
 800164c:	61a3      	str	r3, [r4, #24]
 800164e:	e7d2      	b.n	80015f6 <__sinit+0xe>
 8001650:	08002574 	.word	0x08002574
 8001654:	0800156d 	.word	0x0800156d

08001658 <__sfp>:
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165a:	0007      	movs	r7, r0
 800165c:	f7ff ffa4 	bl	80015a8 <__sfp_lock_acquire>
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <__sfp+0x88>)
 8001662:	681e      	ldr	r6, [r3, #0]
 8001664:	69b3      	ldr	r3, [r6, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <__sfp+0x18>
 800166a:	0030      	movs	r0, r6
 800166c:	f7ff ffbc 	bl	80015e8 <__sinit>
 8001670:	3648      	adds	r6, #72	; 0x48
 8001672:	68b4      	ldr	r4, [r6, #8]
 8001674:	6873      	ldr	r3, [r6, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	d504      	bpl.n	8001684 <__sfp+0x2c>
 800167a:	6833      	ldr	r3, [r6, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d022      	beq.n	80016c6 <__sfp+0x6e>
 8001680:	6836      	ldr	r6, [r6, #0]
 8001682:	e7f6      	b.n	8001672 <__sfp+0x1a>
 8001684:	220c      	movs	r2, #12
 8001686:	5ea5      	ldrsh	r5, [r4, r2]
 8001688:	2d00      	cmp	r5, #0
 800168a:	d11a      	bne.n	80016c2 <__sfp+0x6a>
 800168c:	0020      	movs	r0, r4
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <__sfp+0x8c>)
 8001690:	3058      	adds	r0, #88	; 0x58
 8001692:	60e3      	str	r3, [r4, #12]
 8001694:	6665      	str	r5, [r4, #100]	; 0x64
 8001696:	f000 f847 	bl	8001728 <__retarget_lock_init_recursive>
 800169a:	f7ff ff8d 	bl	80015b8 <__sfp_lock_release>
 800169e:	0020      	movs	r0, r4
 80016a0:	2208      	movs	r2, #8
 80016a2:	0029      	movs	r1, r5
 80016a4:	6025      	str	r5, [r4, #0]
 80016a6:	60a5      	str	r5, [r4, #8]
 80016a8:	6065      	str	r5, [r4, #4]
 80016aa:	6125      	str	r5, [r4, #16]
 80016ac:	6165      	str	r5, [r4, #20]
 80016ae:	61a5      	str	r5, [r4, #24]
 80016b0:	305c      	adds	r0, #92	; 0x5c
 80016b2:	f7ff fe7b 	bl	80013ac <memset>
 80016b6:	6365      	str	r5, [r4, #52]	; 0x34
 80016b8:	63a5      	str	r5, [r4, #56]	; 0x38
 80016ba:	64a5      	str	r5, [r4, #72]	; 0x48
 80016bc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80016be:	0020      	movs	r0, r4
 80016c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016c2:	3468      	adds	r4, #104	; 0x68
 80016c4:	e7d7      	b.n	8001676 <__sfp+0x1e>
 80016c6:	2104      	movs	r1, #4
 80016c8:	0038      	movs	r0, r7
 80016ca:	f7ff ff57 	bl	800157c <__sfmoreglue>
 80016ce:	1e04      	subs	r4, r0, #0
 80016d0:	6030      	str	r0, [r6, #0]
 80016d2:	d1d5      	bne.n	8001680 <__sfp+0x28>
 80016d4:	f7ff ff70 	bl	80015b8 <__sfp_lock_release>
 80016d8:	230c      	movs	r3, #12
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	e7ef      	b.n	80016be <__sfp+0x66>
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	08002574 	.word	0x08002574
 80016e4:	ffff0001 	.word	0xffff0001

080016e8 <_fwalk_reent>:
 80016e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016ea:	0004      	movs	r4, r0
 80016ec:	0006      	movs	r6, r0
 80016ee:	2700      	movs	r7, #0
 80016f0:	9101      	str	r1, [sp, #4]
 80016f2:	3448      	adds	r4, #72	; 0x48
 80016f4:	6863      	ldr	r3, [r4, #4]
 80016f6:	68a5      	ldr	r5, [r4, #8]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	9b00      	ldr	r3, [sp, #0]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	d504      	bpl.n	800170c <_fwalk_reent+0x24>
 8001702:	6824      	ldr	r4, [r4, #0]
 8001704:	2c00      	cmp	r4, #0
 8001706:	d1f5      	bne.n	80016f4 <_fwalk_reent+0xc>
 8001708:	0038      	movs	r0, r7
 800170a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800170c:	89ab      	ldrh	r3, [r5, #12]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d908      	bls.n	8001724 <_fwalk_reent+0x3c>
 8001712:	220e      	movs	r2, #14
 8001714:	5eab      	ldrsh	r3, [r5, r2]
 8001716:	3301      	adds	r3, #1
 8001718:	d004      	beq.n	8001724 <_fwalk_reent+0x3c>
 800171a:	0029      	movs	r1, r5
 800171c:	0030      	movs	r0, r6
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	4798      	blx	r3
 8001722:	4307      	orrs	r7, r0
 8001724:	3568      	adds	r5, #104	; 0x68
 8001726:	e7e8      	b.n	80016fa <_fwalk_reent+0x12>

08001728 <__retarget_lock_init_recursive>:
 8001728:	4770      	bx	lr

0800172a <__retarget_lock_acquire_recursive>:
 800172a:	4770      	bx	lr

0800172c <__retarget_lock_release_recursive>:
 800172c:	4770      	bx	lr
	...

08001730 <sbrk_aligned>:
 8001730:	b570      	push	{r4, r5, r6, lr}
 8001732:	4e0f      	ldr	r6, [pc, #60]	; (8001770 <sbrk_aligned+0x40>)
 8001734:	000d      	movs	r5, r1
 8001736:	6831      	ldr	r1, [r6, #0]
 8001738:	0004      	movs	r4, r0
 800173a:	2900      	cmp	r1, #0
 800173c:	d102      	bne.n	8001744 <sbrk_aligned+0x14>
 800173e:	f000 fb73 	bl	8001e28 <_sbrk_r>
 8001742:	6030      	str	r0, [r6, #0]
 8001744:	0029      	movs	r1, r5
 8001746:	0020      	movs	r0, r4
 8001748:	f000 fb6e 	bl	8001e28 <_sbrk_r>
 800174c:	1c43      	adds	r3, r0, #1
 800174e:	d00a      	beq.n	8001766 <sbrk_aligned+0x36>
 8001750:	2303      	movs	r3, #3
 8001752:	1cc5      	adds	r5, r0, #3
 8001754:	439d      	bics	r5, r3
 8001756:	42a8      	cmp	r0, r5
 8001758:	d007      	beq.n	800176a <sbrk_aligned+0x3a>
 800175a:	1a29      	subs	r1, r5, r0
 800175c:	0020      	movs	r0, r4
 800175e:	f000 fb63 	bl	8001e28 <_sbrk_r>
 8001762:	1c43      	adds	r3, r0, #1
 8001764:	d101      	bne.n	800176a <sbrk_aligned+0x3a>
 8001766:	2501      	movs	r5, #1
 8001768:	426d      	negs	r5, r5
 800176a:	0028      	movs	r0, r5
 800176c:	bd70      	pop	{r4, r5, r6, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	200008e0 	.word	0x200008e0

08001774 <_malloc_r>:
 8001774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001776:	2203      	movs	r2, #3
 8001778:	1ccb      	adds	r3, r1, #3
 800177a:	4393      	bics	r3, r2
 800177c:	3308      	adds	r3, #8
 800177e:	0006      	movs	r6, r0
 8001780:	001f      	movs	r7, r3
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d232      	bcs.n	80017ec <_malloc_r+0x78>
 8001786:	270c      	movs	r7, #12
 8001788:	42b9      	cmp	r1, r7
 800178a:	d831      	bhi.n	80017f0 <_malloc_r+0x7c>
 800178c:	0030      	movs	r0, r6
 800178e:	f000 fdf5 	bl	800237c <__malloc_lock>
 8001792:	4d32      	ldr	r5, [pc, #200]	; (800185c <_malloc_r+0xe8>)
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	001c      	movs	r4, r3
 8001798:	2c00      	cmp	r4, #0
 800179a:	d12e      	bne.n	80017fa <_malloc_r+0x86>
 800179c:	0039      	movs	r1, r7
 800179e:	0030      	movs	r0, r6
 80017a0:	f7ff ffc6 	bl	8001730 <sbrk_aligned>
 80017a4:	0004      	movs	r4, r0
 80017a6:	1c43      	adds	r3, r0, #1
 80017a8:	d11e      	bne.n	80017e8 <_malloc_r+0x74>
 80017aa:	682c      	ldr	r4, [r5, #0]
 80017ac:	0025      	movs	r5, r4
 80017ae:	2d00      	cmp	r5, #0
 80017b0:	d14a      	bne.n	8001848 <_malloc_r+0xd4>
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	0029      	movs	r1, r5
 80017b6:	18e3      	adds	r3, r4, r3
 80017b8:	0030      	movs	r0, r6
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	f000 fb34 	bl	8001e28 <_sbrk_r>
 80017c0:	9b01      	ldr	r3, [sp, #4]
 80017c2:	4283      	cmp	r3, r0
 80017c4:	d143      	bne.n	800184e <_malloc_r+0xda>
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	3703      	adds	r7, #3
 80017ca:	1aff      	subs	r7, r7, r3
 80017cc:	2303      	movs	r3, #3
 80017ce:	439f      	bics	r7, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	2f0c      	cmp	r7, #12
 80017d4:	d200      	bcs.n	80017d8 <_malloc_r+0x64>
 80017d6:	270c      	movs	r7, #12
 80017d8:	0039      	movs	r1, r7
 80017da:	0030      	movs	r0, r6
 80017dc:	f7ff ffa8 	bl	8001730 <sbrk_aligned>
 80017e0:	1c43      	adds	r3, r0, #1
 80017e2:	d034      	beq.n	800184e <_malloc_r+0xda>
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	19df      	adds	r7, r3, r7
 80017e8:	6027      	str	r7, [r4, #0]
 80017ea:	e013      	b.n	8001814 <_malloc_r+0xa0>
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	dacb      	bge.n	8001788 <_malloc_r+0x14>
 80017f0:	230c      	movs	r3, #12
 80017f2:	2500      	movs	r5, #0
 80017f4:	6033      	str	r3, [r6, #0]
 80017f6:	0028      	movs	r0, r5
 80017f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80017fa:	6822      	ldr	r2, [r4, #0]
 80017fc:	1bd1      	subs	r1, r2, r7
 80017fe:	d420      	bmi.n	8001842 <_malloc_r+0xce>
 8001800:	290b      	cmp	r1, #11
 8001802:	d917      	bls.n	8001834 <_malloc_r+0xc0>
 8001804:	19e2      	adds	r2, r4, r7
 8001806:	6027      	str	r7, [r4, #0]
 8001808:	42a3      	cmp	r3, r4
 800180a:	d111      	bne.n	8001830 <_malloc_r+0xbc>
 800180c:	602a      	str	r2, [r5, #0]
 800180e:	6863      	ldr	r3, [r4, #4]
 8001810:	6011      	str	r1, [r2, #0]
 8001812:	6053      	str	r3, [r2, #4]
 8001814:	0030      	movs	r0, r6
 8001816:	0025      	movs	r5, r4
 8001818:	f000 fdb8 	bl	800238c <__malloc_unlock>
 800181c:	2207      	movs	r2, #7
 800181e:	350b      	adds	r5, #11
 8001820:	1d23      	adds	r3, r4, #4
 8001822:	4395      	bics	r5, r2
 8001824:	1aea      	subs	r2, r5, r3
 8001826:	429d      	cmp	r5, r3
 8001828:	d0e5      	beq.n	80017f6 <_malloc_r+0x82>
 800182a:	1b5b      	subs	r3, r3, r5
 800182c:	50a3      	str	r3, [r4, r2]
 800182e:	e7e2      	b.n	80017f6 <_malloc_r+0x82>
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	e7ec      	b.n	800180e <_malloc_r+0x9a>
 8001834:	6862      	ldr	r2, [r4, #4]
 8001836:	42a3      	cmp	r3, r4
 8001838:	d101      	bne.n	800183e <_malloc_r+0xca>
 800183a:	602a      	str	r2, [r5, #0]
 800183c:	e7ea      	b.n	8001814 <_malloc_r+0xa0>
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	e7e8      	b.n	8001814 <_malloc_r+0xa0>
 8001842:	0023      	movs	r3, r4
 8001844:	6864      	ldr	r4, [r4, #4]
 8001846:	e7a7      	b.n	8001798 <_malloc_r+0x24>
 8001848:	002c      	movs	r4, r5
 800184a:	686d      	ldr	r5, [r5, #4]
 800184c:	e7af      	b.n	80017ae <_malloc_r+0x3a>
 800184e:	230c      	movs	r3, #12
 8001850:	0030      	movs	r0, r6
 8001852:	6033      	str	r3, [r6, #0]
 8001854:	f000 fd9a 	bl	800238c <__malloc_unlock>
 8001858:	e7cd      	b.n	80017f6 <_malloc_r+0x82>
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	200008dc 	.word	0x200008dc

08001860 <__sfputc_r>:
 8001860:	6893      	ldr	r3, [r2, #8]
 8001862:	b510      	push	{r4, lr}
 8001864:	3b01      	subs	r3, #1
 8001866:	6093      	str	r3, [r2, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	da04      	bge.n	8001876 <__sfputc_r+0x16>
 800186c:	6994      	ldr	r4, [r2, #24]
 800186e:	42a3      	cmp	r3, r4
 8001870:	db07      	blt.n	8001882 <__sfputc_r+0x22>
 8001872:	290a      	cmp	r1, #10
 8001874:	d005      	beq.n	8001882 <__sfputc_r+0x22>
 8001876:	6813      	ldr	r3, [r2, #0]
 8001878:	1c58      	adds	r0, r3, #1
 800187a:	6010      	str	r0, [r2, #0]
 800187c:	7019      	strb	r1, [r3, #0]
 800187e:	0008      	movs	r0, r1
 8001880:	bd10      	pop	{r4, pc}
 8001882:	f000 fb2f 	bl	8001ee4 <__swbuf_r>
 8001886:	0001      	movs	r1, r0
 8001888:	e7f9      	b.n	800187e <__sfputc_r+0x1e>

0800188a <__sfputs_r>:
 800188a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188c:	0006      	movs	r6, r0
 800188e:	000f      	movs	r7, r1
 8001890:	0014      	movs	r4, r2
 8001892:	18d5      	adds	r5, r2, r3
 8001894:	42ac      	cmp	r4, r5
 8001896:	d101      	bne.n	800189c <__sfputs_r+0x12>
 8001898:	2000      	movs	r0, #0
 800189a:	e007      	b.n	80018ac <__sfputs_r+0x22>
 800189c:	7821      	ldrb	r1, [r4, #0]
 800189e:	003a      	movs	r2, r7
 80018a0:	0030      	movs	r0, r6
 80018a2:	f7ff ffdd 	bl	8001860 <__sfputc_r>
 80018a6:	3401      	adds	r4, #1
 80018a8:	1c43      	adds	r3, r0, #1
 80018aa:	d1f3      	bne.n	8001894 <__sfputs_r+0xa>
 80018ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018b0 <_vfiprintf_r>:
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	b0a1      	sub	sp, #132	; 0x84
 80018b4:	0006      	movs	r6, r0
 80018b6:	000c      	movs	r4, r1
 80018b8:	001f      	movs	r7, r3
 80018ba:	9203      	str	r2, [sp, #12]
 80018bc:	2800      	cmp	r0, #0
 80018be:	d004      	beq.n	80018ca <_vfiprintf_r+0x1a>
 80018c0:	6983      	ldr	r3, [r0, #24]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <_vfiprintf_r+0x1a>
 80018c6:	f7ff fe8f 	bl	80015e8 <__sinit>
 80018ca:	4b8e      	ldr	r3, [pc, #568]	; (8001b04 <_vfiprintf_r+0x254>)
 80018cc:	429c      	cmp	r4, r3
 80018ce:	d11c      	bne.n	800190a <_vfiprintf_r+0x5a>
 80018d0:	6874      	ldr	r4, [r6, #4]
 80018d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018d4:	07db      	lsls	r3, r3, #31
 80018d6:	d405      	bmi.n	80018e4 <_vfiprintf_r+0x34>
 80018d8:	89a3      	ldrh	r3, [r4, #12]
 80018da:	059b      	lsls	r3, r3, #22
 80018dc:	d402      	bmi.n	80018e4 <_vfiprintf_r+0x34>
 80018de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018e0:	f7ff ff23 	bl	800172a <__retarget_lock_acquire_recursive>
 80018e4:	89a3      	ldrh	r3, [r4, #12]
 80018e6:	071b      	lsls	r3, r3, #28
 80018e8:	d502      	bpl.n	80018f0 <_vfiprintf_r+0x40>
 80018ea:	6923      	ldr	r3, [r4, #16]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d11d      	bne.n	800192c <_vfiprintf_r+0x7c>
 80018f0:	0021      	movs	r1, r4
 80018f2:	0030      	movs	r0, r6
 80018f4:	f000 fb60 	bl	8001fb8 <__swsetup_r>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d017      	beq.n	800192c <_vfiprintf_r+0x7c>
 80018fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018fe:	07db      	lsls	r3, r3, #31
 8001900:	d50d      	bpl.n	800191e <_vfiprintf_r+0x6e>
 8001902:	2001      	movs	r0, #1
 8001904:	4240      	negs	r0, r0
 8001906:	b021      	add	sp, #132	; 0x84
 8001908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800190a:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <_vfiprintf_r+0x258>)
 800190c:	429c      	cmp	r4, r3
 800190e:	d101      	bne.n	8001914 <_vfiprintf_r+0x64>
 8001910:	68b4      	ldr	r4, [r6, #8]
 8001912:	e7de      	b.n	80018d2 <_vfiprintf_r+0x22>
 8001914:	4b7d      	ldr	r3, [pc, #500]	; (8001b0c <_vfiprintf_r+0x25c>)
 8001916:	429c      	cmp	r4, r3
 8001918:	d1db      	bne.n	80018d2 <_vfiprintf_r+0x22>
 800191a:	68f4      	ldr	r4, [r6, #12]
 800191c:	e7d9      	b.n	80018d2 <_vfiprintf_r+0x22>
 800191e:	89a3      	ldrh	r3, [r4, #12]
 8001920:	059b      	lsls	r3, r3, #22
 8001922:	d4ee      	bmi.n	8001902 <_vfiprintf_r+0x52>
 8001924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001926:	f7ff ff01 	bl	800172c <__retarget_lock_release_recursive>
 800192a:	e7ea      	b.n	8001902 <_vfiprintf_r+0x52>
 800192c:	2300      	movs	r3, #0
 800192e:	ad08      	add	r5, sp, #32
 8001930:	616b      	str	r3, [r5, #20]
 8001932:	3320      	adds	r3, #32
 8001934:	766b      	strb	r3, [r5, #25]
 8001936:	3310      	adds	r3, #16
 8001938:	76ab      	strb	r3, [r5, #26]
 800193a:	9707      	str	r7, [sp, #28]
 800193c:	9f03      	ldr	r7, [sp, #12]
 800193e:	783b      	ldrb	r3, [r7, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <_vfiprintf_r+0x98>
 8001944:	2b25      	cmp	r3, #37	; 0x25
 8001946:	d14e      	bne.n	80019e6 <_vfiprintf_r+0x136>
 8001948:	9b03      	ldr	r3, [sp, #12]
 800194a:	1afb      	subs	r3, r7, r3
 800194c:	9305      	str	r3, [sp, #20]
 800194e:	9b03      	ldr	r3, [sp, #12]
 8001950:	429f      	cmp	r7, r3
 8001952:	d00d      	beq.n	8001970 <_vfiprintf_r+0xc0>
 8001954:	9b05      	ldr	r3, [sp, #20]
 8001956:	0021      	movs	r1, r4
 8001958:	0030      	movs	r0, r6
 800195a:	9a03      	ldr	r2, [sp, #12]
 800195c:	f7ff ff95 	bl	800188a <__sfputs_r>
 8001960:	1c43      	adds	r3, r0, #1
 8001962:	d100      	bne.n	8001966 <_vfiprintf_r+0xb6>
 8001964:	e0b5      	b.n	8001ad2 <_vfiprintf_r+0x222>
 8001966:	696a      	ldr	r2, [r5, #20]
 8001968:	9b05      	ldr	r3, [sp, #20]
 800196a:	4694      	mov	ip, r2
 800196c:	4463      	add	r3, ip
 800196e:	616b      	str	r3, [r5, #20]
 8001970:	783b      	ldrb	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d100      	bne.n	8001978 <_vfiprintf_r+0xc8>
 8001976:	e0ac      	b.n	8001ad2 <_vfiprintf_r+0x222>
 8001978:	2201      	movs	r2, #1
 800197a:	1c7b      	adds	r3, r7, #1
 800197c:	9303      	str	r3, [sp, #12]
 800197e:	2300      	movs	r3, #0
 8001980:	4252      	negs	r2, r2
 8001982:	606a      	str	r2, [r5, #4]
 8001984:	a904      	add	r1, sp, #16
 8001986:	3254      	adds	r2, #84	; 0x54
 8001988:	1852      	adds	r2, r2, r1
 800198a:	602b      	str	r3, [r5, #0]
 800198c:	60eb      	str	r3, [r5, #12]
 800198e:	60ab      	str	r3, [r5, #8]
 8001990:	7013      	strb	r3, [r2, #0]
 8001992:	65ab      	str	r3, [r5, #88]	; 0x58
 8001994:	9b03      	ldr	r3, [sp, #12]
 8001996:	2205      	movs	r2, #5
 8001998:	7819      	ldrb	r1, [r3, #0]
 800199a:	485d      	ldr	r0, [pc, #372]	; (8001b10 <_vfiprintf_r+0x260>)
 800199c:	f000 fce2 	bl	8002364 <memchr>
 80019a0:	9b03      	ldr	r3, [sp, #12]
 80019a2:	1c5f      	adds	r7, r3, #1
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d120      	bne.n	80019ea <_vfiprintf_r+0x13a>
 80019a8:	682a      	ldr	r2, [r5, #0]
 80019aa:	06d3      	lsls	r3, r2, #27
 80019ac:	d504      	bpl.n	80019b8 <_vfiprintf_r+0x108>
 80019ae:	2353      	movs	r3, #83	; 0x53
 80019b0:	a904      	add	r1, sp, #16
 80019b2:	185b      	adds	r3, r3, r1
 80019b4:	2120      	movs	r1, #32
 80019b6:	7019      	strb	r1, [r3, #0]
 80019b8:	0713      	lsls	r3, r2, #28
 80019ba:	d504      	bpl.n	80019c6 <_vfiprintf_r+0x116>
 80019bc:	2353      	movs	r3, #83	; 0x53
 80019be:	a904      	add	r1, sp, #16
 80019c0:	185b      	adds	r3, r3, r1
 80019c2:	212b      	movs	r1, #43	; 0x2b
 80019c4:	7019      	strb	r1, [r3, #0]
 80019c6:	9b03      	ldr	r3, [sp, #12]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b2a      	cmp	r3, #42	; 0x2a
 80019cc:	d016      	beq.n	80019fc <_vfiprintf_r+0x14c>
 80019ce:	2100      	movs	r1, #0
 80019d0:	68eb      	ldr	r3, [r5, #12]
 80019d2:	9f03      	ldr	r7, [sp, #12]
 80019d4:	783a      	ldrb	r2, [r7, #0]
 80019d6:	1c78      	adds	r0, r7, #1
 80019d8:	3a30      	subs	r2, #48	; 0x30
 80019da:	4684      	mov	ip, r0
 80019dc:	2a09      	cmp	r2, #9
 80019de:	d94f      	bls.n	8001a80 <_vfiprintf_r+0x1d0>
 80019e0:	2900      	cmp	r1, #0
 80019e2:	d111      	bne.n	8001a08 <_vfiprintf_r+0x158>
 80019e4:	e017      	b.n	8001a16 <_vfiprintf_r+0x166>
 80019e6:	3701      	adds	r7, #1
 80019e8:	e7a9      	b.n	800193e <_vfiprintf_r+0x8e>
 80019ea:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <_vfiprintf_r+0x260>)
 80019ec:	682a      	ldr	r2, [r5, #0]
 80019ee:	1ac0      	subs	r0, r0, r3
 80019f0:	2301      	movs	r3, #1
 80019f2:	4083      	lsls	r3, r0
 80019f4:	4313      	orrs	r3, r2
 80019f6:	602b      	str	r3, [r5, #0]
 80019f8:	9703      	str	r7, [sp, #12]
 80019fa:	e7cb      	b.n	8001994 <_vfiprintf_r+0xe4>
 80019fc:	9b07      	ldr	r3, [sp, #28]
 80019fe:	1d19      	adds	r1, r3, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	9107      	str	r1, [sp, #28]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db01      	blt.n	8001a0c <_vfiprintf_r+0x15c>
 8001a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a0a:	e004      	b.n	8001a16 <_vfiprintf_r+0x166>
 8001a0c:	425b      	negs	r3, r3
 8001a0e:	60eb      	str	r3, [r5, #12]
 8001a10:	2302      	movs	r3, #2
 8001a12:	4313      	orrs	r3, r2
 8001a14:	602b      	str	r3, [r5, #0]
 8001a16:	783b      	ldrb	r3, [r7, #0]
 8001a18:	2b2e      	cmp	r3, #46	; 0x2e
 8001a1a:	d10a      	bne.n	8001a32 <_vfiprintf_r+0x182>
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8001a20:	d137      	bne.n	8001a92 <_vfiprintf_r+0x1e2>
 8001a22:	9b07      	ldr	r3, [sp, #28]
 8001a24:	3702      	adds	r7, #2
 8001a26:	1d1a      	adds	r2, r3, #4
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	9207      	str	r2, [sp, #28]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db2d      	blt.n	8001a8c <_vfiprintf_r+0x1dc>
 8001a30:	9309      	str	r3, [sp, #36]	; 0x24
 8001a32:	2203      	movs	r2, #3
 8001a34:	7839      	ldrb	r1, [r7, #0]
 8001a36:	4837      	ldr	r0, [pc, #220]	; (8001b14 <_vfiprintf_r+0x264>)
 8001a38:	f000 fc94 	bl	8002364 <memchr>
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d007      	beq.n	8001a50 <_vfiprintf_r+0x1a0>
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <_vfiprintf_r+0x264>)
 8001a42:	682a      	ldr	r2, [r5, #0]
 8001a44:	1ac0      	subs	r0, r0, r3
 8001a46:	2340      	movs	r3, #64	; 0x40
 8001a48:	4083      	lsls	r3, r0
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	3701      	adds	r7, #1
 8001a4e:	602b      	str	r3, [r5, #0]
 8001a50:	7839      	ldrb	r1, [r7, #0]
 8001a52:	1c7b      	adds	r3, r7, #1
 8001a54:	2206      	movs	r2, #6
 8001a56:	4830      	ldr	r0, [pc, #192]	; (8001b18 <_vfiprintf_r+0x268>)
 8001a58:	9303      	str	r3, [sp, #12]
 8001a5a:	7629      	strb	r1, [r5, #24]
 8001a5c:	f000 fc82 	bl	8002364 <memchr>
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d045      	beq.n	8001af0 <_vfiprintf_r+0x240>
 8001a64:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <_vfiprintf_r+0x26c>)
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d127      	bne.n	8001aba <_vfiprintf_r+0x20a>
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	9b07      	ldr	r3, [sp, #28]
 8001a6e:	3307      	adds	r3, #7
 8001a70:	4393      	bics	r3, r2
 8001a72:	3308      	adds	r3, #8
 8001a74:	9307      	str	r3, [sp, #28]
 8001a76:	696b      	ldr	r3, [r5, #20]
 8001a78:	9a04      	ldr	r2, [sp, #16]
 8001a7a:	189b      	adds	r3, r3, r2
 8001a7c:	616b      	str	r3, [r5, #20]
 8001a7e:	e75d      	b.n	800193c <_vfiprintf_r+0x8c>
 8001a80:	210a      	movs	r1, #10
 8001a82:	434b      	muls	r3, r1
 8001a84:	4667      	mov	r7, ip
 8001a86:	189b      	adds	r3, r3, r2
 8001a88:	3909      	subs	r1, #9
 8001a8a:	e7a3      	b.n	80019d4 <_vfiprintf_r+0x124>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	425b      	negs	r3, r3
 8001a90:	e7ce      	b.n	8001a30 <_vfiprintf_r+0x180>
 8001a92:	2300      	movs	r3, #0
 8001a94:	001a      	movs	r2, r3
 8001a96:	3701      	adds	r7, #1
 8001a98:	606b      	str	r3, [r5, #4]
 8001a9a:	7839      	ldrb	r1, [r7, #0]
 8001a9c:	1c78      	adds	r0, r7, #1
 8001a9e:	3930      	subs	r1, #48	; 0x30
 8001aa0:	4684      	mov	ip, r0
 8001aa2:	2909      	cmp	r1, #9
 8001aa4:	d903      	bls.n	8001aae <_vfiprintf_r+0x1fe>
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0c3      	beq.n	8001a32 <_vfiprintf_r+0x182>
 8001aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8001aac:	e7c1      	b.n	8001a32 <_vfiprintf_r+0x182>
 8001aae:	230a      	movs	r3, #10
 8001ab0:	435a      	muls	r2, r3
 8001ab2:	4667      	mov	r7, ip
 8001ab4:	1852      	adds	r2, r2, r1
 8001ab6:	3b09      	subs	r3, #9
 8001ab8:	e7ef      	b.n	8001a9a <_vfiprintf_r+0x1ea>
 8001aba:	ab07      	add	r3, sp, #28
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	0022      	movs	r2, r4
 8001ac0:	0029      	movs	r1, r5
 8001ac2:	0030      	movs	r0, r6
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <_vfiprintf_r+0x270>)
 8001ac6:	e000      	b.n	8001aca <_vfiprintf_r+0x21a>
 8001ac8:	bf00      	nop
 8001aca:	9004      	str	r0, [sp, #16]
 8001acc:	9b04      	ldr	r3, [sp, #16]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	d1d1      	bne.n	8001a76 <_vfiprintf_r+0x1c6>
 8001ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ad4:	07db      	lsls	r3, r3, #31
 8001ad6:	d405      	bmi.n	8001ae4 <_vfiprintf_r+0x234>
 8001ad8:	89a3      	ldrh	r3, [r4, #12]
 8001ada:	059b      	lsls	r3, r3, #22
 8001adc:	d402      	bmi.n	8001ae4 <_vfiprintf_r+0x234>
 8001ade:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ae0:	f7ff fe24 	bl	800172c <__retarget_lock_release_recursive>
 8001ae4:	89a3      	ldrh	r3, [r4, #12]
 8001ae6:	065b      	lsls	r3, r3, #25
 8001ae8:	d500      	bpl.n	8001aec <_vfiprintf_r+0x23c>
 8001aea:	e70a      	b.n	8001902 <_vfiprintf_r+0x52>
 8001aec:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001aee:	e70a      	b.n	8001906 <_vfiprintf_r+0x56>
 8001af0:	ab07      	add	r3, sp, #28
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	0022      	movs	r2, r4
 8001af6:	0029      	movs	r1, r5
 8001af8:	0030      	movs	r0, r6
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <_vfiprintf_r+0x270>)
 8001afc:	f000 f882 	bl	8001c04 <_printf_i>
 8001b00:	e7e3      	b.n	8001aca <_vfiprintf_r+0x21a>
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	0800269c 	.word	0x0800269c
 8001b08:	080026bc 	.word	0x080026bc
 8001b0c:	0800267c 	.word	0x0800267c
 8001b10:	080026dc 	.word	0x080026dc
 8001b14:	080026e2 	.word	0x080026e2
 8001b18:	080026e6 	.word	0x080026e6
 8001b1c:	00000000 	.word	0x00000000
 8001b20:	0800188b 	.word	0x0800188b

08001b24 <_printf_common>:
 8001b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b26:	0015      	movs	r5, r2
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	688a      	ldr	r2, [r1, #8]
 8001b2c:	690b      	ldr	r3, [r1, #16]
 8001b2e:	000c      	movs	r4, r1
 8001b30:	9000      	str	r0, [sp, #0]
 8001b32:	4293      	cmp	r3, r2
 8001b34:	da00      	bge.n	8001b38 <_printf_common+0x14>
 8001b36:	0013      	movs	r3, r2
 8001b38:	0022      	movs	r2, r4
 8001b3a:	602b      	str	r3, [r5, #0]
 8001b3c:	3243      	adds	r2, #67	; 0x43
 8001b3e:	7812      	ldrb	r2, [r2, #0]
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	d001      	beq.n	8001b48 <_printf_common+0x24>
 8001b44:	3301      	adds	r3, #1
 8001b46:	602b      	str	r3, [r5, #0]
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	069b      	lsls	r3, r3, #26
 8001b4c:	d502      	bpl.n	8001b54 <_printf_common+0x30>
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	3302      	adds	r3, #2
 8001b52:	602b      	str	r3, [r5, #0]
 8001b54:	6822      	ldr	r2, [r4, #0]
 8001b56:	2306      	movs	r3, #6
 8001b58:	0017      	movs	r7, r2
 8001b5a:	401f      	ands	r7, r3
 8001b5c:	421a      	tst	r2, r3
 8001b5e:	d027      	beq.n	8001bb0 <_printf_common+0x8c>
 8001b60:	0023      	movs	r3, r4
 8001b62:	3343      	adds	r3, #67	; 0x43
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	1e5a      	subs	r2, r3, #1
 8001b68:	4193      	sbcs	r3, r2
 8001b6a:	6822      	ldr	r2, [r4, #0]
 8001b6c:	0692      	lsls	r2, r2, #26
 8001b6e:	d430      	bmi.n	8001bd2 <_printf_common+0xae>
 8001b70:	0022      	movs	r2, r4
 8001b72:	9901      	ldr	r1, [sp, #4]
 8001b74:	9800      	ldr	r0, [sp, #0]
 8001b76:	9e08      	ldr	r6, [sp, #32]
 8001b78:	3243      	adds	r2, #67	; 0x43
 8001b7a:	47b0      	blx	r6
 8001b7c:	1c43      	adds	r3, r0, #1
 8001b7e:	d025      	beq.n	8001bcc <_printf_common+0xa8>
 8001b80:	2306      	movs	r3, #6
 8001b82:	6820      	ldr	r0, [r4, #0]
 8001b84:	682a      	ldr	r2, [r5, #0]
 8001b86:	68e1      	ldr	r1, [r4, #12]
 8001b88:	2500      	movs	r5, #0
 8001b8a:	4003      	ands	r3, r0
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d103      	bne.n	8001b98 <_printf_common+0x74>
 8001b90:	1a8d      	subs	r5, r1, r2
 8001b92:	43eb      	mvns	r3, r5
 8001b94:	17db      	asrs	r3, r3, #31
 8001b96:	401d      	ands	r5, r3
 8001b98:	68a3      	ldr	r3, [r4, #8]
 8001b9a:	6922      	ldr	r2, [r4, #16]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	dd01      	ble.n	8001ba4 <_printf_common+0x80>
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	18ed      	adds	r5, r5, r3
 8001ba4:	2700      	movs	r7, #0
 8001ba6:	42bd      	cmp	r5, r7
 8001ba8:	d120      	bne.n	8001bec <_printf_common+0xc8>
 8001baa:	2000      	movs	r0, #0
 8001bac:	e010      	b.n	8001bd0 <_printf_common+0xac>
 8001bae:	3701      	adds	r7, #1
 8001bb0:	68e3      	ldr	r3, [r4, #12]
 8001bb2:	682a      	ldr	r2, [r5, #0]
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	42bb      	cmp	r3, r7
 8001bb8:	ddd2      	ble.n	8001b60 <_printf_common+0x3c>
 8001bba:	0022      	movs	r2, r4
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	9901      	ldr	r1, [sp, #4]
 8001bc0:	9800      	ldr	r0, [sp, #0]
 8001bc2:	9e08      	ldr	r6, [sp, #32]
 8001bc4:	3219      	adds	r2, #25
 8001bc6:	47b0      	blx	r6
 8001bc8:	1c43      	adds	r3, r0, #1
 8001bca:	d1f0      	bne.n	8001bae <_printf_common+0x8a>
 8001bcc:	2001      	movs	r0, #1
 8001bce:	4240      	negs	r0, r0
 8001bd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001bd2:	2030      	movs	r0, #48	; 0x30
 8001bd4:	18e1      	adds	r1, r4, r3
 8001bd6:	3143      	adds	r1, #67	; 0x43
 8001bd8:	7008      	strb	r0, [r1, #0]
 8001bda:	0021      	movs	r1, r4
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	3145      	adds	r1, #69	; 0x45
 8001be0:	7809      	ldrb	r1, [r1, #0]
 8001be2:	18a2      	adds	r2, r4, r2
 8001be4:	3243      	adds	r2, #67	; 0x43
 8001be6:	3302      	adds	r3, #2
 8001be8:	7011      	strb	r1, [r2, #0]
 8001bea:	e7c1      	b.n	8001b70 <_printf_common+0x4c>
 8001bec:	0022      	movs	r2, r4
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9901      	ldr	r1, [sp, #4]
 8001bf2:	9800      	ldr	r0, [sp, #0]
 8001bf4:	9e08      	ldr	r6, [sp, #32]
 8001bf6:	321a      	adds	r2, #26
 8001bf8:	47b0      	blx	r6
 8001bfa:	1c43      	adds	r3, r0, #1
 8001bfc:	d0e6      	beq.n	8001bcc <_printf_common+0xa8>
 8001bfe:	3701      	adds	r7, #1
 8001c00:	e7d1      	b.n	8001ba6 <_printf_common+0x82>
	...

08001c04 <_printf_i>:
 8001c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c06:	b08b      	sub	sp, #44	; 0x2c
 8001c08:	9206      	str	r2, [sp, #24]
 8001c0a:	000a      	movs	r2, r1
 8001c0c:	3243      	adds	r2, #67	; 0x43
 8001c0e:	9307      	str	r3, [sp, #28]
 8001c10:	9005      	str	r0, [sp, #20]
 8001c12:	9204      	str	r2, [sp, #16]
 8001c14:	7e0a      	ldrb	r2, [r1, #24]
 8001c16:	000c      	movs	r4, r1
 8001c18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001c1a:	2a78      	cmp	r2, #120	; 0x78
 8001c1c:	d807      	bhi.n	8001c2e <_printf_i+0x2a>
 8001c1e:	2a62      	cmp	r2, #98	; 0x62
 8001c20:	d809      	bhi.n	8001c36 <_printf_i+0x32>
 8001c22:	2a00      	cmp	r2, #0
 8001c24:	d100      	bne.n	8001c28 <_printf_i+0x24>
 8001c26:	e0c1      	b.n	8001dac <_printf_i+0x1a8>
 8001c28:	2a58      	cmp	r2, #88	; 0x58
 8001c2a:	d100      	bne.n	8001c2e <_printf_i+0x2a>
 8001c2c:	e08c      	b.n	8001d48 <_printf_i+0x144>
 8001c2e:	0026      	movs	r6, r4
 8001c30:	3642      	adds	r6, #66	; 0x42
 8001c32:	7032      	strb	r2, [r6, #0]
 8001c34:	e022      	b.n	8001c7c <_printf_i+0x78>
 8001c36:	0010      	movs	r0, r2
 8001c38:	3863      	subs	r0, #99	; 0x63
 8001c3a:	2815      	cmp	r0, #21
 8001c3c:	d8f7      	bhi.n	8001c2e <_printf_i+0x2a>
 8001c3e:	f7fe fa61 	bl	8000104 <__gnu_thumb1_case_shi>
 8001c42:	0016      	.short	0x0016
 8001c44:	fff6001f 	.word	0xfff6001f
 8001c48:	fff6fff6 	.word	0xfff6fff6
 8001c4c:	001ffff6 	.word	0x001ffff6
 8001c50:	fff6fff6 	.word	0xfff6fff6
 8001c54:	fff6fff6 	.word	0xfff6fff6
 8001c58:	003600a8 	.word	0x003600a8
 8001c5c:	fff6009a 	.word	0xfff6009a
 8001c60:	00b9fff6 	.word	0x00b9fff6
 8001c64:	0036fff6 	.word	0x0036fff6
 8001c68:	fff6fff6 	.word	0xfff6fff6
 8001c6c:	009e      	.short	0x009e
 8001c6e:	0026      	movs	r6, r4
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	3642      	adds	r6, #66	; 0x42
 8001c74:	1d11      	adds	r1, r2, #4
 8001c76:	6019      	str	r1, [r3, #0]
 8001c78:	6813      	ldr	r3, [r2, #0]
 8001c7a:	7033      	strb	r3, [r6, #0]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0a7      	b.n	8001dd0 <_printf_i+0x1cc>
 8001c80:	6808      	ldr	r0, [r1, #0]
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	1d0a      	adds	r2, r1, #4
 8001c86:	0605      	lsls	r5, r0, #24
 8001c88:	d50b      	bpl.n	8001ca2 <_printf_i+0x9e>
 8001c8a:	680d      	ldr	r5, [r1, #0]
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	da03      	bge.n	8001c9a <_printf_i+0x96>
 8001c92:	232d      	movs	r3, #45	; 0x2d
 8001c94:	9a04      	ldr	r2, [sp, #16]
 8001c96:	426d      	negs	r5, r5
 8001c98:	7013      	strb	r3, [r2, #0]
 8001c9a:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <_printf_i+0x21c>)
 8001c9c:	270a      	movs	r7, #10
 8001c9e:	9303      	str	r3, [sp, #12]
 8001ca0:	e01b      	b.n	8001cda <_printf_i+0xd6>
 8001ca2:	680d      	ldr	r5, [r1, #0]
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	0641      	lsls	r1, r0, #25
 8001ca8:	d5f1      	bpl.n	8001c8e <_printf_i+0x8a>
 8001caa:	b22d      	sxth	r5, r5
 8001cac:	e7ef      	b.n	8001c8e <_printf_i+0x8a>
 8001cae:	680d      	ldr	r5, [r1, #0]
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	1d08      	adds	r0, r1, #4
 8001cb4:	6018      	str	r0, [r3, #0]
 8001cb6:	062e      	lsls	r6, r5, #24
 8001cb8:	d501      	bpl.n	8001cbe <_printf_i+0xba>
 8001cba:	680d      	ldr	r5, [r1, #0]
 8001cbc:	e003      	b.n	8001cc6 <_printf_i+0xc2>
 8001cbe:	066d      	lsls	r5, r5, #25
 8001cc0:	d5fb      	bpl.n	8001cba <_printf_i+0xb6>
 8001cc2:	680d      	ldr	r5, [r1, #0]
 8001cc4:	b2ad      	uxth	r5, r5
 8001cc6:	4b56      	ldr	r3, [pc, #344]	; (8001e20 <_printf_i+0x21c>)
 8001cc8:	2708      	movs	r7, #8
 8001cca:	9303      	str	r3, [sp, #12]
 8001ccc:	2a6f      	cmp	r2, #111	; 0x6f
 8001cce:	d000      	beq.n	8001cd2 <_printf_i+0xce>
 8001cd0:	3702      	adds	r7, #2
 8001cd2:	0023      	movs	r3, r4
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	3343      	adds	r3, #67	; 0x43
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	6863      	ldr	r3, [r4, #4]
 8001cdc:	60a3      	str	r3, [r4, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db03      	blt.n	8001cea <_printf_i+0xe6>
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	6821      	ldr	r1, [r4, #0]
 8001ce6:	4391      	bics	r1, r2
 8001ce8:	6021      	str	r1, [r4, #0]
 8001cea:	2d00      	cmp	r5, #0
 8001cec:	d102      	bne.n	8001cf4 <_printf_i+0xf0>
 8001cee:	9e04      	ldr	r6, [sp, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00c      	beq.n	8001d0e <_printf_i+0x10a>
 8001cf4:	9e04      	ldr	r6, [sp, #16]
 8001cf6:	0028      	movs	r0, r5
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	f7fe fa93 	bl	8000224 <__aeabi_uidivmod>
 8001cfe:	9b03      	ldr	r3, [sp, #12]
 8001d00:	3e01      	subs	r6, #1
 8001d02:	5c5b      	ldrb	r3, [r3, r1]
 8001d04:	7033      	strb	r3, [r6, #0]
 8001d06:	002b      	movs	r3, r5
 8001d08:	0005      	movs	r5, r0
 8001d0a:	429f      	cmp	r7, r3
 8001d0c:	d9f3      	bls.n	8001cf6 <_printf_i+0xf2>
 8001d0e:	2f08      	cmp	r7, #8
 8001d10:	d109      	bne.n	8001d26 <_printf_i+0x122>
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	07db      	lsls	r3, r3, #31
 8001d16:	d506      	bpl.n	8001d26 <_printf_i+0x122>
 8001d18:	6863      	ldr	r3, [r4, #4]
 8001d1a:	6922      	ldr	r2, [r4, #16]
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	dc02      	bgt.n	8001d26 <_printf_i+0x122>
 8001d20:	2330      	movs	r3, #48	; 0x30
 8001d22:	3e01      	subs	r6, #1
 8001d24:	7033      	strb	r3, [r6, #0]
 8001d26:	9b04      	ldr	r3, [sp, #16]
 8001d28:	1b9b      	subs	r3, r3, r6
 8001d2a:	6123      	str	r3, [r4, #16]
 8001d2c:	9b07      	ldr	r3, [sp, #28]
 8001d2e:	0021      	movs	r1, r4
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	9805      	ldr	r0, [sp, #20]
 8001d34:	9b06      	ldr	r3, [sp, #24]
 8001d36:	aa09      	add	r2, sp, #36	; 0x24
 8001d38:	f7ff fef4 	bl	8001b24 <_printf_common>
 8001d3c:	1c43      	adds	r3, r0, #1
 8001d3e:	d14c      	bne.n	8001dda <_printf_i+0x1d6>
 8001d40:	2001      	movs	r0, #1
 8001d42:	4240      	negs	r0, r0
 8001d44:	b00b      	add	sp, #44	; 0x2c
 8001d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d48:	3145      	adds	r1, #69	; 0x45
 8001d4a:	700a      	strb	r2, [r1, #0]
 8001d4c:	4a34      	ldr	r2, [pc, #208]	; (8001e20 <_printf_i+0x21c>)
 8001d4e:	9203      	str	r2, [sp, #12]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	6821      	ldr	r1, [r4, #0]
 8001d54:	ca20      	ldmia	r2!, {r5}
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	0608      	lsls	r0, r1, #24
 8001d5a:	d516      	bpl.n	8001d8a <_printf_i+0x186>
 8001d5c:	07cb      	lsls	r3, r1, #31
 8001d5e:	d502      	bpl.n	8001d66 <_printf_i+0x162>
 8001d60:	2320      	movs	r3, #32
 8001d62:	4319      	orrs	r1, r3
 8001d64:	6021      	str	r1, [r4, #0]
 8001d66:	2710      	movs	r7, #16
 8001d68:	2d00      	cmp	r5, #0
 8001d6a:	d1b2      	bne.n	8001cd2 <_printf_i+0xce>
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	439a      	bics	r2, r3
 8001d72:	6022      	str	r2, [r4, #0]
 8001d74:	e7ad      	b.n	8001cd2 <_printf_i+0xce>
 8001d76:	2220      	movs	r2, #32
 8001d78:	6809      	ldr	r1, [r1, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	6022      	str	r2, [r4, #0]
 8001d7e:	0022      	movs	r2, r4
 8001d80:	2178      	movs	r1, #120	; 0x78
 8001d82:	3245      	adds	r2, #69	; 0x45
 8001d84:	7011      	strb	r1, [r2, #0]
 8001d86:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <_printf_i+0x220>)
 8001d88:	e7e1      	b.n	8001d4e <_printf_i+0x14a>
 8001d8a:	0648      	lsls	r0, r1, #25
 8001d8c:	d5e6      	bpl.n	8001d5c <_printf_i+0x158>
 8001d8e:	b2ad      	uxth	r5, r5
 8001d90:	e7e4      	b.n	8001d5c <_printf_i+0x158>
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	680d      	ldr	r5, [r1, #0]
 8001d96:	1d10      	adds	r0, r2, #4
 8001d98:	6949      	ldr	r1, [r1, #20]
 8001d9a:	6018      	str	r0, [r3, #0]
 8001d9c:	6813      	ldr	r3, [r2, #0]
 8001d9e:	062e      	lsls	r6, r5, #24
 8001da0:	d501      	bpl.n	8001da6 <_printf_i+0x1a2>
 8001da2:	6019      	str	r1, [r3, #0]
 8001da4:	e002      	b.n	8001dac <_printf_i+0x1a8>
 8001da6:	066d      	lsls	r5, r5, #25
 8001da8:	d5fb      	bpl.n	8001da2 <_printf_i+0x19e>
 8001daa:	8019      	strh	r1, [r3, #0]
 8001dac:	2300      	movs	r3, #0
 8001dae:	9e04      	ldr	r6, [sp, #16]
 8001db0:	6123      	str	r3, [r4, #16]
 8001db2:	e7bb      	b.n	8001d2c <_printf_i+0x128>
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	1d11      	adds	r1, r2, #4
 8001db8:	6019      	str	r1, [r3, #0]
 8001dba:	6816      	ldr	r6, [r2, #0]
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	0030      	movs	r0, r6
 8001dc0:	6862      	ldr	r2, [r4, #4]
 8001dc2:	f000 facf 	bl	8002364 <memchr>
 8001dc6:	2800      	cmp	r0, #0
 8001dc8:	d001      	beq.n	8001dce <_printf_i+0x1ca>
 8001dca:	1b80      	subs	r0, r0, r6
 8001dcc:	6060      	str	r0, [r4, #4]
 8001dce:	6863      	ldr	r3, [r4, #4]
 8001dd0:	6123      	str	r3, [r4, #16]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	9a04      	ldr	r2, [sp, #16]
 8001dd6:	7013      	strb	r3, [r2, #0]
 8001dd8:	e7a8      	b.n	8001d2c <_printf_i+0x128>
 8001dda:	6923      	ldr	r3, [r4, #16]
 8001ddc:	0032      	movs	r2, r6
 8001dde:	9906      	ldr	r1, [sp, #24]
 8001de0:	9805      	ldr	r0, [sp, #20]
 8001de2:	9d07      	ldr	r5, [sp, #28]
 8001de4:	47a8      	blx	r5
 8001de6:	1c43      	adds	r3, r0, #1
 8001de8:	d0aa      	beq.n	8001d40 <_printf_i+0x13c>
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	079b      	lsls	r3, r3, #30
 8001dee:	d415      	bmi.n	8001e1c <_printf_i+0x218>
 8001df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001df2:	68e0      	ldr	r0, [r4, #12]
 8001df4:	4298      	cmp	r0, r3
 8001df6:	daa5      	bge.n	8001d44 <_printf_i+0x140>
 8001df8:	0018      	movs	r0, r3
 8001dfa:	e7a3      	b.n	8001d44 <_printf_i+0x140>
 8001dfc:	0022      	movs	r2, r4
 8001dfe:	2301      	movs	r3, #1
 8001e00:	9906      	ldr	r1, [sp, #24]
 8001e02:	9805      	ldr	r0, [sp, #20]
 8001e04:	9e07      	ldr	r6, [sp, #28]
 8001e06:	3219      	adds	r2, #25
 8001e08:	47b0      	blx	r6
 8001e0a:	1c43      	adds	r3, r0, #1
 8001e0c:	d098      	beq.n	8001d40 <_printf_i+0x13c>
 8001e0e:	3501      	adds	r5, #1
 8001e10:	68e3      	ldr	r3, [r4, #12]
 8001e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	42ab      	cmp	r3, r5
 8001e18:	dcf0      	bgt.n	8001dfc <_printf_i+0x1f8>
 8001e1a:	e7e9      	b.n	8001df0 <_printf_i+0x1ec>
 8001e1c:	2500      	movs	r5, #0
 8001e1e:	e7f7      	b.n	8001e10 <_printf_i+0x20c>
 8001e20:	080026ed 	.word	0x080026ed
 8001e24:	080026fe 	.word	0x080026fe

08001e28 <_sbrk_r>:
 8001e28:	2300      	movs	r3, #0
 8001e2a:	b570      	push	{r4, r5, r6, lr}
 8001e2c:	4d06      	ldr	r5, [pc, #24]	; (8001e48 <_sbrk_r+0x20>)
 8001e2e:	0004      	movs	r4, r0
 8001e30:	0008      	movs	r0, r1
 8001e32:	602b      	str	r3, [r5, #0]
 8001e34:	f7fe fd40 	bl	80008b8 <_sbrk>
 8001e38:	1c43      	adds	r3, r0, #1
 8001e3a:	d103      	bne.n	8001e44 <_sbrk_r+0x1c>
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d000      	beq.n	8001e44 <_sbrk_r+0x1c>
 8001e42:	6023      	str	r3, [r4, #0]
 8001e44:	bd70      	pop	{r4, r5, r6, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	200008e4 	.word	0x200008e4

08001e4c <__sread>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	000c      	movs	r4, r1
 8001e50:	250e      	movs	r5, #14
 8001e52:	5f49      	ldrsh	r1, [r1, r5]
 8001e54:	f000 faec 	bl	8002430 <_read_r>
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	db03      	blt.n	8001e64 <__sread+0x18>
 8001e5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e5e:	181b      	adds	r3, r3, r0
 8001e60:	6563      	str	r3, [r4, #84]	; 0x54
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
 8001e64:	89a3      	ldrh	r3, [r4, #12]
 8001e66:	4a02      	ldr	r2, [pc, #8]	; (8001e70 <__sread+0x24>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	81a3      	strh	r3, [r4, #12]
 8001e6c:	e7f9      	b.n	8001e62 <__sread+0x16>
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	ffffefff 	.word	0xffffefff

08001e74 <__swrite>:
 8001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e76:	001f      	movs	r7, r3
 8001e78:	898b      	ldrh	r3, [r1, #12]
 8001e7a:	0005      	movs	r5, r0
 8001e7c:	000c      	movs	r4, r1
 8001e7e:	0016      	movs	r6, r2
 8001e80:	05db      	lsls	r3, r3, #23
 8001e82:	d505      	bpl.n	8001e90 <__swrite+0x1c>
 8001e84:	230e      	movs	r3, #14
 8001e86:	5ec9      	ldrsh	r1, [r1, r3]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f000 f9ea 	bl	8002264 <_lseek_r>
 8001e90:	89a3      	ldrh	r3, [r4, #12]
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <__swrite+0x34>)
 8001e94:	0028      	movs	r0, r5
 8001e96:	4013      	ands	r3, r2
 8001e98:	81a3      	strh	r3, [r4, #12]
 8001e9a:	0032      	movs	r2, r6
 8001e9c:	230e      	movs	r3, #14
 8001e9e:	5ee1      	ldrsh	r1, [r4, r3]
 8001ea0:	003b      	movs	r3, r7
 8001ea2:	f000 f875 	bl	8001f90 <_write_r>
 8001ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ea8:	ffffefff 	.word	0xffffefff

08001eac <__sseek>:
 8001eac:	b570      	push	{r4, r5, r6, lr}
 8001eae:	000c      	movs	r4, r1
 8001eb0:	250e      	movs	r5, #14
 8001eb2:	5f49      	ldrsh	r1, [r1, r5]
 8001eb4:	f000 f9d6 	bl	8002264 <_lseek_r>
 8001eb8:	89a3      	ldrh	r3, [r4, #12]
 8001eba:	1c42      	adds	r2, r0, #1
 8001ebc:	d103      	bne.n	8001ec6 <__sseek+0x1a>
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <__sseek+0x28>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	81a3      	strh	r3, [r4, #12]
 8001ec4:	bd70      	pop	{r4, r5, r6, pc}
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	0152      	lsls	r2, r2, #5
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	81a3      	strh	r3, [r4, #12]
 8001ece:	6560      	str	r0, [r4, #84]	; 0x54
 8001ed0:	e7f8      	b.n	8001ec4 <__sseek+0x18>
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	ffffefff 	.word	0xffffefff

08001ed8 <__sclose>:
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	230e      	movs	r3, #14
 8001edc:	5ec9      	ldrsh	r1, [r1, r3]
 8001ede:	f000 f8e3 	bl	80020a8 <_close_r>
 8001ee2:	bd10      	pop	{r4, pc}

08001ee4 <__swbuf_r>:
 8001ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee6:	0005      	movs	r5, r0
 8001ee8:	000e      	movs	r6, r1
 8001eea:	0014      	movs	r4, r2
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d004      	beq.n	8001efa <__swbuf_r+0x16>
 8001ef0:	6983      	ldr	r3, [r0, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <__swbuf_r+0x16>
 8001ef6:	f7ff fb77 	bl	80015e8 <__sinit>
 8001efa:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <__swbuf_r+0xa0>)
 8001efc:	429c      	cmp	r4, r3
 8001efe:	d12e      	bne.n	8001f5e <__swbuf_r+0x7a>
 8001f00:	686c      	ldr	r4, [r5, #4]
 8001f02:	69a3      	ldr	r3, [r4, #24]
 8001f04:	60a3      	str	r3, [r4, #8]
 8001f06:	89a3      	ldrh	r3, [r4, #12]
 8001f08:	071b      	lsls	r3, r3, #28
 8001f0a:	d532      	bpl.n	8001f72 <__swbuf_r+0x8e>
 8001f0c:	6923      	ldr	r3, [r4, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d02f      	beq.n	8001f72 <__swbuf_r+0x8e>
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	6922      	ldr	r2, [r4, #16]
 8001f16:	b2f7      	uxtb	r7, r6
 8001f18:	1a98      	subs	r0, r3, r2
 8001f1a:	6963      	ldr	r3, [r4, #20]
 8001f1c:	b2f6      	uxtb	r6, r6
 8001f1e:	4283      	cmp	r3, r0
 8001f20:	dc05      	bgt.n	8001f2e <__swbuf_r+0x4a>
 8001f22:	0021      	movs	r1, r4
 8001f24:	0028      	movs	r0, r5
 8001f26:	f000 f95d 	bl	80021e4 <_fflush_r>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d127      	bne.n	8001f7e <__swbuf_r+0x9a>
 8001f2e:	68a3      	ldr	r3, [r4, #8]
 8001f30:	3001      	adds	r0, #1
 8001f32:	3b01      	subs	r3, #1
 8001f34:	60a3      	str	r3, [r4, #8]
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	6022      	str	r2, [r4, #0]
 8001f3c:	701f      	strb	r7, [r3, #0]
 8001f3e:	6963      	ldr	r3, [r4, #20]
 8001f40:	4283      	cmp	r3, r0
 8001f42:	d004      	beq.n	8001f4e <__swbuf_r+0x6a>
 8001f44:	89a3      	ldrh	r3, [r4, #12]
 8001f46:	07db      	lsls	r3, r3, #31
 8001f48:	d507      	bpl.n	8001f5a <__swbuf_r+0x76>
 8001f4a:	2e0a      	cmp	r6, #10
 8001f4c:	d105      	bne.n	8001f5a <__swbuf_r+0x76>
 8001f4e:	0021      	movs	r1, r4
 8001f50:	0028      	movs	r0, r5
 8001f52:	f000 f947 	bl	80021e4 <_fflush_r>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d111      	bne.n	8001f7e <__swbuf_r+0x9a>
 8001f5a:	0030      	movs	r0, r6
 8001f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <__swbuf_r+0xa4>)
 8001f60:	429c      	cmp	r4, r3
 8001f62:	d101      	bne.n	8001f68 <__swbuf_r+0x84>
 8001f64:	68ac      	ldr	r4, [r5, #8]
 8001f66:	e7cc      	b.n	8001f02 <__swbuf_r+0x1e>
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <__swbuf_r+0xa8>)
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	d1c9      	bne.n	8001f02 <__swbuf_r+0x1e>
 8001f6e:	68ec      	ldr	r4, [r5, #12]
 8001f70:	e7c7      	b.n	8001f02 <__swbuf_r+0x1e>
 8001f72:	0021      	movs	r1, r4
 8001f74:	0028      	movs	r0, r5
 8001f76:	f000 f81f 	bl	8001fb8 <__swsetup_r>
 8001f7a:	2800      	cmp	r0, #0
 8001f7c:	d0c9      	beq.n	8001f12 <__swbuf_r+0x2e>
 8001f7e:	2601      	movs	r6, #1
 8001f80:	4276      	negs	r6, r6
 8001f82:	e7ea      	b.n	8001f5a <__swbuf_r+0x76>
 8001f84:	0800269c 	.word	0x0800269c
 8001f88:	080026bc 	.word	0x080026bc
 8001f8c:	0800267c 	.word	0x0800267c

08001f90 <_write_r>:
 8001f90:	b570      	push	{r4, r5, r6, lr}
 8001f92:	0004      	movs	r4, r0
 8001f94:	0008      	movs	r0, r1
 8001f96:	0011      	movs	r1, r2
 8001f98:	001a      	movs	r2, r3
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	4d05      	ldr	r5, [pc, #20]	; (8001fb4 <_write_r+0x24>)
 8001f9e:	602b      	str	r3, [r5, #0]
 8001fa0:	f7fe fb78 	bl	8000694 <_write>
 8001fa4:	1c43      	adds	r3, r0, #1
 8001fa6:	d103      	bne.n	8001fb0 <_write_r+0x20>
 8001fa8:	682b      	ldr	r3, [r5, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d000      	beq.n	8001fb0 <_write_r+0x20>
 8001fae:	6023      	str	r3, [r4, #0]
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	200008e4 	.word	0x200008e4

08001fb8 <__swsetup_r>:
 8001fb8:	4b37      	ldr	r3, [pc, #220]	; (8002098 <__swsetup_r+0xe0>)
 8001fba:	b570      	push	{r4, r5, r6, lr}
 8001fbc:	681d      	ldr	r5, [r3, #0]
 8001fbe:	0006      	movs	r6, r0
 8001fc0:	000c      	movs	r4, r1
 8001fc2:	2d00      	cmp	r5, #0
 8001fc4:	d005      	beq.n	8001fd2 <__swsetup_r+0x1a>
 8001fc6:	69ab      	ldr	r3, [r5, #24]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d102      	bne.n	8001fd2 <__swsetup_r+0x1a>
 8001fcc:	0028      	movs	r0, r5
 8001fce:	f7ff fb0b 	bl	80015e8 <__sinit>
 8001fd2:	4b32      	ldr	r3, [pc, #200]	; (800209c <__swsetup_r+0xe4>)
 8001fd4:	429c      	cmp	r4, r3
 8001fd6:	d10f      	bne.n	8001ff8 <__swsetup_r+0x40>
 8001fd8:	686c      	ldr	r4, [r5, #4]
 8001fda:	230c      	movs	r3, #12
 8001fdc:	5ee2      	ldrsh	r2, [r4, r3]
 8001fde:	b293      	uxth	r3, r2
 8001fe0:	0711      	lsls	r1, r2, #28
 8001fe2:	d42d      	bmi.n	8002040 <__swsetup_r+0x88>
 8001fe4:	06d9      	lsls	r1, r3, #27
 8001fe6:	d411      	bmi.n	800200c <__swsetup_r+0x54>
 8001fe8:	2309      	movs	r3, #9
 8001fea:	2001      	movs	r0, #1
 8001fec:	6033      	str	r3, [r6, #0]
 8001fee:	3337      	adds	r3, #55	; 0x37
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	81a3      	strh	r3, [r4, #12]
 8001ff4:	4240      	negs	r0, r0
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
 8001ff8:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <__swsetup_r+0xe8>)
 8001ffa:	429c      	cmp	r4, r3
 8001ffc:	d101      	bne.n	8002002 <__swsetup_r+0x4a>
 8001ffe:	68ac      	ldr	r4, [r5, #8]
 8002000:	e7eb      	b.n	8001fda <__swsetup_r+0x22>
 8002002:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <__swsetup_r+0xec>)
 8002004:	429c      	cmp	r4, r3
 8002006:	d1e8      	bne.n	8001fda <__swsetup_r+0x22>
 8002008:	68ec      	ldr	r4, [r5, #12]
 800200a:	e7e6      	b.n	8001fda <__swsetup_r+0x22>
 800200c:	075b      	lsls	r3, r3, #29
 800200e:	d513      	bpl.n	8002038 <__swsetup_r+0x80>
 8002010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002012:	2900      	cmp	r1, #0
 8002014:	d008      	beq.n	8002028 <__swsetup_r+0x70>
 8002016:	0023      	movs	r3, r4
 8002018:	3344      	adds	r3, #68	; 0x44
 800201a:	4299      	cmp	r1, r3
 800201c:	d002      	beq.n	8002024 <__swsetup_r+0x6c>
 800201e:	0030      	movs	r0, r6
 8002020:	f000 f9bc 	bl	800239c <_free_r>
 8002024:	2300      	movs	r3, #0
 8002026:	6363      	str	r3, [r4, #52]	; 0x34
 8002028:	2224      	movs	r2, #36	; 0x24
 800202a:	89a3      	ldrh	r3, [r4, #12]
 800202c:	4393      	bics	r3, r2
 800202e:	81a3      	strh	r3, [r4, #12]
 8002030:	2300      	movs	r3, #0
 8002032:	6063      	str	r3, [r4, #4]
 8002034:	6923      	ldr	r3, [r4, #16]
 8002036:	6023      	str	r3, [r4, #0]
 8002038:	2308      	movs	r3, #8
 800203a:	89a2      	ldrh	r2, [r4, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	81a3      	strh	r3, [r4, #12]
 8002040:	6923      	ldr	r3, [r4, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10b      	bne.n	800205e <__swsetup_r+0xa6>
 8002046:	21a0      	movs	r1, #160	; 0xa0
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	89a3      	ldrh	r3, [r4, #12]
 800204c:	0089      	lsls	r1, r1, #2
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	400b      	ands	r3, r1
 8002052:	4293      	cmp	r3, r2
 8002054:	d003      	beq.n	800205e <__swsetup_r+0xa6>
 8002056:	0021      	movs	r1, r4
 8002058:	0030      	movs	r0, r6
 800205a:	f000 f93f 	bl	80022dc <__smakebuf_r>
 800205e:	220c      	movs	r2, #12
 8002060:	5ea3      	ldrsh	r3, [r4, r2]
 8002062:	2001      	movs	r0, #1
 8002064:	001a      	movs	r2, r3
 8002066:	b299      	uxth	r1, r3
 8002068:	4002      	ands	r2, r0
 800206a:	4203      	tst	r3, r0
 800206c:	d00f      	beq.n	800208e <__swsetup_r+0xd6>
 800206e:	2200      	movs	r2, #0
 8002070:	60a2      	str	r2, [r4, #8]
 8002072:	6962      	ldr	r2, [r4, #20]
 8002074:	4252      	negs	r2, r2
 8002076:	61a2      	str	r2, [r4, #24]
 8002078:	2000      	movs	r0, #0
 800207a:	6922      	ldr	r2, [r4, #16]
 800207c:	4282      	cmp	r2, r0
 800207e:	d1ba      	bne.n	8001ff6 <__swsetup_r+0x3e>
 8002080:	060a      	lsls	r2, r1, #24
 8002082:	d5b8      	bpl.n	8001ff6 <__swsetup_r+0x3e>
 8002084:	2240      	movs	r2, #64	; 0x40
 8002086:	4313      	orrs	r3, r2
 8002088:	81a3      	strh	r3, [r4, #12]
 800208a:	3801      	subs	r0, #1
 800208c:	e7b3      	b.n	8001ff6 <__swsetup_r+0x3e>
 800208e:	0788      	lsls	r0, r1, #30
 8002090:	d400      	bmi.n	8002094 <__swsetup_r+0xdc>
 8002092:	6962      	ldr	r2, [r4, #20]
 8002094:	60a2      	str	r2, [r4, #8]
 8002096:	e7ef      	b.n	8002078 <__swsetup_r+0xc0>
 8002098:	20000008 	.word	0x20000008
 800209c:	0800269c 	.word	0x0800269c
 80020a0:	080026bc 	.word	0x080026bc
 80020a4:	0800267c 	.word	0x0800267c

080020a8 <_close_r>:
 80020a8:	2300      	movs	r3, #0
 80020aa:	b570      	push	{r4, r5, r6, lr}
 80020ac:	4d06      	ldr	r5, [pc, #24]	; (80020c8 <_close_r+0x20>)
 80020ae:	0004      	movs	r4, r0
 80020b0:	0008      	movs	r0, r1
 80020b2:	602b      	str	r3, [r5, #0]
 80020b4:	f7fe fbd3 	bl	800085e <_close>
 80020b8:	1c43      	adds	r3, r0, #1
 80020ba:	d103      	bne.n	80020c4 <_close_r+0x1c>
 80020bc:	682b      	ldr	r3, [r5, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d000      	beq.n	80020c4 <_close_r+0x1c>
 80020c2:	6023      	str	r3, [r4, #0]
 80020c4:	bd70      	pop	{r4, r5, r6, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	200008e4 	.word	0x200008e4

080020cc <__sflush_r>:
 80020cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020ce:	898b      	ldrh	r3, [r1, #12]
 80020d0:	0005      	movs	r5, r0
 80020d2:	000c      	movs	r4, r1
 80020d4:	071a      	lsls	r2, r3, #28
 80020d6:	d45f      	bmi.n	8002198 <__sflush_r+0xcc>
 80020d8:	684a      	ldr	r2, [r1, #4]
 80020da:	2a00      	cmp	r2, #0
 80020dc:	dc04      	bgt.n	80020e8 <__sflush_r+0x1c>
 80020de:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80020e0:	2a00      	cmp	r2, #0
 80020e2:	dc01      	bgt.n	80020e8 <__sflush_r+0x1c>
 80020e4:	2000      	movs	r0, #0
 80020e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80020e8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80020ea:	2f00      	cmp	r7, #0
 80020ec:	d0fa      	beq.n	80020e4 <__sflush_r+0x18>
 80020ee:	2200      	movs	r2, #0
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	682e      	ldr	r6, [r5, #0]
 80020f4:	602a      	str	r2, [r5, #0]
 80020f6:	001a      	movs	r2, r3
 80020f8:	0149      	lsls	r1, r1, #5
 80020fa:	400a      	ands	r2, r1
 80020fc:	420b      	tst	r3, r1
 80020fe:	d034      	beq.n	800216a <__sflush_r+0x9e>
 8002100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002102:	89a3      	ldrh	r3, [r4, #12]
 8002104:	075b      	lsls	r3, r3, #29
 8002106:	d506      	bpl.n	8002116 <__sflush_r+0x4a>
 8002108:	6863      	ldr	r3, [r4, #4]
 800210a:	1ac0      	subs	r0, r0, r3
 800210c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <__sflush_r+0x4a>
 8002112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002114:	1ac0      	subs	r0, r0, r3
 8002116:	0002      	movs	r2, r0
 8002118:	6a21      	ldr	r1, [r4, #32]
 800211a:	2300      	movs	r3, #0
 800211c:	0028      	movs	r0, r5
 800211e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002120:	47b8      	blx	r7
 8002122:	89a1      	ldrh	r1, [r4, #12]
 8002124:	1c43      	adds	r3, r0, #1
 8002126:	d106      	bne.n	8002136 <__sflush_r+0x6a>
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	2b1d      	cmp	r3, #29
 800212c:	d831      	bhi.n	8002192 <__sflush_r+0xc6>
 800212e:	4a2c      	ldr	r2, [pc, #176]	; (80021e0 <__sflush_r+0x114>)
 8002130:	40da      	lsrs	r2, r3
 8002132:	07d3      	lsls	r3, r2, #31
 8002134:	d52d      	bpl.n	8002192 <__sflush_r+0xc6>
 8002136:	2300      	movs	r3, #0
 8002138:	6063      	str	r3, [r4, #4]
 800213a:	6923      	ldr	r3, [r4, #16]
 800213c:	6023      	str	r3, [r4, #0]
 800213e:	04cb      	lsls	r3, r1, #19
 8002140:	d505      	bpl.n	800214e <__sflush_r+0x82>
 8002142:	1c43      	adds	r3, r0, #1
 8002144:	d102      	bne.n	800214c <__sflush_r+0x80>
 8002146:	682b      	ldr	r3, [r5, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d100      	bne.n	800214e <__sflush_r+0x82>
 800214c:	6560      	str	r0, [r4, #84]	; 0x54
 800214e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002150:	602e      	str	r6, [r5, #0]
 8002152:	2900      	cmp	r1, #0
 8002154:	d0c6      	beq.n	80020e4 <__sflush_r+0x18>
 8002156:	0023      	movs	r3, r4
 8002158:	3344      	adds	r3, #68	; 0x44
 800215a:	4299      	cmp	r1, r3
 800215c:	d002      	beq.n	8002164 <__sflush_r+0x98>
 800215e:	0028      	movs	r0, r5
 8002160:	f000 f91c 	bl	800239c <_free_r>
 8002164:	2000      	movs	r0, #0
 8002166:	6360      	str	r0, [r4, #52]	; 0x34
 8002168:	e7bd      	b.n	80020e6 <__sflush_r+0x1a>
 800216a:	2301      	movs	r3, #1
 800216c:	0028      	movs	r0, r5
 800216e:	6a21      	ldr	r1, [r4, #32]
 8002170:	47b8      	blx	r7
 8002172:	1c43      	adds	r3, r0, #1
 8002174:	d1c5      	bne.n	8002102 <__sflush_r+0x36>
 8002176:	682b      	ldr	r3, [r5, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0c2      	beq.n	8002102 <__sflush_r+0x36>
 800217c:	2b1d      	cmp	r3, #29
 800217e:	d001      	beq.n	8002184 <__sflush_r+0xb8>
 8002180:	2b16      	cmp	r3, #22
 8002182:	d101      	bne.n	8002188 <__sflush_r+0xbc>
 8002184:	602e      	str	r6, [r5, #0]
 8002186:	e7ad      	b.n	80020e4 <__sflush_r+0x18>
 8002188:	2340      	movs	r3, #64	; 0x40
 800218a:	89a2      	ldrh	r2, [r4, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	81a3      	strh	r3, [r4, #12]
 8002190:	e7a9      	b.n	80020e6 <__sflush_r+0x1a>
 8002192:	2340      	movs	r3, #64	; 0x40
 8002194:	430b      	orrs	r3, r1
 8002196:	e7fa      	b.n	800218e <__sflush_r+0xc2>
 8002198:	690f      	ldr	r7, [r1, #16]
 800219a:	2f00      	cmp	r7, #0
 800219c:	d0a2      	beq.n	80020e4 <__sflush_r+0x18>
 800219e:	680a      	ldr	r2, [r1, #0]
 80021a0:	600f      	str	r7, [r1, #0]
 80021a2:	1bd2      	subs	r2, r2, r7
 80021a4:	9201      	str	r2, [sp, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	079b      	lsls	r3, r3, #30
 80021aa:	d100      	bne.n	80021ae <__sflush_r+0xe2>
 80021ac:	694a      	ldr	r2, [r1, #20]
 80021ae:	60a2      	str	r2, [r4, #8]
 80021b0:	9b01      	ldr	r3, [sp, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	dc00      	bgt.n	80021b8 <__sflush_r+0xec>
 80021b6:	e795      	b.n	80020e4 <__sflush_r+0x18>
 80021b8:	003a      	movs	r2, r7
 80021ba:	0028      	movs	r0, r5
 80021bc:	9b01      	ldr	r3, [sp, #4]
 80021be:	6a21      	ldr	r1, [r4, #32]
 80021c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80021c2:	47b0      	blx	r6
 80021c4:	2800      	cmp	r0, #0
 80021c6:	dc06      	bgt.n	80021d6 <__sflush_r+0x10a>
 80021c8:	2340      	movs	r3, #64	; 0x40
 80021ca:	2001      	movs	r0, #1
 80021cc:	89a2      	ldrh	r2, [r4, #12]
 80021ce:	4240      	negs	r0, r0
 80021d0:	4313      	orrs	r3, r2
 80021d2:	81a3      	strh	r3, [r4, #12]
 80021d4:	e787      	b.n	80020e6 <__sflush_r+0x1a>
 80021d6:	9b01      	ldr	r3, [sp, #4]
 80021d8:	183f      	adds	r7, r7, r0
 80021da:	1a1b      	subs	r3, r3, r0
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	e7e7      	b.n	80021b0 <__sflush_r+0xe4>
 80021e0:	20400001 	.word	0x20400001

080021e4 <_fflush_r>:
 80021e4:	690b      	ldr	r3, [r1, #16]
 80021e6:	b570      	push	{r4, r5, r6, lr}
 80021e8:	0005      	movs	r5, r0
 80021ea:	000c      	movs	r4, r1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <_fflush_r+0x12>
 80021f0:	2500      	movs	r5, #0
 80021f2:	0028      	movs	r0, r5
 80021f4:	bd70      	pop	{r4, r5, r6, pc}
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d004      	beq.n	8002204 <_fflush_r+0x20>
 80021fa:	6983      	ldr	r3, [r0, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <_fflush_r+0x20>
 8002200:	f7ff f9f2 	bl	80015e8 <__sinit>
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <_fflush_r+0x74>)
 8002206:	429c      	cmp	r4, r3
 8002208:	d11b      	bne.n	8002242 <_fflush_r+0x5e>
 800220a:	686c      	ldr	r4, [r5, #4]
 800220c:	220c      	movs	r2, #12
 800220e:	5ea3      	ldrsh	r3, [r4, r2]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0ed      	beq.n	80021f0 <_fflush_r+0xc>
 8002214:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002216:	07d2      	lsls	r2, r2, #31
 8002218:	d404      	bmi.n	8002224 <_fflush_r+0x40>
 800221a:	059b      	lsls	r3, r3, #22
 800221c:	d402      	bmi.n	8002224 <_fflush_r+0x40>
 800221e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002220:	f7ff fa83 	bl	800172a <__retarget_lock_acquire_recursive>
 8002224:	0028      	movs	r0, r5
 8002226:	0021      	movs	r1, r4
 8002228:	f7ff ff50 	bl	80020cc <__sflush_r>
 800222c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800222e:	0005      	movs	r5, r0
 8002230:	07db      	lsls	r3, r3, #31
 8002232:	d4de      	bmi.n	80021f2 <_fflush_r+0xe>
 8002234:	89a3      	ldrh	r3, [r4, #12]
 8002236:	059b      	lsls	r3, r3, #22
 8002238:	d4db      	bmi.n	80021f2 <_fflush_r+0xe>
 800223a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800223c:	f7ff fa76 	bl	800172c <__retarget_lock_release_recursive>
 8002240:	e7d7      	b.n	80021f2 <_fflush_r+0xe>
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <_fflush_r+0x78>)
 8002244:	429c      	cmp	r4, r3
 8002246:	d101      	bne.n	800224c <_fflush_r+0x68>
 8002248:	68ac      	ldr	r4, [r5, #8]
 800224a:	e7df      	b.n	800220c <_fflush_r+0x28>
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <_fflush_r+0x7c>)
 800224e:	429c      	cmp	r4, r3
 8002250:	d1dc      	bne.n	800220c <_fflush_r+0x28>
 8002252:	68ec      	ldr	r4, [r5, #12]
 8002254:	e7da      	b.n	800220c <_fflush_r+0x28>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	0800269c 	.word	0x0800269c
 800225c:	080026bc 	.word	0x080026bc
 8002260:	0800267c 	.word	0x0800267c

08002264 <_lseek_r>:
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	0004      	movs	r4, r0
 8002268:	0008      	movs	r0, r1
 800226a:	0011      	movs	r1, r2
 800226c:	001a      	movs	r2, r3
 800226e:	2300      	movs	r3, #0
 8002270:	4d05      	ldr	r5, [pc, #20]	; (8002288 <_lseek_r+0x24>)
 8002272:	602b      	str	r3, [r5, #0]
 8002274:	f7fe fb14 	bl	80008a0 <_lseek>
 8002278:	1c43      	adds	r3, r0, #1
 800227a:	d103      	bne.n	8002284 <_lseek_r+0x20>
 800227c:	682b      	ldr	r3, [r5, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d000      	beq.n	8002284 <_lseek_r+0x20>
 8002282:	6023      	str	r3, [r4, #0]
 8002284:	bd70      	pop	{r4, r5, r6, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	200008e4 	.word	0x200008e4

0800228c <__swhatbuf_r>:
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	000e      	movs	r6, r1
 8002290:	001d      	movs	r5, r3
 8002292:	230e      	movs	r3, #14
 8002294:	5ec9      	ldrsh	r1, [r1, r3]
 8002296:	0014      	movs	r4, r2
 8002298:	b096      	sub	sp, #88	; 0x58
 800229a:	2900      	cmp	r1, #0
 800229c:	da08      	bge.n	80022b0 <__swhatbuf_r+0x24>
 800229e:	220c      	movs	r2, #12
 80022a0:	5eb3      	ldrsh	r3, [r6, r2]
 80022a2:	2200      	movs	r2, #0
 80022a4:	602a      	str	r2, [r5, #0]
 80022a6:	061b      	lsls	r3, r3, #24
 80022a8:	d411      	bmi.n	80022ce <__swhatbuf_r+0x42>
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	e00f      	b.n	80022d0 <__swhatbuf_r+0x44>
 80022b0:	466a      	mov	r2, sp
 80022b2:	f000 f8d1 	bl	8002458 <_fstat_r>
 80022b6:	2800      	cmp	r0, #0
 80022b8:	dbf1      	blt.n	800229e <__swhatbuf_r+0x12>
 80022ba:	23f0      	movs	r3, #240	; 0xf0
 80022bc:	9901      	ldr	r1, [sp, #4]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	4019      	ands	r1, r3
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <__swhatbuf_r+0x4c>)
 80022c4:	18c9      	adds	r1, r1, r3
 80022c6:	424b      	negs	r3, r1
 80022c8:	4159      	adcs	r1, r3
 80022ca:	6029      	str	r1, [r5, #0]
 80022cc:	e7ed      	b.n	80022aa <__swhatbuf_r+0x1e>
 80022ce:	2340      	movs	r3, #64	; 0x40
 80022d0:	2000      	movs	r0, #0
 80022d2:	6023      	str	r3, [r4, #0]
 80022d4:	b016      	add	sp, #88	; 0x58
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
 80022d8:	ffffe000 	.word	0xffffe000

080022dc <__smakebuf_r>:
 80022dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022de:	2602      	movs	r6, #2
 80022e0:	898b      	ldrh	r3, [r1, #12]
 80022e2:	0005      	movs	r5, r0
 80022e4:	000c      	movs	r4, r1
 80022e6:	4233      	tst	r3, r6
 80022e8:	d006      	beq.n	80022f8 <__smakebuf_r+0x1c>
 80022ea:	0023      	movs	r3, r4
 80022ec:	3347      	adds	r3, #71	; 0x47
 80022ee:	6023      	str	r3, [r4, #0]
 80022f0:	6123      	str	r3, [r4, #16]
 80022f2:	2301      	movs	r3, #1
 80022f4:	6163      	str	r3, [r4, #20]
 80022f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80022f8:	466a      	mov	r2, sp
 80022fa:	ab01      	add	r3, sp, #4
 80022fc:	f7ff ffc6 	bl	800228c <__swhatbuf_r>
 8002300:	9900      	ldr	r1, [sp, #0]
 8002302:	0007      	movs	r7, r0
 8002304:	0028      	movs	r0, r5
 8002306:	f7ff fa35 	bl	8001774 <_malloc_r>
 800230a:	2800      	cmp	r0, #0
 800230c:	d108      	bne.n	8002320 <__smakebuf_r+0x44>
 800230e:	220c      	movs	r2, #12
 8002310:	5ea3      	ldrsh	r3, [r4, r2]
 8002312:	059a      	lsls	r2, r3, #22
 8002314:	d4ef      	bmi.n	80022f6 <__smakebuf_r+0x1a>
 8002316:	2203      	movs	r2, #3
 8002318:	4393      	bics	r3, r2
 800231a:	431e      	orrs	r6, r3
 800231c:	81a6      	strh	r6, [r4, #12]
 800231e:	e7e4      	b.n	80022ea <__smakebuf_r+0xe>
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <__smakebuf_r+0x84>)
 8002322:	62ab      	str	r3, [r5, #40]	; 0x28
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	89a2      	ldrh	r2, [r4, #12]
 8002328:	6020      	str	r0, [r4, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	81a3      	strh	r3, [r4, #12]
 800232e:	9b00      	ldr	r3, [sp, #0]
 8002330:	6120      	str	r0, [r4, #16]
 8002332:	6163      	str	r3, [r4, #20]
 8002334:	9b01      	ldr	r3, [sp, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <__smakebuf_r+0x7a>
 800233a:	0028      	movs	r0, r5
 800233c:	230e      	movs	r3, #14
 800233e:	5ee1      	ldrsh	r1, [r4, r3]
 8002340:	f000 f89c 	bl	800247c <_isatty_r>
 8002344:	2800      	cmp	r0, #0
 8002346:	d006      	beq.n	8002356 <__smakebuf_r+0x7a>
 8002348:	2203      	movs	r2, #3
 800234a:	89a3      	ldrh	r3, [r4, #12]
 800234c:	4393      	bics	r3, r2
 800234e:	001a      	movs	r2, r3
 8002350:	2301      	movs	r3, #1
 8002352:	4313      	orrs	r3, r2
 8002354:	81a3      	strh	r3, [r4, #12]
 8002356:	89a0      	ldrh	r0, [r4, #12]
 8002358:	4307      	orrs	r7, r0
 800235a:	81a7      	strh	r7, [r4, #12]
 800235c:	e7cb      	b.n	80022f6 <__smakebuf_r+0x1a>
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	0800156d 	.word	0x0800156d

08002364 <memchr>:
 8002364:	b2c9      	uxtb	r1, r1
 8002366:	1882      	adds	r2, r0, r2
 8002368:	4290      	cmp	r0, r2
 800236a:	d101      	bne.n	8002370 <memchr+0xc>
 800236c:	2000      	movs	r0, #0
 800236e:	4770      	bx	lr
 8002370:	7803      	ldrb	r3, [r0, #0]
 8002372:	428b      	cmp	r3, r1
 8002374:	d0fb      	beq.n	800236e <memchr+0xa>
 8002376:	3001      	adds	r0, #1
 8002378:	e7f6      	b.n	8002368 <memchr+0x4>
	...

0800237c <__malloc_lock>:
 800237c:	b510      	push	{r4, lr}
 800237e:	4802      	ldr	r0, [pc, #8]	; (8002388 <__malloc_lock+0xc>)
 8002380:	f7ff f9d3 	bl	800172a <__retarget_lock_acquire_recursive>
 8002384:	bd10      	pop	{r4, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	200008d8 	.word	0x200008d8

0800238c <__malloc_unlock>:
 800238c:	b510      	push	{r4, lr}
 800238e:	4802      	ldr	r0, [pc, #8]	; (8002398 <__malloc_unlock+0xc>)
 8002390:	f7ff f9cc 	bl	800172c <__retarget_lock_release_recursive>
 8002394:	bd10      	pop	{r4, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	200008d8 	.word	0x200008d8

0800239c <_free_r>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	0005      	movs	r5, r0
 80023a0:	2900      	cmp	r1, #0
 80023a2:	d010      	beq.n	80023c6 <_free_r+0x2a>
 80023a4:	1f0c      	subs	r4, r1, #4
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	da00      	bge.n	80023ae <_free_r+0x12>
 80023ac:	18e4      	adds	r4, r4, r3
 80023ae:	0028      	movs	r0, r5
 80023b0:	f7ff ffe4 	bl	800237c <__malloc_lock>
 80023b4:	4a1d      	ldr	r2, [pc, #116]	; (800242c <_free_r+0x90>)
 80023b6:	6813      	ldr	r3, [r2, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d105      	bne.n	80023c8 <_free_r+0x2c>
 80023bc:	6063      	str	r3, [r4, #4]
 80023be:	6014      	str	r4, [r2, #0]
 80023c0:	0028      	movs	r0, r5
 80023c2:	f7ff ffe3 	bl	800238c <__malloc_unlock>
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
 80023c8:	42a3      	cmp	r3, r4
 80023ca:	d908      	bls.n	80023de <_free_r+0x42>
 80023cc:	6821      	ldr	r1, [r4, #0]
 80023ce:	1860      	adds	r0, r4, r1
 80023d0:	4283      	cmp	r3, r0
 80023d2:	d1f3      	bne.n	80023bc <_free_r+0x20>
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	1841      	adds	r1, r0, r1
 80023da:	6021      	str	r1, [r4, #0]
 80023dc:	e7ee      	b.n	80023bc <_free_r+0x20>
 80023de:	001a      	movs	r2, r3
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <_free_r+0x4e>
 80023e6:	42a3      	cmp	r3, r4
 80023e8:	d9f9      	bls.n	80023de <_free_r+0x42>
 80023ea:	6811      	ldr	r1, [r2, #0]
 80023ec:	1850      	adds	r0, r2, r1
 80023ee:	42a0      	cmp	r0, r4
 80023f0:	d10b      	bne.n	800240a <_free_r+0x6e>
 80023f2:	6820      	ldr	r0, [r4, #0]
 80023f4:	1809      	adds	r1, r1, r0
 80023f6:	1850      	adds	r0, r2, r1
 80023f8:	6011      	str	r1, [r2, #0]
 80023fa:	4283      	cmp	r3, r0
 80023fc:	d1e0      	bne.n	80023c0 <_free_r+0x24>
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	1841      	adds	r1, r0, r1
 8002404:	6011      	str	r1, [r2, #0]
 8002406:	6053      	str	r3, [r2, #4]
 8002408:	e7da      	b.n	80023c0 <_free_r+0x24>
 800240a:	42a0      	cmp	r0, r4
 800240c:	d902      	bls.n	8002414 <_free_r+0x78>
 800240e:	230c      	movs	r3, #12
 8002410:	602b      	str	r3, [r5, #0]
 8002412:	e7d5      	b.n	80023c0 <_free_r+0x24>
 8002414:	6821      	ldr	r1, [r4, #0]
 8002416:	1860      	adds	r0, r4, r1
 8002418:	4283      	cmp	r3, r0
 800241a:	d103      	bne.n	8002424 <_free_r+0x88>
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	1841      	adds	r1, r0, r1
 8002422:	6021      	str	r1, [r4, #0]
 8002424:	6063      	str	r3, [r4, #4]
 8002426:	6054      	str	r4, [r2, #4]
 8002428:	e7ca      	b.n	80023c0 <_free_r+0x24>
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	200008dc 	.word	0x200008dc

08002430 <_read_r>:
 8002430:	b570      	push	{r4, r5, r6, lr}
 8002432:	0004      	movs	r4, r0
 8002434:	0008      	movs	r0, r1
 8002436:	0011      	movs	r1, r2
 8002438:	001a      	movs	r2, r3
 800243a:	2300      	movs	r3, #0
 800243c:	4d05      	ldr	r5, [pc, #20]	; (8002454 <_read_r+0x24>)
 800243e:	602b      	str	r3, [r5, #0]
 8002440:	f7fe f9f0 	bl	8000824 <_read>
 8002444:	1c43      	adds	r3, r0, #1
 8002446:	d103      	bne.n	8002450 <_read_r+0x20>
 8002448:	682b      	ldr	r3, [r5, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d000      	beq.n	8002450 <_read_r+0x20>
 800244e:	6023      	str	r3, [r4, #0]
 8002450:	bd70      	pop	{r4, r5, r6, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	200008e4 	.word	0x200008e4

08002458 <_fstat_r>:
 8002458:	2300      	movs	r3, #0
 800245a:	b570      	push	{r4, r5, r6, lr}
 800245c:	4d06      	ldr	r5, [pc, #24]	; (8002478 <_fstat_r+0x20>)
 800245e:	0004      	movs	r4, r0
 8002460:	0008      	movs	r0, r1
 8002462:	0011      	movs	r1, r2
 8002464:	602b      	str	r3, [r5, #0]
 8002466:	f7fe fa04 	bl	8000872 <_fstat>
 800246a:	1c43      	adds	r3, r0, #1
 800246c:	d103      	bne.n	8002476 <_fstat_r+0x1e>
 800246e:	682b      	ldr	r3, [r5, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d000      	beq.n	8002476 <_fstat_r+0x1e>
 8002474:	6023      	str	r3, [r4, #0]
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	200008e4 	.word	0x200008e4

0800247c <_isatty_r>:
 800247c:	2300      	movs	r3, #0
 800247e:	b570      	push	{r4, r5, r6, lr}
 8002480:	4d06      	ldr	r5, [pc, #24]	; (800249c <_isatty_r+0x20>)
 8002482:	0004      	movs	r4, r0
 8002484:	0008      	movs	r0, r1
 8002486:	602b      	str	r3, [r5, #0]
 8002488:	f7fe fa01 	bl	800088e <_isatty>
 800248c:	1c43      	adds	r3, r0, #1
 800248e:	d103      	bne.n	8002498 <_isatty_r+0x1c>
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d000      	beq.n	8002498 <_isatty_r+0x1c>
 8002496:	6023      	str	r3, [r4, #0]
 8002498:	bd70      	pop	{r4, r5, r6, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	200008e4 	.word	0x200008e4

080024a0 <_init>:
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a6:	bc08      	pop	{r3}
 80024a8:	469e      	mov	lr, r3
 80024aa:	4770      	bx	lr

080024ac <_fini>:
 80024ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b2:	bc08      	pop	{r3}
 80024b4:	469e      	mov	lr, r3
 80024b6:	4770      	bx	lr
