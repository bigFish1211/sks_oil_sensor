
g031_oilSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08002800  08002800  00002800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c20  080028bc  080028bc  000028bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080034dc  080034dc  000034dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800355c  0800355c  00003564  2**0
                  CONTENTS
  4 .ARM          00000000  0800355c  0800355c  00003564  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800355c  08003564  00003564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800355c  0800355c  0000355c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003560  08003560  00003560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00003564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000000  08003564  00010000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08003564  00010034  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00003564  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001536  00000000  00000000  0000358c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000073e  00000000  00000000  00004ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00005200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  00005358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000738  00000000  00000000  00005468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ace  00000000  00000000  00005ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000494be  00000000  00000000  0000766e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00050b2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003ac  00000000  00000000  00050b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080028bc <__do_global_dtors_aux>:
 80028bc:	b510      	push	{r4, lr}
 80028be:	4c06      	ldr	r4, [pc, #24]	; (80028d8 <__do_global_dtors_aux+0x1c>)
 80028c0:	7823      	ldrb	r3, [r4, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d107      	bne.n	80028d6 <__do_global_dtors_aux+0x1a>
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <__do_global_dtors_aux+0x20>)
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <__do_global_dtors_aux+0x16>
 80028cc:	4804      	ldr	r0, [pc, #16]	; (80028e0 <__do_global_dtors_aux+0x24>)
 80028ce:	e000      	b.n	80028d2 <__do_global_dtors_aux+0x16>
 80028d0:	bf00      	nop
 80028d2:	2301      	movs	r3, #1
 80028d4:	7023      	strb	r3, [r4, #0]
 80028d6:	bd10      	pop	{r4, pc}
 80028d8:	20000000 	.word	0x20000000
 80028dc:	00000000 	.word	0x00000000
 80028e0:	080034c4 	.word	0x080034c4

080028e4 <frame_dummy>:
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <frame_dummy+0x14>)
 80028e6:	b510      	push	{r4, lr}
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <frame_dummy+0x10>
 80028ec:	4903      	ldr	r1, [pc, #12]	; (80028fc <frame_dummy+0x18>)
 80028ee:	4804      	ldr	r0, [pc, #16]	; (8002900 <frame_dummy+0x1c>)
 80028f0:	e000      	b.n	80028f4 <frame_dummy+0x10>
 80028f2:	bf00      	nop
 80028f4:	bd10      	pop	{r4, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	00000000 	.word	0x00000000
 80028fc:	20000004 	.word	0x20000004
 8002900:	080034c4 	.word	0x080034c4

08002904 <__udivsi3>:
 8002904:	2200      	movs	r2, #0
 8002906:	0843      	lsrs	r3, r0, #1
 8002908:	428b      	cmp	r3, r1
 800290a:	d374      	bcc.n	80029f6 <__udivsi3+0xf2>
 800290c:	0903      	lsrs	r3, r0, #4
 800290e:	428b      	cmp	r3, r1
 8002910:	d35f      	bcc.n	80029d2 <__udivsi3+0xce>
 8002912:	0a03      	lsrs	r3, r0, #8
 8002914:	428b      	cmp	r3, r1
 8002916:	d344      	bcc.n	80029a2 <__udivsi3+0x9e>
 8002918:	0b03      	lsrs	r3, r0, #12
 800291a:	428b      	cmp	r3, r1
 800291c:	d328      	bcc.n	8002970 <__udivsi3+0x6c>
 800291e:	0c03      	lsrs	r3, r0, #16
 8002920:	428b      	cmp	r3, r1
 8002922:	d30d      	bcc.n	8002940 <__udivsi3+0x3c>
 8002924:	22ff      	movs	r2, #255	; 0xff
 8002926:	0209      	lsls	r1, r1, #8
 8002928:	ba12      	rev	r2, r2
 800292a:	0c03      	lsrs	r3, r0, #16
 800292c:	428b      	cmp	r3, r1
 800292e:	d302      	bcc.n	8002936 <__udivsi3+0x32>
 8002930:	1212      	asrs	r2, r2, #8
 8002932:	0209      	lsls	r1, r1, #8
 8002934:	d065      	beq.n	8002a02 <__udivsi3+0xfe>
 8002936:	0b03      	lsrs	r3, r0, #12
 8002938:	428b      	cmp	r3, r1
 800293a:	d319      	bcc.n	8002970 <__udivsi3+0x6c>
 800293c:	e000      	b.n	8002940 <__udivsi3+0x3c>
 800293e:	0a09      	lsrs	r1, r1, #8
 8002940:	0bc3      	lsrs	r3, r0, #15
 8002942:	428b      	cmp	r3, r1
 8002944:	d301      	bcc.n	800294a <__udivsi3+0x46>
 8002946:	03cb      	lsls	r3, r1, #15
 8002948:	1ac0      	subs	r0, r0, r3
 800294a:	4152      	adcs	r2, r2
 800294c:	0b83      	lsrs	r3, r0, #14
 800294e:	428b      	cmp	r3, r1
 8002950:	d301      	bcc.n	8002956 <__udivsi3+0x52>
 8002952:	038b      	lsls	r3, r1, #14
 8002954:	1ac0      	subs	r0, r0, r3
 8002956:	4152      	adcs	r2, r2
 8002958:	0b43      	lsrs	r3, r0, #13
 800295a:	428b      	cmp	r3, r1
 800295c:	d301      	bcc.n	8002962 <__udivsi3+0x5e>
 800295e:	034b      	lsls	r3, r1, #13
 8002960:	1ac0      	subs	r0, r0, r3
 8002962:	4152      	adcs	r2, r2
 8002964:	0b03      	lsrs	r3, r0, #12
 8002966:	428b      	cmp	r3, r1
 8002968:	d301      	bcc.n	800296e <__udivsi3+0x6a>
 800296a:	030b      	lsls	r3, r1, #12
 800296c:	1ac0      	subs	r0, r0, r3
 800296e:	4152      	adcs	r2, r2
 8002970:	0ac3      	lsrs	r3, r0, #11
 8002972:	428b      	cmp	r3, r1
 8002974:	d301      	bcc.n	800297a <__udivsi3+0x76>
 8002976:	02cb      	lsls	r3, r1, #11
 8002978:	1ac0      	subs	r0, r0, r3
 800297a:	4152      	adcs	r2, r2
 800297c:	0a83      	lsrs	r3, r0, #10
 800297e:	428b      	cmp	r3, r1
 8002980:	d301      	bcc.n	8002986 <__udivsi3+0x82>
 8002982:	028b      	lsls	r3, r1, #10
 8002984:	1ac0      	subs	r0, r0, r3
 8002986:	4152      	adcs	r2, r2
 8002988:	0a43      	lsrs	r3, r0, #9
 800298a:	428b      	cmp	r3, r1
 800298c:	d301      	bcc.n	8002992 <__udivsi3+0x8e>
 800298e:	024b      	lsls	r3, r1, #9
 8002990:	1ac0      	subs	r0, r0, r3
 8002992:	4152      	adcs	r2, r2
 8002994:	0a03      	lsrs	r3, r0, #8
 8002996:	428b      	cmp	r3, r1
 8002998:	d301      	bcc.n	800299e <__udivsi3+0x9a>
 800299a:	020b      	lsls	r3, r1, #8
 800299c:	1ac0      	subs	r0, r0, r3
 800299e:	4152      	adcs	r2, r2
 80029a0:	d2cd      	bcs.n	800293e <__udivsi3+0x3a>
 80029a2:	09c3      	lsrs	r3, r0, #7
 80029a4:	428b      	cmp	r3, r1
 80029a6:	d301      	bcc.n	80029ac <__udivsi3+0xa8>
 80029a8:	01cb      	lsls	r3, r1, #7
 80029aa:	1ac0      	subs	r0, r0, r3
 80029ac:	4152      	adcs	r2, r2
 80029ae:	0983      	lsrs	r3, r0, #6
 80029b0:	428b      	cmp	r3, r1
 80029b2:	d301      	bcc.n	80029b8 <__udivsi3+0xb4>
 80029b4:	018b      	lsls	r3, r1, #6
 80029b6:	1ac0      	subs	r0, r0, r3
 80029b8:	4152      	adcs	r2, r2
 80029ba:	0943      	lsrs	r3, r0, #5
 80029bc:	428b      	cmp	r3, r1
 80029be:	d301      	bcc.n	80029c4 <__udivsi3+0xc0>
 80029c0:	014b      	lsls	r3, r1, #5
 80029c2:	1ac0      	subs	r0, r0, r3
 80029c4:	4152      	adcs	r2, r2
 80029c6:	0903      	lsrs	r3, r0, #4
 80029c8:	428b      	cmp	r3, r1
 80029ca:	d301      	bcc.n	80029d0 <__udivsi3+0xcc>
 80029cc:	010b      	lsls	r3, r1, #4
 80029ce:	1ac0      	subs	r0, r0, r3
 80029d0:	4152      	adcs	r2, r2
 80029d2:	08c3      	lsrs	r3, r0, #3
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d301      	bcc.n	80029dc <__udivsi3+0xd8>
 80029d8:	00cb      	lsls	r3, r1, #3
 80029da:	1ac0      	subs	r0, r0, r3
 80029dc:	4152      	adcs	r2, r2
 80029de:	0883      	lsrs	r3, r0, #2
 80029e0:	428b      	cmp	r3, r1
 80029e2:	d301      	bcc.n	80029e8 <__udivsi3+0xe4>
 80029e4:	008b      	lsls	r3, r1, #2
 80029e6:	1ac0      	subs	r0, r0, r3
 80029e8:	4152      	adcs	r2, r2
 80029ea:	0843      	lsrs	r3, r0, #1
 80029ec:	428b      	cmp	r3, r1
 80029ee:	d301      	bcc.n	80029f4 <__udivsi3+0xf0>
 80029f0:	004b      	lsls	r3, r1, #1
 80029f2:	1ac0      	subs	r0, r0, r3
 80029f4:	4152      	adcs	r2, r2
 80029f6:	1a41      	subs	r1, r0, r1
 80029f8:	d200      	bcs.n	80029fc <__udivsi3+0xf8>
 80029fa:	4601      	mov	r1, r0
 80029fc:	4152      	adcs	r2, r2
 80029fe:	4610      	mov	r0, r2
 8002a00:	4770      	bx	lr
 8002a02:	e7ff      	b.n	8002a04 <__udivsi3+0x100>
 8002a04:	b501      	push	{r0, lr}
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 f806 	bl	8002a18 <__aeabi_idiv0>
 8002a0c:	bd02      	pop	{r1, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)

08002a10 <__aeabi_uidivmod>:
 8002a10:	2900      	cmp	r1, #0
 8002a12:	d0f7      	beq.n	8002a04 <__udivsi3+0x100>
 8002a14:	e776      	b.n	8002904 <__udivsi3>
 8002a16:	4770      	bx	lr

08002a18 <__aeabi_idiv0>:
 8002a18:	4770      	bx	lr
 8002a1a:	46c0      	nop			; (mov r8, r8)

08002a1c <main>:
uint32_t static lastPrintTest = 0;

static int setup(void);
static void printTest(void);

int main(void) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
#if ENABLLE_BOOTLOADER
	SCB->VTOR = (uint32_t) BOOT_PRIMARY_ADDRESS;
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <main+0x20>)
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <main+0x24>)
 8002a24:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a26:	f3bf 8f4f 	dsb	sy
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("cpsie i" : : : "memory");
 8002a2c:	b662      	cpsie	i
}
 8002a2e:	46c0      	nop			; (mov r8, r8)
	__DSB();
	__enable_irq();
#endif
	setup();
 8002a30:	f000 f808 	bl	8002a44 <setup>
	while (1){
		printTest();
 8002a34:	f000 f83a 	bl	8002aac <printTest>
 8002a38:	e7fc      	b.n	8002a34 <main+0x18>
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	e000ed00 	.word	0xe000ed00
 8002a40:	08002800 	.word	0x08002800

08002a44 <setup>:
	}

}

static int setup(void) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
	systemInit();
 8002a48:	f000 f8de 	bl	8002c08 <systemInit>
	usart_x0_init(115200);
 8002a4c:	23e1      	movs	r3, #225	; 0xe1
 8002a4e:	025b      	lsls	r3, r3, #9
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 fad1 	bl	8002ff8 <usart_x0_init>
	xdev_out(usart_x0_sendChar);
 8002a56:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <setup+0x20>)
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <setup+0x24>)
 8002a5a:	601a      	str	r2, [r3, #0]
	return 0;
 8002a5c:	2300      	movs	r3, #0

}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000002c 	.word	0x2000002c
 8002a68:	0800302d 	.word	0x0800302d

08002a6c <SysTick_Handler>:

void SysTick_Handler(void) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	ulMiliCount++;
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <SysTick_Handler+0x34>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <SysTick_Handler+0x34>)
 8002a78:	601a      	str	r2, [r3, #0]
	ulTickCount++;
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <SysTick_Handler+0x38>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <SysTick_Handler+0x38>)
 8002a82:	601a      	str	r2, [r3, #0]
	if (ulTickCount >= 1000) {
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <SysTick_Handler+0x38>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	23fa      	movs	r3, #250	; 0xfa
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d304      	bcc.n	8002a9a <SysTick_Handler+0x2e>
		ulSecCount++;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <SysTick_Handler+0x3c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <SysTick_Handler+0x3c>)
 8002a98:	601a      	str	r2, [r3, #0]
	}
}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	2000001c 	.word	0x2000001c
 8002aa4:	20000024 	.word	0x20000024
 8002aa8:	20000020 	.word	0x20000020

08002aac <printTest>:
static void printTest(void) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	if ((uint32_t) (ulMiliCount - lastPrintTest) >= 1000) {
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <printTest+0x2c>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <printTest+0x30>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1ad2      	subs	r2, r2, r3
 8002aba:	23fa      	movs	r3, #250	; 0xfa
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d307      	bcc.n	8002ad2 <printTest+0x26>
		lastPrintTest = ulMiliCount;
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <printTest+0x2c>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <printTest+0x30>)
 8002ac8:	601a      	str	r2, [r3, #0]
		xprintf("hello, it test print, Thank!!!\r\n");
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <printTest+0x34>)
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 fc97 	bl	8003400 <xprintf>

	}
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	2000001c 	.word	0x2000001c
 8002adc:	20000028 	.word	0x20000028
 8002ae0:	080034dc 	.word	0x080034dc

08002ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	0002      	movs	r2, r0
 8002aec:	6039      	str	r1, [r7, #0]
 8002aee:	1dfb      	adds	r3, r7, #7
 8002af0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	1dfb      	adds	r3, r7, #7
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b7f      	cmp	r3, #127	; 0x7f
 8002af8:	d828      	bhi.n	8002b4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002afa:	4a2f      	ldr	r2, [pc, #188]	; (8002bb8 <__NVIC_SetPriority+0xd4>)
 8002afc:	1dfb      	adds	r3, r7, #7
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	089b      	lsrs	r3, r3, #2
 8002b04:	33c0      	adds	r3, #192	; 0xc0
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	589b      	ldr	r3, [r3, r2]
 8002b0a:	1dfa      	adds	r2, r7, #7
 8002b0c:	7812      	ldrb	r2, [r2, #0]
 8002b0e:	0011      	movs	r1, r2
 8002b10:	2203      	movs	r2, #3
 8002b12:	400a      	ands	r2, r1
 8002b14:	00d2      	lsls	r2, r2, #3
 8002b16:	21ff      	movs	r1, #255	; 0xff
 8002b18:	4091      	lsls	r1, r2
 8002b1a:	000a      	movs	r2, r1
 8002b1c:	43d2      	mvns	r2, r2
 8002b1e:	401a      	ands	r2, r3
 8002b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	019b      	lsls	r3, r3, #6
 8002b26:	22ff      	movs	r2, #255	; 0xff
 8002b28:	401a      	ands	r2, r3
 8002b2a:	1dfb      	adds	r3, r7, #7
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	2303      	movs	r3, #3
 8002b32:	4003      	ands	r3, r0
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b38:	481f      	ldr	r0, [pc, #124]	; (8002bb8 <__NVIC_SetPriority+0xd4>)
 8002b3a:	1dfb      	adds	r3, r7, #7
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b25b      	sxtb	r3, r3
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	430a      	orrs	r2, r1
 8002b44:	33c0      	adds	r3, #192	; 0xc0
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002b4a:	e031      	b.n	8002bb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <__NVIC_SetPriority+0xd8>)
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	0019      	movs	r1, r3
 8002b54:	230f      	movs	r3, #15
 8002b56:	400b      	ands	r3, r1
 8002b58:	3b08      	subs	r3, #8
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3306      	adds	r3, #6
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	18d3      	adds	r3, r2, r3
 8002b62:	3304      	adds	r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	1dfa      	adds	r2, r7, #7
 8002b68:	7812      	ldrb	r2, [r2, #0]
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	400a      	ands	r2, r1
 8002b70:	00d2      	lsls	r2, r2, #3
 8002b72:	21ff      	movs	r1, #255	; 0xff
 8002b74:	4091      	lsls	r1, r2
 8002b76:	000a      	movs	r2, r1
 8002b78:	43d2      	mvns	r2, r2
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	019b      	lsls	r3, r3, #6
 8002b82:	22ff      	movs	r2, #255	; 0xff
 8002b84:	401a      	ands	r2, r3
 8002b86:	1dfb      	adds	r3, r7, #7
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	4003      	ands	r3, r0
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b94:	4809      	ldr	r0, [pc, #36]	; (8002bbc <__NVIC_SetPriority+0xd8>)
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	001c      	movs	r4, r3
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	4023      	ands	r3, r4
 8002ba0:	3b08      	subs	r3, #8
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	3306      	adds	r3, #6
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	18c3      	adds	r3, r0, r3
 8002bac:	3304      	adds	r3, #4
 8002bae:	601a      	str	r2, [r3, #0]
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b003      	add	sp, #12
 8002bb6:	bd90      	pop	{r4, r7, pc}
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	1e5a      	subs	r2, r3, #1
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	045b      	lsls	r3, r3, #17
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d301      	bcc.n	8002bd8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e010      	b.n	8002bfa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <SysTick_Config+0x44>)
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	3a01      	subs	r2, #1
 8002bde:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be0:	2301      	movs	r3, #1
 8002be2:	425b      	negs	r3, r3
 8002be4:	2103      	movs	r1, #3
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff ff7c 	bl	8002ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SysTick_Config+0x44>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <SysTick_Config+0x44>)
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b002      	add	sp, #8
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	e000e010 	.word	0xe000e010

08002c08 <systemInit>:

static void SetSysClock(void);
static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
static void systickConfig(void);

void systemInit(void) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
	SetSysClock();
 8002c0c:	f000 f828 	bl	8002c60 <SetSysClock>
	systickConfig();
 8002c10:	f000 f818 	bl	8002c44 <systickConfig>
}
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <SysTick_CLKSourceConfig>:

static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d105      	bne.n	8002c36 <SysTick_CLKSourceConfig+0x1a>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <SysTick_CLKSourceConfig+0x24>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <SysTick_CLKSourceConfig+0x24>)
 8002c30:	2104      	movs	r1, #4
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]
	}
}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b002      	add	sp, #8
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	e000e010 	.word	0xe000e010

08002c44 <systickConfig>:

static void systickConfig(void) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 8002c48:	2004      	movs	r0, #4
 8002c4a:	f7ff ffe7 	bl	8002c1c <SysTick_CLKSourceConfig>
	SysTick_Config(systemClock / 1000);
 8002c4e:	23fa      	movs	r3, #250	; 0xfa
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	0018      	movs	r0, r3
 8002c54:	f7ff ffb4 	bl	8002bc0 <SysTick_Config>
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <SetSysClock>:

static void SetSysClock(void) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t) RCC_CR_HSEON);
 8002c64:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <SetSysClock+0xb4>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b2a      	ldr	r3, [pc, #168]	; (8002d14 <SetSysClock+0xb4>)
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	0249      	lsls	r1, r1, #9
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <SetSysClock+0xb4>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	029b      	lsls	r3, r3, #10
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d0f9      	beq.n	8002c74 <SetSysClock+0x14>
		;

	/* Enable Prefetch Buffer and set Flash Latency */
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2;
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <SetSysClock+0xb8>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <SetSysClock+0xb8>)
 8002c86:	2182      	movs	r1, #130	; 0x82
 8002c88:	0049      	lsls	r1, r1, #1
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// APB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_HPRE);
 8002c8e:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <SetSysClock+0xb4>)
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <SetSysClock+0xb4>)
 8002c94:	4921      	ldr	r1, [pc, #132]	; (8002d1c <SetSysClock+0xbc>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]
	// AHB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_PPRE);
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <SetSysClock+0xb4>)
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <SetSysClock+0xb4>)
 8002ca0:	491f      	ldr	r1, [pc, #124]	; (8002d20 <SetSysClock+0xc0>)
 8002ca2:	400a      	ands	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]

	//PLL INPUT CLOCK SOURCE HSE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <SetSysClock+0xb4>)
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <SetSysClock+0xb4>)
 8002cac:	2103      	movs	r1, #3
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	60da      	str	r2, [r3, #12]

	/* PLL configuration = HSE = 64 MHz */
	//PLLM = 1
	//PLLN = 16
	//PLLR = 2
	RCC->PLLCFGR &= (uint32_t) ((uint32_t) ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN
 8002cb2:	4b18      	ldr	r3, [pc, #96]	; (8002d14 <SetSysClock+0xb4>)
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <SetSysClock+0xb4>)
 8002cb8:	491a      	ldr	r1, [pc, #104]	; (8002d24 <SetSysClock+0xc4>)
 8002cba:	400a      	ands	r2, r1
 8002cbc:	60da      	str	r2, [r3, #12]
			| RCC_PLLCFGR_PLLR));

	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4)
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <SetSysClock+0xb4>)
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <SetSysClock+0xb4>)
 8002cc4:	4918      	ldr	r1, [pc, #96]	; (8002d28 <SetSysClock+0xc8>)
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	60da      	str	r2, [r3, #12]
			| (RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLREN) | (RCC_PLLCFGR_PLLQEN)
			| (RCC_PLLCFGR_PLLSRC_HSE);

	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <SetSysClock+0xb4>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <SetSysClock+0xb4>)
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	0449      	lsls	r1, r1, #17
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

	/* Wait till PLL is ready */
	while ((RCC->CR & RCC_CR_PLLRDY) == 0) {
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <SetSysClock+0xb4>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	049b      	lsls	r3, r3, #18
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d0f9      	beq.n	8002cda <SetSysClock+0x7a>
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (uint32_t) ((uint32_t) ~(RCC_CFGR_SW));
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <SetSysClock+0xb4>)
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <SetSysClock+0xb4>)
 8002cec:	2107      	movs	r1, #7
 8002cee:	438a      	bics	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= (uint32_t) RCC_CFGR_SW_1;
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <SetSysClock+0xb4>)
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <SetSysClock+0xb4>)
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1)
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <SetSysClock+0xb4>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2238      	movs	r2, #56	; 0x38
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	d1f9      	bne.n	8002d00 <SetSysClock+0xa0>
		;
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40022000 	.word	0x40022000
 8002d1c:	fffff0ff 	.word	0xfffff0ff
 8002d20:	ffff8fff 	.word	0xffff8fff
 8002d24:	1fff808f 	.word	0x1fff808f
 8002d28:	31001003 	.word	0x31001003

08002d2c <__NVIC_EnableIRQ>:
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	0002      	movs	r2, r0
 8002d34:	1dfb      	adds	r3, r7, #7
 8002d36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	1dfb      	adds	r3, r7, #7
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d3e:	d809      	bhi.n	8002d54 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d40:	1dfb      	adds	r3, r7, #7
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	001a      	movs	r2, r3
 8002d46:	231f      	movs	r3, #31
 8002d48:	401a      	ands	r2, r3
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <__NVIC_EnableIRQ+0x30>)
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	4091      	lsls	r1, r2
 8002d50:	000a      	movs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <__NVIC_SetPriority>:
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	0002      	movs	r2, r0
 8002d68:	6039      	str	r1, [r7, #0]
 8002d6a:	1dfb      	adds	r3, r7, #7
 8002d6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d6e:	1dfb      	adds	r3, r7, #7
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b7f      	cmp	r3, #127	; 0x7f
 8002d74:	d828      	bhi.n	8002dc8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d76:	4a2f      	ldr	r2, [pc, #188]	; (8002e34 <__NVIC_SetPriority+0xd4>)
 8002d78:	1dfb      	adds	r3, r7, #7
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b25b      	sxtb	r3, r3
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	33c0      	adds	r3, #192	; 0xc0
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	589b      	ldr	r3, [r3, r2]
 8002d86:	1dfa      	adds	r2, r7, #7
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	400a      	ands	r2, r1
 8002d90:	00d2      	lsls	r2, r2, #3
 8002d92:	21ff      	movs	r1, #255	; 0xff
 8002d94:	4091      	lsls	r1, r2
 8002d96:	000a      	movs	r2, r1
 8002d98:	43d2      	mvns	r2, r2
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	019b      	lsls	r3, r3, #6
 8002da2:	22ff      	movs	r2, #255	; 0xff
 8002da4:	401a      	ands	r2, r3
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	0018      	movs	r0, r3
 8002dac:	2303      	movs	r3, #3
 8002dae:	4003      	ands	r3, r0
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002db4:	481f      	ldr	r0, [pc, #124]	; (8002e34 <__NVIC_SetPriority+0xd4>)
 8002db6:	1dfb      	adds	r3, r7, #7
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b25b      	sxtb	r3, r3
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	33c0      	adds	r3, #192	; 0xc0
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	501a      	str	r2, [r3, r0]
}
 8002dc6:	e031      	b.n	8002e2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dc8:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <__NVIC_SetPriority+0xd8>)
 8002dca:	1dfb      	adds	r3, r7, #7
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	0019      	movs	r1, r3
 8002dd0:	230f      	movs	r3, #15
 8002dd2:	400b      	ands	r3, r1
 8002dd4:	3b08      	subs	r3, #8
 8002dd6:	089b      	lsrs	r3, r3, #2
 8002dd8:	3306      	adds	r3, #6
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	18d3      	adds	r3, r2, r3
 8002dde:	3304      	adds	r3, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	1dfa      	adds	r2, r7, #7
 8002de4:	7812      	ldrb	r2, [r2, #0]
 8002de6:	0011      	movs	r1, r2
 8002de8:	2203      	movs	r2, #3
 8002dea:	400a      	ands	r2, r1
 8002dec:	00d2      	lsls	r2, r2, #3
 8002dee:	21ff      	movs	r1, #255	; 0xff
 8002df0:	4091      	lsls	r1, r2
 8002df2:	000a      	movs	r2, r1
 8002df4:	43d2      	mvns	r2, r2
 8002df6:	401a      	ands	r2, r3
 8002df8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	019b      	lsls	r3, r3, #6
 8002dfe:	22ff      	movs	r2, #255	; 0xff
 8002e00:	401a      	ands	r2, r3
 8002e02:	1dfb      	adds	r3, r7, #7
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	0018      	movs	r0, r3
 8002e08:	2303      	movs	r3, #3
 8002e0a:	4003      	ands	r3, r0
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e10:	4809      	ldr	r0, [pc, #36]	; (8002e38 <__NVIC_SetPriority+0xd8>)
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	001c      	movs	r4, r3
 8002e18:	230f      	movs	r3, #15
 8002e1a:	4023      	ands	r3, r4
 8002e1c:	3b08      	subs	r3, #8
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	430a      	orrs	r2, r1
 8002e22:	3306      	adds	r3, #6
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	18c3      	adds	r3, r0, r3
 8002e28:	3304      	adds	r3, #4
 8002e2a:	601a      	str	r2, [r3, #0]
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b003      	add	sp, #12
 8002e32:	bd90      	pop	{r4, r7, pc}
 8002e34:	e000e100 	.word	0xe000e100
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <COMX0_pin_init>:
#define COMX0_RX_GPIO_PORT         			GPIOA				//Pin A10
#define COMX0_RX_GPIO_CLK          			RCC_IOPENR_GPIOAEN
#define COMX0_IRQn                 			USART1_IRQn
#define COMX0_IRQHandler		    		USART1_IRQn_IRQHandler

static void COMX0_pin_init(void) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
	RCC->IOPENR |= (COMX0_TX_GPIO_CLK | COMX0_TX_GPIO_CLK);
 8002e46:	4b42      	ldr	r3, [pc, #264]	; (8002f50 <COMX0_pin_init+0x114>)
 8002e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4a:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <COMX0_pin_init+0x114>)
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->COMX0_APB_CLK |= COMX0_CLK;
 8002e52:	4b3f      	ldr	r3, [pc, #252]	; (8002f50 <COMX0_pin_init+0x114>)
 8002e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e56:	4b3e      	ldr	r3, [pc, #248]	; (8002f50 <COMX0_pin_init+0x114>)
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	01c9      	lsls	r1, r1, #7
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40

	COMX0_RX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_RX_PIN * 2));
 8002e60:	23a0      	movs	r3, #160	; 0xa0
 8002e62:	05db      	lsls	r3, r3, #23
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	23a0      	movs	r3, #160	; 0xa0
 8002e68:	05db      	lsls	r3, r3, #23
 8002e6a:	493a      	ldr	r1, [pc, #232]	; (8002f54 <COMX0_pin_init+0x118>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->MODER |= (0x02 << (COMX0_RX_PIN * 2)); //mode AF
 8002e70:	23a0      	movs	r3, #160	; 0xa0
 8002e72:	05db      	lsls	r3, r3, #23
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	23a0      	movs	r3, #160	; 0xa0
 8002e78:	05db      	lsls	r3, r3, #23
 8002e7a:	2180      	movs	r1, #128	; 0x80
 8002e7c:	0389      	lsls	r1, r1, #14
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->ODR &= ~(0x01 << COMX0_RX_PIN); //push pull
 8002e82:	23a0      	movs	r3, #160	; 0xa0
 8002e84:	05db      	lsls	r3, r3, #23
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	23a0      	movs	r3, #160	; 0xa0
 8002e8a:	05db      	lsls	r3, r3, #23
 8002e8c:	4932      	ldr	r1, [pc, #200]	; (8002f58 <COMX0_pin_init+0x11c>)
 8002e8e:	400a      	ands	r2, r1
 8002e90:	615a      	str	r2, [r3, #20]
	COMX0_RX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_RX_PIN * 2)); //no pull
 8002e92:	23a0      	movs	r3, #160	; 0xa0
 8002e94:	05db      	lsls	r3, r3, #23
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	23a0      	movs	r3, #160	; 0xa0
 8002e9a:	05db      	lsls	r3, r3, #23
 8002e9c:	492d      	ldr	r1, [pc, #180]	; (8002f54 <COMX0_pin_init+0x118>)
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	60da      	str	r2, [r3, #12]
	COMX0_RX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_RX_PIN); ////speed low
 8002ea2:	23a0      	movs	r3, #160	; 0xa0
 8002ea4:	05db      	lsls	r3, r3, #23
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	23a0      	movs	r3, #160	; 0xa0
 8002eaa:	05db      	lsls	r3, r3, #23
 8002eac:	492a      	ldr	r1, [pc, #168]	; (8002f58 <COMX0_pin_init+0x11c>)
 8002eae:	400a      	ands	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]

	COMX0_TX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_TX_PIN * 2));
 8002eb2:	23a0      	movs	r3, #160	; 0xa0
 8002eb4:	05db      	lsls	r3, r3, #23
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	23a0      	movs	r3, #160	; 0xa0
 8002eba:	05db      	lsls	r3, r3, #23
 8002ebc:	4927      	ldr	r1, [pc, #156]	; (8002f5c <COMX0_pin_init+0x120>)
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->MODER |= (0x02 << (COMX0_TX_PIN * 2)); //mode AF
 8002ec2:	23a0      	movs	r3, #160	; 0xa0
 8002ec4:	05db      	lsls	r3, r3, #23
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	23a0      	movs	r3, #160	; 0xa0
 8002eca:	05db      	lsls	r3, r3, #23
 8002ecc:	2180      	movs	r1, #128	; 0x80
 8002ece:	0309      	lsls	r1, r1, #12
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->ODR &= ~(0x01 << COMX0_TX_PIN); //push pull
 8002ed4:	23a0      	movs	r3, #160	; 0xa0
 8002ed6:	05db      	lsls	r3, r3, #23
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	23a0      	movs	r3, #160	; 0xa0
 8002edc:	05db      	lsls	r3, r3, #23
 8002ede:	4920      	ldr	r1, [pc, #128]	; (8002f60 <COMX0_pin_init+0x124>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	615a      	str	r2, [r3, #20]
	COMX0_TX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_TX_PIN * 2)); //no pull
 8002ee4:	23a0      	movs	r3, #160	; 0xa0
 8002ee6:	05db      	lsls	r3, r3, #23
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	23a0      	movs	r3, #160	; 0xa0
 8002eec:	05db      	lsls	r3, r3, #23
 8002eee:	491b      	ldr	r1, [pc, #108]	; (8002f5c <COMX0_pin_init+0x120>)
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]
	COMX0_TX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_TX_PIN); ////speed low
 8002ef4:	23a0      	movs	r3, #160	; 0xa0
 8002ef6:	05db      	lsls	r3, r3, #23
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	23a0      	movs	r3, #160	; 0xa0
 8002efc:	05db      	lsls	r3, r3, #23
 8002efe:	4918      	ldr	r1, [pc, #96]	; (8002f60 <COMX0_pin_init+0x124>)
 8002f00:	400a      	ands	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]

	temp = COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3u];
 8002f04:	23a0      	movs	r3, #160	; 0xa0
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_RX_PIN & 0x07u) * 4ul));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <COMX0_pin_init+0x128>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_RX_PIN_AF << ((COMX0_RX_PIN & 0x07u) * 4ul));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2280      	movs	r2, #128	; 0x80
 8002f18:	0052      	lsls	r2, r2, #1
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	607b      	str	r3, [r7, #4]
	COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3ul] = temp;
 8002f1e:	23a0      	movs	r3, #160	; 0xa0
 8002f20:	05db      	lsls	r3, r3, #23
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24

	temp = COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3u];
 8002f26:	23a0      	movs	r3, #160	; 0xa0
 8002f28:	05db      	lsls	r3, r3, #23
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_TX_PIN & 0x07u) * 4ul));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	22f0      	movs	r2, #240	; 0xf0
 8002f32:	4393      	bics	r3, r2
 8002f34:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_TX_PIN_AF << ((COMX0_TX_PIN & 0x07u) * 4ul));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	607b      	str	r3, [r7, #4]
	COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3ul] = temp;
 8002f3e:	23a0      	movs	r3, #160	; 0xa0
 8002f40:	05db      	lsls	r3, r3, #23
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b002      	add	sp, #8
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	40021000 	.word	0x40021000
 8002f54:	ffcfffff 	.word	0xffcfffff
 8002f58:	fffffbff 	.word	0xfffffbff
 8002f5c:	fff3ffff 	.word	0xfff3ffff
 8002f60:	fffffdff 	.word	0xfffffdff
 8002f64:	fffff0ff 	.word	0xfffff0ff

08002f68 <uartx_init>:

static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
	uint32_t BRR_value = SYS_CLOCK / baudrate;
 8002f72:	6839      	ldr	r1, [r7, #0]
 8002f74:	481c      	ldr	r0, [pc, #112]	; (8002fe8 <uartx_init+0x80>)
 8002f76:	f7ff fcc5 	bl	8002904 <__udivsi3>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	60fb      	str	r3, [r7, #12]

	UARTx->CR1 = 0;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
	// Word length 8n1
	UARTx->CR1 &= ~USART_CR1_M1;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a18      	ldr	r2, [pc, #96]	; (8002fec <uartx_init+0x84>)
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	601a      	str	r2, [r3, #0]
	//Parity disable
	UARTx->CR1 &= ~USART_CR1_PCE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <uartx_init+0x88>)
 8002f96:	401a      	ands	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	601a      	str	r2, [r3, #0]
	//mode Tx_Rx
	UARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	220c      	movs	r2, #12
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	601a      	str	r2, [r3, #0]
	//OverSampling 16bit
	UARTx->CR1 &= ~USART_CR1_OVER8;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a11      	ldr	r2, [pc, #68]	; (8002ff4 <uartx_init+0x8c>)
 8002fae:	401a      	ands	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	601a      	str	r2, [r3, #0]
	//ClockPrescaler no div
	UARTx->PRESC &= USART_PRESC_PRESCALER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	220f      	movs	r2, #15
 8002fba:	401a      	ands	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c
	//set baudrate 115200
	UARTx->BRR = BRR_value;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	60da      	str	r2, [r3, #12]
	//rx interupt enable
	UARTx->CR1 |= USART_CR1_RXNEIE_RXFNEIE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	601a      	str	r2, [r3, #0]
	UARTx->CR1 |= USART_CR1_UE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	601a      	str	r2, [r3, #0]
}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b004      	add	sp, #16
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	03d09000 	.word	0x03d09000
 8002fec:	efffffff 	.word	0xefffffff
 8002ff0:	fffffbff 	.word	0xfffffbff
 8002ff4:	ffff7fff 	.word	0xffff7fff

08002ff8 <usart_x0_init>:

void usart_x0_init(uint32_t baud) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	COMX0_pin_init();
 8003000:	f7ff ff1c 	bl	8002e3c <COMX0_pin_init>
	uartx_init(COMX0,baud);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a08      	ldr	r2, [pc, #32]	; (8003028 <usart_x0_init+0x30>)
 8003008:	0019      	movs	r1, r3
 800300a:	0010      	movs	r0, r2
 800300c:	f7ff ffac 	bl	8002f68 <uartx_init>
	NVIC_SetPriority(COMX0_IRQn, 0);
 8003010:	2100      	movs	r1, #0
 8003012:	201b      	movs	r0, #27
 8003014:	f7ff fea4 	bl	8002d60 <__NVIC_SetPriority>
	NVIC_EnableIRQ(COMX0_IRQn);
 8003018:	201b      	movs	r0, #27
 800301a:	f7ff fe87 	bl	8002d2c <__NVIC_EnableIRQ>
}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	b002      	add	sp, #8
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	40013800 	.word	0x40013800

0800302c <usart_x0_sendChar>:

void usart_x0_sendChar(uint8_t c) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	0002      	movs	r2, r0
 8003034:	1dfb      	adds	r3, r7, #7
 8003036:	701a      	strb	r2, [r3, #0]
	while ((COMX0->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <usart_x0_sendChar+0x2c>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	4013      	ands	r3, r2
 8003042:	2b80      	cmp	r3, #128	; 0x80
 8003044:	d1f9      	bne.n	800303a <usart_x0_sendChar+0xe>
	COMX0->TDR = c;
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <usart_x0_sendChar+0x2c>)
 8003048:	1dfa      	adds	r2, r7, #7
 800304a:	7812      	ldrb	r2, [r2, #0]
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b002      	add	sp, #8
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	40013800 	.word	0x40013800

0800305c <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0

	uint8_t cChar;
	if (USART1->ISR & USART_ISR_RXNE_RXFNE) {
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <USART1_IRQHandler+0x2c>)
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	2220      	movs	r2, #32
 8003068:	4013      	ands	r3, r2
 800306a:	d009      	beq.n	8003080 <USART1_IRQHandler+0x24>
		cChar = USART1->RDR;
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <USART1_IRQHandler+0x2c>)
 800306e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	701a      	strb	r2, [r3, #0]
		USART1->ICR |= USART_RQR_RXFRQ;
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <USART1_IRQHandler+0x2c>)
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <USART1_IRQHandler+0x2c>)
 800307a:	2108      	movs	r1, #8
 800307c:	430a      	orrs	r2, r1
 800307e:	621a      	str	r2, [r3, #32]
	}
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40013800 	.word	0x40013800

0800308c <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	0002      	movs	r2, r0
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	701a      	strb	r2, [r3, #0]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <xputc+0x40>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <xputc+0x26>
		*outptr++ = (unsigned char)c;
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <xputc+0x40>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	1c59      	adds	r1, r3, #1
 80030a6:	4a09      	ldr	r2, [pc, #36]	; (80030cc <xputc+0x40>)
 80030a8:	6011      	str	r1, [r2, #0]
 80030aa:	1dfa      	adds	r2, r7, #7
 80030ac:	7812      	ldrb	r2, [r2, #0]
 80030ae:	701a      	strb	r2, [r3, #0]
		return;
 80030b0:	e009      	b.n	80030c6 <xputc+0x3a>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <xputc+0x44>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <xputc+0x3a>
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <xputc+0x44>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	1dfa      	adds	r2, r7, #7
 80030c0:	7812      	ldrb	r2, [r2, #0]
 80030c2:	0010      	movs	r0, r2
 80030c4:	4798      	blx	r3
}
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000030 	.word	0x20000030
 80030d0:	2000002c 	.word	0x2000002c

080030d4 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	while (*str)
 80030dc:	e006      	b.n	80030ec <xputs+0x18>
		xputc(*str++);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7ff ffd0 	bl	800308c <xputc>
	while (*str)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f4      	bne.n	80030de <xputs+0xa>
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b002      	add	sp, #8
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b08f      	sub	sp, #60	; 0x3c
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	211f      	movs	r1, #31
 8003112:	187a      	adds	r2, r7, r1
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	7013      	strb	r3, [r2, #0]
		if (!c) break;				/* End of format? */
 8003118:	000a      	movs	r2, r1
 800311a:	18bb      	adds	r3, r7, r2
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d100      	bne.n	8003124 <xvprintf+0x24>
 8003122:	e164      	b.n	80033ee <xvprintf+0x2ee>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8003124:	18bb      	adds	r3, r7, r2
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b25      	cmp	r3, #37	; 0x25
 800312a:	d005      	beq.n	8003138 <xvprintf+0x38>
			xputc(c); continue;
 800312c:	18bb      	adds	r3, r7, r2
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	0018      	movs	r0, r3
 8003132:	f7ff ffab 	bl	800308c <xputc>
 8003136:	e159      	b.n	80033ec <xvprintf+0x2ec>
		}
		f = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	211f      	movs	r1, #31
 8003144:	187a      	adds	r2, r7, r1
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padded */
 800314a:	187b      	adds	r3, r7, r1
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b30      	cmp	r3, #48	; 0x30
 8003150:	d108      	bne.n	8003164 <xvprintf+0x64>
			f = 1; c = *fmt++;
 8003152:	2301      	movs	r3, #1
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	187a      	adds	r2, r7, r1
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	7013      	strb	r3, [r2, #0]
 8003162:	e00c      	b.n	800317e <xvprintf+0x7e>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8003164:	211f      	movs	r1, #31
 8003166:	187b      	adds	r3, r7, r1
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b2d      	cmp	r3, #45	; 0x2d
 800316c:	d107      	bne.n	800317e <xvprintf+0x7e>
				f = 2; c = *fmt++;
 800316e:	2302      	movs	r3, #2
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	187a      	adds	r2, r7, r1
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	7013      	strb	r3, [r2, #0]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800317e:	2300      	movs	r3, #0
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28
 8003182:	e011      	b.n	80031a8 <xvprintf+0xa8>
			w = w * 10 + c - '0';
 8003184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003186:	0013      	movs	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	189b      	adds	r3, r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	001a      	movs	r2, r3
 8003190:	211f      	movs	r1, #31
 8003192:	187b      	adds	r3, r7, r1
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	18d3      	adds	r3, r2, r3
 8003198:	3b30      	subs	r3, #48	; 0x30
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	187a      	adds	r2, r7, r1
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	7013      	strb	r3, [r2, #0]
 80031a8:	221f      	movs	r2, #31
 80031aa:	18bb      	adds	r3, r7, r2
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b2f      	cmp	r3, #47	; 0x2f
 80031b0:	d903      	bls.n	80031ba <xvprintf+0xba>
 80031b2:	18bb      	adds	r3, r7, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b39      	cmp	r3, #57	; 0x39
 80031b8:	d9e4      	bls.n	8003184 <xvprintf+0x84>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80031ba:	221f      	movs	r2, #31
 80031bc:	18bb      	adds	r3, r7, r2
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b6c      	cmp	r3, #108	; 0x6c
 80031c2:	d003      	beq.n	80031cc <xvprintf+0xcc>
 80031c4:	18bb      	adds	r3, r7, r2
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b4c      	cmp	r3, #76	; 0x4c
 80031ca:	d10a      	bne.n	80031e2 <xvprintf+0xe2>
			f |= 4; c = *fmt++;
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	2204      	movs	r2, #4
 80031d0:	4313      	orrs	r3, r2
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	221f      	movs	r2, #31
 80031dc:	18ba      	adds	r2, r7, r2
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;				/* End of format? */
 80031e2:	221f      	movs	r2, #31
 80031e4:	18bb      	adds	r3, r7, r2
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d100      	bne.n	80031ee <xvprintf+0xee>
 80031ec:	e101      	b.n	80033f2 <xvprintf+0x2f2>
		d = c;
 80031ee:	211e      	movs	r1, #30
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	18ba      	adds	r2, r7, r2
 80031f4:	7812      	ldrb	r2, [r2, #0]
 80031f6:	701a      	strb	r2, [r3, #0]
		if (d >= 'a') d -= 0x20;
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b60      	cmp	r3, #96	; 0x60
 80031fe:	d904      	bls.n	800320a <xvprintf+0x10a>
 8003200:	187b      	adds	r3, r7, r1
 8003202:	187a      	adds	r2, r7, r1
 8003204:	7812      	ldrb	r2, [r2, #0]
 8003206:	3a20      	subs	r2, #32
 8003208:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 800320a:	231e      	movs	r3, #30
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	3b42      	subs	r3, #66	; 0x42
 8003212:	2b16      	cmp	r3, #22
 8003214:	d847      	bhi.n	80032a6 <xvprintf+0x1a6>
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	4b78      	ldr	r3, [pc, #480]	; (80033fc <xvprintf+0x2fc>)
 800321a:	18d3      	adds	r3, r2, r3
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	1d1a      	adds	r2, r3, #4
 8003224:	603a      	str	r2, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 800322a:	2300      	movs	r3, #0
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800322e:	e002      	b.n	8003236 <xvprintf+0x136>
 8003230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003232:	3301      	adds	r3, #1
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	18d3      	adds	r3, r2, r3
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f6      	bne.n	8003230 <xvprintf+0x130>
			while (!(f & 2) && j++ < w) xputc(' ');
 8003242:	e002      	b.n	800324a <xvprintf+0x14a>
 8003244:	2020      	movs	r0, #32
 8003246:	f7ff ff21 	bl	800308c <xputc>
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	2202      	movs	r2, #2
 800324e:	4013      	ands	r3, r2
 8003250:	d105      	bne.n	800325e <xvprintf+0x15e>
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800325a:	429a      	cmp	r2, r3
 800325c:	d8f2      	bhi.n	8003244 <xvprintf+0x144>
			xputs(p);
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	0018      	movs	r0, r3
 8003262:	f7ff ff37 	bl	80030d4 <xputs>
			while (j++ < w) xputc(' ');
 8003266:	e002      	b.n	800326e <xvprintf+0x16e>
 8003268:	2020      	movs	r0, #32
 800326a:	f7ff ff0f 	bl	800308c <xputc>
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003276:	429a      	cmp	r2, r3
 8003278:	d8f6      	bhi.n	8003268 <xvprintf+0x168>
			continue;
 800327a:	e0b7      	b.n	80033ec <xvprintf+0x2ec>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	1d1a      	adds	r2, r3, #4
 8003280:	603a      	str	r2, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	0018      	movs	r0, r3
 8003288:	f7ff ff00 	bl	800308c <xputc>
 800328c:	e0ae      	b.n	80033ec <xvprintf+0x2ec>
		case 'B' :					/* Binary */
			r = 2; break;
 800328e:	2302      	movs	r3, #2
 8003290:	637b      	str	r3, [r7, #52]	; 0x34
 8003292:	e00f      	b.n	80032b4 <xvprintf+0x1b4>
		case 'O' :					/* Octal */
			r = 8; break;
 8003294:	2308      	movs	r3, #8
 8003296:	637b      	str	r3, [r7, #52]	; 0x34
 8003298:	e00c      	b.n	80032b4 <xvprintf+0x1b4>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800329a:	230a      	movs	r3, #10
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
 800329e:	e009      	b.n	80032b4 <xvprintf+0x1b4>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80032a0:	2310      	movs	r3, #16
 80032a2:	637b      	str	r3, [r7, #52]	; 0x34
 80032a4:	e006      	b.n	80032b4 <xvprintf+0x1b4>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 80032a6:	231f      	movs	r3, #31
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7ff feed 	bl	800308c <xputc>
 80032b2:	e09b      	b.n	80033ec <xvprintf+0x2ec>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	2204      	movs	r2, #4
 80032b8:	4013      	ands	r3, r2
 80032ba:	d004      	beq.n	80032c6 <xvprintf+0x1c6>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	1d1a      	adds	r2, r3, #4
 80032c0:	603a      	str	r2, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	e00d      	b.n	80032e2 <xvprintf+0x1e2>
 80032c6:	231e      	movs	r3, #30
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b44      	cmp	r3, #68	; 0x44
 80032ce:	d104      	bne.n	80032da <xvprintf+0x1da>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	1d1a      	adds	r2, r3, #4
 80032d4:	603a      	str	r2, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	e003      	b.n	80032e2 <xvprintf+0x1e2>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	1d1a      	adds	r2, r3, #4
 80032de:	603a      	str	r2, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 80032e4:	231e      	movs	r3, #30
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b44      	cmp	r3, #68	; 0x44
 80032ec:	d109      	bne.n	8003302 <xvprintf+0x202>
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	da06      	bge.n	8003302 <xvprintf+0x202>
			v = 0 - v;
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	425b      	negs	r3, r3
 80032f8:	623b      	str	r3, [r7, #32]
			f |= 8;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	2208      	movs	r2, #8
 80032fe:	4313      	orrs	r3, r2
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800330a:	0018      	movs	r0, r3
 800330c:	f7ff fb80 	bl	8002a10 <__aeabi_uidivmod>
 8003310:	000b      	movs	r3, r1
 8003312:	001a      	movs	r2, r3
 8003314:	241e      	movs	r4, #30
 8003316:	193b      	adds	r3, r7, r4
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800331c:	6a38      	ldr	r0, [r7, #32]
 800331e:	f7ff faf1 	bl	8002904 <__udivsi3>
 8003322:	0003      	movs	r3, r0
 8003324:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8003326:	193b      	adds	r3, r7, r4
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b09      	cmp	r3, #9
 800332c:	d90d      	bls.n	800334a <xvprintf+0x24a>
 800332e:	231f      	movs	r3, #31
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b78      	cmp	r3, #120	; 0x78
 8003336:	d101      	bne.n	800333c <xvprintf+0x23c>
 8003338:	2327      	movs	r3, #39	; 0x27
 800333a:	e000      	b.n	800333e <xvprintf+0x23e>
 800333c:	2307      	movs	r3, #7
 800333e:	211e      	movs	r1, #30
 8003340:	187a      	adds	r2, r7, r1
 8003342:	1879      	adds	r1, r7, r1
 8003344:	7809      	ldrb	r1, [r1, #0]
 8003346:	185b      	adds	r3, r3, r1
 8003348:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	633a      	str	r2, [r7, #48]	; 0x30
 8003350:	221e      	movs	r2, #30
 8003352:	18ba      	adds	r2, r7, r2
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	3230      	adds	r2, #48	; 0x30
 8003358:	b2d1      	uxtb	r1, r2
 800335a:	2208      	movs	r2, #8
 800335c:	18ba      	adds	r2, r7, r2
 800335e:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof(s));
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <xvprintf+0x26c>
 8003366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003368:	2b0f      	cmp	r3, #15
 800336a:	d9cc      	bls.n	8003306 <xvprintf+0x206>
		if (f & 8) s[i++] = '-';
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	2208      	movs	r2, #8
 8003370:	4013      	ands	r3, r2
 8003372:	d006      	beq.n	8003382 <xvprintf+0x282>
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	633a      	str	r2, [r7, #48]	; 0x30
 800337a:	2208      	movs	r2, #8
 800337c:	18ba      	adds	r2, r7, r2
 800337e:	212d      	movs	r1, #45	; 0x2d
 8003380:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	2201      	movs	r2, #1
 800338a:	4013      	ands	r3, r2
 800338c:	d001      	beq.n	8003392 <xvprintf+0x292>
 800338e:	2230      	movs	r2, #48	; 0x30
 8003390:	e000      	b.n	8003394 <xvprintf+0x294>
 8003392:	2220      	movs	r2, #32
 8003394:	231e      	movs	r3, #30
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) xputc(d);
 800339a:	e005      	b.n	80033a8 <xvprintf+0x2a8>
 800339c:	231e      	movs	r3, #30
 800339e:	18fb      	adds	r3, r7, r3
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7ff fe72 	bl	800308c <xputc>
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	2202      	movs	r2, #2
 80033ac:	4013      	ands	r3, r2
 80033ae:	d105      	bne.n	80033bc <xvprintf+0x2bc>
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d8ef      	bhi.n	800339c <xvprintf+0x29c>
		do xputc(s[--i]); while(i);
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	3b01      	subs	r3, #1
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
 80033c2:	2308      	movs	r3, #8
 80033c4:	18fa      	adds	r2, r7, r3
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	18d3      	adds	r3, r2, r3
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7ff fe5d 	bl	800308c <xputc>
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f1      	bne.n	80033bc <xvprintf+0x2bc>
		while (j++ < w) xputc(' ');
 80033d8:	e002      	b.n	80033e0 <xvprintf+0x2e0>
 80033da:	2020      	movs	r0, #32
 80033dc:	f7ff fe56 	bl	800308c <xputc>
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d8f6      	bhi.n	80033da <xvprintf+0x2da>
		c = *fmt++;					/* Get a char */
 80033ec:	e68d      	b.n	800310a <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	e000      	b.n	80033f4 <xvprintf+0x2f4>
		if (!c) break;				/* End of format? */
 80033f2:	46c0      	nop			; (mov r8, r8)
	}
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b00f      	add	sp, #60	; 0x3c
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	08003500 	.word	0x08003500

08003400 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8003400:	b40f      	push	{r0, r1, r2, r3}
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8003408:	2314      	movs	r3, #20
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	0011      	movs	r1, r2
 8003414:	0018      	movs	r0, r3
 8003416:	f7ff fe73 	bl	8003100 <xvprintf>
	va_end(arp);
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b002      	add	sp, #8
 8003420:	bc80      	pop	{r7}
 8003422:	bc08      	pop	{r3}
 8003424:	b004      	add	sp, #16
 8003426:	4718      	bx	r3

08003428 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003428:	480d      	ldr	r0, [pc, #52]	; (8003460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800342a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800342c:	e000      	b.n	8003430 <Reset_Handler+0x8>
 800342e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003430:	480c      	ldr	r0, [pc, #48]	; (8003464 <LoopForever+0x6>)
  ldr r1, =_edata
 8003432:	490d      	ldr	r1, [pc, #52]	; (8003468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003434:	4a0d      	ldr	r2, [pc, #52]	; (800346c <LoopForever+0xe>)
  movs r3, #0
 8003436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003438:	e002      	b.n	8003440 <LoopCopyDataInit>

0800343a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800343a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800343c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800343e:	3304      	adds	r3, #4

08003440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003444:	d3f9      	bcc.n	800343a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003448:	4c0a      	ldr	r4, [pc, #40]	; (8003474 <LoopForever+0x16>)
  movs r3, #0
 800344a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800344c:	e001      	b.n	8003452 <LoopFillZerobss>

0800344e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800344e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003450:	3204      	adds	r2, #4

08003452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003454:	d3fb      	bcc.n	800344e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003456:	f000 f811 	bl	800347c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800345a:	f7ff fadf 	bl	8002a1c <main>

0800345e <LoopForever>:

LoopForever:
    b LoopForever
 800345e:	e7fe      	b.n	800345e <LoopForever>
  ldr   r0, =_estack
 8003460:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003468:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800346c:	08003564 	.word	0x08003564
  ldr r2, =_sbss
 8003470:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8003474:	20000034 	.word	0x20000034

08003478 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003478:	e7fe      	b.n	8003478 <ADC_COMP_IRQHandler>
	...

0800347c <__libc_init_array>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	2600      	movs	r6, #0
 8003480:	4d0c      	ldr	r5, [pc, #48]	; (80034b4 <__libc_init_array+0x38>)
 8003482:	4c0d      	ldr	r4, [pc, #52]	; (80034b8 <__libc_init_array+0x3c>)
 8003484:	1b64      	subs	r4, r4, r5
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	42a6      	cmp	r6, r4
 800348a:	d109      	bne.n	80034a0 <__libc_init_array+0x24>
 800348c:	2600      	movs	r6, #0
 800348e:	f000 f819 	bl	80034c4 <_init>
 8003492:	4d0a      	ldr	r5, [pc, #40]	; (80034bc <__libc_init_array+0x40>)
 8003494:	4c0a      	ldr	r4, [pc, #40]	; (80034c0 <__libc_init_array+0x44>)
 8003496:	1b64      	subs	r4, r4, r5
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	42a6      	cmp	r6, r4
 800349c:	d105      	bne.n	80034aa <__libc_init_array+0x2e>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	00b3      	lsls	r3, r6, #2
 80034a2:	58eb      	ldr	r3, [r5, r3]
 80034a4:	4798      	blx	r3
 80034a6:	3601      	adds	r6, #1
 80034a8:	e7ee      	b.n	8003488 <__libc_init_array+0xc>
 80034aa:	00b3      	lsls	r3, r6, #2
 80034ac:	58eb      	ldr	r3, [r5, r3]
 80034ae:	4798      	blx	r3
 80034b0:	3601      	adds	r6, #1
 80034b2:	e7f2      	b.n	800349a <__libc_init_array+0x1e>
 80034b4:	0800355c 	.word	0x0800355c
 80034b8:	0800355c 	.word	0x0800355c
 80034bc:	0800355c 	.word	0x0800355c
 80034c0:	08003560 	.word	0x08003560

080034c4 <_init>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr

080034d0 <_fini>:
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d6:	bc08      	pop	{r3}
 80034d8:	469e      	mov	lr, r3
 80034da:	4770      	bx	lr
