
g031_oilSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c08  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08000cc4  08000cc4  00010cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d44  08000d44  00010d4c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d44  08000d44  00010d4c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d44  08000d4c  00010d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d44  08000d44  00010d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d48  08000d48  00010d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000000  08000d4c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000d4c  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010d4c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001449  00000000  00000000  00010d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006b0  00000000  00000000  000121bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00012870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000110  00000000  00000000  000129c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000072c  00000000  00000000  00012ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001aae  00000000  00000000  00013204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00049477  00000000  00000000  00014cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0005e129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003ac  00000000  00000000  0005e17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000cac 	.word	0x08000cac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000cac 	.word	0x08000cac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
uint32_t static lastPrintTest = 0;

static int setup(void);
static void printTest(void);

int main(void) {
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	setup();
 8000220:	f000 f804 	bl	800022c <setup>
	while (1){
		printTest();
 8000224:	f000 f836 	bl	8000294 <printTest>
 8000228:	e7fc      	b.n	8000224 <main+0x8>
	...

0800022c <setup>:
	}

}

static int setup(void) {
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	systemInit();
 8000230:	f000 f8de 	bl	80003f0 <systemInit>
	usart_x0_init(115200);
 8000234:	23e1      	movs	r3, #225	; 0xe1
 8000236:	025b      	lsls	r3, r3, #9
 8000238:	0018      	movs	r0, r3
 800023a:	f000 fad1 	bl	80007e0 <usart_x0_init>
	xdev_out(usart_x0_sendChar);
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <setup+0x20>)
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <setup+0x24>)
 8000242:	601a      	str	r2, [r3, #0]
	return 0;
 8000244:	2300      	movs	r3, #0

}
 8000246:	0018      	movs	r0, r3
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000002c 	.word	0x2000002c
 8000250:	08000815 	.word	0x08000815

08000254 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	ulMiliCount++;
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <SysTick_Handler+0x34>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	1c5a      	adds	r2, r3, #1
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <SysTick_Handler+0x34>)
 8000260:	601a      	str	r2, [r3, #0]
	ulTickCount++;
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <SysTick_Handler+0x38>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	1c5a      	adds	r2, r3, #1
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <SysTick_Handler+0x38>)
 800026a:	601a      	str	r2, [r3, #0]
	if (ulTickCount >= 1000) {
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <SysTick_Handler+0x38>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	23fa      	movs	r3, #250	; 0xfa
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	429a      	cmp	r2, r3
 8000276:	d304      	bcc.n	8000282 <SysTick_Handler+0x2e>
		ulSecCount++;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <SysTick_Handler+0x3c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1c5a      	adds	r2, r3, #1
 800027e:	4b04      	ldr	r3, [pc, #16]	; (8000290 <SysTick_Handler+0x3c>)
 8000280:	601a      	str	r2, [r3, #0]
	}
}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	2000001c 	.word	0x2000001c
 800028c:	20000024 	.word	0x20000024
 8000290:	20000020 	.word	0x20000020

08000294 <printTest>:
static void printTest(void) {
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	if ((uint32_t) (ulMiliCount - lastPrintTest) >= 1000) {
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <printTest+0x2c>)
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <printTest+0x30>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	1ad2      	subs	r2, r2, r3
 80002a2:	23fa      	movs	r3, #250	; 0xfa
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d307      	bcc.n	80002ba <printTest+0x26>
		lastPrintTest = ulMiliCount;
 80002aa:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <printTest+0x2c>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <printTest+0x30>)
 80002b0:	601a      	str	r2, [r3, #0]
		xprintf("hello, it test print, Thank!!!\r\n");
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <printTest+0x34>)
 80002b4:	0018      	movs	r0, r3
 80002b6:	f000 fc97 	bl	8000be8 <xprintf>

	}
}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	2000001c 	.word	0x2000001c
 80002c4:	20000028 	.word	0x20000028
 80002c8:	08000cc4 	.word	0x08000cc4

080002cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	0002      	movs	r2, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b7f      	cmp	r3, #127	; 0x7f
 80002e0:	d828      	bhi.n	8000334 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e2:	4a2f      	ldr	r2, [pc, #188]	; (80003a0 <__NVIC_SetPriority+0xd4>)
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	b25b      	sxtb	r3, r3
 80002ea:	089b      	lsrs	r3, r3, #2
 80002ec:	33c0      	adds	r3, #192	; 0xc0
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	589b      	ldr	r3, [r3, r2]
 80002f2:	1dfa      	adds	r2, r7, #7
 80002f4:	7812      	ldrb	r2, [r2, #0]
 80002f6:	0011      	movs	r1, r2
 80002f8:	2203      	movs	r2, #3
 80002fa:	400a      	ands	r2, r1
 80002fc:	00d2      	lsls	r2, r2, #3
 80002fe:	21ff      	movs	r1, #255	; 0xff
 8000300:	4091      	lsls	r1, r2
 8000302:	000a      	movs	r2, r1
 8000304:	43d2      	mvns	r2, r2
 8000306:	401a      	ands	r2, r3
 8000308:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	019b      	lsls	r3, r3, #6
 800030e:	22ff      	movs	r2, #255	; 0xff
 8000310:	401a      	ands	r2, r3
 8000312:	1dfb      	adds	r3, r7, #7
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	0018      	movs	r0, r3
 8000318:	2303      	movs	r3, #3
 800031a:	4003      	ands	r3, r0
 800031c:	00db      	lsls	r3, r3, #3
 800031e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000320:	481f      	ldr	r0, [pc, #124]	; (80003a0 <__NVIC_SetPriority+0xd4>)
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b25b      	sxtb	r3, r3
 8000328:	089b      	lsrs	r3, r3, #2
 800032a:	430a      	orrs	r2, r1
 800032c:	33c0      	adds	r3, #192	; 0xc0
 800032e:	009b      	lsls	r3, r3, #2
 8000330:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000332:	e031      	b.n	8000398 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000334:	4a1b      	ldr	r2, [pc, #108]	; (80003a4 <__NVIC_SetPriority+0xd8>)
 8000336:	1dfb      	adds	r3, r7, #7
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	0019      	movs	r1, r3
 800033c:	230f      	movs	r3, #15
 800033e:	400b      	ands	r3, r1
 8000340:	3b08      	subs	r3, #8
 8000342:	089b      	lsrs	r3, r3, #2
 8000344:	3306      	adds	r3, #6
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	18d3      	adds	r3, r2, r3
 800034a:	3304      	adds	r3, #4
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	1dfa      	adds	r2, r7, #7
 8000350:	7812      	ldrb	r2, [r2, #0]
 8000352:	0011      	movs	r1, r2
 8000354:	2203      	movs	r2, #3
 8000356:	400a      	ands	r2, r1
 8000358:	00d2      	lsls	r2, r2, #3
 800035a:	21ff      	movs	r1, #255	; 0xff
 800035c:	4091      	lsls	r1, r2
 800035e:	000a      	movs	r2, r1
 8000360:	43d2      	mvns	r2, r2
 8000362:	401a      	ands	r2, r3
 8000364:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	019b      	lsls	r3, r3, #6
 800036a:	22ff      	movs	r2, #255	; 0xff
 800036c:	401a      	ands	r2, r3
 800036e:	1dfb      	adds	r3, r7, #7
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	0018      	movs	r0, r3
 8000374:	2303      	movs	r3, #3
 8000376:	4003      	ands	r3, r0
 8000378:	00db      	lsls	r3, r3, #3
 800037a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800037c:	4809      	ldr	r0, [pc, #36]	; (80003a4 <__NVIC_SetPriority+0xd8>)
 800037e:	1dfb      	adds	r3, r7, #7
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	001c      	movs	r4, r3
 8000384:	230f      	movs	r3, #15
 8000386:	4023      	ands	r3, r4
 8000388:	3b08      	subs	r3, #8
 800038a:	089b      	lsrs	r3, r3, #2
 800038c:	430a      	orrs	r2, r1
 800038e:	3306      	adds	r3, #6
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	18c3      	adds	r3, r0, r3
 8000394:	3304      	adds	r3, #4
 8000396:	601a      	str	r2, [r3, #0]
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b003      	add	sp, #12
 800039e:	bd90      	pop	{r4, r7, pc}
 80003a0:	e000e100 	.word	0xe000e100
 80003a4:	e000ed00 	.word	0xe000ed00

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	1e5a      	subs	r2, r3, #1
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	045b      	lsls	r3, r3, #17
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d301      	bcc.n	80003c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003bc:	2301      	movs	r3, #1
 80003be:	e010      	b.n	80003e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <SysTick_Config+0x44>)
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	3a01      	subs	r2, #1
 80003c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c8:	2301      	movs	r3, #1
 80003ca:	425b      	negs	r3, r3
 80003cc:	2103      	movs	r1, #3
 80003ce:	0018      	movs	r0, r3
 80003d0:	f7ff ff7c 	bl	80002cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <SysTick_Config+0x44>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003da:	4b04      	ldr	r3, [pc, #16]	; (80003ec <SysTick_Config+0x44>)
 80003dc:	2207      	movs	r2, #7
 80003de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003e0:	2300      	movs	r3, #0
}
 80003e2:	0018      	movs	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	e000e010 	.word	0xe000e010

080003f0 <systemInit>:

static void SetSysClock(void);
static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
static void systickConfig(void);

void systemInit(void) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	SetSysClock();
 80003f4:	f000 f828 	bl	8000448 <SetSysClock>
	systickConfig();
 80003f8:	f000 f818 	bl	800042c <systickConfig>
}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <SysTick_CLKSourceConfig>:

static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2b04      	cmp	r3, #4
 8000410:	d105      	bne.n	800041e <SysTick_CLKSourceConfig+0x1a>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <SysTick_CLKSourceConfig+0x24>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SysTick_CLKSourceConfig+0x24>)
 8000418:	2104      	movs	r1, #4
 800041a:	430a      	orrs	r2, r1
 800041c:	601a      	str	r2, [r3, #0]
	}
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	e000e010 	.word	0xe000e010

0800042c <systickConfig>:

static void systickConfig(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 8000430:	2004      	movs	r0, #4
 8000432:	f7ff ffe7 	bl	8000404 <SysTick_CLKSourceConfig>
	SysTick_Config(systemClock / 1000);
 8000436:	23fa      	movs	r3, #250	; 0xfa
 8000438:	021b      	lsls	r3, r3, #8
 800043a:	0018      	movs	r0, r3
 800043c:	f7ff ffb4 	bl	80003a8 <SysTick_Config>
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <SetSysClock>:

static void SetSysClock(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t) RCC_CR_HSEON);
 800044c:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <SetSysClock+0xb4>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <SetSysClock+0xb4>)
 8000452:	2180      	movs	r1, #128	; 0x80
 8000454:	0249      	lsls	r1, r1, #9
 8000456:	430a      	orrs	r2, r1
 8000458:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	4b27      	ldr	r3, [pc, #156]	; (80004fc <SetSysClock+0xb4>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	029b      	lsls	r3, r3, #10
 8000464:	4013      	ands	r3, r2
 8000466:	d0f9      	beq.n	800045c <SetSysClock+0x14>
		;

	/* Enable Prefetch Buffer and set Flash Latency */
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2;
 8000468:	4b25      	ldr	r3, [pc, #148]	; (8000500 <SetSysClock+0xb8>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	4b24      	ldr	r3, [pc, #144]	; (8000500 <SetSysClock+0xb8>)
 800046e:	2182      	movs	r1, #130	; 0x82
 8000470:	0049      	lsls	r1, r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	601a      	str	r2, [r3, #0]
	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// APB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_HPRE);
 8000476:	4b21      	ldr	r3, [pc, #132]	; (80004fc <SetSysClock+0xb4>)
 8000478:	689a      	ldr	r2, [r3, #8]
 800047a:	4b20      	ldr	r3, [pc, #128]	; (80004fc <SetSysClock+0xb4>)
 800047c:	4921      	ldr	r1, [pc, #132]	; (8000504 <SetSysClock+0xbc>)
 800047e:	400a      	ands	r2, r1
 8000480:	609a      	str	r2, [r3, #8]
	// AHB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_PPRE);
 8000482:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <SetSysClock+0xb4>)
 8000484:	689a      	ldr	r2, [r3, #8]
 8000486:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <SetSysClock+0xb4>)
 8000488:	491f      	ldr	r1, [pc, #124]	; (8000508 <SetSysClock+0xc0>)
 800048a:	400a      	ands	r2, r1
 800048c:	609a      	str	r2, [r3, #8]

	//PLL INPUT CLOCK SOURCE HSE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 800048e:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <SetSysClock+0xb4>)
 8000490:	68da      	ldr	r2, [r3, #12]
 8000492:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <SetSysClock+0xb4>)
 8000494:	2103      	movs	r1, #3
 8000496:	430a      	orrs	r2, r1
 8000498:	60da      	str	r2, [r3, #12]

	/* PLL configuration = HSE = 64 MHz */
	//PLLM = 1
	//PLLN = 16
	//PLLR = 2
	RCC->PLLCFGR &= (uint32_t) ((uint32_t) ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <SetSysClock+0xb4>)
 800049c:	68da      	ldr	r2, [r3, #12]
 800049e:	4b17      	ldr	r3, [pc, #92]	; (80004fc <SetSysClock+0xb4>)
 80004a0:	491a      	ldr	r1, [pc, #104]	; (800050c <SetSysClock+0xc4>)
 80004a2:	400a      	ands	r2, r1
 80004a4:	60da      	str	r2, [r3, #12]
			| RCC_PLLCFGR_PLLR));

	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4)
 80004a6:	4b15      	ldr	r3, [pc, #84]	; (80004fc <SetSysClock+0xb4>)
 80004a8:	68da      	ldr	r2, [r3, #12]
 80004aa:	4b14      	ldr	r3, [pc, #80]	; (80004fc <SetSysClock+0xb4>)
 80004ac:	4918      	ldr	r1, [pc, #96]	; (8000510 <SetSysClock+0xc8>)
 80004ae:	430a      	orrs	r2, r1
 80004b0:	60da      	str	r2, [r3, #12]
			| (RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLREN) | (RCC_PLLCFGR_PLLQEN)
			| (RCC_PLLCFGR_PLLSRC_HSE);

	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 80004b2:	4b12      	ldr	r3, [pc, #72]	; (80004fc <SetSysClock+0xb4>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <SetSysClock+0xb4>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	0449      	lsls	r1, r1, #17
 80004bc:	430a      	orrs	r2, r1
 80004be:	601a      	str	r2, [r3, #0]

	/* Wait till PLL is ready */
	while ((RCC->CR & RCC_CR_PLLRDY) == 0) {
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <SetSysClock+0xb4>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	2380      	movs	r3, #128	; 0x80
 80004c8:	049b      	lsls	r3, r3, #18
 80004ca:	4013      	ands	r3, r2
 80004cc:	d0f9      	beq.n	80004c2 <SetSysClock+0x7a>
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (uint32_t) ((uint32_t) ~(RCC_CFGR_SW));
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <SetSysClock+0xb4>)
 80004d0:	689a      	ldr	r2, [r3, #8]
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <SetSysClock+0xb4>)
 80004d4:	2107      	movs	r1, #7
 80004d6:	438a      	bics	r2, r1
 80004d8:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= (uint32_t) RCC_CFGR_SW_1;
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <SetSysClock+0xb4>)
 80004dc:	689a      	ldr	r2, [r3, #8]
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <SetSysClock+0xb4>)
 80004e0:	2102      	movs	r1, #2
 80004e2:	430a      	orrs	r2, r1
 80004e4:	609a      	str	r2, [r3, #8]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1)
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <SetSysClock+0xb4>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2238      	movs	r2, #56	; 0x38
 80004ee:	4013      	ands	r3, r2
 80004f0:	2b10      	cmp	r3, #16
 80004f2:	d1f9      	bne.n	80004e8 <SetSysClock+0xa0>
		;
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	40022000 	.word	0x40022000
 8000504:	fffff0ff 	.word	0xfffff0ff
 8000508:	ffff8fff 	.word	0xffff8fff
 800050c:	1fff808f 	.word	0x1fff808f
 8000510:	31001003 	.word	0x31001003

08000514 <__NVIC_EnableIRQ>:
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	0002      	movs	r2, r0
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b7f      	cmp	r3, #127	; 0x7f
 8000526:	d809      	bhi.n	800053c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000528:	1dfb      	adds	r3, r7, #7
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	001a      	movs	r2, r3
 800052e:	231f      	movs	r3, #31
 8000530:	401a      	ands	r2, r3
 8000532:	4b04      	ldr	r3, [pc, #16]	; (8000544 <__NVIC_EnableIRQ+0x30>)
 8000534:	2101      	movs	r1, #1
 8000536:	4091      	lsls	r1, r2
 8000538:	000a      	movs	r2, r1
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b002      	add	sp, #8
 8000542:	bd80      	pop	{r7, pc}
 8000544:	e000e100 	.word	0xe000e100

08000548 <__NVIC_SetPriority>:
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	0002      	movs	r2, r0
 8000550:	6039      	str	r1, [r7, #0]
 8000552:	1dfb      	adds	r3, r7, #7
 8000554:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b7f      	cmp	r3, #127	; 0x7f
 800055c:	d828      	bhi.n	80005b0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800055e:	4a2f      	ldr	r2, [pc, #188]	; (800061c <__NVIC_SetPriority+0xd4>)
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b25b      	sxtb	r3, r3
 8000566:	089b      	lsrs	r3, r3, #2
 8000568:	33c0      	adds	r3, #192	; 0xc0
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	589b      	ldr	r3, [r3, r2]
 800056e:	1dfa      	adds	r2, r7, #7
 8000570:	7812      	ldrb	r2, [r2, #0]
 8000572:	0011      	movs	r1, r2
 8000574:	2203      	movs	r2, #3
 8000576:	400a      	ands	r2, r1
 8000578:	00d2      	lsls	r2, r2, #3
 800057a:	21ff      	movs	r1, #255	; 0xff
 800057c:	4091      	lsls	r1, r2
 800057e:	000a      	movs	r2, r1
 8000580:	43d2      	mvns	r2, r2
 8000582:	401a      	ands	r2, r3
 8000584:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	019b      	lsls	r3, r3, #6
 800058a:	22ff      	movs	r2, #255	; 0xff
 800058c:	401a      	ands	r2, r3
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	0018      	movs	r0, r3
 8000594:	2303      	movs	r3, #3
 8000596:	4003      	ands	r3, r0
 8000598:	00db      	lsls	r3, r3, #3
 800059a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800059c:	481f      	ldr	r0, [pc, #124]	; (800061c <__NVIC_SetPriority+0xd4>)
 800059e:	1dfb      	adds	r3, r7, #7
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	b25b      	sxtb	r3, r3
 80005a4:	089b      	lsrs	r3, r3, #2
 80005a6:	430a      	orrs	r2, r1
 80005a8:	33c0      	adds	r3, #192	; 0xc0
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	501a      	str	r2, [r3, r0]
}
 80005ae:	e031      	b.n	8000614 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005b0:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <__NVIC_SetPriority+0xd8>)
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	0019      	movs	r1, r3
 80005b8:	230f      	movs	r3, #15
 80005ba:	400b      	ands	r3, r1
 80005bc:	3b08      	subs	r3, #8
 80005be:	089b      	lsrs	r3, r3, #2
 80005c0:	3306      	adds	r3, #6
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	18d3      	adds	r3, r2, r3
 80005c6:	3304      	adds	r3, #4
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	1dfa      	adds	r2, r7, #7
 80005cc:	7812      	ldrb	r2, [r2, #0]
 80005ce:	0011      	movs	r1, r2
 80005d0:	2203      	movs	r2, #3
 80005d2:	400a      	ands	r2, r1
 80005d4:	00d2      	lsls	r2, r2, #3
 80005d6:	21ff      	movs	r1, #255	; 0xff
 80005d8:	4091      	lsls	r1, r2
 80005da:	000a      	movs	r2, r1
 80005dc:	43d2      	mvns	r2, r2
 80005de:	401a      	ands	r2, r3
 80005e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	019b      	lsls	r3, r3, #6
 80005e6:	22ff      	movs	r2, #255	; 0xff
 80005e8:	401a      	ands	r2, r3
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	0018      	movs	r0, r3
 80005f0:	2303      	movs	r3, #3
 80005f2:	4003      	ands	r3, r0
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <__NVIC_SetPriority+0xd8>)
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	001c      	movs	r4, r3
 8000600:	230f      	movs	r3, #15
 8000602:	4023      	ands	r3, r4
 8000604:	3b08      	subs	r3, #8
 8000606:	089b      	lsrs	r3, r3, #2
 8000608:	430a      	orrs	r2, r1
 800060a:	3306      	adds	r3, #6
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	18c3      	adds	r3, r0, r3
 8000610:	3304      	adds	r3, #4
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b003      	add	sp, #12
 800061a:	bd90      	pop	{r4, r7, pc}
 800061c:	e000e100 	.word	0xe000e100
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <COMX0_pin_init>:
#define COMX0_RX_GPIO_PORT         			GPIOA				//Pin A10
#define COMX0_RX_GPIO_CLK          			RCC_IOPENR_GPIOAEN
#define COMX0_IRQn                 			USART1_IRQn
#define COMX0_IRQHandler		    		USART1_IRQn_IRQHandler

static void COMX0_pin_init(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
	RCC->IOPENR |= (COMX0_TX_GPIO_CLK | COMX0_TX_GPIO_CLK);
 800062e:	4b42      	ldr	r3, [pc, #264]	; (8000738 <COMX0_pin_init+0x114>)
 8000630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000632:	4b41      	ldr	r3, [pc, #260]	; (8000738 <COMX0_pin_init+0x114>)
 8000634:	2101      	movs	r1, #1
 8000636:	430a      	orrs	r2, r1
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->COMX0_APB_CLK |= COMX0_CLK;
 800063a:	4b3f      	ldr	r3, [pc, #252]	; (8000738 <COMX0_pin_init+0x114>)
 800063c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800063e:	4b3e      	ldr	r3, [pc, #248]	; (8000738 <COMX0_pin_init+0x114>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	01c9      	lsls	r1, r1, #7
 8000644:	430a      	orrs	r2, r1
 8000646:	641a      	str	r2, [r3, #64]	; 0x40

	COMX0_RX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_RX_PIN * 2));
 8000648:	23a0      	movs	r3, #160	; 0xa0
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	493a      	ldr	r1, [pc, #232]	; (800073c <COMX0_pin_init+0x118>)
 8000654:	400a      	ands	r2, r1
 8000656:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->MODER |= (0x02 << (COMX0_RX_PIN * 2)); //mode AF
 8000658:	23a0      	movs	r3, #160	; 0xa0
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	0389      	lsls	r1, r1, #14
 8000666:	430a      	orrs	r2, r1
 8000668:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->ODR &= ~(0x01 << COMX0_RX_PIN); //push pull
 800066a:	23a0      	movs	r3, #160	; 0xa0
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	23a0      	movs	r3, #160	; 0xa0
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	4932      	ldr	r1, [pc, #200]	; (8000740 <COMX0_pin_init+0x11c>)
 8000676:	400a      	ands	r2, r1
 8000678:	615a      	str	r2, [r3, #20]
	COMX0_RX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_RX_PIN * 2)); //no pull
 800067a:	23a0      	movs	r3, #160	; 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	23a0      	movs	r3, #160	; 0xa0
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	492d      	ldr	r1, [pc, #180]	; (800073c <COMX0_pin_init+0x118>)
 8000686:	400a      	ands	r2, r1
 8000688:	60da      	str	r2, [r3, #12]
	COMX0_RX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_RX_PIN); ////speed low
 800068a:	23a0      	movs	r3, #160	; 0xa0
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	23a0      	movs	r3, #160	; 0xa0
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	492a      	ldr	r1, [pc, #168]	; (8000740 <COMX0_pin_init+0x11c>)
 8000696:	400a      	ands	r2, r1
 8000698:	609a      	str	r2, [r3, #8]

	COMX0_TX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_TX_PIN * 2));
 800069a:	23a0      	movs	r3, #160	; 0xa0
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	23a0      	movs	r3, #160	; 0xa0
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	4927      	ldr	r1, [pc, #156]	; (8000744 <COMX0_pin_init+0x120>)
 80006a6:	400a      	ands	r2, r1
 80006a8:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->MODER |= (0x02 << (COMX0_TX_PIN * 2)); //mode AF
 80006aa:	23a0      	movs	r3, #160	; 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	23a0      	movs	r3, #160	; 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	0309      	lsls	r1, r1, #12
 80006b8:	430a      	orrs	r2, r1
 80006ba:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->ODR &= ~(0x01 << COMX0_TX_PIN); //push pull
 80006bc:	23a0      	movs	r3, #160	; 0xa0
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	23a0      	movs	r3, #160	; 0xa0
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	4920      	ldr	r1, [pc, #128]	; (8000748 <COMX0_pin_init+0x124>)
 80006c8:	400a      	ands	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
	COMX0_TX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_TX_PIN * 2)); //no pull
 80006cc:	23a0      	movs	r3, #160	; 0xa0
 80006ce:	05db      	lsls	r3, r3, #23
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	23a0      	movs	r3, #160	; 0xa0
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	491b      	ldr	r1, [pc, #108]	; (8000744 <COMX0_pin_init+0x120>)
 80006d8:	400a      	ands	r2, r1
 80006da:	60da      	str	r2, [r3, #12]
	COMX0_TX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_TX_PIN); ////speed low
 80006dc:	23a0      	movs	r3, #160	; 0xa0
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	23a0      	movs	r3, #160	; 0xa0
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	4918      	ldr	r1, [pc, #96]	; (8000748 <COMX0_pin_init+0x124>)
 80006e8:	400a      	ands	r2, r1
 80006ea:	609a      	str	r2, [r3, #8]

	temp = COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3u];
 80006ec:	23a0      	movs	r3, #160	; 0xa0
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f2:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_RX_PIN & 0x07u) * 4ul));
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a15      	ldr	r2, [pc, #84]	; (800074c <COMX0_pin_init+0x128>)
 80006f8:	4013      	ands	r3, r2
 80006fa:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_RX_PIN_AF << ((COMX0_RX_PIN & 0x07u) * 4ul));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	0052      	lsls	r2, r2, #1
 8000702:	4313      	orrs	r3, r2
 8000704:	607b      	str	r3, [r7, #4]
	COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3ul] = temp;
 8000706:	23a0      	movs	r3, #160	; 0xa0
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	625a      	str	r2, [r3, #36]	; 0x24

	temp = COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3u];
 800070e:	23a0      	movs	r3, #160	; 0xa0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000714:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_TX_PIN & 0x07u) * 4ul));
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	22f0      	movs	r2, #240	; 0xf0
 800071a:	4393      	bics	r3, r2
 800071c:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_TX_PIN_AF << ((COMX0_TX_PIN & 0x07u) * 4ul));
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2210      	movs	r2, #16
 8000722:	4313      	orrs	r3, r2
 8000724:	607b      	str	r3, [r7, #4]
	COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3ul] = temp;
 8000726:	23a0      	movs	r3, #160	; 0xa0
 8000728:	05db      	lsls	r3, r3, #23
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40021000 	.word	0x40021000
 800073c:	ffcfffff 	.word	0xffcfffff
 8000740:	fffffbff 	.word	0xfffffbff
 8000744:	fff3ffff 	.word	0xfff3ffff
 8000748:	fffffdff 	.word	0xfffffdff
 800074c:	fffff0ff 	.word	0xfffff0ff

08000750 <uartx_init>:

static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	uint32_t BRR_value = SYS_CLOCK / baudrate;
 800075a:	6839      	ldr	r1, [r7, #0]
 800075c:	481c      	ldr	r0, [pc, #112]	; (80007d0 <uartx_init+0x80>)
 800075e:	f7ff fcd1 	bl	8000104 <__udivsi3>
 8000762:	0003      	movs	r3, r0
 8000764:	60fb      	str	r3, [r7, #12]

	UARTx->CR1 = 0;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
	// Word length 8n1
	UARTx->CR1 &= ~USART_CR1_M1;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <uartx_init+0x84>)
 8000772:	401a      	ands	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	601a      	str	r2, [r3, #0]
	//Parity disable
	UARTx->CR1 &= ~USART_CR1_PCE;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <uartx_init+0x88>)
 800077e:	401a      	ands	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	601a      	str	r2, [r3, #0]
	//mode Tx_Rx
	UARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	220c      	movs	r2, #12
 800078a:	431a      	orrs	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	601a      	str	r2, [r3, #0]
	//OverSampling 16bit
	UARTx->CR1 &= ~USART_CR1_OVER8;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a11      	ldr	r2, [pc, #68]	; (80007dc <uartx_init+0x8c>)
 8000796:	401a      	ands	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	601a      	str	r2, [r3, #0]
	//ClockPrescaler no div
	UARTx->PRESC &= USART_PRESC_PRESCALER;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a0:	220f      	movs	r2, #15
 80007a2:	401a      	ands	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
	//set baudrate 115200
	UARTx->BRR = BRR_value;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	60da      	str	r2, [r3, #12]
	//rx interupt enable
	UARTx->CR1 |= USART_CR1_RXNEIE_RXFNEIE;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2220      	movs	r2, #32
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	601a      	str	r2, [r3, #0]
	UARTx->CR1 |= USART_CR1_UE;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2201      	movs	r2, #1
 80007c0:	431a      	orrs	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b004      	add	sp, #16
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	03d09000 	.word	0x03d09000
 80007d4:	efffffff 	.word	0xefffffff
 80007d8:	fffffbff 	.word	0xfffffbff
 80007dc:	ffff7fff 	.word	0xffff7fff

080007e0 <usart_x0_init>:

void usart_x0_init(uint32_t baud) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	COMX0_pin_init();
 80007e8:	f7ff ff1c 	bl	8000624 <COMX0_pin_init>
	uartx_init(COMX0,baud);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <usart_x0_init+0x30>)
 80007f0:	0019      	movs	r1, r3
 80007f2:	0010      	movs	r0, r2
 80007f4:	f7ff ffac 	bl	8000750 <uartx_init>
	NVIC_SetPriority(COMX0_IRQn, 0);
 80007f8:	2100      	movs	r1, #0
 80007fa:	201b      	movs	r0, #27
 80007fc:	f7ff fea4 	bl	8000548 <__NVIC_SetPriority>
	NVIC_EnableIRQ(COMX0_IRQn);
 8000800:	201b      	movs	r0, #27
 8000802:	f7ff fe87 	bl	8000514 <__NVIC_EnableIRQ>
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40013800 	.word	0x40013800

08000814 <usart_x0_sendChar>:

void usart_x0_sendChar(uint8_t c) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	0002      	movs	r2, r0
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	701a      	strb	r2, [r3, #0]
	while ((COMX0->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <usart_x0_sendChar+0x2c>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	4013      	ands	r3, r2
 800082a:	2b80      	cmp	r3, #128	; 0x80
 800082c:	d1f9      	bne.n	8000822 <usart_x0_sendChar+0xe>
	COMX0->TDR = c;
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <usart_x0_sendChar+0x2c>)
 8000830:	1dfa      	adds	r2, r7, #7
 8000832:	7812      	ldrb	r2, [r2, #0]
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	40013800 	.word	0x40013800

08000844 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

	uint8_t cChar;
	if (USART1->ISR & USART_ISR_RXNE_RXFNE) {
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <USART1_IRQHandler+0x2c>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	2220      	movs	r2, #32
 8000850:	4013      	ands	r3, r2
 8000852:	d009      	beq.n	8000868 <USART1_IRQHandler+0x24>
		cChar = USART1->RDR;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <USART1_IRQHandler+0x2c>)
 8000856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	701a      	strb	r2, [r3, #0]
		USART1->ICR |= USART_RQR_RXFRQ;
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <USART1_IRQHandler+0x2c>)
 800085e:	6a1a      	ldr	r2, [r3, #32]
 8000860:	4b03      	ldr	r3, [pc, #12]	; (8000870 <USART1_IRQHandler+0x2c>)
 8000862:	2108      	movs	r1, #8
 8000864:	430a      	orrs	r2, r1
 8000866:	621a      	str	r2, [r3, #32]
	}
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40013800 	.word	0x40013800

08000874 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	0002      	movs	r2, r0
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	701a      	strb	r2, [r3, #0]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <xputc+0x40>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d008      	beq.n	800089a <xputc+0x26>
		*outptr++ = (unsigned char)c;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <xputc+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <xputc+0x40>)
 8000890:	6011      	str	r1, [r2, #0]
 8000892:	1dfa      	adds	r2, r7, #7
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	701a      	strb	r2, [r3, #0]
		return;
 8000898:	e009      	b.n	80008ae <xputc+0x3a>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <xputc+0x44>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d005      	beq.n	80008ae <xputc+0x3a>
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <xputc+0x44>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	1dfa      	adds	r2, r7, #7
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	0010      	movs	r0, r2
 80008ac:	4798      	blx	r3
}
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000030 	.word	0x20000030
 80008b8:	2000002c 	.word	0x2000002c

080008bc <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	while (*str)
 80008c4:	e006      	b.n	80008d4 <xputs+0x18>
		xputc(*str++);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f7ff ffd0 	bl	8000874 <xputc>
	while (*str)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f4      	bne.n	80008c6 <xputs+0xa>
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b08f      	sub	sp, #60	; 0x3c
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	607a      	str	r2, [r7, #4]
 80008f8:	211f      	movs	r1, #31
 80008fa:	187a      	adds	r2, r7, r1
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	7013      	strb	r3, [r2, #0]
		if (!c) break;				/* End of format? */
 8000900:	000a      	movs	r2, r1
 8000902:	18bb      	adds	r3, r7, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d100      	bne.n	800090c <xvprintf+0x24>
 800090a:	e164      	b.n	8000bd6 <xvprintf+0x2ee>
		if (c != '%') {				/* Pass through it if not a % sequense */
 800090c:	18bb      	adds	r3, r7, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b25      	cmp	r3, #37	; 0x25
 8000912:	d005      	beq.n	8000920 <xvprintf+0x38>
			xputc(c); continue;
 8000914:	18bb      	adds	r3, r7, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff ffab 	bl	8000874 <xputc>
 800091e:	e159      	b.n	8000bd4 <xvprintf+0x2ec>
		}
		f = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	211f      	movs	r1, #31
 800092c:	187a      	adds	r2, r7, r1
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padded */
 8000932:	187b      	adds	r3, r7, r1
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b30      	cmp	r3, #48	; 0x30
 8000938:	d108      	bne.n	800094c <xvprintf+0x64>
			f = 1; c = *fmt++;
 800093a:	2301      	movs	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	1c5a      	adds	r2, r3, #1
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	187a      	adds	r2, r7, r1
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	7013      	strb	r3, [r2, #0]
 800094a:	e00c      	b.n	8000966 <xvprintf+0x7e>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800094c:	211f      	movs	r1, #31
 800094e:	187b      	adds	r3, r7, r1
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b2d      	cmp	r3, #45	; 0x2d
 8000954:	d107      	bne.n	8000966 <xvprintf+0x7e>
				f = 2; c = *fmt++;
 8000956:	2302      	movs	r3, #2
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	187a      	adds	r2, r7, r1
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	7013      	strb	r3, [r2, #0]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
 800096a:	e011      	b.n	8000990 <xvprintf+0xa8>
			w = w * 10 + c - '0';
 800096c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800096e:	0013      	movs	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	189b      	adds	r3, r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	001a      	movs	r2, r3
 8000978:	211f      	movs	r1, #31
 800097a:	187b      	adds	r3, r7, r1
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	18d3      	adds	r3, r2, r3
 8000980:	3b30      	subs	r3, #48	; 0x30
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	187a      	adds	r2, r7, r1
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	7013      	strb	r3, [r2, #0]
 8000990:	221f      	movs	r2, #31
 8000992:	18bb      	adds	r3, r7, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b2f      	cmp	r3, #47	; 0x2f
 8000998:	d903      	bls.n	80009a2 <xvprintf+0xba>
 800099a:	18bb      	adds	r3, r7, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b39      	cmp	r3, #57	; 0x39
 80009a0:	d9e4      	bls.n	800096c <xvprintf+0x84>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80009a2:	221f      	movs	r2, #31
 80009a4:	18bb      	adds	r3, r7, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b6c      	cmp	r3, #108	; 0x6c
 80009aa:	d003      	beq.n	80009b4 <xvprintf+0xcc>
 80009ac:	18bb      	adds	r3, r7, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b4c      	cmp	r3, #76	; 0x4c
 80009b2:	d10a      	bne.n	80009ca <xvprintf+0xe2>
			f |= 4; c = *fmt++;
 80009b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b6:	2204      	movs	r2, #4
 80009b8:	4313      	orrs	r3, r2
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	221f      	movs	r2, #31
 80009c4:	18ba      	adds	r2, r7, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;				/* End of format? */
 80009ca:	221f      	movs	r2, #31
 80009cc:	18bb      	adds	r3, r7, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d100      	bne.n	80009d6 <xvprintf+0xee>
 80009d4:	e101      	b.n	8000bda <xvprintf+0x2f2>
		d = c;
 80009d6:	211e      	movs	r1, #30
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	18ba      	adds	r2, r7, r2
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	701a      	strb	r2, [r3, #0]
		if (d >= 'a') d -= 0x20;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b60      	cmp	r3, #96	; 0x60
 80009e6:	d904      	bls.n	80009f2 <xvprintf+0x10a>
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	187a      	adds	r2, r7, r1
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	3a20      	subs	r2, #32
 80009f0:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 80009f2:	231e      	movs	r3, #30
 80009f4:	18fb      	adds	r3, r7, r3
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	3b42      	subs	r3, #66	; 0x42
 80009fa:	2b16      	cmp	r3, #22
 80009fc:	d847      	bhi.n	8000a8e <xvprintf+0x1a6>
 80009fe:	009a      	lsls	r2, r3, #2
 8000a00:	4b78      	ldr	r3, [pc, #480]	; (8000be4 <xvprintf+0x2fc>)
 8000a02:	18d3      	adds	r3, r2, r3
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	1d1a      	adds	r2, r3, #4
 8000a0c:	603a      	str	r2, [r7, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a16:	e002      	b.n	8000a1e <xvprintf+0x136>
 8000a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d3      	adds	r3, r2, r3
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1f6      	bne.n	8000a18 <xvprintf+0x130>
			while (!(f & 2) && j++ < w) xputc(' ');
 8000a2a:	e002      	b.n	8000a32 <xvprintf+0x14a>
 8000a2c:	2020      	movs	r0, #32
 8000a2e:	f7ff ff21 	bl	8000874 <xputc>
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	2202      	movs	r2, #2
 8000a36:	4013      	ands	r3, r2
 8000a38:	d105      	bne.n	8000a46 <xvprintf+0x15e>
 8000a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d8f2      	bhi.n	8000a2c <xvprintf+0x144>
			xputs(p);
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff ff37 	bl	80008bc <xputs>
			while (j++ < w) xputc(' ');
 8000a4e:	e002      	b.n	8000a56 <xvprintf+0x16e>
 8000a50:	2020      	movs	r0, #32
 8000a52:	f7ff ff0f 	bl	8000874 <xputc>
 8000a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d8f6      	bhi.n	8000a50 <xvprintf+0x168>
			continue;
 8000a62:	e0b7      	b.n	8000bd4 <xvprintf+0x2ec>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	1d1a      	adds	r2, r3, #4
 8000a68:	603a      	str	r2, [r7, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff ff00 	bl	8000874 <xputc>
 8000a74:	e0ae      	b.n	8000bd4 <xvprintf+0x2ec>
		case 'B' :					/* Binary */
			r = 2; break;
 8000a76:	2302      	movs	r3, #2
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
 8000a7a:	e00f      	b.n	8000a9c <xvprintf+0x1b4>
		case 'O' :					/* Octal */
			r = 8; break;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8000a80:	e00c      	b.n	8000a9c <xvprintf+0x1b4>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8000a82:	230a      	movs	r3, #10
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
 8000a86:	e009      	b.n	8000a9c <xvprintf+0x1b4>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8000a8c:	e006      	b.n	8000a9c <xvprintf+0x1b4>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8000a8e:	231f      	movs	r3, #31
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff feed 	bl	8000874 <xputc>
 8000a9a:	e09b      	b.n	8000bd4 <xvprintf+0x2ec>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8000a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	d004      	beq.n	8000aae <xvprintf+0x1c6>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	1d1a      	adds	r2, r3, #4
 8000aa8:	603a      	str	r2, [r7, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	e00d      	b.n	8000aca <xvprintf+0x1e2>
 8000aae:	231e      	movs	r3, #30
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b44      	cmp	r3, #68	; 0x44
 8000ab6:	d104      	bne.n	8000ac2 <xvprintf+0x1da>
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	603a      	str	r2, [r7, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	e003      	b.n	8000aca <xvprintf+0x1e2>
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	1d1a      	adds	r2, r3, #4
 8000ac6:	603a      	str	r2, [r7, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 8000acc:	231e      	movs	r3, #30
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b44      	cmp	r3, #68	; 0x44
 8000ad4:	d109      	bne.n	8000aea <xvprintf+0x202>
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	da06      	bge.n	8000aea <xvprintf+0x202>
			v = 0 - v;
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	425b      	negs	r3, r3
 8000ae0:	623b      	str	r3, [r7, #32]
			f |= 8;
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	2208      	movs	r2, #8
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fb8c 	bl	8000210 <__aeabi_uidivmod>
 8000af8:	000b      	movs	r3, r1
 8000afa:	001a      	movs	r2, r3
 8000afc:	241e      	movs	r4, #30
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000b04:	6a38      	ldr	r0, [r7, #32]
 8000b06:	f7ff fafd 	bl	8000104 <__udivsi3>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b09      	cmp	r3, #9
 8000b14:	d90d      	bls.n	8000b32 <xvprintf+0x24a>
 8000b16:	231f      	movs	r3, #31
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b78      	cmp	r3, #120	; 0x78
 8000b1e:	d101      	bne.n	8000b24 <xvprintf+0x23c>
 8000b20:	2327      	movs	r3, #39	; 0x27
 8000b22:	e000      	b.n	8000b26 <xvprintf+0x23e>
 8000b24:	2307      	movs	r3, #7
 8000b26:	211e      	movs	r1, #30
 8000b28:	187a      	adds	r2, r7, r1
 8000b2a:	1879      	adds	r1, r7, r1
 8000b2c:	7809      	ldrb	r1, [r1, #0]
 8000b2e:	185b      	adds	r3, r3, r1
 8000b30:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 8000b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	633a      	str	r2, [r7, #48]	; 0x30
 8000b38:	221e      	movs	r2, #30
 8000b3a:	18ba      	adds	r2, r7, r2
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	3230      	adds	r2, #48	; 0x30
 8000b40:	b2d1      	uxtb	r1, r2
 8000b42:	2208      	movs	r2, #8
 8000b44:	18ba      	adds	r2, r7, r2
 8000b46:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof(s));
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d002      	beq.n	8000b54 <xvprintf+0x26c>
 8000b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d9cc      	bls.n	8000aee <xvprintf+0x206>
		if (f & 8) s[i++] = '-';
 8000b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b56:	2208      	movs	r2, #8
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d006      	beq.n	8000b6a <xvprintf+0x282>
 8000b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	633a      	str	r2, [r7, #48]	; 0x30
 8000b62:	2208      	movs	r2, #8
 8000b64:	18ba      	adds	r2, r7, r2
 8000b66:	212d      	movs	r1, #45	; 0x2d
 8000b68:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 8000b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	2201      	movs	r2, #1
 8000b72:	4013      	ands	r3, r2
 8000b74:	d001      	beq.n	8000b7a <xvprintf+0x292>
 8000b76:	2230      	movs	r2, #48	; 0x30
 8000b78:	e000      	b.n	8000b7c <xvprintf+0x294>
 8000b7a:	2220      	movs	r2, #32
 8000b7c:	231e      	movs	r3, #30
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) xputc(d);
 8000b82:	e005      	b.n	8000b90 <xvprintf+0x2a8>
 8000b84:	231e      	movs	r3, #30
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff fe72 	bl	8000874 <xputc>
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	2202      	movs	r2, #2
 8000b94:	4013      	ands	r3, r2
 8000b96:	d105      	bne.n	8000ba4 <xvprintf+0x2bc>
 8000b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8ef      	bhi.n	8000b84 <xvprintf+0x29c>
		do xputc(s[--i]); while(i);
 8000ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8000baa:	2308      	movs	r3, #8
 8000bac:	18fa      	adds	r2, r7, r3
 8000bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb0:	18d3      	adds	r3, r2, r3
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff fe5d 	bl	8000874 <xputc>
 8000bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1f1      	bne.n	8000ba4 <xvprintf+0x2bc>
		while (j++ < w) xputc(' ');
 8000bc0:	e002      	b.n	8000bc8 <xvprintf+0x2e0>
 8000bc2:	2020      	movs	r0, #32
 8000bc4:	f7ff fe56 	bl	8000874 <xputc>
 8000bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000bce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f6      	bhi.n	8000bc2 <xvprintf+0x2da>
		c = *fmt++;					/* Get a char */
 8000bd4:	e68d      	b.n	80008f2 <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	e000      	b.n	8000bdc <xvprintf+0x2f4>
		if (!c) break;				/* End of format? */
 8000bda:	46c0      	nop			; (mov r8, r8)
	}
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b00f      	add	sp, #60	; 0x3c
 8000be2:	bd90      	pop	{r4, r7, pc}
 8000be4:	08000ce8 	.word	0x08000ce8

08000be8 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8000be8:	b40f      	push	{r0, r1, r2, r3}
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8000bf0:	2314      	movs	r3, #20
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fe73 	bl	80008e8 <xvprintf>
	va_end(arp);
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bc80      	pop	{r7}
 8000c0a:	bc08      	pop	{r3}
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4718      	bx	r3

08000c10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c14:	e000      	b.n	8000c18 <Reset_Handler+0x8>
 8000c16:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	; (8000c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <LoopForever+0xe>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	; (8000c5c <LoopForever+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c3e:	f000 f811 	bl	8000c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c42:	f7ff faeb 	bl	800021c <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   r0, =_estack
 8000c48:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c54:	08000d4c 	.word	0x08000d4c
  ldr r2, =_sbss
 8000c58:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c5c:	20000034 	.word	0x20000034

08000c60 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_COMP_IRQHandler>
	...

08000c64 <__libc_init_array>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	2600      	movs	r6, #0
 8000c68:	4d0c      	ldr	r5, [pc, #48]	; (8000c9c <__libc_init_array+0x38>)
 8000c6a:	4c0d      	ldr	r4, [pc, #52]	; (8000ca0 <__libc_init_array+0x3c>)
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	10a4      	asrs	r4, r4, #2
 8000c70:	42a6      	cmp	r6, r4
 8000c72:	d109      	bne.n	8000c88 <__libc_init_array+0x24>
 8000c74:	2600      	movs	r6, #0
 8000c76:	f000 f819 	bl	8000cac <_init>
 8000c7a:	4d0a      	ldr	r5, [pc, #40]	; (8000ca4 <__libc_init_array+0x40>)
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <__libc_init_array+0x44>)
 8000c7e:	1b64      	subs	r4, r4, r5
 8000c80:	10a4      	asrs	r4, r4, #2
 8000c82:	42a6      	cmp	r6, r4
 8000c84:	d105      	bne.n	8000c92 <__libc_init_array+0x2e>
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	00b3      	lsls	r3, r6, #2
 8000c8a:	58eb      	ldr	r3, [r5, r3]
 8000c8c:	4798      	blx	r3
 8000c8e:	3601      	adds	r6, #1
 8000c90:	e7ee      	b.n	8000c70 <__libc_init_array+0xc>
 8000c92:	00b3      	lsls	r3, r6, #2
 8000c94:	58eb      	ldr	r3, [r5, r3]
 8000c96:	4798      	blx	r3
 8000c98:	3601      	adds	r6, #1
 8000c9a:	e7f2      	b.n	8000c82 <__libc_init_array+0x1e>
 8000c9c:	08000d44 	.word	0x08000d44
 8000ca0:	08000d44 	.word	0x08000d44
 8000ca4:	08000d44 	.word	0x08000d44
 8000ca8:	08000d48 	.word	0x08000d48

08000cac <_init>:
 8000cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cb2:	bc08      	pop	{r3}
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	4770      	bx	lr

08000cb8 <_fini>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr
