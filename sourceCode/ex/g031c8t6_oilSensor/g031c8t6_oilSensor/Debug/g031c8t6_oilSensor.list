
g031c8t6_oilSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df24  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  0800dfe0  0800dfe0  0001dfe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8e4  0800e8e4  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8e4  0800e8e4  0001e8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8ec  0800e8ec  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8ec  0800e8ec  0001e8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8f0  0800e8f0  0001e8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800e8f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  20000270  0800eb64  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  0800eb64  00020904  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018090  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000389b  00000000  00000000  00038328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  0003d038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dd1  00000000  00000000  0003e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e7e  00000000  00000000  000580f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fef6  00000000  00000000  00070f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110e65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de4  00000000  00000000  00110eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000270 	.word	0x20000270
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800dfc8 	.word	0x0800dfc8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000274 	.word	0x20000274
 8000100:	0800dfc8 	.word	0x0800dfc8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fee3 	bl	8002218 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fe33 	bl	80020c8 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fed5 	bl	8002218 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fecb 	bl	8002218 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fe5b 	bl	800214c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fe51 	bl	800214c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fc5f 	bl	8000d84 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fbeb 	bl	8000cac <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc51 	bl	8000d84 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc47 	bl	8000d84 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fbf7 	bl	8000cf8 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fbed 	bl	8000cf8 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f824 	bl	80005a8 <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_d2uiz>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	2200      	movs	r2, #0
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <__aeabi_d2uiz+0x38>)
 8000572:	0004      	movs	r4, r0
 8000574:	000d      	movs	r5, r1
 8000576:	f7ff ff95 	bl	80004a4 <__aeabi_dcmpge>
 800057a:	2800      	cmp	r0, #0
 800057c:	d104      	bne.n	8000588 <__aeabi_d2uiz+0x1c>
 800057e:	0020      	movs	r0, r4
 8000580:	0029      	movs	r1, r5
 8000582:	f002 fcc9 	bl	8002f18 <__aeabi_d2iz>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <__aeabi_d2uiz+0x38>)
 800058a:	2200      	movs	r2, #0
 800058c:	0020      	movs	r0, r4
 800058e:	0029      	movs	r1, r5
 8000590:	f002 f912 	bl	80027b8 <__aeabi_dsub>
 8000594:	f002 fcc0 	bl	8002f18 <__aeabi_d2iz>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	061b      	lsls	r3, r3, #24
 800059c:	469c      	mov	ip, r3
 800059e:	4460      	add	r0, ip
 80005a0:	e7f1      	b.n	8000586 <__aeabi_d2uiz+0x1a>
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	41e00000 	.word	0x41e00000

080005a8 <__udivmoddi4>:
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005aa:	4657      	mov	r7, sl
 80005ac:	464e      	mov	r6, r9
 80005ae:	4645      	mov	r5, r8
 80005b0:	46de      	mov	lr, fp
 80005b2:	b5e0      	push	{r5, r6, r7, lr}
 80005b4:	0004      	movs	r4, r0
 80005b6:	000d      	movs	r5, r1
 80005b8:	4692      	mov	sl, r2
 80005ba:	4699      	mov	r9, r3
 80005bc:	b083      	sub	sp, #12
 80005be:	428b      	cmp	r3, r1
 80005c0:	d830      	bhi.n	8000624 <__udivmoddi4+0x7c>
 80005c2:	d02d      	beq.n	8000620 <__udivmoddi4+0x78>
 80005c4:	4649      	mov	r1, r9
 80005c6:	4650      	mov	r0, sl
 80005c8:	f002 fe20 	bl	800320c <__clzdi2>
 80005cc:	0029      	movs	r1, r5
 80005ce:	0006      	movs	r6, r0
 80005d0:	0020      	movs	r0, r4
 80005d2:	f002 fe1b 	bl	800320c <__clzdi2>
 80005d6:	1a33      	subs	r3, r6, r0
 80005d8:	4698      	mov	r8, r3
 80005da:	3b20      	subs	r3, #32
 80005dc:	469b      	mov	fp, r3
 80005de:	d433      	bmi.n	8000648 <__udivmoddi4+0xa0>
 80005e0:	465a      	mov	r2, fp
 80005e2:	4653      	mov	r3, sl
 80005e4:	4093      	lsls	r3, r2
 80005e6:	4642      	mov	r2, r8
 80005e8:	001f      	movs	r7, r3
 80005ea:	4653      	mov	r3, sl
 80005ec:	4093      	lsls	r3, r2
 80005ee:	001e      	movs	r6, r3
 80005f0:	42af      	cmp	r7, r5
 80005f2:	d83a      	bhi.n	800066a <__udivmoddi4+0xc2>
 80005f4:	42af      	cmp	r7, r5
 80005f6:	d100      	bne.n	80005fa <__udivmoddi4+0x52>
 80005f8:	e078      	b.n	80006ec <__udivmoddi4+0x144>
 80005fa:	465b      	mov	r3, fp
 80005fc:	1ba4      	subs	r4, r4, r6
 80005fe:	41bd      	sbcs	r5, r7
 8000600:	2b00      	cmp	r3, #0
 8000602:	da00      	bge.n	8000606 <__udivmoddi4+0x5e>
 8000604:	e075      	b.n	80006f2 <__udivmoddi4+0x14a>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2301      	movs	r3, #1
 8000610:	465a      	mov	r2, fp
 8000612:	4093      	lsls	r3, r2
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2301      	movs	r3, #1
 8000618:	4642      	mov	r2, r8
 800061a:	4093      	lsls	r3, r2
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	e028      	b.n	8000672 <__udivmoddi4+0xca>
 8000620:	4282      	cmp	r2, r0
 8000622:	d9cf      	bls.n	80005c4 <__udivmoddi4+0x1c>
 8000624:	2200      	movs	r2, #0
 8000626:	2300      	movs	r3, #0
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <__udivmoddi4+0x8e>
 8000632:	601c      	str	r4, [r3, #0]
 8000634:	605d      	str	r5, [r3, #4]
 8000636:	9800      	ldr	r0, [sp, #0]
 8000638:	9901      	ldr	r1, [sp, #4]
 800063a:	b003      	add	sp, #12
 800063c:	bcf0      	pop	{r4, r5, r6, r7}
 800063e:	46bb      	mov	fp, r7
 8000640:	46b2      	mov	sl, r6
 8000642:	46a9      	mov	r9, r5
 8000644:	46a0      	mov	r8, r4
 8000646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000648:	4642      	mov	r2, r8
 800064a:	2320      	movs	r3, #32
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	4652      	mov	r2, sl
 8000650:	40da      	lsrs	r2, r3
 8000652:	4641      	mov	r1, r8
 8000654:	0013      	movs	r3, r2
 8000656:	464a      	mov	r2, r9
 8000658:	408a      	lsls	r2, r1
 800065a:	0017      	movs	r7, r2
 800065c:	4642      	mov	r2, r8
 800065e:	431f      	orrs	r7, r3
 8000660:	4653      	mov	r3, sl
 8000662:	4093      	lsls	r3, r2
 8000664:	001e      	movs	r6, r3
 8000666:	42af      	cmp	r7, r5
 8000668:	d9c4      	bls.n	80005f4 <__udivmoddi4+0x4c>
 800066a:	2200      	movs	r2, #0
 800066c:	2300      	movs	r3, #0
 800066e:	9200      	str	r2, [sp, #0]
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	4643      	mov	r3, r8
 8000674:	2b00      	cmp	r3, #0
 8000676:	d0d9      	beq.n	800062c <__udivmoddi4+0x84>
 8000678:	07fb      	lsls	r3, r7, #31
 800067a:	0872      	lsrs	r2, r6, #1
 800067c:	431a      	orrs	r2, r3
 800067e:	4646      	mov	r6, r8
 8000680:	087b      	lsrs	r3, r7, #1
 8000682:	e00e      	b.n	80006a2 <__udivmoddi4+0xfa>
 8000684:	42ab      	cmp	r3, r5
 8000686:	d101      	bne.n	800068c <__udivmoddi4+0xe4>
 8000688:	42a2      	cmp	r2, r4
 800068a:	d80c      	bhi.n	80006a6 <__udivmoddi4+0xfe>
 800068c:	1aa4      	subs	r4, r4, r2
 800068e:	419d      	sbcs	r5, r3
 8000690:	2001      	movs	r0, #1
 8000692:	1924      	adds	r4, r4, r4
 8000694:	416d      	adcs	r5, r5
 8000696:	2100      	movs	r1, #0
 8000698:	3e01      	subs	r6, #1
 800069a:	1824      	adds	r4, r4, r0
 800069c:	414d      	adcs	r5, r1
 800069e:	2e00      	cmp	r6, #0
 80006a0:	d006      	beq.n	80006b0 <__udivmoddi4+0x108>
 80006a2:	42ab      	cmp	r3, r5
 80006a4:	d9ee      	bls.n	8000684 <__udivmoddi4+0xdc>
 80006a6:	3e01      	subs	r6, #1
 80006a8:	1924      	adds	r4, r4, r4
 80006aa:	416d      	adcs	r5, r5
 80006ac:	2e00      	cmp	r6, #0
 80006ae:	d1f8      	bne.n	80006a2 <__udivmoddi4+0xfa>
 80006b0:	9800      	ldr	r0, [sp, #0]
 80006b2:	9901      	ldr	r1, [sp, #4]
 80006b4:	465b      	mov	r3, fp
 80006b6:	1900      	adds	r0, r0, r4
 80006b8:	4169      	adcs	r1, r5
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db24      	blt.n	8000708 <__udivmoddi4+0x160>
 80006be:	002b      	movs	r3, r5
 80006c0:	465a      	mov	r2, fp
 80006c2:	4644      	mov	r4, r8
 80006c4:	40d3      	lsrs	r3, r2
 80006c6:	002a      	movs	r2, r5
 80006c8:	40e2      	lsrs	r2, r4
 80006ca:	001c      	movs	r4, r3
 80006cc:	465b      	mov	r3, fp
 80006ce:	0015      	movs	r5, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db2a      	blt.n	800072a <__udivmoddi4+0x182>
 80006d4:	0026      	movs	r6, r4
 80006d6:	409e      	lsls	r6, r3
 80006d8:	0033      	movs	r3, r6
 80006da:	0026      	movs	r6, r4
 80006dc:	4647      	mov	r7, r8
 80006de:	40be      	lsls	r6, r7
 80006e0:	0032      	movs	r2, r6
 80006e2:	1a80      	subs	r0, r0, r2
 80006e4:	4199      	sbcs	r1, r3
 80006e6:	9000      	str	r0, [sp, #0]
 80006e8:	9101      	str	r1, [sp, #4]
 80006ea:	e79f      	b.n	800062c <__udivmoddi4+0x84>
 80006ec:	42a3      	cmp	r3, r4
 80006ee:	d8bc      	bhi.n	800066a <__udivmoddi4+0xc2>
 80006f0:	e783      	b.n	80005fa <__udivmoddi4+0x52>
 80006f2:	4642      	mov	r2, r8
 80006f4:	2320      	movs	r3, #32
 80006f6:	2100      	movs	r1, #0
 80006f8:	1a9b      	subs	r3, r3, r2
 80006fa:	2200      	movs	r2, #0
 80006fc:	9100      	str	r1, [sp, #0]
 80006fe:	9201      	str	r2, [sp, #4]
 8000700:	2201      	movs	r2, #1
 8000702:	40da      	lsrs	r2, r3
 8000704:	9201      	str	r2, [sp, #4]
 8000706:	e786      	b.n	8000616 <__udivmoddi4+0x6e>
 8000708:	4642      	mov	r2, r8
 800070a:	2320      	movs	r3, #32
 800070c:	1a9b      	subs	r3, r3, r2
 800070e:	002a      	movs	r2, r5
 8000710:	4646      	mov	r6, r8
 8000712:	409a      	lsls	r2, r3
 8000714:	0023      	movs	r3, r4
 8000716:	40f3      	lsrs	r3, r6
 8000718:	4644      	mov	r4, r8
 800071a:	4313      	orrs	r3, r2
 800071c:	002a      	movs	r2, r5
 800071e:	40e2      	lsrs	r2, r4
 8000720:	001c      	movs	r4, r3
 8000722:	465b      	mov	r3, fp
 8000724:	0015      	movs	r5, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	dad4      	bge.n	80006d4 <__udivmoddi4+0x12c>
 800072a:	4642      	mov	r2, r8
 800072c:	002f      	movs	r7, r5
 800072e:	2320      	movs	r3, #32
 8000730:	0026      	movs	r6, r4
 8000732:	4097      	lsls	r7, r2
 8000734:	1a9b      	subs	r3, r3, r2
 8000736:	40de      	lsrs	r6, r3
 8000738:	003b      	movs	r3, r7
 800073a:	4333      	orrs	r3, r6
 800073c:	e7cd      	b.n	80006da <__udivmoddi4+0x132>
 800073e:	46c0      	nop			; (mov r8, r8)

08000740 <__aeabi_fadd>:
 8000740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000742:	46c6      	mov	lr, r8
 8000744:	0243      	lsls	r3, r0, #9
 8000746:	0a5b      	lsrs	r3, r3, #9
 8000748:	024e      	lsls	r6, r1, #9
 800074a:	0045      	lsls	r5, r0, #1
 800074c:	004f      	lsls	r7, r1, #1
 800074e:	00da      	lsls	r2, r3, #3
 8000750:	0fc4      	lsrs	r4, r0, #31
 8000752:	469c      	mov	ip, r3
 8000754:	0a70      	lsrs	r0, r6, #9
 8000756:	4690      	mov	r8, r2
 8000758:	b500      	push	{lr}
 800075a:	0e2d      	lsrs	r5, r5, #24
 800075c:	0e3f      	lsrs	r7, r7, #24
 800075e:	0fc9      	lsrs	r1, r1, #31
 8000760:	09b6      	lsrs	r6, r6, #6
 8000762:	428c      	cmp	r4, r1
 8000764:	d04b      	beq.n	80007fe <__aeabi_fadd+0xbe>
 8000766:	1bea      	subs	r2, r5, r7
 8000768:	2a00      	cmp	r2, #0
 800076a:	dd36      	ble.n	80007da <__aeabi_fadd+0x9a>
 800076c:	2f00      	cmp	r7, #0
 800076e:	d061      	beq.n	8000834 <__aeabi_fadd+0xf4>
 8000770:	2dff      	cmp	r5, #255	; 0xff
 8000772:	d100      	bne.n	8000776 <__aeabi_fadd+0x36>
 8000774:	e0ad      	b.n	80008d2 <__aeabi_fadd+0x192>
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	04db      	lsls	r3, r3, #19
 800077a:	431e      	orrs	r6, r3
 800077c:	2a1b      	cmp	r2, #27
 800077e:	dc00      	bgt.n	8000782 <__aeabi_fadd+0x42>
 8000780:	e0d3      	b.n	800092a <__aeabi_fadd+0x1ea>
 8000782:	2001      	movs	r0, #1
 8000784:	4643      	mov	r3, r8
 8000786:	1a18      	subs	r0, r3, r0
 8000788:	0143      	lsls	r3, r0, #5
 800078a:	d400      	bmi.n	800078e <__aeabi_fadd+0x4e>
 800078c:	e08c      	b.n	80008a8 <__aeabi_fadd+0x168>
 800078e:	0180      	lsls	r0, r0, #6
 8000790:	0987      	lsrs	r7, r0, #6
 8000792:	0038      	movs	r0, r7
 8000794:	f002 fd1c 	bl	80031d0 <__clzsi2>
 8000798:	3805      	subs	r0, #5
 800079a:	4087      	lsls	r7, r0
 800079c:	4285      	cmp	r5, r0
 800079e:	dc00      	bgt.n	80007a2 <__aeabi_fadd+0x62>
 80007a0:	e0b6      	b.n	8000910 <__aeabi_fadd+0x1d0>
 80007a2:	1a2d      	subs	r5, r5, r0
 80007a4:	48b3      	ldr	r0, [pc, #716]	; (8000a74 <__aeabi_fadd+0x334>)
 80007a6:	4038      	ands	r0, r7
 80007a8:	0743      	lsls	r3, r0, #29
 80007aa:	d004      	beq.n	80007b6 <__aeabi_fadd+0x76>
 80007ac:	230f      	movs	r3, #15
 80007ae:	4003      	ands	r3, r0
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d000      	beq.n	80007b6 <__aeabi_fadd+0x76>
 80007b4:	3004      	adds	r0, #4
 80007b6:	0143      	lsls	r3, r0, #5
 80007b8:	d400      	bmi.n	80007bc <__aeabi_fadd+0x7c>
 80007ba:	e078      	b.n	80008ae <__aeabi_fadd+0x16e>
 80007bc:	1c6a      	adds	r2, r5, #1
 80007be:	2dfe      	cmp	r5, #254	; 0xfe
 80007c0:	d065      	beq.n	800088e <__aeabi_fadd+0x14e>
 80007c2:	0180      	lsls	r0, r0, #6
 80007c4:	0a43      	lsrs	r3, r0, #9
 80007c6:	469c      	mov	ip, r3
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	4663      	mov	r3, ip
 80007cc:	05d0      	lsls	r0, r2, #23
 80007ce:	4318      	orrs	r0, r3
 80007d0:	07e4      	lsls	r4, r4, #31
 80007d2:	4320      	orrs	r0, r4
 80007d4:	bc80      	pop	{r7}
 80007d6:	46b8      	mov	r8, r7
 80007d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007da:	2a00      	cmp	r2, #0
 80007dc:	d035      	beq.n	800084a <__aeabi_fadd+0x10a>
 80007de:	1b7a      	subs	r2, r7, r5
 80007e0:	2d00      	cmp	r5, #0
 80007e2:	d000      	beq.n	80007e6 <__aeabi_fadd+0xa6>
 80007e4:	e0af      	b.n	8000946 <__aeabi_fadd+0x206>
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0xae>
 80007ec:	e0a7      	b.n	800093e <__aeabi_fadd+0x1fe>
 80007ee:	1e53      	subs	r3, r2, #1
 80007f0:	2a01      	cmp	r2, #1
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fadd+0xb6>
 80007f4:	e12f      	b.n	8000a56 <__aeabi_fadd+0x316>
 80007f6:	2aff      	cmp	r2, #255	; 0xff
 80007f8:	d069      	beq.n	80008ce <__aeabi_fadd+0x18e>
 80007fa:	001a      	movs	r2, r3
 80007fc:	e0aa      	b.n	8000954 <__aeabi_fadd+0x214>
 80007fe:	1be9      	subs	r1, r5, r7
 8000800:	2900      	cmp	r1, #0
 8000802:	dd70      	ble.n	80008e6 <__aeabi_fadd+0x1a6>
 8000804:	2f00      	cmp	r7, #0
 8000806:	d037      	beq.n	8000878 <__aeabi_fadd+0x138>
 8000808:	2dff      	cmp	r5, #255	; 0xff
 800080a:	d062      	beq.n	80008d2 <__aeabi_fadd+0x192>
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	04db      	lsls	r3, r3, #19
 8000810:	431e      	orrs	r6, r3
 8000812:	291b      	cmp	r1, #27
 8000814:	dc00      	bgt.n	8000818 <__aeabi_fadd+0xd8>
 8000816:	e0b0      	b.n	800097a <__aeabi_fadd+0x23a>
 8000818:	2001      	movs	r0, #1
 800081a:	4440      	add	r0, r8
 800081c:	0143      	lsls	r3, r0, #5
 800081e:	d543      	bpl.n	80008a8 <__aeabi_fadd+0x168>
 8000820:	3501      	adds	r5, #1
 8000822:	2dff      	cmp	r5, #255	; 0xff
 8000824:	d033      	beq.n	800088e <__aeabi_fadd+0x14e>
 8000826:	2301      	movs	r3, #1
 8000828:	4a93      	ldr	r2, [pc, #588]	; (8000a78 <__aeabi_fadd+0x338>)
 800082a:	4003      	ands	r3, r0
 800082c:	0840      	lsrs	r0, r0, #1
 800082e:	4010      	ands	r0, r2
 8000830:	4318      	orrs	r0, r3
 8000832:	e7b9      	b.n	80007a8 <__aeabi_fadd+0x68>
 8000834:	2e00      	cmp	r6, #0
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0xfa>
 8000838:	e083      	b.n	8000942 <__aeabi_fadd+0x202>
 800083a:	1e51      	subs	r1, r2, #1
 800083c:	2a01      	cmp	r2, #1
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x102>
 8000840:	e0d8      	b.n	80009f4 <__aeabi_fadd+0x2b4>
 8000842:	2aff      	cmp	r2, #255	; 0xff
 8000844:	d045      	beq.n	80008d2 <__aeabi_fadd+0x192>
 8000846:	000a      	movs	r2, r1
 8000848:	e798      	b.n	800077c <__aeabi_fadd+0x3c>
 800084a:	27fe      	movs	r7, #254	; 0xfe
 800084c:	1c6a      	adds	r2, r5, #1
 800084e:	4217      	tst	r7, r2
 8000850:	d000      	beq.n	8000854 <__aeabi_fadd+0x114>
 8000852:	e086      	b.n	8000962 <__aeabi_fadd+0x222>
 8000854:	2d00      	cmp	r5, #0
 8000856:	d000      	beq.n	800085a <__aeabi_fadd+0x11a>
 8000858:	e0b7      	b.n	80009ca <__aeabi_fadd+0x28a>
 800085a:	4643      	mov	r3, r8
 800085c:	2b00      	cmp	r3, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_fadd+0x122>
 8000860:	e0f3      	b.n	8000a4a <__aeabi_fadd+0x30a>
 8000862:	2200      	movs	r2, #0
 8000864:	2e00      	cmp	r6, #0
 8000866:	d0b0      	beq.n	80007ca <__aeabi_fadd+0x8a>
 8000868:	1b98      	subs	r0, r3, r6
 800086a:	0143      	lsls	r3, r0, #5
 800086c:	d400      	bmi.n	8000870 <__aeabi_fadd+0x130>
 800086e:	e0fa      	b.n	8000a66 <__aeabi_fadd+0x326>
 8000870:	4643      	mov	r3, r8
 8000872:	000c      	movs	r4, r1
 8000874:	1af0      	subs	r0, r6, r3
 8000876:	e797      	b.n	80007a8 <__aeabi_fadd+0x68>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d100      	bne.n	800087e <__aeabi_fadd+0x13e>
 800087c:	e0c8      	b.n	8000a10 <__aeabi_fadd+0x2d0>
 800087e:	1e4a      	subs	r2, r1, #1
 8000880:	2901      	cmp	r1, #1
 8000882:	d100      	bne.n	8000886 <__aeabi_fadd+0x146>
 8000884:	e0ae      	b.n	80009e4 <__aeabi_fadd+0x2a4>
 8000886:	29ff      	cmp	r1, #255	; 0xff
 8000888:	d023      	beq.n	80008d2 <__aeabi_fadd+0x192>
 800088a:	0011      	movs	r1, r2
 800088c:	e7c1      	b.n	8000812 <__aeabi_fadd+0xd2>
 800088e:	2300      	movs	r3, #0
 8000890:	22ff      	movs	r2, #255	; 0xff
 8000892:	469c      	mov	ip, r3
 8000894:	e799      	b.n	80007ca <__aeabi_fadd+0x8a>
 8000896:	21fe      	movs	r1, #254	; 0xfe
 8000898:	1c6a      	adds	r2, r5, #1
 800089a:	4211      	tst	r1, r2
 800089c:	d077      	beq.n	800098e <__aeabi_fadd+0x24e>
 800089e:	2aff      	cmp	r2, #255	; 0xff
 80008a0:	d0f5      	beq.n	800088e <__aeabi_fadd+0x14e>
 80008a2:	0015      	movs	r5, r2
 80008a4:	4446      	add	r6, r8
 80008a6:	0870      	lsrs	r0, r6, #1
 80008a8:	0743      	lsls	r3, r0, #29
 80008aa:	d000      	beq.n	80008ae <__aeabi_fadd+0x16e>
 80008ac:	e77e      	b.n	80007ac <__aeabi_fadd+0x6c>
 80008ae:	08c3      	lsrs	r3, r0, #3
 80008b0:	2dff      	cmp	r5, #255	; 0xff
 80008b2:	d00e      	beq.n	80008d2 <__aeabi_fadd+0x192>
 80008b4:	025b      	lsls	r3, r3, #9
 80008b6:	0a5b      	lsrs	r3, r3, #9
 80008b8:	469c      	mov	ip, r3
 80008ba:	b2ea      	uxtb	r2, r5
 80008bc:	e785      	b.n	80007ca <__aeabi_fadd+0x8a>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d007      	beq.n	80008d2 <__aeabi_fadd+0x192>
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	03d2      	lsls	r2, r2, #15
 80008c6:	4213      	tst	r3, r2
 80008c8:	d003      	beq.n	80008d2 <__aeabi_fadd+0x192>
 80008ca:	4210      	tst	r0, r2
 80008cc:	d101      	bne.n	80008d2 <__aeabi_fadd+0x192>
 80008ce:	000c      	movs	r4, r1
 80008d0:	0003      	movs	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0db      	beq.n	800088e <__aeabi_fadd+0x14e>
 80008d6:	2080      	movs	r0, #128	; 0x80
 80008d8:	03c0      	lsls	r0, r0, #15
 80008da:	4318      	orrs	r0, r3
 80008dc:	0240      	lsls	r0, r0, #9
 80008de:	0a43      	lsrs	r3, r0, #9
 80008e0:	469c      	mov	ip, r3
 80008e2:	22ff      	movs	r2, #255	; 0xff
 80008e4:	e771      	b.n	80007ca <__aeabi_fadd+0x8a>
 80008e6:	2900      	cmp	r1, #0
 80008e8:	d0d5      	beq.n	8000896 <__aeabi_fadd+0x156>
 80008ea:	1b7a      	subs	r2, r7, r5
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	d160      	bne.n	80009b2 <__aeabi_fadd+0x272>
 80008f0:	4643      	mov	r3, r8
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d024      	beq.n	8000940 <__aeabi_fadd+0x200>
 80008f6:	1e53      	subs	r3, r2, #1
 80008f8:	2a01      	cmp	r2, #1
 80008fa:	d073      	beq.n	80009e4 <__aeabi_fadd+0x2a4>
 80008fc:	2aff      	cmp	r2, #255	; 0xff
 80008fe:	d0e7      	beq.n	80008d0 <__aeabi_fadd+0x190>
 8000900:	001a      	movs	r2, r3
 8000902:	2a1b      	cmp	r2, #27
 8000904:	dc00      	bgt.n	8000908 <__aeabi_fadd+0x1c8>
 8000906:	e085      	b.n	8000a14 <__aeabi_fadd+0x2d4>
 8000908:	2001      	movs	r0, #1
 800090a:	003d      	movs	r5, r7
 800090c:	1980      	adds	r0, r0, r6
 800090e:	e785      	b.n	800081c <__aeabi_fadd+0xdc>
 8000910:	2320      	movs	r3, #32
 8000912:	003a      	movs	r2, r7
 8000914:	1b45      	subs	r5, r0, r5
 8000916:	0038      	movs	r0, r7
 8000918:	3501      	adds	r5, #1
 800091a:	40ea      	lsrs	r2, r5
 800091c:	1b5d      	subs	r5, r3, r5
 800091e:	40a8      	lsls	r0, r5
 8000920:	1e43      	subs	r3, r0, #1
 8000922:	4198      	sbcs	r0, r3
 8000924:	2500      	movs	r5, #0
 8000926:	4310      	orrs	r0, r2
 8000928:	e73e      	b.n	80007a8 <__aeabi_fadd+0x68>
 800092a:	2320      	movs	r3, #32
 800092c:	0030      	movs	r0, r6
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	0031      	movs	r1, r6
 8000932:	4098      	lsls	r0, r3
 8000934:	40d1      	lsrs	r1, r2
 8000936:	1e43      	subs	r3, r0, #1
 8000938:	4198      	sbcs	r0, r3
 800093a:	4308      	orrs	r0, r1
 800093c:	e722      	b.n	8000784 <__aeabi_fadd+0x44>
 800093e:	000c      	movs	r4, r1
 8000940:	0003      	movs	r3, r0
 8000942:	0015      	movs	r5, r2
 8000944:	e7b4      	b.n	80008b0 <__aeabi_fadd+0x170>
 8000946:	2fff      	cmp	r7, #255	; 0xff
 8000948:	d0c1      	beq.n	80008ce <__aeabi_fadd+0x18e>
 800094a:	2380      	movs	r3, #128	; 0x80
 800094c:	4640      	mov	r0, r8
 800094e:	04db      	lsls	r3, r3, #19
 8000950:	4318      	orrs	r0, r3
 8000952:	4680      	mov	r8, r0
 8000954:	2a1b      	cmp	r2, #27
 8000956:	dd51      	ble.n	80009fc <__aeabi_fadd+0x2bc>
 8000958:	2001      	movs	r0, #1
 800095a:	000c      	movs	r4, r1
 800095c:	003d      	movs	r5, r7
 800095e:	1a30      	subs	r0, r6, r0
 8000960:	e712      	b.n	8000788 <__aeabi_fadd+0x48>
 8000962:	4643      	mov	r3, r8
 8000964:	1b9f      	subs	r7, r3, r6
 8000966:	017b      	lsls	r3, r7, #5
 8000968:	d42b      	bmi.n	80009c2 <__aeabi_fadd+0x282>
 800096a:	2f00      	cmp	r7, #0
 800096c:	d000      	beq.n	8000970 <__aeabi_fadd+0x230>
 800096e:	e710      	b.n	8000792 <__aeabi_fadd+0x52>
 8000970:	2300      	movs	r3, #0
 8000972:	2400      	movs	r4, #0
 8000974:	2200      	movs	r2, #0
 8000976:	469c      	mov	ip, r3
 8000978:	e727      	b.n	80007ca <__aeabi_fadd+0x8a>
 800097a:	2320      	movs	r3, #32
 800097c:	0032      	movs	r2, r6
 800097e:	0030      	movs	r0, r6
 8000980:	40ca      	lsrs	r2, r1
 8000982:	1a59      	subs	r1, r3, r1
 8000984:	4088      	lsls	r0, r1
 8000986:	1e43      	subs	r3, r0, #1
 8000988:	4198      	sbcs	r0, r3
 800098a:	4310      	orrs	r0, r2
 800098c:	e745      	b.n	800081a <__aeabi_fadd+0xda>
 800098e:	2d00      	cmp	r5, #0
 8000990:	d14a      	bne.n	8000a28 <__aeabi_fadd+0x2e8>
 8000992:	4643      	mov	r3, r8
 8000994:	2b00      	cmp	r3, #0
 8000996:	d063      	beq.n	8000a60 <__aeabi_fadd+0x320>
 8000998:	2200      	movs	r2, #0
 800099a:	2e00      	cmp	r6, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_fadd+0x260>
 800099e:	e714      	b.n	80007ca <__aeabi_fadd+0x8a>
 80009a0:	0030      	movs	r0, r6
 80009a2:	4440      	add	r0, r8
 80009a4:	0143      	lsls	r3, r0, #5
 80009a6:	d400      	bmi.n	80009aa <__aeabi_fadd+0x26a>
 80009a8:	e77e      	b.n	80008a8 <__aeabi_fadd+0x168>
 80009aa:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <__aeabi_fadd+0x334>)
 80009ac:	3501      	adds	r5, #1
 80009ae:	4018      	ands	r0, r3
 80009b0:	e77a      	b.n	80008a8 <__aeabi_fadd+0x168>
 80009b2:	2fff      	cmp	r7, #255	; 0xff
 80009b4:	d08c      	beq.n	80008d0 <__aeabi_fadd+0x190>
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	4641      	mov	r1, r8
 80009ba:	04db      	lsls	r3, r3, #19
 80009bc:	4319      	orrs	r1, r3
 80009be:	4688      	mov	r8, r1
 80009c0:	e79f      	b.n	8000902 <__aeabi_fadd+0x1c2>
 80009c2:	4643      	mov	r3, r8
 80009c4:	000c      	movs	r4, r1
 80009c6:	1af7      	subs	r7, r6, r3
 80009c8:	e6e3      	b.n	8000792 <__aeabi_fadd+0x52>
 80009ca:	4642      	mov	r2, r8
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	d000      	beq.n	80009d2 <__aeabi_fadd+0x292>
 80009d0:	e775      	b.n	80008be <__aeabi_fadd+0x17e>
 80009d2:	2e00      	cmp	r6, #0
 80009d4:	d000      	beq.n	80009d8 <__aeabi_fadd+0x298>
 80009d6:	e77a      	b.n	80008ce <__aeabi_fadd+0x18e>
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	03db      	lsls	r3, r3, #15
 80009dc:	2400      	movs	r4, #0
 80009de:	469c      	mov	ip, r3
 80009e0:	22ff      	movs	r2, #255	; 0xff
 80009e2:	e6f2      	b.n	80007ca <__aeabi_fadd+0x8a>
 80009e4:	0030      	movs	r0, r6
 80009e6:	4440      	add	r0, r8
 80009e8:	2501      	movs	r5, #1
 80009ea:	0143      	lsls	r3, r0, #5
 80009ec:	d400      	bmi.n	80009f0 <__aeabi_fadd+0x2b0>
 80009ee:	e75b      	b.n	80008a8 <__aeabi_fadd+0x168>
 80009f0:	2502      	movs	r5, #2
 80009f2:	e718      	b.n	8000826 <__aeabi_fadd+0xe6>
 80009f4:	4643      	mov	r3, r8
 80009f6:	2501      	movs	r5, #1
 80009f8:	1b98      	subs	r0, r3, r6
 80009fa:	e6c5      	b.n	8000788 <__aeabi_fadd+0x48>
 80009fc:	2320      	movs	r3, #32
 80009fe:	4644      	mov	r4, r8
 8000a00:	4640      	mov	r0, r8
 8000a02:	40d4      	lsrs	r4, r2
 8000a04:	1a9a      	subs	r2, r3, r2
 8000a06:	4090      	lsls	r0, r2
 8000a08:	1e43      	subs	r3, r0, #1
 8000a0a:	4198      	sbcs	r0, r3
 8000a0c:	4320      	orrs	r0, r4
 8000a0e:	e7a4      	b.n	800095a <__aeabi_fadd+0x21a>
 8000a10:	000d      	movs	r5, r1
 8000a12:	e74d      	b.n	80008b0 <__aeabi_fadd+0x170>
 8000a14:	2320      	movs	r3, #32
 8000a16:	4641      	mov	r1, r8
 8000a18:	4640      	mov	r0, r8
 8000a1a:	40d1      	lsrs	r1, r2
 8000a1c:	1a9a      	subs	r2, r3, r2
 8000a1e:	4090      	lsls	r0, r2
 8000a20:	1e43      	subs	r3, r0, #1
 8000a22:	4198      	sbcs	r0, r3
 8000a24:	4308      	orrs	r0, r1
 8000a26:	e770      	b.n	800090a <__aeabi_fadd+0x1ca>
 8000a28:	4642      	mov	r2, r8
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fadd+0x2f0>
 8000a2e:	e74f      	b.n	80008d0 <__aeabi_fadd+0x190>
 8000a30:	2e00      	cmp	r6, #0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_fadd+0x2f6>
 8000a34:	e74d      	b.n	80008d2 <__aeabi_fadd+0x192>
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	03d2      	lsls	r2, r2, #15
 8000a3a:	4213      	tst	r3, r2
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fadd+0x300>
 8000a3e:	e748      	b.n	80008d2 <__aeabi_fadd+0x192>
 8000a40:	4210      	tst	r0, r2
 8000a42:	d000      	beq.n	8000a46 <__aeabi_fadd+0x306>
 8000a44:	e745      	b.n	80008d2 <__aeabi_fadd+0x192>
 8000a46:	0003      	movs	r3, r0
 8000a48:	e743      	b.n	80008d2 <__aeabi_fadd+0x192>
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d090      	beq.n	8000970 <__aeabi_fadd+0x230>
 8000a4e:	000c      	movs	r4, r1
 8000a50:	4684      	mov	ip, r0
 8000a52:	2200      	movs	r2, #0
 8000a54:	e6b9      	b.n	80007ca <__aeabi_fadd+0x8a>
 8000a56:	4643      	mov	r3, r8
 8000a58:	000c      	movs	r4, r1
 8000a5a:	1af0      	subs	r0, r6, r3
 8000a5c:	3501      	adds	r5, #1
 8000a5e:	e693      	b.n	8000788 <__aeabi_fadd+0x48>
 8000a60:	4684      	mov	ip, r0
 8000a62:	2200      	movs	r2, #0
 8000a64:	e6b1      	b.n	80007ca <__aeabi_fadd+0x8a>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d000      	beq.n	8000a6c <__aeabi_fadd+0x32c>
 8000a6a:	e71d      	b.n	80008a8 <__aeabi_fadd+0x168>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2400      	movs	r4, #0
 8000a70:	469c      	mov	ip, r3
 8000a72:	e6aa      	b.n	80007ca <__aeabi_fadd+0x8a>
 8000a74:	fbffffff 	.word	0xfbffffff
 8000a78:	7dffffff 	.word	0x7dffffff

08000a7c <__aeabi_fdiv>:
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	464f      	mov	r7, r9
 8000a80:	4646      	mov	r6, r8
 8000a82:	46d6      	mov	lr, sl
 8000a84:	0245      	lsls	r5, r0, #9
 8000a86:	b5c0      	push	{r6, r7, lr}
 8000a88:	0047      	lsls	r7, r0, #1
 8000a8a:	1c0c      	adds	r4, r1, #0
 8000a8c:	0a6d      	lsrs	r5, r5, #9
 8000a8e:	0e3f      	lsrs	r7, r7, #24
 8000a90:	0fc6      	lsrs	r6, r0, #31
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fdiv+0x1c>
 8000a96:	e070      	b.n	8000b7a <__aeabi_fdiv+0xfe>
 8000a98:	2fff      	cmp	r7, #255	; 0xff
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fdiv+0x22>
 8000a9c:	e075      	b.n	8000b8a <__aeabi_fdiv+0x10e>
 8000a9e:	00eb      	lsls	r3, r5, #3
 8000aa0:	2580      	movs	r5, #128	; 0x80
 8000aa2:	04ed      	lsls	r5, r5, #19
 8000aa4:	431d      	orrs	r5, r3
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	4699      	mov	r9, r3
 8000aaa:	469a      	mov	sl, r3
 8000aac:	3f7f      	subs	r7, #127	; 0x7f
 8000aae:	0260      	lsls	r0, r4, #9
 8000ab0:	0a43      	lsrs	r3, r0, #9
 8000ab2:	4698      	mov	r8, r3
 8000ab4:	0063      	lsls	r3, r4, #1
 8000ab6:	0e1b      	lsrs	r3, r3, #24
 8000ab8:	0fe4      	lsrs	r4, r4, #31
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d04e      	beq.n	8000b5c <__aeabi_fdiv+0xe0>
 8000abe:	2bff      	cmp	r3, #255	; 0xff
 8000ac0:	d046      	beq.n	8000b50 <__aeabi_fdiv+0xd4>
 8000ac2:	4642      	mov	r2, r8
 8000ac4:	00d0      	lsls	r0, r2, #3
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	04d2      	lsls	r2, r2, #19
 8000aca:	4302      	orrs	r2, r0
 8000acc:	4690      	mov	r8, r2
 8000ace:	2200      	movs	r2, #0
 8000ad0:	3b7f      	subs	r3, #127	; 0x7f
 8000ad2:	0031      	movs	r1, r6
 8000ad4:	1aff      	subs	r7, r7, r3
 8000ad6:	464b      	mov	r3, r9
 8000ad8:	4061      	eors	r1, r4
 8000ada:	b2c9      	uxtb	r1, r1
 8000adc:	4313      	orrs	r3, r2
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	d900      	bls.n	8000ae4 <__aeabi_fdiv+0x68>
 8000ae2:	e0b5      	b.n	8000c50 <__aeabi_fdiv+0x1d4>
 8000ae4:	486e      	ldr	r0, [pc, #440]	; (8000ca0 <__aeabi_fdiv+0x224>)
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	58c3      	ldr	r3, [r0, r3]
 8000aea:	469f      	mov	pc, r3
 8000aec:	2300      	movs	r3, #0
 8000aee:	4698      	mov	r8, r3
 8000af0:	0026      	movs	r6, r4
 8000af2:	4645      	mov	r5, r8
 8000af4:	4692      	mov	sl, r2
 8000af6:	4653      	mov	r3, sl
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d100      	bne.n	8000afe <__aeabi_fdiv+0x82>
 8000afc:	e089      	b.n	8000c12 <__aeabi_fdiv+0x196>
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d100      	bne.n	8000b04 <__aeabi_fdiv+0x88>
 8000b02:	e09e      	b.n	8000c42 <__aeabi_fdiv+0x1c6>
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d018      	beq.n	8000b3a <__aeabi_fdiv+0xbe>
 8000b08:	003b      	movs	r3, r7
 8000b0a:	337f      	adds	r3, #127	; 0x7f
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dd69      	ble.n	8000be4 <__aeabi_fdiv+0x168>
 8000b10:	076a      	lsls	r2, r5, #29
 8000b12:	d004      	beq.n	8000b1e <__aeabi_fdiv+0xa2>
 8000b14:	220f      	movs	r2, #15
 8000b16:	402a      	ands	r2, r5
 8000b18:	2a04      	cmp	r2, #4
 8000b1a:	d000      	beq.n	8000b1e <__aeabi_fdiv+0xa2>
 8000b1c:	3504      	adds	r5, #4
 8000b1e:	012a      	lsls	r2, r5, #4
 8000b20:	d503      	bpl.n	8000b2a <__aeabi_fdiv+0xae>
 8000b22:	4b60      	ldr	r3, [pc, #384]	; (8000ca4 <__aeabi_fdiv+0x228>)
 8000b24:	401d      	ands	r5, r3
 8000b26:	003b      	movs	r3, r7
 8000b28:	3380      	adds	r3, #128	; 0x80
 8000b2a:	2bfe      	cmp	r3, #254	; 0xfe
 8000b2c:	dd00      	ble.n	8000b30 <__aeabi_fdiv+0xb4>
 8000b2e:	e070      	b.n	8000c12 <__aeabi_fdiv+0x196>
 8000b30:	01ad      	lsls	r5, r5, #6
 8000b32:	0a6d      	lsrs	r5, r5, #9
 8000b34:	b2d8      	uxtb	r0, r3
 8000b36:	e002      	b.n	8000b3e <__aeabi_fdiv+0xc2>
 8000b38:	000e      	movs	r6, r1
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	2500      	movs	r5, #0
 8000b3e:	05c0      	lsls	r0, r0, #23
 8000b40:	4328      	orrs	r0, r5
 8000b42:	07f6      	lsls	r6, r6, #31
 8000b44:	4330      	orrs	r0, r6
 8000b46:	bce0      	pop	{r5, r6, r7}
 8000b48:	46ba      	mov	sl, r7
 8000b4a:	46b1      	mov	r9, r6
 8000b4c:	46a8      	mov	r8, r5
 8000b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b50:	4643      	mov	r3, r8
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d13f      	bne.n	8000bd6 <__aeabi_fdiv+0x15a>
 8000b56:	2202      	movs	r2, #2
 8000b58:	3fff      	subs	r7, #255	; 0xff
 8000b5a:	e003      	b.n	8000b64 <__aeabi_fdiv+0xe8>
 8000b5c:	4643      	mov	r3, r8
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d12d      	bne.n	8000bbe <__aeabi_fdiv+0x142>
 8000b62:	2201      	movs	r2, #1
 8000b64:	0031      	movs	r1, r6
 8000b66:	464b      	mov	r3, r9
 8000b68:	4061      	eors	r1, r4
 8000b6a:	b2c9      	uxtb	r1, r1
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	d834      	bhi.n	8000bdc <__aeabi_fdiv+0x160>
 8000b72:	484d      	ldr	r0, [pc, #308]	; (8000ca8 <__aeabi_fdiv+0x22c>)
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	58c3      	ldr	r3, [r0, r3]
 8000b78:	469f      	mov	pc, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d113      	bne.n	8000ba6 <__aeabi_fdiv+0x12a>
 8000b7e:	2304      	movs	r3, #4
 8000b80:	4699      	mov	r9, r3
 8000b82:	3b03      	subs	r3, #3
 8000b84:	2700      	movs	r7, #0
 8000b86:	469a      	mov	sl, r3
 8000b88:	e791      	b.n	8000aae <__aeabi_fdiv+0x32>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d105      	bne.n	8000b9a <__aeabi_fdiv+0x11e>
 8000b8e:	2308      	movs	r3, #8
 8000b90:	4699      	mov	r9, r3
 8000b92:	3b06      	subs	r3, #6
 8000b94:	27ff      	movs	r7, #255	; 0xff
 8000b96:	469a      	mov	sl, r3
 8000b98:	e789      	b.n	8000aae <__aeabi_fdiv+0x32>
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	4699      	mov	r9, r3
 8000b9e:	3b09      	subs	r3, #9
 8000ba0:	27ff      	movs	r7, #255	; 0xff
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	e783      	b.n	8000aae <__aeabi_fdiv+0x32>
 8000ba6:	0028      	movs	r0, r5
 8000ba8:	f002 fb12 	bl	80031d0 <__clzsi2>
 8000bac:	2776      	movs	r7, #118	; 0x76
 8000bae:	1f43      	subs	r3, r0, #5
 8000bb0:	409d      	lsls	r5, r3
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	427f      	negs	r7, r7
 8000bb6:	4699      	mov	r9, r3
 8000bb8:	469a      	mov	sl, r3
 8000bba:	1a3f      	subs	r7, r7, r0
 8000bbc:	e777      	b.n	8000aae <__aeabi_fdiv+0x32>
 8000bbe:	4640      	mov	r0, r8
 8000bc0:	f002 fb06 	bl	80031d0 <__clzsi2>
 8000bc4:	4642      	mov	r2, r8
 8000bc6:	1f43      	subs	r3, r0, #5
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	2376      	movs	r3, #118	; 0x76
 8000bcc:	425b      	negs	r3, r3
 8000bce:	4690      	mov	r8, r2
 8000bd0:	1a1b      	subs	r3, r3, r0
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	e77d      	b.n	8000ad2 <__aeabi_fdiv+0x56>
 8000bd6:	23ff      	movs	r3, #255	; 0xff
 8000bd8:	2203      	movs	r2, #3
 8000bda:	e77a      	b.n	8000ad2 <__aeabi_fdiv+0x56>
 8000bdc:	000e      	movs	r6, r1
 8000bde:	20ff      	movs	r0, #255	; 0xff
 8000be0:	2500      	movs	r5, #0
 8000be2:	e7ac      	b.n	8000b3e <__aeabi_fdiv+0xc2>
 8000be4:	2001      	movs	r0, #1
 8000be6:	1ac0      	subs	r0, r0, r3
 8000be8:	281b      	cmp	r0, #27
 8000bea:	dca6      	bgt.n	8000b3a <__aeabi_fdiv+0xbe>
 8000bec:	379e      	adds	r7, #158	; 0x9e
 8000bee:	002a      	movs	r2, r5
 8000bf0:	40bd      	lsls	r5, r7
 8000bf2:	40c2      	lsrs	r2, r0
 8000bf4:	1e6b      	subs	r3, r5, #1
 8000bf6:	419d      	sbcs	r5, r3
 8000bf8:	4315      	orrs	r5, r2
 8000bfa:	076b      	lsls	r3, r5, #29
 8000bfc:	d004      	beq.n	8000c08 <__aeabi_fdiv+0x18c>
 8000bfe:	230f      	movs	r3, #15
 8000c00:	402b      	ands	r3, r5
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d000      	beq.n	8000c08 <__aeabi_fdiv+0x18c>
 8000c06:	3504      	adds	r5, #4
 8000c08:	016b      	lsls	r3, r5, #5
 8000c0a:	d544      	bpl.n	8000c96 <__aeabi_fdiv+0x21a>
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	2500      	movs	r5, #0
 8000c10:	e795      	b.n	8000b3e <__aeabi_fdiv+0xc2>
 8000c12:	20ff      	movs	r0, #255	; 0xff
 8000c14:	2500      	movs	r5, #0
 8000c16:	e792      	b.n	8000b3e <__aeabi_fdiv+0xc2>
 8000c18:	2580      	movs	r5, #128	; 0x80
 8000c1a:	2600      	movs	r6, #0
 8000c1c:	20ff      	movs	r0, #255	; 0xff
 8000c1e:	03ed      	lsls	r5, r5, #15
 8000c20:	e78d      	b.n	8000b3e <__aeabi_fdiv+0xc2>
 8000c22:	2300      	movs	r3, #0
 8000c24:	4698      	mov	r8, r3
 8000c26:	2080      	movs	r0, #128	; 0x80
 8000c28:	03c0      	lsls	r0, r0, #15
 8000c2a:	4205      	tst	r5, r0
 8000c2c:	d009      	beq.n	8000c42 <__aeabi_fdiv+0x1c6>
 8000c2e:	4643      	mov	r3, r8
 8000c30:	4203      	tst	r3, r0
 8000c32:	d106      	bne.n	8000c42 <__aeabi_fdiv+0x1c6>
 8000c34:	4645      	mov	r5, r8
 8000c36:	4305      	orrs	r5, r0
 8000c38:	026d      	lsls	r5, r5, #9
 8000c3a:	0026      	movs	r6, r4
 8000c3c:	20ff      	movs	r0, #255	; 0xff
 8000c3e:	0a6d      	lsrs	r5, r5, #9
 8000c40:	e77d      	b.n	8000b3e <__aeabi_fdiv+0xc2>
 8000c42:	2080      	movs	r0, #128	; 0x80
 8000c44:	03c0      	lsls	r0, r0, #15
 8000c46:	4305      	orrs	r5, r0
 8000c48:	026d      	lsls	r5, r5, #9
 8000c4a:	20ff      	movs	r0, #255	; 0xff
 8000c4c:	0a6d      	lsrs	r5, r5, #9
 8000c4e:	e776      	b.n	8000b3e <__aeabi_fdiv+0xc2>
 8000c50:	4642      	mov	r2, r8
 8000c52:	016b      	lsls	r3, r5, #5
 8000c54:	0150      	lsls	r0, r2, #5
 8000c56:	4283      	cmp	r3, r0
 8000c58:	d219      	bcs.n	8000c8e <__aeabi_fdiv+0x212>
 8000c5a:	221b      	movs	r2, #27
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	3f01      	subs	r7, #1
 8000c60:	2601      	movs	r6, #1
 8000c62:	001c      	movs	r4, r3
 8000c64:	006d      	lsls	r5, r5, #1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	db01      	blt.n	8000c70 <__aeabi_fdiv+0x1f4>
 8000c6c:	4298      	cmp	r0, r3
 8000c6e:	d801      	bhi.n	8000c74 <__aeabi_fdiv+0x1f8>
 8000c70:	1a1b      	subs	r3, r3, r0
 8000c72:	4335      	orrs	r5, r6
 8000c74:	3a01      	subs	r2, #1
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d1f3      	bne.n	8000c62 <__aeabi_fdiv+0x1e6>
 8000c7a:	1e5a      	subs	r2, r3, #1
 8000c7c:	4193      	sbcs	r3, r2
 8000c7e:	431d      	orrs	r5, r3
 8000c80:	003b      	movs	r3, r7
 8000c82:	337f      	adds	r3, #127	; 0x7f
 8000c84:	000e      	movs	r6, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	dd00      	ble.n	8000c8c <__aeabi_fdiv+0x210>
 8000c8a:	e741      	b.n	8000b10 <__aeabi_fdiv+0x94>
 8000c8c:	e7aa      	b.n	8000be4 <__aeabi_fdiv+0x168>
 8000c8e:	221a      	movs	r2, #26
 8000c90:	2501      	movs	r5, #1
 8000c92:	1a1b      	subs	r3, r3, r0
 8000c94:	e7e4      	b.n	8000c60 <__aeabi_fdiv+0x1e4>
 8000c96:	01ad      	lsls	r5, r5, #6
 8000c98:	2000      	movs	r0, #0
 8000c9a:	0a6d      	lsrs	r5, r5, #9
 8000c9c:	e74f      	b.n	8000b3e <__aeabi_fdiv+0xc2>
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	0800e280 	.word	0x0800e280
 8000ca4:	f7ffffff 	.word	0xf7ffffff
 8000ca8:	0800e2c0 	.word	0x0800e2c0

08000cac <__eqsf2>:
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	0042      	lsls	r2, r0, #1
 8000cb0:	0245      	lsls	r5, r0, #9
 8000cb2:	024e      	lsls	r6, r1, #9
 8000cb4:	004c      	lsls	r4, r1, #1
 8000cb6:	0fc3      	lsrs	r3, r0, #31
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	2001      	movs	r0, #1
 8000cbc:	0e12      	lsrs	r2, r2, #24
 8000cbe:	0a76      	lsrs	r6, r6, #9
 8000cc0:	0e24      	lsrs	r4, r4, #24
 8000cc2:	0fc9      	lsrs	r1, r1, #31
 8000cc4:	2aff      	cmp	r2, #255	; 0xff
 8000cc6:	d006      	beq.n	8000cd6 <__eqsf2+0x2a>
 8000cc8:	2cff      	cmp	r4, #255	; 0xff
 8000cca:	d003      	beq.n	8000cd4 <__eqsf2+0x28>
 8000ccc:	42a2      	cmp	r2, r4
 8000cce:	d101      	bne.n	8000cd4 <__eqsf2+0x28>
 8000cd0:	42b5      	cmp	r5, r6
 8000cd2:	d006      	beq.n	8000ce2 <__eqsf2+0x36>
 8000cd4:	bd70      	pop	{r4, r5, r6, pc}
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d1fc      	bne.n	8000cd4 <__eqsf2+0x28>
 8000cda:	2cff      	cmp	r4, #255	; 0xff
 8000cdc:	d1fa      	bne.n	8000cd4 <__eqsf2+0x28>
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d1f8      	bne.n	8000cd4 <__eqsf2+0x28>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d006      	beq.n	8000cf4 <__eqsf2+0x48>
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	d1f3      	bne.n	8000cd4 <__eqsf2+0x28>
 8000cec:	0028      	movs	r0, r5
 8000cee:	1e43      	subs	r3, r0, #1
 8000cf0:	4198      	sbcs	r0, r3
 8000cf2:	e7ef      	b.n	8000cd4 <__eqsf2+0x28>
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	e7ed      	b.n	8000cd4 <__eqsf2+0x28>

08000cf8 <__gesf2>:
 8000cf8:	b570      	push	{r4, r5, r6, lr}
 8000cfa:	0042      	lsls	r2, r0, #1
 8000cfc:	0245      	lsls	r5, r0, #9
 8000cfe:	024e      	lsls	r6, r1, #9
 8000d00:	004c      	lsls	r4, r1, #1
 8000d02:	0fc3      	lsrs	r3, r0, #31
 8000d04:	0a6d      	lsrs	r5, r5, #9
 8000d06:	0e12      	lsrs	r2, r2, #24
 8000d08:	0a76      	lsrs	r6, r6, #9
 8000d0a:	0e24      	lsrs	r4, r4, #24
 8000d0c:	0fc8      	lsrs	r0, r1, #31
 8000d0e:	2aff      	cmp	r2, #255	; 0xff
 8000d10:	d01b      	beq.n	8000d4a <__gesf2+0x52>
 8000d12:	2cff      	cmp	r4, #255	; 0xff
 8000d14:	d00e      	beq.n	8000d34 <__gesf2+0x3c>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	d11b      	bne.n	8000d52 <__gesf2+0x5a>
 8000d1a:	2c00      	cmp	r4, #0
 8000d1c:	d101      	bne.n	8000d22 <__gesf2+0x2a>
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d01c      	beq.n	8000d5c <__gesf2+0x64>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d00c      	beq.n	8000d40 <__gesf2+0x48>
 8000d26:	4283      	cmp	r3, r0
 8000d28:	d01c      	beq.n	8000d64 <__gesf2+0x6c>
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	1e58      	subs	r0, r3, #1
 8000d2e:	4008      	ands	r0, r1
 8000d30:	3801      	subs	r0, #1
 8000d32:	bd70      	pop	{r4, r5, r6, pc}
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d122      	bne.n	8000d7e <__gesf2+0x86>
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d1f4      	bne.n	8000d26 <__gesf2+0x2e>
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d1f2      	bne.n	8000d26 <__gesf2+0x2e>
 8000d40:	2800      	cmp	r0, #0
 8000d42:	d1f6      	bne.n	8000d32 <__gesf2+0x3a>
 8000d44:	2001      	movs	r0, #1
 8000d46:	4240      	negs	r0, r0
 8000d48:	e7f3      	b.n	8000d32 <__gesf2+0x3a>
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d117      	bne.n	8000d7e <__gesf2+0x86>
 8000d4e:	2cff      	cmp	r4, #255	; 0xff
 8000d50:	d0f0      	beq.n	8000d34 <__gesf2+0x3c>
 8000d52:	2c00      	cmp	r4, #0
 8000d54:	d1e7      	bne.n	8000d26 <__gesf2+0x2e>
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d1e5      	bne.n	8000d26 <__gesf2+0x2e>
 8000d5a:	e7e6      	b.n	8000d2a <__gesf2+0x32>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d0e7      	beq.n	8000d32 <__gesf2+0x3a>
 8000d62:	e7e2      	b.n	8000d2a <__gesf2+0x32>
 8000d64:	42a2      	cmp	r2, r4
 8000d66:	dc05      	bgt.n	8000d74 <__gesf2+0x7c>
 8000d68:	dbea      	blt.n	8000d40 <__gesf2+0x48>
 8000d6a:	42b5      	cmp	r5, r6
 8000d6c:	d802      	bhi.n	8000d74 <__gesf2+0x7c>
 8000d6e:	d3e7      	bcc.n	8000d40 <__gesf2+0x48>
 8000d70:	2000      	movs	r0, #0
 8000d72:	e7de      	b.n	8000d32 <__gesf2+0x3a>
 8000d74:	4243      	negs	r3, r0
 8000d76:	4158      	adcs	r0, r3
 8000d78:	0040      	lsls	r0, r0, #1
 8000d7a:	3801      	subs	r0, #1
 8000d7c:	e7d9      	b.n	8000d32 <__gesf2+0x3a>
 8000d7e:	2002      	movs	r0, #2
 8000d80:	4240      	negs	r0, r0
 8000d82:	e7d6      	b.n	8000d32 <__gesf2+0x3a>

08000d84 <__lesf2>:
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	0042      	lsls	r2, r0, #1
 8000d88:	0245      	lsls	r5, r0, #9
 8000d8a:	024e      	lsls	r6, r1, #9
 8000d8c:	004c      	lsls	r4, r1, #1
 8000d8e:	0fc3      	lsrs	r3, r0, #31
 8000d90:	0a6d      	lsrs	r5, r5, #9
 8000d92:	0e12      	lsrs	r2, r2, #24
 8000d94:	0a76      	lsrs	r6, r6, #9
 8000d96:	0e24      	lsrs	r4, r4, #24
 8000d98:	0fc8      	lsrs	r0, r1, #31
 8000d9a:	2aff      	cmp	r2, #255	; 0xff
 8000d9c:	d00b      	beq.n	8000db6 <__lesf2+0x32>
 8000d9e:	2cff      	cmp	r4, #255	; 0xff
 8000da0:	d00d      	beq.n	8000dbe <__lesf2+0x3a>
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	d11f      	bne.n	8000de6 <__lesf2+0x62>
 8000da6:	2c00      	cmp	r4, #0
 8000da8:	d116      	bne.n	8000dd8 <__lesf2+0x54>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d114      	bne.n	8000dd8 <__lesf2+0x54>
 8000dae:	2000      	movs	r0, #0
 8000db0:	2d00      	cmp	r5, #0
 8000db2:	d010      	beq.n	8000dd6 <__lesf2+0x52>
 8000db4:	e009      	b.n	8000dca <__lesf2+0x46>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d10c      	bne.n	8000dd4 <__lesf2+0x50>
 8000dba:	2cff      	cmp	r4, #255	; 0xff
 8000dbc:	d113      	bne.n	8000de6 <__lesf2+0x62>
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d108      	bne.n	8000dd4 <__lesf2+0x50>
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d008      	beq.n	8000dd8 <__lesf2+0x54>
 8000dc6:	4283      	cmp	r3, r0
 8000dc8:	d012      	beq.n	8000df0 <__lesf2+0x6c>
 8000dca:	2102      	movs	r1, #2
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4008      	ands	r0, r1
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e000      	b.n	8000dd6 <__lesf2+0x52>
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 8000dd8:	2d00      	cmp	r5, #0
 8000dda:	d1f4      	bne.n	8000dc6 <__lesf2+0x42>
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d1fa      	bne.n	8000dd6 <__lesf2+0x52>
 8000de0:	2001      	movs	r0, #1
 8000de2:	4240      	negs	r0, r0
 8000de4:	e7f7      	b.n	8000dd6 <__lesf2+0x52>
 8000de6:	2c00      	cmp	r4, #0
 8000de8:	d1ed      	bne.n	8000dc6 <__lesf2+0x42>
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d1eb      	bne.n	8000dc6 <__lesf2+0x42>
 8000dee:	e7ec      	b.n	8000dca <__lesf2+0x46>
 8000df0:	42a2      	cmp	r2, r4
 8000df2:	dc05      	bgt.n	8000e00 <__lesf2+0x7c>
 8000df4:	dbf2      	blt.n	8000ddc <__lesf2+0x58>
 8000df6:	42b5      	cmp	r5, r6
 8000df8:	d802      	bhi.n	8000e00 <__lesf2+0x7c>
 8000dfa:	d3ef      	bcc.n	8000ddc <__lesf2+0x58>
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	e7ea      	b.n	8000dd6 <__lesf2+0x52>
 8000e00:	4243      	negs	r3, r0
 8000e02:	4158      	adcs	r0, r3
 8000e04:	0040      	lsls	r0, r0, #1
 8000e06:	3801      	subs	r0, #1
 8000e08:	e7e5      	b.n	8000dd6 <__lesf2+0x52>
 8000e0a:	46c0      	nop			; (mov r8, r8)

08000e0c <__aeabi_fmul>:
 8000e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0e:	464f      	mov	r7, r9
 8000e10:	4646      	mov	r6, r8
 8000e12:	46d6      	mov	lr, sl
 8000e14:	0244      	lsls	r4, r0, #9
 8000e16:	0045      	lsls	r5, r0, #1
 8000e18:	b5c0      	push	{r6, r7, lr}
 8000e1a:	0a64      	lsrs	r4, r4, #9
 8000e1c:	1c0f      	adds	r7, r1, #0
 8000e1e:	0e2d      	lsrs	r5, r5, #24
 8000e20:	0fc6      	lsrs	r6, r0, #31
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_fmul+0x1c>
 8000e26:	e08d      	b.n	8000f44 <__aeabi_fmul+0x138>
 8000e28:	2dff      	cmp	r5, #255	; 0xff
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_fmul+0x22>
 8000e2c:	e092      	b.n	8000f54 <__aeabi_fmul+0x148>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	2080      	movs	r0, #128	; 0x80
 8000e32:	4699      	mov	r9, r3
 8000e34:	469a      	mov	sl, r3
 8000e36:	00e4      	lsls	r4, r4, #3
 8000e38:	04c0      	lsls	r0, r0, #19
 8000e3a:	4304      	orrs	r4, r0
 8000e3c:	3d7f      	subs	r5, #127	; 0x7f
 8000e3e:	0278      	lsls	r0, r7, #9
 8000e40:	0a43      	lsrs	r3, r0, #9
 8000e42:	4698      	mov	r8, r3
 8000e44:	007b      	lsls	r3, r7, #1
 8000e46:	0e1b      	lsrs	r3, r3, #24
 8000e48:	0fff      	lsrs	r7, r7, #31
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_fmul+0x44>
 8000e4e:	e070      	b.n	8000f32 <__aeabi_fmul+0x126>
 8000e50:	2bff      	cmp	r3, #255	; 0xff
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fmul+0x4a>
 8000e54:	e086      	b.n	8000f64 <__aeabi_fmul+0x158>
 8000e56:	4642      	mov	r2, r8
 8000e58:	00d0      	lsls	r0, r2, #3
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	3b7f      	subs	r3, #127	; 0x7f
 8000e5e:	18ed      	adds	r5, r5, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	04d2      	lsls	r2, r2, #19
 8000e64:	4302      	orrs	r2, r0
 8000e66:	4690      	mov	r8, r2
 8000e68:	469c      	mov	ip, r3
 8000e6a:	0031      	movs	r1, r6
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	4079      	eors	r1, r7
 8000e70:	1c68      	adds	r0, r5, #1
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	d81c      	bhi.n	8000eb0 <__aeabi_fmul+0xa4>
 8000e76:	4a76      	ldr	r2, [pc, #472]	; (8001050 <__aeabi_fmul+0x244>)
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	58d3      	ldr	r3, [r2, r3]
 8000e7c:	469f      	mov	pc, r3
 8000e7e:	0039      	movs	r1, r7
 8000e80:	4644      	mov	r4, r8
 8000e82:	46e2      	mov	sl, ip
 8000e84:	4653      	mov	r3, sl
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d00f      	beq.n	8000eaa <__aeabi_fmul+0x9e>
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fmul+0x84>
 8000e8e:	e0d7      	b.n	8001040 <__aeabi_fmul+0x234>
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d137      	bne.n	8000f04 <__aeabi_fmul+0xf8>
 8000e94:	2000      	movs	r0, #0
 8000e96:	2400      	movs	r4, #0
 8000e98:	05c0      	lsls	r0, r0, #23
 8000e9a:	4320      	orrs	r0, r4
 8000e9c:	07c9      	lsls	r1, r1, #31
 8000e9e:	4308      	orrs	r0, r1
 8000ea0:	bce0      	pop	{r5, r6, r7}
 8000ea2:	46ba      	mov	sl, r7
 8000ea4:	46b1      	mov	r9, r6
 8000ea6:	46a8      	mov	r8, r5
 8000ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eaa:	20ff      	movs	r0, #255	; 0xff
 8000eac:	2400      	movs	r4, #0
 8000eae:	e7f3      	b.n	8000e98 <__aeabi_fmul+0x8c>
 8000eb0:	0c26      	lsrs	r6, r4, #16
 8000eb2:	0424      	lsls	r4, r4, #16
 8000eb4:	0c22      	lsrs	r2, r4, #16
 8000eb6:	4644      	mov	r4, r8
 8000eb8:	0424      	lsls	r4, r4, #16
 8000eba:	0c24      	lsrs	r4, r4, #16
 8000ebc:	4643      	mov	r3, r8
 8000ebe:	0027      	movs	r7, r4
 8000ec0:	0c1b      	lsrs	r3, r3, #16
 8000ec2:	4357      	muls	r7, r2
 8000ec4:	4374      	muls	r4, r6
 8000ec6:	435a      	muls	r2, r3
 8000ec8:	435e      	muls	r6, r3
 8000eca:	1912      	adds	r2, r2, r4
 8000ecc:	0c3b      	lsrs	r3, r7, #16
 8000ece:	189b      	adds	r3, r3, r2
 8000ed0:	429c      	cmp	r4, r3
 8000ed2:	d903      	bls.n	8000edc <__aeabi_fmul+0xd0>
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	0252      	lsls	r2, r2, #9
 8000ed8:	4694      	mov	ip, r2
 8000eda:	4466      	add	r6, ip
 8000edc:	043f      	lsls	r7, r7, #16
 8000ede:	041a      	lsls	r2, r3, #16
 8000ee0:	0c3f      	lsrs	r7, r7, #16
 8000ee2:	19d2      	adds	r2, r2, r7
 8000ee4:	0194      	lsls	r4, r2, #6
 8000ee6:	1e67      	subs	r7, r4, #1
 8000ee8:	41bc      	sbcs	r4, r7
 8000eea:	0c1b      	lsrs	r3, r3, #16
 8000eec:	0e92      	lsrs	r2, r2, #26
 8000eee:	199b      	adds	r3, r3, r6
 8000ef0:	4314      	orrs	r4, r2
 8000ef2:	019b      	lsls	r3, r3, #6
 8000ef4:	431c      	orrs	r4, r3
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	d400      	bmi.n	8000efc <__aeabi_fmul+0xf0>
 8000efa:	e09b      	b.n	8001034 <__aeabi_fmul+0x228>
 8000efc:	2301      	movs	r3, #1
 8000efe:	0862      	lsrs	r2, r4, #1
 8000f00:	401c      	ands	r4, r3
 8000f02:	4314      	orrs	r4, r2
 8000f04:	0002      	movs	r2, r0
 8000f06:	327f      	adds	r2, #127	; 0x7f
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	dd64      	ble.n	8000fd6 <__aeabi_fmul+0x1ca>
 8000f0c:	0763      	lsls	r3, r4, #29
 8000f0e:	d004      	beq.n	8000f1a <__aeabi_fmul+0x10e>
 8000f10:	230f      	movs	r3, #15
 8000f12:	4023      	ands	r3, r4
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d000      	beq.n	8000f1a <__aeabi_fmul+0x10e>
 8000f18:	3404      	adds	r4, #4
 8000f1a:	0123      	lsls	r3, r4, #4
 8000f1c:	d503      	bpl.n	8000f26 <__aeabi_fmul+0x11a>
 8000f1e:	0002      	movs	r2, r0
 8000f20:	4b4c      	ldr	r3, [pc, #304]	; (8001054 <__aeabi_fmul+0x248>)
 8000f22:	3280      	adds	r2, #128	; 0x80
 8000f24:	401c      	ands	r4, r3
 8000f26:	2afe      	cmp	r2, #254	; 0xfe
 8000f28:	dcbf      	bgt.n	8000eaa <__aeabi_fmul+0x9e>
 8000f2a:	01a4      	lsls	r4, r4, #6
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	b2d0      	uxtb	r0, r2
 8000f30:	e7b2      	b.n	8000e98 <__aeabi_fmul+0x8c>
 8000f32:	4643      	mov	r3, r8
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d13d      	bne.n	8000fb4 <__aeabi_fmul+0x1a8>
 8000f38:	464a      	mov	r2, r9
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	4691      	mov	r9, r2
 8000f40:	469c      	mov	ip, r3
 8000f42:	e792      	b.n	8000e6a <__aeabi_fmul+0x5e>
 8000f44:	2c00      	cmp	r4, #0
 8000f46:	d129      	bne.n	8000f9c <__aeabi_fmul+0x190>
 8000f48:	2304      	movs	r3, #4
 8000f4a:	4699      	mov	r9, r3
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	2500      	movs	r5, #0
 8000f50:	469a      	mov	sl, r3
 8000f52:	e774      	b.n	8000e3e <__aeabi_fmul+0x32>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d11b      	bne.n	8000f90 <__aeabi_fmul+0x184>
 8000f58:	2308      	movs	r3, #8
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	3b06      	subs	r3, #6
 8000f5e:	25ff      	movs	r5, #255	; 0xff
 8000f60:	469a      	mov	sl, r3
 8000f62:	e76c      	b.n	8000e3e <__aeabi_fmul+0x32>
 8000f64:	4643      	mov	r3, r8
 8000f66:	35ff      	adds	r5, #255	; 0xff
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10b      	bne.n	8000f84 <__aeabi_fmul+0x178>
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	464a      	mov	r2, r9
 8000f70:	431a      	orrs	r2, r3
 8000f72:	4691      	mov	r9, r2
 8000f74:	469c      	mov	ip, r3
 8000f76:	e778      	b.n	8000e6a <__aeabi_fmul+0x5e>
 8000f78:	4653      	mov	r3, sl
 8000f7a:	0031      	movs	r1, r6
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0x176>
 8000f80:	e783      	b.n	8000e8a <__aeabi_fmul+0x7e>
 8000f82:	e792      	b.n	8000eaa <__aeabi_fmul+0x9e>
 8000f84:	2303      	movs	r3, #3
 8000f86:	464a      	mov	r2, r9
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	4691      	mov	r9, r2
 8000f8c:	469c      	mov	ip, r3
 8000f8e:	e76c      	b.n	8000e6a <__aeabi_fmul+0x5e>
 8000f90:	230c      	movs	r3, #12
 8000f92:	4699      	mov	r9, r3
 8000f94:	3b09      	subs	r3, #9
 8000f96:	25ff      	movs	r5, #255	; 0xff
 8000f98:	469a      	mov	sl, r3
 8000f9a:	e750      	b.n	8000e3e <__aeabi_fmul+0x32>
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f002 f917 	bl	80031d0 <__clzsi2>
 8000fa2:	2576      	movs	r5, #118	; 0x76
 8000fa4:	1f43      	subs	r3, r0, #5
 8000fa6:	409c      	lsls	r4, r3
 8000fa8:	2300      	movs	r3, #0
 8000faa:	426d      	negs	r5, r5
 8000fac:	4699      	mov	r9, r3
 8000fae:	469a      	mov	sl, r3
 8000fb0:	1a2d      	subs	r5, r5, r0
 8000fb2:	e744      	b.n	8000e3e <__aeabi_fmul+0x32>
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	f002 f90b 	bl	80031d0 <__clzsi2>
 8000fba:	4642      	mov	r2, r8
 8000fbc:	1f43      	subs	r3, r0, #5
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	1a2d      	subs	r5, r5, r0
 8000fc4:	4690      	mov	r8, r2
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	3d76      	subs	r5, #118	; 0x76
 8000fca:	e74e      	b.n	8000e6a <__aeabi_fmul+0x5e>
 8000fcc:	2480      	movs	r4, #128	; 0x80
 8000fce:	2100      	movs	r1, #0
 8000fd0:	20ff      	movs	r0, #255	; 0xff
 8000fd2:	03e4      	lsls	r4, r4, #15
 8000fd4:	e760      	b.n	8000e98 <__aeabi_fmul+0x8c>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	2b1b      	cmp	r3, #27
 8000fdc:	dd00      	ble.n	8000fe0 <__aeabi_fmul+0x1d4>
 8000fde:	e759      	b.n	8000e94 <__aeabi_fmul+0x88>
 8000fe0:	0022      	movs	r2, r4
 8000fe2:	309e      	adds	r0, #158	; 0x9e
 8000fe4:	40da      	lsrs	r2, r3
 8000fe6:	4084      	lsls	r4, r0
 8000fe8:	0013      	movs	r3, r2
 8000fea:	1e62      	subs	r2, r4, #1
 8000fec:	4194      	sbcs	r4, r2
 8000fee:	431c      	orrs	r4, r3
 8000ff0:	0763      	lsls	r3, r4, #29
 8000ff2:	d004      	beq.n	8000ffe <__aeabi_fmul+0x1f2>
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	4023      	ands	r3, r4
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_fmul+0x1f2>
 8000ffc:	3404      	adds	r4, #4
 8000ffe:	0163      	lsls	r3, r4, #5
 8001000:	d51a      	bpl.n	8001038 <__aeabi_fmul+0x22c>
 8001002:	2001      	movs	r0, #1
 8001004:	2400      	movs	r4, #0
 8001006:	e747      	b.n	8000e98 <__aeabi_fmul+0x8c>
 8001008:	2080      	movs	r0, #128	; 0x80
 800100a:	03c0      	lsls	r0, r0, #15
 800100c:	4204      	tst	r4, r0
 800100e:	d009      	beq.n	8001024 <__aeabi_fmul+0x218>
 8001010:	4643      	mov	r3, r8
 8001012:	4203      	tst	r3, r0
 8001014:	d106      	bne.n	8001024 <__aeabi_fmul+0x218>
 8001016:	4644      	mov	r4, r8
 8001018:	4304      	orrs	r4, r0
 800101a:	0264      	lsls	r4, r4, #9
 800101c:	0039      	movs	r1, r7
 800101e:	20ff      	movs	r0, #255	; 0xff
 8001020:	0a64      	lsrs	r4, r4, #9
 8001022:	e739      	b.n	8000e98 <__aeabi_fmul+0x8c>
 8001024:	2080      	movs	r0, #128	; 0x80
 8001026:	03c0      	lsls	r0, r0, #15
 8001028:	4304      	orrs	r4, r0
 800102a:	0264      	lsls	r4, r4, #9
 800102c:	0031      	movs	r1, r6
 800102e:	20ff      	movs	r0, #255	; 0xff
 8001030:	0a64      	lsrs	r4, r4, #9
 8001032:	e731      	b.n	8000e98 <__aeabi_fmul+0x8c>
 8001034:	0028      	movs	r0, r5
 8001036:	e765      	b.n	8000f04 <__aeabi_fmul+0xf8>
 8001038:	01a4      	lsls	r4, r4, #6
 800103a:	2000      	movs	r0, #0
 800103c:	0a64      	lsrs	r4, r4, #9
 800103e:	e72b      	b.n	8000e98 <__aeabi_fmul+0x8c>
 8001040:	2080      	movs	r0, #128	; 0x80
 8001042:	03c0      	lsls	r0, r0, #15
 8001044:	4304      	orrs	r4, r0
 8001046:	0264      	lsls	r4, r4, #9
 8001048:	20ff      	movs	r0, #255	; 0xff
 800104a:	0a64      	lsrs	r4, r4, #9
 800104c:	e724      	b.n	8000e98 <__aeabi_fmul+0x8c>
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	0800e300 	.word	0x0800e300
 8001054:	f7ffffff 	.word	0xf7ffffff

08001058 <__aeabi_fsub>:
 8001058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105a:	46ce      	mov	lr, r9
 800105c:	4647      	mov	r7, r8
 800105e:	0243      	lsls	r3, r0, #9
 8001060:	0a5b      	lsrs	r3, r3, #9
 8001062:	024e      	lsls	r6, r1, #9
 8001064:	00da      	lsls	r2, r3, #3
 8001066:	4694      	mov	ip, r2
 8001068:	0a72      	lsrs	r2, r6, #9
 800106a:	4691      	mov	r9, r2
 800106c:	0045      	lsls	r5, r0, #1
 800106e:	004a      	lsls	r2, r1, #1
 8001070:	b580      	push	{r7, lr}
 8001072:	0e2d      	lsrs	r5, r5, #24
 8001074:	001f      	movs	r7, r3
 8001076:	0fc4      	lsrs	r4, r0, #31
 8001078:	0e12      	lsrs	r2, r2, #24
 800107a:	0fc9      	lsrs	r1, r1, #31
 800107c:	09b6      	lsrs	r6, r6, #6
 800107e:	2aff      	cmp	r2, #255	; 0xff
 8001080:	d05b      	beq.n	800113a <__aeabi_fsub+0xe2>
 8001082:	2001      	movs	r0, #1
 8001084:	4041      	eors	r1, r0
 8001086:	428c      	cmp	r4, r1
 8001088:	d039      	beq.n	80010fe <__aeabi_fsub+0xa6>
 800108a:	1aa8      	subs	r0, r5, r2
 800108c:	2800      	cmp	r0, #0
 800108e:	dd5a      	ble.n	8001146 <__aeabi_fsub+0xee>
 8001090:	2a00      	cmp	r2, #0
 8001092:	d06a      	beq.n	800116a <__aeabi_fsub+0x112>
 8001094:	2dff      	cmp	r5, #255	; 0xff
 8001096:	d100      	bne.n	800109a <__aeabi_fsub+0x42>
 8001098:	e0d9      	b.n	800124e <__aeabi_fsub+0x1f6>
 800109a:	2280      	movs	r2, #128	; 0x80
 800109c:	04d2      	lsls	r2, r2, #19
 800109e:	4316      	orrs	r6, r2
 80010a0:	281b      	cmp	r0, #27
 80010a2:	dc00      	bgt.n	80010a6 <__aeabi_fsub+0x4e>
 80010a4:	e0e9      	b.n	800127a <__aeabi_fsub+0x222>
 80010a6:	2001      	movs	r0, #1
 80010a8:	4663      	mov	r3, ip
 80010aa:	1a18      	subs	r0, r3, r0
 80010ac:	0143      	lsls	r3, r0, #5
 80010ae:	d400      	bmi.n	80010b2 <__aeabi_fsub+0x5a>
 80010b0:	e0b4      	b.n	800121c <__aeabi_fsub+0x1c4>
 80010b2:	0180      	lsls	r0, r0, #6
 80010b4:	0987      	lsrs	r7, r0, #6
 80010b6:	0038      	movs	r0, r7
 80010b8:	f002 f88a 	bl	80031d0 <__clzsi2>
 80010bc:	3805      	subs	r0, #5
 80010be:	4087      	lsls	r7, r0
 80010c0:	4285      	cmp	r5, r0
 80010c2:	dc00      	bgt.n	80010c6 <__aeabi_fsub+0x6e>
 80010c4:	e0cc      	b.n	8001260 <__aeabi_fsub+0x208>
 80010c6:	1a2d      	subs	r5, r5, r0
 80010c8:	48b5      	ldr	r0, [pc, #724]	; (80013a0 <__aeabi_fsub+0x348>)
 80010ca:	4038      	ands	r0, r7
 80010cc:	0743      	lsls	r3, r0, #29
 80010ce:	d004      	beq.n	80010da <__aeabi_fsub+0x82>
 80010d0:	230f      	movs	r3, #15
 80010d2:	4003      	ands	r3, r0
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d000      	beq.n	80010da <__aeabi_fsub+0x82>
 80010d8:	3004      	adds	r0, #4
 80010da:	0143      	lsls	r3, r0, #5
 80010dc:	d400      	bmi.n	80010e0 <__aeabi_fsub+0x88>
 80010de:	e0a0      	b.n	8001222 <__aeabi_fsub+0x1ca>
 80010e0:	1c6a      	adds	r2, r5, #1
 80010e2:	2dfe      	cmp	r5, #254	; 0xfe
 80010e4:	d100      	bne.n	80010e8 <__aeabi_fsub+0x90>
 80010e6:	e08d      	b.n	8001204 <__aeabi_fsub+0x1ac>
 80010e8:	0180      	lsls	r0, r0, #6
 80010ea:	0a47      	lsrs	r7, r0, #9
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	05d0      	lsls	r0, r2, #23
 80010f0:	4338      	orrs	r0, r7
 80010f2:	07e4      	lsls	r4, r4, #31
 80010f4:	4320      	orrs	r0, r4
 80010f6:	bcc0      	pop	{r6, r7}
 80010f8:	46b9      	mov	r9, r7
 80010fa:	46b0      	mov	r8, r6
 80010fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010fe:	1aa8      	subs	r0, r5, r2
 8001100:	4680      	mov	r8, r0
 8001102:	2800      	cmp	r0, #0
 8001104:	dd45      	ble.n	8001192 <__aeabi_fsub+0x13a>
 8001106:	2a00      	cmp	r2, #0
 8001108:	d070      	beq.n	80011ec <__aeabi_fsub+0x194>
 800110a:	2dff      	cmp	r5, #255	; 0xff
 800110c:	d100      	bne.n	8001110 <__aeabi_fsub+0xb8>
 800110e:	e09e      	b.n	800124e <__aeabi_fsub+0x1f6>
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	04db      	lsls	r3, r3, #19
 8001114:	431e      	orrs	r6, r3
 8001116:	4643      	mov	r3, r8
 8001118:	2b1b      	cmp	r3, #27
 800111a:	dc00      	bgt.n	800111e <__aeabi_fsub+0xc6>
 800111c:	e0d2      	b.n	80012c4 <__aeabi_fsub+0x26c>
 800111e:	2001      	movs	r0, #1
 8001120:	4460      	add	r0, ip
 8001122:	0143      	lsls	r3, r0, #5
 8001124:	d57a      	bpl.n	800121c <__aeabi_fsub+0x1c4>
 8001126:	3501      	adds	r5, #1
 8001128:	2dff      	cmp	r5, #255	; 0xff
 800112a:	d06b      	beq.n	8001204 <__aeabi_fsub+0x1ac>
 800112c:	2301      	movs	r3, #1
 800112e:	4a9d      	ldr	r2, [pc, #628]	; (80013a4 <__aeabi_fsub+0x34c>)
 8001130:	4003      	ands	r3, r0
 8001132:	0840      	lsrs	r0, r0, #1
 8001134:	4010      	ands	r0, r2
 8001136:	4318      	orrs	r0, r3
 8001138:	e7c8      	b.n	80010cc <__aeabi_fsub+0x74>
 800113a:	2e00      	cmp	r6, #0
 800113c:	d020      	beq.n	8001180 <__aeabi_fsub+0x128>
 800113e:	428c      	cmp	r4, r1
 8001140:	d023      	beq.n	800118a <__aeabi_fsub+0x132>
 8001142:	0028      	movs	r0, r5
 8001144:	38ff      	subs	r0, #255	; 0xff
 8001146:	2800      	cmp	r0, #0
 8001148:	d039      	beq.n	80011be <__aeabi_fsub+0x166>
 800114a:	1b57      	subs	r7, r2, r5
 800114c:	2d00      	cmp	r5, #0
 800114e:	d000      	beq.n	8001152 <__aeabi_fsub+0xfa>
 8001150:	e09d      	b.n	800128e <__aeabi_fsub+0x236>
 8001152:	4663      	mov	r3, ip
 8001154:	2b00      	cmp	r3, #0
 8001156:	d100      	bne.n	800115a <__aeabi_fsub+0x102>
 8001158:	e0db      	b.n	8001312 <__aeabi_fsub+0x2ba>
 800115a:	1e7b      	subs	r3, r7, #1
 800115c:	2f01      	cmp	r7, #1
 800115e:	d100      	bne.n	8001162 <__aeabi_fsub+0x10a>
 8001160:	e10d      	b.n	800137e <__aeabi_fsub+0x326>
 8001162:	2fff      	cmp	r7, #255	; 0xff
 8001164:	d071      	beq.n	800124a <__aeabi_fsub+0x1f2>
 8001166:	001f      	movs	r7, r3
 8001168:	e098      	b.n	800129c <__aeabi_fsub+0x244>
 800116a:	2e00      	cmp	r6, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_fsub+0x118>
 800116e:	e0a7      	b.n	80012c0 <__aeabi_fsub+0x268>
 8001170:	1e42      	subs	r2, r0, #1
 8001172:	2801      	cmp	r0, #1
 8001174:	d100      	bne.n	8001178 <__aeabi_fsub+0x120>
 8001176:	e0e6      	b.n	8001346 <__aeabi_fsub+0x2ee>
 8001178:	28ff      	cmp	r0, #255	; 0xff
 800117a:	d068      	beq.n	800124e <__aeabi_fsub+0x1f6>
 800117c:	0010      	movs	r0, r2
 800117e:	e78f      	b.n	80010a0 <__aeabi_fsub+0x48>
 8001180:	2001      	movs	r0, #1
 8001182:	4041      	eors	r1, r0
 8001184:	42a1      	cmp	r1, r4
 8001186:	d000      	beq.n	800118a <__aeabi_fsub+0x132>
 8001188:	e77f      	b.n	800108a <__aeabi_fsub+0x32>
 800118a:	20ff      	movs	r0, #255	; 0xff
 800118c:	4240      	negs	r0, r0
 800118e:	4680      	mov	r8, r0
 8001190:	44a8      	add	r8, r5
 8001192:	4640      	mov	r0, r8
 8001194:	2800      	cmp	r0, #0
 8001196:	d038      	beq.n	800120a <__aeabi_fsub+0x1b2>
 8001198:	1b51      	subs	r1, r2, r5
 800119a:	2d00      	cmp	r5, #0
 800119c:	d100      	bne.n	80011a0 <__aeabi_fsub+0x148>
 800119e:	e0ae      	b.n	80012fe <__aeabi_fsub+0x2a6>
 80011a0:	2aff      	cmp	r2, #255	; 0xff
 80011a2:	d100      	bne.n	80011a6 <__aeabi_fsub+0x14e>
 80011a4:	e0df      	b.n	8001366 <__aeabi_fsub+0x30e>
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	4660      	mov	r0, ip
 80011aa:	04db      	lsls	r3, r3, #19
 80011ac:	4318      	orrs	r0, r3
 80011ae:	4684      	mov	ip, r0
 80011b0:	291b      	cmp	r1, #27
 80011b2:	dc00      	bgt.n	80011b6 <__aeabi_fsub+0x15e>
 80011b4:	e0d9      	b.n	800136a <__aeabi_fsub+0x312>
 80011b6:	2001      	movs	r0, #1
 80011b8:	0015      	movs	r5, r2
 80011ba:	1980      	adds	r0, r0, r6
 80011bc:	e7b1      	b.n	8001122 <__aeabi_fsub+0xca>
 80011be:	20fe      	movs	r0, #254	; 0xfe
 80011c0:	1c6a      	adds	r2, r5, #1
 80011c2:	4210      	tst	r0, r2
 80011c4:	d171      	bne.n	80012aa <__aeabi_fsub+0x252>
 80011c6:	2d00      	cmp	r5, #0
 80011c8:	d000      	beq.n	80011cc <__aeabi_fsub+0x174>
 80011ca:	e0a6      	b.n	800131a <__aeabi_fsub+0x2c2>
 80011cc:	4663      	mov	r3, ip
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d100      	bne.n	80011d4 <__aeabi_fsub+0x17c>
 80011d2:	e0d9      	b.n	8001388 <__aeabi_fsub+0x330>
 80011d4:	2200      	movs	r2, #0
 80011d6:	2e00      	cmp	r6, #0
 80011d8:	d100      	bne.n	80011dc <__aeabi_fsub+0x184>
 80011da:	e788      	b.n	80010ee <__aeabi_fsub+0x96>
 80011dc:	1b98      	subs	r0, r3, r6
 80011de:	0143      	lsls	r3, r0, #5
 80011e0:	d400      	bmi.n	80011e4 <__aeabi_fsub+0x18c>
 80011e2:	e0e1      	b.n	80013a8 <__aeabi_fsub+0x350>
 80011e4:	4663      	mov	r3, ip
 80011e6:	000c      	movs	r4, r1
 80011e8:	1af0      	subs	r0, r6, r3
 80011ea:	e76f      	b.n	80010cc <__aeabi_fsub+0x74>
 80011ec:	2e00      	cmp	r6, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x19a>
 80011f0:	e0b7      	b.n	8001362 <__aeabi_fsub+0x30a>
 80011f2:	0002      	movs	r2, r0
 80011f4:	3a01      	subs	r2, #1
 80011f6:	2801      	cmp	r0, #1
 80011f8:	d100      	bne.n	80011fc <__aeabi_fsub+0x1a4>
 80011fa:	e09c      	b.n	8001336 <__aeabi_fsub+0x2de>
 80011fc:	28ff      	cmp	r0, #255	; 0xff
 80011fe:	d026      	beq.n	800124e <__aeabi_fsub+0x1f6>
 8001200:	4690      	mov	r8, r2
 8001202:	e788      	b.n	8001116 <__aeabi_fsub+0xbe>
 8001204:	22ff      	movs	r2, #255	; 0xff
 8001206:	2700      	movs	r7, #0
 8001208:	e771      	b.n	80010ee <__aeabi_fsub+0x96>
 800120a:	20fe      	movs	r0, #254	; 0xfe
 800120c:	1c6a      	adds	r2, r5, #1
 800120e:	4210      	tst	r0, r2
 8001210:	d064      	beq.n	80012dc <__aeabi_fsub+0x284>
 8001212:	2aff      	cmp	r2, #255	; 0xff
 8001214:	d0f6      	beq.n	8001204 <__aeabi_fsub+0x1ac>
 8001216:	0015      	movs	r5, r2
 8001218:	4466      	add	r6, ip
 800121a:	0870      	lsrs	r0, r6, #1
 800121c:	0743      	lsls	r3, r0, #29
 800121e:	d000      	beq.n	8001222 <__aeabi_fsub+0x1ca>
 8001220:	e756      	b.n	80010d0 <__aeabi_fsub+0x78>
 8001222:	08c3      	lsrs	r3, r0, #3
 8001224:	2dff      	cmp	r5, #255	; 0xff
 8001226:	d012      	beq.n	800124e <__aeabi_fsub+0x1f6>
 8001228:	025b      	lsls	r3, r3, #9
 800122a:	0a5f      	lsrs	r7, r3, #9
 800122c:	b2ea      	uxtb	r2, r5
 800122e:	e75e      	b.n	80010ee <__aeabi_fsub+0x96>
 8001230:	4662      	mov	r2, ip
 8001232:	2a00      	cmp	r2, #0
 8001234:	d100      	bne.n	8001238 <__aeabi_fsub+0x1e0>
 8001236:	e096      	b.n	8001366 <__aeabi_fsub+0x30e>
 8001238:	2e00      	cmp	r6, #0
 800123a:	d008      	beq.n	800124e <__aeabi_fsub+0x1f6>
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	03d2      	lsls	r2, r2, #15
 8001240:	4213      	tst	r3, r2
 8001242:	d004      	beq.n	800124e <__aeabi_fsub+0x1f6>
 8001244:	4648      	mov	r0, r9
 8001246:	4210      	tst	r0, r2
 8001248:	d101      	bne.n	800124e <__aeabi_fsub+0x1f6>
 800124a:	000c      	movs	r4, r1
 800124c:	464b      	mov	r3, r9
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0d8      	beq.n	8001204 <__aeabi_fsub+0x1ac>
 8001252:	2780      	movs	r7, #128	; 0x80
 8001254:	03ff      	lsls	r7, r7, #15
 8001256:	431f      	orrs	r7, r3
 8001258:	027f      	lsls	r7, r7, #9
 800125a:	22ff      	movs	r2, #255	; 0xff
 800125c:	0a7f      	lsrs	r7, r7, #9
 800125e:	e746      	b.n	80010ee <__aeabi_fsub+0x96>
 8001260:	2320      	movs	r3, #32
 8001262:	003a      	movs	r2, r7
 8001264:	1b45      	subs	r5, r0, r5
 8001266:	0038      	movs	r0, r7
 8001268:	3501      	adds	r5, #1
 800126a:	40ea      	lsrs	r2, r5
 800126c:	1b5d      	subs	r5, r3, r5
 800126e:	40a8      	lsls	r0, r5
 8001270:	1e43      	subs	r3, r0, #1
 8001272:	4198      	sbcs	r0, r3
 8001274:	2500      	movs	r5, #0
 8001276:	4310      	orrs	r0, r2
 8001278:	e728      	b.n	80010cc <__aeabi_fsub+0x74>
 800127a:	2320      	movs	r3, #32
 800127c:	1a1b      	subs	r3, r3, r0
 800127e:	0032      	movs	r2, r6
 8001280:	409e      	lsls	r6, r3
 8001282:	40c2      	lsrs	r2, r0
 8001284:	0030      	movs	r0, r6
 8001286:	1e43      	subs	r3, r0, #1
 8001288:	4198      	sbcs	r0, r3
 800128a:	4310      	orrs	r0, r2
 800128c:	e70c      	b.n	80010a8 <__aeabi_fsub+0x50>
 800128e:	2aff      	cmp	r2, #255	; 0xff
 8001290:	d0db      	beq.n	800124a <__aeabi_fsub+0x1f2>
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	4660      	mov	r0, ip
 8001296:	04db      	lsls	r3, r3, #19
 8001298:	4318      	orrs	r0, r3
 800129a:	4684      	mov	ip, r0
 800129c:	2f1b      	cmp	r7, #27
 800129e:	dd56      	ble.n	800134e <__aeabi_fsub+0x2f6>
 80012a0:	2001      	movs	r0, #1
 80012a2:	000c      	movs	r4, r1
 80012a4:	0015      	movs	r5, r2
 80012a6:	1a30      	subs	r0, r6, r0
 80012a8:	e700      	b.n	80010ac <__aeabi_fsub+0x54>
 80012aa:	4663      	mov	r3, ip
 80012ac:	1b9f      	subs	r7, r3, r6
 80012ae:	017b      	lsls	r3, r7, #5
 80012b0:	d43d      	bmi.n	800132e <__aeabi_fsub+0x2d6>
 80012b2:	2f00      	cmp	r7, #0
 80012b4:	d000      	beq.n	80012b8 <__aeabi_fsub+0x260>
 80012b6:	e6fe      	b.n	80010b6 <__aeabi_fsub+0x5e>
 80012b8:	2400      	movs	r4, #0
 80012ba:	2200      	movs	r2, #0
 80012bc:	2700      	movs	r7, #0
 80012be:	e716      	b.n	80010ee <__aeabi_fsub+0x96>
 80012c0:	0005      	movs	r5, r0
 80012c2:	e7af      	b.n	8001224 <__aeabi_fsub+0x1cc>
 80012c4:	0032      	movs	r2, r6
 80012c6:	4643      	mov	r3, r8
 80012c8:	4641      	mov	r1, r8
 80012ca:	40da      	lsrs	r2, r3
 80012cc:	2320      	movs	r3, #32
 80012ce:	1a5b      	subs	r3, r3, r1
 80012d0:	409e      	lsls	r6, r3
 80012d2:	0030      	movs	r0, r6
 80012d4:	1e43      	subs	r3, r0, #1
 80012d6:	4198      	sbcs	r0, r3
 80012d8:	4310      	orrs	r0, r2
 80012da:	e721      	b.n	8001120 <__aeabi_fsub+0xc8>
 80012dc:	2d00      	cmp	r5, #0
 80012de:	d1a7      	bne.n	8001230 <__aeabi_fsub+0x1d8>
 80012e0:	4663      	mov	r3, ip
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d059      	beq.n	800139a <__aeabi_fsub+0x342>
 80012e6:	2200      	movs	r2, #0
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d100      	bne.n	80012ee <__aeabi_fsub+0x296>
 80012ec:	e6ff      	b.n	80010ee <__aeabi_fsub+0x96>
 80012ee:	0030      	movs	r0, r6
 80012f0:	4460      	add	r0, ip
 80012f2:	0143      	lsls	r3, r0, #5
 80012f4:	d592      	bpl.n	800121c <__aeabi_fsub+0x1c4>
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <__aeabi_fsub+0x348>)
 80012f8:	3501      	adds	r5, #1
 80012fa:	4018      	ands	r0, r3
 80012fc:	e78e      	b.n	800121c <__aeabi_fsub+0x1c4>
 80012fe:	4663      	mov	r3, ip
 8001300:	2b00      	cmp	r3, #0
 8001302:	d047      	beq.n	8001394 <__aeabi_fsub+0x33c>
 8001304:	1e4b      	subs	r3, r1, #1
 8001306:	2901      	cmp	r1, #1
 8001308:	d015      	beq.n	8001336 <__aeabi_fsub+0x2de>
 800130a:	29ff      	cmp	r1, #255	; 0xff
 800130c:	d02b      	beq.n	8001366 <__aeabi_fsub+0x30e>
 800130e:	0019      	movs	r1, r3
 8001310:	e74e      	b.n	80011b0 <__aeabi_fsub+0x158>
 8001312:	000c      	movs	r4, r1
 8001314:	464b      	mov	r3, r9
 8001316:	003d      	movs	r5, r7
 8001318:	e784      	b.n	8001224 <__aeabi_fsub+0x1cc>
 800131a:	4662      	mov	r2, ip
 800131c:	2a00      	cmp	r2, #0
 800131e:	d18b      	bne.n	8001238 <__aeabi_fsub+0x1e0>
 8001320:	2e00      	cmp	r6, #0
 8001322:	d192      	bne.n	800124a <__aeabi_fsub+0x1f2>
 8001324:	2780      	movs	r7, #128	; 0x80
 8001326:	2400      	movs	r4, #0
 8001328:	22ff      	movs	r2, #255	; 0xff
 800132a:	03ff      	lsls	r7, r7, #15
 800132c:	e6df      	b.n	80010ee <__aeabi_fsub+0x96>
 800132e:	4663      	mov	r3, ip
 8001330:	000c      	movs	r4, r1
 8001332:	1af7      	subs	r7, r6, r3
 8001334:	e6bf      	b.n	80010b6 <__aeabi_fsub+0x5e>
 8001336:	0030      	movs	r0, r6
 8001338:	4460      	add	r0, ip
 800133a:	2501      	movs	r5, #1
 800133c:	0143      	lsls	r3, r0, #5
 800133e:	d400      	bmi.n	8001342 <__aeabi_fsub+0x2ea>
 8001340:	e76c      	b.n	800121c <__aeabi_fsub+0x1c4>
 8001342:	2502      	movs	r5, #2
 8001344:	e6f2      	b.n	800112c <__aeabi_fsub+0xd4>
 8001346:	4663      	mov	r3, ip
 8001348:	2501      	movs	r5, #1
 800134a:	1b98      	subs	r0, r3, r6
 800134c:	e6ae      	b.n	80010ac <__aeabi_fsub+0x54>
 800134e:	2320      	movs	r3, #32
 8001350:	4664      	mov	r4, ip
 8001352:	4660      	mov	r0, ip
 8001354:	40fc      	lsrs	r4, r7
 8001356:	1bdf      	subs	r7, r3, r7
 8001358:	40b8      	lsls	r0, r7
 800135a:	1e43      	subs	r3, r0, #1
 800135c:	4198      	sbcs	r0, r3
 800135e:	4320      	orrs	r0, r4
 8001360:	e79f      	b.n	80012a2 <__aeabi_fsub+0x24a>
 8001362:	0005      	movs	r5, r0
 8001364:	e75e      	b.n	8001224 <__aeabi_fsub+0x1cc>
 8001366:	464b      	mov	r3, r9
 8001368:	e771      	b.n	800124e <__aeabi_fsub+0x1f6>
 800136a:	2320      	movs	r3, #32
 800136c:	4665      	mov	r5, ip
 800136e:	4660      	mov	r0, ip
 8001370:	40cd      	lsrs	r5, r1
 8001372:	1a59      	subs	r1, r3, r1
 8001374:	4088      	lsls	r0, r1
 8001376:	1e43      	subs	r3, r0, #1
 8001378:	4198      	sbcs	r0, r3
 800137a:	4328      	orrs	r0, r5
 800137c:	e71c      	b.n	80011b8 <__aeabi_fsub+0x160>
 800137e:	4663      	mov	r3, ip
 8001380:	000c      	movs	r4, r1
 8001382:	2501      	movs	r5, #1
 8001384:	1af0      	subs	r0, r6, r3
 8001386:	e691      	b.n	80010ac <__aeabi_fsub+0x54>
 8001388:	2e00      	cmp	r6, #0
 800138a:	d095      	beq.n	80012b8 <__aeabi_fsub+0x260>
 800138c:	000c      	movs	r4, r1
 800138e:	464f      	mov	r7, r9
 8001390:	2200      	movs	r2, #0
 8001392:	e6ac      	b.n	80010ee <__aeabi_fsub+0x96>
 8001394:	464b      	mov	r3, r9
 8001396:	000d      	movs	r5, r1
 8001398:	e744      	b.n	8001224 <__aeabi_fsub+0x1cc>
 800139a:	464f      	mov	r7, r9
 800139c:	2200      	movs	r2, #0
 800139e:	e6a6      	b.n	80010ee <__aeabi_fsub+0x96>
 80013a0:	fbffffff 	.word	0xfbffffff
 80013a4:	7dffffff 	.word	0x7dffffff
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d000      	beq.n	80013ae <__aeabi_fsub+0x356>
 80013ac:	e736      	b.n	800121c <__aeabi_fsub+0x1c4>
 80013ae:	2400      	movs	r4, #0
 80013b0:	2700      	movs	r7, #0
 80013b2:	e69c      	b.n	80010ee <__aeabi_fsub+0x96>

080013b4 <__aeabi_fcmpun>:
 80013b4:	0243      	lsls	r3, r0, #9
 80013b6:	024a      	lsls	r2, r1, #9
 80013b8:	0040      	lsls	r0, r0, #1
 80013ba:	0049      	lsls	r1, r1, #1
 80013bc:	0a5b      	lsrs	r3, r3, #9
 80013be:	0a52      	lsrs	r2, r2, #9
 80013c0:	0e09      	lsrs	r1, r1, #24
 80013c2:	0e00      	lsrs	r0, r0, #24
 80013c4:	28ff      	cmp	r0, #255	; 0xff
 80013c6:	d006      	beq.n	80013d6 <__aeabi_fcmpun+0x22>
 80013c8:	2000      	movs	r0, #0
 80013ca:	29ff      	cmp	r1, #255	; 0xff
 80013cc:	d102      	bne.n	80013d4 <__aeabi_fcmpun+0x20>
 80013ce:	1e53      	subs	r3, r2, #1
 80013d0:	419a      	sbcs	r2, r3
 80013d2:	0010      	movs	r0, r2
 80013d4:	4770      	bx	lr
 80013d6:	38fe      	subs	r0, #254	; 0xfe
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1fb      	bne.n	80013d4 <__aeabi_fcmpun+0x20>
 80013dc:	e7f4      	b.n	80013c8 <__aeabi_fcmpun+0x14>
 80013de:	46c0      	nop			; (mov r8, r8)

080013e0 <__aeabi_ui2f>:
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	1e05      	subs	r5, r0, #0
 80013e4:	d00e      	beq.n	8001404 <__aeabi_ui2f+0x24>
 80013e6:	f001 fef3 	bl	80031d0 <__clzsi2>
 80013ea:	239e      	movs	r3, #158	; 0x9e
 80013ec:	0004      	movs	r4, r0
 80013ee:	1a1b      	subs	r3, r3, r0
 80013f0:	2b96      	cmp	r3, #150	; 0x96
 80013f2:	dc0c      	bgt.n	800140e <__aeabi_ui2f+0x2e>
 80013f4:	2808      	cmp	r0, #8
 80013f6:	dd01      	ble.n	80013fc <__aeabi_ui2f+0x1c>
 80013f8:	3c08      	subs	r4, #8
 80013fa:	40a5      	lsls	r5, r4
 80013fc:	026d      	lsls	r5, r5, #9
 80013fe:	0a6d      	lsrs	r5, r5, #9
 8001400:	b2d8      	uxtb	r0, r3
 8001402:	e001      	b.n	8001408 <__aeabi_ui2f+0x28>
 8001404:	2000      	movs	r0, #0
 8001406:	2500      	movs	r5, #0
 8001408:	05c0      	lsls	r0, r0, #23
 800140a:	4328      	orrs	r0, r5
 800140c:	bd70      	pop	{r4, r5, r6, pc}
 800140e:	2b99      	cmp	r3, #153	; 0x99
 8001410:	dd09      	ble.n	8001426 <__aeabi_ui2f+0x46>
 8001412:	0002      	movs	r2, r0
 8001414:	0029      	movs	r1, r5
 8001416:	321b      	adds	r2, #27
 8001418:	4091      	lsls	r1, r2
 800141a:	1e4a      	subs	r2, r1, #1
 800141c:	4191      	sbcs	r1, r2
 800141e:	2205      	movs	r2, #5
 8001420:	1a12      	subs	r2, r2, r0
 8001422:	40d5      	lsrs	r5, r2
 8001424:	430d      	orrs	r5, r1
 8001426:	2c05      	cmp	r4, #5
 8001428:	dc12      	bgt.n	8001450 <__aeabi_ui2f+0x70>
 800142a:	0029      	movs	r1, r5
 800142c:	4e0c      	ldr	r6, [pc, #48]	; (8001460 <__aeabi_ui2f+0x80>)
 800142e:	4031      	ands	r1, r6
 8001430:	076a      	lsls	r2, r5, #29
 8001432:	d009      	beq.n	8001448 <__aeabi_ui2f+0x68>
 8001434:	200f      	movs	r0, #15
 8001436:	4028      	ands	r0, r5
 8001438:	2804      	cmp	r0, #4
 800143a:	d005      	beq.n	8001448 <__aeabi_ui2f+0x68>
 800143c:	3104      	adds	r1, #4
 800143e:	014a      	lsls	r2, r1, #5
 8001440:	d502      	bpl.n	8001448 <__aeabi_ui2f+0x68>
 8001442:	239f      	movs	r3, #159	; 0x9f
 8001444:	4031      	ands	r1, r6
 8001446:	1b1b      	subs	r3, r3, r4
 8001448:	0189      	lsls	r1, r1, #6
 800144a:	0a4d      	lsrs	r5, r1, #9
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	e7db      	b.n	8001408 <__aeabi_ui2f+0x28>
 8001450:	1f62      	subs	r2, r4, #5
 8001452:	4095      	lsls	r5, r2
 8001454:	0029      	movs	r1, r5
 8001456:	4e02      	ldr	r6, [pc, #8]	; (8001460 <__aeabi_ui2f+0x80>)
 8001458:	4031      	ands	r1, r6
 800145a:	076a      	lsls	r2, r5, #29
 800145c:	d0f4      	beq.n	8001448 <__aeabi_ui2f+0x68>
 800145e:	e7e9      	b.n	8001434 <__aeabi_ui2f+0x54>
 8001460:	fbffffff 	.word	0xfbffffff

08001464 <__aeabi_dadd>:
 8001464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001466:	464f      	mov	r7, r9
 8001468:	4646      	mov	r6, r8
 800146a:	46d6      	mov	lr, sl
 800146c:	000d      	movs	r5, r1
 800146e:	0004      	movs	r4, r0
 8001470:	b5c0      	push	{r6, r7, lr}
 8001472:	001f      	movs	r7, r3
 8001474:	0011      	movs	r1, r2
 8001476:	0328      	lsls	r0, r5, #12
 8001478:	0f62      	lsrs	r2, r4, #29
 800147a:	0a40      	lsrs	r0, r0, #9
 800147c:	4310      	orrs	r0, r2
 800147e:	007a      	lsls	r2, r7, #1
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	00e3      	lsls	r3, r4, #3
 8001484:	033c      	lsls	r4, r7, #12
 8001486:	4691      	mov	r9, r2
 8001488:	0a64      	lsrs	r4, r4, #9
 800148a:	0ffa      	lsrs	r2, r7, #31
 800148c:	0f4f      	lsrs	r7, r1, #29
 800148e:	006e      	lsls	r6, r5, #1
 8001490:	4327      	orrs	r7, r4
 8001492:	4692      	mov	sl, r2
 8001494:	46b8      	mov	r8, r7
 8001496:	0d76      	lsrs	r6, r6, #21
 8001498:	0fed      	lsrs	r5, r5, #31
 800149a:	00c9      	lsls	r1, r1, #3
 800149c:	4295      	cmp	r5, r2
 800149e:	d100      	bne.n	80014a2 <__aeabi_dadd+0x3e>
 80014a0:	e099      	b.n	80015d6 <__aeabi_dadd+0x172>
 80014a2:	464c      	mov	r4, r9
 80014a4:	1b34      	subs	r4, r6, r4
 80014a6:	46a4      	mov	ip, r4
 80014a8:	2c00      	cmp	r4, #0
 80014aa:	dc00      	bgt.n	80014ae <__aeabi_dadd+0x4a>
 80014ac:	e07c      	b.n	80015a8 <__aeabi_dadd+0x144>
 80014ae:	464a      	mov	r2, r9
 80014b0:	2a00      	cmp	r2, #0
 80014b2:	d100      	bne.n	80014b6 <__aeabi_dadd+0x52>
 80014b4:	e0b8      	b.n	8001628 <__aeabi_dadd+0x1c4>
 80014b6:	4ac5      	ldr	r2, [pc, #788]	; (80017cc <__aeabi_dadd+0x368>)
 80014b8:	4296      	cmp	r6, r2
 80014ba:	d100      	bne.n	80014be <__aeabi_dadd+0x5a>
 80014bc:	e11c      	b.n	80016f8 <__aeabi_dadd+0x294>
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	003c      	movs	r4, r7
 80014c2:	0412      	lsls	r2, r2, #16
 80014c4:	4314      	orrs	r4, r2
 80014c6:	46a0      	mov	r8, r4
 80014c8:	4662      	mov	r2, ip
 80014ca:	2a38      	cmp	r2, #56	; 0x38
 80014cc:	dd00      	ble.n	80014d0 <__aeabi_dadd+0x6c>
 80014ce:	e161      	b.n	8001794 <__aeabi_dadd+0x330>
 80014d0:	2a1f      	cmp	r2, #31
 80014d2:	dd00      	ble.n	80014d6 <__aeabi_dadd+0x72>
 80014d4:	e1cc      	b.n	8001870 <__aeabi_dadd+0x40c>
 80014d6:	4664      	mov	r4, ip
 80014d8:	2220      	movs	r2, #32
 80014da:	1b12      	subs	r2, r2, r4
 80014dc:	4644      	mov	r4, r8
 80014de:	4094      	lsls	r4, r2
 80014e0:	000f      	movs	r7, r1
 80014e2:	46a1      	mov	r9, r4
 80014e4:	4664      	mov	r4, ip
 80014e6:	4091      	lsls	r1, r2
 80014e8:	40e7      	lsrs	r7, r4
 80014ea:	464c      	mov	r4, r9
 80014ec:	1e4a      	subs	r2, r1, #1
 80014ee:	4191      	sbcs	r1, r2
 80014f0:	433c      	orrs	r4, r7
 80014f2:	4642      	mov	r2, r8
 80014f4:	4321      	orrs	r1, r4
 80014f6:	4664      	mov	r4, ip
 80014f8:	40e2      	lsrs	r2, r4
 80014fa:	1a80      	subs	r0, r0, r2
 80014fc:	1a5c      	subs	r4, r3, r1
 80014fe:	42a3      	cmp	r3, r4
 8001500:	419b      	sbcs	r3, r3
 8001502:	425f      	negs	r7, r3
 8001504:	1bc7      	subs	r7, r0, r7
 8001506:	023b      	lsls	r3, r7, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0xa8>
 800150a:	e0d0      	b.n	80016ae <__aeabi_dadd+0x24a>
 800150c:	027f      	lsls	r7, r7, #9
 800150e:	0a7f      	lsrs	r7, r7, #9
 8001510:	2f00      	cmp	r7, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0xb2>
 8001514:	e0ff      	b.n	8001716 <__aeabi_dadd+0x2b2>
 8001516:	0038      	movs	r0, r7
 8001518:	f001 fe5a 	bl	80031d0 <__clzsi2>
 800151c:	0001      	movs	r1, r0
 800151e:	3908      	subs	r1, #8
 8001520:	2320      	movs	r3, #32
 8001522:	0022      	movs	r2, r4
 8001524:	1a5b      	subs	r3, r3, r1
 8001526:	408f      	lsls	r7, r1
 8001528:	40da      	lsrs	r2, r3
 800152a:	408c      	lsls	r4, r1
 800152c:	4317      	orrs	r7, r2
 800152e:	42b1      	cmp	r1, r6
 8001530:	da00      	bge.n	8001534 <__aeabi_dadd+0xd0>
 8001532:	e0ff      	b.n	8001734 <__aeabi_dadd+0x2d0>
 8001534:	1b89      	subs	r1, r1, r6
 8001536:	1c4b      	adds	r3, r1, #1
 8001538:	2b1f      	cmp	r3, #31
 800153a:	dd00      	ble.n	800153e <__aeabi_dadd+0xda>
 800153c:	e0a8      	b.n	8001690 <__aeabi_dadd+0x22c>
 800153e:	2220      	movs	r2, #32
 8001540:	0039      	movs	r1, r7
 8001542:	1ad2      	subs	r2, r2, r3
 8001544:	0020      	movs	r0, r4
 8001546:	4094      	lsls	r4, r2
 8001548:	4091      	lsls	r1, r2
 800154a:	40d8      	lsrs	r0, r3
 800154c:	1e62      	subs	r2, r4, #1
 800154e:	4194      	sbcs	r4, r2
 8001550:	40df      	lsrs	r7, r3
 8001552:	2600      	movs	r6, #0
 8001554:	4301      	orrs	r1, r0
 8001556:	430c      	orrs	r4, r1
 8001558:	0763      	lsls	r3, r4, #29
 800155a:	d009      	beq.n	8001570 <__aeabi_dadd+0x10c>
 800155c:	230f      	movs	r3, #15
 800155e:	4023      	ands	r3, r4
 8001560:	2b04      	cmp	r3, #4
 8001562:	d005      	beq.n	8001570 <__aeabi_dadd+0x10c>
 8001564:	1d23      	adds	r3, r4, #4
 8001566:	42a3      	cmp	r3, r4
 8001568:	41a4      	sbcs	r4, r4
 800156a:	4264      	negs	r4, r4
 800156c:	193f      	adds	r7, r7, r4
 800156e:	001c      	movs	r4, r3
 8001570:	023b      	lsls	r3, r7, #8
 8001572:	d400      	bmi.n	8001576 <__aeabi_dadd+0x112>
 8001574:	e09e      	b.n	80016b4 <__aeabi_dadd+0x250>
 8001576:	4b95      	ldr	r3, [pc, #596]	; (80017cc <__aeabi_dadd+0x368>)
 8001578:	3601      	adds	r6, #1
 800157a:	429e      	cmp	r6, r3
 800157c:	d100      	bne.n	8001580 <__aeabi_dadd+0x11c>
 800157e:	e0b7      	b.n	80016f0 <__aeabi_dadd+0x28c>
 8001580:	4a93      	ldr	r2, [pc, #588]	; (80017d0 <__aeabi_dadd+0x36c>)
 8001582:	08e4      	lsrs	r4, r4, #3
 8001584:	4017      	ands	r7, r2
 8001586:	077b      	lsls	r3, r7, #29
 8001588:	0571      	lsls	r1, r6, #21
 800158a:	027f      	lsls	r7, r7, #9
 800158c:	4323      	orrs	r3, r4
 800158e:	0b3f      	lsrs	r7, r7, #12
 8001590:	0d4a      	lsrs	r2, r1, #21
 8001592:	0512      	lsls	r2, r2, #20
 8001594:	433a      	orrs	r2, r7
 8001596:	07ed      	lsls	r5, r5, #31
 8001598:	432a      	orrs	r2, r5
 800159a:	0018      	movs	r0, r3
 800159c:	0011      	movs	r1, r2
 800159e:	bce0      	pop	{r5, r6, r7}
 80015a0:	46ba      	mov	sl, r7
 80015a2:	46b1      	mov	r9, r6
 80015a4:	46a8      	mov	r8, r5
 80015a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d04b      	beq.n	8001644 <__aeabi_dadd+0x1e0>
 80015ac:	464c      	mov	r4, r9
 80015ae:	1ba4      	subs	r4, r4, r6
 80015b0:	46a4      	mov	ip, r4
 80015b2:	2e00      	cmp	r6, #0
 80015b4:	d000      	beq.n	80015b8 <__aeabi_dadd+0x154>
 80015b6:	e123      	b.n	8001800 <__aeabi_dadd+0x39c>
 80015b8:	0004      	movs	r4, r0
 80015ba:	431c      	orrs	r4, r3
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dadd+0x15c>
 80015be:	e1af      	b.n	8001920 <__aeabi_dadd+0x4bc>
 80015c0:	4662      	mov	r2, ip
 80015c2:	1e54      	subs	r4, r2, #1
 80015c4:	2a01      	cmp	r2, #1
 80015c6:	d100      	bne.n	80015ca <__aeabi_dadd+0x166>
 80015c8:	e215      	b.n	80019f6 <__aeabi_dadd+0x592>
 80015ca:	4d80      	ldr	r5, [pc, #512]	; (80017cc <__aeabi_dadd+0x368>)
 80015cc:	45ac      	cmp	ip, r5
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dadd+0x16e>
 80015d0:	e1c8      	b.n	8001964 <__aeabi_dadd+0x500>
 80015d2:	46a4      	mov	ip, r4
 80015d4:	e11b      	b.n	800180e <__aeabi_dadd+0x3aa>
 80015d6:	464a      	mov	r2, r9
 80015d8:	1ab2      	subs	r2, r6, r2
 80015da:	4694      	mov	ip, r2
 80015dc:	2a00      	cmp	r2, #0
 80015de:	dc00      	bgt.n	80015e2 <__aeabi_dadd+0x17e>
 80015e0:	e0ac      	b.n	800173c <__aeabi_dadd+0x2d8>
 80015e2:	464a      	mov	r2, r9
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d043      	beq.n	8001670 <__aeabi_dadd+0x20c>
 80015e8:	4a78      	ldr	r2, [pc, #480]	; (80017cc <__aeabi_dadd+0x368>)
 80015ea:	4296      	cmp	r6, r2
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dadd+0x18c>
 80015ee:	e1af      	b.n	8001950 <__aeabi_dadd+0x4ec>
 80015f0:	2280      	movs	r2, #128	; 0x80
 80015f2:	003c      	movs	r4, r7
 80015f4:	0412      	lsls	r2, r2, #16
 80015f6:	4314      	orrs	r4, r2
 80015f8:	46a0      	mov	r8, r4
 80015fa:	4662      	mov	r2, ip
 80015fc:	2a38      	cmp	r2, #56	; 0x38
 80015fe:	dc67      	bgt.n	80016d0 <__aeabi_dadd+0x26c>
 8001600:	2a1f      	cmp	r2, #31
 8001602:	dc00      	bgt.n	8001606 <__aeabi_dadd+0x1a2>
 8001604:	e15f      	b.n	80018c6 <__aeabi_dadd+0x462>
 8001606:	4647      	mov	r7, r8
 8001608:	3a20      	subs	r2, #32
 800160a:	40d7      	lsrs	r7, r2
 800160c:	4662      	mov	r2, ip
 800160e:	2a20      	cmp	r2, #32
 8001610:	d005      	beq.n	800161e <__aeabi_dadd+0x1ba>
 8001612:	4664      	mov	r4, ip
 8001614:	2240      	movs	r2, #64	; 0x40
 8001616:	1b12      	subs	r2, r2, r4
 8001618:	4644      	mov	r4, r8
 800161a:	4094      	lsls	r4, r2
 800161c:	4321      	orrs	r1, r4
 800161e:	1e4a      	subs	r2, r1, #1
 8001620:	4191      	sbcs	r1, r2
 8001622:	000c      	movs	r4, r1
 8001624:	433c      	orrs	r4, r7
 8001626:	e057      	b.n	80016d8 <__aeabi_dadd+0x274>
 8001628:	003a      	movs	r2, r7
 800162a:	430a      	orrs	r2, r1
 800162c:	d100      	bne.n	8001630 <__aeabi_dadd+0x1cc>
 800162e:	e105      	b.n	800183c <__aeabi_dadd+0x3d8>
 8001630:	0022      	movs	r2, r4
 8001632:	3a01      	subs	r2, #1
 8001634:	2c01      	cmp	r4, #1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x1d6>
 8001638:	e182      	b.n	8001940 <__aeabi_dadd+0x4dc>
 800163a:	4c64      	ldr	r4, [pc, #400]	; (80017cc <__aeabi_dadd+0x368>)
 800163c:	45a4      	cmp	ip, r4
 800163e:	d05b      	beq.n	80016f8 <__aeabi_dadd+0x294>
 8001640:	4694      	mov	ip, r2
 8001642:	e741      	b.n	80014c8 <__aeabi_dadd+0x64>
 8001644:	4c63      	ldr	r4, [pc, #396]	; (80017d4 <__aeabi_dadd+0x370>)
 8001646:	1c77      	adds	r7, r6, #1
 8001648:	4227      	tst	r7, r4
 800164a:	d000      	beq.n	800164e <__aeabi_dadd+0x1ea>
 800164c:	e0c4      	b.n	80017d8 <__aeabi_dadd+0x374>
 800164e:	0004      	movs	r4, r0
 8001650:	431c      	orrs	r4, r3
 8001652:	2e00      	cmp	r6, #0
 8001654:	d000      	beq.n	8001658 <__aeabi_dadd+0x1f4>
 8001656:	e169      	b.n	800192c <__aeabi_dadd+0x4c8>
 8001658:	2c00      	cmp	r4, #0
 800165a:	d100      	bne.n	800165e <__aeabi_dadd+0x1fa>
 800165c:	e1bf      	b.n	80019de <__aeabi_dadd+0x57a>
 800165e:	4644      	mov	r4, r8
 8001660:	430c      	orrs	r4, r1
 8001662:	d000      	beq.n	8001666 <__aeabi_dadd+0x202>
 8001664:	e1d0      	b.n	8001a08 <__aeabi_dadd+0x5a4>
 8001666:	0742      	lsls	r2, r0, #29
 8001668:	08db      	lsrs	r3, r3, #3
 800166a:	4313      	orrs	r3, r2
 800166c:	08c0      	lsrs	r0, r0, #3
 800166e:	e029      	b.n	80016c4 <__aeabi_dadd+0x260>
 8001670:	003a      	movs	r2, r7
 8001672:	430a      	orrs	r2, r1
 8001674:	d100      	bne.n	8001678 <__aeabi_dadd+0x214>
 8001676:	e170      	b.n	800195a <__aeabi_dadd+0x4f6>
 8001678:	4662      	mov	r2, ip
 800167a:	4664      	mov	r4, ip
 800167c:	3a01      	subs	r2, #1
 800167e:	2c01      	cmp	r4, #1
 8001680:	d100      	bne.n	8001684 <__aeabi_dadd+0x220>
 8001682:	e0e0      	b.n	8001846 <__aeabi_dadd+0x3e2>
 8001684:	4c51      	ldr	r4, [pc, #324]	; (80017cc <__aeabi_dadd+0x368>)
 8001686:	45a4      	cmp	ip, r4
 8001688:	d100      	bne.n	800168c <__aeabi_dadd+0x228>
 800168a:	e161      	b.n	8001950 <__aeabi_dadd+0x4ec>
 800168c:	4694      	mov	ip, r2
 800168e:	e7b4      	b.n	80015fa <__aeabi_dadd+0x196>
 8001690:	003a      	movs	r2, r7
 8001692:	391f      	subs	r1, #31
 8001694:	40ca      	lsrs	r2, r1
 8001696:	0011      	movs	r1, r2
 8001698:	2b20      	cmp	r3, #32
 800169a:	d003      	beq.n	80016a4 <__aeabi_dadd+0x240>
 800169c:	2240      	movs	r2, #64	; 0x40
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	409f      	lsls	r7, r3
 80016a2:	433c      	orrs	r4, r7
 80016a4:	1e63      	subs	r3, r4, #1
 80016a6:	419c      	sbcs	r4, r3
 80016a8:	2700      	movs	r7, #0
 80016aa:	2600      	movs	r6, #0
 80016ac:	430c      	orrs	r4, r1
 80016ae:	0763      	lsls	r3, r4, #29
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dadd+0x250>
 80016b2:	e753      	b.n	800155c <__aeabi_dadd+0xf8>
 80016b4:	46b4      	mov	ip, r6
 80016b6:	08e4      	lsrs	r4, r4, #3
 80016b8:	077b      	lsls	r3, r7, #29
 80016ba:	4323      	orrs	r3, r4
 80016bc:	08f8      	lsrs	r0, r7, #3
 80016be:	4a43      	ldr	r2, [pc, #268]	; (80017cc <__aeabi_dadd+0x368>)
 80016c0:	4594      	cmp	ip, r2
 80016c2:	d01d      	beq.n	8001700 <__aeabi_dadd+0x29c>
 80016c4:	4662      	mov	r2, ip
 80016c6:	0307      	lsls	r7, r0, #12
 80016c8:	0552      	lsls	r2, r2, #21
 80016ca:	0b3f      	lsrs	r7, r7, #12
 80016cc:	0d52      	lsrs	r2, r2, #21
 80016ce:	e760      	b.n	8001592 <__aeabi_dadd+0x12e>
 80016d0:	4644      	mov	r4, r8
 80016d2:	430c      	orrs	r4, r1
 80016d4:	1e62      	subs	r2, r4, #1
 80016d6:	4194      	sbcs	r4, r2
 80016d8:	18e4      	adds	r4, r4, r3
 80016da:	429c      	cmp	r4, r3
 80016dc:	419b      	sbcs	r3, r3
 80016de:	425f      	negs	r7, r3
 80016e0:	183f      	adds	r7, r7, r0
 80016e2:	023b      	lsls	r3, r7, #8
 80016e4:	d5e3      	bpl.n	80016ae <__aeabi_dadd+0x24a>
 80016e6:	4b39      	ldr	r3, [pc, #228]	; (80017cc <__aeabi_dadd+0x368>)
 80016e8:	3601      	adds	r6, #1
 80016ea:	429e      	cmp	r6, r3
 80016ec:	d000      	beq.n	80016f0 <__aeabi_dadd+0x28c>
 80016ee:	e0b5      	b.n	800185c <__aeabi_dadd+0x3f8>
 80016f0:	0032      	movs	r2, r6
 80016f2:	2700      	movs	r7, #0
 80016f4:	2300      	movs	r3, #0
 80016f6:	e74c      	b.n	8001592 <__aeabi_dadd+0x12e>
 80016f8:	0742      	lsls	r2, r0, #29
 80016fa:	08db      	lsrs	r3, r3, #3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	08c0      	lsrs	r0, r0, #3
 8001700:	001a      	movs	r2, r3
 8001702:	4302      	orrs	r2, r0
 8001704:	d100      	bne.n	8001708 <__aeabi_dadd+0x2a4>
 8001706:	e1e1      	b.n	8001acc <__aeabi_dadd+0x668>
 8001708:	2780      	movs	r7, #128	; 0x80
 800170a:	033f      	lsls	r7, r7, #12
 800170c:	4307      	orrs	r7, r0
 800170e:	033f      	lsls	r7, r7, #12
 8001710:	4a2e      	ldr	r2, [pc, #184]	; (80017cc <__aeabi_dadd+0x368>)
 8001712:	0b3f      	lsrs	r7, r7, #12
 8001714:	e73d      	b.n	8001592 <__aeabi_dadd+0x12e>
 8001716:	0020      	movs	r0, r4
 8001718:	f001 fd5a 	bl	80031d0 <__clzsi2>
 800171c:	0001      	movs	r1, r0
 800171e:	3118      	adds	r1, #24
 8001720:	291f      	cmp	r1, #31
 8001722:	dc00      	bgt.n	8001726 <__aeabi_dadd+0x2c2>
 8001724:	e6fc      	b.n	8001520 <__aeabi_dadd+0xbc>
 8001726:	3808      	subs	r0, #8
 8001728:	4084      	lsls	r4, r0
 800172a:	0027      	movs	r7, r4
 800172c:	2400      	movs	r4, #0
 800172e:	42b1      	cmp	r1, r6
 8001730:	db00      	blt.n	8001734 <__aeabi_dadd+0x2d0>
 8001732:	e6ff      	b.n	8001534 <__aeabi_dadd+0xd0>
 8001734:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <__aeabi_dadd+0x36c>)
 8001736:	1a76      	subs	r6, r6, r1
 8001738:	4017      	ands	r7, r2
 800173a:	e70d      	b.n	8001558 <__aeabi_dadd+0xf4>
 800173c:	2a00      	cmp	r2, #0
 800173e:	d02f      	beq.n	80017a0 <__aeabi_dadd+0x33c>
 8001740:	464a      	mov	r2, r9
 8001742:	1b92      	subs	r2, r2, r6
 8001744:	4694      	mov	ip, r2
 8001746:	2e00      	cmp	r6, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x2e8>
 800174a:	e0ad      	b.n	80018a8 <__aeabi_dadd+0x444>
 800174c:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <__aeabi_dadd+0x368>)
 800174e:	4591      	cmp	r9, r2
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x2f0>
 8001752:	e10f      	b.n	8001974 <__aeabi_dadd+0x510>
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	0412      	lsls	r2, r2, #16
 8001758:	4310      	orrs	r0, r2
 800175a:	4662      	mov	r2, ip
 800175c:	2a38      	cmp	r2, #56	; 0x38
 800175e:	dd00      	ble.n	8001762 <__aeabi_dadd+0x2fe>
 8001760:	e10f      	b.n	8001982 <__aeabi_dadd+0x51e>
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x304>
 8001766:	e180      	b.n	8001a6a <__aeabi_dadd+0x606>
 8001768:	4664      	mov	r4, ip
 800176a:	2220      	movs	r2, #32
 800176c:	001e      	movs	r6, r3
 800176e:	1b12      	subs	r2, r2, r4
 8001770:	4667      	mov	r7, ip
 8001772:	0004      	movs	r4, r0
 8001774:	4093      	lsls	r3, r2
 8001776:	4094      	lsls	r4, r2
 8001778:	40fe      	lsrs	r6, r7
 800177a:	1e5a      	subs	r2, r3, #1
 800177c:	4193      	sbcs	r3, r2
 800177e:	40f8      	lsrs	r0, r7
 8001780:	4334      	orrs	r4, r6
 8001782:	431c      	orrs	r4, r3
 8001784:	4480      	add	r8, r0
 8001786:	1864      	adds	r4, r4, r1
 8001788:	428c      	cmp	r4, r1
 800178a:	41bf      	sbcs	r7, r7
 800178c:	427f      	negs	r7, r7
 800178e:	464e      	mov	r6, r9
 8001790:	4447      	add	r7, r8
 8001792:	e7a6      	b.n	80016e2 <__aeabi_dadd+0x27e>
 8001794:	4642      	mov	r2, r8
 8001796:	430a      	orrs	r2, r1
 8001798:	0011      	movs	r1, r2
 800179a:	1e4a      	subs	r2, r1, #1
 800179c:	4191      	sbcs	r1, r2
 800179e:	e6ad      	b.n	80014fc <__aeabi_dadd+0x98>
 80017a0:	4c0c      	ldr	r4, [pc, #48]	; (80017d4 <__aeabi_dadd+0x370>)
 80017a2:	1c72      	adds	r2, r6, #1
 80017a4:	4222      	tst	r2, r4
 80017a6:	d000      	beq.n	80017aa <__aeabi_dadd+0x346>
 80017a8:	e0a1      	b.n	80018ee <__aeabi_dadd+0x48a>
 80017aa:	0002      	movs	r2, r0
 80017ac:	431a      	orrs	r2, r3
 80017ae:	2e00      	cmp	r6, #0
 80017b0:	d000      	beq.n	80017b4 <__aeabi_dadd+0x350>
 80017b2:	e0fa      	b.n	80019aa <__aeabi_dadd+0x546>
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x356>
 80017b8:	e145      	b.n	8001a46 <__aeabi_dadd+0x5e2>
 80017ba:	003a      	movs	r2, r7
 80017bc:	430a      	orrs	r2, r1
 80017be:	d000      	beq.n	80017c2 <__aeabi_dadd+0x35e>
 80017c0:	e146      	b.n	8001a50 <__aeabi_dadd+0x5ec>
 80017c2:	0742      	lsls	r2, r0, #29
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	08c0      	lsrs	r0, r0, #3
 80017ca:	e77b      	b.n	80016c4 <__aeabi_dadd+0x260>
 80017cc:	000007ff 	.word	0x000007ff
 80017d0:	ff7fffff 	.word	0xff7fffff
 80017d4:	000007fe 	.word	0x000007fe
 80017d8:	4647      	mov	r7, r8
 80017da:	1a5c      	subs	r4, r3, r1
 80017dc:	1bc2      	subs	r2, r0, r7
 80017de:	42a3      	cmp	r3, r4
 80017e0:	41bf      	sbcs	r7, r7
 80017e2:	427f      	negs	r7, r7
 80017e4:	46b9      	mov	r9, r7
 80017e6:	0017      	movs	r7, r2
 80017e8:	464a      	mov	r2, r9
 80017ea:	1abf      	subs	r7, r7, r2
 80017ec:	023a      	lsls	r2, r7, #8
 80017ee:	d500      	bpl.n	80017f2 <__aeabi_dadd+0x38e>
 80017f0:	e08d      	b.n	800190e <__aeabi_dadd+0x4aa>
 80017f2:	0023      	movs	r3, r4
 80017f4:	433b      	orrs	r3, r7
 80017f6:	d000      	beq.n	80017fa <__aeabi_dadd+0x396>
 80017f8:	e68a      	b.n	8001510 <__aeabi_dadd+0xac>
 80017fa:	2000      	movs	r0, #0
 80017fc:	2500      	movs	r5, #0
 80017fe:	e761      	b.n	80016c4 <__aeabi_dadd+0x260>
 8001800:	4cb4      	ldr	r4, [pc, #720]	; (8001ad4 <__aeabi_dadd+0x670>)
 8001802:	45a1      	cmp	r9, r4
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x3a4>
 8001806:	e0ad      	b.n	8001964 <__aeabi_dadd+0x500>
 8001808:	2480      	movs	r4, #128	; 0x80
 800180a:	0424      	lsls	r4, r4, #16
 800180c:	4320      	orrs	r0, r4
 800180e:	4664      	mov	r4, ip
 8001810:	2c38      	cmp	r4, #56	; 0x38
 8001812:	dc3d      	bgt.n	8001890 <__aeabi_dadd+0x42c>
 8001814:	4662      	mov	r2, ip
 8001816:	2c1f      	cmp	r4, #31
 8001818:	dd00      	ble.n	800181c <__aeabi_dadd+0x3b8>
 800181a:	e0b7      	b.n	800198c <__aeabi_dadd+0x528>
 800181c:	2520      	movs	r5, #32
 800181e:	001e      	movs	r6, r3
 8001820:	1b2d      	subs	r5, r5, r4
 8001822:	0004      	movs	r4, r0
 8001824:	40ab      	lsls	r3, r5
 8001826:	40ac      	lsls	r4, r5
 8001828:	40d6      	lsrs	r6, r2
 800182a:	40d0      	lsrs	r0, r2
 800182c:	4642      	mov	r2, r8
 800182e:	1e5d      	subs	r5, r3, #1
 8001830:	41ab      	sbcs	r3, r5
 8001832:	4334      	orrs	r4, r6
 8001834:	1a12      	subs	r2, r2, r0
 8001836:	4690      	mov	r8, r2
 8001838:	4323      	orrs	r3, r4
 800183a:	e02c      	b.n	8001896 <__aeabi_dadd+0x432>
 800183c:	0742      	lsls	r2, r0, #29
 800183e:	08db      	lsrs	r3, r3, #3
 8001840:	4313      	orrs	r3, r2
 8001842:	08c0      	lsrs	r0, r0, #3
 8001844:	e73b      	b.n	80016be <__aeabi_dadd+0x25a>
 8001846:	185c      	adds	r4, r3, r1
 8001848:	429c      	cmp	r4, r3
 800184a:	419b      	sbcs	r3, r3
 800184c:	4440      	add	r0, r8
 800184e:	425b      	negs	r3, r3
 8001850:	18c7      	adds	r7, r0, r3
 8001852:	2601      	movs	r6, #1
 8001854:	023b      	lsls	r3, r7, #8
 8001856:	d400      	bmi.n	800185a <__aeabi_dadd+0x3f6>
 8001858:	e729      	b.n	80016ae <__aeabi_dadd+0x24a>
 800185a:	2602      	movs	r6, #2
 800185c:	4a9e      	ldr	r2, [pc, #632]	; (8001ad8 <__aeabi_dadd+0x674>)
 800185e:	0863      	lsrs	r3, r4, #1
 8001860:	4017      	ands	r7, r2
 8001862:	2201      	movs	r2, #1
 8001864:	4014      	ands	r4, r2
 8001866:	431c      	orrs	r4, r3
 8001868:	07fb      	lsls	r3, r7, #31
 800186a:	431c      	orrs	r4, r3
 800186c:	087f      	lsrs	r7, r7, #1
 800186e:	e673      	b.n	8001558 <__aeabi_dadd+0xf4>
 8001870:	4644      	mov	r4, r8
 8001872:	3a20      	subs	r2, #32
 8001874:	40d4      	lsrs	r4, r2
 8001876:	4662      	mov	r2, ip
 8001878:	2a20      	cmp	r2, #32
 800187a:	d005      	beq.n	8001888 <__aeabi_dadd+0x424>
 800187c:	4667      	mov	r7, ip
 800187e:	2240      	movs	r2, #64	; 0x40
 8001880:	1bd2      	subs	r2, r2, r7
 8001882:	4647      	mov	r7, r8
 8001884:	4097      	lsls	r7, r2
 8001886:	4339      	orrs	r1, r7
 8001888:	1e4a      	subs	r2, r1, #1
 800188a:	4191      	sbcs	r1, r2
 800188c:	4321      	orrs	r1, r4
 800188e:	e635      	b.n	80014fc <__aeabi_dadd+0x98>
 8001890:	4303      	orrs	r3, r0
 8001892:	1e58      	subs	r0, r3, #1
 8001894:	4183      	sbcs	r3, r0
 8001896:	1acc      	subs	r4, r1, r3
 8001898:	42a1      	cmp	r1, r4
 800189a:	41bf      	sbcs	r7, r7
 800189c:	4643      	mov	r3, r8
 800189e:	427f      	negs	r7, r7
 80018a0:	4655      	mov	r5, sl
 80018a2:	464e      	mov	r6, r9
 80018a4:	1bdf      	subs	r7, r3, r7
 80018a6:	e62e      	b.n	8001506 <__aeabi_dadd+0xa2>
 80018a8:	0002      	movs	r2, r0
 80018aa:	431a      	orrs	r2, r3
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dadd+0x44c>
 80018ae:	e0bd      	b.n	8001a2c <__aeabi_dadd+0x5c8>
 80018b0:	4662      	mov	r2, ip
 80018b2:	4664      	mov	r4, ip
 80018b4:	3a01      	subs	r2, #1
 80018b6:	2c01      	cmp	r4, #1
 80018b8:	d100      	bne.n	80018bc <__aeabi_dadd+0x458>
 80018ba:	e0e5      	b.n	8001a88 <__aeabi_dadd+0x624>
 80018bc:	4c85      	ldr	r4, [pc, #532]	; (8001ad4 <__aeabi_dadd+0x670>)
 80018be:	45a4      	cmp	ip, r4
 80018c0:	d058      	beq.n	8001974 <__aeabi_dadd+0x510>
 80018c2:	4694      	mov	ip, r2
 80018c4:	e749      	b.n	800175a <__aeabi_dadd+0x2f6>
 80018c6:	4664      	mov	r4, ip
 80018c8:	2220      	movs	r2, #32
 80018ca:	1b12      	subs	r2, r2, r4
 80018cc:	4644      	mov	r4, r8
 80018ce:	4094      	lsls	r4, r2
 80018d0:	000f      	movs	r7, r1
 80018d2:	46a1      	mov	r9, r4
 80018d4:	4664      	mov	r4, ip
 80018d6:	4091      	lsls	r1, r2
 80018d8:	40e7      	lsrs	r7, r4
 80018da:	464c      	mov	r4, r9
 80018dc:	1e4a      	subs	r2, r1, #1
 80018de:	4191      	sbcs	r1, r2
 80018e0:	433c      	orrs	r4, r7
 80018e2:	4642      	mov	r2, r8
 80018e4:	430c      	orrs	r4, r1
 80018e6:	4661      	mov	r1, ip
 80018e8:	40ca      	lsrs	r2, r1
 80018ea:	1880      	adds	r0, r0, r2
 80018ec:	e6f4      	b.n	80016d8 <__aeabi_dadd+0x274>
 80018ee:	4c79      	ldr	r4, [pc, #484]	; (8001ad4 <__aeabi_dadd+0x670>)
 80018f0:	42a2      	cmp	r2, r4
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dadd+0x492>
 80018f4:	e6fd      	b.n	80016f2 <__aeabi_dadd+0x28e>
 80018f6:	1859      	adds	r1, r3, r1
 80018f8:	4299      	cmp	r1, r3
 80018fa:	419b      	sbcs	r3, r3
 80018fc:	4440      	add	r0, r8
 80018fe:	425f      	negs	r7, r3
 8001900:	19c7      	adds	r7, r0, r7
 8001902:	07fc      	lsls	r4, r7, #31
 8001904:	0849      	lsrs	r1, r1, #1
 8001906:	0016      	movs	r6, r2
 8001908:	430c      	orrs	r4, r1
 800190a:	087f      	lsrs	r7, r7, #1
 800190c:	e6cf      	b.n	80016ae <__aeabi_dadd+0x24a>
 800190e:	1acc      	subs	r4, r1, r3
 8001910:	42a1      	cmp	r1, r4
 8001912:	41bf      	sbcs	r7, r7
 8001914:	4643      	mov	r3, r8
 8001916:	427f      	negs	r7, r7
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	4655      	mov	r5, sl
 800191c:	1bc7      	subs	r7, r0, r7
 800191e:	e5f7      	b.n	8001510 <__aeabi_dadd+0xac>
 8001920:	08c9      	lsrs	r1, r1, #3
 8001922:	077b      	lsls	r3, r7, #29
 8001924:	4655      	mov	r5, sl
 8001926:	430b      	orrs	r3, r1
 8001928:	08f8      	lsrs	r0, r7, #3
 800192a:	e6c8      	b.n	80016be <__aeabi_dadd+0x25a>
 800192c:	2c00      	cmp	r4, #0
 800192e:	d000      	beq.n	8001932 <__aeabi_dadd+0x4ce>
 8001930:	e081      	b.n	8001a36 <__aeabi_dadd+0x5d2>
 8001932:	4643      	mov	r3, r8
 8001934:	430b      	orrs	r3, r1
 8001936:	d115      	bne.n	8001964 <__aeabi_dadd+0x500>
 8001938:	2080      	movs	r0, #128	; 0x80
 800193a:	2500      	movs	r5, #0
 800193c:	0300      	lsls	r0, r0, #12
 800193e:	e6e3      	b.n	8001708 <__aeabi_dadd+0x2a4>
 8001940:	1a5c      	subs	r4, r3, r1
 8001942:	42a3      	cmp	r3, r4
 8001944:	419b      	sbcs	r3, r3
 8001946:	1bc7      	subs	r7, r0, r7
 8001948:	425b      	negs	r3, r3
 800194a:	2601      	movs	r6, #1
 800194c:	1aff      	subs	r7, r7, r3
 800194e:	e5da      	b.n	8001506 <__aeabi_dadd+0xa2>
 8001950:	0742      	lsls	r2, r0, #29
 8001952:	08db      	lsrs	r3, r3, #3
 8001954:	4313      	orrs	r3, r2
 8001956:	08c0      	lsrs	r0, r0, #3
 8001958:	e6d2      	b.n	8001700 <__aeabi_dadd+0x29c>
 800195a:	0742      	lsls	r2, r0, #29
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	4313      	orrs	r3, r2
 8001960:	08c0      	lsrs	r0, r0, #3
 8001962:	e6ac      	b.n	80016be <__aeabi_dadd+0x25a>
 8001964:	4643      	mov	r3, r8
 8001966:	4642      	mov	r2, r8
 8001968:	08c9      	lsrs	r1, r1, #3
 800196a:	075b      	lsls	r3, r3, #29
 800196c:	4655      	mov	r5, sl
 800196e:	430b      	orrs	r3, r1
 8001970:	08d0      	lsrs	r0, r2, #3
 8001972:	e6c5      	b.n	8001700 <__aeabi_dadd+0x29c>
 8001974:	4643      	mov	r3, r8
 8001976:	4642      	mov	r2, r8
 8001978:	075b      	lsls	r3, r3, #29
 800197a:	08c9      	lsrs	r1, r1, #3
 800197c:	430b      	orrs	r3, r1
 800197e:	08d0      	lsrs	r0, r2, #3
 8001980:	e6be      	b.n	8001700 <__aeabi_dadd+0x29c>
 8001982:	4303      	orrs	r3, r0
 8001984:	001c      	movs	r4, r3
 8001986:	1e63      	subs	r3, r4, #1
 8001988:	419c      	sbcs	r4, r3
 800198a:	e6fc      	b.n	8001786 <__aeabi_dadd+0x322>
 800198c:	0002      	movs	r2, r0
 800198e:	3c20      	subs	r4, #32
 8001990:	40e2      	lsrs	r2, r4
 8001992:	0014      	movs	r4, r2
 8001994:	4662      	mov	r2, ip
 8001996:	2a20      	cmp	r2, #32
 8001998:	d003      	beq.n	80019a2 <__aeabi_dadd+0x53e>
 800199a:	2540      	movs	r5, #64	; 0x40
 800199c:	1aad      	subs	r5, r5, r2
 800199e:	40a8      	lsls	r0, r5
 80019a0:	4303      	orrs	r3, r0
 80019a2:	1e58      	subs	r0, r3, #1
 80019a4:	4183      	sbcs	r3, r0
 80019a6:	4323      	orrs	r3, r4
 80019a8:	e775      	b.n	8001896 <__aeabi_dadd+0x432>
 80019aa:	2a00      	cmp	r2, #0
 80019ac:	d0e2      	beq.n	8001974 <__aeabi_dadd+0x510>
 80019ae:	003a      	movs	r2, r7
 80019b0:	430a      	orrs	r2, r1
 80019b2:	d0cd      	beq.n	8001950 <__aeabi_dadd+0x4ec>
 80019b4:	0742      	lsls	r2, r0, #29
 80019b6:	08db      	lsrs	r3, r3, #3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	08c0      	lsrs	r0, r0, #3
 80019be:	0312      	lsls	r2, r2, #12
 80019c0:	4210      	tst	r0, r2
 80019c2:	d006      	beq.n	80019d2 <__aeabi_dadd+0x56e>
 80019c4:	08fc      	lsrs	r4, r7, #3
 80019c6:	4214      	tst	r4, r2
 80019c8:	d103      	bne.n	80019d2 <__aeabi_dadd+0x56e>
 80019ca:	0020      	movs	r0, r4
 80019cc:	08cb      	lsrs	r3, r1, #3
 80019ce:	077a      	lsls	r2, r7, #29
 80019d0:	4313      	orrs	r3, r2
 80019d2:	0f5a      	lsrs	r2, r3, #29
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	0752      	lsls	r2, r2, #29
 80019d8:	08db      	lsrs	r3, r3, #3
 80019da:	4313      	orrs	r3, r2
 80019dc:	e690      	b.n	8001700 <__aeabi_dadd+0x29c>
 80019de:	4643      	mov	r3, r8
 80019e0:	430b      	orrs	r3, r1
 80019e2:	d100      	bne.n	80019e6 <__aeabi_dadd+0x582>
 80019e4:	e709      	b.n	80017fa <__aeabi_dadd+0x396>
 80019e6:	4643      	mov	r3, r8
 80019e8:	4642      	mov	r2, r8
 80019ea:	08c9      	lsrs	r1, r1, #3
 80019ec:	075b      	lsls	r3, r3, #29
 80019ee:	4655      	mov	r5, sl
 80019f0:	430b      	orrs	r3, r1
 80019f2:	08d0      	lsrs	r0, r2, #3
 80019f4:	e666      	b.n	80016c4 <__aeabi_dadd+0x260>
 80019f6:	1acc      	subs	r4, r1, r3
 80019f8:	42a1      	cmp	r1, r4
 80019fa:	4189      	sbcs	r1, r1
 80019fc:	1a3f      	subs	r7, r7, r0
 80019fe:	4249      	negs	r1, r1
 8001a00:	4655      	mov	r5, sl
 8001a02:	2601      	movs	r6, #1
 8001a04:	1a7f      	subs	r7, r7, r1
 8001a06:	e57e      	b.n	8001506 <__aeabi_dadd+0xa2>
 8001a08:	4642      	mov	r2, r8
 8001a0a:	1a5c      	subs	r4, r3, r1
 8001a0c:	1a87      	subs	r7, r0, r2
 8001a0e:	42a3      	cmp	r3, r4
 8001a10:	4192      	sbcs	r2, r2
 8001a12:	4252      	negs	r2, r2
 8001a14:	1abf      	subs	r7, r7, r2
 8001a16:	023a      	lsls	r2, r7, #8
 8001a18:	d53d      	bpl.n	8001a96 <__aeabi_dadd+0x632>
 8001a1a:	1acc      	subs	r4, r1, r3
 8001a1c:	42a1      	cmp	r1, r4
 8001a1e:	4189      	sbcs	r1, r1
 8001a20:	4643      	mov	r3, r8
 8001a22:	4249      	negs	r1, r1
 8001a24:	1a1f      	subs	r7, r3, r0
 8001a26:	4655      	mov	r5, sl
 8001a28:	1a7f      	subs	r7, r7, r1
 8001a2a:	e595      	b.n	8001558 <__aeabi_dadd+0xf4>
 8001a2c:	077b      	lsls	r3, r7, #29
 8001a2e:	08c9      	lsrs	r1, r1, #3
 8001a30:	430b      	orrs	r3, r1
 8001a32:	08f8      	lsrs	r0, r7, #3
 8001a34:	e643      	b.n	80016be <__aeabi_dadd+0x25a>
 8001a36:	4644      	mov	r4, r8
 8001a38:	08db      	lsrs	r3, r3, #3
 8001a3a:	430c      	orrs	r4, r1
 8001a3c:	d130      	bne.n	8001aa0 <__aeabi_dadd+0x63c>
 8001a3e:	0742      	lsls	r2, r0, #29
 8001a40:	4313      	orrs	r3, r2
 8001a42:	08c0      	lsrs	r0, r0, #3
 8001a44:	e65c      	b.n	8001700 <__aeabi_dadd+0x29c>
 8001a46:	077b      	lsls	r3, r7, #29
 8001a48:	08c9      	lsrs	r1, r1, #3
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	08f8      	lsrs	r0, r7, #3
 8001a4e:	e639      	b.n	80016c4 <__aeabi_dadd+0x260>
 8001a50:	185c      	adds	r4, r3, r1
 8001a52:	429c      	cmp	r4, r3
 8001a54:	419b      	sbcs	r3, r3
 8001a56:	4440      	add	r0, r8
 8001a58:	425b      	negs	r3, r3
 8001a5a:	18c7      	adds	r7, r0, r3
 8001a5c:	023b      	lsls	r3, r7, #8
 8001a5e:	d400      	bmi.n	8001a62 <__aeabi_dadd+0x5fe>
 8001a60:	e625      	b.n	80016ae <__aeabi_dadd+0x24a>
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <__aeabi_dadd+0x674>)
 8001a64:	2601      	movs	r6, #1
 8001a66:	401f      	ands	r7, r3
 8001a68:	e621      	b.n	80016ae <__aeabi_dadd+0x24a>
 8001a6a:	0004      	movs	r4, r0
 8001a6c:	3a20      	subs	r2, #32
 8001a6e:	40d4      	lsrs	r4, r2
 8001a70:	4662      	mov	r2, ip
 8001a72:	2a20      	cmp	r2, #32
 8001a74:	d004      	beq.n	8001a80 <__aeabi_dadd+0x61c>
 8001a76:	2240      	movs	r2, #64	; 0x40
 8001a78:	4666      	mov	r6, ip
 8001a7a:	1b92      	subs	r2, r2, r6
 8001a7c:	4090      	lsls	r0, r2
 8001a7e:	4303      	orrs	r3, r0
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	4193      	sbcs	r3, r2
 8001a84:	431c      	orrs	r4, r3
 8001a86:	e67e      	b.n	8001786 <__aeabi_dadd+0x322>
 8001a88:	185c      	adds	r4, r3, r1
 8001a8a:	428c      	cmp	r4, r1
 8001a8c:	4189      	sbcs	r1, r1
 8001a8e:	4440      	add	r0, r8
 8001a90:	4249      	negs	r1, r1
 8001a92:	1847      	adds	r7, r0, r1
 8001a94:	e6dd      	b.n	8001852 <__aeabi_dadd+0x3ee>
 8001a96:	0023      	movs	r3, r4
 8001a98:	433b      	orrs	r3, r7
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x63a>
 8001a9c:	e6ad      	b.n	80017fa <__aeabi_dadd+0x396>
 8001a9e:	e606      	b.n	80016ae <__aeabi_dadd+0x24a>
 8001aa0:	0744      	lsls	r4, r0, #29
 8001aa2:	4323      	orrs	r3, r4
 8001aa4:	2480      	movs	r4, #128	; 0x80
 8001aa6:	08c0      	lsrs	r0, r0, #3
 8001aa8:	0324      	lsls	r4, r4, #12
 8001aaa:	4220      	tst	r0, r4
 8001aac:	d008      	beq.n	8001ac0 <__aeabi_dadd+0x65c>
 8001aae:	4642      	mov	r2, r8
 8001ab0:	08d6      	lsrs	r6, r2, #3
 8001ab2:	4226      	tst	r6, r4
 8001ab4:	d104      	bne.n	8001ac0 <__aeabi_dadd+0x65c>
 8001ab6:	4655      	mov	r5, sl
 8001ab8:	0030      	movs	r0, r6
 8001aba:	08cb      	lsrs	r3, r1, #3
 8001abc:	0751      	lsls	r1, r2, #29
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	0f5a      	lsrs	r2, r3, #29
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	0752      	lsls	r2, r2, #29
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	e619      	b.n	8001700 <__aeabi_dadd+0x29c>
 8001acc:	2300      	movs	r3, #0
 8001ace:	4a01      	ldr	r2, [pc, #4]	; (8001ad4 <__aeabi_dadd+0x670>)
 8001ad0:	001f      	movs	r7, r3
 8001ad2:	e55e      	b.n	8001592 <__aeabi_dadd+0x12e>
 8001ad4:	000007ff 	.word	0x000007ff
 8001ad8:	ff7fffff 	.word	0xff7fffff

08001adc <__aeabi_ddiv>:
 8001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ade:	4657      	mov	r7, sl
 8001ae0:	464e      	mov	r6, r9
 8001ae2:	4645      	mov	r5, r8
 8001ae4:	46de      	mov	lr, fp
 8001ae6:	b5e0      	push	{r5, r6, r7, lr}
 8001ae8:	4681      	mov	r9, r0
 8001aea:	0005      	movs	r5, r0
 8001aec:	030c      	lsls	r4, r1, #12
 8001aee:	0048      	lsls	r0, r1, #1
 8001af0:	4692      	mov	sl, r2
 8001af2:	001f      	movs	r7, r3
 8001af4:	b085      	sub	sp, #20
 8001af6:	0b24      	lsrs	r4, r4, #12
 8001af8:	0d40      	lsrs	r0, r0, #21
 8001afa:	0fce      	lsrs	r6, r1, #31
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d100      	bne.n	8001b02 <__aeabi_ddiv+0x26>
 8001b00:	e156      	b.n	8001db0 <__aeabi_ddiv+0x2d4>
 8001b02:	4bd4      	ldr	r3, [pc, #848]	; (8001e54 <__aeabi_ddiv+0x378>)
 8001b04:	4298      	cmp	r0, r3
 8001b06:	d100      	bne.n	8001b0a <__aeabi_ddiv+0x2e>
 8001b08:	e172      	b.n	8001df0 <__aeabi_ddiv+0x314>
 8001b0a:	0f6b      	lsrs	r3, r5, #29
 8001b0c:	00e4      	lsls	r4, r4, #3
 8001b0e:	431c      	orrs	r4, r3
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	4323      	orrs	r3, r4
 8001b16:	4698      	mov	r8, r3
 8001b18:	4bcf      	ldr	r3, [pc, #828]	; (8001e58 <__aeabi_ddiv+0x37c>)
 8001b1a:	00ed      	lsls	r5, r5, #3
 8001b1c:	469b      	mov	fp, r3
 8001b1e:	2300      	movs	r3, #0
 8001b20:	4699      	mov	r9, r3
 8001b22:	4483      	add	fp, r0
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	033c      	lsls	r4, r7, #12
 8001b28:	007b      	lsls	r3, r7, #1
 8001b2a:	4650      	mov	r0, sl
 8001b2c:	0b24      	lsrs	r4, r4, #12
 8001b2e:	0d5b      	lsrs	r3, r3, #21
 8001b30:	0fff      	lsrs	r7, r7, #31
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d100      	bne.n	8001b38 <__aeabi_ddiv+0x5c>
 8001b36:	e11f      	b.n	8001d78 <__aeabi_ddiv+0x29c>
 8001b38:	4ac6      	ldr	r2, [pc, #792]	; (8001e54 <__aeabi_ddiv+0x378>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d100      	bne.n	8001b40 <__aeabi_ddiv+0x64>
 8001b3e:	e162      	b.n	8001e06 <__aeabi_ddiv+0x32a>
 8001b40:	49c5      	ldr	r1, [pc, #788]	; (8001e58 <__aeabi_ddiv+0x37c>)
 8001b42:	0f42      	lsrs	r2, r0, #29
 8001b44:	468c      	mov	ip, r1
 8001b46:	00e4      	lsls	r4, r4, #3
 8001b48:	4659      	mov	r1, fp
 8001b4a:	4314      	orrs	r4, r2
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	4463      	add	r3, ip
 8001b50:	0412      	lsls	r2, r2, #16
 8001b52:	1acb      	subs	r3, r1, r3
 8001b54:	4314      	orrs	r4, r2
 8001b56:	469b      	mov	fp, r3
 8001b58:	00c2      	lsls	r2, r0, #3
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	0033      	movs	r3, r6
 8001b5e:	407b      	eors	r3, r7
 8001b60:	469a      	mov	sl, r3
 8001b62:	464b      	mov	r3, r9
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d827      	bhi.n	8001bb8 <__aeabi_ddiv+0xdc>
 8001b68:	49bc      	ldr	r1, [pc, #752]	; (8001e5c <__aeabi_ddiv+0x380>)
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	58cb      	ldr	r3, [r1, r3]
 8001b6e:	469f      	mov	pc, r3
 8001b70:	46b2      	mov	sl, r6
 8001b72:	9b00      	ldr	r3, [sp, #0]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d016      	beq.n	8001ba6 <__aeabi_ddiv+0xca>
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_ddiv+0xa2>
 8001b7c:	e28e      	b.n	800209c <__aeabi_ddiv+0x5c0>
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d000      	beq.n	8001b84 <__aeabi_ddiv+0xa8>
 8001b82:	e0d9      	b.n	8001d38 <__aeabi_ddiv+0x25c>
 8001b84:	2300      	movs	r3, #0
 8001b86:	2400      	movs	r4, #0
 8001b88:	2500      	movs	r5, #0
 8001b8a:	4652      	mov	r2, sl
 8001b8c:	051b      	lsls	r3, r3, #20
 8001b8e:	4323      	orrs	r3, r4
 8001b90:	07d2      	lsls	r2, r2, #31
 8001b92:	4313      	orrs	r3, r2
 8001b94:	0028      	movs	r0, r5
 8001b96:	0019      	movs	r1, r3
 8001b98:	b005      	add	sp, #20
 8001b9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9c:	46bb      	mov	fp, r7
 8001b9e:	46b2      	mov	sl, r6
 8001ba0:	46a9      	mov	r9, r5
 8001ba2:	46a0      	mov	r8, r4
 8001ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba6:	2400      	movs	r4, #0
 8001ba8:	2500      	movs	r5, #0
 8001baa:	4baa      	ldr	r3, [pc, #680]	; (8001e54 <__aeabi_ddiv+0x378>)
 8001bac:	e7ed      	b.n	8001b8a <__aeabi_ddiv+0xae>
 8001bae:	46ba      	mov	sl, r7
 8001bb0:	46a0      	mov	r8, r4
 8001bb2:	0015      	movs	r5, r2
 8001bb4:	9000      	str	r0, [sp, #0]
 8001bb6:	e7dc      	b.n	8001b72 <__aeabi_ddiv+0x96>
 8001bb8:	4544      	cmp	r4, r8
 8001bba:	d200      	bcs.n	8001bbe <__aeabi_ddiv+0xe2>
 8001bbc:	e1c7      	b.n	8001f4e <__aeabi_ddiv+0x472>
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_ddiv+0xe6>
 8001bc0:	e1c2      	b.n	8001f48 <__aeabi_ddiv+0x46c>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	425b      	negs	r3, r3
 8001bc6:	469c      	mov	ip, r3
 8001bc8:	002e      	movs	r6, r5
 8001bca:	4640      	mov	r0, r8
 8001bcc:	2500      	movs	r5, #0
 8001bce:	44e3      	add	fp, ip
 8001bd0:	0223      	lsls	r3, r4, #8
 8001bd2:	0e14      	lsrs	r4, r2, #24
 8001bd4:	431c      	orrs	r4, r3
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	4699      	mov	r9, r3
 8001bda:	0423      	lsls	r3, r4, #16
 8001bdc:	0c1f      	lsrs	r7, r3, #16
 8001bde:	0212      	lsls	r2, r2, #8
 8001be0:	4649      	mov	r1, r9
 8001be2:	9200      	str	r2, [sp, #0]
 8001be4:	9701      	str	r7, [sp, #4]
 8001be6:	f7fe fb39 	bl	800025c <__aeabi_uidivmod>
 8001bea:	0002      	movs	r2, r0
 8001bec:	437a      	muls	r2, r7
 8001bee:	040b      	lsls	r3, r1, #16
 8001bf0:	0c31      	lsrs	r1, r6, #16
 8001bf2:	4680      	mov	r8, r0
 8001bf4:	4319      	orrs	r1, r3
 8001bf6:	428a      	cmp	r2, r1
 8001bf8:	d907      	bls.n	8001c0a <__aeabi_ddiv+0x12e>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	425b      	negs	r3, r3
 8001bfe:	469c      	mov	ip, r3
 8001c00:	1909      	adds	r1, r1, r4
 8001c02:	44e0      	add	r8, ip
 8001c04:	428c      	cmp	r4, r1
 8001c06:	d800      	bhi.n	8001c0a <__aeabi_ddiv+0x12e>
 8001c08:	e207      	b.n	800201a <__aeabi_ddiv+0x53e>
 8001c0a:	1a88      	subs	r0, r1, r2
 8001c0c:	4649      	mov	r1, r9
 8001c0e:	f7fe fb25 	bl	800025c <__aeabi_uidivmod>
 8001c12:	0409      	lsls	r1, r1, #16
 8001c14:	468c      	mov	ip, r1
 8001c16:	0431      	lsls	r1, r6, #16
 8001c18:	4666      	mov	r6, ip
 8001c1a:	9a01      	ldr	r2, [sp, #4]
 8001c1c:	0c09      	lsrs	r1, r1, #16
 8001c1e:	4342      	muls	r2, r0
 8001c20:	0003      	movs	r3, r0
 8001c22:	4331      	orrs	r1, r6
 8001c24:	428a      	cmp	r2, r1
 8001c26:	d904      	bls.n	8001c32 <__aeabi_ddiv+0x156>
 8001c28:	1909      	adds	r1, r1, r4
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	428c      	cmp	r4, r1
 8001c2e:	d800      	bhi.n	8001c32 <__aeabi_ddiv+0x156>
 8001c30:	e1ed      	b.n	800200e <__aeabi_ddiv+0x532>
 8001c32:	1a88      	subs	r0, r1, r2
 8001c34:	4642      	mov	r2, r8
 8001c36:	0412      	lsls	r2, r2, #16
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	4690      	mov	r8, r2
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	9b00      	ldr	r3, [sp, #0]
 8001c40:	040e      	lsls	r6, r1, #16
 8001c42:	0c1b      	lsrs	r3, r3, #16
 8001c44:	001f      	movs	r7, r3
 8001c46:	9302      	str	r3, [sp, #8]
 8001c48:	9b00      	ldr	r3, [sp, #0]
 8001c4a:	0c36      	lsrs	r6, r6, #16
 8001c4c:	041b      	lsls	r3, r3, #16
 8001c4e:	0c19      	lsrs	r1, r3, #16
 8001c50:	000b      	movs	r3, r1
 8001c52:	4373      	muls	r3, r6
 8001c54:	0c12      	lsrs	r2, r2, #16
 8001c56:	437e      	muls	r6, r7
 8001c58:	9103      	str	r1, [sp, #12]
 8001c5a:	4351      	muls	r1, r2
 8001c5c:	437a      	muls	r2, r7
 8001c5e:	0c1f      	lsrs	r7, r3, #16
 8001c60:	46bc      	mov	ip, r7
 8001c62:	1876      	adds	r6, r6, r1
 8001c64:	4466      	add	r6, ip
 8001c66:	42b1      	cmp	r1, r6
 8001c68:	d903      	bls.n	8001c72 <__aeabi_ddiv+0x196>
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0249      	lsls	r1, r1, #9
 8001c6e:	468c      	mov	ip, r1
 8001c70:	4462      	add	r2, ip
 8001c72:	0c31      	lsrs	r1, r6, #16
 8001c74:	188a      	adds	r2, r1, r2
 8001c76:	0431      	lsls	r1, r6, #16
 8001c78:	041e      	lsls	r6, r3, #16
 8001c7a:	0c36      	lsrs	r6, r6, #16
 8001c7c:	198e      	adds	r6, r1, r6
 8001c7e:	4290      	cmp	r0, r2
 8001c80:	d302      	bcc.n	8001c88 <__aeabi_ddiv+0x1ac>
 8001c82:	d112      	bne.n	8001caa <__aeabi_ddiv+0x1ce>
 8001c84:	42b5      	cmp	r5, r6
 8001c86:	d210      	bcs.n	8001caa <__aeabi_ddiv+0x1ce>
 8001c88:	4643      	mov	r3, r8
 8001c8a:	1e59      	subs	r1, r3, #1
 8001c8c:	9b00      	ldr	r3, [sp, #0]
 8001c8e:	469c      	mov	ip, r3
 8001c90:	4465      	add	r5, ip
 8001c92:	001f      	movs	r7, r3
 8001c94:	429d      	cmp	r5, r3
 8001c96:	419b      	sbcs	r3, r3
 8001c98:	425b      	negs	r3, r3
 8001c9a:	191b      	adds	r3, r3, r4
 8001c9c:	18c0      	adds	r0, r0, r3
 8001c9e:	4284      	cmp	r4, r0
 8001ca0:	d200      	bcs.n	8001ca4 <__aeabi_ddiv+0x1c8>
 8001ca2:	e1a0      	b.n	8001fe6 <__aeabi_ddiv+0x50a>
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_ddiv+0x1cc>
 8001ca6:	e19b      	b.n	8001fe0 <__aeabi_ddiv+0x504>
 8001ca8:	4688      	mov	r8, r1
 8001caa:	1bae      	subs	r6, r5, r6
 8001cac:	42b5      	cmp	r5, r6
 8001cae:	41ad      	sbcs	r5, r5
 8001cb0:	1a80      	subs	r0, r0, r2
 8001cb2:	426d      	negs	r5, r5
 8001cb4:	1b40      	subs	r0, r0, r5
 8001cb6:	4284      	cmp	r4, r0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_ddiv+0x1e0>
 8001cba:	e1d5      	b.n	8002068 <__aeabi_ddiv+0x58c>
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	f7fe facd 	bl	800025c <__aeabi_uidivmod>
 8001cc2:	9a01      	ldr	r2, [sp, #4]
 8001cc4:	040b      	lsls	r3, r1, #16
 8001cc6:	4342      	muls	r2, r0
 8001cc8:	0c31      	lsrs	r1, r6, #16
 8001cca:	0005      	movs	r5, r0
 8001ccc:	4319      	orrs	r1, r3
 8001cce:	428a      	cmp	r2, r1
 8001cd0:	d900      	bls.n	8001cd4 <__aeabi_ddiv+0x1f8>
 8001cd2:	e16c      	b.n	8001fae <__aeabi_ddiv+0x4d2>
 8001cd4:	1a88      	subs	r0, r1, r2
 8001cd6:	4649      	mov	r1, r9
 8001cd8:	f7fe fac0 	bl	800025c <__aeabi_uidivmod>
 8001cdc:	9a01      	ldr	r2, [sp, #4]
 8001cde:	0436      	lsls	r6, r6, #16
 8001ce0:	4342      	muls	r2, r0
 8001ce2:	0409      	lsls	r1, r1, #16
 8001ce4:	0c36      	lsrs	r6, r6, #16
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	430e      	orrs	r6, r1
 8001cea:	42b2      	cmp	r2, r6
 8001cec:	d900      	bls.n	8001cf0 <__aeabi_ddiv+0x214>
 8001cee:	e153      	b.n	8001f98 <__aeabi_ddiv+0x4bc>
 8001cf0:	9803      	ldr	r0, [sp, #12]
 8001cf2:	1ab6      	subs	r6, r6, r2
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	042d      	lsls	r5, r5, #16
 8001cf8:	431d      	orrs	r5, r3
 8001cfa:	9f02      	ldr	r7, [sp, #8]
 8001cfc:	042b      	lsls	r3, r5, #16
 8001cfe:	0c1b      	lsrs	r3, r3, #16
 8001d00:	435a      	muls	r2, r3
 8001d02:	437b      	muls	r3, r7
 8001d04:	469c      	mov	ip, r3
 8001d06:	0c29      	lsrs	r1, r5, #16
 8001d08:	4348      	muls	r0, r1
 8001d0a:	0c13      	lsrs	r3, r2, #16
 8001d0c:	4484      	add	ip, r0
 8001d0e:	4463      	add	r3, ip
 8001d10:	4379      	muls	r1, r7
 8001d12:	4298      	cmp	r0, r3
 8001d14:	d903      	bls.n	8001d1e <__aeabi_ddiv+0x242>
 8001d16:	2080      	movs	r0, #128	; 0x80
 8001d18:	0240      	lsls	r0, r0, #9
 8001d1a:	4684      	mov	ip, r0
 8001d1c:	4461      	add	r1, ip
 8001d1e:	0c18      	lsrs	r0, r3, #16
 8001d20:	0412      	lsls	r2, r2, #16
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	0c12      	lsrs	r2, r2, #16
 8001d26:	1841      	adds	r1, r0, r1
 8001d28:	189b      	adds	r3, r3, r2
 8001d2a:	428e      	cmp	r6, r1
 8001d2c:	d200      	bcs.n	8001d30 <__aeabi_ddiv+0x254>
 8001d2e:	e0ff      	b.n	8001f30 <__aeabi_ddiv+0x454>
 8001d30:	d100      	bne.n	8001d34 <__aeabi_ddiv+0x258>
 8001d32:	e0fa      	b.n	8001f2a <__aeabi_ddiv+0x44e>
 8001d34:	2301      	movs	r3, #1
 8001d36:	431d      	orrs	r5, r3
 8001d38:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <__aeabi_ddiv+0x384>)
 8001d3a:	445a      	add	r2, fp
 8001d3c:	2a00      	cmp	r2, #0
 8001d3e:	dc00      	bgt.n	8001d42 <__aeabi_ddiv+0x266>
 8001d40:	e0aa      	b.n	8001e98 <__aeabi_ddiv+0x3bc>
 8001d42:	076b      	lsls	r3, r5, #29
 8001d44:	d000      	beq.n	8001d48 <__aeabi_ddiv+0x26c>
 8001d46:	e13d      	b.n	8001fc4 <__aeabi_ddiv+0x4e8>
 8001d48:	08ed      	lsrs	r5, r5, #3
 8001d4a:	4643      	mov	r3, r8
 8001d4c:	01db      	lsls	r3, r3, #7
 8001d4e:	d506      	bpl.n	8001d5e <__aeabi_ddiv+0x282>
 8001d50:	4642      	mov	r2, r8
 8001d52:	4b44      	ldr	r3, [pc, #272]	; (8001e64 <__aeabi_ddiv+0x388>)
 8001d54:	401a      	ands	r2, r3
 8001d56:	4690      	mov	r8, r2
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	00d2      	lsls	r2, r2, #3
 8001d5c:	445a      	add	r2, fp
 8001d5e:	4b42      	ldr	r3, [pc, #264]	; (8001e68 <__aeabi_ddiv+0x38c>)
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dd00      	ble.n	8001d66 <__aeabi_ddiv+0x28a>
 8001d64:	e71f      	b.n	8001ba6 <__aeabi_ddiv+0xca>
 8001d66:	4643      	mov	r3, r8
 8001d68:	075b      	lsls	r3, r3, #29
 8001d6a:	431d      	orrs	r5, r3
 8001d6c:	4643      	mov	r3, r8
 8001d6e:	0552      	lsls	r2, r2, #21
 8001d70:	025c      	lsls	r4, r3, #9
 8001d72:	0b24      	lsrs	r4, r4, #12
 8001d74:	0d53      	lsrs	r3, r2, #21
 8001d76:	e708      	b.n	8001b8a <__aeabi_ddiv+0xae>
 8001d78:	4652      	mov	r2, sl
 8001d7a:	4322      	orrs	r2, r4
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x2a4>
 8001d7e:	e07b      	b.n	8001e78 <__aeabi_ddiv+0x39c>
 8001d80:	2c00      	cmp	r4, #0
 8001d82:	d100      	bne.n	8001d86 <__aeabi_ddiv+0x2aa>
 8001d84:	e0fa      	b.n	8001f7c <__aeabi_ddiv+0x4a0>
 8001d86:	0020      	movs	r0, r4
 8001d88:	f001 fa22 	bl	80031d0 <__clzsi2>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	3a0b      	subs	r2, #11
 8001d90:	231d      	movs	r3, #29
 8001d92:	0001      	movs	r1, r0
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	4652      	mov	r2, sl
 8001d98:	3908      	subs	r1, #8
 8001d9a:	40da      	lsrs	r2, r3
 8001d9c:	408c      	lsls	r4, r1
 8001d9e:	4314      	orrs	r4, r2
 8001da0:	4652      	mov	r2, sl
 8001da2:	408a      	lsls	r2, r1
 8001da4:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <__aeabi_ddiv+0x390>)
 8001da6:	4458      	add	r0, fp
 8001da8:	469b      	mov	fp, r3
 8001daa:	4483      	add	fp, r0
 8001dac:	2000      	movs	r0, #0
 8001dae:	e6d5      	b.n	8001b5c <__aeabi_ddiv+0x80>
 8001db0:	464b      	mov	r3, r9
 8001db2:	4323      	orrs	r3, r4
 8001db4:	4698      	mov	r8, r3
 8001db6:	d044      	beq.n	8001e42 <__aeabi_ddiv+0x366>
 8001db8:	2c00      	cmp	r4, #0
 8001dba:	d100      	bne.n	8001dbe <__aeabi_ddiv+0x2e2>
 8001dbc:	e0ce      	b.n	8001f5c <__aeabi_ddiv+0x480>
 8001dbe:	0020      	movs	r0, r4
 8001dc0:	f001 fa06 	bl	80031d0 <__clzsi2>
 8001dc4:	0001      	movs	r1, r0
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	390b      	subs	r1, #11
 8001dca:	231d      	movs	r3, #29
 8001dcc:	1a5b      	subs	r3, r3, r1
 8001dce:	4649      	mov	r1, r9
 8001dd0:	0010      	movs	r0, r2
 8001dd2:	40d9      	lsrs	r1, r3
 8001dd4:	3808      	subs	r0, #8
 8001dd6:	4084      	lsls	r4, r0
 8001dd8:	000b      	movs	r3, r1
 8001dda:	464d      	mov	r5, r9
 8001ddc:	4323      	orrs	r3, r4
 8001dde:	4698      	mov	r8, r3
 8001de0:	4085      	lsls	r5, r0
 8001de2:	4823      	ldr	r0, [pc, #140]	; (8001e70 <__aeabi_ddiv+0x394>)
 8001de4:	1a83      	subs	r3, r0, r2
 8001de6:	469b      	mov	fp, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	4699      	mov	r9, r3
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	e69a      	b.n	8001b26 <__aeabi_ddiv+0x4a>
 8001df0:	464b      	mov	r3, r9
 8001df2:	4323      	orrs	r3, r4
 8001df4:	4698      	mov	r8, r3
 8001df6:	d11d      	bne.n	8001e34 <__aeabi_ddiv+0x358>
 8001df8:	2308      	movs	r3, #8
 8001dfa:	4699      	mov	r9, r3
 8001dfc:	3b06      	subs	r3, #6
 8001dfe:	2500      	movs	r5, #0
 8001e00:	4683      	mov	fp, r0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	e68f      	b.n	8001b26 <__aeabi_ddiv+0x4a>
 8001e06:	4652      	mov	r2, sl
 8001e08:	4322      	orrs	r2, r4
 8001e0a:	d109      	bne.n	8001e20 <__aeabi_ddiv+0x344>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	4649      	mov	r1, r9
 8001e10:	4319      	orrs	r1, r3
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <__aeabi_ddiv+0x398>)
 8001e14:	4689      	mov	r9, r1
 8001e16:	469c      	mov	ip, r3
 8001e18:	2400      	movs	r4, #0
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	44e3      	add	fp, ip
 8001e1e:	e69d      	b.n	8001b5c <__aeabi_ddiv+0x80>
 8001e20:	2303      	movs	r3, #3
 8001e22:	464a      	mov	r2, r9
 8001e24:	431a      	orrs	r2, r3
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <__aeabi_ddiv+0x398>)
 8001e28:	4691      	mov	r9, r2
 8001e2a:	469c      	mov	ip, r3
 8001e2c:	4652      	mov	r2, sl
 8001e2e:	2003      	movs	r0, #3
 8001e30:	44e3      	add	fp, ip
 8001e32:	e693      	b.n	8001b5c <__aeabi_ddiv+0x80>
 8001e34:	230c      	movs	r3, #12
 8001e36:	4699      	mov	r9, r3
 8001e38:	3b09      	subs	r3, #9
 8001e3a:	46a0      	mov	r8, r4
 8001e3c:	4683      	mov	fp, r0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	e671      	b.n	8001b26 <__aeabi_ddiv+0x4a>
 8001e42:	2304      	movs	r3, #4
 8001e44:	4699      	mov	r9, r3
 8001e46:	2300      	movs	r3, #0
 8001e48:	469b      	mov	fp, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	2500      	movs	r5, #0
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	e669      	b.n	8001b26 <__aeabi_ddiv+0x4a>
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	000007ff 	.word	0x000007ff
 8001e58:	fffffc01 	.word	0xfffffc01
 8001e5c:	0800e340 	.word	0x0800e340
 8001e60:	000003ff 	.word	0x000003ff
 8001e64:	feffffff 	.word	0xfeffffff
 8001e68:	000007fe 	.word	0x000007fe
 8001e6c:	000003f3 	.word	0x000003f3
 8001e70:	fffffc0d 	.word	0xfffffc0d
 8001e74:	fffff801 	.word	0xfffff801
 8001e78:	4649      	mov	r1, r9
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4319      	orrs	r1, r3
 8001e7e:	4689      	mov	r9, r1
 8001e80:	2400      	movs	r4, #0
 8001e82:	2001      	movs	r0, #1
 8001e84:	e66a      	b.n	8001b5c <__aeabi_ddiv+0x80>
 8001e86:	2300      	movs	r3, #0
 8001e88:	2480      	movs	r4, #128	; 0x80
 8001e8a:	469a      	mov	sl, r3
 8001e8c:	2500      	movs	r5, #0
 8001e8e:	4b8a      	ldr	r3, [pc, #552]	; (80020b8 <__aeabi_ddiv+0x5dc>)
 8001e90:	0324      	lsls	r4, r4, #12
 8001e92:	e67a      	b.n	8001b8a <__aeabi_ddiv+0xae>
 8001e94:	2501      	movs	r5, #1
 8001e96:	426d      	negs	r5, r5
 8001e98:	2301      	movs	r3, #1
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	2b38      	cmp	r3, #56	; 0x38
 8001e9e:	dd00      	ble.n	8001ea2 <__aeabi_ddiv+0x3c6>
 8001ea0:	e670      	b.n	8001b84 <__aeabi_ddiv+0xa8>
 8001ea2:	2b1f      	cmp	r3, #31
 8001ea4:	dc00      	bgt.n	8001ea8 <__aeabi_ddiv+0x3cc>
 8001ea6:	e0bf      	b.n	8002028 <__aeabi_ddiv+0x54c>
 8001ea8:	211f      	movs	r1, #31
 8001eaa:	4249      	negs	r1, r1
 8001eac:	1a8a      	subs	r2, r1, r2
 8001eae:	4641      	mov	r1, r8
 8001eb0:	40d1      	lsrs	r1, r2
 8001eb2:	000a      	movs	r2, r1
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d004      	beq.n	8001ec2 <__aeabi_ddiv+0x3e6>
 8001eb8:	4641      	mov	r1, r8
 8001eba:	4b80      	ldr	r3, [pc, #512]	; (80020bc <__aeabi_ddiv+0x5e0>)
 8001ebc:	445b      	add	r3, fp
 8001ebe:	4099      	lsls	r1, r3
 8001ec0:	430d      	orrs	r5, r1
 8001ec2:	1e6b      	subs	r3, r5, #1
 8001ec4:	419d      	sbcs	r5, r3
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	432a      	orrs	r2, r5
 8001eca:	001d      	movs	r5, r3
 8001ecc:	2400      	movs	r4, #0
 8001ece:	4015      	ands	r5, r2
 8001ed0:	4213      	tst	r3, r2
 8001ed2:	d100      	bne.n	8001ed6 <__aeabi_ddiv+0x3fa>
 8001ed4:	e0d4      	b.n	8002080 <__aeabi_ddiv+0x5a4>
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4011      	ands	r1, r2
 8001edc:	2904      	cmp	r1, #4
 8001ede:	d100      	bne.n	8001ee2 <__aeabi_ddiv+0x406>
 8001ee0:	e0cb      	b.n	800207a <__aeabi_ddiv+0x59e>
 8001ee2:	1d11      	adds	r1, r2, #4
 8001ee4:	4291      	cmp	r1, r2
 8001ee6:	4192      	sbcs	r2, r2
 8001ee8:	4252      	negs	r2, r2
 8001eea:	189b      	adds	r3, r3, r2
 8001eec:	000a      	movs	r2, r1
 8001eee:	0219      	lsls	r1, r3, #8
 8001ef0:	d400      	bmi.n	8001ef4 <__aeabi_ddiv+0x418>
 8001ef2:	e0c2      	b.n	800207a <__aeabi_ddiv+0x59e>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	2400      	movs	r4, #0
 8001ef8:	2500      	movs	r5, #0
 8001efa:	e646      	b.n	8001b8a <__aeabi_ddiv+0xae>
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	4641      	mov	r1, r8
 8001f00:	031b      	lsls	r3, r3, #12
 8001f02:	4219      	tst	r1, r3
 8001f04:	d008      	beq.n	8001f18 <__aeabi_ddiv+0x43c>
 8001f06:	421c      	tst	r4, r3
 8001f08:	d106      	bne.n	8001f18 <__aeabi_ddiv+0x43c>
 8001f0a:	431c      	orrs	r4, r3
 8001f0c:	0324      	lsls	r4, r4, #12
 8001f0e:	46ba      	mov	sl, r7
 8001f10:	0015      	movs	r5, r2
 8001f12:	4b69      	ldr	r3, [pc, #420]	; (80020b8 <__aeabi_ddiv+0x5dc>)
 8001f14:	0b24      	lsrs	r4, r4, #12
 8001f16:	e638      	b.n	8001b8a <__aeabi_ddiv+0xae>
 8001f18:	2480      	movs	r4, #128	; 0x80
 8001f1a:	4643      	mov	r3, r8
 8001f1c:	0324      	lsls	r4, r4, #12
 8001f1e:	431c      	orrs	r4, r3
 8001f20:	0324      	lsls	r4, r4, #12
 8001f22:	46b2      	mov	sl, r6
 8001f24:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <__aeabi_ddiv+0x5dc>)
 8001f26:	0b24      	lsrs	r4, r4, #12
 8001f28:	e62f      	b.n	8001b8a <__aeabi_ddiv+0xae>
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_ddiv+0x454>
 8001f2e:	e703      	b.n	8001d38 <__aeabi_ddiv+0x25c>
 8001f30:	19a6      	adds	r6, r4, r6
 8001f32:	1e68      	subs	r0, r5, #1
 8001f34:	42a6      	cmp	r6, r4
 8001f36:	d200      	bcs.n	8001f3a <__aeabi_ddiv+0x45e>
 8001f38:	e08d      	b.n	8002056 <__aeabi_ddiv+0x57a>
 8001f3a:	428e      	cmp	r6, r1
 8001f3c:	d200      	bcs.n	8001f40 <__aeabi_ddiv+0x464>
 8001f3e:	e0a3      	b.n	8002088 <__aeabi_ddiv+0x5ac>
 8001f40:	d100      	bne.n	8001f44 <__aeabi_ddiv+0x468>
 8001f42:	e0b3      	b.n	80020ac <__aeabi_ddiv+0x5d0>
 8001f44:	0005      	movs	r5, r0
 8001f46:	e6f5      	b.n	8001d34 <__aeabi_ddiv+0x258>
 8001f48:	42aa      	cmp	r2, r5
 8001f4a:	d900      	bls.n	8001f4e <__aeabi_ddiv+0x472>
 8001f4c:	e639      	b.n	8001bc2 <__aeabi_ddiv+0xe6>
 8001f4e:	4643      	mov	r3, r8
 8001f50:	07de      	lsls	r6, r3, #31
 8001f52:	0858      	lsrs	r0, r3, #1
 8001f54:	086b      	lsrs	r3, r5, #1
 8001f56:	431e      	orrs	r6, r3
 8001f58:	07ed      	lsls	r5, r5, #31
 8001f5a:	e639      	b.n	8001bd0 <__aeabi_ddiv+0xf4>
 8001f5c:	4648      	mov	r0, r9
 8001f5e:	f001 f937 	bl	80031d0 <__clzsi2>
 8001f62:	0001      	movs	r1, r0
 8001f64:	0002      	movs	r2, r0
 8001f66:	3115      	adds	r1, #21
 8001f68:	3220      	adds	r2, #32
 8001f6a:	291c      	cmp	r1, #28
 8001f6c:	dc00      	bgt.n	8001f70 <__aeabi_ddiv+0x494>
 8001f6e:	e72c      	b.n	8001dca <__aeabi_ddiv+0x2ee>
 8001f70:	464b      	mov	r3, r9
 8001f72:	3808      	subs	r0, #8
 8001f74:	4083      	lsls	r3, r0
 8001f76:	2500      	movs	r5, #0
 8001f78:	4698      	mov	r8, r3
 8001f7a:	e732      	b.n	8001de2 <__aeabi_ddiv+0x306>
 8001f7c:	f001 f928 	bl	80031d0 <__clzsi2>
 8001f80:	0003      	movs	r3, r0
 8001f82:	001a      	movs	r2, r3
 8001f84:	3215      	adds	r2, #21
 8001f86:	3020      	adds	r0, #32
 8001f88:	2a1c      	cmp	r2, #28
 8001f8a:	dc00      	bgt.n	8001f8e <__aeabi_ddiv+0x4b2>
 8001f8c:	e700      	b.n	8001d90 <__aeabi_ddiv+0x2b4>
 8001f8e:	4654      	mov	r4, sl
 8001f90:	3b08      	subs	r3, #8
 8001f92:	2200      	movs	r2, #0
 8001f94:	409c      	lsls	r4, r3
 8001f96:	e705      	b.n	8001da4 <__aeabi_ddiv+0x2c8>
 8001f98:	1936      	adds	r6, r6, r4
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	42b4      	cmp	r4, r6
 8001f9e:	d900      	bls.n	8001fa2 <__aeabi_ddiv+0x4c6>
 8001fa0:	e6a6      	b.n	8001cf0 <__aeabi_ddiv+0x214>
 8001fa2:	42b2      	cmp	r2, r6
 8001fa4:	d800      	bhi.n	8001fa8 <__aeabi_ddiv+0x4cc>
 8001fa6:	e6a3      	b.n	8001cf0 <__aeabi_ddiv+0x214>
 8001fa8:	1e83      	subs	r3, r0, #2
 8001faa:	1936      	adds	r6, r6, r4
 8001fac:	e6a0      	b.n	8001cf0 <__aeabi_ddiv+0x214>
 8001fae:	1909      	adds	r1, r1, r4
 8001fb0:	3d01      	subs	r5, #1
 8001fb2:	428c      	cmp	r4, r1
 8001fb4:	d900      	bls.n	8001fb8 <__aeabi_ddiv+0x4dc>
 8001fb6:	e68d      	b.n	8001cd4 <__aeabi_ddiv+0x1f8>
 8001fb8:	428a      	cmp	r2, r1
 8001fba:	d800      	bhi.n	8001fbe <__aeabi_ddiv+0x4e2>
 8001fbc:	e68a      	b.n	8001cd4 <__aeabi_ddiv+0x1f8>
 8001fbe:	1e85      	subs	r5, r0, #2
 8001fc0:	1909      	adds	r1, r1, r4
 8001fc2:	e687      	b.n	8001cd4 <__aeabi_ddiv+0x1f8>
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	402b      	ands	r3, r5
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d100      	bne.n	8001fce <__aeabi_ddiv+0x4f2>
 8001fcc:	e6bc      	b.n	8001d48 <__aeabi_ddiv+0x26c>
 8001fce:	2305      	movs	r3, #5
 8001fd0:	425b      	negs	r3, r3
 8001fd2:	42ab      	cmp	r3, r5
 8001fd4:	419b      	sbcs	r3, r3
 8001fd6:	3504      	adds	r5, #4
 8001fd8:	425b      	negs	r3, r3
 8001fda:	08ed      	lsrs	r5, r5, #3
 8001fdc:	4498      	add	r8, r3
 8001fde:	e6b4      	b.n	8001d4a <__aeabi_ddiv+0x26e>
 8001fe0:	42af      	cmp	r7, r5
 8001fe2:	d900      	bls.n	8001fe6 <__aeabi_ddiv+0x50a>
 8001fe4:	e660      	b.n	8001ca8 <__aeabi_ddiv+0x1cc>
 8001fe6:	4282      	cmp	r2, r0
 8001fe8:	d804      	bhi.n	8001ff4 <__aeabi_ddiv+0x518>
 8001fea:	d000      	beq.n	8001fee <__aeabi_ddiv+0x512>
 8001fec:	e65c      	b.n	8001ca8 <__aeabi_ddiv+0x1cc>
 8001fee:	42ae      	cmp	r6, r5
 8001ff0:	d800      	bhi.n	8001ff4 <__aeabi_ddiv+0x518>
 8001ff2:	e659      	b.n	8001ca8 <__aeabi_ddiv+0x1cc>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	9b00      	ldr	r3, [sp, #0]
 8001ffc:	44e0      	add	r8, ip
 8001ffe:	469c      	mov	ip, r3
 8002000:	4465      	add	r5, ip
 8002002:	429d      	cmp	r5, r3
 8002004:	419b      	sbcs	r3, r3
 8002006:	425b      	negs	r3, r3
 8002008:	191b      	adds	r3, r3, r4
 800200a:	18c0      	adds	r0, r0, r3
 800200c:	e64d      	b.n	8001caa <__aeabi_ddiv+0x1ce>
 800200e:	428a      	cmp	r2, r1
 8002010:	d800      	bhi.n	8002014 <__aeabi_ddiv+0x538>
 8002012:	e60e      	b.n	8001c32 <__aeabi_ddiv+0x156>
 8002014:	1e83      	subs	r3, r0, #2
 8002016:	1909      	adds	r1, r1, r4
 8002018:	e60b      	b.n	8001c32 <__aeabi_ddiv+0x156>
 800201a:	428a      	cmp	r2, r1
 800201c:	d800      	bhi.n	8002020 <__aeabi_ddiv+0x544>
 800201e:	e5f4      	b.n	8001c0a <__aeabi_ddiv+0x12e>
 8002020:	1e83      	subs	r3, r0, #2
 8002022:	4698      	mov	r8, r3
 8002024:	1909      	adds	r1, r1, r4
 8002026:	e5f0      	b.n	8001c0a <__aeabi_ddiv+0x12e>
 8002028:	4925      	ldr	r1, [pc, #148]	; (80020c0 <__aeabi_ddiv+0x5e4>)
 800202a:	0028      	movs	r0, r5
 800202c:	4459      	add	r1, fp
 800202e:	408d      	lsls	r5, r1
 8002030:	4642      	mov	r2, r8
 8002032:	408a      	lsls	r2, r1
 8002034:	1e69      	subs	r1, r5, #1
 8002036:	418d      	sbcs	r5, r1
 8002038:	4641      	mov	r1, r8
 800203a:	40d8      	lsrs	r0, r3
 800203c:	40d9      	lsrs	r1, r3
 800203e:	4302      	orrs	r2, r0
 8002040:	432a      	orrs	r2, r5
 8002042:	000b      	movs	r3, r1
 8002044:	0751      	lsls	r1, r2, #29
 8002046:	d100      	bne.n	800204a <__aeabi_ddiv+0x56e>
 8002048:	e751      	b.n	8001eee <__aeabi_ddiv+0x412>
 800204a:	210f      	movs	r1, #15
 800204c:	4011      	ands	r1, r2
 800204e:	2904      	cmp	r1, #4
 8002050:	d000      	beq.n	8002054 <__aeabi_ddiv+0x578>
 8002052:	e746      	b.n	8001ee2 <__aeabi_ddiv+0x406>
 8002054:	e74b      	b.n	8001eee <__aeabi_ddiv+0x412>
 8002056:	0005      	movs	r5, r0
 8002058:	428e      	cmp	r6, r1
 800205a:	d000      	beq.n	800205e <__aeabi_ddiv+0x582>
 800205c:	e66a      	b.n	8001d34 <__aeabi_ddiv+0x258>
 800205e:	9a00      	ldr	r2, [sp, #0]
 8002060:	4293      	cmp	r3, r2
 8002062:	d000      	beq.n	8002066 <__aeabi_ddiv+0x58a>
 8002064:	e666      	b.n	8001d34 <__aeabi_ddiv+0x258>
 8002066:	e667      	b.n	8001d38 <__aeabi_ddiv+0x25c>
 8002068:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <__aeabi_ddiv+0x5e8>)
 800206a:	445a      	add	r2, fp
 800206c:	2a00      	cmp	r2, #0
 800206e:	dc00      	bgt.n	8002072 <__aeabi_ddiv+0x596>
 8002070:	e710      	b.n	8001e94 <__aeabi_ddiv+0x3b8>
 8002072:	2301      	movs	r3, #1
 8002074:	2500      	movs	r5, #0
 8002076:	4498      	add	r8, r3
 8002078:	e667      	b.n	8001d4a <__aeabi_ddiv+0x26e>
 800207a:	075d      	lsls	r5, r3, #29
 800207c:	025b      	lsls	r3, r3, #9
 800207e:	0b1c      	lsrs	r4, r3, #12
 8002080:	08d2      	lsrs	r2, r2, #3
 8002082:	2300      	movs	r3, #0
 8002084:	4315      	orrs	r5, r2
 8002086:	e580      	b.n	8001b8a <__aeabi_ddiv+0xae>
 8002088:	9800      	ldr	r0, [sp, #0]
 800208a:	3d02      	subs	r5, #2
 800208c:	0042      	lsls	r2, r0, #1
 800208e:	4282      	cmp	r2, r0
 8002090:	41bf      	sbcs	r7, r7
 8002092:	427f      	negs	r7, r7
 8002094:	193c      	adds	r4, r7, r4
 8002096:	1936      	adds	r6, r6, r4
 8002098:	9200      	str	r2, [sp, #0]
 800209a:	e7dd      	b.n	8002058 <__aeabi_ddiv+0x57c>
 800209c:	2480      	movs	r4, #128	; 0x80
 800209e:	4643      	mov	r3, r8
 80020a0:	0324      	lsls	r4, r4, #12
 80020a2:	431c      	orrs	r4, r3
 80020a4:	0324      	lsls	r4, r4, #12
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <__aeabi_ddiv+0x5dc>)
 80020a8:	0b24      	lsrs	r4, r4, #12
 80020aa:	e56e      	b.n	8001b8a <__aeabi_ddiv+0xae>
 80020ac:	9a00      	ldr	r2, [sp, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d3ea      	bcc.n	8002088 <__aeabi_ddiv+0x5ac>
 80020b2:	0005      	movs	r5, r0
 80020b4:	e7d3      	b.n	800205e <__aeabi_ddiv+0x582>
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	000007ff 	.word	0x000007ff
 80020bc:	0000043e 	.word	0x0000043e
 80020c0:	0000041e 	.word	0x0000041e
 80020c4:	000003ff 	.word	0x000003ff

080020c8 <__eqdf2>:
 80020c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ca:	464e      	mov	r6, r9
 80020cc:	4645      	mov	r5, r8
 80020ce:	46de      	mov	lr, fp
 80020d0:	4657      	mov	r7, sl
 80020d2:	4690      	mov	r8, r2
 80020d4:	b5e0      	push	{r5, r6, r7, lr}
 80020d6:	0017      	movs	r7, r2
 80020d8:	031a      	lsls	r2, r3, #12
 80020da:	0b12      	lsrs	r2, r2, #12
 80020dc:	0005      	movs	r5, r0
 80020de:	4684      	mov	ip, r0
 80020e0:	4819      	ldr	r0, [pc, #100]	; (8002148 <__eqdf2+0x80>)
 80020e2:	030e      	lsls	r6, r1, #12
 80020e4:	004c      	lsls	r4, r1, #1
 80020e6:	4691      	mov	r9, r2
 80020e8:	005a      	lsls	r2, r3, #1
 80020ea:	0fdb      	lsrs	r3, r3, #31
 80020ec:	469b      	mov	fp, r3
 80020ee:	0b36      	lsrs	r6, r6, #12
 80020f0:	0d64      	lsrs	r4, r4, #21
 80020f2:	0fc9      	lsrs	r1, r1, #31
 80020f4:	0d52      	lsrs	r2, r2, #21
 80020f6:	4284      	cmp	r4, r0
 80020f8:	d019      	beq.n	800212e <__eqdf2+0x66>
 80020fa:	4282      	cmp	r2, r0
 80020fc:	d010      	beq.n	8002120 <__eqdf2+0x58>
 80020fe:	2001      	movs	r0, #1
 8002100:	4294      	cmp	r4, r2
 8002102:	d10e      	bne.n	8002122 <__eqdf2+0x5a>
 8002104:	454e      	cmp	r6, r9
 8002106:	d10c      	bne.n	8002122 <__eqdf2+0x5a>
 8002108:	2001      	movs	r0, #1
 800210a:	45c4      	cmp	ip, r8
 800210c:	d109      	bne.n	8002122 <__eqdf2+0x5a>
 800210e:	4559      	cmp	r1, fp
 8002110:	d017      	beq.n	8002142 <__eqdf2+0x7a>
 8002112:	2c00      	cmp	r4, #0
 8002114:	d105      	bne.n	8002122 <__eqdf2+0x5a>
 8002116:	0030      	movs	r0, r6
 8002118:	4328      	orrs	r0, r5
 800211a:	1e43      	subs	r3, r0, #1
 800211c:	4198      	sbcs	r0, r3
 800211e:	e000      	b.n	8002122 <__eqdf2+0x5a>
 8002120:	2001      	movs	r0, #1
 8002122:	bcf0      	pop	{r4, r5, r6, r7}
 8002124:	46bb      	mov	fp, r7
 8002126:	46b2      	mov	sl, r6
 8002128:	46a9      	mov	r9, r5
 800212a:	46a0      	mov	r8, r4
 800212c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800212e:	0033      	movs	r3, r6
 8002130:	2001      	movs	r0, #1
 8002132:	432b      	orrs	r3, r5
 8002134:	d1f5      	bne.n	8002122 <__eqdf2+0x5a>
 8002136:	42a2      	cmp	r2, r4
 8002138:	d1f3      	bne.n	8002122 <__eqdf2+0x5a>
 800213a:	464b      	mov	r3, r9
 800213c:	433b      	orrs	r3, r7
 800213e:	d1f0      	bne.n	8002122 <__eqdf2+0x5a>
 8002140:	e7e2      	b.n	8002108 <__eqdf2+0x40>
 8002142:	2000      	movs	r0, #0
 8002144:	e7ed      	b.n	8002122 <__eqdf2+0x5a>
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	000007ff 	.word	0x000007ff

0800214c <__gedf2>:
 800214c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214e:	4647      	mov	r7, r8
 8002150:	46ce      	mov	lr, r9
 8002152:	0004      	movs	r4, r0
 8002154:	0018      	movs	r0, r3
 8002156:	0016      	movs	r6, r2
 8002158:	031b      	lsls	r3, r3, #12
 800215a:	0b1b      	lsrs	r3, r3, #12
 800215c:	4d2d      	ldr	r5, [pc, #180]	; (8002214 <__gedf2+0xc8>)
 800215e:	004a      	lsls	r2, r1, #1
 8002160:	4699      	mov	r9, r3
 8002162:	b580      	push	{r7, lr}
 8002164:	0043      	lsls	r3, r0, #1
 8002166:	030f      	lsls	r7, r1, #12
 8002168:	46a4      	mov	ip, r4
 800216a:	46b0      	mov	r8, r6
 800216c:	0b3f      	lsrs	r7, r7, #12
 800216e:	0d52      	lsrs	r2, r2, #21
 8002170:	0fc9      	lsrs	r1, r1, #31
 8002172:	0d5b      	lsrs	r3, r3, #21
 8002174:	0fc0      	lsrs	r0, r0, #31
 8002176:	42aa      	cmp	r2, r5
 8002178:	d021      	beq.n	80021be <__gedf2+0x72>
 800217a:	42ab      	cmp	r3, r5
 800217c:	d013      	beq.n	80021a6 <__gedf2+0x5a>
 800217e:	2a00      	cmp	r2, #0
 8002180:	d122      	bne.n	80021c8 <__gedf2+0x7c>
 8002182:	433c      	orrs	r4, r7
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <__gedf2+0x42>
 8002188:	464d      	mov	r5, r9
 800218a:	432e      	orrs	r6, r5
 800218c:	d022      	beq.n	80021d4 <__gedf2+0x88>
 800218e:	2c00      	cmp	r4, #0
 8002190:	d010      	beq.n	80021b4 <__gedf2+0x68>
 8002192:	4281      	cmp	r1, r0
 8002194:	d022      	beq.n	80021dc <__gedf2+0x90>
 8002196:	2002      	movs	r0, #2
 8002198:	3901      	subs	r1, #1
 800219a:	4008      	ands	r0, r1
 800219c:	3801      	subs	r0, #1
 800219e:	bcc0      	pop	{r6, r7}
 80021a0:	46b9      	mov	r9, r7
 80021a2:	46b0      	mov	r8, r6
 80021a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a6:	464d      	mov	r5, r9
 80021a8:	432e      	orrs	r6, r5
 80021aa:	d129      	bne.n	8002200 <__gedf2+0xb4>
 80021ac:	2a00      	cmp	r2, #0
 80021ae:	d1f0      	bne.n	8002192 <__gedf2+0x46>
 80021b0:	433c      	orrs	r4, r7
 80021b2:	d1ee      	bne.n	8002192 <__gedf2+0x46>
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d1f2      	bne.n	800219e <__gedf2+0x52>
 80021b8:	2001      	movs	r0, #1
 80021ba:	4240      	negs	r0, r0
 80021bc:	e7ef      	b.n	800219e <__gedf2+0x52>
 80021be:	003d      	movs	r5, r7
 80021c0:	4325      	orrs	r5, r4
 80021c2:	d11d      	bne.n	8002200 <__gedf2+0xb4>
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d0ee      	beq.n	80021a6 <__gedf2+0x5a>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e2      	bne.n	8002192 <__gedf2+0x46>
 80021cc:	464c      	mov	r4, r9
 80021ce:	4326      	orrs	r6, r4
 80021d0:	d1df      	bne.n	8002192 <__gedf2+0x46>
 80021d2:	e7e0      	b.n	8002196 <__gedf2+0x4a>
 80021d4:	2000      	movs	r0, #0
 80021d6:	2c00      	cmp	r4, #0
 80021d8:	d0e1      	beq.n	800219e <__gedf2+0x52>
 80021da:	e7dc      	b.n	8002196 <__gedf2+0x4a>
 80021dc:	429a      	cmp	r2, r3
 80021de:	dc0a      	bgt.n	80021f6 <__gedf2+0xaa>
 80021e0:	dbe8      	blt.n	80021b4 <__gedf2+0x68>
 80021e2:	454f      	cmp	r7, r9
 80021e4:	d8d7      	bhi.n	8002196 <__gedf2+0x4a>
 80021e6:	d00e      	beq.n	8002206 <__gedf2+0xba>
 80021e8:	2000      	movs	r0, #0
 80021ea:	454f      	cmp	r7, r9
 80021ec:	d2d7      	bcs.n	800219e <__gedf2+0x52>
 80021ee:	2900      	cmp	r1, #0
 80021f0:	d0e2      	beq.n	80021b8 <__gedf2+0x6c>
 80021f2:	0008      	movs	r0, r1
 80021f4:	e7d3      	b.n	800219e <__gedf2+0x52>
 80021f6:	4243      	negs	r3, r0
 80021f8:	4158      	adcs	r0, r3
 80021fa:	0040      	lsls	r0, r0, #1
 80021fc:	3801      	subs	r0, #1
 80021fe:	e7ce      	b.n	800219e <__gedf2+0x52>
 8002200:	2002      	movs	r0, #2
 8002202:	4240      	negs	r0, r0
 8002204:	e7cb      	b.n	800219e <__gedf2+0x52>
 8002206:	45c4      	cmp	ip, r8
 8002208:	d8c5      	bhi.n	8002196 <__gedf2+0x4a>
 800220a:	2000      	movs	r0, #0
 800220c:	45c4      	cmp	ip, r8
 800220e:	d2c6      	bcs.n	800219e <__gedf2+0x52>
 8002210:	e7ed      	b.n	80021ee <__gedf2+0xa2>
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	000007ff 	.word	0x000007ff

08002218 <__ledf2>:
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221a:	4647      	mov	r7, r8
 800221c:	46ce      	mov	lr, r9
 800221e:	0004      	movs	r4, r0
 8002220:	0018      	movs	r0, r3
 8002222:	0016      	movs	r6, r2
 8002224:	031b      	lsls	r3, r3, #12
 8002226:	0b1b      	lsrs	r3, r3, #12
 8002228:	4d2c      	ldr	r5, [pc, #176]	; (80022dc <__ledf2+0xc4>)
 800222a:	004a      	lsls	r2, r1, #1
 800222c:	4699      	mov	r9, r3
 800222e:	b580      	push	{r7, lr}
 8002230:	0043      	lsls	r3, r0, #1
 8002232:	030f      	lsls	r7, r1, #12
 8002234:	46a4      	mov	ip, r4
 8002236:	46b0      	mov	r8, r6
 8002238:	0b3f      	lsrs	r7, r7, #12
 800223a:	0d52      	lsrs	r2, r2, #21
 800223c:	0fc9      	lsrs	r1, r1, #31
 800223e:	0d5b      	lsrs	r3, r3, #21
 8002240:	0fc0      	lsrs	r0, r0, #31
 8002242:	42aa      	cmp	r2, r5
 8002244:	d00d      	beq.n	8002262 <__ledf2+0x4a>
 8002246:	42ab      	cmp	r3, r5
 8002248:	d010      	beq.n	800226c <__ledf2+0x54>
 800224a:	2a00      	cmp	r2, #0
 800224c:	d127      	bne.n	800229e <__ledf2+0x86>
 800224e:	433c      	orrs	r4, r7
 8002250:	2b00      	cmp	r3, #0
 8002252:	d111      	bne.n	8002278 <__ledf2+0x60>
 8002254:	464d      	mov	r5, r9
 8002256:	432e      	orrs	r6, r5
 8002258:	d10e      	bne.n	8002278 <__ledf2+0x60>
 800225a:	2000      	movs	r0, #0
 800225c:	2c00      	cmp	r4, #0
 800225e:	d015      	beq.n	800228c <__ledf2+0x74>
 8002260:	e00e      	b.n	8002280 <__ledf2+0x68>
 8002262:	003d      	movs	r5, r7
 8002264:	4325      	orrs	r5, r4
 8002266:	d110      	bne.n	800228a <__ledf2+0x72>
 8002268:	4293      	cmp	r3, r2
 800226a:	d118      	bne.n	800229e <__ledf2+0x86>
 800226c:	464d      	mov	r5, r9
 800226e:	432e      	orrs	r6, r5
 8002270:	d10b      	bne.n	800228a <__ledf2+0x72>
 8002272:	2a00      	cmp	r2, #0
 8002274:	d102      	bne.n	800227c <__ledf2+0x64>
 8002276:	433c      	orrs	r4, r7
 8002278:	2c00      	cmp	r4, #0
 800227a:	d00b      	beq.n	8002294 <__ledf2+0x7c>
 800227c:	4281      	cmp	r1, r0
 800227e:	d014      	beq.n	80022aa <__ledf2+0x92>
 8002280:	2002      	movs	r0, #2
 8002282:	3901      	subs	r1, #1
 8002284:	4008      	ands	r0, r1
 8002286:	3801      	subs	r0, #1
 8002288:	e000      	b.n	800228c <__ledf2+0x74>
 800228a:	2002      	movs	r0, #2
 800228c:	bcc0      	pop	{r6, r7}
 800228e:	46b9      	mov	r9, r7
 8002290:	46b0      	mov	r8, r6
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002294:	2800      	cmp	r0, #0
 8002296:	d1f9      	bne.n	800228c <__ledf2+0x74>
 8002298:	2001      	movs	r0, #1
 800229a:	4240      	negs	r0, r0
 800229c:	e7f6      	b.n	800228c <__ledf2+0x74>
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1ec      	bne.n	800227c <__ledf2+0x64>
 80022a2:	464c      	mov	r4, r9
 80022a4:	4326      	orrs	r6, r4
 80022a6:	d1e9      	bne.n	800227c <__ledf2+0x64>
 80022a8:	e7ea      	b.n	8002280 <__ledf2+0x68>
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dd04      	ble.n	80022b8 <__ledf2+0xa0>
 80022ae:	4243      	negs	r3, r0
 80022b0:	4158      	adcs	r0, r3
 80022b2:	0040      	lsls	r0, r0, #1
 80022b4:	3801      	subs	r0, #1
 80022b6:	e7e9      	b.n	800228c <__ledf2+0x74>
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dbeb      	blt.n	8002294 <__ledf2+0x7c>
 80022bc:	454f      	cmp	r7, r9
 80022be:	d8df      	bhi.n	8002280 <__ledf2+0x68>
 80022c0:	d006      	beq.n	80022d0 <__ledf2+0xb8>
 80022c2:	2000      	movs	r0, #0
 80022c4:	454f      	cmp	r7, r9
 80022c6:	d2e1      	bcs.n	800228c <__ledf2+0x74>
 80022c8:	2900      	cmp	r1, #0
 80022ca:	d0e5      	beq.n	8002298 <__ledf2+0x80>
 80022cc:	0008      	movs	r0, r1
 80022ce:	e7dd      	b.n	800228c <__ledf2+0x74>
 80022d0:	45c4      	cmp	ip, r8
 80022d2:	d8d5      	bhi.n	8002280 <__ledf2+0x68>
 80022d4:	2000      	movs	r0, #0
 80022d6:	45c4      	cmp	ip, r8
 80022d8:	d2d8      	bcs.n	800228c <__ledf2+0x74>
 80022da:	e7f5      	b.n	80022c8 <__ledf2+0xb0>
 80022dc:	000007ff 	.word	0x000007ff

080022e0 <__aeabi_dmul>:
 80022e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e2:	4657      	mov	r7, sl
 80022e4:	464e      	mov	r6, r9
 80022e6:	4645      	mov	r5, r8
 80022e8:	46de      	mov	lr, fp
 80022ea:	b5e0      	push	{r5, r6, r7, lr}
 80022ec:	4698      	mov	r8, r3
 80022ee:	030c      	lsls	r4, r1, #12
 80022f0:	004b      	lsls	r3, r1, #1
 80022f2:	0006      	movs	r6, r0
 80022f4:	4692      	mov	sl, r2
 80022f6:	b087      	sub	sp, #28
 80022f8:	0b24      	lsrs	r4, r4, #12
 80022fa:	0d5b      	lsrs	r3, r3, #21
 80022fc:	0fcf      	lsrs	r7, r1, #31
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d100      	bne.n	8002304 <__aeabi_dmul+0x24>
 8002302:	e15c      	b.n	80025be <__aeabi_dmul+0x2de>
 8002304:	4ad9      	ldr	r2, [pc, #868]	; (800266c <__aeabi_dmul+0x38c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d100      	bne.n	800230c <__aeabi_dmul+0x2c>
 800230a:	e175      	b.n	80025f8 <__aeabi_dmul+0x318>
 800230c:	0f42      	lsrs	r2, r0, #29
 800230e:	00e4      	lsls	r4, r4, #3
 8002310:	4314      	orrs	r4, r2
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	0412      	lsls	r2, r2, #16
 8002316:	4314      	orrs	r4, r2
 8002318:	4ad5      	ldr	r2, [pc, #852]	; (8002670 <__aeabi_dmul+0x390>)
 800231a:	00c5      	lsls	r5, r0, #3
 800231c:	4694      	mov	ip, r2
 800231e:	4463      	add	r3, ip
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	4699      	mov	r9, r3
 8002326:	469b      	mov	fp, r3
 8002328:	4643      	mov	r3, r8
 800232a:	4642      	mov	r2, r8
 800232c:	031e      	lsls	r6, r3, #12
 800232e:	0fd2      	lsrs	r2, r2, #31
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4650      	mov	r0, sl
 8002334:	4690      	mov	r8, r2
 8002336:	0b36      	lsrs	r6, r6, #12
 8002338:	0d5b      	lsrs	r3, r3, #21
 800233a:	d100      	bne.n	800233e <__aeabi_dmul+0x5e>
 800233c:	e120      	b.n	8002580 <__aeabi_dmul+0x2a0>
 800233e:	4acb      	ldr	r2, [pc, #812]	; (800266c <__aeabi_dmul+0x38c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d100      	bne.n	8002346 <__aeabi_dmul+0x66>
 8002344:	e162      	b.n	800260c <__aeabi_dmul+0x32c>
 8002346:	49ca      	ldr	r1, [pc, #808]	; (8002670 <__aeabi_dmul+0x390>)
 8002348:	0f42      	lsrs	r2, r0, #29
 800234a:	468c      	mov	ip, r1
 800234c:	9900      	ldr	r1, [sp, #0]
 800234e:	4463      	add	r3, ip
 8002350:	00f6      	lsls	r6, r6, #3
 8002352:	468c      	mov	ip, r1
 8002354:	4316      	orrs	r6, r2
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	449c      	add	ip, r3
 800235a:	0412      	lsls	r2, r2, #16
 800235c:	4663      	mov	r3, ip
 800235e:	4316      	orrs	r6, r2
 8002360:	00c2      	lsls	r2, r0, #3
 8002362:	2000      	movs	r0, #0
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	9900      	ldr	r1, [sp, #0]
 8002368:	4643      	mov	r3, r8
 800236a:	3101      	adds	r1, #1
 800236c:	468c      	mov	ip, r1
 800236e:	4649      	mov	r1, r9
 8002370:	407b      	eors	r3, r7
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	290f      	cmp	r1, #15
 8002376:	d826      	bhi.n	80023c6 <__aeabi_dmul+0xe6>
 8002378:	4bbe      	ldr	r3, [pc, #760]	; (8002674 <__aeabi_dmul+0x394>)
 800237a:	0089      	lsls	r1, r1, #2
 800237c:	5859      	ldr	r1, [r3, r1]
 800237e:	468f      	mov	pc, r1
 8002380:	4643      	mov	r3, r8
 8002382:	9301      	str	r3, [sp, #4]
 8002384:	0034      	movs	r4, r6
 8002386:	0015      	movs	r5, r2
 8002388:	4683      	mov	fp, r0
 800238a:	465b      	mov	r3, fp
 800238c:	2b02      	cmp	r3, #2
 800238e:	d016      	beq.n	80023be <__aeabi_dmul+0xde>
 8002390:	2b03      	cmp	r3, #3
 8002392:	d100      	bne.n	8002396 <__aeabi_dmul+0xb6>
 8002394:	e203      	b.n	800279e <__aeabi_dmul+0x4be>
 8002396:	2b01      	cmp	r3, #1
 8002398:	d000      	beq.n	800239c <__aeabi_dmul+0xbc>
 800239a:	e0cd      	b.n	8002538 <__aeabi_dmul+0x258>
 800239c:	2200      	movs	r2, #0
 800239e:	2400      	movs	r4, #0
 80023a0:	2500      	movs	r5, #0
 80023a2:	9b01      	ldr	r3, [sp, #4]
 80023a4:	0512      	lsls	r2, r2, #20
 80023a6:	4322      	orrs	r2, r4
 80023a8:	07db      	lsls	r3, r3, #31
 80023aa:	431a      	orrs	r2, r3
 80023ac:	0028      	movs	r0, r5
 80023ae:	0011      	movs	r1, r2
 80023b0:	b007      	add	sp, #28
 80023b2:	bcf0      	pop	{r4, r5, r6, r7}
 80023b4:	46bb      	mov	fp, r7
 80023b6:	46b2      	mov	sl, r6
 80023b8:	46a9      	mov	r9, r5
 80023ba:	46a0      	mov	r8, r4
 80023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023be:	2400      	movs	r4, #0
 80023c0:	2500      	movs	r5, #0
 80023c2:	4aaa      	ldr	r2, [pc, #680]	; (800266c <__aeabi_dmul+0x38c>)
 80023c4:	e7ed      	b.n	80023a2 <__aeabi_dmul+0xc2>
 80023c6:	0c28      	lsrs	r0, r5, #16
 80023c8:	042d      	lsls	r5, r5, #16
 80023ca:	0c2d      	lsrs	r5, r5, #16
 80023cc:	002b      	movs	r3, r5
 80023ce:	0c11      	lsrs	r1, r2, #16
 80023d0:	0412      	lsls	r2, r2, #16
 80023d2:	0c12      	lsrs	r2, r2, #16
 80023d4:	4353      	muls	r3, r2
 80023d6:	4698      	mov	r8, r3
 80023d8:	0013      	movs	r3, r2
 80023da:	002f      	movs	r7, r5
 80023dc:	4343      	muls	r3, r0
 80023de:	4699      	mov	r9, r3
 80023e0:	434f      	muls	r7, r1
 80023e2:	444f      	add	r7, r9
 80023e4:	46bb      	mov	fp, r7
 80023e6:	4647      	mov	r7, r8
 80023e8:	000b      	movs	r3, r1
 80023ea:	0c3f      	lsrs	r7, r7, #16
 80023ec:	46ba      	mov	sl, r7
 80023ee:	4343      	muls	r3, r0
 80023f0:	44da      	add	sl, fp
 80023f2:	9302      	str	r3, [sp, #8]
 80023f4:	45d1      	cmp	r9, sl
 80023f6:	d904      	bls.n	8002402 <__aeabi_dmul+0x122>
 80023f8:	2780      	movs	r7, #128	; 0x80
 80023fa:	027f      	lsls	r7, r7, #9
 80023fc:	46b9      	mov	r9, r7
 80023fe:	444b      	add	r3, r9
 8002400:	9302      	str	r3, [sp, #8]
 8002402:	4653      	mov	r3, sl
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	469b      	mov	fp, r3
 8002408:	4653      	mov	r3, sl
 800240a:	041f      	lsls	r7, r3, #16
 800240c:	4643      	mov	r3, r8
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	4698      	mov	r8, r3
 8002414:	003b      	movs	r3, r7
 8002416:	4443      	add	r3, r8
 8002418:	9304      	str	r3, [sp, #16]
 800241a:	0c33      	lsrs	r3, r6, #16
 800241c:	0436      	lsls	r6, r6, #16
 800241e:	0c36      	lsrs	r6, r6, #16
 8002420:	4698      	mov	r8, r3
 8002422:	0033      	movs	r3, r6
 8002424:	4343      	muls	r3, r0
 8002426:	4699      	mov	r9, r3
 8002428:	4643      	mov	r3, r8
 800242a:	4343      	muls	r3, r0
 800242c:	002f      	movs	r7, r5
 800242e:	469a      	mov	sl, r3
 8002430:	4643      	mov	r3, r8
 8002432:	4377      	muls	r7, r6
 8002434:	435d      	muls	r5, r3
 8002436:	0c38      	lsrs	r0, r7, #16
 8002438:	444d      	add	r5, r9
 800243a:	1945      	adds	r5, r0, r5
 800243c:	45a9      	cmp	r9, r5
 800243e:	d903      	bls.n	8002448 <__aeabi_dmul+0x168>
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	025b      	lsls	r3, r3, #9
 8002444:	4699      	mov	r9, r3
 8002446:	44ca      	add	sl, r9
 8002448:	043f      	lsls	r7, r7, #16
 800244a:	0c28      	lsrs	r0, r5, #16
 800244c:	0c3f      	lsrs	r7, r7, #16
 800244e:	042d      	lsls	r5, r5, #16
 8002450:	19ed      	adds	r5, r5, r7
 8002452:	0c27      	lsrs	r7, r4, #16
 8002454:	0424      	lsls	r4, r4, #16
 8002456:	0c24      	lsrs	r4, r4, #16
 8002458:	0003      	movs	r3, r0
 800245a:	0020      	movs	r0, r4
 800245c:	4350      	muls	r0, r2
 800245e:	437a      	muls	r2, r7
 8002460:	4691      	mov	r9, r2
 8002462:	003a      	movs	r2, r7
 8002464:	4453      	add	r3, sl
 8002466:	9305      	str	r3, [sp, #20]
 8002468:	0c03      	lsrs	r3, r0, #16
 800246a:	469a      	mov	sl, r3
 800246c:	434a      	muls	r2, r1
 800246e:	4361      	muls	r1, r4
 8002470:	4449      	add	r1, r9
 8002472:	4451      	add	r1, sl
 8002474:	44ab      	add	fp, r5
 8002476:	4589      	cmp	r9, r1
 8002478:	d903      	bls.n	8002482 <__aeabi_dmul+0x1a2>
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	025b      	lsls	r3, r3, #9
 800247e:	4699      	mov	r9, r3
 8002480:	444a      	add	r2, r9
 8002482:	0400      	lsls	r0, r0, #16
 8002484:	0c0b      	lsrs	r3, r1, #16
 8002486:	0c00      	lsrs	r0, r0, #16
 8002488:	0409      	lsls	r1, r1, #16
 800248a:	1809      	adds	r1, r1, r0
 800248c:	0020      	movs	r0, r4
 800248e:	4699      	mov	r9, r3
 8002490:	4643      	mov	r3, r8
 8002492:	4370      	muls	r0, r6
 8002494:	435c      	muls	r4, r3
 8002496:	437e      	muls	r6, r7
 8002498:	435f      	muls	r7, r3
 800249a:	0c03      	lsrs	r3, r0, #16
 800249c:	4698      	mov	r8, r3
 800249e:	19a4      	adds	r4, r4, r6
 80024a0:	4444      	add	r4, r8
 80024a2:	444a      	add	r2, r9
 80024a4:	9703      	str	r7, [sp, #12]
 80024a6:	42a6      	cmp	r6, r4
 80024a8:	d904      	bls.n	80024b4 <__aeabi_dmul+0x1d4>
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	025b      	lsls	r3, r3, #9
 80024ae:	4698      	mov	r8, r3
 80024b0:	4447      	add	r7, r8
 80024b2:	9703      	str	r7, [sp, #12]
 80024b4:	0423      	lsls	r3, r4, #16
 80024b6:	9e02      	ldr	r6, [sp, #8]
 80024b8:	469a      	mov	sl, r3
 80024ba:	9b05      	ldr	r3, [sp, #20]
 80024bc:	445e      	add	r6, fp
 80024be:	4698      	mov	r8, r3
 80024c0:	42ae      	cmp	r6, r5
 80024c2:	41ad      	sbcs	r5, r5
 80024c4:	1876      	adds	r6, r6, r1
 80024c6:	428e      	cmp	r6, r1
 80024c8:	4189      	sbcs	r1, r1
 80024ca:	0400      	lsls	r0, r0, #16
 80024cc:	0c00      	lsrs	r0, r0, #16
 80024ce:	4450      	add	r0, sl
 80024d0:	4440      	add	r0, r8
 80024d2:	426d      	negs	r5, r5
 80024d4:	1947      	adds	r7, r0, r5
 80024d6:	46b8      	mov	r8, r7
 80024d8:	4693      	mov	fp, r2
 80024da:	4249      	negs	r1, r1
 80024dc:	4689      	mov	r9, r1
 80024de:	44c3      	add	fp, r8
 80024e0:	44d9      	add	r9, fp
 80024e2:	4298      	cmp	r0, r3
 80024e4:	4180      	sbcs	r0, r0
 80024e6:	45a8      	cmp	r8, r5
 80024e8:	41ad      	sbcs	r5, r5
 80024ea:	4593      	cmp	fp, r2
 80024ec:	4192      	sbcs	r2, r2
 80024ee:	4589      	cmp	r9, r1
 80024f0:	4189      	sbcs	r1, r1
 80024f2:	426d      	negs	r5, r5
 80024f4:	4240      	negs	r0, r0
 80024f6:	4328      	orrs	r0, r5
 80024f8:	0c24      	lsrs	r4, r4, #16
 80024fa:	4252      	negs	r2, r2
 80024fc:	4249      	negs	r1, r1
 80024fe:	430a      	orrs	r2, r1
 8002500:	9b03      	ldr	r3, [sp, #12]
 8002502:	1900      	adds	r0, r0, r4
 8002504:	1880      	adds	r0, r0, r2
 8002506:	18c7      	adds	r7, r0, r3
 8002508:	464b      	mov	r3, r9
 800250a:	0ddc      	lsrs	r4, r3, #23
 800250c:	9b04      	ldr	r3, [sp, #16]
 800250e:	0275      	lsls	r5, r6, #9
 8002510:	431d      	orrs	r5, r3
 8002512:	1e6a      	subs	r2, r5, #1
 8002514:	4195      	sbcs	r5, r2
 8002516:	464b      	mov	r3, r9
 8002518:	0df6      	lsrs	r6, r6, #23
 800251a:	027f      	lsls	r7, r7, #9
 800251c:	4335      	orrs	r5, r6
 800251e:	025a      	lsls	r2, r3, #9
 8002520:	433c      	orrs	r4, r7
 8002522:	4315      	orrs	r5, r2
 8002524:	01fb      	lsls	r3, r7, #7
 8002526:	d400      	bmi.n	800252a <__aeabi_dmul+0x24a>
 8002528:	e11c      	b.n	8002764 <__aeabi_dmul+0x484>
 800252a:	2101      	movs	r1, #1
 800252c:	086a      	lsrs	r2, r5, #1
 800252e:	400d      	ands	r5, r1
 8002530:	4315      	orrs	r5, r2
 8002532:	07e2      	lsls	r2, r4, #31
 8002534:	4315      	orrs	r5, r2
 8002536:	0864      	lsrs	r4, r4, #1
 8002538:	494f      	ldr	r1, [pc, #316]	; (8002678 <__aeabi_dmul+0x398>)
 800253a:	4461      	add	r1, ip
 800253c:	2900      	cmp	r1, #0
 800253e:	dc00      	bgt.n	8002542 <__aeabi_dmul+0x262>
 8002540:	e0b0      	b.n	80026a4 <__aeabi_dmul+0x3c4>
 8002542:	076b      	lsls	r3, r5, #29
 8002544:	d009      	beq.n	800255a <__aeabi_dmul+0x27a>
 8002546:	220f      	movs	r2, #15
 8002548:	402a      	ands	r2, r5
 800254a:	2a04      	cmp	r2, #4
 800254c:	d005      	beq.n	800255a <__aeabi_dmul+0x27a>
 800254e:	1d2a      	adds	r2, r5, #4
 8002550:	42aa      	cmp	r2, r5
 8002552:	41ad      	sbcs	r5, r5
 8002554:	426d      	negs	r5, r5
 8002556:	1964      	adds	r4, r4, r5
 8002558:	0015      	movs	r5, r2
 800255a:	01e3      	lsls	r3, r4, #7
 800255c:	d504      	bpl.n	8002568 <__aeabi_dmul+0x288>
 800255e:	2180      	movs	r1, #128	; 0x80
 8002560:	4a46      	ldr	r2, [pc, #280]	; (800267c <__aeabi_dmul+0x39c>)
 8002562:	00c9      	lsls	r1, r1, #3
 8002564:	4014      	ands	r4, r2
 8002566:	4461      	add	r1, ip
 8002568:	4a45      	ldr	r2, [pc, #276]	; (8002680 <__aeabi_dmul+0x3a0>)
 800256a:	4291      	cmp	r1, r2
 800256c:	dd00      	ble.n	8002570 <__aeabi_dmul+0x290>
 800256e:	e726      	b.n	80023be <__aeabi_dmul+0xde>
 8002570:	0762      	lsls	r2, r4, #29
 8002572:	08ed      	lsrs	r5, r5, #3
 8002574:	0264      	lsls	r4, r4, #9
 8002576:	0549      	lsls	r1, r1, #21
 8002578:	4315      	orrs	r5, r2
 800257a:	0b24      	lsrs	r4, r4, #12
 800257c:	0d4a      	lsrs	r2, r1, #21
 800257e:	e710      	b.n	80023a2 <__aeabi_dmul+0xc2>
 8002580:	4652      	mov	r2, sl
 8002582:	4332      	orrs	r2, r6
 8002584:	d100      	bne.n	8002588 <__aeabi_dmul+0x2a8>
 8002586:	e07f      	b.n	8002688 <__aeabi_dmul+0x3a8>
 8002588:	2e00      	cmp	r6, #0
 800258a:	d100      	bne.n	800258e <__aeabi_dmul+0x2ae>
 800258c:	e0dc      	b.n	8002748 <__aeabi_dmul+0x468>
 800258e:	0030      	movs	r0, r6
 8002590:	f000 fe1e 	bl	80031d0 <__clzsi2>
 8002594:	0002      	movs	r2, r0
 8002596:	3a0b      	subs	r2, #11
 8002598:	231d      	movs	r3, #29
 800259a:	0001      	movs	r1, r0
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	4652      	mov	r2, sl
 80025a0:	3908      	subs	r1, #8
 80025a2:	40da      	lsrs	r2, r3
 80025a4:	408e      	lsls	r6, r1
 80025a6:	4316      	orrs	r6, r2
 80025a8:	4652      	mov	r2, sl
 80025aa:	408a      	lsls	r2, r1
 80025ac:	9b00      	ldr	r3, [sp, #0]
 80025ae:	4935      	ldr	r1, [pc, #212]	; (8002684 <__aeabi_dmul+0x3a4>)
 80025b0:	1a18      	subs	r0, r3, r0
 80025b2:	0003      	movs	r3, r0
 80025b4:	468c      	mov	ip, r1
 80025b6:	4463      	add	r3, ip
 80025b8:	2000      	movs	r0, #0
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	e6d3      	b.n	8002366 <__aeabi_dmul+0x86>
 80025be:	0025      	movs	r5, r4
 80025c0:	4305      	orrs	r5, r0
 80025c2:	d04a      	beq.n	800265a <__aeabi_dmul+0x37a>
 80025c4:	2c00      	cmp	r4, #0
 80025c6:	d100      	bne.n	80025ca <__aeabi_dmul+0x2ea>
 80025c8:	e0b0      	b.n	800272c <__aeabi_dmul+0x44c>
 80025ca:	0020      	movs	r0, r4
 80025cc:	f000 fe00 	bl	80031d0 <__clzsi2>
 80025d0:	0001      	movs	r1, r0
 80025d2:	0002      	movs	r2, r0
 80025d4:	390b      	subs	r1, #11
 80025d6:	231d      	movs	r3, #29
 80025d8:	0010      	movs	r0, r2
 80025da:	1a5b      	subs	r3, r3, r1
 80025dc:	0031      	movs	r1, r6
 80025de:	0035      	movs	r5, r6
 80025e0:	3808      	subs	r0, #8
 80025e2:	4084      	lsls	r4, r0
 80025e4:	40d9      	lsrs	r1, r3
 80025e6:	4085      	lsls	r5, r0
 80025e8:	430c      	orrs	r4, r1
 80025ea:	4826      	ldr	r0, [pc, #152]	; (8002684 <__aeabi_dmul+0x3a4>)
 80025ec:	1a83      	subs	r3, r0, r2
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2300      	movs	r3, #0
 80025f2:	4699      	mov	r9, r3
 80025f4:	469b      	mov	fp, r3
 80025f6:	e697      	b.n	8002328 <__aeabi_dmul+0x48>
 80025f8:	0005      	movs	r5, r0
 80025fa:	4325      	orrs	r5, r4
 80025fc:	d126      	bne.n	800264c <__aeabi_dmul+0x36c>
 80025fe:	2208      	movs	r2, #8
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2302      	movs	r3, #2
 8002604:	2400      	movs	r4, #0
 8002606:	4691      	mov	r9, r2
 8002608:	469b      	mov	fp, r3
 800260a:	e68d      	b.n	8002328 <__aeabi_dmul+0x48>
 800260c:	4652      	mov	r2, sl
 800260e:	9b00      	ldr	r3, [sp, #0]
 8002610:	4332      	orrs	r2, r6
 8002612:	d110      	bne.n	8002636 <__aeabi_dmul+0x356>
 8002614:	4915      	ldr	r1, [pc, #84]	; (800266c <__aeabi_dmul+0x38c>)
 8002616:	2600      	movs	r6, #0
 8002618:	468c      	mov	ip, r1
 800261a:	4463      	add	r3, ip
 800261c:	4649      	mov	r1, r9
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2302      	movs	r3, #2
 8002622:	4319      	orrs	r1, r3
 8002624:	4689      	mov	r9, r1
 8002626:	2002      	movs	r0, #2
 8002628:	e69d      	b.n	8002366 <__aeabi_dmul+0x86>
 800262a:	465b      	mov	r3, fp
 800262c:	9701      	str	r7, [sp, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d000      	beq.n	8002634 <__aeabi_dmul+0x354>
 8002632:	e6ad      	b.n	8002390 <__aeabi_dmul+0xb0>
 8002634:	e6c3      	b.n	80023be <__aeabi_dmul+0xde>
 8002636:	4a0d      	ldr	r2, [pc, #52]	; (800266c <__aeabi_dmul+0x38c>)
 8002638:	2003      	movs	r0, #3
 800263a:	4694      	mov	ip, r2
 800263c:	4463      	add	r3, ip
 800263e:	464a      	mov	r2, r9
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2303      	movs	r3, #3
 8002644:	431a      	orrs	r2, r3
 8002646:	4691      	mov	r9, r2
 8002648:	4652      	mov	r2, sl
 800264a:	e68c      	b.n	8002366 <__aeabi_dmul+0x86>
 800264c:	220c      	movs	r2, #12
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2303      	movs	r3, #3
 8002652:	0005      	movs	r5, r0
 8002654:	4691      	mov	r9, r2
 8002656:	469b      	mov	fp, r3
 8002658:	e666      	b.n	8002328 <__aeabi_dmul+0x48>
 800265a:	2304      	movs	r3, #4
 800265c:	4699      	mov	r9, r3
 800265e:	2300      	movs	r3, #0
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	2400      	movs	r4, #0
 8002666:	469b      	mov	fp, r3
 8002668:	e65e      	b.n	8002328 <__aeabi_dmul+0x48>
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	000007ff 	.word	0x000007ff
 8002670:	fffffc01 	.word	0xfffffc01
 8002674:	0800e380 	.word	0x0800e380
 8002678:	000003ff 	.word	0x000003ff
 800267c:	feffffff 	.word	0xfeffffff
 8002680:	000007fe 	.word	0x000007fe
 8002684:	fffffc0d 	.word	0xfffffc0d
 8002688:	4649      	mov	r1, r9
 800268a:	2301      	movs	r3, #1
 800268c:	4319      	orrs	r1, r3
 800268e:	4689      	mov	r9, r1
 8002690:	2600      	movs	r6, #0
 8002692:	2001      	movs	r0, #1
 8002694:	e667      	b.n	8002366 <__aeabi_dmul+0x86>
 8002696:	2300      	movs	r3, #0
 8002698:	2480      	movs	r4, #128	; 0x80
 800269a:	2500      	movs	r5, #0
 800269c:	4a43      	ldr	r2, [pc, #268]	; (80027ac <__aeabi_dmul+0x4cc>)
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	0324      	lsls	r4, r4, #12
 80026a2:	e67e      	b.n	80023a2 <__aeabi_dmul+0xc2>
 80026a4:	2001      	movs	r0, #1
 80026a6:	1a40      	subs	r0, r0, r1
 80026a8:	2838      	cmp	r0, #56	; 0x38
 80026aa:	dd00      	ble.n	80026ae <__aeabi_dmul+0x3ce>
 80026ac:	e676      	b.n	800239c <__aeabi_dmul+0xbc>
 80026ae:	281f      	cmp	r0, #31
 80026b0:	dd5b      	ble.n	800276a <__aeabi_dmul+0x48a>
 80026b2:	221f      	movs	r2, #31
 80026b4:	0023      	movs	r3, r4
 80026b6:	4252      	negs	r2, r2
 80026b8:	1a51      	subs	r1, r2, r1
 80026ba:	40cb      	lsrs	r3, r1
 80026bc:	0019      	movs	r1, r3
 80026be:	2820      	cmp	r0, #32
 80026c0:	d003      	beq.n	80026ca <__aeabi_dmul+0x3ea>
 80026c2:	4a3b      	ldr	r2, [pc, #236]	; (80027b0 <__aeabi_dmul+0x4d0>)
 80026c4:	4462      	add	r2, ip
 80026c6:	4094      	lsls	r4, r2
 80026c8:	4325      	orrs	r5, r4
 80026ca:	1e6a      	subs	r2, r5, #1
 80026cc:	4195      	sbcs	r5, r2
 80026ce:	002a      	movs	r2, r5
 80026d0:	430a      	orrs	r2, r1
 80026d2:	2107      	movs	r1, #7
 80026d4:	000d      	movs	r5, r1
 80026d6:	2400      	movs	r4, #0
 80026d8:	4015      	ands	r5, r2
 80026da:	4211      	tst	r1, r2
 80026dc:	d05b      	beq.n	8002796 <__aeabi_dmul+0x4b6>
 80026de:	210f      	movs	r1, #15
 80026e0:	2400      	movs	r4, #0
 80026e2:	4011      	ands	r1, r2
 80026e4:	2904      	cmp	r1, #4
 80026e6:	d053      	beq.n	8002790 <__aeabi_dmul+0x4b0>
 80026e8:	1d11      	adds	r1, r2, #4
 80026ea:	4291      	cmp	r1, r2
 80026ec:	4192      	sbcs	r2, r2
 80026ee:	4252      	negs	r2, r2
 80026f0:	18a4      	adds	r4, r4, r2
 80026f2:	000a      	movs	r2, r1
 80026f4:	0223      	lsls	r3, r4, #8
 80026f6:	d54b      	bpl.n	8002790 <__aeabi_dmul+0x4b0>
 80026f8:	2201      	movs	r2, #1
 80026fa:	2400      	movs	r4, #0
 80026fc:	2500      	movs	r5, #0
 80026fe:	e650      	b.n	80023a2 <__aeabi_dmul+0xc2>
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	031b      	lsls	r3, r3, #12
 8002704:	421c      	tst	r4, r3
 8002706:	d009      	beq.n	800271c <__aeabi_dmul+0x43c>
 8002708:	421e      	tst	r6, r3
 800270a:	d107      	bne.n	800271c <__aeabi_dmul+0x43c>
 800270c:	4333      	orrs	r3, r6
 800270e:	031c      	lsls	r4, r3, #12
 8002710:	4643      	mov	r3, r8
 8002712:	0015      	movs	r5, r2
 8002714:	0b24      	lsrs	r4, r4, #12
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <__aeabi_dmul+0x4cc>)
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	e642      	b.n	80023a2 <__aeabi_dmul+0xc2>
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	0312      	lsls	r2, r2, #12
 8002720:	4314      	orrs	r4, r2
 8002722:	0324      	lsls	r4, r4, #12
 8002724:	4a21      	ldr	r2, [pc, #132]	; (80027ac <__aeabi_dmul+0x4cc>)
 8002726:	0b24      	lsrs	r4, r4, #12
 8002728:	9701      	str	r7, [sp, #4]
 800272a:	e63a      	b.n	80023a2 <__aeabi_dmul+0xc2>
 800272c:	f000 fd50 	bl	80031d0 <__clzsi2>
 8002730:	0001      	movs	r1, r0
 8002732:	0002      	movs	r2, r0
 8002734:	3115      	adds	r1, #21
 8002736:	3220      	adds	r2, #32
 8002738:	291c      	cmp	r1, #28
 800273a:	dc00      	bgt.n	800273e <__aeabi_dmul+0x45e>
 800273c:	e74b      	b.n	80025d6 <__aeabi_dmul+0x2f6>
 800273e:	0034      	movs	r4, r6
 8002740:	3808      	subs	r0, #8
 8002742:	2500      	movs	r5, #0
 8002744:	4084      	lsls	r4, r0
 8002746:	e750      	b.n	80025ea <__aeabi_dmul+0x30a>
 8002748:	f000 fd42 	bl	80031d0 <__clzsi2>
 800274c:	0003      	movs	r3, r0
 800274e:	001a      	movs	r2, r3
 8002750:	3215      	adds	r2, #21
 8002752:	3020      	adds	r0, #32
 8002754:	2a1c      	cmp	r2, #28
 8002756:	dc00      	bgt.n	800275a <__aeabi_dmul+0x47a>
 8002758:	e71e      	b.n	8002598 <__aeabi_dmul+0x2b8>
 800275a:	4656      	mov	r6, sl
 800275c:	3b08      	subs	r3, #8
 800275e:	2200      	movs	r2, #0
 8002760:	409e      	lsls	r6, r3
 8002762:	e723      	b.n	80025ac <__aeabi_dmul+0x2cc>
 8002764:	9b00      	ldr	r3, [sp, #0]
 8002766:	469c      	mov	ip, r3
 8002768:	e6e6      	b.n	8002538 <__aeabi_dmul+0x258>
 800276a:	4912      	ldr	r1, [pc, #72]	; (80027b4 <__aeabi_dmul+0x4d4>)
 800276c:	0022      	movs	r2, r4
 800276e:	4461      	add	r1, ip
 8002770:	002e      	movs	r6, r5
 8002772:	408d      	lsls	r5, r1
 8002774:	408a      	lsls	r2, r1
 8002776:	40c6      	lsrs	r6, r0
 8002778:	1e69      	subs	r1, r5, #1
 800277a:	418d      	sbcs	r5, r1
 800277c:	4332      	orrs	r2, r6
 800277e:	432a      	orrs	r2, r5
 8002780:	40c4      	lsrs	r4, r0
 8002782:	0753      	lsls	r3, r2, #29
 8002784:	d0b6      	beq.n	80026f4 <__aeabi_dmul+0x414>
 8002786:	210f      	movs	r1, #15
 8002788:	4011      	ands	r1, r2
 800278a:	2904      	cmp	r1, #4
 800278c:	d1ac      	bne.n	80026e8 <__aeabi_dmul+0x408>
 800278e:	e7b1      	b.n	80026f4 <__aeabi_dmul+0x414>
 8002790:	0765      	lsls	r5, r4, #29
 8002792:	0264      	lsls	r4, r4, #9
 8002794:	0b24      	lsrs	r4, r4, #12
 8002796:	08d2      	lsrs	r2, r2, #3
 8002798:	4315      	orrs	r5, r2
 800279a:	2200      	movs	r2, #0
 800279c:	e601      	b.n	80023a2 <__aeabi_dmul+0xc2>
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	0312      	lsls	r2, r2, #12
 80027a2:	4314      	orrs	r4, r2
 80027a4:	0324      	lsls	r4, r4, #12
 80027a6:	4a01      	ldr	r2, [pc, #4]	; (80027ac <__aeabi_dmul+0x4cc>)
 80027a8:	0b24      	lsrs	r4, r4, #12
 80027aa:	e5fa      	b.n	80023a2 <__aeabi_dmul+0xc2>
 80027ac:	000007ff 	.word	0x000007ff
 80027b0:	0000043e 	.word	0x0000043e
 80027b4:	0000041e 	.word	0x0000041e

080027b8 <__aeabi_dsub>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	4657      	mov	r7, sl
 80027bc:	464e      	mov	r6, r9
 80027be:	4645      	mov	r5, r8
 80027c0:	46de      	mov	lr, fp
 80027c2:	b5e0      	push	{r5, r6, r7, lr}
 80027c4:	001e      	movs	r6, r3
 80027c6:	0017      	movs	r7, r2
 80027c8:	004a      	lsls	r2, r1, #1
 80027ca:	030b      	lsls	r3, r1, #12
 80027cc:	0d52      	lsrs	r2, r2, #21
 80027ce:	0a5b      	lsrs	r3, r3, #9
 80027d0:	4690      	mov	r8, r2
 80027d2:	0f42      	lsrs	r2, r0, #29
 80027d4:	431a      	orrs	r2, r3
 80027d6:	0fcd      	lsrs	r5, r1, #31
 80027d8:	4ccd      	ldr	r4, [pc, #820]	; (8002b10 <__aeabi_dsub+0x358>)
 80027da:	0331      	lsls	r1, r6, #12
 80027dc:	00c3      	lsls	r3, r0, #3
 80027de:	4694      	mov	ip, r2
 80027e0:	0070      	lsls	r0, r6, #1
 80027e2:	0f7a      	lsrs	r2, r7, #29
 80027e4:	0a49      	lsrs	r1, r1, #9
 80027e6:	00ff      	lsls	r7, r7, #3
 80027e8:	469a      	mov	sl, r3
 80027ea:	46b9      	mov	r9, r7
 80027ec:	0d40      	lsrs	r0, r0, #21
 80027ee:	0ff6      	lsrs	r6, r6, #31
 80027f0:	4311      	orrs	r1, r2
 80027f2:	42a0      	cmp	r0, r4
 80027f4:	d100      	bne.n	80027f8 <__aeabi_dsub+0x40>
 80027f6:	e0b1      	b.n	800295c <__aeabi_dsub+0x1a4>
 80027f8:	2201      	movs	r2, #1
 80027fa:	4056      	eors	r6, r2
 80027fc:	46b3      	mov	fp, r6
 80027fe:	42b5      	cmp	r5, r6
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x4c>
 8002802:	e088      	b.n	8002916 <__aeabi_dsub+0x15e>
 8002804:	4642      	mov	r2, r8
 8002806:	1a12      	subs	r2, r2, r0
 8002808:	2a00      	cmp	r2, #0
 800280a:	dc00      	bgt.n	800280e <__aeabi_dsub+0x56>
 800280c:	e0ae      	b.n	800296c <__aeabi_dsub+0x1b4>
 800280e:	2800      	cmp	r0, #0
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x5c>
 8002812:	e0c1      	b.n	8002998 <__aeabi_dsub+0x1e0>
 8002814:	48be      	ldr	r0, [pc, #760]	; (8002b10 <__aeabi_dsub+0x358>)
 8002816:	4580      	cmp	r8, r0
 8002818:	d100      	bne.n	800281c <__aeabi_dsub+0x64>
 800281a:	e151      	b.n	8002ac0 <__aeabi_dsub+0x308>
 800281c:	2080      	movs	r0, #128	; 0x80
 800281e:	0400      	lsls	r0, r0, #16
 8002820:	4301      	orrs	r1, r0
 8002822:	2a38      	cmp	r2, #56	; 0x38
 8002824:	dd00      	ble.n	8002828 <__aeabi_dsub+0x70>
 8002826:	e17b      	b.n	8002b20 <__aeabi_dsub+0x368>
 8002828:	2a1f      	cmp	r2, #31
 800282a:	dd00      	ble.n	800282e <__aeabi_dsub+0x76>
 800282c:	e1ee      	b.n	8002c0c <__aeabi_dsub+0x454>
 800282e:	2020      	movs	r0, #32
 8002830:	003e      	movs	r6, r7
 8002832:	1a80      	subs	r0, r0, r2
 8002834:	000c      	movs	r4, r1
 8002836:	40d6      	lsrs	r6, r2
 8002838:	40d1      	lsrs	r1, r2
 800283a:	4087      	lsls	r7, r0
 800283c:	4662      	mov	r2, ip
 800283e:	4084      	lsls	r4, r0
 8002840:	1a52      	subs	r2, r2, r1
 8002842:	1e78      	subs	r0, r7, #1
 8002844:	4187      	sbcs	r7, r0
 8002846:	4694      	mov	ip, r2
 8002848:	4334      	orrs	r4, r6
 800284a:	4327      	orrs	r7, r4
 800284c:	1bdc      	subs	r4, r3, r7
 800284e:	42a3      	cmp	r3, r4
 8002850:	419b      	sbcs	r3, r3
 8002852:	4662      	mov	r2, ip
 8002854:	425b      	negs	r3, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	4699      	mov	r9, r3
 800285a:	464b      	mov	r3, r9
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	d400      	bmi.n	8002862 <__aeabi_dsub+0xaa>
 8002860:	e118      	b.n	8002a94 <__aeabi_dsub+0x2dc>
 8002862:	464b      	mov	r3, r9
 8002864:	0258      	lsls	r0, r3, #9
 8002866:	0a43      	lsrs	r3, r0, #9
 8002868:	4699      	mov	r9, r3
 800286a:	464b      	mov	r3, r9
 800286c:	2b00      	cmp	r3, #0
 800286e:	d100      	bne.n	8002872 <__aeabi_dsub+0xba>
 8002870:	e137      	b.n	8002ae2 <__aeabi_dsub+0x32a>
 8002872:	4648      	mov	r0, r9
 8002874:	f000 fcac 	bl	80031d0 <__clzsi2>
 8002878:	0001      	movs	r1, r0
 800287a:	3908      	subs	r1, #8
 800287c:	2320      	movs	r3, #32
 800287e:	0022      	movs	r2, r4
 8002880:	4648      	mov	r0, r9
 8002882:	1a5b      	subs	r3, r3, r1
 8002884:	40da      	lsrs	r2, r3
 8002886:	4088      	lsls	r0, r1
 8002888:	408c      	lsls	r4, r1
 800288a:	4643      	mov	r3, r8
 800288c:	4310      	orrs	r0, r2
 800288e:	4588      	cmp	r8, r1
 8002890:	dd00      	ble.n	8002894 <__aeabi_dsub+0xdc>
 8002892:	e136      	b.n	8002b02 <__aeabi_dsub+0x34a>
 8002894:	1ac9      	subs	r1, r1, r3
 8002896:	1c4b      	adds	r3, r1, #1
 8002898:	2b1f      	cmp	r3, #31
 800289a:	dd00      	ble.n	800289e <__aeabi_dsub+0xe6>
 800289c:	e0ea      	b.n	8002a74 <__aeabi_dsub+0x2bc>
 800289e:	2220      	movs	r2, #32
 80028a0:	0026      	movs	r6, r4
 80028a2:	1ad2      	subs	r2, r2, r3
 80028a4:	0001      	movs	r1, r0
 80028a6:	4094      	lsls	r4, r2
 80028a8:	40de      	lsrs	r6, r3
 80028aa:	40d8      	lsrs	r0, r3
 80028ac:	2300      	movs	r3, #0
 80028ae:	4091      	lsls	r1, r2
 80028b0:	1e62      	subs	r2, r4, #1
 80028b2:	4194      	sbcs	r4, r2
 80028b4:	4681      	mov	r9, r0
 80028b6:	4698      	mov	r8, r3
 80028b8:	4331      	orrs	r1, r6
 80028ba:	430c      	orrs	r4, r1
 80028bc:	0763      	lsls	r3, r4, #29
 80028be:	d009      	beq.n	80028d4 <__aeabi_dsub+0x11c>
 80028c0:	230f      	movs	r3, #15
 80028c2:	4023      	ands	r3, r4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d005      	beq.n	80028d4 <__aeabi_dsub+0x11c>
 80028c8:	1d23      	adds	r3, r4, #4
 80028ca:	42a3      	cmp	r3, r4
 80028cc:	41a4      	sbcs	r4, r4
 80028ce:	4264      	negs	r4, r4
 80028d0:	44a1      	add	r9, r4
 80028d2:	001c      	movs	r4, r3
 80028d4:	464b      	mov	r3, r9
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	d400      	bmi.n	80028dc <__aeabi_dsub+0x124>
 80028da:	e0de      	b.n	8002a9a <__aeabi_dsub+0x2e2>
 80028dc:	4641      	mov	r1, r8
 80028de:	4b8c      	ldr	r3, [pc, #560]	; (8002b10 <__aeabi_dsub+0x358>)
 80028e0:	3101      	adds	r1, #1
 80028e2:	4299      	cmp	r1, r3
 80028e4:	d100      	bne.n	80028e8 <__aeabi_dsub+0x130>
 80028e6:	e0e7      	b.n	8002ab8 <__aeabi_dsub+0x300>
 80028e8:	464b      	mov	r3, r9
 80028ea:	488a      	ldr	r0, [pc, #552]	; (8002b14 <__aeabi_dsub+0x35c>)
 80028ec:	08e4      	lsrs	r4, r4, #3
 80028ee:	4003      	ands	r3, r0
 80028f0:	0018      	movs	r0, r3
 80028f2:	0549      	lsls	r1, r1, #21
 80028f4:	075b      	lsls	r3, r3, #29
 80028f6:	0240      	lsls	r0, r0, #9
 80028f8:	4323      	orrs	r3, r4
 80028fa:	0d4a      	lsrs	r2, r1, #21
 80028fc:	0b04      	lsrs	r4, r0, #12
 80028fe:	0512      	lsls	r2, r2, #20
 8002900:	07ed      	lsls	r5, r5, #31
 8002902:	4322      	orrs	r2, r4
 8002904:	432a      	orrs	r2, r5
 8002906:	0018      	movs	r0, r3
 8002908:	0011      	movs	r1, r2
 800290a:	bcf0      	pop	{r4, r5, r6, r7}
 800290c:	46bb      	mov	fp, r7
 800290e:	46b2      	mov	sl, r6
 8002910:	46a9      	mov	r9, r5
 8002912:	46a0      	mov	r8, r4
 8002914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002916:	4642      	mov	r2, r8
 8002918:	1a12      	subs	r2, r2, r0
 800291a:	2a00      	cmp	r2, #0
 800291c:	dd52      	ble.n	80029c4 <__aeabi_dsub+0x20c>
 800291e:	2800      	cmp	r0, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x16c>
 8002922:	e09c      	b.n	8002a5e <__aeabi_dsub+0x2a6>
 8002924:	45a0      	cmp	r8, r4
 8002926:	d100      	bne.n	800292a <__aeabi_dsub+0x172>
 8002928:	e0ca      	b.n	8002ac0 <__aeabi_dsub+0x308>
 800292a:	2080      	movs	r0, #128	; 0x80
 800292c:	0400      	lsls	r0, r0, #16
 800292e:	4301      	orrs	r1, r0
 8002930:	2a38      	cmp	r2, #56	; 0x38
 8002932:	dd00      	ble.n	8002936 <__aeabi_dsub+0x17e>
 8002934:	e149      	b.n	8002bca <__aeabi_dsub+0x412>
 8002936:	2a1f      	cmp	r2, #31
 8002938:	dc00      	bgt.n	800293c <__aeabi_dsub+0x184>
 800293a:	e197      	b.n	8002c6c <__aeabi_dsub+0x4b4>
 800293c:	0010      	movs	r0, r2
 800293e:	000e      	movs	r6, r1
 8002940:	3820      	subs	r0, #32
 8002942:	40c6      	lsrs	r6, r0
 8002944:	2a20      	cmp	r2, #32
 8002946:	d004      	beq.n	8002952 <__aeabi_dsub+0x19a>
 8002948:	2040      	movs	r0, #64	; 0x40
 800294a:	1a82      	subs	r2, r0, r2
 800294c:	4091      	lsls	r1, r2
 800294e:	430f      	orrs	r7, r1
 8002950:	46b9      	mov	r9, r7
 8002952:	464c      	mov	r4, r9
 8002954:	1e62      	subs	r2, r4, #1
 8002956:	4194      	sbcs	r4, r2
 8002958:	4334      	orrs	r4, r6
 800295a:	e13a      	b.n	8002bd2 <__aeabi_dsub+0x41a>
 800295c:	000a      	movs	r2, r1
 800295e:	433a      	orrs	r2, r7
 8002960:	d028      	beq.n	80029b4 <__aeabi_dsub+0x1fc>
 8002962:	46b3      	mov	fp, r6
 8002964:	42b5      	cmp	r5, r6
 8002966:	d02b      	beq.n	80029c0 <__aeabi_dsub+0x208>
 8002968:	4a6b      	ldr	r2, [pc, #428]	; (8002b18 <__aeabi_dsub+0x360>)
 800296a:	4442      	add	r2, r8
 800296c:	2a00      	cmp	r2, #0
 800296e:	d05d      	beq.n	8002a2c <__aeabi_dsub+0x274>
 8002970:	4642      	mov	r2, r8
 8002972:	4644      	mov	r4, r8
 8002974:	1a82      	subs	r2, r0, r2
 8002976:	2c00      	cmp	r4, #0
 8002978:	d000      	beq.n	800297c <__aeabi_dsub+0x1c4>
 800297a:	e0f5      	b.n	8002b68 <__aeabi_dsub+0x3b0>
 800297c:	4665      	mov	r5, ip
 800297e:	431d      	orrs	r5, r3
 8002980:	d100      	bne.n	8002984 <__aeabi_dsub+0x1cc>
 8002982:	e19c      	b.n	8002cbe <__aeabi_dsub+0x506>
 8002984:	1e55      	subs	r5, r2, #1
 8002986:	2a01      	cmp	r2, #1
 8002988:	d100      	bne.n	800298c <__aeabi_dsub+0x1d4>
 800298a:	e1fb      	b.n	8002d84 <__aeabi_dsub+0x5cc>
 800298c:	4c60      	ldr	r4, [pc, #384]	; (8002b10 <__aeabi_dsub+0x358>)
 800298e:	42a2      	cmp	r2, r4
 8002990:	d100      	bne.n	8002994 <__aeabi_dsub+0x1dc>
 8002992:	e1bd      	b.n	8002d10 <__aeabi_dsub+0x558>
 8002994:	002a      	movs	r2, r5
 8002996:	e0f0      	b.n	8002b7a <__aeabi_dsub+0x3c2>
 8002998:	0008      	movs	r0, r1
 800299a:	4338      	orrs	r0, r7
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x1e8>
 800299e:	e0c3      	b.n	8002b28 <__aeabi_dsub+0x370>
 80029a0:	1e50      	subs	r0, r2, #1
 80029a2:	2a01      	cmp	r2, #1
 80029a4:	d100      	bne.n	80029a8 <__aeabi_dsub+0x1f0>
 80029a6:	e1a8      	b.n	8002cfa <__aeabi_dsub+0x542>
 80029a8:	4c59      	ldr	r4, [pc, #356]	; (8002b10 <__aeabi_dsub+0x358>)
 80029aa:	42a2      	cmp	r2, r4
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dsub+0x1f8>
 80029ae:	e087      	b.n	8002ac0 <__aeabi_dsub+0x308>
 80029b0:	0002      	movs	r2, r0
 80029b2:	e736      	b.n	8002822 <__aeabi_dsub+0x6a>
 80029b4:	2201      	movs	r2, #1
 80029b6:	4056      	eors	r6, r2
 80029b8:	46b3      	mov	fp, r6
 80029ba:	42b5      	cmp	r5, r6
 80029bc:	d000      	beq.n	80029c0 <__aeabi_dsub+0x208>
 80029be:	e721      	b.n	8002804 <__aeabi_dsub+0x4c>
 80029c0:	4a55      	ldr	r2, [pc, #340]	; (8002b18 <__aeabi_dsub+0x360>)
 80029c2:	4442      	add	r2, r8
 80029c4:	2a00      	cmp	r2, #0
 80029c6:	d100      	bne.n	80029ca <__aeabi_dsub+0x212>
 80029c8:	e0b5      	b.n	8002b36 <__aeabi_dsub+0x37e>
 80029ca:	4642      	mov	r2, r8
 80029cc:	4644      	mov	r4, r8
 80029ce:	1a82      	subs	r2, r0, r2
 80029d0:	2c00      	cmp	r4, #0
 80029d2:	d100      	bne.n	80029d6 <__aeabi_dsub+0x21e>
 80029d4:	e138      	b.n	8002c48 <__aeabi_dsub+0x490>
 80029d6:	4e4e      	ldr	r6, [pc, #312]	; (8002b10 <__aeabi_dsub+0x358>)
 80029d8:	42b0      	cmp	r0, r6
 80029da:	d100      	bne.n	80029de <__aeabi_dsub+0x226>
 80029dc:	e1de      	b.n	8002d9c <__aeabi_dsub+0x5e4>
 80029de:	2680      	movs	r6, #128	; 0x80
 80029e0:	4664      	mov	r4, ip
 80029e2:	0436      	lsls	r6, r6, #16
 80029e4:	4334      	orrs	r4, r6
 80029e6:	46a4      	mov	ip, r4
 80029e8:	2a38      	cmp	r2, #56	; 0x38
 80029ea:	dd00      	ble.n	80029ee <__aeabi_dsub+0x236>
 80029ec:	e196      	b.n	8002d1c <__aeabi_dsub+0x564>
 80029ee:	2a1f      	cmp	r2, #31
 80029f0:	dd00      	ble.n	80029f4 <__aeabi_dsub+0x23c>
 80029f2:	e224      	b.n	8002e3e <__aeabi_dsub+0x686>
 80029f4:	2620      	movs	r6, #32
 80029f6:	1ab4      	subs	r4, r6, r2
 80029f8:	46a2      	mov	sl, r4
 80029fa:	4664      	mov	r4, ip
 80029fc:	4656      	mov	r6, sl
 80029fe:	40b4      	lsls	r4, r6
 8002a00:	46a1      	mov	r9, r4
 8002a02:	001c      	movs	r4, r3
 8002a04:	464e      	mov	r6, r9
 8002a06:	40d4      	lsrs	r4, r2
 8002a08:	4326      	orrs	r6, r4
 8002a0a:	0034      	movs	r4, r6
 8002a0c:	4656      	mov	r6, sl
 8002a0e:	40b3      	lsls	r3, r6
 8002a10:	1e5e      	subs	r6, r3, #1
 8002a12:	41b3      	sbcs	r3, r6
 8002a14:	431c      	orrs	r4, r3
 8002a16:	4663      	mov	r3, ip
 8002a18:	40d3      	lsrs	r3, r2
 8002a1a:	18c9      	adds	r1, r1, r3
 8002a1c:	19e4      	adds	r4, r4, r7
 8002a1e:	42bc      	cmp	r4, r7
 8002a20:	41bf      	sbcs	r7, r7
 8002a22:	427f      	negs	r7, r7
 8002a24:	46b9      	mov	r9, r7
 8002a26:	4680      	mov	r8, r0
 8002a28:	4489      	add	r9, r1
 8002a2a:	e0d8      	b.n	8002bde <__aeabi_dsub+0x426>
 8002a2c:	4640      	mov	r0, r8
 8002a2e:	4c3b      	ldr	r4, [pc, #236]	; (8002b1c <__aeabi_dsub+0x364>)
 8002a30:	3001      	adds	r0, #1
 8002a32:	4220      	tst	r0, r4
 8002a34:	d000      	beq.n	8002a38 <__aeabi_dsub+0x280>
 8002a36:	e0b4      	b.n	8002ba2 <__aeabi_dsub+0x3ea>
 8002a38:	4640      	mov	r0, r8
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	d000      	beq.n	8002a40 <__aeabi_dsub+0x288>
 8002a3e:	e144      	b.n	8002cca <__aeabi_dsub+0x512>
 8002a40:	4660      	mov	r0, ip
 8002a42:	4318      	orrs	r0, r3
 8002a44:	d100      	bne.n	8002a48 <__aeabi_dsub+0x290>
 8002a46:	e190      	b.n	8002d6a <__aeabi_dsub+0x5b2>
 8002a48:	0008      	movs	r0, r1
 8002a4a:	4338      	orrs	r0, r7
 8002a4c:	d000      	beq.n	8002a50 <__aeabi_dsub+0x298>
 8002a4e:	e1aa      	b.n	8002da6 <__aeabi_dsub+0x5ee>
 8002a50:	4661      	mov	r1, ip
 8002a52:	08db      	lsrs	r3, r3, #3
 8002a54:	0749      	lsls	r1, r1, #29
 8002a56:	430b      	orrs	r3, r1
 8002a58:	4661      	mov	r1, ip
 8002a5a:	08cc      	lsrs	r4, r1, #3
 8002a5c:	e027      	b.n	8002aae <__aeabi_dsub+0x2f6>
 8002a5e:	0008      	movs	r0, r1
 8002a60:	4338      	orrs	r0, r7
 8002a62:	d061      	beq.n	8002b28 <__aeabi_dsub+0x370>
 8002a64:	1e50      	subs	r0, r2, #1
 8002a66:	2a01      	cmp	r2, #1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x2b4>
 8002a6a:	e139      	b.n	8002ce0 <__aeabi_dsub+0x528>
 8002a6c:	42a2      	cmp	r2, r4
 8002a6e:	d027      	beq.n	8002ac0 <__aeabi_dsub+0x308>
 8002a70:	0002      	movs	r2, r0
 8002a72:	e75d      	b.n	8002930 <__aeabi_dsub+0x178>
 8002a74:	0002      	movs	r2, r0
 8002a76:	391f      	subs	r1, #31
 8002a78:	40ca      	lsrs	r2, r1
 8002a7a:	0011      	movs	r1, r2
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d003      	beq.n	8002a88 <__aeabi_dsub+0x2d0>
 8002a80:	2240      	movs	r2, #64	; 0x40
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	4098      	lsls	r0, r3
 8002a86:	4304      	orrs	r4, r0
 8002a88:	1e63      	subs	r3, r4, #1
 8002a8a:	419c      	sbcs	r4, r3
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	4699      	mov	r9, r3
 8002a90:	4698      	mov	r8, r3
 8002a92:	430c      	orrs	r4, r1
 8002a94:	0763      	lsls	r3, r4, #29
 8002a96:	d000      	beq.n	8002a9a <__aeabi_dsub+0x2e2>
 8002a98:	e712      	b.n	80028c0 <__aeabi_dsub+0x108>
 8002a9a:	464b      	mov	r3, r9
 8002a9c:	464a      	mov	r2, r9
 8002a9e:	08e4      	lsrs	r4, r4, #3
 8002aa0:	075b      	lsls	r3, r3, #29
 8002aa2:	4323      	orrs	r3, r4
 8002aa4:	08d4      	lsrs	r4, r2, #3
 8002aa6:	4642      	mov	r2, r8
 8002aa8:	4919      	ldr	r1, [pc, #100]	; (8002b10 <__aeabi_dsub+0x358>)
 8002aaa:	428a      	cmp	r2, r1
 8002aac:	d00e      	beq.n	8002acc <__aeabi_dsub+0x314>
 8002aae:	0324      	lsls	r4, r4, #12
 8002ab0:	0552      	lsls	r2, r2, #21
 8002ab2:	0b24      	lsrs	r4, r4, #12
 8002ab4:	0d52      	lsrs	r2, r2, #21
 8002ab6:	e722      	b.n	80028fe <__aeabi_dsub+0x146>
 8002ab8:	000a      	movs	r2, r1
 8002aba:	2400      	movs	r4, #0
 8002abc:	2300      	movs	r3, #0
 8002abe:	e71e      	b.n	80028fe <__aeabi_dsub+0x146>
 8002ac0:	08db      	lsrs	r3, r3, #3
 8002ac2:	4662      	mov	r2, ip
 8002ac4:	0752      	lsls	r2, r2, #29
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	4662      	mov	r2, ip
 8002aca:	08d4      	lsrs	r4, r2, #3
 8002acc:	001a      	movs	r2, r3
 8002ace:	4322      	orrs	r2, r4
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x31c>
 8002ad2:	e1fc      	b.n	8002ece <__aeabi_dsub+0x716>
 8002ad4:	2280      	movs	r2, #128	; 0x80
 8002ad6:	0312      	lsls	r2, r2, #12
 8002ad8:	4314      	orrs	r4, r2
 8002ada:	0324      	lsls	r4, r4, #12
 8002adc:	4a0c      	ldr	r2, [pc, #48]	; (8002b10 <__aeabi_dsub+0x358>)
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	e70d      	b.n	80028fe <__aeabi_dsub+0x146>
 8002ae2:	0020      	movs	r0, r4
 8002ae4:	f000 fb74 	bl	80031d0 <__clzsi2>
 8002ae8:	0001      	movs	r1, r0
 8002aea:	3118      	adds	r1, #24
 8002aec:	291f      	cmp	r1, #31
 8002aee:	dc00      	bgt.n	8002af2 <__aeabi_dsub+0x33a>
 8002af0:	e6c4      	b.n	800287c <__aeabi_dsub+0xc4>
 8002af2:	3808      	subs	r0, #8
 8002af4:	4084      	lsls	r4, r0
 8002af6:	4643      	mov	r3, r8
 8002af8:	0020      	movs	r0, r4
 8002afa:	2400      	movs	r4, #0
 8002afc:	4588      	cmp	r8, r1
 8002afe:	dc00      	bgt.n	8002b02 <__aeabi_dsub+0x34a>
 8002b00:	e6c8      	b.n	8002894 <__aeabi_dsub+0xdc>
 8002b02:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <__aeabi_dsub+0x35c>)
 8002b04:	1a5b      	subs	r3, r3, r1
 8002b06:	4010      	ands	r0, r2
 8002b08:	4698      	mov	r8, r3
 8002b0a:	4681      	mov	r9, r0
 8002b0c:	e6d6      	b.n	80028bc <__aeabi_dsub+0x104>
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	000007ff 	.word	0x000007ff
 8002b14:	ff7fffff 	.word	0xff7fffff
 8002b18:	fffff801 	.word	0xfffff801
 8002b1c:	000007fe 	.word	0x000007fe
 8002b20:	430f      	orrs	r7, r1
 8002b22:	1e7a      	subs	r2, r7, #1
 8002b24:	4197      	sbcs	r7, r2
 8002b26:	e691      	b.n	800284c <__aeabi_dsub+0x94>
 8002b28:	4661      	mov	r1, ip
 8002b2a:	08db      	lsrs	r3, r3, #3
 8002b2c:	0749      	lsls	r1, r1, #29
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	4661      	mov	r1, ip
 8002b32:	08cc      	lsrs	r4, r1, #3
 8002b34:	e7b8      	b.n	8002aa8 <__aeabi_dsub+0x2f0>
 8002b36:	4640      	mov	r0, r8
 8002b38:	4cd3      	ldr	r4, [pc, #844]	; (8002e88 <__aeabi_dsub+0x6d0>)
 8002b3a:	3001      	adds	r0, #1
 8002b3c:	4220      	tst	r0, r4
 8002b3e:	d000      	beq.n	8002b42 <__aeabi_dsub+0x38a>
 8002b40:	e0a2      	b.n	8002c88 <__aeabi_dsub+0x4d0>
 8002b42:	4640      	mov	r0, r8
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d000      	beq.n	8002b4a <__aeabi_dsub+0x392>
 8002b48:	e101      	b.n	8002d4e <__aeabi_dsub+0x596>
 8002b4a:	4660      	mov	r0, ip
 8002b4c:	4318      	orrs	r0, r3
 8002b4e:	d100      	bne.n	8002b52 <__aeabi_dsub+0x39a>
 8002b50:	e15e      	b.n	8002e10 <__aeabi_dsub+0x658>
 8002b52:	0008      	movs	r0, r1
 8002b54:	4338      	orrs	r0, r7
 8002b56:	d000      	beq.n	8002b5a <__aeabi_dsub+0x3a2>
 8002b58:	e15f      	b.n	8002e1a <__aeabi_dsub+0x662>
 8002b5a:	4661      	mov	r1, ip
 8002b5c:	08db      	lsrs	r3, r3, #3
 8002b5e:	0749      	lsls	r1, r1, #29
 8002b60:	430b      	orrs	r3, r1
 8002b62:	4661      	mov	r1, ip
 8002b64:	08cc      	lsrs	r4, r1, #3
 8002b66:	e7a2      	b.n	8002aae <__aeabi_dsub+0x2f6>
 8002b68:	4dc8      	ldr	r5, [pc, #800]	; (8002e8c <__aeabi_dsub+0x6d4>)
 8002b6a:	42a8      	cmp	r0, r5
 8002b6c:	d100      	bne.n	8002b70 <__aeabi_dsub+0x3b8>
 8002b6e:	e0cf      	b.n	8002d10 <__aeabi_dsub+0x558>
 8002b70:	2580      	movs	r5, #128	; 0x80
 8002b72:	4664      	mov	r4, ip
 8002b74:	042d      	lsls	r5, r5, #16
 8002b76:	432c      	orrs	r4, r5
 8002b78:	46a4      	mov	ip, r4
 8002b7a:	2a38      	cmp	r2, #56	; 0x38
 8002b7c:	dc56      	bgt.n	8002c2c <__aeabi_dsub+0x474>
 8002b7e:	2a1f      	cmp	r2, #31
 8002b80:	dd00      	ble.n	8002b84 <__aeabi_dsub+0x3cc>
 8002b82:	e0d1      	b.n	8002d28 <__aeabi_dsub+0x570>
 8002b84:	2520      	movs	r5, #32
 8002b86:	001e      	movs	r6, r3
 8002b88:	1aad      	subs	r5, r5, r2
 8002b8a:	4664      	mov	r4, ip
 8002b8c:	40ab      	lsls	r3, r5
 8002b8e:	40ac      	lsls	r4, r5
 8002b90:	40d6      	lsrs	r6, r2
 8002b92:	1e5d      	subs	r5, r3, #1
 8002b94:	41ab      	sbcs	r3, r5
 8002b96:	4334      	orrs	r4, r6
 8002b98:	4323      	orrs	r3, r4
 8002b9a:	4664      	mov	r4, ip
 8002b9c:	40d4      	lsrs	r4, r2
 8002b9e:	1b09      	subs	r1, r1, r4
 8002ba0:	e049      	b.n	8002c36 <__aeabi_dsub+0x47e>
 8002ba2:	4660      	mov	r0, ip
 8002ba4:	1bdc      	subs	r4, r3, r7
 8002ba6:	1a46      	subs	r6, r0, r1
 8002ba8:	42a3      	cmp	r3, r4
 8002baa:	4180      	sbcs	r0, r0
 8002bac:	4240      	negs	r0, r0
 8002bae:	4681      	mov	r9, r0
 8002bb0:	0030      	movs	r0, r6
 8002bb2:	464e      	mov	r6, r9
 8002bb4:	1b80      	subs	r0, r0, r6
 8002bb6:	4681      	mov	r9, r0
 8002bb8:	0200      	lsls	r0, r0, #8
 8002bba:	d476      	bmi.n	8002caa <__aeabi_dsub+0x4f2>
 8002bbc:	464b      	mov	r3, r9
 8002bbe:	4323      	orrs	r3, r4
 8002bc0:	d000      	beq.n	8002bc4 <__aeabi_dsub+0x40c>
 8002bc2:	e652      	b.n	800286a <__aeabi_dsub+0xb2>
 8002bc4:	2400      	movs	r4, #0
 8002bc6:	2500      	movs	r5, #0
 8002bc8:	e771      	b.n	8002aae <__aeabi_dsub+0x2f6>
 8002bca:	4339      	orrs	r1, r7
 8002bcc:	000c      	movs	r4, r1
 8002bce:	1e62      	subs	r2, r4, #1
 8002bd0:	4194      	sbcs	r4, r2
 8002bd2:	18e4      	adds	r4, r4, r3
 8002bd4:	429c      	cmp	r4, r3
 8002bd6:	419b      	sbcs	r3, r3
 8002bd8:	425b      	negs	r3, r3
 8002bda:	4463      	add	r3, ip
 8002bdc:	4699      	mov	r9, r3
 8002bde:	464b      	mov	r3, r9
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	d400      	bmi.n	8002be6 <__aeabi_dsub+0x42e>
 8002be4:	e756      	b.n	8002a94 <__aeabi_dsub+0x2dc>
 8002be6:	2301      	movs	r3, #1
 8002be8:	469c      	mov	ip, r3
 8002bea:	4ba8      	ldr	r3, [pc, #672]	; (8002e8c <__aeabi_dsub+0x6d4>)
 8002bec:	44e0      	add	r8, ip
 8002bee:	4598      	cmp	r8, r3
 8002bf0:	d038      	beq.n	8002c64 <__aeabi_dsub+0x4ac>
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	48a6      	ldr	r0, [pc, #664]	; (8002e90 <__aeabi_dsub+0x6d8>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4003      	ands	r3, r0
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	0863      	lsrs	r3, r4, #1
 8002bfe:	4014      	ands	r4, r2
 8002c00:	431c      	orrs	r4, r3
 8002c02:	07c3      	lsls	r3, r0, #31
 8002c04:	431c      	orrs	r4, r3
 8002c06:	0843      	lsrs	r3, r0, #1
 8002c08:	4699      	mov	r9, r3
 8002c0a:	e657      	b.n	80028bc <__aeabi_dsub+0x104>
 8002c0c:	0010      	movs	r0, r2
 8002c0e:	000e      	movs	r6, r1
 8002c10:	3820      	subs	r0, #32
 8002c12:	40c6      	lsrs	r6, r0
 8002c14:	2a20      	cmp	r2, #32
 8002c16:	d004      	beq.n	8002c22 <__aeabi_dsub+0x46a>
 8002c18:	2040      	movs	r0, #64	; 0x40
 8002c1a:	1a82      	subs	r2, r0, r2
 8002c1c:	4091      	lsls	r1, r2
 8002c1e:	430f      	orrs	r7, r1
 8002c20:	46b9      	mov	r9, r7
 8002c22:	464f      	mov	r7, r9
 8002c24:	1e7a      	subs	r2, r7, #1
 8002c26:	4197      	sbcs	r7, r2
 8002c28:	4337      	orrs	r7, r6
 8002c2a:	e60f      	b.n	800284c <__aeabi_dsub+0x94>
 8002c2c:	4662      	mov	r2, ip
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	0013      	movs	r3, r2
 8002c32:	1e5a      	subs	r2, r3, #1
 8002c34:	4193      	sbcs	r3, r2
 8002c36:	1afc      	subs	r4, r7, r3
 8002c38:	42a7      	cmp	r7, r4
 8002c3a:	41bf      	sbcs	r7, r7
 8002c3c:	427f      	negs	r7, r7
 8002c3e:	1bcb      	subs	r3, r1, r7
 8002c40:	4699      	mov	r9, r3
 8002c42:	465d      	mov	r5, fp
 8002c44:	4680      	mov	r8, r0
 8002c46:	e608      	b.n	800285a <__aeabi_dsub+0xa2>
 8002c48:	4666      	mov	r6, ip
 8002c4a:	431e      	orrs	r6, r3
 8002c4c:	d100      	bne.n	8002c50 <__aeabi_dsub+0x498>
 8002c4e:	e0be      	b.n	8002dce <__aeabi_dsub+0x616>
 8002c50:	1e56      	subs	r6, r2, #1
 8002c52:	2a01      	cmp	r2, #1
 8002c54:	d100      	bne.n	8002c58 <__aeabi_dsub+0x4a0>
 8002c56:	e109      	b.n	8002e6c <__aeabi_dsub+0x6b4>
 8002c58:	4c8c      	ldr	r4, [pc, #560]	; (8002e8c <__aeabi_dsub+0x6d4>)
 8002c5a:	42a2      	cmp	r2, r4
 8002c5c:	d100      	bne.n	8002c60 <__aeabi_dsub+0x4a8>
 8002c5e:	e119      	b.n	8002e94 <__aeabi_dsub+0x6dc>
 8002c60:	0032      	movs	r2, r6
 8002c62:	e6c1      	b.n	80029e8 <__aeabi_dsub+0x230>
 8002c64:	4642      	mov	r2, r8
 8002c66:	2400      	movs	r4, #0
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e648      	b.n	80028fe <__aeabi_dsub+0x146>
 8002c6c:	2020      	movs	r0, #32
 8002c6e:	000c      	movs	r4, r1
 8002c70:	1a80      	subs	r0, r0, r2
 8002c72:	003e      	movs	r6, r7
 8002c74:	4087      	lsls	r7, r0
 8002c76:	4084      	lsls	r4, r0
 8002c78:	40d6      	lsrs	r6, r2
 8002c7a:	1e78      	subs	r0, r7, #1
 8002c7c:	4187      	sbcs	r7, r0
 8002c7e:	40d1      	lsrs	r1, r2
 8002c80:	4334      	orrs	r4, r6
 8002c82:	433c      	orrs	r4, r7
 8002c84:	448c      	add	ip, r1
 8002c86:	e7a4      	b.n	8002bd2 <__aeabi_dsub+0x41a>
 8002c88:	4a80      	ldr	r2, [pc, #512]	; (8002e8c <__aeabi_dsub+0x6d4>)
 8002c8a:	4290      	cmp	r0, r2
 8002c8c:	d100      	bne.n	8002c90 <__aeabi_dsub+0x4d8>
 8002c8e:	e0e9      	b.n	8002e64 <__aeabi_dsub+0x6ac>
 8002c90:	19df      	adds	r7, r3, r7
 8002c92:	429f      	cmp	r7, r3
 8002c94:	419b      	sbcs	r3, r3
 8002c96:	4461      	add	r1, ip
 8002c98:	425b      	negs	r3, r3
 8002c9a:	18c9      	adds	r1, r1, r3
 8002c9c:	07cc      	lsls	r4, r1, #31
 8002c9e:	087f      	lsrs	r7, r7, #1
 8002ca0:	084b      	lsrs	r3, r1, #1
 8002ca2:	4699      	mov	r9, r3
 8002ca4:	4680      	mov	r8, r0
 8002ca6:	433c      	orrs	r4, r7
 8002ca8:	e6f4      	b.n	8002a94 <__aeabi_dsub+0x2dc>
 8002caa:	1afc      	subs	r4, r7, r3
 8002cac:	42a7      	cmp	r7, r4
 8002cae:	41bf      	sbcs	r7, r7
 8002cb0:	4663      	mov	r3, ip
 8002cb2:	427f      	negs	r7, r7
 8002cb4:	1ac9      	subs	r1, r1, r3
 8002cb6:	1bcb      	subs	r3, r1, r7
 8002cb8:	4699      	mov	r9, r3
 8002cba:	465d      	mov	r5, fp
 8002cbc:	e5d5      	b.n	800286a <__aeabi_dsub+0xb2>
 8002cbe:	08ff      	lsrs	r7, r7, #3
 8002cc0:	074b      	lsls	r3, r1, #29
 8002cc2:	465d      	mov	r5, fp
 8002cc4:	433b      	orrs	r3, r7
 8002cc6:	08cc      	lsrs	r4, r1, #3
 8002cc8:	e6ee      	b.n	8002aa8 <__aeabi_dsub+0x2f0>
 8002cca:	4662      	mov	r2, ip
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	d000      	beq.n	8002cd2 <__aeabi_dsub+0x51a>
 8002cd0:	e082      	b.n	8002dd8 <__aeabi_dsub+0x620>
 8002cd2:	000b      	movs	r3, r1
 8002cd4:	433b      	orrs	r3, r7
 8002cd6:	d11b      	bne.n	8002d10 <__aeabi_dsub+0x558>
 8002cd8:	2480      	movs	r4, #128	; 0x80
 8002cda:	2500      	movs	r5, #0
 8002cdc:	0324      	lsls	r4, r4, #12
 8002cde:	e6f9      	b.n	8002ad4 <__aeabi_dsub+0x31c>
 8002ce0:	19dc      	adds	r4, r3, r7
 8002ce2:	429c      	cmp	r4, r3
 8002ce4:	419b      	sbcs	r3, r3
 8002ce6:	4461      	add	r1, ip
 8002ce8:	4689      	mov	r9, r1
 8002cea:	425b      	negs	r3, r3
 8002cec:	4499      	add	r9, r3
 8002cee:	464b      	mov	r3, r9
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	d444      	bmi.n	8002d7e <__aeabi_dsub+0x5c6>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	4698      	mov	r8, r3
 8002cf8:	e6cc      	b.n	8002a94 <__aeabi_dsub+0x2dc>
 8002cfa:	1bdc      	subs	r4, r3, r7
 8002cfc:	4662      	mov	r2, ip
 8002cfe:	42a3      	cmp	r3, r4
 8002d00:	419b      	sbcs	r3, r3
 8002d02:	1a51      	subs	r1, r2, r1
 8002d04:	425b      	negs	r3, r3
 8002d06:	1acb      	subs	r3, r1, r3
 8002d08:	4699      	mov	r9, r3
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	4698      	mov	r8, r3
 8002d0e:	e5a4      	b.n	800285a <__aeabi_dsub+0xa2>
 8002d10:	08ff      	lsrs	r7, r7, #3
 8002d12:	074b      	lsls	r3, r1, #29
 8002d14:	465d      	mov	r5, fp
 8002d16:	433b      	orrs	r3, r7
 8002d18:	08cc      	lsrs	r4, r1, #3
 8002d1a:	e6d7      	b.n	8002acc <__aeabi_dsub+0x314>
 8002d1c:	4662      	mov	r2, ip
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	0014      	movs	r4, r2
 8002d22:	1e63      	subs	r3, r4, #1
 8002d24:	419c      	sbcs	r4, r3
 8002d26:	e679      	b.n	8002a1c <__aeabi_dsub+0x264>
 8002d28:	0015      	movs	r5, r2
 8002d2a:	4664      	mov	r4, ip
 8002d2c:	3d20      	subs	r5, #32
 8002d2e:	40ec      	lsrs	r4, r5
 8002d30:	46a0      	mov	r8, r4
 8002d32:	2a20      	cmp	r2, #32
 8002d34:	d005      	beq.n	8002d42 <__aeabi_dsub+0x58a>
 8002d36:	2540      	movs	r5, #64	; 0x40
 8002d38:	4664      	mov	r4, ip
 8002d3a:	1aaa      	subs	r2, r5, r2
 8002d3c:	4094      	lsls	r4, r2
 8002d3e:	4323      	orrs	r3, r4
 8002d40:	469a      	mov	sl, r3
 8002d42:	4654      	mov	r4, sl
 8002d44:	1e63      	subs	r3, r4, #1
 8002d46:	419c      	sbcs	r4, r3
 8002d48:	4643      	mov	r3, r8
 8002d4a:	4323      	orrs	r3, r4
 8002d4c:	e773      	b.n	8002c36 <__aeabi_dsub+0x47e>
 8002d4e:	4662      	mov	r2, ip
 8002d50:	431a      	orrs	r2, r3
 8002d52:	d023      	beq.n	8002d9c <__aeabi_dsub+0x5e4>
 8002d54:	000a      	movs	r2, r1
 8002d56:	433a      	orrs	r2, r7
 8002d58:	d000      	beq.n	8002d5c <__aeabi_dsub+0x5a4>
 8002d5a:	e0a0      	b.n	8002e9e <__aeabi_dsub+0x6e6>
 8002d5c:	4662      	mov	r2, ip
 8002d5e:	08db      	lsrs	r3, r3, #3
 8002d60:	0752      	lsls	r2, r2, #29
 8002d62:	4313      	orrs	r3, r2
 8002d64:	4662      	mov	r2, ip
 8002d66:	08d4      	lsrs	r4, r2, #3
 8002d68:	e6b0      	b.n	8002acc <__aeabi_dsub+0x314>
 8002d6a:	000b      	movs	r3, r1
 8002d6c:	433b      	orrs	r3, r7
 8002d6e:	d100      	bne.n	8002d72 <__aeabi_dsub+0x5ba>
 8002d70:	e728      	b.n	8002bc4 <__aeabi_dsub+0x40c>
 8002d72:	08ff      	lsrs	r7, r7, #3
 8002d74:	074b      	lsls	r3, r1, #29
 8002d76:	465d      	mov	r5, fp
 8002d78:	433b      	orrs	r3, r7
 8002d7a:	08cc      	lsrs	r4, r1, #3
 8002d7c:	e697      	b.n	8002aae <__aeabi_dsub+0x2f6>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	4698      	mov	r8, r3
 8002d82:	e736      	b.n	8002bf2 <__aeabi_dsub+0x43a>
 8002d84:	1afc      	subs	r4, r7, r3
 8002d86:	42a7      	cmp	r7, r4
 8002d88:	41bf      	sbcs	r7, r7
 8002d8a:	4663      	mov	r3, ip
 8002d8c:	427f      	negs	r7, r7
 8002d8e:	1ac9      	subs	r1, r1, r3
 8002d90:	1bcb      	subs	r3, r1, r7
 8002d92:	4699      	mov	r9, r3
 8002d94:	2301      	movs	r3, #1
 8002d96:	465d      	mov	r5, fp
 8002d98:	4698      	mov	r8, r3
 8002d9a:	e55e      	b.n	800285a <__aeabi_dsub+0xa2>
 8002d9c:	074b      	lsls	r3, r1, #29
 8002d9e:	08ff      	lsrs	r7, r7, #3
 8002da0:	433b      	orrs	r3, r7
 8002da2:	08cc      	lsrs	r4, r1, #3
 8002da4:	e692      	b.n	8002acc <__aeabi_dsub+0x314>
 8002da6:	1bdc      	subs	r4, r3, r7
 8002da8:	4660      	mov	r0, ip
 8002daa:	42a3      	cmp	r3, r4
 8002dac:	41b6      	sbcs	r6, r6
 8002dae:	1a40      	subs	r0, r0, r1
 8002db0:	4276      	negs	r6, r6
 8002db2:	1b80      	subs	r0, r0, r6
 8002db4:	4681      	mov	r9, r0
 8002db6:	0200      	lsls	r0, r0, #8
 8002db8:	d560      	bpl.n	8002e7c <__aeabi_dsub+0x6c4>
 8002dba:	1afc      	subs	r4, r7, r3
 8002dbc:	42a7      	cmp	r7, r4
 8002dbe:	41bf      	sbcs	r7, r7
 8002dc0:	4663      	mov	r3, ip
 8002dc2:	427f      	negs	r7, r7
 8002dc4:	1ac9      	subs	r1, r1, r3
 8002dc6:	1bcb      	subs	r3, r1, r7
 8002dc8:	4699      	mov	r9, r3
 8002dca:	465d      	mov	r5, fp
 8002dcc:	e576      	b.n	80028bc <__aeabi_dsub+0x104>
 8002dce:	08ff      	lsrs	r7, r7, #3
 8002dd0:	074b      	lsls	r3, r1, #29
 8002dd2:	433b      	orrs	r3, r7
 8002dd4:	08cc      	lsrs	r4, r1, #3
 8002dd6:	e667      	b.n	8002aa8 <__aeabi_dsub+0x2f0>
 8002dd8:	000a      	movs	r2, r1
 8002dda:	08db      	lsrs	r3, r3, #3
 8002ddc:	433a      	orrs	r2, r7
 8002dde:	d100      	bne.n	8002de2 <__aeabi_dsub+0x62a>
 8002de0:	e66f      	b.n	8002ac2 <__aeabi_dsub+0x30a>
 8002de2:	4662      	mov	r2, ip
 8002de4:	0752      	lsls	r2, r2, #29
 8002de6:	4313      	orrs	r3, r2
 8002de8:	4662      	mov	r2, ip
 8002dea:	08d4      	lsrs	r4, r2, #3
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	0312      	lsls	r2, r2, #12
 8002df0:	4214      	tst	r4, r2
 8002df2:	d007      	beq.n	8002e04 <__aeabi_dsub+0x64c>
 8002df4:	08c8      	lsrs	r0, r1, #3
 8002df6:	4210      	tst	r0, r2
 8002df8:	d104      	bne.n	8002e04 <__aeabi_dsub+0x64c>
 8002dfa:	465d      	mov	r5, fp
 8002dfc:	0004      	movs	r4, r0
 8002dfe:	08fb      	lsrs	r3, r7, #3
 8002e00:	0749      	lsls	r1, r1, #29
 8002e02:	430b      	orrs	r3, r1
 8002e04:	0f5a      	lsrs	r2, r3, #29
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	08db      	lsrs	r3, r3, #3
 8002e0a:	0752      	lsls	r2, r2, #29
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	e65d      	b.n	8002acc <__aeabi_dsub+0x314>
 8002e10:	074b      	lsls	r3, r1, #29
 8002e12:	08ff      	lsrs	r7, r7, #3
 8002e14:	433b      	orrs	r3, r7
 8002e16:	08cc      	lsrs	r4, r1, #3
 8002e18:	e649      	b.n	8002aae <__aeabi_dsub+0x2f6>
 8002e1a:	19dc      	adds	r4, r3, r7
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	419b      	sbcs	r3, r3
 8002e20:	4461      	add	r1, ip
 8002e22:	4689      	mov	r9, r1
 8002e24:	425b      	negs	r3, r3
 8002e26:	4499      	add	r9, r3
 8002e28:	464b      	mov	r3, r9
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	d400      	bmi.n	8002e30 <__aeabi_dsub+0x678>
 8002e2e:	e631      	b.n	8002a94 <__aeabi_dsub+0x2dc>
 8002e30:	464a      	mov	r2, r9
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <__aeabi_dsub+0x6d8>)
 8002e34:	401a      	ands	r2, r3
 8002e36:	2301      	movs	r3, #1
 8002e38:	4691      	mov	r9, r2
 8002e3a:	4698      	mov	r8, r3
 8002e3c:	e62a      	b.n	8002a94 <__aeabi_dsub+0x2dc>
 8002e3e:	0016      	movs	r6, r2
 8002e40:	4664      	mov	r4, ip
 8002e42:	3e20      	subs	r6, #32
 8002e44:	40f4      	lsrs	r4, r6
 8002e46:	46a0      	mov	r8, r4
 8002e48:	2a20      	cmp	r2, #32
 8002e4a:	d005      	beq.n	8002e58 <__aeabi_dsub+0x6a0>
 8002e4c:	2640      	movs	r6, #64	; 0x40
 8002e4e:	4664      	mov	r4, ip
 8002e50:	1ab2      	subs	r2, r6, r2
 8002e52:	4094      	lsls	r4, r2
 8002e54:	4323      	orrs	r3, r4
 8002e56:	469a      	mov	sl, r3
 8002e58:	4654      	mov	r4, sl
 8002e5a:	1e63      	subs	r3, r4, #1
 8002e5c:	419c      	sbcs	r4, r3
 8002e5e:	4643      	mov	r3, r8
 8002e60:	431c      	orrs	r4, r3
 8002e62:	e5db      	b.n	8002a1c <__aeabi_dsub+0x264>
 8002e64:	0002      	movs	r2, r0
 8002e66:	2400      	movs	r4, #0
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e548      	b.n	80028fe <__aeabi_dsub+0x146>
 8002e6c:	19dc      	adds	r4, r3, r7
 8002e6e:	42bc      	cmp	r4, r7
 8002e70:	41bf      	sbcs	r7, r7
 8002e72:	4461      	add	r1, ip
 8002e74:	4689      	mov	r9, r1
 8002e76:	427f      	negs	r7, r7
 8002e78:	44b9      	add	r9, r7
 8002e7a:	e738      	b.n	8002cee <__aeabi_dsub+0x536>
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	4323      	orrs	r3, r4
 8002e80:	d100      	bne.n	8002e84 <__aeabi_dsub+0x6cc>
 8002e82:	e69f      	b.n	8002bc4 <__aeabi_dsub+0x40c>
 8002e84:	e606      	b.n	8002a94 <__aeabi_dsub+0x2dc>
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	000007fe 	.word	0x000007fe
 8002e8c:	000007ff 	.word	0x000007ff
 8002e90:	ff7fffff 	.word	0xff7fffff
 8002e94:	08ff      	lsrs	r7, r7, #3
 8002e96:	074b      	lsls	r3, r1, #29
 8002e98:	433b      	orrs	r3, r7
 8002e9a:	08cc      	lsrs	r4, r1, #3
 8002e9c:	e616      	b.n	8002acc <__aeabi_dsub+0x314>
 8002e9e:	4662      	mov	r2, ip
 8002ea0:	08db      	lsrs	r3, r3, #3
 8002ea2:	0752      	lsls	r2, r2, #29
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	08d4      	lsrs	r4, r2, #3
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	0312      	lsls	r2, r2, #12
 8002eae:	4214      	tst	r4, r2
 8002eb0:	d007      	beq.n	8002ec2 <__aeabi_dsub+0x70a>
 8002eb2:	08c8      	lsrs	r0, r1, #3
 8002eb4:	4210      	tst	r0, r2
 8002eb6:	d104      	bne.n	8002ec2 <__aeabi_dsub+0x70a>
 8002eb8:	465d      	mov	r5, fp
 8002eba:	0004      	movs	r4, r0
 8002ebc:	08fb      	lsrs	r3, r7, #3
 8002ebe:	0749      	lsls	r1, r1, #29
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	0f5a      	lsrs	r2, r3, #29
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	0752      	lsls	r2, r2, #29
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	e5fe      	b.n	8002acc <__aeabi_dsub+0x314>
 8002ece:	2300      	movs	r3, #0
 8002ed0:	4a01      	ldr	r2, [pc, #4]	; (8002ed8 <__aeabi_dsub+0x720>)
 8002ed2:	001c      	movs	r4, r3
 8002ed4:	e513      	b.n	80028fe <__aeabi_dsub+0x146>
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	000007ff 	.word	0x000007ff

08002edc <__aeabi_dcmpun>:
 8002edc:	b570      	push	{r4, r5, r6, lr}
 8002ede:	0005      	movs	r5, r0
 8002ee0:	480c      	ldr	r0, [pc, #48]	; (8002f14 <__aeabi_dcmpun+0x38>)
 8002ee2:	031c      	lsls	r4, r3, #12
 8002ee4:	0016      	movs	r6, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	030a      	lsls	r2, r1, #12
 8002eea:	0049      	lsls	r1, r1, #1
 8002eec:	0b12      	lsrs	r2, r2, #12
 8002eee:	0d49      	lsrs	r1, r1, #21
 8002ef0:	0b24      	lsrs	r4, r4, #12
 8002ef2:	0d5b      	lsrs	r3, r3, #21
 8002ef4:	4281      	cmp	r1, r0
 8002ef6:	d008      	beq.n	8002f0a <__aeabi_dcmpun+0x2e>
 8002ef8:	4a06      	ldr	r2, [pc, #24]	; (8002f14 <__aeabi_dcmpun+0x38>)
 8002efa:	2000      	movs	r0, #0
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d103      	bne.n	8002f08 <__aeabi_dcmpun+0x2c>
 8002f00:	0020      	movs	r0, r4
 8002f02:	4330      	orrs	r0, r6
 8002f04:	1e43      	subs	r3, r0, #1
 8002f06:	4198      	sbcs	r0, r3
 8002f08:	bd70      	pop	{r4, r5, r6, pc}
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	432a      	orrs	r2, r5
 8002f0e:	d1fb      	bne.n	8002f08 <__aeabi_dcmpun+0x2c>
 8002f10:	e7f2      	b.n	8002ef8 <__aeabi_dcmpun+0x1c>
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	000007ff 	.word	0x000007ff

08002f18 <__aeabi_d2iz>:
 8002f18:	000a      	movs	r2, r1
 8002f1a:	b530      	push	{r4, r5, lr}
 8002f1c:	4c13      	ldr	r4, [pc, #76]	; (8002f6c <__aeabi_d2iz+0x54>)
 8002f1e:	0053      	lsls	r3, r2, #1
 8002f20:	0309      	lsls	r1, r1, #12
 8002f22:	0005      	movs	r5, r0
 8002f24:	0b09      	lsrs	r1, r1, #12
 8002f26:	2000      	movs	r0, #0
 8002f28:	0d5b      	lsrs	r3, r3, #21
 8002f2a:	0fd2      	lsrs	r2, r2, #31
 8002f2c:	42a3      	cmp	r3, r4
 8002f2e:	dd04      	ble.n	8002f3a <__aeabi_d2iz+0x22>
 8002f30:	480f      	ldr	r0, [pc, #60]	; (8002f70 <__aeabi_d2iz+0x58>)
 8002f32:	4283      	cmp	r3, r0
 8002f34:	dd02      	ble.n	8002f3c <__aeabi_d2iz+0x24>
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <__aeabi_d2iz+0x5c>)
 8002f38:	18d0      	adds	r0, r2, r3
 8002f3a:	bd30      	pop	{r4, r5, pc}
 8002f3c:	2080      	movs	r0, #128	; 0x80
 8002f3e:	0340      	lsls	r0, r0, #13
 8002f40:	4301      	orrs	r1, r0
 8002f42:	480d      	ldr	r0, [pc, #52]	; (8002f78 <__aeabi_d2iz+0x60>)
 8002f44:	1ac0      	subs	r0, r0, r3
 8002f46:	281f      	cmp	r0, #31
 8002f48:	dd08      	ble.n	8002f5c <__aeabi_d2iz+0x44>
 8002f4a:	480c      	ldr	r0, [pc, #48]	; (8002f7c <__aeabi_d2iz+0x64>)
 8002f4c:	1ac3      	subs	r3, r0, r3
 8002f4e:	40d9      	lsrs	r1, r3
 8002f50:	000b      	movs	r3, r1
 8002f52:	4258      	negs	r0, r3
 8002f54:	2a00      	cmp	r2, #0
 8002f56:	d1f0      	bne.n	8002f3a <__aeabi_d2iz+0x22>
 8002f58:	0018      	movs	r0, r3
 8002f5a:	e7ee      	b.n	8002f3a <__aeabi_d2iz+0x22>
 8002f5c:	4c08      	ldr	r4, [pc, #32]	; (8002f80 <__aeabi_d2iz+0x68>)
 8002f5e:	40c5      	lsrs	r5, r0
 8002f60:	46a4      	mov	ip, r4
 8002f62:	4463      	add	r3, ip
 8002f64:	4099      	lsls	r1, r3
 8002f66:	000b      	movs	r3, r1
 8002f68:	432b      	orrs	r3, r5
 8002f6a:	e7f2      	b.n	8002f52 <__aeabi_d2iz+0x3a>
 8002f6c:	000003fe 	.word	0x000003fe
 8002f70:	0000041d 	.word	0x0000041d
 8002f74:	7fffffff 	.word	0x7fffffff
 8002f78:	00000433 	.word	0x00000433
 8002f7c:	00000413 	.word	0x00000413
 8002f80:	fffffbed 	.word	0xfffffbed

08002f84 <__aeabi_i2d>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d016      	beq.n	8002fb8 <__aeabi_i2d+0x34>
 8002f8a:	17c3      	asrs	r3, r0, #31
 8002f8c:	18c5      	adds	r5, r0, r3
 8002f8e:	405d      	eors	r5, r3
 8002f90:	0fc4      	lsrs	r4, r0, #31
 8002f92:	0028      	movs	r0, r5
 8002f94:	f000 f91c 	bl	80031d0 <__clzsi2>
 8002f98:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <__aeabi_i2d+0x5c>)
 8002f9a:	1a12      	subs	r2, r2, r0
 8002f9c:	280a      	cmp	r0, #10
 8002f9e:	dc16      	bgt.n	8002fce <__aeabi_i2d+0x4a>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	002e      	movs	r6, r5
 8002fa4:	3315      	adds	r3, #21
 8002fa6:	409e      	lsls	r6, r3
 8002fa8:	230b      	movs	r3, #11
 8002faa:	1a18      	subs	r0, r3, r0
 8002fac:	40c5      	lsrs	r5, r0
 8002fae:	0552      	lsls	r2, r2, #21
 8002fb0:	032d      	lsls	r5, r5, #12
 8002fb2:	0b2d      	lsrs	r5, r5, #12
 8002fb4:	0d53      	lsrs	r3, r2, #21
 8002fb6:	e003      	b.n	8002fc0 <__aeabi_i2d+0x3c>
 8002fb8:	2400      	movs	r4, #0
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2500      	movs	r5, #0
 8002fbe:	2600      	movs	r6, #0
 8002fc0:	051b      	lsls	r3, r3, #20
 8002fc2:	432b      	orrs	r3, r5
 8002fc4:	07e4      	lsls	r4, r4, #31
 8002fc6:	4323      	orrs	r3, r4
 8002fc8:	0030      	movs	r0, r6
 8002fca:	0019      	movs	r1, r3
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
 8002fce:	380b      	subs	r0, #11
 8002fd0:	4085      	lsls	r5, r0
 8002fd2:	0552      	lsls	r2, r2, #21
 8002fd4:	032d      	lsls	r5, r5, #12
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	0b2d      	lsrs	r5, r5, #12
 8002fda:	0d53      	lsrs	r3, r2, #21
 8002fdc:	e7f0      	b.n	8002fc0 <__aeabi_i2d+0x3c>
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	0000041e 	.word	0x0000041e

08002fe4 <__aeabi_ui2d>:
 8002fe4:	b510      	push	{r4, lr}
 8002fe6:	1e04      	subs	r4, r0, #0
 8002fe8:	d010      	beq.n	800300c <__aeabi_ui2d+0x28>
 8002fea:	f000 f8f1 	bl	80031d0 <__clzsi2>
 8002fee:	4b0f      	ldr	r3, [pc, #60]	; (800302c <__aeabi_ui2d+0x48>)
 8002ff0:	1a1b      	subs	r3, r3, r0
 8002ff2:	280a      	cmp	r0, #10
 8002ff4:	dc11      	bgt.n	800301a <__aeabi_ui2d+0x36>
 8002ff6:	220b      	movs	r2, #11
 8002ff8:	0021      	movs	r1, r4
 8002ffa:	1a12      	subs	r2, r2, r0
 8002ffc:	40d1      	lsrs	r1, r2
 8002ffe:	3015      	adds	r0, #21
 8003000:	030a      	lsls	r2, r1, #12
 8003002:	055b      	lsls	r3, r3, #21
 8003004:	4084      	lsls	r4, r0
 8003006:	0b12      	lsrs	r2, r2, #12
 8003008:	0d5b      	lsrs	r3, r3, #21
 800300a:	e001      	b.n	8003010 <__aeabi_ui2d+0x2c>
 800300c:	2300      	movs	r3, #0
 800300e:	2200      	movs	r2, #0
 8003010:	051b      	lsls	r3, r3, #20
 8003012:	4313      	orrs	r3, r2
 8003014:	0020      	movs	r0, r4
 8003016:	0019      	movs	r1, r3
 8003018:	bd10      	pop	{r4, pc}
 800301a:	0022      	movs	r2, r4
 800301c:	380b      	subs	r0, #11
 800301e:	4082      	lsls	r2, r0
 8003020:	055b      	lsls	r3, r3, #21
 8003022:	0312      	lsls	r2, r2, #12
 8003024:	2400      	movs	r4, #0
 8003026:	0b12      	lsrs	r2, r2, #12
 8003028:	0d5b      	lsrs	r3, r3, #21
 800302a:	e7f1      	b.n	8003010 <__aeabi_ui2d+0x2c>
 800302c:	0000041e 	.word	0x0000041e

08003030 <__aeabi_f2d>:
 8003030:	b570      	push	{r4, r5, r6, lr}
 8003032:	0043      	lsls	r3, r0, #1
 8003034:	0246      	lsls	r6, r0, #9
 8003036:	0fc4      	lsrs	r4, r0, #31
 8003038:	20fe      	movs	r0, #254	; 0xfe
 800303a:	0e1b      	lsrs	r3, r3, #24
 800303c:	1c59      	adds	r1, r3, #1
 800303e:	0a75      	lsrs	r5, r6, #9
 8003040:	4208      	tst	r0, r1
 8003042:	d00c      	beq.n	800305e <__aeabi_f2d+0x2e>
 8003044:	22e0      	movs	r2, #224	; 0xe0
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	4694      	mov	ip, r2
 800304a:	076d      	lsls	r5, r5, #29
 800304c:	0b36      	lsrs	r6, r6, #12
 800304e:	4463      	add	r3, ip
 8003050:	051b      	lsls	r3, r3, #20
 8003052:	4333      	orrs	r3, r6
 8003054:	07e4      	lsls	r4, r4, #31
 8003056:	4323      	orrs	r3, r4
 8003058:	0028      	movs	r0, r5
 800305a:	0019      	movs	r1, r3
 800305c:	bd70      	pop	{r4, r5, r6, pc}
 800305e:	2b00      	cmp	r3, #0
 8003060:	d114      	bne.n	800308c <__aeabi_f2d+0x5c>
 8003062:	2d00      	cmp	r5, #0
 8003064:	d01b      	beq.n	800309e <__aeabi_f2d+0x6e>
 8003066:	0028      	movs	r0, r5
 8003068:	f000 f8b2 	bl	80031d0 <__clzsi2>
 800306c:	280a      	cmp	r0, #10
 800306e:	dc1c      	bgt.n	80030aa <__aeabi_f2d+0x7a>
 8003070:	230b      	movs	r3, #11
 8003072:	002e      	movs	r6, r5
 8003074:	1a1b      	subs	r3, r3, r0
 8003076:	40de      	lsrs	r6, r3
 8003078:	0003      	movs	r3, r0
 800307a:	3315      	adds	r3, #21
 800307c:	409d      	lsls	r5, r3
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <__aeabi_f2d+0x88>)
 8003080:	0336      	lsls	r6, r6, #12
 8003082:	1a12      	subs	r2, r2, r0
 8003084:	0552      	lsls	r2, r2, #21
 8003086:	0b36      	lsrs	r6, r6, #12
 8003088:	0d53      	lsrs	r3, r2, #21
 800308a:	e7e1      	b.n	8003050 <__aeabi_f2d+0x20>
 800308c:	2d00      	cmp	r5, #0
 800308e:	d009      	beq.n	80030a4 <__aeabi_f2d+0x74>
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	0b36      	lsrs	r6, r6, #12
 8003094:	0312      	lsls	r2, r2, #12
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <__aeabi_f2d+0x8c>)
 8003098:	076d      	lsls	r5, r5, #29
 800309a:	4316      	orrs	r6, r2
 800309c:	e7d8      	b.n	8003050 <__aeabi_f2d+0x20>
 800309e:	2300      	movs	r3, #0
 80030a0:	2600      	movs	r6, #0
 80030a2:	e7d5      	b.n	8003050 <__aeabi_f2d+0x20>
 80030a4:	2600      	movs	r6, #0
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <__aeabi_f2d+0x8c>)
 80030a8:	e7d2      	b.n	8003050 <__aeabi_f2d+0x20>
 80030aa:	0003      	movs	r3, r0
 80030ac:	3b0b      	subs	r3, #11
 80030ae:	409d      	lsls	r5, r3
 80030b0:	002e      	movs	r6, r5
 80030b2:	2500      	movs	r5, #0
 80030b4:	e7e3      	b.n	800307e <__aeabi_f2d+0x4e>
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	00000389 	.word	0x00000389
 80030bc:	000007ff 	.word	0x000007ff

080030c0 <__aeabi_d2f>:
 80030c0:	0002      	movs	r2, r0
 80030c2:	004b      	lsls	r3, r1, #1
 80030c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c6:	0d5b      	lsrs	r3, r3, #21
 80030c8:	030c      	lsls	r4, r1, #12
 80030ca:	4e3d      	ldr	r6, [pc, #244]	; (80031c0 <__aeabi_d2f+0x100>)
 80030cc:	0a64      	lsrs	r4, r4, #9
 80030ce:	0f40      	lsrs	r0, r0, #29
 80030d0:	1c5f      	adds	r7, r3, #1
 80030d2:	0fc9      	lsrs	r1, r1, #31
 80030d4:	4304      	orrs	r4, r0
 80030d6:	00d5      	lsls	r5, r2, #3
 80030d8:	4237      	tst	r7, r6
 80030da:	d00a      	beq.n	80030f2 <__aeabi_d2f+0x32>
 80030dc:	4839      	ldr	r0, [pc, #228]	; (80031c4 <__aeabi_d2f+0x104>)
 80030de:	181e      	adds	r6, r3, r0
 80030e0:	2efe      	cmp	r6, #254	; 0xfe
 80030e2:	dd16      	ble.n	8003112 <__aeabi_d2f+0x52>
 80030e4:	20ff      	movs	r0, #255	; 0xff
 80030e6:	2400      	movs	r4, #0
 80030e8:	05c0      	lsls	r0, r0, #23
 80030ea:	4320      	orrs	r0, r4
 80030ec:	07c9      	lsls	r1, r1, #31
 80030ee:	4308      	orrs	r0, r1
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <__aeabi_d2f+0x44>
 80030f6:	432c      	orrs	r4, r5
 80030f8:	d026      	beq.n	8003148 <__aeabi_d2f+0x88>
 80030fa:	2205      	movs	r2, #5
 80030fc:	0192      	lsls	r2, r2, #6
 80030fe:	0a54      	lsrs	r4, r2, #9
 8003100:	b2d8      	uxtb	r0, r3
 8003102:	e7f1      	b.n	80030e8 <__aeabi_d2f+0x28>
 8003104:	4325      	orrs	r5, r4
 8003106:	d0ed      	beq.n	80030e4 <__aeabi_d2f+0x24>
 8003108:	2080      	movs	r0, #128	; 0x80
 800310a:	03c0      	lsls	r0, r0, #15
 800310c:	4304      	orrs	r4, r0
 800310e:	20ff      	movs	r0, #255	; 0xff
 8003110:	e7ea      	b.n	80030e8 <__aeabi_d2f+0x28>
 8003112:	2e00      	cmp	r6, #0
 8003114:	dd1b      	ble.n	800314e <__aeabi_d2f+0x8e>
 8003116:	0192      	lsls	r2, r2, #6
 8003118:	1e53      	subs	r3, r2, #1
 800311a:	419a      	sbcs	r2, r3
 800311c:	00e4      	lsls	r4, r4, #3
 800311e:	0f6d      	lsrs	r5, r5, #29
 8003120:	4322      	orrs	r2, r4
 8003122:	432a      	orrs	r2, r5
 8003124:	0753      	lsls	r3, r2, #29
 8003126:	d048      	beq.n	80031ba <__aeabi_d2f+0xfa>
 8003128:	230f      	movs	r3, #15
 800312a:	4013      	ands	r3, r2
 800312c:	2b04      	cmp	r3, #4
 800312e:	d000      	beq.n	8003132 <__aeabi_d2f+0x72>
 8003130:	3204      	adds	r2, #4
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	04db      	lsls	r3, r3, #19
 8003136:	4013      	ands	r3, r2
 8003138:	d03f      	beq.n	80031ba <__aeabi_d2f+0xfa>
 800313a:	1c70      	adds	r0, r6, #1
 800313c:	2efe      	cmp	r6, #254	; 0xfe
 800313e:	d0d1      	beq.n	80030e4 <__aeabi_d2f+0x24>
 8003140:	0192      	lsls	r2, r2, #6
 8003142:	0a54      	lsrs	r4, r2, #9
 8003144:	b2c0      	uxtb	r0, r0
 8003146:	e7cf      	b.n	80030e8 <__aeabi_d2f+0x28>
 8003148:	2000      	movs	r0, #0
 800314a:	2400      	movs	r4, #0
 800314c:	e7cc      	b.n	80030e8 <__aeabi_d2f+0x28>
 800314e:	0032      	movs	r2, r6
 8003150:	3217      	adds	r2, #23
 8003152:	db22      	blt.n	800319a <__aeabi_d2f+0xda>
 8003154:	2080      	movs	r0, #128	; 0x80
 8003156:	0400      	lsls	r0, r0, #16
 8003158:	4320      	orrs	r0, r4
 800315a:	241e      	movs	r4, #30
 800315c:	1ba4      	subs	r4, r4, r6
 800315e:	2c1f      	cmp	r4, #31
 8003160:	dd1d      	ble.n	800319e <__aeabi_d2f+0xde>
 8003162:	2202      	movs	r2, #2
 8003164:	4252      	negs	r2, r2
 8003166:	1b96      	subs	r6, r2, r6
 8003168:	0002      	movs	r2, r0
 800316a:	40f2      	lsrs	r2, r6
 800316c:	0016      	movs	r6, r2
 800316e:	2c20      	cmp	r4, #32
 8003170:	d004      	beq.n	800317c <__aeabi_d2f+0xbc>
 8003172:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <__aeabi_d2f+0x108>)
 8003174:	4694      	mov	ip, r2
 8003176:	4463      	add	r3, ip
 8003178:	4098      	lsls	r0, r3
 800317a:	4305      	orrs	r5, r0
 800317c:	002a      	movs	r2, r5
 800317e:	1e53      	subs	r3, r2, #1
 8003180:	419a      	sbcs	r2, r3
 8003182:	4332      	orrs	r2, r6
 8003184:	2600      	movs	r6, #0
 8003186:	0753      	lsls	r3, r2, #29
 8003188:	d1ce      	bne.n	8003128 <__aeabi_d2f+0x68>
 800318a:	2480      	movs	r4, #128	; 0x80
 800318c:	0013      	movs	r3, r2
 800318e:	04e4      	lsls	r4, r4, #19
 8003190:	2001      	movs	r0, #1
 8003192:	4023      	ands	r3, r4
 8003194:	4222      	tst	r2, r4
 8003196:	d1d3      	bne.n	8003140 <__aeabi_d2f+0x80>
 8003198:	e7b0      	b.n	80030fc <__aeabi_d2f+0x3c>
 800319a:	2300      	movs	r3, #0
 800319c:	e7ad      	b.n	80030fa <__aeabi_d2f+0x3a>
 800319e:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <__aeabi_d2f+0x10c>)
 80031a0:	4694      	mov	ip, r2
 80031a2:	002a      	movs	r2, r5
 80031a4:	40e2      	lsrs	r2, r4
 80031a6:	0014      	movs	r4, r2
 80031a8:	002a      	movs	r2, r5
 80031aa:	4463      	add	r3, ip
 80031ac:	409a      	lsls	r2, r3
 80031ae:	4098      	lsls	r0, r3
 80031b0:	1e55      	subs	r5, r2, #1
 80031b2:	41aa      	sbcs	r2, r5
 80031b4:	4302      	orrs	r2, r0
 80031b6:	4322      	orrs	r2, r4
 80031b8:	e7e4      	b.n	8003184 <__aeabi_d2f+0xc4>
 80031ba:	0033      	movs	r3, r6
 80031bc:	e79e      	b.n	80030fc <__aeabi_d2f+0x3c>
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	000007fe 	.word	0x000007fe
 80031c4:	fffffc80 	.word	0xfffffc80
 80031c8:	fffffca2 	.word	0xfffffca2
 80031cc:	fffffc82 	.word	0xfffffc82

080031d0 <__clzsi2>:
 80031d0:	211c      	movs	r1, #28
 80031d2:	2301      	movs	r3, #1
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	4298      	cmp	r0, r3
 80031d8:	d301      	bcc.n	80031de <__clzsi2+0xe>
 80031da:	0c00      	lsrs	r0, r0, #16
 80031dc:	3910      	subs	r1, #16
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	4298      	cmp	r0, r3
 80031e2:	d301      	bcc.n	80031e8 <__clzsi2+0x18>
 80031e4:	0a00      	lsrs	r0, r0, #8
 80031e6:	3908      	subs	r1, #8
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	4298      	cmp	r0, r3
 80031ec:	d301      	bcc.n	80031f2 <__clzsi2+0x22>
 80031ee:	0900      	lsrs	r0, r0, #4
 80031f0:	3904      	subs	r1, #4
 80031f2:	a202      	add	r2, pc, #8	; (adr r2, 80031fc <__clzsi2+0x2c>)
 80031f4:	5c10      	ldrb	r0, [r2, r0]
 80031f6:	1840      	adds	r0, r0, r1
 80031f8:	4770      	bx	lr
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	02020304 	.word	0x02020304
 8003200:	01010101 	.word	0x01010101
	...

0800320c <__clzdi2>:
 800320c:	b510      	push	{r4, lr}
 800320e:	2900      	cmp	r1, #0
 8003210:	d103      	bne.n	800321a <__clzdi2+0xe>
 8003212:	f7ff ffdd 	bl	80031d0 <__clzsi2>
 8003216:	3020      	adds	r0, #32
 8003218:	e002      	b.n	8003220 <__clzdi2+0x14>
 800321a:	0008      	movs	r0, r1
 800321c:	f7ff ffd8 	bl	80031d0 <__clzsi2>
 8003220:	bd10      	pop	{r4, pc}
 8003222:	46c0      	nop			; (mov r8, r8)

08003224 <calcMA>:
			.size 		= 0,
			.lastEMA 	= 0
};

double calcMA(double previousAverage, unsigned int previousNumDays,
		double newStock) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60b8      	str	r0, [r7, #8]
 800322c:	60f9      	str	r1, [r7, #12]
 800322e:	607a      	str	r2, [r7, #4]

	double result = 0;
 8003230:	2200      	movs	r2, #0
 8003232:	2300      	movs	r3, #0
 8003234:	613a      	str	r2, [r7, #16]
 8003236:	617b      	str	r3, [r7, #20]
	result = previousNumDays * previousAverage + newStock;
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff fed3 	bl	8002fe4 <__aeabi_ui2d>
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f7ff f84d 	bl	80022e0 <__aeabi_dmul>
 8003246:	0002      	movs	r2, r0
 8003248:	000b      	movs	r3, r1
 800324a:	6a38      	ldr	r0, [r7, #32]
 800324c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800324e:	f7fe f909 	bl	8001464 <__aeabi_dadd>
 8003252:	0002      	movs	r2, r0
 8003254:	000b      	movs	r3, r1
 8003256:	613a      	str	r2, [r7, #16]
 8003258:	617b      	str	r3, [r7, #20]
	return result / (previousNumDays + 1.0);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fec2 	bl	8002fe4 <__aeabi_ui2d>
 8003260:	2200      	movs	r2, #0
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <calcMA+0x60>)
 8003264:	f7fe f8fe 	bl	8001464 <__aeabi_dadd>
 8003268:	0002      	movs	r2, r0
 800326a:	000b      	movs	r3, r1
 800326c:	6938      	ldr	r0, [r7, #16]
 800326e:	6979      	ldr	r1, [r7, #20]
 8003270:	f7fe fc34 	bl	8001adc <__aeabi_ddiv>
 8003274:	0002      	movs	r2, r0
 8003276:	000b      	movs	r3, r1

}
 8003278:	0010      	movs	r0, r2
 800327a:	0019      	movs	r1, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b006      	add	sp, #24
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	3ff00000 	.word	0x3ff00000

08003288 <calcEMA>:

double calcEMA(double previousAverage, int timePeriod, double newStock) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	60b8      	str	r0, [r7, #8]
 8003290:	60f9      	str	r1, [r7, #12]
 8003292:	607a      	str	r2, [r7, #4]
	double result = 0, mult = 0;
 8003294:	2200      	movs	r2, #0
 8003296:	2300      	movs	r3, #0
 8003298:	61ba      	str	r2, [r7, #24]
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	2200      	movs	r2, #0
 800329e:	2300      	movs	r3, #0
 80032a0:	613a      	str	r2, [r7, #16]
 80032a2:	617b      	str	r3, [r7, #20]
	mult = 2.0 / (timePeriod + 1.0);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff fe6d 	bl	8002f84 <__aeabi_i2d>
 80032aa:	2200      	movs	r2, #0
 80032ac:	4b16      	ldr	r3, [pc, #88]	; (8003308 <calcEMA+0x80>)
 80032ae:	f7fe f8d9 	bl	8001464 <__aeabi_dadd>
 80032b2:	0002      	movs	r2, r0
 80032b4:	000b      	movs	r3, r1
 80032b6:	2000      	movs	r0, #0
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	05c9      	lsls	r1, r1, #23
 80032bc:	f7fe fc0e 	bl	8001adc <__aeabi_ddiv>
 80032c0:	0002      	movs	r2, r0
 80032c2:	000b      	movs	r3, r1
 80032c4:	613a      	str	r2, [r7, #16]
 80032c6:	617b      	str	r3, [r7, #20]
	result = (newStock - previousAverage) * mult + previousAverage;
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032d0:	f7ff fa72 	bl	80027b8 <__aeabi_dsub>
 80032d4:	0002      	movs	r2, r0
 80032d6:	000b      	movs	r3, r1
 80032d8:	0010      	movs	r0, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f7fe fffe 	bl	80022e0 <__aeabi_dmul>
 80032e4:	0002      	movs	r2, r0
 80032e6:	000b      	movs	r3, r1
 80032e8:	68b8      	ldr	r0, [r7, #8]
 80032ea:	68f9      	ldr	r1, [r7, #12]
 80032ec:	f7fe f8ba 	bl	8001464 <__aeabi_dadd>
 80032f0:	0002      	movs	r2, r0
 80032f2:	000b      	movs	r3, r1
 80032f4:	61ba      	str	r2, [r7, #24]
 80032f6:	61fb      	str	r3, [r7, #28]
	return result;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	69fb      	ldr	r3, [r7, #28]

}
 80032fc:	0010      	movs	r0, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b008      	add	sp, #32
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	3ff00000 	.word	0x3ff00000

0800330c <addStock>:

void addStock(double newStock, EMA_t*EMA){
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b087      	sub	sp, #28
 8003310:	af02      	add	r7, sp, #8
 8003312:	60b8      	str	r0, [r7, #8]
 8003314:	60f9      	str	r1, [r7, #12]
 8003316:	607a      	str	r2, [r7, #4]
	EMA->size++;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	605a      	str	r2, [r3, #4]
	if(EMA->size < EMA->timePreiod){
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	8812      	ldrh	r2, [r2, #0]
 800332a:	4293      	cmp	r3, r2
 800332c:	d212      	bcs.n	8003354 <addStock+0x48>
		EMA->lastEMA = calcMA(EMA->lastEMA, EMA->size -1 , newStock);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6898      	ldr	r0, [r3, #8]
 8003332:	68d9      	ldr	r1, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	1e5c      	subs	r4, r3, #1
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	9200      	str	r2, [sp, #0]
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	0022      	movs	r2, r4
 8003344:	f7ff ff6e 	bl	8003224 <calcMA>
 8003348:	0002      	movs	r2, r0
 800334a:	000b      	movs	r3, r1
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	608a      	str	r2, [r1, #8]
 8003350:	60cb      	str	r3, [r1, #12]
	}
	else{
		EMA->lastEMA = calcEMA(EMA->lastEMA, EMA->timePreiod, newStock);
	}
}
 8003352:	e011      	b.n	8003378 <addStock+0x6c>
		EMA->lastEMA = calcEMA(EMA->lastEMA, EMA->timePreiod, newStock);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6898      	ldr	r0, [r3, #8]
 8003358:	68d9      	ldr	r1, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	001c      	movs	r4, r3
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	9200      	str	r2, [sp, #0]
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	0022      	movs	r2, r4
 800336a:	f7ff ff8d 	bl	8003288 <calcEMA>
 800336e:	0002      	movs	r2, r0
 8003370:	000b      	movs	r3, r1
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	608a      	str	r2, [r1, #8]
 8003376:	60cb      	str	r3, [r1, #12]
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b005      	add	sp, #20
 800337e:	bd90      	pop	{r4, r7, pc}

08003380 <getAverage>:

double getAverage(void) {
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
	switch (sensorConfig.ema) {
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <getAverage+0x4c>)
 8003386:	785b      	ldrb	r3, [r3, #1]
 8003388:	2b04      	cmp	r3, #4
 800338a:	d818      	bhi.n	80033be <getAverage+0x3e>
 800338c:	009a      	lsls	r2, r3, #2
 800338e:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <getAverage+0x50>)
 8003390:	18d3      	adds	r3, r2, r3
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	469f      	mov	pc, r3
	case EMA5:
		return SensorEMA5.lastEMA;
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <getAverage+0x54>)
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	e012      	b.n	80033c4 <getAverage+0x44>
		break;
	case EMA10:
		return SensorEMA10.lastEMA;
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <getAverage+0x58>)
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	e00e      	b.n	80033c4 <getAverage+0x44>
		break;
	case EMA15:
		return SensorEMA15.lastEMA;
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <getAverage+0x5c>)
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	e00a      	b.n	80033c4 <getAverage+0x44>
		break;
	case EMA30:
		return SensorEMA30.lastEMA;
 80033ae:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <getAverage+0x60>)
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	e006      	b.n	80033c4 <getAverage+0x44>
		break;
	case EMA50:
		return SensorEMA50.lastEMA;
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <getAverage+0x64>)
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	e002      	b.n	80033c4 <getAverage+0x44>
		break;
	default:
		return SensorEMA5.lastEMA;
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <getAverage+0x54>)
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	68db      	ldr	r3, [r3, #12]
		break;
	}
}
 80033c4:	0010      	movs	r0, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000568 	.word	0x20000568
 80033d0:	0800e3c0 	.word	0x0800e3c0
 80033d4:	20000000 	.word	0x20000000
 80033d8:	20000010 	.word	0x20000010
 80033dc:	20000020 	.word	0x20000020
 80033e0:	20000030 	.word	0x20000030
 80033e4:	20000040 	.word	0x20000040

080033e8 <Madgwick_init>:
    float roll;
    float pitch;
    float yaw;
    char anglesComputed;

void Madgwick_init(float sampleFrequency) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    beta = betaDef;
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <Madgwick_init+0x50>)
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <Madgwick_init+0x54>)
 80033f4:	601a      	str	r2, [r3, #0]
	q0 = 1.0f;
 80033f6:	4b12      	ldr	r3, [pc, #72]	; (8003440 <Madgwick_init+0x58>)
 80033f8:	22fe      	movs	r2, #254	; 0xfe
 80033fa:	0592      	lsls	r2, r2, #22
 80033fc:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <Madgwick_init+0x5c>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 8003404:	4b10      	ldr	r3, [pc, #64]	; (8003448 <Madgwick_init+0x60>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <Madgwick_init+0x64>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
	invSampleFreq = 1.0f / sampleFreqDef;
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <Madgwick_init+0x68>)
 8003412:	22ec      	movs	r2, #236	; 0xec
 8003414:	0592      	lsls	r2, r2, #22
 8003416:	601a      	str	r2, [r3, #0]
	anglesComputed = 0;
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <Madgwick_init+0x6c>)
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]

    invSampleFreq = 1.0f / sampleFrequency;
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	20fe      	movs	r0, #254	; 0xfe
 8003422:	0580      	lsls	r0, r0, #22
 8003424:	f7fd fb2a 	bl	8000a7c <__aeabi_fdiv>
 8003428:	1c03      	adds	r3, r0, #0
 800342a:	1c1a      	adds	r2, r3, #0
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <Madgwick_init+0x68>)
 800342e:	601a      	str	r2, [r3, #0]
    }
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	2000028c 	.word	0x2000028c
 800343c:	3dcccccd 	.word	0x3dcccccd
 8003440:	20000290 	.word	0x20000290
 8003444:	20000294 	.word	0x20000294
 8003448:	20000298 	.word	0x20000298
 800344c:	2000029c 	.word	0x2000029c
 8003450:	200002a0 	.word	0x200002a0
 8003454:	200002b0 	.word	0x200002b0

08003458 <Madgwick_updateIMU>:
}

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Madgwick_updateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b09b      	sub	sp, #108	; 0x6c
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 8003466:	49fa      	ldr	r1, [pc, #1000]	; (8003850 <Madgwick_updateIMU+0x3f8>)
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f7fd fccf 	bl	8000e0c <__aeabi_fmul>
 800346e:	1c03      	adds	r3, r0, #0
 8003470:	60fb      	str	r3, [r7, #12]
	gy *= 0.0174533f;
 8003472:	49f7      	ldr	r1, [pc, #988]	; (8003850 <Madgwick_updateIMU+0x3f8>)
 8003474:	68b8      	ldr	r0, [r7, #8]
 8003476:	f7fd fcc9 	bl	8000e0c <__aeabi_fmul>
 800347a:	1c03      	adds	r3, r0, #0
 800347c:	60bb      	str	r3, [r7, #8]
	gz *= 0.0174533f;
 800347e:	49f4      	ldr	r1, [pc, #976]	; (8003850 <Madgwick_updateIMU+0x3f8>)
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7fd fcc3 	bl	8000e0c <__aeabi_fmul>
 8003486:	1c03      	adds	r3, r0, #0
 8003488:	607b      	str	r3, [r7, #4]

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800348a:	4bf2      	ldr	r3, [pc, #968]	; (8003854 <Madgwick_updateIMU+0x3fc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	0612      	lsls	r2, r2, #24
 8003492:	4053      	eors	r3, r2
 8003494:	68f9      	ldr	r1, [r7, #12]
 8003496:	1c18      	adds	r0, r3, #0
 8003498:	f7fd fcb8 	bl	8000e0c <__aeabi_fmul>
 800349c:	1c03      	adds	r3, r0, #0
 800349e:	1c1c      	adds	r4, r3, #0
 80034a0:	4bed      	ldr	r3, [pc, #948]	; (8003858 <Madgwick_updateIMU+0x400>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	1c18      	adds	r0, r3, #0
 80034a8:	f7fd fcb0 	bl	8000e0c <__aeabi_fmul>
 80034ac:	1c03      	adds	r3, r0, #0
 80034ae:	1c19      	adds	r1, r3, #0
 80034b0:	1c20      	adds	r0, r4, #0
 80034b2:	f7fd fdd1 	bl	8001058 <__aeabi_fsub>
 80034b6:	1c03      	adds	r3, r0, #0
 80034b8:	1c1c      	adds	r4, r3, #0
 80034ba:	4be8      	ldr	r3, [pc, #928]	; (800385c <Madgwick_updateIMU+0x404>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	1c18      	adds	r0, r3, #0
 80034c2:	f7fd fca3 	bl	8000e0c <__aeabi_fmul>
 80034c6:	1c03      	adds	r3, r0, #0
 80034c8:	1c19      	adds	r1, r3, #0
 80034ca:	1c20      	adds	r0, r4, #0
 80034cc:	f7fd fdc4 	bl	8001058 <__aeabi_fsub>
 80034d0:	1c03      	adds	r3, r0, #0
 80034d2:	21fc      	movs	r1, #252	; 0xfc
 80034d4:	0589      	lsls	r1, r1, #22
 80034d6:	1c18      	adds	r0, r3, #0
 80034d8:	f7fd fc98 	bl	8000e0c <__aeabi_fmul>
 80034dc:	1c03      	adds	r3, r0, #0
 80034de:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80034e0:	4bdf      	ldr	r3, [pc, #892]	; (8003860 <Madgwick_updateIMU+0x408>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68f9      	ldr	r1, [r7, #12]
 80034e6:	1c18      	adds	r0, r3, #0
 80034e8:	f7fd fc90 	bl	8000e0c <__aeabi_fmul>
 80034ec:	1c03      	adds	r3, r0, #0
 80034ee:	1c1c      	adds	r4, r3, #0
 80034f0:	4bd9      	ldr	r3, [pc, #868]	; (8003858 <Madgwick_updateIMU+0x400>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	1c18      	adds	r0, r3, #0
 80034f8:	f7fd fc88 	bl	8000e0c <__aeabi_fmul>
 80034fc:	1c03      	adds	r3, r0, #0
 80034fe:	1c19      	adds	r1, r3, #0
 8003500:	1c20      	adds	r0, r4, #0
 8003502:	f7fd f91d 	bl	8000740 <__aeabi_fadd>
 8003506:	1c03      	adds	r3, r0, #0
 8003508:	1c1c      	adds	r4, r3, #0
 800350a:	4bd4      	ldr	r3, [pc, #848]	; (800385c <Madgwick_updateIMU+0x404>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	1c18      	adds	r0, r3, #0
 8003512:	f7fd fc7b 	bl	8000e0c <__aeabi_fmul>
 8003516:	1c03      	adds	r3, r0, #0
 8003518:	1c19      	adds	r1, r3, #0
 800351a:	1c20      	adds	r0, r4, #0
 800351c:	f7fd fd9c 	bl	8001058 <__aeabi_fsub>
 8003520:	1c03      	adds	r3, r0, #0
 8003522:	21fc      	movs	r1, #252	; 0xfc
 8003524:	0589      	lsls	r1, r1, #22
 8003526:	1c18      	adds	r0, r3, #0
 8003528:	f7fd fc70 	bl	8000e0c <__aeabi_fmul>
 800352c:	1c03      	adds	r3, r0, #0
 800352e:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003530:	4bcb      	ldr	r3, [pc, #812]	; (8003860 <Madgwick_updateIMU+0x408>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	1c18      	adds	r0, r3, #0
 8003538:	f7fd fc68 	bl	8000e0c <__aeabi_fmul>
 800353c:	1c03      	adds	r3, r0, #0
 800353e:	1c1c      	adds	r4, r3, #0
 8003540:	4bc4      	ldr	r3, [pc, #784]	; (8003854 <Madgwick_updateIMU+0x3fc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	1c18      	adds	r0, r3, #0
 8003548:	f7fd fc60 	bl	8000e0c <__aeabi_fmul>
 800354c:	1c03      	adds	r3, r0, #0
 800354e:	1c19      	adds	r1, r3, #0
 8003550:	1c20      	adds	r0, r4, #0
 8003552:	f7fd fd81 	bl	8001058 <__aeabi_fsub>
 8003556:	1c03      	adds	r3, r0, #0
 8003558:	1c1c      	adds	r4, r3, #0
 800355a:	4bc0      	ldr	r3, [pc, #768]	; (800385c <Madgwick_updateIMU+0x404>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68f9      	ldr	r1, [r7, #12]
 8003560:	1c18      	adds	r0, r3, #0
 8003562:	f7fd fc53 	bl	8000e0c <__aeabi_fmul>
 8003566:	1c03      	adds	r3, r0, #0
 8003568:	1c19      	adds	r1, r3, #0
 800356a:	1c20      	adds	r0, r4, #0
 800356c:	f7fd f8e8 	bl	8000740 <__aeabi_fadd>
 8003570:	1c03      	adds	r3, r0, #0
 8003572:	21fc      	movs	r1, #252	; 0xfc
 8003574:	0589      	lsls	r1, r1, #22
 8003576:	1c18      	adds	r0, r3, #0
 8003578:	f7fd fc48 	bl	8000e0c <__aeabi_fmul>
 800357c:	1c03      	adds	r3, r0, #0
 800357e:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003580:	4bb7      	ldr	r3, [pc, #732]	; (8003860 <Madgwick_updateIMU+0x408>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	1c18      	adds	r0, r3, #0
 8003588:	f7fd fc40 	bl	8000e0c <__aeabi_fmul>
 800358c:	1c03      	adds	r3, r0, #0
 800358e:	1c1c      	adds	r4, r3, #0
 8003590:	4bb0      	ldr	r3, [pc, #704]	; (8003854 <Madgwick_updateIMU+0x3fc>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	1c18      	adds	r0, r3, #0
 8003598:	f7fd fc38 	bl	8000e0c <__aeabi_fmul>
 800359c:	1c03      	adds	r3, r0, #0
 800359e:	1c19      	adds	r1, r3, #0
 80035a0:	1c20      	adds	r0, r4, #0
 80035a2:	f7fd f8cd 	bl	8000740 <__aeabi_fadd>
 80035a6:	1c03      	adds	r3, r0, #0
 80035a8:	1c1c      	adds	r4, r3, #0
 80035aa:	4bab      	ldr	r3, [pc, #684]	; (8003858 <Madgwick_updateIMU+0x400>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68f9      	ldr	r1, [r7, #12]
 80035b0:	1c18      	adds	r0, r3, #0
 80035b2:	f7fd fc2b 	bl	8000e0c <__aeabi_fmul>
 80035b6:	1c03      	adds	r3, r0, #0
 80035b8:	1c19      	adds	r1, r3, #0
 80035ba:	1c20      	adds	r0, r4, #0
 80035bc:	f7fd fd4c 	bl	8001058 <__aeabi_fsub>
 80035c0:	1c03      	adds	r3, r0, #0
 80035c2:	21fc      	movs	r1, #252	; 0xfc
 80035c4:	0589      	lsls	r1, r1, #22
 80035c6:	1c18      	adds	r0, r3, #0
 80035c8:	f7fd fc20 	bl	8000e0c <__aeabi_fmul>
 80035cc:	1c03      	adds	r3, r0, #0
 80035ce:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80035d0:	2100      	movs	r1, #0
 80035d2:	6838      	ldr	r0, [r7, #0]
 80035d4:	f7fc ff7c 	bl	80004d0 <__aeabi_fcmpeq>
 80035d8:	1e03      	subs	r3, r0, #0
 80035da:	d00c      	beq.n	80035f6 <Madgwick_updateIMU+0x19e>
 80035dc:	2100      	movs	r1, #0
 80035de:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80035e0:	f7fc ff76 	bl	80004d0 <__aeabi_fcmpeq>
 80035e4:	1e03      	subs	r3, r0, #0
 80035e6:	d006      	beq.n	80035f6 <Madgwick_updateIMU+0x19e>
 80035e8:	2100      	movs	r1, #0
 80035ea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80035ec:	f7fc ff70 	bl	80004d0 <__aeabi_fcmpeq>
 80035f0:	1e03      	subs	r3, r0, #0
 80035f2:	d000      	beq.n	80035f6 <Madgwick_updateIMU+0x19e>
 80035f4:	e235      	b.n	8003a62 <Madgwick_updateIMU+0x60a>

		// Normalise accelerometer measurement
		recipNorm = Madgwick_invSqrt(ax * ax + ay * ay + az * az);
 80035f6:	6839      	ldr	r1, [r7, #0]
 80035f8:	6838      	ldr	r0, [r7, #0]
 80035fa:	f7fd fc07 	bl	8000e0c <__aeabi_fmul>
 80035fe:	1c03      	adds	r3, r0, #0
 8003600:	1c1c      	adds	r4, r3, #0
 8003602:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003604:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003606:	f7fd fc01 	bl	8000e0c <__aeabi_fmul>
 800360a:	1c03      	adds	r3, r0, #0
 800360c:	1c19      	adds	r1, r3, #0
 800360e:	1c20      	adds	r0, r4, #0
 8003610:	f7fd f896 	bl	8000740 <__aeabi_fadd>
 8003614:	1c03      	adds	r3, r0, #0
 8003616:	1c1c      	adds	r4, r3, #0
 8003618:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800361a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800361c:	f7fd fbf6 	bl	8000e0c <__aeabi_fmul>
 8003620:	1c03      	adds	r3, r0, #0
 8003622:	1c19      	adds	r1, r3, #0
 8003624:	1c20      	adds	r0, r4, #0
 8003626:	f7fd f88b 	bl	8000740 <__aeabi_fadd>
 800362a:	1c03      	adds	r3, r0, #0
 800362c:	1c18      	adds	r0, r3, #0
 800362e:	f000 fad9 	bl	8003be4 <Madgwick_invSqrt>
 8003632:	1c03      	adds	r3, r0, #0
 8003634:	657b      	str	r3, [r7, #84]	; 0x54
		ax *= recipNorm;
 8003636:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003638:	6838      	ldr	r0, [r7, #0]
 800363a:	f7fd fbe7 	bl	8000e0c <__aeabi_fmul>
 800363e:	1c03      	adds	r3, r0, #0
 8003640:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8003642:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003644:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003646:	f7fd fbe1 	bl	8000e0c <__aeabi_fmul>
 800364a:	1c03      	adds	r3, r0, #0
 800364c:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;
 800364e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003650:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003652:	f7fd fbdb 	bl	8000e0c <__aeabi_fmul>
 8003656:	1c03      	adds	r3, r0, #0
 8003658:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800365a:	4b81      	ldr	r3, [pc, #516]	; (8003860 <Madgwick_updateIMU+0x408>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	1c19      	adds	r1, r3, #0
 8003660:	1c18      	adds	r0, r3, #0
 8003662:	f7fd f86d 	bl	8000740 <__aeabi_fadd>
 8003666:	1c03      	adds	r3, r0, #0
 8003668:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 800366a:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <Madgwick_updateIMU+0x3fc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	1c19      	adds	r1, r3, #0
 8003670:	1c18      	adds	r0, r3, #0
 8003672:	f7fd f865 	bl	8000740 <__aeabi_fadd>
 8003676:	1c03      	adds	r3, r0, #0
 8003678:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 800367a:	4b77      	ldr	r3, [pc, #476]	; (8003858 <Madgwick_updateIMU+0x400>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	1c19      	adds	r1, r3, #0
 8003680:	1c18      	adds	r0, r3, #0
 8003682:	f7fd f85d 	bl	8000740 <__aeabi_fadd>
 8003686:	1c03      	adds	r3, r0, #0
 8003688:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 800368a:	4b74      	ldr	r3, [pc, #464]	; (800385c <Madgwick_updateIMU+0x404>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c19      	adds	r1, r3, #0
 8003690:	1c18      	adds	r0, r3, #0
 8003692:	f7fd f855 	bl	8000740 <__aeabi_fadd>
 8003696:	1c03      	adds	r3, r0, #0
 8003698:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 800369a:	4b71      	ldr	r3, [pc, #452]	; (8003860 <Madgwick_updateIMU+0x408>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2181      	movs	r1, #129	; 0x81
 80036a0:	05c9      	lsls	r1, r1, #23
 80036a2:	1c18      	adds	r0, r3, #0
 80036a4:	f7fd fbb2 	bl	8000e0c <__aeabi_fmul>
 80036a8:	1c03      	adds	r3, r0, #0
 80036aa:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 80036ac:	4b69      	ldr	r3, [pc, #420]	; (8003854 <Madgwick_updateIMU+0x3fc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2181      	movs	r1, #129	; 0x81
 80036b2:	05c9      	lsls	r1, r1, #23
 80036b4:	1c18      	adds	r0, r3, #0
 80036b6:	f7fd fba9 	bl	8000e0c <__aeabi_fmul>
 80036ba:	1c03      	adds	r3, r0, #0
 80036bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 80036be:	4b66      	ldr	r3, [pc, #408]	; (8003858 <Madgwick_updateIMU+0x400>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2181      	movs	r1, #129	; 0x81
 80036c4:	05c9      	lsls	r1, r1, #23
 80036c6:	1c18      	adds	r0, r3, #0
 80036c8:	f7fd fba0 	bl	8000e0c <__aeabi_fmul>
 80036cc:	1c03      	adds	r3, r0, #0
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 80036d0:	4b60      	ldr	r3, [pc, #384]	; (8003854 <Madgwick_updateIMU+0x3fc>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2182      	movs	r1, #130	; 0x82
 80036d6:	05c9      	lsls	r1, r1, #23
 80036d8:	1c18      	adds	r0, r3, #0
 80036da:	f7fd fb97 	bl	8000e0c <__aeabi_fmul>
 80036de:	1c03      	adds	r3, r0, #0
 80036e0:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 80036e2:	4b5d      	ldr	r3, [pc, #372]	; (8003858 <Madgwick_updateIMU+0x400>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2182      	movs	r1, #130	; 0x82
 80036e8:	05c9      	lsls	r1, r1, #23
 80036ea:	1c18      	adds	r0, r3, #0
 80036ec:	f7fd fb8e 	bl	8000e0c <__aeabi_fmul>
 80036f0:	1c03      	adds	r3, r0, #0
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
		q0q0 = q0 * q0;
 80036f4:	4b5a      	ldr	r3, [pc, #360]	; (8003860 <Madgwick_updateIMU+0x408>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <Madgwick_updateIMU+0x408>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	1c19      	adds	r1, r3, #0
 80036fe:	1c10      	adds	r0, r2, #0
 8003700:	f7fd fb84 	bl	8000e0c <__aeabi_fmul>
 8003704:	1c03      	adds	r3, r0, #0
 8003706:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 8003708:	4b52      	ldr	r3, [pc, #328]	; (8003854 <Madgwick_updateIMU+0x3fc>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b51      	ldr	r3, [pc, #324]	; (8003854 <Madgwick_updateIMU+0x3fc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	1c19      	adds	r1, r3, #0
 8003712:	1c10      	adds	r0, r2, #0
 8003714:	f7fd fb7a 	bl	8000e0c <__aeabi_fmul>
 8003718:	1c03      	adds	r3, r0, #0
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 800371c:	4b4e      	ldr	r3, [pc, #312]	; (8003858 <Madgwick_updateIMU+0x400>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b4d      	ldr	r3, [pc, #308]	; (8003858 <Madgwick_updateIMU+0x400>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	1c19      	adds	r1, r3, #0
 8003726:	1c10      	adds	r0, r2, #0
 8003728:	f7fd fb70 	bl	8000e0c <__aeabi_fmul>
 800372c:	1c03      	adds	r3, r0, #0
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8003730:	4b4a      	ldr	r3, [pc, #296]	; (800385c <Madgwick_updateIMU+0x404>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b49      	ldr	r3, [pc, #292]	; (800385c <Madgwick_updateIMU+0x404>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	1c19      	adds	r1, r3, #0
 800373a:	1c10      	adds	r0, r2, #0
 800373c:	f7fd fb66 	bl	8000e0c <__aeabi_fmul>
 8003740:	1c03      	adds	r3, r0, #0
 8003742:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003744:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003746:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003748:	f7fd fb60 	bl	8000e0c <__aeabi_fmul>
 800374c:	1c03      	adds	r3, r0, #0
 800374e:	1c1c      	adds	r4, r3, #0
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003754:	f7fd fb5a 	bl	8000e0c <__aeabi_fmul>
 8003758:	1c03      	adds	r3, r0, #0
 800375a:	1c19      	adds	r1, r3, #0
 800375c:	1c20      	adds	r0, r4, #0
 800375e:	f7fc ffef 	bl	8000740 <__aeabi_fadd>
 8003762:	1c03      	adds	r3, r0, #0
 8003764:	1c1c      	adds	r4, r3, #0
 8003766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003768:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800376a:	f7fd fb4f 	bl	8000e0c <__aeabi_fmul>
 800376e:	1c03      	adds	r3, r0, #0
 8003770:	1c19      	adds	r1, r3, #0
 8003772:	1c20      	adds	r0, r4, #0
 8003774:	f7fc ffe4 	bl	8000740 <__aeabi_fadd>
 8003778:	1c03      	adds	r3, r0, #0
 800377a:	1c1c      	adds	r4, r3, #0
 800377c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800377e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003780:	f7fd fb44 	bl	8000e0c <__aeabi_fmul>
 8003784:	1c03      	adds	r3, r0, #0
 8003786:	1c19      	adds	r1, r3, #0
 8003788:	1c20      	adds	r0, r4, #0
 800378a:	f7fd fc65 	bl	8001058 <__aeabi_fsub>
 800378e:	1c03      	adds	r3, r0, #0
 8003790:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003792:	6a39      	ldr	r1, [r7, #32]
 8003794:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003796:	f7fd fb39 	bl	8000e0c <__aeabi_fmul>
 800379a:	1c03      	adds	r3, r0, #0
 800379c:	1c1c      	adds	r4, r3, #0
 800379e:	6839      	ldr	r1, [r7, #0]
 80037a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80037a2:	f7fd fb33 	bl	8000e0c <__aeabi_fmul>
 80037a6:	1c03      	adds	r3, r0, #0
 80037a8:	1c19      	adds	r1, r3, #0
 80037aa:	1c20      	adds	r0, r4, #0
 80037ac:	f7fd fc54 	bl	8001058 <__aeabi_fsub>
 80037b0:	1c03      	adds	r3, r0, #0
 80037b2:	1c1c      	adds	r4, r3, #0
 80037b4:	2181      	movs	r1, #129	; 0x81
 80037b6:	05c9      	lsls	r1, r1, #23
 80037b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037ba:	f7fd fb27 	bl	8000e0c <__aeabi_fmul>
 80037be:	1c03      	adds	r3, r0, #0
 80037c0:	1c1a      	adds	r2, r3, #0
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <Madgwick_updateIMU+0x3fc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	1c19      	adds	r1, r3, #0
 80037c8:	1c10      	adds	r0, r2, #0
 80037ca:	f7fd fb1f 	bl	8000e0c <__aeabi_fmul>
 80037ce:	1c03      	adds	r3, r0, #0
 80037d0:	1c19      	adds	r1, r3, #0
 80037d2:	1c20      	adds	r0, r4, #0
 80037d4:	f7fc ffb4 	bl	8000740 <__aeabi_fadd>
 80037d8:	1c03      	adds	r3, r0, #0
 80037da:	1c1c      	adds	r4, r3, #0
 80037dc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80037de:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80037e0:	f7fd fb14 	bl	8000e0c <__aeabi_fmul>
 80037e4:	1c03      	adds	r3, r0, #0
 80037e6:	1c19      	adds	r1, r3, #0
 80037e8:	1c20      	adds	r0, r4, #0
 80037ea:	f7fd fc35 	bl	8001058 <__aeabi_fsub>
 80037ee:	1c03      	adds	r3, r0, #0
 80037f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037f2:	1c18      	adds	r0, r3, #0
 80037f4:	f7fd fc30 	bl	8001058 <__aeabi_fsub>
 80037f8:	1c03      	adds	r3, r0, #0
 80037fa:	1c1c      	adds	r4, r3, #0
 80037fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003800:	f7fd fb04 	bl	8000e0c <__aeabi_fmul>
 8003804:	1c03      	adds	r3, r0, #0
 8003806:	1c19      	adds	r1, r3, #0
 8003808:	1c20      	adds	r0, r4, #0
 800380a:	f7fc ff99 	bl	8000740 <__aeabi_fadd>
 800380e:	1c03      	adds	r3, r0, #0
 8003810:	1c1c      	adds	r4, r3, #0
 8003812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003814:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003816:	f7fd faf9 	bl	8000e0c <__aeabi_fmul>
 800381a:	1c03      	adds	r3, r0, #0
 800381c:	1c19      	adds	r1, r3, #0
 800381e:	1c20      	adds	r0, r4, #0
 8003820:	f7fc ff8e 	bl	8000740 <__aeabi_fadd>
 8003824:	1c03      	adds	r3, r0, #0
 8003826:	1c1c      	adds	r4, r3, #0
 8003828:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800382a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800382c:	f7fd faee 	bl	8000e0c <__aeabi_fmul>
 8003830:	1c03      	adds	r3, r0, #0
 8003832:	1c19      	adds	r1, r3, #0
 8003834:	1c20      	adds	r0, r4, #0
 8003836:	f7fc ff83 	bl	8000740 <__aeabi_fadd>
 800383a:	1c03      	adds	r3, r0, #0
 800383c:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800383e:	2181      	movs	r1, #129	; 0x81
 8003840:	05c9      	lsls	r1, r1, #23
 8003842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003844:	f7fd fae2 	bl	8000e0c <__aeabi_fmul>
 8003848:	1c03      	adds	r3, r0, #0
 800384a:	1c1a      	adds	r2, r3, #0
 800384c:	e00a      	b.n	8003864 <Madgwick_updateIMU+0x40c>
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	3c8efa39 	.word	0x3c8efa39
 8003854:	20000294 	.word	0x20000294
 8003858:	20000298 	.word	0x20000298
 800385c:	2000029c 	.word	0x2000029c
 8003860:	20000290 	.word	0x20000290
 8003864:	4bd8      	ldr	r3, [pc, #864]	; (8003bc8 <Madgwick_updateIMU+0x770>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	1c19      	adds	r1, r3, #0
 800386a:	1c10      	adds	r0, r2, #0
 800386c:	f7fd face 	bl	8000e0c <__aeabi_fmul>
 8003870:	1c03      	adds	r3, r0, #0
 8003872:	1c1c      	adds	r4, r3, #0
 8003874:	6839      	ldr	r1, [r7, #0]
 8003876:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003878:	f7fd fac8 	bl	8000e0c <__aeabi_fmul>
 800387c:	1c03      	adds	r3, r0, #0
 800387e:	1c19      	adds	r1, r3, #0
 8003880:	1c20      	adds	r0, r4, #0
 8003882:	f7fc ff5d 	bl	8000740 <__aeabi_fadd>
 8003886:	1c03      	adds	r3, r0, #0
 8003888:	1c1c      	adds	r4, r3, #0
 800388a:	6a39      	ldr	r1, [r7, #32]
 800388c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800388e:	f7fd fabd 	bl	8000e0c <__aeabi_fmul>
 8003892:	1c03      	adds	r3, r0, #0
 8003894:	1c19      	adds	r1, r3, #0
 8003896:	1c20      	adds	r0, r4, #0
 8003898:	f7fc ff52 	bl	8000740 <__aeabi_fadd>
 800389c:	1c03      	adds	r3, r0, #0
 800389e:	1c1c      	adds	r4, r3, #0
 80038a0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80038a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80038a4:	f7fd fab2 	bl	8000e0c <__aeabi_fmul>
 80038a8:	1c03      	adds	r3, r0, #0
 80038aa:	1c19      	adds	r1, r3, #0
 80038ac:	1c20      	adds	r0, r4, #0
 80038ae:	f7fd fbd3 	bl	8001058 <__aeabi_fsub>
 80038b2:	1c03      	adds	r3, r0, #0
 80038b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038b6:	1c18      	adds	r0, r3, #0
 80038b8:	f7fd fbce 	bl	8001058 <__aeabi_fsub>
 80038bc:	1c03      	adds	r3, r0, #0
 80038be:	1c1c      	adds	r4, r3, #0
 80038c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038c4:	f7fd faa2 	bl	8000e0c <__aeabi_fmul>
 80038c8:	1c03      	adds	r3, r0, #0
 80038ca:	1c19      	adds	r1, r3, #0
 80038cc:	1c20      	adds	r0, r4, #0
 80038ce:	f7fc ff37 	bl	8000740 <__aeabi_fadd>
 80038d2:	1c03      	adds	r3, r0, #0
 80038d4:	1c1c      	adds	r4, r3, #0
 80038d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038da:	f7fd fa97 	bl	8000e0c <__aeabi_fmul>
 80038de:	1c03      	adds	r3, r0, #0
 80038e0:	1c19      	adds	r1, r3, #0
 80038e2:	1c20      	adds	r0, r4, #0
 80038e4:	f7fc ff2c 	bl	8000740 <__aeabi_fadd>
 80038e8:	1c03      	adds	r3, r0, #0
 80038ea:	1c1c      	adds	r4, r3, #0
 80038ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038f0:	f7fd fa8c 	bl	8000e0c <__aeabi_fmul>
 80038f4:	1c03      	adds	r3, r0, #0
 80038f6:	1c19      	adds	r1, r3, #0
 80038f8:	1c20      	adds	r0, r4, #0
 80038fa:	f7fc ff21 	bl	8000740 <__aeabi_fadd>
 80038fe:	1c03      	adds	r3, r0, #0
 8003900:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8003902:	2181      	movs	r1, #129	; 0x81
 8003904:	05c9      	lsls	r1, r1, #23
 8003906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003908:	f7fd fa80 	bl	8000e0c <__aeabi_fmul>
 800390c:	1c03      	adds	r3, r0, #0
 800390e:	1c1a      	adds	r2, r3, #0
 8003910:	4bae      	ldr	r3, [pc, #696]	; (8003bcc <Madgwick_updateIMU+0x774>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	1c19      	adds	r1, r3, #0
 8003916:	1c10      	adds	r0, r2, #0
 8003918:	f7fd fa78 	bl	8000e0c <__aeabi_fmul>
 800391c:	1c03      	adds	r3, r0, #0
 800391e:	1c1c      	adds	r4, r3, #0
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003924:	f7fd fa72 	bl	8000e0c <__aeabi_fmul>
 8003928:	1c03      	adds	r3, r0, #0
 800392a:	1c19      	adds	r1, r3, #0
 800392c:	1c20      	adds	r0, r4, #0
 800392e:	f7fd fb93 	bl	8001058 <__aeabi_fsub>
 8003932:	1c03      	adds	r3, r0, #0
 8003934:	1c1c      	adds	r4, r3, #0
 8003936:	2181      	movs	r1, #129	; 0x81
 8003938:	05c9      	lsls	r1, r1, #23
 800393a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800393c:	f7fd fa66 	bl	8000e0c <__aeabi_fmul>
 8003940:	1c03      	adds	r3, r0, #0
 8003942:	1c1a      	adds	r2, r3, #0
 8003944:	4ba1      	ldr	r3, [pc, #644]	; (8003bcc <Madgwick_updateIMU+0x774>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	1c19      	adds	r1, r3, #0
 800394a:	1c10      	adds	r0, r2, #0
 800394c:	f7fd fa5e 	bl	8000e0c <__aeabi_fmul>
 8003950:	1c03      	adds	r3, r0, #0
 8003952:	1c19      	adds	r1, r3, #0
 8003954:	1c20      	adds	r0, r4, #0
 8003956:	f7fc fef3 	bl	8000740 <__aeabi_fadd>
 800395a:	1c03      	adds	r3, r0, #0
 800395c:	1c1c      	adds	r4, r3, #0
 800395e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003960:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003962:	f7fd fa53 	bl	8000e0c <__aeabi_fmul>
 8003966:	1c03      	adds	r3, r0, #0
 8003968:	1c19      	adds	r1, r3, #0
 800396a:	1c20      	adds	r0, r4, #0
 800396c:	f7fd fb74 	bl	8001058 <__aeabi_fsub>
 8003970:	1c03      	adds	r3, r0, #0
 8003972:	613b      	str	r3, [r7, #16]
		recipNorm = Madgwick_invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8003974:	69f9      	ldr	r1, [r7, #28]
 8003976:	69f8      	ldr	r0, [r7, #28]
 8003978:	f7fd fa48 	bl	8000e0c <__aeabi_fmul>
 800397c:	1c03      	adds	r3, r0, #0
 800397e:	1c1c      	adds	r4, r3, #0
 8003980:	69b9      	ldr	r1, [r7, #24]
 8003982:	69b8      	ldr	r0, [r7, #24]
 8003984:	f7fd fa42 	bl	8000e0c <__aeabi_fmul>
 8003988:	1c03      	adds	r3, r0, #0
 800398a:	1c19      	adds	r1, r3, #0
 800398c:	1c20      	adds	r0, r4, #0
 800398e:	f7fc fed7 	bl	8000740 <__aeabi_fadd>
 8003992:	1c03      	adds	r3, r0, #0
 8003994:	1c1c      	adds	r4, r3, #0
 8003996:	6979      	ldr	r1, [r7, #20]
 8003998:	6978      	ldr	r0, [r7, #20]
 800399a:	f7fd fa37 	bl	8000e0c <__aeabi_fmul>
 800399e:	1c03      	adds	r3, r0, #0
 80039a0:	1c19      	adds	r1, r3, #0
 80039a2:	1c20      	adds	r0, r4, #0
 80039a4:	f7fc fecc 	bl	8000740 <__aeabi_fadd>
 80039a8:	1c03      	adds	r3, r0, #0
 80039aa:	1c1c      	adds	r4, r3, #0
 80039ac:	6939      	ldr	r1, [r7, #16]
 80039ae:	6938      	ldr	r0, [r7, #16]
 80039b0:	f7fd fa2c 	bl	8000e0c <__aeabi_fmul>
 80039b4:	1c03      	adds	r3, r0, #0
 80039b6:	1c19      	adds	r1, r3, #0
 80039b8:	1c20      	adds	r0, r4, #0
 80039ba:	f7fc fec1 	bl	8000740 <__aeabi_fadd>
 80039be:	1c03      	adds	r3, r0, #0
 80039c0:	1c18      	adds	r0, r3, #0
 80039c2:	f000 f90f 	bl	8003be4 <Madgwick_invSqrt>
 80039c6:	1c03      	adds	r3, r0, #0
 80039c8:	657b      	str	r3, [r7, #84]	; 0x54
		s0 *= recipNorm;
 80039ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039cc:	69f8      	ldr	r0, [r7, #28]
 80039ce:	f7fd fa1d 	bl	8000e0c <__aeabi_fmul>
 80039d2:	1c03      	adds	r3, r0, #0
 80039d4:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 80039d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039d8:	69b8      	ldr	r0, [r7, #24]
 80039da:	f7fd fa17 	bl	8000e0c <__aeabi_fmul>
 80039de:	1c03      	adds	r3, r0, #0
 80039e0:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 80039e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039e4:	6978      	ldr	r0, [r7, #20]
 80039e6:	f7fd fa11 	bl	8000e0c <__aeabi_fmul>
 80039ea:	1c03      	adds	r3, r0, #0
 80039ec:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 80039ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039f0:	6938      	ldr	r0, [r7, #16]
 80039f2:	f7fd fa0b 	bl	8000e0c <__aeabi_fmul>
 80039f6:	1c03      	adds	r3, r0, #0
 80039f8:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 80039fa:	4b75      	ldr	r3, [pc, #468]	; (8003bd0 <Madgwick_updateIMU+0x778>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69f9      	ldr	r1, [r7, #28]
 8003a00:	1c18      	adds	r0, r3, #0
 8003a02:	f7fd fa03 	bl	8000e0c <__aeabi_fmul>
 8003a06:	1c03      	adds	r3, r0, #0
 8003a08:	1c19      	adds	r1, r3, #0
 8003a0a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003a0c:	f7fd fb24 	bl	8001058 <__aeabi_fsub>
 8003a10:	1c03      	adds	r3, r0, #0
 8003a12:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8003a14:	4b6e      	ldr	r3, [pc, #440]	; (8003bd0 <Madgwick_updateIMU+0x778>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69b9      	ldr	r1, [r7, #24]
 8003a1a:	1c18      	adds	r0, r3, #0
 8003a1c:	f7fd f9f6 	bl	8000e0c <__aeabi_fmul>
 8003a20:	1c03      	adds	r3, r0, #0
 8003a22:	1c19      	adds	r1, r3, #0
 8003a24:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003a26:	f7fd fb17 	bl	8001058 <__aeabi_fsub>
 8003a2a:	1c03      	adds	r3, r0, #0
 8003a2c:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8003a2e:	4b68      	ldr	r3, [pc, #416]	; (8003bd0 <Madgwick_updateIMU+0x778>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6979      	ldr	r1, [r7, #20]
 8003a34:	1c18      	adds	r0, r3, #0
 8003a36:	f7fd f9e9 	bl	8000e0c <__aeabi_fmul>
 8003a3a:	1c03      	adds	r3, r0, #0
 8003a3c:	1c19      	adds	r1, r3, #0
 8003a3e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003a40:	f7fd fb0a 	bl	8001058 <__aeabi_fsub>
 8003a44:	1c03      	adds	r3, r0, #0
 8003a46:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 8003a48:	4b61      	ldr	r3, [pc, #388]	; (8003bd0 <Madgwick_updateIMU+0x778>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6939      	ldr	r1, [r7, #16]
 8003a4e:	1c18      	adds	r0, r3, #0
 8003a50:	f7fd f9dc 	bl	8000e0c <__aeabi_fmul>
 8003a54:	1c03      	adds	r3, r0, #0
 8003a56:	1c19      	adds	r1, r3, #0
 8003a58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003a5a:	f7fd fafd 	bl	8001058 <__aeabi_fsub>
 8003a5e:	1c03      	adds	r3, r0, #0
 8003a60:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * invSampleFreq;
 8003a62:	4b5c      	ldr	r3, [pc, #368]	; (8003bd4 <Madgwick_updateIMU+0x77c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003a68:	1c18      	adds	r0, r3, #0
 8003a6a:	f7fd f9cf 	bl	8000e0c <__aeabi_fmul>
 8003a6e:	1c03      	adds	r3, r0, #0
 8003a70:	1c1a      	adds	r2, r3, #0
 8003a72:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <Madgwick_updateIMU+0x780>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	1c19      	adds	r1, r3, #0
 8003a78:	1c10      	adds	r0, r2, #0
 8003a7a:	f7fc fe61 	bl	8000740 <__aeabi_fadd>
 8003a7e:	1c03      	adds	r3, r0, #0
 8003a80:	1c1a      	adds	r2, r3, #0
 8003a82:	4b55      	ldr	r3, [pc, #340]	; (8003bd8 <Madgwick_updateIMU+0x780>)
 8003a84:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * invSampleFreq;
 8003a86:	4b53      	ldr	r3, [pc, #332]	; (8003bd4 <Madgwick_updateIMU+0x77c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003a8c:	1c18      	adds	r0, r3, #0
 8003a8e:	f7fd f9bd 	bl	8000e0c <__aeabi_fmul>
 8003a92:	1c03      	adds	r3, r0, #0
 8003a94:	1c1a      	adds	r2, r3, #0
 8003a96:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <Madgwick_updateIMU+0x784>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	1c19      	adds	r1, r3, #0
 8003a9c:	1c10      	adds	r0, r2, #0
 8003a9e:	f7fc fe4f 	bl	8000740 <__aeabi_fadd>
 8003aa2:	1c03      	adds	r3, r0, #0
 8003aa4:	1c1a      	adds	r2, r3, #0
 8003aa6:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <Madgwick_updateIMU+0x784>)
 8003aa8:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * invSampleFreq;
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <Madgwick_updateIMU+0x77c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003ab0:	1c18      	adds	r0, r3, #0
 8003ab2:	f7fd f9ab 	bl	8000e0c <__aeabi_fmul>
 8003ab6:	1c03      	adds	r3, r0, #0
 8003ab8:	1c1a      	adds	r2, r3, #0
 8003aba:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <Madgwick_updateIMU+0x770>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	1c19      	adds	r1, r3, #0
 8003ac0:	1c10      	adds	r0, r2, #0
 8003ac2:	f7fc fe3d 	bl	8000740 <__aeabi_fadd>
 8003ac6:	1c03      	adds	r3, r0, #0
 8003ac8:	1c1a      	adds	r2, r3, #0
 8003aca:	4b3f      	ldr	r3, [pc, #252]	; (8003bc8 <Madgwick_updateIMU+0x770>)
 8003acc:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * invSampleFreq;
 8003ace:	4b41      	ldr	r3, [pc, #260]	; (8003bd4 <Madgwick_updateIMU+0x77c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ad4:	1c18      	adds	r0, r3, #0
 8003ad6:	f7fd f999 	bl	8000e0c <__aeabi_fmul>
 8003ada:	1c03      	adds	r3, r0, #0
 8003adc:	1c1a      	adds	r2, r3, #0
 8003ade:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <Madgwick_updateIMU+0x774>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1c19      	adds	r1, r3, #0
 8003ae4:	1c10      	adds	r0, r2, #0
 8003ae6:	f7fc fe2b 	bl	8000740 <__aeabi_fadd>
 8003aea:	1c03      	adds	r3, r0, #0
 8003aec:	1c1a      	adds	r2, r3, #0
 8003aee:	4b37      	ldr	r3, [pc, #220]	; (8003bcc <Madgwick_updateIMU+0x774>)
 8003af0:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = Madgwick_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8003af2:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <Madgwick_updateIMU+0x780>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <Madgwick_updateIMU+0x780>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	1c19      	adds	r1, r3, #0
 8003afc:	1c10      	adds	r0, r2, #0
 8003afe:	f7fd f985 	bl	8000e0c <__aeabi_fmul>
 8003b02:	1c03      	adds	r3, r0, #0
 8003b04:	1c1c      	adds	r4, r3, #0
 8003b06:	4b35      	ldr	r3, [pc, #212]	; (8003bdc <Madgwick_updateIMU+0x784>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b34      	ldr	r3, [pc, #208]	; (8003bdc <Madgwick_updateIMU+0x784>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	1c19      	adds	r1, r3, #0
 8003b10:	1c10      	adds	r0, r2, #0
 8003b12:	f7fd f97b 	bl	8000e0c <__aeabi_fmul>
 8003b16:	1c03      	adds	r3, r0, #0
 8003b18:	1c19      	adds	r1, r3, #0
 8003b1a:	1c20      	adds	r0, r4, #0
 8003b1c:	f7fc fe10 	bl	8000740 <__aeabi_fadd>
 8003b20:	1c03      	adds	r3, r0, #0
 8003b22:	1c1c      	adds	r4, r3, #0
 8003b24:	4b28      	ldr	r3, [pc, #160]	; (8003bc8 <Madgwick_updateIMU+0x770>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <Madgwick_updateIMU+0x770>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	1c19      	adds	r1, r3, #0
 8003b2e:	1c10      	adds	r0, r2, #0
 8003b30:	f7fd f96c 	bl	8000e0c <__aeabi_fmul>
 8003b34:	1c03      	adds	r3, r0, #0
 8003b36:	1c19      	adds	r1, r3, #0
 8003b38:	1c20      	adds	r0, r4, #0
 8003b3a:	f7fc fe01 	bl	8000740 <__aeabi_fadd>
 8003b3e:	1c03      	adds	r3, r0, #0
 8003b40:	1c1c      	adds	r4, r3, #0
 8003b42:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <Madgwick_updateIMU+0x774>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4b21      	ldr	r3, [pc, #132]	; (8003bcc <Madgwick_updateIMU+0x774>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	1c19      	adds	r1, r3, #0
 8003b4c:	1c10      	adds	r0, r2, #0
 8003b4e:	f7fd f95d 	bl	8000e0c <__aeabi_fmul>
 8003b52:	1c03      	adds	r3, r0, #0
 8003b54:	1c19      	adds	r1, r3, #0
 8003b56:	1c20      	adds	r0, r4, #0
 8003b58:	f7fc fdf2 	bl	8000740 <__aeabi_fadd>
 8003b5c:	1c03      	adds	r3, r0, #0
 8003b5e:	1c18      	adds	r0, r3, #0
 8003b60:	f000 f840 	bl	8003be4 <Madgwick_invSqrt>
 8003b64:	1c03      	adds	r3, r0, #0
 8003b66:	657b      	str	r3, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <Madgwick_updateIMU+0x780>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b6e:	1c18      	adds	r0, r3, #0
 8003b70:	f7fd f94c 	bl	8000e0c <__aeabi_fmul>
 8003b74:	1c03      	adds	r3, r0, #0
 8003b76:	1c1a      	adds	r2, r3, #0
 8003b78:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <Madgwick_updateIMU+0x780>)
 8003b7a:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <Madgwick_updateIMU+0x784>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b82:	1c18      	adds	r0, r3, #0
 8003b84:	f7fd f942 	bl	8000e0c <__aeabi_fmul>
 8003b88:	1c03      	adds	r3, r0, #0
 8003b8a:	1c1a      	adds	r2, r3, #0
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <Madgwick_updateIMU+0x784>)
 8003b8e:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <Madgwick_updateIMU+0x770>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b96:	1c18      	adds	r0, r3, #0
 8003b98:	f7fd f938 	bl	8000e0c <__aeabi_fmul>
 8003b9c:	1c03      	adds	r3, r0, #0
 8003b9e:	1c1a      	adds	r2, r3, #0
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <Madgwick_updateIMU+0x770>)
 8003ba2:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <Madgwick_updateIMU+0x774>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003baa:	1c18      	adds	r0, r3, #0
 8003bac:	f7fd f92e 	bl	8000e0c <__aeabi_fmul>
 8003bb0:	1c03      	adds	r3, r0, #0
 8003bb2:	1c1a      	adds	r2, r3, #0
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <Madgwick_updateIMU+0x774>)
 8003bb6:	601a      	str	r2, [r3, #0]
	anglesComputed = 0;
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <Madgwick_updateIMU+0x788>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b01b      	add	sp, #108	; 0x6c
 8003bc4:	bd90      	pop	{r4, r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	20000298 	.word	0x20000298
 8003bcc:	2000029c 	.word	0x2000029c
 8003bd0:	2000028c 	.word	0x2000028c
 8003bd4:	200002a0 	.word	0x200002a0
 8003bd8:	20000290 	.word	0x20000290
 8003bdc:	20000294 	.word	0x20000294
 8003be0:	200002b0 	.word	0x200002b0

08003be4 <Madgwick_invSqrt>:

static float Madgwick_invSqrt(float x) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8003bec:	21fc      	movs	r1, #252	; 0xfc
 8003bee:	0589      	lsls	r1, r1, #22
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fd f90b 	bl	8000e0c <__aeabi_fmul>
 8003bf6:	1c03      	adds	r3, r0, #0
 8003bf8:	617b      	str	r3, [r7, #20]
	float y = x;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8003bfe:	2310      	movs	r3, #16
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	105b      	asrs	r3, r3, #1
 8003c0a:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <Madgwick_invSqrt+0xac>)
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003c10:	230c      	movs	r3, #12
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6979      	ldr	r1, [r7, #20]
 8003c1c:	1c18      	adds	r0, r3, #0
 8003c1e:	f7fd f8f5 	bl	8000e0c <__aeabi_fmul>
 8003c22:	1c03      	adds	r3, r0, #0
 8003c24:	1c1a      	adds	r2, r3, #0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1c19      	adds	r1, r3, #0
 8003c2a:	1c10      	adds	r0, r2, #0
 8003c2c:	f7fd f8ee 	bl	8000e0c <__aeabi_fmul>
 8003c30:	1c03      	adds	r3, r0, #0
 8003c32:	1c19      	adds	r1, r3, #0
 8003c34:	20ff      	movs	r0, #255	; 0xff
 8003c36:	0580      	lsls	r0, r0, #22
 8003c38:	f7fd fa0e 	bl	8001058 <__aeabi_fsub>
 8003c3c:	1c03      	adds	r3, r0, #0
 8003c3e:	1c1a      	adds	r2, r3, #0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1c19      	adds	r1, r3, #0
 8003c44:	1c10      	adds	r0, r2, #0
 8003c46:	f7fd f8e1 	bl	8000e0c <__aeabi_fmul>
 8003c4a:	1c03      	adds	r3, r0, #0
 8003c4c:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	6979      	ldr	r1, [r7, #20]
 8003c52:	1c18      	adds	r0, r3, #0
 8003c54:	f7fd f8da 	bl	8000e0c <__aeabi_fmul>
 8003c58:	1c03      	adds	r3, r0, #0
 8003c5a:	1c1a      	adds	r2, r3, #0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1c19      	adds	r1, r3, #0
 8003c60:	1c10      	adds	r0, r2, #0
 8003c62:	f7fd f8d3 	bl	8000e0c <__aeabi_fmul>
 8003c66:	1c03      	adds	r3, r0, #0
 8003c68:	1c19      	adds	r1, r3, #0
 8003c6a:	20ff      	movs	r0, #255	; 0xff
 8003c6c:	0580      	lsls	r0, r0, #22
 8003c6e:	f7fd f9f3 	bl	8001058 <__aeabi_fsub>
 8003c72:	1c03      	adds	r3, r0, #0
 8003c74:	1c1a      	adds	r2, r3, #0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1c19      	adds	r1, r3, #0
 8003c7a:	1c10      	adds	r0, r2, #0
 8003c7c:	f7fd f8c6 	bl	8000e0c <__aeabi_fmul>
 8003c80:	1c03      	adds	r3, r0, #0
 8003c82:	613b      	str	r3, [r7, #16]
	return y;
 8003c84:	693b      	ldr	r3, [r7, #16]
}
 8003c86:	1c18      	adds	r0, r3, #0
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b006      	add	sp, #24
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	5f3759df 	.word	0x5f3759df

08003c94 <Madgwick_computeAngles>:

void Madgwick_computeAngles()
{
 8003c94:	b5b0      	push	{r4, r5, r7, lr}
 8003c96:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8003c98:	4b52      	ldr	r3, [pc, #328]	; (8003de4 <Madgwick_computeAngles+0x150>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b52      	ldr	r3, [pc, #328]	; (8003de8 <Madgwick_computeAngles+0x154>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	1c19      	adds	r1, r3, #0
 8003ca2:	1c10      	adds	r0, r2, #0
 8003ca4:	f7fd f8b2 	bl	8000e0c <__aeabi_fmul>
 8003ca8:	1c03      	adds	r3, r0, #0
 8003caa:	1c1c      	adds	r4, r3, #0
 8003cac:	4b4f      	ldr	r3, [pc, #316]	; (8003dec <Madgwick_computeAngles+0x158>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <Madgwick_computeAngles+0x15c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	1c19      	adds	r1, r3, #0
 8003cb6:	1c10      	adds	r0, r2, #0
 8003cb8:	f7fd f8a8 	bl	8000e0c <__aeabi_fmul>
 8003cbc:	1c03      	adds	r3, r0, #0
 8003cbe:	1c19      	adds	r1, r3, #0
 8003cc0:	1c20      	adds	r0, r4, #0
 8003cc2:	f7fc fd3d 	bl	8000740 <__aeabi_fadd>
 8003cc6:	1c03      	adds	r3, r0, #0
 8003cc8:	1c1c      	adds	r4, r3, #0
 8003cca:	4b47      	ldr	r3, [pc, #284]	; (8003de8 <Madgwick_computeAngles+0x154>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <Madgwick_computeAngles+0x154>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	1c19      	adds	r1, r3, #0
 8003cd4:	1c10      	adds	r0, r2, #0
 8003cd6:	f7fd f899 	bl	8000e0c <__aeabi_fmul>
 8003cda:	1c03      	adds	r3, r0, #0
 8003cdc:	1c19      	adds	r1, r3, #0
 8003cde:	20fc      	movs	r0, #252	; 0xfc
 8003ce0:	0580      	lsls	r0, r0, #22
 8003ce2:	f7fd f9b9 	bl	8001058 <__aeabi_fsub>
 8003ce6:	1c03      	adds	r3, r0, #0
 8003ce8:	1c1d      	adds	r5, r3, #0
 8003cea:	4b40      	ldr	r3, [pc, #256]	; (8003dec <Madgwick_computeAngles+0x158>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <Madgwick_computeAngles+0x158>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	1c19      	adds	r1, r3, #0
 8003cf4:	1c10      	adds	r0, r2, #0
 8003cf6:	f7fd f889 	bl	8000e0c <__aeabi_fmul>
 8003cfa:	1c03      	adds	r3, r0, #0
 8003cfc:	1c19      	adds	r1, r3, #0
 8003cfe:	1c28      	adds	r0, r5, #0
 8003d00:	f7fd f9aa 	bl	8001058 <__aeabi_fsub>
 8003d04:	1c03      	adds	r3, r0, #0
 8003d06:	1c19      	adds	r1, r3, #0
 8003d08:	1c20      	adds	r0, r4, #0
 8003d0a:	f009 fe25 	bl	800d958 <atan2f>
 8003d0e:	1c02      	adds	r2, r0, #0
 8003d10:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <Madgwick_computeAngles+0x160>)
 8003d12:	601a      	str	r2, [r3, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8003d14:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <Madgwick_computeAngles+0x154>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4b35      	ldr	r3, [pc, #212]	; (8003df0 <Madgwick_computeAngles+0x15c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	1c19      	adds	r1, r3, #0
 8003d1e:	1c10      	adds	r0, r2, #0
 8003d20:	f7fd f874 	bl	8000e0c <__aeabi_fmul>
 8003d24:	1c03      	adds	r3, r0, #0
 8003d26:	1c1c      	adds	r4, r3, #0
 8003d28:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <Madgwick_computeAngles+0x150>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b2f      	ldr	r3, [pc, #188]	; (8003dec <Madgwick_computeAngles+0x158>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	1c19      	adds	r1, r3, #0
 8003d32:	1c10      	adds	r0, r2, #0
 8003d34:	f7fd f86a 	bl	8000e0c <__aeabi_fmul>
 8003d38:	1c03      	adds	r3, r0, #0
 8003d3a:	1c19      	adds	r1, r3, #0
 8003d3c:	1c20      	adds	r0, r4, #0
 8003d3e:	f7fd f98b 	bl	8001058 <__aeabi_fsub>
 8003d42:	1c03      	adds	r3, r0, #0
 8003d44:	21c0      	movs	r1, #192	; 0xc0
 8003d46:	0609      	lsls	r1, r1, #24
 8003d48:	1c18      	adds	r0, r3, #0
 8003d4a:	f7fd f85f 	bl	8000e0c <__aeabi_fmul>
 8003d4e:	1c03      	adds	r3, r0, #0
 8003d50:	1c18      	adds	r0, r3, #0
 8003d52:	f009 fde1 	bl	800d918 <asinf>
 8003d56:	1c02      	adds	r2, r0, #0
 8003d58:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <Madgwick_computeAngles+0x164>)
 8003d5a:	601a      	str	r2, [r3, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 8003d5c:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <Madgwick_computeAngles+0x154>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b22      	ldr	r3, [pc, #136]	; (8003dec <Madgwick_computeAngles+0x158>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	1c19      	adds	r1, r3, #0
 8003d66:	1c10      	adds	r0, r2, #0
 8003d68:	f7fd f850 	bl	8000e0c <__aeabi_fmul>
 8003d6c:	1c03      	adds	r3, r0, #0
 8003d6e:	1c1c      	adds	r4, r3, #0
 8003d70:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <Madgwick_computeAngles+0x150>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <Madgwick_computeAngles+0x15c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	1c19      	adds	r1, r3, #0
 8003d7a:	1c10      	adds	r0, r2, #0
 8003d7c:	f7fd f846 	bl	8000e0c <__aeabi_fmul>
 8003d80:	1c03      	adds	r3, r0, #0
 8003d82:	1c19      	adds	r1, r3, #0
 8003d84:	1c20      	adds	r0, r4, #0
 8003d86:	f7fc fcdb 	bl	8000740 <__aeabi_fadd>
 8003d8a:	1c03      	adds	r3, r0, #0
 8003d8c:	1c1c      	adds	r4, r3, #0
 8003d8e:	4b17      	ldr	r3, [pc, #92]	; (8003dec <Madgwick_computeAngles+0x158>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b16      	ldr	r3, [pc, #88]	; (8003dec <Madgwick_computeAngles+0x158>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	1c19      	adds	r1, r3, #0
 8003d98:	1c10      	adds	r0, r2, #0
 8003d9a:	f7fd f837 	bl	8000e0c <__aeabi_fmul>
 8003d9e:	1c03      	adds	r3, r0, #0
 8003da0:	1c19      	adds	r1, r3, #0
 8003da2:	20fc      	movs	r0, #252	; 0xfc
 8003da4:	0580      	lsls	r0, r0, #22
 8003da6:	f7fd f957 	bl	8001058 <__aeabi_fsub>
 8003daa:	1c03      	adds	r3, r0, #0
 8003dac:	1c1d      	adds	r5, r3, #0
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <Madgwick_computeAngles+0x15c>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <Madgwick_computeAngles+0x15c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	1c19      	adds	r1, r3, #0
 8003db8:	1c10      	adds	r0, r2, #0
 8003dba:	f7fd f827 	bl	8000e0c <__aeabi_fmul>
 8003dbe:	1c03      	adds	r3, r0, #0
 8003dc0:	1c19      	adds	r1, r3, #0
 8003dc2:	1c28      	adds	r0, r5, #0
 8003dc4:	f7fd f948 	bl	8001058 <__aeabi_fsub>
 8003dc8:	1c03      	adds	r3, r0, #0
 8003dca:	1c19      	adds	r1, r3, #0
 8003dcc:	1c20      	adds	r0, r4, #0
 8003dce:	f009 fdc3 	bl	800d958 <atan2f>
 8003dd2:	1c02      	adds	r2, r0, #0
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <Madgwick_computeAngles+0x168>)
 8003dd6:	601a      	str	r2, [r3, #0]
	anglesComputed = 1;
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <Madgwick_computeAngles+0x16c>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bdb0      	pop	{r4, r5, r7, pc}
 8003de4:	20000290 	.word	0x20000290
 8003de8:	20000294 	.word	0x20000294
 8003dec:	20000298 	.word	0x20000298
 8003df0:	2000029c 	.word	0x2000029c
 8003df4:	200002a4 	.word	0x200002a4
 8003df8:	200002a8 	.word	0x200002a8
 8003dfc:	200002ac 	.word	0x200002ac
 8003e00:	200002b0 	.word	0x200002b0

08003e04 <Madgwick_getRoll>:

    float Madgwick_getRoll() {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
        if (!anglesComputed) Madgwick_computeAngles();
 8003e08:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <Madgwick_getRoll+0x24>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <Madgwick_getRoll+0x10>
 8003e10:	f7ff ff40 	bl	8003c94 <Madgwick_computeAngles>
        return roll * 57.29578f;
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <Madgwick_getRoll+0x28>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4905      	ldr	r1, [pc, #20]	; (8003e30 <Madgwick_getRoll+0x2c>)
 8003e1a:	1c18      	adds	r0, r3, #0
 8003e1c:	f7fc fff6 	bl	8000e0c <__aeabi_fmul>
 8003e20:	1c03      	adds	r3, r0, #0
    }
 8003e22:	1c18      	adds	r0, r3, #0
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	200002b0 	.word	0x200002b0
 8003e2c:	200002a4 	.word	0x200002a4
 8003e30:	42652ee1 	.word	0x42652ee1

08003e34 <Madgwick_getPitch>:
    float Madgwick_getPitch() {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
        if (!anglesComputed) Madgwick_computeAngles();
 8003e38:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <Madgwick_getPitch+0x24>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <Madgwick_getPitch+0x10>
 8003e40:	f7ff ff28 	bl	8003c94 <Madgwick_computeAngles>
        return pitch * 57.29578f;
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <Madgwick_getPitch+0x28>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4905      	ldr	r1, [pc, #20]	; (8003e60 <Madgwick_getPitch+0x2c>)
 8003e4a:	1c18      	adds	r0, r3, #0
 8003e4c:	f7fc ffde 	bl	8000e0c <__aeabi_fmul>
 8003e50:	1c03      	adds	r3, r0, #0
    }
 8003e52:	1c18      	adds	r0, r3, #0
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	200002b0 	.word	0x200002b0
 8003e5c:	200002a8 	.word	0x200002a8
 8003e60:	42652ee1 	.word	0x42652ee1

08003e64 <Madgwick_getYaw>:
    float Madgwick_getYaw() {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
//    	static float value = 0.05;
//    	value += value;
        if (!anglesComputed) Madgwick_computeAngles();
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <Madgwick_getYaw+0x30>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <Madgwick_getYaw+0x10>
 8003e70:	f7ff ff10 	bl	8003c94 <Madgwick_computeAngles>
        return (yaw * 57.29578f + 180.0f);
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <Madgwick_getYaw+0x34>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4908      	ldr	r1, [pc, #32]	; (8003e9c <Madgwick_getYaw+0x38>)
 8003e7a:	1c18      	adds	r0, r3, #0
 8003e7c:	f7fc ffc6 	bl	8000e0c <__aeabi_fmul>
 8003e80:	1c03      	adds	r3, r0, #0
 8003e82:	4907      	ldr	r1, [pc, #28]	; (8003ea0 <Madgwick_getYaw+0x3c>)
 8003e84:	1c18      	adds	r0, r3, #0
 8003e86:	f7fc fc5b 	bl	8000740 <__aeabi_fadd>
 8003e8a:	1c03      	adds	r3, r0, #0
    }
 8003e8c:	1c18      	adds	r0, r3, #0
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	200002b0 	.word	0x200002b0
 8003e98:	200002ac 	.word	0x200002ac
 8003e9c:	42652ee1 	.word	0x42652ee1
 8003ea0:	43340000 	.word	0x43340000

08003ea4 <sks_cmd_set_full>:
}

static char Response[256];

static int sks_cmd_set_full(int from, char *command, int argc, char **argv,
		int size, int total) {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
	char set = 0;
 8003eb2:	2317      	movs	r3, #23
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	3310      	adds	r3, #16
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <sks_cmd_set_full+0x24>
		return size;
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	e022      	b.n	8003f0e <sks_cmd_set_full+0x6a>
	set = atoi(argv[4]);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	3310      	adds	r3, #16
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f006 fdec 	bl	800aaac <atoi>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	2117      	movs	r1, #23
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	701a      	strb	r2, [r3, #0]
	if (set) {
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d010      	beq.n	8003f06 <sks_cmd_set_full+0x62>
		printf("SKS_OIL_SENSOR SET FULL\r\n");
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <sks_cmd_set_full+0x74>)
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f007 fb1c 	bl	800b524 <puts>
		g_appConfig.wirteConfigNow = 1;
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <sks_cmd_set_full+0x78>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	749a      	strb	r2, [r3, #18]
		sensorConfig.full = (uint32_t)SensorEMA10.lastEMA;//(uint32_t)getAverage();
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <sks_cmd_set_full+0x7c>)
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	0010      	movs	r0, r2
 8003efa:	0019      	movs	r1, r3
 8003efc:	f7fc fb36 	bl	800056c <__aeabi_d2uiz>
 8003f00:	0002      	movs	r2, r0
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <sks_cmd_set_full+0x80>)
 8003f04:	609a      	str	r2, [r3, #8]
	}
	response = 0;
 8003f06:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <sks_cmd_set_full+0x84>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
	return size;
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
}
 8003f0e:	0018      	movs	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b006      	add	sp, #24
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	0800dff4 	.word	0x0800dff4
 8003f1c:	200005b0 	.word	0x200005b0
 8003f20:	20000010 	.word	0x20000010
 8003f24:	20000568 	.word	0x20000568
 8003f28:	200002b4 	.word	0x200002b4

08003f2c <sks_cmd_set_empty>:

static int sks_cmd_set_empty(int from, char *command, int argc, char **argv,
		int size, int total) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
	char set = 0;
 8003f3a:	2317      	movs	r3, #23
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	3310      	adds	r3, #16
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <sks_cmd_set_empty+0x24>
		return size;
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	e022      	b.n	8003f96 <sks_cmd_set_empty+0x6a>
	set = atoi(argv[4]);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	3310      	adds	r3, #16
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	0018      	movs	r0, r3
 8003f58:	f006 fda8 	bl	800aaac <atoi>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	2117      	movs	r1, #23
 8003f60:	187b      	adds	r3, r7, r1
 8003f62:	701a      	strb	r2, [r3, #0]
	if (set) {
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d010      	beq.n	8003f8e <sks_cmd_set_empty+0x62>
		printf("SKS_OIL_SENSOR SET EMPTY\r\n");
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <sks_cmd_set_empty+0x74>)
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f007 fad8 	bl	800b524 <puts>
		g_appConfig.wirteConfigNow = 1;
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <sks_cmd_set_empty+0x78>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	749a      	strb	r2, [r3, #18]
		sensorConfig.empty = (uint32_t)SensorEMA10.lastEMA;//(uint32_t)getAverage();
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <sks_cmd_set_empty+0x7c>)
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	0010      	movs	r0, r2
 8003f82:	0019      	movs	r1, r3
 8003f84:	f7fc faf2 	bl	800056c <__aeabi_d2uiz>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	4b08      	ldr	r3, [pc, #32]	; (8003fac <sks_cmd_set_empty+0x80>)
 8003f8c:	60da      	str	r2, [r3, #12]
	}

	response = 0;
 8003f8e:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <sks_cmd_set_empty+0x84>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
	return size;
 8003f94:	6a3b      	ldr	r3, [r7, #32]
}
 8003f96:	0018      	movs	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b006      	add	sp, #24
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	0800e010 	.word	0x0800e010
 8003fa4:	200005b0 	.word	0x200005b0
 8003fa8:	20000010 	.word	0x20000010
 8003fac:	20000568 	.word	0x20000568
 8003fb0:	200002b4 	.word	0x200002b4

08003fb4 <sks_cmd_set_debug>:

static int sks_cmd_set_debug(int from, char *command, int argc, char **argv,
		int size, int total) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
	char set = 0;
 8003fc2:	2317      	movs	r3, #23
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	701a      	strb	r2, [r3, #0]
	if (argv[4] == NULL)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	3310      	adds	r3, #16
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <sks_cmd_set_debug+0x24>
		return size;
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	e020      	b.n	800401a <sks_cmd_set_debug+0x66>
	set = atoi(argv[4]);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	3310      	adds	r3, #16
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f006 fd64 	bl	800aaac <atoi>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	2117      	movs	r1, #23
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	701a      	strb	r2, [r3, #0]
	if (set) {
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <sks_cmd_set_debug+0x50>
		printf("SKS_OIL_SENSOR SET DEBUG ON\r\n");
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <sks_cmd_set_debug+0x70>)
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f007 fa94 	bl	800b524 <puts>
		g_appConfig.debug = 1;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <sks_cmd_set_debug+0x74>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	74da      	strb	r2, [r3, #19]
 8004002:	e006      	b.n	8004012 <sks_cmd_set_debug+0x5e>
	}
	else{
		printf("SKS_OIL_SENSOR SET DEBUG ON\r\n");
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <sks_cmd_set_debug+0x70>)
 8004006:	0018      	movs	r0, r3
 8004008:	f007 fa8c 	bl	800b524 <puts>
		g_appConfig.debug = 0;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <sks_cmd_set_debug+0x74>)
 800400e:	2200      	movs	r2, #0
 8004010:	74da      	strb	r2, [r3, #19]
	}

	response = 0;
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <sks_cmd_set_debug+0x78>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
	return size;
 8004018:	6a3b      	ldr	r3, [r7, #32]
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	b006      	add	sp, #24
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	0800e02c 	.word	0x0800e02c
 8004028:	200005b0 	.word	0x200005b0
 800402c:	200002b4 	.word	0x200002b4

08004030 <sks_cmd_set_EMA>:

static int sks_cmd_set_EMA(int from, char *command, int argc, char **argv,
	int size, int total) {
 8004030:	b590      	push	{r4, r7, lr}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
char set = 0;
 800403e:	2317      	movs	r3, #23
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]
uint8_t ema_sel;
if (argv[4] == NULL)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	3310      	adds	r3, #16
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <sks_cmd_set_EMA+0x24>
	return size;
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	e046      	b.n	80040e2 <sks_cmd_set_EMA+0xb2>
set = atoi(argv[4]);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	3310      	adds	r3, #16
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	0018      	movs	r0, r3
 800405c:	f006 fd26 	bl	800aaac <atoi>
 8004060:	0002      	movs	r2, r0
 8004062:	2417      	movs	r4, #23
 8004064:	193b      	adds	r3, r7, r4
 8004066:	701a      	strb	r2, [r3, #0]
ema_sel = atoi(argv[5]);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	3314      	adds	r3, #20
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	0018      	movs	r0, r3
 8004070:	f006 fd1c 	bl	800aaac <atoi>
 8004074:	0002      	movs	r2, r0
 8004076:	2116      	movs	r1, #22
 8004078:	187b      	adds	r3, r7, r1
 800407a:	701a      	strb	r2, [r3, #0]
if (set) {
 800407c:	193b      	adds	r3, r7, r4
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d02a      	beq.n	80040da <sks_cmd_set_EMA+0xaa>

	switch (ema_sel) {
 8004084:	187b      	adds	r3, r7, r1
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d81d      	bhi.n	80040c8 <sks_cmd_set_EMA+0x98>
 800408c:	009a      	lsls	r2, r3, #2
 800408e:	4b17      	ldr	r3, [pc, #92]	; (80040ec <sks_cmd_set_EMA+0xbc>)
 8004090:	18d3      	adds	r3, r2, r3
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	469f      	mov	pc, r3
	case EMA5:
		printf("SKS_OIL_SENSOR SET EMA5\r\n");
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <sks_cmd_set_EMA+0xc0>)
 8004098:	0018      	movs	r0, r3
 800409a:	f007 fa43 	bl	800b524 <puts>
		break;
 800409e:	e014      	b.n	80040ca <sks_cmd_set_EMA+0x9a>
	case EMA10:
		printf("SKS_OIL_SENSOR SET EMA10\r\n");
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <sks_cmd_set_EMA+0xc4>)
 80040a2:	0018      	movs	r0, r3
 80040a4:	f007 fa3e 	bl	800b524 <puts>
		break;
 80040a8:	e00f      	b.n	80040ca <sks_cmd_set_EMA+0x9a>
	case EMA15:
		printf("SKS_OIL_SENSOR SET EMA15\r\n");
 80040aa:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <sks_cmd_set_EMA+0xc8>)
 80040ac:	0018      	movs	r0, r3
 80040ae:	f007 fa39 	bl	800b524 <puts>
		break;
 80040b2:	e00a      	b.n	80040ca <sks_cmd_set_EMA+0x9a>
	case EMA30:
		printf("SKS_OIL_SENSOR SET EMA30\r\n");
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <sks_cmd_set_EMA+0xcc>)
 80040b6:	0018      	movs	r0, r3
 80040b8:	f007 fa34 	bl	800b524 <puts>
		break;
 80040bc:	e005      	b.n	80040ca <sks_cmd_set_EMA+0x9a>
	case EMA50:
		printf("SKS_OIL_SENSOR SET EMA50\r\n");
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <sks_cmd_set_EMA+0xd0>)
 80040c0:	0018      	movs	r0, r3
 80040c2:	f007 fa2f 	bl	800b524 <puts>
		break;
 80040c6:	e000      	b.n	80040ca <sks_cmd_set_EMA+0x9a>
	default:
		break;
 80040c8:	46c0      	nop			; (mov r8, r8)
	}
	sensorConfig.ema = ema_sel;
 80040ca:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <sks_cmd_set_EMA+0xd4>)
 80040cc:	2216      	movs	r2, #22
 80040ce:	18ba      	adds	r2, r7, r2
 80040d0:	7812      	ldrb	r2, [r2, #0]
 80040d2:	705a      	strb	r2, [r3, #1]
	g_appConfig.wirteConfigNow = 1;
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <sks_cmd_set_EMA+0xd8>)
 80040d6:	2201      	movs	r2, #1
 80040d8:	749a      	strb	r2, [r3, #18]
}

response = 0;
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <sks_cmd_set_EMA+0xdc>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
return size;
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80040e2:	0018      	movs	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b007      	add	sp, #28
 80040e8:	bd90      	pop	{r4, r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	0800e3d4 	.word	0x0800e3d4
 80040f0:	0800e04c 	.word	0x0800e04c
 80040f4:	0800e068 	.word	0x0800e068
 80040f8:	0800e084 	.word	0x0800e084
 80040fc:	0800e0a0 	.word	0x0800e0a0
 8004100:	0800e0bc 	.word	0x0800e0bc
 8004104:	20000568 	.word	0x20000568
 8004108:	200005b0 	.word	0x200005b0
 800410c:	200002b4 	.word	0x200002b4

08004110 <server_on_command>:
							{ "DEBUG", sks_cmd_set_debug }, //set empty
							{ "EMA", sks_cmd_set_EMA }, //set empty
							{ NULL, NULL } };


int server_on_command(int from, uint8_t *data, int size) {
 8004110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004112:	b0b1      	sub	sp, #196	; 0xc4
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
#define SKS_MAX_CMD_LEN 10
#define SKS_MAX_ARGV 	25
	int result = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	22b4      	movs	r2, #180	; 0xb4
 8004120:	18ba      	adds	r2, r7, r2
 8004122:	6013      	str	r3, [r2, #0]
	int field = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	22b0      	movs	r2, #176	; 0xb0
 8004128:	18ba      	adds	r2, r7, r2
 800412a:	6013      	str	r3, [r2, #0]
	int ftmp;
	int j = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	22ac      	movs	r2, #172	; 0xac
 8004130:	18ba      	adds	r2, r7, r2
 8004132:	6013      	str	r3, [r2, #0]
	char *ptr = data;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	22a8      	movs	r2, #168	; 0xa8
 8004138:	18ba      	adds	r2, r7, r2
 800413a:	6013      	str	r3, [r2, #0]
	//char invalide_code = 0;
	char command[SKS_MAX_CMD_LEN + 1] = { 0 };
 800413c:	238c      	movs	r3, #140	; 0x8c
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	3304      	adds	r3, #4
 8004146:	2207      	movs	r2, #7
 8004148:	2100      	movs	r1, #0
 800414a:	0018      	movs	r0, r3
 800414c:	f006 fce7 	bl	800ab1e <memset>
	//*XX,YYYYYYYYYY,CMD,VVVVVV,PARA1,PARA2,�#
	//sks_log(LOG_INFO, "Process COMMAND size=%d data=%s\r\n", size, data);
	int endPos = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	22a4      	movs	r2, #164	; 0xa4
 8004154:	18ba      	adds	r2, r7, r2
 8004156:	6013      	str	r3, [r2, #0]
	int i = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	24a0      	movs	r4, #160	; 0xa0
 800415c:	193a      	adds	r2, r7, r4
 800415e:	6013      	str	r3, [r2, #0]
	char item_buff[20] = { 0 };
 8004160:	2378      	movs	r3, #120	; 0x78
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	3304      	adds	r3, #4
 800416a:	2210      	movs	r2, #16
 800416c:	2100      	movs	r1, #0
 800416e:	0018      	movs	r0, r3
 8004170:	f006 fcd5 	bl	800ab1e <memset>
	char *arg[SKS_MAX_ARGV];
	for (i = 0; i < size; i++) {
 8004174:	2300      	movs	r3, #0
 8004176:	193a      	adds	r2, r7, r4
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e023      	b.n	80041c4 <server_on_command+0xb4>
		if ((data[i] == '#') || (data[i] == '\n') || (data[i] == '\0')) {
 800417c:	21a0      	movs	r1, #160	; 0xa0
 800417e:	187b      	adds	r3, r7, r1
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	18d3      	adds	r3, r2, r3
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b23      	cmp	r3, #35	; 0x23
 800418a:	d00d      	beq.n	80041a8 <server_on_command+0x98>
 800418c:	187b      	adds	r3, r7, r1
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	18d3      	adds	r3, r2, r3
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b0a      	cmp	r3, #10
 8004198:	d006      	beq.n	80041a8 <server_on_command+0x98>
 800419a:	187b      	adds	r3, r7, r1
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	18d3      	adds	r3, r2, r3
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d107      	bne.n	80041b8 <server_on_command+0xa8>
			endPos = i + 1;
 80041a8:	23a0      	movs	r3, #160	; 0xa0
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	22a4      	movs	r2, #164	; 0xa4
 80041b2:	18ba      	adds	r2, r7, r2
 80041b4:	6013      	str	r3, [r2, #0]
			break;
 80041b6:	e00b      	b.n	80041d0 <server_on_command+0xc0>
	for (i = 0; i < size; i++) {
 80041b8:	22a0      	movs	r2, #160	; 0xa0
 80041ba:	18bb      	adds	r3, r7, r2
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3301      	adds	r3, #1
 80041c0:	18ba      	adds	r2, r7, r2
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	23a0      	movs	r3, #160	; 0xa0
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	dbd5      	blt.n	800417c <server_on_command+0x6c>
		}
	}
	if (endPos == 0)
 80041d0:	23a4      	movs	r3, #164	; 0xa4
 80041d2:	18fb      	adds	r3, r7, r3
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <server_on_command+0xce>
		return 0; //Waiting for end command sign
 80041da:	2300      	movs	r3, #0
 80041dc:	e153      	b.n	8004486 <server_on_command+0x376>
	//xprintf("endPos: %d \n\r",endPos);
	for (int i = 0; i < endPos; i++) {
 80041de:	2300      	movs	r3, #0
 80041e0:	229c      	movs	r2, #156	; 0x9c
 80041e2:	18ba      	adds	r2, r7, r2
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e0bd      	b.n	8004364 <server_on_command+0x254>

		if ((data[i] == ',') || (data[i] == '\n') || (data[i] == '#')
 80041e8:	219c      	movs	r1, #156	; 0x9c
 80041ea:	187b      	adds	r3, r7, r1
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	18d3      	adds	r3, r2, r3
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b2c      	cmp	r3, #44	; 0x2c
 80041f6:	d015      	beq.n	8004224 <server_on_command+0x114>
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	18d3      	adds	r3, r2, r3
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b0a      	cmp	r3, #10
 8004204:	d00e      	beq.n	8004224 <server_on_command+0x114>
 8004206:	187b      	adds	r3, r7, r1
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	18d3      	adds	r3, r2, r3
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b23      	cmp	r3, #35	; 0x23
 8004212:	d007      	beq.n	8004224 <server_on_command+0x114>
				|| (data[i] == 0x00)) //complete one item
 8004214:	187b      	adds	r3, r7, r1
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	18d3      	adds	r3, r2, r3
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d000      	beq.n	8004224 <server_on_command+0x114>
 8004222:	e07c      	b.n	800431e <server_on_command+0x20e>
				{

			if (j > 0) {
 8004224:	23ac      	movs	r3, #172	; 0xac
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	dd48      	ble.n	80042c0 <server_on_command+0x1b0>

				ftmp = field;
 800422e:	22b0      	movs	r2, #176	; 0xb0
 8004230:	18bb      	adds	r3, r7, r2
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2498      	movs	r4, #152	; 0x98
 8004236:	1939      	adds	r1, r7, r4
 8004238:	600b      	str	r3, [r1, #0]
				arg[field % SKS_MAX_ARGV] = ptr;
 800423a:	18bb      	adds	r3, r7, r2
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2119      	movs	r1, #25
 8004240:	0018      	movs	r0, r3
 8004242:	f7fc f8f5 	bl	8000430 <__aeabi_idivmod>
 8004246:	000b      	movs	r3, r1
 8004248:	001a      	movs	r2, r3
 800424a:	2314      	movs	r3, #20
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	0092      	lsls	r2, r2, #2
 8004250:	21a8      	movs	r1, #168	; 0xa8
 8004252:	1879      	adds	r1, r7, r1
 8004254:	6809      	ldr	r1, [r1, #0]
 8004256:	50d1      	str	r1, [r2, r3]
				switch (ftmp) {
 8004258:	0022      	movs	r2, r4
 800425a:	18bb      	adds	r3, r7, r2
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d030      	beq.n	80042c4 <server_on_command+0x1b4>
 8004262:	18bb      	adds	r3, r7, r2
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b03      	cmp	r3, #3
 8004268:	dc2e      	bgt.n	80042c8 <server_on_command+0x1b8>
 800426a:	18bb      	adds	r3, r7, r2
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d016      	beq.n	80042a0 <server_on_command+0x190>
 8004272:	18bb      	adds	r3, r7, r2
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b02      	cmp	r3, #2
 8004278:	dc26      	bgt.n	80042c8 <server_on_command+0x1b8>
 800427a:	18bb      	adds	r3, r7, r2
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <server_on_command+0x17c>
 8004282:	18bb      	adds	r3, r7, r2
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d020      	beq.n	80042cc <server_on_command+0x1bc>
				case 3:
					//if (memcmp(ptr, g_config.ADMINCODE, 6)) invalide_code |= 0x2; //Invalid AdminCode
					break;
				default:
					//return endPos;
					break;
 800428a:	e01d      	b.n	80042c8 <server_on_command+0x1b8>
					if (*(uint32_t*) (ptr) != 0x2C53532A) {
 800428c:	23a8      	movs	r3, #168	; 0xa8
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a7e      	ldr	r2, [pc, #504]	; (8004490 <server_on_command+0x380>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01a      	beq.n	80042d0 <server_on_command+0x1c0>
						return -1; //*SS,
 800429a:	2301      	movs	r3, #1
 800429c:	425b      	negs	r3, r3
 800429e:	e0f2      	b.n	8004486 <server_on_command+0x376>
							j < SKS_MAX_CMD_LEN ? j : SKS_MAX_CMD_LEN);
 80042a0:	23ac      	movs	r3, #172	; 0xac
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b0a      	cmp	r3, #10
 80042a8:	dd00      	ble.n	80042ac <server_on_command+0x19c>
 80042aa:	230a      	movs	r3, #10
					memcpy(command, ptr,
 80042ac:	001a      	movs	r2, r3
 80042ae:	23a8      	movs	r3, #168	; 0xa8
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	238c      	movs	r3, #140	; 0x8c
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	0018      	movs	r0, r3
 80042ba:	f006 fc27 	bl	800ab0c <memcpy>
					break;
 80042be:	e008      	b.n	80042d2 <server_on_command+0x1c2>
				}
			}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	e006      	b.n	80042d2 <server_on_command+0x1c2>
					break;
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	e004      	b.n	80042d2 <server_on_command+0x1c2>
					break;
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	e002      	b.n	80042d2 <server_on_command+0x1c2>
					break;
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	e000      	b.n	80042d2 <server_on_command+0x1c2>
					break;
 80042d0:	46c0      	nop			; (mov r8, r8)
			field++;
 80042d2:	21b0      	movs	r1, #176	; 0xb0
 80042d4:	187b      	adds	r3, r7, r1
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3301      	adds	r3, #1
 80042da:	187a      	adds	r2, r7, r1
 80042dc:	6013      	str	r3, [r2, #0]
			if (field >= SKS_MAX_ARGV)
 80042de:	187b      	adds	r3, r7, r1
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b18      	cmp	r3, #24
 80042e4:	dc48      	bgt.n	8004378 <server_on_command+0x268>
				break;
			j = 0; //reset index
 80042e6:	2300      	movs	r3, #0
 80042e8:	22ac      	movs	r2, #172	; 0xac
 80042ea:	18ba      	adds	r2, r7, r2
 80042ec:	6013      	str	r3, [r2, #0]
			ptr = data + i + 1;
 80042ee:	239c      	movs	r3, #156	; 0x9c
 80042f0:	18fb      	adds	r3, r7, r3
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	18d3      	adds	r3, r2, r3
 80042fa:	24a8      	movs	r4, #168	; 0xa8
 80042fc:	193a      	adds	r2, r7, r4
 80042fe:	6013      	str	r3, [r2, #0]
			arg[field % SKS_MAX_ARGV] = ptr;
 8004300:	187b      	adds	r3, r7, r1
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2119      	movs	r1, #25
 8004306:	0018      	movs	r0, r3
 8004308:	f7fc f892 	bl	8000430 <__aeabi_idivmod>
 800430c:	000b      	movs	r3, r1
 800430e:	001a      	movs	r2, r3
 8004310:	2314      	movs	r3, #20
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	0092      	lsls	r2, r2, #2
 8004316:	1939      	adds	r1, r7, r4
 8004318:	6809      	ldr	r1, [r1, #0]
 800431a:	50d1      	str	r1, [r2, r3]
 800431c:	e01c      	b.n	8004358 <server_on_command+0x248>
		} else {
			item_buff[j % sizeof(item_buff)] = data[i];
 800431e:	239c      	movs	r3, #156	; 0x9c
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	18d4      	adds	r4, r2, r3
 8004328:	25ac      	movs	r5, #172	; 0xac
 800432a:	197b      	adds	r3, r7, r5
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2114      	movs	r1, #20
 8004330:	0018      	movs	r0, r3
 8004332:	f7fb ff93 	bl	800025c <__aeabi_uidivmod>
 8004336:	000b      	movs	r3, r1
 8004338:	001a      	movs	r2, r3
 800433a:	7821      	ldrb	r1, [r4, #0]
 800433c:	2078      	movs	r0, #120	; 0x78
 800433e:	183b      	adds	r3, r7, r0
 8004340:	5499      	strb	r1, [r3, r2]
			j++;
 8004342:	197b      	adds	r3, r7, r5
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	197a      	adds	r2, r7, r5
 800434a:	6013      	str	r3, [r2, #0]
			item_buff[j] = 0x00;
 800434c:	183a      	adds	r2, r7, r0
 800434e:	197b      	adds	r3, r7, r5
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	18d3      	adds	r3, r2, r3
 8004354:	2200      	movs	r2, #0
 8004356:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < endPos; i++) {
 8004358:	229c      	movs	r2, #156	; 0x9c
 800435a:	18bb      	adds	r3, r7, r2
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3301      	adds	r3, #1
 8004360:	18ba      	adds	r2, r7, r2
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	239c      	movs	r3, #156	; 0x9c
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	23a4      	movs	r3, #164	; 0xa4
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	429a      	cmp	r2, r3
 8004372:	da00      	bge.n	8004376 <server_on_command+0x266>
 8004374:	e738      	b.n	80041e8 <server_on_command+0xd8>
 8004376:	e000      	b.n	800437a <server_on_command+0x26a>
				break;
 8004378:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (field > SKS_MAX_ARGV)
 800437a:	23b0      	movs	r3, #176	; 0xb0
 800437c:	18fb      	adds	r3, r7, r3
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b19      	cmp	r3, #25
 8004382:	dd03      	ble.n	800438c <server_on_command+0x27c>
		return endPos; //Too many param
 8004384:	23a4      	movs	r3, #164	; 0xa4
 8004386:	18fb      	adds	r3, r7, r3
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	e07c      	b.n	8004486 <server_on_command+0x376>
	if (field <= 3)
 800438c:	23b0      	movs	r3, #176	; 0xb0
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b03      	cmp	r3, #3
 8004394:	dc03      	bgt.n	800439e <server_on_command+0x28e>
		return endPos; //Too few param
 8004396:	23a4      	movs	r3, #164	; 0xa4
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	e073      	b.n	8004486 <server_on_command+0x376>

	i = 0;
 800439e:	2300      	movs	r3, #0
 80043a0:	22a0      	movs	r2, #160	; 0xa0
 80043a2:	18ba      	adds	r2, r7, r2
 80043a4:	6013      	str	r3, [r2, #0]
	result = -1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	425b      	negs	r3, r3
 80043aa:	22b4      	movs	r2, #180	; 0xb4
 80043ac:	18ba      	adds	r2, r7, r2
 80043ae:	6013      	str	r3, [r2, #0]
	response = 0;
 80043b0:	4b38      	ldr	r3, [pc, #224]	; (8004494 <server_on_command+0x384>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
	while (handlers[i].cmd) {
 80043b6:	e048      	b.n	800444a <server_on_command+0x33a>
		if (strcmp(command, handlers[i].cmd) == 0) {
 80043b8:	4937      	ldr	r1, [pc, #220]	; (8004498 <server_on_command+0x388>)
 80043ba:	24a0      	movs	r4, #160	; 0xa0
 80043bc:	193b      	adds	r3, r7, r4
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	0013      	movs	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	189b      	adds	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	585a      	ldr	r2, [r3, r1]
 80043ca:	268c      	movs	r6, #140	; 0x8c
 80043cc:	19bb      	adds	r3, r7, r6
 80043ce:	0011      	movs	r1, r2
 80043d0:	0018      	movs	r0, r3
 80043d2:	f7fb fe97 	bl	8000104 <strcmp>
 80043d6:	1e03      	subs	r3, r0, #0
 80043d8:	d131      	bne.n	800443e <server_on_command+0x32e>
			if (!(handlers[i].dis_mask & from)) //Chi cho phep gui lenh tu nguon
 80043da:	492f      	ldr	r1, [pc, #188]	; (8004498 <server_on_command+0x388>)
 80043dc:	193b      	adds	r3, r7, r4
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	0013      	movs	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	189b      	adds	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	18cb      	adds	r3, r1, r3
 80043ea:	3308      	adds	r3, #8
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	001a      	movs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4013      	ands	r3, r2
 80043f4:	d135      	bne.n	8004462 <server_on_command+0x352>
			{
				memset(Response, 0, 200);
 80043f6:	4b29      	ldr	r3, [pc, #164]	; (800449c <server_on_command+0x38c>)
 80043f8:	22c8      	movs	r2, #200	; 0xc8
 80043fa:	2100      	movs	r1, #0
 80043fc:	0018      	movs	r0, r3
 80043fe:	f006 fb8e 	bl	800ab1e <memset>
				result = handlers[i].handler(from, command, field, arg, endPos,
 8004402:	4925      	ldr	r1, [pc, #148]	; (8004498 <server_on_command+0x388>)
 8004404:	193b      	adds	r3, r7, r4
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	0013      	movs	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	189b      	adds	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	18cb      	adds	r3, r1, r3
 8004412:	3304      	adds	r3, #4
 8004414:	681c      	ldr	r4, [r3, #0]
 8004416:	2314      	movs	r3, #20
 8004418:	18fd      	adds	r5, r7, r3
 800441a:	23b0      	movs	r3, #176	; 0xb0
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	19b9      	adds	r1, r7, r6
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	23a4      	movs	r3, #164	; 0xa4
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	002b      	movs	r3, r5
 8004432:	47a0      	blx	r4
 8004434:	0003      	movs	r3, r0
 8004436:	22b4      	movs	r2, #180	; 0xb4
 8004438:	18ba      	adds	r2, r7, r2
 800443a:	6013      	str	r3, [r2, #0]
						size);
			}
			break;
 800443c:	e011      	b.n	8004462 <server_on_command+0x352>
		}
		i++;
 800443e:	22a0      	movs	r2, #160	; 0xa0
 8004440:	18bb      	adds	r3, r7, r2
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3301      	adds	r3, #1
 8004446:	18ba      	adds	r2, r7, r2
 8004448:	6013      	str	r3, [r2, #0]
	while (handlers[i].cmd) {
 800444a:	4913      	ldr	r1, [pc, #76]	; (8004498 <server_on_command+0x388>)
 800444c:	23a0      	movs	r3, #160	; 0xa0
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	0013      	movs	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	189b      	adds	r3, r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	585b      	ldr	r3, [r3, r1]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ab      	bne.n	80043b8 <server_on_command+0x2a8>
 8004460:	e000      	b.n	8004464 <server_on_command+0x354>
			break;
 8004462:	46c0      	nop			; (mov r8, r8)
	}

	if (result > 0) {
 8004464:	22b4      	movs	r2, #180	; 0xb4
 8004466:	18bb      	adds	r3, r7, r2
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	dc08      	bgt.n	8004480 <server_on_command+0x370>
			} else if (from == SKS_CMD_SOURCE_COM2) {
				//ExtSerial_PutString(Response);
			} else {
			}
		}
	} else if (result < 0) {
 800446e:	18bb      	adds	r3, r7, r2
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	da04      	bge.n	8004480 <server_on_command+0x370>
		result = endPos;
 8004476:	23a4      	movs	r3, #164	; 0xa4
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	18ba      	adds	r2, r7, r2
 800447e:	6013      	str	r3, [r2, #0]
	}
	return result;
 8004480:	23b4      	movs	r3, #180	; 0xb4
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	681b      	ldr	r3, [r3, #0]
}
 8004486:	0018      	movs	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	b02f      	add	sp, #188	; 0xbc
 800448c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	2c53532a 	.word	0x2c53532a
 8004494:	200002b4 	.word	0x200002b4
 8004498:	20000050 	.word	0x20000050
 800449c:	200002b8 	.word	0x200002b8

080044a0 <SPI2_LowLevel_Init>:
#define SPI2_SCK_PORT 		GPIOB

#define SPI2_CS_PIN 		12
#define SPI2_CS_PORT 		GPIOB

void SPI2_LowLevel_Init(void) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
	uint32_t temp;
	//MISO
	SPI2_MISO_PORT->MODER &= ~(0x03 << (SPI2_MISO_PIN * 2));
 80044a6:	4b36      	ldr	r3, [pc, #216]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b35      	ldr	r3, [pc, #212]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044ac:	4935      	ldr	r1, [pc, #212]	; (8004584 <SPI2_LowLevel_Init+0xe4>)
 80044ae:	400a      	ands	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
	SPI2_MISO_PORT->MODER |= (0x02 << (SPI2_MISO_PIN * 2)); //mode AF
 80044b2:	4b33      	ldr	r3, [pc, #204]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b32      	ldr	r3, [pc, #200]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044b8:	2180      	movs	r1, #128	; 0x80
 80044ba:	0589      	lsls	r1, r1, #22
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]

	SPI2_MISO_PORT->ODR &= ~(0x01 << SPI2_MISO_PIN); //push pull
 80044c0:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	4b2e      	ldr	r3, [pc, #184]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044c6:	4930      	ldr	r1, [pc, #192]	; (8004588 <SPI2_LowLevel_Init+0xe8>)
 80044c8:	400a      	ands	r2, r1
 80044ca:	615a      	str	r2, [r3, #20]
	SPI2_MISO_PORT->PUPDR &= ~(0x03 << (SPI2_MISO_PIN * 2)); //no pull
 80044cc:	4b2c      	ldr	r3, [pc, #176]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044d2:	492c      	ldr	r1, [pc, #176]	; (8004584 <SPI2_LowLevel_Init+0xe4>)
 80044d4:	400a      	ands	r2, r1
 80044d6:	60da      	str	r2, [r3, #12]

	//SPI2_MISO_PORT->AFR[1] = 0x00;

	temp = SPI2_MISO_PORT->AFR[SPI2_MISO_PIN >> 3u];
 80044d8:	4b29      	ldr	r3, [pc, #164]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_MISO_PIN & 0x07u) * 4u));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2a      	ldr	r2, [pc, #168]	; (800458c <SPI2_LowLevel_Init+0xec>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_MISO_PIN & 0x07u) * 4u));
	SPI2_MISO_PORT->AFR[SPI2_MISO_PIN >> 3u] = temp;
 80044e6:	4b26      	ldr	r3, [pc, #152]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	625a      	str	r2, [r3, #36]	; 0x24

	//MOSI
	SPI2_MOSI_PORT->MODER &= ~(0x03 << (SPI2_MOSI_PIN * 2));
 80044ec:	4b24      	ldr	r3, [pc, #144]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b23      	ldr	r3, [pc, #140]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	0892      	lsrs	r2, r2, #2
 80044f6:	601a      	str	r2, [r3, #0]
	SPI2_MOSI_PORT->MODER |= (0x02 << (SPI2_MOSI_PIN * 2)); //mode AF
 80044f8:	4b21      	ldr	r3, [pc, #132]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b20      	ldr	r3, [pc, #128]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 80044fe:	2180      	movs	r1, #128	; 0x80
 8004500:	0609      	lsls	r1, r1, #24
 8004502:	430a      	orrs	r2, r1
 8004504:	601a      	str	r2, [r3, #0]

	SPI2_MOSI_PORT->ODR &= ~(0x01 << SPI2_MOSI_PIN); //push pull
 8004506:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 800450c:	4920      	ldr	r1, [pc, #128]	; (8004590 <SPI2_LowLevel_Init+0xf0>)
 800450e:	400a      	ands	r2, r1
 8004510:	615a      	str	r2, [r3, #20]
	SPI2_MOSI_PORT->PUPDR &= ~(0x03 << (SPI2_MOSI_PIN * 2)); //no pull
 8004512:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 8004518:	0092      	lsls	r2, r2, #2
 800451a:	0892      	lsrs	r2, r2, #2
 800451c:	60da      	str	r2, [r3, #12]

	//SPI2_MOSI_PORT->AFR[1] = 0x00;
	temp = SPI2_MOSI_PORT->AFR[SPI2_MOSI_PIN >> 3u];
 800451e:	4b18      	ldr	r3, [pc, #96]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_MOSI_PIN & 0x07u) * 4u));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_MOSI_PIN & 0x07u) * 4u));
	SPI2_MOSI_PORT->AFR[SPI2_MOSI_PIN >> 3u] = temp;
 800452c:	4b14      	ldr	r3, [pc, #80]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	625a      	str	r2, [r3, #36]	; 0x24

	//SCK
	SPI2_SCK_PORT->MODER &= ~(0x03 << (SPI2_SCK_PIN * 2));
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 8004538:	4916      	ldr	r1, [pc, #88]	; (8004594 <SPI2_LowLevel_Init+0xf4>)
 800453a:	400a      	ands	r2, r1
 800453c:	601a      	str	r2, [r3, #0]
	SPI2_SCK_PORT->MODER |= (0x02 << (SPI2_SCK_PIN * 2)); //mode AF
 800453e:	4b10      	ldr	r3, [pc, #64]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	0509      	lsls	r1, r1, #20
 8004548:	430a      	orrs	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

	SPI2_SCK_PORT->ODR &= ~(0x01 << SPI2_SCK_PIN); //push pull
 800454c:	4b0c      	ldr	r3, [pc, #48]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 800454e:	695a      	ldr	r2, [r3, #20]
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 8004552:	4911      	ldr	r1, [pc, #68]	; (8004598 <SPI2_LowLevel_Init+0xf8>)
 8004554:	400a      	ands	r2, r1
 8004556:	615a      	str	r2, [r3, #20]
	SPI2_SCK_PORT->PUPDR &= ~(0x03 << (SPI2_SCK_PIN * 2)); //no pull
 8004558:	4b09      	ldr	r3, [pc, #36]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	4b08      	ldr	r3, [pc, #32]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 800455e:	490d      	ldr	r1, [pc, #52]	; (8004594 <SPI2_LowLevel_Init+0xf4>)
 8004560:	400a      	ands	r2, r1
 8004562:	60da      	str	r2, [r3, #12]

	//SPI2_SCK_PORT->AFR[1] = 0x00;
	temp = SPI2_SCK_PORT->AFR[SPI2_SCK_PIN >> 3u];
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	607b      	str	r3, [r7, #4]
	temp &= ~(0xFu << ((SPI2_SCK_PIN & 0x07u) * 4u));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a0b      	ldr	r2, [pc, #44]	; (800459c <SPI2_LowLevel_Init+0xfc>)
 800456e:	4013      	ands	r3, r2
 8004570:	607b      	str	r3, [r7, #4]
	temp |= ((0x00) << ((SPI2_SCK_PIN & 0x07u) * 4u));
	SPI2_SCK_PORT->AFR[SPI2_SCK_PIN >> 3u] = temp;
 8004572:	4b03      	ldr	r3, [pc, #12]	; (8004580 <SPI2_LowLevel_Init+0xe0>)
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	625a      	str	r2, [r3, #36]	; 0x24

}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b002      	add	sp, #8
 800457e:	bd80      	pop	{r7, pc}
 8004580:	50000400 	.word	0x50000400
 8004584:	cfffffff 	.word	0xcfffffff
 8004588:	ffffbfff 	.word	0xffffbfff
 800458c:	f0ffffff 	.word	0xf0ffffff
 8004590:	ffff7fff 	.word	0xffff7fff
 8004594:	f3ffffff 	.word	0xf3ffffff
 8004598:	ffffdfff 	.word	0xffffdfff
 800459c:	ff0fffff 	.word	0xff0fffff

080045a0 <SPIx_Init>:


void SPIx_Init(SPI_TypeDef *SPIx){
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	 RCC->APBENR1 |= RCC_APBENR1_SPI2EN;//clock Enbale
 80045a8:	4b3d      	ldr	r3, [pc, #244]	; (80046a0 <SPIx_Init+0x100>)
 80045aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ac:	4b3c      	ldr	r3, [pc, #240]	; (80046a0 <SPIx_Init+0x100>)
 80045ae:	2180      	movs	r1, #128	; 0x80
 80045b0:	01c9      	lsls	r1, r1, #7
 80045b2:	430a      	orrs	r2, r1
 80045b4:	63da      	str	r2, [r3, #60]	; 0x3c

	 SPIx->CR1 |= SPI_CR1_MSTR; //MasterMode
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2204      	movs	r2, #4
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_RXONLY;// 2line
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a37      	ldr	r2, [pc, #220]	; (80046a4 <SPIx_Init+0x104>)
 80045c8:	401a      	ands	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 &= SPI_CR2_DS;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	23f0      	movs	r3, #240	; 0xf0
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	401a      	ands	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	605a      	str	r2, [r3, #4]
	 SPIx->CR2 &= SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2;//8bit
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	23e0      	movs	r3, #224	; 0xe0
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	401a      	ands	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	605a      	str	r2, [r3, #4]
	 SPIx->CR1 &= ~SPI_CR1_CPHA;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2201      	movs	r2, #1
 80045f0:	4393      	bics	r3, r2
 80045f2:	001a      	movs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_CPOL;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2202      	movs	r2, #2
 80045fe:	4393      	bics	r3, r2
 8004600:	001a      	movs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= SPI_CR1_SSM;//soff nss
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2280      	movs	r2, #128	; 0x80
 800460c:	0092      	lsls	r2, r2, #2
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= SPI_CR1_SSI;//soff nss
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	0052      	lsls	r2, r2, #1
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_BR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2238      	movs	r2, #56	; 0x38
 8004628:	4393      	bics	r3, r2
 800462a:	001a      	movs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_2);   //f/8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2230      	movs	r2, #48	; 0x30
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	601a      	str	r2, [r3, #0]
	 SPIx->CR1 &= ~SPI_CR1_LSBFIRST; //SPI_FIRSTBIT_MSB
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2280      	movs	r2, #128	; 0x80
 8004642:	4393      	bics	r3, r2
 8004644:	001a      	movs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 &= ~SPI_CR2_FRF;//SPI_TIMODE_DISABLE
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2210      	movs	r2, #16
 8004650:	4393      	bics	r3, r2
 8004652:	001a      	movs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	605a      	str	r2, [r3, #4]
	 SPIx->CR1 &= ~SPI_CR1_CRCEN;//SPI_CRCCALCULATION_DISABLE
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <SPIx_Init+0x108>)
 800465e:	401a      	ands	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	601a      	str	r2, [r3, #0]
	 SPIx->CR2 |= SPI_CR2_NSSP;//SPI_NSS_PULSE_ENABLE
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2208      	movs	r2, #8
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	605a      	str	r2, [r3, #4]
	 SPIx->CR2 |= SPI_CR2_FRXTH;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2280      	movs	r2, #128	; 0x80
 8004676:	0152      	lsls	r2, r2, #5
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	605a      	str	r2, [r3, #4]
	 SPIx->I2SCFGR &= ~SPI_I2SCFGR_I2SMOD;//SPI mode is selected
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	4a0a      	ldr	r2, [pc, #40]	; (80046ac <SPIx_Init+0x10c>)
 8004684:	401a      	ands	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	61da      	str	r2, [r3, #28]
	 SPIx->CR1 |= SPI_CR1_SPE;//enable SPI
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2240      	movs	r2, #64	; 0x40
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	601a      	str	r2, [r3, #0]

}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	46bd      	mov	sp, r7
 800469a:	b002      	add	sp, #8
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	40021000 	.word	0x40021000
 80046a4:	fffffbff 	.word	0xfffffbff
 80046a8:	ffffdfff 	.word	0xffffdfff
 80046ac:	fffff7ff 	.word	0xfffff7ff

080046b0 <SPIx_readWrite>:


int valu=0;

uint8_t SPIx_readWrite(SPI_TypeDef *SPIx, uint8_t byte){
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	000a      	movs	r2, r1
 80046ba:	1cfb      	adds	r3, r7, #3
 80046bc:	701a      	strb	r2, [r3, #0]
	uint8_t ret  = 0;
 80046be:	230f      	movs	r3, #15
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]

	valu = byte;
 80046c6:	1cfb      	adds	r3, r7, #3
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <SPIx_readWrite+0x58>)
 80046cc:	601a      	str	r2, [r3, #0]
	while(!((SPIx->SR) & SPI_SR_TXE)){}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2202      	movs	r2, #2
 80046d6:	4013      	ands	r3, r2
 80046d8:	d0fa      	beq.n	80046d0 <SPIx_readWrite+0x20>
	*((__IO uint8_t *)&SPIx->DR) = byte;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	330c      	adds	r3, #12
 80046de:	1cfa      	adds	r2, r7, #3
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	701a      	strb	r2, [r3, #0]
	while(!((SPIx->SR) & SPI_SR_RXNE));
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2201      	movs	r2, #1
 80046ec:	4013      	ands	r3, r2
 80046ee:	d0fa      	beq.n	80046e6 <SPIx_readWrite+0x36>
	ret =  (uint8_t)SPIx->DR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	210f      	movs	r1, #15
 80046f6:	187b      	adds	r3, r7, r1
 80046f8:	701a      	strb	r2, [r3, #0]
	return ret;
 80046fa:	187b      	adds	r3, r7, r1
 80046fc:	781b      	ldrb	r3, [r3, #0]
}
 80046fe:	0018      	movs	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	b004      	add	sp, #16
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	200003b8 	.word	0x200003b8

0800470c <NMEAChecksum>:

#include <stdint.h>
#include <string.h>
//volatile FLASH_Status FLASHStatus = FLASH_TIMEOUT;

char NMEAChecksum(uint8_t *data, int len) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
	char checksum_value = 0;
 8004716:	2317      	movs	r3, #23
 8004718:	18fb      	adds	r3, r7, r3
 800471a:	2200      	movs	r2, #0
 800471c:	701a      	strb	r2, [r3, #0]

	int string_length = len;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	60fb      	str	r3, [r7, #12]
	int index = 1; // Skip over the $ at the begining of the sentence
 8004722:	2301      	movs	r3, #1
 8004724:	613b      	str	r3, [r7, #16]
	while (index < string_length) {
 8004726:	e00c      	b.n	8004742 <NMEAChecksum+0x36>
		checksum_value ^= data[index];
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	18d3      	adds	r3, r2, r3
 800472e:	7819      	ldrb	r1, [r3, #0]
 8004730:	2217      	movs	r2, #23
 8004732:	18bb      	adds	r3, r7, r2
 8004734:	18ba      	adds	r2, r7, r2
 8004736:	7812      	ldrb	r2, [r2, #0]
 8004738:	404a      	eors	r2, r1
 800473a:	701a      	strb	r2, [r3, #0]
		index++;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	3301      	adds	r3, #1
 8004740:	613b      	str	r3, [r7, #16]
	while (index < string_length) {
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	429a      	cmp	r2, r3
 8004748:	dbee      	blt.n	8004728 <NMEAChecksum+0x1c>
	}
	return (checksum_value);
 800474a:	2317      	movs	r3, #23
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	781b      	ldrb	r3, [r3, #0]
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b006      	add	sp, #24
 8004756:	bd80      	pop	{r7, pc}

08004758 <flash_lock>:

static void flash_lock(void){
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
	  FLASH->CR |= FLASH_CR_LOCK;
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <flash_lock+0x18>)
 800475e:	695a      	ldr	r2, [r3, #20]
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <flash_lock+0x18>)
 8004762:	2180      	movs	r1, #128	; 0x80
 8004764:	0609      	lsls	r1, r1, #24
 8004766:	430a      	orrs	r2, r1
 8004768:	615a      	str	r2, [r3, #20]
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40022000 	.word	0x40022000

08004774 <flash_unlock>:

static void flash_unlock(void) {
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
	if (FLASH->CR & FLASH_CR_LOCK) {
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <flash_unlock+0x20>)
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	da05      	bge.n	800478c <flash_unlock+0x18>
		FLASH->KEYR = FLASH_KEY1;
 8004780:	4b04      	ldr	r3, [pc, #16]	; (8004794 <flash_unlock+0x20>)
 8004782:	4a05      	ldr	r2, [pc, #20]	; (8004798 <flash_unlock+0x24>)
 8004784:	609a      	str	r2, [r3, #8]
		FLASH->KEYR = FLASH_KEY2;
 8004786:	4b03      	ldr	r3, [pc, #12]	; (8004794 <flash_unlock+0x20>)
 8004788:	4a04      	ldr	r2, [pc, #16]	; (800479c <flash_unlock+0x28>)
 800478a:	609a      	str	r2, [r3, #8]
	}
}
 800478c:	46c0      	nop			; (mov r8, r8)
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	40022000 	.word	0x40022000
 8004798:	45670123 	.word	0x45670123
 800479c:	cdef89ab 	.word	0xcdef89ab

080047a0 <flashEraserPage>:

int flashEraserPage(uint32_t Page){
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

	while ((FLASH->SR & FLASH_SR_BSY1));
 80047a8:	46c0      	nop			; (mov r8, r8)
 80047aa:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <flashEraserPage+0x74>)
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	2380      	movs	r3, #128	; 0x80
 80047b0:	025b      	lsls	r3, r3, #9
 80047b2:	4013      	ands	r3, r2
 80047b4:	d1f9      	bne.n	80047aa <flashEraserPage+0xa>
	FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 80047b6:	4b17      	ldr	r3, [pc, #92]	; (8004814 <flashEraserPage+0x74>)
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	4b16      	ldr	r3, [pc, #88]	; (8004814 <flashEraserPage+0x74>)
 80047bc:	2102      	movs	r1, #2
 80047be:	430a      	orrs	r2, r1
 80047c0:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_PNB & (Page<<3));
 80047c2:	4b14      	ldr	r3, [pc, #80]	; (8004814 <flashEraserPage+0x74>)
 80047c4:	6959      	ldr	r1, [r3, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4a13      	ldr	r2, [pc, #76]	; (8004818 <flashEraserPage+0x78>)
 80047cc:	401a      	ands	r2, r3
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <flashEraserPage+0x74>)
 80047d0:	430a      	orrs	r2, r1
 80047d2:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <flashEraserPage+0x74>)
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <flashEraserPage+0x74>)
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	0249      	lsls	r1, r1, #9
 80047de:	430a      	orrs	r2, r1
 80047e0:	615a      	str	r2, [r3, #20]
	while ((FLASH->SR & FLASH_SR_BSY1));
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <flashEraserPage+0x74>)
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	025b      	lsls	r3, r3, #9
 80047ec:	4013      	ands	r3, r2
 80047ee:	d1f9      	bne.n	80047e4 <flashEraserPage+0x44>
	FLASH->CR &= ~FLASH_SR_BSY1;
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <flashEraserPage+0x74>)
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <flashEraserPage+0x74>)
 80047f6:	4909      	ldr	r1, [pc, #36]	; (800481c <flashEraserPage+0x7c>)
 80047f8:	400a      	ands	r2, r1
 80047fa:	615a      	str	r2, [r3, #20]
	FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <flashEraserPage+0x74>)
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <flashEraserPage+0x74>)
 8004802:	2102      	movs	r1, #2
 8004804:	438a      	bics	r2, r1
 8004806:	615a      	str	r2, [r3, #20]

	return 1;
 8004808:	2301      	movs	r3, #1
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b002      	add	sp, #8
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	40022000 	.word	0x40022000
 8004818:	00001ff8 	.word	0x00001ff8
 800481c:	fffeffff 	.word	0xfffeffff

08004820 <flash_ProgramDoubleWord>:
	FLASH->CR &= ~FLASH_CR_PG;

	return 1;
}

int flash_ProgramDoubleWord(uint32_t addr, uint64_t data){
 8004820:	b5b0      	push	{r4, r5, r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	603a      	str	r2, [r7, #0]
 800482a:	607b      	str	r3, [r7, #4]

	while((FLASH->SR & FLASH_SR_BSY1));
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	4b16      	ldr	r3, [pc, #88]	; (8004888 <flash_ProgramDoubleWord+0x68>)
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	025b      	lsls	r3, r3, #9
 8004836:	4013      	ands	r3, r2
 8004838:	d1f9      	bne.n	800482e <flash_ProgramDoubleWord+0xe>
	FLASH->CR |= FLASH_CR_PG;
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <flash_ProgramDoubleWord+0x68>)
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <flash_ProgramDoubleWord+0x68>)
 8004840:	2101      	movs	r1, #1
 8004842:	430a      	orrs	r2, r1
 8004844:	615a      	str	r2, [r3, #20]

	*(uint32_t*)addr = (uint32_t)data;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800484c:	f3bf 8f6f 	isb	sy
}
 8004850:	46c0      	nop			; (mov r8, r8)
	__ISB();
	 *(uint32_t *)(addr + 4U) = (uint32_t)(data >> 32U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	001c      	movs	r4, r3
 8004856:	2300      	movs	r3, #0
 8004858:	001d      	movs	r5, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3304      	adds	r3, #4
 800485e:	0022      	movs	r2, r4
 8004860:	601a      	str	r2, [r3, #0]
	while((FLASH->SR & FLASH_SR_BSY1));
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	4b08      	ldr	r3, [pc, #32]	; (8004888 <flash_ProgramDoubleWord+0x68>)
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	2380      	movs	r3, #128	; 0x80
 800486a:	025b      	lsls	r3, r3, #9
 800486c:	4013      	ands	r3, r2
 800486e:	d1f9      	bne.n	8004864 <flash_ProgramDoubleWord+0x44>
	FLASH->CR &= ~FLASH_CR_PG;
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <flash_ProgramDoubleWord+0x68>)
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	4b04      	ldr	r3, [pc, #16]	; (8004888 <flash_ProgramDoubleWord+0x68>)
 8004876:	2101      	movs	r1, #1
 8004878:	438a      	bics	r2, r1
 800487a:	615a      	str	r2, [r3, #20]
	return 1;
 800487c:	2301      	movs	r3, #1
}
 800487e:	0018      	movs	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	b004      	add	sp, #16
 8004884:	bdb0      	pop	{r4, r5, r7, pc}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	40022000 	.word	0x40022000

0800488c <FlashWritePage>:


int FlashWritePage(uint16_t pageNum, uint8_t *pdata,uint16_t len){
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6039      	str	r1, [r7, #0]
 8004894:	0011      	movs	r1, r2
 8004896:	1dbb      	adds	r3, r7, #6
 8004898:	1c02      	adds	r2, r0, #0
 800489a:	801a      	strh	r2, [r3, #0]
 800489c:	1d3b      	adds	r3, r7, #4
 800489e:	1c0a      	adds	r2, r1, #0
 80048a0:	801a      	strh	r2, [r3, #0]

	uint32_t pageAddr = (uint32_t) (pageNum * FLASH_PAGE_SIZE + FLASH_BASE);
 80048a2:	1dbb      	adds	r3, r7, #6
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	2280      	movs	r2, #128	; 0x80
 80048a8:	0252      	lsls	r2, r2, #9
 80048aa:	4694      	mov	ip, r2
 80048ac:	4463      	add	r3, ip
 80048ae:	02db      	lsls	r3, r3, #11
 80048b0:	617b      	str	r3, [r7, #20]
	uint64_t *pRecord = (uint64_t*) pdata;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	613b      	str	r3, [r7, #16]

	flash_unlock();
 80048b6:	f7ff ff5d 	bl	8004774 <flash_unlock>
	//clear flag
	FLASH->SR &= ~(FLASH_SR_EOP|FLASH_SR_WRPERR|FLASH_SR_PGAERR);
 80048ba:	4b18      	ldr	r3, [pc, #96]	; (800491c <FlashWritePage+0x90>)
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	4b17      	ldr	r3, [pc, #92]	; (800491c <FlashWritePage+0x90>)
 80048c0:	2131      	movs	r1, #49	; 0x31
 80048c2:	438a      	bics	r2, r1
 80048c4:	611a      	str	r2, [r3, #16]
	flashEraserPage(pageNum);
 80048c6:	1dbb      	adds	r3, r7, #6
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7ff ff68 	bl	80047a0 <flashEraserPage>
	for (int i = 0; i < len; i += 8,pRecord++,pageAddr += 8) {
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e015      	b.n	8004902 <FlashWritePage+0x76>
		if (!flash_ProgramDoubleWord(pageAddr, *pRecord)) {
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	6979      	ldr	r1, [r7, #20]
 80048de:	0008      	movs	r0, r1
 80048e0:	f7ff ff9e 	bl	8004820 <flash_ProgramDoubleWord>
 80048e4:	1e03      	subs	r3, r0, #0
 80048e6:	d103      	bne.n	80048f0 <FlashWritePage+0x64>
			flash_lock();
 80048e8:	f7ff ff36 	bl	8004758 <flash_lock>
			return 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e010      	b.n	8004912 <FlashWritePage+0x86>
	for (int i = 0; i < len; i += 8,pRecord++,pageAddr += 8) {
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3308      	adds	r3, #8
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	3308      	adds	r3, #8
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	3308      	adds	r3, #8
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	429a      	cmp	r2, r3
 800490a:	dbe4      	blt.n	80048d6 <FlashWritePage+0x4a>
		}
	}
	flash_lock();
 800490c:	f7ff ff24 	bl	8004758 <flash_lock>
	return 1;
 8004910:	2301      	movs	r3, #1
}
 8004912:	0018      	movs	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	b006      	add	sp, #24
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	40022000 	.word	0x40022000

08004920 <FlashReadPage>:

int FlashReadPage(uint16_t pageNum, uint8_t *pdata,	uint16_t len){
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6039      	str	r1, [r7, #0]
 8004928:	0011      	movs	r1, r2
 800492a:	1dbb      	adds	r3, r7, #6
 800492c:	1c02      	adds	r2, r0, #0
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	1d3b      	adds	r3, r7, #4
 8004932:	1c0a      	adds	r2, r1, #0
 8004934:	801a      	strh	r2, [r3, #0]
	uint32_t pageAddr = (uint32_t)(pageNum*FLASH_PAGE_SIZE + FLASH_BASE);
 8004936:	1dbb      	adds	r3, r7, #6
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	0252      	lsls	r2, r2, #9
 800493e:	4694      	mov	ip, r2
 8004940:	4463      	add	r3, ip
 8004942:	02db      	lsls	r3, r3, #11
 8004944:	617b      	str	r3, [r7, #20]
	uint32_t *ptr = (uint32_t*)pdata;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < len; i+=4,ptr++,pageAddr+=4) {
 800494a:	2300      	movs	r3, #0
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	e00c      	b.n	800496a <FlashReadPage+0x4a>
		*ptr= *( uint32_t *)pageAddr;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < len; i+=4,ptr++,pageAddr+=4) {
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	3304      	adds	r3, #4
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3304      	adds	r3, #4
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	3304      	adds	r3, #4
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	429a      	cmp	r2, r3
 8004972:	dbed      	blt.n	8004950 <FlashReadPage+0x30>
	}
	return 1;
 8004974:	2301      	movs	r3, #1
}
 8004976:	0018      	movs	r0, r3
 8004978:	46bd      	mov	sp, r7
 800497a:	b006      	add	sp, #24
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <write_config>:

void write_config(void) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b0c2      	sub	sp, #264	; 0x108
 8004984:	af00      	add	r7, sp, #0
	printf("SKS_OIL_SENSOR write config\r\n");
 8004986:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <write_config+0x8c>)
 8004988:	0018      	movs	r0, r3
 800498a:	f006 fdcb 	bl	800b524 <puts>
	uint8_t buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 800498e:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <write_config+0x90>)
 8004990:	2284      	movs	r2, #132	; 0x84
 8004992:	0052      	lsls	r2, r2, #1
 8004994:	189b      	adds	r3, r3, r2
 8004996:	19db      	adds	r3, r3, r7
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	3304      	adds	r3, #4
 800499e:	22fc      	movs	r2, #252	; 0xfc
 80049a0:	2100      	movs	r1, #0
 80049a2:	0018      	movs	r0, r3
 80049a4:	f006 f8bb 	bl	800ab1e <memset>
	unsigned int pointerSize = sizeof(SENSOR_CONFIG_T);
 80049a8:	2310      	movs	r3, #16
 80049aa:	1d7a      	adds	r2, r7, #5
 80049ac:	32ff      	adds	r2, #255	; 0xff
 80049ae:	6013      	str	r3, [r2, #0]
	unsigned int size =
 80049b0:	1d7b      	adds	r3, r7, #5
 80049b2:	33ff      	adds	r3, #255	; 0xff
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2280      	movs	r2, #128	; 0x80
 80049b8:	0052      	lsls	r2, r2, #1
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <write_config+0x42>
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	1c7a      	adds	r2, r7, #1
 80049c4:	32ff      	adds	r2, #255	; 0xff
 80049c6:	6013      	str	r3, [r2, #0]
			pointerSize < SKS_CONFIG_RECORD_SIZE ?
					pointerSize : SKS_CONFIG_RECORD_SIZE;
	memcpy(buffConfig, &sensorConfig, size);
 80049c8:	1c7b      	adds	r3, r7, #1
 80049ca:	33ff      	adds	r3, #255	; 0xff
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4911      	ldr	r1, [pc, #68]	; (8004a14 <write_config+0x94>)
 80049d0:	003b      	movs	r3, r7
 80049d2:	0018      	movs	r0, r3
 80049d4:	f006 f89a 	bl	800ab0c <memcpy>
	buffConfig[SKS_CONFIG_RECORD_SIZE - 1] = NMEAChecksum(buffConfig,
 80049d8:	003b      	movs	r3, r7
 80049da:	21ff      	movs	r1, #255	; 0xff
 80049dc:	0018      	movs	r0, r3
 80049de:	f7ff fe95 	bl	800470c <NMEAChecksum>
 80049e2:	0003      	movs	r3, r0
 80049e4:	0019      	movs	r1, r3
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <write_config+0x90>)
 80049e8:	2284      	movs	r2, #132	; 0x84
 80049ea:	0052      	lsls	r2, r2, #1
 80049ec:	189b      	adds	r3, r3, r2
 80049ee:	19db      	adds	r3, r3, r7
 80049f0:	22ff      	movs	r2, #255	; 0xff
 80049f2:	5499      	strb	r1, [r3, r2]
			SKS_CONFIG_RECORD_SIZE - 1);
	FlashWritePage(FLASH_START_CONFIG_PAGE, buffConfig, SKS_CONFIG_RECORD_SIZE);
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	005a      	lsls	r2, r3, #1
 80049f8:	003b      	movs	r3, r7
 80049fa:	0019      	movs	r1, r3
 80049fc:	201f      	movs	r0, #31
 80049fe:	f7ff ff45 	bl	800488c <FlashWritePage>
}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b042      	add	sp, #264	; 0x108
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	0800e0ec 	.word	0x0800e0ec
 8004a10:	fffffef8 	.word	0xfffffef8
 8004a14:	20000568 	.word	0x20000568

08004a18 <make_default_config>:

static void make_default_config(void) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
	printf("SKS_OIL_SENSOR write default config\r\n");
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <make_default_config+0x38>)
 8004a1e:	0018      	movs	r0, r3
 8004a20:	f006 fd80 	bl	800b524 <puts>
	sensorConfig.sign = CONFIG_SIGN;
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <make_default_config+0x3c>)
 8004a26:	222a      	movs	r2, #42	; 0x2a
 8004a28:	701a      	strb	r2, [r3, #0]
	sensorConfig.ema = EMA5;
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <make_default_config+0x3c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	705a      	strb	r2, [r3, #1]
	sensorConfig.update_freq = 1000;//ms
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <make_default_config+0x3c>)
 8004a32:	22fa      	movs	r2, #250	; 0xfa
 8004a34:	0092      	lsls	r2, r2, #2
 8004a36:	605a      	str	r2, [r3, #4]
	sensorConfig.full = 0;
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <make_default_config+0x3c>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
	sensorConfig.empty = 0;
 8004a3e:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <make_default_config+0x3c>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	60da      	str	r2, [r3, #12]
	write_config();
 8004a44:	f7ff ff9c 	bl	8004980 <write_config>
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	0800e10c 	.word	0x0800e10c
 8004a54:	20000568 	.word	0x20000568

08004a58 <load_config>:

void load_config(void){
 8004a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a5a:	b0c5      	sub	sp, #276	; 0x114
 8004a5c:	af00      	add	r7, sp, #0
	printf("SKS_OIL_SENSOR load_config\r\n");
 8004a5e:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <load_config+0xa8>)
 8004a60:	0018      	movs	r0, r3
 8004a62:	f006 fd5f 	bl	800b524 <puts>
	uint8_t buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 8004a66:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <load_config+0xac>)
 8004a68:	2588      	movs	r5, #136	; 0x88
 8004a6a:	006d      	lsls	r5, r5, #1
 8004a6c:	195b      	adds	r3, r3, r5
 8004a6e:	19db      	adds	r3, r3, r7
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	3304      	adds	r3, #4
 8004a76:	22fc      	movs	r2, #252	; 0xfc
 8004a78:	2100      	movs	r1, #0
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f006 f84f 	bl	800ab1e <memset>

	FlashReadPage(FLASH_START_CONFIG_PAGE, buffConfig,
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	005a      	lsls	r2, r3, #1
 8004a84:	1d3b      	adds	r3, r7, #4
 8004a86:	0019      	movs	r1, r3
 8004a88:	201f      	movs	r0, #31
 8004a8a:	f7ff ff49 	bl	8004920 <FlashReadPage>
	SKS_CONFIG_RECORD_SIZE);

	char crc = NMEAChecksum(buffConfig, SKS_CONFIG_RECORD_SIZE - 1);
 8004a8e:	2610      	movs	r6, #16
 8004a90:	36ff      	adds	r6, #255	; 0xff
 8004a92:	19bc      	adds	r4, r7, r6
 8004a94:	1d3b      	adds	r3, r7, #4
 8004a96:	21ff      	movs	r1, #255	; 0xff
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7ff fe37 	bl	800470c <NMEAChecksum>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	7023      	strb	r3, [r4, #0]
	if (buffConfig[0] == CONFIG_SIGN
 8004aa2:	4b18      	ldr	r3, [pc, #96]	; (8004b04 <load_config+0xac>)
 8004aa4:	195b      	adds	r3, r3, r5
 8004aa6:	19db      	adds	r3, r3, r7
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8004aac:	d121      	bne.n	8004af2 <load_config+0x9a>
			&& crc == buffConfig[SKS_CONFIG_RECORD_SIZE - 1]) {
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <load_config+0xac>)
 8004ab0:	195b      	adds	r3, r3, r5
 8004ab2:	19db      	adds	r3, r3, r7
 8004ab4:	22ff      	movs	r2, #255	; 0xff
 8004ab6:	5c9b      	ldrb	r3, [r3, r2]
 8004ab8:	19ba      	adds	r2, r7, r6
 8004aba:	7812      	ldrb	r2, [r2, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d118      	bne.n	8004af2 <load_config+0x9a>
		unsigned int pointerSize = sizeof(SENSOR_CONFIG_T);
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	2284      	movs	r2, #132	; 0x84
 8004ac4:	0052      	lsls	r2, r2, #1
 8004ac6:	18b9      	adds	r1, r7, r2
 8004ac8:	600b      	str	r3, [r1, #0]
		unsigned int size =
 8004aca:	18bb      	adds	r3, r7, r2
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2280      	movs	r2, #128	; 0x80
 8004ad0:	0052      	lsls	r2, r2, #1
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <load_config+0x82>
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	1d7a      	adds	r2, r7, #5
 8004adc:	32ff      	adds	r2, #255	; 0xff
 8004ade:	6013      	str	r3, [r2, #0]
				pointerSize < SKS_CONFIG_RECORD_SIZE ?
						pointerSize : SKS_CONFIG_RECORD_SIZE;
		memcpy(&sensorConfig, buffConfig, size);
 8004ae0:	1d7b      	adds	r3, r7, #5
 8004ae2:	33ff      	adds	r3, #255	; 0xff
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	1d39      	adds	r1, r7, #4
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <load_config+0xb0>)
 8004aea:	0018      	movs	r0, r3
 8004aec:	f006 f80e 	bl	800ab0c <memcpy>
			&& crc == buffConfig[SKS_CONFIG_RECORD_SIZE - 1]) {
 8004af0:	e002      	b.n	8004af8 <load_config+0xa0>
	} else {
		make_default_config();
 8004af2:	f7ff ff91 	bl	8004a18 <make_default_config>
	}
}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b045      	add	sp, #276	; 0x114
 8004afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b00:	0800e134 	.word	0x0800e134
 8004b04:	fffffef4 	.word	0xfffffef4
 8004b08:	20000568 	.word	0x20000568

08004b0c <MX_GPIO_Init>:
 */

#include "gpio.h"

void MX_GPIO_Init(void)
{
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b089      	sub	sp, #36	; 0x24
 8004b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b12:	240c      	movs	r4, #12
 8004b14:	193b      	adds	r3, r7, r4
 8004b16:	0018      	movs	r0, r3
 8004b18:	2314      	movs	r3, #20
 8004b1a:	001a      	movs	r2, r3
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	f005 fffe 	bl	800ab1e <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <MX_GPIO_Init+0xa0>)
 8004b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b26:	4b21      	ldr	r3, [pc, #132]	; (8004bac <MX_GPIO_Init+0xa0>)
 8004b28:	2120      	movs	r1, #32
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b2e:	4b1f      	ldr	r3, [pc, #124]	; (8004bac <MX_GPIO_Init+0xa0>)
 8004b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b32:	2220      	movs	r2, #32
 8004b34:	4013      	ands	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b3a:	4b1c      	ldr	r3, [pc, #112]	; (8004bac <MX_GPIO_Init+0xa0>)
 8004b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3e:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <MX_GPIO_Init+0xa0>)
 8004b40:	2102      	movs	r1, #2
 8004b42:	430a      	orrs	r2, r1
 8004b44:	635a      	str	r2, [r3, #52]	; 0x34
 8004b46:	4b19      	ldr	r3, [pc, #100]	; (8004bac <MX_GPIO_Init+0xa0>)
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	607b      	str	r3, [r7, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b52:	4b16      	ldr	r3, [pc, #88]	; (8004bac <MX_GPIO_Init+0xa0>)
 8004b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <MX_GPIO_Init+0xa0>)
 8004b58:	2101      	movs	r1, #1
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <MX_GPIO_Init+0xa0>)
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	2201      	movs	r2, #1
 8004b64:	4013      	ands	r3, r2
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	0059      	lsls	r1, r3, #1
 8004b6e:	23a0      	movs	r3, #160	; 0xa0
 8004b70:	05db      	lsls	r3, r3, #23
 8004b72:	2200      	movs	r2, #0
 8004b74:	0018      	movs	r0, r3
 8004b76:	f002 fe67 	bl	8007848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8004b7a:	193b      	adds	r3, r7, r4
 8004b7c:	2280      	movs	r2, #128	; 0x80
 8004b7e:	0052      	lsls	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b82:	193b      	adds	r3, r7, r4
 8004b84:	2201      	movs	r2, #1
 8004b86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b88:	193b      	adds	r3, r7, r4
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8e:	193b      	adds	r3, r7, r4
 8004b90:	2200      	movs	r2, #0
 8004b92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8004b94:	193a      	adds	r2, r7, r4
 8004b96:	23a0      	movs	r3, #160	; 0xa0
 8004b98:	05db      	lsls	r3, r3, #23
 8004b9a:	0011      	movs	r1, r2
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f002 fcef 	bl	8007580 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b009      	add	sp, #36	; 0x24
 8004ba8:	bd90      	pop	{r4, r7, pc}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	40021000 	.word	0x40021000

08004bb0 <Lsm6ds3_int>:
uint8_t team = 0;
uint8_t teap = 0;
int value = 0;

int Lsm6ds3_int()
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
	team = Lsm6ds3_readRegister(WHO_AM_I_REG);
 8004bb4:	200f      	movs	r0, #15
 8004bb6:	f000 f94d 	bl	8004e54 <Lsm6ds3_readRegister>
 8004bba:	0003      	movs	r3, r0
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <Lsm6ds3_int+0x58>)
 8004bc0:	701a      	strb	r2, [r3, #0]
	if(Lsm6ds3_readRegister(WHO_AM_I_REG) == LSM6DSTR_ADDRESS){
 8004bc2:	200f      	movs	r0, #15
 8004bc4:	f000 f946 	bl	8004e54 <Lsm6ds3_readRegister>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	2b6b      	cmp	r3, #107	; 0x6b
 8004bcc:	d118      	bne.n	8004c00 <Lsm6ds3_int+0x50>
		//set the gyroscope control register to work at 104 Hz, 2000 dps and in bypass mode
		Lsm6ds3_writeRegister(CTRL2_G, 0x4C);
 8004bce:	214c      	movs	r1, #76	; 0x4c
 8004bd0:	2011      	movs	r0, #17
 8004bd2:	f000 f9a3 	bl	8004f1c <Lsm6ds3_writeRegister>
		teap = Lsm6ds3_readRegister(CTRL2_G);
 8004bd6:	2011      	movs	r0, #17
 8004bd8:	f000 f93c 	bl	8004e54 <Lsm6ds3_readRegister>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <Lsm6ds3_int+0x5c>)
 8004be2:	701a      	strb	r2, [r3, #0]

		// Set the Accelerometer control register to work at 104 Hz, 4 g,and in bypass mode and enable ODR/4
		// low pass filter (check figure9 of LSM6DS3's datasheet)
		Lsm6ds3_writeRegister(CTRL1_XL, 0x4A);
 8004be4:	214a      	movs	r1, #74	; 0x4a
 8004be6:	2010      	movs	r0, #16
 8004be8:	f000 f998 	bl	8004f1c <Lsm6ds3_writeRegister>

		// set gyroscope power mode to high performance and bandwidth to 16 MHz
		Lsm6ds3_writeRegister(CTRL7_G, 0x00);
 8004bec:	2100      	movs	r1, #0
 8004bee:	2016      	movs	r0, #22
 8004bf0:	f000 f994 	bl	8004f1c <Lsm6ds3_writeRegister>

		// Set the ODR config register to ODR/4
		Lsm6ds3_writeRegister(CTRL8_XL, 0x09);
 8004bf4:	2109      	movs	r1, #9
 8004bf6:	2017      	movs	r0, #23
 8004bf8:	f000 f990 	bl	8004f1c <Lsm6ds3_writeRegister>
		return 1;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <Lsm6ds3_int+0x52>
	}
	else {
		return 0;
 8004c00:	2300      	movs	r3, #0
	}
}
 8004c02:	0018      	movs	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	200003bc 	.word	0x200003bc
 8004c0c:	200003bd 	.word	0x200003bd

08004c10 <Lsm6ds3_readAcceleration>:
	Lsm6ds3_writeRegister(CTRL2_G, 0x00);
	Lsm6ds3_writeRegister(CTRL1_XL, 0x00);
}

int Lsm6ds3_readAcceleration(float *x, float* y, float* z)
{
 8004c10:	b590      	push	{r4, r7, lr}
 8004c12:	b08d      	sub	sp, #52	; 0x34
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  int16_t data[3]={0};
 8004c1c:	2428      	movs	r4, #40	; 0x28
 8004c1e:	193b      	adds	r3, r7, r4
 8004c20:	0018      	movs	r0, r3
 8004c22:	2306      	movs	r3, #6
 8004c24:	001a      	movs	r2, r3
 8004c26:	2100      	movs	r1, #0
 8004c28:	f005 ff79 	bl	800ab1e <memset>
  long double _data[3]={0};
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	0018      	movs	r0, r3
 8004c32:	2318      	movs	r3, #24
 8004c34:	001a      	movs	r2, r3
 8004c36:	2100      	movs	r1, #0
 8004c38:	f005 ff71 	bl	800ab1e <memset>

  if (!Lsm6ds3_readRegisters(OUTX_L_XL, (uint8_t*)data, sizeof(data))) {
 8004c3c:	193b      	adds	r3, r7, r4
 8004c3e:	2206      	movs	r2, #6
 8004c40:	0019      	movs	r1, r3
 8004c42:	2028      	movs	r0, #40	; 0x28
 8004c44:	f000 f928 	bl	8004e98 <Lsm6ds3_readRegisters>
 8004c48:	1e03      	subs	r3, r0, #0
 8004c4a:	d107      	bne.n	8004c5c <Lsm6ds3_readAcceleration+0x4c>
    x = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]
    y = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60bb      	str	r3, [r7, #8]
    z = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	607b      	str	r3, [r7, #4]
    return 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e052      	b.n	8004d02 <Lsm6ds3_readAcceleration+0xf2>
  }
  *x = data[0] * 4.0 / 32768.0;
 8004c5c:	2428      	movs	r4, #40	; 0x28
 8004c5e:	193b      	adds	r3, r7, r4
 8004c60:	2200      	movs	r2, #0
 8004c62:	5e9b      	ldrsh	r3, [r3, r2]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7fe f98d 	bl	8002f84 <__aeabi_i2d>
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4b27      	ldr	r3, [pc, #156]	; (8004d0c <Lsm6ds3_readAcceleration+0xfc>)
 8004c6e:	f7fd fb37 	bl	80022e0 <__aeabi_dmul>
 8004c72:	0002      	movs	r2, r0
 8004c74:	000b      	movs	r3, r1
 8004c76:	0010      	movs	r0, r2
 8004c78:	0019      	movs	r1, r3
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <Lsm6ds3_readAcceleration+0x100>)
 8004c7e:	f7fc ff2d 	bl	8001adc <__aeabi_ddiv>
 8004c82:	0002      	movs	r2, r0
 8004c84:	000b      	movs	r3, r1
 8004c86:	0010      	movs	r0, r2
 8004c88:	0019      	movs	r1, r3
 8004c8a:	f7fe fa19 	bl	80030c0 <__aeabi_d2f>
 8004c8e:	1c02      	adds	r2, r0, #0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	601a      	str	r2, [r3, #0]
  *y = data[1] * 4.0 / 32768.0;
 8004c94:	193b      	adds	r3, r7, r4
 8004c96:	2202      	movs	r2, #2
 8004c98:	5e9b      	ldrsh	r3, [r3, r2]
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f7fe f972 	bl	8002f84 <__aeabi_i2d>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <Lsm6ds3_readAcceleration+0xfc>)
 8004ca4:	f7fd fb1c 	bl	80022e0 <__aeabi_dmul>
 8004ca8:	0002      	movs	r2, r0
 8004caa:	000b      	movs	r3, r1
 8004cac:	0010      	movs	r0, r2
 8004cae:	0019      	movs	r1, r3
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4b17      	ldr	r3, [pc, #92]	; (8004d10 <Lsm6ds3_readAcceleration+0x100>)
 8004cb4:	f7fc ff12 	bl	8001adc <__aeabi_ddiv>
 8004cb8:	0002      	movs	r2, r0
 8004cba:	000b      	movs	r3, r1
 8004cbc:	0010      	movs	r0, r2
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	f7fe f9fe 	bl	80030c0 <__aeabi_d2f>
 8004cc4:	1c02      	adds	r2, r0, #0
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	601a      	str	r2, [r3, #0]
  *z = data[2] * 4.0 / 32768.0;
 8004cca:	193b      	adds	r3, r7, r4
 8004ccc:	2204      	movs	r2, #4
 8004cce:	5e9b      	ldrsh	r3, [r3, r2]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f7fe f957 	bl	8002f84 <__aeabi_i2d>
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <Lsm6ds3_readAcceleration+0xfc>)
 8004cda:	f7fd fb01 	bl	80022e0 <__aeabi_dmul>
 8004cde:	0002      	movs	r2, r0
 8004ce0:	000b      	movs	r3, r1
 8004ce2:	0010      	movs	r0, r2
 8004ce4:	0019      	movs	r1, r3
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <Lsm6ds3_readAcceleration+0x100>)
 8004cea:	f7fc fef7 	bl	8001adc <__aeabi_ddiv>
 8004cee:	0002      	movs	r2, r0
 8004cf0:	000b      	movs	r3, r1
 8004cf2:	0010      	movs	r0, r2
 8004cf4:	0019      	movs	r1, r3
 8004cf6:	f7fe f9e3 	bl	80030c0 <__aeabi_d2f>
 8004cfa:	1c02      	adds	r2, r0, #0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	601a      	str	r2, [r3, #0]
  return 1;
 8004d00:	2301      	movs	r3, #1
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b00d      	add	sp, #52	; 0x34
 8004d08:	bd90      	pop	{r4, r7, pc}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	40100000 	.word	0x40100000
 8004d10:	40e00000 	.word	0x40e00000

08004d14 <Lsm6ds3_accelerationAvailable>:
int acc;
int Lsm6ds3_accelerationAvailable()
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
	acc = Lsm6ds3_readRegister(STATUS_REG);
 8004d18:	201e      	movs	r0, #30
 8004d1a:	f000 f89b 	bl	8004e54 <Lsm6ds3_readRegister>
 8004d1e:	0002      	movs	r2, r0
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <Lsm6ds3_accelerationAvailable+0x28>)
 8004d22:	601a      	str	r2, [r3, #0]
  if (acc & 0x01) {
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <Lsm6ds3_accelerationAvailable+0x28>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d001      	beq.n	8004d32 <Lsm6ds3_accelerationAvailable+0x1e>
    return 1;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <Lsm6ds3_accelerationAvailable+0x20>
  }
  return 0;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	0018      	movs	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	200003c0 	.word	0x200003c0

08004d40 <Lsm6ds3_readGyroscope>:

int Lsm6ds3_readGyroscope(float* x, float* y, float* z)
{
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  int16_t data[3]={0};
 8004d4c:	2410      	movs	r4, #16
 8004d4e:	193b      	adds	r3, r7, r4
 8004d50:	0018      	movs	r0, r3
 8004d52:	2306      	movs	r3, #6
 8004d54:	001a      	movs	r2, r3
 8004d56:	2100      	movs	r1, #0
 8004d58:	f005 fee1 	bl	800ab1e <memset>

  if (!Lsm6ds3_readRegisters(OUTX_L_G, (uint8_t*)data, sizeof(data))) {
 8004d5c:	193b      	adds	r3, r7, r4
 8004d5e:	2206      	movs	r2, #6
 8004d60:	0019      	movs	r1, r3
 8004d62:	2022      	movs	r0, #34	; 0x22
 8004d64:	f000 f898 	bl	8004e98 <Lsm6ds3_readRegisters>
 8004d68:	1e03      	subs	r3, r0, #0
 8004d6a:	d107      	bne.n	8004d7c <Lsm6ds3_readGyroscope+0x3c>
    x = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
    y = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60bb      	str	r3, [r7, #8]
    z = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	607b      	str	r3, [r7, #4]
    return 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e052      	b.n	8004e22 <Lsm6ds3_readGyroscope+0xe2>
  }
  *x = data[0] * 2000.0 / 32768.0;
 8004d7c:	2410      	movs	r4, #16
 8004d7e:	193b      	adds	r3, r7, r4
 8004d80:	2200      	movs	r2, #0
 8004d82:	5e9b      	ldrsh	r3, [r3, r2]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f7fe f8fd 	bl	8002f84 <__aeabi_i2d>
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	4b27      	ldr	r3, [pc, #156]	; (8004e2c <Lsm6ds3_readGyroscope+0xec>)
 8004d8e:	f7fd faa7 	bl	80022e0 <__aeabi_dmul>
 8004d92:	0002      	movs	r2, r0
 8004d94:	000b      	movs	r3, r1
 8004d96:	0010      	movs	r0, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <Lsm6ds3_readGyroscope+0xf0>)
 8004d9e:	f7fc fe9d 	bl	8001adc <__aeabi_ddiv>
 8004da2:	0002      	movs	r2, r0
 8004da4:	000b      	movs	r3, r1
 8004da6:	0010      	movs	r0, r2
 8004da8:	0019      	movs	r1, r3
 8004daa:	f7fe f989 	bl	80030c0 <__aeabi_d2f>
 8004dae:	1c02      	adds	r2, r0, #0
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	601a      	str	r2, [r3, #0]
  *y = data[1] * 2000.0 / 32768.0;
 8004db4:	193b      	adds	r3, r7, r4
 8004db6:	2202      	movs	r2, #2
 8004db8:	5e9b      	ldrsh	r3, [r3, r2]
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f7fe f8e2 	bl	8002f84 <__aeabi_i2d>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <Lsm6ds3_readGyroscope+0xec>)
 8004dc4:	f7fd fa8c 	bl	80022e0 <__aeabi_dmul>
 8004dc8:	0002      	movs	r2, r0
 8004dca:	000b      	movs	r3, r1
 8004dcc:	0010      	movs	r0, r2
 8004dce:	0019      	movs	r1, r3
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4b17      	ldr	r3, [pc, #92]	; (8004e30 <Lsm6ds3_readGyroscope+0xf0>)
 8004dd4:	f7fc fe82 	bl	8001adc <__aeabi_ddiv>
 8004dd8:	0002      	movs	r2, r0
 8004dda:	000b      	movs	r3, r1
 8004ddc:	0010      	movs	r0, r2
 8004dde:	0019      	movs	r1, r3
 8004de0:	f7fe f96e 	bl	80030c0 <__aeabi_d2f>
 8004de4:	1c02      	adds	r2, r0, #0
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	601a      	str	r2, [r3, #0]
  *z = data[2] * 2000.0 / 32768.0;
 8004dea:	193b      	adds	r3, r7, r4
 8004dec:	2204      	movs	r2, #4
 8004dee:	5e9b      	ldrsh	r3, [r3, r2]
 8004df0:	0018      	movs	r0, r3
 8004df2:	f7fe f8c7 	bl	8002f84 <__aeabi_i2d>
 8004df6:	2200      	movs	r2, #0
 8004df8:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <Lsm6ds3_readGyroscope+0xec>)
 8004dfa:	f7fd fa71 	bl	80022e0 <__aeabi_dmul>
 8004dfe:	0002      	movs	r2, r0
 8004e00:	000b      	movs	r3, r1
 8004e02:	0010      	movs	r0, r2
 8004e04:	0019      	movs	r1, r3
 8004e06:	2200      	movs	r2, #0
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <Lsm6ds3_readGyroscope+0xf0>)
 8004e0a:	f7fc fe67 	bl	8001adc <__aeabi_ddiv>
 8004e0e:	0002      	movs	r2, r0
 8004e10:	000b      	movs	r3, r1
 8004e12:	0010      	movs	r0, r2
 8004e14:	0019      	movs	r1, r3
 8004e16:	f7fe f953 	bl	80030c0 <__aeabi_d2f>
 8004e1a:	1c02      	adds	r2, r0, #0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	601a      	str	r2, [r3, #0]
  return 1;
 8004e20:	2301      	movs	r3, #1
}
 8004e22:	0018      	movs	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b007      	add	sp, #28
 8004e28:	bd90      	pop	{r4, r7, pc}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	409f4000 	.word	0x409f4000
 8004e30:	40e00000 	.word	0x40e00000

08004e34 <Lsm6ds3_gyroscopeAvailable>:

int Lsm6ds3_gyroscopeAvailable()
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  if (Lsm6ds3_readRegister(STATUS_REG) & 0x02) {
 8004e38:	201e      	movs	r0, #30
 8004e3a:	f000 f80b 	bl	8004e54 <Lsm6ds3_readRegister>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	2202      	movs	r2, #2
 8004e42:	4013      	ands	r3, r2
 8004e44:	d001      	beq.n	8004e4a <Lsm6ds3_gyroscopeAvailable+0x16>
    return 1;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <Lsm6ds3_gyroscopeAvailable+0x18>
  }
  return 0;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <Lsm6ds3_readRegister>:
{
  return 104.0F;
}
int readRegister;
int Lsm6ds3_readRegister(uint8_t address)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	1dfb      	adds	r3, r7, #7
 8004e5e:	701a      	strb	r2, [r3, #0]
  uint8_t value;

  if (Lsm6ds3_readRegisters(address, &value, sizeof(value)) != 1) {
 8004e60:	230f      	movs	r3, #15
 8004e62:	18f9      	adds	r1, r7, r3
 8004e64:	1dfb      	adds	r3, r7, #7
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f000 f814 	bl	8004e98 <Lsm6ds3_readRegisters>
 8004e70:	0003      	movs	r3, r0
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d006      	beq.n	8004e84 <Lsm6ds3_readRegister+0x30>
	  readRegister= -1;
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <Lsm6ds3_readRegister+0x40>)
 8004e78:	2201      	movs	r2, #1
 8004e7a:	4252      	negs	r2, r2
 8004e7c:	601a      	str	r2, [r3, #0]
	  return readRegister;
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <Lsm6ds3_readRegister+0x40>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	e002      	b.n	8004e8a <Lsm6ds3_readRegister+0x36>
  }
  return value;
 8004e84:	230f      	movs	r3, #15
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	781b      	ldrb	r3, [r3, #0]
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	200003c4 	.word	0x200003c4

08004e98 <Lsm6ds3_readRegisters>:

int Lsm6ds3_readRegisters(uint8_t address, uint8_t* data, size_t length)
{
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	240f      	movs	r4, #15
 8004ea4:	193b      	adds	r3, r7, r4
 8004ea6:	1c02      	adds	r2, r0, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
	address |= 0x80;
 8004eaa:	193b      	adds	r3, r7, r4
 8004eac:	193a      	adds	r2, r7, r4
 8004eae:	7812      	ldrb	r2, [r2, #0]
 8004eb0:	2180      	movs	r1, #128	; 0x80
 8004eb2:	4249      	negs	r1, r1
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8004eb8:	2380      	movs	r3, #128	; 0x80
 8004eba:	0059      	lsls	r1, r3, #1
 8004ebc:	23a0      	movs	r3, #160	; 0xa0
 8004ebe:	05db      	lsls	r3, r3, #23
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f002 fcc0 	bl	8007848 <HAL_GPIO_WritePin>
	SPIx_readWrite(LSM6DS3_SPI, address);
 8004ec8:	193b      	adds	r3, r7, r4
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	4a12      	ldr	r2, [pc, #72]	; (8004f18 <Lsm6ds3_readRegisters+0x80>)
 8004ece:	0019      	movs	r1, r3
 8004ed0:	0010      	movs	r0, r2
 8004ed2:	f7ff fbed 	bl	80046b0 <SPIx_readWrite>
	for(int i=0; i<length; i++){
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e00c      	b.n	8004ef6 <Lsm6ds3_readRegisters+0x5e>
		*(data+i) = SPIx_readWrite(LSM6DS3_SPI, 0x00);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	18d4      	adds	r4, r2, r3
 8004ee2:	4b0d      	ldr	r3, [pc, #52]	; (8004f18 <Lsm6ds3_readRegisters+0x80>)
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f7ff fbe2 	bl	80046b0 <SPIx_readWrite>
 8004eec:	0003      	movs	r3, r0
 8004eee:	7023      	strb	r3, [r4, #0]
	for(int i=0; i<length; i++){
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d8ee      	bhi.n	8004edc <Lsm6ds3_readRegisters+0x44>
	}
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	0059      	lsls	r1, r3, #1
 8004f02:	23a0      	movs	r3, #160	; 0xa0
 8004f04:	05db      	lsls	r3, r3, #23
 8004f06:	2201      	movs	r2, #1
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f002 fc9d 	bl	8007848 <HAL_GPIO_WritePin>
	return 1;
 8004f0e:	2301      	movs	r3, #1
}
 8004f10:	0018      	movs	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b007      	add	sp, #28
 8004f16:	bd90      	pop	{r4, r7, pc}
 8004f18:	40003800 	.word	0x40003800

08004f1c <Lsm6ds3_writeRegister>:

int Lsm6ds3_writeRegister(uint8_t address, uint8_t value)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	0002      	movs	r2, r0
 8004f24:	1dfb      	adds	r3, r7, #7
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	1dbb      	adds	r3, r7, #6
 8004f2a:	1c0a      	adds	r2, r1, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8004f2e:	2380      	movs	r3, #128	; 0x80
 8004f30:	0059      	lsls	r1, r3, #1
 8004f32:	23a0      	movs	r3, #160	; 0xa0
 8004f34:	05db      	lsls	r3, r3, #23
 8004f36:	2200      	movs	r2, #0
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f002 fc85 	bl	8007848 <HAL_GPIO_WritePin>
	SPIx_readWrite(LSM6DS3_SPI, address);
 8004f3e:	1dfb      	adds	r3, r7, #7
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <Lsm6ds3_writeRegister+0x58>)
 8004f44:	0019      	movs	r1, r3
 8004f46:	0010      	movs	r0, r2
 8004f48:	f7ff fbb2 	bl	80046b0 <SPIx_readWrite>
	SPIx_readWrite(LSM6DS3_SPI, value);
 8004f4c:	1dbb      	adds	r3, r7, #6
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	4a08      	ldr	r2, [pc, #32]	; (8004f74 <Lsm6ds3_writeRegister+0x58>)
 8004f52:	0019      	movs	r1, r3
 8004f54:	0010      	movs	r0, r2
 8004f56:	f7ff fbab 	bl	80046b0 <SPIx_readWrite>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	0059      	lsls	r1, r3, #1
 8004f5e:	23a0      	movs	r3, #160	; 0xa0
 8004f60:	05db      	lsls	r3, r3, #23
 8004f62:	2201      	movs	r2, #1
 8004f64:	0018      	movs	r0, r3
 8004f66:	f002 fc6f 	bl	8007848 <HAL_GPIO_WritePin>
}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40003800 	.word	0x40003800

08004f78 <Lsm6ds3_printRotationAngles>:

void Lsm6ds3_printRotationAngles() {
 8004f78:	b5b0      	push	{r4, r5, r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af02      	add	r7, sp, #8
   float ax, ay, az;  // accelerometer values
   float gx, gy, gz;  // gyroscope values
   if (Lsm6ds3_accelerationAvailable() && Lsm6ds3_gyroscopeAvailable()
 8004f7e:	f7ff fec9 	bl	8004d14 <Lsm6ds3_accelerationAvailable>
 8004f82:	1e03      	subs	r3, r0, #0
 8004f84:	d032      	beq.n	8004fec <Lsm6ds3_printRotationAngles+0x74>
 8004f86:	f7ff ff55 	bl	8004e34 <Lsm6ds3_gyroscopeAvailable>
 8004f8a:	1e03      	subs	r3, r0, #0
 8004f8c:	d02e      	beq.n	8004fec <Lsm6ds3_printRotationAngles+0x74>
      && Lsm6ds3_readAcceleration(&ax, &ay, &az) && Lsm6ds3_readGyroscope(&gx, &gy, &gz)) {
 8004f8e:	230c      	movs	r3, #12
 8004f90:	18fa      	adds	r2, r7, r3
 8004f92:	2310      	movs	r3, #16
 8004f94:	18f9      	adds	r1, r7, r3
 8004f96:	2314      	movs	r3, #20
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f7ff fe38 	bl	8004c10 <Lsm6ds3_readAcceleration>
 8004fa0:	1e03      	subs	r3, r0, #0
 8004fa2:	d023      	beq.n	8004fec <Lsm6ds3_printRotationAngles+0x74>
 8004fa4:	003a      	movs	r2, r7
 8004fa6:	1d39      	adds	r1, r7, #4
 8004fa8:	2308      	movs	r3, #8
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	0018      	movs	r0, r3
 8004fae:	f7ff fec7 	bl	8004d40 <Lsm6ds3_readGyroscope>
 8004fb2:	1e03      	subs	r3, r0, #0
 8004fb4:	d01a      	beq.n	8004fec <Lsm6ds3_printRotationAngles+0x74>

	      Madgwick_updateIMU(gx, gy, gz, ax, ay, az);
 8004fb6:	68b8      	ldr	r0, [r7, #8]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	683c      	ldr	r4, [r7, #0]
 8004fbc:	697d      	ldr	r5, [r7, #20]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	9201      	str	r2, [sp, #4]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	1c2b      	adds	r3, r5, #0
 8004fc8:	1c22      	adds	r2, r4, #0
 8004fca:	f7fe fa45 	bl	8003458 <Madgwick_updateIMU>
	      roll  = Madgwick_getRoll();
 8004fce:	f7fe ff19 	bl	8003e04 <Madgwick_getRoll>
 8004fd2:	1c02      	adds	r2, r0, #0
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <Lsm6ds3_printRotationAngles+0x7c>)
 8004fd6:	601a      	str	r2, [r3, #0]
	      pitch = Madgwick_getPitch();
 8004fd8:	f7fe ff2c 	bl	8003e34 <Madgwick_getPitch>
 8004fdc:	1c02      	adds	r2, r0, #0
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <Lsm6ds3_printRotationAngles+0x80>)
 8004fe0:	601a      	str	r2, [r3, #0]
	      yaw   = Madgwick_getYaw();
 8004fe2:	f7fe ff3f 	bl	8003e64 <Madgwick_getYaw>
 8004fe6:	1c02      	adds	r2, r0, #0
 8004fe8:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <Lsm6ds3_printRotationAngles+0x84>)
 8004fea:	601a      	str	r2, [r3, #0]
   }
}
 8004fec:	46c0      	nop			; (mov r8, r8)
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	b006      	add	sp, #24
 8004ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ff4:	200002a4 	.word	0x200002a4
 8004ff8:	200002a8 	.word	0x200002a8
 8004ffc:	200002ac 	.word	0x200002ac

08005000 <_write>:
static void MX_ADC1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e00b      	b.n	800502a <_write+0x2a>
		HAL_UART_Transmit(&huart1, (uint8_t*) ptr++, 1, 1000); //((*ptr++));
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	1c4b      	adds	r3, r1, #1
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	23fa      	movs	r3, #250	; 0xfa
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4807      	ldr	r0, [pc, #28]	; (800503c <_write+0x3c>)
 800501e:	2201      	movs	r2, #1
 8005020:	f004 f8fa 	bl	8009218 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3301      	adds	r3, #1
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	429a      	cmp	r2, r3
 8005030:	dbef      	blt.n	8005012 <_write+0x12>
	}
	return len;
 8005032:	687b      	ldr	r3, [r7, #4]
}
 8005034:	0018      	movs	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	b006      	add	sp, #24
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20000478 	.word	0x20000478

08005040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005044:	f001 f978 	bl	8006338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005048:	f000 f80d 	bl	8005066 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800504c:	f000 f998 	bl	8005380 <MX_GPIO_Init>
  MX_DMA_Init();
 8005050:	f000 f978 	bl	8005344 <MX_DMA_Init>
  MX_ADC1_Init();
 8005054:	f000 f860 	bl	8005118 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8005058:	f000 f926 	bl	80052a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800505c:	f000 f8c8 	bl	80051f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  mainTask();
 8005060:	f000 f9b6 	bl	80053d0 <mainTask>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005064:	e7fe      	b.n	8005064 <main+0x24>

08005066 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005066:	b590      	push	{r4, r7, lr}
 8005068:	b093      	sub	sp, #76	; 0x4c
 800506a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800506c:	2410      	movs	r4, #16
 800506e:	193b      	adds	r3, r7, r4
 8005070:	0018      	movs	r0, r3
 8005072:	2338      	movs	r3, #56	; 0x38
 8005074:	001a      	movs	r2, r3
 8005076:	2100      	movs	r1, #0
 8005078:	f005 fd51 	bl	800ab1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800507c:	003b      	movs	r3, r7
 800507e:	0018      	movs	r0, r3
 8005080:	2310      	movs	r3, #16
 8005082:	001a      	movs	r2, r3
 8005084:	2100      	movs	r1, #0
 8005086:	f005 fd4a 	bl	800ab1e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	0018      	movs	r0, r3
 8005090:	f002 fbf8 	bl	8007884 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005094:	193b      	adds	r3, r7, r4
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800509a:	193b      	adds	r3, r7, r4
 800509c:	2280      	movs	r2, #128	; 0x80
 800509e:	0252      	lsls	r2, r2, #9
 80050a0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050a2:	0021      	movs	r1, r4
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	2202      	movs	r2, #2
 80050a8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050aa:	187b      	adds	r3, r7, r1
 80050ac:	2203      	movs	r2, #3
 80050ae:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	2200      	movs	r2, #0
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80050b6:	187b      	adds	r3, r7, r1
 80050b8:	2210      	movs	r2, #16
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80050bc:	187b      	adds	r3, r7, r1
 80050be:	2280      	movs	r2, #128	; 0x80
 80050c0:	0292      	lsls	r2, r2, #10
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80050c4:	187b      	adds	r3, r7, r1
 80050c6:	2280      	movs	r2, #128	; 0x80
 80050c8:	0492      	lsls	r2, r2, #18
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	2280      	movs	r2, #128	; 0x80
 80050d0:	0592      	lsls	r2, r2, #22
 80050d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050d4:	187b      	adds	r3, r7, r1
 80050d6:	0018      	movs	r0, r3
 80050d8:	f002 fc20 	bl	800791c <HAL_RCC_OscConfig>
 80050dc:	1e03      	subs	r3, r0, #0
 80050de:	d001      	beq.n	80050e4 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80050e0:	f000 f970 	bl	80053c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050e4:	003b      	movs	r3, r7
 80050e6:	2207      	movs	r2, #7
 80050e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050ea:	003b      	movs	r3, r7
 80050ec:	2202      	movs	r2, #2
 80050ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050f0:	003b      	movs	r3, r7
 80050f2:	2200      	movs	r2, #0
 80050f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80050f6:	003b      	movs	r3, r7
 80050f8:	2200      	movs	r2, #0
 80050fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80050fc:	003b      	movs	r3, r7
 80050fe:	2102      	movs	r1, #2
 8005100:	0018      	movs	r0, r3
 8005102:	f002 ff25 	bl	8007f50 <HAL_RCC_ClockConfig>
 8005106:	1e03      	subs	r3, r0, #0
 8005108:	d001      	beq.n	800510e <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800510a:	f000 f95b 	bl	80053c4 <Error_Handler>
  }
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b013      	add	sp, #76	; 0x4c
 8005114:	bd90      	pop	{r4, r7, pc}
	...

08005118 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	0018      	movs	r0, r3
 8005122:	230c      	movs	r3, #12
 8005124:	001a      	movs	r2, r3
 8005126:	2100      	movs	r1, #0
 8005128:	f005 fcf9 	bl	800ab1e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800512c:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <MX_ADC1_Init+0xcc>)
 800512e:	4a2e      	ldr	r2, [pc, #184]	; (80051e8 <MX_ADC1_Init+0xd0>)
 8005130:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005132:	4b2c      	ldr	r3, [pc, #176]	; (80051e4 <MX_ADC1_Init+0xcc>)
 8005134:	2280      	movs	r2, #128	; 0x80
 8005136:	05d2      	lsls	r2, r2, #23
 8005138:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800513a:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <MX_ADC1_Init+0xcc>)
 800513c:	2200      	movs	r2, #0
 800513e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005140:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <MX_ADC1_Init+0xcc>)
 8005142:	2200      	movs	r2, #0
 8005144:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005146:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <MX_ADC1_Init+0xcc>)
 8005148:	2200      	movs	r2, #0
 800514a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800514c:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <MX_ADC1_Init+0xcc>)
 800514e:	2204      	movs	r2, #4
 8005150:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005152:	4b24      	ldr	r3, [pc, #144]	; (80051e4 <MX_ADC1_Init+0xcc>)
 8005154:	2200      	movs	r2, #0
 8005156:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8005158:	4b22      	ldr	r3, [pc, #136]	; (80051e4 <MX_ADC1_Init+0xcc>)
 800515a:	2200      	movs	r2, #0
 800515c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800515e:	4b21      	ldr	r3, [pc, #132]	; (80051e4 <MX_ADC1_Init+0xcc>)
 8005160:	2200      	movs	r2, #0
 8005162:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8005164:	4b1f      	ldr	r3, [pc, #124]	; (80051e4 <MX_ADC1_Init+0xcc>)
 8005166:	2201      	movs	r2, #1
 8005168:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800516a:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <MX_ADC1_Init+0xcc>)
 800516c:	2220      	movs	r2, #32
 800516e:	2100      	movs	r1, #0
 8005170:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005172:	4b1c      	ldr	r3, [pc, #112]	; (80051e4 <MX_ADC1_Init+0xcc>)
 8005174:	2200      	movs	r2, #0
 8005176:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005178:	4b1a      	ldr	r3, [pc, #104]	; (80051e4 <MX_ADC1_Init+0xcc>)
 800517a:	2200      	movs	r2, #0
 800517c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800517e:	4b19      	ldr	r3, [pc, #100]	; (80051e4 <MX_ADC1_Init+0xcc>)
 8005180:	222c      	movs	r2, #44	; 0x2c
 8005182:	2100      	movs	r1, #0
 8005184:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005186:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <MX_ADC1_Init+0xcc>)
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 800518c:	4b15      	ldr	r3, [pc, #84]	; (80051e4 <MX_ADC1_Init+0xcc>)
 800518e:	2206      	movs	r2, #6
 8005190:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8005192:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <MX_ADC1_Init+0xcc>)
 8005194:	2200      	movs	r2, #0
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8005198:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <MX_ADC1_Init+0xcc>)
 800519a:	223c      	movs	r2, #60	; 0x3c
 800519c:	2100      	movs	r1, #0
 800519e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80051a0:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <MX_ADC1_Init+0xcc>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80051a6:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <MX_ADC1_Init+0xcc>)
 80051a8:	0018      	movs	r0, r3
 80051aa:	f001 fa6d 	bl	8006688 <HAL_ADC_Init>
 80051ae:	1e03      	subs	r3, r0, #0
 80051b0:	d001      	beq.n	80051b6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80051b2:	f000 f907 	bl	80053c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80051b6:	1d3b      	adds	r3, r7, #4
 80051b8:	4a0c      	ldr	r2, [pc, #48]	; (80051ec <MX_ADC1_Init+0xd4>)
 80051ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	2200      	movs	r2, #0
 80051c0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80051c2:	1d3b      	adds	r3, r7, #4
 80051c4:	2200      	movs	r2, #0
 80051c6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80051c8:	1d3a      	adds	r2, r7, #4
 80051ca:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <MX_ADC1_Init+0xcc>)
 80051cc:	0011      	movs	r1, r2
 80051ce:	0018      	movs	r0, r3
 80051d0:	f001 fc02 	bl	80069d8 <HAL_ADC_ConfigChannel>
 80051d4:	1e03      	subs	r3, r0, #0
 80051d6:	d001      	beq.n	80051dc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80051d8:	f000 f8f4 	bl	80053c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80051dc:	46c0      	nop			; (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	b004      	add	sp, #16
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	200003c8 	.word	0x200003c8
 80051e8:	40012400 	.word	0x40012400
 80051ec:	04000002 	.word	0x04000002

080051f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051f6:	2314      	movs	r3, #20
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	0018      	movs	r0, r3
 80051fc:	230c      	movs	r3, #12
 80051fe:	001a      	movs	r2, r3
 8005200:	2100      	movs	r1, #0
 8005202:	f005 fc8c 	bl	800ab1e <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	0018      	movs	r0, r3
 800520a:	2310      	movs	r3, #16
 800520c:	001a      	movs	r2, r3
 800520e:	2100      	movs	r1, #0
 8005210:	f005 fc85 	bl	800ab1e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005214:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <MX_TIM2_Init+0xb4>)
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	05d2      	lsls	r2, r2, #23
 800521a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800521c:	4b21      	ldr	r3, [pc, #132]	; (80052a4 <MX_TIM2_Init+0xb4>)
 800521e:	2200      	movs	r2, #0
 8005220:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005222:	4b20      	ldr	r3, [pc, #128]	; (80052a4 <MX_TIM2_Init+0xb4>)
 8005224:	2200      	movs	r2, #0
 8005226:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005228:	4b1e      	ldr	r3, [pc, #120]	; (80052a4 <MX_TIM2_Init+0xb4>)
 800522a:	2201      	movs	r2, #1
 800522c:	4252      	negs	r2, r2
 800522e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005230:	4b1c      	ldr	r3, [pc, #112]	; (80052a4 <MX_TIM2_Init+0xb4>)
 8005232:	2200      	movs	r2, #0
 8005234:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005236:	4b1b      	ldr	r3, [pc, #108]	; (80052a4 <MX_TIM2_Init+0xb4>)
 8005238:	2200      	movs	r2, #0
 800523a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800523c:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <MX_TIM2_Init+0xb4>)
 800523e:	0018      	movs	r0, r3
 8005240:	f003 f9aa 	bl	8008598 <HAL_TIM_IC_Init>
 8005244:	1e03      	subs	r3, r0, #0
 8005246:	d001      	beq.n	800524c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8005248:	f000 f8bc 	bl	80053c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800524c:	2114      	movs	r1, #20
 800524e:	187b      	adds	r3, r7, r1
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005254:	187b      	adds	r3, r7, r1
 8005256:	2200      	movs	r2, #0
 8005258:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800525a:	187a      	adds	r2, r7, r1
 800525c:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <MX_TIM2_Init+0xb4>)
 800525e:	0011      	movs	r1, r2
 8005260:	0018      	movs	r0, r3
 8005262:	f003 ff03 	bl	800906c <HAL_TIMEx_MasterConfigSynchronization>
 8005266:	1e03      	subs	r3, r0, #0
 8005268:	d001      	beq.n	800526e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800526a:	f000 f8ab 	bl	80053c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800526e:	1d3b      	adds	r3, r7, #4
 8005270:	2200      	movs	r2, #0
 8005272:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	2201      	movs	r2, #1
 8005278:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	2200      	movs	r2, #0
 800527e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8005280:	1d3b      	adds	r3, r7, #4
 8005282:	2200      	movs	r2, #0
 8005284:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8005286:	1d39      	adds	r1, r7, #4
 8005288:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <MX_TIM2_Init+0xb4>)
 800528a:	220c      	movs	r2, #12
 800528c:	0018      	movs	r0, r3
 800528e:	f003 fc3d 	bl	8008b0c <HAL_TIM_IC_ConfigChannel>
 8005292:	1e03      	subs	r3, r0, #0
 8005294:	d001      	beq.n	800529a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8005296:	f000 f895 	bl	80053c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	b008      	add	sp, #32
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	2000042c 	.word	0x2000042c

080052a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80052ac:	4b23      	ldr	r3, [pc, #140]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052ae:	4a24      	ldr	r2, [pc, #144]	; (8005340 <MX_USART1_UART_Init+0x98>)
 80052b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80052b2:	4b22      	ldr	r3, [pc, #136]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052b4:	22e1      	movs	r2, #225	; 0xe1
 80052b6:	0252      	lsls	r2, r2, #9
 80052b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052bc:	2200      	movs	r2, #0
 80052be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052c0:	4b1e      	ldr	r3, [pc, #120]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052c6:	4b1d      	ldr	r3, [pc, #116]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80052cc:	4b1b      	ldr	r3, [pc, #108]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052ce:	220c      	movs	r2, #12
 80052d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052d2:	4b1a      	ldr	r3, [pc, #104]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80052d8:	4b18      	ldr	r3, [pc, #96]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052da:	2200      	movs	r2, #0
 80052dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052de:	4b17      	ldr	r3, [pc, #92]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80052e4:	4b15      	ldr	r3, [pc, #84]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052ea:	4b14      	ldr	r3, [pc, #80]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80052f0:	4b12      	ldr	r3, [pc, #72]	; (800533c <MX_USART1_UART_Init+0x94>)
 80052f2:	0018      	movs	r0, r3
 80052f4:	f003 ff3a 	bl	800916c <HAL_UART_Init>
 80052f8:	1e03      	subs	r3, r0, #0
 80052fa:	d001      	beq.n	8005300 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80052fc:	f000 f862 	bl	80053c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005300:	4b0e      	ldr	r3, [pc, #56]	; (800533c <MX_USART1_UART_Init+0x94>)
 8005302:	2100      	movs	r1, #0
 8005304:	0018      	movs	r0, r3
 8005306:	f005 fa89 	bl	800a81c <HAL_UARTEx_SetTxFifoThreshold>
 800530a:	1e03      	subs	r3, r0, #0
 800530c:	d001      	beq.n	8005312 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800530e:	f000 f859 	bl	80053c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005312:	4b0a      	ldr	r3, [pc, #40]	; (800533c <MX_USART1_UART_Init+0x94>)
 8005314:	2100      	movs	r1, #0
 8005316:	0018      	movs	r0, r3
 8005318:	f005 fac0 	bl	800a89c <HAL_UARTEx_SetRxFifoThreshold>
 800531c:	1e03      	subs	r3, r0, #0
 800531e:	d001      	beq.n	8005324 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005320:	f000 f850 	bl	80053c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <MX_USART1_UART_Init+0x94>)
 8005326:	0018      	movs	r0, r3
 8005328:	f005 fa3e 	bl	800a7a8 <HAL_UARTEx_DisableFifoMode>
 800532c:	1e03      	subs	r3, r0, #0
 800532e:	d001      	beq.n	8005334 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005330:	f000 f848 	bl	80053c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005334:	46c0      	nop			; (mov r8, r8)
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	20000478 	.word	0x20000478
 8005340:	40013800 	.word	0x40013800

08005344 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800534a:	4b0c      	ldr	r3, [pc, #48]	; (800537c <MX_DMA_Init+0x38>)
 800534c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800534e:	4b0b      	ldr	r3, [pc, #44]	; (800537c <MX_DMA_Init+0x38>)
 8005350:	2101      	movs	r1, #1
 8005352:	430a      	orrs	r2, r1
 8005354:	639a      	str	r2, [r3, #56]	; 0x38
 8005356:	4b09      	ldr	r3, [pc, #36]	; (800537c <MX_DMA_Init+0x38>)
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	2201      	movs	r2, #1
 800535c:	4013      	ands	r3, r2
 800535e:	607b      	str	r3, [r7, #4]
 8005360:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005362:	2200      	movs	r2, #0
 8005364:	2100      	movs	r1, #0
 8005366:	2009      	movs	r0, #9
 8005368:	f001 fdba 	bl	8006ee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800536c:	2009      	movs	r0, #9
 800536e:	f001 fdcc 	bl	8006f0a <HAL_NVIC_EnableIRQ>

}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	46bd      	mov	sp, r7
 8005376:	b002      	add	sp, #8
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	40021000 	.word	0x40021000

08005380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005386:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <MX_GPIO_Init+0x40>)
 8005388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538a:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <MX_GPIO_Init+0x40>)
 800538c:	2120      	movs	r1, #32
 800538e:	430a      	orrs	r2, r1
 8005390:	635a      	str	r2, [r3, #52]	; 0x34
 8005392:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <MX_GPIO_Init+0x40>)
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	2220      	movs	r2, #32
 8005398:	4013      	ands	r3, r2
 800539a:	607b      	str	r3, [r7, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800539e:	4b08      	ldr	r3, [pc, #32]	; (80053c0 <MX_GPIO_Init+0x40>)
 80053a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <MX_GPIO_Init+0x40>)
 80053a4:	2101      	movs	r1, #1
 80053a6:	430a      	orrs	r2, r1
 80053a8:	635a      	str	r2, [r3, #52]	; 0x34
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <MX_GPIO_Init+0x40>)
 80053ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ae:	2201      	movs	r2, #1
 80053b0:	4013      	ands	r3, r2
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	683b      	ldr	r3, [r7, #0]

}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	46bd      	mov	sp, r7
 80053ba:	b002      	add	sp, #8
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	40021000 	.word	0x40021000

080053c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80053c8:	b672      	cpsid	i
}
 80053ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80053cc:	e7fe      	b.n	80053cc <Error_Handler+0x8>
	...

080053d0 <mainTask>:
uint32_t freq_total01 =0,freq_total02 =0;

uint32_t time_=0;


int mainTask(void) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
	setup();
 80053d4:	f000 f836 	bl	8005444 <setup>

	while (1) {
		if(((uint32_t)(g_appConfig.miliCount - time_)) > 100){
 80053d8:	4b16      	ldr	r3, [pc, #88]	; (8005434 <mainTask+0x64>)
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b16      	ldr	r3, [pc, #88]	; (8005438 <mainTask+0x68>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b64      	cmp	r3, #100	; 0x64
 80053e4:	d905      	bls.n	80053f2 <mainTask+0x22>
			Lsm6ds3_printRotationAngles();
 80053e6:	f7ff fdc7 	bl	8004f78 <Lsm6ds3_printRotationAngles>
			time_ = g_appConfig.miliCount;
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <mainTask+0x64>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4b12      	ldr	r3, [pc, #72]	; (8005438 <mainTask+0x68>)
 80053f0:	601a      	str	r2, [r3, #0]
		}

///////////////////////////////////////////////////
#if USING_EMA
		com1Update();
 80053f2:	f000 f8dd 	bl	80055b0 <com1Update>
		if (g_appConfig.wirteConfigNow) {
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <mainTask+0x64>)
 80053f8:	7c9b      	ldrb	r3, [r3, #18]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d008      	beq.n	8005410 <mainTask+0x40>
			g_appConfig.wirteConfigNow = 0;
 80053fe:	4b0d      	ldr	r3, [pc, #52]	; (8005434 <mainTask+0x64>)
 8005400:	2200      	movs	r2, #0
 8005402:	749a      	strb	r2, [r3, #18]
			printf("SKS_OIL_SENSOR wirte now\r\n");
 8005404:	4b0d      	ldr	r3, [pc, #52]	; (800543c <mainTask+0x6c>)
 8005406:	0018      	movs	r0, r3
 8005408:	f006 f88c 	bl	800b524 <puts>
			write_config();
 800540c:	f7ff fab8 	bl	8004980 <write_config>
		}

		handlerSensorData();
 8005410:	f000 f900 	bl	8005614 <handlerSensorData>
		if ((uint32_t) (g_appConfig.miliCount - g_appConfig.lastRaise)
 8005414:	4b07      	ldr	r3, [pc, #28]	; (8005434 <mainTask+0x64>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <mainTask+0x64>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	1ad2      	subs	r2, r2, r3
				>= sensorConfig.update_freq) {
 800541e:	4b08      	ldr	r3, [pc, #32]	; (8005440 <mainTask+0x70>)
 8005420:	685b      	ldr	r3, [r3, #4]
		if ((uint32_t) (g_appConfig.miliCount - g_appConfig.lastRaise)
 8005422:	429a      	cmp	r2, r3
 8005424:	d3d8      	bcc.n	80053d8 <mainTask+0x8>
			g_appConfig.lastRaise = g_appConfig.miliCount;
 8005426:	4b03      	ldr	r3, [pc, #12]	; (8005434 <mainTask+0x64>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b02      	ldr	r3, [pc, #8]	; (8005434 <mainTask+0x64>)
 800542c:	60da      	str	r2, [r3, #12]
			displaySensorData();
 800542e:	f000 faa1 	bl	8005974 <displaySensorData>
		if(((uint32_t)(g_appConfig.miliCount - time_)) > 100){
 8005432:	e7d1      	b.n	80053d8 <mainTask+0x8>
 8005434:	200005b0 	.word	0x200005b0
 8005438:	200008e0 	.word	0x200008e0
 800543c:	0800e150 	.word	0x0800e150
 8005440:	20000568 	.word	0x20000568

08005444 <setup>:
#endif
	}
	return 0;
}

static void setup(void){
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8005448:	f7ff fb60 	bl	8004b0c <MX_GPIO_Init>
	SPI2_LowLevel_Init();
 800544c:	f7ff f828 	bl	80044a0 <SPI2_LowLevel_Init>
	SPIx_Init(SPI2);
 8005450:	4b23      	ldr	r3, [pc, #140]	; (80054e0 <setup+0x9c>)
 8005452:	0018      	movs	r0, r3
 8005454:	f7ff f8a4 	bl	80045a0 <SPIx_Init>

//	xdev_out(HAL_UART_Transmit(&huart1, pData, Size, Timeout));

	/* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 8005458:	23fa      	movs	r3, #250	; 0xfa
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	0018      	movs	r0, r3
 800545e:	f000 fff1 	bl	8006444 <HAL_Delay>
//	printf("Wait install madgwick\r\n");
	xprintf("Wait install madgwick\r\n");
 8005462:	4b20      	ldr	r3, [pc, #128]	; (80054e4 <setup+0xa0>)
 8005464:	0018      	movs	r0, r3
 8005466:	f000 ff29 	bl	80062bc <xprintf>
	Madgwick_init(SAMPLE_RATE);
 800546a:	4b1f      	ldr	r3, [pc, #124]	; (80054e8 <setup+0xa4>)
 800546c:	1c18      	adds	r0, r3, #0
 800546e:	f7fd ffbb 	bl	80033e8 <Madgwick_init>
	printf("Install Madgwick successfully\r\n");
 8005472:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <setup+0xa8>)
 8005474:	0018      	movs	r0, r3
 8005476:	f006 f855 	bl	800b524 <puts>
	HAL_Delay(1000);
 800547a:	23fa      	movs	r3, #250	; 0xfa
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	0018      	movs	r0, r3
 8005480:	f000 ffe0 	bl	8006444 <HAL_Delay>
	/* Initialize mems driver interface */
	printf("Wait install LSM6DS3\r\n");
 8005484:	4b1a      	ldr	r3, [pc, #104]	; (80054f0 <setup+0xac>)
 8005486:	0018      	movs	r0, r3
 8005488:	f006 f84c 	bl	800b524 <puts>
	if (!Lsm6ds3_int()) {
 800548c:	f7ff fb90 	bl	8004bb0 <Lsm6ds3_int>
 8005490:	1e03      	subs	r3, r0, #0
 8005492:	d104      	bne.n	800549e <setup+0x5a>
		printf("LSM6DS3 installation failed\r\n");
 8005494:	4b17      	ldr	r3, [pc, #92]	; (80054f4 <setup+0xb0>)
 8005496:	0018      	movs	r0, r3
 8005498:	f006 f844 	bl	800b524 <puts>
		while (1);
 800549c:	e7fe      	b.n	800549c <setup+0x58>
	}
	printf("Install LSM6DS3 successfully\r\n");
 800549e:	4b16      	ldr	r3, [pc, #88]	; (80054f8 <setup+0xb4>)
 80054a0:	0018      	movs	r0, r3
 80054a2:	f006 f83f 	bl	800b524 <puts>
	HAL_Delay(1000);
 80054a6:	23fa      	movs	r3, #250	; 0xfa
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	0018      	movs	r0, r3
 80054ac:	f000 ffca 	bl	8006444 <HAL_Delay>
////////////////////////////////////////////////////////
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4);
 80054b0:	4b12      	ldr	r3, [pc, #72]	; (80054fc <setup+0xb8>)
 80054b2:	210c      	movs	r1, #12
 80054b4:	0018      	movs	r0, r3
 80054b6:	f003 f8c7 	bl	8008648 <HAL_TIM_IC_Start_IT>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) com1.buf,
 80054ba:	4911      	ldr	r1, [pc, #68]	; (8005500 <setup+0xbc>)
 80054bc:	4b11      	ldr	r3, [pc, #68]	; (8005504 <setup+0xc0>)
 80054be:	2280      	movs	r2, #128	; 0x80
 80054c0:	0018      	movs	r0, r3
 80054c2:	f005 fa2d 	bl	800a920 <HAL_UARTEx_ReceiveToIdle_DMA>
	RX_BUF_LEN);
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80054c6:	4b10      	ldr	r3, [pc, #64]	; (8005508 <setup+0xc4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <setup+0xc4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2104      	movs	r1, #4
 80054d2:	438a      	bics	r2, r1
 80054d4:	601a      	str	r2, [r3, #0]
	load_config();
 80054d6:	f7ff fabf 	bl	8004a58 <load_config>
}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40003800 	.word	0x40003800
 80054e4:	0800e16c 	.word	0x0800e16c
 80054e8:	41200000 	.word	0x41200000
 80054ec:	0800e184 	.word	0x0800e184
 80054f0:	0800e1a4 	.word	0x0800e1a4
 80054f4:	0800e1bc 	.word	0x0800e1bc
 80054f8:	0800e1dc 	.word	0x0800e1dc
 80054fc:	2000042c 	.word	0x2000042c
 8005500:	200007dc 	.word	0x200007dc
 8005504:	20000478 	.word	0x20000478
 8005508:	2000050c 	.word	0x2000050c

0800550c <HAL_TIM_IC_CaptureCallback>:
	adcVal[1] = HAL_ADC_GetValue(&hadc1);
#endif

}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]

	if (TIM2 == htim->Instance)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	05db      	lsls	r3, r3, #23
 800551c:	429a      	cmp	r2, r3
 800551e:	d13a      	bne.n	8005596 <HAL_TIM_IC_CaptureCallback+0x8a>
	{
		if (HAL_TIM_ACTIVE_CHANNEL_4 == htim->Channel) {
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	7f1b      	ldrb	r3, [r3, #28]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d136      	bne.n	8005596 <HAL_TIM_IC_CaptureCallback+0x8a>
					if (!sensorCapture.isFirstCap) {
 8005528:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 800552a:	791b      	ldrb	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10c      	bne.n	800554a <HAL_TIM_IC_CaptureCallback+0x3e>
						sensorCapture.IC1_VAL = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	210c      	movs	r1, #12
 8005534:	0018      	movs	r0, r3
 8005536:	f003 fb8d 	bl	8008c54 <HAL_TIM_ReadCapturedValue>
 800553a:	0003      	movs	r3, r0
 800553c:	b29a      	uxth	r2, r3
 800553e:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8005540:	801a      	strh	r2, [r3, #0]
						sensorCapture.isFirstCap = 1;
 8005542:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8005544:	2201      	movs	r2, #1
 8005546:	711a      	strb	r2, [r3, #4]
						__HAL_TIM_SET_COUNTER(&htim2, 0);
						sensorCapture.isFirstCap = 0;
					}
				}
	}
}
 8005548:	e025      	b.n	8005596 <HAL_TIM_IC_CaptureCallback+0x8a>
						sensorCapture.IC2_VAL = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	210c      	movs	r1, #12
 800554e:	0018      	movs	r0, r3
 8005550:	f003 fb80 	bl	8008c54 <HAL_TIM_ReadCapturedValue>
 8005554:	0003      	movs	r3, r0
 8005556:	b29a      	uxth	r2, r3
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 800555a:	805a      	strh	r2, [r3, #2]
						sensorCapture.diffirent = (uint32_t) (sensorCapture.IC2_VAL - sensorCapture.IC1_VAL);
 800555c:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 800555e:	885a      	ldrh	r2, [r3, #2]
 8005560:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	b29a      	uxth	r2, r3
 8005568:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 800556a:	80da      	strh	r2, [r3, #6]
						sensorCapture.freq = TIM2_FREQ / sensorCapture.diffirent;
 800556c:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 800556e:	88db      	ldrh	r3, [r3, #6]
 8005570:	0019      	movs	r1, r3
 8005572:	480c      	ldr	r0, [pc, #48]	; (80055a4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8005574:	f7fa fdec 	bl	8000150 <__udivsi3>
 8005578:	0003      	movs	r3, r0
 800557a:	001a      	movs	r2, r3
 800557c:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 800557e:	609a      	str	r2, [r3, #8]
						sensorCapture.freq_update =1;
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8005582:	4a09      	ldr	r2, [pc, #36]	; (80055a8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8005584:	2101      	movs	r1, #1
 8005586:	5499      	strb	r1, [r3, r2]
						__HAL_TIM_SET_COUNTER(&htim2, 0);
 8005588:	4b08      	ldr	r3, [pc, #32]	; (80055ac <HAL_TIM_IC_CaptureCallback+0xa0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2200      	movs	r2, #0
 800558e:	625a      	str	r2, [r3, #36]	; 0x24
						sensorCapture.isFirstCap = 0;
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8005592:	2200      	movs	r2, #0
 8005594:	711a      	strb	r2, [r3, #4]
}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	46bd      	mov	sp, r7
 800559a:	b002      	add	sp, #8
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	200005c4 	.word	0x200005c4
 80055a4:	03d09000 	.word	0x03d09000
 80055a8:	00000212 	.word	0x00000212
 80055ac:	2000042c 	.word	0x2000042c

080055b0 <com1Update>:

static void com1Update(void) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
	if (com1.len) {
 80055b4:	4b14      	ldr	r3, [pc, #80]	; (8005608 <com1Update+0x58>)
 80055b6:	2280      	movs	r2, #128	; 0x80
 80055b8:	5a9b      	ldrh	r3, [r3, r2]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01f      	beq.n	8005600 <com1Update+0x50>
		cmd_len = com1.len;
 80055c0:	4b11      	ldr	r3, [pc, #68]	; (8005608 <com1Update+0x58>)
 80055c2:	2280      	movs	r2, #128	; 0x80
 80055c4:	5a9b      	ldrh	r3, [r3, r2]
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	4b10      	ldr	r3, [pc, #64]	; (800560c <com1Update+0x5c>)
 80055ca:	801a      	strh	r2, [r3, #0]
		com1.len = 0;
 80055cc:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <com1Update+0x58>)
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	2100      	movs	r1, #0
 80055d2:	5299      	strh	r1, [r3, r2]
		memset(cmd_buf, 0, RX_BUF_LEN);
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <com1Update+0x60>)
 80055d6:	2280      	movs	r2, #128	; 0x80
 80055d8:	2100      	movs	r1, #0
 80055da:	0018      	movs	r0, r3
 80055dc:	f005 fa9f 	bl	800ab1e <memset>
		memcpy(cmd_buf, com1.buf, cmd_len);
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <com1Update+0x5c>)
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	001a      	movs	r2, r3
 80055e6:	4908      	ldr	r1, [pc, #32]	; (8005608 <com1Update+0x58>)
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <com1Update+0x60>)
 80055ea:	0018      	movs	r0, r3
 80055ec:	f005 fa8e 	bl	800ab0c <memcpy>
		server_on_command(1, cmd_buf, cmd_len);
 80055f0:	4b06      	ldr	r3, [pc, #24]	; (800560c <com1Update+0x5c>)
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	001a      	movs	r2, r3
 80055f6:	4b06      	ldr	r3, [pc, #24]	; (8005610 <com1Update+0x60>)
 80055f8:	0019      	movs	r1, r3
 80055fa:	2001      	movs	r0, #1
 80055fc:	f7fe fd88 	bl	8004110 <server_on_command>
	}
}
 8005600:	46c0      	nop			; (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	200007dc 	.word	0x200007dc
 800560c:	2000085e 	.word	0x2000085e
 8005610:	20000860 	.word	0x20000860

08005614 <handlerSensorData>:

static void handlerSensorData(void) {
 8005614:	b5b0      	push	{r4, r5, r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
	uint32_t tmp_sensor = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]

	if (sensorCapture.freq_update) { //pick up data
 800561e:	4bc6      	ldr	r3, [pc, #792]	; (8005938 <handlerSensorData+0x324>)
 8005620:	4ac6      	ldr	r2, [pc, #792]	; (800593c <handlerSensorData+0x328>)
 8005622:	5c9b      	ldrb	r3, [r3, r2]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d100      	bne.n	800562a <handlerSensorData+0x16>
 8005628:	e182      	b.n	8005930 <handlerSensorData+0x31c>
		sensorCapture.freq_update = 0;
 800562a:	4bc3      	ldr	r3, [pc, #780]	; (8005938 <handlerSensorData+0x324>)
 800562c:	4ac3      	ldr	r2, [pc, #780]	; (800593c <handlerSensorData+0x328>)
 800562e:	2100      	movs	r1, #0
 8005630:	5499      	strb	r1, [r3, r2]
		if (!sensorCapture.freq) {
 8005632:	4bc1      	ldr	r3, [pc, #772]	; (8005938 <handlerSensorData+0x324>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d104      	bne.n	8005644 <handlerSensorData+0x30>
			sensorAttr.errors = UNDER_FULL_FREQ;
 800563a:	4bc1      	ldr	r3, [pc, #772]	; (8005940 <handlerSensorData+0x32c>)
 800563c:	2234      	movs	r2, #52	; 0x34
 800563e:	2102      	movs	r1, #2
 8005640:	5499      	strb	r1, [r3, r2]
			return;
 8005642:	e175      	b.n	8005930 <handlerSensorData+0x31c>
		}
		if ((sensor_avg.idx < sensor_avg.preiod)) {
 8005644:	4bbf      	ldr	r3, [pc, #764]	; (8005944 <handlerSensorData+0x330>)
 8005646:	791a      	ldrb	r2, [r3, #4]
 8005648:	4bbe      	ldr	r3, [pc, #760]	; (8005944 <handlerSensorData+0x330>)
 800564a:	795b      	ldrb	r3, [r3, #5]
 800564c:	429a      	cmp	r2, r3
 800564e:	d20d      	bcs.n	800566c <handlerSensorData+0x58>
			sensor_avg.sum += sensorCapture.freq;
 8005650:	4bbc      	ldr	r3, [pc, #752]	; (8005944 <handlerSensorData+0x330>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4bb8      	ldr	r3, [pc, #736]	; (8005938 <handlerSensorData+0x324>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	18d2      	adds	r2, r2, r3
 800565a:	4bba      	ldr	r3, [pc, #744]	; (8005944 <handlerSensorData+0x330>)
 800565c:	601a      	str	r2, [r3, #0]
			sensor_avg.idx++;
 800565e:	4bb9      	ldr	r3, [pc, #740]	; (8005944 <handlerSensorData+0x330>)
 8005660:	791b      	ldrb	r3, [r3, #4]
 8005662:	3301      	adds	r3, #1
 8005664:	b2da      	uxtb	r2, r3
 8005666:	4bb7      	ldr	r3, [pc, #732]	; (8005944 <handlerSensorData+0x330>)
 8005668:	711a      	strb	r2, [r3, #4]
			return;
 800566a:	e161      	b.n	8005930 <handlerSensorData+0x31c>
		} else {
			sensorCapture.time++;
 800566c:	4ab2      	ldr	r2, [pc, #712]	; (8005938 <handlerSensorData+0x324>)
 800566e:	2385      	movs	r3, #133	; 0x85
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	58d3      	ldr	r3, [r2, r3]
 8005674:	1c59      	adds	r1, r3, #1
 8005676:	4ab0      	ldr	r2, [pc, #704]	; (8005938 <handlerSensorData+0x324>)
 8005678:	2385      	movs	r3, #133	; 0x85
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	50d1      	str	r1, [r2, r3]
			tmp_sensor = sensor_avg.sum / sensor_avg.preiod;
 800567e:	4bb1      	ldr	r3, [pc, #708]	; (8005944 <handlerSensorData+0x330>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4bb0      	ldr	r3, [pc, #704]	; (8005944 <handlerSensorData+0x330>)
 8005684:	795b      	ldrb	r3, [r3, #5]
 8005686:	0019      	movs	r1, r3
 8005688:	0010      	movs	r0, r2
 800568a:	f7fa fd61 	bl	8000150 <__udivsi3>
 800568e:	0003      	movs	r3, r0
 8005690:	61fb      	str	r3, [r7, #28]
			addStock((float) tmp_sensor, &SensorEMA10);
 8005692:	69f8      	ldr	r0, [r7, #28]
 8005694:	f7fb fea4 	bl	80013e0 <__aeabi_ui2f>
 8005698:	1c03      	adds	r3, r0, #0
 800569a:	1c18      	adds	r0, r3, #0
 800569c:	f7fd fcc8 	bl	8003030 <__aeabi_f2d>
 80056a0:	4ba9      	ldr	r3, [pc, #676]	; (8005948 <handlerSensorData+0x334>)
 80056a2:	001a      	movs	r2, r3
 80056a4:	f7fd fe32 	bl	800330c <addStock>
			sensor_avg.sum = 0;
 80056a8:	4ba6      	ldr	r3, [pc, #664]	; (8005944 <handlerSensorData+0x330>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
			sensor_avg.idx = 0;
 80056ae:	4ba5      	ldr	r3, [pc, #660]	; (8005944 <handlerSensorData+0x330>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	711a      	strb	r2, [r3, #4]
			//}
			//if ((uint32_t) (g_appConfig.miliCount - sensorAttr.lastRasie) > 100)
			//{

			sensorAttr.lastRasie = g_appConfig.miliCount;
 80056b4:	4ba5      	ldr	r3, [pc, #660]	; (800594c <handlerSensorData+0x338>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	4ba1      	ldr	r3, [pc, #644]	; (8005940 <handlerSensorData+0x32c>)
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
			if (tmp_sensor < (uint32_t) (sensorConfig.full * 0.9)) {
 80056bc:	4ba4      	ldr	r3, [pc, #656]	; (8005950 <handlerSensorData+0x33c>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	0018      	movs	r0, r3
 80056c2:	f7fd fc8f 	bl	8002fe4 <__aeabi_ui2d>
 80056c6:	4aa3      	ldr	r2, [pc, #652]	; (8005954 <handlerSensorData+0x340>)
 80056c8:	4ba3      	ldr	r3, [pc, #652]	; (8005958 <handlerSensorData+0x344>)
 80056ca:	f7fc fe09 	bl	80022e0 <__aeabi_dmul>
 80056ce:	0002      	movs	r2, r0
 80056d0:	000b      	movs	r3, r1
 80056d2:	0010      	movs	r0, r2
 80056d4:	0019      	movs	r1, r3
 80056d6:	f7fa ff49 	bl	800056c <__aeabi_d2uiz>
 80056da:	0002      	movs	r2, r0
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4293      	cmp	r3, r2
 80056e0:	d204      	bcs.n	80056ec <handlerSensorData+0xd8>
				sensorAttr.errors = UNDER_FULL_FREQ;
 80056e2:	4b97      	ldr	r3, [pc, #604]	; (8005940 <handlerSensorData+0x32c>)
 80056e4:	2234      	movs	r2, #52	; 0x34
 80056e6:	2102      	movs	r1, #2
 80056e8:	5499      	strb	r1, [r3, r2]
				return;
 80056ea:	e121      	b.n	8005930 <handlerSensorData+0x31c>
			}
			if (tmp_sensor > (uint32_t) (sensorConfig.empty * 1.1)) {
 80056ec:	4b98      	ldr	r3, [pc, #608]	; (8005950 <handlerSensorData+0x33c>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	0018      	movs	r0, r3
 80056f2:	f7fd fc77 	bl	8002fe4 <__aeabi_ui2d>
 80056f6:	4a99      	ldr	r2, [pc, #612]	; (800595c <handlerSensorData+0x348>)
 80056f8:	4b99      	ldr	r3, [pc, #612]	; (8005960 <handlerSensorData+0x34c>)
 80056fa:	f7fc fdf1 	bl	80022e0 <__aeabi_dmul>
 80056fe:	0002      	movs	r2, r0
 8005700:	000b      	movs	r3, r1
 8005702:	0010      	movs	r0, r2
 8005704:	0019      	movs	r1, r3
 8005706:	f7fa ff31 	bl	800056c <__aeabi_d2uiz>
 800570a:	0002      	movs	r2, r0
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4293      	cmp	r3, r2
 8005710:	d904      	bls.n	800571c <handlerSensorData+0x108>
				sensorAttr.errors = OVER_EMPTY_FREQ;
 8005712:	4b8b      	ldr	r3, [pc, #556]	; (8005940 <handlerSensorData+0x32c>)
 8005714:	2234      	movs	r2, #52	; 0x34
 8005716:	2101      	movs	r1, #1
 8005718:	5499      	strb	r1, [r3, r2]
				return;
 800571a:	e109      	b.n	8005930 <handlerSensorData+0x31c>
			}

			sensorAttr.errors = NO_ERR;
 800571c:	4b88      	ldr	r3, [pc, #544]	; (8005940 <handlerSensorData+0x32c>)
 800571e:	2234      	movs	r2, #52	; 0x34
 8005720:	2100      	movs	r1, #0
 8005722:	5499      	strb	r1, [r3, r2]

			if (sensorCapture.freq > sensorConfig.empty) {
 8005724:	4b84      	ldr	r3, [pc, #528]	; (8005938 <handlerSensorData+0x324>)
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	4b89      	ldr	r3, [pc, #548]	; (8005950 <handlerSensorData+0x33c>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	429a      	cmp	r2, r3
 800572e:	d904      	bls.n	800573a <handlerSensorData+0x126>
				sensorAttr.freq = sensorConfig.empty;
 8005730:	4b87      	ldr	r3, [pc, #540]	; (8005950 <handlerSensorData+0x33c>)
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	4b82      	ldr	r3, [pc, #520]	; (8005940 <handlerSensorData+0x32c>)
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e00d      	b.n	8005756 <handlerSensorData+0x142>
			} else if (sensorCapture.freq < sensorConfig.full) {
 800573a:	4b7f      	ldr	r3, [pc, #508]	; (8005938 <handlerSensorData+0x324>)
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	4b84      	ldr	r3, [pc, #528]	; (8005950 <handlerSensorData+0x33c>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	429a      	cmp	r2, r3
 8005744:	d204      	bcs.n	8005750 <handlerSensorData+0x13c>
				sensorAttr.freq = sensorConfig.full;
 8005746:	4b82      	ldr	r3, [pc, #520]	; (8005950 <handlerSensorData+0x33c>)
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	4b7d      	ldr	r3, [pc, #500]	; (8005940 <handlerSensorData+0x32c>)
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	e002      	b.n	8005756 <handlerSensorData+0x142>
			} else {
				sensorAttr.freq = tmp_sensor;
 8005750:	4b7b      	ldr	r3, [pc, #492]	; (8005940 <handlerSensorData+0x32c>)
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	601a      	str	r2, [r3, #0]
			}

			//sensorAttr.freq = sensorCapture.freq;

			if (sensorAttr.freq >= sensorAttr.last_freq)
 8005756:	4b7a      	ldr	r3, [pc, #488]	; (8005940 <handlerSensorData+0x32c>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b79      	ldr	r3, [pc, #484]	; (8005940 <handlerSensorData+0x32c>)
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	429a      	cmp	r2, r3
 8005760:	d30d      	bcc.n	800577e <handlerSensorData+0x16a>
				sensorAttr.dif = sensorAttr.freq
 8005762:	4b77      	ldr	r3, [pc, #476]	; (8005940 <handlerSensorData+0x32c>)
 8005764:	681c      	ldr	r4, [r3, #0]
						- (uint32_t) sensorAttr.last_ema_freq;
 8005766:	4b76      	ldr	r3, [pc, #472]	; (8005940 <handlerSensorData+0x32c>)
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	0010      	movs	r0, r2
 800576e:	0019      	movs	r1, r3
 8005770:	f7fa fefc 	bl	800056c <__aeabi_d2uiz>
 8005774:	0003      	movs	r3, r0
 8005776:	1ae2      	subs	r2, r4, r3
				sensorAttr.dif = sensorAttr.freq
 8005778:	4b71      	ldr	r3, [pc, #452]	; (8005940 <handlerSensorData+0x32c>)
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	e00c      	b.n	8005798 <handlerSensorData+0x184>
			else
				sensorAttr.dif = (uint32_t) sensorAttr.last_ema_freq
 800577e:	4b70      	ldr	r3, [pc, #448]	; (8005940 <handlerSensorData+0x32c>)
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	0010      	movs	r0, r2
 8005786:	0019      	movs	r1, r3
 8005788:	f7fa fef0 	bl	800056c <__aeabi_d2uiz>
 800578c:	0002      	movs	r2, r0
						- sensorAttr.freq;
 800578e:	4b6c      	ldr	r3, [pc, #432]	; (8005940 <handlerSensorData+0x32c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	1ad2      	subs	r2, r2, r3
				sensorAttr.dif = (uint32_t) sensorAttr.last_ema_freq
 8005794:	4b6a      	ldr	r3, [pc, #424]	; (8005940 <handlerSensorData+0x32c>)
 8005796:	609a      	str	r2, [r3, #8]

			if ((sensorAttr.dif > (uint32_t) (sensorAttr.last_freq / 10))
 8005798:	4b69      	ldr	r3, [pc, #420]	; (8005940 <handlerSensorData+0x32c>)
 800579a:	689c      	ldr	r4, [r3, #8]
 800579c:	4b68      	ldr	r3, [pc, #416]	; (8005940 <handlerSensorData+0x32c>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	210a      	movs	r1, #10
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7fa fcd4 	bl	8000150 <__udivsi3>
 80057a8:	0003      	movs	r3, r0
 80057aa:	429c      	cmp	r4, r3
 80057ac:	d90e      	bls.n	80057cc <handlerSensorData+0x1b8>
					&& (sensorAttr.cut_off < 10)
 80057ae:	4b64      	ldr	r3, [pc, #400]	; (8005940 <handlerSensorData+0x32c>)
 80057b0:	899b      	ldrh	r3, [r3, #12]
 80057b2:	2b09      	cmp	r3, #9
 80057b4:	d80a      	bhi.n	80057cc <handlerSensorData+0x1b8>
					&& (sensorAttr.last_freq != 0)) {
 80057b6:	4b62      	ldr	r3, [pc, #392]	; (8005940 <handlerSensorData+0x32c>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d006      	beq.n	80057cc <handlerSensorData+0x1b8>
				//skip
				sensorAttr.cut_off++;
 80057be:	4b60      	ldr	r3, [pc, #384]	; (8005940 <handlerSensorData+0x32c>)
 80057c0:	899b      	ldrh	r3, [r3, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	4b5e      	ldr	r3, [pc, #376]	; (8005940 <handlerSensorData+0x32c>)
 80057c8:	819a      	strh	r2, [r3, #12]
				return;
 80057ca:	e0b1      	b.n	8005930 <handlerSensorData+0x31c>
			} else {
				//use this data
				addStock(sensorAttr.freq, &SensorEMA5);
 80057cc:	4b5c      	ldr	r3, [pc, #368]	; (8005940 <handlerSensorData+0x32c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7fd fc07 	bl	8002fe4 <__aeabi_ui2d>
 80057d6:	4b63      	ldr	r3, [pc, #396]	; (8005964 <handlerSensorData+0x350>)
 80057d8:	001a      	movs	r2, r3
 80057da:	f7fd fd97 	bl	800330c <addStock>
				sensorAttr.cut_off = 0;
 80057de:	4b58      	ldr	r3, [pc, #352]	; (8005940 <handlerSensorData+0x32c>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	819a      	strh	r2, [r3, #12]
				sensorAttr.last_freq = sensorAttr.freq;
 80057e4:	4b56      	ldr	r3, [pc, #344]	; (8005940 <handlerSensorData+0x32c>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	4b55      	ldr	r3, [pc, #340]	; (8005940 <handlerSensorData+0x32c>)
 80057ea:	605a      	str	r2, [r3, #4]
			}

			sensorAttr.ema_freq = getAverage();
 80057ec:	f7fd fdc8 	bl	8003380 <getAverage>
 80057f0:	0002      	movs	r2, r0
 80057f2:	000b      	movs	r3, r1
 80057f4:	4952      	ldr	r1, [pc, #328]	; (8005940 <handlerSensorData+0x32c>)
 80057f6:	610a      	str	r2, [r1, #16]
 80057f8:	614b      	str	r3, [r1, #20]

			if (sensorAttr.ema_freq >= sensorConfig.empty) {
 80057fa:	4b51      	ldr	r3, [pc, #324]	; (8005940 <handlerSensorData+0x32c>)
 80057fc:	691c      	ldr	r4, [r3, #16]
 80057fe:	695d      	ldr	r5, [r3, #20]
 8005800:	4b53      	ldr	r3, [pc, #332]	; (8005950 <handlerSensorData+0x33c>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	0018      	movs	r0, r3
 8005806:	f7fd fbed 	bl	8002fe4 <__aeabi_ui2d>
 800580a:	0002      	movs	r2, r0
 800580c:	000b      	movs	r3, r1
 800580e:	0020      	movs	r0, r4
 8005810:	0029      	movs	r1, r5
 8005812:	f7fa fe47 	bl	80004a4 <__aeabi_dcmpge>
 8005816:	1e03      	subs	r3, r0, #0
 8005818:	d012      	beq.n	8005840 <handlerSensorData+0x22c>

				sensorAttr.ema_freq = sensorConfig.empty;
 800581a:	4b4d      	ldr	r3, [pc, #308]	; (8005950 <handlerSensorData+0x33c>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	0018      	movs	r0, r3
 8005820:	f7fd fbe0 	bl	8002fe4 <__aeabi_ui2d>
 8005824:	0002      	movs	r2, r0
 8005826:	000b      	movs	r3, r1
 8005828:	4945      	ldr	r1, [pc, #276]	; (8005940 <handlerSensorData+0x32c>)
 800582a:	610a      	str	r2, [r1, #16]
 800582c:	614b      	str	r3, [r1, #20]
				sensorAttr.NF = 0;
 800582e:	4944      	ldr	r1, [pc, #272]	; (8005940 <handlerSensorData+0x32c>)
 8005830:	2200      	movs	r2, #0
 8005832:	2300      	movs	r3, #0
 8005834:	620a      	str	r2, [r1, #32]
 8005836:	624b      	str	r3, [r1, #36]	; 0x24
				sensorAttr.N = 0;
 8005838:	4b41      	ldr	r3, [pc, #260]	; (8005940 <handlerSensorData+0x32c>)
 800583a:	2200      	movs	r2, #0
 800583c:	851a      	strh	r2, [r3, #40]	; 0x28
 800583e:	e077      	b.n	8005930 <handlerSensorData+0x31c>

			} else if (sensorAttr.ema_freq <= sensorConfig.full) {
 8005840:	4b3f      	ldr	r3, [pc, #252]	; (8005940 <handlerSensorData+0x32c>)
 8005842:	691c      	ldr	r4, [r3, #16]
 8005844:	695d      	ldr	r5, [r3, #20]
 8005846:	4b42      	ldr	r3, [pc, #264]	; (8005950 <handlerSensorData+0x33c>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	0018      	movs	r0, r3
 800584c:	f7fd fbca 	bl	8002fe4 <__aeabi_ui2d>
 8005850:	0002      	movs	r2, r0
 8005852:	000b      	movs	r3, r1
 8005854:	0020      	movs	r0, r4
 8005856:	0029      	movs	r1, r5
 8005858:	f7fa fe10 	bl	800047c <__aeabi_dcmple>
 800585c:	1e03      	subs	r3, r0, #0
 800585e:	d012      	beq.n	8005886 <handlerSensorData+0x272>

				sensorAttr.ema_freq = sensorConfig.full;
 8005860:	4b3b      	ldr	r3, [pc, #236]	; (8005950 <handlerSensorData+0x33c>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	0018      	movs	r0, r3
 8005866:	f7fd fbbd 	bl	8002fe4 <__aeabi_ui2d>
 800586a:	0002      	movs	r2, r0
 800586c:	000b      	movs	r3, r1
 800586e:	4934      	ldr	r1, [pc, #208]	; (8005940 <handlerSensorData+0x32c>)
 8005870:	610a      	str	r2, [r1, #16]
 8005872:	614b      	str	r3, [r1, #20]
				sensorAttr.NF = 1.0;
 8005874:	4932      	ldr	r1, [pc, #200]	; (8005940 <handlerSensorData+0x32c>)
 8005876:	2200      	movs	r2, #0
 8005878:	4b3b      	ldr	r3, [pc, #236]	; (8005968 <handlerSensorData+0x354>)
 800587a:	620a      	str	r2, [r1, #32]
 800587c:	624b      	str	r3, [r1, #36]	; 0x24
				sensorAttr.N = 1023;
 800587e:	4b30      	ldr	r3, [pc, #192]	; (8005940 <handlerSensorData+0x32c>)
 8005880:	4a3a      	ldr	r2, [pc, #232]	; (800596c <handlerSensorData+0x358>)
 8005882:	851a      	strh	r2, [r3, #40]	; 0x28
 8005884:	e054      	b.n	8005930 <handlerSensorData+0x31c>
			} else {

				double Te = (double) (1.0 / (double) sensorConfig.empty);
 8005886:	4b32      	ldr	r3, [pc, #200]	; (8005950 <handlerSensorData+0x33c>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	0018      	movs	r0, r3
 800588c:	f7fd fbaa 	bl	8002fe4 <__aeabi_ui2d>
 8005890:	0002      	movs	r2, r0
 8005892:	000b      	movs	r3, r1
 8005894:	2000      	movs	r0, #0
 8005896:	4934      	ldr	r1, [pc, #208]	; (8005968 <handlerSensorData+0x354>)
 8005898:	f7fc f920 	bl	8001adc <__aeabi_ddiv>
 800589c:	0002      	movs	r2, r0
 800589e:	000b      	movs	r3, r1
 80058a0:	613a      	str	r2, [r7, #16]
 80058a2:	617b      	str	r3, [r7, #20]
				double Tf = (double) (1.0 / (double) sensorConfig.full);
 80058a4:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <handlerSensorData+0x33c>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7fd fb9b 	bl	8002fe4 <__aeabi_ui2d>
 80058ae:	0002      	movs	r2, r0
 80058b0:	000b      	movs	r3, r1
 80058b2:	2000      	movs	r0, #0
 80058b4:	492c      	ldr	r1, [pc, #176]	; (8005968 <handlerSensorData+0x354>)
 80058b6:	f7fc f911 	bl	8001adc <__aeabi_ddiv>
 80058ba:	0002      	movs	r2, r0
 80058bc:	000b      	movs	r3, r1
 80058be:	60ba      	str	r2, [r7, #8]
 80058c0:	60fb      	str	r3, [r7, #12]
				double Tx = (double) (1.0 / sensorAttr.ema_freq);
 80058c2:	4b1f      	ldr	r3, [pc, #124]	; (8005940 <handlerSensorData+0x32c>)
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	2000      	movs	r0, #0
 80058ca:	4927      	ldr	r1, [pc, #156]	; (8005968 <handlerSensorData+0x354>)
 80058cc:	f7fc f906 	bl	8001adc <__aeabi_ddiv>
 80058d0:	0002      	movs	r2, r0
 80058d2:	000b      	movs	r3, r1
 80058d4:	603a      	str	r2, [r7, #0]
 80058d6:	607b      	str	r3, [r7, #4]
				sensorAttr.NF = (double) ((Tx - Te) / (Tf - Te));
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	6838      	ldr	r0, [r7, #0]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	f7fc ff6a 	bl	80027b8 <__aeabi_dsub>
 80058e4:	0002      	movs	r2, r0
 80058e6:	000b      	movs	r3, r1
 80058e8:	0014      	movs	r4, r2
 80058ea:	001d      	movs	r5, r3
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	68b8      	ldr	r0, [r7, #8]
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	f7fc ff60 	bl	80027b8 <__aeabi_dsub>
 80058f8:	0002      	movs	r2, r0
 80058fa:	000b      	movs	r3, r1
 80058fc:	0020      	movs	r0, r4
 80058fe:	0029      	movs	r1, r5
 8005900:	f7fc f8ec 	bl	8001adc <__aeabi_ddiv>
 8005904:	0002      	movs	r2, r0
 8005906:	000b      	movs	r3, r1
 8005908:	490d      	ldr	r1, [pc, #52]	; (8005940 <handlerSensorData+0x32c>)
 800590a:	620a      	str	r2, [r1, #32]
 800590c:	624b      	str	r3, [r1, #36]	; 0x24
				sensorAttr.N = (uint16_t) (sensorAttr.NF * 1023);
 800590e:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <handlerSensorData+0x32c>)
 8005910:	6a18      	ldr	r0, [r3, #32]
 8005912:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005914:	2200      	movs	r2, #0
 8005916:	4b16      	ldr	r3, [pc, #88]	; (8005970 <handlerSensorData+0x35c>)
 8005918:	f7fc fce2 	bl	80022e0 <__aeabi_dmul>
 800591c:	0002      	movs	r2, r0
 800591e:	000b      	movs	r3, r1
 8005920:	0010      	movs	r0, r2
 8005922:	0019      	movs	r1, r3
 8005924:	f7fa fe22 	bl	800056c <__aeabi_d2uiz>
 8005928:	0003      	movs	r3, r0
 800592a:	b29a      	uxth	r2, r3
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <handlerSensorData+0x32c>)
 800592e:	851a      	strh	r2, [r3, #40]	; 0x28
			}

		}
	}

}
 8005930:	46bd      	mov	sp, r7
 8005932:	b008      	add	sp, #32
 8005934:	bdb0      	pop	{r4, r5, r7, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	200005c4 	.word	0x200005c4
 800593c:	00000212 	.word	0x00000212
 8005940:	20000578 	.word	0x20000578
 8005944:	2000008c 	.word	0x2000008c
 8005948:	20000010 	.word	0x20000010
 800594c:	200005b0 	.word	0x200005b0
 8005950:	20000568 	.word	0x20000568
 8005954:	cccccccd 	.word	0xcccccccd
 8005958:	3feccccc 	.word	0x3feccccc
 800595c:	9999999a 	.word	0x9999999a
 8005960:	3ff19999 	.word	0x3ff19999
 8005964:	20000000 	.word	0x20000000
 8005968:	3ff00000 	.word	0x3ff00000
 800596c:	000003ff 	.word	0x000003ff
 8005970:	408ff800 	.word	0x408ff800

08005974 <displaySensorData>:

char buf__[100] = {0};
static void displaySensorData(void) {
 8005974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005976:	46d6      	mov	lr, sl
 8005978:	464f      	mov	r7, r9
 800597a:	4646      	mov	r6, r8
 800597c:	b5c0      	push	{r6, r7, lr}
 800597e:	b096      	sub	sp, #88	; 0x58
 8005980:	af12      	add	r7, sp, #72	; 0x48
//			sensorCapture.freq, ((uint32_t)(sensorAttr.ema_freq)), 0, 0, sensorAttr.N, 0, 0, 0, 0, 0,
//							roll,pitch,yaw,
//							0, 0, 0, 0, 0, 0, 0, 0,
//							0);

	printf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%0.0f y=%0.0f z=%0.0f T=%d E=%x FU=%x EM=%x fM=%d\r\n", sensorCapture.freq, ((uint32_t)sensorAttr.ema_freq), 0, sensorAttr.N, 0, 0, 0, 0, 0,
 8005982:	4b2b      	ldr	r3, [pc, #172]	; (8005a30 <displaySensorData+0xbc>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	4698      	mov	r8, r3
 8005988:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <displaySensorData+0xc0>)
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	0010      	movs	r0, r2
 8005990:	0019      	movs	r1, r3
 8005992:	f7fa fdeb 	bl	800056c <__aeabi_d2uiz>
 8005996:	4681      	mov	r9, r0
 8005998:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <displaySensorData+0xc0>)
 800599a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599c:	469a      	mov	sl, r3
 800599e:	4b26      	ldr	r3, [pc, #152]	; (8005a38 <displaySensorData+0xc4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	1c18      	adds	r0, r3, #0
 80059a4:	f7fd fb44 	bl	8003030 <__aeabi_f2d>
 80059a8:	0004      	movs	r4, r0
 80059aa:	000d      	movs	r5, r1
 80059ac:	4b23      	ldr	r3, [pc, #140]	; (8005a3c <displaySensorData+0xc8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	1c18      	adds	r0, r3, #0
 80059b2:	f7fd fb3d 	bl	8003030 <__aeabi_f2d>
 80059b6:	60b8      	str	r0, [r7, #8]
 80059b8:	60f9      	str	r1, [r7, #12]
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <displaySensorData+0xcc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	1c18      	adds	r0, r3, #0
 80059c0:	f7fd fb36 	bl	8003030 <__aeabi_f2d>
 80059c4:	6038      	str	r0, [r7, #0]
 80059c6:	6079      	str	r1, [r7, #4]
 80059c8:	491e      	ldr	r1, [pc, #120]	; (8005a44 <displaySensorData+0xd0>)
 80059ca:	6888      	ldr	r0, [r1, #8]
 80059cc:	491d      	ldr	r1, [pc, #116]	; (8005a44 <displaySensorData+0xd0>)
 80059ce:	68c9      	ldr	r1, [r1, #12]
 80059d0:	4e1d      	ldr	r6, [pc, #116]	; (8005a48 <displaySensorData+0xd4>)
 80059d2:	2300      	movs	r3, #0
 80059d4:	469c      	mov	ip, r3
 80059d6:	4663      	mov	r3, ip
 80059d8:	9310      	str	r3, [sp, #64]	; 0x40
 80059da:	910f      	str	r1, [sp, #60]	; 0x3c
 80059dc:	900e      	str	r0, [sp, #56]	; 0x38
 80059de:	2100      	movs	r1, #0
 80059e0:	910d      	str	r1, [sp, #52]	; 0x34
 80059e2:	2100      	movs	r1, #0
 80059e4:	910c      	str	r1, [sp, #48]	; 0x30
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	920a      	str	r2, [sp, #40]	; 0x28
 80059ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	9208      	str	r2, [sp, #32]
 80059f4:	9309      	str	r3, [sp, #36]	; 0x24
 80059f6:	9406      	str	r4, [sp, #24]
 80059f8:	9507      	str	r5, [sp, #28]
 80059fa:	2300      	movs	r3, #0
 80059fc:	9305      	str	r3, [sp, #20]
 80059fe:	2300      	movs	r3, #0
 8005a00:	9304      	str	r3, [sp, #16]
 8005a02:	2300      	movs	r3, #0
 8005a04:	9303      	str	r3, [sp, #12]
 8005a06:	2300      	movs	r3, #0
 8005a08:	9302      	str	r3, [sp, #8]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	4653      	mov	r3, sl
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	2300      	movs	r3, #0
 8005a14:	464a      	mov	r2, r9
 8005a16:	4641      	mov	r1, r8
 8005a18:	0030      	movs	r0, r6
 8005a1a:	f005 fcf7 	bl	800b40c <iprintf>
#endif

//	printf("F = %d AF = %d NF = %f N = %d  SF = %d SE = %d t = %d\r\n",
//			sensorCapture.freq, (uint32_t) sensorAttr.ema_freq,sensorAttr.NF,
//			sensorAttr.N, sensorConfig.full, sensorConfig.empty, 0);
}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b004      	add	sp, #16
 8005a24:	bce0      	pop	{r5, r6, r7}
 8005a26:	46ba      	mov	sl, r7
 8005a28:	46b1      	mov	r9, r6
 8005a2a:	46a8      	mov	r8, r5
 8005a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	200005c4 	.word	0x200005c4
 8005a34:	20000578 	.word	0x20000578
 8005a38:	200002a4 	.word	0x200002a4
 8005a3c:	200002a8 	.word	0x200002a8
 8005a40:	200002ac 	.word	0x200002ac
 8005a44:	20000568 	.word	0x20000568
 8005a48:	0800e1fc 	.word	0x0800e1fc

08005a4c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	000a      	movs	r2, r1
 8005a56:	1cbb      	adds	r3, r7, #2
 8005a58:	801a      	strh	r2, [r3, #0]
	if (USART1 == huart->Instance) {
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a0d      	ldr	r2, [pc, #52]	; (8005a94 <HAL_UARTEx_RxEventCallback+0x48>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d112      	bne.n	8005a8a <HAL_UARTEx_RxEventCallback+0x3e>
		com1.len = Size;
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <HAL_UARTEx_RxEventCallback+0x4c>)
 8005a66:	1cba      	adds	r2, r7, #2
 8005a68:	2180      	movs	r1, #128	; 0x80
 8005a6a:	8812      	ldrh	r2, [r2, #0]
 8005a6c:	525a      	strh	r2, [r3, r1]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) com1.buf,
 8005a6e:	490a      	ldr	r1, [pc, #40]	; (8005a98 <HAL_UARTEx_RxEventCallback+0x4c>)
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <HAL_UARTEx_RxEventCallback+0x50>)
 8005a72:	2280      	movs	r2, #128	; 0x80
 8005a74:	0018      	movs	r0, r3
 8005a76:	f004 ff53 	bl	800a920 <HAL_UARTEx_ReceiveToIdle_DMA>
		RX_BUF_LEN);
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8005a7a:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_UARTEx_RxEventCallback+0x54>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <HAL_UARTEx_RxEventCallback+0x54>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2104      	movs	r1, #4
 8005a86:	438a      	bics	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]

	}
}
 8005a8a:	46c0      	nop			; (mov r8, r8)
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b002      	add	sp, #8
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			; (mov r8, r8)
 8005a94:	40013800 	.word	0x40013800
 8005a98:	200007dc 	.word	0x200007dc
 8005a9c:	20000478 	.word	0x20000478
 8005aa0:	2000050c 	.word	0x2000050c

08005aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <HAL_MspInit+0x44>)
 8005aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aae:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <HAL_MspInit+0x44>)
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8005ab6:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <HAL_MspInit+0x44>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	2201      	movs	r2, #1
 8005abc:	4013      	ands	r3, r2
 8005abe:	607b      	str	r3, [r7, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ac2:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <HAL_MspInit+0x44>)
 8005ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ac6:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <HAL_MspInit+0x44>)
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	0549      	lsls	r1, r1, #21
 8005acc:	430a      	orrs	r2, r1
 8005ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ad0:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <HAL_MspInit+0x44>)
 8005ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ad4:	2380      	movs	r3, #128	; 0x80
 8005ad6:	055b      	lsls	r3, r3, #21
 8005ad8:	4013      	ands	r3, r2
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b002      	add	sp, #8
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	40021000 	.word	0x40021000

08005aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b095      	sub	sp, #84	; 0x54
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005af4:	233c      	movs	r3, #60	; 0x3c
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	0018      	movs	r0, r3
 8005afa:	2314      	movs	r3, #20
 8005afc:	001a      	movs	r2, r3
 8005afe:	2100      	movs	r1, #0
 8005b00:	f005 f80d 	bl	800ab1e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b04:	2414      	movs	r4, #20
 8005b06:	193b      	adds	r3, r7, r4
 8005b08:	0018      	movs	r0, r3
 8005b0a:	2328      	movs	r3, #40	; 0x28
 8005b0c:	001a      	movs	r2, r3
 8005b0e:	2100      	movs	r1, #0
 8005b10:	f005 f805 	bl	800ab1e <memset>
  if(hadc->Instance==ADC1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a20      	ldr	r2, [pc, #128]	; (8005b9c <HAL_ADC_MspInit+0xb0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d139      	bne.n	8005b92 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005b1e:	193b      	adds	r3, r7, r4
 8005b20:	2280      	movs	r2, #128	; 0x80
 8005b22:	01d2      	lsls	r2, r2, #7
 8005b24:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8005b26:	193b      	adds	r3, r7, r4
 8005b28:	2200      	movs	r2, #0
 8005b2a:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b2c:	193b      	adds	r3, r7, r4
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f002 fbb8 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8005b34:	1e03      	subs	r3, r0, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8005b38:	f7ff fc44 	bl	80053c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005b3c:	4b18      	ldr	r3, [pc, #96]	; (8005ba0 <HAL_ADC_MspInit+0xb4>)
 8005b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b40:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <HAL_ADC_MspInit+0xb4>)
 8005b42:	2180      	movs	r1, #128	; 0x80
 8005b44:	0349      	lsls	r1, r1, #13
 8005b46:	430a      	orrs	r2, r1
 8005b48:	641a      	str	r2, [r3, #64]	; 0x40
 8005b4a:	4b15      	ldr	r3, [pc, #84]	; (8005ba0 <HAL_ADC_MspInit+0xb4>)
 8005b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b4e:	2380      	movs	r3, #128	; 0x80
 8005b50:	035b      	lsls	r3, r3, #13
 8005b52:	4013      	ands	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b58:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <HAL_ADC_MspInit+0xb4>)
 8005b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b5c:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <HAL_ADC_MspInit+0xb4>)
 8005b5e:	2101      	movs	r1, #1
 8005b60:	430a      	orrs	r2, r1
 8005b62:	635a      	str	r2, [r3, #52]	; 0x34
 8005b64:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <HAL_ADC_MspInit+0xb4>)
 8005b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b68:	2201      	movs	r2, #1
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005b70:	213c      	movs	r1, #60	; 0x3c
 8005b72:	187b      	adds	r3, r7, r1
 8005b74:	2202      	movs	r2, #2
 8005b76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b78:	187b      	adds	r3, r7, r1
 8005b7a:	2203      	movs	r2, #3
 8005b7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7e:	187b      	adds	r3, r7, r1
 8005b80:	2200      	movs	r2, #0
 8005b82:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b84:	187a      	adds	r2, r7, r1
 8005b86:	23a0      	movs	r3, #160	; 0xa0
 8005b88:	05db      	lsls	r3, r3, #23
 8005b8a:	0011      	movs	r1, r2
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f001 fcf7 	bl	8007580 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	46bd      	mov	sp, r7
 8005b96:	b015      	add	sp, #84	; 0x54
 8005b98:	bd90      	pop	{r4, r7, pc}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	40012400 	.word	0x40012400
 8005ba0:	40021000 	.word	0x40021000

08005ba4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8005ba4:	b590      	push	{r4, r7, lr}
 8005ba6:	b08b      	sub	sp, #44	; 0x2c
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bac:	2414      	movs	r4, #20
 8005bae:	193b      	adds	r3, r7, r4
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	2314      	movs	r3, #20
 8005bb4:	001a      	movs	r2, r3
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	f004 ffb1 	bl	800ab1e <memset>
  if(htim_ic->Instance==TIM2)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	05db      	lsls	r3, r3, #23
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d136      	bne.n	8005c36 <HAL_TIM_IC_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005bc8:	4b1d      	ldr	r3, [pc, #116]	; (8005c40 <HAL_TIM_IC_MspInit+0x9c>)
 8005bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bcc:	4b1c      	ldr	r3, [pc, #112]	; (8005c40 <HAL_TIM_IC_MspInit+0x9c>)
 8005bce:	2101      	movs	r1, #1
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8005bd4:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <HAL_TIM_IC_MspInit+0x9c>)
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd8:	2201      	movs	r2, #1
 8005bda:	4013      	ands	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005be0:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <HAL_TIM_IC_MspInit+0x9c>)
 8005be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be4:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <HAL_TIM_IC_MspInit+0x9c>)
 8005be6:	2101      	movs	r1, #1
 8005be8:	430a      	orrs	r2, r1
 8005bea:	635a      	str	r2, [r3, #52]	; 0x34
 8005bec:	4b14      	ldr	r3, [pc, #80]	; (8005c40 <HAL_TIM_IC_MspInit+0x9c>)
 8005bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005bf8:	0021      	movs	r1, r4
 8005bfa:	187b      	adds	r3, r7, r1
 8005bfc:	2208      	movs	r2, #8
 8005bfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c00:	187b      	adds	r3, r7, r1
 8005c02:	2202      	movs	r2, #2
 8005c04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c06:	187b      	adds	r3, r7, r1
 8005c08:	2200      	movs	r2, #0
 8005c0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c0c:	187b      	adds	r3, r7, r1
 8005c0e:	2200      	movs	r2, #0
 8005c10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005c12:	187b      	adds	r3, r7, r1
 8005c14:	2202      	movs	r2, #2
 8005c16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c18:	187a      	adds	r2, r7, r1
 8005c1a:	23a0      	movs	r3, #160	; 0xa0
 8005c1c:	05db      	lsls	r3, r3, #23
 8005c1e:	0011      	movs	r1, r2
 8005c20:	0018      	movs	r0, r3
 8005c22:	f001 fcad 	bl	8007580 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005c26:	2200      	movs	r2, #0
 8005c28:	2100      	movs	r1, #0
 8005c2a:	200f      	movs	r0, #15
 8005c2c:	f001 f958 	bl	8006ee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005c30:	200f      	movs	r0, #15
 8005c32:	f001 f96a 	bl	8006f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b00b      	add	sp, #44	; 0x2c
 8005c3c:	bd90      	pop	{r4, r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	40021000 	.word	0x40021000

08005c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c44:	b590      	push	{r4, r7, lr}
 8005c46:	b095      	sub	sp, #84	; 0x54
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c4c:	233c      	movs	r3, #60	; 0x3c
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	0018      	movs	r0, r3
 8005c52:	2314      	movs	r3, #20
 8005c54:	001a      	movs	r2, r3
 8005c56:	2100      	movs	r1, #0
 8005c58:	f004 ff61 	bl	800ab1e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c5c:	2414      	movs	r4, #20
 8005c5e:	193b      	adds	r3, r7, r4
 8005c60:	0018      	movs	r0, r3
 8005c62:	2328      	movs	r3, #40	; 0x28
 8005c64:	001a      	movs	r2, r3
 8005c66:	2100      	movs	r1, #0
 8005c68:	f004 ff59 	bl	800ab1e <memset>
  if(huart->Instance==USART1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a3c      	ldr	r2, [pc, #240]	; (8005d64 <HAL_UART_MspInit+0x120>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d171      	bne.n	8005d5a <HAL_UART_MspInit+0x116>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005c76:	193b      	adds	r3, r7, r4
 8005c78:	2201      	movs	r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005c7c:	193b      	adds	r3, r7, r4
 8005c7e:	2200      	movs	r2, #0
 8005c80:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c82:	193b      	adds	r3, r7, r4
 8005c84:	0018      	movs	r0, r3
 8005c86:	f002 fb0d 	bl	80082a4 <HAL_RCCEx_PeriphCLKConfig>
 8005c8a:	1e03      	subs	r3, r0, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005c8e:	f7ff fb99 	bl	80053c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c92:	4b35      	ldr	r3, [pc, #212]	; (8005d68 <HAL_UART_MspInit+0x124>)
 8005c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c96:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <HAL_UART_MspInit+0x124>)
 8005c98:	2180      	movs	r1, #128	; 0x80
 8005c9a:	01c9      	lsls	r1, r1, #7
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	641a      	str	r2, [r3, #64]	; 0x40
 8005ca0:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <HAL_UART_MspInit+0x124>)
 8005ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca4:	2380      	movs	r3, #128	; 0x80
 8005ca6:	01db      	lsls	r3, r3, #7
 8005ca8:	4013      	ands	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cae:	4b2e      	ldr	r3, [pc, #184]	; (8005d68 <HAL_UART_MspInit+0x124>)
 8005cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb2:	4b2d      	ldr	r3, [pc, #180]	; (8005d68 <HAL_UART_MspInit+0x124>)
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8005cba:	4b2b      	ldr	r3, [pc, #172]	; (8005d68 <HAL_UART_MspInit+0x124>)
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005cc6:	213c      	movs	r1, #60	; 0x3c
 8005cc8:	187b      	adds	r3, r7, r1
 8005cca:	22c0      	movs	r2, #192	; 0xc0
 8005ccc:	00d2      	lsls	r2, r2, #3
 8005cce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd6:	187b      	adds	r3, r7, r1
 8005cd8:	2200      	movs	r2, #0
 8005cda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cdc:	187b      	adds	r3, r7, r1
 8005cde:	2200      	movs	r2, #0
 8005ce0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005ce2:	187b      	adds	r3, r7, r1
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ce8:	187a      	adds	r2, r7, r1
 8005cea:	23a0      	movs	r3, #160	; 0xa0
 8005cec:	05db      	lsls	r3, r3, #23
 8005cee:	0011      	movs	r1, r2
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f001 fc45 	bl	8007580 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8005cf6:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005cf8:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <HAL_UART_MspInit+0x12c>)
 8005cfa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005cfe:	2232      	movs	r2, #50	; 0x32
 8005d00:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d02:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d08:	4b18      	ldr	r3, [pc, #96]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d0e:	4b17      	ldr	r3, [pc, #92]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005d10:	2280      	movs	r2, #128	; 0x80
 8005d12:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d14:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d1a:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005d20:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d26:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005d2c:	4b0f      	ldr	r3, [pc, #60]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005d2e:	0018      	movs	r0, r3
 8005d30:	f001 f908 	bl	8006f44 <HAL_DMA_Init>
 8005d34:	1e03      	subs	r3, r0, #0
 8005d36:	d001      	beq.n	8005d3c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8005d38:	f7ff fb44 	bl	80053c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2180      	movs	r1, #128	; 0x80
 8005d40:	4a0a      	ldr	r2, [pc, #40]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005d42:	505a      	str	r2, [r3, r1]
 8005d44:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <HAL_UART_MspInit+0x128>)
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	201b      	movs	r0, #27
 8005d50:	f001 f8c6 	bl	8006ee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005d54:	201b      	movs	r0, #27
 8005d56:	f001 f8d8 	bl	8006f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	b015      	add	sp, #84	; 0x54
 8005d60:	bd90      	pop	{r4, r7, pc}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	40013800 	.word	0x40013800
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	2000050c 	.word	0x2000050c
 8005d70:	40020008 	.word	0x40020008

08005d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d78:	e7fe      	b.n	8005d78 <NMI_Handler+0x4>

08005d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d7e:	e7fe      	b.n	8005d7e <HardFault_Handler+0x4>

08005d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	g_appConfig.miliCount++;
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <SysTick_Handler+0x18>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	4b03      	ldr	r3, [pc, #12]	; (8005dac <SysTick_Handler+0x18>)
 8005da0:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005da2:	f000 fb33 	bl	800640c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	200005b0 	.word	0x200005b0

08005db0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005db4:	4b03      	ldr	r3, [pc, #12]	; (8005dc4 <DMA1_Channel1_IRQHandler+0x14>)
 8005db6:	0018      	movs	r0, r3
 8005db8:	f001 faa0 	bl	80072fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005dbc:	46c0      	nop			; (mov r8, r8)
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	2000050c 	.word	0x2000050c

08005dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005dcc:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <TIM2_IRQHandler+0x14>)
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f002 fd6a 	bl	80088a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005dd4:	46c0      	nop			; (mov r8, r8)
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	2000042c 	.word	0x2000042c

08005de0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005de4:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <USART1_IRQHandler+0x14>)
 8005de6:	0018      	movs	r0, r3
 8005de8:	f003 fab2 	bl	8009350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005dec:	46c0      	nop			; (mov r8, r8)
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	20000478 	.word	0x20000478

08005df8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
	return 1;
 8005dfc:	2301      	movs	r3, #1
}
 8005dfe:	0018      	movs	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <_kill>:

int _kill(int pid, int sig)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005e0e:	f004 fe53 	bl	800aab8 <__errno>
 8005e12:	0003      	movs	r3, r0
 8005e14:	2216      	movs	r2, #22
 8005e16:	601a      	str	r2, [r3, #0]
	return -1;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	425b      	negs	r3, r3
}
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b002      	add	sp, #8
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <_exit>:

void _exit (int status)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	425a      	negs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	0011      	movs	r1, r2
 8005e34:	0018      	movs	r0, r3
 8005e36:	f7ff ffe5 	bl	8005e04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005e3a:	e7fe      	b.n	8005e3a <_exit+0x16>

08005e3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	e00a      	b.n	8005e64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005e4e:	e000      	b.n	8005e52 <_read+0x16>
 8005e50:	bf00      	nop
 8005e52:	0001      	movs	r1, r0
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	60ba      	str	r2, [r7, #8]
 8005e5a:	b2ca      	uxtb	r2, r1
 8005e5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	3301      	adds	r3, #1
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	dbf0      	blt.n	8005e4e <_read+0x12>
	}

return len;
 8005e6c:	687b      	ldr	r3, [r7, #4]
}
 8005e6e:	0018      	movs	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	b006      	add	sp, #24
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
	return -1;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	425b      	negs	r3, r3
}
 8005e82:	0018      	movs	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b002      	add	sp, #8
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2280      	movs	r2, #128	; 0x80
 8005e98:	0192      	lsls	r2, r2, #6
 8005e9a:	605a      	str	r2, [r3, #4]
	return 0;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b002      	add	sp, #8
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <_isatty>:

int _isatty(int file)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
	return 1;
 8005eae:	2301      	movs	r3, #1
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b002      	add	sp, #8
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
	return 0;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b004      	add	sp, #16
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ed8:	4a14      	ldr	r2, [pc, #80]	; (8005f2c <_sbrk+0x5c>)
 8005eda:	4b15      	ldr	r3, [pc, #84]	; (8005f30 <_sbrk+0x60>)
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ee4:	4b13      	ldr	r3, [pc, #76]	; (8005f34 <_sbrk+0x64>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005eec:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <_sbrk+0x64>)
 8005eee:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <_sbrk+0x68>)
 8005ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ef2:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <_sbrk+0x64>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	18d3      	adds	r3, r2, r3
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d207      	bcs.n	8005f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f00:	f004 fdda 	bl	800aab8 <__errno>
 8005f04:	0003      	movs	r3, r0
 8005f06:	220c      	movs	r2, #12
 8005f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	425b      	negs	r3, r3
 8005f0e:	e009      	b.n	8005f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f10:	4b08      	ldr	r3, [pc, #32]	; (8005f34 <_sbrk+0x64>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f16:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <_sbrk+0x64>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	18d2      	adds	r2, r2, r3
 8005f1e:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <_sbrk+0x64>)
 8005f20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005f22:	68fb      	ldr	r3, [r7, #12]
}
 8005f24:	0018      	movs	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	b006      	add	sp, #24
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20002000 	.word	0x20002000
 8005f30:	00000400 	.word	0x00000400
 8005f34:	200008e4 	.word	0x200008e4
 8005f38:	20000908 	.word	0x20000908

08005f3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f40:	46c0      	nop			; (mov r8, r8)
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	0002      	movs	r2, r0
 8005f50:	1dfb      	adds	r3, r7, #7
 8005f52:	701a      	strb	r2, [r3, #0]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <xputc+0x40>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <xputc+0x26>
		*outptr++ = (unsigned char)c;
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <xputc+0x40>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	1c59      	adds	r1, r3, #1
 8005f62:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <xputc+0x40>)
 8005f64:	6011      	str	r1, [r2, #0]
 8005f66:	1dfa      	adds	r2, r7, #7
 8005f68:	7812      	ldrb	r2, [r2, #0]
 8005f6a:	701a      	strb	r2, [r3, #0]
		return;
 8005f6c:	e009      	b.n	8005f82 <xputc+0x3a>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <xputc+0x44>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <xputc+0x3a>
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <xputc+0x44>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	1dfa      	adds	r2, r7, #7
 8005f7c:	7812      	ldrb	r2, [r2, #0]
 8005f7e:	0010      	movs	r0, r2
 8005f80:	4798      	blx	r3
}
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b002      	add	sp, #8
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	200008ec 	.word	0x200008ec
 8005f8c:	200008e8 	.word	0x200008e8

08005f90 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	while (*str)
 8005f98:	e006      	b.n	8005fa8 <xputs+0x18>
		xputc(*str++);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f7ff ffd0 	bl	8005f48 <xputc>
	while (*str)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1f4      	bne.n	8005f9a <xputs+0xa>
}
 8005fb0:	46c0      	nop			; (mov r8, r8)
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b002      	add	sp, #8
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b08f      	sub	sp, #60	; 0x3c
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	211f      	movs	r1, #31
 8005fce:	187a      	adds	r2, r7, r1
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	7013      	strb	r3, [r2, #0]
		if (!c) break;				/* End of format? */
 8005fd4:	000a      	movs	r2, r1
 8005fd6:	18bb      	adds	r3, r7, r2
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d100      	bne.n	8005fe0 <xvprintf+0x24>
 8005fde:	e164      	b.n	80062aa <xvprintf+0x2ee>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8005fe0:	18bb      	adds	r3, r7, r2
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b25      	cmp	r3, #37	; 0x25
 8005fe6:	d005      	beq.n	8005ff4 <xvprintf+0x38>
			xputc(c); continue;
 8005fe8:	18bb      	adds	r3, r7, r2
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	0018      	movs	r0, r3
 8005fee:	f7ff ffab 	bl	8005f48 <xputc>
 8005ff2:	e159      	b.n	80062a8 <xvprintf+0x2ec>
		}
		f = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	211f      	movs	r1, #31
 8006000:	187a      	adds	r2, r7, r1
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padded */
 8006006:	187b      	adds	r3, r7, r1
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b30      	cmp	r3, #48	; 0x30
 800600c:	d108      	bne.n	8006020 <xvprintf+0x64>
			f = 1; c = *fmt++;
 800600e:	2301      	movs	r3, #1
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	187a      	adds	r2, r7, r1
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	7013      	strb	r3, [r2, #0]
 800601e:	e00c      	b.n	800603a <xvprintf+0x7e>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8006020:	211f      	movs	r1, #31
 8006022:	187b      	adds	r3, r7, r1
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b2d      	cmp	r3, #45	; 0x2d
 8006028:	d107      	bne.n	800603a <xvprintf+0x7e>
				f = 2; c = *fmt++;
 800602a:	2302      	movs	r3, #2
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	187a      	adds	r2, r7, r1
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	7013      	strb	r3, [r2, #0]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800603a:	2300      	movs	r3, #0
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28
 800603e:	e011      	b.n	8006064 <xvprintf+0xa8>
			w = w * 10 + c - '0';
 8006040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006042:	0013      	movs	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	189b      	adds	r3, r3, r2
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	001a      	movs	r2, r3
 800604c:	211f      	movs	r1, #31
 800604e:	187b      	adds	r3, r7, r1
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	18d3      	adds	r3, r2, r3
 8006054:	3b30      	subs	r3, #48	; 0x30
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	187a      	adds	r2, r7, r1
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	7013      	strb	r3, [r2, #0]
 8006064:	221f      	movs	r2, #31
 8006066:	18bb      	adds	r3, r7, r2
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b2f      	cmp	r3, #47	; 0x2f
 800606c:	d903      	bls.n	8006076 <xvprintf+0xba>
 800606e:	18bb      	adds	r3, r7, r2
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b39      	cmp	r3, #57	; 0x39
 8006074:	d9e4      	bls.n	8006040 <xvprintf+0x84>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8006076:	221f      	movs	r2, #31
 8006078:	18bb      	adds	r3, r7, r2
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b6c      	cmp	r3, #108	; 0x6c
 800607e:	d003      	beq.n	8006088 <xvprintf+0xcc>
 8006080:	18bb      	adds	r3, r7, r2
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b4c      	cmp	r3, #76	; 0x4c
 8006086:	d10a      	bne.n	800609e <xvprintf+0xe2>
			f |= 4; c = *fmt++;
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	2204      	movs	r2, #4
 800608c:	4313      	orrs	r3, r2
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	221f      	movs	r2, #31
 8006098:	18ba      	adds	r2, r7, r2
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;				/* End of format? */
 800609e:	221f      	movs	r2, #31
 80060a0:	18bb      	adds	r3, r7, r2
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d100      	bne.n	80060aa <xvprintf+0xee>
 80060a8:	e101      	b.n	80062ae <xvprintf+0x2f2>
		d = c;
 80060aa:	211e      	movs	r1, #30
 80060ac:	187b      	adds	r3, r7, r1
 80060ae:	18ba      	adds	r2, r7, r2
 80060b0:	7812      	ldrb	r2, [r2, #0]
 80060b2:	701a      	strb	r2, [r3, #0]
		if (d >= 'a') d -= 0x20;
 80060b4:	187b      	adds	r3, r7, r1
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b60      	cmp	r3, #96	; 0x60
 80060ba:	d904      	bls.n	80060c6 <xvprintf+0x10a>
 80060bc:	187b      	adds	r3, r7, r1
 80060be:	187a      	adds	r2, r7, r1
 80060c0:	7812      	ldrb	r2, [r2, #0]
 80060c2:	3a20      	subs	r2, #32
 80060c4:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 80060c6:	231e      	movs	r3, #30
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	3b42      	subs	r3, #66	; 0x42
 80060ce:	2b16      	cmp	r3, #22
 80060d0:	d847      	bhi.n	8006162 <xvprintf+0x1a6>
 80060d2:	009a      	lsls	r2, r3, #2
 80060d4:	4b78      	ldr	r3, [pc, #480]	; (80062b8 <xvprintf+0x2fc>)
 80060d6:	18d3      	adds	r3, r2, r3
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	1d1a      	adds	r2, r3, #4
 80060e0:	603a      	str	r2, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 80060e6:	2300      	movs	r3, #0
 80060e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ea:	e002      	b.n	80060f2 <xvprintf+0x136>
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	3301      	adds	r3, #1
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	18d3      	adds	r3, r2, r3
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f6      	bne.n	80060ec <xvprintf+0x130>
			while (!(f & 2) && j++ < w) xputc(' ');
 80060fe:	e002      	b.n	8006106 <xvprintf+0x14a>
 8006100:	2020      	movs	r0, #32
 8006102:	f7ff ff21 	bl	8005f48 <xputc>
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	2202      	movs	r2, #2
 800610a:	4013      	ands	r3, r2
 800610c:	d105      	bne.n	800611a <xvprintf+0x15e>
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006116:	429a      	cmp	r2, r3
 8006118:	d8f2      	bhi.n	8006100 <xvprintf+0x144>
			xputs(p);
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	0018      	movs	r0, r3
 800611e:	f7ff ff37 	bl	8005f90 <xputs>
			while (j++ < w) xputc(' ');
 8006122:	e002      	b.n	800612a <xvprintf+0x16e>
 8006124:	2020      	movs	r0, #32
 8006126:	f7ff ff0f 	bl	8005f48 <xputc>
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006132:	429a      	cmp	r2, r3
 8006134:	d8f6      	bhi.n	8006124 <xvprintf+0x168>
			continue;
 8006136:	e0b7      	b.n	80062a8 <xvprintf+0x2ec>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	1d1a      	adds	r2, r3, #4
 800613c:	603a      	str	r2, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	b2db      	uxtb	r3, r3
 8006142:	0018      	movs	r0, r3
 8006144:	f7ff ff00 	bl	8005f48 <xputc>
 8006148:	e0ae      	b.n	80062a8 <xvprintf+0x2ec>
		case 'B' :					/* Binary */
			r = 2; break;
 800614a:	2302      	movs	r3, #2
 800614c:	637b      	str	r3, [r7, #52]	; 0x34
 800614e:	e00f      	b.n	8006170 <xvprintf+0x1b4>
		case 'O' :					/* Octal */
			r = 8; break;
 8006150:	2308      	movs	r3, #8
 8006152:	637b      	str	r3, [r7, #52]	; 0x34
 8006154:	e00c      	b.n	8006170 <xvprintf+0x1b4>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8006156:	230a      	movs	r3, #10
 8006158:	637b      	str	r3, [r7, #52]	; 0x34
 800615a:	e009      	b.n	8006170 <xvprintf+0x1b4>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800615c:	2310      	movs	r3, #16
 800615e:	637b      	str	r3, [r7, #52]	; 0x34
 8006160:	e006      	b.n	8006170 <xvprintf+0x1b4>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8006162:	231f      	movs	r3, #31
 8006164:	18fb      	adds	r3, r7, r3
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	0018      	movs	r0, r3
 800616a:	f7ff feed 	bl	8005f48 <xputc>
 800616e:	e09b      	b.n	80062a8 <xvprintf+0x2ec>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	2204      	movs	r2, #4
 8006174:	4013      	ands	r3, r2
 8006176:	d004      	beq.n	8006182 <xvprintf+0x1c6>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	1d1a      	adds	r2, r3, #4
 800617c:	603a      	str	r2, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	e00d      	b.n	800619e <xvprintf+0x1e2>
 8006182:	231e      	movs	r3, #30
 8006184:	18fb      	adds	r3, r7, r3
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b44      	cmp	r3, #68	; 0x44
 800618a:	d104      	bne.n	8006196 <xvprintf+0x1da>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	603a      	str	r2, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	e003      	b.n	800619e <xvprintf+0x1e2>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	603a      	str	r2, [r7, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 80061a0:	231e      	movs	r3, #30
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b44      	cmp	r3, #68	; 0x44
 80061a8:	d109      	bne.n	80061be <xvprintf+0x202>
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	da06      	bge.n	80061be <xvprintf+0x202>
			v = 0 - v;
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	425b      	negs	r3, r3
 80061b4:	623b      	str	r3, [r7, #32]
			f |= 8;
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	2208      	movs	r2, #8
 80061ba:	4313      	orrs	r3, r2
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061c6:	0018      	movs	r0, r3
 80061c8:	f7fa f848 	bl	800025c <__aeabi_uidivmod>
 80061cc:	000b      	movs	r3, r1
 80061ce:	001a      	movs	r2, r3
 80061d0:	241e      	movs	r4, #30
 80061d2:	193b      	adds	r3, r7, r4
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061d8:	6a38      	ldr	r0, [r7, #32]
 80061da:	f7f9 ffb9 	bl	8000150 <__udivsi3>
 80061de:	0003      	movs	r3, r0
 80061e0:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80061e2:	193b      	adds	r3, r7, r4
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b09      	cmp	r3, #9
 80061e8:	d90d      	bls.n	8006206 <xvprintf+0x24a>
 80061ea:	231f      	movs	r3, #31
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b78      	cmp	r3, #120	; 0x78
 80061f2:	d101      	bne.n	80061f8 <xvprintf+0x23c>
 80061f4:	2327      	movs	r3, #39	; 0x27
 80061f6:	e000      	b.n	80061fa <xvprintf+0x23e>
 80061f8:	2307      	movs	r3, #7
 80061fa:	211e      	movs	r1, #30
 80061fc:	187a      	adds	r2, r7, r1
 80061fe:	1879      	adds	r1, r7, r1
 8006200:	7809      	ldrb	r1, [r1, #0]
 8006202:	185b      	adds	r3, r3, r1
 8006204:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	633a      	str	r2, [r7, #48]	; 0x30
 800620c:	221e      	movs	r2, #30
 800620e:	18ba      	adds	r2, r7, r2
 8006210:	7812      	ldrb	r2, [r2, #0]
 8006212:	3230      	adds	r2, #48	; 0x30
 8006214:	b2d1      	uxtb	r1, r2
 8006216:	2208      	movs	r2, #8
 8006218:	18ba      	adds	r2, r7, r2
 800621a:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof(s));
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <xvprintf+0x26c>
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	2b0f      	cmp	r3, #15
 8006226:	d9cc      	bls.n	80061c2 <xvprintf+0x206>
		if (f & 8) s[i++] = '-';
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	2208      	movs	r2, #8
 800622c:	4013      	ands	r3, r2
 800622e:	d006      	beq.n	800623e <xvprintf+0x282>
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	633a      	str	r2, [r7, #48]	; 0x30
 8006236:	2208      	movs	r2, #8
 8006238:	18ba      	adds	r2, r7, r2
 800623a:	212d      	movs	r1, #45	; 0x2d
 800623c:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	2201      	movs	r2, #1
 8006246:	4013      	ands	r3, r2
 8006248:	d001      	beq.n	800624e <xvprintf+0x292>
 800624a:	2230      	movs	r2, #48	; 0x30
 800624c:	e000      	b.n	8006250 <xvprintf+0x294>
 800624e:	2220      	movs	r2, #32
 8006250:	231e      	movs	r3, #30
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) xputc(d);
 8006256:	e005      	b.n	8006264 <xvprintf+0x2a8>
 8006258:	231e      	movs	r3, #30
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	0018      	movs	r0, r3
 8006260:	f7ff fe72 	bl	8005f48 <xputc>
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	2202      	movs	r2, #2
 8006268:	4013      	ands	r3, r2
 800626a:	d105      	bne.n	8006278 <xvprintf+0x2bc>
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006274:	429a      	cmp	r2, r3
 8006276:	d8ef      	bhi.n	8006258 <xvprintf+0x29c>
		do xputc(s[--i]); while(i);
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	3b01      	subs	r3, #1
 800627c:	633b      	str	r3, [r7, #48]	; 0x30
 800627e:	2308      	movs	r3, #8
 8006280:	18fa      	adds	r2, r7, r3
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	18d3      	adds	r3, r2, r3
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	0018      	movs	r0, r3
 800628a:	f7ff fe5d 	bl	8005f48 <xputc>
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f1      	bne.n	8006278 <xvprintf+0x2bc>
		while (j++ < w) xputc(' ');
 8006294:	e002      	b.n	800629c <xvprintf+0x2e0>
 8006296:	2020      	movs	r0, #32
 8006298:	f7ff fe56 	bl	8005f48 <xputc>
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d8f6      	bhi.n	8006296 <xvprintf+0x2da>
		c = *fmt++;					/* Get a char */
 80062a8:	e68d      	b.n	8005fc6 <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	e000      	b.n	80062b0 <xvprintf+0x2f4>
		if (!c) break;				/* End of format? */
 80062ae:	46c0      	nop			; (mov r8, r8)
	}
}
 80062b0:	46c0      	nop			; (mov r8, r8)
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b00f      	add	sp, #60	; 0x3c
 80062b6:	bd90      	pop	{r4, r7, pc}
 80062b8:	0800e448 	.word	0x0800e448

080062bc <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 80062bc:	b40f      	push	{r0, r1, r2, r3}
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 80062c4:	2314      	movs	r3, #20
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	0011      	movs	r1, r2
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7ff fe73 	bl	8005fbc <xvprintf>
	va_end(arp);
}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	46bd      	mov	sp, r7
 80062da:	b002      	add	sp, #8
 80062dc:	bc80      	pop	{r7}
 80062de:	bc08      	pop	{r3}
 80062e0:	b004      	add	sp, #16
 80062e2:	4718      	bx	r3

080062e4 <Reset_Handler>:
 80062e4:	480d      	ldr	r0, [pc, #52]	; (800631c <LoopForever+0x2>)
 80062e6:	4685      	mov	sp, r0
 80062e8:	f7ff fe28 	bl	8005f3c <SystemInit>
 80062ec:	480c      	ldr	r0, [pc, #48]	; (8006320 <LoopForever+0x6>)
 80062ee:	490d      	ldr	r1, [pc, #52]	; (8006324 <LoopForever+0xa>)
 80062f0:	4a0d      	ldr	r2, [pc, #52]	; (8006328 <LoopForever+0xe>)
 80062f2:	2300      	movs	r3, #0
 80062f4:	e002      	b.n	80062fc <LoopCopyDataInit>

080062f6 <CopyDataInit>:
 80062f6:	58d4      	ldr	r4, [r2, r3]
 80062f8:	50c4      	str	r4, [r0, r3]
 80062fa:	3304      	adds	r3, #4

080062fc <LoopCopyDataInit>:
 80062fc:	18c4      	adds	r4, r0, r3
 80062fe:	428c      	cmp	r4, r1
 8006300:	d3f9      	bcc.n	80062f6 <CopyDataInit>
 8006302:	4a0a      	ldr	r2, [pc, #40]	; (800632c <LoopForever+0x12>)
 8006304:	4c0a      	ldr	r4, [pc, #40]	; (8006330 <LoopForever+0x16>)
 8006306:	2300      	movs	r3, #0
 8006308:	e001      	b.n	800630e <LoopFillZerobss>

0800630a <FillZerobss>:
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	3204      	adds	r2, #4

0800630e <LoopFillZerobss>:
 800630e:	42a2      	cmp	r2, r4
 8006310:	d3fb      	bcc.n	800630a <FillZerobss>
 8006312:	f004 fbd7 	bl	800aac4 <__libc_init_array>
 8006316:	f7fe fe93 	bl	8005040 <main>

0800631a <LoopForever>:
 800631a:	e7fe      	b.n	800631a <LoopForever>
 800631c:	20002000 	.word	0x20002000
 8006320:	20000000 	.word	0x20000000
 8006324:	20000270 	.word	0x20000270
 8006328:	0800e8f4 	.word	0x0800e8f4
 800632c:	20000270 	.word	0x20000270
 8006330:	20000904 	.word	0x20000904

08006334 <ADC1_IRQHandler>:
 8006334:	e7fe      	b.n	8006334 <ADC1_IRQHandler>
	...

08006338 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800633e:	1dfb      	adds	r3, r7, #7
 8006340:	2200      	movs	r2, #0
 8006342:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <HAL_Init+0x3c>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <HAL_Init+0x3c>)
 800634a:	2180      	movs	r1, #128	; 0x80
 800634c:	0049      	lsls	r1, r1, #1
 800634e:	430a      	orrs	r2, r1
 8006350:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006352:	2003      	movs	r0, #3
 8006354:	f000 f810 	bl	8006378 <HAL_InitTick>
 8006358:	1e03      	subs	r3, r0, #0
 800635a:	d003      	beq.n	8006364 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800635c:	1dfb      	adds	r3, r7, #7
 800635e:	2201      	movs	r2, #1
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e001      	b.n	8006368 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006364:	f7ff fb9e 	bl	8005aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006368:	1dfb      	adds	r3, r7, #7
 800636a:	781b      	ldrb	r3, [r3, #0]
}
 800636c:	0018      	movs	r0, r3
 800636e:	46bd      	mov	sp, r7
 8006370:	b002      	add	sp, #8
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40022000 	.word	0x40022000

08006378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006378:	b590      	push	{r4, r7, lr}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006380:	230f      	movs	r3, #15
 8006382:	18fb      	adds	r3, r7, r3
 8006384:	2200      	movs	r2, #0
 8006386:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006388:	4b1d      	ldr	r3, [pc, #116]	; (8006400 <HAL_InitTick+0x88>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d02b      	beq.n	80063e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <HAL_InitTick+0x8c>)
 8006392:	681c      	ldr	r4, [r3, #0]
 8006394:	4b1a      	ldr	r3, [pc, #104]	; (8006400 <HAL_InitTick+0x88>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	0019      	movs	r1, r3
 800639a:	23fa      	movs	r3, #250	; 0xfa
 800639c:	0098      	lsls	r0, r3, #2
 800639e:	f7f9 fed7 	bl	8000150 <__udivsi3>
 80063a2:	0003      	movs	r3, r0
 80063a4:	0019      	movs	r1, r3
 80063a6:	0020      	movs	r0, r4
 80063a8:	f7f9 fed2 	bl	8000150 <__udivsi3>
 80063ac:	0003      	movs	r3, r0
 80063ae:	0018      	movs	r0, r3
 80063b0:	f000 fdbb 	bl	8006f2a <HAL_SYSTICK_Config>
 80063b4:	1e03      	subs	r3, r0, #0
 80063b6:	d112      	bne.n	80063de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d80a      	bhi.n	80063d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	2301      	movs	r3, #1
 80063c2:	425b      	negs	r3, r3
 80063c4:	2200      	movs	r2, #0
 80063c6:	0018      	movs	r0, r3
 80063c8:	f000 fd8a 	bl	8006ee0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80063cc:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <HAL_InitTick+0x90>)
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	e00d      	b.n	80063f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80063d4:	230f      	movs	r3, #15
 80063d6:	18fb      	adds	r3, r7, r3
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	e008      	b.n	80063f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80063de:	230f      	movs	r3, #15
 80063e0:	18fb      	adds	r3, r7, r3
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	e003      	b.n	80063f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80063e8:	230f      	movs	r3, #15
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80063f0:	230f      	movs	r3, #15
 80063f2:	18fb      	adds	r3, r7, r3
 80063f4:	781b      	ldrb	r3, [r3, #0]
}
 80063f6:	0018      	movs	r0, r3
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b005      	add	sp, #20
 80063fc:	bd90      	pop	{r4, r7, pc}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	2000009c 	.word	0x2000009c
 8006404:	20000094 	.word	0x20000094
 8006408:	20000098 	.word	0x20000098

0800640c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <HAL_IncTick+0x1c>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	001a      	movs	r2, r3
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <HAL_IncTick+0x20>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	18d2      	adds	r2, r2, r3
 800641c:	4b03      	ldr	r3, [pc, #12]	; (800642c <HAL_IncTick+0x20>)
 800641e:	601a      	str	r2, [r3, #0]
}
 8006420:	46c0      	nop			; (mov r8, r8)
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	2000009c 	.word	0x2000009c
 800642c:	200008f0 	.word	0x200008f0

08006430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
  return uwTick;
 8006434:	4b02      	ldr	r3, [pc, #8]	; (8006440 <HAL_GetTick+0x10>)
 8006436:	681b      	ldr	r3, [r3, #0]
}
 8006438:	0018      	movs	r0, r3
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	200008f0 	.word	0x200008f0

08006444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800644c:	f7ff fff0 	bl	8006430 <HAL_GetTick>
 8006450:	0003      	movs	r3, r0
 8006452:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3301      	adds	r3, #1
 800645c:	d005      	beq.n	800646a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800645e:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <HAL_Delay+0x44>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	001a      	movs	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	189b      	adds	r3, r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	f7ff ffe0 	bl	8006430 <HAL_GetTick>
 8006470:	0002      	movs	r2, r0
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	429a      	cmp	r2, r3
 800647a:	d8f7      	bhi.n	800646c <HAL_Delay+0x28>
  {
  }
}
 800647c:	46c0      	nop			; (mov r8, r8)
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	46bd      	mov	sp, r7
 8006482:	b004      	add	sp, #16
 8006484:	bd80      	pop	{r7, pc}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	2000009c 	.word	0x2000009c

0800648c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a05      	ldr	r2, [pc, #20]	; (80064b0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800649c:	401a      	ands	r2, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	601a      	str	r2, [r3, #0]
}
 80064a6:	46c0      	nop			; (mov r8, r8)
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b002      	add	sp, #8
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	fe3fffff 	.word	0xfe3fffff

080064b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	23e0      	movs	r3, #224	; 0xe0
 80064c2:	045b      	lsls	r3, r3, #17
 80064c4:	4013      	ands	r3, r2
}
 80064c6:	0018      	movs	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b002      	add	sp, #8
 80064cc:	bd80      	pop	{r7, pc}

080064ce <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	2104      	movs	r1, #4
 80064e2:	400a      	ands	r2, r1
 80064e4:	2107      	movs	r1, #7
 80064e6:	4091      	lsls	r1, r2
 80064e8:	000a      	movs	r2, r1
 80064ea:	43d2      	mvns	r2, r2
 80064ec:	401a      	ands	r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2104      	movs	r1, #4
 80064f2:	400b      	ands	r3, r1
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	4099      	lsls	r1, r3
 80064f8:	000b      	movs	r3, r1
 80064fa:	431a      	orrs	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8006500:	46c0      	nop			; (mov r8, r8)
 8006502:	46bd      	mov	sp, r7
 8006504:	b004      	add	sp, #16
 8006506:	bd80      	pop	{r7, pc}

08006508 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	2104      	movs	r1, #4
 800651a:	400a      	ands	r2, r1
 800651c:	2107      	movs	r1, #7
 800651e:	4091      	lsls	r1, r2
 8006520:	000a      	movs	r2, r1
 8006522:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2104      	movs	r1, #4
 8006528:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800652a:	40da      	lsrs	r2, r3
 800652c:	0013      	movs	r3, r2
}
 800652e:	0018      	movs	r0, r3
 8006530:	46bd      	mov	sp, r7
 8006532:	b002      	add	sp, #8
 8006534:	bd80      	pop	{r7, pc}

08006536 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	211f      	movs	r1, #31
 800654a:	400a      	ands	r2, r1
 800654c:	210f      	movs	r1, #15
 800654e:	4091      	lsls	r1, r2
 8006550:	000a      	movs	r2, r1
 8006552:	43d2      	mvns	r2, r2
 8006554:	401a      	ands	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	0e9b      	lsrs	r3, r3, #26
 800655a:	210f      	movs	r1, #15
 800655c:	4019      	ands	r1, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	201f      	movs	r0, #31
 8006562:	4003      	ands	r3, r0
 8006564:	4099      	lsls	r1, r3
 8006566:	000b      	movs	r3, r1
 8006568:	431a      	orrs	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	46bd      	mov	sp, r7
 8006572:	b004      	add	sp, #16
 8006574:	bd80      	pop	{r7, pc}

08006576 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	035b      	lsls	r3, r3, #13
 8006588:	0b5b      	lsrs	r3, r3, #13
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006590:	46c0      	nop			; (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bd80      	pop	{r7, pc}

08006598 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	0352      	lsls	r2, r2, #13
 80065aa:	0b52      	lsrs	r2, r2, #13
 80065ac:	43d2      	mvns	r2, r2
 80065ae:	401a      	ands	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80065b4:	46c0      	nop			; (mov r8, r8)
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b002      	add	sp, #8
 80065ba:	bd80      	pop	{r7, pc}

080065bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	0212      	lsls	r2, r2, #8
 80065d0:	43d2      	mvns	r2, r2
 80065d2:	401a      	ands	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	400b      	ands	r3, r1
 80065dc:	4904      	ldr	r1, [pc, #16]	; (80065f0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80065de:	400b      	ands	r3, r1
 80065e0:	431a      	orrs	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	46bd      	mov	sp, r7
 80065ea:	b004      	add	sp, #16
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	07ffff00 	.word	0x07ffff00

080065f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	4a05      	ldr	r2, [pc, #20]	; (8006618 <LL_ADC_EnableInternalRegulator+0x24>)
 8006602:	4013      	ands	r3, r2
 8006604:	2280      	movs	r2, #128	; 0x80
 8006606:	0552      	lsls	r2, r2, #21
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	46bd      	mov	sp, r7
 8006612:	b002      	add	sp, #8
 8006614:	bd80      	pop	{r7, pc}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	6fffffe8 	.word	0x6fffffe8

0800661c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	2380      	movs	r3, #128	; 0x80
 800662a:	055b      	lsls	r3, r3, #21
 800662c:	401a      	ands	r2, r3
 800662e:	2380      	movs	r3, #128	; 0x80
 8006630:	055b      	lsls	r3, r3, #21
 8006632:	429a      	cmp	r2, r3
 8006634:	d101      	bne.n	800663a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800663a:	2300      	movs	r3, #0
}
 800663c:	0018      	movs	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	b002      	add	sp, #8
 8006642:	bd80      	pop	{r7, pc}

08006644 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2201      	movs	r2, #1
 8006652:	4013      	ands	r3, r2
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <LL_ADC_IsEnabled+0x18>
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <LL_ADC_IsEnabled+0x1a>
 800665c:	2300      	movs	r3, #0
}
 800665e:	0018      	movs	r0, r3
 8006660:	46bd      	mov	sp, r7
 8006662:	b002      	add	sp, #8
 8006664:	bd80      	pop	{r7, pc}

08006666 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b082      	sub	sp, #8
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2204      	movs	r2, #4
 8006674:	4013      	ands	r3, r2
 8006676:	2b04      	cmp	r3, #4
 8006678:	d101      	bne.n	800667e <LL_ADC_REG_IsConversionOngoing+0x18>
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800667e:	2300      	movs	r3, #0
}
 8006680:	0018      	movs	r0, r3
 8006682:	46bd      	mov	sp, r7
 8006684:	b002      	add	sp, #8
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006690:	231f      	movs	r3, #31
 8006692:	18fb      	adds	r3, r7, r3
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8006698:	2300      	movs	r3, #0
 800669a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e17f      	b.n	80069ae <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0018      	movs	r0, r3
 80066ba:	f7ff fa17 	bl	8005aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2254      	movs	r2, #84	; 0x54
 80066c8:	2100      	movs	r1, #0
 80066ca:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	0018      	movs	r0, r3
 80066d2:	f7ff ffa3 	bl	800661c <LL_ADC_IsInternalRegulatorEnabled>
 80066d6:	1e03      	subs	r3, r0, #0
 80066d8:	d115      	bne.n	8006706 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	0018      	movs	r0, r3
 80066e0:	f7ff ff88 	bl	80065f4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066e4:	4bb4      	ldr	r3, [pc, #720]	; (80069b8 <HAL_ADC_Init+0x330>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	49b4      	ldr	r1, [pc, #720]	; (80069bc <HAL_ADC_Init+0x334>)
 80066ea:	0018      	movs	r0, r3
 80066ec:	f7f9 fd30 	bl	8000150 <__udivsi3>
 80066f0:	0003      	movs	r3, r0
 80066f2:	3301      	adds	r3, #1
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80066f8:	e002      	b.n	8006700 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f9      	bne.n	80066fa <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	0018      	movs	r0, r3
 800670c:	f7ff ff86 	bl	800661c <LL_ADC_IsInternalRegulatorEnabled>
 8006710:	1e03      	subs	r3, r0, #0
 8006712:	d10f      	bne.n	8006734 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006718:	2210      	movs	r2, #16
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006724:	2201      	movs	r2, #1
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800672c:	231f      	movs	r3, #31
 800672e:	18fb      	adds	r3, r7, r3
 8006730:	2201      	movs	r2, #1
 8006732:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	0018      	movs	r0, r3
 800673a:	f7ff ff94 	bl	8006666 <LL_ADC_REG_IsConversionOngoing>
 800673e:	0003      	movs	r3, r0
 8006740:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006746:	2210      	movs	r2, #16
 8006748:	4013      	ands	r3, r2
 800674a:	d000      	beq.n	800674e <HAL_ADC_Init+0xc6>
 800674c:	e122      	b.n	8006994 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d000      	beq.n	8006756 <HAL_ADC_Init+0xce>
 8006754:	e11e      	b.n	8006994 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675a:	4a99      	ldr	r2, [pc, #612]	; (80069c0 <HAL_ADC_Init+0x338>)
 800675c:	4013      	ands	r3, r2
 800675e:	2202      	movs	r2, #2
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	0018      	movs	r0, r3
 800676c:	f7ff ff6a 	bl	8006644 <LL_ADC_IsEnabled>
 8006770:	1e03      	subs	r3, r0, #0
 8006772:	d000      	beq.n	8006776 <HAL_ADC_Init+0xee>
 8006774:	e0ad      	b.n	80068d2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	7e1b      	ldrb	r3, [r3, #24]
 800677e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8006780:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7e5b      	ldrb	r3, [r3, #25]
 8006786:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006788:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	7e9b      	ldrb	r3, [r3, #26]
 800678e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006790:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_ADC_Init+0x118>
 800679a:	2380      	movs	r3, #128	; 0x80
 800679c:	015b      	lsls	r3, r3, #5
 800679e:	e000      	b.n	80067a2 <HAL_ADC_Init+0x11a>
 80067a0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80067a2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80067a8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da04      	bge.n	80067bc <HAL_ADC_Init+0x134>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	085b      	lsrs	r3, r3, #1
 80067ba:	e001      	b.n	80067c0 <HAL_ADC_Init+0x138>
 80067bc:	2380      	movs	r3, #128	; 0x80
 80067be:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80067c0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	212c      	movs	r1, #44	; 0x2c
 80067c6:	5c5b      	ldrb	r3, [r3, r1]
 80067c8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80067ca:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	5c9b      	ldrb	r3, [r3, r2]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d115      	bne.n	8006808 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	7e9b      	ldrb	r3, [r3, #26]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d105      	bne.n	80067f0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2280      	movs	r2, #128	; 0x80
 80067e8:	0252      	lsls	r2, r2, #9
 80067ea:	4313      	orrs	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	e00b      	b.n	8006808 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f4:	2220      	movs	r2, #32
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006800:	2201      	movs	r2, #1
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006814:	23e0      	movs	r3, #224	; 0xe0
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800681e:	4313      	orrs	r3, r2
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	4313      	orrs	r3, r2
 8006824:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4a65      	ldr	r2, [pc, #404]	; (80069c4 <HAL_ADC_Init+0x33c>)
 800682e:	4013      	ands	r3, r2
 8006830:	0019      	movs	r1, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	430a      	orrs	r2, r1
 800683a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	0f9b      	lsrs	r3, r3, #30
 8006842:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006848:	4313      	orrs	r3, r2
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	4313      	orrs	r3, r2
 800684e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	223c      	movs	r2, #60	; 0x3c
 8006854:	5c9b      	ldrb	r3, [r3, r2]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d111      	bne.n	800687e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	0f9b      	lsrs	r3, r3, #30
 8006860:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006866:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800686c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8006872:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	2201      	movs	r2, #1
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	4a50      	ldr	r2, [pc, #320]	; (80069c8 <HAL_ADC_Init+0x340>)
 8006886:	4013      	ands	r3, r2
 8006888:	0019      	movs	r1, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	430a      	orrs	r2, r1
 8006892:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	23c0      	movs	r3, #192	; 0xc0
 800689a:	061b      	lsls	r3, r3, #24
 800689c:	429a      	cmp	r2, r3
 800689e:	d018      	beq.n	80068d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80068a4:	2380      	movs	r3, #128	; 0x80
 80068a6:	05db      	lsls	r3, r3, #23
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d012      	beq.n	80068d2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80068b0:	2380      	movs	r3, #128	; 0x80
 80068b2:	061b      	lsls	r3, r3, #24
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d00c      	beq.n	80068d2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80068b8:	4b44      	ldr	r3, [pc, #272]	; (80069cc <HAL_ADC_Init+0x344>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a44      	ldr	r2, [pc, #272]	; (80069d0 <HAL_ADC_Init+0x348>)
 80068be:	4013      	ands	r3, r2
 80068c0:	0019      	movs	r1, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	23f0      	movs	r3, #240	; 0xf0
 80068c8:	039b      	lsls	r3, r3, #14
 80068ca:	401a      	ands	r2, r3
 80068cc:	4b3f      	ldr	r3, [pc, #252]	; (80069cc <HAL_ADC_Init+0x344>)
 80068ce:	430a      	orrs	r2, r1
 80068d0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068da:	001a      	movs	r2, r3
 80068dc:	2100      	movs	r1, #0
 80068de:	f7ff fdf6 	bl	80064ce <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	493a      	ldr	r1, [pc, #232]	; (80069d4 <HAL_ADC_Init+0x34c>)
 80068ec:	001a      	movs	r2, r3
 80068ee:	f7ff fdee 	bl	80064ce <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2110      	movs	r1, #16
 8006906:	4249      	negs	r1, r1
 8006908:	430a      	orrs	r2, r1
 800690a:	629a      	str	r2, [r3, #40]	; 0x28
 800690c:	e018      	b.n	8006940 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	2380      	movs	r3, #128	; 0x80
 8006914:	039b      	lsls	r3, r3, #14
 8006916:	429a      	cmp	r2, r3
 8006918:	d112      	bne.n	8006940 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	3b01      	subs	r3, #1
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	221c      	movs	r2, #28
 800692a:	4013      	ands	r3, r2
 800692c:	2210      	movs	r2, #16
 800692e:	4252      	negs	r2, r2
 8006930:	409a      	lsls	r2, r3
 8006932:	0011      	movs	r1, r2
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2100      	movs	r1, #0
 8006946:	0018      	movs	r0, r3
 8006948:	f7ff fdde 	bl	8006508 <LL_ADC_GetSamplingTimeCommonChannels>
 800694c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006952:	429a      	cmp	r2, r3
 8006954:	d10b      	bne.n	800696e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006960:	2203      	movs	r2, #3
 8006962:	4393      	bics	r3, r2
 8006964:	2201      	movs	r2, #1
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800696c:	e01c      	b.n	80069a8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006972:	2212      	movs	r2, #18
 8006974:	4393      	bics	r3, r2
 8006976:	2210      	movs	r2, #16
 8006978:	431a      	orrs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006982:	2201      	movs	r2, #1
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800698a:	231f      	movs	r3, #31
 800698c:	18fb      	adds	r3, r7, r3
 800698e:	2201      	movs	r2, #1
 8006990:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006992:	e009      	b.n	80069a8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006998:	2210      	movs	r2, #16
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80069a0:	231f      	movs	r3, #31
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	2201      	movs	r2, #1
 80069a6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80069a8:	231f      	movs	r3, #31
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	781b      	ldrb	r3, [r3, #0]
}
 80069ae:	0018      	movs	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b008      	add	sp, #32
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	20000094 	.word	0x20000094
 80069bc:	00030d40 	.word	0x00030d40
 80069c0:	fffffefd 	.word	0xfffffefd
 80069c4:	fffe0201 	.word	0xfffe0201
 80069c8:	1ffffc02 	.word	0x1ffffc02
 80069cc:	40012708 	.word	0x40012708
 80069d0:	ffc3ffff 	.word	0xffc3ffff
 80069d4:	07ffff04 	.word	0x07ffff04

080069d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069e2:	2317      	movs	r3, #23
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2254      	movs	r2, #84	; 0x54
 80069f2:	5c9b      	ldrb	r3, [r3, r2]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x24>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e1c0      	b.n	8006d7e <HAL_ADC_ConfigChannel+0x3a6>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2254      	movs	r2, #84	; 0x54
 8006a00:	2101      	movs	r1, #1
 8006a02:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7ff fe2c 	bl	8006666 <LL_ADC_REG_IsConversionOngoing>
 8006a0e:	1e03      	subs	r3, r0, #0
 8006a10:	d000      	beq.n	8006a14 <HAL_ADC_ConfigChannel+0x3c>
 8006a12:	e1a3      	b.n	8006d5c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d100      	bne.n	8006a1e <HAL_ADC_ConfigChannel+0x46>
 8006a1c:	e143      	b.n	8006ca6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691a      	ldr	r2, [r3, #16]
 8006a22:	2380      	movs	r3, #128	; 0x80
 8006a24:	061b      	lsls	r3, r3, #24
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d004      	beq.n	8006a34 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006a2e:	4ac1      	ldr	r2, [pc, #772]	; (8006d34 <HAL_ADC_ConfigChannel+0x35c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d108      	bne.n	8006a46 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	0019      	movs	r1, r3
 8006a3e:	0010      	movs	r0, r2
 8006a40:	f7ff fd99 	bl	8006576 <LL_ADC_REG_SetSequencerChAdd>
 8006a44:	e0c9      	b.n	8006bda <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	211f      	movs	r1, #31
 8006a50:	400b      	ands	r3, r1
 8006a52:	210f      	movs	r1, #15
 8006a54:	4099      	lsls	r1, r3
 8006a56:	000b      	movs	r3, r1
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	0019      	movs	r1, r3
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	035b      	lsls	r3, r3, #13
 8006a64:	0b5b      	lsrs	r3, r3, #13
 8006a66:	d105      	bne.n	8006a74 <HAL_ADC_ConfigChannel+0x9c>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	0e9b      	lsrs	r3, r3, #26
 8006a6e:	221f      	movs	r2, #31
 8006a70:	4013      	ands	r3, r2
 8006a72:	e098      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	d000      	beq.n	8006a80 <HAL_ADC_ConfigChannel+0xa8>
 8006a7e:	e091      	b.n	8006ba4 <HAL_ADC_ConfigChannel+0x1cc>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2202      	movs	r2, #2
 8006a86:	4013      	ands	r3, r2
 8006a88:	d000      	beq.n	8006a8c <HAL_ADC_ConfigChannel+0xb4>
 8006a8a:	e089      	b.n	8006ba0 <HAL_ADC_ConfigChannel+0x1c8>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2204      	movs	r2, #4
 8006a92:	4013      	ands	r3, r2
 8006a94:	d000      	beq.n	8006a98 <HAL_ADC_ConfigChannel+0xc0>
 8006a96:	e081      	b.n	8006b9c <HAL_ADC_ConfigChannel+0x1c4>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	d000      	beq.n	8006aa4 <HAL_ADC_ConfigChannel+0xcc>
 8006aa2:	e079      	b.n	8006b98 <HAL_ADC_ConfigChannel+0x1c0>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2210      	movs	r2, #16
 8006aaa:	4013      	ands	r3, r2
 8006aac:	d000      	beq.n	8006ab0 <HAL_ADC_ConfigChannel+0xd8>
 8006aae:	e071      	b.n	8006b94 <HAL_ADC_ConfigChannel+0x1bc>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	d000      	beq.n	8006abc <HAL_ADC_ConfigChannel+0xe4>
 8006aba:	e069      	b.n	8006b90 <HAL_ADC_ConfigChannel+0x1b8>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2240      	movs	r2, #64	; 0x40
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	d000      	beq.n	8006ac8 <HAL_ADC_ConfigChannel+0xf0>
 8006ac6:	e061      	b.n	8006b8c <HAL_ADC_ConfigChannel+0x1b4>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2280      	movs	r2, #128	; 0x80
 8006ace:	4013      	ands	r3, r2
 8006ad0:	d000      	beq.n	8006ad4 <HAL_ADC_ConfigChannel+0xfc>
 8006ad2:	e059      	b.n	8006b88 <HAL_ADC_ConfigChannel+0x1b0>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	2380      	movs	r3, #128	; 0x80
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	4013      	ands	r3, r2
 8006ade:	d151      	bne.n	8006b84 <HAL_ADC_ConfigChannel+0x1ac>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	2380      	movs	r3, #128	; 0x80
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d149      	bne.n	8006b80 <HAL_ADC_ConfigChannel+0x1a8>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	4013      	ands	r3, r2
 8006af6:	d141      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0x1a4>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	2380      	movs	r3, #128	; 0x80
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	4013      	ands	r3, r2
 8006b02:	d139      	bne.n	8006b78 <HAL_ADC_ConfigChannel+0x1a0>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	2380      	movs	r3, #128	; 0x80
 8006b0a:	015b      	lsls	r3, r3, #5
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	d131      	bne.n	8006b74 <HAL_ADC_ConfigChannel+0x19c>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	2380      	movs	r3, #128	; 0x80
 8006b16:	019b      	lsls	r3, r3, #6
 8006b18:	4013      	ands	r3, r2
 8006b1a:	d129      	bne.n	8006b70 <HAL_ADC_ConfigChannel+0x198>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	2380      	movs	r3, #128	; 0x80
 8006b22:	01db      	lsls	r3, r3, #7
 8006b24:	4013      	ands	r3, r2
 8006b26:	d121      	bne.n	8006b6c <HAL_ADC_ConfigChannel+0x194>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	4013      	ands	r3, r2
 8006b32:	d119      	bne.n	8006b68 <HAL_ADC_ConfigChannel+0x190>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	2380      	movs	r3, #128	; 0x80
 8006b3a:	025b      	lsls	r3, r3, #9
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	d111      	bne.n	8006b64 <HAL_ADC_ConfigChannel+0x18c>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	2380      	movs	r3, #128	; 0x80
 8006b46:	029b      	lsls	r3, r3, #10
 8006b48:	4013      	ands	r3, r2
 8006b4a:	d109      	bne.n	8006b60 <HAL_ADC_ConfigChannel+0x188>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	2380      	movs	r3, #128	; 0x80
 8006b52:	02db      	lsls	r3, r3, #11
 8006b54:	4013      	ands	r3, r2
 8006b56:	d001      	beq.n	8006b5c <HAL_ADC_ConfigChannel+0x184>
 8006b58:	2312      	movs	r3, #18
 8006b5a:	e024      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e022      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b60:	2311      	movs	r3, #17
 8006b62:	e020      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b64:	2310      	movs	r3, #16
 8006b66:	e01e      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b68:	230f      	movs	r3, #15
 8006b6a:	e01c      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b6c:	230e      	movs	r3, #14
 8006b6e:	e01a      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b70:	230d      	movs	r3, #13
 8006b72:	e018      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b74:	230c      	movs	r3, #12
 8006b76:	e016      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b78:	230b      	movs	r3, #11
 8006b7a:	e014      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b7c:	230a      	movs	r3, #10
 8006b7e:	e012      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b80:	2309      	movs	r3, #9
 8006b82:	e010      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b84:	2308      	movs	r3, #8
 8006b86:	e00e      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b88:	2307      	movs	r3, #7
 8006b8a:	e00c      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b8c:	2306      	movs	r3, #6
 8006b8e:	e00a      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b90:	2305      	movs	r3, #5
 8006b92:	e008      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b94:	2304      	movs	r3, #4
 8006b96:	e006      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e004      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e002      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <HAL_ADC_ConfigChannel+0x1ce>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	6852      	ldr	r2, [r2, #4]
 8006baa:	201f      	movs	r0, #31
 8006bac:	4002      	ands	r2, r0
 8006bae:	4093      	lsls	r3, r2
 8006bb0:	000a      	movs	r2, r1
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	089b      	lsrs	r3, r3, #2
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d808      	bhi.n	8006bda <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	6859      	ldr	r1, [r3, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	001a      	movs	r2, r3
 8006bd6:	f7ff fcae 	bl	8006536 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	6819      	ldr	r1, [r3, #0]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	001a      	movs	r2, r3
 8006be8:	f7ff fce8 	bl	80065bc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	db00      	blt.n	8006bf6 <HAL_ADC_ConfigChannel+0x21e>
 8006bf4:	e0bc      	b.n	8006d70 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006bf6:	4b50      	ldr	r3, [pc, #320]	; (8006d38 <HAL_ADC_ConfigChannel+0x360>)
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f7ff fc5b 	bl	80064b4 <LL_ADC_GetCommonPathInternalCh>
 8006bfe:	0003      	movs	r3, r0
 8006c00:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a4d      	ldr	r2, [pc, #308]	; (8006d3c <HAL_ADC_ConfigChannel+0x364>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d122      	bne.n	8006c52 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	2380      	movs	r3, #128	; 0x80
 8006c10:	041b      	lsls	r3, r3, #16
 8006c12:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006c14:	d11d      	bne.n	8006c52 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2280      	movs	r2, #128	; 0x80
 8006c1a:	0412      	lsls	r2, r2, #16
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	4a46      	ldr	r2, [pc, #280]	; (8006d38 <HAL_ADC_ConfigChannel+0x360>)
 8006c20:	0019      	movs	r1, r3
 8006c22:	0010      	movs	r0, r2
 8006c24:	f7ff fc32 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c28:	4b45      	ldr	r3, [pc, #276]	; (8006d40 <HAL_ADC_ConfigChannel+0x368>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4945      	ldr	r1, [pc, #276]	; (8006d44 <HAL_ADC_ConfigChannel+0x36c>)
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f7f9 fa8e 	bl	8000150 <__udivsi3>
 8006c34:	0003      	movs	r3, r0
 8006c36:	1c5a      	adds	r2, r3, #1
 8006c38:	0013      	movs	r3, r2
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	189b      	adds	r3, r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006c42:	e002      	b.n	8006c4a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f9      	bne.n	8006c44 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006c50:	e08e      	b.n	8006d70 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a3c      	ldr	r2, [pc, #240]	; (8006d48 <HAL_ADC_ConfigChannel+0x370>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d10e      	bne.n	8006c7a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	2380      	movs	r3, #128	; 0x80
 8006c60:	045b      	lsls	r3, r3, #17
 8006c62:	4013      	ands	r3, r2
 8006c64:	d109      	bne.n	8006c7a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2280      	movs	r2, #128	; 0x80
 8006c6a:	0452      	lsls	r2, r2, #17
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	4a32      	ldr	r2, [pc, #200]	; (8006d38 <HAL_ADC_ConfigChannel+0x360>)
 8006c70:	0019      	movs	r1, r3
 8006c72:	0010      	movs	r0, r2
 8006c74:	f7ff fc0a 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
 8006c78:	e07a      	b.n	8006d70 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a33      	ldr	r2, [pc, #204]	; (8006d4c <HAL_ADC_ConfigChannel+0x374>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d000      	beq.n	8006c86 <HAL_ADC_ConfigChannel+0x2ae>
 8006c84:	e074      	b.n	8006d70 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	2380      	movs	r3, #128	; 0x80
 8006c8a:	03db      	lsls	r3, r3, #15
 8006c8c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006c8e:	d000      	beq.n	8006c92 <HAL_ADC_ConfigChannel+0x2ba>
 8006c90:	e06e      	b.n	8006d70 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2280      	movs	r2, #128	; 0x80
 8006c96:	03d2      	lsls	r2, r2, #15
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	4a27      	ldr	r2, [pc, #156]	; (8006d38 <HAL_ADC_ConfigChannel+0x360>)
 8006c9c:	0019      	movs	r1, r3
 8006c9e:	0010      	movs	r0, r2
 8006ca0:	f7ff fbf4 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
 8006ca4:	e064      	b.n	8006d70 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	2380      	movs	r3, #128	; 0x80
 8006cac:	061b      	lsls	r3, r3, #24
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d004      	beq.n	8006cbc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006cb6:	4a1f      	ldr	r2, [pc, #124]	; (8006d34 <HAL_ADC_ConfigChannel+0x35c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d107      	bne.n	8006ccc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	0010      	movs	r0, r2
 8006cc8:	f7ff fc66 	bl	8006598 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	da4d      	bge.n	8006d70 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006cd4:	4b18      	ldr	r3, [pc, #96]	; (8006d38 <HAL_ADC_ConfigChannel+0x360>)
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f7ff fbec 	bl	80064b4 <LL_ADC_GetCommonPathInternalCh>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <HAL_ADC_ConfigChannel+0x364>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d108      	bne.n	8006cfc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	4a18      	ldr	r2, [pc, #96]	; (8006d50 <HAL_ADC_ConfigChannel+0x378>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	4a11      	ldr	r2, [pc, #68]	; (8006d38 <HAL_ADC_ConfigChannel+0x360>)
 8006cf2:	0019      	movs	r1, r3
 8006cf4:	0010      	movs	r0, r2
 8006cf6:	f7ff fbc9 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
 8006cfa:	e039      	b.n	8006d70 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a11      	ldr	r2, [pc, #68]	; (8006d48 <HAL_ADC_ConfigChannel+0x370>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d108      	bne.n	8006d18 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	4a12      	ldr	r2, [pc, #72]	; (8006d54 <HAL_ADC_ConfigChannel+0x37c>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	4a0a      	ldr	r2, [pc, #40]	; (8006d38 <HAL_ADC_ConfigChannel+0x360>)
 8006d0e:	0019      	movs	r1, r3
 8006d10:	0010      	movs	r0, r2
 8006d12:	f7ff fbbb 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
 8006d16:	e02b      	b.n	8006d70 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a0b      	ldr	r2, [pc, #44]	; (8006d4c <HAL_ADC_ConfigChannel+0x374>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d126      	bne.n	8006d70 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	4a0c      	ldr	r2, [pc, #48]	; (8006d58 <HAL_ADC_ConfigChannel+0x380>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	4a03      	ldr	r2, [pc, #12]	; (8006d38 <HAL_ADC_ConfigChannel+0x360>)
 8006d2a:	0019      	movs	r1, r3
 8006d2c:	0010      	movs	r0, r2
 8006d2e:	f7ff fbad 	bl	800648c <LL_ADC_SetCommonPathInternalCh>
 8006d32:	e01d      	b.n	8006d70 <HAL_ADC_ConfigChannel+0x398>
 8006d34:	80000004 	.word	0x80000004
 8006d38:	40012708 	.word	0x40012708
 8006d3c:	b0001000 	.word	0xb0001000
 8006d40:	20000094 	.word	0x20000094
 8006d44:	00030d40 	.word	0x00030d40
 8006d48:	b8004000 	.word	0xb8004000
 8006d4c:	b4002000 	.word	0xb4002000
 8006d50:	ff7fffff 	.word	0xff7fffff
 8006d54:	feffffff 	.word	0xfeffffff
 8006d58:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d60:	2220      	movs	r2, #32
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006d68:	2317      	movs	r3, #23
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2254      	movs	r2, #84	; 0x54
 8006d74:	2100      	movs	r1, #0
 8006d76:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006d78:	2317      	movs	r3, #23
 8006d7a:	18fb      	adds	r3, r7, r3
 8006d7c:	781b      	ldrb	r3, [r3, #0]
}
 8006d7e:	0018      	movs	r0, r3
 8006d80:	46bd      	mov	sp, r7
 8006d82:	b006      	add	sp, #24
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	46c0      	nop			; (mov r8, r8)

08006d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	0002      	movs	r2, r0
 8006d90:	1dfb      	adds	r3, r7, #7
 8006d92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006d94:	1dfb      	adds	r3, r7, #7
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b7f      	cmp	r3, #127	; 0x7f
 8006d9a:	d809      	bhi.n	8006db0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d9c:	1dfb      	adds	r3, r7, #7
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	001a      	movs	r2, r3
 8006da2:	231f      	movs	r3, #31
 8006da4:	401a      	ands	r2, r3
 8006da6:	4b04      	ldr	r3, [pc, #16]	; (8006db8 <__NVIC_EnableIRQ+0x30>)
 8006da8:	2101      	movs	r1, #1
 8006daa:	4091      	lsls	r1, r2
 8006dac:	000a      	movs	r2, r1
 8006dae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006db0:	46c0      	nop			; (mov r8, r8)
 8006db2:	46bd      	mov	sp, r7
 8006db4:	b002      	add	sp, #8
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	e000e100 	.word	0xe000e100

08006dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006dbc:	b590      	push	{r4, r7, lr}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	0002      	movs	r2, r0
 8006dc4:	6039      	str	r1, [r7, #0]
 8006dc6:	1dfb      	adds	r3, r7, #7
 8006dc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006dca:	1dfb      	adds	r3, r7, #7
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd0:	d828      	bhi.n	8006e24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006dd2:	4a2f      	ldr	r2, [pc, #188]	; (8006e90 <__NVIC_SetPriority+0xd4>)
 8006dd4:	1dfb      	adds	r3, r7, #7
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	b25b      	sxtb	r3, r3
 8006dda:	089b      	lsrs	r3, r3, #2
 8006ddc:	33c0      	adds	r3, #192	; 0xc0
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	589b      	ldr	r3, [r3, r2]
 8006de2:	1dfa      	adds	r2, r7, #7
 8006de4:	7812      	ldrb	r2, [r2, #0]
 8006de6:	0011      	movs	r1, r2
 8006de8:	2203      	movs	r2, #3
 8006dea:	400a      	ands	r2, r1
 8006dec:	00d2      	lsls	r2, r2, #3
 8006dee:	21ff      	movs	r1, #255	; 0xff
 8006df0:	4091      	lsls	r1, r2
 8006df2:	000a      	movs	r2, r1
 8006df4:	43d2      	mvns	r2, r2
 8006df6:	401a      	ands	r2, r3
 8006df8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	019b      	lsls	r3, r3, #6
 8006dfe:	22ff      	movs	r2, #255	; 0xff
 8006e00:	401a      	ands	r2, r3
 8006e02:	1dfb      	adds	r3, r7, #7
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	0018      	movs	r0, r3
 8006e08:	2303      	movs	r3, #3
 8006e0a:	4003      	ands	r3, r0
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e10:	481f      	ldr	r0, [pc, #124]	; (8006e90 <__NVIC_SetPriority+0xd4>)
 8006e12:	1dfb      	adds	r3, r7, #7
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	b25b      	sxtb	r3, r3
 8006e18:	089b      	lsrs	r3, r3, #2
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	33c0      	adds	r3, #192	; 0xc0
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006e22:	e031      	b.n	8006e88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e24:	4a1b      	ldr	r2, [pc, #108]	; (8006e94 <__NVIC_SetPriority+0xd8>)
 8006e26:	1dfb      	adds	r3, r7, #7
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	0019      	movs	r1, r3
 8006e2c:	230f      	movs	r3, #15
 8006e2e:	400b      	ands	r3, r1
 8006e30:	3b08      	subs	r3, #8
 8006e32:	089b      	lsrs	r3, r3, #2
 8006e34:	3306      	adds	r3, #6
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	18d3      	adds	r3, r2, r3
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	1dfa      	adds	r2, r7, #7
 8006e40:	7812      	ldrb	r2, [r2, #0]
 8006e42:	0011      	movs	r1, r2
 8006e44:	2203      	movs	r2, #3
 8006e46:	400a      	ands	r2, r1
 8006e48:	00d2      	lsls	r2, r2, #3
 8006e4a:	21ff      	movs	r1, #255	; 0xff
 8006e4c:	4091      	lsls	r1, r2
 8006e4e:	000a      	movs	r2, r1
 8006e50:	43d2      	mvns	r2, r2
 8006e52:	401a      	ands	r2, r3
 8006e54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	019b      	lsls	r3, r3, #6
 8006e5a:	22ff      	movs	r2, #255	; 0xff
 8006e5c:	401a      	ands	r2, r3
 8006e5e:	1dfb      	adds	r3, r7, #7
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	0018      	movs	r0, r3
 8006e64:	2303      	movs	r3, #3
 8006e66:	4003      	ands	r3, r0
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e6c:	4809      	ldr	r0, [pc, #36]	; (8006e94 <__NVIC_SetPriority+0xd8>)
 8006e6e:	1dfb      	adds	r3, r7, #7
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	001c      	movs	r4, r3
 8006e74:	230f      	movs	r3, #15
 8006e76:	4023      	ands	r3, r4
 8006e78:	3b08      	subs	r3, #8
 8006e7a:	089b      	lsrs	r3, r3, #2
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	3306      	adds	r3, #6
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	18c3      	adds	r3, r0, r3
 8006e84:	3304      	adds	r3, #4
 8006e86:	601a      	str	r2, [r3, #0]
}
 8006e88:	46c0      	nop			; (mov r8, r8)
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	b003      	add	sp, #12
 8006e8e:	bd90      	pop	{r4, r7, pc}
 8006e90:	e000e100 	.word	0xe000e100
 8006e94:	e000ed00 	.word	0xe000ed00

08006e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	1e5a      	subs	r2, r3, #1
 8006ea4:	2380      	movs	r3, #128	; 0x80
 8006ea6:	045b      	lsls	r3, r3, #17
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d301      	bcc.n	8006eb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006eac:	2301      	movs	r3, #1
 8006eae:	e010      	b.n	8006ed2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006eb0:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <SysTick_Config+0x44>)
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	3a01      	subs	r2, #1
 8006eb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006eb8:	2301      	movs	r3, #1
 8006eba:	425b      	negs	r3, r3
 8006ebc:	2103      	movs	r1, #3
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	f7ff ff7c 	bl	8006dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ec4:	4b05      	ldr	r3, [pc, #20]	; (8006edc <SysTick_Config+0x44>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006eca:	4b04      	ldr	r3, [pc, #16]	; (8006edc <SysTick_Config+0x44>)
 8006ecc:	2207      	movs	r2, #7
 8006ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	b002      	add	sp, #8
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	e000e010 	.word	0xe000e010

08006ee0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	210f      	movs	r1, #15
 8006eec:	187b      	adds	r3, r7, r1
 8006eee:	1c02      	adds	r2, r0, #0
 8006ef0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	187b      	adds	r3, r7, r1
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	b25b      	sxtb	r3, r3
 8006efa:	0011      	movs	r1, r2
 8006efc:	0018      	movs	r0, r3
 8006efe:	f7ff ff5d 	bl	8006dbc <__NVIC_SetPriority>
}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	46bd      	mov	sp, r7
 8006f06:	b004      	add	sp, #16
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b082      	sub	sp, #8
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	0002      	movs	r2, r0
 8006f12:	1dfb      	adds	r3, r7, #7
 8006f14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f16:	1dfb      	adds	r3, r7, #7
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	b25b      	sxtb	r3, r3
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	f7ff ff33 	bl	8006d88 <__NVIC_EnableIRQ>
}
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	46bd      	mov	sp, r7
 8006f26:	b002      	add	sp, #8
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	0018      	movs	r0, r3
 8006f36:	f7ff ffaf 	bl	8006e98 <SysTick_Config>
 8006f3a:	0003      	movs	r3, r0
}
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b002      	add	sp, #8
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e077      	b.n	8007046 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a3d      	ldr	r2, [pc, #244]	; (8007050 <HAL_DMA_Init+0x10c>)
 8006f5c:	4694      	mov	ip, r2
 8006f5e:	4463      	add	r3, ip
 8006f60:	2114      	movs	r1, #20
 8006f62:	0018      	movs	r0, r3
 8006f64:	f7f9 f8f4 	bl	8000150 <__udivsi3>
 8006f68:	0003      	movs	r3, r0
 8006f6a:	009a      	lsls	r2, r3, #2
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2225      	movs	r2, #37	; 0x25
 8006f74:	2102      	movs	r1, #2
 8006f76:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4934      	ldr	r1, [pc, #208]	; (8007054 <HAL_DMA_Init+0x110>)
 8006f84:	400a      	ands	r2, r1
 8006f86:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6819      	ldr	r1, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f000 fa8d 	bl	80074e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	2380      	movs	r3, #128	; 0x80
 8006fcc:	01db      	lsls	r3, r3, #7
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d102      	bne.n	8006fd8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe0:	213f      	movs	r1, #63	; 0x3f
 8006fe2:	400a      	ands	r2, r1
 8006fe4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006fee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d011      	beq.n	800701c <HAL_DMA_Init+0xd8>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d80d      	bhi.n	800701c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	0018      	movs	r0, r3
 8007004:	f000 fa98 	bl	8007538 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	e008      	b.n	800702e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2225      	movs	r2, #37	; 0x25
 8007038:	2101      	movs	r1, #1
 800703a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2224      	movs	r2, #36	; 0x24
 8007040:	2100      	movs	r1, #0
 8007042:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	0018      	movs	r0, r3
 8007048:	46bd      	mov	sp, r7
 800704a:	b002      	add	sp, #8
 800704c:	bd80      	pop	{r7, pc}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	bffdfff8 	.word	0xbffdfff8
 8007054:	ffff800f 	.word	0xffff800f

08007058 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007066:	2317      	movs	r3, #23
 8007068:	18fb      	adds	r3, r7, r3
 800706a:	2200      	movs	r2, #0
 800706c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2224      	movs	r2, #36	; 0x24
 8007072:	5c9b      	ldrb	r3, [r3, r2]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_DMA_Start_IT+0x24>
 8007078:	2302      	movs	r3, #2
 800707a:	e06f      	b.n	800715c <HAL_DMA_Start_IT+0x104>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2224      	movs	r2, #36	; 0x24
 8007080:	2101      	movs	r1, #1
 8007082:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2225      	movs	r2, #37	; 0x25
 8007088:	5c9b      	ldrb	r3, [r3, r2]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b01      	cmp	r3, #1
 800708e:	d157      	bne.n	8007140 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2225      	movs	r2, #37	; 0x25
 8007094:	2102      	movs	r1, #2
 8007096:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2101      	movs	r1, #1
 80070aa:	438a      	bics	r2, r1
 80070ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 f9d3 	bl	8007460 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d008      	beq.n	80070d4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	210e      	movs	r1, #14
 80070ce:	430a      	orrs	r2, r1
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e00f      	b.n	80070f4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2104      	movs	r1, #4
 80070e0:	438a      	bics	r2, r1
 80070e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	210a      	movs	r1, #10
 80070f0:	430a      	orrs	r2, r1
 80070f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	2380      	movs	r3, #128	; 0x80
 80070fc:	025b      	lsls	r3, r3, #9
 80070fe:	4013      	ands	r3, r2
 8007100:	d008      	beq.n	8007114 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710c:	2180      	movs	r1, #128	; 0x80
 800710e:	0049      	lsls	r1, r1, #1
 8007110:	430a      	orrs	r2, r1
 8007112:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007126:	2180      	movs	r1, #128	; 0x80
 8007128:	0049      	lsls	r1, r1, #1
 800712a:	430a      	orrs	r2, r1
 800712c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2101      	movs	r1, #1
 800713a:	430a      	orrs	r2, r1
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e00a      	b.n	8007156 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2280      	movs	r2, #128	; 0x80
 8007144:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2224      	movs	r2, #36	; 0x24
 800714a:	2100      	movs	r1, #0
 800714c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800714e:	2317      	movs	r3, #23
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	2201      	movs	r2, #1
 8007154:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007156:	2317      	movs	r3, #23
 8007158:	18fb      	adds	r3, r7, r3
 800715a:	781b      	ldrb	r3, [r3, #0]
}
 800715c:	0018      	movs	r0, r3
 800715e:	46bd      	mov	sp, r7
 8007160:	b006      	add	sp, #24
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e050      	b.n	8007218 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2225      	movs	r2, #37	; 0x25
 800717a:	5c9b      	ldrb	r3, [r3, r2]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b02      	cmp	r3, #2
 8007180:	d008      	beq.n	8007194 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2204      	movs	r2, #4
 8007186:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2224      	movs	r2, #36	; 0x24
 800718c:	2100      	movs	r1, #0
 800718e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e041      	b.n	8007218 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	210e      	movs	r1, #14
 80071a0:	438a      	bics	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ae:	491c      	ldr	r1, [pc, #112]	; (8007220 <HAL_DMA_Abort+0xbc>)
 80071b0:	400a      	ands	r2, r1
 80071b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2101      	movs	r1, #1
 80071c0:	438a      	bics	r2, r1
 80071c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80071c4:	4b17      	ldr	r3, [pc, #92]	; (8007224 <HAL_DMA_Abort+0xc0>)
 80071c6:	6859      	ldr	r1, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071cc:	221c      	movs	r2, #28
 80071ce:	4013      	ands	r3, r2
 80071d0:	2201      	movs	r2, #1
 80071d2:	409a      	lsls	r2, r3
 80071d4:	4b13      	ldr	r3, [pc, #76]	; (8007224 <HAL_DMA_Abort+0xc0>)
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80071e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00c      	beq.n	8007206 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f6:	490a      	ldr	r1, [pc, #40]	; (8007220 <HAL_DMA_Abort+0xbc>)
 80071f8:	400a      	ands	r2, r1
 80071fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007204:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2225      	movs	r2, #37	; 0x25
 800720a:	2101      	movs	r1, #1
 800720c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2224      	movs	r2, #36	; 0x24
 8007212:	2100      	movs	r1, #0
 8007214:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	0018      	movs	r0, r3
 800721a:	46bd      	mov	sp, r7
 800721c:	b002      	add	sp, #8
 800721e:	bd80      	pop	{r7, pc}
 8007220:	fffffeff 	.word	0xfffffeff
 8007224:	40020000 	.word	0x40020000

08007228 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007230:	210f      	movs	r1, #15
 8007232:	187b      	adds	r3, r7, r1
 8007234:	2200      	movs	r2, #0
 8007236:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2225      	movs	r2, #37	; 0x25
 800723c:	5c9b      	ldrb	r3, [r3, r2]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d006      	beq.n	8007252 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2204      	movs	r2, #4
 8007248:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800724a:	187b      	adds	r3, r7, r1
 800724c:	2201      	movs	r2, #1
 800724e:	701a      	strb	r2, [r3, #0]
 8007250:	e049      	b.n	80072e6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	210e      	movs	r1, #14
 800725e:	438a      	bics	r2, r1
 8007260:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2101      	movs	r1, #1
 800726e:	438a      	bics	r2, r1
 8007270:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727c:	491d      	ldr	r1, [pc, #116]	; (80072f4 <HAL_DMA_Abort_IT+0xcc>)
 800727e:	400a      	ands	r2, r1
 8007280:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007282:	4b1d      	ldr	r3, [pc, #116]	; (80072f8 <HAL_DMA_Abort_IT+0xd0>)
 8007284:	6859      	ldr	r1, [r3, #4]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	221c      	movs	r2, #28
 800728c:	4013      	ands	r3, r2
 800728e:	2201      	movs	r2, #1
 8007290:	409a      	lsls	r2, r3
 8007292:	4b19      	ldr	r3, [pc, #100]	; (80072f8 <HAL_DMA_Abort_IT+0xd0>)
 8007294:	430a      	orrs	r2, r1
 8007296:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80072a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00c      	beq.n	80072c4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b4:	490f      	ldr	r1, [pc, #60]	; (80072f4 <HAL_DMA_Abort_IT+0xcc>)
 80072b6:	400a      	ands	r2, r1
 80072b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80072c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2225      	movs	r2, #37	; 0x25
 80072c8:	2101      	movs	r1, #1
 80072ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	; 0x24
 80072d0:	2100      	movs	r1, #0
 80072d2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	0010      	movs	r0, r2
 80072e4:	4798      	blx	r3
    }
  }
  return status;
 80072e6:	230f      	movs	r3, #15
 80072e8:	18fb      	adds	r3, r7, r3
 80072ea:	781b      	ldrb	r3, [r3, #0]
}
 80072ec:	0018      	movs	r0, r3
 80072ee:	46bd      	mov	sp, r7
 80072f0:	b004      	add	sp, #16
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	fffffeff 	.word	0xfffffeff
 80072f8:	40020000 	.word	0x40020000

080072fc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007304:	4b55      	ldr	r3, [pc, #340]	; (800745c <HAL_DMA_IRQHandler+0x160>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	221c      	movs	r2, #28
 8007318:	4013      	ands	r3, r2
 800731a:	2204      	movs	r2, #4
 800731c:	409a      	lsls	r2, r3
 800731e:	0013      	movs	r3, r2
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	4013      	ands	r3, r2
 8007324:	d027      	beq.n	8007376 <HAL_DMA_IRQHandler+0x7a>
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2204      	movs	r2, #4
 800732a:	4013      	ands	r3, r2
 800732c:	d023      	beq.n	8007376 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2220      	movs	r2, #32
 8007336:	4013      	ands	r3, r2
 8007338:	d107      	bne.n	800734a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2104      	movs	r1, #4
 8007346:	438a      	bics	r2, r1
 8007348:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800734a:	4b44      	ldr	r3, [pc, #272]	; (800745c <HAL_DMA_IRQHandler+0x160>)
 800734c:	6859      	ldr	r1, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	221c      	movs	r2, #28
 8007354:	4013      	ands	r3, r2
 8007356:	2204      	movs	r2, #4
 8007358:	409a      	lsls	r2, r3
 800735a:	4b40      	ldr	r3, [pc, #256]	; (800745c <HAL_DMA_IRQHandler+0x160>)
 800735c:	430a      	orrs	r2, r1
 800735e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	2b00      	cmp	r3, #0
 8007366:	d100      	bne.n	800736a <HAL_DMA_IRQHandler+0x6e>
 8007368:	e073      	b.n	8007452 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	0010      	movs	r0, r2
 8007372:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007374:	e06d      	b.n	8007452 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	221c      	movs	r2, #28
 800737c:	4013      	ands	r3, r2
 800737e:	2202      	movs	r2, #2
 8007380:	409a      	lsls	r2, r3
 8007382:	0013      	movs	r3, r2
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	4013      	ands	r3, r2
 8007388:	d02e      	beq.n	80073e8 <HAL_DMA_IRQHandler+0xec>
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2202      	movs	r2, #2
 800738e:	4013      	ands	r3, r2
 8007390:	d02a      	beq.n	80073e8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2220      	movs	r2, #32
 800739a:	4013      	ands	r3, r2
 800739c:	d10b      	bne.n	80073b6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	210a      	movs	r1, #10
 80073aa:	438a      	bics	r2, r1
 80073ac:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2225      	movs	r2, #37	; 0x25
 80073b2:	2101      	movs	r1, #1
 80073b4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80073b6:	4b29      	ldr	r3, [pc, #164]	; (800745c <HAL_DMA_IRQHandler+0x160>)
 80073b8:	6859      	ldr	r1, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	221c      	movs	r2, #28
 80073c0:	4013      	ands	r3, r2
 80073c2:	2202      	movs	r2, #2
 80073c4:	409a      	lsls	r2, r3
 80073c6:	4b25      	ldr	r3, [pc, #148]	; (800745c <HAL_DMA_IRQHandler+0x160>)
 80073c8:	430a      	orrs	r2, r1
 80073ca:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2224      	movs	r2, #36	; 0x24
 80073d0:	2100      	movs	r1, #0
 80073d2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d03a      	beq.n	8007452 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	0010      	movs	r0, r2
 80073e4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80073e6:	e034      	b.n	8007452 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	221c      	movs	r2, #28
 80073ee:	4013      	ands	r3, r2
 80073f0:	2208      	movs	r2, #8
 80073f2:	409a      	lsls	r2, r3
 80073f4:	0013      	movs	r3, r2
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	4013      	ands	r3, r2
 80073fa:	d02b      	beq.n	8007454 <HAL_DMA_IRQHandler+0x158>
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2208      	movs	r2, #8
 8007400:	4013      	ands	r3, r2
 8007402:	d027      	beq.n	8007454 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	210e      	movs	r1, #14
 8007410:	438a      	bics	r2, r1
 8007412:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007414:	4b11      	ldr	r3, [pc, #68]	; (800745c <HAL_DMA_IRQHandler+0x160>)
 8007416:	6859      	ldr	r1, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	221c      	movs	r2, #28
 800741e:	4013      	ands	r3, r2
 8007420:	2201      	movs	r2, #1
 8007422:	409a      	lsls	r2, r3
 8007424:	4b0d      	ldr	r3, [pc, #52]	; (800745c <HAL_DMA_IRQHandler+0x160>)
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2225      	movs	r2, #37	; 0x25
 8007434:	2101      	movs	r1, #1
 8007436:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2224      	movs	r2, #36	; 0x24
 800743c:	2100      	movs	r1, #0
 800743e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	0010      	movs	r0, r2
 8007450:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	46c0      	nop			; (mov r8, r8)
}
 8007456:	46bd      	mov	sp, r7
 8007458:	b004      	add	sp, #16
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40020000 	.word	0x40020000

08007460 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007476:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800747c:	2b00      	cmp	r3, #0
 800747e:	d004      	beq.n	800748a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007488:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800748a:	4b14      	ldr	r3, [pc, #80]	; (80074dc <DMA_SetConfig+0x7c>)
 800748c:	6859      	ldr	r1, [r3, #4]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	221c      	movs	r2, #28
 8007494:	4013      	ands	r3, r2
 8007496:	2201      	movs	r2, #1
 8007498:	409a      	lsls	r2, r3
 800749a:	4b10      	ldr	r3, [pc, #64]	; (80074dc <DMA_SetConfig+0x7c>)
 800749c:	430a      	orrs	r2, r1
 800749e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	2b10      	cmp	r3, #16
 80074ae:	d108      	bne.n	80074c2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80074c0:	e007      	b.n	80074d2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	60da      	str	r2, [r3, #12]
}
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	46bd      	mov	sp, r7
 80074d6:	b004      	add	sp, #16
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	46c0      	nop			; (mov r8, r8)
 80074dc:	40020000 	.word	0x40020000

080074e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ec:	089b      	lsrs	r3, r3, #2
 80074ee:	4a10      	ldr	r2, [pc, #64]	; (8007530 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80074f0:	4694      	mov	ip, r2
 80074f2:	4463      	add	r3, ip
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	001a      	movs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	001a      	movs	r2, r3
 8007502:	23ff      	movs	r3, #255	; 0xff
 8007504:	4013      	ands	r3, r2
 8007506:	3b08      	subs	r3, #8
 8007508:	2114      	movs	r1, #20
 800750a:	0018      	movs	r0, r3
 800750c:	f7f8 fe20 	bl	8000150 <__udivsi3>
 8007510:	0003      	movs	r3, r0
 8007512:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a07      	ldr	r2, [pc, #28]	; (8007534 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007518:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	221f      	movs	r2, #31
 800751e:	4013      	ands	r3, r2
 8007520:	2201      	movs	r2, #1
 8007522:	409a      	lsls	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007528:	46c0      	nop			; (mov r8, r8)
 800752a:	46bd      	mov	sp, r7
 800752c:	b004      	add	sp, #16
 800752e:	bd80      	pop	{r7, pc}
 8007530:	10008200 	.word	0x10008200
 8007534:	40020880 	.word	0x40020880

08007538 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	223f      	movs	r2, #63	; 0x3f
 8007546:	4013      	ands	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a0a      	ldr	r2, [pc, #40]	; (8007578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800754e:	4694      	mov	ip, r2
 8007550:	4463      	add	r3, ip
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	001a      	movs	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a07      	ldr	r2, [pc, #28]	; (800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800755e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3b01      	subs	r3, #1
 8007564:	2203      	movs	r2, #3
 8007566:	4013      	ands	r3, r2
 8007568:	2201      	movs	r2, #1
 800756a:	409a      	lsls	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8007570:	46c0      	nop			; (mov r8, r8)
 8007572:	46bd      	mov	sp, r7
 8007574:	b004      	add	sp, #16
 8007576:	bd80      	pop	{r7, pc}
 8007578:	1000823f 	.word	0x1000823f
 800757c:	40020940 	.word	0x40020940

08007580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800758a:	2300      	movs	r3, #0
 800758c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800758e:	e147      	b.n	8007820 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2101      	movs	r1, #1
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4091      	lsls	r1, r2
 800759a:	000a      	movs	r2, r1
 800759c:	4013      	ands	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d100      	bne.n	80075a8 <HAL_GPIO_Init+0x28>
 80075a6:	e138      	b.n	800781a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2203      	movs	r2, #3
 80075ae:	4013      	ands	r3, r2
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d005      	beq.n	80075c0 <HAL_GPIO_Init+0x40>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2203      	movs	r2, #3
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d130      	bne.n	8007622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	2203      	movs	r2, #3
 80075cc:	409a      	lsls	r2, r3
 80075ce:	0013      	movs	r3, r2
 80075d0:	43da      	mvns	r2, r3
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	4013      	ands	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	68da      	ldr	r2, [r3, #12]
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	409a      	lsls	r2, r3
 80075e2:	0013      	movs	r3, r2
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80075f6:	2201      	movs	r2, #1
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	409a      	lsls	r2, r3
 80075fc:	0013      	movs	r3, r2
 80075fe:	43da      	mvns	r2, r3
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	4013      	ands	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	091b      	lsrs	r3, r3, #4
 800760c:	2201      	movs	r2, #1
 800760e:	401a      	ands	r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	409a      	lsls	r2, r3
 8007614:	0013      	movs	r3, r2
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2203      	movs	r2, #3
 8007628:	4013      	ands	r3, r2
 800762a:	2b03      	cmp	r3, #3
 800762c:	d017      	beq.n	800765e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	2203      	movs	r2, #3
 800763a:	409a      	lsls	r2, r3
 800763c:	0013      	movs	r3, r2
 800763e:	43da      	mvns	r2, r3
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	4013      	ands	r3, r2
 8007644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	689a      	ldr	r2, [r3, #8]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	409a      	lsls	r2, r3
 8007650:	0013      	movs	r3, r2
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	4313      	orrs	r3, r2
 8007656:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	2203      	movs	r2, #3
 8007664:	4013      	ands	r3, r2
 8007666:	2b02      	cmp	r3, #2
 8007668:	d123      	bne.n	80076b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	08da      	lsrs	r2, r3, #3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3208      	adds	r2, #8
 8007672:	0092      	lsls	r2, r2, #2
 8007674:	58d3      	ldr	r3, [r2, r3]
 8007676:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2207      	movs	r2, #7
 800767c:	4013      	ands	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	220f      	movs	r2, #15
 8007682:	409a      	lsls	r2, r3
 8007684:	0013      	movs	r3, r2
 8007686:	43da      	mvns	r2, r3
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	4013      	ands	r3, r2
 800768c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2107      	movs	r1, #7
 8007696:	400b      	ands	r3, r1
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	409a      	lsls	r2, r3
 800769c:	0013      	movs	r3, r2
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	08da      	lsrs	r2, r3, #3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3208      	adds	r2, #8
 80076ac:	0092      	lsls	r2, r2, #2
 80076ae:	6939      	ldr	r1, [r7, #16]
 80076b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	2203      	movs	r2, #3
 80076be:	409a      	lsls	r2, r3
 80076c0:	0013      	movs	r3, r2
 80076c2:	43da      	mvns	r2, r3
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	4013      	ands	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	2203      	movs	r2, #3
 80076d0:	401a      	ands	r2, r3
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	409a      	lsls	r2, r3
 80076d8:	0013      	movs	r3, r2
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	23c0      	movs	r3, #192	; 0xc0
 80076ec:	029b      	lsls	r3, r3, #10
 80076ee:	4013      	ands	r3, r2
 80076f0:	d100      	bne.n	80076f4 <HAL_GPIO_Init+0x174>
 80076f2:	e092      	b.n	800781a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80076f4:	4a50      	ldr	r2, [pc, #320]	; (8007838 <HAL_GPIO_Init+0x2b8>)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	089b      	lsrs	r3, r3, #2
 80076fa:	3318      	adds	r3, #24
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	589b      	ldr	r3, [r3, r2]
 8007700:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2203      	movs	r2, #3
 8007706:	4013      	ands	r3, r2
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	220f      	movs	r2, #15
 800770c:	409a      	lsls	r2, r3
 800770e:	0013      	movs	r3, r2
 8007710:	43da      	mvns	r2, r3
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	4013      	ands	r3, r2
 8007716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	23a0      	movs	r3, #160	; 0xa0
 800771c:	05db      	lsls	r3, r3, #23
 800771e:	429a      	cmp	r2, r3
 8007720:	d013      	beq.n	800774a <HAL_GPIO_Init+0x1ca>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a45      	ldr	r2, [pc, #276]	; (800783c <HAL_GPIO_Init+0x2bc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00d      	beq.n	8007746 <HAL_GPIO_Init+0x1c6>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a44      	ldr	r2, [pc, #272]	; (8007840 <HAL_GPIO_Init+0x2c0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d007      	beq.n	8007742 <HAL_GPIO_Init+0x1c2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a43      	ldr	r2, [pc, #268]	; (8007844 <HAL_GPIO_Init+0x2c4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d101      	bne.n	800773e <HAL_GPIO_Init+0x1be>
 800773a:	2303      	movs	r3, #3
 800773c:	e006      	b.n	800774c <HAL_GPIO_Init+0x1cc>
 800773e:	2305      	movs	r3, #5
 8007740:	e004      	b.n	800774c <HAL_GPIO_Init+0x1cc>
 8007742:	2302      	movs	r3, #2
 8007744:	e002      	b.n	800774c <HAL_GPIO_Init+0x1cc>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <HAL_GPIO_Init+0x1cc>
 800774a:	2300      	movs	r3, #0
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	2103      	movs	r1, #3
 8007750:	400a      	ands	r2, r1
 8007752:	00d2      	lsls	r2, r2, #3
 8007754:	4093      	lsls	r3, r2
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800775c:	4936      	ldr	r1, [pc, #216]	; (8007838 <HAL_GPIO_Init+0x2b8>)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	089b      	lsrs	r3, r3, #2
 8007762:	3318      	adds	r3, #24
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800776a:	4b33      	ldr	r3, [pc, #204]	; (8007838 <HAL_GPIO_Init+0x2b8>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	43da      	mvns	r2, r3
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	4013      	ands	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	2380      	movs	r3, #128	; 0x80
 8007780:	035b      	lsls	r3, r3, #13
 8007782:	4013      	ands	r3, r2
 8007784:	d003      	beq.n	800778e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800778e:	4b2a      	ldr	r3, [pc, #168]	; (8007838 <HAL_GPIO_Init+0x2b8>)
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007794:	4b28      	ldr	r3, [pc, #160]	; (8007838 <HAL_GPIO_Init+0x2b8>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	43da      	mvns	r2, r3
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	4013      	ands	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	2380      	movs	r3, #128	; 0x80
 80077aa:	039b      	lsls	r3, r3, #14
 80077ac:	4013      	ands	r3, r2
 80077ae:	d003      	beq.n	80077b8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80077b8:	4b1f      	ldr	r3, [pc, #124]	; (8007838 <HAL_GPIO_Init+0x2b8>)
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80077be:	4a1e      	ldr	r2, [pc, #120]	; (8007838 <HAL_GPIO_Init+0x2b8>)
 80077c0:	2384      	movs	r3, #132	; 0x84
 80077c2:	58d3      	ldr	r3, [r2, r3]
 80077c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	43da      	mvns	r2, r3
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	4013      	ands	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	2380      	movs	r3, #128	; 0x80
 80077d6:	029b      	lsls	r3, r3, #10
 80077d8:	4013      	ands	r3, r2
 80077da:	d003      	beq.n	80077e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80077e4:	4914      	ldr	r1, [pc, #80]	; (8007838 <HAL_GPIO_Init+0x2b8>)
 80077e6:	2284      	movs	r2, #132	; 0x84
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80077ec:	4a12      	ldr	r2, [pc, #72]	; (8007838 <HAL_GPIO_Init+0x2b8>)
 80077ee:	2380      	movs	r3, #128	; 0x80
 80077f0:	58d3      	ldr	r3, [r2, r3]
 80077f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	43da      	mvns	r2, r3
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4013      	ands	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	2380      	movs	r3, #128	; 0x80
 8007804:	025b      	lsls	r3, r3, #9
 8007806:	4013      	ands	r3, r2
 8007808:	d003      	beq.n	8007812 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007812:	4909      	ldr	r1, [pc, #36]	; (8007838 <HAL_GPIO_Init+0x2b8>)
 8007814:	2280      	movs	r2, #128	; 0x80
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	3301      	adds	r3, #1
 800781e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	40da      	lsrs	r2, r3
 8007828:	1e13      	subs	r3, r2, #0
 800782a:	d000      	beq.n	800782e <HAL_GPIO_Init+0x2ae>
 800782c:	e6b0      	b.n	8007590 <HAL_GPIO_Init+0x10>
  }
}
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	46c0      	nop			; (mov r8, r8)
 8007832:	46bd      	mov	sp, r7
 8007834:	b006      	add	sp, #24
 8007836:	bd80      	pop	{r7, pc}
 8007838:	40021800 	.word	0x40021800
 800783c:	50000400 	.word	0x50000400
 8007840:	50000800 	.word	0x50000800
 8007844:	50000c00 	.word	0x50000c00

08007848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	0008      	movs	r0, r1
 8007852:	0011      	movs	r1, r2
 8007854:	1cbb      	adds	r3, r7, #2
 8007856:	1c02      	adds	r2, r0, #0
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	1c7b      	adds	r3, r7, #1
 800785c:	1c0a      	adds	r2, r1, #0
 800785e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007860:	1c7b      	adds	r3, r7, #1
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007868:	1cbb      	adds	r3, r7, #2
 800786a:	881a      	ldrh	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007870:	e003      	b.n	800787a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007872:	1cbb      	adds	r3, r7, #2
 8007874:	881a      	ldrh	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	629a      	str	r2, [r3, #40]	; 0x28
}
 800787a:	46c0      	nop			; (mov r8, r8)
 800787c:	46bd      	mov	sp, r7
 800787e:	b002      	add	sp, #8
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800788c:	4b19      	ldr	r3, [pc, #100]	; (80078f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a19      	ldr	r2, [pc, #100]	; (80078f8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007892:	4013      	ands	r3, r2
 8007894:	0019      	movs	r1, r3
 8007896:	4b17      	ldr	r3, [pc, #92]	; (80078f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	430a      	orrs	r2, r1
 800789c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	2380      	movs	r3, #128	; 0x80
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d11f      	bne.n	80078e8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80078a8:	4b14      	ldr	r3, [pc, #80]	; (80078fc <HAL_PWREx_ControlVoltageScaling+0x78>)
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	0013      	movs	r3, r2
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	189b      	adds	r3, r3, r2
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	4912      	ldr	r1, [pc, #72]	; (8007900 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80078b6:	0018      	movs	r0, r3
 80078b8:	f7f8 fc4a 	bl	8000150 <__udivsi3>
 80078bc:	0003      	movs	r3, r0
 80078be:	3301      	adds	r3, #1
 80078c0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80078c2:	e008      	b.n	80078d6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	e001      	b.n	80078d6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e009      	b.n	80078ea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80078d6:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80078d8:	695a      	ldr	r2, [r3, #20]
 80078da:	2380      	movs	r3, #128	; 0x80
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	401a      	ands	r2, r3
 80078e0:	2380      	movs	r3, #128	; 0x80
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d0ed      	beq.n	80078c4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	0018      	movs	r0, r3
 80078ec:	46bd      	mov	sp, r7
 80078ee:	b004      	add	sp, #16
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	46c0      	nop			; (mov r8, r8)
 80078f4:	40007000 	.word	0x40007000
 80078f8:	fffff9ff 	.word	0xfffff9ff
 80078fc:	20000094 	.word	0x20000094
 8007900:	000f4240 	.word	0x000f4240

08007904 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007908:	4b03      	ldr	r3, [pc, #12]	; (8007918 <LL_RCC_GetAPB1Prescaler+0x14>)
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	23e0      	movs	r3, #224	; 0xe0
 800790e:	01db      	lsls	r3, r3, #7
 8007910:	4013      	ands	r3, r2
}
 8007912:	0018      	movs	r0, r3
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	40021000 	.word	0x40021000

0800791c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e2fe      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2201      	movs	r2, #1
 8007934:	4013      	ands	r3, r2
 8007936:	d100      	bne.n	800793a <HAL_RCC_OscConfig+0x1e>
 8007938:	e07c      	b.n	8007a34 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800793a:	4bc3      	ldr	r3, [pc, #780]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	2238      	movs	r2, #56	; 0x38
 8007940:	4013      	ands	r3, r2
 8007942:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007944:	4bc0      	ldr	r3, [pc, #768]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	2203      	movs	r2, #3
 800794a:	4013      	ands	r3, r2
 800794c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b10      	cmp	r3, #16
 8007952:	d102      	bne.n	800795a <HAL_RCC_OscConfig+0x3e>
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2b03      	cmp	r3, #3
 8007958:	d002      	beq.n	8007960 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2b08      	cmp	r3, #8
 800795e:	d10b      	bne.n	8007978 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007960:	4bb9      	ldr	r3, [pc, #740]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	2380      	movs	r3, #128	; 0x80
 8007966:	029b      	lsls	r3, r3, #10
 8007968:	4013      	ands	r3, r2
 800796a:	d062      	beq.n	8007a32 <HAL_RCC_OscConfig+0x116>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d15e      	bne.n	8007a32 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e2d9      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	2380      	movs	r3, #128	; 0x80
 800797e:	025b      	lsls	r3, r3, #9
 8007980:	429a      	cmp	r2, r3
 8007982:	d107      	bne.n	8007994 <HAL_RCC_OscConfig+0x78>
 8007984:	4bb0      	ldr	r3, [pc, #704]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	4baf      	ldr	r3, [pc, #700]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 800798a:	2180      	movs	r1, #128	; 0x80
 800798c:	0249      	lsls	r1, r1, #9
 800798e:	430a      	orrs	r2, r1
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	e020      	b.n	80079d6 <HAL_RCC_OscConfig+0xba>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	23a0      	movs	r3, #160	; 0xa0
 800799a:	02db      	lsls	r3, r3, #11
 800799c:	429a      	cmp	r2, r3
 800799e:	d10e      	bne.n	80079be <HAL_RCC_OscConfig+0xa2>
 80079a0:	4ba9      	ldr	r3, [pc, #676]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	4ba8      	ldr	r3, [pc, #672]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 80079a6:	2180      	movs	r1, #128	; 0x80
 80079a8:	02c9      	lsls	r1, r1, #11
 80079aa:	430a      	orrs	r2, r1
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	4ba6      	ldr	r3, [pc, #664]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	4ba5      	ldr	r3, [pc, #660]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 80079b4:	2180      	movs	r1, #128	; 0x80
 80079b6:	0249      	lsls	r1, r1, #9
 80079b8:	430a      	orrs	r2, r1
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	e00b      	b.n	80079d6 <HAL_RCC_OscConfig+0xba>
 80079be:	4ba2      	ldr	r3, [pc, #648]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	4ba1      	ldr	r3, [pc, #644]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 80079c4:	49a1      	ldr	r1, [pc, #644]	; (8007c4c <HAL_RCC_OscConfig+0x330>)
 80079c6:	400a      	ands	r2, r1
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	4b9f      	ldr	r3, [pc, #636]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4b9e      	ldr	r3, [pc, #632]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 80079d0:	499f      	ldr	r1, [pc, #636]	; (8007c50 <HAL_RCC_OscConfig+0x334>)
 80079d2:	400a      	ands	r2, r1
 80079d4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d014      	beq.n	8007a08 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079de:	f7fe fd27 	bl	8006430 <HAL_GetTick>
 80079e2:	0003      	movs	r3, r0
 80079e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079e6:	e008      	b.n	80079fa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079e8:	f7fe fd22 	bl	8006430 <HAL_GetTick>
 80079ec:	0002      	movs	r2, r0
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b64      	cmp	r3, #100	; 0x64
 80079f4:	d901      	bls.n	80079fa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80079f6:	2303      	movs	r3, #3
 80079f8:	e298      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079fa:	4b93      	ldr	r3, [pc, #588]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	2380      	movs	r3, #128	; 0x80
 8007a00:	029b      	lsls	r3, r3, #10
 8007a02:	4013      	ands	r3, r2
 8007a04:	d0f0      	beq.n	80079e8 <HAL_RCC_OscConfig+0xcc>
 8007a06:	e015      	b.n	8007a34 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a08:	f7fe fd12 	bl	8006430 <HAL_GetTick>
 8007a0c:	0003      	movs	r3, r0
 8007a0e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a10:	e008      	b.n	8007a24 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a12:	f7fe fd0d 	bl	8006430 <HAL_GetTick>
 8007a16:	0002      	movs	r2, r0
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	2b64      	cmp	r3, #100	; 0x64
 8007a1e:	d901      	bls.n	8007a24 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e283      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a24:	4b88      	ldr	r3, [pc, #544]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	2380      	movs	r3, #128	; 0x80
 8007a2a:	029b      	lsls	r3, r3, #10
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	d1f0      	bne.n	8007a12 <HAL_RCC_OscConfig+0xf6>
 8007a30:	e000      	b.n	8007a34 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a32:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	d100      	bne.n	8007a40 <HAL_RCC_OscConfig+0x124>
 8007a3e:	e099      	b.n	8007b74 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a40:	4b81      	ldr	r3, [pc, #516]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	2238      	movs	r2, #56	; 0x38
 8007a46:	4013      	ands	r3, r2
 8007a48:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a4a:	4b7f      	ldr	r3, [pc, #508]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	2203      	movs	r2, #3
 8007a50:	4013      	ands	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	2b10      	cmp	r3, #16
 8007a58:	d102      	bne.n	8007a60 <HAL_RCC_OscConfig+0x144>
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d002      	beq.n	8007a66 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d135      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a66:	4b78      	ldr	r3, [pc, #480]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	2380      	movs	r3, #128	; 0x80
 8007a6c:	00db      	lsls	r3, r3, #3
 8007a6e:	4013      	ands	r3, r2
 8007a70:	d005      	beq.n	8007a7e <HAL_RCC_OscConfig+0x162>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e256      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a7e:	4b72      	ldr	r3, [pc, #456]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	4a74      	ldr	r2, [pc, #464]	; (8007c54 <HAL_RCC_OscConfig+0x338>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	0019      	movs	r1, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	021a      	lsls	r2, r3, #8
 8007a8e:	4b6e      	ldr	r3, [pc, #440]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007a90:	430a      	orrs	r2, r1
 8007a92:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d112      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007a9a:	4b6b      	ldr	r3, [pc, #428]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a6e      	ldr	r2, [pc, #440]	; (8007c58 <HAL_RCC_OscConfig+0x33c>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	0019      	movs	r1, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691a      	ldr	r2, [r3, #16]
 8007aa8:	4b67      	ldr	r3, [pc, #412]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007aae:	4b66      	ldr	r3, [pc, #408]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	0adb      	lsrs	r3, r3, #11
 8007ab4:	2207      	movs	r2, #7
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	4a68      	ldr	r2, [pc, #416]	; (8007c5c <HAL_RCC_OscConfig+0x340>)
 8007aba:	40da      	lsrs	r2, r3
 8007abc:	4b68      	ldr	r3, [pc, #416]	; (8007c60 <HAL_RCC_OscConfig+0x344>)
 8007abe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007ac0:	4b68      	ldr	r3, [pc, #416]	; (8007c64 <HAL_RCC_OscConfig+0x348>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	f7fe fc57 	bl	8006378 <HAL_InitTick>
 8007aca:	1e03      	subs	r3, r0, #0
 8007acc:	d051      	beq.n	8007b72 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e22c      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d030      	beq.n	8007b3c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007ada:	4b5b      	ldr	r3, [pc, #364]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a5e      	ldr	r2, [pc, #376]	; (8007c58 <HAL_RCC_OscConfig+0x33c>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	0019      	movs	r1, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	4b57      	ldr	r3, [pc, #348]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007aea:	430a      	orrs	r2, r1
 8007aec:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007aee:	4b56      	ldr	r3, [pc, #344]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b55      	ldr	r3, [pc, #340]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007af4:	2180      	movs	r1, #128	; 0x80
 8007af6:	0049      	lsls	r1, r1, #1
 8007af8:	430a      	orrs	r2, r1
 8007afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afc:	f7fe fc98 	bl	8006430 <HAL_GetTick>
 8007b00:	0003      	movs	r3, r0
 8007b02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b04:	e008      	b.n	8007b18 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b06:	f7fe fc93 	bl	8006430 <HAL_GetTick>
 8007b0a:	0002      	movs	r2, r0
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e209      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b18:	4b4b      	ldr	r3, [pc, #300]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	2380      	movs	r3, #128	; 0x80
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	4013      	ands	r3, r2
 8007b22:	d0f0      	beq.n	8007b06 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b24:	4b48      	ldr	r3, [pc, #288]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	4a4a      	ldr	r2, [pc, #296]	; (8007c54 <HAL_RCC_OscConfig+0x338>)
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	0019      	movs	r1, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	021a      	lsls	r2, r3, #8
 8007b34:	4b44      	ldr	r3, [pc, #272]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
 8007b3a:	e01b      	b.n	8007b74 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007b3c:	4b42      	ldr	r3, [pc, #264]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4b41      	ldr	r3, [pc, #260]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007b42:	4949      	ldr	r1, [pc, #292]	; (8007c68 <HAL_RCC_OscConfig+0x34c>)
 8007b44:	400a      	ands	r2, r1
 8007b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b48:	f7fe fc72 	bl	8006430 <HAL_GetTick>
 8007b4c:	0003      	movs	r3, r0
 8007b4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b50:	e008      	b.n	8007b64 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b52:	f7fe fc6d 	bl	8006430 <HAL_GetTick>
 8007b56:	0002      	movs	r2, r0
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d901      	bls.n	8007b64 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e1e3      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b64:	4b38      	ldr	r3, [pc, #224]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	2380      	movs	r3, #128	; 0x80
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	d1f0      	bne.n	8007b52 <HAL_RCC_OscConfig+0x236>
 8007b70:	e000      	b.n	8007b74 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b72:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2208      	movs	r2, #8
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	d047      	beq.n	8007c0e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007b7e:	4b32      	ldr	r3, [pc, #200]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	2238      	movs	r2, #56	; 0x38
 8007b84:	4013      	ands	r3, r2
 8007b86:	2b18      	cmp	r3, #24
 8007b88:	d10a      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007b8a:	4b2f      	ldr	r3, [pc, #188]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8e:	2202      	movs	r2, #2
 8007b90:	4013      	ands	r3, r2
 8007b92:	d03c      	beq.n	8007c0e <HAL_RCC_OscConfig+0x2f2>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d138      	bne.n	8007c0e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e1c5      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d019      	beq.n	8007bdc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007ba8:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007baa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007bac:	4b26      	ldr	r3, [pc, #152]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007bae:	2101      	movs	r1, #1
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb4:	f7fe fc3c 	bl	8006430 <HAL_GetTick>
 8007bb8:	0003      	movs	r3, r0
 8007bba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bbc:	e008      	b.n	8007bd0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bbe:	f7fe fc37 	bl	8006430 <HAL_GetTick>
 8007bc2:	0002      	movs	r2, r0
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d901      	bls.n	8007bd0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e1ad      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	d0f1      	beq.n	8007bbe <HAL_RCC_OscConfig+0x2a2>
 8007bda:	e018      	b.n	8007c0e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007bdc:	4b1a      	ldr	r3, [pc, #104]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007bde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007be0:	4b19      	ldr	r3, [pc, #100]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007be2:	2101      	movs	r1, #1
 8007be4:	438a      	bics	r2, r1
 8007be6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be8:	f7fe fc22 	bl	8006430 <HAL_GetTick>
 8007bec:	0003      	movs	r3, r0
 8007bee:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bf0:	e008      	b.n	8007c04 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bf2:	f7fe fc1d 	bl	8006430 <HAL_GetTick>
 8007bf6:	0002      	movs	r2, r0
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e193      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c04:	4b10      	ldr	r3, [pc, #64]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c08:	2202      	movs	r2, #2
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	d1f1      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2204      	movs	r2, #4
 8007c14:	4013      	ands	r3, r2
 8007c16:	d100      	bne.n	8007c1a <HAL_RCC_OscConfig+0x2fe>
 8007c18:	e0c6      	b.n	8007da8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c1a:	231f      	movs	r3, #31
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	2238      	movs	r2, #56	; 0x38
 8007c28:	4013      	ands	r3, r2
 8007c2a:	2b20      	cmp	r3, #32
 8007c2c:	d11e      	bne.n	8007c6c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007c2e:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <HAL_RCC_OscConfig+0x32c>)
 8007c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c32:	2202      	movs	r2, #2
 8007c34:	4013      	ands	r3, r2
 8007c36:	d100      	bne.n	8007c3a <HAL_RCC_OscConfig+0x31e>
 8007c38:	e0b6      	b.n	8007da8 <HAL_RCC_OscConfig+0x48c>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d000      	beq.n	8007c44 <HAL_RCC_OscConfig+0x328>
 8007c42:	e0b1      	b.n	8007da8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e171      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
 8007c48:	40021000 	.word	0x40021000
 8007c4c:	fffeffff 	.word	0xfffeffff
 8007c50:	fffbffff 	.word	0xfffbffff
 8007c54:	ffff80ff 	.word	0xffff80ff
 8007c58:	ffffc7ff 	.word	0xffffc7ff
 8007c5c:	00f42400 	.word	0x00f42400
 8007c60:	20000094 	.word	0x20000094
 8007c64:	20000098 	.word	0x20000098
 8007c68:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c6c:	4bb1      	ldr	r3, [pc, #708]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c70:	2380      	movs	r3, #128	; 0x80
 8007c72:	055b      	lsls	r3, r3, #21
 8007c74:	4013      	ands	r3, r2
 8007c76:	d101      	bne.n	8007c7c <HAL_RCC_OscConfig+0x360>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e000      	b.n	8007c7e <HAL_RCC_OscConfig+0x362>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d011      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007c82:	4bac      	ldr	r3, [pc, #688]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c86:	4bab      	ldr	r3, [pc, #684]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007c88:	2180      	movs	r1, #128	; 0x80
 8007c8a:	0549      	lsls	r1, r1, #21
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007c90:	4ba8      	ldr	r3, [pc, #672]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c94:	2380      	movs	r3, #128	; 0x80
 8007c96:	055b      	lsls	r3, r3, #21
 8007c98:	4013      	ands	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007c9e:	231f      	movs	r3, #31
 8007ca0:	18fb      	adds	r3, r7, r3
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ca6:	4ba4      	ldr	r3, [pc, #656]	; (8007f38 <HAL_RCC_OscConfig+0x61c>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	2380      	movs	r3, #128	; 0x80
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	4013      	ands	r3, r2
 8007cb0:	d11a      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cb2:	4ba1      	ldr	r3, [pc, #644]	; (8007f38 <HAL_RCC_OscConfig+0x61c>)
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4ba0      	ldr	r3, [pc, #640]	; (8007f38 <HAL_RCC_OscConfig+0x61c>)
 8007cb8:	2180      	movs	r1, #128	; 0x80
 8007cba:	0049      	lsls	r1, r1, #1
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007cc0:	f7fe fbb6 	bl	8006430 <HAL_GetTick>
 8007cc4:	0003      	movs	r3, r0
 8007cc6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cc8:	e008      	b.n	8007cdc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cca:	f7fe fbb1 	bl	8006430 <HAL_GetTick>
 8007cce:	0002      	movs	r2, r0
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d901      	bls.n	8007cdc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e127      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cdc:	4b96      	ldr	r3, [pc, #600]	; (8007f38 <HAL_RCC_OscConfig+0x61c>)
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	2380      	movs	r3, #128	; 0x80
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	d0f0      	beq.n	8007cca <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d106      	bne.n	8007cfe <HAL_RCC_OscConfig+0x3e2>
 8007cf0:	4b90      	ldr	r3, [pc, #576]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007cf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cf4:	4b8f      	ldr	r3, [pc, #572]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8007cfc:	e01c      	b.n	8007d38 <HAL_RCC_OscConfig+0x41c>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	2b05      	cmp	r3, #5
 8007d04:	d10c      	bne.n	8007d20 <HAL_RCC_OscConfig+0x404>
 8007d06:	4b8b      	ldr	r3, [pc, #556]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007d08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d0a:	4b8a      	ldr	r3, [pc, #552]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007d0c:	2104      	movs	r1, #4
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d12:	4b88      	ldr	r3, [pc, #544]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007d14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d16:	4b87      	ldr	r3, [pc, #540]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007d18:	2101      	movs	r1, #1
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d1e:	e00b      	b.n	8007d38 <HAL_RCC_OscConfig+0x41c>
 8007d20:	4b84      	ldr	r3, [pc, #528]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007d22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d24:	4b83      	ldr	r3, [pc, #524]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007d26:	2101      	movs	r1, #1
 8007d28:	438a      	bics	r2, r1
 8007d2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8007d2c:	4b81      	ldr	r3, [pc, #516]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007d2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d30:	4b80      	ldr	r3, [pc, #512]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007d32:	2104      	movs	r1, #4
 8007d34:	438a      	bics	r2, r1
 8007d36:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d014      	beq.n	8007d6a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d40:	f7fe fb76 	bl	8006430 <HAL_GetTick>
 8007d44:	0003      	movs	r3, r0
 8007d46:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d48:	e009      	b.n	8007d5e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d4a:	f7fe fb71 	bl	8006430 <HAL_GetTick>
 8007d4e:	0002      	movs	r2, r0
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	4a79      	ldr	r2, [pc, #484]	; (8007f3c <HAL_RCC_OscConfig+0x620>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e0e6      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d5e:	4b75      	ldr	r3, [pc, #468]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d62:	2202      	movs	r2, #2
 8007d64:	4013      	ands	r3, r2
 8007d66:	d0f0      	beq.n	8007d4a <HAL_RCC_OscConfig+0x42e>
 8007d68:	e013      	b.n	8007d92 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6a:	f7fe fb61 	bl	8006430 <HAL_GetTick>
 8007d6e:	0003      	movs	r3, r0
 8007d70:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d72:	e009      	b.n	8007d88 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d74:	f7fe fb5c 	bl	8006430 <HAL_GetTick>
 8007d78:	0002      	movs	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	4a6f      	ldr	r2, [pc, #444]	; (8007f3c <HAL_RCC_OscConfig+0x620>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d901      	bls.n	8007d88 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e0d1      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d88:	4b6a      	ldr	r3, [pc, #424]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	4013      	ands	r3, r2
 8007d90:	d1f0      	bne.n	8007d74 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007d92:	231f      	movs	r3, #31
 8007d94:	18fb      	adds	r3, r7, r3
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d105      	bne.n	8007da8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007d9c:	4b65      	ldr	r3, [pc, #404]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007da0:	4b64      	ldr	r3, [pc, #400]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007da2:	4967      	ldr	r1, [pc, #412]	; (8007f40 <HAL_RCC_OscConfig+0x624>)
 8007da4:	400a      	ands	r2, r1
 8007da6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d100      	bne.n	8007db2 <HAL_RCC_OscConfig+0x496>
 8007db0:	e0bb      	b.n	8007f2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007db2:	4b60      	ldr	r3, [pc, #384]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	2238      	movs	r2, #56	; 0x38
 8007db8:	4013      	ands	r3, r2
 8007dba:	2b10      	cmp	r3, #16
 8007dbc:	d100      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x4a4>
 8007dbe:	e07b      	b.n	8007eb8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d156      	bne.n	8007e76 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dc8:	4b5a      	ldr	r3, [pc, #360]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	4b59      	ldr	r3, [pc, #356]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007dce:	495d      	ldr	r1, [pc, #372]	; (8007f44 <HAL_RCC_OscConfig+0x628>)
 8007dd0:	400a      	ands	r2, r1
 8007dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd4:	f7fe fb2c 	bl	8006430 <HAL_GetTick>
 8007dd8:	0003      	movs	r3, r0
 8007dda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ddc:	e008      	b.n	8007df0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dde:	f7fe fb27 	bl	8006430 <HAL_GetTick>
 8007de2:	0002      	movs	r2, r0
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d901      	bls.n	8007df0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e09d      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007df0:	4b50      	ldr	r3, [pc, #320]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	2380      	movs	r3, #128	; 0x80
 8007df6:	049b      	lsls	r3, r3, #18
 8007df8:	4013      	ands	r3, r2
 8007dfa:	d1f0      	bne.n	8007dde <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dfc:	4b4d      	ldr	r3, [pc, #308]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	4a51      	ldr	r2, [pc, #324]	; (8007f48 <HAL_RCC_OscConfig+0x62c>)
 8007e02:	4013      	ands	r3, r2
 8007e04:	0019      	movs	r1, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1a      	ldr	r2, [r3, #32]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e14:	021b      	lsls	r3, r3, #8
 8007e16:	431a      	orrs	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	4b42      	ldr	r3, [pc, #264]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e30:	4b40      	ldr	r3, [pc, #256]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	4b3f      	ldr	r3, [pc, #252]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007e36:	2180      	movs	r1, #128	; 0x80
 8007e38:	0449      	lsls	r1, r1, #17
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007e3e:	4b3d      	ldr	r3, [pc, #244]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	4b3c      	ldr	r3, [pc, #240]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007e44:	2180      	movs	r1, #128	; 0x80
 8007e46:	0549      	lsls	r1, r1, #21
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4c:	f7fe faf0 	bl	8006430 <HAL_GetTick>
 8007e50:	0003      	movs	r3, r0
 8007e52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e54:	e008      	b.n	8007e68 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e56:	f7fe faeb 	bl	8006430 <HAL_GetTick>
 8007e5a:	0002      	movs	r2, r0
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d901      	bls.n	8007e68 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e061      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e68:	4b32      	ldr	r3, [pc, #200]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	2380      	movs	r3, #128	; 0x80
 8007e6e:	049b      	lsls	r3, r3, #18
 8007e70:	4013      	ands	r3, r2
 8007e72:	d0f0      	beq.n	8007e56 <HAL_RCC_OscConfig+0x53a>
 8007e74:	e059      	b.n	8007f2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e76:	4b2f      	ldr	r3, [pc, #188]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	4b2e      	ldr	r3, [pc, #184]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007e7c:	4931      	ldr	r1, [pc, #196]	; (8007f44 <HAL_RCC_OscConfig+0x628>)
 8007e7e:	400a      	ands	r2, r1
 8007e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e82:	f7fe fad5 	bl	8006430 <HAL_GetTick>
 8007e86:	0003      	movs	r3, r0
 8007e88:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e8c:	f7fe fad0 	bl	8006430 <HAL_GetTick>
 8007e90:	0002      	movs	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e046      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e9e:	4b25      	ldr	r3, [pc, #148]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	2380      	movs	r3, #128	; 0x80
 8007ea4:	049b      	lsls	r3, r3, #18
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	d1f0      	bne.n	8007e8c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8007eaa:	4b22      	ldr	r3, [pc, #136]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	4b21      	ldr	r3, [pc, #132]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007eb0:	4926      	ldr	r1, [pc, #152]	; (8007f4c <HAL_RCC_OscConfig+0x630>)
 8007eb2:	400a      	ands	r2, r1
 8007eb4:	60da      	str	r2, [r3, #12]
 8007eb6:	e038      	b.n	8007f2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	69db      	ldr	r3, [r3, #28]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e033      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007ec4:	4b1b      	ldr	r3, [pc, #108]	; (8007f34 <HAL_RCC_OscConfig+0x618>)
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2203      	movs	r2, #3
 8007ece:	401a      	ands	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d126      	bne.n	8007f26 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2270      	movs	r2, #112	; 0x70
 8007edc:	401a      	ands	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d11f      	bne.n	8007f26 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	23fe      	movs	r3, #254	; 0xfe
 8007eea:	01db      	lsls	r3, r3, #7
 8007eec:	401a      	ands	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d116      	bne.n	8007f26 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	23f8      	movs	r3, #248	; 0xf8
 8007efc:	039b      	lsls	r3, r3, #14
 8007efe:	401a      	ands	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d10e      	bne.n	8007f26 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	23e0      	movs	r3, #224	; 0xe0
 8007f0c:	051b      	lsls	r3, r3, #20
 8007f0e:	401a      	ands	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d106      	bne.n	8007f26 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	0f5b      	lsrs	r3, r3, #29
 8007f1c:	075a      	lsls	r2, r3, #29
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d001      	beq.n	8007f2a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	b008      	add	sp, #32
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	40021000 	.word	0x40021000
 8007f38:	40007000 	.word	0x40007000
 8007f3c:	00001388 	.word	0x00001388
 8007f40:	efffffff 	.word	0xefffffff
 8007f44:	feffffff 	.word	0xfeffffff
 8007f48:	11c1808c 	.word	0x11c1808c
 8007f4c:	eefefffc 	.word	0xeefefffc

08007f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e0e9      	b.n	8008138 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f64:	4b76      	ldr	r3, [pc, #472]	; (8008140 <HAL_RCC_ClockConfig+0x1f0>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2207      	movs	r2, #7
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d91e      	bls.n	8007fb0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f72:	4b73      	ldr	r3, [pc, #460]	; (8008140 <HAL_RCC_ClockConfig+0x1f0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2207      	movs	r2, #7
 8007f78:	4393      	bics	r3, r2
 8007f7a:	0019      	movs	r1, r3
 8007f7c:	4b70      	ldr	r3, [pc, #448]	; (8008140 <HAL_RCC_ClockConfig+0x1f0>)
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007f84:	f7fe fa54 	bl	8006430 <HAL_GetTick>
 8007f88:	0003      	movs	r3, r0
 8007f8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007f8c:	e009      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f8e:	f7fe fa4f 	bl	8006430 <HAL_GetTick>
 8007f92:	0002      	movs	r2, r0
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	4a6a      	ldr	r2, [pc, #424]	; (8008144 <HAL_RCC_ClockConfig+0x1f4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e0ca      	b.n	8008138 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007fa2:	4b67      	ldr	r3, [pc, #412]	; (8008140 <HAL_RCC_ClockConfig+0x1f0>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2207      	movs	r2, #7
 8007fa8:	4013      	ands	r3, r2
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d1ee      	bne.n	8007f8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	d015      	beq.n	8007fe6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2204      	movs	r2, #4
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	d006      	beq.n	8007fd2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007fc4:	4b60      	ldr	r3, [pc, #384]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	4b5f      	ldr	r3, [pc, #380]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 8007fca:	21e0      	movs	r1, #224	; 0xe0
 8007fcc:	01c9      	lsls	r1, r1, #7
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fd2:	4b5d      	ldr	r3, [pc, #372]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	4a5d      	ldr	r2, [pc, #372]	; (800814c <HAL_RCC_ClockConfig+0x1fc>)
 8007fd8:	4013      	ands	r3, r2
 8007fda:	0019      	movs	r1, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	4b59      	ldr	r3, [pc, #356]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2201      	movs	r2, #1
 8007fec:	4013      	ands	r3, r2
 8007fee:	d057      	beq.n	80080a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d107      	bne.n	8008008 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ff8:	4b53      	ldr	r3, [pc, #332]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	2380      	movs	r3, #128	; 0x80
 8007ffe:	029b      	lsls	r3, r3, #10
 8008000:	4013      	ands	r3, r2
 8008002:	d12b      	bne.n	800805c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e097      	b.n	8008138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d107      	bne.n	8008020 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008010:	4b4d      	ldr	r3, [pc, #308]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	2380      	movs	r3, #128	; 0x80
 8008016:	049b      	lsls	r3, r3, #18
 8008018:	4013      	ands	r3, r2
 800801a:	d11f      	bne.n	800805c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e08b      	b.n	8008138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d107      	bne.n	8008038 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008028:	4b47      	ldr	r3, [pc, #284]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	2380      	movs	r3, #128	; 0x80
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	4013      	ands	r3, r2
 8008032:	d113      	bne.n	800805c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e07f      	b.n	8008138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	2b03      	cmp	r3, #3
 800803e:	d106      	bne.n	800804e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008040:	4b41      	ldr	r3, [pc, #260]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 8008042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008044:	2202      	movs	r2, #2
 8008046:	4013      	ands	r3, r2
 8008048:	d108      	bne.n	800805c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e074      	b.n	8008138 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800804e:	4b3e      	ldr	r3, [pc, #248]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 8008050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008052:	2202      	movs	r2, #2
 8008054:	4013      	ands	r3, r2
 8008056:	d101      	bne.n	800805c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e06d      	b.n	8008138 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800805c:	4b3a      	ldr	r3, [pc, #232]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2207      	movs	r2, #7
 8008062:	4393      	bics	r3, r2
 8008064:	0019      	movs	r1, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	4b37      	ldr	r3, [pc, #220]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 800806c:	430a      	orrs	r2, r1
 800806e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008070:	f7fe f9de 	bl	8006430 <HAL_GetTick>
 8008074:	0003      	movs	r3, r0
 8008076:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008078:	e009      	b.n	800808e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800807a:	f7fe f9d9 	bl	8006430 <HAL_GetTick>
 800807e:	0002      	movs	r2, r0
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	4a2f      	ldr	r2, [pc, #188]	; (8008144 <HAL_RCC_ClockConfig+0x1f4>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d901      	bls.n	800808e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e054      	b.n	8008138 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800808e:	4b2e      	ldr	r3, [pc, #184]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	2238      	movs	r2, #56	; 0x38
 8008094:	401a      	ands	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	429a      	cmp	r2, r3
 800809e:	d1ec      	bne.n	800807a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080a0:	4b27      	ldr	r3, [pc, #156]	; (8008140 <HAL_RCC_ClockConfig+0x1f0>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2207      	movs	r2, #7
 80080a6:	4013      	ands	r3, r2
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d21e      	bcs.n	80080ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ae:	4b24      	ldr	r3, [pc, #144]	; (8008140 <HAL_RCC_ClockConfig+0x1f0>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2207      	movs	r2, #7
 80080b4:	4393      	bics	r3, r2
 80080b6:	0019      	movs	r1, r3
 80080b8:	4b21      	ldr	r3, [pc, #132]	; (8008140 <HAL_RCC_ClockConfig+0x1f0>)
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80080c0:	f7fe f9b6 	bl	8006430 <HAL_GetTick>
 80080c4:	0003      	movs	r3, r0
 80080c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80080c8:	e009      	b.n	80080de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080ca:	f7fe f9b1 	bl	8006430 <HAL_GetTick>
 80080ce:	0002      	movs	r2, r0
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	4a1b      	ldr	r2, [pc, #108]	; (8008144 <HAL_RCC_ClockConfig+0x1f4>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d901      	bls.n	80080de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e02c      	b.n	8008138 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80080de:	4b18      	ldr	r3, [pc, #96]	; (8008140 <HAL_RCC_ClockConfig+0x1f0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2207      	movs	r2, #7
 80080e4:	4013      	ands	r3, r2
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d1ee      	bne.n	80080ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2204      	movs	r2, #4
 80080f2:	4013      	ands	r3, r2
 80080f4:	d009      	beq.n	800810a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80080f6:	4b14      	ldr	r3, [pc, #80]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	4a15      	ldr	r2, [pc, #84]	; (8008150 <HAL_RCC_ClockConfig+0x200>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	0019      	movs	r1, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	4b10      	ldr	r3, [pc, #64]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 8008106:	430a      	orrs	r2, r1
 8008108:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800810a:	f000 f829 	bl	8008160 <HAL_RCC_GetSysClockFreq>
 800810e:	0001      	movs	r1, r0
 8008110:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <HAL_RCC_ClockConfig+0x1f8>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	0a1b      	lsrs	r3, r3, #8
 8008116:	220f      	movs	r2, #15
 8008118:	401a      	ands	r2, r3
 800811a:	4b0e      	ldr	r3, [pc, #56]	; (8008154 <HAL_RCC_ClockConfig+0x204>)
 800811c:	0092      	lsls	r2, r2, #2
 800811e:	58d3      	ldr	r3, [r2, r3]
 8008120:	221f      	movs	r2, #31
 8008122:	4013      	ands	r3, r2
 8008124:	000a      	movs	r2, r1
 8008126:	40da      	lsrs	r2, r3
 8008128:	4b0b      	ldr	r3, [pc, #44]	; (8008158 <HAL_RCC_ClockConfig+0x208>)
 800812a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800812c:	4b0b      	ldr	r3, [pc, #44]	; (800815c <HAL_RCC_ClockConfig+0x20c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	0018      	movs	r0, r3
 8008132:	f7fe f921 	bl	8006378 <HAL_InitTick>
 8008136:	0003      	movs	r3, r0
}
 8008138:	0018      	movs	r0, r3
 800813a:	46bd      	mov	sp, r7
 800813c:	b004      	add	sp, #16
 800813e:	bd80      	pop	{r7, pc}
 8008140:	40022000 	.word	0x40022000
 8008144:	00001388 	.word	0x00001388
 8008148:	40021000 	.word	0x40021000
 800814c:	fffff0ff 	.word	0xfffff0ff
 8008150:	ffff8fff 	.word	0xffff8fff
 8008154:	0800e3e8 	.word	0x0800e3e8
 8008158:	20000094 	.word	0x20000094
 800815c:	20000098 	.word	0x20000098

08008160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008166:	4b3c      	ldr	r3, [pc, #240]	; (8008258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	2238      	movs	r2, #56	; 0x38
 800816c:	4013      	ands	r3, r2
 800816e:	d10f      	bne.n	8008190 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008170:	4b39      	ldr	r3, [pc, #228]	; (8008258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	0adb      	lsrs	r3, r3, #11
 8008176:	2207      	movs	r2, #7
 8008178:	4013      	ands	r3, r2
 800817a:	2201      	movs	r2, #1
 800817c:	409a      	lsls	r2, r3
 800817e:	0013      	movs	r3, r2
 8008180:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	4835      	ldr	r0, [pc, #212]	; (800825c <HAL_RCC_GetSysClockFreq+0xfc>)
 8008186:	f7f7 ffe3 	bl	8000150 <__udivsi3>
 800818a:	0003      	movs	r3, r0
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	e05d      	b.n	800824c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008190:	4b31      	ldr	r3, [pc, #196]	; (8008258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2238      	movs	r2, #56	; 0x38
 8008196:	4013      	ands	r3, r2
 8008198:	2b08      	cmp	r3, #8
 800819a:	d102      	bne.n	80081a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800819c:	4b30      	ldr	r3, [pc, #192]	; (8008260 <HAL_RCC_GetSysClockFreq+0x100>)
 800819e:	613b      	str	r3, [r7, #16]
 80081a0:	e054      	b.n	800824c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80081a2:	4b2d      	ldr	r3, [pc, #180]	; (8008258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	2238      	movs	r2, #56	; 0x38
 80081a8:	4013      	ands	r3, r2
 80081aa:	2b10      	cmp	r3, #16
 80081ac:	d138      	bne.n	8008220 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80081ae:	4b2a      	ldr	r3, [pc, #168]	; (8008258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	2203      	movs	r2, #3
 80081b4:	4013      	ands	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80081b8:	4b27      	ldr	r3, [pc, #156]	; (8008258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	091b      	lsrs	r3, r3, #4
 80081be:	2207      	movs	r2, #7
 80081c0:	4013      	ands	r3, r2
 80081c2:	3301      	adds	r3, #1
 80081c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d10d      	bne.n	80081e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	4824      	ldr	r0, [pc, #144]	; (8008260 <HAL_RCC_GetSysClockFreq+0x100>)
 80081d0:	f7f7 ffbe 	bl	8000150 <__udivsi3>
 80081d4:	0003      	movs	r3, r0
 80081d6:	0019      	movs	r1, r3
 80081d8:	4b1f      	ldr	r3, [pc, #124]	; (8008258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	0a1b      	lsrs	r3, r3, #8
 80081de:	227f      	movs	r2, #127	; 0x7f
 80081e0:	4013      	ands	r3, r2
 80081e2:	434b      	muls	r3, r1
 80081e4:	617b      	str	r3, [r7, #20]
        break;
 80081e6:	e00d      	b.n	8008204 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	481c      	ldr	r0, [pc, #112]	; (800825c <HAL_RCC_GetSysClockFreq+0xfc>)
 80081ec:	f7f7 ffb0 	bl	8000150 <__udivsi3>
 80081f0:	0003      	movs	r3, r0
 80081f2:	0019      	movs	r1, r3
 80081f4:	4b18      	ldr	r3, [pc, #96]	; (8008258 <HAL_RCC_GetSysClockFreq+0xf8>)
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	0a1b      	lsrs	r3, r3, #8
 80081fa:	227f      	movs	r2, #127	; 0x7f
 80081fc:	4013      	ands	r3, r2
 80081fe:	434b      	muls	r3, r1
 8008200:	617b      	str	r3, [r7, #20]
        break;
 8008202:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008204:	4b14      	ldr	r3, [pc, #80]	; (8008258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	0f5b      	lsrs	r3, r3, #29
 800820a:	2207      	movs	r2, #7
 800820c:	4013      	ands	r3, r2
 800820e:	3301      	adds	r3, #1
 8008210:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	6978      	ldr	r0, [r7, #20]
 8008216:	f7f7 ff9b 	bl	8000150 <__udivsi3>
 800821a:	0003      	movs	r3, r0
 800821c:	613b      	str	r3, [r7, #16]
 800821e:	e015      	b.n	800824c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008220:	4b0d      	ldr	r3, [pc, #52]	; (8008258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	2238      	movs	r2, #56	; 0x38
 8008226:	4013      	ands	r3, r2
 8008228:	2b20      	cmp	r3, #32
 800822a:	d103      	bne.n	8008234 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800822c:	2380      	movs	r3, #128	; 0x80
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	613b      	str	r3, [r7, #16]
 8008232:	e00b      	b.n	800824c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008234:	4b08      	ldr	r3, [pc, #32]	; (8008258 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	2238      	movs	r2, #56	; 0x38
 800823a:	4013      	ands	r3, r2
 800823c:	2b18      	cmp	r3, #24
 800823e:	d103      	bne.n	8008248 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008240:	23fa      	movs	r3, #250	; 0xfa
 8008242:	01db      	lsls	r3, r3, #7
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	e001      	b.n	800824c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800824c:	693b      	ldr	r3, [r7, #16]
}
 800824e:	0018      	movs	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	b006      	add	sp, #24
 8008254:	bd80      	pop	{r7, pc}
 8008256:	46c0      	nop			; (mov r8, r8)
 8008258:	40021000 	.word	0x40021000
 800825c:	00f42400 	.word	0x00f42400
 8008260:	007a1200 	.word	0x007a1200

08008264 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008268:	4b02      	ldr	r3, [pc, #8]	; (8008274 <HAL_RCC_GetHCLKFreq+0x10>)
 800826a:	681b      	ldr	r3, [r3, #0]
}
 800826c:	0018      	movs	r0, r3
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	20000094 	.word	0x20000094

08008278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008278:	b5b0      	push	{r4, r5, r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800827c:	f7ff fff2 	bl	8008264 <HAL_RCC_GetHCLKFreq>
 8008280:	0004      	movs	r4, r0
 8008282:	f7ff fb3f 	bl	8007904 <LL_RCC_GetAPB1Prescaler>
 8008286:	0003      	movs	r3, r0
 8008288:	0b1a      	lsrs	r2, r3, #12
 800828a:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800828c:	0092      	lsls	r2, r2, #2
 800828e:	58d3      	ldr	r3, [r2, r3]
 8008290:	221f      	movs	r2, #31
 8008292:	4013      	ands	r3, r2
 8008294:	40dc      	lsrs	r4, r3
 8008296:	0023      	movs	r3, r4
}
 8008298:	0018      	movs	r0, r3
 800829a:	46bd      	mov	sp, r7
 800829c:	bdb0      	pop	{r4, r5, r7, pc}
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	0800e428 	.word	0x0800e428

080082a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80082ac:	2313      	movs	r3, #19
 80082ae:	18fb      	adds	r3, r7, r3
 80082b0:	2200      	movs	r2, #0
 80082b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082b4:	2312      	movs	r3, #18
 80082b6:	18fb      	adds	r3, r7, r3
 80082b8:	2200      	movs	r2, #0
 80082ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	2380      	movs	r3, #128	; 0x80
 80082c2:	029b      	lsls	r3, r3, #10
 80082c4:	4013      	ands	r3, r2
 80082c6:	d100      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x26>
 80082c8:	e0a3      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082ca:	2011      	movs	r0, #17
 80082cc:	183b      	adds	r3, r7, r0
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082d2:	4ba5      	ldr	r3, [pc, #660]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082d6:	2380      	movs	r3, #128	; 0x80
 80082d8:	055b      	lsls	r3, r3, #21
 80082da:	4013      	ands	r3, r2
 80082dc:	d110      	bne.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082de:	4ba2      	ldr	r3, [pc, #648]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082e2:	4ba1      	ldr	r3, [pc, #644]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082e4:	2180      	movs	r1, #128	; 0x80
 80082e6:	0549      	lsls	r1, r1, #21
 80082e8:	430a      	orrs	r2, r1
 80082ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80082ec:	4b9e      	ldr	r3, [pc, #632]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80082ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082f0:	2380      	movs	r3, #128	; 0x80
 80082f2:	055b      	lsls	r3, r3, #21
 80082f4:	4013      	ands	r3, r2
 80082f6:	60bb      	str	r3, [r7, #8]
 80082f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082fa:	183b      	adds	r3, r7, r0
 80082fc:	2201      	movs	r2, #1
 80082fe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008300:	4b9a      	ldr	r3, [pc, #616]	; (800856c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	4b99      	ldr	r3, [pc, #612]	; (800856c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008306:	2180      	movs	r1, #128	; 0x80
 8008308:	0049      	lsls	r1, r1, #1
 800830a:	430a      	orrs	r2, r1
 800830c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800830e:	f7fe f88f 	bl	8006430 <HAL_GetTick>
 8008312:	0003      	movs	r3, r0
 8008314:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008316:	e00b      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008318:	f7fe f88a 	bl	8006430 <HAL_GetTick>
 800831c:	0002      	movs	r2, r0
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d904      	bls.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008326:	2313      	movs	r3, #19
 8008328:	18fb      	adds	r3, r7, r3
 800832a:	2203      	movs	r2, #3
 800832c:	701a      	strb	r2, [r3, #0]
        break;
 800832e:	e005      	b.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008330:	4b8e      	ldr	r3, [pc, #568]	; (800856c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	2380      	movs	r3, #128	; 0x80
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	4013      	ands	r3, r2
 800833a:	d0ed      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800833c:	2313      	movs	r3, #19
 800833e:	18fb      	adds	r3, r7, r3
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d154      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008346:	4b88      	ldr	r3, [pc, #544]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008348:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800834a:	23c0      	movs	r3, #192	; 0xc0
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4013      	ands	r3, r2
 8008350:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d019      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	429a      	cmp	r2, r3
 8008360:	d014      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008362:	4b81      	ldr	r3, [pc, #516]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008366:	4a82      	ldr	r2, [pc, #520]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008368:	4013      	ands	r3, r2
 800836a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800836c:	4b7e      	ldr	r3, [pc, #504]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800836e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008370:	4b7d      	ldr	r3, [pc, #500]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008372:	2180      	movs	r1, #128	; 0x80
 8008374:	0249      	lsls	r1, r1, #9
 8008376:	430a      	orrs	r2, r1
 8008378:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800837a:	4b7b      	ldr	r3, [pc, #492]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800837c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800837e:	4b7a      	ldr	r3, [pc, #488]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008380:	497c      	ldr	r1, [pc, #496]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008382:	400a      	ands	r2, r1
 8008384:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008386:	4b78      	ldr	r3, [pc, #480]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2201      	movs	r2, #1
 8008390:	4013      	ands	r3, r2
 8008392:	d016      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008394:	f7fe f84c 	bl	8006430 <HAL_GetTick>
 8008398:	0003      	movs	r3, r0
 800839a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800839c:	e00c      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800839e:	f7fe f847 	bl	8006430 <HAL_GetTick>
 80083a2:	0002      	movs	r2, r0
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	4a73      	ldr	r2, [pc, #460]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d904      	bls.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80083ae:	2313      	movs	r3, #19
 80083b0:	18fb      	adds	r3, r7, r3
 80083b2:	2203      	movs	r2, #3
 80083b4:	701a      	strb	r2, [r3, #0]
            break;
 80083b6:	e004      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083b8:	4b6b      	ldr	r3, [pc, #428]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083bc:	2202      	movs	r2, #2
 80083be:	4013      	ands	r3, r2
 80083c0:	d0ed      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80083c2:	2313      	movs	r3, #19
 80083c4:	18fb      	adds	r3, r7, r3
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10a      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083cc:	4b66      	ldr	r3, [pc, #408]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d0:	4a67      	ldr	r2, [pc, #412]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80083d2:	4013      	ands	r3, r2
 80083d4:	0019      	movs	r1, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083da:	4b63      	ldr	r3, [pc, #396]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80083dc:	430a      	orrs	r2, r1
 80083de:	65da      	str	r2, [r3, #92]	; 0x5c
 80083e0:	e00c      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083e2:	2312      	movs	r3, #18
 80083e4:	18fb      	adds	r3, r7, r3
 80083e6:	2213      	movs	r2, #19
 80083e8:	18ba      	adds	r2, r7, r2
 80083ea:	7812      	ldrb	r2, [r2, #0]
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	e005      	b.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f0:	2312      	movs	r3, #18
 80083f2:	18fb      	adds	r3, r7, r3
 80083f4:	2213      	movs	r2, #19
 80083f6:	18ba      	adds	r2, r7, r2
 80083f8:	7812      	ldrb	r2, [r2, #0]
 80083fa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80083fc:	2311      	movs	r3, #17
 80083fe:	18fb      	adds	r3, r7, r3
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d105      	bne.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008406:	4b58      	ldr	r3, [pc, #352]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800840a:	4b57      	ldr	r3, [pc, #348]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800840c:	495b      	ldr	r1, [pc, #364]	; (800857c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800840e:	400a      	ands	r2, r1
 8008410:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2201      	movs	r2, #1
 8008418:	4013      	ands	r3, r2
 800841a:	d009      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800841c:	4b52      	ldr	r3, [pc, #328]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800841e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008420:	2203      	movs	r2, #3
 8008422:	4393      	bics	r3, r2
 8008424:	0019      	movs	r1, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	4b4f      	ldr	r3, [pc, #316]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800842c:	430a      	orrs	r2, r1
 800842e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2210      	movs	r2, #16
 8008436:	4013      	ands	r3, r2
 8008438:	d009      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800843a:	4b4b      	ldr	r3, [pc, #300]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800843c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843e:	4a50      	ldr	r2, [pc, #320]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8008440:	4013      	ands	r3, r2
 8008442:	0019      	movs	r1, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	4b47      	ldr	r3, [pc, #284]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800844a:	430a      	orrs	r2, r1
 800844c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	2380      	movs	r3, #128	; 0x80
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4013      	ands	r3, r2
 8008458:	d009      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800845a:	4b43      	ldr	r3, [pc, #268]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800845c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845e:	4a49      	ldr	r2, [pc, #292]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8008460:	4013      	ands	r3, r2
 8008462:	0019      	movs	r1, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	695a      	ldr	r2, [r3, #20]
 8008468:	4b3f      	ldr	r3, [pc, #252]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800846a:	430a      	orrs	r2, r1
 800846c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	2380      	movs	r3, #128	; 0x80
 8008474:	00db      	lsls	r3, r3, #3
 8008476:	4013      	ands	r3, r2
 8008478:	d009      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800847a:	4b3b      	ldr	r3, [pc, #236]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800847c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847e:	4a42      	ldr	r2, [pc, #264]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008480:	4013      	ands	r3, r2
 8008482:	0019      	movs	r1, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699a      	ldr	r2, [r3, #24]
 8008488:	4b37      	ldr	r3, [pc, #220]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800848a:	430a      	orrs	r2, r1
 800848c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2220      	movs	r2, #32
 8008494:	4013      	ands	r3, r2
 8008496:	d009      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008498:	4b33      	ldr	r3, [pc, #204]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800849a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849c:	4a3b      	ldr	r2, [pc, #236]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800849e:	4013      	ands	r3, r2
 80084a0:	0019      	movs	r1, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	4b30      	ldr	r3, [pc, #192]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80084a8:	430a      	orrs	r2, r1
 80084aa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	2380      	movs	r3, #128	; 0x80
 80084b2:	01db      	lsls	r3, r3, #7
 80084b4:	4013      	ands	r3, r2
 80084b6:	d015      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80084b8:	4b2b      	ldr	r3, [pc, #172]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80084ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	0899      	lsrs	r1, r3, #2
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	69da      	ldr	r2, [r3, #28]
 80084c4:	4b28      	ldr	r3, [pc, #160]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80084c6:	430a      	orrs	r2, r1
 80084c8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	69da      	ldr	r2, [r3, #28]
 80084ce:	2380      	movs	r3, #128	; 0x80
 80084d0:	05db      	lsls	r3, r3, #23
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d106      	bne.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80084d6:	4b24      	ldr	r3, [pc, #144]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80084d8:	68da      	ldr	r2, [r3, #12]
 80084da:	4b23      	ldr	r3, [pc, #140]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80084dc:	2180      	movs	r1, #128	; 0x80
 80084de:	0249      	lsls	r1, r1, #9
 80084e0:	430a      	orrs	r2, r1
 80084e2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	2380      	movs	r3, #128	; 0x80
 80084ea:	039b      	lsls	r3, r3, #14
 80084ec:	4013      	ands	r3, r2
 80084ee:	d016      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80084f0:	4b1d      	ldr	r3, [pc, #116]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80084f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f4:	4a26      	ldr	r2, [pc, #152]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80084f6:	4013      	ands	r3, r2
 80084f8:	0019      	movs	r1, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1a      	ldr	r2, [r3, #32]
 80084fe:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008500:	430a      	orrs	r2, r1
 8008502:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1a      	ldr	r2, [r3, #32]
 8008508:	2380      	movs	r3, #128	; 0x80
 800850a:	03db      	lsls	r3, r3, #15
 800850c:	429a      	cmp	r2, r3
 800850e:	d106      	bne.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008510:	4b15      	ldr	r3, [pc, #84]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	4b14      	ldr	r3, [pc, #80]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008516:	2180      	movs	r1, #128	; 0x80
 8008518:	0449      	lsls	r1, r1, #17
 800851a:	430a      	orrs	r2, r1
 800851c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	2380      	movs	r3, #128	; 0x80
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	4013      	ands	r3, r2
 8008528:	d016      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800852a:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800852c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852e:	4a19      	ldr	r2, [pc, #100]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008530:	4013      	ands	r3, r2
 8008532:	0019      	movs	r1, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691a      	ldr	r2, [r3, #16]
 8008538:	4b0b      	ldr	r3, [pc, #44]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800853a:	430a      	orrs	r2, r1
 800853c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	2380      	movs	r3, #128	; 0x80
 8008544:	01db      	lsls	r3, r3, #7
 8008546:	429a      	cmp	r2, r3
 8008548:	d106      	bne.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800854a:	4b07      	ldr	r3, [pc, #28]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	4b06      	ldr	r3, [pc, #24]	; (8008568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008550:	2180      	movs	r1, #128	; 0x80
 8008552:	0249      	lsls	r1, r1, #9
 8008554:	430a      	orrs	r2, r1
 8008556:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008558:	2312      	movs	r3, #18
 800855a:	18fb      	adds	r3, r7, r3
 800855c:	781b      	ldrb	r3, [r3, #0]
}
 800855e:	0018      	movs	r0, r3
 8008560:	46bd      	mov	sp, r7
 8008562:	b006      	add	sp, #24
 8008564:	bd80      	pop	{r7, pc}
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	40021000 	.word	0x40021000
 800856c:	40007000 	.word	0x40007000
 8008570:	fffffcff 	.word	0xfffffcff
 8008574:	fffeffff 	.word	0xfffeffff
 8008578:	00001388 	.word	0x00001388
 800857c:	efffffff 	.word	0xefffffff
 8008580:	fffff3ff 	.word	0xfffff3ff
 8008584:	fff3ffff 	.word	0xfff3ffff
 8008588:	ffcfffff 	.word	0xffcfffff
 800858c:	ffffcfff 	.word	0xffffcfff
 8008590:	ffbfffff 	.word	0xffbfffff
 8008594:	ffff3fff 	.word	0xffff3fff

08008598 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e04a      	b.n	8008640 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	223d      	movs	r2, #61	; 0x3d
 80085ae:	5c9b      	ldrb	r3, [r3, r2]
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d107      	bne.n	80085c6 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	223c      	movs	r2, #60	; 0x3c
 80085ba:	2100      	movs	r1, #0
 80085bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	0018      	movs	r0, r3
 80085c2:	f7fd faef 	bl	8005ba4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	223d      	movs	r2, #61	; 0x3d
 80085ca:	2102      	movs	r1, #2
 80085cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3304      	adds	r3, #4
 80085d6:	0019      	movs	r1, r3
 80085d8:	0010      	movs	r0, r2
 80085da:	f000 fb8f 	bl	8008cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2248      	movs	r2, #72	; 0x48
 80085e2:	2101      	movs	r1, #1
 80085e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	223e      	movs	r2, #62	; 0x3e
 80085ea:	2101      	movs	r1, #1
 80085ec:	5499      	strb	r1, [r3, r2]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	223f      	movs	r2, #63	; 0x3f
 80085f2:	2101      	movs	r1, #1
 80085f4:	5499      	strb	r1, [r3, r2]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2240      	movs	r2, #64	; 0x40
 80085fa:	2101      	movs	r1, #1
 80085fc:	5499      	strb	r1, [r3, r2]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2241      	movs	r2, #65	; 0x41
 8008602:	2101      	movs	r1, #1
 8008604:	5499      	strb	r1, [r3, r2]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2242      	movs	r2, #66	; 0x42
 800860a:	2101      	movs	r1, #1
 800860c:	5499      	strb	r1, [r3, r2]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2243      	movs	r2, #67	; 0x43
 8008612:	2101      	movs	r1, #1
 8008614:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2244      	movs	r2, #68	; 0x44
 800861a:	2101      	movs	r1, #1
 800861c:	5499      	strb	r1, [r3, r2]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2245      	movs	r2, #69	; 0x45
 8008622:	2101      	movs	r1, #1
 8008624:	5499      	strb	r1, [r3, r2]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2246      	movs	r2, #70	; 0x46
 800862a:	2101      	movs	r1, #1
 800862c:	5499      	strb	r1, [r3, r2]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2247      	movs	r2, #71	; 0x47
 8008632:	2101      	movs	r1, #1
 8008634:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	223d      	movs	r2, #61	; 0x3d
 800863a:	2101      	movs	r1, #1
 800863c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	0018      	movs	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	b002      	add	sp, #8
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008652:	230f      	movs	r3, #15
 8008654:	18fb      	adds	r3, r7, r3
 8008656:	2200      	movs	r2, #0
 8008658:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d104      	bne.n	800866a <HAL_TIM_IC_Start_IT+0x22>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	223e      	movs	r2, #62	; 0x3e
 8008664:	5c9b      	ldrb	r3, [r3, r2]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	e023      	b.n	80086b2 <HAL_TIM_IC_Start_IT+0x6a>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b04      	cmp	r3, #4
 800866e:	d104      	bne.n	800867a <HAL_TIM_IC_Start_IT+0x32>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	223f      	movs	r2, #63	; 0x3f
 8008674:	5c9b      	ldrb	r3, [r3, r2]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	e01b      	b.n	80086b2 <HAL_TIM_IC_Start_IT+0x6a>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b08      	cmp	r3, #8
 800867e:	d104      	bne.n	800868a <HAL_TIM_IC_Start_IT+0x42>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2240      	movs	r2, #64	; 0x40
 8008684:	5c9b      	ldrb	r3, [r3, r2]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	e013      	b.n	80086b2 <HAL_TIM_IC_Start_IT+0x6a>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b0c      	cmp	r3, #12
 800868e:	d104      	bne.n	800869a <HAL_TIM_IC_Start_IT+0x52>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2241      	movs	r2, #65	; 0x41
 8008694:	5c9b      	ldrb	r3, [r3, r2]
 8008696:	b2db      	uxtb	r3, r3
 8008698:	e00b      	b.n	80086b2 <HAL_TIM_IC_Start_IT+0x6a>
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b10      	cmp	r3, #16
 800869e:	d104      	bne.n	80086aa <HAL_TIM_IC_Start_IT+0x62>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2242      	movs	r2, #66	; 0x42
 80086a4:	5c9b      	ldrb	r3, [r3, r2]
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	e003      	b.n	80086b2 <HAL_TIM_IC_Start_IT+0x6a>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2243      	movs	r2, #67	; 0x43
 80086ae:	5c9b      	ldrb	r3, [r3, r2]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	220e      	movs	r2, #14
 80086b4:	18ba      	adds	r2, r7, r2
 80086b6:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d104      	bne.n	80086c8 <HAL_TIM_IC_Start_IT+0x80>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2244      	movs	r2, #68	; 0x44
 80086c2:	5c9b      	ldrb	r3, [r3, r2]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	e013      	b.n	80086f0 <HAL_TIM_IC_Start_IT+0xa8>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d104      	bne.n	80086d8 <HAL_TIM_IC_Start_IT+0x90>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2245      	movs	r2, #69	; 0x45
 80086d2:	5c9b      	ldrb	r3, [r3, r2]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	e00b      	b.n	80086f0 <HAL_TIM_IC_Start_IT+0xa8>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2b08      	cmp	r3, #8
 80086dc:	d104      	bne.n	80086e8 <HAL_TIM_IC_Start_IT+0xa0>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2246      	movs	r2, #70	; 0x46
 80086e2:	5c9b      	ldrb	r3, [r3, r2]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	e003      	b.n	80086f0 <HAL_TIM_IC_Start_IT+0xa8>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2247      	movs	r2, #71	; 0x47
 80086ec:	5c9b      	ldrb	r3, [r3, r2]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	210d      	movs	r1, #13
 80086f2:	187a      	adds	r2, r7, r1
 80086f4:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80086f6:	230e      	movs	r3, #14
 80086f8:	18fb      	adds	r3, r7, r3
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d103      	bne.n	8008708 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008700:	187b      	adds	r3, r7, r1
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d001      	beq.n	800870c <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e0c3      	b.n	8008894 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d104      	bne.n	800871c <HAL_TIM_IC_Start_IT+0xd4>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	223e      	movs	r2, #62	; 0x3e
 8008716:	2102      	movs	r1, #2
 8008718:	5499      	strb	r1, [r3, r2]
 800871a:	e023      	b.n	8008764 <HAL_TIM_IC_Start_IT+0x11c>
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2b04      	cmp	r3, #4
 8008720:	d104      	bne.n	800872c <HAL_TIM_IC_Start_IT+0xe4>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	223f      	movs	r2, #63	; 0x3f
 8008726:	2102      	movs	r1, #2
 8008728:	5499      	strb	r1, [r3, r2]
 800872a:	e01b      	b.n	8008764 <HAL_TIM_IC_Start_IT+0x11c>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b08      	cmp	r3, #8
 8008730:	d104      	bne.n	800873c <HAL_TIM_IC_Start_IT+0xf4>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2240      	movs	r2, #64	; 0x40
 8008736:	2102      	movs	r1, #2
 8008738:	5499      	strb	r1, [r3, r2]
 800873a:	e013      	b.n	8008764 <HAL_TIM_IC_Start_IT+0x11c>
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2b0c      	cmp	r3, #12
 8008740:	d104      	bne.n	800874c <HAL_TIM_IC_Start_IT+0x104>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2241      	movs	r2, #65	; 0x41
 8008746:	2102      	movs	r1, #2
 8008748:	5499      	strb	r1, [r3, r2]
 800874a:	e00b      	b.n	8008764 <HAL_TIM_IC_Start_IT+0x11c>
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2b10      	cmp	r3, #16
 8008750:	d104      	bne.n	800875c <HAL_TIM_IC_Start_IT+0x114>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2242      	movs	r2, #66	; 0x42
 8008756:	2102      	movs	r1, #2
 8008758:	5499      	strb	r1, [r3, r2]
 800875a:	e003      	b.n	8008764 <HAL_TIM_IC_Start_IT+0x11c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2243      	movs	r2, #67	; 0x43
 8008760:	2102      	movs	r1, #2
 8008762:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d104      	bne.n	8008774 <HAL_TIM_IC_Start_IT+0x12c>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2244      	movs	r2, #68	; 0x44
 800876e:	2102      	movs	r1, #2
 8008770:	5499      	strb	r1, [r3, r2]
 8008772:	e013      	b.n	800879c <HAL_TIM_IC_Start_IT+0x154>
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2b04      	cmp	r3, #4
 8008778:	d104      	bne.n	8008784 <HAL_TIM_IC_Start_IT+0x13c>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2245      	movs	r2, #69	; 0x45
 800877e:	2102      	movs	r1, #2
 8008780:	5499      	strb	r1, [r3, r2]
 8008782:	e00b      	b.n	800879c <HAL_TIM_IC_Start_IT+0x154>
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2b08      	cmp	r3, #8
 8008788:	d104      	bne.n	8008794 <HAL_TIM_IC_Start_IT+0x14c>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2246      	movs	r2, #70	; 0x46
 800878e:	2102      	movs	r1, #2
 8008790:	5499      	strb	r1, [r3, r2]
 8008792:	e003      	b.n	800879c <HAL_TIM_IC_Start_IT+0x154>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2247      	movs	r2, #71	; 0x47
 8008798:	2102      	movs	r1, #2
 800879a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2b0c      	cmp	r3, #12
 80087a0:	d02a      	beq.n	80087f8 <HAL_TIM_IC_Start_IT+0x1b0>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b0c      	cmp	r3, #12
 80087a6:	d830      	bhi.n	800880a <HAL_TIM_IC_Start_IT+0x1c2>
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2b08      	cmp	r3, #8
 80087ac:	d01b      	beq.n	80087e6 <HAL_TIM_IC_Start_IT+0x19e>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d82a      	bhi.n	800880a <HAL_TIM_IC_Start_IT+0x1c2>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_TIM_IC_Start_IT+0x17a>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d009      	beq.n	80087d4 <HAL_TIM_IC_Start_IT+0x18c>
 80087c0:	e023      	b.n	800880a <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68da      	ldr	r2, [r3, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2102      	movs	r1, #2
 80087ce:	430a      	orrs	r2, r1
 80087d0:	60da      	str	r2, [r3, #12]
      break;
 80087d2:	e01f      	b.n	8008814 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68da      	ldr	r2, [r3, #12]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2104      	movs	r1, #4
 80087e0:	430a      	orrs	r2, r1
 80087e2:	60da      	str	r2, [r3, #12]
      break;
 80087e4:	e016      	b.n	8008814 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2108      	movs	r1, #8
 80087f2:	430a      	orrs	r2, r1
 80087f4:	60da      	str	r2, [r3, #12]
      break;
 80087f6:	e00d      	b.n	8008814 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68da      	ldr	r2, [r3, #12]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2110      	movs	r1, #16
 8008804:	430a      	orrs	r2, r1
 8008806:	60da      	str	r2, [r3, #12]
      break;
 8008808:	e004      	b.n	8008814 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800880a:	230f      	movs	r3, #15
 800880c:	18fb      	adds	r3, r7, r3
 800880e:	2201      	movs	r2, #1
 8008810:	701a      	strb	r2, [r3, #0]
      break;
 8008812:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8008814:	230f      	movs	r3, #15
 8008816:	18fb      	adds	r3, r7, r3
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d137      	bne.n	800888e <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	2201      	movs	r2, #1
 8008826:	0018      	movs	r0, r3
 8008828:	f000 fbfc 	bl	8009024 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1a      	ldr	r2, [pc, #104]	; (800889c <HAL_TIM_IC_Start_IT+0x254>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d00a      	beq.n	800884c <HAL_TIM_IC_Start_IT+0x204>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	2380      	movs	r3, #128	; 0x80
 800883c:	05db      	lsls	r3, r3, #23
 800883e:	429a      	cmp	r2, r3
 8008840:	d004      	beq.n	800884c <HAL_TIM_IC_Start_IT+0x204>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a16      	ldr	r2, [pc, #88]	; (80088a0 <HAL_TIM_IC_Start_IT+0x258>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d116      	bne.n	800887a <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	4a14      	ldr	r2, [pc, #80]	; (80088a4 <HAL_TIM_IC_Start_IT+0x25c>)
 8008854:	4013      	ands	r3, r2
 8008856:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b06      	cmp	r3, #6
 800885c:	d016      	beq.n	800888c <HAL_TIM_IC_Start_IT+0x244>
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	2380      	movs	r3, #128	; 0x80
 8008862:	025b      	lsls	r3, r3, #9
 8008864:	429a      	cmp	r2, r3
 8008866:	d011      	beq.n	800888c <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2101      	movs	r1, #1
 8008874:	430a      	orrs	r2, r1
 8008876:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008878:	e008      	b.n	800888c <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2101      	movs	r1, #1
 8008886:	430a      	orrs	r2, r1
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	e000      	b.n	800888e <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800888c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800888e:	230f      	movs	r3, #15
 8008890:	18fb      	adds	r3, r7, r3
 8008892:	781b      	ldrb	r3, [r3, #0]
}
 8008894:	0018      	movs	r0, r3
 8008896:	46bd      	mov	sp, r7
 8008898:	b004      	add	sp, #16
 800889a:	bd80      	pop	{r7, pc}
 800889c:	40012c00 	.word	0x40012c00
 80088a0:	40000400 	.word	0x40000400
 80088a4:	00010007 	.word	0x00010007

080088a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	2202      	movs	r2, #2
 80088b8:	4013      	ands	r3, r2
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d124      	bne.n	8008908 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	2202      	movs	r2, #2
 80088c6:	4013      	ands	r3, r2
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d11d      	bne.n	8008908 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2203      	movs	r2, #3
 80088d2:	4252      	negs	r2, r2
 80088d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	2203      	movs	r2, #3
 80088e4:	4013      	ands	r3, r2
 80088e6:	d004      	beq.n	80088f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	0018      	movs	r0, r3
 80088ec:	f7fc fe0e 	bl	800550c <HAL_TIM_IC_CaptureCallback>
 80088f0:	e007      	b.n	8008902 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	0018      	movs	r0, r3
 80088f6:	f000 f9e9 	bl	8008ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	0018      	movs	r0, r3
 80088fe:	f000 f9ed 	bl	8008cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2204      	movs	r2, #4
 8008910:	4013      	ands	r3, r2
 8008912:	2b04      	cmp	r3, #4
 8008914:	d125      	bne.n	8008962 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	2204      	movs	r2, #4
 800891e:	4013      	ands	r3, r2
 8008920:	2b04      	cmp	r3, #4
 8008922:	d11e      	bne.n	8008962 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2205      	movs	r2, #5
 800892a:	4252      	negs	r2, r2
 800892c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2202      	movs	r2, #2
 8008932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	699a      	ldr	r2, [r3, #24]
 800893a:	23c0      	movs	r3, #192	; 0xc0
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4013      	ands	r3, r2
 8008940:	d004      	beq.n	800894c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	0018      	movs	r0, r3
 8008946:	f7fc fde1 	bl	800550c <HAL_TIM_IC_CaptureCallback>
 800894a:	e007      	b.n	800895c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	0018      	movs	r0, r3
 8008950:	f000 f9bc 	bl	8008ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	0018      	movs	r0, r3
 8008958:	f000 f9c0 	bl	8008cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	2208      	movs	r2, #8
 800896a:	4013      	ands	r3, r2
 800896c:	2b08      	cmp	r3, #8
 800896e:	d124      	bne.n	80089ba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	2208      	movs	r2, #8
 8008978:	4013      	ands	r3, r2
 800897a:	2b08      	cmp	r3, #8
 800897c:	d11d      	bne.n	80089ba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2209      	movs	r2, #9
 8008984:	4252      	negs	r2, r2
 8008986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2204      	movs	r2, #4
 800898c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	2203      	movs	r2, #3
 8008996:	4013      	ands	r3, r2
 8008998:	d004      	beq.n	80089a4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	0018      	movs	r0, r3
 800899e:	f7fc fdb5 	bl	800550c <HAL_TIM_IC_CaptureCallback>
 80089a2:	e007      	b.n	80089b4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	0018      	movs	r0, r3
 80089a8:	f000 f990 	bl	8008ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	0018      	movs	r0, r3
 80089b0:	f000 f994 	bl	8008cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	2210      	movs	r2, #16
 80089c2:	4013      	ands	r3, r2
 80089c4:	2b10      	cmp	r3, #16
 80089c6:	d125      	bne.n	8008a14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	2210      	movs	r2, #16
 80089d0:	4013      	ands	r3, r2
 80089d2:	2b10      	cmp	r3, #16
 80089d4:	d11e      	bne.n	8008a14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2211      	movs	r2, #17
 80089dc:	4252      	negs	r2, r2
 80089de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2208      	movs	r2, #8
 80089e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69da      	ldr	r2, [r3, #28]
 80089ec:	23c0      	movs	r3, #192	; 0xc0
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4013      	ands	r3, r2
 80089f2:	d004      	beq.n	80089fe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	0018      	movs	r0, r3
 80089f8:	f7fc fd88 	bl	800550c <HAL_TIM_IC_CaptureCallback>
 80089fc:	e007      	b.n	8008a0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	0018      	movs	r0, r3
 8008a02:	f000 f963 	bl	8008ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	0018      	movs	r0, r3
 8008a0a:	f000 f967 	bl	8008cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d10f      	bne.n	8008a42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d108      	bne.n	8008a42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2202      	movs	r2, #2
 8008a36:	4252      	negs	r2, r2
 8008a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f000 f93d 	bl	8008cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2280      	movs	r2, #128	; 0x80
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	2b80      	cmp	r3, #128	; 0x80
 8008a4e:	d10f      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	2280      	movs	r2, #128	; 0x80
 8008a58:	4013      	ands	r3, r2
 8008a5a:	2b80      	cmp	r3, #128	; 0x80
 8008a5c:	d108      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2281      	movs	r2, #129	; 0x81
 8008a64:	4252      	negs	r2, r2
 8008a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	f000 fb6e 	bl	800914c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	691a      	ldr	r2, [r3, #16]
 8008a76:	2380      	movs	r3, #128	; 0x80
 8008a78:	005b      	lsls	r3, r3, #1
 8008a7a:	401a      	ands	r2, r3
 8008a7c:	2380      	movs	r3, #128	; 0x80
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d10e      	bne.n	8008aa2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	2280      	movs	r2, #128	; 0x80
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	2b80      	cmp	r3, #128	; 0x80
 8008a90:	d107      	bne.n	8008aa2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a1c      	ldr	r2, [pc, #112]	; (8008b08 <HAL_TIM_IRQHandler+0x260>)
 8008a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f000 fb5d 	bl	800915c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2240      	movs	r2, #64	; 0x40
 8008aaa:	4013      	ands	r3, r2
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d10f      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	2240      	movs	r2, #64	; 0x40
 8008ab8:	4013      	ands	r3, r2
 8008aba:	2b40      	cmp	r3, #64	; 0x40
 8008abc:	d108      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2241      	movs	r2, #65	; 0x41
 8008ac4:	4252      	negs	r2, r2
 8008ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	0018      	movs	r0, r3
 8008acc:	f000 f90e 	bl	8008cec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b20      	cmp	r3, #32
 8008adc:	d10f      	bne.n	8008afe <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	2b20      	cmp	r3, #32
 8008aea:	d108      	bne.n	8008afe <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2221      	movs	r2, #33	; 0x21
 8008af2:	4252      	negs	r2, r2
 8008af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	0018      	movs	r0, r3
 8008afa:	f000 fb1f 	bl	800913c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008afe:	46c0      	nop			; (mov r8, r8)
 8008b00:	46bd      	mov	sp, r7
 8008b02:	b002      	add	sp, #8
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	46c0      	nop			; (mov r8, r8)
 8008b08:	fffffeff 	.word	0xfffffeff

08008b0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b18:	2317      	movs	r3, #23
 8008b1a:	18fb      	adds	r3, r7, r3
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	223c      	movs	r2, #60	; 0x3c
 8008b24:	5c9b      	ldrb	r3, [r3, r2]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d101      	bne.n	8008b2e <HAL_TIM_IC_ConfigChannel+0x22>
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	e08c      	b.n	8008c48 <HAL_TIM_IC_ConfigChannel+0x13c>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	223c      	movs	r2, #60	; 0x3c
 8008b32:	2101      	movs	r1, #1
 8008b34:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d11b      	bne.n	8008b74 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	6819      	ldr	r1, [r3, #0]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f000 f94c 	bl	8008de8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	699a      	ldr	r2, [r3, #24]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	210c      	movs	r1, #12
 8008b5c:	438a      	bics	r2, r1
 8008b5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6999      	ldr	r1, [r3, #24]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	689a      	ldr	r2, [r3, #8]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	619a      	str	r2, [r3, #24]
 8008b72:	e062      	b.n	8008c3a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d11c      	bne.n	8008bb4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6818      	ldr	r0, [r3, #0]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	6819      	ldr	r1, [r3, #0]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f000 f983 	bl	8008e94 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	492d      	ldr	r1, [pc, #180]	; (8008c50 <HAL_TIM_IC_ConfigChannel+0x144>)
 8008b9a:	400a      	ands	r2, r1
 8008b9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6999      	ldr	r1, [r3, #24]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	021a      	lsls	r2, r3, #8
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	619a      	str	r2, [r3, #24]
 8008bb2:	e042      	b.n	8008c3a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	d11b      	bne.n	8008bf2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	6819      	ldr	r1, [r3, #0]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f000 f9a5 	bl	8008f18 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	69da      	ldr	r2, [r3, #28]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	210c      	movs	r1, #12
 8008bda:	438a      	bics	r2, r1
 8008bdc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	69d9      	ldr	r1, [r3, #28]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	61da      	str	r2, [r3, #28]
 8008bf0:	e023      	b.n	8008c3a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b0c      	cmp	r3, #12
 8008bf6:	d11c      	bne.n	8008c32 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	6819      	ldr	r1, [r3, #0]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f000 f9c6 	bl	8008f98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	69da      	ldr	r2, [r3, #28]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	490e      	ldr	r1, [pc, #56]	; (8008c50 <HAL_TIM_IC_ConfigChannel+0x144>)
 8008c18:	400a      	ands	r2, r1
 8008c1a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	69d9      	ldr	r1, [r3, #28]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	021a      	lsls	r2, r3, #8
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	61da      	str	r2, [r3, #28]
 8008c30:	e003      	b.n	8008c3a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8008c32:	2317      	movs	r3, #23
 8008c34:	18fb      	adds	r3, r7, r3
 8008c36:	2201      	movs	r2, #1
 8008c38:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	223c      	movs	r2, #60	; 0x3c
 8008c3e:	2100      	movs	r1, #0
 8008c40:	5499      	strb	r1, [r3, r2]

  return status;
 8008c42:	2317      	movs	r3, #23
 8008c44:	18fb      	adds	r3, r7, r3
 8008c46:	781b      	ldrb	r3, [r3, #0]
}
 8008c48:	0018      	movs	r0, r3
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	b006      	add	sp, #24
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	fffff3ff 	.word	0xfffff3ff

08008c54 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b0c      	cmp	r3, #12
 8008c66:	d01e      	beq.n	8008ca6 <HAL_TIM_ReadCapturedValue+0x52>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b0c      	cmp	r3, #12
 8008c6c:	d820      	bhi.n	8008cb0 <HAL_TIM_ReadCapturedValue+0x5c>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d013      	beq.n	8008c9c <HAL_TIM_ReadCapturedValue+0x48>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d81a      	bhi.n	8008cb0 <HAL_TIM_ReadCapturedValue+0x5c>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <HAL_TIM_ReadCapturedValue+0x34>
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	2b04      	cmp	r3, #4
 8008c84:	d005      	beq.n	8008c92 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8008c86:	e013      	b.n	8008cb0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8e:	60fb      	str	r3, [r7, #12]
      break;
 8008c90:	e00f      	b.n	8008cb2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	60fb      	str	r3, [r7, #12]
      break;
 8008c9a:	e00a      	b.n	8008cb2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca2:	60fb      	str	r3, [r7, #12]
      break;
 8008ca4:	e005      	b.n	8008cb2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cac:	60fb      	str	r3, [r7, #12]
      break;
 8008cae:	e000      	b.n	8008cb2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8008cb0:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
}
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	b004      	add	sp, #16
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008cc4:	46c0      	nop			; (mov r8, r8)
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	b002      	add	sp, #8
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cd4:	46c0      	nop			; (mov r8, r8)
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	b002      	add	sp, #8
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ce4:	46c0      	nop			; (mov r8, r8)
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	b002      	add	sp, #8
 8008cea:	bd80      	pop	{r7, pc}

08008cec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cf4:	46c0      	nop			; (mov r8, r8)
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	b002      	add	sp, #8
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a30      	ldr	r2, [pc, #192]	; (8008dd0 <TIM_Base_SetConfig+0xd4>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d008      	beq.n	8008d26 <TIM_Base_SetConfig+0x2a>
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	2380      	movs	r3, #128	; 0x80
 8008d18:	05db      	lsls	r3, r3, #23
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d003      	beq.n	8008d26 <TIM_Base_SetConfig+0x2a>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a2c      	ldr	r2, [pc, #176]	; (8008dd4 <TIM_Base_SetConfig+0xd8>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d108      	bne.n	8008d38 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2270      	movs	r2, #112	; 0x70
 8008d2a:	4393      	bics	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a25      	ldr	r2, [pc, #148]	; (8008dd0 <TIM_Base_SetConfig+0xd4>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d014      	beq.n	8008d6a <TIM_Base_SetConfig+0x6e>
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	2380      	movs	r3, #128	; 0x80
 8008d44:	05db      	lsls	r3, r3, #23
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d00f      	beq.n	8008d6a <TIM_Base_SetConfig+0x6e>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a21      	ldr	r2, [pc, #132]	; (8008dd4 <TIM_Base_SetConfig+0xd8>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00b      	beq.n	8008d6a <TIM_Base_SetConfig+0x6e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a20      	ldr	r2, [pc, #128]	; (8008dd8 <TIM_Base_SetConfig+0xdc>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d007      	beq.n	8008d6a <TIM_Base_SetConfig+0x6e>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a1f      	ldr	r2, [pc, #124]	; (8008ddc <TIM_Base_SetConfig+0xe0>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d003      	beq.n	8008d6a <TIM_Base_SetConfig+0x6e>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a1e      	ldr	r2, [pc, #120]	; (8008de0 <TIM_Base_SetConfig+0xe4>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d108      	bne.n	8008d7c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4a1d      	ldr	r2, [pc, #116]	; (8008de4 <TIM_Base_SetConfig+0xe8>)
 8008d6e:	4013      	ands	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2280      	movs	r2, #128	; 0x80
 8008d80:	4393      	bics	r3, r2
 8008d82:	001a      	movs	r2, r3
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	689a      	ldr	r2, [r3, #8]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a0a      	ldr	r2, [pc, #40]	; (8008dd0 <TIM_Base_SetConfig+0xd4>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d007      	beq.n	8008dba <TIM_Base_SetConfig+0xbe>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a0b      	ldr	r2, [pc, #44]	; (8008ddc <TIM_Base_SetConfig+0xe0>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d003      	beq.n	8008dba <TIM_Base_SetConfig+0xbe>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a0a      	ldr	r2, [pc, #40]	; (8008de0 <TIM_Base_SetConfig+0xe4>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d103      	bne.n	8008dc2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	691a      	ldr	r2, [r3, #16]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	615a      	str	r2, [r3, #20]
}
 8008dc8:	46c0      	nop			; (mov r8, r8)
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	b004      	add	sp, #16
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40012c00 	.word	0x40012c00
 8008dd4:	40000400 	.word	0x40000400
 8008dd8:	40002000 	.word	0x40002000
 8008ddc:	40014400 	.word	0x40014400
 8008de0:	40014800 	.word	0x40014800
 8008de4:	fffffcff 	.word	0xfffffcff

08008de8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6a1b      	ldr	r3, [r3, #32]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	4393      	bics	r3, r2
 8008dfe:	001a      	movs	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4a1e      	ldr	r2, [pc, #120]	; (8008e8c <TIM_TI1_SetConfig+0xa4>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d008      	beq.n	8008e2a <TIM_TI1_SetConfig+0x42>
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	2380      	movs	r3, #128	; 0x80
 8008e1c:	05db      	lsls	r3, r3, #23
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d003      	beq.n	8008e2a <TIM_TI1_SetConfig+0x42>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4a1a      	ldr	r2, [pc, #104]	; (8008e90 <TIM_TI1_SetConfig+0xa8>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d101      	bne.n	8008e2e <TIM_TI1_SetConfig+0x46>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e000      	b.n	8008e30 <TIM_TI1_SetConfig+0x48>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d008      	beq.n	8008e46 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2203      	movs	r2, #3
 8008e38:	4393      	bics	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	e003      	b.n	8008e4e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	22f0      	movs	r2, #240	; 0xf0
 8008e52:	4393      	bics	r3, r2
 8008e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	22ff      	movs	r2, #255	; 0xff
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	220a      	movs	r2, #10
 8008e68:	4393      	bics	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	220a      	movs	r2, #10
 8008e70:	4013      	ands	r3, r2
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	621a      	str	r2, [r3, #32]
}
 8008e84:	46c0      	nop			; (mov r8, r8)
 8008e86:	46bd      	mov	sp, r7
 8008e88:	b006      	add	sp, #24
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	40012c00 	.word	0x40012c00
 8008e90:	40000400 	.word	0x40000400

08008e94 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	2210      	movs	r2, #16
 8008ea8:	4393      	bics	r3, r2
 8008eaa:	001a      	movs	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	4a14      	ldr	r2, [pc, #80]	; (8008f10 <TIM_TI2_SetConfig+0x7c>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	4a10      	ldr	r2, [pc, #64]	; (8008f14 <TIM_TI2_SetConfig+0x80>)
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	031b      	lsls	r3, r3, #12
 8008eda:	041b      	lsls	r3, r3, #16
 8008edc:	0c1b      	lsrs	r3, r3, #16
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	22a0      	movs	r2, #160	; 0xa0
 8008ee8:	4393      	bics	r3, r2
 8008eea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	011b      	lsls	r3, r3, #4
 8008ef0:	22a0      	movs	r2, #160	; 0xa0
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	621a      	str	r2, [r3, #32]
}
 8008f06:	46c0      	nop			; (mov r8, r8)
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	b006      	add	sp, #24
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	46c0      	nop			; (mov r8, r8)
 8008f10:	fffffcff 	.word	0xfffffcff
 8008f14:	ffff0fff 	.word	0xffff0fff

08008f18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	4a19      	ldr	r2, [pc, #100]	; (8008f90 <TIM_TI3_SetConfig+0x78>)
 8008f2c:	401a      	ands	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2203      	movs	r2, #3
 8008f42:	4393      	bics	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	22f0      	movs	r2, #240	; 0xf0
 8008f52:	4393      	bics	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	011b      	lsls	r3, r3, #4
 8008f5a:	22ff      	movs	r2, #255	; 0xff
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	4a0b      	ldr	r2, [pc, #44]	; (8008f94 <TIM_TI3_SetConfig+0x7c>)
 8008f68:	4013      	ands	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	021a      	lsls	r2, r3, #8
 8008f70:	23a0      	movs	r3, #160	; 0xa0
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	4013      	ands	r3, r2
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	621a      	str	r2, [r3, #32]
}
 8008f88:	46c0      	nop			; (mov r8, r8)
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	b006      	add	sp, #24
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	fffffeff 	.word	0xfffffeff
 8008f94:	fffff5ff 	.word	0xfffff5ff

08008f98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b086      	sub	sp, #24
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
 8008fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	4a1a      	ldr	r2, [pc, #104]	; (8009014 <TIM_TI4_SetConfig+0x7c>)
 8008fac:	401a      	ands	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6a1b      	ldr	r3, [r3, #32]
 8008fbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	4a15      	ldr	r2, [pc, #84]	; (8009018 <TIM_TI4_SetConfig+0x80>)
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	021b      	lsls	r3, r3, #8
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	4a12      	ldr	r2, [pc, #72]	; (800901c <TIM_TI4_SetConfig+0x84>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	031b      	lsls	r3, r3, #12
 8008fdc:	041b      	lsls	r3, r3, #16
 8008fde:	0c1b      	lsrs	r3, r3, #16
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	4a0d      	ldr	r2, [pc, #52]	; (8009020 <TIM_TI4_SetConfig+0x88>)
 8008fea:	4013      	ands	r3, r2
 8008fec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	031a      	lsls	r2, r3, #12
 8008ff2:	23a0      	movs	r3, #160	; 0xa0
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	621a      	str	r2, [r3, #32]
}
 800900a:	46c0      	nop			; (mov r8, r8)
 800900c:	46bd      	mov	sp, r7
 800900e:	b006      	add	sp, #24
 8009010:	bd80      	pop	{r7, pc}
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	ffffefff 	.word	0xffffefff
 8009018:	fffffcff 	.word	0xfffffcff
 800901c:	ffff0fff 	.word	0xffff0fff
 8009020:	ffff5fff 	.word	0xffff5fff

08009024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	221f      	movs	r2, #31
 8009034:	4013      	ands	r3, r2
 8009036:	2201      	movs	r2, #1
 8009038:	409a      	lsls	r2, r3
 800903a:	0013      	movs	r3, r2
 800903c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	43d2      	mvns	r2, r2
 8009046:	401a      	ands	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6a1a      	ldr	r2, [r3, #32]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	211f      	movs	r1, #31
 8009054:	400b      	ands	r3, r1
 8009056:	6879      	ldr	r1, [r7, #4]
 8009058:	4099      	lsls	r1, r3
 800905a:	000b      	movs	r3, r1
 800905c:	431a      	orrs	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	621a      	str	r2, [r3, #32]
}
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	46bd      	mov	sp, r7
 8009066:	b006      	add	sp, #24
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	223c      	movs	r2, #60	; 0x3c
 800907a:	5c9b      	ldrb	r3, [r3, r2]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d101      	bne.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009080:	2302      	movs	r3, #2
 8009082:	e050      	b.n	8009126 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	223c      	movs	r2, #60	; 0x3c
 8009088:	2101      	movs	r1, #1
 800908a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	223d      	movs	r2, #61	; 0x3d
 8009090:	2102      	movs	r1, #2
 8009092:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a21      	ldr	r2, [pc, #132]	; (8009130 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d108      	bne.n	80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	4a20      	ldr	r2, [pc, #128]	; (8009134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80090b2:	4013      	ands	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2270      	movs	r2, #112	; 0x70
 80090c4:	4393      	bics	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a14      	ldr	r2, [pc, #80]	; (8009130 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00a      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	2380      	movs	r3, #128	; 0x80
 80090ea:	05db      	lsls	r3, r3, #23
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d004      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a10      	ldr	r2, [pc, #64]	; (8009138 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d10c      	bne.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2280      	movs	r2, #128	; 0x80
 80090fe:	4393      	bics	r3, r2
 8009100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	4313      	orrs	r3, r2
 800910a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	223d      	movs	r2, #61	; 0x3d
 8009118:	2101      	movs	r1, #1
 800911a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	223c      	movs	r2, #60	; 0x3c
 8009120:	2100      	movs	r1, #0
 8009122:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	0018      	movs	r0, r3
 8009128:	46bd      	mov	sp, r7
 800912a:	b004      	add	sp, #16
 800912c:	bd80      	pop	{r7, pc}
 800912e:	46c0      	nop			; (mov r8, r8)
 8009130:	40012c00 	.word	0x40012c00
 8009134:	ff0fffff 	.word	0xff0fffff
 8009138:	40000400 	.word	0x40000400

0800913c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009144:	46c0      	nop			; (mov r8, r8)
 8009146:	46bd      	mov	sp, r7
 8009148:	b002      	add	sp, #8
 800914a:	bd80      	pop	{r7, pc}

0800914c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009154:	46c0      	nop			; (mov r8, r8)
 8009156:	46bd      	mov	sp, r7
 8009158:	b002      	add	sp, #8
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009164:	46c0      	nop			; (mov r8, r8)
 8009166:	46bd      	mov	sp, r7
 8009168:	b002      	add	sp, #8
 800916a:	bd80      	pop	{r7, pc}

0800916c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e046      	b.n	800920c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2288      	movs	r2, #136	; 0x88
 8009182:	589b      	ldr	r3, [r3, r2]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d107      	bne.n	8009198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2284      	movs	r2, #132	; 0x84
 800918c:	2100      	movs	r1, #0
 800918e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	0018      	movs	r0, r3
 8009194:	f7fc fd56 	bl	8005c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2288      	movs	r2, #136	; 0x88
 800919c:	2124      	movs	r1, #36	; 0x24
 800919e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2101      	movs	r1, #1
 80091ac:	438a      	bics	r2, r1
 80091ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	0018      	movs	r0, r3
 80091b4:	f000 fc12 	bl	80099dc <UART_SetConfig>
 80091b8:	0003      	movs	r3, r0
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d101      	bne.n	80091c2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e024      	b.n	800920c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	0018      	movs	r0, r3
 80091ce:	f000 fe7d 	bl	8009ecc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685a      	ldr	r2, [r3, #4]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	490d      	ldr	r1, [pc, #52]	; (8009214 <HAL_UART_Init+0xa8>)
 80091de:	400a      	ands	r2, r1
 80091e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	689a      	ldr	r2, [r3, #8]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	212a      	movs	r1, #42	; 0x2a
 80091ee:	438a      	bics	r2, r1
 80091f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2101      	movs	r1, #1
 80091fe:	430a      	orrs	r2, r1
 8009200:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	0018      	movs	r0, r3
 8009206:	f000 ff15 	bl	800a034 <UART_CheckIdleState>
 800920a:	0003      	movs	r3, r0
}
 800920c:	0018      	movs	r0, r3
 800920e:	46bd      	mov	sp, r7
 8009210:	b002      	add	sp, #8
 8009212:	bd80      	pop	{r7, pc}
 8009214:	ffffb7ff 	.word	0xffffb7ff

08009218 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08a      	sub	sp, #40	; 0x28
 800921c:	af02      	add	r7, sp, #8
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	603b      	str	r3, [r7, #0]
 8009224:	1dbb      	adds	r3, r7, #6
 8009226:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2288      	movs	r2, #136	; 0x88
 800922c:	589b      	ldr	r3, [r3, r2]
 800922e:	2b20      	cmp	r3, #32
 8009230:	d000      	beq.n	8009234 <HAL_UART_Transmit+0x1c>
 8009232:	e088      	b.n	8009346 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <HAL_UART_Transmit+0x2a>
 800923a:	1dbb      	adds	r3, r7, #6
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e080      	b.n	8009348 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	689a      	ldr	r2, [r3, #8]
 800924a:	2380      	movs	r3, #128	; 0x80
 800924c:	015b      	lsls	r3, r3, #5
 800924e:	429a      	cmp	r2, r3
 8009250:	d109      	bne.n	8009266 <HAL_UART_Transmit+0x4e>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d105      	bne.n	8009266 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2201      	movs	r2, #1
 800925e:	4013      	ands	r3, r2
 8009260:	d001      	beq.n	8009266 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e070      	b.n	8009348 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2290      	movs	r2, #144	; 0x90
 800926a:	2100      	movs	r1, #0
 800926c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2288      	movs	r2, #136	; 0x88
 8009272:	2121      	movs	r1, #33	; 0x21
 8009274:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009276:	f7fd f8db 	bl	8006430 <HAL_GetTick>
 800927a:	0003      	movs	r3, r0
 800927c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	1dba      	adds	r2, r7, #6
 8009282:	2154      	movs	r1, #84	; 0x54
 8009284:	8812      	ldrh	r2, [r2, #0]
 8009286:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	1dba      	adds	r2, r7, #6
 800928c:	2156      	movs	r1, #86	; 0x56
 800928e:	8812      	ldrh	r2, [r2, #0]
 8009290:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	689a      	ldr	r2, [r3, #8]
 8009296:	2380      	movs	r3, #128	; 0x80
 8009298:	015b      	lsls	r3, r3, #5
 800929a:	429a      	cmp	r2, r3
 800929c:	d108      	bne.n	80092b0 <HAL_UART_Transmit+0x98>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d104      	bne.n	80092b0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80092a6:	2300      	movs	r3, #0
 80092a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	61bb      	str	r3, [r7, #24]
 80092ae:	e003      	b.n	80092b8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092b4:	2300      	movs	r3, #0
 80092b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80092b8:	e02c      	b.n	8009314 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	0013      	movs	r3, r2
 80092c4:	2200      	movs	r2, #0
 80092c6:	2180      	movs	r1, #128	; 0x80
 80092c8:	f000 ff02 	bl	800a0d0 <UART_WaitOnFlagUntilTimeout>
 80092cc:	1e03      	subs	r3, r0, #0
 80092ce:	d001      	beq.n	80092d4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e039      	b.n	8009348 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10b      	bne.n	80092f2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	001a      	movs	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	05d2      	lsls	r2, r2, #23
 80092e6:	0dd2      	lsrs	r2, r2, #23
 80092e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	3302      	adds	r3, #2
 80092ee:	61bb      	str	r3, [r7, #24]
 80092f0:	e007      	b.n	8009302 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	781a      	ldrb	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	3301      	adds	r3, #1
 8009300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2256      	movs	r2, #86	; 0x56
 8009306:	5a9b      	ldrh	r3, [r3, r2]
 8009308:	b29b      	uxth	r3, r3
 800930a:	3b01      	subs	r3, #1
 800930c:	b299      	uxth	r1, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2256      	movs	r2, #86	; 0x56
 8009312:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2256      	movs	r2, #86	; 0x56
 8009318:	5a9b      	ldrh	r3, [r3, r2]
 800931a:	b29b      	uxth	r3, r3
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1cc      	bne.n	80092ba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	0013      	movs	r3, r2
 800932a:	2200      	movs	r2, #0
 800932c:	2140      	movs	r1, #64	; 0x40
 800932e:	f000 fecf 	bl	800a0d0 <UART_WaitOnFlagUntilTimeout>
 8009332:	1e03      	subs	r3, r0, #0
 8009334:	d001      	beq.n	800933a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8009336:	2303      	movs	r3, #3
 8009338:	e006      	b.n	8009348 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2288      	movs	r2, #136	; 0x88
 800933e:	2120      	movs	r1, #32
 8009340:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	e000      	b.n	8009348 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8009346:	2302      	movs	r3, #2
  }
}
 8009348:	0018      	movs	r0, r3
 800934a:	46bd      	mov	sp, r7
 800934c:	b008      	add	sp, #32
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009350:	b5b0      	push	{r4, r5, r7, lr}
 8009352:	b0aa      	sub	sp, #168	; 0xa8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	22a4      	movs	r2, #164	; 0xa4
 8009360:	18b9      	adds	r1, r7, r2
 8009362:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	20a0      	movs	r0, #160	; 0xa0
 800936c:	1839      	adds	r1, r7, r0
 800936e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	249c      	movs	r4, #156	; 0x9c
 8009378:	1939      	adds	r1, r7, r4
 800937a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800937c:	0011      	movs	r1, r2
 800937e:	18bb      	adds	r3, r7, r2
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4aa2      	ldr	r2, [pc, #648]	; (800960c <HAL_UART_IRQHandler+0x2bc>)
 8009384:	4013      	ands	r3, r2
 8009386:	2298      	movs	r2, #152	; 0x98
 8009388:	18bd      	adds	r5, r7, r2
 800938a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800938c:	18bb      	adds	r3, r7, r2
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d11a      	bne.n	80093ca <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009394:	187b      	adds	r3, r7, r1
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2220      	movs	r2, #32
 800939a:	4013      	ands	r3, r2
 800939c:	d015      	beq.n	80093ca <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800939e:	183b      	adds	r3, r7, r0
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2220      	movs	r2, #32
 80093a4:	4013      	ands	r3, r2
 80093a6:	d105      	bne.n	80093b4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093a8:	193b      	adds	r3, r7, r4
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	2380      	movs	r3, #128	; 0x80
 80093ae:	055b      	lsls	r3, r3, #21
 80093b0:	4013      	ands	r3, r2
 80093b2:	d00a      	beq.n	80093ca <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d100      	bne.n	80093be <HAL_UART_IRQHandler+0x6e>
 80093bc:	e2dc      	b.n	8009978 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	0010      	movs	r0, r2
 80093c6:	4798      	blx	r3
      }
      return;
 80093c8:	e2d6      	b.n	8009978 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093ca:	2398      	movs	r3, #152	; 0x98
 80093cc:	18fb      	adds	r3, r7, r3
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d100      	bne.n	80093d6 <HAL_UART_IRQHandler+0x86>
 80093d4:	e122      	b.n	800961c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80093d6:	239c      	movs	r3, #156	; 0x9c
 80093d8:	18fb      	adds	r3, r7, r3
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a8c      	ldr	r2, [pc, #560]	; (8009610 <HAL_UART_IRQHandler+0x2c0>)
 80093de:	4013      	ands	r3, r2
 80093e0:	d106      	bne.n	80093f0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80093e2:	23a0      	movs	r3, #160	; 0xa0
 80093e4:	18fb      	adds	r3, r7, r3
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a8a      	ldr	r2, [pc, #552]	; (8009614 <HAL_UART_IRQHandler+0x2c4>)
 80093ea:	4013      	ands	r3, r2
 80093ec:	d100      	bne.n	80093f0 <HAL_UART_IRQHandler+0xa0>
 80093ee:	e115      	b.n	800961c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093f0:	23a4      	movs	r3, #164	; 0xa4
 80093f2:	18fb      	adds	r3, r7, r3
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2201      	movs	r2, #1
 80093f8:	4013      	ands	r3, r2
 80093fa:	d012      	beq.n	8009422 <HAL_UART_IRQHandler+0xd2>
 80093fc:	23a0      	movs	r3, #160	; 0xa0
 80093fe:	18fb      	adds	r3, r7, r3
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	2380      	movs	r3, #128	; 0x80
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	4013      	ands	r3, r2
 8009408:	d00b      	beq.n	8009422 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2201      	movs	r2, #1
 8009410:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2290      	movs	r2, #144	; 0x90
 8009416:	589b      	ldr	r3, [r3, r2]
 8009418:	2201      	movs	r2, #1
 800941a:	431a      	orrs	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2190      	movs	r1, #144	; 0x90
 8009420:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009422:	23a4      	movs	r3, #164	; 0xa4
 8009424:	18fb      	adds	r3, r7, r3
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2202      	movs	r2, #2
 800942a:	4013      	ands	r3, r2
 800942c:	d011      	beq.n	8009452 <HAL_UART_IRQHandler+0x102>
 800942e:	239c      	movs	r3, #156	; 0x9c
 8009430:	18fb      	adds	r3, r7, r3
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2201      	movs	r2, #1
 8009436:	4013      	ands	r3, r2
 8009438:	d00b      	beq.n	8009452 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2202      	movs	r2, #2
 8009440:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2290      	movs	r2, #144	; 0x90
 8009446:	589b      	ldr	r3, [r3, r2]
 8009448:	2204      	movs	r2, #4
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2190      	movs	r1, #144	; 0x90
 8009450:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009452:	23a4      	movs	r3, #164	; 0xa4
 8009454:	18fb      	adds	r3, r7, r3
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2204      	movs	r2, #4
 800945a:	4013      	ands	r3, r2
 800945c:	d011      	beq.n	8009482 <HAL_UART_IRQHandler+0x132>
 800945e:	239c      	movs	r3, #156	; 0x9c
 8009460:	18fb      	adds	r3, r7, r3
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2201      	movs	r2, #1
 8009466:	4013      	ands	r3, r2
 8009468:	d00b      	beq.n	8009482 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2204      	movs	r2, #4
 8009470:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2290      	movs	r2, #144	; 0x90
 8009476:	589b      	ldr	r3, [r3, r2]
 8009478:	2202      	movs	r2, #2
 800947a:	431a      	orrs	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2190      	movs	r1, #144	; 0x90
 8009480:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009482:	23a4      	movs	r3, #164	; 0xa4
 8009484:	18fb      	adds	r3, r7, r3
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2208      	movs	r2, #8
 800948a:	4013      	ands	r3, r2
 800948c:	d017      	beq.n	80094be <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800948e:	23a0      	movs	r3, #160	; 0xa0
 8009490:	18fb      	adds	r3, r7, r3
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2220      	movs	r2, #32
 8009496:	4013      	ands	r3, r2
 8009498:	d105      	bne.n	80094a6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800949a:	239c      	movs	r3, #156	; 0x9c
 800949c:	18fb      	adds	r3, r7, r3
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a5b      	ldr	r2, [pc, #364]	; (8009610 <HAL_UART_IRQHandler+0x2c0>)
 80094a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80094a4:	d00b      	beq.n	80094be <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2208      	movs	r2, #8
 80094ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2290      	movs	r2, #144	; 0x90
 80094b2:	589b      	ldr	r3, [r3, r2]
 80094b4:	2208      	movs	r2, #8
 80094b6:	431a      	orrs	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2190      	movs	r1, #144	; 0x90
 80094bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094be:	23a4      	movs	r3, #164	; 0xa4
 80094c0:	18fb      	adds	r3, r7, r3
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	2380      	movs	r3, #128	; 0x80
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	4013      	ands	r3, r2
 80094ca:	d013      	beq.n	80094f4 <HAL_UART_IRQHandler+0x1a4>
 80094cc:	23a0      	movs	r3, #160	; 0xa0
 80094ce:	18fb      	adds	r3, r7, r3
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	2380      	movs	r3, #128	; 0x80
 80094d4:	04db      	lsls	r3, r3, #19
 80094d6:	4013      	ands	r3, r2
 80094d8:	d00c      	beq.n	80094f4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2280      	movs	r2, #128	; 0x80
 80094e0:	0112      	lsls	r2, r2, #4
 80094e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2290      	movs	r2, #144	; 0x90
 80094e8:	589b      	ldr	r3, [r3, r2]
 80094ea:	2220      	movs	r2, #32
 80094ec:	431a      	orrs	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2190      	movs	r1, #144	; 0x90
 80094f2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2290      	movs	r2, #144	; 0x90
 80094f8:	589b      	ldr	r3, [r3, r2]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d100      	bne.n	8009500 <HAL_UART_IRQHandler+0x1b0>
 80094fe:	e23d      	b.n	800997c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009500:	23a4      	movs	r3, #164	; 0xa4
 8009502:	18fb      	adds	r3, r7, r3
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2220      	movs	r2, #32
 8009508:	4013      	ands	r3, r2
 800950a:	d015      	beq.n	8009538 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800950c:	23a0      	movs	r3, #160	; 0xa0
 800950e:	18fb      	adds	r3, r7, r3
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2220      	movs	r2, #32
 8009514:	4013      	ands	r3, r2
 8009516:	d106      	bne.n	8009526 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009518:	239c      	movs	r3, #156	; 0x9c
 800951a:	18fb      	adds	r3, r7, r3
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	2380      	movs	r3, #128	; 0x80
 8009520:	055b      	lsls	r3, r3, #21
 8009522:	4013      	ands	r3, r2
 8009524:	d008      	beq.n	8009538 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800952a:	2b00      	cmp	r3, #0
 800952c:	d004      	beq.n	8009538 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	0010      	movs	r0, r2
 8009536:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2290      	movs	r2, #144	; 0x90
 800953c:	589b      	ldr	r3, [r3, r2]
 800953e:	2194      	movs	r1, #148	; 0x94
 8009540:	187a      	adds	r2, r7, r1
 8009542:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	2240      	movs	r2, #64	; 0x40
 800954c:	4013      	ands	r3, r2
 800954e:	2b40      	cmp	r3, #64	; 0x40
 8009550:	d004      	beq.n	800955c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009552:	187b      	adds	r3, r7, r1
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2228      	movs	r2, #40	; 0x28
 8009558:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800955a:	d04c      	beq.n	80095f6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	0018      	movs	r0, r3
 8009560:	f000 ff64 	bl	800a42c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	2240      	movs	r2, #64	; 0x40
 800956c:	4013      	ands	r3, r2
 800956e:	2b40      	cmp	r3, #64	; 0x40
 8009570:	d13c      	bne.n	80095ec <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009572:	f3ef 8310 	mrs	r3, PRIMASK
 8009576:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8009578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800957a:	2090      	movs	r0, #144	; 0x90
 800957c:	183a      	adds	r2, r7, r0
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	2301      	movs	r3, #1
 8009582:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009586:	f383 8810 	msr	PRIMASK, r3
}
 800958a:	46c0      	nop			; (mov r8, r8)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2140      	movs	r1, #64	; 0x40
 8009598:	438a      	bics	r2, r1
 800959a:	609a      	str	r2, [r3, #8]
 800959c:	183b      	adds	r3, r7, r0
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095a4:	f383 8810 	msr	PRIMASK, r3
}
 80095a8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2280      	movs	r2, #128	; 0x80
 80095ae:	589b      	ldr	r3, [r3, r2]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d016      	beq.n	80095e2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2280      	movs	r2, #128	; 0x80
 80095b8:	589b      	ldr	r3, [r3, r2]
 80095ba:	4a17      	ldr	r2, [pc, #92]	; (8009618 <HAL_UART_IRQHandler+0x2c8>)
 80095bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2280      	movs	r2, #128	; 0x80
 80095c2:	589b      	ldr	r3, [r3, r2]
 80095c4:	0018      	movs	r0, r3
 80095c6:	f7fd fe2f 	bl	8007228 <HAL_DMA_Abort_IT>
 80095ca:	1e03      	subs	r3, r0, #0
 80095cc:	d01c      	beq.n	8009608 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2280      	movs	r2, #128	; 0x80
 80095d2:	589b      	ldr	r3, [r3, r2]
 80095d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	2180      	movs	r1, #128	; 0x80
 80095da:	5852      	ldr	r2, [r2, r1]
 80095dc:	0010      	movs	r0, r2
 80095de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e0:	e012      	b.n	8009608 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	0018      	movs	r0, r3
 80095e6:	f000 f9f1 	bl	80099cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ea:	e00d      	b.n	8009608 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	0018      	movs	r0, r3
 80095f0:	f000 f9ec 	bl	80099cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095f4:	e008      	b.n	8009608 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	0018      	movs	r0, r3
 80095fa:	f000 f9e7 	bl	80099cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2290      	movs	r2, #144	; 0x90
 8009602:	2100      	movs	r1, #0
 8009604:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009606:	e1b9      	b.n	800997c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009608:	46c0      	nop			; (mov r8, r8)
    return;
 800960a:	e1b7      	b.n	800997c <HAL_UART_IRQHandler+0x62c>
 800960c:	0000080f 	.word	0x0000080f
 8009610:	10000001 	.word	0x10000001
 8009614:	04000120 	.word	0x04000120
 8009618:	0800a6f1 	.word	0x0800a6f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009620:	2b01      	cmp	r3, #1
 8009622:	d000      	beq.n	8009626 <HAL_UART_IRQHandler+0x2d6>
 8009624:	e13e      	b.n	80098a4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009626:	23a4      	movs	r3, #164	; 0xa4
 8009628:	18fb      	adds	r3, r7, r3
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2210      	movs	r2, #16
 800962e:	4013      	ands	r3, r2
 8009630:	d100      	bne.n	8009634 <HAL_UART_IRQHandler+0x2e4>
 8009632:	e137      	b.n	80098a4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009634:	23a0      	movs	r3, #160	; 0xa0
 8009636:	18fb      	adds	r3, r7, r3
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2210      	movs	r2, #16
 800963c:	4013      	ands	r3, r2
 800963e:	d100      	bne.n	8009642 <HAL_UART_IRQHandler+0x2f2>
 8009640:	e130      	b.n	80098a4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2210      	movs	r2, #16
 8009648:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	2240      	movs	r2, #64	; 0x40
 8009652:	4013      	ands	r3, r2
 8009654:	2b40      	cmp	r3, #64	; 0x40
 8009656:	d000      	beq.n	800965a <HAL_UART_IRQHandler+0x30a>
 8009658:	e0a4      	b.n	80097a4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2280      	movs	r2, #128	; 0x80
 800965e:	589b      	ldr	r3, [r3, r2]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	217e      	movs	r1, #126	; 0x7e
 8009666:	187b      	adds	r3, r7, r1
 8009668:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800966a:	187b      	adds	r3, r7, r1
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d100      	bne.n	8009674 <HAL_UART_IRQHandler+0x324>
 8009672:	e185      	b.n	8009980 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	225c      	movs	r2, #92	; 0x5c
 8009678:	5a9b      	ldrh	r3, [r3, r2]
 800967a:	187a      	adds	r2, r7, r1
 800967c:	8812      	ldrh	r2, [r2, #0]
 800967e:	429a      	cmp	r2, r3
 8009680:	d300      	bcc.n	8009684 <HAL_UART_IRQHandler+0x334>
 8009682:	e17d      	b.n	8009980 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	187a      	adds	r2, r7, r1
 8009688:	215e      	movs	r1, #94	; 0x5e
 800968a:	8812      	ldrh	r2, [r2, #0]
 800968c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2280      	movs	r2, #128	; 0x80
 8009692:	589b      	ldr	r3, [r3, r2]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2220      	movs	r2, #32
 800969a:	4013      	ands	r3, r2
 800969c:	d170      	bne.n	8009780 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800969e:	f3ef 8310 	mrs	r3, PRIMASK
 80096a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80096a8:	2301      	movs	r3, #1
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ae:	f383 8810 	msr	PRIMASK, r3
}
 80096b2:	46c0      	nop			; (mov r8, r8)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	49b4      	ldr	r1, [pc, #720]	; (8009990 <HAL_UART_IRQHandler+0x640>)
 80096c0:	400a      	ands	r2, r1
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ca:	f383 8810 	msr	PRIMASK, r3
}
 80096ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096d0:	f3ef 8310 	mrs	r3, PRIMASK
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80096d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d8:	677b      	str	r3, [r7, #116]	; 0x74
 80096da:	2301      	movs	r3, #1
 80096dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096e0:	f383 8810 	msr	PRIMASK, r3
}
 80096e4:	46c0      	nop			; (mov r8, r8)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2101      	movs	r1, #1
 80096f2:	438a      	bics	r2, r1
 80096f4:	609a      	str	r2, [r3, #8]
 80096f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096fc:	f383 8810 	msr	PRIMASK, r3
}
 8009700:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009702:	f3ef 8310 	mrs	r3, PRIMASK
 8009706:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8009708:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800970a:	673b      	str	r3, [r7, #112]	; 0x70
 800970c:	2301      	movs	r3, #1
 800970e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009712:	f383 8810 	msr	PRIMASK, r3
}
 8009716:	46c0      	nop			; (mov r8, r8)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2140      	movs	r1, #64	; 0x40
 8009724:	438a      	bics	r2, r1
 8009726:	609a      	str	r2, [r3, #8]
 8009728:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800972a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800972c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800972e:	f383 8810 	msr	PRIMASK, r3
}
 8009732:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	228c      	movs	r2, #140	; 0x8c
 8009738:	2120      	movs	r1, #32
 800973a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009742:	f3ef 8310 	mrs	r3, PRIMASK
 8009746:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8009748:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800974a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800974c:	2301      	movs	r3, #1
 800974e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009752:	f383 8810 	msr	PRIMASK, r3
}
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2110      	movs	r1, #16
 8009764:	438a      	bics	r2, r1
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800976a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800976c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800976e:	f383 8810 	msr	PRIMASK, r3
}
 8009772:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2280      	movs	r2, #128	; 0x80
 8009778:	589b      	ldr	r3, [r3, r2]
 800977a:	0018      	movs	r0, r3
 800977c:	f7fd fcf2 	bl	8007164 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2202      	movs	r2, #2
 8009784:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	225c      	movs	r2, #92	; 0x5c
 800978a:	5a9a      	ldrh	r2, [r3, r2]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	215e      	movs	r1, #94	; 0x5e
 8009790:	5a5b      	ldrh	r3, [r3, r1]
 8009792:	b29b      	uxth	r3, r3
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	b29a      	uxth	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	0011      	movs	r1, r2
 800979c:	0018      	movs	r0, r3
 800979e:	f7fc f955 	bl	8005a4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097a2:	e0ed      	b.n	8009980 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	225c      	movs	r2, #92	; 0x5c
 80097a8:	5a99      	ldrh	r1, [r3, r2]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	225e      	movs	r2, #94	; 0x5e
 80097ae:	5a9b      	ldrh	r3, [r3, r2]
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	208e      	movs	r0, #142	; 0x8e
 80097b4:	183b      	adds	r3, r7, r0
 80097b6:	1a8a      	subs	r2, r1, r2
 80097b8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	225e      	movs	r2, #94	; 0x5e
 80097be:	5a9b      	ldrh	r3, [r3, r2]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d100      	bne.n	80097c8 <HAL_UART_IRQHandler+0x478>
 80097c6:	e0dd      	b.n	8009984 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80097c8:	183b      	adds	r3, r7, r0
 80097ca:	881b      	ldrh	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d100      	bne.n	80097d2 <HAL_UART_IRQHandler+0x482>
 80097d0:	e0d8      	b.n	8009984 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097d2:	f3ef 8310 	mrs	r3, PRIMASK
 80097d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80097d8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097da:	2488      	movs	r4, #136	; 0x88
 80097dc:	193a      	adds	r2, r7, r4
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	2301      	movs	r3, #1
 80097e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f383 8810 	msr	PRIMASK, r3
}
 80097ea:	46c0      	nop			; (mov r8, r8)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4967      	ldr	r1, [pc, #412]	; (8009994 <HAL_UART_IRQHandler+0x644>)
 80097f8:	400a      	ands	r2, r1
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	193b      	adds	r3, r7, r4
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f383 8810 	msr	PRIMASK, r3
}
 8009808:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800980a:	f3ef 8310 	mrs	r3, PRIMASK
 800980e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009810:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009812:	2484      	movs	r4, #132	; 0x84
 8009814:	193a      	adds	r2, r7, r4
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	2301      	movs	r3, #1
 800981a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	f383 8810 	msr	PRIMASK, r3
}
 8009822:	46c0      	nop			; (mov r8, r8)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689a      	ldr	r2, [r3, #8]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	495a      	ldr	r1, [pc, #360]	; (8009998 <HAL_UART_IRQHandler+0x648>)
 8009830:	400a      	ands	r2, r1
 8009832:	609a      	str	r2, [r3, #8]
 8009834:	193b      	adds	r3, r7, r4
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800983a:	6a3b      	ldr	r3, [r7, #32]
 800983c:	f383 8810 	msr	PRIMASK, r3
}
 8009840:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	228c      	movs	r2, #140	; 0x8c
 8009846:	2120      	movs	r1, #32
 8009848:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009856:	f3ef 8310 	mrs	r3, PRIMASK
 800985a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800985e:	2480      	movs	r4, #128	; 0x80
 8009860:	193a      	adds	r2, r7, r4
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	2301      	movs	r3, #1
 8009866:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	f383 8810 	msr	PRIMASK, r3
}
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2110      	movs	r1, #16
 800987c:	438a      	bics	r2, r1
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	193b      	adds	r3, r7, r4
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009888:	f383 8810 	msr	PRIMASK, r3
}
 800988c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2202      	movs	r2, #2
 8009892:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009894:	183b      	adds	r3, r7, r0
 8009896:	881a      	ldrh	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	0011      	movs	r1, r2
 800989c:	0018      	movs	r0, r3
 800989e:	f7fc f8d5 	bl	8005a4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098a2:	e06f      	b.n	8009984 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098a4:	23a4      	movs	r3, #164	; 0xa4
 80098a6:	18fb      	adds	r3, r7, r3
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	2380      	movs	r3, #128	; 0x80
 80098ac:	035b      	lsls	r3, r3, #13
 80098ae:	4013      	ands	r3, r2
 80098b0:	d010      	beq.n	80098d4 <HAL_UART_IRQHandler+0x584>
 80098b2:	239c      	movs	r3, #156	; 0x9c
 80098b4:	18fb      	adds	r3, r7, r3
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	2380      	movs	r3, #128	; 0x80
 80098ba:	03db      	lsls	r3, r3, #15
 80098bc:	4013      	ands	r3, r2
 80098be:	d009      	beq.n	80098d4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2280      	movs	r2, #128	; 0x80
 80098c6:	0352      	lsls	r2, r2, #13
 80098c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	0018      	movs	r0, r3
 80098ce:	f000 ff52 	bl	800a776 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098d2:	e05a      	b.n	800998a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098d4:	23a4      	movs	r3, #164	; 0xa4
 80098d6:	18fb      	adds	r3, r7, r3
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2280      	movs	r2, #128	; 0x80
 80098dc:	4013      	ands	r3, r2
 80098de:	d016      	beq.n	800990e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098e0:	23a0      	movs	r3, #160	; 0xa0
 80098e2:	18fb      	adds	r3, r7, r3
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2280      	movs	r2, #128	; 0x80
 80098e8:	4013      	ands	r3, r2
 80098ea:	d106      	bne.n	80098fa <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098ec:	239c      	movs	r3, #156	; 0x9c
 80098ee:	18fb      	adds	r3, r7, r3
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	2380      	movs	r3, #128	; 0x80
 80098f4:	041b      	lsls	r3, r3, #16
 80098f6:	4013      	ands	r3, r2
 80098f8:	d009      	beq.n	800990e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d042      	beq.n	8009988 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	0010      	movs	r0, r2
 800990a:	4798      	blx	r3
    }
    return;
 800990c:	e03c      	b.n	8009988 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800990e:	23a4      	movs	r3, #164	; 0xa4
 8009910:	18fb      	adds	r3, r7, r3
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2240      	movs	r2, #64	; 0x40
 8009916:	4013      	ands	r3, r2
 8009918:	d00a      	beq.n	8009930 <HAL_UART_IRQHandler+0x5e0>
 800991a:	23a0      	movs	r3, #160	; 0xa0
 800991c:	18fb      	adds	r3, r7, r3
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2240      	movs	r2, #64	; 0x40
 8009922:	4013      	ands	r3, r2
 8009924:	d004      	beq.n	8009930 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	0018      	movs	r0, r3
 800992a:	f000 fef8 	bl	800a71e <UART_EndTransmit_IT>
    return;
 800992e:	e02c      	b.n	800998a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009930:	23a4      	movs	r3, #164	; 0xa4
 8009932:	18fb      	adds	r3, r7, r3
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	2380      	movs	r3, #128	; 0x80
 8009938:	041b      	lsls	r3, r3, #16
 800993a:	4013      	ands	r3, r2
 800993c:	d00b      	beq.n	8009956 <HAL_UART_IRQHandler+0x606>
 800993e:	23a0      	movs	r3, #160	; 0xa0
 8009940:	18fb      	adds	r3, r7, r3
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	2380      	movs	r3, #128	; 0x80
 8009946:	05db      	lsls	r3, r3, #23
 8009948:	4013      	ands	r3, r2
 800994a:	d004      	beq.n	8009956 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	0018      	movs	r0, r3
 8009950:	f000 ff21 	bl	800a796 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009954:	e019      	b.n	800998a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009956:	23a4      	movs	r3, #164	; 0xa4
 8009958:	18fb      	adds	r3, r7, r3
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	2380      	movs	r3, #128	; 0x80
 800995e:	045b      	lsls	r3, r3, #17
 8009960:	4013      	ands	r3, r2
 8009962:	d012      	beq.n	800998a <HAL_UART_IRQHandler+0x63a>
 8009964:	23a0      	movs	r3, #160	; 0xa0
 8009966:	18fb      	adds	r3, r7, r3
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	da0d      	bge.n	800998a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	0018      	movs	r0, r3
 8009972:	f000 ff08 	bl	800a786 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009976:	e008      	b.n	800998a <HAL_UART_IRQHandler+0x63a>
      return;
 8009978:	46c0      	nop			; (mov r8, r8)
 800997a:	e006      	b.n	800998a <HAL_UART_IRQHandler+0x63a>
    return;
 800997c:	46c0      	nop			; (mov r8, r8)
 800997e:	e004      	b.n	800998a <HAL_UART_IRQHandler+0x63a>
      return;
 8009980:	46c0      	nop			; (mov r8, r8)
 8009982:	e002      	b.n	800998a <HAL_UART_IRQHandler+0x63a>
      return;
 8009984:	46c0      	nop			; (mov r8, r8)
 8009986:	e000      	b.n	800998a <HAL_UART_IRQHandler+0x63a>
    return;
 8009988:	46c0      	nop			; (mov r8, r8)
  }
}
 800998a:	46bd      	mov	sp, r7
 800998c:	b02a      	add	sp, #168	; 0xa8
 800998e:	bdb0      	pop	{r4, r5, r7, pc}
 8009990:	fffffeff 	.word	0xfffffeff
 8009994:	fffffedf 	.word	0xfffffedf
 8009998:	effffffe 	.word	0xeffffffe

0800999c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099a4:	46c0      	nop			; (mov r8, r8)
 80099a6:	46bd      	mov	sp, r7
 80099a8:	b002      	add	sp, #8
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80099b4:	46c0      	nop			; (mov r8, r8)
 80099b6:	46bd      	mov	sp, r7
 80099b8:	b002      	add	sp, #8
 80099ba:	bd80      	pop	{r7, pc}

080099bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80099c4:	46c0      	nop			; (mov r8, r8)
 80099c6:	46bd      	mov	sp, r7
 80099c8:	b002      	add	sp, #8
 80099ca:	bd80      	pop	{r7, pc}

080099cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099d4:	46c0      	nop			; (mov r8, r8)
 80099d6:	46bd      	mov	sp, r7
 80099d8:	b002      	add	sp, #8
 80099da:	bd80      	pop	{r7, pc}

080099dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099dc:	b5b0      	push	{r4, r5, r7, lr}
 80099de:	b090      	sub	sp, #64	; 0x40
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099e4:	231a      	movs	r3, #26
 80099e6:	2220      	movs	r2, #32
 80099e8:	189b      	adds	r3, r3, r2
 80099ea:	19db      	adds	r3, r3, r7
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	431a      	orrs	r2, r3
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	431a      	orrs	r2, r3
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4ac4      	ldr	r2, [pc, #784]	; (8009d20 <UART_SetConfig+0x344>)
 8009a10:	4013      	ands	r3, r2
 8009a12:	0019      	movs	r1, r3
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1a:	430b      	orrs	r3, r1
 8009a1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	4abf      	ldr	r2, [pc, #764]	; (8009d24 <UART_SetConfig+0x348>)
 8009a26:	4013      	ands	r3, r2
 8009a28:	0018      	movs	r0, r3
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	68d9      	ldr	r1, [r3, #12]
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	0003      	movs	r3, r0
 8009a34:	430b      	orrs	r3, r1
 8009a36:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4ab9      	ldr	r2, [pc, #740]	; (8009d28 <UART_SetConfig+0x34c>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d004      	beq.n	8009a52 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	6a1b      	ldr	r3, [r3, #32]
 8009a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	4ab4      	ldr	r2, [pc, #720]	; (8009d2c <UART_SetConfig+0x350>)
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	0019      	movs	r1, r3
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a64:	430b      	orrs	r3, r1
 8009a66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6e:	220f      	movs	r2, #15
 8009a70:	4393      	bics	r3, r2
 8009a72:	0018      	movs	r0, r3
 8009a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a76:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	0003      	movs	r3, r0
 8009a7e:	430b      	orrs	r3, r1
 8009a80:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4aaa      	ldr	r2, [pc, #680]	; (8009d30 <UART_SetConfig+0x354>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d131      	bne.n	8009af0 <UART_SetConfig+0x114>
 8009a8c:	4ba9      	ldr	r3, [pc, #676]	; (8009d34 <UART_SetConfig+0x358>)
 8009a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a90:	2203      	movs	r2, #3
 8009a92:	4013      	ands	r3, r2
 8009a94:	2b03      	cmp	r3, #3
 8009a96:	d01d      	beq.n	8009ad4 <UART_SetConfig+0xf8>
 8009a98:	d823      	bhi.n	8009ae2 <UART_SetConfig+0x106>
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d00c      	beq.n	8009ab8 <UART_SetConfig+0xdc>
 8009a9e:	d820      	bhi.n	8009ae2 <UART_SetConfig+0x106>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <UART_SetConfig+0xce>
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d00e      	beq.n	8009ac6 <UART_SetConfig+0xea>
 8009aa8:	e01b      	b.n	8009ae2 <UART_SetConfig+0x106>
 8009aaa:	231b      	movs	r3, #27
 8009aac:	2220      	movs	r2, #32
 8009aae:	189b      	adds	r3, r3, r2
 8009ab0:	19db      	adds	r3, r3, r7
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	e071      	b.n	8009b9c <UART_SetConfig+0x1c0>
 8009ab8:	231b      	movs	r3, #27
 8009aba:	2220      	movs	r2, #32
 8009abc:	189b      	adds	r3, r3, r2
 8009abe:	19db      	adds	r3, r3, r7
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	701a      	strb	r2, [r3, #0]
 8009ac4:	e06a      	b.n	8009b9c <UART_SetConfig+0x1c0>
 8009ac6:	231b      	movs	r3, #27
 8009ac8:	2220      	movs	r2, #32
 8009aca:	189b      	adds	r3, r3, r2
 8009acc:	19db      	adds	r3, r3, r7
 8009ace:	2204      	movs	r2, #4
 8009ad0:	701a      	strb	r2, [r3, #0]
 8009ad2:	e063      	b.n	8009b9c <UART_SetConfig+0x1c0>
 8009ad4:	231b      	movs	r3, #27
 8009ad6:	2220      	movs	r2, #32
 8009ad8:	189b      	adds	r3, r3, r2
 8009ada:	19db      	adds	r3, r3, r7
 8009adc:	2208      	movs	r2, #8
 8009ade:	701a      	strb	r2, [r3, #0]
 8009ae0:	e05c      	b.n	8009b9c <UART_SetConfig+0x1c0>
 8009ae2:	231b      	movs	r3, #27
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	189b      	adds	r3, r3, r2
 8009ae8:	19db      	adds	r3, r3, r7
 8009aea:	2210      	movs	r2, #16
 8009aec:	701a      	strb	r2, [r3, #0]
 8009aee:	e055      	b.n	8009b9c <UART_SetConfig+0x1c0>
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a90      	ldr	r2, [pc, #576]	; (8009d38 <UART_SetConfig+0x35c>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d106      	bne.n	8009b08 <UART_SetConfig+0x12c>
 8009afa:	231b      	movs	r3, #27
 8009afc:	2220      	movs	r2, #32
 8009afe:	189b      	adds	r3, r3, r2
 8009b00:	19db      	adds	r3, r3, r7
 8009b02:	2200      	movs	r2, #0
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	e049      	b.n	8009b9c <UART_SetConfig+0x1c0>
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a86      	ldr	r2, [pc, #536]	; (8009d28 <UART_SetConfig+0x34c>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d13e      	bne.n	8009b90 <UART_SetConfig+0x1b4>
 8009b12:	4b88      	ldr	r3, [pc, #544]	; (8009d34 <UART_SetConfig+0x358>)
 8009b14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b16:	23c0      	movs	r3, #192	; 0xc0
 8009b18:	011b      	lsls	r3, r3, #4
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	22c0      	movs	r2, #192	; 0xc0
 8009b1e:	0112      	lsls	r2, r2, #4
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d027      	beq.n	8009b74 <UART_SetConfig+0x198>
 8009b24:	22c0      	movs	r2, #192	; 0xc0
 8009b26:	0112      	lsls	r2, r2, #4
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d82a      	bhi.n	8009b82 <UART_SetConfig+0x1a6>
 8009b2c:	2280      	movs	r2, #128	; 0x80
 8009b2e:	0112      	lsls	r2, r2, #4
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d011      	beq.n	8009b58 <UART_SetConfig+0x17c>
 8009b34:	2280      	movs	r2, #128	; 0x80
 8009b36:	0112      	lsls	r2, r2, #4
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d822      	bhi.n	8009b82 <UART_SetConfig+0x1a6>
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d004      	beq.n	8009b4a <UART_SetConfig+0x16e>
 8009b40:	2280      	movs	r2, #128	; 0x80
 8009b42:	00d2      	lsls	r2, r2, #3
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00e      	beq.n	8009b66 <UART_SetConfig+0x18a>
 8009b48:	e01b      	b.n	8009b82 <UART_SetConfig+0x1a6>
 8009b4a:	231b      	movs	r3, #27
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	189b      	adds	r3, r3, r2
 8009b50:	19db      	adds	r3, r3, r7
 8009b52:	2200      	movs	r2, #0
 8009b54:	701a      	strb	r2, [r3, #0]
 8009b56:	e021      	b.n	8009b9c <UART_SetConfig+0x1c0>
 8009b58:	231b      	movs	r3, #27
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	189b      	adds	r3, r3, r2
 8009b5e:	19db      	adds	r3, r3, r7
 8009b60:	2202      	movs	r2, #2
 8009b62:	701a      	strb	r2, [r3, #0]
 8009b64:	e01a      	b.n	8009b9c <UART_SetConfig+0x1c0>
 8009b66:	231b      	movs	r3, #27
 8009b68:	2220      	movs	r2, #32
 8009b6a:	189b      	adds	r3, r3, r2
 8009b6c:	19db      	adds	r3, r3, r7
 8009b6e:	2204      	movs	r2, #4
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	e013      	b.n	8009b9c <UART_SetConfig+0x1c0>
 8009b74:	231b      	movs	r3, #27
 8009b76:	2220      	movs	r2, #32
 8009b78:	189b      	adds	r3, r3, r2
 8009b7a:	19db      	adds	r3, r3, r7
 8009b7c:	2208      	movs	r2, #8
 8009b7e:	701a      	strb	r2, [r3, #0]
 8009b80:	e00c      	b.n	8009b9c <UART_SetConfig+0x1c0>
 8009b82:	231b      	movs	r3, #27
 8009b84:	2220      	movs	r2, #32
 8009b86:	189b      	adds	r3, r3, r2
 8009b88:	19db      	adds	r3, r3, r7
 8009b8a:	2210      	movs	r2, #16
 8009b8c:	701a      	strb	r2, [r3, #0]
 8009b8e:	e005      	b.n	8009b9c <UART_SetConfig+0x1c0>
 8009b90:	231b      	movs	r3, #27
 8009b92:	2220      	movs	r2, #32
 8009b94:	189b      	adds	r3, r3, r2
 8009b96:	19db      	adds	r3, r3, r7
 8009b98:	2210      	movs	r2, #16
 8009b9a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a61      	ldr	r2, [pc, #388]	; (8009d28 <UART_SetConfig+0x34c>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d000      	beq.n	8009ba8 <UART_SetConfig+0x1cc>
 8009ba6:	e092      	b.n	8009cce <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ba8:	231b      	movs	r3, #27
 8009baa:	2220      	movs	r2, #32
 8009bac:	189b      	adds	r3, r3, r2
 8009bae:	19db      	adds	r3, r3, r7
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2b08      	cmp	r3, #8
 8009bb4:	d015      	beq.n	8009be2 <UART_SetConfig+0x206>
 8009bb6:	dc18      	bgt.n	8009bea <UART_SetConfig+0x20e>
 8009bb8:	2b04      	cmp	r3, #4
 8009bba:	d00d      	beq.n	8009bd8 <UART_SetConfig+0x1fc>
 8009bbc:	dc15      	bgt.n	8009bea <UART_SetConfig+0x20e>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d002      	beq.n	8009bc8 <UART_SetConfig+0x1ec>
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d005      	beq.n	8009bd2 <UART_SetConfig+0x1f6>
 8009bc6:	e010      	b.n	8009bea <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bc8:	f7fe fb56 	bl	8008278 <HAL_RCC_GetPCLK1Freq>
 8009bcc:	0003      	movs	r3, r0
 8009bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bd0:	e014      	b.n	8009bfc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bd2:	4b5a      	ldr	r3, [pc, #360]	; (8009d3c <UART_SetConfig+0x360>)
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bd6:	e011      	b.n	8009bfc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bd8:	f7fe fac2 	bl	8008160 <HAL_RCC_GetSysClockFreq>
 8009bdc:	0003      	movs	r3, r0
 8009bde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009be0:	e00c      	b.n	8009bfc <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009be2:	2380      	movs	r3, #128	; 0x80
 8009be4:	021b      	lsls	r3, r3, #8
 8009be6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009be8:	e008      	b.n	8009bfc <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8009bee:	231a      	movs	r3, #26
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	189b      	adds	r3, r3, r2
 8009bf4:	19db      	adds	r3, r3, r7
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	701a      	strb	r2, [r3, #0]
        break;
 8009bfa:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d100      	bne.n	8009c04 <UART_SetConfig+0x228>
 8009c02:	e147      	b.n	8009e94 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c08:	4b4d      	ldr	r3, [pc, #308]	; (8009d40 <UART_SetConfig+0x364>)
 8009c0a:	0052      	lsls	r2, r2, #1
 8009c0c:	5ad3      	ldrh	r3, [r2, r3]
 8009c0e:	0019      	movs	r1, r3
 8009c10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c12:	f7f6 fa9d 	bl	8000150 <__udivsi3>
 8009c16:	0003      	movs	r3, r0
 8009c18:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	0013      	movs	r3, r2
 8009c20:	005b      	lsls	r3, r3, #1
 8009c22:	189b      	adds	r3, r3, r2
 8009c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d305      	bcc.n	8009c36 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d906      	bls.n	8009c44 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8009c36:	231a      	movs	r3, #26
 8009c38:	2220      	movs	r2, #32
 8009c3a:	189b      	adds	r3, r3, r2
 8009c3c:	19db      	adds	r3, r3, r7
 8009c3e:	2201      	movs	r2, #1
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	e127      	b.n	8009e94 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c46:	61bb      	str	r3, [r7, #24]
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61fb      	str	r3, [r7, #28]
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c50:	4b3b      	ldr	r3, [pc, #236]	; (8009d40 <UART_SetConfig+0x364>)
 8009c52:	0052      	lsls	r2, r2, #1
 8009c54:	5ad3      	ldrh	r3, [r2, r3]
 8009c56:	613b      	str	r3, [r7, #16]
 8009c58:	2300      	movs	r3, #0
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	69b8      	ldr	r0, [r7, #24]
 8009c62:	69f9      	ldr	r1, [r7, #28]
 8009c64:	f7f6 fc62 	bl	800052c <__aeabi_uldivmod>
 8009c68:	0002      	movs	r2, r0
 8009c6a:	000b      	movs	r3, r1
 8009c6c:	0e11      	lsrs	r1, r2, #24
 8009c6e:	021d      	lsls	r5, r3, #8
 8009c70:	430d      	orrs	r5, r1
 8009c72:	0214      	lsls	r4, r2, #8
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	085b      	lsrs	r3, r3, #1
 8009c7a:	60bb      	str	r3, [r7, #8]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	68b8      	ldr	r0, [r7, #8]
 8009c82:	68f9      	ldr	r1, [r7, #12]
 8009c84:	1900      	adds	r0, r0, r4
 8009c86:	4169      	adcs	r1, r5
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	603b      	str	r3, [r7, #0]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	607b      	str	r3, [r7, #4]
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f7f6 fc49 	bl	800052c <__aeabi_uldivmod>
 8009c9a:	0002      	movs	r2, r0
 8009c9c:	000b      	movs	r3, r1
 8009c9e:	0013      	movs	r3, r2
 8009ca0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ca4:	23c0      	movs	r3, #192	; 0xc0
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d309      	bcc.n	8009cc0 <UART_SetConfig+0x2e4>
 8009cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cae:	2380      	movs	r3, #128	; 0x80
 8009cb0:	035b      	lsls	r3, r3, #13
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d204      	bcs.n	8009cc0 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cbc:	60da      	str	r2, [r3, #12]
 8009cbe:	e0e9      	b.n	8009e94 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8009cc0:	231a      	movs	r3, #26
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	189b      	adds	r3, r3, r2
 8009cc6:	19db      	adds	r3, r3, r7
 8009cc8:	2201      	movs	r2, #1
 8009cca:	701a      	strb	r2, [r3, #0]
 8009ccc:	e0e2      	b.n	8009e94 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	69da      	ldr	r2, [r3, #28]
 8009cd2:	2380      	movs	r3, #128	; 0x80
 8009cd4:	021b      	lsls	r3, r3, #8
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d000      	beq.n	8009cdc <UART_SetConfig+0x300>
 8009cda:	e083      	b.n	8009de4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8009cdc:	231b      	movs	r3, #27
 8009cde:	2220      	movs	r2, #32
 8009ce0:	189b      	adds	r3, r3, r2
 8009ce2:	19db      	adds	r3, r3, r7
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	2b08      	cmp	r3, #8
 8009ce8:	d015      	beq.n	8009d16 <UART_SetConfig+0x33a>
 8009cea:	dc2b      	bgt.n	8009d44 <UART_SetConfig+0x368>
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	d00d      	beq.n	8009d0c <UART_SetConfig+0x330>
 8009cf0:	dc28      	bgt.n	8009d44 <UART_SetConfig+0x368>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <UART_SetConfig+0x320>
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d005      	beq.n	8009d06 <UART_SetConfig+0x32a>
 8009cfa:	e023      	b.n	8009d44 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cfc:	f7fe fabc 	bl	8008278 <HAL_RCC_GetPCLK1Freq>
 8009d00:	0003      	movs	r3, r0
 8009d02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d04:	e027      	b.n	8009d56 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d06:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <UART_SetConfig+0x360>)
 8009d08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d0a:	e024      	b.n	8009d56 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d0c:	f7fe fa28 	bl	8008160 <HAL_RCC_GetSysClockFreq>
 8009d10:	0003      	movs	r3, r0
 8009d12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d14:	e01f      	b.n	8009d56 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d16:	2380      	movs	r3, #128	; 0x80
 8009d18:	021b      	lsls	r3, r3, #8
 8009d1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d1c:	e01b      	b.n	8009d56 <UART_SetConfig+0x37a>
 8009d1e:	46c0      	nop			; (mov r8, r8)
 8009d20:	cfff69f3 	.word	0xcfff69f3
 8009d24:	ffffcfff 	.word	0xffffcfff
 8009d28:	40008000 	.word	0x40008000
 8009d2c:	11fff4ff 	.word	0x11fff4ff
 8009d30:	40013800 	.word	0x40013800
 8009d34:	40021000 	.word	0x40021000
 8009d38:	40004400 	.word	0x40004400
 8009d3c:	00f42400 	.word	0x00f42400
 8009d40:	0800e4a4 	.word	0x0800e4a4
      default:
        pclk = 0U;
 8009d44:	2300      	movs	r3, #0
 8009d46:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8009d48:	231a      	movs	r3, #26
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	189b      	adds	r3, r3, r2
 8009d4e:	19db      	adds	r3, r3, r7
 8009d50:	2201      	movs	r2, #1
 8009d52:	701a      	strb	r2, [r3, #0]
        break;
 8009d54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d100      	bne.n	8009d5e <UART_SetConfig+0x382>
 8009d5c:	e09a      	b.n	8009e94 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d62:	4b58      	ldr	r3, [pc, #352]	; (8009ec4 <UART_SetConfig+0x4e8>)
 8009d64:	0052      	lsls	r2, r2, #1
 8009d66:	5ad3      	ldrh	r3, [r2, r3]
 8009d68:	0019      	movs	r1, r3
 8009d6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009d6c:	f7f6 f9f0 	bl	8000150 <__udivsi3>
 8009d70:	0003      	movs	r3, r0
 8009d72:	005a      	lsls	r2, r3, #1
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	085b      	lsrs	r3, r3, #1
 8009d7a:	18d2      	adds	r2, r2, r3
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	0019      	movs	r1, r3
 8009d82:	0010      	movs	r0, r2
 8009d84:	f7f6 f9e4 	bl	8000150 <__udivsi3>
 8009d88:	0003      	movs	r3, r0
 8009d8a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8e:	2b0f      	cmp	r3, #15
 8009d90:	d921      	bls.n	8009dd6 <UART_SetConfig+0x3fa>
 8009d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d94:	2380      	movs	r3, #128	; 0x80
 8009d96:	025b      	lsls	r3, r3, #9
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d21c      	bcs.n	8009dd6 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	200e      	movs	r0, #14
 8009da2:	2420      	movs	r4, #32
 8009da4:	1903      	adds	r3, r0, r4
 8009da6:	19db      	adds	r3, r3, r7
 8009da8:	210f      	movs	r1, #15
 8009daa:	438a      	bics	r2, r1
 8009dac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	085b      	lsrs	r3, r3, #1
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	2207      	movs	r2, #7
 8009db6:	4013      	ands	r3, r2
 8009db8:	b299      	uxth	r1, r3
 8009dba:	1903      	adds	r3, r0, r4
 8009dbc:	19db      	adds	r3, r3, r7
 8009dbe:	1902      	adds	r2, r0, r4
 8009dc0:	19d2      	adds	r2, r2, r7
 8009dc2:	8812      	ldrh	r2, [r2, #0]
 8009dc4:	430a      	orrs	r2, r1
 8009dc6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	1902      	adds	r2, r0, r4
 8009dce:	19d2      	adds	r2, r2, r7
 8009dd0:	8812      	ldrh	r2, [r2, #0]
 8009dd2:	60da      	str	r2, [r3, #12]
 8009dd4:	e05e      	b.n	8009e94 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8009dd6:	231a      	movs	r3, #26
 8009dd8:	2220      	movs	r2, #32
 8009dda:	189b      	adds	r3, r3, r2
 8009ddc:	19db      	adds	r3, r3, r7
 8009dde:	2201      	movs	r2, #1
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	e057      	b.n	8009e94 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009de4:	231b      	movs	r3, #27
 8009de6:	2220      	movs	r2, #32
 8009de8:	189b      	adds	r3, r3, r2
 8009dea:	19db      	adds	r3, r3, r7
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2b08      	cmp	r3, #8
 8009df0:	d015      	beq.n	8009e1e <UART_SetConfig+0x442>
 8009df2:	dc18      	bgt.n	8009e26 <UART_SetConfig+0x44a>
 8009df4:	2b04      	cmp	r3, #4
 8009df6:	d00d      	beq.n	8009e14 <UART_SetConfig+0x438>
 8009df8:	dc15      	bgt.n	8009e26 <UART_SetConfig+0x44a>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <UART_SetConfig+0x428>
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d005      	beq.n	8009e0e <UART_SetConfig+0x432>
 8009e02:	e010      	b.n	8009e26 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e04:	f7fe fa38 	bl	8008278 <HAL_RCC_GetPCLK1Freq>
 8009e08:	0003      	movs	r3, r0
 8009e0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e0c:	e014      	b.n	8009e38 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e0e:	4b2e      	ldr	r3, [pc, #184]	; (8009ec8 <UART_SetConfig+0x4ec>)
 8009e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e12:	e011      	b.n	8009e38 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e14:	f7fe f9a4 	bl	8008160 <HAL_RCC_GetSysClockFreq>
 8009e18:	0003      	movs	r3, r0
 8009e1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e1c:	e00c      	b.n	8009e38 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e1e:	2380      	movs	r3, #128	; 0x80
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e24:	e008      	b.n	8009e38 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8009e26:	2300      	movs	r3, #0
 8009e28:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8009e2a:	231a      	movs	r3, #26
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	189b      	adds	r3, r3, r2
 8009e30:	19db      	adds	r3, r3, r7
 8009e32:	2201      	movs	r2, #1
 8009e34:	701a      	strb	r2, [r3, #0]
        break;
 8009e36:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d02a      	beq.n	8009e94 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e42:	4b20      	ldr	r3, [pc, #128]	; (8009ec4 <UART_SetConfig+0x4e8>)
 8009e44:	0052      	lsls	r2, r2, #1
 8009e46:	5ad3      	ldrh	r3, [r2, r3]
 8009e48:	0019      	movs	r1, r3
 8009e4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009e4c:	f7f6 f980 	bl	8000150 <__udivsi3>
 8009e50:	0003      	movs	r3, r0
 8009e52:	001a      	movs	r2, r3
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	085b      	lsrs	r3, r3, #1
 8009e5a:	18d2      	adds	r2, r2, r3
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	0019      	movs	r1, r3
 8009e62:	0010      	movs	r0, r2
 8009e64:	f7f6 f974 	bl	8000150 <__udivsi3>
 8009e68:	0003      	movs	r3, r0
 8009e6a:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6e:	2b0f      	cmp	r3, #15
 8009e70:	d90a      	bls.n	8009e88 <UART_SetConfig+0x4ac>
 8009e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e74:	2380      	movs	r3, #128	; 0x80
 8009e76:	025b      	lsls	r3, r3, #9
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d205      	bcs.n	8009e88 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	60da      	str	r2, [r3, #12]
 8009e86:	e005      	b.n	8009e94 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8009e88:	231a      	movs	r3, #26
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	189b      	adds	r3, r3, r2
 8009e8e:	19db      	adds	r3, r3, r7
 8009e90:	2201      	movs	r2, #1
 8009e92:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	226a      	movs	r2, #106	; 0x6a
 8009e98:	2101      	movs	r1, #1
 8009e9a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	2268      	movs	r2, #104	; 0x68
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	2200      	movs	r2, #0
 8009eae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009eb0:	231a      	movs	r3, #26
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	189b      	adds	r3, r3, r2
 8009eb6:	19db      	adds	r3, r3, r7
 8009eb8:	781b      	ldrb	r3, [r3, #0]
}
 8009eba:	0018      	movs	r0, r3
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	b010      	add	sp, #64	; 0x40
 8009ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	0800e4a4 	.word	0x0800e4a4
 8009ec8:	00f42400 	.word	0x00f42400

08009ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed8:	2201      	movs	r2, #1
 8009eda:	4013      	ands	r3, r2
 8009edc:	d00b      	beq.n	8009ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	4a4a      	ldr	r2, [pc, #296]	; (800a010 <UART_AdvFeatureConfig+0x144>)
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	0019      	movs	r1, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efa:	2202      	movs	r2, #2
 8009efc:	4013      	ands	r3, r2
 8009efe:	d00b      	beq.n	8009f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	4a43      	ldr	r2, [pc, #268]	; (800a014 <UART_AdvFeatureConfig+0x148>)
 8009f08:	4013      	ands	r3, r2
 8009f0a:	0019      	movs	r1, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1c:	2204      	movs	r2, #4
 8009f1e:	4013      	ands	r3, r2
 8009f20:	d00b      	beq.n	8009f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	4a3b      	ldr	r2, [pc, #236]	; (800a018 <UART_AdvFeatureConfig+0x14c>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	0019      	movs	r1, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3e:	2208      	movs	r2, #8
 8009f40:	4013      	ands	r3, r2
 8009f42:	d00b      	beq.n	8009f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	4a34      	ldr	r2, [pc, #208]	; (800a01c <UART_AdvFeatureConfig+0x150>)
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	0019      	movs	r1, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f60:	2210      	movs	r2, #16
 8009f62:	4013      	ands	r3, r2
 8009f64:	d00b      	beq.n	8009f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	4a2c      	ldr	r2, [pc, #176]	; (800a020 <UART_AdvFeatureConfig+0x154>)
 8009f6e:	4013      	ands	r3, r2
 8009f70:	0019      	movs	r1, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f82:	2220      	movs	r2, #32
 8009f84:	4013      	ands	r3, r2
 8009f86:	d00b      	beq.n	8009fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	4a25      	ldr	r2, [pc, #148]	; (800a024 <UART_AdvFeatureConfig+0x158>)
 8009f90:	4013      	ands	r3, r2
 8009f92:	0019      	movs	r1, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa4:	2240      	movs	r2, #64	; 0x40
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	d01d      	beq.n	8009fe6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	4a1d      	ldr	r2, [pc, #116]	; (800a028 <UART_AdvFeatureConfig+0x15c>)
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	0019      	movs	r1, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fc6:	2380      	movs	r3, #128	; 0x80
 8009fc8:	035b      	lsls	r3, r3, #13
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d10b      	bne.n	8009fe6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	4a15      	ldr	r2, [pc, #84]	; (800a02c <UART_AdvFeatureConfig+0x160>)
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	0019      	movs	r1, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fea:	2280      	movs	r2, #128	; 0x80
 8009fec:	4013      	ands	r3, r2
 8009fee:	d00b      	beq.n	800a008 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	4a0e      	ldr	r2, [pc, #56]	; (800a030 <UART_AdvFeatureConfig+0x164>)
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	0019      	movs	r1, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	430a      	orrs	r2, r1
 800a006:	605a      	str	r2, [r3, #4]
  }
}
 800a008:	46c0      	nop			; (mov r8, r8)
 800a00a:	46bd      	mov	sp, r7
 800a00c:	b002      	add	sp, #8
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	fffdffff 	.word	0xfffdffff
 800a014:	fffeffff 	.word	0xfffeffff
 800a018:	fffbffff 	.word	0xfffbffff
 800a01c:	ffff7fff 	.word	0xffff7fff
 800a020:	ffffefff 	.word	0xffffefff
 800a024:	ffffdfff 	.word	0xffffdfff
 800a028:	ffefffff 	.word	0xffefffff
 800a02c:	ff9fffff 	.word	0xff9fffff
 800a030:	fff7ffff 	.word	0xfff7ffff

0800a034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af02      	add	r7, sp, #8
 800a03a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2290      	movs	r2, #144	; 0x90
 800a040:	2100      	movs	r1, #0
 800a042:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a044:	f7fc f9f4 	bl	8006430 <HAL_GetTick>
 800a048:	0003      	movs	r3, r0
 800a04a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2208      	movs	r2, #8
 800a054:	4013      	ands	r3, r2
 800a056:	2b08      	cmp	r3, #8
 800a058:	d10c      	bne.n	800a074 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2280      	movs	r2, #128	; 0x80
 800a05e:	0391      	lsls	r1, r2, #14
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	4a1a      	ldr	r2, [pc, #104]	; (800a0cc <UART_CheckIdleState+0x98>)
 800a064:	9200      	str	r2, [sp, #0]
 800a066:	2200      	movs	r2, #0
 800a068:	f000 f832 	bl	800a0d0 <UART_WaitOnFlagUntilTimeout>
 800a06c:	1e03      	subs	r3, r0, #0
 800a06e:	d001      	beq.n	800a074 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e026      	b.n	800a0c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2204      	movs	r2, #4
 800a07c:	4013      	ands	r3, r2
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d10c      	bne.n	800a09c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2280      	movs	r2, #128	; 0x80
 800a086:	03d1      	lsls	r1, r2, #15
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	4a10      	ldr	r2, [pc, #64]	; (800a0cc <UART_CheckIdleState+0x98>)
 800a08c:	9200      	str	r2, [sp, #0]
 800a08e:	2200      	movs	r2, #0
 800a090:	f000 f81e 	bl	800a0d0 <UART_WaitOnFlagUntilTimeout>
 800a094:	1e03      	subs	r3, r0, #0
 800a096:	d001      	beq.n	800a09c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e012      	b.n	800a0c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2288      	movs	r2, #136	; 0x88
 800a0a0:	2120      	movs	r1, #32
 800a0a2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	228c      	movs	r2, #140	; 0x8c
 800a0a8:	2120      	movs	r1, #32
 800a0aa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2284      	movs	r2, #132	; 0x84
 800a0bc:	2100      	movs	r1, #0
 800a0be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	0018      	movs	r0, r3
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	b004      	add	sp, #16
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	46c0      	nop			; (mov r8, r8)
 800a0cc:	01ffffff 	.word	0x01ffffff

0800a0d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b094      	sub	sp, #80	; 0x50
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	603b      	str	r3, [r7, #0]
 800a0dc:	1dfb      	adds	r3, r7, #7
 800a0de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0e0:	e0a7      	b.n	800a232 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	d100      	bne.n	800a0ea <UART_WaitOnFlagUntilTimeout+0x1a>
 800a0e8:	e0a3      	b.n	800a232 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0ea:	f7fc f9a1 	bl	8006430 <HAL_GetTick>
 800a0ee:	0002      	movs	r2, r0
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d302      	bcc.n	800a100 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d13f      	bne.n	800a180 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a100:	f3ef 8310 	mrs	r3, PRIMASK
 800a104:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a108:	647b      	str	r3, [r7, #68]	; 0x44
 800a10a:	2301      	movs	r3, #1
 800a10c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a110:	f383 8810 	msr	PRIMASK, r3
}
 800a114:	46c0      	nop			; (mov r8, r8)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	494e      	ldr	r1, [pc, #312]	; (800a25c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800a122:	400a      	ands	r2, r1
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a128:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	f383 8810 	msr	PRIMASK, r3
}
 800a130:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a132:	f3ef 8310 	mrs	r3, PRIMASK
 800a136:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800a138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a13a:	643b      	str	r3, [r7, #64]	; 0x40
 800a13c:	2301      	movs	r3, #1
 800a13e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	f383 8810 	msr	PRIMASK, r3
}
 800a146:	46c0      	nop			; (mov r8, r8)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689a      	ldr	r2, [r3, #8]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2101      	movs	r1, #1
 800a154:	438a      	bics	r2, r1
 800a156:	609a      	str	r2, [r3, #8]
 800a158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a15a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a15e:	f383 8810 	msr	PRIMASK, r3
}
 800a162:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2288      	movs	r2, #136	; 0x88
 800a168:	2120      	movs	r1, #32
 800a16a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	228c      	movs	r2, #140	; 0x8c
 800a170:	2120      	movs	r1, #32
 800a172:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2284      	movs	r2, #132	; 0x84
 800a178:	2100      	movs	r1, #0
 800a17a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e069      	b.n	800a254 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2204      	movs	r2, #4
 800a188:	4013      	ands	r3, r2
 800a18a:	d052      	beq.n	800a232 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	69da      	ldr	r2, [r3, #28]
 800a192:	2380      	movs	r3, #128	; 0x80
 800a194:	011b      	lsls	r3, r3, #4
 800a196:	401a      	ands	r2, r3
 800a198:	2380      	movs	r3, #128	; 0x80
 800a19a:	011b      	lsls	r3, r3, #4
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d148      	bne.n	800a232 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2280      	movs	r2, #128	; 0x80
 800a1a6:	0112      	lsls	r2, r2, #4
 800a1a8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ae:	613b      	str	r3, [r7, #16]
  return(result);
 800a1b0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a1b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f383 8810 	msr	PRIMASK, r3
}
 800a1be:	46c0      	nop			; (mov r8, r8)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4924      	ldr	r1, [pc, #144]	; (800a25c <UART_WaitOnFlagUntilTimeout+0x18c>)
 800a1cc:	400a      	ands	r2, r1
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	f383 8810 	msr	PRIMASK, r3
}
 800a1da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a1e0:	61fb      	str	r3, [r7, #28]
  return(result);
 800a1e2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	f383 8810 	msr	PRIMASK, r3
}
 800a1f0:	46c0      	nop			; (mov r8, r8)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	689a      	ldr	r2, [r3, #8]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2101      	movs	r1, #1
 800a1fe:	438a      	bics	r2, r1
 800a200:	609a      	str	r2, [r3, #8]
 800a202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a204:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	f383 8810 	msr	PRIMASK, r3
}
 800a20c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2288      	movs	r2, #136	; 0x88
 800a212:	2120      	movs	r1, #32
 800a214:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	228c      	movs	r2, #140	; 0x8c
 800a21a:	2120      	movs	r1, #32
 800a21c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2290      	movs	r2, #144	; 0x90
 800a222:	2120      	movs	r1, #32
 800a224:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2284      	movs	r2, #132	; 0x84
 800a22a:	2100      	movs	r1, #0
 800a22c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e010      	b.n	800a254 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	4013      	ands	r3, r2
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	425a      	negs	r2, r3
 800a242:	4153      	adcs	r3, r2
 800a244:	b2db      	uxtb	r3, r3
 800a246:	001a      	movs	r2, r3
 800a248:	1dfb      	adds	r3, r7, #7
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d100      	bne.n	800a252 <UART_WaitOnFlagUntilTimeout+0x182>
 800a250:	e747      	b.n	800a0e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	0018      	movs	r0, r3
 800a256:	46bd      	mov	sp, r7
 800a258:	b014      	add	sp, #80	; 0x50
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	fffffe5f 	.word	0xfffffe5f

0800a260 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b090      	sub	sp, #64	; 0x40
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	1dbb      	adds	r3, r7, #6
 800a26c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	68ba      	ldr	r2, [r7, #8]
 800a272:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	1dba      	adds	r2, r7, #6
 800a278:	215c      	movs	r1, #92	; 0x5c
 800a27a:	8812      	ldrh	r2, [r2, #0]
 800a27c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2290      	movs	r2, #144	; 0x90
 800a282:	2100      	movs	r1, #0
 800a284:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	228c      	movs	r2, #140	; 0x8c
 800a28a:	2122      	movs	r1, #34	; 0x22
 800a28c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2280      	movs	r2, #128	; 0x80
 800a292:	589b      	ldr	r3, [r3, r2]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d02d      	beq.n	800a2f4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2280      	movs	r2, #128	; 0x80
 800a29c:	589b      	ldr	r3, [r3, r2]
 800a29e:	4a40      	ldr	r2, [pc, #256]	; (800a3a0 <UART_Start_Receive_DMA+0x140>)
 800a2a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2280      	movs	r2, #128	; 0x80
 800a2a6:	589b      	ldr	r3, [r3, r2]
 800a2a8:	4a3e      	ldr	r2, [pc, #248]	; (800a3a4 <UART_Start_Receive_DMA+0x144>)
 800a2aa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2280      	movs	r2, #128	; 0x80
 800a2b0:	589b      	ldr	r3, [r3, r2]
 800a2b2:	4a3d      	ldr	r2, [pc, #244]	; (800a3a8 <UART_Start_Receive_DMA+0x148>)
 800a2b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2280      	movs	r2, #128	; 0x80
 800a2ba:	589b      	ldr	r3, [r3, r2]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2280      	movs	r2, #128	; 0x80
 800a2c4:	5898      	ldr	r0, [r3, r2]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3324      	adds	r3, #36	; 0x24
 800a2cc:	0019      	movs	r1, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d2:	001a      	movs	r2, r3
 800a2d4:	1dbb      	adds	r3, r7, #6
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	f7fc febe 	bl	8007058 <HAL_DMA_Start_IT>
 800a2dc:	1e03      	subs	r3, r0, #0
 800a2de:	d009      	beq.n	800a2f4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2290      	movs	r2, #144	; 0x90
 800a2e4:	2110      	movs	r1, #16
 800a2e6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	228c      	movs	r2, #140	; 0x8c
 800a2ec:	2120      	movs	r1, #32
 800a2ee:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e050      	b.n	800a396 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d019      	beq.n	800a330 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2fc:	f3ef 8310 	mrs	r3, PRIMASK
 800a300:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800a302:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a304:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a306:	2301      	movs	r3, #1
 800a308:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	f383 8810 	msr	PRIMASK, r3
}
 800a310:	46c0      	nop			; (mov r8, r8)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2180      	movs	r1, #128	; 0x80
 800a31e:	0049      	lsls	r1, r1, #1
 800a320:	430a      	orrs	r2, r1
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a326:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	f383 8810 	msr	PRIMASK, r3
}
 800a32e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a330:	f3ef 8310 	mrs	r3, PRIMASK
 800a334:	613b      	str	r3, [r7, #16]
  return(result);
 800a336:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a338:	63bb      	str	r3, [r7, #56]	; 0x38
 800a33a:	2301      	movs	r3, #1
 800a33c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	f383 8810 	msr	PRIMASK, r3
}
 800a344:	46c0      	nop			; (mov r8, r8)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689a      	ldr	r2, [r3, #8]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2101      	movs	r1, #1
 800a352:	430a      	orrs	r2, r1
 800a354:	609a      	str	r2, [r3, #8]
 800a356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a358:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	f383 8810 	msr	PRIMASK, r3
}
 800a360:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a362:	f3ef 8310 	mrs	r3, PRIMASK
 800a366:	61fb      	str	r3, [r7, #28]
  return(result);
 800a368:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a36a:	637b      	str	r3, [r7, #52]	; 0x34
 800a36c:	2301      	movs	r3, #1
 800a36e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	f383 8810 	msr	PRIMASK, r3
}
 800a376:	46c0      	nop			; (mov r8, r8)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689a      	ldr	r2, [r3, #8]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2140      	movs	r1, #64	; 0x40
 800a384:	430a      	orrs	r2, r1
 800a386:	609a      	str	r2, [r3, #8]
 800a388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	f383 8810 	msr	PRIMASK, r3
}
 800a392:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	0018      	movs	r0, r3
 800a398:	46bd      	mov	sp, r7
 800a39a:	b010      	add	sp, #64	; 0x40
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	46c0      	nop			; (mov r8, r8)
 800a3a0:	0800a4f9 	.word	0x0800a4f9
 800a3a4:	0800a629 	.word	0x0800a629
 800a3a8:	0800a66b 	.word	0x0800a66b

0800a3ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b08a      	sub	sp, #40	; 0x28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3b4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3ba:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a3bc:	627b      	str	r3, [r7, #36]	; 0x24
 800a3be:	2301      	movs	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f383 8810 	msr	PRIMASK, r3
}
 800a3c8:	46c0      	nop			; (mov r8, r8)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	21c0      	movs	r1, #192	; 0xc0
 800a3d6:	438a      	bics	r2, r1
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f383 8810 	msr	PRIMASK, r3
}
 800a3e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a3ea:	617b      	str	r3, [r7, #20]
  return(result);
 800a3ec:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a3ee:	623b      	str	r3, [r7, #32]
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	f383 8810 	msr	PRIMASK, r3
}
 800a3fa:	46c0      	nop			; (mov r8, r8)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	689a      	ldr	r2, [r3, #8]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4908      	ldr	r1, [pc, #32]	; (800a428 <UART_EndTxTransfer+0x7c>)
 800a408:	400a      	ands	r2, r1
 800a40a:	609a      	str	r2, [r3, #8]
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	f383 8810 	msr	PRIMASK, r3
}
 800a416:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2288      	movs	r2, #136	; 0x88
 800a41c:	2120      	movs	r1, #32
 800a41e:	5099      	str	r1, [r3, r2]
}
 800a420:	46c0      	nop			; (mov r8, r8)
 800a422:	46bd      	mov	sp, r7
 800a424:	b00a      	add	sp, #40	; 0x28
 800a426:	bd80      	pop	{r7, pc}
 800a428:	ff7fffff 	.word	0xff7fffff

0800a42c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b08e      	sub	sp, #56	; 0x38
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a434:	f3ef 8310 	mrs	r3, PRIMASK
 800a438:	617b      	str	r3, [r7, #20]
  return(result);
 800a43a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a43c:	637b      	str	r3, [r7, #52]	; 0x34
 800a43e:	2301      	movs	r3, #1
 800a440:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	f383 8810 	msr	PRIMASK, r3
}
 800a448:	46c0      	nop			; (mov r8, r8)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4926      	ldr	r1, [pc, #152]	; (800a4f0 <UART_EndRxTransfer+0xc4>)
 800a456:	400a      	ands	r2, r1
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	f383 8810 	msr	PRIMASK, r3
}
 800a464:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a466:	f3ef 8310 	mrs	r3, PRIMASK
 800a46a:	623b      	str	r3, [r7, #32]
  return(result);
 800a46c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a46e:	633b      	str	r3, [r7, #48]	; 0x30
 800a470:	2301      	movs	r3, #1
 800a472:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	f383 8810 	msr	PRIMASK, r3
}
 800a47a:	46c0      	nop			; (mov r8, r8)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	689a      	ldr	r2, [r3, #8]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	491b      	ldr	r1, [pc, #108]	; (800a4f4 <UART_EndRxTransfer+0xc8>)
 800a488:	400a      	ands	r2, r1
 800a48a:	609a      	str	r2, [r3, #8]
 800a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a492:	f383 8810 	msr	PRIMASK, r3
}
 800a496:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d118      	bne.n	800a4d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a4a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a4a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f383 8810 	msr	PRIMASK, r3
}
 800a4b4:	46c0      	nop			; (mov r8, r8)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2110      	movs	r1, #16
 800a4c2:	438a      	bics	r2, r1
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f383 8810 	msr	PRIMASK, r3
}
 800a4d0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	228c      	movs	r2, #140	; 0x8c
 800a4d6:	2120      	movs	r1, #32
 800a4d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a4e6:	46c0      	nop			; (mov r8, r8)
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	b00e      	add	sp, #56	; 0x38
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	46c0      	nop			; (mov r8, r8)
 800a4f0:	fffffedf 	.word	0xfffffedf
 800a4f4:	effffffe 	.word	0xeffffffe

0800a4f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b094      	sub	sp, #80	; 0x50
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a504:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2220      	movs	r2, #32
 800a50e:	4013      	ands	r3, r2
 800a510:	d16f      	bne.n	800a5f2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800a512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a514:	225e      	movs	r2, #94	; 0x5e
 800a516:	2100      	movs	r1, #0
 800a518:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a51a:	f3ef 8310 	mrs	r3, PRIMASK
 800a51e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a520:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a522:	64bb      	str	r3, [r7, #72]	; 0x48
 800a524:	2301      	movs	r3, #1
 800a526:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	f383 8810 	msr	PRIMASK, r3
}
 800a52e:	46c0      	nop			; (mov r8, r8)
 800a530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	493a      	ldr	r1, [pc, #232]	; (800a624 <UART_DMAReceiveCplt+0x12c>)
 800a53c:	400a      	ands	r2, r1
 800a53e:	601a      	str	r2, [r3, #0]
 800a540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a542:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	f383 8810 	msr	PRIMASK, r3
}
 800a54a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a54c:	f3ef 8310 	mrs	r3, PRIMASK
 800a550:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a554:	647b      	str	r3, [r7, #68]	; 0x44
 800a556:	2301      	movs	r3, #1
 800a558:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	f383 8810 	msr	PRIMASK, r3
}
 800a560:	46c0      	nop			; (mov r8, r8)
 800a562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	689a      	ldr	r2, [r3, #8]
 800a568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2101      	movs	r1, #1
 800a56e:	438a      	bics	r2, r1
 800a570:	609a      	str	r2, [r3, #8]
 800a572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a574:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a578:	f383 8810 	msr	PRIMASK, r3
}
 800a57c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a57e:	f3ef 8310 	mrs	r3, PRIMASK
 800a582:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a586:	643b      	str	r3, [r7, #64]	; 0x40
 800a588:	2301      	movs	r3, #1
 800a58a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58e:	f383 8810 	msr	PRIMASK, r3
}
 800a592:	46c0      	nop			; (mov r8, r8)
 800a594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689a      	ldr	r2, [r3, #8]
 800a59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2140      	movs	r1, #64	; 0x40
 800a5a0:	438a      	bics	r2, r1
 800a5a2:	609a      	str	r2, [r3, #8]
 800a5a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	f383 8810 	msr	PRIMASK, r3
}
 800a5ae:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5b2:	228c      	movs	r2, #140	; 0x8c
 800a5b4:	2120      	movs	r1, #32
 800a5b6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d118      	bne.n	800a5f2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a5c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	f383 8810 	msr	PRIMASK, r3
}
 800a5d4:	46c0      	nop			; (mov r8, r8)
 800a5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2110      	movs	r1, #16
 800a5e2:	438a      	bics	r2, r1
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f383 8810 	msr	PRIMASK, r3
}
 800a5f0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d108      	bne.n	800a612 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a602:	225c      	movs	r2, #92	; 0x5c
 800a604:	5a9a      	ldrh	r2, [r3, r2]
 800a606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a608:	0011      	movs	r1, r2
 800a60a:	0018      	movs	r0, r3
 800a60c:	f7fb fa1e 	bl	8005a4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a610:	e003      	b.n	800a61a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800a612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a614:	0018      	movs	r0, r3
 800a616:	f7ff f9c9 	bl	80099ac <HAL_UART_RxCpltCallback>
}
 800a61a:	46c0      	nop			; (mov r8, r8)
 800a61c:	46bd      	mov	sp, r7
 800a61e:	b014      	add	sp, #80	; 0x50
 800a620:	bd80      	pop	{r7, pc}
 800a622:	46c0      	nop			; (mov r8, r8)
 800a624:	fffffeff 	.word	0xfffffeff

0800a628 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a634:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2201      	movs	r2, #1
 800a63a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a640:	2b01      	cmp	r3, #1
 800a642:	d10a      	bne.n	800a65a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	225c      	movs	r2, #92	; 0x5c
 800a648:	5a9b      	ldrh	r3, [r3, r2]
 800a64a:	085b      	lsrs	r3, r3, #1
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	0011      	movs	r1, r2
 800a652:	0018      	movs	r0, r3
 800a654:	f7fb f9fa 	bl	8005a4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a658:	e003      	b.n	800a662 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	0018      	movs	r0, r3
 800a65e:	f7ff f9ad 	bl	80099bc <HAL_UART_RxHalfCpltCallback>
}
 800a662:	46c0      	nop			; (mov r8, r8)
 800a664:	46bd      	mov	sp, r7
 800a666:	b004      	add	sp, #16
 800a668:	bd80      	pop	{r7, pc}

0800a66a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b086      	sub	sp, #24
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a676:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	2288      	movs	r2, #136	; 0x88
 800a67c:	589b      	ldr	r3, [r3, r2]
 800a67e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	228c      	movs	r2, #140	; 0x8c
 800a684:	589b      	ldr	r3, [r3, r2]
 800a686:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	2280      	movs	r2, #128	; 0x80
 800a690:	4013      	ands	r3, r2
 800a692:	2b80      	cmp	r3, #128	; 0x80
 800a694:	d10a      	bne.n	800a6ac <UART_DMAError+0x42>
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	2b21      	cmp	r3, #33	; 0x21
 800a69a:	d107      	bne.n	800a6ac <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	2256      	movs	r2, #86	; 0x56
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	0018      	movs	r0, r3
 800a6a8:	f7ff fe80 	bl	800a3ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	2240      	movs	r2, #64	; 0x40
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	2b40      	cmp	r3, #64	; 0x40
 800a6b8:	d10a      	bne.n	800a6d0 <UART_DMAError+0x66>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2b22      	cmp	r3, #34	; 0x22
 800a6be:	d107      	bne.n	800a6d0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	225e      	movs	r2, #94	; 0x5e
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	0018      	movs	r0, r3
 800a6cc:	f7ff feae 	bl	800a42c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2290      	movs	r2, #144	; 0x90
 800a6d4:	589b      	ldr	r3, [r3, r2]
 800a6d6:	2210      	movs	r2, #16
 800a6d8:	431a      	orrs	r2, r3
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	2190      	movs	r1, #144	; 0x90
 800a6de:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	f7ff f972 	bl	80099cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6e8:	46c0      	nop			; (mov r8, r8)
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	b006      	add	sp, #24
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	225e      	movs	r2, #94	; 0x5e
 800a702:	2100      	movs	r1, #0
 800a704:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2256      	movs	r2, #86	; 0x56
 800a70a:	2100      	movs	r1, #0
 800a70c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	0018      	movs	r0, r3
 800a712:	f7ff f95b 	bl	80099cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a716:	46c0      	nop			; (mov r8, r8)
 800a718:	46bd      	mov	sp, r7
 800a71a:	b004      	add	sp, #16
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b086      	sub	sp, #24
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a726:	f3ef 8310 	mrs	r3, PRIMASK
 800a72a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a72c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a72e:	617b      	str	r3, [r7, #20]
 800a730:	2301      	movs	r3, #1
 800a732:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f383 8810 	msr	PRIMASK, r3
}
 800a73a:	46c0      	nop			; (mov r8, r8)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2140      	movs	r1, #64	; 0x40
 800a748:	438a      	bics	r2, r1
 800a74a:	601a      	str	r2, [r3, #0]
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f383 8810 	msr	PRIMASK, r3
}
 800a756:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2288      	movs	r2, #136	; 0x88
 800a75c:	2120      	movs	r1, #32
 800a75e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	0018      	movs	r0, r3
 800a76a:	f7ff f917 	bl	800999c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	46bd      	mov	sp, r7
 800a772:	b006      	add	sp, #24
 800a774:	bd80      	pop	{r7, pc}

0800a776 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b082      	sub	sp, #8
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a77e:	46c0      	nop			; (mov r8, r8)
 800a780:	46bd      	mov	sp, r7
 800a782:	b002      	add	sp, #8
 800a784:	bd80      	pop	{r7, pc}

0800a786 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a78e:	46c0      	nop			; (mov r8, r8)
 800a790:	46bd      	mov	sp, r7
 800a792:	b002      	add	sp, #8
 800a794:	bd80      	pop	{r7, pc}

0800a796 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b082      	sub	sp, #8
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a79e:	46c0      	nop			; (mov r8, r8)
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	b002      	add	sp, #8
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2284      	movs	r2, #132	; 0x84
 800a7b4:	5c9b      	ldrb	r3, [r3, r2]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d101      	bne.n	800a7be <HAL_UARTEx_DisableFifoMode+0x16>
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	e027      	b.n	800a80e <HAL_UARTEx_DisableFifoMode+0x66>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2284      	movs	r2, #132	; 0x84
 800a7c2:	2101      	movs	r1, #1
 800a7c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2288      	movs	r2, #136	; 0x88
 800a7ca:	2124      	movs	r1, #36	; 0x24
 800a7cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	438a      	bics	r2, r1
 800a7e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4a0b      	ldr	r2, [pc, #44]	; (800a818 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2288      	movs	r2, #136	; 0x88
 800a800:	2120      	movs	r1, #32
 800a802:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2284      	movs	r2, #132	; 0x84
 800a808:	2100      	movs	r1, #0
 800a80a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	0018      	movs	r0, r3
 800a810:	46bd      	mov	sp, r7
 800a812:	b004      	add	sp, #16
 800a814:	bd80      	pop	{r7, pc}
 800a816:	46c0      	nop			; (mov r8, r8)
 800a818:	dfffffff 	.word	0xdfffffff

0800a81c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2284      	movs	r2, #132	; 0x84
 800a82a:	5c9b      	ldrb	r3, [r3, r2]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a830:	2302      	movs	r3, #2
 800a832:	e02e      	b.n	800a892 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2284      	movs	r2, #132	; 0x84
 800a838:	2101      	movs	r1, #1
 800a83a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2288      	movs	r2, #136	; 0x88
 800a840:	2124      	movs	r1, #36	; 0x24
 800a842:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2101      	movs	r1, #1
 800a858:	438a      	bics	r2, r1
 800a85a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	00db      	lsls	r3, r3, #3
 800a864:	08d9      	lsrs	r1, r3, #3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	0018      	movs	r0, r3
 800a874:	f000 f8bc 	bl	800a9f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2288      	movs	r2, #136	; 0x88
 800a884:	2120      	movs	r1, #32
 800a886:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2284      	movs	r2, #132	; 0x84
 800a88c:	2100      	movs	r1, #0
 800a88e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	0018      	movs	r0, r3
 800a894:	46bd      	mov	sp, r7
 800a896:	b004      	add	sp, #16
 800a898:	bd80      	pop	{r7, pc}
	...

0800a89c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2284      	movs	r2, #132	; 0x84
 800a8aa:	5c9b      	ldrb	r3, [r3, r2]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d101      	bne.n	800a8b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	e02f      	b.n	800a914 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2284      	movs	r2, #132	; 0x84
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2288      	movs	r2, #136	; 0x88
 800a8c0:	2124      	movs	r1, #36	; 0x24
 800a8c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	438a      	bics	r2, r1
 800a8da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	4a0e      	ldr	r2, [pc, #56]	; (800a91c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	0019      	movs	r1, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	430a      	orrs	r2, r1
 800a8f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	0018      	movs	r0, r3
 800a8f6:	f000 f87b 	bl	800a9f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2288      	movs	r2, #136	; 0x88
 800a906:	2120      	movs	r1, #32
 800a908:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2284      	movs	r2, #132	; 0x84
 800a90e:	2100      	movs	r1, #0
 800a910:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	0018      	movs	r0, r3
 800a916:	46bd      	mov	sp, r7
 800a918:	b004      	add	sp, #16
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	f1ffffff 	.word	0xf1ffffff

0800a920 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a920:	b5b0      	push	{r4, r5, r7, lr}
 800a922:	b08a      	sub	sp, #40	; 0x28
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	1dbb      	adds	r3, r7, #6
 800a92c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	228c      	movs	r2, #140	; 0x8c
 800a932:	589b      	ldr	r3, [r3, r2]
 800a934:	2b20      	cmp	r3, #32
 800a936:	d156      	bne.n	800a9e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d003      	beq.n	800a946 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a93e:	1dbb      	adds	r3, r7, #6
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e04e      	b.n	800a9e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	689a      	ldr	r2, [r3, #8]
 800a94e:	2380      	movs	r3, #128	; 0x80
 800a950:	015b      	lsls	r3, r3, #5
 800a952:	429a      	cmp	r2, r3
 800a954:	d109      	bne.n	800a96a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d105      	bne.n	800a96a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	2201      	movs	r2, #1
 800a962:	4013      	ands	r3, r2
 800a964:	d001      	beq.n	800a96a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	e03e      	b.n	800a9e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2201      	movs	r2, #1
 800a96e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a976:	2527      	movs	r5, #39	; 0x27
 800a978:	197c      	adds	r4, r7, r5
 800a97a:	1dbb      	adds	r3, r7, #6
 800a97c:	881a      	ldrh	r2, [r3, #0]
 800a97e:	68b9      	ldr	r1, [r7, #8]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	0018      	movs	r0, r3
 800a984:	f7ff fc6c 	bl	800a260 <UART_Start_Receive_DMA>
 800a988:	0003      	movs	r3, r0
 800a98a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a98c:	197b      	adds	r3, r7, r5
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d124      	bne.n	800a9de <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d11c      	bne.n	800a9d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2210      	movs	r2, #16
 800a9a2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9a4:	f3ef 8310 	mrs	r3, PRIMASK
 800a9a8:	617b      	str	r3, [r7, #20]
  return(result);
 800a9aa:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9ac:	623b      	str	r3, [r7, #32]
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	f383 8810 	msr	PRIMASK, r3
}
 800a9b8:	46c0      	nop			; (mov r8, r8)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2110      	movs	r1, #16
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	601a      	str	r2, [r3, #0]
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	f383 8810 	msr	PRIMASK, r3
}
 800a9d4:	e003      	b.n	800a9de <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a9d6:	2327      	movs	r3, #39	; 0x27
 800a9d8:	18fb      	adds	r3, r7, r3
 800a9da:	2201      	movs	r2, #1
 800a9dc:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800a9de:	2327      	movs	r3, #39	; 0x27
 800a9e0:	18fb      	adds	r3, r7, r3
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	e000      	b.n	800a9e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800a9e6:	2302      	movs	r3, #2
  }
}
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	b00a      	add	sp, #40	; 0x28
 800a9ee:	bdb0      	pop	{r4, r5, r7, pc}

0800a9f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d108      	bne.n	800aa12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	226a      	movs	r2, #106	; 0x6a
 800aa04:	2101      	movs	r1, #1
 800aa06:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2268      	movs	r2, #104	; 0x68
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa10:	e043      	b.n	800aa9a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa12:	260f      	movs	r6, #15
 800aa14:	19bb      	adds	r3, r7, r6
 800aa16:	2208      	movs	r2, #8
 800aa18:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa1a:	200e      	movs	r0, #14
 800aa1c:	183b      	adds	r3, r7, r0
 800aa1e:	2208      	movs	r2, #8
 800aa20:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	0e5b      	lsrs	r3, r3, #25
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	240d      	movs	r4, #13
 800aa2e:	193b      	adds	r3, r7, r4
 800aa30:	2107      	movs	r1, #7
 800aa32:	400a      	ands	r2, r1
 800aa34:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	0f5b      	lsrs	r3, r3, #29
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	250c      	movs	r5, #12
 800aa42:	197b      	adds	r3, r7, r5
 800aa44:	2107      	movs	r1, #7
 800aa46:	400a      	ands	r2, r1
 800aa48:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa4a:	183b      	adds	r3, r7, r0
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	197a      	adds	r2, r7, r5
 800aa50:	7812      	ldrb	r2, [r2, #0]
 800aa52:	4914      	ldr	r1, [pc, #80]	; (800aaa4 <UARTEx_SetNbDataToProcess+0xb4>)
 800aa54:	5c8a      	ldrb	r2, [r1, r2]
 800aa56:	435a      	muls	r2, r3
 800aa58:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa5a:	197b      	adds	r3, r7, r5
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	4a12      	ldr	r2, [pc, #72]	; (800aaa8 <UARTEx_SetNbDataToProcess+0xb8>)
 800aa60:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa62:	0019      	movs	r1, r3
 800aa64:	f7f5 fbfe 	bl	8000264 <__divsi3>
 800aa68:	0003      	movs	r3, r0
 800aa6a:	b299      	uxth	r1, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	226a      	movs	r2, #106	; 0x6a
 800aa70:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa72:	19bb      	adds	r3, r7, r6
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	193a      	adds	r2, r7, r4
 800aa78:	7812      	ldrb	r2, [r2, #0]
 800aa7a:	490a      	ldr	r1, [pc, #40]	; (800aaa4 <UARTEx_SetNbDataToProcess+0xb4>)
 800aa7c:	5c8a      	ldrb	r2, [r1, r2]
 800aa7e:	435a      	muls	r2, r3
 800aa80:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa82:	193b      	adds	r3, r7, r4
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	4a08      	ldr	r2, [pc, #32]	; (800aaa8 <UARTEx_SetNbDataToProcess+0xb8>)
 800aa88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa8a:	0019      	movs	r1, r3
 800aa8c:	f7f5 fbea 	bl	8000264 <__divsi3>
 800aa90:	0003      	movs	r3, r0
 800aa92:	b299      	uxth	r1, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2268      	movs	r2, #104	; 0x68
 800aa98:	5299      	strh	r1, [r3, r2]
}
 800aa9a:	46c0      	nop			; (mov r8, r8)
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	b005      	add	sp, #20
 800aaa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaa2:	46c0      	nop			; (mov r8, r8)
 800aaa4:	0800e4bc 	.word	0x0800e4bc
 800aaa8:	0800e4c4 	.word	0x0800e4c4

0800aaac <atoi>:
 800aaac:	b510      	push	{r4, lr}
 800aaae:	220a      	movs	r2, #10
 800aab0:	2100      	movs	r1, #0
 800aab2:	f000 fdcf 	bl	800b654 <strtol>
 800aab6:	bd10      	pop	{r4, pc}

0800aab8 <__errno>:
 800aab8:	4b01      	ldr	r3, [pc, #4]	; (800aac0 <__errno+0x8>)
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	4770      	bx	lr
 800aabe:	46c0      	nop			; (mov r8, r8)
 800aac0:	200000a0 	.word	0x200000a0

0800aac4 <__libc_init_array>:
 800aac4:	b570      	push	{r4, r5, r6, lr}
 800aac6:	2600      	movs	r6, #0
 800aac8:	4d0c      	ldr	r5, [pc, #48]	; (800aafc <__libc_init_array+0x38>)
 800aaca:	4c0d      	ldr	r4, [pc, #52]	; (800ab00 <__libc_init_array+0x3c>)
 800aacc:	1b64      	subs	r4, r4, r5
 800aace:	10a4      	asrs	r4, r4, #2
 800aad0:	42a6      	cmp	r6, r4
 800aad2:	d109      	bne.n	800aae8 <__libc_init_array+0x24>
 800aad4:	2600      	movs	r6, #0
 800aad6:	f003 fa77 	bl	800dfc8 <_init>
 800aada:	4d0a      	ldr	r5, [pc, #40]	; (800ab04 <__libc_init_array+0x40>)
 800aadc:	4c0a      	ldr	r4, [pc, #40]	; (800ab08 <__libc_init_array+0x44>)
 800aade:	1b64      	subs	r4, r4, r5
 800aae0:	10a4      	asrs	r4, r4, #2
 800aae2:	42a6      	cmp	r6, r4
 800aae4:	d105      	bne.n	800aaf2 <__libc_init_array+0x2e>
 800aae6:	bd70      	pop	{r4, r5, r6, pc}
 800aae8:	00b3      	lsls	r3, r6, #2
 800aaea:	58eb      	ldr	r3, [r5, r3]
 800aaec:	4798      	blx	r3
 800aaee:	3601      	adds	r6, #1
 800aaf0:	e7ee      	b.n	800aad0 <__libc_init_array+0xc>
 800aaf2:	00b3      	lsls	r3, r6, #2
 800aaf4:	58eb      	ldr	r3, [r5, r3]
 800aaf6:	4798      	blx	r3
 800aaf8:	3601      	adds	r6, #1
 800aafa:	e7f2      	b.n	800aae2 <__libc_init_array+0x1e>
 800aafc:	0800e8ec 	.word	0x0800e8ec
 800ab00:	0800e8ec 	.word	0x0800e8ec
 800ab04:	0800e8ec 	.word	0x0800e8ec
 800ab08:	0800e8f0 	.word	0x0800e8f0

0800ab0c <memcpy>:
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	b510      	push	{r4, lr}
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d100      	bne.n	800ab16 <memcpy+0xa>
 800ab14:	bd10      	pop	{r4, pc}
 800ab16:	5ccc      	ldrb	r4, [r1, r3]
 800ab18:	54c4      	strb	r4, [r0, r3]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	e7f8      	b.n	800ab10 <memcpy+0x4>

0800ab1e <memset>:
 800ab1e:	0003      	movs	r3, r0
 800ab20:	1882      	adds	r2, r0, r2
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d100      	bne.n	800ab28 <memset+0xa>
 800ab26:	4770      	bx	lr
 800ab28:	7019      	strb	r1, [r3, #0]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	e7f9      	b.n	800ab22 <memset+0x4>

0800ab2e <__cvt>:
 800ab2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab30:	001e      	movs	r6, r3
 800ab32:	2300      	movs	r3, #0
 800ab34:	0014      	movs	r4, r2
 800ab36:	b08b      	sub	sp, #44	; 0x2c
 800ab38:	429e      	cmp	r6, r3
 800ab3a:	da04      	bge.n	800ab46 <__cvt+0x18>
 800ab3c:	2180      	movs	r1, #128	; 0x80
 800ab3e:	0609      	lsls	r1, r1, #24
 800ab40:	1873      	adds	r3, r6, r1
 800ab42:	001e      	movs	r6, r3
 800ab44:	232d      	movs	r3, #45	; 0x2d
 800ab46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab48:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ab4a:	7013      	strb	r3, [r2, #0]
 800ab4c:	2320      	movs	r3, #32
 800ab4e:	2203      	movs	r2, #3
 800ab50:	439f      	bics	r7, r3
 800ab52:	2f46      	cmp	r7, #70	; 0x46
 800ab54:	d007      	beq.n	800ab66 <__cvt+0x38>
 800ab56:	003b      	movs	r3, r7
 800ab58:	3b45      	subs	r3, #69	; 0x45
 800ab5a:	4259      	negs	r1, r3
 800ab5c:	414b      	adcs	r3, r1
 800ab5e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ab60:	3a01      	subs	r2, #1
 800ab62:	18cb      	adds	r3, r1, r3
 800ab64:	9310      	str	r3, [sp, #64]	; 0x40
 800ab66:	ab09      	add	r3, sp, #36	; 0x24
 800ab68:	9304      	str	r3, [sp, #16]
 800ab6a:	ab08      	add	r3, sp, #32
 800ab6c:	9303      	str	r3, [sp, #12]
 800ab6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab70:	9200      	str	r2, [sp, #0]
 800ab72:	9302      	str	r3, [sp, #8]
 800ab74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab76:	0022      	movs	r2, r4
 800ab78:	9301      	str	r3, [sp, #4]
 800ab7a:	0033      	movs	r3, r6
 800ab7c:	f000 fed0 	bl	800b920 <_dtoa_r>
 800ab80:	0005      	movs	r5, r0
 800ab82:	2f47      	cmp	r7, #71	; 0x47
 800ab84:	d102      	bne.n	800ab8c <__cvt+0x5e>
 800ab86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab88:	07db      	lsls	r3, r3, #31
 800ab8a:	d528      	bpl.n	800abde <__cvt+0xb0>
 800ab8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab8e:	18eb      	adds	r3, r5, r3
 800ab90:	9307      	str	r3, [sp, #28]
 800ab92:	2f46      	cmp	r7, #70	; 0x46
 800ab94:	d114      	bne.n	800abc0 <__cvt+0x92>
 800ab96:	782b      	ldrb	r3, [r5, #0]
 800ab98:	2b30      	cmp	r3, #48	; 0x30
 800ab9a:	d10c      	bne.n	800abb6 <__cvt+0x88>
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2300      	movs	r3, #0
 800aba0:	0020      	movs	r0, r4
 800aba2:	0031      	movs	r1, r6
 800aba4:	f7f5 fc5a 	bl	800045c <__aeabi_dcmpeq>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d104      	bne.n	800abb6 <__cvt+0x88>
 800abac:	2301      	movs	r3, #1
 800abae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abb0:	1a9b      	subs	r3, r3, r2
 800abb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800abb4:	6013      	str	r3, [r2, #0]
 800abb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800abb8:	9a07      	ldr	r2, [sp, #28]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	18d3      	adds	r3, r2, r3
 800abbe:	9307      	str	r3, [sp, #28]
 800abc0:	2200      	movs	r2, #0
 800abc2:	2300      	movs	r3, #0
 800abc4:	0020      	movs	r0, r4
 800abc6:	0031      	movs	r1, r6
 800abc8:	f7f5 fc48 	bl	800045c <__aeabi_dcmpeq>
 800abcc:	2800      	cmp	r0, #0
 800abce:	d001      	beq.n	800abd4 <__cvt+0xa6>
 800abd0:	9b07      	ldr	r3, [sp, #28]
 800abd2:	9309      	str	r3, [sp, #36]	; 0x24
 800abd4:	2230      	movs	r2, #48	; 0x30
 800abd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd8:	9907      	ldr	r1, [sp, #28]
 800abda:	428b      	cmp	r3, r1
 800abdc:	d306      	bcc.n	800abec <__cvt+0xbe>
 800abde:	0028      	movs	r0, r5
 800abe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800abe4:	1b5b      	subs	r3, r3, r5
 800abe6:	6013      	str	r3, [r2, #0]
 800abe8:	b00b      	add	sp, #44	; 0x2c
 800abea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abec:	1c59      	adds	r1, r3, #1
 800abee:	9109      	str	r1, [sp, #36]	; 0x24
 800abf0:	701a      	strb	r2, [r3, #0]
 800abf2:	e7f0      	b.n	800abd6 <__cvt+0xa8>

0800abf4 <__exponent>:
 800abf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abf6:	1c83      	adds	r3, r0, #2
 800abf8:	b087      	sub	sp, #28
 800abfa:	9303      	str	r3, [sp, #12]
 800abfc:	0005      	movs	r5, r0
 800abfe:	000c      	movs	r4, r1
 800ac00:	232b      	movs	r3, #43	; 0x2b
 800ac02:	7002      	strb	r2, [r0, #0]
 800ac04:	2900      	cmp	r1, #0
 800ac06:	da01      	bge.n	800ac0c <__exponent+0x18>
 800ac08:	424c      	negs	r4, r1
 800ac0a:	3302      	adds	r3, #2
 800ac0c:	706b      	strb	r3, [r5, #1]
 800ac0e:	2c09      	cmp	r4, #9
 800ac10:	dd31      	ble.n	800ac76 <__exponent+0x82>
 800ac12:	270a      	movs	r7, #10
 800ac14:	ab04      	add	r3, sp, #16
 800ac16:	1dde      	adds	r6, r3, #7
 800ac18:	0020      	movs	r0, r4
 800ac1a:	0039      	movs	r1, r7
 800ac1c:	9601      	str	r6, [sp, #4]
 800ac1e:	f7f5 fc07 	bl	8000430 <__aeabi_idivmod>
 800ac22:	3e01      	subs	r6, #1
 800ac24:	3130      	adds	r1, #48	; 0x30
 800ac26:	0020      	movs	r0, r4
 800ac28:	7031      	strb	r1, [r6, #0]
 800ac2a:	0039      	movs	r1, r7
 800ac2c:	9402      	str	r4, [sp, #8]
 800ac2e:	f7f5 fb19 	bl	8000264 <__divsi3>
 800ac32:	9b02      	ldr	r3, [sp, #8]
 800ac34:	0004      	movs	r4, r0
 800ac36:	2b63      	cmp	r3, #99	; 0x63
 800ac38:	dcee      	bgt.n	800ac18 <__exponent+0x24>
 800ac3a:	9b01      	ldr	r3, [sp, #4]
 800ac3c:	3430      	adds	r4, #48	; 0x30
 800ac3e:	1e9a      	subs	r2, r3, #2
 800ac40:	0013      	movs	r3, r2
 800ac42:	9903      	ldr	r1, [sp, #12]
 800ac44:	7014      	strb	r4, [r2, #0]
 800ac46:	a804      	add	r0, sp, #16
 800ac48:	3007      	adds	r0, #7
 800ac4a:	4298      	cmp	r0, r3
 800ac4c:	d80e      	bhi.n	800ac6c <__exponent+0x78>
 800ac4e:	ab04      	add	r3, sp, #16
 800ac50:	3307      	adds	r3, #7
 800ac52:	2000      	movs	r0, #0
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d804      	bhi.n	800ac62 <__exponent+0x6e>
 800ac58:	ab04      	add	r3, sp, #16
 800ac5a:	3009      	adds	r0, #9
 800ac5c:	18c0      	adds	r0, r0, r3
 800ac5e:	9b01      	ldr	r3, [sp, #4]
 800ac60:	1ac0      	subs	r0, r0, r3
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	1818      	adds	r0, r3, r0
 800ac66:	1b40      	subs	r0, r0, r5
 800ac68:	b007      	add	sp, #28
 800ac6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac6c:	7818      	ldrb	r0, [r3, #0]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	7008      	strb	r0, [r1, #0]
 800ac72:	3101      	adds	r1, #1
 800ac74:	e7e7      	b.n	800ac46 <__exponent+0x52>
 800ac76:	2330      	movs	r3, #48	; 0x30
 800ac78:	18e4      	adds	r4, r4, r3
 800ac7a:	70ab      	strb	r3, [r5, #2]
 800ac7c:	1d28      	adds	r0, r5, #4
 800ac7e:	70ec      	strb	r4, [r5, #3]
 800ac80:	e7f1      	b.n	800ac66 <__exponent+0x72>
	...

0800ac84 <_printf_float>:
 800ac84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac86:	b095      	sub	sp, #84	; 0x54
 800ac88:	000c      	movs	r4, r1
 800ac8a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac8c:	001e      	movs	r6, r3
 800ac8e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ac90:	0007      	movs	r7, r0
 800ac92:	f001 fe2d 	bl	800c8f0 <_localeconv_r>
 800ac96:	6803      	ldr	r3, [r0, #0]
 800ac98:	0018      	movs	r0, r3
 800ac9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ac9c:	f7f5 fa3c 	bl	8000118 <strlen>
 800aca0:	2300      	movs	r3, #0
 800aca2:	9312      	str	r3, [sp, #72]	; 0x48
 800aca4:	7e23      	ldrb	r3, [r4, #24]
 800aca6:	2207      	movs	r2, #7
 800aca8:	930a      	str	r3, [sp, #40]	; 0x28
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	900e      	str	r0, [sp, #56]	; 0x38
 800acae:	930d      	str	r3, [sp, #52]	; 0x34
 800acb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800acb2:	682b      	ldr	r3, [r5, #0]
 800acb4:	05c9      	lsls	r1, r1, #23
 800acb6:	d547      	bpl.n	800ad48 <_printf_float+0xc4>
 800acb8:	189b      	adds	r3, r3, r2
 800acba:	4393      	bics	r3, r2
 800acbc:	001a      	movs	r2, r3
 800acbe:	3208      	adds	r2, #8
 800acc0:	602a      	str	r2, [r5, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	64a2      	str	r2, [r4, #72]	; 0x48
 800acc8:	64e3      	str	r3, [r4, #76]	; 0x4c
 800acca:	2201      	movs	r2, #1
 800accc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800acce:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800acd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800acd2:	006b      	lsls	r3, r5, #1
 800acd4:	085b      	lsrs	r3, r3, #1
 800acd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800acd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800acda:	4ba7      	ldr	r3, [pc, #668]	; (800af78 <_printf_float+0x2f4>)
 800acdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800acde:	4252      	negs	r2, r2
 800ace0:	f7f8 f8fc 	bl	8002edc <__aeabi_dcmpun>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d131      	bne.n	800ad4c <_printf_float+0xc8>
 800ace8:	2201      	movs	r2, #1
 800acea:	4ba3      	ldr	r3, [pc, #652]	; (800af78 <_printf_float+0x2f4>)
 800acec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800acee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800acf0:	4252      	negs	r2, r2
 800acf2:	f7f5 fbc3 	bl	800047c <__aeabi_dcmple>
 800acf6:	2800      	cmp	r0, #0
 800acf8:	d128      	bne.n	800ad4c <_printf_float+0xc8>
 800acfa:	2200      	movs	r2, #0
 800acfc:	2300      	movs	r3, #0
 800acfe:	0029      	movs	r1, r5
 800ad00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ad02:	f7f5 fbb1 	bl	8000468 <__aeabi_dcmplt>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d003      	beq.n	800ad12 <_printf_float+0x8e>
 800ad0a:	0023      	movs	r3, r4
 800ad0c:	222d      	movs	r2, #45	; 0x2d
 800ad0e:	3343      	adds	r3, #67	; 0x43
 800ad10:	701a      	strb	r2, [r3, #0]
 800ad12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad14:	4d99      	ldr	r5, [pc, #612]	; (800af7c <_printf_float+0x2f8>)
 800ad16:	2b47      	cmp	r3, #71	; 0x47
 800ad18:	d900      	bls.n	800ad1c <_printf_float+0x98>
 800ad1a:	4d99      	ldr	r5, [pc, #612]	; (800af80 <_printf_float+0x2fc>)
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad20:	6123      	str	r3, [r4, #16]
 800ad22:	3301      	adds	r3, #1
 800ad24:	439a      	bics	r2, r3
 800ad26:	2300      	movs	r3, #0
 800ad28:	6022      	str	r2, [r4, #0]
 800ad2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2e:	0021      	movs	r1, r4
 800ad30:	0038      	movs	r0, r7
 800ad32:	9600      	str	r6, [sp, #0]
 800ad34:	aa13      	add	r2, sp, #76	; 0x4c
 800ad36:	f000 f9e7 	bl	800b108 <_printf_common>
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	d000      	beq.n	800ad40 <_printf_float+0xbc>
 800ad3e:	e0a2      	b.n	800ae86 <_printf_float+0x202>
 800ad40:	2001      	movs	r0, #1
 800ad42:	4240      	negs	r0, r0
 800ad44:	b015      	add	sp, #84	; 0x54
 800ad46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad48:	3307      	adds	r3, #7
 800ad4a:	e7b6      	b.n	800acba <_printf_float+0x36>
 800ad4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad4e:	002b      	movs	r3, r5
 800ad50:	0010      	movs	r0, r2
 800ad52:	0029      	movs	r1, r5
 800ad54:	f7f8 f8c2 	bl	8002edc <__aeabi_dcmpun>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d00b      	beq.n	800ad74 <_printf_float+0xf0>
 800ad5c:	2d00      	cmp	r5, #0
 800ad5e:	da03      	bge.n	800ad68 <_printf_float+0xe4>
 800ad60:	0023      	movs	r3, r4
 800ad62:	222d      	movs	r2, #45	; 0x2d
 800ad64:	3343      	adds	r3, #67	; 0x43
 800ad66:	701a      	strb	r2, [r3, #0]
 800ad68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad6a:	4d86      	ldr	r5, [pc, #536]	; (800af84 <_printf_float+0x300>)
 800ad6c:	2b47      	cmp	r3, #71	; 0x47
 800ad6e:	d9d5      	bls.n	800ad1c <_printf_float+0x98>
 800ad70:	4d85      	ldr	r5, [pc, #532]	; (800af88 <_printf_float+0x304>)
 800ad72:	e7d3      	b.n	800ad1c <_printf_float+0x98>
 800ad74:	2220      	movs	r2, #32
 800ad76:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad78:	6863      	ldr	r3, [r4, #4]
 800ad7a:	4391      	bics	r1, r2
 800ad7c:	910f      	str	r1, [sp, #60]	; 0x3c
 800ad7e:	1c5a      	adds	r2, r3, #1
 800ad80:	d149      	bne.n	800ae16 <_printf_float+0x192>
 800ad82:	3307      	adds	r3, #7
 800ad84:	6063      	str	r3, [r4, #4]
 800ad86:	2380      	movs	r3, #128	; 0x80
 800ad88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	2200      	movs	r2, #0
 800ad90:	9206      	str	r2, [sp, #24]
 800ad92:	aa12      	add	r2, sp, #72	; 0x48
 800ad94:	9205      	str	r2, [sp, #20]
 800ad96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad98:	a908      	add	r1, sp, #32
 800ad9a:	9204      	str	r2, [sp, #16]
 800ad9c:	aa11      	add	r2, sp, #68	; 0x44
 800ad9e:	9203      	str	r2, [sp, #12]
 800ada0:	2223      	movs	r2, #35	; 0x23
 800ada2:	6023      	str	r3, [r4, #0]
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	6863      	ldr	r3, [r4, #4]
 800ada8:	1852      	adds	r2, r2, r1
 800adaa:	9202      	str	r2, [sp, #8]
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	0038      	movs	r0, r7
 800adb0:	002b      	movs	r3, r5
 800adb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adb4:	f7ff febb 	bl	800ab2e <__cvt>
 800adb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adba:	0005      	movs	r5, r0
 800adbc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800adbe:	2b47      	cmp	r3, #71	; 0x47
 800adc0:	d108      	bne.n	800add4 <_printf_float+0x150>
 800adc2:	1ccb      	adds	r3, r1, #3
 800adc4:	db02      	blt.n	800adcc <_printf_float+0x148>
 800adc6:	6863      	ldr	r3, [r4, #4]
 800adc8:	4299      	cmp	r1, r3
 800adca:	dd48      	ble.n	800ae5e <_printf_float+0x1da>
 800adcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adce:	3b02      	subs	r3, #2
 800add0:	b2db      	uxtb	r3, r3
 800add2:	930a      	str	r3, [sp, #40]	; 0x28
 800add4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800add6:	2b65      	cmp	r3, #101	; 0x65
 800add8:	d824      	bhi.n	800ae24 <_printf_float+0x1a0>
 800adda:	0020      	movs	r0, r4
 800addc:	001a      	movs	r2, r3
 800adde:	3901      	subs	r1, #1
 800ade0:	3050      	adds	r0, #80	; 0x50
 800ade2:	9111      	str	r1, [sp, #68]	; 0x44
 800ade4:	f7ff ff06 	bl	800abf4 <__exponent>
 800ade8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adea:	900b      	str	r0, [sp, #44]	; 0x2c
 800adec:	1813      	adds	r3, r2, r0
 800adee:	6123      	str	r3, [r4, #16]
 800adf0:	2a01      	cmp	r2, #1
 800adf2:	dc02      	bgt.n	800adfa <_printf_float+0x176>
 800adf4:	6822      	ldr	r2, [r4, #0]
 800adf6:	07d2      	lsls	r2, r2, #31
 800adf8:	d501      	bpl.n	800adfe <_printf_float+0x17a>
 800adfa:	3301      	adds	r3, #1
 800adfc:	6123      	str	r3, [r4, #16]
 800adfe:	2323      	movs	r3, #35	; 0x23
 800ae00:	aa08      	add	r2, sp, #32
 800ae02:	189b      	adds	r3, r3, r2
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d100      	bne.n	800ae0c <_printf_float+0x188>
 800ae0a:	e78f      	b.n	800ad2c <_printf_float+0xa8>
 800ae0c:	0023      	movs	r3, r4
 800ae0e:	222d      	movs	r2, #45	; 0x2d
 800ae10:	3343      	adds	r3, #67	; 0x43
 800ae12:	701a      	strb	r2, [r3, #0]
 800ae14:	e78a      	b.n	800ad2c <_printf_float+0xa8>
 800ae16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae18:	2a47      	cmp	r2, #71	; 0x47
 800ae1a:	d1b4      	bne.n	800ad86 <_printf_float+0x102>
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1b2      	bne.n	800ad86 <_printf_float+0x102>
 800ae20:	3301      	adds	r3, #1
 800ae22:	e7af      	b.n	800ad84 <_printf_float+0x100>
 800ae24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae26:	2b66      	cmp	r3, #102	; 0x66
 800ae28:	d11b      	bne.n	800ae62 <_printf_float+0x1de>
 800ae2a:	6863      	ldr	r3, [r4, #4]
 800ae2c:	2900      	cmp	r1, #0
 800ae2e:	dd0d      	ble.n	800ae4c <_printf_float+0x1c8>
 800ae30:	6121      	str	r1, [r4, #16]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d102      	bne.n	800ae3c <_printf_float+0x1b8>
 800ae36:	6822      	ldr	r2, [r4, #0]
 800ae38:	07d2      	lsls	r2, r2, #31
 800ae3a:	d502      	bpl.n	800ae42 <_printf_float+0x1be>
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	1859      	adds	r1, r3, r1
 800ae40:	6121      	str	r1, [r4, #16]
 800ae42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae44:	65a3      	str	r3, [r4, #88]	; 0x58
 800ae46:	2300      	movs	r3, #0
 800ae48:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae4a:	e7d8      	b.n	800adfe <_printf_float+0x17a>
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d103      	bne.n	800ae58 <_printf_float+0x1d4>
 800ae50:	2201      	movs	r2, #1
 800ae52:	6821      	ldr	r1, [r4, #0]
 800ae54:	4211      	tst	r1, r2
 800ae56:	d000      	beq.n	800ae5a <_printf_float+0x1d6>
 800ae58:	1c9a      	adds	r2, r3, #2
 800ae5a:	6122      	str	r2, [r4, #16]
 800ae5c:	e7f1      	b.n	800ae42 <_printf_float+0x1be>
 800ae5e:	2367      	movs	r3, #103	; 0x67
 800ae60:	930a      	str	r3, [sp, #40]	; 0x28
 800ae62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae66:	4293      	cmp	r3, r2
 800ae68:	db06      	blt.n	800ae78 <_printf_float+0x1f4>
 800ae6a:	6822      	ldr	r2, [r4, #0]
 800ae6c:	6123      	str	r3, [r4, #16]
 800ae6e:	07d2      	lsls	r2, r2, #31
 800ae70:	d5e7      	bpl.n	800ae42 <_printf_float+0x1be>
 800ae72:	3301      	adds	r3, #1
 800ae74:	6123      	str	r3, [r4, #16]
 800ae76:	e7e4      	b.n	800ae42 <_printf_float+0x1be>
 800ae78:	2101      	movs	r1, #1
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	dc01      	bgt.n	800ae82 <_printf_float+0x1fe>
 800ae7e:	1849      	adds	r1, r1, r1
 800ae80:	1ac9      	subs	r1, r1, r3
 800ae82:	1852      	adds	r2, r2, r1
 800ae84:	e7e9      	b.n	800ae5a <_printf_float+0x1d6>
 800ae86:	6822      	ldr	r2, [r4, #0]
 800ae88:	0553      	lsls	r3, r2, #21
 800ae8a:	d407      	bmi.n	800ae9c <_printf_float+0x218>
 800ae8c:	6923      	ldr	r3, [r4, #16]
 800ae8e:	002a      	movs	r2, r5
 800ae90:	0038      	movs	r0, r7
 800ae92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae94:	47b0      	blx	r6
 800ae96:	1c43      	adds	r3, r0, #1
 800ae98:	d128      	bne.n	800aeec <_printf_float+0x268>
 800ae9a:	e751      	b.n	800ad40 <_printf_float+0xbc>
 800ae9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae9e:	2b65      	cmp	r3, #101	; 0x65
 800aea0:	d800      	bhi.n	800aea4 <_printf_float+0x220>
 800aea2:	e0e1      	b.n	800b068 <_printf_float+0x3e4>
 800aea4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800aea6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f7f5 fad6 	bl	800045c <__aeabi_dcmpeq>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d031      	beq.n	800af18 <_printf_float+0x294>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	0038      	movs	r0, r7
 800aeb8:	4a34      	ldr	r2, [pc, #208]	; (800af8c <_printf_float+0x308>)
 800aeba:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aebc:	47b0      	blx	r6
 800aebe:	1c43      	adds	r3, r0, #1
 800aec0:	d100      	bne.n	800aec4 <_printf_float+0x240>
 800aec2:	e73d      	b.n	800ad40 <_printf_float+0xbc>
 800aec4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aec6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aec8:	4293      	cmp	r3, r2
 800aeca:	db02      	blt.n	800aed2 <_printf_float+0x24e>
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	07db      	lsls	r3, r3, #31
 800aed0:	d50c      	bpl.n	800aeec <_printf_float+0x268>
 800aed2:	0038      	movs	r0, r7
 800aed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aed8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aeda:	47b0      	blx	r6
 800aedc:	2500      	movs	r5, #0
 800aede:	1c43      	adds	r3, r0, #1
 800aee0:	d100      	bne.n	800aee4 <_printf_float+0x260>
 800aee2:	e72d      	b.n	800ad40 <_printf_float+0xbc>
 800aee4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aee6:	3b01      	subs	r3, #1
 800aee8:	42ab      	cmp	r3, r5
 800aeea:	dc0a      	bgt.n	800af02 <_printf_float+0x27e>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	079b      	lsls	r3, r3, #30
 800aef0:	d500      	bpl.n	800aef4 <_printf_float+0x270>
 800aef2:	e106      	b.n	800b102 <_printf_float+0x47e>
 800aef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aef6:	68e0      	ldr	r0, [r4, #12]
 800aef8:	4298      	cmp	r0, r3
 800aefa:	db00      	blt.n	800aefe <_printf_float+0x27a>
 800aefc:	e722      	b.n	800ad44 <_printf_float+0xc0>
 800aefe:	0018      	movs	r0, r3
 800af00:	e720      	b.n	800ad44 <_printf_float+0xc0>
 800af02:	0022      	movs	r2, r4
 800af04:	2301      	movs	r3, #1
 800af06:	0038      	movs	r0, r7
 800af08:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af0a:	321a      	adds	r2, #26
 800af0c:	47b0      	blx	r6
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	d100      	bne.n	800af14 <_printf_float+0x290>
 800af12:	e715      	b.n	800ad40 <_printf_float+0xbc>
 800af14:	3501      	adds	r5, #1
 800af16:	e7e5      	b.n	800aee4 <_printf_float+0x260>
 800af18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	dc38      	bgt.n	800af90 <_printf_float+0x30c>
 800af1e:	2301      	movs	r3, #1
 800af20:	0038      	movs	r0, r7
 800af22:	4a1a      	ldr	r2, [pc, #104]	; (800af8c <_printf_float+0x308>)
 800af24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af26:	47b0      	blx	r6
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d100      	bne.n	800af2e <_printf_float+0x2aa>
 800af2c:	e708      	b.n	800ad40 <_printf_float+0xbc>
 800af2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af32:	4313      	orrs	r3, r2
 800af34:	d102      	bne.n	800af3c <_printf_float+0x2b8>
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	07db      	lsls	r3, r3, #31
 800af3a:	d5d7      	bpl.n	800aeec <_printf_float+0x268>
 800af3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af3e:	0038      	movs	r0, r7
 800af40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af44:	47b0      	blx	r6
 800af46:	1c43      	adds	r3, r0, #1
 800af48:	d100      	bne.n	800af4c <_printf_float+0x2c8>
 800af4a:	e6f9      	b.n	800ad40 <_printf_float+0xbc>
 800af4c:	2300      	movs	r3, #0
 800af4e:	930a      	str	r3, [sp, #40]	; 0x28
 800af50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af54:	425b      	negs	r3, r3
 800af56:	4293      	cmp	r3, r2
 800af58:	dc01      	bgt.n	800af5e <_printf_float+0x2da>
 800af5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af5c:	e797      	b.n	800ae8e <_printf_float+0x20a>
 800af5e:	0022      	movs	r2, r4
 800af60:	2301      	movs	r3, #1
 800af62:	0038      	movs	r0, r7
 800af64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af66:	321a      	adds	r2, #26
 800af68:	47b0      	blx	r6
 800af6a:	1c43      	adds	r3, r0, #1
 800af6c:	d100      	bne.n	800af70 <_printf_float+0x2ec>
 800af6e:	e6e7      	b.n	800ad40 <_printf_float+0xbc>
 800af70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af72:	3301      	adds	r3, #1
 800af74:	e7eb      	b.n	800af4e <_printf_float+0x2ca>
 800af76:	46c0      	nop			; (mov r8, r8)
 800af78:	7fefffff 	.word	0x7fefffff
 800af7c:	0800e4d0 	.word	0x0800e4d0
 800af80:	0800e4d4 	.word	0x0800e4d4
 800af84:	0800e4d8 	.word	0x0800e4d8
 800af88:	0800e4dc 	.word	0x0800e4dc
 800af8c:	0800e4e0 	.word	0x0800e4e0
 800af90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af94:	920a      	str	r2, [sp, #40]	; 0x28
 800af96:	429a      	cmp	r2, r3
 800af98:	dd00      	ble.n	800af9c <_printf_float+0x318>
 800af9a:	930a      	str	r3, [sp, #40]	; 0x28
 800af9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	dc3c      	bgt.n	800b01c <_printf_float+0x398>
 800afa2:	2300      	movs	r3, #0
 800afa4:	930d      	str	r3, [sp, #52]	; 0x34
 800afa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afa8:	43db      	mvns	r3, r3
 800afaa:	17db      	asrs	r3, r3, #31
 800afac:	930f      	str	r3, [sp, #60]	; 0x3c
 800afae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800afb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb6:	4013      	ands	r3, r2
 800afb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afbe:	4293      	cmp	r3, r2
 800afc0:	dc34      	bgt.n	800b02c <_printf_float+0x3a8>
 800afc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afc6:	4293      	cmp	r3, r2
 800afc8:	db3d      	blt.n	800b046 <_printf_float+0x3c2>
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	07db      	lsls	r3, r3, #31
 800afce:	d43a      	bmi.n	800b046 <_printf_float+0x3c2>
 800afd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afd4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	1a52      	subs	r2, r2, r1
 800afda:	920a      	str	r2, [sp, #40]	; 0x28
 800afdc:	429a      	cmp	r2, r3
 800afde:	dd00      	ble.n	800afe2 <_printf_float+0x35e>
 800afe0:	930a      	str	r3, [sp, #40]	; 0x28
 800afe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dc36      	bgt.n	800b056 <_printf_float+0x3d2>
 800afe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afea:	2500      	movs	r5, #0
 800afec:	43db      	mvns	r3, r3
 800afee:	17db      	asrs	r3, r3, #31
 800aff0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aff2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aff8:	1a9b      	subs	r3, r3, r2
 800affa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800affc:	400a      	ands	r2, r1
 800affe:	1a9b      	subs	r3, r3, r2
 800b000:	42ab      	cmp	r3, r5
 800b002:	dc00      	bgt.n	800b006 <_printf_float+0x382>
 800b004:	e772      	b.n	800aeec <_printf_float+0x268>
 800b006:	0022      	movs	r2, r4
 800b008:	2301      	movs	r3, #1
 800b00a:	0038      	movs	r0, r7
 800b00c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b00e:	321a      	adds	r2, #26
 800b010:	47b0      	blx	r6
 800b012:	1c43      	adds	r3, r0, #1
 800b014:	d100      	bne.n	800b018 <_printf_float+0x394>
 800b016:	e693      	b.n	800ad40 <_printf_float+0xbc>
 800b018:	3501      	adds	r5, #1
 800b01a:	e7ea      	b.n	800aff2 <_printf_float+0x36e>
 800b01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b01e:	002a      	movs	r2, r5
 800b020:	0038      	movs	r0, r7
 800b022:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b024:	47b0      	blx	r6
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	d1bb      	bne.n	800afa2 <_printf_float+0x31e>
 800b02a:	e689      	b.n	800ad40 <_printf_float+0xbc>
 800b02c:	0022      	movs	r2, r4
 800b02e:	2301      	movs	r3, #1
 800b030:	0038      	movs	r0, r7
 800b032:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b034:	321a      	adds	r2, #26
 800b036:	47b0      	blx	r6
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d100      	bne.n	800b03e <_printf_float+0x3ba>
 800b03c:	e680      	b.n	800ad40 <_printf_float+0xbc>
 800b03e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b040:	3301      	adds	r3, #1
 800b042:	930d      	str	r3, [sp, #52]	; 0x34
 800b044:	e7b3      	b.n	800afae <_printf_float+0x32a>
 800b046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b048:	0038      	movs	r0, r7
 800b04a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b04c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b04e:	47b0      	blx	r6
 800b050:	1c43      	adds	r3, r0, #1
 800b052:	d1bd      	bne.n	800afd0 <_printf_float+0x34c>
 800b054:	e674      	b.n	800ad40 <_printf_float+0xbc>
 800b056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b058:	0038      	movs	r0, r7
 800b05a:	18ea      	adds	r2, r5, r3
 800b05c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b060:	47b0      	blx	r6
 800b062:	1c43      	adds	r3, r0, #1
 800b064:	d1c0      	bne.n	800afe8 <_printf_float+0x364>
 800b066:	e66b      	b.n	800ad40 <_printf_float+0xbc>
 800b068:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	dc02      	bgt.n	800b074 <_printf_float+0x3f0>
 800b06e:	2301      	movs	r3, #1
 800b070:	421a      	tst	r2, r3
 800b072:	d034      	beq.n	800b0de <_printf_float+0x45a>
 800b074:	2301      	movs	r3, #1
 800b076:	002a      	movs	r2, r5
 800b078:	0038      	movs	r0, r7
 800b07a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b07c:	47b0      	blx	r6
 800b07e:	1c43      	adds	r3, r0, #1
 800b080:	d100      	bne.n	800b084 <_printf_float+0x400>
 800b082:	e65d      	b.n	800ad40 <_printf_float+0xbc>
 800b084:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b086:	0038      	movs	r0, r7
 800b088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b08a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b08c:	47b0      	blx	r6
 800b08e:	1c43      	adds	r3, r0, #1
 800b090:	d100      	bne.n	800b094 <_printf_float+0x410>
 800b092:	e655      	b.n	800ad40 <_printf_float+0xbc>
 800b094:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b096:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b098:	2200      	movs	r2, #0
 800b09a:	2300      	movs	r3, #0
 800b09c:	f7f5 f9de 	bl	800045c <__aeabi_dcmpeq>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d11a      	bne.n	800b0da <_printf_float+0x456>
 800b0a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0a6:	1c6a      	adds	r2, r5, #1
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	0038      	movs	r0, r7
 800b0ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0ae:	47b0      	blx	r6
 800b0b0:	1c43      	adds	r3, r0, #1
 800b0b2:	d10e      	bne.n	800b0d2 <_printf_float+0x44e>
 800b0b4:	e644      	b.n	800ad40 <_printf_float+0xbc>
 800b0b6:	0022      	movs	r2, r4
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	0038      	movs	r0, r7
 800b0bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0be:	321a      	adds	r2, #26
 800b0c0:	47b0      	blx	r6
 800b0c2:	1c43      	adds	r3, r0, #1
 800b0c4:	d100      	bne.n	800b0c8 <_printf_float+0x444>
 800b0c6:	e63b      	b.n	800ad40 <_printf_float+0xbc>
 800b0c8:	3501      	adds	r5, #1
 800b0ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	42ab      	cmp	r3, r5
 800b0d0:	dcf1      	bgt.n	800b0b6 <_printf_float+0x432>
 800b0d2:	0022      	movs	r2, r4
 800b0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0d6:	3250      	adds	r2, #80	; 0x50
 800b0d8:	e6da      	b.n	800ae90 <_printf_float+0x20c>
 800b0da:	2500      	movs	r5, #0
 800b0dc:	e7f5      	b.n	800b0ca <_printf_float+0x446>
 800b0de:	002a      	movs	r2, r5
 800b0e0:	e7e3      	b.n	800b0aa <_printf_float+0x426>
 800b0e2:	0022      	movs	r2, r4
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	0038      	movs	r0, r7
 800b0e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0ea:	3219      	adds	r2, #25
 800b0ec:	47b0      	blx	r6
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	d100      	bne.n	800b0f4 <_printf_float+0x470>
 800b0f2:	e625      	b.n	800ad40 <_printf_float+0xbc>
 800b0f4:	3501      	adds	r5, #1
 800b0f6:	68e3      	ldr	r3, [r4, #12]
 800b0f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b0fa:	1a9b      	subs	r3, r3, r2
 800b0fc:	42ab      	cmp	r3, r5
 800b0fe:	dcf0      	bgt.n	800b0e2 <_printf_float+0x45e>
 800b100:	e6f8      	b.n	800aef4 <_printf_float+0x270>
 800b102:	2500      	movs	r5, #0
 800b104:	e7f7      	b.n	800b0f6 <_printf_float+0x472>
 800b106:	46c0      	nop			; (mov r8, r8)

0800b108 <_printf_common>:
 800b108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b10a:	0015      	movs	r5, r2
 800b10c:	9301      	str	r3, [sp, #4]
 800b10e:	688a      	ldr	r2, [r1, #8]
 800b110:	690b      	ldr	r3, [r1, #16]
 800b112:	000c      	movs	r4, r1
 800b114:	9000      	str	r0, [sp, #0]
 800b116:	4293      	cmp	r3, r2
 800b118:	da00      	bge.n	800b11c <_printf_common+0x14>
 800b11a:	0013      	movs	r3, r2
 800b11c:	0022      	movs	r2, r4
 800b11e:	602b      	str	r3, [r5, #0]
 800b120:	3243      	adds	r2, #67	; 0x43
 800b122:	7812      	ldrb	r2, [r2, #0]
 800b124:	2a00      	cmp	r2, #0
 800b126:	d001      	beq.n	800b12c <_printf_common+0x24>
 800b128:	3301      	adds	r3, #1
 800b12a:	602b      	str	r3, [r5, #0]
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	069b      	lsls	r3, r3, #26
 800b130:	d502      	bpl.n	800b138 <_printf_common+0x30>
 800b132:	682b      	ldr	r3, [r5, #0]
 800b134:	3302      	adds	r3, #2
 800b136:	602b      	str	r3, [r5, #0]
 800b138:	6822      	ldr	r2, [r4, #0]
 800b13a:	2306      	movs	r3, #6
 800b13c:	0017      	movs	r7, r2
 800b13e:	401f      	ands	r7, r3
 800b140:	421a      	tst	r2, r3
 800b142:	d027      	beq.n	800b194 <_printf_common+0x8c>
 800b144:	0023      	movs	r3, r4
 800b146:	3343      	adds	r3, #67	; 0x43
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	1e5a      	subs	r2, r3, #1
 800b14c:	4193      	sbcs	r3, r2
 800b14e:	6822      	ldr	r2, [r4, #0]
 800b150:	0692      	lsls	r2, r2, #26
 800b152:	d430      	bmi.n	800b1b6 <_printf_common+0xae>
 800b154:	0022      	movs	r2, r4
 800b156:	9901      	ldr	r1, [sp, #4]
 800b158:	9800      	ldr	r0, [sp, #0]
 800b15a:	9e08      	ldr	r6, [sp, #32]
 800b15c:	3243      	adds	r2, #67	; 0x43
 800b15e:	47b0      	blx	r6
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	d025      	beq.n	800b1b0 <_printf_common+0xa8>
 800b164:	2306      	movs	r3, #6
 800b166:	6820      	ldr	r0, [r4, #0]
 800b168:	682a      	ldr	r2, [r5, #0]
 800b16a:	68e1      	ldr	r1, [r4, #12]
 800b16c:	2500      	movs	r5, #0
 800b16e:	4003      	ands	r3, r0
 800b170:	2b04      	cmp	r3, #4
 800b172:	d103      	bne.n	800b17c <_printf_common+0x74>
 800b174:	1a8d      	subs	r5, r1, r2
 800b176:	43eb      	mvns	r3, r5
 800b178:	17db      	asrs	r3, r3, #31
 800b17a:	401d      	ands	r5, r3
 800b17c:	68a3      	ldr	r3, [r4, #8]
 800b17e:	6922      	ldr	r2, [r4, #16]
 800b180:	4293      	cmp	r3, r2
 800b182:	dd01      	ble.n	800b188 <_printf_common+0x80>
 800b184:	1a9b      	subs	r3, r3, r2
 800b186:	18ed      	adds	r5, r5, r3
 800b188:	2700      	movs	r7, #0
 800b18a:	42bd      	cmp	r5, r7
 800b18c:	d120      	bne.n	800b1d0 <_printf_common+0xc8>
 800b18e:	2000      	movs	r0, #0
 800b190:	e010      	b.n	800b1b4 <_printf_common+0xac>
 800b192:	3701      	adds	r7, #1
 800b194:	68e3      	ldr	r3, [r4, #12]
 800b196:	682a      	ldr	r2, [r5, #0]
 800b198:	1a9b      	subs	r3, r3, r2
 800b19a:	42bb      	cmp	r3, r7
 800b19c:	ddd2      	ble.n	800b144 <_printf_common+0x3c>
 800b19e:	0022      	movs	r2, r4
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	9901      	ldr	r1, [sp, #4]
 800b1a4:	9800      	ldr	r0, [sp, #0]
 800b1a6:	9e08      	ldr	r6, [sp, #32]
 800b1a8:	3219      	adds	r2, #25
 800b1aa:	47b0      	blx	r6
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d1f0      	bne.n	800b192 <_printf_common+0x8a>
 800b1b0:	2001      	movs	r0, #1
 800b1b2:	4240      	negs	r0, r0
 800b1b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1b6:	2030      	movs	r0, #48	; 0x30
 800b1b8:	18e1      	adds	r1, r4, r3
 800b1ba:	3143      	adds	r1, #67	; 0x43
 800b1bc:	7008      	strb	r0, [r1, #0]
 800b1be:	0021      	movs	r1, r4
 800b1c0:	1c5a      	adds	r2, r3, #1
 800b1c2:	3145      	adds	r1, #69	; 0x45
 800b1c4:	7809      	ldrb	r1, [r1, #0]
 800b1c6:	18a2      	adds	r2, r4, r2
 800b1c8:	3243      	adds	r2, #67	; 0x43
 800b1ca:	3302      	adds	r3, #2
 800b1cc:	7011      	strb	r1, [r2, #0]
 800b1ce:	e7c1      	b.n	800b154 <_printf_common+0x4c>
 800b1d0:	0022      	movs	r2, r4
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	9901      	ldr	r1, [sp, #4]
 800b1d6:	9800      	ldr	r0, [sp, #0]
 800b1d8:	9e08      	ldr	r6, [sp, #32]
 800b1da:	321a      	adds	r2, #26
 800b1dc:	47b0      	blx	r6
 800b1de:	1c43      	adds	r3, r0, #1
 800b1e0:	d0e6      	beq.n	800b1b0 <_printf_common+0xa8>
 800b1e2:	3701      	adds	r7, #1
 800b1e4:	e7d1      	b.n	800b18a <_printf_common+0x82>
	...

0800b1e8 <_printf_i>:
 800b1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ea:	b08b      	sub	sp, #44	; 0x2c
 800b1ec:	9206      	str	r2, [sp, #24]
 800b1ee:	000a      	movs	r2, r1
 800b1f0:	3243      	adds	r2, #67	; 0x43
 800b1f2:	9307      	str	r3, [sp, #28]
 800b1f4:	9005      	str	r0, [sp, #20]
 800b1f6:	9204      	str	r2, [sp, #16]
 800b1f8:	7e0a      	ldrb	r2, [r1, #24]
 800b1fa:	000c      	movs	r4, r1
 800b1fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1fe:	2a78      	cmp	r2, #120	; 0x78
 800b200:	d807      	bhi.n	800b212 <_printf_i+0x2a>
 800b202:	2a62      	cmp	r2, #98	; 0x62
 800b204:	d809      	bhi.n	800b21a <_printf_i+0x32>
 800b206:	2a00      	cmp	r2, #0
 800b208:	d100      	bne.n	800b20c <_printf_i+0x24>
 800b20a:	e0c1      	b.n	800b390 <_printf_i+0x1a8>
 800b20c:	2a58      	cmp	r2, #88	; 0x58
 800b20e:	d100      	bne.n	800b212 <_printf_i+0x2a>
 800b210:	e08c      	b.n	800b32c <_printf_i+0x144>
 800b212:	0026      	movs	r6, r4
 800b214:	3642      	adds	r6, #66	; 0x42
 800b216:	7032      	strb	r2, [r6, #0]
 800b218:	e022      	b.n	800b260 <_printf_i+0x78>
 800b21a:	0010      	movs	r0, r2
 800b21c:	3863      	subs	r0, #99	; 0x63
 800b21e:	2815      	cmp	r0, #21
 800b220:	d8f7      	bhi.n	800b212 <_printf_i+0x2a>
 800b222:	f7f4 ff8b 	bl	800013c <__gnu_thumb1_case_shi>
 800b226:	0016      	.short	0x0016
 800b228:	fff6001f 	.word	0xfff6001f
 800b22c:	fff6fff6 	.word	0xfff6fff6
 800b230:	001ffff6 	.word	0x001ffff6
 800b234:	fff6fff6 	.word	0xfff6fff6
 800b238:	fff6fff6 	.word	0xfff6fff6
 800b23c:	003600a8 	.word	0x003600a8
 800b240:	fff6009a 	.word	0xfff6009a
 800b244:	00b9fff6 	.word	0x00b9fff6
 800b248:	0036fff6 	.word	0x0036fff6
 800b24c:	fff6fff6 	.word	0xfff6fff6
 800b250:	009e      	.short	0x009e
 800b252:	0026      	movs	r6, r4
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	3642      	adds	r6, #66	; 0x42
 800b258:	1d11      	adds	r1, r2, #4
 800b25a:	6019      	str	r1, [r3, #0]
 800b25c:	6813      	ldr	r3, [r2, #0]
 800b25e:	7033      	strb	r3, [r6, #0]
 800b260:	2301      	movs	r3, #1
 800b262:	e0a7      	b.n	800b3b4 <_printf_i+0x1cc>
 800b264:	6808      	ldr	r0, [r1, #0]
 800b266:	6819      	ldr	r1, [r3, #0]
 800b268:	1d0a      	adds	r2, r1, #4
 800b26a:	0605      	lsls	r5, r0, #24
 800b26c:	d50b      	bpl.n	800b286 <_printf_i+0x9e>
 800b26e:	680d      	ldr	r5, [r1, #0]
 800b270:	601a      	str	r2, [r3, #0]
 800b272:	2d00      	cmp	r5, #0
 800b274:	da03      	bge.n	800b27e <_printf_i+0x96>
 800b276:	232d      	movs	r3, #45	; 0x2d
 800b278:	9a04      	ldr	r2, [sp, #16]
 800b27a:	426d      	negs	r5, r5
 800b27c:	7013      	strb	r3, [r2, #0]
 800b27e:	4b61      	ldr	r3, [pc, #388]	; (800b404 <_printf_i+0x21c>)
 800b280:	270a      	movs	r7, #10
 800b282:	9303      	str	r3, [sp, #12]
 800b284:	e01b      	b.n	800b2be <_printf_i+0xd6>
 800b286:	680d      	ldr	r5, [r1, #0]
 800b288:	601a      	str	r2, [r3, #0]
 800b28a:	0641      	lsls	r1, r0, #25
 800b28c:	d5f1      	bpl.n	800b272 <_printf_i+0x8a>
 800b28e:	b22d      	sxth	r5, r5
 800b290:	e7ef      	b.n	800b272 <_printf_i+0x8a>
 800b292:	680d      	ldr	r5, [r1, #0]
 800b294:	6819      	ldr	r1, [r3, #0]
 800b296:	1d08      	adds	r0, r1, #4
 800b298:	6018      	str	r0, [r3, #0]
 800b29a:	062e      	lsls	r6, r5, #24
 800b29c:	d501      	bpl.n	800b2a2 <_printf_i+0xba>
 800b29e:	680d      	ldr	r5, [r1, #0]
 800b2a0:	e003      	b.n	800b2aa <_printf_i+0xc2>
 800b2a2:	066d      	lsls	r5, r5, #25
 800b2a4:	d5fb      	bpl.n	800b29e <_printf_i+0xb6>
 800b2a6:	680d      	ldr	r5, [r1, #0]
 800b2a8:	b2ad      	uxth	r5, r5
 800b2aa:	4b56      	ldr	r3, [pc, #344]	; (800b404 <_printf_i+0x21c>)
 800b2ac:	2708      	movs	r7, #8
 800b2ae:	9303      	str	r3, [sp, #12]
 800b2b0:	2a6f      	cmp	r2, #111	; 0x6f
 800b2b2:	d000      	beq.n	800b2b6 <_printf_i+0xce>
 800b2b4:	3702      	adds	r7, #2
 800b2b6:	0023      	movs	r3, r4
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	3343      	adds	r3, #67	; 0x43
 800b2bc:	701a      	strb	r2, [r3, #0]
 800b2be:	6863      	ldr	r3, [r4, #4]
 800b2c0:	60a3      	str	r3, [r4, #8]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	db03      	blt.n	800b2ce <_printf_i+0xe6>
 800b2c6:	2204      	movs	r2, #4
 800b2c8:	6821      	ldr	r1, [r4, #0]
 800b2ca:	4391      	bics	r1, r2
 800b2cc:	6021      	str	r1, [r4, #0]
 800b2ce:	2d00      	cmp	r5, #0
 800b2d0:	d102      	bne.n	800b2d8 <_printf_i+0xf0>
 800b2d2:	9e04      	ldr	r6, [sp, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00c      	beq.n	800b2f2 <_printf_i+0x10a>
 800b2d8:	9e04      	ldr	r6, [sp, #16]
 800b2da:	0028      	movs	r0, r5
 800b2dc:	0039      	movs	r1, r7
 800b2de:	f7f4 ffbd 	bl	800025c <__aeabi_uidivmod>
 800b2e2:	9b03      	ldr	r3, [sp, #12]
 800b2e4:	3e01      	subs	r6, #1
 800b2e6:	5c5b      	ldrb	r3, [r3, r1]
 800b2e8:	7033      	strb	r3, [r6, #0]
 800b2ea:	002b      	movs	r3, r5
 800b2ec:	0005      	movs	r5, r0
 800b2ee:	429f      	cmp	r7, r3
 800b2f0:	d9f3      	bls.n	800b2da <_printf_i+0xf2>
 800b2f2:	2f08      	cmp	r7, #8
 800b2f4:	d109      	bne.n	800b30a <_printf_i+0x122>
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	07db      	lsls	r3, r3, #31
 800b2fa:	d506      	bpl.n	800b30a <_printf_i+0x122>
 800b2fc:	6863      	ldr	r3, [r4, #4]
 800b2fe:	6922      	ldr	r2, [r4, #16]
 800b300:	4293      	cmp	r3, r2
 800b302:	dc02      	bgt.n	800b30a <_printf_i+0x122>
 800b304:	2330      	movs	r3, #48	; 0x30
 800b306:	3e01      	subs	r6, #1
 800b308:	7033      	strb	r3, [r6, #0]
 800b30a:	9b04      	ldr	r3, [sp, #16]
 800b30c:	1b9b      	subs	r3, r3, r6
 800b30e:	6123      	str	r3, [r4, #16]
 800b310:	9b07      	ldr	r3, [sp, #28]
 800b312:	0021      	movs	r1, r4
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	9805      	ldr	r0, [sp, #20]
 800b318:	9b06      	ldr	r3, [sp, #24]
 800b31a:	aa09      	add	r2, sp, #36	; 0x24
 800b31c:	f7ff fef4 	bl	800b108 <_printf_common>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d14c      	bne.n	800b3be <_printf_i+0x1d6>
 800b324:	2001      	movs	r0, #1
 800b326:	4240      	negs	r0, r0
 800b328:	b00b      	add	sp, #44	; 0x2c
 800b32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b32c:	3145      	adds	r1, #69	; 0x45
 800b32e:	700a      	strb	r2, [r1, #0]
 800b330:	4a34      	ldr	r2, [pc, #208]	; (800b404 <_printf_i+0x21c>)
 800b332:	9203      	str	r2, [sp, #12]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	6821      	ldr	r1, [r4, #0]
 800b338:	ca20      	ldmia	r2!, {r5}
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	0608      	lsls	r0, r1, #24
 800b33e:	d516      	bpl.n	800b36e <_printf_i+0x186>
 800b340:	07cb      	lsls	r3, r1, #31
 800b342:	d502      	bpl.n	800b34a <_printf_i+0x162>
 800b344:	2320      	movs	r3, #32
 800b346:	4319      	orrs	r1, r3
 800b348:	6021      	str	r1, [r4, #0]
 800b34a:	2710      	movs	r7, #16
 800b34c:	2d00      	cmp	r5, #0
 800b34e:	d1b2      	bne.n	800b2b6 <_printf_i+0xce>
 800b350:	2320      	movs	r3, #32
 800b352:	6822      	ldr	r2, [r4, #0]
 800b354:	439a      	bics	r2, r3
 800b356:	6022      	str	r2, [r4, #0]
 800b358:	e7ad      	b.n	800b2b6 <_printf_i+0xce>
 800b35a:	2220      	movs	r2, #32
 800b35c:	6809      	ldr	r1, [r1, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	6022      	str	r2, [r4, #0]
 800b362:	0022      	movs	r2, r4
 800b364:	2178      	movs	r1, #120	; 0x78
 800b366:	3245      	adds	r2, #69	; 0x45
 800b368:	7011      	strb	r1, [r2, #0]
 800b36a:	4a27      	ldr	r2, [pc, #156]	; (800b408 <_printf_i+0x220>)
 800b36c:	e7e1      	b.n	800b332 <_printf_i+0x14a>
 800b36e:	0648      	lsls	r0, r1, #25
 800b370:	d5e6      	bpl.n	800b340 <_printf_i+0x158>
 800b372:	b2ad      	uxth	r5, r5
 800b374:	e7e4      	b.n	800b340 <_printf_i+0x158>
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	680d      	ldr	r5, [r1, #0]
 800b37a:	1d10      	adds	r0, r2, #4
 800b37c:	6949      	ldr	r1, [r1, #20]
 800b37e:	6018      	str	r0, [r3, #0]
 800b380:	6813      	ldr	r3, [r2, #0]
 800b382:	062e      	lsls	r6, r5, #24
 800b384:	d501      	bpl.n	800b38a <_printf_i+0x1a2>
 800b386:	6019      	str	r1, [r3, #0]
 800b388:	e002      	b.n	800b390 <_printf_i+0x1a8>
 800b38a:	066d      	lsls	r5, r5, #25
 800b38c:	d5fb      	bpl.n	800b386 <_printf_i+0x19e>
 800b38e:	8019      	strh	r1, [r3, #0]
 800b390:	2300      	movs	r3, #0
 800b392:	9e04      	ldr	r6, [sp, #16]
 800b394:	6123      	str	r3, [r4, #16]
 800b396:	e7bb      	b.n	800b310 <_printf_i+0x128>
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	1d11      	adds	r1, r2, #4
 800b39c:	6019      	str	r1, [r3, #0]
 800b39e:	6816      	ldr	r6, [r2, #0]
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	0030      	movs	r0, r6
 800b3a4:	6862      	ldr	r2, [r4, #4]
 800b3a6:	f001 fb21 	bl	800c9ec <memchr>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	d001      	beq.n	800b3b2 <_printf_i+0x1ca>
 800b3ae:	1b80      	subs	r0, r0, r6
 800b3b0:	6060      	str	r0, [r4, #4]
 800b3b2:	6863      	ldr	r3, [r4, #4]
 800b3b4:	6123      	str	r3, [r4, #16]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	9a04      	ldr	r2, [sp, #16]
 800b3ba:	7013      	strb	r3, [r2, #0]
 800b3bc:	e7a8      	b.n	800b310 <_printf_i+0x128>
 800b3be:	6923      	ldr	r3, [r4, #16]
 800b3c0:	0032      	movs	r2, r6
 800b3c2:	9906      	ldr	r1, [sp, #24]
 800b3c4:	9805      	ldr	r0, [sp, #20]
 800b3c6:	9d07      	ldr	r5, [sp, #28]
 800b3c8:	47a8      	blx	r5
 800b3ca:	1c43      	adds	r3, r0, #1
 800b3cc:	d0aa      	beq.n	800b324 <_printf_i+0x13c>
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	079b      	lsls	r3, r3, #30
 800b3d2:	d415      	bmi.n	800b400 <_printf_i+0x218>
 800b3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d6:	68e0      	ldr	r0, [r4, #12]
 800b3d8:	4298      	cmp	r0, r3
 800b3da:	daa5      	bge.n	800b328 <_printf_i+0x140>
 800b3dc:	0018      	movs	r0, r3
 800b3de:	e7a3      	b.n	800b328 <_printf_i+0x140>
 800b3e0:	0022      	movs	r2, r4
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	9906      	ldr	r1, [sp, #24]
 800b3e6:	9805      	ldr	r0, [sp, #20]
 800b3e8:	9e07      	ldr	r6, [sp, #28]
 800b3ea:	3219      	adds	r2, #25
 800b3ec:	47b0      	blx	r6
 800b3ee:	1c43      	adds	r3, r0, #1
 800b3f0:	d098      	beq.n	800b324 <_printf_i+0x13c>
 800b3f2:	3501      	adds	r5, #1
 800b3f4:	68e3      	ldr	r3, [r4, #12]
 800b3f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3f8:	1a9b      	subs	r3, r3, r2
 800b3fa:	42ab      	cmp	r3, r5
 800b3fc:	dcf0      	bgt.n	800b3e0 <_printf_i+0x1f8>
 800b3fe:	e7e9      	b.n	800b3d4 <_printf_i+0x1ec>
 800b400:	2500      	movs	r5, #0
 800b402:	e7f7      	b.n	800b3f4 <_printf_i+0x20c>
 800b404:	0800e4e2 	.word	0x0800e4e2
 800b408:	0800e4f3 	.word	0x0800e4f3

0800b40c <iprintf>:
 800b40c:	b40f      	push	{r0, r1, r2, r3}
 800b40e:	4b0b      	ldr	r3, [pc, #44]	; (800b43c <iprintf+0x30>)
 800b410:	b513      	push	{r0, r1, r4, lr}
 800b412:	681c      	ldr	r4, [r3, #0]
 800b414:	2c00      	cmp	r4, #0
 800b416:	d005      	beq.n	800b424 <iprintf+0x18>
 800b418:	69a3      	ldr	r3, [r4, #24]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d102      	bne.n	800b424 <iprintf+0x18>
 800b41e:	0020      	movs	r0, r4
 800b420:	f001 f9c6 	bl	800c7b0 <__sinit>
 800b424:	ab05      	add	r3, sp, #20
 800b426:	0020      	movs	r0, r4
 800b428:	9a04      	ldr	r2, [sp, #16]
 800b42a:	68a1      	ldr	r1, [r4, #8]
 800b42c:	9301      	str	r3, [sp, #4]
 800b42e:	f001 ffbb 	bl	800d3a8 <_vfiprintf_r>
 800b432:	bc16      	pop	{r1, r2, r4}
 800b434:	bc08      	pop	{r3}
 800b436:	b004      	add	sp, #16
 800b438:	4718      	bx	r3
 800b43a:	46c0      	nop			; (mov r8, r8)
 800b43c:	200000a0 	.word	0x200000a0

0800b440 <_puts_r>:
 800b440:	b570      	push	{r4, r5, r6, lr}
 800b442:	0005      	movs	r5, r0
 800b444:	000e      	movs	r6, r1
 800b446:	2800      	cmp	r0, #0
 800b448:	d004      	beq.n	800b454 <_puts_r+0x14>
 800b44a:	6983      	ldr	r3, [r0, #24]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <_puts_r+0x14>
 800b450:	f001 f9ae 	bl	800c7b0 <__sinit>
 800b454:	69ab      	ldr	r3, [r5, #24]
 800b456:	68ac      	ldr	r4, [r5, #8]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d102      	bne.n	800b462 <_puts_r+0x22>
 800b45c:	0028      	movs	r0, r5
 800b45e:	f001 f9a7 	bl	800c7b0 <__sinit>
 800b462:	4b2d      	ldr	r3, [pc, #180]	; (800b518 <_puts_r+0xd8>)
 800b464:	429c      	cmp	r4, r3
 800b466:	d122      	bne.n	800b4ae <_puts_r+0x6e>
 800b468:	686c      	ldr	r4, [r5, #4]
 800b46a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b46c:	07db      	lsls	r3, r3, #31
 800b46e:	d405      	bmi.n	800b47c <_puts_r+0x3c>
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	059b      	lsls	r3, r3, #22
 800b474:	d402      	bmi.n	800b47c <_puts_r+0x3c>
 800b476:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b478:	f001 fa3f 	bl	800c8fa <__retarget_lock_acquire_recursive>
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	071b      	lsls	r3, r3, #28
 800b480:	d502      	bpl.n	800b488 <_puts_r+0x48>
 800b482:	6923      	ldr	r3, [r4, #16]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d129      	bne.n	800b4dc <_puts_r+0x9c>
 800b488:	0021      	movs	r1, r4
 800b48a:	0028      	movs	r0, r5
 800b48c:	f000 f944 	bl	800b718 <__swsetup_r>
 800b490:	2800      	cmp	r0, #0
 800b492:	d023      	beq.n	800b4dc <_puts_r+0x9c>
 800b494:	2501      	movs	r5, #1
 800b496:	426d      	negs	r5, r5
 800b498:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b49a:	07db      	lsls	r3, r3, #31
 800b49c:	d405      	bmi.n	800b4aa <_puts_r+0x6a>
 800b49e:	89a3      	ldrh	r3, [r4, #12]
 800b4a0:	059b      	lsls	r3, r3, #22
 800b4a2:	d402      	bmi.n	800b4aa <_puts_r+0x6a>
 800b4a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4a6:	f001 fa29 	bl	800c8fc <__retarget_lock_release_recursive>
 800b4aa:	0028      	movs	r0, r5
 800b4ac:	bd70      	pop	{r4, r5, r6, pc}
 800b4ae:	4b1b      	ldr	r3, [pc, #108]	; (800b51c <_puts_r+0xdc>)
 800b4b0:	429c      	cmp	r4, r3
 800b4b2:	d101      	bne.n	800b4b8 <_puts_r+0x78>
 800b4b4:	68ac      	ldr	r4, [r5, #8]
 800b4b6:	e7d8      	b.n	800b46a <_puts_r+0x2a>
 800b4b8:	4b19      	ldr	r3, [pc, #100]	; (800b520 <_puts_r+0xe0>)
 800b4ba:	429c      	cmp	r4, r3
 800b4bc:	d1d5      	bne.n	800b46a <_puts_r+0x2a>
 800b4be:	68ec      	ldr	r4, [r5, #12]
 800b4c0:	e7d3      	b.n	800b46a <_puts_r+0x2a>
 800b4c2:	3601      	adds	r6, #1
 800b4c4:	60a3      	str	r3, [r4, #8]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	da04      	bge.n	800b4d4 <_puts_r+0x94>
 800b4ca:	69a2      	ldr	r2, [r4, #24]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	dc16      	bgt.n	800b4fe <_puts_r+0xbe>
 800b4d0:	290a      	cmp	r1, #10
 800b4d2:	d014      	beq.n	800b4fe <_puts_r+0xbe>
 800b4d4:	6823      	ldr	r3, [r4, #0]
 800b4d6:	1c5a      	adds	r2, r3, #1
 800b4d8:	6022      	str	r2, [r4, #0]
 800b4da:	7019      	strb	r1, [r3, #0]
 800b4dc:	68a3      	ldr	r3, [r4, #8]
 800b4de:	7831      	ldrb	r1, [r6, #0]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	2900      	cmp	r1, #0
 800b4e4:	d1ed      	bne.n	800b4c2 <_puts_r+0x82>
 800b4e6:	60a3      	str	r3, [r4, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	da0f      	bge.n	800b50c <_puts_r+0xcc>
 800b4ec:	0028      	movs	r0, r5
 800b4ee:	0022      	movs	r2, r4
 800b4f0:	310a      	adds	r1, #10
 800b4f2:	f000 f8bb 	bl	800b66c <__swbuf_r>
 800b4f6:	250a      	movs	r5, #10
 800b4f8:	1c43      	adds	r3, r0, #1
 800b4fa:	d1cd      	bne.n	800b498 <_puts_r+0x58>
 800b4fc:	e7ca      	b.n	800b494 <_puts_r+0x54>
 800b4fe:	0022      	movs	r2, r4
 800b500:	0028      	movs	r0, r5
 800b502:	f000 f8b3 	bl	800b66c <__swbuf_r>
 800b506:	1c43      	adds	r3, r0, #1
 800b508:	d1e8      	bne.n	800b4dc <_puts_r+0x9c>
 800b50a:	e7c3      	b.n	800b494 <_puts_r+0x54>
 800b50c:	250a      	movs	r5, #10
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	6022      	str	r2, [r4, #0]
 800b514:	701d      	strb	r5, [r3, #0]
 800b516:	e7bf      	b.n	800b498 <_puts_r+0x58>
 800b518:	0800e6b8 	.word	0x0800e6b8
 800b51c:	0800e6d8 	.word	0x0800e6d8
 800b520:	0800e698 	.word	0x0800e698

0800b524 <puts>:
 800b524:	b510      	push	{r4, lr}
 800b526:	4b03      	ldr	r3, [pc, #12]	; (800b534 <puts+0x10>)
 800b528:	0001      	movs	r1, r0
 800b52a:	6818      	ldr	r0, [r3, #0]
 800b52c:	f7ff ff88 	bl	800b440 <_puts_r>
 800b530:	bd10      	pop	{r4, pc}
 800b532:	46c0      	nop			; (mov r8, r8)
 800b534:	200000a0 	.word	0x200000a0

0800b538 <_strtol_l.constprop.0>:
 800b538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b53a:	b087      	sub	sp, #28
 800b53c:	001e      	movs	r6, r3
 800b53e:	9005      	str	r0, [sp, #20]
 800b540:	9101      	str	r1, [sp, #4]
 800b542:	9202      	str	r2, [sp, #8]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d045      	beq.n	800b5d4 <_strtol_l.constprop.0+0x9c>
 800b548:	000b      	movs	r3, r1
 800b54a:	2e24      	cmp	r6, #36	; 0x24
 800b54c:	d842      	bhi.n	800b5d4 <_strtol_l.constprop.0+0x9c>
 800b54e:	4a3f      	ldr	r2, [pc, #252]	; (800b64c <_strtol_l.constprop.0+0x114>)
 800b550:	2108      	movs	r1, #8
 800b552:	4694      	mov	ip, r2
 800b554:	001a      	movs	r2, r3
 800b556:	4660      	mov	r0, ip
 800b558:	7814      	ldrb	r4, [r2, #0]
 800b55a:	3301      	adds	r3, #1
 800b55c:	5d00      	ldrb	r0, [r0, r4]
 800b55e:	001d      	movs	r5, r3
 800b560:	0007      	movs	r7, r0
 800b562:	400f      	ands	r7, r1
 800b564:	4208      	tst	r0, r1
 800b566:	d1f5      	bne.n	800b554 <_strtol_l.constprop.0+0x1c>
 800b568:	2c2d      	cmp	r4, #45	; 0x2d
 800b56a:	d13a      	bne.n	800b5e2 <_strtol_l.constprop.0+0xaa>
 800b56c:	2701      	movs	r7, #1
 800b56e:	781c      	ldrb	r4, [r3, #0]
 800b570:	1c95      	adds	r5, r2, #2
 800b572:	2e00      	cmp	r6, #0
 800b574:	d065      	beq.n	800b642 <_strtol_l.constprop.0+0x10a>
 800b576:	2e10      	cmp	r6, #16
 800b578:	d109      	bne.n	800b58e <_strtol_l.constprop.0+0x56>
 800b57a:	2c30      	cmp	r4, #48	; 0x30
 800b57c:	d107      	bne.n	800b58e <_strtol_l.constprop.0+0x56>
 800b57e:	2220      	movs	r2, #32
 800b580:	782b      	ldrb	r3, [r5, #0]
 800b582:	4393      	bics	r3, r2
 800b584:	2b58      	cmp	r3, #88	; 0x58
 800b586:	d157      	bne.n	800b638 <_strtol_l.constprop.0+0x100>
 800b588:	2610      	movs	r6, #16
 800b58a:	786c      	ldrb	r4, [r5, #1]
 800b58c:	3502      	adds	r5, #2
 800b58e:	4b30      	ldr	r3, [pc, #192]	; (800b650 <_strtol_l.constprop.0+0x118>)
 800b590:	0031      	movs	r1, r6
 800b592:	18fb      	adds	r3, r7, r3
 800b594:	0018      	movs	r0, r3
 800b596:	9303      	str	r3, [sp, #12]
 800b598:	f7f4 fe60 	bl	800025c <__aeabi_uidivmod>
 800b59c:	2300      	movs	r3, #0
 800b59e:	2201      	movs	r2, #1
 800b5a0:	4684      	mov	ip, r0
 800b5a2:	0018      	movs	r0, r3
 800b5a4:	9104      	str	r1, [sp, #16]
 800b5a6:	4252      	negs	r2, r2
 800b5a8:	0021      	movs	r1, r4
 800b5aa:	3930      	subs	r1, #48	; 0x30
 800b5ac:	2909      	cmp	r1, #9
 800b5ae:	d81d      	bhi.n	800b5ec <_strtol_l.constprop.0+0xb4>
 800b5b0:	000c      	movs	r4, r1
 800b5b2:	42a6      	cmp	r6, r4
 800b5b4:	dd28      	ble.n	800b608 <_strtol_l.constprop.0+0xd0>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	db24      	blt.n	800b604 <_strtol_l.constprop.0+0xcc>
 800b5ba:	0013      	movs	r3, r2
 800b5bc:	4584      	cmp	ip, r0
 800b5be:	d306      	bcc.n	800b5ce <_strtol_l.constprop.0+0x96>
 800b5c0:	d102      	bne.n	800b5c8 <_strtol_l.constprop.0+0x90>
 800b5c2:	9904      	ldr	r1, [sp, #16]
 800b5c4:	42a1      	cmp	r1, r4
 800b5c6:	db02      	blt.n	800b5ce <_strtol_l.constprop.0+0x96>
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	4370      	muls	r0, r6
 800b5cc:	1820      	adds	r0, r4, r0
 800b5ce:	782c      	ldrb	r4, [r5, #0]
 800b5d0:	3501      	adds	r5, #1
 800b5d2:	e7e9      	b.n	800b5a8 <_strtol_l.constprop.0+0x70>
 800b5d4:	f7ff fa70 	bl	800aab8 <__errno>
 800b5d8:	2316      	movs	r3, #22
 800b5da:	6003      	str	r3, [r0, #0]
 800b5dc:	2000      	movs	r0, #0
 800b5de:	b007      	add	sp, #28
 800b5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5e2:	2c2b      	cmp	r4, #43	; 0x2b
 800b5e4:	d1c5      	bne.n	800b572 <_strtol_l.constprop.0+0x3a>
 800b5e6:	781c      	ldrb	r4, [r3, #0]
 800b5e8:	1c95      	adds	r5, r2, #2
 800b5ea:	e7c2      	b.n	800b572 <_strtol_l.constprop.0+0x3a>
 800b5ec:	0021      	movs	r1, r4
 800b5ee:	3941      	subs	r1, #65	; 0x41
 800b5f0:	2919      	cmp	r1, #25
 800b5f2:	d801      	bhi.n	800b5f8 <_strtol_l.constprop.0+0xc0>
 800b5f4:	3c37      	subs	r4, #55	; 0x37
 800b5f6:	e7dc      	b.n	800b5b2 <_strtol_l.constprop.0+0x7a>
 800b5f8:	0021      	movs	r1, r4
 800b5fa:	3961      	subs	r1, #97	; 0x61
 800b5fc:	2919      	cmp	r1, #25
 800b5fe:	d803      	bhi.n	800b608 <_strtol_l.constprop.0+0xd0>
 800b600:	3c57      	subs	r4, #87	; 0x57
 800b602:	e7d6      	b.n	800b5b2 <_strtol_l.constprop.0+0x7a>
 800b604:	0013      	movs	r3, r2
 800b606:	e7e2      	b.n	800b5ce <_strtol_l.constprop.0+0x96>
 800b608:	2b00      	cmp	r3, #0
 800b60a:	da09      	bge.n	800b620 <_strtol_l.constprop.0+0xe8>
 800b60c:	2322      	movs	r3, #34	; 0x22
 800b60e:	9a05      	ldr	r2, [sp, #20]
 800b610:	9803      	ldr	r0, [sp, #12]
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	9b02      	ldr	r3, [sp, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d0e1      	beq.n	800b5de <_strtol_l.constprop.0+0xa6>
 800b61a:	1e6b      	subs	r3, r5, #1
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	e007      	b.n	800b630 <_strtol_l.constprop.0+0xf8>
 800b620:	2f00      	cmp	r7, #0
 800b622:	d000      	beq.n	800b626 <_strtol_l.constprop.0+0xee>
 800b624:	4240      	negs	r0, r0
 800b626:	9a02      	ldr	r2, [sp, #8]
 800b628:	2a00      	cmp	r2, #0
 800b62a:	d0d8      	beq.n	800b5de <_strtol_l.constprop.0+0xa6>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1f4      	bne.n	800b61a <_strtol_l.constprop.0+0xe2>
 800b630:	9b02      	ldr	r3, [sp, #8]
 800b632:	9a01      	ldr	r2, [sp, #4]
 800b634:	601a      	str	r2, [r3, #0]
 800b636:	e7d2      	b.n	800b5de <_strtol_l.constprop.0+0xa6>
 800b638:	2430      	movs	r4, #48	; 0x30
 800b63a:	2e00      	cmp	r6, #0
 800b63c:	d1a7      	bne.n	800b58e <_strtol_l.constprop.0+0x56>
 800b63e:	3608      	adds	r6, #8
 800b640:	e7a5      	b.n	800b58e <_strtol_l.constprop.0+0x56>
 800b642:	2c30      	cmp	r4, #48	; 0x30
 800b644:	d09b      	beq.n	800b57e <_strtol_l.constprop.0+0x46>
 800b646:	260a      	movs	r6, #10
 800b648:	e7a1      	b.n	800b58e <_strtol_l.constprop.0+0x56>
 800b64a:	46c0      	nop			; (mov r8, r8)
 800b64c:	0800e505 	.word	0x0800e505
 800b650:	7fffffff 	.word	0x7fffffff

0800b654 <strtol>:
 800b654:	b510      	push	{r4, lr}
 800b656:	0013      	movs	r3, r2
 800b658:	000a      	movs	r2, r1
 800b65a:	0001      	movs	r1, r0
 800b65c:	4802      	ldr	r0, [pc, #8]	; (800b668 <strtol+0x14>)
 800b65e:	6800      	ldr	r0, [r0, #0]
 800b660:	f7ff ff6a 	bl	800b538 <_strtol_l.constprop.0>
 800b664:	bd10      	pop	{r4, pc}
 800b666:	46c0      	nop			; (mov r8, r8)
 800b668:	200000a0 	.word	0x200000a0

0800b66c <__swbuf_r>:
 800b66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66e:	0005      	movs	r5, r0
 800b670:	000e      	movs	r6, r1
 800b672:	0014      	movs	r4, r2
 800b674:	2800      	cmp	r0, #0
 800b676:	d004      	beq.n	800b682 <__swbuf_r+0x16>
 800b678:	6983      	ldr	r3, [r0, #24]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <__swbuf_r+0x16>
 800b67e:	f001 f897 	bl	800c7b0 <__sinit>
 800b682:	4b22      	ldr	r3, [pc, #136]	; (800b70c <__swbuf_r+0xa0>)
 800b684:	429c      	cmp	r4, r3
 800b686:	d12e      	bne.n	800b6e6 <__swbuf_r+0x7a>
 800b688:	686c      	ldr	r4, [r5, #4]
 800b68a:	69a3      	ldr	r3, [r4, #24]
 800b68c:	60a3      	str	r3, [r4, #8]
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	071b      	lsls	r3, r3, #28
 800b692:	d532      	bpl.n	800b6fa <__swbuf_r+0x8e>
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d02f      	beq.n	800b6fa <__swbuf_r+0x8e>
 800b69a:	6823      	ldr	r3, [r4, #0]
 800b69c:	6922      	ldr	r2, [r4, #16]
 800b69e:	b2f7      	uxtb	r7, r6
 800b6a0:	1a98      	subs	r0, r3, r2
 800b6a2:	6963      	ldr	r3, [r4, #20]
 800b6a4:	b2f6      	uxtb	r6, r6
 800b6a6:	4283      	cmp	r3, r0
 800b6a8:	dc05      	bgt.n	800b6b6 <__swbuf_r+0x4a>
 800b6aa:	0021      	movs	r1, r4
 800b6ac:	0028      	movs	r0, r5
 800b6ae:	f000 ffdd 	bl	800c66c <_fflush_r>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d127      	bne.n	800b706 <__swbuf_r+0x9a>
 800b6b6:	68a3      	ldr	r3, [r4, #8]
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	60a3      	str	r3, [r4, #8]
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	6022      	str	r2, [r4, #0]
 800b6c4:	701f      	strb	r7, [r3, #0]
 800b6c6:	6963      	ldr	r3, [r4, #20]
 800b6c8:	4283      	cmp	r3, r0
 800b6ca:	d004      	beq.n	800b6d6 <__swbuf_r+0x6a>
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	07db      	lsls	r3, r3, #31
 800b6d0:	d507      	bpl.n	800b6e2 <__swbuf_r+0x76>
 800b6d2:	2e0a      	cmp	r6, #10
 800b6d4:	d105      	bne.n	800b6e2 <__swbuf_r+0x76>
 800b6d6:	0021      	movs	r1, r4
 800b6d8:	0028      	movs	r0, r5
 800b6da:	f000 ffc7 	bl	800c66c <_fflush_r>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d111      	bne.n	800b706 <__swbuf_r+0x9a>
 800b6e2:	0030      	movs	r0, r6
 800b6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6e6:	4b0a      	ldr	r3, [pc, #40]	; (800b710 <__swbuf_r+0xa4>)
 800b6e8:	429c      	cmp	r4, r3
 800b6ea:	d101      	bne.n	800b6f0 <__swbuf_r+0x84>
 800b6ec:	68ac      	ldr	r4, [r5, #8]
 800b6ee:	e7cc      	b.n	800b68a <__swbuf_r+0x1e>
 800b6f0:	4b08      	ldr	r3, [pc, #32]	; (800b714 <__swbuf_r+0xa8>)
 800b6f2:	429c      	cmp	r4, r3
 800b6f4:	d1c9      	bne.n	800b68a <__swbuf_r+0x1e>
 800b6f6:	68ec      	ldr	r4, [r5, #12]
 800b6f8:	e7c7      	b.n	800b68a <__swbuf_r+0x1e>
 800b6fa:	0021      	movs	r1, r4
 800b6fc:	0028      	movs	r0, r5
 800b6fe:	f000 f80b 	bl	800b718 <__swsetup_r>
 800b702:	2800      	cmp	r0, #0
 800b704:	d0c9      	beq.n	800b69a <__swbuf_r+0x2e>
 800b706:	2601      	movs	r6, #1
 800b708:	4276      	negs	r6, r6
 800b70a:	e7ea      	b.n	800b6e2 <__swbuf_r+0x76>
 800b70c:	0800e6b8 	.word	0x0800e6b8
 800b710:	0800e6d8 	.word	0x0800e6d8
 800b714:	0800e698 	.word	0x0800e698

0800b718 <__swsetup_r>:
 800b718:	4b37      	ldr	r3, [pc, #220]	; (800b7f8 <__swsetup_r+0xe0>)
 800b71a:	b570      	push	{r4, r5, r6, lr}
 800b71c:	681d      	ldr	r5, [r3, #0]
 800b71e:	0006      	movs	r6, r0
 800b720:	000c      	movs	r4, r1
 800b722:	2d00      	cmp	r5, #0
 800b724:	d005      	beq.n	800b732 <__swsetup_r+0x1a>
 800b726:	69ab      	ldr	r3, [r5, #24]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d102      	bne.n	800b732 <__swsetup_r+0x1a>
 800b72c:	0028      	movs	r0, r5
 800b72e:	f001 f83f 	bl	800c7b0 <__sinit>
 800b732:	4b32      	ldr	r3, [pc, #200]	; (800b7fc <__swsetup_r+0xe4>)
 800b734:	429c      	cmp	r4, r3
 800b736:	d10f      	bne.n	800b758 <__swsetup_r+0x40>
 800b738:	686c      	ldr	r4, [r5, #4]
 800b73a:	230c      	movs	r3, #12
 800b73c:	5ee2      	ldrsh	r2, [r4, r3]
 800b73e:	b293      	uxth	r3, r2
 800b740:	0711      	lsls	r1, r2, #28
 800b742:	d42d      	bmi.n	800b7a0 <__swsetup_r+0x88>
 800b744:	06d9      	lsls	r1, r3, #27
 800b746:	d411      	bmi.n	800b76c <__swsetup_r+0x54>
 800b748:	2309      	movs	r3, #9
 800b74a:	2001      	movs	r0, #1
 800b74c:	6033      	str	r3, [r6, #0]
 800b74e:	3337      	adds	r3, #55	; 0x37
 800b750:	4313      	orrs	r3, r2
 800b752:	81a3      	strh	r3, [r4, #12]
 800b754:	4240      	negs	r0, r0
 800b756:	bd70      	pop	{r4, r5, r6, pc}
 800b758:	4b29      	ldr	r3, [pc, #164]	; (800b800 <__swsetup_r+0xe8>)
 800b75a:	429c      	cmp	r4, r3
 800b75c:	d101      	bne.n	800b762 <__swsetup_r+0x4a>
 800b75e:	68ac      	ldr	r4, [r5, #8]
 800b760:	e7eb      	b.n	800b73a <__swsetup_r+0x22>
 800b762:	4b28      	ldr	r3, [pc, #160]	; (800b804 <__swsetup_r+0xec>)
 800b764:	429c      	cmp	r4, r3
 800b766:	d1e8      	bne.n	800b73a <__swsetup_r+0x22>
 800b768:	68ec      	ldr	r4, [r5, #12]
 800b76a:	e7e6      	b.n	800b73a <__swsetup_r+0x22>
 800b76c:	075b      	lsls	r3, r3, #29
 800b76e:	d513      	bpl.n	800b798 <__swsetup_r+0x80>
 800b770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b772:	2900      	cmp	r1, #0
 800b774:	d008      	beq.n	800b788 <__swsetup_r+0x70>
 800b776:	0023      	movs	r3, r4
 800b778:	3344      	adds	r3, #68	; 0x44
 800b77a:	4299      	cmp	r1, r3
 800b77c:	d002      	beq.n	800b784 <__swsetup_r+0x6c>
 800b77e:	0030      	movs	r0, r6
 800b780:	f001 fd08 	bl	800d194 <_free_r>
 800b784:	2300      	movs	r3, #0
 800b786:	6363      	str	r3, [r4, #52]	; 0x34
 800b788:	2224      	movs	r2, #36	; 0x24
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	4393      	bics	r3, r2
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	2300      	movs	r3, #0
 800b792:	6063      	str	r3, [r4, #4]
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	6023      	str	r3, [r4, #0]
 800b798:	2308      	movs	r3, #8
 800b79a:	89a2      	ldrh	r2, [r4, #12]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	81a3      	strh	r3, [r4, #12]
 800b7a0:	6923      	ldr	r3, [r4, #16]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10b      	bne.n	800b7be <__swsetup_r+0xa6>
 800b7a6:	21a0      	movs	r1, #160	; 0xa0
 800b7a8:	2280      	movs	r2, #128	; 0x80
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	0089      	lsls	r1, r1, #2
 800b7ae:	0092      	lsls	r2, r2, #2
 800b7b0:	400b      	ands	r3, r1
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d003      	beq.n	800b7be <__swsetup_r+0xa6>
 800b7b6:	0021      	movs	r1, r4
 800b7b8:	0030      	movs	r0, r6
 800b7ba:	f001 f8c9 	bl	800c950 <__smakebuf_r>
 800b7be:	220c      	movs	r2, #12
 800b7c0:	5ea3      	ldrsh	r3, [r4, r2]
 800b7c2:	2001      	movs	r0, #1
 800b7c4:	001a      	movs	r2, r3
 800b7c6:	b299      	uxth	r1, r3
 800b7c8:	4002      	ands	r2, r0
 800b7ca:	4203      	tst	r3, r0
 800b7cc:	d00f      	beq.n	800b7ee <__swsetup_r+0xd6>
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	60a2      	str	r2, [r4, #8]
 800b7d2:	6962      	ldr	r2, [r4, #20]
 800b7d4:	4252      	negs	r2, r2
 800b7d6:	61a2      	str	r2, [r4, #24]
 800b7d8:	2000      	movs	r0, #0
 800b7da:	6922      	ldr	r2, [r4, #16]
 800b7dc:	4282      	cmp	r2, r0
 800b7de:	d1ba      	bne.n	800b756 <__swsetup_r+0x3e>
 800b7e0:	060a      	lsls	r2, r1, #24
 800b7e2:	d5b8      	bpl.n	800b756 <__swsetup_r+0x3e>
 800b7e4:	2240      	movs	r2, #64	; 0x40
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	81a3      	strh	r3, [r4, #12]
 800b7ea:	3801      	subs	r0, #1
 800b7ec:	e7b3      	b.n	800b756 <__swsetup_r+0x3e>
 800b7ee:	0788      	lsls	r0, r1, #30
 800b7f0:	d400      	bmi.n	800b7f4 <__swsetup_r+0xdc>
 800b7f2:	6962      	ldr	r2, [r4, #20]
 800b7f4:	60a2      	str	r2, [r4, #8]
 800b7f6:	e7ef      	b.n	800b7d8 <__swsetup_r+0xc0>
 800b7f8:	200000a0 	.word	0x200000a0
 800b7fc:	0800e6b8 	.word	0x0800e6b8
 800b800:	0800e6d8 	.word	0x0800e6d8
 800b804:	0800e698 	.word	0x0800e698

0800b808 <quorem>:
 800b808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b80a:	0006      	movs	r6, r0
 800b80c:	690b      	ldr	r3, [r1, #16]
 800b80e:	6932      	ldr	r2, [r6, #16]
 800b810:	b087      	sub	sp, #28
 800b812:	2000      	movs	r0, #0
 800b814:	9103      	str	r1, [sp, #12]
 800b816:	429a      	cmp	r2, r3
 800b818:	db65      	blt.n	800b8e6 <quorem+0xde>
 800b81a:	3b01      	subs	r3, #1
 800b81c:	009c      	lsls	r4, r3, #2
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	000b      	movs	r3, r1
 800b822:	3314      	adds	r3, #20
 800b824:	9305      	str	r3, [sp, #20]
 800b826:	191b      	adds	r3, r3, r4
 800b828:	9304      	str	r3, [sp, #16]
 800b82a:	0033      	movs	r3, r6
 800b82c:	3314      	adds	r3, #20
 800b82e:	9302      	str	r3, [sp, #8]
 800b830:	191c      	adds	r4, r3, r4
 800b832:	9b04      	ldr	r3, [sp, #16]
 800b834:	6827      	ldr	r7, [r4, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	0038      	movs	r0, r7
 800b83a:	1c5d      	adds	r5, r3, #1
 800b83c:	0029      	movs	r1, r5
 800b83e:	9301      	str	r3, [sp, #4]
 800b840:	f7f4 fc86 	bl	8000150 <__udivsi3>
 800b844:	9001      	str	r0, [sp, #4]
 800b846:	42af      	cmp	r7, r5
 800b848:	d324      	bcc.n	800b894 <quorem+0x8c>
 800b84a:	2500      	movs	r5, #0
 800b84c:	46ac      	mov	ip, r5
 800b84e:	9802      	ldr	r0, [sp, #8]
 800b850:	9f05      	ldr	r7, [sp, #20]
 800b852:	cf08      	ldmia	r7!, {r3}
 800b854:	9a01      	ldr	r2, [sp, #4]
 800b856:	b299      	uxth	r1, r3
 800b858:	4351      	muls	r1, r2
 800b85a:	0c1b      	lsrs	r3, r3, #16
 800b85c:	4353      	muls	r3, r2
 800b85e:	1949      	adds	r1, r1, r5
 800b860:	0c0a      	lsrs	r2, r1, #16
 800b862:	189b      	adds	r3, r3, r2
 800b864:	6802      	ldr	r2, [r0, #0]
 800b866:	b289      	uxth	r1, r1
 800b868:	b292      	uxth	r2, r2
 800b86a:	4462      	add	r2, ip
 800b86c:	1a52      	subs	r2, r2, r1
 800b86e:	6801      	ldr	r1, [r0, #0]
 800b870:	0c1d      	lsrs	r5, r3, #16
 800b872:	0c09      	lsrs	r1, r1, #16
 800b874:	b29b      	uxth	r3, r3
 800b876:	1acb      	subs	r3, r1, r3
 800b878:	1411      	asrs	r1, r2, #16
 800b87a:	185b      	adds	r3, r3, r1
 800b87c:	1419      	asrs	r1, r3, #16
 800b87e:	b292      	uxth	r2, r2
 800b880:	041b      	lsls	r3, r3, #16
 800b882:	431a      	orrs	r2, r3
 800b884:	9b04      	ldr	r3, [sp, #16]
 800b886:	468c      	mov	ip, r1
 800b888:	c004      	stmia	r0!, {r2}
 800b88a:	42bb      	cmp	r3, r7
 800b88c:	d2e1      	bcs.n	800b852 <quorem+0x4a>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d030      	beq.n	800b8f6 <quorem+0xee>
 800b894:	0030      	movs	r0, r6
 800b896:	9903      	ldr	r1, [sp, #12]
 800b898:	f001 fb38 	bl	800cf0c <__mcmp>
 800b89c:	2800      	cmp	r0, #0
 800b89e:	db21      	blt.n	800b8e4 <quorem+0xdc>
 800b8a0:	0030      	movs	r0, r6
 800b8a2:	2400      	movs	r4, #0
 800b8a4:	9b01      	ldr	r3, [sp, #4]
 800b8a6:	9903      	ldr	r1, [sp, #12]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	9301      	str	r3, [sp, #4]
 800b8ac:	3014      	adds	r0, #20
 800b8ae:	3114      	adds	r1, #20
 800b8b0:	6803      	ldr	r3, [r0, #0]
 800b8b2:	c920      	ldmia	r1!, {r5}
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	1914      	adds	r4, r2, r4
 800b8b8:	b2aa      	uxth	r2, r5
 800b8ba:	1aa2      	subs	r2, r4, r2
 800b8bc:	0c1b      	lsrs	r3, r3, #16
 800b8be:	0c2d      	lsrs	r5, r5, #16
 800b8c0:	1414      	asrs	r4, r2, #16
 800b8c2:	1b5b      	subs	r3, r3, r5
 800b8c4:	191b      	adds	r3, r3, r4
 800b8c6:	141c      	asrs	r4, r3, #16
 800b8c8:	b292      	uxth	r2, r2
 800b8ca:	041b      	lsls	r3, r3, #16
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	c008      	stmia	r0!, {r3}
 800b8d0:	9b04      	ldr	r3, [sp, #16]
 800b8d2:	428b      	cmp	r3, r1
 800b8d4:	d2ec      	bcs.n	800b8b0 <quorem+0xa8>
 800b8d6:	9b00      	ldr	r3, [sp, #0]
 800b8d8:	9a02      	ldr	r2, [sp, #8]
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	18d3      	adds	r3, r2, r3
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	2a00      	cmp	r2, #0
 800b8e2:	d015      	beq.n	800b910 <quorem+0x108>
 800b8e4:	9801      	ldr	r0, [sp, #4]
 800b8e6:	b007      	add	sp, #28
 800b8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d106      	bne.n	800b8fe <quorem+0xf6>
 800b8f0:	9b00      	ldr	r3, [sp, #0]
 800b8f2:	3b01      	subs	r3, #1
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	9b02      	ldr	r3, [sp, #8]
 800b8f8:	3c04      	subs	r4, #4
 800b8fa:	42a3      	cmp	r3, r4
 800b8fc:	d3f5      	bcc.n	800b8ea <quorem+0xe2>
 800b8fe:	9b00      	ldr	r3, [sp, #0]
 800b900:	6133      	str	r3, [r6, #16]
 800b902:	e7c7      	b.n	800b894 <quorem+0x8c>
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	2a00      	cmp	r2, #0
 800b908:	d106      	bne.n	800b918 <quorem+0x110>
 800b90a:	9a00      	ldr	r2, [sp, #0]
 800b90c:	3a01      	subs	r2, #1
 800b90e:	9200      	str	r2, [sp, #0]
 800b910:	9a02      	ldr	r2, [sp, #8]
 800b912:	3b04      	subs	r3, #4
 800b914:	429a      	cmp	r2, r3
 800b916:	d3f5      	bcc.n	800b904 <quorem+0xfc>
 800b918:	9b00      	ldr	r3, [sp, #0]
 800b91a:	6133      	str	r3, [r6, #16]
 800b91c:	e7e2      	b.n	800b8e4 <quorem+0xdc>
	...

0800b920 <_dtoa_r>:
 800b920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b922:	b09d      	sub	sp, #116	; 0x74
 800b924:	9202      	str	r2, [sp, #8]
 800b926:	9303      	str	r3, [sp, #12]
 800b928:	9b02      	ldr	r3, [sp, #8]
 800b92a:	9c03      	ldr	r4, [sp, #12]
 800b92c:	9308      	str	r3, [sp, #32]
 800b92e:	9409      	str	r4, [sp, #36]	; 0x24
 800b930:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b932:	0007      	movs	r7, r0
 800b934:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800b936:	2c00      	cmp	r4, #0
 800b938:	d10e      	bne.n	800b958 <_dtoa_r+0x38>
 800b93a:	2010      	movs	r0, #16
 800b93c:	f001 f84c 	bl	800c9d8 <malloc>
 800b940:	1e02      	subs	r2, r0, #0
 800b942:	6278      	str	r0, [r7, #36]	; 0x24
 800b944:	d104      	bne.n	800b950 <_dtoa_r+0x30>
 800b946:	21ea      	movs	r1, #234	; 0xea
 800b948:	4bc7      	ldr	r3, [pc, #796]	; (800bc68 <_dtoa_r+0x348>)
 800b94a:	48c8      	ldr	r0, [pc, #800]	; (800bc6c <_dtoa_r+0x34c>)
 800b94c:	f001 fed8 	bl	800d700 <__assert_func>
 800b950:	6044      	str	r4, [r0, #4]
 800b952:	6084      	str	r4, [r0, #8]
 800b954:	6004      	str	r4, [r0, #0]
 800b956:	60c4      	str	r4, [r0, #12]
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	6819      	ldr	r1, [r3, #0]
 800b95c:	2900      	cmp	r1, #0
 800b95e:	d00a      	beq.n	800b976 <_dtoa_r+0x56>
 800b960:	685a      	ldr	r2, [r3, #4]
 800b962:	2301      	movs	r3, #1
 800b964:	4093      	lsls	r3, r2
 800b966:	604a      	str	r2, [r1, #4]
 800b968:	608b      	str	r3, [r1, #8]
 800b96a:	0038      	movs	r0, r7
 800b96c:	f001 f88e 	bl	800ca8c <_Bfree>
 800b970:	2200      	movs	r2, #0
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	9b03      	ldr	r3, [sp, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	da20      	bge.n	800b9be <_dtoa_r+0x9e>
 800b97c:	2301      	movs	r3, #1
 800b97e:	602b      	str	r3, [r5, #0]
 800b980:	9b03      	ldr	r3, [sp, #12]
 800b982:	005b      	lsls	r3, r3, #1
 800b984:	085b      	lsrs	r3, r3, #1
 800b986:	9309      	str	r3, [sp, #36]	; 0x24
 800b988:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b98a:	4bb9      	ldr	r3, [pc, #740]	; (800bc70 <_dtoa_r+0x350>)
 800b98c:	4ab8      	ldr	r2, [pc, #736]	; (800bc70 <_dtoa_r+0x350>)
 800b98e:	402b      	ands	r3, r5
 800b990:	4293      	cmp	r3, r2
 800b992:	d117      	bne.n	800b9c4 <_dtoa_r+0xa4>
 800b994:	4bb7      	ldr	r3, [pc, #732]	; (800bc74 <_dtoa_r+0x354>)
 800b996:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b998:	0328      	lsls	r0, r5, #12
 800b99a:	6013      	str	r3, [r2, #0]
 800b99c:	9b02      	ldr	r3, [sp, #8]
 800b99e:	0b00      	lsrs	r0, r0, #12
 800b9a0:	4318      	orrs	r0, r3
 800b9a2:	d101      	bne.n	800b9a8 <_dtoa_r+0x88>
 800b9a4:	f000 fdbf 	bl	800c526 <_dtoa_r+0xc06>
 800b9a8:	48b3      	ldr	r0, [pc, #716]	; (800bc78 <_dtoa_r+0x358>)
 800b9aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b9ac:	9006      	str	r0, [sp, #24]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <_dtoa_r+0x98>
 800b9b2:	4bb2      	ldr	r3, [pc, #712]	; (800bc7c <_dtoa_r+0x35c>)
 800b9b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	9806      	ldr	r0, [sp, #24]
 800b9ba:	b01d      	add	sp, #116	; 0x74
 800b9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9be:	2300      	movs	r3, #0
 800b9c0:	602b      	str	r3, [r5, #0]
 800b9c2:	e7e1      	b.n	800b988 <_dtoa_r+0x68>
 800b9c4:	9b08      	ldr	r3, [sp, #32]
 800b9c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b9c8:	9312      	str	r3, [sp, #72]	; 0x48
 800b9ca:	9413      	str	r4, [sp, #76]	; 0x4c
 800b9cc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b9ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f7f4 fd42 	bl	800045c <__aeabi_dcmpeq>
 800b9d8:	1e04      	subs	r4, r0, #0
 800b9da:	d009      	beq.n	800b9f0 <_dtoa_r+0xd0>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b9e0:	6013      	str	r3, [r2, #0]
 800b9e2:	4ba7      	ldr	r3, [pc, #668]	; (800bc80 <_dtoa_r+0x360>)
 800b9e4:	9306      	str	r3, [sp, #24]
 800b9e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d0e5      	beq.n	800b9b8 <_dtoa_r+0x98>
 800b9ec:	4ba5      	ldr	r3, [pc, #660]	; (800bc84 <_dtoa_r+0x364>)
 800b9ee:	e7e1      	b.n	800b9b4 <_dtoa_r+0x94>
 800b9f0:	ab1a      	add	r3, sp, #104	; 0x68
 800b9f2:	9301      	str	r3, [sp, #4]
 800b9f4:	ab1b      	add	r3, sp, #108	; 0x6c
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	0038      	movs	r0, r7
 800b9fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b9fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9fe:	f001 fb39 	bl	800d074 <__d2b>
 800ba02:	006e      	lsls	r6, r5, #1
 800ba04:	9005      	str	r0, [sp, #20]
 800ba06:	0d76      	lsrs	r6, r6, #21
 800ba08:	d100      	bne.n	800ba0c <_dtoa_r+0xec>
 800ba0a:	e07c      	b.n	800bb06 <_dtoa_r+0x1e6>
 800ba0c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ba0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ba10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba12:	4a9d      	ldr	r2, [pc, #628]	; (800bc88 <_dtoa_r+0x368>)
 800ba14:	031b      	lsls	r3, r3, #12
 800ba16:	0b1b      	lsrs	r3, r3, #12
 800ba18:	431a      	orrs	r2, r3
 800ba1a:	0011      	movs	r1, r2
 800ba1c:	4b9b      	ldr	r3, [pc, #620]	; (800bc8c <_dtoa_r+0x36c>)
 800ba1e:	9418      	str	r4, [sp, #96]	; 0x60
 800ba20:	18f6      	adds	r6, r6, r3
 800ba22:	2200      	movs	r2, #0
 800ba24:	4b9a      	ldr	r3, [pc, #616]	; (800bc90 <_dtoa_r+0x370>)
 800ba26:	f7f6 fec7 	bl	80027b8 <__aeabi_dsub>
 800ba2a:	4a9a      	ldr	r2, [pc, #616]	; (800bc94 <_dtoa_r+0x374>)
 800ba2c:	4b9a      	ldr	r3, [pc, #616]	; (800bc98 <_dtoa_r+0x378>)
 800ba2e:	f7f6 fc57 	bl	80022e0 <__aeabi_dmul>
 800ba32:	4a9a      	ldr	r2, [pc, #616]	; (800bc9c <_dtoa_r+0x37c>)
 800ba34:	4b9a      	ldr	r3, [pc, #616]	; (800bca0 <_dtoa_r+0x380>)
 800ba36:	f7f5 fd15 	bl	8001464 <__aeabi_dadd>
 800ba3a:	0004      	movs	r4, r0
 800ba3c:	0030      	movs	r0, r6
 800ba3e:	000d      	movs	r5, r1
 800ba40:	f7f7 faa0 	bl	8002f84 <__aeabi_i2d>
 800ba44:	4a97      	ldr	r2, [pc, #604]	; (800bca4 <_dtoa_r+0x384>)
 800ba46:	4b98      	ldr	r3, [pc, #608]	; (800bca8 <_dtoa_r+0x388>)
 800ba48:	f7f6 fc4a 	bl	80022e0 <__aeabi_dmul>
 800ba4c:	0002      	movs	r2, r0
 800ba4e:	000b      	movs	r3, r1
 800ba50:	0020      	movs	r0, r4
 800ba52:	0029      	movs	r1, r5
 800ba54:	f7f5 fd06 	bl	8001464 <__aeabi_dadd>
 800ba58:	0004      	movs	r4, r0
 800ba5a:	000d      	movs	r5, r1
 800ba5c:	f7f7 fa5c 	bl	8002f18 <__aeabi_d2iz>
 800ba60:	2200      	movs	r2, #0
 800ba62:	9002      	str	r0, [sp, #8]
 800ba64:	2300      	movs	r3, #0
 800ba66:	0020      	movs	r0, r4
 800ba68:	0029      	movs	r1, r5
 800ba6a:	f7f4 fcfd 	bl	8000468 <__aeabi_dcmplt>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d00b      	beq.n	800ba8a <_dtoa_r+0x16a>
 800ba72:	9802      	ldr	r0, [sp, #8]
 800ba74:	f7f7 fa86 	bl	8002f84 <__aeabi_i2d>
 800ba78:	002b      	movs	r3, r5
 800ba7a:	0022      	movs	r2, r4
 800ba7c:	f7f4 fcee 	bl	800045c <__aeabi_dcmpeq>
 800ba80:	4243      	negs	r3, r0
 800ba82:	4158      	adcs	r0, r3
 800ba84:	9b02      	ldr	r3, [sp, #8]
 800ba86:	1a1b      	subs	r3, r3, r0
 800ba88:	9302      	str	r3, [sp, #8]
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	9316      	str	r3, [sp, #88]	; 0x58
 800ba8e:	9b02      	ldr	r3, [sp, #8]
 800ba90:	2b16      	cmp	r3, #22
 800ba92:	d80f      	bhi.n	800bab4 <_dtoa_r+0x194>
 800ba94:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ba96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ba98:	00da      	lsls	r2, r3, #3
 800ba9a:	4b84      	ldr	r3, [pc, #528]	; (800bcac <_dtoa_r+0x38c>)
 800ba9c:	189b      	adds	r3, r3, r2
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	f7f4 fce1 	bl	8000468 <__aeabi_dcmplt>
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d049      	beq.n	800bb3e <_dtoa_r+0x21e>
 800baaa:	9b02      	ldr	r3, [sp, #8]
 800baac:	3b01      	subs	r3, #1
 800baae:	9302      	str	r3, [sp, #8]
 800bab0:	2300      	movs	r3, #0
 800bab2:	9316      	str	r3, [sp, #88]	; 0x58
 800bab4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bab6:	1b9e      	subs	r6, r3, r6
 800bab8:	2300      	movs	r3, #0
 800baba:	930a      	str	r3, [sp, #40]	; 0x28
 800babc:	0033      	movs	r3, r6
 800babe:	3b01      	subs	r3, #1
 800bac0:	930d      	str	r3, [sp, #52]	; 0x34
 800bac2:	d504      	bpl.n	800bace <_dtoa_r+0x1ae>
 800bac4:	2301      	movs	r3, #1
 800bac6:	1b9b      	subs	r3, r3, r6
 800bac8:	930a      	str	r3, [sp, #40]	; 0x28
 800baca:	2300      	movs	r3, #0
 800bacc:	930d      	str	r3, [sp, #52]	; 0x34
 800bace:	9b02      	ldr	r3, [sp, #8]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	db36      	blt.n	800bb42 <_dtoa_r+0x222>
 800bad4:	9a02      	ldr	r2, [sp, #8]
 800bad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bad8:	4694      	mov	ip, r2
 800bada:	4463      	add	r3, ip
 800badc:	930d      	str	r3, [sp, #52]	; 0x34
 800bade:	2300      	movs	r3, #0
 800bae0:	9215      	str	r2, [sp, #84]	; 0x54
 800bae2:	930e      	str	r3, [sp, #56]	; 0x38
 800bae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bae6:	2401      	movs	r4, #1
 800bae8:	2b09      	cmp	r3, #9
 800baea:	d864      	bhi.n	800bbb6 <_dtoa_r+0x296>
 800baec:	2b05      	cmp	r3, #5
 800baee:	dd02      	ble.n	800baf6 <_dtoa_r+0x1d6>
 800baf0:	2400      	movs	r4, #0
 800baf2:	3b04      	subs	r3, #4
 800baf4:	9322      	str	r3, [sp, #136]	; 0x88
 800baf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800baf8:	1e98      	subs	r0, r3, #2
 800bafa:	2803      	cmp	r0, #3
 800bafc:	d864      	bhi.n	800bbc8 <_dtoa_r+0x2a8>
 800bafe:	f7f4 fb13 	bl	8000128 <__gnu_thumb1_case_uqi>
 800bb02:	3829      	.short	0x3829
 800bb04:	5836      	.short	0x5836
 800bb06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bb08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bb0a:	189e      	adds	r6, r3, r2
 800bb0c:	4b68      	ldr	r3, [pc, #416]	; (800bcb0 <_dtoa_r+0x390>)
 800bb0e:	18f2      	adds	r2, r6, r3
 800bb10:	2a20      	cmp	r2, #32
 800bb12:	dd0f      	ble.n	800bb34 <_dtoa_r+0x214>
 800bb14:	2340      	movs	r3, #64	; 0x40
 800bb16:	1a9b      	subs	r3, r3, r2
 800bb18:	409d      	lsls	r5, r3
 800bb1a:	4b66      	ldr	r3, [pc, #408]	; (800bcb4 <_dtoa_r+0x394>)
 800bb1c:	9802      	ldr	r0, [sp, #8]
 800bb1e:	18f3      	adds	r3, r6, r3
 800bb20:	40d8      	lsrs	r0, r3
 800bb22:	4328      	orrs	r0, r5
 800bb24:	f7f7 fa5e 	bl	8002fe4 <__aeabi_ui2d>
 800bb28:	2301      	movs	r3, #1
 800bb2a:	4c63      	ldr	r4, [pc, #396]	; (800bcb8 <_dtoa_r+0x398>)
 800bb2c:	3e01      	subs	r6, #1
 800bb2e:	1909      	adds	r1, r1, r4
 800bb30:	9318      	str	r3, [sp, #96]	; 0x60
 800bb32:	e776      	b.n	800ba22 <_dtoa_r+0x102>
 800bb34:	2320      	movs	r3, #32
 800bb36:	9802      	ldr	r0, [sp, #8]
 800bb38:	1a9b      	subs	r3, r3, r2
 800bb3a:	4098      	lsls	r0, r3
 800bb3c:	e7f2      	b.n	800bb24 <_dtoa_r+0x204>
 800bb3e:	9016      	str	r0, [sp, #88]	; 0x58
 800bb40:	e7b8      	b.n	800bab4 <_dtoa_r+0x194>
 800bb42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb44:	9a02      	ldr	r2, [sp, #8]
 800bb46:	1a9b      	subs	r3, r3, r2
 800bb48:	930a      	str	r3, [sp, #40]	; 0x28
 800bb4a:	4253      	negs	r3, r2
 800bb4c:	930e      	str	r3, [sp, #56]	; 0x38
 800bb4e:	2300      	movs	r3, #0
 800bb50:	9315      	str	r3, [sp, #84]	; 0x54
 800bb52:	e7c7      	b.n	800bae4 <_dtoa_r+0x1c4>
 800bb54:	2300      	movs	r3, #0
 800bb56:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bb5a:	930c      	str	r3, [sp, #48]	; 0x30
 800bb5c:	9307      	str	r3, [sp, #28]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	dc13      	bgt.n	800bb8a <_dtoa_r+0x26a>
 800bb62:	2301      	movs	r3, #1
 800bb64:	001a      	movs	r2, r3
 800bb66:	930c      	str	r3, [sp, #48]	; 0x30
 800bb68:	9307      	str	r3, [sp, #28]
 800bb6a:	9223      	str	r2, [sp, #140]	; 0x8c
 800bb6c:	e00d      	b.n	800bb8a <_dtoa_r+0x26a>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e7f1      	b.n	800bb56 <_dtoa_r+0x236>
 800bb72:	2300      	movs	r3, #0
 800bb74:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800bb76:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb78:	4694      	mov	ip, r2
 800bb7a:	9b02      	ldr	r3, [sp, #8]
 800bb7c:	4463      	add	r3, ip
 800bb7e:	930c      	str	r3, [sp, #48]	; 0x30
 800bb80:	3301      	adds	r3, #1
 800bb82:	9307      	str	r3, [sp, #28]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	dc00      	bgt.n	800bb8a <_dtoa_r+0x26a>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb8e:	6042      	str	r2, [r0, #4]
 800bb90:	3204      	adds	r2, #4
 800bb92:	0015      	movs	r5, r2
 800bb94:	3514      	adds	r5, #20
 800bb96:	6841      	ldr	r1, [r0, #4]
 800bb98:	429d      	cmp	r5, r3
 800bb9a:	d919      	bls.n	800bbd0 <_dtoa_r+0x2b0>
 800bb9c:	0038      	movs	r0, r7
 800bb9e:	f000 ff31 	bl	800ca04 <_Balloc>
 800bba2:	9006      	str	r0, [sp, #24]
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d117      	bne.n	800bbd8 <_dtoa_r+0x2b8>
 800bba8:	21d5      	movs	r1, #213	; 0xd5
 800bbaa:	0002      	movs	r2, r0
 800bbac:	4b43      	ldr	r3, [pc, #268]	; (800bcbc <_dtoa_r+0x39c>)
 800bbae:	0049      	lsls	r1, r1, #1
 800bbb0:	e6cb      	b.n	800b94a <_dtoa_r+0x2a>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e7de      	b.n	800bb74 <_dtoa_r+0x254>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	940f      	str	r4, [sp, #60]	; 0x3c
 800bbba:	9322      	str	r3, [sp, #136]	; 0x88
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	930c      	str	r3, [sp, #48]	; 0x30
 800bbc0:	9307      	str	r3, [sp, #28]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	3313      	adds	r3, #19
 800bbc6:	e7d0      	b.n	800bb6a <_dtoa_r+0x24a>
 800bbc8:	2301      	movs	r3, #1
 800bbca:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbcc:	3b02      	subs	r3, #2
 800bbce:	e7f6      	b.n	800bbbe <_dtoa_r+0x29e>
 800bbd0:	3101      	adds	r1, #1
 800bbd2:	6041      	str	r1, [r0, #4]
 800bbd4:	0052      	lsls	r2, r2, #1
 800bbd6:	e7dc      	b.n	800bb92 <_dtoa_r+0x272>
 800bbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbda:	9a06      	ldr	r2, [sp, #24]
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	9b07      	ldr	r3, [sp, #28]
 800bbe0:	2b0e      	cmp	r3, #14
 800bbe2:	d900      	bls.n	800bbe6 <_dtoa_r+0x2c6>
 800bbe4:	e0eb      	b.n	800bdbe <_dtoa_r+0x49e>
 800bbe6:	2c00      	cmp	r4, #0
 800bbe8:	d100      	bne.n	800bbec <_dtoa_r+0x2cc>
 800bbea:	e0e8      	b.n	800bdbe <_dtoa_r+0x49e>
 800bbec:	9b02      	ldr	r3, [sp, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	dd68      	ble.n	800bcc4 <_dtoa_r+0x3a4>
 800bbf2:	001a      	movs	r2, r3
 800bbf4:	210f      	movs	r1, #15
 800bbf6:	4b2d      	ldr	r3, [pc, #180]	; (800bcac <_dtoa_r+0x38c>)
 800bbf8:	400a      	ands	r2, r1
 800bbfa:	00d2      	lsls	r2, r2, #3
 800bbfc:	189b      	adds	r3, r3, r2
 800bbfe:	681d      	ldr	r5, [r3, #0]
 800bc00:	685e      	ldr	r6, [r3, #4]
 800bc02:	9b02      	ldr	r3, [sp, #8]
 800bc04:	111c      	asrs	r4, r3, #4
 800bc06:	2302      	movs	r3, #2
 800bc08:	9310      	str	r3, [sp, #64]	; 0x40
 800bc0a:	9b02      	ldr	r3, [sp, #8]
 800bc0c:	05db      	lsls	r3, r3, #23
 800bc0e:	d50b      	bpl.n	800bc28 <_dtoa_r+0x308>
 800bc10:	4b2b      	ldr	r3, [pc, #172]	; (800bcc0 <_dtoa_r+0x3a0>)
 800bc12:	400c      	ands	r4, r1
 800bc14:	6a1a      	ldr	r2, [r3, #32]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc18:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bc1a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bc1c:	f7f5 ff5e 	bl	8001adc <__aeabi_ddiv>
 800bc20:	2303      	movs	r3, #3
 800bc22:	9008      	str	r0, [sp, #32]
 800bc24:	9109      	str	r1, [sp, #36]	; 0x24
 800bc26:	9310      	str	r3, [sp, #64]	; 0x40
 800bc28:	4b25      	ldr	r3, [pc, #148]	; (800bcc0 <_dtoa_r+0x3a0>)
 800bc2a:	9314      	str	r3, [sp, #80]	; 0x50
 800bc2c:	2c00      	cmp	r4, #0
 800bc2e:	d108      	bne.n	800bc42 <_dtoa_r+0x322>
 800bc30:	9808      	ldr	r0, [sp, #32]
 800bc32:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc34:	002a      	movs	r2, r5
 800bc36:	0033      	movs	r3, r6
 800bc38:	f7f5 ff50 	bl	8001adc <__aeabi_ddiv>
 800bc3c:	9008      	str	r0, [sp, #32]
 800bc3e:	9109      	str	r1, [sp, #36]	; 0x24
 800bc40:	e05c      	b.n	800bcfc <_dtoa_r+0x3dc>
 800bc42:	2301      	movs	r3, #1
 800bc44:	421c      	tst	r4, r3
 800bc46:	d00b      	beq.n	800bc60 <_dtoa_r+0x340>
 800bc48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc4a:	0028      	movs	r0, r5
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	9310      	str	r3, [sp, #64]	; 0x40
 800bc50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc52:	0031      	movs	r1, r6
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	f7f6 fb42 	bl	80022e0 <__aeabi_dmul>
 800bc5c:	0005      	movs	r5, r0
 800bc5e:	000e      	movs	r6, r1
 800bc60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc62:	1064      	asrs	r4, r4, #1
 800bc64:	3308      	adds	r3, #8
 800bc66:	e7e0      	b.n	800bc2a <_dtoa_r+0x30a>
 800bc68:	0800e612 	.word	0x0800e612
 800bc6c:	0800e629 	.word	0x0800e629
 800bc70:	7ff00000 	.word	0x7ff00000
 800bc74:	0000270f 	.word	0x0000270f
 800bc78:	0800e60e 	.word	0x0800e60e
 800bc7c:	0800e611 	.word	0x0800e611
 800bc80:	0800e4e0 	.word	0x0800e4e0
 800bc84:	0800e4e1 	.word	0x0800e4e1
 800bc88:	3ff00000 	.word	0x3ff00000
 800bc8c:	fffffc01 	.word	0xfffffc01
 800bc90:	3ff80000 	.word	0x3ff80000
 800bc94:	636f4361 	.word	0x636f4361
 800bc98:	3fd287a7 	.word	0x3fd287a7
 800bc9c:	8b60c8b3 	.word	0x8b60c8b3
 800bca0:	3fc68a28 	.word	0x3fc68a28
 800bca4:	509f79fb 	.word	0x509f79fb
 800bca8:	3fd34413 	.word	0x3fd34413
 800bcac:	0800e780 	.word	0x0800e780
 800bcb0:	00000432 	.word	0x00000432
 800bcb4:	00000412 	.word	0x00000412
 800bcb8:	fe100000 	.word	0xfe100000
 800bcbc:	0800e684 	.word	0x0800e684
 800bcc0:	0800e758 	.word	0x0800e758
 800bcc4:	2302      	movs	r3, #2
 800bcc6:	9310      	str	r3, [sp, #64]	; 0x40
 800bcc8:	9b02      	ldr	r3, [sp, #8]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d016      	beq.n	800bcfc <_dtoa_r+0x3dc>
 800bcce:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bcd0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bcd2:	425c      	negs	r4, r3
 800bcd4:	230f      	movs	r3, #15
 800bcd6:	4ab6      	ldr	r2, [pc, #728]	; (800bfb0 <_dtoa_r+0x690>)
 800bcd8:	4023      	ands	r3, r4
 800bcda:	00db      	lsls	r3, r3, #3
 800bcdc:	18d3      	adds	r3, r2, r3
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	f7f6 fafd 	bl	80022e0 <__aeabi_dmul>
 800bce6:	2601      	movs	r6, #1
 800bce8:	2300      	movs	r3, #0
 800bcea:	9008      	str	r0, [sp, #32]
 800bcec:	9109      	str	r1, [sp, #36]	; 0x24
 800bcee:	4db1      	ldr	r5, [pc, #708]	; (800bfb4 <_dtoa_r+0x694>)
 800bcf0:	1124      	asrs	r4, r4, #4
 800bcf2:	2c00      	cmp	r4, #0
 800bcf4:	d000      	beq.n	800bcf8 <_dtoa_r+0x3d8>
 800bcf6:	e094      	b.n	800be22 <_dtoa_r+0x502>
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d19f      	bne.n	800bc3c <_dtoa_r+0x31c>
 800bcfc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d100      	bne.n	800bd04 <_dtoa_r+0x3e4>
 800bd02:	e09b      	b.n	800be3c <_dtoa_r+0x51c>
 800bd04:	9c08      	ldr	r4, [sp, #32]
 800bd06:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bd08:	2200      	movs	r2, #0
 800bd0a:	0020      	movs	r0, r4
 800bd0c:	0029      	movs	r1, r5
 800bd0e:	4baa      	ldr	r3, [pc, #680]	; (800bfb8 <_dtoa_r+0x698>)
 800bd10:	f7f4 fbaa 	bl	8000468 <__aeabi_dcmplt>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d100      	bne.n	800bd1a <_dtoa_r+0x3fa>
 800bd18:	e090      	b.n	800be3c <_dtoa_r+0x51c>
 800bd1a:	9b07      	ldr	r3, [sp, #28]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d100      	bne.n	800bd22 <_dtoa_r+0x402>
 800bd20:	e08c      	b.n	800be3c <_dtoa_r+0x51c>
 800bd22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	dd46      	ble.n	800bdb6 <_dtoa_r+0x496>
 800bd28:	9b02      	ldr	r3, [sp, #8]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	0020      	movs	r0, r4
 800bd2e:	0029      	movs	r1, r5
 800bd30:	1e5e      	subs	r6, r3, #1
 800bd32:	4ba2      	ldr	r3, [pc, #648]	; (800bfbc <_dtoa_r+0x69c>)
 800bd34:	f7f6 fad4 	bl	80022e0 <__aeabi_dmul>
 800bd38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd3a:	9008      	str	r0, [sp, #32]
 800bd3c:	9109      	str	r1, [sp, #36]	; 0x24
 800bd3e:	3301      	adds	r3, #1
 800bd40:	9310      	str	r3, [sp, #64]	; 0x40
 800bd42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd44:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bd46:	9c08      	ldr	r4, [sp, #32]
 800bd48:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bd4a:	9314      	str	r3, [sp, #80]	; 0x50
 800bd4c:	f7f7 f91a 	bl	8002f84 <__aeabi_i2d>
 800bd50:	0022      	movs	r2, r4
 800bd52:	002b      	movs	r3, r5
 800bd54:	f7f6 fac4 	bl	80022e0 <__aeabi_dmul>
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4b99      	ldr	r3, [pc, #612]	; (800bfc0 <_dtoa_r+0x6a0>)
 800bd5c:	f7f5 fb82 	bl	8001464 <__aeabi_dadd>
 800bd60:	9010      	str	r0, [sp, #64]	; 0x40
 800bd62:	9111      	str	r1, [sp, #68]	; 0x44
 800bd64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd68:	9208      	str	r2, [sp, #32]
 800bd6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd6c:	4a95      	ldr	r2, [pc, #596]	; (800bfc4 <_dtoa_r+0x6a4>)
 800bd6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd70:	4694      	mov	ip, r2
 800bd72:	4463      	add	r3, ip
 800bd74:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd76:	9309      	str	r3, [sp, #36]	; 0x24
 800bd78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d161      	bne.n	800be42 <_dtoa_r+0x522>
 800bd7e:	2200      	movs	r2, #0
 800bd80:	0020      	movs	r0, r4
 800bd82:	0029      	movs	r1, r5
 800bd84:	4b90      	ldr	r3, [pc, #576]	; (800bfc8 <_dtoa_r+0x6a8>)
 800bd86:	f7f6 fd17 	bl	80027b8 <__aeabi_dsub>
 800bd8a:	9a08      	ldr	r2, [sp, #32]
 800bd8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd8e:	0004      	movs	r4, r0
 800bd90:	000d      	movs	r5, r1
 800bd92:	f7f4 fb7d 	bl	8000490 <__aeabi_dcmpgt>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d000      	beq.n	800bd9c <_dtoa_r+0x47c>
 800bd9a:	e2af      	b.n	800c2fc <_dtoa_r+0x9dc>
 800bd9c:	488b      	ldr	r0, [pc, #556]	; (800bfcc <_dtoa_r+0x6ac>)
 800bd9e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bda0:	4684      	mov	ip, r0
 800bda2:	4461      	add	r1, ip
 800bda4:	000b      	movs	r3, r1
 800bda6:	0020      	movs	r0, r4
 800bda8:	0029      	movs	r1, r5
 800bdaa:	9a08      	ldr	r2, [sp, #32]
 800bdac:	f7f4 fb5c 	bl	8000468 <__aeabi_dcmplt>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d000      	beq.n	800bdb6 <_dtoa_r+0x496>
 800bdb4:	e29f      	b.n	800c2f6 <_dtoa_r+0x9d6>
 800bdb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800bdba:	9308      	str	r3, [sp, #32]
 800bdbc:	9409      	str	r4, [sp, #36]	; 0x24
 800bdbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	da00      	bge.n	800bdc6 <_dtoa_r+0x4a6>
 800bdc4:	e172      	b.n	800c0ac <_dtoa_r+0x78c>
 800bdc6:	9a02      	ldr	r2, [sp, #8]
 800bdc8:	2a0e      	cmp	r2, #14
 800bdca:	dd00      	ble.n	800bdce <_dtoa_r+0x4ae>
 800bdcc:	e16e      	b.n	800c0ac <_dtoa_r+0x78c>
 800bdce:	4b78      	ldr	r3, [pc, #480]	; (800bfb0 <_dtoa_r+0x690>)
 800bdd0:	00d2      	lsls	r2, r2, #3
 800bdd2:	189b      	adds	r3, r3, r2
 800bdd4:	685c      	ldr	r4, [r3, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	930a      	str	r3, [sp, #40]	; 0x28
 800bdda:	940b      	str	r4, [sp, #44]	; 0x2c
 800bddc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	db00      	blt.n	800bde4 <_dtoa_r+0x4c4>
 800bde2:	e0f7      	b.n	800bfd4 <_dtoa_r+0x6b4>
 800bde4:	9b07      	ldr	r3, [sp, #28]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	dd00      	ble.n	800bdec <_dtoa_r+0x4cc>
 800bdea:	e0f3      	b.n	800bfd4 <_dtoa_r+0x6b4>
 800bdec:	d000      	beq.n	800bdf0 <_dtoa_r+0x4d0>
 800bdee:	e282      	b.n	800c2f6 <_dtoa_r+0x9d6>
 800bdf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bdf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	4b74      	ldr	r3, [pc, #464]	; (800bfc8 <_dtoa_r+0x6a8>)
 800bdf8:	f7f6 fa72 	bl	80022e0 <__aeabi_dmul>
 800bdfc:	9a08      	ldr	r2, [sp, #32]
 800bdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be00:	f7f4 fb50 	bl	80004a4 <__aeabi_dcmpge>
 800be04:	9e07      	ldr	r6, [sp, #28]
 800be06:	0035      	movs	r5, r6
 800be08:	2800      	cmp	r0, #0
 800be0a:	d000      	beq.n	800be0e <_dtoa_r+0x4ee>
 800be0c:	e259      	b.n	800c2c2 <_dtoa_r+0x9a2>
 800be0e:	9b06      	ldr	r3, [sp, #24]
 800be10:	9a06      	ldr	r2, [sp, #24]
 800be12:	3301      	adds	r3, #1
 800be14:	9308      	str	r3, [sp, #32]
 800be16:	2331      	movs	r3, #49	; 0x31
 800be18:	7013      	strb	r3, [r2, #0]
 800be1a:	9b02      	ldr	r3, [sp, #8]
 800be1c:	3301      	adds	r3, #1
 800be1e:	9302      	str	r3, [sp, #8]
 800be20:	e254      	b.n	800c2cc <_dtoa_r+0x9ac>
 800be22:	4234      	tst	r4, r6
 800be24:	d007      	beq.n	800be36 <_dtoa_r+0x516>
 800be26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be28:	3301      	adds	r3, #1
 800be2a:	9310      	str	r3, [sp, #64]	; 0x40
 800be2c:	682a      	ldr	r2, [r5, #0]
 800be2e:	686b      	ldr	r3, [r5, #4]
 800be30:	f7f6 fa56 	bl	80022e0 <__aeabi_dmul>
 800be34:	0033      	movs	r3, r6
 800be36:	1064      	asrs	r4, r4, #1
 800be38:	3508      	adds	r5, #8
 800be3a:	e75a      	b.n	800bcf2 <_dtoa_r+0x3d2>
 800be3c:	9e02      	ldr	r6, [sp, #8]
 800be3e:	9b07      	ldr	r3, [sp, #28]
 800be40:	e780      	b.n	800bd44 <_dtoa_r+0x424>
 800be42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800be46:	1e5a      	subs	r2, r3, #1
 800be48:	4b59      	ldr	r3, [pc, #356]	; (800bfb0 <_dtoa_r+0x690>)
 800be4a:	00d2      	lsls	r2, r2, #3
 800be4c:	189b      	adds	r3, r3, r2
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	2900      	cmp	r1, #0
 800be54:	d051      	beq.n	800befa <_dtoa_r+0x5da>
 800be56:	2000      	movs	r0, #0
 800be58:	495d      	ldr	r1, [pc, #372]	; (800bfd0 <_dtoa_r+0x6b0>)
 800be5a:	f7f5 fe3f 	bl	8001adc <__aeabi_ddiv>
 800be5e:	9a08      	ldr	r2, [sp, #32]
 800be60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be62:	f7f6 fca9 	bl	80027b8 <__aeabi_dsub>
 800be66:	9a06      	ldr	r2, [sp, #24]
 800be68:	9b06      	ldr	r3, [sp, #24]
 800be6a:	4694      	mov	ip, r2
 800be6c:	9317      	str	r3, [sp, #92]	; 0x5c
 800be6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be70:	9010      	str	r0, [sp, #64]	; 0x40
 800be72:	9111      	str	r1, [sp, #68]	; 0x44
 800be74:	4463      	add	r3, ip
 800be76:	9319      	str	r3, [sp, #100]	; 0x64
 800be78:	0029      	movs	r1, r5
 800be7a:	0020      	movs	r0, r4
 800be7c:	f7f7 f84c 	bl	8002f18 <__aeabi_d2iz>
 800be80:	9014      	str	r0, [sp, #80]	; 0x50
 800be82:	f7f7 f87f 	bl	8002f84 <__aeabi_i2d>
 800be86:	0002      	movs	r2, r0
 800be88:	000b      	movs	r3, r1
 800be8a:	0020      	movs	r0, r4
 800be8c:	0029      	movs	r1, r5
 800be8e:	f7f6 fc93 	bl	80027b8 <__aeabi_dsub>
 800be92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800be96:	3301      	adds	r3, #1
 800be98:	9308      	str	r3, [sp, #32]
 800be9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be9c:	0004      	movs	r4, r0
 800be9e:	3330      	adds	r3, #48	; 0x30
 800bea0:	7013      	strb	r3, [r2, #0]
 800bea2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bea4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bea6:	000d      	movs	r5, r1
 800bea8:	f7f4 fade 	bl	8000468 <__aeabi_dcmplt>
 800beac:	2800      	cmp	r0, #0
 800beae:	d175      	bne.n	800bf9c <_dtoa_r+0x67c>
 800beb0:	0022      	movs	r2, r4
 800beb2:	002b      	movs	r3, r5
 800beb4:	2000      	movs	r0, #0
 800beb6:	4940      	ldr	r1, [pc, #256]	; (800bfb8 <_dtoa_r+0x698>)
 800beb8:	f7f6 fc7e 	bl	80027b8 <__aeabi_dsub>
 800bebc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bec0:	f7f4 fad2 	bl	8000468 <__aeabi_dcmplt>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d000      	beq.n	800beca <_dtoa_r+0x5aa>
 800bec8:	e0d2      	b.n	800c070 <_dtoa_r+0x750>
 800beca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800becc:	9a08      	ldr	r2, [sp, #32]
 800bece:	4293      	cmp	r3, r2
 800bed0:	d100      	bne.n	800bed4 <_dtoa_r+0x5b4>
 800bed2:	e770      	b.n	800bdb6 <_dtoa_r+0x496>
 800bed4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bed6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bed8:	2200      	movs	r2, #0
 800beda:	4b38      	ldr	r3, [pc, #224]	; (800bfbc <_dtoa_r+0x69c>)
 800bedc:	f7f6 fa00 	bl	80022e0 <__aeabi_dmul>
 800bee0:	4b36      	ldr	r3, [pc, #216]	; (800bfbc <_dtoa_r+0x69c>)
 800bee2:	9010      	str	r0, [sp, #64]	; 0x40
 800bee4:	9111      	str	r1, [sp, #68]	; 0x44
 800bee6:	2200      	movs	r2, #0
 800bee8:	0020      	movs	r0, r4
 800beea:	0029      	movs	r1, r5
 800beec:	f7f6 f9f8 	bl	80022e0 <__aeabi_dmul>
 800bef0:	9b08      	ldr	r3, [sp, #32]
 800bef2:	0004      	movs	r4, r0
 800bef4:	000d      	movs	r5, r1
 800bef6:	9317      	str	r3, [sp, #92]	; 0x5c
 800bef8:	e7be      	b.n	800be78 <_dtoa_r+0x558>
 800befa:	9808      	ldr	r0, [sp, #32]
 800befc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800befe:	f7f6 f9ef 	bl	80022e0 <__aeabi_dmul>
 800bf02:	9a06      	ldr	r2, [sp, #24]
 800bf04:	9b06      	ldr	r3, [sp, #24]
 800bf06:	4694      	mov	ip, r2
 800bf08:	9308      	str	r3, [sp, #32]
 800bf0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf0c:	9010      	str	r0, [sp, #64]	; 0x40
 800bf0e:	9111      	str	r1, [sp, #68]	; 0x44
 800bf10:	4463      	add	r3, ip
 800bf12:	9319      	str	r3, [sp, #100]	; 0x64
 800bf14:	0029      	movs	r1, r5
 800bf16:	0020      	movs	r0, r4
 800bf18:	f7f6 fffe 	bl	8002f18 <__aeabi_d2iz>
 800bf1c:	9017      	str	r0, [sp, #92]	; 0x5c
 800bf1e:	f7f7 f831 	bl	8002f84 <__aeabi_i2d>
 800bf22:	0002      	movs	r2, r0
 800bf24:	000b      	movs	r3, r1
 800bf26:	0020      	movs	r0, r4
 800bf28:	0029      	movs	r1, r5
 800bf2a:	f7f6 fc45 	bl	80027b8 <__aeabi_dsub>
 800bf2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf30:	9a08      	ldr	r2, [sp, #32]
 800bf32:	3330      	adds	r3, #48	; 0x30
 800bf34:	7013      	strb	r3, [r2, #0]
 800bf36:	0013      	movs	r3, r2
 800bf38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	0004      	movs	r4, r0
 800bf3e:	000d      	movs	r5, r1
 800bf40:	9308      	str	r3, [sp, #32]
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d12c      	bne.n	800bfa0 <_dtoa_r+0x680>
 800bf46:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bf48:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bf4a:	9a06      	ldr	r2, [sp, #24]
 800bf4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf4e:	4694      	mov	ip, r2
 800bf50:	4463      	add	r3, ip
 800bf52:	2200      	movs	r2, #0
 800bf54:	9308      	str	r3, [sp, #32]
 800bf56:	4b1e      	ldr	r3, [pc, #120]	; (800bfd0 <_dtoa_r+0x6b0>)
 800bf58:	f7f5 fa84 	bl	8001464 <__aeabi_dadd>
 800bf5c:	0002      	movs	r2, r0
 800bf5e:	000b      	movs	r3, r1
 800bf60:	0020      	movs	r0, r4
 800bf62:	0029      	movs	r1, r5
 800bf64:	f7f4 fa94 	bl	8000490 <__aeabi_dcmpgt>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d000      	beq.n	800bf6e <_dtoa_r+0x64e>
 800bf6c:	e080      	b.n	800c070 <_dtoa_r+0x750>
 800bf6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bf70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf72:	2000      	movs	r0, #0
 800bf74:	4916      	ldr	r1, [pc, #88]	; (800bfd0 <_dtoa_r+0x6b0>)
 800bf76:	f7f6 fc1f 	bl	80027b8 <__aeabi_dsub>
 800bf7a:	0002      	movs	r2, r0
 800bf7c:	000b      	movs	r3, r1
 800bf7e:	0020      	movs	r0, r4
 800bf80:	0029      	movs	r1, r5
 800bf82:	f7f4 fa71 	bl	8000468 <__aeabi_dcmplt>
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d100      	bne.n	800bf8c <_dtoa_r+0x66c>
 800bf8a:	e714      	b.n	800bdb6 <_dtoa_r+0x496>
 800bf8c:	9b08      	ldr	r3, [sp, #32]
 800bf8e:	001a      	movs	r2, r3
 800bf90:	3a01      	subs	r2, #1
 800bf92:	9208      	str	r2, [sp, #32]
 800bf94:	7812      	ldrb	r2, [r2, #0]
 800bf96:	2a30      	cmp	r2, #48	; 0x30
 800bf98:	d0f8      	beq.n	800bf8c <_dtoa_r+0x66c>
 800bf9a:	9308      	str	r3, [sp, #32]
 800bf9c:	9602      	str	r6, [sp, #8]
 800bf9e:	e055      	b.n	800c04c <_dtoa_r+0x72c>
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	4b06      	ldr	r3, [pc, #24]	; (800bfbc <_dtoa_r+0x69c>)
 800bfa4:	f7f6 f99c 	bl	80022e0 <__aeabi_dmul>
 800bfa8:	0004      	movs	r4, r0
 800bfaa:	000d      	movs	r5, r1
 800bfac:	e7b2      	b.n	800bf14 <_dtoa_r+0x5f4>
 800bfae:	46c0      	nop			; (mov r8, r8)
 800bfb0:	0800e780 	.word	0x0800e780
 800bfb4:	0800e758 	.word	0x0800e758
 800bfb8:	3ff00000 	.word	0x3ff00000
 800bfbc:	40240000 	.word	0x40240000
 800bfc0:	401c0000 	.word	0x401c0000
 800bfc4:	fcc00000 	.word	0xfcc00000
 800bfc8:	40140000 	.word	0x40140000
 800bfcc:	7cc00000 	.word	0x7cc00000
 800bfd0:	3fe00000 	.word	0x3fe00000
 800bfd4:	9b07      	ldr	r3, [sp, #28]
 800bfd6:	9e06      	ldr	r6, [sp, #24]
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	199b      	adds	r3, r3, r6
 800bfdc:	930c      	str	r3, [sp, #48]	; 0x30
 800bfde:	9c08      	ldr	r4, [sp, #32]
 800bfe0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bfe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfe6:	0020      	movs	r0, r4
 800bfe8:	0029      	movs	r1, r5
 800bfea:	f7f5 fd77 	bl	8001adc <__aeabi_ddiv>
 800bfee:	f7f6 ff93 	bl	8002f18 <__aeabi_d2iz>
 800bff2:	9007      	str	r0, [sp, #28]
 800bff4:	f7f6 ffc6 	bl	8002f84 <__aeabi_i2d>
 800bff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bffc:	f7f6 f970 	bl	80022e0 <__aeabi_dmul>
 800c000:	0002      	movs	r2, r0
 800c002:	000b      	movs	r3, r1
 800c004:	0020      	movs	r0, r4
 800c006:	0029      	movs	r1, r5
 800c008:	f7f6 fbd6 	bl	80027b8 <__aeabi_dsub>
 800c00c:	0033      	movs	r3, r6
 800c00e:	9a07      	ldr	r2, [sp, #28]
 800c010:	3601      	adds	r6, #1
 800c012:	3230      	adds	r2, #48	; 0x30
 800c014:	701a      	strb	r2, [r3, #0]
 800c016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c018:	9608      	str	r6, [sp, #32]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d139      	bne.n	800c092 <_dtoa_r+0x772>
 800c01e:	0002      	movs	r2, r0
 800c020:	000b      	movs	r3, r1
 800c022:	f7f5 fa1f 	bl	8001464 <__aeabi_dadd>
 800c026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c02a:	0004      	movs	r4, r0
 800c02c:	000d      	movs	r5, r1
 800c02e:	f7f4 fa2f 	bl	8000490 <__aeabi_dcmpgt>
 800c032:	2800      	cmp	r0, #0
 800c034:	d11b      	bne.n	800c06e <_dtoa_r+0x74e>
 800c036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c03a:	0020      	movs	r0, r4
 800c03c:	0029      	movs	r1, r5
 800c03e:	f7f4 fa0d 	bl	800045c <__aeabi_dcmpeq>
 800c042:	2800      	cmp	r0, #0
 800c044:	d002      	beq.n	800c04c <_dtoa_r+0x72c>
 800c046:	9b07      	ldr	r3, [sp, #28]
 800c048:	07db      	lsls	r3, r3, #31
 800c04a:	d410      	bmi.n	800c06e <_dtoa_r+0x74e>
 800c04c:	0038      	movs	r0, r7
 800c04e:	9905      	ldr	r1, [sp, #20]
 800c050:	f000 fd1c 	bl	800ca8c <_Bfree>
 800c054:	2300      	movs	r3, #0
 800c056:	9a08      	ldr	r2, [sp, #32]
 800c058:	9802      	ldr	r0, [sp, #8]
 800c05a:	7013      	strb	r3, [r2, #0]
 800c05c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c05e:	3001      	adds	r0, #1
 800c060:	6018      	str	r0, [r3, #0]
 800c062:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c064:	2b00      	cmp	r3, #0
 800c066:	d100      	bne.n	800c06a <_dtoa_r+0x74a>
 800c068:	e4a6      	b.n	800b9b8 <_dtoa_r+0x98>
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	e4a4      	b.n	800b9b8 <_dtoa_r+0x98>
 800c06e:	9e02      	ldr	r6, [sp, #8]
 800c070:	9b08      	ldr	r3, [sp, #32]
 800c072:	9308      	str	r3, [sp, #32]
 800c074:	3b01      	subs	r3, #1
 800c076:	781a      	ldrb	r2, [r3, #0]
 800c078:	2a39      	cmp	r2, #57	; 0x39
 800c07a:	d106      	bne.n	800c08a <_dtoa_r+0x76a>
 800c07c:	9a06      	ldr	r2, [sp, #24]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d1f7      	bne.n	800c072 <_dtoa_r+0x752>
 800c082:	2230      	movs	r2, #48	; 0x30
 800c084:	9906      	ldr	r1, [sp, #24]
 800c086:	3601      	adds	r6, #1
 800c088:	700a      	strb	r2, [r1, #0]
 800c08a:	781a      	ldrb	r2, [r3, #0]
 800c08c:	3201      	adds	r2, #1
 800c08e:	701a      	strb	r2, [r3, #0]
 800c090:	e784      	b.n	800bf9c <_dtoa_r+0x67c>
 800c092:	2200      	movs	r2, #0
 800c094:	4baa      	ldr	r3, [pc, #680]	; (800c340 <_dtoa_r+0xa20>)
 800c096:	f7f6 f923 	bl	80022e0 <__aeabi_dmul>
 800c09a:	2200      	movs	r2, #0
 800c09c:	2300      	movs	r3, #0
 800c09e:	0004      	movs	r4, r0
 800c0a0:	000d      	movs	r5, r1
 800c0a2:	f7f4 f9db 	bl	800045c <__aeabi_dcmpeq>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d09b      	beq.n	800bfe2 <_dtoa_r+0x6c2>
 800c0aa:	e7cf      	b.n	800c04c <_dtoa_r+0x72c>
 800c0ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c0ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c0b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c0b2:	2d00      	cmp	r5, #0
 800c0b4:	d012      	beq.n	800c0dc <_dtoa_r+0x7bc>
 800c0b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c0b8:	2a01      	cmp	r2, #1
 800c0ba:	dc66      	bgt.n	800c18a <_dtoa_r+0x86a>
 800c0bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c0be:	2a00      	cmp	r2, #0
 800c0c0:	d05d      	beq.n	800c17e <_dtoa_r+0x85e>
 800c0c2:	4aa0      	ldr	r2, [pc, #640]	; (800c344 <_dtoa_r+0xa24>)
 800c0c4:	189b      	adds	r3, r3, r2
 800c0c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	18d2      	adds	r2, r2, r3
 800c0cc:	920a      	str	r2, [sp, #40]	; 0x28
 800c0ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0d0:	0038      	movs	r0, r7
 800c0d2:	18d3      	adds	r3, r2, r3
 800c0d4:	930d      	str	r3, [sp, #52]	; 0x34
 800c0d6:	f000 fd89 	bl	800cbec <__i2b>
 800c0da:	0005      	movs	r5, r0
 800c0dc:	2c00      	cmp	r4, #0
 800c0de:	dd0e      	ble.n	800c0fe <_dtoa_r+0x7de>
 800c0e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	dd0b      	ble.n	800c0fe <_dtoa_r+0x7de>
 800c0e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0e8:	0023      	movs	r3, r4
 800c0ea:	4294      	cmp	r4, r2
 800c0ec:	dd00      	ble.n	800c0f0 <_dtoa_r+0x7d0>
 800c0ee:	0013      	movs	r3, r2
 800c0f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0f2:	1ae4      	subs	r4, r4, r3
 800c0f4:	1ad2      	subs	r2, r2, r3
 800c0f6:	920a      	str	r2, [sp, #40]	; 0x28
 800c0f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	930d      	str	r3, [sp, #52]	; 0x34
 800c0fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c100:	2b00      	cmp	r3, #0
 800c102:	d01f      	beq.n	800c144 <_dtoa_r+0x824>
 800c104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c106:	2b00      	cmp	r3, #0
 800c108:	d054      	beq.n	800c1b4 <_dtoa_r+0x894>
 800c10a:	2e00      	cmp	r6, #0
 800c10c:	dd11      	ble.n	800c132 <_dtoa_r+0x812>
 800c10e:	0029      	movs	r1, r5
 800c110:	0032      	movs	r2, r6
 800c112:	0038      	movs	r0, r7
 800c114:	f000 fe30 	bl	800cd78 <__pow5mult>
 800c118:	9a05      	ldr	r2, [sp, #20]
 800c11a:	0001      	movs	r1, r0
 800c11c:	0005      	movs	r5, r0
 800c11e:	0038      	movs	r0, r7
 800c120:	f000 fd7a 	bl	800cc18 <__multiply>
 800c124:	9905      	ldr	r1, [sp, #20]
 800c126:	9014      	str	r0, [sp, #80]	; 0x50
 800c128:	0038      	movs	r0, r7
 800c12a:	f000 fcaf 	bl	800ca8c <_Bfree>
 800c12e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c130:	9305      	str	r3, [sp, #20]
 800c132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c134:	1b9a      	subs	r2, r3, r6
 800c136:	42b3      	cmp	r3, r6
 800c138:	d004      	beq.n	800c144 <_dtoa_r+0x824>
 800c13a:	0038      	movs	r0, r7
 800c13c:	9905      	ldr	r1, [sp, #20]
 800c13e:	f000 fe1b 	bl	800cd78 <__pow5mult>
 800c142:	9005      	str	r0, [sp, #20]
 800c144:	2101      	movs	r1, #1
 800c146:	0038      	movs	r0, r7
 800c148:	f000 fd50 	bl	800cbec <__i2b>
 800c14c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c14e:	0006      	movs	r6, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	dd31      	ble.n	800c1b8 <_dtoa_r+0x898>
 800c154:	001a      	movs	r2, r3
 800c156:	0001      	movs	r1, r0
 800c158:	0038      	movs	r0, r7
 800c15a:	f000 fe0d 	bl	800cd78 <__pow5mult>
 800c15e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c160:	0006      	movs	r6, r0
 800c162:	2b01      	cmp	r3, #1
 800c164:	dd2d      	ble.n	800c1c2 <_dtoa_r+0x8a2>
 800c166:	2300      	movs	r3, #0
 800c168:	930e      	str	r3, [sp, #56]	; 0x38
 800c16a:	6933      	ldr	r3, [r6, #16]
 800c16c:	3303      	adds	r3, #3
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	18f3      	adds	r3, r6, r3
 800c172:	6858      	ldr	r0, [r3, #4]
 800c174:	f000 fcf2 	bl	800cb5c <__hi0bits>
 800c178:	2320      	movs	r3, #32
 800c17a:	1a18      	subs	r0, r3, r0
 800c17c:	e039      	b.n	800c1f2 <_dtoa_r+0x8d2>
 800c17e:	2336      	movs	r3, #54	; 0x36
 800c180:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c182:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c184:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c186:	1a9b      	subs	r3, r3, r2
 800c188:	e79d      	b.n	800c0c6 <_dtoa_r+0x7a6>
 800c18a:	9b07      	ldr	r3, [sp, #28]
 800c18c:	1e5e      	subs	r6, r3, #1
 800c18e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c190:	42b3      	cmp	r3, r6
 800c192:	db07      	blt.n	800c1a4 <_dtoa_r+0x884>
 800c194:	1b9e      	subs	r6, r3, r6
 800c196:	9b07      	ldr	r3, [sp, #28]
 800c198:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	da93      	bge.n	800c0c6 <_dtoa_r+0x7a6>
 800c19e:	1ae4      	subs	r4, r4, r3
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e790      	b.n	800c0c6 <_dtoa_r+0x7a6>
 800c1a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c1a8:	1af3      	subs	r3, r6, r3
 800c1aa:	18d3      	adds	r3, r2, r3
 800c1ac:	960e      	str	r6, [sp, #56]	; 0x38
 800c1ae:	9315      	str	r3, [sp, #84]	; 0x54
 800c1b0:	2600      	movs	r6, #0
 800c1b2:	e7f0      	b.n	800c196 <_dtoa_r+0x876>
 800c1b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1b6:	e7c0      	b.n	800c13a <_dtoa_r+0x81a>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	930e      	str	r3, [sp, #56]	; 0x38
 800c1bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	dc13      	bgt.n	800c1ea <_dtoa_r+0x8ca>
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	930e      	str	r3, [sp, #56]	; 0x38
 800c1c6:	9b08      	ldr	r3, [sp, #32]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10e      	bne.n	800c1ea <_dtoa_r+0x8ca>
 800c1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ce:	031b      	lsls	r3, r3, #12
 800c1d0:	d10b      	bne.n	800c1ea <_dtoa_r+0x8ca>
 800c1d2:	4b5d      	ldr	r3, [pc, #372]	; (800c348 <_dtoa_r+0xa28>)
 800c1d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1d6:	4213      	tst	r3, r2
 800c1d8:	d007      	beq.n	800c1ea <_dtoa_r+0x8ca>
 800c1da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1dc:	3301      	adds	r3, #1
 800c1de:	930a      	str	r3, [sp, #40]	; 0x28
 800c1e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	930d      	str	r3, [sp, #52]	; 0x34
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	930e      	str	r3, [sp, #56]	; 0x38
 800c1ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1ec:	2001      	movs	r0, #1
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1bb      	bne.n	800c16a <_dtoa_r+0x84a>
 800c1f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1f4:	221f      	movs	r2, #31
 800c1f6:	1818      	adds	r0, r3, r0
 800c1f8:	0003      	movs	r3, r0
 800c1fa:	4013      	ands	r3, r2
 800c1fc:	4210      	tst	r0, r2
 800c1fe:	d046      	beq.n	800c28e <_dtoa_r+0x96e>
 800c200:	3201      	adds	r2, #1
 800c202:	1ad2      	subs	r2, r2, r3
 800c204:	2a04      	cmp	r2, #4
 800c206:	dd3f      	ble.n	800c288 <_dtoa_r+0x968>
 800c208:	221c      	movs	r2, #28
 800c20a:	1ad3      	subs	r3, r2, r3
 800c20c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c20e:	18e4      	adds	r4, r4, r3
 800c210:	18d2      	adds	r2, r2, r3
 800c212:	920a      	str	r2, [sp, #40]	; 0x28
 800c214:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c216:	18d3      	adds	r3, r2, r3
 800c218:	930d      	str	r3, [sp, #52]	; 0x34
 800c21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	dd05      	ble.n	800c22c <_dtoa_r+0x90c>
 800c220:	001a      	movs	r2, r3
 800c222:	0038      	movs	r0, r7
 800c224:	9905      	ldr	r1, [sp, #20]
 800c226:	f000 fe03 	bl	800ce30 <__lshift>
 800c22a:	9005      	str	r0, [sp, #20]
 800c22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c22e:	2b00      	cmp	r3, #0
 800c230:	dd05      	ble.n	800c23e <_dtoa_r+0x91e>
 800c232:	0031      	movs	r1, r6
 800c234:	001a      	movs	r2, r3
 800c236:	0038      	movs	r0, r7
 800c238:	f000 fdfa 	bl	800ce30 <__lshift>
 800c23c:	0006      	movs	r6, r0
 800c23e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c240:	2b00      	cmp	r3, #0
 800c242:	d026      	beq.n	800c292 <_dtoa_r+0x972>
 800c244:	0031      	movs	r1, r6
 800c246:	9805      	ldr	r0, [sp, #20]
 800c248:	f000 fe60 	bl	800cf0c <__mcmp>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	da20      	bge.n	800c292 <_dtoa_r+0x972>
 800c250:	9b02      	ldr	r3, [sp, #8]
 800c252:	220a      	movs	r2, #10
 800c254:	3b01      	subs	r3, #1
 800c256:	9302      	str	r3, [sp, #8]
 800c258:	0038      	movs	r0, r7
 800c25a:	2300      	movs	r3, #0
 800c25c:	9905      	ldr	r1, [sp, #20]
 800c25e:	f000 fc39 	bl	800cad4 <__multadd>
 800c262:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c264:	9005      	str	r0, [sp, #20]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d100      	bne.n	800c26c <_dtoa_r+0x94c>
 800c26a:	e166      	b.n	800c53a <_dtoa_r+0xc1a>
 800c26c:	2300      	movs	r3, #0
 800c26e:	0029      	movs	r1, r5
 800c270:	220a      	movs	r2, #10
 800c272:	0038      	movs	r0, r7
 800c274:	f000 fc2e 	bl	800cad4 <__multadd>
 800c278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c27a:	0005      	movs	r5, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	dc47      	bgt.n	800c310 <_dtoa_r+0x9f0>
 800c280:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c282:	2b02      	cmp	r3, #2
 800c284:	dc0d      	bgt.n	800c2a2 <_dtoa_r+0x982>
 800c286:	e043      	b.n	800c310 <_dtoa_r+0x9f0>
 800c288:	2a04      	cmp	r2, #4
 800c28a:	d0c6      	beq.n	800c21a <_dtoa_r+0x8fa>
 800c28c:	0013      	movs	r3, r2
 800c28e:	331c      	adds	r3, #28
 800c290:	e7bc      	b.n	800c20c <_dtoa_r+0x8ec>
 800c292:	9b07      	ldr	r3, [sp, #28]
 800c294:	2b00      	cmp	r3, #0
 800c296:	dc35      	bgt.n	800c304 <_dtoa_r+0x9e4>
 800c298:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	dd32      	ble.n	800c304 <_dtoa_r+0x9e4>
 800c29e:	9b07      	ldr	r3, [sp, #28]
 800c2a0:	930c      	str	r3, [sp, #48]	; 0x30
 800c2a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10c      	bne.n	800c2c2 <_dtoa_r+0x9a2>
 800c2a8:	0031      	movs	r1, r6
 800c2aa:	2205      	movs	r2, #5
 800c2ac:	0038      	movs	r0, r7
 800c2ae:	f000 fc11 	bl	800cad4 <__multadd>
 800c2b2:	0006      	movs	r6, r0
 800c2b4:	0001      	movs	r1, r0
 800c2b6:	9805      	ldr	r0, [sp, #20]
 800c2b8:	f000 fe28 	bl	800cf0c <__mcmp>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	dd00      	ble.n	800c2c2 <_dtoa_r+0x9a2>
 800c2c0:	e5a5      	b.n	800be0e <_dtoa_r+0x4ee>
 800c2c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c2c4:	43db      	mvns	r3, r3
 800c2c6:	9302      	str	r3, [sp, #8]
 800c2c8:	9b06      	ldr	r3, [sp, #24]
 800c2ca:	9308      	str	r3, [sp, #32]
 800c2cc:	2400      	movs	r4, #0
 800c2ce:	0031      	movs	r1, r6
 800c2d0:	0038      	movs	r0, r7
 800c2d2:	f000 fbdb 	bl	800ca8c <_Bfree>
 800c2d6:	2d00      	cmp	r5, #0
 800c2d8:	d100      	bne.n	800c2dc <_dtoa_r+0x9bc>
 800c2da:	e6b7      	b.n	800c04c <_dtoa_r+0x72c>
 800c2dc:	2c00      	cmp	r4, #0
 800c2de:	d005      	beq.n	800c2ec <_dtoa_r+0x9cc>
 800c2e0:	42ac      	cmp	r4, r5
 800c2e2:	d003      	beq.n	800c2ec <_dtoa_r+0x9cc>
 800c2e4:	0021      	movs	r1, r4
 800c2e6:	0038      	movs	r0, r7
 800c2e8:	f000 fbd0 	bl	800ca8c <_Bfree>
 800c2ec:	0029      	movs	r1, r5
 800c2ee:	0038      	movs	r0, r7
 800c2f0:	f000 fbcc 	bl	800ca8c <_Bfree>
 800c2f4:	e6aa      	b.n	800c04c <_dtoa_r+0x72c>
 800c2f6:	2600      	movs	r6, #0
 800c2f8:	0035      	movs	r5, r6
 800c2fa:	e7e2      	b.n	800c2c2 <_dtoa_r+0x9a2>
 800c2fc:	9602      	str	r6, [sp, #8]
 800c2fe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c300:	0035      	movs	r5, r6
 800c302:	e584      	b.n	800be0e <_dtoa_r+0x4ee>
 800c304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c306:	2b00      	cmp	r3, #0
 800c308:	d100      	bne.n	800c30c <_dtoa_r+0x9ec>
 800c30a:	e0ce      	b.n	800c4aa <_dtoa_r+0xb8a>
 800c30c:	9b07      	ldr	r3, [sp, #28]
 800c30e:	930c      	str	r3, [sp, #48]	; 0x30
 800c310:	2c00      	cmp	r4, #0
 800c312:	dd05      	ble.n	800c320 <_dtoa_r+0xa00>
 800c314:	0029      	movs	r1, r5
 800c316:	0022      	movs	r2, r4
 800c318:	0038      	movs	r0, r7
 800c31a:	f000 fd89 	bl	800ce30 <__lshift>
 800c31e:	0005      	movs	r5, r0
 800c320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c322:	0028      	movs	r0, r5
 800c324:	2b00      	cmp	r3, #0
 800c326:	d022      	beq.n	800c36e <_dtoa_r+0xa4e>
 800c328:	0038      	movs	r0, r7
 800c32a:	6869      	ldr	r1, [r5, #4]
 800c32c:	f000 fb6a 	bl	800ca04 <_Balloc>
 800c330:	1e04      	subs	r4, r0, #0
 800c332:	d10f      	bne.n	800c354 <_dtoa_r+0xa34>
 800c334:	0002      	movs	r2, r0
 800c336:	4b05      	ldr	r3, [pc, #20]	; (800c34c <_dtoa_r+0xa2c>)
 800c338:	4905      	ldr	r1, [pc, #20]	; (800c350 <_dtoa_r+0xa30>)
 800c33a:	f7ff fb06 	bl	800b94a <_dtoa_r+0x2a>
 800c33e:	46c0      	nop			; (mov r8, r8)
 800c340:	40240000 	.word	0x40240000
 800c344:	00000433 	.word	0x00000433
 800c348:	7ff00000 	.word	0x7ff00000
 800c34c:	0800e684 	.word	0x0800e684
 800c350:	000002ea 	.word	0x000002ea
 800c354:	0029      	movs	r1, r5
 800c356:	692b      	ldr	r3, [r5, #16]
 800c358:	310c      	adds	r1, #12
 800c35a:	1c9a      	adds	r2, r3, #2
 800c35c:	0092      	lsls	r2, r2, #2
 800c35e:	300c      	adds	r0, #12
 800c360:	f7fe fbd4 	bl	800ab0c <memcpy>
 800c364:	2201      	movs	r2, #1
 800c366:	0021      	movs	r1, r4
 800c368:	0038      	movs	r0, r7
 800c36a:	f000 fd61 	bl	800ce30 <__lshift>
 800c36e:	9b06      	ldr	r3, [sp, #24]
 800c370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c372:	930a      	str	r3, [sp, #40]	; 0x28
 800c374:	3b01      	subs	r3, #1
 800c376:	189b      	adds	r3, r3, r2
 800c378:	2201      	movs	r2, #1
 800c37a:	002c      	movs	r4, r5
 800c37c:	0005      	movs	r5, r0
 800c37e:	9314      	str	r3, [sp, #80]	; 0x50
 800c380:	9b08      	ldr	r3, [sp, #32]
 800c382:	4013      	ands	r3, r2
 800c384:	930f      	str	r3, [sp, #60]	; 0x3c
 800c386:	0031      	movs	r1, r6
 800c388:	9805      	ldr	r0, [sp, #20]
 800c38a:	f7ff fa3d 	bl	800b808 <quorem>
 800c38e:	0003      	movs	r3, r0
 800c390:	0021      	movs	r1, r4
 800c392:	3330      	adds	r3, #48	; 0x30
 800c394:	900d      	str	r0, [sp, #52]	; 0x34
 800c396:	9805      	ldr	r0, [sp, #20]
 800c398:	9307      	str	r3, [sp, #28]
 800c39a:	f000 fdb7 	bl	800cf0c <__mcmp>
 800c39e:	002a      	movs	r2, r5
 800c3a0:	900e      	str	r0, [sp, #56]	; 0x38
 800c3a2:	0031      	movs	r1, r6
 800c3a4:	0038      	movs	r0, r7
 800c3a6:	f000 fdcd 	bl	800cf44 <__mdiff>
 800c3aa:	68c3      	ldr	r3, [r0, #12]
 800c3ac:	9008      	str	r0, [sp, #32]
 800c3ae:	9310      	str	r3, [sp, #64]	; 0x40
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	930c      	str	r3, [sp, #48]	; 0x30
 800c3b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d104      	bne.n	800c3c4 <_dtoa_r+0xaa4>
 800c3ba:	0001      	movs	r1, r0
 800c3bc:	9805      	ldr	r0, [sp, #20]
 800c3be:	f000 fda5 	bl	800cf0c <__mcmp>
 800c3c2:	900c      	str	r0, [sp, #48]	; 0x30
 800c3c4:	0038      	movs	r0, r7
 800c3c6:	9908      	ldr	r1, [sp, #32]
 800c3c8:	f000 fb60 	bl	800ca8c <_Bfree>
 800c3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	9308      	str	r3, [sp, #32]
 800c3d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	d10c      	bne.n	800c3f8 <_dtoa_r+0xad8>
 800c3de:	9b07      	ldr	r3, [sp, #28]
 800c3e0:	2b39      	cmp	r3, #57	; 0x39
 800c3e2:	d026      	beq.n	800c432 <_dtoa_r+0xb12>
 800c3e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	dd02      	ble.n	800c3f0 <_dtoa_r+0xad0>
 800c3ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3ec:	3331      	adds	r3, #49	; 0x31
 800c3ee:	9307      	str	r3, [sp, #28]
 800c3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3f2:	9a07      	ldr	r2, [sp, #28]
 800c3f4:	701a      	strb	r2, [r3, #0]
 800c3f6:	e76a      	b.n	800c2ce <_dtoa_r+0x9ae>
 800c3f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	db04      	blt.n	800c408 <_dtoa_r+0xae8>
 800c3fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c400:	4313      	orrs	r3, r2
 800c402:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c404:	4313      	orrs	r3, r2
 800c406:	d11f      	bne.n	800c448 <_dtoa_r+0xb28>
 800c408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	ddf0      	ble.n	800c3f0 <_dtoa_r+0xad0>
 800c40e:	9905      	ldr	r1, [sp, #20]
 800c410:	2201      	movs	r2, #1
 800c412:	0038      	movs	r0, r7
 800c414:	f000 fd0c 	bl	800ce30 <__lshift>
 800c418:	0031      	movs	r1, r6
 800c41a:	9005      	str	r0, [sp, #20]
 800c41c:	f000 fd76 	bl	800cf0c <__mcmp>
 800c420:	2800      	cmp	r0, #0
 800c422:	dc03      	bgt.n	800c42c <_dtoa_r+0xb0c>
 800c424:	d1e4      	bne.n	800c3f0 <_dtoa_r+0xad0>
 800c426:	9b07      	ldr	r3, [sp, #28]
 800c428:	07db      	lsls	r3, r3, #31
 800c42a:	d5e1      	bpl.n	800c3f0 <_dtoa_r+0xad0>
 800c42c:	9b07      	ldr	r3, [sp, #28]
 800c42e:	2b39      	cmp	r3, #57	; 0x39
 800c430:	d1db      	bne.n	800c3ea <_dtoa_r+0xaca>
 800c432:	2339      	movs	r3, #57	; 0x39
 800c434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c436:	7013      	strb	r3, [r2, #0]
 800c438:	9b08      	ldr	r3, [sp, #32]
 800c43a:	9308      	str	r3, [sp, #32]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	781a      	ldrb	r2, [r3, #0]
 800c440:	2a39      	cmp	r2, #57	; 0x39
 800c442:	d068      	beq.n	800c516 <_dtoa_r+0xbf6>
 800c444:	3201      	adds	r2, #1
 800c446:	e7d5      	b.n	800c3f4 <_dtoa_r+0xad4>
 800c448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	dd07      	ble.n	800c45e <_dtoa_r+0xb3e>
 800c44e:	9b07      	ldr	r3, [sp, #28]
 800c450:	2b39      	cmp	r3, #57	; 0x39
 800c452:	d0ee      	beq.n	800c432 <_dtoa_r+0xb12>
 800c454:	9b07      	ldr	r3, [sp, #28]
 800c456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c458:	3301      	adds	r3, #1
 800c45a:	7013      	strb	r3, [r2, #0]
 800c45c:	e737      	b.n	800c2ce <_dtoa_r+0x9ae>
 800c45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c460:	9a07      	ldr	r2, [sp, #28]
 800c462:	701a      	strb	r2, [r3, #0]
 800c464:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c468:	4293      	cmp	r3, r2
 800c46a:	d03e      	beq.n	800c4ea <_dtoa_r+0xbca>
 800c46c:	2300      	movs	r3, #0
 800c46e:	220a      	movs	r2, #10
 800c470:	9905      	ldr	r1, [sp, #20]
 800c472:	0038      	movs	r0, r7
 800c474:	f000 fb2e 	bl	800cad4 <__multadd>
 800c478:	2300      	movs	r3, #0
 800c47a:	9005      	str	r0, [sp, #20]
 800c47c:	220a      	movs	r2, #10
 800c47e:	0021      	movs	r1, r4
 800c480:	0038      	movs	r0, r7
 800c482:	42ac      	cmp	r4, r5
 800c484:	d106      	bne.n	800c494 <_dtoa_r+0xb74>
 800c486:	f000 fb25 	bl	800cad4 <__multadd>
 800c48a:	0004      	movs	r4, r0
 800c48c:	0005      	movs	r5, r0
 800c48e:	9b08      	ldr	r3, [sp, #32]
 800c490:	930a      	str	r3, [sp, #40]	; 0x28
 800c492:	e778      	b.n	800c386 <_dtoa_r+0xa66>
 800c494:	f000 fb1e 	bl	800cad4 <__multadd>
 800c498:	0029      	movs	r1, r5
 800c49a:	0004      	movs	r4, r0
 800c49c:	2300      	movs	r3, #0
 800c49e:	220a      	movs	r2, #10
 800c4a0:	0038      	movs	r0, r7
 800c4a2:	f000 fb17 	bl	800cad4 <__multadd>
 800c4a6:	0005      	movs	r5, r0
 800c4a8:	e7f1      	b.n	800c48e <_dtoa_r+0xb6e>
 800c4aa:	9b07      	ldr	r3, [sp, #28]
 800c4ac:	930c      	str	r3, [sp, #48]	; 0x30
 800c4ae:	2400      	movs	r4, #0
 800c4b0:	0031      	movs	r1, r6
 800c4b2:	9805      	ldr	r0, [sp, #20]
 800c4b4:	f7ff f9a8 	bl	800b808 <quorem>
 800c4b8:	9b06      	ldr	r3, [sp, #24]
 800c4ba:	3030      	adds	r0, #48	; 0x30
 800c4bc:	5518      	strb	r0, [r3, r4]
 800c4be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4c0:	3401      	adds	r4, #1
 800c4c2:	9007      	str	r0, [sp, #28]
 800c4c4:	42a3      	cmp	r3, r4
 800c4c6:	dd07      	ble.n	800c4d8 <_dtoa_r+0xbb8>
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	220a      	movs	r2, #10
 800c4cc:	0038      	movs	r0, r7
 800c4ce:	9905      	ldr	r1, [sp, #20]
 800c4d0:	f000 fb00 	bl	800cad4 <__multadd>
 800c4d4:	9005      	str	r0, [sp, #20]
 800c4d6:	e7eb      	b.n	800c4b0 <_dtoa_r+0xb90>
 800c4d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4da:	2001      	movs	r0, #1
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	dd00      	ble.n	800c4e2 <_dtoa_r+0xbc2>
 800c4e0:	0018      	movs	r0, r3
 800c4e2:	2400      	movs	r4, #0
 800c4e4:	9b06      	ldr	r3, [sp, #24]
 800c4e6:	181b      	adds	r3, r3, r0
 800c4e8:	9308      	str	r3, [sp, #32]
 800c4ea:	9905      	ldr	r1, [sp, #20]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	0038      	movs	r0, r7
 800c4f0:	f000 fc9e 	bl	800ce30 <__lshift>
 800c4f4:	0031      	movs	r1, r6
 800c4f6:	9005      	str	r0, [sp, #20]
 800c4f8:	f000 fd08 	bl	800cf0c <__mcmp>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	dc9b      	bgt.n	800c438 <_dtoa_r+0xb18>
 800c500:	d102      	bne.n	800c508 <_dtoa_r+0xbe8>
 800c502:	9b07      	ldr	r3, [sp, #28]
 800c504:	07db      	lsls	r3, r3, #31
 800c506:	d497      	bmi.n	800c438 <_dtoa_r+0xb18>
 800c508:	9b08      	ldr	r3, [sp, #32]
 800c50a:	9308      	str	r3, [sp, #32]
 800c50c:	3b01      	subs	r3, #1
 800c50e:	781a      	ldrb	r2, [r3, #0]
 800c510:	2a30      	cmp	r2, #48	; 0x30
 800c512:	d0fa      	beq.n	800c50a <_dtoa_r+0xbea>
 800c514:	e6db      	b.n	800c2ce <_dtoa_r+0x9ae>
 800c516:	9a06      	ldr	r2, [sp, #24]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d18e      	bne.n	800c43a <_dtoa_r+0xb1a>
 800c51c:	9b02      	ldr	r3, [sp, #8]
 800c51e:	3301      	adds	r3, #1
 800c520:	9302      	str	r3, [sp, #8]
 800c522:	2331      	movs	r3, #49	; 0x31
 800c524:	e799      	b.n	800c45a <_dtoa_r+0xb3a>
 800c526:	4b09      	ldr	r3, [pc, #36]	; (800c54c <_dtoa_r+0xc2c>)
 800c528:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c52a:	9306      	str	r3, [sp, #24]
 800c52c:	4b08      	ldr	r3, [pc, #32]	; (800c550 <_dtoa_r+0xc30>)
 800c52e:	2a00      	cmp	r2, #0
 800c530:	d001      	beq.n	800c536 <_dtoa_r+0xc16>
 800c532:	f7ff fa3f 	bl	800b9b4 <_dtoa_r+0x94>
 800c536:	f7ff fa3f 	bl	800b9b8 <_dtoa_r+0x98>
 800c53a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	dcb6      	bgt.n	800c4ae <_dtoa_r+0xb8e>
 800c540:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c542:	2b02      	cmp	r3, #2
 800c544:	dd00      	ble.n	800c548 <_dtoa_r+0xc28>
 800c546:	e6ac      	b.n	800c2a2 <_dtoa_r+0x982>
 800c548:	e7b1      	b.n	800c4ae <_dtoa_r+0xb8e>
 800c54a:	46c0      	nop			; (mov r8, r8)
 800c54c:	0800e605 	.word	0x0800e605
 800c550:	0800e60d 	.word	0x0800e60d

0800c554 <__sflush_r>:
 800c554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c556:	898b      	ldrh	r3, [r1, #12]
 800c558:	0005      	movs	r5, r0
 800c55a:	000c      	movs	r4, r1
 800c55c:	071a      	lsls	r2, r3, #28
 800c55e:	d45f      	bmi.n	800c620 <__sflush_r+0xcc>
 800c560:	684a      	ldr	r2, [r1, #4]
 800c562:	2a00      	cmp	r2, #0
 800c564:	dc04      	bgt.n	800c570 <__sflush_r+0x1c>
 800c566:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c568:	2a00      	cmp	r2, #0
 800c56a:	dc01      	bgt.n	800c570 <__sflush_r+0x1c>
 800c56c:	2000      	movs	r0, #0
 800c56e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c570:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c572:	2f00      	cmp	r7, #0
 800c574:	d0fa      	beq.n	800c56c <__sflush_r+0x18>
 800c576:	2200      	movs	r2, #0
 800c578:	2180      	movs	r1, #128	; 0x80
 800c57a:	682e      	ldr	r6, [r5, #0]
 800c57c:	602a      	str	r2, [r5, #0]
 800c57e:	001a      	movs	r2, r3
 800c580:	0149      	lsls	r1, r1, #5
 800c582:	400a      	ands	r2, r1
 800c584:	420b      	tst	r3, r1
 800c586:	d034      	beq.n	800c5f2 <__sflush_r+0x9e>
 800c588:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c58a:	89a3      	ldrh	r3, [r4, #12]
 800c58c:	075b      	lsls	r3, r3, #29
 800c58e:	d506      	bpl.n	800c59e <__sflush_r+0x4a>
 800c590:	6863      	ldr	r3, [r4, #4]
 800c592:	1ac0      	subs	r0, r0, r3
 800c594:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c596:	2b00      	cmp	r3, #0
 800c598:	d001      	beq.n	800c59e <__sflush_r+0x4a>
 800c59a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c59c:	1ac0      	subs	r0, r0, r3
 800c59e:	0002      	movs	r2, r0
 800c5a0:	6a21      	ldr	r1, [r4, #32]
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	0028      	movs	r0, r5
 800c5a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c5a8:	47b8      	blx	r7
 800c5aa:	89a1      	ldrh	r1, [r4, #12]
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	d106      	bne.n	800c5be <__sflush_r+0x6a>
 800c5b0:	682b      	ldr	r3, [r5, #0]
 800c5b2:	2b1d      	cmp	r3, #29
 800c5b4:	d831      	bhi.n	800c61a <__sflush_r+0xc6>
 800c5b6:	4a2c      	ldr	r2, [pc, #176]	; (800c668 <__sflush_r+0x114>)
 800c5b8:	40da      	lsrs	r2, r3
 800c5ba:	07d3      	lsls	r3, r2, #31
 800c5bc:	d52d      	bpl.n	800c61a <__sflush_r+0xc6>
 800c5be:	2300      	movs	r3, #0
 800c5c0:	6063      	str	r3, [r4, #4]
 800c5c2:	6923      	ldr	r3, [r4, #16]
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	04cb      	lsls	r3, r1, #19
 800c5c8:	d505      	bpl.n	800c5d6 <__sflush_r+0x82>
 800c5ca:	1c43      	adds	r3, r0, #1
 800c5cc:	d102      	bne.n	800c5d4 <__sflush_r+0x80>
 800c5ce:	682b      	ldr	r3, [r5, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d100      	bne.n	800c5d6 <__sflush_r+0x82>
 800c5d4:	6560      	str	r0, [r4, #84]	; 0x54
 800c5d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5d8:	602e      	str	r6, [r5, #0]
 800c5da:	2900      	cmp	r1, #0
 800c5dc:	d0c6      	beq.n	800c56c <__sflush_r+0x18>
 800c5de:	0023      	movs	r3, r4
 800c5e0:	3344      	adds	r3, #68	; 0x44
 800c5e2:	4299      	cmp	r1, r3
 800c5e4:	d002      	beq.n	800c5ec <__sflush_r+0x98>
 800c5e6:	0028      	movs	r0, r5
 800c5e8:	f000 fdd4 	bl	800d194 <_free_r>
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	6360      	str	r0, [r4, #52]	; 0x34
 800c5f0:	e7bd      	b.n	800c56e <__sflush_r+0x1a>
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	0028      	movs	r0, r5
 800c5f6:	6a21      	ldr	r1, [r4, #32]
 800c5f8:	47b8      	blx	r7
 800c5fa:	1c43      	adds	r3, r0, #1
 800c5fc:	d1c5      	bne.n	800c58a <__sflush_r+0x36>
 800c5fe:	682b      	ldr	r3, [r5, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d0c2      	beq.n	800c58a <__sflush_r+0x36>
 800c604:	2b1d      	cmp	r3, #29
 800c606:	d001      	beq.n	800c60c <__sflush_r+0xb8>
 800c608:	2b16      	cmp	r3, #22
 800c60a:	d101      	bne.n	800c610 <__sflush_r+0xbc>
 800c60c:	602e      	str	r6, [r5, #0]
 800c60e:	e7ad      	b.n	800c56c <__sflush_r+0x18>
 800c610:	2340      	movs	r3, #64	; 0x40
 800c612:	89a2      	ldrh	r2, [r4, #12]
 800c614:	4313      	orrs	r3, r2
 800c616:	81a3      	strh	r3, [r4, #12]
 800c618:	e7a9      	b.n	800c56e <__sflush_r+0x1a>
 800c61a:	2340      	movs	r3, #64	; 0x40
 800c61c:	430b      	orrs	r3, r1
 800c61e:	e7fa      	b.n	800c616 <__sflush_r+0xc2>
 800c620:	690f      	ldr	r7, [r1, #16]
 800c622:	2f00      	cmp	r7, #0
 800c624:	d0a2      	beq.n	800c56c <__sflush_r+0x18>
 800c626:	680a      	ldr	r2, [r1, #0]
 800c628:	600f      	str	r7, [r1, #0]
 800c62a:	1bd2      	subs	r2, r2, r7
 800c62c:	9201      	str	r2, [sp, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	079b      	lsls	r3, r3, #30
 800c632:	d100      	bne.n	800c636 <__sflush_r+0xe2>
 800c634:	694a      	ldr	r2, [r1, #20]
 800c636:	60a2      	str	r2, [r4, #8]
 800c638:	9b01      	ldr	r3, [sp, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	dc00      	bgt.n	800c640 <__sflush_r+0xec>
 800c63e:	e795      	b.n	800c56c <__sflush_r+0x18>
 800c640:	003a      	movs	r2, r7
 800c642:	0028      	movs	r0, r5
 800c644:	9b01      	ldr	r3, [sp, #4]
 800c646:	6a21      	ldr	r1, [r4, #32]
 800c648:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c64a:	47b0      	blx	r6
 800c64c:	2800      	cmp	r0, #0
 800c64e:	dc06      	bgt.n	800c65e <__sflush_r+0x10a>
 800c650:	2340      	movs	r3, #64	; 0x40
 800c652:	2001      	movs	r0, #1
 800c654:	89a2      	ldrh	r2, [r4, #12]
 800c656:	4240      	negs	r0, r0
 800c658:	4313      	orrs	r3, r2
 800c65a:	81a3      	strh	r3, [r4, #12]
 800c65c:	e787      	b.n	800c56e <__sflush_r+0x1a>
 800c65e:	9b01      	ldr	r3, [sp, #4]
 800c660:	183f      	adds	r7, r7, r0
 800c662:	1a1b      	subs	r3, r3, r0
 800c664:	9301      	str	r3, [sp, #4]
 800c666:	e7e7      	b.n	800c638 <__sflush_r+0xe4>
 800c668:	20400001 	.word	0x20400001

0800c66c <_fflush_r>:
 800c66c:	690b      	ldr	r3, [r1, #16]
 800c66e:	b570      	push	{r4, r5, r6, lr}
 800c670:	0005      	movs	r5, r0
 800c672:	000c      	movs	r4, r1
 800c674:	2b00      	cmp	r3, #0
 800c676:	d102      	bne.n	800c67e <_fflush_r+0x12>
 800c678:	2500      	movs	r5, #0
 800c67a:	0028      	movs	r0, r5
 800c67c:	bd70      	pop	{r4, r5, r6, pc}
 800c67e:	2800      	cmp	r0, #0
 800c680:	d004      	beq.n	800c68c <_fflush_r+0x20>
 800c682:	6983      	ldr	r3, [r0, #24]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d101      	bne.n	800c68c <_fflush_r+0x20>
 800c688:	f000 f892 	bl	800c7b0 <__sinit>
 800c68c:	4b14      	ldr	r3, [pc, #80]	; (800c6e0 <_fflush_r+0x74>)
 800c68e:	429c      	cmp	r4, r3
 800c690:	d11b      	bne.n	800c6ca <_fflush_r+0x5e>
 800c692:	686c      	ldr	r4, [r5, #4]
 800c694:	220c      	movs	r2, #12
 800c696:	5ea3      	ldrsh	r3, [r4, r2]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d0ed      	beq.n	800c678 <_fflush_r+0xc>
 800c69c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c69e:	07d2      	lsls	r2, r2, #31
 800c6a0:	d404      	bmi.n	800c6ac <_fflush_r+0x40>
 800c6a2:	059b      	lsls	r3, r3, #22
 800c6a4:	d402      	bmi.n	800c6ac <_fflush_r+0x40>
 800c6a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6a8:	f000 f927 	bl	800c8fa <__retarget_lock_acquire_recursive>
 800c6ac:	0028      	movs	r0, r5
 800c6ae:	0021      	movs	r1, r4
 800c6b0:	f7ff ff50 	bl	800c554 <__sflush_r>
 800c6b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6b6:	0005      	movs	r5, r0
 800c6b8:	07db      	lsls	r3, r3, #31
 800c6ba:	d4de      	bmi.n	800c67a <_fflush_r+0xe>
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	059b      	lsls	r3, r3, #22
 800c6c0:	d4db      	bmi.n	800c67a <_fflush_r+0xe>
 800c6c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6c4:	f000 f91a 	bl	800c8fc <__retarget_lock_release_recursive>
 800c6c8:	e7d7      	b.n	800c67a <_fflush_r+0xe>
 800c6ca:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <_fflush_r+0x78>)
 800c6cc:	429c      	cmp	r4, r3
 800c6ce:	d101      	bne.n	800c6d4 <_fflush_r+0x68>
 800c6d0:	68ac      	ldr	r4, [r5, #8]
 800c6d2:	e7df      	b.n	800c694 <_fflush_r+0x28>
 800c6d4:	4b04      	ldr	r3, [pc, #16]	; (800c6e8 <_fflush_r+0x7c>)
 800c6d6:	429c      	cmp	r4, r3
 800c6d8:	d1dc      	bne.n	800c694 <_fflush_r+0x28>
 800c6da:	68ec      	ldr	r4, [r5, #12]
 800c6dc:	e7da      	b.n	800c694 <_fflush_r+0x28>
 800c6de:	46c0      	nop			; (mov r8, r8)
 800c6e0:	0800e6b8 	.word	0x0800e6b8
 800c6e4:	0800e6d8 	.word	0x0800e6d8
 800c6e8:	0800e698 	.word	0x0800e698

0800c6ec <std>:
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	b510      	push	{r4, lr}
 800c6f0:	0004      	movs	r4, r0
 800c6f2:	6003      	str	r3, [r0, #0]
 800c6f4:	6043      	str	r3, [r0, #4]
 800c6f6:	6083      	str	r3, [r0, #8]
 800c6f8:	8181      	strh	r1, [r0, #12]
 800c6fa:	6643      	str	r3, [r0, #100]	; 0x64
 800c6fc:	0019      	movs	r1, r3
 800c6fe:	81c2      	strh	r2, [r0, #14]
 800c700:	6103      	str	r3, [r0, #16]
 800c702:	6143      	str	r3, [r0, #20]
 800c704:	6183      	str	r3, [r0, #24]
 800c706:	2208      	movs	r2, #8
 800c708:	305c      	adds	r0, #92	; 0x5c
 800c70a:	f7fe fa08 	bl	800ab1e <memset>
 800c70e:	4b05      	ldr	r3, [pc, #20]	; (800c724 <std+0x38>)
 800c710:	6224      	str	r4, [r4, #32]
 800c712:	6263      	str	r3, [r4, #36]	; 0x24
 800c714:	4b04      	ldr	r3, [pc, #16]	; (800c728 <std+0x3c>)
 800c716:	62a3      	str	r3, [r4, #40]	; 0x28
 800c718:	4b04      	ldr	r3, [pc, #16]	; (800c72c <std+0x40>)
 800c71a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c71c:	4b04      	ldr	r3, [pc, #16]	; (800c730 <std+0x44>)
 800c71e:	6323      	str	r3, [r4, #48]	; 0x30
 800c720:	bd10      	pop	{r4, pc}
 800c722:	46c0      	nop			; (mov r8, r8)
 800c724:	0800d641 	.word	0x0800d641
 800c728:	0800d669 	.word	0x0800d669
 800c72c:	0800d6a1 	.word	0x0800d6a1
 800c730:	0800d6cd 	.word	0x0800d6cd

0800c734 <_cleanup_r>:
 800c734:	b510      	push	{r4, lr}
 800c736:	4902      	ldr	r1, [pc, #8]	; (800c740 <_cleanup_r+0xc>)
 800c738:	f000 f8ba 	bl	800c8b0 <_fwalk_reent>
 800c73c:	bd10      	pop	{r4, pc}
 800c73e:	46c0      	nop			; (mov r8, r8)
 800c740:	0800c66d 	.word	0x0800c66d

0800c744 <__sfmoreglue>:
 800c744:	b570      	push	{r4, r5, r6, lr}
 800c746:	2568      	movs	r5, #104	; 0x68
 800c748:	1e4a      	subs	r2, r1, #1
 800c74a:	4355      	muls	r5, r2
 800c74c:	000e      	movs	r6, r1
 800c74e:	0029      	movs	r1, r5
 800c750:	3174      	adds	r1, #116	; 0x74
 800c752:	f000 fd8b 	bl	800d26c <_malloc_r>
 800c756:	1e04      	subs	r4, r0, #0
 800c758:	d008      	beq.n	800c76c <__sfmoreglue+0x28>
 800c75a:	2100      	movs	r1, #0
 800c75c:	002a      	movs	r2, r5
 800c75e:	6001      	str	r1, [r0, #0]
 800c760:	6046      	str	r6, [r0, #4]
 800c762:	300c      	adds	r0, #12
 800c764:	60a0      	str	r0, [r4, #8]
 800c766:	3268      	adds	r2, #104	; 0x68
 800c768:	f7fe f9d9 	bl	800ab1e <memset>
 800c76c:	0020      	movs	r0, r4
 800c76e:	bd70      	pop	{r4, r5, r6, pc}

0800c770 <__sfp_lock_acquire>:
 800c770:	b510      	push	{r4, lr}
 800c772:	4802      	ldr	r0, [pc, #8]	; (800c77c <__sfp_lock_acquire+0xc>)
 800c774:	f000 f8c1 	bl	800c8fa <__retarget_lock_acquire_recursive>
 800c778:	bd10      	pop	{r4, pc}
 800c77a:	46c0      	nop			; (mov r8, r8)
 800c77c:	200008f5 	.word	0x200008f5

0800c780 <__sfp_lock_release>:
 800c780:	b510      	push	{r4, lr}
 800c782:	4802      	ldr	r0, [pc, #8]	; (800c78c <__sfp_lock_release+0xc>)
 800c784:	f000 f8ba 	bl	800c8fc <__retarget_lock_release_recursive>
 800c788:	bd10      	pop	{r4, pc}
 800c78a:	46c0      	nop			; (mov r8, r8)
 800c78c:	200008f5 	.word	0x200008f5

0800c790 <__sinit_lock_acquire>:
 800c790:	b510      	push	{r4, lr}
 800c792:	4802      	ldr	r0, [pc, #8]	; (800c79c <__sinit_lock_acquire+0xc>)
 800c794:	f000 f8b1 	bl	800c8fa <__retarget_lock_acquire_recursive>
 800c798:	bd10      	pop	{r4, pc}
 800c79a:	46c0      	nop			; (mov r8, r8)
 800c79c:	200008f6 	.word	0x200008f6

0800c7a0 <__sinit_lock_release>:
 800c7a0:	b510      	push	{r4, lr}
 800c7a2:	4802      	ldr	r0, [pc, #8]	; (800c7ac <__sinit_lock_release+0xc>)
 800c7a4:	f000 f8aa 	bl	800c8fc <__retarget_lock_release_recursive>
 800c7a8:	bd10      	pop	{r4, pc}
 800c7aa:	46c0      	nop			; (mov r8, r8)
 800c7ac:	200008f6 	.word	0x200008f6

0800c7b0 <__sinit>:
 800c7b0:	b513      	push	{r0, r1, r4, lr}
 800c7b2:	0004      	movs	r4, r0
 800c7b4:	f7ff ffec 	bl	800c790 <__sinit_lock_acquire>
 800c7b8:	69a3      	ldr	r3, [r4, #24]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <__sinit+0x14>
 800c7be:	f7ff ffef 	bl	800c7a0 <__sinit_lock_release>
 800c7c2:	bd13      	pop	{r0, r1, r4, pc}
 800c7c4:	64a3      	str	r3, [r4, #72]	; 0x48
 800c7c6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c7c8:	6523      	str	r3, [r4, #80]	; 0x50
 800c7ca:	4b13      	ldr	r3, [pc, #76]	; (800c818 <__sinit+0x68>)
 800c7cc:	4a13      	ldr	r2, [pc, #76]	; (800c81c <__sinit+0x6c>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c7d2:	9301      	str	r3, [sp, #4]
 800c7d4:	42a3      	cmp	r3, r4
 800c7d6:	d101      	bne.n	800c7dc <__sinit+0x2c>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	61a3      	str	r3, [r4, #24]
 800c7dc:	0020      	movs	r0, r4
 800c7de:	f000 f81f 	bl	800c820 <__sfp>
 800c7e2:	6060      	str	r0, [r4, #4]
 800c7e4:	0020      	movs	r0, r4
 800c7e6:	f000 f81b 	bl	800c820 <__sfp>
 800c7ea:	60a0      	str	r0, [r4, #8]
 800c7ec:	0020      	movs	r0, r4
 800c7ee:	f000 f817 	bl	800c820 <__sfp>
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	2104      	movs	r1, #4
 800c7f6:	60e0      	str	r0, [r4, #12]
 800c7f8:	6860      	ldr	r0, [r4, #4]
 800c7fa:	f7ff ff77 	bl	800c6ec <std>
 800c7fe:	2201      	movs	r2, #1
 800c800:	2109      	movs	r1, #9
 800c802:	68a0      	ldr	r0, [r4, #8]
 800c804:	f7ff ff72 	bl	800c6ec <std>
 800c808:	2202      	movs	r2, #2
 800c80a:	2112      	movs	r1, #18
 800c80c:	68e0      	ldr	r0, [r4, #12]
 800c80e:	f7ff ff6d 	bl	800c6ec <std>
 800c812:	2301      	movs	r3, #1
 800c814:	61a3      	str	r3, [r4, #24]
 800c816:	e7d2      	b.n	800c7be <__sinit+0xe>
 800c818:	0800e4cc 	.word	0x0800e4cc
 800c81c:	0800c735 	.word	0x0800c735

0800c820 <__sfp>:
 800c820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c822:	0007      	movs	r7, r0
 800c824:	f7ff ffa4 	bl	800c770 <__sfp_lock_acquire>
 800c828:	4b1f      	ldr	r3, [pc, #124]	; (800c8a8 <__sfp+0x88>)
 800c82a:	681e      	ldr	r6, [r3, #0]
 800c82c:	69b3      	ldr	r3, [r6, #24]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d102      	bne.n	800c838 <__sfp+0x18>
 800c832:	0030      	movs	r0, r6
 800c834:	f7ff ffbc 	bl	800c7b0 <__sinit>
 800c838:	3648      	adds	r6, #72	; 0x48
 800c83a:	68b4      	ldr	r4, [r6, #8]
 800c83c:	6873      	ldr	r3, [r6, #4]
 800c83e:	3b01      	subs	r3, #1
 800c840:	d504      	bpl.n	800c84c <__sfp+0x2c>
 800c842:	6833      	ldr	r3, [r6, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d022      	beq.n	800c88e <__sfp+0x6e>
 800c848:	6836      	ldr	r6, [r6, #0]
 800c84a:	e7f6      	b.n	800c83a <__sfp+0x1a>
 800c84c:	220c      	movs	r2, #12
 800c84e:	5ea5      	ldrsh	r5, [r4, r2]
 800c850:	2d00      	cmp	r5, #0
 800c852:	d11a      	bne.n	800c88a <__sfp+0x6a>
 800c854:	0020      	movs	r0, r4
 800c856:	4b15      	ldr	r3, [pc, #84]	; (800c8ac <__sfp+0x8c>)
 800c858:	3058      	adds	r0, #88	; 0x58
 800c85a:	60e3      	str	r3, [r4, #12]
 800c85c:	6665      	str	r5, [r4, #100]	; 0x64
 800c85e:	f000 f84b 	bl	800c8f8 <__retarget_lock_init_recursive>
 800c862:	f7ff ff8d 	bl	800c780 <__sfp_lock_release>
 800c866:	0020      	movs	r0, r4
 800c868:	2208      	movs	r2, #8
 800c86a:	0029      	movs	r1, r5
 800c86c:	6025      	str	r5, [r4, #0]
 800c86e:	60a5      	str	r5, [r4, #8]
 800c870:	6065      	str	r5, [r4, #4]
 800c872:	6125      	str	r5, [r4, #16]
 800c874:	6165      	str	r5, [r4, #20]
 800c876:	61a5      	str	r5, [r4, #24]
 800c878:	305c      	adds	r0, #92	; 0x5c
 800c87a:	f7fe f950 	bl	800ab1e <memset>
 800c87e:	6365      	str	r5, [r4, #52]	; 0x34
 800c880:	63a5      	str	r5, [r4, #56]	; 0x38
 800c882:	64a5      	str	r5, [r4, #72]	; 0x48
 800c884:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c886:	0020      	movs	r0, r4
 800c888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c88a:	3468      	adds	r4, #104	; 0x68
 800c88c:	e7d7      	b.n	800c83e <__sfp+0x1e>
 800c88e:	2104      	movs	r1, #4
 800c890:	0038      	movs	r0, r7
 800c892:	f7ff ff57 	bl	800c744 <__sfmoreglue>
 800c896:	1e04      	subs	r4, r0, #0
 800c898:	6030      	str	r0, [r6, #0]
 800c89a:	d1d5      	bne.n	800c848 <__sfp+0x28>
 800c89c:	f7ff ff70 	bl	800c780 <__sfp_lock_release>
 800c8a0:	230c      	movs	r3, #12
 800c8a2:	603b      	str	r3, [r7, #0]
 800c8a4:	e7ef      	b.n	800c886 <__sfp+0x66>
 800c8a6:	46c0      	nop			; (mov r8, r8)
 800c8a8:	0800e4cc 	.word	0x0800e4cc
 800c8ac:	ffff0001 	.word	0xffff0001

0800c8b0 <_fwalk_reent>:
 800c8b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8b2:	0004      	movs	r4, r0
 800c8b4:	0006      	movs	r6, r0
 800c8b6:	2700      	movs	r7, #0
 800c8b8:	9101      	str	r1, [sp, #4]
 800c8ba:	3448      	adds	r4, #72	; 0x48
 800c8bc:	6863      	ldr	r3, [r4, #4]
 800c8be:	68a5      	ldr	r5, [r4, #8]
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	9b00      	ldr	r3, [sp, #0]
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	9300      	str	r3, [sp, #0]
 800c8c8:	d504      	bpl.n	800c8d4 <_fwalk_reent+0x24>
 800c8ca:	6824      	ldr	r4, [r4, #0]
 800c8cc:	2c00      	cmp	r4, #0
 800c8ce:	d1f5      	bne.n	800c8bc <_fwalk_reent+0xc>
 800c8d0:	0038      	movs	r0, r7
 800c8d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c8d4:	89ab      	ldrh	r3, [r5, #12]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d908      	bls.n	800c8ec <_fwalk_reent+0x3c>
 800c8da:	220e      	movs	r2, #14
 800c8dc:	5eab      	ldrsh	r3, [r5, r2]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	d004      	beq.n	800c8ec <_fwalk_reent+0x3c>
 800c8e2:	0029      	movs	r1, r5
 800c8e4:	0030      	movs	r0, r6
 800c8e6:	9b01      	ldr	r3, [sp, #4]
 800c8e8:	4798      	blx	r3
 800c8ea:	4307      	orrs	r7, r0
 800c8ec:	3568      	adds	r5, #104	; 0x68
 800c8ee:	e7e8      	b.n	800c8c2 <_fwalk_reent+0x12>

0800c8f0 <_localeconv_r>:
 800c8f0:	4800      	ldr	r0, [pc, #0]	; (800c8f4 <_localeconv_r+0x4>)
 800c8f2:	4770      	bx	lr
 800c8f4:	200001f4 	.word	0x200001f4

0800c8f8 <__retarget_lock_init_recursive>:
 800c8f8:	4770      	bx	lr

0800c8fa <__retarget_lock_acquire_recursive>:
 800c8fa:	4770      	bx	lr

0800c8fc <__retarget_lock_release_recursive>:
 800c8fc:	4770      	bx	lr
	...

0800c900 <__swhatbuf_r>:
 800c900:	b570      	push	{r4, r5, r6, lr}
 800c902:	000e      	movs	r6, r1
 800c904:	001d      	movs	r5, r3
 800c906:	230e      	movs	r3, #14
 800c908:	5ec9      	ldrsh	r1, [r1, r3]
 800c90a:	0014      	movs	r4, r2
 800c90c:	b096      	sub	sp, #88	; 0x58
 800c90e:	2900      	cmp	r1, #0
 800c910:	da08      	bge.n	800c924 <__swhatbuf_r+0x24>
 800c912:	220c      	movs	r2, #12
 800c914:	5eb3      	ldrsh	r3, [r6, r2]
 800c916:	2200      	movs	r2, #0
 800c918:	602a      	str	r2, [r5, #0]
 800c91a:	061b      	lsls	r3, r3, #24
 800c91c:	d411      	bmi.n	800c942 <__swhatbuf_r+0x42>
 800c91e:	2380      	movs	r3, #128	; 0x80
 800c920:	00db      	lsls	r3, r3, #3
 800c922:	e00f      	b.n	800c944 <__swhatbuf_r+0x44>
 800c924:	466a      	mov	r2, sp
 800c926:	f000 ff2b 	bl	800d780 <_fstat_r>
 800c92a:	2800      	cmp	r0, #0
 800c92c:	dbf1      	blt.n	800c912 <__swhatbuf_r+0x12>
 800c92e:	23f0      	movs	r3, #240	; 0xf0
 800c930:	9901      	ldr	r1, [sp, #4]
 800c932:	021b      	lsls	r3, r3, #8
 800c934:	4019      	ands	r1, r3
 800c936:	4b05      	ldr	r3, [pc, #20]	; (800c94c <__swhatbuf_r+0x4c>)
 800c938:	18c9      	adds	r1, r1, r3
 800c93a:	424b      	negs	r3, r1
 800c93c:	4159      	adcs	r1, r3
 800c93e:	6029      	str	r1, [r5, #0]
 800c940:	e7ed      	b.n	800c91e <__swhatbuf_r+0x1e>
 800c942:	2340      	movs	r3, #64	; 0x40
 800c944:	2000      	movs	r0, #0
 800c946:	6023      	str	r3, [r4, #0]
 800c948:	b016      	add	sp, #88	; 0x58
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	ffffe000 	.word	0xffffe000

0800c950 <__smakebuf_r>:
 800c950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c952:	2602      	movs	r6, #2
 800c954:	898b      	ldrh	r3, [r1, #12]
 800c956:	0005      	movs	r5, r0
 800c958:	000c      	movs	r4, r1
 800c95a:	4233      	tst	r3, r6
 800c95c:	d006      	beq.n	800c96c <__smakebuf_r+0x1c>
 800c95e:	0023      	movs	r3, r4
 800c960:	3347      	adds	r3, #71	; 0x47
 800c962:	6023      	str	r3, [r4, #0]
 800c964:	6123      	str	r3, [r4, #16]
 800c966:	2301      	movs	r3, #1
 800c968:	6163      	str	r3, [r4, #20]
 800c96a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c96c:	466a      	mov	r2, sp
 800c96e:	ab01      	add	r3, sp, #4
 800c970:	f7ff ffc6 	bl	800c900 <__swhatbuf_r>
 800c974:	9900      	ldr	r1, [sp, #0]
 800c976:	0007      	movs	r7, r0
 800c978:	0028      	movs	r0, r5
 800c97a:	f000 fc77 	bl	800d26c <_malloc_r>
 800c97e:	2800      	cmp	r0, #0
 800c980:	d108      	bne.n	800c994 <__smakebuf_r+0x44>
 800c982:	220c      	movs	r2, #12
 800c984:	5ea3      	ldrsh	r3, [r4, r2]
 800c986:	059a      	lsls	r2, r3, #22
 800c988:	d4ef      	bmi.n	800c96a <__smakebuf_r+0x1a>
 800c98a:	2203      	movs	r2, #3
 800c98c:	4393      	bics	r3, r2
 800c98e:	431e      	orrs	r6, r3
 800c990:	81a6      	strh	r6, [r4, #12]
 800c992:	e7e4      	b.n	800c95e <__smakebuf_r+0xe>
 800c994:	4b0f      	ldr	r3, [pc, #60]	; (800c9d4 <__smakebuf_r+0x84>)
 800c996:	62ab      	str	r3, [r5, #40]	; 0x28
 800c998:	2380      	movs	r3, #128	; 0x80
 800c99a:	89a2      	ldrh	r2, [r4, #12]
 800c99c:	6020      	str	r0, [r4, #0]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	81a3      	strh	r3, [r4, #12]
 800c9a2:	9b00      	ldr	r3, [sp, #0]
 800c9a4:	6120      	str	r0, [r4, #16]
 800c9a6:	6163      	str	r3, [r4, #20]
 800c9a8:	9b01      	ldr	r3, [sp, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00d      	beq.n	800c9ca <__smakebuf_r+0x7a>
 800c9ae:	0028      	movs	r0, r5
 800c9b0:	230e      	movs	r3, #14
 800c9b2:	5ee1      	ldrsh	r1, [r4, r3]
 800c9b4:	f000 fef6 	bl	800d7a4 <_isatty_r>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d006      	beq.n	800c9ca <__smakebuf_r+0x7a>
 800c9bc:	2203      	movs	r2, #3
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	4393      	bics	r3, r2
 800c9c2:	001a      	movs	r2, r3
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	81a3      	strh	r3, [r4, #12]
 800c9ca:	89a0      	ldrh	r0, [r4, #12]
 800c9cc:	4307      	orrs	r7, r0
 800c9ce:	81a7      	strh	r7, [r4, #12]
 800c9d0:	e7cb      	b.n	800c96a <__smakebuf_r+0x1a>
 800c9d2:	46c0      	nop			; (mov r8, r8)
 800c9d4:	0800c735 	.word	0x0800c735

0800c9d8 <malloc>:
 800c9d8:	b510      	push	{r4, lr}
 800c9da:	4b03      	ldr	r3, [pc, #12]	; (800c9e8 <malloc+0x10>)
 800c9dc:	0001      	movs	r1, r0
 800c9de:	6818      	ldr	r0, [r3, #0]
 800c9e0:	f000 fc44 	bl	800d26c <_malloc_r>
 800c9e4:	bd10      	pop	{r4, pc}
 800c9e6:	46c0      	nop			; (mov r8, r8)
 800c9e8:	200000a0 	.word	0x200000a0

0800c9ec <memchr>:
 800c9ec:	b2c9      	uxtb	r1, r1
 800c9ee:	1882      	adds	r2, r0, r2
 800c9f0:	4290      	cmp	r0, r2
 800c9f2:	d101      	bne.n	800c9f8 <memchr+0xc>
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	4770      	bx	lr
 800c9f8:	7803      	ldrb	r3, [r0, #0]
 800c9fa:	428b      	cmp	r3, r1
 800c9fc:	d0fb      	beq.n	800c9f6 <memchr+0xa>
 800c9fe:	3001      	adds	r0, #1
 800ca00:	e7f6      	b.n	800c9f0 <memchr+0x4>
	...

0800ca04 <_Balloc>:
 800ca04:	b570      	push	{r4, r5, r6, lr}
 800ca06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca08:	0006      	movs	r6, r0
 800ca0a:	000c      	movs	r4, r1
 800ca0c:	2d00      	cmp	r5, #0
 800ca0e:	d10e      	bne.n	800ca2e <_Balloc+0x2a>
 800ca10:	2010      	movs	r0, #16
 800ca12:	f7ff ffe1 	bl	800c9d8 <malloc>
 800ca16:	1e02      	subs	r2, r0, #0
 800ca18:	6270      	str	r0, [r6, #36]	; 0x24
 800ca1a:	d104      	bne.n	800ca26 <_Balloc+0x22>
 800ca1c:	2166      	movs	r1, #102	; 0x66
 800ca1e:	4b19      	ldr	r3, [pc, #100]	; (800ca84 <_Balloc+0x80>)
 800ca20:	4819      	ldr	r0, [pc, #100]	; (800ca88 <_Balloc+0x84>)
 800ca22:	f000 fe6d 	bl	800d700 <__assert_func>
 800ca26:	6045      	str	r5, [r0, #4]
 800ca28:	6085      	str	r5, [r0, #8]
 800ca2a:	6005      	str	r5, [r0, #0]
 800ca2c:	60c5      	str	r5, [r0, #12]
 800ca2e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800ca30:	68eb      	ldr	r3, [r5, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d013      	beq.n	800ca5e <_Balloc+0x5a>
 800ca36:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca38:	00a2      	lsls	r2, r4, #2
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	189b      	adds	r3, r3, r2
 800ca3e:	6818      	ldr	r0, [r3, #0]
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d118      	bne.n	800ca76 <_Balloc+0x72>
 800ca44:	2101      	movs	r1, #1
 800ca46:	000d      	movs	r5, r1
 800ca48:	40a5      	lsls	r5, r4
 800ca4a:	1d6a      	adds	r2, r5, #5
 800ca4c:	0030      	movs	r0, r6
 800ca4e:	0092      	lsls	r2, r2, #2
 800ca50:	f000 fb74 	bl	800d13c <_calloc_r>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	d00c      	beq.n	800ca72 <_Balloc+0x6e>
 800ca58:	6044      	str	r4, [r0, #4]
 800ca5a:	6085      	str	r5, [r0, #8]
 800ca5c:	e00d      	b.n	800ca7a <_Balloc+0x76>
 800ca5e:	2221      	movs	r2, #33	; 0x21
 800ca60:	2104      	movs	r1, #4
 800ca62:	0030      	movs	r0, r6
 800ca64:	f000 fb6a 	bl	800d13c <_calloc_r>
 800ca68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca6a:	60e8      	str	r0, [r5, #12]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1e1      	bne.n	800ca36 <_Balloc+0x32>
 800ca72:	2000      	movs	r0, #0
 800ca74:	bd70      	pop	{r4, r5, r6, pc}
 800ca76:	6802      	ldr	r2, [r0, #0]
 800ca78:	601a      	str	r2, [r3, #0]
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	6103      	str	r3, [r0, #16]
 800ca7e:	60c3      	str	r3, [r0, #12]
 800ca80:	e7f8      	b.n	800ca74 <_Balloc+0x70>
 800ca82:	46c0      	nop			; (mov r8, r8)
 800ca84:	0800e612 	.word	0x0800e612
 800ca88:	0800e6f8 	.word	0x0800e6f8

0800ca8c <_Bfree>:
 800ca8c:	b570      	push	{r4, r5, r6, lr}
 800ca8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca90:	0005      	movs	r5, r0
 800ca92:	000c      	movs	r4, r1
 800ca94:	2e00      	cmp	r6, #0
 800ca96:	d10e      	bne.n	800cab6 <_Bfree+0x2a>
 800ca98:	2010      	movs	r0, #16
 800ca9a:	f7ff ff9d 	bl	800c9d8 <malloc>
 800ca9e:	1e02      	subs	r2, r0, #0
 800caa0:	6268      	str	r0, [r5, #36]	; 0x24
 800caa2:	d104      	bne.n	800caae <_Bfree+0x22>
 800caa4:	218a      	movs	r1, #138	; 0x8a
 800caa6:	4b09      	ldr	r3, [pc, #36]	; (800cacc <_Bfree+0x40>)
 800caa8:	4809      	ldr	r0, [pc, #36]	; (800cad0 <_Bfree+0x44>)
 800caaa:	f000 fe29 	bl	800d700 <__assert_func>
 800caae:	6046      	str	r6, [r0, #4]
 800cab0:	6086      	str	r6, [r0, #8]
 800cab2:	6006      	str	r6, [r0, #0]
 800cab4:	60c6      	str	r6, [r0, #12]
 800cab6:	2c00      	cmp	r4, #0
 800cab8:	d007      	beq.n	800caca <_Bfree+0x3e>
 800caba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cabc:	6862      	ldr	r2, [r4, #4]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	0092      	lsls	r2, r2, #2
 800cac2:	189b      	adds	r3, r3, r2
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	6022      	str	r2, [r4, #0]
 800cac8:	601c      	str	r4, [r3, #0]
 800caca:	bd70      	pop	{r4, r5, r6, pc}
 800cacc:	0800e612 	.word	0x0800e612
 800cad0:	0800e6f8 	.word	0x0800e6f8

0800cad4 <__multadd>:
 800cad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cad6:	000e      	movs	r6, r1
 800cad8:	9001      	str	r0, [sp, #4]
 800cada:	000c      	movs	r4, r1
 800cadc:	001d      	movs	r5, r3
 800cade:	2000      	movs	r0, #0
 800cae0:	690f      	ldr	r7, [r1, #16]
 800cae2:	3614      	adds	r6, #20
 800cae4:	6833      	ldr	r3, [r6, #0]
 800cae6:	3001      	adds	r0, #1
 800cae8:	b299      	uxth	r1, r3
 800caea:	4351      	muls	r1, r2
 800caec:	0c1b      	lsrs	r3, r3, #16
 800caee:	4353      	muls	r3, r2
 800caf0:	1949      	adds	r1, r1, r5
 800caf2:	0c0d      	lsrs	r5, r1, #16
 800caf4:	195b      	adds	r3, r3, r5
 800caf6:	0c1d      	lsrs	r5, r3, #16
 800caf8:	b289      	uxth	r1, r1
 800cafa:	041b      	lsls	r3, r3, #16
 800cafc:	185b      	adds	r3, r3, r1
 800cafe:	c608      	stmia	r6!, {r3}
 800cb00:	4287      	cmp	r7, r0
 800cb02:	dcef      	bgt.n	800cae4 <__multadd+0x10>
 800cb04:	2d00      	cmp	r5, #0
 800cb06:	d022      	beq.n	800cb4e <__multadd+0x7a>
 800cb08:	68a3      	ldr	r3, [r4, #8]
 800cb0a:	42bb      	cmp	r3, r7
 800cb0c:	dc19      	bgt.n	800cb42 <__multadd+0x6e>
 800cb0e:	6863      	ldr	r3, [r4, #4]
 800cb10:	9801      	ldr	r0, [sp, #4]
 800cb12:	1c59      	adds	r1, r3, #1
 800cb14:	f7ff ff76 	bl	800ca04 <_Balloc>
 800cb18:	1e06      	subs	r6, r0, #0
 800cb1a:	d105      	bne.n	800cb28 <__multadd+0x54>
 800cb1c:	0002      	movs	r2, r0
 800cb1e:	21b5      	movs	r1, #181	; 0xb5
 800cb20:	4b0c      	ldr	r3, [pc, #48]	; (800cb54 <__multadd+0x80>)
 800cb22:	480d      	ldr	r0, [pc, #52]	; (800cb58 <__multadd+0x84>)
 800cb24:	f000 fdec 	bl	800d700 <__assert_func>
 800cb28:	0021      	movs	r1, r4
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	310c      	adds	r1, #12
 800cb2e:	1c9a      	adds	r2, r3, #2
 800cb30:	0092      	lsls	r2, r2, #2
 800cb32:	300c      	adds	r0, #12
 800cb34:	f7fd ffea 	bl	800ab0c <memcpy>
 800cb38:	0021      	movs	r1, r4
 800cb3a:	9801      	ldr	r0, [sp, #4]
 800cb3c:	f7ff ffa6 	bl	800ca8c <_Bfree>
 800cb40:	0034      	movs	r4, r6
 800cb42:	1d3b      	adds	r3, r7, #4
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	18e3      	adds	r3, r4, r3
 800cb48:	605d      	str	r5, [r3, #4]
 800cb4a:	1c7b      	adds	r3, r7, #1
 800cb4c:	6123      	str	r3, [r4, #16]
 800cb4e:	0020      	movs	r0, r4
 800cb50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb52:	46c0      	nop			; (mov r8, r8)
 800cb54:	0800e684 	.word	0x0800e684
 800cb58:	0800e6f8 	.word	0x0800e6f8

0800cb5c <__hi0bits>:
 800cb5c:	0003      	movs	r3, r0
 800cb5e:	0c02      	lsrs	r2, r0, #16
 800cb60:	2000      	movs	r0, #0
 800cb62:	4282      	cmp	r2, r0
 800cb64:	d101      	bne.n	800cb6a <__hi0bits+0xe>
 800cb66:	041b      	lsls	r3, r3, #16
 800cb68:	3010      	adds	r0, #16
 800cb6a:	0e1a      	lsrs	r2, r3, #24
 800cb6c:	d101      	bne.n	800cb72 <__hi0bits+0x16>
 800cb6e:	3008      	adds	r0, #8
 800cb70:	021b      	lsls	r3, r3, #8
 800cb72:	0f1a      	lsrs	r2, r3, #28
 800cb74:	d101      	bne.n	800cb7a <__hi0bits+0x1e>
 800cb76:	3004      	adds	r0, #4
 800cb78:	011b      	lsls	r3, r3, #4
 800cb7a:	0f9a      	lsrs	r2, r3, #30
 800cb7c:	d101      	bne.n	800cb82 <__hi0bits+0x26>
 800cb7e:	3002      	adds	r0, #2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	db03      	blt.n	800cb8e <__hi0bits+0x32>
 800cb86:	3001      	adds	r0, #1
 800cb88:	005b      	lsls	r3, r3, #1
 800cb8a:	d400      	bmi.n	800cb8e <__hi0bits+0x32>
 800cb8c:	2020      	movs	r0, #32
 800cb8e:	4770      	bx	lr

0800cb90 <__lo0bits>:
 800cb90:	6803      	ldr	r3, [r0, #0]
 800cb92:	0002      	movs	r2, r0
 800cb94:	2107      	movs	r1, #7
 800cb96:	0018      	movs	r0, r3
 800cb98:	4008      	ands	r0, r1
 800cb9a:	420b      	tst	r3, r1
 800cb9c:	d00d      	beq.n	800cbba <__lo0bits+0x2a>
 800cb9e:	3906      	subs	r1, #6
 800cba0:	2000      	movs	r0, #0
 800cba2:	420b      	tst	r3, r1
 800cba4:	d105      	bne.n	800cbb2 <__lo0bits+0x22>
 800cba6:	3002      	adds	r0, #2
 800cba8:	4203      	tst	r3, r0
 800cbaa:	d003      	beq.n	800cbb4 <__lo0bits+0x24>
 800cbac:	40cb      	lsrs	r3, r1
 800cbae:	0008      	movs	r0, r1
 800cbb0:	6013      	str	r3, [r2, #0]
 800cbb2:	4770      	bx	lr
 800cbb4:	089b      	lsrs	r3, r3, #2
 800cbb6:	6013      	str	r3, [r2, #0]
 800cbb8:	e7fb      	b.n	800cbb2 <__lo0bits+0x22>
 800cbba:	b299      	uxth	r1, r3
 800cbbc:	2900      	cmp	r1, #0
 800cbbe:	d101      	bne.n	800cbc4 <__lo0bits+0x34>
 800cbc0:	2010      	movs	r0, #16
 800cbc2:	0c1b      	lsrs	r3, r3, #16
 800cbc4:	b2d9      	uxtb	r1, r3
 800cbc6:	2900      	cmp	r1, #0
 800cbc8:	d101      	bne.n	800cbce <__lo0bits+0x3e>
 800cbca:	3008      	adds	r0, #8
 800cbcc:	0a1b      	lsrs	r3, r3, #8
 800cbce:	0719      	lsls	r1, r3, #28
 800cbd0:	d101      	bne.n	800cbd6 <__lo0bits+0x46>
 800cbd2:	3004      	adds	r0, #4
 800cbd4:	091b      	lsrs	r3, r3, #4
 800cbd6:	0799      	lsls	r1, r3, #30
 800cbd8:	d101      	bne.n	800cbde <__lo0bits+0x4e>
 800cbda:	3002      	adds	r0, #2
 800cbdc:	089b      	lsrs	r3, r3, #2
 800cbde:	07d9      	lsls	r1, r3, #31
 800cbe0:	d4e9      	bmi.n	800cbb6 <__lo0bits+0x26>
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	085b      	lsrs	r3, r3, #1
 800cbe6:	d1e6      	bne.n	800cbb6 <__lo0bits+0x26>
 800cbe8:	2020      	movs	r0, #32
 800cbea:	e7e2      	b.n	800cbb2 <__lo0bits+0x22>

0800cbec <__i2b>:
 800cbec:	b510      	push	{r4, lr}
 800cbee:	000c      	movs	r4, r1
 800cbf0:	2101      	movs	r1, #1
 800cbf2:	f7ff ff07 	bl	800ca04 <_Balloc>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d106      	bne.n	800cc08 <__i2b+0x1c>
 800cbfa:	21a0      	movs	r1, #160	; 0xa0
 800cbfc:	0002      	movs	r2, r0
 800cbfe:	4b04      	ldr	r3, [pc, #16]	; (800cc10 <__i2b+0x24>)
 800cc00:	4804      	ldr	r0, [pc, #16]	; (800cc14 <__i2b+0x28>)
 800cc02:	0049      	lsls	r1, r1, #1
 800cc04:	f000 fd7c 	bl	800d700 <__assert_func>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	6144      	str	r4, [r0, #20]
 800cc0c:	6103      	str	r3, [r0, #16]
 800cc0e:	bd10      	pop	{r4, pc}
 800cc10:	0800e684 	.word	0x0800e684
 800cc14:	0800e6f8 	.word	0x0800e6f8

0800cc18 <__multiply>:
 800cc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc1a:	690b      	ldr	r3, [r1, #16]
 800cc1c:	0014      	movs	r4, r2
 800cc1e:	6912      	ldr	r2, [r2, #16]
 800cc20:	000d      	movs	r5, r1
 800cc22:	b089      	sub	sp, #36	; 0x24
 800cc24:	4293      	cmp	r3, r2
 800cc26:	da01      	bge.n	800cc2c <__multiply+0x14>
 800cc28:	0025      	movs	r5, r4
 800cc2a:	000c      	movs	r4, r1
 800cc2c:	692f      	ldr	r7, [r5, #16]
 800cc2e:	6926      	ldr	r6, [r4, #16]
 800cc30:	6869      	ldr	r1, [r5, #4]
 800cc32:	19bb      	adds	r3, r7, r6
 800cc34:	9302      	str	r3, [sp, #8]
 800cc36:	68ab      	ldr	r3, [r5, #8]
 800cc38:	19ba      	adds	r2, r7, r6
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	da00      	bge.n	800cc40 <__multiply+0x28>
 800cc3e:	3101      	adds	r1, #1
 800cc40:	f7ff fee0 	bl	800ca04 <_Balloc>
 800cc44:	9001      	str	r0, [sp, #4]
 800cc46:	2800      	cmp	r0, #0
 800cc48:	d106      	bne.n	800cc58 <__multiply+0x40>
 800cc4a:	215e      	movs	r1, #94	; 0x5e
 800cc4c:	0002      	movs	r2, r0
 800cc4e:	4b48      	ldr	r3, [pc, #288]	; (800cd70 <__multiply+0x158>)
 800cc50:	4848      	ldr	r0, [pc, #288]	; (800cd74 <__multiply+0x15c>)
 800cc52:	31ff      	adds	r1, #255	; 0xff
 800cc54:	f000 fd54 	bl	800d700 <__assert_func>
 800cc58:	9b01      	ldr	r3, [sp, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	3314      	adds	r3, #20
 800cc5e:	469c      	mov	ip, r3
 800cc60:	19bb      	adds	r3, r7, r6
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4463      	add	r3, ip
 800cc66:	9303      	str	r3, [sp, #12]
 800cc68:	4663      	mov	r3, ip
 800cc6a:	9903      	ldr	r1, [sp, #12]
 800cc6c:	428b      	cmp	r3, r1
 800cc6e:	d32c      	bcc.n	800ccca <__multiply+0xb2>
 800cc70:	002b      	movs	r3, r5
 800cc72:	0022      	movs	r2, r4
 800cc74:	3314      	adds	r3, #20
 800cc76:	00bf      	lsls	r7, r7, #2
 800cc78:	3214      	adds	r2, #20
 800cc7a:	9306      	str	r3, [sp, #24]
 800cc7c:	00b6      	lsls	r6, r6, #2
 800cc7e:	19db      	adds	r3, r3, r7
 800cc80:	9304      	str	r3, [sp, #16]
 800cc82:	1993      	adds	r3, r2, r6
 800cc84:	9307      	str	r3, [sp, #28]
 800cc86:	2304      	movs	r3, #4
 800cc88:	9305      	str	r3, [sp, #20]
 800cc8a:	002b      	movs	r3, r5
 800cc8c:	9904      	ldr	r1, [sp, #16]
 800cc8e:	3315      	adds	r3, #21
 800cc90:	9200      	str	r2, [sp, #0]
 800cc92:	4299      	cmp	r1, r3
 800cc94:	d305      	bcc.n	800cca2 <__multiply+0x8a>
 800cc96:	1b4b      	subs	r3, r1, r5
 800cc98:	3b15      	subs	r3, #21
 800cc9a:	089b      	lsrs	r3, r3, #2
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	9305      	str	r3, [sp, #20]
 800cca2:	9b07      	ldr	r3, [sp, #28]
 800cca4:	9a00      	ldr	r2, [sp, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d311      	bcc.n	800ccce <__multiply+0xb6>
 800ccaa:	9b02      	ldr	r3, [sp, #8]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	dd06      	ble.n	800ccbe <__multiply+0xa6>
 800ccb0:	9b03      	ldr	r3, [sp, #12]
 800ccb2:	3b04      	subs	r3, #4
 800ccb4:	9303      	str	r3, [sp, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	9300      	str	r3, [sp, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d053      	beq.n	800cd66 <__multiply+0x14e>
 800ccbe:	9b01      	ldr	r3, [sp, #4]
 800ccc0:	9a02      	ldr	r2, [sp, #8]
 800ccc2:	0018      	movs	r0, r3
 800ccc4:	611a      	str	r2, [r3, #16]
 800ccc6:	b009      	add	sp, #36	; 0x24
 800ccc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccca:	c304      	stmia	r3!, {r2}
 800cccc:	e7cd      	b.n	800cc6a <__multiply+0x52>
 800ccce:	9b00      	ldr	r3, [sp, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	b298      	uxth	r0, r3
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d01b      	beq.n	800cd10 <__multiply+0xf8>
 800ccd8:	4667      	mov	r7, ip
 800ccda:	2400      	movs	r4, #0
 800ccdc:	9e06      	ldr	r6, [sp, #24]
 800ccde:	ce02      	ldmia	r6!, {r1}
 800cce0:	683a      	ldr	r2, [r7, #0]
 800cce2:	b28b      	uxth	r3, r1
 800cce4:	4343      	muls	r3, r0
 800cce6:	b292      	uxth	r2, r2
 800cce8:	189b      	adds	r3, r3, r2
 800ccea:	191b      	adds	r3, r3, r4
 800ccec:	0c0c      	lsrs	r4, r1, #16
 800ccee:	4344      	muls	r4, r0
 800ccf0:	683a      	ldr	r2, [r7, #0]
 800ccf2:	0c11      	lsrs	r1, r2, #16
 800ccf4:	1861      	adds	r1, r4, r1
 800ccf6:	0c1c      	lsrs	r4, r3, #16
 800ccf8:	1909      	adds	r1, r1, r4
 800ccfa:	0c0c      	lsrs	r4, r1, #16
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	0409      	lsls	r1, r1, #16
 800cd00:	430b      	orrs	r3, r1
 800cd02:	c708      	stmia	r7!, {r3}
 800cd04:	9b04      	ldr	r3, [sp, #16]
 800cd06:	42b3      	cmp	r3, r6
 800cd08:	d8e9      	bhi.n	800ccde <__multiply+0xc6>
 800cd0a:	4663      	mov	r3, ip
 800cd0c:	9a05      	ldr	r2, [sp, #20]
 800cd0e:	509c      	str	r4, [r3, r2]
 800cd10:	9b00      	ldr	r3, [sp, #0]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	0c1e      	lsrs	r6, r3, #16
 800cd16:	d020      	beq.n	800cd5a <__multiply+0x142>
 800cd18:	4663      	mov	r3, ip
 800cd1a:	002c      	movs	r4, r5
 800cd1c:	4660      	mov	r0, ip
 800cd1e:	2700      	movs	r7, #0
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3414      	adds	r4, #20
 800cd24:	6822      	ldr	r2, [r4, #0]
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	b291      	uxth	r1, r2
 800cd2a:	4371      	muls	r1, r6
 800cd2c:	6802      	ldr	r2, [r0, #0]
 800cd2e:	0c12      	lsrs	r2, r2, #16
 800cd30:	1889      	adds	r1, r1, r2
 800cd32:	19cf      	adds	r7, r1, r7
 800cd34:	0439      	lsls	r1, r7, #16
 800cd36:	430b      	orrs	r3, r1
 800cd38:	6003      	str	r3, [r0, #0]
 800cd3a:	cc02      	ldmia	r4!, {r1}
 800cd3c:	6843      	ldr	r3, [r0, #4]
 800cd3e:	0c09      	lsrs	r1, r1, #16
 800cd40:	4371      	muls	r1, r6
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	0c3f      	lsrs	r7, r7, #16
 800cd46:	18cb      	adds	r3, r1, r3
 800cd48:	9a04      	ldr	r2, [sp, #16]
 800cd4a:	19db      	adds	r3, r3, r7
 800cd4c:	0c1f      	lsrs	r7, r3, #16
 800cd4e:	3004      	adds	r0, #4
 800cd50:	42a2      	cmp	r2, r4
 800cd52:	d8e7      	bhi.n	800cd24 <__multiply+0x10c>
 800cd54:	4662      	mov	r2, ip
 800cd56:	9905      	ldr	r1, [sp, #20]
 800cd58:	5053      	str	r3, [r2, r1]
 800cd5a:	9b00      	ldr	r3, [sp, #0]
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	2304      	movs	r3, #4
 800cd62:	449c      	add	ip, r3
 800cd64:	e79d      	b.n	800cca2 <__multiply+0x8a>
 800cd66:	9b02      	ldr	r3, [sp, #8]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	9302      	str	r3, [sp, #8]
 800cd6c:	e79d      	b.n	800ccaa <__multiply+0x92>
 800cd6e:	46c0      	nop			; (mov r8, r8)
 800cd70:	0800e684 	.word	0x0800e684
 800cd74:	0800e6f8 	.word	0x0800e6f8

0800cd78 <__pow5mult>:
 800cd78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	0015      	movs	r5, r2
 800cd7e:	0007      	movs	r7, r0
 800cd80:	000e      	movs	r6, r1
 800cd82:	401a      	ands	r2, r3
 800cd84:	421d      	tst	r5, r3
 800cd86:	d008      	beq.n	800cd9a <__pow5mult+0x22>
 800cd88:	4925      	ldr	r1, [pc, #148]	; (800ce20 <__pow5mult+0xa8>)
 800cd8a:	3a01      	subs	r2, #1
 800cd8c:	0092      	lsls	r2, r2, #2
 800cd8e:	5852      	ldr	r2, [r2, r1]
 800cd90:	2300      	movs	r3, #0
 800cd92:	0031      	movs	r1, r6
 800cd94:	f7ff fe9e 	bl	800cad4 <__multadd>
 800cd98:	0006      	movs	r6, r0
 800cd9a:	10ad      	asrs	r5, r5, #2
 800cd9c:	d03d      	beq.n	800ce1a <__pow5mult+0xa2>
 800cd9e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800cda0:	2c00      	cmp	r4, #0
 800cda2:	d10f      	bne.n	800cdc4 <__pow5mult+0x4c>
 800cda4:	2010      	movs	r0, #16
 800cda6:	f7ff fe17 	bl	800c9d8 <malloc>
 800cdaa:	1e02      	subs	r2, r0, #0
 800cdac:	6278      	str	r0, [r7, #36]	; 0x24
 800cdae:	d105      	bne.n	800cdbc <__pow5mult+0x44>
 800cdb0:	21d7      	movs	r1, #215	; 0xd7
 800cdb2:	4b1c      	ldr	r3, [pc, #112]	; (800ce24 <__pow5mult+0xac>)
 800cdb4:	481c      	ldr	r0, [pc, #112]	; (800ce28 <__pow5mult+0xb0>)
 800cdb6:	0049      	lsls	r1, r1, #1
 800cdb8:	f000 fca2 	bl	800d700 <__assert_func>
 800cdbc:	6044      	str	r4, [r0, #4]
 800cdbe:	6084      	str	r4, [r0, #8]
 800cdc0:	6004      	str	r4, [r0, #0]
 800cdc2:	60c4      	str	r4, [r0, #12]
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	689c      	ldr	r4, [r3, #8]
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	2c00      	cmp	r4, #0
 800cdcc:	d108      	bne.n	800cde0 <__pow5mult+0x68>
 800cdce:	0038      	movs	r0, r7
 800cdd0:	4916      	ldr	r1, [pc, #88]	; (800ce2c <__pow5mult+0xb4>)
 800cdd2:	f7ff ff0b 	bl	800cbec <__i2b>
 800cdd6:	9b01      	ldr	r3, [sp, #4]
 800cdd8:	0004      	movs	r4, r0
 800cdda:	6098      	str	r0, [r3, #8]
 800cddc:	2300      	movs	r3, #0
 800cdde:	6003      	str	r3, [r0, #0]
 800cde0:	2301      	movs	r3, #1
 800cde2:	421d      	tst	r5, r3
 800cde4:	d00a      	beq.n	800cdfc <__pow5mult+0x84>
 800cde6:	0031      	movs	r1, r6
 800cde8:	0022      	movs	r2, r4
 800cdea:	0038      	movs	r0, r7
 800cdec:	f7ff ff14 	bl	800cc18 <__multiply>
 800cdf0:	0031      	movs	r1, r6
 800cdf2:	9001      	str	r0, [sp, #4]
 800cdf4:	0038      	movs	r0, r7
 800cdf6:	f7ff fe49 	bl	800ca8c <_Bfree>
 800cdfa:	9e01      	ldr	r6, [sp, #4]
 800cdfc:	106d      	asrs	r5, r5, #1
 800cdfe:	d00c      	beq.n	800ce1a <__pow5mult+0xa2>
 800ce00:	6820      	ldr	r0, [r4, #0]
 800ce02:	2800      	cmp	r0, #0
 800ce04:	d107      	bne.n	800ce16 <__pow5mult+0x9e>
 800ce06:	0022      	movs	r2, r4
 800ce08:	0021      	movs	r1, r4
 800ce0a:	0038      	movs	r0, r7
 800ce0c:	f7ff ff04 	bl	800cc18 <__multiply>
 800ce10:	2300      	movs	r3, #0
 800ce12:	6020      	str	r0, [r4, #0]
 800ce14:	6003      	str	r3, [r0, #0]
 800ce16:	0004      	movs	r4, r0
 800ce18:	e7e2      	b.n	800cde0 <__pow5mult+0x68>
 800ce1a:	0030      	movs	r0, r6
 800ce1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce1e:	46c0      	nop			; (mov r8, r8)
 800ce20:	0800e848 	.word	0x0800e848
 800ce24:	0800e612 	.word	0x0800e612
 800ce28:	0800e6f8 	.word	0x0800e6f8
 800ce2c:	00000271 	.word	0x00000271

0800ce30 <__lshift>:
 800ce30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce32:	000c      	movs	r4, r1
 800ce34:	0017      	movs	r7, r2
 800ce36:	6923      	ldr	r3, [r4, #16]
 800ce38:	1155      	asrs	r5, r2, #5
 800ce3a:	b087      	sub	sp, #28
 800ce3c:	18eb      	adds	r3, r5, r3
 800ce3e:	9302      	str	r3, [sp, #8]
 800ce40:	3301      	adds	r3, #1
 800ce42:	9301      	str	r3, [sp, #4]
 800ce44:	6849      	ldr	r1, [r1, #4]
 800ce46:	68a3      	ldr	r3, [r4, #8]
 800ce48:	9004      	str	r0, [sp, #16]
 800ce4a:	9a01      	ldr	r2, [sp, #4]
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	db10      	blt.n	800ce72 <__lshift+0x42>
 800ce50:	9804      	ldr	r0, [sp, #16]
 800ce52:	f7ff fdd7 	bl	800ca04 <_Balloc>
 800ce56:	2300      	movs	r3, #0
 800ce58:	0002      	movs	r2, r0
 800ce5a:	0006      	movs	r6, r0
 800ce5c:	0019      	movs	r1, r3
 800ce5e:	3214      	adds	r2, #20
 800ce60:	4298      	cmp	r0, r3
 800ce62:	d10c      	bne.n	800ce7e <__lshift+0x4e>
 800ce64:	21da      	movs	r1, #218	; 0xda
 800ce66:	0002      	movs	r2, r0
 800ce68:	4b26      	ldr	r3, [pc, #152]	; (800cf04 <__lshift+0xd4>)
 800ce6a:	4827      	ldr	r0, [pc, #156]	; (800cf08 <__lshift+0xd8>)
 800ce6c:	31ff      	adds	r1, #255	; 0xff
 800ce6e:	f000 fc47 	bl	800d700 <__assert_func>
 800ce72:	3101      	adds	r1, #1
 800ce74:	005b      	lsls	r3, r3, #1
 800ce76:	e7e8      	b.n	800ce4a <__lshift+0x1a>
 800ce78:	0098      	lsls	r0, r3, #2
 800ce7a:	5011      	str	r1, [r2, r0]
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	42ab      	cmp	r3, r5
 800ce80:	dbfa      	blt.n	800ce78 <__lshift+0x48>
 800ce82:	43eb      	mvns	r3, r5
 800ce84:	17db      	asrs	r3, r3, #31
 800ce86:	401d      	ands	r5, r3
 800ce88:	211f      	movs	r1, #31
 800ce8a:	0023      	movs	r3, r4
 800ce8c:	0038      	movs	r0, r7
 800ce8e:	00ad      	lsls	r5, r5, #2
 800ce90:	1955      	adds	r5, r2, r5
 800ce92:	6922      	ldr	r2, [r4, #16]
 800ce94:	3314      	adds	r3, #20
 800ce96:	0092      	lsls	r2, r2, #2
 800ce98:	4008      	ands	r0, r1
 800ce9a:	4684      	mov	ip, r0
 800ce9c:	189a      	adds	r2, r3, r2
 800ce9e:	420f      	tst	r7, r1
 800cea0:	d02a      	beq.n	800cef8 <__lshift+0xc8>
 800cea2:	3101      	adds	r1, #1
 800cea4:	1a09      	subs	r1, r1, r0
 800cea6:	9105      	str	r1, [sp, #20]
 800cea8:	2100      	movs	r1, #0
 800ceaa:	9503      	str	r5, [sp, #12]
 800ceac:	4667      	mov	r7, ip
 800ceae:	6818      	ldr	r0, [r3, #0]
 800ceb0:	40b8      	lsls	r0, r7
 800ceb2:	4301      	orrs	r1, r0
 800ceb4:	9803      	ldr	r0, [sp, #12]
 800ceb6:	c002      	stmia	r0!, {r1}
 800ceb8:	cb02      	ldmia	r3!, {r1}
 800ceba:	9003      	str	r0, [sp, #12]
 800cebc:	9805      	ldr	r0, [sp, #20]
 800cebe:	40c1      	lsrs	r1, r0
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d8f3      	bhi.n	800ceac <__lshift+0x7c>
 800cec4:	0020      	movs	r0, r4
 800cec6:	3015      	adds	r0, #21
 800cec8:	2304      	movs	r3, #4
 800ceca:	4282      	cmp	r2, r0
 800cecc:	d304      	bcc.n	800ced8 <__lshift+0xa8>
 800cece:	1b13      	subs	r3, r2, r4
 800ced0:	3b15      	subs	r3, #21
 800ced2:	089b      	lsrs	r3, r3, #2
 800ced4:	3301      	adds	r3, #1
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	50e9      	str	r1, [r5, r3]
 800ceda:	2900      	cmp	r1, #0
 800cedc:	d002      	beq.n	800cee4 <__lshift+0xb4>
 800cede:	9b02      	ldr	r3, [sp, #8]
 800cee0:	3302      	adds	r3, #2
 800cee2:	9301      	str	r3, [sp, #4]
 800cee4:	9b01      	ldr	r3, [sp, #4]
 800cee6:	9804      	ldr	r0, [sp, #16]
 800cee8:	3b01      	subs	r3, #1
 800ceea:	0021      	movs	r1, r4
 800ceec:	6133      	str	r3, [r6, #16]
 800ceee:	f7ff fdcd 	bl	800ca8c <_Bfree>
 800cef2:	0030      	movs	r0, r6
 800cef4:	b007      	add	sp, #28
 800cef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef8:	cb02      	ldmia	r3!, {r1}
 800cefa:	c502      	stmia	r5!, {r1}
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d8fb      	bhi.n	800cef8 <__lshift+0xc8>
 800cf00:	e7f0      	b.n	800cee4 <__lshift+0xb4>
 800cf02:	46c0      	nop			; (mov r8, r8)
 800cf04:	0800e684 	.word	0x0800e684
 800cf08:	0800e6f8 	.word	0x0800e6f8

0800cf0c <__mcmp>:
 800cf0c:	6902      	ldr	r2, [r0, #16]
 800cf0e:	690b      	ldr	r3, [r1, #16]
 800cf10:	b530      	push	{r4, r5, lr}
 800cf12:	0004      	movs	r4, r0
 800cf14:	1ad0      	subs	r0, r2, r3
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d10d      	bne.n	800cf36 <__mcmp+0x2a>
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	3414      	adds	r4, #20
 800cf1e:	3114      	adds	r1, #20
 800cf20:	18e2      	adds	r2, r4, r3
 800cf22:	18c9      	adds	r1, r1, r3
 800cf24:	3a04      	subs	r2, #4
 800cf26:	3904      	subs	r1, #4
 800cf28:	6815      	ldr	r5, [r2, #0]
 800cf2a:	680b      	ldr	r3, [r1, #0]
 800cf2c:	429d      	cmp	r5, r3
 800cf2e:	d003      	beq.n	800cf38 <__mcmp+0x2c>
 800cf30:	2001      	movs	r0, #1
 800cf32:	429d      	cmp	r5, r3
 800cf34:	d303      	bcc.n	800cf3e <__mcmp+0x32>
 800cf36:	bd30      	pop	{r4, r5, pc}
 800cf38:	4294      	cmp	r4, r2
 800cf3a:	d3f3      	bcc.n	800cf24 <__mcmp+0x18>
 800cf3c:	e7fb      	b.n	800cf36 <__mcmp+0x2a>
 800cf3e:	4240      	negs	r0, r0
 800cf40:	e7f9      	b.n	800cf36 <__mcmp+0x2a>
	...

0800cf44 <__mdiff>:
 800cf44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf46:	000e      	movs	r6, r1
 800cf48:	0007      	movs	r7, r0
 800cf4a:	0011      	movs	r1, r2
 800cf4c:	0030      	movs	r0, r6
 800cf4e:	b087      	sub	sp, #28
 800cf50:	0014      	movs	r4, r2
 800cf52:	f7ff ffdb 	bl	800cf0c <__mcmp>
 800cf56:	1e05      	subs	r5, r0, #0
 800cf58:	d110      	bne.n	800cf7c <__mdiff+0x38>
 800cf5a:	0001      	movs	r1, r0
 800cf5c:	0038      	movs	r0, r7
 800cf5e:	f7ff fd51 	bl	800ca04 <_Balloc>
 800cf62:	1e02      	subs	r2, r0, #0
 800cf64:	d104      	bne.n	800cf70 <__mdiff+0x2c>
 800cf66:	4b40      	ldr	r3, [pc, #256]	; (800d068 <__mdiff+0x124>)
 800cf68:	4940      	ldr	r1, [pc, #256]	; (800d06c <__mdiff+0x128>)
 800cf6a:	4841      	ldr	r0, [pc, #260]	; (800d070 <__mdiff+0x12c>)
 800cf6c:	f000 fbc8 	bl	800d700 <__assert_func>
 800cf70:	2301      	movs	r3, #1
 800cf72:	6145      	str	r5, [r0, #20]
 800cf74:	6103      	str	r3, [r0, #16]
 800cf76:	0010      	movs	r0, r2
 800cf78:	b007      	add	sp, #28
 800cf7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	9301      	str	r3, [sp, #4]
 800cf80:	2800      	cmp	r0, #0
 800cf82:	db04      	blt.n	800cf8e <__mdiff+0x4a>
 800cf84:	0023      	movs	r3, r4
 800cf86:	0034      	movs	r4, r6
 800cf88:	001e      	movs	r6, r3
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	0038      	movs	r0, r7
 800cf90:	6861      	ldr	r1, [r4, #4]
 800cf92:	f7ff fd37 	bl	800ca04 <_Balloc>
 800cf96:	1e02      	subs	r2, r0, #0
 800cf98:	d103      	bne.n	800cfa2 <__mdiff+0x5e>
 800cf9a:	2190      	movs	r1, #144	; 0x90
 800cf9c:	4b32      	ldr	r3, [pc, #200]	; (800d068 <__mdiff+0x124>)
 800cf9e:	0089      	lsls	r1, r1, #2
 800cfa0:	e7e3      	b.n	800cf6a <__mdiff+0x26>
 800cfa2:	9b01      	ldr	r3, [sp, #4]
 800cfa4:	2700      	movs	r7, #0
 800cfa6:	60c3      	str	r3, [r0, #12]
 800cfa8:	6920      	ldr	r0, [r4, #16]
 800cfaa:	3414      	adds	r4, #20
 800cfac:	9401      	str	r4, [sp, #4]
 800cfae:	9b01      	ldr	r3, [sp, #4]
 800cfb0:	0084      	lsls	r4, r0, #2
 800cfb2:	191b      	adds	r3, r3, r4
 800cfb4:	0034      	movs	r4, r6
 800cfb6:	9302      	str	r3, [sp, #8]
 800cfb8:	6933      	ldr	r3, [r6, #16]
 800cfba:	3414      	adds	r4, #20
 800cfbc:	0099      	lsls	r1, r3, #2
 800cfbe:	1863      	adds	r3, r4, r1
 800cfc0:	9303      	str	r3, [sp, #12]
 800cfc2:	0013      	movs	r3, r2
 800cfc4:	3314      	adds	r3, #20
 800cfc6:	469c      	mov	ip, r3
 800cfc8:	9305      	str	r3, [sp, #20]
 800cfca:	9b01      	ldr	r3, [sp, #4]
 800cfcc:	9304      	str	r3, [sp, #16]
 800cfce:	9b04      	ldr	r3, [sp, #16]
 800cfd0:	cc02      	ldmia	r4!, {r1}
 800cfd2:	cb20      	ldmia	r3!, {r5}
 800cfd4:	9304      	str	r3, [sp, #16]
 800cfd6:	b2ab      	uxth	r3, r5
 800cfd8:	19df      	adds	r7, r3, r7
 800cfda:	b28b      	uxth	r3, r1
 800cfdc:	1afb      	subs	r3, r7, r3
 800cfde:	0c09      	lsrs	r1, r1, #16
 800cfe0:	0c2d      	lsrs	r5, r5, #16
 800cfe2:	1a6d      	subs	r5, r5, r1
 800cfe4:	1419      	asrs	r1, r3, #16
 800cfe6:	186d      	adds	r5, r5, r1
 800cfe8:	4661      	mov	r1, ip
 800cfea:	142f      	asrs	r7, r5, #16
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	042d      	lsls	r5, r5, #16
 800cff0:	432b      	orrs	r3, r5
 800cff2:	c108      	stmia	r1!, {r3}
 800cff4:	9b03      	ldr	r3, [sp, #12]
 800cff6:	468c      	mov	ip, r1
 800cff8:	42a3      	cmp	r3, r4
 800cffa:	d8e8      	bhi.n	800cfce <__mdiff+0x8a>
 800cffc:	0031      	movs	r1, r6
 800cffe:	9c03      	ldr	r4, [sp, #12]
 800d000:	3115      	adds	r1, #21
 800d002:	2304      	movs	r3, #4
 800d004:	428c      	cmp	r4, r1
 800d006:	d304      	bcc.n	800d012 <__mdiff+0xce>
 800d008:	1ba3      	subs	r3, r4, r6
 800d00a:	3b15      	subs	r3, #21
 800d00c:	089b      	lsrs	r3, r3, #2
 800d00e:	3301      	adds	r3, #1
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	9901      	ldr	r1, [sp, #4]
 800d014:	18cc      	adds	r4, r1, r3
 800d016:	9905      	ldr	r1, [sp, #20]
 800d018:	0026      	movs	r6, r4
 800d01a:	18cb      	adds	r3, r1, r3
 800d01c:	469c      	mov	ip, r3
 800d01e:	9902      	ldr	r1, [sp, #8]
 800d020:	428e      	cmp	r6, r1
 800d022:	d310      	bcc.n	800d046 <__mdiff+0x102>
 800d024:	9e02      	ldr	r6, [sp, #8]
 800d026:	1ee1      	subs	r1, r4, #3
 800d028:	2500      	movs	r5, #0
 800d02a:	428e      	cmp	r6, r1
 800d02c:	d304      	bcc.n	800d038 <__mdiff+0xf4>
 800d02e:	0031      	movs	r1, r6
 800d030:	3103      	adds	r1, #3
 800d032:	1b0c      	subs	r4, r1, r4
 800d034:	08a4      	lsrs	r4, r4, #2
 800d036:	00a5      	lsls	r5, r4, #2
 800d038:	195b      	adds	r3, r3, r5
 800d03a:	3b04      	subs	r3, #4
 800d03c:	6819      	ldr	r1, [r3, #0]
 800d03e:	2900      	cmp	r1, #0
 800d040:	d00f      	beq.n	800d062 <__mdiff+0x11e>
 800d042:	6110      	str	r0, [r2, #16]
 800d044:	e797      	b.n	800cf76 <__mdiff+0x32>
 800d046:	ce02      	ldmia	r6!, {r1}
 800d048:	b28d      	uxth	r5, r1
 800d04a:	19ed      	adds	r5, r5, r7
 800d04c:	0c0f      	lsrs	r7, r1, #16
 800d04e:	1429      	asrs	r1, r5, #16
 800d050:	1879      	adds	r1, r7, r1
 800d052:	140f      	asrs	r7, r1, #16
 800d054:	b2ad      	uxth	r5, r5
 800d056:	0409      	lsls	r1, r1, #16
 800d058:	430d      	orrs	r5, r1
 800d05a:	4661      	mov	r1, ip
 800d05c:	c120      	stmia	r1!, {r5}
 800d05e:	468c      	mov	ip, r1
 800d060:	e7dd      	b.n	800d01e <__mdiff+0xda>
 800d062:	3801      	subs	r0, #1
 800d064:	e7e9      	b.n	800d03a <__mdiff+0xf6>
 800d066:	46c0      	nop			; (mov r8, r8)
 800d068:	0800e684 	.word	0x0800e684
 800d06c:	00000232 	.word	0x00000232
 800d070:	0800e6f8 	.word	0x0800e6f8

0800d074 <__d2b>:
 800d074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d076:	2101      	movs	r1, #1
 800d078:	0014      	movs	r4, r2
 800d07a:	001e      	movs	r6, r3
 800d07c:	9f08      	ldr	r7, [sp, #32]
 800d07e:	f7ff fcc1 	bl	800ca04 <_Balloc>
 800d082:	1e05      	subs	r5, r0, #0
 800d084:	d105      	bne.n	800d092 <__d2b+0x1e>
 800d086:	0002      	movs	r2, r0
 800d088:	4b26      	ldr	r3, [pc, #152]	; (800d124 <__d2b+0xb0>)
 800d08a:	4927      	ldr	r1, [pc, #156]	; (800d128 <__d2b+0xb4>)
 800d08c:	4827      	ldr	r0, [pc, #156]	; (800d12c <__d2b+0xb8>)
 800d08e:	f000 fb37 	bl	800d700 <__assert_func>
 800d092:	0333      	lsls	r3, r6, #12
 800d094:	0076      	lsls	r6, r6, #1
 800d096:	0b1b      	lsrs	r3, r3, #12
 800d098:	0d76      	lsrs	r6, r6, #21
 800d09a:	d124      	bne.n	800d0e6 <__d2b+0x72>
 800d09c:	9301      	str	r3, [sp, #4]
 800d09e:	2c00      	cmp	r4, #0
 800d0a0:	d027      	beq.n	800d0f2 <__d2b+0x7e>
 800d0a2:	4668      	mov	r0, sp
 800d0a4:	9400      	str	r4, [sp, #0]
 800d0a6:	f7ff fd73 	bl	800cb90 <__lo0bits>
 800d0aa:	9c00      	ldr	r4, [sp, #0]
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d01e      	beq.n	800d0ee <__d2b+0x7a>
 800d0b0:	9b01      	ldr	r3, [sp, #4]
 800d0b2:	2120      	movs	r1, #32
 800d0b4:	001a      	movs	r2, r3
 800d0b6:	1a09      	subs	r1, r1, r0
 800d0b8:	408a      	lsls	r2, r1
 800d0ba:	40c3      	lsrs	r3, r0
 800d0bc:	4322      	orrs	r2, r4
 800d0be:	616a      	str	r2, [r5, #20]
 800d0c0:	9301      	str	r3, [sp, #4]
 800d0c2:	9c01      	ldr	r4, [sp, #4]
 800d0c4:	61ac      	str	r4, [r5, #24]
 800d0c6:	1e63      	subs	r3, r4, #1
 800d0c8:	419c      	sbcs	r4, r3
 800d0ca:	3401      	adds	r4, #1
 800d0cc:	612c      	str	r4, [r5, #16]
 800d0ce:	2e00      	cmp	r6, #0
 800d0d0:	d018      	beq.n	800d104 <__d2b+0x90>
 800d0d2:	4b17      	ldr	r3, [pc, #92]	; (800d130 <__d2b+0xbc>)
 800d0d4:	18f6      	adds	r6, r6, r3
 800d0d6:	2335      	movs	r3, #53	; 0x35
 800d0d8:	1836      	adds	r6, r6, r0
 800d0da:	1a18      	subs	r0, r3, r0
 800d0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0de:	603e      	str	r6, [r7, #0]
 800d0e0:	6018      	str	r0, [r3, #0]
 800d0e2:	0028      	movs	r0, r5
 800d0e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0e6:	2280      	movs	r2, #128	; 0x80
 800d0e8:	0352      	lsls	r2, r2, #13
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	e7d6      	b.n	800d09c <__d2b+0x28>
 800d0ee:	616c      	str	r4, [r5, #20]
 800d0f0:	e7e7      	b.n	800d0c2 <__d2b+0x4e>
 800d0f2:	a801      	add	r0, sp, #4
 800d0f4:	f7ff fd4c 	bl	800cb90 <__lo0bits>
 800d0f8:	2401      	movs	r4, #1
 800d0fa:	9b01      	ldr	r3, [sp, #4]
 800d0fc:	612c      	str	r4, [r5, #16]
 800d0fe:	616b      	str	r3, [r5, #20]
 800d100:	3020      	adds	r0, #32
 800d102:	e7e4      	b.n	800d0ce <__d2b+0x5a>
 800d104:	4b0b      	ldr	r3, [pc, #44]	; (800d134 <__d2b+0xc0>)
 800d106:	18c0      	adds	r0, r0, r3
 800d108:	4b0b      	ldr	r3, [pc, #44]	; (800d138 <__d2b+0xc4>)
 800d10a:	6038      	str	r0, [r7, #0]
 800d10c:	18e3      	adds	r3, r4, r3
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	18eb      	adds	r3, r5, r3
 800d112:	6958      	ldr	r0, [r3, #20]
 800d114:	f7ff fd22 	bl	800cb5c <__hi0bits>
 800d118:	0164      	lsls	r4, r4, #5
 800d11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d11c:	1a24      	subs	r4, r4, r0
 800d11e:	601c      	str	r4, [r3, #0]
 800d120:	e7df      	b.n	800d0e2 <__d2b+0x6e>
 800d122:	46c0      	nop			; (mov r8, r8)
 800d124:	0800e684 	.word	0x0800e684
 800d128:	0000030a 	.word	0x0000030a
 800d12c:	0800e6f8 	.word	0x0800e6f8
 800d130:	fffffbcd 	.word	0xfffffbcd
 800d134:	fffffbce 	.word	0xfffffbce
 800d138:	3fffffff 	.word	0x3fffffff

0800d13c <_calloc_r>:
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	0c13      	lsrs	r3, r2, #16
 800d140:	0c0d      	lsrs	r5, r1, #16
 800d142:	d11e      	bne.n	800d182 <_calloc_r+0x46>
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10c      	bne.n	800d162 <_calloc_r+0x26>
 800d148:	b289      	uxth	r1, r1
 800d14a:	b294      	uxth	r4, r2
 800d14c:	434c      	muls	r4, r1
 800d14e:	0021      	movs	r1, r4
 800d150:	f000 f88c 	bl	800d26c <_malloc_r>
 800d154:	1e05      	subs	r5, r0, #0
 800d156:	d01b      	beq.n	800d190 <_calloc_r+0x54>
 800d158:	0022      	movs	r2, r4
 800d15a:	2100      	movs	r1, #0
 800d15c:	f7fd fcdf 	bl	800ab1e <memset>
 800d160:	e016      	b.n	800d190 <_calloc_r+0x54>
 800d162:	1c1d      	adds	r5, r3, #0
 800d164:	1c0b      	adds	r3, r1, #0
 800d166:	b292      	uxth	r2, r2
 800d168:	b289      	uxth	r1, r1
 800d16a:	b29c      	uxth	r4, r3
 800d16c:	4351      	muls	r1, r2
 800d16e:	b2ab      	uxth	r3, r5
 800d170:	4363      	muls	r3, r4
 800d172:	0c0c      	lsrs	r4, r1, #16
 800d174:	191c      	adds	r4, r3, r4
 800d176:	0c22      	lsrs	r2, r4, #16
 800d178:	d107      	bne.n	800d18a <_calloc_r+0x4e>
 800d17a:	0424      	lsls	r4, r4, #16
 800d17c:	b289      	uxth	r1, r1
 800d17e:	430c      	orrs	r4, r1
 800d180:	e7e5      	b.n	800d14e <_calloc_r+0x12>
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <_calloc_r+0x4e>
 800d186:	1c13      	adds	r3, r2, #0
 800d188:	e7ed      	b.n	800d166 <_calloc_r+0x2a>
 800d18a:	230c      	movs	r3, #12
 800d18c:	2500      	movs	r5, #0
 800d18e:	6003      	str	r3, [r0, #0]
 800d190:	0028      	movs	r0, r5
 800d192:	bd70      	pop	{r4, r5, r6, pc}

0800d194 <_free_r>:
 800d194:	b570      	push	{r4, r5, r6, lr}
 800d196:	0005      	movs	r5, r0
 800d198:	2900      	cmp	r1, #0
 800d19a:	d010      	beq.n	800d1be <_free_r+0x2a>
 800d19c:	1f0c      	subs	r4, r1, #4
 800d19e:	6823      	ldr	r3, [r4, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	da00      	bge.n	800d1a6 <_free_r+0x12>
 800d1a4:	18e4      	adds	r4, r4, r3
 800d1a6:	0028      	movs	r0, r5
 800d1a8:	f000 fb34 	bl	800d814 <__malloc_lock>
 800d1ac:	4a1d      	ldr	r2, [pc, #116]	; (800d224 <_free_r+0x90>)
 800d1ae:	6813      	ldr	r3, [r2, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d105      	bne.n	800d1c0 <_free_r+0x2c>
 800d1b4:	6063      	str	r3, [r4, #4]
 800d1b6:	6014      	str	r4, [r2, #0]
 800d1b8:	0028      	movs	r0, r5
 800d1ba:	f000 fb33 	bl	800d824 <__malloc_unlock>
 800d1be:	bd70      	pop	{r4, r5, r6, pc}
 800d1c0:	42a3      	cmp	r3, r4
 800d1c2:	d908      	bls.n	800d1d6 <_free_r+0x42>
 800d1c4:	6821      	ldr	r1, [r4, #0]
 800d1c6:	1860      	adds	r0, r4, r1
 800d1c8:	4283      	cmp	r3, r0
 800d1ca:	d1f3      	bne.n	800d1b4 <_free_r+0x20>
 800d1cc:	6818      	ldr	r0, [r3, #0]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	1841      	adds	r1, r0, r1
 800d1d2:	6021      	str	r1, [r4, #0]
 800d1d4:	e7ee      	b.n	800d1b4 <_free_r+0x20>
 800d1d6:	001a      	movs	r2, r3
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d001      	beq.n	800d1e2 <_free_r+0x4e>
 800d1de:	42a3      	cmp	r3, r4
 800d1e0:	d9f9      	bls.n	800d1d6 <_free_r+0x42>
 800d1e2:	6811      	ldr	r1, [r2, #0]
 800d1e4:	1850      	adds	r0, r2, r1
 800d1e6:	42a0      	cmp	r0, r4
 800d1e8:	d10b      	bne.n	800d202 <_free_r+0x6e>
 800d1ea:	6820      	ldr	r0, [r4, #0]
 800d1ec:	1809      	adds	r1, r1, r0
 800d1ee:	1850      	adds	r0, r2, r1
 800d1f0:	6011      	str	r1, [r2, #0]
 800d1f2:	4283      	cmp	r3, r0
 800d1f4:	d1e0      	bne.n	800d1b8 <_free_r+0x24>
 800d1f6:	6818      	ldr	r0, [r3, #0]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	1841      	adds	r1, r0, r1
 800d1fc:	6011      	str	r1, [r2, #0]
 800d1fe:	6053      	str	r3, [r2, #4]
 800d200:	e7da      	b.n	800d1b8 <_free_r+0x24>
 800d202:	42a0      	cmp	r0, r4
 800d204:	d902      	bls.n	800d20c <_free_r+0x78>
 800d206:	230c      	movs	r3, #12
 800d208:	602b      	str	r3, [r5, #0]
 800d20a:	e7d5      	b.n	800d1b8 <_free_r+0x24>
 800d20c:	6821      	ldr	r1, [r4, #0]
 800d20e:	1860      	adds	r0, r4, r1
 800d210:	4283      	cmp	r3, r0
 800d212:	d103      	bne.n	800d21c <_free_r+0x88>
 800d214:	6818      	ldr	r0, [r3, #0]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	1841      	adds	r1, r0, r1
 800d21a:	6021      	str	r1, [r4, #0]
 800d21c:	6063      	str	r3, [r4, #4]
 800d21e:	6054      	str	r4, [r2, #4]
 800d220:	e7ca      	b.n	800d1b8 <_free_r+0x24>
 800d222:	46c0      	nop			; (mov r8, r8)
 800d224:	200008f8 	.word	0x200008f8

0800d228 <sbrk_aligned>:
 800d228:	b570      	push	{r4, r5, r6, lr}
 800d22a:	4e0f      	ldr	r6, [pc, #60]	; (800d268 <sbrk_aligned+0x40>)
 800d22c:	000d      	movs	r5, r1
 800d22e:	6831      	ldr	r1, [r6, #0]
 800d230:	0004      	movs	r4, r0
 800d232:	2900      	cmp	r1, #0
 800d234:	d102      	bne.n	800d23c <sbrk_aligned+0x14>
 800d236:	f000 f9f1 	bl	800d61c <_sbrk_r>
 800d23a:	6030      	str	r0, [r6, #0]
 800d23c:	0029      	movs	r1, r5
 800d23e:	0020      	movs	r0, r4
 800d240:	f000 f9ec 	bl	800d61c <_sbrk_r>
 800d244:	1c43      	adds	r3, r0, #1
 800d246:	d00a      	beq.n	800d25e <sbrk_aligned+0x36>
 800d248:	2303      	movs	r3, #3
 800d24a:	1cc5      	adds	r5, r0, #3
 800d24c:	439d      	bics	r5, r3
 800d24e:	42a8      	cmp	r0, r5
 800d250:	d007      	beq.n	800d262 <sbrk_aligned+0x3a>
 800d252:	1a29      	subs	r1, r5, r0
 800d254:	0020      	movs	r0, r4
 800d256:	f000 f9e1 	bl	800d61c <_sbrk_r>
 800d25a:	1c43      	adds	r3, r0, #1
 800d25c:	d101      	bne.n	800d262 <sbrk_aligned+0x3a>
 800d25e:	2501      	movs	r5, #1
 800d260:	426d      	negs	r5, r5
 800d262:	0028      	movs	r0, r5
 800d264:	bd70      	pop	{r4, r5, r6, pc}
 800d266:	46c0      	nop			; (mov r8, r8)
 800d268:	200008fc 	.word	0x200008fc

0800d26c <_malloc_r>:
 800d26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d26e:	2203      	movs	r2, #3
 800d270:	1ccb      	adds	r3, r1, #3
 800d272:	4393      	bics	r3, r2
 800d274:	3308      	adds	r3, #8
 800d276:	0006      	movs	r6, r0
 800d278:	001f      	movs	r7, r3
 800d27a:	2b0c      	cmp	r3, #12
 800d27c:	d232      	bcs.n	800d2e4 <_malloc_r+0x78>
 800d27e:	270c      	movs	r7, #12
 800d280:	42b9      	cmp	r1, r7
 800d282:	d831      	bhi.n	800d2e8 <_malloc_r+0x7c>
 800d284:	0030      	movs	r0, r6
 800d286:	f000 fac5 	bl	800d814 <__malloc_lock>
 800d28a:	4d32      	ldr	r5, [pc, #200]	; (800d354 <_malloc_r+0xe8>)
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	001c      	movs	r4, r3
 800d290:	2c00      	cmp	r4, #0
 800d292:	d12e      	bne.n	800d2f2 <_malloc_r+0x86>
 800d294:	0039      	movs	r1, r7
 800d296:	0030      	movs	r0, r6
 800d298:	f7ff ffc6 	bl	800d228 <sbrk_aligned>
 800d29c:	0004      	movs	r4, r0
 800d29e:	1c43      	adds	r3, r0, #1
 800d2a0:	d11e      	bne.n	800d2e0 <_malloc_r+0x74>
 800d2a2:	682c      	ldr	r4, [r5, #0]
 800d2a4:	0025      	movs	r5, r4
 800d2a6:	2d00      	cmp	r5, #0
 800d2a8:	d14a      	bne.n	800d340 <_malloc_r+0xd4>
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	0029      	movs	r1, r5
 800d2ae:	18e3      	adds	r3, r4, r3
 800d2b0:	0030      	movs	r0, r6
 800d2b2:	9301      	str	r3, [sp, #4]
 800d2b4:	f000 f9b2 	bl	800d61c <_sbrk_r>
 800d2b8:	9b01      	ldr	r3, [sp, #4]
 800d2ba:	4283      	cmp	r3, r0
 800d2bc:	d143      	bne.n	800d346 <_malloc_r+0xda>
 800d2be:	6823      	ldr	r3, [r4, #0]
 800d2c0:	3703      	adds	r7, #3
 800d2c2:	1aff      	subs	r7, r7, r3
 800d2c4:	2303      	movs	r3, #3
 800d2c6:	439f      	bics	r7, r3
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	2f0c      	cmp	r7, #12
 800d2cc:	d200      	bcs.n	800d2d0 <_malloc_r+0x64>
 800d2ce:	270c      	movs	r7, #12
 800d2d0:	0039      	movs	r1, r7
 800d2d2:	0030      	movs	r0, r6
 800d2d4:	f7ff ffa8 	bl	800d228 <sbrk_aligned>
 800d2d8:	1c43      	adds	r3, r0, #1
 800d2da:	d034      	beq.n	800d346 <_malloc_r+0xda>
 800d2dc:	6823      	ldr	r3, [r4, #0]
 800d2de:	19df      	adds	r7, r3, r7
 800d2e0:	6027      	str	r7, [r4, #0]
 800d2e2:	e013      	b.n	800d30c <_malloc_r+0xa0>
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	dacb      	bge.n	800d280 <_malloc_r+0x14>
 800d2e8:	230c      	movs	r3, #12
 800d2ea:	2500      	movs	r5, #0
 800d2ec:	6033      	str	r3, [r6, #0]
 800d2ee:	0028      	movs	r0, r5
 800d2f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d2f2:	6822      	ldr	r2, [r4, #0]
 800d2f4:	1bd1      	subs	r1, r2, r7
 800d2f6:	d420      	bmi.n	800d33a <_malloc_r+0xce>
 800d2f8:	290b      	cmp	r1, #11
 800d2fa:	d917      	bls.n	800d32c <_malloc_r+0xc0>
 800d2fc:	19e2      	adds	r2, r4, r7
 800d2fe:	6027      	str	r7, [r4, #0]
 800d300:	42a3      	cmp	r3, r4
 800d302:	d111      	bne.n	800d328 <_malloc_r+0xbc>
 800d304:	602a      	str	r2, [r5, #0]
 800d306:	6863      	ldr	r3, [r4, #4]
 800d308:	6011      	str	r1, [r2, #0]
 800d30a:	6053      	str	r3, [r2, #4]
 800d30c:	0030      	movs	r0, r6
 800d30e:	0025      	movs	r5, r4
 800d310:	f000 fa88 	bl	800d824 <__malloc_unlock>
 800d314:	2207      	movs	r2, #7
 800d316:	350b      	adds	r5, #11
 800d318:	1d23      	adds	r3, r4, #4
 800d31a:	4395      	bics	r5, r2
 800d31c:	1aea      	subs	r2, r5, r3
 800d31e:	429d      	cmp	r5, r3
 800d320:	d0e5      	beq.n	800d2ee <_malloc_r+0x82>
 800d322:	1b5b      	subs	r3, r3, r5
 800d324:	50a3      	str	r3, [r4, r2]
 800d326:	e7e2      	b.n	800d2ee <_malloc_r+0x82>
 800d328:	605a      	str	r2, [r3, #4]
 800d32a:	e7ec      	b.n	800d306 <_malloc_r+0x9a>
 800d32c:	6862      	ldr	r2, [r4, #4]
 800d32e:	42a3      	cmp	r3, r4
 800d330:	d101      	bne.n	800d336 <_malloc_r+0xca>
 800d332:	602a      	str	r2, [r5, #0]
 800d334:	e7ea      	b.n	800d30c <_malloc_r+0xa0>
 800d336:	605a      	str	r2, [r3, #4]
 800d338:	e7e8      	b.n	800d30c <_malloc_r+0xa0>
 800d33a:	0023      	movs	r3, r4
 800d33c:	6864      	ldr	r4, [r4, #4]
 800d33e:	e7a7      	b.n	800d290 <_malloc_r+0x24>
 800d340:	002c      	movs	r4, r5
 800d342:	686d      	ldr	r5, [r5, #4]
 800d344:	e7af      	b.n	800d2a6 <_malloc_r+0x3a>
 800d346:	230c      	movs	r3, #12
 800d348:	0030      	movs	r0, r6
 800d34a:	6033      	str	r3, [r6, #0]
 800d34c:	f000 fa6a 	bl	800d824 <__malloc_unlock>
 800d350:	e7cd      	b.n	800d2ee <_malloc_r+0x82>
 800d352:	46c0      	nop			; (mov r8, r8)
 800d354:	200008f8 	.word	0x200008f8

0800d358 <__sfputc_r>:
 800d358:	6893      	ldr	r3, [r2, #8]
 800d35a:	b510      	push	{r4, lr}
 800d35c:	3b01      	subs	r3, #1
 800d35e:	6093      	str	r3, [r2, #8]
 800d360:	2b00      	cmp	r3, #0
 800d362:	da04      	bge.n	800d36e <__sfputc_r+0x16>
 800d364:	6994      	ldr	r4, [r2, #24]
 800d366:	42a3      	cmp	r3, r4
 800d368:	db07      	blt.n	800d37a <__sfputc_r+0x22>
 800d36a:	290a      	cmp	r1, #10
 800d36c:	d005      	beq.n	800d37a <__sfputc_r+0x22>
 800d36e:	6813      	ldr	r3, [r2, #0]
 800d370:	1c58      	adds	r0, r3, #1
 800d372:	6010      	str	r0, [r2, #0]
 800d374:	7019      	strb	r1, [r3, #0]
 800d376:	0008      	movs	r0, r1
 800d378:	bd10      	pop	{r4, pc}
 800d37a:	f7fe f977 	bl	800b66c <__swbuf_r>
 800d37e:	0001      	movs	r1, r0
 800d380:	e7f9      	b.n	800d376 <__sfputc_r+0x1e>

0800d382 <__sfputs_r>:
 800d382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d384:	0006      	movs	r6, r0
 800d386:	000f      	movs	r7, r1
 800d388:	0014      	movs	r4, r2
 800d38a:	18d5      	adds	r5, r2, r3
 800d38c:	42ac      	cmp	r4, r5
 800d38e:	d101      	bne.n	800d394 <__sfputs_r+0x12>
 800d390:	2000      	movs	r0, #0
 800d392:	e007      	b.n	800d3a4 <__sfputs_r+0x22>
 800d394:	7821      	ldrb	r1, [r4, #0]
 800d396:	003a      	movs	r2, r7
 800d398:	0030      	movs	r0, r6
 800d39a:	f7ff ffdd 	bl	800d358 <__sfputc_r>
 800d39e:	3401      	adds	r4, #1
 800d3a0:	1c43      	adds	r3, r0, #1
 800d3a2:	d1f3      	bne.n	800d38c <__sfputs_r+0xa>
 800d3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3a8 <_vfiprintf_r>:
 800d3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3aa:	b0a1      	sub	sp, #132	; 0x84
 800d3ac:	0006      	movs	r6, r0
 800d3ae:	000c      	movs	r4, r1
 800d3b0:	001f      	movs	r7, r3
 800d3b2:	9203      	str	r2, [sp, #12]
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d004      	beq.n	800d3c2 <_vfiprintf_r+0x1a>
 800d3b8:	6983      	ldr	r3, [r0, #24]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d101      	bne.n	800d3c2 <_vfiprintf_r+0x1a>
 800d3be:	f7ff f9f7 	bl	800c7b0 <__sinit>
 800d3c2:	4b8e      	ldr	r3, [pc, #568]	; (800d5fc <_vfiprintf_r+0x254>)
 800d3c4:	429c      	cmp	r4, r3
 800d3c6:	d11c      	bne.n	800d402 <_vfiprintf_r+0x5a>
 800d3c8:	6874      	ldr	r4, [r6, #4]
 800d3ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3cc:	07db      	lsls	r3, r3, #31
 800d3ce:	d405      	bmi.n	800d3dc <_vfiprintf_r+0x34>
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	059b      	lsls	r3, r3, #22
 800d3d4:	d402      	bmi.n	800d3dc <_vfiprintf_r+0x34>
 800d3d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3d8:	f7ff fa8f 	bl	800c8fa <__retarget_lock_acquire_recursive>
 800d3dc:	89a3      	ldrh	r3, [r4, #12]
 800d3de:	071b      	lsls	r3, r3, #28
 800d3e0:	d502      	bpl.n	800d3e8 <_vfiprintf_r+0x40>
 800d3e2:	6923      	ldr	r3, [r4, #16]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d11d      	bne.n	800d424 <_vfiprintf_r+0x7c>
 800d3e8:	0021      	movs	r1, r4
 800d3ea:	0030      	movs	r0, r6
 800d3ec:	f7fe f994 	bl	800b718 <__swsetup_r>
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d017      	beq.n	800d424 <_vfiprintf_r+0x7c>
 800d3f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3f6:	07db      	lsls	r3, r3, #31
 800d3f8:	d50d      	bpl.n	800d416 <_vfiprintf_r+0x6e>
 800d3fa:	2001      	movs	r0, #1
 800d3fc:	4240      	negs	r0, r0
 800d3fe:	b021      	add	sp, #132	; 0x84
 800d400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d402:	4b7f      	ldr	r3, [pc, #508]	; (800d600 <_vfiprintf_r+0x258>)
 800d404:	429c      	cmp	r4, r3
 800d406:	d101      	bne.n	800d40c <_vfiprintf_r+0x64>
 800d408:	68b4      	ldr	r4, [r6, #8]
 800d40a:	e7de      	b.n	800d3ca <_vfiprintf_r+0x22>
 800d40c:	4b7d      	ldr	r3, [pc, #500]	; (800d604 <_vfiprintf_r+0x25c>)
 800d40e:	429c      	cmp	r4, r3
 800d410:	d1db      	bne.n	800d3ca <_vfiprintf_r+0x22>
 800d412:	68f4      	ldr	r4, [r6, #12]
 800d414:	e7d9      	b.n	800d3ca <_vfiprintf_r+0x22>
 800d416:	89a3      	ldrh	r3, [r4, #12]
 800d418:	059b      	lsls	r3, r3, #22
 800d41a:	d4ee      	bmi.n	800d3fa <_vfiprintf_r+0x52>
 800d41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d41e:	f7ff fa6d 	bl	800c8fc <__retarget_lock_release_recursive>
 800d422:	e7ea      	b.n	800d3fa <_vfiprintf_r+0x52>
 800d424:	2300      	movs	r3, #0
 800d426:	ad08      	add	r5, sp, #32
 800d428:	616b      	str	r3, [r5, #20]
 800d42a:	3320      	adds	r3, #32
 800d42c:	766b      	strb	r3, [r5, #25]
 800d42e:	3310      	adds	r3, #16
 800d430:	76ab      	strb	r3, [r5, #26]
 800d432:	9707      	str	r7, [sp, #28]
 800d434:	9f03      	ldr	r7, [sp, #12]
 800d436:	783b      	ldrb	r3, [r7, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d001      	beq.n	800d440 <_vfiprintf_r+0x98>
 800d43c:	2b25      	cmp	r3, #37	; 0x25
 800d43e:	d14e      	bne.n	800d4de <_vfiprintf_r+0x136>
 800d440:	9b03      	ldr	r3, [sp, #12]
 800d442:	1afb      	subs	r3, r7, r3
 800d444:	9305      	str	r3, [sp, #20]
 800d446:	9b03      	ldr	r3, [sp, #12]
 800d448:	429f      	cmp	r7, r3
 800d44a:	d00d      	beq.n	800d468 <_vfiprintf_r+0xc0>
 800d44c:	9b05      	ldr	r3, [sp, #20]
 800d44e:	0021      	movs	r1, r4
 800d450:	0030      	movs	r0, r6
 800d452:	9a03      	ldr	r2, [sp, #12]
 800d454:	f7ff ff95 	bl	800d382 <__sfputs_r>
 800d458:	1c43      	adds	r3, r0, #1
 800d45a:	d100      	bne.n	800d45e <_vfiprintf_r+0xb6>
 800d45c:	e0b5      	b.n	800d5ca <_vfiprintf_r+0x222>
 800d45e:	696a      	ldr	r2, [r5, #20]
 800d460:	9b05      	ldr	r3, [sp, #20]
 800d462:	4694      	mov	ip, r2
 800d464:	4463      	add	r3, ip
 800d466:	616b      	str	r3, [r5, #20]
 800d468:	783b      	ldrb	r3, [r7, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d100      	bne.n	800d470 <_vfiprintf_r+0xc8>
 800d46e:	e0ac      	b.n	800d5ca <_vfiprintf_r+0x222>
 800d470:	2201      	movs	r2, #1
 800d472:	1c7b      	adds	r3, r7, #1
 800d474:	9303      	str	r3, [sp, #12]
 800d476:	2300      	movs	r3, #0
 800d478:	4252      	negs	r2, r2
 800d47a:	606a      	str	r2, [r5, #4]
 800d47c:	a904      	add	r1, sp, #16
 800d47e:	3254      	adds	r2, #84	; 0x54
 800d480:	1852      	adds	r2, r2, r1
 800d482:	602b      	str	r3, [r5, #0]
 800d484:	60eb      	str	r3, [r5, #12]
 800d486:	60ab      	str	r3, [r5, #8]
 800d488:	7013      	strb	r3, [r2, #0]
 800d48a:	65ab      	str	r3, [r5, #88]	; 0x58
 800d48c:	9b03      	ldr	r3, [sp, #12]
 800d48e:	2205      	movs	r2, #5
 800d490:	7819      	ldrb	r1, [r3, #0]
 800d492:	485d      	ldr	r0, [pc, #372]	; (800d608 <_vfiprintf_r+0x260>)
 800d494:	f7ff faaa 	bl	800c9ec <memchr>
 800d498:	9b03      	ldr	r3, [sp, #12]
 800d49a:	1c5f      	adds	r7, r3, #1
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d120      	bne.n	800d4e2 <_vfiprintf_r+0x13a>
 800d4a0:	682a      	ldr	r2, [r5, #0]
 800d4a2:	06d3      	lsls	r3, r2, #27
 800d4a4:	d504      	bpl.n	800d4b0 <_vfiprintf_r+0x108>
 800d4a6:	2353      	movs	r3, #83	; 0x53
 800d4a8:	a904      	add	r1, sp, #16
 800d4aa:	185b      	adds	r3, r3, r1
 800d4ac:	2120      	movs	r1, #32
 800d4ae:	7019      	strb	r1, [r3, #0]
 800d4b0:	0713      	lsls	r3, r2, #28
 800d4b2:	d504      	bpl.n	800d4be <_vfiprintf_r+0x116>
 800d4b4:	2353      	movs	r3, #83	; 0x53
 800d4b6:	a904      	add	r1, sp, #16
 800d4b8:	185b      	adds	r3, r3, r1
 800d4ba:	212b      	movs	r1, #43	; 0x2b
 800d4bc:	7019      	strb	r1, [r3, #0]
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4c4:	d016      	beq.n	800d4f4 <_vfiprintf_r+0x14c>
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	68eb      	ldr	r3, [r5, #12]
 800d4ca:	9f03      	ldr	r7, [sp, #12]
 800d4cc:	783a      	ldrb	r2, [r7, #0]
 800d4ce:	1c78      	adds	r0, r7, #1
 800d4d0:	3a30      	subs	r2, #48	; 0x30
 800d4d2:	4684      	mov	ip, r0
 800d4d4:	2a09      	cmp	r2, #9
 800d4d6:	d94f      	bls.n	800d578 <_vfiprintf_r+0x1d0>
 800d4d8:	2900      	cmp	r1, #0
 800d4da:	d111      	bne.n	800d500 <_vfiprintf_r+0x158>
 800d4dc:	e017      	b.n	800d50e <_vfiprintf_r+0x166>
 800d4de:	3701      	adds	r7, #1
 800d4e0:	e7a9      	b.n	800d436 <_vfiprintf_r+0x8e>
 800d4e2:	4b49      	ldr	r3, [pc, #292]	; (800d608 <_vfiprintf_r+0x260>)
 800d4e4:	682a      	ldr	r2, [r5, #0]
 800d4e6:	1ac0      	subs	r0, r0, r3
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	4083      	lsls	r3, r0
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	602b      	str	r3, [r5, #0]
 800d4f0:	9703      	str	r7, [sp, #12]
 800d4f2:	e7cb      	b.n	800d48c <_vfiprintf_r+0xe4>
 800d4f4:	9b07      	ldr	r3, [sp, #28]
 800d4f6:	1d19      	adds	r1, r3, #4
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	9107      	str	r1, [sp, #28]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	db01      	blt.n	800d504 <_vfiprintf_r+0x15c>
 800d500:	930b      	str	r3, [sp, #44]	; 0x2c
 800d502:	e004      	b.n	800d50e <_vfiprintf_r+0x166>
 800d504:	425b      	negs	r3, r3
 800d506:	60eb      	str	r3, [r5, #12]
 800d508:	2302      	movs	r3, #2
 800d50a:	4313      	orrs	r3, r2
 800d50c:	602b      	str	r3, [r5, #0]
 800d50e:	783b      	ldrb	r3, [r7, #0]
 800d510:	2b2e      	cmp	r3, #46	; 0x2e
 800d512:	d10a      	bne.n	800d52a <_vfiprintf_r+0x182>
 800d514:	787b      	ldrb	r3, [r7, #1]
 800d516:	2b2a      	cmp	r3, #42	; 0x2a
 800d518:	d137      	bne.n	800d58a <_vfiprintf_r+0x1e2>
 800d51a:	9b07      	ldr	r3, [sp, #28]
 800d51c:	3702      	adds	r7, #2
 800d51e:	1d1a      	adds	r2, r3, #4
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	9207      	str	r2, [sp, #28]
 800d524:	2b00      	cmp	r3, #0
 800d526:	db2d      	blt.n	800d584 <_vfiprintf_r+0x1dc>
 800d528:	9309      	str	r3, [sp, #36]	; 0x24
 800d52a:	2203      	movs	r2, #3
 800d52c:	7839      	ldrb	r1, [r7, #0]
 800d52e:	4837      	ldr	r0, [pc, #220]	; (800d60c <_vfiprintf_r+0x264>)
 800d530:	f7ff fa5c 	bl	800c9ec <memchr>
 800d534:	2800      	cmp	r0, #0
 800d536:	d007      	beq.n	800d548 <_vfiprintf_r+0x1a0>
 800d538:	4b34      	ldr	r3, [pc, #208]	; (800d60c <_vfiprintf_r+0x264>)
 800d53a:	682a      	ldr	r2, [r5, #0]
 800d53c:	1ac0      	subs	r0, r0, r3
 800d53e:	2340      	movs	r3, #64	; 0x40
 800d540:	4083      	lsls	r3, r0
 800d542:	4313      	orrs	r3, r2
 800d544:	3701      	adds	r7, #1
 800d546:	602b      	str	r3, [r5, #0]
 800d548:	7839      	ldrb	r1, [r7, #0]
 800d54a:	1c7b      	adds	r3, r7, #1
 800d54c:	2206      	movs	r2, #6
 800d54e:	4830      	ldr	r0, [pc, #192]	; (800d610 <_vfiprintf_r+0x268>)
 800d550:	9303      	str	r3, [sp, #12]
 800d552:	7629      	strb	r1, [r5, #24]
 800d554:	f7ff fa4a 	bl	800c9ec <memchr>
 800d558:	2800      	cmp	r0, #0
 800d55a:	d045      	beq.n	800d5e8 <_vfiprintf_r+0x240>
 800d55c:	4b2d      	ldr	r3, [pc, #180]	; (800d614 <_vfiprintf_r+0x26c>)
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d127      	bne.n	800d5b2 <_vfiprintf_r+0x20a>
 800d562:	2207      	movs	r2, #7
 800d564:	9b07      	ldr	r3, [sp, #28]
 800d566:	3307      	adds	r3, #7
 800d568:	4393      	bics	r3, r2
 800d56a:	3308      	adds	r3, #8
 800d56c:	9307      	str	r3, [sp, #28]
 800d56e:	696b      	ldr	r3, [r5, #20]
 800d570:	9a04      	ldr	r2, [sp, #16]
 800d572:	189b      	adds	r3, r3, r2
 800d574:	616b      	str	r3, [r5, #20]
 800d576:	e75d      	b.n	800d434 <_vfiprintf_r+0x8c>
 800d578:	210a      	movs	r1, #10
 800d57a:	434b      	muls	r3, r1
 800d57c:	4667      	mov	r7, ip
 800d57e:	189b      	adds	r3, r3, r2
 800d580:	3909      	subs	r1, #9
 800d582:	e7a3      	b.n	800d4cc <_vfiprintf_r+0x124>
 800d584:	2301      	movs	r3, #1
 800d586:	425b      	negs	r3, r3
 800d588:	e7ce      	b.n	800d528 <_vfiprintf_r+0x180>
 800d58a:	2300      	movs	r3, #0
 800d58c:	001a      	movs	r2, r3
 800d58e:	3701      	adds	r7, #1
 800d590:	606b      	str	r3, [r5, #4]
 800d592:	7839      	ldrb	r1, [r7, #0]
 800d594:	1c78      	adds	r0, r7, #1
 800d596:	3930      	subs	r1, #48	; 0x30
 800d598:	4684      	mov	ip, r0
 800d59a:	2909      	cmp	r1, #9
 800d59c:	d903      	bls.n	800d5a6 <_vfiprintf_r+0x1fe>
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d0c3      	beq.n	800d52a <_vfiprintf_r+0x182>
 800d5a2:	9209      	str	r2, [sp, #36]	; 0x24
 800d5a4:	e7c1      	b.n	800d52a <_vfiprintf_r+0x182>
 800d5a6:	230a      	movs	r3, #10
 800d5a8:	435a      	muls	r2, r3
 800d5aa:	4667      	mov	r7, ip
 800d5ac:	1852      	adds	r2, r2, r1
 800d5ae:	3b09      	subs	r3, #9
 800d5b0:	e7ef      	b.n	800d592 <_vfiprintf_r+0x1ea>
 800d5b2:	ab07      	add	r3, sp, #28
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	0022      	movs	r2, r4
 800d5b8:	0029      	movs	r1, r5
 800d5ba:	0030      	movs	r0, r6
 800d5bc:	4b16      	ldr	r3, [pc, #88]	; (800d618 <_vfiprintf_r+0x270>)
 800d5be:	f7fd fb61 	bl	800ac84 <_printf_float>
 800d5c2:	9004      	str	r0, [sp, #16]
 800d5c4:	9b04      	ldr	r3, [sp, #16]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	d1d1      	bne.n	800d56e <_vfiprintf_r+0x1c6>
 800d5ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5cc:	07db      	lsls	r3, r3, #31
 800d5ce:	d405      	bmi.n	800d5dc <_vfiprintf_r+0x234>
 800d5d0:	89a3      	ldrh	r3, [r4, #12]
 800d5d2:	059b      	lsls	r3, r3, #22
 800d5d4:	d402      	bmi.n	800d5dc <_vfiprintf_r+0x234>
 800d5d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5d8:	f7ff f990 	bl	800c8fc <__retarget_lock_release_recursive>
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	065b      	lsls	r3, r3, #25
 800d5e0:	d500      	bpl.n	800d5e4 <_vfiprintf_r+0x23c>
 800d5e2:	e70a      	b.n	800d3fa <_vfiprintf_r+0x52>
 800d5e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d5e6:	e70a      	b.n	800d3fe <_vfiprintf_r+0x56>
 800d5e8:	ab07      	add	r3, sp, #28
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	0022      	movs	r2, r4
 800d5ee:	0029      	movs	r1, r5
 800d5f0:	0030      	movs	r0, r6
 800d5f2:	4b09      	ldr	r3, [pc, #36]	; (800d618 <_vfiprintf_r+0x270>)
 800d5f4:	f7fd fdf8 	bl	800b1e8 <_printf_i>
 800d5f8:	e7e3      	b.n	800d5c2 <_vfiprintf_r+0x21a>
 800d5fa:	46c0      	nop			; (mov r8, r8)
 800d5fc:	0800e6b8 	.word	0x0800e6b8
 800d600:	0800e6d8 	.word	0x0800e6d8
 800d604:	0800e698 	.word	0x0800e698
 800d608:	0800e854 	.word	0x0800e854
 800d60c:	0800e85a 	.word	0x0800e85a
 800d610:	0800e85e 	.word	0x0800e85e
 800d614:	0800ac85 	.word	0x0800ac85
 800d618:	0800d383 	.word	0x0800d383

0800d61c <_sbrk_r>:
 800d61c:	2300      	movs	r3, #0
 800d61e:	b570      	push	{r4, r5, r6, lr}
 800d620:	4d06      	ldr	r5, [pc, #24]	; (800d63c <_sbrk_r+0x20>)
 800d622:	0004      	movs	r4, r0
 800d624:	0008      	movs	r0, r1
 800d626:	602b      	str	r3, [r5, #0]
 800d628:	f7f8 fc52 	bl	8005ed0 <_sbrk>
 800d62c:	1c43      	adds	r3, r0, #1
 800d62e:	d103      	bne.n	800d638 <_sbrk_r+0x1c>
 800d630:	682b      	ldr	r3, [r5, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d000      	beq.n	800d638 <_sbrk_r+0x1c>
 800d636:	6023      	str	r3, [r4, #0]
 800d638:	bd70      	pop	{r4, r5, r6, pc}
 800d63a:	46c0      	nop			; (mov r8, r8)
 800d63c:	20000900 	.word	0x20000900

0800d640 <__sread>:
 800d640:	b570      	push	{r4, r5, r6, lr}
 800d642:	000c      	movs	r4, r1
 800d644:	250e      	movs	r5, #14
 800d646:	5f49      	ldrsh	r1, [r1, r5]
 800d648:	f000 f8f4 	bl	800d834 <_read_r>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	db03      	blt.n	800d658 <__sread+0x18>
 800d650:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d652:	181b      	adds	r3, r3, r0
 800d654:	6563      	str	r3, [r4, #84]	; 0x54
 800d656:	bd70      	pop	{r4, r5, r6, pc}
 800d658:	89a3      	ldrh	r3, [r4, #12]
 800d65a:	4a02      	ldr	r2, [pc, #8]	; (800d664 <__sread+0x24>)
 800d65c:	4013      	ands	r3, r2
 800d65e:	81a3      	strh	r3, [r4, #12]
 800d660:	e7f9      	b.n	800d656 <__sread+0x16>
 800d662:	46c0      	nop			; (mov r8, r8)
 800d664:	ffffefff 	.word	0xffffefff

0800d668 <__swrite>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	001f      	movs	r7, r3
 800d66c:	898b      	ldrh	r3, [r1, #12]
 800d66e:	0005      	movs	r5, r0
 800d670:	000c      	movs	r4, r1
 800d672:	0016      	movs	r6, r2
 800d674:	05db      	lsls	r3, r3, #23
 800d676:	d505      	bpl.n	800d684 <__swrite+0x1c>
 800d678:	230e      	movs	r3, #14
 800d67a:	5ec9      	ldrsh	r1, [r1, r3]
 800d67c:	2200      	movs	r2, #0
 800d67e:	2302      	movs	r3, #2
 800d680:	f000 f8a2 	bl	800d7c8 <_lseek_r>
 800d684:	89a3      	ldrh	r3, [r4, #12]
 800d686:	4a05      	ldr	r2, [pc, #20]	; (800d69c <__swrite+0x34>)
 800d688:	0028      	movs	r0, r5
 800d68a:	4013      	ands	r3, r2
 800d68c:	81a3      	strh	r3, [r4, #12]
 800d68e:	0032      	movs	r2, r6
 800d690:	230e      	movs	r3, #14
 800d692:	5ee1      	ldrsh	r1, [r4, r3]
 800d694:	003b      	movs	r3, r7
 800d696:	f000 f81f 	bl	800d6d8 <_write_r>
 800d69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d69c:	ffffefff 	.word	0xffffefff

0800d6a0 <__sseek>:
 800d6a0:	b570      	push	{r4, r5, r6, lr}
 800d6a2:	000c      	movs	r4, r1
 800d6a4:	250e      	movs	r5, #14
 800d6a6:	5f49      	ldrsh	r1, [r1, r5]
 800d6a8:	f000 f88e 	bl	800d7c8 <_lseek_r>
 800d6ac:	89a3      	ldrh	r3, [r4, #12]
 800d6ae:	1c42      	adds	r2, r0, #1
 800d6b0:	d103      	bne.n	800d6ba <__sseek+0x1a>
 800d6b2:	4a05      	ldr	r2, [pc, #20]	; (800d6c8 <__sseek+0x28>)
 800d6b4:	4013      	ands	r3, r2
 800d6b6:	81a3      	strh	r3, [r4, #12]
 800d6b8:	bd70      	pop	{r4, r5, r6, pc}
 800d6ba:	2280      	movs	r2, #128	; 0x80
 800d6bc:	0152      	lsls	r2, r2, #5
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	81a3      	strh	r3, [r4, #12]
 800d6c2:	6560      	str	r0, [r4, #84]	; 0x54
 800d6c4:	e7f8      	b.n	800d6b8 <__sseek+0x18>
 800d6c6:	46c0      	nop			; (mov r8, r8)
 800d6c8:	ffffefff 	.word	0xffffefff

0800d6cc <__sclose>:
 800d6cc:	b510      	push	{r4, lr}
 800d6ce:	230e      	movs	r3, #14
 800d6d0:	5ec9      	ldrsh	r1, [r1, r3]
 800d6d2:	f000 f833 	bl	800d73c <_close_r>
 800d6d6:	bd10      	pop	{r4, pc}

0800d6d8 <_write_r>:
 800d6d8:	b570      	push	{r4, r5, r6, lr}
 800d6da:	0004      	movs	r4, r0
 800d6dc:	0008      	movs	r0, r1
 800d6de:	0011      	movs	r1, r2
 800d6e0:	001a      	movs	r2, r3
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	4d05      	ldr	r5, [pc, #20]	; (800d6fc <_write_r+0x24>)
 800d6e6:	602b      	str	r3, [r5, #0]
 800d6e8:	f7f7 fc8a 	bl	8005000 <_write>
 800d6ec:	1c43      	adds	r3, r0, #1
 800d6ee:	d103      	bne.n	800d6f8 <_write_r+0x20>
 800d6f0:	682b      	ldr	r3, [r5, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d000      	beq.n	800d6f8 <_write_r+0x20>
 800d6f6:	6023      	str	r3, [r4, #0]
 800d6f8:	bd70      	pop	{r4, r5, r6, pc}
 800d6fa:	46c0      	nop			; (mov r8, r8)
 800d6fc:	20000900 	.word	0x20000900

0800d700 <__assert_func>:
 800d700:	b530      	push	{r4, r5, lr}
 800d702:	0014      	movs	r4, r2
 800d704:	001a      	movs	r2, r3
 800d706:	4b09      	ldr	r3, [pc, #36]	; (800d72c <__assert_func+0x2c>)
 800d708:	0005      	movs	r5, r0
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	b085      	sub	sp, #20
 800d70e:	68d8      	ldr	r0, [r3, #12]
 800d710:	4b07      	ldr	r3, [pc, #28]	; (800d730 <__assert_func+0x30>)
 800d712:	2c00      	cmp	r4, #0
 800d714:	d101      	bne.n	800d71a <__assert_func+0x1a>
 800d716:	4b07      	ldr	r3, [pc, #28]	; (800d734 <__assert_func+0x34>)
 800d718:	001c      	movs	r4, r3
 800d71a:	9301      	str	r3, [sp, #4]
 800d71c:	9100      	str	r1, [sp, #0]
 800d71e:	002b      	movs	r3, r5
 800d720:	4905      	ldr	r1, [pc, #20]	; (800d738 <__assert_func+0x38>)
 800d722:	9402      	str	r4, [sp, #8]
 800d724:	f000 f81c 	bl	800d760 <fiprintf>
 800d728:	f000 f8a5 	bl	800d876 <abort>
 800d72c:	200000a0 	.word	0x200000a0
 800d730:	0800e865 	.word	0x0800e865
 800d734:	0800e8a0 	.word	0x0800e8a0
 800d738:	0800e872 	.word	0x0800e872

0800d73c <_close_r>:
 800d73c:	2300      	movs	r3, #0
 800d73e:	b570      	push	{r4, r5, r6, lr}
 800d740:	4d06      	ldr	r5, [pc, #24]	; (800d75c <_close_r+0x20>)
 800d742:	0004      	movs	r4, r0
 800d744:	0008      	movs	r0, r1
 800d746:	602b      	str	r3, [r5, #0]
 800d748:	f7f8 fb95 	bl	8005e76 <_close>
 800d74c:	1c43      	adds	r3, r0, #1
 800d74e:	d103      	bne.n	800d758 <_close_r+0x1c>
 800d750:	682b      	ldr	r3, [r5, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d000      	beq.n	800d758 <_close_r+0x1c>
 800d756:	6023      	str	r3, [r4, #0]
 800d758:	bd70      	pop	{r4, r5, r6, pc}
 800d75a:	46c0      	nop			; (mov r8, r8)
 800d75c:	20000900 	.word	0x20000900

0800d760 <fiprintf>:
 800d760:	b40e      	push	{r1, r2, r3}
 800d762:	b503      	push	{r0, r1, lr}
 800d764:	0001      	movs	r1, r0
 800d766:	ab03      	add	r3, sp, #12
 800d768:	4804      	ldr	r0, [pc, #16]	; (800d77c <fiprintf+0x1c>)
 800d76a:	cb04      	ldmia	r3!, {r2}
 800d76c:	6800      	ldr	r0, [r0, #0]
 800d76e:	9301      	str	r3, [sp, #4]
 800d770:	f7ff fe1a 	bl	800d3a8 <_vfiprintf_r>
 800d774:	b002      	add	sp, #8
 800d776:	bc08      	pop	{r3}
 800d778:	b003      	add	sp, #12
 800d77a:	4718      	bx	r3
 800d77c:	200000a0 	.word	0x200000a0

0800d780 <_fstat_r>:
 800d780:	2300      	movs	r3, #0
 800d782:	b570      	push	{r4, r5, r6, lr}
 800d784:	4d06      	ldr	r5, [pc, #24]	; (800d7a0 <_fstat_r+0x20>)
 800d786:	0004      	movs	r4, r0
 800d788:	0008      	movs	r0, r1
 800d78a:	0011      	movs	r1, r2
 800d78c:	602b      	str	r3, [r5, #0]
 800d78e:	f7f8 fb7c 	bl	8005e8a <_fstat>
 800d792:	1c43      	adds	r3, r0, #1
 800d794:	d103      	bne.n	800d79e <_fstat_r+0x1e>
 800d796:	682b      	ldr	r3, [r5, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d000      	beq.n	800d79e <_fstat_r+0x1e>
 800d79c:	6023      	str	r3, [r4, #0]
 800d79e:	bd70      	pop	{r4, r5, r6, pc}
 800d7a0:	20000900 	.word	0x20000900

0800d7a4 <_isatty_r>:
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	b570      	push	{r4, r5, r6, lr}
 800d7a8:	4d06      	ldr	r5, [pc, #24]	; (800d7c4 <_isatty_r+0x20>)
 800d7aa:	0004      	movs	r4, r0
 800d7ac:	0008      	movs	r0, r1
 800d7ae:	602b      	str	r3, [r5, #0]
 800d7b0:	f7f8 fb79 	bl	8005ea6 <_isatty>
 800d7b4:	1c43      	adds	r3, r0, #1
 800d7b6:	d103      	bne.n	800d7c0 <_isatty_r+0x1c>
 800d7b8:	682b      	ldr	r3, [r5, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d000      	beq.n	800d7c0 <_isatty_r+0x1c>
 800d7be:	6023      	str	r3, [r4, #0]
 800d7c0:	bd70      	pop	{r4, r5, r6, pc}
 800d7c2:	46c0      	nop			; (mov r8, r8)
 800d7c4:	20000900 	.word	0x20000900

0800d7c8 <_lseek_r>:
 800d7c8:	b570      	push	{r4, r5, r6, lr}
 800d7ca:	0004      	movs	r4, r0
 800d7cc:	0008      	movs	r0, r1
 800d7ce:	0011      	movs	r1, r2
 800d7d0:	001a      	movs	r2, r3
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4d05      	ldr	r5, [pc, #20]	; (800d7ec <_lseek_r+0x24>)
 800d7d6:	602b      	str	r3, [r5, #0]
 800d7d8:	f7f8 fb6e 	bl	8005eb8 <_lseek>
 800d7dc:	1c43      	adds	r3, r0, #1
 800d7de:	d103      	bne.n	800d7e8 <_lseek_r+0x20>
 800d7e0:	682b      	ldr	r3, [r5, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d000      	beq.n	800d7e8 <_lseek_r+0x20>
 800d7e6:	6023      	str	r3, [r4, #0]
 800d7e8:	bd70      	pop	{r4, r5, r6, pc}
 800d7ea:	46c0      	nop			; (mov r8, r8)
 800d7ec:	20000900 	.word	0x20000900

0800d7f0 <__ascii_mbtowc>:
 800d7f0:	b082      	sub	sp, #8
 800d7f2:	2900      	cmp	r1, #0
 800d7f4:	d100      	bne.n	800d7f8 <__ascii_mbtowc+0x8>
 800d7f6:	a901      	add	r1, sp, #4
 800d7f8:	1e10      	subs	r0, r2, #0
 800d7fa:	d006      	beq.n	800d80a <__ascii_mbtowc+0x1a>
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d006      	beq.n	800d80e <__ascii_mbtowc+0x1e>
 800d800:	7813      	ldrb	r3, [r2, #0]
 800d802:	600b      	str	r3, [r1, #0]
 800d804:	7810      	ldrb	r0, [r2, #0]
 800d806:	1e43      	subs	r3, r0, #1
 800d808:	4198      	sbcs	r0, r3
 800d80a:	b002      	add	sp, #8
 800d80c:	4770      	bx	lr
 800d80e:	2002      	movs	r0, #2
 800d810:	4240      	negs	r0, r0
 800d812:	e7fa      	b.n	800d80a <__ascii_mbtowc+0x1a>

0800d814 <__malloc_lock>:
 800d814:	b510      	push	{r4, lr}
 800d816:	4802      	ldr	r0, [pc, #8]	; (800d820 <__malloc_lock+0xc>)
 800d818:	f7ff f86f 	bl	800c8fa <__retarget_lock_acquire_recursive>
 800d81c:	bd10      	pop	{r4, pc}
 800d81e:	46c0      	nop			; (mov r8, r8)
 800d820:	200008f4 	.word	0x200008f4

0800d824 <__malloc_unlock>:
 800d824:	b510      	push	{r4, lr}
 800d826:	4802      	ldr	r0, [pc, #8]	; (800d830 <__malloc_unlock+0xc>)
 800d828:	f7ff f868 	bl	800c8fc <__retarget_lock_release_recursive>
 800d82c:	bd10      	pop	{r4, pc}
 800d82e:	46c0      	nop			; (mov r8, r8)
 800d830:	200008f4 	.word	0x200008f4

0800d834 <_read_r>:
 800d834:	b570      	push	{r4, r5, r6, lr}
 800d836:	0004      	movs	r4, r0
 800d838:	0008      	movs	r0, r1
 800d83a:	0011      	movs	r1, r2
 800d83c:	001a      	movs	r2, r3
 800d83e:	2300      	movs	r3, #0
 800d840:	4d05      	ldr	r5, [pc, #20]	; (800d858 <_read_r+0x24>)
 800d842:	602b      	str	r3, [r5, #0]
 800d844:	f7f8 fafa 	bl	8005e3c <_read>
 800d848:	1c43      	adds	r3, r0, #1
 800d84a:	d103      	bne.n	800d854 <_read_r+0x20>
 800d84c:	682b      	ldr	r3, [r5, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d000      	beq.n	800d854 <_read_r+0x20>
 800d852:	6023      	str	r3, [r4, #0]
 800d854:	bd70      	pop	{r4, r5, r6, pc}
 800d856:	46c0      	nop			; (mov r8, r8)
 800d858:	20000900 	.word	0x20000900

0800d85c <__ascii_wctomb>:
 800d85c:	0003      	movs	r3, r0
 800d85e:	1e08      	subs	r0, r1, #0
 800d860:	d005      	beq.n	800d86e <__ascii_wctomb+0x12>
 800d862:	2aff      	cmp	r2, #255	; 0xff
 800d864:	d904      	bls.n	800d870 <__ascii_wctomb+0x14>
 800d866:	228a      	movs	r2, #138	; 0x8a
 800d868:	2001      	movs	r0, #1
 800d86a:	601a      	str	r2, [r3, #0]
 800d86c:	4240      	negs	r0, r0
 800d86e:	4770      	bx	lr
 800d870:	2001      	movs	r0, #1
 800d872:	700a      	strb	r2, [r1, #0]
 800d874:	e7fb      	b.n	800d86e <__ascii_wctomb+0x12>

0800d876 <abort>:
 800d876:	2006      	movs	r0, #6
 800d878:	b510      	push	{r4, lr}
 800d87a:	f000 f82d 	bl	800d8d8 <raise>
 800d87e:	2001      	movs	r0, #1
 800d880:	f7f8 fad0 	bl	8005e24 <_exit>

0800d884 <_raise_r>:
 800d884:	b570      	push	{r4, r5, r6, lr}
 800d886:	0004      	movs	r4, r0
 800d888:	000d      	movs	r5, r1
 800d88a:	291f      	cmp	r1, #31
 800d88c:	d904      	bls.n	800d898 <_raise_r+0x14>
 800d88e:	2316      	movs	r3, #22
 800d890:	6003      	str	r3, [r0, #0]
 800d892:	2001      	movs	r0, #1
 800d894:	4240      	negs	r0, r0
 800d896:	bd70      	pop	{r4, r5, r6, pc}
 800d898:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d004      	beq.n	800d8a8 <_raise_r+0x24>
 800d89e:	008a      	lsls	r2, r1, #2
 800d8a0:	189b      	adds	r3, r3, r2
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	2a00      	cmp	r2, #0
 800d8a6:	d108      	bne.n	800d8ba <_raise_r+0x36>
 800d8a8:	0020      	movs	r0, r4
 800d8aa:	f000 f831 	bl	800d910 <_getpid_r>
 800d8ae:	002a      	movs	r2, r5
 800d8b0:	0001      	movs	r1, r0
 800d8b2:	0020      	movs	r0, r4
 800d8b4:	f000 f81a 	bl	800d8ec <_kill_r>
 800d8b8:	e7ed      	b.n	800d896 <_raise_r+0x12>
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	2a01      	cmp	r2, #1
 800d8be:	d0ea      	beq.n	800d896 <_raise_r+0x12>
 800d8c0:	1c51      	adds	r1, r2, #1
 800d8c2:	d103      	bne.n	800d8cc <_raise_r+0x48>
 800d8c4:	2316      	movs	r3, #22
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	6023      	str	r3, [r4, #0]
 800d8ca:	e7e4      	b.n	800d896 <_raise_r+0x12>
 800d8cc:	2400      	movs	r4, #0
 800d8ce:	0028      	movs	r0, r5
 800d8d0:	601c      	str	r4, [r3, #0]
 800d8d2:	4790      	blx	r2
 800d8d4:	0020      	movs	r0, r4
 800d8d6:	e7de      	b.n	800d896 <_raise_r+0x12>

0800d8d8 <raise>:
 800d8d8:	b510      	push	{r4, lr}
 800d8da:	4b03      	ldr	r3, [pc, #12]	; (800d8e8 <raise+0x10>)
 800d8dc:	0001      	movs	r1, r0
 800d8de:	6818      	ldr	r0, [r3, #0]
 800d8e0:	f7ff ffd0 	bl	800d884 <_raise_r>
 800d8e4:	bd10      	pop	{r4, pc}
 800d8e6:	46c0      	nop			; (mov r8, r8)
 800d8e8:	200000a0 	.word	0x200000a0

0800d8ec <_kill_r>:
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	b570      	push	{r4, r5, r6, lr}
 800d8f0:	4d06      	ldr	r5, [pc, #24]	; (800d90c <_kill_r+0x20>)
 800d8f2:	0004      	movs	r4, r0
 800d8f4:	0008      	movs	r0, r1
 800d8f6:	0011      	movs	r1, r2
 800d8f8:	602b      	str	r3, [r5, #0]
 800d8fa:	f7f8 fa83 	bl	8005e04 <_kill>
 800d8fe:	1c43      	adds	r3, r0, #1
 800d900:	d103      	bne.n	800d90a <_kill_r+0x1e>
 800d902:	682b      	ldr	r3, [r5, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d000      	beq.n	800d90a <_kill_r+0x1e>
 800d908:	6023      	str	r3, [r4, #0]
 800d90a:	bd70      	pop	{r4, r5, r6, pc}
 800d90c:	20000900 	.word	0x20000900

0800d910 <_getpid_r>:
 800d910:	b510      	push	{r4, lr}
 800d912:	f7f8 fa71 	bl	8005df8 <_getpid>
 800d916:	bd10      	pop	{r4, pc}

0800d918 <asinf>:
 800d918:	b570      	push	{r4, r5, r6, lr}
 800d91a:	1c05      	adds	r5, r0, #0
 800d91c:	f000 f820 	bl	800d960 <__ieee754_asinf>
 800d920:	1c29      	adds	r1, r5, #0
 800d922:	1c04      	adds	r4, r0, #0
 800d924:	1c28      	adds	r0, r5, #0
 800d926:	f7f3 fd45 	bl	80013b4 <__aeabi_fcmpun>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d110      	bne.n	800d950 <asinf+0x38>
 800d92e:	1c28      	adds	r0, r5, #0
 800d930:	f000 fb42 	bl	800dfb8 <fabsf>
 800d934:	21fe      	movs	r1, #254	; 0xfe
 800d936:	0589      	lsls	r1, r1, #22
 800d938:	f7f2 fde4 	bl	8000504 <__aeabi_fcmpgt>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	d007      	beq.n	800d950 <asinf+0x38>
 800d940:	f7fd f8ba 	bl	800aab8 <__errno>
 800d944:	2321      	movs	r3, #33	; 0x21
 800d946:	6003      	str	r3, [r0, #0]
 800d948:	4802      	ldr	r0, [pc, #8]	; (800d954 <asinf+0x3c>)
 800d94a:	f000 fb39 	bl	800dfc0 <nanf>
 800d94e:	1c04      	adds	r4, r0, #0
 800d950:	1c20      	adds	r0, r4, #0
 800d952:	bd70      	pop	{r4, r5, r6, pc}
 800d954:	0800e8a0 	.word	0x0800e8a0

0800d958 <atan2f>:
 800d958:	b510      	push	{r4, lr}
 800d95a:	f000 f949 	bl	800dbf0 <__ieee754_atan2f>
 800d95e:	bd10      	pop	{r4, pc}

0800d960 <__ieee754_asinf>:
 800d960:	23fe      	movs	r3, #254	; 0xfe
 800d962:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d964:	0046      	lsls	r6, r0, #1
 800d966:	b085      	sub	sp, #20
 800d968:	1c04      	adds	r4, r0, #0
 800d96a:	9002      	str	r0, [sp, #8]
 800d96c:	0876      	lsrs	r6, r6, #1
 800d96e:	059b      	lsls	r3, r3, #22
 800d970:	429e      	cmp	r6, r3
 800d972:	d10c      	bne.n	800d98e <__ieee754_asinf+0x2e>
 800d974:	498e      	ldr	r1, [pc, #568]	; (800dbb0 <__ieee754_asinf+0x250>)
 800d976:	f7f3 fa49 	bl	8000e0c <__aeabi_fmul>
 800d97a:	498e      	ldr	r1, [pc, #568]	; (800dbb4 <__ieee754_asinf+0x254>)
 800d97c:	1c05      	adds	r5, r0, #0
 800d97e:	1c20      	adds	r0, r4, #0
 800d980:	f7f3 fa44 	bl	8000e0c <__aeabi_fmul>
 800d984:	1c01      	adds	r1, r0, #0
 800d986:	1c28      	adds	r0, r5, #0
 800d988:	f7f2 feda 	bl	8000740 <__aeabi_fadd>
 800d98c:	e007      	b.n	800d99e <__ieee754_asinf+0x3e>
 800d98e:	429e      	cmp	r6, r3
 800d990:	dd09      	ble.n	800d9a6 <__ieee754_asinf+0x46>
 800d992:	1c01      	adds	r1, r0, #0
 800d994:	f7f3 fb60 	bl	8001058 <__aeabi_fsub>
 800d998:	1c01      	adds	r1, r0, #0
 800d99a:	f7f3 f86f 	bl	8000a7c <__aeabi_fdiv>
 800d99e:	1c04      	adds	r4, r0, #0
 800d9a0:	1c20      	adds	r0, r4, #0
 800d9a2:	b005      	add	sp, #20
 800d9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9a6:	23fc      	movs	r3, #252	; 0xfc
 800d9a8:	059b      	lsls	r3, r3, #22
 800d9aa:	429e      	cmp	r6, r3
 800d9ac:	da0c      	bge.n	800d9c8 <__ieee754_asinf+0x68>
 800d9ae:	23c8      	movs	r3, #200	; 0xc8
 800d9b0:	059b      	lsls	r3, r3, #22
 800d9b2:	429e      	cmp	r6, r3
 800d9b4:	da76      	bge.n	800daa4 <__ieee754_asinf+0x144>
 800d9b6:	4980      	ldr	r1, [pc, #512]	; (800dbb8 <__ieee754_asinf+0x258>)
 800d9b8:	f7f2 fec2 	bl	8000740 <__aeabi_fadd>
 800d9bc:	21fe      	movs	r1, #254	; 0xfe
 800d9be:	0589      	lsls	r1, r1, #22
 800d9c0:	f7f2 fda0 	bl	8000504 <__aeabi_fcmpgt>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d1eb      	bne.n	800d9a0 <__ieee754_asinf+0x40>
 800d9c8:	1c20      	adds	r0, r4, #0
 800d9ca:	f000 faf5 	bl	800dfb8 <fabsf>
 800d9ce:	1c01      	adds	r1, r0, #0
 800d9d0:	20fe      	movs	r0, #254	; 0xfe
 800d9d2:	0580      	lsls	r0, r0, #22
 800d9d4:	f7f3 fb40 	bl	8001058 <__aeabi_fsub>
 800d9d8:	21fc      	movs	r1, #252	; 0xfc
 800d9da:	0589      	lsls	r1, r1, #22
 800d9dc:	f7f3 fa16 	bl	8000e0c <__aeabi_fmul>
 800d9e0:	4976      	ldr	r1, [pc, #472]	; (800dbbc <__ieee754_asinf+0x25c>)
 800d9e2:	1c04      	adds	r4, r0, #0
 800d9e4:	f7f3 fa12 	bl	8000e0c <__aeabi_fmul>
 800d9e8:	4975      	ldr	r1, [pc, #468]	; (800dbc0 <__ieee754_asinf+0x260>)
 800d9ea:	f7f2 fea9 	bl	8000740 <__aeabi_fadd>
 800d9ee:	1c21      	adds	r1, r4, #0
 800d9f0:	f7f3 fa0c 	bl	8000e0c <__aeabi_fmul>
 800d9f4:	4973      	ldr	r1, [pc, #460]	; (800dbc4 <__ieee754_asinf+0x264>)
 800d9f6:	f7f3 fb2f 	bl	8001058 <__aeabi_fsub>
 800d9fa:	1c21      	adds	r1, r4, #0
 800d9fc:	f7f3 fa06 	bl	8000e0c <__aeabi_fmul>
 800da00:	4971      	ldr	r1, [pc, #452]	; (800dbc8 <__ieee754_asinf+0x268>)
 800da02:	f7f2 fe9d 	bl	8000740 <__aeabi_fadd>
 800da06:	1c21      	adds	r1, r4, #0
 800da08:	f7f3 fa00 	bl	8000e0c <__aeabi_fmul>
 800da0c:	496f      	ldr	r1, [pc, #444]	; (800dbcc <__ieee754_asinf+0x26c>)
 800da0e:	f7f3 fb23 	bl	8001058 <__aeabi_fsub>
 800da12:	1c21      	adds	r1, r4, #0
 800da14:	f7f3 f9fa 	bl	8000e0c <__aeabi_fmul>
 800da18:	496d      	ldr	r1, [pc, #436]	; (800dbd0 <__ieee754_asinf+0x270>)
 800da1a:	f7f2 fe91 	bl	8000740 <__aeabi_fadd>
 800da1e:	1c21      	adds	r1, r4, #0
 800da20:	f7f3 f9f4 	bl	8000e0c <__aeabi_fmul>
 800da24:	496b      	ldr	r1, [pc, #428]	; (800dbd4 <__ieee754_asinf+0x274>)
 800da26:	9001      	str	r0, [sp, #4]
 800da28:	1c20      	adds	r0, r4, #0
 800da2a:	f7f3 f9ef 	bl	8000e0c <__aeabi_fmul>
 800da2e:	496a      	ldr	r1, [pc, #424]	; (800dbd8 <__ieee754_asinf+0x278>)
 800da30:	f7f3 fb12 	bl	8001058 <__aeabi_fsub>
 800da34:	1c21      	adds	r1, r4, #0
 800da36:	f7f3 f9e9 	bl	8000e0c <__aeabi_fmul>
 800da3a:	4968      	ldr	r1, [pc, #416]	; (800dbdc <__ieee754_asinf+0x27c>)
 800da3c:	f7f2 fe80 	bl	8000740 <__aeabi_fadd>
 800da40:	1c21      	adds	r1, r4, #0
 800da42:	f7f3 f9e3 	bl	8000e0c <__aeabi_fmul>
 800da46:	4966      	ldr	r1, [pc, #408]	; (800dbe0 <__ieee754_asinf+0x280>)
 800da48:	f7f3 fb06 	bl	8001058 <__aeabi_fsub>
 800da4c:	1c21      	adds	r1, r4, #0
 800da4e:	f7f3 f9dd 	bl	8000e0c <__aeabi_fmul>
 800da52:	21fe      	movs	r1, #254	; 0xfe
 800da54:	0589      	lsls	r1, r1, #22
 800da56:	f7f2 fe73 	bl	8000740 <__aeabi_fadd>
 800da5a:	1c07      	adds	r7, r0, #0
 800da5c:	1c20      	adds	r0, r4, #0
 800da5e:	f000 f943 	bl	800dce8 <__ieee754_sqrtf>
 800da62:	4b60      	ldr	r3, [pc, #384]	; (800dbe4 <__ieee754_asinf+0x284>)
 800da64:	1c05      	adds	r5, r0, #0
 800da66:	429e      	cmp	r6, r3
 800da68:	dd66      	ble.n	800db38 <__ieee754_asinf+0x1d8>
 800da6a:	1c39      	adds	r1, r7, #0
 800da6c:	9801      	ldr	r0, [sp, #4]
 800da6e:	f7f3 f805 	bl	8000a7c <__aeabi_fdiv>
 800da72:	1c29      	adds	r1, r5, #0
 800da74:	f7f3 f9ca 	bl	8000e0c <__aeabi_fmul>
 800da78:	1c29      	adds	r1, r5, #0
 800da7a:	f7f2 fe61 	bl	8000740 <__aeabi_fadd>
 800da7e:	1c01      	adds	r1, r0, #0
 800da80:	f7f2 fe5e 	bl	8000740 <__aeabi_fadd>
 800da84:	4958      	ldr	r1, [pc, #352]	; (800dbe8 <__ieee754_asinf+0x288>)
 800da86:	f7f2 fe5b 	bl	8000740 <__aeabi_fadd>
 800da8a:	1c01      	adds	r1, r0, #0
 800da8c:	4848      	ldr	r0, [pc, #288]	; (800dbb0 <__ieee754_asinf+0x250>)
 800da8e:	f7f3 fae3 	bl	8001058 <__aeabi_fsub>
 800da92:	9b02      	ldr	r3, [sp, #8]
 800da94:	1c04      	adds	r4, r0, #0
 800da96:	2b00      	cmp	r3, #0
 800da98:	dd00      	ble.n	800da9c <__ieee754_asinf+0x13c>
 800da9a:	e781      	b.n	800d9a0 <__ieee754_asinf+0x40>
 800da9c:	2380      	movs	r3, #128	; 0x80
 800da9e:	061b      	lsls	r3, r3, #24
 800daa0:	18c4      	adds	r4, r0, r3
 800daa2:	e77d      	b.n	800d9a0 <__ieee754_asinf+0x40>
 800daa4:	1c01      	adds	r1, r0, #0
 800daa6:	f7f3 f9b1 	bl	8000e0c <__aeabi_fmul>
 800daaa:	4944      	ldr	r1, [pc, #272]	; (800dbbc <__ieee754_asinf+0x25c>)
 800daac:	1c05      	adds	r5, r0, #0
 800daae:	f7f3 f9ad 	bl	8000e0c <__aeabi_fmul>
 800dab2:	4943      	ldr	r1, [pc, #268]	; (800dbc0 <__ieee754_asinf+0x260>)
 800dab4:	f7f2 fe44 	bl	8000740 <__aeabi_fadd>
 800dab8:	1c29      	adds	r1, r5, #0
 800daba:	f7f3 f9a7 	bl	8000e0c <__aeabi_fmul>
 800dabe:	4941      	ldr	r1, [pc, #260]	; (800dbc4 <__ieee754_asinf+0x264>)
 800dac0:	f7f3 faca 	bl	8001058 <__aeabi_fsub>
 800dac4:	1c29      	adds	r1, r5, #0
 800dac6:	f7f3 f9a1 	bl	8000e0c <__aeabi_fmul>
 800daca:	493f      	ldr	r1, [pc, #252]	; (800dbc8 <__ieee754_asinf+0x268>)
 800dacc:	f7f2 fe38 	bl	8000740 <__aeabi_fadd>
 800dad0:	1c29      	adds	r1, r5, #0
 800dad2:	f7f3 f99b 	bl	8000e0c <__aeabi_fmul>
 800dad6:	493d      	ldr	r1, [pc, #244]	; (800dbcc <__ieee754_asinf+0x26c>)
 800dad8:	f7f3 fabe 	bl	8001058 <__aeabi_fsub>
 800dadc:	1c29      	adds	r1, r5, #0
 800dade:	f7f3 f995 	bl	8000e0c <__aeabi_fmul>
 800dae2:	493b      	ldr	r1, [pc, #236]	; (800dbd0 <__ieee754_asinf+0x270>)
 800dae4:	f7f2 fe2c 	bl	8000740 <__aeabi_fadd>
 800dae8:	1c29      	adds	r1, r5, #0
 800daea:	f7f3 f98f 	bl	8000e0c <__aeabi_fmul>
 800daee:	4939      	ldr	r1, [pc, #228]	; (800dbd4 <__ieee754_asinf+0x274>)
 800daf0:	1c06      	adds	r6, r0, #0
 800daf2:	1c28      	adds	r0, r5, #0
 800daf4:	f7f3 f98a 	bl	8000e0c <__aeabi_fmul>
 800daf8:	4937      	ldr	r1, [pc, #220]	; (800dbd8 <__ieee754_asinf+0x278>)
 800dafa:	f7f3 faad 	bl	8001058 <__aeabi_fsub>
 800dafe:	1c29      	adds	r1, r5, #0
 800db00:	f7f3 f984 	bl	8000e0c <__aeabi_fmul>
 800db04:	4935      	ldr	r1, [pc, #212]	; (800dbdc <__ieee754_asinf+0x27c>)
 800db06:	f7f2 fe1b 	bl	8000740 <__aeabi_fadd>
 800db0a:	1c29      	adds	r1, r5, #0
 800db0c:	f7f3 f97e 	bl	8000e0c <__aeabi_fmul>
 800db10:	4933      	ldr	r1, [pc, #204]	; (800dbe0 <__ieee754_asinf+0x280>)
 800db12:	f7f3 faa1 	bl	8001058 <__aeabi_fsub>
 800db16:	1c29      	adds	r1, r5, #0
 800db18:	f7f3 f978 	bl	8000e0c <__aeabi_fmul>
 800db1c:	21fe      	movs	r1, #254	; 0xfe
 800db1e:	0589      	lsls	r1, r1, #22
 800db20:	f7f2 fe0e 	bl	8000740 <__aeabi_fadd>
 800db24:	1c01      	adds	r1, r0, #0
 800db26:	1c30      	adds	r0, r6, #0
 800db28:	f7f2 ffa8 	bl	8000a7c <__aeabi_fdiv>
 800db2c:	1c21      	adds	r1, r4, #0
 800db2e:	f7f3 f96d 	bl	8000e0c <__aeabi_fmul>
 800db32:	1c01      	adds	r1, r0, #0
 800db34:	1c20      	adds	r0, r4, #0
 800db36:	e727      	b.n	800d988 <__ieee754_asinf+0x28>
 800db38:	1c01      	adds	r1, r0, #0
 800db3a:	0b06      	lsrs	r6, r0, #12
 800db3c:	f7f2 fe00 	bl	8000740 <__aeabi_fadd>
 800db40:	1c39      	adds	r1, r7, #0
 800db42:	9003      	str	r0, [sp, #12]
 800db44:	9801      	ldr	r0, [sp, #4]
 800db46:	f7f2 ff99 	bl	8000a7c <__aeabi_fdiv>
 800db4a:	1c01      	adds	r1, r0, #0
 800db4c:	9803      	ldr	r0, [sp, #12]
 800db4e:	f7f3 f95d 	bl	8000e0c <__aeabi_fmul>
 800db52:	0336      	lsls	r6, r6, #12
 800db54:	1c07      	adds	r7, r0, #0
 800db56:	1c31      	adds	r1, r6, #0
 800db58:	1c30      	adds	r0, r6, #0
 800db5a:	f7f3 f957 	bl	8000e0c <__aeabi_fmul>
 800db5e:	1c01      	adds	r1, r0, #0
 800db60:	1c20      	adds	r0, r4, #0
 800db62:	f7f3 fa79 	bl	8001058 <__aeabi_fsub>
 800db66:	1c31      	adds	r1, r6, #0
 800db68:	1c04      	adds	r4, r0, #0
 800db6a:	1c28      	adds	r0, r5, #0
 800db6c:	f7f2 fde8 	bl	8000740 <__aeabi_fadd>
 800db70:	1c01      	adds	r1, r0, #0
 800db72:	1c20      	adds	r0, r4, #0
 800db74:	f7f2 ff82 	bl	8000a7c <__aeabi_fdiv>
 800db78:	1c01      	adds	r1, r0, #0
 800db7a:	f7f2 fde1 	bl	8000740 <__aeabi_fadd>
 800db7e:	1c01      	adds	r1, r0, #0
 800db80:	480c      	ldr	r0, [pc, #48]	; (800dbb4 <__ieee754_asinf+0x254>)
 800db82:	f7f3 fa69 	bl	8001058 <__aeabi_fsub>
 800db86:	1c01      	adds	r1, r0, #0
 800db88:	1c38      	adds	r0, r7, #0
 800db8a:	f7f3 fa65 	bl	8001058 <__aeabi_fsub>
 800db8e:	1c31      	adds	r1, r6, #0
 800db90:	1c04      	adds	r4, r0, #0
 800db92:	1c30      	adds	r0, r6, #0
 800db94:	f7f2 fdd4 	bl	8000740 <__aeabi_fadd>
 800db98:	1c01      	adds	r1, r0, #0
 800db9a:	4814      	ldr	r0, [pc, #80]	; (800dbec <__ieee754_asinf+0x28c>)
 800db9c:	f7f3 fa5c 	bl	8001058 <__aeabi_fsub>
 800dba0:	1c01      	adds	r1, r0, #0
 800dba2:	1c20      	adds	r0, r4, #0
 800dba4:	f7f3 fa58 	bl	8001058 <__aeabi_fsub>
 800dba8:	1c01      	adds	r1, r0, #0
 800dbaa:	4810      	ldr	r0, [pc, #64]	; (800dbec <__ieee754_asinf+0x28c>)
 800dbac:	e76f      	b.n	800da8e <__ieee754_asinf+0x12e>
 800dbae:	46c0      	nop			; (mov r8, r8)
 800dbb0:	3fc90fdb 	.word	0x3fc90fdb
 800dbb4:	b33bbd2e 	.word	0xb33bbd2e
 800dbb8:	7149f2ca 	.word	0x7149f2ca
 800dbbc:	3811ef08 	.word	0x3811ef08
 800dbc0:	3a4f7f04 	.word	0x3a4f7f04
 800dbc4:	3d241146 	.word	0x3d241146
 800dbc8:	3e4e0aa8 	.word	0x3e4e0aa8
 800dbcc:	3ea6b090 	.word	0x3ea6b090
 800dbd0:	3e2aaaab 	.word	0x3e2aaaab
 800dbd4:	3d9dc62e 	.word	0x3d9dc62e
 800dbd8:	3f303361 	.word	0x3f303361
 800dbdc:	4001572d 	.word	0x4001572d
 800dbe0:	4019d139 	.word	0x4019d139
 800dbe4:	3f799999 	.word	0x3f799999
 800dbe8:	333bbd2e 	.word	0x333bbd2e
 800dbec:	3f490fdb 	.word	0x3f490fdb

0800dbf0 <__ieee754_atan2f>:
 800dbf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbf2:	25ff      	movs	r5, #255	; 0xff
 800dbf4:	004a      	lsls	r2, r1, #1
 800dbf6:	9101      	str	r1, [sp, #4]
 800dbf8:	0852      	lsrs	r2, r2, #1
 800dbfa:	05ed      	lsls	r5, r5, #23
 800dbfc:	42aa      	cmp	r2, r5
 800dbfe:	dc04      	bgt.n	800dc0a <__ieee754_atan2f+0x1a>
 800dc00:	0043      	lsls	r3, r0, #1
 800dc02:	0007      	movs	r7, r0
 800dc04:	085b      	lsrs	r3, r3, #1
 800dc06:	42ab      	cmp	r3, r5
 800dc08:	dd02      	ble.n	800dc10 <__ieee754_atan2f+0x20>
 800dc0a:	f7f2 fd99 	bl	8000740 <__aeabi_fadd>
 800dc0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc10:	24fe      	movs	r4, #254	; 0xfe
 800dc12:	05a4      	lsls	r4, r4, #22
 800dc14:	42a1      	cmp	r1, r4
 800dc16:	d102      	bne.n	800dc1e <__ieee754_atan2f+0x2e>
 800dc18:	f000 f8be 	bl	800dd98 <atanf>
 800dc1c:	e7f7      	b.n	800dc0e <__ieee754_atan2f+0x1e>
 800dc1e:	2602      	movs	r6, #2
 800dc20:	178c      	asrs	r4, r1, #30
 800dc22:	4034      	ands	r4, r6
 800dc24:	0fc6      	lsrs	r6, r0, #31
 800dc26:	4334      	orrs	r4, r6
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d105      	bne.n	800dc38 <__ieee754_atan2f+0x48>
 800dc2c:	2c02      	cmp	r4, #2
 800dc2e:	d045      	beq.n	800dcbc <__ieee754_atan2f+0xcc>
 800dc30:	2c03      	cmp	r4, #3
 800dc32:	d1ec      	bne.n	800dc0e <__ieee754_atan2f+0x1e>
 800dc34:	4824      	ldr	r0, [pc, #144]	; (800dcc8 <__ieee754_atan2f+0xd8>)
 800dc36:	e7ea      	b.n	800dc0e <__ieee754_atan2f+0x1e>
 800dc38:	2a00      	cmp	r2, #0
 800dc3a:	d103      	bne.n	800dc44 <__ieee754_atan2f+0x54>
 800dc3c:	2f00      	cmp	r7, #0
 800dc3e:	da41      	bge.n	800dcc4 <__ieee754_atan2f+0xd4>
 800dc40:	4822      	ldr	r0, [pc, #136]	; (800dccc <__ieee754_atan2f+0xdc>)
 800dc42:	e7e4      	b.n	800dc0e <__ieee754_atan2f+0x1e>
 800dc44:	42aa      	cmp	r2, r5
 800dc46:	d10e      	bne.n	800dc66 <__ieee754_atan2f+0x76>
 800dc48:	3c01      	subs	r4, #1
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d105      	bne.n	800dc5a <__ieee754_atan2f+0x6a>
 800dc4e:	2c02      	cmp	r4, #2
 800dc50:	d836      	bhi.n	800dcc0 <__ieee754_atan2f+0xd0>
 800dc52:	4b1f      	ldr	r3, [pc, #124]	; (800dcd0 <__ieee754_atan2f+0xe0>)
 800dc54:	00a4      	lsls	r4, r4, #2
 800dc56:	58e0      	ldr	r0, [r4, r3]
 800dc58:	e7d9      	b.n	800dc0e <__ieee754_atan2f+0x1e>
 800dc5a:	2000      	movs	r0, #0
 800dc5c:	2c02      	cmp	r4, #2
 800dc5e:	d8d6      	bhi.n	800dc0e <__ieee754_atan2f+0x1e>
 800dc60:	4b1c      	ldr	r3, [pc, #112]	; (800dcd4 <__ieee754_atan2f+0xe4>)
 800dc62:	00a4      	lsls	r4, r4, #2
 800dc64:	e7f7      	b.n	800dc56 <__ieee754_atan2f+0x66>
 800dc66:	42ab      	cmp	r3, r5
 800dc68:	d0e8      	beq.n	800dc3c <__ieee754_atan2f+0x4c>
 800dc6a:	1a9b      	subs	r3, r3, r2
 800dc6c:	15db      	asrs	r3, r3, #23
 800dc6e:	2b3c      	cmp	r3, #60	; 0x3c
 800dc70:	dc14      	bgt.n	800dc9c <__ieee754_atan2f+0xac>
 800dc72:	2900      	cmp	r1, #0
 800dc74:	da01      	bge.n	800dc7a <__ieee754_atan2f+0x8a>
 800dc76:	333c      	adds	r3, #60	; 0x3c
 800dc78:	db12      	blt.n	800dca0 <__ieee754_atan2f+0xb0>
 800dc7a:	f7f2 feff 	bl	8000a7c <__aeabi_fdiv>
 800dc7e:	f000 f99b 	bl	800dfb8 <fabsf>
 800dc82:	f000 f889 	bl	800dd98 <atanf>
 800dc86:	2c01      	cmp	r4, #1
 800dc88:	d00c      	beq.n	800dca4 <__ieee754_atan2f+0xb4>
 800dc8a:	2c02      	cmp	r4, #2
 800dc8c:	d00e      	beq.n	800dcac <__ieee754_atan2f+0xbc>
 800dc8e:	2c00      	cmp	r4, #0
 800dc90:	d0bd      	beq.n	800dc0e <__ieee754_atan2f+0x1e>
 800dc92:	4911      	ldr	r1, [pc, #68]	; (800dcd8 <__ieee754_atan2f+0xe8>)
 800dc94:	f7f2 fd54 	bl	8000740 <__aeabi_fadd>
 800dc98:	4910      	ldr	r1, [pc, #64]	; (800dcdc <__ieee754_atan2f+0xec>)
 800dc9a:	e00c      	b.n	800dcb6 <__ieee754_atan2f+0xc6>
 800dc9c:	4810      	ldr	r0, [pc, #64]	; (800dce0 <__ieee754_atan2f+0xf0>)
 800dc9e:	e7f2      	b.n	800dc86 <__ieee754_atan2f+0x96>
 800dca0:	2000      	movs	r0, #0
 800dca2:	e7f0      	b.n	800dc86 <__ieee754_atan2f+0x96>
 800dca4:	2380      	movs	r3, #128	; 0x80
 800dca6:	061b      	lsls	r3, r3, #24
 800dca8:	18c0      	adds	r0, r0, r3
 800dcaa:	e7b0      	b.n	800dc0e <__ieee754_atan2f+0x1e>
 800dcac:	490a      	ldr	r1, [pc, #40]	; (800dcd8 <__ieee754_atan2f+0xe8>)
 800dcae:	f7f2 fd47 	bl	8000740 <__aeabi_fadd>
 800dcb2:	1c01      	adds	r1, r0, #0
 800dcb4:	4809      	ldr	r0, [pc, #36]	; (800dcdc <__ieee754_atan2f+0xec>)
 800dcb6:	f7f3 f9cf 	bl	8001058 <__aeabi_fsub>
 800dcba:	e7a8      	b.n	800dc0e <__ieee754_atan2f+0x1e>
 800dcbc:	4807      	ldr	r0, [pc, #28]	; (800dcdc <__ieee754_atan2f+0xec>)
 800dcbe:	e7a6      	b.n	800dc0e <__ieee754_atan2f+0x1e>
 800dcc0:	4808      	ldr	r0, [pc, #32]	; (800dce4 <__ieee754_atan2f+0xf4>)
 800dcc2:	e7a4      	b.n	800dc0e <__ieee754_atan2f+0x1e>
 800dcc4:	4806      	ldr	r0, [pc, #24]	; (800dce0 <__ieee754_atan2f+0xf0>)
 800dcc6:	e7a2      	b.n	800dc0e <__ieee754_atan2f+0x1e>
 800dcc8:	c0490fdb 	.word	0xc0490fdb
 800dccc:	bfc90fdb 	.word	0xbfc90fdb
 800dcd0:	0800e8ac 	.word	0x0800e8ac
 800dcd4:	0800e8b8 	.word	0x0800e8b8
 800dcd8:	33bbbd2e 	.word	0x33bbbd2e
 800dcdc:	40490fdb 	.word	0x40490fdb
 800dce0:	3fc90fdb 	.word	0x3fc90fdb
 800dce4:	3f490fdb 	.word	0x3f490fdb

0800dce8 <__ieee754_sqrtf>:
 800dce8:	0042      	lsls	r2, r0, #1
 800dcea:	0003      	movs	r3, r0
 800dcec:	b570      	push	{r4, r5, r6, lr}
 800dcee:	1c04      	adds	r4, r0, #0
 800dcf0:	20ff      	movs	r0, #255	; 0xff
 800dcf2:	0852      	lsrs	r2, r2, #1
 800dcf4:	05c0      	lsls	r0, r0, #23
 800dcf6:	4282      	cmp	r2, r0
 800dcf8:	d30a      	bcc.n	800dd10 <__ieee754_sqrtf+0x28>
 800dcfa:	1c21      	adds	r1, r4, #0
 800dcfc:	1c20      	adds	r0, r4, #0
 800dcfe:	f7f3 f885 	bl	8000e0c <__aeabi_fmul>
 800dd02:	1c01      	adds	r1, r0, #0
 800dd04:	1c20      	adds	r0, r4, #0
 800dd06:	f7f2 fd1b 	bl	8000740 <__aeabi_fadd>
 800dd0a:	1c04      	adds	r4, r0, #0
 800dd0c:	1c20      	adds	r0, r4, #0
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}
 800dd10:	2a00      	cmp	r2, #0
 800dd12:	d0fb      	beq.n	800dd0c <__ieee754_sqrtf+0x24>
 800dd14:	2c00      	cmp	r4, #0
 800dd16:	da07      	bge.n	800dd28 <__ieee754_sqrtf+0x40>
 800dd18:	1c21      	adds	r1, r4, #0
 800dd1a:	1c20      	adds	r0, r4, #0
 800dd1c:	f7f3 f99c 	bl	8001058 <__aeabi_fsub>
 800dd20:	1c01      	adds	r1, r0, #0
 800dd22:	f7f2 feab 	bl	8000a7c <__aeabi_fdiv>
 800dd26:	e7f0      	b.n	800dd0a <__ieee754_sqrtf+0x22>
 800dd28:	0022      	movs	r2, r4
 800dd2a:	15e1      	asrs	r1, r4, #23
 800dd2c:	4002      	ands	r2, r0
 800dd2e:	4204      	tst	r4, r0
 800dd30:	d02e      	beq.n	800dd90 <__ieee754_sqrtf+0xa8>
 800dd32:	2280      	movs	r2, #128	; 0x80
 800dd34:	000c      	movs	r4, r1
 800dd36:	025b      	lsls	r3, r3, #9
 800dd38:	0a5b      	lsrs	r3, r3, #9
 800dd3a:	0412      	lsls	r2, r2, #16
 800dd3c:	3c7f      	subs	r4, #127	; 0x7f
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	07ca      	lsls	r2, r1, #31
 800dd42:	d400      	bmi.n	800dd46 <__ieee754_sqrtf+0x5e>
 800dd44:	005b      	lsls	r3, r3, #1
 800dd46:	2200      	movs	r2, #0
 800dd48:	2180      	movs	r1, #128	; 0x80
 800dd4a:	2019      	movs	r0, #25
 800dd4c:	0016      	movs	r6, r2
 800dd4e:	1064      	asrs	r4, r4, #1
 800dd50:	005b      	lsls	r3, r3, #1
 800dd52:	0449      	lsls	r1, r1, #17
 800dd54:	1875      	adds	r5, r6, r1
 800dd56:	429d      	cmp	r5, r3
 800dd58:	dc02      	bgt.n	800dd60 <__ieee754_sqrtf+0x78>
 800dd5a:	186e      	adds	r6, r5, r1
 800dd5c:	1b5b      	subs	r3, r3, r5
 800dd5e:	1852      	adds	r2, r2, r1
 800dd60:	3801      	subs	r0, #1
 800dd62:	005b      	lsls	r3, r3, #1
 800dd64:	0849      	lsrs	r1, r1, #1
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d1f4      	bne.n	800dd54 <__ieee754_sqrtf+0x6c>
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d002      	beq.n	800dd74 <__ieee754_sqrtf+0x8c>
 800dd6e:	2301      	movs	r3, #1
 800dd70:	3201      	adds	r2, #1
 800dd72:	439a      	bics	r2, r3
 800dd74:	23fc      	movs	r3, #252	; 0xfc
 800dd76:	1052      	asrs	r2, r2, #1
 800dd78:	059b      	lsls	r3, r3, #22
 800dd7a:	18d2      	adds	r2, r2, r3
 800dd7c:	05e4      	lsls	r4, r4, #23
 800dd7e:	18a4      	adds	r4, r4, r2
 800dd80:	e7c4      	b.n	800dd0c <__ieee754_sqrtf+0x24>
 800dd82:	005b      	lsls	r3, r3, #1
 800dd84:	3201      	adds	r2, #1
 800dd86:	4203      	tst	r3, r0
 800dd88:	d0fb      	beq.n	800dd82 <__ieee754_sqrtf+0x9a>
 800dd8a:	3a01      	subs	r2, #1
 800dd8c:	1a89      	subs	r1, r1, r2
 800dd8e:	e7d0      	b.n	800dd32 <__ieee754_sqrtf+0x4a>
 800dd90:	2080      	movs	r0, #128	; 0x80
 800dd92:	0400      	lsls	r0, r0, #16
 800dd94:	e7f7      	b.n	800dd86 <__ieee754_sqrtf+0x9e>
	...

0800dd98 <atanf>:
 800dd98:	23a1      	movs	r3, #161	; 0xa1
 800dd9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd9c:	0045      	lsls	r5, r0, #1
 800dd9e:	1c04      	adds	r4, r0, #0
 800dda0:	9001      	str	r0, [sp, #4]
 800dda2:	086d      	lsrs	r5, r5, #1
 800dda4:	05db      	lsls	r3, r3, #23
 800dda6:	429d      	cmp	r5, r3
 800dda8:	db0f      	blt.n	800ddca <atanf+0x32>
 800ddaa:	23ff      	movs	r3, #255	; 0xff
 800ddac:	05db      	lsls	r3, r3, #23
 800ddae:	429d      	cmp	r5, r3
 800ddb0:	dd04      	ble.n	800ddbc <atanf+0x24>
 800ddb2:	1c01      	adds	r1, r0, #0
 800ddb4:	f7f2 fcc4 	bl	8000740 <__aeabi_fadd>
 800ddb8:	1c04      	adds	r4, r0, #0
 800ddba:	e004      	b.n	800ddc6 <atanf+0x2e>
 800ddbc:	9b01      	ldr	r3, [sp, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	dd00      	ble.n	800ddc4 <atanf+0x2c>
 800ddc2:	e0cc      	b.n	800df5e <atanf+0x1c6>
 800ddc4:	4c67      	ldr	r4, [pc, #412]	; (800df64 <atanf+0x1cc>)
 800ddc6:	1c20      	adds	r0, r4, #0
 800ddc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ddca:	4b67      	ldr	r3, [pc, #412]	; (800df68 <atanf+0x1d0>)
 800ddcc:	429d      	cmp	r5, r3
 800ddce:	dc0f      	bgt.n	800ddf0 <atanf+0x58>
 800ddd0:	23c4      	movs	r3, #196	; 0xc4
 800ddd2:	059b      	lsls	r3, r3, #22
 800ddd4:	429d      	cmp	r5, r3
 800ddd6:	da08      	bge.n	800ddea <atanf+0x52>
 800ddd8:	4964      	ldr	r1, [pc, #400]	; (800df6c <atanf+0x1d4>)
 800ddda:	f7f2 fcb1 	bl	8000740 <__aeabi_fadd>
 800ddde:	21fe      	movs	r1, #254	; 0xfe
 800dde0:	0589      	lsls	r1, r1, #22
 800dde2:	f7f2 fb8f 	bl	8000504 <__aeabi_fcmpgt>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	d1ed      	bne.n	800ddc6 <atanf+0x2e>
 800ddea:	2601      	movs	r6, #1
 800ddec:	4276      	negs	r6, r6
 800ddee:	e01b      	b.n	800de28 <atanf+0x90>
 800ddf0:	f000 f8e2 	bl	800dfb8 <fabsf>
 800ddf4:	4b5e      	ldr	r3, [pc, #376]	; (800df70 <atanf+0x1d8>)
 800ddf6:	1c04      	adds	r4, r0, #0
 800ddf8:	429d      	cmp	r5, r3
 800ddfa:	dc7b      	bgt.n	800def4 <atanf+0x15c>
 800ddfc:	4b5d      	ldr	r3, [pc, #372]	; (800df74 <atanf+0x1dc>)
 800ddfe:	429d      	cmp	r5, r3
 800de00:	dc67      	bgt.n	800ded2 <atanf+0x13a>
 800de02:	1c01      	adds	r1, r0, #0
 800de04:	f7f2 fc9c 	bl	8000740 <__aeabi_fadd>
 800de08:	21fe      	movs	r1, #254	; 0xfe
 800de0a:	0589      	lsls	r1, r1, #22
 800de0c:	f7f3 f924 	bl	8001058 <__aeabi_fsub>
 800de10:	2180      	movs	r1, #128	; 0x80
 800de12:	1c05      	adds	r5, r0, #0
 800de14:	05c9      	lsls	r1, r1, #23
 800de16:	1c20      	adds	r0, r4, #0
 800de18:	f7f2 fc92 	bl	8000740 <__aeabi_fadd>
 800de1c:	1c01      	adds	r1, r0, #0
 800de1e:	1c28      	adds	r0, r5, #0
 800de20:	f7f2 fe2c 	bl	8000a7c <__aeabi_fdiv>
 800de24:	2600      	movs	r6, #0
 800de26:	1c04      	adds	r4, r0, #0
 800de28:	1c21      	adds	r1, r4, #0
 800de2a:	1c20      	adds	r0, r4, #0
 800de2c:	f7f2 ffee 	bl	8000e0c <__aeabi_fmul>
 800de30:	1c01      	adds	r1, r0, #0
 800de32:	1c07      	adds	r7, r0, #0
 800de34:	f7f2 ffea 	bl	8000e0c <__aeabi_fmul>
 800de38:	494f      	ldr	r1, [pc, #316]	; (800df78 <atanf+0x1e0>)
 800de3a:	1c05      	adds	r5, r0, #0
 800de3c:	f7f2 ffe6 	bl	8000e0c <__aeabi_fmul>
 800de40:	494e      	ldr	r1, [pc, #312]	; (800df7c <atanf+0x1e4>)
 800de42:	f7f2 fc7d 	bl	8000740 <__aeabi_fadd>
 800de46:	1c29      	adds	r1, r5, #0
 800de48:	f7f2 ffe0 	bl	8000e0c <__aeabi_fmul>
 800de4c:	494c      	ldr	r1, [pc, #304]	; (800df80 <atanf+0x1e8>)
 800de4e:	f7f2 fc77 	bl	8000740 <__aeabi_fadd>
 800de52:	1c29      	adds	r1, r5, #0
 800de54:	f7f2 ffda 	bl	8000e0c <__aeabi_fmul>
 800de58:	494a      	ldr	r1, [pc, #296]	; (800df84 <atanf+0x1ec>)
 800de5a:	f7f2 fc71 	bl	8000740 <__aeabi_fadd>
 800de5e:	1c29      	adds	r1, r5, #0
 800de60:	f7f2 ffd4 	bl	8000e0c <__aeabi_fmul>
 800de64:	4948      	ldr	r1, [pc, #288]	; (800df88 <atanf+0x1f0>)
 800de66:	f7f2 fc6b 	bl	8000740 <__aeabi_fadd>
 800de6a:	1c29      	adds	r1, r5, #0
 800de6c:	f7f2 ffce 	bl	8000e0c <__aeabi_fmul>
 800de70:	4946      	ldr	r1, [pc, #280]	; (800df8c <atanf+0x1f4>)
 800de72:	f7f2 fc65 	bl	8000740 <__aeabi_fadd>
 800de76:	1c39      	adds	r1, r7, #0
 800de78:	f7f2 ffc8 	bl	8000e0c <__aeabi_fmul>
 800de7c:	4944      	ldr	r1, [pc, #272]	; (800df90 <atanf+0x1f8>)
 800de7e:	1c07      	adds	r7, r0, #0
 800de80:	1c28      	adds	r0, r5, #0
 800de82:	f7f2 ffc3 	bl	8000e0c <__aeabi_fmul>
 800de86:	4943      	ldr	r1, [pc, #268]	; (800df94 <atanf+0x1fc>)
 800de88:	f7f3 f8e6 	bl	8001058 <__aeabi_fsub>
 800de8c:	1c29      	adds	r1, r5, #0
 800de8e:	f7f2 ffbd 	bl	8000e0c <__aeabi_fmul>
 800de92:	4941      	ldr	r1, [pc, #260]	; (800df98 <atanf+0x200>)
 800de94:	f7f3 f8e0 	bl	8001058 <__aeabi_fsub>
 800de98:	1c29      	adds	r1, r5, #0
 800de9a:	f7f2 ffb7 	bl	8000e0c <__aeabi_fmul>
 800de9e:	493f      	ldr	r1, [pc, #252]	; (800df9c <atanf+0x204>)
 800dea0:	f7f3 f8da 	bl	8001058 <__aeabi_fsub>
 800dea4:	1c29      	adds	r1, r5, #0
 800dea6:	f7f2 ffb1 	bl	8000e0c <__aeabi_fmul>
 800deaa:	493d      	ldr	r1, [pc, #244]	; (800dfa0 <atanf+0x208>)
 800deac:	f7f3 f8d4 	bl	8001058 <__aeabi_fsub>
 800deb0:	1c29      	adds	r1, r5, #0
 800deb2:	f7f2 ffab 	bl	8000e0c <__aeabi_fmul>
 800deb6:	1c01      	adds	r1, r0, #0
 800deb8:	1c38      	adds	r0, r7, #0
 800deba:	f7f2 fc41 	bl	8000740 <__aeabi_fadd>
 800debe:	1c21      	adds	r1, r4, #0
 800dec0:	f7f2 ffa4 	bl	8000e0c <__aeabi_fmul>
 800dec4:	1c73      	adds	r3, r6, #1
 800dec6:	d134      	bne.n	800df32 <atanf+0x19a>
 800dec8:	1c01      	adds	r1, r0, #0
 800deca:	1c20      	adds	r0, r4, #0
 800decc:	f7f3 f8c4 	bl	8001058 <__aeabi_fsub>
 800ded0:	e772      	b.n	800ddb8 <atanf+0x20>
 800ded2:	21fe      	movs	r1, #254	; 0xfe
 800ded4:	0589      	lsls	r1, r1, #22
 800ded6:	f7f3 f8bf 	bl	8001058 <__aeabi_fsub>
 800deda:	21fe      	movs	r1, #254	; 0xfe
 800dedc:	1c05      	adds	r5, r0, #0
 800dede:	0589      	lsls	r1, r1, #22
 800dee0:	1c20      	adds	r0, r4, #0
 800dee2:	f7f2 fc2d 	bl	8000740 <__aeabi_fadd>
 800dee6:	1c01      	adds	r1, r0, #0
 800dee8:	1c28      	adds	r0, r5, #0
 800deea:	f7f2 fdc7 	bl	8000a7c <__aeabi_fdiv>
 800deee:	2601      	movs	r6, #1
 800def0:	1c04      	adds	r4, r0, #0
 800def2:	e799      	b.n	800de28 <atanf+0x90>
 800def4:	4b2b      	ldr	r3, [pc, #172]	; (800dfa4 <atanf+0x20c>)
 800def6:	429d      	cmp	r5, r3
 800def8:	dc14      	bgt.n	800df24 <atanf+0x18c>
 800defa:	21ff      	movs	r1, #255	; 0xff
 800defc:	0589      	lsls	r1, r1, #22
 800defe:	f7f3 f8ab 	bl	8001058 <__aeabi_fsub>
 800df02:	21ff      	movs	r1, #255	; 0xff
 800df04:	1c05      	adds	r5, r0, #0
 800df06:	0589      	lsls	r1, r1, #22
 800df08:	1c20      	adds	r0, r4, #0
 800df0a:	f7f2 ff7f 	bl	8000e0c <__aeabi_fmul>
 800df0e:	21fe      	movs	r1, #254	; 0xfe
 800df10:	0589      	lsls	r1, r1, #22
 800df12:	f7f2 fc15 	bl	8000740 <__aeabi_fadd>
 800df16:	1c01      	adds	r1, r0, #0
 800df18:	1c28      	adds	r0, r5, #0
 800df1a:	f7f2 fdaf 	bl	8000a7c <__aeabi_fdiv>
 800df1e:	2602      	movs	r6, #2
 800df20:	1c04      	adds	r4, r0, #0
 800df22:	e781      	b.n	800de28 <atanf+0x90>
 800df24:	1c01      	adds	r1, r0, #0
 800df26:	4820      	ldr	r0, [pc, #128]	; (800dfa8 <atanf+0x210>)
 800df28:	f7f2 fda8 	bl	8000a7c <__aeabi_fdiv>
 800df2c:	2603      	movs	r6, #3
 800df2e:	1c04      	adds	r4, r0, #0
 800df30:	e77a      	b.n	800de28 <atanf+0x90>
 800df32:	4b1e      	ldr	r3, [pc, #120]	; (800dfac <atanf+0x214>)
 800df34:	00b6      	lsls	r6, r6, #2
 800df36:	58f1      	ldr	r1, [r6, r3]
 800df38:	f7f3 f88e 	bl	8001058 <__aeabi_fsub>
 800df3c:	1c21      	adds	r1, r4, #0
 800df3e:	f7f3 f88b 	bl	8001058 <__aeabi_fsub>
 800df42:	4b1b      	ldr	r3, [pc, #108]	; (800dfb0 <atanf+0x218>)
 800df44:	1c01      	adds	r1, r0, #0
 800df46:	58f0      	ldr	r0, [r6, r3]
 800df48:	f7f3 f886 	bl	8001058 <__aeabi_fsub>
 800df4c:	9b01      	ldr	r3, [sp, #4]
 800df4e:	1c04      	adds	r4, r0, #0
 800df50:	2b00      	cmp	r3, #0
 800df52:	db00      	blt.n	800df56 <atanf+0x1be>
 800df54:	e737      	b.n	800ddc6 <atanf+0x2e>
 800df56:	2380      	movs	r3, #128	; 0x80
 800df58:	061b      	lsls	r3, r3, #24
 800df5a:	18c4      	adds	r4, r0, r3
 800df5c:	e733      	b.n	800ddc6 <atanf+0x2e>
 800df5e:	4c15      	ldr	r4, [pc, #84]	; (800dfb4 <atanf+0x21c>)
 800df60:	e731      	b.n	800ddc6 <atanf+0x2e>
 800df62:	46c0      	nop			; (mov r8, r8)
 800df64:	bfc90fdb 	.word	0xbfc90fdb
 800df68:	3edfffff 	.word	0x3edfffff
 800df6c:	7149f2ca 	.word	0x7149f2ca
 800df70:	3f97ffff 	.word	0x3f97ffff
 800df74:	3f2fffff 	.word	0x3f2fffff
 800df78:	3c8569d7 	.word	0x3c8569d7
 800df7c:	3d4bda59 	.word	0x3d4bda59
 800df80:	3d886b35 	.word	0x3d886b35
 800df84:	3dba2e6e 	.word	0x3dba2e6e
 800df88:	3e124925 	.word	0x3e124925
 800df8c:	3eaaaaab 	.word	0x3eaaaaab
 800df90:	bd15a221 	.word	0xbd15a221
 800df94:	3d6ef16b 	.word	0x3d6ef16b
 800df98:	3d9d8795 	.word	0x3d9d8795
 800df9c:	3de38e38 	.word	0x3de38e38
 800dfa0:	3e4ccccd 	.word	0x3e4ccccd
 800dfa4:	401bffff 	.word	0x401bffff
 800dfa8:	bf800000 	.word	0xbf800000
 800dfac:	0800e8d4 	.word	0x0800e8d4
 800dfb0:	0800e8c4 	.word	0x0800e8c4
 800dfb4:	3fc90fdb 	.word	0x3fc90fdb

0800dfb8 <fabsf>:
 800dfb8:	0040      	lsls	r0, r0, #1
 800dfba:	0840      	lsrs	r0, r0, #1
 800dfbc:	4770      	bx	lr
	...

0800dfc0 <nanf>:
 800dfc0:	4800      	ldr	r0, [pc, #0]	; (800dfc4 <nanf+0x4>)
 800dfc2:	4770      	bx	lr
 800dfc4:	7fc00000 	.word	0x7fc00000

0800dfc8 <_init>:
 800dfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfca:	46c0      	nop			; (mov r8, r8)
 800dfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfce:	bc08      	pop	{r3}
 800dfd0:	469e      	mov	lr, r3
 800dfd2:	4770      	bx	lr

0800dfd4 <_fini>:
 800dfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfd6:	46c0      	nop			; (mov r8, r8)
 800dfd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfda:	bc08      	pop	{r3}
 800dfdc:	469e      	mov	lr, r3
 800dfde:	4770      	bx	lr
