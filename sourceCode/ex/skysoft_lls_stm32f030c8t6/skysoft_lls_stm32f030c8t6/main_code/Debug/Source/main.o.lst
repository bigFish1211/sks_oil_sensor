   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.cleanWDT,"ax",%progbits
  18              		.align	1
  19              		.global	cleanWDT
  20              		.code	16
  21              		.thumb_func
  23              	cleanWDT:
  24              	.LFB38:
  25              		.file 1 "../Source/main.c"
   1:../Source/main.c **** /**
   2:../Source/main.c ****  ******************************************************************************
   3:../Source/main.c ****  * @file    Project/STM32F0xx_StdPeriph_Templates/main.c
   4:../Source/main.c ****  * @author  MCD Application Team
   5:../Source/main.c ****  * @version V1.5.0
   6:../Source/main.c ****  * @date    05-December-2014
   7:../Source/main.c ****  * @brief   Main program body
   8:../Source/main.c ****  ******************************************************************************
   9:../Source/main.c ****  * @attention
  10:../Source/main.c ****  *
  11:../Source/main.c ****  * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  12:../Source/main.c ****  *
  13:../Source/main.c ****  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  14:../Source/main.c ****  * You may not use this file except in compliance with the License.
  15:../Source/main.c ****  * You may obtain a copy of the License at:
  16:../Source/main.c ****  *
  17:../Source/main.c ****  *        http://www.st.com/software_license_agreement_liberty_v2
  18:../Source/main.c ****  *
  19:../Source/main.c ****  * Unless required by applicable law or agreed to in writing, software
  20:../Source/main.c ****  * distributed under the License is distributed on an "AS IS" BASIS,
  21:../Source/main.c ****  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:../Source/main.c ****  * See the License for the specific language governing permissions and
  23:../Source/main.c ****  * limitations under the License.
  24:../Source/main.c ****  *
  25:../Source/main.c ****  ******************************************************************************
  26:../Source/main.c ****  */
  27:../Source/main.c **** /* Includes ------------------------------------------------------------------*/
  28:../Source/main.c **** #include <string.h>
  29:../Source/main.c **** 
  30:../Source/main.c **** #include "stm32f0xx_conf.h"
  31:../Source/main.c **** #include "DataUtil.h"
  32:../Source/main.c **** #include "xprintf.h"
  33:../Source/main.c **** #include "uart.h"
  34:../Source/main.c **** #include "KalmanFilter.h"
  35:../Source/main.c **** #include "command.h"
  36:../Source/main.c **** #include "LSM6DS3.h"
  37:../Source/main.c **** #include "delay.h"
  38:../Source/main.c **** #include "global.h"
  39:../Source/main.c **** #include "config.h"
  40:../Source/main.c **** #include "spi.h"
  41:../Source/main.c **** #include "timer.h"
  42:../Source/main.c **** #include "define.h"
  43:../Source/main.c **** #include "stdlib.h"
  44:../Source/main.c **** #include "internal_temperature.h"
  45:../Source/main.c **** #include "EMA.h"
  46:../Source/main.c **** 
  47:../Source/main.c **** /** @addtogroup STM32F0xx_StdPeriph_Templates
  48:../Source/main.c ****  * @{
  49:../Source/main.c ****  */
  50:../Source/main.c **** /* Private typedef -----------------------------------------------------------*/
  51:../Source/main.c **** /* Private define ------------------------------------------------------------*/
  52:../Source/main.c **** //#define USING_BOOTLOADER		1
  53:../Source/main.c **** /* Private macro -------------------------------------------------------------*/
  54:../Source/main.c **** /* Private variables ---------------------------------------------------------*/
  55:../Source/main.c **** #ifdef USING_BOOTLOADER
  56:../Source/main.c **** #if   (defined ( __CC_ARM ))
  57:../Source/main.c **** __IO uint32_t VectorTable[48] __attribute__((at(0x20000000)));
  58:../Source/main.c **** #elif (defined (__ICCARM__))
  59:../Source/main.c **** #pragma location = 0x20000000
  60:../Source/main.c **** __no_init __IO uint32_t VectorTable[48];
  61:../Source/main.c **** #elif defined   (  __GNUC__  )
  62:../Source/main.c **** __IO uint32_t VectorTable[48] __attribute__((section(".RAMVectorTable")));
  63:../Source/main.c **** #elif defined ( __TASKING__ )
  64:../Source/main.c **** __IO uint32_t VectorTable[48] __at(0x20000000);
  65:../Source/main.c **** #endif
  66:../Source/main.c **** 
  67:../Source/main.c **** #endif
  68:../Source/main.c **** /* Private function prototypes -----------------------------------------------*/
  69:../Source/main.c **** volatile uint32_t ulSecCount = 0;
  70:../Source/main.c **** volatile uint32_t ulTickCount = 0;
  71:../Source/main.c **** volatile uint32_t ulMiliCount = 0;
  72:../Source/main.c **** 
  73:../Source/main.c **** volatile uint16_t Capture;
  74:../Source/main.c **** 
  75:../Source/main.c **** volatile unsigned long ulTick100 = 0; //Tick Count from start to now, 100ms
  76:../Source/main.c **** 
  77:../Source/main.c **** /* Private functions ---------------------------------------------------------*/
  78:../Source/main.c **** static void sysTick_clock(void);
  79:../Source/main.c **** static void LSM6DS3_init(void);
  80:../Source/main.c **** static void LSM6DS3_get_raw(void);
  81:../Source/main.c **** static void LSM6DS3_get_angle(void);
  82:../Source/main.c **** void static setup(void);
  83:../Source/main.c **** 
  84:../Source/main.c **** volatile char buff_cmd[256] = {0};
  85:../Source/main.c **** 
  86:../Source/main.c **** unsigned long lastSentToTracker = 0;
  87:../Source/main.c **** unsigned long lastStoreAverage = 0;
  88:../Source/main.c **** 
  89:../Source/main.c **** #define  MAX_LEVEL			1023
  90:../Source/main.c **** #define  MAX_NO_AVERAGE 	15
  91:../Source/main.c **** #define  COMPARE_LEVELS 	6
  92:../Source/main.c **** #define  MAX_STORE_LEVEL 	30
  93:../Source/main.c **** 
  94:../Source/main.c **** STORE_LEVEL avrFreq[MAX_NO_AVERAGE]; //average frequency
  95:../Source/main.c **** STORE_LEVEL min3DFreq[MAX_NO_AVERAGE]; //Save min change
  96:../Source/main.c **** STORE_LEVEL avrFreq3D[MAX_NO_AVERAGE]; //average frequency with 3d
  97:../Source/main.c **** STORE_LEVEL same3DFreq[MAX_NO_AVERAGE]; //Same 3D with previous
  98:../Source/main.c **** 
  99:../Source/main.c **** STORE_LEVEL storeLevels[MAX_STORE_LEVEL]; //Same 3D with previous
 100:../Source/main.c **** 
 101:../Source/main.c **** int compare_levels[COMPARE_LEVELS] = {-1};
 102:../Source/main.c **** 
 103:../Source/main.c **** unsigned char idx = 0;
 104:../Source/main.c **** unsigned char minIdx = 0;
 105:../Source/main.c **** unsigned char sameIdx = 0;
 106:../Source/main.c **** unsigned char idx3D = 0;
 107:../Source/main.c **** uint32_t lastGetTemper = 0;
 108:../Source/main.c **** 
 109:../Source/main.c **** STORE_LEVEL prePulse;
 110:../Source/main.c **** 
 111:../Source/main.c **** ERROR_STATE preErrorState;
 112:../Source/main.c **** unsigned long lastBackNormal = 0;
 113:../Source/main.c **** 
 114:../Source/main.c **** void calc_fuel_level() {
 115:../Source/main.c **** 	uint32_t diff = abs(g_config.emptyValue - g_config.fullValue);
 116:../Source/main.c **** 
 117:../Source/main.c **** 	if(g_config.emptyValue > g_config.fullValue && g_config.fullValue && g_config.emptyValue) {
 118:../Source/main.c **** 		int fuelLevel = g_appStats.fuelLevel;
 119:../Source/main.c **** 
 120:../Source/main.c **** 		if(g_appStats.emaFrequency == 0) {
 121:../Source/main.c **** 			g_appStats.directFuelLevel = 0;
 122:../Source/main.c **** 		} else if(g_appStats.emaFrequency <= g_config.fullValue) {
 123:../Source/main.c **** 			g_appStats.directFuelLevel = MAX_LEVEL;
 124:../Source/main.c **** 		} else if(g_appStats.emaFrequency >= g_config.emptyValue) {
 125:../Source/main.c **** 			g_appStats.directFuelLevel = 0;
 126:../Source/main.c **** 		} else {
 127:../Source/main.c **** 			float nValue = ((((g_config.emptyValue - g_appStats.emaFrequency)*g_config.fullValue))/(float)(d
 128:../Source/main.c **** 			g_appStats.directFuelLevel = (int)(nValue);
 129:../Source/main.c **** 		}
 130:../Source/main.c **** 
 131:../Source/main.c **** 		if(g_appStats.errorState == ERROR_STATE_NORMAL) {
 132:../Source/main.c **** 			fuelLevel = g_appStats.directFuelLevel;
 133:../Source/main.c **** 		}
 134:../Source/main.c **** 
 135:../Source/main.c **** 		if(preErrorState != ERROR_STATE_NORMAL && g_appStats.errorState == ERROR_STATE_NORMAL) {
 136:../Source/main.c **** 			lastBackNormal = ulSecCount;
 137:../Source/main.c **** 		}
 138:../Source/main.c **** 
 139:../Source/main.c **** 		preErrorState = g_appStats.errorState;
 140:../Source/main.c **** 		float roll = g_appStats.lsm6ds3.roll;
 141:../Source/main.c **** 		float pitch = g_appStats.lsm6ds3.pitch;
 142:../Source/main.c **** 		float yaw = g_appStats.lsm6ds3.yaw;
 143:../Source/main.c **** 
 144:../Source/main.c **** 		if(g_appStats.errorState == ERROR_STATE_NORMAL && ((!lastBackNormal && ulSecCount >= 3) || ((uint
 145:../Source/main.c **** 			int minSecCount = 0xFFFFFFFF;
 146:../Source/main.c **** 			int levelIdx = 0;
 147:../Source/main.c **** 			for(int i=0; i<MAX_STORE_LEVEL; i++) {
 148:../Source/main.c **** 				STORE_LEVEL *p = &storeLevels[i];
 149:../Source/main.c **** 				if(!p->secCount) {
 150:../Source/main.c **** 					levelIdx = i;
 151:../Source/main.c **** 					break;
 152:../Source/main.c **** 				} else if(p->secCount < minSecCount) {
 153:../Source/main.c **** 					levelIdx = i;
 154:../Source/main.c **** 					minSecCount = p->secCount;
 155:../Source/main.c **** 				}
 156:../Source/main.c **** 			}
 157:../Source/main.c **** 
 158:../Source/main.c **** 			STORE_LEVEL *p = &storeLevels[levelIdx];
 159:../Source/main.c **** 			p->level = fuelLevel;
 160:../Source/main.c **** 			p->secCount = ulSecCount;
 161:../Source/main.c **** 			p->x = (int)roll;
 162:../Source/main.c **** 			p->y = (int)pitch;
 163:../Source/main.c **** 			p->z = (int)yaw;
 164:../Source/main.c **** 		}
 165:../Source/main.c **** 
 166:../Source/main.c **** 		int maxSecCount = 0;
 167:../Source/main.c **** 		int level = -1;
 168:../Source/main.c **** 		for(int i=0; i<MAX_STORE_LEVEL; i++) {
 169:../Source/main.c **** 			STORE_LEVEL *p = &storeLevels[i];
 170:../Source/main.c **** 			if(p->secCount) {
 171:../Source/main.c **** 				if(p->secCount < (uint32_t)(ulSecCount - SKS_TRUNC_ERROR_SEC)) {
 172:../Source/main.c **** 					if(p->secCount > maxSecCount && p->level) {
 173:../Source/main.c **** 						maxSecCount = p->secCount;
 174:../Source/main.c **** 						level = p->level;
 175:../Source/main.c **** 					}
 176:../Source/main.c **** 				} else if(g_appStats.errorState != ERROR_STATE_NORMAL && p->secCount >= (uint32_t)(ulSecCount -
 177:../Source/main.c **** 					p->secCount = 0;
 178:../Source/main.c **** 				}
 179:../Source/main.c **** 			}
 180:../Source/main.c **** 		}
 181:../Source/main.c **** 
 182:../Source/main.c **** 		if(level != -1) {
 183:../Source/main.c **** 			g_appStats.fuelLevel = level;
 184:../Source/main.c **** 			g_appStats.lastLevelSecCount = ulSecCount;
 185:../Source/main.c **** 		}
 186:../Source/main.c **** 	}
 187:../Source/main.c **** }
 188:../Source/main.c **** 
 189:../Source/main.c **** void output_data() {
 190:../Source/main.c **** 	if(ulSecCount < 2) {
 191:../Source/main.c **** 		return;
 192:../Source/main.c **** 	}
 193:../Source/main.c **** 
 194:../Source/main.c **** 	if(lastGetTemper != ulSecCount) {
 195:../Source/main.c **** 		g_appStats.internalTemp = getTemperature();
 196:../Source/main.c **** 		lastGetTemper = ulSecCount;
 197:../Source/main.c **** 	}
 198:../Source/main.c **** 
 199:../Source/main.c **** 	int roll = (int)g_appStats.lsm6ds3.roll;
 200:../Source/main.c **** 	int pitch = (int)g_appStats.lsm6ds3.pitch;
 201:../Source/main.c **** 	int yaw = (int)g_appStats.lsm6ds3.yaw;
 202:../Source/main.c **** 
 203:../Source/main.c **** 	if(ulSecCount != lastStoreAverage) {
 204:../Source/main.c **** 		calc_fuel_level();
 205:../Source/main.c **** 
 206:../Source/main.c **** 		int fuelLevel = g_appStats.fuelLevel;
 207:../Source/main.c **** 
 208:../Source/main.c **** 		//store min 3D level
 209:../Source/main.c **** 		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 210:../Source/main.c **** 			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 211:../Source/main.c **** 				STORE_LEVEL *pMin = &min3DFreq[i];
 212:../Source/main.c **** 				if(pMin->secCount == 0
 213:../Source/main.c **** 						|| (ulSecCount - pMin->secCount) > (MAX_NO_AVERAGE*2)
 214:../Source/main.c **** 						|| (abs(roll) <= abs(pMin->x) && abs(pitch) <= abs(pMin->y))) {
 215:../Source/main.c **** 					pMin->secCount = ulSecCount;
 216:../Source/main.c **** 					pMin->frequency = g_appStats.emaFrequency;
 217:../Source/main.c **** 					pMin->level = fuelLevel;
 218:../Source/main.c **** 					pMin->vibration = g_appStats.vibrInt;
 219:../Source/main.c **** 					pMin->x = roll;
 220:../Source/main.c **** 					pMin->y = pitch;
 221:../Source/main.c **** 					pMin->z = yaw;
 222:../Source/main.c **** 					break;
 223:../Source/main.c **** 				}
 224:../Source/main.c **** 			}
 225:../Source/main.c **** 		}
 226:../Source/main.c **** 		//end store min 3D level
 227:../Source/main.c **** 
 228:../Source/main.c **** 		//store same 3d level
 229:../Source/main.c **** 		if(sameIdx >= MAX_NO_AVERAGE) {
 230:../Source/main.c **** 			sameIdx = 0;
 231:../Source/main.c **** 		}
 232:../Source/main.c **** 
 233:../Source/main.c **** 		if(abs(roll - prePulse.x) <= 1 && abs(pitch - prePulse.y) <= 1 && abs(roll) <= g_config.diffX && 
 234:../Source/main.c **** 			same3DFreq[sameIdx].secCount = ulSecCount;
 235:../Source/main.c **** 			same3DFreq[sameIdx].frequency = g_appStats.emaFrequency;
 236:../Source/main.c **** 			same3DFreq[sameIdx].level = fuelLevel;
 237:../Source/main.c **** 			same3DFreq[sameIdx].vibration = g_appStats.vibrInt;
 238:../Source/main.c **** 			same3DFreq[sameIdx].x = roll;
 239:../Source/main.c **** 			same3DFreq[sameIdx].y = pitch;
 240:../Source/main.c **** 			same3DFreq[sameIdx].z = yaw;
 241:../Source/main.c **** 			sameIdx++;
 242:../Source/main.c **** 		}
 243:../Source/main.c **** 
 244:../Source/main.c **** 		prePulse.x = roll;
 245:../Source/main.c **** 		prePulse.y = pitch;
 246:../Source/main.c **** 		//end store same 3d level
 247:../Source/main.c **** 
 248:../Source/main.c **** 		//store average level
 249:../Source/main.c **** 		if(idx >= MAX_NO_AVERAGE) {
 250:../Source/main.c **** 			idx = 0;
 251:../Source/main.c **** 		}
 252:../Source/main.c **** 
 253:../Source/main.c **** 		avrFreq[idx].secCount = ulSecCount;
 254:../Source/main.c **** 		avrFreq[idx].frequency = g_appStats.emaFrequency;
 255:../Source/main.c **** 		avrFreq[idx].level = fuelLevel;
 256:../Source/main.c **** 		avrFreq[idx].vibration = g_appStats.vibrInt;
 257:../Source/main.c **** 		avrFreq[idx].x = roll;
 258:../Source/main.c **** 		avrFreq[idx].y = pitch;
 259:../Source/main.c **** 		avrFreq[idx].z = yaw;
 260:../Source/main.c **** 		idx++;
 261:../Source/main.c **** 		//end store average level
 262:../Source/main.c **** 
 263:../Source/main.c **** 		//store in range 3D
 264:../Source/main.c **** 		if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 265:../Source/main.c **** 			if(idx3D >= MAX_NO_AVERAGE) {
 266:../Source/main.c **** 				idx3D = 0;
 267:../Source/main.c **** 			}
 268:../Source/main.c **** 
 269:../Source/main.c **** 			avrFreq3D[idx3D].secCount = ulSecCount;
 270:../Source/main.c **** 			avrFreq3D[idx3D].frequency = g_appStats.emaFrequency;
 271:../Source/main.c **** 			avrFreq3D[idx3D].level = fuelLevel;
 272:../Source/main.c **** 			avrFreq3D[idx3D].vibration = g_appStats.vibrInt;
 273:../Source/main.c **** 			avrFreq3D[idx3D].x = roll;
 274:../Source/main.c **** 			avrFreq3D[idx3D].y = pitch;
 275:../Source/main.c **** 			avrFreq3D[idx3D].z = yaw;
 276:../Source/main.c **** 			idx3D++;
 277:../Source/main.c **** 		}
 278:../Source/main.c **** 		//end store in range 3D
 279:../Source/main.c **** 
 280:../Source/main.c **** 		//reset all
 281:../Source/main.c **** 		g_appStats.fuelLevel3D = -1; //ok
 282:../Source/main.c **** 		g_appStats.fuelLevel3DMin = -1; //ok
 283:../Source/main.c **** 		g_appStats.fuelLevel3DSame = -1;
 284:../Source/main.c **** 		g_appStats.fuelLevelAvg = -1; //ok
 285:../Source/main.c **** 		g_appStats.fuelLevelMinDiff = -1;
 286:../Source/main.c **** 
 287:../Source/main.c **** 		g_appStats.vibrInt = 0;
 288:../Source/main.c **** 
 289:../Source/main.c **** 		lastStoreAverage = ulSecCount;
 290:../Source/main.c **** 
 291:../Source/main.c **** 		unsigned long min3Dx = 0;
 292:../Source/main.c **** 		unsigned long min3Dy = 0;
 293:../Source/main.c **** 		unsigned long min3DVbr = 0;
 294:../Source/main.c **** 
 295:../Source/main.c **** 		unsigned long same3Dx = 0;
 296:../Source/main.c **** 		unsigned long same3Dy = 0;
 297:../Source/main.c **** 		unsigned long same3DVbr = 0;
 298:../Source/main.c **** 		unsigned long same3DSecCount = 0;
 299:../Source/main.c **** 
 300:../Source/main.c **** 
 301:../Source/main.c **** 		uint32_t sumAvrFeq = 0;
 302:../Source/main.c **** 		int countAvr = 0;
 303:../Source/main.c **** 
 304:../Source/main.c **** 		int sumMinDiff = -1;
 305:../Source/main.c **** 		long tmpSecCount = 0;
 306:../Source/main.c **** 
 307:../Source/main.c **** 		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 308:../Source/main.c **** 			if(avrFreq[i].secCount) {
 309:../Source/main.c **** 				sumAvrFeq += avrFreq[i].level;
 310:../Source/main.c **** 				countAvr++;
 311:../Source/main.c **** 
 312:../Source/main.c **** 				//count min diff
 313:../Source/main.c **** 				int tmpCountMinDiff = 0;
 314:../Source/main.c **** 				int tmpSumMinDiff = 0;
 315:../Source/main.c **** 				int sumDiff = 0;
 316:../Source/main.c **** 				for(int j=0; j<MAX_NO_AVERAGE; j++) {
 317:../Source/main.c **** 					if(avrFreq[j].secCount && i != j) {
 318:../Source/main.c **** 						long diff = abs(avrFreq[i].level - avrFreq[j].level);
 319:../Source/main.c **** 						tmpSumMinDiff += avrFreq[j].level;
 320:../Source/main.c **** 						sumDiff += diff;
 321:../Source/main.c **** 						tmpCountMinDiff++;
 322:../Source/main.c **** 					}
 323:../Source/main.c **** 				}
 324:../Source/main.c **** 
 325:../Source/main.c **** 				//average
 326:../Source/main.c **** 				if(tmpCountMinDiff && (sumMinDiff == -1 || (sumDiff < sumMinDiff && avrFreq[i].secCount > tmpSe
 327:../Source/main.c **** 					tmpSecCount = avrFreq[i].secCount;
 328:../Source/main.c **** 					sumMinDiff = sumDiff;
 329:../Source/main.c **** 					g_appStats.fuelLevelMinDiff = (tmpSumMinDiff/tmpCountMinDiff);
 330:../Source/main.c **** 				}
 331:../Source/main.c **** 			}
 332:../Source/main.c **** 		}
 333:../Source/main.c **** 
 334:../Source/main.c **** 		int start = 0;
 335:../Source/main.c **** 		int startSame = 0;
 336:../Source/main.c **** 		long ulSecCountMax = 0;
 337:../Source/main.c **** 		uint32_t sumFeq3D = 0;
 338:../Source/main.c **** 		int count3D = 0;
 339:../Source/main.c **** 
 340:../Source/main.c **** 		uint32_t minDiffFeq3D = 0;
 341:../Source/main.c **** 		int countMinDiff3D = 0;
 342:../Source/main.c **** 
 343:../Source/main.c **** 		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 344:../Source/main.c **** 			uint32_t diffTime = (uint32_t)(ulSecCount - avrFreq3D[i].secCount);
 345:../Source/main.c **** 			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
 346:../Source/main.c **** 				if(start == 0) {
 347:../Source/main.c **** 					min3Dx = abs(avrFreq3D[i].x);
 348:../Source/main.c **** 					min3Dy = abs(avrFreq3D[i].y);
 349:../Source/main.c **** 					min3DVbr = avrFreq3D[i].vibration;
 350:../Source/main.c **** 					ulSecCountMax = avrFreq3D[i].secCount;
 351:../Source/main.c **** 					start++;
 352:../Source/main.c **** 				}
 353:../Source/main.c **** 
 354:../Source/main.c **** 				if(abs(avrFreq3D[i].x) <= min3Dx && abs(avrFreq3D[i].y) <= min3Dy && avrFreq3D[i].vibration <= 
 355:../Source/main.c **** 					min3Dx = abs(avrFreq3D[i].x);
 356:../Source/main.c **** 					min3Dy = abs(avrFreq3D[i].y);
 357:../Source/main.c **** 					min3DVbr = avrFreq3D[i].vibration;
 358:../Source/main.c **** 					if(avrFreq3D[i].secCount >= ulSecCountMax) {
 359:../Source/main.c **** 						ulSecCountMax = avrFreq3D[i].secCount;
 360:../Source/main.c **** 					}
 361:../Source/main.c **** 				}
 362:../Source/main.c **** 
 363:../Source/main.c **** 				//sum to calculate average
 364:../Source/main.c **** 				sumFeq3D += avrFreq3D[i].level;
 365:../Source/main.c **** 				count3D++;
 366:../Source/main.c **** 
 367:../Source/main.c **** 				//check count
 368:../Source/main.c **** 				uint32_t tmpMinDiffFeq3D = 0;
 369:../Source/main.c **** 				int tmpCount3DMin = 0;
 370:../Source/main.c **** 				for(int j=0; j<MAX_NO_AVERAGE; j++) {
 371:../Source/main.c **** 					uint32_t diffTime1 = (uint32_t)(ulSecCount - avrFreq3D[j].secCount);
 372:../Source/main.c **** 					if(avrFreq3D[j].secCount &&  diffTime1 <= (g_config.timeout3D*60)) {
 373:../Source/main.c **** 						int diff = abs(avrFreq3D[i].level - avrFreq3D[j].level);
 374:../Source/main.c **** 
 375:../Source/main.c **** 						if(diff < 10) {
 376:../Source/main.c **** 							tmpMinDiffFeq3D += avrFreq3D[j].level;
 377:../Source/main.c **** 							tmpCount3DMin++;
 378:../Source/main.c **** 						}
 379:../Source/main.c **** 					}
 380:../Source/main.c **** 				}
 381:../Source/main.c **** 
 382:../Source/main.c **** 				//average
 383:../Source/main.c **** 				if(tmpCount3DMin > countMinDiff3D) {
 384:../Source/main.c **** 					minDiffFeq3D = tmpMinDiffFeq3D;
 385:../Source/main.c **** 					countMinDiff3D = tmpCount3DMin;
 386:../Source/main.c **** 				}
 387:../Source/main.c **** 			}
 388:../Source/main.c **** 
 389:../Source/main.c **** 			//check same 3d
 390:../Source/main.c **** 			uint32_t diffTime2 = (uint32_t)(ulSecCount - same3DFreq[i].secCount);
 391:../Source/main.c **** 			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
 392:../Source/main.c **** 				if(startSame == 0) {
 393:../Source/main.c **** 					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 394:../Source/main.c **** 					same3Dx = abs(same3DFreq[i].x);
 395:../Source/main.c **** 					same3Dy = abs(same3DFreq[i].y);
 396:../Source/main.c **** 					same3DVbr = same3DFreq[i].vibration;
 397:../Source/main.c **** 					same3DSecCount = same3DFreq[i].secCount;
 398:../Source/main.c **** 					startSame++;
 399:../Source/main.c **** 				}
 400:../Source/main.c **** 
 401:../Source/main.c **** 				if(abs(same3DFreq[i].x) <= same3Dx && abs(same3DFreq[i].y) <= same3Dy && same3DFreq[i].vibratio
 402:../Source/main.c **** 					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 403:../Source/main.c **** 					same3Dx = abs(same3DFreq[i].x);
 404:../Source/main.c **** 					same3Dy = abs(same3DFreq[i].y);
 405:../Source/main.c **** 					same3DVbr = same3DFreq[i].vibration;
 406:../Source/main.c **** 
 407:../Source/main.c **** 					if(same3DFreq[i].secCount > same3DSecCount) {
 408:../Source/main.c **** 						same3DSecCount = same3DFreq[i].secCount;
 409:../Source/main.c **** 					}
 410:../Source/main.c **** 				}
 411:../Source/main.c **** 			}
 412:../Source/main.c **** 		}
 413:../Source/main.c **** 
 414:../Source/main.c **** 		if(countMinDiff3D) {
 415:../Source/main.c **** 			g_appStats.fuelLevel3DMin = (minDiffFeq3D/countMinDiff3D);
 416:../Source/main.c **** 		}
 417:../Source/main.c **** 
 418:../Source/main.c **** 		if(countAvr > 0) {
 419:../Source/main.c **** 			g_appStats.fuelLevelAvg = (sumAvrFeq/countAvr);
 420:../Source/main.c **** 		}
 421:../Source/main.c **** 
 422:../Source/main.c **** 		if(count3D) {
 423:../Source/main.c **** 			g_appStats.fuelLevel3D = (sumFeq3D/count3D);
 424:../Source/main.c **** 		}
 425:../Source/main.c **** 
 426:../Source/main.c **** 		int diff3D = -1;
 427:../Source/main.c **** 
 428:../Source/main.c **** 		if(ulSecCountMax) {
 429:../Source/main.c **** 			diff3D = (ulSecCount - ulSecCountMax);
 430:../Source/main.c **** 		}
 431:../Source/main.c **** 
 432:../Source/main.c **** 		int step = 0;
 433:../Source/main.c **** 
 434:../Source/main.c **** 		if(g_config.filterMode == AVERAGE_MODE) {
 435:../Source/main.c **** 			step = 1;
 436:../Source/main.c **** 
 437:../Source/main.c **** 			if(g_appStats.fuelLevel3DMin != -1) {
 438:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevel3DMin;
 439:../Source/main.c **** 				step = 11;
 440:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 441:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevel3D;
 442:../Source/main.c **** 				step = 12;
 443:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 444:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevelAvg;
 445:../Source/main.c **** 				step = 13;
 446:../Source/main.c **** 			}
 447:../Source/main.c **** 		} else if(g_config.filterMode == COMPARE_MODE) {
 448:../Source/main.c **** 			step = 2;
 449:../Source/main.c **** 
 450:../Source/main.c **** 			if(g_appStats.fuelLevel3DSame != -1) {
 451:../Source/main.c **** 				step = 21;
 452:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevel3DSame;
 453:../Source/main.c **** 			} else if(g_appStats.fuelLevel3DMin != -1) {
 454:../Source/main.c **** 				step = 22;
 455:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevel3DMin;
 456:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 457:../Source/main.c **** 				step = 23;
 458:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevel3D;
 459:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 460:../Source/main.c **** 				step = 24;
 461:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevelAvg;
 462:../Source/main.c **** 			}
 463:../Source/main.c **** 
 464:../Source/main.c **** 			for(int i=0; i<COMPARE_LEVELS; i++) {
 465:../Source/main.c **** 				compare_levels[i] = -1;
 466:../Source/main.c **** 			}
 467:../Source/main.c **** 
 468:../Source/main.c **** 			compare_levels[0] = g_appStats.fuelLevel;
 469:../Source/main.c **** 			compare_levels[1] = g_appStats.fuelLevelAvg;
 470:../Source/main.c **** 			compare_levels[2] = g_appStats.fuelLevel3D;
 471:../Source/main.c **** 			compare_levels[3] = g_appStats.fuelLevel3DMin;
 472:../Source/main.c **** 			compare_levels[4] = g_appStats.fuelLevel3DSame;
 473:../Source/main.c **** 			compare_levels[5] = g_appStats.fuelLevelMinDiff;
 474:../Source/main.c **** 
 475:../Source/main.c **** 			int minDiff = -1;
 476:../Source/main.c **** 			long minDiffLevel = -1;
 477:../Source/main.c **** 			int countDiff = 0;
 478:../Source/main.c **** 
 479:../Source/main.c **** 			for(int i=0; i<COMPARE_LEVELS; i++) {
 480:../Source/main.c **** 				if(compare_levels[i] >= 0) {
 481:../Source/main.c **** 					long sumDiff = 0;
 482:../Source/main.c **** 					long level = compare_levels[i];
 483:../Source/main.c **** 
 484:../Source/main.c **** 					for(int j=0; j<COMPARE_LEVELS; j++) {
 485:../Source/main.c **** 						if(compare_levels[j] >= 0 && i != j) {
 486:../Source/main.c **** 							long diff = abs(compare_levels[j] - level);
 487:../Source/main.c **** 							sumDiff += diff;
 488:../Source/main.c **** 							countDiff++;
 489:../Source/main.c **** 						}
 490:../Source/main.c **** 					}
 491:../Source/main.c **** 
 492:../Source/main.c **** 					if(countDiff && (minDiff == -1 || (sumDiff/countDiff) < minDiff)) {
 493:../Source/main.c **** 						minDiffLevel = level;
 494:../Source/main.c **** 						minDiff = (sumDiff/countDiff);
 495:../Source/main.c **** 					}
 496:../Source/main.c **** 				}
 497:../Source/main.c **** 			}
 498:../Source/main.c **** 
 499:../Source/main.c **** 			if(minDiffLevel >= 0) {
 500:../Source/main.c **** 				step = 25;
 501:../Source/main.c **** 				fuelLevel = minDiffLevel;
 502:../Source/main.c **** 			}
 503:../Source/main.c **** 		} else if(g_config.filterMode == DIRECT_MODE) {
 504:../Source/main.c **** 			//keep value as same current
 505:../Source/main.c **** 			step = 3;
 506:../Source/main.c **** 		} else if(g_config.filterMode == MIN_MODE) {
 507:../Source/main.c **** 			//keep value as same current
 508:../Source/main.c **** 			step = 4;
 509:../Source/main.c **** 			if(g_appStats.fuelLevelMinDiff != -1) {
 510:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevelMinDiff;
 511:../Source/main.c **** 				step = 41;
 512:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 513:../Source/main.c **** 				step = 42;
 514:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevelAvg;
 515:../Source/main.c **** 			}
 516:../Source/main.c **** 		} else if(g_config.filterMode == ACCERLATE_MODE_2) {
 517:../Source/main.c **** 			step = 5;
 518:../Source/main.c **** 			if(g_appStats.fuelLevel3DSame != -1) {
 519:../Source/main.c **** 				step = 51;
 520:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevel3DSame;
 521:../Source/main.c **** 			} else if(g_appStats.fuelLevel3DMin != -1) {
 522:../Source/main.c **** 				step = 52;
 523:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevel3DMin;
 524:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 525:../Source/main.c **** 				step = 53;
 526:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevel3D;
 527:../Source/main.c **** 			} else if(g_appStats.fuelLevelMinDiff != -1) {
 528:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevelMinDiff;
 529:../Source/main.c **** 				step = 54;
 530:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 531:../Source/main.c **** 				step = 55;
 532:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevelAvg;
 533:../Source/main.c **** 			}
 534:../Source/main.c **** 		} else if(g_config.filterMode == ACCERLATE_MODE) {
 535:../Source/main.c **** 			step = 6;
 536:../Source/main.c **** 			if(g_appStats.fuelLevel3DSame != -1) {
 537:../Source/main.c **** 				step = 61;
 538:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevel3DSame;
 539:../Source/main.c **** 			} else if(g_appStats.fuelLevel3DMin != -1) {
 540:../Source/main.c **** 				step = 62;
 541:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevel3DMin;
 542:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 543:../Source/main.c **** 				step = 63;
 544:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevel3D;
 545:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 546:../Source/main.c **** 				step = 63;
 547:../Source/main.c **** 				fuelLevel = g_appStats.fuelLevelAvg;
 548:../Source/main.c **** 			}
 549:../Source/main.c **** 		} else { //delay mode
 550:../Source/main.c **** 			//direct mode
 551:../Source/main.c **** 		}
 552:../Source/main.c **** 
 553:../Source/main.c **** 		if(ulSecCount >= (SKS_TRUNC_ERROR_SEC * 2)) {
 554:../Source/main.c **** 			if(g_appStats.debugOn == 1) {
 555:../Source/main.c **** 				if(ulSecCount != lastSentToTracker) {
 556:../Source/main.c **** 					xprintf("F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%d FU=%u EM=%u x=%d y=%d z=%d idx3D
 557:../Source/main.c **** 							g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
 558:../Source/main.c **** 							fuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3D, g_appStats.fuelLevel3DSame, g_
 559:../Source/main.c **** 							roll, pitch, yaw, idx3D, count3D, diff3D, step, g_appStats.internalTemp, g_appStats.errorSta
 560:../Source/main.c **** 					lastSentToTracker = ulSecCount;
 561:../Source/main.c **** 				}
 562:../Source/main.c **** 			} else {
 563:../Source/main.c **** 				if(g_config.interval && (ulSecCount - lastSentToTracker) >= g_config.interval) {
 564:../Source/main.c **** 					if(fuelLevel < 0) {
 565:../Source/main.c **** 						fuelLevel = 0;
 566:../Source/main.c **** 					}
 567:../Source/main.c **** 
 568:../Source/main.c **** 					if(g_appStats.fuelLevel < 0) {
 569:../Source/main.c **** 						g_appStats.fuelLevel = 0;
 570:../Source/main.c **** 					}
 571:../Source/main.c **** 
 572:../Source/main.c **** 					if(g_appStats.fuelLevelAvg < 0) {
 573:../Source/main.c **** 						g_appStats.fuelLevelAvg = 0;
 574:../Source/main.c **** 					}
 575:../Source/main.c **** 
 576:../Source/main.c **** 					if(g_appStats.fuelLevel3DMin < 0) {
 577:../Source/main.c **** 						g_appStats.fuelLevel3DMin = 0;
 578:../Source/main.c **** 					}
 579:../Source/main.c **** 
 580:../Source/main.c **** 					if(g_appStats.fuelLevel3DSame < 0) {
 581:../Source/main.c **** 						g_appStats.fuelLevel3DSame = 0;
 582:../Source/main.c **** 					}
 583:../Source/main.c **** 
 584:../Source/main.c **** 					if(g_appStats.fuelLevel3D < 0) {
 585:../Source/main.c **** 						g_appStats.fuelLevel3D = 0;
 586:../Source/main.c **** 					}
 587:../Source/main.c **** 
 588:../Source/main.c **** 					if(g_appStats.debugOn == 99) {
 589:../Source/main.c **** 						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=
 590:../Source/main.c **** 								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
 591:../Source/main.c **** 								fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_a
 592:../Source/main.c **** 								idx3D, count3D, diff3D, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.d
 593:../Source/main.c **** 					} else {
 594:../Source/main.c **** 						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=
 595:../Source/main.c **** 								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
 596:../Source/main.c **** 								fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel,
 597:../Source/main.c **** 								g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw,
 598:../Source/main.c **** 								g_appStats.internalTemp, g_appStats.errorState, g_config.fullValue, g_config.emptyValue, g_
 599:../Source/main.c **** 					}
 600:../Source/main.c **** 
 601:../Source/main.c **** 					lastSentToTracker = ulSecCount;
 602:../Source/main.c **** 				}
 603:../Source/main.c **** 			}
 604:../Source/main.c **** 		}
 605:../Source/main.c **** 	}
 606:../Source/main.c **** }
 607:../Source/main.c **** 
 608:../Source/main.c **** long lastReadAccelo;
 609:../Source/main.c **** long lastOut;
 610:../Source/main.c **** 
 611:../Source/main.c **** uint32_t timer;
 612:../Source/main.c **** short accX, accY, accZ, gyroX, gyroY, gyroZ;
 613:../Source/main.c **** double gyroXrate, gyroYrate, gyroZrate;
 614:../Source/main.c **** double x_rate = 0, y_rate = 0, Z_rate = 0;
 615:../Source/main.c **** double delta;
 616:../Source/main.c **** double kalAngleX, kalAngleY, kalAngleZ;
 617:../Source/main.c **** extern uint16_t calibration;
 618:../Source/main.c **** uint16_t cp = 0, cm = 0;
 619:../Source/main.c **** short sp = 0, sm = 0;
 620:../Source/main.c **** double roll = 0, pitch = 0, yaw = 0;
 621:../Source/main.c **** 
 622:../Source/main.c **** //extern int buff_idx;
 623:../Source/main.c **** void process_command_from_pc(void) {
 624:../Source/main.c ****     if(buff_cmd[0] == '*') {
 625:../Source/main.c **** 		server_on_command(SKS_CMD_SOURCE_COM1, buff_cmd, sizeof(buff_cmd));
 626:../Source/main.c **** 		//buff_cmd[0] = 0;
 627:../Source/main.c ****     }
 628:../Source/main.c **** 
 629:../Source/main.c **** //    if(ulSecCount - g_appStats.lastReceiveUart > 1) {
 630:../Source/main.c **** //    	buff_idx = 0;
 631:../Source/main.c **** //    	buff_cmd[0] = 0;
 632:../Source/main.c **** //    }
 633:../Source/main.c **** }
 634:../Source/main.c **** 
 635:../Source/main.c **** #define  MAX_FREQ_AVERAGE 5
 636:../Source/main.c **** uint32_t avrTimFreq[MAX_FREQ_AVERAGE] = {0};
 637:../Source/main.c **** int freqIdx = 0;
 638:../Source/main.c **** uint32_t lastFreg = 0;
 639:../Source/main.c **** int cutOff;
 640:../Source/main.c **** void handlerSensorData(void) {
 641:../Source/main.c **** 	if(freqIdx < MAX_FREQ_AVERAGE && g_appStats.tim15Freq) {
 642:../Source/main.c **** 		avrTimFreq[freqIdx] = g_appStats.tim15Freq;
 643:../Source/main.c **** 		freqIdx++;
 644:../Source/main.c **** 	} else {
 645:../Source/main.c **** 		freqIdx = 0;
 646:../Source/main.c **** 	}
 647:../Source/main.c **** 
 648:../Source/main.c **** 	if(freqIdx >= MAX_FREQ_AVERAGE) {
 649:../Source/main.c **** 		freqIdx = 0;
 650:../Source/main.c **** 	}
 651:../Source/main.c **** 
 652:../Source/main.c **** 	uint32_t sumFreq = 0;
 653:../Source/main.c **** 	uint32_t avrFreq = 0;
 654:../Source/main.c **** 	int count = 0;
 655:../Source/main.c **** 	for(int i=0; i<MAX_FREQ_AVERAGE; i++) {
 656:../Source/main.c **** 		if(avrTimFreq[i]) {
 657:../Source/main.c **** 			sumFreq += avrTimFreq[i];
 658:../Source/main.c **** 			count++;
 659:../Source/main.c **** 		}
 660:../Source/main.c **** 	}
 661:../Source/main.c **** 
 662:../Source/main.c **** 	if(count > 0) {
 663:../Source/main.c **** 		avrFreq = sumFreq/count;
 664:../Source/main.c **** 	}
 665:../Source/main.c **** 
 666:../Source/main.c **** #if SKS_DEBUG_AVG_FREQUENCY
 667:../Source/main.c **** 	xprintf("avrFeq: %d, sumFeq: %d, count:%d, currentFrequency: %d, \r\n",avrFreq, sumFreq, count,  g
 668:../Source/main.c **** #endif
 669:../Source/main.c **** 
 670:../Source/main.c **** 	if(avrFreq && g_appStats.tim15Freq) {
 671:../Source/main.c **** 		if(!g_config.disableEma) {
 672:../Source/main.c **** 			addStock((float)avrFreq, &SensorEMA10);
 673:../Source/main.c **** 			avrFreq = SensorEMA10.lastEMA;;
 674:../Source/main.c **** 		}
 675:../Source/main.c **** 		g_appStats.frequency = avrFreq; //use for set FULL and EMPTY this Frequency
 676:../Source/main.c **** 	}
 677:../Source/main.c **** 
 678:../Source/main.c **** 	ERROR_STATE error = ERROR_STATE_NORMAL;
 679:../Source/main.c **** 
 680:../Source/main.c **** 	if(!g_appStats.tim15Freq) {
 681:../Source/main.c **** 		error = ERROR_STATE_ZERO;
 682:../Source/main.c **** 	} else if(g_config.emptyValue && avrFreq > (g_config.emptyValue * 1.1)) {
 683:../Source/main.c **** 		error = ERROR_STATE_OVER_EMPTY;
 684:../Source/main.c **** 	} else if(g_config.fullValue && avrFreq < (g_config.fullValue * 0.9)) {
 685:../Source/main.c **** 		error = ERROR_STATE_BELOW_FULL;
 686:../Source/main.c **** 	} else if(!g_config.fullValue && !g_config.emptyValue) {
 687:../Source/main.c **** 		error = ERROR_STATE_NOT_SET_FULL_EMTY;
 688:../Source/main.c **** 	}
 689:../Source/main.c **** 
 690:../Source/main.c **** 	g_appStats.errorState = error;
 691:../Source/main.c **** 
 692:../Source/main.c **** 	if(error == ERROR_STATE_NORMAL) {
 693:../Source/main.c **** 		if(avrFreq > g_config.emptyValue) {
 694:../Source/main.c **** 			avrFreq = g_config.emptyValue;
 695:../Source/main.c **** 		} else if (avrFreq < g_config.fullValue){
 696:../Source/main.c **** 			avrFreq = g_config.fullValue;
 697:../Source/main.c **** 		}
 698:../Source/main.c **** 
 699:../Source/main.c **** 		if(lastFreg) {
 700:../Source/main.c **** 			uint32_t diff = abs(avrFreq - lastFreg);
 701:../Source/main.c **** 			if(diff > (lastFreg/10) && cutOff < 10) {
 702:../Source/main.c **** 				cutOff++;
 703:../Source/main.c **** 			} else {
 704:../Source/main.c **** 				if(!g_config.disableEma) {
 705:../Source/main.c **** 					addStock(avrFreq, &SensorEMA5);
 706:../Source/main.c **** 					avrFreq = SensorEMA5.lastEMA;
 707:../Source/main.c **** 				}
 708:../Source/main.c **** 				g_appStats.emaFrequency = avrFreq;
 709:../Source/main.c **** 				cutOff = 0;
 710:../Source/main.c **** 			}
 711:../Source/main.c **** 		} else {
 712:../Source/main.c **** 			if(!g_config.disableEma) {
 713:../Source/main.c **** 				addStock(avrFreq, &SensorEMA5);
 714:../Source/main.c **** 				avrFreq = SensorEMA5.lastEMA;
 715:../Source/main.c **** 			}
 716:../Source/main.c **** 			g_appStats.emaFrequency = avrFreq;
 717:../Source/main.c **** 		}
 718:../Source/main.c **** 
 719:../Source/main.c **** 		lastFreg = avrFreq;
 720:../Source/main.c **** 	}
 721:../Source/main.c **** }
 722:../Source/main.c **** 
 723:../Source/main.c **** int roll_t, pith_t;
 724:../Source/main.c **** int main(void) {
 725:../Source/main.c **** #ifdef USING_BOOTLOADER
 726:../Source/main.c **** 	uint32_t i = 0;
 727:../Source/main.c **** 	for (i = 0; i < 48; i++) {
 728:../Source/main.c **** 		VectorTable[i] = *(__IO uint32_t*) (APPLICATION_ADDRESS + (i << 2));
 729:../Source/main.c **** 	}
 730:../Source/main.c **** 
 731:../Source/main.c **** 	/* Enable the SYSCFG peripheral clock*/
 732:../Source/main.c **** 	RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 733:../Source/main.c **** 	/* Remap SRAM at 0x00000000 */
 734:../Source/main.c **** 	SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SRAM);
 735:../Source/main.c **** #endif
 736:../Source/main.c **** 
 737:../Source/main.c **** #if SKS_DEBUG_NOW
 738:../Source/main.c **** 	g_appStats.debugOn = 1;
 739:../Source/main.c **** #else
 740:../Source/main.c **** 	g_appStats.debugOn = 0;
 741:../Source/main.c **** #endif
 742:../Source/main.c **** 
 743:../Source/main.c **** 	setup();
 744:../Source/main.c **** 
 745:../Source/main.c **** 	xprintf("\r\nSystem ready (%s)\r\n", APP_VERSION);
 746:../Source/main.c **** 	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_con
 747:../Source/main.c **** 
 748:../Source/main.c **** 	while(1){
 749:../Source/main.c **** 		if(g_appStats.resetNow) {
 750:../Source/main.c **** 			if(ulSecCount - g_appStats.resetNow >= 3) {
 751:../Source/main.c **** 				NVIC_SystemReset();
 752:../Source/main.c **** 				return 0;
 753:../Source/main.c **** 			}
 754:../Source/main.c **** 		}
 755:../Source/main.c **** 
 756:../Source/main.c **** 		Kalman_SetFlag();
 757:../Source/main.c **** 		LSM6DS3_get_angle();
 758:../Source/main.c **** 
 759:../Source/main.c **** 		if(g_appStats.processPcCommand) {
 760:../Source/main.c **** 			process_command_from_pc();
 761:../Source/main.c **** 			g_appStats.processPcCommand = 0;
 762:../Source/main.c **** 		}
 763:../Source/main.c **** 
 764:../Source/main.c **** 	    cleanWDT();
 765:../Source/main.c **** 
 766:../Source/main.c **** 	    if(g_appStats.freqUpdated) {
 767:../Source/main.c **** 	    	handlerSensorData();
 768:../Source/main.c **** 	    	g_appStats.freqUpdated = 0;
 769:../Source/main.c **** 	    }
 770:../Source/main.c **** 
 771:../Source/main.c **** 	    output_data();
 772:../Source/main.c **** 
 773:../Source/main.c **** #if 0
 774:../Source/main.c **** 		if(last_check_time<ulMiliCount){
 775:../Source/main.c **** 			//LSM6DS3_get_raw();
 776:../Source/main.c **** 			xprintf("%d		%d		%d\r\n", Capture, g_appStats.frequency, interrupt_count);
 777:../Source/main.c **** 			last_check_time = ulMiliCount + 500;
 778:../Source/main.c **** 		}
 779:../Source/main.c **** #endif
 780:../Source/main.c **** 
 781:../Source/main.c **** 	}
 782:../Source/main.c **** }
 783:../Source/main.c **** 
 784:../Source/main.c **** void cleanWDT(void){
  26              		.loc 1 784 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
 785:../Source/main.c **** 	IWDG_SetWindowValue(1000);
  33              		.loc 1 785 0
  34 0002 FA20     		mov	r0, #250
  35 0004 8000     		lsl	r0, r0, #2
  36 0006 FFF7FEFF 		bl	IWDG_SetWindowValue
  37              		@ sp needed for prologue
 786:../Source/main.c **** }
  38              		.loc 1 786 0
  39 000a 08BD     		pop	{r3, pc}
  40              		.cfi_endproc
  41              	.LFE38:
  43              		.global	__aeabi_ui2f
  44              		.global	__aeabi_fdiv
  45              		.global	__aeabi_fmul
  46              		.global	__aeabi_f2iz
  47              		.section	.text.calc_fuel_level,"ax",%progbits
  48              		.align	1
  49              		.global	calc_fuel_level
  50              		.code	16
  51              		.thumb_func
  53              	calc_fuel_level:
  54              	.LFB33:
 114:../Source/main.c **** void calc_fuel_level() {
  55              		.loc 1 114 0
  56              		.cfi_startproc
  57 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  58              	.LCFI1:
  59              		.cfi_def_cfa_offset 20
  60              		.cfi_offset 4, -20
  61              		.cfi_offset 5, -16
  62              		.cfi_offset 6, -12
  63              		.cfi_offset 7, -8
  64              		.cfi_offset 14, -4
 115:../Source/main.c **** 	uint32_t diff = abs(g_config.emptyValue - g_config.fullValue);
  65              		.loc 1 115 0
  66 0002 584B     		ldr	r3, .L25
 114:../Source/main.c **** void calc_fuel_level() {
  67              		.loc 1 114 0
  68 0004 85B0     		sub	sp, sp, #20
  69              	.LCFI2:
  70              		.cfi_def_cfa_offset 40
 115:../Source/main.c **** 	uint32_t diff = abs(g_config.emptyValue - g_config.fullValue);
  71              		.loc 1 115 0
  72 0006 1E69     		ldr	r6, [r3, #16]
  73 0008 DF68     		ldr	r7, [r3, #12]
  74              	.LVL0:
 117:../Source/main.c **** 	if(g_config.emptyValue > g_config.fullValue && g_config.fullValue && g_config.emptyValue) {
  75              		.loc 1 117 0
  76 000a BE42     		cmp	r6, r7
  77 000c 00D8     		bhi	.LCB22
  78 000e A7E0     		b	.L2	@long jump
  79              	.LCB22:
 117:../Source/main.c **** 	if(g_config.emptyValue > g_config.fullValue && g_config.fullValue && g_config.emptyValue) {
  80              		.loc 1 117 0 is_stmt 0 discriminator 1
  81 0010 002F     		cmp	r7, #0
  82 0012 00D1     		bne	.LCB24
  83 0014 A4E0     		b	.L2	@long jump
  84              	.LCB24:
  85 0016 002E     		cmp	r6, #0
  86 0018 00D1     		bne	.LCB26
  87 001a A1E0     		b	.L2	@long jump
  88              	.LCB26:
  89              	.LBB6:
 118:../Source/main.c **** 		int fuelLevel = g_appStats.fuelLevel;
  90              		.loc 1 118 0 is_stmt 1
  91 001c 524C     		ldr	r4, .L25+4
  92 001e A56A     		ldr	r5, [r4, #40]
  93 0020 0295     		str	r5, [sp, #8]
  94              	.LVL1:
 120:../Source/main.c **** 		if(g_appStats.emaFrequency == 0) {
  95              		.loc 1 120 0
  96 0022 656A     		ldr	r5, [r4, #36]
  97 0024 002D     		cmp	r5, #0
  98 0026 01D1     		bne	.L4
 121:../Source/main.c **** 			g_appStats.directFuelLevel = 0;
  99              		.loc 1 121 0
 100 0028 E562     		str	r5, [r4, #44]
 101 002a 1EE0     		b	.L5
 102              	.L4:
 122:../Source/main.c **** 		} else if(g_appStats.emaFrequency <= g_config.fullValue) {
 103              		.loc 1 122 0
 104 002c BD42     		cmp	r5, r7
 105 002e 01D8     		bhi	.L6
 123:../Source/main.c **** 			g_appStats.directFuelLevel = MAX_LEVEL;
 106              		.loc 1 123 0
 107 0030 4E4B     		ldr	r3, .L25+8
 108 0032 02E0     		b	.L24
 109              	.L6:
 124:../Source/main.c **** 		} else if(g_appStats.emaFrequency >= g_config.emptyValue) {
 110              		.loc 1 124 0
 111 0034 B542     		cmp	r5, r6
 112 0036 02D3     		bcc	.L7
 125:../Source/main.c **** 			g_appStats.directFuelLevel = 0;
 113              		.loc 1 125 0
 114 0038 0023     		mov	r3, #0
 115              	.L24:
 116 003a E362     		str	r3, [r4, #44]
 117 003c 15E0     		b	.L5
 118              	.L7:
 119              	.LVL2:
 120              	.LBB7:
 127:../Source/main.c **** 			float nValue = ((((g_config.emptyValue - g_appStats.emaFrequency)*g_config.fullValue))/(float)(d
 121              		.loc 1 127 0
 122 003e 701B     		sub	r0, r6, r5
 123 0040 7843     		mul	r0, r7
 124 0042 FFF7FEFF 		bl	__aeabi_ui2f
 125              	.LVL3:
 126 0046 0390     		str	r0, [sp, #12]
 127              	.LBE7:
 128              	.LBE6:
 115:../Source/main.c **** 	uint32_t diff = abs(g_config.emptyValue - g_config.fullValue);
 129              		.loc 1 115 0
 130 0048 F01B     		sub	r0, r6, r7
 131 004a C617     		asr	r6, r0, #31
 132              	.LVL4:
 133 004c 8019     		add	r0, r0, r6
 134 004e 7040     		eor	r0, r6
 135              	.LBB15:
 136              	.LBB8:
 127:../Source/main.c **** 			float nValue = ((((g_config.emptyValue - g_appStats.emaFrequency)*g_config.fullValue))/(float)(d
 137              		.loc 1 127 0
 138 0050 6843     		mul	r0, r5
 139 0052 FFF7FEFF 		bl	__aeabi_ui2f
 140 0056 011C     		add	r1, r0, #0
 141 0058 0398     		ldr	r0, [sp, #12]
 142 005a FFF7FEFF 		bl	__aeabi_fdiv
 143 005e 4449     		ldr	r1, .L25+12
 144 0060 FFF7FEFF 		bl	__aeabi_fmul
 128:../Source/main.c **** 			g_appStats.directFuelLevel = (int)(nValue);
 145              		.loc 1 128 0
 146 0064 FFF7FEFF 		bl	__aeabi_f2iz
 147 0068 E062     		str	r0, [r4, #44]
 148              	.L5:
 149              	.LBE8:
 131:../Source/main.c **** 		if(g_appStats.errorState == ERROR_STATE_NORMAL) {
 150              		.loc 1 131 0
 151 006a 3F4A     		ldr	r2, .L25+4
 152 006c 111C     		mov	r1, r2
 153 006e 6531     		add	r1, r1, #101
 154 0070 0B78     		ldrb	r3, [r1]
 155 0072 002B     		cmp	r3, #0
 156 0074 01D0     		beq	.L8
 118:../Source/main.c **** 		int fuelLevel = g_appStats.fuelLevel;
 157              		.loc 1 118 0
 158 0076 0299     		ldr	r1, [sp, #8]
 159 0078 00E0     		b	.L9
 160              	.L8:
 132:../Source/main.c **** 			fuelLevel = g_appStats.directFuelLevel;
 161              		.loc 1 132 0
 162 007a D16A     		ldr	r1, [r2, #44]
 163              	.LVL5:
 164              	.L9:
 135:../Source/main.c **** 		if(preErrorState != ERROR_STATE_NORMAL && g_appStats.errorState == ERROR_STATE_NORMAL) {
 165              		.loc 1 135 0
 166 007c 3D48     		ldr	r0, .L25+16
 167 007e 0478     		ldrb	r4, [r0]
 168 0080 002C     		cmp	r4, #0
 169 0082 05D0     		beq	.L10
 135:../Source/main.c **** 		if(preErrorState != ERROR_STATE_NORMAL && g_appStats.errorState == ERROR_STATE_NORMAL) {
 170              		.loc 1 135 0 is_stmt 0 discriminator 1
 171 0084 002B     		cmp	r3, #0
 172 0086 03D1     		bne	.L10
 136:../Source/main.c **** 			lastBackNormal = ulSecCount;
 173              		.loc 1 136 0 is_stmt 1
 174 0088 3B4E     		ldr	r6, .L25+20
 175 008a 3C4F     		ldr	r7, .L25+24
 176 008c 3568     		ldr	r5, [r6]
 177 008e 3D60     		str	r5, [r7]
 178              	.L10:
 141:../Source/main.c **** 		float pitch = g_appStats.lsm6ds3.pitch;
 179              		.loc 1 141 0
 180 0090 5468     		ldr	r4, [r2, #4]
 139:../Source/main.c **** 		preErrorState = g_appStats.errorState;
 181              		.loc 1 139 0
 182 0092 0370     		strb	r3, [r0]
 140:../Source/main.c **** 		float roll = g_appStats.lsm6ds3.roll;
 183              		.loc 1 140 0
 184 0094 1068     		ldr	r0, [r2]
 185              	.LVL6:
 142:../Source/main.c **** 		float yaw = g_appStats.lsm6ds3.yaw;
 186              		.loc 1 142 0
 187 0096 9268     		ldr	r2, [r2, #8]
 141:../Source/main.c **** 		float pitch = g_appStats.lsm6ds3.pitch;
 188              		.loc 1 141 0
 189 0098 0294     		str	r4, [sp, #8]
 190              	.LVL7:
 142:../Source/main.c **** 		float yaw = g_appStats.lsm6ds3.yaw;
 191              		.loc 1 142 0
 192 009a 0192     		str	r2, [sp, #4]
 193              	.LVL8:
 144:../Source/main.c **** 		if(g_appStats.errorState == ERROR_STATE_NORMAL && ((!lastBackNormal && ulSecCount >= 3) || ((uint
 194              		.loc 1 144 0
 195 009c 002B     		cmp	r3, #0
 196 009e 32D1     		bne	.L11
 144:../Source/main.c **** 		if(g_appStats.errorState == ERROR_STATE_NORMAL && ((!lastBackNormal && ulSecCount >= 3) || ((uint
 197              		.loc 1 144 0 is_stmt 0 discriminator 1
 198 00a0 364F     		ldr	r7, .L25+24
 199 00a2 354C     		ldr	r4, .L25+20
 200 00a4 3A68     		ldr	r2, [r7]
 201 00a6 002A     		cmp	r2, #0
 202 00a8 02D1     		bne	.L12
 203 00aa 2568     		ldr	r5, [r4]
 204 00ac 022D     		cmp	r5, #2
 205 00ae 04D8     		bhi	.L19
 206              	.L12:
 144:../Source/main.c **** 		if(g_appStats.errorState == ERROR_STATE_NORMAL && ((!lastBackNormal && ulSecCount >= 3) || ((uint
 207              		.loc 1 144 0 discriminator 2
 208 00b0 2668     		ldr	r6, [r4]
 209 00b2 B31A     		sub	r3, r6, r2
 210 00b4 042B     		cmp	r3, #4
 211 00b6 26D9     		bls	.L11
 144:../Source/main.c **** 		if(g_appStats.errorState == ERROR_STATE_NORMAL && ((!lastBackNormal && ulSecCount >= 3) || ((uint
 212              		.loc 1 144 0
 213 00b8 0023     		mov	r3, #0
 214              	.L19:
 215 00ba 0124     		mov	r4, #1
 216 00bc 1A1C     		mov	r2, r3
 217 00be 6742     		neg	r7, r4
 218              	.L21:
 219              	.LVL9:
 220              	.LBB9:
 221              	.LBB10:
 222              	.LBB11:
 148:../Source/main.c **** 				STORE_LEVEL *p = &storeLevels[i];
 223              		.loc 1 148 0 is_stmt 1
 224 00c0 1C26     		mov	r6, #28
 225 00c2 5E43     		mul	r6, r3
 149:../Source/main.c **** 				if(!p->secCount) {
 226              		.loc 1 149 0
 227 00c4 2E4D     		ldr	r5, .L25+28
 148:../Source/main.c **** 				STORE_LEVEL *p = &storeLevels[i];
 228              		.loc 1 148 0
 229 00c6 0396     		str	r6, [sp, #12]
 149:../Source/main.c **** 				if(!p->secCount) {
 230              		.loc 1 149 0
 231 00c8 AC59     		ldr	r4, [r5, r6]
 232 00ca AC46     		mov	ip, r5
 233 00cc 002C     		cmp	r4, #0
 234 00ce 07D0     		beq	.L20
 152:../Source/main.c **** 				} else if(p->secCount < minSecCount) {
 235              		.loc 1 152 0
 236 00d0 BC42     		cmp	r4, r7
 237 00d2 01D2     		bcs	.L15
 238              	.LVL10:
 154:../Source/main.c **** 					minSecCount = p->secCount;
 239              		.loc 1 154 0
 240 00d4 271C     		mov	r7, r4
 241              	.LVL11:
 242 00d6 1A1C     		mov	r2, r3
 243              	.LVL12:
 244              	.L15:
 245              	.LBE11:
 147:../Source/main.c **** 			for(int i=0; i<MAX_STORE_LEVEL; i++) {
 246              		.loc 1 147 0
 247 00d8 0133     		add	r3, r3, #1
 248              	.LVL13:
 249 00da 1E2B     		cmp	r3, #30
 250 00dc F0D1     		bne	.L21
 251 00de 00E0     		b	.L14
 252              	.LVL14:
 253              	.L20:
 254              	.LBB12:
 149:../Source/main.c **** 				if(!p->secCount) {
 255              		.loc 1 149 0
 256 00e0 1A1C     		mov	r2, r3
 257              	.LVL15:
 258              	.L14:
 259              	.LBE12:
 260              	.LBE10:
 158:../Source/main.c **** 			STORE_LEVEL *p = &storeLevels[levelIdx];
 261              		.loc 1 158 0
 262 00e2 1C27     		mov	r7, #28
 263 00e4 5743     		mul	r7, r2
 160:../Source/main.c **** 			p->secCount = ulSecCount;
 264              		.loc 1 160 0
 265 00e6 244A     		ldr	r2, .L25+20
 266              	.LVL16:
 158:../Source/main.c **** 			STORE_LEVEL *p = &storeLevels[levelIdx];
 267              		.loc 1 158 0
 268 00e8 6744     		add	r7, r7, ip
 269              	.LVL17:
 159:../Source/main.c **** 			p->level = fuelLevel;
 270              		.loc 1 159 0
 271 00ea B961     		str	r1, [r7, #24]
 160:../Source/main.c **** 			p->secCount = ulSecCount;
 272              		.loc 1 160 0
 273 00ec 1168     		ldr	r1, [r2]
 274              	.LVL18:
 275 00ee 3960     		str	r1, [r7]
 161:../Source/main.c **** 			p->x = (int)roll;
 276              		.loc 1 161 0
 277 00f0 FFF7FEFF 		bl	__aeabi_f2iz
 278              	.LVL19:
 279 00f4 F860     		str	r0, [r7, #12]
 162:../Source/main.c **** 			p->y = (int)pitch;
 280              		.loc 1 162 0
 281 00f6 0298     		ldr	r0, [sp, #8]
 282 00f8 FFF7FEFF 		bl	__aeabi_f2iz
 283 00fc 3861     		str	r0, [r7, #16]
 163:../Source/main.c **** 			p->z = (int)yaw;
 284              		.loc 1 163 0
 285 00fe 0198     		ldr	r0, [sp, #4]
 286 0100 FFF7FEFF 		bl	__aeabi_f2iz
 287 0104 7861     		str	r0, [r7, #20]
 288              	.LVL20:
 289              	.L11:
 290              	.LBE9:
 291              	.LBB13:
 292              	.LBB14:
 176:../Source/main.c **** 				} else if(g_appStats.errorState != ERROR_STATE_NORMAL && p->secCount >= (uint32_t)(ulSecCount -
 293              		.loc 1 176 0 discriminator 1
 294 0106 184B     		ldr	r3, .L25+4
 295 0108 0120     		mov	r0, #1
 296 010a 6533     		add	r3, r3, #101
 297 010c 1E78     		ldrb	r6, [r3]
 298 010e 0023     		mov	r3, #0
 299 0110 4142     		neg	r1, r0
 300 0112 1C1C     		mov	r4, r3
 301              	.LVL21:
 302              	.L18:
 169:../Source/main.c **** 			STORE_LEVEL *p = &storeLevels[i];
 303              		.loc 1 169 0
 304 0114 1C25     		mov	r5, #28
 305 0116 5D43     		mul	r5, r3
 306 0118 194F     		ldr	r7, .L25+28
 307 011a E819     		add	r0, r5, r7
 308              	.LVL22:
 170:../Source/main.c **** 			if(p->secCount) {
 309              		.loc 1 170 0
 310 011c 0268     		ldr	r2, [r0]
 311 011e 002A     		cmp	r2, #0
 312 0120 14D0     		beq	.L16
 171:../Source/main.c **** 				if(p->secCount < (uint32_t)(ulSecCount - SKS_TRUNC_ERROR_SEC)) {
 313              		.loc 1 171 0
 314 0122 154D     		ldr	r5, .L25+20
 315 0124 2F68     		ldr	r7, [r5]
 316 0126 053F     		sub	r7, r7, #5
 317 0128 BA42     		cmp	r2, r7
 318 012a 07D2     		bcs	.L17
 172:../Source/main.c **** 					if(p->secCount > maxSecCount && p->level) {
 319              		.loc 1 172 0
 320 012c A242     		cmp	r2, r4
 321 012e 0DD9     		bls	.L16
 172:../Source/main.c **** 					if(p->secCount > maxSecCount && p->level) {
 322              		.loc 1 172 0 is_stmt 0 discriminator 1
 323 0130 8069     		ldr	r0, [r0, #24]
 324              	.LVL23:
 325 0132 0028     		cmp	r0, #0
 326 0134 0AD0     		beq	.L16
 173:../Source/main.c **** 						maxSecCount = p->secCount;
 327              		.loc 1 173 0 is_stmt 1
 328 0136 141C     		mov	r4, r2
 329              	.LVL24:
 330 0138 011C     		mov	r1, r0
 331 013a 07E0     		b	.L16
 332              	.LVL25:
 333              	.L17:
 176:../Source/main.c **** 				} else if(g_appStats.errorState != ERROR_STATE_NORMAL && p->secCount >= (uint32_t)(ulSecCount -
 334              		.loc 1 176 0
 335 013c 002E     		cmp	r6, #0
 336 013e 05D0     		beq	.L16
 176:../Source/main.c **** 				} else if(g_appStats.errorState != ERROR_STATE_NORMAL && p->secCount >= (uint32_t)(ulSecCount -
 337              		.loc 1 176 0 is_stmt 0 discriminator 1
 338 0140 2D68     		ldr	r5, [r5]
 339 0142 053D     		sub	r5, r5, #5
 340 0144 AA42     		cmp	r2, r5
 341 0146 01D3     		bcc	.L16
 177:../Source/main.c **** 					p->secCount = 0;
 342              		.loc 1 177 0 is_stmt 1
 343 0148 0022     		mov	r2, #0
 344 014a 0260     		str	r2, [r0]
 345              	.LVL26:
 346              	.L16:
 347              	.LBE14:
 168:../Source/main.c **** 		for(int i=0; i<MAX_STORE_LEVEL; i++) {
 348              		.loc 1 168 0
 349 014c 0133     		add	r3, r3, #1
 350              	.LVL27:
 351 014e 1E2B     		cmp	r3, #30
 352 0150 E0D1     		bne	.L18
 353              	.LBE13:
 182:../Source/main.c **** 		if(level != -1) {
 354              		.loc 1 182 0
 355 0152 4E1C     		add	r6, r1, #1
 356 0154 04D0     		beq	.L2
 183:../Source/main.c **** 			g_appStats.fuelLevel = level;
 357              		.loc 1 183 0
 358 0156 044E     		ldr	r6, .L25+4
 359 0158 B162     		str	r1, [r6, #40]
 184:../Source/main.c **** 			g_appStats.lastLevelSecCount = ulSecCount;
 360              		.loc 1 184 0
 361 015a 0749     		ldr	r1, .L25+20
 362 015c 0C68     		ldr	r4, [r1]
 363              	.LVL28:
 364 015e 3463     		str	r4, [r6, #48]
 365              	.LVL29:
 366              	.L2:
 367              	.LBE15:
 187:../Source/main.c **** }
 368              		.loc 1 187 0
 369 0160 05B0     		add	sp, sp, #20
 370              		@ sp needed for prologue
 371 0162 F0BD     		pop	{r4, r5, r6, r7, pc}
 372              	.L26:
 373              		.align	2
 374              	.L25:
 375 0164 00000000 		.word	g_config
 376 0168 00000000 		.word	g_appStats
 377 016c FF030000 		.word	1023
 378 0170 00C07F44 		.word	1149222912
 379 0174 00000000 		.word	preErrorState
 380 0178 00000000 		.word	.LANCHOR0
 381 017c 00000000 		.word	.LANCHOR1
 382 0180 00000000 		.word	storeLevels
 383              		.cfi_endproc
 384              	.LFE33:
 386              		.global	__aeabi_idiv
 387              		.global	__aeabi_uidiv
 388              		.section	.text.output_data,"ax",%progbits
 389              		.align	1
 390              		.global	output_data
 391              		.code	16
 392              		.thumb_func
 394              	output_data:
 395              	.LFB34:
 189:../Source/main.c **** void output_data() {
 396              		.loc 1 189 0
 397              		.cfi_startproc
 398 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 399              	.LCFI3:
 400              		.cfi_def_cfa_offset 20
 401              		.cfi_offset 4, -20
 402              		.cfi_offset 5, -16
 403              		.cfi_offset 6, -12
 404              		.cfi_offset 7, -8
 405              		.cfi_offset 14, -4
 190:../Source/main.c **** 	if(ulSecCount < 2) {
 406              		.loc 1 190 0
 407 0002 CA4C     		ldr	r4, .L114
 189:../Source/main.c **** void output_data() {
 408              		.loc 1 189 0
 409 0004 ADB0     		sub	sp, sp, #180
 410              	.LCFI4:
 411              		.cfi_def_cfa_offset 200
 190:../Source/main.c **** 	if(ulSecCount < 2) {
 412              		.loc 1 190 0
 413 0006 2368     		ldr	r3, [r4]
 414 0008 012B     		cmp	r3, #1
 415 000a 00D8     		bhi	.LCB342
 416 000c E3E3     		b	.L27	@long jump
 417              	.LCB342:
 194:../Source/main.c **** 	if(lastGetTemper != ulSecCount) {
 418              		.loc 1 194 0
 419 000e C84E     		ldr	r6, .L114+4
 420 0010 2068     		ldr	r0, [r4]
 421 0012 3268     		ldr	r2, [r6]
 422 0014 C74D     		ldr	r5, .L114+8
 423 0016 8242     		cmp	r2, r0
 424 0018 04D0     		beq	.L29
 195:../Source/main.c **** 		g_appStats.internalTemp = getTemperature();
 425              		.loc 1 195 0
 426 001a FFF7FEFF 		bl	getTemperature
 196:../Source/main.c **** 		lastGetTemper = ulSecCount;
 427              		.loc 1 196 0
 428 001e 2168     		ldr	r1, [r4]
 195:../Source/main.c **** 		g_appStats.internalTemp = getTemperature();
 429              		.loc 1 195 0
 430 0020 2866     		str	r0, [r5, #96]
 196:../Source/main.c **** 		lastGetTemper = ulSecCount;
 431              		.loc 1 196 0
 432 0022 3160     		str	r1, [r6]
 433              	.L29:
 199:../Source/main.c **** 	int roll = (int)g_appStats.lsm6ds3.roll;
 434              		.loc 1 199 0
 435 0024 2868     		ldr	r0, [r5]
 436 0026 FFF7FEFF 		bl	__aeabi_f2iz
 437 002a 1E90     		str	r0, [sp, #120]
 438              	.LVL30:
 200:../Source/main.c **** 	int pitch = (int)g_appStats.lsm6ds3.pitch;
 439              		.loc 1 200 0
 440 002c 6868     		ldr	r0, [r5, #4]
 441              	.LVL31:
 442 002e FFF7FEFF 		bl	__aeabi_f2iz
 443 0032 1A90     		str	r0, [sp, #104]
 444              	.LVL32:
 201:../Source/main.c **** 	int yaw = (int)g_appStats.lsm6ds3.yaw;
 445              		.loc 1 201 0
 446 0034 A868     		ldr	r0, [r5, #8]
 447              	.LVL33:
 448 0036 FFF7FEFF 		bl	__aeabi_f2iz
 203:../Source/main.c **** 	if(ulSecCount != lastStoreAverage) {
 449              		.loc 1 203 0
 450 003a BC4B     		ldr	r3, .L114
 451 003c BE4F     		ldr	r7, .L114+12
 452 003e 1C68     		ldr	r4, [r3]
 453 0040 3E68     		ldr	r6, [r7]
 201:../Source/main.c **** 	int yaw = (int)g_appStats.lsm6ds3.yaw;
 454              		.loc 1 201 0
 455 0042 1F90     		str	r0, [sp, #124]
 456              	.LVL34:
 203:../Source/main.c **** 	if(ulSecCount != lastStoreAverage) {
 457              		.loc 1 203 0
 458 0044 B442     		cmp	r4, r6
 459 0046 00D1     		bne	.LCB374
 460 0048 C5E3     		b	.L27	@long jump
 461              	.LCB374:
 462              	.LBB16:
 204:../Source/main.c **** 		calc_fuel_level();
 463              		.loc 1 204 0
 464 004a FFF7FEFF 		bl	calc_fuel_level
 465              	.LVL35:
 466              	.LBB17:
 210:../Source/main.c **** 			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 467              		.loc 1 210 0
 468 004e BB49     		ldr	r1, .L114+16
 469              	.LBE17:
 206:../Source/main.c **** 		int fuelLevel = g_appStats.fuelLevel;
 470              		.loc 1 206 0
 471 0050 AD6A     		ldr	r5, [r5, #40]
 472              	.LVL36:
 473              	.LBB19:
 210:../Source/main.c **** 			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 474              		.loc 1 210 0
 475 0052 0A7E     		ldrb	r2, [r1, #24]
 476 0054 487E     		ldrb	r0, [r1, #25]
 209:../Source/main.c **** 		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 477              		.loc 1 209 0
 478 0056 9446     		mov	ip, r2
 210:../Source/main.c **** 			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 479              		.loc 1 210 0
 480 0058 1790     		str	r0, [sp, #92]
 209:../Source/main.c **** 		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 481              		.loc 1 209 0
 482 005a 0020     		mov	r0, #0
 483              	.LVL37:
 484              	.L33:
 210:../Source/main.c **** 			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 485              		.loc 1 210 0
 486 005c 1E9C     		ldr	r4, [sp, #120]
 487 005e E617     		asr	r6, r4, #31
 488 0060 A319     		add	r3, r4, r6
 489 0062 7340     		eor	r3, r6
 490 0064 6345     		cmp	r3, ip
 491 0066 2EDC     		bgt	.L30
 210:../Source/main.c **** 			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 492              		.loc 1 210 0 is_stmt 0 discriminator 1
 493 0068 1A99     		ldr	r1, [sp, #104]
 494 006a 179F     		ldr	r7, [sp, #92]
 495 006c CA17     		asr	r2, r1, #31
 496 006e 8E18     		add	r6, r1, r2
 497 0070 5640     		eor	r6, r2
 498 0072 BE42     		cmp	r6, r7
 499 0074 27DC     		bgt	.L30
 500              	.LBB18:
 211:../Source/main.c **** 				STORE_LEVEL *pMin = &min3DFreq[i];
 501              		.loc 1 211 0 is_stmt 1
 502 0076 1C24     		mov	r4, #28
 503 0078 4443     		mul	r4, r0
 504 007a B14F     		ldr	r7, .L114+20
 505 007c E119     		add	r1, r4, r7
 506              	.LVL38:
 212:../Source/main.c **** 				if(pMin->secCount == 0
 507              		.loc 1 212 0
 508 007e 0F68     		ldr	r7, [r1]
 509 0080 AA4C     		ldr	r4, .L114
 510 0082 002F     		cmp	r7, #0
 511 0084 0FD0     		beq	.L31
 213:../Source/main.c **** 						|| (ulSecCount - pMin->secCount) > (MAX_NO_AVERAGE*2)
 512              		.loc 1 213 0
 513 0086 2268     		ldr	r2, [r4]
 514 0088 D21B     		sub	r2, r2, r7
 515 008a 1E2A     		cmp	r2, #30
 516 008c 0BD8     		bhi	.L31
 214:../Source/main.c **** 						|| (abs(roll) <= abs(pMin->x) && abs(pitch) <= abs(pMin->y))) {
 517              		.loc 1 214 0
 518 008e CA68     		ldr	r2, [r1, #12]
 519 0090 D717     		asr	r7, r2, #31
 520 0092 D219     		add	r2, r2, r7
 521 0094 7A40     		eor	r2, r7
 522 0096 9342     		cmp	r3, r2
 523 0098 15DC     		bgt	.L30
 214:../Source/main.c **** 						|| (abs(roll) <= abs(pMin->x) && abs(pitch) <= abs(pMin->y))) {
 524              		.loc 1 214 0 is_stmt 0 discriminator 1
 525 009a 0A69     		ldr	r2, [r1, #16]
 526 009c D717     		asr	r7, r2, #31
 527 009e D219     		add	r2, r2, r7
 528 00a0 7A40     		eor	r2, r7
 529 00a2 9642     		cmp	r6, r2
 530 00a4 0FDC     		bgt	.L30
 531              	.L31:
 216:../Source/main.c **** 					pMin->frequency = g_appStats.emaFrequency;
 532              		.loc 1 216 0 is_stmt 1
 533 00a6 A348     		ldr	r0, .L114+8
 215:../Source/main.c **** 					pMin->secCount = ulSecCount;
 534              		.loc 1 215 0
 535 00a8 2468     		ldr	r4, [r4]
 216:../Source/main.c **** 					pMin->frequency = g_appStats.emaFrequency;
 536              		.loc 1 216 0
 537 00aa 466A     		ldr	r6, [r0, #36]
 218:../Source/main.c **** 					pMin->vibration = g_appStats.vibrInt;
 538              		.loc 1 218 0
 539 00ac 876C     		ldr	r7, [r0, #72]
 215:../Source/main.c **** 					pMin->secCount = ulSecCount;
 540              		.loc 1 215 0
 541 00ae 0C60     		str	r4, [r1]
 216:../Source/main.c **** 					pMin->frequency = g_appStats.emaFrequency;
 542              		.loc 1 216 0
 543 00b0 4E60     		str	r6, [r1, #4]
 219:../Source/main.c **** 					pMin->x = roll;
 544              		.loc 1 219 0
 545 00b2 1E9C     		ldr	r4, [sp, #120]
 220:../Source/main.c **** 					pMin->y = pitch;
 546              		.loc 1 220 0
 547 00b4 1A9E     		ldr	r6, [sp, #104]
 221:../Source/main.c **** 					pMin->z = yaw;
 548              		.loc 1 221 0
 549 00b6 1F98     		ldr	r0, [sp, #124]
 550 00b8 6246     		mov	r2, ip
 217:../Source/main.c **** 					pMin->level = fuelLevel;
 551              		.loc 1 217 0
 552 00ba 8D61     		str	r5, [r1, #24]
 218:../Source/main.c **** 					pMin->vibration = g_appStats.vibrInt;
 553              		.loc 1 218 0
 554 00bc 8F60     		str	r7, [r1, #8]
 219:../Source/main.c **** 					pMin->x = roll;
 555              		.loc 1 219 0
 556 00be CC60     		str	r4, [r1, #12]
 220:../Source/main.c **** 					pMin->y = pitch;
 557              		.loc 1 220 0
 558 00c0 0E61     		str	r6, [r1, #16]
 221:../Source/main.c **** 					pMin->z = yaw;
 559              		.loc 1 221 0
 560 00c2 4861     		str	r0, [r1, #20]
 222:../Source/main.c **** 					break;
 561              		.loc 1 222 0
 562 00c4 03E0     		b	.L32
 563              	.LVL39:
 564              	.L30:
 565              	.LBE18:
 209:../Source/main.c **** 		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 566              		.loc 1 209 0
 567 00c6 0130     		add	r0, r0, #1
 568              	.LVL40:
 569 00c8 0F28     		cmp	r0, #15
 570 00ca C7D1     		bne	.L33
 571 00cc 6246     		mov	r2, ip
 572              	.LVL41:
 573              	.L32:
 574              	.LBE19:
 229:../Source/main.c **** 		if(sameIdx >= MAX_NO_AVERAGE) {
 575              		.loc 1 229 0
 576 00ce 9D49     		ldr	r1, .L114+24
 577 00d0 0F78     		ldrb	r7, [r1]
 578 00d2 0E2F     		cmp	r7, #14
 579 00d4 01D9     		bls	.L34
 230:../Source/main.c **** 			sameIdx = 0;
 580              		.loc 1 230 0
 581 00d6 0020     		mov	r0, #0
 582 00d8 0870     		strb	r0, [r1]
 583              	.L34:
 233:../Source/main.c **** 		if(abs(roll - prePulse.x) <= 1 && abs(pitch - prePulse.y) <= 1 && abs(roll) <= g_config.diffX && 
 584              		.loc 1 233 0
 585 00da 9B49     		ldr	r1, .L114+28
 586 00dc 1E9C     		ldr	r4, [sp, #120]
 587 00de CF68     		ldr	r7, [r1, #12]
 588 00e0 E61B     		sub	r6, r4, r7
 589 00e2 0136     		add	r6, r6, #1
 590 00e4 022E     		cmp	r6, #2
 591 00e6 25D8     		bhi	.L35
 233:../Source/main.c **** 		if(abs(roll - prePulse.x) <= 1 && abs(pitch - prePulse.y) <= 1 && abs(roll) <= g_config.diffX && 
 592              		.loc 1 233 0 is_stmt 0 discriminator 1
 593 00e8 0869     		ldr	r0, [r1, #16]
 594 00ea 1A9E     		ldr	r6, [sp, #104]
 595 00ec 311A     		sub	r1, r6, r0
 596 00ee 0131     		add	r1, r1, #1
 597 00f0 0229     		cmp	r1, #2
 598 00f2 1FD8     		bhi	.L35
 599 00f4 9342     		cmp	r3, r2
 600 00f6 1DDC     		bgt	.L35
 601 00f8 904C     		ldr	r4, .L114+16
 602 00fa F117     		asr	r1, r6, #31
 603 00fc 677E     		ldrb	r7, [r4, #25]
 604 00fe 7618     		add	r6, r6, r1
 605 0100 4E40     		eor	r6, r1
 606 0102 BE42     		cmp	r6, r7
 607 0104 16DC     		bgt	.L35
 234:../Source/main.c **** 			same3DFreq[sameIdx].secCount = ulSecCount;
 608              		.loc 1 234 0 is_stmt 1
 609 0106 8F48     		ldr	r0, .L114+24
 610 0108 8849     		ldr	r1, .L114
 611 010a 0478     		ldrb	r4, [r0]
 612 010c 0F68     		ldr	r7, [r1]
 613 010e 1C21     		mov	r1, #28
 614 0110 6143     		mul	r1, r4
 615 0112 8E4E     		ldr	r6, .L114+32
 241:../Source/main.c **** 			sameIdx++;
 616              		.loc 1 241 0
 617 0114 0134     		add	r4, r4, #1
 234:../Source/main.c **** 			same3DFreq[sameIdx].secCount = ulSecCount;
 618              		.loc 1 234 0
 619 0116 8F51     		str	r7, [r1, r6]
 235:../Source/main.c **** 			same3DFreq[sameIdx].frequency = g_appStats.emaFrequency;
 620              		.loc 1 235 0
 621 0118 7118     		add	r1, r6, r1
 622 011a 864E     		ldr	r6, .L114+8
 236:../Source/main.c **** 			same3DFreq[sameIdx].level = fuelLevel;
 623              		.loc 1 236 0
 624 011c 8D61     		str	r5, [r1, #24]
 235:../Source/main.c **** 			same3DFreq[sameIdx].frequency = g_appStats.emaFrequency;
 625              		.loc 1 235 0
 626 011e 776A     		ldr	r7, [r6, #36]
 241:../Source/main.c **** 			sameIdx++;
 627              		.loc 1 241 0
 628 0120 0470     		strb	r4, [r0]
 235:../Source/main.c **** 			same3DFreq[sameIdx].frequency = g_appStats.emaFrequency;
 629              		.loc 1 235 0
 630 0122 4F60     		str	r7, [r1, #4]
 237:../Source/main.c **** 			same3DFreq[sameIdx].vibration = g_appStats.vibrInt;
 631              		.loc 1 237 0
 632 0124 B76C     		ldr	r7, [r6, #72]
 238:../Source/main.c **** 			same3DFreq[sameIdx].x = roll;
 633              		.loc 1 238 0
 634 0126 1E9E     		ldr	r6, [sp, #120]
 237:../Source/main.c **** 			same3DFreq[sameIdx].vibration = g_appStats.vibrInt;
 635              		.loc 1 237 0
 636 0128 8F60     		str	r7, [r1, #8]
 238:../Source/main.c **** 			same3DFreq[sameIdx].x = roll;
 637              		.loc 1 238 0
 638 012a CE60     		str	r6, [r1, #12]
 239:../Source/main.c **** 			same3DFreq[sameIdx].y = pitch;
 639              		.loc 1 239 0
 640 012c 1A9F     		ldr	r7, [sp, #104]
 240:../Source/main.c **** 			same3DFreq[sameIdx].z = yaw;
 641              		.loc 1 240 0
 642 012e 1F9E     		ldr	r6, [sp, #124]
 239:../Source/main.c **** 			same3DFreq[sameIdx].y = pitch;
 643              		.loc 1 239 0
 644 0130 0F61     		str	r7, [r1, #16]
 240:../Source/main.c **** 			same3DFreq[sameIdx].z = yaw;
 645              		.loc 1 240 0
 646 0132 4E61     		str	r6, [r1, #20]
 647              	.L35:
 249:../Source/main.c **** 		if(idx >= MAX_NO_AVERAGE) {
 648              		.loc 1 249 0
 649 0134 8649     		ldr	r1, .L114+36
 244:../Source/main.c **** 		prePulse.x = roll;
 650              		.loc 1 244 0
 651 0136 844E     		ldr	r6, .L114+28
 652 0138 1E9F     		ldr	r7, [sp, #120]
 245:../Source/main.c **** 		prePulse.y = pitch;
 653              		.loc 1 245 0
 654 013a 1A9C     		ldr	r4, [sp, #104]
 249:../Source/main.c **** 		if(idx >= MAX_NO_AVERAGE) {
 655              		.loc 1 249 0
 656 013c 0878     		ldrb	r0, [r1]
 244:../Source/main.c **** 		prePulse.x = roll;
 657              		.loc 1 244 0
 658 013e F760     		str	r7, [r6, #12]
 245:../Source/main.c **** 		prePulse.y = pitch;
 659              		.loc 1 245 0
 660 0140 3461     		str	r4, [r6, #16]
 249:../Source/main.c **** 		if(idx >= MAX_NO_AVERAGE) {
 661              		.loc 1 249 0
 662 0142 0E28     		cmp	r0, #14
 663 0144 01D9     		bls	.L36
 250:../Source/main.c **** 			idx = 0;
 664              		.loc 1 250 0
 665 0146 0020     		mov	r0, #0
 666 0148 0870     		strb	r0, [r1]
 667              	.L36:
 253:../Source/main.c **** 		avrFreq[idx].secCount = ulSecCount;
 668              		.loc 1 253 0
 669 014a 824F     		ldr	r7, .L114+40
 670 014c 0E78     		ldrb	r6, [r1]
 671 014e BC46     		mov	ip, r7
 672 0150 1C27     		mov	r7, #28
 673 0152 7743     		mul	r7, r6
 674 0154 7548     		ldr	r0, .L114
 675 0156 1896     		str	r6, [sp, #96]
 676 0158 0468     		ldr	r4, [r0]
 677 015a 6646     		mov	r6, ip
 678 015c BC51     		str	r4, [r7, r6]
 254:../Source/main.c **** 		avrFreq[idx].frequency = g_appStats.emaFrequency;
 679              		.loc 1 254 0
 680 015e 754E     		ldr	r6, .L114+8
 681 0160 6744     		add	r7, r7, ip
 682 0162 746A     		ldr	r4, [r6, #36]
 256:../Source/main.c **** 		avrFreq[idx].vibration = g_appStats.vibrInt;
 683              		.loc 1 256 0
 684 0164 B66C     		ldr	r6, [r6, #72]
 254:../Source/main.c **** 		avrFreq[idx].frequency = g_appStats.emaFrequency;
 685              		.loc 1 254 0
 686 0166 1794     		str	r4, [sp, #92]
 687 0168 7C60     		str	r4, [r7, #4]
 257:../Source/main.c **** 		avrFreq[idx].x = roll;
 688              		.loc 1 257 0
 689 016a 1E9C     		ldr	r4, [sp, #120]
 255:../Source/main.c **** 		avrFreq[idx].level = fuelLevel;
 690              		.loc 1 255 0
 691 016c BD61     		str	r5, [r7, #24]
 257:../Source/main.c **** 		avrFreq[idx].x = roll;
 692              		.loc 1 257 0
 693 016e FC60     		str	r4, [r7, #12]
 258:../Source/main.c **** 		avrFreq[idx].y = pitch;
 694              		.loc 1 258 0
 695 0170 1A9C     		ldr	r4, [sp, #104]
 256:../Source/main.c **** 		avrFreq[idx].vibration = g_appStats.vibrInt;
 696              		.loc 1 256 0
 697 0172 BE60     		str	r6, [r7, #8]
 258:../Source/main.c **** 		avrFreq[idx].y = pitch;
 698              		.loc 1 258 0
 699 0174 3C61     		str	r4, [r7, #16]
 259:../Source/main.c **** 		avrFreq[idx].z = yaw;
 700              		.loc 1 259 0
 701 0176 1F9C     		ldr	r4, [sp, #124]
 702 0178 7C61     		str	r4, [r7, #20]
 260:../Source/main.c **** 		idx++;
 703              		.loc 1 260 0
 704 017a 189C     		ldr	r4, [sp, #96]
 705 017c 0134     		add	r4, r4, #1
 706 017e 0C70     		strb	r4, [r1]
 264:../Source/main.c **** 		if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 707              		.loc 1 264 0
 708 0180 9342     		cmp	r3, r2
 709 0182 20DC     		bgt	.L37
 264:../Source/main.c **** 		if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 710              		.loc 1 264 0 is_stmt 0 discriminator 1
 711 0184 1A9F     		ldr	r7, [sp, #104]
 712 0186 6D49     		ldr	r1, .L114+16
 713 0188 FC17     		asr	r4, r7, #31
 714 018a 4B7E     		ldrb	r3, [r1, #25]
 715 018c 3A19     		add	r2, r7, r4
 716 018e 6240     		eor	r2, r4
 717 0190 9A42     		cmp	r2, r3
 718 0192 18DC     		bgt	.L37
 265:../Source/main.c **** 			if(idx3D >= MAX_NO_AVERAGE) {
 719              		.loc 1 265 0 is_stmt 1
 720 0194 704B     		ldr	r3, .L114+44
 721 0196 1A78     		ldrb	r2, [r3]
 722 0198 0E2A     		cmp	r2, #14
 723 019a 01D9     		bls	.L38
 266:../Source/main.c **** 				idx3D = 0;
 724              		.loc 1 266 0
 725 019c 0021     		mov	r1, #0
 726 019e 1970     		strb	r1, [r3]
 727              	.L38:
 269:../Source/main.c **** 			avrFreq3D[idx3D].secCount = ulSecCount;
 728              		.loc 1 269 0
 729 01a0 1A78     		ldrb	r2, [r3]
 730 01a2 1C27     		mov	r7, #28
 731 01a4 5743     		mul	r7, r2
 732 01a6 0468     		ldr	r4, [r0]
 733 01a8 6C48     		ldr	r0, .L114+48
 270:../Source/main.c **** 			avrFreq3D[idx3D].frequency = g_appStats.emaFrequency;
 734              		.loc 1 270 0
 735 01aa 1799     		ldr	r1, [sp, #92]
 269:../Source/main.c **** 			avrFreq3D[idx3D].secCount = ulSecCount;
 736              		.loc 1 269 0
 737 01ac 3C50     		str	r4, [r7, r0]
 270:../Source/main.c **** 			avrFreq3D[idx3D].frequency = g_appStats.emaFrequency;
 738              		.loc 1 270 0
 739 01ae C019     		add	r0, r0, r7
 272:../Source/main.c **** 			avrFreq3D[idx3D].vibration = g_appStats.vibrInt;
 740              		.loc 1 272 0
 741 01b0 8660     		str	r6, [r0, #8]
 273:../Source/main.c **** 			avrFreq3D[idx3D].x = roll;
 742              		.loc 1 273 0
 743 01b2 1E9F     		ldr	r7, [sp, #120]
 274:../Source/main.c **** 			avrFreq3D[idx3D].y = pitch;
 744              		.loc 1 274 0
 745 01b4 1A9C     		ldr	r4, [sp, #104]
 275:../Source/main.c **** 			avrFreq3D[idx3D].z = yaw;
 746              		.loc 1 275 0
 747 01b6 1F9E     		ldr	r6, [sp, #124]
 276:../Source/main.c **** 			idx3D++;
 748              		.loc 1 276 0
 749 01b8 0132     		add	r2, r2, #1
 270:../Source/main.c **** 			avrFreq3D[idx3D].frequency = g_appStats.emaFrequency;
 750              		.loc 1 270 0
 751 01ba 4160     		str	r1, [r0, #4]
 271:../Source/main.c **** 			avrFreq3D[idx3D].level = fuelLevel;
 752              		.loc 1 271 0
 753 01bc 8561     		str	r5, [r0, #24]
 273:../Source/main.c **** 			avrFreq3D[idx3D].x = roll;
 754              		.loc 1 273 0
 755 01be C760     		str	r7, [r0, #12]
 274:../Source/main.c **** 			avrFreq3D[idx3D].y = pitch;
 756              		.loc 1 274 0
 757 01c0 0461     		str	r4, [r0, #16]
 275:../Source/main.c **** 			avrFreq3D[idx3D].z = yaw;
 758              		.loc 1 275 0
 759 01c2 4661     		str	r6, [r0, #20]
 276:../Source/main.c **** 			idx3D++;
 760              		.loc 1 276 0
 761 01c4 1A70     		strb	r2, [r3]
 762              	.L37:
 289:../Source/main.c **** 		lastStoreAverage = ulSecCount;
 763              		.loc 1 289 0
 764 01c6 594E     		ldr	r6, .L114
 281:../Source/main.c **** 		g_appStats.fuelLevel3D = -1; //ok
 765              		.loc 1 281 0
 766 01c8 5A49     		ldr	r1, .L114+8
 767 01ca 0127     		mov	r7, #1
 289:../Source/main.c **** 		lastStoreAverage = ulSecCount;
 768              		.loc 1 289 0
 769 01cc 3268     		ldr	r2, [r6]
 770 01ce 5A4B     		ldr	r3, .L114+12
 281:../Source/main.c **** 		g_appStats.fuelLevel3D = -1; //ok
 771              		.loc 1 281 0
 772 01d0 7842     		neg	r0, r7
 287:../Source/main.c **** 		g_appStats.vibrInt = 0;
 773              		.loc 1 287 0
 774 01d2 0024     		mov	r4, #0
 281:../Source/main.c **** 		g_appStats.fuelLevel3D = -1; //ok
 775              		.loc 1 281 0
 776 01d4 8863     		str	r0, [r1, #56]
 282:../Source/main.c **** 		g_appStats.fuelLevel3DMin = -1; //ok
 777              		.loc 1 282 0
 778 01d6 C863     		str	r0, [r1, #60]
 283:../Source/main.c **** 		g_appStats.fuelLevel3DSame = -1;
 779              		.loc 1 283 0
 780 01d8 0864     		str	r0, [r1, #64]
 284:../Source/main.c **** 		g_appStats.fuelLevelAvg = -1; //ok
 781              		.loc 1 284 0
 782 01da 4863     		str	r0, [r1, #52]
 285:../Source/main.c **** 		g_appStats.fuelLevelMinDiff = -1;
 783              		.loc 1 285 0
 784 01dc 4864     		str	r0, [r1, #68]
 287:../Source/main.c **** 		g_appStats.vibrInt = 0;
 785              		.loc 1 287 0
 786 01de 8C64     		str	r4, [r1, #72]
 289:../Source/main.c **** 		lastStoreAverage = ulSecCount;
 787              		.loc 1 289 0
 788 01e0 1A60     		str	r2, [r3]
 789              	.LVL42:
 307:../Source/main.c **** 		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 790              		.loc 1 307 0
 791 01e2 1B94     		str	r4, [sp, #108]
 305:../Source/main.c **** 		long tmpSecCount = 0;
 792              		.loc 1 305 0
 793 01e4 1C94     		str	r4, [sp, #112]
 304:../Source/main.c **** 		int sumMinDiff = -1;
 794              		.loc 1 304 0
 795 01e6 1890     		str	r0, [sp, #96]
 302:../Source/main.c **** 		int countAvr = 0;
 796              		.loc 1 302 0
 797 01e8 2294     		str	r4, [sp, #136]
 301:../Source/main.c **** 		uint32_t sumAvrFeq = 0;
 798              		.loc 1 301 0
 799 01ea 2394     		str	r4, [sp, #140]
 800              	.LVL43:
 801              	.L43:
 802              	.LBB20:
 308:../Source/main.c **** 			if(avrFreq[i].secCount) {
 803              		.loc 1 308 0
 804 01ec 594B     		ldr	r3, .L114+40
 805 01ee E318     		add	r3, r4, r3
 806 01f0 1A68     		ldr	r2, [r3]
 807 01f2 1992     		str	r2, [sp, #100]
 808 01f4 002A     		cmp	r2, #0
 809 01f6 39D0     		beq	.L39
 810              	.LBB21:
 309:../Source/main.c **** 				sumAvrFeq += avrFreq[i].level;
 811              		.loc 1 309 0
 812 01f8 9A69     		ldr	r2, [r3, #24]
 813 01fa 239F     		ldr	r7, [sp, #140]
 310:../Source/main.c **** 				countAvr++;
 814              		.loc 1 310 0
 815 01fc 229E     		ldr	r6, [sp, #136]
 816 01fe 0023     		mov	r3, #0
 309:../Source/main.c **** 				sumAvrFeq += avrFreq[i].level;
 817              		.loc 1 309 0
 818 0200 B918     		add	r1, r7, r2
 310:../Source/main.c **** 				countAvr++;
 819              		.loc 1 310 0
 820 0202 0136     		add	r6, r6, #1
 309:../Source/main.c **** 				sumAvrFeq += avrFreq[i].level;
 821              		.loc 1 309 0
 822 0204 1D92     		str	r2, [sp, #116]
 823 0206 2391     		str	r1, [sp, #140]
 824              	.LVL44:
 310:../Source/main.c **** 				countAvr++;
 825              		.loc 1 310 0
 826 0208 2296     		str	r6, [sp, #136]
 827              	.LVL45:
 316:../Source/main.c **** 				for(int j=0; j<MAX_NO_AVERAGE; j++) {
 828              		.loc 1 316 0
 829 020a 1A1C     		mov	r2, r3
 315:../Source/main.c **** 				int sumDiff = 0;
 830              		.loc 1 315 0
 831 020c 1793     		str	r3, [sp, #92]
 314:../Source/main.c **** 				int tmpSumMinDiff = 0;
 832              		.loc 1 314 0
 833 020e 1E1C     		mov	r6, r3
 834              	.LVL46:
 313:../Source/main.c **** 				int tmpCountMinDiff = 0;
 835              		.loc 1 313 0
 836 0210 191C     		mov	r1, r3
 837              	.LVL47:
 838 0212 8446     		mov	ip, r0
 839              	.LVL48:
 840              	.L41:
 841              	.LBB22:
 317:../Source/main.c **** 					if(avrFreq[j].secCount && i != j) {
 842              		.loc 1 317 0
 843 0214 4F4F     		ldr	r7, .L114+40
 844 0216 DF19     		add	r7, r3, r7
 845 0218 3868     		ldr	r0, [r7]
 846 021a 0028     		cmp	r0, #0
 847 021c 0DD0     		beq	.L40
 848 021e 1B98     		ldr	r0, [sp, #108]
 849 0220 9042     		cmp	r0, r2
 850 0222 0AD0     		beq	.L40
 851              	.LBB23:
 318:../Source/main.c **** 						long diff = abs(avrFreq[i].level - avrFreq[j].level);
 852              		.loc 1 318 0
 853 0224 B869     		ldr	r0, [r7, #24]
 854              	.LVL49:
 855 0226 1D9F     		ldr	r7, [sp, #116]
 856              	.LVL50:
 319:../Source/main.c **** 						tmpSumMinDiff += avrFreq[j].level;
 857              		.loc 1 319 0
 858 0228 3618     		add	r6, r6, r0
 859              	.LVL51:
 318:../Source/main.c **** 						long diff = abs(avrFreq[i].level - avrFreq[j].level);
 860              		.loc 1 318 0
 861 022a 381A     		sub	r0, r7, r0
 862              	.LVL52:
 863 022c C717     		asr	r7, r0, #31
 864 022e C019     		add	r0, r0, r7
 865 0230 7840     		eor	r0, r7
 320:../Source/main.c **** 						sumDiff += diff;
 866              		.loc 1 320 0
 867 0232 179F     		ldr	r7, [sp, #92]
 321:../Source/main.c **** 						tmpCountMinDiff++;
 868              		.loc 1 321 0
 869 0234 0131     		add	r1, r1, #1
 320:../Source/main.c **** 						sumDiff += diff;
 870              		.loc 1 320 0
 871 0236 3F18     		add	r7, r7, r0
 872 0238 1797     		str	r7, [sp, #92]
 873              	.LVL53:
 874              	.L40:
 875              	.LBE23:
 316:../Source/main.c **** 				for(int j=0; j<MAX_NO_AVERAGE; j++) {
 876              		.loc 1 316 0
 877 023a 0132     		add	r2, r2, #1
 878              	.LVL54:
 879 023c 1C33     		add	r3, r3, #28
 880 023e 0F2A     		cmp	r2, #15
 881 0240 E8D1     		bne	.L41
 882 0242 6046     		mov	r0, ip
 883              	.LBE22:
 326:../Source/main.c **** 				if(tmpCountMinDiff && (sumMinDiff == -1 || (sumDiff < sumMinDiff && avrFreq[i].secCount > tmpSe
 884              		.loc 1 326 0
 885 0244 0029     		cmp	r1, #0
 886 0246 11D0     		beq	.L39
 326:../Source/main.c **** 				if(tmpCountMinDiff && (sumMinDiff == -1 || (sumDiff < sumMinDiff && avrFreq[i].secCount > tmpSe
 887              		.loc 1 326 0 is_stmt 0 discriminator 1
 888 0248 189B     		ldr	r3, [sp, #96]
 889 024a 5A1C     		add	r2, r3, #1
 890 024c 07D0     		beq	.L42
 891              	.LVL55:
 892 024e 179F     		ldr	r7, [sp, #92]
 893 0250 189A     		ldr	r2, [sp, #96]
 894 0252 9742     		cmp	r7, r2
 895 0254 0ADA     		bge	.L39
 896 0256 199B     		ldr	r3, [sp, #100]
 897 0258 1C9A     		ldr	r2, [sp, #112]
 898 025a 9342     		cmp	r3, r2
 899 025c 06D9     		bls	.L39
 900              	.L42:
 327:../Source/main.c **** 					tmpSecCount = avrFreq[i].secCount;
 901              		.loc 1 327 0 is_stmt 1
 902 025e 1998     		ldr	r0, [sp, #100]
 903 0260 1C90     		str	r0, [sp, #112]
 904              	.LVL56:
 329:../Source/main.c **** 					g_appStats.fuelLevelMinDiff = (tmpSumMinDiff/tmpCountMinDiff);
 905              		.loc 1 329 0
 906 0262 301C     		mov	r0, r6
 907 0264 FFF7FEFF 		bl	__aeabi_idiv
 908              	.LVL57:
 909 0268 179E     		ldr	r6, [sp, #92]
 910              	.LVL58:
 911 026a 1896     		str	r6, [sp, #96]
 912              	.LVL59:
 913              	.L39:
 914              	.LBE21:
 307:../Source/main.c **** 		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 915              		.loc 1 307 0
 916 026c 1B9B     		ldr	r3, [sp, #108]
 917 026e D227     		mov	r7, #210
 918 0270 0133     		add	r3, r3, #1
 919 0272 1C34     		add	r4, r4, #28
 920 0274 1B93     		str	r3, [sp, #108]
 921              	.LVL60:
 922 0276 7900     		lsl	r1, r7, #1
 923 0278 8C42     		cmp	r4, r1
 924 027a B7D1     		bne	.L43
 925 027c 2D4E     		ldr	r6, .L114+8
 926              	.LBE20:
 927              	.LBB24:
 928              	.LBB25:
 345:../Source/main.c **** 			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
 929              		.loc 1 345 0
 930 027e 2F49     		ldr	r1, .L114+16
 931              	.LBE25:
 932              	.LBE24:
 933              	.LBB33:
 307:../Source/main.c **** 		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 934              		.loc 1 307 0
 935 0280 7064     		str	r0, [r6, #68]
 936              	.LBE33:
 937              	.LBB34:
 938              	.LBB32:
 345:../Source/main.c **** 			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
 939              		.loc 1 345 0
 940 0282 8A8A     		ldrh	r2, [r1, #20]
 941 0284 3C20     		mov	r0, #60
 942 0286 5043     		mul	r0, r2
 943 0288 346C     		ldr	r4, [r6, #64]
 944 028a 0023     		mov	r3, #0
 945              	.LVL61:
 946 028c 2590     		str	r0, [sp, #148]
 947 028e 2694     		str	r4, [sp, #152]
 948 0290 191C     		mov	r1, r3
 949 0292 2993     		str	r3, [sp, #164]
 950 0294 1793     		str	r3, [sp, #92]
 951 0296 2493     		str	r3, [sp, #144]
 952 0298 1893     		str	r3, [sp, #96]
 953 029a 2893     		str	r3, [sp, #160]
 954 029c 2793     		str	r3, [sp, #156]
 955 029e 181C     		mov	r0, r3
 956 02a0 2193     		str	r3, [sp, #132]
 957 02a2 2093     		str	r3, [sp, #128]
 958 02a4 1D93     		str	r3, [sp, #116]
 959 02a6 1C93     		str	r3, [sp, #112]
 960 02a8 1B93     		str	r3, [sp, #108]
 961 02aa 1993     		str	r3, [sp, #100]
 962 02ac D3E0     		b	.L44
 963              	.LVL62:
 964              	.L52:
 344:../Source/main.c **** 			uint32_t diffTime = (uint32_t)(ulSecCount - avrFreq3D[i].secCount);
 965              		.loc 1 344 0
 966 02ae 2B4C     		ldr	r4, .L114+48
 967 02b0 1E4F     		ldr	r7, .L114
 968 02b2 1E19     		add	r6, r3, r4
 969 02b4 3268     		ldr	r2, [r6]
 970 02b6 3F68     		ldr	r7, [r7]
 971              	.LVL63:
 345:../Source/main.c **** 			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
 972              		.loc 1 345 0
 973 02b8 002A     		cmp	r2, #0
 974 02ba 00D1     		bne	.LCB836
 975 02bc 86E0     		b	.L45	@long jump
 976              	.LCB836:
 345:../Source/main.c **** 			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
 977              		.loc 1 345 0 is_stmt 0 discriminator 1
 978 02be 259C     		ldr	r4, [sp, #148]
 344:../Source/main.c **** 			uint32_t diffTime = (uint32_t)(ulSecCount - avrFreq3D[i].secCount);
 979              		.loc 1 344 0 is_stmt 1 discriminator 1
 980 02c0 BF1A     		sub	r7, r7, r2
 981              	.LVL64:
 345:../Source/main.c **** 			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
 982              		.loc 1 345 0 discriminator 1
 983 02c2 A742     		cmp	r7, r4
 984 02c4 00D9     		bls	.LCB841
 985 02c6 81E0     		b	.L45	@long jump
 986              	.LCB841:
 987              	.LBB26:
 346:../Source/main.c **** 				if(start == 0) {
 988              		.loc 1 346 0
 989 02c8 279C     		ldr	r4, [sp, #156]
 990 02ca 002C     		cmp	r4, #0
 991 02cc 0ED1     		bne	.L46
 347:../Source/main.c **** 					min3Dx = abs(avrFreq3D[i].x);
 992              		.loc 1 347 0
 993 02ce F468     		ldr	r4, [r6, #12]
 350:../Source/main.c **** 					ulSecCountMax = avrFreq3D[i].secCount;
 994              		.loc 1 350 0
 995 02d0 1892     		str	r2, [sp, #96]
 347:../Source/main.c **** 					min3Dx = abs(avrFreq3D[i].x);
 996              		.loc 1 347 0
 997 02d2 E717     		asr	r7, r4, #31
 998              	.LVL65:
 999 02d4 E419     		add	r4, r4, r7
 1000 02d6 7C40     		eor	r4, r7
 1001 02d8 1994     		str	r4, [sp, #100]
 1002              	.LVL66:
 348:../Source/main.c **** 					min3Dy = abs(avrFreq3D[i].y);
 1003              		.loc 1 348 0
 1004 02da 3469     		ldr	r4, [r6, #16]
 1005              	.LVL67:
 1006 02dc E717     		asr	r7, r4, #31
 1007 02de E419     		add	r4, r4, r7
 1008 02e0 7C40     		eor	r4, r7
 349:../Source/main.c **** 					min3DVbr = avrFreq3D[i].vibration;
 1009              		.loc 1 349 0
 1010 02e2 B768     		ldr	r7, [r6, #8]
 351:../Source/main.c **** 					start++;
 1011              		.loc 1 351 0
 1012 02e4 0126     		mov	r6, #1
 348:../Source/main.c **** 					min3Dy = abs(avrFreq3D[i].y);
 1013              		.loc 1 348 0
 1014 02e6 1B94     		str	r4, [sp, #108]
 1015              	.LVL68:
 349:../Source/main.c **** 					min3DVbr = avrFreq3D[i].vibration;
 1016              		.loc 1 349 0
 1017 02e8 1C97     		str	r7, [sp, #112]
 1018              	.LVL69:
 351:../Source/main.c **** 					start++;
 1019              		.loc 1 351 0
 1020 02ea 2796     		str	r6, [sp, #156]
 1021              	.LVL70:
 1022              	.L46:
 189:../Source/main.c **** void output_data() {
 1023              		.loc 1 189 0
 1024 02ec 1B4C     		ldr	r4, .L114+48
 1025 02ee E418     		add	r4, r4, r3
 354:../Source/main.c **** 				if(abs(avrFreq3D[i].x) <= min3Dx && abs(avrFreq3D[i].y) <= min3Dy && avrFreq3D[i].vibration <= 
 1026              		.loc 1 354 0
 1027 02f0 E768     		ldr	r7, [r4, #12]
 1028 02f2 FE17     		asr	r6, r7, #31
 1029 02f4 BF19     		add	r7, r7, r6
 1030 02f6 7740     		eor	r7, r6
 1031 02f8 199E     		ldr	r6, [sp, #100]
 1032 02fa 2B97     		str	r7, [sp, #172]
 1033 02fc B742     		cmp	r7, r6
 1034 02fe 34D8     		bhi	.L47
 354:../Source/main.c **** 				if(abs(avrFreq3D[i].x) <= min3Dx && abs(avrFreq3D[i].y) <= min3Dy && avrFreq3D[i].vibration <= 
 1035              		.loc 1 354 0 is_stmt 0 discriminator 1
 1036 0300 2769     		ldr	r7, [r4, #16]
 1037 0302 FE17     		asr	r6, r7, #31
 1038 0304 BF19     		add	r7, r7, r6
 1039 0306 7740     		eor	r7, r6
 1040 0308 1B9E     		ldr	r6, [sp, #108]
 1041 030a 2A97     		str	r7, [sp, #168]
 1042 030c B742     		cmp	r7, r6
 1043 030e 2CD8     		bhi	.L47
 1044 0310 A768     		ldr	r7, [r4, #8]
 1045 0312 1C9E     		ldr	r6, [sp, #112]
 1046 0314 B742     		cmp	r7, r6
 1047 0316 28D8     		bhi	.L47
 1048              	.LVL71:
 358:../Source/main.c **** 					if(avrFreq3D[i].secCount >= ulSecCountMax) {
 1049              		.loc 1 358 0 is_stmt 1
 1050 0318 189E     		ldr	r6, [sp, #96]
 1051 031a B242     		cmp	r2, r6
 1052 031c 20D3     		bcc	.L76
 359:../Source/main.c **** 						ulSecCountMax = avrFreq3D[i].secCount;
 1053              		.loc 1 359 0
 1054 031e 1892     		str	r2, [sp, #96]
 1055              	.LVL72:
 1056 0320 1C97     		str	r7, [sp, #112]
 1057 0322 2B9A     		ldr	r2, [sp, #172]
 1058              	.LVL73:
 1059 0324 2A9F     		ldr	r7, [sp, #168]
 1060 0326 1992     		str	r2, [sp, #100]
 1061 0328 1B97     		str	r7, [sp, #108]
 1062 032a 1EE0     		b	.L47
 1063              	.L115:
 1064              		.align	2
 1065              	.L114:
 1066 032c 00000000 		.word	.LANCHOR0
 1067 0330 00000000 		.word	.LANCHOR2
 1068 0334 00000000 		.word	g_appStats
 1069 0338 00000000 		.word	.LANCHOR3
 1070 033c 00000000 		.word	g_config
 1071 0340 00000000 		.word	min3DFreq
 1072 0344 00000000 		.word	.LANCHOR4
 1073 0348 00000000 		.word	prePulse
 1074 034c 00000000 		.word	same3DFreq
 1075 0350 00000000 		.word	.LANCHOR5
 1076 0354 00000000 		.word	avrFreq
 1077 0358 00000000 		.word	.LANCHOR6
 1078 035c 00000000 		.word	avrFreq3D
 1079              	.L76:
 358:../Source/main.c **** 					if(avrFreq3D[i].secCount >= ulSecCountMax) {
 1080              		.loc 1 358 0
 1081 0360 1C97     		str	r7, [sp, #112]
 1082 0362 2A9E     		ldr	r6, [sp, #168]
 1083 0364 2B9F     		ldr	r7, [sp, #172]
 1084 0366 1B96     		str	r6, [sp, #108]
 1085 0368 1997     		str	r7, [sp, #100]
 1086              	.LVL74:
 1087              	.L47:
 364:../Source/main.c **** 				sumFeq3D += avrFreq3D[i].level;
 1088              		.loc 1 364 0
 1089 036a A769     		ldr	r7, [r4, #24]
 1090 036c 249A     		ldr	r2, [sp, #144]
 365:../Source/main.c **** 				count3D++;
 1091              		.loc 1 365 0
 1092 036e 179C     		ldr	r4, [sp, #92]
 364:../Source/main.c **** 				sumFeq3D += avrFreq3D[i].level;
 1093              		.loc 1 364 0
 1094 0370 D619     		add	r6, r2, r7
 365:../Source/main.c **** 				count3D++;
 1095              		.loc 1 365 0
 1096 0372 0134     		add	r4, r4, #1
 1097 0374 0022     		mov	r2, #0
 364:../Source/main.c **** 				sumFeq3D += avrFreq3D[i].level;
 1098              		.loc 1 364 0
 1099 0376 2496     		str	r6, [sp, #144]
 1100              	.LVL75:
 365:../Source/main.c **** 				count3D++;
 1101              		.loc 1 365 0
 1102 0378 1794     		str	r4, [sp, #92]
 1103              	.LVL76:
 364:../Source/main.c **** 				sumFeq3D += avrFreq3D[i].level;
 1104              		.loc 1 364 0
 1105 037a 2A97     		str	r7, [sp, #168]
 369:../Source/main.c **** 				int tmpCount3DMin = 0;
 1106              		.loc 1 369 0
 1107 037c 141C     		mov	r4, r2
 1108              	.LVL77:
 368:../Source/main.c **** 				uint32_t tmpMinDiffFeq3D = 0;
 1109              		.loc 1 368 0
 1110 037e 161C     		mov	r6, r2
 1111              	.LVL78:
 1112 0380 1591     		str	r1, [sp, #84]
 1113 0382 9C46     		mov	ip, r3
 1114              	.LVL79:
 1115              	.L49:
 1116              	.LBB27:
 1117              	.LBB28:
 371:../Source/main.c **** 					uint32_t diffTime1 = (uint32_t)(ulSecCount - avrFreq3D[j].secCount);
 1118              		.loc 1 371 0
 1119 0384 AF49     		ldr	r1, .L116
 1120 0386 B04B     		ldr	r3, .L116+4
 1121 0388 5718     		add	r7, r2, r1
 1122 038a 1B68     		ldr	r3, [r3]
 1123 038c 3968     		ldr	r1, [r7]
 1124 038e 2B93     		str	r3, [sp, #172]
 1125 0390 1691     		str	r1, [sp, #88]
 1126              	.LVL80:
 372:../Source/main.c **** 					if(avrFreq3D[j].secCount &&  diffTime1 <= (g_config.timeout3D*60)) {
 1127              		.loc 1 372 0
 1128 0392 0029     		cmp	r1, #0
 1129 0394 0FD0     		beq	.L48
 371:../Source/main.c **** 					uint32_t diffTime1 = (uint32_t)(ulSecCount - avrFreq3D[j].secCount);
 1130              		.loc 1 371 0 discriminator 1
 1131 0396 5B1A     		sub	r3, r3, r1
 1132              	.LVL81:
 372:../Source/main.c **** 					if(avrFreq3D[j].secCount &&  diffTime1 <= (g_config.timeout3D*60)) {
 1133              		.loc 1 372 0 discriminator 1
 1134 0398 2599     		ldr	r1, [sp, #148]
 371:../Source/main.c **** 					uint32_t diffTime1 = (uint32_t)(ulSecCount - avrFreq3D[j].secCount);
 1135              		.loc 1 371 0 discriminator 1
 1136 039a 2B93     		str	r3, [sp, #172]
 372:../Source/main.c **** 					if(avrFreq3D[j].secCount &&  diffTime1 <= (g_config.timeout3D*60)) {
 1137              		.loc 1 372 0 discriminator 1
 1138 039c 8B42     		cmp	r3, r1
 1139 039e 0AD8     		bhi	.L48
 1140              	.LBB29:
 373:../Source/main.c **** 						int diff = abs(avrFreq3D[i].level - avrFreq3D[j].level);
 1141              		.loc 1 373 0
 1142 03a0 2A99     		ldr	r1, [sp, #168]
 1143 03a2 BB69     		ldr	r3, [r7, #24]
 1144              	.LVL82:
 1145 03a4 CF1A     		sub	r7, r1, r3
 1146              	.LVL83:
 1147 03a6 F917     		asr	r1, r7, #31
 1148 03a8 7F18     		add	r7, r7, r1
 1149 03aa 4F40     		eor	r7, r1
 1150 03ac 2B97     		str	r7, [sp, #172]
 375:../Source/main.c **** 						if(diff < 10) {
 1151              		.loc 1 375 0
 1152 03ae 092F     		cmp	r7, #9
 1153 03b0 01DC     		bgt	.L48
 376:../Source/main.c **** 							tmpMinDiffFeq3D += avrFreq3D[j].level;
 1154              		.loc 1 376 0
 1155 03b2 F618     		add	r6, r6, r3
 1156              	.LVL84:
 377:../Source/main.c **** 							tmpCount3DMin++;
 1157              		.loc 1 377 0
 1158 03b4 0134     		add	r4, r4, #1
 1159              	.LVL85:
 1160              	.L48:
 1161              	.LBE29:
 1162              	.LBE28:
 370:../Source/main.c **** 				for(int j=0; j<MAX_NO_AVERAGE; j++) {
 1163              		.loc 1 370 0
 1164 03b6 D227     		mov	r7, #210
 1165              	.LBB31:
 1166              	.LBB30:
 377:../Source/main.c **** 							tmpCount3DMin++;
 1167              		.loc 1 377 0
 1168 03b8 1C32     		add	r2, r2, #28
 1169              	.LBE30:
 1170              	.LBE31:
 370:../Source/main.c **** 				for(int j=0; j<MAX_NO_AVERAGE; j++) {
 1171              		.loc 1 370 0
 1172 03ba 7B00     		lsl	r3, r7, #1
 1173 03bc 9A42     		cmp	r2, r3
 1174 03be E1D1     		bne	.L49
 1175 03c0 1599     		ldr	r1, [sp, #84]
 1176 03c2 6346     		mov	r3, ip
 1177              	.LBE27:
 383:../Source/main.c **** 				if(tmpCount3DMin > countMinDiff3D) {
 1178              		.loc 1 383 0
 1179 03c4 8C42     		cmp	r4, r1
 1180 03c6 01DD     		ble	.L45
 1181 03c8 211C     		mov	r1, r4
 1182 03ca 2996     		str	r6, [sp, #164]
 1183              	.LVL86:
 1184              	.L45:
 1185              	.LBE26:
 390:../Source/main.c **** 			uint32_t diffTime2 = (uint32_t)(ulSecCount - same3DFreq[i].secCount);
 1186              		.loc 1 390 0
 1187 03cc 9E4E     		ldr	r6, .L116+4
 1188 03ce 9F4C     		ldr	r4, .L116+8
 1189 03d0 3768     		ldr	r7, [r6]
 1190 03d2 1E19     		add	r6, r3, r4
 1191 03d4 3268     		ldr	r2, [r6]
 1192              	.LVL87:
 1193 03d6 A446     		mov	ip, r4
 391:../Source/main.c **** 			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
 1194              		.loc 1 391 0
 1195 03d8 002A     		cmp	r2, #0
 1196 03da 3BD0     		beq	.L50
 391:../Source/main.c **** 			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
 1197              		.loc 1 391 0 is_stmt 0 discriminator 1
 1198 03dc 259C     		ldr	r4, [sp, #148]
 390:../Source/main.c **** 			uint32_t diffTime2 = (uint32_t)(ulSecCount - same3DFreq[i].secCount);
 1199              		.loc 1 390 0 is_stmt 1 discriminator 1
 1200 03de BF1A     		sub	r7, r7, r2
 1201              	.LVL88:
 391:../Source/main.c **** 			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
 1202              		.loc 1 391 0 discriminator 1
 1203 03e0 A742     		cmp	r7, r4
 1204 03e2 37D8     		bhi	.L50
 392:../Source/main.c **** 				if(startSame == 0) {
 1205              		.loc 1 392 0
 1206 03e4 289C     		ldr	r4, [sp, #160]
 1207 03e6 002C     		cmp	r4, #0
 1208 03e8 0ED1     		bne	.L51
 394:../Source/main.c **** 					same3Dx = abs(same3DFreq[i].x);
 1209              		.loc 1 394 0
 1210 03ea F068     		ldr	r0, [r6, #12]
 1211              	.LVL89:
 393:../Source/main.c **** 					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 1212              		.loc 1 393 0
 1213 03ec B469     		ldr	r4, [r6, #24]
 394:../Source/main.c **** 					same3Dx = abs(same3DFreq[i].x);
 1214              		.loc 1 394 0
 1215 03ee C717     		asr	r7, r0, #31
 1216              	.LVL90:
 393:../Source/main.c **** 					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 1217              		.loc 1 393 0
 1218 03f0 2694     		str	r4, [sp, #152]
 394:../Source/main.c **** 					same3Dx = abs(same3DFreq[i].x);
 1219              		.loc 1 394 0
 1220 03f2 C419     		add	r4, r0, r7
 395:../Source/main.c **** 					same3Dy = abs(same3DFreq[i].y);
 1221              		.loc 1 395 0
 1222 03f4 3069     		ldr	r0, [r6, #16]
 394:../Source/main.c **** 					same3Dx = abs(same3DFreq[i].x);
 1223              		.loc 1 394 0
 1224 03f6 7C40     		eor	r4, r7
 395:../Source/main.c **** 					same3Dy = abs(same3DFreq[i].y);
 1225              		.loc 1 395 0
 1226 03f8 C717     		asr	r7, r0, #31
 394:../Source/main.c **** 					same3Dx = abs(same3DFreq[i].x);
 1227              		.loc 1 394 0
 1228 03fa 1D94     		str	r4, [sp, #116]
 1229              	.LVL91:
 395:../Source/main.c **** 					same3Dy = abs(same3DFreq[i].y);
 1230              		.loc 1 395 0
 1231 03fc C419     		add	r4, r0, r7
 1232              	.LVL92:
 396:../Source/main.c **** 					same3DVbr = same3DFreq[i].vibration;
 1233              		.loc 1 396 0
 1234 03fe B068     		ldr	r0, [r6, #8]
 395:../Source/main.c **** 					same3Dy = abs(same3DFreq[i].y);
 1235              		.loc 1 395 0
 1236 0400 7C40     		eor	r4, r7
 396:../Source/main.c **** 					same3DVbr = same3DFreq[i].vibration;
 1237              		.loc 1 396 0
 1238 0402 2190     		str	r0, [sp, #132]
 395:../Source/main.c **** 					same3Dy = abs(same3DFreq[i].y);
 1239              		.loc 1 395 0
 1240 0404 2094     		str	r4, [sp, #128]
 1241              	.LVL93:
 396:../Source/main.c **** 					same3DVbr = same3DFreq[i].vibration;
 1242              		.loc 1 396 0
 1243 0406 101C     		mov	r0, r2
 1244              	.LVL94:
 1245              	.L51:
 189:../Source/main.c **** void output_data() {
 1246              		.loc 1 189 0
 1247 0408 6446     		mov	r4, ip
 1248 040a E418     		add	r4, r4, r3
 401:../Source/main.c **** 				if(abs(same3DFreq[i].x) <= same3Dx && abs(same3DFreq[i].y) <= same3Dy && same3DFreq[i].vibratio
 1249              		.loc 1 401 0
 1250 040c E768     		ldr	r7, [r4, #12]
 1251 040e FE17     		asr	r6, r7, #31
 1252 0410 BF19     		add	r7, r7, r6
 1253 0412 7740     		eor	r7, r6
 1254 0414 2B97     		str	r7, [sp, #172]
 1255 0416 0126     		mov	r6, #1
 1256 0418 2896     		str	r6, [sp, #160]
 1257 041a 1D9F     		ldr	r7, [sp, #116]
 1258 041c 2B9E     		ldr	r6, [sp, #172]
 1259 041e BE42     		cmp	r6, r7
 1260 0420 18D8     		bhi	.L50
 401:../Source/main.c **** 				if(abs(same3DFreq[i].x) <= same3Dx && abs(same3DFreq[i].y) <= same3Dy && same3DFreq[i].vibratio
 1261              		.loc 1 401 0 is_stmt 0 discriminator 1
 1262 0422 2669     		ldr	r6, [r4, #16]
 1263 0424 F717     		asr	r7, r6, #31
 1264 0426 F619     		add	r6, r6, r7
 1265 0428 7E40     		eor	r6, r7
 1266 042a 209F     		ldr	r7, [sp, #128]
 1267 042c 2A96     		str	r6, [sp, #168]
 1268 042e BE42     		cmp	r6, r7
 1269 0430 10D8     		bhi	.L50
 1270 0432 A668     		ldr	r6, [r4, #8]
 1271 0434 219F     		ldr	r7, [sp, #132]
 1272 0436 B446     		mov	ip, r6
 1273 0438 BE42     		cmp	r6, r7
 1274 043a 0BD8     		bhi	.L50
 1275 043c 8242     		cmp	r2, r0
 1276 043e 09D3     		bcc	.L50
 402:../Source/main.c **** 					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 1277              		.loc 1 402 0 is_stmt 1
 1278 0440 A469     		ldr	r4, [r4, #24]
 1279 0442 2694     		str	r4, [sp, #152]
 1280              	.LVL95:
 407:../Source/main.c **** 					if(same3DFreq[i].secCount > same3DSecCount) {
 1281              		.loc 1 407 0
 1282 0444 00D9     		bls	.L82
 1283 0446 101C     		mov	r0, r2
 1284              	.LVL96:
 1285              	.L82:
 1286 0448 2A9F     		ldr	r7, [sp, #168]
 1287 044a 2B9A     		ldr	r2, [sp, #172]
 1288 044c 6446     		mov	r4, ip
 1289 044e 2194     		str	r4, [sp, #132]
 1290 0450 2097     		str	r7, [sp, #128]
 1291 0452 1D92     		str	r2, [sp, #116]
 1292              	.LVL97:
 1293              	.L50:
 1294 0454 1C33     		add	r3, r3, #28
 1295              	.LVL98:
 1296              	.L44:
 1297              	.LBE32:
 343:../Source/main.c **** 		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 1298              		.loc 1 343 0 discriminator 1
 1299 0456 D227     		mov	r7, #210
 1300 0458 7A00     		lsl	r2, r7, #1
 1301 045a 9342     		cmp	r3, r2
 1302 045c 00D0     		beq	.LCB1208
 1303 045e 26E7     		b	.L52	@long jump
 1304              	.LCB1208:
 343:../Source/main.c **** 		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 1305              		.loc 1 343 0 is_stmt 0
 1306 0460 7B4C     		ldr	r4, .L116+12
 1307 0462 269B     		ldr	r3, [sp, #152]
 1308 0464 2364     		str	r3, [r4, #64]
 1309              	.LBE34:
 414:../Source/main.c **** 		if(countMinDiff3D) {
 1310              		.loc 1 414 0 is_stmt 1
 1311 0466 0029     		cmp	r1, #0
 1312 0468 03D0     		beq	.L53
 415:../Source/main.c **** 			g_appStats.fuelLevel3DMin = (minDiffFeq3D/countMinDiff3D);
 1313              		.loc 1 415 0
 1314 046a 2998     		ldr	r0, [sp, #164]
 1315              	.LVL99:
 1316 046c FFF7FEFF 		bl	__aeabi_uidiv
 1317              	.LVL100:
 1318 0470 E063     		str	r0, [r4, #60]
 1319              	.L53:
 418:../Source/main.c **** 		if(countAvr > 0) {
 1320              		.loc 1 418 0
 1321 0472 229E     		ldr	r6, [sp, #136]
 1322 0474 002E     		cmp	r6, #0
 1323 0476 04D0     		beq	.L54
 419:../Source/main.c **** 			g_appStats.fuelLevelAvg = (sumAvrFeq/countAvr);
 1324              		.loc 1 419 0
 1325 0478 2398     		ldr	r0, [sp, #140]
 1326 047a 311C     		mov	r1, r6
 1327 047c FFF7FEFF 		bl	__aeabi_uidiv
 1328 0480 6063     		str	r0, [r4, #52]
 1329              	.L54:
 422:../Source/main.c **** 		if(count3D) {
 1330              		.loc 1 422 0
 1331 0482 179F     		ldr	r7, [sp, #92]
 1332 0484 002F     		cmp	r7, #0
 1333 0486 04D0     		beq	.L55
 423:../Source/main.c **** 			g_appStats.fuelLevel3D = (sumFeq3D/count3D);
 1334              		.loc 1 423 0
 1335 0488 2498     		ldr	r0, [sp, #144]
 1336 048a 391C     		mov	r1, r7
 1337 048c FFF7FEFF 		bl	__aeabi_uidiv
 1338 0490 A063     		str	r0, [r4, #56]
 1339              	.L55:
 1340              	.LVL101:
 428:../Source/main.c **** 		if(ulSecCountMax) {
 1341              		.loc 1 428 0
 1342 0492 189C     		ldr	r4, [sp, #96]
 1343 0494 002C     		cmp	r4, #0
 1344 0496 03D0     		beq	.L83
 429:../Source/main.c **** 			diff3D = (ulSecCount - ulSecCountMax);
 1345              		.loc 1 429 0
 1346 0498 6B48     		ldr	r0, .L116+4
 1347 049a 0168     		ldr	r1, [r0]
 1348 049c 0B1B     		sub	r3, r1, r4
 1349 049e 01E0     		b	.L112
 1350              	.L83:
 426:../Source/main.c **** 		int diff3D = -1;
 1351              		.loc 1 426 0
 1352 04a0 0126     		mov	r6, #1
 1353 04a2 7342     		neg	r3, r6
 1354              	.L112:
 434:../Source/main.c **** 		if(g_config.filterMode == AVERAGE_MODE) {
 1355              		.loc 1 434 0
 1356 04a4 6B4C     		ldr	r4, .L116+16
 426:../Source/main.c **** 		int diff3D = -1;
 1357              		.loc 1 426 0
 1358 04a6 1B93     		str	r3, [sp, #108]
 1359              	.LVL102:
 434:../Source/main.c **** 		if(g_config.filterMode == AVERAGE_MODE) {
 1360              		.loc 1 434 0
 1361 04a8 E37D     		ldrb	r3, [r4, #23]
 1362              	.LVL103:
 1363 04aa 012B     		cmp	r3, #1
 1364 04ac 10D1     		bne	.L57
 1365              	.LVL104:
 437:../Source/main.c **** 			if(g_appStats.fuelLevel3DMin != -1) {
 1366              		.loc 1 437 0
 1367 04ae 684A     		ldr	r2, .L116+12
 1368 04b0 D16B     		ldr	r1, [r2, #60]
 1369 04b2 4E1C     		add	r6, r1, #1
 1370 04b4 00D0     		beq	.LCB1267
 1371 04b6 A7E0     		b	.L84	@long jump
 1372              	.LCB1267:
 440:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 1373              		.loc 1 440 0
 1374 04b8 916B     		ldr	r1, [r2, #56]
 1375 04ba 4F1C     		add	r7, r1, #1
 1376 04bc 00D0     		beq	.LCB1270
 1377 04be A6E0     		b	.L85	@long jump
 1378              	.LCB1270:
 443:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 1379              		.loc 1 443 0
 1380 04c0 526B     		ldr	r2, [r2, #52]
 435:../Source/main.c **** 			step = 1;
 1381              		.loc 1 435 0
 1382 04c2 1C1C     		mov	r4, r3
 443:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 1383              		.loc 1 443 0
 1384 04c4 501C     		add	r0, r2, #1
 1385 04c6 00D1     		bne	.LCB1274
 1386 04c8 CAE0     		b	.L58	@long jump
 1387              	.LCB1274:
 1388 04ca 151C     		mov	r5, r2
 1389              	.LVL105:
 445:../Source/main.c **** 				step = 13;
 1390              		.loc 1 445 0
 1391 04cc 0D24     		mov	r4, #13
 1392 04ce C7E0     		b	.L58
 1393              	.LVL106:
 1394              	.L57:
 447:../Source/main.c **** 		} else if(g_config.filterMode == COMPARE_MODE) {
 1395              		.loc 1 447 0
 1396 04d0 022B     		cmp	r3, #2
 1397 04d2 60D1     		bne	.L59
 1398              	.LVL107:
 1399              	.LBB35:
 450:../Source/main.c **** 			if(g_appStats.fuelLevel3DSame != -1) {
 1400              		.loc 1 450 0
 1401 04d4 5E4A     		ldr	r2, .L116+12
 1402 04d6 116C     		ldr	r1, [r2, #64]
 1403 04d8 4C1C     		add	r4, r1, #1
 1404 04da 0CD1     		bne	.L87
 453:../Source/main.c **** 			} else if(g_appStats.fuelLevel3DMin != -1) {
 1405              		.loc 1 453 0
 1406 04dc D06B     		ldr	r0, [r2, #60]
 1407 04de 461C     		add	r6, r0, #1
 1408 04e0 0CD1     		bne	.L88
 456:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 1409              		.loc 1 456 0
 1410 04e2 906B     		ldr	r0, [r2, #56]
 1411 04e4 471C     		add	r7, r0, #1
 1412 04e6 0CD1     		bne	.L89
 459:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 1413              		.loc 1 459 0
 1414 04e8 506B     		ldr	r0, [r2, #52]
 448:../Source/main.c **** 			step = 2;
 1415              		.loc 1 448 0
 1416 04ea 1C1C     		mov	r4, r3
 459:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 1417              		.loc 1 459 0
 1418 04ec 431C     		add	r3, r0, #1
 1419 04ee 0AD0     		beq	.L60
 1420 04f0 051C     		mov	r5, r0
 1421              	.LVL108:
 460:../Source/main.c **** 				step = 24;
 1422              		.loc 1 460 0
 1423 04f2 1824     		mov	r4, #24
 1424 04f4 07E0     		b	.L60
 1425              	.LVL109:
 1426              	.L87:
 450:../Source/main.c **** 			if(g_appStats.fuelLevel3DSame != -1) {
 1427              		.loc 1 450 0
 1428 04f6 0D1C     		mov	r5, r1
 1429              	.LVL110:
 451:../Source/main.c **** 				step = 21;
 1430              		.loc 1 451 0
 1431 04f8 1524     		mov	r4, #21
 1432 04fa 04E0     		b	.L60
 1433              	.LVL111:
 1434              	.L88:
 453:../Source/main.c **** 			} else if(g_appStats.fuelLevel3DMin != -1) {
 1435              		.loc 1 453 0
 1436 04fc 051C     		mov	r5, r0
 1437              	.LVL112:
 454:../Source/main.c **** 				step = 22;
 1438              		.loc 1 454 0
 1439 04fe 1624     		mov	r4, #22
 1440 0500 01E0     		b	.L60
 1441              	.LVL113:
 1442              	.L89:
 456:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 1443              		.loc 1 456 0
 1444 0502 051C     		mov	r5, r0
 1445              	.LVL114:
 457:../Source/main.c **** 				step = 23;
 1446              		.loc 1 457 0
 1447 0504 1724     		mov	r4, #23
 1448              	.L60:
 1449              	.LVL115:
 468:../Source/main.c **** 			compare_levels[0] = g_appStats.fuelLevel;
 1450              		.loc 1 468 0
 1451 0506 544F     		ldr	r7, .L116+20
 1452 0508 906A     		ldr	r0, [r2, #40]
 469:../Source/main.c **** 			compare_levels[1] = g_appStats.fuelLevelAvg;
 1453              		.loc 1 469 0
 1454 050a 536B     		ldr	r3, [r2, #52]
 470:../Source/main.c **** 			compare_levels[2] = g_appStats.fuelLevel3D;
 1455              		.loc 1 470 0
 1456 050c 966B     		ldr	r6, [r2, #56]
 468:../Source/main.c **** 			compare_levels[0] = g_appStats.fuelLevel;
 1457              		.loc 1 468 0
 1458 050e 3860     		str	r0, [r7]
 469:../Source/main.c **** 			compare_levels[1] = g_appStats.fuelLevelAvg;
 1459              		.loc 1 469 0
 1460 0510 7B60     		str	r3, [r7, #4]
 471:../Source/main.c **** 			compare_levels[3] = g_appStats.fuelLevel3DMin;
 1461              		.loc 1 471 0
 1462 0512 D06B     		ldr	r0, [r2, #60]
 472:../Source/main.c **** 			compare_levels[4] = g_appStats.fuelLevel3DSame;
 1463              		.loc 1 472 0
 1464 0514 3961     		str	r1, [r7, #16]
 476:../Source/main.c **** 			long minDiffLevel = -1;
 1465              		.loc 1 476 0
 1466 0516 0123     		mov	r3, #1
 473:../Source/main.c **** 			compare_levels[5] = g_appStats.fuelLevelMinDiff;
 1467              		.loc 1 473 0
 1468 0518 516C     		ldr	r1, [r2, #68]
 470:../Source/main.c **** 			compare_levels[2] = g_appStats.fuelLevel3D;
 1469              		.loc 1 470 0
 1470 051a BE60     		str	r6, [r7, #8]
 476:../Source/main.c **** 			long minDiffLevel = -1;
 1471              		.loc 1 476 0
 1472 051c 5A42     		neg	r2, r3
 479:../Source/main.c **** 			for(int i=0; i<COMPARE_LEVELS; i++) {
 1473              		.loc 1 479 0
 1474 051e 0026     		mov	r6, #0
 471:../Source/main.c **** 			compare_levels[3] = g_appStats.fuelLevel3DMin;
 1475              		.loc 1 471 0
 1476 0520 F860     		str	r0, [r7, #12]
 473:../Source/main.c **** 			compare_levels[5] = g_appStats.fuelLevelMinDiff;
 1477              		.loc 1 473 0
 1478 0522 7961     		str	r1, [r7, #20]
 1479              	.LVL116:
 1480 0524 2097     		str	r7, [sp, #128]
 476:../Source/main.c **** 			long minDiffLevel = -1;
 1481              		.loc 1 476 0
 1482 0526 1892     		str	r2, [sp, #96]
 477:../Source/main.c **** 			int countDiff = 0;
 1483              		.loc 1 477 0
 1484 0528 371C     		mov	r7, r6
 475:../Source/main.c **** 			int minDiff = -1;
 1485              		.loc 1 475 0
 1486 052a 1C92     		str	r2, [sp, #112]
 1487              	.LVL117:
 1488              	.L65:
 1489              	.LBB36:
 480:../Source/main.c **** 				if(compare_levels[i] >= 0) {
 1490              		.loc 1 480 0
 1491 052c 2099     		ldr	r1, [sp, #128]
 1492 052e 04C9     		ldmia	r1!, {r2}
 1493 0530 2091     		str	r1, [sp, #128]
 1494 0532 1D92     		str	r2, [sp, #116]
 1495 0534 002A     		cmp	r2, #0
 1496 0536 27DB     		blt	.L61
 1497 0538 0023     		mov	r3, #0
 1498 053a 1993     		str	r3, [sp, #100]
 1499              	.L63:
 1500              	.LBB37:
 1501              	.LBB38:
 485:../Source/main.c **** 						if(compare_levels[j] >= 0 && i != j) {
 1502              		.loc 1 485 0
 1503 053c 4648     		ldr	r0, .L116+20
 189:../Source/main.c **** void output_data() {
 1504              		.loc 1 189 0
 1505 053e 9A00     		lsl	r2, r3, #2
 485:../Source/main.c **** 						if(compare_levels[j] >= 0 && i != j) {
 1506              		.loc 1 485 0
 1507 0540 1258     		ldr	r2, [r2, r0]
 1508 0542 002A     		cmp	r2, #0
 1509 0544 0ADB     		blt	.L62
 1510 0546 9E42     		cmp	r6, r3
 1511 0548 08D0     		beq	.L62
 1512              	.LVL118:
 1513              	.LBB39:
 486:../Source/main.c **** 							long diff = abs(compare_levels[j] - level);
 1514              		.loc 1 486 0
 1515 054a 1D99     		ldr	r1, [sp, #116]
 488:../Source/main.c **** 							countDiff++;
 1516              		.loc 1 488 0
 1517 054c 0137     		add	r7, r7, #1
 486:../Source/main.c **** 							long diff = abs(compare_levels[j] - level);
 1518              		.loc 1 486 0
 1519 054e 501A     		sub	r0, r2, r1
 1520 0550 C117     		asr	r1, r0, #31
 1521 0552 4218     		add	r2, r0, r1
 1522              	.LVL119:
 487:../Source/main.c **** 							sumDiff += diff;
 1523              		.loc 1 487 0
 1524 0554 1998     		ldr	r0, [sp, #100]
 486:../Source/main.c **** 							long diff = abs(compare_levels[j] - level);
 1525              		.loc 1 486 0
 1526 0556 4A40     		eor	r2, r1
 487:../Source/main.c **** 							sumDiff += diff;
 1527              		.loc 1 487 0
 1528 0558 8118     		add	r1, r0, r2
 1529 055a 1991     		str	r1, [sp, #100]
 1530              	.LVL120:
 1531              	.L62:
 1532              	.LBE39:
 484:../Source/main.c **** 					for(int j=0; j<COMPARE_LEVELS; j++) {
 1533              		.loc 1 484 0
 1534 055c 0133     		add	r3, r3, #1
 1535              	.LVL121:
 1536 055e 062B     		cmp	r3, #6
 1537 0560 ECD1     		bne	.L63
 1538              	.LBE38:
 492:../Source/main.c **** 					if(countDiff && (minDiff == -1 || (sumDiff/countDiff) < minDiff)) {
 1539              		.loc 1 492 0
 1540 0562 002F     		cmp	r7, #0
 1541 0564 10D0     		beq	.L61
 492:../Source/main.c **** 					if(countDiff && (minDiff == -1 || (sumDiff/countDiff) < minDiff)) {
 1542              		.loc 1 492 0 is_stmt 0 discriminator 1
 1543 0566 1C9B     		ldr	r3, [sp, #112]
 1544              	.LVL122:
 1545 0568 591C     		add	r1, r3, #1
 1546 056a 06D0     		beq	.L64
 1547 056c 1998     		ldr	r0, [sp, #100]
 1548 056e 391C     		mov	r1, r7
 1549 0570 FFF7FEFF 		bl	__aeabi_idiv
 1550 0574 1C9A     		ldr	r2, [sp, #112]
 1551 0576 9042     		cmp	r0, r2
 1552 0578 06DA     		bge	.L61
 1553              	.L64:
 1554              	.LVL123:
 494:../Source/main.c **** 						minDiff = (sumDiff/countDiff);
 1555              		.loc 1 494 0 is_stmt 1
 1556 057a 1998     		ldr	r0, [sp, #100]
 1557 057c 391C     		mov	r1, r7
 1558 057e FFF7FEFF 		bl	__aeabi_idiv
 1559 0582 1C90     		str	r0, [sp, #112]
 1560              	.LVL124:
 1561 0584 1D98     		ldr	r0, [sp, #116]
 1562              	.LVL125:
 1563 0586 1890     		str	r0, [sp, #96]
 1564              	.LVL126:
 1565              	.L61:
 1566              	.LBE37:
 479:../Source/main.c **** 			for(int i=0; i<COMPARE_LEVELS; i++) {
 1567              		.loc 1 479 0
 1568 0588 0136     		add	r6, r6, #1
 1569              	.LVL127:
 1570 058a 062E     		cmp	r6, #6
 1571 058c CED1     		bne	.L65
 1572              	.LBE36:
 499:../Source/main.c **** 			if(minDiffLevel >= 0) {
 1573              		.loc 1 499 0
 1574 058e 189F     		ldr	r7, [sp, #96]
 1575              	.LVL128:
 1576 0590 7E1C     		add	r6, r7, #1
 1577 0592 3FD1     		bne	.L92
 1578              	.LVL129:
 1579 0594 64E0     		b	.L58
 1580              	.LVL130:
 1581              	.L59:
 1582              	.LBE35:
 505:../Source/main.c **** 			step = 3;
 1583              		.loc 1 505 0
 1584 0596 0324     		mov	r4, #3
 503:../Source/main.c **** 		} else if(g_config.filterMode == DIRECT_MODE) {
 1585              		.loc 1 503 0
 1586 0598 042B     		cmp	r3, #4
 1587 059a 61D0     		beq	.L58
 506:../Source/main.c **** 		} else if(g_config.filterMode == MIN_MODE) {
 1588              		.loc 1 506 0
 1589 059c A342     		cmp	r3, r4
 1590 059e 0AD1     		bne	.L66
 1591              	.LVL131:
 509:../Source/main.c **** 			if(g_appStats.fuelLevelMinDiff != -1) {
 1592              		.loc 1 509 0
 1593 05a0 2B4A     		ldr	r2, .L116+12
 1594 05a2 536C     		ldr	r3, [r2, #68]
 1595 05a4 5F1C     		add	r7, r3, #1
 1596 05a6 38D1     		bne	.L94
 512:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 1597              		.loc 1 512 0
 1598 05a8 536B     		ldr	r3, [r2, #52]
 508:../Source/main.c **** 			step = 4;
 1599              		.loc 1 508 0
 1600 05aa 0424     		mov	r4, #4
 512:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 1601              		.loc 1 512 0
 1602 05ac 581C     		add	r0, r3, #1
 1603 05ae 57D0     		beq	.L58
 1604 05b0 1D1C     		mov	r5, r3
 1605              	.LVL132:
 513:../Source/main.c **** 				step = 42;
 1606              		.loc 1 513 0
 1607 05b2 2A24     		mov	r4, #42
 1608 05b4 54E0     		b	.L58
 1609              	.LVL133:
 1610              	.L66:
 516:../Source/main.c **** 		} else if(g_config.filterMode == ACCERLATE_MODE_2) {
 1611              		.loc 1 516 0
 1612 05b6 052B     		cmp	r3, #5
 1613 05b8 13D1     		bne	.L67
 1614              	.LVL134:
 518:../Source/main.c **** 			if(g_appStats.fuelLevel3DSame != -1) {
 1615              		.loc 1 518 0
 1616 05ba 254A     		ldr	r2, .L116+12
 1617 05bc 116C     		ldr	r1, [r2, #64]
 1618 05be 4C1C     		add	r4, r1, #1
 1619 05c0 2ED1     		bne	.L96
 521:../Source/main.c **** 			} else if(g_appStats.fuelLevel3DMin != -1) {
 1620              		.loc 1 521 0
 1621 05c2 D16B     		ldr	r1, [r2, #60]
 1622 05c4 4E1C     		add	r6, r1, #1
 1623 05c6 2ED1     		bne	.L97
 524:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 1624              		.loc 1 524 0
 1625 05c8 916B     		ldr	r1, [r2, #56]
 1626 05ca 4F1C     		add	r7, r1, #1
 1627 05cc 2ED1     		bne	.L98
 527:../Source/main.c **** 			} else if(g_appStats.fuelLevelMinDiff != -1) {
 1628              		.loc 1 527 0
 1629 05ce 516C     		ldr	r1, [r2, #68]
 1630 05d0 481C     		add	r0, r1, #1
 1631 05d2 2ED1     		bne	.L99
 530:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 1632              		.loc 1 530 0
 1633 05d4 526B     		ldr	r2, [r2, #52]
 517:../Source/main.c **** 			step = 5;
 1634              		.loc 1 517 0
 1635 05d6 1C1C     		mov	r4, r3
 530:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 1636              		.loc 1 530 0
 1637 05d8 511C     		add	r1, r2, #1
 1638 05da 41D0     		beq	.L58
 1639 05dc 151C     		mov	r5, r2
 1640              	.LVL135:
 531:../Source/main.c **** 				step = 55;
 1641              		.loc 1 531 0
 1642 05de 3724     		mov	r4, #55
 1643 05e0 3EE0     		b	.L58
 1644              	.LVL136:
 1645              	.L67:
 432:../Source/main.c **** 		int step = 0;
 1646              		.loc 1 432 0
 1647 05e2 0024     		mov	r4, #0
 534:../Source/main.c **** 		} else if(g_config.filterMode == ACCERLATE_MODE) {
 1648              		.loc 1 534 0
 1649 05e4 062B     		cmp	r3, #6
 1650 05e6 3BD1     		bne	.L58
 1651              	.LVL137:
 536:../Source/main.c **** 			if(g_appStats.fuelLevel3DSame != -1) {
 1652              		.loc 1 536 0
 1653 05e8 194A     		ldr	r2, .L116+12
 1654 05ea 116C     		ldr	r1, [r2, #64]
 1655 05ec 4C1C     		add	r4, r1, #1
 1656 05ee 23D1     		bne	.L102
 539:../Source/main.c **** 			} else if(g_appStats.fuelLevel3DMin != -1) {
 1657              		.loc 1 539 0
 1658 05f0 D16B     		ldr	r1, [r2, #60]
 1659 05f2 4E1C     		add	r6, r1, #1
 1660 05f4 23D1     		bne	.L103
 542:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 1661              		.loc 1 542 0
 1662 05f6 916B     		ldr	r1, [r2, #56]
 1663 05f8 4F1C     		add	r7, r1, #1
 1664 05fa 2FD1     		bne	.L104
 545:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 1665              		.loc 1 545 0
 1666 05fc 526B     		ldr	r2, [r2, #52]
 535:../Source/main.c **** 			step = 6;
 1667              		.loc 1 535 0
 1668 05fe 1C1C     		mov	r4, r3
 545:../Source/main.c **** 			} else if(g_appStats.fuelLevelAvg != -1) {
 1669              		.loc 1 545 0
 1670 0600 501C     		add	r0, r2, #1
 1671 0602 2DD0     		beq	.L58
 1672 0604 151C     		mov	r5, r2
 1673              	.LVL138:
 1674 0606 2AE0     		b	.L113
 1675              	.LVL139:
 1676              	.L84:
 437:../Source/main.c **** 			if(g_appStats.fuelLevel3DMin != -1) {
 1677              		.loc 1 437 0
 1678 0608 0D1C     		mov	r5, r1
 1679              	.LVL140:
 439:../Source/main.c **** 				step = 11;
 1680              		.loc 1 439 0
 1681 060a 0B24     		mov	r4, #11
 1682 060c 28E0     		b	.L58
 1683              	.LVL141:
 1684              	.L85:
 440:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 1685              		.loc 1 440 0
 1686 060e 0D1C     		mov	r5, r1
 1687              	.LVL142:
 442:../Source/main.c **** 				step = 12;
 1688              		.loc 1 442 0
 1689 0610 0C24     		mov	r4, #12
 1690 0612 25E0     		b	.L58
 1691              	.LVL143:
 1692              	.L92:
 1693              	.LBB40:
 499:../Source/main.c **** 			if(minDiffLevel >= 0) {
 1694              		.loc 1 499 0
 1695 0614 189D     		ldr	r5, [sp, #96]
 1696              	.LVL144:
 500:../Source/main.c **** 				step = 25;
 1697              		.loc 1 500 0
 1698 0616 1924     		mov	r4, #25
 1699              	.LVL145:
 1700 0618 22E0     		b	.L58
 1701              	.LVL146:
 1702              	.L94:
 1703              	.LBE40:
 509:../Source/main.c **** 			if(g_appStats.fuelLevelMinDiff != -1) {
 1704              		.loc 1 509 0
 1705 061a 1D1C     		mov	r5, r3
 1706              	.LVL147:
 511:../Source/main.c **** 				step = 41;
 1707              		.loc 1 511 0
 1708 061c 2924     		mov	r4, #41
 1709 061e 1FE0     		b	.L58
 1710              	.LVL148:
 1711              	.L96:
 518:../Source/main.c **** 			if(g_appStats.fuelLevel3DSame != -1) {
 1712              		.loc 1 518 0
 1713 0620 0D1C     		mov	r5, r1
 1714              	.LVL149:
 519:../Source/main.c **** 				step = 51;
 1715              		.loc 1 519 0
 1716 0622 3324     		mov	r4, #51
 1717 0624 1CE0     		b	.L58
 1718              	.LVL150:
 1719              	.L97:
 521:../Source/main.c **** 			} else if(g_appStats.fuelLevel3DMin != -1) {
 1720              		.loc 1 521 0
 1721 0626 0D1C     		mov	r5, r1
 1722              	.LVL151:
 522:../Source/main.c **** 				step = 52;
 1723              		.loc 1 522 0
 1724 0628 3424     		mov	r4, #52
 1725 062a 19E0     		b	.L58
 1726              	.LVL152:
 1727              	.L98:
 524:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 1728              		.loc 1 524 0
 1729 062c 0D1C     		mov	r5, r1
 1730              	.LVL153:
 525:../Source/main.c **** 				step = 53;
 1731              		.loc 1 525 0
 1732 062e 3524     		mov	r4, #53
 1733 0630 16E0     		b	.L58
 1734              	.LVL154:
 1735              	.L99:
 527:../Source/main.c **** 			} else if(g_appStats.fuelLevelMinDiff != -1) {
 1736              		.loc 1 527 0
 1737 0632 0D1C     		mov	r5, r1
 1738              	.LVL155:
 529:../Source/main.c **** 				step = 54;
 1739              		.loc 1 529 0
 1740 0634 3624     		mov	r4, #54
 1741 0636 13E0     		b	.L58
 1742              	.LVL156:
 1743              	.L102:
 536:../Source/main.c **** 			if(g_appStats.fuelLevel3DSame != -1) {
 1744              		.loc 1 536 0
 1745 0638 0D1C     		mov	r5, r1
 1746              	.LVL157:
 537:../Source/main.c **** 				step = 61;
 1747              		.loc 1 537 0
 1748 063a 3D24     		mov	r4, #61
 1749 063c 10E0     		b	.L58
 1750              	.LVL158:
 1751              	.L103:
 539:../Source/main.c **** 			} else if(g_appStats.fuelLevel3DMin != -1) {
 1752              		.loc 1 539 0
 1753 063e 0D1C     		mov	r5, r1
 1754              	.LVL159:
 540:../Source/main.c **** 				step = 62;
 1755              		.loc 1 540 0
 1756 0640 3E24     		mov	r4, #62
 1757 0642 0DE0     		b	.L58
 1758              	.L117:
 1759              		.align	2
 1760              	.L116:
 1761 0644 00000000 		.word	avrFreq3D
 1762 0648 00000000 		.word	.LANCHOR0
 1763 064c 00000000 		.word	same3DFreq
 1764 0650 00000000 		.word	g_appStats
 1765 0654 00000000 		.word	g_config
 1766 0658 00000000 		.word	.LANCHOR7
 1767              	.LVL160:
 1768              	.L104:
 542:../Source/main.c **** 			} else if(g_appStats.fuelLevel3D != -1) {
 1769              		.loc 1 542 0
 1770 065c 0D1C     		mov	r5, r1
 1771              	.LVL161:
 1772              	.L113:
 543:../Source/main.c **** 				step = 63;
 1773              		.loc 1 543 0
 1774 065e 3F24     		mov	r4, #63
 1775              	.LVL162:
 1776              	.L58:
 553:../Source/main.c **** 		if(ulSecCount >= (SKS_TRUNC_ERROR_SEC * 2)) {
 1777              		.loc 1 553 0
 1778 0660 5E4E     		ldr	r6, .L118
 1779 0662 3168     		ldr	r1, [r6]
 1780 0664 0929     		cmp	r1, #9
 1781 0666 00D8     		bhi	.LCB1671
 1782 0668 B5E0     		b	.L27	@long jump
 1783              	.LCB1671:
 554:../Source/main.c **** 			if(g_appStats.debugOn == 1) {
 1784              		.loc 1 554 0
 1785 066a 5D4B     		ldr	r3, .L118+4
 1786 066c 1A1C     		mov	r2, r3
 1787 066e 4D32     		add	r2, r2, #77
 1788 0670 1278     		ldrb	r2, [r2]
 1789 0672 012A     		cmp	r2, #1
 1790 0674 32D1     		bne	.L68
 555:../Source/main.c **** 				if(ulSecCount != lastSentToTracker) {
 1791              		.loc 1 555 0
 1792 0676 5B4F     		ldr	r7, .L118+8
 1793 0678 3068     		ldr	r0, [r6]
 1794 067a 3968     		ldr	r1, [r7]
 1795 067c 8842     		cmp	r0, r1
 1796 067e 00D1     		bne	.LCB1682
 1797 0680 A9E0     		b	.L27	@long jump
 1798              	.LCB1682:
 556:../Source/main.c **** 					xprintf("F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%d FU=%u EM=%u x=%d y=%d z=%d idx3D
 1799              		.loc 1 556 0
 1800 0682 0095     		str	r5, [sp]
 1801 0684 DA6B     		ldr	r2, [r3, #60]
 1802 0686 0192     		str	r2, [sp, #4]
 1803 0688 996B     		ldr	r1, [r3, #56]
 1804 068a 0291     		str	r1, [sp, #8]
 1805 068c 1D6C     		ldr	r5, [r3, #64]
 1806              	.LVL163:
 1807 068e 0395     		str	r5, [sp, #12]
 1808 0690 586B     		ldr	r0, [r3, #52]
 1809 0692 554D     		ldr	r5, .L118+12
 1810 0694 0490     		str	r0, [sp, #16]
 1811 0696 DA6A     		ldr	r2, [r3, #44]
 1812 0698 0592     		str	r2, [sp, #20]
 1813 069a E968     		ldr	r1, [r5, #12]
 1814 069c 1E9A     		ldr	r2, [sp, #120]
 1815 069e 0691     		str	r1, [sp, #24]
 1816 06a0 2869     		ldr	r0, [r5, #16]
 1817 06a2 1F99     		ldr	r1, [sp, #124]
 1818 06a4 1A9D     		ldr	r5, [sp, #104]
 1819 06a6 0790     		str	r0, [sp, #28]
 1820 06a8 5048     		ldr	r0, .L118+16
 1821 06aa 0995     		str	r5, [sp, #36]
 1822 06ac 0A91     		str	r1, [sp, #40]
 1823 06ae 0892     		str	r2, [sp, #32]
 1824 06b0 0278     		ldrb	r2, [r0]
 1825 06b2 179D     		ldr	r5, [sp, #92]
 1826 06b4 1B99     		ldr	r1, [sp, #108]
 1827 06b6 0B92     		str	r2, [sp, #44]
 1828 06b8 0C95     		str	r5, [sp, #48]
 1829 06ba 0D91     		str	r1, [sp, #52]
 1830 06bc 0E94     		str	r4, [sp, #56]
 1831 06be 186E     		ldr	r0, [r3, #96]
 559:../Source/main.c **** 							roll, pitch, yaw, idx3D, count3D, diff3D, step, g_appStats.internalTemp, g_appStats.errorSta
 1832              		.loc 1 559 0
 1833 06c0 1A1C     		mov	r2, r3
 556:../Source/main.c **** 					xprintf("F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%d FU=%u EM=%u x=%d y=%d z=%d idx3D
 1834              		.loc 1 556 0
 1835 06c2 0F90     		str	r0, [sp, #60]
 559:../Source/main.c **** 							roll, pitch, yaw, idx3D, count3D, diff3D, step, g_appStats.internalTemp, g_appStats.errorSta
 1836              		.loc 1 559 0
 1837 06c4 6532     		add	r2, r2, #101
 556:../Source/main.c **** 					xprintf("F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%d FU=%u EM=%u x=%d y=%d z=%d idx3D
 1838              		.loc 1 556 0
 1839 06c6 1478     		ldrb	r4, [r2]
 1840              	.LVL164:
 1841 06c8 1094     		str	r4, [sp, #64]
 1842 06ca 196A     		ldr	r1, [r3, #32]
 1843 06cc 5A6A     		ldr	r2, [r3, #36]
 1844 06ce 4848     		ldr	r0, .L118+20
 1845 06d0 DB69     		ldr	r3, [r3, #28]
 1846 06d2 FFF7FEFF 		bl	xprintf
 1847              	.LVL165:
 560:../Source/main.c **** 					lastSentToTracker = ulSecCount;
 1848              		.loc 1 560 0
 1849 06d6 3568     		ldr	r5, [r6]
 1850 06d8 3D60     		str	r5, [r7]
 1851 06da 7CE0     		b	.L27
 1852              	.LVL166:
 1853              	.L68:
 563:../Source/main.c **** 				if(g_config.interval && (ulSecCount - lastSentToTracker) >= g_config.interval) {
 1854              		.loc 1 563 0
 1855 06dc 424F     		ldr	r7, .L118+12
 1856 06de B97E     		ldrb	r1, [r7, #26]
 1857 06e0 0029     		cmp	r1, #0
 1858 06e2 78D0     		beq	.L27
 563:../Source/main.c **** 				if(g_config.interval && (ulSecCount - lastSentToTracker) >= g_config.interval) {
 1859              		.loc 1 563 0 is_stmt 0 discriminator 1
 1860 06e4 3768     		ldr	r7, [r6]
 1861 06e6 3F4E     		ldr	r6, .L118+8
 1862 06e8 3068     		ldr	r0, [r6]
 1863 06ea 3E1A     		sub	r6, r7, r0
 1864 06ec 8E42     		cmp	r6, r1
 1865 06ee 72D3     		bcc	.L27
 563:../Source/main.c **** 				if(g_config.interval && (ulSecCount - lastSentToTracker) >= g_config.interval) {
 1866              		.loc 1 563 0
 1867 06f0 EF43     		mvn	r7, r5
 572:../Source/main.c **** 					if(g_appStats.fuelLevelAvg < 0) {
 1868              		.loc 1 572 0 is_stmt 1
 1869 06f2 596B     		ldr	r1, [r3, #52]
 563:../Source/main.c **** 				if(g_config.interval && (ulSecCount - lastSentToTracker) >= g_config.interval) {
 1870              		.loc 1 563 0
 1871 06f4 F817     		asr	r0, r7, #31
 1872 06f6 0540     		and	r5, r0
 1873              	.LVL167:
 572:../Source/main.c **** 					if(g_appStats.fuelLevelAvg < 0) {
 1874              		.loc 1 572 0
 1875 06f8 0029     		cmp	r1, #0
 1876 06fa 01DA     		bge	.L70
 573:../Source/main.c **** 						g_appStats.fuelLevelAvg = 0;
 1877              		.loc 1 573 0
 1878 06fc 0026     		mov	r6, #0
 1879 06fe 5E63     		str	r6, [r3, #52]
 1880              	.L70:
 576:../Source/main.c **** 					if(g_appStats.fuelLevel3DMin < 0) {
 1881              		.loc 1 576 0
 1882 0700 D96B     		ldr	r1, [r3, #60]
 1883 0702 0029     		cmp	r1, #0
 1884 0704 01DA     		bge	.L71
 577:../Source/main.c **** 						g_appStats.fuelLevel3DMin = 0;
 1885              		.loc 1 577 0
 1886 0706 0020     		mov	r0, #0
 1887 0708 D863     		str	r0, [r3, #60]
 1888              	.L71:
 580:../Source/main.c **** 					if(g_appStats.fuelLevel3DSame < 0) {
 1889              		.loc 1 580 0
 1890 070a 1F6C     		ldr	r7, [r3, #64]
 1891              	.LVL168:
 1892 070c 002F     		cmp	r7, #0
 1893 070e 01DA     		bge	.L72
 581:../Source/main.c **** 						g_appStats.fuelLevel3DSame = 0;
 1894              		.loc 1 581 0
 1895 0710 0026     		mov	r6, #0
 1896 0712 1E64     		str	r6, [r3, #64]
 1897              	.L72:
 584:../Source/main.c **** 					if(g_appStats.fuelLevel3D < 0) {
 1898              		.loc 1 584 0
 1899 0714 996B     		ldr	r1, [r3, #56]
 1900 0716 0029     		cmp	r1, #0
 1901 0718 01DA     		bge	.L73
 585:../Source/main.c **** 						g_appStats.fuelLevel3D = 0;
 1902              		.loc 1 585 0
 1903 071a 0020     		mov	r0, #0
 1904 071c 9863     		str	r0, [r3, #56]
 1905              	.L73:
 1906 071e 304B     		ldr	r3, .L118+4
 589:../Source/main.c **** 						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=
 1907              		.loc 1 589 0
 1908 0720 0095     		str	r5, [sp]
 588:../Source/main.c **** 					if(g_appStats.debugOn == 99) {
 1909              		.loc 1 588 0
 1910 0722 632A     		cmp	r2, #99
 1911 0724 2DD1     		bne	.L74
 589:../Source/main.c **** 						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=
 1912              		.loc 1 589 0
 1913 0726 9D6B     		ldr	r5, [r3, #56]
 1914 0728 1E9A     		ldr	r2, [sp, #120]
 1915 072a 0195     		str	r5, [sp, #4]
 1916 072c 586B     		ldr	r0, [r3, #52]
 1917 072e 1A9D     		ldr	r5, [sp, #104]
 1918 0730 0290     		str	r0, [sp, #8]
 1919 0732 D96A     		ldr	r1, [r3, #44]
 1920 0734 1F98     		ldr	r0, [sp, #124]
 1921 0736 0391     		str	r1, [sp, #12]
 1922 0738 DE6B     		ldr	r6, [r3, #60]
 1923 073a 2C49     		ldr	r1, .L118+16
 1924 073c 0496     		str	r6, [sp, #16]
 1925 073e 1F6C     		ldr	r7, [r3, #64]
 1926 0740 0692     		str	r2, [sp, #24]
 1927 0742 0597     		str	r7, [sp, #20]
 1928 0744 0795     		str	r5, [sp, #28]
 1929 0746 0890     		str	r0, [sp, #32]
 1930 0748 0E78     		ldrb	r6, [r1]
 1931 074a 179F     		ldr	r7, [sp, #92]
 1932 074c 1B9A     		ldr	r2, [sp, #108]
 1933 074e 0996     		str	r6, [sp, #36]
 592:../Source/main.c **** 								idx3D, count3D, diff3D, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.d
 1934              		.loc 1 592 0
 1935 0750 254E     		ldr	r6, .L118+12
 589:../Source/main.c **** 						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=
 1936              		.loc 1 589 0
 1937 0752 0A97     		str	r7, [sp, #40]
 1938 0754 0B92     		str	r2, [sp, #44]
 1939 0756 B58A     		ldrh	r5, [r6, #20]
 1940 0758 0C95     		str	r5, [sp, #48]
 1941 075a F07D     		ldrb	r0, [r6, #23]
 592:../Source/main.c **** 								idx3D, count3D, diff3D, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.d
 1942              		.loc 1 592 0
 1943 075c 1D1C     		mov	r5, r3
 589:../Source/main.c **** 						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=
 1944              		.loc 1 589 0
 1945 075e 0D90     		str	r0, [sp, #52]
 1946 0760 317E     		ldrb	r1, [r6, #24]
 592:../Source/main.c **** 								idx3D, count3D, diff3D, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.d
 1947              		.loc 1 592 0
 1948 0762 6535     		add	r5, r5, #101
 589:../Source/main.c **** 						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=
 1949              		.loc 1 589 0
 1950 0764 0E91     		str	r1, [sp, #56]
 1951 0766 777E     		ldrb	r7, [r6, #25]
 1952 0768 1094     		str	r4, [sp, #64]
 1953 076a 0F97     		str	r7, [sp, #60]
 1954 076c 1A6E     		ldr	r2, [r3, #96]
 1955 076e 1192     		str	r2, [sp, #68]
 1956 0770 2C78     		ldrb	r4, [r5]
 1957              	.LVL169:
 1958 0772 2048     		ldr	r0, .L118+24
 1959 0774 1294     		str	r4, [sp, #72]
 1960 0776 196A     		ldr	r1, [r3, #32]
 1961 0778 5A6A     		ldr	r2, [r3, #36]
 1962 077a DB69     		ldr	r3, [r3, #28]
 1963 077c FFF7FEFF 		bl	xprintf
 1964              	.LVL170:
 1965 0780 25E0     		b	.L75
 1966              	.LVL171:
 1967              	.L74:
 594:../Source/main.c **** 						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=
 1968              		.loc 1 594 0
 1969 0782 996B     		ldr	r1, [r3, #56]
 1970 0784 1E98     		ldr	r0, [sp, #120]
 1971 0786 0191     		str	r1, [sp, #4]
 1972 0788 5E6B     		ldr	r6, [r3, #52]
 1973 078a 1A99     		ldr	r1, [sp, #104]
 1974 078c 0296     		str	r6, [sp, #8]
 1975 078e DF6A     		ldr	r7, [r3, #44]
 1976 0790 1F9E     		ldr	r6, [sp, #124]
 1977 0792 0397     		str	r7, [sp, #12]
 1978 0794 DA6B     		ldr	r2, [r3, #60]
 1979 0796 0492     		str	r2, [sp, #16]
 1980 0798 1D6C     		ldr	r5, [r3, #64]
 1981 079a 0896     		str	r6, [sp, #32]
 1982 079c 0595     		str	r5, [sp, #20]
 1983 079e 0690     		str	r0, [sp, #24]
 1984 07a0 0791     		str	r1, [sp, #28]
 1985 07a2 1F6E     		ldr	r7, [r3, #96]
 598:../Source/main.c **** 								g_appStats.internalTemp, g_appStats.errorState, g_config.fullValue, g_config.emptyValue, g_
 1986              		.loc 1 598 0
 1987 07a4 1A1C     		mov	r2, r3
 594:../Source/main.c **** 						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=
 1988              		.loc 1 594 0
 1989 07a6 0997     		str	r7, [sp, #36]
 598:../Source/main.c **** 								g_appStats.internalTemp, g_appStats.errorState, g_config.fullValue, g_config.emptyValue, g_
 1990              		.loc 1 598 0
 1991 07a8 6532     		add	r2, r2, #101
 594:../Source/main.c **** 						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=
 1992              		.loc 1 594 0
 1993 07aa 1578     		ldrb	r5, [r2]
 1994 07ac 0E4E     		ldr	r6, .L118+12
 1995 07ae 0A95     		str	r5, [sp, #40]
 1996 07b0 F068     		ldr	r0, [r6, #12]
 1997 07b2 114A     		ldr	r2, .L118+28
 1998 07b4 0B90     		str	r0, [sp, #44]
 1999 07b6 3169     		ldr	r1, [r6, #16]
 2000 07b8 1048     		ldr	r0, .L118+32
 2001 07ba 0C91     		str	r1, [sp, #48]
 2002 07bc F77D     		ldrb	r7, [r6, #23]
 2003 07be 0E92     		str	r2, [sp, #56]
 2004 07c0 0D97     		str	r7, [sp, #52]
 2005 07c2 0F94     		str	r4, [sp, #60]
 2006 07c4 196A     		ldr	r1, [r3, #32]
 2007 07c6 5A6A     		ldr	r2, [r3, #36]
 2008 07c8 DB69     		ldr	r3, [r3, #28]
 2009 07ca FFF7FEFF 		bl	xprintf
 2010              	.LVL172:
 2011              	.L75:
 601:../Source/main.c **** 					lastSentToTracker = ulSecCount;
 2012              		.loc 1 601 0
 2013 07ce 0348     		ldr	r0, .L118
 2014 07d0 044B     		ldr	r3, .L118+8
 2015 07d2 0468     		ldr	r4, [r0]
 2016 07d4 1C60     		str	r4, [r3]
 2017              	.LVL173:
 2018              	.L27:
 2019              	.LBE16:
 606:../Source/main.c **** }
 2020              		.loc 1 606 0
 2021 07d6 2DB0     		add	sp, sp, #180
 2022              		@ sp needed for prologue
 2023 07d8 F0BD     		pop	{r4, r5, r6, r7, pc}
 2024              	.L119:
 2025 07da C046     		.align	2
 2026              	.L118:
 2027 07dc 00000000 		.word	.LANCHOR0
 2028 07e0 00000000 		.word	g_appStats
 2029 07e4 00000000 		.word	.LANCHOR8
 2030 07e8 00000000 		.word	g_config
 2031 07ec 00000000 		.word	.LANCHOR6
 2032 07f0 00000000 		.word	.LC24
 2033 07f4 7A000000 		.word	.LC26
 2034 07f8 9B010000 		.word	.LC30
 2035 07fc 16010000 		.word	.LC28
 2036              		.cfi_endproc
 2037              	.LFE34:
 2039              		.section	.text.process_command_from_pc,"ax",%progbits
 2040              		.align	1
 2041              		.global	process_command_from_pc
 2042              		.code	16
 2043              		.thumb_func
 2045              	process_command_from_pc:
 2046              	.LFB35:
 623:../Source/main.c **** void process_command_from_pc(void) {
 2047              		.loc 1 623 0
 2048              		.cfi_startproc
 2049 0000 08B5     		push	{r3, lr}
 2050              	.LCFI5:
 2051              		.cfi_def_cfa_offset 8
 2052              		.cfi_offset 3, -8
 2053              		.cfi_offset 14, -4
 624:../Source/main.c ****     if(buff_cmd[0] == '*') {
 2054              		.loc 1 624 0
 2055 0002 0549     		ldr	r1, .L122
 2056 0004 0B78     		ldrb	r3, [r1]
 2057 0006 2A2B     		cmp	r3, #42
 2058 0008 04D1     		bne	.L120
 625:../Source/main.c **** 		server_on_command(SKS_CMD_SOURCE_COM1, buff_cmd, sizeof(buff_cmd));
 2059              		.loc 1 625 0
 2060 000a 0120     		mov	r0, #1
 2061 000c 8022     		mov	r2, #128
 2062 000e 8240     		lsl	r2, r2, r0
 2063 0010 FFF7FEFF 		bl	server_on_command
 2064              	.L120:
 2065              		@ sp needed for prologue
 633:../Source/main.c **** }
 2066              		.loc 1 633 0
 2067 0014 08BD     		pop	{r3, pc}
 2068              	.L123:
 2069 0016 C046     		.align	2
 2070              	.L122:
 2071 0018 00000000 		.word	.LANCHOR9
 2072              		.cfi_endproc
 2073              	.LFE35:
 2075              		.global	__aeabi_f2d
 2076              		.global	__aeabi_d2uiz
 2077              		.global	__aeabi_ui2d
 2078              		.global	__aeabi_dmul
 2079              		.global	__aeabi_dcmpgt
 2080              		.global	__aeabi_dcmplt
 2081              		.section	.text.handlerSensorData,"ax",%progbits
 2082              		.align	1
 2083              		.global	handlerSensorData
 2084              		.code	16
 2085              		.thumb_func
 2087              	handlerSensorData:
 2088              	.LFB36:
 640:../Source/main.c **** void handlerSensorData(void) {
 2089              		.loc 1 640 0
 2090              		.cfi_startproc
 2091 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 2092              	.LCFI6:
 2093              		.cfi_def_cfa_offset 32
 2094              		.cfi_offset 0, -32
 2095              		.cfi_offset 1, -28
 2096              		.cfi_offset 2, -24
 2097              		.cfi_offset 4, -20
 2098              		.cfi_offset 5, -16
 2099              		.cfi_offset 6, -12
 2100              		.cfi_offset 7, -8
 2101              		.cfi_offset 14, -4
 641:../Source/main.c **** 	if(freqIdx < MAX_FREQ_AVERAGE && g_appStats.tim15Freq) {
 2102              		.loc 1 641 0
 2103 0002 674B     		ldr	r3, .L153+16
 2104 0004 1A68     		ldr	r2, [r3]
 2105 0006 042A     		cmp	r2, #4
 2106 0008 08DC     		bgt	.L125
 641:../Source/main.c **** 	if(freqIdx < MAX_FREQ_AVERAGE && g_appStats.tim15Freq) {
 2107              		.loc 1 641 0 is_stmt 0 discriminator 1
 2108 000a 6649     		ldr	r1, .L153+20
 2109 000c C969     		ldr	r1, [r1, #28]
 2110 000e 0029     		cmp	r1, #0
 2111 0010 04D0     		beq	.L125
 642:../Source/main.c **** 		avrTimFreq[freqIdx] = g_appStats.tim15Freq;
 2112              		.loc 1 642 0 is_stmt 1
 2113 0012 6548     		ldr	r0, .L153+24
 2114 0014 9400     		lsl	r4, r2, #2
 2115 0016 2150     		str	r1, [r4, r0]
 643:../Source/main.c **** 		freqIdx++;
 2116              		.loc 1 643 0
 2117 0018 0132     		add	r2, r2, #1
 2118 001a 00E0     		b	.L151
 2119              	.L125:
 645:../Source/main.c **** 		freqIdx = 0;
 2120              		.loc 1 645 0
 2121 001c 0022     		mov	r2, #0
 2122              	.L151:
 2123 001e 1A60     		str	r2, [r3]
 648:../Source/main.c **** 	if(freqIdx >= MAX_FREQ_AVERAGE) {
 2124              		.loc 1 648 0
 2125 0020 1A68     		ldr	r2, [r3]
 2126 0022 042A     		cmp	r2, #4
 2127 0024 01DD     		ble	.L127
 649:../Source/main.c **** 		freqIdx = 0;
 2128              		.loc 1 649 0
 2129 0026 0025     		mov	r5, #0
 2130 0028 1D60     		str	r5, [r3]
 2131              	.L127:
 2132              	.LVL174:
 2133 002a 5F4B     		ldr	r3, .L153+24
 654:../Source/main.c **** 	int count = 0;
 2134              		.loc 1 654 0
 2135 002c 0025     		mov	r5, #0
 640:../Source/main.c **** void handlerSensorData(void) {
 2136              		.loc 1 640 0
 2137 002e 191C     		mov	r1, r3
 2138 0030 1431     		add	r1, r1, #20
 652:../Source/main.c **** 	uint32_t sumFreq = 0;
 2139              		.loc 1 652 0
 2140 0032 281C     		mov	r0, r5
 2141              	.LVL175:
 2142              	.L129:
 2143              	.LBB41:
 656:../Source/main.c **** 		if(avrTimFreq[i]) {
 2144              		.loc 1 656 0
 2145 0034 04CB     		ldmia	r3!, {r2}
 2146 0036 002A     		cmp	r2, #0
 2147 0038 01D0     		beq	.L128
 657:../Source/main.c **** 			sumFreq += avrTimFreq[i];
 2148              		.loc 1 657 0
 2149 003a 8018     		add	r0, r0, r2
 2150              	.LVL176:
 658:../Source/main.c **** 			count++;
 2151              		.loc 1 658 0
 2152 003c 0135     		add	r5, r5, #1
 2153              	.LVL177:
 2154              	.L128:
 655:../Source/main.c **** 	for(int i=0; i<MAX_FREQ_AVERAGE; i++) {
 2155              		.loc 1 655 0
 2156 003e 8B42     		cmp	r3, r1
 2157 0040 F8D1     		bne	.L129
 2158              	.LBE41:
 662:../Source/main.c **** 	if(count > 0) {
 2159              		.loc 1 662 0
 2160 0042 002D     		cmp	r5, #0
 2161 0044 1CD0     		beq	.L130
 663:../Source/main.c **** 		avrFreq = sumFreq/count;
 2162              		.loc 1 663 0
 2163 0046 291C     		mov	r1, r5
 2164 0048 FFF7FEFF 		bl	__aeabi_uidiv
 2165              	.LVL178:
 670:../Source/main.c **** 	if(avrFreq && g_appStats.tim15Freq) {
 2166              		.loc 1 670 0
 2167 004c 051E     		sub	r5, r0, #0
 2168              	.LVL179:
 2169 004e 17D0     		beq	.L130
 670:../Source/main.c **** 	if(avrFreq && g_appStats.tim15Freq) {
 2170              		.loc 1 670 0 is_stmt 0 discriminator 1
 2171 0050 544E     		ldr	r6, .L153+20
 2172 0052 F369     		ldr	r3, [r6, #28]
 2173 0054 002B     		cmp	r3, #0
 2174 0056 13D0     		beq	.L130
 671:../Source/main.c **** 		if(!g_config.disableEma) {
 2175              		.loc 1 671 0 is_stmt 1
 2176 0058 5449     		ldr	r1, .L153+28
 2177 005a CF7E     		ldrb	r7, [r1, #27]
 2178 005c 002F     		cmp	r7, #0
 2179 005e 0DD1     		bne	.L131
 672:../Source/main.c **** 			addStock((float)avrFreq, &SensorEMA10);
 2180              		.loc 1 672 0
 2181 0060 281C     		mov	r0, r5
 2182 0062 FFF7FEFF 		bl	__aeabi_ui2f
 2183 0066 FFF7FEFF 		bl	__aeabi_f2d
 2184 006a 514C     		ldr	r4, .L153+32
 2185 006c 221C     		mov	r2, r4
 2186 006e FFF7FEFF 		bl	addStock
 673:../Source/main.c **** 			avrFreq = SensorEMA10.lastEMA;;
 2187              		.loc 1 673 0
 2188 0072 A068     		ldr	r0, [r4, #8]
 2189 0074 E168     		ldr	r1, [r4, #12]
 2190 0076 FFF7FEFF 		bl	__aeabi_d2uiz
 2191 007a 051C     		mov	r5, r0
 2192              	.LVL180:
 2193              	.L131:
 675:../Source/main.c **** 		g_appStats.frequency = avrFreq; //use for set FULL and EMPTY this Frequency
 2194              		.loc 1 675 0
 2195 007c 4948     		ldr	r0, .L153+20
 2196 007e 0562     		str	r5, [r0, #32]
 2197              	.LVL181:
 2198              	.L130:
 680:../Source/main.c **** 	if(!g_appStats.tim15Freq) {
 2199              		.loc 1 680 0
 2200 0080 484A     		ldr	r2, .L153+20
 681:../Source/main.c **** 		error = ERROR_STATE_ZERO;
 2201              		.loc 1 681 0
 2202 0082 0123     		mov	r3, #1
 680:../Source/main.c **** 	if(!g_appStats.tim15Freq) {
 2203              		.loc 1 680 0
 2204 0084 D469     		ldr	r4, [r2, #28]
 2205 0086 002C     		cmp	r4, #0
 2206 0088 37D0     		beq	.L132
 682:../Source/main.c **** 	} else if(g_config.emptyValue && avrFreq > (g_config.emptyValue * 1.1)) {
 2207              		.loc 1 682 0
 2208 008a 484B     		ldr	r3, .L153+28
 2209 008c 1E69     		ldr	r6, [r3, #16]
 2210 008e 002E     		cmp	r6, #0
 2211 0090 14D0     		beq	.L133
 682:../Source/main.c **** 	} else if(g_config.emptyValue && avrFreq > (g_config.emptyValue * 1.1)) {
 2212              		.loc 1 682 0 is_stmt 0 discriminator 1
 2213 0092 281C     		mov	r0, r5
 2214 0094 FFF7FEFF 		bl	__aeabi_ui2d
 2215 0098 0090     		str	r0, [sp]
 2216 009a 0191     		str	r1, [sp, #4]
 2217 009c 301C     		mov	r0, r6
 2218 009e FFF7FEFF 		bl	__aeabi_ui2d
 2219 00a2 3C4B     		ldr	r3, .L153+4
 2220 00a4 3A4A     		ldr	r2, .L153
 2221 00a6 FFF7FEFF 		bl	__aeabi_dmul
 2222 00aa 0B1C     		mov	r3, r1
 2223 00ac 021C     		mov	r2, r0
 2224 00ae 0098     		ldr	r0, [sp]
 2225 00b0 0199     		ldr	r1, [sp, #4]
 2226 00b2 FFF7FEFF 		bl	__aeabi_dcmpgt
 683:../Source/main.c **** 		error = ERROR_STATE_OVER_EMPTY;
 2227              		.loc 1 683 0 is_stmt 1 discriminator 1
 2228 00b6 0223     		mov	r3, #2
 682:../Source/main.c **** 	} else if(g_config.emptyValue && avrFreq > (g_config.emptyValue * 1.1)) {
 2229              		.loc 1 682 0 discriminator 1
 2230 00b8 0028     		cmp	r0, #0
 2231 00ba 1ED1     		bne	.L132
 2232              	.L133:
 684:../Source/main.c **** 	} else if(g_config.fullValue && avrFreq < (g_config.fullValue * 0.9)) {
 2233              		.loc 1 684 0
 2234 00bc 3B4F     		ldr	r7, .L153+28
 2235 00be FC68     		ldr	r4, [r7, #12]
 2236 00c0 002C     		cmp	r4, #0
 2237 00c2 17D0     		beq	.L134
 684:../Source/main.c **** 	} else if(g_config.fullValue && avrFreq < (g_config.fullValue * 0.9)) {
 2238              		.loc 1 684 0 is_stmt 0 discriminator 1
 2239 00c4 281C     		mov	r0, r5
 2240 00c6 FFF7FEFF 		bl	__aeabi_ui2d
 2241 00ca 061C     		mov	r6, r0
 2242 00cc 201C     		mov	r0, r4
 2243 00ce 0F1C     		mov	r7, r1
 2244 00d0 FFF7FEFF 		bl	__aeabi_ui2d
 2245 00d4 304A     		ldr	r2, .L153+8
 2246 00d6 314B     		ldr	r3, .L153+12
 2247 00d8 FFF7FEFF 		bl	__aeabi_dmul
 2248 00dc 0B1C     		mov	r3, r1
 2249 00de 021C     		mov	r2, r0
 2250 00e0 391C     		mov	r1, r7
 2251 00e2 301C     		mov	r0, r6
 2252 00e4 FFF7FEFF 		bl	__aeabi_dcmplt
 678:../Source/main.c **** 	ERROR_STATE error = ERROR_STATE_NORMAL;
 2253              		.loc 1 678 0 is_stmt 1 discriminator 1
 2254 00e8 431E     		sub	r3, r0, #1
 2255 00ea 9841     		sbc	r0, r0, r3
 2256 00ec 4042     		neg	r0, r0
 2257 00ee 0323     		mov	r3, #3
 2258 00f0 0340     		and	r3, r0
 2259 00f2 02E0     		b	.L132
 2260              	.L134:
 2261 00f4 7142     		neg	r1, r6
 2262 00f6 7141     		adc	r1, r1, r6
 2263 00f8 8B00     		lsl	r3, r1, #2
 2264              	.L132:
 2265              	.LVL182:
 690:../Source/main.c **** 	g_appStats.errorState = error;
 2266              		.loc 1 690 0
 2267 00fa 2A4E     		ldr	r6, .L153+20
 2268 00fc 6536     		add	r6, r6, #101
 2269 00fe 3370     		strb	r3, [r6]
 692:../Source/main.c **** 	if(error == ERROR_STATE_NORMAL) {
 2270              		.loc 1 692 0
 2271 0100 002B     		cmp	r3, #0
 2272 0102 44D1     		bne	.L124
 693:../Source/main.c **** 		if(avrFreq > g_config.emptyValue) {
 2273              		.loc 1 693 0
 2274 0104 294B     		ldr	r3, .L153+28
 2275              	.LVL183:
 2276 0106 1C69     		ldr	r4, [r3, #16]
 2277 0108 A542     		cmp	r5, r4
 2278 010a 04D8     		bhi	.L137
 2279 010c DA68     		ldr	r2, [r3, #12]
 2280 010e 2C1C     		mov	r4, r5
 2281 0110 9542     		cmp	r5, r2
 2282 0112 00D2     		bcs	.L137
 2283 0114 141C     		mov	r4, r2
 2284              	.L137:
 2285              	.LVL184:
 699:../Source/main.c **** 		if(lastFreg) {
 2286              		.loc 1 699 0
 2287 0116 274D     		ldr	r5, .L153+36
 2288 0118 2868     		ldr	r0, [r5]
 2289 011a 0028     		cmp	r0, #0
 2290 011c 24D0     		beq	.L139
 2291              	.LVL185:
 2292              	.LBB42:
 700:../Source/main.c **** 			uint32_t diff = abs(avrFreq - lastFreg);
 2293              		.loc 1 700 0
 2294 011e 231A     		sub	r3, r4, r0
 2295 0120 DA17     		asr	r2, r3, #31
 2296 0122 9F18     		add	r7, r3, r2
 701:../Source/main.c **** 			if(diff > (lastFreg/10) && cutOff < 10) {
 2297              		.loc 1 701 0
 2298 0124 0A21     		mov	r1, #10
 700:../Source/main.c **** 			uint32_t diff = abs(avrFreq - lastFreg);
 2299              		.loc 1 700 0
 2300 0126 5740     		eor	r7, r2
 701:../Source/main.c **** 			if(diff > (lastFreg/10) && cutOff < 10) {
 2301              		.loc 1 701 0
 2302 0128 FFF7FEFF 		bl	__aeabi_uidiv
 2303              	.LVL186:
 2304 012c 8742     		cmp	r7, r0
 2305 012e 05D9     		bls	.L140
 701:../Source/main.c **** 			if(diff > (lastFreg/10) && cutOff < 10) {
 2306              		.loc 1 701 0 is_stmt 0 discriminator 1
 2307 0130 214B     		ldr	r3, .L153+40
 2308 0132 1A68     		ldr	r2, [r3]
 2309 0134 092A     		cmp	r2, #9
 2310 0136 01DC     		bgt	.L140
 702:../Source/main.c **** 				cutOff++;
 2311              		.loc 1 702 0 is_stmt 1
 2312 0138 0132     		add	r2, r2, #1
 2313 013a 13E0     		b	.L152
 2314              	.L140:
 704:../Source/main.c **** 				if(!g_config.disableEma) {
 2315              		.loc 1 704 0
 2316 013c 1B49     		ldr	r1, .L153+28
 2317 013e C87E     		ldrb	r0, [r1, #27]
 2318 0140 0028     		cmp	r0, #0
 2319 0142 0BD1     		bne	.L142
 705:../Source/main.c **** 					addStock(avrFreq, &SensorEMA5);
 2320              		.loc 1 705 0
 2321 0144 201C     		mov	r0, r4
 2322 0146 FFF7FEFF 		bl	__aeabi_ui2d
 2323 014a 1C4C     		ldr	r4, .L153+44
 2324              	.LVL187:
 2325 014c 221C     		mov	r2, r4
 2326 014e FFF7FEFF 		bl	addStock
 706:../Source/main.c **** 					avrFreq = SensorEMA5.lastEMA;
 2327              		.loc 1 706 0
 2328 0152 A068     		ldr	r0, [r4, #8]
 2329 0154 E168     		ldr	r1, [r4, #12]
 2330 0156 FFF7FEFF 		bl	__aeabi_d2uiz
 2331 015a 041C     		mov	r4, r0
 2332              	.LVL188:
 2333              	.L142:
 708:../Source/main.c **** 				g_appStats.emaFrequency = avrFreq;
 2334              		.loc 1 708 0
 2335 015c 114E     		ldr	r6, .L153+20
 709:../Source/main.c **** 				cutOff = 0;
 2336              		.loc 1 709 0
 2337 015e 164B     		ldr	r3, .L153+40
 708:../Source/main.c **** 				g_appStats.emaFrequency = avrFreq;
 2338              		.loc 1 708 0
 2339 0160 7462     		str	r4, [r6, #36]
 709:../Source/main.c **** 				cutOff = 0;
 2340              		.loc 1 709 0
 2341 0162 0022     		mov	r2, #0
 2342              	.L152:
 2343 0164 1A60     		str	r2, [r3]
 2344 0166 10E0     		b	.L141
 2345              	.L139:
 2346              	.LBE42:
 712:../Source/main.c **** 			if(!g_config.disableEma) {
 2347              		.loc 1 712 0
 2348 0168 DD7E     		ldrb	r5, [r3, #27]
 2349 016a 002D     		cmp	r5, #0
 2350 016c 0BD1     		bne	.L143
 713:../Source/main.c **** 				addStock(avrFreq, &SensorEMA5);
 2351              		.loc 1 713 0
 2352 016e 201C     		mov	r0, r4
 2353 0170 FFF7FEFF 		bl	__aeabi_ui2d
 2354 0174 114C     		ldr	r4, .L153+44
 2355              	.LVL189:
 2356 0176 221C     		mov	r2, r4
 2357 0178 FFF7FEFF 		bl	addStock
 714:../Source/main.c **** 				avrFreq = SensorEMA5.lastEMA;
 2358              		.loc 1 714 0
 2359 017c A068     		ldr	r0, [r4, #8]
 2360 017e E168     		ldr	r1, [r4, #12]
 2361 0180 FFF7FEFF 		bl	__aeabi_d2uiz
 2362 0184 041C     		mov	r4, r0
 2363              	.LVL190:
 2364              	.L143:
 716:../Source/main.c **** 			g_appStats.emaFrequency = avrFreq;
 2365              		.loc 1 716 0
 2366 0186 074F     		ldr	r7, .L153+20
 2367 0188 7C62     		str	r4, [r7, #36]
 2368              	.L141:
 719:../Source/main.c **** 		lastFreg = avrFreq;
 2369              		.loc 1 719 0
 2370 018a 0A4A     		ldr	r2, .L153+36
 2371 018c 1460     		str	r4, [r2]
 2372              	.LVL191:
 2373              	.L124:
 2374              		@ sp needed for prologue
 721:../Source/main.c **** }
 2375              		.loc 1 721 0
 2376 018e F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 2377              	.L154:
 2378              		.align	3
 2379              	.L153:
 2380 0190 9A999999 		.word	-1717986918
 2381 0194 9999F13F 		.word	1072798105
 2382 0198 CDCCCCCC 		.word	-858993459
 2383 019c CCCCEC3F 		.word	1072483532
 2384 01a0 00000000 		.word	.LANCHOR10
 2385 01a4 00000000 		.word	g_appStats
 2386 01a8 00000000 		.word	.LANCHOR11
 2387 01ac 00000000 		.word	g_config
 2388 01b0 00000000 		.word	SensorEMA10
 2389 01b4 00000000 		.word	.LANCHOR12
 2390 01b8 00000000 		.word	cutOff
 2391 01bc 00000000 		.word	SensorEMA5
 2392              		.cfi_endproc
 2393              	.LFE36:
 2395              		.section	.text.IWDG_init,"ax",%progbits
 2396              		.align	1
 2397              		.global	IWDG_init
 2398              		.code	16
 2399              		.thumb_func
 2401              	IWDG_init:
 2402              	.LFB39:
 787:../Source/main.c **** 
 788:../Source/main.c **** /*In this case the refresh window is:
 789:../Source/main.c ****   (2000-1000) / (LSI/16) = ~400 ms < refresh window < 2000 / (LSI/16) = ~800 ms
 790:../Source/main.c ****   */
 791:../Source/main.c **** void IWDG_init(void){
 2403              		.loc 1 791 0
 2404              		.cfi_startproc
 2405 0000 08B5     		push	{r3, lr}
 2406              	.LCFI7:
 2407              		.cfi_def_cfa_offset 8
 2408              		.cfi_offset 3, -8
 2409              		.cfi_offset 14, -4
 792:../Source/main.c **** 	IWDG_Enable();
 2410              		.loc 1 792 0
 2411 0002 FFF7FEFF 		bl	IWDG_Enable
 793:../Source/main.c **** 	/* Enable write access to IWDG_PR and IWDG_RLR registers */
 794:../Source/main.c **** 	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
 2412              		.loc 1 794 0
 2413 0006 0A48     		ldr	r0, .L158
 2414 0008 FFF7FEFF 		bl	IWDG_WriteAccessCmd
 795:../Source/main.c **** 	/* Set IWDG Prescaler value to 16 */
 796:../Source/main.c **** 	IWDG_SetPrescaler(IWDG_Prescaler_16);
 2415              		.loc 1 796 0
 2416 000c 0220     		mov	r0, #2
 2417 000e FFF7FEFF 		bl	IWDG_SetPrescaler
 797:../Source/main.c **** 	/* Set IWDG Reload value to 2000 */
 798:../Source/main.c **** 	IWDG_SetReload(2000);
 2418              		.loc 1 798 0
 2419 0012 FA20     		mov	r0, #250
 2420 0014 C000     		lsl	r0, r0, #3
 2421 0016 FFF7FEFF 		bl	IWDG_SetReload
 2422              	.L156:
 799:../Source/main.c **** 	/* Wait until RVU flag is reset to be sure that the reload value
 800:../Source/main.c **** 	update operation is completed */
 801:../Source/main.c **** 	while(IWDG_GetFlagStatus(IWDG_FLAG_RVU) != RESET);
 2423              		.loc 1 801 0 discriminator 1
 2424 001a 0220     		mov	r0, #2
 2425 001c FFF7FEFF 		bl	IWDG_GetFlagStatus
 2426 0020 0028     		cmp	r0, #0
 2427 0022 FAD1     		bne	.L156
 802:../Source/main.c **** 	/* Set the IWDG window value to 1000 */
 803:../Source/main.c **** 	IWDG_SetWindowValue(1000);
 2428              		.loc 1 803 0
 2429 0024 FA21     		mov	r1, #250
 2430 0026 8800     		lsl	r0, r1, #2
 2431 0028 FFF7FEFF 		bl	IWDG_SetWindowValue
 2432              		@ sp needed for prologue
 804:../Source/main.c **** }
 2433              		.loc 1 804 0
 2434 002c 08BD     		pop	{r3, pc}
 2435              	.L159:
 2436 002e C046     		.align	2
 2437              	.L158:
 2438 0030 55550000 		.word	21845
 2439              		.cfi_endproc
 2440              	.LFE39:
 2442              		.global	__aeabi_i2f
 2443              		.section	.text.startup.main,"ax",%progbits
 2444              		.align	1
 2445              		.global	main
 2446              		.code	16
 2447              		.thumb_func
 2449              	main:
 2450              	.LFB37:
 724:../Source/main.c **** int main(void) {
 2451              		.loc 1 724 0
 2452              		.cfi_startproc
 2453 0000 70B5     		push	{r4, r5, r6, lr}
 2454              	.LCFI8:
 2455              		.cfi_def_cfa_offset 16
 2456              		.cfi_offset 4, -16
 2457              		.cfi_offset 5, -12
 2458              		.cfi_offset 6, -8
 2459              		.cfi_offset 14, -4
 2460              	.LVL192:
 2461 0002 C6B0     		sub	sp, sp, #280
 2462              	.LCFI9:
 2463              		.cfi_def_cfa_offset 296
 727:../Source/main.c **** 	for (i = 0; i < 48; i++) {
 2464              		.loc 1 727 0
 2465 0004 0023     		mov	r3, #0
 2466              	.LVL193:
 2467              	.L161:
 728:../Source/main.c **** 		VectorTable[i] = *(__IO uint32_t*) (APPLICATION_ADDRESS + (i << 2));
 2468              		.loc 1 728 0 discriminator 2
 2469 0006 684D     		ldr	r5, .L176
 2470 0008 9A00     		lsl	r2, r3, #2
 2471 000a 5419     		add	r4, r2, r5
 2472 000c 2068     		ldr	r0, [r4]
 2473 000e 6749     		ldr	r1, .L176+4
 727:../Source/main.c **** 	for (i = 0; i < 48; i++) {
 2474              		.loc 1 727 0 discriminator 2
 2475 0010 0133     		add	r3, r3, #1
 2476              	.LVL194:
 728:../Source/main.c **** 		VectorTable[i] = *(__IO uint32_t*) (APPLICATION_ADDRESS + (i << 2));
 2477              		.loc 1 728 0 discriminator 2
 2478 0012 5050     		str	r0, [r2, r1]
 727:../Source/main.c **** 	for (i = 0; i < 48; i++) {
 2479              		.loc 1 727 0 discriminator 2
 2480 0014 302B     		cmp	r3, #48
 2481 0016 F6D1     		bne	.L161
 732:../Source/main.c **** 	RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 2482              		.loc 1 732 0
 2483 0018 0120     		mov	r0, #1
 2484 001a 011C     		mov	r1, r0
 2485 001c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 2486              	.LVL195:
 734:../Source/main.c **** 	SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SRAM);
 2487              		.loc 1 734 0
 2488 0020 0320     		mov	r0, #3
 2489 0022 FFF7FEFF 		bl	SYSCFG_MemoryRemapConfig
 740:../Source/main.c **** 	g_appStats.debugOn = 0;
 2490              		.loc 1 740 0
 2491 0026 6249     		ldr	r1, .L176+8
 2492 0028 0025     		mov	r5, #0
 2493 002a 4D31     		add	r1, r1, #77
 2494 002c 0D70     		strb	r5, [r1]
 2495              	.LBB62:
 2496              	.LBB63:
 805:../Source/main.c **** 
 806:../Source/main.c **** void static setup(void){
 807:../Source/main.c **** 	SystemInit();
 2497              		.loc 1 807 0
 2498 002e FFF7FEFF 		bl	SystemInit
 2499              	.LBB64:
 2500              	.LBB65:
 808:../Source/main.c **** 	sysTick_clock();
 809:../Source/main.c **** 	PC_uartInit(PC_BAUDRATE);
 810:../Source/main.c **** 
 811:../Source/main.c **** 	//init flash
 812:../Source/main.c **** 	FlashInit();
 813:../Source/main.c **** 	load_config();
 814:../Source/main.c **** 
 815:../Source/main.c **** 	xdev_out(PC_uart_putChar);
 816:../Source/main.c **** 	timeInit();
 817:../Source/main.c **** 	internalTempInit();
 818:../Source/main.c **** 
 819:../Source/main.c **** 	LSM6DS3_init();
 820:../Source/main.c **** 	Start_Kalman_Algorithm(10, 1000000.0f);
 821:../Source/main.c **** 
 822:../Source/main.c **** 	IWDG_init();
 823:../Source/main.c **** ////	g_appStats.debug =1;
 824:../Source/main.c **** 
 825:../Source/main.c **** //	xprintf("Init done!\r\n");
 826:../Source/main.c **** }
 827:../Source/main.c **** 
 828:../Source/main.c **** static void sysTick_clock(void){
 829:../Source/main.c **** 
 830:../Source/main.c **** 	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 2501              		.loc 1 830 0
 2502 0032 0420     		mov	r0, #4
 2503 0034 FFF7FEFF 		bl	SysTick_CLKSourceConfig
 2504              	.LVL196:
 831:../Source/main.c **** 	if (SysTick_Config(SystemCoreClock / 1000))
 2505              		.loc 1 831 0
 2506 0038 5E48     		ldr	r0, .L176+12
 2507 003a FA26     		mov	r6, #250
 2508 003c 0068     		ldr	r0, [r0]
 2509 003e B100     		lsl	r1, r6, #2
 2510 0040 FFF7FEFF 		bl	__aeabi_uidiv
 2511              	.LVL197:
 2512              	.LBB66:
 2513              	.LBB67:
 2514              		.file 2 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\CM
   1:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /**************************************************************************//**
   2:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  * @file     core_cm0.h
   3:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  * @version  V3.20
   5:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  * @date     25. February 2013
   6:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  *
   7:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  * @note
   8:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  *
   9:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  ******************************************************************************/
  10:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  12:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    All rights reserved.
  13:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    - Redistributions of source code must retain the above copyright
  16:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****      documentation and/or other materials provided with the distribution.
  20:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****      to endorse or promote products derived from this software without
  22:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****      specific prior written permission.
  23:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    *
  24:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    ---------------------------------------------------------------------------*/
  36:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  37:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  38:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #if defined ( __ICCARM__ )
  39:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #endif
  41:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  42:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #ifdef __cplusplus
  43:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  extern "C" {
  44:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #endif
  45:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  46:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  47:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define __CORE_CM0_H_GENERIC
  48:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  49:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  52:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  54:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  55:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****      Unions are used for effective representation of core registers.
  57:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  58:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****      Function-like macros are used to allow more efficient code.
  60:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
  61:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  62:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  63:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*******************************************************************************
  64:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  *                 CMSIS definitions
  65:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  ******************************************************************************/
  66:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \ingroup Cortex_M0
  67:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   @{
  68:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
  69:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  70:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*  CMSIS CM0 definitions */
  71:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  72:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x20)                                   /*!< [15:0]  CMSIS HAL s
  73:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | \
  74:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  75:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  76:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define __CORTEX_M                (0x00)                                   /*!< Cortex-M Core      
  77:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  78:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  79:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #if   defined ( __CC_ARM )
  80:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __STATIC_INLINE  static __inline
  83:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  84:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #elif defined ( __ICCARM__ )
  85:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  86:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  87:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __STATIC_INLINE  static inline
  88:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  89:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #elif defined ( __GNUC__ )
  90:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  91:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  92:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __STATIC_INLINE  static inline
  93:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  94:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #elif defined ( __TASKING__ )
  95:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  96:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  97:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define __STATIC_INLINE  static inline
  98:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
  99:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #endif
 100:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 101:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
 102:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** */
 103:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define __FPU_USED       0
 104:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 105:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #if defined ( __CC_ARM )
 106:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #if defined __TARGET_FPU_VFP
 107:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 108:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #endif
 109:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 110:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #elif defined ( __ICCARM__ )
 111:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #if defined __ARMVFP__
 112:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 113:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #endif
 114:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 115:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #elif defined ( __GNUC__ )
 116:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 117:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #endif
 119:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 120:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #elif defined ( __TASKING__ )
 121:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #if defined __FPU_VFP__
 122:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 123:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #endif
 124:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #endif
 125:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 126:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #include <stdint.h>                      /* standard types definitions                      */
 127:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 128:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 129:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #include <stm32f0xx.h>
 130:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 131:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 132:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #ifndef __CMSIS_GENERIC
 133:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 134:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 135:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 136:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 137:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* check device defines and use defaults */
 138:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 139:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #ifndef __CM0_REV
 140:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     #define __CM0_REV               0x0000
 141:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 142:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #endif
 143:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 144:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 145:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     #define __NVIC_PRIO_BITS          2
 146:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 147:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #endif
 148:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 149:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 150:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     #define __Vendor_SysTickConfig    0
 151:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 152:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #endif
 153:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #endif
 154:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 155:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 156:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /**
 157:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 158:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 159:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 160:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \li to specify the access to peripheral variables.
 161:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 162:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** */
 163:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #ifdef __cplusplus
 164:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 165:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #else
 166:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 167:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #endif
 168:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 169:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 170:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 171:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*@} end of group Cortex_M0 */
 172:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 173:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 174:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 175:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*******************************************************************************
 176:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  *                 Register Abstraction
 177:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   Core Register contain:
 178:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   - Core Register
 179:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   - Core NVIC Register
 180:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   - Core SCB Register
 181:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   - Core SysTick Register
 182:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  ******************************************************************************/
 183:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 184:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 185:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** */
 186:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 187:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \ingroup    CMSIS_core_register
 188:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 189:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \brief  Core Register type definitions.
 190:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   @{
 191:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 192:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 193:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 194:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 195:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** typedef union
 196:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 197:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   struct
 198:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   {
 199:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #if (__CORTEX_M != 0x04)
 200:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 201:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #else
 202:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 203:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 204:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 205:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #endif
 206:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 207:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 208:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 209:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 210:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 211:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 212:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 213:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** } APSR_Type;
 214:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 215:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 216:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 217:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 218:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** typedef union
 219:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 220:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   struct
 221:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   {
 222:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 223:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 224:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 225:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 226:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** } IPSR_Type;
 227:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 228:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 229:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 230:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 231:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** typedef union
 232:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 233:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   struct
 234:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   {
 235:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 236:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #if (__CORTEX_M != 0x04)
 237:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 238:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #else
 239:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 240:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 241:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 242:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #endif
 243:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 244:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 245:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 246:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 247:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 248:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 249:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 250:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 251:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 252:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** } xPSR_Type;
 253:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 254:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 255:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 256:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 257:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** typedef union
 258:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 259:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   struct
 260:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   {
 261:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 262:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 263:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 264:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 265:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   } b;                                   /*!< Structure used for bit  access                  */
 266:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 267:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** } CONTROL_Type;
 268:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 269:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*@} end of group CMSIS_CORE */
 270:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 271:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 272:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \ingroup    CMSIS_core_register
 273:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 274:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \brief      Type definitions for the NVIC Registers
 275:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   @{
 276:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 277:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 278:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 279:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 280:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** typedef struct
 281:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 282:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 283:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****        uint32_t RESERVED0[31];
 284:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 285:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****        uint32_t RSERVED1[31];
 286:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 287:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****        uint32_t RESERVED2[31];
 288:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 289:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****        uint32_t RESERVED3[31];
 290:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****        uint32_t RESERVED4[64];
 291:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register     
 292:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** }  NVIC_Type;
 293:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 294:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*@} end of group CMSIS_NVIC */
 295:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 296:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 297:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \ingroup  CMSIS_core_register
 298:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 299:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \brief      Type definitions for the System Control Block Registers
 300:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   @{
 301:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 302:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 303:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Structure type to access the System Control Block (SCB).
 304:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 305:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** typedef struct
 306:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 307:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 308:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 309:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****        uint32_t RESERVED0;
 310:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 311:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 312:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 313:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****        uint32_t RESERVED1;
 314:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t SHP[2];                  /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 315:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 316:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** } SCB_Type;
 317:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 318:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* SCB CPUID Register Definitions */
 319:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 320:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 321:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 322:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 323:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 324:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 325:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 326:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 327:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 328:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 329:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 330:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 331:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 332:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 333:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 334:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 335:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 336:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 337:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 338:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 339:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 340:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 341:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 342:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 343:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 344:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 345:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 346:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 347:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 348:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 349:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 350:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 351:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 352:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 353:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 354:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 355:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 356:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 357:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 358:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 359:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 360:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 361:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 362:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 363:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 364:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 365:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 366:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 367:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 368:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 369:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 370:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 371:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 372:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 373:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 374:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 375:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 376:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 377:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 378:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* SCB System Control Register Definitions */
 379:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 380:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 381:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 382:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 383:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 384:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 385:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 386:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 387:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 388:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* SCB Configuration Control Register Definitions */
 389:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 390:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 391:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 392:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 393:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 394:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 395:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 396:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 397:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 398:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 399:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*@} end of group CMSIS_SCB */
 400:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 401:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 402:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \ingroup  CMSIS_core_register
 403:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 404:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \brief      Type definitions for the System Timer Registers.
 405:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   @{
 406:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 407:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 408:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Structure type to access the System Timer (SysTick).
 409:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 410:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** typedef struct
 411:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 412:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 413:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 414:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 415:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 416:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** } SysTick_Type;
 417:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 418:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* SysTick Control / Status Register Definitions */
 419:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 420:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 421:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 422:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 423:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 424:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 425:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 426:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 427:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 428:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 429:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 430:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 431:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* SysTick Reload Register Definitions */
 432:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 433:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 434:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 435:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* SysTick Current Register Definitions */
 436:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 437:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 438:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 439:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* SysTick Calibration Register Definitions */
 440:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 441:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 442:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 443:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 444:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 445:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 446:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 447:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 448:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 449:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*@} end of group CMSIS_SysTick */
 450:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 451:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 452:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \ingroup  CMSIS_core_register
 453:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 454:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \brief      Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR)
 455:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****                 are only accessible over DAP and not via processor. Therefore
 456:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****                 they are not covered by the Cortex-M0 header file.
 457:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   @{
 458:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 459:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 460:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 461:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 462:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \ingroup    CMSIS_core_register
 463:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \defgroup   CMSIS_core_base     Core Definitions
 464:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \brief      Definitions for base addresses, unions, and structures.
 465:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   @{
 466:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 467:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 468:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 469:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 470:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 471:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 472:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 473:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 474:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 475:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 476:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 477:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 478:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 479:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*@} */
 480:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 481:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 482:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 483:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*******************************************************************************
 484:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  *                Hardware Abstraction Layer
 485:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   Core Function Interface contains:
 486:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   - Core NVIC Functions
 487:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   - Core SysTick Functions
 488:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   - Core Register Access Functions
 489:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  ******************************************************************************/
 490:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 491:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** */
 492:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 493:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 494:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 495:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 496:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 497:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 498:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
 499:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     @{
 500:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 501:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 502:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 503:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 504:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 505:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 506:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 507:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 508:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 509:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Enable External Interrupt
 510:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 511:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
 512:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 513:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
 514:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 515:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 516:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 517:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 518:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** }
 519:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 520:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 521:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Disable External Interrupt
 522:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 523:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
 524:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 525:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
 526:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 527:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 528:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 529:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 530:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** }
 531:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 532:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 533:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Get Pending Interrupt
 534:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 535:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     The function reads the pending register in the NVIC and returns the pending bit
 536:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     for the specified interrupt.
 537:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 538:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \param [in]      IRQn  Interrupt number.
 539:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 540:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \return             0  Interrupt status is not pending.
 541:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \return             1  Interrupt status is pending.
 542:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 543:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 544:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 545:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));
 546:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** }
 547:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 548:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 549:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Set Pending Interrupt
 550:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 551:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     The function sets the pending bit of an external interrupt.
 552:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 553:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
 554:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 555:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 556:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 557:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 558:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** }
 559:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 560:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 561:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Clear Pending Interrupt
 562:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 563:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     The function clears the pending bit of an external interrupt.
 564:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 565:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
 566:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 567:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 568:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 569:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 570:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** }
 571:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 572:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 573:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Set Interrupt Priority
 574:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 575:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     The function sets the priority of an interrupt.
 576:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 577:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \note The priority cannot be set for every core interrupt.
 578:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 579:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \param [in]      IRQn  Interrupt number.
 580:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \param [in]  priority  Priority to set.
 581:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 582:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 583:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 584:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   if(IRQn < 0) {
 585:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 586:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 587:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   else {
 588:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 589:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 590:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** }
 591:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 592:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 593:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  Get Interrupt Priority
 594:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 595:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     The function reads the priority of an interrupt. The interrupt
 596:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     number can be positive to specify an external (device specific)
 597:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     interrupt, or negative to specify an internal (core) interrupt.
 598:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 599:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 600:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \param [in]   IRQn  Interrupt number.
 601:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \return             Interrupt Priority. Value is aligned automatically to the implemented
 602:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****                         priority bits of the microcontroller.
 603:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 604:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 605:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 606:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 607:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   if(IRQn < 0) {
 608:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & 0xFF) >> (8 - __NVIC_PRIO_
 609:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   else {
 610:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & 0xFF) >> (8 - __NVIC_PRIO_
 611:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** }
 612:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 613:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 614:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  System Reset
 615:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 616:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     The function initiates a system reset request to reset the MCU.
 617:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 618:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 619:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 620:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
 621:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****                                                                   buffered write are completed befo
 622:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 623:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 624:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   __DSB();                                                     /* Ensure completion of memory acces
 625:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   while(1);                                                    /* wait until reset */
 626:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** }
 627:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 628:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /*@} end of CMSIS_Core_NVICFunctions */
 629:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 630:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 631:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 632:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /* ##################################    SysTick function  ########################################
 633:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 634:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
 635:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \brief      Functions that configure the System.
 636:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   @{
 637:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 638:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 639:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** #if (__Vendor_SysTickConfig == 0)
 640:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 641:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** /** \brief  System Tick Configuration
 642:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 643:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     The function initializes the System Timer and its interrupt, and starts the System Tick Timer.
 644:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     Counter is in free running mode to generate periodic interrupts.
 645:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 646:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \param [in]  ticks  Number of ticks between two interrupts.
 647:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 648:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \return          0  Function succeeded.
 649:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \return          1  Function failed.
 650:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 651:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     \note     When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
 652:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
 653:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     must contain a vendor-specific implementation of this function.
 654:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 655:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****  */
 656:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
 657:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** {
 658:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 2515              		.loc 2 658 0
 2516 0044 5C4B     		ldr	r3, .L176+16
 2517 0046 0138     		sub	r0, r0, #1
 2518 0048 9842     		cmp	r0, r3
 2519 004a 2AD8     		bhi	.L174
 659:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h **** 
 660:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 2520              		.loc 2 660 0
 2521 004c 5B4B     		ldr	r3, .L176+20
 2522              	.LBB68:
 2523              	.LBB69:
 585:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 2524              		.loc 2 585 0
 2525 004e 5C4C     		ldr	r4, .L176+24
 2526              	.LBE69:
 2527              	.LBE68:
 2528              		.loc 2 660 0
 2529 0050 5860     		str	r0, [r3, #4]
 2530              	.LVL198:
 2531              	.LBB71:
 2532              	.LBB70:
 585:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 2533              		.loc 2 585 0
 2534 0052 206A     		ldr	r0, [r4, #32]
 2535 0054 C022     		mov	r2, #192
 2536 0056 0602     		lsl	r6, r0, #8
 2537 0058 310A     		lsr	r1, r6, #8
 2538 005a 1006     		lsl	r0, r2, #24
 2539 005c 0843     		orr	r0, r1
 2540 005e 2062     		str	r0, [r4, #32]
 2541              	.LBE70:
 2542              	.LBE71:
 661:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrup
 662:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 663:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 2543              		.loc 2 663 0
 2544 0060 0726     		mov	r6, #7
 2545              	.LBE67:
 2546              	.LBE66:
 2547              	.LBE65:
 2548              	.LBE64:
 809:../Source/main.c **** 	PC_uartInit(PC_BAUDRATE);
 2549              		.loc 1 809 0
 2550 0062 9620     		mov	r0, #150
 2551              	.LBB78:
 2552              	.LBB76:
 2553              	.LBB74:
 2554              	.LBB72:
 662:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 2555              		.loc 2 662 0
 2556 0064 9D60     		str	r5, [r3, #8]
 2557              	.LBE72:
 2558              	.LBE74:
 2559              	.LBE76:
 2560              	.LBE78:
 809:../Source/main.c **** 	PC_uartInit(PC_BAUDRATE);
 2561              		.loc 1 809 0
 2562 0066 B040     		lsl	r0, r0, r6
 2563              	.LBB79:
 2564              	.LBB77:
 2565              	.LBB75:
 2566              	.LBB73:
 2567              		.loc 2 663 0
 2568 0068 1E60     		str	r6, [r3]
 2569              	.LBE73:
 2570              	.LBE75:
 2571              	.LBE77:
 2572              	.LBE79:
 809:../Source/main.c **** 	PC_uartInit(PC_BAUDRATE);
 2573              		.loc 1 809 0
 2574 006a FFF7FEFF 		bl	PC_uartInit
 812:../Source/main.c **** 	FlashInit();
 2575              		.loc 1 812 0
 2576 006e FFF7FEFF 		bl	FlashInit
 813:../Source/main.c **** 	load_config();
 2577              		.loc 1 813 0
 2578 0072 FFF7FEFF 		bl	load_config
 815:../Source/main.c **** 	xdev_out(PC_uart_putChar);
 2579              		.loc 1 815 0
 2580 0076 534A     		ldr	r2, .L176+28
 2581 0078 534B     		ldr	r3, .L176+32
 2582 007a 261C     		mov	r6, r4
 2583 007c 1A60     		str	r2, [r3]
 816:../Source/main.c **** 	timeInit();
 2584              		.loc 1 816 0
 2585 007e FFF7FEFF 		bl	timeInit
 817:../Source/main.c **** 	internalTempInit();
 2586              		.loc 1 817 0
 2587 0082 FFF7FEFF 		bl	internalTempInit
 2588              	.LVL199:
 2589              	.LBB80:
 2590              	.LBB81:
 832:../Source/main.c **** 		while (1);
 833:../Source/main.c **** }
 834:../Source/main.c **** 
 835:../Source/main.c **** static void LSM6DS3_init(void){
 836:../Source/main.c **** 	uint8_t test =0;
 837:../Source/main.c **** 	LSM6DS3_Initialize(LSM6DS3_SPI,LSM6DS3_DEFAULT_TIMEOUT);
 2591              		.loc 1 837 0
 2592 0086 6421     		mov	r1, #100
 2593 0088 5048     		ldr	r0, .L176+36
 2594 008a FFF7FEFF 		bl	LSM6DS3_Initialize
 838:../Source/main.c **** 	delay_ms(200);
 2595              		.loc 1 838 0
 2596 008e C820     		mov	r0, #200
 2597 0090 FFF7FEFF 		bl	delay_ms
 839:../Source/main.c **** 
 840:../Source/main.c **** 	if(LSM6DS3_Detect(10) == LSM6DS3_OK)
 2598              		.loc 1 840 0
 2599 0094 0A20     		mov	r0, #10
 2600 0096 FFF7FEFF 		bl	LSM6DS3_Detect
 2601 009a 021C     		mov	r2, r0
 2602 009c A842     		cmp	r0, r5
 2603 009e 0FD1     		bne	.L164
 2604 00a0 00E0     		b	.L175
 2605              	.LVL200:
 2606              	.L174:
 2607 00a2 FEE7     		b	.L174
 2608              	.LVL201:
 2609              	.L175:
 841:../Source/main.c **** 	{
 842:../Source/main.c **** 		//xprintf("LSM6DS3 found\r\n");
 843:../Source/main.c **** 		if(LSM6DS3_XL_Start(XL_1666Hz, XL_RANGE_16G, XL_FILTER_400Hz)==LSM6DS3_FAIL){
 2610              		.loc 1 843 0
 2611 00a4 0121     		mov	r1, #1
 2612 00a6 0820     		mov	r0, #8
 2613 00a8 FFF7FEFF 		bl	LSM6DS3_XL_Start
 844:../Source/main.c **** 			//xprintf("LSM6DS3_XL_Start fail\r\n");
 845:../Source/main.c **** 		}
 846:../Source/main.c **** 		else{
 847:../Source/main.c **** 			//xprintf("LSM6DS3_XL_Start ok\r\n");
 848:../Source/main.c **** 		}
 849:../Source/main.c **** 		delay_ms(10);
 2614              		.loc 1 849 0
 2615 00ac 0A20     		mov	r0, #10
 2616 00ae FFF7FEFF 		bl	delay_ms
 850:../Source/main.c **** 
 851:../Source/main.c **** 		if(LSM6DS3_GS_Start(GS_1666Hz, GS_RANGE_2000dps)!=LSM6DS3_OK){
 2617              		.loc 1 851 0
 2618 00b2 0820     		mov	r0, #8
 2619 00b4 0621     		mov	r1, #6
 2620 00b6 FFF7FEFF 		bl	LSM6DS3_GS_Start
 852:../Source/main.c **** 			//xprintf("LSM6DS3_GS_Start fail\r\n");
 853:../Source/main.c **** 		}
 854:../Source/main.c **** 		else{
 855:../Source/main.c **** 			//xprintf("LSM6DS3_GS_Start ok\r\n");
 856:../Source/main.c **** 		}
 857:../Source/main.c **** 		delay_ms(10);
 2621              		.loc 1 857 0
 2622 00ba 0A20     		mov	r0, #10
 2623 00bc FFF7FEFF 		bl	delay_ms
 2624              	.L164:
 2625              	.LBE81:
 2626              	.LBE80:
 820:../Source/main.c **** 	Start_Kalman_Algorithm(10, 1000000.0f);
 2627              		.loc 1 820 0
 2628 00c0 4348     		ldr	r0, .L176+40
 2629 00c2 4449     		ldr	r1, .L176+44
 2630 00c4 FFF7FEFF 		bl	Start_Kalman_Algorithm
 822:../Source/main.c **** 	IWDG_init();
 2631              		.loc 1 822 0
 2632 00c8 FFF7FEFF 		bl	IWDG_init
 2633              	.LBE63:
 2634              	.LBE62:
 745:../Source/main.c **** 	xprintf("\r\nSystem ready (%s)\r\n", APP_VERSION);
 2635              		.loc 1 745 0
 2636 00cc 4248     		ldr	r0, .L176+48
 2637 00ce 4349     		ldr	r1, .L176+52
 2638 00d0 FFF7FEFF 		bl	xprintf
 746:../Source/main.c **** 	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_con
 2639              		.loc 1 746 0
 2640 00d4 424D     		ldr	r5, .L176+56
 2641 00d6 EC7D     		ldrb	r4, [r5, #23]
 2642 00d8 AB8A     		ldrh	r3, [r5, #20]
 2643 00da 0094     		str	r4, [sp]
 2644 00dc A87E     		ldrb	r0, [r5, #26]
 2645 00de AC1C     		add	r4, r5, #2
 2646 00e0 0190     		str	r0, [sp, #4]
 2647 00e2 2A7E     		ldrb	r2, [r5, #24]
 2648 00e4 3F48     		ldr	r0, .L176+60
 2649 00e6 0292     		str	r2, [sp, #8]
 2650 00e8 697E     		ldrb	r1, [r5, #25]
 2651 00ea 0494     		str	r4, [sp, #16]
 2652 00ec 0391     		str	r1, [sp, #12]
 2653 00ee E968     		ldr	r1, [r5, #12]
 2654 00f0 2A69     		ldr	r2, [r5, #16]
 2655 00f2 FFF7FEFF 		bl	xprintf
 2656              	.L172:
 2657              	.LBB82:
 749:../Source/main.c **** 		if(g_appStats.resetNow) {
 2658              		.loc 1 749 0
 2659 00f6 2E4B     		ldr	r3, .L176+8
 2660 00f8 1B6D     		ldr	r3, [r3, #80]
 2661 00fa 002B     		cmp	r3, #0
 2662 00fc 0BD0     		beq	.L165
 750:../Source/main.c **** 			if(ulSecCount - g_appStats.resetNow >= 3) {
 2663              		.loc 1 750 0
 2664 00fe 3A4A     		ldr	r2, .L176+64
 2665 0100 1168     		ldr	r1, [r2]
 2666 0102 CD1A     		sub	r5, r1, r3
 2667 0104 022D     		cmp	r5, #2
 2668 0106 06D9     		bls	.L165
 2669              	.LBB83:
 2670              	.LBB84:
 2671              	.LBB85:
 2672              	.LBB86:
 2673              		.file 3 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\CM
   1:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  *
   7:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  * @note
   8:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  *
   9:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  12:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    All rights reserved.
  13:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    *
  24:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  37:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  38:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  41:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  42:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   @{
  46:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** */
  47:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  48:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  51:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #endif
  54:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  55:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  56:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  58:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  60:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  62:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  63:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  65:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  68:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  70:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  71:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  73:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  76:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  78:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  79:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  81:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  83:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  85:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  86:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  88:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  92:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  94:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  95:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
  97:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 100:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 102:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 103:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 105:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 108:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 110:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 111:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 113:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 115:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 118:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 120:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 121:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 123:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 125:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 128:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** {
 131:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   bx lr
 133:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** }
 134:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #endif
 135:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 136:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 138:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 140:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 143:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** {
 146:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   bx lr
 148:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** }
 149:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #endif
 150:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 151:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 152:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 154:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 156:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 160:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 162:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 163:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 165:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 168:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 171:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 173:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 174:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 176:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 178:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 180:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 183:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 185:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 186:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 188:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 190:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 193:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 195:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 196:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 198:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 200:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 203:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 205:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 206:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 208:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 210:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 213:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 215:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 216:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 218:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 220:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 225:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 227:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 228:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 230:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 232:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 237:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 239:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 240:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 242:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 244:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 249:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 251:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 252:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 254:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 256:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 257:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 259:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 260:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 262:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 264:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 268:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 270:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 271:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 273:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 275:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 279:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 281:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 282:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 284:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 286:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 289:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 291:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 293:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 294:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 295:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 298:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 300:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 301:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 304:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 306:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 307:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 310:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #else
 317:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** #endif
 320:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 321:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 323:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 325:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** {
 327:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 328:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** }
 329:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 330:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 331:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 332:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 333:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 334:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 335:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 336:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 337:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** {
 338:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 339:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** }
 340:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 341:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 342:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 343:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 344:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 345:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 346:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 347:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 348:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** {
 349:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 350:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** }
 351:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 352:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 353:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
 354:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 355:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 356:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 357:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 358:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** {
 359:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("sev");
 360:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** }
 361:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 362:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 363:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 364:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 365:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 366:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 367:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
 368:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 369:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 370:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** {
 371:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("isb");
 372:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** }
 373:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 374:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 375:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 376:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** 
 377:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 378:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 379:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 380:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 381:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h **** {
 382:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dsb");
 2674              		.loc 3 382 0
 2675              	@ 382 "C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Includ
 2676 0108 BFF34F8F 		dsb
 2677              	@ 0 "" 2
 2678              		.code	16
 2679              	.LBE86:
 2680              	.LBE85:
 622:C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Include\core_cm0.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 2681              		.loc 2 622 0
 2682 010c 3748     		ldr	r0, .L176+68
 2683 010e F060     		str	r0, [r6, #12]
 2684              	.LBB87:
 2685              	.LBB88:
 2686              		.loc 3 382 0
 2687              	@ 382 "C:\Working\CURRENT_PROJECT\SKYBOX\skysoft_lls_stm32f030c8t6\main_code\Libraries\CMSIS\Includ
 2688 0110 BFF34F8F 		dsb
 2689              	@ 0 "" 2
 2690              		.code	16
 2691              	.L166:
 2692 0114 FEE7     		b	.L166
 2693              	.L165:
 2694              	.LBE88:
 2695              	.LBE87:
 2696              	.LBE84:
 2697              	.LBE83:
 756:../Source/main.c **** 		Kalman_SetFlag();
 2698              		.loc 1 756 0
 2699 0116 FFF7FEFF 		bl	Kalman_SetFlag
 2700              	.LBB89:
 2701              	.LBB90:
 858:../Source/main.c **** 
 859:../Source/main.c ****   }
 860:../Source/main.c ****   else
 861:../Source/main.c ****   {
 862:../Source/main.c **** //		xprintf("LSM6DS3 not found\r\n");
 863:../Source/main.c **** 	  /* Handle the error */
 864:../Source/main.c ****   }
 865:../Source/main.c **** 
 866:../Source/main.c **** }
 867:../Source/main.c **** 
 868:../Source/main.c **** static void LSM6DS3_get_raw(void){
 869:../Source/main.c **** 	if(LSM6DS3_IMU_GetMeasurements()!=LSM6DS3_OK){
 870:../Source/main.c **** 		xprintf("LSM6DS3_IMU_GetMeasurements fail \r\n");
 871:../Source/main.c **** 	}
 872:../Source/main.c **** 	xprintf("XL			%d-%d-%d\r\n",LSM6DS3_GetXL_X_Int16(),LSM6DS3_GetXL_Y_Int16(),LSM6DS3_GetXL_Z_Int16(
 873:../Source/main.c **** 	xprintf("GS			%d-%d-%d\r\n",LSM6DS3_GetGS_X_Int16(),LSM6DS3_GetGS_Y_Int16(),LSM6DS3_GetGS_Z_Int16(
 874:../Source/main.c **** }
 875:../Source/main.c **** 
 876:../Source/main.c **** 
 877:../Source/main.c **** static void LSM6DS3_get_angle(void){
 878:../Source/main.c **** 	char buf[255]= {0};
 2702              		.loc 1 878 0
 2703 011a 0021     		mov	r1, #0
 2704 011c FF22     		mov	r2, #255
 2705 011e 06A8     		add	r0, sp, #24
 2706 0120 FFF7FEFF 		bl	memset
 879:../Source/main.c **** 
 880:../Source/main.c **** 	if(Kalman_GetFlag()) {
 2707              		.loc 1 880 0
 2708 0124 FFF7FEFF 		bl	Kalman_GetFlag
 2709 0128 0028     		cmp	r0, #0
 2710 012a 24D0     		beq	.L167
 881:../Source/main.c **** 		//xprintf("%s-%d\r\n",__func__,__LINE__);
 882:../Source/main.c **** 		if(LSM6DS3_IMU_GetMeasurements()==LSM6DS3_OK){
 2711              		.loc 1 882 0
 2712 012c FFF7FEFF 		bl	LSM6DS3_IMU_GetMeasurements
 2713 0130 0028     		cmp	r0, #0
 2714 0132 01D1     		bne	.L168
 883:../Source/main.c **** 			Execute_Kalman_Filter();
 2715              		.loc 1 883 0
 2716 0134 FFF7FEFF 		bl	Execute_Kalman_Filter
 2717              	.L168:
 884:../Source/main.c **** 		}
 885:../Source/main.c **** 
 886:../Source/main.c **** 		if (g_appStats.last_send_data < ulMiliCount) {
 2718              		.loc 1 886 0
 2719 0138 2D4D     		ldr	r5, .L176+72
 2720 013a 1D4C     		ldr	r4, .L176+8
 2721 013c 2B68     		ldr	r3, [r5]
 2722 013e 616D     		ldr	r1, [r4, #84]
 2723 0140 9942     		cmp	r1, r3
 2724 0142 16D2     		bcs	.L169
 887:../Source/main.c **** 			memset(buf, 0, sizeof(buf));
 2725              		.loc 1 887 0
 2726 0144 0021     		mov	r1, #0
 2727 0146 FF22     		mov	r2, #255
 2728 0148 06A8     		add	r0, sp, #24
 2729 014a FFF7FEFF 		bl	memset
 888:../Source/main.c **** 			g_appStats.lsm6ds3.roll = Kalman_GetRoll();
 2730              		.loc 1 888 0
 2731 014e FFF7FEFF 		bl	Kalman_GetRoll
 2732 0152 2060     		str	r0, [r4]
 889:../Source/main.c **** 			g_appStats.lsm6ds3.pitch = Kalman_GetPitch();
 2733              		.loc 1 889 0
 2734 0154 FFF7FEFF 		bl	Kalman_GetPitch
 2735 0158 6060     		str	r0, [r4, #4]
 890:../Source/main.c **** 			g_appStats.lsm6ds3.yaw = Kalman_Getyaw();
 2736              		.loc 1 890 0
 2737 015a FFF7FEFF 		bl	Kalman_Getyaw
 2738 015e A060     		str	r0, [r4, #8]
 891:../Source/main.c **** 			g_appStats.lsm6ds3.T = LSM6DS3_Temperature_Int16();
 2739              		.loc 1 891 0
 2740 0160 FFF7FEFF 		bl	LSM6DS3_Temperature_Int16
 2741 0164 FFF7FEFF 		bl	__aeabi_i2f
 892:../Source/main.c **** 
 893:../Source/main.c **** #if 0
 894:../Source/main.c **** 			xprintf("Roll = %d & Pitch = %d & yaw = %d & Temperature = %d\r\n",
 895:../Source/main.c **** 					(int) g_appStats.lsm6ds3.roll,
 896:../Source/main.c **** 					(int) g_appStats.lsm6ds3.pitch,
 897:../Source/main.c **** 					(int) g_appStats.lsm6ds3.yaw, (int) g_appStats.lsm6ds3.T);
 898:../Source/main.c **** #endif
 899:../Source/main.c **** 
 900:../Source/main.c **** 			g_appStats.last_send_data = ulMiliCount + 500;
 2742              		.loc 1 900 0
 2743 0168 2D68     		ldr	r5, [r5]
 891:../Source/main.c **** 			g_appStats.lsm6ds3.T = LSM6DS3_Temperature_Int16();
 2744              		.loc 1 891 0
 2745 016a E060     		str	r0, [r4, #12]
 2746              		.loc 1 900 0
 2747 016c F535     		add	r5, r5, #245
 2748 016e FF35     		add	r5, r5, #255
 2749 0170 6565     		str	r5, [r4, #84]
 2750              	.L169:
 901:../Source/main.c **** 		}
 902:../Source/main.c **** 
 903:../Source/main.c **** 		Kalman_ClearFlag();
 2751              		.loc 1 903 0
 2752 0172 FFF7FEFF 		bl	Kalman_ClearFlag
 2753              	.L167:
 2754              	.LBE90:
 2755              	.LBE89:
 759:../Source/main.c **** 		if(g_appStats.processPcCommand) {
 2756              		.loc 1 759 0
 2757 0176 0E4D     		ldr	r5, .L176+8
 2758 0178 2C1C     		mov	r4, r5
 2759 017a 6634     		add	r4, r4, #102
 2760 017c 2278     		ldrb	r2, [r4]
 2761 017e 002A     		cmp	r2, #0
 2762 0180 03D0     		beq	.L170
 760:../Source/main.c **** 			process_command_from_pc();
 2763              		.loc 1 760 0
 2764 0182 FFF7FEFF 		bl	process_command_from_pc
 761:../Source/main.c **** 			g_appStats.processPcCommand = 0;
 2765              		.loc 1 761 0
 2766 0186 0020     		mov	r0, #0
 2767 0188 2070     		strb	r0, [r4]
 2768              	.L170:
 766:../Source/main.c **** 	    if(g_appStats.freqUpdated) {
 2769              		.loc 1 766 0
 2770 018a 2C1C     		mov	r4, r5
 2771 018c 6434     		add	r4, r4, #100
 764:../Source/main.c **** 	    cleanWDT();
 2772              		.loc 1 764 0
 2773 018e FFF7FEFF 		bl	cleanWDT
 766:../Source/main.c **** 	    if(g_appStats.freqUpdated) {
 2774              		.loc 1 766 0
 2775 0192 2178     		ldrb	r1, [r4]
 2776 0194 0029     		cmp	r1, #0
 2777 0196 03D0     		beq	.L171
 767:../Source/main.c **** 	    	handlerSensorData();
 2778              		.loc 1 767 0
 2779 0198 FFF7FEFF 		bl	handlerSensorData
 768:../Source/main.c **** 	    	g_appStats.freqUpdated = 0;
 2780              		.loc 1 768 0
 2781 019c 0023     		mov	r3, #0
 2782 019e 2370     		strb	r3, [r4]
 2783              	.L171:
 771:../Source/main.c **** 	    output_data();
 2784              		.loc 1 771 0
 2785 01a0 FFF7FEFF 		bl	output_data
 2786              	.LBE82:
 781:../Source/main.c **** 	}
 2787              		.loc 1 781 0
 2788 01a4 A7E7     		b	.L172
 2789              	.L177:
 2790 01a6 C046     		.align	2
 2791              	.L176:
 2792 01a8 00280008 		.word	134227968
 2793 01ac 00000000 		.word	.LANCHOR13
 2794 01b0 00000000 		.word	g_appStats
 2795 01b4 00000000 		.word	SystemCoreClock
 2796 01b8 FFFFFF00 		.word	16777215
 2797 01bc 10E000E0 		.word	-536813552
 2798 01c0 00ED00E0 		.word	-536810240
 2799 01c4 00000000 		.word	PC_uart_putChar
 2800 01c8 00000000 		.word	xfunc_out
 2801 01cc 00380040 		.word	1073756160
 2802 01d0 00002041 		.word	1092616192
 2803 01d4 00247449 		.word	1232348160
 2804 01d8 A2010000 		.word	.LC58
 2805 01dc B8010000 		.word	.LC60
 2806 01e0 00000000 		.word	g_config
 2807 01e4 CD010000 		.word	.LC62
 2808 01e8 00000000 		.word	.LANCHOR0
 2809 01ec 0400FA05 		.word	100270084
 2810 01f0 00000000 		.word	.LANCHOR14
 2811              		.cfi_endproc
 2812              	.LFE37:
 2814              		.comm	pith_t,4,4
 2815              		.comm	roll_t,4,4
 2816              		.comm	cutOff,4,4
 2817              		.global	lastFreg
 2818              		.global	freqIdx
 2819              		.global	avrTimFreq
 2820              		.global	yaw
 2821              		.global	pitch
 2822              		.global	roll
 2823              		.global	sm
 2824              		.global	sp
 2825              		.global	cm
 2826              		.global	cp
 2827              		.comm	kalAngleZ,8,8
 2828              		.comm	kalAngleY,8,8
 2829              		.comm	kalAngleX,8,8
 2830              		.comm	delta,8,8
 2831              		.global	Z_rate
 2832              		.global	y_rate
 2833              		.global	x_rate
 2834              		.comm	gyroZrate,8,8
 2835              		.comm	gyroYrate,8,8
 2836              		.comm	gyroXrate,8,8
 2837              		.comm	gyroZ,2,2
 2838              		.comm	gyroY,2,2
 2839              		.comm	gyroX,2,2
 2840              		.comm	accZ,2,2
 2841              		.comm	accY,2,2
 2842              		.comm	accX,2,2
 2843              		.comm	timer,4,4
 2844              		.comm	lastOut,4,4
 2845              		.comm	lastReadAccelo,4,4
 2846              		.global	lastBackNormal
 2847              		.comm	preErrorState,1,1
 2848              		.comm	prePulse,28,4
 2849              		.global	lastGetTemper
 2850              		.global	idx3D
 2851              		.global	sameIdx
 2852              		.global	minIdx
 2853              		.global	idx
 2854              		.global	compare_levels
 2855              		.comm	storeLevels,840,4
 2856              		.comm	same3DFreq,420,4
 2857              		.comm	avrFreq3D,420,4
 2858              		.comm	min3DFreq,420,4
 2859              		.comm	avrFreq,420,4
 2860              		.global	lastStoreAverage
 2861              		.global	lastSentToTracker
 2862              		.global	buff_cmd
 2863              		.global	ulTick100
 2864              		.comm	Capture,2,2
 2865              		.global	ulMiliCount
 2866              		.global	ulTickCount
 2867              		.global	ulSecCount
 2868              		.global	VectorTable
 2869              		.comm	g_appStats,108,4
 2870              		.comm	g_config,28,4
 2871              		.section	.bss.lastBackNormal,"aw",%nobits
 2872              		.align	2
 2873              		.set	.LANCHOR1,. + 0
 2876              	lastBackNormal:
 2877 0000 00000000 		.space	4
 2878              		.section	.bss.sp,"aw",%nobits
 2879              		.align	1
 2882              	sp:
 2883 0000 0000     		.space	2
 2884              		.section	.bss.sm,"aw",%nobits
 2885              		.align	1
 2888              	sm:
 2889 0000 0000     		.space	2
 2890              		.section	.bss.freqIdx,"aw",%nobits
 2891              		.align	2
 2892              		.set	.LANCHOR10,. + 0
 2895              	freqIdx:
 2896 0000 00000000 		.space	4
 2897              		.section	.bss.buff_cmd,"aw",%nobits
 2898              		.set	.LANCHOR9,. + 0
 2901              	buff_cmd:
 2902 0000 00000000 		.space	256
 2902      00000000 
 2902      00000000 
 2902      00000000 
 2902      00000000 
 2903              		.section	.bss.sameIdx,"aw",%nobits
 2904              		.set	.LANCHOR4,. + 0
 2907              	sameIdx:
 2908 0000 00       		.space	1
 2909              		.section	.bss.avrTimFreq,"aw",%nobits
 2910              		.align	2
 2911              		.set	.LANCHOR11,. + 0
 2914              	avrTimFreq:
 2915 0000 00000000 		.space	20
 2915      00000000 
 2915      00000000 
 2915      00000000 
 2915      00000000 
 2916              		.section	.bss.pitch,"aw",%nobits
 2917              		.align	3
 2920              	pitch:
 2921 0000 00000000 		.space	8
 2921      00000000 
 2922              		.section	.bss.cm,"aw",%nobits
 2923              		.align	1
 2926              	cm:
 2927 0000 0000     		.space	2
 2928              		.section	.bss.x_rate,"aw",%nobits
 2929              		.align	3
 2932              	x_rate:
 2933 0000 00000000 		.space	8
 2933      00000000 
 2934              		.section	.bss.lastStoreAverage,"aw",%nobits
 2935              		.align	2
 2936              		.set	.LANCHOR3,. + 0
 2939              	lastStoreAverage:
 2940 0000 00000000 		.space	4
 2941              		.section	.bss.lastFreg,"aw",%nobits
 2942              		.align	2
 2943              		.set	.LANCHOR12,. + 0
 2946              	lastFreg:
 2947 0000 00000000 		.space	4
 2948              		.section	.bss.Z_rate,"aw",%nobits
 2949              		.align	3
 2952              	Z_rate:
 2953 0000 00000000 		.space	8
 2953      00000000 
 2954              		.section	.bss.idx,"aw",%nobits
 2955              		.set	.LANCHOR5,. + 0
 2958              	idx:
 2959 0000 00       		.space	1
 2960              		.section	.rodata.str1.1,"aMS",%progbits,1
 2961              	.LC24:
 2962 0000 463D2575 		.ascii	"F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%"
 2962      2045463D 
 2962      25752046 
 2962      31353D25 
 2962      75204E3D 
 2963 0033 64204655 		.ascii	"d FU=%u EM=%u x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d "
 2963      3D257520 
 2963      454D3D25 
 2963      7520783D 
 2963      25642079 
 2964 0066 73746570 		.ascii	"step=%d T=%d E=%d\015\012\000"
 2964      3D256420 
 2964      543D2564 
 2964      20453D25 
 2964      640D0A00 
 2965              	.LC26:
 2966 007a 463D2578 		.ascii	"F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%"
 2966      2045463D 
 2966      25782046 
 2966      31353D25 
 2966      78204E3D 
 2967 00ad 3034782E 		.ascii	"04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d idx3D=%d c"
 2967      30204D4E 
 2967      3D253034 
 2967      782E3020 
 2967      534E3D25 
 2968 00e0 33443D25 		.ascii	"3D=%d dT=%d tO=%d fM=%d dX=%d dY=%d ST=%d T=%d E=%d"
 2968      64206454 
 2968      3D256420 
 2968      744F3D25 
 2968      6420664D 
 2969 0113 0D0A00   		.ascii	"\015\012\000"
 2970              	.LC28:
 2971 0116 463D2578 		.ascii	"F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%"
 2971      2045463D 
 2971      25782046 
 2971      31353D25 
 2971      78204E3D 
 2972 0149 3034782E 		.ascii	"04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d T=%d E=%d "
 2972      30204D4E 
 2972      3D253034 
 2972      782E3020 
 2972      534E3D25 
 2973 017c 46553D25 		.ascii	"FU=%x EM=%x fM=%d V=%s ST=%d\015\012\000"
 2973      7820454D 
 2973      3D257820 
 2973      664D3D25 
 2973      6420563D 
 2974              	.LC30:
 2975 019b 332E302E 		.ascii	"3.0.24\000"
 2975      323400
 2976              	.LC58:
 2977 01a2 0D0A5379 		.ascii	"\015\012System ready (%s)\015\012\000"
 2977      7374656D 
 2977      20726561 
 2977      64792028 
 2977      2573290D 
 2978              	.LC60:
 2979 01b8 4C4C5333 		.ascii	"LLS3.0.24F0-20221007\000"
 2979      2E302E32 
 2979      3446302D 
 2979      32303232 
 2979      31303037 
 2980              	.LC62:
 2981 01cd 0D0A4655 		.ascii	"\015\012FULL=%u EMPTY=%u timeout=%d fM=%d interval="
 2981      4C4C3D25 
 2981      7520454D 
 2981      5054593D 
 2981      25752074 
 2982 01fa 25642064 		.ascii	"%d dX=%d dY=%d DeviceID=%s\015\012\015\012\000"
 2982      583D2564 
 2982      2064593D 
 2982      25642044 
 2982      65766963 
 2983              		.section	.bss.ulMiliCount,"aw",%nobits
 2984              		.align	2
 2985              		.set	.LANCHOR14,. + 0
 2988              	ulMiliCount:
 2989 0000 00000000 		.space	4
 2990              		.section	.bss.ulSecCount,"aw",%nobits
 2991              		.align	2
 2992              		.set	.LANCHOR0,. + 0
 2995              	ulSecCount:
 2996 0000 00000000 		.space	4
 2997              		.section	.bss.roll,"aw",%nobits
 2998              		.align	3
 3001              	roll:
 3002 0000 00000000 		.space	8
 3002      00000000 
 3003              		.section	.bss.cp,"aw",%nobits
 3004              		.align	1
 3007              	cp:
 3008 0000 0000     		.space	2
 3009              		.section	.bss.yaw,"aw",%nobits
 3010              		.align	3
 3013              	yaw:
 3014 0000 00000000 		.space	8
 3014      00000000 
 3015              		.section	.bss.ulTick100,"aw",%nobits
 3016              		.align	2
 3019              	ulTick100:
 3020 0000 00000000 		.space	4
 3021              		.section	.RAMVectorTable,"aw",%progbits
 3022              		.align	2
 3023              		.set	.LANCHOR13,. + 0
 3026              	VectorTable:
 3027 0000 00000000 		.space	192
 3027      00000000 
 3027      00000000 
 3027      00000000 
 3027      00000000 
 3028              		.section	.bss.minIdx,"aw",%nobits
 3031              	minIdx:
 3032 0000 00       		.space	1
 3033              		.section	.bss.idx3D,"aw",%nobits
 3034              		.set	.LANCHOR6,. + 0
 3037              	idx3D:
 3038 0000 00       		.space	1
 3039              		.section	.bss.y_rate,"aw",%nobits
 3040              		.align	3
 3043              	y_rate:
 3044 0000 00000000 		.space	8
 3044      00000000 
 3045              		.section	.bss.lastGetTemper,"aw",%nobits
 3046              		.align	2
 3047              		.set	.LANCHOR2,. + 0
 3050              	lastGetTemper:
 3051 0000 00000000 		.space	4
 3052              		.section	.data.compare_levels,"aw",%progbits
 3053              		.align	2
 3054              		.set	.LANCHOR7,. + 0
 3057              	compare_levels:
 3058 0000 FFFFFFFF 		.word	-1
 3059 0004 00000000 		.space	20
 3059      00000000 
 3059      00000000 
 3059      00000000 
 3059      00000000 
 3060              		.section	.bss.ulTickCount,"aw",%nobits
 3061              		.align	2
 3064              	ulTickCount:
 3065 0000 00000000 		.space	4
 3066              		.section	.bss.lastSentToTracker,"aw",%nobits
 3067              		.align	2
 3068              		.set	.LANCHOR8,. + 0
 3071              	lastSentToTracker:
 3072 0000 00000000 		.space	4
 3073              		.text
 3074              	.Letext0:
 3075              		.file 4 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/stm32f
 3076              		.file 5 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 3077              		.file 6 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/global
 3078              		.file 7 "../Source/DataUtil.h"
 3079              		.file 8 "../Source/LSM6DS3.h"
 3080              		.file 9 "../Source/EMA.h"
 3081              		.file 10 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\C
 3082              		.file 11 "../Source/xprintf.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:18     .text.cleanWDT:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:23     .text.cleanWDT:00000000 cleanWDT
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:48     .text.calc_fuel_level:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:53     .text.calc_fuel_level:00000000 calc_fuel_level
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:375    .text.calc_fuel_level:00000164 $d
                            *COM*:0000001c g_config
                            *COM*:0000006c g_appStats
                            *COM*:00000001 preErrorState
                            *COM*:00000348 storeLevels
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:389    .text.output_data:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:394    .text.output_data:00000000 output_data
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:1066   .text.output_data:0000032c $d
                            *COM*:000001a4 min3DFreq
                            *COM*:0000001c prePulse
                            *COM*:000001a4 same3DFreq
                            *COM*:000001a4 avrFreq
                            *COM*:000001a4 avrFreq3D
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:1081   .text.output_data:00000360 $t
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:1761   .text.output_data:00000644 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:1770   .text.output_data:0000065c $t
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2027   .text.output_data:000007dc $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2040   .text.process_command_from_pc:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2045   .text.process_command_from_pc:00000000 process_command_from_pc
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2071   .text.process_command_from_pc:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2082   .text.handlerSensorData:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2087   .text.handlerSensorData:00000000 handlerSensorData
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2380   .text.handlerSensorData:00000190 $d
                            *COM*:00000004 cutOff
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2396   .text.IWDG_init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2401   .text.IWDG_init:00000000 IWDG_init
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2438   .text.IWDG_init:00000030 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2444   .text.startup.main:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2449   .text.startup.main:00000000 main
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2792   .text.startup.main:000001a8 $d
                            *COM*:00000004 pith_t
                            *COM*:00000004 roll_t
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2946   .bss.lastFreg:00000000 lastFreg
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2895   .bss.freqIdx:00000000 freqIdx
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2914   .bss.avrTimFreq:00000000 avrTimFreq
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3013   .bss.yaw:00000000 yaw
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2920   .bss.pitch:00000000 pitch
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3001   .bss.roll:00000000 roll
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2888   .bss.sm:00000000 sm
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2882   .bss.sp:00000000 sp
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2926   .bss.cm:00000000 cm
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3007   .bss.cp:00000000 cp
                            *COM*:00000008 kalAngleZ
                            *COM*:00000008 kalAngleY
                            *COM*:00000008 kalAngleX
                            *COM*:00000008 delta
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2952   .bss.Z_rate:00000000 Z_rate
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3043   .bss.y_rate:00000000 y_rate
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2932   .bss.x_rate:00000000 x_rate
                            *COM*:00000008 gyroZrate
                            *COM*:00000008 gyroYrate
                            *COM*:00000008 gyroXrate
                            *COM*:00000002 gyroZ
                            *COM*:00000002 gyroY
                            *COM*:00000002 gyroX
                            *COM*:00000002 accZ
                            *COM*:00000002 accY
                            *COM*:00000002 accX
                            *COM*:00000004 timer
                            *COM*:00000004 lastOut
                            *COM*:00000004 lastReadAccelo
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2876   .bss.lastBackNormal:00000000 lastBackNormal
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3050   .bss.lastGetTemper:00000000 lastGetTemper
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3037   .bss.idx3D:00000000 idx3D
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2907   .bss.sameIdx:00000000 sameIdx
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3031   .bss.minIdx:00000000 minIdx
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2958   .bss.idx:00000000 idx
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3057   .data.compare_levels:00000000 compare_levels
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2939   .bss.lastStoreAverage:00000000 lastStoreAverage
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3071   .bss.lastSentToTracker:00000000 lastSentToTracker
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2901   .bss.buff_cmd:00000000 buff_cmd
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3019   .bss.ulTick100:00000000 ulTick100
                            *COM*:00000002 Capture
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2988   .bss.ulMiliCount:00000000 ulMiliCount
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3064   .bss.ulTickCount:00000000 ulTickCount
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2995   .bss.ulSecCount:00000000 ulSecCount
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3026   .RAMVectorTable:00000000 VectorTable
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2872   .bss.lastBackNormal:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2879   .bss.sp:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2885   .bss.sm:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2891   .bss.freqIdx:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2902   .bss.buff_cmd:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2908   .bss.sameIdx:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2910   .bss.avrTimFreq:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2917   .bss.pitch:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2923   .bss.cm:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2929   .bss.x_rate:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2935   .bss.lastStoreAverage:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2942   .bss.lastFreg:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2949   .bss.Z_rate:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2959   .bss.idx:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2984   .bss.ulMiliCount:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2991   .bss.ulSecCount:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:2998   .bss.roll:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3004   .bss.cp:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3010   .bss.yaw:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3016   .bss.ulTick100:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3022   .RAMVectorTable:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3032   .bss.minIdx:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3038   .bss.idx3D:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3040   .bss.y_rate:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3046   .bss.lastGetTemper:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3053   .data.compare_levels:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3061   .bss.ulTickCount:00000000 $d
C:\Users\khanh\AppData\Local\Temp\ccNMimbb.s:3067   .bss.lastSentToTracker:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
IWDG_SetWindowValue
__aeabi_ui2f
__aeabi_fdiv
__aeabi_fmul
__aeabi_f2iz
__aeabi_idiv
__aeabi_uidiv
getTemperature
xprintf
server_on_command
__aeabi_f2d
__aeabi_d2uiz
__aeabi_ui2d
__aeabi_dmul
__aeabi_dcmpgt
__aeabi_dcmplt
addStock
SensorEMA10
SensorEMA5
IWDG_Enable
IWDG_WriteAccessCmd
IWDG_SetPrescaler
IWDG_SetReload
IWDG_GetFlagStatus
__aeabi_i2f
RCC_APB2PeriphResetCmd
SYSCFG_MemoryRemapConfig
SystemInit
SysTick_CLKSourceConfig
PC_uartInit
FlashInit
load_config
timeInit
internalTempInit
LSM6DS3_Initialize
delay_ms
LSM6DS3_Detect
LSM6DS3_XL_Start
LSM6DS3_GS_Start
Start_Kalman_Algorithm
Kalman_SetFlag
memset
Kalman_GetFlag
LSM6DS3_IMU_GetMeasurements
Execute_Kalman_Filter
Kalman_GetRoll
Kalman_GetPitch
Kalman_Getyaw
LSM6DS3_Temperature_Int16
Kalman_ClearFlag
SystemCoreClock
PC_uart_putChar
xfunc_out
