   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"system_stm32f0xx.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SystemInit,"ax",%progbits
  18              		.align	1
  19              		.global	SystemInit
  20              		.code	16
  21              		.thumb_func
  23              	SystemInit:
  24              	.LFB33:
  25              		.file 1 "../Source/system_stm32f0xx.c"
   1:../Source/system_stm32f0xx.c **** /**
   2:../Source/system_stm32f0xx.c ****   ******************************************************************************
   3:../Source/system_stm32f0xx.c ****   * @file    system_stm32f0xx.c
   4:../Source/system_stm32f0xx.c ****   * @author  MCD Application Team
   5:../Source/system_stm32f0xx.c ****   * @version V1.4.0
   6:../Source/system_stm32f0xx.c ****   * @date    05-December-2014
   7:../Source/system_stm32f0xx.c ****   * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
   8:../Source/system_stm32f0xx.c ****   *          This file contains the system clock configuration for STM32F0xx devices,
   9:../Source/system_stm32f0xx.c ****   *          and is generated by the clock configuration tool  
  10:../Source/system_stm32f0xx.c ****   *          STM32F0xx_Clock_Configuration_V1.0.0.xls
  11:../Source/system_stm32f0xx.c ****   *
  12:../Source/system_stm32f0xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
  13:../Source/system_stm32f0xx.c ****   *     user application:
  14:../Source/system_stm32f0xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  15:../Source/system_stm32f0xx.c ****   *                      and Divider factors, AHB/APBx prescalers and Flash settings),
  16:../Source/system_stm32f0xx.c ****   *                      depending on the configuration made in the clock xls tool.
  17:../Source/system_stm32f0xx.c ****   *                      This function is called at startup just after reset and 
  18:../Source/system_stm32f0xx.c ****   *                      before branch to main program. This call is made inside
  19:../Source/system_stm32f0xx.c ****   *                      the "startup_stm32f0xx.s" file.
  20:../Source/system_stm32f0xx.c ****   *
  21:../Source/system_stm32f0xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  22:../Source/system_stm32f0xx.c ****   *                                  by the user application to setup the SysTick 
  23:../Source/system_stm32f0xx.c ****   *                                  timer or configure other parameters.
  24:../Source/system_stm32f0xx.c ****   *
  25:../Source/system_stm32f0xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  26:../Source/system_stm32f0xx.c ****   *                                 be called whenever the core clock is changed
  27:../Source/system_stm32f0xx.c ****   *                                 during program execution.
  28:../Source/system_stm32f0xx.c ****   *
  29:../Source/system_stm32f0xx.c ****   * 2. After each device reset the HSI (8 MHz Range) is used as system clock source.
  30:../Source/system_stm32f0xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
  31:../Source/system_stm32f0xx.c ****   *    configure the system clock before to branch to main program.
  32:../Source/system_stm32f0xx.c ****   *
  33:../Source/system_stm32f0xx.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  34:../Source/system_stm32f0xx.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  35:../Source/system_stm32f0xx.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  36:../Source/system_stm32f0xx.c ****   *
  37:../Source/system_stm32f0xx.c ****   * 4. The default value of HSE crystal is set to 8MHz, refer to "HSE_VALUE" define
  38:../Source/system_stm32f0xx.c ****   *    in "stm32f0xx.h" file. When HSE is used as system clock source, directly or
  39:../Source/system_stm32f0xx.c ****   *    through PLL, and you are using different crystal you have to adapt the HSE
  40:../Source/system_stm32f0xx.c ****   *    value to your own configuration.
  41:../Source/system_stm32f0xx.c ****   *
  42:../Source/system_stm32f0xx.c ****   * 5. This file configures the system clock as follows:
  43:../Source/system_stm32f0xx.c ****   *=============================================================================
  44:../Source/system_stm32f0xx.c ****   *                         System Clock Configuration
  45:../Source/system_stm32f0xx.c ****   *=============================================================================
  46:../Source/system_stm32f0xx.c ****   *        System Clock source          | PLL(HSE)
  47:../Source/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  48:../Source/system_stm32f0xx.c ****   *        SYSCLK                       | 48000000 Hz
  49:../Source/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  50:../Source/system_stm32f0xx.c ****   *        HCLK                         | 48000000 Hz
  51:../Source/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  52:../Source/system_stm32f0xx.c ****   *        AHB Prescaler                | 1
  53:../Source/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  54:../Source/system_stm32f0xx.c ****   *        APB1 Prescaler               | 1
  55:../Source/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  56:../Source/system_stm32f0xx.c ****   *        APB2 Prescaler               | 1
  57:../Source/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  58:../Source/system_stm32f0xx.c ****   *        HSE Frequency                | 8000000 Hz
  59:../Source/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  60:../Source/system_stm32f0xx.c ****   *        PLL MUL                      | 6
  61:../Source/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  62:../Source/system_stm32f0xx.c ****   *        VDD                          | 3.3 V
  63:../Source/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  64:../Source/system_stm32f0xx.c ****   *        Flash Latency                | 1 WS
  65:../Source/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  66:../Source/system_stm32f0xx.c ****   *=============================================================================
  67:../Source/system_stm32f0xx.c ****   ******************************************************************************
  68:../Source/system_stm32f0xx.c ****   * @attention
  69:../Source/system_stm32f0xx.c ****   *
  70:../Source/system_stm32f0xx.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  71:../Source/system_stm32f0xx.c ****   *
  72:../Source/system_stm32f0xx.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  73:../Source/system_stm32f0xx.c ****   * You may not use this file except in compliance with the License.
  74:../Source/system_stm32f0xx.c ****   * You may obtain a copy of the License at:
  75:../Source/system_stm32f0xx.c ****   *
  76:../Source/system_stm32f0xx.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  77:../Source/system_stm32f0xx.c ****   *
  78:../Source/system_stm32f0xx.c ****   * Unless required by applicable law or agreed to in writing, software 
  79:../Source/system_stm32f0xx.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  80:../Source/system_stm32f0xx.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  81:../Source/system_stm32f0xx.c ****   * See the License for the specific language governing permissions and
  82:../Source/system_stm32f0xx.c ****   * limitations under the License.
  83:../Source/system_stm32f0xx.c ****   *
  84:../Source/system_stm32f0xx.c ****   ******************************************************************************
  85:../Source/system_stm32f0xx.c ****   */
  86:../Source/system_stm32f0xx.c **** 
  87:../Source/system_stm32f0xx.c **** /** @addtogroup CMSIS
  88:../Source/system_stm32f0xx.c ****   * @{
  89:../Source/system_stm32f0xx.c ****   */
  90:../Source/system_stm32f0xx.c **** 
  91:../Source/system_stm32f0xx.c **** /** @addtogroup stm32f0xx_system
  92:../Source/system_stm32f0xx.c ****   * @{
  93:../Source/system_stm32f0xx.c ****   */  
  94:../Source/system_stm32f0xx.c ****   
  95:../Source/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Includes
  96:../Source/system_stm32f0xx.c ****   * @{
  97:../Source/system_stm32f0xx.c ****   */
  98:../Source/system_stm32f0xx.c **** 
  99:../Source/system_stm32f0xx.c **** #include "stm32f0xx.h"
 100:../Source/system_stm32f0xx.c **** 
 101:../Source/system_stm32f0xx.c **** /**
 102:../Source/system_stm32f0xx.c ****   * @}
 103:../Source/system_stm32f0xx.c ****   */
 104:../Source/system_stm32f0xx.c **** 
 105:../Source/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
 106:../Source/system_stm32f0xx.c ****   * @{
 107:../Source/system_stm32f0xx.c ****   */
 108:../Source/system_stm32f0xx.c **** 
 109:../Source/system_stm32f0xx.c **** /**
 110:../Source/system_stm32f0xx.c ****   * @}
 111:../Source/system_stm32f0xx.c ****   */
 112:../Source/system_stm32f0xx.c **** 
 113:../Source/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Defines
 114:../Source/system_stm32f0xx.c ****   * @{
 115:../Source/system_stm32f0xx.c ****   */
 116:../Source/system_stm32f0xx.c **** /**
 117:../Source/system_stm32f0xx.c ****   * @}
 118:../Source/system_stm32f0xx.c ****   */
 119:../Source/system_stm32f0xx.c **** 
 120:../Source/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Macros
 121:../Source/system_stm32f0xx.c ****   * @{
 122:../Source/system_stm32f0xx.c ****   */
 123:../Source/system_stm32f0xx.c **** 
 124:../Source/system_stm32f0xx.c **** /**
 125:../Source/system_stm32f0xx.c ****   * @}
 126:../Source/system_stm32f0xx.c ****   */
 127:../Source/system_stm32f0xx.c **** 
 128:../Source/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Variables
 129:../Source/system_stm32f0xx.c ****   * @{
 130:../Source/system_stm32f0xx.c ****   */
 131:../Source/system_stm32f0xx.c **** uint32_t SystemCoreClock    = 48000000;
 132:../Source/system_stm32f0xx.c **** __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 133:../Source/system_stm32f0xx.c **** 
 134:../Source/system_stm32f0xx.c **** /**
 135:../Source/system_stm32f0xx.c ****   * @}
 136:../Source/system_stm32f0xx.c ****   */
 137:../Source/system_stm32f0xx.c **** 
 138:../Source/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
 139:../Source/system_stm32f0xx.c ****   * @{
 140:../Source/system_stm32f0xx.c ****   */
 141:../Source/system_stm32f0xx.c **** 
 142:../Source/system_stm32f0xx.c **** static void SetSysClock(void);
 143:../Source/system_stm32f0xx.c **** 
 144:../Source/system_stm32f0xx.c **** /**
 145:../Source/system_stm32f0xx.c ****   * @}
 146:../Source/system_stm32f0xx.c ****   */
 147:../Source/system_stm32f0xx.c **** 
 148:../Source/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Functions
 149:../Source/system_stm32f0xx.c ****   * @{
 150:../Source/system_stm32f0xx.c ****   */
 151:../Source/system_stm32f0xx.c **** 
 152:../Source/system_stm32f0xx.c **** /**
 153:../Source/system_stm32f0xx.c ****   * @brief  Setup the microcontroller system.
 154:../Source/system_stm32f0xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 155:../Source/system_stm32f0xx.c ****   *         SystemCoreClock variable.
 156:../Source/system_stm32f0xx.c ****   * @param  None
 157:../Source/system_stm32f0xx.c ****   * @retval None
 158:../Source/system_stm32f0xx.c ****   */
 159:../Source/system_stm32f0xx.c **** void SystemInit (void)
 160:../Source/system_stm32f0xx.c **** {    
  26              		.loc 1 160 0
  27              		.cfi_startproc
  28 0000 07B5     		push	{r0, r1, r2, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 16
  31              		.cfi_offset 0, -16
  32              		.cfi_offset 1, -12
  33              		.cfi_offset 2, -8
  34              		.cfi_offset 14, -4
 161:../Source/system_stm32f0xx.c ****   /* Set HSION bit */
 162:../Source/system_stm32f0xx.c ****   RCC->CR |= (uint32_t)0x00000001;
  35              		.loc 1 162 0
  36 0002 344B     		ldr	r3, .L12
  37 0004 0122     		mov	r2, #1
  38 0006 1968     		ldr	r1, [r3]
  39 0008 1143     		orr	r1, r2
  40 000a 1960     		str	r1, [r3]
 163:../Source/system_stm32f0xx.c **** 
 164:../Source/system_stm32f0xx.c **** #if defined(STM32F051)  
 165:../Source/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
 166:../Source/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80C;
  41              		.loc 1 166 0
  42 000c 5868     		ldr	r0, [r3, #4]
  43 000e 3249     		ldr	r1, .L12+4
  44 0010 0140     		and	r1, r0
  45 0012 5960     		str	r1, [r3, #4]
 167:../Source/system_stm32f0xx.c **** #else
 168:../Source/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
 169:../Source/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0x08FFB80C;
 170:../Source/system_stm32f0xx.c **** #endif /* STM32F051 */
 171:../Source/system_stm32f0xx.c ****   
 172:../Source/system_stm32f0xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 173:../Source/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  46              		.loc 1 173 0
  47 0014 1868     		ldr	r0, [r3]
  48 0016 3149     		ldr	r1, .L12+8
  49 0018 0140     		and	r1, r0
  50 001a 1960     		str	r1, [r3]
 174:../Source/system_stm32f0xx.c **** 
 175:../Source/system_stm32f0xx.c ****   /* Reset HSEBYP bit */
 176:../Source/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  51              		.loc 1 176 0
  52 001c 1868     		ldr	r0, [r3]
  53 001e 3049     		ldr	r1, .L12+12
  54 0020 0140     		and	r1, r0
  55 0022 1960     		str	r1, [r3]
 177:../Source/system_stm32f0xx.c **** 
 178:../Source/system_stm32f0xx.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 179:../Source/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFF;
  56              		.loc 1 179 0
  57 0024 5868     		ldr	r0, [r3, #4]
  58 0026 2F49     		ldr	r1, .L12+16
  59 0028 0140     		and	r1, r0
  60 002a 5960     		str	r1, [r3, #4]
 180:../Source/system_stm32f0xx.c **** 
 181:../Source/system_stm32f0xx.c ****   /* Reset PREDIV1[3:0] bits */
 182:../Source/system_stm32f0xx.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
  61              		.loc 1 182 0
  62 002c D96A     		ldr	r1, [r3, #44]
  63 002e 0F20     		mov	r0, #15
  64 0030 8143     		bic	r1, r0
  65 0032 D962     		str	r1, [r3, #44]
 183:../Source/system_stm32f0xx.c **** 
 184:../Source/system_stm32f0xx.c ****   /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
 185:../Source/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
  66              		.loc 1 185 0
  67 0034 186B     		ldr	r0, [r3, #48]
  68 0036 2C49     		ldr	r1, .L12+20
  69 0038 0140     		and	r1, r0
  70 003a 1963     		str	r1, [r3, #48]
 186:../Source/system_stm32f0xx.c **** 
 187:../Source/system_stm32f0xx.c ****   /* Reset HSI14 bit */
 188:../Source/system_stm32f0xx.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
  71              		.loc 1 188 0
  72 003c 586B     		ldr	r0, [r3, #52]
  73 003e 9043     		bic	r0, r2
 189:../Source/system_stm32f0xx.c **** 
 190:../Source/system_stm32f0xx.c ****   /* Disable all interrupts */
 191:../Source/system_stm32f0xx.c ****   RCC->CIR = 0x00000000;
  74              		.loc 1 191 0
  75 0040 0022     		mov	r2, #0
 188:../Source/system_stm32f0xx.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
  76              		.loc 1 188 0
  77 0042 5863     		str	r0, [r3, #52]
  78              		.loc 1 191 0
  79 0044 9A60     		str	r2, [r3, #8]
  80              	.LBB4:
  81              	.LBB5:
 192:../Source/system_stm32f0xx.c **** 
 193:../Source/system_stm32f0xx.c ****   /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
 194:../Source/system_stm32f0xx.c ****   SetSysClock();
 195:../Source/system_stm32f0xx.c **** }
 196:../Source/system_stm32f0xx.c **** 
 197:../Source/system_stm32f0xx.c **** /**
 198:../Source/system_stm32f0xx.c ****   * @brief  Update SystemCoreClock according to Clock Register Values
 199:../Source/system_stm32f0xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 200:../Source/system_stm32f0xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 201:../Source/system_stm32f0xx.c ****   *         other parameters.
 202:../Source/system_stm32f0xx.c ****   *
 203:../Source/system_stm32f0xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 204:../Source/system_stm32f0xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 205:../Source/system_stm32f0xx.c ****   *         based on this variable will be incorrect.         
 206:../Source/system_stm32f0xx.c ****   *
 207:../Source/system_stm32f0xx.c ****   * @note   - The system frequency computed by this function is not the real 
 208:../Source/system_stm32f0xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 209:../Source/system_stm32f0xx.c ****   *           constant and the selected clock source:
 210:../Source/system_stm32f0xx.c ****   *
 211:../Source/system_stm32f0xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 212:../Source/system_stm32f0xx.c ****   *                                              
 213:../Source/system_stm32f0xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 214:../Source/system_stm32f0xx.c ****   *                          
 215:../Source/system_stm32f0xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 216:../Source/system_stm32f0xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 217:../Source/system_stm32f0xx.c ****   *
 218:../Source/system_stm32f0xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f0xx.h file (default value
 219:../Source/system_stm32f0xx.c ****   *             8 MHz) but the real value may vary depending on the variations
 220:../Source/system_stm32f0xx.c ****   *             in voltage and temperature.
 221:../Source/system_stm32f0xx.c ****   *
 222:../Source/system_stm32f0xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f0xx.h file (default value
 223:../Source/system_stm32f0xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 224:../Source/system_stm32f0xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 225:../Source/system_stm32f0xx.c ****   *              have wrong result.
 226:../Source/system_stm32f0xx.c ****   *
 227:../Source/system_stm32f0xx.c ****   *         - The result of this function could be not correct when using fractional
 228:../Source/system_stm32f0xx.c ****   *           value for HSE crystal.
 229:../Source/system_stm32f0xx.c ****   * @param  None
 230:../Source/system_stm32f0xx.c ****   * @retval None
 231:../Source/system_stm32f0xx.c ****   */
 232:../Source/system_stm32f0xx.c **** void SystemCoreClockUpdate (void)
 233:../Source/system_stm32f0xx.c **** {
 234:../Source/system_stm32f0xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
 235:../Source/system_stm32f0xx.c **** 
 236:../Source/system_stm32f0xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 237:../Source/system_stm32f0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 238:../Source/system_stm32f0xx.c ****   
 239:../Source/system_stm32f0xx.c ****   switch (tmp)
 240:../Source/system_stm32f0xx.c ****   {
 241:../Source/system_stm32f0xx.c ****     case 0x00:  /* HSI used as system clock */
 242:../Source/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 243:../Source/system_stm32f0xx.c ****       break;
 244:../Source/system_stm32f0xx.c ****     case 0x04:  /* HSE used as system clock */
 245:../Source/system_stm32f0xx.c ****       SystemCoreClock = HSE_VALUE;
 246:../Source/system_stm32f0xx.c ****       break;
 247:../Source/system_stm32f0xx.c ****     case 0x08:  /* PLL used as system clock */
 248:../Source/system_stm32f0xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 249:../Source/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 250:../Source/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 251:../Source/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 252:../Source/system_stm32f0xx.c ****       
 253:../Source/system_stm32f0xx.c ****       if (pllsource == 0x00)
 254:../Source/system_stm32f0xx.c ****       {
 255:../Source/system_stm32f0xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 256:../Source/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 257:../Source/system_stm32f0xx.c ****       }
 258:../Source/system_stm32f0xx.c ****       else
 259:../Source/system_stm32f0xx.c ****       {
 260:../Source/system_stm32f0xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 261:../Source/system_stm32f0xx.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
 262:../Source/system_stm32f0xx.c ****         SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 263:../Source/system_stm32f0xx.c ****       }      
 264:../Source/system_stm32f0xx.c ****       break;
 265:../Source/system_stm32f0xx.c ****     default: /* HSI used as system clock */
 266:../Source/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 267:../Source/system_stm32f0xx.c ****       break;
 268:../Source/system_stm32f0xx.c ****   }
 269:../Source/system_stm32f0xx.c ****   /* Compute HCLK clock frequency ----------------*/
 270:../Source/system_stm32f0xx.c ****   /* Get HCLK prescaler */
 271:../Source/system_stm32f0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 272:../Source/system_stm32f0xx.c ****   /* HCLK clock frequency */
 273:../Source/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;  
 274:../Source/system_stm32f0xx.c **** }
 275:../Source/system_stm32f0xx.c **** 
 276:../Source/system_stm32f0xx.c **** /**
 277:../Source/system_stm32f0xx.c ****   * @brief  Configures the System clock frequency, AHB/APBx prescalers and Flash
 278:../Source/system_stm32f0xx.c ****   *         settings.
 279:../Source/system_stm32f0xx.c ****   * @note   This function should be called only once the RCC clock configuration
 280:../Source/system_stm32f0xx.c ****   *         is reset to the default reset state (done in SystemInit() function).
 281:../Source/system_stm32f0xx.c ****   * @param  None
 282:../Source/system_stm32f0xx.c ****   * @retval None
 283:../Source/system_stm32f0xx.c ****   */
 284:../Source/system_stm32f0xx.c **** static void SetSysClock(void)
 285:../Source/system_stm32f0xx.c **** {
 286:../Source/system_stm32f0xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
  82              		.loc 1 286 0
  83 0046 0092     		str	r2, [sp]
  84              	.LVL0:
  85 0048 0192     		str	r2, [sp, #4]
  86              	.LVL1:
 287:../Source/system_stm32f0xx.c ****   
 288:../Source/system_stm32f0xx.c ****   /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
 289:../Source/system_stm32f0xx.c ****   /* Enable HSE */    
 290:../Source/system_stm32f0xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
  87              		.loc 1 290 0
  88 004a 1968     		ldr	r1, [r3]
  89 004c 8020     		mov	r0, #128
  90 004e 4202     		lsl	r2, r0, #9
  91 0050 0A43     		orr	r2, r1
  92 0052 1A60     		str	r2, [r3]
  93              	.L3:
 291:../Source/system_stm32f0xx.c ****  
 292:../Source/system_stm32f0xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 293:../Source/system_stm32f0xx.c ****   do
 294:../Source/system_stm32f0xx.c ****   {
 295:../Source/system_stm32f0xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
  94              		.loc 1 295 0
  95 0054 1868     		ldr	r0, [r3]
  96 0056 8022     		mov	r2, #128
  97 0058 9202     		lsl	r2, r2, #10
  98 005a 1040     		and	r0, r2
  99              	.LVL2:
 100 005c 0190     		str	r0, [sp, #4]
 101              	.LVL3:
 296:../Source/system_stm32f0xx.c ****     StartUpCounter++;  
 102              		.loc 1 296 0
 103 005e 0099     		ldr	r1, [sp]
 104 0060 0131     		add	r1, r1, #1
 105              	.LVL4:
 106 0062 0091     		str	r1, [sp]
 107              	.LVL5:
 297:../Source/system_stm32f0xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 108              		.loc 1 297 0
 109 0064 0198     		ldr	r0, [sp, #4]
 110              	.LVL6:
 111 0066 0028     		cmp	r0, #0
 112 0068 04D1     		bne	.L2
 113 006a 0098     		ldr	r0, [sp]
 114 006c A021     		mov	r1, #160
 115              	.LVL7:
 116 006e C901     		lsl	r1, r1, #7
 117 0070 8842     		cmp	r0, r1
 118 0072 EFD1     		bne	.L3
 119              	.L2:
 298:../Source/system_stm32f0xx.c **** 
 299:../Source/system_stm32f0xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 120              		.loc 1 299 0
 121 0074 1868     		ldr	r0, [r3]
 122 0076 0240     		and	r2, r0
 123 0078 00D0     		beq	.L4
 300:../Source/system_stm32f0xx.c ****   {
 301:../Source/system_stm32f0xx.c ****     HSEStatus = (uint32_t)0x01;
 124              		.loc 1 301 0
 125 007a 0122     		mov	r2, #1
 126              	.L4:
 302:../Source/system_stm32f0xx.c ****   }
 303:../Source/system_stm32f0xx.c ****   else
 304:../Source/system_stm32f0xx.c ****   {
 305:../Source/system_stm32f0xx.c ****     HSEStatus = (uint32_t)0x00;
 127              		.loc 1 305 0
 128 007c 0192     		str	r2, [sp, #4]
 306:../Source/system_stm32f0xx.c ****   }  
 307:../Source/system_stm32f0xx.c **** 
 308:../Source/system_stm32f0xx.c ****   if (HSEStatus == (uint32_t)0x01)
 129              		.loc 1 308 0
 130 007e 019A     		ldr	r2, [sp, #4]
 131 0080 012A     		cmp	r2, #1
 132 0082 25D1     		bne	.L1
 309:../Source/system_stm32f0xx.c ****   {
 310:../Source/system_stm32f0xx.c ****     /* Enable Prefetch Buffer and set Flash Latency */
 311:../Source/system_stm32f0xx.c ****     FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 133              		.loc 1 311 0
 134 0084 194A     		ldr	r2, .L12+24
 135 0086 1121     		mov	r1, #17
 136 0088 1160     		str	r1, [r2]
 312:../Source/system_stm32f0xx.c ****  
 313:../Source/system_stm32f0xx.c ****     /* HCLK = SYSCLK */
 314:../Source/system_stm32f0xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 137              		.loc 1 314 0
 138 008a 5868     		ldr	r0, [r3, #4]
 139 008c 5860     		str	r0, [r3, #4]
 315:../Source/system_stm32f0xx.c ****       
 316:../Source/system_stm32f0xx.c ****     /* PCLK = HCLK */
 317:../Source/system_stm32f0xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 140              		.loc 1 317 0
 141 008e 5A68     		ldr	r2, [r3, #4]
 318:../Source/system_stm32f0xx.c **** 
 319:../Source/system_stm32f0xx.c ****     /* PLL configuration = HSE * 6 = 48 MHz */
 320:../Source/system_stm32f0xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 142              		.loc 1 320 0
 143 0090 1748     		ldr	r0, .L12+28
 317:../Source/system_stm32f0xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 144              		.loc 1 317 0
 145 0092 5A60     		str	r2, [r3, #4]
 146              		.loc 1 320 0
 147 0094 5968     		ldr	r1, [r3, #4]
 321:../Source/system_stm32f0xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6
 148              		.loc 1 321 0
 149 0096 8822     		mov	r2, #136
 320:../Source/system_stm32f0xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 150              		.loc 1 320 0
 151 0098 0840     		and	r0, r1
 152 009a 5860     		str	r0, [r3, #4]
 153              		.loc 1 321 0
 154 009c 5968     		ldr	r1, [r3, #4]
 155 009e 5003     		lsl	r0, r2, #13
 156 00a0 0843     		orr	r0, r1
 157 00a2 5860     		str	r0, [r3, #4]
 322:../Source/system_stm32f0xx.c ****             
 323:../Source/system_stm32f0xx.c ****     /* Enable PLL */
 324:../Source/system_stm32f0xx.c ****     RCC->CR |= RCC_CR_PLLON;
 158              		.loc 1 324 0
 159 00a4 1968     		ldr	r1, [r3]
 160 00a6 8022     		mov	r2, #128
 161 00a8 5004     		lsl	r0, r2, #17
 162 00aa 0843     		orr	r0, r1
 163 00ac 1860     		str	r0, [r3]
 164              	.L7:
 325:../Source/system_stm32f0xx.c **** 
 326:../Source/system_stm32f0xx.c ****     /* Wait till PLL is ready */
 327:../Source/system_stm32f0xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 165              		.loc 1 327 0
 166 00ae 1868     		ldr	r0, [r3]
 167 00b0 084A     		ldr	r2, .L12
 168 00b2 8001     		lsl	r0, r0, #6
 169 00b4 FBD5     		bpl	.L7
 328:../Source/system_stm32f0xx.c ****     {
 329:../Source/system_stm32f0xx.c ****     }
 330:../Source/system_stm32f0xx.c **** 
 331:../Source/system_stm32f0xx.c ****     /* Select PLL as system clock source */
 332:../Source/system_stm32f0xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 170              		.loc 1 332 0
 171 00b6 5168     		ldr	r1, [r2, #4]
 172 00b8 0320     		mov	r0, #3
 173 00ba 8143     		bic	r1, r0
 174 00bc 5160     		str	r1, [r2, #4]
 333:../Source/system_stm32f0xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 175              		.loc 1 333 0
 176 00be 5168     		ldr	r1, [r2, #4]
 177 00c0 0220     		mov	r0, #2
 178 00c2 0143     		orr	r1, r0
 179 00c4 5160     		str	r1, [r2, #4]
 180              	.L8:
 334:../Source/system_stm32f0xx.c **** 
 335:../Source/system_stm32f0xx.c ****     /* Wait till PLL is used as system clock source */
 336:../Source/system_stm32f0xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 181              		.loc 1 336 0
 182 00c6 5968     		ldr	r1, [r3, #4]
 183 00c8 0C22     		mov	r2, #12
 184 00ca 0A40     		and	r2, r1
 185 00cc 082A     		cmp	r2, #8
 186 00ce FAD1     		bne	.L8
 187              	.L1:
 188              	.LBE5:
 189              	.LBE4:
 190              		@ sp needed for prologue
 195:../Source/system_stm32f0xx.c **** }
 191              		.loc 1 195 0
 192 00d0 07BD     		pop	{r0, r1, r2, pc}
 193              	.L13:
 194 00d2 C046     		.align	2
 195              	.L12:
 196 00d4 00100240 		.word	1073876992
 197 00d8 0CB8FFF8 		.word	-117458932
 198 00dc FFFFF6FE 		.word	-17367041
 199 00e0 FFFFFBFF 		.word	-262145
 200 00e4 FFFFC0FF 		.word	-4128769
 201 00e8 ACFEFFFF 		.word	-340
 202 00ec 00200240 		.word	1073881088
 203 00f0 FF7FC0FF 		.word	-4161537
 204              		.cfi_endproc
 205              	.LFE33:
 207              		.global	__aeabi_uidiv
 208              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 209              		.align	1
 210              		.global	SystemCoreClockUpdate
 211              		.code	16
 212              		.thumb_func
 214              	SystemCoreClockUpdate:
 215              	.LFB34:
 233:../Source/system_stm32f0xx.c **** {
 216              		.loc 1 233 0
 217              		.cfi_startproc
 218 0000 70B5     		push	{r4, r5, r6, lr}
 219              	.LCFI1:
 220              		.cfi_def_cfa_offset 16
 221              		.cfi_offset 4, -16
 222              		.cfi_offset 5, -12
 223              		.cfi_offset 6, -8
 224              		.cfi_offset 14, -4
 225              	.LVL8:
 237:../Source/system_stm32f0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 226              		.loc 1 237 0
 227 0002 154D     		ldr	r5, .L22
 228 0004 0C23     		mov	r3, #12
 229 0006 6A68     		ldr	r2, [r5, #4]
 230              	.LVL9:
 231 0008 144C     		ldr	r4, .L22+4
 232 000a 1340     		and	r3, r2
 239:../Source/system_stm32f0xx.c ****   switch (tmp)
 233              		.loc 1 239 0
 234 000c 042B     		cmp	r3, #4
 235 000e 01D0     		beq	.L17
 236 0010 082B     		cmp	r3, #8
 237 0012 02D0     		beq	.L18
 238              	.L17:
 245:../Source/system_stm32f0xx.c ****       SystemCoreClock = HSE_VALUE;
 239              		.loc 1 245 0
 240 0014 124B     		ldr	r3, .L22+8
 241 0016 2360     		str	r3, [r4]
 246:../Source/system_stm32f0xx.c ****       break;
 242              		.loc 1 246 0
 243 0018 14E0     		b	.L19
 244              	.L18:
 249:../Source/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 245              		.loc 1 249 0
 246 001a 6B68     		ldr	r3, [r5, #4]
 247              	.LVL10:
 253:../Source/system_stm32f0xx.c ****       if (pllsource == 0x00)
 248              		.loc 1 253 0
 249 001c C022     		mov	r2, #192
 250              	.LVL11:
 249:../Source/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 251              		.loc 1 249 0
 252 001e 9E02     		lsl	r6, r3, #10
 250:../Source/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 253              		.loc 1 250 0
 254 0020 6868     		ldr	r0, [r5, #4]
 255              	.LVL12:
 251:../Source/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 256              		.loc 1 251 0
 257 0022 360F     		lsr	r6, r6, #28
 253:../Source/system_stm32f0xx.c ****       if (pllsource == 0x00)
 258              		.loc 1 253 0
 259 0024 5102     		lsl	r1, r2, #9
 251:../Source/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 260              		.loc 1 251 0
 261 0026 0236     		add	r6, r6, #2
 262              	.LVL13:
 253:../Source/system_stm32f0xx.c ****       if (pllsource == 0x00)
 263              		.loc 1 253 0
 264 0028 0842     		tst	r0, r1
 265 002a 02D1     		bne	.L20
 256:../Source/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 266              		.loc 1 256 0
 267 002c 0D48     		ldr	r0, .L22+12
 268              	.LVL14:
 269 002e 4643     		mul	r6, r0
 270              	.LVL15:
 271 0030 07E0     		b	.L21
 272              	.LVL16:
 273              	.L20:
 260:../Source/system_stm32f0xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 274              		.loc 1 260 0
 275 0032 E96A     		ldr	r1, [r5, #44]
 276              	.LVL17:
 277 0034 0F22     		mov	r2, #15
 278 0036 1140     		and	r1, r2
 279              	.LVL18:
 280 0038 0131     		add	r1, r1, #1
 281              	.LVL19:
 262:../Source/system_stm32f0xx.c ****         SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 282              		.loc 1 262 0
 283 003a 0948     		ldr	r0, .L22+8
 284              	.LVL20:
 285 003c FFF7FEFF 		bl	__aeabi_uidiv
 286              	.LVL21:
 287 0040 4643     		mul	r6, r0
 288              	.LVL22:
 289              	.L21:
 290 0042 2660     		str	r6, [r4]
 291              	.L19:
 271:../Source/system_stm32f0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 292              		.loc 1 271 0
 293 0044 6C68     		ldr	r4, [r5, #4]
 294 0046 0848     		ldr	r0, .L22+16
 273:../Source/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;  
 295              		.loc 1 273 0
 296 0048 044D     		ldr	r5, .L22+4
 271:../Source/system_stm32f0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 297              		.loc 1 271 0
 298 004a 2206     		lsl	r2, r4, #24
 299 004c 130F     		lsr	r3, r2, #28
 300 004e C65C     		ldrb	r6, [r0, r3]
 301              	.LVL23:
 273:../Source/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;  
 302              		.loc 1 273 0
 303 0050 2968     		ldr	r1, [r5]
 304              		@ sp needed for prologue
 305 0052 F140     		lsr	r1, r1, r6
 306 0054 2960     		str	r1, [r5]
 307              	.LVL24:
 274:../Source/system_stm32f0xx.c **** }
 308              		.loc 1 274 0
 309 0056 70BD     		pop	{r4, r5, r6, pc}
 310              	.L23:
 311              		.align	2
 312              	.L22:
 313 0058 00100240 		.word	1073876992
 314 005c 00000000 		.word	.LANCHOR0
 315 0060 00127A00 		.word	8000000
 316 0064 00093D00 		.word	4000000
 317 0068 00000000 		.word	.LANCHOR1
 318              		.cfi_endproc
 319              	.LFE34:
 321              		.global	AHBPrescTable
 322              		.global	SystemCoreClock
 323              		.section	.data.AHBPrescTable,"aw",%progbits
 324              		.set	.LANCHOR1,. + 0
 327              	AHBPrescTable:
 328 0000 00       		.byte	0
 329 0001 00       		.byte	0
 330 0002 00       		.byte	0
 331 0003 00       		.byte	0
 332 0004 00       		.byte	0
 333 0005 00       		.byte	0
 334 0006 00       		.byte	0
 335 0007 00       		.byte	0
 336 0008 01       		.byte	1
 337 0009 02       		.byte	2
 338 000a 03       		.byte	3
 339 000b 04       		.byte	4
 340 000c 06       		.byte	6
 341 000d 07       		.byte	7
 342 000e 08       		.byte	8
 343 000f 09       		.byte	9
 344              		.section	.data.SystemCoreClock,"aw",%progbits
 345              		.align	2
 346              		.set	.LANCHOR0,. + 0
 349              	SystemCoreClock:
 350 0000 006CDC02 		.word	48000000
 351              		.text
 352              	.Letext0:
 353              		.file 2 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 354              		.file 3 "../Source/stm32f0xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f0xx.c
C:\Users\khanh\AppData\Local\Temp\ccGFeaYi.s:18     .text.SystemInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccGFeaYi.s:23     .text.SystemInit:00000000 SystemInit
C:\Users\khanh\AppData\Local\Temp\ccGFeaYi.s:196    .text.SystemInit:000000d4 $d
C:\Users\khanh\AppData\Local\Temp\ccGFeaYi.s:209    .text.SystemCoreClockUpdate:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccGFeaYi.s:214    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
C:\Users\khanh\AppData\Local\Temp\ccGFeaYi.s:313    .text.SystemCoreClockUpdate:00000058 $d
C:\Users\khanh\AppData\Local\Temp\ccGFeaYi.s:327    .data.AHBPrescTable:00000000 AHBPrescTable
C:\Users\khanh\AppData\Local\Temp\ccGFeaYi.s:349    .data.SystemCoreClock:00000000 SystemCoreClock
C:\Users\khanh\AppData\Local\Temp\ccGFeaYi.s:345    .data.SystemCoreClock:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
