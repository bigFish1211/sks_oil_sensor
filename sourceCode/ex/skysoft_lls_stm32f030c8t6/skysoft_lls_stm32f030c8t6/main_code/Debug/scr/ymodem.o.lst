   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ymodem.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	x3buffer,5560,4
  18              		.comm	g_pointer,12,4
  19              		.comm	g_config,92,4
  20              		.comm	file_name,256,4
  21              		.global	PageSize
  22              		.data
  23              		.align	1
  26              	PageSize:
  27 0000 0004     		.short	1024
  28              		.global	EraseCounter
  29              		.bss
  30              		.align	2
  33              	EraseCounter:
  34 0000 00000000 		.space	4
  35              		.global	NbrOfPage
  36              		.align	2
  39              	NbrOfPage:
  40 0004 00000000 		.space	4
  41              		.global	FLASHStatus
  42              		.data
  45              	FLASHStatus:
  46 0002 04       		.byte	4
  47              		.comm	RamSource,4,4
  48              		.text
  49              		.align	2
  50              		.code	16
  51              		.thumb_func
  53              	Receive_Byte:
  54              	.LFB33:
  55              		.file 1 "../scr/ymodem.c"
   1:../scr/ymodem.c **** /**
   2:../scr/ymodem.c ****   ******************************************************************************
   3:../scr/ymodem.c ****   * @file    IAP/src/ymodem.c 
   4:../scr/ymodem.c ****   * @author  MCD Application Team
   5:../scr/ymodem.c ****   * @version V3.3.0
   6:../scr/ymodem.c ****   * @date    10/15/2010
   7:../scr/ymodem.c ****   * @brief   This file provides all the software functions related to the ymodem 
   8:../scr/ymodem.c ****   *          protocol.
   9:../scr/ymodem.c ****   ******************************************************************************
  10:../scr/ymodem.c ****   * @copy
  11:../scr/ymodem.c ****   *
  12:../scr/ymodem.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  13:../scr/ymodem.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  14:../scr/ymodem.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  15:../scr/ymodem.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  16:../scr/ymodem.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  17:../scr/ymodem.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  18:../scr/ymodem.c ****   *
  19:../scr/ymodem.c ****   * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
  20:../scr/ymodem.c ****   */
  21:../scr/ymodem.c **** 
  22:../scr/ymodem.c **** /** @addtogroup IAP
  23:../scr/ymodem.c ****   * @{
  24:../scr/ymodem.c ****   */ 
  25:../scr/ymodem.c ****   
  26:../scr/ymodem.c **** /* Includes ------------------------------------------------------------------*/
  27:../scr/ymodem.c **** #include "common.h"
  28:../scr/ymodem.c **** #include "ymodem.h"
  29:../scr/ymodem.c **** //#include "main.h"
  30:../scr/ymodem.c **** #include "stm32f0xx_flash.h"
  31:../scr/ymodem.c **** 
  32:../scr/ymodem.c **** /* Private typedef -----------------------------------------------------------*/
  33:../scr/ymodem.c **** /* Private define ------------------------------------------------------------*/
  34:../scr/ymodem.c **** /* Private macro -------------------------------------------------------------*/
  35:../scr/ymodem.c **** /* Private variables ---------------------------------------------------------*/
  36:../scr/ymodem.c **** uint8_t file_name[FILE_NAME_LENGTH];
  37:../scr/ymodem.c **** //uint32_t FlashDestination = ApplicationAddress; /* Flash user program offset */
  38:../scr/ymodem.c **** uint16_t PageSize = PAGE_SIZE;
  39:../scr/ymodem.c **** uint32_t EraseCounter = 0x0;
  40:../scr/ymodem.c **** uint32_t NbrOfPage = 0;
  41:../scr/ymodem.c **** FLASH_Status FLASHStatus = FLASH_COMPLETE;
  42:../scr/ymodem.c **** uint32_t RamSource;
  43:../scr/ymodem.c **** extern uint8_t tab_1024[1024];
  44:../scr/ymodem.c **** 
  45:../scr/ymodem.c **** /* Private function prototypes -----------------------------------------------*/
  46:../scr/ymodem.c **** /* Private functions ---------------------------------------------------------*/
  47:../scr/ymodem.c **** 
  48:../scr/ymodem.c **** /**
  49:../scr/ymodem.c ****   * @brief  Receive byte from sender
  50:../scr/ymodem.c ****   * @param  c: Character
  51:../scr/ymodem.c ****   * @param  timeout: Timeout
  52:../scr/ymodem.c ****   * @retval 0: Byte received
  53:../scr/ymodem.c ****   *         -1: Timeout
  54:../scr/ymodem.c ****   */
  55:../scr/ymodem.c **** static  int32_t Receive_Byte (uint8_t *c, uint32_t timeout)
  56:../scr/ymodem.c **** {
  56              		.loc 1 56 0
  57              		.cfi_startproc
  58 0000 80B5     		push	{r7, lr}
  59              	.LCFI0:
  60              		.cfi_def_cfa_offset 8
  61              		.cfi_offset 7, -8
  62              		.cfi_offset 14, -4
  63 0002 82B0     		sub	sp, sp, #8
  64              	.LCFI1:
  65              		.cfi_def_cfa_offset 16
  66 0004 00AF     		add	r7, sp, #0
  67              	.LCFI2:
  68              		.cfi_def_cfa_register 7
  69 0006 7860     		str	r0, [r7, #4]
  70 0008 3960     		str	r1, [r7]
  57:../scr/ymodem.c ****   while (timeout-- > 0)
  71              		.loc 1 57 0
  72 000a 08E0     		b	.L2
  73              	.L4:
  74              	.LBB2:
  58:../scr/ymodem.c ****   {
  59:../scr/ymodem.c ****     if (SerialKeyPressed(c) == 1)
  75              		.loc 1 59 0
  76 000c 7B68     		ldr	r3, [r7, #4]
  77 000e 181C     		mov	r0, r3
  78 0010 FFF7FEFF 		bl	SerialKeyPressed
  79 0014 031E     		sub	r3, r0, #0
  80 0016 012B     		cmp	r3, #1
  81 0018 01D1     		bne	.L2
  60:../scr/ymodem.c ****     {
  61:../scr/ymodem.c ****       return 0;
  82              		.loc 1 61 0
  83 001a 0023     		mov	r3, #0
  84 001c 06E0     		b	.L3
  85              	.L2:
  86              	.LBE2:
  57:../scr/ymodem.c ****   {
  87              		.loc 1 57 0
  88 001e 3B68     		ldr	r3, [r7]
  89 0020 5A1E     		sub	r2, r3, #1
  90 0022 3A60     		str	r2, [r7]
  91 0024 002B     		cmp	r3, #0
  92 0026 F1D1     		bne	.L4
  62:../scr/ymodem.c ****     }
  63:../scr/ymodem.c ****   }
  64:../scr/ymodem.c ****   return -1;
  93              		.loc 1 64 0
  94 0028 0123     		mov	r3, #1
  95 002a 5B42     		neg	r3, r3
  96              	.L3:
  65:../scr/ymodem.c **** }
  97              		.loc 1 65 0
  98 002c 181C     		mov	r0, r3
  99 002e BD46     		mov	sp, r7
 100 0030 02B0     		add	sp, sp, #8
 101              		@ sp needed
 102 0032 80BD     		pop	{r7, pc}
 103              		.cfi_endproc
 104              	.LFE33:
 106              		.align	2
 107              		.code	16
 108              		.thumb_func
 110              	Send_Byte:
 111              	.LFB34:
  66:../scr/ymodem.c **** 
  67:../scr/ymodem.c **** /**
  68:../scr/ymodem.c ****   * @brief  Send a byte
  69:../scr/ymodem.c ****   * @param  c: Character
  70:../scr/ymodem.c ****   * @retval 0: Byte sent
  71:../scr/ymodem.c ****   */
  72:../scr/ymodem.c **** static uint32_t Send_Byte (uint8_t c)
  73:../scr/ymodem.c **** {
 112              		.loc 1 73 0
 113              		.cfi_startproc
 114 0034 80B5     		push	{r7, lr}
 115              	.LCFI3:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0036 82B0     		sub	sp, sp, #8
 120              	.LCFI4:
 121              		.cfi_def_cfa_offset 16
 122 0038 00AF     		add	r7, sp, #0
 123              	.LCFI5:
 124              		.cfi_def_cfa_register 7
 125 003a 021C     		mov	r2, r0
 126 003c FB1D     		add	r3, r7, #7
 127 003e 1A70     		strb	r2, [r3]
  74:../scr/ymodem.c ****   SerialPutChar(c);
 128              		.loc 1 74 0
 129 0040 FB1D     		add	r3, r7, #7
 130 0042 1B78     		ldrb	r3, [r3]
 131 0044 181C     		mov	r0, r3
 132 0046 FFF7FEFF 		bl	SerialPutChar
  75:../scr/ymodem.c ****   return 0;
 133              		.loc 1 75 0
 134 004a 0023     		mov	r3, #0
  76:../scr/ymodem.c **** }
 135              		.loc 1 76 0
 136 004c 181C     		mov	r0, r3
 137 004e BD46     		mov	sp, r7
 138 0050 02B0     		add	sp, sp, #8
 139              		@ sp needed
 140 0052 80BD     		pop	{r7, pc}
 141              		.cfi_endproc
 142              	.LFE34:
 144              		.align	2
 145              		.code	16
 146              		.thumb_func
 148              	Receive_Packet:
 149              	.LFB35:
  77:../scr/ymodem.c **** 
  78:../scr/ymodem.c **** /**
  79:../scr/ymodem.c ****   * @brief  Receive a packet from sender
  80:../scr/ymodem.c ****   * @param  data
  81:../scr/ymodem.c ****   * @param  length
  82:../scr/ymodem.c ****   * @param  timeout
  83:../scr/ymodem.c ****   *     0: end of transmission
  84:../scr/ymodem.c ****   *    -1: abort by sender
  85:../scr/ymodem.c ****   *    >0: packet length
  86:../scr/ymodem.c ****   * @retval 0: normally return
  87:../scr/ymodem.c ****   *        -1: timeout or packet error
  88:../scr/ymodem.c ****   *         1: abort by user
  89:../scr/ymodem.c ****   */
  90:../scr/ymodem.c **** static int32_t Receive_Packet (uint8_t *data, int32_t *length, uint32_t timeout)
  91:../scr/ymodem.c **** {
 150              		.loc 1 91 0
 151              		.cfi_startproc
 152 0054 80B5     		push	{r7, lr}
 153              	.LCFI6:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 7, -8
 156              		.cfi_offset 14, -4
 157 0056 86B0     		sub	sp, sp, #24
 158              	.LCFI7:
 159              		.cfi_def_cfa_offset 32
 160 0058 00AF     		add	r7, sp, #0
 161              	.LCFI8:
 162              		.cfi_def_cfa_register 7
 163 005a F860     		str	r0, [r7, #12]
 164 005c B960     		str	r1, [r7, #8]
 165 005e 7A60     		str	r2, [r7, #4]
  92:../scr/ymodem.c ****   uint16_t i, packet_size;
  93:../scr/ymodem.c ****   uint8_t c;
  94:../scr/ymodem.c ****   *length = 0;
 166              		.loc 1 94 0
 167 0060 BB68     		ldr	r3, [r7, #8]
 168 0062 0022     		mov	r2, #0
 169 0064 1A60     		str	r2, [r3]
  95:../scr/ymodem.c ****   if (Receive_Byte(&c, timeout) != 0)
 170              		.loc 1 95 0
 171 0066 1323     		mov	r3, #19
 172 0068 FA18     		add	r2, r7, r3
 173 006a 7B68     		ldr	r3, [r7, #4]
 174 006c 101C     		mov	r0, r2
 175 006e 191C     		mov	r1, r3
 176 0070 FFF7C6FF 		bl	Receive_Byte
 177 0074 031E     		sub	r3, r0, #0
 178 0076 02D0     		beq	.L8
  96:../scr/ymodem.c ****   {
  97:../scr/ymodem.c ****     return -1;
 179              		.loc 1 97 0
 180 0078 0123     		mov	r3, #1
 181 007a 5B42     		neg	r3, r3
 182 007c 76E0     		b	.L23
 183              	.L8:
  98:../scr/ymodem.c ****   }
  99:../scr/ymodem.c ****   switch (c)
 184              		.loc 1 99 0
 185 007e 1323     		mov	r3, #19
 186 0080 FB18     		add	r3, r7, r3
 187 0082 1B78     		ldrb	r3, [r3]
 188 0084 042B     		cmp	r3, #4
 189 0086 17D0     		beq	.L11
 190 0088 04DC     		bgt	.L12
 191 008a 012B     		cmp	r3, #1
 192 008c 09D0     		beq	.L13
 193 008e 022B     		cmp	r3, #2
 194 0090 0CD0     		beq	.L14
 195 0092 2CE0     		b	.L10
 196              	.L12:
 197 0094 412B     		cmp	r3, #65
 198 0096 28D0     		beq	.L15
 199 0098 612B     		cmp	r3, #97
 200 009a 26D0     		beq	.L15
 201 009c 182B     		cmp	r3, #24
 202 009e 0DD0     		beq	.L16
 203 00a0 25E0     		b	.L10
 204              	.L13:
 100:../scr/ymodem.c ****   {
 101:../scr/ymodem.c ****     case SOH:
 102:../scr/ymodem.c ****       packet_size = PACKET_SIZE;
 205              		.loc 1 102 0
 206 00a2 1423     		mov	r3, #20
 207 00a4 FB18     		add	r3, r7, r3
 208 00a6 8022     		mov	r2, #128
 209 00a8 1A80     		strh	r2, [r3]
 103:../scr/ymodem.c ****       break;
 210              		.loc 1 103 0
 211 00aa 23E0     		b	.L17
 212              	.L14:
 104:../scr/ymodem.c ****     case STX:
 105:../scr/ymodem.c ****       packet_size = PACKET_1K_SIZE;
 213              		.loc 1 105 0
 214 00ac 1423     		mov	r3, #20
 215 00ae FB18     		add	r3, r7, r3
 216 00b0 8022     		mov	r2, #128
 217 00b2 D200     		lsl	r2, r2, #3
 218 00b4 1A80     		strh	r2, [r3]
 106:../scr/ymodem.c ****       break;
 219              		.loc 1 106 0
 220 00b6 1DE0     		b	.L17
 221              	.L11:
 107:../scr/ymodem.c ****     case EOT:
 108:../scr/ymodem.c ****       return 0;
 222              		.loc 1 108 0
 223 00b8 0023     		mov	r3, #0
 224 00ba 57E0     		b	.L23
 225              	.L16:
 109:../scr/ymodem.c ****     case CA:
 110:../scr/ymodem.c ****       if ((Receive_Byte(&c, timeout) == 0) && (c == CA))
 226              		.loc 1 110 0
 227 00bc 1323     		mov	r3, #19
 228 00be FA18     		add	r2, r7, r3
 229 00c0 7B68     		ldr	r3, [r7, #4]
 230 00c2 101C     		mov	r0, r2
 231 00c4 191C     		mov	r1, r3
 232 00c6 FFF79BFF 		bl	Receive_Byte
 233 00ca 031E     		sub	r3, r0, #0
 234 00cc 0AD1     		bne	.L18
 235              		.loc 1 110 0 is_stmt 0 discriminator 1
 236 00ce 1323     		mov	r3, #19
 237 00d0 FB18     		add	r3, r7, r3
 238 00d2 1B78     		ldrb	r3, [r3]
 239 00d4 182B     		cmp	r3, #24
 240 00d6 05D1     		bne	.L18
 111:../scr/ymodem.c ****       {
 112:../scr/ymodem.c ****         *length = -1;
 241              		.loc 1 112 0 is_stmt 1
 242 00d8 BB68     		ldr	r3, [r7, #8]
 243 00da 0122     		mov	r2, #1
 244 00dc 5242     		neg	r2, r2
 245 00de 1A60     		str	r2, [r3]
 113:../scr/ymodem.c ****         return 0;
 246              		.loc 1 113 0
 247 00e0 0023     		mov	r3, #0
 248 00e2 43E0     		b	.L23
 249              	.L18:
 114:../scr/ymodem.c ****       }
 115:../scr/ymodem.c ****       else
 116:../scr/ymodem.c ****       {
 117:../scr/ymodem.c ****         return -1;
 250              		.loc 1 117 0
 251 00e4 0123     		mov	r3, #1
 252 00e6 5B42     		neg	r3, r3
 253 00e8 40E0     		b	.L23
 254              	.L15:
 118:../scr/ymodem.c ****       }
 119:../scr/ymodem.c ****     case ABORT1:
 120:../scr/ymodem.c ****     case ABORT2:
 121:../scr/ymodem.c ****       return 1;
 255              		.loc 1 121 0
 256 00ea 0123     		mov	r3, #1
 257 00ec 3EE0     		b	.L23
 258              	.L10:
 122:../scr/ymodem.c ****     default:
 123:../scr/ymodem.c ****       return -1;
 259              		.loc 1 123 0
 260 00ee 0123     		mov	r3, #1
 261 00f0 5B42     		neg	r3, r3
 262 00f2 3BE0     		b	.L23
 263              	.L17:
 124:../scr/ymodem.c ****   }
 125:../scr/ymodem.c ****   *data = c;
 264              		.loc 1 125 0
 265 00f4 1323     		mov	r3, #19
 266 00f6 FB18     		add	r3, r7, r3
 267 00f8 1A78     		ldrb	r2, [r3]
 268 00fa FB68     		ldr	r3, [r7, #12]
 269 00fc 1A70     		strb	r2, [r3]
 126:../scr/ymodem.c ****   for (i = 1; i < (packet_size + PACKET_OVERHEAD); i ++)
 270              		.loc 1 126 0
 271 00fe 1623     		mov	r3, #22
 272 0100 FB18     		add	r3, r7, r3
 273 0102 0122     		mov	r2, #1
 274 0104 1A80     		strh	r2, [r3]
 275 0106 15E0     		b	.L19
 276              	.L21:
 127:../scr/ymodem.c ****   {
 128:../scr/ymodem.c ****     if (Receive_Byte(data + i, timeout) != 0)
 277              		.loc 1 128 0
 278 0108 1623     		mov	r3, #22
 279 010a FB18     		add	r3, r7, r3
 280 010c 1B88     		ldrh	r3, [r3]
 281 010e FA68     		ldr	r2, [r7, #12]
 282 0110 D218     		add	r2, r2, r3
 283 0112 7B68     		ldr	r3, [r7, #4]
 284 0114 101C     		mov	r0, r2
 285 0116 191C     		mov	r1, r3
 286 0118 FFF772FF 		bl	Receive_Byte
 287 011c 031E     		sub	r3, r0, #0
 288 011e 02D0     		beq	.L20
 129:../scr/ymodem.c ****     {
 130:../scr/ymodem.c ****       return -1;
 289              		.loc 1 130 0
 290 0120 0123     		mov	r3, #1
 291 0122 5B42     		neg	r3, r3
 292 0124 22E0     		b	.L23
 293              	.L20:
 126:../scr/ymodem.c ****   {
 294              		.loc 1 126 0 discriminator 2
 295 0126 1623     		mov	r3, #22
 296 0128 FB18     		add	r3, r7, r3
 297 012a 1A88     		ldrh	r2, [r3]
 298 012c 1623     		mov	r3, #22
 299 012e FB18     		add	r3, r7, r3
 300 0130 0132     		add	r2, r2, #1
 301 0132 1A80     		strh	r2, [r3]
 302              	.L19:
 126:../scr/ymodem.c ****   {
 303              		.loc 1 126 0 is_stmt 0 discriminator 1
 304 0134 1623     		mov	r3, #22
 305 0136 FB18     		add	r3, r7, r3
 306 0138 1A88     		ldrh	r2, [r3]
 307 013a 1423     		mov	r3, #20
 308 013c FB18     		add	r3, r7, r3
 309 013e 1B88     		ldrh	r3, [r3]
 310 0140 0533     		add	r3, r3, #5
 311 0142 9A42     		cmp	r2, r3
 312 0144 E0DB     		blt	.L21
 131:../scr/ymodem.c ****     }
 132:../scr/ymodem.c ****   }
 133:../scr/ymodem.c ****   if (data[PACKET_SEQNO_INDEX] != ((data[PACKET_SEQNO_COMP_INDEX] ^ 0xff) & 0xff))
 313              		.loc 1 133 0 is_stmt 1
 314 0146 FB68     		ldr	r3, [r7, #12]
 315 0148 0133     		add	r3, r3, #1
 316 014a 1A78     		ldrb	r2, [r3]
 317 014c FB68     		ldr	r3, [r7, #12]
 318 014e 0233     		add	r3, r3, #2
 319 0150 1B78     		ldrb	r3, [r3]
 320 0152 DB43     		mvn	r3, r3
 321 0154 DBB2     		uxtb	r3, r3
 322 0156 9A42     		cmp	r2, r3
 323 0158 02D0     		beq	.L22
 134:../scr/ymodem.c ****   {
 135:../scr/ymodem.c ****     return -1;
 324              		.loc 1 135 0
 325 015a 0123     		mov	r3, #1
 326 015c 5B42     		neg	r3, r3
 327 015e 05E0     		b	.L23
 328              	.L22:
 136:../scr/ymodem.c ****   }
 137:../scr/ymodem.c ****   *length = packet_size;
 329              		.loc 1 137 0
 330 0160 1423     		mov	r3, #20
 331 0162 FB18     		add	r3, r7, r3
 332 0164 1A88     		ldrh	r2, [r3]
 333 0166 BB68     		ldr	r3, [r7, #8]
 334 0168 1A60     		str	r2, [r3]
 138:../scr/ymodem.c ****   return 0;
 335              		.loc 1 138 0
 336 016a 0023     		mov	r3, #0
 337              	.L23:
 139:../scr/ymodem.c **** }
 338              		.loc 1 139 0 discriminator 1
 339 016c 181C     		mov	r0, r3
 340 016e BD46     		mov	sp, r7
 341 0170 06B0     		add	sp, sp, #24
 342              		@ sp needed
 343 0172 80BD     		pop	{r7, pc}
 344              		.cfi_endproc
 345              	.LFE35:
 347              		.align	2
 348              		.global	Ymodem_Receive
 349              		.code	16
 350              		.thumb_func
 352              	Ymodem_Receive:
 353              	.LFB36:
 140:../scr/ymodem.c **** 
 141:../scr/ymodem.c **** /**
 142:../scr/ymodem.c ****   * @brief  Receive a file using the ymodem protocol
 143:../scr/ymodem.c ****   * @param  buf: Address of the first byte
 144:../scr/ymodem.c ****   * @retval The size of the file
 145:../scr/ymodem.c ****   */
 146:../scr/ymodem.c **** int32_t Ymodem_Receive (uint8_t *buf)
 147:../scr/ymodem.c **** {
 354              		.loc 1 147 0
 355              		.cfi_startproc
 356 0174 90B5     		push	{r4, r7, lr}
 357              	.LCFI9:
 358              		.cfi_def_cfa_offset 12
 359              		.cfi_offset 4, -12
 360              		.cfi_offset 7, -8
 361              		.cfi_offset 14, -4
 362 0176 DD4C     		ldr	r4, .L64
 363 0178 A544     		add	sp, sp, r4
 364              	.LCFI10:
 365              		.cfi_def_cfa_offset 1128
 366 017a 00AF     		add	r7, sp, #0
 367              	.LCFI11:
 368              		.cfi_def_cfa_register 7
 369 017c 7860     		str	r0, [r7, #4]
 148:../scr/ymodem.c ****   uint8_t packet_data[PACKET_1K_SIZE + PACKET_OVERHEAD], file_size[FILE_SIZE_LENGTH], *file_ptr, *b
 149:../scr/ymodem.c ****   int32_t i, j, packet_length, session_done, file_done, packets_received, errors, session_begin, si
 370              		.loc 1 149 0
 371 017e 0023     		mov	r3, #0
 372 0180 FB60     		str	r3, [r7, #12]
 150:../scr/ymodem.c **** 
 151:../scr/ymodem.c ****   /* Initialize FlashDestination variable */
 152:../scr/ymodem.c ****   //uint32_t DestinationAddress = ApplicationAddress; /* Flash user program offset */
 153:../scr/ymodem.c ****   uint32_t DestinationAddress = BOOT_SECONDARY_ADDRESS; /* Flash user program offset */
 373              		.loc 1 153 0
 374 0182 DB4B     		ldr	r3, .L64+4
 375 0184 8622     		mov	r2, #134
 376 0186 D200     		lsl	r2, r2, #3
 377 0188 BA18     		add	r2, r7, r2
 378 018a 1360     		str	r3, [r2]
 154:../scr/ymodem.c ****   uint32_t FlashDestination = DestinationAddress;
 379              		.loc 1 154 0
 380 018c 8623     		mov	r3, #134
 381 018e DB00     		lsl	r3, r3, #3
 382 0190 FB18     		add	r3, r7, r3
 383 0192 1B68     		ldr	r3, [r3]
 384 0194 D74A     		ldr	r2, .L64+8
 385 0196 BA18     		add	r2, r7, r2
 386 0198 1360     		str	r3, [r2]
 155:../scr/ymodem.c **** 
 156:../scr/ymodem.c ****   for (session_done = 0, errors = 0, session_begin = 0; ;)
 387              		.loc 1 156 0
 388 019a 0023     		mov	r3, #0
 389 019c 8922     		mov	r2, #137
 390 019e D200     		lsl	r2, r2, #3
 391 01a0 BA18     		add	r2, r7, r2
 392 01a2 1360     		str	r3, [r2]
 393 01a4 0023     		mov	r3, #0
 394 01a6 D44A     		ldr	r2, .L64+12
 395 01a8 BA18     		add	r2, r7, r2
 396 01aa 1360     		str	r3, [r2]
 397 01ac 0023     		mov	r3, #0
 398 01ae 8722     		mov	r2, #135
 399 01b0 D200     		lsl	r2, r2, #3
 400 01b2 BA18     		add	r2, r7, r2
 401 01b4 1360     		str	r3, [r2]
 402              	.L59:
 157:../scr/ymodem.c ****   {
 158:../scr/ymodem.c ****     for (packets_received = 0, file_done = 0, buf_ptr = buf; ;)
 403              		.loc 1 158 0
 404 01b6 0023     		mov	r3, #0
 405 01b8 8822     		mov	r2, #136
 406 01ba D200     		lsl	r2, r2, #3
 407 01bc BA18     		add	r2, r7, r2
 408 01be 1360     		str	r3, [r2]
 409 01c0 0023     		mov	r3, #0
 410 01c2 CE4A     		ldr	r2, .L64+16
 411 01c4 BA18     		add	r2, r7, r2
 412 01c6 1360     		str	r3, [r2]
 413 01c8 7B68     		ldr	r3, [r7, #4]
 414 01ca CD4A     		ldr	r2, .L64+20
 415 01cc BA18     		add	r2, r7, r2
 416 01ce 1360     		str	r3, [r2]
 417              	.L56:
 159:../scr/ymodem.c ****     {
 160:../scr/ymodem.c ****       switch (Receive_Packet(packet_data, &packet_length, NAK_TIMEOUT))
 418              		.loc 1 160 0
 419 01d0 2423     		mov	r3, #36
 420 01d2 F918     		add	r1, r7, r3
 421 01d4 1023     		mov	r3, #16
 422 01d6 FA18     		add	r2, r7, r3
 423 01d8 8023     		mov	r3, #128
 424 01da 5B03     		lsl	r3, r3, #13
 425 01dc 081C     		mov	r0, r1
 426 01de 111C     		mov	r1, r2
 427 01e0 1A1C     		mov	r2, r3
 428 01e2 FFF737FF 		bl	Receive_Packet
 429 01e6 031E     		sub	r3, r0, #0
 430 01e8 03D0     		beq	.L26
 431 01ea 012B     		cmp	r3, #1
 432 01ec 00D1     		bne	.LCB372
 433 01ee 73E1     		b	.L27	@long jump
 434              	.LCB372:
 435 01f0 9EE1     		b	.L61
 436              	.L26:
 161:../scr/ymodem.c ****       {
 162:../scr/ymodem.c ****         case 0:
 163:../scr/ymodem.c ****           errors = 0;
 437              		.loc 1 163 0
 438 01f2 0023     		mov	r3, #0
 439 01f4 C04A     		ldr	r2, .L64+12
 440 01f6 BA18     		add	r2, r7, r2
 441 01f8 1360     		str	r3, [r2]
 164:../scr/ymodem.c ****           switch (packet_length)
 442              		.loc 1 164 0
 443 01fa 3B69     		ldr	r3, [r7, #16]
 444 01fc 5A1C     		add	r2, r3, #1
 445 01fe 02D0     		beq	.L29
 446 0200 002B     		cmp	r3, #0
 447 0202 05D0     		beq	.L30
 448 0204 0CE0     		b	.L62
 449              	.L29:
 165:../scr/ymodem.c ****           {
 166:../scr/ymodem.c ****             /* Abort by sender */
 167:../scr/ymodem.c ****             case - 1:
 168:../scr/ymodem.c ****               Send_Byte(ACK);
 450              		.loc 1 168 0
 451 0206 0620     		mov	r0, #6
 452 0208 FFF714FF 		bl	Send_Byte
 169:../scr/ymodem.c ****               return 0;
 453              		.loc 1 169 0
 454 020c 0023     		mov	r3, #0
 455 020e BFE1     		b	.L60
 456              	.L30:
 170:../scr/ymodem.c ****             /* End of transmission */
 171:../scr/ymodem.c ****             case 0:
 172:../scr/ymodem.c ****               Send_Byte(ACK);
 457              		.loc 1 172 0
 458 0210 0620     		mov	r0, #6
 459 0212 FFF70FFF 		bl	Send_Byte
 173:../scr/ymodem.c ****               file_done = 1;
 460              		.loc 1 173 0
 461 0216 0123     		mov	r3, #1
 462 0218 B84A     		ldr	r2, .L64+16
 463 021a BA18     		add	r2, r7, r2
 464 021c 1360     		str	r3, [r2]
 174:../scr/ymodem.c ****               break;
 465              		.loc 1 174 0
 466 021e 5AE1     		b	.L32
 467              	.L62:
 175:../scr/ymodem.c ****             /* Normal packet */
 176:../scr/ymodem.c ****             default:
 177:../scr/ymodem.c ****               if ((packet_data[PACKET_SEQNO_INDEX] & 0xff) != (packets_received & 0xff))
 468              		.loc 1 177 0
 469 0220 B84B     		ldr	r3, .L64+24
 470 0222 8B22     		mov	r2, #139
 471 0224 D200     		lsl	r2, r2, #3
 472 0226 9446     		mov	ip, r2
 473 0228 BC44     		add	ip, ip, r7
 474 022a 6344     		add	r3, r3, ip
 475 022c 5B78     		ldrb	r3, [r3, #1]
 476 022e 191C     		mov	r1, r3
 477 0230 8823     		mov	r3, #136
 478 0232 DB00     		lsl	r3, r3, #3
 479 0234 FB18     		add	r3, r7, r3
 480 0236 1B68     		ldr	r3, [r3]
 481 0238 FF22     		mov	r2, #255
 482 023a 1340     		and	r3, r2
 483 023c 9942     		cmp	r1, r3
 484 023e 03D0     		beq	.L33
 178:../scr/ymodem.c ****               {
 179:../scr/ymodem.c ****                 Send_Byte(NAK);
 485              		.loc 1 179 0
 486 0240 1520     		mov	r0, #21
 487 0242 FFF7F7FE 		bl	Send_Byte
 488 0246 46E1     		b	.L32
 489              	.L33:
 180:../scr/ymodem.c ****               }
 181:../scr/ymodem.c ****               else
 182:../scr/ymodem.c ****               {
 183:../scr/ymodem.c ****                 if (packets_received == 0)
 490              		.loc 1 183 0
 491 0248 8823     		mov	r3, #136
 492 024a DB00     		lsl	r3, r3, #3
 493 024c FB18     		add	r3, r7, r3
 494 024e 1B68     		ldr	r3, [r3]
 495 0250 002B     		cmp	r3, #0
 496 0252 00D0     		beq	.LCB434
 497 0254 D7E0     		b	.L34	@long jump
 498              	.LCB434:
 184:../scr/ymodem.c ****                 {
 185:../scr/ymodem.c ****                   /* Filename packet */
 186:../scr/ymodem.c ****                   if (packet_data[PACKET_HEADER] != 0)
 499              		.loc 1 186 0
 500 0256 AB4B     		ldr	r3, .L64+24
 501 0258 8B22     		mov	r2, #139
 502 025a D200     		lsl	r2, r2, #3
 503 025c 9446     		mov	ip, r2
 504 025e BC44     		add	ip, ip, r7
 505 0260 6344     		add	r3, r3, ip
 506 0262 DB78     		ldrb	r3, [r3, #3]
 507 0264 002B     		cmp	r3, #0
 508 0266 00D1     		bne	.LCB443
 509 0268 C0E0     		b	.L35	@long jump
 510              	.LCB443:
 511              	.LBB3:
 187:../scr/ymodem.c ****                   {
 188:../scr/ymodem.c ****                     /* Filename packet has valid data */
 189:../scr/ymodem.c ****                     for (i = 0, file_ptr = packet_data + PACKET_HEADER; (*file_ptr != 0) && (i < FI
 512              		.loc 1 189 0
 513 026a 0023     		mov	r3, #0
 514 026c 8A22     		mov	r2, #138
 515 026e D200     		lsl	r2, r2, #3
 516 0270 BA18     		add	r2, r7, r2
 517 0272 1360     		str	r3, [r2]
 518 0274 2423     		mov	r3, #36
 519 0276 FB18     		add	r3, r7, r3
 520 0278 0333     		add	r3, r3, #3
 521 027a A34A     		ldr	r2, .L64+28
 522 027c BA18     		add	r2, r7, r2
 523 027e 1360     		str	r3, [r2]
 524 0280 12E0     		b	.L36
 525              	.L38:
 190:../scr/ymodem.c ****                     {
 191:../scr/ymodem.c ****                       file_name[i++] = *file_ptr++;
 526              		.loc 1 191 0
 527 0282 8A23     		mov	r3, #138
 528 0284 DB00     		lsl	r3, r3, #3
 529 0286 FB18     		add	r3, r7, r3
 530 0288 1B68     		ldr	r3, [r3]
 531 028a 5A1C     		add	r2, r3, #1
 532 028c 8A21     		mov	r1, #138
 533 028e C900     		lsl	r1, r1, #3
 534 0290 7918     		add	r1, r7, r1
 535 0292 0A60     		str	r2, [r1]
 536 0294 9C4A     		ldr	r2, .L64+28
 537 0296 BA18     		add	r2, r7, r2
 538 0298 1268     		ldr	r2, [r2]
 539 029a 511C     		add	r1, r2, #1
 540 029c 9A48     		ldr	r0, .L64+28
 541 029e 3818     		add	r0, r7, r0
 542 02a0 0160     		str	r1, [r0]
 543 02a2 1178     		ldrb	r1, [r2]
 544 02a4 994A     		ldr	r2, .L64+32
 545 02a6 D154     		strb	r1, [r2, r3]
 546              	.L36:
 189:../scr/ymodem.c ****                     {
 547              		.loc 1 189 0 discriminator 1
 548 02a8 974B     		ldr	r3, .L64+28
 549 02aa FB18     		add	r3, r7, r3
 550 02ac 1B68     		ldr	r3, [r3]
 551 02ae 1B78     		ldrb	r3, [r3]
 552 02b0 002B     		cmp	r3, #0
 553 02b2 05D0     		beq	.L37
 189:../scr/ymodem.c ****                     {
 554              		.loc 1 189 0 is_stmt 0 discriminator 2
 555 02b4 8A23     		mov	r3, #138
 556 02b6 DB00     		lsl	r3, r3, #3
 557 02b8 FB18     		add	r3, r7, r3
 558 02ba 1B68     		ldr	r3, [r3]
 559 02bc FF2B     		cmp	r3, #255
 560 02be E0DD     		ble	.L38
 561              	.L37:
 192:../scr/ymodem.c ****                     }
 193:../scr/ymodem.c ****                     file_name[i++] = '\0';
 562              		.loc 1 193 0 is_stmt 1
 563 02c0 8A23     		mov	r3, #138
 564 02c2 DB00     		lsl	r3, r3, #3
 565 02c4 FB18     		add	r3, r7, r3
 566 02c6 1B68     		ldr	r3, [r3]
 567 02c8 5A1C     		add	r2, r3, #1
 568 02ca 8A21     		mov	r1, #138
 569 02cc C900     		lsl	r1, r1, #3
 570 02ce 7918     		add	r1, r7, r1
 571 02d0 0A60     		str	r2, [r1]
 572 02d2 8E4A     		ldr	r2, .L64+32
 573 02d4 0021     		mov	r1, #0
 574 02d6 D154     		strb	r1, [r2, r3]
 194:../scr/ymodem.c ****                     for (i = 0, file_ptr ++; (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH);)
 575              		.loc 1 194 0
 576 02d8 0023     		mov	r3, #0
 577 02da 8A22     		mov	r2, #138
 578 02dc D200     		lsl	r2, r2, #3
 579 02de BA18     		add	r2, r7, r2
 580 02e0 1360     		str	r3, [r2]
 581 02e2 894B     		ldr	r3, .L64+28
 582 02e4 FB18     		add	r3, r7, r3
 583 02e6 1B68     		ldr	r3, [r3]
 584 02e8 0133     		add	r3, r3, #1
 585 02ea 874A     		ldr	r2, .L64+28
 586 02ec BA18     		add	r2, r7, r2
 587 02ee 1360     		str	r3, [r2]
 588 02f0 17E0     		b	.L39
 589              	.L41:
 195:../scr/ymodem.c ****                     {
 196:../scr/ymodem.c ****                       file_size[i++] = *file_ptr++;
 590              		.loc 1 196 0
 591 02f2 8A23     		mov	r3, #138
 592 02f4 DB00     		lsl	r3, r3, #3
 593 02f6 FB18     		add	r3, r7, r3
 594 02f8 1B68     		ldr	r3, [r3]
 595 02fa 5A1C     		add	r2, r3, #1
 596 02fc 8A21     		mov	r1, #138
 597 02fe C900     		lsl	r1, r1, #3
 598 0300 7918     		add	r1, r7, r1
 599 0302 0A60     		str	r2, [r1]
 600 0304 804A     		ldr	r2, .L64+28
 601 0306 BA18     		add	r2, r7, r2
 602 0308 1268     		ldr	r2, [r2]
 603 030a 511C     		add	r1, r2, #1
 604 030c 7E48     		ldr	r0, .L64+28
 605 030e 3818     		add	r0, r7, r0
 606 0310 0160     		str	r1, [r0]
 607 0312 1178     		ldrb	r1, [r2]
 608 0314 7E4A     		ldr	r2, .L64+36
 609 0316 8B20     		mov	r0, #139
 610 0318 C000     		lsl	r0, r0, #3
 611 031a 8446     		mov	ip, r0
 612 031c BC44     		add	ip, ip, r7
 613 031e 6244     		add	r2, r2, ip
 614 0320 D154     		strb	r1, [r2, r3]
 615              	.L39:
 194:../scr/ymodem.c ****                     for (i = 0, file_ptr ++; (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH);)
 616              		.loc 1 194 0 discriminator 1
 617 0322 794B     		ldr	r3, .L64+28
 618 0324 FB18     		add	r3, r7, r3
 619 0326 1B68     		ldr	r3, [r3]
 620 0328 1B78     		ldrb	r3, [r3]
 621 032a 202B     		cmp	r3, #32
 622 032c 05D0     		beq	.L40
 194:../scr/ymodem.c ****                     for (i = 0, file_ptr ++; (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH);)
 623              		.loc 1 194 0 is_stmt 0 discriminator 2
 624 032e 8A23     		mov	r3, #138
 625 0330 DB00     		lsl	r3, r3, #3
 626 0332 FB18     		add	r3, r7, r3
 627 0334 1B68     		ldr	r3, [r3]
 628 0336 0F2B     		cmp	r3, #15
 629 0338 DBDD     		ble	.L41
 630              	.L40:
 197:../scr/ymodem.c ****                     }
 198:../scr/ymodem.c ****                     file_size[i++] = '\0';
 631              		.loc 1 198 0 is_stmt 1
 632 033a 8A23     		mov	r3, #138
 633 033c DB00     		lsl	r3, r3, #3
 634 033e FB18     		add	r3, r7, r3
 635 0340 1B68     		ldr	r3, [r3]
 636 0342 5A1C     		add	r2, r3, #1
 637 0344 8A21     		mov	r1, #138
 638 0346 C900     		lsl	r1, r1, #3
 639 0348 7918     		add	r1, r7, r1
 640 034a 0A60     		str	r2, [r1]
 641 034c 704A     		ldr	r2, .L64+36
 642 034e 8B21     		mov	r1, #139
 643 0350 C900     		lsl	r1, r1, #3
 644 0352 8C46     		mov	ip, r1
 645 0354 BC44     		add	ip, ip, r7
 646 0356 6244     		add	r2, r2, ip
 647 0358 0021     		mov	r1, #0
 648 035a D154     		strb	r1, [r2, r3]
 199:../scr/ymodem.c ****                     Str2Int(file_size, &size);
 649              		.loc 1 199 0
 650 035c 1423     		mov	r3, #20
 651 035e FA18     		add	r2, r7, r3
 652 0360 0C23     		mov	r3, #12
 653 0362 FB18     		add	r3, r7, r3
 654 0364 101C     		mov	r0, r2
 655 0366 191C     		mov	r1, r3
 656 0368 FFF7FEFF 		bl	Str2Int
 200:../scr/ymodem.c **** 
 201:../scr/ymodem.c ****                     /* Test the size of the image to be sent */
 202:../scr/ymodem.c ****                     /* Image size is greater than Flash size */
 203:../scr/ymodem.c ****                     if (size > (FLASH_SIZE - 1))
 657              		.loc 1 203 0
 658 036c FB68     		ldr	r3, [r7, #12]
 659 036e 694A     		ldr	r2, .L64+40
 660 0370 9342     		cmp	r3, r2
 661 0372 08DD     		ble	.L42
 204:../scr/ymodem.c ****                     {
 205:../scr/ymodem.c ****                       /* End session */
 206:../scr/ymodem.c ****                       Send_Byte(CA);
 662              		.loc 1 206 0
 663 0374 1820     		mov	r0, #24
 664 0376 FFF75DFE 		bl	Send_Byte
 207:../scr/ymodem.c ****                       Send_Byte(CA);
 665              		.loc 1 207 0
 666 037a 1820     		mov	r0, #24
 667 037c FFF75AFE 		bl	Send_Byte
 208:../scr/ymodem.c ****                       return -1;
 668              		.loc 1 208 0
 669 0380 0123     		mov	r3, #1
 670 0382 5B42     		neg	r3, r3
 671 0384 04E1     		b	.L60
 672              	.L42:
 209:../scr/ymodem.c ****                     }
 210:../scr/ymodem.c **** 
 211:../scr/ymodem.c ****                     /* Erase the needed pages where the user application will be loaded */
 212:../scr/ymodem.c ****                     /* Define the number of page to be erased */
 213:../scr/ymodem.c ****                     NbrOfPage = FLASH_PagesMask(size);
 673              		.loc 1 213 0
 674 0386 FB68     		ldr	r3, [r7, #12]
 675 0388 181C     		mov	r0, r3
 676 038a FFF7FEFF 		bl	FLASH_PagesMask
 677 038e 031C     		mov	r3, r0
 678 0390 1A1C     		mov	r2, r3
 679 0392 614B     		ldr	r3, .L64+44
 680 0394 1A60     		str	r2, [r3]
 214:../scr/ymodem.c **** 
 215:../scr/ymodem.c ****                     /* Erase the FLASH pages */
 216:../scr/ymodem.c ****                     for (EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMP
 681              		.loc 1 216 0
 682 0396 614B     		ldr	r3, .L64+48
 683 0398 0022     		mov	r2, #0
 684 039a 1A60     		str	r2, [r3]
 685 039c 15E0     		b	.L43
 686              	.L45:
 217:../scr/ymodem.c ****                     {
 218:../scr/ymodem.c ****                       FLASHStatus = FLASH_ErasePage(FlashDestination + (PageSize * EraseCounter));
 687              		.loc 1 218 0 discriminator 4
 688 039e 604B     		ldr	r3, .L64+52
 689 03a0 1B88     		ldrh	r3, [r3]
 690 03a2 1A1C     		mov	r2, r3
 691 03a4 5D4B     		ldr	r3, .L64+48
 692 03a6 1B68     		ldr	r3, [r3]
 693 03a8 5A43     		mul	r2, r3
 694 03aa 524B     		ldr	r3, .L64+8
 695 03ac FB18     		add	r3, r7, r3
 696 03ae 1B68     		ldr	r3, [r3]
 697 03b0 D318     		add	r3, r2, r3
 698 03b2 181C     		mov	r0, r3
 699 03b4 FFF7FEFF 		bl	FLASH_ErasePage
 700 03b8 031C     		mov	r3, r0
 701 03ba 1A1C     		mov	r2, r3
 702 03bc 594B     		ldr	r3, .L64+56
 703 03be 1A70     		strb	r2, [r3]
 216:../scr/ymodem.c ****                     {
 704              		.loc 1 216 0 discriminator 4
 705 03c0 564B     		ldr	r3, .L64+48
 706 03c2 1B68     		ldr	r3, [r3]
 707 03c4 5A1C     		add	r2, r3, #1
 708 03c6 554B     		ldr	r3, .L64+48
 709 03c8 1A60     		str	r2, [r3]
 710              	.L43:
 216:../scr/ymodem.c ****                     {
 711              		.loc 1 216 0 is_stmt 0 discriminator 1
 712 03ca 544B     		ldr	r3, .L64+48
 713 03cc 1A68     		ldr	r2, [r3]
 714 03ce 524B     		ldr	r3, .L64+44
 715 03d0 1B68     		ldr	r3, [r3]
 716 03d2 9A42     		cmp	r2, r3
 717 03d4 03D2     		bcs	.L44
 216:../scr/ymodem.c ****                     {
 718              		.loc 1 216 0 discriminator 3
 719 03d6 534B     		ldr	r3, .L64+56
 720 03d8 1B78     		ldrb	r3, [r3]
 721 03da 042B     		cmp	r3, #4
 722 03dc DFD0     		beq	.L45
 723              	.L44:
 219:../scr/ymodem.c ****                     }
 220:../scr/ymodem.c ****                     Send_Byte(ACK);
 724              		.loc 1 220 0 is_stmt 1
 725 03de 0620     		mov	r0, #6
 726 03e0 FFF728FE 		bl	Send_Byte
 221:../scr/ymodem.c ****                     Send_Byte(CRC16);
 727              		.loc 1 221 0
 728 03e4 4320     		mov	r0, #67
 729 03e6 FFF725FE 		bl	Send_Byte
 730              	.LBE3:
 731 03ea 65E0     		b	.L46
 732              	.L35:
 222:../scr/ymodem.c ****                   }
 223:../scr/ymodem.c ****                   /* Filename packet is empty, end session */
 224:../scr/ymodem.c ****                   else
 225:../scr/ymodem.c ****                   {
 226:../scr/ymodem.c ****                     Send_Byte(ACK);
 733              		.loc 1 226 0
 734 03ec 0620     		mov	r0, #6
 735 03ee FFF721FE 		bl	Send_Byte
 227:../scr/ymodem.c ****                     file_done = 1;
 736              		.loc 1 227 0
 737 03f2 0123     		mov	r3, #1
 738 03f4 414A     		ldr	r2, .L64+16
 739 03f6 BA18     		add	r2, r7, r2
 740 03f8 1360     		str	r3, [r2]
 228:../scr/ymodem.c ****                     session_done = 1;
 741              		.loc 1 228 0
 742 03fa 0123     		mov	r3, #1
 743 03fc 8922     		mov	r2, #137
 744 03fe D200     		lsl	r2, r2, #3
 745 0400 BA18     		add	r2, r7, r2
 746 0402 1360     		str	r3, [r2]
 229:../scr/ymodem.c ****                     break;
 747              		.loc 1 229 0
 748 0404 67E0     		b	.L32
 749              	.L34:
 230:../scr/ymodem.c ****                   }
 231:../scr/ymodem.c ****                 }
 232:../scr/ymodem.c ****                 /* Data packet */
 233:../scr/ymodem.c ****                 else
 234:../scr/ymodem.c ****                 {
 235:../scr/ymodem.c ****                   memcpy(buf_ptr, packet_data + PACKET_HEADER, packet_length);
 750              		.loc 1 235 0
 751 0406 3B69     		ldr	r3, [r7, #16]
 752 0408 1C1C     		mov	r4, r3
 753 040a 3D4B     		ldr	r3, .L64+20
 754 040c FB18     		add	r3, r7, r3
 755 040e 1A68     		ldr	r2, [r3]
 756 0410 2423     		mov	r3, #36
 757 0412 FB18     		add	r3, r7, r3
 758 0414 0333     		add	r3, r3, #3
 759 0416 101C     		mov	r0, r2
 760 0418 191C     		mov	r1, r3
 761 041a 221C     		mov	r2, r4
 762 041c FFF7FEFF 		bl	memcpy
 236:../scr/ymodem.c ****                   RamSource = (uint32_t)buf;
 763              		.loc 1 236 0
 764 0420 7A68     		ldr	r2, [r7, #4]
 765 0422 414B     		ldr	r3, .L64+60
 766 0424 1A60     		str	r2, [r3]
 237:../scr/ymodem.c ****                   for (j = 0;(j < packet_length) && (FlashDestination <  DestinationAddress + size)
 767              		.loc 1 237 0
 768 0426 0023     		mov	r3, #0
 769 0428 404A     		ldr	r2, .L64+64
 770 042a BA18     		add	r2, r7, r2
 771 042c 1360     		str	r3, [r2]
 772 042e 2EE0     		b	.L47
 773              	.L50:
 238:../scr/ymodem.c ****                   {
 239:../scr/ymodem.c ****                     /* Program the data received into STM32F10x Flash */
 240:../scr/ymodem.c ****                     FLASH_ProgramWord(FlashDestination, *(uint32_t*)RamSource);
 774              		.loc 1 240 0
 775 0430 3D4B     		ldr	r3, .L64+60
 776 0432 1B68     		ldr	r3, [r3]
 777 0434 1B68     		ldr	r3, [r3]
 778 0436 2F4A     		ldr	r2, .L64+8
 779 0438 BA18     		add	r2, r7, r2
 780 043a 1268     		ldr	r2, [r2]
 781 043c 101C     		mov	r0, r2
 782 043e 191C     		mov	r1, r3
 783 0440 FFF7FEFF 		bl	FLASH_ProgramWord
 241:../scr/ymodem.c **** 
 242:../scr/ymodem.c ****                     if (*(uint32_t*)FlashDestination != *(uint32_t*)RamSource)
 784              		.loc 1 242 0
 785 0444 2B4B     		ldr	r3, .L64+8
 786 0446 FB18     		add	r3, r7, r3
 787 0448 1B68     		ldr	r3, [r3]
 788 044a 1A68     		ldr	r2, [r3]
 789 044c 364B     		ldr	r3, .L64+60
 790 044e 1B68     		ldr	r3, [r3]
 791 0450 1B68     		ldr	r3, [r3]
 792 0452 9A42     		cmp	r2, r3
 793 0454 08D0     		beq	.L48
 243:../scr/ymodem.c ****                     {
 244:../scr/ymodem.c ****                       /* End session */
 245:../scr/ymodem.c ****                       Send_Byte(CA);
 794              		.loc 1 245 0
 795 0456 1820     		mov	r0, #24
 796 0458 FFF7ECFD 		bl	Send_Byte
 246:../scr/ymodem.c ****                       Send_Byte(CA);
 797              		.loc 1 246 0
 798 045c 1820     		mov	r0, #24
 799 045e FFF7E9FD 		bl	Send_Byte
 247:../scr/ymodem.c ****                       return -2;
 800              		.loc 1 247 0
 801 0462 0223     		mov	r3, #2
 802 0464 5B42     		neg	r3, r3
 803 0466 93E0     		b	.L60
 804              	.L48:
 248:../scr/ymodem.c ****                     }
 249:../scr/ymodem.c ****                     FlashDestination += 4;
 805              		.loc 1 249 0 discriminator 2
 806 0468 224B     		ldr	r3, .L64+8
 807 046a FB18     		add	r3, r7, r3
 808 046c 1B68     		ldr	r3, [r3]
 809 046e 0433     		add	r3, r3, #4
 810 0470 204A     		ldr	r2, .L64+8
 811 0472 BA18     		add	r2, r7, r2
 812 0474 1360     		str	r3, [r2]
 250:../scr/ymodem.c ****                     RamSource += 4;
 813              		.loc 1 250 0 discriminator 2
 814 0476 2C4B     		ldr	r3, .L64+60
 815 0478 1B68     		ldr	r3, [r3]
 816 047a 1A1D     		add	r2, r3, #4
 817 047c 2A4B     		ldr	r3, .L64+60
 818 047e 1A60     		str	r2, [r3]
 237:../scr/ymodem.c ****                   {
 819              		.loc 1 237 0 discriminator 2
 820 0480 2A4B     		ldr	r3, .L64+64
 821 0482 FB18     		add	r3, r7, r3
 822 0484 1B68     		ldr	r3, [r3]
 823 0486 0433     		add	r3, r3, #4
 824 0488 284A     		ldr	r2, .L64+64
 825 048a BA18     		add	r2, r7, r2
 826 048c 1360     		str	r3, [r2]
 827              	.L47:
 237:../scr/ymodem.c ****                   {
 828              		.loc 1 237 0 is_stmt 0 discriminator 1
 829 048e 3B69     		ldr	r3, [r7, #16]
 830 0490 264A     		ldr	r2, .L64+64
 831 0492 BA18     		add	r2, r7, r2
 832 0494 1268     		ldr	r2, [r2]
 833 0496 9A42     		cmp	r2, r3
 834 0498 0BDA     		bge	.L49
 237:../scr/ymodem.c ****                   {
 835              		.loc 1 237 0 discriminator 3
 836 049a FB68     		ldr	r3, [r7, #12]
 837 049c 1A1C     		mov	r2, r3
 838 049e 8623     		mov	r3, #134
 839 04a0 DB00     		lsl	r3, r3, #3
 840 04a2 FB18     		add	r3, r7, r3
 841 04a4 1B68     		ldr	r3, [r3]
 842 04a6 D218     		add	r2, r2, r3
 843 04a8 124B     		ldr	r3, .L64+8
 844 04aa FB18     		add	r3, r7, r3
 845 04ac 1B68     		ldr	r3, [r3]
 846 04ae 9A42     		cmp	r2, r3
 847 04b0 BED8     		bhi	.L50
 848              	.L49:
 251:../scr/ymodem.c ****                   }
 252:../scr/ymodem.c ****                   Send_Byte(ACK);
 849              		.loc 1 252 0 is_stmt 1
 850 04b2 0620     		mov	r0, #6
 851 04b4 FFF7BEFD 		bl	Send_Byte
 852              	.L46:
 253:../scr/ymodem.c **** 
 254:../scr/ymodem.c ****                 }
 255:../scr/ymodem.c ****                 packets_received ++;
 853              		.loc 1 255 0
 854 04b8 8823     		mov	r3, #136
 855 04ba DB00     		lsl	r3, r3, #3
 856 04bc FB18     		add	r3, r7, r3
 857 04be 1B68     		ldr	r3, [r3]
 858 04c0 0133     		add	r3, r3, #1
 859 04c2 8822     		mov	r2, #136
 860 04c4 D200     		lsl	r2, r2, #3
 861 04c6 BA18     		add	r2, r7, r2
 862 04c8 1360     		str	r3, [r2]
 256:../scr/ymodem.c ****                 session_begin = 1;
 863              		.loc 1 256 0
 864 04ca 0123     		mov	r3, #1
 865 04cc 8722     		mov	r2, #135
 866 04ce D200     		lsl	r2, r2, #3
 867 04d0 BA18     		add	r2, r7, r2
 868 04d2 1360     		str	r3, [r2]
 257:../scr/ymodem.c ****               }
 258:../scr/ymodem.c ****           }
 259:../scr/ymodem.c ****           break;
 869              		.loc 1 259 0
 870 04d4 4AE0     		b	.L51
 871              	.L32:
 872 04d6 49E0     		b	.L51
 873              	.L27:
 260:../scr/ymodem.c ****         case 1:
 261:../scr/ymodem.c ****           Send_Byte(CA);
 874              		.loc 1 261 0
 875 04d8 1820     		mov	r0, #24
 876 04da FFF7ABFD 		bl	Send_Byte
 262:../scr/ymodem.c ****           Send_Byte(CA);
 877              		.loc 1 262 0
 878 04de 1820     		mov	r0, #24
 879 04e0 FFF7A8FD 		bl	Send_Byte
 263:../scr/ymodem.c ****           return -3;
 880              		.loc 1 263 0
 881 04e4 0323     		mov	r3, #3
 882 04e6 5B42     		neg	r3, r3
 883 04e8 52E0     		b	.L60
 884              	.L65:
 885 04ea C046     		.align	2
 886              	.L64:
 887 04ec A4FBFFFF 		.word	-1116
 888 04f0 008C0008 		.word	134253568
 889 04f4 34040000 		.word	1076
 890 04f8 3C040000 		.word	1084
 891 04fc 44040000 		.word	1092
 892 0500 2C040000 		.word	1068
 893 0504 CCFBFFFF 		.word	-1076
 894 0508 54040000 		.word	1108
 895 050c 00000000 		.word	file_name
 896 0510 BCFBFFFF 		.word	-1092
 897 0514 FFFF0000 		.word	65535
 898 0518 00000000 		.word	NbrOfPage
 899 051c 00000000 		.word	EraseCounter
 900 0520 00000000 		.word	PageSize
 901 0524 00000000 		.word	FLASHStatus
 902 0528 00000000 		.word	RamSource
 903 052c 4C040000 		.word	1100
 904              	.L61:
 264:../scr/ymodem.c ****         default:
 265:../scr/ymodem.c ****           if (session_begin > 0)
 905              		.loc 1 265 0
 906 0530 8723     		mov	r3, #135
 907 0532 DB00     		lsl	r3, r3, #3
 908 0534 FB18     		add	r3, r7, r3
 909 0536 1B68     		ldr	r3, [r3]
 910 0538 002B     		cmp	r3, #0
 911 053a 06DD     		ble	.L52
 266:../scr/ymodem.c ****           {
 267:../scr/ymodem.c ****             errors ++;
 912              		.loc 1 267 0
 913 053c 174B     		ldr	r3, .L66
 914 053e FB18     		add	r3, r7, r3
 915 0540 1B68     		ldr	r3, [r3]
 916 0542 0133     		add	r3, r3, #1
 917 0544 154A     		ldr	r2, .L66
 918 0546 BA18     		add	r2, r7, r2
 919 0548 1360     		str	r3, [r2]
 920              	.L52:
 268:../scr/ymodem.c ****           }
 269:../scr/ymodem.c ****           if (errors > MAX_ERRORS)
 921              		.loc 1 269 0
 922 054a 144B     		ldr	r3, .L66
 923 054c FB18     		add	r3, r7, r3
 924 054e 1B68     		ldr	r3, [r3]
 925 0550 052B     		cmp	r3, #5
 926 0552 07DD     		ble	.L53
 270:../scr/ymodem.c ****           {
 271:../scr/ymodem.c ****             Send_Byte(CA);
 927              		.loc 1 271 0
 928 0554 1820     		mov	r0, #24
 929 0556 FFF76DFD 		bl	Send_Byte
 272:../scr/ymodem.c ****             Send_Byte(CA);
 930              		.loc 1 272 0
 931 055a 1820     		mov	r0, #24
 932 055c FFF76AFD 		bl	Send_Byte
 273:../scr/ymodem.c ****             return 0;
 933              		.loc 1 273 0
 934 0560 0023     		mov	r3, #0
 935 0562 15E0     		b	.L60
 936              	.L53:
 274:../scr/ymodem.c ****           }
 275:../scr/ymodem.c ****           Send_Byte(CRC16);
 937              		.loc 1 275 0
 938 0564 4320     		mov	r0, #67
 939 0566 FFF765FD 		bl	Send_Byte
 276:../scr/ymodem.c ****           break;
 940              		.loc 1 276 0
 941 056a C046     		mov	r8, r8
 942              	.L51:
 277:../scr/ymodem.c ****       }
 278:../scr/ymodem.c ****       if (file_done != 0)
 943              		.loc 1 278 0
 944 056c 0C4B     		ldr	r3, .L66+4
 945 056e FB18     		add	r3, r7, r3
 946 0570 1B68     		ldr	r3, [r3]
 947 0572 002B     		cmp	r3, #0
 948 0574 07D0     		beq	.L54
 279:../scr/ymodem.c ****       {
 280:../scr/ymodem.c ****         break;
 949              		.loc 1 280 0
 950 0576 C046     		mov	r8, r8
 281:../scr/ymodem.c ****       }
 282:../scr/ymodem.c ****     }
 283:../scr/ymodem.c ****     if (session_done != 0)
 951              		.loc 1 283 0
 952 0578 8923     		mov	r3, #137
 953 057a DB00     		lsl	r3, r3, #3
 954 057c FB18     		add	r3, r7, r3
 955 057e 1B68     		ldr	r3, [r3]
 956 0580 002B     		cmp	r3, #0
 957 0582 04D0     		beq	.L57
 958 0584 00E0     		b	.L63
 959              	.L54:
 282:../scr/ymodem.c ****     if (session_done != 0)
 960              		.loc 1 282 0
 961 0586 23E6     		b	.L56
 962              	.L63:
 284:../scr/ymodem.c ****     {
 285:../scr/ymodem.c ****       break;
 963              		.loc 1 285 0
 964 0588 C046     		mov	r8, r8
 286:../scr/ymodem.c ****     }
 287:../scr/ymodem.c ****   }
 288:../scr/ymodem.c **** #if 0
 289:../scr/ymodem.c ****   memcpy(buf, DestinationAddress, 100);
 290:../scr/ymodem.c ****   buf[100] = 0;
 291:../scr/ymodem.c ****   SerialPutString("RECEIVE\r\n");
 292:../scr/ymodem.c ****   SerialPutString(buf);
 293:../scr/ymodem.c ****   SerialPutString("\r\n");
 294:../scr/ymodem.c **** #endif
 295:../scr/ymodem.c ****   return (int32_t)size;
 965              		.loc 1 295 0
 966 058a FB68     		ldr	r3, [r7, #12]
 967 058c 00E0     		b	.L60
 968              	.L57:
 287:../scr/ymodem.c **** #if 0
 969              		.loc 1 287 0
 970 058e 12E6     		b	.L59
 971              	.L60:
 296:../scr/ymodem.c **** }
 972              		.loc 1 296 0 discriminator 1
 973 0590 181C     		mov	r0, r3
 974 0592 BD46     		mov	sp, r7
 975 0594 034B     		ldr	r3, .L66+8
 976 0596 9D44     		add	sp, sp, r3
 977              		@ sp needed
 978 0598 90BD     		pop	{r4, r7, pc}
 979              	.L67:
 980 059a C046     		.align	2
 981              	.L66:
 982 059c 3C040000 		.word	1084
 983 05a0 44040000 		.word	1092
 984 05a4 5C040000 		.word	1116
 985              		.cfi_endproc
 986              	.LFE36:
 988              		.align	2
 989              		.global	Ymodem_CheckResponse
 990              		.code	16
 991              		.thumb_func
 993              	Ymodem_CheckResponse:
 994              	.LFB37:
 297:../scr/ymodem.c **** 
 298:../scr/ymodem.c **** /**
 299:../scr/ymodem.c ****   * @brief  check response using the ymodem protocol
 300:../scr/ymodem.c ****   * @param  buf: Address of the first byte
 301:../scr/ymodem.c ****   * @retval The size of the file
 302:../scr/ymodem.c ****   */
 303:../scr/ymodem.c **** int32_t Ymodem_CheckResponse(uint8_t c)
 304:../scr/ymodem.c **** {
 995              		.loc 1 304 0
 996              		.cfi_startproc
 997 05a8 80B5     		push	{r7, lr}
 998              	.LCFI12:
 999              		.cfi_def_cfa_offset 8
 1000              		.cfi_offset 7, -8
 1001              		.cfi_offset 14, -4
 1002 05aa 82B0     		sub	sp, sp, #8
 1003              	.LCFI13:
 1004              		.cfi_def_cfa_offset 16
 1005 05ac 00AF     		add	r7, sp, #0
 1006              	.LCFI14:
 1007              		.cfi_def_cfa_register 7
 1008 05ae 021C     		mov	r2, r0
 1009 05b0 FB1D     		add	r3, r7, #7
 1010 05b2 1A70     		strb	r2, [r3]
 305:../scr/ymodem.c ****   return 0;
 1011              		.loc 1 305 0
 1012 05b4 0023     		mov	r3, #0
 306:../scr/ymodem.c **** }
 1013              		.loc 1 306 0
 1014 05b6 181C     		mov	r0, r3
 1015 05b8 BD46     		mov	sp, r7
 1016 05ba 02B0     		add	sp, sp, #8
 1017              		@ sp needed
 1018 05bc 80BD     		pop	{r7, pc}
 1019              		.cfi_endproc
 1020              	.LFE37:
 1022 05be C046     		.align	2
 1023              		.global	Ymodem_PrepareIntialPacket
 1024              		.code	16
 1025              		.thumb_func
 1027              	Ymodem_PrepareIntialPacket:
 1028              	.LFB38:
 307:../scr/ymodem.c **** 
 308:../scr/ymodem.c **** /**
 309:../scr/ymodem.c ****   * @brief  Prepare the first block
 310:../scr/ymodem.c ****   * @param  timeout
 311:../scr/ymodem.c ****   *     0: end of transmission
 312:../scr/ymodem.c ****   */
 313:../scr/ymodem.c **** void Ymodem_PrepareIntialPacket(uint8_t *data, const uint8_t* fileName, uint32_t *length)
 314:../scr/ymodem.c **** {
 1029              		.loc 1 314 0
 1030              		.cfi_startproc
 1031 05c0 80B5     		push	{r7, lr}
 1032              	.LCFI15:
 1033              		.cfi_def_cfa_offset 8
 1034              		.cfi_offset 7, -8
 1035              		.cfi_offset 14, -4
 1036 05c2 88B0     		sub	sp, sp, #32
 1037              	.LCFI16:
 1038              		.cfi_def_cfa_offset 40
 1039 05c4 00AF     		add	r7, sp, #0
 1040              	.LCFI17:
 1041              		.cfi_def_cfa_register 7
 1042 05c6 F860     		str	r0, [r7, #12]
 1043 05c8 B960     		str	r1, [r7, #8]
 1044 05ca 7A60     		str	r2, [r7, #4]
 315:../scr/ymodem.c ****   uint16_t i, j;
 316:../scr/ymodem.c ****   uint8_t file_ptr[10];
 317:../scr/ymodem.c ****   
 318:../scr/ymodem.c ****   /* Make first three packet */
 319:../scr/ymodem.c ****   data[0] = SOH;
 1045              		.loc 1 319 0
 1046 05cc FB68     		ldr	r3, [r7, #12]
 1047 05ce 0122     		mov	r2, #1
 1048 05d0 1A70     		strb	r2, [r3]
 320:../scr/ymodem.c ****   data[1] = 0x00;
 1049              		.loc 1 320 0
 1050 05d2 FB68     		ldr	r3, [r7, #12]
 1051 05d4 0133     		add	r3, r3, #1
 1052 05d6 0022     		mov	r2, #0
 1053 05d8 1A70     		strb	r2, [r3]
 321:../scr/ymodem.c ****   data[2] = 0xff;
 1054              		.loc 1 321 0
 1055 05da FB68     		ldr	r3, [r7, #12]
 1056 05dc 0233     		add	r3, r3, #2
 1057 05de FF22     		mov	r2, #255
 1058 05e0 1A70     		strb	r2, [r3]
 322:../scr/ymodem.c ****   
 323:../scr/ymodem.c ****   /* Filename packet has valid data */
 324:../scr/ymodem.c ****   for (i = 0; (fileName[i] != '\0') && (i < FILE_NAME_LENGTH);i++)
 1059              		.loc 1 324 0
 1060 05e2 1E23     		mov	r3, #30
 1061 05e4 FB18     		add	r3, r7, r3
 1062 05e6 0022     		mov	r2, #0
 1063 05e8 1A80     		strh	r2, [r3]
 1064 05ea 13E0     		b	.L71
 1065              	.L73:
 325:../scr/ymodem.c ****   {
 326:../scr/ymodem.c ****      data[i + PACKET_HEADER] = fileName[i];
 1066              		.loc 1 326 0 discriminator 4
 1067 05ec 1E23     		mov	r3, #30
 1068 05ee FB18     		add	r3, r7, r3
 1069 05f0 1B88     		ldrh	r3, [r3]
 1070 05f2 0333     		add	r3, r3, #3
 1071 05f4 FA68     		ldr	r2, [r7, #12]
 1072 05f6 D318     		add	r3, r2, r3
 1073 05f8 1E22     		mov	r2, #30
 1074 05fa BA18     		add	r2, r7, r2
 1075 05fc 1288     		ldrh	r2, [r2]
 1076 05fe B968     		ldr	r1, [r7, #8]
 1077 0600 8A18     		add	r2, r1, r2
 1078 0602 1278     		ldrb	r2, [r2]
 1079 0604 1A70     		strb	r2, [r3]
 324:../scr/ymodem.c ****   {
 1080              		.loc 1 324 0 discriminator 4
 1081 0606 1E23     		mov	r3, #30
 1082 0608 FB18     		add	r3, r7, r3
 1083 060a 1A88     		ldrh	r2, [r3]
 1084 060c 1E23     		mov	r3, #30
 1085 060e FB18     		add	r3, r7, r3
 1086 0610 0132     		add	r2, r2, #1
 1087 0612 1A80     		strh	r2, [r3]
 1088              	.L71:
 324:../scr/ymodem.c ****   {
 1089              		.loc 1 324 0 is_stmt 0 discriminator 1
 1090 0614 1E23     		mov	r3, #30
 1091 0616 FB18     		add	r3, r7, r3
 1092 0618 1B88     		ldrh	r3, [r3]
 1093 061a BA68     		ldr	r2, [r7, #8]
 1094 061c D318     		add	r3, r2, r3
 1095 061e 1B78     		ldrb	r3, [r3]
 1096 0620 002B     		cmp	r3, #0
 1097 0622 04D0     		beq	.L72
 324:../scr/ymodem.c ****   {
 1098              		.loc 1 324 0 discriminator 3
 1099 0624 1E23     		mov	r3, #30
 1100 0626 FB18     		add	r3, r7, r3
 1101 0628 1B88     		ldrh	r3, [r3]
 1102 062a FF2B     		cmp	r3, #255
 1103 062c DED9     		bls	.L73
 1104              	.L72:
 327:../scr/ymodem.c ****   }
 328:../scr/ymodem.c **** 
 329:../scr/ymodem.c ****   data[i + PACKET_HEADER] = 0x00;
 1105              		.loc 1 329 0 is_stmt 1
 1106 062e 1E23     		mov	r3, #30
 1107 0630 FB18     		add	r3, r7, r3
 1108 0632 1B88     		ldrh	r3, [r3]
 1109 0634 0333     		add	r3, r3, #3
 1110 0636 FA68     		ldr	r2, [r7, #12]
 1111 0638 D318     		add	r3, r2, r3
 1112 063a 0022     		mov	r2, #0
 1113 063c 1A70     		strb	r2, [r3]
 330:../scr/ymodem.c ****   
 331:../scr/ymodem.c ****   Int2Str (file_ptr, *length);
 1114              		.loc 1 331 0
 1115 063e 7B68     		ldr	r3, [r7, #4]
 1116 0640 1B68     		ldr	r3, [r3]
 1117 0642 1022     		mov	r2, #16
 1118 0644 BA18     		add	r2, r7, r2
 1119 0646 101C     		mov	r0, r2
 1120 0648 191C     		mov	r1, r3
 1121 064a FFF7FEFF 		bl	Int2Str
 332:../scr/ymodem.c ****   for (j =0, i = i + PACKET_HEADER + 1; file_ptr[j] != '\0' ; )
 1122              		.loc 1 332 0
 1123 064e 1C23     		mov	r3, #28
 1124 0650 FB18     		add	r3, r7, r3
 1125 0652 0022     		mov	r2, #0
 1126 0654 1A80     		strh	r2, [r3]
 1127 0656 1E23     		mov	r3, #30
 1128 0658 FB18     		add	r3, r7, r3
 1129 065a 1E22     		mov	r2, #30
 1130 065c BA18     		add	r2, r7, r2
 1131 065e 1288     		ldrh	r2, [r2]
 1132 0660 0432     		add	r2, r2, #4
 1133 0662 1A80     		strh	r2, [r3]
 1134 0664 15E0     		b	.L74
 1135              	.L75:
 333:../scr/ymodem.c ****   {
 334:../scr/ymodem.c ****      data[i++] = file_ptr[j++];
 1136              		.loc 1 334 0
 1137 0666 1E23     		mov	r3, #30
 1138 0668 FB18     		add	r3, r7, r3
 1139 066a 1B88     		ldrh	r3, [r3]
 1140 066c 1E22     		mov	r2, #30
 1141 066e BA18     		add	r2, r7, r2
 1142 0670 591C     		add	r1, r3, #1
 1143 0672 1180     		strh	r1, [r2]
 1144 0674 1A1C     		mov	r2, r3
 1145 0676 FB68     		ldr	r3, [r7, #12]
 1146 0678 9A18     		add	r2, r3, r2
 1147 067a 1C23     		mov	r3, #28
 1148 067c FB18     		add	r3, r7, r3
 1149 067e 1B88     		ldrh	r3, [r3]
 1150 0680 1C21     		mov	r1, #28
 1151 0682 7918     		add	r1, r7, r1
 1152 0684 581C     		add	r0, r3, #1
 1153 0686 0880     		strh	r0, [r1]
 1154 0688 191C     		mov	r1, r3
 1155 068a 1023     		mov	r3, #16
 1156 068c FB18     		add	r3, r7, r3
 1157 068e 5B5C     		ldrb	r3, [r3, r1]
 1158 0690 1370     		strb	r3, [r2]
 1159              	.L74:
 332:../scr/ymodem.c ****   for (j =0, i = i + PACKET_HEADER + 1; file_ptr[j] != '\0' ; )
 1160              		.loc 1 332 0 discriminator 1
 1161 0692 1C23     		mov	r3, #28
 1162 0694 FB18     		add	r3, r7, r3
 1163 0696 1B88     		ldrh	r3, [r3]
 1164 0698 1022     		mov	r2, #16
 1165 069a BA18     		add	r2, r7, r2
 1166 069c D35C     		ldrb	r3, [r2, r3]
 1167 069e 002B     		cmp	r3, #0
 1168 06a0 E1D1     		bne	.L75
 335:../scr/ymodem.c ****   }
 336:../scr/ymodem.c ****   
 337:../scr/ymodem.c ****   for (j = i; j < PACKET_SIZE + PACKET_HEADER; j++)
 1169              		.loc 1 337 0
 1170 06a2 1C23     		mov	r3, #28
 1171 06a4 FB18     		add	r3, r7, r3
 1172 06a6 1E22     		mov	r2, #30
 1173 06a8 BA18     		add	r2, r7, r2
 1174 06aa 1288     		ldrh	r2, [r2]
 1175 06ac 1A80     		strh	r2, [r3]
 1176 06ae 0DE0     		b	.L76
 1177              	.L77:
 338:../scr/ymodem.c ****   {
 339:../scr/ymodem.c ****     data[j] = 0;
 1178              		.loc 1 339 0 discriminator 3
 1179 06b0 1C23     		mov	r3, #28
 1180 06b2 FB18     		add	r3, r7, r3
 1181 06b4 1B88     		ldrh	r3, [r3]
 1182 06b6 FA68     		ldr	r2, [r7, #12]
 1183 06b8 D318     		add	r3, r2, r3
 1184 06ba 0022     		mov	r2, #0
 1185 06bc 1A70     		strb	r2, [r3]
 337:../scr/ymodem.c ****   {
 1186              		.loc 1 337 0 discriminator 3
 1187 06be 1C23     		mov	r3, #28
 1188 06c0 FB18     		add	r3, r7, r3
 1189 06c2 1A88     		ldrh	r2, [r3]
 1190 06c4 1C23     		mov	r3, #28
 1191 06c6 FB18     		add	r3, r7, r3
 1192 06c8 0132     		add	r2, r2, #1
 1193 06ca 1A80     		strh	r2, [r3]
 1194              	.L76:
 337:../scr/ymodem.c ****   {
 1195              		.loc 1 337 0 is_stmt 0 discriminator 1
 1196 06cc 1C23     		mov	r3, #28
 1197 06ce FB18     		add	r3, r7, r3
 1198 06d0 1B88     		ldrh	r3, [r3]
 1199 06d2 822B     		cmp	r3, #130
 1200 06d4 ECD9     		bls	.L77
 340:../scr/ymodem.c ****   }
 341:../scr/ymodem.c **** }
 1201              		.loc 1 341 0 is_stmt 1
 1202 06d6 BD46     		mov	sp, r7
 1203 06d8 08B0     		add	sp, sp, #32
 1204              		@ sp needed
 1205 06da 80BD     		pop	{r7, pc}
 1206              		.cfi_endproc
 1207              	.LFE38:
 1209              		.align	2
 1210              		.global	Ymodem_PreparePacket
 1211              		.code	16
 1212              		.thumb_func
 1214              	Ymodem_PreparePacket:
 1215              	.LFB39:
 342:../scr/ymodem.c **** 
 343:../scr/ymodem.c **** /**
 344:../scr/ymodem.c ****   * @brief  Prepare the data packet
 345:../scr/ymodem.c ****   * @param  timeout
 346:../scr/ymodem.c ****   *     0: end of transmission
 347:../scr/ymodem.c ****   */
 348:../scr/ymodem.c **** void Ymodem_PreparePacket(uint8_t *SourceBuf, uint8_t *data, uint8_t pktNo, uint32_t sizeBlk)
 349:../scr/ymodem.c **** {
 1216              		.loc 1 349 0
 1217              		.cfi_startproc
 1218 06dc 80B5     		push	{r7, lr}
 1219              	.LCFI18:
 1220              		.cfi_def_cfa_offset 8
 1221              		.cfi_offset 7, -8
 1222              		.cfi_offset 14, -4
 1223 06de 88B0     		sub	sp, sp, #32
 1224              	.LCFI19:
 1225              		.cfi_def_cfa_offset 40
 1226 06e0 00AF     		add	r7, sp, #0
 1227              	.LCFI20:
 1228              		.cfi_def_cfa_register 7
 1229 06e2 F860     		str	r0, [r7, #12]
 1230 06e4 B960     		str	r1, [r7, #8]
 1231 06e6 3B60     		str	r3, [r7]
 1232 06e8 FB1D     		add	r3, r7, #7
 1233 06ea 1A70     		strb	r2, [r3]
 350:../scr/ymodem.c ****   uint16_t i, size, packetSize;
 351:../scr/ymodem.c ****   uint8_t* file_ptr;
 352:../scr/ymodem.c ****   
 353:../scr/ymodem.c ****   /* Make first three packet */
 354:../scr/ymodem.c ****   packetSize = sizeBlk >= PACKET_1K_SIZE ? PACKET_1K_SIZE : PACKET_SIZE;
 1234              		.loc 1 354 0
 1235 06ec 3B68     		ldr	r3, [r7]
 1236 06ee 3C4A     		ldr	r2, .L89
 1237 06f0 9342     		cmp	r3, r2
 1238 06f2 02D9     		bls	.L79
 1239              		.loc 1 354 0 is_stmt 0 discriminator 1
 1240 06f4 8023     		mov	r3, #128
 1241 06f6 DA00     		lsl	r2, r3, #3
 1242 06f8 00E0     		b	.L80
 1243              	.L79:
 1244              		.loc 1 354 0 discriminator 2
 1245 06fa 8022     		mov	r2, #128
 1246              	.L80:
 1247              		.loc 1 354 0 discriminator 4
 1248 06fc 1623     		mov	r3, #22
 1249 06fe FB18     		add	r3, r7, r3
 1250 0700 1A80     		strh	r2, [r3]
 355:../scr/ymodem.c ****   size = sizeBlk < packetSize ? sizeBlk :packetSize;
 1251              		.loc 1 355 0 is_stmt 1 discriminator 4
 1252 0702 1623     		mov	r3, #22
 1253 0704 FB18     		add	r3, r7, r3
 1254 0706 1A88     		ldrh	r2, [r3]
 1255 0708 3B68     		ldr	r3, [r7]
 1256 070a 9A42     		cmp	r2, r3
 1257 070c 00D9     		bls	.L81
 1258 070e 1A1C     		mov	r2, r3
 1259              	.L81:
 1260 0710 1423     		mov	r3, #20
 1261 0712 FB18     		add	r3, r7, r3
 1262 0714 1A80     		strh	r2, [r3]
 356:../scr/ymodem.c ****   if (packetSize == PACKET_1K_SIZE)
 1263              		.loc 1 356 0 discriminator 4
 1264 0716 1623     		mov	r3, #22
 1265 0718 FB18     		add	r3, r7, r3
 1266 071a 1A88     		ldrh	r2, [r3]
 1267 071c 8023     		mov	r3, #128
 1268 071e DB00     		lsl	r3, r3, #3
 1269 0720 9A42     		cmp	r2, r3
 1270 0722 03D1     		bne	.L82
 357:../scr/ymodem.c ****   {
 358:../scr/ymodem.c ****      data[0] = STX;
 1271              		.loc 1 358 0
 1272 0724 BB68     		ldr	r3, [r7, #8]
 1273 0726 0222     		mov	r2, #2
 1274 0728 1A70     		strb	r2, [r3]
 1275 072a 02E0     		b	.L83
 1276              	.L82:
 359:../scr/ymodem.c ****   }
 360:../scr/ymodem.c ****   else
 361:../scr/ymodem.c ****   {
 362:../scr/ymodem.c ****      data[0] = SOH;
 1277              		.loc 1 362 0
 1278 072c BB68     		ldr	r3, [r7, #8]
 1279 072e 0122     		mov	r2, #1
 1280 0730 1A70     		strb	r2, [r3]
 1281              	.L83:
 363:../scr/ymodem.c ****   }
 364:../scr/ymodem.c ****   data[1] = pktNo;
 1282              		.loc 1 364 0
 1283 0732 BB68     		ldr	r3, [r7, #8]
 1284 0734 0133     		add	r3, r3, #1
 1285 0736 FA1D     		add	r2, r7, #7
 1286 0738 1278     		ldrb	r2, [r2]
 1287 073a 1A70     		strb	r2, [r3]
 365:../scr/ymodem.c ****   data[2] = (~pktNo);
 1288              		.loc 1 365 0
 1289 073c BB68     		ldr	r3, [r7, #8]
 1290 073e 0233     		add	r3, r3, #2
 1291 0740 FA1D     		add	r2, r7, #7
 1292 0742 1278     		ldrb	r2, [r2]
 1293 0744 D243     		mvn	r2, r2
 1294 0746 D2B2     		uxtb	r2, r2
 1295 0748 1A70     		strb	r2, [r3]
 366:../scr/ymodem.c ****   file_ptr = SourceBuf;
 1296              		.loc 1 366 0
 1297 074a FB68     		ldr	r3, [r7, #12]
 1298 074c BB61     		str	r3, [r7, #24]
 367:../scr/ymodem.c ****   
 368:../scr/ymodem.c ****   /* Filename packet has valid data */
 369:../scr/ymodem.c ****   for (i = PACKET_HEADER; i < size + PACKET_HEADER;i++)
 1299              		.loc 1 369 0
 1300 074e 1E23     		mov	r3, #30
 1301 0750 FB18     		add	r3, r7, r3
 1302 0752 0322     		mov	r2, #3
 1303 0754 1A80     		strh	r2, [r3]
 1304 0756 10E0     		b	.L84
 1305              	.L85:
 370:../scr/ymodem.c ****   {
 371:../scr/ymodem.c ****      data[i] = *file_ptr++;
 1306              		.loc 1 371 0 discriminator 3
 1307 0758 1E23     		mov	r3, #30
 1308 075a FB18     		add	r3, r7, r3
 1309 075c 1B88     		ldrh	r3, [r3]
 1310 075e BA68     		ldr	r2, [r7, #8]
 1311 0760 D218     		add	r2, r2, r3
 1312 0762 BB69     		ldr	r3, [r7, #24]
 1313 0764 591C     		add	r1, r3, #1
 1314 0766 B961     		str	r1, [r7, #24]
 1315 0768 1B78     		ldrb	r3, [r3]
 1316 076a 1370     		strb	r3, [r2]
 369:../scr/ymodem.c ****   {
 1317              		.loc 1 369 0 discriminator 3
 1318 076c 1E23     		mov	r3, #30
 1319 076e FB18     		add	r3, r7, r3
 1320 0770 1A88     		ldrh	r2, [r3]
 1321 0772 1E23     		mov	r3, #30
 1322 0774 FB18     		add	r3, r7, r3
 1323 0776 0132     		add	r2, r2, #1
 1324 0778 1A80     		strh	r2, [r3]
 1325              	.L84:
 369:../scr/ymodem.c ****   {
 1326              		.loc 1 369 0 is_stmt 0 discriminator 1
 1327 077a 1E23     		mov	r3, #30
 1328 077c FB18     		add	r3, r7, r3
 1329 077e 1A88     		ldrh	r2, [r3]
 1330 0780 1423     		mov	r3, #20
 1331 0782 FB18     		add	r3, r7, r3
 1332 0784 1B88     		ldrh	r3, [r3]
 1333 0786 0333     		add	r3, r3, #3
 1334 0788 9A42     		cmp	r2, r3
 1335 078a E5DB     		blt	.L85
 372:../scr/ymodem.c ****   }
 373:../scr/ymodem.c ****   if ( size  <= packetSize)
 1336              		.loc 1 373 0 is_stmt 1
 1337 078c 1423     		mov	r3, #20
 1338 078e FA18     		add	r2, r7, r3
 1339 0790 1623     		mov	r3, #22
 1340 0792 FB18     		add	r3, r7, r3
 1341 0794 1288     		ldrh	r2, [r2]
 1342 0796 1B88     		ldrh	r3, [r3]
 1343 0798 9A42     		cmp	r2, r3
 1344 079a 1ED8     		bhi	.L78
 374:../scr/ymodem.c ****   {
 375:../scr/ymodem.c ****     for (i = size + PACKET_HEADER; i < packetSize + PACKET_HEADER; i++)
 1345              		.loc 1 375 0
 1346 079c 1E23     		mov	r3, #30
 1347 079e FB18     		add	r3, r7, r3
 1348 07a0 1422     		mov	r2, #20
 1349 07a2 BA18     		add	r2, r7, r2
 1350 07a4 1288     		ldrh	r2, [r2]
 1351 07a6 0332     		add	r2, r2, #3
 1352 07a8 1A80     		strh	r2, [r3]
 1353 07aa 0DE0     		b	.L87
 1354              	.L88:
 376:../scr/ymodem.c ****     {
 377:../scr/ymodem.c ****       data[i] = 0x1A; /* EOF (0x1A) or 0x00 */
 1355              		.loc 1 377 0 discriminator 3
 1356 07ac 1E23     		mov	r3, #30
 1357 07ae FB18     		add	r3, r7, r3
 1358 07b0 1B88     		ldrh	r3, [r3]
 1359 07b2 BA68     		ldr	r2, [r7, #8]
 1360 07b4 D318     		add	r3, r2, r3
 1361 07b6 1A22     		mov	r2, #26
 1362 07b8 1A70     		strb	r2, [r3]
 375:../scr/ymodem.c ****     {
 1363              		.loc 1 375 0 discriminator 3
 1364 07ba 1E23     		mov	r3, #30
 1365 07bc FB18     		add	r3, r7, r3
 1366 07be 1A88     		ldrh	r2, [r3]
 1367 07c0 1E23     		mov	r3, #30
 1368 07c2 FB18     		add	r3, r7, r3
 1369 07c4 0132     		add	r2, r2, #1
 1370 07c6 1A80     		strh	r2, [r3]
 1371              	.L87:
 375:../scr/ymodem.c ****     {
 1372              		.loc 1 375 0 is_stmt 0 discriminator 1
 1373 07c8 1E23     		mov	r3, #30
 1374 07ca FB18     		add	r3, r7, r3
 1375 07cc 1A88     		ldrh	r2, [r3]
 1376 07ce 1623     		mov	r3, #22
 1377 07d0 FB18     		add	r3, r7, r3
 1378 07d2 1B88     		ldrh	r3, [r3]
 1379 07d4 0333     		add	r3, r3, #3
 1380 07d6 9A42     		cmp	r2, r3
 1381 07d8 E8DB     		blt	.L88
 1382              	.L78:
 378:../scr/ymodem.c ****     }
 379:../scr/ymodem.c ****   }
 380:../scr/ymodem.c **** }
 1383              		.loc 1 380 0 is_stmt 1
 1384 07da BD46     		mov	sp, r7
 1385 07dc 08B0     		add	sp, sp, #32
 1386              		@ sp needed
 1387 07de 80BD     		pop	{r7, pc}
 1388              	.L90:
 1389              		.align	2
 1390              	.L89:
 1391 07e0 FF030000 		.word	1023
 1392              		.cfi_endproc
 1393              	.LFE39:
 1395              		.align	2
 1396              		.global	UpdateCRC16
 1397              		.code	16
 1398              		.thumb_func
 1400              	UpdateCRC16:
 1401              	.LFB40:
 381:../scr/ymodem.c **** 
 382:../scr/ymodem.c **** /**
 383:../scr/ymodem.c ****   * @brief  Update CRC16 for input byte
 384:../scr/ymodem.c ****   * @param  CRC input value 
 385:../scr/ymodem.c ****   * @param  input byte
 386:../scr/ymodem.c ****    * @retval None
 387:../scr/ymodem.c ****   */
 388:../scr/ymodem.c **** uint16_t UpdateCRC16(uint16_t crcIn, uint8_t byte)
 389:../scr/ymodem.c **** {
 1402              		.loc 1 389 0
 1403              		.cfi_startproc
 1404 07e4 80B5     		push	{r7, lr}
 1405              	.LCFI21:
 1406              		.cfi_def_cfa_offset 8
 1407              		.cfi_offset 7, -8
 1408              		.cfi_offset 14, -4
 1409 07e6 84B0     		sub	sp, sp, #16
 1410              	.LCFI22:
 1411              		.cfi_def_cfa_offset 24
 1412 07e8 00AF     		add	r7, sp, #0
 1413              	.LCFI23:
 1414              		.cfi_def_cfa_register 7
 1415 07ea 021C     		mov	r2, r0
 1416 07ec BB1D     		add	r3, r7, #6
 1417 07ee 1A80     		strh	r2, [r3]
 1418 07f0 7B1D     		add	r3, r7, #5
 1419 07f2 0A1C     		add	r2, r1, #0
 1420 07f4 1A70     		strb	r2, [r3]
 390:../scr/ymodem.c ****  uint32_t crc = crcIn;
 1421              		.loc 1 390 0
 1422 07f6 BB1D     		add	r3, r7, #6
 1423 07f8 1B88     		ldrh	r3, [r3]
 1424 07fa FB60     		str	r3, [r7, #12]
 391:../scr/ymodem.c ****  uint32_t in = byte|0x100;
 1425              		.loc 1 391 0
 1426 07fc 7B1D     		add	r3, r7, #5
 1427 07fe 1B78     		ldrb	r3, [r3]
 1428 0800 8022     		mov	r2, #128
 1429 0802 5200     		lsl	r2, r2, #1
 1430 0804 1343     		orr	r3, r2
 1431 0806 BB60     		str	r3, [r7, #8]
 1432              	.L94:
 392:../scr/ymodem.c ****  do
 393:../scr/ymodem.c ****  {
 394:../scr/ymodem.c ****  crc <<= 1;
 1433              		.loc 1 394 0
 1434 0808 FB68     		ldr	r3, [r7, #12]
 1435 080a 5B00     		lsl	r3, r3, #1
 1436 080c FB60     		str	r3, [r7, #12]
 395:../scr/ymodem.c ****  in <<= 1;
 1437              		.loc 1 395 0
 1438 080e BB68     		ldr	r3, [r7, #8]
 1439 0810 5B00     		lsl	r3, r3, #1
 1440 0812 BB60     		str	r3, [r7, #8]
 396:../scr/ymodem.c ****  if(in&0x100)
 1441              		.loc 1 396 0
 1442 0814 BA68     		ldr	r2, [r7, #8]
 1443 0816 8023     		mov	r3, #128
 1444 0818 5B00     		lsl	r3, r3, #1
 1445 081a 1340     		and	r3, r2
 1446 081c 02D0     		beq	.L92
 397:../scr/ymodem.c ****  ++crc;
 1447              		.loc 1 397 0
 1448 081e FB68     		ldr	r3, [r7, #12]
 1449 0820 0133     		add	r3, r3, #1
 1450 0822 FB60     		str	r3, [r7, #12]
 1451              	.L92:
 398:../scr/ymodem.c ****  if(crc&0x10000)
 1452              		.loc 1 398 0
 1453 0824 FA68     		ldr	r2, [r7, #12]
 1454 0826 8023     		mov	r3, #128
 1455 0828 5B02     		lsl	r3, r3, #9
 1456 082a 1340     		and	r3, r2
 1457 082c 03D0     		beq	.L93
 399:../scr/ymodem.c ****  crc ^= 0x1021;
 1458              		.loc 1 399 0
 1459 082e FB68     		ldr	r3, [r7, #12]
 1460 0830 064A     		ldr	r2, .L96
 1461 0832 5340     		eor	r3, r2
 1462 0834 FB60     		str	r3, [r7, #12]
 1463              	.L93:
 400:../scr/ymodem.c ****  }
 401:../scr/ymodem.c ****  while(!(in&0x10000));
 1464              		.loc 1 401 0
 1465 0836 BA68     		ldr	r2, [r7, #8]
 1466 0838 8023     		mov	r3, #128
 1467 083a 5B02     		lsl	r3, r3, #9
 1468 083c 1340     		and	r3, r2
 1469 083e E3D0     		beq	.L94
 402:../scr/ymodem.c ****  return crc&0xffffu;
 1470              		.loc 1 402 0
 1471 0840 FB68     		ldr	r3, [r7, #12]
 1472 0842 9BB2     		uxth	r3, r3
 403:../scr/ymodem.c **** }
 1473              		.loc 1 403 0
 1474 0844 181C     		mov	r0, r3
 1475 0846 BD46     		mov	sp, r7
 1476 0848 04B0     		add	sp, sp, #16
 1477              		@ sp needed
 1478 084a 80BD     		pop	{r7, pc}
 1479              	.L97:
 1480              		.align	2
 1481              	.L96:
 1482 084c 21100000 		.word	4129
 1483              		.cfi_endproc
 1484              	.LFE40:
 1486              		.align	2
 1487              		.global	Cal_CRC16
 1488              		.code	16
 1489              		.thumb_func
 1491              	Cal_CRC16:
 1492              	.LFB41:
 404:../scr/ymodem.c **** 
 405:../scr/ymodem.c **** 
 406:../scr/ymodem.c **** /**
 407:../scr/ymodem.c ****   * @brief  Cal CRC16 for YModem Packet
 408:../scr/ymodem.c ****   * @param  data
 409:../scr/ymodem.c ****   * @param  length
 410:../scr/ymodem.c ****    * @retval None
 411:../scr/ymodem.c ****   */
 412:../scr/ymodem.c **** uint16_t Cal_CRC16(const uint8_t* data, uint32_t size)
 413:../scr/ymodem.c **** {
 1493              		.loc 1 413 0
 1494              		.cfi_startproc
 1495 0850 80B5     		push	{r7, lr}
 1496              	.LCFI24:
 1497              		.cfi_def_cfa_offset 8
 1498              		.cfi_offset 7, -8
 1499              		.cfi_offset 14, -4
 1500 0852 84B0     		sub	sp, sp, #16
 1501              	.LCFI25:
 1502              		.cfi_def_cfa_offset 24
 1503 0854 00AF     		add	r7, sp, #0
 1504              	.LCFI26:
 1505              		.cfi_def_cfa_register 7
 1506 0856 7860     		str	r0, [r7, #4]
 1507 0858 3960     		str	r1, [r7]
 414:../scr/ymodem.c ****  uint32_t crc = 0;
 1508              		.loc 1 414 0
 1509 085a 0023     		mov	r3, #0
 1510 085c FB60     		str	r3, [r7, #12]
 415:../scr/ymodem.c ****  const uint8_t* dataEnd = data+size;
 1511              		.loc 1 415 0
 1512 085e 7A68     		ldr	r2, [r7, #4]
 1513 0860 3B68     		ldr	r3, [r7]
 1514 0862 D318     		add	r3, r2, r3
 1515 0864 BB60     		str	r3, [r7, #8]
 416:../scr/ymodem.c ****  while(data<dataEnd)
 1516              		.loc 1 416 0
 1517 0866 0BE0     		b	.L99
 1518              	.L100:
 417:../scr/ymodem.c ****   crc = UpdateCRC16(crc,*data++);
 1519              		.loc 1 417 0
 1520 0868 FB68     		ldr	r3, [r7, #12]
 1521 086a 99B2     		uxth	r1, r3
 1522 086c 7B68     		ldr	r3, [r7, #4]
 1523 086e 5A1C     		add	r2, r3, #1
 1524 0870 7A60     		str	r2, [r7, #4]
 1525 0872 1B78     		ldrb	r3, [r3]
 1526 0874 081C     		mov	r0, r1
 1527 0876 191C     		mov	r1, r3
 1528 0878 FFF7FEFF 		bl	UpdateCRC16
 1529 087c 031C     		mov	r3, r0
 1530 087e FB60     		str	r3, [r7, #12]
 1531              	.L99:
 416:../scr/ymodem.c ****  while(data<dataEnd)
 1532              		.loc 1 416 0
 1533 0880 7A68     		ldr	r2, [r7, #4]
 1534 0882 BB68     		ldr	r3, [r7, #8]
 1535 0884 9A42     		cmp	r2, r3
 1536 0886 EFD3     		bcc	.L100
 418:../scr/ymodem.c ****  
 419:../scr/ymodem.c ****  crc = UpdateCRC16(crc,0);
 1537              		.loc 1 419 0
 1538 0888 FB68     		ldr	r3, [r7, #12]
 1539 088a 9BB2     		uxth	r3, r3
 1540 088c 181C     		mov	r0, r3
 1541 088e 0021     		mov	r1, #0
 1542 0890 FFF7FEFF 		bl	UpdateCRC16
 1543 0894 031C     		mov	r3, r0
 1544 0896 FB60     		str	r3, [r7, #12]
 420:../scr/ymodem.c ****  crc = UpdateCRC16(crc,0);
 1545              		.loc 1 420 0
 1546 0898 FB68     		ldr	r3, [r7, #12]
 1547 089a 9BB2     		uxth	r3, r3
 1548 089c 181C     		mov	r0, r3
 1549 089e 0021     		mov	r1, #0
 1550 08a0 FFF7FEFF 		bl	UpdateCRC16
 1551 08a4 031C     		mov	r3, r0
 1552 08a6 FB60     		str	r3, [r7, #12]
 421:../scr/ymodem.c ****  return crc&0xffffu;
 1553              		.loc 1 421 0
 1554 08a8 FB68     		ldr	r3, [r7, #12]
 1555 08aa 9BB2     		uxth	r3, r3
 422:../scr/ymodem.c **** }
 1556              		.loc 1 422 0
 1557 08ac 181C     		mov	r0, r3
 1558 08ae BD46     		mov	sp, r7
 1559 08b0 04B0     		add	sp, sp, #16
 1560              		@ sp needed
 1561 08b2 80BD     		pop	{r7, pc}
 1562              		.cfi_endproc
 1563              	.LFE41:
 1565              		.align	2
 1566              		.global	CalChecksum
 1567              		.code	16
 1568              		.thumb_func
 1570              	CalChecksum:
 1571              	.LFB42:
 423:../scr/ymodem.c **** 
 424:../scr/ymodem.c **** /**
 425:../scr/ymodem.c ****   * @brief  Cal Check sum for YModem Packet
 426:../scr/ymodem.c ****   * @param  data
 427:../scr/ymodem.c ****   * @param  length
 428:../scr/ymodem.c ****    * @retval None
 429:../scr/ymodem.c ****   */
 430:../scr/ymodem.c **** uint8_t CalChecksum(const uint8_t* data, uint32_t size)
 431:../scr/ymodem.c **** {
 1572              		.loc 1 431 0
 1573              		.cfi_startproc
 1574 08b4 80B5     		push	{r7, lr}
 1575              	.LCFI27:
 1576              		.cfi_def_cfa_offset 8
 1577              		.cfi_offset 7, -8
 1578              		.cfi_offset 14, -4
 1579 08b6 84B0     		sub	sp, sp, #16
 1580              	.LCFI28:
 1581              		.cfi_def_cfa_offset 24
 1582 08b8 00AF     		add	r7, sp, #0
 1583              	.LCFI29:
 1584              		.cfi_def_cfa_register 7
 1585 08ba 7860     		str	r0, [r7, #4]
 1586 08bc 3960     		str	r1, [r7]
 432:../scr/ymodem.c ****  uint32_t sum = 0;
 1587              		.loc 1 432 0
 1588 08be 0023     		mov	r3, #0
 1589 08c0 FB60     		str	r3, [r7, #12]
 433:../scr/ymodem.c ****  const uint8_t* dataEnd = data+size;
 1590              		.loc 1 433 0
 1591 08c2 7A68     		ldr	r2, [r7, #4]
 1592 08c4 3B68     		ldr	r3, [r7]
 1593 08c6 D318     		add	r3, r2, r3
 1594 08c8 BB60     		str	r3, [r7, #8]
 434:../scr/ymodem.c ****  while(data < dataEnd )
 1595              		.loc 1 434 0
 1596 08ca 07E0     		b	.L103
 1597              	.L104:
 435:../scr/ymodem.c ****    sum += *data++;
 1598              		.loc 1 435 0
 1599 08cc 7B68     		ldr	r3, [r7, #4]
 1600 08ce 5A1C     		add	r2, r3, #1
 1601 08d0 7A60     		str	r2, [r7, #4]
 1602 08d2 1B78     		ldrb	r3, [r3]
 1603 08d4 1A1C     		mov	r2, r3
 1604 08d6 FB68     		ldr	r3, [r7, #12]
 1605 08d8 9B18     		add	r3, r3, r2
 1606 08da FB60     		str	r3, [r7, #12]
 1607              	.L103:
 434:../scr/ymodem.c ****  while(data < dataEnd )
 1608              		.loc 1 434 0
 1609 08dc 7A68     		ldr	r2, [r7, #4]
 1610 08de BB68     		ldr	r3, [r7, #8]
 1611 08e0 9A42     		cmp	r2, r3
 1612 08e2 F3D3     		bcc	.L104
 436:../scr/ymodem.c ****  return sum&0xffu;
 1613              		.loc 1 436 0
 1614 08e4 FB68     		ldr	r3, [r7, #12]
 1615 08e6 DBB2     		uxtb	r3, r3
 437:../scr/ymodem.c **** }
 1616              		.loc 1 437 0
 1617 08e8 181C     		mov	r0, r3
 1618 08ea BD46     		mov	sp, r7
 1619 08ec 04B0     		add	sp, sp, #16
 1620              		@ sp needed
 1621 08ee 80BD     		pop	{r7, pc}
 1622              		.cfi_endproc
 1623              	.LFE42:
 1625              		.align	2
 1626              		.global	Ymodem_SendPacket
 1627              		.code	16
 1628              		.thumb_func
 1630              	Ymodem_SendPacket:
 1631              	.LFB43:
 438:../scr/ymodem.c **** 
 439:../scr/ymodem.c **** /**
 440:../scr/ymodem.c ****   * @brief  Transmit a data packet using the ymodem protocol
 441:../scr/ymodem.c ****   * @param  data
 442:../scr/ymodem.c ****   * @param  length
 443:../scr/ymodem.c ****    * @retval None
 444:../scr/ymodem.c ****   */
 445:../scr/ymodem.c **** void Ymodem_SendPacket(uint8_t *data, uint16_t length)
 446:../scr/ymodem.c **** {
 1632              		.loc 1 446 0
 1633              		.cfi_startproc
 1634 08f0 80B5     		push	{r7, lr}
 1635              	.LCFI30:
 1636              		.cfi_def_cfa_offset 8
 1637              		.cfi_offset 7, -8
 1638              		.cfi_offset 14, -4
 1639 08f2 84B0     		sub	sp, sp, #16
 1640              	.LCFI31:
 1641              		.cfi_def_cfa_offset 24
 1642 08f4 00AF     		add	r7, sp, #0
 1643              	.LCFI32:
 1644              		.cfi_def_cfa_register 7
 1645 08f6 7860     		str	r0, [r7, #4]
 1646 08f8 0A1C     		mov	r2, r1
 1647 08fa BB1C     		add	r3, r7, #2
 1648 08fc 1A80     		strh	r2, [r3]
 447:../scr/ymodem.c ****   uint16_t i;
 448:../scr/ymodem.c ****   i = 0;
 1649              		.loc 1 448 0
 1650 08fe 0E23     		mov	r3, #14
 1651 0900 FB18     		add	r3, r7, r3
 1652 0902 0022     		mov	r2, #0
 1653 0904 1A80     		strh	r2, [r3]
 449:../scr/ymodem.c ****   while (i < length)
 1654              		.loc 1 449 0
 1655 0906 0FE0     		b	.L107
 1656              	.L108:
 450:../scr/ymodem.c ****   {
 451:../scr/ymodem.c ****     Send_Byte(data[i]);
 1657              		.loc 1 451 0
 1658 0908 0E23     		mov	r3, #14
 1659 090a FB18     		add	r3, r7, r3
 1660 090c 1B88     		ldrh	r3, [r3]
 1661 090e 7A68     		ldr	r2, [r7, #4]
 1662 0910 D318     		add	r3, r2, r3
 1663 0912 1B78     		ldrb	r3, [r3]
 1664 0914 181C     		mov	r0, r3
 1665 0916 FFF78DFB 		bl	Send_Byte
 452:../scr/ymodem.c ****     i++;
 1666              		.loc 1 452 0
 1667 091a 0E23     		mov	r3, #14
 1668 091c FB18     		add	r3, r7, r3
 1669 091e 1A88     		ldrh	r2, [r3]
 1670 0920 0E23     		mov	r3, #14
 1671 0922 FB18     		add	r3, r7, r3
 1672 0924 0132     		add	r2, r2, #1
 1673 0926 1A80     		strh	r2, [r3]
 1674              	.L107:
 449:../scr/ymodem.c ****   while (i < length)
 1675              		.loc 1 449 0
 1676 0928 0E23     		mov	r3, #14
 1677 092a FA18     		add	r2, r7, r3
 1678 092c BB1C     		add	r3, r7, #2
 1679 092e 1288     		ldrh	r2, [r2]
 1680 0930 1B88     		ldrh	r3, [r3]
 1681 0932 9A42     		cmp	r2, r3
 1682 0934 E8D3     		bcc	.L108
 453:../scr/ymodem.c ****   }
 454:../scr/ymodem.c **** }
 1683              		.loc 1 454 0
 1684 0936 BD46     		mov	sp, r7
 1685 0938 04B0     		add	sp, sp, #16
 1686              		@ sp needed
 1687 093a 80BD     		pop	{r7, pc}
 1688              		.cfi_endproc
 1689              	.LFE43:
 1691              		.align	2
 1692              		.global	Ymodem_Transmit
 1693              		.code	16
 1694              		.thumb_func
 1696              	Ymodem_Transmit:
 1697              	.LFB44:
 455:../scr/ymodem.c **** 
 456:../scr/ymodem.c **** /**
 457:../scr/ymodem.c ****   * @brief  Transmit a file using the ymodem protocol
 458:../scr/ymodem.c ****   * @param  buf: Address of the first byte
 459:../scr/ymodem.c ****   * @retval The size of the file
 460:../scr/ymodem.c ****   */
 461:../scr/ymodem.c **** uint8_t Ymodem_Transmit (uint8_t *buf, const uint8_t* sendFileName, uint32_t sizeFile)
 462:../scr/ymodem.c **** {
 1698              		.loc 1 462 0
 1699              		.cfi_startproc
 1700 093c 90B5     		push	{r4, r7, lr}
 1701              	.LCFI33:
 1702              		.cfi_def_cfa_offset 12
 1703              		.cfi_offset 4, -12
 1704              		.cfi_offset 7, -8
 1705              		.cfi_offset 14, -4
 1706 093e D84C     		ldr	r4, .L152
 1707 0940 A544     		add	sp, sp, r4
 1708              	.LCFI34:
 1709              		.cfi_def_cfa_offset 1352
 1710 0942 00AF     		add	r7, sp, #0
 1711              	.LCFI35:
 1712              		.cfi_def_cfa_register 7
 1713 0944 F860     		str	r0, [r7, #12]
 1714 0946 B960     		str	r1, [r7, #8]
 1715 0948 7A60     		str	r2, [r7, #4]
 463:../scr/ymodem.c ****   
 464:../scr/ymodem.c ****   uint8_t packet_data[PACKET_1K_SIZE + PACKET_OVERHEAD];
 465:../scr/ymodem.c ****   uint8_t FileName[FILE_NAME_LENGTH];
 466:../scr/ymodem.c ****   uint8_t *buf_ptr, tempCheckSum ;
 467:../scr/ymodem.c ****   uint16_t tempCRC, blkNumber;
 468:../scr/ymodem.c ****   uint8_t receivedC[2], CRC16_F = 0, i;
 1716              		.loc 1 468 0
 1717 094a D64B     		ldr	r3, .L152+4
 1718 094c FB18     		add	r3, r7, r3
 1719 094e 0022     		mov	r2, #0
 1720 0950 1A70     		strb	r2, [r3]
 469:../scr/ymodem.c ****   uint32_t errors, ackReceived, size = 0, pktSize;
 1721              		.loc 1 469 0
 1722 0952 0023     		mov	r3, #0
 1723 0954 D44A     		ldr	r2, .L152+8
 1724 0956 BA18     		add	r2, r7, r2
 1725 0958 1360     		str	r3, [r2]
 470:../scr/ymodem.c **** 
 471:../scr/ymodem.c ****   errors = 0;
 1726              		.loc 1 471 0
 1727 095a 0023     		mov	r3, #0
 1728 095c D34A     		ldr	r2, .L152+12
 1729 095e BA18     		add	r2, r7, r2
 1730 0960 1360     		str	r3, [r2]
 472:../scr/ymodem.c ****   ackReceived = 0;
 1731              		.loc 1 472 0
 1732 0962 0023     		mov	r3, #0
 1733 0964 A522     		mov	r2, #165
 1734 0966 D200     		lsl	r2, r2, #3
 1735 0968 BA18     		add	r2, r7, r2
 1736 096a 1360     		str	r3, [r2]
 473:../scr/ymodem.c ****   for (i = 0; i < (FILE_NAME_LENGTH - 1); i++)
 1737              		.loc 1 473 0
 1738 096c D04B     		ldr	r3, .L152+16
 1739 096e FB18     		add	r3, r7, r3
 1740 0970 0022     		mov	r2, #0
 1741 0972 1A70     		strb	r2, [r3]
 1742 0974 16E0     		b	.L110
 1743              	.L111:
 474:../scr/ymodem.c ****   {
 475:../scr/ymodem.c ****     FileName[i] = sendFileName[i];
 1744              		.loc 1 475 0 discriminator 3
 1745 0976 CE4B     		ldr	r3, .L152+16
 1746 0978 FB18     		add	r3, r7, r3
 1747 097a 1B78     		ldrb	r3, [r3]
 1748 097c CC4A     		ldr	r2, .L152+16
 1749 097e BA18     		add	r2, r7, r2
 1750 0980 1278     		ldrb	r2, [r2]
 1751 0982 B968     		ldr	r1, [r7, #8]
 1752 0984 8A18     		add	r2, r1, r2
 1753 0986 1178     		ldrb	r1, [r2]
 1754 0988 CA4A     		ldr	r2, .L152+20
 1755 098a A720     		mov	r0, #167
 1756 098c C000     		lsl	r0, r0, #3
 1757 098e 8446     		mov	ip, r0
 1758 0990 BC44     		add	ip, ip, r7
 1759 0992 6244     		add	r2, r2, ip
 1760 0994 D154     		strb	r1, [r2, r3]
 473:../scr/ymodem.c ****   for (i = 0; i < (FILE_NAME_LENGTH - 1); i++)
 1761              		.loc 1 473 0 discriminator 3
 1762 0996 C64B     		ldr	r3, .L152+16
 1763 0998 FB18     		add	r3, r7, r3
 1764 099a 1A78     		ldrb	r2, [r3]
 1765 099c C44B     		ldr	r3, .L152+16
 1766 099e FB18     		add	r3, r7, r3
 1767 09a0 0132     		add	r2, r2, #1
 1768 09a2 1A70     		strb	r2, [r3]
 1769              	.L110:
 473:../scr/ymodem.c ****   for (i = 0; i < (FILE_NAME_LENGTH - 1); i++)
 1770              		.loc 1 473 0 is_stmt 0 discriminator 1
 1771 09a4 C24B     		ldr	r3, .L152+16
 1772 09a6 FB18     		add	r3, r7, r3
 1773 09a8 1B78     		ldrb	r3, [r3]
 1774 09aa FF2B     		cmp	r3, #255
 1775 09ac E3D1     		bne	.L111
 476:../scr/ymodem.c ****   }
 477:../scr/ymodem.c ****   CRC16_F = 1;       
 1776              		.loc 1 477 0 is_stmt 1
 1777 09ae BD4B     		ldr	r3, .L152+4
 1778 09b0 FB18     		add	r3, r7, r3
 1779 09b2 0122     		mov	r2, #1
 1780 09b4 1A70     		strb	r2, [r3]
 478:../scr/ymodem.c ****     
 479:../scr/ymodem.c ****   /* Prepare first block */
 480:../scr/ymodem.c ****   Ymodem_PrepareIntialPacket(&packet_data[0], FileName, &sizeFile);
 1781              		.loc 1 480 0
 1782 09b6 8A23     		mov	r3, #138
 1783 09b8 5B00     		lsl	r3, r3, #1
 1784 09ba F918     		add	r1, r7, r3
 1785 09bc 1423     		mov	r3, #20
 1786 09be FA18     		add	r2, r7, r3
 1787 09c0 3B1D     		add	r3, r7, #4
 1788 09c2 081C     		mov	r0, r1
 1789 09c4 111C     		mov	r1, r2
 1790 09c6 1A1C     		mov	r2, r3
 1791 09c8 FFF7FEFF 		bl	Ymodem_PrepareIntialPacket
 1792              	.L118:
 481:../scr/ymodem.c ****   
 482:../scr/ymodem.c ****   do 
 483:../scr/ymodem.c ****   {
 484:../scr/ymodem.c ****     /* Send Packet */
 485:../scr/ymodem.c ****     Ymodem_SendPacket(packet_data, PACKET_SIZE + PACKET_HEADER);
 1793              		.loc 1 485 0
 1794 09cc 8A23     		mov	r3, #138
 1795 09ce 5B00     		lsl	r3, r3, #1
 1796 09d0 FB18     		add	r3, r7, r3
 1797 09d2 181C     		mov	r0, r3
 1798 09d4 8321     		mov	r1, #131
 1799 09d6 FFF7FEFF 		bl	Ymodem_SendPacket
 486:../scr/ymodem.c ****     /* Send CRC or Check Sum based on CRC16_F */
 487:../scr/ymodem.c ****     if (CRC16_F)
 1800              		.loc 1 487 0
 1801 09da B24B     		ldr	r3, .L152+4
 1802 09dc FB18     		add	r3, r7, r3
 1803 09de 1B78     		ldrb	r3, [r3]
 1804 09e0 002B     		cmp	r3, #0
 1805 09e2 1CD0     		beq	.L112
 488:../scr/ymodem.c ****     {
 489:../scr/ymodem.c ****        tempCRC = Cal_CRC16(&packet_data[3], PACKET_SIZE);
 1806              		.loc 1 489 0
 1807 09e4 B44B     		ldr	r3, .L152+24
 1808 09e6 FC18     		add	r4, r7, r3
 1809 09e8 8A23     		mov	r3, #138
 1810 09ea 5B00     		lsl	r3, r3, #1
 1811 09ec FB18     		add	r3, r7, r3
 1812 09ee 0333     		add	r3, r3, #3
 1813 09f0 181C     		mov	r0, r3
 1814 09f2 8021     		mov	r1, #128
 1815 09f4 FFF7FEFF 		bl	Cal_CRC16
 1816 09f8 031C     		mov	r3, r0
 1817 09fa 2380     		strh	r3, [r4]
 490:../scr/ymodem.c ****        Send_Byte(tempCRC >> 8);
 1818              		.loc 1 490 0
 1819 09fc AE4B     		ldr	r3, .L152+24
 1820 09fe FB18     		add	r3, r7, r3
 1821 0a00 1B88     		ldrh	r3, [r3]
 1822 0a02 1B0A     		lsr	r3, r3, #8
 1823 0a04 9BB2     		uxth	r3, r3
 1824 0a06 DBB2     		uxtb	r3, r3
 1825 0a08 181C     		mov	r0, r3
 1826 0a0a FFF713FB 		bl	Send_Byte
 491:../scr/ymodem.c ****        Send_Byte(tempCRC & 0xFF);
 1827              		.loc 1 491 0
 1828 0a0e AA4B     		ldr	r3, .L152+24
 1829 0a10 FB18     		add	r3, r7, r3
 1830 0a12 1B88     		ldrh	r3, [r3]
 1831 0a14 DBB2     		uxtb	r3, r3
 1832 0a16 181C     		mov	r0, r3
 1833 0a18 FFF70CFB 		bl	Send_Byte
 1834 0a1c 11E0     		b	.L113
 1835              	.L112:
 492:../scr/ymodem.c ****     }
 493:../scr/ymodem.c ****     else
 494:../scr/ymodem.c ****     {
 495:../scr/ymodem.c ****        tempCheckSum = CalChecksum (&packet_data[3], PACKET_SIZE);
 1836              		.loc 1 495 0
 1837 0a1e A74B     		ldr	r3, .L152+28
 1838 0a20 FC18     		add	r4, r7, r3
 1839 0a22 8A23     		mov	r3, #138
 1840 0a24 5B00     		lsl	r3, r3, #1
 1841 0a26 FB18     		add	r3, r7, r3
 1842 0a28 0333     		add	r3, r3, #3
 1843 0a2a 181C     		mov	r0, r3
 1844 0a2c 8021     		mov	r1, #128
 1845 0a2e FFF7FEFF 		bl	CalChecksum
 1846 0a32 031C     		mov	r3, r0
 1847 0a34 2370     		strb	r3, [r4]
 496:../scr/ymodem.c ****        Send_Byte(tempCheckSum);
 1848              		.loc 1 496 0
 1849 0a36 A14B     		ldr	r3, .L152+28
 1850 0a38 FB18     		add	r3, r7, r3
 1851 0a3a 1B78     		ldrb	r3, [r3]
 1852 0a3c 181C     		mov	r0, r3
 1853 0a3e FFF7F9FA 		bl	Send_Byte
 1854              	.L113:
 497:../scr/ymodem.c ****     }
 498:../scr/ymodem.c ****   
 499:../scr/ymodem.c ****     /* Wait for Ack and 'C' */
 500:../scr/ymodem.c ****     if (Receive_Byte(&receivedC[0], 10000) == 0)  
 1855              		.loc 1 500 0
 1856 0a42 1023     		mov	r3, #16
 1857 0a44 FB18     		add	r3, r7, r3
 1858 0a46 9E4A     		ldr	r2, .L152+32
 1859 0a48 181C     		mov	r0, r3
 1860 0a4a 111C     		mov	r1, r2
 1861 0a4c FFF7D8FA 		bl	Receive_Byte
 1862 0a50 031E     		sub	r3, r0, #0
 1863 0a52 0ED1     		bne	.L114
 501:../scr/ymodem.c ****     {
 502:../scr/ymodem.c ****       if (receivedC[0] == ACK)
 1864              		.loc 1 502 0
 1865 0a54 9B4B     		ldr	r3, .L152+36
 1866 0a56 A722     		mov	r2, #167
 1867 0a58 D200     		lsl	r2, r2, #3
 1868 0a5a 9446     		mov	ip, r2
 1869 0a5c BC44     		add	ip, ip, r7
 1870 0a5e 6344     		add	r3, r3, ip
 1871 0a60 1B78     		ldrb	r3, [r3]
 1872 0a62 062B     		cmp	r3, #6
 1873 0a64 0CD1     		bne	.L116
 503:../scr/ymodem.c ****       { 
 504:../scr/ymodem.c ****         /* Packet transfered correctly */
 505:../scr/ymodem.c ****         ackReceived = 1;
 1874              		.loc 1 505 0
 1875 0a66 0123     		mov	r3, #1
 1876 0a68 A522     		mov	r2, #165
 1877 0a6a D200     		lsl	r2, r2, #3
 1878 0a6c BA18     		add	r2, r7, r2
 1879 0a6e 1360     		str	r3, [r2]
 1880 0a70 06E0     		b	.L116
 1881              	.L114:
 506:../scr/ymodem.c ****       }
 507:../scr/ymodem.c ****     }
 508:../scr/ymodem.c ****     else
 509:../scr/ymodem.c ****     {
 510:../scr/ymodem.c ****         errors++;
 1882              		.loc 1 510 0
 1883 0a72 8E4B     		ldr	r3, .L152+12
 1884 0a74 FB18     		add	r3, r7, r3
 1885 0a76 1B68     		ldr	r3, [r3]
 1886 0a78 0133     		add	r3, r3, #1
 1887 0a7a 8C4A     		ldr	r2, .L152+12
 1888 0a7c BA18     		add	r2, r7, r2
 1889 0a7e 1360     		str	r3, [r2]
 1890              	.L116:
 511:../scr/ymodem.c ****     }
 512:../scr/ymodem.c ****   }while (!ackReceived && (errors < 0x0A));
 1891              		.loc 1 512 0
 1892 0a80 A523     		mov	r3, #165
 1893 0a82 DB00     		lsl	r3, r3, #3
 1894 0a84 FB18     		add	r3, r7, r3
 1895 0a86 1B68     		ldr	r3, [r3]
 1896 0a88 002B     		cmp	r3, #0
 1897 0a8a 04D1     		bne	.L117
 1898              		.loc 1 512 0 is_stmt 0 discriminator 1
 1899 0a8c 874B     		ldr	r3, .L152+12
 1900 0a8e FB18     		add	r3, r7, r3
 1901 0a90 1B68     		ldr	r3, [r3]
 1902 0a92 092B     		cmp	r3, #9
 1903 0a94 9AD9     		bls	.L118
 1904              	.L117:
 513:../scr/ymodem.c ****   
 514:../scr/ymodem.c ****   if (errors >=  0x0A)
 1905              		.loc 1 514 0 is_stmt 1
 1906 0a96 854B     		ldr	r3, .L152+12
 1907 0a98 FB18     		add	r3, r7, r3
 1908 0a9a 1B68     		ldr	r3, [r3]
 1909 0a9c 092B     		cmp	r3, #9
 1910 0a9e 04D9     		bls	.L119
 515:../scr/ymodem.c ****   {
 516:../scr/ymodem.c ****     return errors;
 1911              		.loc 1 516 0
 1912 0aa0 824B     		ldr	r3, .L152+12
 1913 0aa2 FB18     		add	r3, r7, r3
 1914 0aa4 1B68     		ldr	r3, [r3]
 1915 0aa6 DBB2     		uxtb	r3, r3
 1916 0aa8 38E2     		b	.L151
 1917              	.L119:
 517:../scr/ymodem.c ****   }
 518:../scr/ymodem.c ****   buf_ptr = buf;
 1918              		.loc 1 518 0
 1919 0aaa FB68     		ldr	r3, [r7, #12]
 1920 0aac 864A     		ldr	r2, .L152+40
 1921 0aae BA18     		add	r2, r7, r2
 1922 0ab0 1360     		str	r3, [r2]
 519:../scr/ymodem.c ****   size = sizeFile;
 1923              		.loc 1 519 0
 1924 0ab2 7B68     		ldr	r3, [r7, #4]
 1925 0ab4 7C4A     		ldr	r2, .L152+8
 1926 0ab6 BA18     		add	r2, r7, r2
 1927 0ab8 1360     		str	r3, [r2]
 520:../scr/ymodem.c ****   blkNumber = 0x01;
 1928              		.loc 1 520 0
 1929 0aba 844B     		ldr	r3, .L152+44
 1930 0abc FB18     		add	r3, r7, r3
 1931 0abe 0122     		mov	r2, #1
 1932 0ac0 1A80     		strh	r2, [r3]
 521:../scr/ymodem.c ****   /* Here 1024 bytes package is used to send the packets */
 522:../scr/ymodem.c ****   
 523:../scr/ymodem.c ****   
 524:../scr/ymodem.c ****   /* Resend packet if NAK  for a count of 10 else end of commuincation */
 525:../scr/ymodem.c ****   while (size)
 1933              		.loc 1 525 0
 1934 0ac2 09E1     		b	.L121
 1935              	.L133:
 526:../scr/ymodem.c ****   {
 527:../scr/ymodem.c ****     /* Prepare next packet */
 528:../scr/ymodem.c ****     Ymodem_PreparePacket(buf_ptr, &packet_data[0], blkNumber, size);
 1936              		.loc 1 528 0
 1937 0ac4 814B     		ldr	r3, .L152+44
 1938 0ac6 FB18     		add	r3, r7, r3
 1939 0ac8 1B88     		ldrh	r3, [r3]
 1940 0aca DAB2     		uxtb	r2, r3
 1941 0acc 7E4B     		ldr	r3, .L152+40
 1942 0ace FB18     		add	r3, r7, r3
 1943 0ad0 1868     		ldr	r0, [r3]
 1944 0ad2 8A23     		mov	r3, #138
 1945 0ad4 5B00     		lsl	r3, r3, #1
 1946 0ad6 F918     		add	r1, r7, r3
 1947 0ad8 734B     		ldr	r3, .L152+8
 1948 0ada FB18     		add	r3, r7, r3
 1949 0adc 1B68     		ldr	r3, [r3]
 1950 0ade FFF7FEFF 		bl	Ymodem_PreparePacket
 529:../scr/ymodem.c ****     ackReceived = 0;
 1951              		.loc 1 529 0
 1952 0ae2 0023     		mov	r3, #0
 1953 0ae4 A522     		mov	r2, #165
 1954 0ae6 D200     		lsl	r2, r2, #3
 1955 0ae8 BA18     		add	r2, r7, r2
 1956 0aea 1360     		str	r3, [r2]
 530:../scr/ymodem.c ****     receivedC[0]= 0;
 1957              		.loc 1 530 0
 1958 0aec 754B     		ldr	r3, .L152+36
 1959 0aee A722     		mov	r2, #167
 1960 0af0 D200     		lsl	r2, r2, #3
 1961 0af2 9446     		mov	ip, r2
 1962 0af4 BC44     		add	ip, ip, r7
 1963 0af6 6344     		add	r3, r3, ip
 1964 0af8 0022     		mov	r2, #0
 1965 0afa 1A70     		strb	r2, [r3]
 531:../scr/ymodem.c ****     errors = 0;
 1966              		.loc 1 531 0
 1967 0afc 0023     		mov	r3, #0
 1968 0afe 6B4A     		ldr	r2, .L152+12
 1969 0b00 BA18     		add	r2, r7, r2
 1970 0b02 1360     		str	r3, [r2]
 1971              	.L132:
 532:../scr/ymodem.c ****     do
 533:../scr/ymodem.c ****     {
 534:../scr/ymodem.c ****       /* Send next packet */
 535:../scr/ymodem.c ****       if (size >= PACKET_1K_SIZE)
 1972              		.loc 1 535 0
 1973 0b04 684B     		ldr	r3, .L152+8
 1974 0b06 FB18     		add	r3, r7, r3
 1975 0b08 1B68     		ldr	r3, [r3]
 1976 0b0a 714A     		ldr	r2, .L152+48
 1977 0b0c 9342     		cmp	r3, r2
 1978 0b0e 06D9     		bls	.L122
 536:../scr/ymodem.c ****       {
 537:../scr/ymodem.c ****         pktSize = PACKET_1K_SIZE;
 1979              		.loc 1 537 0
 1980 0b10 8023     		mov	r3, #128
 1981 0b12 DB00     		lsl	r3, r3, #3
 1982 0b14 A422     		mov	r2, #164
 1983 0b16 D200     		lsl	r2, r2, #3
 1984 0b18 BA18     		add	r2, r7, r2
 1985 0b1a 1360     		str	r3, [r2]
 1986 0b1c 04E0     		b	.L123
 1987              	.L122:
 538:../scr/ymodem.c ****        
 539:../scr/ymodem.c ****       }
 540:../scr/ymodem.c ****       else
 541:../scr/ymodem.c ****       {
 542:../scr/ymodem.c ****         pktSize = PACKET_SIZE;
 1988              		.loc 1 542 0
 1989 0b1e 8023     		mov	r3, #128
 1990 0b20 A422     		mov	r2, #164
 1991 0b22 D200     		lsl	r2, r2, #3
 1992 0b24 BA18     		add	r2, r7, r2
 1993 0b26 1360     		str	r3, [r2]
 1994              	.L123:
 543:../scr/ymodem.c ****       }
 544:../scr/ymodem.c ****       Ymodem_SendPacket(packet_data, pktSize + PACKET_HEADER);
 1995              		.loc 1 544 0
 1996 0b28 A423     		mov	r3, #164
 1997 0b2a DB00     		lsl	r3, r3, #3
 1998 0b2c FB18     		add	r3, r7, r3
 1999 0b2e 1B68     		ldr	r3, [r3]
 2000 0b30 9BB2     		uxth	r3, r3
 2001 0b32 0333     		add	r3, r3, #3
 2002 0b34 9BB2     		uxth	r3, r3
 2003 0b36 8A22     		mov	r2, #138
 2004 0b38 5200     		lsl	r2, r2, #1
 2005 0b3a BA18     		add	r2, r7, r2
 2006 0b3c 101C     		mov	r0, r2
 2007 0b3e 191C     		mov	r1, r3
 2008 0b40 FFF7FEFF 		bl	Ymodem_SendPacket
 545:../scr/ymodem.c ****       /* Send CRC or Check Sum based on CRC16_F */
 546:../scr/ymodem.c ****       /* Send CRC or Check Sum based on CRC16_F */
 547:../scr/ymodem.c ****       if (CRC16_F)
 2009              		.loc 1 547 0
 2010 0b44 574B     		ldr	r3, .L152+4
 2011 0b46 FB18     		add	r3, r7, r3
 2012 0b48 1B78     		ldrb	r3, [r3]
 2013 0b4a 002B     		cmp	r3, #0
 2014 0b4c 20D0     		beq	.L124
 548:../scr/ymodem.c ****       {
 549:../scr/ymodem.c ****          tempCRC = Cal_CRC16(&packet_data[3], pktSize);
 2015              		.loc 1 549 0
 2016 0b4e 5A4B     		ldr	r3, .L152+24
 2017 0b50 FC18     		add	r4, r7, r3
 2018 0b52 8A23     		mov	r3, #138
 2019 0b54 5B00     		lsl	r3, r3, #1
 2020 0b56 FB18     		add	r3, r7, r3
 2021 0b58 DA1C     		add	r2, r3, #3
 2022 0b5a A423     		mov	r3, #164
 2023 0b5c DB00     		lsl	r3, r3, #3
 2024 0b5e FB18     		add	r3, r7, r3
 2025 0b60 1B68     		ldr	r3, [r3]
 2026 0b62 101C     		mov	r0, r2
 2027 0b64 191C     		mov	r1, r3
 2028 0b66 FFF7FEFF 		bl	Cal_CRC16
 2029 0b6a 031C     		mov	r3, r0
 2030 0b6c 2380     		strh	r3, [r4]
 550:../scr/ymodem.c ****          Send_Byte(tempCRC >> 8);
 2031              		.loc 1 550 0
 2032 0b6e 524B     		ldr	r3, .L152+24
 2033 0b70 FB18     		add	r3, r7, r3
 2034 0b72 1B88     		ldrh	r3, [r3]
 2035 0b74 1B0A     		lsr	r3, r3, #8
 2036 0b76 9BB2     		uxth	r3, r3
 2037 0b78 DBB2     		uxtb	r3, r3
 2038 0b7a 181C     		mov	r0, r3
 2039 0b7c FFF75AFA 		bl	Send_Byte
 551:../scr/ymodem.c ****          Send_Byte(tempCRC & 0xFF);
 2040              		.loc 1 551 0
 2041 0b80 4D4B     		ldr	r3, .L152+24
 2042 0b82 FB18     		add	r3, r7, r3
 2043 0b84 1B88     		ldrh	r3, [r3]
 2044 0b86 DBB2     		uxtb	r3, r3
 2045 0b88 181C     		mov	r0, r3
 2046 0b8a FFF753FA 		bl	Send_Byte
 2047 0b8e 15E0     		b	.L125
 2048              	.L124:
 552:../scr/ymodem.c ****       }
 553:../scr/ymodem.c ****       else
 554:../scr/ymodem.c ****       {
 555:../scr/ymodem.c ****         tempCheckSum = CalChecksum (&packet_data[3], pktSize);
 2049              		.loc 1 555 0
 2050 0b90 4A4B     		ldr	r3, .L152+28
 2051 0b92 FC18     		add	r4, r7, r3
 2052 0b94 8A23     		mov	r3, #138
 2053 0b96 5B00     		lsl	r3, r3, #1
 2054 0b98 FB18     		add	r3, r7, r3
 2055 0b9a DA1C     		add	r2, r3, #3
 2056 0b9c A423     		mov	r3, #164
 2057 0b9e DB00     		lsl	r3, r3, #3
 2058 0ba0 FB18     		add	r3, r7, r3
 2059 0ba2 1B68     		ldr	r3, [r3]
 2060 0ba4 101C     		mov	r0, r2
 2061 0ba6 191C     		mov	r1, r3
 2062 0ba8 FFF7FEFF 		bl	CalChecksum
 2063 0bac 031C     		mov	r3, r0
 2064 0bae 2370     		strb	r3, [r4]
 556:../scr/ymodem.c ****         Send_Byte(tempCheckSum);
 2065              		.loc 1 556 0
 2066 0bb0 424B     		ldr	r3, .L152+28
 2067 0bb2 FB18     		add	r3, r7, r3
 2068 0bb4 1B78     		ldrb	r3, [r3]
 2069 0bb6 181C     		mov	r0, r3
 2070 0bb8 FFF73CFA 		bl	Send_Byte
 2071              	.L125:
 557:../scr/ymodem.c ****       }
 558:../scr/ymodem.c ****       
 559:../scr/ymodem.c ****       /* Wait for Ack */
 560:../scr/ymodem.c ****       if ((Receive_Byte(&receivedC[0], 100000) == 0)  && (receivedC[0] == ACK))
 2072              		.loc 1 560 0
 2073 0bbc 1023     		mov	r3, #16
 2074 0bbe FB18     		add	r3, r7, r3
 2075 0bc0 444A     		ldr	r2, .L152+52
 2076 0bc2 181C     		mov	r0, r3
 2077 0bc4 111C     		mov	r1, r2
 2078 0bc6 FFF71BFA 		bl	Receive_Byte
 2079 0bca 031E     		sub	r3, r0, #0
 2080 0bcc 4BD1     		bne	.L126
 2081              		.loc 1 560 0 is_stmt 0 discriminator 1
 2082 0bce 3D4B     		ldr	r3, .L152+36
 2083 0bd0 A722     		mov	r2, #167
 2084 0bd2 D200     		lsl	r2, r2, #3
 2085 0bd4 9446     		mov	ip, r2
 2086 0bd6 BC44     		add	ip, ip, r7
 2087 0bd8 6344     		add	r3, r3, ip
 2088 0bda 1B78     		ldrb	r3, [r3]
 2089 0bdc 062B     		cmp	r3, #6
 2090 0bde 42D1     		bne	.L126
 561:../scr/ymodem.c ****       {
 562:../scr/ymodem.c ****         ackReceived = 1;  
 2091              		.loc 1 562 0 is_stmt 1
 2092 0be0 0123     		mov	r3, #1
 2093 0be2 A522     		mov	r2, #165
 2094 0be4 D200     		lsl	r2, r2, #3
 2095 0be6 BA18     		add	r2, r7, r2
 2096 0be8 1360     		str	r3, [r2]
 563:../scr/ymodem.c ****         if (size > pktSize)
 2097              		.loc 1 563 0
 2098 0bea 2F4B     		ldr	r3, .L152+8
 2099 0bec FB18     		add	r3, r7, r3
 2100 0bee 1A68     		ldr	r2, [r3]
 2101 0bf0 A423     		mov	r3, #164
 2102 0bf2 DB00     		lsl	r3, r3, #3
 2103 0bf4 FB18     		add	r3, r7, r3
 2104 0bf6 1B68     		ldr	r3, [r3]
 2105 0bf8 9A42     		cmp	r2, r3
 2106 0bfa 24D9     		bls	.L127
 564:../scr/ymodem.c ****         {
 565:../scr/ymodem.c ****            buf_ptr += pktSize;  
 2107              		.loc 1 565 0
 2108 0bfc 324B     		ldr	r3, .L152+40
 2109 0bfe FB18     		add	r3, r7, r3
 2110 0c00 1A68     		ldr	r2, [r3]
 2111 0c02 A423     		mov	r3, #164
 2112 0c04 DB00     		lsl	r3, r3, #3
 2113 0c06 FB18     		add	r3, r7, r3
 2114 0c08 1B68     		ldr	r3, [r3]
 2115 0c0a D318     		add	r3, r2, r3
 2116 0c0c 2E4A     		ldr	r2, .L152+40
 2117 0c0e BA18     		add	r2, r7, r2
 2118 0c10 1360     		str	r3, [r2]
 566:../scr/ymodem.c ****            size -= pktSize;
 2119              		.loc 1 566 0
 2120 0c12 254B     		ldr	r3, .L152+8
 2121 0c14 FB18     		add	r3, r7, r3
 2122 0c16 1A68     		ldr	r2, [r3]
 2123 0c18 A423     		mov	r3, #164
 2124 0c1a DB00     		lsl	r3, r3, #3
 2125 0c1c FB18     		add	r3, r7, r3
 2126 0c1e 1B68     		ldr	r3, [r3]
 2127 0c20 D31A     		sub	r3, r2, r3
 2128 0c22 214A     		ldr	r2, .L152+8
 2129 0c24 BA18     		add	r2, r7, r2
 2130 0c26 1360     		str	r3, [r2]
 567:../scr/ymodem.c ****            if (blkNumber == (FLASH_IMAGE_SIZE/1024))
 2131              		.loc 1 567 0
 2132 0c28 284B     		ldr	r3, .L152+44
 2133 0c2a FB18     		add	r3, r7, r3
 2134 0c2c 1B88     		ldrh	r3, [r3]
 2135 0c2e 192B     		cmp	r3, #25
 2136 0c30 01D1     		bne	.L128
 568:../scr/ymodem.c ****            {
 569:../scr/ymodem.c ****              return 0xFF; /*  error */
 2137              		.loc 1 569 0
 2138 0c32 FF23     		mov	r3, #255
 2139 0c34 72E1     		b	.L151
 2140              	.L128:
 570:../scr/ymodem.c ****            }
 571:../scr/ymodem.c ****            else
 572:../scr/ymodem.c ****            {
 573:../scr/ymodem.c ****               blkNumber++;
 2141              		.loc 1 573 0
 2142 0c36 254B     		ldr	r3, .L152+44
 2143 0c38 FB18     		add	r3, r7, r3
 2144 0c3a 1A88     		ldrh	r2, [r3]
 2145 0c3c 234B     		ldr	r3, .L152+44
 2146 0c3e FB18     		add	r3, r7, r3
 2147 0c40 0132     		add	r2, r2, #1
 2148 0c42 1A80     		strh	r2, [r3]
 563:../scr/ymodem.c ****         {
 2149              		.loc 1 563 0
 2150 0c44 16E0     		b	.L130
 2151              	.L127:
 574:../scr/ymodem.c ****            }
 575:../scr/ymodem.c ****         }
 576:../scr/ymodem.c ****         else
 577:../scr/ymodem.c ****         {
 578:../scr/ymodem.c ****           buf_ptr += pktSize;
 2152              		.loc 1 578 0
 2153 0c46 204B     		ldr	r3, .L152+40
 2154 0c48 FB18     		add	r3, r7, r3
 2155 0c4a 1A68     		ldr	r2, [r3]
 2156 0c4c A423     		mov	r3, #164
 2157 0c4e DB00     		lsl	r3, r3, #3
 2158 0c50 FB18     		add	r3, r7, r3
 2159 0c52 1B68     		ldr	r3, [r3]
 2160 0c54 D318     		add	r3, r2, r3
 2161 0c56 1C4A     		ldr	r2, .L152+40
 2162 0c58 BA18     		add	r2, r7, r2
 2163 0c5a 1360     		str	r3, [r2]
 579:../scr/ymodem.c ****           size = 0;
 2164              		.loc 1 579 0
 2165 0c5c 0023     		mov	r3, #0
 2166 0c5e 124A     		ldr	r2, .L152+8
 2167 0c60 BA18     		add	r2, r7, r2
 2168 0c62 1360     		str	r3, [r2]
 563:../scr/ymodem.c ****         {
 2169              		.loc 1 563 0
 2170 0c64 06E0     		b	.L130
 2171              	.L126:
 580:../scr/ymodem.c ****         }
 581:../scr/ymodem.c ****       }
 582:../scr/ymodem.c ****       else
 583:../scr/ymodem.c ****       {
 584:../scr/ymodem.c ****         errors++;
 2172              		.loc 1 584 0
 2173 0c66 114B     		ldr	r3, .L152+12
 2174 0c68 FB18     		add	r3, r7, r3
 2175 0c6a 1B68     		ldr	r3, [r3]
 2176 0c6c 0133     		add	r3, r3, #1
 2177 0c6e 0F4A     		ldr	r2, .L152+12
 2178 0c70 BA18     		add	r2, r7, r2
 2179 0c72 1360     		str	r3, [r2]
 2180              	.L130:
 585:../scr/ymodem.c ****       }
 586:../scr/ymodem.c ****     }while(!ackReceived && (errors < 0x0A));
 2181              		.loc 1 586 0
 2182 0c74 A523     		mov	r3, #165
 2183 0c76 DB00     		lsl	r3, r3, #3
 2184 0c78 FB18     		add	r3, r7, r3
 2185 0c7a 1B68     		ldr	r3, [r3]
 2186 0c7c 002B     		cmp	r3, #0
 2187 0c7e 05D1     		bne	.L131
 2188              		.loc 1 586 0 is_stmt 0 discriminator 1
 2189 0c80 0A4B     		ldr	r3, .L152+12
 2190 0c82 FB18     		add	r3, r7, r3
 2191 0c84 1B68     		ldr	r3, [r3]
 2192 0c86 092B     		cmp	r3, #9
 2193 0c88 00D8     		bhi	.LCB2030
 2194 0c8a 3BE7     		b	.L132	@long jump
 2195              	.LCB2030:
 2196              	.L131:
 587:../scr/ymodem.c ****     /* Resend packet if NAK  for a count of 10 else end of commuincation */
 588:../scr/ymodem.c ****     
 589:../scr/ymodem.c ****     if (errors >=  0x0A)
 2197              		.loc 1 589 0 is_stmt 1
 2198 0c8c 074B     		ldr	r3, .L152+12
 2199 0c8e FB18     		add	r3, r7, r3
 2200 0c90 1B68     		ldr	r3, [r3]
 2201 0c92 092B     		cmp	r3, #9
 2202 0c94 20D9     		bls	.L121
 590:../scr/ymodem.c ****     {
 591:../scr/ymodem.c ****       return errors;
 2203              		.loc 1 591 0
 2204 0c96 054B     		ldr	r3, .L152+12
 2205 0c98 FB18     		add	r3, r7, r3
 2206 0c9a 1B68     		ldr	r3, [r3]
 2207 0c9c DBB2     		uxtb	r3, r3
 2208 0c9e 3DE1     		b	.L151
 2209              	.L153:
 2210              		.align	2
 2211              	.L152:
 2212 0ca0 C4FAFFFF 		.word	-1340
 2213 0ca4 1F050000 		.word	1311
 2214 0ca8 24050000 		.word	1316
 2215 0cac 2C050000 		.word	1324
 2216 0cb0 31050000 		.word	1329
 2217 0cb4 DCFAFFFF 		.word	-1316
 2218 0cb8 1C050000 		.word	1308
 2219 0cbc 1B050000 		.word	1307
 2220 0cc0 10270000 		.word	10000
 2221 0cc4 D8FAFFFF 		.word	-1320
 2222 0cc8 34050000 		.word	1332
 2223 0ccc 32050000 		.word	1330
 2224 0cd0 FF030000 		.word	1023
 2225 0cd4 A0860100 		.word	100000
 2226              	.L121:
 525:../scr/ymodem.c ****   {
 2227              		.loc 1 525 0
 2228 0cd8 934B     		ldr	r3, .L154
 2229 0cda FB18     		add	r3, r7, r3
 2230 0cdc 1B68     		ldr	r3, [r3]
 2231 0cde 002B     		cmp	r3, #0
 2232 0ce0 00D0     		beq	.LCB2068
 2233 0ce2 EFE6     		b	.L133	@long jump
 2234              	.LCB2068:
 592:../scr/ymodem.c ****     }
 593:../scr/ymodem.c ****     
 594:../scr/ymodem.c ****   }
 595:../scr/ymodem.c ****   ackReceived = 0;
 2235              		.loc 1 595 0
 2236 0ce4 0023     		mov	r3, #0
 2237 0ce6 A522     		mov	r2, #165
 2238 0ce8 D200     		lsl	r2, r2, #3
 2239 0cea BA18     		add	r2, r7, r2
 2240 0cec 1360     		str	r3, [r2]
 596:../scr/ymodem.c ****   receivedC[0] = 0x00;
 2241              		.loc 1 596 0
 2242 0cee 8F4B     		ldr	r3, .L154+4
 2243 0cf0 A722     		mov	r2, #167
 2244 0cf2 D200     		lsl	r2, r2, #3
 2245 0cf4 9446     		mov	ip, r2
 2246 0cf6 BC44     		add	ip, ip, r7
 2247 0cf8 6344     		add	r3, r3, ip
 2248 0cfa 0022     		mov	r2, #0
 2249 0cfc 1A70     		strb	r2, [r3]
 597:../scr/ymodem.c ****   errors = 0;
 2250              		.loc 1 597 0
 2251 0cfe 0023     		mov	r3, #0
 2252 0d00 8B4A     		ldr	r2, .L154+8
 2253 0d02 BA18     		add	r2, r7, r2
 2254 0d04 1360     		str	r3, [r2]
 2255              	.L137:
 598:../scr/ymodem.c ****   do 
 599:../scr/ymodem.c ****   {
 600:../scr/ymodem.c ****     Send_Byte(EOT);
 2256              		.loc 1 600 0
 2257 0d06 0420     		mov	r0, #4
 2258 0d08 FFF794F9 		bl	Send_Byte
 601:../scr/ymodem.c ****     /* Send (EOT); */
 602:../scr/ymodem.c ****     /* Wait for Ack */
 603:../scr/ymodem.c ****       if ((Receive_Byte(&receivedC[0], 10000) == 0)  && receivedC[0] == ACK)
 2259              		.loc 1 603 0
 2260 0d0c 1023     		mov	r3, #16
 2261 0d0e FB18     		add	r3, r7, r3
 2262 0d10 884A     		ldr	r2, .L154+12
 2263 0d12 181C     		mov	r0, r3
 2264 0d14 111C     		mov	r1, r2
 2265 0d16 FFF773F9 		bl	Receive_Byte
 2266 0d1a 031E     		sub	r3, r0, #0
 2267 0d1c 0ED1     		bne	.L134
 2268              		.loc 1 603 0 is_stmt 0 discriminator 1
 2269 0d1e 834B     		ldr	r3, .L154+4
 2270 0d20 A722     		mov	r2, #167
 2271 0d22 D200     		lsl	r2, r2, #3
 2272 0d24 9446     		mov	ip, r2
 2273 0d26 BC44     		add	ip, ip, r7
 2274 0d28 6344     		add	r3, r3, ip
 2275 0d2a 1B78     		ldrb	r3, [r3]
 2276 0d2c 062B     		cmp	r3, #6
 2277 0d2e 05D1     		bne	.L134
 604:../scr/ymodem.c ****       {
 605:../scr/ymodem.c ****         ackReceived = 1;  
 2278              		.loc 1 605 0 is_stmt 1
 2279 0d30 0123     		mov	r3, #1
 2280 0d32 A522     		mov	r2, #165
 2281 0d34 D200     		lsl	r2, r2, #3
 2282 0d36 BA18     		add	r2, r7, r2
 2283 0d38 1360     		str	r3, [r2]
 2284 0d3a 06E0     		b	.L135
 2285              	.L134:
 606:../scr/ymodem.c ****       }
 607:../scr/ymodem.c ****       else
 608:../scr/ymodem.c ****       {
 609:../scr/ymodem.c ****         errors++;
 2286              		.loc 1 609 0
 2287 0d3c 7C4B     		ldr	r3, .L154+8
 2288 0d3e FB18     		add	r3, r7, r3
 2289 0d40 1B68     		ldr	r3, [r3]
 2290 0d42 0133     		add	r3, r3, #1
 2291 0d44 7A4A     		ldr	r2, .L154+8
 2292 0d46 BA18     		add	r2, r7, r2
 2293 0d48 1360     		str	r3, [r2]
 2294              	.L135:
 610:../scr/ymodem.c ****       }
 611:../scr/ymodem.c ****   }while (!ackReceived && (errors < 0x0A));
 2295              		.loc 1 611 0
 2296 0d4a A523     		mov	r3, #165
 2297 0d4c DB00     		lsl	r3, r3, #3
 2298 0d4e FB18     		add	r3, r7, r3
 2299 0d50 1B68     		ldr	r3, [r3]
 2300 0d52 002B     		cmp	r3, #0
 2301 0d54 04D1     		bne	.L136
 2302              		.loc 1 611 0 is_stmt 0 discriminator 1
 2303 0d56 764B     		ldr	r3, .L154+8
 2304 0d58 FB18     		add	r3, r7, r3
 2305 0d5a 1B68     		ldr	r3, [r3]
 2306 0d5c 092B     		cmp	r3, #9
 2307 0d5e D2D9     		bls	.L137
 2308              	.L136:
 612:../scr/ymodem.c ****     
 613:../scr/ymodem.c ****   if (errors >=  0x0A)
 2309              		.loc 1 613 0 is_stmt 1
 2310 0d60 734B     		ldr	r3, .L154+8
 2311 0d62 FB18     		add	r3, r7, r3
 2312 0d64 1B68     		ldr	r3, [r3]
 2313 0d66 092B     		cmp	r3, #9
 2314 0d68 04D9     		bls	.L138
 614:../scr/ymodem.c ****   {
 615:../scr/ymodem.c ****     return errors;
 2315              		.loc 1 615 0
 2316 0d6a 714B     		ldr	r3, .L154+8
 2317 0d6c FB18     		add	r3, r7, r3
 2318 0d6e 1B68     		ldr	r3, [r3]
 2319 0d70 DBB2     		uxtb	r3, r3
 2320 0d72 D3E0     		b	.L151
 2321              	.L138:
 616:../scr/ymodem.c ****   }
 617:../scr/ymodem.c ****   
 618:../scr/ymodem.c ****   /* Last packet preparation */
 619:../scr/ymodem.c ****   ackReceived = 0;
 2322              		.loc 1 619 0
 2323 0d74 0023     		mov	r3, #0
 2324 0d76 A522     		mov	r2, #165
 2325 0d78 D200     		lsl	r2, r2, #3
 2326 0d7a BA18     		add	r2, r7, r2
 2327 0d7c 1360     		str	r3, [r2]
 620:../scr/ymodem.c ****   receivedC[0] = 0x00;
 2328              		.loc 1 620 0
 2329 0d7e 6B4B     		ldr	r3, .L154+4
 2330 0d80 A722     		mov	r2, #167
 2331 0d82 D200     		lsl	r2, r2, #3
 2332 0d84 9446     		mov	ip, r2
 2333 0d86 BC44     		add	ip, ip, r7
 2334 0d88 6344     		add	r3, r3, ip
 2335 0d8a 0022     		mov	r2, #0
 2336 0d8c 1A70     		strb	r2, [r3]
 621:../scr/ymodem.c ****   errors = 0;
 2337              		.loc 1 621 0
 2338 0d8e 0023     		mov	r3, #0
 2339 0d90 674A     		ldr	r2, .L154+8
 2340 0d92 BA18     		add	r2, r7, r2
 2341 0d94 1360     		str	r3, [r2]
 622:../scr/ymodem.c **** 
 623:../scr/ymodem.c ****   packet_data[0] = SOH;
 2342              		.loc 1 623 0
 2343 0d96 684B     		ldr	r3, .L154+16
 2344 0d98 A722     		mov	r2, #167
 2345 0d9a D200     		lsl	r2, r2, #3
 2346 0d9c 9446     		mov	ip, r2
 2347 0d9e BC44     		add	ip, ip, r7
 2348 0da0 6344     		add	r3, r3, ip
 2349 0da2 0122     		mov	r2, #1
 2350 0da4 1A70     		strb	r2, [r3]
 624:../scr/ymodem.c ****   packet_data[1] = 0;
 2351              		.loc 1 624 0
 2352 0da6 644B     		ldr	r3, .L154+16
 2353 0da8 A722     		mov	r2, #167
 2354 0daa D200     		lsl	r2, r2, #3
 2355 0dac 9446     		mov	ip, r2
 2356 0dae BC44     		add	ip, ip, r7
 2357 0db0 6344     		add	r3, r3, ip
 2358 0db2 0022     		mov	r2, #0
 2359 0db4 5A70     		strb	r2, [r3, #1]
 625:../scr/ymodem.c ****   packet_data [2] = 0xFF;
 2360              		.loc 1 625 0
 2361 0db6 604B     		ldr	r3, .L154+16
 2362 0db8 A722     		mov	r2, #167
 2363 0dba D200     		lsl	r2, r2, #3
 2364 0dbc 9446     		mov	ip, r2
 2365 0dbe BC44     		add	ip, ip, r7
 2366 0dc0 6344     		add	r3, r3, ip
 2367 0dc2 FF22     		mov	r2, #255
 2368 0dc4 9A70     		strb	r2, [r3, #2]
 626:../scr/ymodem.c **** 
 627:../scr/ymodem.c ****   for (i = PACKET_HEADER; i < (PACKET_SIZE + PACKET_HEADER); i++)
 2369              		.loc 1 627 0
 2370 0dc6 5D4B     		ldr	r3, .L154+20
 2371 0dc8 FB18     		add	r3, r7, r3
 2372 0dca 0322     		mov	r2, #3
 2373 0dcc 1A70     		strb	r2, [r3]
 2374 0dce 11E0     		b	.L139
 2375              	.L140:
 628:../scr/ymodem.c ****   {
 629:../scr/ymodem.c ****      packet_data [i] = 0x00;
 2376              		.loc 1 629 0 discriminator 3
 2377 0dd0 5A4B     		ldr	r3, .L154+20
 2378 0dd2 FB18     		add	r3, r7, r3
 2379 0dd4 1B78     		ldrb	r3, [r3]
 2380 0dd6 584A     		ldr	r2, .L154+16
 2381 0dd8 A721     		mov	r1, #167
 2382 0dda C900     		lsl	r1, r1, #3
 2383 0ddc 8C46     		mov	ip, r1
 2384 0dde BC44     		add	ip, ip, r7
 2385 0de0 6244     		add	r2, r2, ip
 2386 0de2 0021     		mov	r1, #0
 2387 0de4 D154     		strb	r1, [r2, r3]
 627:../scr/ymodem.c ****   {
 2388              		.loc 1 627 0 discriminator 3
 2389 0de6 554B     		ldr	r3, .L154+20
 2390 0de8 FB18     		add	r3, r7, r3
 2391 0dea 1A78     		ldrb	r2, [r3]
 2392 0dec 534B     		ldr	r3, .L154+20
 2393 0dee FB18     		add	r3, r7, r3
 2394 0df0 0132     		add	r2, r2, #1
 2395 0df2 1A70     		strb	r2, [r3]
 2396              	.L139:
 627:../scr/ymodem.c ****   {
 2397              		.loc 1 627 0 is_stmt 0 discriminator 1
 2398 0df4 514B     		ldr	r3, .L154+20
 2399 0df6 FB18     		add	r3, r7, r3
 2400 0df8 1B78     		ldrb	r3, [r3]
 2401 0dfa 822B     		cmp	r3, #130
 2402 0dfc E8D9     		bls	.L140
 2403              	.L145:
 630:../scr/ymodem.c ****   }
 631:../scr/ymodem.c ****   
 632:../scr/ymodem.c ****   do 
 633:../scr/ymodem.c ****   {
 634:../scr/ymodem.c ****     /* Send Packet */
 635:../scr/ymodem.c ****     Ymodem_SendPacket(packet_data, PACKET_SIZE + PACKET_HEADER);
 2404              		.loc 1 635 0 is_stmt 1
 2405 0dfe 8A23     		mov	r3, #138
 2406 0e00 5B00     		lsl	r3, r3, #1
 2407 0e02 FB18     		add	r3, r7, r3
 2408 0e04 181C     		mov	r0, r3
 2409 0e06 8321     		mov	r1, #131
 2410 0e08 FFF7FEFF 		bl	Ymodem_SendPacket
 636:../scr/ymodem.c ****     /* Send CRC or Check Sum based on CRC16_F */
 637:../scr/ymodem.c ****     tempCRC = Cal_CRC16(&packet_data[3], PACKET_SIZE);
 2411              		.loc 1 637 0
 2412 0e0c 4C4B     		ldr	r3, .L154+24
 2413 0e0e FC18     		add	r4, r7, r3
 2414 0e10 8A23     		mov	r3, #138
 2415 0e12 5B00     		lsl	r3, r3, #1
 2416 0e14 FB18     		add	r3, r7, r3
 2417 0e16 0333     		add	r3, r3, #3
 2418 0e18 181C     		mov	r0, r3
 2419 0e1a 8021     		mov	r1, #128
 2420 0e1c FFF7FEFF 		bl	Cal_CRC16
 2421 0e20 031C     		mov	r3, r0
 2422 0e22 2380     		strh	r3, [r4]
 638:../scr/ymodem.c ****     Send_Byte(tempCRC >> 8);
 2423              		.loc 1 638 0
 2424 0e24 464B     		ldr	r3, .L154+24
 2425 0e26 FB18     		add	r3, r7, r3
 2426 0e28 1B88     		ldrh	r3, [r3]
 2427 0e2a 1B0A     		lsr	r3, r3, #8
 2428 0e2c 9BB2     		uxth	r3, r3
 2429 0e2e DBB2     		uxtb	r3, r3
 2430 0e30 181C     		mov	r0, r3
 2431 0e32 FFF7FFF8 		bl	Send_Byte
 639:../scr/ymodem.c ****     Send_Byte(tempCRC & 0xFF);
 2432              		.loc 1 639 0
 2433 0e36 424B     		ldr	r3, .L154+24
 2434 0e38 FB18     		add	r3, r7, r3
 2435 0e3a 1B88     		ldrh	r3, [r3]
 2436 0e3c DBB2     		uxtb	r3, r3
 2437 0e3e 181C     		mov	r0, r3
 2438 0e40 FFF7F8F8 		bl	Send_Byte
 640:../scr/ymodem.c ****   
 641:../scr/ymodem.c ****     /* Wait for Ack and 'C' */
 642:../scr/ymodem.c ****     if (Receive_Byte(&receivedC[0], 10000) == 0)  
 2439              		.loc 1 642 0
 2440 0e44 1023     		mov	r3, #16
 2441 0e46 FB18     		add	r3, r7, r3
 2442 0e48 3A4A     		ldr	r2, .L154+12
 2443 0e4a 181C     		mov	r0, r3
 2444 0e4c 111C     		mov	r1, r2
 2445 0e4e FFF7D7F8 		bl	Receive_Byte
 2446 0e52 031E     		sub	r3, r0, #0
 2447 0e54 0ED1     		bne	.L141
 643:../scr/ymodem.c ****     {
 644:../scr/ymodem.c ****       if (receivedC[0] == ACK)
 2448              		.loc 1 644 0
 2449 0e56 354B     		ldr	r3, .L154+4
 2450 0e58 A722     		mov	r2, #167
 2451 0e5a D200     		lsl	r2, r2, #3
 2452 0e5c 9446     		mov	ip, r2
 2453 0e5e BC44     		add	ip, ip, r7
 2454 0e60 6344     		add	r3, r3, ip
 2455 0e62 1B78     		ldrb	r3, [r3]
 2456 0e64 062B     		cmp	r3, #6
 2457 0e66 0CD1     		bne	.L143
 645:../scr/ymodem.c ****       { 
 646:../scr/ymodem.c ****         /* Packet transfered correctly */
 647:../scr/ymodem.c ****         ackReceived = 1;
 2458              		.loc 1 647 0
 2459 0e68 0123     		mov	r3, #1
 2460 0e6a A522     		mov	r2, #165
 2461 0e6c D200     		lsl	r2, r2, #3
 2462 0e6e BA18     		add	r2, r7, r2
 2463 0e70 1360     		str	r3, [r2]
 2464 0e72 06E0     		b	.L143
 2465              	.L141:
 648:../scr/ymodem.c ****       }
 649:../scr/ymodem.c ****     }
 650:../scr/ymodem.c ****     else
 651:../scr/ymodem.c ****     {
 652:../scr/ymodem.c ****         errors++;
 2466              		.loc 1 652 0
 2467 0e74 2E4B     		ldr	r3, .L154+8
 2468 0e76 FB18     		add	r3, r7, r3
 2469 0e78 1B68     		ldr	r3, [r3]
 2470 0e7a 0133     		add	r3, r3, #1
 2471 0e7c 2C4A     		ldr	r2, .L154+8
 2472 0e7e BA18     		add	r2, r7, r2
 2473 0e80 1360     		str	r3, [r2]
 2474              	.L143:
 653:../scr/ymodem.c ****     }
 654:../scr/ymodem.c ****  
 655:../scr/ymodem.c ****   }while (!ackReceived && (errors < 0x0A));
 2475              		.loc 1 655 0
 2476 0e82 A523     		mov	r3, #165
 2477 0e84 DB00     		lsl	r3, r3, #3
 2478 0e86 FB18     		add	r3, r7, r3
 2479 0e88 1B68     		ldr	r3, [r3]
 2480 0e8a 002B     		cmp	r3, #0
 2481 0e8c 04D1     		bne	.L144
 2482              		.loc 1 655 0 is_stmt 0 discriminator 1
 2483 0e8e 284B     		ldr	r3, .L154+8
 2484 0e90 FB18     		add	r3, r7, r3
 2485 0e92 1B68     		ldr	r3, [r3]
 2486 0e94 092B     		cmp	r3, #9
 2487 0e96 B2D9     		bls	.L145
 2488              	.L144:
 656:../scr/ymodem.c ****   /* Resend packet if NAK  for a count of 10  else end of commuincation */
 657:../scr/ymodem.c ****   if (errors >=  0x0A)
 2489              		.loc 1 657 0 is_stmt 1
 2490 0e98 254B     		ldr	r3, .L154+8
 2491 0e9a FB18     		add	r3, r7, r3
 2492 0e9c 1B68     		ldr	r3, [r3]
 2493 0e9e 092B     		cmp	r3, #9
 2494 0ea0 04D9     		bls	.L146
 658:../scr/ymodem.c ****   {
 659:../scr/ymodem.c ****     return errors;
 2495              		.loc 1 659 0
 2496 0ea2 234B     		ldr	r3, .L154+8
 2497 0ea4 FB18     		add	r3, r7, r3
 2498 0ea6 1B68     		ldr	r3, [r3]
 2499 0ea8 DBB2     		uxtb	r3, r3
 2500 0eaa 37E0     		b	.L151
 2501              	.L146:
 660:../scr/ymodem.c ****   }  
 661:../scr/ymodem.c ****   
 662:../scr/ymodem.c ****   do 
 663:../scr/ymodem.c ****   {
 664:../scr/ymodem.c ****     Send_Byte(EOT);
 2502              		.loc 1 664 0
 2503 0eac 0420     		mov	r0, #4
 2504 0eae FFF7C1F8 		bl	Send_Byte
 665:../scr/ymodem.c ****     /* Send (EOT); */
 666:../scr/ymodem.c ****     /* Wait for Ack */
 667:../scr/ymodem.c ****       if ((Receive_Byte(&receivedC[0], 10000) == 0)  && receivedC[0] == ACK)
 2505              		.loc 1 667 0
 2506 0eb2 1023     		mov	r3, #16
 2507 0eb4 FB18     		add	r3, r7, r3
 2508 0eb6 1F4A     		ldr	r2, .L154+12
 2509 0eb8 181C     		mov	r0, r3
 2510 0eba 111C     		mov	r1, r2
 2511 0ebc FFF7A0F8 		bl	Receive_Byte
 2512 0ec0 031E     		sub	r3, r0, #0
 2513 0ec2 0ED1     		bne	.L147
 2514              		.loc 1 667 0 is_stmt 0 discriminator 1
 2515 0ec4 194B     		ldr	r3, .L154+4
 2516 0ec6 A722     		mov	r2, #167
 2517 0ec8 D200     		lsl	r2, r2, #3
 2518 0eca 9446     		mov	ip, r2
 2519 0ecc BC44     		add	ip, ip, r7
 2520 0ece 6344     		add	r3, r3, ip
 2521 0ed0 1B78     		ldrb	r3, [r3]
 2522 0ed2 062B     		cmp	r3, #6
 2523 0ed4 05D1     		bne	.L147
 668:../scr/ymodem.c ****       {
 669:../scr/ymodem.c ****         ackReceived = 1;  
 2524              		.loc 1 669 0 is_stmt 1
 2525 0ed6 0123     		mov	r3, #1
 2526 0ed8 A522     		mov	r2, #165
 2527 0eda D200     		lsl	r2, r2, #3
 2528 0edc BA18     		add	r2, r7, r2
 2529 0ede 1360     		str	r3, [r2]
 2530 0ee0 06E0     		b	.L148
 2531              	.L147:
 670:../scr/ymodem.c ****       }
 671:../scr/ymodem.c ****       else
 672:../scr/ymodem.c ****       {
 673:../scr/ymodem.c ****         errors++;
 2532              		.loc 1 673 0
 2533 0ee2 134B     		ldr	r3, .L154+8
 2534 0ee4 FB18     		add	r3, r7, r3
 2535 0ee6 1B68     		ldr	r3, [r3]
 2536 0ee8 0133     		add	r3, r3, #1
 2537 0eea 114A     		ldr	r2, .L154+8
 2538 0eec BA18     		add	r2, r7, r2
 2539 0eee 1360     		str	r3, [r2]
 2540              	.L148:
 674:../scr/ymodem.c ****       }
 675:../scr/ymodem.c ****   }while (!ackReceived && (errors < 0x0A));
 2541              		.loc 1 675 0
 2542 0ef0 A523     		mov	r3, #165
 2543 0ef2 DB00     		lsl	r3, r3, #3
 2544 0ef4 FB18     		add	r3, r7, r3
 2545 0ef6 1B68     		ldr	r3, [r3]
 2546 0ef8 002B     		cmp	r3, #0
 2547 0efa 04D1     		bne	.L149
 2548              		.loc 1 675 0 is_stmt 0 discriminator 1
 2549 0efc 0C4B     		ldr	r3, .L154+8
 2550 0efe FB18     		add	r3, r7, r3
 2551 0f00 1B68     		ldr	r3, [r3]
 2552 0f02 092B     		cmp	r3, #9
 2553 0f04 D2D9     		bls	.L146
 2554              	.L149:
 676:../scr/ymodem.c ****     
 677:../scr/ymodem.c ****   if (errors >=  0x0A)
 2555              		.loc 1 677 0 is_stmt 1
 2556 0f06 0A4B     		ldr	r3, .L154+8
 2557 0f08 FB18     		add	r3, r7, r3
 2558 0f0a 1B68     		ldr	r3, [r3]
 2559 0f0c 092B     		cmp	r3, #9
 2560 0f0e 04D9     		bls	.L150
 678:../scr/ymodem.c ****   {
 679:../scr/ymodem.c ****     return errors;
 2561              		.loc 1 679 0
 2562 0f10 074B     		ldr	r3, .L154+8
 2563 0f12 FB18     		add	r3, r7, r3
 2564 0f14 1B68     		ldr	r3, [r3]
 2565 0f16 DBB2     		uxtb	r3, r3
 2566 0f18 00E0     		b	.L151
 2567              	.L150:
 680:../scr/ymodem.c ****   }
 681:../scr/ymodem.c ****   return 0; /* file trasmitted successfully */
 2568              		.loc 1 681 0
 2569 0f1a 0023     		mov	r3, #0
 2570              	.L151:
 682:../scr/ymodem.c **** }
 2571              		.loc 1 682 0 discriminator 1
 2572 0f1c 181C     		mov	r0, r3
 2573 0f1e BD46     		mov	sp, r7
 2574 0f20 084B     		ldr	r3, .L154+28
 2575 0f22 9D44     		add	sp, sp, r3
 2576              		@ sp needed
 2577 0f24 90BD     		pop	{r4, r7, pc}
 2578              	.L155:
 2579 0f26 C046     		.align	2
 2580              	.L154:
 2581 0f28 24050000 		.word	1316
 2582 0f2c D8FAFFFF 		.word	-1320
 2583 0f30 2C050000 		.word	1324
 2584 0f34 10270000 		.word	10000
 2585 0f38 DCFBFFFF 		.word	-1060
 2586 0f3c 31050000 		.word	1329
 2587 0f40 1C050000 		.word	1308
 2588 0f44 3C050000 		.word	1340
 2589              		.cfi_endproc
 2590              	.LFE44:
 2592              	.Letext0:
 2593              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2015q3\\arm-none-eabi\\include\\mach
 2594              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2015q3\\arm-none-eabi\\include\\sys\
 2595              		.file 4 "D:\\EclipseIndigo\\workspace\\rfid_demo\\Libraries\\STM32F0xx_StdPeriph_Driver\\inc/stm32
 2596              		.file 5 "../scr/DataUtil.h"
 2597              		.file 6 "../scr/common.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ymodem.c
                            *COM*:000015b8 x3buffer
                            *COM*:0000000c g_pointer
                            *COM*:0000005c g_config
                            *COM*:00000100 file_name
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:26     .data:00000000 PageSize
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:23     .data:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:33     .bss:00000000 EraseCounter
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:30     .bss:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:39     .bss:00000004 NbrOfPage
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:45     .data:00000002 FLASHStatus
                            *COM*:00000004 RamSource
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:49     .text:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:53     .text:00000000 Receive_Byte
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:110    .text:00000034 Send_Byte
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:148    .text:00000054 Receive_Packet
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:352    .text:00000174 Ymodem_Receive
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:887    .text:000004ec $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:906    .text:00000530 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:982    .text:0000059c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:988    .text:000005a8 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:993    .text:000005a8 Ymodem_CheckResponse
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:1027   .text:000005c0 Ymodem_PrepareIntialPacket
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:1214   .text:000006dc Ymodem_PreparePacket
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:1391   .text:000007e0 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:1395   .text:000007e4 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:1400   .text:000007e4 UpdateCRC16
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:1482   .text:0000084c $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:1486   .text:00000850 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:1491   .text:00000850 Cal_CRC16
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:1570   .text:000008b4 CalChecksum
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:1630   .text:000008f0 Ymodem_SendPacket
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:1696   .text:0000093c Ymodem_Transmit
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:2212   .text:00000ca0 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:2228   .text:00000cd8 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccUwQGCH.s:2581   .text:00000f28 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.38f3ce5416ddc4c94340ac14f0421ae0
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.stddef.h.184.159df79b4ca79c76561572a55985524c
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.stddef.h.39.7e3d906ac58942e0b374c527445f5de5
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.types.h.24.b2be5f53932a9c9d07787288b29b6d75
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.82.82b71f3f44c70e3a459d0f66642b05eb
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.68.ff6d7571d3ad75c55f15e26dbaa81e35
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.stm32f0xx.h.54.4683aa1e9aded801990d6fc5c3cd79d1
                           .group:00000000 wm4.core_cm0.h.47.022e66414e77714da7c4b30b3ad99fe8
                           .group:00000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.core_cmInstr.h.39.b7b6650bdd2316848d940915272d75b8
                           .group:00000000 wm4.core_cm0.h.135.ca70469f87e143609670bb393bfa6518
                           .group:00000000 wm4.stm32f0xx.h.490.3021eb906afe162bf2c4c3f84017f2b7
                           .group:00000000 wm4.stm32f0xx_adc.h.85.55aeb589c2c2703602e5f964c35b0c48
                           .group:00000000 wm4.stm32f0xx_can.h.31.a43838c2d1a571e6bd63f34d4d38f77a
                           .group:00000000 wm4.stm32f0xx_cec.h.31.cbead9587d6f5205735191e084956263
                           .group:00000000 wm4.stm32f0xx_crc.h.31.657756bbefdf42347508251cbea9a2cc
                           .group:00000000 wm4.stm32f0xx_crs.h.31.22b5372509752121d772a6317b79e691
                           .group:00000000 wm4.stm32f0xx_comp.h.31.505a77c0cb787dfeca9e3c2b1da31ed9
                           .group:00000000 wm4.stm32f0xx_dac.h.31.3d3aa9b22e91ba1b1cfddfa53a7af016
                           .group:00000000 wm4.stm32f0xx_dbgmcu.h.31.43e4f2e77b6aa0d00808044a3e1d0d83
                           .group:00000000 wm4.stm32f0xx_dma.h.31.d3df6d3d0192193cb53f5c34738fc5a2
                           .group:00000000 wm4.stm32f0xx_exti.h.31.6d7f5d51fe1eff0809a232d0301b7244
                           .group:00000000 wm4.stm32f0xx_flash.h.31.3e9f83248098cae82aee4fdd1dde590d
                           .group:00000000 wm4.stm32f0xx_gpio.h.31.0378cd9a2c4cea0ca3c3e917acce56e1
                           .group:00000000 wm4.stm32f0xx_syscfg.h.31.6e8ab03c61462545bc84446ab81da274
                           .group:00000000 wm4.stm32f0xx_i2c.h.31.83969866ec38bbcc1bff9238f01a1954
                           .group:00000000 wm4.stm32f0xx_iwdg.h.31.bb16f7e18e54df66bf9bd0e2b29bdc93
                           .group:00000000 wm4.stm32f0xx_pwr.h.31.6dd56e642e4a5657857c16e695f196ff
                           .group:00000000 wm4.stm32f0xx_rcc.h.31.b7995c183c4864b04eda399c410c0e53
                           .group:00000000 wm4.stm32f0xx_rtc.h.31.bd5ec8997d6af4752bb55b75cb717765
                           .group:00000000 wm4.stm32f0xx_spi.h.31.6c629d36cb6d36ac31583d2d427e887a
                           .group:00000000 wm4.stm32f0xx_tim.h.31.265cfb150d9b3c280816e67e49205128
                           .group:00000000 wm4.stm32f0xx_usart.h.31.81196cb2de47d9dd879446831830753a
                           .group:00000000 wm4.stm32f0xx_wwdg.h.31.0cf1a9b3d89d147c688025fdd33d9c49
                           .group:00000000 wm4.stm32f0xx_misc.h.31.d5c08c37e69b8a852dbb75e9252454c6
                           .group:00000000 wm4.time.h.8.2930fe070f4a8096b07db9159698c8e3
                           .group:00000000 wm4.time.h.2.4581ce0ffb6627cfc02162c94bf846c9
                           .group:00000000 wm4.time.h.24.3660bbb2d0a4c7457ff52ba3ada4c166
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.time.h.217.2f437ac2cf06537c84703833b0977905
                           .group:00000000 wm4.DataUtil.h.6.7244789e324a04765de5b008e99af49c
                           .group:00000000 wm4.common.h.36.396870489cb68de4c1415185500a1a4d
                           .group:00000000 wm4.ymodem.h.24.613d258bf183758042d94dca54a83ab9

UNDEFINED SYMBOLS
SerialKeyPressed
SerialPutChar
Str2Int
FLASH_PagesMask
FLASH_ErasePage
memcpy
FLASH_ProgramWord
Int2Str
