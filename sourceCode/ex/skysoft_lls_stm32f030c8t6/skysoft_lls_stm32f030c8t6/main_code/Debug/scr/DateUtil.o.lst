   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"DateUtil.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_idivmod
  18              		.align	2
  19              		.global	isleapyear
  20              		.code	16
  21              		.thumb_func
  23              	isleapyear:
  24              	.LFB0:
  25              		.file 1 "../scr/DateUtil.c"
   1:../scr/DateUtil.c **** #include "stdio.h"
   2:../scr/DateUtil.c **** #include "string.h"
   3:../scr/DateUtil.c **** #include "Util.h"
   4:../scr/DateUtil.c **** 
   5:../scr/DateUtil.c **** char isleapyear(int year){   //ham kiem tra nam nhuan
  26              		.loc 1 5 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 16
  36 0004 00AF     		add	r7, sp, #0
  37              	.LCFI2:
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
   6:../scr/DateUtil.c ****     if((year %4 ==0) && ((year %100 !=0) || (year % 400==0))) return 1;
  40              		.loc 1 6 0
  41 0008 7B68     		ldr	r3, [r7, #4]
  42 000a 0322     		mov	r2, #3
  43 000c 1340     		and	r3, r2
  44 000e 10D1     		bne	.L2
  45              		.loc 1 6 0 is_stmt 0 discriminator 1
  46 0010 7B68     		ldr	r3, [r7, #4]
  47 0012 181C     		mov	r0, r3
  48 0014 6421     		mov	r1, #100
  49 0016 FFF7FEFF 		bl	__aeabi_idivmod
  50 001a 0B1E     		sub	r3, r1, #0
  51 001c 07D1     		bne	.L3
  52              		.loc 1 6 0 discriminator 3
  53 001e 7B68     		ldr	r3, [r7, #4]
  54 0020 181C     		mov	r0, r3
  55 0022 C823     		mov	r3, #200
  56 0024 5900     		lsl	r1, r3, #1
  57 0026 FFF7FEFF 		bl	__aeabi_idivmod
  58 002a 0B1E     		sub	r3, r1, #0
  59 002c 01D1     		bne	.L2
  60              	.L3:
  61              		.loc 1 6 0 discriminator 4
  62 002e 0123     		mov	r3, #1
  63 0030 00E0     		b	.L4
  64              	.L2:
   7:../scr/DateUtil.c ****     else return 0;
  65              		.loc 1 7 0 is_stmt 1
  66 0032 0023     		mov	r3, #0
  67              	.L4:
   8:../scr/DateUtil.c **** }
  68              		.loc 1 8 0
  69 0034 181C     		mov	r0, r3
  70 0036 BD46     		mov	sp, r7
  71 0038 02B0     		add	sp, sp, #8
  72              		@ sp needed
  73 003a 80BD     		pop	{r7, pc}
  74              		.cfi_endproc
  75              	.LFE0:
  77              		.section	.rodata
  78              		.align	2
  79              	.LC0:
  80 0000 1F       		.byte	31
  81 0001 1F       		.byte	31
  82 0002 1C       		.byte	28
  83 0003 1F       		.byte	31
  84 0004 1E       		.byte	30
  85 0005 1F       		.byte	31
  86 0006 1E       		.byte	30
  87 0007 1F       		.byte	31
  88 0008 1F       		.byte	31
  89 0009 1E       		.byte	30
  90 000a 1F       		.byte	31
  91 000b 1E       		.byte	30
  92 000c 1F       		.byte	31
  93              		.text
  94              		.align	2
  95              		.global	truedate
  96              		.code	16
  97              		.thumb_func
  99              	truedate:
 100              	.LFB1:
   9:../scr/DateUtil.c **** 
  10:../scr/DateUtil.c **** char truedate(int dd, int mm, int yy) {   //ham kiem tra ngay, thang nam nhap vao co hop le ko
 101              		.loc 1 10 0
 102              		.cfi_startproc
 103 003c 80B5     		push	{r7, lr}
 104              	.LCFI3:
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 7, -8
 107              		.cfi_offset 14, -4
 108 003e 88B0     		sub	sp, sp, #32
 109              	.LCFI4:
 110              		.cfi_def_cfa_offset 40
 111 0040 00AF     		add	r7, sp, #0
 112              	.LCFI5:
 113              		.cfi_def_cfa_register 7
 114 0042 F860     		str	r0, [r7, #12]
 115 0044 B960     		str	r1, [r7, #8]
 116 0046 7A60     		str	r2, [r7, #4]
  11:../scr/DateUtil.c ****     char dayofmonth[13] = {31, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 117              		.loc 1 11 0
 118 0048 1023     		mov	r3, #16
 119 004a FA18     		add	r2, r7, r3
 120 004c 1B4B     		ldr	r3, .L12
 121 004e 111C     		mov	r1, r2
 122 0050 1A1C     		mov	r2, r3
 123 0052 0D23     		mov	r3, #13
 124 0054 081C     		mov	r0, r1
 125 0056 111C     		mov	r1, r2
 126 0058 1A1C     		mov	r2, r3
 127 005a FFF7FEFF 		bl	memcpy
  12:../scr/DateUtil.c ****     if(yy>= 2000){
 128              		.loc 1 12 0
 129 005e 7B68     		ldr	r3, [r7, #4]
 130 0060 174A     		ldr	r2, .L12+4
 131 0062 9342     		cmp	r3, r2
 132 0064 25DD     		ble	.L6
  13:../scr/DateUtil.c ****         if(mm>=1 && mm<=12){
 133              		.loc 1 13 0
 134 0066 BB68     		ldr	r3, [r7, #8]
 135 0068 002B     		cmp	r3, #0
 136 006a 20DD     		ble	.L7
 137              		.loc 1 13 0 is_stmt 0 discriminator 1
 138 006c BB68     		ldr	r3, [r7, #8]
 139 006e 0C2B     		cmp	r3, #12
 140 0070 1DDC     		bgt	.L7
  14:../scr/DateUtil.c ****             if(isleapyear(yy)) dayofmonth[2]++;
 141              		.loc 1 14 0 is_stmt 1
 142 0072 7B68     		ldr	r3, [r7, #4]
 143 0074 181C     		mov	r0, r3
 144 0076 FFF7FEFF 		bl	isleapyear
 145 007a 031E     		sub	r3, r0, #0
 146 007c 07D0     		beq	.L8
 147              		.loc 1 14 0 is_stmt 0 discriminator 1
 148 007e 1023     		mov	r3, #16
 149 0080 FB18     		add	r3, r7, r3
 150 0082 9B78     		ldrb	r3, [r3, #2]
 151 0084 0133     		add	r3, r3, #1
 152 0086 DAB2     		uxtb	r2, r3
 153 0088 1023     		mov	r3, #16
 154 008a FB18     		add	r3, r7, r3
 155 008c 9A70     		strb	r2, [r3, #2]
 156              	.L8:
  15:../scr/DateUtil.c ****             if(dd>0 && dd<=(int)dayofmonth[mm]) { 
 157              		.loc 1 15 0 is_stmt 1
 158 008e FB68     		ldr	r3, [r7, #12]
 159 0090 002B     		cmp	r3, #0
 160 0092 0ADD     		ble	.L9
 161              		.loc 1 15 0 is_stmt 0 discriminator 1
 162 0094 1023     		mov	r3, #16
 163 0096 FA18     		add	r2, r7, r3
 164 0098 BB68     		ldr	r3, [r7, #8]
 165 009a D318     		add	r3, r2, r3
 166 009c 1B78     		ldrb	r3, [r3]
 167 009e 1A1E     		sub	r2, r3, #0
 168 00a0 FB68     		ldr	r3, [r7, #12]
 169 00a2 9A42     		cmp	r2, r3
 170 00a4 01DB     		blt	.L9
  16:../scr/DateUtil.c **** 				return 1;
 171              		.loc 1 16 0 is_stmt 1
 172 00a6 0123     		mov	r3, #1
 173 00a8 04E0     		b	.L11
 174              	.L9:
  17:../scr/DateUtil.c **** 			}  else {
  18:../scr/DateUtil.c **** 				return 0;
 175              		.loc 1 18 0
 176 00aa 0023     		mov	r3, #0
 177 00ac 02E0     		b	.L11
 178              	.L7:
  19:../scr/DateUtil.c **** 			}
  20:../scr/DateUtil.c ****         } else { 
  21:../scr/DateUtil.c **** 			return 0;
 179              		.loc 1 21 0
 180 00ae 0023     		mov	r3, #0
 181 00b0 00E0     		b	.L11
 182              	.L6:
  22:../scr/DateUtil.c **** 		}
  23:../scr/DateUtil.c ****     } else {
  24:../scr/DateUtil.c **** 		return 0;
 183              		.loc 1 24 0
 184 00b2 0023     		mov	r3, #0
 185              	.L11:
  25:../scr/DateUtil.c **** 	}
  26:../scr/DateUtil.c **** }
 186              		.loc 1 26 0 discriminator 1
 187 00b4 181C     		mov	r0, r3
 188 00b6 BD46     		mov	sp, r7
 189 00b8 08B0     		add	sp, sp, #32
 190              		@ sp needed
 191 00ba 80BD     		pop	{r7, pc}
 192              	.L13:
 193              		.align	2
 194              	.L12:
 195 00bc 00000000 		.word	.LC0
 196 00c0 CF070000 		.word	1999
 197              		.cfi_endproc
 198              	.LFE1:
 200              		.align	2
 201              		.global	truetime
 202              		.code	16
 203              		.thumb_func
 205              	truetime:
 206              	.LFB2:
  27:../scr/DateUtil.c **** 
  28:../scr/DateUtil.c **** char truetime(int h, int m, int s) {
 207              		.loc 1 28 0
 208              		.cfi_startproc
 209 00c4 80B5     		push	{r7, lr}
 210              	.LCFI6:
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 00c6 84B0     		sub	sp, sp, #16
 215              	.LCFI7:
 216              		.cfi_def_cfa_offset 24
 217 00c8 00AF     		add	r7, sp, #0
 218              	.LCFI8:
 219              		.cfi_def_cfa_register 7
 220 00ca F860     		str	r0, [r7, #12]
 221 00cc B960     		str	r1, [r7, #8]
 222 00ce 7A60     		str	r2, [r7, #4]
  29:../scr/DateUtil.c **** 	if(h >= 0 && h < 24) {
 223              		.loc 1 29 0
 224 00d0 FB68     		ldr	r3, [r7, #12]
 225 00d2 002B     		cmp	r3, #0
 226 00d4 14DB     		blt	.L15
 227              		.loc 1 29 0 is_stmt 0 discriminator 1
 228 00d6 FB68     		ldr	r3, [r7, #12]
 229 00d8 172B     		cmp	r3, #23
 230 00da 11DC     		bgt	.L15
  30:../scr/DateUtil.c **** 		if(m >=0 && m < 60) {
 231              		.loc 1 30 0 is_stmt 1
 232 00dc BB68     		ldr	r3, [r7, #8]
 233 00de 002B     		cmp	r3, #0
 234 00e0 0CDB     		blt	.L16
 235              		.loc 1 30 0 is_stmt 0 discriminator 1
 236 00e2 BB68     		ldr	r3, [r7, #8]
 237 00e4 3B2B     		cmp	r3, #59
 238 00e6 09DC     		bgt	.L16
  31:../scr/DateUtil.c **** 			if(s >= 0 && s < 60) {
 239              		.loc 1 31 0 is_stmt 1
 240 00e8 7B68     		ldr	r3, [r7, #4]
 241 00ea 002B     		cmp	r3, #0
 242 00ec 04DB     		blt	.L17
 243              		.loc 1 31 0 is_stmt 0 discriminator 1
 244 00ee 7B68     		ldr	r3, [r7, #4]
 245 00f0 3B2B     		cmp	r3, #59
 246 00f2 01DC     		bgt	.L17
  32:../scr/DateUtil.c **** 				return 1;
 247              		.loc 1 32 0 is_stmt 1
 248 00f4 0123     		mov	r3, #1
 249 00f6 04E0     		b	.L18
 250              	.L17:
  33:../scr/DateUtil.c **** 			} else return 0;
 251              		.loc 1 33 0
 252 00f8 0023     		mov	r3, #0
 253 00fa 02E0     		b	.L18
 254              	.L16:
  34:../scr/DateUtil.c **** 		} else return 0;
 255              		.loc 1 34 0
 256 00fc 0023     		mov	r3, #0
 257 00fe 00E0     		b	.L18
 258              	.L15:
  35:../scr/DateUtil.c **** 	} else return 0;
 259              		.loc 1 35 0
 260 0100 0023     		mov	r3, #0
 261              	.L18:
  36:../scr/DateUtil.c **** }
 262              		.loc 1 36 0
 263 0102 181C     		mov	r0, r3
 264 0104 BD46     		mov	sp, r7
 265 0106 04B0     		add	sp, sp, #16
 266              		@ sp needed
 267 0108 80BD     		pop	{r7, pc}
 268              		.cfi_endproc
 269              	.LFE2:
 271 010a C046     		.align	2
 272              		.global	getHour
 273              		.code	16
 274              		.thumb_func
 276              	getHour:
 277              	.LFB3:
  37:../scr/DateUtil.c **** 
  38:../scr/DateUtil.c **** int getHour(char* dt) {
 278              		.loc 1 38 0
 279              		.cfi_startproc
 280 010c 80B5     		push	{r7, lr}
 281              	.LCFI9:
 282              		.cfi_def_cfa_offset 8
 283              		.cfi_offset 7, -8
 284              		.cfi_offset 14, -4
 285 010e 84B0     		sub	sp, sp, #16
 286              	.LCFI10:
 287              		.cfi_def_cfa_offset 24
 288 0110 00AF     		add	r7, sp, #0
 289              	.LCFI11:
 290              		.cfi_def_cfa_register 7
 291 0112 7860     		str	r0, [r7, #4]
  39:../scr/DateUtil.c **** 	char tmpT[2] = {0};
 292              		.loc 1 39 0
 293 0114 0C23     		mov	r3, #12
 294 0116 FB18     		add	r3, r7, r3
 295 0118 0022     		mov	r2, #0
 296 011a 1A80     		strh	r2, [r3]
 297              	.LBB2:
  40:../scr/DateUtil.c **** 
  41:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 298              		.loc 1 41 0
 299 011c 0F23     		mov	r3, #15
 300 011e FB18     		add	r3, r7, r3
 301 0120 0022     		mov	r2, #0
 302 0122 1A70     		strb	r2, [r3]
 303 0124 12E0     		b	.L20
 304              	.L21:
  42:../scr/DateUtil.c **** 		tmpT[i] = dt[i];
 305              		.loc 1 42 0 discriminator 3
 306 0126 0F23     		mov	r3, #15
 307 0128 FB18     		add	r3, r7, r3
 308 012a 1B78     		ldrb	r3, [r3]
 309 012c 0F22     		mov	r2, #15
 310 012e BA18     		add	r2, r7, r2
 311 0130 1278     		ldrb	r2, [r2]
 312 0132 7968     		ldr	r1, [r7, #4]
 313 0134 8A18     		add	r2, r1, r2
 314 0136 1178     		ldrb	r1, [r2]
 315 0138 0C22     		mov	r2, #12
 316 013a BA18     		add	r2, r7, r2
 317 013c D154     		strb	r1, [r2, r3]
  41:../scr/DateUtil.c **** 		tmpT[i] = dt[i];
 318              		.loc 1 41 0 discriminator 3
 319 013e 0F23     		mov	r3, #15
 320 0140 FB18     		add	r3, r7, r3
 321 0142 1A78     		ldrb	r2, [r3]
 322 0144 0F23     		mov	r3, #15
 323 0146 FB18     		add	r3, r7, r3
 324 0148 0132     		add	r2, r2, #1
 325 014a 1A70     		strb	r2, [r3]
 326              	.L20:
  41:../scr/DateUtil.c **** 		tmpT[i] = dt[i];
 327              		.loc 1 41 0 is_stmt 0 discriminator 1
 328 014c 0F23     		mov	r3, #15
 329 014e FB18     		add	r3, r7, r3
 330 0150 1B78     		ldrb	r3, [r3]
 331 0152 012B     		cmp	r3, #1
 332 0154 E7D9     		bls	.L21
 333              	.LBE2:
  43:../scr/DateUtil.c **** 	}
  44:../scr/DateUtil.c **** 	return a_to_i(tmpT, 2);
 334              		.loc 1 44 0 is_stmt 1
 335 0156 0C23     		mov	r3, #12
 336 0158 FB18     		add	r3, r7, r3
 337 015a 181C     		mov	r0, r3
 338 015c 0221     		mov	r1, #2
 339 015e FFF7FEFF 		bl	a_to_i
 340 0162 031C     		mov	r3, r0
  45:../scr/DateUtil.c **** }
 341              		.loc 1 45 0
 342 0164 181C     		mov	r0, r3
 343 0166 BD46     		mov	sp, r7
 344 0168 04B0     		add	sp, sp, #16
 345              		@ sp needed
 346 016a 80BD     		pop	{r7, pc}
 347              		.cfi_endproc
 348              	.LFE3:
 350              		.align	2
 351              		.global	getMinute
 352              		.code	16
 353              		.thumb_func
 355              	getMinute:
 356              	.LFB4:
  46:../scr/DateUtil.c **** 
  47:../scr/DateUtil.c **** int getMinute(char* dt) {
 357              		.loc 1 47 0
 358              		.cfi_startproc
 359 016c 80B5     		push	{r7, lr}
 360              	.LCFI12:
 361              		.cfi_def_cfa_offset 8
 362              		.cfi_offset 7, -8
 363              		.cfi_offset 14, -4
 364 016e 84B0     		sub	sp, sp, #16
 365              	.LCFI13:
 366              		.cfi_def_cfa_offset 24
 367 0170 00AF     		add	r7, sp, #0
 368              	.LCFI14:
 369              		.cfi_def_cfa_register 7
 370 0172 7860     		str	r0, [r7, #4]
  48:../scr/DateUtil.c **** 	char tmpT[2] = {0};
 371              		.loc 1 48 0
 372 0174 0C23     		mov	r3, #12
 373 0176 FB18     		add	r3, r7, r3
 374 0178 0022     		mov	r2, #0
 375 017a 1A80     		strh	r2, [r3]
 376              	.LBB3:
  49:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 377              		.loc 1 49 0
 378 017c 0F23     		mov	r3, #15
 379 017e FB18     		add	r3, r7, r3
 380 0180 0022     		mov	r2, #0
 381 0182 1A70     		strb	r2, [r3]
 382 0184 13E0     		b	.L24
 383              	.L25:
  50:../scr/DateUtil.c **** 		tmpT[i] = dt[i+3];
 384              		.loc 1 50 0 discriminator 3
 385 0186 0F23     		mov	r3, #15
 386 0188 FB18     		add	r3, r7, r3
 387 018a 1B78     		ldrb	r3, [r3]
 388 018c 0F22     		mov	r2, #15
 389 018e BA18     		add	r2, r7, r2
 390 0190 1278     		ldrb	r2, [r2]
 391 0192 0332     		add	r2, r2, #3
 392 0194 7968     		ldr	r1, [r7, #4]
 393 0196 8A18     		add	r2, r1, r2
 394 0198 1178     		ldrb	r1, [r2]
 395 019a 0C22     		mov	r2, #12
 396 019c BA18     		add	r2, r7, r2
 397 019e D154     		strb	r1, [r2, r3]
  49:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 398              		.loc 1 49 0 discriminator 3
 399 01a0 0F23     		mov	r3, #15
 400 01a2 FB18     		add	r3, r7, r3
 401 01a4 1A78     		ldrb	r2, [r3]
 402 01a6 0F23     		mov	r3, #15
 403 01a8 FB18     		add	r3, r7, r3
 404 01aa 0132     		add	r2, r2, #1
 405 01ac 1A70     		strb	r2, [r3]
 406              	.L24:
  49:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 407              		.loc 1 49 0 is_stmt 0 discriminator 1
 408 01ae 0F23     		mov	r3, #15
 409 01b0 FB18     		add	r3, r7, r3
 410 01b2 1B78     		ldrb	r3, [r3]
 411 01b4 012B     		cmp	r3, #1
 412 01b6 E6D9     		bls	.L25
 413              	.LBE3:
  51:../scr/DateUtil.c **** 	}
  52:../scr/DateUtil.c **** 	return a_to_i(tmpT, 2);
 414              		.loc 1 52 0 is_stmt 1
 415 01b8 0C23     		mov	r3, #12
 416 01ba FB18     		add	r3, r7, r3
 417 01bc 181C     		mov	r0, r3
 418 01be 0221     		mov	r1, #2
 419 01c0 FFF7FEFF 		bl	a_to_i
 420 01c4 031C     		mov	r3, r0
  53:../scr/DateUtil.c **** }
 421              		.loc 1 53 0
 422 01c6 181C     		mov	r0, r3
 423 01c8 BD46     		mov	sp, r7
 424 01ca 04B0     		add	sp, sp, #16
 425              		@ sp needed
 426 01cc 80BD     		pop	{r7, pc}
 427              		.cfi_endproc
 428              	.LFE4:
 430 01ce C046     		.align	2
 431              		.global	getSecond
 432              		.code	16
 433              		.thumb_func
 435              	getSecond:
 436              	.LFB5:
  54:../scr/DateUtil.c **** 
  55:../scr/DateUtil.c **** int getSecond(char* dt) {
 437              		.loc 1 55 0
 438              		.cfi_startproc
 439 01d0 80B5     		push	{r7, lr}
 440              	.LCFI15:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 7, -8
 443              		.cfi_offset 14, -4
 444 01d2 84B0     		sub	sp, sp, #16
 445              	.LCFI16:
 446              		.cfi_def_cfa_offset 24
 447 01d4 00AF     		add	r7, sp, #0
 448              	.LCFI17:
 449              		.cfi_def_cfa_register 7
 450 01d6 7860     		str	r0, [r7, #4]
  56:../scr/DateUtil.c **** 	char tmpT[2] = {0};
 451              		.loc 1 56 0
 452 01d8 0C23     		mov	r3, #12
 453 01da FB18     		add	r3, r7, r3
 454 01dc 0022     		mov	r2, #0
 455 01de 1A80     		strh	r2, [r3]
 456              	.LBB4:
  57:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 457              		.loc 1 57 0
 458 01e0 0F23     		mov	r3, #15
 459 01e2 FB18     		add	r3, r7, r3
 460 01e4 0022     		mov	r2, #0
 461 01e6 1A70     		strb	r2, [r3]
 462 01e8 13E0     		b	.L28
 463              	.L29:
  58:../scr/DateUtil.c **** 		tmpT[i] = dt[i+6];
 464              		.loc 1 58 0 discriminator 3
 465 01ea 0F23     		mov	r3, #15
 466 01ec FB18     		add	r3, r7, r3
 467 01ee 1B78     		ldrb	r3, [r3]
 468 01f0 0F22     		mov	r2, #15
 469 01f2 BA18     		add	r2, r7, r2
 470 01f4 1278     		ldrb	r2, [r2]
 471 01f6 0632     		add	r2, r2, #6
 472 01f8 7968     		ldr	r1, [r7, #4]
 473 01fa 8A18     		add	r2, r1, r2
 474 01fc 1178     		ldrb	r1, [r2]
 475 01fe 0C22     		mov	r2, #12
 476 0200 BA18     		add	r2, r7, r2
 477 0202 D154     		strb	r1, [r2, r3]
  57:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 478              		.loc 1 57 0 discriminator 3
 479 0204 0F23     		mov	r3, #15
 480 0206 FB18     		add	r3, r7, r3
 481 0208 1A78     		ldrb	r2, [r3]
 482 020a 0F23     		mov	r3, #15
 483 020c FB18     		add	r3, r7, r3
 484 020e 0132     		add	r2, r2, #1
 485 0210 1A70     		strb	r2, [r3]
 486              	.L28:
  57:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 487              		.loc 1 57 0 is_stmt 0 discriminator 1
 488 0212 0F23     		mov	r3, #15
 489 0214 FB18     		add	r3, r7, r3
 490 0216 1B78     		ldrb	r3, [r3]
 491 0218 012B     		cmp	r3, #1
 492 021a E6D9     		bls	.L29
 493              	.LBE4:
  59:../scr/DateUtil.c **** 	}
  60:../scr/DateUtil.c **** 	return a_to_i(tmpT, 2);
 494              		.loc 1 60 0 is_stmt 1
 495 021c 0C23     		mov	r3, #12
 496 021e FB18     		add	r3, r7, r3
 497 0220 181C     		mov	r0, r3
 498 0222 0221     		mov	r1, #2
 499 0224 FFF7FEFF 		bl	a_to_i
 500 0228 031C     		mov	r3, r0
  61:../scr/DateUtil.c **** }
 501              		.loc 1 61 0
 502 022a 181C     		mov	r0, r3
 503 022c BD46     		mov	sp, r7
 504 022e 04B0     		add	sp, sp, #16
 505              		@ sp needed
 506 0230 80BD     		pop	{r7, pc}
 507              		.cfi_endproc
 508              	.LFE5:
 510 0232 C046     		.align	2
 511              		.global	istruetime
 512              		.code	16
 513              		.thumb_func
 515              	istruetime:
 516              	.LFB6:
  62:../scr/DateUtil.c **** 
  63:../scr/DateUtil.c **** char istruetime(char* dt) {
 517              		.loc 1 63 0
 518              		.cfi_startproc
 519 0234 B0B5     		push	{r4, r5, r7, lr}
 520              	.LCFI18:
 521              		.cfi_def_cfa_offset 16
 522              		.cfi_offset 4, -16
 523              		.cfi_offset 5, -12
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526 0236 84B0     		sub	sp, sp, #16
 527              	.LCFI19:
 528              		.cfi_def_cfa_offset 32
 529 0238 00AF     		add	r7, sp, #0
 530              	.LCFI20:
 531              		.cfi_def_cfa_register 7
 532 023a 7860     		str	r0, [r7, #4]
 533              	.LBB5:
  64:../scr/DateUtil.c **** 	for(char i = 0; i < 8; i++) {
 534              		.loc 1 64 0
 535 023c 0F23     		mov	r3, #15
 536 023e FB18     		add	r3, r7, r3
 537 0240 0022     		mov	r2, #0
 538 0242 1A70     		strb	r2, [r3]
 539 0244 10E0     		b	.L32
 540              	.L35:
  65:../scr/DateUtil.c **** 		if(dt[i] == '_') {
 541              		.loc 1 65 0
 542 0246 0F23     		mov	r3, #15
 543 0248 FB18     		add	r3, r7, r3
 544 024a 1B78     		ldrb	r3, [r3]
 545 024c 7A68     		ldr	r2, [r7, #4]
 546 024e D318     		add	r3, r2, r3
 547 0250 1B78     		ldrb	r3, [r3]
 548 0252 5F2B     		cmp	r3, #95
 549 0254 01D1     		bne	.L33
  66:../scr/DateUtil.c **** 			return 0;
 550              		.loc 1 66 0
 551 0256 0023     		mov	r3, #0
 552 0258 20E0     		b	.L34
 553              	.L33:
  64:../scr/DateUtil.c **** 	for(char i = 0; i < 8; i++) {
 554              		.loc 1 64 0 discriminator 2
 555 025a 0F23     		mov	r3, #15
 556 025c FB18     		add	r3, r7, r3
 557 025e 1A78     		ldrb	r2, [r3]
 558 0260 0F23     		mov	r3, #15
 559 0262 FB18     		add	r3, r7, r3
 560 0264 0132     		add	r2, r2, #1
 561 0266 1A70     		strb	r2, [r3]
 562              	.L32:
  64:../scr/DateUtil.c **** 	for(char i = 0; i < 8; i++) {
 563              		.loc 1 64 0 is_stmt 0 discriminator 1
 564 0268 0F23     		mov	r3, #15
 565 026a FB18     		add	r3, r7, r3
 566 026c 1B78     		ldrb	r3, [r3]
 567 026e 072B     		cmp	r3, #7
 568 0270 E9D9     		bls	.L35
 569              	.LBE5:
  67:../scr/DateUtil.c **** 		}
  68:../scr/DateUtil.c **** 	}	
  69:../scr/DateUtil.c **** 	return truetime(getHour(dt), getMinute(dt), getSecond(dt));
 570              		.loc 1 69 0 is_stmt 1
 571 0272 7B68     		ldr	r3, [r7, #4]
 572 0274 181C     		mov	r0, r3
 573 0276 FFF7FEFF 		bl	getHour
 574 027a 051C     		mov	r5, r0
 575 027c 7B68     		ldr	r3, [r7, #4]
 576 027e 181C     		mov	r0, r3
 577 0280 FFF7FEFF 		bl	getMinute
 578 0284 041C     		mov	r4, r0
 579 0286 7B68     		ldr	r3, [r7, #4]
 580 0288 181C     		mov	r0, r3
 581 028a FFF7FEFF 		bl	getSecond
 582 028e 031C     		mov	r3, r0
 583 0290 281C     		mov	r0, r5
 584 0292 211C     		mov	r1, r4
 585 0294 1A1C     		mov	r2, r3
 586 0296 FFF7FEFF 		bl	truetime
 587 029a 031C     		mov	r3, r0
 588              	.L34:
  70:../scr/DateUtil.c **** }
 589              		.loc 1 70 0
 590 029c 181C     		mov	r0, r3
 591 029e BD46     		mov	sp, r7
 592 02a0 04B0     		add	sp, sp, #16
 593              		@ sp needed
 594 02a2 B0BD     		pop	{r4, r5, r7, pc}
 595              		.cfi_endproc
 596              	.LFE6:
 598              		.align	2
 599              		.global	getDay
 600              		.code	16
 601              		.thumb_func
 603              	getDay:
 604              	.LFB7:
  71:../scr/DateUtil.c **** 
  72:../scr/DateUtil.c **** int getDay(char* dt) {
 605              		.loc 1 72 0
 606              		.cfi_startproc
 607 02a4 80B5     		push	{r7, lr}
 608              	.LCFI21:
 609              		.cfi_def_cfa_offset 8
 610              		.cfi_offset 7, -8
 611              		.cfi_offset 14, -4
 612 02a6 84B0     		sub	sp, sp, #16
 613              	.LCFI22:
 614              		.cfi_def_cfa_offset 24
 615 02a8 00AF     		add	r7, sp, #0
 616              	.LCFI23:
 617              		.cfi_def_cfa_register 7
 618 02aa 7860     		str	r0, [r7, #4]
  73:../scr/DateUtil.c **** 	char tmpT[2] = {0};
 619              		.loc 1 73 0
 620 02ac 0C23     		mov	r3, #12
 621 02ae FB18     		add	r3, r7, r3
 622 02b0 0022     		mov	r2, #0
 623 02b2 1A80     		strh	r2, [r3]
 624              	.LBB6:
  74:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 625              		.loc 1 74 0
 626 02b4 0F23     		mov	r3, #15
 627 02b6 FB18     		add	r3, r7, r3
 628 02b8 0022     		mov	r2, #0
 629 02ba 1A70     		strb	r2, [r3]
 630 02bc 12E0     		b	.L37
 631              	.L38:
  75:../scr/DateUtil.c **** 		tmpT[i] = dt[i];
 632              		.loc 1 75 0 discriminator 3
 633 02be 0F23     		mov	r3, #15
 634 02c0 FB18     		add	r3, r7, r3
 635 02c2 1B78     		ldrb	r3, [r3]
 636 02c4 0F22     		mov	r2, #15
 637 02c6 BA18     		add	r2, r7, r2
 638 02c8 1278     		ldrb	r2, [r2]
 639 02ca 7968     		ldr	r1, [r7, #4]
 640 02cc 8A18     		add	r2, r1, r2
 641 02ce 1178     		ldrb	r1, [r2]
 642 02d0 0C22     		mov	r2, #12
 643 02d2 BA18     		add	r2, r7, r2
 644 02d4 D154     		strb	r1, [r2, r3]
  74:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 645              		.loc 1 74 0 discriminator 3
 646 02d6 0F23     		mov	r3, #15
 647 02d8 FB18     		add	r3, r7, r3
 648 02da 1A78     		ldrb	r2, [r3]
 649 02dc 0F23     		mov	r3, #15
 650 02de FB18     		add	r3, r7, r3
 651 02e0 0132     		add	r2, r2, #1
 652 02e2 1A70     		strb	r2, [r3]
 653              	.L37:
  74:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 654              		.loc 1 74 0 is_stmt 0 discriminator 1
 655 02e4 0F23     		mov	r3, #15
 656 02e6 FB18     		add	r3, r7, r3
 657 02e8 1B78     		ldrb	r3, [r3]
 658 02ea 012B     		cmp	r3, #1
 659 02ec E7D9     		bls	.L38
 660              	.LBE6:
  76:../scr/DateUtil.c **** 	}
  77:../scr/DateUtil.c **** 	return a_to_i(tmpT, 2);
 661              		.loc 1 77 0 is_stmt 1
 662 02ee 0C23     		mov	r3, #12
 663 02f0 FB18     		add	r3, r7, r3
 664 02f2 181C     		mov	r0, r3
 665 02f4 0221     		mov	r1, #2
 666 02f6 FFF7FEFF 		bl	a_to_i
 667 02fa 031C     		mov	r3, r0
  78:../scr/DateUtil.c **** }
 668              		.loc 1 78 0
 669 02fc 181C     		mov	r0, r3
 670 02fe BD46     		mov	sp, r7
 671 0300 04B0     		add	sp, sp, #16
 672              		@ sp needed
 673 0302 80BD     		pop	{r7, pc}
 674              		.cfi_endproc
 675              	.LFE7:
 677              		.align	2
 678              		.global	getMon
 679              		.code	16
 680              		.thumb_func
 682              	getMon:
 683              	.LFB8:
  79:../scr/DateUtil.c **** 
  80:../scr/DateUtil.c **** int getMon(char* dt) {
 684              		.loc 1 80 0
 685              		.cfi_startproc
 686 0304 80B5     		push	{r7, lr}
 687              	.LCFI24:
 688              		.cfi_def_cfa_offset 8
 689              		.cfi_offset 7, -8
 690              		.cfi_offset 14, -4
 691 0306 84B0     		sub	sp, sp, #16
 692              	.LCFI25:
 693              		.cfi_def_cfa_offset 24
 694 0308 00AF     		add	r7, sp, #0
 695              	.LCFI26:
 696              		.cfi_def_cfa_register 7
 697 030a 7860     		str	r0, [r7, #4]
  81:../scr/DateUtil.c **** 	char tmpT[2] = {0};
 698              		.loc 1 81 0
 699 030c 0C23     		mov	r3, #12
 700 030e FB18     		add	r3, r7, r3
 701 0310 0022     		mov	r2, #0
 702 0312 1A80     		strh	r2, [r3]
 703              	.LBB7:
  82:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 704              		.loc 1 82 0
 705 0314 0F23     		mov	r3, #15
 706 0316 FB18     		add	r3, r7, r3
 707 0318 0022     		mov	r2, #0
 708 031a 1A70     		strb	r2, [r3]
 709 031c 13E0     		b	.L41
 710              	.L42:
  83:../scr/DateUtil.c **** 		tmpT[i] = dt[i+3];
 711              		.loc 1 83 0 discriminator 3
 712 031e 0F23     		mov	r3, #15
 713 0320 FB18     		add	r3, r7, r3
 714 0322 1B78     		ldrb	r3, [r3]
 715 0324 0F22     		mov	r2, #15
 716 0326 BA18     		add	r2, r7, r2
 717 0328 1278     		ldrb	r2, [r2]
 718 032a 0332     		add	r2, r2, #3
 719 032c 7968     		ldr	r1, [r7, #4]
 720 032e 8A18     		add	r2, r1, r2
 721 0330 1178     		ldrb	r1, [r2]
 722 0332 0C22     		mov	r2, #12
 723 0334 BA18     		add	r2, r7, r2
 724 0336 D154     		strb	r1, [r2, r3]
  82:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 725              		.loc 1 82 0 discriminator 3
 726 0338 0F23     		mov	r3, #15
 727 033a FB18     		add	r3, r7, r3
 728 033c 1A78     		ldrb	r2, [r3]
 729 033e 0F23     		mov	r3, #15
 730 0340 FB18     		add	r3, r7, r3
 731 0342 0132     		add	r2, r2, #1
 732 0344 1A70     		strb	r2, [r3]
 733              	.L41:
  82:../scr/DateUtil.c **** 	for(char i = 0; i<2; i++) {
 734              		.loc 1 82 0 is_stmt 0 discriminator 1
 735 0346 0F23     		mov	r3, #15
 736 0348 FB18     		add	r3, r7, r3
 737 034a 1B78     		ldrb	r3, [r3]
 738 034c 012B     		cmp	r3, #1
 739 034e E6D9     		bls	.L42
 740              	.LBE7:
  84:../scr/DateUtil.c **** 	}
  85:../scr/DateUtil.c **** 	return a_to_i(tmpT, 2);
 741              		.loc 1 85 0 is_stmt 1
 742 0350 0C23     		mov	r3, #12
 743 0352 FB18     		add	r3, r7, r3
 744 0354 181C     		mov	r0, r3
 745 0356 0221     		mov	r1, #2
 746 0358 FFF7FEFF 		bl	a_to_i
 747 035c 031C     		mov	r3, r0
  86:../scr/DateUtil.c **** }
 748              		.loc 1 86 0
 749 035e 181C     		mov	r0, r3
 750 0360 BD46     		mov	sp, r7
 751 0362 04B0     		add	sp, sp, #16
 752              		@ sp needed
 753 0364 80BD     		pop	{r7, pc}
 754              		.cfi_endproc
 755              	.LFE8:
 757 0366 C046     		.align	2
 758              		.global	getYear
 759              		.code	16
 760              		.thumb_func
 762              	getYear:
 763              	.LFB9:
  87:../scr/DateUtil.c **** 
  88:../scr/DateUtil.c **** int getYear(char* dt) {
 764              		.loc 1 88 0
 765              		.cfi_startproc
 766 0368 80B5     		push	{r7, lr}
 767              	.LCFI27:
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 7, -8
 770              		.cfi_offset 14, -4
 771 036a 84B0     		sub	sp, sp, #16
 772              	.LCFI28:
 773              		.cfi_def_cfa_offset 24
 774 036c 00AF     		add	r7, sp, #0
 775              	.LCFI29:
 776              		.cfi_def_cfa_register 7
 777 036e 7860     		str	r0, [r7, #4]
  89:../scr/DateUtil.c **** 	char tmpT[4] = {0};
 778              		.loc 1 89 0
 779 0370 0823     		mov	r3, #8
 780 0372 FB18     		add	r3, r7, r3
 781 0374 0022     		mov	r2, #0
 782 0376 1A60     		str	r2, [r3]
 783              	.LBB8:
  90:../scr/DateUtil.c **** 	for(char i = 0; i<4; i++) {
 784              		.loc 1 90 0
 785 0378 0F23     		mov	r3, #15
 786 037a FB18     		add	r3, r7, r3
 787 037c 0022     		mov	r2, #0
 788 037e 1A70     		strb	r2, [r3]
 789 0380 13E0     		b	.L45
 790              	.L46:
  91:../scr/DateUtil.c **** 		tmpT[i] = dt[i+6];
 791              		.loc 1 91 0 discriminator 3
 792 0382 0F23     		mov	r3, #15
 793 0384 FB18     		add	r3, r7, r3
 794 0386 1B78     		ldrb	r3, [r3]
 795 0388 0F22     		mov	r2, #15
 796 038a BA18     		add	r2, r7, r2
 797 038c 1278     		ldrb	r2, [r2]
 798 038e 0632     		add	r2, r2, #6
 799 0390 7968     		ldr	r1, [r7, #4]
 800 0392 8A18     		add	r2, r1, r2
 801 0394 1178     		ldrb	r1, [r2]
 802 0396 0822     		mov	r2, #8
 803 0398 BA18     		add	r2, r7, r2
 804 039a D154     		strb	r1, [r2, r3]
  90:../scr/DateUtil.c **** 	for(char i = 0; i<4; i++) {
 805              		.loc 1 90 0 discriminator 3
 806 039c 0F23     		mov	r3, #15
 807 039e FB18     		add	r3, r7, r3
 808 03a0 1A78     		ldrb	r2, [r3]
 809 03a2 0F23     		mov	r3, #15
 810 03a4 FB18     		add	r3, r7, r3
 811 03a6 0132     		add	r2, r2, #1
 812 03a8 1A70     		strb	r2, [r3]
 813              	.L45:
  90:../scr/DateUtil.c **** 	for(char i = 0; i<4; i++) {
 814              		.loc 1 90 0 is_stmt 0 discriminator 1
 815 03aa 0F23     		mov	r3, #15
 816 03ac FB18     		add	r3, r7, r3
 817 03ae 1B78     		ldrb	r3, [r3]
 818 03b0 032B     		cmp	r3, #3
 819 03b2 E6D9     		bls	.L46
 820              	.LBE8:
  92:../scr/DateUtil.c **** 	}
  93:../scr/DateUtil.c **** 	return a_to_i(tmpT, 4);
 821              		.loc 1 93 0 is_stmt 1
 822 03b4 0823     		mov	r3, #8
 823 03b6 FB18     		add	r3, r7, r3
 824 03b8 181C     		mov	r0, r3
 825 03ba 0421     		mov	r1, #4
 826 03bc FFF7FEFF 		bl	a_to_i
 827 03c0 031C     		mov	r3, r0
  94:../scr/DateUtil.c **** }
 828              		.loc 1 94 0
 829 03c2 181C     		mov	r0, r3
 830 03c4 BD46     		mov	sp, r7
 831 03c6 04B0     		add	sp, sp, #16
 832              		@ sp needed
 833 03c8 80BD     		pop	{r7, pc}
 834              		.cfi_endproc
 835              	.LFE9:
 837 03ca C046     		.align	2
 838              		.global	istruedate
 839              		.code	16
 840              		.thumb_func
 842              	istruedate:
 843              	.LFB10:
  95:../scr/DateUtil.c **** 
  96:../scr/DateUtil.c **** char istruedate(char* dt) {
 844              		.loc 1 96 0
 845              		.cfi_startproc
 846 03cc B0B5     		push	{r4, r5, r7, lr}
 847              	.LCFI30:
 848              		.cfi_def_cfa_offset 16
 849              		.cfi_offset 4, -16
 850              		.cfi_offset 5, -12
 851              		.cfi_offset 7, -8
 852              		.cfi_offset 14, -4
 853 03ce 84B0     		sub	sp, sp, #16
 854              	.LCFI31:
 855              		.cfi_def_cfa_offset 32
 856 03d0 00AF     		add	r7, sp, #0
 857              	.LCFI32:
 858              		.cfi_def_cfa_register 7
 859 03d2 7860     		str	r0, [r7, #4]
 860              	.LBB9:
  97:../scr/DateUtil.c **** 	for(char i = 0; i < 10; i++) {
 861              		.loc 1 97 0
 862 03d4 0F23     		mov	r3, #15
 863 03d6 FB18     		add	r3, r7, r3
 864 03d8 0022     		mov	r2, #0
 865 03da 1A70     		strb	r2, [r3]
 866 03dc 10E0     		b	.L49
 867              	.L52:
  98:../scr/DateUtil.c **** 		if(dt[i] == '_') {
 868              		.loc 1 98 0
 869 03de 0F23     		mov	r3, #15
 870 03e0 FB18     		add	r3, r7, r3
 871 03e2 1B78     		ldrb	r3, [r3]
 872 03e4 7A68     		ldr	r2, [r7, #4]
 873 03e6 D318     		add	r3, r2, r3
 874 03e8 1B78     		ldrb	r3, [r3]
 875 03ea 5F2B     		cmp	r3, #95
 876 03ec 01D1     		bne	.L50
  99:../scr/DateUtil.c **** 			return 0;
 877              		.loc 1 99 0
 878 03ee 0023     		mov	r3, #0
 879 03f0 20E0     		b	.L51
 880              	.L50:
  97:../scr/DateUtil.c **** 	for(char i = 0; i < 10; i++) {
 881              		.loc 1 97 0 discriminator 2
 882 03f2 0F23     		mov	r3, #15
 883 03f4 FB18     		add	r3, r7, r3
 884 03f6 1A78     		ldrb	r2, [r3]
 885 03f8 0F23     		mov	r3, #15
 886 03fa FB18     		add	r3, r7, r3
 887 03fc 0132     		add	r2, r2, #1
 888 03fe 1A70     		strb	r2, [r3]
 889              	.L49:
  97:../scr/DateUtil.c **** 	for(char i = 0; i < 10; i++) {
 890              		.loc 1 97 0 is_stmt 0 discriminator 1
 891 0400 0F23     		mov	r3, #15
 892 0402 FB18     		add	r3, r7, r3
 893 0404 1B78     		ldrb	r3, [r3]
 894 0406 092B     		cmp	r3, #9
 895 0408 E9D9     		bls	.L52
 896              	.LBE9:
 100:../scr/DateUtil.c **** 		}
 101:../scr/DateUtil.c **** 	}	
 102:../scr/DateUtil.c **** 	return truedate(getDay(dt), getMon(dt), getYear(dt));
 897              		.loc 1 102 0 is_stmt 1
 898 040a 7B68     		ldr	r3, [r7, #4]
 899 040c 181C     		mov	r0, r3
 900 040e FFF7FEFF 		bl	getDay
 901 0412 051C     		mov	r5, r0
 902 0414 7B68     		ldr	r3, [r7, #4]
 903 0416 181C     		mov	r0, r3
 904 0418 FFF7FEFF 		bl	getMon
 905 041c 041C     		mov	r4, r0
 906 041e 7B68     		ldr	r3, [r7, #4]
 907 0420 181C     		mov	r0, r3
 908 0422 FFF7FEFF 		bl	getYear
 909 0426 031C     		mov	r3, r0
 910 0428 281C     		mov	r0, r5
 911 042a 211C     		mov	r1, r4
 912 042c 1A1C     		mov	r2, r3
 913 042e FFF7FEFF 		bl	truedate
 914 0432 031C     		mov	r3, r0
 915              	.L51:
 103:../scr/DateUtil.c **** }
 916              		.loc 1 103 0
 917 0434 181C     		mov	r0, r3
 918 0436 BD46     		mov	sp, r7
 919 0438 04B0     		add	sp, sp, #16
 920              		@ sp needed
 921 043a B0BD     		pop	{r4, r5, r7, pc}
 922              		.cfi_endproc
 923              	.LFE10:
 925              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 DateUtil.c
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:18     .text:00000000 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:23     .text:00000000 isleapyear
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:78     .rodata:00000000 $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:99     .text:0000003c truedate
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:195    .text:000000bc $d
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:200    .text:000000c4 $t
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:205    .text:000000c4 truetime
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:276    .text:0000010c getHour
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:355    .text:0000016c getMinute
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:435    .text:000001d0 getSecond
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:515    .text:00000234 istruetime
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:603    .text:000002a4 getDay
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:682    .text:00000304 getMon
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:762    .text:00000368 getYear
C:\Users\ADMINI~1\AppData\Local\Temp\ccgPeVPZ.s:842    .text:000003cc istruedate
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.38f3ce5416ddc4c94340ac14f0421ae0
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.stddef.h.184.159df79b4ca79c76561572a55985524c
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.stddef.h.39.7e3d906ac58942e0b374c527445f5de5
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.types.h.24.b2be5f53932a9c9d07787288b29b6d75
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.82.82b71f3f44c70e3a459d0f66642b05eb
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.68.ff6d7571d3ad75c55f15e26dbaa81e35
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c

UNDEFINED SYMBOLS
__aeabi_idivmod
memcpy
a_to_i
