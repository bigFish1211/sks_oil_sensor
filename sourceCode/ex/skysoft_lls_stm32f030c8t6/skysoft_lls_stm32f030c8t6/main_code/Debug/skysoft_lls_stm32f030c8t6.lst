
skysoft_lls_stm32f030c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08002800  08002800  00002800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bec  080028c0  080028c0  000028c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  0800a4ac  0800a4ac  0000a4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  0800a4b0  0800a4b0  0000a4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000518  200000c0  0800a4b4  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000fac  200005d8  0800a9d0  000105d8  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  20001584  0800b97c  000105d8  2**0
                  ALLOC
  7 .ARM.attributes 0000002f  00000000  00000000  000105d8  2**0
                  CONTENTS, READONLY
  8 .RAMVectorTable 000000c0  20000000  20000000  00018000  2**2
                  ALLOC
  9 .debug_info   0000e2d9  00000000  00000000  00010607  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000305a  00000000  00000000  0001e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008c42  00000000  00000000  0002193a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001130  00000000  00000000  0002a580  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001290  00000000  00000000  0002b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f209  00000000  00000000  0002c940  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macinfo 007753bc  00000000  00000000  0003bb49  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004b68  00000000  00000000  007b0f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      00000030  00000000  00000000  007b5a6d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003574  00000000  00000000  007b5aa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080028c0 <__do_global_dtors_aux>:
 80028c0:	b510      	push	{r4, lr}
 80028c2:	4c06      	ldr	r4, [pc, #24]	; (80028dc <__do_global_dtors_aux+0x1c>)
 80028c4:	7823      	ldrb	r3, [r4, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d107      	bne.n	80028da <__do_global_dtors_aux+0x1a>
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <__do_global_dtors_aux+0x20>)
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d002      	beq.n	80028d6 <__do_global_dtors_aux+0x16>
 80028d0:	4804      	ldr	r0, [pc, #16]	; (80028e4 <__do_global_dtors_aux+0x24>)
 80028d2:	e000      	b.n	80028d6 <__do_global_dtors_aux+0x16>
 80028d4:	bf00      	nop
 80028d6:	2101      	movs	r1, #1
 80028d8:	7021      	strb	r1, [r4, #0]
 80028da:	bd10      	pop	{r4, pc}
 80028dc:	200005d8 	.word	0x200005d8
 80028e0:	00000000 	.word	0x00000000
 80028e4:	0800a494 	.word	0x0800a494

080028e8 <frame_dummy>:
 80028e8:	b508      	push	{r3, lr}
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <frame_dummy+0x24>)
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <frame_dummy+0x10>
 80028f0:	4807      	ldr	r0, [pc, #28]	; (8002910 <frame_dummy+0x28>)
 80028f2:	4908      	ldr	r1, [pc, #32]	; (8002914 <frame_dummy+0x2c>)
 80028f4:	e000      	b.n	80028f8 <frame_dummy+0x10>
 80028f6:	bf00      	nop
 80028f8:	4807      	ldr	r0, [pc, #28]	; (8002918 <frame_dummy+0x30>)
 80028fa:	6801      	ldr	r1, [r0, #0]
 80028fc:	2900      	cmp	r1, #0
 80028fe:	d003      	beq.n	8002908 <frame_dummy+0x20>
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <frame_dummy+0x34>)
 8002902:	2b00      	cmp	r3, #0
 8002904:	d000      	beq.n	8002908 <frame_dummy+0x20>
 8002906:	4798      	blx	r3
 8002908:	bd08      	pop	{r3, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	00000000 	.word	0x00000000
 8002910:	0800a494 	.word	0x0800a494
 8002914:	200005dc 	.word	0x200005dc
 8002918:	200005d8 	.word	0x200005d8
 800291c:	00000000 	.word	0x00000000

08002920 <atan>:
 8002920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002922:	4647      	mov	r7, r8
 8002924:	b480      	push	{r7}
 8002926:	4bbe      	ldr	r3, [pc, #760]	; (8002c20 <atan+0x300>)
 8002928:	004c      	lsls	r4, r1, #1
 800292a:	b084      	sub	sp, #16
 800292c:	1c05      	adds	r5, r0, #0
 800292e:	1c0e      	adds	r6, r1, #0
 8002930:	4688      	mov	r8, r1
 8002932:	0864      	lsrs	r4, r4, #1
 8002934:	429c      	cmp	r4, r3
 8002936:	dd0f      	ble.n	8002958 <atan+0x38>
 8002938:	4bba      	ldr	r3, [pc, #744]	; (8002c24 <atan+0x304>)
 800293a:	429c      	cmp	r4, r3
 800293c:	dd00      	ble.n	8002940 <atan+0x20>
 800293e:	e0a0      	b.n	8002a82 <atan+0x162>
 8002940:	49b9      	ldr	r1, [pc, #740]	; (8002c28 <atan+0x308>)
 8002942:	1864      	adds	r4, r4, r1
 8002944:	2c00      	cmp	r4, #0
 8002946:	d100      	bne.n	800294a <atan+0x2a>
 8002948:	e098      	b.n	8002a7c <atan+0x15c>
 800294a:	4643      	mov	r3, r8
 800294c:	4db7      	ldr	r5, [pc, #732]	; (8002c2c <atan+0x30c>)
 800294e:	2b00      	cmp	r3, #0
 8002950:	dc00      	bgt.n	8002954 <atan+0x34>
 8002952:	e102      	b.n	8002b5a <atan+0x23a>
 8002954:	4eb6      	ldr	r6, [pc, #728]	; (8002c30 <atan+0x310>)
 8002956:	e09c      	b.n	8002a92 <atan+0x172>
 8002958:	4bb6      	ldr	r3, [pc, #728]	; (8002c34 <atan+0x314>)
 800295a:	429c      	cmp	r4, r3
 800295c:	dd00      	ble.n	8002960 <atan+0x40>
 800295e:	e0aa      	b.n	8002ab6 <atan+0x196>
 8002960:	4bb5      	ldr	r3, [pc, #724]	; (8002c38 <atan+0x318>)
 8002962:	429c      	cmp	r4, r3
 8002964:	dc00      	bgt.n	8002968 <atan+0x48>
 8002966:	e09a      	b.n	8002a9e <atan+0x17e>
 8002968:	2401      	movs	r4, #1
 800296a:	4264      	negs	r4, r4
 800296c:	1c2a      	adds	r2, r5, #0
 800296e:	1c33      	adds	r3, r6, #0
 8002970:	1c28      	adds	r0, r5, #0
 8002972:	1c31      	adds	r1, r6, #0
 8002974:	f002 faf2 	bl	8004f5c <__aeabi_dmul>
 8002978:	1c02      	adds	r2, r0, #0
 800297a:	1c0b      	adds	r3, r1, #0
 800297c:	9002      	str	r0, [sp, #8]
 800297e:	9103      	str	r1, [sp, #12]
 8002980:	f002 faec 	bl	8004f5c <__aeabi_dmul>
 8002984:	4b87      	ldr	r3, [pc, #540]	; (8002ba4 <atan+0x284>)
 8002986:	4a86      	ldr	r2, [pc, #536]	; (8002ba0 <atan+0x280>)
 8002988:	9000      	str	r0, [sp, #0]
 800298a:	9101      	str	r1, [sp, #4]
 800298c:	f002 fae6 	bl	8004f5c <__aeabi_dmul>
 8002990:	4a85      	ldr	r2, [pc, #532]	; (8002ba8 <atan+0x288>)
 8002992:	4b86      	ldr	r3, [pc, #536]	; (8002bac <atan+0x28c>)
 8002994:	f001 fb76 	bl	8004084 <__aeabi_dadd>
 8002998:	9a00      	ldr	r2, [sp, #0]
 800299a:	9b01      	ldr	r3, [sp, #4]
 800299c:	f002 fade 	bl	8004f5c <__aeabi_dmul>
 80029a0:	4a83      	ldr	r2, [pc, #524]	; (8002bb0 <atan+0x290>)
 80029a2:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <atan+0x294>)
 80029a4:	f001 fb6e 	bl	8004084 <__aeabi_dadd>
 80029a8:	9a00      	ldr	r2, [sp, #0]
 80029aa:	9b01      	ldr	r3, [sp, #4]
 80029ac:	f002 fad6 	bl	8004f5c <__aeabi_dmul>
 80029b0:	4a81      	ldr	r2, [pc, #516]	; (8002bb8 <atan+0x298>)
 80029b2:	4b82      	ldr	r3, [pc, #520]	; (8002bbc <atan+0x29c>)
 80029b4:	f001 fb66 	bl	8004084 <__aeabi_dadd>
 80029b8:	9a00      	ldr	r2, [sp, #0]
 80029ba:	9b01      	ldr	r3, [sp, #4]
 80029bc:	f002 face 	bl	8004f5c <__aeabi_dmul>
 80029c0:	4a7f      	ldr	r2, [pc, #508]	; (8002bc0 <atan+0x2a0>)
 80029c2:	4b80      	ldr	r3, [pc, #512]	; (8002bc4 <atan+0x2a4>)
 80029c4:	f001 fb5e 	bl	8004084 <__aeabi_dadd>
 80029c8:	9a00      	ldr	r2, [sp, #0]
 80029ca:	9b01      	ldr	r3, [sp, #4]
 80029cc:	f002 fac6 	bl	8004f5c <__aeabi_dmul>
 80029d0:	4a7d      	ldr	r2, [pc, #500]	; (8002bc8 <atan+0x2a8>)
 80029d2:	4b7e      	ldr	r3, [pc, #504]	; (8002bcc <atan+0x2ac>)
 80029d4:	f001 fb56 	bl	8004084 <__aeabi_dadd>
 80029d8:	9a02      	ldr	r2, [sp, #8]
 80029da:	9b03      	ldr	r3, [sp, #12]
 80029dc:	f002 fabe 	bl	8004f5c <__aeabi_dmul>
 80029e0:	4a7b      	ldr	r2, [pc, #492]	; (8002bd0 <atan+0x2b0>)
 80029e2:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <atan+0x2b4>)
 80029e4:	9002      	str	r0, [sp, #8]
 80029e6:	9103      	str	r1, [sp, #12]
 80029e8:	9800      	ldr	r0, [sp, #0]
 80029ea:	9901      	ldr	r1, [sp, #4]
 80029ec:	f002 fab6 	bl	8004f5c <__aeabi_dmul>
 80029f0:	4a79      	ldr	r2, [pc, #484]	; (8002bd8 <atan+0x2b8>)
 80029f2:	4b7a      	ldr	r3, [pc, #488]	; (8002bdc <atan+0x2bc>)
 80029f4:	f002 fcfc 	bl	80053f0 <__aeabi_dsub>
 80029f8:	9a00      	ldr	r2, [sp, #0]
 80029fa:	9b01      	ldr	r3, [sp, #4]
 80029fc:	f002 faae 	bl	8004f5c <__aeabi_dmul>
 8002a00:	4a77      	ldr	r2, [pc, #476]	; (8002be0 <atan+0x2c0>)
 8002a02:	4b78      	ldr	r3, [pc, #480]	; (8002be4 <atan+0x2c4>)
 8002a04:	f002 fcf4 	bl	80053f0 <__aeabi_dsub>
 8002a08:	9a00      	ldr	r2, [sp, #0]
 8002a0a:	9b01      	ldr	r3, [sp, #4]
 8002a0c:	f002 faa6 	bl	8004f5c <__aeabi_dmul>
 8002a10:	4a75      	ldr	r2, [pc, #468]	; (8002be8 <atan+0x2c8>)
 8002a12:	4b76      	ldr	r3, [pc, #472]	; (8002bec <atan+0x2cc>)
 8002a14:	f002 fcec 	bl	80053f0 <__aeabi_dsub>
 8002a18:	9a00      	ldr	r2, [sp, #0]
 8002a1a:	9b01      	ldr	r3, [sp, #4]
 8002a1c:	f002 fa9e 	bl	8004f5c <__aeabi_dmul>
 8002a20:	4a73      	ldr	r2, [pc, #460]	; (8002bf0 <atan+0x2d0>)
 8002a22:	4b74      	ldr	r3, [pc, #464]	; (8002bf4 <atan+0x2d4>)
 8002a24:	f002 fce4 	bl	80053f0 <__aeabi_dsub>
 8002a28:	9a00      	ldr	r2, [sp, #0]
 8002a2a:	9b01      	ldr	r3, [sp, #4]
 8002a2c:	f002 fa96 	bl	8004f5c <__aeabi_dmul>
 8002a30:	1c02      	adds	r2, r0, #0
 8002a32:	1c0b      	adds	r3, r1, #0
 8002a34:	1c61      	adds	r1, r4, #1
 8002a36:	d062      	beq.n	8002afe <atan+0x1de>
 8002a38:	4980      	ldr	r1, [pc, #512]	; (8002c3c <atan+0x31c>)
 8002a3a:	00e4      	lsls	r4, r4, #3
 8002a3c:	190c      	adds	r4, r1, r4
 8002a3e:	9802      	ldr	r0, [sp, #8]
 8002a40:	9903      	ldr	r1, [sp, #12]
 8002a42:	f001 fb1f 	bl	8004084 <__aeabi_dadd>
 8002a46:	1c2a      	adds	r2, r5, #0
 8002a48:	1c33      	adds	r3, r6, #0
 8002a4a:	f002 fa87 	bl	8004f5c <__aeabi_dmul>
 8002a4e:	6a22      	ldr	r2, [r4, #32]
 8002a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a52:	f002 fccd 	bl	80053f0 <__aeabi_dsub>
 8002a56:	1c2a      	adds	r2, r5, #0
 8002a58:	1c33      	adds	r3, r6, #0
 8002a5a:	f002 fcc9 	bl	80053f0 <__aeabi_dsub>
 8002a5e:	1c0b      	adds	r3, r1, #0
 8002a60:	1c02      	adds	r2, r0, #0
 8002a62:	6820      	ldr	r0, [r4, #0]
 8002a64:	6861      	ldr	r1, [r4, #4]
 8002a66:	f002 fcc3 	bl	80053f0 <__aeabi_dsub>
 8002a6a:	4643      	mov	r3, r8
 8002a6c:	1c05      	adds	r5, r0, #0
 8002a6e:	1c0e      	adds	r6, r1, #0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	da0e      	bge.n	8002a92 <atan+0x172>
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	0609      	lsls	r1, r1, #24
 8002a78:	1876      	adds	r6, r6, r1
 8002a7a:	e00a      	b.n	8002a92 <atan+0x172>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d100      	bne.n	8002a82 <atan+0x162>
 8002a80:	e763      	b.n	800294a <atan+0x2a>
 8002a82:	1c28      	adds	r0, r5, #0
 8002a84:	1c31      	adds	r1, r6, #0
 8002a86:	1c2a      	adds	r2, r5, #0
 8002a88:	1c33      	adds	r3, r6, #0
 8002a8a:	f001 fafb 	bl	8004084 <__aeabi_dadd>
 8002a8e:	1c05      	adds	r5, r0, #0
 8002a90:	1c0e      	adds	r6, r1, #0
 8002a92:	1c28      	adds	r0, r5, #0
 8002a94:	1c31      	adds	r1, r6, #0
 8002a96:	b004      	add	sp, #16
 8002a98:	bc04      	pop	{r2}
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a9e:	4a56      	ldr	r2, [pc, #344]	; (8002bf8 <atan+0x2d8>)
 8002aa0:	4b56      	ldr	r3, [pc, #344]	; (8002bfc <atan+0x2dc>)
 8002aa2:	f001 faef 	bl	8004084 <__aeabi_dadd>
 8002aa6:	4a56      	ldr	r2, [pc, #344]	; (8002c00 <atan+0x2e0>)
 8002aa8:	4b56      	ldr	r3, [pc, #344]	; (8002c04 <atan+0x2e4>)
 8002aaa:	f000 fc27 	bl	80032fc <__aeabi_dcmpgt>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d100      	bne.n	8002ab4 <atan+0x194>
 8002ab2:	e759      	b.n	8002968 <atan+0x48>
 8002ab4:	e7ed      	b.n	8002a92 <atan+0x172>
 8002ab6:	f000 f8cb 	bl	8002c50 <fabs>
 8002aba:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <atan+0x320>)
 8002abc:	1c06      	adds	r6, r0, #0
 8002abe:	1c0f      	adds	r7, r1, #0
 8002ac0:	429c      	cmp	r4, r3
 8002ac2:	dc2d      	bgt.n	8002b20 <atan+0x200>
 8002ac4:	4b5f      	ldr	r3, [pc, #380]	; (8002c44 <atan+0x324>)
 8002ac6:	429c      	cmp	r4, r3
 8002ac8:	dc53      	bgt.n	8002b72 <atan+0x252>
 8002aca:	1c32      	adds	r2, r6, #0
 8002acc:	1c3b      	adds	r3, r7, #0
 8002ace:	f001 fad9 	bl	8004084 <__aeabi_dadd>
 8002ad2:	4a4b      	ldr	r2, [pc, #300]	; (8002c00 <atan+0x2e0>)
 8002ad4:	4b4b      	ldr	r3, [pc, #300]	; (8002c04 <atan+0x2e4>)
 8002ad6:	f002 fc8b 	bl	80053f0 <__aeabi_dsub>
 8002ada:	4a4b      	ldr	r2, [pc, #300]	; (8002c08 <atan+0x2e8>)
 8002adc:	4b4b      	ldr	r3, [pc, #300]	; (8002c0c <atan+0x2ec>)
 8002ade:	1c04      	adds	r4, r0, #0
 8002ae0:	1c0d      	adds	r5, r1, #0
 8002ae2:	1c30      	adds	r0, r6, #0
 8002ae4:	1c39      	adds	r1, r7, #0
 8002ae6:	f001 facd 	bl	8004084 <__aeabi_dadd>
 8002aea:	1c02      	adds	r2, r0, #0
 8002aec:	1c0b      	adds	r3, r1, #0
 8002aee:	1c20      	adds	r0, r4, #0
 8002af0:	1c29      	adds	r1, r5, #0
 8002af2:	f001 fe35 	bl	8004760 <__aeabi_ddiv>
 8002af6:	2400      	movs	r4, #0
 8002af8:	1c05      	adds	r5, r0, #0
 8002afa:	1c0e      	adds	r6, r1, #0
 8002afc:	e736      	b.n	800296c <atan+0x4c>
 8002afe:	9802      	ldr	r0, [sp, #8]
 8002b00:	9903      	ldr	r1, [sp, #12]
 8002b02:	f001 fabf 	bl	8004084 <__aeabi_dadd>
 8002b06:	1c2a      	adds	r2, r5, #0
 8002b08:	1c33      	adds	r3, r6, #0
 8002b0a:	f002 fa27 	bl	8004f5c <__aeabi_dmul>
 8002b0e:	1c02      	adds	r2, r0, #0
 8002b10:	1c0b      	adds	r3, r1, #0
 8002b12:	1c28      	adds	r0, r5, #0
 8002b14:	1c31      	adds	r1, r6, #0
 8002b16:	f002 fc6b 	bl	80053f0 <__aeabi_dsub>
 8002b1a:	1c05      	adds	r5, r0, #0
 8002b1c:	1c0e      	adds	r6, r1, #0
 8002b1e:	e7b8      	b.n	8002a92 <atan+0x172>
 8002b20:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <atan+0x328>)
 8002b22:	429c      	cmp	r4, r3
 8002b24:	dc1b      	bgt.n	8002b5e <atan+0x23e>
 8002b26:	4a3a      	ldr	r2, [pc, #232]	; (8002c10 <atan+0x2f0>)
 8002b28:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <atan+0x2f4>)
 8002b2a:	f002 fc61 	bl	80053f0 <__aeabi_dsub>
 8002b2e:	4a38      	ldr	r2, [pc, #224]	; (8002c10 <atan+0x2f0>)
 8002b30:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <atan+0x2f4>)
 8002b32:	1c04      	adds	r4, r0, #0
 8002b34:	1c0d      	adds	r5, r1, #0
 8002b36:	1c30      	adds	r0, r6, #0
 8002b38:	1c39      	adds	r1, r7, #0
 8002b3a:	f002 fa0f 	bl	8004f5c <__aeabi_dmul>
 8002b3e:	4a30      	ldr	r2, [pc, #192]	; (8002c00 <atan+0x2e0>)
 8002b40:	4b30      	ldr	r3, [pc, #192]	; (8002c04 <atan+0x2e4>)
 8002b42:	f001 fa9f 	bl	8004084 <__aeabi_dadd>
 8002b46:	1c02      	adds	r2, r0, #0
 8002b48:	1c0b      	adds	r3, r1, #0
 8002b4a:	1c20      	adds	r0, r4, #0
 8002b4c:	1c29      	adds	r1, r5, #0
 8002b4e:	f001 fe07 	bl	8004760 <__aeabi_ddiv>
 8002b52:	2402      	movs	r4, #2
 8002b54:	1c05      	adds	r5, r0, #0
 8002b56:	1c0e      	adds	r6, r1, #0
 8002b58:	e708      	b.n	800296c <atan+0x4c>
 8002b5a:	4e3c      	ldr	r6, [pc, #240]	; (8002c4c <atan+0x32c>)
 8002b5c:	e799      	b.n	8002a92 <atan+0x172>
 8002b5e:	1c32      	adds	r2, r6, #0
 8002b60:	482d      	ldr	r0, [pc, #180]	; (8002c18 <atan+0x2f8>)
 8002b62:	492e      	ldr	r1, [pc, #184]	; (8002c1c <atan+0x2fc>)
 8002b64:	1c3b      	adds	r3, r7, #0
 8002b66:	f001 fdfb 	bl	8004760 <__aeabi_ddiv>
 8002b6a:	2403      	movs	r4, #3
 8002b6c:	1c05      	adds	r5, r0, #0
 8002b6e:	1c0e      	adds	r6, r1, #0
 8002b70:	e6fc      	b.n	800296c <atan+0x4c>
 8002b72:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <atan+0x2e0>)
 8002b74:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <atan+0x2e4>)
 8002b76:	f002 fc3b 	bl	80053f0 <__aeabi_dsub>
 8002b7a:	4a21      	ldr	r2, [pc, #132]	; (8002c00 <atan+0x2e0>)
 8002b7c:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <atan+0x2e4>)
 8002b7e:	1c04      	adds	r4, r0, #0
 8002b80:	1c0d      	adds	r5, r1, #0
 8002b82:	1c30      	adds	r0, r6, #0
 8002b84:	1c39      	adds	r1, r7, #0
 8002b86:	f001 fa7d 	bl	8004084 <__aeabi_dadd>
 8002b8a:	1c02      	adds	r2, r0, #0
 8002b8c:	1c0b      	adds	r3, r1, #0
 8002b8e:	1c20      	adds	r0, r4, #0
 8002b90:	1c29      	adds	r1, r5, #0
 8002b92:	f001 fde5 	bl	8004760 <__aeabi_ddiv>
 8002b96:	2401      	movs	r4, #1
 8002b98:	1c05      	adds	r5, r0, #0
 8002b9a:	1c0e      	adds	r6, r1, #0
 8002b9c:	e6e6      	b.n	800296c <atan+0x4c>
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	e322da11 	.word	0xe322da11
 8002ba4:	3f90ad3a 	.word	0x3f90ad3a
 8002ba8:	24760deb 	.word	0x24760deb
 8002bac:	3fa97b4b 	.word	0x3fa97b4b
 8002bb0:	a0d03d51 	.word	0xa0d03d51
 8002bb4:	3fb10d66 	.word	0x3fb10d66
 8002bb8:	c54c206e 	.word	0xc54c206e
 8002bbc:	3fb745cd 	.word	0x3fb745cd
 8002bc0:	920083ff 	.word	0x920083ff
 8002bc4:	3fc24924 	.word	0x3fc24924
 8002bc8:	5555550d 	.word	0x5555550d
 8002bcc:	3fd55555 	.word	0x3fd55555
 8002bd0:	2c6a6c2f 	.word	0x2c6a6c2f
 8002bd4:	bfa2b444 	.word	0xbfa2b444
 8002bd8:	52defd9a 	.word	0x52defd9a
 8002bdc:	3fadde2d 	.word	0x3fadde2d
 8002be0:	af749a6d 	.word	0xaf749a6d
 8002be4:	3fb3b0f2 	.word	0x3fb3b0f2
 8002be8:	fe231671 	.word	0xfe231671
 8002bec:	3fbc71c6 	.word	0x3fbc71c6
 8002bf0:	9998ebc4 	.word	0x9998ebc4
 8002bf4:	3fc99999 	.word	0x3fc99999
 8002bf8:	8800759c 	.word	0x8800759c
 8002bfc:	7e37e43c 	.word	0x7e37e43c
 8002c00:	00000000 	.word	0x00000000
 8002c04:	3ff00000 	.word	0x3ff00000
 8002c08:	00000000 	.word	0x00000000
 8002c0c:	40000000 	.word	0x40000000
 8002c10:	00000000 	.word	0x00000000
 8002c14:	3ff80000 	.word	0x3ff80000
 8002c18:	00000000 	.word	0x00000000
 8002c1c:	bff00000 	.word	0xbff00000
 8002c20:	440fffff 	.word	0x440fffff
 8002c24:	7ff00000 	.word	0x7ff00000
 8002c28:	80100000 	.word	0x80100000
 8002c2c:	54442d18 	.word	0x54442d18
 8002c30:	3ff921fb 	.word	0x3ff921fb
 8002c34:	3fdbffff 	.word	0x3fdbffff
 8002c38:	3e1fffff 	.word	0x3e1fffff
 8002c3c:	08009ec0 	.word	0x08009ec0
 8002c40:	3ff2ffff 	.word	0x3ff2ffff
 8002c44:	3fe5ffff 	.word	0x3fe5ffff
 8002c48:	40037fff 	.word	0x40037fff
 8002c4c:	bff921fb 	.word	0xbff921fb

08002c50 <fabs>:
 8002c50:	004b      	lsls	r3, r1, #1
 8002c52:	0859      	lsrs	r1, r3, #1
 8002c54:	4770      	bx	lr
 8002c56:	46c0      	nop			; (mov r8, r8)

08002c58 <atan2>:
 8002c58:	b508      	push	{r3, lr}
 8002c5a:	f000 f859 	bl	8002d10 <__ieee754_atan2>
 8002c5e:	bd08      	pop	{r3, pc}

08002c60 <sqrt>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	b08c      	sub	sp, #48	; 0x30
 8002c64:	1c04      	adds	r4, r0, #0
 8002c66:	1c0d      	adds	r5, r1, #0
 8002c68:	f000 f946 	bl	8002ef8 <__ieee754_sqrt>
 8002c6c:	4e26      	ldr	r6, [pc, #152]	; (8002d08 <sqrt+0xa8>)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	56f3      	ldrsb	r3, [r6, r3]
 8002c72:	9000      	str	r0, [sp, #0]
 8002c74:	9101      	str	r1, [sp, #4]
 8002c76:	3301      	adds	r3, #1
 8002c78:	d02f      	beq.n	8002cda <sqrt+0x7a>
 8002c7a:	1c20      	adds	r0, r4, #0
 8002c7c:	1c29      	adds	r1, r5, #0
 8002c7e:	f000 fa11 	bl	80030a4 <__fpclassifyd>
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d029      	beq.n	8002cda <sqrt+0x7a>
 8002c86:	1c20      	adds	r0, r4, #0
 8002c88:	1c29      	adds	r1, r5, #0
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <sqrt+0xa4>)
 8002c8c:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <sqrt+0xa0>)
 8002c8e:	f000 fb21 	bl	80032d4 <__aeabi_dcmplt>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d021      	beq.n	8002cda <sqrt+0x7a>
 8002c96:	2301      	movs	r3, #1
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <sqrt+0xac>)
 8002c9c:	9406      	str	r4, [sp, #24]
 8002c9e:	9507      	str	r5, [sp, #28]
 8002ca0:	9404      	str	r4, [sp, #16]
 8002ca2:	9505      	str	r5, [sp, #20]
 8002ca4:	7834      	ldrb	r4, [r6, #0]
 8002ca6:	9303      	str	r3, [sp, #12]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	930a      	str	r3, [sp, #40]	; 0x28
 8002cac:	2c00      	cmp	r4, #0
 8002cae:	d018      	beq.n	8002ce2 <sqrt+0x82>
 8002cb0:	4914      	ldr	r1, [pc, #80]	; (8002d04 <sqrt+0xa4>)
 8002cb2:	4813      	ldr	r0, [pc, #76]	; (8002d00 <sqrt+0xa0>)
 8002cb4:	1c02      	adds	r2, r0, #0
 8002cb6:	1c0b      	adds	r3, r1, #0
 8002cb8:	f001 fd52 	bl	8004760 <__aeabi_ddiv>
 8002cbc:	9008      	str	r0, [sp, #32]
 8002cbe:	9109      	str	r1, [sp, #36]	; 0x24
 8002cc0:	2c02      	cmp	r4, #2
 8002cc2:	d112      	bne.n	8002cea <sqrt+0x8a>
 8002cc4:	f003 f9f0 	bl	80060a8 <__errno>
 8002cc8:	2321      	movs	r3, #33	; 0x21
 8002cca:	6003      	str	r3, [r0, #0]
 8002ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d111      	bne.n	8002cf6 <sqrt+0x96>
 8002cd2:	9b08      	ldr	r3, [sp, #32]
 8002cd4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	9401      	str	r4, [sp, #4]
 8002cda:	9800      	ldr	r0, [sp, #0]
 8002cdc:	9901      	ldr	r1, [sp, #4]
 8002cde:	b00c      	add	sp, #48	; 0x30
 8002ce0:	bd70      	pop	{r4, r5, r6, pc}
 8002ce2:	4c08      	ldr	r4, [pc, #32]	; (8002d04 <sqrt+0xa4>)
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <sqrt+0xa0>)
 8002ce6:	9308      	str	r3, [sp, #32]
 8002ce8:	9409      	str	r4, [sp, #36]	; 0x24
 8002cea:	a802      	add	r0, sp, #8
 8002cec:	f000 fa20 	bl	8003130 <matherr>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d1eb      	bne.n	8002ccc <sqrt+0x6c>
 8002cf4:	e7e6      	b.n	8002cc4 <sqrt+0x64>
 8002cf6:	f003 f9d7 	bl	80060a8 <__errno>
 8002cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cfc:	6003      	str	r3, [r0, #0]
 8002cfe:	e7e8      	b.n	8002cd2 <sqrt+0x72>
	...
 8002d08:	200000c0 	.word	0x200000c0
 8002d0c:	0800a488 	.word	0x0800a488

08002d10 <__ieee754_atan2>:
 8002d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d12:	465f      	mov	r7, fp
 8002d14:	4656      	mov	r6, sl
 8002d16:	464d      	mov	r5, r9
 8002d18:	4644      	mov	r4, r8
 8002d1a:	b4f0      	push	{r4, r5, r6, r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	9000      	str	r0, [sp, #0]
 8002d20:	9101      	str	r1, [sp, #4]
 8002d22:	005d      	lsls	r5, r3, #1
 8002d24:	9202      	str	r2, [sp, #8]
 8002d26:	9303      	str	r3, [sp, #12]
 8002d28:	1c1f      	adds	r7, r3, #0
 8002d2a:	9b01      	ldr	r3, [sp, #4]
 8002d2c:	4256      	negs	r6, r2
 8002d2e:	469c      	mov	ip, r3
 8002d30:	4316      	orrs	r6, r2
 8002d32:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <__ieee754_atan2+0x1e0>)
 8002d34:	086d      	lsrs	r5, r5, #1
 8002d36:	0ff6      	lsrs	r6, r6, #31
 8002d38:	46ab      	mov	fp, r5
 8002d3a:	9c00      	ldr	r4, [sp, #0]
 8002d3c:	432e      	orrs	r6, r5
 8002d3e:	429e      	cmp	r6, r3
 8002d40:	d842      	bhi.n	8002dc8 <__ieee754_atan2+0xb8>
 8002d42:	4665      	mov	r5, ip
 8002d44:	006e      	lsls	r6, r5, #1
 8002d46:	4265      	negs	r5, r4
 8002d48:	4325      	orrs	r5, r4
 8002d4a:	0876      	lsrs	r6, r6, #1
 8002d4c:	0fed      	lsrs	r5, r5, #31
 8002d4e:	46e0      	mov	r8, ip
 8002d50:	46b2      	mov	sl, r6
 8002d52:	4335      	orrs	r5, r6
 8002d54:	429d      	cmp	r5, r3
 8002d56:	d837      	bhi.n	8002dc8 <__ieee754_atan2+0xb8>
 8002d58:	4e66      	ldr	r6, [pc, #408]	; (8002ef4 <__ieee754_atan2+0x1e4>)
 8002d5a:	19bb      	adds	r3, r7, r6
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	d04b      	beq.n	8002df8 <__ieee754_atan2+0xe8>
 8002d60:	2502      	movs	r5, #2
 8002d62:	17bb      	asrs	r3, r7, #30
 8002d64:	1c2e      	adds	r6, r5, #0
 8002d66:	4645      	mov	r5, r8
 8002d68:	401e      	ands	r6, r3
 8002d6a:	0feb      	lsrs	r3, r5, #31
 8002d6c:	431e      	orrs	r6, r3
 8002d6e:	46b1      	mov	r9, r6
 8002d70:	4656      	mov	r6, sl
 8002d72:	4334      	orrs	r4, r6
 8002d74:	d033      	beq.n	8002dde <__ieee754_atan2+0xce>
 8002d76:	465d      	mov	r5, fp
 8002d78:	432a      	orrs	r2, r5
 8002d7a:	d037      	beq.n	8002dec <__ieee754_atan2+0xdc>
 8002d7c:	4b5c      	ldr	r3, [pc, #368]	; (8002ef0 <__ieee754_atan2+0x1e0>)
 8002d7e:	459b      	cmp	fp, r3
 8002d80:	d048      	beq.n	8002e14 <__ieee754_atan2+0x104>
 8002d82:	4b5b      	ldr	r3, [pc, #364]	; (8002ef0 <__ieee754_atan2+0x1e0>)
 8002d84:	459a      	cmp	sl, r3
 8002d86:	d031      	beq.n	8002dec <__ieee754_atan2+0xdc>
 8002d88:	4652      	mov	r2, sl
 8002d8a:	465b      	mov	r3, fp
 8002d8c:	1ad5      	subs	r5, r2, r3
 8002d8e:	152d      	asrs	r5, r5, #20
 8002d90:	2d3c      	cmp	r5, #60	; 0x3c
 8002d92:	dc39      	bgt.n	8002e08 <__ieee754_atan2+0xf8>
 8002d94:	353c      	adds	r5, #60	; 0x3c
 8002d96:	db4b      	blt.n	8002e30 <__ieee754_atan2+0x120>
 8002d98:	9a02      	ldr	r2, [sp, #8]
 8002d9a:	9b03      	ldr	r3, [sp, #12]
 8002d9c:	f001 fce0 	bl	8004760 <__aeabi_ddiv>
 8002da0:	f7ff ff56 	bl	8002c50 <fabs>
 8002da4:	f7ff fdbc 	bl	8002920 <atan>
 8002da8:	464c      	mov	r4, r9
 8002daa:	2c01      	cmp	r4, #1
 8002dac:	d045      	beq.n	8002e3a <__ieee754_atan2+0x12a>
 8002dae:	2c02      	cmp	r4, #2
 8002db0:	d047      	beq.n	8002e42 <__ieee754_atan2+0x132>
 8002db2:	2c00      	cmp	r4, #0
 8002db4:	d00c      	beq.n	8002dd0 <__ieee754_atan2+0xc0>
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <__ieee754_atan2+0x18c>)
 8002db8:	4a37      	ldr	r2, [pc, #220]	; (8002e98 <__ieee754_atan2+0x188>)
 8002dba:	f002 fb19 	bl	80053f0 <__aeabi_dsub>
 8002dbe:	4a38      	ldr	r2, [pc, #224]	; (8002ea0 <__ieee754_atan2+0x190>)
 8002dc0:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <__ieee754_atan2+0x194>)
 8002dc2:	f002 fb15 	bl	80053f0 <__aeabi_dsub>
 8002dc6:	e003      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002dc8:	9a02      	ldr	r2, [sp, #8]
 8002dca:	9b03      	ldr	r3, [sp, #12]
 8002dcc:	f001 f95a 	bl	8004084 <__aeabi_dadd>
 8002dd0:	b005      	add	sp, #20
 8002dd2:	bc3c      	pop	{r2, r3, r4, r5}
 8002dd4:	4690      	mov	r8, r2
 8002dd6:	4699      	mov	r9, r3
 8002dd8:	46a2      	mov	sl, r4
 8002dda:	46ab      	mov	fp, r5
 8002ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dde:	464b      	mov	r3, r9
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d014      	beq.n	8002e0e <__ieee754_atan2+0xfe>
 8002de4:	dc0b      	bgt.n	8002dfe <__ieee754_atan2+0xee>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	daf2      	bge.n	8002dd0 <__ieee754_atan2+0xc0>
 8002dea:	e7c4      	b.n	8002d76 <__ieee754_atan2+0x66>
 8002dec:	4646      	mov	r6, r8
 8002dee:	2e00      	cmp	r6, #0
 8002df0:	db1b      	blt.n	8002e2a <__ieee754_atan2+0x11a>
 8002df2:	482d      	ldr	r0, [pc, #180]	; (8002ea8 <__ieee754_atan2+0x198>)
 8002df4:	492d      	ldr	r1, [pc, #180]	; (8002eac <__ieee754_atan2+0x19c>)
 8002df6:	e7eb      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002df8:	f7ff fd92 	bl	8002920 <atan>
 8002dfc:	e7e8      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d1b9      	bne.n	8002d76 <__ieee754_atan2+0x66>
 8002e02:	482b      	ldr	r0, [pc, #172]	; (8002eb0 <__ieee754_atan2+0x1a0>)
 8002e04:	492b      	ldr	r1, [pc, #172]	; (8002eb4 <__ieee754_atan2+0x1a4>)
 8002e06:	e7e3      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002e08:	4827      	ldr	r0, [pc, #156]	; (8002ea8 <__ieee754_atan2+0x198>)
 8002e0a:	4928      	ldr	r1, [pc, #160]	; (8002eac <__ieee754_atan2+0x19c>)
 8002e0c:	e7cc      	b.n	8002da8 <__ieee754_atan2+0x98>
 8002e0e:	4824      	ldr	r0, [pc, #144]	; (8002ea0 <__ieee754_atan2+0x190>)
 8002e10:	4924      	ldr	r1, [pc, #144]	; (8002ea4 <__ieee754_atan2+0x194>)
 8002e12:	e7dd      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002e14:	45da      	cmp	sl, fp
 8002e16:	d01f      	beq.n	8002e58 <__ieee754_atan2+0x148>
 8002e18:	464c      	mov	r4, r9
 8002e1a:	2c01      	cmp	r4, #1
 8002e1c:	d027      	beq.n	8002e6e <__ieee754_atan2+0x15e>
 8002e1e:	dd29      	ble.n	8002e74 <__ieee754_atan2+0x164>
 8002e20:	2c02      	cmp	r4, #2
 8002e22:	d0f4      	beq.n	8002e0e <__ieee754_atan2+0xfe>
 8002e24:	2c03      	cmp	r4, #3
 8002e26:	d1ac      	bne.n	8002d82 <__ieee754_atan2+0x72>
 8002e28:	e7eb      	b.n	8002e02 <__ieee754_atan2+0xf2>
 8002e2a:	4823      	ldr	r0, [pc, #140]	; (8002eb8 <__ieee754_atan2+0x1a8>)
 8002e2c:	4923      	ldr	r1, [pc, #140]	; (8002ebc <__ieee754_atan2+0x1ac>)
 8002e2e:	e7cf      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002e30:	2f00      	cmp	r7, #0
 8002e32:	dab1      	bge.n	8002d98 <__ieee754_atan2+0x88>
 8002e34:	4822      	ldr	r0, [pc, #136]	; (8002ec0 <__ieee754_atan2+0x1b0>)
 8002e36:	4923      	ldr	r1, [pc, #140]	; (8002ec4 <__ieee754_atan2+0x1b4>)
 8002e38:	e7b6      	b.n	8002da8 <__ieee754_atan2+0x98>
 8002e3a:	2580      	movs	r5, #128	; 0x80
 8002e3c:	062d      	lsls	r5, r5, #24
 8002e3e:	1949      	adds	r1, r1, r5
 8002e40:	e7c6      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <__ieee754_atan2+0x18c>)
 8002e44:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <__ieee754_atan2+0x188>)
 8002e46:	f002 fad3 	bl	80053f0 <__aeabi_dsub>
 8002e4a:	1c02      	adds	r2, r0, #0
 8002e4c:	1c0b      	adds	r3, r1, #0
 8002e4e:	4814      	ldr	r0, [pc, #80]	; (8002ea0 <__ieee754_atan2+0x190>)
 8002e50:	4914      	ldr	r1, [pc, #80]	; (8002ea4 <__ieee754_atan2+0x194>)
 8002e52:	f002 facd 	bl	80053f0 <__aeabi_dsub>
 8002e56:	e7bb      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002e58:	464a      	mov	r2, r9
 8002e5a:	2a01      	cmp	r2, #1
 8002e5c:	d013      	beq.n	8002e86 <__ieee754_atan2+0x176>
 8002e5e:	dd15      	ble.n	8002e8c <__ieee754_atan2+0x17c>
 8002e60:	2a02      	cmp	r2, #2
 8002e62:	d00d      	beq.n	8002e80 <__ieee754_atan2+0x170>
 8002e64:	2a03      	cmp	r2, #3
 8002e66:	d1c1      	bne.n	8002dec <__ieee754_atan2+0xdc>
 8002e68:	4817      	ldr	r0, [pc, #92]	; (8002ec8 <__ieee754_atan2+0x1b8>)
 8002e6a:	4918      	ldr	r1, [pc, #96]	; (8002ecc <__ieee754_atan2+0x1bc>)
 8002e6c:	e7b0      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002e6e:	4818      	ldr	r0, [pc, #96]	; (8002ed0 <__ieee754_atan2+0x1c0>)
 8002e70:	4918      	ldr	r1, [pc, #96]	; (8002ed4 <__ieee754_atan2+0x1c4>)
 8002e72:	e7ad      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002e74:	2c00      	cmp	r4, #0
 8002e76:	d000      	beq.n	8002e7a <__ieee754_atan2+0x16a>
 8002e78:	e783      	b.n	8002d82 <__ieee754_atan2+0x72>
 8002e7a:	4811      	ldr	r0, [pc, #68]	; (8002ec0 <__ieee754_atan2+0x1b0>)
 8002e7c:	4911      	ldr	r1, [pc, #68]	; (8002ec4 <__ieee754_atan2+0x1b4>)
 8002e7e:	e7a7      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002e80:	4815      	ldr	r0, [pc, #84]	; (8002ed8 <__ieee754_atan2+0x1c8>)
 8002e82:	4916      	ldr	r1, [pc, #88]	; (8002edc <__ieee754_atan2+0x1cc>)
 8002e84:	e7a4      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002e86:	4816      	ldr	r0, [pc, #88]	; (8002ee0 <__ieee754_atan2+0x1d0>)
 8002e88:	4916      	ldr	r1, [pc, #88]	; (8002ee4 <__ieee754_atan2+0x1d4>)
 8002e8a:	e7a1      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002e8c:	2a00      	cmp	r2, #0
 8002e8e:	d1ad      	bne.n	8002dec <__ieee754_atan2+0xdc>
 8002e90:	4815      	ldr	r0, [pc, #84]	; (8002ee8 <__ieee754_atan2+0x1d8>)
 8002e92:	4916      	ldr	r1, [pc, #88]	; (8002eec <__ieee754_atan2+0x1dc>)
 8002e94:	e79c      	b.n	8002dd0 <__ieee754_atan2+0xc0>
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	33145c07 	.word	0x33145c07
 8002e9c:	3ca1a626 	.word	0x3ca1a626
 8002ea0:	54442d18 	.word	0x54442d18
 8002ea4:	400921fb 	.word	0x400921fb
 8002ea8:	54442d18 	.word	0x54442d18
 8002eac:	3ff921fb 	.word	0x3ff921fb
 8002eb0:	54442d18 	.word	0x54442d18
 8002eb4:	c00921fb 	.word	0xc00921fb
 8002eb8:	54442d18 	.word	0x54442d18
 8002ebc:	bff921fb 	.word	0xbff921fb
	...
 8002ec8:	7f3321d2 	.word	0x7f3321d2
 8002ecc:	c002d97c 	.word	0xc002d97c
 8002ed0:	00000000 	.word	0x00000000
 8002ed4:	80000000 	.word	0x80000000
 8002ed8:	7f3321d2 	.word	0x7f3321d2
 8002edc:	4002d97c 	.word	0x4002d97c
 8002ee0:	54442d18 	.word	0x54442d18
 8002ee4:	bfe921fb 	.word	0xbfe921fb
 8002ee8:	54442d18 	.word	0x54442d18
 8002eec:	3fe921fb 	.word	0x3fe921fb
 8002ef0:	7ff00000 	.word	0x7ff00000
 8002ef4:	c0100000 	.word	0xc0100000

08002ef8 <__ieee754_sqrt>:
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efa:	465f      	mov	r7, fp
 8002efc:	4656      	mov	r6, sl
 8002efe:	464d      	mov	r5, r9
 8002f00:	4644      	mov	r4, r8
 8002f02:	b4f0      	push	{r4, r5, r6, r7}
 8002f04:	4b64      	ldr	r3, [pc, #400]	; (8003098 <__ieee754_sqrt+0x1a0>)
 8002f06:	1c04      	adds	r4, r0, #0
 8002f08:	1c02      	adds	r2, r0, #0
 8002f0a:	1c08      	adds	r0, r1, #0
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	1c0d      	adds	r5, r1, #0
 8002f10:	4018      	ands	r0, r3
 8002f12:	4298      	cmp	r0, r3
 8002f14:	d100      	bne.n	8002f18 <__ieee754_sqrt+0x20>
 8002f16:	e09c      	b.n	8003052 <__ieee754_sqrt+0x15a>
 8002f18:	2900      	cmp	r1, #0
 8002f1a:	dc00      	bgt.n	8002f1e <__ieee754_sqrt+0x26>
 8002f1c:	e07a      	b.n	8003014 <__ieee754_sqrt+0x11c>
 8002f1e:	150f      	asrs	r7, r1, #20
 8002f20:	d100      	bne.n	8002f24 <__ieee754_sqrt+0x2c>
 8002f22:	e083      	b.n	800302c <__ieee754_sqrt+0x134>
 8002f24:	4b5d      	ldr	r3, [pc, #372]	; (800309c <__ieee754_sqrt+0x1a4>)
 8002f26:	0309      	lsls	r1, r1, #12
 8002f28:	18ff      	adds	r7, r7, r3
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	0b09      	lsrs	r1, r1, #12
 8002f2e:	035b      	lsls	r3, r3, #13
 8002f30:	430b      	orrs	r3, r1
 8002f32:	07fc      	lsls	r4, r7, #31
 8002f34:	d460      	bmi.n	8002ff8 <__ieee754_sqrt+0x100>
 8002f36:	0fd1      	lsrs	r1, r2, #31
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	107f      	asrs	r7, r7, #1
 8002f3c:	185b      	adds	r3, r3, r1
 8002f3e:	2180      	movs	r1, #128	; 0x80
 8002f40:	9701      	str	r7, [sp, #4]
 8002f42:	0052      	lsls	r2, r2, #1
 8002f44:	2416      	movs	r4, #22
 8002f46:	2600      	movs	r6, #0
 8002f48:	2000      	movs	r0, #0
 8002f4a:	0389      	lsls	r1, r1, #14
 8002f4c:	1845      	adds	r5, r0, r1
 8002f4e:	429d      	cmp	r5, r3
 8002f50:	dc02      	bgt.n	8002f58 <__ieee754_sqrt+0x60>
 8002f52:	1868      	adds	r0, r5, r1
 8002f54:	1b5b      	subs	r3, r3, r5
 8002f56:	1876      	adds	r6, r6, r1
 8002f58:	0fd5      	lsrs	r5, r2, #31
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	3c01      	subs	r4, #1
 8002f5e:	195b      	adds	r3, r3, r5
 8002f60:	0052      	lsls	r2, r2, #1
 8002f62:	0849      	lsrs	r1, r1, #1
 8002f64:	2c00      	cmp	r4, #0
 8002f66:	d1f1      	bne.n	8002f4c <__ieee754_sqrt+0x54>
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	2700      	movs	r7, #0
 8002f6c:	0609      	lsls	r1, r1, #24
 8002f6e:	2520      	movs	r5, #32
 8002f70:	46b8      	mov	r8, r7
 8002f72:	46bc      	mov	ip, r7
 8002f74:	4689      	mov	r9, r1
 8002f76:	e00e      	b.n	8002f96 <__ieee754_sqrt+0x9e>
 8002f78:	42a2      	cmp	r2, r4
 8002f7a:	419b      	sbcs	r3, r3
 8002f7c:	425b      	negs	r3, r3
 8002f7e:	4657      	mov	r7, sl
 8002f80:	1afb      	subs	r3, r7, r3
 8002f82:	1b12      	subs	r2, r2, r4
 8002f84:	4488      	add	r8, r1
 8002f86:	0fd4      	lsrs	r4, r2, #31
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	3d01      	subs	r5, #1
 8002f8c:	191b      	adds	r3, r3, r4
 8002f8e:	0052      	lsls	r2, r2, #1
 8002f90:	0849      	lsrs	r1, r1, #1
 8002f92:	2d00      	cmp	r5, #0
 8002f94:	d017      	beq.n	8002fc6 <__ieee754_sqrt+0xce>
 8002f96:	4667      	mov	r7, ip
 8002f98:	19cc      	adds	r4, r1, r7
 8002f9a:	1a1f      	subs	r7, r3, r0
 8002f9c:	46ba      	mov	sl, r7
 8002f9e:	4298      	cmp	r0, r3
 8002fa0:	db03      	blt.n	8002faa <__ieee754_sqrt+0xb2>
 8002fa2:	42a2      	cmp	r2, r4
 8002fa4:	d3ef      	bcc.n	8002f86 <__ieee754_sqrt+0x8e>
 8002fa6:	2f00      	cmp	r7, #0
 8002fa8:	d1ed      	bne.n	8002f86 <__ieee754_sqrt+0x8e>
 8002faa:	1863      	adds	r3, r4, r1
 8002fac:	469c      	mov	ip, r3
 8002fae:	0fe3      	lsrs	r3, r4, #31
 8002fb0:	07db      	lsls	r3, r3, #31
 8002fb2:	454b      	cmp	r3, r9
 8002fb4:	d1e0      	bne.n	8002f78 <__ieee754_sqrt+0x80>
 8002fb6:	4667      	mov	r7, ip
 8002fb8:	0ffb      	lsrs	r3, r7, #31
 8002fba:	07db      	lsls	r3, r3, #31
 8002fbc:	1c1f      	adds	r7, r3, #0
 8002fbe:	427b      	negs	r3, r7
 8002fc0:	417b      	adcs	r3, r7
 8002fc2:	18c0      	adds	r0, r0, r3
 8002fc4:	e7d8      	b.n	8002f78 <__ieee754_sqrt+0x80>
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	d11b      	bne.n	8003002 <__ieee754_sqrt+0x10a>
 8002fca:	4641      	mov	r1, r8
 8002fcc:	084b      	lsrs	r3, r1, #1
 8002fce:	4f34      	ldr	r7, [pc, #208]	; (80030a0 <__ieee754_sqrt+0x1a8>)
 8002fd0:	1072      	asrs	r2, r6, #1
 8002fd2:	19d2      	adds	r2, r2, r7
 8002fd4:	07f1      	lsls	r1, r6, #31
 8002fd6:	d502      	bpl.n	8002fde <__ieee754_sqrt+0xe6>
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	0609      	lsls	r1, r1, #24
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	9c01      	ldr	r4, [sp, #4]
 8002fe0:	0527      	lsls	r7, r4, #20
 8002fe2:	18bd      	adds	r5, r7, r2
 8002fe4:	1c1c      	adds	r4, r3, #0
 8002fe6:	1c20      	adds	r0, r4, #0
 8002fe8:	1c29      	adds	r1, r5, #0
 8002fea:	b003      	add	sp, #12
 8002fec:	bc3c      	pop	{r2, r3, r4, r5}
 8002fee:	4690      	mov	r8, r2
 8002ff0:	4699      	mov	r9, r3
 8002ff2:	46a2      	mov	sl, r4
 8002ff4:	46ab      	mov	fp, r5
 8002ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff8:	0fd1      	lsrs	r1, r2, #31
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	185b      	adds	r3, r3, r1
 8002ffe:	0052      	lsls	r2, r2, #1
 8003000:	e799      	b.n	8002f36 <__ieee754_sqrt+0x3e>
 8003002:	4642      	mov	r2, r8
 8003004:	3201      	adds	r2, #1
 8003006:	d033      	beq.n	8003070 <__ieee754_sqrt+0x178>
 8003008:	2301      	movs	r3, #1
 800300a:	4644      	mov	r4, r8
 800300c:	4023      	ands	r3, r4
 800300e:	4443      	add	r3, r8
 8003010:	085b      	lsrs	r3, r3, #1
 8003012:	e7dc      	b.n	8002fce <__ieee754_sqrt+0xd6>
 8003014:	004b      	lsls	r3, r1, #1
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	4323      	orrs	r3, r4
 800301a:	d0e4      	beq.n	8002fe6 <__ieee754_sqrt+0xee>
 800301c:	2700      	movs	r7, #0
 800301e:	2900      	cmp	r1, #0
 8003020:	d12d      	bne.n	800307e <__ieee754_sqrt+0x186>
 8003022:	0ad1      	lsrs	r1, r2, #11
 8003024:	3f15      	subs	r7, #21
 8003026:	0552      	lsls	r2, r2, #21
 8003028:	2900      	cmp	r1, #0
 800302a:	d0fa      	beq.n	8003022 <__ieee754_sqrt+0x12a>
 800302c:	2080      	movs	r0, #128	; 0x80
 800302e:	0340      	lsls	r0, r0, #13
 8003030:	4201      	tst	r1, r0
 8003032:	d120      	bne.n	8003076 <__ieee754_sqrt+0x17e>
 8003034:	2300      	movs	r3, #0
 8003036:	0049      	lsls	r1, r1, #1
 8003038:	3301      	adds	r3, #1
 800303a:	4201      	tst	r1, r0
 800303c:	d0fb      	beq.n	8003036 <__ieee754_sqrt+0x13e>
 800303e:	2401      	movs	r4, #1
 8003040:	2020      	movs	r0, #32
 8003042:	1ae4      	subs	r4, r4, r3
 8003044:	1ac0      	subs	r0, r0, r3
 8003046:	193f      	adds	r7, r7, r4
 8003048:	1c14      	adds	r4, r2, #0
 800304a:	40c4      	lsrs	r4, r0
 800304c:	4321      	orrs	r1, r4
 800304e:	409a      	lsls	r2, r3
 8003050:	e768      	b.n	8002f24 <__ieee754_sqrt+0x2c>
 8003052:	1c22      	adds	r2, r4, #0
 8003054:	1c2b      	adds	r3, r5, #0
 8003056:	1c20      	adds	r0, r4, #0
 8003058:	1c29      	adds	r1, r5, #0
 800305a:	f001 ff7f 	bl	8004f5c <__aeabi_dmul>
 800305e:	1c02      	adds	r2, r0, #0
 8003060:	1c0b      	adds	r3, r1, #0
 8003062:	1c20      	adds	r0, r4, #0
 8003064:	1c29      	adds	r1, r5, #0
 8003066:	f001 f80d 	bl	8004084 <__aeabi_dadd>
 800306a:	1c04      	adds	r4, r0, #0
 800306c:	1c0d      	adds	r5, r1, #0
 800306e:	e7ba      	b.n	8002fe6 <__ieee754_sqrt+0xee>
 8003070:	3601      	adds	r6, #1
 8003072:	2300      	movs	r3, #0
 8003074:	e7ab      	b.n	8002fce <__ieee754_sqrt+0xd6>
 8003076:	2020      	movs	r0, #32
 8003078:	2401      	movs	r4, #1
 800307a:	2300      	movs	r3, #0
 800307c:	e7e3      	b.n	8003046 <__ieee754_sqrt+0x14e>
 800307e:	1c22      	adds	r2, r4, #0
 8003080:	1c2b      	adds	r3, r5, #0
 8003082:	1c20      	adds	r0, r4, #0
 8003084:	1c29      	adds	r1, r5, #0
 8003086:	f002 f9b3 	bl	80053f0 <__aeabi_dsub>
 800308a:	1c02      	adds	r2, r0, #0
 800308c:	1c0b      	adds	r3, r1, #0
 800308e:	f001 fb67 	bl	8004760 <__aeabi_ddiv>
 8003092:	1c04      	adds	r4, r0, #0
 8003094:	1c0d      	adds	r5, r1, #0
 8003096:	e7a6      	b.n	8002fe6 <__ieee754_sqrt+0xee>
 8003098:	7ff00000 	.word	0x7ff00000
 800309c:	fffffc01 	.word	0xfffffc01
 80030a0:	3fe00000 	.word	0x3fe00000

080030a4 <__fpclassifyd>:
 80030a4:	b530      	push	{r4, r5, lr}
 80030a6:	1c0b      	adds	r3, r1, #0
 80030a8:	1c01      	adds	r1, r0, #0
 80030aa:	1c02      	adds	r2, r0, #0
 80030ac:	4319      	orrs	r1, r3
 80030ae:	2002      	movs	r0, #2
 80030b0:	2900      	cmp	r1, #0
 80030b2:	d100      	bne.n	80030b6 <__fpclassifyd+0x12>
 80030b4:	bd30      	pop	{r4, r5, pc}
 80030b6:	4251      	negs	r1, r2
 80030b8:	414a      	adcs	r2, r1
 80030ba:	2a00      	cmp	r2, #0
 80030bc:	d004      	beq.n	80030c8 <__fpclassifyd+0x24>
 80030be:	2480      	movs	r4, #128	; 0x80
 80030c0:	0624      	lsls	r4, r4, #24
 80030c2:	1919      	adds	r1, r3, r4
 80030c4:	2900      	cmp	r1, #0
 80030c6:	d0f5      	beq.n	80030b4 <__fpclassifyd+0x10>
 80030c8:	4d14      	ldr	r5, [pc, #80]	; (800311c <__fpclassifyd+0x78>)
 80030ca:	4815      	ldr	r0, [pc, #84]	; (8003120 <__fpclassifyd+0x7c>)
 80030cc:	195c      	adds	r4, r3, r5
 80030ce:	2100      	movs	r1, #0
 80030d0:	42a0      	cmp	r0, r4
 80030d2:	4149      	adcs	r1, r1
 80030d4:	2900      	cmp	r1, #0
 80030d6:	d001      	beq.n	80030dc <__fpclassifyd+0x38>
 80030d8:	2004      	movs	r0, #4
 80030da:	e7eb      	b.n	80030b4 <__fpclassifyd+0x10>
 80030dc:	4d11      	ldr	r5, [pc, #68]	; (8003124 <__fpclassifyd+0x80>)
 80030de:	195c      	adds	r4, r3, r5
 80030e0:	42a0      	cmp	r0, r4
 80030e2:	4149      	adcs	r1, r1
 80030e4:	2900      	cmp	r1, #0
 80030e6:	d1f7      	bne.n	80030d8 <__fpclassifyd+0x34>
 80030e8:	2080      	movs	r0, #128	; 0x80
 80030ea:	0600      	lsls	r0, r0, #24
 80030ec:	181c      	adds	r4, r3, r0
 80030ee:	480e      	ldr	r0, [pc, #56]	; (8003128 <__fpclassifyd+0x84>)
 80030f0:	42a0      	cmp	r0, r4
 80030f2:	4149      	adcs	r1, r1
 80030f4:	2900      	cmp	r1, #0
 80030f6:	d001      	beq.n	80030fc <__fpclassifyd+0x58>
 80030f8:	2003      	movs	r0, #3
 80030fa:	e7db      	b.n	80030b4 <__fpclassifyd+0x10>
 80030fc:	4298      	cmp	r0, r3
 80030fe:	4149      	adcs	r1, r1
 8003100:	2900      	cmp	r1, #0
 8003102:	d1f9      	bne.n	80030f8 <__fpclassifyd+0x54>
 8003104:	2180      	movs	r1, #128	; 0x80
 8003106:	4c09      	ldr	r4, [pc, #36]	; (800312c <__fpclassifyd+0x88>)
 8003108:	0349      	lsls	r1, r1, #13
 800310a:	1858      	adds	r0, r3, r1
 800310c:	191b      	adds	r3, r3, r4
 800310e:	4241      	negs	r1, r0
 8003110:	4148      	adcs	r0, r1
 8003112:	4259      	negs	r1, r3
 8003114:	414b      	adcs	r3, r1
 8003116:	4318      	orrs	r0, r3
 8003118:	4010      	ands	r0, r2
 800311a:	e7cb      	b.n	80030b4 <__fpclassifyd+0x10>
 800311c:	7ff00000 	.word	0x7ff00000
 8003120:	7fdfffff 	.word	0x7fdfffff
 8003124:	fff00000 	.word	0xfff00000
 8003128:	000fffff 	.word	0x000fffff
 800312c:	80100000 	.word	0x80100000

08003130 <matherr>:
 8003130:	2000      	movs	r0, #0
 8003132:	4770      	bx	lr

08003134 <__gnu_thumb1_case_uqi>:
 8003134:	b402      	push	{r1}
 8003136:	4671      	mov	r1, lr
 8003138:	0849      	lsrs	r1, r1, #1
 800313a:	0049      	lsls	r1, r1, #1
 800313c:	5c09      	ldrb	r1, [r1, r0]
 800313e:	0049      	lsls	r1, r1, #1
 8003140:	448e      	add	lr, r1
 8003142:	bc02      	pop	{r1}
 8003144:	4770      	bx	lr
 8003146:	46c0      	nop			; (mov r8, r8)

08003148 <__aeabi_uidiv>:
 8003148:	2900      	cmp	r1, #0
 800314a:	d034      	beq.n	80031b6 <.udivsi3_skip_div0_test+0x6a>

0800314c <.udivsi3_skip_div0_test>:
 800314c:	2301      	movs	r3, #1
 800314e:	2200      	movs	r2, #0
 8003150:	b410      	push	{r4}
 8003152:	4288      	cmp	r0, r1
 8003154:	d32c      	bcc.n	80031b0 <.udivsi3_skip_div0_test+0x64>
 8003156:	2401      	movs	r4, #1
 8003158:	0724      	lsls	r4, r4, #28
 800315a:	42a1      	cmp	r1, r4
 800315c:	d204      	bcs.n	8003168 <.udivsi3_skip_div0_test+0x1c>
 800315e:	4281      	cmp	r1, r0
 8003160:	d202      	bcs.n	8003168 <.udivsi3_skip_div0_test+0x1c>
 8003162:	0109      	lsls	r1, r1, #4
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	e7f8      	b.n	800315a <.udivsi3_skip_div0_test+0xe>
 8003168:	00e4      	lsls	r4, r4, #3
 800316a:	42a1      	cmp	r1, r4
 800316c:	d204      	bcs.n	8003178 <.udivsi3_skip_div0_test+0x2c>
 800316e:	4281      	cmp	r1, r0
 8003170:	d202      	bcs.n	8003178 <.udivsi3_skip_div0_test+0x2c>
 8003172:	0049      	lsls	r1, r1, #1
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	e7f8      	b.n	800316a <.udivsi3_skip_div0_test+0x1e>
 8003178:	4288      	cmp	r0, r1
 800317a:	d301      	bcc.n	8003180 <.udivsi3_skip_div0_test+0x34>
 800317c:	1a40      	subs	r0, r0, r1
 800317e:	431a      	orrs	r2, r3
 8003180:	084c      	lsrs	r4, r1, #1
 8003182:	42a0      	cmp	r0, r4
 8003184:	d302      	bcc.n	800318c <.udivsi3_skip_div0_test+0x40>
 8003186:	1b00      	subs	r0, r0, r4
 8003188:	085c      	lsrs	r4, r3, #1
 800318a:	4322      	orrs	r2, r4
 800318c:	088c      	lsrs	r4, r1, #2
 800318e:	42a0      	cmp	r0, r4
 8003190:	d302      	bcc.n	8003198 <.udivsi3_skip_div0_test+0x4c>
 8003192:	1b00      	subs	r0, r0, r4
 8003194:	089c      	lsrs	r4, r3, #2
 8003196:	4322      	orrs	r2, r4
 8003198:	08cc      	lsrs	r4, r1, #3
 800319a:	42a0      	cmp	r0, r4
 800319c:	d302      	bcc.n	80031a4 <.udivsi3_skip_div0_test+0x58>
 800319e:	1b00      	subs	r0, r0, r4
 80031a0:	08dc      	lsrs	r4, r3, #3
 80031a2:	4322      	orrs	r2, r4
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d003      	beq.n	80031b0 <.udivsi3_skip_div0_test+0x64>
 80031a8:	091b      	lsrs	r3, r3, #4
 80031aa:	d001      	beq.n	80031b0 <.udivsi3_skip_div0_test+0x64>
 80031ac:	0909      	lsrs	r1, r1, #4
 80031ae:	e7e3      	b.n	8003178 <.udivsi3_skip_div0_test+0x2c>
 80031b0:	1c10      	adds	r0, r2, #0
 80031b2:	bc10      	pop	{r4}
 80031b4:	4770      	bx	lr
 80031b6:	2800      	cmp	r0, #0
 80031b8:	d001      	beq.n	80031be <.udivsi3_skip_div0_test+0x72>
 80031ba:	2000      	movs	r0, #0
 80031bc:	43c0      	mvns	r0, r0
 80031be:	b407      	push	{r0, r1, r2}
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <.udivsi3_skip_div0_test+0x80>)
 80031c2:	a102      	add	r1, pc, #8	; (adr r1, 80031cc <.udivsi3_skip_div0_test+0x80>)
 80031c4:	1840      	adds	r0, r0, r1
 80031c6:	9002      	str	r0, [sp, #8]
 80031c8:	bd03      	pop	{r0, r1, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	000000d9 	.word	0x000000d9

080031d0 <__aeabi_uidivmod>:
 80031d0:	2900      	cmp	r1, #0
 80031d2:	d0f0      	beq.n	80031b6 <.udivsi3_skip_div0_test+0x6a>
 80031d4:	b503      	push	{r0, r1, lr}
 80031d6:	f7ff ffb9 	bl	800314c <.udivsi3_skip_div0_test>
 80031da:	bc0e      	pop	{r1, r2, r3}
 80031dc:	4342      	muls	r2, r0
 80031de:	1a89      	subs	r1, r1, r2
 80031e0:	4718      	bx	r3
 80031e2:	46c0      	nop			; (mov r8, r8)

080031e4 <__aeabi_idiv>:
 80031e4:	2900      	cmp	r1, #0
 80031e6:	d041      	beq.n	800326c <.divsi3_skip_div0_test+0x84>

080031e8 <.divsi3_skip_div0_test>:
 80031e8:	b410      	push	{r4}
 80031ea:	1c04      	adds	r4, r0, #0
 80031ec:	404c      	eors	r4, r1
 80031ee:	46a4      	mov	ip, r4
 80031f0:	2301      	movs	r3, #1
 80031f2:	2200      	movs	r2, #0
 80031f4:	2900      	cmp	r1, #0
 80031f6:	d500      	bpl.n	80031fa <.divsi3_skip_div0_test+0x12>
 80031f8:	4249      	negs	r1, r1
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d500      	bpl.n	8003200 <.divsi3_skip_div0_test+0x18>
 80031fe:	4240      	negs	r0, r0
 8003200:	4288      	cmp	r0, r1
 8003202:	d32c      	bcc.n	800325e <.divsi3_skip_div0_test+0x76>
 8003204:	2401      	movs	r4, #1
 8003206:	0724      	lsls	r4, r4, #28
 8003208:	42a1      	cmp	r1, r4
 800320a:	d204      	bcs.n	8003216 <.divsi3_skip_div0_test+0x2e>
 800320c:	4281      	cmp	r1, r0
 800320e:	d202      	bcs.n	8003216 <.divsi3_skip_div0_test+0x2e>
 8003210:	0109      	lsls	r1, r1, #4
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	e7f8      	b.n	8003208 <.divsi3_skip_div0_test+0x20>
 8003216:	00e4      	lsls	r4, r4, #3
 8003218:	42a1      	cmp	r1, r4
 800321a:	d204      	bcs.n	8003226 <.divsi3_skip_div0_test+0x3e>
 800321c:	4281      	cmp	r1, r0
 800321e:	d202      	bcs.n	8003226 <.divsi3_skip_div0_test+0x3e>
 8003220:	0049      	lsls	r1, r1, #1
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	e7f8      	b.n	8003218 <.divsi3_skip_div0_test+0x30>
 8003226:	4288      	cmp	r0, r1
 8003228:	d301      	bcc.n	800322e <.divsi3_skip_div0_test+0x46>
 800322a:	1a40      	subs	r0, r0, r1
 800322c:	431a      	orrs	r2, r3
 800322e:	084c      	lsrs	r4, r1, #1
 8003230:	42a0      	cmp	r0, r4
 8003232:	d302      	bcc.n	800323a <.divsi3_skip_div0_test+0x52>
 8003234:	1b00      	subs	r0, r0, r4
 8003236:	085c      	lsrs	r4, r3, #1
 8003238:	4322      	orrs	r2, r4
 800323a:	088c      	lsrs	r4, r1, #2
 800323c:	42a0      	cmp	r0, r4
 800323e:	d302      	bcc.n	8003246 <.divsi3_skip_div0_test+0x5e>
 8003240:	1b00      	subs	r0, r0, r4
 8003242:	089c      	lsrs	r4, r3, #2
 8003244:	4322      	orrs	r2, r4
 8003246:	08cc      	lsrs	r4, r1, #3
 8003248:	42a0      	cmp	r0, r4
 800324a:	d302      	bcc.n	8003252 <.divsi3_skip_div0_test+0x6a>
 800324c:	1b00      	subs	r0, r0, r4
 800324e:	08dc      	lsrs	r4, r3, #3
 8003250:	4322      	orrs	r2, r4
 8003252:	2800      	cmp	r0, #0
 8003254:	d003      	beq.n	800325e <.divsi3_skip_div0_test+0x76>
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	d001      	beq.n	800325e <.divsi3_skip_div0_test+0x76>
 800325a:	0909      	lsrs	r1, r1, #4
 800325c:	e7e3      	b.n	8003226 <.divsi3_skip_div0_test+0x3e>
 800325e:	1c10      	adds	r0, r2, #0
 8003260:	4664      	mov	r4, ip
 8003262:	2c00      	cmp	r4, #0
 8003264:	d500      	bpl.n	8003268 <.divsi3_skip_div0_test+0x80>
 8003266:	4240      	negs	r0, r0
 8003268:	bc10      	pop	{r4}
 800326a:	4770      	bx	lr
 800326c:	2800      	cmp	r0, #0
 800326e:	d006      	beq.n	800327e <.divsi3_skip_div0_test+0x96>
 8003270:	db03      	blt.n	800327a <.divsi3_skip_div0_test+0x92>
 8003272:	2000      	movs	r0, #0
 8003274:	43c0      	mvns	r0, r0
 8003276:	0840      	lsrs	r0, r0, #1
 8003278:	e001      	b.n	800327e <.divsi3_skip_div0_test+0x96>
 800327a:	2080      	movs	r0, #128	; 0x80
 800327c:	0600      	lsls	r0, r0, #24
 800327e:	b407      	push	{r0, r1, r2}
 8003280:	4802      	ldr	r0, [pc, #8]	; (800328c <.divsi3_skip_div0_test+0xa4>)
 8003282:	a102      	add	r1, pc, #8	; (adr r1, 800328c <.divsi3_skip_div0_test+0xa4>)
 8003284:	1840      	adds	r0, r0, r1
 8003286:	9002      	str	r0, [sp, #8]
 8003288:	bd03      	pop	{r0, r1, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	00000019 	.word	0x00000019

08003290 <__aeabi_idivmod>:
 8003290:	2900      	cmp	r1, #0
 8003292:	d0eb      	beq.n	800326c <.divsi3_skip_div0_test+0x84>
 8003294:	b503      	push	{r0, r1, lr}
 8003296:	f7ff ffa7 	bl	80031e8 <.divsi3_skip_div0_test>
 800329a:	bc0e      	pop	{r1, r2, r3}
 800329c:	4342      	muls	r2, r0
 800329e:	1a89      	subs	r1, r1, r2
 80032a0:	4718      	bx	r3
 80032a2:	46c0      	nop			; (mov r8, r8)

080032a4 <__aeabi_idiv0>:
 80032a4:	4770      	bx	lr
 80032a6:	46c0      	nop			; (mov r8, r8)

080032a8 <__aeabi_cdrcmple>:
 80032a8:	4684      	mov	ip, r0
 80032aa:	1c10      	adds	r0, r2, #0
 80032ac:	4662      	mov	r2, ip
 80032ae:	468c      	mov	ip, r1
 80032b0:	1c19      	adds	r1, r3, #0
 80032b2:	4663      	mov	r3, ip
 80032b4:	e000      	b.n	80032b8 <__aeabi_cdcmpeq>
 80032b6:	46c0      	nop			; (mov r8, r8)

080032b8 <__aeabi_cdcmpeq>:
 80032b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80032ba:	f001 fdf1 	bl	8004ea0 <__ledf2>
 80032be:	2800      	cmp	r0, #0
 80032c0:	d401      	bmi.n	80032c6 <__aeabi_cdcmpeq+0xe>
 80032c2:	2100      	movs	r1, #0
 80032c4:	42c8      	cmn	r0, r1
 80032c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080032c8 <__aeabi_dcmpeq>:
 80032c8:	b510      	push	{r4, lr}
 80032ca:	f001 fd35 	bl	8004d38 <__eqdf2>
 80032ce:	4240      	negs	r0, r0
 80032d0:	3001      	adds	r0, #1
 80032d2:	bd10      	pop	{r4, pc}

080032d4 <__aeabi_dcmplt>:
 80032d4:	b510      	push	{r4, lr}
 80032d6:	f001 fde3 	bl	8004ea0 <__ledf2>
 80032da:	2800      	cmp	r0, #0
 80032dc:	db01      	blt.n	80032e2 <__aeabi_dcmplt+0xe>
 80032de:	2000      	movs	r0, #0
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	2001      	movs	r0, #1
 80032e4:	bd10      	pop	{r4, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)

080032e8 <__aeabi_dcmple>:
 80032e8:	b510      	push	{r4, lr}
 80032ea:	f001 fdd9 	bl	8004ea0 <__ledf2>
 80032ee:	2800      	cmp	r0, #0
 80032f0:	dd01      	ble.n	80032f6 <__aeabi_dcmple+0xe>
 80032f2:	2000      	movs	r0, #0
 80032f4:	bd10      	pop	{r4, pc}
 80032f6:	2001      	movs	r0, #1
 80032f8:	bd10      	pop	{r4, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)

080032fc <__aeabi_dcmpgt>:
 80032fc:	b510      	push	{r4, lr}
 80032fe:	f001 fd59 	bl	8004db4 <__gedf2>
 8003302:	2800      	cmp	r0, #0
 8003304:	dc01      	bgt.n	800330a <__aeabi_dcmpgt+0xe>
 8003306:	2000      	movs	r0, #0
 8003308:	bd10      	pop	{r4, pc}
 800330a:	2001      	movs	r0, #1
 800330c:	bd10      	pop	{r4, pc}
 800330e:	46c0      	nop			; (mov r8, r8)

08003310 <__aeabi_dcmpge>:
 8003310:	b510      	push	{r4, lr}
 8003312:	f001 fd4f 	bl	8004db4 <__gedf2>
 8003316:	2800      	cmp	r0, #0
 8003318:	da01      	bge.n	800331e <__aeabi_dcmpge+0xe>
 800331a:	2000      	movs	r0, #0
 800331c:	bd10      	pop	{r4, pc}
 800331e:	2001      	movs	r0, #1
 8003320:	bd10      	pop	{r4, pc}
 8003322:	46c0      	nop			; (mov r8, r8)

08003324 <__aeabi_f2uiz>:
 8003324:	b510      	push	{r4, lr}
 8003326:	219e      	movs	r1, #158	; 0x9e
 8003328:	05c9      	lsls	r1, r1, #23
 800332a:	1c04      	adds	r4, r0, #0
 800332c:	f002 fdc2 	bl	8005eb4 <__aeabi_fcmpge>
 8003330:	2800      	cmp	r0, #0
 8003332:	d103      	bne.n	800333c <__aeabi_f2uiz+0x18>
 8003334:	1c20      	adds	r0, r4, #0
 8003336:	f000 fdd9 	bl	8003eec <__aeabi_f2iz>
 800333a:	bd10      	pop	{r4, pc}
 800333c:	1c20      	adds	r0, r4, #0
 800333e:	249e      	movs	r4, #158	; 0x9e
 8003340:	05e1      	lsls	r1, r4, #23
 8003342:	f000 fc0b 	bl	8003b5c <__aeabi_fsub>
 8003346:	f000 fdd1 	bl	8003eec <__aeabi_f2iz>
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	0613      	lsls	r3, r2, #24
 800334e:	18c0      	adds	r0, r0, r3
 8003350:	e7f3      	b.n	800333a <__aeabi_f2uiz+0x16>
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	0000      	movs	r0, r0
	...

08003358 <__aeabi_d2uiz>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <__aeabi_d2uiz+0x3c>)
 800335c:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <__aeabi_d2uiz+0x38>)
 800335e:	1c04      	adds	r4, r0, #0
 8003360:	1c0d      	adds	r5, r1, #0
 8003362:	f7ff ffd5 	bl	8003310 <__aeabi_dcmpge>
 8003366:	2800      	cmp	r0, #0
 8003368:	d104      	bne.n	8003374 <__aeabi_d2uiz+0x1c>
 800336a:	1c20      	adds	r0, r4, #0
 800336c:	1c29      	adds	r1, r5, #0
 800336e:	f002 fbd5 	bl	8005b1c <__aeabi_d2iz>
 8003372:	bd38      	pop	{r3, r4, r5, pc}
 8003374:	4b07      	ldr	r3, [pc, #28]	; (8003394 <__aeabi_d2uiz+0x3c>)
 8003376:	4a06      	ldr	r2, [pc, #24]	; (8003390 <__aeabi_d2uiz+0x38>)
 8003378:	1c20      	adds	r0, r4, #0
 800337a:	1c29      	adds	r1, r5, #0
 800337c:	f002 f838 	bl	80053f0 <__aeabi_dsub>
 8003380:	f002 fbcc 	bl	8005b1c <__aeabi_d2iz>
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	061b      	lsls	r3, r3, #24
 8003388:	18c0      	adds	r0, r0, r3
 800338a:	e7f2      	b.n	8003372 <__aeabi_d2uiz+0x1a>
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	00000000 	.word	0x00000000
 8003394:	41e00000 	.word	0x41e00000

08003398 <__aeabi_fadd>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	0fc2      	lsrs	r2, r0, #31
 800339c:	0043      	lsls	r3, r0, #1
 800339e:	024f      	lsls	r7, r1, #9
 80033a0:	004c      	lsls	r4, r1, #1
 80033a2:	0246      	lsls	r6, r0, #9
 80033a4:	b2d5      	uxtb	r5, r2
 80033a6:	0e1b      	lsrs	r3, r3, #24
 80033a8:	09b0      	lsrs	r0, r6, #6
 80033aa:	0e24      	lsrs	r4, r4, #24
 80033ac:	0fc9      	lsrs	r1, r1, #31
 80033ae:	09bf      	lsrs	r7, r7, #6
 80033b0:	428d      	cmp	r5, r1
 80033b2:	d062      	beq.n	800347a <__aeabi_fadd+0xe2>
 80033b4:	1b1a      	subs	r2, r3, r4
 80033b6:	2a00      	cmp	r2, #0
 80033b8:	dc00      	bgt.n	80033bc <__aeabi_fadd+0x24>
 80033ba:	e09a      	b.n	80034f2 <__aeabi_fadd+0x15a>
 80033bc:	2c00      	cmp	r4, #0
 80033be:	d109      	bne.n	80033d4 <__aeabi_fadd+0x3c>
 80033c0:	2f00      	cmp	r7, #0
 80033c2:	d100      	bne.n	80033c6 <__aeabi_fadd+0x2e>
 80033c4:	e076      	b.n	80034b4 <__aeabi_fadd+0x11c>
 80033c6:	3a01      	subs	r2, #1
 80033c8:	2a00      	cmp	r2, #0
 80033ca:	d000      	beq.n	80033ce <__aeabi_fadd+0x36>
 80033cc:	e0ad      	b.n	800352a <__aeabi_fadd+0x192>
 80033ce:	1bc6      	subs	r6, r0, r7
 80033d0:	1c1c      	adds	r4, r3, #0
 80033d2:	e013      	b.n	80033fc <__aeabi_fadd+0x64>
 80033d4:	2bff      	cmp	r3, #255	; 0xff
 80033d6:	d100      	bne.n	80033da <__aeabi_fadd+0x42>
 80033d8:	e07a      	b.n	80034d0 <__aeabi_fadd+0x138>
 80033da:	2680      	movs	r6, #128	; 0x80
 80033dc:	04f4      	lsls	r4, r6, #19
 80033de:	4327      	orrs	r7, r4
 80033e0:	2601      	movs	r6, #1
 80033e2:	2a1b      	cmp	r2, #27
 80033e4:	dc08      	bgt.n	80033f8 <__aeabi_fadd+0x60>
 80033e6:	1c39      	adds	r1, r7, #0
 80033e8:	2420      	movs	r4, #32
 80033ea:	40d1      	lsrs	r1, r2
 80033ec:	1aa2      	subs	r2, r4, r2
 80033ee:	4097      	lsls	r7, r2
 80033f0:	1c3e      	adds	r6, r7, #0
 80033f2:	1e77      	subs	r7, r6, #1
 80033f4:	41be      	sbcs	r6, r7
 80033f6:	430e      	orrs	r6, r1
 80033f8:	1b86      	subs	r6, r0, r6
 80033fa:	1c1c      	adds	r4, r3, #0
 80033fc:	0173      	lsls	r3, r6, #5
 80033fe:	d400      	bmi.n	8003402 <__aeabi_fadd+0x6a>
 8003400:	e06e      	b.n	80034e0 <__aeabi_fadd+0x148>
 8003402:	01b0      	lsls	r0, r6, #6
 8003404:	0986      	lsrs	r6, r0, #6
 8003406:	1c30      	adds	r0, r6, #0
 8003408:	f002 fd5e 	bl	8005ec8 <__clzsi2>
 800340c:	1c33      	adds	r3, r6, #0
 800340e:	3805      	subs	r0, #5
 8003410:	4083      	lsls	r3, r0
 8003412:	4284      	cmp	r4, r0
 8003414:	dc61      	bgt.n	80034da <__aeabi_fadd+0x142>
 8003416:	1b04      	subs	r4, r0, r4
 8003418:	221f      	movs	r2, #31
 800341a:	1b16      	subs	r6, r2, r4
 800341c:	1c1f      	adds	r7, r3, #0
 800341e:	40b3      	lsls	r3, r6
 8003420:	1c60      	adds	r0, r4, #1
 8003422:	1c1e      	adds	r6, r3, #0
 8003424:	40c7      	lsrs	r7, r0
 8003426:	1e73      	subs	r3, r6, #1
 8003428:	419e      	sbcs	r6, r3
 800342a:	433e      	orrs	r6, r7
 800342c:	2201      	movs	r2, #1
 800342e:	2400      	movs	r4, #0
 8003430:	270f      	movs	r7, #15
 8003432:	4037      	ands	r7, r6
 8003434:	2f04      	cmp	r7, #4
 8003436:	d000      	beq.n	800343a <__aeabi_fadd+0xa2>
 8003438:	3604      	adds	r6, #4
 800343a:	0173      	lsls	r3, r6, #5
 800343c:	d505      	bpl.n	800344a <__aeabi_fadd+0xb2>
 800343e:	2aff      	cmp	r2, #255	; 0xff
 8003440:	d064      	beq.n	800350c <__aeabi_fadd+0x174>
 8003442:	4ca7      	ldr	r4, [pc, #668]	; (80036e0 <__aeabi_fadd+0x348>)
 8003444:	4026      	ands	r6, r4
 8003446:	1c14      	adds	r4, r2, #0
 8003448:	3201      	adds	r2, #1
 800344a:	08f6      	lsrs	r6, r6, #3
 800344c:	d04a      	beq.n	80034e4 <__aeabi_fadd+0x14c>
 800344e:	27ff      	movs	r7, #255	; 0xff
 8003450:	403a      	ands	r2, r7
 8003452:	0fd0      	lsrs	r0, r2, #31
 8003454:	2300      	movs	r3, #0
 8003456:	2101      	movs	r1, #1
 8003458:	4291      	cmp	r1, r2
 800345a:	4143      	adcs	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d041      	beq.n	80034e4 <__aeabi_fadd+0x14c>
 8003460:	2c00      	cmp	r4, #0
 8003462:	d043      	beq.n	80034ec <__aeabi_fadd+0x154>
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	03c8      	lsls	r0, r1, #15
 8003468:	4306      	orrs	r6, r0
 800346a:	0273      	lsls	r3, r6, #9
 800346c:	0a58      	lsrs	r0, r3, #9
 800346e:	b2e4      	uxtb	r4, r4
 8003470:	05e4      	lsls	r4, r4, #23
 8003472:	07ed      	lsls	r5, r5, #31
 8003474:	4320      	orrs	r0, r4
 8003476:	4328      	orrs	r0, r5
 8003478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800347a:	1b19      	subs	r1, r3, r4
 800347c:	2900      	cmp	r1, #0
 800347e:	dd48      	ble.n	8003512 <__aeabi_fadd+0x17a>
 8003480:	2c00      	cmp	r4, #0
 8003482:	d01b      	beq.n	80034bc <__aeabi_fadd+0x124>
 8003484:	2bff      	cmp	r3, #255	; 0xff
 8003486:	d023      	beq.n	80034d0 <__aeabi_fadd+0x138>
 8003488:	2680      	movs	r6, #128	; 0x80
 800348a:	04f4      	lsls	r4, r6, #19
 800348c:	4327      	orrs	r7, r4
 800348e:	2601      	movs	r6, #1
 8003490:	291b      	cmp	r1, #27
 8003492:	dd6e      	ble.n	8003572 <__aeabi_fadd+0x1da>
 8003494:	1836      	adds	r6, r6, r0
 8003496:	1c1c      	adds	r4, r3, #0
 8003498:	0173      	lsls	r3, r6, #5
 800349a:	d521      	bpl.n	80034e0 <__aeabi_fadd+0x148>
 800349c:	1c63      	adds	r3, r4, #1
 800349e:	2bff      	cmp	r3, #255	; 0xff
 80034a0:	d077      	beq.n	8003592 <__aeabi_fadd+0x1fa>
 80034a2:	488f      	ldr	r0, [pc, #572]	; (80036e0 <__aeabi_fadd+0x348>)
 80034a4:	1ca2      	adds	r2, r4, #2
 80034a6:	4030      	ands	r0, r6
 80034a8:	2601      	movs	r6, #1
 80034aa:	4006      	ands	r6, r0
 80034ac:	0841      	lsrs	r1, r0, #1
 80034ae:	430e      	orrs	r6, r1
 80034b0:	1c1c      	adds	r4, r3, #0
 80034b2:	e7bd      	b.n	8003430 <__aeabi_fadd+0x98>
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	1c06      	adds	r6, r0, #0
 80034b8:	1c1c      	adds	r4, r3, #0
 80034ba:	e7b9      	b.n	8003430 <__aeabi_fadd+0x98>
 80034bc:	2f00      	cmp	r7, #0
 80034be:	d0f9      	beq.n	80034b4 <__aeabi_fadd+0x11c>
 80034c0:	3901      	subs	r1, #1
 80034c2:	2900      	cmp	r1, #0
 80034c4:	d102      	bne.n	80034cc <__aeabi_fadd+0x134>
 80034c6:	183e      	adds	r6, r7, r0
 80034c8:	1c1c      	adds	r4, r3, #0
 80034ca:	e7e5      	b.n	8003498 <__aeabi_fadd+0x100>
 80034cc:	2bff      	cmp	r3, #255	; 0xff
 80034ce:	d1de      	bne.n	800348e <__aeabi_fadd+0xf6>
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	1c06      	adds	r6, r0, #0
 80034d4:	0052      	lsls	r2, r2, #1
 80034d6:	24ff      	movs	r4, #255	; 0xff
 80034d8:	e7aa      	b.n	8003430 <__aeabi_fadd+0x98>
 80034da:	4e81      	ldr	r6, [pc, #516]	; (80036e0 <__aeabi_fadd+0x348>)
 80034dc:	1a24      	subs	r4, r4, r0
 80034de:	401e      	ands	r6, r3
 80034e0:	1c62      	adds	r2, r4, #1
 80034e2:	e7a5      	b.n	8003430 <__aeabi_fadd+0x98>
 80034e4:	0276      	lsls	r6, r6, #9
 80034e6:	0a70      	lsrs	r0, r6, #9
 80034e8:	b2e4      	uxtb	r4, r4
 80034ea:	e7c1      	b.n	8003470 <__aeabi_fadd+0xd8>
 80034ec:	0272      	lsls	r2, r6, #9
 80034ee:	0a50      	lsrs	r0, r2, #9
 80034f0:	e7be      	b.n	8003470 <__aeabi_fadd+0xd8>
 80034f2:	2a00      	cmp	r2, #0
 80034f4:	d11d      	bne.n	8003532 <__aeabi_fadd+0x19a>
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	b2d4      	uxtb	r4, r2
 80034fa:	2c01      	cmp	r4, #1
 80034fc:	dd61      	ble.n	80035c2 <__aeabi_fadd+0x22a>
 80034fe:	1bc6      	subs	r6, r0, r7
 8003500:	0172      	lsls	r2, r6, #5
 8003502:	d52d      	bpl.n	8003560 <__aeabi_fadd+0x1c8>
 8003504:	1a3e      	subs	r6, r7, r0
 8003506:	1c1c      	adds	r4, r3, #0
 8003508:	1c0d      	adds	r5, r1, #0
 800350a:	e77c      	b.n	8003406 <__aeabi_fadd+0x6e>
 800350c:	24ff      	movs	r4, #255	; 0xff
 800350e:	2000      	movs	r0, #0
 8003510:	e7ae      	b.n	8003470 <__aeabi_fadd+0xd8>
 8003512:	2900      	cmp	r1, #0
 8003514:	d160      	bne.n	80035d8 <__aeabi_fadd+0x240>
 8003516:	1c5c      	adds	r4, r3, #1
 8003518:	b2e1      	uxtb	r1, r4
 800351a:	2901      	cmp	r1, #1
 800351c:	dd40      	ble.n	80035a0 <__aeabi_fadd+0x208>
 800351e:	2cff      	cmp	r4, #255	; 0xff
 8003520:	d07a      	beq.n	8003618 <__aeabi_fadd+0x280>
 8003522:	183e      	adds	r6, r7, r0
 8003524:	0876      	lsrs	r6, r6, #1
 8003526:	1c9a      	adds	r2, r3, #2
 8003528:	e782      	b.n	8003430 <__aeabi_fadd+0x98>
 800352a:	2bff      	cmp	r3, #255	; 0xff
 800352c:	d000      	beq.n	8003530 <__aeabi_fadd+0x198>
 800352e:	e757      	b.n	80033e0 <__aeabi_fadd+0x48>
 8003530:	e7ce      	b.n	80034d0 <__aeabi_fadd+0x138>
 8003532:	4252      	negs	r2, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d026      	beq.n	8003586 <__aeabi_fadd+0x1ee>
 8003538:	2cff      	cmp	r4, #255	; 0xff
 800353a:	d061      	beq.n	8003600 <__aeabi_fadd+0x268>
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	04dd      	lsls	r5, r3, #19
 8003540:	4328      	orrs	r0, r5
 8003542:	2601      	movs	r6, #1
 8003544:	2a1b      	cmp	r2, #27
 8003546:	dc08      	bgt.n	800355a <__aeabi_fadd+0x1c2>
 8003548:	1c05      	adds	r5, r0, #0
 800354a:	2620      	movs	r6, #32
 800354c:	40d5      	lsrs	r5, r2
 800354e:	1ab2      	subs	r2, r6, r2
 8003550:	1c06      	adds	r6, r0, #0
 8003552:	4096      	lsls	r6, r2
 8003554:	1e70      	subs	r0, r6, #1
 8003556:	4186      	sbcs	r6, r0
 8003558:	432e      	orrs	r6, r5
 800355a:	1bbe      	subs	r6, r7, r6
 800355c:	1c0d      	adds	r5, r1, #0
 800355e:	e74d      	b.n	80033fc <__aeabi_fadd+0x64>
 8003560:	1c1c      	adds	r4, r3, #0
 8003562:	2e00      	cmp	r6, #0
 8003564:	d000      	beq.n	8003568 <__aeabi_fadd+0x1d0>
 8003566:	e74e      	b.n	8003406 <__aeabi_fadd+0x6e>
 8003568:	2500      	movs	r5, #0
 800356a:	2201      	movs	r2, #1
 800356c:	2604      	movs	r6, #4
 800356e:	2400      	movs	r4, #0
 8003570:	e763      	b.n	800343a <__aeabi_fadd+0xa2>
 8003572:	1c3c      	adds	r4, r7, #0
 8003574:	2620      	movs	r6, #32
 8003576:	40cc      	lsrs	r4, r1
 8003578:	1a71      	subs	r1, r6, r1
 800357a:	408f      	lsls	r7, r1
 800357c:	1c3e      	adds	r6, r7, #0
 800357e:	1e77      	subs	r7, r6, #1
 8003580:	41be      	sbcs	r6, r7
 8003582:	4326      	orrs	r6, r4
 8003584:	e786      	b.n	8003494 <__aeabi_fadd+0xfc>
 8003586:	2800      	cmp	r0, #0
 8003588:	d140      	bne.n	800360c <__aeabi_fadd+0x274>
 800358a:	1c62      	adds	r2, r4, #1
 800358c:	1c3e      	adds	r6, r7, #0
 800358e:	1c0d      	adds	r5, r1, #0
 8003590:	e74e      	b.n	8003430 <__aeabi_fadd+0x98>
 8003592:	2501      	movs	r5, #1
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	4015      	ands	r5, r2
 8003598:	24ff      	movs	r4, #255	; 0xff
 800359a:	005a      	lsls	r2, r3, #1
 800359c:	2604      	movs	r6, #4
 800359e:	e74c      	b.n	800343a <__aeabi_fadd+0xa2>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d16f      	bne.n	8003684 <__aeabi_fadd+0x2ec>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	d100      	bne.n	80035aa <__aeabi_fadd+0x212>
 80035a8:	e091      	b.n	80036ce <__aeabi_fadd+0x336>
 80035aa:	2f00      	cmp	r7, #0
 80035ac:	d100      	bne.n	80035b0 <__aeabi_fadd+0x218>
 80035ae:	e092      	b.n	80036d6 <__aeabi_fadd+0x33e>
 80035b0:	183e      	adds	r6, r7, r0
 80035b2:	0171      	lsls	r1, r6, #5
 80035b4:	d400      	bmi.n	80035b8 <__aeabi_fadd+0x220>
 80035b6:	e087      	b.n	80036c8 <__aeabi_fadd+0x330>
 80035b8:	4849      	ldr	r0, [pc, #292]	; (80036e0 <__aeabi_fadd+0x348>)
 80035ba:	2202      	movs	r2, #2
 80035bc:	4006      	ands	r6, r0
 80035be:	2401      	movs	r4, #1
 80035c0:	e736      	b.n	8003430 <__aeabi_fadd+0x98>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d110      	bne.n	80035e8 <__aeabi_fadd+0x250>
 80035c6:	2800      	cmp	r0, #0
 80035c8:	d13f      	bne.n	800364a <__aeabi_fadd+0x2b2>
 80035ca:	2f00      	cmp	r7, #0
 80035cc:	d0cc      	beq.n	8003568 <__aeabi_fadd+0x1d0>
 80035ce:	1c3e      	adds	r6, r7, #0
 80035d0:	1c0d      	adds	r5, r1, #0
 80035d2:	2201      	movs	r2, #1
 80035d4:	2400      	movs	r4, #0
 80035d6:	e72b      	b.n	8003430 <__aeabi_fadd+0x98>
 80035d8:	4249      	negs	r1, r1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d122      	bne.n	8003624 <__aeabi_fadd+0x28c>
 80035de:	2800      	cmp	r0, #0
 80035e0:	d163      	bne.n	80036aa <__aeabi_fadd+0x312>
 80035e2:	1c62      	adds	r2, r4, #1
 80035e4:	1c3e      	adds	r6, r7, #0
 80035e6:	e723      	b.n	8003430 <__aeabi_fadd+0x98>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d139      	bne.n	8003660 <__aeabi_fadd+0x2c8>
 80035ec:	2f00      	cmp	r7, #0
 80035ee:	d107      	bne.n	8003600 <__aeabi_fadd+0x268>
 80035f0:	2680      	movs	r6, #128	; 0x80
 80035f2:	0072      	lsls	r2, r6, #1
 80035f4:	2500      	movs	r5, #0
 80035f6:	4e3b      	ldr	r6, [pc, #236]	; (80036e4 <__aeabi_fadd+0x34c>)
 80035f8:	24ff      	movs	r4, #255	; 0xff
 80035fa:	e71e      	b.n	800343a <__aeabi_fadd+0xa2>
 80035fc:	2cff      	cmp	r4, #255	; 0xff
 80035fe:	d1a0      	bne.n	8003542 <__aeabi_fadd+0x1aa>
 8003600:	1c0d      	adds	r5, r1, #0
 8003602:	2180      	movs	r1, #128	; 0x80
 8003604:	1c3e      	adds	r6, r7, #0
 8003606:	004a      	lsls	r2, r1, #1
 8003608:	24ff      	movs	r4, #255	; 0xff
 800360a:	e711      	b.n	8003430 <__aeabi_fadd+0x98>
 800360c:	3a01      	subs	r2, #1
 800360e:	2a00      	cmp	r2, #0
 8003610:	d1f4      	bne.n	80035fc <__aeabi_fadd+0x264>
 8003612:	1a3e      	subs	r6, r7, r0
 8003614:	1c0d      	adds	r5, r1, #0
 8003616:	e6f1      	b.n	80033fc <__aeabi_fadd+0x64>
 8003618:	2501      	movs	r5, #1
 800361a:	2780      	movs	r7, #128	; 0x80
 800361c:	4015      	ands	r5, r2
 800361e:	2604      	movs	r6, #4
 8003620:	007a      	lsls	r2, r7, #1
 8003622:	e70a      	b.n	800343a <__aeabi_fadd+0xa2>
 8003624:	2cff      	cmp	r4, #255	; 0xff
 8003626:	d047      	beq.n	80036b8 <__aeabi_fadd+0x320>
 8003628:	2680      	movs	r6, #128	; 0x80
 800362a:	04f3      	lsls	r3, r6, #19
 800362c:	4318      	orrs	r0, r3
 800362e:	2601      	movs	r6, #1
 8003630:	291b      	cmp	r1, #27
 8003632:	dc08      	bgt.n	8003646 <__aeabi_fadd+0x2ae>
 8003634:	1c03      	adds	r3, r0, #0
 8003636:	2620      	movs	r6, #32
 8003638:	40cb      	lsrs	r3, r1
 800363a:	1a71      	subs	r1, r6, r1
 800363c:	1c06      	adds	r6, r0, #0
 800363e:	408e      	lsls	r6, r1
 8003640:	1e70      	subs	r0, r6, #1
 8003642:	4186      	sbcs	r6, r0
 8003644:	431e      	orrs	r6, r3
 8003646:	19f6      	adds	r6, r6, r7
 8003648:	e726      	b.n	8003498 <__aeabi_fadd+0x100>
 800364a:	1c06      	adds	r6, r0, #0
 800364c:	2f00      	cmp	r7, #0
 800364e:	d03b      	beq.n	80036c8 <__aeabi_fadd+0x330>
 8003650:	1bc6      	subs	r6, r0, r7
 8003652:	0172      	lsls	r2, r6, #5
 8003654:	d535      	bpl.n	80036c2 <__aeabi_fadd+0x32a>
 8003656:	1a3e      	subs	r6, r7, r0
 8003658:	1c0d      	adds	r5, r1, #0
 800365a:	2201      	movs	r2, #1
 800365c:	2400      	movs	r4, #0
 800365e:	e6e7      	b.n	8003430 <__aeabi_fadd+0x98>
 8003660:	2f00      	cmp	r7, #0
 8003662:	d100      	bne.n	8003666 <__aeabi_fadd+0x2ce>
 8003664:	e734      	b.n	80034d0 <__aeabi_fadd+0x138>
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	08c0      	lsrs	r0, r0, #3
 800366a:	03db      	lsls	r3, r3, #15
 800366c:	4218      	tst	r0, r3
 800366e:	d004      	beq.n	800367a <__aeabi_fadd+0x2e2>
 8003670:	08ff      	lsrs	r7, r7, #3
 8003672:	421f      	tst	r7, r3
 8003674:	d101      	bne.n	800367a <__aeabi_fadd+0x2e2>
 8003676:	1c38      	adds	r0, r7, #0
 8003678:	1c0d      	adds	r5, r1, #0
 800367a:	2780      	movs	r7, #128	; 0x80
 800367c:	00c6      	lsls	r6, r0, #3
 800367e:	007a      	lsls	r2, r7, #1
 8003680:	24ff      	movs	r4, #255	; 0xff
 8003682:	e6d5      	b.n	8003430 <__aeabi_fadd+0x98>
 8003684:	2800      	cmp	r0, #0
 8003686:	d017      	beq.n	80036b8 <__aeabi_fadd+0x320>
 8003688:	2f00      	cmp	r7, #0
 800368a:	d100      	bne.n	800368e <__aeabi_fadd+0x2f6>
 800368c:	e720      	b.n	80034d0 <__aeabi_fadd+0x138>
 800368e:	2280      	movs	r2, #128	; 0x80
 8003690:	08c6      	lsrs	r6, r0, #3
 8003692:	03d3      	lsls	r3, r2, #15
 8003694:	421e      	tst	r6, r3
 8003696:	d003      	beq.n	80036a0 <__aeabi_fadd+0x308>
 8003698:	08ff      	lsrs	r7, r7, #3
 800369a:	421f      	tst	r7, r3
 800369c:	d100      	bne.n	80036a0 <__aeabi_fadd+0x308>
 800369e:	1c3e      	adds	r6, r7, #0
 80036a0:	2780      	movs	r7, #128	; 0x80
 80036a2:	00f6      	lsls	r6, r6, #3
 80036a4:	007a      	lsls	r2, r7, #1
 80036a6:	24ff      	movs	r4, #255	; 0xff
 80036a8:	e6c2      	b.n	8003430 <__aeabi_fadd+0x98>
 80036aa:	3901      	subs	r1, #1
 80036ac:	183e      	adds	r6, r7, r0
 80036ae:	2900      	cmp	r1, #0
 80036b0:	d100      	bne.n	80036b4 <__aeabi_fadd+0x31c>
 80036b2:	e6f1      	b.n	8003498 <__aeabi_fadd+0x100>
 80036b4:	2cff      	cmp	r4, #255	; 0xff
 80036b6:	d1ba      	bne.n	800362e <__aeabi_fadd+0x296>
 80036b8:	2380      	movs	r3, #128	; 0x80
 80036ba:	1c3e      	adds	r6, r7, #0
 80036bc:	005a      	lsls	r2, r3, #1
 80036be:	24ff      	movs	r4, #255	; 0xff
 80036c0:	e6b6      	b.n	8003430 <__aeabi_fadd+0x98>
 80036c2:	2e00      	cmp	r6, #0
 80036c4:	d100      	bne.n	80036c8 <__aeabi_fadd+0x330>
 80036c6:	e74f      	b.n	8003568 <__aeabi_fadd+0x1d0>
 80036c8:	2201      	movs	r2, #1
 80036ca:	2400      	movs	r4, #0
 80036cc:	e6b0      	b.n	8003430 <__aeabi_fadd+0x98>
 80036ce:	1c3e      	adds	r6, r7, #0
 80036d0:	2201      	movs	r2, #1
 80036d2:	2400      	movs	r4, #0
 80036d4:	e6ac      	b.n	8003430 <__aeabi_fadd+0x98>
 80036d6:	1c06      	adds	r6, r0, #0
 80036d8:	2201      	movs	r2, #1
 80036da:	2400      	movs	r4, #0
 80036dc:	e6a8      	b.n	8003430 <__aeabi_fadd+0x98>
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	fbffffff 	.word	0xfbffffff
 80036e4:	03fffffc 	.word	0x03fffffc

080036e8 <__aeabi_fdiv>:
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ea:	465f      	mov	r7, fp
 80036ec:	4656      	mov	r6, sl
 80036ee:	464d      	mov	r5, r9
 80036f0:	4644      	mov	r4, r8
 80036f2:	b4f0      	push	{r4, r5, r6, r7}
 80036f4:	0fc2      	lsrs	r2, r0, #31
 80036f6:	1c0e      	adds	r6, r1, #0
 80036f8:	0245      	lsls	r5, r0, #9
 80036fa:	0044      	lsls	r4, r0, #1
 80036fc:	b2d1      	uxtb	r1, r2
 80036fe:	b083      	sub	sp, #12
 8003700:	0a6d      	lsrs	r5, r5, #9
 8003702:	0e24      	lsrs	r4, r4, #24
 8003704:	4692      	mov	sl, r2
 8003706:	4689      	mov	r9, r1
 8003708:	d107      	bne.n	800371a <__aeabi_fdiv+0x32>
 800370a:	2d00      	cmp	r5, #0
 800370c:	d000      	beq.n	8003710 <__aeabi_fdiv+0x28>
 800370e:	e08d      	b.n	800382c <__aeabi_fdiv+0x144>
 8003710:	2704      	movs	r7, #4
 8003712:	2301      	movs	r3, #1
 8003714:	46bb      	mov	fp, r7
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	e00a      	b.n	8003730 <__aeabi_fdiv+0x48>
 800371a:	2cff      	cmp	r4, #255	; 0xff
 800371c:	d054      	beq.n	80037c8 <__aeabi_fdiv+0xe0>
 800371e:	2080      	movs	r0, #128	; 0x80
 8003720:	0401      	lsls	r1, r0, #16
 8003722:	430d      	orrs	r5, r1
 8003724:	2700      	movs	r7, #0
 8003726:	2300      	movs	r3, #0
 8003728:	00ed      	lsls	r5, r5, #3
 800372a:	3c7f      	subs	r4, #127	; 0x7f
 800372c:	46bb      	mov	fp, r7
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	1c37      	adds	r7, r6, #0
 8003732:	0079      	lsls	r1, r7, #1
 8003734:	0ffb      	lsrs	r3, r7, #31
 8003736:	0276      	lsls	r6, r6, #9
 8003738:	0a76      	lsrs	r6, r6, #9
 800373a:	0e08      	lsrs	r0, r1, #24
 800373c:	4698      	mov	r8, r3
 800373e:	b2df      	uxtb	r7, r3
 8003740:	2800      	cmp	r0, #0
 8003742:	d148      	bne.n	80037d6 <__aeabi_fdiv+0xee>
 8003744:	2301      	movs	r3, #1
 8003746:	2e00      	cmp	r6, #0
 8003748:	d000      	beq.n	800374c <__aeabi_fdiv+0x64>
 800374a:	e07c      	b.n	8003846 <__aeabi_fdiv+0x15e>
 800374c:	464a      	mov	r2, r9
 800374e:	4659      	mov	r1, fp
 8003750:	407a      	eors	r2, r7
 8003752:	4319      	orrs	r1, r3
 8003754:	290f      	cmp	r1, #15
 8003756:	d94c      	bls.n	80037f2 <__aeabi_fdiv+0x10a>
 8003758:	1a24      	subs	r4, r4, r0
 800375a:	9401      	str	r4, [sp, #4]
 800375c:	016d      	lsls	r5, r5, #5
 800375e:	0176      	lsls	r6, r6, #5
 8003760:	42b5      	cmp	r5, r6
 8003762:	d300      	bcc.n	8003766 <__aeabi_fdiv+0x7e>
 8003764:	e0ae      	b.n	80038c4 <__aeabi_fdiv+0x1dc>
 8003766:	9801      	ldr	r0, [sp, #4]
 8003768:	241b      	movs	r4, #27
 800376a:	3801      	subs	r0, #1
 800376c:	9001      	str	r0, [sp, #4]
 800376e:	2100      	movs	r1, #0
 8003770:	2001      	movs	r0, #1
 8003772:	1e63      	subs	r3, r4, #1
 8003774:	1c07      	adds	r7, r0, #0
 8003776:	401f      	ands	r7, r3
 8003778:	0049      	lsls	r1, r1, #1
 800377a:	006b      	lsls	r3, r5, #1
 800377c:	42b3      	cmp	r3, r6
 800377e:	d200      	bcs.n	8003782 <__aeabi_fdiv+0x9a>
 8003780:	e0b1      	b.n	80038e6 <__aeabi_fdiv+0x1fe>
 8003782:	1b9b      	subs	r3, r3, r6
 8003784:	4301      	orrs	r1, r0
 8003786:	3c01      	subs	r4, #1
 8003788:	2c00      	cmp	r4, #0
 800378a:	dc00      	bgt.n	800378e <__aeabi_fdiv+0xa6>
 800378c:	e0a6      	b.n	80038dc <__aeabi_fdiv+0x1f4>
 800378e:	2f00      	cmp	r7, #0
 8003790:	d00c      	beq.n	80037ac <__aeabi_fdiv+0xc4>
 8003792:	1c1d      	adds	r5, r3, #0
 8003794:	0049      	lsls	r1, r1, #1
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	42b3      	cmp	r3, r6
 800379a:	d201      	bcs.n	80037a0 <__aeabi_fdiv+0xb8>
 800379c:	2d00      	cmp	r5, #0
 800379e:	da01      	bge.n	80037a4 <__aeabi_fdiv+0xbc>
 80037a0:	1b9b      	subs	r3, r3, r6
 80037a2:	4301      	orrs	r1, r0
 80037a4:	3c01      	subs	r4, #1
 80037a6:	2c00      	cmp	r4, #0
 80037a8:	dc00      	bgt.n	80037ac <__aeabi_fdiv+0xc4>
 80037aa:	e097      	b.n	80038dc <__aeabi_fdiv+0x1f4>
 80037ac:	005d      	lsls	r5, r3, #1
 80037ae:	0049      	lsls	r1, r1, #1
 80037b0:	42b5      	cmp	r5, r6
 80037b2:	d201      	bcs.n	80037b8 <__aeabi_fdiv+0xd0>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	da01      	bge.n	80037bc <__aeabi_fdiv+0xd4>
 80037b8:	1bad      	subs	r5, r5, r6
 80037ba:	4301      	orrs	r1, r0
 80037bc:	3c01      	subs	r4, #1
 80037be:	006b      	lsls	r3, r5, #1
 80037c0:	0049      	lsls	r1, r1, #1
 80037c2:	42b3      	cmp	r3, r6
 80037c4:	d2ec      	bcs.n	80037a0 <__aeabi_fdiv+0xb8>
 80037c6:	e7e9      	b.n	800379c <__aeabi_fdiv+0xb4>
 80037c8:	2d00      	cmp	r5, #0
 80037ca:	d12a      	bne.n	8003822 <__aeabi_fdiv+0x13a>
 80037cc:	2208      	movs	r2, #8
 80037ce:	2002      	movs	r0, #2
 80037d0:	4693      	mov	fp, r2
 80037d2:	9000      	str	r0, [sp, #0]
 80037d4:	e7ac      	b.n	8003730 <__aeabi_fdiv+0x48>
 80037d6:	28ff      	cmp	r0, #255	; 0xff
 80037d8:	d01e      	beq.n	8003818 <__aeabi_fdiv+0x130>
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	041a      	lsls	r2, r3, #16
 80037de:	4316      	orrs	r6, r2
 80037e0:	2300      	movs	r3, #0
 80037e2:	464a      	mov	r2, r9
 80037e4:	4659      	mov	r1, fp
 80037e6:	00f6      	lsls	r6, r6, #3
 80037e8:	387f      	subs	r0, #127	; 0x7f
 80037ea:	407a      	eors	r2, r7
 80037ec:	4319      	orrs	r1, r3
 80037ee:	290f      	cmp	r1, #15
 80037f0:	d8b2      	bhi.n	8003758 <__aeabi_fdiv+0x70>
 80037f2:	0089      	lsls	r1, r1, #2
 80037f4:	468b      	mov	fp, r1
 80037f6:	4950      	ldr	r1, [pc, #320]	; (8003938 <__aeabi_fdiv+0x250>)
 80037f8:	4459      	add	r1, fp
 80037fa:	6809      	ldr	r1, [r1, #0]
 80037fc:	468f      	mov	pc, r1
 80037fe:	23ff      	movs	r3, #255	; 0xff
 8003800:	2000      	movs	r0, #0
 8003802:	05dd      	lsls	r5, r3, #23
 8003804:	07d2      	lsls	r2, r2, #31
 8003806:	4328      	orrs	r0, r5
 8003808:	4310      	orrs	r0, r2
 800380a:	b003      	add	sp, #12
 800380c:	bc3c      	pop	{r2, r3, r4, r5}
 800380e:	4690      	mov	r8, r2
 8003810:	4699      	mov	r9, r3
 8003812:	46a2      	mov	sl, r4
 8003814:	46ab      	mov	fp, r5
 8003816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003818:	1c33      	adds	r3, r6, #0
 800381a:	1e5a      	subs	r2, r3, #1
 800381c:	4193      	sbcs	r3, r2
 800381e:	3302      	adds	r3, #2
 8003820:	e794      	b.n	800374c <__aeabi_fdiv+0x64>
 8003822:	200c      	movs	r0, #12
 8003824:	2103      	movs	r1, #3
 8003826:	4683      	mov	fp, r0
 8003828:	9100      	str	r1, [sp, #0]
 800382a:	e781      	b.n	8003730 <__aeabi_fdiv+0x48>
 800382c:	1c28      	adds	r0, r5, #0
 800382e:	f002 fb4b 	bl	8005ec8 <__clzsi2>
 8003832:	2776      	movs	r7, #118	; 0x76
 8003834:	1f41      	subs	r1, r0, #5
 8003836:	427c      	negs	r4, r7
 8003838:	2300      	movs	r3, #0
 800383a:	2200      	movs	r2, #0
 800383c:	408d      	lsls	r5, r1
 800383e:	1a24      	subs	r4, r4, r0
 8003840:	469b      	mov	fp, r3
 8003842:	9200      	str	r2, [sp, #0]
 8003844:	e774      	b.n	8003730 <__aeabi_fdiv+0x48>
 8003846:	1c30      	adds	r0, r6, #0
 8003848:	f002 fb3e 	bl	8005ec8 <__clzsi2>
 800384c:	2276      	movs	r2, #118	; 0x76
 800384e:	1f43      	subs	r3, r0, #5
 8003850:	4251      	negs	r1, r2
 8003852:	409e      	lsls	r6, r3
 8003854:	1a08      	subs	r0, r1, r0
 8003856:	2300      	movs	r3, #0
 8003858:	e778      	b.n	800374c <__aeabi_fdiv+0x64>
 800385a:	2300      	movs	r3, #0
 800385c:	2000      	movs	r0, #0
 800385e:	e7d0      	b.n	8003802 <__aeabi_fdiv+0x11a>
 8003860:	2200      	movs	r2, #0
 8003862:	4836      	ldr	r0, [pc, #216]	; (800393c <__aeabi_fdiv+0x254>)
 8003864:	23ff      	movs	r3, #255	; 0xff
 8003866:	e7cc      	b.n	8003802 <__aeabi_fdiv+0x11a>
 8003868:	1c35      	adds	r5, r6, #0
 800386a:	1c3a      	adds	r2, r7, #0
 800386c:	2b02      	cmp	r3, #2
 800386e:	d0c6      	beq.n	80037fe <__aeabi_fdiv+0x116>
 8003870:	2b03      	cmp	r3, #3
 8003872:	d059      	beq.n	8003928 <__aeabi_fdiv+0x240>
 8003874:	2b01      	cmp	r3, #1
 8003876:	d0f0      	beq.n	800385a <__aeabi_fdiv+0x172>
 8003878:	9b01      	ldr	r3, [sp, #4]
 800387a:	337f      	adds	r3, #127	; 0x7f
 800387c:	2b00      	cmp	r3, #0
 800387e:	dd36      	ble.n	80038ee <__aeabi_fdiv+0x206>
 8003880:	240f      	movs	r4, #15
 8003882:	402c      	ands	r4, r5
 8003884:	2c04      	cmp	r4, #4
 8003886:	d000      	beq.n	800388a <__aeabi_fdiv+0x1a2>
 8003888:	3504      	adds	r5, #4
 800388a:	0129      	lsls	r1, r5, #4
 800388c:	d503      	bpl.n	8003896 <__aeabi_fdiv+0x1ae>
 800388e:	482c      	ldr	r0, [pc, #176]	; (8003940 <__aeabi_fdiv+0x258>)
 8003890:	9b01      	ldr	r3, [sp, #4]
 8003892:	4005      	ands	r5, r0
 8003894:	3380      	adds	r3, #128	; 0x80
 8003896:	2bfe      	cmp	r3, #254	; 0xfe
 8003898:	dcb1      	bgt.n	80037fe <__aeabi_fdiv+0x116>
 800389a:	01af      	lsls	r7, r5, #6
 800389c:	0a78      	lsrs	r0, r7, #9
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	e7af      	b.n	8003802 <__aeabi_fdiv+0x11a>
 80038a2:	2780      	movs	r7, #128	; 0x80
 80038a4:	03f8      	lsls	r0, r7, #15
 80038a6:	4205      	tst	r5, r0
 80038a8:	d010      	beq.n	80038cc <__aeabi_fdiv+0x1e4>
 80038aa:	4206      	tst	r6, r0
 80038ac:	d10e      	bne.n	80038cc <__aeabi_fdiv+0x1e4>
 80038ae:	4330      	orrs	r0, r6
 80038b0:	0246      	lsls	r6, r0, #9
 80038b2:	2201      	movs	r2, #1
 80038b4:	4645      	mov	r5, r8
 80038b6:	0a70      	lsrs	r0, r6, #9
 80038b8:	402a      	ands	r2, r5
 80038ba:	23ff      	movs	r3, #255	; 0xff
 80038bc:	e7a1      	b.n	8003802 <__aeabi_fdiv+0x11a>
 80038be:	464a      	mov	r2, r9
 80038c0:	9b00      	ldr	r3, [sp, #0]
 80038c2:	e7d3      	b.n	800386c <__aeabi_fdiv+0x184>
 80038c4:	1bad      	subs	r5, r5, r6
 80038c6:	241a      	movs	r4, #26
 80038c8:	2101      	movs	r1, #1
 80038ca:	e751      	b.n	8003770 <__aeabi_fdiv+0x88>
 80038cc:	4328      	orrs	r0, r5
 80038ce:	0242      	lsls	r2, r0, #9
 80038d0:	0a50      	lsrs	r0, r2, #9
 80038d2:	4651      	mov	r1, sl
 80038d4:	2201      	movs	r2, #1
 80038d6:	400a      	ands	r2, r1
 80038d8:	23ff      	movs	r3, #255	; 0xff
 80038da:	e792      	b.n	8003802 <__aeabi_fdiv+0x11a>
 80038dc:	1c1d      	adds	r5, r3, #0
 80038de:	1e6b      	subs	r3, r5, #1
 80038e0:	419d      	sbcs	r5, r3
 80038e2:	430d      	orrs	r5, r1
 80038e4:	e7c8      	b.n	8003878 <__aeabi_fdiv+0x190>
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	db00      	blt.n	80038ec <__aeabi_fdiv+0x204>
 80038ea:	e74c      	b.n	8003786 <__aeabi_fdiv+0x9e>
 80038ec:	e749      	b.n	8003782 <__aeabi_fdiv+0x9a>
 80038ee:	217e      	movs	r1, #126	; 0x7e
 80038f0:	9e01      	ldr	r6, [sp, #4]
 80038f2:	424b      	negs	r3, r1
 80038f4:	1b9b      	subs	r3, r3, r6
 80038f6:	2b1b      	cmp	r3, #27
 80038f8:	dcaf      	bgt.n	800385a <__aeabi_fdiv+0x172>
 80038fa:	9801      	ldr	r0, [sp, #4]
 80038fc:	1c2c      	adds	r4, r5, #0
 80038fe:	309e      	adds	r0, #158	; 0x9e
 8003900:	4085      	lsls	r5, r0
 8003902:	40dc      	lsrs	r4, r3
 8003904:	1c2b      	adds	r3, r5, #0
 8003906:	1e5d      	subs	r5, r3, #1
 8003908:	41ab      	sbcs	r3, r5
 800390a:	4323      	orrs	r3, r4
 800390c:	250f      	movs	r5, #15
 800390e:	401d      	ands	r5, r3
 8003910:	2d04      	cmp	r5, #4
 8003912:	d000      	beq.n	8003916 <__aeabi_fdiv+0x22e>
 8003914:	3304      	adds	r3, #4
 8003916:	0159      	lsls	r1, r3, #5
 8003918:	d502      	bpl.n	8003920 <__aeabi_fdiv+0x238>
 800391a:	2301      	movs	r3, #1
 800391c:	2000      	movs	r0, #0
 800391e:	e770      	b.n	8003802 <__aeabi_fdiv+0x11a>
 8003920:	019f      	lsls	r7, r3, #6
 8003922:	0a78      	lsrs	r0, r7, #9
 8003924:	2300      	movs	r3, #0
 8003926:	e76c      	b.n	8003802 <__aeabi_fdiv+0x11a>
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	03ce      	lsls	r6, r1, #15
 800392c:	432e      	orrs	r6, r5
 800392e:	0273      	lsls	r3, r6, #9
 8003930:	0a58      	lsrs	r0, r3, #9
 8003932:	23ff      	movs	r3, #255	; 0xff
 8003934:	e765      	b.n	8003802 <__aeabi_fdiv+0x11a>
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	08009f00 	.word	0x08009f00
 800393c:	007fffff 	.word	0x007fffff
 8003940:	f7ffffff 	.word	0xf7ffffff

08003944 <__aeabi_fmul>:
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	465f      	mov	r7, fp
 8003948:	4656      	mov	r6, sl
 800394a:	464d      	mov	r5, r9
 800394c:	4644      	mov	r4, r8
 800394e:	b4f0      	push	{r4, r5, r6, r7}
 8003950:	0fc2      	lsrs	r2, r0, #31
 8003952:	1c0f      	adds	r7, r1, #0
 8003954:	0244      	lsls	r4, r0, #9
 8003956:	0045      	lsls	r5, r0, #1
 8003958:	b2d1      	uxtb	r1, r2
 800395a:	b083      	sub	sp, #12
 800395c:	0a64      	lsrs	r4, r4, #9
 800395e:	0e2d      	lsrs	r5, r5, #24
 8003960:	4691      	mov	r9, r2
 8003962:	468a      	mov	sl, r1
 8003964:	d107      	bne.n	8003976 <__aeabi_fmul+0x32>
 8003966:	2c00      	cmp	r4, #0
 8003968:	d000      	beq.n	800396c <__aeabi_fmul+0x28>
 800396a:	e0a1      	b.n	8003ab0 <__aeabi_fmul+0x16c>
 800396c:	2604      	movs	r6, #4
 800396e:	2301      	movs	r3, #1
 8003970:	46b3      	mov	fp, r6
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	e00a      	b.n	800398c <__aeabi_fmul+0x48>
 8003976:	2dff      	cmp	r5, #255	; 0xff
 8003978:	d043      	beq.n	8003a02 <__aeabi_fmul+0xbe>
 800397a:	2080      	movs	r0, #128	; 0x80
 800397c:	0401      	lsls	r1, r0, #16
 800397e:	430c      	orrs	r4, r1
 8003980:	2600      	movs	r6, #0
 8003982:	2300      	movs	r3, #0
 8003984:	00e4      	lsls	r4, r4, #3
 8003986:	3d7f      	subs	r5, #127	; 0x7f
 8003988:	46b3      	mov	fp, r6
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	027e      	lsls	r6, r7, #9
 800398e:	007b      	lsls	r3, r7, #1
 8003990:	0fff      	lsrs	r7, r7, #31
 8003992:	b2fa      	uxtb	r2, r7
 8003994:	0a76      	lsrs	r6, r6, #9
 8003996:	0e18      	lsrs	r0, r3, #24
 8003998:	4690      	mov	r8, r2
 800399a:	d139      	bne.n	8003a10 <__aeabi_fmul+0xcc>
 800399c:	2301      	movs	r3, #1
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d000      	beq.n	80039a4 <__aeabi_fmul+0x60>
 80039a2:	e092      	b.n	8003aca <__aeabi_fmul+0x186>
 80039a4:	4651      	mov	r1, sl
 80039a6:	4642      	mov	r2, r8
 80039a8:	404a      	eors	r2, r1
 80039aa:	4659      	mov	r1, fp
 80039ac:	4319      	orrs	r1, r3
 80039ae:	290f      	cmp	r1, #15
 80039b0:	d93d      	bls.n	8003a2e <__aeabi_fmul+0xea>
 80039b2:	1828      	adds	r0, r5, r0
 80039b4:	b2a3      	uxth	r3, r4
 80039b6:	b2b7      	uxth	r7, r6
 80039b8:	9001      	str	r0, [sp, #4]
 80039ba:	1c18      	adds	r0, r3, #0
 80039bc:	0c31      	lsrs	r1, r6, #16
 80039be:	4378      	muls	r0, r7
 80039c0:	0c25      	lsrs	r5, r4, #16
 80039c2:	434b      	muls	r3, r1
 80039c4:	436f      	muls	r7, r5
 80039c6:	0c06      	lsrs	r6, r0, #16
 80039c8:	199c      	adds	r4, r3, r6
 80039ca:	19e3      	adds	r3, r4, r7
 80039cc:	434d      	muls	r5, r1
 80039ce:	429f      	cmp	r7, r3
 80039d0:	d900      	bls.n	80039d4 <__aeabi_fmul+0x90>
 80039d2:	e096      	b.n	8003b02 <__aeabi_fmul+0x1be>
 80039d4:	0401      	lsls	r1, r0, #16
 80039d6:	041c      	lsls	r4, r3, #16
 80039d8:	0c0e      	lsrs	r6, r1, #16
 80039da:	19a7      	adds	r7, r4, r6
 80039dc:	0c19      	lsrs	r1, r3, #16
 80039de:	01bc      	lsls	r4, r7, #6
 80039e0:	1e60      	subs	r0, r4, #1
 80039e2:	4184      	sbcs	r4, r0
 80039e4:	186e      	adds	r6, r5, r1
 80039e6:	0eb8      	lsrs	r0, r7, #26
 80039e8:	4304      	orrs	r4, r0
 80039ea:	01b3      	lsls	r3, r6, #6
 80039ec:	431c      	orrs	r4, r3
 80039ee:	0123      	lsls	r3, r4, #4
 80039f0:	d52d      	bpl.n	8003a4e <__aeabi_fmul+0x10a>
 80039f2:	9b01      	ldr	r3, [sp, #4]
 80039f4:	2501      	movs	r5, #1
 80039f6:	4025      	ands	r5, r4
 80039f8:	3301      	adds	r3, #1
 80039fa:	0864      	lsrs	r4, r4, #1
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	432c      	orrs	r4, r5
 8003a00:	e025      	b.n	8003a4e <__aeabi_fmul+0x10a>
 8003a02:	2c00      	cmp	r4, #0
 8003a04:	d14f      	bne.n	8003aa6 <__aeabi_fmul+0x162>
 8003a06:	2208      	movs	r2, #8
 8003a08:	2002      	movs	r0, #2
 8003a0a:	4693      	mov	fp, r2
 8003a0c:	9000      	str	r0, [sp, #0]
 8003a0e:	e7bd      	b.n	800398c <__aeabi_fmul+0x48>
 8003a10:	28ff      	cmp	r0, #255	; 0xff
 8003a12:	d043      	beq.n	8003a9c <__aeabi_fmul+0x158>
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	0411      	lsls	r1, r2, #16
 8003a18:	430e      	orrs	r6, r1
 8003a1a:	4642      	mov	r2, r8
 8003a1c:	4651      	mov	r1, sl
 8003a1e:	2300      	movs	r3, #0
 8003a20:	404a      	eors	r2, r1
 8003a22:	4659      	mov	r1, fp
 8003a24:	00f6      	lsls	r6, r6, #3
 8003a26:	387f      	subs	r0, #127	; 0x7f
 8003a28:	4319      	orrs	r1, r3
 8003a2a:	290f      	cmp	r1, #15
 8003a2c:	d8c1      	bhi.n	80039b2 <__aeabi_fmul+0x6e>
 8003a2e:	0089      	lsls	r1, r1, #2
 8003a30:	468b      	mov	fp, r1
 8003a32:	4947      	ldr	r1, [pc, #284]	; (8003b50 <__aeabi_fmul+0x20c>)
 8003a34:	4459      	add	r1, fp
 8003a36:	6809      	ldr	r1, [r1, #0]
 8003a38:	468f      	mov	pc, r1
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4648      	mov	r0, r9
 8003a3e:	4002      	ands	r2, r0
 8003a40:	9b00      	ldr	r3, [sp, #0]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d01d      	beq.n	8003a82 <__aeabi_fmul+0x13e>
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d04b      	beq.n	8003ae2 <__aeabi_fmul+0x19e>
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d05f      	beq.n	8003b0e <__aeabi_fmul+0x1ca>
 8003a4e:	9801      	ldr	r0, [sp, #4]
 8003a50:	307f      	adds	r0, #127	; 0x7f
 8003a52:	2800      	cmp	r0, #0
 8003a54:	dd5e      	ble.n	8003b14 <__aeabi_fmul+0x1d0>
 8003a56:	270f      	movs	r7, #15
 8003a58:	4027      	ands	r7, r4
 8003a5a:	2f04      	cmp	r7, #4
 8003a5c:	d000      	beq.n	8003a60 <__aeabi_fmul+0x11c>
 8003a5e:	3404      	adds	r4, #4
 8003a60:	0121      	lsls	r1, r4, #4
 8003a62:	d503      	bpl.n	8003a6c <__aeabi_fmul+0x128>
 8003a64:	4e3b      	ldr	r6, [pc, #236]	; (8003b54 <__aeabi_fmul+0x210>)
 8003a66:	9801      	ldr	r0, [sp, #4]
 8003a68:	4034      	ands	r4, r6
 8003a6a:	3080      	adds	r0, #128	; 0x80
 8003a6c:	28fe      	cmp	r0, #254	; 0xfe
 8003a6e:	dc08      	bgt.n	8003a82 <__aeabi_fmul+0x13e>
 8003a70:	01a4      	lsls	r4, r4, #6
 8003a72:	0a64      	lsrs	r4, r4, #9
 8003a74:	b2c0      	uxtb	r0, r0
 8003a76:	e006      	b.n	8003a86 <__aeabi_fmul+0x142>
 8003a78:	2201      	movs	r2, #1
 8003a7a:	403a      	ands	r2, r7
 8003a7c:	1c34      	adds	r4, r6, #0
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d1e1      	bne.n	8003a46 <__aeabi_fmul+0x102>
 8003a82:	20ff      	movs	r0, #255	; 0xff
 8003a84:	2400      	movs	r4, #0
 8003a86:	05c0      	lsls	r0, r0, #23
 8003a88:	07d2      	lsls	r2, r2, #31
 8003a8a:	4320      	orrs	r0, r4
 8003a8c:	4310      	orrs	r0, r2
 8003a8e:	b003      	add	sp, #12
 8003a90:	bc3c      	pop	{r2, r3, r4, r5}
 8003a92:	4690      	mov	r8, r2
 8003a94:	4699      	mov	r9, r3
 8003a96:	46a2      	mov	sl, r4
 8003a98:	46ab      	mov	fp, r5
 8003a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a9c:	1c33      	adds	r3, r6, #0
 8003a9e:	1e5a      	subs	r2, r3, #1
 8003aa0:	4193      	sbcs	r3, r2
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	e77e      	b.n	80039a4 <__aeabi_fmul+0x60>
 8003aa6:	200c      	movs	r0, #12
 8003aa8:	2103      	movs	r1, #3
 8003aaa:	4683      	mov	fp, r0
 8003aac:	9100      	str	r1, [sp, #0]
 8003aae:	e76d      	b.n	800398c <__aeabi_fmul+0x48>
 8003ab0:	1c20      	adds	r0, r4, #0
 8003ab2:	f002 fa09 	bl	8005ec8 <__clzsi2>
 8003ab6:	2676      	movs	r6, #118	; 0x76
 8003ab8:	1f41      	subs	r1, r0, #5
 8003aba:	4275      	negs	r5, r6
 8003abc:	2300      	movs	r3, #0
 8003abe:	2200      	movs	r2, #0
 8003ac0:	408c      	lsls	r4, r1
 8003ac2:	1a2d      	subs	r5, r5, r0
 8003ac4:	469b      	mov	fp, r3
 8003ac6:	9200      	str	r2, [sp, #0]
 8003ac8:	e760      	b.n	800398c <__aeabi_fmul+0x48>
 8003aca:	1c30      	adds	r0, r6, #0
 8003acc:	f002 f9fc 	bl	8005ec8 <__clzsi2>
 8003ad0:	2176      	movs	r1, #118	; 0x76
 8003ad2:	1f42      	subs	r2, r0, #5
 8003ad4:	424b      	negs	r3, r1
 8003ad6:	1a18      	subs	r0, r3, r0
 8003ad8:	4096      	lsls	r6, r2
 8003ada:	2300      	movs	r3, #0
 8003adc:	e762      	b.n	80039a4 <__aeabi_fmul+0x60>
 8003ade:	4c1e      	ldr	r4, [pc, #120]	; (8003b58 <__aeabi_fmul+0x214>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	03d9      	lsls	r1, r3, #15
 8003ae6:	430c      	orrs	r4, r1
 8003ae8:	0265      	lsls	r5, r4, #9
 8003aea:	0a6c      	lsrs	r4, r5, #9
 8003aec:	20ff      	movs	r0, #255	; 0xff
 8003aee:	e7ca      	b.n	8003a86 <__aeabi_fmul+0x142>
 8003af0:	2280      	movs	r2, #128	; 0x80
 8003af2:	03d3      	lsls	r3, r2, #15
 8003af4:	421c      	tst	r4, r3
 8003af6:	d008      	beq.n	8003b0a <__aeabi_fmul+0x1c6>
 8003af8:	421e      	tst	r6, r3
 8003afa:	d106      	bne.n	8003b0a <__aeabi_fmul+0x1c6>
 8003afc:	1c34      	adds	r4, r6, #0
 8003afe:	4642      	mov	r2, r8
 8003b00:	e7ef      	b.n	8003ae2 <__aeabi_fmul+0x19e>
 8003b02:	2480      	movs	r4, #128	; 0x80
 8003b04:	0267      	lsls	r7, r4, #9
 8003b06:	19ed      	adds	r5, r5, r7
 8003b08:	e764      	b.n	80039d4 <__aeabi_fmul+0x90>
 8003b0a:	4652      	mov	r2, sl
 8003b0c:	e7e9      	b.n	8003ae2 <__aeabi_fmul+0x19e>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	2400      	movs	r4, #0
 8003b12:	e7b8      	b.n	8003a86 <__aeabi_fmul+0x142>
 8003b14:	237e      	movs	r3, #126	; 0x7e
 8003b16:	9901      	ldr	r1, [sp, #4]
 8003b18:	425d      	negs	r5, r3
 8003b1a:	1a6b      	subs	r3, r5, r1
 8003b1c:	2b1b      	cmp	r3, #27
 8003b1e:	dcf6      	bgt.n	8003b0e <__aeabi_fmul+0x1ca>
 8003b20:	9e01      	ldr	r6, [sp, #4]
 8003b22:	1c27      	adds	r7, r4, #0
 8003b24:	369e      	adds	r6, #158	; 0x9e
 8003b26:	40b4      	lsls	r4, r6
 8003b28:	40df      	lsrs	r7, r3
 8003b2a:	1c23      	adds	r3, r4, #0
 8003b2c:	1e5c      	subs	r4, r3, #1
 8003b2e:	41a3      	sbcs	r3, r4
 8003b30:	433b      	orrs	r3, r7
 8003b32:	200f      	movs	r0, #15
 8003b34:	4018      	ands	r0, r3
 8003b36:	2804      	cmp	r0, #4
 8003b38:	d000      	beq.n	8003b3c <__aeabi_fmul+0x1f8>
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	0159      	lsls	r1, r3, #5
 8003b3e:	d403      	bmi.n	8003b48 <__aeabi_fmul+0x204>
 8003b40:	019c      	lsls	r4, r3, #6
 8003b42:	0a64      	lsrs	r4, r4, #9
 8003b44:	2000      	movs	r0, #0
 8003b46:	e79e      	b.n	8003a86 <__aeabi_fmul+0x142>
 8003b48:	2001      	movs	r0, #1
 8003b4a:	2400      	movs	r4, #0
 8003b4c:	e79b      	b.n	8003a86 <__aeabi_fmul+0x142>
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	08009f40 	.word	0x08009f40
 8003b54:	f7ffffff 	.word	0xf7ffffff
 8003b58:	007fffff 	.word	0x007fffff

08003b5c <__aeabi_fsub>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	0247      	lsls	r7, r0, #9
 8003b60:	024a      	lsls	r2, r1, #9
 8003b62:	09be      	lsrs	r6, r7, #6
 8003b64:	0992      	lsrs	r2, r2, #6
 8003b66:	0043      	lsls	r3, r0, #1
 8003b68:	004c      	lsls	r4, r1, #1
 8003b6a:	0fc0      	lsrs	r0, r0, #31
 8003b6c:	46b4      	mov	ip, r6
 8003b6e:	4257      	negs	r7, r2
 8003b70:	4157      	adcs	r7, r2
 8003b72:	0e1b      	lsrs	r3, r3, #24
 8003b74:	b2c5      	uxtb	r5, r0
 8003b76:	0e24      	lsrs	r4, r4, #24
 8003b78:	0fc9      	lsrs	r1, r1, #31
 8003b7a:	2f00      	cmp	r7, #0
 8003b7c:	d114      	bne.n	8003ba8 <__aeabi_fsub+0x4c>
 8003b7e:	2cff      	cmp	r4, #255	; 0xff
 8003b80:	d112      	bne.n	8003ba8 <__aeabi_fsub+0x4c>
 8003b82:	428d      	cmp	r5, r1
 8003b84:	d014      	beq.n	8003bb0 <__aeabi_fsub+0x54>
 8003b86:	1b18      	subs	r0, r3, r4
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	dc00      	bgt.n	8003b8e <__aeabi_fsub+0x32>
 8003b8c:	e0a9      	b.n	8003ce2 <__aeabi_fsub+0x186>
 8003b8e:	2c00      	cmp	r4, #0
 8003b90:	d131      	bne.n	8003bf6 <__aeabi_fsub+0x9a>
 8003b92:	2f00      	cmp	r7, #0
 8003b94:	d000      	beq.n	8003b98 <__aeabi_fsub+0x3c>
 8003b96:	e083      	b.n	8003ca0 <__aeabi_fsub+0x144>
 8003b98:	3801      	subs	r0, #1
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	d000      	beq.n	8003ba0 <__aeabi_fsub+0x44>
 8003b9e:	e0bf      	b.n	8003d20 <__aeabi_fsub+0x1c4>
 8003ba0:	4666      	mov	r6, ip
 8003ba2:	1ab6      	subs	r6, r6, r2
 8003ba4:	1c1c      	adds	r4, r3, #0
 8003ba6:	e03a      	b.n	8003c1e <__aeabi_fsub+0xc2>
 8003ba8:	2601      	movs	r6, #1
 8003baa:	4071      	eors	r1, r6
 8003bac:	428d      	cmp	r5, r1
 8003bae:	d1ea      	bne.n	8003b86 <__aeabi_fsub+0x2a>
 8003bb0:	1b19      	subs	r1, r3, r4
 8003bb2:	2900      	cmp	r1, #0
 8003bb4:	dc00      	bgt.n	8003bb8 <__aeabi_fsub+0x5c>
 8003bb6:	e0a6      	b.n	8003d06 <__aeabi_fsub+0x1aa>
 8003bb8:	2c00      	cmp	r4, #0
 8003bba:	d100      	bne.n	8003bbe <__aeabi_fsub+0x62>
 8003bbc:	e074      	b.n	8003ca8 <__aeabi_fsub+0x14c>
 8003bbe:	2bff      	cmp	r3, #255	; 0xff
 8003bc0:	d100      	bne.n	8003bc4 <__aeabi_fsub+0x68>
 8003bc2:	e07d      	b.n	8003cc0 <__aeabi_fsub+0x164>
 8003bc4:	2780      	movs	r7, #128	; 0x80
 8003bc6:	04fc      	lsls	r4, r7, #19
 8003bc8:	4322      	orrs	r2, r4
 8003bca:	2601      	movs	r6, #1
 8003bcc:	291b      	cmp	r1, #27
 8003bce:	dc00      	bgt.n	8003bd2 <__aeabi_fsub+0x76>
 8003bd0:	e0cc      	b.n	8003d6c <__aeabi_fsub+0x210>
 8003bd2:	4466      	add	r6, ip
 8003bd4:	1c1c      	adds	r4, r3, #0
 8003bd6:	0171      	lsls	r1, r6, #5
 8003bd8:	d400      	bmi.n	8003bdc <__aeabi_fsub+0x80>
 8003bda:	e079      	b.n	8003cd0 <__aeabi_fsub+0x174>
 8003bdc:	1c63      	adds	r3, r4, #1
 8003bde:	2bff      	cmp	r3, #255	; 0xff
 8003be0:	d100      	bne.n	8003be4 <__aeabi_fsub+0x88>
 8003be2:	e0d4      	b.n	8003d8e <__aeabi_fsub+0x232>
 8003be4:	4faa      	ldr	r7, [pc, #680]	; (8003e90 <__aeabi_fsub+0x334>)
 8003be6:	4037      	ands	r7, r6
 8003be8:	2601      	movs	r6, #1
 8003bea:	403e      	ands	r6, r7
 8003bec:	087a      	lsrs	r2, r7, #1
 8003bee:	4316      	orrs	r6, r2
 8003bf0:	1ca7      	adds	r7, r4, #2
 8003bf2:	1c1c      	adds	r4, r3, #0
 8003bf4:	e02d      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003bf6:	2bff      	cmp	r3, #255	; 0xff
 8003bf8:	d062      	beq.n	8003cc0 <__aeabi_fsub+0x164>
 8003bfa:	2480      	movs	r4, #128	; 0x80
 8003bfc:	04e1      	lsls	r1, r4, #19
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	2601      	movs	r6, #1
 8003c02:	281b      	cmp	r0, #27
 8003c04:	dc08      	bgt.n	8003c18 <__aeabi_fsub+0xbc>
 8003c06:	1c17      	adds	r7, r2, #0
 8003c08:	2620      	movs	r6, #32
 8003c0a:	40c7      	lsrs	r7, r0
 8003c0c:	1a30      	subs	r0, r6, r0
 8003c0e:	4082      	lsls	r2, r0
 8003c10:	1c16      	adds	r6, r2, #0
 8003c12:	1e72      	subs	r2, r6, #1
 8003c14:	4196      	sbcs	r6, r2
 8003c16:	433e      	orrs	r6, r7
 8003c18:	4662      	mov	r2, ip
 8003c1a:	1b96      	subs	r6, r2, r6
 8003c1c:	1c1c      	adds	r4, r3, #0
 8003c1e:	0170      	lsls	r0, r6, #5
 8003c20:	d556      	bpl.n	8003cd0 <__aeabi_fsub+0x174>
 8003c22:	01b2      	lsls	r2, r6, #6
 8003c24:	0996      	lsrs	r6, r2, #6
 8003c26:	1c30      	adds	r0, r6, #0
 8003c28:	f002 f94e 	bl	8005ec8 <__clzsi2>
 8003c2c:	1c33      	adds	r3, r6, #0
 8003c2e:	3805      	subs	r0, #5
 8003c30:	4083      	lsls	r3, r0
 8003c32:	4284      	cmp	r4, r0
 8003c34:	dc49      	bgt.n	8003cca <__aeabi_fsub+0x16e>
 8003c36:	1b04      	subs	r4, r0, r4
 8003c38:	211f      	movs	r1, #31
 8003c3a:	1b0f      	subs	r7, r1, r4
 8003c3c:	1c62      	adds	r2, r4, #1
 8003c3e:	1c1e      	adds	r6, r3, #0
 8003c40:	40d6      	lsrs	r6, r2
 8003c42:	40bb      	lsls	r3, r7
 8003c44:	1c30      	adds	r0, r6, #0
 8003c46:	1c1e      	adds	r6, r3, #0
 8003c48:	1e73      	subs	r3, r6, #1
 8003c4a:	419e      	sbcs	r6, r3
 8003c4c:	4306      	orrs	r6, r0
 8003c4e:	2701      	movs	r7, #1
 8003c50:	2400      	movs	r4, #0
 8003c52:	210f      	movs	r1, #15
 8003c54:	4031      	ands	r1, r6
 8003c56:	2904      	cmp	r1, #4
 8003c58:	d000      	beq.n	8003c5c <__aeabi_fsub+0x100>
 8003c5a:	3604      	adds	r6, #4
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	4015      	ands	r5, r2
 8003c60:	0172      	lsls	r2, r6, #5
 8003c62:	d505      	bpl.n	8003c70 <__aeabi_fsub+0x114>
 8003c64:	2fff      	cmp	r7, #255	; 0xff
 8003c66:	d04b      	beq.n	8003d00 <__aeabi_fsub+0x1a4>
 8003c68:	4c89      	ldr	r4, [pc, #548]	; (8003e90 <__aeabi_fsub+0x334>)
 8003c6a:	4026      	ands	r6, r4
 8003c6c:	1c3c      	adds	r4, r7, #0
 8003c6e:	3701      	adds	r7, #1
 8003c70:	08f6      	lsrs	r6, r6, #3
 8003c72:	d02f      	beq.n	8003cd4 <__aeabi_fsub+0x178>
 8003c74:	22ff      	movs	r2, #255	; 0xff
 8003c76:	4017      	ands	r7, r2
 8003c78:	0ff8      	lsrs	r0, r7, #31
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	42b9      	cmp	r1, r7
 8003c80:	4143      	adcs	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d026      	beq.n	8003cd4 <__aeabi_fsub+0x178>
 8003c86:	2c00      	cmp	r4, #0
 8003c88:	d028      	beq.n	8003cdc <__aeabi_fsub+0x180>
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	03c8      	lsls	r0, r1, #15
 8003c8e:	4306      	orrs	r6, r0
 8003c90:	0273      	lsls	r3, r6, #9
 8003c92:	0a58      	lsrs	r0, r3, #9
 8003c94:	b2e4      	uxtb	r4, r4
 8003c96:	05e4      	lsls	r4, r4, #23
 8003c98:	07ed      	lsls	r5, r5, #31
 8003c9a:	4320      	orrs	r0, r4
 8003c9c:	4328      	orrs	r0, r5
 8003c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ca0:	1c5f      	adds	r7, r3, #1
 8003ca2:	4666      	mov	r6, ip
 8003ca4:	1c1c      	adds	r4, r3, #0
 8003ca6:	e7d4      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003ca8:	2f00      	cmp	r7, #0
 8003caa:	d1f9      	bne.n	8003ca0 <__aeabi_fsub+0x144>
 8003cac:	3901      	subs	r1, #1
 8003cae:	2900      	cmp	r1, #0
 8003cb0:	d103      	bne.n	8003cba <__aeabi_fsub+0x15e>
 8003cb2:	4661      	mov	r1, ip
 8003cb4:	1856      	adds	r6, r2, r1
 8003cb6:	1c1c      	adds	r4, r3, #0
 8003cb8:	e78d      	b.n	8003bd6 <__aeabi_fsub+0x7a>
 8003cba:	2bff      	cmp	r3, #255	; 0xff
 8003cbc:	d000      	beq.n	8003cc0 <__aeabi_fsub+0x164>
 8003cbe:	e784      	b.n	8003bca <__aeabi_fsub+0x6e>
 8003cc0:	2780      	movs	r7, #128	; 0x80
 8003cc2:	4666      	mov	r6, ip
 8003cc4:	007f      	lsls	r7, r7, #1
 8003cc6:	24ff      	movs	r4, #255	; 0xff
 8003cc8:	e7c3      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003cca:	4e71      	ldr	r6, [pc, #452]	; (8003e90 <__aeabi_fsub+0x334>)
 8003ccc:	1a24      	subs	r4, r4, r0
 8003cce:	401e      	ands	r6, r3
 8003cd0:	1c67      	adds	r7, r4, #1
 8003cd2:	e7be      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003cd4:	0276      	lsls	r6, r6, #9
 8003cd6:	0a70      	lsrs	r0, r6, #9
 8003cd8:	b2e4      	uxtb	r4, r4
 8003cda:	e7dc      	b.n	8003c96 <__aeabi_fsub+0x13a>
 8003cdc:	0277      	lsls	r7, r6, #9
 8003cde:	0a78      	lsrs	r0, r7, #9
 8003ce0:	e7d9      	b.n	8003c96 <__aeabi_fsub+0x13a>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d120      	bne.n	8003d28 <__aeabi_fsub+0x1cc>
 8003ce6:	1c5e      	adds	r6, r3, #1
 8003ce8:	b2f4      	uxtb	r4, r6
 8003cea:	2c01      	cmp	r4, #1
 8003cec:	dd68      	ble.n	8003dc0 <__aeabi_fsub+0x264>
 8003cee:	4666      	mov	r6, ip
 8003cf0:	1ab6      	subs	r6, r6, r2
 8003cf2:	0170      	lsls	r0, r6, #5
 8003cf4:	d531      	bpl.n	8003d5a <__aeabi_fsub+0x1fe>
 8003cf6:	4665      	mov	r5, ip
 8003cf8:	1b56      	subs	r6, r2, r5
 8003cfa:	1c1c      	adds	r4, r3, #0
 8003cfc:	1c0d      	adds	r5, r1, #0
 8003cfe:	e792      	b.n	8003c26 <__aeabi_fsub+0xca>
 8003d00:	24ff      	movs	r4, #255	; 0xff
 8003d02:	2000      	movs	r0, #0
 8003d04:	e7c7      	b.n	8003c96 <__aeabi_fsub+0x13a>
 8003d06:	2900      	cmp	r1, #0
 8003d08:	d166      	bne.n	8003dd8 <__aeabi_fsub+0x27c>
 8003d0a:	1c5c      	adds	r4, r3, #1
 8003d0c:	b2e1      	uxtb	r1, r4
 8003d0e:	2901      	cmp	r1, #1
 8003d10:	dd44      	ble.n	8003d9c <__aeabi_fsub+0x240>
 8003d12:	2cff      	cmp	r4, #255	; 0xff
 8003d14:	d100      	bne.n	8003d18 <__aeabi_fsub+0x1bc>
 8003d16:	e081      	b.n	8003e1c <__aeabi_fsub+0x2c0>
 8003d18:	4462      	add	r2, ip
 8003d1a:	0856      	lsrs	r6, r2, #1
 8003d1c:	1c9f      	adds	r7, r3, #2
 8003d1e:	e798      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003d20:	2bff      	cmp	r3, #255	; 0xff
 8003d22:	d000      	beq.n	8003d26 <__aeabi_fsub+0x1ca>
 8003d24:	e76c      	b.n	8003c00 <__aeabi_fsub+0xa4>
 8003d26:	e7cb      	b.n	8003cc0 <__aeabi_fsub+0x164>
 8003d28:	4240      	negs	r0, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d028      	beq.n	8003d80 <__aeabi_fsub+0x224>
 8003d2e:	2cff      	cmp	r4, #255	; 0xff
 8003d30:	d068      	beq.n	8003e04 <__aeabi_fsub+0x2a8>
 8003d32:	2580      	movs	r5, #128	; 0x80
 8003d34:	4667      	mov	r7, ip
 8003d36:	04ee      	lsls	r6, r5, #19
 8003d38:	4337      	orrs	r7, r6
 8003d3a:	46bc      	mov	ip, r7
 8003d3c:	2601      	movs	r6, #1
 8003d3e:	281b      	cmp	r0, #27
 8003d40:	dc08      	bgt.n	8003d54 <__aeabi_fsub+0x1f8>
 8003d42:	4663      	mov	r3, ip
 8003d44:	2720      	movs	r7, #32
 8003d46:	40c3      	lsrs	r3, r0
 8003d48:	4666      	mov	r6, ip
 8003d4a:	1a38      	subs	r0, r7, r0
 8003d4c:	4086      	lsls	r6, r0
 8003d4e:	1e70      	subs	r0, r6, #1
 8003d50:	4186      	sbcs	r6, r0
 8003d52:	431e      	orrs	r6, r3
 8003d54:	1b96      	subs	r6, r2, r6
 8003d56:	1c0d      	adds	r5, r1, #0
 8003d58:	e761      	b.n	8003c1e <__aeabi_fsub+0xc2>
 8003d5a:	1c1c      	adds	r4, r3, #0
 8003d5c:	2e00      	cmp	r6, #0
 8003d5e:	d000      	beq.n	8003d62 <__aeabi_fsub+0x206>
 8003d60:	e761      	b.n	8003c26 <__aeabi_fsub+0xca>
 8003d62:	2500      	movs	r5, #0
 8003d64:	2701      	movs	r7, #1
 8003d66:	2604      	movs	r6, #4
 8003d68:	2400      	movs	r4, #0
 8003d6a:	e779      	b.n	8003c60 <__aeabi_fsub+0x104>
 8003d6c:	2720      	movs	r7, #32
 8003d6e:	1a7e      	subs	r6, r7, r1
 8003d70:	1c14      	adds	r4, r2, #0
 8003d72:	40b2      	lsls	r2, r6
 8003d74:	1c16      	adds	r6, r2, #0
 8003d76:	40cc      	lsrs	r4, r1
 8003d78:	1e72      	subs	r2, r6, #1
 8003d7a:	4196      	sbcs	r6, r2
 8003d7c:	4326      	orrs	r6, r4
 8003d7e:	e728      	b.n	8003bd2 <__aeabi_fsub+0x76>
 8003d80:	4665      	mov	r5, ip
 8003d82:	2d00      	cmp	r5, #0
 8003d84:	d144      	bne.n	8003e10 <__aeabi_fsub+0x2b4>
 8003d86:	1c67      	adds	r7, r4, #1
 8003d88:	1c16      	adds	r6, r2, #0
 8003d8a:	1c0d      	adds	r5, r1, #0
 8003d8c:	e761      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003d8e:	2501      	movs	r5, #1
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	4005      	ands	r5, r0
 8003d94:	24ff      	movs	r4, #255	; 0xff
 8003d96:	005f      	lsls	r7, r3, #1
 8003d98:	2604      	movs	r6, #4
 8003d9a:	e761      	b.n	8003c60 <__aeabi_fsub+0x104>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d17b      	bne.n	8003e98 <__aeabi_fsub+0x33c>
 8003da0:	4660      	mov	r0, ip
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d100      	bne.n	8003da8 <__aeabi_fsub+0x24c>
 8003da6:	e099      	b.n	8003edc <__aeabi_fsub+0x380>
 8003da8:	2f00      	cmp	r7, #0
 8003daa:	d000      	beq.n	8003dae <__aeabi_fsub+0x252>
 8003dac:	e09a      	b.n	8003ee4 <__aeabi_fsub+0x388>
 8003dae:	1816      	adds	r6, r2, r0
 8003db0:	0171      	lsls	r1, r6, #5
 8003db2:	d400      	bmi.n	8003db6 <__aeabi_fsub+0x25a>
 8003db4:	e08a      	b.n	8003ecc <__aeabi_fsub+0x370>
 8003db6:	4836      	ldr	r0, [pc, #216]	; (8003e90 <__aeabi_fsub+0x334>)
 8003db8:	2702      	movs	r7, #2
 8003dba:	4006      	ands	r6, r0
 8003dbc:	2401      	movs	r4, #1
 8003dbe:	e748      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d112      	bne.n	8003dea <__aeabi_fsub+0x28e>
 8003dc4:	4663      	mov	r3, ip
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d143      	bne.n	8003e52 <__aeabi_fsub+0x2f6>
 8003dca:	2f00      	cmp	r7, #0
 8003dcc:	d1c9      	bne.n	8003d62 <__aeabi_fsub+0x206>
 8003dce:	1c16      	adds	r6, r2, #0
 8003dd0:	1c0d      	adds	r5, r1, #0
 8003dd2:	2701      	movs	r7, #1
 8003dd4:	2400      	movs	r4, #0
 8003dd6:	e73c      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003dd8:	4249      	negs	r1, r1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d124      	bne.n	8003e28 <__aeabi_fsub+0x2cc>
 8003dde:	4663      	mov	r3, ip
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d176      	bne.n	8003ed2 <__aeabi_fsub+0x376>
 8003de4:	1c67      	adds	r7, r4, #1
 8003de6:	1c16      	adds	r6, r2, #0
 8003de8:	e733      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003dea:	4660      	mov	r0, ip
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d13c      	bne.n	8003e6a <__aeabi_fsub+0x30e>
 8003df0:	2f00      	cmp	r7, #0
 8003df2:	d007      	beq.n	8003e04 <__aeabi_fsub+0x2a8>
 8003df4:	2680      	movs	r6, #128	; 0x80
 8003df6:	0077      	lsls	r7, r6, #1
 8003df8:	2500      	movs	r5, #0
 8003dfa:	4e26      	ldr	r6, [pc, #152]	; (8003e94 <__aeabi_fsub+0x338>)
 8003dfc:	24ff      	movs	r4, #255	; 0xff
 8003dfe:	e72f      	b.n	8003c60 <__aeabi_fsub+0x104>
 8003e00:	2cff      	cmp	r4, #255	; 0xff
 8003e02:	d19b      	bne.n	8003d3c <__aeabi_fsub+0x1e0>
 8003e04:	2080      	movs	r0, #128	; 0x80
 8003e06:	1c16      	adds	r6, r2, #0
 8003e08:	1c0d      	adds	r5, r1, #0
 8003e0a:	0047      	lsls	r7, r0, #1
 8003e0c:	24ff      	movs	r4, #255	; 0xff
 8003e0e:	e720      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003e10:	3801      	subs	r0, #1
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d1f4      	bne.n	8003e00 <__aeabi_fsub+0x2a4>
 8003e16:	1b56      	subs	r6, r2, r5
 8003e18:	1c0d      	adds	r5, r1, #0
 8003e1a:	e700      	b.n	8003c1e <__aeabi_fsub+0xc2>
 8003e1c:	2501      	movs	r5, #1
 8003e1e:	2280      	movs	r2, #128	; 0x80
 8003e20:	4005      	ands	r5, r0
 8003e22:	0057      	lsls	r7, r2, #1
 8003e24:	2604      	movs	r6, #4
 8003e26:	e71b      	b.n	8003c60 <__aeabi_fsub+0x104>
 8003e28:	2cff      	cmp	r4, #255	; 0xff
 8003e2a:	d047      	beq.n	8003ebc <__aeabi_fsub+0x360>
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	4666      	mov	r6, ip
 8003e30:	04df      	lsls	r7, r3, #19
 8003e32:	433e      	orrs	r6, r7
 8003e34:	46b4      	mov	ip, r6
 8003e36:	2601      	movs	r6, #1
 8003e38:	291b      	cmp	r1, #27
 8003e3a:	dc08      	bgt.n	8003e4e <__aeabi_fsub+0x2f2>
 8003e3c:	2620      	movs	r6, #32
 8003e3e:	4667      	mov	r7, ip
 8003e40:	40cf      	lsrs	r7, r1
 8003e42:	1a71      	subs	r1, r6, r1
 8003e44:	4666      	mov	r6, ip
 8003e46:	408e      	lsls	r6, r1
 8003e48:	1e71      	subs	r1, r6, #1
 8003e4a:	418e      	sbcs	r6, r1
 8003e4c:	433e      	orrs	r6, r7
 8003e4e:	18b6      	adds	r6, r6, r2
 8003e50:	e6c1      	b.n	8003bd6 <__aeabi_fsub+0x7a>
 8003e52:	4666      	mov	r6, ip
 8003e54:	2f00      	cmp	r7, #0
 8003e56:	d139      	bne.n	8003ecc <__aeabi_fsub+0x370>
 8003e58:	1ab6      	subs	r6, r6, r2
 8003e5a:	4663      	mov	r3, ip
 8003e5c:	0170      	lsls	r0, r6, #5
 8003e5e:	d532      	bpl.n	8003ec6 <__aeabi_fsub+0x36a>
 8003e60:	1ad6      	subs	r6, r2, r3
 8003e62:	1c0d      	adds	r5, r1, #0
 8003e64:	2701      	movs	r7, #1
 8003e66:	2400      	movs	r4, #0
 8003e68:	e6f3      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003e6a:	2f00      	cmp	r7, #0
 8003e6c:	d000      	beq.n	8003e70 <__aeabi_fsub+0x314>
 8003e6e:	e727      	b.n	8003cc0 <__aeabi_fsub+0x164>
 8003e70:	2780      	movs	r7, #128	; 0x80
 8003e72:	08c6      	lsrs	r6, r0, #3
 8003e74:	03fb      	lsls	r3, r7, #15
 8003e76:	421e      	tst	r6, r3
 8003e78:	d004      	beq.n	8003e84 <__aeabi_fsub+0x328>
 8003e7a:	08d2      	lsrs	r2, r2, #3
 8003e7c:	421a      	tst	r2, r3
 8003e7e:	d101      	bne.n	8003e84 <__aeabi_fsub+0x328>
 8003e80:	1c16      	adds	r6, r2, #0
 8003e82:	1c0d      	adds	r5, r1, #0
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	00f6      	lsls	r6, r6, #3
 8003e88:	004f      	lsls	r7, r1, #1
 8003e8a:	24ff      	movs	r4, #255	; 0xff
 8003e8c:	e6e1      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	fbffffff 	.word	0xfbffffff
 8003e94:	03fffffc 	.word	0x03fffffc
 8003e98:	4663      	mov	r3, ip
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00e      	beq.n	8003ebc <__aeabi_fsub+0x360>
 8003e9e:	2f00      	cmp	r7, #0
 8003ea0:	d000      	beq.n	8003ea4 <__aeabi_fsub+0x348>
 8003ea2:	e70d      	b.n	8003cc0 <__aeabi_fsub+0x164>
 8003ea4:	2480      	movs	r4, #128	; 0x80
 8003ea6:	08de      	lsrs	r6, r3, #3
 8003ea8:	03e3      	lsls	r3, r4, #15
 8003eaa:	421e      	tst	r6, r3
 8003eac:	d0ea      	beq.n	8003e84 <__aeabi_fsub+0x328>
 8003eae:	08d2      	lsrs	r2, r2, #3
 8003eb0:	421a      	tst	r2, r3
 8003eb2:	d1e7      	bne.n	8003e84 <__aeabi_fsub+0x328>
 8003eb4:	1c16      	adds	r6, r2, #0
 8003eb6:	e7e5      	b.n	8003e84 <__aeabi_fsub+0x328>
 8003eb8:	2cff      	cmp	r4, #255	; 0xff
 8003eba:	d1bc      	bne.n	8003e36 <__aeabi_fsub+0x2da>
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	1c16      	adds	r6, r2, #0
 8003ec0:	005f      	lsls	r7, r3, #1
 8003ec2:	24ff      	movs	r4, #255	; 0xff
 8003ec4:	e6c5      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003ec6:	2e00      	cmp	r6, #0
 8003ec8:	d100      	bne.n	8003ecc <__aeabi_fsub+0x370>
 8003eca:	e74a      	b.n	8003d62 <__aeabi_fsub+0x206>
 8003ecc:	2701      	movs	r7, #1
 8003ece:	2400      	movs	r4, #0
 8003ed0:	e6bf      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003ed2:	3901      	subs	r1, #1
 8003ed4:	2900      	cmp	r1, #0
 8003ed6:	d1ef      	bne.n	8003eb8 <__aeabi_fsub+0x35c>
 8003ed8:	18d6      	adds	r6, r2, r3
 8003eda:	e67c      	b.n	8003bd6 <__aeabi_fsub+0x7a>
 8003edc:	1c16      	adds	r6, r2, #0
 8003ede:	2701      	movs	r7, #1
 8003ee0:	2400      	movs	r4, #0
 8003ee2:	e6b6      	b.n	8003c52 <__aeabi_fsub+0xf6>
 8003ee4:	4666      	mov	r6, ip
 8003ee6:	2701      	movs	r7, #1
 8003ee8:	2400      	movs	r4, #0
 8003eea:	e6b2      	b.n	8003c52 <__aeabi_fsub+0xf6>

08003eec <__aeabi_f2iz>:
 8003eec:	b500      	push	{lr}
 8003eee:	0241      	lsls	r1, r0, #9
 8003ef0:	0043      	lsls	r3, r0, #1
 8003ef2:	0fc2      	lsrs	r2, r0, #31
 8003ef4:	0a49      	lsrs	r1, r1, #9
 8003ef6:	0e1b      	lsrs	r3, r3, #24
 8003ef8:	2000      	movs	r0, #0
 8003efa:	2b7e      	cmp	r3, #126	; 0x7e
 8003efc:	dd0d      	ble.n	8003f1a <__aeabi_f2iz+0x2e>
 8003efe:	2b9d      	cmp	r3, #157	; 0x9d
 8003f00:	dc0c      	bgt.n	8003f1c <__aeabi_f2iz+0x30>
 8003f02:	2080      	movs	r0, #128	; 0x80
 8003f04:	0400      	lsls	r0, r0, #16
 8003f06:	4301      	orrs	r1, r0
 8003f08:	2b95      	cmp	r3, #149	; 0x95
 8003f0a:	dc0a      	bgt.n	8003f22 <__aeabi_f2iz+0x36>
 8003f0c:	2096      	movs	r0, #150	; 0x96
 8003f0e:	1ac3      	subs	r3, r0, r3
 8003f10:	40d9      	lsrs	r1, r3
 8003f12:	4248      	negs	r0, r1
 8003f14:	2a00      	cmp	r2, #0
 8003f16:	d100      	bne.n	8003f1a <__aeabi_f2iz+0x2e>
 8003f18:	1c08      	adds	r0, r1, #0
 8003f1a:	bd00      	pop	{pc}
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <__aeabi_f2iz+0x3c>)
 8003f1e:	1810      	adds	r0, r2, r0
 8003f20:	e7fb      	b.n	8003f1a <__aeabi_f2iz+0x2e>
 8003f22:	3b96      	subs	r3, #150	; 0x96
 8003f24:	4099      	lsls	r1, r3
 8003f26:	e7f4      	b.n	8003f12 <__aeabi_f2iz+0x26>
 8003f28:	7fffffff 	.word	0x7fffffff

08003f2c <__aeabi_i2f>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	1e04      	subs	r4, r0, #0
 8003f30:	d048      	beq.n	8003fc4 <__aeabi_i2f+0x98>
 8003f32:	0fe5      	lsrs	r5, r4, #31
 8003f34:	d000      	beq.n	8003f38 <__aeabi_i2f+0xc>
 8003f36:	4264      	negs	r4, r4
 8003f38:	1c20      	adds	r0, r4, #0
 8003f3a:	f001 ffc5 	bl	8005ec8 <__clzsi2>
 8003f3e:	239e      	movs	r3, #158	; 0x9e
 8003f40:	1c26      	adds	r6, r4, #0
 8003f42:	1a1b      	subs	r3, r3, r0
 8003f44:	2b96      	cmp	r3, #150	; 0x96
 8003f46:	dc09      	bgt.n	8003f5c <__aeabi_i2f+0x30>
 8003f48:	3808      	subs	r0, #8
 8003f4a:	4084      	lsls	r4, r0
 8003f4c:	0260      	lsls	r0, r4, #9
 8003f4e:	0a40      	lsrs	r0, r0, #9
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	05db      	lsls	r3, r3, #23
 8003f54:	07ed      	lsls	r5, r5, #31
 8003f56:	4318      	orrs	r0, r3
 8003f58:	4328      	orrs	r0, r5
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
 8003f5c:	2b99      	cmp	r3, #153	; 0x99
 8003f5e:	dd0a      	ble.n	8003f76 <__aeabi_i2f+0x4a>
 8003f60:	2405      	movs	r4, #5
 8003f62:	1a22      	subs	r2, r4, r0
 8003f64:	1c04      	adds	r4, r0, #0
 8003f66:	1c31      	adds	r1, r6, #0
 8003f68:	341b      	adds	r4, #27
 8003f6a:	40d1      	lsrs	r1, r2
 8003f6c:	40a6      	lsls	r6, r4
 8003f6e:	1c0a      	adds	r2, r1, #0
 8003f70:	1e71      	subs	r1, r6, #1
 8003f72:	418e      	sbcs	r6, r1
 8003f74:	4316      	orrs	r6, r2
 8003f76:	2805      	cmp	r0, #5
 8003f78:	dc28      	bgt.n	8003fcc <__aeabi_i2f+0xa0>
 8003f7a:	4c17      	ldr	r4, [pc, #92]	; (8003fd8 <__aeabi_i2f+0xac>)
 8003f7c:	220f      	movs	r2, #15
 8003f7e:	4026      	ands	r6, r4
 8003f80:	4032      	ands	r2, r6
 8003f82:	2a04      	cmp	r2, #4
 8003f84:	d000      	beq.n	8003f88 <__aeabi_i2f+0x5c>
 8003f86:	3604      	adds	r6, #4
 8003f88:	0172      	lsls	r2, r6, #5
 8003f8a:	d505      	bpl.n	8003f98 <__aeabi_i2f+0x6c>
 8003f8c:	239f      	movs	r3, #159	; 0x9f
 8003f8e:	1a1b      	subs	r3, r3, r0
 8003f90:	2bff      	cmp	r3, #255	; 0xff
 8003f92:	d019      	beq.n	8003fc8 <__aeabi_i2f+0x9c>
 8003f94:	4810      	ldr	r0, [pc, #64]	; (8003fd8 <__aeabi_i2f+0xac>)
 8003f96:	4006      	ands	r6, r0
 8003f98:	24ff      	movs	r4, #255	; 0xff
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	4022      	ands	r2, r4
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	0fd4      	lsrs	r4, r2, #31
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	4291      	cmp	r1, r2
 8003fa6:	4144      	adcs	r4, r0
 8003fa8:	08f6      	lsrs	r6, r6, #3
 8003faa:	1e21      	subs	r1, r4, #0
 8003fac:	d006      	beq.n	8003fbc <__aeabi_i2f+0x90>
 8003fae:	2e00      	cmp	r6, #0
 8003fb0:	d004      	beq.n	8003fbc <__aeabi_i2f+0x90>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <__aeabi_i2f+0xa6>
 8003fb6:	2180      	movs	r1, #128	; 0x80
 8003fb8:	03c8      	lsls	r0, r1, #15
 8003fba:	4306      	orrs	r6, r0
 8003fbc:	0272      	lsls	r2, r6, #9
 8003fbe:	0a50      	lsrs	r0, r2, #9
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	e7c6      	b.n	8003f52 <__aeabi_i2f+0x26>
 8003fc4:	2500      	movs	r5, #0
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2000      	movs	r0, #0
 8003fca:	e7c2      	b.n	8003f52 <__aeabi_i2f+0x26>
 8003fcc:	1f41      	subs	r1, r0, #5
 8003fce:	408e      	lsls	r6, r1
 8003fd0:	e7d3      	b.n	8003f7a <__aeabi_i2f+0x4e>
 8003fd2:	0276      	lsls	r6, r6, #9
 8003fd4:	0a70      	lsrs	r0, r6, #9
 8003fd6:	e7bc      	b.n	8003f52 <__aeabi_i2f+0x26>
 8003fd8:	fbffffff 	.word	0xfbffffff

08003fdc <__aeabi_ui2f>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	1e04      	subs	r4, r0, #0
 8003fe0:	d042      	beq.n	8004068 <__aeabi_ui2f+0x8c>
 8003fe2:	1c20      	adds	r0, r4, #0
 8003fe4:	f001 ff70 	bl	8005ec8 <__clzsi2>
 8003fe8:	239e      	movs	r3, #158	; 0x9e
 8003fea:	1a1b      	subs	r3, r3, r0
 8003fec:	2b96      	cmp	r3, #150	; 0x96
 8003fee:	dc07      	bgt.n	8004000 <__aeabi_ui2f+0x24>
 8003ff0:	3808      	subs	r0, #8
 8003ff2:	4084      	lsls	r4, r0
 8003ff4:	0260      	lsls	r0, r4, #9
 8003ff6:	0a40      	lsrs	r0, r0, #9
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	05db      	lsls	r3, r3, #23
 8003ffc:	4318      	orrs	r0, r3
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	2b99      	cmp	r3, #153	; 0x99
 8004002:	dd0a      	ble.n	800401a <__aeabi_ui2f+0x3e>
 8004004:	1c02      	adds	r2, r0, #0
 8004006:	321b      	adds	r2, #27
 8004008:	1c25      	adds	r5, r4, #0
 800400a:	4095      	lsls	r5, r2
 800400c:	1c2a      	adds	r2, r5, #0
 800400e:	1e51      	subs	r1, r2, #1
 8004010:	418a      	sbcs	r2, r1
 8004012:	2105      	movs	r1, #5
 8004014:	1a0d      	subs	r5, r1, r0
 8004016:	40ec      	lsrs	r4, r5
 8004018:	4314      	orrs	r4, r2
 800401a:	2805      	cmp	r0, #5
 800401c:	dc27      	bgt.n	800406e <__aeabi_ui2f+0x92>
 800401e:	4a18      	ldr	r2, [pc, #96]	; (8004080 <__aeabi_ui2f+0xa4>)
 8004020:	250f      	movs	r5, #15
 8004022:	4014      	ands	r4, r2
 8004024:	4025      	ands	r5, r4
 8004026:	2d04      	cmp	r5, #4
 8004028:	d000      	beq.n	800402c <__aeabi_ui2f+0x50>
 800402a:	3404      	adds	r4, #4
 800402c:	0162      	lsls	r2, r4, #5
 800402e:	d505      	bpl.n	800403c <__aeabi_ui2f+0x60>
 8004030:	239f      	movs	r3, #159	; 0x9f
 8004032:	1a1b      	subs	r3, r3, r0
 8004034:	2bff      	cmp	r3, #255	; 0xff
 8004036:	d020      	beq.n	800407a <__aeabi_ui2f+0x9e>
 8004038:	4811      	ldr	r0, [pc, #68]	; (8004080 <__aeabi_ui2f+0xa4>)
 800403a:	4004      	ands	r4, r0
 800403c:	25ff      	movs	r5, #255	; 0xff
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	402a      	ands	r2, r5
 8004042:	2101      	movs	r1, #1
 8004044:	0fd5      	lsrs	r5, r2, #31
 8004046:	2000      	movs	r0, #0
 8004048:	4291      	cmp	r1, r2
 800404a:	4145      	adcs	r5, r0
 800404c:	08e4      	lsrs	r4, r4, #3
 800404e:	1e29      	subs	r1, r5, #0
 8004050:	d006      	beq.n	8004060 <__aeabi_ui2f+0x84>
 8004052:	2c00      	cmp	r4, #0
 8004054:	d004      	beq.n	8004060 <__aeabi_ui2f+0x84>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00c      	beq.n	8004074 <__aeabi_ui2f+0x98>
 800405a:	2180      	movs	r1, #128	; 0x80
 800405c:	03c8      	lsls	r0, r1, #15
 800405e:	4304      	orrs	r4, r0
 8004060:	0262      	lsls	r2, r4, #9
 8004062:	0a50      	lsrs	r0, r2, #9
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e7c8      	b.n	8003ffa <__aeabi_ui2f+0x1e>
 8004068:	2300      	movs	r3, #0
 800406a:	2000      	movs	r0, #0
 800406c:	e7c5      	b.n	8003ffa <__aeabi_ui2f+0x1e>
 800406e:	1f41      	subs	r1, r0, #5
 8004070:	408c      	lsls	r4, r1
 8004072:	e7d4      	b.n	800401e <__aeabi_ui2f+0x42>
 8004074:	0264      	lsls	r4, r4, #9
 8004076:	0a60      	lsrs	r0, r4, #9
 8004078:	e7bf      	b.n	8003ffa <__aeabi_ui2f+0x1e>
 800407a:	23ff      	movs	r3, #255	; 0xff
 800407c:	2000      	movs	r0, #0
 800407e:	e7bc      	b.n	8003ffa <__aeabi_ui2f+0x1e>
 8004080:	fbffffff 	.word	0xfbffffff

08004084 <__aeabi_dadd>:
 8004084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004086:	4657      	mov	r7, sl
 8004088:	464e      	mov	r6, r9
 800408a:	4645      	mov	r5, r8
 800408c:	b4e0      	push	{r5, r6, r7}
 800408e:	1c05      	adds	r5, r0, #0
 8004090:	030c      	lsls	r4, r1, #12
 8004092:	0fcf      	lsrs	r7, r1, #31
 8004094:	0048      	lsls	r0, r1, #1
 8004096:	0a64      	lsrs	r4, r4, #9
 8004098:	0f69      	lsrs	r1, r5, #29
 800409a:	46ba      	mov	sl, r7
 800409c:	b2fe      	uxtb	r6, r7
 800409e:	430c      	orrs	r4, r1
 80040a0:	0fdf      	lsrs	r7, r3, #31
 80040a2:	00e9      	lsls	r1, r5, #3
 80040a4:	005d      	lsls	r5, r3, #1
 80040a6:	031b      	lsls	r3, r3, #12
 80040a8:	46bc      	mov	ip, r7
 80040aa:	0a5f      	lsrs	r7, r3, #9
 80040ac:	0f53      	lsrs	r3, r2, #29
 80040ae:	431f      	orrs	r7, r3
 80040b0:	0d40      	lsrs	r0, r0, #21
 80040b2:	0d6d      	lsrs	r5, r5, #21
 80040b4:	00d2      	lsls	r2, r2, #3
 80040b6:	46b8      	mov	r8, r7
 80040b8:	4691      	mov	r9, r2
 80040ba:	1b43      	subs	r3, r0, r5
 80040bc:	4566      	cmp	r6, ip
 80040be:	d100      	bne.n	80040c2 <__aeabi_dadd+0x3e>
 80040c0:	e0a0      	b.n	8004204 <__aeabi_dadd+0x180>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dc00      	bgt.n	80040c8 <__aeabi_dadd+0x44>
 80040c6:	e0fc      	b.n	80042c2 <__aeabi_dadd+0x23e>
 80040c8:	2d00      	cmp	r5, #0
 80040ca:	d113      	bne.n	80040f4 <__aeabi_dadd+0x70>
 80040cc:	1c3a      	adds	r2, r7, #0
 80040ce:	464f      	mov	r7, r9
 80040d0:	433a      	orrs	r2, r7
 80040d2:	d100      	bne.n	80040d6 <__aeabi_dadd+0x52>
 80040d4:	e0c8      	b.n	8004268 <__aeabi_dadd+0x1e4>
 80040d6:	3b01      	subs	r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d000      	beq.n	80040de <__aeabi_dadd+0x5a>
 80040dc:	e148      	b.n	8004370 <__aeabi_dadd+0x2ec>
 80040de:	464f      	mov	r7, r9
 80040e0:	1bcd      	subs	r5, r1, r7
 80040e2:	42a9      	cmp	r1, r5
 80040e4:	4189      	sbcs	r1, r1
 80040e6:	4642      	mov	r2, r8
 80040e8:	1aa4      	subs	r4, r4, r2
 80040ea:	424b      	negs	r3, r1
 80040ec:	1ae3      	subs	r3, r4, r3
 80040ee:	1c2c      	adds	r4, r5, #0
 80040f0:	1c05      	adds	r5, r0, #0
 80040f2:	e025      	b.n	8004140 <__aeabi_dadd+0xbc>
 80040f4:	4ab4      	ldr	r2, [pc, #720]	; (80043c8 <__aeabi_dadd+0x344>)
 80040f6:	4290      	cmp	r0, r2
 80040f8:	d100      	bne.n	80040fc <__aeabi_dadd+0x78>
 80040fa:	e0cd      	b.n	8004298 <__aeabi_dadd+0x214>
 80040fc:	2280      	movs	r2, #128	; 0x80
 80040fe:	0415      	lsls	r5, r2, #16
 8004100:	432f      	orrs	r7, r5
 8004102:	46b8      	mov	r8, r7
 8004104:	2b38      	cmp	r3, #56	; 0x38
 8004106:	dd00      	ble.n	800410a <__aeabi_dadd+0x86>
 8004108:	e10c      	b.n	8004324 <__aeabi_dadd+0x2a0>
 800410a:	2b1f      	cmp	r3, #31
 800410c:	dd00      	ble.n	8004110 <__aeabi_dadd+0x8c>
 800410e:	e148      	b.n	80043a2 <__aeabi_dadd+0x31e>
 8004110:	2220      	movs	r2, #32
 8004112:	1ad5      	subs	r5, r2, r3
 8004114:	4647      	mov	r7, r8
 8004116:	464a      	mov	r2, r9
 8004118:	40af      	lsls	r7, r5
 800411a:	40da      	lsrs	r2, r3
 800411c:	433a      	orrs	r2, r7
 800411e:	464f      	mov	r7, r9
 8004120:	40af      	lsls	r7, r5
 8004122:	1c3d      	adds	r5, r7, #0
 8004124:	1e6f      	subs	r7, r5, #1
 8004126:	41bd      	sbcs	r5, r7
 8004128:	4647      	mov	r7, r8
 800412a:	40df      	lsrs	r7, r3
 800412c:	432a      	orrs	r2, r5
 800412e:	1c3b      	adds	r3, r7, #0
 8004130:	1a8f      	subs	r7, r1, r2
 8004132:	1ae4      	subs	r4, r4, r3
 8004134:	42b9      	cmp	r1, r7
 8004136:	419b      	sbcs	r3, r3
 8004138:	4259      	negs	r1, r3
 800413a:	1a63      	subs	r3, r4, r1
 800413c:	1c05      	adds	r5, r0, #0
 800413e:	1c3c      	adds	r4, r7, #0
 8004140:	021f      	lsls	r7, r3, #8
 8004142:	d400      	bmi.n	8004146 <__aeabi_dadd+0xc2>
 8004144:	e0b1      	b.n	80042aa <__aeabi_dadd+0x226>
 8004146:	0258      	lsls	r0, r3, #9
 8004148:	0a47      	lsrs	r7, r0, #9
 800414a:	2f00      	cmp	r7, #0
 800414c:	d100      	bne.n	8004150 <__aeabi_dadd+0xcc>
 800414e:	e0db      	b.n	8004308 <__aeabi_dadd+0x284>
 8004150:	1c38      	adds	r0, r7, #0
 8004152:	f001 feb9 	bl	8005ec8 <__clzsi2>
 8004156:	1c02      	adds	r2, r0, #0
 8004158:	3a08      	subs	r2, #8
 800415a:	2a1f      	cmp	r2, #31
 800415c:	dd00      	ble.n	8004160 <__aeabi_dadd+0xdc>
 800415e:	e0dc      	b.n	800431a <__aeabi_dadd+0x296>
 8004160:	2328      	movs	r3, #40	; 0x28
 8004162:	1c21      	adds	r1, r4, #0
 8004164:	1a18      	subs	r0, r3, r0
 8004166:	4097      	lsls	r7, r2
 8004168:	40c1      	lsrs	r1, r0
 800416a:	430f      	orrs	r7, r1
 800416c:	4094      	lsls	r4, r2
 800416e:	4295      	cmp	r5, r2
 8004170:	dd00      	ble.n	8004174 <__aeabi_dadd+0xf0>
 8004172:	e097      	b.n	80042a4 <__aeabi_dadd+0x220>
 8004174:	1b55      	subs	r5, r2, r5
 8004176:	1c6b      	adds	r3, r5, #1
 8004178:	2b1f      	cmp	r3, #31
 800417a:	dd00      	ble.n	800417e <__aeabi_dadd+0xfa>
 800417c:	e0fd      	b.n	800437a <__aeabi_dadd+0x2f6>
 800417e:	201f      	movs	r0, #31
 8004180:	1b45      	subs	r5, r0, r5
 8004182:	1c21      	adds	r1, r4, #0
 8004184:	1c3a      	adds	r2, r7, #0
 8004186:	40aa      	lsls	r2, r5
 8004188:	40d9      	lsrs	r1, r3
 800418a:	40ac      	lsls	r4, r5
 800418c:	4311      	orrs	r1, r2
 800418e:	1e65      	subs	r5, r4, #1
 8004190:	41ac      	sbcs	r4, r5
 8004192:	40df      	lsrs	r7, r3
 8004194:	430c      	orrs	r4, r1
 8004196:	1c3b      	adds	r3, r7, #0
 8004198:	2201      	movs	r2, #1
 800419a:	2500      	movs	r5, #0
 800419c:	270f      	movs	r7, #15
 800419e:	4027      	ands	r7, r4
 80041a0:	2f04      	cmp	r7, #4
 80041a2:	d069      	beq.n	8004278 <__aeabi_dadd+0x1f4>
 80041a4:	1d21      	adds	r1, r4, #4
 80041a6:	42a1      	cmp	r1, r4
 80041a8:	4180      	sbcs	r0, r0
 80041aa:	4244      	negs	r4, r0
 80041ac:	191b      	adds	r3, r3, r4
 80041ae:	021c      	lsls	r4, r3, #8
 80041b0:	d507      	bpl.n	80041c2 <__aeabi_dadd+0x13e>
 80041b2:	4d85      	ldr	r5, [pc, #532]	; (80043c8 <__aeabi_dadd+0x344>)
 80041b4:	42aa      	cmp	r2, r5
 80041b6:	d100      	bne.n	80041ba <__aeabi_dadd+0x136>
 80041b8:	e0a2      	b.n	8004300 <__aeabi_dadd+0x27c>
 80041ba:	4f84      	ldr	r7, [pc, #528]	; (80043cc <__aeabi_dadd+0x348>)
 80041bc:	1c15      	adds	r5, r2, #0
 80041be:	403b      	ands	r3, r7
 80041c0:	3201      	adds	r2, #1
 80041c2:	08c8      	lsrs	r0, r1, #3
 80041c4:	075c      	lsls	r4, r3, #29
 80041c6:	0551      	lsls	r1, r2, #21
 80041c8:	4304      	orrs	r4, r0
 80041ca:	08db      	lsrs	r3, r3, #3
 80041cc:	0d4a      	lsrs	r2, r1, #21
 80041ce:	2a01      	cmp	r2, #1
 80041d0:	dd6d      	ble.n	80042ae <__aeabi_dadd+0x22a>
 80041d2:	031f      	lsls	r7, r3, #12
 80041d4:	056d      	lsls	r5, r5, #21
 80041d6:	0b3b      	lsrs	r3, r7, #12
 80041d8:	0d6d      	lsrs	r5, r5, #21
 80041da:	2000      	movs	r0, #0
 80041dc:	2100      	movs	r1, #0
 80041de:	1c20      	adds	r0, r4, #0
 80041e0:	0d0c      	lsrs	r4, r1, #20
 80041e2:	0524      	lsls	r4, r4, #20
 80041e4:	4a7a      	ldr	r2, [pc, #488]	; (80043d0 <__aeabi_dadd+0x34c>)
 80041e6:	4323      	orrs	r3, r4
 80041e8:	056d      	lsls	r5, r5, #21
 80041ea:	086d      	lsrs	r5, r5, #1
 80041ec:	401a      	ands	r2, r3
 80041ee:	432a      	orrs	r2, r5
 80041f0:	0052      	lsls	r2, r2, #1
 80041f2:	0852      	lsrs	r2, r2, #1
 80041f4:	07f6      	lsls	r6, r6, #31
 80041f6:	1c11      	adds	r1, r2, #0
 80041f8:	4331      	orrs	r1, r6
 80041fa:	bc1c      	pop	{r2, r3, r4}
 80041fc:	4690      	mov	r8, r2
 80041fe:	4699      	mov	r9, r3
 8004200:	46a2      	mov	sl, r4
 8004202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004204:	2b00      	cmp	r3, #0
 8004206:	dc00      	bgt.n	800420a <__aeabi_dadd+0x186>
 8004208:	e098      	b.n	800433c <__aeabi_dadd+0x2b8>
 800420a:	2d00      	cmp	r5, #0
 800420c:	d036      	beq.n	800427c <__aeabi_dadd+0x1f8>
 800420e:	4d6e      	ldr	r5, [pc, #440]	; (80043c8 <__aeabi_dadd+0x344>)
 8004210:	42a8      	cmp	r0, r5
 8004212:	d041      	beq.n	8004298 <__aeabi_dadd+0x214>
 8004214:	2580      	movs	r5, #128	; 0x80
 8004216:	042a      	lsls	r2, r5, #16
 8004218:	4317      	orrs	r7, r2
 800421a:	46b8      	mov	r8, r7
 800421c:	2b38      	cmp	r3, #56	; 0x38
 800421e:	dc00      	bgt.n	8004222 <__aeabi_dadd+0x19e>
 8004220:	e10a      	b.n	8004438 <__aeabi_dadd+0x3b4>
 8004222:	464b      	mov	r3, r9
 8004224:	4642      	mov	r2, r8
 8004226:	431a      	orrs	r2, r3
 8004228:	2300      	movs	r3, #0
 800422a:	2a00      	cmp	r2, #0
 800422c:	d000      	beq.n	8004230 <__aeabi_dadd+0x1ac>
 800422e:	2201      	movs	r2, #1
 8004230:	1852      	adds	r2, r2, r1
 8004232:	191b      	adds	r3, r3, r4
 8004234:	428a      	cmp	r2, r1
 8004236:	41a4      	sbcs	r4, r4
 8004238:	4261      	negs	r1, r4
 800423a:	185b      	adds	r3, r3, r1
 800423c:	1c14      	adds	r4, r2, #0
 800423e:	1c05      	adds	r5, r0, #0
 8004240:	0218      	lsls	r0, r3, #8
 8004242:	d532      	bpl.n	80042aa <__aeabi_dadd+0x226>
 8004244:	4960      	ldr	r1, [pc, #384]	; (80043c8 <__aeabi_dadd+0x344>)
 8004246:	1c68      	adds	r0, r5, #1
 8004248:	4288      	cmp	r0, r1
 800424a:	d100      	bne.n	800424e <__aeabi_dadd+0x1ca>
 800424c:	e16b      	b.n	8004526 <__aeabi_dadd+0x4a2>
 800424e:	4f5f      	ldr	r7, [pc, #380]	; (80043cc <__aeabi_dadd+0x348>)
 8004250:	2101      	movs	r1, #1
 8004252:	4021      	ands	r1, r4
 8004254:	0862      	lsrs	r2, r4, #1
 8004256:	403b      	ands	r3, r7
 8004258:	1c0c      	adds	r4, r1, #0
 800425a:	4314      	orrs	r4, r2
 800425c:	07df      	lsls	r7, r3, #31
 800425e:	1caa      	adds	r2, r5, #2
 8004260:	433c      	orrs	r4, r7
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	1c05      	adds	r5, r0, #0
 8004266:	e799      	b.n	800419c <__aeabi_dadd+0x118>
 8004268:	1c23      	adds	r3, r4, #0
 800426a:	270f      	movs	r7, #15
 800426c:	1c0c      	adds	r4, r1, #0
 800426e:	1c42      	adds	r2, r0, #1
 8004270:	1c05      	adds	r5, r0, #0
 8004272:	4027      	ands	r7, r4
 8004274:	2f04      	cmp	r7, #4
 8004276:	d195      	bne.n	80041a4 <__aeabi_dadd+0x120>
 8004278:	1c21      	adds	r1, r4, #0
 800427a:	e798      	b.n	80041ae <__aeabi_dadd+0x12a>
 800427c:	1c3a      	adds	r2, r7, #0
 800427e:	464d      	mov	r5, r9
 8004280:	432a      	orrs	r2, r5
 8004282:	d0f1      	beq.n	8004268 <__aeabi_dadd+0x1e4>
 8004284:	3b01      	subs	r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <__aeabi_dadd+0x20e>
 800428a:	4643      	mov	r3, r8
 800428c:	186a      	adds	r2, r5, r1
 800428e:	191b      	adds	r3, r3, r4
 8004290:	e7d0      	b.n	8004234 <__aeabi_dadd+0x1b0>
 8004292:	4a4d      	ldr	r2, [pc, #308]	; (80043c8 <__aeabi_dadd+0x344>)
 8004294:	4290      	cmp	r0, r2
 8004296:	d1c1      	bne.n	800421c <__aeabi_dadd+0x198>
 8004298:	2280      	movs	r2, #128	; 0x80
 800429a:	1c23      	adds	r3, r4, #0
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	1c0c      	adds	r4, r1, #0
 80042a0:	1c05      	adds	r5, r0, #0
 80042a2:	e77b      	b.n	800419c <__aeabi_dadd+0x118>
 80042a4:	4b49      	ldr	r3, [pc, #292]	; (80043cc <__aeabi_dadd+0x348>)
 80042a6:	1aad      	subs	r5, r5, r2
 80042a8:	403b      	ands	r3, r7
 80042aa:	1c6a      	adds	r2, r5, #1
 80042ac:	e776      	b.n	800419c <__aeabi_dadd+0x118>
 80042ae:	1c27      	adds	r7, r4, #0
 80042b0:	431f      	orrs	r7, r3
 80042b2:	d100      	bne.n	80042b6 <__aeabi_dadd+0x232>
 80042b4:	e231      	b.n	800471a <__aeabi_dadd+0x696>
 80042b6:	2d00      	cmp	r5, #0
 80042b8:	d03d      	beq.n	8004336 <__aeabi_dadd+0x2b2>
 80042ba:	2080      	movs	r0, #128	; 0x80
 80042bc:	0301      	lsls	r1, r0, #12
 80042be:	430b      	orrs	r3, r1
 80042c0:	e787      	b.n	80041d2 <__aeabi_dadd+0x14e>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d000      	beq.n	80042c8 <__aeabi_dadd+0x244>
 80042c6:	e085      	b.n	80043d4 <__aeabi_dadd+0x350>
 80042c8:	1c47      	adds	r7, r0, #1
 80042ca:	057b      	lsls	r3, r7, #21
 80042cc:	0d5d      	lsrs	r5, r3, #21
 80042ce:	2d01      	cmp	r5, #1
 80042d0:	dc00      	bgt.n	80042d4 <__aeabi_dadd+0x250>
 80042d2:	e0ed      	b.n	80044b0 <__aeabi_dadd+0x42c>
 80042d4:	1a8b      	subs	r3, r1, r2
 80042d6:	4647      	mov	r7, r8
 80042d8:	4299      	cmp	r1, r3
 80042da:	41ad      	sbcs	r5, r5
 80042dc:	1be7      	subs	r7, r4, r7
 80042de:	426a      	negs	r2, r5
 80042e0:	1abf      	subs	r7, r7, r2
 80042e2:	023d      	lsls	r5, r7, #8
 80042e4:	d400      	bmi.n	80042e8 <__aeabi_dadd+0x264>
 80042e6:	e09e      	b.n	8004426 <__aeabi_dadd+0x3a2>
 80042e8:	464f      	mov	r7, r9
 80042ea:	1a79      	subs	r1, r7, r1
 80042ec:	4645      	mov	r5, r8
 80042ee:	4589      	cmp	r9, r1
 80042f0:	4192      	sbcs	r2, r2
 80042f2:	1b2c      	subs	r4, r5, r4
 80042f4:	4256      	negs	r6, r2
 80042f6:	1ba7      	subs	r7, r4, r6
 80042f8:	1c05      	adds	r5, r0, #0
 80042fa:	1c0c      	adds	r4, r1, #0
 80042fc:	4666      	mov	r6, ip
 80042fe:	e724      	b.n	800414a <__aeabi_dadd+0xc6>
 8004300:	1c15      	adds	r5, r2, #0
 8004302:	2300      	movs	r3, #0
 8004304:	2400      	movs	r4, #0
 8004306:	e768      	b.n	80041da <__aeabi_dadd+0x156>
 8004308:	1c20      	adds	r0, r4, #0
 800430a:	f001 fddd 	bl	8005ec8 <__clzsi2>
 800430e:	3020      	adds	r0, #32
 8004310:	1c02      	adds	r2, r0, #0
 8004312:	3a08      	subs	r2, #8
 8004314:	2a1f      	cmp	r2, #31
 8004316:	dc00      	bgt.n	800431a <__aeabi_dadd+0x296>
 8004318:	e722      	b.n	8004160 <__aeabi_dadd+0xdc>
 800431a:	1c27      	adds	r7, r4, #0
 800431c:	3828      	subs	r0, #40	; 0x28
 800431e:	4087      	lsls	r7, r0
 8004320:	2400      	movs	r4, #0
 8004322:	e724      	b.n	800416e <__aeabi_dadd+0xea>
 8004324:	4642      	mov	r2, r8
 8004326:	464d      	mov	r5, r9
 8004328:	432a      	orrs	r2, r5
 800432a:	2300      	movs	r3, #0
 800432c:	2a00      	cmp	r2, #0
 800432e:	d100      	bne.n	8004332 <__aeabi_dadd+0x2ae>
 8004330:	e6fe      	b.n	8004130 <__aeabi_dadd+0xac>
 8004332:	2201      	movs	r2, #1
 8004334:	e6fc      	b.n	8004130 <__aeabi_dadd+0xac>
 8004336:	031a      	lsls	r2, r3, #12
 8004338:	0b13      	lsrs	r3, r2, #12
 800433a:	e74e      	b.n	80041da <__aeabi_dadd+0x156>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d000      	beq.n	8004342 <__aeabi_dadd+0x2be>
 8004340:	e0d9      	b.n	80044f6 <__aeabi_dadd+0x472>
 8004342:	1c45      	adds	r5, r0, #1
 8004344:	056b      	lsls	r3, r5, #21
 8004346:	0d5f      	lsrs	r7, r3, #21
 8004348:	2f01      	cmp	r7, #1
 800434a:	dc00      	bgt.n	800434e <__aeabi_dadd+0x2ca>
 800434c:	e094      	b.n	8004478 <__aeabi_dadd+0x3f4>
 800434e:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <__aeabi_dadd+0x344>)
 8004350:	429d      	cmp	r5, r3
 8004352:	d100      	bne.n	8004356 <__aeabi_dadd+0x2d2>
 8004354:	e104      	b.n	8004560 <__aeabi_dadd+0x4dc>
 8004356:	1852      	adds	r2, r2, r1
 8004358:	428a      	cmp	r2, r1
 800435a:	41bf      	sbcs	r7, r7
 800435c:	4643      	mov	r3, r8
 800435e:	191c      	adds	r4, r3, r4
 8004360:	427b      	negs	r3, r7
 8004362:	18e7      	adds	r7, r4, r3
 8004364:	0851      	lsrs	r1, r2, #1
 8004366:	07fc      	lsls	r4, r7, #31
 8004368:	430c      	orrs	r4, r1
 800436a:	087b      	lsrs	r3, r7, #1
 800436c:	1c82      	adds	r2, r0, #2
 800436e:	e715      	b.n	800419c <__aeabi_dadd+0x118>
 8004370:	4d15      	ldr	r5, [pc, #84]	; (80043c8 <__aeabi_dadd+0x344>)
 8004372:	42a8      	cmp	r0, r5
 8004374:	d000      	beq.n	8004378 <__aeabi_dadd+0x2f4>
 8004376:	e6c5      	b.n	8004104 <__aeabi_dadd+0x80>
 8004378:	e78e      	b.n	8004298 <__aeabi_dadd+0x214>
 800437a:	1c29      	adds	r1, r5, #0
 800437c:	391f      	subs	r1, #31
 800437e:	1c3a      	adds	r2, r7, #0
 8004380:	40ca      	lsrs	r2, r1
 8004382:	1c11      	adds	r1, r2, #0
 8004384:	2200      	movs	r2, #0
 8004386:	2b20      	cmp	r3, #32
 8004388:	d003      	beq.n	8004392 <__aeabi_dadd+0x30e>
 800438a:	203f      	movs	r0, #63	; 0x3f
 800438c:	1b43      	subs	r3, r0, r5
 800438e:	1c3a      	adds	r2, r7, #0
 8004390:	409a      	lsls	r2, r3
 8004392:	4314      	orrs	r4, r2
 8004394:	1e62      	subs	r2, r4, #1
 8004396:	4194      	sbcs	r4, r2
 8004398:	430c      	orrs	r4, r1
 800439a:	2201      	movs	r2, #1
 800439c:	2300      	movs	r3, #0
 800439e:	2500      	movs	r5, #0
 80043a0:	e6fc      	b.n	800419c <__aeabi_dadd+0x118>
 80043a2:	1c1f      	adds	r7, r3, #0
 80043a4:	3f20      	subs	r7, #32
 80043a6:	4645      	mov	r5, r8
 80043a8:	40fd      	lsrs	r5, r7
 80043aa:	1c2f      	adds	r7, r5, #0
 80043ac:	2500      	movs	r5, #0
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d003      	beq.n	80043ba <__aeabi_dadd+0x336>
 80043b2:	2240      	movs	r2, #64	; 0x40
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	4645      	mov	r5, r8
 80043b8:	409d      	lsls	r5, r3
 80043ba:	464a      	mov	r2, r9
 80043bc:	432a      	orrs	r2, r5
 80043be:	1e55      	subs	r5, r2, #1
 80043c0:	41aa      	sbcs	r2, r5
 80043c2:	433a      	orrs	r2, r7
 80043c4:	2300      	movs	r3, #0
 80043c6:	e6b3      	b.n	8004130 <__aeabi_dadd+0xac>
 80043c8:	000007ff 	.word	0x000007ff
 80043cc:	ff7fffff 	.word	0xff7fffff
 80043d0:	800fffff 	.word	0x800fffff
 80043d4:	425b      	negs	r3, r3
 80043d6:	2800      	cmp	r0, #0
 80043d8:	d043      	beq.n	8004462 <__aeabi_dadd+0x3de>
 80043da:	4ac8      	ldr	r2, [pc, #800]	; (80046fc <__aeabi_dadd+0x678>)
 80043dc:	4295      	cmp	r5, r2
 80043de:	d100      	bne.n	80043e2 <__aeabi_dadd+0x35e>
 80043e0:	e122      	b.n	8004628 <__aeabi_dadd+0x5a4>
 80043e2:	2780      	movs	r7, #128	; 0x80
 80043e4:	0438      	lsls	r0, r7, #16
 80043e6:	4304      	orrs	r4, r0
 80043e8:	2b38      	cmp	r3, #56	; 0x38
 80043ea:	dd00      	ble.n	80043ee <__aeabi_dadd+0x36a>
 80043ec:	e0b0      	b.n	8004550 <__aeabi_dadd+0x4cc>
 80043ee:	2b1f      	cmp	r3, #31
 80043f0:	dd00      	ble.n	80043f4 <__aeabi_dadd+0x370>
 80043f2:	e14b      	b.n	800468c <__aeabi_dadd+0x608>
 80043f4:	2620      	movs	r6, #32
 80043f6:	1af2      	subs	r2, r6, r3
 80043f8:	1c27      	adds	r7, r4, #0
 80043fa:	1c08      	adds	r0, r1, #0
 80043fc:	40d8      	lsrs	r0, r3
 80043fe:	4091      	lsls	r1, r2
 8004400:	4097      	lsls	r7, r2
 8004402:	1c0e      	adds	r6, r1, #0
 8004404:	4338      	orrs	r0, r7
 8004406:	1e71      	subs	r1, r6, #1
 8004408:	418e      	sbcs	r6, r1
 800440a:	40dc      	lsrs	r4, r3
 800440c:	1c01      	adds	r1, r0, #0
 800440e:	4331      	orrs	r1, r6
 8004410:	1c23      	adds	r3, r4, #0
 8004412:	464c      	mov	r4, r9
 8004414:	1a64      	subs	r4, r4, r1
 8004416:	4640      	mov	r0, r8
 8004418:	45a1      	cmp	r9, r4
 800441a:	4192      	sbcs	r2, r2
 800441c:	4256      	negs	r6, r2
 800441e:	1ac1      	subs	r1, r0, r3
 8004420:	1b8b      	subs	r3, r1, r6
 8004422:	4666      	mov	r6, ip
 8004424:	e68c      	b.n	8004140 <__aeabi_dadd+0xbc>
 8004426:	1c39      	adds	r1, r7, #0
 8004428:	4319      	orrs	r1, r3
 800442a:	d122      	bne.n	8004472 <__aeabi_dadd+0x3ee>
 800442c:	2600      	movs	r6, #0
 800442e:	2201      	movs	r2, #1
 8004430:	2300      	movs	r3, #0
 8004432:	2104      	movs	r1, #4
 8004434:	2500      	movs	r5, #0
 8004436:	e6ba      	b.n	80041ae <__aeabi_dadd+0x12a>
 8004438:	2b1f      	cmp	r3, #31
 800443a:	dc49      	bgt.n	80044d0 <__aeabi_dadd+0x44c>
 800443c:	2520      	movs	r5, #32
 800443e:	1aed      	subs	r5, r5, r3
 8004440:	4642      	mov	r2, r8
 8004442:	40aa      	lsls	r2, r5
 8004444:	4694      	mov	ip, r2
 8004446:	464a      	mov	r2, r9
 8004448:	40da      	lsrs	r2, r3
 800444a:	4667      	mov	r7, ip
 800444c:	433a      	orrs	r2, r7
 800444e:	464f      	mov	r7, r9
 8004450:	40af      	lsls	r7, r5
 8004452:	1c3d      	adds	r5, r7, #0
 8004454:	1e6f      	subs	r7, r5, #1
 8004456:	41bd      	sbcs	r5, r7
 8004458:	4647      	mov	r7, r8
 800445a:	40df      	lsrs	r7, r3
 800445c:	432a      	orrs	r2, r5
 800445e:	1c3b      	adds	r3, r7, #0
 8004460:	e6e6      	b.n	8004230 <__aeabi_dadd+0x1ac>
 8004462:	1c26      	adds	r6, r4, #0
 8004464:	430e      	orrs	r6, r1
 8004466:	d167      	bne.n	8004538 <__aeabi_dadd+0x4b4>
 8004468:	1c6a      	adds	r2, r5, #1
 800446a:	1c3b      	adds	r3, r7, #0
 800446c:	464c      	mov	r4, r9
 800446e:	4666      	mov	r6, ip
 8004470:	e694      	b.n	800419c <__aeabi_dadd+0x118>
 8004472:	1c1c      	adds	r4, r3, #0
 8004474:	1c05      	adds	r5, r0, #0
 8004476:	e668      	b.n	800414a <__aeabi_dadd+0xc6>
 8004478:	1c23      	adds	r3, r4, #0
 800447a:	430b      	orrs	r3, r1
 800447c:	2800      	cmp	r0, #0
 800447e:	d000      	beq.n	8004482 <__aeabi_dadd+0x3fe>
 8004480:	e0d8      	b.n	8004634 <__aeabi_dadd+0x5b0>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d100      	bne.n	8004488 <__aeabi_dadd+0x404>
 8004486:	e134      	b.n	80046f2 <__aeabi_dadd+0x66e>
 8004488:	4645      	mov	r5, r8
 800448a:	4315      	orrs	r5, r2
 800448c:	d100      	bne.n	8004490 <__aeabi_dadd+0x40c>
 800448e:	e0f2      	b.n	8004676 <__aeabi_dadd+0x5f2>
 8004490:	1852      	adds	r2, r2, r1
 8004492:	4647      	mov	r7, r8
 8004494:	1938      	adds	r0, r7, r4
 8004496:	428a      	cmp	r2, r1
 8004498:	41a4      	sbcs	r4, r4
 800449a:	4261      	negs	r1, r4
 800449c:	1843      	adds	r3, r0, r1
 800449e:	021f      	lsls	r7, r3, #8
 80044a0:	d400      	bmi.n	80044a4 <__aeabi_dadd+0x420>
 80044a2:	e143      	b.n	800472c <__aeabi_dadd+0x6a8>
 80044a4:	4d96      	ldr	r5, [pc, #600]	; (8004700 <__aeabi_dadd+0x67c>)
 80044a6:	1c14      	adds	r4, r2, #0
 80044a8:	402b      	ands	r3, r5
 80044aa:	2202      	movs	r2, #2
 80044ac:	2501      	movs	r5, #1
 80044ae:	e675      	b.n	800419c <__aeabi_dadd+0x118>
 80044b0:	1c23      	adds	r3, r4, #0
 80044b2:	430b      	orrs	r3, r1
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d129      	bne.n	800450c <__aeabi_dadd+0x488>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d000      	beq.n	80044be <__aeabi_dadd+0x43a>
 80044bc:	e097      	b.n	80045ee <__aeabi_dadd+0x56a>
 80044be:	4646      	mov	r6, r8
 80044c0:	4316      	orrs	r6, r2
 80044c2:	d0b3      	beq.n	800442c <__aeabi_dadd+0x3a8>
 80044c4:	1c14      	adds	r4, r2, #0
 80044c6:	4643      	mov	r3, r8
 80044c8:	4666      	mov	r6, ip
 80044ca:	2201      	movs	r2, #1
 80044cc:	2500      	movs	r5, #0
 80044ce:	e665      	b.n	800419c <__aeabi_dadd+0x118>
 80044d0:	1c1a      	adds	r2, r3, #0
 80044d2:	3a20      	subs	r2, #32
 80044d4:	4647      	mov	r7, r8
 80044d6:	40d7      	lsrs	r7, r2
 80044d8:	1c3a      	adds	r2, r7, #0
 80044da:	2500      	movs	r5, #0
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d003      	beq.n	80044e8 <__aeabi_dadd+0x464>
 80044e0:	2540      	movs	r5, #64	; 0x40
 80044e2:	1aeb      	subs	r3, r5, r3
 80044e4:	4645      	mov	r5, r8
 80044e6:	409d      	lsls	r5, r3
 80044e8:	464f      	mov	r7, r9
 80044ea:	433d      	orrs	r5, r7
 80044ec:	1e6b      	subs	r3, r5, #1
 80044ee:	419d      	sbcs	r5, r3
 80044f0:	432a      	orrs	r2, r5
 80044f2:	2300      	movs	r3, #0
 80044f4:	e69c      	b.n	8004230 <__aeabi_dadd+0x1ac>
 80044f6:	425b      	negs	r3, r3
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d139      	bne.n	8004570 <__aeabi_dadd+0x4ec>
 80044fc:	1c20      	adds	r0, r4, #0
 80044fe:	4308      	orrs	r0, r1
 8004500:	d000      	beq.n	8004504 <__aeabi_dadd+0x480>
 8004502:	e0d5      	b.n	80046b0 <__aeabi_dadd+0x62c>
 8004504:	1c6a      	adds	r2, r5, #1
 8004506:	1c3b      	adds	r3, r7, #0
 8004508:	464c      	mov	r4, r9
 800450a:	e647      	b.n	800419c <__aeabi_dadd+0x118>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d151      	bne.n	80045b4 <__aeabi_dadd+0x530>
 8004510:	4647      	mov	r7, r8
 8004512:	4317      	orrs	r7, r2
 8004514:	d100      	bne.n	8004518 <__aeabi_dadd+0x494>
 8004516:	e0d6      	b.n	80046c6 <__aeabi_dadd+0x642>
 8004518:	1c14      	adds	r4, r2, #0
 800451a:	2280      	movs	r2, #128	; 0x80
 800451c:	4643      	mov	r3, r8
 800451e:	4666      	mov	r6, ip
 8004520:	0112      	lsls	r2, r2, #4
 8004522:	4d76      	ldr	r5, [pc, #472]	; (80046fc <__aeabi_dadd+0x678>)
 8004524:	e63a      	b.n	800419c <__aeabi_dadd+0x118>
 8004526:	4655      	mov	r5, sl
 8004528:	2601      	movs	r6, #1
 800452a:	402e      	ands	r6, r5
 800452c:	1c05      	adds	r5, r0, #0
 800452e:	2080      	movs	r0, #128	; 0x80
 8004530:	0102      	lsls	r2, r0, #4
 8004532:	2300      	movs	r3, #0
 8004534:	2104      	movs	r1, #4
 8004536:	e63a      	b.n	80041ae <__aeabi_dadd+0x12a>
 8004538:	3b01      	subs	r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d170      	bne.n	8004620 <__aeabi_dadd+0x59c>
 800453e:	1a52      	subs	r2, r2, r1
 8004540:	1b3f      	subs	r7, r7, r4
 8004542:	4591      	cmp	r9, r2
 8004544:	41a4      	sbcs	r4, r4
 8004546:	4260      	negs	r0, r4
 8004548:	1a3b      	subs	r3, r7, r0
 800454a:	1c14      	adds	r4, r2, #0
 800454c:	4666      	mov	r6, ip
 800454e:	e5f7      	b.n	8004140 <__aeabi_dadd+0xbc>
 8004550:	430c      	orrs	r4, r1
 8004552:	2300      	movs	r3, #0
 8004554:	2100      	movs	r1, #0
 8004556:	2c00      	cmp	r4, #0
 8004558:	d100      	bne.n	800455c <__aeabi_dadd+0x4d8>
 800455a:	e75a      	b.n	8004412 <__aeabi_dadd+0x38e>
 800455c:	2101      	movs	r1, #1
 800455e:	e758      	b.n	8004412 <__aeabi_dadd+0x38e>
 8004560:	4653      	mov	r3, sl
 8004562:	2601      	movs	r6, #1
 8004564:	2480      	movs	r4, #128	; 0x80
 8004566:	401e      	ands	r6, r3
 8004568:	0122      	lsls	r2, r4, #4
 800456a:	2300      	movs	r3, #0
 800456c:	2104      	movs	r1, #4
 800456e:	e61e      	b.n	80041ae <__aeabi_dadd+0x12a>
 8004570:	4a62      	ldr	r2, [pc, #392]	; (80046fc <__aeabi_dadd+0x678>)
 8004572:	4295      	cmp	r5, r2
 8004574:	d100      	bne.n	8004578 <__aeabi_dadd+0x4f4>
 8004576:	e0cb      	b.n	8004710 <__aeabi_dadd+0x68c>
 8004578:	2080      	movs	r0, #128	; 0x80
 800457a:	0407      	lsls	r7, r0, #16
 800457c:	433c      	orrs	r4, r7
 800457e:	2b38      	cmp	r3, #56	; 0x38
 8004580:	dd00      	ble.n	8004584 <__aeabi_dadd+0x500>
 8004582:	e0a8      	b.n	80046d6 <__aeabi_dadd+0x652>
 8004584:	2b1f      	cmp	r3, #31
 8004586:	dd00      	ble.n	800458a <__aeabi_dadd+0x506>
 8004588:	e0d4      	b.n	8004734 <__aeabi_dadd+0x6b0>
 800458a:	2220      	movs	r2, #32
 800458c:	1ad0      	subs	r0, r2, r3
 800458e:	1c27      	adds	r7, r4, #0
 8004590:	1c0a      	adds	r2, r1, #0
 8004592:	4087      	lsls	r7, r0
 8004594:	40da      	lsrs	r2, r3
 8004596:	4081      	lsls	r1, r0
 8004598:	433a      	orrs	r2, r7
 800459a:	1e48      	subs	r0, r1, #1
 800459c:	4181      	sbcs	r1, r0
 800459e:	40dc      	lsrs	r4, r3
 80045a0:	430a      	orrs	r2, r1
 80045a2:	1c23      	adds	r3, r4, #0
 80045a4:	464c      	mov	r4, r9
 80045a6:	1914      	adds	r4, r2, r4
 80045a8:	454c      	cmp	r4, r9
 80045aa:	4192      	sbcs	r2, r2
 80045ac:	4443      	add	r3, r8
 80045ae:	4251      	negs	r1, r2
 80045b0:	185b      	adds	r3, r3, r1
 80045b2:	e645      	b.n	8004240 <__aeabi_dadd+0x1bc>
 80045b4:	4645      	mov	r5, r8
 80045b6:	4315      	orrs	r5, r2
 80045b8:	d062      	beq.n	8004680 <__aeabi_dadd+0x5fc>
 80045ba:	0762      	lsls	r2, r4, #29
 80045bc:	08e3      	lsrs	r3, r4, #3
 80045be:	2480      	movs	r4, #128	; 0x80
 80045c0:	08c9      	lsrs	r1, r1, #3
 80045c2:	0320      	lsls	r0, r4, #12
 80045c4:	430a      	orrs	r2, r1
 80045c6:	4203      	tst	r3, r0
 80045c8:	d009      	beq.n	80045de <__aeabi_dadd+0x55a>
 80045ca:	4644      	mov	r4, r8
 80045cc:	08e1      	lsrs	r1, r4, #3
 80045ce:	4201      	tst	r1, r0
 80045d0:	d105      	bne.n	80045de <__aeabi_dadd+0x55a>
 80045d2:	464f      	mov	r7, r9
 80045d4:	0766      	lsls	r6, r4, #29
 80045d6:	08fa      	lsrs	r2, r7, #3
 80045d8:	4332      	orrs	r2, r6
 80045da:	1c0b      	adds	r3, r1, #0
 80045dc:	4666      	mov	r6, ip
 80045de:	0f55      	lsrs	r5, r2, #29
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	2080      	movs	r0, #128	; 0x80
 80045e4:	432b      	orrs	r3, r5
 80045e6:	00d4      	lsls	r4, r2, #3
 80045e8:	4d44      	ldr	r5, [pc, #272]	; (80046fc <__aeabi_dadd+0x678>)
 80045ea:	0102      	lsls	r2, r0, #4
 80045ec:	e5d6      	b.n	800419c <__aeabi_dadd+0x118>
 80045ee:	4640      	mov	r0, r8
 80045f0:	4310      	orrs	r0, r2
 80045f2:	d040      	beq.n	8004676 <__aeabi_dadd+0x5f2>
 80045f4:	1a8a      	subs	r2, r1, r2
 80045f6:	4645      	mov	r5, r8
 80045f8:	4291      	cmp	r1, r2
 80045fa:	4180      	sbcs	r0, r0
 80045fc:	1b63      	subs	r3, r4, r5
 80045fe:	4247      	negs	r7, r0
 8004600:	1bdb      	subs	r3, r3, r7
 8004602:	021f      	lsls	r7, r3, #8
 8004604:	d400      	bmi.n	8004608 <__aeabi_dadd+0x584>
 8004606:	e08d      	b.n	8004724 <__aeabi_dadd+0x6a0>
 8004608:	464b      	mov	r3, r9
 800460a:	1a5a      	subs	r2, r3, r1
 800460c:	4591      	cmp	r9, r2
 800460e:	41b6      	sbcs	r6, r6
 8004610:	1b2c      	subs	r4, r5, r4
 8004612:	4275      	negs	r5, r6
 8004614:	1b63      	subs	r3, r4, r5
 8004616:	4666      	mov	r6, ip
 8004618:	1c14      	adds	r4, r2, #0
 800461a:	2500      	movs	r5, #0
 800461c:	2201      	movs	r2, #1
 800461e:	e5bd      	b.n	800419c <__aeabi_dadd+0x118>
 8004620:	4e36      	ldr	r6, [pc, #216]	; (80046fc <__aeabi_dadd+0x678>)
 8004622:	42b5      	cmp	r5, r6
 8004624:	d000      	beq.n	8004628 <__aeabi_dadd+0x5a4>
 8004626:	e6df      	b.n	80043e8 <__aeabi_dadd+0x364>
 8004628:	2180      	movs	r1, #128	; 0x80
 800462a:	4643      	mov	r3, r8
 800462c:	464c      	mov	r4, r9
 800462e:	4666      	mov	r6, ip
 8004630:	010a      	lsls	r2, r1, #4
 8004632:	e5b3      	b.n	800419c <__aeabi_dadd+0x118>
 8004634:	2b00      	cmp	r3, #0
 8004636:	d056      	beq.n	80046e6 <__aeabi_dadd+0x662>
 8004638:	4642      	mov	r2, r8
 800463a:	464b      	mov	r3, r9
 800463c:	431a      	orrs	r2, r3
 800463e:	d01f      	beq.n	8004680 <__aeabi_dadd+0x5fc>
 8004640:	2080      	movs	r0, #128	; 0x80
 8004642:	08c9      	lsrs	r1, r1, #3
 8004644:	0767      	lsls	r7, r4, #29
 8004646:	08e3      	lsrs	r3, r4, #3
 8004648:	0302      	lsls	r2, r0, #12
 800464a:	4339      	orrs	r1, r7
 800464c:	4213      	tst	r3, r2
 800464e:	d100      	bne.n	8004652 <__aeabi_dadd+0x5ce>
 8004650:	e082      	b.n	8004758 <__aeabi_dadd+0x6d4>
 8004652:	4644      	mov	r4, r8
 8004654:	08e0      	lsrs	r0, r4, #3
 8004656:	4210      	tst	r0, r2
 8004658:	d000      	beq.n	800465c <__aeabi_dadd+0x5d8>
 800465a:	e07d      	b.n	8004758 <__aeabi_dadd+0x6d4>
 800465c:	464d      	mov	r5, r9
 800465e:	08e9      	lsrs	r1, r5, #3
 8004660:	0764      	lsls	r4, r4, #29
 8004662:	1c03      	adds	r3, r0, #0
 8004664:	430c      	orrs	r4, r1
 8004666:	0f60      	lsrs	r0, r4, #29
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	2280      	movs	r2, #128	; 0x80
 800466c:	4303      	orrs	r3, r0
 800466e:	00e4      	lsls	r4, r4, #3
 8004670:	0112      	lsls	r2, r2, #4
 8004672:	4d22      	ldr	r5, [pc, #136]	; (80046fc <__aeabi_dadd+0x678>)
 8004674:	e592      	b.n	800419c <__aeabi_dadd+0x118>
 8004676:	1c23      	adds	r3, r4, #0
 8004678:	2201      	movs	r2, #1
 800467a:	1c0c      	adds	r4, r1, #0
 800467c:	2500      	movs	r5, #0
 800467e:	e58d      	b.n	800419c <__aeabi_dadd+0x118>
 8004680:	2080      	movs	r0, #128	; 0x80
 8004682:	1c23      	adds	r3, r4, #0
 8004684:	0102      	lsls	r2, r0, #4
 8004686:	1c0c      	adds	r4, r1, #0
 8004688:	4d1c      	ldr	r5, [pc, #112]	; (80046fc <__aeabi_dadd+0x678>)
 800468a:	e587      	b.n	800419c <__aeabi_dadd+0x118>
 800468c:	1c18      	adds	r0, r3, #0
 800468e:	3820      	subs	r0, #32
 8004690:	1c22      	adds	r2, r4, #0
 8004692:	40c2      	lsrs	r2, r0
 8004694:	1c10      	adds	r0, r2, #0
 8004696:	2200      	movs	r2, #0
 8004698:	2b20      	cmp	r3, #32
 800469a:	d003      	beq.n	80046a4 <__aeabi_dadd+0x620>
 800469c:	2740      	movs	r7, #64	; 0x40
 800469e:	1afb      	subs	r3, r7, r3
 80046a0:	1c22      	adds	r2, r4, #0
 80046a2:	409a      	lsls	r2, r3
 80046a4:	4311      	orrs	r1, r2
 80046a6:	1e4a      	subs	r2, r1, #1
 80046a8:	4191      	sbcs	r1, r2
 80046aa:	4301      	orrs	r1, r0
 80046ac:	2300      	movs	r3, #0
 80046ae:	e6b0      	b.n	8004412 <__aeabi_dadd+0x38e>
 80046b0:	3b01      	subs	r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d128      	bne.n	8004708 <__aeabi_dadd+0x684>
 80046b6:	4449      	add	r1, r9
 80046b8:	4291      	cmp	r1, r2
 80046ba:	41bf      	sbcs	r7, r7
 80046bc:	4444      	add	r4, r8
 80046be:	427a      	negs	r2, r7
 80046c0:	18a3      	adds	r3, r4, r2
 80046c2:	1c0c      	adds	r4, r1, #0
 80046c4:	e5bc      	b.n	8004240 <__aeabi_dadd+0x1bc>
 80046c6:	2280      	movs	r2, #128	; 0x80
 80046c8:	2104      	movs	r1, #4
 80046ca:	2600      	movs	r6, #0
 80046cc:	0112      	lsls	r2, r2, #4
 80046ce:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <__aeabi_dadd+0x680>)
 80046d0:	4249      	negs	r1, r1
 80046d2:	4d0a      	ldr	r5, [pc, #40]	; (80046fc <__aeabi_dadd+0x678>)
 80046d4:	e56b      	b.n	80041ae <__aeabi_dadd+0x12a>
 80046d6:	430c      	orrs	r4, r1
 80046d8:	2300      	movs	r3, #0
 80046da:	2200      	movs	r2, #0
 80046dc:	2c00      	cmp	r4, #0
 80046de:	d100      	bne.n	80046e2 <__aeabi_dadd+0x65e>
 80046e0:	e760      	b.n	80045a4 <__aeabi_dadd+0x520>
 80046e2:	2201      	movs	r2, #1
 80046e4:	e75e      	b.n	80045a4 <__aeabi_dadd+0x520>
 80046e6:	2580      	movs	r5, #128	; 0x80
 80046e8:	1c14      	adds	r4, r2, #0
 80046ea:	4643      	mov	r3, r8
 80046ec:	012a      	lsls	r2, r5, #4
 80046ee:	4d03      	ldr	r5, [pc, #12]	; (80046fc <__aeabi_dadd+0x678>)
 80046f0:	e554      	b.n	800419c <__aeabi_dadd+0x118>
 80046f2:	1c14      	adds	r4, r2, #0
 80046f4:	4643      	mov	r3, r8
 80046f6:	2201      	movs	r2, #1
 80046f8:	2500      	movs	r5, #0
 80046fa:	e54f      	b.n	800419c <__aeabi_dadd+0x118>
 80046fc:	000007ff 	.word	0x000007ff
 8004700:	ff7fffff 	.word	0xff7fffff
 8004704:	007fffff 	.word	0x007fffff
 8004708:	4814      	ldr	r0, [pc, #80]	; (800475c <__aeabi_dadd+0x6d8>)
 800470a:	4285      	cmp	r5, r0
 800470c:	d000      	beq.n	8004710 <__aeabi_dadd+0x68c>
 800470e:	e736      	b.n	800457e <__aeabi_dadd+0x4fa>
 8004710:	2780      	movs	r7, #128	; 0x80
 8004712:	4643      	mov	r3, r8
 8004714:	464c      	mov	r4, r9
 8004716:	013a      	lsls	r2, r7, #4
 8004718:	e540      	b.n	800419c <__aeabi_dadd+0x118>
 800471a:	056b      	lsls	r3, r5, #21
 800471c:	0d5d      	lsrs	r5, r3, #21
 800471e:	2400      	movs	r4, #0
 8004720:	2300      	movs	r3, #0
 8004722:	e55a      	b.n	80041da <__aeabi_dadd+0x156>
 8004724:	1c19      	adds	r1, r3, #0
 8004726:	4311      	orrs	r1, r2
 8004728:	d100      	bne.n	800472c <__aeabi_dadd+0x6a8>
 800472a:	e67f      	b.n	800442c <__aeabi_dadd+0x3a8>
 800472c:	1c14      	adds	r4, r2, #0
 800472e:	2500      	movs	r5, #0
 8004730:	2201      	movs	r2, #1
 8004732:	e533      	b.n	800419c <__aeabi_dadd+0x118>
 8004734:	1c1f      	adds	r7, r3, #0
 8004736:	3f20      	subs	r7, #32
 8004738:	1c20      	adds	r0, r4, #0
 800473a:	40f8      	lsrs	r0, r7
 800473c:	1c02      	adds	r2, r0, #0
 800473e:	2000      	movs	r0, #0
 8004740:	2b20      	cmp	r3, #32
 8004742:	d003      	beq.n	800474c <__aeabi_dadd+0x6c8>
 8004744:	2040      	movs	r0, #64	; 0x40
 8004746:	1ac3      	subs	r3, r0, r3
 8004748:	1c20      	adds	r0, r4, #0
 800474a:	4098      	lsls	r0, r3
 800474c:	4301      	orrs	r1, r0
 800474e:	1e48      	subs	r0, r1, #1
 8004750:	4181      	sbcs	r1, r0
 8004752:	430a      	orrs	r2, r1
 8004754:	2300      	movs	r3, #0
 8004756:	e725      	b.n	80045a4 <__aeabi_dadd+0x520>
 8004758:	1c0c      	adds	r4, r1, #0
 800475a:	e784      	b.n	8004666 <__aeabi_dadd+0x5e2>
 800475c:	000007ff 	.word	0x000007ff

08004760 <__aeabi_ddiv>:
 8004760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004762:	465f      	mov	r7, fp
 8004764:	4656      	mov	r6, sl
 8004766:	464d      	mov	r5, r9
 8004768:	4644      	mov	r4, r8
 800476a:	b4f0      	push	{r4, r5, r6, r7}
 800476c:	1c1d      	adds	r5, r3, #0
 800476e:	004b      	lsls	r3, r1, #1
 8004770:	b087      	sub	sp, #28
 8004772:	1c14      	adds	r4, r2, #0
 8004774:	0d5a      	lsrs	r2, r3, #21
 8004776:	030f      	lsls	r7, r1, #12
 8004778:	4690      	mov	r8, r2
 800477a:	0fc9      	lsrs	r1, r1, #31
 800477c:	466b      	mov	r3, sp
 800477e:	7219      	strb	r1, [r3, #8]
 8004780:	b2ca      	uxtb	r2, r1
 8004782:	4643      	mov	r3, r8
 8004784:	1c06      	adds	r6, r0, #0
 8004786:	0b3f      	lsrs	r7, r7, #12
 8004788:	9201      	str	r2, [sp, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d11d      	bne.n	80047ca <__aeabi_ddiv+0x6a>
 800478e:	1c3b      	adds	r3, r7, #0
 8004790:	4303      	orrs	r3, r0
 8004792:	d100      	bne.n	8004796 <__aeabi_ddiv+0x36>
 8004794:	e118      	b.n	80049c8 <__aeabi_ddiv+0x268>
 8004796:	2f00      	cmp	r7, #0
 8004798:	d100      	bne.n	800479c <__aeabi_ddiv+0x3c>
 800479a:	e241      	b.n	8004c20 <__aeabi_ddiv+0x4c0>
 800479c:	1c38      	adds	r0, r7, #0
 800479e:	f001 fb93 	bl	8005ec8 <__clzsi2>
 80047a2:	2827      	cmp	r0, #39	; 0x27
 80047a4:	dd00      	ble.n	80047a8 <__aeabi_ddiv+0x48>
 80047a6:	e235      	b.n	8004c14 <__aeabi_ddiv+0x4b4>
 80047a8:	2128      	movs	r1, #40	; 0x28
 80047aa:	1c03      	adds	r3, r0, #0
 80047ac:	3b08      	subs	r3, #8
 80047ae:	1a0a      	subs	r2, r1, r0
 80047b0:	1c31      	adds	r1, r6, #0
 80047b2:	409f      	lsls	r7, r3
 80047b4:	40d1      	lsrs	r1, r2
 80047b6:	430f      	orrs	r7, r1
 80047b8:	409e      	lsls	r6, r3
 80047ba:	49b6      	ldr	r1, [pc, #728]	; (8004a94 <__aeabi_ddiv+0x334>)
 80047bc:	2300      	movs	r3, #0
 80047be:	1a0a      	subs	r2, r1, r0
 80047c0:	2000      	movs	r0, #0
 80047c2:	4690      	mov	r8, r2
 80047c4:	469b      	mov	fp, r3
 80047c6:	9004      	str	r0, [sp, #16]
 80047c8:	e00f      	b.n	80047ea <__aeabi_ddiv+0x8a>
 80047ca:	48b3      	ldr	r0, [pc, #716]	; (8004a98 <__aeabi_ddiv+0x338>)
 80047cc:	4580      	cmp	r8, r0
 80047ce:	d03e      	beq.n	800484e <__aeabi_ddiv+0xee>
 80047d0:	2280      	movs	r2, #128	; 0x80
 80047d2:	0351      	lsls	r1, r2, #13
 80047d4:	430f      	orrs	r7, r1
 80047d6:	4bb1      	ldr	r3, [pc, #708]	; (8004a9c <__aeabi_ddiv+0x33c>)
 80047d8:	0f70      	lsrs	r0, r6, #29
 80047da:	00ff      	lsls	r7, r7, #3
 80047dc:	2200      	movs	r2, #0
 80047de:	2100      	movs	r1, #0
 80047e0:	4307      	orrs	r7, r0
 80047e2:	00f6      	lsls	r6, r6, #3
 80047e4:	4498      	add	r8, r3
 80047e6:	4693      	mov	fp, r2
 80047e8:	9104      	str	r1, [sp, #16]
 80047ea:	1c29      	adds	r1, r5, #0
 80047ec:	0fca      	lsrs	r2, r1, #31
 80047ee:	032d      	lsls	r5, r5, #12
 80047f0:	004b      	lsls	r3, r1, #1
 80047f2:	4691      	mov	r9, r2
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	1c20      	adds	r0, r4, #0
 80047f8:	0b2d      	lsrs	r5, r5, #12
 80047fa:	0d5b      	lsrs	r3, r3, #21
 80047fc:	4692      	mov	sl, r2
 80047fe:	d131      	bne.n	8004864 <__aeabi_ddiv+0x104>
 8004800:	1c29      	adds	r1, r5, #0
 8004802:	4321      	orrs	r1, r4
 8004804:	d100      	bne.n	8004808 <__aeabi_ddiv+0xa8>
 8004806:	e0e6      	b.n	80049d6 <__aeabi_ddiv+0x276>
 8004808:	2d00      	cmp	r5, #0
 800480a:	d100      	bne.n	800480e <__aeabi_ddiv+0xae>
 800480c:	e1fe      	b.n	8004c0c <__aeabi_ddiv+0x4ac>
 800480e:	1c28      	adds	r0, r5, #0
 8004810:	f001 fb5a 	bl	8005ec8 <__clzsi2>
 8004814:	2827      	cmp	r0, #39	; 0x27
 8004816:	dd00      	ble.n	800481a <__aeabi_ddiv+0xba>
 8004818:	e1f2      	b.n	8004c00 <__aeabi_ddiv+0x4a0>
 800481a:	2128      	movs	r1, #40	; 0x28
 800481c:	1c2a      	adds	r2, r5, #0
 800481e:	1c03      	adds	r3, r0, #0
 8004820:	1a0d      	subs	r5, r1, r0
 8004822:	1c21      	adds	r1, r4, #0
 8004824:	3b08      	subs	r3, #8
 8004826:	40e9      	lsrs	r1, r5
 8004828:	409a      	lsls	r2, r3
 800482a:	1c0d      	adds	r5, r1, #0
 800482c:	4315      	orrs	r5, r2
 800482e:	409c      	lsls	r4, r3
 8004830:	4a98      	ldr	r2, [pc, #608]	; (8004a94 <__aeabi_ddiv+0x334>)
 8004832:	9901      	ldr	r1, [sp, #4]
 8004834:	1a13      	subs	r3, r2, r0
 8004836:	4650      	mov	r0, sl
 8004838:	4048      	eors	r0, r1
 800483a:	2200      	movs	r2, #0
 800483c:	4659      	mov	r1, fp
 800483e:	9003      	str	r0, [sp, #12]
 8004840:	4311      	orrs	r1, r2
 8004842:	290f      	cmp	r1, #15
 8004844:	d824      	bhi.n	8004890 <__aeabi_ddiv+0x130>
 8004846:	4896      	ldr	r0, [pc, #600]	; (8004aa0 <__aeabi_ddiv+0x340>)
 8004848:	0089      	lsls	r1, r1, #2
 800484a:	5840      	ldr	r0, [r0, r1]
 800484c:	4687      	mov	pc, r0
 800484e:	1c38      	adds	r0, r7, #0
 8004850:	4330      	orrs	r0, r6
 8004852:	d000      	beq.n	8004856 <__aeabi_ddiv+0xf6>
 8004854:	e0b3      	b.n	80049be <__aeabi_ddiv+0x25e>
 8004856:	2608      	movs	r6, #8
 8004858:	2302      	movs	r3, #2
 800485a:	46b3      	mov	fp, r6
 800485c:	2700      	movs	r7, #0
 800485e:	2600      	movs	r6, #0
 8004860:	9304      	str	r3, [sp, #16]
 8004862:	e7c2      	b.n	80047ea <__aeabi_ddiv+0x8a>
 8004864:	488c      	ldr	r0, [pc, #560]	; (8004a98 <__aeabi_ddiv+0x338>)
 8004866:	4283      	cmp	r3, r0
 8004868:	d100      	bne.n	800486c <__aeabi_ddiv+0x10c>
 800486a:	e09f      	b.n	80049ac <__aeabi_ddiv+0x24c>
 800486c:	2280      	movs	r2, #128	; 0x80
 800486e:	0350      	lsls	r0, r2, #13
 8004870:	4305      	orrs	r5, r0
 8004872:	4a8a      	ldr	r2, [pc, #552]	; (8004a9c <__aeabi_ddiv+0x33c>)
 8004874:	0f61      	lsrs	r1, r4, #29
 8004876:	00ed      	lsls	r5, r5, #3
 8004878:	189b      	adds	r3, r3, r2
 800487a:	430d      	orrs	r5, r1
 800487c:	00e4      	lsls	r4, r4, #3
 800487e:	2200      	movs	r2, #0
 8004880:	9901      	ldr	r1, [sp, #4]
 8004882:	4650      	mov	r0, sl
 8004884:	4048      	eors	r0, r1
 8004886:	4659      	mov	r1, fp
 8004888:	9003      	str	r0, [sp, #12]
 800488a:	4311      	orrs	r1, r2
 800488c:	290f      	cmp	r1, #15
 800488e:	d9da      	bls.n	8004846 <__aeabi_ddiv+0xe6>
 8004890:	4642      	mov	r2, r8
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	9305      	str	r3, [sp, #20]
 8004896:	42af      	cmp	r7, r5
 8004898:	d800      	bhi.n	800489c <__aeabi_ddiv+0x13c>
 800489a:	e0ed      	b.n	8004a78 <__aeabi_ddiv+0x318>
 800489c:	0878      	lsrs	r0, r7, #1
 800489e:	0871      	lsrs	r1, r6, #1
 80048a0:	07ff      	lsls	r7, r7, #31
 80048a2:	4339      	orrs	r1, r7
 80048a4:	07f6      	lsls	r6, r6, #31
 80048a6:	4681      	mov	r9, r0
 80048a8:	468b      	mov	fp, r1
 80048aa:	9602      	str	r6, [sp, #8]
 80048ac:	0e27      	lsrs	r7, r4, #24
 80048ae:	022d      	lsls	r5, r5, #8
 80048b0:	433d      	orrs	r5, r7
 80048b2:	0226      	lsls	r6, r4, #8
 80048b4:	0429      	lsls	r1, r5, #16
 80048b6:	46b0      	mov	r8, r6
 80048b8:	0c2e      	lsrs	r6, r5, #16
 80048ba:	0c0c      	lsrs	r4, r1, #16
 80048bc:	4648      	mov	r0, r9
 80048be:	1c31      	adds	r1, r6, #0
 80048c0:	9401      	str	r4, [sp, #4]
 80048c2:	f7fe fc41 	bl	8003148 <__aeabi_uidiv>
 80048c6:	9c01      	ldr	r4, [sp, #4]
 80048c8:	1c07      	adds	r7, r0, #0
 80048ca:	4344      	muls	r4, r0
 80048cc:	1c31      	adds	r1, r6, #0
 80048ce:	4648      	mov	r0, r9
 80048d0:	f7fe fc7e 	bl	80031d0 <__aeabi_uidivmod>
 80048d4:	465b      	mov	r3, fp
 80048d6:	0409      	lsls	r1, r1, #16
 80048d8:	0c18      	lsrs	r0, r3, #16
 80048da:	4301      	orrs	r1, r0
 80048dc:	428c      	cmp	r4, r1
 80048de:	d907      	bls.n	80048f0 <__aeabi_ddiv+0x190>
 80048e0:	1949      	adds	r1, r1, r5
 80048e2:	3f01      	subs	r7, #1
 80048e4:	428d      	cmp	r5, r1
 80048e6:	d803      	bhi.n	80048f0 <__aeabi_ddiv+0x190>
 80048e8:	428c      	cmp	r4, r1
 80048ea:	d901      	bls.n	80048f0 <__aeabi_ddiv+0x190>
 80048ec:	3f01      	subs	r7, #1
 80048ee:	1949      	adds	r1, r1, r5
 80048f0:	1b0c      	subs	r4, r1, r4
 80048f2:	1c20      	adds	r0, r4, #0
 80048f4:	1c31      	adds	r1, r6, #0
 80048f6:	f7fe fc27 	bl	8003148 <__aeabi_uidiv>
 80048fa:	9b01      	ldr	r3, [sp, #4]
 80048fc:	4681      	mov	r9, r0
 80048fe:	4343      	muls	r3, r0
 8004900:	1c31      	adds	r1, r6, #0
 8004902:	1c20      	adds	r0, r4, #0
 8004904:	469a      	mov	sl, r3
 8004906:	f7fe fc63 	bl	80031d0 <__aeabi_uidivmod>
 800490a:	465c      	mov	r4, fp
 800490c:	0420      	lsls	r0, r4, #16
 800490e:	040b      	lsls	r3, r1, #16
 8004910:	0c02      	lsrs	r2, r0, #16
 8004912:	4313      	orrs	r3, r2
 8004914:	459a      	cmp	sl, r3
 8004916:	d906      	bls.n	8004926 <__aeabi_ddiv+0x1c6>
 8004918:	2101      	movs	r1, #1
 800491a:	4248      	negs	r0, r1
 800491c:	195b      	adds	r3, r3, r5
 800491e:	4481      	add	r9, r0
 8004920:	429d      	cmp	r5, r3
 8004922:	d800      	bhi.n	8004926 <__aeabi_ddiv+0x1c6>
 8004924:	e1a0      	b.n	8004c68 <__aeabi_ddiv+0x508>
 8004926:	4651      	mov	r1, sl
 8004928:	464c      	mov	r4, r9
 800492a:	043f      	lsls	r7, r7, #16
 800492c:	4327      	orrs	r7, r4
 800492e:	4640      	mov	r0, r8
 8004930:	1a5b      	subs	r3, r3, r1
 8004932:	4641      	mov	r1, r8
 8004934:	b2bc      	uxth	r4, r7
 8004936:	b282      	uxth	r2, r0
 8004938:	0c08      	lsrs	r0, r1, #16
 800493a:	4682      	mov	sl, r0
 800493c:	4360      	muls	r0, r4
 800493e:	4691      	mov	r9, r2
 8004940:	4684      	mov	ip, r0
 8004942:	4362      	muls	r2, r4
 8004944:	0c38      	lsrs	r0, r7, #16
 8004946:	4649      	mov	r1, r9
 8004948:	4341      	muls	r1, r0
 800494a:	4654      	mov	r4, sl
 800494c:	4360      	muls	r0, r4
 800494e:	0c14      	lsrs	r4, r2, #16
 8004950:	190c      	adds	r4, r1, r4
 8004952:	4464      	add	r4, ip
 8004954:	42a1      	cmp	r1, r4
 8004956:	d902      	bls.n	800495e <__aeabi_ddiv+0x1fe>
 8004958:	2180      	movs	r1, #128	; 0x80
 800495a:	0249      	lsls	r1, r1, #9
 800495c:	1840      	adds	r0, r0, r1
 800495e:	0c21      	lsrs	r1, r4, #16
 8004960:	1840      	adds	r0, r0, r1
 8004962:	0411      	lsls	r1, r2, #16
 8004964:	0424      	lsls	r4, r4, #16
 8004966:	0c0a      	lsrs	r2, r1, #16
 8004968:	18a2      	adds	r2, r4, r2
 800496a:	4283      	cmp	r3, r0
 800496c:	d200      	bcs.n	8004970 <__aeabi_ddiv+0x210>
 800496e:	e0a7      	b.n	8004ac0 <__aeabi_ddiv+0x360>
 8004970:	d100      	bne.n	8004974 <__aeabi_ddiv+0x214>
 8004972:	e0a1      	b.n	8004ab8 <__aeabi_ddiv+0x358>
 8004974:	9902      	ldr	r1, [sp, #8]
 8004976:	e0bb      	b.n	8004af0 <__aeabi_ddiv+0x390>
 8004978:	9b03      	ldr	r3, [sp, #12]
 800497a:	4a47      	ldr	r2, [pc, #284]	; (8004a98 <__aeabi_ddiv+0x338>)
 800497c:	2700      	movs	r7, #0
 800497e:	2400      	movs	r4, #0
 8004980:	2000      	movs	r0, #0
 8004982:	2100      	movs	r1, #0
 8004984:	0d0d      	lsrs	r5, r1, #20
 8004986:	052d      	lsls	r5, r5, #20
 8004988:	433d      	orrs	r5, r7
 800498a:	4f46      	ldr	r7, [pc, #280]	; (8004aa4 <__aeabi_ddiv+0x344>)
 800498c:	0512      	lsls	r2, r2, #20
 800498e:	402f      	ands	r7, r5
 8004990:	4317      	orrs	r7, r2
 8004992:	007f      	lsls	r7, r7, #1
 8004994:	087f      	lsrs	r7, r7, #1
 8004996:	07db      	lsls	r3, r3, #31
 8004998:	1c39      	adds	r1, r7, #0
 800499a:	1c20      	adds	r0, r4, #0
 800499c:	4319      	orrs	r1, r3
 800499e:	b007      	add	sp, #28
 80049a0:	bc3c      	pop	{r2, r3, r4, r5}
 80049a2:	4690      	mov	r8, r2
 80049a4:	4699      	mov	r9, r3
 80049a6:	46a2      	mov	sl, r4
 80049a8:	46ab      	mov	fp, r5
 80049aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ac:	1c28      	adds	r0, r5, #0
 80049ae:	2203      	movs	r2, #3
 80049b0:	4320      	orrs	r0, r4
 80049b2:	d000      	beq.n	80049b6 <__aeabi_ddiv+0x256>
 80049b4:	e764      	b.n	8004880 <__aeabi_ddiv+0x120>
 80049b6:	2500      	movs	r5, #0
 80049b8:	2400      	movs	r4, #0
 80049ba:	2202      	movs	r2, #2
 80049bc:	e760      	b.n	8004880 <__aeabi_ddiv+0x120>
 80049be:	200c      	movs	r0, #12
 80049c0:	2103      	movs	r1, #3
 80049c2:	4683      	mov	fp, r0
 80049c4:	9104      	str	r1, [sp, #16]
 80049c6:	e710      	b.n	80047ea <__aeabi_ddiv+0x8a>
 80049c8:	2704      	movs	r7, #4
 80049ca:	2201      	movs	r2, #1
 80049cc:	46bb      	mov	fp, r7
 80049ce:	2600      	movs	r6, #0
 80049d0:	2700      	movs	r7, #0
 80049d2:	9204      	str	r2, [sp, #16]
 80049d4:	e709      	b.n	80047ea <__aeabi_ddiv+0x8a>
 80049d6:	2500      	movs	r5, #0
 80049d8:	2400      	movs	r4, #0
 80049da:	2201      	movs	r2, #1
 80049dc:	e750      	b.n	8004880 <__aeabi_ddiv+0x120>
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2700      	movs	r7, #0
 80049e4:	2400      	movs	r4, #0
 80049e6:	e7cb      	b.n	8004980 <__aeabi_ddiv+0x220>
 80049e8:	2401      	movs	r4, #1
 80049ea:	2300      	movs	r3, #0
 80049ec:	4f2e      	ldr	r7, [pc, #184]	; (8004aa8 <__aeabi_ddiv+0x348>)
 80049ee:	4264      	negs	r4, r4
 80049f0:	4a29      	ldr	r2, [pc, #164]	; (8004a98 <__aeabi_ddiv+0x338>)
 80049f2:	e7c5      	b.n	8004980 <__aeabi_ddiv+0x220>
 80049f4:	1c2f      	adds	r7, r5, #0
 80049f6:	4655      	mov	r5, sl
 80049f8:	9503      	str	r5, [sp, #12]
 80049fa:	2a02      	cmp	r2, #2
 80049fc:	d0bc      	beq.n	8004978 <__aeabi_ddiv+0x218>
 80049fe:	2a03      	cmp	r2, #3
 8004a00:	d100      	bne.n	8004a04 <__aeabi_ddiv+0x2a4>
 8004a02:	e187      	b.n	8004d14 <__aeabi_ddiv+0x5b4>
 8004a04:	2a01      	cmp	r2, #1
 8004a06:	d0ea      	beq.n	80049de <__aeabi_ddiv+0x27e>
 8004a08:	9805      	ldr	r0, [sp, #20]
 8004a0a:	4a28      	ldr	r2, [pc, #160]	; (8004aac <__aeabi_ddiv+0x34c>)
 8004a0c:	1882      	adds	r2, r0, r2
 8004a0e:	2a00      	cmp	r2, #0
 8004a10:	dc00      	bgt.n	8004a14 <__aeabi_ddiv+0x2b4>
 8004a12:	e13b      	b.n	8004c8c <__aeabi_ddiv+0x52c>
 8004a14:	230f      	movs	r3, #15
 8004a16:	4023      	ands	r3, r4
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d005      	beq.n	8004a28 <__aeabi_ddiv+0x2c8>
 8004a1c:	1d21      	adds	r1, r4, #4
 8004a1e:	42a1      	cmp	r1, r4
 8004a20:	41ad      	sbcs	r5, r5
 8004a22:	426c      	negs	r4, r5
 8004a24:	193f      	adds	r7, r7, r4
 8004a26:	1c0c      	adds	r4, r1, #0
 8004a28:	01f8      	lsls	r0, r7, #7
 8004a2a:	d505      	bpl.n	8004a38 <__aeabi_ddiv+0x2d8>
 8004a2c:	2280      	movs	r2, #128	; 0x80
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <__aeabi_ddiv+0x350>)
 8004a30:	9805      	ldr	r0, [sp, #20]
 8004a32:	00d6      	lsls	r6, r2, #3
 8004a34:	401f      	ands	r7, r3
 8004a36:	1982      	adds	r2, r0, r6
 8004a38:	491e      	ldr	r1, [pc, #120]	; (8004ab4 <__aeabi_ddiv+0x354>)
 8004a3a:	428a      	cmp	r2, r1
 8004a3c:	dc9c      	bgt.n	8004978 <__aeabi_ddiv+0x218>
 8004a3e:	0778      	lsls	r0, r7, #29
 8004a40:	08e4      	lsrs	r4, r4, #3
 8004a42:	027f      	lsls	r7, r7, #9
 8004a44:	0555      	lsls	r5, r2, #21
 8004a46:	4304      	orrs	r4, r0
 8004a48:	0b3f      	lsrs	r7, r7, #12
 8004a4a:	0d6a      	lsrs	r2, r5, #21
 8004a4c:	9b03      	ldr	r3, [sp, #12]
 8004a4e:	e797      	b.n	8004980 <__aeabi_ddiv+0x220>
 8004a50:	2280      	movs	r2, #128	; 0x80
 8004a52:	0313      	lsls	r3, r2, #12
 8004a54:	421f      	tst	r7, r3
 8004a56:	d000      	beq.n	8004a5a <__aeabi_ddiv+0x2fa>
 8004a58:	e0e6      	b.n	8004c28 <__aeabi_ddiv+0x4c8>
 8004a5a:	4669      	mov	r1, sp
 8004a5c:	431f      	orrs	r7, r3
 8004a5e:	7a0c      	ldrb	r4, [r1, #8]
 8004a60:	033f      	lsls	r7, r7, #12
 8004a62:	2301      	movs	r3, #1
 8004a64:	4023      	ands	r3, r4
 8004a66:	0b3f      	lsrs	r7, r7, #12
 8004a68:	1c34      	adds	r4, r6, #0
 8004a6a:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <__aeabi_ddiv+0x338>)
 8004a6c:	e788      	b.n	8004980 <__aeabi_ddiv+0x220>
 8004a6e:	1c34      	adds	r4, r6, #0
 8004a70:	9e01      	ldr	r6, [sp, #4]
 8004a72:	9a04      	ldr	r2, [sp, #16]
 8004a74:	9603      	str	r6, [sp, #12]
 8004a76:	e7c0      	b.n	80049fa <__aeabi_ddiv+0x29a>
 8004a78:	42b4      	cmp	r4, r6
 8004a7a:	d202      	bcs.n	8004a82 <__aeabi_ddiv+0x322>
 8004a7c:	42af      	cmp	r7, r5
 8004a7e:	d100      	bne.n	8004a82 <__aeabi_ddiv+0x322>
 8004a80:	e70c      	b.n	800489c <__aeabi_ddiv+0x13c>
 8004a82:	9a05      	ldr	r2, [sp, #20]
 8004a84:	2300      	movs	r3, #0
 8004a86:	3a01      	subs	r2, #1
 8004a88:	9205      	str	r2, [sp, #20]
 8004a8a:	46b3      	mov	fp, r6
 8004a8c:	46b9      	mov	r9, r7
 8004a8e:	9302      	str	r3, [sp, #8]
 8004a90:	e70c      	b.n	80048ac <__aeabi_ddiv+0x14c>
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	fffffc0d 	.word	0xfffffc0d
 8004a98:	000007ff 	.word	0x000007ff
 8004a9c:	fffffc01 	.word	0xfffffc01
 8004aa0:	08009f80 	.word	0x08009f80
 8004aa4:	800fffff 	.word	0x800fffff
 8004aa8:	000fffff 	.word	0x000fffff
 8004aac:	000003ff 	.word	0x000003ff
 8004ab0:	feffffff 	.word	0xfeffffff
 8004ab4:	000007fe 	.word	0x000007fe
 8004ab8:	9c02      	ldr	r4, [sp, #8]
 8004aba:	4294      	cmp	r4, r2
 8004abc:	d300      	bcc.n	8004ac0 <__aeabi_ddiv+0x360>
 8004abe:	e759      	b.n	8004974 <__aeabi_ddiv+0x214>
 8004ac0:	9902      	ldr	r1, [sp, #8]
 8004ac2:	3f01      	subs	r7, #1
 8004ac4:	4441      	add	r1, r8
 8004ac6:	4541      	cmp	r1, r8
 8004ac8:	41a4      	sbcs	r4, r4
 8004aca:	4264      	negs	r4, r4
 8004acc:	1964      	adds	r4, r4, r5
 8004ace:	18e3      	adds	r3, r4, r3
 8004ad0:	429d      	cmp	r5, r3
 8004ad2:	d303      	bcc.n	8004adc <__aeabi_ddiv+0x37c>
 8004ad4:	42ab      	cmp	r3, r5
 8004ad6:	d10b      	bne.n	8004af0 <__aeabi_ddiv+0x390>
 8004ad8:	4541      	cmp	r1, r8
 8004ada:	d309      	bcc.n	8004af0 <__aeabi_ddiv+0x390>
 8004adc:	4298      	cmp	r0, r3
 8004ade:	d800      	bhi.n	8004ae2 <__aeabi_ddiv+0x382>
 8004ae0:	e0ac      	b.n	8004c3c <__aeabi_ddiv+0x4dc>
 8004ae2:	4441      	add	r1, r8
 8004ae4:	4541      	cmp	r1, r8
 8004ae6:	41a4      	sbcs	r4, r4
 8004ae8:	4264      	negs	r4, r4
 8004aea:	1964      	adds	r4, r4, r5
 8004aec:	3f01      	subs	r7, #1
 8004aee:	191b      	adds	r3, r3, r4
 8004af0:	1a8c      	subs	r4, r1, r2
 8004af2:	42a1      	cmp	r1, r4
 8004af4:	4192      	sbcs	r2, r2
 8004af6:	1a1b      	subs	r3, r3, r0
 8004af8:	4250      	negs	r0, r2
 8004afa:	46a3      	mov	fp, r4
 8004afc:	1a1c      	subs	r4, r3, r0
 8004afe:	42ac      	cmp	r4, r5
 8004b00:	d100      	bne.n	8004b04 <__aeabi_ddiv+0x3a4>
 8004b02:	e0e9      	b.n	8004cd8 <__aeabi_ddiv+0x578>
 8004b04:	1c31      	adds	r1, r6, #0
 8004b06:	1c20      	adds	r0, r4, #0
 8004b08:	f7fe fb1e 	bl	8003148 <__aeabi_uidiv>
 8004b0c:	9a01      	ldr	r2, [sp, #4]
 8004b0e:	9002      	str	r0, [sp, #8]
 8004b10:	4342      	muls	r2, r0
 8004b12:	1c31      	adds	r1, r6, #0
 8004b14:	1c20      	adds	r0, r4, #0
 8004b16:	9204      	str	r2, [sp, #16]
 8004b18:	f7fe fb5a 	bl	80031d0 <__aeabi_uidivmod>
 8004b1c:	465b      	mov	r3, fp
 8004b1e:	0408      	lsls	r0, r1, #16
 8004b20:	9904      	ldr	r1, [sp, #16]
 8004b22:	0c1b      	lsrs	r3, r3, #16
 8004b24:	4303      	orrs	r3, r0
 8004b26:	4299      	cmp	r1, r3
 8004b28:	d90c      	bls.n	8004b44 <__aeabi_ddiv+0x3e4>
 8004b2a:	9c02      	ldr	r4, [sp, #8]
 8004b2c:	195b      	adds	r3, r3, r5
 8004b2e:	3c01      	subs	r4, #1
 8004b30:	9402      	str	r4, [sp, #8]
 8004b32:	429d      	cmp	r5, r3
 8004b34:	d806      	bhi.n	8004b44 <__aeabi_ddiv+0x3e4>
 8004b36:	9904      	ldr	r1, [sp, #16]
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	d903      	bls.n	8004b44 <__aeabi_ddiv+0x3e4>
 8004b3c:	9802      	ldr	r0, [sp, #8]
 8004b3e:	195b      	adds	r3, r3, r5
 8004b40:	3801      	subs	r0, #1
 8004b42:	9002      	str	r0, [sp, #8]
 8004b44:	9804      	ldr	r0, [sp, #16]
 8004b46:	1c31      	adds	r1, r6, #0
 8004b48:	1a1c      	subs	r4, r3, r0
 8004b4a:	1c20      	adds	r0, r4, #0
 8004b4c:	9404      	str	r4, [sp, #16]
 8004b4e:	f7fe fafb 	bl	8003148 <__aeabi_uidiv>
 8004b52:	9b01      	ldr	r3, [sp, #4]
 8004b54:	1c31      	adds	r1, r6, #0
 8004b56:	4343      	muls	r3, r0
 8004b58:	1c04      	adds	r4, r0, #0
 8004b5a:	9804      	ldr	r0, [sp, #16]
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	f7fe fb37 	bl	80031d0 <__aeabi_uidivmod>
 8004b62:	040b      	lsls	r3, r1, #16
 8004b64:	4659      	mov	r1, fp
 8004b66:	040a      	lsls	r2, r1, #16
 8004b68:	0c16      	lsrs	r6, r2, #16
 8004b6a:	4333      	orrs	r3, r6
 8004b6c:	9e01      	ldr	r6, [sp, #4]
 8004b6e:	429e      	cmp	r6, r3
 8004b70:	d907      	bls.n	8004b82 <__aeabi_ddiv+0x422>
 8004b72:	195b      	adds	r3, r3, r5
 8004b74:	3c01      	subs	r4, #1
 8004b76:	429d      	cmp	r5, r3
 8004b78:	d803      	bhi.n	8004b82 <__aeabi_ddiv+0x422>
 8004b7a:	429e      	cmp	r6, r3
 8004b7c:	d901      	bls.n	8004b82 <__aeabi_ddiv+0x422>
 8004b7e:	3c01      	subs	r4, #1
 8004b80:	195b      	adds	r3, r3, r5
 8004b82:	9902      	ldr	r1, [sp, #8]
 8004b84:	9a01      	ldr	r2, [sp, #4]
 8004b86:	0408      	lsls	r0, r1, #16
 8004b88:	4304      	orrs	r4, r0
 8004b8a:	b2a6      	uxth	r6, r4
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	4652      	mov	r2, sl
 8004b90:	4372      	muls	r2, r6
 8004b92:	4648      	mov	r0, r9
 8004b94:	4370      	muls	r0, r6
 8004b96:	4693      	mov	fp, r2
 8004b98:	464e      	mov	r6, r9
 8004b9a:	0c22      	lsrs	r2, r4, #16
 8004b9c:	4356      	muls	r6, r2
 8004b9e:	4651      	mov	r1, sl
 8004ba0:	434a      	muls	r2, r1
 8004ba2:	0c01      	lsrs	r1, r0, #16
 8004ba4:	4689      	mov	r9, r1
 8004ba6:	44b1      	add	r9, r6
 8004ba8:	4659      	mov	r1, fp
 8004baa:	4449      	add	r1, r9
 8004bac:	428e      	cmp	r6, r1
 8004bae:	d902      	bls.n	8004bb6 <__aeabi_ddiv+0x456>
 8004bb0:	2680      	movs	r6, #128	; 0x80
 8004bb2:	0276      	lsls	r6, r6, #9
 8004bb4:	1992      	adds	r2, r2, r6
 8004bb6:	0c0e      	lsrs	r6, r1, #16
 8004bb8:	1992      	adds	r2, r2, r6
 8004bba:	0406      	lsls	r6, r0, #16
 8004bbc:	0409      	lsls	r1, r1, #16
 8004bbe:	0c30      	lsrs	r0, r6, #16
 8004bc0:	1809      	adds	r1, r1, r0
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d30e      	bcc.n	8004be4 <__aeabi_ddiv+0x484>
 8004bc6:	1c08      	adds	r0, r1, #0
 8004bc8:	1e46      	subs	r6, r0, #1
 8004bca:	41b0      	sbcs	r0, r6
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d101      	bne.n	8004bd4 <__aeabi_ddiv+0x474>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d107      	bne.n	8004be4 <__aeabi_ddiv+0x484>
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d102      	bne.n	8004bde <__aeabi_ddiv+0x47e>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d100      	bne.n	8004bde <__aeabi_ddiv+0x47e>
 8004bdc:	e714      	b.n	8004a08 <__aeabi_ddiv+0x2a8>
 8004bde:	2301      	movs	r3, #1
 8004be0:	431c      	orrs	r4, r3
 8004be2:	e711      	b.n	8004a08 <__aeabi_ddiv+0x2a8>
 8004be4:	195b      	adds	r3, r3, r5
 8004be6:	3c01      	subs	r4, #1
 8004be8:	429d      	cmp	r5, r3
 8004bea:	d82e      	bhi.n	8004c4a <__aeabi_ddiv+0x4ea>
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d841      	bhi.n	8004c74 <__aeabi_ddiv+0x514>
 8004bf0:	d101      	bne.n	8004bf6 <__aeabi_ddiv+0x496>
 8004bf2:	4588      	cmp	r8, r1
 8004bf4:	d33e      	bcc.n	8004c74 <__aeabi_ddiv+0x514>
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	1a40      	subs	r0, r0, r1
 8004bfa:	1e41      	subs	r1, r0, #1
 8004bfc:	4188      	sbcs	r0, r1
 8004bfe:	e7e9      	b.n	8004bd4 <__aeabi_ddiv+0x474>
 8004c00:	1c03      	adds	r3, r0, #0
 8004c02:	3b28      	subs	r3, #40	; 0x28
 8004c04:	409c      	lsls	r4, r3
 8004c06:	1c25      	adds	r5, r4, #0
 8004c08:	2400      	movs	r4, #0
 8004c0a:	e611      	b.n	8004830 <__aeabi_ddiv+0xd0>
 8004c0c:	f001 f95c 	bl	8005ec8 <__clzsi2>
 8004c10:	3020      	adds	r0, #32
 8004c12:	e5ff      	b.n	8004814 <__aeabi_ddiv+0xb4>
 8004c14:	1c07      	adds	r7, r0, #0
 8004c16:	3f28      	subs	r7, #40	; 0x28
 8004c18:	40be      	lsls	r6, r7
 8004c1a:	1c37      	adds	r7, r6, #0
 8004c1c:	2600      	movs	r6, #0
 8004c1e:	e5cc      	b.n	80047ba <__aeabi_ddiv+0x5a>
 8004c20:	f001 f952 	bl	8005ec8 <__clzsi2>
 8004c24:	3020      	adds	r0, #32
 8004c26:	e5bc      	b.n	80047a2 <__aeabi_ddiv+0x42>
 8004c28:	421d      	tst	r5, r3
 8004c2a:	d113      	bne.n	8004c54 <__aeabi_ddiv+0x4f4>
 8004c2c:	431d      	orrs	r5, r3
 8004c2e:	032e      	lsls	r6, r5, #12
 8004c30:	2301      	movs	r3, #1
 8004c32:	464d      	mov	r5, r9
 8004c34:	0b37      	lsrs	r7, r6, #12
 8004c36:	402b      	ands	r3, r5
 8004c38:	4a3a      	ldr	r2, [pc, #232]	; (8004d24 <__aeabi_ddiv+0x5c4>)
 8004c3a:	e6a1      	b.n	8004980 <__aeabi_ddiv+0x220>
 8004c3c:	4298      	cmp	r0, r3
 8004c3e:	d000      	beq.n	8004c42 <__aeabi_ddiv+0x4e2>
 8004c40:	e756      	b.n	8004af0 <__aeabi_ddiv+0x390>
 8004c42:	4291      	cmp	r1, r2
 8004c44:	d300      	bcc.n	8004c48 <__aeabi_ddiv+0x4e8>
 8004c46:	e753      	b.n	8004af0 <__aeabi_ddiv+0x390>
 8004c48:	e74b      	b.n	8004ae2 <__aeabi_ddiv+0x382>
 8004c4a:	4645      	mov	r5, r8
 8004c4c:	1a68      	subs	r0, r5, r1
 8004c4e:	1e41      	subs	r1, r0, #1
 8004c50:	4188      	sbcs	r0, r1
 8004c52:	e7bf      	b.n	8004bd4 <__aeabi_ddiv+0x474>
 8004c54:	431f      	orrs	r7, r3
 8004c56:	466a      	mov	r2, sp
 8004c58:	033b      	lsls	r3, r7, #12
 8004c5a:	7a10      	ldrb	r0, [r2, #8]
 8004c5c:	0b1f      	lsrs	r7, r3, #12
 8004c5e:	2301      	movs	r3, #1
 8004c60:	4003      	ands	r3, r0
 8004c62:	1c34      	adds	r4, r6, #0
 8004c64:	4a2f      	ldr	r2, [pc, #188]	; (8004d24 <__aeabi_ddiv+0x5c4>)
 8004c66:	e68b      	b.n	8004980 <__aeabi_ddiv+0x220>
 8004c68:	459a      	cmp	sl, r3
 8004c6a:	d800      	bhi.n	8004c6e <__aeabi_ddiv+0x50e>
 8004c6c:	e65b      	b.n	8004926 <__aeabi_ddiv+0x1c6>
 8004c6e:	4481      	add	r9, r0
 8004c70:	195b      	adds	r3, r3, r5
 8004c72:	e658      	b.n	8004926 <__aeabi_ddiv+0x1c6>
 8004c74:	4640      	mov	r0, r8
 8004c76:	0040      	lsls	r0, r0, #1
 8004c78:	4540      	cmp	r0, r8
 8004c7a:	41b6      	sbcs	r6, r6
 8004c7c:	4276      	negs	r6, r6
 8004c7e:	1976      	adds	r6, r6, r5
 8004c80:	1a08      	subs	r0, r1, r0
 8004c82:	3c01      	subs	r4, #1
 8004c84:	199b      	adds	r3, r3, r6
 8004c86:	1e41      	subs	r1, r0, #1
 8004c88:	4188      	sbcs	r0, r1
 8004c8a:	e7a3      	b.n	8004bd4 <__aeabi_ddiv+0x474>
 8004c8c:	4e26      	ldr	r6, [pc, #152]	; (8004d28 <__aeabi_ddiv+0x5c8>)
 8004c8e:	9a05      	ldr	r2, [sp, #20]
 8004c90:	1ab3      	subs	r3, r6, r2
 8004c92:	2b38      	cmp	r3, #56	; 0x38
 8004c94:	dd00      	ble.n	8004c98 <__aeabi_ddiv+0x538>
 8004c96:	e6a2      	b.n	80049de <__aeabi_ddiv+0x27e>
 8004c98:	2b1f      	cmp	r3, #31
 8004c9a:	dc20      	bgt.n	8004cde <__aeabi_ddiv+0x57e>
 8004c9c:	4a23      	ldr	r2, [pc, #140]	; (8004d2c <__aeabi_ddiv+0x5cc>)
 8004c9e:	9e05      	ldr	r6, [sp, #20]
 8004ca0:	1c20      	adds	r0, r4, #0
 8004ca2:	18b5      	adds	r5, r6, r2
 8004ca4:	1c39      	adds	r1, r7, #0
 8004ca6:	40d8      	lsrs	r0, r3
 8004ca8:	40a9      	lsls	r1, r5
 8004caa:	40ac      	lsls	r4, r5
 8004cac:	4301      	orrs	r1, r0
 8004cae:	1e62      	subs	r2, r4, #1
 8004cb0:	4194      	sbcs	r4, r2
 8004cb2:	430c      	orrs	r4, r1
 8004cb4:	40df      	lsrs	r7, r3
 8004cb6:	250f      	movs	r5, #15
 8004cb8:	4025      	ands	r5, r4
 8004cba:	2d04      	cmp	r5, #4
 8004cbc:	d005      	beq.n	8004cca <__aeabi_ddiv+0x56a>
 8004cbe:	1d21      	adds	r1, r4, #4
 8004cc0:	42a1      	cmp	r1, r4
 8004cc2:	4180      	sbcs	r0, r0
 8004cc4:	4244      	negs	r4, r0
 8004cc6:	193f      	adds	r7, r7, r4
 8004cc8:	1c0c      	adds	r4, r1, #0
 8004cca:	0239      	lsls	r1, r7, #8
 8004ccc:	d51a      	bpl.n	8004d04 <__aeabi_ddiv+0x5a4>
 8004cce:	9b03      	ldr	r3, [sp, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	2700      	movs	r7, #0
 8004cd4:	2400      	movs	r4, #0
 8004cd6:	e653      	b.n	8004980 <__aeabi_ddiv+0x220>
 8004cd8:	2101      	movs	r1, #1
 8004cda:	424c      	negs	r4, r1
 8004cdc:	e694      	b.n	8004a08 <__aeabi_ddiv+0x2a8>
 8004cde:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <__aeabi_ddiv+0x5d0>)
 8004ce0:	9d05      	ldr	r5, [sp, #20]
 8004ce2:	1c39      	adds	r1, r7, #0
 8004ce4:	1b50      	subs	r0, r2, r5
 8004ce6:	40c1      	lsrs	r1, r0
 8004ce8:	1c0a      	adds	r2, r1, #0
 8004cea:	2600      	movs	r6, #0
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d003      	beq.n	8004cf8 <__aeabi_ddiv+0x598>
 8004cf0:	4e10      	ldr	r6, [pc, #64]	; (8004d34 <__aeabi_ddiv+0x5d4>)
 8004cf2:	19ab      	adds	r3, r5, r6
 8004cf4:	409f      	lsls	r7, r3
 8004cf6:	1c3e      	adds	r6, r7, #0
 8004cf8:	4334      	orrs	r4, r6
 8004cfa:	1e66      	subs	r6, r4, #1
 8004cfc:	41b4      	sbcs	r4, r6
 8004cfe:	4314      	orrs	r4, r2
 8004d00:	2700      	movs	r7, #0
 8004d02:	e7d8      	b.n	8004cb6 <__aeabi_ddiv+0x556>
 8004d04:	077a      	lsls	r2, r7, #29
 8004d06:	08e4      	lsrs	r4, r4, #3
 8004d08:	027f      	lsls	r7, r7, #9
 8004d0a:	4314      	orrs	r4, r2
 8004d0c:	0b3f      	lsrs	r7, r7, #12
 8004d0e:	9b03      	ldr	r3, [sp, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	e635      	b.n	8004980 <__aeabi_ddiv+0x220>
 8004d14:	2580      	movs	r5, #128	; 0x80
 8004d16:	032e      	lsls	r6, r5, #12
 8004d18:	4337      	orrs	r7, r6
 8004d1a:	033b      	lsls	r3, r7, #12
 8004d1c:	0b1f      	lsrs	r7, r3, #12
 8004d1e:	4a01      	ldr	r2, [pc, #4]	; (8004d24 <__aeabi_ddiv+0x5c4>)
 8004d20:	9b03      	ldr	r3, [sp, #12]
 8004d22:	e62d      	b.n	8004980 <__aeabi_ddiv+0x220>
 8004d24:	000007ff 	.word	0x000007ff
 8004d28:	fffffc02 	.word	0xfffffc02
 8004d2c:	0000041e 	.word	0x0000041e
 8004d30:	fffffbe2 	.word	0xfffffbe2
 8004d34:	0000043e 	.word	0x0000043e

08004d38 <__eqdf2>:
 8004d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3a:	4647      	mov	r7, r8
 8004d3c:	b480      	push	{r7}
 8004d3e:	1c17      	adds	r7, r2, #0
 8004d40:	031a      	lsls	r2, r3, #12
 8004d42:	1c06      	adds	r6, r0, #0
 8004d44:	0b10      	lsrs	r0, r2, #12
 8004d46:	4684      	mov	ip, r0
 8004d48:	005a      	lsls	r2, r3, #1
 8004d4a:	0fd8      	lsrs	r0, r3, #31
 8004d4c:	4b18      	ldr	r3, [pc, #96]	; (8004db0 <__eqdf2+0x78>)
 8004d4e:	030d      	lsls	r5, r1, #12
 8004d50:	004c      	lsls	r4, r1, #1
 8004d52:	0b2d      	lsrs	r5, r5, #12
 8004d54:	0d64      	lsrs	r4, r4, #21
 8004d56:	0fc9      	lsrs	r1, r1, #31
 8004d58:	0d52      	lsrs	r2, r2, #21
 8004d5a:	4680      	mov	r8, r0
 8004d5c:	429c      	cmp	r4, r3
 8004d5e:	d008      	beq.n	8004d72 <__eqdf2+0x3a>
 8004d60:	4813      	ldr	r0, [pc, #76]	; (8004db0 <__eqdf2+0x78>)
 8004d62:	4282      	cmp	r2, r0
 8004d64:	d00c      	beq.n	8004d80 <__eqdf2+0x48>
 8004d66:	2001      	movs	r0, #1
 8004d68:	4294      	cmp	r4, r2
 8004d6a:	d010      	beq.n	8004d8e <__eqdf2+0x56>
 8004d6c:	bc04      	pop	{r2}
 8004d6e:	4690      	mov	r8, r2
 8004d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d72:	1c2b      	adds	r3, r5, #0
 8004d74:	2001      	movs	r0, #1
 8004d76:	4333      	orrs	r3, r6
 8004d78:	d1f8      	bne.n	8004d6c <__eqdf2+0x34>
 8004d7a:	480d      	ldr	r0, [pc, #52]	; (8004db0 <__eqdf2+0x78>)
 8004d7c:	4282      	cmp	r2, r0
 8004d7e:	d1f2      	bne.n	8004d66 <__eqdf2+0x2e>
 8004d80:	4663      	mov	r3, ip
 8004d82:	2001      	movs	r0, #1
 8004d84:	433b      	orrs	r3, r7
 8004d86:	d1f1      	bne.n	8004d6c <__eqdf2+0x34>
 8004d88:	2001      	movs	r0, #1
 8004d8a:	4294      	cmp	r4, r2
 8004d8c:	d1ee      	bne.n	8004d6c <__eqdf2+0x34>
 8004d8e:	4565      	cmp	r5, ip
 8004d90:	d10c      	bne.n	8004dac <__eqdf2+0x74>
 8004d92:	42be      	cmp	r6, r7
 8004d94:	d10a      	bne.n	8004dac <__eqdf2+0x74>
 8004d96:	2000      	movs	r0, #0
 8004d98:	4541      	cmp	r1, r8
 8004d9a:	d0e7      	beq.n	8004d6c <__eqdf2+0x34>
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	2c00      	cmp	r4, #0
 8004da0:	d1e4      	bne.n	8004d6c <__eqdf2+0x34>
 8004da2:	4335      	orrs	r5, r6
 8004da4:	1c28      	adds	r0, r5, #0
 8004da6:	1e45      	subs	r5, r0, #1
 8004da8:	41a8      	sbcs	r0, r5
 8004daa:	e7df      	b.n	8004d6c <__eqdf2+0x34>
 8004dac:	2001      	movs	r0, #1
 8004dae:	e7dd      	b.n	8004d6c <__eqdf2+0x34>
 8004db0:	000007ff 	.word	0x000007ff

08004db4 <__gedf2>:
 8004db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db6:	464f      	mov	r7, r9
 8004db8:	4646      	mov	r6, r8
 8004dba:	b4c0      	push	{r6, r7}
 8004dbc:	0fcf      	lsrs	r7, r1, #31
 8004dbe:	030d      	lsls	r5, r1, #12
 8004dc0:	004c      	lsls	r4, r1, #1
 8004dc2:	1c06      	adds	r6, r0, #0
 8004dc4:	0fd9      	lsrs	r1, r3, #31
 8004dc6:	0318      	lsls	r0, r3, #12
 8004dc8:	46b9      	mov	r9, r7
 8004dca:	1c17      	adds	r7, r2, #0
 8004dcc:	005a      	lsls	r2, r3, #1
 8004dce:	4b33      	ldr	r3, [pc, #204]	; (8004e9c <__gedf2+0xe8>)
 8004dd0:	0b2d      	lsrs	r5, r5, #12
 8004dd2:	0d64      	lsrs	r4, r4, #21
 8004dd4:	0b00      	lsrs	r0, r0, #12
 8004dd6:	0d52      	lsrs	r2, r2, #21
 8004dd8:	468c      	mov	ip, r1
 8004dda:	429c      	cmp	r4, r3
 8004ddc:	d026      	beq.n	8004e2c <__gedf2+0x78>
 8004dde:	492f      	ldr	r1, [pc, #188]	; (8004e9c <__gedf2+0xe8>)
 8004de0:	428a      	cmp	r2, r1
 8004de2:	d029      	beq.n	8004e38 <__gedf2+0x84>
 8004de4:	2300      	movs	r3, #0
 8004de6:	2c00      	cmp	r4, #0
 8004de8:	d104      	bne.n	8004df4 <__gedf2+0x40>
 8004dea:	1c2b      	adds	r3, r5, #0
 8004dec:	4333      	orrs	r3, r6
 8004dee:	1c19      	adds	r1, r3, #0
 8004df0:	424b      	negs	r3, r1
 8004df2:	414b      	adcs	r3, r1
 8004df4:	2a00      	cmp	r2, #0
 8004df6:	d109      	bne.n	8004e0c <__gedf2+0x58>
 8004df8:	1c01      	adds	r1, r0, #0
 8004dfa:	4339      	orrs	r1, r7
 8004dfc:	d106      	bne.n	8004e0c <__gedf2+0x58>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01d      	beq.n	8004e40 <__gedf2+0x8c>
 8004e04:	bc0c      	pop	{r2, r3}
 8004e06:	4690      	mov	r8, r2
 8004e08:	4699      	mov	r9, r3
 8004e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <__gedf2+0x6a>
 8004e10:	45e1      	cmp	r9, ip
 8004e12:	d01a      	beq.n	8004e4a <__gedf2+0x96>
 8004e14:	464c      	mov	r4, r9
 8004e16:	4260      	negs	r0, r4
 8004e18:	2701      	movs	r7, #1
 8004e1a:	4338      	orrs	r0, r7
 8004e1c:	e7f2      	b.n	8004e04 <__gedf2+0x50>
 8004e1e:	4662      	mov	r2, ip
 8004e20:	4250      	negs	r0, r2
 8004e22:	4150      	adcs	r0, r2
 8004e24:	4240      	negs	r0, r0
 8004e26:	2601      	movs	r6, #1
 8004e28:	4330      	orrs	r0, r6
 8004e2a:	e7eb      	b.n	8004e04 <__gedf2+0x50>
 8004e2c:	1c2b      	adds	r3, r5, #0
 8004e2e:	4333      	orrs	r3, r6
 8004e30:	d0d5      	beq.n	8004dde <__gedf2+0x2a>
 8004e32:	2102      	movs	r1, #2
 8004e34:	4248      	negs	r0, r1
 8004e36:	e7e5      	b.n	8004e04 <__gedf2+0x50>
 8004e38:	1c03      	adds	r3, r0, #0
 8004e3a:	433b      	orrs	r3, r7
 8004e3c:	d0d2      	beq.n	8004de4 <__gedf2+0x30>
 8004e3e:	e7f8      	b.n	8004e32 <__gedf2+0x7e>
 8004e40:	464f      	mov	r7, r9
 8004e42:	4278      	negs	r0, r7
 8004e44:	2201      	movs	r2, #1
 8004e46:	4310      	orrs	r0, r2
 8004e48:	e7dc      	b.n	8004e04 <__gedf2+0x50>
 8004e4a:	4294      	cmp	r4, r2
 8004e4c:	dd04      	ble.n	8004e58 <__gedf2+0xa4>
 8004e4e:	464b      	mov	r3, r9
 8004e50:	4258      	negs	r0, r3
 8004e52:	2501      	movs	r5, #1
 8004e54:	4328      	orrs	r0, r5
 8004e56:	e7d5      	b.n	8004e04 <__gedf2+0x50>
 8004e58:	4294      	cmp	r4, r2
 8004e5a:	da06      	bge.n	8004e6a <__gedf2+0xb6>
 8004e5c:	4648      	mov	r0, r9
 8004e5e:	4246      	negs	r6, r0
 8004e60:	4146      	adcs	r6, r0
 8004e62:	4270      	negs	r0, r6
 8004e64:	2101      	movs	r1, #1
 8004e66:	4308      	orrs	r0, r1
 8004e68:	e7cc      	b.n	8004e04 <__gedf2+0x50>
 8004e6a:	4285      	cmp	r5, r0
 8004e6c:	d8e8      	bhi.n	8004e40 <__gedf2+0x8c>
 8004e6e:	1a2b      	subs	r3, r5, r0
 8004e70:	425a      	negs	r2, r3
 8004e72:	4153      	adcs	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <__gedf2+0xc8>
 8004e78:	42b7      	cmp	r7, r6
 8004e7a:	d3e1      	bcc.n	8004e40 <__gedf2+0x8c>
 8004e7c:	4285      	cmp	r5, r0
 8004e7e:	d303      	bcc.n	8004e88 <__gedf2+0xd4>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d008      	beq.n	8004e96 <__gedf2+0xe2>
 8004e84:	42be      	cmp	r6, r7
 8004e86:	d206      	bcs.n	8004e96 <__gedf2+0xe2>
 8004e88:	464b      	mov	r3, r9
 8004e8a:	425d      	negs	r5, r3
 8004e8c:	415d      	adcs	r5, r3
 8004e8e:	4268      	negs	r0, r5
 8004e90:	2401      	movs	r4, #1
 8004e92:	4320      	orrs	r0, r4
 8004e94:	e7b6      	b.n	8004e04 <__gedf2+0x50>
 8004e96:	2000      	movs	r0, #0
 8004e98:	e7b4      	b.n	8004e04 <__gedf2+0x50>
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	000007ff 	.word	0x000007ff

08004ea0 <__ledf2>:
 8004ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea2:	4647      	mov	r7, r8
 8004ea4:	b480      	push	{r7}
 8004ea6:	1c17      	adds	r7, r2, #0
 8004ea8:	031a      	lsls	r2, r3, #12
 8004eaa:	1c06      	adds	r6, r0, #0
 8004eac:	0b10      	lsrs	r0, r2, #12
 8004eae:	4684      	mov	ip, r0
 8004eb0:	005a      	lsls	r2, r3, #1
 8004eb2:	0fd8      	lsrs	r0, r3, #31
 8004eb4:	4b28      	ldr	r3, [pc, #160]	; (8004f58 <__ledf2+0xb8>)
 8004eb6:	030d      	lsls	r5, r1, #12
 8004eb8:	004c      	lsls	r4, r1, #1
 8004eba:	0b2d      	lsrs	r5, r5, #12
 8004ebc:	0d64      	lsrs	r4, r4, #21
 8004ebe:	0fc9      	lsrs	r1, r1, #31
 8004ec0:	0d52      	lsrs	r2, r2, #21
 8004ec2:	4680      	mov	r8, r0
 8004ec4:	429c      	cmp	r4, r3
 8004ec6:	d01b      	beq.n	8004f00 <__ledf2+0x60>
 8004ec8:	4823      	ldr	r0, [pc, #140]	; (8004f58 <__ledf2+0xb8>)
 8004eca:	4282      	cmp	r2, r0
 8004ecc:	d01d      	beq.n	8004f0a <__ledf2+0x6a>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2c00      	cmp	r4, #0
 8004ed2:	d103      	bne.n	8004edc <__ledf2+0x3c>
 8004ed4:	1c2b      	adds	r3, r5, #0
 8004ed6:	4333      	orrs	r3, r6
 8004ed8:	4258      	negs	r0, r3
 8004eda:	4143      	adcs	r3, r0
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	d009      	beq.n	8004ef4 <__ledf2+0x54>
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d117      	bne.n	8004f14 <__ledf2+0x74>
 8004ee4:	4541      	cmp	r1, r8
 8004ee6:	d01c      	beq.n	8004f22 <__ledf2+0x82>
 8004ee8:	4248      	negs	r0, r1
 8004eea:	2401      	movs	r4, #1
 8004eec:	4320      	orrs	r0, r4
 8004eee:	bc04      	pop	{r2}
 8004ef0:	4690      	mov	r8, r2
 8004ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef4:	4660      	mov	r0, ip
 8004ef6:	4338      	orrs	r0, r7
 8004ef8:	d1f2      	bne.n	8004ee0 <__ledf2+0x40>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f7      	bne.n	8004eee <__ledf2+0x4e>
 8004efe:	e7f3      	b.n	8004ee8 <__ledf2+0x48>
 8004f00:	1c2b      	adds	r3, r5, #0
 8004f02:	2002      	movs	r0, #2
 8004f04:	4333      	orrs	r3, r6
 8004f06:	d1f2      	bne.n	8004eee <__ledf2+0x4e>
 8004f08:	e7de      	b.n	8004ec8 <__ledf2+0x28>
 8004f0a:	4663      	mov	r3, ip
 8004f0c:	2002      	movs	r0, #2
 8004f0e:	433b      	orrs	r3, r7
 8004f10:	d1ed      	bne.n	8004eee <__ledf2+0x4e>
 8004f12:	e7dc      	b.n	8004ece <__ledf2+0x2e>
 8004f14:	4647      	mov	r7, r8
 8004f16:	427e      	negs	r6, r7
 8004f18:	417e      	adcs	r6, r7
 8004f1a:	4270      	negs	r0, r6
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	4308      	orrs	r0, r1
 8004f20:	e7e5      	b.n	8004eee <__ledf2+0x4e>
 8004f22:	4294      	cmp	r4, r2
 8004f24:	dce0      	bgt.n	8004ee8 <__ledf2+0x48>
 8004f26:	db0f      	blt.n	8004f48 <__ledf2+0xa8>
 8004f28:	4565      	cmp	r5, ip
 8004f2a:	d8dd      	bhi.n	8004ee8 <__ledf2+0x48>
 8004f2c:	4662      	mov	r2, ip
 8004f2e:	1aab      	subs	r3, r5, r2
 8004f30:	425a      	negs	r2, r3
 8004f32:	4153      	adcs	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <__ledf2+0x9c>
 8004f38:	42b7      	cmp	r7, r6
 8004f3a:	d3d5      	bcc.n	8004ee8 <__ledf2+0x48>
 8004f3c:	4565      	cmp	r5, ip
 8004f3e:	d303      	bcc.n	8004f48 <__ledf2+0xa8>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <__ledf2+0xb4>
 8004f44:	42be      	cmp	r6, r7
 8004f46:	d205      	bcs.n	8004f54 <__ledf2+0xb4>
 8004f48:	4248      	negs	r0, r1
 8004f4a:	4148      	adcs	r0, r1
 8004f4c:	4240      	negs	r0, r0
 8004f4e:	2501      	movs	r5, #1
 8004f50:	4328      	orrs	r0, r5
 8004f52:	e7cc      	b.n	8004eee <__ledf2+0x4e>
 8004f54:	2000      	movs	r0, #0
 8004f56:	e7ca      	b.n	8004eee <__ledf2+0x4e>
 8004f58:	000007ff 	.word	0x000007ff

08004f5c <__aeabi_dmul>:
 8004f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5e:	465f      	mov	r7, fp
 8004f60:	4656      	mov	r6, sl
 8004f62:	464d      	mov	r5, r9
 8004f64:	4644      	mov	r4, r8
 8004f66:	b4f0      	push	{r4, r5, r6, r7}
 8004f68:	1c1d      	adds	r5, r3, #0
 8004f6a:	004b      	lsls	r3, r1, #1
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	1c14      	adds	r4, r2, #0
 8004f70:	0d5a      	lsrs	r2, r3, #21
 8004f72:	030f      	lsls	r7, r1, #12
 8004f74:	4690      	mov	r8, r2
 8004f76:	0fc9      	lsrs	r1, r1, #31
 8004f78:	466b      	mov	r3, sp
 8004f7a:	7019      	strb	r1, [r3, #0]
 8004f7c:	b2ca      	uxtb	r2, r1
 8004f7e:	4643      	mov	r3, r8
 8004f80:	1c06      	adds	r6, r0, #0
 8004f82:	0b3f      	lsrs	r7, r7, #12
 8004f84:	9201      	str	r2, [sp, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d11d      	bne.n	8004fc6 <__aeabi_dmul+0x6a>
 8004f8a:	1c3b      	adds	r3, r7, #0
 8004f8c:	4303      	orrs	r3, r0
 8004f8e:	d100      	bne.n	8004f92 <__aeabi_dmul+0x36>
 8004f90:	e140      	b.n	8005214 <__aeabi_dmul+0x2b8>
 8004f92:	2f00      	cmp	r7, #0
 8004f94:	d100      	bne.n	8004f98 <__aeabi_dmul+0x3c>
 8004f96:	e1df      	b.n	8005358 <__aeabi_dmul+0x3fc>
 8004f98:	1c38      	adds	r0, r7, #0
 8004f9a:	f000 ff95 	bl	8005ec8 <__clzsi2>
 8004f9e:	2827      	cmp	r0, #39	; 0x27
 8004fa0:	dd00      	ble.n	8004fa4 <__aeabi_dmul+0x48>
 8004fa2:	e1d3      	b.n	800534c <__aeabi_dmul+0x3f0>
 8004fa4:	2128      	movs	r1, #40	; 0x28
 8004fa6:	1c03      	adds	r3, r0, #0
 8004fa8:	3b08      	subs	r3, #8
 8004faa:	1a0a      	subs	r2, r1, r0
 8004fac:	1c31      	adds	r1, r6, #0
 8004fae:	409f      	lsls	r7, r3
 8004fb0:	40d1      	lsrs	r1, r2
 8004fb2:	430f      	orrs	r7, r1
 8004fb4:	409e      	lsls	r6, r3
 8004fb6:	49cd      	ldr	r1, [pc, #820]	; (80052ec <__aeabi_dmul+0x390>)
 8004fb8:	2300      	movs	r3, #0
 8004fba:	1a0a      	subs	r2, r1, r0
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	4690      	mov	r8, r2
 8004fc0:	469b      	mov	fp, r3
 8004fc2:	9002      	str	r0, [sp, #8]
 8004fc4:	e00f      	b.n	8004fe6 <__aeabi_dmul+0x8a>
 8004fc6:	48ca      	ldr	r0, [pc, #808]	; (80052f0 <__aeabi_dmul+0x394>)
 8004fc8:	4580      	cmp	r8, r0
 8004fca:	d03f      	beq.n	800504c <__aeabi_dmul+0xf0>
 8004fcc:	2280      	movs	r2, #128	; 0x80
 8004fce:	0351      	lsls	r1, r2, #13
 8004fd0:	430f      	orrs	r7, r1
 8004fd2:	4bc8      	ldr	r3, [pc, #800]	; (80052f4 <__aeabi_dmul+0x398>)
 8004fd4:	0f70      	lsrs	r0, r6, #29
 8004fd6:	00ff      	lsls	r7, r7, #3
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4307      	orrs	r7, r0
 8004fde:	00f6      	lsls	r6, r6, #3
 8004fe0:	4498      	add	r8, r3
 8004fe2:	4693      	mov	fp, r2
 8004fe4:	9102      	str	r1, [sp, #8]
 8004fe6:	1c29      	adds	r1, r5, #0
 8004fe8:	0fca      	lsrs	r2, r1, #31
 8004fea:	032d      	lsls	r5, r5, #12
 8004fec:	004b      	lsls	r3, r1, #1
 8004fee:	4691      	mov	r9, r2
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	1c20      	adds	r0, r4, #0
 8004ff4:	0b2d      	lsrs	r5, r5, #12
 8004ff6:	0d5b      	lsrs	r3, r3, #21
 8004ff8:	4692      	mov	sl, r2
 8004ffa:	d132      	bne.n	8005062 <__aeabi_dmul+0x106>
 8004ffc:	1c29      	adds	r1, r5, #0
 8004ffe:	4321      	orrs	r1, r4
 8005000:	d100      	bne.n	8005004 <__aeabi_dmul+0xa8>
 8005002:	e10e      	b.n	8005222 <__aeabi_dmul+0x2c6>
 8005004:	2d00      	cmp	r5, #0
 8005006:	d100      	bne.n	800500a <__aeabi_dmul+0xae>
 8005008:	e19c      	b.n	8005344 <__aeabi_dmul+0x3e8>
 800500a:	1c28      	adds	r0, r5, #0
 800500c:	f000 ff5c 	bl	8005ec8 <__clzsi2>
 8005010:	2827      	cmp	r0, #39	; 0x27
 8005012:	dd00      	ble.n	8005016 <__aeabi_dmul+0xba>
 8005014:	e190      	b.n	8005338 <__aeabi_dmul+0x3dc>
 8005016:	2128      	movs	r1, #40	; 0x28
 8005018:	1c2a      	adds	r2, r5, #0
 800501a:	1c03      	adds	r3, r0, #0
 800501c:	1a0d      	subs	r5, r1, r0
 800501e:	1c21      	adds	r1, r4, #0
 8005020:	3b08      	subs	r3, #8
 8005022:	40e9      	lsrs	r1, r5
 8005024:	409a      	lsls	r2, r3
 8005026:	1c0d      	adds	r5, r1, #0
 8005028:	4315      	orrs	r5, r2
 800502a:	409c      	lsls	r4, r3
 800502c:	4aaf      	ldr	r2, [pc, #700]	; (80052ec <__aeabi_dmul+0x390>)
 800502e:	4651      	mov	r1, sl
 8005030:	1a13      	subs	r3, r2, r0
 8005032:	9801      	ldr	r0, [sp, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	4041      	eors	r1, r0
 8005038:	4658      	mov	r0, fp
 800503a:	4310      	orrs	r0, r2
 800503c:	280f      	cmp	r0, #15
 800503e:	d825      	bhi.n	800508c <__aeabi_dmul+0x130>
 8005040:	0080      	lsls	r0, r0, #2
 8005042:	4683      	mov	fp, r0
 8005044:	48ac      	ldr	r0, [pc, #688]	; (80052f8 <__aeabi_dmul+0x39c>)
 8005046:	4458      	add	r0, fp
 8005048:	6800      	ldr	r0, [r0, #0]
 800504a:	4687      	mov	pc, r0
 800504c:	1c38      	adds	r0, r7, #0
 800504e:	4330      	orrs	r0, r6
 8005050:	d000      	beq.n	8005054 <__aeabi_dmul+0xf8>
 8005052:	e0da      	b.n	800520a <__aeabi_dmul+0x2ae>
 8005054:	2608      	movs	r6, #8
 8005056:	2302      	movs	r3, #2
 8005058:	46b3      	mov	fp, r6
 800505a:	2700      	movs	r7, #0
 800505c:	2600      	movs	r6, #0
 800505e:	9302      	str	r3, [sp, #8]
 8005060:	e7c1      	b.n	8004fe6 <__aeabi_dmul+0x8a>
 8005062:	48a3      	ldr	r0, [pc, #652]	; (80052f0 <__aeabi_dmul+0x394>)
 8005064:	4283      	cmp	r3, r0
 8005066:	d100      	bne.n	800506a <__aeabi_dmul+0x10e>
 8005068:	e0c6      	b.n	80051f8 <__aeabi_dmul+0x29c>
 800506a:	2280      	movs	r2, #128	; 0x80
 800506c:	0350      	lsls	r0, r2, #13
 800506e:	4305      	orrs	r5, r0
 8005070:	4aa0      	ldr	r2, [pc, #640]	; (80052f4 <__aeabi_dmul+0x398>)
 8005072:	0f61      	lsrs	r1, r4, #29
 8005074:	00ed      	lsls	r5, r5, #3
 8005076:	189b      	adds	r3, r3, r2
 8005078:	430d      	orrs	r5, r1
 800507a:	00e4      	lsls	r4, r4, #3
 800507c:	2200      	movs	r2, #0
 800507e:	9801      	ldr	r0, [sp, #4]
 8005080:	4651      	mov	r1, sl
 8005082:	4041      	eors	r1, r0
 8005084:	4658      	mov	r0, fp
 8005086:	4310      	orrs	r0, r2
 8005088:	280f      	cmp	r0, #15
 800508a:	d9d9      	bls.n	8005040 <__aeabi_dmul+0xe4>
 800508c:	4443      	add	r3, r8
 800508e:	b2b2      	uxth	r2, r6
 8005090:	b2a0      	uxth	r0, r4
 8005092:	9303      	str	r3, [sp, #12]
 8005094:	1c13      	adds	r3, r2, #0
 8005096:	4343      	muls	r3, r0
 8005098:	0c24      	lsrs	r4, r4, #16
 800509a:	469b      	mov	fp, r3
 800509c:	1c13      	adds	r3, r2, #0
 800509e:	4363      	muls	r3, r4
 80050a0:	0c36      	lsrs	r6, r6, #16
 80050a2:	469c      	mov	ip, r3
 80050a4:	1c33      	adds	r3, r6, #0
 80050a6:	4343      	muls	r3, r0
 80050a8:	4698      	mov	r8, r3
 80050aa:	1c33      	adds	r3, r6, #0
 80050ac:	4363      	muls	r3, r4
 80050ae:	4699      	mov	r9, r3
 80050b0:	465b      	mov	r3, fp
 80050b2:	0c1b      	lsrs	r3, r3, #16
 80050b4:	469a      	mov	sl, r3
 80050b6:	44d4      	add	ip, sl
 80050b8:	44c4      	add	ip, r8
 80050ba:	45e0      	cmp	r8, ip
 80050bc:	d900      	bls.n	80050c0 <__aeabi_dmul+0x164>
 80050be:	e131      	b.n	8005324 <__aeabi_dmul+0x3c8>
 80050c0:	4663      	mov	r3, ip
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	4663      	mov	r3, ip
 80050c8:	041b      	lsls	r3, r3, #16
 80050ca:	4698      	mov	r8, r3
 80050cc:	465b      	mov	r3, fp
 80050ce:	041b      	lsls	r3, r3, #16
 80050d0:	0c1b      	lsrs	r3, r3, #16
 80050d2:	4443      	add	r3, r8
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	b2ab      	uxth	r3, r5
 80050d8:	9302      	str	r3, [sp, #8]
 80050da:	4353      	muls	r3, r2
 80050dc:	4698      	mov	r8, r3
 80050de:	9b02      	ldr	r3, [sp, #8]
 80050e0:	0c2d      	lsrs	r5, r5, #16
 80050e2:	4373      	muls	r3, r6
 80050e4:	436a      	muls	r2, r5
 80050e6:	469b      	mov	fp, r3
 80050e8:	4643      	mov	r3, r8
 80050ea:	0c1b      	lsrs	r3, r3, #16
 80050ec:	469c      	mov	ip, r3
 80050ee:	4462      	add	r2, ip
 80050f0:	445a      	add	r2, fp
 80050f2:	436e      	muls	r6, r5
 80050f4:	4593      	cmp	fp, r2
 80050f6:	d902      	bls.n	80050fe <__aeabi_dmul+0x1a2>
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	025b      	lsls	r3, r3, #9
 80050fc:	18f6      	adds	r6, r6, r3
 80050fe:	0c13      	lsrs	r3, r2, #16
 8005100:	469a      	mov	sl, r3
 8005102:	4643      	mov	r3, r8
 8005104:	041b      	lsls	r3, r3, #16
 8005106:	0c1b      	lsrs	r3, r3, #16
 8005108:	0412      	lsls	r2, r2, #16
 800510a:	469c      	mov	ip, r3
 800510c:	4494      	add	ip, r2
 800510e:	b2ba      	uxth	r2, r7
 8005110:	1c13      	adds	r3, r2, #0
 8005112:	4343      	muls	r3, r0
 8005114:	4698      	mov	r8, r3
 8005116:	1c13      	adds	r3, r2, #0
 8005118:	4363      	muls	r3, r4
 800511a:	0c3f      	lsrs	r7, r7, #16
 800511c:	4456      	add	r6, sl
 800511e:	4378      	muls	r0, r7
 8005120:	469a      	mov	sl, r3
 8005122:	4643      	mov	r3, r8
 8005124:	0c1b      	lsrs	r3, r3, #16
 8005126:	469b      	mov	fp, r3
 8005128:	44da      	add	sl, fp
 800512a:	4482      	add	sl, r0
 800512c:	437c      	muls	r4, r7
 800512e:	4550      	cmp	r0, sl
 8005130:	d902      	bls.n	8005138 <__aeabi_dmul+0x1dc>
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	0258      	lsls	r0, r3, #9
 8005136:	1824      	adds	r4, r4, r0
 8005138:	4653      	mov	r3, sl
 800513a:	0c18      	lsrs	r0, r3, #16
 800513c:	1824      	adds	r4, r4, r0
 800513e:	0418      	lsls	r0, r3, #16
 8005140:	4643      	mov	r3, r8
 8005142:	041b      	lsls	r3, r3, #16
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	4698      	mov	r8, r3
 8005148:	9b02      	ldr	r3, [sp, #8]
 800514a:	4440      	add	r0, r8
 800514c:	4353      	muls	r3, r2
 800514e:	4698      	mov	r8, r3
 8005150:	9b02      	ldr	r3, [sp, #8]
 8005152:	436a      	muls	r2, r5
 8005154:	437b      	muls	r3, r7
 8005156:	436f      	muls	r7, r5
 8005158:	46ba      	mov	sl, r7
 800515a:	4647      	mov	r7, r8
 800515c:	0c3d      	lsrs	r5, r7, #16
 800515e:	1957      	adds	r7, r2, r5
 8005160:	18fa      	adds	r2, r7, r3
 8005162:	4293      	cmp	r3, r2
 8005164:	d902      	bls.n	800516c <__aeabi_dmul+0x210>
 8005166:	2780      	movs	r7, #128	; 0x80
 8005168:	027d      	lsls	r5, r7, #9
 800516a:	44aa      	add	sl, r5
 800516c:	9b00      	ldr	r3, [sp, #0]
 800516e:	0415      	lsls	r5, r2, #16
 8005170:	4463      	add	r3, ip
 8005172:	444b      	add	r3, r9
 8005174:	4563      	cmp	r3, ip
 8005176:	41bf      	sbcs	r7, r7
 8005178:	46ac      	mov	ip, r5
 800517a:	4645      	mov	r5, r8
 800517c:	042d      	lsls	r5, r5, #16
 800517e:	0c2d      	lsrs	r5, r5, #16
 8005180:	46ab      	mov	fp, r5
 8005182:	44dc      	add	ip, fp
 8005184:	44b4      	add	ip, r6
 8005186:	45b4      	cmp	ip, r6
 8005188:	41ad      	sbcs	r5, r5
 800518a:	426e      	negs	r6, r5
 800518c:	427f      	negs	r7, r7
 800518e:	46b1      	mov	r9, r6
 8005190:	44bc      	add	ip, r7
 8005192:	181e      	adds	r6, r3, r0
 8005194:	4286      	cmp	r6, r0
 8005196:	4180      	sbcs	r0, r0
 8005198:	4665      	mov	r5, ip
 800519a:	1963      	adds	r3, r4, r5
 800519c:	4240      	negs	r0, r0
 800519e:	45bc      	cmp	ip, r7
 80051a0:	41bf      	sbcs	r7, r7
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	41a4      	sbcs	r4, r4
 80051a6:	464d      	mov	r5, r9
 80051a8:	181b      	adds	r3, r3, r0
 80051aa:	427f      	negs	r7, r7
 80051ac:	432f      	orrs	r7, r5
 80051ae:	4283      	cmp	r3, r0
 80051b0:	4180      	sbcs	r0, r0
 80051b2:	0c15      	lsrs	r5, r2, #16
 80051b4:	197a      	adds	r2, r7, r5
 80051b6:	4264      	negs	r4, r4
 80051b8:	4245      	negs	r5, r0
 80051ba:	4325      	orrs	r5, r4
 80051bc:	9801      	ldr	r0, [sp, #4]
 80051be:	1957      	adds	r7, r2, r5
 80051c0:	0275      	lsls	r5, r6, #9
 80051c2:	4305      	orrs	r5, r0
 80051c4:	1e6a      	subs	r2, r5, #1
 80051c6:	4195      	sbcs	r5, r2
 80051c8:	4457      	add	r7, sl
 80051ca:	0ddc      	lsrs	r4, r3, #23
 80051cc:	0df2      	lsrs	r2, r6, #23
 80051ce:	027f      	lsls	r7, r7, #9
 80051d0:	1c2e      	adds	r6, r5, #0
 80051d2:	4327      	orrs	r7, r4
 80051d4:	4316      	orrs	r6, r2
 80051d6:	025c      	lsls	r4, r3, #9
 80051d8:	4326      	orrs	r6, r4
 80051da:	01fa      	lsls	r2, r7, #7
 80051dc:	d50a      	bpl.n	80051f4 <__aeabi_dmul+0x298>
 80051de:	2001      	movs	r0, #1
 80051e0:	9b03      	ldr	r3, [sp, #12]
 80051e2:	4030      	ands	r0, r6
 80051e4:	0874      	lsrs	r4, r6, #1
 80051e6:	1c06      	adds	r6, r0, #0
 80051e8:	07fa      	lsls	r2, r7, #31
 80051ea:	3301      	adds	r3, #1
 80051ec:	4326      	orrs	r6, r4
 80051ee:	9303      	str	r3, [sp, #12]
 80051f0:	4316      	orrs	r6, r2
 80051f2:	087f      	lsrs	r7, r7, #1
 80051f4:	1c0b      	adds	r3, r1, #0
 80051f6:	e021      	b.n	800523c <__aeabi_dmul+0x2e0>
 80051f8:	1c28      	adds	r0, r5, #0
 80051fa:	2203      	movs	r2, #3
 80051fc:	4320      	orrs	r0, r4
 80051fe:	d000      	beq.n	8005202 <__aeabi_dmul+0x2a6>
 8005200:	e73d      	b.n	800507e <__aeabi_dmul+0x122>
 8005202:	2500      	movs	r5, #0
 8005204:	2400      	movs	r4, #0
 8005206:	2202      	movs	r2, #2
 8005208:	e739      	b.n	800507e <__aeabi_dmul+0x122>
 800520a:	200c      	movs	r0, #12
 800520c:	2103      	movs	r1, #3
 800520e:	4683      	mov	fp, r0
 8005210:	9102      	str	r1, [sp, #8]
 8005212:	e6e8      	b.n	8004fe6 <__aeabi_dmul+0x8a>
 8005214:	2704      	movs	r7, #4
 8005216:	2201      	movs	r2, #1
 8005218:	46bb      	mov	fp, r7
 800521a:	2600      	movs	r6, #0
 800521c:	2700      	movs	r7, #0
 800521e:	9202      	str	r2, [sp, #8]
 8005220:	e6e1      	b.n	8004fe6 <__aeabi_dmul+0x8a>
 8005222:	2500      	movs	r5, #0
 8005224:	2400      	movs	r4, #0
 8005226:	2201      	movs	r2, #1
 8005228:	e729      	b.n	800507e <__aeabi_dmul+0x122>
 800522a:	9a02      	ldr	r2, [sp, #8]
 800522c:	1c0b      	adds	r3, r1, #0
 800522e:	2a02      	cmp	r2, #2
 8005230:	d043      	beq.n	80052ba <__aeabi_dmul+0x35e>
 8005232:	2a03      	cmp	r2, #3
 8005234:	d04f      	beq.n	80052d6 <__aeabi_dmul+0x37a>
 8005236:	2a01      	cmp	r2, #1
 8005238:	d100      	bne.n	800523c <__aeabi_dmul+0x2e0>
 800523a:	e079      	b.n	8005330 <__aeabi_dmul+0x3d4>
 800523c:	9803      	ldr	r0, [sp, #12]
 800523e:	492f      	ldr	r1, [pc, #188]	; (80052fc <__aeabi_dmul+0x3a0>)
 8005240:	1842      	adds	r2, r0, r1
 8005242:	2a00      	cmp	r2, #0
 8005244:	dc00      	bgt.n	8005248 <__aeabi_dmul+0x2ec>
 8005246:	e08b      	b.n	8005360 <__aeabi_dmul+0x404>
 8005248:	250f      	movs	r5, #15
 800524a:	4035      	ands	r5, r6
 800524c:	2d04      	cmp	r5, #4
 800524e:	d005      	beq.n	800525c <__aeabi_dmul+0x300>
 8005250:	1d34      	adds	r4, r6, #4
 8005252:	42b4      	cmp	r4, r6
 8005254:	4180      	sbcs	r0, r0
 8005256:	4246      	negs	r6, r0
 8005258:	19bf      	adds	r7, r7, r6
 800525a:	1c26      	adds	r6, r4, #0
 800525c:	01f8      	lsls	r0, r7, #7
 800525e:	d505      	bpl.n	800526c <__aeabi_dmul+0x310>
 8005260:	4c27      	ldr	r4, [pc, #156]	; (8005300 <__aeabi_dmul+0x3a4>)
 8005262:	9a03      	ldr	r2, [sp, #12]
 8005264:	2580      	movs	r5, #128	; 0x80
 8005266:	00e9      	lsls	r1, r5, #3
 8005268:	4027      	ands	r7, r4
 800526a:	1852      	adds	r2, r2, r1
 800526c:	4825      	ldr	r0, [pc, #148]	; (8005304 <__aeabi_dmul+0x3a8>)
 800526e:	4282      	cmp	r2, r0
 8005270:	dc23      	bgt.n	80052ba <__aeabi_dmul+0x35e>
 8005272:	077d      	lsls	r5, r7, #29
 8005274:	0279      	lsls	r1, r7, #9
 8005276:	08f6      	lsrs	r6, r6, #3
 8005278:	0557      	lsls	r7, r2, #21
 800527a:	432e      	orrs	r6, r5
 800527c:	0d7a      	lsrs	r2, r7, #21
 800527e:	0b0d      	lsrs	r5, r1, #12
 8005280:	2000      	movs	r0, #0
 8005282:	2100      	movs	r1, #0
 8005284:	0d0c      	lsrs	r4, r1, #20
 8005286:	0527      	lsls	r7, r4, #20
 8005288:	432f      	orrs	r7, r5
 800528a:	4d1f      	ldr	r5, [pc, #124]	; (8005308 <__aeabi_dmul+0x3ac>)
 800528c:	0512      	lsls	r2, r2, #20
 800528e:	403d      	ands	r5, r7
 8005290:	4315      	orrs	r5, r2
 8005292:	006d      	lsls	r5, r5, #1
 8005294:	086d      	lsrs	r5, r5, #1
 8005296:	07db      	lsls	r3, r3, #31
 8005298:	1c29      	adds	r1, r5, #0
 800529a:	1c30      	adds	r0, r6, #0
 800529c:	4319      	orrs	r1, r3
 800529e:	b005      	add	sp, #20
 80052a0:	bc3c      	pop	{r2, r3, r4, r5}
 80052a2:	4690      	mov	r8, r2
 80052a4:	4699      	mov	r9, r3
 80052a6:	46a2      	mov	sl, r4
 80052a8:	46ab      	mov	fp, r5
 80052aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ac:	464e      	mov	r6, r9
 80052ae:	2301      	movs	r3, #1
 80052b0:	4033      	ands	r3, r6
 80052b2:	1c2f      	adds	r7, r5, #0
 80052b4:	1c26      	adds	r6, r4, #0
 80052b6:	2a02      	cmp	r2, #2
 80052b8:	d1bb      	bne.n	8005232 <__aeabi_dmul+0x2d6>
 80052ba:	4a0d      	ldr	r2, [pc, #52]	; (80052f0 <__aeabi_dmul+0x394>)
 80052bc:	2500      	movs	r5, #0
 80052be:	2600      	movs	r6, #0
 80052c0:	e7de      	b.n	8005280 <__aeabi_dmul+0x324>
 80052c2:	466a      	mov	r2, sp
 80052c4:	7815      	ldrb	r5, [r2, #0]
 80052c6:	2301      	movs	r3, #1
 80052c8:	402b      	ands	r3, r5
 80052ca:	9a02      	ldr	r2, [sp, #8]
 80052cc:	e7af      	b.n	800522e <__aeabi_dmul+0x2d2>
 80052ce:	2401      	movs	r4, #1
 80052d0:	4f0e      	ldr	r7, [pc, #56]	; (800530c <__aeabi_dmul+0x3b0>)
 80052d2:	2300      	movs	r3, #0
 80052d4:	4266      	negs	r6, r4
 80052d6:	2080      	movs	r0, #128	; 0x80
 80052d8:	0301      	lsls	r1, r0, #12
 80052da:	430f      	orrs	r7, r1
 80052dc:	033d      	lsls	r5, r7, #12
 80052de:	0b2d      	lsrs	r5, r5, #12
 80052e0:	4a03      	ldr	r2, [pc, #12]	; (80052f0 <__aeabi_dmul+0x394>)
 80052e2:	e7cd      	b.n	8005280 <__aeabi_dmul+0x324>
 80052e4:	1c0b      	adds	r3, r1, #0
 80052e6:	1c2f      	adds	r7, r5, #0
 80052e8:	1c26      	adds	r6, r4, #0
 80052ea:	e7a0      	b.n	800522e <__aeabi_dmul+0x2d2>
 80052ec:	fffffc0d 	.word	0xfffffc0d
 80052f0:	000007ff 	.word	0x000007ff
 80052f4:	fffffc01 	.word	0xfffffc01
 80052f8:	08009fc0 	.word	0x08009fc0
 80052fc:	000003ff 	.word	0x000003ff
 8005300:	feffffff 	.word	0xfeffffff
 8005304:	000007fe 	.word	0x000007fe
 8005308:	800fffff 	.word	0x800fffff
 800530c:	000fffff 	.word	0x000fffff
 8005310:	2180      	movs	r1, #128	; 0x80
 8005312:	030b      	lsls	r3, r1, #12
 8005314:	421f      	tst	r7, r3
 8005316:	d009      	beq.n	800532c <__aeabi_dmul+0x3d0>
 8005318:	421d      	tst	r5, r3
 800531a:	d107      	bne.n	800532c <__aeabi_dmul+0x3d0>
 800531c:	1c2f      	adds	r7, r5, #0
 800531e:	1c26      	adds	r6, r4, #0
 8005320:	4653      	mov	r3, sl
 8005322:	e7d8      	b.n	80052d6 <__aeabi_dmul+0x37a>
 8005324:	2380      	movs	r3, #128	; 0x80
 8005326:	025b      	lsls	r3, r3, #9
 8005328:	4499      	add	r9, r3
 800532a:	e6c9      	b.n	80050c0 <__aeabi_dmul+0x164>
 800532c:	9b01      	ldr	r3, [sp, #4]
 800532e:	e7d2      	b.n	80052d6 <__aeabi_dmul+0x37a>
 8005330:	2200      	movs	r2, #0
 8005332:	2500      	movs	r5, #0
 8005334:	2600      	movs	r6, #0
 8005336:	e7a3      	b.n	8005280 <__aeabi_dmul+0x324>
 8005338:	1c03      	adds	r3, r0, #0
 800533a:	3b28      	subs	r3, #40	; 0x28
 800533c:	409c      	lsls	r4, r3
 800533e:	1c25      	adds	r5, r4, #0
 8005340:	2400      	movs	r4, #0
 8005342:	e673      	b.n	800502c <__aeabi_dmul+0xd0>
 8005344:	f000 fdc0 	bl	8005ec8 <__clzsi2>
 8005348:	3020      	adds	r0, #32
 800534a:	e661      	b.n	8005010 <__aeabi_dmul+0xb4>
 800534c:	1c07      	adds	r7, r0, #0
 800534e:	3f28      	subs	r7, #40	; 0x28
 8005350:	40be      	lsls	r6, r7
 8005352:	1c37      	adds	r7, r6, #0
 8005354:	2600      	movs	r6, #0
 8005356:	e62e      	b.n	8004fb6 <__aeabi_dmul+0x5a>
 8005358:	f000 fdb6 	bl	8005ec8 <__clzsi2>
 800535c:	3020      	adds	r0, #32
 800535e:	e61e      	b.n	8004f9e <__aeabi_dmul+0x42>
 8005360:	4a1f      	ldr	r2, [pc, #124]	; (80053e0 <__aeabi_dmul+0x484>)
 8005362:	9c03      	ldr	r4, [sp, #12]
 8005364:	1b12      	subs	r2, r2, r4
 8005366:	2a38      	cmp	r2, #56	; 0x38
 8005368:	dce2      	bgt.n	8005330 <__aeabi_dmul+0x3d4>
 800536a:	2a1f      	cmp	r2, #31
 800536c:	dc20      	bgt.n	80053b0 <__aeabi_dmul+0x454>
 800536e:	481d      	ldr	r0, [pc, #116]	; (80053e4 <__aeabi_dmul+0x488>)
 8005370:	1c35      	adds	r5, r6, #0
 8005372:	1821      	adds	r1, r4, r0
 8005374:	1c38      	adds	r0, r7, #0
 8005376:	408e      	lsls	r6, r1
 8005378:	40d5      	lsrs	r5, r2
 800537a:	4088      	lsls	r0, r1
 800537c:	1c34      	adds	r4, r6, #0
 800537e:	4328      	orrs	r0, r5
 8005380:	1e66      	subs	r6, r4, #1
 8005382:	41b4      	sbcs	r4, r6
 8005384:	1c06      	adds	r6, r0, #0
 8005386:	4326      	orrs	r6, r4
 8005388:	40d7      	lsrs	r7, r2
 800538a:	210f      	movs	r1, #15
 800538c:	4031      	ands	r1, r6
 800538e:	2904      	cmp	r1, #4
 8005390:	d005      	beq.n	800539e <__aeabi_dmul+0x442>
 8005392:	1d30      	adds	r0, r6, #4
 8005394:	42b0      	cmp	r0, r6
 8005396:	4192      	sbcs	r2, r2
 8005398:	4256      	negs	r6, r2
 800539a:	19bf      	adds	r7, r7, r6
 800539c:	1c06      	adds	r6, r0, #0
 800539e:	0239      	lsls	r1, r7, #8
 80053a0:	d41a      	bmi.n	80053d8 <__aeabi_dmul+0x47c>
 80053a2:	077c      	lsls	r4, r7, #29
 80053a4:	08f6      	lsrs	r6, r6, #3
 80053a6:	027f      	lsls	r7, r7, #9
 80053a8:	4326      	orrs	r6, r4
 80053aa:	0b3d      	lsrs	r5, r7, #12
 80053ac:	2200      	movs	r2, #0
 80053ae:	e767      	b.n	8005280 <__aeabi_dmul+0x324>
 80053b0:	4d0d      	ldr	r5, [pc, #52]	; (80053e8 <__aeabi_dmul+0x48c>)
 80053b2:	9803      	ldr	r0, [sp, #12]
 80053b4:	1c3c      	adds	r4, r7, #0
 80053b6:	1a29      	subs	r1, r5, r0
 80053b8:	40cc      	lsrs	r4, r1
 80053ba:	1c21      	adds	r1, r4, #0
 80053bc:	2400      	movs	r4, #0
 80053be:	2a20      	cmp	r2, #32
 80053c0:	d004      	beq.n	80053cc <__aeabi_dmul+0x470>
 80053c2:	4c0a      	ldr	r4, [pc, #40]	; (80053ec <__aeabi_dmul+0x490>)
 80053c4:	9d03      	ldr	r5, [sp, #12]
 80053c6:	192a      	adds	r2, r5, r4
 80053c8:	4097      	lsls	r7, r2
 80053ca:	1c3c      	adds	r4, r7, #0
 80053cc:	4326      	orrs	r6, r4
 80053ce:	1e74      	subs	r4, r6, #1
 80053d0:	41a6      	sbcs	r6, r4
 80053d2:	430e      	orrs	r6, r1
 80053d4:	2700      	movs	r7, #0
 80053d6:	e7d8      	b.n	800538a <__aeabi_dmul+0x42e>
 80053d8:	2201      	movs	r2, #1
 80053da:	2500      	movs	r5, #0
 80053dc:	2600      	movs	r6, #0
 80053de:	e74f      	b.n	8005280 <__aeabi_dmul+0x324>
 80053e0:	fffffc02 	.word	0xfffffc02
 80053e4:	0000041e 	.word	0x0000041e
 80053e8:	fffffbe2 	.word	0xfffffbe2
 80053ec:	0000043e 	.word	0x0000043e

080053f0 <__aeabi_dsub>:
 80053f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053f2:	4657      	mov	r7, sl
 80053f4:	464e      	mov	r6, r9
 80053f6:	4645      	mov	r5, r8
 80053f8:	b4e0      	push	{r5, r6, r7}
 80053fa:	1c05      	adds	r5, r0, #0
 80053fc:	030c      	lsls	r4, r1, #12
 80053fe:	0fcf      	lsrs	r7, r1, #31
 8005400:	0048      	lsls	r0, r1, #1
 8005402:	0a64      	lsrs	r4, r4, #9
 8005404:	0f69      	lsrs	r1, r5, #29
 8005406:	4690      	mov	r8, r2
 8005408:	430c      	orrs	r4, r1
 800540a:	0fda      	lsrs	r2, r3, #31
 800540c:	00e9      	lsls	r1, r5, #3
 800540e:	005d      	lsls	r5, r3, #1
 8005410:	031b      	lsls	r3, r3, #12
 8005412:	46ba      	mov	sl, r7
 8005414:	b2fe      	uxtb	r6, r7
 8005416:	0a5f      	lsrs	r7, r3, #9
 8005418:	46bc      	mov	ip, r7
 800541a:	4643      	mov	r3, r8
 800541c:	0f5f      	lsrs	r7, r3, #29
 800541e:	4663      	mov	r3, ip
 8005420:	433b      	orrs	r3, r7
 8005422:	469c      	mov	ip, r3
 8005424:	4647      	mov	r7, r8
 8005426:	4bc8      	ldr	r3, [pc, #800]	; (8005748 <__aeabi_dsub+0x358>)
 8005428:	00ff      	lsls	r7, r7, #3
 800542a:	0d40      	lsrs	r0, r0, #21
 800542c:	0d6d      	lsrs	r5, r5, #21
 800542e:	46b8      	mov	r8, r7
 8005430:	429d      	cmp	r5, r3
 8005432:	d100      	bne.n	8005436 <__aeabi_dsub+0x46>
 8005434:	e0df      	b.n	80055f6 <__aeabi_dsub+0x206>
 8005436:	2701      	movs	r7, #1
 8005438:	407a      	eors	r2, r7
 800543a:	1b43      	subs	r3, r0, r5
 800543c:	4296      	cmp	r6, r2
 800543e:	d100      	bne.n	8005442 <__aeabi_dsub+0x52>
 8005440:	e0a5      	b.n	800558e <__aeabi_dsub+0x19e>
 8005442:	2b00      	cmp	r3, #0
 8005444:	dc00      	bgt.n	8005448 <__aeabi_dsub+0x58>
 8005446:	e10b      	b.n	8005660 <__aeabi_dsub+0x270>
 8005448:	2d00      	cmp	r5, #0
 800544a:	d113      	bne.n	8005474 <__aeabi_dsub+0x84>
 800544c:	4662      	mov	r2, ip
 800544e:	4647      	mov	r7, r8
 8005450:	433a      	orrs	r2, r7
 8005452:	d100      	bne.n	8005456 <__aeabi_dsub+0x66>
 8005454:	e0d4      	b.n	8005600 <__aeabi_dsub+0x210>
 8005456:	3b01      	subs	r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d000      	beq.n	800545e <__aeabi_dsub+0x6e>
 800545c:	e15a      	b.n	8005714 <__aeabi_dsub+0x324>
 800545e:	4647      	mov	r7, r8
 8005460:	1bcd      	subs	r5, r1, r7
 8005462:	42a9      	cmp	r1, r5
 8005464:	4189      	sbcs	r1, r1
 8005466:	4662      	mov	r2, ip
 8005468:	1aa4      	subs	r4, r4, r2
 800546a:	424b      	negs	r3, r1
 800546c:	1ae3      	subs	r3, r4, r3
 800546e:	1c2c      	adds	r4, r5, #0
 8005470:	1c05      	adds	r5, r0, #0
 8005472:	e026      	b.n	80054c2 <__aeabi_dsub+0xd2>
 8005474:	4ab4      	ldr	r2, [pc, #720]	; (8005748 <__aeabi_dsub+0x358>)
 8005476:	4290      	cmp	r0, r2
 8005478:	d100      	bne.n	800547c <__aeabi_dsub+0x8c>
 800547a:	e0dc      	b.n	8005636 <__aeabi_dsub+0x246>
 800547c:	2280      	movs	r2, #128	; 0x80
 800547e:	4667      	mov	r7, ip
 8005480:	0415      	lsls	r5, r2, #16
 8005482:	432f      	orrs	r7, r5
 8005484:	46bc      	mov	ip, r7
 8005486:	2b38      	cmp	r3, #56	; 0x38
 8005488:	dd00      	ble.n	800548c <__aeabi_dsub+0x9c>
 800548a:	e11a      	b.n	80056c2 <__aeabi_dsub+0x2d2>
 800548c:	2b1f      	cmp	r3, #31
 800548e:	dd00      	ble.n	8005492 <__aeabi_dsub+0xa2>
 8005490:	e160      	b.n	8005754 <__aeabi_dsub+0x364>
 8005492:	2220      	movs	r2, #32
 8005494:	1ad5      	subs	r5, r2, r3
 8005496:	4667      	mov	r7, ip
 8005498:	4642      	mov	r2, r8
 800549a:	40af      	lsls	r7, r5
 800549c:	40da      	lsrs	r2, r3
 800549e:	433a      	orrs	r2, r7
 80054a0:	4647      	mov	r7, r8
 80054a2:	40af      	lsls	r7, r5
 80054a4:	1c3d      	adds	r5, r7, #0
 80054a6:	1e6f      	subs	r7, r5, #1
 80054a8:	41bd      	sbcs	r5, r7
 80054aa:	4667      	mov	r7, ip
 80054ac:	40df      	lsrs	r7, r3
 80054ae:	432a      	orrs	r2, r5
 80054b0:	1c3b      	adds	r3, r7, #0
 80054b2:	1a8a      	subs	r2, r1, r2
 80054b4:	1ae4      	subs	r4, r4, r3
 80054b6:	4291      	cmp	r1, r2
 80054b8:	419b      	sbcs	r3, r3
 80054ba:	4259      	negs	r1, r3
 80054bc:	1a63      	subs	r3, r4, r1
 80054be:	1c05      	adds	r5, r0, #0
 80054c0:	1c14      	adds	r4, r2, #0
 80054c2:	021f      	lsls	r7, r3, #8
 80054c4:	d400      	bmi.n	80054c8 <__aeabi_dsub+0xd8>
 80054c6:	e0bf      	b.n	8005648 <__aeabi_dsub+0x258>
 80054c8:	0258      	lsls	r0, r3, #9
 80054ca:	0a47      	lsrs	r7, r0, #9
 80054cc:	2f00      	cmp	r7, #0
 80054ce:	d100      	bne.n	80054d2 <__aeabi_dsub+0xe2>
 80054d0:	e0e9      	b.n	80056a6 <__aeabi_dsub+0x2b6>
 80054d2:	1c38      	adds	r0, r7, #0
 80054d4:	f000 fcf8 	bl	8005ec8 <__clzsi2>
 80054d8:	1c02      	adds	r2, r0, #0
 80054da:	3a08      	subs	r2, #8
 80054dc:	2a1f      	cmp	r2, #31
 80054de:	dd00      	ble.n	80054e2 <__aeabi_dsub+0xf2>
 80054e0:	e0ea      	b.n	80056b8 <__aeabi_dsub+0x2c8>
 80054e2:	2128      	movs	r1, #40	; 0x28
 80054e4:	1a0b      	subs	r3, r1, r0
 80054e6:	1c20      	adds	r0, r4, #0
 80054e8:	4097      	lsls	r7, r2
 80054ea:	40d8      	lsrs	r0, r3
 80054ec:	4307      	orrs	r7, r0
 80054ee:	4094      	lsls	r4, r2
 80054f0:	4295      	cmp	r5, r2
 80054f2:	dd00      	ble.n	80054f6 <__aeabi_dsub+0x106>
 80054f4:	e0a5      	b.n	8005642 <__aeabi_dsub+0x252>
 80054f6:	1b55      	subs	r5, r2, r5
 80054f8:	1c6b      	adds	r3, r5, #1
 80054fa:	2b1f      	cmp	r3, #31
 80054fc:	dd00      	ble.n	8005500 <__aeabi_dsub+0x110>
 80054fe:	e10e      	b.n	800571e <__aeabi_dsub+0x32e>
 8005500:	211f      	movs	r1, #31
 8005502:	1b4d      	subs	r5, r1, r5
 8005504:	1c20      	adds	r0, r4, #0
 8005506:	1c3a      	adds	r2, r7, #0
 8005508:	40aa      	lsls	r2, r5
 800550a:	40d8      	lsrs	r0, r3
 800550c:	40ac      	lsls	r4, r5
 800550e:	1e65      	subs	r5, r4, #1
 8005510:	41ac      	sbcs	r4, r5
 8005512:	40df      	lsrs	r7, r3
 8005514:	4310      	orrs	r0, r2
 8005516:	1c3b      	adds	r3, r7, #0
 8005518:	4304      	orrs	r4, r0
 800551a:	2701      	movs	r7, #1
 800551c:	2500      	movs	r5, #0
 800551e:	210f      	movs	r1, #15
 8005520:	4021      	ands	r1, r4
 8005522:	2904      	cmp	r1, #4
 8005524:	d100      	bne.n	8005528 <__aeabi_dsub+0x138>
 8005526:	e074      	b.n	8005612 <__aeabi_dsub+0x222>
 8005528:	1d22      	adds	r2, r4, #4
 800552a:	42a2      	cmp	r2, r4
 800552c:	4189      	sbcs	r1, r1
 800552e:	4248      	negs	r0, r1
 8005530:	2401      	movs	r4, #1
 8005532:	181b      	adds	r3, r3, r0
 8005534:	4026      	ands	r6, r4
 8005536:	021c      	lsls	r4, r3, #8
 8005538:	d507      	bpl.n	800554a <__aeabi_dsub+0x15a>
 800553a:	4d83      	ldr	r5, [pc, #524]	; (8005748 <__aeabi_dsub+0x358>)
 800553c:	42af      	cmp	r7, r5
 800553e:	d100      	bne.n	8005542 <__aeabi_dsub+0x152>
 8005540:	e0ae      	b.n	80056a0 <__aeabi_dsub+0x2b0>
 8005542:	4c82      	ldr	r4, [pc, #520]	; (800574c <__aeabi_dsub+0x35c>)
 8005544:	1c3d      	adds	r5, r7, #0
 8005546:	4023      	ands	r3, r4
 8005548:	3701      	adds	r7, #1
 800554a:	0759      	lsls	r1, r3, #29
 800554c:	08d2      	lsrs	r2, r2, #3
 800554e:	0578      	lsls	r0, r7, #21
 8005550:	430a      	orrs	r2, r1
 8005552:	08db      	lsrs	r3, r3, #3
 8005554:	0d47      	lsrs	r7, r0, #21
 8005556:	2f01      	cmp	r7, #1
 8005558:	dc00      	bgt.n	800555c <__aeabi_dsub+0x16c>
 800555a:	e077      	b.n	800564c <__aeabi_dsub+0x25c>
 800555c:	031c      	lsls	r4, r3, #12
 800555e:	0569      	lsls	r1, r5, #21
 8005560:	0b23      	lsrs	r3, r4, #12
 8005562:	0d4f      	lsrs	r7, r1, #21
 8005564:	2000      	movs	r0, #0
 8005566:	2100      	movs	r1, #0
 8005568:	1c10      	adds	r0, r2, #0
 800556a:	0d0a      	lsrs	r2, r1, #20
 800556c:	0512      	lsls	r2, r2, #20
 800556e:	4d78      	ldr	r5, [pc, #480]	; (8005750 <__aeabi_dsub+0x360>)
 8005570:	4313      	orrs	r3, r2
 8005572:	057f      	lsls	r7, r7, #21
 8005574:	087f      	lsrs	r7, r7, #1
 8005576:	401d      	ands	r5, r3
 8005578:	433d      	orrs	r5, r7
 800557a:	006d      	lsls	r5, r5, #1
 800557c:	086d      	lsrs	r5, r5, #1
 800557e:	07f6      	lsls	r6, r6, #31
 8005580:	1c29      	adds	r1, r5, #0
 8005582:	4331      	orrs	r1, r6
 8005584:	bc1c      	pop	{r2, r3, r4}
 8005586:	4690      	mov	r8, r2
 8005588:	4699      	mov	r9, r3
 800558a:	46a2      	mov	sl, r4
 800558c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800558e:	2b00      	cmp	r3, #0
 8005590:	dc00      	bgt.n	8005594 <__aeabi_dsub+0x1a4>
 8005592:	e0a4      	b.n	80056de <__aeabi_dsub+0x2ee>
 8005594:	2d00      	cmp	r5, #0
 8005596:	d040      	beq.n	800561a <__aeabi_dsub+0x22a>
 8005598:	4d6b      	ldr	r5, [pc, #428]	; (8005748 <__aeabi_dsub+0x358>)
 800559a:	42a8      	cmp	r0, r5
 800559c:	d04b      	beq.n	8005636 <__aeabi_dsub+0x246>
 800559e:	2580      	movs	r5, #128	; 0x80
 80055a0:	4667      	mov	r7, ip
 80055a2:	042a      	lsls	r2, r5, #16
 80055a4:	4317      	orrs	r7, r2
 80055a6:	46bc      	mov	ip, r7
 80055a8:	2b38      	cmp	r3, #56	; 0x38
 80055aa:	dc00      	bgt.n	80055ae <__aeabi_dsub+0x1be>
 80055ac:	e115      	b.n	80057da <__aeabi_dsub+0x3ea>
 80055ae:	4642      	mov	r2, r8
 80055b0:	4663      	mov	r3, ip
 80055b2:	4313      	orrs	r3, r2
 80055b4:	2200      	movs	r2, #0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <__aeabi_dsub+0x1ce>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2201      	movs	r2, #1
 80055be:	1852      	adds	r2, r2, r1
 80055c0:	191b      	adds	r3, r3, r4
 80055c2:	428a      	cmp	r2, r1
 80055c4:	41a4      	sbcs	r4, r4
 80055c6:	4261      	negs	r1, r4
 80055c8:	185b      	adds	r3, r3, r1
 80055ca:	1c14      	adds	r4, r2, #0
 80055cc:	1c05      	adds	r5, r0, #0
 80055ce:	0218      	lsls	r0, r3, #8
 80055d0:	d53a      	bpl.n	8005648 <__aeabi_dsub+0x258>
 80055d2:	485d      	ldr	r0, [pc, #372]	; (8005748 <__aeabi_dsub+0x358>)
 80055d4:	1c6a      	adds	r2, r5, #1
 80055d6:	4282      	cmp	r2, r0
 80055d8:	d100      	bne.n	80055dc <__aeabi_dsub+0x1ec>
 80055da:	e177      	b.n	80058cc <__aeabi_dsub+0x4dc>
 80055dc:	4f5b      	ldr	r7, [pc, #364]	; (800574c <__aeabi_dsub+0x35c>)
 80055de:	2001      	movs	r0, #1
 80055e0:	4020      	ands	r0, r4
 80055e2:	403b      	ands	r3, r7
 80055e4:	0861      	lsrs	r1, r4, #1
 80055e6:	1c04      	adds	r4, r0, #0
 80055e8:	07df      	lsls	r7, r3, #31
 80055ea:	430c      	orrs	r4, r1
 80055ec:	433c      	orrs	r4, r7
 80055ee:	085b      	lsrs	r3, r3, #1
 80055f0:	1caf      	adds	r7, r5, #2
 80055f2:	1c15      	adds	r5, r2, #0
 80055f4:	e793      	b.n	800551e <__aeabi_dsub+0x12e>
 80055f6:	4663      	mov	r3, ip
 80055f8:	433b      	orrs	r3, r7
 80055fa:	d000      	beq.n	80055fe <__aeabi_dsub+0x20e>
 80055fc:	e71d      	b.n	800543a <__aeabi_dsub+0x4a>
 80055fe:	e71a      	b.n	8005436 <__aeabi_dsub+0x46>
 8005600:	1c23      	adds	r3, r4, #0
 8005602:	1c0c      	adds	r4, r1, #0
 8005604:	210f      	movs	r1, #15
 8005606:	1c47      	adds	r7, r0, #1
 8005608:	1c05      	adds	r5, r0, #0
 800560a:	4021      	ands	r1, r4
 800560c:	2904      	cmp	r1, #4
 800560e:	d000      	beq.n	8005612 <__aeabi_dsub+0x222>
 8005610:	e78a      	b.n	8005528 <__aeabi_dsub+0x138>
 8005612:	2201      	movs	r2, #1
 8005614:	4016      	ands	r6, r2
 8005616:	1c22      	adds	r2, r4, #0
 8005618:	e78d      	b.n	8005536 <__aeabi_dsub+0x146>
 800561a:	4662      	mov	r2, ip
 800561c:	4645      	mov	r5, r8
 800561e:	432a      	orrs	r2, r5
 8005620:	d0ee      	beq.n	8005600 <__aeabi_dsub+0x210>
 8005622:	3b01      	subs	r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d103      	bne.n	8005630 <__aeabi_dsub+0x240>
 8005628:	4663      	mov	r3, ip
 800562a:	186a      	adds	r2, r5, r1
 800562c:	191b      	adds	r3, r3, r4
 800562e:	e7c8      	b.n	80055c2 <__aeabi_dsub+0x1d2>
 8005630:	4a45      	ldr	r2, [pc, #276]	; (8005748 <__aeabi_dsub+0x358>)
 8005632:	4290      	cmp	r0, r2
 8005634:	d1b8      	bne.n	80055a8 <__aeabi_dsub+0x1b8>
 8005636:	1c23      	adds	r3, r4, #0
 8005638:	1c0c      	adds	r4, r1, #0
 800563a:	2180      	movs	r1, #128	; 0x80
 800563c:	010f      	lsls	r7, r1, #4
 800563e:	1c05      	adds	r5, r0, #0
 8005640:	e76d      	b.n	800551e <__aeabi_dsub+0x12e>
 8005642:	4b42      	ldr	r3, [pc, #264]	; (800574c <__aeabi_dsub+0x35c>)
 8005644:	1aad      	subs	r5, r5, r2
 8005646:	403b      	ands	r3, r7
 8005648:	1c6f      	adds	r7, r5, #1
 800564a:	e768      	b.n	800551e <__aeabi_dsub+0x12e>
 800564c:	1c14      	adds	r4, r2, #0
 800564e:	431c      	orrs	r4, r3
 8005650:	d100      	bne.n	8005654 <__aeabi_dsub+0x264>
 8005652:	e23b      	b.n	8005acc <__aeabi_dsub+0x6dc>
 8005654:	2d00      	cmp	r5, #0
 8005656:	d03e      	beq.n	80056d6 <__aeabi_dsub+0x2e6>
 8005658:	2080      	movs	r0, #128	; 0x80
 800565a:	0307      	lsls	r7, r0, #12
 800565c:	433b      	orrs	r3, r7
 800565e:	e77d      	b.n	800555c <__aeabi_dsub+0x16c>
 8005660:	2b00      	cmp	r3, #0
 8005662:	d000      	beq.n	8005666 <__aeabi_dsub+0x276>
 8005664:	e089      	b.n	800577a <__aeabi_dsub+0x38a>
 8005666:	1c47      	adds	r7, r0, #1
 8005668:	057b      	lsls	r3, r7, #21
 800566a:	0d5d      	lsrs	r5, r3, #21
 800566c:	2d01      	cmp	r5, #1
 800566e:	dc00      	bgt.n	8005672 <__aeabi_dsub+0x282>
 8005670:	e0f0      	b.n	8005854 <__aeabi_dsub+0x464>
 8005672:	4643      	mov	r3, r8
 8005674:	1acb      	subs	r3, r1, r3
 8005676:	4667      	mov	r7, ip
 8005678:	4299      	cmp	r1, r3
 800567a:	41ad      	sbcs	r5, r5
 800567c:	1be7      	subs	r7, r4, r7
 800567e:	426d      	negs	r5, r5
 8005680:	1b7f      	subs	r7, r7, r5
 8005682:	023d      	lsls	r5, r7, #8
 8005684:	d400      	bmi.n	8005688 <__aeabi_dsub+0x298>
 8005686:	e09f      	b.n	80057c8 <__aeabi_dsub+0x3d8>
 8005688:	4643      	mov	r3, r8
 800568a:	1a5e      	subs	r6, r3, r1
 800568c:	45b0      	cmp	r8, r6
 800568e:	41ad      	sbcs	r5, r5
 8005690:	4667      	mov	r7, ip
 8005692:	1b3c      	subs	r4, r7, r4
 8005694:	4269      	negs	r1, r5
 8005696:	1a67      	subs	r7, r4, r1
 8005698:	1c05      	adds	r5, r0, #0
 800569a:	1c34      	adds	r4, r6, #0
 800569c:	1c16      	adds	r6, r2, #0
 800569e:	e715      	b.n	80054cc <__aeabi_dsub+0xdc>
 80056a0:	2300      	movs	r3, #0
 80056a2:	2200      	movs	r2, #0
 80056a4:	e75e      	b.n	8005564 <__aeabi_dsub+0x174>
 80056a6:	1c20      	adds	r0, r4, #0
 80056a8:	f000 fc0e 	bl	8005ec8 <__clzsi2>
 80056ac:	3020      	adds	r0, #32
 80056ae:	1c02      	adds	r2, r0, #0
 80056b0:	3a08      	subs	r2, #8
 80056b2:	2a1f      	cmp	r2, #31
 80056b4:	dc00      	bgt.n	80056b8 <__aeabi_dsub+0x2c8>
 80056b6:	e714      	b.n	80054e2 <__aeabi_dsub+0xf2>
 80056b8:	1c27      	adds	r7, r4, #0
 80056ba:	3828      	subs	r0, #40	; 0x28
 80056bc:	4087      	lsls	r7, r0
 80056be:	2400      	movs	r4, #0
 80056c0:	e716      	b.n	80054f0 <__aeabi_dsub+0x100>
 80056c2:	4665      	mov	r5, ip
 80056c4:	4647      	mov	r7, r8
 80056c6:	433d      	orrs	r5, r7
 80056c8:	2300      	movs	r3, #0
 80056ca:	2200      	movs	r2, #0
 80056cc:	2d00      	cmp	r5, #0
 80056ce:	d100      	bne.n	80056d2 <__aeabi_dsub+0x2e2>
 80056d0:	e6ef      	b.n	80054b2 <__aeabi_dsub+0xc2>
 80056d2:	2201      	movs	r2, #1
 80056d4:	e6ed      	b.n	80054b2 <__aeabi_dsub+0xc2>
 80056d6:	031d      	lsls	r5, r3, #12
 80056d8:	0b2b      	lsrs	r3, r5, #12
 80056da:	2700      	movs	r7, #0
 80056dc:	e742      	b.n	8005564 <__aeabi_dsub+0x174>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d000      	beq.n	80056e4 <__aeabi_dsub+0x2f4>
 80056e2:	e0da      	b.n	800589a <__aeabi_dsub+0x4aa>
 80056e4:	1c45      	adds	r5, r0, #1
 80056e6:	056b      	lsls	r3, r5, #21
 80056e8:	0d5f      	lsrs	r7, r3, #21
 80056ea:	2f01      	cmp	r7, #1
 80056ec:	dc00      	bgt.n	80056f0 <__aeabi_dsub+0x300>
 80056ee:	e094      	b.n	800581a <__aeabi_dsub+0x42a>
 80056f0:	4f15      	ldr	r7, [pc, #84]	; (8005748 <__aeabi_dsub+0x358>)
 80056f2:	42bd      	cmp	r5, r7
 80056f4:	d100      	bne.n	80056f8 <__aeabi_dsub+0x308>
 80056f6:	e108      	b.n	800590a <__aeabi_dsub+0x51a>
 80056f8:	4642      	mov	r2, r8
 80056fa:	1852      	adds	r2, r2, r1
 80056fc:	4663      	mov	r3, ip
 80056fe:	428a      	cmp	r2, r1
 8005700:	4189      	sbcs	r1, r1
 8005702:	191c      	adds	r4, r3, r4
 8005704:	424f      	negs	r7, r1
 8005706:	19e1      	adds	r1, r4, r7
 8005708:	0853      	lsrs	r3, r2, #1
 800570a:	07cc      	lsls	r4, r1, #31
 800570c:	431c      	orrs	r4, r3
 800570e:	1c87      	adds	r7, r0, #2
 8005710:	084b      	lsrs	r3, r1, #1
 8005712:	e704      	b.n	800551e <__aeabi_dsub+0x12e>
 8005714:	4d0c      	ldr	r5, [pc, #48]	; (8005748 <__aeabi_dsub+0x358>)
 8005716:	42a8      	cmp	r0, r5
 8005718:	d000      	beq.n	800571c <__aeabi_dsub+0x32c>
 800571a:	e6b4      	b.n	8005486 <__aeabi_dsub+0x96>
 800571c:	e78b      	b.n	8005636 <__aeabi_dsub+0x246>
 800571e:	1c2a      	adds	r2, r5, #0
 8005720:	3a1f      	subs	r2, #31
 8005722:	1c38      	adds	r0, r7, #0
 8005724:	40d0      	lsrs	r0, r2
 8005726:	1c01      	adds	r1, r0, #0
 8005728:	2200      	movs	r2, #0
 800572a:	2b20      	cmp	r3, #32
 800572c:	d003      	beq.n	8005736 <__aeabi_dsub+0x346>
 800572e:	203f      	movs	r0, #63	; 0x3f
 8005730:	1b43      	subs	r3, r0, r5
 8005732:	1c3a      	adds	r2, r7, #0
 8005734:	409a      	lsls	r2, r3
 8005736:	4314      	orrs	r4, r2
 8005738:	1e62      	subs	r2, r4, #1
 800573a:	4194      	sbcs	r4, r2
 800573c:	430c      	orrs	r4, r1
 800573e:	2701      	movs	r7, #1
 8005740:	2300      	movs	r3, #0
 8005742:	2500      	movs	r5, #0
 8005744:	e6eb      	b.n	800551e <__aeabi_dsub+0x12e>
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	000007ff 	.word	0x000007ff
 800574c:	ff7fffff 	.word	0xff7fffff
 8005750:	800fffff 	.word	0x800fffff
 8005754:	1c1f      	adds	r7, r3, #0
 8005756:	3f20      	subs	r7, #32
 8005758:	4665      	mov	r5, ip
 800575a:	40fd      	lsrs	r5, r7
 800575c:	1c2f      	adds	r7, r5, #0
 800575e:	2500      	movs	r5, #0
 8005760:	2b20      	cmp	r3, #32
 8005762:	d003      	beq.n	800576c <__aeabi_dsub+0x37c>
 8005764:	2240      	movs	r2, #64	; 0x40
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	4665      	mov	r5, ip
 800576a:	409d      	lsls	r5, r3
 800576c:	4642      	mov	r2, r8
 800576e:	432a      	orrs	r2, r5
 8005770:	1e55      	subs	r5, r2, #1
 8005772:	41aa      	sbcs	r2, r5
 8005774:	433a      	orrs	r2, r7
 8005776:	2300      	movs	r3, #0
 8005778:	e69b      	b.n	80054b2 <__aeabi_dsub+0xc2>
 800577a:	425b      	negs	r3, r3
 800577c:	2800      	cmp	r0, #0
 800577e:	d041      	beq.n	8005804 <__aeabi_dsub+0x414>
 8005780:	48c8      	ldr	r0, [pc, #800]	; (8005aa4 <__aeabi_dsub+0x6b4>)
 8005782:	4285      	cmp	r5, r0
 8005784:	d100      	bne.n	8005788 <__aeabi_dsub+0x398>
 8005786:	e127      	b.n	80059d8 <__aeabi_dsub+0x5e8>
 8005788:	2780      	movs	r7, #128	; 0x80
 800578a:	043e      	lsls	r6, r7, #16
 800578c:	4334      	orrs	r4, r6
 800578e:	2b38      	cmp	r3, #56	; 0x38
 8005790:	dd00      	ble.n	8005794 <__aeabi_dsub+0x3a4>
 8005792:	e0b2      	b.n	80058fa <__aeabi_dsub+0x50a>
 8005794:	2b1f      	cmp	r3, #31
 8005796:	dd00      	ble.n	800579a <__aeabi_dsub+0x3aa>
 8005798:	e151      	b.n	8005a3e <__aeabi_dsub+0x64e>
 800579a:	2620      	movs	r6, #32
 800579c:	1af0      	subs	r0, r6, r3
 800579e:	1c27      	adds	r7, r4, #0
 80057a0:	1c0e      	adds	r6, r1, #0
 80057a2:	4087      	lsls	r7, r0
 80057a4:	40de      	lsrs	r6, r3
 80057a6:	4081      	lsls	r1, r0
 80057a8:	433e      	orrs	r6, r7
 80057aa:	1e48      	subs	r0, r1, #1
 80057ac:	4181      	sbcs	r1, r0
 80057ae:	40dc      	lsrs	r4, r3
 80057b0:	4331      	orrs	r1, r6
 80057b2:	1c23      	adds	r3, r4, #0
 80057b4:	4644      	mov	r4, r8
 80057b6:	1a64      	subs	r4, r4, r1
 80057b8:	4660      	mov	r0, ip
 80057ba:	45a0      	cmp	r8, r4
 80057bc:	41bf      	sbcs	r7, r7
 80057be:	1ac6      	subs	r6, r0, r3
 80057c0:	4279      	negs	r1, r7
 80057c2:	1a73      	subs	r3, r6, r1
 80057c4:	1c16      	adds	r6, r2, #0
 80057c6:	e67c      	b.n	80054c2 <__aeabi_dsub+0xd2>
 80057c8:	1c3a      	adds	r2, r7, #0
 80057ca:	431a      	orrs	r2, r3
 80057cc:	d122      	bne.n	8005814 <__aeabi_dsub+0x424>
 80057ce:	2600      	movs	r6, #0
 80057d0:	2701      	movs	r7, #1
 80057d2:	2300      	movs	r3, #0
 80057d4:	2204      	movs	r2, #4
 80057d6:	2500      	movs	r5, #0
 80057d8:	e6ad      	b.n	8005536 <__aeabi_dsub+0x146>
 80057da:	2b1f      	cmp	r3, #31
 80057dc:	dc4a      	bgt.n	8005874 <__aeabi_dsub+0x484>
 80057de:	2520      	movs	r5, #32
 80057e0:	1aed      	subs	r5, r5, r3
 80057e2:	4662      	mov	r2, ip
 80057e4:	40aa      	lsls	r2, r5
 80057e6:	4691      	mov	r9, r2
 80057e8:	4642      	mov	r2, r8
 80057ea:	40da      	lsrs	r2, r3
 80057ec:	464f      	mov	r7, r9
 80057ee:	433a      	orrs	r2, r7
 80057f0:	4647      	mov	r7, r8
 80057f2:	40af      	lsls	r7, r5
 80057f4:	1c3d      	adds	r5, r7, #0
 80057f6:	1e6f      	subs	r7, r5, #1
 80057f8:	41bd      	sbcs	r5, r7
 80057fa:	4667      	mov	r7, ip
 80057fc:	40df      	lsrs	r7, r3
 80057fe:	432a      	orrs	r2, r5
 8005800:	1c3b      	adds	r3, r7, #0
 8005802:	e6dc      	b.n	80055be <__aeabi_dsub+0x1ce>
 8005804:	1c26      	adds	r6, r4, #0
 8005806:	430e      	orrs	r6, r1
 8005808:	d169      	bne.n	80058de <__aeabi_dsub+0x4ee>
 800580a:	1c6f      	adds	r7, r5, #1
 800580c:	4663      	mov	r3, ip
 800580e:	4644      	mov	r4, r8
 8005810:	1c16      	adds	r6, r2, #0
 8005812:	e684      	b.n	800551e <__aeabi_dsub+0x12e>
 8005814:	1c1c      	adds	r4, r3, #0
 8005816:	1c05      	adds	r5, r0, #0
 8005818:	e658      	b.n	80054cc <__aeabi_dsub+0xdc>
 800581a:	1c23      	adds	r3, r4, #0
 800581c:	430b      	orrs	r3, r1
 800581e:	2800      	cmp	r0, #0
 8005820:	d000      	beq.n	8005824 <__aeabi_dsub+0x434>
 8005822:	e0df      	b.n	80059e4 <__aeabi_dsub+0x5f4>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d100      	bne.n	800582a <__aeabi_dsub+0x43a>
 8005828:	e142      	b.n	8005ab0 <__aeabi_dsub+0x6c0>
 800582a:	4665      	mov	r5, ip
 800582c:	4642      	mov	r2, r8
 800582e:	4315      	orrs	r5, r2
 8005830:	d100      	bne.n	8005834 <__aeabi_dsub+0x444>
 8005832:	e0f9      	b.n	8005a28 <__aeabi_dsub+0x638>
 8005834:	1852      	adds	r2, r2, r1
 8005836:	4667      	mov	r7, ip
 8005838:	1938      	adds	r0, r7, r4
 800583a:	428a      	cmp	r2, r1
 800583c:	41a4      	sbcs	r4, r4
 800583e:	4261      	negs	r1, r4
 8005840:	1843      	adds	r3, r0, r1
 8005842:	021f      	lsls	r7, r3, #8
 8005844:	d400      	bmi.n	8005848 <__aeabi_dsub+0x458>
 8005846:	e162      	b.n	8005b0e <__aeabi_dsub+0x71e>
 8005848:	4d97      	ldr	r5, [pc, #604]	; (8005aa8 <__aeabi_dsub+0x6b8>)
 800584a:	1c14      	adds	r4, r2, #0
 800584c:	402b      	ands	r3, r5
 800584e:	2702      	movs	r7, #2
 8005850:	2501      	movs	r5, #1
 8005852:	e664      	b.n	800551e <__aeabi_dsub+0x12e>
 8005854:	1c23      	adds	r3, r4, #0
 8005856:	430b      	orrs	r3, r1
 8005858:	2800      	cmp	r0, #0
 800585a:	d129      	bne.n	80058b0 <__aeabi_dsub+0x4c0>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d000      	beq.n	8005862 <__aeabi_dsub+0x472>
 8005860:	e09b      	b.n	800599a <__aeabi_dsub+0x5aa>
 8005862:	4666      	mov	r6, ip
 8005864:	4644      	mov	r4, r8
 8005866:	4326      	orrs	r6, r4
 8005868:	d0b1      	beq.n	80057ce <__aeabi_dsub+0x3de>
 800586a:	4663      	mov	r3, ip
 800586c:	1c16      	adds	r6, r2, #0
 800586e:	2701      	movs	r7, #1
 8005870:	2500      	movs	r5, #0
 8005872:	e654      	b.n	800551e <__aeabi_dsub+0x12e>
 8005874:	1c1a      	adds	r2, r3, #0
 8005876:	3a20      	subs	r2, #32
 8005878:	4667      	mov	r7, ip
 800587a:	40d7      	lsrs	r7, r2
 800587c:	1c3a      	adds	r2, r7, #0
 800587e:	2500      	movs	r5, #0
 8005880:	2b20      	cmp	r3, #32
 8005882:	d003      	beq.n	800588c <__aeabi_dsub+0x49c>
 8005884:	2540      	movs	r5, #64	; 0x40
 8005886:	1aeb      	subs	r3, r5, r3
 8005888:	4665      	mov	r5, ip
 800588a:	409d      	lsls	r5, r3
 800588c:	4647      	mov	r7, r8
 800588e:	433d      	orrs	r5, r7
 8005890:	1e6b      	subs	r3, r5, #1
 8005892:	419d      	sbcs	r5, r3
 8005894:	432a      	orrs	r2, r5
 8005896:	2300      	movs	r3, #0
 8005898:	e691      	b.n	80055be <__aeabi_dsub+0x1ce>
 800589a:	425b      	negs	r3, r3
 800589c:	2800      	cmp	r0, #0
 800589e:	d13c      	bne.n	800591a <__aeabi_dsub+0x52a>
 80058a0:	1c20      	adds	r0, r4, #0
 80058a2:	4308      	orrs	r0, r1
 80058a4:	d000      	beq.n	80058a8 <__aeabi_dsub+0x4b8>
 80058a6:	e0dc      	b.n	8005a62 <__aeabi_dsub+0x672>
 80058a8:	1c6f      	adds	r7, r5, #1
 80058aa:	4663      	mov	r3, ip
 80058ac:	4644      	mov	r4, r8
 80058ae:	e636      	b.n	800551e <__aeabi_dsub+0x12e>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d154      	bne.n	800595e <__aeabi_dsub+0x56e>
 80058b4:	4663      	mov	r3, ip
 80058b6:	4641      	mov	r1, r8
 80058b8:	430b      	orrs	r3, r1
 80058ba:	d100      	bne.n	80058be <__aeabi_dsub+0x4ce>
 80058bc:	e0dc      	b.n	8005a78 <__aeabi_dsub+0x688>
 80058be:	2080      	movs	r0, #128	; 0x80
 80058c0:	4663      	mov	r3, ip
 80058c2:	4644      	mov	r4, r8
 80058c4:	1c16      	adds	r6, r2, #0
 80058c6:	0107      	lsls	r7, r0, #4
 80058c8:	4d76      	ldr	r5, [pc, #472]	; (8005aa4 <__aeabi_dsub+0x6b4>)
 80058ca:	e628      	b.n	800551e <__aeabi_dsub+0x12e>
 80058cc:	4655      	mov	r5, sl
 80058ce:	2601      	movs	r6, #1
 80058d0:	2480      	movs	r4, #128	; 0x80
 80058d2:	402e      	ands	r6, r5
 80058d4:	0127      	lsls	r7, r4, #4
 80058d6:	1c15      	adds	r5, r2, #0
 80058d8:	2300      	movs	r3, #0
 80058da:	2204      	movs	r2, #4
 80058dc:	e62b      	b.n	8005536 <__aeabi_dsub+0x146>
 80058de:	3b01      	subs	r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d175      	bne.n	80059d0 <__aeabi_dsub+0x5e0>
 80058e4:	4646      	mov	r6, r8
 80058e6:	1a77      	subs	r7, r6, r1
 80058e8:	4663      	mov	r3, ip
 80058ea:	45b8      	cmp	r8, r7
 80058ec:	4189      	sbcs	r1, r1
 80058ee:	1b1c      	subs	r4, r3, r4
 80058f0:	4248      	negs	r0, r1
 80058f2:	1a23      	subs	r3, r4, r0
 80058f4:	1c16      	adds	r6, r2, #0
 80058f6:	1c3c      	adds	r4, r7, #0
 80058f8:	e5e3      	b.n	80054c2 <__aeabi_dsub+0xd2>
 80058fa:	430c      	orrs	r4, r1
 80058fc:	2300      	movs	r3, #0
 80058fe:	2100      	movs	r1, #0
 8005900:	2c00      	cmp	r4, #0
 8005902:	d100      	bne.n	8005906 <__aeabi_dsub+0x516>
 8005904:	e756      	b.n	80057b4 <__aeabi_dsub+0x3c4>
 8005906:	2101      	movs	r1, #1
 8005908:	e754      	b.n	80057b4 <__aeabi_dsub+0x3c4>
 800590a:	4653      	mov	r3, sl
 800590c:	2280      	movs	r2, #128	; 0x80
 800590e:	2601      	movs	r6, #1
 8005910:	401e      	ands	r6, r3
 8005912:	0117      	lsls	r7, r2, #4
 8005914:	2300      	movs	r3, #0
 8005916:	2204      	movs	r2, #4
 8005918:	e60d      	b.n	8005536 <__aeabi_dsub+0x146>
 800591a:	4862      	ldr	r0, [pc, #392]	; (8005aa4 <__aeabi_dsub+0x6b4>)
 800591c:	4285      	cmp	r5, r0
 800591e:	d100      	bne.n	8005922 <__aeabi_dsub+0x532>
 8005920:	e0cf      	b.n	8005ac2 <__aeabi_dsub+0x6d2>
 8005922:	2280      	movs	r2, #128	; 0x80
 8005924:	0417      	lsls	r7, r2, #16
 8005926:	433c      	orrs	r4, r7
 8005928:	2b38      	cmp	r3, #56	; 0x38
 800592a:	dd00      	ble.n	800592e <__aeabi_dsub+0x53e>
 800592c:	e0ac      	b.n	8005a88 <__aeabi_dsub+0x698>
 800592e:	2b1f      	cmp	r3, #31
 8005930:	dd00      	ble.n	8005934 <__aeabi_dsub+0x544>
 8005932:	e0d8      	b.n	8005ae6 <__aeabi_dsub+0x6f6>
 8005934:	2220      	movs	r2, #32
 8005936:	1ad0      	subs	r0, r2, r3
 8005938:	1c27      	adds	r7, r4, #0
 800593a:	1c0a      	adds	r2, r1, #0
 800593c:	4087      	lsls	r7, r0
 800593e:	40da      	lsrs	r2, r3
 8005940:	4081      	lsls	r1, r0
 8005942:	433a      	orrs	r2, r7
 8005944:	1e48      	subs	r0, r1, #1
 8005946:	4181      	sbcs	r1, r0
 8005948:	40dc      	lsrs	r4, r3
 800594a:	430a      	orrs	r2, r1
 800594c:	1c23      	adds	r3, r4, #0
 800594e:	4644      	mov	r4, r8
 8005950:	1914      	adds	r4, r2, r4
 8005952:	4544      	cmp	r4, r8
 8005954:	4192      	sbcs	r2, r2
 8005956:	4463      	add	r3, ip
 8005958:	4251      	negs	r1, r2
 800595a:	185b      	adds	r3, r3, r1
 800595c:	e637      	b.n	80055ce <__aeabi_dsub+0x1de>
 800595e:	4667      	mov	r7, ip
 8005960:	4645      	mov	r5, r8
 8005962:	432f      	orrs	r7, r5
 8005964:	d065      	beq.n	8005a32 <__aeabi_dsub+0x642>
 8005966:	0763      	lsls	r3, r4, #29
 8005968:	08c9      	lsrs	r1, r1, #3
 800596a:	4319      	orrs	r1, r3
 800596c:	08e3      	lsrs	r3, r4, #3
 800596e:	2480      	movs	r4, #128	; 0x80
 8005970:	0320      	lsls	r0, r4, #12
 8005972:	4203      	tst	r3, r0
 8005974:	d009      	beq.n	800598a <__aeabi_dsub+0x59a>
 8005976:	4667      	mov	r7, ip
 8005978:	08fd      	lsrs	r5, r7, #3
 800597a:	4205      	tst	r5, r0
 800597c:	d105      	bne.n	800598a <__aeabi_dsub+0x59a>
 800597e:	4641      	mov	r1, r8
 8005980:	08ce      	lsrs	r6, r1, #3
 8005982:	0779      	lsls	r1, r7, #29
 8005984:	4331      	orrs	r1, r6
 8005986:	1c2b      	adds	r3, r5, #0
 8005988:	1c16      	adds	r6, r2, #0
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	0f48      	lsrs	r0, r1, #29
 800598e:	2280      	movs	r2, #128	; 0x80
 8005990:	4303      	orrs	r3, r0
 8005992:	00cc      	lsls	r4, r1, #3
 8005994:	0117      	lsls	r7, r2, #4
 8005996:	4d43      	ldr	r5, [pc, #268]	; (8005aa4 <__aeabi_dsub+0x6b4>)
 8005998:	e5c1      	b.n	800551e <__aeabi_dsub+0x12e>
 800599a:	4660      	mov	r0, ip
 800599c:	4645      	mov	r5, r8
 800599e:	4328      	orrs	r0, r5
 80059a0:	d042      	beq.n	8005a28 <__aeabi_dsub+0x638>
 80059a2:	1b48      	subs	r0, r1, r5
 80059a4:	4663      	mov	r3, ip
 80059a6:	4281      	cmp	r1, r0
 80059a8:	41bf      	sbcs	r7, r7
 80059aa:	1ae3      	subs	r3, r4, r3
 80059ac:	427d      	negs	r5, r7
 80059ae:	1b5b      	subs	r3, r3, r5
 80059b0:	021d      	lsls	r5, r3, #8
 80059b2:	d400      	bmi.n	80059b6 <__aeabi_dsub+0x5c6>
 80059b4:	e08f      	b.n	8005ad6 <__aeabi_dsub+0x6e6>
 80059b6:	4647      	mov	r7, r8
 80059b8:	1a79      	subs	r1, r7, r1
 80059ba:	4665      	mov	r5, ip
 80059bc:	4588      	cmp	r8, r1
 80059be:	4180      	sbcs	r0, r0
 80059c0:	1b2c      	subs	r4, r5, r4
 80059c2:	4246      	negs	r6, r0
 80059c4:	1ba3      	subs	r3, r4, r6
 80059c6:	2701      	movs	r7, #1
 80059c8:	1c0c      	adds	r4, r1, #0
 80059ca:	1c16      	adds	r6, r2, #0
 80059cc:	2500      	movs	r5, #0
 80059ce:	e5a6      	b.n	800551e <__aeabi_dsub+0x12e>
 80059d0:	4f34      	ldr	r7, [pc, #208]	; (8005aa4 <__aeabi_dsub+0x6b4>)
 80059d2:	42bd      	cmp	r5, r7
 80059d4:	d000      	beq.n	80059d8 <__aeabi_dsub+0x5e8>
 80059d6:	e6da      	b.n	800578e <__aeabi_dsub+0x39e>
 80059d8:	1c16      	adds	r6, r2, #0
 80059da:	2280      	movs	r2, #128	; 0x80
 80059dc:	4663      	mov	r3, ip
 80059de:	4644      	mov	r4, r8
 80059e0:	0117      	lsls	r7, r2, #4
 80059e2:	e59c      	b.n	800551e <__aeabi_dsub+0x12e>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d057      	beq.n	8005a98 <__aeabi_dsub+0x6a8>
 80059e8:	4662      	mov	r2, ip
 80059ea:	4643      	mov	r3, r8
 80059ec:	431a      	orrs	r2, r3
 80059ee:	d020      	beq.n	8005a32 <__aeabi_dsub+0x642>
 80059f0:	2080      	movs	r0, #128	; 0x80
 80059f2:	08c9      	lsrs	r1, r1, #3
 80059f4:	0767      	lsls	r7, r4, #29
 80059f6:	08e3      	lsrs	r3, r4, #3
 80059f8:	0300      	lsls	r0, r0, #12
 80059fa:	4339      	orrs	r1, r7
 80059fc:	4203      	tst	r3, r0
 80059fe:	d100      	bne.n	8005a02 <__aeabi_dsub+0x612>
 8005a00:	e083      	b.n	8005b0a <__aeabi_dsub+0x71a>
 8005a02:	4664      	mov	r4, ip
 8005a04:	08e2      	lsrs	r2, r4, #3
 8005a06:	4202      	tst	r2, r0
 8005a08:	d000      	beq.n	8005a0c <__aeabi_dsub+0x61c>
 8005a0a:	e07e      	b.n	8005b0a <__aeabi_dsub+0x71a>
 8005a0c:	4643      	mov	r3, r8
 8005a0e:	4665      	mov	r5, ip
 8005a10:	08dc      	lsrs	r4, r3, #3
 8005a12:	0769      	lsls	r1, r5, #29
 8005a14:	1c13      	adds	r3, r2, #0
 8005a16:	430c      	orrs	r4, r1
 8005a18:	0f60      	lsrs	r0, r4, #29
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	4303      	orrs	r3, r0
 8005a20:	00e4      	lsls	r4, r4, #3
 8005a22:	0117      	lsls	r7, r2, #4
 8005a24:	4d1f      	ldr	r5, [pc, #124]	; (8005aa4 <__aeabi_dsub+0x6b4>)
 8005a26:	e57a      	b.n	800551e <__aeabi_dsub+0x12e>
 8005a28:	1c23      	adds	r3, r4, #0
 8005a2a:	2701      	movs	r7, #1
 8005a2c:	1c0c      	adds	r4, r1, #0
 8005a2e:	2500      	movs	r5, #0
 8005a30:	e575      	b.n	800551e <__aeabi_dsub+0x12e>
 8005a32:	2080      	movs	r0, #128	; 0x80
 8005a34:	1c23      	adds	r3, r4, #0
 8005a36:	0107      	lsls	r7, r0, #4
 8005a38:	1c0c      	adds	r4, r1, #0
 8005a3a:	4d1a      	ldr	r5, [pc, #104]	; (8005aa4 <__aeabi_dsub+0x6b4>)
 8005a3c:	e56f      	b.n	800551e <__aeabi_dsub+0x12e>
 8005a3e:	1c1f      	adds	r7, r3, #0
 8005a40:	3f20      	subs	r7, #32
 8005a42:	1c20      	adds	r0, r4, #0
 8005a44:	40f8      	lsrs	r0, r7
 8005a46:	1c06      	adds	r6, r0, #0
 8005a48:	2000      	movs	r0, #0
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d003      	beq.n	8005a56 <__aeabi_dsub+0x666>
 8005a4e:	2040      	movs	r0, #64	; 0x40
 8005a50:	1ac3      	subs	r3, r0, r3
 8005a52:	1c20      	adds	r0, r4, #0
 8005a54:	4098      	lsls	r0, r3
 8005a56:	4301      	orrs	r1, r0
 8005a58:	1e48      	subs	r0, r1, #1
 8005a5a:	4181      	sbcs	r1, r0
 8005a5c:	4331      	orrs	r1, r6
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e6a8      	b.n	80057b4 <__aeabi_dsub+0x3c4>
 8005a62:	3b01      	subs	r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d128      	bne.n	8005aba <__aeabi_dsub+0x6ca>
 8005a68:	4441      	add	r1, r8
 8005a6a:	4541      	cmp	r1, r8
 8005a6c:	41bf      	sbcs	r7, r7
 8005a6e:	4464      	add	r4, ip
 8005a70:	427b      	negs	r3, r7
 8005a72:	18e3      	adds	r3, r4, r3
 8005a74:	1c0c      	adds	r4, r1, #0
 8005a76:	e5aa      	b.n	80055ce <__aeabi_dsub+0x1de>
 8005a78:	2504      	movs	r5, #4
 8005a7a:	2780      	movs	r7, #128	; 0x80
 8005a7c:	426a      	negs	r2, r5
 8005a7e:	2600      	movs	r6, #0
 8005a80:	013f      	lsls	r7, r7, #4
 8005a82:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <__aeabi_dsub+0x6bc>)
 8005a84:	4d07      	ldr	r5, [pc, #28]	; (8005aa4 <__aeabi_dsub+0x6b4>)
 8005a86:	e556      	b.n	8005536 <__aeabi_dsub+0x146>
 8005a88:	430c      	orrs	r4, r1
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2c00      	cmp	r4, #0
 8005a90:	d100      	bne.n	8005a94 <__aeabi_dsub+0x6a4>
 8005a92:	e75c      	b.n	800594e <__aeabi_dsub+0x55e>
 8005a94:	2201      	movs	r2, #1
 8005a96:	e75a      	b.n	800594e <__aeabi_dsub+0x55e>
 8005a98:	2580      	movs	r5, #128	; 0x80
 8005a9a:	012f      	lsls	r7, r5, #4
 8005a9c:	4663      	mov	r3, ip
 8005a9e:	4644      	mov	r4, r8
 8005aa0:	4d00      	ldr	r5, [pc, #0]	; (8005aa4 <__aeabi_dsub+0x6b4>)
 8005aa2:	e53c      	b.n	800551e <__aeabi_dsub+0x12e>
 8005aa4:	000007ff 	.word	0x000007ff
 8005aa8:	ff7fffff 	.word	0xff7fffff
 8005aac:	007fffff 	.word	0x007fffff
 8005ab0:	4663      	mov	r3, ip
 8005ab2:	4644      	mov	r4, r8
 8005ab4:	2701      	movs	r7, #1
 8005ab6:	2500      	movs	r5, #0
 8005ab8:	e531      	b.n	800551e <__aeabi_dsub+0x12e>
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <__aeabi_dsub+0x728>)
 8005abc:	4295      	cmp	r5, r2
 8005abe:	d000      	beq.n	8005ac2 <__aeabi_dsub+0x6d2>
 8005ac0:	e732      	b.n	8005928 <__aeabi_dsub+0x538>
 8005ac2:	2780      	movs	r7, #128	; 0x80
 8005ac4:	4663      	mov	r3, ip
 8005ac6:	4644      	mov	r4, r8
 8005ac8:	013f      	lsls	r7, r7, #4
 8005aca:	e528      	b.n	800551e <__aeabi_dsub+0x12e>
 8005acc:	056b      	lsls	r3, r5, #21
 8005ace:	0d5f      	lsrs	r7, r3, #21
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e546      	b.n	8005564 <__aeabi_dsub+0x174>
 8005ad6:	1c1a      	adds	r2, r3, #0
 8005ad8:	4302      	orrs	r2, r0
 8005ada:	d100      	bne.n	8005ade <__aeabi_dsub+0x6ee>
 8005adc:	e677      	b.n	80057ce <__aeabi_dsub+0x3de>
 8005ade:	1c04      	adds	r4, r0, #0
 8005ae0:	2701      	movs	r7, #1
 8005ae2:	2500      	movs	r5, #0
 8005ae4:	e51b      	b.n	800551e <__aeabi_dsub+0x12e>
 8005ae6:	1c1f      	adds	r7, r3, #0
 8005ae8:	3f20      	subs	r7, #32
 8005aea:	1c20      	adds	r0, r4, #0
 8005aec:	40f8      	lsrs	r0, r7
 8005aee:	1c02      	adds	r2, r0, #0
 8005af0:	2000      	movs	r0, #0
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d003      	beq.n	8005afe <__aeabi_dsub+0x70e>
 8005af6:	2040      	movs	r0, #64	; 0x40
 8005af8:	1ac3      	subs	r3, r0, r3
 8005afa:	1c20      	adds	r0, r4, #0
 8005afc:	4098      	lsls	r0, r3
 8005afe:	4301      	orrs	r1, r0
 8005b00:	1e48      	subs	r0, r1, #1
 8005b02:	4181      	sbcs	r1, r0
 8005b04:	430a      	orrs	r2, r1
 8005b06:	2300      	movs	r3, #0
 8005b08:	e721      	b.n	800594e <__aeabi_dsub+0x55e>
 8005b0a:	1c0c      	adds	r4, r1, #0
 8005b0c:	e784      	b.n	8005a18 <__aeabi_dsub+0x628>
 8005b0e:	1c14      	adds	r4, r2, #0
 8005b10:	2701      	movs	r7, #1
 8005b12:	2500      	movs	r5, #0
 8005b14:	e503      	b.n	800551e <__aeabi_dsub+0x12e>
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	000007ff 	.word	0x000007ff

08005b1c <__aeabi_d2iz>:
 8005b1c:	b530      	push	{r4, r5, lr}
 8005b1e:	4a13      	ldr	r2, [pc, #76]	; (8005b6c <__aeabi_d2iz+0x50>)
 8005b20:	004b      	lsls	r3, r1, #1
 8005b22:	1c05      	adds	r5, r0, #0
 8005b24:	0308      	lsls	r0, r1, #12
 8005b26:	0b04      	lsrs	r4, r0, #12
 8005b28:	0d5b      	lsrs	r3, r3, #21
 8005b2a:	0fc9      	lsrs	r1, r1, #31
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	dd11      	ble.n	8005b56 <__aeabi_d2iz+0x3a>
 8005b32:	4a0f      	ldr	r2, [pc, #60]	; (8005b70 <__aeabi_d2iz+0x54>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	dc0f      	bgt.n	8005b58 <__aeabi_d2iz+0x3c>
 8005b38:	2080      	movs	r0, #128	; 0x80
 8005b3a:	0342      	lsls	r2, r0, #13
 8005b3c:	480d      	ldr	r0, [pc, #52]	; (8005b74 <__aeabi_d2iz+0x58>)
 8005b3e:	4314      	orrs	r4, r2
 8005b40:	1ac2      	subs	r2, r0, r3
 8005b42:	2a1f      	cmp	r2, #31
 8005b44:	dd0b      	ble.n	8005b5e <__aeabi_d2iz+0x42>
 8005b46:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <__aeabi_d2iz+0x5c>)
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	40dc      	lsrs	r4, r3
 8005b4c:	1c22      	adds	r2, r4, #0
 8005b4e:	4250      	negs	r0, r2
 8005b50:	2900      	cmp	r1, #0
 8005b52:	d100      	bne.n	8005b56 <__aeabi_d2iz+0x3a>
 8005b54:	1c10      	adds	r0, r2, #0
 8005b56:	bd30      	pop	{r4, r5, pc}
 8005b58:	4c08      	ldr	r4, [pc, #32]	; (8005b7c <__aeabi_d2iz+0x60>)
 8005b5a:	1908      	adds	r0, r1, r4
 8005b5c:	e7fb      	b.n	8005b56 <__aeabi_d2iz+0x3a>
 8005b5e:	4808      	ldr	r0, [pc, #32]	; (8005b80 <__aeabi_d2iz+0x64>)
 8005b60:	40d5      	lsrs	r5, r2
 8005b62:	1c2a      	adds	r2, r5, #0
 8005b64:	181d      	adds	r5, r3, r0
 8005b66:	40ac      	lsls	r4, r5
 8005b68:	4322      	orrs	r2, r4
 8005b6a:	e7f0      	b.n	8005b4e <__aeabi_d2iz+0x32>
 8005b6c:	000003fe 	.word	0x000003fe
 8005b70:	0000041d 	.word	0x0000041d
 8005b74:	00000433 	.word	0x00000433
 8005b78:	00000413 	.word	0x00000413
 8005b7c:	7fffffff 	.word	0x7fffffff
 8005b80:	fffffbed 	.word	0xfffffbed

08005b84 <__aeabi_i2d>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	1e04      	subs	r4, r0, #0
 8005b88:	d02e      	beq.n	8005be8 <__aeabi_i2d+0x64>
 8005b8a:	0fe5      	lsrs	r5, r4, #31
 8005b8c:	d000      	beq.n	8005b90 <__aeabi_i2d+0xc>
 8005b8e:	4264      	negs	r4, r4
 8005b90:	1c20      	adds	r0, r4, #0
 8005b92:	f000 f999 	bl	8005ec8 <__clzsi2>
 8005b96:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <__aeabi_i2d+0x70>)
 8005b98:	1a12      	subs	r2, r2, r0
 8005b9a:	280a      	cmp	r0, #10
 8005b9c:	dd17      	ble.n	8005bce <__aeabi_i2d+0x4a>
 8005b9e:	1c06      	adds	r6, r0, #0
 8005ba0:	3e0b      	subs	r6, #11
 8005ba2:	40b4      	lsls	r4, r6
 8005ba4:	0320      	lsls	r0, r4, #12
 8005ba6:	0554      	lsls	r4, r2, #21
 8005ba8:	0b06      	lsrs	r6, r0, #12
 8005baa:	0d62      	lsrs	r2, r4, #21
 8005bac:	2700      	movs	r7, #0
 8005bae:	2000      	movs	r0, #0
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	0d0b      	lsrs	r3, r1, #20
 8005bb4:	051b      	lsls	r3, r3, #20
 8005bb6:	4c10      	ldr	r4, [pc, #64]	; (8005bf8 <__aeabi_i2d+0x74>)
 8005bb8:	4333      	orrs	r3, r6
 8005bba:	0512      	lsls	r2, r2, #20
 8005bbc:	401c      	ands	r4, r3
 8005bbe:	4314      	orrs	r4, r2
 8005bc0:	0064      	lsls	r4, r4, #1
 8005bc2:	0864      	lsrs	r4, r4, #1
 8005bc4:	07ed      	lsls	r5, r5, #31
 8005bc6:	1c21      	adds	r1, r4, #0
 8005bc8:	1c38      	adds	r0, r7, #0
 8005bca:	4329      	orrs	r1, r5
 8005bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bce:	260b      	movs	r6, #11
 8005bd0:	1a33      	subs	r3, r6, r0
 8005bd2:	1c07      	adds	r7, r0, #0
 8005bd4:	3715      	adds	r7, #21
 8005bd6:	1c21      	adds	r1, r4, #0
 8005bd8:	40dc      	lsrs	r4, r3
 8005bda:	40b9      	lsls	r1, r7
 8005bdc:	0326      	lsls	r6, r4, #12
 8005bde:	0550      	lsls	r0, r2, #21
 8005be0:	1c0f      	adds	r7, r1, #0
 8005be2:	0b36      	lsrs	r6, r6, #12
 8005be4:	0d42      	lsrs	r2, r0, #21
 8005be6:	e7e2      	b.n	8005bae <__aeabi_i2d+0x2a>
 8005be8:	2500      	movs	r5, #0
 8005bea:	2200      	movs	r2, #0
 8005bec:	2600      	movs	r6, #0
 8005bee:	2700      	movs	r7, #0
 8005bf0:	e7dd      	b.n	8005bae <__aeabi_i2d+0x2a>
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	0000041e 	.word	0x0000041e
 8005bf8:	800fffff 	.word	0x800fffff

08005bfc <__aeabi_ui2d>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	1e04      	subs	r4, r0, #0
 8005c00:	d028      	beq.n	8005c54 <__aeabi_ui2d+0x58>
 8005c02:	1c20      	adds	r0, r4, #0
 8005c04:	f000 f960 	bl	8005ec8 <__clzsi2>
 8005c08:	4a14      	ldr	r2, [pc, #80]	; (8005c5c <__aeabi_ui2d+0x60>)
 8005c0a:	1a12      	subs	r2, r2, r0
 8005c0c:	280a      	cmp	r0, #10
 8005c0e:	dd14      	ble.n	8005c3a <__aeabi_ui2d+0x3e>
 8005c10:	1c05      	adds	r5, r0, #0
 8005c12:	3d0b      	subs	r5, #11
 8005c14:	40ac      	lsls	r4, r5
 8005c16:	0320      	lsls	r0, r4, #12
 8005c18:	0554      	lsls	r4, r2, #21
 8005c1a:	0b05      	lsrs	r5, r0, #12
 8005c1c:	0d62      	lsrs	r2, r4, #21
 8005c1e:	2600      	movs	r6, #0
 8005c20:	2000      	movs	r0, #0
 8005c22:	2100      	movs	r1, #0
 8005c24:	0d0b      	lsrs	r3, r1, #20
 8005c26:	051b      	lsls	r3, r3, #20
 8005c28:	4c0d      	ldr	r4, [pc, #52]	; (8005c60 <__aeabi_ui2d+0x64>)
 8005c2a:	432b      	orrs	r3, r5
 8005c2c:	0512      	lsls	r2, r2, #20
 8005c2e:	401c      	ands	r4, r3
 8005c30:	4314      	orrs	r4, r2
 8005c32:	0064      	lsls	r4, r4, #1
 8005c34:	1c30      	adds	r0, r6, #0
 8005c36:	0861      	lsrs	r1, r4, #1
 8005c38:	bd70      	pop	{r4, r5, r6, pc}
 8005c3a:	250b      	movs	r5, #11
 8005c3c:	1a2b      	subs	r3, r5, r0
 8005c3e:	1c06      	adds	r6, r0, #0
 8005c40:	3615      	adds	r6, #21
 8005c42:	1c21      	adds	r1, r4, #0
 8005c44:	40dc      	lsrs	r4, r3
 8005c46:	40b1      	lsls	r1, r6
 8005c48:	0325      	lsls	r5, r4, #12
 8005c4a:	0550      	lsls	r0, r2, #21
 8005c4c:	1c0e      	adds	r6, r1, #0
 8005c4e:	0b2d      	lsrs	r5, r5, #12
 8005c50:	0d42      	lsrs	r2, r0, #21
 8005c52:	e7e5      	b.n	8005c20 <__aeabi_ui2d+0x24>
 8005c54:	2200      	movs	r2, #0
 8005c56:	2500      	movs	r5, #0
 8005c58:	2600      	movs	r6, #0
 8005c5a:	e7e1      	b.n	8005c20 <__aeabi_ui2d+0x24>
 8005c5c:	0000041e 	.word	0x0000041e
 8005c60:	800fffff 	.word	0x800fffff

08005c64 <__aeabi_f2d>:
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	0041      	lsls	r1, r0, #1
 8005c68:	0e09      	lsrs	r1, r1, #24
 8005c6a:	0242      	lsls	r2, r0, #9
 8005c6c:	0fc4      	lsrs	r4, r0, #31
 8005c6e:	1c48      	adds	r0, r1, #1
 8005c70:	b2c3      	uxtb	r3, r0
 8005c72:	0a55      	lsrs	r5, r2, #9
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	dd15      	ble.n	8005ca4 <__aeabi_f2d+0x40>
 8005c78:	26e0      	movs	r6, #224	; 0xe0
 8005c7a:	076b      	lsls	r3, r5, #29
 8005c7c:	00b5      	lsls	r5, r6, #2
 8005c7e:	0b12      	lsrs	r2, r2, #12
 8005c80:	194d      	adds	r5, r1, r5
 8005c82:	2000      	movs	r0, #0
 8005c84:	2100      	movs	r1, #0
 8005c86:	0d0e      	lsrs	r6, r1, #20
 8005c88:	1c18      	adds	r0, r3, #0
 8005c8a:	0536      	lsls	r6, r6, #20
 8005c8c:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <__aeabi_f2d+0x9c>)
 8005c8e:	4332      	orrs	r2, r6
 8005c90:	056d      	lsls	r5, r5, #21
 8005c92:	086d      	lsrs	r5, r5, #1
 8005c94:	4013      	ands	r3, r2
 8005c96:	432b      	orrs	r3, r5
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	07e4      	lsls	r4, r4, #31
 8005c9e:	1c19      	adds	r1, r3, #0
 8005ca0:	4321      	orrs	r1, r4
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	2900      	cmp	r1, #0
 8005ca6:	d116      	bne.n	8005cd6 <__aeabi_f2d+0x72>
 8005ca8:	2d00      	cmp	r5, #0
 8005caa:	d01e      	beq.n	8005cea <__aeabi_f2d+0x86>
 8005cac:	1c28      	adds	r0, r5, #0
 8005cae:	f000 f90b 	bl	8005ec8 <__clzsi2>
 8005cb2:	280a      	cmp	r0, #10
 8005cb4:	dc1d      	bgt.n	8005cf2 <__aeabi_f2d+0x8e>
 8005cb6:	260b      	movs	r6, #11
 8005cb8:	1c03      	adds	r3, r0, #0
 8005cba:	1a32      	subs	r2, r6, r0
 8005cbc:	1c29      	adds	r1, r5, #0
 8005cbe:	3315      	adds	r3, #21
 8005cc0:	40d1      	lsrs	r1, r2
 8005cc2:	409d      	lsls	r5, r3
 8005cc4:	1c0a      	adds	r2, r1, #0
 8005cc6:	1c2b      	adds	r3, r5, #0
 8005cc8:	490e      	ldr	r1, [pc, #56]	; (8005d04 <__aeabi_f2d+0xa0>)
 8005cca:	0312      	lsls	r2, r2, #12
 8005ccc:	1a0d      	subs	r5, r1, r0
 8005cce:	0568      	lsls	r0, r5, #21
 8005cd0:	0b12      	lsrs	r2, r2, #12
 8005cd2:	0d45      	lsrs	r5, r0, #21
 8005cd4:	e7d5      	b.n	8005c82 <__aeabi_f2d+0x1e>
 8005cd6:	2d00      	cmp	r5, #0
 8005cd8:	d003      	beq.n	8005ce2 <__aeabi_f2d+0x7e>
 8005cda:	076b      	lsls	r3, r5, #29
 8005cdc:	0b12      	lsrs	r2, r2, #12
 8005cde:	4d0a      	ldr	r5, [pc, #40]	; (8005d08 <__aeabi_f2d+0xa4>)
 8005ce0:	e7cf      	b.n	8005c82 <__aeabi_f2d+0x1e>
 8005ce2:	4d09      	ldr	r5, [pc, #36]	; (8005d08 <__aeabi_f2d+0xa4>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e7cb      	b.n	8005c82 <__aeabi_f2d+0x1e>
 8005cea:	2500      	movs	r5, #0
 8005cec:	2200      	movs	r2, #0
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e7c7      	b.n	8005c82 <__aeabi_f2d+0x1e>
 8005cf2:	1c03      	adds	r3, r0, #0
 8005cf4:	3b0b      	subs	r3, #11
 8005cf6:	409d      	lsls	r5, r3
 8005cf8:	1c2a      	adds	r2, r5, #0
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e7e4      	b.n	8005cc8 <__aeabi_f2d+0x64>
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	800fffff 	.word	0x800fffff
 8005d04:	00000389 	.word	0x00000389
 8005d08:	000007ff 	.word	0x000007ff

08005d0c <__aeabi_d2f>:
 8005d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d0e:	1c0b      	adds	r3, r1, #0
 8005d10:	0049      	lsls	r1, r1, #1
 8005d12:	0d49      	lsrs	r1, r1, #21
 8005d14:	031a      	lsls	r2, r3, #12
 8005d16:	1c4f      	adds	r7, r1, #1
 8005d18:	0f45      	lsrs	r5, r0, #29
 8005d1a:	0a52      	lsrs	r2, r2, #9
 8005d1c:	057e      	lsls	r6, r7, #21
 8005d1e:	0fdc      	lsrs	r4, r3, #31
 8005d20:	432a      	orrs	r2, r5
 8005d22:	0d73      	lsrs	r3, r6, #21
 8005d24:	00c5      	lsls	r5, r0, #3
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	dd3a      	ble.n	8005da0 <__aeabi_d2f+0x94>
 8005d2a:	4e43      	ldr	r6, [pc, #268]	; (8005e38 <__aeabi_d2f+0x12c>)
 8005d2c:	198b      	adds	r3, r1, r6
 8005d2e:	2bfe      	cmp	r3, #254	; 0xfe
 8005d30:	dd23      	ble.n	8005d7a <__aeabi_d2f+0x6e>
 8005d32:	2080      	movs	r0, #128	; 0x80
 8005d34:	0041      	lsls	r1, r0, #1
 8005d36:	2204      	movs	r2, #4
 8005d38:	23ff      	movs	r3, #255	; 0xff
 8005d3a:	0156      	lsls	r6, r2, #5
 8005d3c:	d505      	bpl.n	8005d4a <__aeabi_d2f+0x3e>
 8005d3e:	29ff      	cmp	r1, #255	; 0xff
 8005d40:	d048      	beq.n	8005dd4 <__aeabi_d2f+0xc8>
 8005d42:	4e3e      	ldr	r6, [pc, #248]	; (8005e3c <__aeabi_d2f+0x130>)
 8005d44:	1c0b      	adds	r3, r1, #0
 8005d46:	4032      	ands	r2, r6
 8005d48:	3101      	adds	r1, #1
 8005d4a:	08d2      	lsrs	r2, r2, #3
 8005d4c:	d031      	beq.n	8005db2 <__aeabi_d2f+0xa6>
 8005d4e:	20ff      	movs	r0, #255	; 0xff
 8005d50:	4001      	ands	r1, r0
 8005d52:	0fcf      	lsrs	r7, r1, #31
 8005d54:	2500      	movs	r5, #0
 8005d56:	2601      	movs	r6, #1
 8005d58:	428e      	cmp	r6, r1
 8005d5a:	416f      	adcs	r7, r5
 8005d5c:	1e38      	subs	r0, r7, #0
 8005d5e:	d028      	beq.n	8005db2 <__aeabi_d2f+0xa6>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d02a      	beq.n	8005dba <__aeabi_d2f+0xae>
 8005d64:	2580      	movs	r5, #128	; 0x80
 8005d66:	03ee      	lsls	r6, r5, #15
 8005d68:	4332      	orrs	r2, r6
 8005d6a:	0257      	lsls	r7, r2, #9
 8005d6c:	0a78      	lsrs	r0, r7, #9
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	05db      	lsls	r3, r3, #23
 8005d72:	07e4      	lsls	r4, r4, #31
 8005d74:	4318      	orrs	r0, r3
 8005d76:	4320      	orrs	r0, r4
 8005d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	dd2d      	ble.n	8005dda <__aeabi_d2f+0xce>
 8005d7e:	0180      	lsls	r0, r0, #6
 8005d80:	1e46      	subs	r6, r0, #1
 8005d82:	41b0      	sbcs	r0, r6
 8005d84:	0f6e      	lsrs	r6, r5, #29
 8005d86:	1c05      	adds	r5, r0, #0
 8005d88:	4335      	orrs	r5, r6
 8005d8a:	4f2d      	ldr	r7, [pc, #180]	; (8005e40 <__aeabi_d2f+0x134>)
 8005d8c:	00d6      	lsls	r6, r2, #3
 8005d8e:	1c2a      	adds	r2, r5, #0
 8005d90:	19c9      	adds	r1, r1, r7
 8005d92:	4332      	orrs	r2, r6
 8005d94:	270f      	movs	r7, #15
 8005d96:	4017      	ands	r7, r2
 8005d98:	2f04      	cmp	r7, #4
 8005d9a:	d0ce      	beq.n	8005d3a <__aeabi_d2f+0x2e>
 8005d9c:	3204      	adds	r2, #4
 8005d9e:	e7cc      	b.n	8005d3a <__aeabi_d2f+0x2e>
 8005da0:	2900      	cmp	r1, #0
 8005da2:	d10d      	bne.n	8005dc0 <__aeabi_d2f+0xb4>
 8005da4:	432a      	orrs	r2, r5
 8005da6:	2101      	movs	r1, #1
 8005da8:	2a00      	cmp	r2, #0
 8005daa:	d119      	bne.n	8005de0 <__aeabi_d2f+0xd4>
 8005dac:	2204      	movs	r2, #4
 8005dae:	2300      	movs	r3, #0
 8005db0:	e7c3      	b.n	8005d3a <__aeabi_d2f+0x2e>
 8005db2:	0252      	lsls	r2, r2, #9
 8005db4:	0a50      	lsrs	r0, r2, #9
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	e7da      	b.n	8005d70 <__aeabi_d2f+0x64>
 8005dba:	0251      	lsls	r1, r2, #9
 8005dbc:	0a48      	lsrs	r0, r1, #9
 8005dbe:	e7d7      	b.n	8005d70 <__aeabi_d2f+0x64>
 8005dc0:	4315      	orrs	r5, r2
 8005dc2:	d0b6      	beq.n	8005d32 <__aeabi_d2f+0x26>
 8005dc4:	2580      	movs	r5, #128	; 0x80
 8005dc6:	04a9      	lsls	r1, r5, #18
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	00d2      	lsls	r2, r2, #3
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	0059      	lsls	r1, r3, #1
 8005dd0:	23ff      	movs	r3, #255	; 0xff
 8005dd2:	e7df      	b.n	8005d94 <__aeabi_d2f+0x88>
 8005dd4:	23ff      	movs	r3, #255	; 0xff
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	e7ca      	b.n	8005d70 <__aeabi_d2f+0x64>
 8005dda:	3317      	adds	r3, #23
 8005ddc:	da03      	bge.n	8005de6 <__aeabi_d2f+0xda>
 8005dde:	2101      	movs	r1, #1
 8005de0:	2205      	movs	r2, #5
 8005de2:	2300      	movs	r3, #0
 8005de4:	e7a9      	b.n	8005d3a <__aeabi_d2f+0x2e>
 8005de6:	2380      	movs	r3, #128	; 0x80
 8005de8:	4f16      	ldr	r7, [pc, #88]	; (8005e44 <__aeabi_d2f+0x138>)
 8005dea:	041b      	lsls	r3, r3, #16
 8005dec:	4313      	orrs	r3, r2
 8005dee:	1a78      	subs	r0, r7, r1
 8005df0:	281f      	cmp	r0, #31
 8005df2:	dc0c      	bgt.n	8005e0e <__aeabi_d2f+0x102>
 8005df4:	4a14      	ldr	r2, [pc, #80]	; (8005e48 <__aeabi_d2f+0x13c>)
 8005df6:	1889      	adds	r1, r1, r2
 8005df8:	1c2a      	adds	r2, r5, #0
 8005dfa:	408a      	lsls	r2, r1
 8005dfc:	1e56      	subs	r6, r2, #1
 8005dfe:	41b2      	sbcs	r2, r6
 8005e00:	40c5      	lsrs	r5, r0
 8005e02:	408b      	lsls	r3, r1
 8005e04:	432a      	orrs	r2, r5
 8005e06:	431a      	orrs	r2, r3
 8005e08:	2101      	movs	r1, #1
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	e7c2      	b.n	8005d94 <__aeabi_d2f+0x88>
 8005e0e:	4a0f      	ldr	r2, [pc, #60]	; (8005e4c <__aeabi_d2f+0x140>)
 8005e10:	1c1e      	adds	r6, r3, #0
 8005e12:	1a57      	subs	r7, r2, r1
 8005e14:	40fe      	lsrs	r6, r7
 8005e16:	1c37      	adds	r7, r6, #0
 8005e18:	2600      	movs	r6, #0
 8005e1a:	2820      	cmp	r0, #32
 8005e1c:	d003      	beq.n	8005e26 <__aeabi_d2f+0x11a>
 8005e1e:	480c      	ldr	r0, [pc, #48]	; (8005e50 <__aeabi_d2f+0x144>)
 8005e20:	1c1e      	adds	r6, r3, #0
 8005e22:	1809      	adds	r1, r1, r0
 8005e24:	408e      	lsls	r6, r1
 8005e26:	1c32      	adds	r2, r6, #0
 8005e28:	432a      	orrs	r2, r5
 8005e2a:	1e55      	subs	r5, r2, #1
 8005e2c:	41aa      	sbcs	r2, r5
 8005e2e:	433a      	orrs	r2, r7
 8005e30:	2101      	movs	r1, #1
 8005e32:	2300      	movs	r3, #0
 8005e34:	e7ae      	b.n	8005d94 <__aeabi_d2f+0x88>
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	fffffc80 	.word	0xfffffc80
 8005e3c:	fbffffff 	.word	0xfbffffff
 8005e40:	fffffc81 	.word	0xfffffc81
 8005e44:	0000039e 	.word	0x0000039e
 8005e48:	fffffc82 	.word	0xfffffc82
 8005e4c:	0000037e 	.word	0x0000037e
 8005e50:	fffffca2 	.word	0xfffffca2

08005e54 <__aeabi_cfrcmple>:
 8005e54:	4684      	mov	ip, r0
 8005e56:	1c08      	adds	r0, r1, #0
 8005e58:	4661      	mov	r1, ip
 8005e5a:	e7ff      	b.n	8005e5c <__aeabi_cfcmpeq>

08005e5c <__aeabi_cfcmpeq>:
 8005e5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e5e:	f000 f8cb 	bl	8005ff8 <__lesf2>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d401      	bmi.n	8005e6a <__aeabi_cfcmpeq+0xe>
 8005e66:	2100      	movs	r1, #0
 8005e68:	42c8      	cmn	r0, r1
 8005e6a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08005e6c <__aeabi_fcmpeq>:
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	f000 f849 	bl	8005f04 <__eqsf2>
 8005e72:	4240      	negs	r0, r0
 8005e74:	3001      	adds	r0, #1
 8005e76:	bd10      	pop	{r4, pc}

08005e78 <__aeabi_fcmplt>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	f000 f8bd 	bl	8005ff8 <__lesf2>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	db01      	blt.n	8005e86 <__aeabi_fcmplt+0xe>
 8005e82:	2000      	movs	r0, #0
 8005e84:	bd10      	pop	{r4, pc}
 8005e86:	2001      	movs	r0, #1
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	46c0      	nop			; (mov r8, r8)

08005e8c <__aeabi_fcmple>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	f000 f8b3 	bl	8005ff8 <__lesf2>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	dd01      	ble.n	8005e9a <__aeabi_fcmple+0xe>
 8005e96:	2000      	movs	r0, #0
 8005e98:	bd10      	pop	{r4, pc}
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	bd10      	pop	{r4, pc}
 8005e9e:	46c0      	nop			; (mov r8, r8)

08005ea0 <__aeabi_fcmpgt>:
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	f000 f859 	bl	8005f58 <__gesf2>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	dc01      	bgt.n	8005eae <__aeabi_fcmpgt+0xe>
 8005eaa:	2000      	movs	r0, #0
 8005eac:	bd10      	pop	{r4, pc}
 8005eae:	2001      	movs	r0, #1
 8005eb0:	bd10      	pop	{r4, pc}
 8005eb2:	46c0      	nop			; (mov r8, r8)

08005eb4 <__aeabi_fcmpge>:
 8005eb4:	b510      	push	{r4, lr}
 8005eb6:	f000 f84f 	bl	8005f58 <__gesf2>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	da01      	bge.n	8005ec2 <__aeabi_fcmpge+0xe>
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	bd10      	pop	{r4, pc}
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	bd10      	pop	{r4, pc}
 8005ec6:	46c0      	nop			; (mov r8, r8)

08005ec8 <__clzsi2>:
 8005ec8:	211c      	movs	r1, #28
 8005eca:	2301      	movs	r3, #1
 8005ecc:	041b      	lsls	r3, r3, #16
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	d301      	bcc.n	8005ed6 <__clzsi2+0xe>
 8005ed2:	0c00      	lsrs	r0, r0, #16
 8005ed4:	3910      	subs	r1, #16
 8005ed6:	0a1b      	lsrs	r3, r3, #8
 8005ed8:	4298      	cmp	r0, r3
 8005eda:	d301      	bcc.n	8005ee0 <__clzsi2+0x18>
 8005edc:	0a00      	lsrs	r0, r0, #8
 8005ede:	3908      	subs	r1, #8
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	4298      	cmp	r0, r3
 8005ee4:	d301      	bcc.n	8005eea <__clzsi2+0x22>
 8005ee6:	0900      	lsrs	r0, r0, #4
 8005ee8:	3904      	subs	r1, #4
 8005eea:	a202      	add	r2, pc, #8	; (adr r2, 8005ef4 <__clzsi2+0x2c>)
 8005eec:	5c10      	ldrb	r0, [r2, r0]
 8005eee:	1840      	adds	r0, r0, r1
 8005ef0:	4770      	bx	lr
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	02020304 	.word	0x02020304
 8005ef8:	01010101 	.word	0x01010101
	...

08005f04 <__eqsf2>:
 8005f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f06:	0243      	lsls	r3, r0, #9
 8005f08:	004a      	lsls	r2, r1, #1
 8005f0a:	0a5b      	lsrs	r3, r3, #9
 8005f0c:	0044      	lsls	r4, r0, #1
 8005f0e:	0fc7      	lsrs	r7, r0, #31
 8005f10:	0e16      	lsrs	r6, r2, #24
 8005f12:	0248      	lsls	r0, r1, #9
 8005f14:	1c1a      	adds	r2, r3, #0
 8005f16:	0e25      	lsrs	r5, r4, #24
 8005f18:	0a44      	lsrs	r4, r0, #9
 8005f1a:	1e50      	subs	r0, r2, #1
 8005f1c:	4182      	sbcs	r2, r0
 8005f1e:	0fc9      	lsrs	r1, r1, #31
 8005f20:	2a00      	cmp	r2, #0
 8005f22:	d113      	bne.n	8005f4c <__eqsf2+0x48>
 8005f24:	2c00      	cmp	r4, #0
 8005f26:	d10b      	bne.n	8005f40 <__eqsf2+0x3c>
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	d113      	bne.n	8005f54 <__eqsf2+0x50>
 8005f2c:	42b5      	cmp	r5, r6
 8005f2e:	d111      	bne.n	8005f54 <__eqsf2+0x50>
 8005f30:	2000      	movs	r0, #0
 8005f32:	428f      	cmp	r7, r1
 8005f34:	d003      	beq.n	8005f3e <__eqsf2+0x3a>
 8005f36:	1c28      	adds	r0, r5, #0
 8005f38:	1e45      	subs	r5, r0, #1
 8005f3a:	41a8      	sbcs	r0, r5
 8005f3c:	4310      	orrs	r0, r2
 8005f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f40:	2001      	movs	r0, #1
 8005f42:	2eff      	cmp	r6, #255	; 0xff
 8005f44:	d0fb      	beq.n	8005f3e <__eqsf2+0x3a>
 8005f46:	42a3      	cmp	r3, r4
 8005f48:	d104      	bne.n	8005f54 <__eqsf2+0x50>
 8005f4a:	e7ef      	b.n	8005f2c <__eqsf2+0x28>
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	2dff      	cmp	r5, #255	; 0xff
 8005f50:	d1e8      	bne.n	8005f24 <__eqsf2+0x20>
 8005f52:	e7f4      	b.n	8005f3e <__eqsf2+0x3a>
 8005f54:	2001      	movs	r0, #1
 8005f56:	e7f2      	b.n	8005f3e <__eqsf2+0x3a>

08005f58 <__gesf2>:
 8005f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f5a:	4647      	mov	r7, r8
 8005f5c:	b480      	push	{r7}
 8005f5e:	0243      	lsls	r3, r0, #9
 8005f60:	0045      	lsls	r5, r0, #1
 8005f62:	024a      	lsls	r2, r1, #9
 8005f64:	004e      	lsls	r6, r1, #1
 8005f66:	0fc0      	lsrs	r0, r0, #31
 8005f68:	0a5b      	lsrs	r3, r3, #9
 8005f6a:	0e2d      	lsrs	r5, r5, #24
 8005f6c:	4684      	mov	ip, r0
 8005f6e:	0a52      	lsrs	r2, r2, #9
 8005f70:	0e36      	lsrs	r6, r6, #24
 8005f72:	0fc9      	lsrs	r1, r1, #31
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d128      	bne.n	8005fca <__gesf2+0x72>
 8005f78:	2a00      	cmp	r2, #0
 8005f7a:	d13a      	bne.n	8005ff2 <__gesf2+0x9a>
 8005f7c:	425c      	negs	r4, r3
 8005f7e:	415c      	adcs	r4, r3
 8005f80:	426f      	negs	r7, r5
 8005f82:	416f      	adcs	r7, r5
 8005f84:	4027      	ands	r7, r4
 8005f86:	4254      	negs	r4, r2
 8005f88:	4154      	adcs	r4, r2
 8005f8a:	4270      	negs	r0, r6
 8005f8c:	4170      	adcs	r0, r6
 8005f8e:	4004      	ands	r4, r0
 8005f90:	d112      	bne.n	8005fb8 <__gesf2+0x60>
 8005f92:	2f00      	cmp	r7, #0
 8005f94:	d007      	beq.n	8005fa6 <__gesf2+0x4e>
 8005f96:	424f      	negs	r7, r1
 8005f98:	414f      	adcs	r7, r1
 8005f9a:	4278      	negs	r0, r7
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	4308      	orrs	r0, r1
 8005fa0:	bc04      	pop	{r2}
 8005fa2:	4690      	mov	r8, r2
 8005fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fa6:	2c00      	cmp	r4, #0
 8005fa8:	d10a      	bne.n	8005fc0 <__gesf2+0x68>
 8005faa:	458c      	cmp	ip, r1
 8005fac:	d012      	beq.n	8005fd4 <__gesf2+0x7c>
 8005fae:	4663      	mov	r3, ip
 8005fb0:	4258      	negs	r0, r3
 8005fb2:	2501      	movs	r5, #1
 8005fb4:	4328      	orrs	r0, r5
 8005fb6:	e7f3      	b.n	8005fa0 <__gesf2+0x48>
 8005fb8:	2000      	movs	r0, #0
 8005fba:	2f00      	cmp	r7, #0
 8005fbc:	d0e9      	beq.n	8005f92 <__gesf2+0x3a>
 8005fbe:	e7ef      	b.n	8005fa0 <__gesf2+0x48>
 8005fc0:	4662      	mov	r2, ip
 8005fc2:	4250      	negs	r0, r2
 8005fc4:	2601      	movs	r6, #1
 8005fc6:	4330      	orrs	r0, r6
 8005fc8:	e7ea      	b.n	8005fa0 <__gesf2+0x48>
 8005fca:	2dff      	cmp	r5, #255	; 0xff
 8005fcc:	d1d4      	bne.n	8005f78 <__gesf2+0x20>
 8005fce:	2702      	movs	r7, #2
 8005fd0:	4278      	negs	r0, r7
 8005fd2:	e7e5      	b.n	8005fa0 <__gesf2+0x48>
 8005fd4:	42b5      	cmp	r5, r6
 8005fd6:	dcf3      	bgt.n	8005fc0 <__gesf2+0x68>
 8005fd8:	db04      	blt.n	8005fe4 <__gesf2+0x8c>
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d8e7      	bhi.n	8005fae <__gesf2+0x56>
 8005fde:	2000      	movs	r0, #0
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d2dd      	bcs.n	8005fa0 <__gesf2+0x48>
 8005fe4:	4661      	mov	r1, ip
 8005fe6:	4248      	negs	r0, r1
 8005fe8:	4148      	adcs	r0, r1
 8005fea:	4240      	negs	r0, r0
 8005fec:	2401      	movs	r4, #1
 8005fee:	4320      	orrs	r0, r4
 8005ff0:	e7d6      	b.n	8005fa0 <__gesf2+0x48>
 8005ff2:	2eff      	cmp	r6, #255	; 0xff
 8005ff4:	d1c2      	bne.n	8005f7c <__gesf2+0x24>
 8005ff6:	e7ea      	b.n	8005fce <__gesf2+0x76>

08005ff8 <__lesf2>:
 8005ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ffa:	4647      	mov	r7, r8
 8005ffc:	b480      	push	{r7}
 8005ffe:	0243      	lsls	r3, r0, #9
 8006000:	0044      	lsls	r4, r0, #1
 8006002:	004a      	lsls	r2, r1, #1
 8006004:	0fc6      	lsrs	r6, r0, #31
 8006006:	0248      	lsls	r0, r1, #9
 8006008:	0a5b      	lsrs	r3, r3, #9
 800600a:	0e24      	lsrs	r4, r4, #24
 800600c:	0a45      	lsrs	r5, r0, #9
 800600e:	0e12      	lsrs	r2, r2, #24
 8006010:	0fc9      	lsrs	r1, r1, #31
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <__lesf2+0x2a>
 8006016:	2002      	movs	r0, #2
 8006018:	2cff      	cmp	r4, #255	; 0xff
 800601a:	d102      	bne.n	8006022 <__lesf2+0x2a>
 800601c:	bc04      	pop	{r2}
 800601e:	4690      	mov	r8, r2
 8006020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006022:	2d00      	cmp	r5, #0
 8006024:	d002      	beq.n	800602c <__lesf2+0x34>
 8006026:	2002      	movs	r0, #2
 8006028:	2aff      	cmp	r2, #255	; 0xff
 800602a:	d0f7      	beq.n	800601c <__lesf2+0x24>
 800602c:	4258      	negs	r0, r3
 800602e:	4158      	adcs	r0, r3
 8006030:	4267      	negs	r7, r4
 8006032:	4167      	adcs	r7, r4
 8006034:	4007      	ands	r7, r0
 8006036:	46bc      	mov	ip, r7
 8006038:	4268      	negs	r0, r5
 800603a:	4168      	adcs	r0, r5
 800603c:	4257      	negs	r7, r2
 800603e:	4157      	adcs	r7, r2
 8006040:	4007      	ands	r7, r0
 8006042:	46b8      	mov	r8, r7
 8006044:	d111      	bne.n	800606a <__lesf2+0x72>
 8006046:	4660      	mov	r0, ip
 8006048:	2800      	cmp	r0, #0
 800604a:	d108      	bne.n	800605e <__lesf2+0x66>
 800604c:	4647      	mov	r7, r8
 800604e:	2f00      	cmp	r7, #0
 8006050:	d101      	bne.n	8006056 <__lesf2+0x5e>
 8006052:	428e      	cmp	r6, r1
 8006054:	d00e      	beq.n	8006074 <__lesf2+0x7c>
 8006056:	4270      	negs	r0, r6
 8006058:	2601      	movs	r6, #1
 800605a:	4330      	orrs	r0, r6
 800605c:	e7de      	b.n	800601c <__lesf2+0x24>
 800605e:	424d      	negs	r5, r1
 8006060:	414d      	adcs	r5, r1
 8006062:	4268      	negs	r0, r5
 8006064:	2101      	movs	r1, #1
 8006066:	4308      	orrs	r0, r1
 8006068:	e7d8      	b.n	800601c <__lesf2+0x24>
 800606a:	4667      	mov	r7, ip
 800606c:	2000      	movs	r0, #0
 800606e:	2f00      	cmp	r7, #0
 8006070:	d0e9      	beq.n	8006046 <__lesf2+0x4e>
 8006072:	e7d3      	b.n	800601c <__lesf2+0x24>
 8006074:	4294      	cmp	r4, r2
 8006076:	dcee      	bgt.n	8006056 <__lesf2+0x5e>
 8006078:	db04      	blt.n	8006084 <__lesf2+0x8c>
 800607a:	42ab      	cmp	r3, r5
 800607c:	d8eb      	bhi.n	8006056 <__lesf2+0x5e>
 800607e:	2000      	movs	r0, #0
 8006080:	42ab      	cmp	r3, r5
 8006082:	d2cb      	bcs.n	800601c <__lesf2+0x24>
 8006084:	4274      	negs	r4, r6
 8006086:	4174      	adcs	r4, r6
 8006088:	4260      	negs	r0, r4
 800608a:	2201      	movs	r2, #1
 800608c:	4310      	orrs	r0, r2
 800608e:	e7c5      	b.n	800601c <__lesf2+0x24>

08006090 <atoi>:
 8006090:	b508      	push	{r3, lr}
 8006092:	2100      	movs	r1, #0
 8006094:	220a      	movs	r2, #10
 8006096:	f000 fabb 	bl	8006610 <strtol>
 800609a:	bd08      	pop	{r3, pc}

0800609c <_atoi_r>:
 800609c:	b508      	push	{r3, lr}
 800609e:	2200      	movs	r2, #0
 80060a0:	230a      	movs	r3, #10
 80060a2:	f000 fa0b 	bl	80064bc <_strtol_r>
 80060a6:	bd08      	pop	{r3, pc}

080060a8 <__errno>:
 80060a8:	4b01      	ldr	r3, [pc, #4]	; (80060b0 <__errno+0x8>)
 80060aa:	6818      	ldr	r0, [r3, #0]
 80060ac:	4770      	bx	lr
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	200000c8 	.word	0x200000c8

080060b4 <__libc_init_array>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	4d0c      	ldr	r5, [pc, #48]	; (80060e8 <__libc_init_array+0x34>)
 80060b8:	4e0c      	ldr	r6, [pc, #48]	; (80060ec <__libc_init_array+0x38>)
 80060ba:	1b76      	subs	r6, r6, r5
 80060bc:	10b6      	asrs	r6, r6, #2
 80060be:	d005      	beq.n	80060cc <__libc_init_array+0x18>
 80060c0:	2400      	movs	r4, #0
 80060c2:	cd08      	ldmia	r5!, {r3}
 80060c4:	3401      	adds	r4, #1
 80060c6:	4798      	blx	r3
 80060c8:	42a6      	cmp	r6, r4
 80060ca:	d1fa      	bne.n	80060c2 <__libc_init_array+0xe>
 80060cc:	f004 f9e2 	bl	800a494 <_init>
 80060d0:	4d07      	ldr	r5, [pc, #28]	; (80060f0 <__libc_init_array+0x3c>)
 80060d2:	4e08      	ldr	r6, [pc, #32]	; (80060f4 <__libc_init_array+0x40>)
 80060d4:	1b76      	subs	r6, r6, r5
 80060d6:	10b6      	asrs	r6, r6, #2
 80060d8:	d005      	beq.n	80060e6 <__libc_init_array+0x32>
 80060da:	2400      	movs	r4, #0
 80060dc:	cd08      	ldmia	r5!, {r3}
 80060de:	3401      	adds	r4, #1
 80060e0:	4798      	blx	r3
 80060e2:	42a6      	cmp	r6, r4
 80060e4:	d1fa      	bne.n	80060dc <__libc_init_array+0x28>
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	0800a4ac 	.word	0x0800a4ac
 80060ec:	0800a4ac 	.word	0x0800a4ac
 80060f0:	0800a4ac 	.word	0x0800a4ac
 80060f4:	0800a4b0 	.word	0x0800a4b0

080060f8 <memcpy>:
 80060f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060fa:	4657      	mov	r7, sl
 80060fc:	464e      	mov	r6, r9
 80060fe:	4645      	mov	r5, r8
 8006100:	b4e0      	push	{r5, r6, r7}
 8006102:	2a03      	cmp	r2, #3
 8006104:	d80c      	bhi.n	8006120 <memcpy+0x28>
 8006106:	2a00      	cmp	r2, #0
 8006108:	d005      	beq.n	8006116 <memcpy+0x1e>
 800610a:	2300      	movs	r3, #0
 800610c:	5ccc      	ldrb	r4, [r1, r3]
 800610e:	54c4      	strb	r4, [r0, r3]
 8006110:	3301      	adds	r3, #1
 8006112:	4293      	cmp	r3, r2
 8006114:	d1fa      	bne.n	800610c <memcpy+0x14>
 8006116:	bc1c      	pop	{r2, r3, r4}
 8006118:	4690      	mov	r8, r2
 800611a:	4699      	mov	r9, r3
 800611c:	46a2      	mov	sl, r4
 800611e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006120:	1882      	adds	r2, r0, r2
 8006122:	1c03      	adds	r3, r0, #0
 8006124:	0784      	lsls	r4, r0, #30
 8006126:	d006      	beq.n	8006136 <memcpy+0x3e>
 8006128:	2403      	movs	r4, #3
 800612a:	780d      	ldrb	r5, [r1, #0]
 800612c:	3101      	adds	r1, #1
 800612e:	701d      	strb	r5, [r3, #0]
 8006130:	3301      	adds	r3, #1
 8006132:	4223      	tst	r3, r4
 8006134:	d1f9      	bne.n	800612a <memcpy+0x32>
 8006136:	2403      	movs	r4, #3
 8006138:	400c      	ands	r4, r1
 800613a:	d047      	beq.n	80061cc <memcpy+0xd4>
 800613c:	4265      	negs	r5, r4
 800613e:	46aa      	mov	sl, r5
 8006140:	594e      	ldr	r6, [r1, r5]
 8006142:	1ad7      	subs	r7, r2, r3
 8006144:	2f03      	cmp	r7, #3
 8006146:	dd16      	ble.n	8006176 <memcpy+0x7e>
 8006148:	00e7      	lsls	r7, r4, #3
 800614a:	46bc      	mov	ip, r7
 800614c:	2704      	movs	r7, #4
 800614e:	1b3c      	subs	r4, r7, r4
 8006150:	00e4      	lsls	r4, r4, #3
 8006152:	46a1      	mov	r9, r4
 8006154:	e000      	b.n	8006158 <memcpy+0x60>
 8006156:	1c3e      	adds	r6, r7, #0
 8006158:	4654      	mov	r4, sl
 800615a:	3104      	adds	r1, #4
 800615c:	590f      	ldr	r7, [r1, r4]
 800615e:	464c      	mov	r4, r9
 8006160:	1c3d      	adds	r5, r7, #0
 8006162:	40a5      	lsls	r5, r4
 8006164:	46a8      	mov	r8, r5
 8006166:	4665      	mov	r5, ip
 8006168:	40ee      	lsrs	r6, r5
 800616a:	4644      	mov	r4, r8
 800616c:	4326      	orrs	r6, r4
 800616e:	c340      	stmia	r3!, {r6}
 8006170:	1ad6      	subs	r6, r2, r3
 8006172:	2e03      	cmp	r6, #3
 8006174:	dcef      	bgt.n	8006156 <memcpy+0x5e>
 8006176:	429a      	cmp	r2, r3
 8006178:	d9cd      	bls.n	8006116 <memcpy+0x1e>
 800617a:	780c      	ldrb	r4, [r1, #0]
 800617c:	3101      	adds	r1, #1
 800617e:	701c      	strb	r4, [r3, #0]
 8006180:	3301      	adds	r3, #1
 8006182:	4293      	cmp	r3, r2
 8006184:	d1f9      	bne.n	800617a <memcpy+0x82>
 8006186:	e7c6      	b.n	8006116 <memcpy+0x1e>
 8006188:	680c      	ldr	r4, [r1, #0]
 800618a:	601c      	str	r4, [r3, #0]
 800618c:	684c      	ldr	r4, [r1, #4]
 800618e:	605c      	str	r4, [r3, #4]
 8006190:	688c      	ldr	r4, [r1, #8]
 8006192:	609c      	str	r4, [r3, #8]
 8006194:	68cc      	ldr	r4, [r1, #12]
 8006196:	60dc      	str	r4, [r3, #12]
 8006198:	690c      	ldr	r4, [r1, #16]
 800619a:	611c      	str	r4, [r3, #16]
 800619c:	694c      	ldr	r4, [r1, #20]
 800619e:	615c      	str	r4, [r3, #20]
 80061a0:	698c      	ldr	r4, [r1, #24]
 80061a2:	619c      	str	r4, [r3, #24]
 80061a4:	69cc      	ldr	r4, [r1, #28]
 80061a6:	61dc      	str	r4, [r3, #28]
 80061a8:	6a0c      	ldr	r4, [r1, #32]
 80061aa:	621c      	str	r4, [r3, #32]
 80061ac:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80061ae:	625c      	str	r4, [r3, #36]	; 0x24
 80061b0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80061b2:	629c      	str	r4, [r3, #40]	; 0x28
 80061b4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80061b6:	62dc      	str	r4, [r3, #44]	; 0x2c
 80061b8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80061ba:	631c      	str	r4, [r3, #48]	; 0x30
 80061bc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80061be:	635c      	str	r4, [r3, #52]	; 0x34
 80061c0:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80061c2:	639c      	str	r4, [r3, #56]	; 0x38
 80061c4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80061c6:	3140      	adds	r1, #64	; 0x40
 80061c8:	63dc      	str	r4, [r3, #60]	; 0x3c
 80061ca:	3340      	adds	r3, #64	; 0x40
 80061cc:	1ad4      	subs	r4, r2, r3
 80061ce:	2c3f      	cmp	r4, #63	; 0x3f
 80061d0:	dcda      	bgt.n	8006188 <memcpy+0x90>
 80061d2:	e00a      	b.n	80061ea <memcpy+0xf2>
 80061d4:	680c      	ldr	r4, [r1, #0]
 80061d6:	601c      	str	r4, [r3, #0]
 80061d8:	684c      	ldr	r4, [r1, #4]
 80061da:	605c      	str	r4, [r3, #4]
 80061dc:	688c      	ldr	r4, [r1, #8]
 80061de:	609c      	str	r4, [r3, #8]
 80061e0:	68cc      	ldr	r4, [r1, #12]
 80061e2:	3110      	adds	r1, #16
 80061e4:	60dc      	str	r4, [r3, #12]
 80061e6:	3310      	adds	r3, #16
 80061e8:	1ad4      	subs	r4, r2, r3
 80061ea:	2c0f      	cmp	r4, #15
 80061ec:	dcf2      	bgt.n	80061d4 <memcpy+0xdc>
 80061ee:	e002      	b.n	80061f6 <memcpy+0xfe>
 80061f0:	c910      	ldmia	r1!, {r4}
 80061f2:	c310      	stmia	r3!, {r4}
 80061f4:	1ad4      	subs	r4, r2, r3
 80061f6:	2c03      	cmp	r4, #3
 80061f8:	dcfa      	bgt.n	80061f0 <memcpy+0xf8>
 80061fa:	e7bc      	b.n	8006176 <memcpy+0x7e>

080061fc <memset>:
 80061fc:	b530      	push	{r4, r5, lr}
 80061fe:	b2c9      	uxtb	r1, r1
 8006200:	2a03      	cmp	r2, #3
 8006202:	d807      	bhi.n	8006214 <memset+0x18>
 8006204:	2a00      	cmp	r2, #0
 8006206:	d004      	beq.n	8006212 <memset+0x16>
 8006208:	2300      	movs	r3, #0
 800620a:	54c1      	strb	r1, [r0, r3]
 800620c:	3301      	adds	r3, #1
 800620e:	4293      	cmp	r3, r2
 8006210:	d1fb      	bne.n	800620a <memset+0xe>
 8006212:	bd30      	pop	{r4, r5, pc}
 8006214:	1882      	adds	r2, r0, r2
 8006216:	1c03      	adds	r3, r0, #0
 8006218:	0784      	lsls	r4, r0, #30
 800621a:	d004      	beq.n	8006226 <memset+0x2a>
 800621c:	2403      	movs	r4, #3
 800621e:	7019      	strb	r1, [r3, #0]
 8006220:	3301      	adds	r3, #1
 8006222:	4223      	tst	r3, r4
 8006224:	d1fb      	bne.n	800621e <memset+0x22>
 8006226:	020c      	lsls	r4, r1, #8
 8006228:	1864      	adds	r4, r4, r1
 800622a:	0425      	lsls	r5, r4, #16
 800622c:	1964      	adds	r4, r4, r5
 800622e:	1ad5      	subs	r5, r2, r3
 8006230:	2d3f      	cmp	r5, #63	; 0x3f
 8006232:	dd1a      	ble.n	800626a <memset+0x6e>
 8006234:	601c      	str	r4, [r3, #0]
 8006236:	605c      	str	r4, [r3, #4]
 8006238:	609c      	str	r4, [r3, #8]
 800623a:	60dc      	str	r4, [r3, #12]
 800623c:	611c      	str	r4, [r3, #16]
 800623e:	615c      	str	r4, [r3, #20]
 8006240:	619c      	str	r4, [r3, #24]
 8006242:	61dc      	str	r4, [r3, #28]
 8006244:	621c      	str	r4, [r3, #32]
 8006246:	625c      	str	r4, [r3, #36]	; 0x24
 8006248:	629c      	str	r4, [r3, #40]	; 0x28
 800624a:	62dc      	str	r4, [r3, #44]	; 0x2c
 800624c:	631c      	str	r4, [r3, #48]	; 0x30
 800624e:	635c      	str	r4, [r3, #52]	; 0x34
 8006250:	639c      	str	r4, [r3, #56]	; 0x38
 8006252:	63dc      	str	r4, [r3, #60]	; 0x3c
 8006254:	3340      	adds	r3, #64	; 0x40
 8006256:	1ad5      	subs	r5, r2, r3
 8006258:	2d3f      	cmp	r5, #63	; 0x3f
 800625a:	dceb      	bgt.n	8006234 <memset+0x38>
 800625c:	e005      	b.n	800626a <memset+0x6e>
 800625e:	601c      	str	r4, [r3, #0]
 8006260:	605c      	str	r4, [r3, #4]
 8006262:	609c      	str	r4, [r3, #8]
 8006264:	60dc      	str	r4, [r3, #12]
 8006266:	3310      	adds	r3, #16
 8006268:	1ad5      	subs	r5, r2, r3
 800626a:	2d0f      	cmp	r5, #15
 800626c:	dcf7      	bgt.n	800625e <memset+0x62>
 800626e:	e001      	b.n	8006274 <memset+0x78>
 8006270:	c310      	stmia	r3!, {r4}
 8006272:	1ad5      	subs	r5, r2, r3
 8006274:	2d03      	cmp	r5, #3
 8006276:	dcfb      	bgt.n	8006270 <memset+0x74>
 8006278:	4293      	cmp	r3, r2
 800627a:	d2ca      	bcs.n	8006212 <memset+0x16>
 800627c:	7019      	strb	r1, [r3, #0]
 800627e:	3301      	adds	r3, #1
 8006280:	4293      	cmp	r3, r2
 8006282:	d1fb      	bne.n	800627c <memset+0x80>
 8006284:	e7c5      	b.n	8006212 <memset+0x16>
 8006286:	46c0      	nop			; (mov r8, r8)

08006288 <strchr>:
 8006288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800628a:	b2c9      	uxtb	r1, r1
 800628c:	1c03      	adds	r3, r0, #0
 800628e:	2900      	cmp	r1, #0
 8006290:	d03c      	beq.n	800630c <strchr+0x84>
 8006292:	0798      	lsls	r0, r3, #30
 8006294:	d062      	beq.n	800635c <strchr+0xd4>
 8006296:	781a      	ldrb	r2, [r3, #0]
 8006298:	2000      	movs	r0, #0
 800629a:	2a00      	cmp	r2, #0
 800629c:	d035      	beq.n	800630a <strchr+0x82>
 800629e:	1c18      	adds	r0, r3, #0
 80062a0:	4291      	cmp	r1, r2
 80062a2:	d032      	beq.n	800630a <strchr+0x82>
 80062a4:	2203      	movs	r2, #3
 80062a6:	e004      	b.n	80062b2 <strchr+0x2a>
 80062a8:	7803      	ldrb	r3, [r0, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d054      	beq.n	8006358 <strchr+0xd0>
 80062ae:	4299      	cmp	r1, r3
 80062b0:	d02b      	beq.n	800630a <strchr+0x82>
 80062b2:	3001      	adds	r0, #1
 80062b4:	4210      	tst	r0, r2
 80062b6:	d1f7      	bne.n	80062a8 <strchr+0x20>
 80062b8:	020e      	lsls	r6, r1, #8
 80062ba:	430e      	orrs	r6, r1
 80062bc:	0433      	lsls	r3, r6, #16
 80062be:	431e      	orrs	r6, r3
 80062c0:	4f27      	ldr	r7, [pc, #156]	; (8006360 <strchr+0xd8>)
 80062c2:	6803      	ldr	r3, [r0, #0]
 80062c4:	4c27      	ldr	r4, [pc, #156]	; (8006364 <strchr+0xdc>)
 80062c6:	19da      	adds	r2, r3, r7
 80062c8:	439a      	bics	r2, r3
 80062ca:	4222      	tst	r2, r4
 80062cc:	d113      	bne.n	80062f6 <strchr+0x6e>
 80062ce:	4073      	eors	r3, r6
 80062d0:	19da      	adds	r2, r3, r7
 80062d2:	439a      	bics	r2, r3
 80062d4:	4222      	tst	r2, r4
 80062d6:	d10e      	bne.n	80062f6 <strchr+0x6e>
 80062d8:	1d02      	adds	r2, r0, #4
 80062da:	e005      	b.n	80062e8 <strchr+0x60>
 80062dc:	4f20      	ldr	r7, [pc, #128]	; (8006360 <strchr+0xd8>)
 80062de:	4073      	eors	r3, r6
 80062e0:	19dd      	adds	r5, r3, r7
 80062e2:	439d      	bics	r5, r3
 80062e4:	4225      	tst	r5, r4
 80062e6:	d106      	bne.n	80062f6 <strchr+0x6e>
 80062e8:	1c10      	adds	r0, r2, #0
 80062ea:	4f1d      	ldr	r7, [pc, #116]	; (8006360 <strchr+0xd8>)
 80062ec:	ca08      	ldmia	r2!, {r3}
 80062ee:	19dd      	adds	r5, r3, r7
 80062f0:	439d      	bics	r5, r3
 80062f2:	4225      	tst	r5, r4
 80062f4:	d0f2      	beq.n	80062dc <strchr+0x54>
 80062f6:	7803      	ldrb	r3, [r0, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <strchr+0x7e>
 80062fc:	e02c      	b.n	8006358 <strchr+0xd0>
 80062fe:	7843      	ldrb	r3, [r0, #1]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d029      	beq.n	8006358 <strchr+0xd0>
 8006304:	3001      	adds	r0, #1
 8006306:	4299      	cmp	r1, r3
 8006308:	d1f9      	bne.n	80062fe <strchr+0x76>
 800630a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800630c:	0782      	lsls	r2, r0, #30
 800630e:	d00b      	beq.n	8006328 <strchr+0xa0>
 8006310:	7802      	ldrb	r2, [r0, #0]
 8006312:	2a00      	cmp	r2, #0
 8006314:	d0f9      	beq.n	800630a <strchr+0x82>
 8006316:	2203      	movs	r2, #3
 8006318:	e002      	b.n	8006320 <strchr+0x98>
 800631a:	7803      	ldrb	r3, [r0, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f4      	beq.n	800630a <strchr+0x82>
 8006320:	3001      	adds	r0, #1
 8006322:	4210      	tst	r0, r2
 8006324:	d1f9      	bne.n	800631a <strchr+0x92>
 8006326:	1c03      	adds	r3, r0, #0
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	4c0d      	ldr	r4, [pc, #52]	; (8006360 <strchr+0xd8>)
 800632c:	1c18      	adds	r0, r3, #0
 800632e:	1911      	adds	r1, r2, r4
 8006330:	4c0c      	ldr	r4, [pc, #48]	; (8006364 <strchr+0xdc>)
 8006332:	4391      	bics	r1, r2
 8006334:	4221      	tst	r1, r4
 8006336:	d107      	bne.n	8006348 <strchr+0xc0>
 8006338:	3304      	adds	r3, #4
 800633a:	1c18      	adds	r0, r3, #0
 800633c:	4d08      	ldr	r5, [pc, #32]	; (8006360 <strchr+0xd8>)
 800633e:	cb04      	ldmia	r3!, {r2}
 8006340:	1951      	adds	r1, r2, r5
 8006342:	4391      	bics	r1, r2
 8006344:	4221      	tst	r1, r4
 8006346:	d0f8      	beq.n	800633a <strchr+0xb2>
 8006348:	7803      	ldrb	r3, [r0, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0dd      	beq.n	800630a <strchr+0x82>
 800634e:	3001      	adds	r0, #1
 8006350:	7803      	ldrb	r3, [r0, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1fb      	bne.n	800634e <strchr+0xc6>
 8006356:	e7d8      	b.n	800630a <strchr+0x82>
 8006358:	2000      	movs	r0, #0
 800635a:	e7d6      	b.n	800630a <strchr+0x82>
 800635c:	1c18      	adds	r0, r3, #0
 800635e:	e7ab      	b.n	80062b8 <strchr+0x30>
 8006360:	fefefeff 	.word	0xfefefeff
 8006364:	80808080 	.word	0x80808080

08006368 <strcmp>:
 8006368:	7802      	ldrb	r2, [r0, #0]
 800636a:	780b      	ldrb	r3, [r1, #0]
 800636c:	3001      	adds	r0, #1
 800636e:	3101      	adds	r1, #1
 8006370:	2a00      	cmp	r2, #0
 8006372:	d001      	beq.n	8006378 <strcmp+0x10>
 8006374:	429a      	cmp	r2, r3
 8006376:	d0f7      	beq.n	8006368 <strcmp>
 8006378:	1ad0      	subs	r0, r2, r3
 800637a:	4770      	bx	lr

0800637c <strcpy>:
 800637c:	1c03      	adds	r3, r0, #0
 800637e:	780a      	ldrb	r2, [r1, #0]
 8006380:	3101      	adds	r1, #1
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	3301      	adds	r3, #1
 8006386:	2a00      	cmp	r2, #0
 8006388:	d1f9      	bne.n	800637e <strcpy+0x2>
 800638a:	4770      	bx	lr

0800638c <strncmp>:
 800638c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800638e:	2500      	movs	r5, #0
 8006390:	2a00      	cmp	r2, #0
 8006392:	d037      	beq.n	8006404 <strncmp+0x78>
 8006394:	1c0b      	adds	r3, r1, #0
 8006396:	4303      	orrs	r3, r0
 8006398:	2403      	movs	r4, #3
 800639a:	4023      	ands	r3, r4
 800639c:	d134      	bne.n	8006408 <strncmp+0x7c>
 800639e:	2a03      	cmp	r2, #3
 80063a0:	d932      	bls.n	8006408 <strncmp+0x7c>
 80063a2:	6804      	ldr	r4, [r0, #0]
 80063a4:	680d      	ldr	r5, [r1, #0]
 80063a6:	42ac      	cmp	r4, r5
 80063a8:	d12e      	bne.n	8006408 <strncmp+0x7c>
 80063aa:	3a04      	subs	r2, #4
 80063ac:	1c1d      	adds	r5, r3, #0
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	d028      	beq.n	8006404 <strncmp+0x78>
 80063b2:	4e23      	ldr	r6, [pc, #140]	; (8006440 <strncmp+0xb4>)
 80063b4:	19a5      	adds	r5, r4, r6
 80063b6:	43a5      	bics	r5, r4
 80063b8:	4e22      	ldr	r6, [pc, #136]	; (8006444 <strncmp+0xb8>)
 80063ba:	1c2c      	adds	r4, r5, #0
 80063bc:	1c1d      	adds	r5, r3, #0
 80063be:	4234      	tst	r4, r6
 80063c0:	d120      	bne.n	8006404 <strncmp+0x78>
 80063c2:	1d05      	adds	r5, r0, #4
 80063c4:	1d0c      	adds	r4, r1, #4
 80063c6:	46b4      	mov	ip, r6
 80063c8:	e00f      	b.n	80063ea <strncmp+0x5e>
 80063ca:	cd08      	ldmia	r5!, {r3}
 80063cc:	cc02      	ldmia	r4!, {r1}
 80063ce:	428b      	cmp	r3, r1
 80063d0:	d111      	bne.n	80063f6 <strncmp+0x6a>
 80063d2:	3a04      	subs	r2, #4
 80063d4:	2a00      	cmp	r2, #0
 80063d6:	d030      	beq.n	800643a <strncmp+0xae>
 80063d8:	1c39      	adds	r1, r7, #0
 80063da:	4f19      	ldr	r7, [pc, #100]	; (8006440 <strncmp+0xb4>)
 80063dc:	1c30      	adds	r0, r6, #0
 80063de:	19de      	adds	r6, r3, r7
 80063e0:	439e      	bics	r6, r3
 80063e2:	1c33      	adds	r3, r6, #0
 80063e4:	4666      	mov	r6, ip
 80063e6:	4233      	tst	r3, r6
 80063e8:	d127      	bne.n	800643a <strncmp+0xae>
 80063ea:	1d06      	adds	r6, r0, #4
 80063ec:	1d0f      	adds	r7, r1, #4
 80063ee:	2a03      	cmp	r2, #3
 80063f0:	d8eb      	bhi.n	80063ca <strncmp+0x3e>
 80063f2:	2a00      	cmp	r2, #0
 80063f4:	d003      	beq.n	80063fe <strncmp+0x72>
 80063f6:	3a01      	subs	r2, #1
 80063f8:	1c39      	adds	r1, r7, #0
 80063fa:	1c30      	adds	r0, r6, #0
 80063fc:	e005      	b.n	800640a <strncmp+0x7e>
 80063fe:	7904      	ldrb	r4, [r0, #4]
 8006400:	790d      	ldrb	r5, [r1, #4]
 8006402:	1b65      	subs	r5, r4, r5
 8006404:	1c28      	adds	r0, r5, #0
 8006406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006408:	3a01      	subs	r2, #1
 800640a:	7804      	ldrb	r4, [r0, #0]
 800640c:	780d      	ldrb	r5, [r1, #0]
 800640e:	42ac      	cmp	r4, r5
 8006410:	d1f7      	bne.n	8006402 <strncmp+0x76>
 8006412:	2500      	movs	r5, #0
 8006414:	2a00      	cmp	r2, #0
 8006416:	d0f5      	beq.n	8006404 <strncmp+0x78>
 8006418:	2c00      	cmp	r4, #0
 800641a:	d0f3      	beq.n	8006404 <strncmp+0x78>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	3101      	adds	r1, #1
 8006420:	1880      	adds	r0, r0, r2
 8006422:	e005      	b.n	8006430 <strncmp+0xa4>
 8006424:	4283      	cmp	r3, r0
 8006426:	d008      	beq.n	800643a <strncmp+0xae>
 8006428:	2c00      	cmp	r4, #0
 800642a:	d006      	beq.n	800643a <strncmp+0xae>
 800642c:	3301      	adds	r3, #1
 800642e:	3101      	adds	r1, #1
 8006430:	781c      	ldrb	r4, [r3, #0]
 8006432:	780d      	ldrb	r5, [r1, #0]
 8006434:	42ac      	cmp	r4, r5
 8006436:	d0f5      	beq.n	8006424 <strncmp+0x98>
 8006438:	e7e3      	b.n	8006402 <strncmp+0x76>
 800643a:	2500      	movs	r5, #0
 800643c:	e7e2      	b.n	8006404 <strncmp+0x78>
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	fefefeff 	.word	0xfefefeff
 8006444:	80808080 	.word	0x80808080

08006448 <strncpy>:
 8006448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800644a:	1c0e      	adds	r6, r1, #0
 800644c:	4306      	orrs	r6, r0
 800644e:	2403      	movs	r4, #3
 8006450:	1c0d      	adds	r5, r1, #0
 8006452:	1c03      	adds	r3, r0, #0
 8006454:	4234      	tst	r4, r6
 8006456:	d101      	bne.n	800645c <strncpy+0x14>
 8006458:	4294      	cmp	r4, r2
 800645a:	d31b      	bcc.n	8006494 <strncpy+0x4c>
 800645c:	1c03      	adds	r3, r0, #0
 800645e:	2a00      	cmp	r2, #0
 8006460:	d017      	beq.n	8006492 <strncpy+0x4a>
 8006462:	780c      	ldrb	r4, [r1, #0]
 8006464:	3a01      	subs	r2, #1
 8006466:	701c      	strb	r4, [r3, #0]
 8006468:	3101      	adds	r1, #1
 800646a:	3301      	adds	r3, #1
 800646c:	2c00      	cmp	r4, #0
 800646e:	d008      	beq.n	8006482 <strncpy+0x3a>
 8006470:	2a00      	cmp	r2, #0
 8006472:	d00e      	beq.n	8006492 <strncpy+0x4a>
 8006474:	780c      	ldrb	r4, [r1, #0]
 8006476:	3a01      	subs	r2, #1
 8006478:	701c      	strb	r4, [r3, #0]
 800647a:	3101      	adds	r1, #1
 800647c:	3301      	adds	r3, #1
 800647e:	2c00      	cmp	r4, #0
 8006480:	d1f6      	bne.n	8006470 <strncpy+0x28>
 8006482:	189c      	adds	r4, r3, r2
 8006484:	2100      	movs	r1, #0
 8006486:	2a00      	cmp	r2, #0
 8006488:	d003      	beq.n	8006492 <strncpy+0x4a>
 800648a:	7019      	strb	r1, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	42a3      	cmp	r3, r4
 8006490:	d1fb      	bne.n	800648a <strncpy+0x42>
 8006492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006494:	4f07      	ldr	r7, [pc, #28]	; (80064b4 <strncpy+0x6c>)
 8006496:	46ac      	mov	ip, r5
 8006498:	4907      	ldr	r1, [pc, #28]	; (80064b8 <strncpy+0x70>)
 800649a:	cd10      	ldmia	r5!, {r4}
 800649c:	1866      	adds	r6, r4, r1
 800649e:	43a6      	bics	r6, r4
 80064a0:	423e      	tst	r6, r7
 80064a2:	d105      	bne.n	80064b0 <strncpy+0x68>
 80064a4:	3a04      	subs	r2, #4
 80064a6:	c310      	stmia	r3!, {r4}
 80064a8:	2a03      	cmp	r2, #3
 80064aa:	d8f4      	bhi.n	8006496 <strncpy+0x4e>
 80064ac:	1c29      	adds	r1, r5, #0
 80064ae:	e7d6      	b.n	800645e <strncpy+0x16>
 80064b0:	4661      	mov	r1, ip
 80064b2:	e7d4      	b.n	800645e <strncpy+0x16>
 80064b4:	80808080 	.word	0x80808080
 80064b8:	fefefeff 	.word	0xfefefeff

080064bc <_strtol_r>:
 80064bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064be:	465f      	mov	r7, fp
 80064c0:	4656      	mov	r6, sl
 80064c2:	464d      	mov	r5, r9
 80064c4:	4644      	mov	r4, r8
 80064c6:	b4f0      	push	{r4, r5, r6, r7}
 80064c8:	4698      	mov	r8, r3
 80064ca:	4b50      	ldr	r3, [pc, #320]	; (800660c <_strtol_r+0x150>)
 80064cc:	b085      	sub	sp, #20
 80064ce:	9100      	str	r1, [sp, #0]
 80064d0:	681f      	ldr	r7, [r3, #0]
 80064d2:	9003      	str	r0, [sp, #12]
 80064d4:	1c0b      	adds	r3, r1, #0
 80064d6:	9202      	str	r2, [sp, #8]
 80064d8:	2108      	movs	r1, #8
 80064da:	e000      	b.n	80064de <_strtol_r+0x22>
 80064dc:	1c2b      	adds	r3, r5, #0
 80064de:	781c      	ldrb	r4, [r3, #0]
 80064e0:	1c5d      	adds	r5, r3, #1
 80064e2:	193a      	adds	r2, r7, r4
 80064e4:	7852      	ldrb	r2, [r2, #1]
 80064e6:	4211      	tst	r1, r2
 80064e8:	d1f8      	bne.n	80064dc <_strtol_r+0x20>
 80064ea:	2c2d      	cmp	r4, #45	; 0x2d
 80064ec:	d06c      	beq.n	80065c8 <_strtol_r+0x10c>
 80064ee:	2600      	movs	r6, #0
 80064f0:	9601      	str	r6, [sp, #4]
 80064f2:	2c2b      	cmp	r4, #43	; 0x2b
 80064f4:	d100      	bne.n	80064f8 <_strtol_r+0x3c>
 80064f6:	e076      	b.n	80065e6 <_strtol_r+0x12a>
 80064f8:	4640      	mov	r0, r8
 80064fa:	4243      	negs	r3, r0
 80064fc:	4143      	adcs	r3, r0
 80064fe:	2810      	cmp	r0, #16
 8006500:	d04f      	beq.n	80065a2 <_strtol_r+0xe6>
 8006502:	46c2      	mov	sl, r8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d14c      	bne.n	80065a2 <_strtol_r+0xe6>
 8006508:	9e01      	ldr	r6, [sp, #4]
 800650a:	4651      	mov	r1, sl
 800650c:	4273      	negs	r3, r6
 800650e:	4173      	adcs	r3, r6
 8006510:	2680      	movs	r6, #128	; 0x80
 8006512:	0636      	lsls	r6, r6, #24
 8006514:	1af6      	subs	r6, r6, r3
 8006516:	1c30      	adds	r0, r6, #0
 8006518:	f7fc fe5a 	bl	80031d0 <__aeabi_uidivmod>
 800651c:	1c30      	adds	r0, r6, #0
 800651e:	4689      	mov	r9, r1
 8006520:	4651      	mov	r1, sl
 8006522:	f7fc fe11 	bl	8003148 <__aeabi_uidiv>
 8006526:	2603      	movs	r6, #3
 8006528:	2104      	movs	r1, #4
 800652a:	2200      	movs	r2, #0
 800652c:	2300      	movs	r3, #0
 800652e:	468c      	mov	ip, r1
 8006530:	46b3      	mov	fp, r6
 8006532:	e010      	b.n	8006556 <_strtol_r+0x9a>
 8006534:	3c30      	subs	r4, #48	; 0x30
 8006536:	45a0      	cmp	r8, r4
 8006538:	dd1b      	ble.n	8006572 <_strtol_r+0xb6>
 800653a:	4298      	cmp	r0, r3
 800653c:	d33c      	bcc.n	80065b8 <_strtol_r+0xfc>
 800653e:	2a00      	cmp	r2, #0
 8006540:	db3a      	blt.n	80065b8 <_strtol_r+0xfc>
 8006542:	454c      	cmp	r4, r9
 8006544:	dd01      	ble.n	800654a <_strtol_r+0x8e>
 8006546:	4283      	cmp	r3, r0
 8006548:	d036      	beq.n	80065b8 <_strtol_r+0xfc>
 800654a:	4651      	mov	r1, sl
 800654c:	434b      	muls	r3, r1
 800654e:	2201      	movs	r2, #1
 8006550:	18e3      	adds	r3, r4, r3
 8006552:	782c      	ldrb	r4, [r5, #0]
 8006554:	3501      	adds	r5, #1
 8006556:	1939      	adds	r1, r7, r4
 8006558:	7849      	ldrb	r1, [r1, #1]
 800655a:	4666      	mov	r6, ip
 800655c:	420e      	tst	r6, r1
 800655e:	d1e9      	bne.n	8006534 <_strtol_r+0x78>
 8006560:	465e      	mov	r6, fp
 8006562:	4031      	ands	r1, r6
 8006564:	d005      	beq.n	8006572 <_strtol_r+0xb6>
 8006566:	2657      	movs	r6, #87	; 0x57
 8006568:	2901      	cmp	r1, #1
 800656a:	d017      	beq.n	800659c <_strtol_r+0xe0>
 800656c:	1ba4      	subs	r4, r4, r6
 800656e:	45a0      	cmp	r8, r4
 8006570:	dce3      	bgt.n	800653a <_strtol_r+0x7e>
 8006572:	1c56      	adds	r6, r2, #1
 8006574:	d02d      	beq.n	80065d2 <_strtol_r+0x116>
 8006576:	9e01      	ldr	r6, [sp, #4]
 8006578:	4258      	negs	r0, r3
 800657a:	2e00      	cmp	r6, #0
 800657c:	d022      	beq.n	80065c4 <_strtol_r+0x108>
 800657e:	9e02      	ldr	r6, [sp, #8]
 8006580:	2e00      	cmp	r6, #0
 8006582:	d004      	beq.n	800658e <_strtol_r+0xd2>
 8006584:	2a00      	cmp	r2, #0
 8006586:	d11a      	bne.n	80065be <_strtol_r+0x102>
 8006588:	9e00      	ldr	r6, [sp, #0]
 800658a:	9902      	ldr	r1, [sp, #8]
 800658c:	600e      	str	r6, [r1, #0]
 800658e:	b005      	add	sp, #20
 8006590:	bc3c      	pop	{r2, r3, r4, r5}
 8006592:	4690      	mov	r8, r2
 8006594:	4699      	mov	r9, r3
 8006596:	46a2      	mov	sl, r4
 8006598:	46ab      	mov	fp, r5
 800659a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800659c:	2637      	movs	r6, #55	; 0x37
 800659e:	1ba4      	subs	r4, r4, r6
 80065a0:	e7e5      	b.n	800656e <_strtol_r+0xb2>
 80065a2:	2c30      	cmp	r4, #48	; 0x30
 80065a4:	d022      	beq.n	80065ec <_strtol_r+0x130>
 80065a6:	46c2      	mov	sl, r8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0ad      	beq.n	8006508 <_strtol_r+0x4c>
 80065ac:	2c30      	cmp	r4, #48	; 0x30
 80065ae:	d028      	beq.n	8006602 <_strtol_r+0x146>
 80065b0:	230a      	movs	r3, #10
 80065b2:	469a      	mov	sl, r3
 80065b4:	4698      	mov	r8, r3
 80065b6:	e7a7      	b.n	8006508 <_strtol_r+0x4c>
 80065b8:	2201      	movs	r2, #1
 80065ba:	4252      	negs	r2, r2
 80065bc:	e7c9      	b.n	8006552 <_strtol_r+0x96>
 80065be:	3d01      	subs	r5, #1
 80065c0:	9500      	str	r5, [sp, #0]
 80065c2:	e7e1      	b.n	8006588 <_strtol_r+0xcc>
 80065c4:	1c18      	adds	r0, r3, #0
 80065c6:	e7da      	b.n	800657e <_strtol_r+0xc2>
 80065c8:	2601      	movs	r6, #1
 80065ca:	785c      	ldrb	r4, [r3, #1]
 80065cc:	1c9d      	adds	r5, r3, #2
 80065ce:	9601      	str	r6, [sp, #4]
 80065d0:	e792      	b.n	80064f8 <_strtol_r+0x3c>
 80065d2:	9e01      	ldr	r6, [sp, #4]
 80065d4:	2080      	movs	r0, #128	; 0x80
 80065d6:	4273      	negs	r3, r6
 80065d8:	4173      	adcs	r3, r6
 80065da:	0600      	lsls	r0, r0, #24
 80065dc:	9e03      	ldr	r6, [sp, #12]
 80065de:	1ac0      	subs	r0, r0, r3
 80065e0:	2322      	movs	r3, #34	; 0x22
 80065e2:	6033      	str	r3, [r6, #0]
 80065e4:	e7cb      	b.n	800657e <_strtol_r+0xc2>
 80065e6:	785c      	ldrb	r4, [r3, #1]
 80065e8:	1c9d      	adds	r5, r3, #2
 80065ea:	e785      	b.n	80064f8 <_strtol_r+0x3c>
 80065ec:	782a      	ldrb	r2, [r5, #0]
 80065ee:	2a58      	cmp	r2, #88	; 0x58
 80065f0:	d001      	beq.n	80065f6 <_strtol_r+0x13a>
 80065f2:	2a78      	cmp	r2, #120	; 0x78
 80065f4:	d1d7      	bne.n	80065a6 <_strtol_r+0xea>
 80065f6:	2110      	movs	r1, #16
 80065f8:	786c      	ldrb	r4, [r5, #1]
 80065fa:	468a      	mov	sl, r1
 80065fc:	3502      	adds	r5, #2
 80065fe:	4688      	mov	r8, r1
 8006600:	e782      	b.n	8006508 <_strtol_r+0x4c>
 8006602:	2208      	movs	r2, #8
 8006604:	4692      	mov	sl, r2
 8006606:	4690      	mov	r8, r2
 8006608:	e77e      	b.n	8006508 <_strtol_r+0x4c>
 800660a:	46c0      	nop			; (mov r8, r8)
 800660c:	200004f8 	.word	0x200004f8

08006610 <strtol>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	1c13      	adds	r3, r2, #0
 8006614:	4a04      	ldr	r2, [pc, #16]	; (8006628 <strtol+0x18>)
 8006616:	1c05      	adds	r5, r0, #0
 8006618:	1c0c      	adds	r4, r1, #0
 800661a:	6810      	ldr	r0, [r2, #0]
 800661c:	1c29      	adds	r1, r5, #0
 800661e:	1c22      	adds	r2, r4, #0
 8006620:	f7ff ff4c 	bl	80064bc <_strtol_r>
 8006624:	bd38      	pop	{r3, r4, r5, pc}
 8006626:	46c0      	nop			; (mov r8, r8)
 8006628:	200000c8 	.word	0x200000c8
 800662c:	00000000 	.word	0x00000000

08006630 <calcMA>:
			.size 		= 0,
			.lastEMA 	= 0
};

double calcMA(double previousAverage, unsigned int previousNumDays,
		double newStock) {
 8006630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006632:	1c04      	adds	r4, r0, #0

	double result = 0;
	result = previousNumDays * previousAverage + newStock;
 8006634:	1c10      	adds	r0, r2, #0
			.size 		= 0,
			.lastEMA 	= 0
};

double calcMA(double previousAverage, unsigned int previousNumDays,
		double newStock) {
 8006636:	1c0d      	adds	r5, r1, #0

	double result = 0;
	result = previousNumDays * previousAverage + newStock;
 8006638:	f7ff fae0 	bl	8005bfc <__aeabi_ui2d>
 800663c:	1c22      	adds	r2, r4, #0
 800663e:	1c2b      	adds	r3, r5, #0
 8006640:	1c06      	adds	r6, r0, #0
 8006642:	1c0f      	adds	r7, r1, #0
 8006644:	f7fe fc8a 	bl	8004f5c <__aeabi_dmul>
 8006648:	9a06      	ldr	r2, [sp, #24]
 800664a:	9b07      	ldr	r3, [sp, #28]
 800664c:	f7fd fd1a 	bl	8004084 <__aeabi_dadd>
	return result / (previousNumDays + 1.0);
 8006650:	4b08      	ldr	r3, [pc, #32]	; (8006674 <calcMA+0x44>)
 8006652:	4a07      	ldr	r2, [pc, #28]	; (8006670 <calcMA+0x40>)

double calcMA(double previousAverage, unsigned int previousNumDays,
		double newStock) {

	double result = 0;
	result = previousNumDays * previousAverage + newStock;
 8006654:	1c0d      	adds	r5, r1, #0
 8006656:	1c04      	adds	r4, r0, #0
	return result / (previousNumDays + 1.0);
 8006658:	1c39      	adds	r1, r7, #0
 800665a:	1c30      	adds	r0, r6, #0
 800665c:	f7fd fd12 	bl	8004084 <__aeabi_dadd>
 8006660:	1c02      	adds	r2, r0, #0
 8006662:	1c0b      	adds	r3, r1, #0
 8006664:	1c20      	adds	r0, r4, #0
 8006666:	1c29      	adds	r1, r5, #0
 8006668:	f7fe f87a 	bl	8004760 <__aeabi_ddiv>

}
 800666c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	00000000 	.word	0x00000000
 8006674:	3ff00000 	.word	0x3ff00000

08006678 <calcEMA>:

double calcEMA(double previousAverage, int timePeriod, double newStock) {
 8006678:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 800667a:	1c06      	adds	r6, r0, #0
 800667c:	1c0f      	adds	r7, r1, #0
	double result = 0, mult = 0;
	mult = 2.0 / (timePeriod + 1.0);
	result = (newStock - previousAverage) * mult + previousAverage;
 800667e:	1c3b      	adds	r3, r7, #0
	result = previousNumDays * previousAverage + newStock;
	return result / (previousNumDays + 1.0);

}

double calcEMA(double previousAverage, int timePeriod, double newStock) {
 8006680:	1c14      	adds	r4, r2, #0
	double result = 0, mult = 0;
	mult = 2.0 / (timePeriod + 1.0);
	result = (newStock - previousAverage) * mult + previousAverage;
 8006682:	9806      	ldr	r0, [sp, #24]
 8006684:	9907      	ldr	r1, [sp, #28]
 8006686:	1c32      	adds	r2, r6, #0
 8006688:	f7fe feb2 	bl	80053f0 <__aeabi_dsub>
 800668c:	9000      	str	r0, [sp, #0]
 800668e:	9101      	str	r1, [sp, #4]

}

double calcEMA(double previousAverage, int timePeriod, double newStock) {
	double result = 0, mult = 0;
	mult = 2.0 / (timePeriod + 1.0);
 8006690:	1c20      	adds	r0, r4, #0
 8006692:	f7ff fa77 	bl	8005b84 <__aeabi_i2d>
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <calcEMA+0x4c>)
 8006698:	4a09      	ldr	r2, [pc, #36]	; (80066c0 <calcEMA+0x48>)
 800669a:	f7fd fcf3 	bl	8004084 <__aeabi_dadd>
 800669e:	1c02      	adds	r2, r0, #0
 80066a0:	1c0b      	adds	r3, r1, #0
 80066a2:	4809      	ldr	r0, [pc, #36]	; (80066c8 <calcEMA+0x50>)
 80066a4:	4909      	ldr	r1, [pc, #36]	; (80066cc <calcEMA+0x54>)
 80066a6:	f7fe f85b 	bl	8004760 <__aeabi_ddiv>
 80066aa:	1c02      	adds	r2, r0, #0
 80066ac:	1c0b      	adds	r3, r1, #0
	result = (newStock - previousAverage) * mult + previousAverage;
 80066ae:	9800      	ldr	r0, [sp, #0]
 80066b0:	9901      	ldr	r1, [sp, #4]
 80066b2:	f7fe fc53 	bl	8004f5c <__aeabi_dmul>
 80066b6:	1c32      	adds	r2, r6, #0
 80066b8:	1c3b      	adds	r3, r7, #0
 80066ba:	f7fd fce3 	bl	8004084 <__aeabi_dadd>
	return result;

}
 80066be:	bddc      	pop	{r2, r3, r4, r6, r7, pc}
 80066c0:	00000000 	.word	0x00000000
 80066c4:	3ff00000 	.word	0x3ff00000
 80066c8:	00000000 	.word	0x00000000
 80066cc:	40000000 	.word	0x40000000

080066d0 <addStock>:

void addStock(double newStock, EMA_t*EMA){
 80066d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066d2:	1c14      	adds	r4, r2, #0
	EMA->size++;
 80066d4:	6852      	ldr	r2, [r2, #4]
	if(EMA->size < EMA->timePreiod){
 80066d6:	8823      	ldrh	r3, [r4, #0]
	return result;

}

void addStock(double newStock, EMA_t*EMA){
	EMA->size++;
 80066d8:	1c55      	adds	r5, r2, #1
	if(EMA->size < EMA->timePreiod){
		EMA->lastEMA = calcMA(EMA->lastEMA, EMA->size -1 , newStock);
 80066da:	9000      	str	r0, [sp, #0]
 80066dc:	9101      	str	r1, [sp, #4]
 80066de:	68a0      	ldr	r0, [r4, #8]
 80066e0:	68e1      	ldr	r1, [r4, #12]
	return result;

}

void addStock(double newStock, EMA_t*EMA){
	EMA->size++;
 80066e2:	6065      	str	r5, [r4, #4]
	if(EMA->size < EMA->timePreiod){
 80066e4:	429d      	cmp	r5, r3
 80066e6:	d202      	bcs.n	80066ee <addStock+0x1e>
		EMA->lastEMA = calcMA(EMA->lastEMA, EMA->size -1 , newStock);
 80066e8:	f7ff ffa2 	bl	8006630 <calcMA>
 80066ec:	e002      	b.n	80066f4 <addStock+0x24>
	} else{
		EMA->lastEMA = calcEMA(EMA->lastEMA, EMA->timePreiod, newStock);
 80066ee:	1c1a      	adds	r2, r3, #0
 80066f0:	f7ff ffc2 	bl	8006678 <calcEMA>
 80066f4:	60a0      	str	r0, [r4, #8]
 80066f6:	60e1      	str	r1, [r4, #12]
	}
}
 80066f8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80066fa:	0000      	movs	r0, r0
 80066fc:	0000      	movs	r0, r0
	...

08006700 <Start_Kalman_Algorithm>:
static float Calculated_Pitch, Calculated_Roll, Calculated_yaw,Tick_frequency;

extern void IWDT_clear(void);

void Start_Kalman_Algorithm(float executeMaxTicks, float timebase)
{
 8006700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006702:	b089      	sub	sp, #36	; 0x24
    double accX, accY, accZ; 
  
    /* We will set the variables like so, these can also be tuned by the user */
    KalmanX.Q_angle      = 0.001f;
 8006704:	4c3e      	ldr	r4, [pc, #248]	; (8006800 <Start_Kalman_Algorithm+0x100>)
    KalmanX.P[0][0]      = 0.0f; 
    KalmanX.P[0][1]      = 0.0f;
    KalmanX.P[1][0]      = 0.0f;
    KalmanX.P[1][1]      = 0.0f;
    
    KalmanY.Q_angle      = 0.001f;
 8006706:	4d3f      	ldr	r5, [pc, #252]	; (8006804 <Start_Kalman_Algorithm+0x104>)
    double accX, accY, accZ; 
  
    /* We will set the variables like so, these can also be tuned by the user */
    KalmanX.Q_angle      = 0.001f;
    KalmanX.Q_bias       = 0.003f;
    KalmanX.R_measure    = 0.03f;
 8006708:	4a3f      	ldr	r2, [pc, #252]	; (8006808 <Start_Kalman_Algorithm+0x108>)
static float Calculated_Pitch, Calculated_Roll, Calculated_yaw,Tick_frequency;

extern void IWDT_clear(void);

void Start_Kalman_Algorithm(float executeMaxTicks, float timebase)
{
 800670a:	9005      	str	r0, [sp, #20]
 800670c:	9106      	str	r1, [sp, #24]
    double accX, accY, accZ; 
  
    /* We will set the variables like so, these can also be tuned by the user */
    KalmanX.Q_angle      = 0.001f;
 800670e:	483f      	ldr	r0, [pc, #252]	; (800680c <Start_Kalman_Algorithm+0x10c>)
    KalmanX.Q_bias       = 0.003f;
 8006710:	493f      	ldr	r1, [pc, #252]	; (8006810 <Start_Kalman_Algorithm+0x110>)
    KalmanX.R_measure    = 0.03f;
    KalmanX.angle        = 0.0f;     
 8006712:	2300      	movs	r3, #0
    double accX, accY, accZ; 
  
    /* We will set the variables like so, these can also be tuned by the user */
    KalmanX.Q_angle      = 0.001f;
    KalmanX.Q_bias       = 0.003f;
    KalmanX.R_measure    = 0.03f;
 8006714:	60a2      	str	r2, [r4, #8]
    KalmanX.angle        = 0.0f;     
 8006716:	60e3      	str	r3, [r4, #12]
    KalmanX.bias         = 0.0f;
 8006718:	6123      	str	r3, [r4, #16]
    KalmanX.P[0][0]      = 0.0f; 
 800671a:	61a3      	str	r3, [r4, #24]
    KalmanX.P[0][1]      = 0.0f;
 800671c:	61e3      	str	r3, [r4, #28]
    KalmanX.P[1][0]      = 0.0f;
 800671e:	6223      	str	r3, [r4, #32]
    KalmanX.P[1][1]      = 0.0f;
 8006720:	6263      	str	r3, [r4, #36]	; 0x24
    
    KalmanY.Q_angle      = 0.001f;
    KalmanY.Q_bias       = 0.003f;
    KalmanY.R_measure    = 0.03f;
 8006722:	60aa      	str	r2, [r5, #8]
    KalmanY.angle        = 0.0f;     
 8006724:	60eb      	str	r3, [r5, #12]
    KalmanY.bias         = 0.0f;
 8006726:	612b      	str	r3, [r5, #16]
    KalmanY.P[0][0]      = 0.0f; 
 8006728:	61ab      	str	r3, [r5, #24]
    KalmanY.P[0][1]      = 0.0f;
 800672a:	61eb      	str	r3, [r5, #28]
    KalmanY.P[1][0]      = 0.0f;
 800672c:	622b      	str	r3, [r5, #32]
    KalmanY.P[1][1]      = 0.0f;
 800672e:	626b      	str	r3, [r5, #36]	; 0x24
{
    double accX, accY, accZ; 
  
    /* We will set the variables like so, these can also be tuned by the user */
    KalmanX.Q_angle      = 0.001f;
    KalmanX.Q_bias       = 0.003f;
 8006730:	6061      	str	r1, [r4, #4]
    KalmanX.P[0][1]      = 0.0f;
    KalmanX.P[1][0]      = 0.0f;
    KalmanX.P[1][1]      = 0.0f;
    
    KalmanY.Q_angle      = 0.001f;
    KalmanY.Q_bias       = 0.003f;
 8006732:	6069      	str	r1, [r5, #4]
void Start_Kalman_Algorithm(float executeMaxTicks, float timebase)
{
    double accX, accY, accZ; 
  
    /* We will set the variables like so, these can also be tuned by the user */
    KalmanX.Q_angle      = 0.001f;
 8006734:	6020      	str	r0, [r4, #0]
    KalmanX.P[0][0]      = 0.0f; 
    KalmanX.P[0][1]      = 0.0f;
    KalmanX.P[1][0]      = 0.0f;
    KalmanX.P[1][1]      = 0.0f;
    
    KalmanY.Q_angle      = 0.001f;
 8006736:	6028      	str	r0, [r5, #0]
    KalmanY.P[0][1]      = 0.0f;
    KalmanY.P[1][0]      = 0.0f;
    KalmanY.P[1][1]      = 0.0f;
    
    
    LSM6DS3_IMU_GetMeasurements();
 8006738:	f000 fb98 	bl	8006e6c <LSM6DS3_IMU_GetMeasurements>
    accX =   LSM6DS3_GetXL_X_Int16();
 800673c:	f000 fbd0 	bl	8006ee0 <LSM6DS3_GetXL_X_Int16>
 8006740:	9007      	str	r0, [sp, #28]
    accY =   LSM6DS3_GetXL_Y_Int16();
 8006742:	f000 fbd3 	bl	8006eec <LSM6DS3_GetXL_Y_Int16>
 8006746:	f7ff fa1d 	bl	8005b84 <__aeabi_i2d>
 800674a:	1c0f      	adds	r7, r1, #0
 800674c:	1c06      	adds	r6, r0, #0
    accZ =   LSM6DS3_GetXL_Z_Int16();
 800674e:	f000 fbd3 	bl	8006ef8 <LSM6DS3_GetXL_Z_Int16>
 8006752:	f7ff fa17 	bl	8005b84 <__aeabi_i2d>
 8006756:	9000      	str	r0, [sp, #0]
 8006758:	9101      	str	r1, [sp, #4]
    
    #ifdef RESTRICT_PITCH
        double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 800675a:	9a00      	ldr	r2, [sp, #0]
 800675c:	9b01      	ldr	r3, [sp, #4]
 800675e:	1c30      	adds	r0, r6, #0
 8006760:	1c39      	adds	r1, r7, #0
 8006762:	f7fc fa79 	bl	8002c58 <atan2>
        double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 8006766:	1c32      	adds	r2, r6, #0
    accX =   LSM6DS3_GetXL_X_Int16();
    accY =   LSM6DS3_GetXL_Y_Int16();
    accZ =   LSM6DS3_GetXL_Z_Int16();
    
    #ifdef RESTRICT_PITCH
        double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 8006768:	9002      	str	r0, [sp, #8]
 800676a:	9103      	str	r1, [sp, #12]
        double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 800676c:	1c3b      	adds	r3, r7, #0
 800676e:	1c30      	adds	r0, r6, #0
 8006770:	1c39      	adds	r1, r7, #0
 8006772:	f7fe fbf3 	bl	8004f5c <__aeabi_dmul>
 8006776:	1c06      	adds	r6, r0, #0
 8006778:	1c0f      	adds	r7, r1, #0
 800677a:	9800      	ldr	r0, [sp, #0]
 800677c:	9901      	ldr	r1, [sp, #4]
 800677e:	1c02      	adds	r2, r0, #0
 8006780:	1c0b      	adds	r3, r1, #0
 8006782:	f7fe fbeb 	bl	8004f5c <__aeabi_dmul>
 8006786:	1c02      	adds	r2, r0, #0
 8006788:	1c0b      	adds	r3, r1, #0
 800678a:	1c30      	adds	r0, r6, #0
 800678c:	1c39      	adds	r1, r7, #0
 800678e:	f7fd fc79 	bl	8004084 <__aeabi_dadd>
 8006792:	f7fc fa65 	bl	8002c60 <sqrt>
 8006796:	1c06      	adds	r6, r0, #0
    KalmanY.P[1][0]      = 0.0f;
    KalmanY.P[1][1]      = 0.0f;
    
    
    LSM6DS3_IMU_GetMeasurements();
    accX =   LSM6DS3_GetXL_X_Int16();
 8006798:	9807      	ldr	r0, [sp, #28]
    accY =   LSM6DS3_GetXL_Y_Int16();
    accZ =   LSM6DS3_GetXL_Z_Int16();
    
    #ifdef RESTRICT_PITCH
        double roll  = atan2(accY, accZ) * RAD_TO_DEG;
        double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 800679a:	1c0f      	adds	r7, r1, #0
    KalmanY.P[1][0]      = 0.0f;
    KalmanY.P[1][1]      = 0.0f;
    
    
    LSM6DS3_IMU_GetMeasurements();
    accX =   LSM6DS3_GetXL_X_Int16();
 800679c:	f7ff f9f2 	bl	8005b84 <__aeabi_i2d>
    accY =   LSM6DS3_GetXL_Y_Int16();
    accZ =   LSM6DS3_GetXL_Z_Int16();
    
    #ifdef RESTRICT_PITCH
        double roll  = atan2(accY, accZ) * RAD_TO_DEG;
        double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 80067a0:	2280      	movs	r2, #128	; 0x80
 80067a2:	0612      	lsls	r2, r2, #24
 80067a4:	1c3b      	adds	r3, r7, #0
 80067a6:	1889      	adds	r1, r1, r2
 80067a8:	1c32      	adds	r2, r6, #0
 80067aa:	f7fd ffd9 	bl	8004760 <__aeabi_ddiv>
 80067ae:	f7fc f8b7 	bl	8002920 <atan>
    accX =   LSM6DS3_GetXL_X_Int16();
    accY =   LSM6DS3_GetXL_Y_Int16();
    accZ =   LSM6DS3_GetXL_Z_Int16();
    
    #ifdef RESTRICT_PITCH
        double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 80067b2:	4b12      	ldr	r3, [pc, #72]	; (80067fc <Start_Kalman_Algorithm+0xfc>)
 80067b4:	4a10      	ldr	r2, [pc, #64]	; (80067f8 <Start_Kalman_Algorithm+0xf8>)
        double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 80067b6:	1c06      	adds	r6, r0, #0
 80067b8:	1c0f      	adds	r7, r1, #0
    accX =   LSM6DS3_GetXL_X_Int16();
    accY =   LSM6DS3_GetXL_Y_Int16();
    accZ =   LSM6DS3_GetXL_Z_Int16();
    
    #ifdef RESTRICT_PITCH
        double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 80067ba:	9802      	ldr	r0, [sp, #8]
 80067bc:	9903      	ldr	r1, [sp, #12]
 80067be:	f7fe fbcd 	bl	8004f5c <__aeabi_dmul>
    #else 
        double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
        double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
    #endif
    
   KalmanX.angle    = roll;
 80067c2:	f7ff faa3 	bl	8005d0c <__aeabi_d2f>
    accY =   LSM6DS3_GetXL_Y_Int16();
    accZ =   LSM6DS3_GetXL_Z_Int16();
    
    #ifdef RESTRICT_PITCH
        double roll  = atan2(accY, accZ) * RAD_TO_DEG;
        double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 80067c6:	4b0d      	ldr	r3, [pc, #52]	; (80067fc <Start_Kalman_Algorithm+0xfc>)
 80067c8:	4a0b      	ldr	r2, [pc, #44]	; (80067f8 <Start_Kalman_Algorithm+0xf8>)
    #else 
        double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
        double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
    #endif
    
   KalmanX.angle    = roll;
 80067ca:	60e0      	str	r0, [r4, #12]
    accY =   LSM6DS3_GetXL_Y_Int16();
    accZ =   LSM6DS3_GetXL_Z_Int16();
    
    #ifdef RESTRICT_PITCH
        double roll  = atan2(accY, accZ) * RAD_TO_DEG;
        double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 80067cc:	1c39      	adds	r1, r7, #0
 80067ce:	1c30      	adds	r0, r6, #0
 80067d0:	f7fe fbc4 	bl	8004f5c <__aeabi_dmul>
        double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
        double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
    #endif
    
   KalmanX.angle    = roll;
   KalmanY.angle 	= pitch;
 80067d4:	f7ff fa9a 	bl	8005d0c <__aeabi_d2f>
   Tick_frequency	= timebase;
 80067d8:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <Start_Kalman_Algorithm+0x114>)
 80067da:	9a06      	ldr	r2, [sp, #24]
        double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
        double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
    #endif
    
   KalmanX.angle    = roll;
   KalmanY.angle 	= pitch;
 80067dc:	60e8      	str	r0, [r5, #12]
   Tick_frequency	= timebase;
 80067de:	601a      	str	r2, [r3, #0]
   ExecuteMax	    = executeMaxTicks;
 80067e0:	9805      	ldr	r0, [sp, #20]
 80067e2:	f7fc fd9f 	bl	8003324 <__aeabi_f2uiz>
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <Start_Kalman_Algorithm+0x118>)
   Kalman_Timer  	= 0;
 80067e8:	2200      	movs	r2, #0
    #endif
    
   KalmanX.angle    = roll;
   KalmanY.angle 	= pitch;
   Tick_frequency	= timebase;
   ExecuteMax	    = executeMaxTicks;
 80067ea:	6018      	str	r0, [r3, #0]
   Kalman_Timer  	= 0;
 80067ec:	4b0b      	ldr	r3, [pc, #44]	; (800681c <Start_Kalman_Algorithm+0x11c>)
 80067ee:	601a      	str	r2, [r3, #0]
}
 80067f0:	b009      	add	sp, #36	; 0x24
 80067f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f4:	46c0      	nop			; (mov r8, r8)
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	20000000 	.word	0x20000000
 80067fc:	404ca5dc 	.word	0x404ca5dc
 8006800:	20000a70 	.word	0x20000a70
 8006804:	20000a30 	.word	0x20000a30
 8006808:	3cf5c28f 	.word	0x3cf5c28f
 800680c:	3a83126f 	.word	0x3a83126f
 8006810:	3b449ba6 	.word	0x3b449ba6
 8006814:	200005fc 	.word	0x200005fc
 8006818:	2000061c 	.word	0x2000061c
 800681c:	20000600 	.word	0x20000600

08006820 <Kalman_GetPitch>:
   Calculated_Pitch  = (float) (kalAngleY);
   Calculated_yaw  = (float) (kalAngleZ);
}

float Kalman_GetPitch(void) {
  return Calculated_Pitch;
 8006820:	4b01      	ldr	r3, [pc, #4]	; (8006828 <Kalman_GetPitch+0x8>)
 8006822:	6818      	ldr	r0, [r3, #0]
}
 8006824:	4770      	bx	lr
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	200005f8 	.word	0x200005f8

0800682c <Kalman_GetRoll>:

float Kalman_GetRoll(void) {
  return Calculated_Roll;
 800682c:	4b01      	ldr	r3, [pc, #4]	; (8006834 <Kalman_GetRoll+0x8>)
 800682e:	6818      	ldr	r0, [r3, #0]
}
 8006830:	4770      	bx	lr
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	20000610 	.word	0x20000610

08006838 <Kalman_Getyaw>:

float Kalman_Getyaw(void) {
#if 1
  return Calculated_yaw;
 8006838:	4b01      	ldr	r3, [pc, #4]	; (8006840 <Kalman_Getyaw+0x8>)
 800683a:	6818      	ldr	r0, [r3, #0]

  double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
  	kalAngleZ = kalAngleZ+gyroZrate*timing_kalman;
  	return kalAngleZ;
#endif
}
 800683c:	4770      	bx	lr
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	20000614 	.word	0x20000614

08006844 <Kalman_GetTick>:
		ExecuteTicks = 0;
	}
}

uint32_t Kalman_GetTick(void)
{
 8006844:	b508      	push	{r3, lr}
	//return Kalman_Timer;
	return getMicros();
 8006846:	f000 febb 	bl	80075c0 <getMicros>
}
 800684a:	bd08      	pop	{r3, pc}
 800684c:	0000      	movs	r0, r0
	...

08006850 <Execute_Kalman_Filter>:
   
	double accX, accY, accZ;
	double gyroX,gyroY,gyroZ;

void Execute_Kalman_Filter(void) 
{
 8006850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006852:	b08f      	sub	sp, #60	; 0x3c
  double kalAngleY=0;
	//double accX, accY, accZ;
	//double gyroX,gyroY,gyroZ;
  static uint32_t current_time,last_time = 0;

  current_time = Kalman_GetTick();
 8006854:	f7ff fff6 	bl	8006844 <Kalman_GetTick>
 8006858:	4b5d      	ldr	r3, [pc, #372]	; (80069d0 <Execute_Kalman_Filter+0x180>)
  timing_kalman = (double) (((uint32_t)(current_time - last_time)) / Tick_frequency);
 800685a:	4c5e      	ldr	r4, [pc, #376]	; (80069d4 <Execute_Kalman_Filter+0x184>)
  double kalAngleY=0;
	//double accX, accY, accZ;
	//double gyroX,gyroY,gyroZ;
  static uint32_t current_time,last_time = 0;

  current_time = Kalman_GetTick();
 800685c:	1c05      	adds	r5, r0, #0
 800685e:	6018      	str	r0, [r3, #0]
  timing_kalman = (double) (((uint32_t)(current_time - last_time)) / Tick_frequency);
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	1a28      	subs	r0, r5, r0
 8006864:	f7fd fbba 	bl	8003fdc <__aeabi_ui2f>
 8006868:	4b5b      	ldr	r3, [pc, #364]	; (80069d8 <Execute_Kalman_Filter+0x188>)
 800686a:	6819      	ldr	r1, [r3, #0]
 800686c:	f7fc ff3c 	bl	80036e8 <__aeabi_fdiv>
  last_time = current_time;
 8006870:	6025      	str	r5, [r4, #0]
	//double accX, accY, accZ;
	//double gyroX,gyroY,gyroZ;
  static uint32_t current_time,last_time = 0;

  current_time = Kalman_GetTick();
  timing_kalman = (double) (((uint32_t)(current_time - last_time)) / Tick_frequency);
 8006872:	9000      	str	r0, [sp, #0]
  last_time = current_time;

  accX  = LSM6DS3_GetXL_X_Int16();
 8006874:	f000 fb34 	bl	8006ee0 <LSM6DS3_GetXL_X_Int16>
 8006878:	f7ff f984 	bl	8005b84 <__aeabi_i2d>
 800687c:	4c57      	ldr	r4, [pc, #348]	; (80069dc <Execute_Kalman_Filter+0x18c>)
 800687e:	6020      	str	r0, [r4, #0]
 8006880:	6061      	str	r1, [r4, #4]
  accY  = LSM6DS3_GetXL_Y_Int16();
 8006882:	f000 fb33 	bl	8006eec <LSM6DS3_GetXL_Y_Int16>
 8006886:	f7ff f97d 	bl	8005b84 <__aeabi_i2d>
 800688a:	4d55      	ldr	r5, [pc, #340]	; (80069e0 <Execute_Kalman_Filter+0x190>)
 800688c:	6028      	str	r0, [r5, #0]
 800688e:	6069      	str	r1, [r5, #4]
  accZ  = LSM6DS3_GetXL_Z_Int16();
 8006890:	f000 fb32 	bl	8006ef8 <LSM6DS3_GetXL_Z_Int16>
 8006894:	f7ff f976 	bl	8005b84 <__aeabi_i2d>
 8006898:	4e52      	ldr	r6, [pc, #328]	; (80069e4 <Execute_Kalman_Filter+0x194>)
 800689a:	6030      	str	r0, [r6, #0]
 800689c:	6071      	str	r1, [r6, #4]
  gyroX = LSM6DS3_GetGS_X_Int16();
 800689e:	f000 fb31 	bl	8006f04 <LSM6DS3_GetGS_X_Int16>
 80068a2:	f7ff f96f 	bl	8005b84 <__aeabi_i2d>
 80068a6:	4a50      	ldr	r2, [pc, #320]	; (80069e8 <Execute_Kalman_Filter+0x198>)
 80068a8:	6010      	str	r0, [r2, #0]
 80068aa:	6051      	str	r1, [r2, #4]
  gyroY = LSM6DS3_GetGS_Y_Int16();
 80068ac:	f000 fb30 	bl	8006f10 <LSM6DS3_GetGS_Y_Int16>
 80068b0:	f7ff f968 	bl	8005b84 <__aeabi_i2d>
 80068b4:	4b4d      	ldr	r3, [pc, #308]	; (80069ec <Execute_Kalman_Filter+0x19c>)
 80068b6:	6018      	str	r0, [r3, #0]
 80068b8:	6059      	str	r1, [r3, #4]
  gyroZ = LSM6DS3_GetGS_Z_Int16();
 80068ba:	f000 fb2f 	bl	8006f1c <LSM6DS3_GetGS_Z_Int16>
 80068be:	f7ff f961 	bl	8005b84 <__aeabi_i2d>
 80068c2:	4a4b      	ldr	r2, [pc, #300]	; (80069f0 <Execute_Kalman_Filter+0x1a0>)
 80068c4:	6010      	str	r0, [r2, #0]
 80068c6:	6051      	str	r1, [r2, #4]

  #ifdef RESTRICT_PITCH
    double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 80068c8:	6832      	ldr	r2, [r6, #0]
 80068ca:	6873      	ldr	r3, [r6, #4]
 80068cc:	6828      	ldr	r0, [r5, #0]
 80068ce:	6869      	ldr	r1, [r5, #4]
 80068d0:	f7fc f9c2 	bl	8002c58 <atan2>
 80068d4:	4b39      	ldr	r3, [pc, #228]	; (80069bc <Execute_Kalman_Filter+0x16c>)
 80068d6:	4a38      	ldr	r2, [pc, #224]	; (80069b8 <Execute_Kalman_Filter+0x168>)
 80068d8:	f7fe fb40 	bl	8004f5c <__aeabi_dmul>
    double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 80068dc:	6823      	ldr	r3, [r4, #0]
  gyroX = LSM6DS3_GetGS_X_Int16();
  gyroY = LSM6DS3_GetGS_Y_Int16();
  gyroZ = LSM6DS3_GetGS_Z_Int16();

  #ifdef RESTRICT_PITCH
    double roll  = atan2(accY, accZ) * RAD_TO_DEG;
 80068de:	9006      	str	r0, [sp, #24]
 80068e0:	9107      	str	r1, [sp, #28]
    double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 80068e2:	9302      	str	r3, [sp, #8]
 80068e4:	6863      	ldr	r3, [r4, #4]
 80068e6:	2480      	movs	r4, #128	; 0x80
 80068e8:	0624      	lsls	r4, r4, #24
 80068ea:	191c      	adds	r4, r3, r4
 80068ec:	682a      	ldr	r2, [r5, #0]
 80068ee:	686b      	ldr	r3, [r5, #4]
 80068f0:	1c10      	adds	r0, r2, #0
 80068f2:	1c19      	adds	r1, r3, #0
 80068f4:	9404      	str	r4, [sp, #16]
 80068f6:	f7fe fb31 	bl	8004f5c <__aeabi_dmul>
 80068fa:	6834      	ldr	r4, [r6, #0]
 80068fc:	6875      	ldr	r5, [r6, #4]
 80068fe:	1c0f      	adds	r7, r1, #0
 8006900:	1c06      	adds	r6, r0, #0
 8006902:	1c22      	adds	r2, r4, #0
 8006904:	1c2b      	adds	r3, r5, #0
 8006906:	1c20      	adds	r0, r4, #0
 8006908:	1c29      	adds	r1, r5, #0
 800690a:	f7fe fb27 	bl	8004f5c <__aeabi_dmul>
 800690e:	1c02      	adds	r2, r0, #0
 8006910:	1c0b      	adds	r3, r1, #0
 8006912:	1c30      	adds	r0, r6, #0
 8006914:	1c39      	adds	r1, r7, #0
 8006916:	f7fd fbb5 	bl	8004084 <__aeabi_dadd>
 800691a:	f7fc f9a1 	bl	8002c60 <sqrt>
 800691e:	1c02      	adds	r2, r0, #0
 8006920:	1c0b      	adds	r3, r1, #0
 8006922:	9802      	ldr	r0, [sp, #8]
 8006924:	9904      	ldr	r1, [sp, #16]
 8006926:	f7fd ff1b 	bl	8004760 <__aeabi_ddiv>
 800692a:	f7fb fff9 	bl	8002920 <atan>
 800692e:	4b23      	ldr	r3, [pc, #140]	; (80069bc <Execute_Kalman_Filter+0x16c>)
 8006930:	4a21      	ldr	r2, [pc, #132]	; (80069b8 <Execute_Kalman_Filter+0x168>)
 8006932:	f7fe fb13 	bl	8004f5c <__aeabi_dmul>
  #else // Eq. 28 and 29
    double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
    double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
  #endif
       
	double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
 8006936:	4a22      	ldr	r2, [pc, #136]	; (80069c0 <Execute_Kalman_Filter+0x170>)
 8006938:	4b22      	ldr	r3, [pc, #136]	; (80069c4 <Execute_Kalman_Filter+0x174>)
 800693a:	4c2b      	ldr	r4, [pc, #172]	; (80069e8 <Execute_Kalman_Filter+0x198>)
  gyroY = LSM6DS3_GetGS_Y_Int16();
  gyroZ = LSM6DS3_GetGS_Z_Int16();

  #ifdef RESTRICT_PITCH
    double roll  = atan2(accY, accZ) * RAD_TO_DEG;
    double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 800693c:	900a      	str	r0, [sp, #40]	; 0x28
 800693e:	910b      	str	r1, [sp, #44]	; 0x2c
  #else // Eq. 28 and 29
    double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
    double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
  #endif
       
	double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
 8006940:	6820      	ldr	r0, [r4, #0]
 8006942:	6861      	ldr	r1, [r4, #4]
 8006944:	f7fe fb0a 	bl	8004f5c <__aeabi_dmul>
	double gyroYrate = gyroY * 0.007f; /* Convert to deg/s */
 8006948:	4a1d      	ldr	r2, [pc, #116]	; (80069c0 <Execute_Kalman_Filter+0x170>)
 800694a:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <Execute_Kalman_Filter+0x174>)
 800694c:	4c27      	ldr	r4, [pc, #156]	; (80069ec <Execute_Kalman_Filter+0x19c>)
  #else // Eq. 28 and 29
    double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
    double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
  #endif
       
	double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
 800694e:	9002      	str	r0, [sp, #8]
 8006950:	9103      	str	r1, [sp, #12]
	double gyroYrate = gyroY * 0.007f; /* Convert to deg/s */
 8006952:	6820      	ldr	r0, [r4, #0]
 8006954:	6861      	ldr	r1, [r4, #4]
 8006956:	f7fe fb01 	bl	8004f5c <__aeabi_dmul>
	double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
 800695a:	4c25      	ldr	r4, [pc, #148]	; (80069f0 <Execute_Kalman_Filter+0x1a0>)
 800695c:	4b25      	ldr	r3, [pc, #148]	; (80069f4 <Execute_Kalman_Filter+0x1a4>)
    double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
    double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
  #endif
       
	double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
	double gyroYrate = gyroY * 0.007f; /* Convert to deg/s */
 800695e:	900d      	str	r0, [sp, #52]	; 0x34
	double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
    double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
    double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
  #endif
       
	double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
	double gyroYrate = gyroY * 0.007f; /* Convert to deg/s */
 8006964:	9105      	str	r1, [sp, #20]
	double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
 8006966:	6820      	ldr	r0, [r4, #0]
 8006968:	6861      	ldr	r1, [r4, #4]
 800696a:	f7fe fd41 	bl	80053f0 <__aeabi_dsub>
 800696e:	4a14      	ldr	r2, [pc, #80]	; (80069c0 <Execute_Kalman_Filter+0x170>)
 8006970:	4b14      	ldr	r3, [pc, #80]	; (80069c4 <Execute_Kalman_Filter+0x174>)
 8006972:	f7fe faf3 	bl	8004f5c <__aeabi_dmul>
 8006976:	1c04      	adds	r4, r0, #0
	//double accX, accY, accZ;
	//double gyroX,gyroY,gyroZ;
  static uint32_t current_time,last_time = 0;

  current_time = Kalman_GetTick();
  timing_kalman = (double) (((uint32_t)(current_time - last_time)) / Tick_frequency);
 8006978:	9800      	ldr	r0, [sp, #0]
    double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
  #endif
       
	double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
	double gyroYrate = gyroY * 0.007f; /* Convert to deg/s */
	double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
 800697a:	1c0d      	adds	r5, r1, #0
	//double accX, accY, accZ;
	//double gyroX,gyroY,gyroZ;
  static uint32_t current_time,last_time = 0;

  current_time = Kalman_GetTick();
  timing_kalman = (double) (((uint32_t)(current_time - last_time)) / Tick_frequency);
 800697c:	f7ff f972 	bl	8005c64 <__aeabi_f2d>
  #endif
       
	double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
	double gyroYrate = gyroY * 0.007f; /* Convert to deg/s */
	double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
	kalAngleZ = kalAngleZ+gyroZrate*timing_kalman;
 8006980:	4e1d      	ldr	r6, [pc, #116]	; (80069f8 <Execute_Kalman_Filter+0x1a8>)
	//double accX, accY, accZ;
	//double gyroX,gyroY,gyroZ;
  static uint32_t current_time,last_time = 0;

  current_time = Kalman_GetTick();
  timing_kalman = (double) (((uint32_t)(current_time - last_time)) / Tick_frequency);
 8006982:	1c02      	adds	r2, r0, #0
 8006984:	1c0b      	adds	r3, r1, #0
  #endif
       
	double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
	double gyroYrate = gyroY * 0.007f; /* Convert to deg/s */
	double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
	kalAngleZ = kalAngleZ+gyroZrate*timing_kalman;
 8006986:	1c20      	adds	r0, r4, #0
 8006988:	1c29      	adds	r1, r5, #0
 800698a:	f7fe fae7 	bl	8004f5c <__aeabi_dmul>
 800698e:	6832      	ldr	r2, [r6, #0]
 8006990:	6873      	ldr	r3, [r6, #4]
 8006992:	f7fd fb77 	bl	8004084 <__aeabi_dadd>

	if(kalAngleZ>360){
 8006996:	4a0c      	ldr	r2, [pc, #48]	; (80069c8 <Execute_Kalman_Filter+0x178>)
 8006998:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <Execute_Kalman_Filter+0x17c>)
  #endif
       
	double gyroXrate = gyroX * 0.007f; /* Convert to deg/s */
	double gyroYrate = gyroY * 0.007f; /* Convert to deg/s */
	double gyroZrate = (gyroZ-gyroZ_offset) * 0.007f; /* Convert to deg/s */
	kalAngleZ = kalAngleZ+gyroZrate*timing_kalman;
 800699a:	1c04      	adds	r4, r0, #0
 800699c:	1c0d      	adds	r5, r1, #0
 800699e:	6034      	str	r4, [r6, #0]
 80069a0:	6075      	str	r5, [r6, #4]

	if(kalAngleZ>360){
 80069a2:	f7fc fcab 	bl	80032fc <__aeabi_dcmpgt>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d028      	beq.n	80069fc <Execute_Kalman_Filter+0x1ac>
		kalAngleZ-=360;
 80069aa:	1c20      	adds	r0, r4, #0
 80069ac:	1c29      	adds	r1, r5, #0
 80069ae:	4a06      	ldr	r2, [pc, #24]	; (80069c8 <Execute_Kalman_Filter+0x178>)
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <Execute_Kalman_Filter+0x17c>)
 80069b2:	f7fe fd1d 	bl	80053f0 <__aeabi_dsub>
 80069b6:	e02f      	b.n	8006a18 <Execute_Kalman_Filter+0x1c8>
 80069b8:	20000000 	.word	0x20000000
 80069bc:	404ca5dc 	.word	0x404ca5dc
 80069c0:	40000000 	.word	0x40000000
 80069c4:	3f7cac08 	.word	0x3f7cac08
 80069c8:	00000000 	.word	0x00000000
 80069cc:	40768000 	.word	0x40768000
 80069d0:	200005f4 	.word	0x200005f4
 80069d4:	20000618 	.word	0x20000618
 80069d8:	200005fc 	.word	0x200005fc
 80069dc:	20000aa8 	.word	0x20000aa8
 80069e0:	20000aa0 	.word	0x20000aa0
 80069e4:	20000a60 	.word	0x20000a60
 80069e8:	20000a58 	.word	0x20000a58
 80069ec:	20000a98 	.word	0x20000a98
 80069f0:	20000a68 	.word	0x20000a68
 80069f4:	20000520 	.word	0x20000520
 80069f8:	20000608 	.word	0x20000608
	}
	else if(kalAngleZ<-360){
 80069fc:	1c20      	adds	r0, r4, #0
 80069fe:	1c29      	adds	r1, r5, #0
 8006a00:	4ba6      	ldr	r3, [pc, #664]	; (8006c9c <Execute_Kalman_Filter+0x44c>)
 8006a02:	4aa5      	ldr	r2, [pc, #660]	; (8006c98 <Execute_Kalman_Filter+0x448>)
 8006a04:	f7fc fc66 	bl	80032d4 <__aeabi_dcmplt>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d007      	beq.n	8006a1c <Execute_Kalman_Filter+0x1cc>
		kalAngleZ+=360;
 8006a0c:	1c20      	adds	r0, r4, #0
 8006a0e:	1c29      	adds	r1, r5, #0
 8006a10:	4aa3      	ldr	r2, [pc, #652]	; (8006ca0 <Execute_Kalman_Filter+0x450>)
 8006a12:	4ba4      	ldr	r3, [pc, #656]	; (8006ca4 <Execute_Kalman_Filter+0x454>)
 8006a14:	f7fd fb36 	bl	8004084 <__aeabi_dadd>
 8006a18:	6030      	str	r0, [r6, #0]
 8006a1a:	6071      	str	r1, [r6, #4]
	KalmanX.angle = roll;
    kalAngleX = roll;
  } 
  else
  {
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman); /* Calculate the angle using a Kalman filter */
 8006a1c:	9802      	ldr	r0, [sp, #8]
 8006a1e:	9903      	ldr	r1, [sp, #12]
void Kalman_ClearFlag(void) {
	KalmanFlag = 0;
}

static float KalmanX_getAngle(float newAngle, float newRate, float dt) {
    KalmanX.rate = newRate - KalmanX.bias;
 8006a20:	4ca1      	ldr	r4, [pc, #644]	; (8006ca8 <Execute_Kalman_Filter+0x458>)
 8006a22:	6922      	ldr	r2, [r4, #16]
 8006a24:	9208      	str	r2, [sp, #32]
	KalmanX.angle = roll;
    kalAngleX = roll;
  } 
  else
  {
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman); /* Calculate the angle using a Kalman filter */
 8006a26:	f7ff f971 	bl	8005d0c <__aeabi_d2f>
void Kalman_ClearFlag(void) {
	KalmanFlag = 0;
}

static float KalmanX_getAngle(float newAngle, float newRate, float dt) {
    KalmanX.rate = newRate - KalmanX.bias;
 8006a2a:	9908      	ldr	r1, [sp, #32]
 8006a2c:	f7fd f896 	bl	8003b5c <__aeabi_fsub>
 8006a30:	1c01      	adds	r1, r0, #0
 8006a32:	6160      	str	r0, [r4, #20]
    KalmanX.angle += dt * KalmanX.rate;
 8006a34:	9800      	ldr	r0, [sp, #0]
 8006a36:	f7fc ff85 	bl	8003944 <__aeabi_fmul>
 8006a3a:	68e1      	ldr	r1, [r4, #12]
 8006a3c:	f7fc fcac 	bl	8003398 <__aeabi_fadd>

    KalmanX.P[0][0] += dt * (dt*KalmanX.P[1][1] - KalmanX.P[0][1] - KalmanX.P[1][0] + KalmanX.Q_angle);
 8006a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
	KalmanFlag = 0;
}

static float KalmanX_getAngle(float newAngle, float newRate, float dt) {
    KalmanX.rate = newRate - KalmanX.bias;
    KalmanX.angle += dt * KalmanX.rate;
 8006a42:	9009      	str	r0, [sp, #36]	; 0x24

    KalmanX.P[0][0] += dt * (dt*KalmanX.P[1][1] - KalmanX.P[0][1] - KalmanX.P[1][0] + KalmanX.Q_angle);
 8006a44:	1c19      	adds	r1, r3, #0
 8006a46:	9800      	ldr	r0, [sp, #0]
 8006a48:	9302      	str	r3, [sp, #8]
 8006a4a:	f7fc ff7b 	bl	8003944 <__aeabi_fmul>
 8006a4e:	69e7      	ldr	r7, [r4, #28]
 8006a50:	6a22      	ldr	r2, [r4, #32]
 8006a52:	1c39      	adds	r1, r7, #0
 8006a54:	9201      	str	r2, [sp, #4]
 8006a56:	1c06      	adds	r6, r0, #0
 8006a58:	f7fd f880 	bl	8003b5c <__aeabi_fsub>
 8006a5c:	9901      	ldr	r1, [sp, #4]
 8006a5e:	f7fd f87d 	bl	8003b5c <__aeabi_fsub>
 8006a62:	6821      	ldr	r1, [r4, #0]
 8006a64:	f7fc fc98 	bl	8003398 <__aeabi_fadd>
 8006a68:	1c01      	adds	r1, r0, #0
 8006a6a:	9800      	ldr	r0, [sp, #0]
 8006a6c:	f7fc ff6a 	bl	8003944 <__aeabi_fmul>
 8006a70:	69a1      	ldr	r1, [r4, #24]
 8006a72:	f7fc fc91 	bl	8003398 <__aeabi_fadd>
    KalmanX.P[0][1] -= dt * KalmanX.P[1][1];
 8006a76:	1c31      	adds	r1, r6, #0

static float KalmanX_getAngle(float newAngle, float newRate, float dt) {
    KalmanX.rate = newRate - KalmanX.bias;
    KalmanX.angle += dt * KalmanX.rate;

    KalmanX.P[0][0] += dt * (dt*KalmanX.P[1][1] - KalmanX.P[0][1] - KalmanX.P[1][0] + KalmanX.Q_angle);
 8006a78:	1c05      	adds	r5, r0, #0
    KalmanX.P[0][1] -= dt * KalmanX.P[1][1];
 8006a7a:	1c38      	adds	r0, r7, #0
 8006a7c:	f7fd f86e 	bl	8003b5c <__aeabi_fsub>
    KalmanX.P[1][0] -= dt * KalmanX.P[1][1];
 8006a80:	1c31      	adds	r1, r6, #0
static float KalmanX_getAngle(float newAngle, float newRate, float dt) {
    KalmanX.rate = newRate - KalmanX.bias;
    KalmanX.angle += dt * KalmanX.rate;

    KalmanX.P[0][0] += dt * (dt*KalmanX.P[1][1] - KalmanX.P[0][1] - KalmanX.P[1][0] + KalmanX.Q_angle);
    KalmanX.P[0][1] -= dt * KalmanX.P[1][1];
 8006a82:	9004      	str	r0, [sp, #16]
    KalmanX.P[1][0] -= dt * KalmanX.P[1][1];
 8006a84:	9801      	ldr	r0, [sp, #4]
 8006a86:	f7fd f869 	bl	8003b5c <__aeabi_fsub>
    KalmanX.P[1][1] += KalmanX.Q_bias * dt;
 8006a8a:	6861      	ldr	r1, [r4, #4]
    KalmanX.rate = newRate - KalmanX.bias;
    KalmanX.angle += dt * KalmanX.rate;

    KalmanX.P[0][0] += dt * (dt*KalmanX.P[1][1] - KalmanX.P[0][1] - KalmanX.P[1][0] + KalmanX.Q_angle);
    KalmanX.P[0][1] -= dt * KalmanX.P[1][1];
    KalmanX.P[1][0] -= dt * KalmanX.P[1][1];
 8006a8c:	9001      	str	r0, [sp, #4]
    KalmanX.P[1][1] += KalmanX.Q_bias * dt;
 8006a8e:	9800      	ldr	r0, [sp, #0]
 8006a90:	f7fc ff58 	bl	8003944 <__aeabi_fmul>
 8006a94:	1c01      	adds	r1, r0, #0
 8006a96:	9802      	ldr	r0, [sp, #8]
 8006a98:	f7fc fc7e 	bl	8003398 <__aeabi_fadd>
    
    float S = KalmanX.P[0][0] + KalmanX.R_measure;
 8006a9c:	68a1      	ldr	r1, [r4, #8]
    KalmanX.angle += dt * KalmanX.rate;

    KalmanX.P[0][0] += dt * (dt*KalmanX.P[1][1] - KalmanX.P[0][1] - KalmanX.P[1][0] + KalmanX.Q_angle);
    KalmanX.P[0][1] -= dt * KalmanX.P[1][1];
    KalmanX.P[1][0] -= dt * KalmanX.P[1][1];
    KalmanX.P[1][1] += KalmanX.Q_bias * dt;
 8006a9e:	900c      	str	r0, [sp, #48]	; 0x30
    
    float S = KalmanX.P[0][0] + KalmanX.R_measure;
 8006aa0:	1c28      	adds	r0, r5, #0
 8006aa2:	f7fc fc79 	bl	8003398 <__aeabi_fadd>
 8006aa6:	1c07      	adds	r7, r0, #0
    
    float K[2];
    K[0] = KalmanX.P[0][0] / S;
 8006aa8:	1c39      	adds	r1, r7, #0
 8006aaa:	1c28      	adds	r0, r5, #0
 8006aac:	f7fc fe1c 	bl	80036e8 <__aeabi_fdiv>
    K[1] = KalmanX.P[1][0] / S;
 8006ab0:	1c39      	adds	r1, r7, #0
    KalmanX.P[1][1] += KalmanX.Q_bias * dt;
    
    float S = KalmanX.P[0][0] + KalmanX.R_measure;
    
    float K[2];
    K[0] = KalmanX.P[0][0] / S;
 8006ab2:	1c06      	adds	r6, r0, #0
    K[1] = KalmanX.P[1][0] / S;
 8006ab4:	9801      	ldr	r0, [sp, #4]
 8006ab6:	f7fc fe17 	bl	80036e8 <__aeabi_fdiv>
 8006aba:	1c07      	adds	r7, r0, #0
	KalmanX.angle = roll;
    kalAngleX = roll;
  } 
  else
  {
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman); /* Calculate the angle using a Kalman filter */
 8006abc:	9806      	ldr	r0, [sp, #24]
 8006abe:	9907      	ldr	r1, [sp, #28]
 8006ac0:	f7ff f924 	bl	8005d0c <__aeabi_d2f>
    
    float K[2];
    K[0] = KalmanX.P[0][0] / S;
    K[1] = KalmanX.P[1][0] / S;

    float y = newAngle - KalmanX.angle;
 8006ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ac6:	f7fd f849 	bl	8003b5c <__aeabi_fsub>
 8006aca:	9006      	str	r0, [sp, #24]
    KalmanX.angle += K[0] * y;
 8006acc:	9906      	ldr	r1, [sp, #24]
 8006ace:	1c30      	adds	r0, r6, #0
 8006ad0:	f7fc ff38 	bl	8003944 <__aeabi_fmul>
 8006ad4:	1c01      	adds	r1, r0, #0
 8006ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ad8:	f7fc fc5e 	bl	8003398 <__aeabi_fadd>
    KalmanX.bias += K[1] * y;
 8006adc:	9906      	ldr	r1, [sp, #24]
    float K[2];
    K[0] = KalmanX.P[0][0] / S;
    K[1] = KalmanX.P[1][0] / S;

    float y = newAngle - KalmanX.angle;
    KalmanX.angle += K[0] * y;
 8006ade:	9002      	str	r0, [sp, #8]
 8006ae0:	60e0      	str	r0, [r4, #12]
    KalmanX.bias += K[1] * y;
 8006ae2:	1c38      	adds	r0, r7, #0
 8006ae4:	f7fc ff2e 	bl	8003944 <__aeabi_fmul>
 8006ae8:	1c01      	adds	r1, r0, #0
 8006aea:	9808      	ldr	r0, [sp, #32]
 8006aec:	f7fc fc54 	bl	8003398 <__aeabi_fadd>

    float P00_temp = KalmanX.P[0][0];
    float P01_temp = KalmanX.P[0][1];

    KalmanX.P[0][0] -= K[0] * P00_temp;
 8006af0:	1c29      	adds	r1, r5, #0
    K[0] = KalmanX.P[0][0] / S;
    K[1] = KalmanX.P[1][0] / S;

    float y = newAngle - KalmanX.angle;
    KalmanX.angle += K[0] * y;
    KalmanX.bias += K[1] * y;
 8006af2:	6120      	str	r0, [r4, #16]

    float P00_temp = KalmanX.P[0][0];
    float P01_temp = KalmanX.P[0][1];

    KalmanX.P[0][0] -= K[0] * P00_temp;
 8006af4:	1c30      	adds	r0, r6, #0
 8006af6:	f7fc ff25 	bl	8003944 <__aeabi_fmul>
 8006afa:	1c01      	adds	r1, r0, #0
 8006afc:	1c28      	adds	r0, r5, #0
 8006afe:	f7fd f82d 	bl	8003b5c <__aeabi_fsub>
    KalmanX.P[0][1] -= K[0] * P01_temp;
 8006b02:	9904      	ldr	r1, [sp, #16]
    KalmanX.bias += K[1] * y;

    float P00_temp = KalmanX.P[0][0];
    float P01_temp = KalmanX.P[0][1];

    KalmanX.P[0][0] -= K[0] * P00_temp;
 8006b04:	61a0      	str	r0, [r4, #24]
    KalmanX.P[0][1] -= K[0] * P01_temp;
 8006b06:	1c30      	adds	r0, r6, #0
 8006b08:	f7fc ff1c 	bl	8003944 <__aeabi_fmul>
 8006b0c:	1c01      	adds	r1, r0, #0
 8006b0e:	9804      	ldr	r0, [sp, #16]
 8006b10:	f7fd f824 	bl	8003b5c <__aeabi_fsub>
    KalmanX.P[1][0] -= K[1] * P00_temp;
 8006b14:	1c29      	adds	r1, r5, #0

    float P00_temp = KalmanX.P[0][0];
    float P01_temp = KalmanX.P[0][1];

    KalmanX.P[0][0] -= K[0] * P00_temp;
    KalmanX.P[0][1] -= K[0] * P01_temp;
 8006b16:	61e0      	str	r0, [r4, #28]
    KalmanX.P[1][0] -= K[1] * P00_temp;
 8006b18:	1c38      	adds	r0, r7, #0
 8006b1a:	f7fc ff13 	bl	8003944 <__aeabi_fmul>
 8006b1e:	1c01      	adds	r1, r0, #0
 8006b20:	9801      	ldr	r0, [sp, #4]
 8006b22:	f7fd f81b 	bl	8003b5c <__aeabi_fsub>
    KalmanX.P[1][1] -= K[1] * P01_temp;
 8006b26:	9904      	ldr	r1, [sp, #16]
    float P00_temp = KalmanX.P[0][0];
    float P01_temp = KalmanX.P[0][1];

    KalmanX.P[0][0] -= K[0] * P00_temp;
    KalmanX.P[0][1] -= K[0] * P01_temp;
    KalmanX.P[1][0] -= K[1] * P00_temp;
 8006b28:	6220      	str	r0, [r4, #32]
    KalmanX.P[1][1] -= K[1] * P01_temp;
 8006b2a:	1c38      	adds	r0, r7, #0
 8006b2c:	f7fc ff0a 	bl	8003944 <__aeabi_fmul>
 8006b30:	1c01      	adds	r1, r0, #0
 8006b32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b34:	f7fd f812 	bl	8003b5c <__aeabi_fsub>
 8006b38:	6260      	str	r0, [r4, #36]	; 0x24
	KalmanX.angle = roll;
    kalAngleX = roll;
  } 
  else
  {
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman); /* Calculate the angle using a Kalman filter */
 8006b3a:	9802      	ldr	r0, [sp, #8]
 8006b3c:	f7ff f892 	bl	8005c64 <__aeabi_f2d>
  } 

  if (abs(kalAngleX) > 90)
 8006b40:	f7fe ffec 	bl	8005b1c <__aeabi_d2iz>
 8006b44:	17c3      	asrs	r3, r0, #31
 8006b46:	18c0      	adds	r0, r0, r3
 8006b48:	4058      	eors	r0, r3
 8006b4a:	285a      	cmp	r0, #90	; 0x5a
 8006b4c:	dd04      	ble.n	8006b58 <Execute_Kalman_Filter+0x308>
  {
    gyroYrate = - gyroYrate; /* Invert rate, so it fits the restricted accelerometer reading */
 8006b4e:	9805      	ldr	r0, [sp, #20]
 8006b50:	2180      	movs	r1, #128	; 0x80
 8006b52:	060a      	lsls	r2, r1, #24
 8006b54:	1884      	adds	r4, r0, r2
 8006b56:	9405      	str	r4, [sp, #20]

    return KalmanX.angle;
}

static float KalmanY_getAngle(float newAngle, float newRate, float dt) {
    KalmanY.rate = newRate - KalmanY.bias;
 8006b58:	4c54      	ldr	r4, [pc, #336]	; (8006cac <Execute_Kalman_Filter+0x45c>)

  if (abs(kalAngleX) > 90)
  {
    gyroYrate = - gyroYrate; /* Invert rate, so it fits the restricted accelerometer reading */
  }
  kalAngleY = KalmanY_getAngle(pitch, gyroYrate, timing_kalman);
 8006b5a:	9905      	ldr	r1, [sp, #20]

    return KalmanX.angle;
}

static float KalmanY_getAngle(float newAngle, float newRate, float dt) {
    KalmanY.rate = newRate - KalmanY.bias;
 8006b5c:	6923      	ldr	r3, [r4, #16]

  if (abs(kalAngleX) > 90)
  {
    gyroYrate = - gyroYrate; /* Invert rate, so it fits the restricted accelerometer reading */
  }
  kalAngleY = KalmanY_getAngle(pitch, gyroYrate, timing_kalman);
 8006b5e:	980d      	ldr	r0, [sp, #52]	; 0x34

    return KalmanX.angle;
}

static float KalmanY_getAngle(float newAngle, float newRate, float dt) {
    KalmanY.rate = newRate - KalmanY.bias;
 8006b60:	9308      	str	r3, [sp, #32]

  if (abs(kalAngleX) > 90)
  {
    gyroYrate = - gyroYrate; /* Invert rate, so it fits the restricted accelerometer reading */
  }
  kalAngleY = KalmanY_getAngle(pitch, gyroYrate, timing_kalman);
 8006b62:	f7ff f8d3 	bl	8005d0c <__aeabi_d2f>

    return KalmanX.angle;
}

static float KalmanY_getAngle(float newAngle, float newRate, float dt) {
    KalmanY.rate = newRate - KalmanY.bias;
 8006b66:	9908      	ldr	r1, [sp, #32]
 8006b68:	f7fc fff8 	bl	8003b5c <__aeabi_fsub>
 8006b6c:	1c01      	adds	r1, r0, #0
 8006b6e:	6160      	str	r0, [r4, #20]
    KalmanY.angle += dt * KalmanY.rate;
 8006b70:	9800      	ldr	r0, [sp, #0]
 8006b72:	f7fc fee7 	bl	8003944 <__aeabi_fmul>
 8006b76:	68e1      	ldr	r1, [r4, #12]
 8006b78:	f7fc fc0e 	bl	8003398 <__aeabi_fadd>

    KalmanY.P[0][0] += dt * (dt*KalmanY.P[1][1] - KalmanY.P[0][1] - KalmanY.P[1][0] + KalmanY.Q_angle);
 8006b7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    return KalmanX.angle;
}

static float KalmanY_getAngle(float newAngle, float newRate, float dt) {
    KalmanY.rate = newRate - KalmanY.bias;
    KalmanY.angle += dt * KalmanY.rate;
 8006b7e:	9009      	str	r0, [sp, #36]	; 0x24

    KalmanY.P[0][0] += dt * (dt*KalmanY.P[1][1] - KalmanY.P[0][1] - KalmanY.P[1][0] + KalmanY.Q_angle);
 8006b80:	1c11      	adds	r1, r2, #0
 8006b82:	9800      	ldr	r0, [sp, #0]
 8006b84:	9205      	str	r2, [sp, #20]
 8006b86:	f7fc fedd 	bl	8003944 <__aeabi_fmul>
 8006b8a:	69e7      	ldr	r7, [r4, #28]
 8006b8c:	6a23      	ldr	r3, [r4, #32]
 8006b8e:	1c39      	adds	r1, r7, #0
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	1c06      	adds	r6, r0, #0
 8006b94:	f7fc ffe2 	bl	8003b5c <__aeabi_fsub>
 8006b98:	9901      	ldr	r1, [sp, #4]
 8006b9a:	f7fc ffdf 	bl	8003b5c <__aeabi_fsub>
 8006b9e:	6821      	ldr	r1, [r4, #0]
 8006ba0:	f7fc fbfa 	bl	8003398 <__aeabi_fadd>
 8006ba4:	1c01      	adds	r1, r0, #0
 8006ba6:	9800      	ldr	r0, [sp, #0]
 8006ba8:	f7fc fecc 	bl	8003944 <__aeabi_fmul>
 8006bac:	69a1      	ldr	r1, [r4, #24]
 8006bae:	f7fc fbf3 	bl	8003398 <__aeabi_fadd>
    KalmanY.P[0][1] -= dt * KalmanY.P[1][1];
 8006bb2:	1c31      	adds	r1, r6, #0

static float KalmanY_getAngle(float newAngle, float newRate, float dt) {
    KalmanY.rate = newRate - KalmanY.bias;
    KalmanY.angle += dt * KalmanY.rate;

    KalmanY.P[0][0] += dt * (dt*KalmanY.P[1][1] - KalmanY.P[0][1] - KalmanY.P[1][0] + KalmanY.Q_angle);
 8006bb4:	1c05      	adds	r5, r0, #0
    KalmanY.P[0][1] -= dt * KalmanY.P[1][1];
 8006bb6:	1c38      	adds	r0, r7, #0
 8006bb8:	f7fc ffd0 	bl	8003b5c <__aeabi_fsub>
    KalmanY.P[1][0] -= dt * KalmanY.P[1][1];
 8006bbc:	1c31      	adds	r1, r6, #0
static float KalmanY_getAngle(float newAngle, float newRate, float dt) {
    KalmanY.rate = newRate - KalmanY.bias;
    KalmanY.angle += dt * KalmanY.rate;

    KalmanY.P[0][0] += dt * (dt*KalmanY.P[1][1] - KalmanY.P[0][1] - KalmanY.P[1][0] + KalmanY.Q_angle);
    KalmanY.P[0][1] -= dt * KalmanY.P[1][1];
 8006bbe:	9004      	str	r0, [sp, #16]
    KalmanY.P[1][0] -= dt * KalmanY.P[1][1];
 8006bc0:	9801      	ldr	r0, [sp, #4]
 8006bc2:	f7fc ffcb 	bl	8003b5c <__aeabi_fsub>
    KalmanY.P[1][1] += KalmanY.Q_bias * dt;
 8006bc6:	6861      	ldr	r1, [r4, #4]
    KalmanY.rate = newRate - KalmanY.bias;
    KalmanY.angle += dt * KalmanY.rate;

    KalmanY.P[0][0] += dt * (dt*KalmanY.P[1][1] - KalmanY.P[0][1] - KalmanY.P[1][0] + KalmanY.Q_angle);
    KalmanY.P[0][1] -= dt * KalmanY.P[1][1];
    KalmanY.P[1][0] -= dt * KalmanY.P[1][1];
 8006bc8:	9001      	str	r0, [sp, #4]
    KalmanY.P[1][1] += KalmanY.Q_bias * dt;
 8006bca:	9800      	ldr	r0, [sp, #0]
 8006bcc:	f7fc feba 	bl	8003944 <__aeabi_fmul>
 8006bd0:	1c01      	adds	r1, r0, #0
 8006bd2:	9805      	ldr	r0, [sp, #20]
 8006bd4:	f7fc fbe0 	bl	8003398 <__aeabi_fadd>
 8006bd8:	9006      	str	r0, [sp, #24]
    
    float S = KalmanY.P[0][0] + KalmanY.R_measure;
 8006bda:	68a1      	ldr	r1, [r4, #8]
 8006bdc:	1c28      	adds	r0, r5, #0
 8006bde:	f7fc fbdb 	bl	8003398 <__aeabi_fadd>
 8006be2:	1c07      	adds	r7, r0, #0
    
    float K[2];
    K[0] = KalmanY.P[0][0] / S;
 8006be4:	1c39      	adds	r1, r7, #0
 8006be6:	1c28      	adds	r0, r5, #0
 8006be8:	f7fc fd7e 	bl	80036e8 <__aeabi_fdiv>
    K[1] = KalmanY.P[1][0] / S;
 8006bec:	1c39      	adds	r1, r7, #0
    KalmanY.P[1][1] += KalmanY.Q_bias * dt;
    
    float S = KalmanY.P[0][0] + KalmanY.R_measure;
    
    float K[2];
    K[0] = KalmanY.P[0][0] / S;
 8006bee:	1c06      	adds	r6, r0, #0
    K[1] = KalmanY.P[1][0] / S;
 8006bf0:	9801      	ldr	r0, [sp, #4]
 8006bf2:	f7fc fd79 	bl	80036e8 <__aeabi_fdiv>
 8006bf6:	1c07      	adds	r7, r0, #0

  if (abs(kalAngleX) > 90)
  {
    gyroYrate = - gyroYrate; /* Invert rate, so it fits the restricted accelerometer reading */
  }
  kalAngleY = KalmanY_getAngle(pitch, gyroYrate, timing_kalman);
 8006bf8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006bfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bfc:	f7ff f886 	bl	8005d0c <__aeabi_d2f>
    float K[2];
    K[0] = KalmanY.P[0][0] / S;
    K[1] = KalmanY.P[1][0] / S;


    float y = newAngle - KalmanY.angle;
 8006c00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c02:	f7fc ffab 	bl	8003b5c <__aeabi_fsub>
 8006c06:	9000      	str	r0, [sp, #0]

    KalmanY.angle += K[0] * y;
 8006c08:	9900      	ldr	r1, [sp, #0]
 8006c0a:	1c30      	adds	r0, r6, #0
 8006c0c:	f7fc fe9a 	bl	8003944 <__aeabi_fmul>
 8006c10:	1c01      	adds	r1, r0, #0
 8006c12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c14:	f7fc fbc0 	bl	8003398 <__aeabi_fadd>
    KalmanY.bias += K[1] * y;
 8006c18:	9900      	ldr	r1, [sp, #0]
    K[1] = KalmanY.P[1][0] / S;


    float y = newAngle - KalmanY.angle;

    KalmanY.angle += K[0] * y;
 8006c1a:	9005      	str	r0, [sp, #20]
 8006c1c:	60e0      	str	r0, [r4, #12]
    KalmanY.bias += K[1] * y;
 8006c1e:	1c38      	adds	r0, r7, #0
 8006c20:	f7fc fe90 	bl	8003944 <__aeabi_fmul>
 8006c24:	1c01      	adds	r1, r0, #0
 8006c26:	9808      	ldr	r0, [sp, #32]
 8006c28:	f7fc fbb6 	bl	8003398 <__aeabi_fadd>

    float P00_temp = KalmanY.P[0][0];
    float P01_temp = KalmanY.P[0][1];

    KalmanY.P[0][0] -= K[0] * P00_temp;
 8006c2c:	1c29      	adds	r1, r5, #0


    float y = newAngle - KalmanY.angle;

    KalmanY.angle += K[0] * y;
    KalmanY.bias += K[1] * y;
 8006c2e:	6120      	str	r0, [r4, #16]

    float P00_temp = KalmanY.P[0][0];
    float P01_temp = KalmanY.P[0][1];

    KalmanY.P[0][0] -= K[0] * P00_temp;
 8006c30:	1c30      	adds	r0, r6, #0
 8006c32:	f7fc fe87 	bl	8003944 <__aeabi_fmul>
 8006c36:	1c01      	adds	r1, r0, #0
 8006c38:	1c28      	adds	r0, r5, #0
 8006c3a:	f7fc ff8f 	bl	8003b5c <__aeabi_fsub>
    KalmanY.P[0][1] -= K[0] * P01_temp;
 8006c3e:	9904      	ldr	r1, [sp, #16]
    KalmanY.bias += K[1] * y;

    float P00_temp = KalmanY.P[0][0];
    float P01_temp = KalmanY.P[0][1];

    KalmanY.P[0][0] -= K[0] * P00_temp;
 8006c40:	61a0      	str	r0, [r4, #24]
    KalmanY.P[0][1] -= K[0] * P01_temp;
 8006c42:	1c30      	adds	r0, r6, #0
 8006c44:	f7fc fe7e 	bl	8003944 <__aeabi_fmul>
 8006c48:	1c01      	adds	r1, r0, #0
 8006c4a:	9804      	ldr	r0, [sp, #16]
 8006c4c:	f7fc ff86 	bl	8003b5c <__aeabi_fsub>
    KalmanY.P[1][0] -= K[1] * P00_temp;
 8006c50:	1c29      	adds	r1, r5, #0

    float P00_temp = KalmanY.P[0][0];
    float P01_temp = KalmanY.P[0][1];

    KalmanY.P[0][0] -= K[0] * P00_temp;
    KalmanY.P[0][1] -= K[0] * P01_temp;
 8006c52:	61e0      	str	r0, [r4, #28]
    KalmanY.P[1][0] -= K[1] * P00_temp;
 8006c54:	1c38      	adds	r0, r7, #0
 8006c56:	f7fc fe75 	bl	8003944 <__aeabi_fmul>
 8006c5a:	1c01      	adds	r1, r0, #0
 8006c5c:	9801      	ldr	r0, [sp, #4]
 8006c5e:	f7fc ff7d 	bl	8003b5c <__aeabi_fsub>
    KalmanY.P[1][1] -= K[1] * P01_temp;
 8006c62:	9904      	ldr	r1, [sp, #16]
    float P00_temp = KalmanY.P[0][0];
    float P01_temp = KalmanY.P[0][1];

    KalmanY.P[0][0] -= K[0] * P00_temp;
    KalmanY.P[0][1] -= K[0] * P01_temp;
    KalmanY.P[1][0] -= K[1] * P00_temp;
 8006c64:	6220      	str	r0, [r4, #32]
    KalmanY.P[1][1] -= K[1] * P01_temp;
 8006c66:	1c38      	adds	r0, r7, #0
 8006c68:	f7fc fe6c 	bl	8003944 <__aeabi_fmul>
 8006c6c:	1c01      	adds	r1, r0, #0
 8006c6e:	9806      	ldr	r0, [sp, #24]
 8006c70:	f7fc ff74 	bl	8003b5c <__aeabi_fsub>
    {
      gyroXrate = -gyroXrate; /* Invert rate, so it fits the restriced accelerometer reading */
    }
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman);
  #endif
   Calculated_Roll  =  (float) (kalAngleX);
 8006c74:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <Execute_Kalman_Filter+0x460>)
    float P01_temp = KalmanY.P[0][1];

    KalmanY.P[0][0] -= K[0] * P00_temp;
    KalmanY.P[0][1] -= K[0] * P01_temp;
    KalmanY.P[1][0] -= K[1] * P00_temp;
    KalmanY.P[1][1] -= K[1] * P01_temp;
 8006c76:	6260      	str	r0, [r4, #36]	; 0x24
    {
      gyroXrate = -gyroXrate; /* Invert rate, so it fits the restriced accelerometer reading */
    }
    kalAngleX = KalmanX_getAngle(roll, gyroXrate, timing_kalman);
  #endif
   Calculated_Roll  =  (float) (kalAngleX);
 8006c78:	9c02      	ldr	r4, [sp, #8]
 8006c7a:	601c      	str	r4, [r3, #0]
   Calculated_Pitch  = (float) (kalAngleY);
 8006c7c:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <Execute_Kalman_Filter+0x464>)
 8006c7e:	9c05      	ldr	r4, [sp, #20]
 8006c80:	601c      	str	r4, [r3, #0]
   Calculated_yaw  = (float) (kalAngleZ);
 8006c82:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <Execute_Kalman_Filter+0x468>)
 8006c84:	6818      	ldr	r0, [r3, #0]
 8006c86:	6859      	ldr	r1, [r3, #4]
 8006c88:	f7ff f840 	bl	8005d0c <__aeabi_d2f>
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <Execute_Kalman_Filter+0x46c>)
 8006c8e:	6018      	str	r0, [r3, #0]
}
 8006c90:	b00f      	add	sp, #60	; 0x3c
 8006c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c94:	46c0      	nop			; (mov r8, r8)
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	00000000 	.word	0x00000000
 8006c9c:	c0768000 	.word	0xc0768000
 8006ca0:	00000000 	.word	0x00000000
 8006ca4:	40768000 	.word	0x40768000
 8006ca8:	20000a70 	.word	0x20000a70
 8006cac:	20000a30 	.word	0x20000a30
 8006cb0:	20000610 	.word	0x20000610
 8006cb4:	200005f8 	.word	0x200005f8
 8006cb8:	20000608 	.word	0x20000608
 8006cbc:	20000614 	.word	0x20000614

08006cc0 <Kalman_SetFlag>:
	//return Kalman_Timer;
	return getMicros();
}

void Kalman_SetFlag(void) {
	KalmanFlag = 1;
 8006cc0:	4b01      	ldr	r3, [pc, #4]	; (8006cc8 <Kalman_SetFlag+0x8>)
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	701a      	strb	r2, [r3, #0]
}
 8006cc6:	4770      	bx	lr
 8006cc8:	20000620 	.word	0x20000620

08006ccc <Kalman_GetFlag>:

uint8_t Kalman_GetFlag(void) {
	return KalmanFlag;
 8006ccc:	4b01      	ldr	r3, [pc, #4]	; (8006cd4 <Kalman_GetFlag+0x8>)
 8006cce:	7818      	ldrb	r0, [r3, #0]
}
 8006cd0:	4770      	bx	lr
 8006cd2:	46c0      	nop			; (mov r8, r8)
 8006cd4:	20000620 	.word	0x20000620

08006cd8 <Kalman_ClearFlag>:

void Kalman_ClearFlag(void) {
	KalmanFlag = 0;
 8006cd8:	4b01      	ldr	r3, [pc, #4]	; (8006ce0 <Kalman_ClearFlag+0x8>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]
}
 8006cde:	4770      	bx	lr
 8006ce0:	20000620 	.word	0x20000620

08006ce4 <LSM6DS3_ReadRegister>:
 * 		   size: Size of data to be written
 * @retval enum LSM6DS3_Result:
* 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
static LSM6DS3_Result LSM6DS3_ReadRegister(uint8_t reg, uint8_t* data, uint16_t size) {
 8006ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ce6:	1c13      	adds	r3, r2, #0
	if(!SPIx_ReadRegister(LSM6DS3_parameters.spi_channel,reg,data,size,LSM6DS3_parameters.timeout))
 8006ce8:	4a06      	ldr	r2, [pc, #24]	; (8006d04 <LSM6DS3_ReadRegister+0x20>)
 * 		   size: Size of data to be written
 * @retval enum LSM6DS3_Result:
* 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
static LSM6DS3_Result LSM6DS3_ReadRegister(uint8_t reg, uint8_t* data, uint16_t size) {
 8006cea:	1c0c      	adds	r4, r1, #0
	if(!SPIx_ReadRegister(LSM6DS3_parameters.spi_channel,reg,data,size,LSM6DS3_parameters.timeout))
 8006cec:	8891      	ldrh	r1, [r2, #4]
 * 		   size: Size of data to be written
 * @retval enum LSM6DS3_Result:
* 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
static LSM6DS3_Result LSM6DS3_ReadRegister(uint8_t reg, uint8_t* data, uint16_t size) {
 8006cee:	1c05      	adds	r5, r0, #0
	if(!SPIx_ReadRegister(LSM6DS3_parameters.spi_channel,reg,data,size,LSM6DS3_parameters.timeout))
 8006cf0:	9100      	str	r1, [sp, #0]
 8006cf2:	6890      	ldr	r0, [r2, #8]
 8006cf4:	1c29      	adds	r1, r5, #0
 8006cf6:	1c22      	adds	r2, r4, #0
 8006cf8:	f001 fef2 	bl	8008ae0 <SPIx_ReadRegister>
 8006cfc:	4243      	negs	r3, r0
 8006cfe:	4158      	adcs	r0, r3
		return LSM6DS3_FAIL;
	return LSM6DS3_OK;
}
 8006d00:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	20000624 	.word	0x20000624

08006d08 <LSM6DS3_WriteAndVerify.constprop.0>:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
 * 					- LSM6DS3_FAIL_COMPARE 	   = 3,  Failed due to wrong write/read compare
*/
static LSM6DS3_Result LSM6DS3_WriteAndVerify(uint8_t reg, uint8_t* data, uint16_t size) {
 8006d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0a:	b08d      	sub	sp, #52	; 0x34
	uint8_t compare[32] = {0xFF};
 8006d0c:	ad04      	add	r5, sp, #16
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
 * 					- LSM6DS3_FAIL_COMPARE 	   = 3,  Failed due to wrong write/read compare
*/
static LSM6DS3_Result LSM6DS3_WriteAndVerify(uint8_t reg, uint8_t* data, uint16_t size) {
 8006d0e:	1c07      	adds	r7, r0, #0
 8006d10:	9103      	str	r1, [sp, #12]
	uint8_t compare[32] = {0xFF};
 8006d12:	2220      	movs	r2, #32
 8006d14:	2100      	movs	r1, #0
 8006d16:	1c28      	adds	r0, r5, #0
 8006d18:	f7ff fa70 	bl	80061fc <memset>

	if(size > sizeof(compare))
		return LSM6DS3_FAIL_PARAMETERS;

	if(!SPIx_WriteRegister(LSM6DS3_parameters.spi_channel,reg,data,size,LSM6DS3_parameters.timeout))
 8006d1c:	4c12      	ldr	r4, [pc, #72]	; (8006d68 <LSM6DS3_WriteAndVerify.constprop.0+0x60>)
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
 * 					- LSM6DS3_FAIL_COMPARE 	   = 3,  Failed due to wrong write/read compare
*/
static LSM6DS3_Result LSM6DS3_WriteAndVerify(uint8_t reg, uint8_t* data, uint16_t size) {
	uint8_t compare[32] = {0xFF};
 8006d1e:	20ff      	movs	r0, #255	; 0xff
 8006d20:	7028      	strb	r0, [r5, #0]

	if(size > sizeof(compare))
		return LSM6DS3_FAIL_PARAMETERS;

	if(!SPIx_WriteRegister(LSM6DS3_parameters.spi_channel,reg,data,size,LSM6DS3_parameters.timeout))
 8006d22:	88a3      	ldrh	r3, [r4, #4]
 8006d24:	1c39      	adds	r1, r7, #0
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	68a0      	ldr	r0, [r4, #8]
 8006d2a:	9a03      	ldr	r2, [sp, #12]
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f001 ff51 	bl	8008bd4 <SPIx_WriteRegister>
		return LSM6DS3_FAIL;
 8006d32:	2601      	movs	r6, #1
	uint8_t compare[32] = {0xFF};

	if(size > sizeof(compare))
		return LSM6DS3_FAIL_PARAMETERS;

	if(!SPIx_WriteRegister(LSM6DS3_parameters.spi_channel,reg,data,size,LSM6DS3_parameters.timeout))
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d013      	beq.n	8006d60 <LSM6DS3_WriteAndVerify.constprop.0+0x58>
		return LSM6DS3_FAIL;


	if(!SPIx_ReadRegister(LSM6DS3_parameters.spi_channel,reg,compare,size,LSM6DS3_parameters.timeout))
 8006d38:	88a1      	ldrh	r1, [r4, #4]
 8006d3a:	1c2a      	adds	r2, r5, #0
 8006d3c:	9100      	str	r1, [sp, #0]
 8006d3e:	68a0      	ldr	r0, [r4, #8]
 8006d40:	1c39      	adds	r1, r7, #0
 8006d42:	1c33      	adds	r3, r6, #0
 8006d44:	f001 fecc 	bl	8008ae0 <SPIx_ReadRegister>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d009      	beq.n	8006d60 <LSM6DS3_WriteAndVerify.constprop.0+0x58>
		return LSM6DS3_FAIL;

	for(uint8_t i=0; i < size; i++) {
		if(compare[i] != data[i]){
 8006d4c:	782a      	ldrb	r2, [r5, #0]
 8006d4e:	9d03      	ldr	r5, [sp, #12]
			xprintf("not equal\r\n");
			return LSM6DS3_FAIL_COMPARE;
		}
	}

	return LSM6DS3_OK;
 8006d50:	2600      	movs	r6, #0

	if(!SPIx_ReadRegister(LSM6DS3_parameters.spi_channel,reg,compare,size,LSM6DS3_parameters.timeout))
		return LSM6DS3_FAIL;

	for(uint8_t i=0; i < size; i++) {
		if(compare[i] != data[i]){
 8006d52:	782c      	ldrb	r4, [r5, #0]
 8006d54:	42a2      	cmp	r2, r4
 8006d56:	d003      	beq.n	8006d60 <LSM6DS3_WriteAndVerify.constprop.0+0x58>
			xprintf("not equal\r\n");
 8006d58:	4804      	ldr	r0, [pc, #16]	; (8006d6c <LSM6DS3_WriteAndVerify.constprop.0+0x64>)
 8006d5a:	f002 fb21 	bl	80093a0 <xprintf>
			return LSM6DS3_FAIL_COMPARE;
 8006d5e:	2603      	movs	r6, #3
		}
	}

	return LSM6DS3_OK;
}
 8006d60:	1c30      	adds	r0, r6, #0
 8006d62:	b00d      	add	sp, #52	; 0x34
 8006d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d66:	46c0      	nop			; (mov r8, r8)
 8006d68:	20000624 	.word	0x20000624
 8006d6c:	0800a104 	.word	0x0800a104

08006d70 <LSM6DS3_Initialize>:
 * 			        - LSM6DS3_SA0_HIGH_LEVEL address -> (0x6B << 1)
 * 		   timeout: Set the timeout for the I2C peripheral
 * 		   i2c_channel: Define the selected I2C channel for the IMU
 * @retval None
*/
void LSM6DS3_Initialize(SPI_TypeDef* spi_channel, uint16_t timeout) {
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	1c0d      	adds	r5, r1, #0
 8006d74:	1c04      	adds	r4, r0, #0
	
	SPIx_init(spi_channel);
 8006d76:	f001 fe41 	bl	80089fc <SPIx_init>
	LSM6DS3_parameters.timeout	   = timeout;
 8006d7a:	4b02      	ldr	r3, [pc, #8]	; (8006d84 <LSM6DS3_Initialize+0x14>)
 8006d7c:	809d      	strh	r5, [r3, #4]
	LSM6DS3_parameters.spi_channel = spi_channel;
 8006d7e:	609c      	str	r4, [r3, #8]
}
 8006d80:	bd38      	pop	{r3, r4, r5, pc}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	20000624 	.word	0x20000624

08006d88 <LSM6DS3_Detect>:
 * @param  None
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
LSM6DS3_Result LSM6DS3_Detect(uint8_t efforts) {
 8006d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d8a:	1c05      	adds	r5, r0, #0
	uint8_t byte;

	while(efforts > 0) {
 8006d8c:	e018      	b.n	8006dc0 <LSM6DS3_Detect+0x38>
		if(LSM6DS3_ReadRegister(LSM6DS3_XL_GS_WHO_AM_I_REG, &byte, sizeof(byte)) == LSM6DS3_OK) {
 8006d8e:	466c      	mov	r4, sp
 8006d90:	3407      	adds	r4, #7
 8006d92:	200f      	movs	r0, #15
 8006d94:	1c21      	adds	r1, r4, #0
 8006d96:	2201      	movs	r2, #1
 8006d98:	f7ff ffa4 	bl	8006ce4 <LSM6DS3_ReadRegister>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d10a      	bne.n	8006db6 <LSM6DS3_Detect+0x2e>
			if(byte == LSM6DS3N_WHO_I_AM_RESPONSE ||
 8006da0:	7823      	ldrb	r3, [r4, #0]
 8006da2:	2b69      	cmp	r3, #105	; 0x69
 8006da4:	d010      	beq.n	8006dc8 <LSM6DS3_Detect+0x40>
 8006da6:	1c18      	adds	r0, r3, #0
 8006da8:	386c      	subs	r0, #108	; 0x6c
 8006daa:	4242      	negs	r2, r0
 8006dac:	4150      	adcs	r0, r2
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d10a      	bne.n	8006dc8 <LSM6DS3_Detect+0x40>
					byte == LSM6DS3_WHO_I_AM_RESPONSE ||
 8006db2:	2b6a      	cmp	r3, #106	; 0x6a
 8006db4:	d009      	beq.n	8006dca <LSM6DS3_Detect+0x42>
					byte == LSM6DS3TRC_WHO_I_AM_RESPONSE) {

				return LSM6DS3_OK;
			}
		}
		delay_ms(2);
 8006db6:	2002      	movs	r0, #2
 8006db8:	f000 fbf8 	bl	80075ac <delay_ms>
		efforts--;
 8006dbc:	3d01      	subs	r5, #1
 8006dbe:	b2ed      	uxtb	r5, r5
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
LSM6DS3_Result LSM6DS3_Detect(uint8_t efforts) {
	uint8_t byte;

	while(efforts > 0) {
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	d1e4      	bne.n	8006d8e <LSM6DS3_Detect+0x6>
			}
		}
		delay_ms(2);
		efforts--;
	}
	return LSM6DS3_FAIL;
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	e000      	b.n	8006dca <LSM6DS3_Detect+0x42>
		if(LSM6DS3_ReadRegister(LSM6DS3_XL_GS_WHO_AM_I_REG, &byte, sizeof(byte)) == LSM6DS3_OK) {
			if(byte == LSM6DS3N_WHO_I_AM_RESPONSE ||
					byte == LSM6DS3_WHO_I_AM_RESPONSE ||
					byte == LSM6DS3TRC_WHO_I_AM_RESPONSE) {

				return LSM6DS3_OK;
 8006dc8:	2000      	movs	r0, #0
		}
		delay_ms(2);
		efforts--;
	}
	return LSM6DS3_FAIL;
}
 8006dca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08006dcc <LSM6DS3_XL_Start>:
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
LSM6DS3_Result LSM6DS3_XL_Start(uint8_t XL_Rate, uint8_t XL_Scale, uint8_t XL_Filter) {
 8006dcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t byte = (XL_Rate << 4) | ((XL_Scale << 2) & 0x0F) | (XL_Filter & 0x03);
 8006dce:	2403      	movs	r4, #3
 8006dd0:	0105      	lsls	r5, r0, #4
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
LSM6DS3_Result LSM6DS3_XL_Start(uint8_t XL_Rate, uint8_t XL_Scale, uint8_t XL_Filter) {
 8006dd2:	1c0b      	adds	r3, r1, #0
	uint8_t byte = (XL_Rate << 4) | ((XL_Scale << 2) & 0x0F) | (XL_Filter & 0x03);
 8006dd4:	4014      	ands	r4, r2
 8006dd6:	432c      	orrs	r4, r5
 8006dd8:	009e      	lsls	r6, r3, #2
 8006dda:	250f      	movs	r5, #15
 8006ddc:	4669      	mov	r1, sp
 8006dde:	4035      	ands	r5, r6
 8006de0:	432c      	orrs	r4, r5
 8006de2:	3107      	adds	r1, #7
 8006de4:	700c      	strb	r4, [r1, #0]
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
static LSM6DS3_Result LSM6DS3_Verify_XL_Settings(uint8_t XL_Rate, uint8_t XL_Range, uint8_t XL_Filter) {
	if((XL_Rate < XL_12_5Hz) || (XL_Rate > XL_6660Hz))
 8006de6:	1e44      	subs	r4, r0, #1
LSM6DS3_Result LSM6DS3_XL_Start(uint8_t XL_Rate, uint8_t XL_Scale, uint8_t XL_Filter) {
	uint8_t byte = (XL_Rate << 4) | ((XL_Scale << 2) & 0x0F) | (XL_Filter & 0x03);

	if(LSM6DS3_Verify_XL_Settings(XL_Rate, XL_Scale, XL_Filter) !=  LSM6DS3_OK){

		return LSM6DS3_FAIL_PARAMETERS;
 8006de8:	2002      	movs	r0, #2
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
static LSM6DS3_Result LSM6DS3_Verify_XL_Settings(uint8_t XL_Rate, uint8_t XL_Range, uint8_t XL_Filter) {
	if((XL_Rate < XL_12_5Hz) || (XL_Rate > XL_6660Hz))
 8006dea:	2c09      	cmp	r4, #9
 8006dec:	d80a      	bhi.n	8006e04 <LSM6DS3_XL_Start+0x38>
		return LSM6DS3_FAIL_PARAMETERS;
	else if((XL_Range < XL_RANGE_2G) || (XL_Range > XL_RANGE_8G))
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d808      	bhi.n	8006e04 <LSM6DS3_XL_Start+0x38>
		return LSM6DS3_FAIL_PARAMETERS;
	else if((XL_Filter < XL_FILTER_400Hz) || (XL_Filter > XL_FILTER_50Hz))
 8006df2:	2a03      	cmp	r2, #3
 8006df4:	d806      	bhi.n	8006e04 <LSM6DS3_XL_Start+0x38>
		return LSM6DS3_FAIL_PARAMETERS;
	LSM6DS3_parameters.XL_range = XL_Range;
 8006df6:	4a04      	ldr	r2, [pc, #16]	; (8006e08 <LSM6DS3_XL_Start+0x3c>)

		return LSM6DS3_FAIL_PARAMETERS;
		//xprintf("%s-%d\r\n",__func__,__LINE__);
	}

	if(LSM6DS3_WriteAndVerify(LSM6DS3_XL_GS_CTRL1_XL, &byte, sizeof(byte)) !=  LSM6DS3_OK){
 8006df8:	2010      	movs	r0, #16
		return LSM6DS3_FAIL_PARAMETERS;
	else if((XL_Range < XL_RANGE_2G) || (XL_Range > XL_RANGE_8G))
		return LSM6DS3_FAIL_PARAMETERS;
	else if((XL_Filter < XL_FILTER_400Hz) || (XL_Filter > XL_FILTER_50Hz))
		return LSM6DS3_FAIL_PARAMETERS;
	LSM6DS3_parameters.XL_range = XL_Range;
 8006dfa:	7013      	strb	r3, [r2, #0]

		return LSM6DS3_FAIL_PARAMETERS;
		//xprintf("%s-%d\r\n",__func__,__LINE__);
	}

	if(LSM6DS3_WriteAndVerify(LSM6DS3_XL_GS_CTRL1_XL, &byte, sizeof(byte)) !=  LSM6DS3_OK){
 8006dfc:	f7ff ff84 	bl	8006d08 <LSM6DS3_WriteAndVerify.constprop.0>
LSM6DS3_Result LSM6DS3_XL_Start(uint8_t XL_Rate, uint8_t XL_Scale, uint8_t XL_Filter) {
	uint8_t byte = (XL_Rate << 4) | ((XL_Scale << 2) & 0x0F) | (XL_Filter & 0x03);

	if(LSM6DS3_Verify_XL_Settings(XL_Rate, XL_Scale, XL_Filter) !=  LSM6DS3_OK){

		return LSM6DS3_FAIL_PARAMETERS;
 8006e00:	1e43      	subs	r3, r0, #1
 8006e02:	4198      	sbcs	r0, r3
		return LSM6DS3_FAIL;
		//xprintf("%s-%d\r\n",__func__,__LINE__);
	}

	return LSM6DS3_OK;
}
 8006e04:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8006e06:	46c0      	nop			; (mov r8, r8)
 8006e08:	20000624 	.word	0x20000624

08006e0c <LSM6DS3_GS_Start>:
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
LSM6DS3_Result LSM6DS3_GS_Start(uint8_t GS_Rate, uint8_t GS_Range) {
 8006e0c:	b513      	push	{r0, r1, r4, lr}
	uint8_t byte = (GS_Rate << 4) | ((GS_Range << 1) & 0x0F);
 8006e0e:	004c      	lsls	r4, r1, #1
 8006e10:	220f      	movs	r2, #15
 8006e12:	4022      	ands	r2, r4
 8006e14:	0104      	lsls	r4, r0, #4

	byte &= 0xFE; /* Always secure the LSB is 0 */
 8006e16:	466b      	mov	r3, sp
 8006e18:	4322      	orrs	r2, r4
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
static LSM6DS3_Result LSM6DS3_Verify_GS_Settings(uint8_t GS_Rate, uint8_t GS_Range) {
	if((GS_Rate < GS_12_5Hz) || (GS_Rate > GS_1666Hz))
 8006e1a:	3801      	subs	r0, #1
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
LSM6DS3_Result LSM6DS3_GS_Start(uint8_t GS_Rate, uint8_t GS_Range) {
	uint8_t byte = (GS_Rate << 4) | ((GS_Range << 1) & 0x0F);

	byte &= 0xFE; /* Always secure the LSB is 0 */
 8006e1c:	71da      	strb	r2, [r3, #7]
 8006e1e:	3307      	adds	r3, #7
 * @retval enum LSM6DS3_Result:
 * 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL_PARAMETERS  = 2,  Failed due to wrong parameters
*/
static LSM6DS3_Result LSM6DS3_Verify_GS_Settings(uint8_t GS_Rate, uint8_t GS_Range) {
	if((GS_Rate < GS_12_5Hz) || (GS_Rate > GS_1666Hz))
 8006e20:	2807      	cmp	r0, #7
 8006e22:	d80e      	bhi.n	8006e42 <LSM6DS3_GS_Start+0x36>
		return LSM6DS3_FAIL_PARAMETERS;
	else if((GS_Range < GS_RANGE_250dps) || (GS_Range > GS_RANGE_2000dps) || (GS_Range == 3) || (GS_Range == 5))
 8006e24:	2903      	cmp	r1, #3
 8006e26:	d00c      	beq.n	8006e42 <LSM6DS3_GS_Start+0x36>
 8006e28:	2906      	cmp	r1, #6
 8006e2a:	d80a      	bhi.n	8006e42 <LSM6DS3_GS_Start+0x36>
 8006e2c:	2905      	cmp	r1, #5
 8006e2e:	d008      	beq.n	8006e42 <LSM6DS3_GS_Start+0x36>
		return LSM6DS3_FAIL_PARAMETERS;
	LSM6DS3_parameters.GS_range = GS_Range;
 8006e30:	480b      	ldr	r0, [pc, #44]	; (8006e60 <LSM6DS3_GS_Start+0x54>)
 8006e32:	7041      	strb	r1, [r0, #1]
		xprintf("%s-%d\r\n",__func__,__LINE__);
		return LSM6DS3_FAIL_PARAMETERS;

	}

	if(LSM6DS3_WriteAndVerify(LSM6DS3_XL_GS_CTRL2_G, &byte, sizeof(byte)) !=  LSM6DS3_OK){
 8006e34:	2011      	movs	r0, #17
 8006e36:	1c19      	adds	r1, r3, #0
 8006e38:	f7ff ff66 	bl	8006d08 <LSM6DS3_WriteAndVerify.constprop.0>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d00d      	beq.n	8006e5c <LSM6DS3_GS_Start+0x50>
 8006e40:	e006      	b.n	8006e50 <LSM6DS3_GS_Start+0x44>
	uint8_t byte = (GS_Rate << 4) | ((GS_Range << 1) & 0x0F);

	byte &= 0xFE; /* Always secure the LSB is 0 */
	if(LSM6DS3_Verify_GS_Settings(GS_Rate, GS_Range) !=  LSM6DS3_OK){

		xprintf("%s-%d\r\n",__func__,__LINE__);
 8006e42:	4808      	ldr	r0, [pc, #32]	; (8006e64 <LSM6DS3_GS_Start+0x58>)
 8006e44:	4908      	ldr	r1, [pc, #32]	; (8006e68 <LSM6DS3_GS_Start+0x5c>)
 8006e46:	22b7      	movs	r2, #183	; 0xb7
 8006e48:	f002 faaa 	bl	80093a0 <xprintf>
		return LSM6DS3_FAIL_PARAMETERS;
 8006e4c:	2002      	movs	r0, #2
 8006e4e:	e005      	b.n	8006e5c <LSM6DS3_GS_Start+0x50>

	}

	if(LSM6DS3_WriteAndVerify(LSM6DS3_XL_GS_CTRL2_G, &byte, sizeof(byte)) !=  LSM6DS3_OK){
		xprintf("%s-%d\r\n",__func__,__LINE__);
 8006e50:	4804      	ldr	r0, [pc, #16]	; (8006e64 <LSM6DS3_GS_Start+0x58>)
 8006e52:	4905      	ldr	r1, [pc, #20]	; (8006e68 <LSM6DS3_GS_Start+0x5c>)
 8006e54:	22bd      	movs	r2, #189	; 0xbd
 8006e56:	f002 faa3 	bl	80093a0 <xprintf>
		return LSM6DS3_FAIL;
 8006e5a:	2001      	movs	r0, #1
	}

	return LSM6DS3_OK;
}
 8006e5c:	bd16      	pop	{r1, r2, r4, pc}
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	20000624 	.word	0x20000624
 8006e64:	0800a110 	.word	0x0800a110
 8006e68:	0800a118 	.word	0x0800a118

08006e6c <LSM6DS3_IMU_GetMeasurements>:
 * @param  None
 * @retval enum LSM6DS3_Result:
* 					- LSM6DS3_OK    		   = 0,  Success
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
LSM6DS3_Result LSM6DS3_IMU_GetMeasurements(void) {
 8006e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t bytes[14] = {0};
 8006e6e:	2100      	movs	r1, #0
 8006e70:	220e      	movs	r2, #14
 8006e72:	4668      	mov	r0, sp
 8006e74:	f7ff f9c2 	bl	80061fc <memset>

	if(LSM6DS3_ReadRegister(LSM6DS3_XL_GS_OUT_TEMP_L, bytes, sizeof(bytes)) == LSM6DS3_OK) {
 8006e78:	2020      	movs	r0, #32
 8006e7a:	4669      	mov	r1, sp
 8006e7c:	220e      	movs	r2, #14
 8006e7e:	f7ff ff31 	bl	8006ce4 <LSM6DS3_ReadRegister>
		LSM6DS3_data.XL_x 		 = (int16_t) (bytes[9]<<8  | bytes[8]);
		LSM6DS3_data.XL_y 		 = (int16_t) (bytes[11]<<8 | bytes[10]);
		LSM6DS3_data.XL_z 		 = (int16_t) (bytes[13]<<8 | bytes[12]);
		return LSM6DS3_OK;
	}
	return LSM6DS3_FAIL;
 8006e82:	2301      	movs	r3, #1
 * 					- LSM6DS3_FAIL  		   = 1,  Failed due to HAL
*/
LSM6DS3_Result LSM6DS3_IMU_GetMeasurements(void) {
	uint8_t bytes[14] = {0};

	if(LSM6DS3_ReadRegister(LSM6DS3_XL_GS_OUT_TEMP_L, bytes, sizeof(bytes)) == LSM6DS3_OK) {
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d126      	bne.n	8006ed6 <LSM6DS3_IMU_GetMeasurements+0x6a>
		LSM6DS3_data.Temperature = (int16_t) (bytes[1]<<8  | bytes[0]);
 8006e88:	4669      	mov	r1, sp
 8006e8a:	784a      	ldrb	r2, [r1, #1]
 8006e8c:	7809      	ldrb	r1, [r1, #0]
 8006e8e:	4b13      	ldr	r3, [pc, #76]	; (8006edc <LSM6DS3_IMU_GetMeasurements+0x70>)
 8006e90:	0214      	lsls	r4, r2, #8
 8006e92:	430c      	orrs	r4, r1
 8006e94:	819c      	strh	r4, [r3, #12]
		LSM6DS3_data.GS_x 		 = (int16_t) (bytes[3]<<8  | bytes[2]);
 8006e96:	466c      	mov	r4, sp
 8006e98:	78e2      	ldrb	r2, [r4, #3]
 8006e9a:	78a1      	ldrb	r1, [r4, #2]
 8006e9c:	0212      	lsls	r2, r2, #8
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	80da      	strh	r2, [r3, #6]
		LSM6DS3_data.GS_y 		 = (int16_t) (bytes[5]<<8  | bytes[4]);
 8006ea2:	7962      	ldrb	r2, [r4, #5]
 8006ea4:	7921      	ldrb	r1, [r4, #4]
 8006ea6:	0212      	lsls	r2, r2, #8
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	811a      	strh	r2, [r3, #8]
		LSM6DS3_data.GS_z 		 = (int16_t) (bytes[7]<<8  | bytes[6]);
 8006eac:	79e2      	ldrb	r2, [r4, #7]
 8006eae:	79a1      	ldrb	r1, [r4, #6]
 8006eb0:	0212      	lsls	r2, r2, #8
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	815a      	strh	r2, [r3, #10]
		LSM6DS3_data.XL_x 		 = (int16_t) (bytes[9]<<8  | bytes[8]);
 8006eb6:	7a62      	ldrb	r2, [r4, #9]
 8006eb8:	7a21      	ldrb	r1, [r4, #8]
 8006eba:	0212      	lsls	r2, r2, #8
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	801a      	strh	r2, [r3, #0]
		LSM6DS3_data.XL_y 		 = (int16_t) (bytes[11]<<8 | bytes[10]);
 8006ec0:	7ae2      	ldrb	r2, [r4, #11]
 8006ec2:	7aa1      	ldrb	r1, [r4, #10]
 8006ec4:	0212      	lsls	r2, r2, #8
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	805a      	strh	r2, [r3, #2]
		LSM6DS3_data.XL_z 		 = (int16_t) (bytes[13]<<8 | bytes[12]);
 8006eca:	7b62      	ldrb	r2, [r4, #13]
 8006ecc:	7b21      	ldrb	r1, [r4, #12]
 8006ece:	0212      	lsls	r2, r2, #8
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	809a      	strh	r2, [r3, #4]
		return LSM6DS3_OK;
 8006ed4:	1c03      	adds	r3, r0, #0
	}
	return LSM6DS3_FAIL;
}
 8006ed6:	1c18      	adds	r0, r3, #0
 8006ed8:	b004      	add	sp, #16
 8006eda:	bd10      	pop	{r4, pc}
 8006edc:	20000630 	.word	0x20000630

08006ee0 <LSM6DS3_GetXL_X_Int16>:
 * @brief  Get the raw data of X axe (Accelerometer)
 * @param  none
 * @retval int16_t: Raw data of X axe
*/
int16_t LSM6DS3_GetXL_X_Int16(void) {
	return LSM6DS3_data.XL_x;
 8006ee0:	4b01      	ldr	r3, [pc, #4]	; (8006ee8 <LSM6DS3_GetXL_X_Int16+0x8>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	5e98      	ldrsh	r0, [r3, r2]
}
 8006ee6:	4770      	bx	lr
 8006ee8:	20000630 	.word	0x20000630

08006eec <LSM6DS3_GetXL_Y_Int16>:
 * @brief  Get the raw data of Y axe (Accelerometer)
 * @param  None
 * @retval int16_t: Raw data of Y axe
*/
int16_t LSM6DS3_GetXL_Y_Int16(void) {
	return LSM6DS3_data.XL_y;
 8006eec:	4b01      	ldr	r3, [pc, #4]	; (8006ef4 <LSM6DS3_GetXL_Y_Int16+0x8>)
 8006eee:	2202      	movs	r2, #2
 8006ef0:	5e98      	ldrsh	r0, [r3, r2]
}
 8006ef2:	4770      	bx	lr
 8006ef4:	20000630 	.word	0x20000630

08006ef8 <LSM6DS3_GetXL_Z_Int16>:
 * @brief  Get the raw data of Z axe (Accelerometer)
 * @param  None
 * @retval int16_t: Raw data of Z axe
*/
int16_t LSM6DS3_GetXL_Z_Int16(void) {
	return LSM6DS3_data.XL_z;
 8006ef8:	4b01      	ldr	r3, [pc, #4]	; (8006f00 <LSM6DS3_GetXL_Z_Int16+0x8>)
 8006efa:	2204      	movs	r2, #4
 8006efc:	5e98      	ldrsh	r0, [r3, r2]
}
 8006efe:	4770      	bx	lr
 8006f00:	20000630 	.word	0x20000630

08006f04 <LSM6DS3_GetGS_X_Int16>:
 * @brief  Get the raw data of X axe (Gyroscope)
 * @param  None
 * @retval int16_t: Raw data of X axe
*/
int16_t LSM6DS3_GetGS_X_Int16(void) {
	return LSM6DS3_data.GS_x;
 8006f04:	4b01      	ldr	r3, [pc, #4]	; (8006f0c <LSM6DS3_GetGS_X_Int16+0x8>)
 8006f06:	2206      	movs	r2, #6
 8006f08:	5e98      	ldrsh	r0, [r3, r2]
}
 8006f0a:	4770      	bx	lr
 8006f0c:	20000630 	.word	0x20000630

08006f10 <LSM6DS3_GetGS_Y_Int16>:
 * @brief  Get the raw data of Y axe (Gyroscope)
 * @param  None
 * @retval int16_t: Raw data of Y axe
*/
int16_t LSM6DS3_GetGS_Y_Int16(void) {
	return LSM6DS3_data.GS_y;
 8006f10:	4b01      	ldr	r3, [pc, #4]	; (8006f18 <LSM6DS3_GetGS_Y_Int16+0x8>)
 8006f12:	2208      	movs	r2, #8
 8006f14:	5e98      	ldrsh	r0, [r3, r2]
}
 8006f16:	4770      	bx	lr
 8006f18:	20000630 	.word	0x20000630

08006f1c <LSM6DS3_GetGS_Z_Int16>:
 * @brief  Get the raw data of Z axe (Gyroscope)
 * @param  None
 * @retval int16_t: Raw data of Z axe
*/
int16_t LSM6DS3_GetGS_Z_Int16(void) {
	return LSM6DS3_data.GS_z;
 8006f1c:	4b01      	ldr	r3, [pc, #4]	; (8006f24 <LSM6DS3_GetGS_Z_Int16+0x8>)
 8006f1e:	220a      	movs	r2, #10
 8006f20:	5e98      	ldrsh	r0, [r3, r2]
}
 8006f22:	4770      	bx	lr
 8006f24:	20000630 	.word	0x20000630

08006f28 <LSM6DS3_Temperature_Int16>:
 * @brief  Get the raw data of temperature
 * @param  None
 * @retval int16_t: Raw data of temperature
*/
int16_t LSM6DS3_Temperature_Int16(void) {
	return LSM6DS3_data.Temperature;
 8006f28:	4b01      	ldr	r3, [pc, #4]	; (8006f30 <LSM6DS3_Temperature_Int16+0x8>)
 8006f2a:	220c      	movs	r2, #12
 8006f2c:	5e98      	ldrsh	r0, [r3, r2]
}
 8006f2e:	4770      	bx	lr
 8006f30:	20000630 	.word	0x20000630

08006f34 <raise_beep_short>:
void GreenLedOff() {
	GPIO_SetBits(GREEN_LED_PORT, GREEN_LED_PIN);
}
#endif
void raise_beep_short() {
	beepStep[0].duration = 30;
 8006f34:	4807      	ldr	r0, [pc, #28]	; (8006f54 <raise_beep_short+0x20>)
 8006f36:	221e      	movs	r2, #30
	beepStep[0].type = 1;
	beepStep[1].duration = 30;
	beepStep[1].type = 0;
	beepStepCount = 2;
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <raise_beep_short+0x24>)
	GPIO_SetBits(GREEN_LED_PORT, GREEN_LED_PIN);
}
#endif
void raise_beep_short() {
	beepStep[0].duration = 30;
	beepStep[0].type = 1;
 8006f3a:	2101      	movs	r1, #1
void GreenLedOff() {
	GPIO_SetBits(GREEN_LED_PORT, GREEN_LED_PIN);
}
#endif
void raise_beep_short() {
	beepStep[0].duration = 30;
 8006f3c:	6002      	str	r2, [r0, #0]
	beepStep[0].type = 1;
 8006f3e:	6041      	str	r1, [r0, #4]
	beepStep[1].duration = 30;
 8006f40:	6082      	str	r2, [r0, #8]
	beepStep[1].type = 0;
	beepStepCount = 2;
 8006f42:	2102      	movs	r1, #2
#endif
void raise_beep_short() {
	beepStep[0].duration = 30;
	beepStep[0].type = 1;
	beepStep[1].duration = 30;
	beepStep[1].type = 0;
 8006f44:	2200      	movs	r2, #0
	beepStepCount = 2;
 8006f46:	6019      	str	r1, [r3, #0]
#endif
void raise_beep_short() {
	beepStep[0].duration = 30;
	beepStep[0].type = 1;
	beepStep[1].duration = 30;
	beepStep[1].type = 0;
 8006f48:	60c2      	str	r2, [r0, #12]
	beepStepCount = 2;
	beepStepIdx = 0;
	nextBeepTick = 0;
 8006f4a:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <raise_beep_short+0x28>)
	beepStep[0].duration = 30;
	beepStep[0].type = 1;
	beepStep[1].duration = 30;
	beepStep[1].type = 0;
	beepStepCount = 2;
	beepStepIdx = 0;
 8006f4c:	4804      	ldr	r0, [pc, #16]	; (8006f60 <raise_beep_short+0x2c>)
	nextBeepTick = 0;
 8006f4e:	601a      	str	r2, [r3, #0]
	beepStep[0].duration = 30;
	beepStep[0].type = 1;
	beepStep[1].duration = 30;
	beepStep[1].type = 0;
	beepStepCount = 2;
	beepStepIdx = 0;
 8006f50:	6002      	str	r2, [r0, #0]
	nextBeepTick = 0;
}
 8006f52:	4770      	bx	lr
 8006f54:	20000ad4 	.word	0x20000ad4
 8006f58:	20000530 	.word	0x20000530
 8006f5c:	20000ab0 	.word	0x20000ab0
 8006f60:	2000052c 	.word	0x2000052c

08006f64 <blink_red_led>:
		greenLedStepCount = 2;
		greenLedStepIdx = 0;
	}
}

void blink_red_led(BlinkType_T blinkType) {
 8006f64:	b500      	push	{lr}
	if(redLedBlinkType == blinkType) {
 8006f66:	4b1c      	ldr	r3, [pc, #112]	; (8006fd8 <blink_red_led+0x74>)
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	4282      	cmp	r2, r0
 8006f6c:	d032      	beq.n	8006fd4 <blink_red_led+0x70>
		return;
	}
	redLedBlinkType = blinkType;
 8006f6e:	7018      	strb	r0, [r3, #0]
	if(redLedBlinkType == TYPE_BLINK_DOUBLE) {
 8006f70:	2802      	cmp	r0, #2
 8006f72:	d10e      	bne.n	8006f92 <blink_red_led+0x2e>
		redLedStep[0].duration = 10;
 8006f74:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <blink_red_led+0x78>)
 8006f76:	210a      	movs	r1, #10
		redLedStep[0].type = 1;
 8006f78:	2001      	movs	r0, #1
		redLedStep[1].duration = 10;
		redLedStep[1].type = 0;
 8006f7a:	2200      	movs	r2, #0
	if(redLedBlinkType == blinkType) {
		return;
	}
	redLedBlinkType = blinkType;
	if(redLedBlinkType == TYPE_BLINK_DOUBLE) {
		redLedStep[0].duration = 10;
 8006f7c:	6019      	str	r1, [r3, #0]
		redLedStep[0].type = 1;
		redLedStep[1].duration = 10;
 8006f7e:	6099      	str	r1, [r3, #8]
		redLedStep[1].type = 0;
		redLedStep[2].duration = 10;
 8006f80:	6119      	str	r1, [r3, #16]
		redLedStep[2].type = 1;
		redLedStep[3].duration = 200;
 8006f82:	21c8      	movs	r1, #200	; 0xc8
 8006f84:	6199      	str	r1, [r3, #24]
		return;
	}
	redLedBlinkType = blinkType;
	if(redLedBlinkType == TYPE_BLINK_DOUBLE) {
		redLedStep[0].duration = 10;
		redLedStep[0].type = 1;
 8006f86:	6058      	str	r0, [r3, #4]
		redLedStep[1].duration = 10;
		redLedStep[1].type = 0;
 8006f88:	60da      	str	r2, [r3, #12]
		redLedStep[2].duration = 10;
		redLedStep[2].type = 1;
 8006f8a:	6158      	str	r0, [r3, #20]
		redLedStep[3].duration = 200;
		redLedStep[3].type = 0;
 8006f8c:	61da      	str	r2, [r3, #28]
		redLedStepCount = 4;
 8006f8e:	2104      	movs	r1, #4
 8006f90:	e01c      	b.n	8006fcc <blink_red_led+0x68>
		redLedStepIdx = 0;
	} else if(redLedBlinkType == TYPE_BLINK_FAST) {
 8006f92:	2803      	cmp	r0, #3
 8006f94:	d105      	bne.n	8006fa2 <blink_red_led+0x3e>
		redLedStep[0].duration = 10;
 8006f96:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <blink_red_led+0x78>)
 8006f98:	220a      	movs	r2, #10
		redLedStep[0].type = 1;
 8006f9a:	2001      	movs	r0, #1
		redLedStep[3].duration = 200;
		redLedStep[3].type = 0;
		redLedStepCount = 4;
		redLedStepIdx = 0;
	} else if(redLedBlinkType == TYPE_BLINK_FAST) {
		redLedStep[0].duration = 10;
 8006f9c:	601a      	str	r2, [r3, #0]
		redLedStep[0].type = 1;
 8006f9e:	6058      	str	r0, [r3, #4]
 8006fa0:	e010      	b.n	8006fc4 <blink_red_led+0x60>
		redLedStep[1].duration = 10;
		redLedStep[1].type = 0;
		redLedStepCount = 2;
		redLedStepIdx = 0;
	} else if(redLedBlinkType == TYPE_BLINK_SLOW) {
 8006fa2:	2804      	cmp	r0, #4
 8006fa4:	d106      	bne.n	8006fb4 <blink_red_led+0x50>
		redLedStep[0].duration = 180;
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <blink_red_led+0x78>)
		redLedStep[0].type = 1;
 8006fa8:	2201      	movs	r2, #1
		redLedStep[1].duration = 10;
		redLedStep[1].type = 0;
		redLedStepCount = 2;
		redLedStepIdx = 0;
	} else if(redLedBlinkType == TYPE_BLINK_SLOW) {
		redLedStep[0].duration = 180;
 8006faa:	21b4      	movs	r1, #180	; 0xb4
		redLedStep[0].type = 1;
 8006fac:	605a      	str	r2, [r3, #4]
		redLedStep[1].duration = 10;
		redLedStep[1].type = 0;
		redLedStepCount = 2;
		redLedStepIdx = 0;
	} else if(redLedBlinkType == TYPE_BLINK_SLOW) {
		redLedStep[0].duration = 180;
 8006fae:	6019      	str	r1, [r3, #0]
		redLedStep[0].type = 1;
		redLedStep[1].duration = 50;
 8006fb0:	2232      	movs	r2, #50	; 0x32
 8006fb2:	e007      	b.n	8006fc4 <blink_red_led+0x60>
		redLedStep[1].type = 0;
		redLedStepCount = 2;
		redLedStepIdx = 0;
	} else if(redLedBlinkType == TYPE_BLINK_ONCE) {
 8006fb4:	2805      	cmp	r0, #5
 8006fb6:	d10d      	bne.n	8006fd4 <blink_red_led+0x70>
		redLedStep[0].duration = 30;
 8006fb8:	4b08      	ldr	r3, [pc, #32]	; (8006fdc <blink_red_led+0x78>)
 8006fba:	221e      	movs	r2, #30
		redLedStep[0].type = 1;
 8006fbc:	2001      	movs	r0, #1
		redLedStep[1].duration = 50;
		redLedStep[1].type = 0;
		redLedStepCount = 2;
		redLedStepIdx = 0;
	} else if(redLedBlinkType == TYPE_BLINK_ONCE) {
		redLedStep[0].duration = 30;
 8006fbe:	601a      	str	r2, [r3, #0]
		redLedStep[0].type = 1;
 8006fc0:	6058      	str	r0, [r3, #4]
		redLedStep[1].duration = 20;
 8006fc2:	2214      	movs	r2, #20
 8006fc4:	609a      	str	r2, [r3, #8]
		redLedStep[1].type = 0;
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	60da      	str	r2, [r3, #12]
		redLedStepCount = 2;
 8006fca:	2102      	movs	r1, #2
 8006fcc:	4804      	ldr	r0, [pc, #16]	; (8006fe0 <blink_red_led+0x7c>)
		redLedStepIdx = 0;
 8006fce:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <blink_red_led+0x80>)
	} else if(redLedBlinkType == TYPE_BLINK_ONCE) {
		redLedStep[0].duration = 30;
		redLedStep[0].type = 1;
		redLedStep[1].duration = 20;
		redLedStep[1].type = 0;
		redLedStepCount = 2;
 8006fd0:	6001      	str	r1, [r0, #0]
		redLedStepIdx = 0;
 8006fd2:	601a      	str	r2, [r3, #0]
	}
}
 8006fd4:	bd00      	pop	{pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	20000b1c 	.word	0x20000b1c
 8006fdc:	20000afc 	.word	0x20000afc
 8006fe0:	20000528 	.word	0x20000528
 8006fe4:	20000640 	.word	0x20000640

08006fe8 <blink_red_led_once>:

void blink_no_x3_output() {
	blink_green_led(TYPE_KEEP_OFF);
}

void blink_red_led_once() {
 8006fe8:	b508      	push	{r3, lr}
	blink_red_led(TYPE_BLINK_ONCE);
 8006fea:	2005      	movs	r0, #5
 8006fec:	f7ff ffba 	bl	8006f64 <blink_red_led>
}
 8006ff0:	bd08      	pop	{r3, pc}

08006ff2 <raise_command_coming>:

void blink_green_led_once() {
	blink_green_led(TYPE_BLINK_ONCE);
}

void raise_command_coming() {
 8006ff2:	b508      	push	{r3, lr}
	raise_beep_short();
 8006ff4:	f7ff ff9e 	bl	8006f34 <raise_beep_short>
	blink_red_led_once();
 8006ff8:	f7ff fff6 	bl	8006fe8 <blink_red_led_once>
}
 8006ffc:	bd08      	pop	{r3, pc}
	...

08007000 <cmd_response>:
	ptr[7] = HexChar[val & 0xF];
	ptr[8] = 0x0;
}

int cmd_response(char* buff, int size, char *cmd, const char *fmt, ...)
{
 8007000:	b408      	push	{r3}
 8007002:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8007004:	ac09      	add	r4, sp, #36	; 0x24
 8007006:	cc80      	ldmia	r4!, {r7}
	int n = 0;
    va_list ap;
    n = usnprintf(buff, size, "*SS,%s,V9,%s,", g_config.deviceCode, cmd);
 8007008:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <cmd_response+0x44>)
 800700a:	9200      	str	r2, [sp, #0]
 800700c:	4a0e      	ldr	r2, [pc, #56]	; (8007048 <cmd_response+0x48>)
	ptr[7] = HexChar[val & 0xF];
	ptr[8] = 0x0;
}

int cmd_response(char* buff, int size, char *cmd, const char *fmt, ...)
{
 800700e:	1c0e      	adds	r6, r1, #0
 8007010:	1c05      	adds	r5, r0, #0
	int n = 0;
    va_list ap;
    n = usnprintf(buff, size, "*SS,%s,V9,%s,", g_config.deviceCode, cmd);
 8007012:	f001 fc9f 	bl	8008954 <usnprintf>
    va_start(ap, fmt);
    char *bufftmp = buff + (n);
 8007016:	182d      	adds	r5, r5, r0
    n = uvsnprintf(bufftmp, size-(n+1), (char *) fmt, ap );
 8007018:	43c0      	mvns	r0, r0
 800701a:	1831      	adds	r1, r6, r0
 800701c:	1c3a      	adds	r2, r7, #0
 800701e:	1c23      	adds	r3, r4, #0
 8007020:	1c28      	adds	r0, r5, #0
int cmd_response(char* buff, int size, char *cmd, const char *fmt, ...)
{
	int n = 0;
    va_list ap;
    n = usnprintf(buff, size, "*SS,%s,V9,%s,", g_config.deviceCode, cmd);
    va_start(ap, fmt);
 8007022:	9403      	str	r4, [sp, #12]
    char *bufftmp = buff + (n);
    n = uvsnprintf(bufftmp, size-(n+1), (char *) fmt, ap );
 8007024:	f001 fb4a 	bl	80086bc <uvsnprintf>
    va_end(ap);
    bufftmp[n] = '#';
 8007028:	2223      	movs	r2, #35	; 0x23
 800702a:	542a      	strb	r2, [r5, r0]
    n++;
    bufftmp[n] = '\r';
 800702c:	210d      	movs	r1, #13
 800702e:	182d      	adds	r5, r5, r0
    n++;
    bufftmp[n] = '\n';
 8007030:	230a      	movs	r3, #10
    return n+1;
 8007032:	3003      	adds	r0, #3
    char *bufftmp = buff + (n);
    n = uvsnprintf(bufftmp, size-(n+1), (char *) fmt, ap );
    va_end(ap);
    bufftmp[n] = '#';
    n++;
    bufftmp[n] = '\r';
 8007034:	7069      	strb	r1, [r5, #1]
    n++;
    bufftmp[n] = '\n';
 8007036:	70ab      	strb	r3, [r5, #2]
    return n+1;
}
 8007038:	b004      	add	sp, #16
 800703a:	bcf0      	pop	{r4, r5, r6, r7}
 800703c:	bc08      	pop	{r3}
 800703e:	b001      	add	sp, #4
 8007040:	4718      	bx	r3
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	20000a16 	.word	0x20000a16
 8007048:	0800a129 	.word	0x0800a129

0800704c <sks_cmd_set_debug>:
	}
}

int write_flash = 0;

static int sks_cmd_set_debug(int from, char* command, int argc, char** argv, int size, int total) {
 800704c:	b513      	push	{r0, r1, r4, lr}
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 800704e:	6918      	ldr	r0, [r3, #16]
	}
}

int write_flash = 0;

static int sks_cmd_set_debug(int from, char* command, int argc, char** argv, int size, int total) {
 8007050:	1c0c      	adds	r4, r1, #0
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 8007052:	2800      	cmp	r0, #0
 8007054:	d011      	beq.n	800707a <sks_cmd_set_debug+0x2e>
		return size;
	set = atoi(argv[4]);
 8007056:	f7ff f81b 	bl	8006090 <atoi>

	g_appStats.debugOn = set;
 800705a:	4a09      	ldr	r2, [pc, #36]	; (8007080 <sks_cmd_set_debug+0x34>)
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
		return size;
	set = atoi(argv[4]);
 800705c:	b2c0      	uxtb	r0, r0

	g_appStats.debugOn = set;
 800705e:	324d      	adds	r2, #77	; 0x4d

	cmd_response(Response, sizeof(Response), command, "%d,%d", set, g_appStats.debugOn);
 8007060:	2180      	movs	r1, #128	; 0x80
	char set = 0;
	if (argv[4] == NULL)
		return size;
	set = atoi(argv[4]);

	g_appStats.debugOn = set;
 8007062:	7010      	strb	r0, [r2, #0]

	cmd_response(Response, sizeof(Response), command, "%d,%d", set, g_appStats.debugOn);
 8007064:	4b07      	ldr	r3, [pc, #28]	; (8007084 <sks_cmd_set_debug+0x38>)
 8007066:	9000      	str	r0, [sp, #0]
 8007068:	9001      	str	r0, [sp, #4]
 800706a:	1c22      	adds	r2, r4, #0
 800706c:	4806      	ldr	r0, [pc, #24]	; (8007088 <sks_cmd_set_debug+0x3c>)
 800706e:	0049      	lsls	r1, r1, #1
 8007070:	f7ff ffc6 	bl	8007000 <cmd_response>

	response = 1;
 8007074:	4b05      	ldr	r3, [pc, #20]	; (800708c <sks_cmd_set_debug+0x40>)
 8007076:	2201      	movs	r2, #1
 8007078:	601a      	str	r2, [r3, #0]

	return size;
}
 800707a:	9804      	ldr	r0, [sp, #16]
 800707c:	bd16      	pop	{r1, r2, r4, pc}
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	200009a8 	.word	0x200009a8
 8007084:	0800a16a 	.word	0x0800a16a
 8007088:	20000644 	.word	0x20000644
 800708c:	20000748 	.word	0x20000748

08007090 <sks_cmd_set_empty>:

	response = 1;
	return size;
}

static int sks_cmd_set_empty(int from, char* command, int argc, char** argv, int size, int total) {
 8007090:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 8007092:	6918      	ldr	r0, [r3, #16]

	response = 1;
	return size;
}

static int sks_cmd_set_empty(int from, char* command, int argc, char** argv, int size, int total) {
 8007094:	1c0e      	adds	r6, r1, #0
 8007096:	1c1c      	adds	r4, r3, #0
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 8007098:	2800      	cmp	r0, #0
 800709a:	d025      	beq.n	80070e8 <sks_cmd_set_empty+0x58>
		return size;
	set = atoi(argv[4]);
 800709c:	f7fe fff8 	bl	8006090 <atoi>
 80070a0:	b2c5      	uxtb	r5, r0

	if(set == 1) {
 80070a2:	2d01      	cmp	r5, #1
 80070a4:	d10e      	bne.n	80070c4 <sks_cmd_set_empty+0x34>
		if(argv[5] != NULL) {
 80070a6:	6960      	ldr	r0, [r4, #20]
 80070a8:	4c11      	ldr	r4, [pc, #68]	; (80070f0 <sks_cmd_set_empty+0x60>)
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d004      	beq.n	80070b8 <sks_cmd_set_empty+0x28>
			g_config.emptyValue = atoi(argv[5]);
 80070ae:	f7fe ffef 	bl	8006090 <atoi>
 80070b2:	6120      	str	r0, [r4, #16]
			if(g_config.emptyValue == 0) {
 80070b4:	2800      	cmp	r0, #0
 80070b6:	d102      	bne.n	80070be <sks_cmd_set_empty+0x2e>
				g_config.emptyValue = g_appStats.frequency;
			}
		} else {
			g_config.emptyValue = g_appStats.frequency;
 80070b8:	480e      	ldr	r0, [pc, #56]	; (80070f4 <sks_cmd_set_empty+0x64>)
 80070ba:	6a03      	ldr	r3, [r0, #32]
 80070bc:	6123      	str	r3, [r4, #16]
		}
		write_flash = 1;
 80070be:	490e      	ldr	r1, [pc, #56]	; (80070f8 <sks_cmd_set_empty+0x68>)
 80070c0:	2201      	movs	r2, #1
 80070c2:	600a      	str	r2, [r1, #0]
//	append_number(Response, g_config.emptyValue);
//	strcat(Response, ",");
//	append_number(Response, g_config.fullValue);
//	strcat(Response, "#\r\n");

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d", set, g_config.emptyValue, g_config.fullValue);
 80070c4:	490a      	ldr	r1, [pc, #40]	; (80070f0 <sks_cmd_set_empty+0x60>)
 80070c6:	9500      	str	r5, [sp, #0]
 80070c8:	690a      	ldr	r2, [r1, #16]
 80070ca:	2380      	movs	r3, #128	; 0x80
 80070cc:	9201      	str	r2, [sp, #4]
 80070ce:	68c8      	ldr	r0, [r1, #12]
 80070d0:	1c32      	adds	r2, r6, #0
 80070d2:	0059      	lsls	r1, r3, #1
 80070d4:	9002      	str	r0, [sp, #8]
 80070d6:	4b09      	ldr	r3, [pc, #36]	; (80070fc <sks_cmd_set_empty+0x6c>)
 80070d8:	4809      	ldr	r0, [pc, #36]	; (8007100 <sks_cmd_set_empty+0x70>)
 80070da:	f7ff ff91 	bl	8007000 <cmd_response>

	raise_command_coming();
 80070de:	f7ff ff88 	bl	8006ff2 <raise_command_coming>

	response = 1;
 80070e2:	4d08      	ldr	r5, [pc, #32]	; (8007104 <sks_cmd_set_empty+0x74>)
 80070e4:	2401      	movs	r4, #1
 80070e6:	602c      	str	r4, [r5, #0]
	return size;
}
 80070e8:	9808      	ldr	r0, [sp, #32]
 80070ea:	b004      	add	sp, #16
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	20000a14 	.word	0x20000a14
 80070f4:	200009a8 	.word	0x200009a8
 80070f8:	20000744 	.word	0x20000744
 80070fc:	0800a167 	.word	0x0800a167
 8007100:	20000644 	.word	0x20000644
 8007104:	20000748 	.word	0x20000748

08007108 <sks_cmd_set_full>:
	response = 1;

	return size;
}

static int sks_cmd_set_full(int from, char* command, int argc, char** argv, int size, int total) {
 8007108:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 800710a:	6918      	ldr	r0, [r3, #16]
	response = 1;

	return size;
}

static int sks_cmd_set_full(int from, char* command, int argc, char** argv, int size, int total) {
 800710c:	1c0e      	adds	r6, r1, #0
 800710e:	1c1c      	adds	r4, r3, #0
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 8007110:	2800      	cmp	r0, #0
 8007112:	d025      	beq.n	8007160 <sks_cmd_set_full+0x58>
		return size;
	set = atoi(argv[4]);
 8007114:	f7fe ffbc 	bl	8006090 <atoi>
 8007118:	b2c5      	uxtb	r5, r0

	if(set == 1) {
 800711a:	2d01      	cmp	r5, #1
 800711c:	d10e      	bne.n	800713c <sks_cmd_set_full+0x34>
		if(argv[5] != NULL) {
 800711e:	6960      	ldr	r0, [r4, #20]
 8007120:	4c11      	ldr	r4, [pc, #68]	; (8007168 <sks_cmd_set_full+0x60>)
 8007122:	2800      	cmp	r0, #0
 8007124:	d004      	beq.n	8007130 <sks_cmd_set_full+0x28>
			g_config.fullValue = atoi(argv[5]);
 8007126:	f7fe ffb3 	bl	8006090 <atoi>
 800712a:	60e0      	str	r0, [r4, #12]
			if(g_config.fullValue == 0) {
 800712c:	2800      	cmp	r0, #0
 800712e:	d102      	bne.n	8007136 <sks_cmd_set_full+0x2e>
				g_config.fullValue = g_appStats.frequency;
			}
		} else {
			g_config.fullValue = g_appStats.frequency;
 8007130:	480e      	ldr	r0, [pc, #56]	; (800716c <sks_cmd_set_full+0x64>)
 8007132:	6a03      	ldr	r3, [r0, #32]
 8007134:	60e3      	str	r3, [r4, #12]
		}
		write_flash = 1;
 8007136:	490e      	ldr	r1, [pc, #56]	; (8007170 <sks_cmd_set_full+0x68>)
 8007138:	2201      	movs	r2, #1
 800713a:	600a      	str	r2, [r1, #0]
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d", set, g_config.emptyValue, g_config.fullValue);
 800713c:	490a      	ldr	r1, [pc, #40]	; (8007168 <sks_cmd_set_full+0x60>)
 800713e:	9500      	str	r5, [sp, #0]
 8007140:	690a      	ldr	r2, [r1, #16]
 8007142:	2380      	movs	r3, #128	; 0x80
 8007144:	9201      	str	r2, [sp, #4]
 8007146:	68c8      	ldr	r0, [r1, #12]
 8007148:	1c32      	adds	r2, r6, #0
 800714a:	0059      	lsls	r1, r3, #1
 800714c:	9002      	str	r0, [sp, #8]
 800714e:	4b09      	ldr	r3, [pc, #36]	; (8007174 <sks_cmd_set_full+0x6c>)
 8007150:	4809      	ldr	r0, [pc, #36]	; (8007178 <sks_cmd_set_full+0x70>)
 8007152:	f7ff ff55 	bl	8007000 <cmd_response>

	raise_command_coming();
 8007156:	f7ff ff4c 	bl	8006ff2 <raise_command_coming>

	response = 1;
 800715a:	4d08      	ldr	r5, [pc, #32]	; (800717c <sks_cmd_set_full+0x74>)
 800715c:	2401      	movs	r4, #1
 800715e:	602c      	str	r4, [r5, #0]
	return size;
}
 8007160:	9808      	ldr	r0, [sp, #32]
 8007162:	b004      	add	sp, #16
 8007164:	bd70      	pop	{r4, r5, r6, pc}
 8007166:	46c0      	nop			; (mov r8, r8)
 8007168:	20000a14 	.word	0x20000a14
 800716c:	200009a8 	.word	0x200009a8
 8007170:	20000744 	.word	0x20000744
 8007174:	0800a167 	.word	0x0800a167
 8007178:	20000644 	.word	0x20000644
 800717c:	20000748 	.word	0x20000748

08007180 <sks_cmd_reset>:

	response = 1;
	return size;
}

static int sks_cmd_reset(int from, char* command, int argc, char** argv, int size, int total) {
 8007180:	b513      	push	{r0, r1, r4, lr}
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 8007182:	6918      	ldr	r0, [r3, #16]

	response = 1;
	return size;
}

static int sks_cmd_reset(int from, char* command, int argc, char** argv, int size, int total) {
 8007184:	1c0c      	adds	r4, r1, #0
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 8007186:	2800      	cmp	r0, #0
 8007188:	d013      	beq.n	80071b2 <sks_cmd_reset+0x32>
		return size;

	set = atoi(argv[4]);
 800718a:	f7fe ff81 	bl	8006090 <atoi>
 800718e:	b2c0      	uxtb	r0, r0

	if(set == 1) {
 8007190:	2801      	cmp	r0, #1
 8007192:	d103      	bne.n	800719c <sks_cmd_reset+0x1c>
		g_appStats.resetNow = ulSecCount;
 8007194:	4908      	ldr	r1, [pc, #32]	; (80071b8 <sks_cmd_reset+0x38>)
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <sks_cmd_reset+0x3c>)
 8007198:	680a      	ldr	r2, [r1, #0]
 800719a:	651a      	str	r2, [r3, #80]	; 0x50
	}

	cmd_response(Response, sizeof(Response), command, "%d", set);
 800719c:	2280      	movs	r2, #128	; 0x80
 800719e:	9000      	str	r0, [sp, #0]
 80071a0:	0051      	lsls	r1, r2, #1
 80071a2:	4807      	ldr	r0, [pc, #28]	; (80071c0 <sks_cmd_reset+0x40>)
 80071a4:	1c22      	adds	r2, r4, #0
 80071a6:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <sks_cmd_reset+0x44>)
 80071a8:	f7ff ff2a 	bl	8007000 <cmd_response>

	response = 1;
 80071ac:	4c06      	ldr	r4, [pc, #24]	; (80071c8 <sks_cmd_reset+0x48>)
 80071ae:	2001      	movs	r0, #1
 80071b0:	6020      	str	r0, [r4, #0]
	return size;
}
 80071b2:	9804      	ldr	r0, [sp, #16]
 80071b4:	bd16      	pop	{r1, r2, r4, pc}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	20000880 	.word	0x20000880
 80071bc:	200009a8 	.word	0x200009a8
 80071c0:	20000644 	.word	0x20000644
 80071c4:	0800a16d 	.word	0x0800a16d
 80071c8:	20000748 	.word	0x20000748

080071cc <sks_cmd_disable_ema>:

	response = 1;
	return size;
}

static int sks_cmd_disable_ema(int from, char* command, int argc, char** argv, int size, int total) {
 80071cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;

	if (argv[4] == NULL)
 80071ce:	6918      	ldr	r0, [r3, #16]

	response = 1;
	return size;
}

static int sks_cmd_disable_ema(int from, char* command, int argc, char** argv, int size, int total) {
 80071d0:	1c0e      	adds	r6, r1, #0
 80071d2:	1c1c      	adds	r4, r3, #0
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;

	if (argv[4] == NULL)
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d021      	beq.n	800721c <sks_cmd_disable_ema+0x50>
		return size;

	set = atoi(argv[4]);
 80071d8:	f7fe ff5a 	bl	8006090 <atoi>
 80071dc:	b2c5      	uxtb	r5, r0

	if(set == 1) {
 80071de:	2d01      	cmp	r5, #1
 80071e0:	d10c      	bne.n	80071fc <sks_cmd_disable_ema+0x30>
		if(argv[5] != NULL) {
 80071e2:	6960      	ldr	r0, [r4, #20]
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d006      	beq.n	80071f6 <sks_cmd_disable_ema+0x2a>
			int tmp = atoi(argv[5]);
 80071e8:	f7fe ff52 	bl	8006090 <atoi>
			g_config.disableEma = (tmp > 0)?1:0;
 80071ec:	17c2      	asrs	r2, r0, #31
 80071ee:	1a11      	subs	r1, r2, r0
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <sks_cmd_disable_ema+0x54>)
 80071f2:	0fc8      	lsrs	r0, r1, #31
 80071f4:	76d8      	strb	r0, [r3, #27]
		}

		write_flash = 1;
 80071f6:	480b      	ldr	r0, [pc, #44]	; (8007224 <sks_cmd_disable_ema+0x58>)
 80071f8:	2401      	movs	r4, #1
 80071fa:	6004      	str	r4, [r0, #0]
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d", set, g_config.disableEma);
 80071fc:	4a08      	ldr	r2, [pc, #32]	; (8007220 <sks_cmd_disable_ema+0x54>)
 80071fe:	9500      	str	r5, [sp, #0]
 8007200:	7ed1      	ldrb	r1, [r2, #27]
 8007202:	2380      	movs	r3, #128	; 0x80
 8007204:	1c32      	adds	r2, r6, #0
 8007206:	9101      	str	r1, [sp, #4]
 8007208:	4807      	ldr	r0, [pc, #28]	; (8007228 <sks_cmd_disable_ema+0x5c>)
 800720a:	0059      	lsls	r1, r3, #1
 800720c:	4b07      	ldr	r3, [pc, #28]	; (800722c <sks_cmd_disable_ema+0x60>)
 800720e:	f7ff fef7 	bl	8007000 <cmd_response>

	raise_command_coming();
 8007212:	f7ff feee 	bl	8006ff2 <raise_command_coming>

	response = 1;
 8007216:	4e06      	ldr	r6, [pc, #24]	; (8007230 <sks_cmd_disable_ema+0x64>)
 8007218:	2501      	movs	r5, #1
 800721a:	6035      	str	r5, [r6, #0]
	return size;
}
 800721c:	9806      	ldr	r0, [sp, #24]
 800721e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8007220:	20000a14 	.word	0x20000a14
 8007224:	20000744 	.word	0x20000744
 8007228:	20000644 	.word	0x20000644
 800722c:	0800a16a 	.word	0x0800a16a
 8007230:	20000748 	.word	0x20000748

08007234 <sks_cmd_interval>:

static int sks_cmd_interval(int from, char* command, int argc, char** argv, int size, int total) {
 8007234:	b573      	push	{r0, r1, r4, r5, r6, lr}
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;

	if (argv[4] == NULL)
 8007236:	6918      	ldr	r0, [r3, #16]

	response = 1;
	return size;
}

static int sks_cmd_interval(int from, char* command, int argc, char** argv, int size, int total) {
 8007238:	1c0e      	adds	r6, r1, #0
 800723a:	1c1c      	adds	r4, r3, #0
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;

	if (argv[4] == NULL)
 800723c:	2800      	cmp	r0, #0
 800723e:	d01e      	beq.n	800727e <sks_cmd_interval+0x4a>
		return size;

	set = atoi(argv[4]);
 8007240:	f7fe ff26 	bl	8006090 <atoi>
 8007244:	b2c5      	uxtb	r5, r0

	if(set == 1) {
 8007246:	2d01      	cmp	r5, #1
 8007248:	d109      	bne.n	800725e <sks_cmd_interval+0x2a>
		if(argv[5] != NULL) {
 800724a:	6960      	ldr	r0, [r4, #20]
 800724c:	2800      	cmp	r0, #0
 800724e:	d003      	beq.n	8007258 <sks_cmd_interval+0x24>
			g_config.interval = atoi(argv[5]);
 8007250:	f7fe ff1e 	bl	8006090 <atoi>
 8007254:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <sks_cmd_interval+0x50>)
 8007256:	7698      	strb	r0, [r3, #26]
		}

		write_flash = 1;
 8007258:	480b      	ldr	r0, [pc, #44]	; (8007288 <sks_cmd_interval+0x54>)
 800725a:	2201      	movs	r2, #1
 800725c:	6002      	str	r2, [r0, #0]
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d", set, g_config.interval);
 800725e:	4a09      	ldr	r2, [pc, #36]	; (8007284 <sks_cmd_interval+0x50>)
 8007260:	9500      	str	r5, [sp, #0]
 8007262:	7e93      	ldrb	r3, [r2, #26]
 8007264:	2580      	movs	r5, #128	; 0x80
 8007266:	0069      	lsls	r1, r5, #1
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	1c32      	adds	r2, r6, #0
 800726c:	4b07      	ldr	r3, [pc, #28]	; (800728c <sks_cmd_interval+0x58>)
 800726e:	4808      	ldr	r0, [pc, #32]	; (8007290 <sks_cmd_interval+0x5c>)
 8007270:	f7ff fec6 	bl	8007000 <cmd_response>

	raise_command_coming();
 8007274:	f7ff febd 	bl	8006ff2 <raise_command_coming>

	response = 1;
 8007278:	4c06      	ldr	r4, [pc, #24]	; (8007294 <sks_cmd_interval+0x60>)
 800727a:	2101      	movs	r1, #1
 800727c:	6021      	str	r1, [r4, #0]
	return size;
}
 800727e:	9806      	ldr	r0, [sp, #24]
 8007280:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	20000a14 	.word	0x20000a14
 8007288:	20000744 	.word	0x20000744
 800728c:	0800a16a 	.word	0x0800a16a
 8007290:	20000644 	.word	0x20000644
 8007294:	20000748 	.word	0x20000748

08007298 <sks_cmd_info>:

	response = 1;
	return size;
}

static int sks_cmd_info(int from, char* command, int argc, char** argv, int size, int total) {
 8007298:	b510      	push	{r4, lr}
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 800729a:	6918      	ldr	r0, [r3, #16]

	response = 1;
	return size;
}

static int sks_cmd_info(int from, char* command, int argc, char** argv, int size, int total) {
 800729c:	b088      	sub	sp, #32
 800729e:	1c0c      	adds	r4, r1, #0
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d01c      	beq.n	80072de <sks_cmd_info+0x46>
		return size;
	set = atoi(argv[4]);
 80072a4:	f7fe fef4 	bl	8006090 <atoi>

	if(set == 1) {
	}

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d,%d,%d,%s,%s", set, g_config.interval, g_config.filterMode, g_config.emptyValue, g_config.fullValue, g_config.deviceCode, APP_VERSION);
 80072a8:	b2c3      	uxtb	r3, r0
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <sks_cmd_info+0x4c>)
 80072ae:	7e9a      	ldrb	r2, [r3, #26]
 80072b0:	9201      	str	r2, [sp, #4]
 80072b2:	7dd8      	ldrb	r0, [r3, #23]
 80072b4:	9002      	str	r0, [sp, #8]
 80072b6:	6919      	ldr	r1, [r3, #16]
 80072b8:	480b      	ldr	r0, [pc, #44]	; (80072e8 <sks_cmd_info+0x50>)
 80072ba:	9103      	str	r1, [sp, #12]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	2180      	movs	r1, #128	; 0x80
 80072c0:	3302      	adds	r3, #2
 80072c2:	9204      	str	r2, [sp, #16]
 80072c4:	9305      	str	r3, [sp, #20]
 80072c6:	1c22      	adds	r2, r4, #0
 80072c8:	4b08      	ldr	r3, [pc, #32]	; (80072ec <sks_cmd_info+0x54>)
 80072ca:	9006      	str	r0, [sp, #24]
 80072cc:	0049      	lsls	r1, r1, #1
 80072ce:	4808      	ldr	r0, [pc, #32]	; (80072f0 <sks_cmd_info+0x58>)
 80072d0:	f7ff fe96 	bl	8007000 <cmd_response>

	raise_command_coming();
 80072d4:	f7ff fe8d 	bl	8006ff2 <raise_command_coming>

	response = 1;
 80072d8:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <sks_cmd_info+0x5c>)
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
	return size;
}
 80072de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072e0:	b008      	add	sp, #32
 80072e2:	bd10      	pop	{r4, pc}
 80072e4:	20000a14 	.word	0x20000a14
 80072e8:	0800a14c 	.word	0x0800a14c
 80072ec:	0800a137 	.word	0x0800a137
 80072f0:	20000644 	.word	0x20000644
 80072f4:	20000748 	.word	0x20000748

080072f8 <sks_cmd_config>:

	response = 1;
	return size;
}

static int sks_cmd_config(int from, char* command, int argc, char** argv, int size, int total) {
 80072f8:	b570      	push	{r4, r5, r6, lr}
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 80072fa:	6918      	ldr	r0, [r3, #16]

	response = 1;
	return size;
}

static int sks_cmd_config(int from, char* command, int argc, char** argv, int size, int total) {
 80072fc:	b086      	sub	sp, #24
 80072fe:	1c0e      	adds	r6, r1, #0
 8007300:	1c1c      	adds	r4, r3, #0
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 8007302:	2800      	cmp	r0, #0
 8007304:	d03d      	beq.n	8007382 <sks_cmd_config+0x8a>
		return size;

	set = atoi(argv[4]);
 8007306:	f7fe fec3 	bl	8006090 <atoi>
 800730a:	b2c5      	uxtb	r5, r0

	if(set == 1) {
 800730c:	2d01      	cmp	r5, #1
 800730e:	d124      	bne.n	800735a <sks_cmd_config+0x62>
		if(argv[5] != NULL) {
 8007310:	6960      	ldr	r0, [r4, #20]
 8007312:	2800      	cmp	r0, #0
 8007314:	d003      	beq.n	800731e <sks_cmd_config+0x26>
			g_config.timeout3D = atoi(argv[5]);
 8007316:	f7fe febb 	bl	8006090 <atoi>
 800731a:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <sks_cmd_config+0x90>)
 800731c:	8298      	strh	r0, [r3, #20]
		}

		if(argv[6] != NULL) {
 800731e:	69a0      	ldr	r0, [r4, #24]
 8007320:	2800      	cmp	r0, #0
 8007322:	d003      	beq.n	800732c <sks_cmd_config+0x34>
			g_config.filterMode = atoi(argv[6]);
 8007324:	f7fe feb4 	bl	8006090 <atoi>
 8007328:	4917      	ldr	r1, [pc, #92]	; (8007388 <sks_cmd_config+0x90>)
 800732a:	75c8      	strb	r0, [r1, #23]
		}

		if(argv[7] != NULL) {
 800732c:	69e0      	ldr	r0, [r4, #28]
 800732e:	2800      	cmp	r0, #0
 8007330:	d006      	beq.n	8007340 <sks_cmd_config+0x48>
			int diffX = atoi(argv[7]);
 8007332:	f7fe fead 	bl	8006090 <atoi>
			if(diffX >= 3 && diffX <= 30) {
 8007336:	1ec2      	subs	r2, r0, #3
 8007338:	2a1b      	cmp	r2, #27
 800733a:	d801      	bhi.n	8007340 <sks_cmd_config+0x48>
				g_config.diffX = diffX;
 800733c:	4b12      	ldr	r3, [pc, #72]	; (8007388 <sks_cmd_config+0x90>)
 800733e:	7618      	strb	r0, [r3, #24]
			}
		}

		if(argv[8] != NULL) {
 8007340:	6a20      	ldr	r0, [r4, #32]
 8007342:	2800      	cmp	r0, #0
 8007344:	d006      	beq.n	8007354 <sks_cmd_config+0x5c>
			int diffY = atoi(argv[8]);
 8007346:	f7fe fea3 	bl	8006090 <atoi>
			if(diffY >= 3 && diffY <= 30) {
 800734a:	1ec4      	subs	r4, r0, #3
 800734c:	2c1b      	cmp	r4, #27
 800734e:	d801      	bhi.n	8007354 <sks_cmd_config+0x5c>
				g_config.diffY = diffY;
 8007350:	490d      	ldr	r1, [pc, #52]	; (8007388 <sks_cmd_config+0x90>)
 8007352:	7648      	strb	r0, [r1, #25]
			}
		}

		write_flash = 1;
 8007354:	4a0d      	ldr	r2, [pc, #52]	; (800738c <sks_cmd_config+0x94>)
 8007356:	2001      	movs	r0, #1
 8007358:	6010      	str	r0, [r2, #0]
//	append_int(Response, 2, g_config.diffX);
//	strcat(Response, ",");
//	append_int(Response, 2, g_config.diffY);
//	strcat(Response, "#\r\n");

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d,%d,%d", set, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY);
 800735a:	490b      	ldr	r1, [pc, #44]	; (8007388 <sks_cmd_config+0x90>)
 800735c:	9500      	str	r5, [sp, #0]
 800735e:	8a8d      	ldrh	r5, [r1, #20]
 8007360:	2380      	movs	r3, #128	; 0x80
 8007362:	9501      	str	r5, [sp, #4]
 8007364:	7dca      	ldrb	r2, [r1, #23]

	response = 1;
 8007366:	2501      	movs	r5, #1
//	append_int(Response, 2, g_config.diffX);
//	strcat(Response, ",");
//	append_int(Response, 2, g_config.diffY);
//	strcat(Response, "#\r\n");

	cmd_response(Response, sizeof(Response), command, "%d,%d,%d,%d,%d", set, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY);
 8007368:	9202      	str	r2, [sp, #8]
 800736a:	7e08      	ldrb	r0, [r1, #24]
 800736c:	1c32      	adds	r2, r6, #0
 800736e:	9003      	str	r0, [sp, #12]
 8007370:	7e4c      	ldrb	r4, [r1, #25]
 8007372:	4807      	ldr	r0, [pc, #28]	; (8007390 <sks_cmd_config+0x98>)
 8007374:	0059      	lsls	r1, r3, #1
 8007376:	4b07      	ldr	r3, [pc, #28]	; (8007394 <sks_cmd_config+0x9c>)
 8007378:	9404      	str	r4, [sp, #16]
 800737a:	f7ff fe41 	bl	8007000 <cmd_response>

	response = 1;
 800737e:	4e06      	ldr	r6, [pc, #24]	; (8007398 <sks_cmd_config+0xa0>)
 8007380:	6035      	str	r5, [r6, #0]
	return size;
}
 8007382:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007384:	b006      	add	sp, #24
 8007386:	bd70      	pop	{r4, r5, r6, pc}
 8007388:	20000a14 	.word	0x20000a14
 800738c:	20000744 	.word	0x20000744
 8007390:	20000644 	.word	0x20000644
 8007394:	0800a161 	.word	0x0800a161
 8007398:	20000748 	.word	0x20000748

0800739c <next_char>:
	strcat(buff, ",V9,");
	strcat(buff, command);
	return 1;
}

int next_char(char* data, char sep, int max) {
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	1c04      	adds	r4, r0, #0
 80073a0:	1c15      	adds	r5, r2, #0
	char *ptr = strchr(data, sep);
 80073a2:	f7fe ff71 	bl	8006288 <strchr>
	if (ptr) {
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d003      	beq.n	80073b2 <next_char+0x16>
		return (ptr - data) >= max ? max : (ptr - data);
 80073aa:	1b00      	subs	r0, r0, r4
 80073ac:	42a8      	cmp	r0, r5
 80073ae:	dd00      	ble.n	80073b2 <next_char+0x16>
 80073b0:	1c28      	adds	r0, r5, #0
	} else {
		return 0;
	}
}
 80073b2:	bd38      	pop	{r3, r4, r5, pc}

080073b4 <sks_cmd_serial>:

	response = 1;
	return size;
}

static int sks_cmd_serial(int from, char* command, int argc, char** argv, int size, int total) {
 80073b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 80073b6:	6918      	ldr	r0, [r3, #16]

	response = 1;
	return size;
}

static int sks_cmd_serial(int from, char* command, int argc, char** argv, int size, int total) {
 80073b8:	1c0f      	adds	r7, r1, #0
 80073ba:	1c1c      	adds	r4, r3, #0
	//G9, debug setting
	//*XX,YYYYYYYYYY,SF,HHMMSS,S#
	char set = 0;
	if (argv[4] == NULL)
 80073bc:	2800      	cmp	r0, #0
 80073be:	d024      	beq.n	800740a <sks_cmd_serial+0x56>
		return size;

	set = atoi(argv[4]);
 80073c0:	f7fe fe66 	bl	8006090 <atoi>
 80073c4:	b2c5      	uxtb	r5, r0

	if(set == 1) {
 80073c6:	2d01      	cmp	r5, #1
 80073c8:	d112      	bne.n	80073f0 <sks_cmd_serial+0x3c>
		memset(g_config.deviceCode, 0, sizeof(g_config.deviceCode));
 80073ca:	4e11      	ldr	r6, [pc, #68]	; (8007410 <sks_cmd_serial+0x5c>)
 80073cc:	2100      	movs	r1, #0
 80073ce:	220a      	movs	r2, #10
 80073d0:	1c30      	adds	r0, r6, #0
 80073d2:	f7fe ff13 	bl	80061fc <memset>
		strncpy(g_config.deviceCode, argv[5], next_char(argv[5], '#', DEVICE_CODE_LEN));
 80073d6:	6964      	ldr	r4, [r4, #20]
 80073d8:	2123      	movs	r1, #35	; 0x23
 80073da:	220a      	movs	r2, #10
 80073dc:	1c20      	adds	r0, r4, #0
 80073de:	f7ff ffdd 	bl	800739c <next_char>
 80073e2:	1c21      	adds	r1, r4, #0
 80073e4:	1c02      	adds	r2, r0, #0
 80073e6:	1c30      	adds	r0, r6, #0
 80073e8:	f7ff f82e 	bl	8006448 <strncpy>

		write_flash = 1;
 80073ec:	4b09      	ldr	r3, [pc, #36]	; (8007414 <sks_cmd_serial+0x60>)
 80073ee:	601d      	str	r5, [r3, #0]
//	append_int(Response, 1, set);
//	strcat(Response, ",");
//	strcat(Response, g_config.deviceCode);
//	strcat(Response, "#\r\n");

	cmd_response(Response, sizeof(Response), command, "%d,%s", set, g_config.deviceCode);
 80073f0:	9500      	str	r5, [sp, #0]
 80073f2:	2180      	movs	r1, #128	; 0x80
 80073f4:	4d06      	ldr	r5, [pc, #24]	; (8007410 <sks_cmd_serial+0x5c>)
 80073f6:	1c3a      	adds	r2, r7, #0
 80073f8:	4807      	ldr	r0, [pc, #28]	; (8007418 <sks_cmd_serial+0x64>)
 80073fa:	0049      	lsls	r1, r1, #1
 80073fc:	4b07      	ldr	r3, [pc, #28]	; (800741c <sks_cmd_serial+0x68>)
 80073fe:	9501      	str	r5, [sp, #4]
 8007400:	f7ff fdfe 	bl	8007000 <cmd_response>

	response = 1;
 8007404:	4806      	ldr	r0, [pc, #24]	; (8007420 <sks_cmd_serial+0x6c>)
 8007406:	2201      	movs	r2, #1
 8007408:	6002      	str	r2, [r0, #0]
	return size;
}
 800740a:	9808      	ldr	r0, [sp, #32]
 800740c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800740e:	46c0      	nop			; (mov r8, r8)
 8007410:	20000a16 	.word	0x20000a16
 8007414:	20000744 	.word	0x20000744
 8007418:	20000644 	.word	0x20000644
 800741c:	0800a180 	.word	0x0800a180
 8007420:	20000748 	.word	0x20000748

08007424 <server_on_command>:
		{ "SF", sks_cmd_set_full }, //get config
		{ "SE", sks_cmd_set_empty }, //get config
		{ "DEBUG", sks_cmd_set_debug }, //get config
		{ NULL, NULL } };

int server_on_command(int from, char* data, int size) {
 8007424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007426:	b0a5      	sub	sp, #148	; 0x94
 8007428:	9006      	str	r0, [sp, #24]
 800742a:	9105      	str	r1, [sp, #20]
 800742c:	9207      	str	r2, [sp, #28]
	int field = 0;
	int ftmp;
	int j = 0;
	char *ptr = data;

	char command[SKS_MAX_CMD_LEN + 1] = { 0 };
 800742e:	a821      	add	r0, sp, #132	; 0x84
 8007430:	2100      	movs	r1, #0
 8007432:	220b      	movs	r2, #11
 8007434:	f7fe fee2 	bl	80061fc <memset>

	int endPos = 0;
	int i = 0;
	char item_buff[20] = { 0 };
	char* arg[SKS_MAX_ARGV];
	for (i = 0; i < size; i++) {
 8007438:	2600      	movs	r6, #0
 800743a:	e013      	b.n	8007464 <server_on_command+0x40>
		if ((data[i] == '#') || (data[i] == '\n') || (data[i] == '\0')) {
 800743c:	9a05      	ldr	r2, [sp, #20]
 800743e:	5d93      	ldrb	r3, [r2, r6]
 8007440:	2b0a      	cmp	r3, #10
 8007442:	d003      	beq.n	800744c <server_on_command+0x28>
 8007444:	2b23      	cmp	r3, #35	; 0x23
 8007446:	d001      	beq.n	800744c <server_on_command+0x28>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <server_on_command+0x3e>
			endPos = i + 1;
 800744c:	3601      	adds	r6, #1
		}
	}

	//xprintf("come here: %d\r\n", 1);

	if (endPos == 0)
 800744e:	2e00      	cmp	r6, #0
 8007450:	d100      	bne.n	8007454 <server_on_command+0x30>
 8007452:	e09e      	b.n	8007592 <server_on_command+0x16e>
 8007454:	9b05      	ldr	r3, [sp, #20]
 8007456:	2400      	movs	r4, #0
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	1c1f      	adds	r7, r3, #0
 800745c:	9403      	str	r4, [sp, #12]
 800745e:	1c25      	adds	r5, r4, #0
 8007460:	e04e      	b.n	8007500 <server_on_command+0xdc>

	int endPos = 0;
	int i = 0;
	char item_buff[20] = { 0 };
	char* arg[SKS_MAX_ARGV];
	for (i = 0; i < size; i++) {
 8007462:	3601      	adds	r6, #1
 8007464:	9807      	ldr	r0, [sp, #28]
 8007466:	4286      	cmp	r6, r0
 8007468:	dbe8      	blt.n	800743c <server_on_command+0x18>
	}

	//xprintf("come here: %d\r\n", 1);

	if (endPos == 0)
		return 0; //Waiting for end command sign
 800746a:	2600      	movs	r6, #0
 800746c:	e091      	b.n	8007592 <server_on_command+0x16e>

	//xprintf("come here: %d, endPos: %d\r\n", 2, endPos);

	for (int i = 0; i < endPos; i++) {
		if ((data[i] == ',') || (data[i] == '\n') || (data[i] == '#') || (data[i] == 0x00)) //complete one item
 800746e:	9a05      	ldr	r2, [sp, #20]
 8007470:	9904      	ldr	r1, [sp, #16]
 8007472:	5d13      	ldrb	r3, [r2, r4]
 8007474:	3101      	adds	r1, #1
 8007476:	9104      	str	r1, [sp, #16]
 8007478:	2b0a      	cmp	r3, #10
 800747a:	d005      	beq.n	8007488 <server_on_command+0x64>
 800747c:	2b2c      	cmp	r3, #44	; 0x2c
 800747e:	d003      	beq.n	8007488 <server_on_command+0x64>
 8007480:	2b23      	cmp	r3, #35	; 0x23
 8007482:	d001      	beq.n	8007488 <server_on_command+0x64>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d137      	bne.n	80074f8 <server_on_command+0xd4>
		{
			//xprintf("FIELD0 %d j=%d DATA %s\r\n", field, j, item_buff);

			if (j > 0) {
 8007488:	9b03      	ldr	r3, [sp, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d026      	beq.n	80074dc <server_on_command+0xb8>
				//xprintf("FIELD1 %d DATA %s, ptr=%s\r\n", field, item_buff, ptr);

				//if(*(uint32_t*)(ptr) == 0x2C53532A) //*SS,
				if(strncmp(ptr, "*SS,", 4) == 0) //*SS,
 800748e:	1c38      	adds	r0, r7, #0
 8007490:	4941      	ldr	r1, [pc, #260]	; (8007598 <server_on_command+0x174>)
 8007492:	2204      	movs	r2, #4
 8007494:	f7fe ff7a 	bl	800638c <strncmp>
 8007498:	2800      	cmp	r0, #0
 800749a:	d100      	bne.n	800749e <server_on_command+0x7a>
				{
					field = 0;
 800749c:	1c05      	adds	r5, r0, #0
				}
				ftmp = field;

				//xprintf("FIELD %d DATA %s\r\n", field, item_buff);

				arg[field % SKS_MAX_ARGV] = ptr;
 800749e:	1c28      	adds	r0, r5, #0
 80074a0:	2119      	movs	r1, #25
 80074a2:	f7fb fef5 	bl	8003290 <__aeabi_idivmod>
 80074a6:	0088      	lsls	r0, r1, #2
 80074a8:	a908      	add	r1, sp, #32
 80074aa:	5047      	str	r7, [r0, r1]
				switch (ftmp) {
 80074ac:	2d00      	cmp	r5, #0
 80074ae:	d002      	beq.n	80074b6 <server_on_command+0x92>
 80074b0:	2d02      	cmp	r5, #2
 80074b2:	d113      	bne.n	80074dc <server_on_command+0xb8>
 80074b4:	e008      	b.n	80074c8 <server_on_command+0xa4>
				case 0:
					if(strncmp(ptr, "*SS,", 4) != 0) //*SS,
 80074b6:	1c38      	adds	r0, r7, #0
 80074b8:	4937      	ldr	r1, [pc, #220]	; (8007598 <server_on_command+0x174>)
 80074ba:	2204      	movs	r2, #4
 80074bc:	f7fe ff66 	bl	800638c <strncmp>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d164      	bne.n	800758e <server_on_command+0x16a>
 80074c4:	2501      	movs	r5, #1
 80074c6:	e00c      	b.n	80074e2 <server_on_command+0xbe>
						return -1; //*SS,
					break;
				case 1:
					break;
				case 2:
					memcpy(command, ptr, j < SKS_MAX_CMD_LEN ? j : SKS_MAX_CMD_LEN);
 80074c8:	9a03      	ldr	r2, [sp, #12]
 80074ca:	2a0a      	cmp	r2, #10
 80074cc:	dd00      	ble.n	80074d0 <server_on_command+0xac>
 80074ce:	220a      	movs	r2, #10
 80074d0:	a821      	add	r0, sp, #132	; 0x84
 80074d2:	1c39      	adds	r1, r7, #0
 80074d4:	f7fe fe10 	bl	80060f8 <memcpy>
 80074d8:	2503      	movs	r5, #3
					break;
 80074da:	e002      	b.n	80074e2 <server_on_command+0xbe>
				default:
					break;
				}
			}

			field++;
 80074dc:	3501      	adds	r5, #1
			if (field >= SKS_MAX_ARGV)
 80074de:	2d18      	cmp	r5, #24
 80074e0:	dc10      	bgt.n	8007504 <server_on_command+0xe0>
				break;

			j = 0; //reset index
			ptr = data + i + 1;
			arg[field % SKS_MAX_ARGV] = ptr;
 80074e2:	1c28      	adds	r0, r5, #0
 80074e4:	2119      	movs	r1, #25
 80074e6:	f7fb fed3 	bl	8003290 <__aeabi_idivmod>
 80074ea:	9f04      	ldr	r7, [sp, #16]
 80074ec:	0088      	lsls	r0, r1, #2
 80074ee:	ab08      	add	r3, sp, #32

			field++;
			if (field >= SKS_MAX_ARGV)
				break;

			j = 0; //reset index
 80074f0:	2200      	movs	r2, #0
			ptr = data + i + 1;
			arg[field % SKS_MAX_ARGV] = ptr;
 80074f2:	50c7      	str	r7, [r0, r3]

			field++;
			if (field >= SKS_MAX_ARGV)
				break;

			j = 0; //reset index
 80074f4:	9203      	str	r2, [sp, #12]
			ptr = data + i + 1;
			arg[field % SKS_MAX_ARGV] = ptr;
 80074f6:	e002      	b.n	80074fe <server_on_command+0xda>
		} else {
			item_buff[j % sizeof(item_buff)] = data[i];
			j++;
 80074f8:	9903      	ldr	r1, [sp, #12]
 80074fa:	3101      	adds	r1, #1
 80074fc:	9103      	str	r1, [sp, #12]
	if (endPos == 0)
		return 0; //Waiting for end command sign

	//xprintf("come here: %d, endPos: %d\r\n", 2, endPos);

	for (int i = 0; i < endPos; i++) {
 80074fe:	3401      	adds	r4, #1
 8007500:	42b4      	cmp	r4, r6
 8007502:	dbb4      	blt.n	800746e <server_on_command+0x4a>
		}
	}

	//xprintf("come here: %d\r\n", 3);

	if (field > SKS_MAX_ARGV)
 8007504:	2d19      	cmp	r5, #25
 8007506:	dc44      	bgt.n	8007592 <server_on_command+0x16e>
		return endPos; //Too many param

	//xprintf("come here: %d\r\n", 4);

	if (field <= 3)
 8007508:	2d03      	cmp	r5, #3
 800750a:	dd42      	ble.n	8007592 <server_on_command+0x16e>

	//xprintf("server_on_command: %s, command: %s \r\n", data, command);

	i = 0;
	result = -1;
	response = 0;
 800750c:	4c23      	ldr	r4, [pc, #140]	; (800759c <server_on_command+0x178>)
 800750e:	2700      	movs	r7, #0
 8007510:	6027      	str	r7, [r4, #0]
 8007512:	4c23      	ldr	r4, [pc, #140]	; (80075a0 <server_on_command+0x17c>)
	while(handlers[i].cmd) {
 8007514:	e025      	b.n	8007562 <server_on_command+0x13e>
		if (strcmp(command, handlers[i].cmd) == 0) {
 8007516:	a821      	add	r0, sp, #132	; 0x84
 8007518:	f7fe ff26 	bl	8006368 <strcmp>
 800751c:	340c      	adds	r4, #12
 800751e:	2800      	cmp	r0, #0
 8007520:	d11e      	bne.n	8007560 <server_on_command+0x13c>
			//sks_log(LOG_INFO, "COMMAND A %s handlers[%d].cmd=%s", command, i, handlers[i].cmd);
			if (!(handlers[i].dis_mask & from)) //Chi cho phep gui lenh tu nguon
 8007522:	200c      	movs	r0, #12
 8007524:	4347      	muls	r7, r0
 8007526:	4a1e      	ldr	r2, [pc, #120]	; (80075a0 <server_on_command+0x17c>)
 8007528:	19d4      	adds	r4, r2, r7
 800752a:	8921      	ldrh	r1, [r4, #8]
 800752c:	9f06      	ldr	r7, [sp, #24]
 800752e:	4039      	ands	r1, r7
 8007530:	d12f      	bne.n	8007592 <server_on_command+0x16e>
			{
				write_flash = 0;
 8007532:	4f1c      	ldr	r7, [pc, #112]	; (80075a4 <server_on_command+0x180>)
				memset(Response, 0, 200);
 8007534:	22c8      	movs	r2, #200	; 0xc8
	while(handlers[i].cmd) {
		if (strcmp(command, handlers[i].cmd) == 0) {
			//sks_log(LOG_INFO, "COMMAND A %s handlers[%d].cmd=%s", command, i, handlers[i].cmd);
			if (!(handlers[i].dis_mask & from)) //Chi cho phep gui lenh tu nguon
			{
				write_flash = 0;
 8007536:	6039      	str	r1, [r7, #0]
				memset(Response, 0, 200);
 8007538:	481b      	ldr	r0, [pc, #108]	; (80075a8 <server_on_command+0x184>)
 800753a:	f7fe fe5f 	bl	80061fc <memset>

				result = handlers[i].handler(from, command, field, arg, endPos, size);
 800753e:	9907      	ldr	r1, [sp, #28]
 8007540:	9600      	str	r6, [sp, #0]
 8007542:	9101      	str	r1, [sp, #4]
 8007544:	6864      	ldr	r4, [r4, #4]
 8007546:	1c2a      	adds	r2, r5, #0
 8007548:	ab08      	add	r3, sp, #32
 800754a:	9806      	ldr	r0, [sp, #24]
 800754c:	a921      	add	r1, sp, #132	; 0x84
 800754e:	47a0      	blx	r4
				//sks_log(LOG_INFO, "***********===************COMMAND B%s handlers[%d].cmd=%s, total %d result:%d\r\n", command, i, handlers[i].cmd, size, result);

				if(write_flash) {
 8007550:	683b      	ldr	r3, [r7, #0]
			if (!(handlers[i].dis_mask & from)) //Chi cho phep gui lenh tu nguon
			{
				write_flash = 0;
				memset(Response, 0, 200);

				result = handlers[i].handler(from, command, field, arg, endPos, size);
 8007552:	1c04      	adds	r4, r0, #0
 8007554:	4d14      	ldr	r5, [pc, #80]	; (80075a8 <server_on_command+0x184>)
				//sks_log(LOG_INFO, "***********===************COMMAND B%s handlers[%d].cmd=%s, total %d result:%d\r\n", command, i, handlers[i].cmd, size, result);

				if(write_flash) {
 8007556:	2b00      	cmp	r3, #0
 8007558:	d007      	beq.n	800756a <server_on_command+0x146>
					write_config();
 800755a:	f000 f885 	bl	8007668 <write_config>
 800755e:	e004      	b.n	800756a <server_on_command+0x146>
				}
			}
			break;
		}
		i++;
 8007560:	3701      	adds	r7, #1
	//xprintf("server_on_command: %s, command: %s \r\n", data, command);

	i = 0;
	result = -1;
	response = 0;
	while(handlers[i].cmd) {
 8007562:	6821      	ldr	r1, [r4, #0]
 8007564:	2900      	cmp	r1, #0
 8007566:	d1d6      	bne.n	8007516 <server_on_command+0xf2>
 8007568:	e013      	b.n	8007592 <server_on_command+0x16e>
			break;
		}
		i++;
	}

	if (result > 0) {
 800756a:	2c00      	cmp	r4, #0
 800756c:	dd0b      	ble.n	8007586 <server_on_command+0x162>
		if (response) {
 800756e:	4e0b      	ldr	r6, [pc, #44]	; (800759c <server_on_command+0x178>)
 8007570:	6832      	ldr	r2, [r6, #0]
 8007572:	1c26      	adds	r6, r4, #0
 8007574:	2a00      	cmp	r2, #0
 8007576:	d00c      	beq.n	8007592 <server_on_command+0x16e>
			if (from == SKS_CMD_SOURCE_COM1) {
 8007578:	9806      	ldr	r0, [sp, #24]
 800757a:	2801      	cmp	r0, #1
 800757c:	d109      	bne.n	8007592 <server_on_command+0x16e>
				xprintf(Response);
 800757e:	1c28      	adds	r0, r5, #0
 8007580:	f001 ff0e 	bl	80093a0 <xprintf>
 8007584:	e005      	b.n	8007592 <server_on_command+0x16e>
			} else if (from == SKS_CMD_SOURCE_COM2) {
				//ExtSerial_PutString(Response);
			} else {
			}
		}
	} else if (result < 0) {
 8007586:	2c00      	cmp	r4, #0
 8007588:	d103      	bne.n	8007592 <server_on_command+0x16e>
 800758a:	1c26      	adds	r6, r4, #0
 800758c:	e001      	b.n	8007592 <server_on_command+0x16e>

				arg[field % SKS_MAX_ARGV] = ptr;
				switch (ftmp) {
				case 0:
					if(strncmp(ptr, "*SS,", 4) != 0) //*SS,
						return -1; //*SS,
 800758e:	2501      	movs	r5, #1
 8007590:	426e      	negs	r6, r5
	} else if (result < 0) {
		result = endPos;
	}

	return result;
}
 8007592:	1c30      	adds	r0, r6, #0
 8007594:	b025      	add	sp, #148	; 0x94
 8007596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007598:	0800a170 	.word	0x0800a170
 800759c:	20000748 	.word	0x20000748
 80075a0:	20000534 	.word	0x20000534
 80075a4:	20000744 	.word	0x20000744
 80075a8:	20000644 	.word	0x20000644

080075ac <delay_ms>:
	for (i = 0; i < time_us; i++) {
		for (j = 0; j < 7; j++)
			;
	}
}
void delay_ms(unsigned int time_ms) {
 80075ac:	b500      	push	{lr}
	uint32_t next_time = ulMiliCount+ time_ms;
 80075ae:	4b03      	ldr	r3, [pc, #12]	; (80075bc <delay_ms+0x10>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	1880      	adds	r0, r0, r2
	while(ulMiliCount<next_time);
 80075b4:	6819      	ldr	r1, [r3, #0]
 80075b6:	4281      	cmp	r1, r0
 80075b8:	d3fc      	bcc.n	80075b4 <delay_ms+0x8>
}
 80075ba:	bd00      	pop	{pc}
 80075bc:	2000087c 	.word	0x2000087c

080075c0 <getMicros>:

uint32_t getMicros(void) {
 80075c0:	b510      	push	{r4, lr}
	uint32_t micros;
	micros = ulMiliCount * 1000 + 1000 - SysTick->VAL / 72;
 80075c2:	4806      	ldr	r0, [pc, #24]	; (80075dc <getMicros+0x1c>)
 80075c4:	4a06      	ldr	r2, [pc, #24]	; (80075e0 <getMicros+0x20>)
 80075c6:	6803      	ldr	r3, [r0, #0]
 80075c8:	21fa      	movs	r1, #250	; 0xfa
 80075ca:	3301      	adds	r3, #1
 80075cc:	6890      	ldr	r0, [r2, #8]
 80075ce:	008c      	lsls	r4, r1, #2
 80075d0:	2148      	movs	r1, #72	; 0x48
 80075d2:	435c      	muls	r4, r3
 80075d4:	f7fb fdb8 	bl	8003148 <__aeabi_uidiv>
 80075d8:	1a20      	subs	r0, r4, r0
	// = Millis*1000+(SystemCoreClock/1000-SysTick->VAL)/72;
	return micros;
}
 80075da:	bd10      	pop	{r4, pc}
 80075dc:	2000087c 	.word	0x2000087c
 80075e0:	e000e010 	.word	0xe000e010

080075e4 <NMEAChecksum>:
#include "config.h"
#include "flash.h"

volatile FLASH_Status FLASHStatus = FLASH_TIMEOUT;

char NMEAChecksum(char *data, int len) {
 80075e4:	b510      	push	{r4, lr}
 80075e6:	1c03      	adds	r3, r0, #0
	char checksum_value = 0;

	int string_length = len;
	int index = 1; // Skip over the $ at the begining of the sentence
 80075e8:	2201      	movs	r2, #1
#include "flash.h"

volatile FLASH_Status FLASHStatus = FLASH_TIMEOUT;

char NMEAChecksum(char *data, int len) {
	char checksum_value = 0;
 80075ea:	2000      	movs	r0, #0

	int string_length = len;
	int index = 1; // Skip over the $ at the begining of the sentence
	while (index < string_length) {
 80075ec:	e002      	b.n	80075f4 <NMEAChecksum+0x10>
		checksum_value ^= data[index];
 80075ee:	5c9c      	ldrb	r4, [r3, r2]
		index++;
 80075f0:	3201      	adds	r2, #1
	char checksum_value = 0;

	int string_length = len;
	int index = 1; // Skip over the $ at the begining of the sentence
	while (index < string_length) {
		checksum_value ^= data[index];
 80075f2:	4060      	eors	r0, r4
char NMEAChecksum(char *data, int len) {
	char checksum_value = 0;

	int string_length = len;
	int index = 1; // Skip over the $ at the begining of the sentence
	while (index < string_length) {
 80075f4:	428a      	cmp	r2, r1
 80075f6:	dbfa      	blt.n	80075ee <NMEAChecksum+0xa>
		checksum_value ^= data[index];
		index++;
	}
	return (checksum_value);
}
 80075f8:	bd10      	pop	{r4, pc}

080075fa <FlashInit>:

void FlashInit(void) {
 80075fa:	b508      	push	{r3, lr}
	FLASH_Unlock();
 80075fc:	f002 f826 	bl	800964c <FLASH_Unlock>
	/*	PageCount = (BANK1_WRITE_END_ADDR - BANK1_WRITE_START_ADDR)
	 / FLASH_PAGE_SIZE;*/
}
 8007600:	bd08      	pop	{r3, pc}
	...

08007604 <flash_write_config>:
	uint32_t* data = (uint32_t*)(addr);
	return *data;
}
#endif

void flash_write_config(uint32_t address, char *pdata, int len) {
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	1c06      	adds	r6, r0, #0
 8007608:	1c0c      	adds	r4, r1, #0
 800760a:	1c17      	adds	r7, r2, #0

	int i;
	uint32_t *pRecord = (uint32_t*)pdata;
	uint32_t flash_address = address;

	FLASH_Unlock();
 800760c:	f002 f81e 	bl	800964c <FLASH_Unlock>
	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 8007610:	2034      	movs	r0, #52	; 0x34
 8007612:	f002 f833 	bl	800967c <FLASH_ClearFlag>
	if(FLASH_ErasePage(flash_address) != FLASH_COMPLETE)
 8007616:	1c30      	adds	r0, r6, #0
 8007618:	f002 f85c 	bl	80096d4 <FLASH_ErasePage>
 800761c:	2804      	cmp	r0, #4
 800761e:	d002      	beq.n	8007626 <flash_write_config+0x22>
		xprintf("erase flash fail\r\n");
 8007620:	4809      	ldr	r0, [pc, #36]	; (8007648 <flash_write_config+0x44>)
 8007622:	f001 febd 	bl	80093a0 <xprintf>
	uint32_t* data = (uint32_t*)(addr);
	return *data;
}
#endif

void flash_write_config(uint32_t address, char *pdata, int len) {
 8007626:	2500      	movs	r5, #0
 8007628:	e008      	b.n	800763c <flash_write_config+0x38>
	FLASH_Unlock();
	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
	if(FLASH_ErasePage(flash_address) != FLASH_COMPLETE)
		xprintf("erase flash fail\r\n");
	for (i = 0; i < len; i+=4,pRecord++,flash_address+=4) {
		if(FLASH_ProgramWord(flash_address, *pRecord)!=FLASH_COMPLETE)
 800762a:	cc02      	ldmia	r4!, {r1}
 800762c:	f002 f86a 	bl	8009704 <FLASH_ProgramWord>
 8007630:	2804      	cmp	r0, #4
 8007632:	d002      	beq.n	800763a <flash_write_config+0x36>
			xprintf("write flash fail\r\n");
 8007634:	4805      	ldr	r0, [pc, #20]	; (800764c <flash_write_config+0x48>)
 8007636:	f001 feb3 	bl	80093a0 <xprintf>

	FLASH_Unlock();
	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
	if(FLASH_ErasePage(flash_address) != FLASH_COMPLETE)
		xprintf("erase flash fail\r\n");
	for (i = 0; i < len; i+=4,pRecord++,flash_address+=4) {
 800763a:	3504      	adds	r5, #4
	uint32_t* data = (uint32_t*)(addr);
	return *data;
}
#endif

void flash_write_config(uint32_t address, char *pdata, int len) {
 800763c:	19a8      	adds	r0, r5, r6

	FLASH_Unlock();
	FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
	if(FLASH_ErasePage(flash_address) != FLASH_COMPLETE)
		xprintf("erase flash fail\r\n");
	for (i = 0; i < len; i+=4,pRecord++,flash_address+=4) {
 800763e:	42bd      	cmp	r5, r7
 8007640:	dbf3      	blt.n	800762a <flash_write_config+0x26>
		if(FLASH_ProgramWord(flash_address, *pRecord)!=FLASH_COMPLETE)
			xprintf("write flash fail\r\n");
	}
	FLASH_Lock();
 8007642:	f002 f813 	bl	800966c <FLASH_Lock>
}
 8007646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007648:	0800a1c7 	.word	0x0800a1c7
 800764c:	0800a1da 	.word	0x0800a1da

08007650 <flash_read_config>:

void flash_read_config(uint32_t address, char *pdata, int len) {
 8007650:	b510      	push	{r4, lr}
	int i;
	uint32_t flash_address = address;
	uint32_t *ptr = (uint32_t*)pdata;
 8007652:	1c0b      	adds	r3, r1, #0
	for (i = 0; i < len; i+=4,ptr++,flash_address+=4) {
 8007654:	e003      	b.n	800765e <flash_read_config+0xe>
			xprintf("write flash fail\r\n");
	}
	FLASH_Lock();
}

void flash_read_config(uint32_t address, char *pdata, int len) {
 8007656:	1a44      	subs	r4, r0, r1
 8007658:	18e4      	adds	r4, r4, r3
	int i;
	uint32_t flash_address = address;
	uint32_t *ptr = (uint32_t*)pdata;
	for (i = 0; i < len; i+=4,ptr++,flash_address+=4) {
		*ptr=*(__IO uint32_t *)flash_address;
 800765a:	6824      	ldr	r4, [r4, #0]
 800765c:	c310      	stmia	r3!, {r4}
			xprintf("write flash fail\r\n");
	}
	FLASH_Lock();
}

void flash_read_config(uint32_t address, char *pdata, int len) {
 800765e:	1a5c      	subs	r4, r3, r1
	int i;
	uint32_t flash_address = address;
	uint32_t *ptr = (uint32_t*)pdata;
	for (i = 0; i < len; i+=4,ptr++,flash_address+=4) {
 8007660:	4294      	cmp	r4, r2
 8007662:	dbf8      	blt.n	8007656 <flash_read_config+0x6>
		*ptr=*(__IO uint32_t *)flash_address;
	}
}
 8007664:	bd10      	pop	{r4, pc}
	...

08007668 <write_config>:

void write_config(void) {
 8007668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766a:	b0c1      	sub	sp, #260	; 0x104
	xprintf("write_config\r\n");
 800766c:	4812      	ldr	r0, [pc, #72]	; (80076b8 <write_config+0x50>)
 800766e:	f001 fe97 	bl	80093a0 <xprintf>
	g_config.sign = SF_CONFIG_SIGN;
 8007672:	4d12      	ldr	r5, [pc, #72]	; (80076bc <write_config+0x54>)
	g_config.configState = 2;
 8007674:	2602      	movs	r6, #2
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 8007676:	2180      	movs	r1, #128	; 0x80
	}
}

void write_config(void) {
	xprintf("write_config\r\n");
	g_config.sign = SF_CONFIG_SIGN;
 8007678:	2364      	movs	r3, #100	; 0x64
	g_config.configState = 2;
 800767a:	706e      	strb	r6, [r5, #1]
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 800767c:	004e      	lsls	r6, r1, #1
	}
}

void write_config(void) {
	xprintf("write_config\r\n");
	g_config.sign = SF_CONFIG_SIGN;
 800767e:	702b      	strb	r3, [r5, #0]
	g_config.configState = 2;
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 8007680:	2100      	movs	r1, #0
 8007682:	1c32      	adds	r2, r6, #0
 8007684:	4668      	mov	r0, sp
	int pointerSize = sizeof(DEVICE_CONFIG);
	int size =
			pointerSize < SKS_CONFIG_RECORD_SIZE ?
					pointerSize : SKS_CONFIG_RECORD_SIZE;
	memcpy(buffConfig, &g_config, size);
 8007686:	466c      	mov	r4, sp

void write_config(void) {
	xprintf("write_config\r\n");
	g_config.sign = SF_CONFIG_SIGN;
	g_config.configState = 2;
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 8007688:	f7fe fdb8 	bl	80061fc <memset>
	int pointerSize = sizeof(DEVICE_CONFIG);
	int size =
			pointerSize < SKS_CONFIG_RECORD_SIZE ?
					pointerSize : SKS_CONFIG_RECORD_SIZE;
	memcpy(buffConfig, &g_config, size);
 800768c:	cd07      	ldmia	r5!, {r0, r1, r2}
 800768e:	c407      	stmia	r4!, {r0, r1, r2}
 8007690:	1c22      	adds	r2, r4, #0
 8007692:	cd83      	ldmia	r5!, {r0, r1, r7}
 8007694:	c283      	stmia	r2!, {r0, r1, r7}
 8007696:	6828      	ldr	r0, [r5, #0]
	buffConfig[SKS_CONFIG_RECORD_SIZE - 1] = NMEAChecksum(buffConfig, SKS_CONFIG_RECORD_SIZE - 1);
 8007698:	21ff      	movs	r1, #255	; 0xff
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
	int pointerSize = sizeof(DEVICE_CONFIG);
	int size =
			pointerSize < SKS_CONFIG_RECORD_SIZE ?
					pointerSize : SKS_CONFIG_RECORD_SIZE;
	memcpy(buffConfig, &g_config, size);
 800769a:	6010      	str	r0, [r2, #0]
	buffConfig[SKS_CONFIG_RECORD_SIZE - 1] = NMEAChecksum(buffConfig, SKS_CONFIG_RECORD_SIZE - 1);
 800769c:	4668      	mov	r0, sp
 800769e:	f7ff ffa1 	bl	80075e4 <NMEAChecksum>
 80076a2:	466b      	mov	r3, sp
 80076a4:	33ff      	adds	r3, #255	; 0xff
 80076a6:	7018      	strb	r0, [r3, #0]
	flash_write_config(BANK1_CONFIG_START_ADDR, buffConfig,	SKS_CONFIG_RECORD_SIZE);
 80076a8:	4669      	mov	r1, sp
 80076aa:	4805      	ldr	r0, [pc, #20]	; (80076c0 <write_config+0x58>)
 80076ac:	1c32      	adds	r2, r6, #0
 80076ae:	f7ff ffa9 	bl	8007604 <flash_write_config>
}
 80076b2:	b041      	add	sp, #260	; 0x104
 80076b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b6:	46c0      	nop			; (mov r8, r8)
 80076b8:	0800a1ed 	.word	0x0800a1ed
 80076bc:	20000a14 	.word	0x20000a14
 80076c0:	0800f800 	.word	0x0800f800

080076c4 <make_default_config>:

void make_default_config() {
 80076c4:	b510      	push	{r4, lr}
	if(g_config.configState != 2) {
 80076c6:	4c0e      	ldr	r4, [pc, #56]	; (8007700 <make_default_config+0x3c>)
 80076c8:	7863      	ldrb	r3, [r4, #1]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d017      	beq.n	80076fe <make_default_config+0x3a>
		//xprintf(, "1234567890");

		sprintf(g_config.deviceCode, "%s", "1234567890");
 80076ce:	490d      	ldr	r1, [pc, #52]	; (8007704 <make_default_config+0x40>)
 80076d0:	1ca0      	adds	r0, r4, #2
 80076d2:	f7fe fe53 	bl	800637c <strcpy>

		g_config.emptyValue = 0;
 80076d6:	2000      	movs	r0, #0
		g_config.fullValue = 0;
		g_config.timeout3D = 3; //3 minutes
 80076d8:	2103      	movs	r1, #3
		g_config.outputMode = 0;
		g_config.diffX = 6;
 80076da:	2306      	movs	r3, #6
	if(g_config.configState != 2) {
		//xprintf(, "1234567890");

		sprintf(g_config.deviceCode, "%s", "1234567890");

		g_config.emptyValue = 0;
 80076dc:	6120      	str	r0, [r4, #16]
		g_config.fullValue = 0;
 80076de:	60e0      	str	r0, [r4, #12]
		g_config.timeout3D = 3; //3 minutes
 80076e0:	82a1      	strh	r1, [r4, #20]
		g_config.outputMode = 0;
 80076e2:	75a0      	strb	r0, [r4, #22]
		g_config.diffX = 6;
		g_config.diffY = 6;
		g_config.interval = 1;
 80076e4:	2201      	movs	r2, #1

		g_config.configState = 2;

		g_config.sign = SF_CONFIG_SIGN;
 80076e6:	2064      	movs	r0, #100	; 0x64
		g_config.outputMode = 0;
		g_config.diffX = 6;
		g_config.diffY = 6;
		g_config.interval = 1;

		g_config.configState = 2;
 80076e8:	2102      	movs	r1, #2

		g_config.sign = SF_CONFIG_SIGN;
 80076ea:	7020      	strb	r0, [r4, #0]

		g_config.emptyValue = 0;
		g_config.fullValue = 0;
		g_config.timeout3D = 3; //3 minutes
		g_config.outputMode = 0;
		g_config.diffX = 6;
 80076ec:	7623      	strb	r3, [r4, #24]
		g_config.diffY = 6;
 80076ee:	7663      	strb	r3, [r4, #25]
		g_config.interval = 1;
 80076f0:	76a2      	strb	r2, [r4, #26]

		g_config.configState = 2;
 80076f2:	7061      	strb	r1, [r4, #1]

		g_config.sign = SF_CONFIG_SIGN;

		write_config();
 80076f4:	f7ff ffb8 	bl	8007668 <write_config>

		xprintf("\r\nWrite default config.\r\n\r\n");
 80076f8:	4803      	ldr	r0, [pc, #12]	; (8007708 <make_default_config+0x44>)
 80076fa:	f001 fe51 	bl	80093a0 <xprintf>
	} else {
		//xprintf("\r\nLoaded config.\r\n\r\n");
	}
}
 80076fe:	bd10      	pop	{r4, pc}
 8007700:	20000a14 	.word	0x20000a14
 8007704:	0800a1fc 	.word	0x0800a1fc
 8007708:	0800a207 	.word	0x0800a207

0800770c <load_config>:

void load_config(void) {
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	b0c0      	sub	sp, #256	; 0x100
	xprintf("load_config\r\n");
 8007710:	4823      	ldr	r0, [pc, #140]	; (80077a0 <load_config+0x94>)
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 8007712:	2480      	movs	r4, #128	; 0x80
		//xprintf("\r\nLoaded config.\r\n\r\n");
	}
}

void load_config(void) {
	xprintf("load_config\r\n");
 8007714:	f001 fe44 	bl	80093a0 <xprintf>
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 8007718:	0062      	lsls	r2, r4, #1
 800771a:	2100      	movs	r1, #0
 800771c:	4668      	mov	r0, sp
 800771e:	f7fe fd6d 	bl	80061fc <memset>

	flash_read_config(BANK1_CONFIG_START_ADDR, buffConfig,
 8007722:	2280      	movs	r2, #128	; 0x80
 8007724:	481f      	ldr	r0, [pc, #124]	; (80077a4 <load_config+0x98>)
 8007726:	4669      	mov	r1, sp
 8007728:	0052      	lsls	r2, r2, #1
 800772a:	f7ff ff91 	bl	8007650 <flash_read_config>
	}
}

void load_config(void) {
	xprintf("load_config\r\n");
	char buffConfig[SKS_CONFIG_RECORD_SIZE] = { 0 };
 800772e:	466d      	mov	r5, sp

	flash_read_config(BANK1_CONFIG_START_ADDR, buffConfig,
	SKS_CONFIG_RECORD_SIZE);
	char crc = NMEAChecksum(buffConfig, SKS_CONFIG_RECORD_SIZE - 1);
 8007730:	4668      	mov	r0, sp
 8007732:	21ff      	movs	r1, #255	; 0xff
 8007734:	f7ff ff56 	bl	80075e4 <NMEAChecksum>
	if ((buffConfig[0] == SF_CONFIG_SIGN) && (crc == buffConfig[SKS_CONFIG_RECORD_SIZE - 1]))
 8007738:	782b      	ldrb	r3, [r5, #0]
 800773a:	4c1b      	ldr	r4, [pc, #108]	; (80077a8 <load_config+0x9c>)
 800773c:	2b64      	cmp	r3, #100	; 0x64
 800773e:	d10c      	bne.n	800775a <load_config+0x4e>
 8007740:	466e      	mov	r6, sp
 8007742:	36ff      	adds	r6, #255	; 0xff
 8007744:	7831      	ldrb	r1, [r6, #0]
 8007746:	4281      	cmp	r1, r0
 8007748:	d107      	bne.n	800775a <load_config+0x4e>
	{
		int pointerSize = sizeof(DEVICE_CONFIG);
		int size =
				pointerSize < SKS_CONFIG_RECORD_SIZE ?
						pointerSize : SKS_CONFIG_RECORD_SIZE;
		memcpy(&g_config, buffConfig, size);
 800774a:	1c23      	adds	r3, r4, #0
 800774c:	cd07      	ldmia	r5!, {r0, r1, r2}
 800774e:	c307      	stmia	r3!, {r0, r1, r2}
 8007750:	1c1a      	adds	r2, r3, #0
 8007752:	cd43      	ldmia	r5!, {r0, r1, r6}
 8007754:	c243      	stmia	r2!, {r0, r1, r6}
 8007756:	6828      	ldr	r0, [r5, #0]
 8007758:	6010      	str	r0, [r2, #0]
	}

	//check and make default config
	make_default_config();
 800775a:	f7ff ffb3 	bl	80076c4 <make_default_config>

	if(g_config.diffX < 3) {
 800775e:	7e25      	ldrb	r5, [r4, #24]
 8007760:	2d02      	cmp	r5, #2
 8007762:	d806      	bhi.n	8007772 <load_config+0x66>
		g_config.diffX = 5;

		if(g_config.timeout3D <= 1) {
 8007764:	8aa1      	ldrh	r1, [r4, #20]

	//check and make default config
	make_default_config();

	if(g_config.diffX < 3) {
		g_config.diffX = 5;
 8007766:	2605      	movs	r6, #5
 8007768:	7626      	strb	r6, [r4, #24]

		if(g_config.timeout3D <= 1) {
 800776a:	2901      	cmp	r1, #1
 800776c:	d801      	bhi.n	8007772 <load_config+0x66>
			g_config.timeout3D = 3;
 800776e:	2203      	movs	r2, #3
 8007770:	82a2      	strh	r2, [r4, #20]
		}
	}

	if(g_config.diffY < 3) {
 8007772:	7e60      	ldrb	r0, [r4, #25]
 8007774:	2802      	cmp	r0, #2
 8007776:	d806      	bhi.n	8007786 <load_config+0x7a>
		g_config.diffY = 5;

		if(g_config.timeout3D <= 1) {
 8007778:	8aa3      	ldrh	r3, [r4, #20]
			g_config.timeout3D = 3;
		}
	}

	if(g_config.diffY < 3) {
		g_config.diffY = 5;
 800777a:	2505      	movs	r5, #5
 800777c:	7665      	strb	r5, [r4, #25]

		if(g_config.timeout3D <= 1) {
 800777e:	2b01      	cmp	r3, #1
 8007780:	d801      	bhi.n	8007786 <load_config+0x7a>
			g_config.timeout3D = 3;
 8007782:	2103      	movs	r1, #3
 8007784:	82a1      	strh	r1, [r4, #20]
		}
	}

	if(g_config.diffX > 30) {
 8007786:	4b08      	ldr	r3, [pc, #32]	; (80077a8 <load_config+0x9c>)
 8007788:	7e1c      	ldrb	r4, [r3, #24]
 800778a:	2c1e      	cmp	r4, #30
 800778c:	d901      	bls.n	8007792 <load_config+0x86>
		g_config.diffX = 5;
 800778e:	2605      	movs	r6, #5
 8007790:	761e      	strb	r6, [r3, #24]
	}

	if(g_config.diffY > 30) {
 8007792:	7e5a      	ldrb	r2, [r3, #25]
 8007794:	2a1e      	cmp	r2, #30
 8007796:	d901      	bls.n	800779c <load_config+0x90>
		g_config.diffY = 5;
 8007798:	2005      	movs	r0, #5
 800779a:	7658      	strb	r0, [r3, #25]
	}
}
 800779c:	b040      	add	sp, #256	; 0x100
 800779e:	bd70      	pop	{r4, r5, r6, pc}
 80077a0:	0800a223 	.word	0x0800a223
 80077a4:	0800f800 	.word	0x0800f800
 80077a8:	20000a14 	.word	0x20000a14

080077ac <internalTempInit>:

static void ADC_Config(void);
static void DMA_Config(void);

__IO uint16_t ADC_val[NUMBER_OF_ADC_CHANNEL]={0};
void internalTempInit(void){
 80077ac:	b530      	push	{r4, r5, lr}
 80077ae:	b093      	sub	sp, #76	; 0x4c

static void ADC_Config(void)
{
  ADC_InitTypeDef     ADC_InitStructure;
  /* ADC1 DeInit */
  ADC_DeInit(ADC1);
 80077b0:	4833      	ldr	r0, [pc, #204]	; (8007880 <internalTempInit+0xd4>)
 80077b2:	f001 fe01 	bl	80093b8 <ADC_DeInit>

   /* ADC1 Periph clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80077b6:	2080      	movs	r0, #128	; 0x80
  /* Initialize ADC structure */
  ADC_StructInit(&ADC_InitStructure);
 80077b8:	ac0c      	add	r4, sp, #48	; 0x30
  ADC_InitTypeDef     ADC_InitStructure;
  /* ADC1 DeInit */
  ADC_DeInit(ADC1);

   /* ADC1 Periph clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80077ba:	2101      	movs	r1, #1
 80077bc:	0080      	lsls	r0, r0, #2
 80077be:	f002 f93f 	bl	8009a40 <RCC_APB2PeriphClockCmd>
  /* Initialize ADC structure */
  ADC_StructInit(&ADC_InitStructure);
 80077c2:	1c20      	adds	r0, r4, #0
 80077c4:	f001 fe20 	bl	8009408 <ADC_StructInit>

  /* Configure the ADC1 in continuous mode withe a resolution equal to 12 bits  */
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80077c8:	2501      	movs	r5, #1
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
  /* Initialize ADC structure */
  ADC_StructInit(&ADC_InitStructure);

  /* Configure the ADC1 in continuous mode withe a resolution equal to 12 bits  */
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80077ca:	2300      	movs	r3, #0
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80077cc:	60a3      	str	r3, [r4, #8]
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80077ce:	6123      	str	r3, [r4, #16]
  ADC_InitStructure.ADC_ScanDirection = ADC_ScanDirection_Upward;
 80077d0:	6163      	str	r3, [r4, #20]
  ADC_Init(ADC1, &ADC_InitStructure);
 80077d2:	482b      	ldr	r0, [pc, #172]	; (8007880 <internalTempInit+0xd4>)
 80077d4:	1c21      	adds	r1, r4, #0
  /* Initialize ADC structure */
  ADC_StructInit(&ADC_InitStructure);

  /* Configure the ADC1 in continuous mode withe a resolution equal to 12 bits  */
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80077d6:	7125      	strb	r5, [r4, #4]
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
  /* Initialize ADC structure */
  ADC_StructInit(&ADC_InitStructure);

  /* Configure the ADC1 in continuous mode withe a resolution equal to 12 bits  */
  ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80077d8:	930c      	str	r3, [sp, #48]	; 0x30
  ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
  ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
  ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
  ADC_InitStructure.ADC_ScanDirection = ADC_ScanDirection_Upward;
  ADC_Init(ADC1, &ADC_InitStructure);
 80077da:	f001 fdff 	bl	80093dc <ADC_Init>

  /* Convert the ADC1 temperature sensor  with 55.5 Cycles as sampling time */
  ADC_ChannelConfig(ADC1, ADC_Channel_TempSensor , ADC_SampleTime_239_5Cycles);
 80077de:	2280      	movs	r2, #128	; 0x80
 80077e0:	0251      	lsls	r1, r2, #9
 80077e2:	4827      	ldr	r0, [pc, #156]	; (8007880 <internalTempInit+0xd4>)
 80077e4:	2207      	movs	r2, #7
 80077e6:	f001 fe45 	bl	8009474 <ADC_ChannelConfig>
  ADC_TempSensorCmd(ENABLE);
 80077ea:	1c28      	adds	r0, r5, #0
 80077ec:	f001 fe1e 	bl	800942c <ADC_TempSensorCmd>

  /* Convert the ADC1 Vref  with 55.5 Cycles as sampling time */
  ADC_ChannelConfig(ADC1, ADC_Channel_Vrefint , ADC_SampleTime_239_5Cycles);
 80077f0:	2180      	movs	r1, #128	; 0x80
 80077f2:	2207      	movs	r2, #7
 80077f4:	0289      	lsls	r1, r1, #10
 80077f6:	4822      	ldr	r0, [pc, #136]	; (8007880 <internalTempInit+0xd4>)
 80077f8:	f001 fe3c 	bl	8009474 <ADC_ChannelConfig>
  ADC_VrefintCmd(ENABLE);
 80077fc:	1c28      	adds	r0, r5, #0
 80077fe:	f001 fe27 	bl	8009450 <ADC_VrefintCmd>

  /* ADC Calibration */
  ADC_GetCalibrationFactor(ADC1);
 8007802:	481f      	ldr	r0, [pc, #124]	; (8007880 <internalTempInit+0xd4>)
 8007804:	f001 fe3c 	bl	8009480 <ADC_GetCalibrationFactor>

  /* ADC DMA request in circular mode */
  ADC_DMARequestModeConfig(ADC1, ADC_DMAMode_Circular);
 8007808:	481d      	ldr	r0, [pc, #116]	; (8007880 <internalTempInit+0xd4>)
 800780a:	2102      	movs	r1, #2
 800780c:	f001 fe60 	bl	80094d0 <ADC_DMARequestModeConfig>

  /* Enable ADC_DMA */
  ADC_DMACmd(ADC1, ENABLE);
 8007810:	481b      	ldr	r0, [pc, #108]	; (8007880 <internalTempInit+0xd4>)
 8007812:	1c29      	adds	r1, r5, #0
 8007814:	f001 fe51 	bl	80094ba <ADC_DMACmd>

  /* Enable the ADC peripheral */
  ADC_Cmd(ADC1, ENABLE);
 8007818:	4819      	ldr	r0, [pc, #100]	; (8007880 <internalTempInit+0xd4>)
 800781a:	1c29      	adds	r1, r5, #0
 800781c:	f001 fdfc 	bl	8009418 <ADC_Cmd>

  /* Wait the ADRDY flag */
  while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_ADRDY));
 8007820:	4817      	ldr	r0, [pc, #92]	; (8007880 <internalTempInit+0xd4>)
 8007822:	2101      	movs	r1, #1
 8007824:	f001 fe5c 	bl	80094e0 <ADC_GetFlagStatus>
 8007828:	2800      	cmp	r0, #0
 800782a:	d0f9      	beq.n	8007820 <internalTempInit+0x74>

  /* ADC1 regular Software Start Conv */
  ADC_StartOfConversion(ADC1);
 800782c:	4814      	ldr	r0, [pc, #80]	; (8007880 <internalTempInit+0xd4>)
 800782e:	f001 fe3f 	bl	80094b0 <ADC_StartOfConversion>
}
static void DMA_Config(void)
{
  DMA_InitTypeDef   DMA_InitStructure;
  /* DMA1 clock enable */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1 , ENABLE);
 8007832:	2001      	movs	r0, #1
 8007834:	1c01      	adds	r1, r0, #0
 8007836:	f002 f8f5 	bl	8009a24 <RCC_AHBPeriphClockCmd>

  /* DMA1 Channel1 Config */
  DMA_DeInit(DMA1_Channel1);
 800783a:	4812      	ldr	r0, [pc, #72]	; (8007884 <internalTempInit+0xd8>)
 800783c:	f001 fe60 	bl	8009500 <DMA_DeInit>
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(ADC1->DR));
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC_val;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = NUMBER_OF_ADC_CHANNEL;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8007840:	2280      	movs	r2, #128	; 0x80
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1 , ENABLE);

  /* DMA1 Channel1 Config */
  DMA_DeInit(DMA1_Channel1);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(ADC1->DR));
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC_val;
 8007842:	4d11      	ldr	r5, [pc, #68]	; (8007888 <internalTempInit+0xdc>)
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = NUMBER_OF_ADC_CHANNEL;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8007844:	9206      	str	r2, [sp, #24]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8007846:	0051      	lsls	r1, r2, #1
  /* DMA1 clock enable */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1 , ENABLE);

  /* DMA1 Channel1 Config */
  DMA_DeInit(DMA1_Channel1);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(ADC1->DR));
 8007848:	4b10      	ldr	r3, [pc, #64]	; (800788c <internalTempInit+0xe0>)
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800784a:	2280      	movs	r2, #128	; 0x80
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC_val;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = NUMBER_OF_ADC_CHANNEL;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800784c:	9107      	str	r1, [sp, #28]
  /* DMA1 Channel1 Config */
  DMA_DeInit(DMA1_Channel1);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(ADC1->DR));
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC_val;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = NUMBER_OF_ADC_CHANNEL;
 800784e:	2402      	movs	r4, #2
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8007850:	0191      	lsls	r1, r2, #6
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = NUMBER_OF_ADC_CHANNEL;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8007852:	2080      	movs	r0, #128	; 0x80
  /* DMA1 clock enable */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1 , ENABLE);

  /* DMA1 Channel1 Config */
  DMA_DeInit(DMA1_Channel1);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(ADC1->DR));
 8007854:	9301      	str	r3, [sp, #4]
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC_val;
 8007856:	9502      	str	r5, [sp, #8]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = NUMBER_OF_ADC_CHANNEL;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8007858:	00c3      	lsls	r3, r0, #3

  /* DMA1 Channel1 Config */
  DMA_DeInit(DMA1_Channel1);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(ADC1->DR));
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC_val;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 800785a:	2500      	movs	r5, #0
  DMA_InitStructure.DMA_BufferSize = NUMBER_OF_ADC_CHANNEL;
 800785c:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 800785e:	910a      	str	r1, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_BufferSize = NUMBER_OF_ADC_CHANNEL;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8007860:	2420      	movs	r4, #32
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
  DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8007862:	a901      	add	r1, sp, #4
 8007864:	4807      	ldr	r0, [pc, #28]	; (8007884 <internalTempInit+0xd8>)
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = NUMBER_OF_ADC_CHANNEL;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8007866:	9308      	str	r3, [sp, #32]

  /* DMA1 Channel1 Config */
  DMA_DeInit(DMA1_Channel1);
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(&(ADC1->DR));
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADC_val;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8007868:	9503      	str	r5, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = NUMBER_OF_ADC_CHANNEL;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800786a:	9505      	str	r5, [sp, #20]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 800786c:	9409      	str	r4, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 800786e:	950b      	str	r5, [sp, #44]	; 0x2c
  DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8007870:	f001 fec0 	bl	80095f4 <DMA_Init>
  /* DMA1 Channel1 enable */
  DMA_Cmd(DMA1_Channel1, ENABLE);
 8007874:	4803      	ldr	r0, [pc, #12]	; (8007884 <internalTempInit+0xd8>)
 8007876:	2101      	movs	r1, #1
 8007878:	f001 feda 	bl	8009630 <DMA_Cmd>

__IO uint16_t ADC_val[NUMBER_OF_ADC_CHANNEL]={0};
void internalTempInit(void){
	ADC_Config();
	DMA_Config();
}
 800787c:	b013      	add	sp, #76	; 0x4c
 800787e:	bd30      	pop	{r4, r5, pc}
 8007880:	40012400 	.word	0x40012400
 8007884:	40020008 	.word	0x40020008
 8007888:	2000074c 	.word	0x2000074c
 800788c:	40012440 	.word	0x40012440

08007890 <getTemperature>:

uint32_t getTemperature(void){
 8007890:	b538      	push	{r3, r4, r5, lr}
	float  adc_intref = ADC_val[1];
 8007892:	4b12      	ldr	r3, [pc, #72]	; (80078dc <getTemperature+0x4c>)
 8007894:	885c      	ldrh	r4, [r3, #2]
	float  adc_sensor = ADC_val[0];
 8007896:	8818      	ldrh	r0, [r3, #0]
 8007898:	f7fc fba0 	bl	8003fdc <__aeabi_ui2f>
 800789c:	1c05      	adds	r5, r0, #0
	ADC_Config();
	DMA_Config();
}

uint32_t getTemperature(void){
	float  adc_intref = ADC_val[1];
 800789e:	1c20      	adds	r0, r4, #0
 80078a0:	f7fc fb9c 	bl	8003fdc <__aeabi_ui2f>
 80078a4:	1c01      	adds	r1, r0, #0
	float  adc_sensor = ADC_val[0];
#if(TMPSENSOR_USE_INTREF)

	float intref_vol = (TMPSENSOR_ADCMAX*TMPSENSOR_ADCVREFINT)/adc_intref;
 80078a6:	480e      	ldr	r0, [pc, #56]	; (80078e0 <getTemperature+0x50>)
 80078a8:	f7fb ff1e 	bl	80036e8 <__aeabi_fdiv>
 80078ac:	1c01      	adds	r1, r0, #0

#else
	float intref_vol = TMPSENSOR_ADCREFVOL;
#endif

	float sensor_vol = adc_sensor * intref_vol/TMPSENSOR_ADCMAX;
 80078ae:	1c28      	adds	r0, r5, #0
 80078b0:	f7fc f848 	bl	8003944 <__aeabi_fmul>
 80078b4:	490b      	ldr	r1, [pc, #44]	; (80078e4 <getTemperature+0x54>)
 80078b6:	f7fb ff17 	bl	80036e8 <__aeabi_fdiv>
 80078ba:	1c01      	adds	r1, r0, #0

	uint32_t sensor_tmp = (uint32_t)((TMPSENSOR_V30 - sensor_vol)*1000/TMPSENSOR_AVGSLOPE + 30);
 80078bc:	480a      	ldr	r0, [pc, #40]	; (80078e8 <getTemperature+0x58>)
 80078be:	f7fc f94d 	bl	8003b5c <__aeabi_fsub>
 80078c2:	490a      	ldr	r1, [pc, #40]	; (80078ec <getTemperature+0x5c>)
 80078c4:	f7fc f83e 	bl	8003944 <__aeabi_fmul>
 80078c8:	4909      	ldr	r1, [pc, #36]	; (80078f0 <getTemperature+0x60>)
 80078ca:	f7fb ff0d 	bl	80036e8 <__aeabi_fdiv>
 80078ce:	4909      	ldr	r1, [pc, #36]	; (80078f4 <getTemperature+0x64>)
 80078d0:	f7fb fd62 	bl	8003398 <__aeabi_fadd>
 80078d4:	f7fb fd26 	bl	8003324 <__aeabi_f2uiz>

	return sensor_tmp;
}
 80078d8:	bd38      	pop	{r3, r4, r5, pc}
 80078da:	46c0      	nop			; (mov r8, r8)
 80078dc:	2000074c 	.word	0x2000074c
 80078e0:	4a62af40 	.word	0x4a62af40
 80078e4:	45417000 	.word	0x45417000
 80078e8:	44a78000 	.word	0x44a78000
 80078ec:	447a0000 	.word	0x447a0000
 80078f0:	457a0000 	.word	0x457a0000
 80078f4:	41f00000 	.word	0x41f00000

080078f8 <cleanWDT>:
#endif

	}
}

void cleanWDT(void){
 80078f8:	b508      	push	{r3, lr}
	IWDG_SetWindowValue(1000);
 80078fa:	20fa      	movs	r0, #250	; 0xfa
 80078fc:	0080      	lsls	r0, r0, #2
 80078fe:	f001 ff81 	bl	8009804 <IWDG_SetWindowValue>
}
 8007902:	bd08      	pop	{r3, pc}

08007904 <calc_fuel_level>:
STORE_LEVEL prePulse;

ERROR_STATE preErrorState;
unsigned long lastBackNormal = 0;

void calc_fuel_level() {
 8007904:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t diff = abs(g_config.emptyValue - g_config.fullValue);
 8007906:	4b58      	ldr	r3, [pc, #352]	; (8007a68 <calc_fuel_level+0x164>)
STORE_LEVEL prePulse;

ERROR_STATE preErrorState;
unsigned long lastBackNormal = 0;

void calc_fuel_level() {
 8007908:	b085      	sub	sp, #20
	uint32_t diff = abs(g_config.emptyValue - g_config.fullValue);
 800790a:	691e      	ldr	r6, [r3, #16]
 800790c:	68df      	ldr	r7, [r3, #12]

	if(g_config.emptyValue > g_config.fullValue && g_config.fullValue && g_config.emptyValue) {
 800790e:	42be      	cmp	r6, r7
 8007910:	d800      	bhi.n	8007914 <calc_fuel_level+0x10>
 8007912:	e0a7      	b.n	8007a64 <calc_fuel_level+0x160>
 8007914:	2f00      	cmp	r7, #0
 8007916:	d100      	bne.n	800791a <calc_fuel_level+0x16>
 8007918:	e0a4      	b.n	8007a64 <calc_fuel_level+0x160>
 800791a:	2e00      	cmp	r6, #0
 800791c:	d100      	bne.n	8007920 <calc_fuel_level+0x1c>
 800791e:	e0a1      	b.n	8007a64 <calc_fuel_level+0x160>
		int fuelLevel = g_appStats.fuelLevel;
 8007920:	4c52      	ldr	r4, [pc, #328]	; (8007a6c <calc_fuel_level+0x168>)
 8007922:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007924:	9502      	str	r5, [sp, #8]

		if(g_appStats.emaFrequency == 0) {
 8007926:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007928:	2d00      	cmp	r5, #0
 800792a:	d101      	bne.n	8007930 <calc_fuel_level+0x2c>
			g_appStats.directFuelLevel = 0;
 800792c:	62e5      	str	r5, [r4, #44]	; 0x2c
 800792e:	e01e      	b.n	800796e <calc_fuel_level+0x6a>
		} else if(g_appStats.emaFrequency <= g_config.fullValue) {
 8007930:	42bd      	cmp	r5, r7
 8007932:	d801      	bhi.n	8007938 <calc_fuel_level+0x34>
			g_appStats.directFuelLevel = MAX_LEVEL;
 8007934:	4b4e      	ldr	r3, [pc, #312]	; (8007a70 <calc_fuel_level+0x16c>)
 8007936:	e002      	b.n	800793e <calc_fuel_level+0x3a>
		} else if(g_appStats.emaFrequency >= g_config.emptyValue) {
 8007938:	42b5      	cmp	r5, r6
 800793a:	d302      	bcc.n	8007942 <calc_fuel_level+0x3e>
			g_appStats.directFuelLevel = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007940:	e015      	b.n	800796e <calc_fuel_level+0x6a>
		} else {
			float nValue = ((((g_config.emptyValue - g_appStats.emaFrequency)*g_config.fullValue))/(float)(diff*g_appStats.emaFrequency))*MAX_LEVEL;
 8007942:	1b70      	subs	r0, r6, r5
 8007944:	4378      	muls	r0, r7
 8007946:	f7fc fb49 	bl	8003fdc <__aeabi_ui2f>
 800794a:	9003      	str	r0, [sp, #12]

ERROR_STATE preErrorState;
unsigned long lastBackNormal = 0;

void calc_fuel_level() {
	uint32_t diff = abs(g_config.emptyValue - g_config.fullValue);
 800794c:	1bf0      	subs	r0, r6, r7
 800794e:	17c6      	asrs	r6, r0, #31
 8007950:	1980      	adds	r0, r0, r6
 8007952:	4070      	eors	r0, r6
		} else if(g_appStats.emaFrequency <= g_config.fullValue) {
			g_appStats.directFuelLevel = MAX_LEVEL;
		} else if(g_appStats.emaFrequency >= g_config.emptyValue) {
			g_appStats.directFuelLevel = 0;
		} else {
			float nValue = ((((g_config.emptyValue - g_appStats.emaFrequency)*g_config.fullValue))/(float)(diff*g_appStats.emaFrequency))*MAX_LEVEL;
 8007954:	4368      	muls	r0, r5
 8007956:	f7fc fb41 	bl	8003fdc <__aeabi_ui2f>
 800795a:	1c01      	adds	r1, r0, #0
 800795c:	9803      	ldr	r0, [sp, #12]
 800795e:	f7fb fec3 	bl	80036e8 <__aeabi_fdiv>
 8007962:	4944      	ldr	r1, [pc, #272]	; (8007a74 <calc_fuel_level+0x170>)
 8007964:	f7fb ffee 	bl	8003944 <__aeabi_fmul>
			g_appStats.directFuelLevel = (int)(nValue);
 8007968:	f7fc fac0 	bl	8003eec <__aeabi_f2iz>
 800796c:	62e0      	str	r0, [r4, #44]	; 0x2c
		}

		if(g_appStats.errorState == ERROR_STATE_NORMAL) {
 800796e:	4a3f      	ldr	r2, [pc, #252]	; (8007a6c <calc_fuel_level+0x168>)
 8007970:	1c11      	adds	r1, r2, #0
 8007972:	3165      	adds	r1, #101	; 0x65
 8007974:	780b      	ldrb	r3, [r1, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <calc_fuel_level+0x7a>

void calc_fuel_level() {
	uint32_t diff = abs(g_config.emptyValue - g_config.fullValue);

	if(g_config.emptyValue > g_config.fullValue && g_config.fullValue && g_config.emptyValue) {
		int fuelLevel = g_appStats.fuelLevel;
 800797a:	9902      	ldr	r1, [sp, #8]
 800797c:	e000      	b.n	8007980 <calc_fuel_level+0x7c>
			float nValue = ((((g_config.emptyValue - g_appStats.emaFrequency)*g_config.fullValue))/(float)(diff*g_appStats.emaFrequency))*MAX_LEVEL;
			g_appStats.directFuelLevel = (int)(nValue);
		}

		if(g_appStats.errorState == ERROR_STATE_NORMAL) {
			fuelLevel = g_appStats.directFuelLevel;
 800797e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
		}

		if(preErrorState != ERROR_STATE_NORMAL && g_appStats.errorState == ERROR_STATE_NORMAL) {
 8007980:	483d      	ldr	r0, [pc, #244]	; (8007a78 <calc_fuel_level+0x174>)
 8007982:	7804      	ldrb	r4, [r0, #0]
 8007984:	2c00      	cmp	r4, #0
 8007986:	d005      	beq.n	8007994 <calc_fuel_level+0x90>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d103      	bne.n	8007994 <calc_fuel_level+0x90>
			lastBackNormal = ulSecCount;
 800798c:	4e3b      	ldr	r6, [pc, #236]	; (8007a7c <calc_fuel_level+0x178>)
 800798e:	4f3c      	ldr	r7, [pc, #240]	; (8007a80 <calc_fuel_level+0x17c>)
 8007990:	6835      	ldr	r5, [r6, #0]
 8007992:	603d      	str	r5, [r7, #0]
		}

		preErrorState = g_appStats.errorState;
		float roll = g_appStats.lsm6ds3.roll;
		float pitch = g_appStats.lsm6ds3.pitch;
 8007994:	6854      	ldr	r4, [r2, #4]

		if(preErrorState != ERROR_STATE_NORMAL && g_appStats.errorState == ERROR_STATE_NORMAL) {
			lastBackNormal = ulSecCount;
		}

		preErrorState = g_appStats.errorState;
 8007996:	7003      	strb	r3, [r0, #0]
		float roll = g_appStats.lsm6ds3.roll;
 8007998:	6810      	ldr	r0, [r2, #0]
		float pitch = g_appStats.lsm6ds3.pitch;
		float yaw = g_appStats.lsm6ds3.yaw;
 800799a:	6892      	ldr	r2, [r2, #8]
			lastBackNormal = ulSecCount;
		}

		preErrorState = g_appStats.errorState;
		float roll = g_appStats.lsm6ds3.roll;
		float pitch = g_appStats.lsm6ds3.pitch;
 800799c:	9402      	str	r4, [sp, #8]
		float yaw = g_appStats.lsm6ds3.yaw;
 800799e:	9201      	str	r2, [sp, #4]

		if(g_appStats.errorState == ERROR_STATE_NORMAL && ((!lastBackNormal && ulSecCount >= 3) || ((uint32_t)(ulSecCount - lastBackNormal) >= SKS_TRUNC_ERROR_SEC))) {
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d132      	bne.n	8007a0a <calc_fuel_level+0x106>
 80079a4:	4f36      	ldr	r7, [pc, #216]	; (8007a80 <calc_fuel_level+0x17c>)
 80079a6:	4c35      	ldr	r4, [pc, #212]	; (8007a7c <calc_fuel_level+0x178>)
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	d102      	bne.n	80079b4 <calc_fuel_level+0xb0>
 80079ae:	6825      	ldr	r5, [r4, #0]
 80079b0:	2d02      	cmp	r5, #2
 80079b2:	d804      	bhi.n	80079be <calc_fuel_level+0xba>
 80079b4:	6826      	ldr	r6, [r4, #0]
 80079b6:	1ab3      	subs	r3, r6, r2
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	d926      	bls.n	8007a0a <calc_fuel_level+0x106>
 80079bc:	2300      	movs	r3, #0
 80079be:	2401      	movs	r4, #1
 80079c0:	1c1a      	adds	r2, r3, #0
 80079c2:	4267      	negs	r7, r4
			int minSecCount = 0xFFFFFFFF;
			int levelIdx = 0;
			for(int i=0; i<MAX_STORE_LEVEL; i++) {
				STORE_LEVEL *p = &storeLevels[i];
 80079c4:	261c      	movs	r6, #28
 80079c6:	435e      	muls	r6, r3
				if(!p->secCount) {
 80079c8:	4d2e      	ldr	r5, [pc, #184]	; (8007a84 <calc_fuel_level+0x180>)

		if(g_appStats.errorState == ERROR_STATE_NORMAL && ((!lastBackNormal && ulSecCount >= 3) || ((uint32_t)(ulSecCount - lastBackNormal) >= SKS_TRUNC_ERROR_SEC))) {
			int minSecCount = 0xFFFFFFFF;
			int levelIdx = 0;
			for(int i=0; i<MAX_STORE_LEVEL; i++) {
				STORE_LEVEL *p = &storeLevels[i];
 80079ca:	9603      	str	r6, [sp, #12]
				if(!p->secCount) {
 80079cc:	59ac      	ldr	r4, [r5, r6]
 80079ce:	46ac      	mov	ip, r5
 80079d0:	2c00      	cmp	r4, #0
 80079d2:	d007      	beq.n	80079e4 <calc_fuel_level+0xe0>
					levelIdx = i;
					break;
				} else if(p->secCount < minSecCount) {
 80079d4:	42bc      	cmp	r4, r7
 80079d6:	d201      	bcs.n	80079dc <calc_fuel_level+0xd8>
					levelIdx = i;
					minSecCount = p->secCount;
 80079d8:	1c27      	adds	r7, r4, #0
 80079da:	1c1a      	adds	r2, r3, #0
		float yaw = g_appStats.lsm6ds3.yaw;

		if(g_appStats.errorState == ERROR_STATE_NORMAL && ((!lastBackNormal && ulSecCount >= 3) || ((uint32_t)(ulSecCount - lastBackNormal) >= SKS_TRUNC_ERROR_SEC))) {
			int minSecCount = 0xFFFFFFFF;
			int levelIdx = 0;
			for(int i=0; i<MAX_STORE_LEVEL; i++) {
 80079dc:	3301      	adds	r3, #1
 80079de:	2b1e      	cmp	r3, #30
 80079e0:	d1f0      	bne.n	80079c4 <calc_fuel_level+0xc0>
 80079e2:	e000      	b.n	80079e6 <calc_fuel_level+0xe2>
				STORE_LEVEL *p = &storeLevels[i];
				if(!p->secCount) {
 80079e4:	1c1a      	adds	r2, r3, #0
					levelIdx = i;
					minSecCount = p->secCount;
				}
			}

			STORE_LEVEL *p = &storeLevels[levelIdx];
 80079e6:	271c      	movs	r7, #28
 80079e8:	4357      	muls	r7, r2
			p->level = fuelLevel;
			p->secCount = ulSecCount;
 80079ea:	4a24      	ldr	r2, [pc, #144]	; (8007a7c <calc_fuel_level+0x178>)
					levelIdx = i;
					minSecCount = p->secCount;
				}
			}

			STORE_LEVEL *p = &storeLevels[levelIdx];
 80079ec:	4467      	add	r7, ip
			p->level = fuelLevel;
 80079ee:	61b9      	str	r1, [r7, #24]
			p->secCount = ulSecCount;
 80079f0:	6811      	ldr	r1, [r2, #0]
 80079f2:	6039      	str	r1, [r7, #0]
			p->x = (int)roll;
 80079f4:	f7fc fa7a 	bl	8003eec <__aeabi_f2iz>
 80079f8:	60f8      	str	r0, [r7, #12]
			p->y = (int)pitch;
 80079fa:	9802      	ldr	r0, [sp, #8]
 80079fc:	f7fc fa76 	bl	8003eec <__aeabi_f2iz>
 8007a00:	6138      	str	r0, [r7, #16]
			p->z = (int)yaw;
 8007a02:	9801      	ldr	r0, [sp, #4]
 8007a04:	f7fc fa72 	bl	8003eec <__aeabi_f2iz>
 8007a08:	6178      	str	r0, [r7, #20]
				if(p->secCount < (uint32_t)(ulSecCount - SKS_TRUNC_ERROR_SEC)) {
					if(p->secCount > maxSecCount && p->level) {
						maxSecCount = p->secCount;
						level = p->level;
					}
				} else if(g_appStats.errorState != ERROR_STATE_NORMAL && p->secCount >= (uint32_t)(ulSecCount - SKS_TRUNC_ERROR_SEC)){
 8007a0a:	4b18      	ldr	r3, [pc, #96]	; (8007a6c <calc_fuel_level+0x168>)
 8007a0c:	2001      	movs	r0, #1
 8007a0e:	3365      	adds	r3, #101	; 0x65
 8007a10:	781e      	ldrb	r6, [r3, #0]
 8007a12:	2300      	movs	r3, #0
 8007a14:	4241      	negs	r1, r0
 8007a16:	1c1c      	adds	r4, r3, #0
		}

		int maxSecCount = 0;
		int level = -1;
		for(int i=0; i<MAX_STORE_LEVEL; i++) {
			STORE_LEVEL *p = &storeLevels[i];
 8007a18:	251c      	movs	r5, #28
 8007a1a:	435d      	muls	r5, r3
 8007a1c:	4f19      	ldr	r7, [pc, #100]	; (8007a84 <calc_fuel_level+0x180>)
 8007a1e:	19e8      	adds	r0, r5, r7
			if(p->secCount) {
 8007a20:	6802      	ldr	r2, [r0, #0]
 8007a22:	2a00      	cmp	r2, #0
 8007a24:	d014      	beq.n	8007a50 <calc_fuel_level+0x14c>
				if(p->secCount < (uint32_t)(ulSecCount - SKS_TRUNC_ERROR_SEC)) {
 8007a26:	4d15      	ldr	r5, [pc, #84]	; (8007a7c <calc_fuel_level+0x178>)
 8007a28:	682f      	ldr	r7, [r5, #0]
 8007a2a:	3f05      	subs	r7, #5
 8007a2c:	42ba      	cmp	r2, r7
 8007a2e:	d207      	bcs.n	8007a40 <calc_fuel_level+0x13c>
					if(p->secCount > maxSecCount && p->level) {
 8007a30:	42a2      	cmp	r2, r4
 8007a32:	d90d      	bls.n	8007a50 <calc_fuel_level+0x14c>
 8007a34:	6980      	ldr	r0, [r0, #24]
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d00a      	beq.n	8007a50 <calc_fuel_level+0x14c>
						maxSecCount = p->secCount;
 8007a3a:	1c14      	adds	r4, r2, #0
 8007a3c:	1c01      	adds	r1, r0, #0
 8007a3e:	e007      	b.n	8007a50 <calc_fuel_level+0x14c>
						level = p->level;
					}
				} else if(g_appStats.errorState != ERROR_STATE_NORMAL && p->secCount >= (uint32_t)(ulSecCount - SKS_TRUNC_ERROR_SEC)){
 8007a40:	2e00      	cmp	r6, #0
 8007a42:	d005      	beq.n	8007a50 <calc_fuel_level+0x14c>
 8007a44:	682d      	ldr	r5, [r5, #0]
 8007a46:	3d05      	subs	r5, #5
 8007a48:	42aa      	cmp	r2, r5
 8007a4a:	d301      	bcc.n	8007a50 <calc_fuel_level+0x14c>
					p->secCount = 0;
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	6002      	str	r2, [r0, #0]
			p->z = (int)yaw;
		}

		int maxSecCount = 0;
		int level = -1;
		for(int i=0; i<MAX_STORE_LEVEL; i++) {
 8007a50:	3301      	adds	r3, #1
 8007a52:	2b1e      	cmp	r3, #30
 8007a54:	d1e0      	bne.n	8007a18 <calc_fuel_level+0x114>
					p->secCount = 0;
				}
			}
		}

		if(level != -1) {
 8007a56:	1c4e      	adds	r6, r1, #1
 8007a58:	d004      	beq.n	8007a64 <calc_fuel_level+0x160>
			g_appStats.fuelLevel = level;
 8007a5a:	4e04      	ldr	r6, [pc, #16]	; (8007a6c <calc_fuel_level+0x168>)
 8007a5c:	62b1      	str	r1, [r6, #40]	; 0x28
			g_appStats.lastLevelSecCount = ulSecCount;
 8007a5e:	4907      	ldr	r1, [pc, #28]	; (8007a7c <calc_fuel_level+0x178>)
 8007a60:	680c      	ldr	r4, [r1, #0]
 8007a62:	6334      	str	r4, [r6, #48]	; 0x30
		}
	}
}
 8007a64:	b005      	add	sp, #20
 8007a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a68:	20000a14 	.word	0x20000a14
 8007a6c:	200009a8 	.word	0x200009a8
 8007a70:	000003ff 	.word	0x000003ff
 8007a74:	447fc000 	.word	0x447fc000
 8007a78:	20000b28 	.word	0x20000b28
 8007a7c:	20000880 	.word	0x20000880
 8007a80:	20000750 	.word	0x20000750
 8007a84:	20001208 	.word	0x20001208

08007a88 <output_data>:

void output_data() {
 8007a88:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(ulSecCount < 2) {
 8007a8a:	4cca      	ldr	r4, [pc, #808]	; (8007db4 <output_data+0x32c>)
			g_appStats.lastLevelSecCount = ulSecCount;
		}
	}
}

void output_data() {
 8007a8c:	b0ad      	sub	sp, #180	; 0xb4
	if(ulSecCount < 2) {
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d800      	bhi.n	8007a96 <output_data+0xe>
 8007a94:	e3e3      	b.n	800825e <output_data+0x7d6>
		return;
	}

	if(lastGetTemper != ulSecCount) {
 8007a96:	4ec8      	ldr	r6, [pc, #800]	; (8007db8 <output_data+0x330>)
 8007a98:	6820      	ldr	r0, [r4, #0]
 8007a9a:	6832      	ldr	r2, [r6, #0]
 8007a9c:	4dc7      	ldr	r5, [pc, #796]	; (8007dbc <output_data+0x334>)
 8007a9e:	4282      	cmp	r2, r0
 8007aa0:	d004      	beq.n	8007aac <output_data+0x24>
		g_appStats.internalTemp = getTemperature();
 8007aa2:	f7ff fef5 	bl	8007890 <getTemperature>
		lastGetTemper = ulSecCount;
 8007aa6:	6821      	ldr	r1, [r4, #0]
	if(ulSecCount < 2) {
		return;
	}

	if(lastGetTemper != ulSecCount) {
		g_appStats.internalTemp = getTemperature();
 8007aa8:	6628      	str	r0, [r5, #96]	; 0x60
		lastGetTemper = ulSecCount;
 8007aaa:	6031      	str	r1, [r6, #0]
	}

	int roll = (int)g_appStats.lsm6ds3.roll;
 8007aac:	6828      	ldr	r0, [r5, #0]
 8007aae:	f7fc fa1d 	bl	8003eec <__aeabi_f2iz>
 8007ab2:	901e      	str	r0, [sp, #120]	; 0x78
	int pitch = (int)g_appStats.lsm6ds3.pitch;
 8007ab4:	6868      	ldr	r0, [r5, #4]
 8007ab6:	f7fc fa19 	bl	8003eec <__aeabi_f2iz>
 8007aba:	901a      	str	r0, [sp, #104]	; 0x68
	int yaw = (int)g_appStats.lsm6ds3.yaw;
 8007abc:	68a8      	ldr	r0, [r5, #8]
 8007abe:	f7fc fa15 	bl	8003eec <__aeabi_f2iz>

	if(ulSecCount != lastStoreAverage) {
 8007ac2:	4bbc      	ldr	r3, [pc, #752]	; (8007db4 <output_data+0x32c>)
 8007ac4:	4fbe      	ldr	r7, [pc, #760]	; (8007dc0 <output_data+0x338>)
 8007ac6:	681c      	ldr	r4, [r3, #0]
 8007ac8:	683e      	ldr	r6, [r7, #0]
		lastGetTemper = ulSecCount;
	}

	int roll = (int)g_appStats.lsm6ds3.roll;
	int pitch = (int)g_appStats.lsm6ds3.pitch;
	int yaw = (int)g_appStats.lsm6ds3.yaw;
 8007aca:	901f      	str	r0, [sp, #124]	; 0x7c

	if(ulSecCount != lastStoreAverage) {
 8007acc:	42b4      	cmp	r4, r6
 8007ace:	d100      	bne.n	8007ad2 <output_data+0x4a>
 8007ad0:	e3c5      	b.n	800825e <output_data+0x7d6>
		calc_fuel_level();
 8007ad2:	f7ff ff17 	bl	8007904 <calc_fuel_level>

		int fuelLevel = g_appStats.fuelLevel;

		//store min 3D level
		for(int i=0; i<MAX_NO_AVERAGE; i++) {
			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 8007ad6:	49bb      	ldr	r1, [pc, #748]	; (8007dc4 <output_data+0x33c>)
	int yaw = (int)g_appStats.lsm6ds3.yaw;

	if(ulSecCount != lastStoreAverage) {
		calc_fuel_level();

		int fuelLevel = g_appStats.fuelLevel;
 8007ad8:	6aad      	ldr	r5, [r5, #40]	; 0x28

		//store min 3D level
		for(int i=0; i<MAX_NO_AVERAGE; i++) {
			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 8007ada:	7e0a      	ldrb	r2, [r1, #24]
 8007adc:	7e48      	ldrb	r0, [r1, #25]
		calc_fuel_level();

		int fuelLevel = g_appStats.fuelLevel;

		//store min 3D level
		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 8007ade:	4694      	mov	ip, r2
			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 8007ae0:	9017      	str	r0, [sp, #92]	; 0x5c
		calc_fuel_level();

		int fuelLevel = g_appStats.fuelLevel;

		//store min 3D level
		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 8007ae2:	2000      	movs	r0, #0
			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 8007ae4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007ae6:	17e6      	asrs	r6, r4, #31
 8007ae8:	19a3      	adds	r3, r4, r6
 8007aea:	4073      	eors	r3, r6
 8007aec:	4563      	cmp	r3, ip
 8007aee:	dc2e      	bgt.n	8007b4e <output_data+0xc6>
 8007af0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007af2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8007af4:	17ca      	asrs	r2, r1, #31
 8007af6:	188e      	adds	r6, r1, r2
 8007af8:	4056      	eors	r6, r2
 8007afa:	42be      	cmp	r6, r7
 8007afc:	dc27      	bgt.n	8007b4e <output_data+0xc6>
				STORE_LEVEL *pMin = &min3DFreq[i];
 8007afe:	241c      	movs	r4, #28
 8007b00:	4344      	muls	r4, r0
 8007b02:	4fb1      	ldr	r7, [pc, #708]	; (8007dc8 <output_data+0x340>)
 8007b04:	19e1      	adds	r1, r4, r7
				if(pMin->secCount == 0
 8007b06:	680f      	ldr	r7, [r1, #0]
 8007b08:	4caa      	ldr	r4, [pc, #680]	; (8007db4 <output_data+0x32c>)
 8007b0a:	2f00      	cmp	r7, #0
 8007b0c:	d00f      	beq.n	8007b2e <output_data+0xa6>
						|| (ulSecCount - pMin->secCount) > (MAX_NO_AVERAGE*2)
 8007b0e:	6822      	ldr	r2, [r4, #0]
 8007b10:	1bd2      	subs	r2, r2, r7
 8007b12:	2a1e      	cmp	r2, #30
 8007b14:	d80b      	bhi.n	8007b2e <output_data+0xa6>
						|| (abs(roll) <= abs(pMin->x) && abs(pitch) <= abs(pMin->y))) {
 8007b16:	68ca      	ldr	r2, [r1, #12]
 8007b18:	17d7      	asrs	r7, r2, #31
 8007b1a:	19d2      	adds	r2, r2, r7
 8007b1c:	407a      	eors	r2, r7
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	dc15      	bgt.n	8007b4e <output_data+0xc6>
 8007b22:	690a      	ldr	r2, [r1, #16]
 8007b24:	17d7      	asrs	r7, r2, #31
 8007b26:	19d2      	adds	r2, r2, r7
 8007b28:	407a      	eors	r2, r7
 8007b2a:	4296      	cmp	r6, r2
 8007b2c:	dc0f      	bgt.n	8007b4e <output_data+0xc6>
					pMin->secCount = ulSecCount;
					pMin->frequency = g_appStats.emaFrequency;
 8007b2e:	48a3      	ldr	r0, [pc, #652]	; (8007dbc <output_data+0x334>)
			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
				STORE_LEVEL *pMin = &min3DFreq[i];
				if(pMin->secCount == 0
						|| (ulSecCount - pMin->secCount) > (MAX_NO_AVERAGE*2)
						|| (abs(roll) <= abs(pMin->x) && abs(pitch) <= abs(pMin->y))) {
					pMin->secCount = ulSecCount;
 8007b30:	6824      	ldr	r4, [r4, #0]
					pMin->frequency = g_appStats.emaFrequency;
 8007b32:	6a46      	ldr	r6, [r0, #36]	; 0x24
					pMin->level = fuelLevel;
					pMin->vibration = g_appStats.vibrInt;
 8007b34:	6c87      	ldr	r7, [r0, #72]	; 0x48
			if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
				STORE_LEVEL *pMin = &min3DFreq[i];
				if(pMin->secCount == 0
						|| (ulSecCount - pMin->secCount) > (MAX_NO_AVERAGE*2)
						|| (abs(roll) <= abs(pMin->x) && abs(pitch) <= abs(pMin->y))) {
					pMin->secCount = ulSecCount;
 8007b36:	600c      	str	r4, [r1, #0]
					pMin->frequency = g_appStats.emaFrequency;
 8007b38:	604e      	str	r6, [r1, #4]
					pMin->level = fuelLevel;
					pMin->vibration = g_appStats.vibrInt;
					pMin->x = roll;
 8007b3a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
					pMin->y = pitch;
 8007b3c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
					pMin->z = yaw;
 8007b3e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007b40:	4662      	mov	r2, ip
				if(pMin->secCount == 0
						|| (ulSecCount - pMin->secCount) > (MAX_NO_AVERAGE*2)
						|| (abs(roll) <= abs(pMin->x) && abs(pitch) <= abs(pMin->y))) {
					pMin->secCount = ulSecCount;
					pMin->frequency = g_appStats.emaFrequency;
					pMin->level = fuelLevel;
 8007b42:	618d      	str	r5, [r1, #24]
					pMin->vibration = g_appStats.vibrInt;
 8007b44:	608f      	str	r7, [r1, #8]
					pMin->x = roll;
 8007b46:	60cc      	str	r4, [r1, #12]
					pMin->y = pitch;
 8007b48:	610e      	str	r6, [r1, #16]
					pMin->z = yaw;
 8007b4a:	6148      	str	r0, [r1, #20]
					break;
 8007b4c:	e003      	b.n	8007b56 <output_data+0xce>
		calc_fuel_level();

		int fuelLevel = g_appStats.fuelLevel;

		//store min 3D level
		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 8007b4e:	3001      	adds	r0, #1
 8007b50:	280f      	cmp	r0, #15
 8007b52:	d1c7      	bne.n	8007ae4 <output_data+0x5c>
 8007b54:	4662      	mov	r2, ip
			}
		}
		//end store min 3D level

		//store same 3d level
		if(sameIdx >= MAX_NO_AVERAGE) {
 8007b56:	499d      	ldr	r1, [pc, #628]	; (8007dcc <output_data+0x344>)
 8007b58:	780f      	ldrb	r7, [r1, #0]
 8007b5a:	2f0e      	cmp	r7, #14
 8007b5c:	d901      	bls.n	8007b62 <output_data+0xda>
			sameIdx = 0;
 8007b5e:	2000      	movs	r0, #0
 8007b60:	7008      	strb	r0, [r1, #0]
		}

		if(abs(roll - prePulse.x) <= 1 && abs(pitch - prePulse.y) <= 1 && abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 8007b62:	499b      	ldr	r1, [pc, #620]	; (8007dd0 <output_data+0x348>)
 8007b64:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007b66:	68cf      	ldr	r7, [r1, #12]
 8007b68:	1be6      	subs	r6, r4, r7
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	2e02      	cmp	r6, #2
 8007b6e:	d825      	bhi.n	8007bbc <output_data+0x134>
 8007b70:	6908      	ldr	r0, [r1, #16]
 8007b72:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8007b74:	1a31      	subs	r1, r6, r0
 8007b76:	3101      	adds	r1, #1
 8007b78:	2902      	cmp	r1, #2
 8007b7a:	d81f      	bhi.n	8007bbc <output_data+0x134>
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	dc1d      	bgt.n	8007bbc <output_data+0x134>
 8007b80:	4c90      	ldr	r4, [pc, #576]	; (8007dc4 <output_data+0x33c>)
 8007b82:	17f1      	asrs	r1, r6, #31
 8007b84:	7e67      	ldrb	r7, [r4, #25]
 8007b86:	1876      	adds	r6, r6, r1
 8007b88:	404e      	eors	r6, r1
 8007b8a:	42be      	cmp	r6, r7
 8007b8c:	dc16      	bgt.n	8007bbc <output_data+0x134>
			same3DFreq[sameIdx].secCount = ulSecCount;
 8007b8e:	488f      	ldr	r0, [pc, #572]	; (8007dcc <output_data+0x344>)
 8007b90:	4988      	ldr	r1, [pc, #544]	; (8007db4 <output_data+0x32c>)
 8007b92:	7804      	ldrb	r4, [r0, #0]
 8007b94:	680f      	ldr	r7, [r1, #0]
 8007b96:	211c      	movs	r1, #28
 8007b98:	4361      	muls	r1, r4
 8007b9a:	4e8e      	ldr	r6, [pc, #568]	; (8007dd4 <output_data+0x34c>)
			same3DFreq[sameIdx].level = fuelLevel;
			same3DFreq[sameIdx].vibration = g_appStats.vibrInt;
			same3DFreq[sameIdx].x = roll;
			same3DFreq[sameIdx].y = pitch;
			same3DFreq[sameIdx].z = yaw;
			sameIdx++;
 8007b9c:	3401      	adds	r4, #1
		if(sameIdx >= MAX_NO_AVERAGE) {
			sameIdx = 0;
		}

		if(abs(roll - prePulse.x) <= 1 && abs(pitch - prePulse.y) <= 1 && abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
			same3DFreq[sameIdx].secCount = ulSecCount;
 8007b9e:	518f      	str	r7, [r1, r6]
			same3DFreq[sameIdx].frequency = g_appStats.emaFrequency;
 8007ba0:	1871      	adds	r1, r6, r1
 8007ba2:	4e86      	ldr	r6, [pc, #536]	; (8007dbc <output_data+0x334>)
			same3DFreq[sameIdx].level = fuelLevel;
 8007ba4:	618d      	str	r5, [r1, #24]
			sameIdx = 0;
		}

		if(abs(roll - prePulse.x) <= 1 && abs(pitch - prePulse.y) <= 1 && abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
			same3DFreq[sameIdx].secCount = ulSecCount;
			same3DFreq[sameIdx].frequency = g_appStats.emaFrequency;
 8007ba6:	6a77      	ldr	r7, [r6, #36]	; 0x24
			same3DFreq[sameIdx].level = fuelLevel;
			same3DFreq[sameIdx].vibration = g_appStats.vibrInt;
			same3DFreq[sameIdx].x = roll;
			same3DFreq[sameIdx].y = pitch;
			same3DFreq[sameIdx].z = yaw;
			sameIdx++;
 8007ba8:	7004      	strb	r4, [r0, #0]
			sameIdx = 0;
		}

		if(abs(roll - prePulse.x) <= 1 && abs(pitch - prePulse.y) <= 1 && abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
			same3DFreq[sameIdx].secCount = ulSecCount;
			same3DFreq[sameIdx].frequency = g_appStats.emaFrequency;
 8007baa:	604f      	str	r7, [r1, #4]
			same3DFreq[sameIdx].level = fuelLevel;
			same3DFreq[sameIdx].vibration = g_appStats.vibrInt;
 8007bac:	6cb7      	ldr	r7, [r6, #72]	; 0x48
			same3DFreq[sameIdx].x = roll;
 8007bae:	9e1e      	ldr	r6, [sp, #120]	; 0x78

		if(abs(roll - prePulse.x) <= 1 && abs(pitch - prePulse.y) <= 1 && abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
			same3DFreq[sameIdx].secCount = ulSecCount;
			same3DFreq[sameIdx].frequency = g_appStats.emaFrequency;
			same3DFreq[sameIdx].level = fuelLevel;
			same3DFreq[sameIdx].vibration = g_appStats.vibrInt;
 8007bb0:	608f      	str	r7, [r1, #8]
			same3DFreq[sameIdx].x = roll;
 8007bb2:	60ce      	str	r6, [r1, #12]
			same3DFreq[sameIdx].y = pitch;
 8007bb4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
			same3DFreq[sameIdx].z = yaw;
 8007bb6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
			same3DFreq[sameIdx].secCount = ulSecCount;
			same3DFreq[sameIdx].frequency = g_appStats.emaFrequency;
			same3DFreq[sameIdx].level = fuelLevel;
			same3DFreq[sameIdx].vibration = g_appStats.vibrInt;
			same3DFreq[sameIdx].x = roll;
			same3DFreq[sameIdx].y = pitch;
 8007bb8:	610f      	str	r7, [r1, #16]
			same3DFreq[sameIdx].z = yaw;
 8007bba:	614e      	str	r6, [r1, #20]
		prePulse.x = roll;
		prePulse.y = pitch;
		//end store same 3d level

		//store average level
		if(idx >= MAX_NO_AVERAGE) {
 8007bbc:	4986      	ldr	r1, [pc, #536]	; (8007dd8 <output_data+0x350>)
			same3DFreq[sameIdx].y = pitch;
			same3DFreq[sameIdx].z = yaw;
			sameIdx++;
		}

		prePulse.x = roll;
 8007bbe:	4e84      	ldr	r6, [pc, #528]	; (8007dd0 <output_data+0x348>)
 8007bc0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
		prePulse.y = pitch;
 8007bc2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
		//end store same 3d level

		//store average level
		if(idx >= MAX_NO_AVERAGE) {
 8007bc4:	7808      	ldrb	r0, [r1, #0]
			same3DFreq[sameIdx].y = pitch;
			same3DFreq[sameIdx].z = yaw;
			sameIdx++;
		}

		prePulse.x = roll;
 8007bc6:	60f7      	str	r7, [r6, #12]
		prePulse.y = pitch;
 8007bc8:	6134      	str	r4, [r6, #16]
		//end store same 3d level

		//store average level
		if(idx >= MAX_NO_AVERAGE) {
 8007bca:	280e      	cmp	r0, #14
 8007bcc:	d901      	bls.n	8007bd2 <output_data+0x14a>
			idx = 0;
 8007bce:	2000      	movs	r0, #0
 8007bd0:	7008      	strb	r0, [r1, #0]
		}

		avrFreq[idx].secCount = ulSecCount;
 8007bd2:	4f82      	ldr	r7, [pc, #520]	; (8007ddc <output_data+0x354>)
 8007bd4:	780e      	ldrb	r6, [r1, #0]
 8007bd6:	46bc      	mov	ip, r7
 8007bd8:	271c      	movs	r7, #28
 8007bda:	4377      	muls	r7, r6
 8007bdc:	4875      	ldr	r0, [pc, #468]	; (8007db4 <output_data+0x32c>)
 8007bde:	9618      	str	r6, [sp, #96]	; 0x60
 8007be0:	6804      	ldr	r4, [r0, #0]
 8007be2:	4666      	mov	r6, ip
 8007be4:	51bc      	str	r4, [r7, r6]
		avrFreq[idx].frequency = g_appStats.emaFrequency;
 8007be6:	4e75      	ldr	r6, [pc, #468]	; (8007dbc <output_data+0x334>)
 8007be8:	4467      	add	r7, ip
 8007bea:	6a74      	ldr	r4, [r6, #36]	; 0x24
		avrFreq[idx].level = fuelLevel;
		avrFreq[idx].vibration = g_appStats.vibrInt;
 8007bec:	6cb6      	ldr	r6, [r6, #72]	; 0x48
		if(idx >= MAX_NO_AVERAGE) {
			idx = 0;
		}

		avrFreq[idx].secCount = ulSecCount;
		avrFreq[idx].frequency = g_appStats.emaFrequency;
 8007bee:	9417      	str	r4, [sp, #92]	; 0x5c
 8007bf0:	607c      	str	r4, [r7, #4]
		avrFreq[idx].level = fuelLevel;
		avrFreq[idx].vibration = g_appStats.vibrInt;
		avrFreq[idx].x = roll;
 8007bf2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
			idx = 0;
		}

		avrFreq[idx].secCount = ulSecCount;
		avrFreq[idx].frequency = g_appStats.emaFrequency;
		avrFreq[idx].level = fuelLevel;
 8007bf4:	61bd      	str	r5, [r7, #24]
		avrFreq[idx].vibration = g_appStats.vibrInt;
		avrFreq[idx].x = roll;
 8007bf6:	60fc      	str	r4, [r7, #12]
		avrFreq[idx].y = pitch;
 8007bf8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
		}

		avrFreq[idx].secCount = ulSecCount;
		avrFreq[idx].frequency = g_appStats.emaFrequency;
		avrFreq[idx].level = fuelLevel;
		avrFreq[idx].vibration = g_appStats.vibrInt;
 8007bfa:	60be      	str	r6, [r7, #8]
		avrFreq[idx].x = roll;
		avrFreq[idx].y = pitch;
 8007bfc:	613c      	str	r4, [r7, #16]
		avrFreq[idx].z = yaw;
 8007bfe:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8007c00:	617c      	str	r4, [r7, #20]
		idx++;
 8007c02:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007c04:	3401      	adds	r4, #1
 8007c06:	700c      	strb	r4, [r1, #0]
		//end store average level

		//store in range 3D
		if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	dc20      	bgt.n	8007c4e <output_data+0x1c6>
 8007c0c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007c0e:	496d      	ldr	r1, [pc, #436]	; (8007dc4 <output_data+0x33c>)
 8007c10:	17fc      	asrs	r4, r7, #31
 8007c12:	7e4b      	ldrb	r3, [r1, #25]
 8007c14:	193a      	adds	r2, r7, r4
 8007c16:	4062      	eors	r2, r4
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	dc18      	bgt.n	8007c4e <output_data+0x1c6>
			if(idx3D >= MAX_NO_AVERAGE) {
 8007c1c:	4b70      	ldr	r3, [pc, #448]	; (8007de0 <output_data+0x358>)
 8007c1e:	781a      	ldrb	r2, [r3, #0]
 8007c20:	2a0e      	cmp	r2, #14
 8007c22:	d901      	bls.n	8007c28 <output_data+0x1a0>
				idx3D = 0;
 8007c24:	2100      	movs	r1, #0
 8007c26:	7019      	strb	r1, [r3, #0]
			}

			avrFreq3D[idx3D].secCount = ulSecCount;
 8007c28:	781a      	ldrb	r2, [r3, #0]
 8007c2a:	271c      	movs	r7, #28
 8007c2c:	4357      	muls	r7, r2
 8007c2e:	6804      	ldr	r4, [r0, #0]
 8007c30:	486c      	ldr	r0, [pc, #432]	; (8007de4 <output_data+0x35c>)
			avrFreq3D[idx3D].frequency = g_appStats.emaFrequency;
 8007c32:	9917      	ldr	r1, [sp, #92]	; 0x5c
		if(abs(roll) <= g_config.diffX && abs(pitch) <= g_config.diffY) {
			if(idx3D >= MAX_NO_AVERAGE) {
				idx3D = 0;
			}

			avrFreq3D[idx3D].secCount = ulSecCount;
 8007c34:	503c      	str	r4, [r7, r0]
			avrFreq3D[idx3D].frequency = g_appStats.emaFrequency;
 8007c36:	19c0      	adds	r0, r0, r7
			avrFreq3D[idx3D].level = fuelLevel;
			avrFreq3D[idx3D].vibration = g_appStats.vibrInt;
 8007c38:	6086      	str	r6, [r0, #8]
			avrFreq3D[idx3D].x = roll;
 8007c3a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
			avrFreq3D[idx3D].y = pitch;
 8007c3c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
			avrFreq3D[idx3D].z = yaw;
 8007c3e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
			idx3D++;
 8007c40:	3201      	adds	r2, #1
			if(idx3D >= MAX_NO_AVERAGE) {
				idx3D = 0;
			}

			avrFreq3D[idx3D].secCount = ulSecCount;
			avrFreq3D[idx3D].frequency = g_appStats.emaFrequency;
 8007c42:	6041      	str	r1, [r0, #4]
			avrFreq3D[idx3D].level = fuelLevel;
 8007c44:	6185      	str	r5, [r0, #24]
			avrFreq3D[idx3D].vibration = g_appStats.vibrInt;
			avrFreq3D[idx3D].x = roll;
 8007c46:	60c7      	str	r7, [r0, #12]
			avrFreq3D[idx3D].y = pitch;
 8007c48:	6104      	str	r4, [r0, #16]
			avrFreq3D[idx3D].z = yaw;
 8007c4a:	6146      	str	r6, [r0, #20]
			idx3D++;
 8007c4c:	701a      	strb	r2, [r3, #0]
		g_appStats.fuelLevelAvg = -1; //ok
		g_appStats.fuelLevelMinDiff = -1;

		g_appStats.vibrInt = 0;

		lastStoreAverage = ulSecCount;
 8007c4e:	4e59      	ldr	r6, [pc, #356]	; (8007db4 <output_data+0x32c>)
			idx3D++;
		}
		//end store in range 3D

		//reset all
		g_appStats.fuelLevel3D = -1; //ok
 8007c50:	495a      	ldr	r1, [pc, #360]	; (8007dbc <output_data+0x334>)
 8007c52:	2701      	movs	r7, #1
		g_appStats.fuelLevelAvg = -1; //ok
		g_appStats.fuelLevelMinDiff = -1;

		g_appStats.vibrInt = 0;

		lastStoreAverage = ulSecCount;
 8007c54:	6832      	ldr	r2, [r6, #0]
 8007c56:	4b5a      	ldr	r3, [pc, #360]	; (8007dc0 <output_data+0x338>)
			idx3D++;
		}
		//end store in range 3D

		//reset all
		g_appStats.fuelLevel3D = -1; //ok
 8007c58:	4278      	negs	r0, r7
		g_appStats.fuelLevel3DMin = -1; //ok
		g_appStats.fuelLevel3DSame = -1;
		g_appStats.fuelLevelAvg = -1; //ok
		g_appStats.fuelLevelMinDiff = -1;

		g_appStats.vibrInt = 0;
 8007c5a:	2400      	movs	r4, #0
			idx3D++;
		}
		//end store in range 3D

		//reset all
		g_appStats.fuelLevel3D = -1; //ok
 8007c5c:	6388      	str	r0, [r1, #56]	; 0x38
		g_appStats.fuelLevel3DMin = -1; //ok
 8007c5e:	63c8      	str	r0, [r1, #60]	; 0x3c
		g_appStats.fuelLevel3DSame = -1;
 8007c60:	6408      	str	r0, [r1, #64]	; 0x40
		g_appStats.fuelLevelAvg = -1; //ok
 8007c62:	6348      	str	r0, [r1, #52]	; 0x34
		g_appStats.fuelLevelMinDiff = -1;
 8007c64:	6448      	str	r0, [r1, #68]	; 0x44

		g_appStats.vibrInt = 0;
 8007c66:	648c      	str	r4, [r1, #72]	; 0x48

		lastStoreAverage = ulSecCount;
 8007c68:	601a      	str	r2, [r3, #0]
		int countAvr = 0;

		int sumMinDiff = -1;
		long tmpSecCount = 0;

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 8007c6a:	941b      	str	r4, [sp, #108]	; 0x6c

		uint32_t sumAvrFeq = 0;
		int countAvr = 0;

		int sumMinDiff = -1;
		long tmpSecCount = 0;
 8007c6c:	941c      	str	r4, [sp, #112]	; 0x70


		uint32_t sumAvrFeq = 0;
		int countAvr = 0;

		int sumMinDiff = -1;
 8007c6e:	9018      	str	r0, [sp, #96]	; 0x60
		unsigned long same3DVbr = 0;
		unsigned long same3DSecCount = 0;


		uint32_t sumAvrFeq = 0;
		int countAvr = 0;
 8007c70:	9422      	str	r4, [sp, #136]	; 0x88
		unsigned long same3Dy = 0;
		unsigned long same3DVbr = 0;
		unsigned long same3DSecCount = 0;


		uint32_t sumAvrFeq = 0;
 8007c72:	9423      	str	r4, [sp, #140]	; 0x8c

		int sumMinDiff = -1;
		long tmpSecCount = 0;

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
			if(avrFreq[i].secCount) {
 8007c74:	4b59      	ldr	r3, [pc, #356]	; (8007ddc <output_data+0x354>)
 8007c76:	18e3      	adds	r3, r4, r3
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	9219      	str	r2, [sp, #100]	; 0x64
 8007c7c:	2a00      	cmp	r2, #0
 8007c7e:	d039      	beq.n	8007cf4 <output_data+0x26c>
				sumAvrFeq += avrFreq[i].level;
 8007c80:	699a      	ldr	r2, [r3, #24]
 8007c82:	9f23      	ldr	r7, [sp, #140]	; 0x8c
				countAvr++;
 8007c84:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007c86:	2300      	movs	r3, #0
		int sumMinDiff = -1;
		long tmpSecCount = 0;

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
			if(avrFreq[i].secCount) {
				sumAvrFeq += avrFreq[i].level;
 8007c88:	18b9      	adds	r1, r7, r2
				countAvr++;
 8007c8a:	3601      	adds	r6, #1
		int sumMinDiff = -1;
		long tmpSecCount = 0;

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
			if(avrFreq[i].secCount) {
				sumAvrFeq += avrFreq[i].level;
 8007c8c:	921d      	str	r2, [sp, #116]	; 0x74
 8007c8e:	9123      	str	r1, [sp, #140]	; 0x8c
				countAvr++;
 8007c90:	9622      	str	r6, [sp, #136]	; 0x88

				//count min diff
				int tmpCountMinDiff = 0;
				int tmpSumMinDiff = 0;
				int sumDiff = 0;
				for(int j=0; j<MAX_NO_AVERAGE; j++) {
 8007c92:	1c1a      	adds	r2, r3, #0
				countAvr++;

				//count min diff
				int tmpCountMinDiff = 0;
				int tmpSumMinDiff = 0;
				int sumDiff = 0;
 8007c94:	9317      	str	r3, [sp, #92]	; 0x5c
				sumAvrFeq += avrFreq[i].level;
				countAvr++;

				//count min diff
				int tmpCountMinDiff = 0;
				int tmpSumMinDiff = 0;
 8007c96:	1c1e      	adds	r6, r3, #0
			if(avrFreq[i].secCount) {
				sumAvrFeq += avrFreq[i].level;
				countAvr++;

				//count min diff
				int tmpCountMinDiff = 0;
 8007c98:	1c19      	adds	r1, r3, #0
 8007c9a:	4684      	mov	ip, r0
				int tmpSumMinDiff = 0;
				int sumDiff = 0;
				for(int j=0; j<MAX_NO_AVERAGE; j++) {
					if(avrFreq[j].secCount && i != j) {
 8007c9c:	4f4f      	ldr	r7, [pc, #316]	; (8007ddc <output_data+0x354>)
 8007c9e:	19df      	adds	r7, r3, r7
 8007ca0:	6838      	ldr	r0, [r7, #0]
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d00d      	beq.n	8007cc2 <output_data+0x23a>
 8007ca6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007ca8:	4290      	cmp	r0, r2
 8007caa:	d00a      	beq.n	8007cc2 <output_data+0x23a>
						long diff = abs(avrFreq[i].level - avrFreq[j].level);
 8007cac:	69b8      	ldr	r0, [r7, #24]
 8007cae:	9f1d      	ldr	r7, [sp, #116]	; 0x74
						tmpSumMinDiff += avrFreq[j].level;
 8007cb0:	1836      	adds	r6, r6, r0
				int tmpCountMinDiff = 0;
				int tmpSumMinDiff = 0;
				int sumDiff = 0;
				for(int j=0; j<MAX_NO_AVERAGE; j++) {
					if(avrFreq[j].secCount && i != j) {
						long diff = abs(avrFreq[i].level - avrFreq[j].level);
 8007cb2:	1a38      	subs	r0, r7, r0
 8007cb4:	17c7      	asrs	r7, r0, #31
 8007cb6:	19c0      	adds	r0, r0, r7
 8007cb8:	4078      	eors	r0, r7
						tmpSumMinDiff += avrFreq[j].level;
						sumDiff += diff;
 8007cba:	9f17      	ldr	r7, [sp, #92]	; 0x5c
						tmpCountMinDiff++;
 8007cbc:	3101      	adds	r1, #1
				int sumDiff = 0;
				for(int j=0; j<MAX_NO_AVERAGE; j++) {
					if(avrFreq[j].secCount && i != j) {
						long diff = abs(avrFreq[i].level - avrFreq[j].level);
						tmpSumMinDiff += avrFreq[j].level;
						sumDiff += diff;
 8007cbe:	183f      	adds	r7, r7, r0
 8007cc0:	9717      	str	r7, [sp, #92]	; 0x5c

				//count min diff
				int tmpCountMinDiff = 0;
				int tmpSumMinDiff = 0;
				int sumDiff = 0;
				for(int j=0; j<MAX_NO_AVERAGE; j++) {
 8007cc2:	3201      	adds	r2, #1
 8007cc4:	331c      	adds	r3, #28
 8007cc6:	2a0f      	cmp	r2, #15
 8007cc8:	d1e8      	bne.n	8007c9c <output_data+0x214>
 8007cca:	4660      	mov	r0, ip
						tmpCountMinDiff++;
					}
				}

				//average
				if(tmpCountMinDiff && (sumMinDiff == -1 || (sumDiff < sumMinDiff && avrFreq[i].secCount > tmpSecCount))) {
 8007ccc:	2900      	cmp	r1, #0
 8007cce:	d011      	beq.n	8007cf4 <output_data+0x26c>
 8007cd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	d007      	beq.n	8007ce6 <output_data+0x25e>
 8007cd6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8007cd8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007cda:	4297      	cmp	r7, r2
 8007cdc:	da0a      	bge.n	8007cf4 <output_data+0x26c>
 8007cde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ce0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d906      	bls.n	8007cf4 <output_data+0x26c>
					tmpSecCount = avrFreq[i].secCount;
 8007ce6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007ce8:	901c      	str	r0, [sp, #112]	; 0x70
					sumMinDiff = sumDiff;
					g_appStats.fuelLevelMinDiff = (tmpSumMinDiff/tmpCountMinDiff);
 8007cea:	1c30      	adds	r0, r6, #0
 8007cec:	f7fb fa7a 	bl	80031e4 <__aeabi_idiv>
 8007cf0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007cf2:	9618      	str	r6, [sp, #96]	; 0x60
		int countAvr = 0;

		int sumMinDiff = -1;
		long tmpSecCount = 0;

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 8007cf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cf6:	27d2      	movs	r7, #210	; 0xd2
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	341c      	adds	r4, #28
 8007cfc:	931b      	str	r3, [sp, #108]	; 0x6c
 8007cfe:	0079      	lsls	r1, r7, #1
 8007d00:	428c      	cmp	r4, r1
 8007d02:	d1b7      	bne.n	8007c74 <output_data+0x1ec>
 8007d04:	4e2d      	ldr	r6, [pc, #180]	; (8007dbc <output_data+0x334>)
		uint32_t minDiffFeq3D = 0;
		int countMinDiff3D = 0;

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
			uint32_t diffTime = (uint32_t)(ulSecCount - avrFreq3D[i].secCount);
			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
 8007d06:	492f      	ldr	r1, [pc, #188]	; (8007dc4 <output_data+0x33c>)
		int countAvr = 0;

		int sumMinDiff = -1;
		long tmpSecCount = 0;

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 8007d08:	6470      	str	r0, [r6, #68]	; 0x44
		uint32_t minDiffFeq3D = 0;
		int countMinDiff3D = 0;

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
			uint32_t diffTime = (uint32_t)(ulSecCount - avrFreq3D[i].secCount);
			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
 8007d0a:	8a8a      	ldrh	r2, [r1, #20]
 8007d0c:	203c      	movs	r0, #60	; 0x3c
 8007d0e:	4350      	muls	r0, r2
 8007d10:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8007d12:	2300      	movs	r3, #0
 8007d14:	9025      	str	r0, [sp, #148]	; 0x94
 8007d16:	9426      	str	r4, [sp, #152]	; 0x98
 8007d18:	1c19      	adds	r1, r3, #0
 8007d1a:	9329      	str	r3, [sp, #164]	; 0xa4
 8007d1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d1e:	9324      	str	r3, [sp, #144]	; 0x90
 8007d20:	9318      	str	r3, [sp, #96]	; 0x60
 8007d22:	9328      	str	r3, [sp, #160]	; 0xa0
 8007d24:	9327      	str	r3, [sp, #156]	; 0x9c
 8007d26:	1c18      	adds	r0, r3, #0
 8007d28:	9321      	str	r3, [sp, #132]	; 0x84
 8007d2a:	9320      	str	r3, [sp, #128]	; 0x80
 8007d2c:	931d      	str	r3, [sp, #116]	; 0x74
 8007d2e:	931c      	str	r3, [sp, #112]	; 0x70
 8007d30:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d32:	9319      	str	r3, [sp, #100]	; 0x64
 8007d34:	e0d3      	b.n	8007ede <output_data+0x456>

		uint32_t minDiffFeq3D = 0;
		int countMinDiff3D = 0;

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
			uint32_t diffTime = (uint32_t)(ulSecCount - avrFreq3D[i].secCount);
 8007d36:	4c2b      	ldr	r4, [pc, #172]	; (8007de4 <output_data+0x35c>)
 8007d38:	4f1e      	ldr	r7, [pc, #120]	; (8007db4 <output_data+0x32c>)
 8007d3a:	191e      	adds	r6, r3, r4
 8007d3c:	6832      	ldr	r2, [r6, #0]
 8007d3e:	683f      	ldr	r7, [r7, #0]
			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
 8007d40:	2a00      	cmp	r2, #0
 8007d42:	d100      	bne.n	8007d46 <output_data+0x2be>
 8007d44:	e086      	b.n	8007e54 <output_data+0x3cc>
 8007d46:	9c25      	ldr	r4, [sp, #148]	; 0x94

		uint32_t minDiffFeq3D = 0;
		int countMinDiff3D = 0;

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
			uint32_t diffTime = (uint32_t)(ulSecCount - avrFreq3D[i].secCount);
 8007d48:	1abf      	subs	r7, r7, r2
			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
 8007d4a:	42a7      	cmp	r7, r4
 8007d4c:	d900      	bls.n	8007d50 <output_data+0x2c8>
 8007d4e:	e081      	b.n	8007e54 <output_data+0x3cc>
				if(start == 0) {
 8007d50:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	d10e      	bne.n	8007d74 <output_data+0x2ec>
					min3Dx = abs(avrFreq3D[i].x);
 8007d56:	68f4      	ldr	r4, [r6, #12]
					min3Dy = abs(avrFreq3D[i].y);
					min3DVbr = avrFreq3D[i].vibration;
					ulSecCountMax = avrFreq3D[i].secCount;
 8007d58:	9218      	str	r2, [sp, #96]	; 0x60

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
			uint32_t diffTime = (uint32_t)(ulSecCount - avrFreq3D[i].secCount);
			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
				if(start == 0) {
					min3Dx = abs(avrFreq3D[i].x);
 8007d5a:	17e7      	asrs	r7, r4, #31
 8007d5c:	19e4      	adds	r4, r4, r7
 8007d5e:	407c      	eors	r4, r7
 8007d60:	9419      	str	r4, [sp, #100]	; 0x64
					min3Dy = abs(avrFreq3D[i].y);
 8007d62:	6934      	ldr	r4, [r6, #16]
 8007d64:	17e7      	asrs	r7, r4, #31
 8007d66:	19e4      	adds	r4, r4, r7
 8007d68:	407c      	eors	r4, r7
					min3DVbr = avrFreq3D[i].vibration;
 8007d6a:	68b7      	ldr	r7, [r6, #8]
					ulSecCountMax = avrFreq3D[i].secCount;
					start++;
 8007d6c:	2601      	movs	r6, #1
		for(int i=0; i<MAX_NO_AVERAGE; i++) {
			uint32_t diffTime = (uint32_t)(ulSecCount - avrFreq3D[i].secCount);
			if(avrFreq3D[i].secCount &&  diffTime <= (g_config.timeout3D*60)) {
				if(start == 0) {
					min3Dx = abs(avrFreq3D[i].x);
					min3Dy = abs(avrFreq3D[i].y);
 8007d6e:	941b      	str	r4, [sp, #108]	; 0x6c
					min3DVbr = avrFreq3D[i].vibration;
 8007d70:	971c      	str	r7, [sp, #112]	; 0x70
					ulSecCountMax = avrFreq3D[i].secCount;
					start++;
 8007d72:	9627      	str	r6, [sp, #156]	; 0x9c
			g_appStats.lastLevelSecCount = ulSecCount;
		}
	}
}

void output_data() {
 8007d74:	4c1b      	ldr	r4, [pc, #108]	; (8007de4 <output_data+0x35c>)
 8007d76:	18e4      	adds	r4, r4, r3
					min3DVbr = avrFreq3D[i].vibration;
					ulSecCountMax = avrFreq3D[i].secCount;
					start++;
				}

				if(abs(avrFreq3D[i].x) <= min3Dx && abs(avrFreq3D[i].y) <= min3Dy && avrFreq3D[i].vibration <= min3DVbr) {
 8007d78:	68e7      	ldr	r7, [r4, #12]
 8007d7a:	17fe      	asrs	r6, r7, #31
 8007d7c:	19bf      	adds	r7, r7, r6
 8007d7e:	4077      	eors	r7, r6
 8007d80:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007d82:	972b      	str	r7, [sp, #172]	; 0xac
 8007d84:	42b7      	cmp	r7, r6
 8007d86:	d834      	bhi.n	8007df2 <output_data+0x36a>
 8007d88:	6927      	ldr	r7, [r4, #16]
 8007d8a:	17fe      	asrs	r6, r7, #31
 8007d8c:	19bf      	adds	r7, r7, r6
 8007d8e:	4077      	eors	r7, r6
 8007d90:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007d92:	972a      	str	r7, [sp, #168]	; 0xa8
 8007d94:	42b7      	cmp	r7, r6
 8007d96:	d82c      	bhi.n	8007df2 <output_data+0x36a>
 8007d98:	68a7      	ldr	r7, [r4, #8]
 8007d9a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8007d9c:	42b7      	cmp	r7, r6
 8007d9e:	d828      	bhi.n	8007df2 <output_data+0x36a>
					min3Dx = abs(avrFreq3D[i].x);
					min3Dy = abs(avrFreq3D[i].y);
					min3DVbr = avrFreq3D[i].vibration;
					if(avrFreq3D[i].secCount >= ulSecCountMax) {
 8007da0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8007da2:	42b2      	cmp	r2, r6
 8007da4:	d320      	bcc.n	8007de8 <output_data+0x360>
						ulSecCountMax = avrFreq3D[i].secCount;
 8007da6:	9218      	str	r2, [sp, #96]	; 0x60
 8007da8:	971c      	str	r7, [sp, #112]	; 0x70
 8007daa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8007dac:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8007dae:	9219      	str	r2, [sp, #100]	; 0x64
 8007db0:	971b      	str	r7, [sp, #108]	; 0x6c
 8007db2:	e01e      	b.n	8007df2 <output_data+0x36a>
 8007db4:	20000880 	.word	0x20000880
 8007db8:	2000088c 	.word	0x2000088c
 8007dbc:	200009a8 	.word	0x200009a8
 8007dc0:	20000870 	.word	0x20000870
 8007dc4:	20000a14 	.word	0x20000a14
 8007dc8:	20001064 	.word	0x20001064
 8007dcc:	20000858 	.word	0x20000858
 8007dd0:	20000b2c 	.word	0x20000b2c
 8007dd4:	20000eb0 	.word	0x20000eb0
 8007dd8:	20000878 	.word	0x20000878
 8007ddc:	20000d00 	.word	0x20000d00
 8007de0:	20000888 	.word	0x20000888
 8007de4:	20000b4c 	.word	0x20000b4c

				if(abs(avrFreq3D[i].x) <= min3Dx && abs(avrFreq3D[i].y) <= min3Dy && avrFreq3D[i].vibration <= min3DVbr) {
					min3Dx = abs(avrFreq3D[i].x);
					min3Dy = abs(avrFreq3D[i].y);
					min3DVbr = avrFreq3D[i].vibration;
					if(avrFreq3D[i].secCount >= ulSecCountMax) {
 8007de8:	971c      	str	r7, [sp, #112]	; 0x70
 8007dea:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8007dec:	9f2b      	ldr	r7, [sp, #172]	; 0xac
 8007dee:	961b      	str	r6, [sp, #108]	; 0x6c
 8007df0:	9719      	str	r7, [sp, #100]	; 0x64
						ulSecCountMax = avrFreq3D[i].secCount;
					}
				}

				//sum to calculate average
				sumFeq3D += avrFreq3D[i].level;
 8007df2:	69a7      	ldr	r7, [r4, #24]
 8007df4:	9a24      	ldr	r2, [sp, #144]	; 0x90
				count3D++;
 8007df6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
						ulSecCountMax = avrFreq3D[i].secCount;
					}
				}

				//sum to calculate average
				sumFeq3D += avrFreq3D[i].level;
 8007df8:	19d6      	adds	r6, r2, r7
				count3D++;
 8007dfa:	3401      	adds	r4, #1
 8007dfc:	2200      	movs	r2, #0
						ulSecCountMax = avrFreq3D[i].secCount;
					}
				}

				//sum to calculate average
				sumFeq3D += avrFreq3D[i].level;
 8007dfe:	9624      	str	r6, [sp, #144]	; 0x90
				count3D++;
 8007e00:	9417      	str	r4, [sp, #92]	; 0x5c
						ulSecCountMax = avrFreq3D[i].secCount;
					}
				}

				//sum to calculate average
				sumFeq3D += avrFreq3D[i].level;
 8007e02:	972a      	str	r7, [sp, #168]	; 0xa8
				count3D++;

				//check count
				uint32_t tmpMinDiffFeq3D = 0;
				int tmpCount3DMin = 0;
 8007e04:	1c14      	adds	r4, r2, #0
				//sum to calculate average
				sumFeq3D += avrFreq3D[i].level;
				count3D++;

				//check count
				uint32_t tmpMinDiffFeq3D = 0;
 8007e06:	1c16      	adds	r6, r2, #0
 8007e08:	9115      	str	r1, [sp, #84]	; 0x54
 8007e0a:	469c      	mov	ip, r3
				int tmpCount3DMin = 0;
				for(int j=0; j<MAX_NO_AVERAGE; j++) {
					uint32_t diffTime1 = (uint32_t)(ulSecCount - avrFreq3D[j].secCount);
 8007e0c:	49af      	ldr	r1, [pc, #700]	; (80080cc <output_data+0x644>)
 8007e0e:	4bb0      	ldr	r3, [pc, #704]	; (80080d0 <output_data+0x648>)
 8007e10:	1857      	adds	r7, r2, r1
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	932b      	str	r3, [sp, #172]	; 0xac
 8007e18:	9116      	str	r1, [sp, #88]	; 0x58
					if(avrFreq3D[j].secCount &&  diffTime1 <= (g_config.timeout3D*60)) {
 8007e1a:	2900      	cmp	r1, #0
 8007e1c:	d00f      	beq.n	8007e3e <output_data+0x3b6>

				//check count
				uint32_t tmpMinDiffFeq3D = 0;
				int tmpCount3DMin = 0;
				for(int j=0; j<MAX_NO_AVERAGE; j++) {
					uint32_t diffTime1 = (uint32_t)(ulSecCount - avrFreq3D[j].secCount);
 8007e1e:	1a5b      	subs	r3, r3, r1
					if(avrFreq3D[j].secCount &&  diffTime1 <= (g_config.timeout3D*60)) {
 8007e20:	9925      	ldr	r1, [sp, #148]	; 0x94

				//check count
				uint32_t tmpMinDiffFeq3D = 0;
				int tmpCount3DMin = 0;
				for(int j=0; j<MAX_NO_AVERAGE; j++) {
					uint32_t diffTime1 = (uint32_t)(ulSecCount - avrFreq3D[j].secCount);
 8007e22:	932b      	str	r3, [sp, #172]	; 0xac
					if(avrFreq3D[j].secCount &&  diffTime1 <= (g_config.timeout3D*60)) {
 8007e24:	428b      	cmp	r3, r1
 8007e26:	d80a      	bhi.n	8007e3e <output_data+0x3b6>
						int diff = abs(avrFreq3D[i].level - avrFreq3D[j].level);
 8007e28:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	1acf      	subs	r7, r1, r3
 8007e2e:	17f9      	asrs	r1, r7, #31
 8007e30:	187f      	adds	r7, r7, r1
 8007e32:	404f      	eors	r7, r1
 8007e34:	972b      	str	r7, [sp, #172]	; 0xac

						if(diff < 10) {
 8007e36:	2f09      	cmp	r7, #9
 8007e38:	dc01      	bgt.n	8007e3e <output_data+0x3b6>
							tmpMinDiffFeq3D += avrFreq3D[j].level;
 8007e3a:	18f6      	adds	r6, r6, r3
							tmpCount3DMin++;
 8007e3c:	3401      	adds	r4, #1
				count3D++;

				//check count
				uint32_t tmpMinDiffFeq3D = 0;
				int tmpCount3DMin = 0;
				for(int j=0; j<MAX_NO_AVERAGE; j++) {
 8007e3e:	27d2      	movs	r7, #210	; 0xd2
					if(avrFreq3D[j].secCount &&  diffTime1 <= (g_config.timeout3D*60)) {
						int diff = abs(avrFreq3D[i].level - avrFreq3D[j].level);

						if(diff < 10) {
							tmpMinDiffFeq3D += avrFreq3D[j].level;
							tmpCount3DMin++;
 8007e40:	321c      	adds	r2, #28
				count3D++;

				//check count
				uint32_t tmpMinDiffFeq3D = 0;
				int tmpCount3DMin = 0;
				for(int j=0; j<MAX_NO_AVERAGE; j++) {
 8007e42:	007b      	lsls	r3, r7, #1
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d1e1      	bne.n	8007e0c <output_data+0x384>
 8007e48:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007e4a:	4663      	mov	r3, ip
						}
					}
				}

				//average
				if(tmpCount3DMin > countMinDiff3D) {
 8007e4c:	428c      	cmp	r4, r1
 8007e4e:	dd01      	ble.n	8007e54 <output_data+0x3cc>
 8007e50:	1c21      	adds	r1, r4, #0
 8007e52:	9629      	str	r6, [sp, #164]	; 0xa4
					countMinDiff3D = tmpCount3DMin;
				}
			}

			//check same 3d
			uint32_t diffTime2 = (uint32_t)(ulSecCount - same3DFreq[i].secCount);
 8007e54:	4e9e      	ldr	r6, [pc, #632]	; (80080d0 <output_data+0x648>)
 8007e56:	4c9f      	ldr	r4, [pc, #636]	; (80080d4 <output_data+0x64c>)
 8007e58:	6837      	ldr	r7, [r6, #0]
 8007e5a:	191e      	adds	r6, r3, r4
 8007e5c:	6832      	ldr	r2, [r6, #0]
 8007e5e:	46a4      	mov	ip, r4
			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
 8007e60:	2a00      	cmp	r2, #0
 8007e62:	d03b      	beq.n	8007edc <output_data+0x454>
 8007e64:	9c25      	ldr	r4, [sp, #148]	; 0x94
					countMinDiff3D = tmpCount3DMin;
				}
			}

			//check same 3d
			uint32_t diffTime2 = (uint32_t)(ulSecCount - same3DFreq[i].secCount);
 8007e66:	1abf      	subs	r7, r7, r2
			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
 8007e68:	42a7      	cmp	r7, r4
 8007e6a:	d837      	bhi.n	8007edc <output_data+0x454>
				if(startSame == 0) {
 8007e6c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8007e6e:	2c00      	cmp	r4, #0
 8007e70:	d10e      	bne.n	8007e90 <output_data+0x408>
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
					same3Dx = abs(same3DFreq[i].x);
 8007e72:	68f0      	ldr	r0, [r6, #12]

			//check same 3d
			uint32_t diffTime2 = (uint32_t)(ulSecCount - same3DFreq[i].secCount);
			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
				if(startSame == 0) {
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 8007e74:	69b4      	ldr	r4, [r6, #24]
					same3Dx = abs(same3DFreq[i].x);
 8007e76:	17c7      	asrs	r7, r0, #31

			//check same 3d
			uint32_t diffTime2 = (uint32_t)(ulSecCount - same3DFreq[i].secCount);
			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
				if(startSame == 0) {
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 8007e78:	9426      	str	r4, [sp, #152]	; 0x98
					same3Dx = abs(same3DFreq[i].x);
 8007e7a:	19c4      	adds	r4, r0, r7
					same3Dy = abs(same3DFreq[i].y);
 8007e7c:	6930      	ldr	r0, [r6, #16]
			//check same 3d
			uint32_t diffTime2 = (uint32_t)(ulSecCount - same3DFreq[i].secCount);
			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
				if(startSame == 0) {
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
					same3Dx = abs(same3DFreq[i].x);
 8007e7e:	407c      	eors	r4, r7
					same3Dy = abs(same3DFreq[i].y);
 8007e80:	17c7      	asrs	r7, r0, #31
			//check same 3d
			uint32_t diffTime2 = (uint32_t)(ulSecCount - same3DFreq[i].secCount);
			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
				if(startSame == 0) {
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
					same3Dx = abs(same3DFreq[i].x);
 8007e82:	941d      	str	r4, [sp, #116]	; 0x74
					same3Dy = abs(same3DFreq[i].y);
 8007e84:	19c4      	adds	r4, r0, r7
					same3DVbr = same3DFreq[i].vibration;
 8007e86:	68b0      	ldr	r0, [r6, #8]
			uint32_t diffTime2 = (uint32_t)(ulSecCount - same3DFreq[i].secCount);
			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
				if(startSame == 0) {
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
					same3Dx = abs(same3DFreq[i].x);
					same3Dy = abs(same3DFreq[i].y);
 8007e88:	407c      	eors	r4, r7
					same3DVbr = same3DFreq[i].vibration;
 8007e8a:	9021      	str	r0, [sp, #132]	; 0x84
			uint32_t diffTime2 = (uint32_t)(ulSecCount - same3DFreq[i].secCount);
			if(same3DFreq[i].secCount && diffTime2 <= (g_config.timeout3D*60)) {
				if(startSame == 0) {
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
					same3Dx = abs(same3DFreq[i].x);
					same3Dy = abs(same3DFreq[i].y);
 8007e8c:	9420      	str	r4, [sp, #128]	; 0x80
					same3DVbr = same3DFreq[i].vibration;
 8007e8e:	1c10      	adds	r0, r2, #0
			g_appStats.lastLevelSecCount = ulSecCount;
		}
	}
}

void output_data() {
 8007e90:	4664      	mov	r4, ip
 8007e92:	18e4      	adds	r4, r4, r3
					same3DVbr = same3DFreq[i].vibration;
					same3DSecCount = same3DFreq[i].secCount;
					startSame++;
				}

				if(abs(same3DFreq[i].x) <= same3Dx && abs(same3DFreq[i].y) <= same3Dy && same3DFreq[i].vibration <= same3DVbr && same3DFreq[i].secCount >= same3DSecCount) {
 8007e94:	68e7      	ldr	r7, [r4, #12]
 8007e96:	17fe      	asrs	r6, r7, #31
 8007e98:	19bf      	adds	r7, r7, r6
 8007e9a:	4077      	eors	r7, r6
 8007e9c:	972b      	str	r7, [sp, #172]	; 0xac
 8007e9e:	2601      	movs	r6, #1
 8007ea0:	9628      	str	r6, [sp, #160]	; 0xa0
 8007ea2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8007ea4:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8007ea6:	42be      	cmp	r6, r7
 8007ea8:	d818      	bhi.n	8007edc <output_data+0x454>
 8007eaa:	6926      	ldr	r6, [r4, #16]
 8007eac:	17f7      	asrs	r7, r6, #31
 8007eae:	19f6      	adds	r6, r6, r7
 8007eb0:	407e      	eors	r6, r7
 8007eb2:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8007eb4:	962a      	str	r6, [sp, #168]	; 0xa8
 8007eb6:	42be      	cmp	r6, r7
 8007eb8:	d810      	bhi.n	8007edc <output_data+0x454>
 8007eba:	68a6      	ldr	r6, [r4, #8]
 8007ebc:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8007ebe:	46b4      	mov	ip, r6
 8007ec0:	42be      	cmp	r6, r7
 8007ec2:	d80b      	bhi.n	8007edc <output_data+0x454>
 8007ec4:	4282      	cmp	r2, r0
 8007ec6:	d309      	bcc.n	8007edc <output_data+0x454>
					g_appStats.fuelLevel3DSame = same3DFreq[i].level;
 8007ec8:	69a4      	ldr	r4, [r4, #24]
 8007eca:	9426      	str	r4, [sp, #152]	; 0x98
					same3Dx = abs(same3DFreq[i].x);
					same3Dy = abs(same3DFreq[i].y);
					same3DVbr = same3DFreq[i].vibration;

					if(same3DFreq[i].secCount > same3DSecCount) {
 8007ecc:	d900      	bls.n	8007ed0 <output_data+0x448>
 8007ece:	1c10      	adds	r0, r2, #0
 8007ed0:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8007ed2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8007ed4:	4664      	mov	r4, ip
 8007ed6:	9421      	str	r4, [sp, #132]	; 0x84
 8007ed8:	9720      	str	r7, [sp, #128]	; 0x80
 8007eda:	921d      	str	r2, [sp, #116]	; 0x74
 8007edc:	331c      	adds	r3, #28
		int count3D = 0;

		uint32_t minDiffFeq3D = 0;
		int countMinDiff3D = 0;

		for(int i=0; i<MAX_NO_AVERAGE; i++) {
 8007ede:	27d2      	movs	r7, #210	; 0xd2
 8007ee0:	007a      	lsls	r2, r7, #1
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d000      	beq.n	8007ee8 <output_data+0x460>
 8007ee6:	e726      	b.n	8007d36 <output_data+0x2ae>
 8007ee8:	4c7b      	ldr	r4, [pc, #492]	; (80080d8 <output_data+0x650>)
 8007eea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007eec:	6423      	str	r3, [r4, #64]	; 0x40
					}
				}
			}
		}

		if(countMinDiff3D) {
 8007eee:	2900      	cmp	r1, #0
 8007ef0:	d003      	beq.n	8007efa <output_data+0x472>
			g_appStats.fuelLevel3DMin = (minDiffFeq3D/countMinDiff3D);
 8007ef2:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8007ef4:	f7fb f928 	bl	8003148 <__aeabi_uidiv>
 8007ef8:	63e0      	str	r0, [r4, #60]	; 0x3c
		}

		if(countAvr > 0) {
 8007efa:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007efc:	2e00      	cmp	r6, #0
 8007efe:	d004      	beq.n	8007f0a <output_data+0x482>
			g_appStats.fuelLevelAvg = (sumAvrFeq/countAvr);
 8007f00:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8007f02:	1c31      	adds	r1, r6, #0
 8007f04:	f7fb f920 	bl	8003148 <__aeabi_uidiv>
 8007f08:	6360      	str	r0, [r4, #52]	; 0x34
		}

		if(count3D) {
 8007f0a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8007f0c:	2f00      	cmp	r7, #0
 8007f0e:	d004      	beq.n	8007f1a <output_data+0x492>
			g_appStats.fuelLevel3D = (sumFeq3D/count3D);
 8007f10:	9824      	ldr	r0, [sp, #144]	; 0x90
 8007f12:	1c39      	adds	r1, r7, #0
 8007f14:	f7fb f918 	bl	8003148 <__aeabi_uidiv>
 8007f18:	63a0      	str	r0, [r4, #56]	; 0x38
		}

		int diff3D = -1;

		if(ulSecCountMax) {
 8007f1a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8007f1c:	2c00      	cmp	r4, #0
 8007f1e:	d003      	beq.n	8007f28 <output_data+0x4a0>
			diff3D = (ulSecCount - ulSecCountMax);
 8007f20:	486b      	ldr	r0, [pc, #428]	; (80080d0 <output_data+0x648>)
 8007f22:	6801      	ldr	r1, [r0, #0]
 8007f24:	1b0b      	subs	r3, r1, r4
 8007f26:	e001      	b.n	8007f2c <output_data+0x4a4>

		if(count3D) {
			g_appStats.fuelLevel3D = (sumFeq3D/count3D);
		}

		int diff3D = -1;
 8007f28:	2601      	movs	r6, #1
 8007f2a:	4273      	negs	r3, r6
			diff3D = (ulSecCount - ulSecCountMax);
		}

		int step = 0;

		if(g_config.filterMode == AVERAGE_MODE) {
 8007f2c:	4c6b      	ldr	r4, [pc, #428]	; (80080dc <output_data+0x654>)

		if(count3D) {
			g_appStats.fuelLevel3D = (sumFeq3D/count3D);
		}

		int diff3D = -1;
 8007f2e:	931b      	str	r3, [sp, #108]	; 0x6c
			diff3D = (ulSecCount - ulSecCountMax);
		}

		int step = 0;

		if(g_config.filterMode == AVERAGE_MODE) {
 8007f30:	7de3      	ldrb	r3, [r4, #23]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d110      	bne.n	8007f58 <output_data+0x4d0>
			step = 1;

			if(g_appStats.fuelLevel3DMin != -1) {
 8007f36:	4a68      	ldr	r2, [pc, #416]	; (80080d8 <output_data+0x650>)
 8007f38:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007f3a:	1c4e      	adds	r6, r1, #1
 8007f3c:	d000      	beq.n	8007f40 <output_data+0x4b8>
 8007f3e:	e0a7      	b.n	8008090 <output_data+0x608>
				fuelLevel = g_appStats.fuelLevel3DMin;
				step = 11;
			} else if(g_appStats.fuelLevel3D != -1) {
 8007f40:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8007f42:	1c4f      	adds	r7, r1, #1
 8007f44:	d000      	beq.n	8007f48 <output_data+0x4c0>
 8007f46:	e0a6      	b.n	8008096 <output_data+0x60e>
				fuelLevel = g_appStats.fuelLevel3D;
				step = 12;
			} else if(g_appStats.fuelLevelAvg != -1) {
 8007f48:	6b52      	ldr	r2, [r2, #52]	; 0x34
		}

		int step = 0;

		if(g_config.filterMode == AVERAGE_MODE) {
			step = 1;
 8007f4a:	1c1c      	adds	r4, r3, #0
				fuelLevel = g_appStats.fuelLevel3DMin;
				step = 11;
			} else if(g_appStats.fuelLevel3D != -1) {
				fuelLevel = g_appStats.fuelLevel3D;
				step = 12;
			} else if(g_appStats.fuelLevelAvg != -1) {
 8007f4c:	1c50      	adds	r0, r2, #1
 8007f4e:	d100      	bne.n	8007f52 <output_data+0x4ca>
 8007f50:	e0ca      	b.n	80080e8 <output_data+0x660>
 8007f52:	1c15      	adds	r5, r2, #0
				fuelLevel = g_appStats.fuelLevelAvg;
				step = 13;
 8007f54:	240d      	movs	r4, #13
 8007f56:	e0c7      	b.n	80080e8 <output_data+0x660>
			}
		} else if(g_config.filterMode == COMPARE_MODE) {
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d160      	bne.n	800801e <output_data+0x596>
			step = 2;

			if(g_appStats.fuelLevel3DSame != -1) {
 8007f5c:	4a5e      	ldr	r2, [pc, #376]	; (80080d8 <output_data+0x650>)
 8007f5e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8007f60:	1c4c      	adds	r4, r1, #1
 8007f62:	d10c      	bne.n	8007f7e <output_data+0x4f6>
				step = 21;
				fuelLevel = g_appStats.fuelLevel3DSame;
			} else if(g_appStats.fuelLevel3DMin != -1) {
 8007f64:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8007f66:	1c46      	adds	r6, r0, #1
 8007f68:	d10c      	bne.n	8007f84 <output_data+0x4fc>
				step = 22;
				fuelLevel = g_appStats.fuelLevel3DMin;
			} else if(g_appStats.fuelLevel3D != -1) {
 8007f6a:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8007f6c:	1c47      	adds	r7, r0, #1
 8007f6e:	d10c      	bne.n	8007f8a <output_data+0x502>
				step = 23;
				fuelLevel = g_appStats.fuelLevel3D;
			} else if(g_appStats.fuelLevelAvg != -1) {
 8007f70:	6b50      	ldr	r0, [r2, #52]	; 0x34
			} else if(g_appStats.fuelLevelAvg != -1) {
				fuelLevel = g_appStats.fuelLevelAvg;
				step = 13;
			}
		} else if(g_config.filterMode == COMPARE_MODE) {
			step = 2;
 8007f72:	1c1c      	adds	r4, r3, #0
				step = 22;
				fuelLevel = g_appStats.fuelLevel3DMin;
			} else if(g_appStats.fuelLevel3D != -1) {
				step = 23;
				fuelLevel = g_appStats.fuelLevel3D;
			} else if(g_appStats.fuelLevelAvg != -1) {
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d00a      	beq.n	8007f8e <output_data+0x506>
 8007f78:	1c05      	adds	r5, r0, #0
				step = 24;
 8007f7a:	2418      	movs	r4, #24
 8007f7c:	e007      	b.n	8007f8e <output_data+0x506>
				step = 13;
			}
		} else if(g_config.filterMode == COMPARE_MODE) {
			step = 2;

			if(g_appStats.fuelLevel3DSame != -1) {
 8007f7e:	1c0d      	adds	r5, r1, #0
				step = 21;
 8007f80:	2415      	movs	r4, #21
 8007f82:	e004      	b.n	8007f8e <output_data+0x506>
				fuelLevel = g_appStats.fuelLevel3DSame;
			} else if(g_appStats.fuelLevel3DMin != -1) {
 8007f84:	1c05      	adds	r5, r0, #0
				step = 22;
 8007f86:	2416      	movs	r4, #22
 8007f88:	e001      	b.n	8007f8e <output_data+0x506>
				fuelLevel = g_appStats.fuelLevel3DMin;
			} else if(g_appStats.fuelLevel3D != -1) {
 8007f8a:	1c05      	adds	r5, r0, #0
				step = 23;
 8007f8c:	2417      	movs	r4, #23

			for(int i=0; i<COMPARE_LEVELS; i++) {
				compare_levels[i] = -1;
			}

			compare_levels[0] = g_appStats.fuelLevel;
 8007f8e:	4f54      	ldr	r7, [pc, #336]	; (80080e0 <output_data+0x658>)
 8007f90:	6a90      	ldr	r0, [r2, #40]	; 0x28
			compare_levels[1] = g_appStats.fuelLevelAvg;
 8007f92:	6b53      	ldr	r3, [r2, #52]	; 0x34
			compare_levels[2] = g_appStats.fuelLevel3D;
 8007f94:	6b96      	ldr	r6, [r2, #56]	; 0x38

			for(int i=0; i<COMPARE_LEVELS; i++) {
				compare_levels[i] = -1;
			}

			compare_levels[0] = g_appStats.fuelLevel;
 8007f96:	6038      	str	r0, [r7, #0]
			compare_levels[1] = g_appStats.fuelLevelAvg;
 8007f98:	607b      	str	r3, [r7, #4]
			compare_levels[2] = g_appStats.fuelLevel3D;
			compare_levels[3] = g_appStats.fuelLevel3DMin;
 8007f9a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
			compare_levels[4] = g_appStats.fuelLevel3DSame;
 8007f9c:	6139      	str	r1, [r7, #16]
			compare_levels[5] = g_appStats.fuelLevelMinDiff;

			int minDiff = -1;
			long minDiffLevel = -1;
 8007f9e:	2301      	movs	r3, #1
			compare_levels[0] = g_appStats.fuelLevel;
			compare_levels[1] = g_appStats.fuelLevelAvg;
			compare_levels[2] = g_appStats.fuelLevel3D;
			compare_levels[3] = g_appStats.fuelLevel3DMin;
			compare_levels[4] = g_appStats.fuelLevel3DSame;
			compare_levels[5] = g_appStats.fuelLevelMinDiff;
 8007fa0:	6c51      	ldr	r1, [r2, #68]	; 0x44
				compare_levels[i] = -1;
			}

			compare_levels[0] = g_appStats.fuelLevel;
			compare_levels[1] = g_appStats.fuelLevelAvg;
			compare_levels[2] = g_appStats.fuelLevel3D;
 8007fa2:	60be      	str	r6, [r7, #8]
			compare_levels[3] = g_appStats.fuelLevel3DMin;
			compare_levels[4] = g_appStats.fuelLevel3DSame;
			compare_levels[5] = g_appStats.fuelLevelMinDiff;

			int minDiff = -1;
			long minDiffLevel = -1;
 8007fa4:	425a      	negs	r2, r3
			int countDiff = 0;

			for(int i=0; i<COMPARE_LEVELS; i++) {
 8007fa6:	2600      	movs	r6, #0
			}

			compare_levels[0] = g_appStats.fuelLevel;
			compare_levels[1] = g_appStats.fuelLevelAvg;
			compare_levels[2] = g_appStats.fuelLevel3D;
			compare_levels[3] = g_appStats.fuelLevel3DMin;
 8007fa8:	60f8      	str	r0, [r7, #12]
			compare_levels[4] = g_appStats.fuelLevel3DSame;
			compare_levels[5] = g_appStats.fuelLevelMinDiff;
 8007faa:	6179      	str	r1, [r7, #20]
 8007fac:	9720      	str	r7, [sp, #128]	; 0x80

			int minDiff = -1;
			long minDiffLevel = -1;
 8007fae:	9218      	str	r2, [sp, #96]	; 0x60
			int countDiff = 0;
 8007fb0:	1c37      	adds	r7, r6, #0
			compare_levels[2] = g_appStats.fuelLevel3D;
			compare_levels[3] = g_appStats.fuelLevel3DMin;
			compare_levels[4] = g_appStats.fuelLevel3DSame;
			compare_levels[5] = g_appStats.fuelLevelMinDiff;

			int minDiff = -1;
 8007fb2:	921c      	str	r2, [sp, #112]	; 0x70
			long minDiffLevel = -1;
			int countDiff = 0;

			for(int i=0; i<COMPARE_LEVELS; i++) {
				if(compare_levels[i] >= 0) {
 8007fb4:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007fb6:	c904      	ldmia	r1!, {r2}
 8007fb8:	9120      	str	r1, [sp, #128]	; 0x80
 8007fba:	921d      	str	r2, [sp, #116]	; 0x74
 8007fbc:	2a00      	cmp	r2, #0
 8007fbe:	db27      	blt.n	8008010 <output_data+0x588>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	9319      	str	r3, [sp, #100]	; 0x64
					long sumDiff = 0;
					long level = compare_levels[i];

					for(int j=0; j<COMPARE_LEVELS; j++) {
						if(compare_levels[j] >= 0 && i != j) {
 8007fc4:	4846      	ldr	r0, [pc, #280]	; (80080e0 <output_data+0x658>)
			g_appStats.lastLevelSecCount = ulSecCount;
		}
	}
}

void output_data() {
 8007fc6:	009a      	lsls	r2, r3, #2
				if(compare_levels[i] >= 0) {
					long sumDiff = 0;
					long level = compare_levels[i];

					for(int j=0; j<COMPARE_LEVELS; j++) {
						if(compare_levels[j] >= 0 && i != j) {
 8007fc8:	5812      	ldr	r2, [r2, r0]
 8007fca:	2a00      	cmp	r2, #0
 8007fcc:	db0a      	blt.n	8007fe4 <output_data+0x55c>
 8007fce:	429e      	cmp	r6, r3
 8007fd0:	d008      	beq.n	8007fe4 <output_data+0x55c>
							long diff = abs(compare_levels[j] - level);
 8007fd2:	991d      	ldr	r1, [sp, #116]	; 0x74
							sumDiff += diff;
							countDiff++;
 8007fd4:	3701      	adds	r7, #1
					long sumDiff = 0;
					long level = compare_levels[i];

					for(int j=0; j<COMPARE_LEVELS; j++) {
						if(compare_levels[j] >= 0 && i != j) {
							long diff = abs(compare_levels[j] - level);
 8007fd6:	1a50      	subs	r0, r2, r1
 8007fd8:	17c1      	asrs	r1, r0, #31
 8007fda:	1842      	adds	r2, r0, r1
							sumDiff += diff;
 8007fdc:	9819      	ldr	r0, [sp, #100]	; 0x64
					long sumDiff = 0;
					long level = compare_levels[i];

					for(int j=0; j<COMPARE_LEVELS; j++) {
						if(compare_levels[j] >= 0 && i != j) {
							long diff = abs(compare_levels[j] - level);
 8007fde:	404a      	eors	r2, r1
							sumDiff += diff;
 8007fe0:	1881      	adds	r1, r0, r2
 8007fe2:	9119      	str	r1, [sp, #100]	; 0x64
			for(int i=0; i<COMPARE_LEVELS; i++) {
				if(compare_levels[i] >= 0) {
					long sumDiff = 0;
					long level = compare_levels[i];

					for(int j=0; j<COMPARE_LEVELS; j++) {
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	2b06      	cmp	r3, #6
 8007fe8:	d1ec      	bne.n	8007fc4 <output_data+0x53c>
							sumDiff += diff;
							countDiff++;
						}
					}

					if(countDiff && (minDiff == -1 || (sumDiff/countDiff) < minDiff)) {
 8007fea:	2f00      	cmp	r7, #0
 8007fec:	d010      	beq.n	8008010 <output_data+0x588>
 8007fee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007ff0:	1c59      	adds	r1, r3, #1
 8007ff2:	d006      	beq.n	8008002 <output_data+0x57a>
 8007ff4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007ff6:	1c39      	adds	r1, r7, #0
 8007ff8:	f7fb f8f4 	bl	80031e4 <__aeabi_idiv>
 8007ffc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007ffe:	4290      	cmp	r0, r2
 8008000:	da06      	bge.n	8008010 <output_data+0x588>
						minDiffLevel = level;
						minDiff = (sumDiff/countDiff);
 8008002:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008004:	1c39      	adds	r1, r7, #0
 8008006:	f7fb f8ed 	bl	80031e4 <__aeabi_idiv>
 800800a:	901c      	str	r0, [sp, #112]	; 0x70
 800800c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800800e:	9018      	str	r0, [sp, #96]	; 0x60

			int minDiff = -1;
			long minDiffLevel = -1;
			int countDiff = 0;

			for(int i=0; i<COMPARE_LEVELS; i++) {
 8008010:	3601      	adds	r6, #1
 8008012:	2e06      	cmp	r6, #6
 8008014:	d1ce      	bne.n	8007fb4 <output_data+0x52c>
						minDiff = (sumDiff/countDiff);
					}
				}
			}

			if(minDiffLevel >= 0) {
 8008016:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8008018:	1c7e      	adds	r6, r7, #1
 800801a:	d13f      	bne.n	800809c <output_data+0x614>
 800801c:	e064      	b.n	80080e8 <output_data+0x660>
				step = 25;
				fuelLevel = minDiffLevel;
			}
		} else if(g_config.filterMode == DIRECT_MODE) {
			//keep value as same current
			step = 3;
 800801e:	2403      	movs	r4, #3

			if(minDiffLevel >= 0) {
				step = 25;
				fuelLevel = minDiffLevel;
			}
		} else if(g_config.filterMode == DIRECT_MODE) {
 8008020:	2b04      	cmp	r3, #4
 8008022:	d061      	beq.n	80080e8 <output_data+0x660>
			//keep value as same current
			step = 3;
		} else if(g_config.filterMode == MIN_MODE) {
 8008024:	42a3      	cmp	r3, r4
 8008026:	d10a      	bne.n	800803e <output_data+0x5b6>
			//keep value as same current
			step = 4;
			if(g_appStats.fuelLevelMinDiff != -1) {
 8008028:	4a2b      	ldr	r2, [pc, #172]	; (80080d8 <output_data+0x650>)
 800802a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800802c:	1c5f      	adds	r7, r3, #1
 800802e:	d138      	bne.n	80080a2 <output_data+0x61a>
				fuelLevel = g_appStats.fuelLevelMinDiff;
				step = 41;
			} else if(g_appStats.fuelLevelAvg != -1) {
 8008030:	6b53      	ldr	r3, [r2, #52]	; 0x34
		} else if(g_config.filterMode == DIRECT_MODE) {
			//keep value as same current
			step = 3;
		} else if(g_config.filterMode == MIN_MODE) {
			//keep value as same current
			step = 4;
 8008032:	2404      	movs	r4, #4
			if(g_appStats.fuelLevelMinDiff != -1) {
				fuelLevel = g_appStats.fuelLevelMinDiff;
				step = 41;
			} else if(g_appStats.fuelLevelAvg != -1) {
 8008034:	1c58      	adds	r0, r3, #1
 8008036:	d057      	beq.n	80080e8 <output_data+0x660>
 8008038:	1c1d      	adds	r5, r3, #0
				step = 42;
 800803a:	242a      	movs	r4, #42	; 0x2a
 800803c:	e054      	b.n	80080e8 <output_data+0x660>
				fuelLevel = g_appStats.fuelLevelAvg;
			}
		} else if(g_config.filterMode == ACCERLATE_MODE_2) {
 800803e:	2b05      	cmp	r3, #5
 8008040:	d113      	bne.n	800806a <output_data+0x5e2>
			step = 5;
			if(g_appStats.fuelLevel3DSame != -1) {
 8008042:	4a25      	ldr	r2, [pc, #148]	; (80080d8 <output_data+0x650>)
 8008044:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8008046:	1c4c      	adds	r4, r1, #1
 8008048:	d12e      	bne.n	80080a8 <output_data+0x620>
				step = 51;
				fuelLevel = g_appStats.fuelLevel3DSame;
			} else if(g_appStats.fuelLevel3DMin != -1) {
 800804a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800804c:	1c4e      	adds	r6, r1, #1
 800804e:	d12e      	bne.n	80080ae <output_data+0x626>
				step = 52;
				fuelLevel = g_appStats.fuelLevel3DMin;
			} else if(g_appStats.fuelLevel3D != -1) {
 8008050:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8008052:	1c4f      	adds	r7, r1, #1
 8008054:	d12e      	bne.n	80080b4 <output_data+0x62c>
				step = 53;
				fuelLevel = g_appStats.fuelLevel3D;
			} else if(g_appStats.fuelLevelMinDiff != -1) {
 8008056:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008058:	1c48      	adds	r0, r1, #1
 800805a:	d12e      	bne.n	80080ba <output_data+0x632>
				fuelLevel = g_appStats.fuelLevelMinDiff;
				step = 54;
			} else if(g_appStats.fuelLevelAvg != -1) {
 800805c:	6b52      	ldr	r2, [r2, #52]	; 0x34
			} else if(g_appStats.fuelLevelAvg != -1) {
				step = 42;
				fuelLevel = g_appStats.fuelLevelAvg;
			}
		} else if(g_config.filterMode == ACCERLATE_MODE_2) {
			step = 5;
 800805e:	1c1c      	adds	r4, r3, #0
				step = 53;
				fuelLevel = g_appStats.fuelLevel3D;
			} else if(g_appStats.fuelLevelMinDiff != -1) {
				fuelLevel = g_appStats.fuelLevelMinDiff;
				step = 54;
			} else if(g_appStats.fuelLevelAvg != -1) {
 8008060:	1c51      	adds	r1, r2, #1
 8008062:	d041      	beq.n	80080e8 <output_data+0x660>
 8008064:	1c15      	adds	r5, r2, #0
				step = 55;
 8008066:	2437      	movs	r4, #55	; 0x37
 8008068:	e03e      	b.n	80080e8 <output_data+0x660>

		if(ulSecCountMax) {
			diff3D = (ulSecCount - ulSecCountMax);
		}

		int step = 0;
 800806a:	2400      	movs	r4, #0
				step = 54;
			} else if(g_appStats.fuelLevelAvg != -1) {
				step = 55;
				fuelLevel = g_appStats.fuelLevelAvg;
			}
		} else if(g_config.filterMode == ACCERLATE_MODE) {
 800806c:	2b06      	cmp	r3, #6
 800806e:	d13b      	bne.n	80080e8 <output_data+0x660>
			step = 6;
			if(g_appStats.fuelLevel3DSame != -1) {
 8008070:	4a19      	ldr	r2, [pc, #100]	; (80080d8 <output_data+0x650>)
 8008072:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8008074:	1c4c      	adds	r4, r1, #1
 8008076:	d123      	bne.n	80080c0 <output_data+0x638>
				step = 61;
				fuelLevel = g_appStats.fuelLevel3DSame;
			} else if(g_appStats.fuelLevel3DMin != -1) {
 8008078:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800807a:	1c4e      	adds	r6, r1, #1
 800807c:	d123      	bne.n	80080c6 <output_data+0x63e>
				step = 62;
				fuelLevel = g_appStats.fuelLevel3DMin;
			} else if(g_appStats.fuelLevel3D != -1) {
 800807e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8008080:	1c4f      	adds	r7, r1, #1
 8008082:	d12f      	bne.n	80080e4 <output_data+0x65c>
				step = 63;
				fuelLevel = g_appStats.fuelLevel3D;
			} else if(g_appStats.fuelLevelAvg != -1) {
 8008084:	6b52      	ldr	r2, [r2, #52]	; 0x34
			} else if(g_appStats.fuelLevelAvg != -1) {
				step = 55;
				fuelLevel = g_appStats.fuelLevelAvg;
			}
		} else if(g_config.filterMode == ACCERLATE_MODE) {
			step = 6;
 8008086:	1c1c      	adds	r4, r3, #0
				step = 62;
				fuelLevel = g_appStats.fuelLevel3DMin;
			} else if(g_appStats.fuelLevel3D != -1) {
				step = 63;
				fuelLevel = g_appStats.fuelLevel3D;
			} else if(g_appStats.fuelLevelAvg != -1) {
 8008088:	1c50      	adds	r0, r2, #1
 800808a:	d02d      	beq.n	80080e8 <output_data+0x660>
 800808c:	1c15      	adds	r5, r2, #0
 800808e:	e02a      	b.n	80080e6 <output_data+0x65e>
		int step = 0;

		if(g_config.filterMode == AVERAGE_MODE) {
			step = 1;

			if(g_appStats.fuelLevel3DMin != -1) {
 8008090:	1c0d      	adds	r5, r1, #0
				fuelLevel = g_appStats.fuelLevel3DMin;
				step = 11;
 8008092:	240b      	movs	r4, #11
 8008094:	e028      	b.n	80080e8 <output_data+0x660>
			} else if(g_appStats.fuelLevel3D != -1) {
 8008096:	1c0d      	adds	r5, r1, #0
				fuelLevel = g_appStats.fuelLevel3D;
				step = 12;
 8008098:	240c      	movs	r4, #12
 800809a:	e025      	b.n	80080e8 <output_data+0x660>
						minDiff = (sumDiff/countDiff);
					}
				}
			}

			if(minDiffLevel >= 0) {
 800809c:	9d18      	ldr	r5, [sp, #96]	; 0x60
				step = 25;
 800809e:	2419      	movs	r4, #25
 80080a0:	e022      	b.n	80080e8 <output_data+0x660>
			//keep value as same current
			step = 3;
		} else if(g_config.filterMode == MIN_MODE) {
			//keep value as same current
			step = 4;
			if(g_appStats.fuelLevelMinDiff != -1) {
 80080a2:	1c1d      	adds	r5, r3, #0
				fuelLevel = g_appStats.fuelLevelMinDiff;
				step = 41;
 80080a4:	2429      	movs	r4, #41	; 0x29
 80080a6:	e01f      	b.n	80080e8 <output_data+0x660>
				step = 42;
				fuelLevel = g_appStats.fuelLevelAvg;
			}
		} else if(g_config.filterMode == ACCERLATE_MODE_2) {
			step = 5;
			if(g_appStats.fuelLevel3DSame != -1) {
 80080a8:	1c0d      	adds	r5, r1, #0
				step = 51;
 80080aa:	2433      	movs	r4, #51	; 0x33
 80080ac:	e01c      	b.n	80080e8 <output_data+0x660>
				fuelLevel = g_appStats.fuelLevel3DSame;
			} else if(g_appStats.fuelLevel3DMin != -1) {
 80080ae:	1c0d      	adds	r5, r1, #0
				step = 52;
 80080b0:	2434      	movs	r4, #52	; 0x34
 80080b2:	e019      	b.n	80080e8 <output_data+0x660>
				fuelLevel = g_appStats.fuelLevel3DMin;
			} else if(g_appStats.fuelLevel3D != -1) {
 80080b4:	1c0d      	adds	r5, r1, #0
				step = 53;
 80080b6:	2435      	movs	r4, #53	; 0x35
 80080b8:	e016      	b.n	80080e8 <output_data+0x660>
				fuelLevel = g_appStats.fuelLevel3D;
			} else if(g_appStats.fuelLevelMinDiff != -1) {
 80080ba:	1c0d      	adds	r5, r1, #0
				fuelLevel = g_appStats.fuelLevelMinDiff;
				step = 54;
 80080bc:	2436      	movs	r4, #54	; 0x36
 80080be:	e013      	b.n	80080e8 <output_data+0x660>
				step = 55;
				fuelLevel = g_appStats.fuelLevelAvg;
			}
		} else if(g_config.filterMode == ACCERLATE_MODE) {
			step = 6;
			if(g_appStats.fuelLevel3DSame != -1) {
 80080c0:	1c0d      	adds	r5, r1, #0
				step = 61;
 80080c2:	243d      	movs	r4, #61	; 0x3d
 80080c4:	e010      	b.n	80080e8 <output_data+0x660>
				fuelLevel = g_appStats.fuelLevel3DSame;
			} else if(g_appStats.fuelLevel3DMin != -1) {
 80080c6:	1c0d      	adds	r5, r1, #0
				step = 62;
 80080c8:	243e      	movs	r4, #62	; 0x3e
 80080ca:	e00d      	b.n	80080e8 <output_data+0x660>
 80080cc:	20000b4c 	.word	0x20000b4c
 80080d0:	20000880 	.word	0x20000880
 80080d4:	20000eb0 	.word	0x20000eb0
 80080d8:	200009a8 	.word	0x200009a8
 80080dc:	20000a14 	.word	0x20000a14
 80080e0:	200005ac 	.word	0x200005ac
				fuelLevel = g_appStats.fuelLevel3DMin;
			} else if(g_appStats.fuelLevel3D != -1) {
 80080e4:	1c0d      	adds	r5, r1, #0
				step = 63;
 80080e6:	243f      	movs	r4, #63	; 0x3f
			}
		} else { //delay mode
			//direct mode
		}

		if(ulSecCount >= (SKS_TRUNC_ERROR_SEC * 2)) {
 80080e8:	4e5e      	ldr	r6, [pc, #376]	; (8008264 <output_data+0x7dc>)
 80080ea:	6831      	ldr	r1, [r6, #0]
 80080ec:	2909      	cmp	r1, #9
 80080ee:	d800      	bhi.n	80080f2 <output_data+0x66a>
 80080f0:	e0b5      	b.n	800825e <output_data+0x7d6>
			if(g_appStats.debugOn == 1) {
 80080f2:	4b5d      	ldr	r3, [pc, #372]	; (8008268 <output_data+0x7e0>)
 80080f4:	1c1a      	adds	r2, r3, #0
 80080f6:	324d      	adds	r2, #77	; 0x4d
 80080f8:	7812      	ldrb	r2, [r2, #0]
 80080fa:	2a01      	cmp	r2, #1
 80080fc:	d132      	bne.n	8008164 <output_data+0x6dc>
				if(ulSecCount != lastSentToTracker) {
 80080fe:	4f5b      	ldr	r7, [pc, #364]	; (800826c <output_data+0x7e4>)
 8008100:	6830      	ldr	r0, [r6, #0]
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	4288      	cmp	r0, r1
 8008106:	d100      	bne.n	800810a <output_data+0x682>
 8008108:	e0a9      	b.n	800825e <output_data+0x7d6>
					xprintf("F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%d FU=%u EM=%u x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d step=%d T=%d E=%d\r\n",
 800810a:	9500      	str	r5, [sp, #0]
 800810c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800810e:	9201      	str	r2, [sp, #4]
 8008110:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008112:	9102      	str	r1, [sp, #8]
 8008114:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8008116:	9503      	str	r5, [sp, #12]
 8008118:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800811a:	4d55      	ldr	r5, [pc, #340]	; (8008270 <output_data+0x7e8>)
 800811c:	9004      	str	r0, [sp, #16]
 800811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008120:	9205      	str	r2, [sp, #20]
 8008122:	68e9      	ldr	r1, [r5, #12]
 8008124:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008126:	9106      	str	r1, [sp, #24]
 8008128:	6928      	ldr	r0, [r5, #16]
 800812a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800812c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800812e:	9007      	str	r0, [sp, #28]
 8008130:	4850      	ldr	r0, [pc, #320]	; (8008274 <output_data+0x7ec>)
 8008132:	9509      	str	r5, [sp, #36]	; 0x24
 8008134:	910a      	str	r1, [sp, #40]	; 0x28
 8008136:	9208      	str	r2, [sp, #32]
 8008138:	7802      	ldrb	r2, [r0, #0]
 800813a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800813c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800813e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008140:	950c      	str	r5, [sp, #48]	; 0x30
 8008142:	910d      	str	r1, [sp, #52]	; 0x34
 8008144:	940e      	str	r4, [sp, #56]	; 0x38
 8008146:	6e18      	ldr	r0, [r3, #96]	; 0x60
							g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
							fuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3D, g_appStats.fuelLevel3DSame, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_config.fullValue, g_config.emptyValue,
							roll, pitch, yaw, idx3D, count3D, diff3D, step, g_appStats.internalTemp, g_appStats.errorState);
 8008148:	1c1a      	adds	r2, r3, #0
		}

		if(ulSecCount >= (SKS_TRUNC_ERROR_SEC * 2)) {
			if(g_appStats.debugOn == 1) {
				if(ulSecCount != lastSentToTracker) {
					xprintf("F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%d FU=%u EM=%u x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d step=%d T=%d E=%d\r\n",
 800814a:	900f      	str	r0, [sp, #60]	; 0x3c
							g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
							fuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3D, g_appStats.fuelLevel3DSame, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_config.fullValue, g_config.emptyValue,
							roll, pitch, yaw, idx3D, count3D, diff3D, step, g_appStats.internalTemp, g_appStats.errorState);
 800814c:	3265      	adds	r2, #101	; 0x65
		}

		if(ulSecCount >= (SKS_TRUNC_ERROR_SEC * 2)) {
			if(g_appStats.debugOn == 1) {
				if(ulSecCount != lastSentToTracker) {
					xprintf("F=%u EF=%u F15=%u N=%d MN=%d XN=%d SN=%d AN=%d CN=%d FU=%u EM=%u x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d step=%d T=%d E=%d\r\n",
 800814e:	7814      	ldrb	r4, [r2, #0]
 8008150:	9410      	str	r4, [sp, #64]	; 0x40
 8008152:	6a19      	ldr	r1, [r3, #32]
 8008154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008156:	4848      	ldr	r0, [pc, #288]	; (8008278 <output_data+0x7f0>)
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	f001 f921 	bl	80093a0 <xprintf>
							g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
							fuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3D, g_appStats.fuelLevel3DSame, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_config.fullValue, g_config.emptyValue,
							roll, pitch, yaw, idx3D, count3D, diff3D, step, g_appStats.internalTemp, g_appStats.errorState);
					lastSentToTracker = ulSecCount;
 800815e:	6835      	ldr	r5, [r6, #0]
 8008160:	603d      	str	r5, [r7, #0]
 8008162:	e07c      	b.n	800825e <output_data+0x7d6>
				}
			} else {
				if(g_config.interval && (ulSecCount - lastSentToTracker) >= g_config.interval) {
 8008164:	4f42      	ldr	r7, [pc, #264]	; (8008270 <output_data+0x7e8>)
 8008166:	7eb9      	ldrb	r1, [r7, #26]
 8008168:	2900      	cmp	r1, #0
 800816a:	d078      	beq.n	800825e <output_data+0x7d6>
 800816c:	6837      	ldr	r7, [r6, #0]
 800816e:	4e3f      	ldr	r6, [pc, #252]	; (800826c <output_data+0x7e4>)
 8008170:	6830      	ldr	r0, [r6, #0]
 8008172:	1a3e      	subs	r6, r7, r0
 8008174:	428e      	cmp	r6, r1
 8008176:	d372      	bcc.n	800825e <output_data+0x7d6>
 8008178:	43ef      	mvns	r7, r5

					if(g_appStats.fuelLevel < 0) {
						g_appStats.fuelLevel = 0;
					}

					if(g_appStats.fuelLevelAvg < 0) {
 800817a:	6b59      	ldr	r1, [r3, #52]	; 0x34
							fuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3D, g_appStats.fuelLevel3DSame, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_config.fullValue, g_config.emptyValue,
							roll, pitch, yaw, idx3D, count3D, diff3D, step, g_appStats.internalTemp, g_appStats.errorState);
					lastSentToTracker = ulSecCount;
				}
			} else {
				if(g_config.interval && (ulSecCount - lastSentToTracker) >= g_config.interval) {
 800817c:	17f8      	asrs	r0, r7, #31
 800817e:	4005      	ands	r5, r0

					if(g_appStats.fuelLevel < 0) {
						g_appStats.fuelLevel = 0;
					}

					if(g_appStats.fuelLevelAvg < 0) {
 8008180:	2900      	cmp	r1, #0
 8008182:	da01      	bge.n	8008188 <output_data+0x700>
						g_appStats.fuelLevelAvg = 0;
 8008184:	2600      	movs	r6, #0
 8008186:	635e      	str	r6, [r3, #52]	; 0x34
					}

					if(g_appStats.fuelLevel3DMin < 0) {
 8008188:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800818a:	2900      	cmp	r1, #0
 800818c:	da01      	bge.n	8008192 <output_data+0x70a>
						g_appStats.fuelLevel3DMin = 0;
 800818e:	2000      	movs	r0, #0
 8008190:	63d8      	str	r0, [r3, #60]	; 0x3c
					}

					if(g_appStats.fuelLevel3DSame < 0) {
 8008192:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8008194:	2f00      	cmp	r7, #0
 8008196:	da01      	bge.n	800819c <output_data+0x714>
						g_appStats.fuelLevel3DSame = 0;
 8008198:	2600      	movs	r6, #0
 800819a:	641e      	str	r6, [r3, #64]	; 0x40
					}

					if(g_appStats.fuelLevel3D < 0) {
 800819c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800819e:	2900      	cmp	r1, #0
 80081a0:	da01      	bge.n	80081a6 <output_data+0x71e>
						g_appStats.fuelLevel3D = 0;
 80081a2:	2000      	movs	r0, #0
 80081a4:	6398      	str	r0, [r3, #56]	; 0x38
 80081a6:	4b30      	ldr	r3, [pc, #192]	; (8008268 <output_data+0x7e0>)
					}

					if(g_appStats.debugOn == 99) {
						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d tO=%d fM=%d dX=%d dY=%d ST=%d T=%d E=%d\r\n",
 80081a8:	9500      	str	r5, [sp, #0]

					if(g_appStats.fuelLevel3D < 0) {
						g_appStats.fuelLevel3D = 0;
					}

					if(g_appStats.debugOn == 99) {
 80081aa:	2a63      	cmp	r2, #99	; 0x63
 80081ac:	d12d      	bne.n	800820a <output_data+0x782>
						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d tO=%d fM=%d dX=%d dY=%d ST=%d T=%d E=%d\r\n",
 80081ae:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80081b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80081b2:	9501      	str	r5, [sp, #4]
 80081b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80081b6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80081b8:	9002      	str	r0, [sp, #8]
 80081ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80081bc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80081be:	9103      	str	r1, [sp, #12]
 80081c0:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 80081c2:	492c      	ldr	r1, [pc, #176]	; (8008274 <output_data+0x7ec>)
 80081c4:	9604      	str	r6, [sp, #16]
 80081c6:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 80081c8:	9206      	str	r2, [sp, #24]
 80081ca:	9705      	str	r7, [sp, #20]
 80081cc:	9507      	str	r5, [sp, #28]
 80081ce:	9008      	str	r0, [sp, #32]
 80081d0:	780e      	ldrb	r6, [r1, #0]
 80081d2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80081d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80081d6:	9609      	str	r6, [sp, #36]	; 0x24
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
								fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw,
								idx3D, count3D, diff3D, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 80081d8:	4e25      	ldr	r6, [pc, #148]	; (8008270 <output_data+0x7e8>)
					if(g_appStats.fuelLevel3D < 0) {
						g_appStats.fuelLevel3D = 0;
					}

					if(g_appStats.debugOn == 99) {
						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d tO=%d fM=%d dX=%d dY=%d ST=%d T=%d E=%d\r\n",
 80081da:	970a      	str	r7, [sp, #40]	; 0x28
 80081dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80081de:	8ab5      	ldrh	r5, [r6, #20]
 80081e0:	950c      	str	r5, [sp, #48]	; 0x30
 80081e2:	7df0      	ldrb	r0, [r6, #23]
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
								fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw,
								idx3D, count3D, diff3D, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 80081e4:	1c1d      	adds	r5, r3, #0
					if(g_appStats.fuelLevel3D < 0) {
						g_appStats.fuelLevel3D = 0;
					}

					if(g_appStats.debugOn == 99) {
						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d tO=%d fM=%d dX=%d dY=%d ST=%d T=%d E=%d\r\n",
 80081e6:	900d      	str	r0, [sp, #52]	; 0x34
 80081e8:	7e31      	ldrb	r1, [r6, #24]
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
								fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw,
								idx3D, count3D, diff3D, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
 80081ea:	3565      	adds	r5, #101	; 0x65
					if(g_appStats.fuelLevel3D < 0) {
						g_appStats.fuelLevel3D = 0;
					}

					if(g_appStats.debugOn == 99) {
						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d tO=%d fM=%d dX=%d dY=%d ST=%d T=%d E=%d\r\n",
 80081ec:	910e      	str	r1, [sp, #56]	; 0x38
 80081ee:	7e77      	ldrb	r7, [r6, #25]
 80081f0:	9410      	str	r4, [sp, #64]	; 0x40
 80081f2:	970f      	str	r7, [sp, #60]	; 0x3c
 80081f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80081f6:	9211      	str	r2, [sp, #68]	; 0x44
 80081f8:	782c      	ldrb	r4, [r5, #0]
 80081fa:	4820      	ldr	r0, [pc, #128]	; (800827c <output_data+0x7f4>)
 80081fc:	9412      	str	r4, [sp, #72]	; 0x48
 80081fe:	6a19      	ldr	r1, [r3, #32]
 8008200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	f001 f8cc 	bl	80093a0 <xprintf>
 8008208:	e025      	b.n	8008256 <output_data+0x7ce>
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
								fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw,
								idx3D, count3D, diff3D, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
					} else {
						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d T=%d E=%d FU=%x EM=%x fM=%d V=%s ST=%d\r\n",
 800820a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800820c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800820e:	9101      	str	r1, [sp, #4]
 8008210:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8008212:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008214:	9602      	str	r6, [sp, #8]
 8008216:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 8008218:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 800821a:	9703      	str	r7, [sp, #12]
 800821c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800821e:	9204      	str	r2, [sp, #16]
 8008220:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8008222:	9608      	str	r6, [sp, #32]
 8008224:	9505      	str	r5, [sp, #20]
 8008226:	9006      	str	r0, [sp, #24]
 8008228:	9107      	str	r1, [sp, #28]
 800822a:	6e1f      	ldr	r7, [r3, #96]	; 0x60
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
								fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel,
								g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw,
								g_appStats.internalTemp, g_appStats.errorState, g_config.fullValue, g_config.emptyValue, g_config.filterMode, VERSION_NO, step);
 800822c:	1c1a      	adds	r2, r3, #0
						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d tO=%d fM=%d dX=%d dY=%d ST=%d T=%d E=%d\r\n",
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
								fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw,
								idx3D, count3D, diff3D, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
					} else {
						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d T=%d E=%d FU=%x EM=%x fM=%d V=%s ST=%d\r\n",
 800822e:	9709      	str	r7, [sp, #36]	; 0x24
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
								fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel,
								g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw,
								g_appStats.internalTemp, g_appStats.errorState, g_config.fullValue, g_config.emptyValue, g_config.filterMode, VERSION_NO, step);
 8008230:	3265      	adds	r2, #101	; 0x65
						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d idx3D=%d c3D=%d dT=%d tO=%d fM=%d dX=%d dY=%d ST=%d T=%d E=%d\r\n",
								g_appStats.frequency, g_appStats.emaFrequency, g_appStats.tim15Freq,
								fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel, g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw,
								idx3D, count3D, diff3D, g_config.timeout3D, g_config.filterMode, g_config.diffX, g_config.diffY, step, g_appStats.internalTemp, g_appStats.errorState);
					} else {
						xprintf("F=%x EF=%x F15=%x N=%04x.0 XN=%04x.0 AN=%04x.0 CN=%04x.0 MN=%04x.0 SN=%04x.0 x=%d y=%d z=%d T=%d E=%d FU=%x EM=%x fM=%d V=%s ST=%d\r\n",
 8008232:	7815      	ldrb	r5, [r2, #0]
 8008234:	4e0e      	ldr	r6, [pc, #56]	; (8008270 <output_data+0x7e8>)
 8008236:	950a      	str	r5, [sp, #40]	; 0x28
 8008238:	68f0      	ldr	r0, [r6, #12]
 800823a:	4a11      	ldr	r2, [pc, #68]	; (8008280 <output_data+0x7f8>)
 800823c:	900b      	str	r0, [sp, #44]	; 0x2c
 800823e:	6931      	ldr	r1, [r6, #16]
 8008240:	4810      	ldr	r0, [pc, #64]	; (8008284 <output_data+0x7fc>)
 8008242:	910c      	str	r1, [sp, #48]	; 0x30
 8008244:	7df7      	ldrb	r7, [r6, #23]
 8008246:	920e      	str	r2, [sp, #56]	; 0x38
 8008248:	970d      	str	r7, [sp, #52]	; 0x34
 800824a:	940f      	str	r4, [sp, #60]	; 0x3c
 800824c:	6a19      	ldr	r1, [r3, #32]
 800824e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	f001 f8a5 	bl	80093a0 <xprintf>
								fuelLevel, g_appStats.fuelLevel3D, g_appStats.fuelLevelAvg, g_appStats.directFuelLevel,
								g_appStats.fuelLevel3DMin, g_appStats.fuelLevel3DSame, roll, pitch, yaw,
								g_appStats.internalTemp, g_appStats.errorState, g_config.fullValue, g_config.emptyValue, g_config.filterMode, VERSION_NO, step);
					}

					lastSentToTracker = ulSecCount;
 8008256:	4803      	ldr	r0, [pc, #12]	; (8008264 <output_data+0x7dc>)
 8008258:	4b04      	ldr	r3, [pc, #16]	; (800826c <output_data+0x7e4>)
 800825a:	6804      	ldr	r4, [r0, #0]
 800825c:	601c      	str	r4, [r3, #0]
				}
			}
		}
	}
}
 800825e:	b02d      	add	sp, #180	; 0xb4
 8008260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	20000880 	.word	0x20000880
 8008268:	200009a8 	.word	0x200009a8
 800826c:	20000894 	.word	0x20000894
 8008270:	20000a14 	.word	0x20000a14
 8008274:	20000888 	.word	0x20000888
 8008278:	0800a231 	.word	0x0800a231
 800827c:	0800a2ab 	.word	0x0800a2ab
 8008280:	0800a3cc 	.word	0x0800a3cc
 8008284:	0800a347 	.word	0x0800a347

08008288 <process_command_from_pc>:
uint16_t cp = 0, cm = 0;
short sp = 0, sm = 0;
double roll = 0, pitch = 0, yaw = 0;

//extern int buff_idx;
void process_command_from_pc(void) {
 8008288:	b508      	push	{r3, lr}
    if(buff_cmd[0] == '*') {
 800828a:	4905      	ldr	r1, [pc, #20]	; (80082a0 <process_command_from_pc+0x18>)
 800828c:	780b      	ldrb	r3, [r1, #0]
 800828e:	2b2a      	cmp	r3, #42	; 0x2a
 8008290:	d104      	bne.n	800829c <process_command_from_pc+0x14>
		server_on_command(SKS_CMD_SOURCE_COM1, buff_cmd, sizeof(buff_cmd));
 8008292:	2001      	movs	r0, #1
 8008294:	2280      	movs	r2, #128	; 0x80
 8008296:	4082      	lsls	r2, r0
 8008298:	f7ff f8c4 	bl	8007424 <server_on_command>

//    if(ulSecCount - g_appStats.lastReceiveUart > 1) {
//    	buff_idx = 0;
//    	buff_cmd[0] = 0;
//    }
}
 800829c:	bd08      	pop	{r3, pc}
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	20000758 	.word	0x20000758
 80082a4:	00000000 	.word	0x00000000

080082a8 <handlerSensorData>:
#define  MAX_FREQ_AVERAGE 5
uint32_t avrTimFreq[MAX_FREQ_AVERAGE] = {0};
int freqIdx = 0;
uint32_t lastFreg = 0;
int cutOff;
void handlerSensorData(void) {
 80082a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(freqIdx < MAX_FREQ_AVERAGE && g_appStats.tim15Freq) {
 80082aa:	4b67      	ldr	r3, [pc, #412]	; (8008448 <handlerSensorData+0x1a0>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	2a04      	cmp	r2, #4
 80082b0:	dc08      	bgt.n	80082c4 <handlerSensorData+0x1c>
 80082b2:	4966      	ldr	r1, [pc, #408]	; (800844c <handlerSensorData+0x1a4>)
 80082b4:	69c9      	ldr	r1, [r1, #28]
 80082b6:	2900      	cmp	r1, #0
 80082b8:	d004      	beq.n	80082c4 <handlerSensorData+0x1c>
		avrTimFreq[freqIdx] = g_appStats.tim15Freq;
 80082ba:	4865      	ldr	r0, [pc, #404]	; (8008450 <handlerSensorData+0x1a8>)
 80082bc:	0094      	lsls	r4, r2, #2
 80082be:	5021      	str	r1, [r4, r0]
		freqIdx++;
 80082c0:	3201      	adds	r2, #1
 80082c2:	e000      	b.n	80082c6 <handlerSensorData+0x1e>
	} else {
		freqIdx = 0;
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]
	}

	if(freqIdx >= MAX_FREQ_AVERAGE) {
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	2a04      	cmp	r2, #4
 80082cc:	dd01      	ble.n	80082d2 <handlerSensorData+0x2a>
		freqIdx = 0;
 80082ce:	2500      	movs	r5, #0
 80082d0:	601d      	str	r5, [r3, #0]
 80082d2:	4b5f      	ldr	r3, [pc, #380]	; (8008450 <handlerSensorData+0x1a8>)
	}

	uint32_t sumFreq = 0;
	uint32_t avrFreq = 0;
	int count = 0;
 80082d4:	2500      	movs	r5, #0
#define  MAX_FREQ_AVERAGE 5
uint32_t avrTimFreq[MAX_FREQ_AVERAGE] = {0};
int freqIdx = 0;
uint32_t lastFreg = 0;
int cutOff;
void handlerSensorData(void) {
 80082d6:	1c19      	adds	r1, r3, #0
 80082d8:	3114      	adds	r1, #20

	if(freqIdx >= MAX_FREQ_AVERAGE) {
		freqIdx = 0;
	}

	uint32_t sumFreq = 0;
 80082da:	1c28      	adds	r0, r5, #0
	uint32_t avrFreq = 0;
	int count = 0;
	for(int i=0; i<MAX_FREQ_AVERAGE; i++) {
		if(avrTimFreq[i]) {
 80082dc:	cb04      	ldmia	r3!, {r2}
 80082de:	2a00      	cmp	r2, #0
 80082e0:	d001      	beq.n	80082e6 <handlerSensorData+0x3e>
			sumFreq += avrTimFreq[i];
 80082e2:	1880      	adds	r0, r0, r2
			count++;
 80082e4:	3501      	adds	r5, #1
	}

	uint32_t sumFreq = 0;
	uint32_t avrFreq = 0;
	int count = 0;
	for(int i=0; i<MAX_FREQ_AVERAGE; i++) {
 80082e6:	428b      	cmp	r3, r1
 80082e8:	d1f8      	bne.n	80082dc <handlerSensorData+0x34>
			sumFreq += avrTimFreq[i];
			count++;
		}
	}

	if(count > 0) {
 80082ea:	2d00      	cmp	r5, #0
 80082ec:	d01c      	beq.n	8008328 <handlerSensorData+0x80>
		avrFreq = sumFreq/count;
 80082ee:	1c29      	adds	r1, r5, #0
 80082f0:	f7fa ff2a 	bl	8003148 <__aeabi_uidiv>

#if SKS_DEBUG_AVG_FREQUENCY
	xprintf("avrFeq: %d, sumFeq: %d, count:%d, currentFrequency: %d, \r\n",avrFreq, sumFreq, count,  g_appStats.tim15Freq);
#endif

	if(avrFreq && g_appStats.tim15Freq) {
 80082f4:	1e05      	subs	r5, r0, #0
 80082f6:	d017      	beq.n	8008328 <handlerSensorData+0x80>
 80082f8:	4e54      	ldr	r6, [pc, #336]	; (800844c <handlerSensorData+0x1a4>)
 80082fa:	69f3      	ldr	r3, [r6, #28]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d013      	beq.n	8008328 <handlerSensorData+0x80>
		if(!g_config.disableEma) {
 8008300:	4954      	ldr	r1, [pc, #336]	; (8008454 <handlerSensorData+0x1ac>)
 8008302:	7ecf      	ldrb	r7, [r1, #27]
 8008304:	2f00      	cmp	r7, #0
 8008306:	d10d      	bne.n	8008324 <handlerSensorData+0x7c>
			addStock((float)avrFreq, &SensorEMA10);
 8008308:	1c28      	adds	r0, r5, #0
 800830a:	f7fb fe67 	bl	8003fdc <__aeabi_ui2f>
 800830e:	f7fd fca9 	bl	8005c64 <__aeabi_f2d>
 8008312:	4c51      	ldr	r4, [pc, #324]	; (8008458 <handlerSensorData+0x1b0>)
 8008314:	1c22      	adds	r2, r4, #0
 8008316:	f7fe f9db 	bl	80066d0 <addStock>
			avrFreq = SensorEMA10.lastEMA;;
 800831a:	68a0      	ldr	r0, [r4, #8]
 800831c:	68e1      	ldr	r1, [r4, #12]
 800831e:	f7fb f81b 	bl	8003358 <__aeabi_d2uiz>
 8008322:	1c05      	adds	r5, r0, #0
		}
		g_appStats.frequency = avrFreq; //use for set FULL and EMPTY this Frequency
 8008324:	4849      	ldr	r0, [pc, #292]	; (800844c <handlerSensorData+0x1a4>)
 8008326:	6205      	str	r5, [r0, #32]
	}

	ERROR_STATE error = ERROR_STATE_NORMAL;

	if(!g_appStats.tim15Freq) {
 8008328:	4a48      	ldr	r2, [pc, #288]	; (800844c <handlerSensorData+0x1a4>)
		error = ERROR_STATE_ZERO;
 800832a:	2301      	movs	r3, #1
		g_appStats.frequency = avrFreq; //use for set FULL and EMPTY this Frequency
	}

	ERROR_STATE error = ERROR_STATE_NORMAL;

	if(!g_appStats.tim15Freq) {
 800832c:	69d4      	ldr	r4, [r2, #28]
 800832e:	2c00      	cmp	r4, #0
 8008330:	d037      	beq.n	80083a2 <handlerSensorData+0xfa>
		error = ERROR_STATE_ZERO;
	} else if(g_config.emptyValue && avrFreq > (g_config.emptyValue * 1.1)) {
 8008332:	4b48      	ldr	r3, [pc, #288]	; (8008454 <handlerSensorData+0x1ac>)
 8008334:	691e      	ldr	r6, [r3, #16]
 8008336:	2e00      	cmp	r6, #0
 8008338:	d014      	beq.n	8008364 <handlerSensorData+0xbc>
 800833a:	1c28      	adds	r0, r5, #0
 800833c:	f7fd fc5e 	bl	8005bfc <__aeabi_ui2d>
 8008340:	9000      	str	r0, [sp, #0]
 8008342:	9101      	str	r1, [sp, #4]
 8008344:	1c30      	adds	r0, r6, #0
 8008346:	f7fd fc59 	bl	8005bfc <__aeabi_ui2d>
 800834a:	4b3c      	ldr	r3, [pc, #240]	; (800843c <handlerSensorData+0x194>)
 800834c:	4a3a      	ldr	r2, [pc, #232]	; (8008438 <handlerSensorData+0x190>)
 800834e:	f7fc fe05 	bl	8004f5c <__aeabi_dmul>
 8008352:	1c0b      	adds	r3, r1, #0
 8008354:	1c02      	adds	r2, r0, #0
 8008356:	9800      	ldr	r0, [sp, #0]
 8008358:	9901      	ldr	r1, [sp, #4]
 800835a:	f7fa ffcf 	bl	80032fc <__aeabi_dcmpgt>
		error = ERROR_STATE_OVER_EMPTY;
 800835e:	2302      	movs	r3, #2

	ERROR_STATE error = ERROR_STATE_NORMAL;

	if(!g_appStats.tim15Freq) {
		error = ERROR_STATE_ZERO;
	} else if(g_config.emptyValue && avrFreq > (g_config.emptyValue * 1.1)) {
 8008360:	2800      	cmp	r0, #0
 8008362:	d11e      	bne.n	80083a2 <handlerSensorData+0xfa>
		error = ERROR_STATE_OVER_EMPTY;
	} else if(g_config.fullValue && avrFreq < (g_config.fullValue * 0.9)) {
 8008364:	4f3b      	ldr	r7, [pc, #236]	; (8008454 <handlerSensorData+0x1ac>)
 8008366:	68fc      	ldr	r4, [r7, #12]
 8008368:	2c00      	cmp	r4, #0
 800836a:	d017      	beq.n	800839c <handlerSensorData+0xf4>
 800836c:	1c28      	adds	r0, r5, #0
 800836e:	f7fd fc45 	bl	8005bfc <__aeabi_ui2d>
 8008372:	1c06      	adds	r6, r0, #0
 8008374:	1c20      	adds	r0, r4, #0
 8008376:	1c0f      	adds	r7, r1, #0
 8008378:	f7fd fc40 	bl	8005bfc <__aeabi_ui2d>
 800837c:	4a30      	ldr	r2, [pc, #192]	; (8008440 <handlerSensorData+0x198>)
 800837e:	4b31      	ldr	r3, [pc, #196]	; (8008444 <handlerSensorData+0x19c>)
 8008380:	f7fc fdec 	bl	8004f5c <__aeabi_dmul>
 8008384:	1c0b      	adds	r3, r1, #0
 8008386:	1c02      	adds	r2, r0, #0
 8008388:	1c39      	adds	r1, r7, #0
 800838a:	1c30      	adds	r0, r6, #0
 800838c:	f7fa ffa2 	bl	80032d4 <__aeabi_dcmplt>
			avrFreq = SensorEMA10.lastEMA;;
		}
		g_appStats.frequency = avrFreq; //use for set FULL and EMPTY this Frequency
	}

	ERROR_STATE error = ERROR_STATE_NORMAL;
 8008390:	1e43      	subs	r3, r0, #1
 8008392:	4198      	sbcs	r0, r3
 8008394:	4240      	negs	r0, r0
 8008396:	2303      	movs	r3, #3
 8008398:	4003      	ands	r3, r0
 800839a:	e002      	b.n	80083a2 <handlerSensorData+0xfa>
 800839c:	4271      	negs	r1, r6
 800839e:	4171      	adcs	r1, r6
 80083a0:	008b      	lsls	r3, r1, #2
		error = ERROR_STATE_BELOW_FULL;
	} else if(!g_config.fullValue && !g_config.emptyValue) {
		error = ERROR_STATE_NOT_SET_FULL_EMTY;
	}

	g_appStats.errorState = error;
 80083a2:	4e2a      	ldr	r6, [pc, #168]	; (800844c <handlerSensorData+0x1a4>)
 80083a4:	3665      	adds	r6, #101	; 0x65
 80083a6:	7033      	strb	r3, [r6, #0]

	if(error == ERROR_STATE_NORMAL) {
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d144      	bne.n	8008436 <handlerSensorData+0x18e>
		if(avrFreq > g_config.emptyValue) {
 80083ac:	4b29      	ldr	r3, [pc, #164]	; (8008454 <handlerSensorData+0x1ac>)
 80083ae:	691c      	ldr	r4, [r3, #16]
 80083b0:	42a5      	cmp	r5, r4
 80083b2:	d804      	bhi.n	80083be <handlerSensorData+0x116>
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	1c2c      	adds	r4, r5, #0
 80083b8:	4295      	cmp	r5, r2
 80083ba:	d200      	bcs.n	80083be <handlerSensorData+0x116>
 80083bc:	1c14      	adds	r4, r2, #0
			avrFreq = g_config.emptyValue;
		} else if (avrFreq < g_config.fullValue){
			avrFreq = g_config.fullValue;
		}

		if(lastFreg) {
 80083be:	4d27      	ldr	r5, [pc, #156]	; (800845c <handlerSensorData+0x1b4>)
 80083c0:	6828      	ldr	r0, [r5, #0]
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d024      	beq.n	8008410 <handlerSensorData+0x168>
			uint32_t diff = abs(avrFreq - lastFreg);
 80083c6:	1a23      	subs	r3, r4, r0
 80083c8:	17da      	asrs	r2, r3, #31
 80083ca:	189f      	adds	r7, r3, r2
			if(diff > (lastFreg/10) && cutOff < 10) {
 80083cc:	210a      	movs	r1, #10
		} else if (avrFreq < g_config.fullValue){
			avrFreq = g_config.fullValue;
		}

		if(lastFreg) {
			uint32_t diff = abs(avrFreq - lastFreg);
 80083ce:	4057      	eors	r7, r2
			if(diff > (lastFreg/10) && cutOff < 10) {
 80083d0:	f7fa feba 	bl	8003148 <__aeabi_uidiv>
 80083d4:	4287      	cmp	r7, r0
 80083d6:	d905      	bls.n	80083e4 <handlerSensorData+0x13c>
 80083d8:	4b21      	ldr	r3, [pc, #132]	; (8008460 <handlerSensorData+0x1b8>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	2a09      	cmp	r2, #9
 80083de:	dc01      	bgt.n	80083e4 <handlerSensorData+0x13c>
				cutOff++;
 80083e0:	3201      	adds	r2, #1
 80083e2:	e013      	b.n	800840c <handlerSensorData+0x164>
			} else {
				if(!g_config.disableEma) {
 80083e4:	491b      	ldr	r1, [pc, #108]	; (8008454 <handlerSensorData+0x1ac>)
 80083e6:	7ec8      	ldrb	r0, [r1, #27]
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d10b      	bne.n	8008404 <handlerSensorData+0x15c>
					addStock(avrFreq, &SensorEMA5);
 80083ec:	1c20      	adds	r0, r4, #0
 80083ee:	f7fd fc05 	bl	8005bfc <__aeabi_ui2d>
 80083f2:	4c1c      	ldr	r4, [pc, #112]	; (8008464 <handlerSensorData+0x1bc>)
 80083f4:	1c22      	adds	r2, r4, #0
 80083f6:	f7fe f96b 	bl	80066d0 <addStock>
					avrFreq = SensorEMA5.lastEMA;
 80083fa:	68a0      	ldr	r0, [r4, #8]
 80083fc:	68e1      	ldr	r1, [r4, #12]
 80083fe:	f7fa ffab 	bl	8003358 <__aeabi_d2uiz>
 8008402:	1c04      	adds	r4, r0, #0
				}
				g_appStats.emaFrequency = avrFreq;
 8008404:	4e11      	ldr	r6, [pc, #68]	; (800844c <handlerSensorData+0x1a4>)
				cutOff = 0;
 8008406:	4b16      	ldr	r3, [pc, #88]	; (8008460 <handlerSensorData+0x1b8>)
			} else {
				if(!g_config.disableEma) {
					addStock(avrFreq, &SensorEMA5);
					avrFreq = SensorEMA5.lastEMA;
				}
				g_appStats.emaFrequency = avrFreq;
 8008408:	6274      	str	r4, [r6, #36]	; 0x24
				cutOff = 0;
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e010      	b.n	8008432 <handlerSensorData+0x18a>
			}
		} else {
			if(!g_config.disableEma) {
 8008410:	7edd      	ldrb	r5, [r3, #27]
 8008412:	2d00      	cmp	r5, #0
 8008414:	d10b      	bne.n	800842e <handlerSensorData+0x186>
				addStock(avrFreq, &SensorEMA5);
 8008416:	1c20      	adds	r0, r4, #0
 8008418:	f7fd fbf0 	bl	8005bfc <__aeabi_ui2d>
 800841c:	4c11      	ldr	r4, [pc, #68]	; (8008464 <handlerSensorData+0x1bc>)
 800841e:	1c22      	adds	r2, r4, #0
 8008420:	f7fe f956 	bl	80066d0 <addStock>
				avrFreq = SensorEMA5.lastEMA;
 8008424:	68a0      	ldr	r0, [r4, #8]
 8008426:	68e1      	ldr	r1, [r4, #12]
 8008428:	f7fa ff96 	bl	8003358 <__aeabi_d2uiz>
 800842c:	1c04      	adds	r4, r0, #0
			}
			g_appStats.emaFrequency = avrFreq;
 800842e:	4f07      	ldr	r7, [pc, #28]	; (800844c <handlerSensorData+0x1a4>)
 8008430:	627c      	str	r4, [r7, #36]	; 0x24
		}

		lastFreg = avrFreq;
 8008432:	4a0a      	ldr	r2, [pc, #40]	; (800845c <handlerSensorData+0x1b4>)
 8008434:	6014      	str	r4, [r2, #0]
	}
}
 8008436:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008438:	9999999a 	.word	0x9999999a
 800843c:	3ff19999 	.word	0x3ff19999
 8008440:	cccccccd 	.word	0xcccccccd
 8008444:	3feccccc 	.word	0x3feccccc
 8008448:	20000754 	.word	0x20000754
 800844c:	200009a8 	.word	0x200009a8
 8008450:	2000085c 	.word	0x2000085c
 8008454:	20000a14 	.word	0x20000a14
 8008458:	20000500 	.word	0x20000500
 800845c:	20000874 	.word	0x20000874
 8008460:	20000cf0 	.word	0x20000cf0
 8008464:	20000510 	.word	0x20000510

08008468 <IWDG_init>:
}

/*In this case the refresh window is:
  (2000-1000) / (LSI/16) = ~400 ms < refresh window < 2000 / (LSI/16) = ~800 ms
  */
void IWDG_init(void){
 8008468:	b508      	push	{r3, lr}
	IWDG_Enable();
 800846a:	f001 f9d1 	bl	8009810 <IWDG_Enable>
	/* Enable write access to IWDG_PR and IWDG_RLR registers */
	IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
 800846e:	480a      	ldr	r0, [pc, #40]	; (8008498 <IWDG_init+0x30>)
 8008470:	f001 f9b6 	bl	80097e0 <IWDG_WriteAccessCmd>
	/* Set IWDG Prescaler value to 16 */
	IWDG_SetPrescaler(IWDG_Prescaler_16);
 8008474:	2002      	movs	r0, #2
 8008476:	f001 f9b9 	bl	80097ec <IWDG_SetPrescaler>
	/* Set IWDG Reload value to 2000 */
	IWDG_SetReload(2000);
 800847a:	20fa      	movs	r0, #250	; 0xfa
 800847c:	00c0      	lsls	r0, r0, #3
 800847e:	f001 f9bb 	bl	80097f8 <IWDG_SetReload>
	/* Wait until RVU flag is reset to be sure that the reload value
	update operation is completed */
	while(IWDG_GetFlagStatus(IWDG_FLAG_RVU) != RESET);
 8008482:	2002      	movs	r0, #2
 8008484:	f001 f9cc 	bl	8009820 <IWDG_GetFlagStatus>
 8008488:	2800      	cmp	r0, #0
 800848a:	d1fa      	bne.n	8008482 <IWDG_init+0x1a>
	/* Set the IWDG window value to 1000 */
	IWDG_SetWindowValue(1000);
 800848c:	21fa      	movs	r1, #250	; 0xfa
 800848e:	0088      	lsls	r0, r1, #2
 8008490:	f001 f9b8 	bl	8009804 <IWDG_SetWindowValue>
}
 8008494:	bd08      	pop	{r3, pc}
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	00005555 	.word	0x00005555

0800849c <main>:
		lastFreg = avrFreq;
	}
}

int roll_t, pith_t;
int main(void) {
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	b0c6      	sub	sp, #280	; 0x118
#ifdef USING_BOOTLOADER
	uint32_t i = 0;
	for (i = 0; i < 48; i++) {
 80084a0:	2300      	movs	r3, #0
		VectorTable[i] = *(__IO uint32_t*) (APPLICATION_ADDRESS + (i << 2));
 80084a2:	4d68      	ldr	r5, [pc, #416]	; (8008644 <main+0x1a8>)
 80084a4:	009a      	lsls	r2, r3, #2
 80084a6:	1954      	adds	r4, r2, r5
 80084a8:	6820      	ldr	r0, [r4, #0]
 80084aa:	4967      	ldr	r1, [pc, #412]	; (8008648 <main+0x1ac>)

int roll_t, pith_t;
int main(void) {
#ifdef USING_BOOTLOADER
	uint32_t i = 0;
	for (i = 0; i < 48; i++) {
 80084ac:	3301      	adds	r3, #1
		VectorTable[i] = *(__IO uint32_t*) (APPLICATION_ADDRESS + (i << 2));
 80084ae:	5050      	str	r0, [r2, r1]

int roll_t, pith_t;
int main(void) {
#ifdef USING_BOOTLOADER
	uint32_t i = 0;
	for (i = 0; i < 48; i++) {
 80084b0:	2b30      	cmp	r3, #48	; 0x30
 80084b2:	d1f6      	bne.n	80084a2 <main+0x6>
		VectorTable[i] = *(__IO uint32_t*) (APPLICATION_ADDRESS + (i << 2));
	}

	/* Enable the SYSCFG peripheral clock*/
	RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80084b4:	2001      	movs	r0, #1
 80084b6:	1c01      	adds	r1, r0, #0
 80084b8:	f001 fade 	bl	8009a78 <RCC_APB2PeriphResetCmd>
	/* Remap SRAM at 0x00000000 */
	SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SRAM);
 80084bc:	2003      	movs	r0, #3
 80084be:	f001 fb27 	bl	8009b10 <SYSCFG_MemoryRemapConfig>
#endif

#if SKS_DEBUG_NOW
	g_appStats.debugOn = 1;
#else
	g_appStats.debugOn = 0;
 80084c2:	4962      	ldr	r1, [pc, #392]	; (800864c <main+0x1b0>)
 80084c4:	2500      	movs	r5, #0
 80084c6:	314d      	adds	r1, #77	; 0x4d
 80084c8:	700d      	strb	r5, [r1, #0]
	/* Set the IWDG window value to 1000 */
	IWDG_SetWindowValue(1000);
}

void static setup(void){
	SystemInit();
 80084ca:	f000 fceb 	bl	8008ea4 <SystemInit>
//	xprintf("Init done!\r\n");
}

static void sysTick_clock(void){

	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 80084ce:	2004      	movs	r0, #4
 80084d0:	f001 f9d8 	bl	8009884 <SysTick_CLKSourceConfig>
	if (SysTick_Config(SystemCoreClock / 1000))
 80084d4:	485e      	ldr	r0, [pc, #376]	; (8008650 <main+0x1b4>)
 80084d6:	26fa      	movs	r6, #250	; 0xfa
 80084d8:	6800      	ldr	r0, [r0, #0]
 80084da:	00b1      	lsls	r1, r6, #2
 80084dc:	f7fa fe34 	bl	8003148 <__aeabi_uidiv>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80084e0:	4b5c      	ldr	r3, [pc, #368]	; (8008654 <main+0x1b8>)
 80084e2:	3801      	subs	r0, #1
 80084e4:	4298      	cmp	r0, r3
 80084e6:	d82a      	bhi.n	800853e <main+0xa2>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80084e8:	4b5b      	ldr	r3, [pc, #364]	; (8008658 <main+0x1bc>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80084ea:	4c5c      	ldr	r4, [pc, #368]	; (800865c <main+0x1c0>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80084ec:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80084ee:	6a20      	ldr	r0, [r4, #32]
 80084f0:	22c0      	movs	r2, #192	; 0xc0
 80084f2:	0206      	lsls	r6, r0, #8
 80084f4:	0a31      	lsrs	r1, r6, #8
 80084f6:	0610      	lsls	r0, r2, #24
 80084f8:	4308      	orrs	r0, r1
 80084fa:	6220      	str	r0, [r4, #32]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084fc:	2607      	movs	r6, #7
}

void static setup(void){
	SystemInit();
	sysTick_clock();
	PC_uartInit(PC_BAUDRATE);
 80084fe:	2096      	movs	r0, #150	; 0x96
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8008500:	609d      	str	r5, [r3, #8]
 8008502:	40b0      	lsls	r0, r6
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008504:	601e      	str	r6, [r3, #0]
 8008506:	f000 fdd5 	bl	80090b4 <PC_uartInit>

	//init flash
	FlashInit();
 800850a:	f7ff f876 	bl	80075fa <FlashInit>
	load_config();
 800850e:	f7ff f8fd 	bl	800770c <load_config>

	xdev_out(PC_uart_putChar);
 8008512:	4a53      	ldr	r2, [pc, #332]	; (8008660 <main+0x1c4>)
 8008514:	4b53      	ldr	r3, [pc, #332]	; (8008664 <main+0x1c8>)
 8008516:	1c26      	adds	r6, r4, #0
 8008518:	601a      	str	r2, [r3, #0]
	timeInit();
 800851a:	f000 fd3d 	bl	8008f98 <timeInit>
	internalTempInit();
 800851e:	f7ff f945 	bl	80077ac <internalTempInit>
		while (1);
}

static void LSM6DS3_init(void){
	uint8_t test =0;
	LSM6DS3_Initialize(LSM6DS3_SPI,LSM6DS3_DEFAULT_TIMEOUT);
 8008522:	2164      	movs	r1, #100	; 0x64
 8008524:	4850      	ldr	r0, [pc, #320]	; (8008668 <main+0x1cc>)
 8008526:	f7fe fc23 	bl	8006d70 <LSM6DS3_Initialize>
	delay_ms(200);
 800852a:	20c8      	movs	r0, #200	; 0xc8
 800852c:	f7ff f83e 	bl	80075ac <delay_ms>

	if(LSM6DS3_Detect(10) == LSM6DS3_OK)
 8008530:	200a      	movs	r0, #10
 8008532:	f7fe fc29 	bl	8006d88 <LSM6DS3_Detect>
 8008536:	1c02      	adds	r2, r0, #0
 8008538:	42a8      	cmp	r0, r5
 800853a:	d10f      	bne.n	800855c <main+0xc0>
 800853c:	e000      	b.n	8008540 <main+0xa4>
 800853e:	e7fe      	b.n	800853e <main+0xa2>
	{
		//xprintf("LSM6DS3 found\r\n");
		if(LSM6DS3_XL_Start(XL_1666Hz, XL_RANGE_16G, XL_FILTER_400Hz)==LSM6DS3_FAIL){
 8008540:	2101      	movs	r1, #1
 8008542:	2008      	movs	r0, #8
 8008544:	f7fe fc42 	bl	8006dcc <LSM6DS3_XL_Start>
			//xprintf("LSM6DS3_XL_Start fail\r\n");
		}
		else{
			//xprintf("LSM6DS3_XL_Start ok\r\n");
		}
		delay_ms(10);
 8008548:	200a      	movs	r0, #10
 800854a:	f7ff f82f 	bl	80075ac <delay_ms>

		if(LSM6DS3_GS_Start(GS_1666Hz, GS_RANGE_2000dps)!=LSM6DS3_OK){
 800854e:	2008      	movs	r0, #8
 8008550:	2106      	movs	r1, #6
 8008552:	f7fe fc5b 	bl	8006e0c <LSM6DS3_GS_Start>
			//xprintf("LSM6DS3_GS_Start fail\r\n");
		}
		else{
			//xprintf("LSM6DS3_GS_Start ok\r\n");
		}
		delay_ms(10);
 8008556:	200a      	movs	r0, #10
 8008558:	f7ff f828 	bl	80075ac <delay_ms>
	xdev_out(PC_uart_putChar);
	timeInit();
	internalTempInit();

	LSM6DS3_init();
	Start_Kalman_Algorithm(10, 1000000.0f);
 800855c:	4843      	ldr	r0, [pc, #268]	; (800866c <main+0x1d0>)
 800855e:	4944      	ldr	r1, [pc, #272]	; (8008670 <main+0x1d4>)
 8008560:	f7fe f8ce 	bl	8006700 <Start_Kalman_Algorithm>

	IWDG_init();
 8008564:	f7ff ff80 	bl	8008468 <IWDG_init>
	g_appStats.debugOn = 0;
#endif

	setup();

	xprintf("\r\nSystem ready (%s)\r\n", APP_VERSION);
 8008568:	4842      	ldr	r0, [pc, #264]	; (8008674 <main+0x1d8>)
 800856a:	4943      	ldr	r1, [pc, #268]	; (8008678 <main+0x1dc>)
 800856c:	f000 ff18 	bl	80093a0 <xprintf>
	xprintf("\r\nFULL=%u EMPTY=%u timeout=%d fM=%d interval=%d dX=%d dY=%d DeviceID=%s\r\n\r\n", g_config.fullValue, g_config.emptyValue, g_config.timeout3D, g_config.filterMode, g_config.interval, g_config.diffX, g_config.diffY, g_config.deviceCode);
 8008570:	4d42      	ldr	r5, [pc, #264]	; (800867c <main+0x1e0>)
 8008572:	7dec      	ldrb	r4, [r5, #23]
 8008574:	8aab      	ldrh	r3, [r5, #20]
 8008576:	9400      	str	r4, [sp, #0]
 8008578:	7ea8      	ldrb	r0, [r5, #26]
 800857a:	1cac      	adds	r4, r5, #2
 800857c:	9001      	str	r0, [sp, #4]
 800857e:	7e2a      	ldrb	r2, [r5, #24]
 8008580:	483f      	ldr	r0, [pc, #252]	; (8008680 <main+0x1e4>)
 8008582:	9202      	str	r2, [sp, #8]
 8008584:	7e69      	ldrb	r1, [r5, #25]
 8008586:	9404      	str	r4, [sp, #16]
 8008588:	9103      	str	r1, [sp, #12]
 800858a:	68e9      	ldr	r1, [r5, #12]
 800858c:	692a      	ldr	r2, [r5, #16]
 800858e:	f000 ff07 	bl	80093a0 <xprintf>

	while(1){
		if(g_appStats.resetNow) {
 8008592:	4b2e      	ldr	r3, [pc, #184]	; (800864c <main+0x1b0>)
 8008594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00b      	beq.n	80085b2 <main+0x116>
			if(ulSecCount - g_appStats.resetNow >= 3) {
 800859a:	4a3a      	ldr	r2, [pc, #232]	; (8008684 <main+0x1e8>)
 800859c:	6811      	ldr	r1, [r2, #0]
 800859e:	1acd      	subs	r5, r1, r3
 80085a0:	2d02      	cmp	r5, #2
 80085a2:	d906      	bls.n	80085b2 <main+0x116>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 80085a4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 80085a8:	4837      	ldr	r0, [pc, #220]	; (8008688 <main+0x1ec>)
 80085aa:	60f0      	str	r0, [r6, #12]
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	e7fe      	b.n	80085b0 <main+0x114>
				NVIC_SystemReset();
				return 0;
			}
		}

		Kalman_SetFlag();
 80085b2:	f7fe fb85 	bl	8006cc0 <Kalman_SetFlag>
	xprintf("GS			%d-%d-%d\r\n",LSM6DS3_GetGS_X_Int16(),LSM6DS3_GetGS_Y_Int16(),LSM6DS3_GetGS_Z_Int16());
}


static void LSM6DS3_get_angle(void){
	char buf[255]= {0};
 80085b6:	2100      	movs	r1, #0
 80085b8:	22ff      	movs	r2, #255	; 0xff
 80085ba:	a806      	add	r0, sp, #24
 80085bc:	f7fd fe1e 	bl	80061fc <memset>

	if(Kalman_GetFlag()) {
 80085c0:	f7fe fb84 	bl	8006ccc <Kalman_GetFlag>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d024      	beq.n	8008612 <main+0x176>
		//xprintf("%s-%d\r\n",__func__,__LINE__);
		if(LSM6DS3_IMU_GetMeasurements()==LSM6DS3_OK){
 80085c8:	f7fe fc50 	bl	8006e6c <LSM6DS3_IMU_GetMeasurements>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d101      	bne.n	80085d4 <main+0x138>
			Execute_Kalman_Filter();
 80085d0:	f7fe f93e 	bl	8006850 <Execute_Kalman_Filter>
		}

		if (g_appStats.last_send_data < ulMiliCount) {
 80085d4:	4d2d      	ldr	r5, [pc, #180]	; (800868c <main+0x1f0>)
 80085d6:	4c1d      	ldr	r4, [pc, #116]	; (800864c <main+0x1b0>)
 80085d8:	682b      	ldr	r3, [r5, #0]
 80085da:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80085dc:	4299      	cmp	r1, r3
 80085de:	d216      	bcs.n	800860e <main+0x172>
			memset(buf, 0, sizeof(buf));
 80085e0:	2100      	movs	r1, #0
 80085e2:	22ff      	movs	r2, #255	; 0xff
 80085e4:	a806      	add	r0, sp, #24
 80085e6:	f7fd fe09 	bl	80061fc <memset>
			g_appStats.lsm6ds3.roll = Kalman_GetRoll();
 80085ea:	f7fe f91f 	bl	800682c <Kalman_GetRoll>
 80085ee:	6020      	str	r0, [r4, #0]
			g_appStats.lsm6ds3.pitch = Kalman_GetPitch();
 80085f0:	f7fe f916 	bl	8006820 <Kalman_GetPitch>
 80085f4:	6060      	str	r0, [r4, #4]
			g_appStats.lsm6ds3.yaw = Kalman_Getyaw();
 80085f6:	f7fe f91f 	bl	8006838 <Kalman_Getyaw>
 80085fa:	60a0      	str	r0, [r4, #8]
			g_appStats.lsm6ds3.T = LSM6DS3_Temperature_Int16();
 80085fc:	f7fe fc94 	bl	8006f28 <LSM6DS3_Temperature_Int16>
 8008600:	f7fb fc94 	bl	8003f2c <__aeabi_i2f>
					(int) g_appStats.lsm6ds3.roll,
					(int) g_appStats.lsm6ds3.pitch,
					(int) g_appStats.lsm6ds3.yaw, (int) g_appStats.lsm6ds3.T);
#endif

			g_appStats.last_send_data = ulMiliCount + 500;
 8008604:	682d      	ldr	r5, [r5, #0]
		if (g_appStats.last_send_data < ulMiliCount) {
			memset(buf, 0, sizeof(buf));
			g_appStats.lsm6ds3.roll = Kalman_GetRoll();
			g_appStats.lsm6ds3.pitch = Kalman_GetPitch();
			g_appStats.lsm6ds3.yaw = Kalman_Getyaw();
			g_appStats.lsm6ds3.T = LSM6DS3_Temperature_Int16();
 8008606:	60e0      	str	r0, [r4, #12]
					(int) g_appStats.lsm6ds3.roll,
					(int) g_appStats.lsm6ds3.pitch,
					(int) g_appStats.lsm6ds3.yaw, (int) g_appStats.lsm6ds3.T);
#endif

			g_appStats.last_send_data = ulMiliCount + 500;
 8008608:	35f5      	adds	r5, #245	; 0xf5
 800860a:	35ff      	adds	r5, #255	; 0xff
 800860c:	6565      	str	r5, [r4, #84]	; 0x54
		}

		Kalman_ClearFlag();
 800860e:	f7fe fb63 	bl	8006cd8 <Kalman_ClearFlag>
		}

		Kalman_SetFlag();
		LSM6DS3_get_angle();

		if(g_appStats.processPcCommand) {
 8008612:	4d0e      	ldr	r5, [pc, #56]	; (800864c <main+0x1b0>)
 8008614:	1c2c      	adds	r4, r5, #0
 8008616:	3466      	adds	r4, #102	; 0x66
 8008618:	7822      	ldrb	r2, [r4, #0]
 800861a:	2a00      	cmp	r2, #0
 800861c:	d003      	beq.n	8008626 <main+0x18a>
			process_command_from_pc();
 800861e:	f7ff fe33 	bl	8008288 <process_command_from_pc>
			g_appStats.processPcCommand = 0;
 8008622:	2000      	movs	r0, #0
 8008624:	7020      	strb	r0, [r4, #0]
		}

	    cleanWDT();

	    if(g_appStats.freqUpdated) {
 8008626:	1c2c      	adds	r4, r5, #0
 8008628:	3464      	adds	r4, #100	; 0x64
		if(g_appStats.processPcCommand) {
			process_command_from_pc();
			g_appStats.processPcCommand = 0;
		}

	    cleanWDT();
 800862a:	f7ff f965 	bl	80078f8 <cleanWDT>

	    if(g_appStats.freqUpdated) {
 800862e:	7821      	ldrb	r1, [r4, #0]
 8008630:	2900      	cmp	r1, #0
 8008632:	d003      	beq.n	800863c <main+0x1a0>
	    	handlerSensorData();
 8008634:	f7ff fe38 	bl	80082a8 <handlerSensorData>
	    	g_appStats.freqUpdated = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	7023      	strb	r3, [r4, #0]
	    }

	    output_data();
 800863c:	f7ff fa24 	bl	8007a88 <output_data>
			xprintf("%d		%d		%d\r\n", Capture, g_appStats.frequency, interrupt_count);
			last_check_time = ulMiliCount + 500;
		}
#endif

	}
 8008640:	e7a7      	b.n	8008592 <main+0xf6>
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	08002800 	.word	0x08002800
 8008648:	20000000 	.word	0x20000000
 800864c:	200009a8 	.word	0x200009a8
 8008650:	200005c4 	.word	0x200005c4
 8008654:	00ffffff 	.word	0x00ffffff
 8008658:	e000e010 	.word	0xe000e010
 800865c:	e000ed00 	.word	0xe000ed00
 8008660:	0800917d 	.word	0x0800917d
 8008664:	20001580 	.word	0x20001580
 8008668:	40003800 	.word	0x40003800
 800866c:	41200000 	.word	0x41200000
 8008670:	49742400 	.word	0x49742400
 8008674:	0800a3d3 	.word	0x0800a3d3
 8008678:	0800a14c 	.word	0x0800a14c
 800867c:	20000a14 	.word	0x20000a14
 8008680:	0800a3e9 	.word	0x0800a3e9
 8008684:	20000880 	.word	0x20000880
 8008688:	05fa0004 	.word	0x05fa0004
 800868c:	2000087c 	.word	0x2000087c

08008690 <ustrncpy>:
//! \return Returns \e pcDst.
//
//*****************************************************************************
char *
ustrncpy (char *pcDst, const char *pcSrc, int iNum)
{
 8008690:	b530      	push	{r4, r5, lr}
    //ASSERT(pcDst);

    //
    // Start at the beginning of the source string.
    //
    iCount = 0;
 8008692:	2300      	movs	r3, #0

    //
    // Copy the source string until we run out of source characters or
    // destination space.
    //
    while(iNum && pcSrc[iCount])
 8008694:	e002      	b.n	800869c <ustrncpy+0xc>
    {
        pcDst[iCount] = pcSrc[iCount];
 8008696:	54c4      	strb	r4, [r0, r3]
        iCount++;
        iNum--;
 8008698:	3a01      	subs	r2, #1
    // destination space.
    //
    while(iNum && pcSrc[iCount])
    {
        pcDst[iCount] = pcSrc[iCount];
        iCount++;
 800869a:	3301      	adds	r3, #1

    //
    // Copy the source string until we run out of source characters or
    // destination space.
    //
    while(iNum && pcSrc[iCount])
 800869c:	2a00      	cmp	r2, #0
 800869e:	d101      	bne.n	80086a4 <ustrncpy+0x14>
//!
//! \return Returns \e pcDst.
//
//*****************************************************************************
char *
ustrncpy (char *pcDst, const char *pcSrc, int iNum)
 80086a0:	2100      	movs	r1, #0
 80086a2:	e007      	b.n	80086b4 <ustrncpy+0x24>

    //
    // Copy the source string until we run out of source characters or
    // destination space.
    //
    while(iNum && pcSrc[iCount])
 80086a4:	5ccc      	ldrb	r4, [r1, r3]
 80086a6:	2c00      	cmp	r4, #0
 80086a8:	d1f5      	bne.n	8008696 <ustrncpy+0x6>
 80086aa:	e7f9      	b.n	80086a0 <ustrncpy+0x10>
//!
//! \return Returns \e pcDst.
//
//*****************************************************************************
char *
ustrncpy (char *pcDst, const char *pcSrc, int iNum)
 80086ac:	18c4      	adds	r4, r0, r3
    //
    // Pad the destination if we are not yet done.
    //
    while(iNum)
    {
        pcDst[iCount++] = (char)0;
 80086ae:	2500      	movs	r5, #0
 80086b0:	5465      	strb	r5, [r4, r1]
 80086b2:	3101      	adds	r1, #1
    }

    //
    // Pad the destination if we are not yet done.
    //
    while(iNum)
 80086b4:	4291      	cmp	r1, r2
 80086b6:	d1f9      	bne.n	80086ac <ustrncpy+0x1c>

    //
    // Pass the destination pointer back to the caller.
    //
    return(pcDst);
}
 80086b8:	bd30      	pop	{r4, r5, pc}
	...

080086bc <uvsnprintf>:
//
//*****************************************************************************
int
uvsnprintf(char *pcBuf, unsigned long ulSize, const char *pcString,
           va_list vaArgP)
{
 80086bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    //
    // Adjust buffer size limit to allow one space for null termination.
    //
    if(ulSize)
    {
        ulSize--;
 80086be:	1c0d      	adds	r5, r1, #0
//
//*****************************************************************************
int
uvsnprintf(char *pcBuf, unsigned long ulSize, const char *pcString,
           va_list vaArgP)
{
 80086c0:	b089      	sub	sp, #36	; 0x24
 80086c2:	1c1c      	adds	r4, r3, #0
    //
    // Adjust buffer size limit to allow one space for null termination.
    //
    if(ulSize)
    {
        ulSize--;
 80086c4:	1e6b      	subs	r3, r5, #1
 80086c6:	419d      	sbcs	r5, r3
//
//*****************************************************************************
int
uvsnprintf(char *pcBuf, unsigned long ulSize, const char *pcString,
           va_list vaArgP)
{
 80086c8:	1c06      	adds	r6, r0, #0
 80086ca:	9202      	str	r2, [sp, #8]
    //
    // Adjust buffer size limit to allow one space for null termination.
    //
    if(ulSize)
    {
        ulSize--;
 80086cc:	1b4d      	subs	r5, r1, r5
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ulIdx; ulIdx /= ulBase)
 80086ce:	2700      	movs	r7, #0
 80086d0:	e12e      	b.n	8008930 <uvsnprintf+0x274>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ulIdx = 0; (pcString[ulIdx] != '%') && (pcString[ulIdx] != '\0');
            ulIdx++)
 80086d2:	9800      	ldr	r0, [sp, #0]
 80086d4:	3001      	adds	r0, #1
 80086d6:	9000      	str	r0, [sp, #0]
    while(*pcString)
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ulIdx = 0; (pcString[ulIdx] != '%') && (pcString[ulIdx] != '\0');
 80086d8:	781a      	ldrb	r2, [r3, #0]
 80086da:	9301      	str	r3, [sp, #4]
 80086dc:	3301      	adds	r3, #1
 80086de:	2a00      	cmp	r2, #0
 80086e0:	d001      	beq.n	80086e6 <uvsnprintf+0x2a>
 80086e2:	2a25      	cmp	r2, #37	; 0x25
 80086e4:	d1f5      	bne.n	80086d2 <uvsnprintf+0x16>
        //
        // Write this portion of the string to the output buffer.  If there are
        // more characters to write than there is space in the buffer, then
        // only write as much as will fit in the buffer.
        //
        if(ulIdx > ulSize)
 80086e6:	9900      	ldr	r1, [sp, #0]
        {
            ustrncpy(pcBuf, pcString, ulSize);
 80086e8:	1c30      	adds	r0, r6, #0
        //
        // Write this portion of the string to the output buffer.  If there are
        // more characters to write than there is space in the buffer, then
        // only write as much as will fit in the buffer.
        //
        if(ulIdx > ulSize)
 80086ea:	42a9      	cmp	r1, r5
 80086ec:	d906      	bls.n	80086fc <uvsnprintf+0x40>
        {
            ustrncpy(pcBuf, pcString, ulSize);
 80086ee:	1c2a      	adds	r2, r5, #0
 80086f0:	9902      	ldr	r1, [sp, #8]
            pcBuf += ulSize;
 80086f2:	1976      	adds	r6, r6, r5
        // more characters to write than there is space in the buffer, then
        // only write as much as will fit in the buffer.
        //
        if(ulIdx > ulSize)
        {
            ustrncpy(pcBuf, pcString, ulSize);
 80086f4:	f7ff ffcc 	bl	8008690 <ustrncpy>
            pcBuf += ulSize;
            ulSize = 0;
 80086f8:	2500      	movs	r5, #0
 80086fa:	e006      	b.n	800870a <uvsnprintf+0x4e>
        }
        else
        {
            ustrncpy(pcBuf, pcString, ulIdx);
 80086fc:	9a00      	ldr	r2, [sp, #0]
 80086fe:	9902      	ldr	r1, [sp, #8]
 8008700:	f7ff ffc6 	bl	8008690 <ustrncpy>
            pcBuf += ulIdx;
 8008704:	9a00      	ldr	r2, [sp, #0]
 8008706:	18b6      	adds	r6, r6, r2
            ulSize -= ulIdx;
 8008708:	1aad      	subs	r5, r5, r2
        //
        // Update the conversion count.  This will be the number of characters
        // that should have been written, even if there was not room in the
        // buffer.
        //
        iConvertCount += ulIdx;
 800870a:	9800      	ldr	r0, [sp, #0]
 800870c:	19c7      	adds	r7, r0, r7
        pcString += ulIdx;

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 800870e:	9801      	ldr	r0, [sp, #4]
 8008710:	7803      	ldrb	r3, [r0, #0]
 8008712:	9002      	str	r0, [sp, #8]
 8008714:	2b25      	cmp	r3, #37	; 0x25
 8008716:	d000      	beq.n	800871a <uvsnprintf+0x5e>
 8008718:	e10a      	b.n	8008930 <uvsnprintf+0x274>
        {
            //
            // Skip the %.
            //
            pcString++;
 800871a:	3001      	adds	r0, #1
            //
            // Set the digit count to zero, and the fill character to space
            // (that is, to the defaults).
            //
            ulCount = 0;
            cFill = ' ';
 800871c:	2120      	movs	r1, #32
        pcString += ulIdx;

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
 800871e:	1c2a      	adds	r2, r5, #0
        {
            //
            // Skip the %.
            //
            pcString++;
 8008720:	9002      	str	r0, [sp, #8]
            //
            // Set the digit count to zero, and the fill character to space
            // (that is, to the defaults).
            //
            ulCount = 0;
            cFill = ' ';
 8008722:	9106      	str	r1, [sp, #24]

            //
            // Set the digit count to zero, and the fill character to space
            // (that is, to the defaults).
            //
            ulCount = 0;
 8008724:	2300      	movs	r3, #0
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 8008726:	9802      	ldr	r0, [sp, #8]

            //
            // Set the digit count to zero, and the fill character to space
            // (that is, to the defaults).
            //
            ulCount = 0;
 8008728:	9300      	str	r3, [sp, #0]
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
 800872a:	7803      	ldrb	r3, [r0, #0]
 800872c:	3001      	adds	r0, #1
 800872e:	9002      	str	r0, [sp, #8]
 8008730:	2b64      	cmp	r3, #100	; 0x64
 8008732:	d034      	beq.n	800879e <uvsnprintf+0xe2>
 8008734:	d80d      	bhi.n	8008752 <uvsnprintf+0x96>
 8008736:	2b39      	cmp	r3, #57	; 0x39
 8008738:	d805      	bhi.n	8008746 <uvsnprintf+0x8a>
 800873a:	2b30      	cmp	r3, #48	; 0x30
 800873c:	d218      	bcs.n	8008770 <uvsnprintf+0xb4>
 800873e:	2b25      	cmp	r3, #37	; 0x25
 8008740:	d000      	beq.n	8008744 <uvsnprintf+0x88>
 8008742:	e0e5      	b.n	8008910 <uvsnprintf+0x254>
 8008744:	e0dc      	b.n	8008900 <uvsnprintf+0x244>
 8008746:	2b58      	cmp	r3, #88	; 0x58
 8008748:	d06f      	beq.n	800882a <uvsnprintf+0x16e>
 800874a:	2b63      	cmp	r3, #99	; 0x63
 800874c:	d000      	beq.n	8008750 <uvsnprintf+0x94>
 800874e:	e0df      	b.n	8008910 <uvsnprintf+0x254>
 8008750:	e01b      	b.n	800878a <uvsnprintf+0xce>
 8008752:	2b73      	cmp	r3, #115	; 0x73
 8008754:	d030      	beq.n	80087b8 <uvsnprintf+0xfc>
 8008756:	d805      	bhi.n	8008764 <uvsnprintf+0xa8>
 8008758:	2b69      	cmp	r3, #105	; 0x69
 800875a:	d020      	beq.n	800879e <uvsnprintf+0xe2>
 800875c:	2b70      	cmp	r3, #112	; 0x70
 800875e:	d000      	beq.n	8008762 <uvsnprintf+0xa6>
 8008760:	e0d6      	b.n	8008910 <uvsnprintf+0x254>
 8008762:	e062      	b.n	800882a <uvsnprintf+0x16e>
 8008764:	2b75      	cmp	r3, #117	; 0x75
 8008766:	d057      	beq.n	8008818 <uvsnprintf+0x15c>
 8008768:	2b78      	cmp	r3, #120	; 0x78
 800876a:	d000      	beq.n	800876e <uvsnprintf+0xb2>
 800876c:	e0d0      	b.n	8008910 <uvsnprintf+0x254>
 800876e:	e05c      	b.n	800882a <uvsnprintf+0x16e>
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ulCount == 0))
 8008770:	2b30      	cmp	r3, #48	; 0x30
 8008772:	d104      	bne.n	800877e <uvsnprintf+0xc2>
 8008774:	9900      	ldr	r1, [sp, #0]
 8008776:	2900      	cmp	r1, #0
 8008778:	d101      	bne.n	800877e <uvsnprintf+0xc2>
                    {
                        cFill = '0';
 800877a:	2030      	movs	r0, #48	; 0x30
 800877c:	9006      	str	r0, [sp, #24]
                    }

                    //
                    // Update the digit count.
                    //
                    ulCount *= 10;
 800877e:	9800      	ldr	r0, [sp, #0]
 8008780:	210a      	movs	r1, #10
 8008782:	4341      	muls	r1, r0
                    ulCount += pcString[-1] - '0';
 8008784:	3930      	subs	r1, #48	; 0x30
 8008786:	18cb      	adds	r3, r1, r3
 8008788:	e7cd      	b.n	8008726 <uvsnprintf+0x6a>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 800878a:	1d23      	adds	r3, r4, #4
 800878c:	6821      	ldr	r1, [r4, #0]

                    //
                    // Copy the character to the output buffer, if there is
                    // room.  Update the buffer size remaining.
                    //
                    if(ulSize != 0)
 800878e:	2d00      	cmp	r5, #0
 8008790:	d002      	beq.n	8008798 <uvsnprintf+0xdc>
                    {
                        *pcBuf++ = (char)ulValue;
 8008792:	7031      	strb	r1, [r6, #0]
                        ulSize--;
 8008794:	1e6a      	subs	r2, r5, #1
                    // Copy the character to the output buffer, if there is
                    // room.  Update the buffer size remaining.
                    //
                    if(ulSize != 0)
                    {
                        *pcBuf++ = (char)ulValue;
 8008796:	3601      	adds	r6, #1
                    }

                    //
                    // Update the conversion count.
                    //
                    iConvertCount++;
 8008798:	3701      	adds	r7, #1
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 800879a:	1c1c      	adds	r4, r3, #0
 800879c:	e0b6      	b.n	800890c <uvsnprintf+0x250>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 800879e:	1d22      	adds	r2, r4, #4
 80087a0:	6824      	ldr	r4, [r4, #0]
 80087a2:	9207      	str	r2, [sp, #28]
 80087a4:	9403      	str	r4, [sp, #12]

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((long)ulValue < 0)
 80087a6:	2c00      	cmp	r4, #0
 80087a8:	da48      	bge.n	800883c <uvsnprintf+0x180>
                    {
                        //
                        // Make the value positive.
                        //
                        ulValue = -(long)ulValue;
 80087aa:	4261      	negs	r1, r4

                        //
                        // Indicate that the value is negative.
                        //
                        ulNeg = 1;
 80087ac:	2301      	movs	r3, #1
                    }

                    //
                    // Set the base to 10.
                    //
                    ulBase = 10;
 80087ae:	240a      	movs	r4, #10
                    if((long)ulValue < 0)
                    {
                        //
                        // Make the value positive.
                        //
                        ulValue = -(long)ulValue;
 80087b0:	9103      	str	r1, [sp, #12]

                        //
                        // Indicate that the value is negative.
                        //
                        ulNeg = 1;
 80087b2:	9301      	str	r3, [sp, #4]
                    }

                    //
                    // Set the base to 10.
                    //
                    ulBase = 10;
 80087b4:	9404      	str	r4, [sp, #16]
 80087b6:	e045      	b.n	8008844 <uvsnprintf+0x188>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 80087b8:	1d22      	adds	r2, r4, #4
 80087ba:	6821      	ldr	r1, [r4, #0]
 80087bc:	9201      	str	r2, [sp, #4]

                    //
                    // Determine the length of the string.
                    //
                    for(ulIdx = 0; pcStr[ulIdx] != '\0'; ulIdx++)
 80087be:	2400      	movs	r4, #0
 80087c0:	e000      	b.n	80087c4 <uvsnprintf+0x108>
 80087c2:	3401      	adds	r4, #1
 80087c4:	5d0b      	ldrb	r3, [r1, r4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1fb      	bne.n	80087c2 <uvsnprintf+0x106>
                    //
                    // Update the convert count to include any padding that
                    // should be necessary (regardless of whether we have space
                    // to write it or not).
                    //
                    if(ulCount > ulIdx)
 80087ca:	9a00      	ldr	r2, [sp, #0]
 80087cc:	42a2      	cmp	r2, r4
 80087ce:	d901      	bls.n	80087d4 <uvsnprintf+0x118>
                    {
                        iConvertCount += (ulCount - ulIdx);
 80087d0:	19d7      	adds	r7, r2, r7
 80087d2:	1b3f      	subs	r7, r7, r4
                    // as will fit in the buffer.  Update the output buffer
                    // pointer and the space remaining.
                    //
                    if(ulIdx > ulSize)
                    {
                        ustrncpy(pcBuf, pcStr, ulSize);
 80087d4:	1c30      	adds	r0, r6, #0
                    //
                    // Copy the string to the output buffer.  Only copy as much
                    // as will fit in the buffer.  Update the output buffer
                    // pointer and the space remaining.
                    //
                    if(ulIdx > ulSize)
 80087d6:	42ac      	cmp	r4, r5
 80087d8:	d905      	bls.n	80087e6 <uvsnprintf+0x12a>
                    {
                        ustrncpy(pcBuf, pcStr, ulSize);
 80087da:	1c2a      	adds	r2, r5, #0
                        pcBuf += ulSize;
 80087dc:	1976      	adds	r6, r6, r5
                    // as will fit in the buffer.  Update the output buffer
                    // pointer and the space remaining.
                    //
                    if(ulIdx > ulSize)
                    {
                        ustrncpy(pcBuf, pcStr, ulSize);
 80087de:	f7ff ff57 	bl	8008690 <ustrncpy>
                        pcBuf += ulSize;
                        ulSize = 0;
 80087e2:	2500      	movs	r5, #0
 80087e4:	e015      	b.n	8008812 <uvsnprintf+0x156>
                    }
                    else
                    {
                        ustrncpy(pcBuf, pcStr, ulIdx);
 80087e6:	1c22      	adds	r2, r4, #0
 80087e8:	f7ff ff52 	bl	8008690 <ustrncpy>

                        //
                        // Write any required padding spaces assuming there is
                        // still space in the buffer.
                        //
                        if(ulCount > ulIdx)
 80087ec:	9b00      	ldr	r3, [sp, #0]
                        ulSize = 0;
                    }
                    else
                    {
                        ustrncpy(pcBuf, pcStr, ulIdx);
                        pcBuf += ulIdx;
 80087ee:	1936      	adds	r6, r6, r4
                        ulSize -= ulIdx;
 80087f0:	1b2d      	subs	r5, r5, r4

                        //
                        // Write any required padding spaces assuming there is
                        // still space in the buffer.
                        //
                        if(ulCount > ulIdx)
 80087f2:	42a3      	cmp	r3, r4
 80087f4:	d90d      	bls.n	8008812 <uvsnprintf+0x156>
                        {
                            ulCount -= ulIdx;
 80087f6:	1b1b      	subs	r3, r3, r4
 80087f8:	42ab      	cmp	r3, r5
 80087fa:	d900      	bls.n	80087fe <uvsnprintf+0x142>
 80087fc:	1c2b      	adds	r3, r5, #0
                            if(ulCount > ulSize)
                            {
                                ulCount = ulSize;
                            }
                            ulSize =- ulCount;
 80087fe:	425d      	negs	r5, r3

                            while(ulCount--)
 8008800:	1c19      	adds	r1, r3, #0
                        ulSize = 0;
                    }
                    else
                    {
                        ustrncpy(pcBuf, pcStr, ulIdx);
                        pcBuf += ulIdx;
 8008802:	1c32      	adds	r2, r6, #0
                            {
                                ulCount = ulSize;
                            }
                            ulSize =- ulCount;

                            while(ulCount--)
 8008804:	e002      	b.n	800880c <uvsnprintf+0x150>
                            {
                                *pcBuf++ = ' ';
 8008806:	2020      	movs	r0, #32
 8008808:	7010      	strb	r0, [r2, #0]
 800880a:	3201      	adds	r2, #1
                            {
                                ulCount = ulSize;
                            }
                            ulSize =- ulCount;

                            while(ulCount--)
 800880c:	3901      	subs	r1, #1
 800880e:	d2fa      	bcs.n	8008806 <uvsnprintf+0x14a>
 8008810:	18f6      	adds	r6, r6, r3
                    //
                    // Update the conversion count.  This will be the number of
                    // characters that should have been written, even if there
                    // was not room in the buffer.
                    //
                    iConvertCount += ulIdx;
 8008812:	193f      	adds	r7, r7, r4
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 8008814:	9c01      	ldr	r4, [sp, #4]
                    iConvertCount += ulIdx;

                    //
                    // This command has been handled.
                    //
                    break;
 8008816:	e08b      	b.n	8008930 <uvsnprintf+0x274>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 8008818:	6822      	ldr	r2, [r4, #0]
 800881a:	1d23      	adds	r3, r4, #4

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ulNeg = 0;
 800881c:	2100      	movs	r1, #0
                    ulValue = va_arg(vaArgP, unsigned long);

                    //
                    // Set the base to 10.
                    //
                    ulBase = 10;
 800881e:	240a      	movs	r4, #10
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 8008820:	9307      	str	r3, [sp, #28]
 8008822:	9203      	str	r2, [sp, #12]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ulNeg = 0;
 8008824:	9101      	str	r1, [sp, #4]
                    ulValue = va_arg(vaArgP, unsigned long);

                    //
                    // Set the base to 10.
                    //
                    ulBase = 10;
 8008826:	9404      	str	r4, [sp, #16]
                    ulNeg = 0;

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8008828:	e00c      	b.n	8008844 <uvsnprintf+0x188>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 800882a:	6821      	ldr	r1, [r4, #0]
 800882c:	1d22      	adds	r2, r4, #4

                    //
                    // Set the base to 16.
                    //
                    ulBase = 16;
 800882e:	2010      	movs	r0, #16

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ulNeg = 0;
 8008830:	2400      	movs	r4, #0
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ulValue = va_arg(vaArgP, unsigned long);
 8008832:	9207      	str	r2, [sp, #28]
 8008834:	9103      	str	r1, [sp, #12]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ulNeg = 0;
 8008836:	9401      	str	r4, [sp, #4]
                    ulValue = va_arg(vaArgP, unsigned long);

                    //
                    // Set the base to 16.
                    //
                    ulBase = 16;
 8008838:	9004      	str	r0, [sp, #16]
 800883a:	e003      	b.n	8008844 <uvsnprintf+0x188>
                    {
                        //
                        // Indicate that the value is positive so that a
                        // negative sign isn't inserted.
                        //
                        ulNeg = 0;
 800883c:	2000      	movs	r0, #0
                    }

                    //
                    // Set the base to 10.
                    //
                    ulBase = 10;
 800883e:	230a      	movs	r3, #10
                    {
                        //
                        // Indicate that the value is positive so that a
                        // negative sign isn't inserted.
                        //
                        ulNeg = 0;
 8008840:	9001      	str	r0, [sp, #4]
                    }

                    //
                    // Set the base to 10.
                    //
                    ulBase = 10;
 8008842:	9304      	str	r3, [sp, #16]
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
 8008844:	2401      	movs	r4, #1
 8008846:	9405      	str	r4, [sp, #20]
 8008848:	e003      	b.n	8008852 <uvsnprintf+0x196>
                        (((ulIdx * ulBase) <= ulValue) &&
                         (((ulIdx * ulBase) / ulBase) == ulIdx));
                        ulIdx *= ulBase, ulCount--)
 800884a:	9900      	ldr	r1, [sp, #0]
 800884c:	9405      	str	r4, [sp, #20]
 800884e:	3901      	subs	r1, #1
 8008850:	9100      	str	r1, [sp, #0]
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
                        (((ulIdx * ulBase) <= ulValue) &&
 8008852:	9c04      	ldr	r4, [sp, #16]
 8008854:	9b05      	ldr	r3, [sp, #20]
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
 8008856:	9a03      	ldr	r2, [sp, #12]
                        (((ulIdx * ulBase) <= ulValue) &&
 8008858:	435c      	muls	r4, r3
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
 800885a:	4294      	cmp	r4, r2
 800885c:	d806      	bhi.n	800886c <uvsnprintf+0x1b0>
                        (((ulIdx * ulBase) <= ulValue) &&
                         (((ulIdx * ulBase) / ulBase) == ulIdx));
 800885e:	9904      	ldr	r1, [sp, #16]
 8008860:	1c20      	adds	r0, r4, #0
 8008862:	f7fa fc71 	bl	8003148 <__aeabi_uidiv>
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ulIdx = 1;
                        (((ulIdx * ulBase) <= ulValue) &&
 8008866:	9905      	ldr	r1, [sp, #20]
 8008868:	4288      	cmp	r0, r1
 800886a:	d0ee      	beq.n	800884a <uvsnprintf+0x18e>
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ulNeg)
                    {
                        ulCount--;
 800886c:	9c00      	ldr	r4, [sp, #0]
 800886e:	9801      	ldr	r0, [sp, #4]
 8008870:	1a23      	subs	r3, r4, r0

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ulNeg && (ulSize != 0) && (cFill == '0'))
 8008872:	2800      	cmp	r0, #0
 8008874:	d00d      	beq.n	8008892 <uvsnprintf+0x1d6>
 8008876:	2d00      	cmp	r5, #0
 8008878:	d00b      	beq.n	8008892 <uvsnprintf+0x1d6>
 800887a:	9a06      	ldr	r2, [sp, #24]
 800887c:	2101      	movs	r1, #1
 800887e:	9101      	str	r1, [sp, #4]
 8008880:	2a30      	cmp	r2, #48	; 0x30
 8008882:	d106      	bne.n	8008892 <uvsnprintf+0x1d6>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        *pcBuf++ = '-';
 8008884:	202d      	movs	r0, #45	; 0x2d
 8008886:	7030      	strb	r0, [r6, #0]
                        ulSize--;

                        //
                        // Update the conversion count.
                        //
                        iConvertCount++;
 8008888:	187f      	adds	r7, r7, r1
                    if(ulNeg && (ulSize != 0) && (cFill == '0'))
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        *pcBuf++ = '-';
 800888a:	1876      	adds	r6, r6, r1

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ulNeg = 0;
 800888c:	2100      	movs	r1, #0
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        *pcBuf++ = '-';
                        ulSize--;
 800888e:	3d01      	subs	r5, #1

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ulNeg = 0;
 8008890:	9101      	str	r1, [sp, #4]

                    //
                    // See if there are more characters in the specified field
                    // width than there are in the conversion of this value.
                    //
                    if((ulCount > 1) && (ulCount < 65536))
 8008892:	4c2d      	ldr	r4, [pc, #180]	; (8008948 <uvsnprintf+0x28c>)
 8008894:	1e99      	subs	r1, r3, #2
 8008896:	42a1      	cmp	r1, r4
 8008898:	d80d      	bhi.n	80088b6 <uvsnprintf+0x1fa>
                    {
                        //
                        // Loop through the required padding characters.
                        //
                        for(ulCount--; ulCount; ulCount--)
 800889a:	3b01      	subs	r3, #1
                        {
                            //
                            // Copy the character to the output buffer if there
                            // is room.
                            //
                            if(ulSize != 0)
 800889c:	2d00      	cmp	r5, #0
 800889e:	d005      	beq.n	80088ac <uvsnprintf+0x1f0>
                            {
                                *pcBuf++ = cFill;
 80088a0:	466c      	mov	r4, sp
 80088a2:	2018      	movs	r0, #24
 80088a4:	5d02      	ldrb	r2, [r0, r4]
                                ulSize--;
 80088a6:	3d01      	subs	r5, #1
                            // Copy the character to the output buffer if there
                            // is room.
                            //
                            if(ulSize != 0)
                            {
                                *pcBuf++ = cFill;
 80088a8:	7032      	strb	r2, [r6, #0]
 80088aa:	3601      	adds	r6, #1
                    if((ulCount > 1) && (ulCount < 65536))
                    {
                        //
                        // Loop through the required padding characters.
                        //
                        for(ulCount--; ulCount; ulCount--)
 80088ac:	3b01      	subs	r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1f4      	bne.n	800889c <uvsnprintf+0x1e0>
//! including the NULL termination character, regardless of space in the
//! buffer.
//
//*****************************************************************************
int
uvsnprintf(char *pcBuf, unsigned long ulSize, const char *pcString,
 80088b2:	3701      	adds	r7, #1
 80088b4:	187f      	adds	r7, r7, r1

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ulNeg && (ulSize != 0))
 80088b6:	2d00      	cmp	r5, #0
 80088b8:	d01d      	beq.n	80088f6 <uvsnprintf+0x23a>
 80088ba:	9b01      	ldr	r3, [sp, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01a      	beq.n	80088f6 <uvsnprintf+0x23a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        *pcBuf++ = '-';
 80088c0:	212d      	movs	r1, #45	; 0x2d
 80088c2:	7031      	strb	r1, [r6, #0]
                        ulSize--;
 80088c4:	3d01      	subs	r5, #1
                    if(ulNeg && (ulSize != 0))
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        *pcBuf++ = '-';
 80088c6:	3601      	adds	r6, #1
                        ulSize--;

                        //
                        // Update the conversion count.
                        //
                        iConvertCount++;
 80088c8:	3701      	adds	r7, #1
 80088ca:	e014      	b.n	80088f6 <uvsnprintf+0x23a>
                    {
                        //
                        // Copy the character to the output buffer if there is
                        // room.
                        //
                        if(ulSize != 0)
 80088cc:	2d00      	cmp	r5, #0
 80088ce:	d00b      	beq.n	80088e8 <uvsnprintf+0x22c>
                        {
                            *pcBuf++ = g_pcHex[(ulValue / ulIdx) % ulBase];
 80088d0:	1c21      	adds	r1, r4, #0
 80088d2:	9803      	ldr	r0, [sp, #12]
 80088d4:	f7fa fc38 	bl	8003148 <__aeabi_uidiv>
 80088d8:	9904      	ldr	r1, [sp, #16]
 80088da:	f7fa fc79 	bl	80031d0 <__aeabi_uidivmod>
 80088de:	481b      	ldr	r0, [pc, #108]	; (800894c <uvsnprintf+0x290>)
                            ulSize--;
 80088e0:	3d01      	subs	r5, #1
                        // Copy the character to the output buffer if there is
                        // room.
                        //
                        if(ulSize != 0)
                        {
                            *pcBuf++ = g_pcHex[(ulValue / ulIdx) % ulBase];
 80088e2:	5c42      	ldrb	r2, [r0, r1]
 80088e4:	7032      	strb	r2, [r6, #0]
 80088e6:	3601      	adds	r6, #1
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ulIdx; ulIdx /= ulBase)
 80088e8:	1c20      	adds	r0, r4, #0
 80088ea:	9904      	ldr	r1, [sp, #16]
 80088ec:	f7fa fc2c 	bl	8003148 <__aeabi_uidiv>
                        }

                        //
                        // Update the conversion count.
                        //
                        iConvertCount++;
 80088f0:	3701      	adds	r7, #1
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ulIdx; ulIdx /= ulBase)
 80088f2:	1c04      	adds	r4, r0, #0
 80088f4:	e000      	b.n	80088f8 <uvsnprintf+0x23c>
 80088f6:	9c05      	ldr	r4, [sp, #20]
 80088f8:	2c00      	cmp	r4, #0
 80088fa:	d1e7      	bne.n	80088cc <uvsnprintf+0x210>
 80088fc:	9c07      	ldr	r4, [sp, #28]
 80088fe:	e017      	b.n	8008930 <uvsnprintf+0x274>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    if(ulSize != 0)
 8008900:	2d00      	cmp	r5, #0
 8008902:	d002      	beq.n	800890a <uvsnprintf+0x24e>
                    {
                        *pcBuf++ = pcString[-1];
 8008904:	7033      	strb	r3, [r6, #0]
                        ulSize--;
 8008906:	1e6a      	subs	r2, r5, #1
                    //
                    // Simply write a single %.
                    //
                    if(ulSize != 0)
                    {
                        *pcBuf++ = pcString[-1];
 8008908:	3601      	adds	r6, #1
                    }

                    //
                    // Update the conversion count.
                    //
                    iConvertCount++;
 800890a:	3701      	adds	r7, #1

                    //
                    // This command has been handled.
                    //
                    break;
 800890c:	1c15      	adds	r5, r2, #0
 800890e:	e00f      	b.n	8008930 <uvsnprintf+0x274>
 8008910:	490f      	ldr	r1, [pc, #60]	; (8008950 <uvsnprintf+0x294>)
                    //
                    // Indicate an error.
                    //
                    if(ulSize >= 5)
                    {
                        ustrncpy(pcBuf, "ERROR", 5);
 8008912:	1c30      	adds	r0, r6, #0
                default:
                {
                    //
                    // Indicate an error.
                    //
                    if(ulSize >= 5)
 8008914:	2d04      	cmp	r5, #4
 8008916:	d905      	bls.n	8008924 <uvsnprintf+0x268>
                    {
                        ustrncpy(pcBuf, "ERROR", 5);
 8008918:	2205      	movs	r2, #5
 800891a:	f7ff feb9 	bl	8008690 <ustrncpy>
                        pcBuf += 5;
 800891e:	3605      	adds	r6, #5
                        ulSize -= 5;
 8008920:	3d05      	subs	r5, #5
 8008922:	e004      	b.n	800892e <uvsnprintf+0x272>
                    }
                    else
                    {
                        ustrncpy(pcBuf, "ERROR", ulSize);
 8008924:	1c2a      	adds	r2, r5, #0
 8008926:	f7ff feb3 	bl	8008690 <ustrncpy>
                        pcBuf += ulSize;
 800892a:	1976      	adds	r6, r6, r5
                        ulSize = 0;
 800892c:	2500      	movs	r5, #0
                    }

                    //
                    // Update the conversion count.
                    //
                    iConvertCount += 5;
 800892e:	3705      	adds	r7, #5
    iConvertCount = 0;

    //
    // Loop while there are more characters in the format string.
    //
    while(*pcString)
 8008930:	9802      	ldr	r0, [sp, #8]
 8008932:	7803      	ldrb	r3, [r0, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d003      	beq.n	8008940 <uvsnprintf+0x284>
 8008938:	2100      	movs	r1, #0
 800893a:	1c03      	adds	r3, r0, #0
 800893c:	9100      	str	r1, [sp, #0]
 800893e:	e6cb      	b.n	80086d8 <uvsnprintf+0x1c>

    //
    // Return the number of characters in the full converted string.
    //
    return(iConvertCount);
}
 8008940:	1c38      	adds	r0, r7, #0
    }

    //
    // Null terminate the string in the buffer.
    //
    *pcBuf = 0;
 8008942:	7033      	strb	r3, [r6, #0]

    //
    // Return the number of characters in the full converted string.
    //
    return(iConvertCount);
}
 8008944:	b009      	add	sp, #36	; 0x24
 8008946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008948:	0000fffd 	.word	0x0000fffd
 800894c:	0800a435 	.word	0x0800a435
 8008950:	0800a446 	.word	0x0800a446

08008954 <usnprintf>:
//! including the NULL termination character, regardless of space in the
//! buffer.
//
//*****************************************************************************
int usnprintf(char *pcBuf, unsigned long ulSize, const char *pcString, ...)
{
 8008954:	b40c      	push	{r2, r3}
 8008956:	b507      	push	{r0, r1, r2, lr}
 8008958:	ab04      	add	r3, sp, #16
 800895a:	cb04      	ldmia	r3!, {r2}
    va_list vaArgP;

    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);
 800895c:	9301      	str	r3, [sp, #4]

    //
    // Call vsnprintf to perform the conversion.
    //
    iRet = uvsnprintf(pcBuf, ulSize, pcString, vaArgP);
 800895e:	f7ff fead 	bl	80086bc <uvsnprintf>

    //
    // Return the conversion count.
    //
    return(iRet);
}
 8008962:	b003      	add	sp, #12
 8008964:	bc08      	pop	{r3}
 8008966:	b002      	add	sp, #8
 8008968:	4718      	bx	r3
	...

0800896c <SPI_SendByte>:

	 xprintf("spi2 init done\r\n");
}

static uint8_t SPI_SendByte(SPI_TypeDef *SPIx, uint8_t byte, uint16_t timeout)
{
 800896c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800896e:	9101      	str	r1, [sp, #4]
	uint32_t last_time =0;
  /*!< Loop while DR register in not emplty */
	last_time = ulMiliCount+timeout;
 8008970:	491f      	ldr	r1, [pc, #124]	; (80089f0 <SPI_SendByte+0x84>)

	 xprintf("spi2 init done\r\n");
}

static uint8_t SPI_SendByte(SPI_TypeDef *SPIx, uint8_t byte, uint16_t timeout)
{
 8008972:	1c05      	adds	r5, r0, #0
	uint32_t last_time =0;
  /*!< Loop while DR register in not emplty */
	last_time = ulMiliCount+timeout;
 8008974:	6808      	ldr	r0, [r1, #0]

	 xprintf("spi2 init done\r\n");
}

static uint8_t SPI_SendByte(SPI_TypeDef *SPIx, uint8_t byte, uint16_t timeout)
{
 8008976:	1c17      	adds	r7, r2, #0
	uint32_t last_time =0;
  /*!< Loop while DR register in not emplty */
	last_time = ulMiliCount+timeout;
 8008978:	1813      	adds	r3, r2, r0
 800897a:	9300      	str	r3, [sp, #0]
  while ((SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET) && (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET)){
 800897c:	e009      	b.n	8008992 <SPI_SendByte+0x26>
		if(last_time<ulMiliCount){
 800897e:	6824      	ldr	r4, [r4, #0]
 8008980:	9a00      	ldr	r2, [sp, #0]
 8008982:	42a2      	cmp	r2, r4
 8008984:	d205      	bcs.n	8008992 <SPI_SendByte+0x26>
		xprintf("%s time out \r\n",__func__);
 8008986:	481b      	ldr	r0, [pc, #108]	; (80089f4 <SPI_SendByte+0x88>)
 8008988:	491b      	ldr	r1, [pc, #108]	; (80089f8 <SPI_SendByte+0x8c>)
 800898a:	f000 fd09 	bl	80093a0 <xprintf>
			return 0;
 800898e:	1c30      	adds	r0, r6, #0
 8008990:	e02d      	b.n	80089ee <SPI_SendByte+0x82>
static uint8_t SPI_SendByte(SPI_TypeDef *SPIx, uint8_t byte, uint16_t timeout)
{
	uint32_t last_time =0;
  /*!< Loop while DR register in not emplty */
	last_time = ulMiliCount+timeout;
  while ((SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET) && (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET)){
 8008992:	1c28      	adds	r0, r5, #0
 8008994:	2102      	movs	r1, #2
 8008996:	f001 f8b6 	bl	8009b06 <SPI_I2S_GetFlagStatus>
 800899a:	4c15      	ldr	r4, [pc, #84]	; (80089f0 <SPI_SendByte+0x84>)
 800899c:	1e06      	subs	r6, r0, #0
 800899e:	d105      	bne.n	80089ac <SPI_SendByte+0x40>
 80089a0:	1c28      	adds	r0, r5, #0
 80089a2:	2180      	movs	r1, #128	; 0x80
 80089a4:	f001 f8af 	bl	8009b06 <SPI_I2S_GetFlagStatus>
 80089a8:	2801      	cmp	r0, #1
 80089aa:	d0e8      	beq.n	800897e <SPI_SendByte+0x12>
			return 0;
		}
	}

  /*!< Send byte through the SPI1 peripheral */
  SPI_SendData8(SPIx, byte);
 80089ac:	1c28      	adds	r0, r5, #0
 80089ae:	9901      	ldr	r1, [sp, #4]
 80089b0:	f001 f8a5 	bl	8009afe <SPI_SendData8>
 // SPIx->DR=byte;
  /*!< Wait to receive a byte */
	last_time = ulMiliCount+timeout;
 80089b4:	6826      	ldr	r6, [r4, #0]
 80089b6:	19bf      	adds	r7, r7, r6
  while ((SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET) && (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET)){
 80089b8:	e009      	b.n	80089ce <SPI_SendByte+0x62>
		if(last_time<ulMiliCount){
 80089ba:	480d      	ldr	r0, [pc, #52]	; (80089f0 <SPI_SendByte+0x84>)
 80089bc:	6803      	ldr	r3, [r0, #0]
 80089be:	429f      	cmp	r7, r3
 80089c0:	d205      	bcs.n	80089ce <SPI_SendByte+0x62>
			xprintf("%s time out \r\n",__func__);
 80089c2:	480c      	ldr	r0, [pc, #48]	; (80089f4 <SPI_SendByte+0x88>)
 80089c4:	490c      	ldr	r1, [pc, #48]	; (80089f8 <SPI_SendByte+0x8c>)
 80089c6:	f000 fceb 	bl	80093a0 <xprintf>
			return 0;
 80089ca:	1c20      	adds	r0, r4, #0
 80089cc:	e00f      	b.n	80089ee <SPI_SendByte+0x82>
  /*!< Send byte through the SPI1 peripheral */
  SPI_SendData8(SPIx, byte);
 // SPIx->DR=byte;
  /*!< Wait to receive a byte */
	last_time = ulMiliCount+timeout;
  while ((SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET) && (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET)){
 80089ce:	1c28      	adds	r0, r5, #0
 80089d0:	2101      	movs	r1, #1
 80089d2:	f001 f898 	bl	8009b06 <SPI_I2S_GetFlagStatus>
 80089d6:	1e04      	subs	r4, r0, #0
 80089d8:	d105      	bne.n	80089e6 <SPI_SendByte+0x7a>
 80089da:	1c28      	adds	r0, r5, #0
 80089dc:	2180      	movs	r1, #128	; 0x80
 80089de:	f001 f892 	bl	8009b06 <SPI_I2S_GetFlagStatus>
 80089e2:	2801      	cmp	r0, #1
 80089e4:	d0e9      	beq.n	80089ba <SPI_SendByte+0x4e>
			xprintf("%s time out \r\n",__func__);
			return 0;
		}
	}
  //SPIx->DR;
 SPI_ReceiveData8(SPIx);
 80089e6:	1c28      	adds	r0, r5, #0
 80089e8:	f001 f88b 	bl	8009b02 <SPI_ReceiveData8>
		return 1;
 80089ec:	2001      	movs	r0, #1
}
 80089ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089f0:	2000087c 	.word	0x2000087c
 80089f4:	0800a44c 	.word	0x0800a44c
 80089f8:	0800a46c 	.word	0x0800a46c

080089fc <SPIx_init>:
static uint8_t SPI_SendByte(SPI_TypeDef *SPIx, uint8_t byte, uint16_t timeout);
static uint8_t SPI_readByte(SPI_TypeDef *SPIx, uint8_t*byte, uint16_t timeout);

//////////////////////////////////////////////////////////////////////////////////////////////////////////

void SPIx_init(SPI_TypeDef *SPIx){
 80089fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(SPIx == SPI1)
			SPI1_Init();
	if(SPIx == SPI2)
 80089fe:	4b35      	ldr	r3, [pc, #212]	; (8008ad4 <SPIx_init+0xd8>)
static uint8_t SPI_SendByte(SPI_TypeDef *SPIx, uint8_t byte, uint16_t timeout);
static uint8_t SPI_readByte(SPI_TypeDef *SPIx, uint8_t*byte, uint16_t timeout);

//////////////////////////////////////////////////////////////////////////////////////////////////////////

void SPIx_init(SPI_TypeDef *SPIx){
 8008a00:	b08b      	sub	sp, #44	; 0x2c
 8008a02:	9001      	str	r0, [sp, #4]
	if(SPIx == SPI1)
			SPI1_Init();
	if(SPIx == SPI2)
 8008a04:	4298      	cmp	r0, r3
 8008a06:	d163      	bne.n	8008ad0 <SPIx_init+0xd4>
static void SPI1_Init(void){
}

static void SPI2_Init(void) {
	
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB|RCC_AHBPeriph_GPIOC|RCC_AHBPeriph_GPIOD, ENABLE);
 8008a08:	21f0      	movs	r1, #240	; 0xf0
 8008a0a:	0348      	lsls	r0, r1, #13
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8008a0c:	2480      	movs	r4, #128	; 0x80
static void SPI1_Init(void){
}

static void SPI2_Init(void) {
	
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB|RCC_AHBPeriph_GPIOC|RCC_AHBPeriph_GPIOD, ENABLE);
 8008a0e:	2101      	movs	r1, #1
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Configure SCK and MOSI pins as Alternate Function Push Pull */

	  /* Configure SD_SPI pins: SCK */
	  GPIO_InitStructure.GPIO_Pin = SPI2_SCK_PIN;
 8008a10:	2780      	movs	r7, #128	; 0x80
static void SPI1_Init(void){
}

static void SPI2_Init(void) {
	
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB|RCC_AHBPeriph_GPIOC|RCC_AHBPeriph_GPIOD, ENABLE);
 8008a12:	f001 f807 	bl	8009a24 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Configure SCK and MOSI pins as Alternate Function Push Pull */

	  /* Configure SD_SPI pins: SCK */
	  GPIO_InitStructure.GPIO_Pin = SPI2_SCK_PIN;
 8008a16:	01bd      	lsls	r5, r7, #6
}

static void SPI2_Init(void) {
	
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB|RCC_AHBPeriph_GPIOC|RCC_AHBPeriph_GPIOD, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8008a18:	01e0      	lsls	r0, r4, #7
 8008a1a:	2101      	movs	r1, #1
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Configure SCK and MOSI pins as Alternate Function Push Pull */

	  /* Configure SD_SPI pins: SCK */
	  GPIO_InitStructure.GPIO_Pin = SPI2_SCK_PIN;
 8008a1c:	ac08      	add	r4, sp, #32
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008a1e:	2603      	movs	r6, #3
}

static void SPI2_Init(void) {
	
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB|RCC_AHBPeriph_GPIOC|RCC_AHBPeriph_GPIOD, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 8008a20:	f001 f81c 	bl	8009a5c <RCC_APB1PeriphClockCmd>
	
	/* Configure SCK and MOSI pins as Alternate Function Push Pull */

	  /* Configure SD_SPI pins: SCK */
	  GPIO_InitStructure.GPIO_Pin = SPI2_SCK_PIN;
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8008a24:	2702      	movs	r7, #2
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008a26:	7166      	strb	r6, [r4, #5]
	GPIO_InitTypeDef GPIO_InitStructure;
	
	/* Configure SCK and MOSI pins as Alternate Function Push Pull */

	  /* Configure SD_SPI pins: SCK */
	  GPIO_InitStructure.GPIO_Pin = SPI2_SCK_PIN;
 8008a28:	9508      	str	r5, [sp, #32]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8008a2a:	2601      	movs	r6, #1

	  /* Configure SD_SPI pins: SCK */
	  GPIO_InitStructure.GPIO_Pin = SPI2_SCK_PIN;
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008a2c:	2500      	movs	r5, #0
	  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
	  GPIO_Init(SPI2_SCK_PORT, &GPIO_InitStructure);
 8008a2e:	1c21      	adds	r1, r4, #0
	
	/* Configure SCK and MOSI pins as Alternate Function Push Pull */

	  /* Configure SD_SPI pins: SCK */
	  GPIO_InitStructure.GPIO_Pin = SPI2_SCK_PIN;
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8008a30:	7127      	strb	r7, [r4, #4]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008a32:	71a5      	strb	r5, [r4, #6]
	  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
 8008a34:	71e6      	strb	r6, [r4, #7]
	  GPIO_Init(SPI2_SCK_PORT, &GPIO_InitStructure);
 8008a36:	4828      	ldr	r0, [pc, #160]	; (8008ad8 <SPIx_init+0xdc>)
 8008a38:	f000 fe84 	bl	8009744 <GPIO_Init>

	  /* Configure SD_SPI pins: MISO */
	  GPIO_InitStructure.GPIO_Pin = SPI2_MISO_PIN;
 8008a3c:	2280      	movs	r2, #128	; 0x80
 8008a3e:	01d0      	lsls	r0, r2, #7
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
 8008a40:	2303      	movs	r3, #3
 8008a42:	7163      	strb	r3, [r4, #5]
	  GPIO_Init(SPI2_MISO_PORT, &GPIO_InitStructure);
 8008a44:	1c21      	adds	r1, r4, #0
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
	  GPIO_Init(SPI2_SCK_PORT, &GPIO_InitStructure);

	  /* Configure SD_SPI pins: MISO */
	  GPIO_InitStructure.GPIO_Pin = SPI2_MISO_PIN;
 8008a46:	9008      	str	r0, [sp, #32]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8008a48:	7127      	strb	r7, [r4, #4]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	  GPIO_Init(SPI2_MISO_PORT, &GPIO_InitStructure);
 8008a4a:	4823      	ldr	r0, [pc, #140]	; (8008ad8 <SPIx_init+0xdc>)
 8008a4c:	f000 fe7a 	bl	8009744 <GPIO_Init>

	  /* Configure SD_SPI pins: MOSI */
	  GPIO_InitStructure.GPIO_Pin = SPI2_MOSI_PIN;
 8008a50:	2180      	movs	r1, #128	; 0x80
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
 8008a52:	2003      	movs	r0, #3
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	  GPIO_Init(SPI2_MISO_PORT, &GPIO_InitStructure);

	  /* Configure SD_SPI pins: MOSI */
	  GPIO_InitStructure.GPIO_Pin = SPI2_MOSI_PIN;
 8008a54:	020a      	lsls	r2, r1, #8
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
 8008a56:	7160      	strb	r0, [r4, #5]
	  GPIO_Init(SPI2_MOSI_PORT, &GPIO_InitStructure);
 8008a58:	1c21      	adds	r1, r4, #0
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	  GPIO_Init(SPI2_MISO_PORT, &GPIO_InitStructure);

	  /* Configure SD_SPI pins: MOSI */
	  GPIO_InitStructure.GPIO_Pin = SPI2_MOSI_PIN;
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8008a5a:	7127      	strb	r7, [r4, #4]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	  GPIO_Init(SPI2_MOSI_PORT, &GPIO_InitStructure);
 8008a5c:	481e      	ldr	r0, [pc, #120]	; (8008ad8 <SPIx_init+0xdc>)
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	  GPIO_Init(SPI2_MISO_PORT, &GPIO_InitStructure);

	  /* Configure SD_SPI pins: MOSI */
	  GPIO_InitStructure.GPIO_Pin = SPI2_MOSI_PIN;
 8008a5e:	9208      	str	r2, [sp, #32]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	  GPIO_Init(SPI2_MOSI_PORT, &GPIO_InitStructure);
 8008a60:	f000 fe70 	bl	8009744 <GPIO_Init>

	  /* Configure SD_SPI_CS_PIN pin: SD Card CS pin */
	  GPIO_InitStructure.GPIO_Pin = SPI2_CS_PIN;
 8008a64:	2380      	movs	r3, #128	; 0x80
 8008a66:	0159      	lsls	r1, r3, #5
 8008a68:	9108      	str	r1, [sp, #32]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8008a6a:	7126      	strb	r6, [r4, #4]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
	  GPIO_Init(SPI2_CS_PORT, &GPIO_InitStructure);
 8008a6c:	1c21      	adds	r1, r4, #0
	  GPIO_Init(SPI2_MOSI_PORT, &GPIO_InitStructure);

	  /* Configure SD_SPI_CS_PIN pin: SD Card CS pin */
	  GPIO_InitStructure.GPIO_Pin = SPI2_CS_PIN;
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008a6e:	71a5      	strb	r5, [r4, #6]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8008a70:	71e6      	strb	r6, [r4, #7]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 8008a72:	7166      	strb	r6, [r4, #5]
	  GPIO_Init(SPI2_CS_PORT, &GPIO_InitStructure);
 8008a74:	4818      	ldr	r0, [pc, #96]	; (8008ad8 <SPIx_init+0xdc>)
 8008a76:	f000 fe65 	bl	8009744 <GPIO_Init>

	  /* Connect PXx to SD_SPI_SCK */
	  GPIO_PinAFConfig(SPI2_SCK_PORT, SPI2_SCK_SOURCE, SPI2_SCK_AF);
 8008a7a:	4817      	ldr	r0, [pc, #92]	; (8008ad8 <SPIx_init+0xdc>)
 8008a7c:	210d      	movs	r1, #13
 8008a7e:	1c2a      	adds	r2, r5, #0
 8008a80:	f000 fe9c 	bl	80097bc <GPIO_PinAFConfig>
	  /* Connect PXx to SD_SPI_MISO */
	  GPIO_PinAFConfig(SPI2_MISO_PORT, SPI2_MISO_SOURCE, SPI2_MISO_AF);
 8008a84:	4814      	ldr	r0, [pc, #80]	; (8008ad8 <SPIx_init+0xdc>)
 8008a86:	210e      	movs	r1, #14
 8008a88:	1c2a      	adds	r2, r5, #0
 8008a8a:	f000 fe97 	bl	80097bc <GPIO_PinAFConfig>
	  /* Connect PXx to SD_SPI_MOSI */
	  GPIO_PinAFConfig(SPI2_MOSI_PORT, SPI2_MOSI_SOURCE, SPI2_MOSI_AF);
 8008a8e:	4812      	ldr	r0, [pc, #72]	; (8008ad8 <SPIx_init+0xdc>)
 8008a90:	210f      	movs	r1, #15
 8008a92:	1c2a      	adds	r2, r5, #0
 8008a94:	f000 fe92 	bl	80097bc <GPIO_PinAFConfig>

	  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8008a98:	2282      	movs	r2, #130	; 0x82
	  /* Connect PXx to SD_SPI_MISO */
	  GPIO_PinAFConfig(SPI2_MISO_PORT, SPI2_MISO_SOURCE, SPI2_MISO_AF);
	  /* Connect PXx to SD_SPI_MOSI */
	  GPIO_PinAFConfig(SPI2_MOSI_PORT, SPI2_MOSI_SOURCE, SPI2_MOSI_AF);

	  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8008a9a:	a903      	add	r1, sp, #12
	  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8008a9c:	40b2      	lsls	r2, r6
	  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8008a9e:	20e0      	movs	r0, #224	; 0xe0
	  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_Low;
	  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;//SPI_CPHA_1Edge;
	  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8008aa0:	2480      	movs	r4, #128	; 0x80
	  /* Connect PXx to SD_SPI_MOSI */
	  GPIO_PinAFConfig(SPI2_MOSI_PORT, SPI2_MOSI_SOURCE, SPI2_MOSI_AF);

	  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8008aa2:	00c3      	lsls	r3, r0, #3
	  GPIO_PinAFConfig(SPI2_MISO_PORT, SPI2_MISO_SOURCE, SPI2_MISO_AF);
	  /* Connect PXx to SD_SPI_MOSI */
	  GPIO_PinAFConfig(SPI2_MOSI_PORT, SPI2_MOSI_SOURCE, SPI2_MOSI_AF);

	  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8008aa4:	804a      	strh	r2, [r1, #2]
	  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;//SPI_CPHA_1Edge;
	  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;

	 SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
	 SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
	 SPI_InitStructure.SPI_CRCPolynomial = 7;
 8008aa6:	2007      	movs	r0, #7
	  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
	  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_Low;
	  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;//SPI_CPHA_1Edge;
	  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;

	 SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8008aa8:	2218      	movs	r2, #24
	  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
	  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_Low;
	  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;//SPI_CPHA_1Edge;
	  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8008aaa:	40bc      	lsls	r4, r7
	  /* Connect PXx to SD_SPI_MOSI */
	  GPIO_PinAFConfig(SPI2_MOSI_PORT, SPI2_MOSI_SOURCE, SPI2_MOSI_AF);

	  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8008aac:	808b      	strh	r3, [r1, #4]
	  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_Low;
	  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;//SPI_CPHA_1Edge;
	  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;

	 SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 8008aae:	818a      	strh	r2, [r1, #12]
	 SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
	 SPI_InitStructure.SPI_CRCPolynomial = 7;
 8008ab0:	8208      	strh	r0, [r1, #16]
	  /* Connect PXx to SD_SPI_MISO */
	  GPIO_PinAFConfig(SPI2_MISO_PORT, SPI2_MISO_SOURCE, SPI2_MISO_AF);
	  /* Connect PXx to SD_SPI_MOSI */
	  GPIO_PinAFConfig(SPI2_MOSI_PORT, SPI2_MOSI_SOURCE, SPI2_MOSI_AF);

	  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8008ab2:	800d      	strh	r5, [r1, #0]
	  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
	  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;//SPI_CPOL_Low;
 8008ab4:	80cd      	strh	r5, [r1, #6]
	  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;//SPI_CPHA_1Edge;
 8008ab6:	810d      	strh	r5, [r1, #8]
	  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8008ab8:	814c      	strh	r4, [r1, #10]

	 SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
	 SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8008aba:	81cd      	strh	r5, [r1, #14]
	 SPI_InitStructure.SPI_CRCPolynomial = 7;
	 SPI_Init(SPI2, &SPI_InitStructure);
 8008abc:	9801      	ldr	r0, [sp, #4]
 8008abe:	f000 ffe9 	bl	8009a94 <SPI_Init>

	 SPI_Cmd(SPI2, ENABLE); /* SD_SPI enable */
 8008ac2:	9801      	ldr	r0, [sp, #4]
 8008ac4:	1c31      	adds	r1, r6, #0
 8008ac6:	f001 f80f 	bl	8009ae8 <SPI_Cmd>


	 xprintf("spi2 init done\r\n");
 8008aca:	4804      	ldr	r0, [pc, #16]	; (8008adc <SPIx_init+0xe0>)
 8008acc:	f000 fc68 	bl	80093a0 <xprintf>
			SPI1_Init();
	if(SPIx == SPI2)
			SPI2_Init();
	//SPI2->CR2|=SPI_CR2_FRXTH;
	//SPI2->CR2&=~SPI_CR2_FRXTH;
}
 8008ad0:	b00b      	add	sp, #44	; 0x2c
 8008ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad4:	40003800 	.word	0x40003800
 8008ad8:	48000400 	.word	0x48000400
 8008adc:	0800a45b 	.word	0x0800a45b

08008ae0 <SPIx_ReadRegister>:


int SPIx_ReadRegister(SPI_TypeDef *SPIx, uint8_t reg, uint8_t *data, uint16_t len, uint16_t timeout){
 8008ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ae2:	1c05      	adds	r5, r0, #0
 8008ae4:	a808      	add	r0, sp, #32
 8008ae6:	1c17      	adds	r7, r2, #0
 8008ae8:	1c1e      	adds	r6, r3, #0
	
	reg |= 0x80;
	
	if(SPIx == SPI1){
 8008aea:	4a33      	ldr	r2, [pc, #204]	; (8008bb8 <SPIx_ReadRegister+0xd8>)
	//SPI2->CR2|=SPI_CR2_FRXTH;
	//SPI2->CR2&=~SPI_CR2_FRXTH;
}


int SPIx_ReadRegister(SPI_TypeDef *SPIx, uint8_t reg, uint8_t *data, uint16_t len, uint16_t timeout){
 8008aec:	8803      	ldrh	r3, [r0, #0]
	
	reg |= 0x80;
 8008aee:	2480      	movs	r4, #128	; 0x80
	//SPI2->CR2|=SPI_CR2_FRXTH;
	//SPI2->CR2&=~SPI_CR2_FRXTH;
}


int SPIx_ReadRegister(SPI_TypeDef *SPIx, uint8_t reg, uint8_t *data, uint16_t len, uint16_t timeout){
 8008af0:	9300      	str	r3, [sp, #0]
	
	reg |= 0x80;
 8008af2:	430c      	orrs	r4, r1
	
	if(SPIx == SPI1){
 8008af4:	4295      	cmp	r5, r2
 8008af6:	d101      	bne.n	8008afc <SPIx_ReadRegister+0x1c>
		SPI1_CS_LOW();
 8008af8:	4830      	ldr	r0, [pc, #192]	; (8008bbc <SPIx_ReadRegister+0xdc>)
 8008afa:	e000      	b.n	8008afe <SPIx_ReadRegister+0x1e>
	}
	else
	{
		SPI2_CS_LOW();
 8008afc:	4830      	ldr	r0, [pc, #192]	; (8008bc0 <SPIx_ReadRegister+0xe0>)
 8008afe:	2180      	movs	r1, #128	; 0x80
 8008b00:	0149      	lsls	r1, r1, #5
 8008b02:	f000 fe59 	bl	80097b8 <GPIO_ResetBits>
	}

	if(!SPI_SendByte(SPIx,reg,timeout)){
 8008b06:	1c21      	adds	r1, r4, #0
 8008b08:	1c28      	adds	r0, r5, #0
 8008b0a:	9a00      	ldr	r2, [sp, #0]
 8008b0c:	f7ff ff2e 	bl	800896c <SPI_SendByte>
 8008b10:	1e04      	subs	r4, r0, #0
 8008b12:	d143      	bne.n	8008b9c <SPIx_ReadRegister+0xbc>
		xprintf("time out \r\n");
 8008b14:	482b      	ldr	r0, [pc, #172]	; (8008bc4 <SPIx_ReadRegister+0xe4>)
 8008b16:	f000 fc43 	bl	80093a0 <xprintf>
		return 0;
 8008b1a:	1c20      	adds	r0, r4, #0
 8008b1c:	e04b      	b.n	8008bb6 <SPIx_ReadRegister+0xd6>
}

static uint8_t SPI_readByte(SPI_TypeDef *SPIx, uint8_t*byte, uint16_t timeout){
	uint32_t last_time =0;
  /*!< Loop while DR register in not emplty */
	last_time = ulMiliCount+timeout;
 8008b1e:	482a      	ldr	r0, [pc, #168]	; (8008bc8 <SPIx_ReadRegister+0xe8>)
 8008b20:	9a00      	ldr	r2, [sp, #0]
 8008b22:	6803      	ldr	r3, [r0, #0]
 8008b24:	18d4      	adds	r4, r2, r3
 8008b26:	9401      	str	r4, [sp, #4]
 8008b28:	e003      	b.n	8008b32 <SPIx_ReadRegister+0x52>
  while ((SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET) && (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET)){
		if(last_time<ulMiliCount){
 8008b2a:	6824      	ldr	r4, [r4, #0]
 8008b2c:	9901      	ldr	r1, [sp, #4]
 8008b2e:	42a1      	cmp	r1, r4
 8008b30:	d318      	bcc.n	8008b64 <SPIx_ReadRegister+0x84>

static uint8_t SPI_readByte(SPI_TypeDef *SPIx, uint8_t*byte, uint16_t timeout){
	uint32_t last_time =0;
  /*!< Loop while DR register in not emplty */
	last_time = ulMiliCount+timeout;
  while ((SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE) == RESET) && (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET)){
 8008b32:	1c28      	adds	r0, r5, #0
 8008b34:	2102      	movs	r1, #2
 8008b36:	f000 ffe6 	bl	8009b06 <SPI_I2S_GetFlagStatus>
 8008b3a:	4c23      	ldr	r4, [pc, #140]	; (8008bc8 <SPIx_ReadRegister+0xe8>)
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d105      	bne.n	8008b4c <SPIx_ReadRegister+0x6c>
 8008b40:	1c28      	adds	r0, r5, #0
 8008b42:	2180      	movs	r1, #128	; 0x80
 8008b44:	f000 ffdf 	bl	8009b06 <SPI_I2S_GetFlagStatus>
 8008b48:	2801      	cmp	r0, #1
 8008b4a:	d0ee      	beq.n	8008b2a <SPIx_ReadRegister+0x4a>
			return 0;
		}
	}

  /*!< Send byte through the SPI1 peripheral */
  SPI_SendData8(SPIx, SPI_DUMMY_BYTE);
 8008b4c:	1c28      	adds	r0, r5, #0
 8008b4e:	2100      	movs	r1, #0
 8008b50:	f000 ffd5 	bl	8009afe <SPI_SendData8>
  //SPIx->DR=SPI_DUMMY_BYTE;
  /*!< Wait to receive a byte */
	last_time = ulMiliCount+timeout;
 8008b54:	6822      	ldr	r2, [r4, #0]
 8008b56:	9b00      	ldr	r3, [sp, #0]
 8008b58:	189c      	adds	r4, r3, r2
 8008b5a:	e00c      	b.n	8008b76 <SPIx_ReadRegister+0x96>
  while ((SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET) && (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET)){
		if(last_time<ulMiliCount){
 8008b5c:	491a      	ldr	r1, [pc, #104]	; (8008bc8 <SPIx_ReadRegister+0xe8>)
 8008b5e:	6808      	ldr	r0, [r1, #0]
 8008b60:	4284      	cmp	r4, r0
 8008b62:	d208      	bcs.n	8008b76 <SPIx_ReadRegister+0x96>
			xprintf("%s time out \r\n",__func__);
 8008b64:	4819      	ldr	r0, [pc, #100]	; (8008bcc <SPIx_ReadRegister+0xec>)
 8008b66:	491a      	ldr	r1, [pc, #104]	; (8008bd0 <SPIx_ReadRegister+0xf0>)
 8008b68:	f000 fc1a 	bl	80093a0 <xprintf>
	}
	
	while(len){
		
		if(!SPI_readByte(SPIx,data, timeout)){
			xprintf("time out \r\n");
 8008b6c:	4815      	ldr	r0, [pc, #84]	; (8008bc4 <SPIx_ReadRegister+0xe4>)
 8008b6e:	f000 fc17 	bl	80093a0 <xprintf>
			return 0;
 8008b72:	2000      	movs	r0, #0
 8008b74:	e01f      	b.n	8008bb6 <SPIx_ReadRegister+0xd6>
  /*!< Send byte through the SPI1 peripheral */
  SPI_SendData8(SPIx, SPI_DUMMY_BYTE);
  //SPIx->DR=SPI_DUMMY_BYTE;
  /*!< Wait to receive a byte */
	last_time = ulMiliCount+timeout;
  while ((SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE) == RESET) && (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_BSY) == SET)){
 8008b76:	1c28      	adds	r0, r5, #0
 8008b78:	2101      	movs	r1, #1
 8008b7a:	f000 ffc4 	bl	8009b06 <SPI_I2S_GetFlagStatus>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d105      	bne.n	8008b8e <SPIx_ReadRegister+0xae>
 8008b82:	1c28      	adds	r0, r5, #0
 8008b84:	2180      	movs	r1, #128	; 0x80
 8008b86:	f000 ffbe 	bl	8009b06 <SPI_I2S_GetFlagStatus>
 8008b8a:	2801      	cmp	r0, #1
 8008b8c:	d0e6      	beq.n	8008b5c <SPIx_ReadRegister+0x7c>
			return 0;
		}
	}

  //*byte=(uint8_t)( SPIx->DR);
  *byte=SPI_ReceiveData8(SPIx);
 8008b8e:	1c28      	adds	r0, r5, #0
 8008b90:	f000 ffb7 	bl	8009b02 <SPI_ReceiveData8>
		
		if(!SPI_readByte(SPIx,data, timeout)){
			xprintf("time out \r\n");
			return 0;
		}
		len--;
 8008b94:	3e01      	subs	r6, #1
			return 0;
		}
	}

  //*byte=(uint8_t)( SPIx->DR);
  *byte=SPI_ReceiveData8(SPIx);
 8008b96:	7038      	strb	r0, [r7, #0]
		
		if(!SPI_readByte(SPIx,data, timeout)){
			xprintf("time out \r\n");
			return 0;
		}
		len--;
 8008b98:	b2b6      	uxth	r6, r6
		data++;
 8008b9a:	3701      	adds	r7, #1
	if(!SPI_SendByte(SPIx,reg,timeout)){
		xprintf("time out \r\n");
		return 0;
	}
	
	while(len){
 8008b9c:	2e00      	cmp	r6, #0
 8008b9e:	d1be      	bne.n	8008b1e <SPIx_ReadRegister+0x3e>
		}
		len--;
		data++;
	}
	
	if(SPIx == SPI1)
 8008ba0:	4e05      	ldr	r6, [pc, #20]	; (8008bb8 <SPIx_ReadRegister+0xd8>)
 8008ba2:	42b5      	cmp	r5, r6
 8008ba4:	d101      	bne.n	8008baa <SPIx_ReadRegister+0xca>
	{
		SPI1_CS_HIGH();
 8008ba6:	4805      	ldr	r0, [pc, #20]	; (8008bbc <SPIx_ReadRegister+0xdc>)
 8008ba8:	e000      	b.n	8008bac <SPIx_ReadRegister+0xcc>
	}
	else
	{
		SPI2_CS_HIGH();	
 8008baa:	4805      	ldr	r0, [pc, #20]	; (8008bc0 <SPIx_ReadRegister+0xe0>)
 8008bac:	2580      	movs	r5, #128	; 0x80
 8008bae:	0169      	lsls	r1, r5, #5
 8008bb0:	f000 fe00 	bl	80097b4 <GPIO_SetBits>
	}
	
	return 1;
 8008bb4:	2001      	movs	r0, #1
}
 8008bb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bb8:	40013000 	.word	0x40013000
 8008bbc:	48000800 	.word	0x48000800
 8008bc0:	48000400 	.word	0x48000400
 8008bc4:	0800a44f 	.word	0x0800a44f
 8008bc8:	2000087c 	.word	0x2000087c
 8008bcc:	0800a44c 	.word	0x0800a44c
 8008bd0:	0800a479 	.word	0x0800a479

08008bd4 <SPIx_WriteRegister>:

	return 1;
}
#endif

int SPIx_WriteRegister(SPI_TypeDef *SPIx, uint8_t reg, uint8_t *data, uint16_t len, uint16_t timeout){
 8008bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bd6:	1c0c      	adds	r4, r1, #0
 8008bd8:	a908      	add	r1, sp, #32
 8008bda:	1c05      	adds	r5, r0, #0
 8008bdc:	1c1e      	adds	r6, r3, #0
 8008bde:	8808      	ldrh	r0, [r1, #0]
	
	if(SPIx == SPI1)
 8008be0:	4b18      	ldr	r3, [pc, #96]	; (8008c44 <SPIx_WriteRegister+0x70>)

	return 1;
}
#endif

int SPIx_WriteRegister(SPI_TypeDef *SPIx, uint8_t reg, uint8_t *data, uint16_t len, uint16_t timeout){
 8008be2:	1c17      	adds	r7, r2, #0
 8008be4:	9001      	str	r0, [sp, #4]
	
	if(SPIx == SPI1)
 8008be6:	429d      	cmp	r5, r3
 8008be8:	d101      	bne.n	8008bee <SPIx_WriteRegister+0x1a>
		SPI1_CS_LOW();
 8008bea:	4817      	ldr	r0, [pc, #92]	; (8008c48 <SPIx_WriteRegister+0x74>)
 8008bec:	e000      	b.n	8008bf0 <SPIx_WriteRegister+0x1c>
	else
		SPI2_CS_LOW();	
 8008bee:	4817      	ldr	r0, [pc, #92]	; (8008c4c <SPIx_WriteRegister+0x78>)
 8008bf0:	2280      	movs	r2, #128	; 0x80
 8008bf2:	0151      	lsls	r1, r2, #5
 8008bf4:	f000 fde0 	bl	80097b8 <GPIO_ResetBits>
	
	if(!SPI_SendByte(SPIx,reg,timeout)){
 8008bf8:	1c21      	adds	r1, r4, #0
 8008bfa:	1c28      	adds	r0, r5, #0
 8008bfc:	9a01      	ldr	r2, [sp, #4]
 8008bfe:	f7ff feb5 	bl	800896c <SPI_SendByte>
 8008c02:	1e04      	subs	r4, r0, #0
 8008c04:	d10e      	bne.n	8008c24 <SPIx_WriteRegister+0x50>
 8008c06:	e006      	b.n	8008c16 <SPIx_WriteRegister+0x42>
		xprintf("time out \r\n");
		return 0;
	}
	while(len){
		
		if(!SPI_SendByte(SPIx,*data, timeout)){
 8008c08:	7839      	ldrb	r1, [r7, #0]
 8008c0a:	1c28      	adds	r0, r5, #0
 8008c0c:	9a01      	ldr	r2, [sp, #4]
 8008c0e:	f7ff fead 	bl	800896c <SPI_SendByte>
 8008c12:	1e04      	subs	r4, r0, #0
 8008c14:	d103      	bne.n	8008c1e <SPIx_WriteRegister+0x4a>
			xprintf("time out \r\n");
 8008c16:	480e      	ldr	r0, [pc, #56]	; (8008c50 <SPIx_WriteRegister+0x7c>)
 8008c18:	f000 fbc2 	bl	80093a0 <xprintf>
			return 0;
 8008c1c:	e00f      	b.n	8008c3e <SPIx_WriteRegister+0x6a>
		}
		len--;
 8008c1e:	3e01      	subs	r6, #1
 8008c20:	b2b6      	uxth	r6, r6
		data++;
 8008c22:	3701      	adds	r7, #1
	
	if(!SPI_SendByte(SPIx,reg,timeout)){
		xprintf("time out \r\n");
		return 0;
	}
	while(len){
 8008c24:	2e00      	cmp	r6, #0
 8008c26:	d1ef      	bne.n	8008c08 <SPIx_WriteRegister+0x34>
		}
		len--;
		data++;
	}
	
	if(SPIx == SPI1)
 8008c28:	4c06      	ldr	r4, [pc, #24]	; (8008c44 <SPIx_WriteRegister+0x70>)
 8008c2a:	42a5      	cmp	r5, r4
 8008c2c:	d101      	bne.n	8008c32 <SPIx_WriteRegister+0x5e>
		SPI1_CS_HIGH();
 8008c2e:	4806      	ldr	r0, [pc, #24]	; (8008c48 <SPIx_WriteRegister+0x74>)
 8008c30:	e000      	b.n	8008c34 <SPIx_WriteRegister+0x60>
	else
		SPI2_CS_HIGH();
 8008c32:	4806      	ldr	r0, [pc, #24]	; (8008c4c <SPIx_WriteRegister+0x78>)
 8008c34:	2580      	movs	r5, #128	; 0x80
 8008c36:	0169      	lsls	r1, r5, #5
 8008c38:	f000 fdbc 	bl	80097b4 <GPIO_SetBits>

	return 1;
 8008c3c:	2401      	movs	r4, #1
}
 8008c3e:	1c20      	adds	r0, r4, #0
 8008c40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c42:	46c0      	nop			; (mov r8, r8)
 8008c44:	40013000 	.word	0x40013000
 8008c48:	48000800 	.word	0x48000800
 8008c4c:	48000400 	.word	0x48000400
 8008c50:	0800a44f 	.word	0x0800a44f

08008c54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008c54:	4813      	ldr	r0, [pc, #76]	; (8008ca4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008c56:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8008c58:	4813      	ldr	r0, [pc, #76]	; (8008ca8 <LoopForever+0x6>)
    LDR R1, [R0]
 8008c5a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8008c5c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8008c5e:	4a13      	ldr	r2, [pc, #76]	; (8008cac <LoopForever+0xa>)
    CMP R1, R2
 8008c60:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8008c62:	d105      	bne.n	8008c70 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8008c64:	4812      	ldr	r0, [pc, #72]	; (8008cb0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8008c66:	4913      	ldr	r1, [pc, #76]	; (8008cb4 <LoopForever+0x12>)
    STR R1, [R0]
 8008c68:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8008c6a:	4813      	ldr	r0, [pc, #76]	; (8008cb8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8008c6c:	4913      	ldr	r1, [pc, #76]	; (8008cbc <LoopForever+0x1a>)
    STR R1, [R0]
 8008c6e:	6001      	str	r1, [r0, #0]

08008c70 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008c70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008c72:	e003      	b.n	8008c7c <LoopCopyDataInit>

08008c74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008c74:	4b12      	ldr	r3, [pc, #72]	; (8008cc0 <LoopForever+0x1e>)
  ldr r3, [r3, r1]
 8008c76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008c78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008c7a:	3104      	adds	r1, #4

08008c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008c7c:	4811      	ldr	r0, [pc, #68]	; (8008cc4 <LoopForever+0x22>)
  ldr r3, =_edata
 8008c7e:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <LoopForever+0x26>)
  adds r2, r0, r1
 8008c80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008c82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008c84:	d3f6      	bcc.n	8008c74 <CopyDataInit>
  ldr r2, =_sbss
 8008c86:	4a11      	ldr	r2, [pc, #68]	; (8008ccc <LoopForever+0x2a>)
  b LoopFillZerobss
 8008c88:	e002      	b.n	8008c90 <LoopFillZerobss>

08008c8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008c8a:	2300      	movs	r3, #0
  str  r3, [r2]
 8008c8c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008c8e:	3204      	adds	r2, #4

08008c90 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8008c90:	4b0f      	ldr	r3, [pc, #60]	; (8008cd0 <LoopForever+0x2e>)
  cmp r2, r3
 8008c92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008c94:	d3f9      	bcc.n	8008c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008c96:	f000 f905 	bl	8008ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c9a:	f7fd fa0b 	bl	80060b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008c9e:	f7ff fbfd 	bl	800849c <main>

08008ca2 <LoopForever>:
  
LoopForever:
    b LoopForever
 8008ca2:	e7fe      	b.n	8008ca2 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008ca4:	20002000 	.word	0x20002000
  mov   sp, r0          /* set stack pointer */

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8008ca8:	00000004 	.word	0x00000004
    LDR R1, [R0]
    LSRS R1, R1, #24
    LDR R2,=0x1F
 8008cac:	0000001f 	.word	0x0000001f
    CMP R1, R2
    BNE ApplicationStart

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8008cb0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8008cb4:	00000001 	.word	0x00000001
    STR R1, [R0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8008cb8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8008cbc:	00000000 	.word	0x00000000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8008cc0:	0800a4b4 	.word	0x0800a4b4
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8008cc4:	200000c0 	.word	0x200000c0
  ldr r3, =_edata
 8008cc8:	200005d8 	.word	0x200005d8
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8008ccc:	200005d8 	.word	0x200005d8
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 8008cd0:	20001584 	.word	0x20001584

08008cd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008cd4:	e7fe      	b.n	8008cd4 <ADC1_IRQHandler>

08008cd6 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void) {
}
 8008cd6:	4770      	bx	lr

08008cd8 <HardFault_Handler>:
/**
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void) {
 8008cd8:	b500      	push	{lr}
 8008cda:	e7fe      	b.n	8008cda <HardFault_Handler+0x2>

08008cdc <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void) {
}
 8008cdc:	4770      	bx	lr

08008cde <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void) {
}
 8008cde:	4770      	bx	lr

08008ce0 <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 8008ce0:	b510      	push	{r4, lr}
	ulTickCount++;
 8008ce2:	480f      	ldr	r0, [pc, #60]	; (8008d20 <SysTick_Handler+0x40>)
	ulMiliCount++;
 8008ce4:	4c0f      	ldr	r4, [pc, #60]	; (8008d24 <SysTick_Handler+0x44>)
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
	ulTickCount++;
 8008ce6:	6802      	ldr	r2, [r0, #0]
	ulMiliCount++;

	if ((ulMiliCount % 100) == 0) { //10 mili seconds
 8008ce8:	2164      	movs	r1, #100	; 0x64
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
	ulTickCount++;
 8008cea:	3201      	adds	r2, #1
 8008cec:	6002      	str	r2, [r0, #0]
	ulMiliCount++;
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	6023      	str	r3, [r4, #0]

	if ((ulMiliCount % 100) == 0) { //10 mili seconds
 8008cf4:	6820      	ldr	r0, [r4, #0]
 8008cf6:	f7fa fa6b 	bl	80031d0 <__aeabi_uidivmod>
 8008cfa:	2900      	cmp	r1, #0
 8008cfc:	d103      	bne.n	8008d06 <SysTick_Handler+0x26>
		ulTick100++;
 8008cfe:	4b0a      	ldr	r3, [pc, #40]	; (8008d28 <SysTick_Handler+0x48>)
 8008d00:	6819      	ldr	r1, [r3, #0]
 8008d02:	3101      	adds	r1, #1
 8008d04:	6019      	str	r1, [r3, #0]
	}

	if (ulMiliCount % 1000 == 0) { //1 seconds
 8008d06:	6820      	ldr	r0, [r4, #0]
 8008d08:	24fa      	movs	r4, #250	; 0xfa
 8008d0a:	00a1      	lsls	r1, r4, #2
 8008d0c:	f7fa fa60 	bl	80031d0 <__aeabi_uidivmod>
 8008d10:	2900      	cmp	r1, #0
 8008d12:	d103      	bne.n	8008d1c <SysTick_Handler+0x3c>
		ulSecCount++;
 8008d14:	4805      	ldr	r0, [pc, #20]	; (8008d2c <SysTick_Handler+0x4c>)
 8008d16:	6802      	ldr	r2, [r0, #0]
 8008d18:	3201      	adds	r2, #1
 8008d1a:	6002      	str	r2, [r0, #0]
	}
}
 8008d1c:	bd10      	pop	{r4, pc}
 8008d1e:	46c0      	nop			; (mov r8, r8)
 8008d20:	20000890 	.word	0x20000890
 8008d24:	2000087c 	.word	0x2000087c
 8008d28:	20000884 	.word	0x20000884
 8008d2c:	20000880 	.word	0x20000880

08008d30 <USART1_IRQHandler>:

extern char buff_cmd[256];
volatile char buff_cmd_tmp[256] = {0};
int buff_idx = 0;
void USART1_IRQHandler(void) {
 8008d30:	b538      	push	{r3, r4, r5, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET) {
 8008d32:	481e      	ldr	r0, [pc, #120]	; (8008dac <USART1_IRQHandler+0x7c>)
 8008d34:	491e      	ldr	r1, [pc, #120]	; (8008db0 <USART1_IRQHandler+0x80>)
 8008d36:	f001 f8a0 	bl	8009e7a <USART_GetITStatus>
 8008d3a:	2801      	cmp	r0, #1
 8008d3c:	d134      	bne.n	8008da8 <USART1_IRQHandler+0x78>
		uint16_t cChar;
		cChar = USART_ReceiveData(USART1);
 8008d3e:	481b      	ldr	r0, [pc, #108]	; (8008dac <USART1_IRQHandler+0x7c>)
 8008d40:	f001 f87b 	bl	8009e3a <USART_ReceiveData>

		USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8008d44:	491a      	ldr	r1, [pc, #104]	; (8008db0 <USART1_IRQHandler+0x80>)
volatile char buff_cmd_tmp[256] = {0};
int buff_idx = 0;
void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET) {
		uint16_t cChar;
		cChar = USART_ReceiveData(USART1);
 8008d46:	1c04      	adds	r4, r0, #0

		USART_ClearITPendingBit(USART1, USART_IT_RXNE);
 8008d48:	4818      	ldr	r0, [pc, #96]	; (8008dac <USART1_IRQHandler+0x7c>)
 8008d4a:	f001 f8b2 	bl	8009eb2 <USART_ClearITPendingBit>
 8008d4e:	4b19      	ldr	r3, [pc, #100]	; (8008db4 <USART1_IRQHandler+0x84>)

		if (buff_idx >= 255 || cChar == '*') {
 8008d50:	2c2a      	cmp	r4, #42	; 0x2a
 8008d52:	d002      	beq.n	8008d5a <USART1_IRQHandler+0x2a>
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	2afe      	cmp	r2, #254	; 0xfe
 8008d58:	dd01      	ble.n	8008d5e <USART1_IRQHandler+0x2e>
			buff_idx = 0;
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	6018      	str	r0, [r3, #0]
		}

		if(cChar != '\r' && cChar != '\n') {
 8008d5e:	2c0a      	cmp	r4, #10
 8008d60:	d007      	beq.n	8008d72 <USART1_IRQHandler+0x42>
 8008d62:	2c0d      	cmp	r4, #13
 8008d64:	d005      	beq.n	8008d72 <USART1_IRQHandler+0x42>
			buff_cmd_tmp[buff_idx] = cChar;
 8008d66:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <USART1_IRQHandler+0x84>)
 8008d68:	4913      	ldr	r1, [pc, #76]	; (8008db8 <USART1_IRQHandler+0x88>)
 8008d6a:	681d      	ldr	r5, [r3, #0]
 8008d6c:	554c      	strb	r4, [r1, r5]
			buff_idx++;
 8008d6e:	3501      	adds	r5, #1
 8008d70:	601d      	str	r5, [r3, #0]
		}

		//xprintf("len: %d, %c\r\n", buff_idx, cChar);
		PC_uart_putChar(cChar);
 8008d72:	b2e0      	uxtb	r0, r4
 8008d74:	f000 fa02 	bl	800917c <PC_uart_putChar>

		if (cChar == '#') {
 8008d78:	2c23      	cmp	r4, #35	; 0x23
 8008d7a:	d111      	bne.n	8008da0 <USART1_IRQHandler+0x70>
			//copy
			memcpy(buff_cmd, buff_cmd_tmp, buff_idx);
 8008d7c:	4c0d      	ldr	r4, [pc, #52]	; (8008db4 <USART1_IRQHandler+0x84>)
 8008d7e:	4d0e      	ldr	r5, [pc, #56]	; (8008db8 <USART1_IRQHandler+0x88>)
 8008d80:	6822      	ldr	r2, [r4, #0]
 8008d82:	1c29      	adds	r1, r5, #0
 8008d84:	480d      	ldr	r0, [pc, #52]	; (8008dbc <USART1_IRQHandler+0x8c>)
 8008d86:	f7fd f9b7 	bl	80060f8 <memcpy>
//			xprintf("pc command, len: %d, %s\r\n", buff_idx, buff_cmd);
			buff_idx = 0;
			g_appStats.processPcCommand = 1;
 8008d8a:	4b0d      	ldr	r3, [pc, #52]	; (8008dc0 <USART1_IRQHandler+0x90>)

		if (cChar == '#') {
			//copy
			memcpy(buff_cmd, buff_cmd_tmp, buff_idx);
//			xprintf("pc command, len: %d, %s\r\n", buff_idx, buff_cmd);
			buff_idx = 0;
 8008d8c:	2100      	movs	r1, #0
			g_appStats.processPcCommand = 1;
 8008d8e:	2001      	movs	r0, #1

		if (cChar == '#') {
			//copy
			memcpy(buff_cmd, buff_cmd_tmp, buff_idx);
//			xprintf("pc command, len: %d, %s\r\n", buff_idx, buff_cmd);
			buff_idx = 0;
 8008d90:	6021      	str	r1, [r4, #0]
			g_appStats.processPcCommand = 1;
 8008d92:	3366      	adds	r3, #102	; 0x66
			memset(buff_cmd_tmp, 0, sizeof(buff_cmd_tmp));
 8008d94:	2480      	movs	r4, #128	; 0x80
		if (cChar == '#') {
			//copy
			memcpy(buff_cmd, buff_cmd_tmp, buff_idx);
//			xprintf("pc command, len: %d, %s\r\n", buff_idx, buff_cmd);
			buff_idx = 0;
			g_appStats.processPcCommand = 1;
 8008d96:	7018      	strb	r0, [r3, #0]
			memset(buff_cmd_tmp, 0, sizeof(buff_cmd_tmp));
 8008d98:	0062      	lsls	r2, r4, #1
 8008d9a:	1c28      	adds	r0, r5, #0
 8008d9c:	f7fd fa2e 	bl	80061fc <memset>
		}

		g_appStats.lastReceiveUart = ulSecCount;
 8008da0:	4d08      	ldr	r5, [pc, #32]	; (8008dc4 <USART1_IRQHandler+0x94>)
 8008da2:	4907      	ldr	r1, [pc, #28]	; (8008dc0 <USART1_IRQHandler+0x90>)
 8008da4:	682a      	ldr	r2, [r5, #0]
 8008da6:	658a      	str	r2, [r1, #88]	; 0x58
	}
}
 8008da8:	bd38      	pop	{r3, r4, r5, pc}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	40013800 	.word	0x40013800
 8008db0:	00050105 	.word	0x00050105
 8008db4:	2000089c 	.word	0x2000089c
 8008db8:	200008a4 	.word	0x200008a4
 8008dbc:	20000758 	.word	0x20000758
 8008dc0:	200009a8 	.word	0x200009a8
 8008dc4:	20000880 	.word	0x20000880

08008dc8 <TIM15_IRQHandler>:

void TIM15_IRQHandler(void) {
 8008dc8:	b570      	push	{r4, r5, r6, lr}
	if (TIM_GetITStatus(TIM15, TIM_IT_CC2) == SET) {
 8008dca:	4823      	ldr	r0, [pc, #140]	; (8008e58 <TIM15_IRQHandler+0x90>)
 8008dcc:	2104      	movs	r1, #4
 8008dce:	f000 ffb7 	bl	8009d40 <TIM_GetITStatus>
 8008dd2:	1c05      	adds	r5, r0, #0
 8008dd4:	2801      	cmp	r0, #1
 8008dd6:	d13d      	bne.n	8008e54 <TIM15_IRQHandler+0x8c>
		/* Clear TIM1 Capture compare interrupt pending bit */
		TIM_ClearITPendingBit(TIM15, TIM_IT_CC2);
 8008dd8:	481f      	ldr	r0, [pc, #124]	; (8008e58 <TIM15_IRQHandler+0x90>)
 8008dda:	2104      	movs	r1, #4
 8008ddc:	f000 ffbb 	bl	8009d56 <TIM_ClearITPendingBit>

		if (CaptureNumber == 0) {
 8008de0:	4c1e      	ldr	r4, [pc, #120]	; (8008e5c <TIM15_IRQHandler+0x94>)
 8008de2:	8826      	ldrh	r6, [r4, #0]
 8008de4:	2e00      	cmp	r6, #0
 8008de6:	d109      	bne.n	8008dfc <TIM15_IRQHandler+0x34>
			/* Get the Input Capture value */
			IC3ReadValue1 = TIM_GetCapture2(TIM15);
 8008de8:	481b      	ldr	r0, [pc, #108]	; (8008e58 <TIM15_IRQHandler+0x90>)
 8008dea:	f000 ff16 	bl	8009c1a <TIM_GetCapture2>
 8008dee:	4b1c      	ldr	r3, [pc, #112]	; (8008e60 <TIM15_IRQHandler+0x98>)
 8008df0:	8018      	strh	r0, [r3, #0]
			TIM3_startIT();
 8008df2:	f000 f93d 	bl	8009070 <TIM3_startIT>
			CaptureNumber = 1;
 8008df6:	8025      	strh	r5, [r4, #0]
			TIM3_isFull = 0;
 8008df8:	4b1a      	ldr	r3, [pc, #104]	; (8008e64 <TIM15_IRQHandler+0x9c>)
 8008dfa:	e02a      	b.n	8008e52 <TIM15_IRQHandler+0x8a>
		} else if (CaptureNumber == 1) {
 8008dfc:	2e01      	cmp	r6, #1
 8008dfe:	d129      	bne.n	8008e54 <TIM15_IRQHandler+0x8c>
			/* Get the Input Capture value */
			CaptureNumber = 0;
 8008e00:	2000      	movs	r0, #0
 8008e02:	8020      	strh	r0, [r4, #0]
 8008e04:	1c05      	adds	r5, r0, #0
			IC3ReadValue2 = TIM_GetCapture2(TIM15);
 8008e06:	4814      	ldr	r0, [pc, #80]	; (8008e58 <TIM15_IRQHandler+0x90>)
 8008e08:	f000 ff07 	bl	8009c1a <TIM_GetCapture2>
			if (!TIM3_isFull) {
 8008e0c:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <TIM15_IRQHandler+0x9c>)
			CaptureNumber = 1;
			TIM3_isFull = 0;
		} else if (CaptureNumber == 1) {
			/* Get the Input Capture value */
			CaptureNumber = 0;
			IC3ReadValue2 = TIM_GetCapture2(TIM15);
 8008e0e:	4916      	ldr	r1, [pc, #88]	; (8008e68 <TIM15_IRQHandler+0xa0>)
			if (!TIM3_isFull) {
 8008e10:	781a      	ldrb	r2, [r3, #0]
			CaptureNumber = 1;
			TIM3_isFull = 0;
		} else if (CaptureNumber == 1) {
			/* Get the Input Capture value */
			CaptureNumber = 0;
			IC3ReadValue2 = TIM_GetCapture2(TIM15);
 8008e12:	b280      	uxth	r0, r0
 8008e14:	8008      	strh	r0, [r1, #0]
 8008e16:	4c15      	ldr	r4, [pc, #84]	; (8008e6c <TIM15_IRQHandler+0xa4>)
			if (!TIM3_isFull) {
 8008e18:	2a00      	cmp	r2, #0
 8008e1a:	d113      	bne.n	8008e44 <TIM15_IRQHandler+0x7c>
				Capture = (uint16_t) (IC3ReadValue2 - IC3ReadValue1);
 8008e1c:	4d10      	ldr	r5, [pc, #64]	; (8008e60 <TIM15_IRQHandler+0x98>)
 8008e1e:	4a14      	ldr	r2, [pc, #80]	; (8008e70 <TIM15_IRQHandler+0xa8>)
 8008e20:	882b      	ldrh	r3, [r5, #0]
				g_appStats.capture = Capture;
 8008e22:	1c25      	adds	r5, r4, #0
		} else if (CaptureNumber == 1) {
			/* Get the Input Capture value */
			CaptureNumber = 0;
			IC3ReadValue2 = TIM_GetCapture2(TIM15);
			if (!TIM3_isFull) {
				Capture = (uint16_t) (IC3ReadValue2 - IC3ReadValue1);
 8008e24:	1ac1      	subs	r1, r0, r3
 8008e26:	b289      	uxth	r1, r1
				g_appStats.capture = Capture;
 8008e28:	3568      	adds	r5, #104	; 0x68
 8008e2a:	8029      	strh	r1, [r5, #0]
				if(!g_appStats.freqUpdated) {
 8008e2c:	1c25      	adds	r5, r4, #0
		} else if (CaptureNumber == 1) {
			/* Get the Input Capture value */
			CaptureNumber = 0;
			IC3ReadValue2 = TIM_GetCapture2(TIM15);
			if (!TIM3_isFull) {
				Capture = (uint16_t) (IC3ReadValue2 - IC3ReadValue1);
 8008e2e:	6011      	str	r1, [r2, #0]
				g_appStats.capture = Capture;
				if(!g_appStats.freqUpdated) {
 8008e30:	3564      	adds	r5, #100	; 0x64
 8008e32:	782b      	ldrb	r3, [r5, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10d      	bne.n	8008e54 <TIM15_IRQHandler+0x8c>
					g_appStats.tim15Freq = (uint32_t) (TIM15_CLOCK / Capture);
 8008e38:	480e      	ldr	r0, [pc, #56]	; (8008e74 <TIM15_IRQHandler+0xac>)
 8008e3a:	f7fa f985 	bl	8003148 <__aeabi_uidiv>
					g_appStats.freqUpdated = 1;
 8008e3e:	702e      	strb	r6, [r5, #0]
			IC3ReadValue2 = TIM_GetCapture2(TIM15);
			if (!TIM3_isFull) {
				Capture = (uint16_t) (IC3ReadValue2 - IC3ReadValue1);
				g_appStats.capture = Capture;
				if(!g_appStats.freqUpdated) {
					g_appStats.tim15Freq = (uint32_t) (TIM15_CLOCK / Capture);
 8008e40:	61e0      	str	r0, [r4, #28]
 8008e42:	e007      	b.n	8008e54 <TIM15_IRQHandler+0x8c>
					g_appStats.freqUpdated = 1;
				}
			} else {
				TIM3_isFull = 0;
 8008e44:	701d      	strb	r5, [r3, #0]
				if(!g_appStats.freqUpdated) {
 8008e46:	1c23      	adds	r3, r4, #0
 8008e48:	3364      	adds	r3, #100	; 0x64
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	2a00      	cmp	r2, #0
 8008e4e:	d101      	bne.n	8008e54 <TIM15_IRQHandler+0x8c>
					g_appStats.tim15Freq = 0;
 8008e50:	61e2      	str	r2, [r4, #28]
					g_appStats.freqUpdated = 1;
 8008e52:	701e      	strb	r6, [r3, #0]
				}
			}
		}
	}
}
 8008e54:	bd70      	pop	{r4, r5, r6, pc}
 8008e56:	46c0      	nop			; (mov r8, r8)
 8008e58:	40014000 	.word	0x40014000
 8008e5c:	2000089a 	.word	0x2000089a
 8008e60:	200008a0 	.word	0x200008a0
 8008e64:	20000898 	.word	0x20000898
 8008e68:	200008a2 	.word	0x200008a2
 8008e6c:	200009a8 	.word	0x200009a8
 8008e70:	2000157c 	.word	0x2000157c
 8008e74:	016e3600 	.word	0x016e3600

08008e78 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void){
 8008e78:	b510      	push	{r4, lr}
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) == SET) {
 8008e7a:	4808      	ldr	r0, [pc, #32]	; (8008e9c <TIM3_IRQHandler+0x24>)
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	f000 ff5f 	bl	8009d40 <TIM_GetITStatus>
 8008e82:	1c04      	adds	r4, r0, #0
 8008e84:	2801      	cmp	r0, #1
 8008e86:	d107      	bne.n	8008e98 <TIM3_IRQHandler+0x20>
//		g_appStats.countInterup3++;
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8008e88:	4804      	ldr	r0, [pc, #16]	; (8008e9c <TIM3_IRQHandler+0x24>)
 8008e8a:	1c21      	adds	r1, r4, #0
 8008e8c:	f000 ff63 	bl	8009d56 <TIM_ClearITPendingBit>
		TIM3_isFull = 1;
 8008e90:	4b03      	ldr	r3, [pc, #12]	; (8008ea0 <TIM3_IRQHandler+0x28>)
 8008e92:	701c      	strb	r4, [r3, #0]
		TIM3_stopIT();
 8008e94:	f000 f900 	bl	8009098 <TIM3_stopIT>
	}
}
 8008e98:	bd10      	pop	{r4, pc}
 8008e9a:	46c0      	nop			; (mov r8, r8)
 8008e9c:	40000400 	.word	0x40000400
 8008ea0:	20000898 	.word	0x20000898

08008ea4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8008ea4:	b507      	push	{r0, r1, r2, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008ea6:	4b34      	ldr	r3, [pc, #208]	; (8008f78 <SystemInit+0xd4>)
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	6819      	ldr	r1, [r3, #0]
 8008eac:	4311      	orrs	r1, r2
 8008eae:	6019      	str	r1, [r3, #0]

#if defined(STM32F051)  
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8008eb0:	6858      	ldr	r0, [r3, #4]
 8008eb2:	4932      	ldr	r1, [pc, #200]	; (8008f7c <SystemInit+0xd8>)
 8008eb4:	4001      	ands	r1, r0
 8008eb6:	6059      	str	r1, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
#endif /* STM32F051 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	4931      	ldr	r1, [pc, #196]	; (8008f80 <SystemInit+0xdc>)
 8008ebc:	4001      	ands	r1, r0
 8008ebe:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	4930      	ldr	r1, [pc, #192]	; (8008f84 <SystemInit+0xe0>)
 8008ec4:	4001      	ands	r1, r0
 8008ec6:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8008ec8:	6858      	ldr	r0, [r3, #4]
 8008eca:	492f      	ldr	r1, [pc, #188]	; (8008f88 <SystemInit+0xe4>)
 8008ecc:	4001      	ands	r1, r0
 8008ece:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8008ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ed2:	200f      	movs	r0, #15
 8008ed4:	4381      	bics	r1, r0
 8008ed6:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8008ed8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008eda:	492c      	ldr	r1, [pc, #176]	; (8008f8c <SystemInit+0xe8>)
 8008edc:	4001      	ands	r1, r0
 8008ede:	6319      	str	r1, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8008ee0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008ee2:	4390      	bics	r0, r2

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008ee4:	2200      	movs	r2, #0

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8008ee6:	6358      	str	r0, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008ee8:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8008eea:	9200      	str	r2, [sp, #0]
 8008eec:	9201      	str	r2, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8008eee:	6819      	ldr	r1, [r3, #0]
 8008ef0:	2080      	movs	r0, #128	; 0x80
 8008ef2:	0242      	lsls	r2, r0, #9
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	2280      	movs	r2, #128	; 0x80
 8008efc:	0292      	lsls	r2, r2, #10
 8008efe:	4010      	ands	r0, r2
 8008f00:	9001      	str	r0, [sp, #4]
    StartUpCounter++;  
 8008f02:	9900      	ldr	r1, [sp, #0]
 8008f04:	3101      	adds	r1, #1
 8008f06:	9100      	str	r1, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8008f08:	9801      	ldr	r0, [sp, #4]
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d104      	bne.n	8008f18 <SystemInit+0x74>
 8008f0e:	9800      	ldr	r0, [sp, #0]
 8008f10:	21a0      	movs	r1, #160	; 0xa0
 8008f12:	01c9      	lsls	r1, r1, #7
 8008f14:	4288      	cmp	r0, r1
 8008f16:	d1ef      	bne.n	8008ef8 <SystemInit+0x54>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8008f18:	6818      	ldr	r0, [r3, #0]
 8008f1a:	4002      	ands	r2, r0
 8008f1c:	d000      	beq.n	8008f20 <SystemInit+0x7c>
  {
    HSEStatus = (uint32_t)0x01;
 8008f1e:	2201      	movs	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8008f20:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8008f22:	9a01      	ldr	r2, [sp, #4]
 8008f24:	2a01      	cmp	r2, #1
 8008f26:	d125      	bne.n	8008f74 <SystemInit+0xd0>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8008f28:	4a19      	ldr	r2, [pc, #100]	; (8008f90 <SystemInit+0xec>)
 8008f2a:	2111      	movs	r1, #17
 8008f2c:	6011      	str	r1, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8008f2e:	6858      	ldr	r0, [r3, #4]
 8008f30:	6058      	str	r0, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8008f32:	685a      	ldr	r2, [r3, #4]

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8008f34:	4817      	ldr	r0, [pc, #92]	; (8008f94 <SystemInit+0xf0>)
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8008f36:	605a      	str	r2, [r3, #4]

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8008f38:	6859      	ldr	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 8008f3a:	2288      	movs	r2, #136	; 0x88
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;

    /* PLL configuration = HSE * 6 = 48 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8008f3c:	4008      	ands	r0, r1
 8008f3e:	6058      	str	r0, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 8008f40:	6859      	ldr	r1, [r3, #4]
 8008f42:	0350      	lsls	r0, r2, #13
 8008f44:	4308      	orrs	r0, r1
 8008f46:	6058      	str	r0, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8008f48:	6819      	ldr	r1, [r3, #0]
 8008f4a:	2280      	movs	r2, #128	; 0x80
 8008f4c:	0450      	lsls	r0, r2, #17
 8008f4e:	4308      	orrs	r0, r1
 8008f50:	6018      	str	r0, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	4a08      	ldr	r2, [pc, #32]	; (8008f78 <SystemInit+0xd4>)
 8008f56:	0180      	lsls	r0, r0, #6
 8008f58:	d5fb      	bpl.n	8008f52 <SystemInit+0xae>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8008f5a:	6851      	ldr	r1, [r2, #4]
 8008f5c:	2003      	movs	r0, #3
 8008f5e:	4381      	bics	r1, r0
 8008f60:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8008f62:	6851      	ldr	r1, [r2, #4]
 8008f64:	2002      	movs	r0, #2
 8008f66:	4301      	orrs	r1, r0
 8008f68:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8008f6a:	6859      	ldr	r1, [r3, #4]
 8008f6c:	220c      	movs	r2, #12
 8008f6e:	400a      	ands	r2, r1
 8008f70:	2a08      	cmp	r2, #8
 8008f72:	d1fa      	bne.n	8008f6a <SystemInit+0xc6>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 8008f74:	bd07      	pop	{r0, r1, r2, pc}
 8008f76:	46c0      	nop			; (mov r8, r8)
 8008f78:	40021000 	.word	0x40021000
 8008f7c:	f8ffb80c 	.word	0xf8ffb80c
 8008f80:	fef6ffff 	.word	0xfef6ffff
 8008f84:	fffbffff 	.word	0xfffbffff
 8008f88:	ffc0ffff 	.word	0xffc0ffff
 8008f8c:	fffffeac 	.word	0xfffffeac
 8008f90:	40022000 	.word	0x40022000
 8008f94:	ffc07fff 	.word	0xffc07fff

08008f98 <timeInit>:
#define OIL_SENOR_IPU_PIN_SOURCE		GPIO_Pin_3
#define OIL_SENOR_IPU_PIN_AF			GPIO_AF_3
static void TIM3_basicConfiguration();
static void TIM15_captureConfiguration(void);

int timeInit(void){
 8008f98:	b5f0      	push	{r4, r5, r6, r7, lr}
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

	TIM_TimeBaseStructure.TIM_Period = 65535;
 8008f9a:	4d32      	ldr	r5, [pc, #200]	; (8009064 <timeInit+0xcc>)
#define OIL_SENOR_IPU_PIN_SOURCE		GPIO_Pin_3
#define OIL_SENOR_IPU_PIN_AF			GPIO_AF_3
static void TIM3_basicConfiguration();
static void TIM15_captureConfiguration(void);

int timeInit(void){
 8008f9c:	b08b      	sub	sp, #44	; 0x2c

void TIM3_basicConfiguration(void) {
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8008f9e:	2002      	movs	r0, #2
 8008fa0:	2101      	movs	r1, #1

	TIM_TimeBaseStructure.TIM_Period = 65535;
 8008fa2:	ac01      	add	r4, sp, #4

void TIM3_basicConfiguration(void) {
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8008fa4:	f000 fd5a 	bl	8009a5c <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseStructure.TIM_Period = 65535;
	TIM_TimeBaseStructure.TIM_Prescaler = 2-1;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8008fa8:	2600      	movs	r6, #0
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

	TIM_TimeBaseStructure.TIM_Period = 65535;
 8008faa:	9502      	str	r5, [sp, #8]
	TIM_TimeBaseStructure.TIM_Prescaler = 2-1;
 8008fac:	2501      	movs	r5, #1
 8008fae:	8025      	strh	r5, [r4, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8008fb0:	8126      	strh	r6, [r4, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008fb2:	8066      	strh	r6, [r4, #2]

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8008fb4:	1c21      	adds	r1, r4, #0
 8008fb6:	482c      	ldr	r0, [pc, #176]	; (8009068 <timeInit+0xd0>)
 8008fb8:	f000 fde2 	bl	8009b80 <TIM_TimeBaseInit>

	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8008fbc:	af09      	add	r7, sp, #36	; 0x24
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8008fbe:	2200      	movs	r2, #0
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8008fc0:	2110      	movs	r1, #16
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8008fc2:	2001      	movs	r0, #1
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8008fc4:	707a      	strb	r2, [r7, #1]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);

	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8008fc6:	7039      	strb	r1, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8008fc8:	70b8      	strb	r0, [r7, #2]
	NVIC_Init(&NVIC_InitStructure);
 8008fca:	1c38      	adds	r0, r7, #0
 8008fcc:	f000 fc30 	bl	8009830 <NVIC_Init>
	/* Enable the CC2 Interrupt Request */
	/* TIM enable counter */
	//TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE);
	TIM_Cmd(TIM3, ENABLE);
 8008fd0:	1c29      	adds	r1, r5, #0
 8008fd2:	4825      	ldr	r0, [pc, #148]	; (8009068 <timeInit+0xd0>)
 8008fd4:	f000 fe16 	bl	8009c04 <TIM_Cmd>
	TIM_ICInitTypeDef TIM_ICInitStructure;
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	/* TIM1 clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM15, ENABLE);
 8008fd8:	2380      	movs	r3, #128	; 0x80
 8008fda:	0258      	lsls	r0, r3, #9
 8008fdc:	1c29      	adds	r1, r5, #0
 8008fde:	f000 fd2f 	bl	8009a40 <RCC_APB2PeriphClockCmd>
	/* GPIOA clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8008fe2:	2180      	movs	r1, #128	; 0x80
 8008fe4:	0288      	lsls	r0, r1, #10
 8008fe6:	1c29      	adds	r1, r5, #0
 8008fe8:	f000 fd1c 	bl	8009a24 <RCC_AHBPeriphClockCmd>
	/* TIM1 channel 1 pin (PA.4) configuration */
	GPIO_InitStructure.GPIO_Pin = OIL_SENOR_IPU_PIN;
 8008fec:	a907      	add	r1, sp, #28
 8008fee:	2208      	movs	r2, #8
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8008ff0:	2002      	movs	r0, #2
	/* TIM1 clock enable */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM15, ENABLE);
	/* GPIOA clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	/* TIM1 channel 1 pin (PA.4) configuration */
	GPIO_InitStructure.GPIO_Pin = OIL_SENOR_IPU_PIN;
 8008ff2:	9207      	str	r2, [sp, #28]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8008ff4:	7108      	strb	r0, [r1, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008ff6:	2200      	movs	r2, #0
	/* GPIOA clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	/* TIM1 channel 1 pin (PA.4) configuration */
	GPIO_InitStructure.GPIO_Pin = OIL_SENOR_IPU_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008ff8:	2303      	movs	r3, #3
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(OIL_SENOR_IPU_PORT, &GPIO_InitStructure);
 8008ffa:	2090      	movs	r0, #144	; 0x90
	/* GPIOA clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
	/* TIM1 channel 1 pin (PA.4) configuration */
	GPIO_InitStructure.GPIO_Pin = OIL_SENOR_IPU_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8008ffc:	714b      	strb	r3, [r1, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008ffe:	718a      	strb	r2, [r1, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009000:	71ca      	strb	r2, [r1, #7]
	GPIO_Init(OIL_SENOR_IPU_PORT, &GPIO_InitStructure);
 8009002:	05c0      	lsls	r0, r0, #23
 8009004:	f000 fb9e 	bl	8009744 <GPIO_Init>
	/* Connect TIM pins to AF2 */
	GPIO_PinAFConfig(OIL_SENOR_IPU_PORT, OIL_SENOR_IPU_PIN_SOURCE,
 8009008:	2390      	movs	r3, #144	; 0x90
 800900a:	05d8      	lsls	r0, r3, #23
 800900c:	2108      	movs	r1, #8
 800900e:	2203      	movs	r2, #3
 8009010:	f000 fbd4 	bl	80097bc <GPIO_PinAFConfig>
			OIL_SENOR_IPU_PIN_AF);

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 65535;
 8009014:	4a13      	ldr	r2, [pc, #76]	; (8009064 <timeInit+0xcc>)
	TIM_TimeBaseStructure.TIM_Prescaler = 2-1;
 8009016:	8025      	strh	r5, [r4, #0]
	/* Connect TIM pins to AF2 */
	GPIO_PinAFConfig(OIL_SENOR_IPU_PORT, OIL_SENOR_IPU_PIN_SOURCE,
			OIL_SENOR_IPU_PIN_AF);

	// Time base configuration
	TIM_TimeBaseStructure.TIM_Period = 65535;
 8009018:	6062      	str	r2, [r4, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = 2-1;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 800901a:	8126      	strh	r6, [r4, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800901c:	8066      	strh	r6, [r4, #2]

	TIM_TimeBaseInit(TIM15, &TIM_TimeBaseStructure);
 800901e:	1c21      	adds	r1, r4, #0
 8009020:	4812      	ldr	r0, [pc, #72]	; (800906c <timeInit+0xd4>)
 8009022:	f000 fdad 	bl	8009b80 <TIM_TimeBaseInit>
	/* TIM1 configuration: Input Capture mode ---------------------
	 The external signal is connected to TIM1 CH1 pin (PA.08)
	 The Rising edge is used as active edge,
	 The TIM1 CCR1 is used to compute the frequency value
	 ------------------------------------------------------------ */
	TIM_ICInitStructure.TIM_Channel = TIM_Channel_2;
 8009026:	2404      	movs	r4, #4
 8009028:	a904      	add	r1, sp, #16
 800902a:	800c      	strh	r4, [r1, #0]
	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
 800902c:	804e      	strh	r6, [r1, #2]
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 800902e:	808d      	strh	r5, [r1, #4]
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8009030:	80ce      	strh	r6, [r1, #6]
	TIM_ICInitStructure.TIM_ICFilter = 0x0;
 8009032:	810e      	strh	r6, [r1, #8]
	TIM_ICInit(TIM15, &TIM_ICInitStructure);
 8009034:	480d      	ldr	r0, [pc, #52]	; (800906c <timeInit+0xd4>)
 8009036:	f000 fe1b 	bl	8009c70 <TIM_ICInit>
	/* Enable the TIM4 global Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM15_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800903a:	2301      	movs	r3, #1
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
	TIM_ICInitStructure.TIM_ICFilter = 0x0;
	TIM_ICInit(TIM15, &TIM_ICInitStructure);
	/* Enable the TIM4 global Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM15_IRQn;
 800903c:	2114      	movs	r1, #20
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 800903e:	2000      	movs	r0, #0
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8009040:	70bb      	strb	r3, [r7, #2]
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
	TIM_ICInitStructure.TIM_ICFilter = 0x0;
	TIM_ICInit(TIM15, &TIM_ICInitStructure);
	/* Enable the TIM4 global Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM15_IRQn;
 8009042:	7039      	strb	r1, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8009044:	7078      	strb	r0, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8009046:	1c38      	adds	r0, r7, #0
 8009048:	f000 fbf2 	bl	8009830 <NVIC_Init>

	/* Enable the CC2 Interrupt Request */
	TIM_ITConfig(TIM15, TIM_IT_CC2, ENABLE);
 800904c:	1c21      	adds	r1, r4, #0
 800904e:	1c2a      	adds	r2, r5, #0
 8009050:	4806      	ldr	r0, [pc, #24]	; (800906c <timeInit+0xd4>)
 8009052:	f000 fe6b 	bl	8009d2c <TIM_ITConfig>
	/* TIM enable counter */
	TIM_Cmd(TIM15, ENABLE);
 8009056:	4805      	ldr	r0, [pc, #20]	; (800906c <timeInit+0xd4>)
 8009058:	1c29      	adds	r1, r5, #0
 800905a:	f000 fdd3 	bl	8009c04 <TIM_Cmd>

int timeInit(void){
	TIM3_basicConfiguration();
	TIM15_captureConfiguration();
	return 1;
}
 800905e:	1c28      	adds	r0, r5, #0
 8009060:	b00b      	add	sp, #44	; 0x2c
 8009062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009064:	0000ffff 	.word	0x0000ffff
 8009068:	40000400 	.word	0x40000400
 800906c:	40014000 	.word	0x40014000

08009070 <TIM3_startIT>:

void TIM3_startIT(void){
 8009070:	b510      	push	{r4, lr}
	TIM_Cmd(TIM3, DISABLE);
	TIM3->CNT =0;
 8009072:	4c08      	ldr	r4, [pc, #32]	; (8009094 <TIM3_startIT+0x24>)
	TIM15_captureConfiguration();
	return 1;
}

void TIM3_startIT(void){
	TIM_Cmd(TIM3, DISABLE);
 8009074:	4807      	ldr	r0, [pc, #28]	; (8009094 <TIM3_startIT+0x24>)
 8009076:	2100      	movs	r1, #0
 8009078:	f000 fdc4 	bl	8009c04 <TIM_Cmd>
	TIM3->CNT =0;
 800907c:	2300      	movs	r3, #0
 800907e:	6263      	str	r3, [r4, #36]	; 0x24
	TIM_Cmd(TIM3, ENABLE);
 8009080:	1c20      	adds	r0, r4, #0
 8009082:	2101      	movs	r1, #1
 8009084:	f000 fdbe 	bl	8009c04 <TIM_Cmd>
	TIM_ITConfig(TIM3,TIM_IT_Update,ENABLE);
 8009088:	2101      	movs	r1, #1
 800908a:	1c20      	adds	r0, r4, #0
 800908c:	1c0a      	adds	r2, r1, #0
 800908e:	f000 fe4d 	bl	8009d2c <TIM_ITConfig>

}
 8009092:	bd10      	pop	{r4, pc}
 8009094:	40000400 	.word	0x40000400

08009098 <TIM3_stopIT>:
void TIM3_stopIT(void){
 8009098:	b508      	push	{r3, lr}
	TIM_Cmd(TIM3, DISABLE);
 800909a:	4805      	ldr	r0, [pc, #20]	; (80090b0 <TIM3_stopIT+0x18>)
 800909c:	2100      	movs	r1, #0
 800909e:	f000 fdb1 	bl	8009c04 <TIM_Cmd>
	TIM_ITConfig(TIM3,TIM_IT_Update,DISABLE);
 80090a2:	4803      	ldr	r0, [pc, #12]	; (80090b0 <TIM3_stopIT+0x18>)
 80090a4:	2101      	movs	r1, #1
 80090a6:	2200      	movs	r2, #0
 80090a8:	f000 fe40 	bl	8009d2c <TIM_ITConfig>

}
 80090ac:	bd08      	pop	{r3, pc}
 80090ae:	46c0      	nop			; (mov r8, r8)
 80090b0:	40000400 	.word	0x40000400

080090b4 <PC_uartInit>:
static void uart2_putChar(uint8_t data);
static uint8_t uart2_getChar(void);
static void uart2_putString(uint8_t *ptr);
static void uart2_putArr(uint8_t *ptr, uint16_t len);

void PC_uartInit(uint32_t baud){
 80090b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090b6:	b08d      	sub	sp, #52	; 0x34

	USART_InitTypeDef USART_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB2PeriphClockCmd(USART1_RCC,ENABLE);
 80090b8:	2180      	movs	r1, #128	; 0x80
static void uart2_putChar(uint8_t data);
static uint8_t uart2_getChar(void);
static void uart2_putString(uint8_t *ptr);
static void uart2_putArr(uint8_t *ptr, uint16_t len);

void PC_uartInit(uint32_t baud){
 80090ba:	9001      	str	r0, [sp, #4]

	USART_InitTypeDef USART_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB2PeriphClockCmd(USART1_RCC,ENABLE);
 80090bc:	01c8      	lsls	r0, r1, #7
 80090be:	2101      	movs	r1, #1
 80090c0:	f000 fcbe 	bl	8009a40 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(USART1_TX_RCC,ENABLE);
 80090c4:	2080      	movs	r0, #128	; 0x80
 80090c6:	0280      	lsls	r0, r0, #10
 80090c8:	2101      	movs	r1, #1
 80090ca:	f000 fcab 	bl	8009a24 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(USART1_RX_RCC,ENABLE);
 80090ce:	2380      	movs	r3, #128	; 0x80
 80090d0:	0298      	lsls	r0, r3, #10
 80090d2:	2101      	movs	r1, #1

	GPIO_PinAFConfig(USART1_TX_PORT, USART1_TX_PIN_SOURCE, GPIO_AF_1);
 80090d4:	2490      	movs	r4, #144	; 0x90

	GPIO_InitStructure.GPIO_Pin = USART1_TX_PIN;
 80090d6:	2780      	movs	r7, #128	; 0x80
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_APB2PeriphClockCmd(USART1_RCC,ENABLE);
	RCC_AHBPeriphClockCmd(USART1_TX_RCC,ENABLE);
	RCC_AHBPeriphClockCmd(USART1_RX_RCC,ENABLE);
 80090d8:	f000 fca4 	bl	8009a24 <RCC_AHBPeriphClockCmd>

	GPIO_PinAFConfig(USART1_TX_PORT, USART1_TX_PIN_SOURCE, GPIO_AF_1);

	GPIO_InitStructure.GPIO_Pin = USART1_TX_PIN;
 80090dc:	00bd      	lsls	r5, r7, #2

	RCC_APB2PeriphClockCmd(USART1_RCC,ENABLE);
	RCC_AHBPeriphClockCmd(USART1_TX_RCC,ENABLE);
	RCC_AHBPeriphClockCmd(USART1_RX_RCC,ENABLE);

	GPIO_PinAFConfig(USART1_TX_PORT, USART1_TX_PIN_SOURCE, GPIO_AF_1);
 80090de:	05e0      	lsls	r0, r4, #23
 80090e0:	2109      	movs	r1, #9

	GPIO_InitStructure.GPIO_Pin = USART1_TX_PIN;
 80090e2:	ac09      	add	r4, sp, #36	; 0x24

	RCC_APB2PeriphClockCmd(USART1_RCC,ENABLE);
	RCC_AHBPeriphClockCmd(USART1_TX_RCC,ENABLE);
	RCC_AHBPeriphClockCmd(USART1_RX_RCC,ENABLE);

	GPIO_PinAFConfig(USART1_TX_PORT, USART1_TX_PIN_SOURCE, GPIO_AF_1);
 80090e4:	2201      	movs	r2, #1

	GPIO_InitStructure.GPIO_Pin = USART1_TX_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
 80090e6:	2603      	movs	r6, #3

	RCC_APB2PeriphClockCmd(USART1_RCC,ENABLE);
	RCC_AHBPeriphClockCmd(USART1_TX_RCC,ENABLE);
	RCC_AHBPeriphClockCmd(USART1_RX_RCC,ENABLE);

	GPIO_PinAFConfig(USART1_TX_PORT, USART1_TX_PIN_SOURCE, GPIO_AF_1);
 80090e8:	f000 fb68 	bl	80097bc <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = USART1_TX_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80090ec:	2702      	movs	r7, #2
	RCC_AHBPeriphClockCmd(USART1_TX_RCC,ENABLE);
	RCC_AHBPeriphClockCmd(USART1_RX_RCC,ENABLE);

	GPIO_PinAFConfig(USART1_TX_PORT, USART1_TX_PIN_SOURCE, GPIO_AF_1);

	GPIO_InitStructure.GPIO_Pin = USART1_TX_PIN;
 80090ee:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
 80090f0:	7166      	strb	r6, [r4, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80090f2:	2500      	movs	r5, #0
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80090f4:	2601      	movs	r6, #1
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);
 80090f6:	2290      	movs	r2, #144	; 0x90
	RCC_AHBPeriphClockCmd(USART1_RX_RCC,ENABLE);

	GPIO_PinAFConfig(USART1_TX_PORT, USART1_TX_PIN_SOURCE, GPIO_AF_1);

	GPIO_InitStructure.GPIO_Pin = USART1_TX_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80090f8:	7127      	strb	r7, [r4, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);
 80090fa:	05d0      	lsls	r0, r2, #23
 80090fc:	1c21      	adds	r1, r4, #0
	GPIO_PinAFConfig(USART1_TX_PORT, USART1_TX_PIN_SOURCE, GPIO_AF_1);

	GPIO_InitStructure.GPIO_Pin = USART1_TX_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80090fe:	71a5      	strb	r5, [r4, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8009100:	71e6      	strb	r6, [r4, #7]
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);
 8009102:	f000 fb1f 	bl	8009744 <GPIO_Init>
	GPIO_PinAFConfig(USART1_RX_PORT, USART1_RX_PIN_SOURCE, GPIO_AF_1);
 8009106:	2190      	movs	r1, #144	; 0x90
 8009108:	05c8      	lsls	r0, r1, #23
 800910a:	1c32      	adds	r2, r6, #0
 800910c:	210a      	movs	r1, #10
 800910e:	f000 fb55 	bl	80097bc <GPIO_PinAFConfig>
	GPIO_InitStructure.GPIO_Pin = USART1_RX_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);
 8009112:	2290      	movs	r2, #144	; 0x90
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);
	GPIO_PinAFConfig(USART1_RX_PORT, USART1_RX_PIN_SOURCE, GPIO_AF_1);

	GPIO_InitStructure.GPIO_Pin = USART1_RX_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8009114:	7127      	strb	r7, [r4, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);
	GPIO_PinAFConfig(USART1_RX_PORT, USART1_RX_PIN_SOURCE, GPIO_AF_1);

	GPIO_InitStructure.GPIO_Pin = USART1_RX_PIN;
 8009116:	2080      	movs	r0, #128	; 0x80
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
 8009118:	2703      	movs	r7, #3
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);
	GPIO_PinAFConfig(USART1_RX_PORT, USART1_RX_PIN_SOURCE, GPIO_AF_1);

	GPIO_InitStructure.GPIO_Pin = USART1_RX_PIN;
 800911a:	00c3      	lsls	r3, r0, #3
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);
 800911c:	1c21      	adds	r1, r4, #0
 800911e:	05d0      	lsls	r0, r2, #23
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);
	GPIO_PinAFConfig(USART1_RX_PORT, USART1_RX_PIN_SOURCE, GPIO_AF_1);

	GPIO_InitStructure.GPIO_Pin = USART1_RX_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
 8009120:	7167      	strb	r7, [r4, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8009122:	71a5      	strb	r5, [r4, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8009124:	71e6      	strb	r6, [r4, #7]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);
	GPIO_PinAFConfig(USART1_RX_PORT, USART1_RX_PIN_SOURCE, GPIO_AF_1);

	GPIO_InitStructure.GPIO_Pin = USART1_RX_PIN;
 8009126:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);
 8009128:	f000 fb0c 	bl	8009744 <GPIO_Init>

	USART_InitStructure.USART_BaudRate = baud;
 800912c:	9901      	ldr	r1, [sp, #4]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl =
	USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800912e:	200c      	movs	r0, #12
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_Level_3;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);

	USART_InitStructure.USART_BaudRate = baud;
 8009130:	9103      	str	r1, [sp, #12]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl =
	USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8009132:	9007      	str	r0, [sp, #28]
	/* Configure the USART1 */
	USART_Init(USART1, &USART_InitStructure);
 8009134:	a903      	add	r1, sp, #12
 8009136:	480f      	ldr	r0, [pc, #60]	; (8009174 <PC_uartInit+0xc0>)
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(USART1_TX_PORT, &GPIO_InitStructure);

	USART_InitStructure.USART_BaudRate = baud;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8009138:	9504      	str	r5, [sp, #16]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800913a:	9505      	str	r5, [sp, #20]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 800913c:	9506      	str	r5, [sp, #24]
	USART_InitStructure.USART_HardwareFlowControl =
 800913e:	9508      	str	r5, [sp, #32]
	USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
	/* Configure the USART1 */
	USART_Init(USART1, &USART_InitStructure);
 8009140:	f000 fe0c 	bl	8009d5c <USART_Init>
	/* Enable USART1 interrupt */
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8009144:	1c32      	adds	r2, r6, #0
 8009146:	480b      	ldr	r0, [pc, #44]	; (8009174 <PC_uartInit+0xc0>)
 8009148:	490b      	ldr	r1, [pc, #44]	; (8009178 <PC_uartInit+0xc4>)
 800914a:	f000 fe7a 	bl	8009e42 <USART_ITConfig>
	/* Enable the USART1 */
	USART_Cmd(USART1, ENABLE);
 800914e:	1c31      	adds	r1, r6, #0
 8009150:	4808      	ldr	r0, [pc, #32]	; (8009174 <PC_uartInit+0xc0>)
 8009152:	f000 fe63 	bl	8009e1c <USART_Cmd>

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8009156:	a80b      	add	r0, sp, #44	; 0x2c
 8009158:	231b      	movs	r3, #27
 800915a:	7003      	strb	r3, [r0, #0]
	NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 800915c:	7045      	strb	r5, [r0, #1]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800915e:	7086      	strb	r6, [r0, #2]
	NVIC_Init(&NVIC_InitStructure);
 8009160:	f000 fb66 	bl	8009830 <NVIC_Init>
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8009164:	4803      	ldr	r0, [pc, #12]	; (8009174 <PC_uartInit+0xc0>)
 8009166:	4904      	ldr	r1, [pc, #16]	; (8009178 <PC_uartInit+0xc4>)
 8009168:	1c32      	adds	r2, r6, #0
 800916a:	f000 fe6a 	bl	8009e42 <USART_ITConfig>
static void uart2_putString(uint8_t *ptr);
static void uart2_putArr(uint8_t *ptr, uint16_t len);

void PC_uartInit(uint32_t baud){
	uart1_init(baud);
}
 800916e:	b00d      	add	sp, #52	; 0x34
 8009170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009172:	46c0      	nop			; (mov r8, r8)
 8009174:	40013800 	.word	0x40013800
 8009178:	00050105 	.word	0x00050105

0800917c <PC_uart_putChar>:

void PC_uart_putChar(uint8_t data){
 800917c:	b510      	push	{r4, lr}
 800917e:	1c04      	adds	r4, r0, #0

}


static void uart1_putChar(uint8_t data) {
	while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET) {
 8009180:	4805      	ldr	r0, [pc, #20]	; (8009198 <PC_uart_putChar+0x1c>)
 8009182:	2180      	movs	r1, #128	; 0x80
 8009184:	f000 fe74 	bl	8009e70 <USART_GetFlagStatus>
 8009188:	2800      	cmp	r0, #0
 800918a:	d0f9      	beq.n	8009180 <PC_uart_putChar+0x4>
	}
	USART_SendData(USART1, data);
 800918c:	4802      	ldr	r0, [pc, #8]	; (8009198 <PC_uart_putChar+0x1c>)
 800918e:	1c21      	adds	r1, r4, #0
 8009190:	f000 fe4f 	bl	8009e32 <USART_SendData>
	uart1_init(baud);
}

void PC_uart_putChar(uint8_t data){
	uart1_putChar(data);
}
 8009194:	bd10      	pop	{r4, pc}
 8009196:	46c0      	nop			; (mov r8, r8)
 8009198:	40013800 	.word	0x40013800

0800919c <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 800919c:	b508      	push	{r3, lr}
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 800919e:	4a07      	ldr	r2, [pc, #28]	; (80091bc <xputc+0x20>)
 80091a0:	6813      	ldr	r3, [r2, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <xputc+0x12>
		*outptr++ = (unsigned char)c;
 80091a6:	7018      	strb	r0, [r3, #0]
 80091a8:	3301      	adds	r3, #1
 80091aa:	6013      	str	r3, [r2, #0]
		return;
 80091ac:	e004      	b.n	80091b8 <xputc+0x1c>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 80091ae:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <xputc+0x24>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d000      	beq.n	80091b8 <xputc+0x1c>
 80091b6:	4798      	blx	r3
}
 80091b8:	bd08      	pop	{r3, pc}
 80091ba:	46c0      	nop			; (mov r8, r8)
 80091bc:	200009a4 	.word	0x200009a4
 80091c0:	20001580 	.word	0x20001580

080091c4 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 80091c4:	b510      	push	{r4, lr}
 80091c6:	1c04      	adds	r4, r0, #0
	while (*str)
 80091c8:	e002      	b.n	80091d0 <xputs+0xc>
		xputc(*str++);
 80091ca:	3401      	adds	r4, #1
 80091cc:	f7ff ffe6 	bl	800919c <xputc>

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
	while (*str)
 80091d0:	7820      	ldrb	r0, [r4, #0]
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d1f9      	bne.n	80091ca <xputs+0x6>
		xputc(*str++);
}
 80091d6:	bd10      	pop	{r4, pc}

080091d8 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 80091d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091da:	b08b      	sub	sp, #44	; 0x2c
 80091dc:	1c04      	adds	r4, r0, #0
 80091de:	1c0e      	adds	r6, r1, #0
 80091e0:	e000      	b.n	80091e4 <xvprintf+0xc>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 80091e2:	9e03      	ldr	r6, [sp, #12]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 80091e4:	7820      	ldrb	r0, [r4, #0]
		if (!c) break;				/* End of format? */
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d100      	bne.n	80091ec <xvprintf+0x14>
 80091ea:	e0d7      	b.n	800939c <xvprintf+0x1c4>
		if (c != '%') {				/* Pass through it if not a % sequense */
 80091ec:	2825      	cmp	r0, #37	; 0x25
 80091ee:	d001      	beq.n	80091f4 <xvprintf+0x1c>
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 80091f0:	3401      	adds	r4, #1
 80091f2:	e06c      	b.n	80092ce <xvprintf+0xf6>
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
 80091f4:	7865      	ldrb	r5, [r4, #1]
		if (c == '0') {				/* Flag: '0' padded */
 80091f6:	2d30      	cmp	r5, #48	; 0x30
 80091f8:	d103      	bne.n	8009202 <xvprintf+0x2a>
			f = 1; c = *fmt++;
 80091fa:	78a5      	ldrb	r5, [r4, #2]
 80091fc:	2701      	movs	r7, #1
 80091fe:	3403      	adds	r4, #3
 8009200:	e007      	b.n	8009212 <xvprintf+0x3a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8009202:	2d2d      	cmp	r5, #45	; 0x2d
 8009204:	d002      	beq.n	800920c <xvprintf+0x34>
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
 8009206:	3402      	adds	r4, #2
		c = *fmt++;					/* Get a char */
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
 8009208:	2700      	movs	r7, #0
 800920a:	e002      	b.n	8009212 <xvprintf+0x3a>
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: '0' padded */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 800920c:	78a5      	ldrb	r5, [r4, #2]
 800920e:	2702      	movs	r7, #2
 8009210:	3403      	adds	r4, #3
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8009212:	2100      	movs	r1, #0
 8009214:	9104      	str	r1, [sp, #16]
 8009216:	e007      	b.n	8009228 <xvprintf+0x50>
			w = w * 10 + c - '0';
 8009218:	9a04      	ldr	r2, [sp, #16]
 800921a:	230a      	movs	r3, #10
 800921c:	4353      	muls	r3, r2
 800921e:	195d      	adds	r5, r3, r5
 8009220:	3d30      	subs	r5, #48	; 0x30
 8009222:	9504      	str	r5, [sp, #16]
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8009224:	7825      	ldrb	r5, [r4, #0]
 8009226:	3401      	adds	r4, #1
 8009228:	1c28      	adds	r0, r5, #0
 800922a:	3830      	subs	r0, #48	; 0x30
 800922c:	2809      	cmp	r0, #9
 800922e:	d9f3      	bls.n	8009218 <xvprintf+0x40>
			w = w * 10 + c - '0';
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8009230:	2d4c      	cmp	r5, #76	; 0x4c
 8009232:	d001      	beq.n	8009238 <xvprintf+0x60>
 8009234:	2d6c      	cmp	r5, #108	; 0x6c
 8009236:	d103      	bne.n	8009240 <xvprintf+0x68>
			f |= 4; c = *fmt++;
 8009238:	2104      	movs	r1, #4
 800923a:	7825      	ldrb	r5, [r4, #0]
 800923c:	430f      	orrs	r7, r1
 800923e:	3401      	adds	r4, #1
		}
		if (!c) break;				/* End of format? */
 8009240:	2d00      	cmp	r5, #0
 8009242:	d100      	bne.n	8009246 <xvprintf+0x6e>
 8009244:	e0aa      	b.n	800939c <xvprintf+0x1c4>
		d = c;
		if (d >= 'a') d -= 0x20;
 8009246:	1c2b      	adds	r3, r5, #0
 8009248:	2d60      	cmp	r5, #96	; 0x60
 800924a:	d901      	bls.n	8009250 <xvprintf+0x78>
 800924c:	3b20      	subs	r3, #32
 800924e:	b2db      	uxtb	r3, r3
		switch (d) {				/* Type is... */
 8009250:	2b4f      	cmp	r3, #79	; 0x4f
 8009252:	d043      	beq.n	80092dc <xvprintf+0x104>
 8009254:	d806      	bhi.n	8009264 <xvprintf+0x8c>
 8009256:	2b43      	cmp	r3, #67	; 0x43
 8009258:	d030      	beq.n	80092bc <xvprintf+0xe4>
 800925a:	2b44      	cmp	r3, #68	; 0x44
 800925c:	d009      	beq.n	8009272 <xvprintf+0x9a>
 800925e:	2b42      	cmp	r3, #66	; 0x42
 8009260:	d134      	bne.n	80092cc <xvprintf+0xf4>
 8009262:	e038      	b.n	80092d6 <xvprintf+0xfe>
 8009264:	2b55      	cmp	r3, #85	; 0x55
 8009266:	d004      	beq.n	8009272 <xvprintf+0x9a>
 8009268:	2b58      	cmp	r3, #88	; 0x58
 800926a:	d02d      	beq.n	80092c8 <xvprintf+0xf0>
 800926c:	2b53      	cmp	r3, #83	; 0x53
 800926e:	d12d      	bne.n	80092cc <xvprintf+0xf4>
 8009270:	e001      	b.n	8009276 <xvprintf+0x9e>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8009272:	210a      	movs	r1, #10
 8009274:	e033      	b.n	80092de <xvprintf+0x106>
		if (!c) break;				/* End of format? */
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8009276:	1d35      	adds	r5, r6, #4
 8009278:	6836      	ldr	r6, [r6, #0]
 800927a:	9503      	str	r5, [sp, #12]
 800927c:	9601      	str	r6, [sp, #4]
			for (j = 0; p[j]; j++) ;
 800927e:	2500      	movs	r5, #0
 8009280:	e000      	b.n	8009284 <xvprintf+0xac>
 8009282:	3501      	adds	r5, #1
 8009284:	9a01      	ldr	r2, [sp, #4]
 8009286:	5d53      	ldrb	r3, [r2, r5]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1fa      	bne.n	8009282 <xvprintf+0xaa>
 800928c:	e003      	b.n	8009296 <xvprintf+0xbe>
			while (!(f & 2) && j++ < w) xputc(' ');
 800928e:	2020      	movs	r0, #32
 8009290:	f7ff ff84 	bl	800919c <xputc>
 8009294:	1c35      	adds	r5, r6, #0
 8009296:	07ba      	lsls	r2, r7, #30
 8009298:	d404      	bmi.n	80092a4 <xvprintf+0xcc>
 800929a:	9804      	ldr	r0, [sp, #16]
 800929c:	1c6e      	adds	r6, r5, #1
 800929e:	4285      	cmp	r5, r0
 80092a0:	d3f5      	bcc.n	800928e <xvprintf+0xb6>
 80092a2:	1c35      	adds	r5, r6, #0
			xputs(p);
 80092a4:	9801      	ldr	r0, [sp, #4]
 80092a6:	f7ff ff8d 	bl	80091c4 <xputs>
			while (j++ < w) xputc(' ');
 80092aa:	e003      	b.n	80092b4 <xvprintf+0xdc>
 80092ac:	2020      	movs	r0, #32
 80092ae:	f7ff ff75 	bl	800919c <xputc>
 80092b2:	3501      	adds	r5, #1
 80092b4:	9f04      	ldr	r7, [sp, #16]
 80092b6:	42bd      	cmp	r5, r7
 80092b8:	d3f8      	bcc.n	80092ac <xvprintf+0xd4>
 80092ba:	e792      	b.n	80091e2 <xvprintf+0xa>
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 80092bc:	1d31      	adds	r1, r6, #4
 80092be:	7830      	ldrb	r0, [r6, #0]
 80092c0:	9103      	str	r1, [sp, #12]
 80092c2:	f7ff ff6b 	bl	800919c <xputc>
 80092c6:	e78c      	b.n	80091e2 <xvprintf+0xa>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80092c8:	2110      	movs	r1, #16
 80092ca:	e008      	b.n	80092de <xvprintf+0x106>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 80092cc:	1c28      	adds	r0, r5, #0
 80092ce:	f7ff ff65 	bl	800919c <xputc>
 80092d2:	9603      	str	r6, [sp, #12]
 80092d4:	e785      	b.n	80091e2 <xvprintf+0xa>
			while (j++ < w) xputc(' ');
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
 80092d6:	2202      	movs	r2, #2
 80092d8:	9202      	str	r2, [sp, #8]
 80092da:	e001      	b.n	80092e0 <xvprintf+0x108>
		case 'O' :					/* Octal */
			r = 8; break;
 80092dc:	2108      	movs	r1, #8
 80092de:	9102      	str	r1, [sp, #8]
 80092e0:	1d30      	adds	r0, r6, #4
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 80092e2:	9003      	str	r0, [sp, #12]
 80092e4:	6836      	ldr	r6, [r6, #0]
		if (d == 'D' && (v & 0x80000000)) {
 80092e6:	2e00      	cmp	r6, #0
 80092e8:	da04      	bge.n	80092f4 <xvprintf+0x11c>
 80092ea:	2b44      	cmp	r3, #68	; 0x44
 80092ec:	d102      	bne.n	80092f4 <xvprintf+0x11c>
			v = 0 - v;
			f |= 8;
 80092ee:	2308      	movs	r3, #8
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
			v = 0 - v;
 80092f0:	4276      	negs	r6, r6
			f |= 8;
 80092f2:	431f      	orrs	r7, r3
		}
		i = 0;
 80092f4:	2100      	movs	r1, #0
 80092f6:	9105      	str	r1, [sp, #20]
 80092f8:	e001      	b.n	80092fe <xvprintf+0x126>
		do {
			d = (char)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
 80092fa:	9a01      	ldr	r2, [sp, #4]
 80092fc:	9205      	str	r2, [sp, #20]
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (char)(v % r); v /= r;
 80092fe:	1c30      	adds	r0, r6, #0
 8009300:	9902      	ldr	r1, [sp, #8]
 8009302:	f7f9 ff65 	bl	80031d0 <__aeabi_uidivmod>
 8009306:	1c30      	adds	r0, r6, #0
 8009308:	b2cb      	uxtb	r3, r1
 800930a:	9902      	ldr	r1, [sp, #8]
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	f7f9 ff1b 	bl	8003148 <__aeabi_uidiv>
 8009312:	1c06      	adds	r6, r0, #0
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8009314:	9801      	ldr	r0, [sp, #4]
 8009316:	2809      	cmp	r0, #9
 8009318:	d907      	bls.n	800932a <xvprintf+0x152>
 800931a:	2307      	movs	r3, #7
 800931c:	2d78      	cmp	r5, #120	; 0x78
 800931e:	d100      	bne.n	8009322 <xvprintf+0x14a>
 8009320:	2327      	movs	r3, #39	; 0x27
 8009322:	9801      	ldr	r0, [sp, #4]
 8009324:	181a      	adds	r2, r3, r0
 8009326:	b2d1      	uxtb	r1, r2
 8009328:	9101      	str	r1, [sp, #4]
			s[i++] = d + '0';
 800932a:	9b01      	ldr	r3, [sp, #4]
 800932c:	9a05      	ldr	r2, [sp, #20]
 800932e:	3330      	adds	r3, #48	; 0x30
 8009330:	a906      	add	r1, sp, #24
 8009332:	5453      	strb	r3, [r2, r1]
 8009334:	3201      	adds	r2, #1
 8009336:	9201      	str	r2, [sp, #4]
		} while (v && i < sizeof(s));
 8009338:	2a0f      	cmp	r2, #15
 800933a:	d801      	bhi.n	8009340 <xvprintf+0x168>
 800933c:	2e00      	cmp	r6, #0
 800933e:	d1dc      	bne.n	80092fa <xvprintf+0x122>
		if (f & 8) s[i++] = '-';
 8009340:	073b      	lsls	r3, r7, #28
 8009342:	d506      	bpl.n	8009352 <xvprintf+0x17a>
 8009344:	9e05      	ldr	r6, [sp, #20]
 8009346:	9801      	ldr	r0, [sp, #4]
 8009348:	222d      	movs	r2, #45	; 0x2d
 800934a:	ad06      	add	r5, sp, #24
 800934c:	3602      	adds	r6, #2
 800934e:	542a      	strb	r2, [r5, r0]
 8009350:	9601      	str	r6, [sp, #4]
		j = i; d = (f & 1) ? '0' : ' ';
 8009352:	2620      	movs	r6, #32
 8009354:	07f9      	lsls	r1, r7, #31
 8009356:	d500      	bpl.n	800935a <xvprintf+0x182>
 8009358:	2630      	movs	r6, #48	; 0x30
 800935a:	9d01      	ldr	r5, [sp, #4]
		while (!(f & 2) && j++ < w) xputc(d);
 800935c:	e003      	b.n	8009366 <xvprintf+0x18e>
 800935e:	1c30      	adds	r0, r6, #0
 8009360:	f7ff ff1c 	bl	800919c <xputc>
 8009364:	9d02      	ldr	r5, [sp, #8]
 8009366:	07ba      	lsls	r2, r7, #30
 8009368:	d405      	bmi.n	8009376 <xvprintf+0x19e>
 800936a:	9904      	ldr	r1, [sp, #16]
 800936c:	1c6b      	adds	r3, r5, #1
 800936e:	9302      	str	r3, [sp, #8]
 8009370:	428d      	cmp	r5, r1
 8009372:	d3f4      	bcc.n	800935e <xvprintf+0x186>
 8009374:	1c1d      	adds	r5, r3, #0
 8009376:	9e01      	ldr	r6, [sp, #4]
		do xputc(s[--i]); while(i);
 8009378:	3e01      	subs	r6, #1
 800937a:	2018      	movs	r0, #24
 800937c:	1987      	adds	r7, r0, r6
 800937e:	466b      	mov	r3, sp
 8009380:	5cf8      	ldrb	r0, [r7, r3]
 8009382:	f7ff ff0b 	bl	800919c <xputc>
 8009386:	2e00      	cmp	r6, #0
 8009388:	d1f6      	bne.n	8009378 <xvprintf+0x1a0>
 800938a:	e003      	b.n	8009394 <xvprintf+0x1bc>
		while (j++ < w) xputc(' ');
 800938c:	2020      	movs	r0, #32
 800938e:	f7ff ff05 	bl	800919c <xputc>
 8009392:	3501      	adds	r5, #1
 8009394:	9e04      	ldr	r6, [sp, #16]
 8009396:	42b5      	cmp	r5, r6
 8009398:	d3f8      	bcc.n	800938c <xvprintf+0x1b4>
 800939a:	e722      	b.n	80091e2 <xvprintf+0xa>
	}
}
 800939c:	b00b      	add	sp, #44	; 0x2c
 800939e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080093a0 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 80093a0:	b40f      	push	{r0, r1, r2, r3}
 80093a2:	b507      	push	{r0, r1, r2, lr}
 80093a4:	a904      	add	r1, sp, #16
 80093a6:	c901      	ldmia	r1!, {r0}
	va_list arp;


	va_start(arp, fmt);
 80093a8:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 80093aa:	f7ff ff15 	bl	80091d8 <xvprintf>
	va_end(arp);
}
 80093ae:	b003      	add	sp, #12
 80093b0:	bc08      	pop	{r3}
 80093b2:	b004      	add	sp, #16
 80093b4:	4718      	bx	r3
	...

080093b8 <ADC_DeInit>:
  * @brief  Deinitializes ADC1 peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
 80093b8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  if(ADCx == ADC1)
 80093ba:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <ADC_DeInit+0x20>)
 80093bc:	4298      	cmp	r0, r3
 80093be:	d109      	bne.n	80093d4 <ADC_DeInit+0x1c>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
 80093c0:	2180      	movs	r1, #128	; 0x80
 80093c2:	0088      	lsls	r0, r1, #2
 80093c4:	2101      	movs	r1, #1
 80093c6:	f000 fb57 	bl	8009a78 <RCC_APB2PeriphResetCmd>

    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
 80093ca:	2080      	movs	r0, #128	; 0x80
 80093cc:	0080      	lsls	r0, r0, #2
 80093ce:	2100      	movs	r1, #0
 80093d0:	f000 fb52 	bl	8009a78 <RCC_APB2PeriphResetCmd>
  }
}
 80093d4:	bd08      	pop	{r3, pc}
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	40012400 	.word	0x40012400

080093dc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80093dc:	b510      	push	{r4, lr}
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 80093de:	688a      	ldr	r2, [r1, #8]
 80093e0:	680b      	ldr	r3, [r1, #0]
  assert_param(IS_ADC_EXTERNAL_TRIG_CONV(ADC_InitStruct->ADC_ExternalTrigConv));
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_SCAN_DIRECTION(ADC_InitStruct->ADC_ScanDirection)); 

  /* Get the ADCx CFGR value */
  tmpreg = ADCx->CFGR1;
 80093e2:	68c4      	ldr	r4, [r0, #12]
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 80093e4:	4313      	orrs	r3, r2
 80093e6:	68ca      	ldr	r2, [r1, #12]
 80093e8:	4313      	orrs	r3, r2
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 80093ea:	690a      	ldr	r2, [r1, #16]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	694a      	ldr	r2, [r1, #20]
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 80093f0:	7909      	ldrb	r1, [r1, #4]
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
 80093f2:	4313      	orrs	r3, r2

  /* Get the ADCx CFGR value */
  tmpreg = ADCx->CFGR1;

  /* Clear SCANDIR, RES[1:0], ALIGN, EXTSEL[2:0], EXTEN[1:0] and CONT bits */
  tmpreg &= CFGR1_CLEAR_MASK;
 80093f4:	4a03      	ldr	r2, [pc, #12]	; (8009404 <ADC_Init+0x28>)
 80093f6:	4022      	ands	r2, r4
  /* Set EXTEN[1:0] bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL[2:0] bits according to ADC_ExternalTrigConv value */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set SCANDIR bit according to ADC_ScanDirection value */
 
  tmpreg  |= (uint32_t)(ADC_InitStruct->ADC_Resolution | ((uint32_t)(ADC_InitStruct->ADC_ContinuousConvMode) << 13) |
 80093f8:	4313      	orrs	r3, r2
 80093fa:	034a      	lsls	r2, r1, #13
 80093fc:	4313      	orrs	r3, r2
             ADC_InitStruct->ADC_ExternalTrigConvEdge | ADC_InitStruct->ADC_ExternalTrigConv |
             ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ScanDirection);

  /* Write to ADCx CFGR */
  ADCx->CFGR1 = tmpreg;
 80093fe:	60c3      	str	r3, [r0, #12]
}
 8009400:	bd10      	pop	{r4, pc}
 8009402:	46c0      	nop			; (mov r8, r8)
 8009404:	ffffd203 	.word	0xffffd203

08009408 <ADC_StructInit>:
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8009408:	2300      	movs	r3, #0
 800940a:	6003      	str	r3, [r0, #0]

   /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800940c:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800940e:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_TRGO;
 8009410:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8009412:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_ScanDirection member */
  ADC_InitStruct->ADC_ScanDirection = ADC_ScanDirection_Upward;
 8009414:	6143      	str	r3, [r0, #20]
}
 8009416:	4770      	bx	lr

08009418 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8009418:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ADEN bit to Enable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADEN;
 800941a:	6883      	ldr	r3, [r0, #8]
 800941c:	2201      	movs	r2, #1
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800941e:	2900      	cmp	r1, #0
 8009420:	d100      	bne.n	8009424 <ADC_Cmd+0xc>
    ADCx->CR |= (uint32_t)ADC_CR_ADEN;
  }
  else
  {
    /* Set the ADDIS to Disable the ADC peripheral */
    ADCx->CR |= (uint32_t)ADC_CR_ADDIS;
 8009422:	2202      	movs	r2, #2
 8009424:	4313      	orrs	r3, r2
 8009426:	6083      	str	r3, [r0, #8]
  }
}
 8009428:	bd00      	pop	{pc}
	...

0800942c <ADC_TempSensorCmd>:
  * @param  NewState: new state of the temperature sensor input channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorCmd(FunctionalState NewState)
{
 800942c:	b500      	push	{lr}
 800942e:	4b06      	ldr	r3, [pc, #24]	; (8009448 <ADC_TempSensorCmd+0x1c>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSEN;
 8009430:	6819      	ldr	r1, [r3, #0]
void ADC_TempSensorCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009432:	2800      	cmp	r0, #0
 8009434:	d003      	beq.n	800943e <ADC_TempSensorCmd+0x12>
  {
    /* Enable the temperature sensor channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSEN;
 8009436:	2280      	movs	r2, #128	; 0x80
 8009438:	0412      	lsls	r2, r2, #16
 800943a:	430a      	orrs	r2, r1
 800943c:	e001      	b.n	8009442 <ADC_TempSensorCmd+0x16>
  }
  else
  {
    /* Disable the temperature sensor channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSEN);
 800943e:	4a03      	ldr	r2, [pc, #12]	; (800944c <ADC_TempSensorCmd+0x20>)
 8009440:	400a      	ands	r2, r1
 8009442:	601a      	str	r2, [r3, #0]
  }
}
 8009444:	bd00      	pop	{pc}
 8009446:	46c0      	nop			; (mov r8, r8)
 8009448:	40012708 	.word	0x40012708
 800944c:	ff7fffff 	.word	0xff7fffff

08009450 <ADC_VrefintCmd>:
  * @param  NewState: new state of the Vref input channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VrefintCmd(FunctionalState NewState)
{
 8009450:	b500      	push	{lr}
 8009452:	4b06      	ldr	r3, [pc, #24]	; (800946c <ADC_VrefintCmd+0x1c>)
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VREFEN;
 8009454:	6819      	ldr	r1, [r3, #0]
void ADC_VrefintCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009456:	2800      	cmp	r0, #0
 8009458:	d003      	beq.n	8009462 <ADC_VrefintCmd+0x12>
  {
    /* Enable the Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VREFEN;
 800945a:	2280      	movs	r2, #128	; 0x80
 800945c:	03d2      	lsls	r2, r2, #15
 800945e:	430a      	orrs	r2, r1
 8009460:	e001      	b.n	8009466 <ADC_VrefintCmd+0x16>
  }
  else
  {
    /* Disable the Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VREFEN);
 8009462:	4a03      	ldr	r2, [pc, #12]	; (8009470 <ADC_VrefintCmd+0x20>)
 8009464:	400a      	ands	r2, r1
 8009466:	601a      	str	r2, [r3, #0]
  }
}
 8009468:	bd00      	pop	{pc}
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	40012708 	.word	0x40012708
 8009470:	ffbfffff 	.word	0xffbfffff

08009474 <ADC_ChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Configure the ADC Channel */
  ADCx->CHSELR |= (uint32_t)ADC_Channel;
 8009474:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009476:	4319      	orrs	r1, r3
 8009478:	6281      	str	r1, [r0, #40]	; 0x28

  /* Set the ADC Sampling Time register */
  tmpreg |= (uint32_t)ADC_SampleTime;

  /* Configure the ADC Sample time register */
  ADCx->SMPR = tmpreg ;
 800947a:	6142      	str	r2, [r0, #20]
}
 800947c:	4770      	bx	lr
	...

08009480 <ADC_GetCalibrationFactor>:
  *         reset configuration (ADEN must be equal to 0).
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval ADC Calibration factor 
  */
uint32_t ADC_GetCalibrationFactor(ADC_TypeDef* ADCx)
{
 8009480:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADC calibartion */
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
 8009482:	6881      	ldr	r1, [r0, #8]
  *         reset configuration (ADEN must be equal to 0).
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval ADC Calibration factor 
  */
uint32_t ADC_GetCalibrationFactor(ADC_TypeDef* ADCx)
{
 8009484:	1c03      	adds	r3, r0, #0

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Set the ADC calibartion */
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
 8009486:	2080      	movs	r0, #128	; 0x80
 8009488:	0602      	lsls	r2, r0, #24
 800948a:	430a      	orrs	r2, r1
 800948c:	609a      	str	r2, [r3, #8]
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval ADC Calibration factor 
  */
uint32_t ADC_GetCalibrationFactor(ADC_TypeDef* ADCx)
{
  uint32_t tmpreg = 0, calibrationcounter = 0, calibrationstatus = 0;
 800948e:	2200      	movs	r2, #0
  /* Wait until no ADC calibration is completed */
  do
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
    calibrationcounter++;  
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 8009490:	4806      	ldr	r0, [pc, #24]	; (80094ac <ADC_GetCalibrationFactor+0x2c>)
  
  /* Wait until no ADC calibration is completed */
  do
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
    calibrationcounter++;  
 8009492:	3201      	adds	r2, #1
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 8009494:	1814      	adds	r4, r2, r0
  ADCx->CR |= (uint32_t)ADC_CR_ADCAL;
  
  /* Wait until no ADC calibration is completed */
  do
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
 8009496:	6899      	ldr	r1, [r3, #8]
    calibrationcounter++;  
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
 8009498:	2c00      	cmp	r4, #0
 800949a:	d001      	beq.n	80094a0 <ADC_GetCalibrationFactor+0x20>
 800949c:	2900      	cmp	r1, #0
 800949e:	dbf7      	blt.n	8009490 <ADC_GetCalibrationFactor+0x10>
    
  if((uint32_t)(ADCx->CR & ADC_CR_ADCAL) == RESET)
 80094a0:	689a      	ldr	r2, [r3, #8]
    tmpreg = ADCx->DR;
  }
  else
  {
    /* Error factor */
    tmpreg = 0x00000000;
 80094a2:	2000      	movs	r0, #0
  {
    calibrationstatus = ADCx->CR & ADC_CR_ADCAL;
    calibrationcounter++;  
  } while((calibrationcounter != CALIBRATION_TIMEOUT) && (calibrationstatus != 0x00));
    
  if((uint32_t)(ADCx->CR & ADC_CR_ADCAL) == RESET)
 80094a4:	4282      	cmp	r2, r0
 80094a6:	db00      	blt.n	80094aa <ADC_GetCalibrationFactor+0x2a>
  {
    /*Get the calibration factor from the ADC data register */
    tmpreg = ADCx->DR;
 80094a8:	6c18      	ldr	r0, [r3, #64]	; 0x40
  {
    /* Error factor */
    tmpreg = 0x00000000;
  }
  return tmpreg;
}
 80094aa:	bd10      	pop	{r4, pc}
 80094ac:	ffff1000 	.word	0xffff1000

080094b0 <ADC_StartOfConversion>:
void ADC_StartOfConversion(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  ADCx->CR |= (uint32_t)ADC_CR_ADSTART;
 80094b0:	6883      	ldr	r3, [r0, #8]
 80094b2:	2204      	movs	r2, #4
 80094b4:	4313      	orrs	r3, r2
 80094b6:	6083      	str	r3, [r0, #8]
}
 80094b8:	4770      	bx	lr

080094ba <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80094ba:	b500      	push	{lr}
 80094bc:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DMAEN;
 80094be:	68c2      	ldr	r2, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80094c0:	2900      	cmp	r1, #0
 80094c2:	d001      	beq.n	80094c8 <ADC_DMACmd+0xe>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR1 |= (uint32_t)ADC_CFGR1_DMAEN;
 80094c4:	4313      	orrs	r3, r2
 80094c6:	e001      	b.n	80094cc <ADC_DMACmd+0x12>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CFGR1 &= (uint32_t)(~ADC_CFGR1_DMAEN);
 80094c8:	439a      	bics	r2, r3
 80094ca:	1c13      	adds	r3, r2, #0
 80094cc:	60c3      	str	r3, [r0, #12]
  }
}
 80094ce:	bd00      	pop	{pc}

080094d0 <ADC_DMARequestModeConfig>:
void ADC_DMARequestModeConfig(ADC_TypeDef* ADCx, uint32_t ADC_DMARequestMode)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  ADCx->CFGR1 &= (uint32_t)~ADC_CFGR1_DMACFG;
 80094d0:	68c3      	ldr	r3, [r0, #12]
 80094d2:	2202      	movs	r2, #2
 80094d4:	4393      	bics	r3, r2
 80094d6:	60c3      	str	r3, [r0, #12]
  ADCx->CFGR1 |= (uint32_t)ADC_DMARequestMode;
 80094d8:	68c3      	ldr	r3, [r0, #12]
 80094da:	4319      	orrs	r1, r3
 80094dc:	60c1      	str	r1, [r0, #12]
}
 80094de:	4770      	bx	lr

080094e0 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_ADSTP: ADC stop flag
  *            @arg ADC_FLAG_ADCAL: ADC Calibration flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint32_t ADC_FLAG)
{
 80094e0:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  if((uint32_t)(ADC_FLAG & 0x01000000))
 80094e2:	01cb      	lsls	r3, r1, #7
 80094e4:	d503      	bpl.n	80094ee <ADC_GetFlagStatus+0xe>
  {
    tmpreg = ADCx->CR & 0xFEFFFFFF;
 80094e6:	6882      	ldr	r2, [r0, #8]
 80094e8:	4b04      	ldr	r3, [pc, #16]	; (80094fc <ADC_GetFlagStatus+0x1c>)
 80094ea:	4013      	ands	r3, r2
 80094ec:	e000      	b.n	80094f0 <ADC_GetFlagStatus+0x10>
  }
  else
  {
    tmpreg = ADCx->ISR;
 80094ee:	6803      	ldr	r3, [r0, #0]
  }
  
  /* Check the status of the specified ADC flag */
  if ((tmpreg & ADC_FLAG) != (uint32_t)RESET)
 80094f0:	400b      	ands	r3, r1
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80094f2:	1c18      	adds	r0, r3, #0
 80094f4:	1e43      	subs	r3, r0, #1
 80094f6:	4198      	sbcs	r0, r3
}
 80094f8:	bd00      	pop	{pc}
 80094fa:	46c0      	nop			; (mov r8, r8)
 80094fc:	feffffff 	.word	0xfeffffff

08009500 <DMA_DeInit>:
  *         x can be 1 to 7 for DMA1 to select the DMA Channel.
  * @note   Channel 6 and 7 are available only for STM32F072 devices.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8009500:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8009502:	6802      	ldr	r2, [r0, #0]
 8009504:	4b2c      	ldr	r3, [pc, #176]	; (80095b8 <DMA_DeInit+0xb8>)

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8009506:	2100      	movs	r1, #0
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8009508:	4013      	ands	r3, r2
 800950a:	6003      	str	r3, [r0, #0]
  DMAy_Channelx->CPAR  = 0;

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;

  if (DMAy_Channelx == DMA1_Channel1)
 800950c:	4b2b      	ldr	r3, [pc, #172]	; (80095bc <DMA_DeInit+0xbc>)

  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);

  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 800950e:	6001      	str	r1, [r0, #0]

  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8009510:	6041      	str	r1, [r0, #4]

  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8009512:	6081      	str	r1, [r0, #8]

  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8009514:	60c1      	str	r1, [r0, #12]

  if (DMAy_Channelx == DMA1_Channel1)
 8009516:	4298      	cmp	r0, r3
 8009518:	d101      	bne.n	800951e <DMA_DeInit+0x1e>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
 800951a:	4b29      	ldr	r3, [pc, #164]	; (80095c0 <DMA_DeInit+0xc0>)
 800951c:	e027      	b.n	800956e <DMA_DeInit+0x6e>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 800951e:	4929      	ldr	r1, [pc, #164]	; (80095c4 <DMA_DeInit+0xc4>)
 8009520:	4288      	cmp	r0, r1
 8009522:	d101      	bne.n	8009528 <DMA_DeInit+0x28>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
 8009524:	4b26      	ldr	r3, [pc, #152]	; (80095c0 <DMA_DeInit+0xc0>)
 8009526:	e029      	b.n	800957c <DMA_DeInit+0x7c>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 8009528:	4b27      	ldr	r3, [pc, #156]	; (80095c8 <DMA_DeInit+0xc8>)
 800952a:	4298      	cmp	r0, r3
 800952c:	d101      	bne.n	8009532 <DMA_DeInit+0x32>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
 800952e:	4b24      	ldr	r3, [pc, #144]	; (80095c0 <DMA_DeInit+0xc0>)
 8009530:	e02b      	b.n	800958a <DMA_DeInit+0x8a>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 8009532:	4a26      	ldr	r2, [pc, #152]	; (80095cc <DMA_DeInit+0xcc>)
 8009534:	4290      	cmp	r0, r2
 8009536:	d101      	bne.n	800953c <DMA_DeInit+0x3c>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
 8009538:	4b21      	ldr	r3, [pc, #132]	; (80095c0 <DMA_DeInit+0xc0>)
 800953a:	e02e      	b.n	800959a <DMA_DeInit+0x9a>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 800953c:	4924      	ldr	r1, [pc, #144]	; (80095d0 <DMA_DeInit+0xd0>)
 800953e:	4288      	cmp	r0, r1
 8009540:	d101      	bne.n	8009546 <DMA_DeInit+0x46>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
 8009542:	4b1f      	ldr	r3, [pc, #124]	; (80095c0 <DMA_DeInit+0xc0>)
 8009544:	e031      	b.n	80095aa <DMA_DeInit+0xaa>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 8009546:	4b23      	ldr	r3, [pc, #140]	; (80095d4 <DMA_DeInit+0xd4>)
 8009548:	4298      	cmp	r0, r3
 800954a:	d104      	bne.n	8009556 <DMA_DeInit+0x56>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
 800954c:	4b1c      	ldr	r3, [pc, #112]	; (80095c0 <DMA_DeInit+0xc0>)
 800954e:	20f0      	movs	r0, #240	; 0xf0
 8009550:	6859      	ldr	r1, [r3, #4]
 8009552:	0402      	lsls	r2, r0, #16
 8009554:	e02c      	b.n	80095b0 <DMA_DeInit+0xb0>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 8009556:	4a20      	ldr	r2, [pc, #128]	; (80095d8 <DMA_DeInit+0xd8>)
 8009558:	4290      	cmp	r0, r2
 800955a:	d104      	bne.n	8009566 <DMA_DeInit+0x66>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 800955c:	4b18      	ldr	r3, [pc, #96]	; (80095c0 <DMA_DeInit+0xc0>)
 800955e:	20f0      	movs	r0, #240	; 0xf0
 8009560:	6859      	ldr	r1, [r3, #4]
 8009562:	0502      	lsls	r2, r0, #20
 8009564:	e024      	b.n	80095b0 <DMA_DeInit+0xb0>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 8009566:	491d      	ldr	r1, [pc, #116]	; (80095dc <DMA_DeInit+0xdc>)
 8009568:	4288      	cmp	r0, r1
 800956a:	d103      	bne.n	8009574 <DMA_DeInit+0x74>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 800956c:	4b1c      	ldr	r3, [pc, #112]	; (80095e0 <DMA_DeInit+0xe0>)
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	210f      	movs	r1, #15
 8009572:	e01d      	b.n	80095b0 <DMA_DeInit+0xb0>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 8009574:	4b1b      	ldr	r3, [pc, #108]	; (80095e4 <DMA_DeInit+0xe4>)
 8009576:	4298      	cmp	r0, r3
 8009578:	d103      	bne.n	8009582 <DMA_DeInit+0x82>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 800957a:	4b19      	ldr	r3, [pc, #100]	; (80095e0 <DMA_DeInit+0xe0>)
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	21f0      	movs	r1, #240	; 0xf0
 8009580:	e016      	b.n	80095b0 <DMA_DeInit+0xb0>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8009582:	4a19      	ldr	r2, [pc, #100]	; (80095e8 <DMA_DeInit+0xe8>)
 8009584:	4290      	cmp	r0, r2
 8009586:	d104      	bne.n	8009592 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 8009588:	4b15      	ldr	r3, [pc, #84]	; (80095e0 <DMA_DeInit+0xe0>)
 800958a:	20f0      	movs	r0, #240	; 0xf0
 800958c:	6859      	ldr	r1, [r3, #4]
 800958e:	0102      	lsls	r2, r0, #4
 8009590:	e00e      	b.n	80095b0 <DMA_DeInit+0xb0>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8009592:	4916      	ldr	r1, [pc, #88]	; (80095ec <DMA_DeInit+0xec>)
 8009594:	4288      	cmp	r0, r1
 8009596:	d104      	bne.n	80095a2 <DMA_DeInit+0xa2>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 8009598:	4b11      	ldr	r3, [pc, #68]	; (80095e0 <DMA_DeInit+0xe0>)
 800959a:	22f0      	movs	r2, #240	; 0xf0
 800959c:	6859      	ldr	r1, [r3, #4]
 800959e:	0212      	lsls	r2, r2, #8
 80095a0:	e006      	b.n	80095b0 <DMA_DeInit+0xb0>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 80095a2:	4b13      	ldr	r3, [pc, #76]	; (80095f0 <DMA_DeInit+0xf0>)
 80095a4:	4298      	cmp	r0, r3
 80095a6:	d105      	bne.n	80095b4 <DMA_DeInit+0xb4>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 80095a8:	4b0d      	ldr	r3, [pc, #52]	; (80095e0 <DMA_DeInit+0xe0>)
 80095aa:	20f0      	movs	r0, #240	; 0xf0
 80095ac:	6859      	ldr	r1, [r3, #4]
 80095ae:	0302      	lsls	r2, r0, #12
 80095b0:	430a      	orrs	r2, r1
 80095b2:	605a      	str	r2, [r3, #4]
    }
  }
}
 80095b4:	bd00      	pop	{pc}
 80095b6:	46c0      	nop			; (mov r8, r8)
 80095b8:	0000fffe 	.word	0x0000fffe
 80095bc:	40020008 	.word	0x40020008
 80095c0:	40020000 	.word	0x40020000
 80095c4:	4002001c 	.word	0x4002001c
 80095c8:	40020030 	.word	0x40020030
 80095cc:	40020044 	.word	0x40020044
 80095d0:	40020058 	.word	0x40020058
 80095d4:	4002006c 	.word	0x4002006c
 80095d8:	40020080 	.word	0x40020080
 80095dc:	40020408 	.word	0x40020408
 80095e0:	40020400 	.word	0x40020400
 80095e4:	4002041c 	.word	0x4002041c
 80095e8:	40020430 	.word	0x40020430
 80095ec:	40020444 	.word	0x40020444
 80095f0:	40020458 	.word	0x40020458

080095f4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80095f4:	b510      	push	{r4, lr}
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80095f6:	6802      	ldr	r2, [r0, #0]

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 80095f8:	4b0c      	ldr	r3, [pc, #48]	; (800962c <DMA_Init+0x38>)
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80095fa:	6a0c      	ldr	r4, [r1, #32]
/*--------------------------- DMAy Channelx CCR Configuration ----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;

  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 80095fc:	401a      	ands	r2, r3
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80095fe:	688b      	ldr	r3, [r1, #8]
 8009600:	4323      	orrs	r3, r4
 8009602:	690c      	ldr	r4, [r1, #16]
 8009604:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8009606:	694c      	ldr	r4, [r1, #20]
 8009608:	4323      	orrs	r3, r4
 800960a:	698c      	ldr	r4, [r1, #24]
 800960c:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800960e:	69cc      	ldr	r4, [r1, #28]
 8009610:	4323      	orrs	r3, r4
 8009612:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8009614:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8009616:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8009618:	4323      	orrs	r3, r4
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 800961a:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 800961c:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 800961e:	68cc      	ldr	r4, [r1, #12]
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8009620:	c90c      	ldmia	r1!, {r2, r3}
  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8009622:	6044      	str	r4, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8009624:	6082      	str	r2, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8009626:	60c3      	str	r3, [r0, #12]
}
 8009628:	bd10      	pop	{r4, pc}
 800962a:	46c0      	nop			; (mov r8, r8)
 800962c:	ffff800f 	.word	0xffff800f

08009630 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8009630:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009632:	2900      	cmp	r1, #0
 8009634:	d003      	beq.n	800963e <DMA_Cmd+0xe>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8009636:	6803      	ldr	r3, [r0, #0]
 8009638:	2201      	movs	r2, #1
 800963a:	4313      	orrs	r3, r2
 800963c:	e002      	b.n	8009644 <DMA_Cmd+0x14>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 800963e:	6801      	ldr	r1, [r0, #0]
 8009640:	4b01      	ldr	r3, [pc, #4]	; (8009648 <DMA_Cmd+0x18>)
 8009642:	400b      	ands	r3, r1
 8009644:	6003      	str	r3, [r0, #0]
  }
}
 8009646:	bd00      	pop	{pc}
 8009648:	0000fffe 	.word	0x0000fffe

0800964c <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register and program memory access.
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800964c:	b500      	push	{lr}
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800964e:	4b04      	ldr	r3, [pc, #16]	; (8009660 <FLASH_Unlock+0x14>)
 8009650:	691a      	ldr	r2, [r3, #16]
 8009652:	0611      	lsls	r1, r2, #24
 8009654:	d503      	bpl.n	800965e <FLASH_Unlock+0x12>
  {
    /* Unlocking the program memory access */
    FLASH->KEYR = FLASH_FKEY1;
 8009656:	4903      	ldr	r1, [pc, #12]	; (8009664 <FLASH_Unlock+0x18>)
    FLASH->KEYR = FLASH_FKEY2;
 8009658:	4803      	ldr	r0, [pc, #12]	; (8009668 <FLASH_Unlock+0x1c>)
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Unlocking the program memory access */
    FLASH->KEYR = FLASH_FKEY1;
 800965a:	6059      	str	r1, [r3, #4]
    FLASH->KEYR = FLASH_FKEY2;
 800965c:	6058      	str	r0, [r3, #4]
  }
}
 800965e:	bd00      	pop	{pc}
 8009660:	40022000 	.word	0x40022000
 8009664:	45670123 	.word	0x45670123
 8009668:	cdef89ab 	.word	0xcdef89ab

0800966c <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH control register and program memory access */
  FLASH->CR |= FLASH_CR_LOCK;
 800966c:	4b02      	ldr	r3, [pc, #8]	; (8009678 <FLASH_Lock+0xc>)
 800966e:	2180      	movs	r1, #128	; 0x80
 8009670:	691a      	ldr	r2, [r3, #16]
 8009672:	430a      	orrs	r2, r1
 8009674:	611a      	str	r2, [r3, #16]
}
 8009676:	4770      	bx	lr
 8009678:	40022000 	.word	0x40022000

0800967c <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800967c:	4b01      	ldr	r3, [pc, #4]	; (8009684 <FLASH_ClearFlag+0x8>)
 800967e:	60d8      	str	r0, [r3, #12]
}
 8009680:	4770      	bx	lr
 8009682:	46c0      	nop			; (mov r8, r8)
 8009684:	40022000 	.word	0x40022000

08009688 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_BUSY, FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8009688:	b500      	push	{lr}
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800968a:	4b08      	ldr	r3, [pc, #32]	; (80096ac <FLASH_GetStatus+0x24>)
  {
    FLASHstatus = FLASH_BUSY;
 800968c:	2001      	movs	r0, #1
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status FLASHstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	4202      	tst	r2, r0
 8009692:	d109      	bne.n	80096a8 <FLASH_GetStatus+0x20>
  {
    FLASHstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8009694:	68d9      	ldr	r1, [r3, #12]
    { 
      FLASHstatus = FLASH_ERROR_WRP;
 8009696:	2002      	movs	r0, #2
  {
    FLASHstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & (uint32_t)FLASH_FLAG_WRPERR)!= (uint32_t)0x00)
 8009698:	06c9      	lsls	r1, r1, #27
 800969a:	d405      	bmi.n	80096a8 <FLASH_GetStatus+0x20>
    { 
      FLASHstatus = FLASH_ERROR_WRP;
    }
    else 
    {
      if((FLASH->SR & (uint32_t)(FLASH_SR_PGERR)) != (uint32_t)0x00)
 800969c:	68d8      	ldr	r0, [r3, #12]
 800969e:	2304      	movs	r3, #4
 80096a0:	4018      	ands	r0, r3
      {
        FLASHstatus = FLASH_ERROR_PROGRAM; 
 80096a2:	4243      	negs	r3, r0
 80096a4:	4158      	adcs	r0, r3
 80096a6:	3003      	adds	r0, #3
      }
    }
  }
  /* Return the FLASH Status */
  return FLASHstatus;
}
 80096a8:	bd00      	pop	{pc}
 80096aa:	46c0      	nop			; (mov r8, r8)
 80096ac:	40022000 	.word	0x40022000

080096b0 <FLASH_WaitForLastOperation.constprop.0>:
  * @brief  Waits for a FLASH operation to complete or a TIMEOUT to occur.
  * @param  Timeout: FLASH programming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
 80096b0:	b510      	push	{r4, lr}
{ 
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80096b2:	24b0      	movs	r4, #176	; 0xb0
 80096b4:	f7ff ffe8 	bl	8009688 <FLASH_GetStatus>
 80096b8:	0324      	lsls	r4, r4, #12
 80096ba:	e002      	b.n	80096c2 <FLASH_WaitForLastOperation.constprop.0+0x12>
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
  {
    status = FLASH_GetStatus();
 80096bc:	f7ff ffe4 	bl	8009688 <FLASH_GetStatus>
    Timeout--;
 80096c0:	3c01      	subs	r4, #1
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
  
  /* Wait for a FLASH operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 80096c2:	2c00      	cmp	r4, #0
 80096c4:	d001      	beq.n	80096ca <FLASH_WaitForLastOperation.constprop.0+0x1a>
 80096c6:	2801      	cmp	r0, #1
 80096c8:	d0f8      	beq.n	80096bc <FLASH_WaitForLastOperation.constprop.0+0xc>
  {
    status = FLASH_GetStatus();
    Timeout--;
  }
  
  if(Timeout == 0x00 )
 80096ca:	2c00      	cmp	r4, #0
 80096cc:	d100      	bne.n	80096d0 <FLASH_WaitForLastOperation.constprop.0+0x20>
  {
    status = FLASH_TIMEOUT;
 80096ce:	2005      	movs	r0, #5
  }
  /* Return the operation status */
  return status;
}
 80096d0:	bd10      	pop	{r4, pc}
	...

080096d4 <FLASH_ErasePage>:
  *         is the start address of a page (multiple of 1024 bytes).
  * @retval FLASH Status: The returned value can be: 
  *         FLASH_ERROR_PROGRAM, FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 80096d4:	b570      	push	{r4, r5, r6, lr}
 80096d6:	1c06      	adds	r6, r0, #0

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Page_Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80096d8:	f7ff ffea 	bl	80096b0 <FLASH_WaitForLastOperation.constprop.0>
  
  if(status == FLASH_COMPLETE)
 80096dc:	2804      	cmp	r0, #4
 80096de:	d10e      	bne.n	80096fe <FLASH_ErasePage+0x2a>
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 80096e0:	4c07      	ldr	r4, [pc, #28]	; (8009700 <FLASH_ErasePage+0x2c>)
 80096e2:	2502      	movs	r5, #2
 80096e4:	6921      	ldr	r1, [r4, #16]
    FLASH->AR  = Page_Address;
    FLASH->CR |= FLASH_CR_STRT;
 80096e6:	2240      	movs	r2, #64	; 0x40
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
  
  if(status == FLASH_COMPLETE)
  { 
    /* If the previous operation is completed, proceed to erase the page */
    FLASH->CR |= FLASH_CR_PER;
 80096e8:	4329      	orrs	r1, r5
 80096ea:	6121      	str	r1, [r4, #16]
    FLASH->AR  = Page_Address;
 80096ec:	6166      	str	r6, [r4, #20]
    FLASH->CR |= FLASH_CR_STRT;
 80096ee:	6920      	ldr	r0, [r4, #16]
 80096f0:	4310      	orrs	r0, r2
 80096f2:	6120      	str	r0, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 80096f4:	f7ff ffdc 	bl	80096b0 <FLASH_WaitForLastOperation.constprop.0>
    
    /* Disable the PER Bit */
    FLASH->CR &= ~FLASH_CR_PER;
 80096f8:	6923      	ldr	r3, [r4, #16]
 80096fa:	43ab      	bics	r3, r5
 80096fc:	6123      	str	r3, [r4, #16]
  }
    
  /* Return the Erase Status */
  return status;
}
 80096fe:	bd70      	pop	{r4, r5, r6, pc}
 8009700:	40022000 	.word	0x40022000

08009704 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8009704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 8009706:	2300      	movs	r3, #0
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8009708:	1c06      	adds	r6, r0, #0
 800970a:	1c0f      	adds	r7, r1, #0
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 800970c:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 800970e:	f7ff ffcf 	bl	80096b0 <FLASH_WaitForLastOperation.constprop.0>
  
  if(status == FLASH_COMPLETE)
 8009712:	2804      	cmp	r0, #4
 8009714:	d113      	bne.n	800973e <FLASH_ProgramWord+0x3a>
  {
    /* If the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= FLASH_CR_PG;
 8009716:	4c0a      	ldr	r4, [pc, #40]	; (8009740 <FLASH_ProgramWord+0x3c>)
 8009718:	2501      	movs	r5, #1
 800971a:	6921      	ldr	r1, [r4, #16]
 800971c:	4329      	orrs	r1, r5
 800971e:	6121      	str	r1, [r4, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 8009720:	8037      	strh	r7, [r6, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8009722:	f7ff ffc5 	bl	80096b0 <FLASH_WaitForLastOperation.constprop.0>
 
    if(status == FLASH_COMPLETE)
 8009726:	2804      	cmp	r0, #4
 8009728:	d106      	bne.n	8009738 <FLASH_ProgramWord+0x34>
    {
      /* If the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 800972a:	3602      	adds	r6, #2
 800972c:	9601      	str	r6, [sp, #4]

      *(__IO uint16_t*) tmp = Data >> 16;
 800972e:	9a01      	ldr	r2, [sp, #4]
 8009730:	0c3f      	lsrs	r7, r7, #16
 8009732:	8017      	strh	r7, [r2, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_ER_PRG_TIMEOUT);
 8009734:	f7ff ffbc 	bl	80096b0 <FLASH_WaitForLastOperation.constprop.0>
      FLASH->CR &= ~FLASH_CR_PG;
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= ~FLASH_CR_PG;
 8009738:	6926      	ldr	r6, [r4, #16]
 800973a:	43ae      	bics	r6, r5
 800973c:	6126      	str	r6, [r4, #16]
    }
  }
   
  /* Return the Program Status */
  return status;
}
 800973e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009740:	40022000 	.word	0x40022000

08009744 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8009744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8009746:	680b      	ldr	r3, [r1, #0]
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800974c:	1c1a      	adds	r2, r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 800974e:	2501      	movs	r5, #1

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8009750:	9c01      	ldr	r4, [sp, #4]

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 8009752:	4095      	lsls	r5, r2

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8009754:	402c      	ands	r4, r5

    if (currentpin == pos)
 8009756:	42ac      	cmp	r4, r5
 8009758:	d127      	bne.n	80097aa <GPIO_Init+0x66>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800975a:	790d      	ldrb	r5, [r1, #4]
 800975c:	1e6f      	subs	r7, r5, #1
 800975e:	2f01      	cmp	r7, #1
 8009760:	d811      	bhi.n	8009786 <GPIO_Init+0x42>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8009762:	6887      	ldr	r7, [r0, #8]
 8009764:	2603      	movs	r6, #3
 8009766:	409e      	lsls	r6, r3
 8009768:	43b7      	bics	r7, r6
 800976a:	6087      	str	r7, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800976c:	794e      	ldrb	r6, [r1, #5]
 800976e:	6887      	ldr	r7, [r0, #8]
 8009770:	409e      	lsls	r6, r3
 8009772:	4337      	orrs	r7, r6
 8009774:	6087      	str	r7, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8009776:	8886      	ldrh	r6, [r0, #4]
 8009778:	43a6      	bics	r6, r4
 800977a:	8086      	strh	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800977c:	798c      	ldrb	r4, [r1, #6]
 800977e:	8886      	ldrh	r6, [r0, #4]
 8009780:	4094      	lsls	r4, r2
 8009782:	4334      	orrs	r4, r6
 8009784:	8084      	strh	r4, [r0, #4]
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8009786:	2603      	movs	r6, #3
 8009788:	6807      	ldr	r7, [r0, #0]
 800978a:	409e      	lsls	r6, r3
 800978c:	43f6      	mvns	r6, r6
 800978e:	4037      	ands	r7, r6
 8009790:	6007      	str	r7, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8009792:	6804      	ldr	r4, [r0, #0]
 8009794:	409d      	lsls	r5, r3
 8009796:	4325      	orrs	r5, r4
 8009798:	6005      	str	r5, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800979a:	68c7      	ldr	r7, [r0, #12]
 800979c:	403e      	ands	r6, r7
 800979e:	60c6      	str	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80097a0:	79cc      	ldrb	r4, [r1, #7]
 80097a2:	68c5      	ldr	r5, [r0, #12]
 80097a4:	409c      	lsls	r4, r3
 80097a6:	432c      	orrs	r4, r5
 80097a8:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80097aa:	3201      	adds	r2, #1
 80097ac:	3302      	adds	r3, #2
 80097ae:	2a10      	cmp	r2, #16
 80097b0:	d1cd      	bne.n	800974e <GPIO_Init+0xa>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80097b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080097b4 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 80097b4:	6181      	str	r1, [r0, #24]
}
 80097b6:	4770      	bx	lr

080097b8 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 80097b8:	8501      	strh	r1, [r0, #40]	; 0x28
}
 80097ba:	4770      	bx	lr

080097bc <GPIO_PinAFConfig>:
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80097bc:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80097be:	2307      	movs	r3, #7
 80097c0:	400b      	ands	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80097c2:	08c9      	lsrs	r1, r1, #3
 80097c4:	3108      	adds	r1, #8
 80097c6:	0089      	lsls	r1, r1, #2
 80097c8:	580c      	ldr	r4, [r1, r0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80097ca:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80097cc:	250f      	movs	r5, #15
 80097ce:	409d      	lsls	r5, r3
 80097d0:	43ac      	bics	r4, r5
 80097d2:	500c      	str	r4, [r1, r0]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80097d4:	580c      	ldr	r4, [r1, r0]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80097d6:	409a      	lsls	r2, r3
 80097d8:	1c13      	adds	r3, r2, #0
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80097da:	4323      	orrs	r3, r4
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80097dc:	500b      	str	r3, [r1, r0]
}
 80097de:	bd30      	pop	{r4, r5, pc}

080097e0 <IWDG_WriteAccessCmd>:
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 80097e0:	4b01      	ldr	r3, [pc, #4]	; (80097e8 <IWDG_WriteAccessCmd+0x8>)
 80097e2:	6018      	str	r0, [r3, #0]
}
 80097e4:	4770      	bx	lr
 80097e6:	46c0      	nop			; (mov r8, r8)
 80097e8:	40003000 	.word	0x40003000

080097ec <IWDG_SetPrescaler>:
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 80097ec:	4b01      	ldr	r3, [pc, #4]	; (80097f4 <IWDG_SetPrescaler+0x8>)
 80097ee:	6058      	str	r0, [r3, #4]
}
 80097f0:	4770      	bx	lr
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	40003000 	.word	0x40003000

080097f8 <IWDG_SetReload>:
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 80097f8:	4b01      	ldr	r3, [pc, #4]	; (8009800 <IWDG_SetReload+0x8>)
 80097fa:	6098      	str	r0, [r3, #8]
}
 80097fc:	4770      	bx	lr
 80097fe:	46c0      	nop			; (mov r8, r8)
 8009800:	40003000 	.word	0x40003000

08009804 <IWDG_SetWindowValue>:
  */
void IWDG_SetWindowValue(uint16_t WindowValue)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WINDOW_VALUE(WindowValue));
  IWDG->WINR = WindowValue;
 8009804:	4b01      	ldr	r3, [pc, #4]	; (800980c <IWDG_SetWindowValue+0x8>)
 8009806:	6118      	str	r0, [r3, #16]
}
 8009808:	4770      	bx	lr
 800980a:	46c0      	nop			; (mov r8, r8)
 800980c:	40003000 	.word	0x40003000

08009810 <IWDG_Enable>:
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_ENABLE;
 8009810:	4a01      	ldr	r2, [pc, #4]	; (8009818 <IWDG_Enable+0x8>)
 8009812:	4b02      	ldr	r3, [pc, #8]	; (800981c <IWDG_Enable+0xc>)
 8009814:	601a      	str	r2, [r3, #0]
}
 8009816:	4770      	bx	lr
 8009818:	0000cccc 	.word	0x0000cccc
 800981c:	40003000 	.word	0x40003000

08009820 <IWDG_GetFlagStatus>:
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 8009820:	4902      	ldr	r1, [pc, #8]	; (800982c <IWDG_GetFlagStatus+0xc>)
 8009822:	68cb      	ldr	r3, [r1, #12]
 8009824:	4018      	ands	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8009826:	1e43      	subs	r3, r0, #1
 8009828:	4198      	sbcs	r0, r3
}
 800982a:	4770      	bx	lr
 800982c:	40003000 	.word	0x40003000

08009830 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8009830:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8009832:	7882      	ldrb	r2, [r0, #2]
 8009834:	7803      	ldrb	r3, [r0, #0]
 8009836:	2a00      	cmp	r2, #0
 8009838:	d018      	beq.n	800986c <NVIC_Init+0x3c>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 800983a:	2403      	movs	r4, #3
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 800983c:	0899      	lsrs	r1, r3, #2
 800983e:	4a0f      	ldr	r2, [pc, #60]	; (800987c <NVIC_Init+0x4c>)
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8009840:	4023      	ands	r3, r4
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 8009842:	31c0      	adds	r1, #192	; 0xc0
 8009844:	0089      	lsls	r1, r1, #2
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 8009846:	40a3      	lsls	r3, r4
 8009848:	24ff      	movs	r4, #255	; 0xff
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 800984a:	588d      	ldr	r5, [r1, r2]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 800984c:	1c26      	adds	r6, r4, #0
 800984e:	409e      	lsls	r6, r3
 8009850:	43b5      	bics	r5, r6
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 8009852:	7846      	ldrb	r6, [r0, #1]
 8009854:	01b6      	lsls	r6, r6, #6
 8009856:	4034      	ands	r4, r6
 8009858:	409c      	lsls	r4, r3
 800985a:	4325      	orrs	r5, r4
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 800985c:	508d      	str	r5, [r1, r2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800985e:	7804      	ldrb	r4, [r0, #0]
 8009860:	201f      	movs	r0, #31
 8009862:	4020      	ands	r0, r4
 8009864:	2101      	movs	r1, #1
 8009866:	4081      	lsls	r1, r0
 8009868:	6011      	str	r1, [r2, #0]
 800986a:	e005      	b.n	8009878 <NVIC_Init+0x48>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800986c:	251f      	movs	r5, #31
 800986e:	402b      	ands	r3, r5
 8009870:	2001      	movs	r0, #1
 8009872:	4a03      	ldr	r2, [pc, #12]	; (8009880 <NVIC_Init+0x50>)
 8009874:	4098      	lsls	r0, r3
 8009876:	67d0      	str	r0, [r2, #124]	; 0x7c
  }
}
 8009878:	bd70      	pop	{r4, r5, r6, pc}
 800987a:	46c0      	nop			; (mov r8, r8)
 800987c:	e000e100 	.word	0xe000e100
 8009880:	e000e104 	.word	0xe000e104

08009884 <SysTick_CLKSourceConfig>:
  *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8009884:	b500      	push	{lr}
 8009886:	4b05      	ldr	r3, [pc, #20]	; (800989c <SysTick_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8009888:	681a      	ldr	r2, [r3, #0]
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800988a:	2804      	cmp	r0, #4
 800988c:	d102      	bne.n	8009894 <SysTick_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800988e:	4310      	orrs	r0, r2
 8009890:	6018      	str	r0, [r3, #0]
 8009892:	e002      	b.n	800989a <SysTick_CLKSourceConfig+0x16>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8009894:	2104      	movs	r1, #4
 8009896:	438a      	bics	r2, r1
 8009898:	601a      	str	r2, [r3, #0]
  }
}
 800989a:	bd00      	pop	{pc}
 800989c:	e000e010 	.word	0xe000e010

080098a0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80098a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80098a2:	4d59      	ldr	r5, [pc, #356]	; (8009a08 <RCC_GetClocksFreq+0x168>)
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80098a4:	1c04      	adds	r4, r0, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80098a6:	6868      	ldr	r0, [r5, #4]
 80098a8:	230c      	movs	r3, #12
 80098aa:	4018      	ands	r0, r3
  
  switch (tmp)
 80098ac:	f7f9 fc42 	bl	8003134 <__gnu_thumb1_case_uqi>
 80098b0:	20202020 	.word	0x20202020
 80098b4:	20202020 	.word	0x20202020
 80098b8:	20202007 	.word	0x20202007
 80098bc:	1e          	.byte	0x1e
 80098bd:	00          	.byte	0x00
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80098be:	686b      	ldr	r3, [r5, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
      
      if (pllsource == 0x00)
 80098c0:	21c0      	movs	r1, #192	; 0xc0
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80098c2:	029e      	lsls	r6, r3, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80098c4:	686a      	ldr	r2, [r5, #4]
      pllmull = ( pllmull >> 18) + 2;
 80098c6:	0f36      	lsrs	r6, r6, #28
      
      if (pllsource == 0x00)
 80098c8:	0248      	lsls	r0, r1, #9
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 80098ca:	3602      	adds	r6, #2
      
      if (pllsource == 0x00)
 80098cc:	4202      	tst	r2, r0
 80098ce:	d102      	bne.n	80098d6 <RCC_GetClocksFreq+0x36>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 80098d0:	4a4e      	ldr	r2, [pc, #312]	; (8009a0c <RCC_GetClocksFreq+0x16c>)
 80098d2:	4356      	muls	r6, r2
 80098d4:	e008      	b.n	80098e8 <RCC_GetClocksFreq+0x48>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80098d6:	494c      	ldr	r1, [pc, #304]	; (8009a08 <RCC_GetClocksFreq+0x168>)
 80098d8:	200f      	movs	r0, #15
 80098da:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80098dc:	4001      	ands	r1, r0
 80098de:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 80098e0:	484b      	ldr	r0, [pc, #300]	; (8009a10 <RCC_GetClocksFreq+0x170>)
 80098e2:	f7f9 fc31 	bl	8003148 <__aeabi_uidiv>
 80098e6:	4346      	muls	r6, r0
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 80098e8:	6026      	str	r6, [r4, #0]
      break;
 80098ea:	e004      	b.n	80098f6 <RCC_GetClocksFreq+0x56>
    case 0x0C:  /* HSI48 used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 80098ec:	4b49      	ldr	r3, [pc, #292]	; (8009a14 <RCC_GetClocksFreq+0x174>)
 80098ee:	e000      	b.n	80098f2 <RCC_GetClocksFreq+0x52>
      break;
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80098f0:	4b47      	ldr	r3, [pc, #284]	; (8009a10 <RCC_GetClocksFreq+0x170>)
 80098f2:	6023      	str	r3, [r4, #0]
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80098f4:	2600      	movs	r6, #0
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80098f6:	6868      	ldr	r0, [r5, #4]
 80098f8:	0602      	lsls	r2, r0, #24
  tmp = tmp >> 4;
 80098fa:	0f11      	lsrs	r1, r2, #28
  presc = APBAHBPrescTable[tmp]; 
 80098fc:	4a46      	ldr	r2, [pc, #280]	; (8009a18 <RCC_GetClocksFreq+0x178>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80098fe:	6820      	ldr	r0, [r4, #0]
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 8009900:	5c53      	ldrb	r3, [r2, r1]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8009902:	40d8      	lsrs	r0, r3
 8009904:	6060      	str	r0, [r4, #4]

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 8009906:	6869      	ldr	r1, [r5, #4]
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8009908:	1c03      	adds	r3, r0, #0

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 800990a:	0548      	lsls	r0, r1, #21
  tmp = tmp >> 8;
 800990c:	0f41      	lsrs	r1, r0, #29
  presc = APBAHBPrescTable[tmp];
 800990e:	5c50      	ldrb	r0, [r2, r1]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009910:	40c3      	lsrs	r3, r0
 8009912:	60a3      	str	r3, [r4, #8]

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 8009914:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8009916:	05d1      	lsls	r1, r2, #23
 8009918:	d401      	bmi.n	800991e <RCC_GetClocksFreq+0x7e>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 800991a:	4b40      	ldr	r3, [pc, #256]	; (8009a1c <RCC_GetClocksFreq+0x17c>)
 800991c:	e006      	b.n	800992c <RCC_GetClocksFreq+0x8c>
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 800991e:	4a3a      	ldr	r2, [pc, #232]	; (8009a08 <RCC_GetClocksFreq+0x168>)
 8009920:	6851      	ldr	r1, [r2, #4]
 8009922:	0449      	lsls	r1, r1, #17
 8009924:	d401      	bmi.n	800992a <RCC_GetClocksFreq+0x8a>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 8009926:	085b      	lsrs	r3, r3, #1
 8009928:	e000      	b.n	800992c <RCC_GetClocksFreq+0x8c>
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 800992a:	089b      	lsrs	r3, r3, #2
 800992c:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 800992e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009930:	065a      	lsls	r2, r3, #25
 8009932:	d401      	bmi.n	8009938 <RCC_GetClocksFreq+0x98>
  {
    /* CEC Clock is HSI/244 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 8009934:	4b3a      	ldr	r3, [pc, #232]	; (8009a20 <RCC_GetClocksFreq+0x180>)
 8009936:	e001      	b.n	800993c <RCC_GetClocksFreq+0x9c>
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8009938:	2080      	movs	r0, #128	; 0x80
 800993a:	0203      	lsls	r3, r0, #8
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 800993c:	6123      	str	r3, [r4, #16]
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800993e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8009940:	06c9      	lsls	r1, r1, #27
 8009942:	d401      	bmi.n	8009948 <RCC_GetClocksFreq+0xa8>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8009944:	4b32      	ldr	r3, [pc, #200]	; (8009a10 <RCC_GetClocksFreq+0x170>)
 8009946:	e000      	b.n	800994a <RCC_GetClocksFreq+0xaa>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	6163      	str	r3, [r4, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800994c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800994e:	2303      	movs	r3, #3
 8009950:	4a2d      	ldr	r2, [pc, #180]	; (8009a08 <RCC_GetClocksFreq+0x168>)
 8009952:	4218      	tst	r0, r3
 8009954:	d101      	bne.n	800995a <RCC_GetClocksFreq+0xba>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 8009956:	68a3      	ldr	r3, [r4, #8]
 8009958:	e011      	b.n	800997e <RCC_GetClocksFreq+0xde>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 800995a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800995c:	4019      	ands	r1, r3
 800995e:	2901      	cmp	r1, #1
 8009960:	d101      	bne.n	8009966 <RCC_GetClocksFreq+0xc6>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	e00b      	b.n	800997e <RCC_GetClocksFreq+0xde>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8009966:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8009968:	4018      	ands	r0, r3
 800996a:	2802      	cmp	r0, #2
 800996c:	d102      	bne.n	8009974 <RCC_GetClocksFreq+0xd4>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 800996e:	2280      	movs	r2, #128	; 0x80
 8009970:	0213      	lsls	r3, r2, #8
 8009972:	e004      	b.n	800997e <RCC_GetClocksFreq+0xde>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8009974:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009976:	400b      	ands	r3, r1
 8009978:	2b03      	cmp	r3, #3
 800997a:	d101      	bne.n	8009980 <RCC_GetClocksFreq+0xe0>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800997c:	4b24      	ldr	r3, [pc, #144]	; (8009a10 <RCC_GetClocksFreq+0x170>)
 800997e:	61a3      	str	r3, [r4, #24]
  }
  
  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8009980:	23c0      	movs	r3, #192	; 0xc0
 8009982:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8009984:	029b      	lsls	r3, r3, #10
 8009986:	4a20      	ldr	r2, [pc, #128]	; (8009a08 <RCC_GetClocksFreq+0x168>)
 8009988:	4218      	tst	r0, r3
 800998a:	d101      	bne.n	8009990 <RCC_GetClocksFreq+0xf0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 800998c:	68a3      	ldr	r3, [r4, #8]
 800998e:	e015      	b.n	80099bc <RCC_GetClocksFreq+0x11c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8009990:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8009992:	2180      	movs	r1, #128	; 0x80
 8009994:	4018      	ands	r0, r3
 8009996:	0249      	lsls	r1, r1, #9
 8009998:	4288      	cmp	r0, r1
 800999a:	d101      	bne.n	80099a0 <RCC_GetClocksFreq+0x100>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	e00d      	b.n	80099bc <RCC_GetClocksFreq+0x11c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 80099a0:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80099a2:	2180      	movs	r1, #128	; 0x80
 80099a4:	4018      	ands	r0, r3
 80099a6:	0289      	lsls	r1, r1, #10
 80099a8:	4288      	cmp	r0, r1
 80099aa:	d102      	bne.n	80099b2 <RCC_GetClocksFreq+0x112>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 80099ac:	2280      	movs	r2, #128	; 0x80
 80099ae:	0213      	lsls	r3, r2, #8
 80099b0:	e004      	b.n	80099bc <RCC_GetClocksFreq+0x11c>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 80099b2:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80099b4:	4018      	ands	r0, r3
 80099b6:	4298      	cmp	r0, r3
 80099b8:	d101      	bne.n	80099be <RCC_GetClocksFreq+0x11e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 80099ba:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <RCC_GetClocksFreq+0x170>)
 80099bc:	61e3      	str	r3, [r4, #28]
  }
  
  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 80099be:	23c0      	movs	r3, #192	; 0xc0
 80099c0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80099c2:	031b      	lsls	r3, r3, #12
 80099c4:	4a10      	ldr	r2, [pc, #64]	; (8009a08 <RCC_GetClocksFreq+0x168>)
 80099c6:	4219      	tst	r1, r3
 80099c8:	d101      	bne.n	80099ce <RCC_GetClocksFreq+0x12e>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	e015      	b.n	80099fa <RCC_GetClocksFreq+0x15a>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 80099ce:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80099d0:	2180      	movs	r1, #128	; 0x80
 80099d2:	4018      	ands	r0, r3
 80099d4:	02c9      	lsls	r1, r1, #11
 80099d6:	4288      	cmp	r0, r1
 80099d8:	d101      	bne.n	80099de <RCC_GetClocksFreq+0x13e>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	e00d      	b.n	80099fa <RCC_GetClocksFreq+0x15a>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 80099de:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80099e0:	2180      	movs	r1, #128	; 0x80
 80099e2:	4018      	ands	r0, r3
 80099e4:	0309      	lsls	r1, r1, #12
 80099e6:	4288      	cmp	r0, r1
 80099e8:	d102      	bne.n	80099f0 <RCC_GetClocksFreq+0x150>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 80099ea:	2280      	movs	r2, #128	; 0x80
 80099ec:	0213      	lsls	r3, r2, #8
 80099ee:	e004      	b.n	80099fa <RCC_GetClocksFreq+0x15a>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 80099f0:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80099f2:	4018      	ands	r0, r3
 80099f4:	4298      	cmp	r0, r3
 80099f6:	d101      	bne.n	80099fc <RCC_GetClocksFreq+0x15c>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 80099f8:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <RCC_GetClocksFreq+0x170>)
 80099fa:	6223      	str	r3, [r4, #32]
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 80099fc:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 80099fe:	062a      	lsls	r2, r5, #24
 8009a00:	d400      	bmi.n	8009a04 <RCC_GetClocksFreq+0x164>
  {
    /* USB Clock is HSI48 */
    RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 8009a02:	4e04      	ldr	r6, [pc, #16]	; (8009a14 <RCC_GetClocksFreq+0x174>)
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
  }
  
  /* USBCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 8009a04:	6266      	str	r6, [r4, #36]	; 0x24
  else
  {
    /* USB Clock is PLL clock */
    RCC_Clocks->USBCLK_Frequency = pllclk;
  }   
}
 8009a06:	bd70      	pop	{r4, r5, r6, pc}
 8009a08:	40021000 	.word	0x40021000
 8009a0c:	003d0900 	.word	0x003d0900
 8009a10:	007a1200 	.word	0x007a1200
 8009a14:	02dc6c00 	.word	0x02dc6c00
 8009a18:	200005c8 	.word	0x200005c8
 8009a1c:	00d59f80 	.word	0x00d59f80
 8009a20:	00008012 	.word	0x00008012

08009a24 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8009a24:	b500      	push	{lr}
 8009a26:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <RCC_AHBPeriphClockCmd+0x18>)
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8009a28:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009a2a:	2900      	cmp	r1, #0
 8009a2c:	d002      	beq.n	8009a34 <RCC_AHBPeriphClockCmd+0x10>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8009a2e:	4310      	orrs	r0, r2
 8009a30:	6158      	str	r0, [r3, #20]
 8009a32:	e001      	b.n	8009a38 <RCC_AHBPeriphClockCmd+0x14>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8009a34:	4382      	bics	r2, r0
 8009a36:	615a      	str	r2, [r3, #20]
  }
}
 8009a38:	bd00      	pop	{pc}
 8009a3a:	46c0      	nop			; (mov r8, r8)
 8009a3c:	40021000 	.word	0x40021000

08009a40 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009a40:	b500      	push	{lr}
 8009a42:	4b05      	ldr	r3, [pc, #20]	; (8009a58 <RCC_APB2PeriphClockCmd+0x18>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8009a44:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009a46:	2900      	cmp	r1, #0
 8009a48:	d002      	beq.n	8009a50 <RCC_APB2PeriphClockCmd+0x10>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8009a4a:	4310      	orrs	r0, r2
 8009a4c:	6198      	str	r0, [r3, #24]
 8009a4e:	e001      	b.n	8009a54 <RCC_APB2PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8009a50:	4382      	bics	r2, r0
 8009a52:	619a      	str	r2, [r3, #24]
  }
}
 8009a54:	bd00      	pop	{pc}
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	40021000 	.word	0x40021000

08009a5c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009a5c:	b500      	push	{lr}
 8009a5e:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <RCC_APB1PeriphClockCmd+0x18>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8009a60:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009a62:	2900      	cmp	r1, #0
 8009a64:	d002      	beq.n	8009a6c <RCC_APB1PeriphClockCmd+0x10>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8009a66:	4310      	orrs	r0, r2
 8009a68:	61d8      	str	r0, [r3, #28]
 8009a6a:	e001      	b.n	8009a70 <RCC_APB1PeriphClockCmd+0x14>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8009a6c:	4382      	bics	r2, r0
 8009a6e:	61da      	str	r2, [r3, #28]
  }
}
 8009a70:	bd00      	pop	{pc}
 8009a72:	46c0      	nop			; (mov r8, r8)
 8009a74:	40021000 	.word	0x40021000

08009a78 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009a78:	b500      	push	{lr}
 8009a7a:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <RCC_APB2PeriphResetCmd+0x18>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8009a7c:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009a7e:	2900      	cmp	r1, #0
 8009a80:	d002      	beq.n	8009a88 <RCC_APB2PeriphResetCmd+0x10>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8009a82:	4310      	orrs	r0, r2
 8009a84:	60d8      	str	r0, [r3, #12]
 8009a86:	e001      	b.n	8009a8c <RCC_APB2PeriphResetCmd+0x14>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8009a88:	4382      	bics	r2, r0
 8009a8a:	60da      	str	r2, [r3, #12]
  }
}
 8009a8c:	bd00      	pop	{pc}
 8009a8e:	46c0      	nop			; (mov r8, r8)
 8009a90:	40021000 	.word	0x40021000

08009a94 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8009a94:	b510      	push	{r4, lr}
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8009a96:	8803      	ldrh	r3, [r0, #0]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8009a98:	22c1      	movs	r2, #193	; 0xc1
 8009a9a:	0192      	lsls	r2, r2, #6
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8009a9c:	89cc      	ldrh	r4, [r1, #14]

  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8009a9e:	401a      	ands	r2, r3
  /* Set SSM, SSI bit according to SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 8009aa0:	880b      	ldrh	r3, [r1, #0]
 8009aa2:	4323      	orrs	r3, r4
 8009aa4:	88cc      	ldrh	r4, [r1, #6]
 8009aa6:	4323      	orrs	r3, r4
 8009aa8:	890c      	ldrh	r4, [r1, #8]
 8009aaa:	4323      	orrs	r3, r4
 8009aac:	894c      	ldrh	r4, [r1, #10]
 8009aae:	4323      	orrs	r3, r4
 8009ab0:	898c      	ldrh	r4, [r1, #12]
 8009ab2:	4323      	orrs	r3, r4
 8009ab4:	4313      	orrs	r3, r2
                      SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
                      SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8009ab6:	8003      	strh	r3, [r0, #0]
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
 8009ab8:	8882      	ldrh	r2, [r0, #4]
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8009aba:	4c09      	ldr	r4, [pc, #36]	; (8009ae0 <SPI_Init+0x4c>)
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8009abc:	888b      	ldrh	r3, [r1, #4]
  SPIx->CR1 = tmpreg;
  /*-------------------------Data Size Configuration -----------------------*/
  /* Get the SPIx CR2 value */
  tmpreg = SPIx->CR2;
  /* Clear DS[3:0] bits */
  tmpreg &=(uint16_t)~SPI_CR2_DS;
 8009abe:	4014      	ands	r4, r2
  /* Configure SPIx: Data Size */
  tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 8009ac0:	431c      	orrs	r4, r3
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
 8009ac2:	8084      	strh	r4, [r0, #4]
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8009ac4:	8a0a      	ldrh	r2, [r1, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8009ac6:	2304      	movs	r3, #4
  /* Write to SPIx CR2 */
  SPIx->CR2 = tmpreg;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8009ac8:	8202      	strh	r2, [r0, #16]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8009aca:	8804      	ldrh	r4, [r0, #0]
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8009acc:	8849      	ldrh	r1, [r1, #2]
  
  /*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear MSTR bit */
  tmpreg &= CR1_CLEAR_MASK2;
 8009ace:	439c      	bics	r4, r3
  /* Configure SPIx: master/slave mode */  
  /* Set MSTR bit according to SPI_Mode */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 8009ad0:	430c      	orrs	r4, r1
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;  
 8009ad2:	8004      	strh	r4, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8009ad4:	8b82      	ldrh	r2, [r0, #28]
 8009ad6:	4b03      	ldr	r3, [pc, #12]	; (8009ae4 <SPI_Init+0x50>)
 8009ad8:	4013      	ands	r3, r2
 8009ada:	8383      	strh	r3, [r0, #28]
}
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	46c0      	nop			; (mov r8, r8)
 8009ae0:	fffff0ff 	.word	0xfffff0ff
 8009ae4:	fffff7ff 	.word	0xfffff7ff

08009ae8 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8009ae8:	b500      	push	{lr}
 8009aea:	2340      	movs	r3, #64	; 0x40
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8009aec:	8802      	ldrh	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009aee:	2900      	cmp	r1, #0
 8009af0:	d001      	beq.n	8009af6 <SPI_Cmd+0xe>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8009af2:	4313      	orrs	r3, r2
 8009af4:	e001      	b.n	8009afa <SPI_Cmd+0x12>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8009af6:	439a      	bics	r2, r3
 8009af8:	1c13      	adds	r3, r2, #0
 8009afa:	8003      	strh	r3, [r0, #0]
  }
}
 8009afc:	bd00      	pop	{pc}

08009afe <SPI_SendData8>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  *(__IO uint8_t *) spixbase = Data;
 8009afe:	7301      	strb	r1, [r0, #12]
}
 8009b00:	4770      	bx	lr

08009b02 <SPI_ReceiveData8>:
  uint32_t spixbase = 0x00;
  
  spixbase = (uint32_t)SPIx; 
  spixbase += 0x0C;
  
  return *(__IO uint8_t *) spixbase;
 8009b02:	7b00      	ldrb	r0, [r0, #12]
}
 8009b04:	4770      	bx	lr

08009b06 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8009b06:	8900      	ldrh	r0, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8009b08:	4008      	ands	r0, r1
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8009b0a:	1e43      	subs	r3, r0, #1
 8009b0c:	4198      	sbcs	r0, r3
}
 8009b0e:	4770      	bx	lr

08009b10 <SYSCFG_MemoryRemapConfig>:

  /* Check the parameter */
  assert_param(IS_SYSCFG_MEMORY_REMAP(SYSCFG_MemoryRemap));

  /* Get CFGR1 register value */
  tmpctrl = SYSCFG->CFGR1;
 8009b10:	4b03      	ldr	r3, [pc, #12]	; (8009b20 <SYSCFG_MemoryRemapConfig+0x10>)

  /* Clear MEM_MODE bits */
  tmpctrl &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
 8009b12:	2103      	movs	r1, #3

  /* Check the parameter */
  assert_param(IS_SYSCFG_MEMORY_REMAP(SYSCFG_MemoryRemap));

  /* Get CFGR1 register value */
  tmpctrl = SYSCFG->CFGR1;
 8009b14:	681a      	ldr	r2, [r3, #0]

  /* Clear MEM_MODE bits */
  tmpctrl &= (uint32_t) (~SYSCFG_CFGR1_MEM_MODE);
 8009b16:	438a      	bics	r2, r1

  /* Set the new MEM_MODE bits value */
  tmpctrl |= (uint32_t) SYSCFG_MemoryRemap;
 8009b18:	4310      	orrs	r0, r2

  /* Set CFGR1 register with the new memory remap configuration */
  SYSCFG->CFGR1 = tmpctrl;
 8009b1a:	6018      	str	r0, [r3, #0]
}
 8009b1c:	4770      	bx	lr
 8009b1e:	46c0      	nop			; (mov r8, r8)
 8009b20:	40010000 	.word	0x40010000

08009b24 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8009b24:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8009b26:	8c05      	ldrh	r5, [r0, #32]
 8009b28:	2401      	movs	r4, #1
 8009b2a:	43a5      	bics	r5, r4
 8009b2c:	8405      	strh	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b2e:	8b06      	ldrh	r6, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8009b30:	27f3      	movs	r7, #243	; 0xf3
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8009b32:	8c05      	ldrh	r5, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8009b34:	43be      	bics	r6, r7
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8009b36:	4332      	orrs	r2, r6
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009b38:	260a      	movs	r6, #10
 8009b3a:	43b5      	bics	r5, r6
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8009b3c:	011f      	lsls	r7, r3, #4
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8009b3e:	432c      	orrs	r4, r5
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8009b40:	433a      	orrs	r2, r7
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8009b42:	4321      	orrs	r1, r4
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b44:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009b46:	8401      	strh	r1, [r0, #32]
}
 8009b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009b4c <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8009b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8009b4e:	8c05      	ldrh	r5, [r0, #32]
 8009b50:	2410      	movs	r4, #16
 8009b52:	43a5      	bics	r5, r4
 8009b54:	8405      	strh	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b56:	8b07      	ldrh	r7, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8009b58:	4e08      	ldr	r6, [pc, #32]	; (8009b7c <TI2_Config+0x30>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8009b5a:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8009b5c:	4037      	ands	r7, r6
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8009b5e:	0216      	lsls	r6, r2, #8
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8009b60:	1c3a      	adds	r2, r7, #0
 8009b62:	4332      	orrs	r2, r6
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009b64:	26a0      	movs	r6, #160	; 0xa0
 8009b66:	43b5      	bics	r5, r6
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8009b68:	031f      	lsls	r7, r3, #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8009b6a:	432c      	orrs	r4, r5
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8009b6c:	0109      	lsls	r1, r1, #4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8009b6e:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8009b70:	433a      	orrs	r2, r7
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8009b72:	430c      	orrs	r4, r1
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b74:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009b76:	8404      	strh	r4, [r0, #32]
}
 8009b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b7a:	46c0      	nop			; (mov r8, r8)
 8009b7c:	00000cff 	.word	0x00000cff

08009b80 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8009b80:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8009b82:	4a19      	ldr	r2, [pc, #100]	; (8009be8 <TIM_TimeBaseInit+0x68>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8009b84:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 8009b86:	1882      	adds	r2, r0, r2
 8009b88:	4254      	negs	r4, r2
 8009b8a:	4162      	adcs	r2, r4
 8009b8c:	24c0      	movs	r4, #192	; 0xc0
 8009b8e:	0625      	lsls	r5, r4, #24
 8009b90:	1944      	adds	r4, r0, r5
 8009b92:	2c00      	cmp	r4, #0
 8009b94:	d004      	beq.n	8009ba0 <TIM_TimeBaseInit+0x20>
 8009b96:	2a00      	cmp	r2, #0
 8009b98:	d102      	bne.n	8009ba0 <TIM_TimeBaseInit+0x20>
 8009b9a:	4d14      	ldr	r5, [pc, #80]	; (8009bec <TIM_TimeBaseInit+0x6c>)
 8009b9c:	42a8      	cmp	r0, r5
 8009b9e:	d103      	bne.n	8009ba8 <TIM_TimeBaseInit+0x28>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8009ba0:	2570      	movs	r5, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8009ba2:	884c      	ldrh	r4, [r1, #2]
  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8009ba4:	43ab      	bics	r3, r5
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8009ba6:	4323      	orrs	r3, r4
  }
 
  if(TIMx != TIM6)
 8009ba8:	4c11      	ldr	r4, [pc, #68]	; (8009bf0 <TIM_TimeBaseInit+0x70>)
 8009baa:	42a0      	cmp	r0, r4
 8009bac:	d003      	beq.n	8009bb6 <TIM_TimeBaseInit+0x36>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8009bae:	4d11      	ldr	r5, [pc, #68]	; (8009bf4 <TIM_TimeBaseInit+0x74>)
 8009bb0:	890c      	ldrh	r4, [r1, #8]
 8009bb2:	402b      	ands	r3, r5
 8009bb4:	4323      	orrs	r3, r4
  }

  TIMx->CR1 = tmpcr1;
 8009bb6:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8009bb8:	684b      	ldr	r3, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8009bba:	4c0f      	ldr	r4, [pc, #60]	; (8009bf8 <TIM_TimeBaseInit+0x78>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8009bbc:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8009bbe:	880d      	ldrh	r5, [r1, #0]
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8009bc0:	1903      	adds	r3, r0, r4

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8009bc2:	8505      	strh	r5, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d009      	beq.n	8009bdc <TIM_TimeBaseInit+0x5c>
 8009bc8:	2a00      	cmp	r2, #0
 8009bca:	d107      	bne.n	8009bdc <TIM_TimeBaseInit+0x5c>
 8009bcc:	4c0b      	ldr	r4, [pc, #44]	; (8009bfc <TIM_TimeBaseInit+0x7c>)
 8009bce:	1902      	adds	r2, r0, r4
 8009bd0:	2a00      	cmp	r2, #0
 8009bd2:	d003      	beq.n	8009bdc <TIM_TimeBaseInit+0x5c>
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <TIM_TimeBaseInit+0x80>)
 8009bd6:	18c5      	adds	r5, r0, r3
 8009bd8:	2d00      	cmp	r5, #0
 8009bda:	d101      	bne.n	8009be0 <TIM_TimeBaseInit+0x60>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8009bdc:	7a89      	ldrb	r1, [r1, #10]
 8009bde:	8601      	strh	r1, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8009be0:	2201      	movs	r2, #1
 8009be2:	8282      	strh	r2, [r0, #20]
}
 8009be4:	bd30      	pop	{r4, r5, pc}
 8009be6:	46c0      	nop			; (mov r8, r8)
 8009be8:	bffed400 	.word	0xbffed400
 8009bec:	40000400 	.word	0x40000400
 8009bf0:	40001000 	.word	0x40001000
 8009bf4:	fffffcff 	.word	0xfffffcff
 8009bf8:	bffec000 	.word	0xbffec000
 8009bfc:	bffeb800 	.word	0xbffeb800
 8009c00:	bffebc00 	.word	0xbffebc00

08009c04 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8009c04:	b500      	push	{lr}
 8009c06:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8009c08:	8802      	ldrh	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009c0a:	2900      	cmp	r1, #0
 8009c0c:	d001      	beq.n	8009c12 <TIM_Cmd+0xe>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	e001      	b.n	8009c16 <TIM_Cmd+0x12>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8009c12:	439a      	bics	r2, r3
 8009c14:	1c13      	adds	r3, r2, #0
 8009c16:	8003      	strh	r3, [r0, #0]
  }
}
 8009c18:	bd00      	pop	{pc}

08009c1a <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8009c1a:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8009c1c:	4770      	bx	lr

08009c1e <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8009c1e:	8b03      	ldrh	r3, [r0, #24]
 8009c20:	220c      	movs	r2, #12
 8009c22:	4393      	bics	r3, r2
 8009c24:	8303      	strh	r3, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8009c26:	8b03      	ldrh	r3, [r0, #24]
 8009c28:	4319      	orrs	r1, r3
 8009c2a:	8301      	strh	r1, [r0, #24]
}
 8009c2c:	4770      	bx	lr
	...

08009c30 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8009c30:	8b02      	ldrh	r2, [r0, #24]
 8009c32:	4b04      	ldr	r3, [pc, #16]	; (8009c44 <TIM_SetIC2Prescaler+0x14>)
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8009c34:	0209      	lsls	r1, r1, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8009c36:	4013      	ands	r3, r2
 8009c38:	8303      	strh	r3, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8009c3a:	8b03      	ldrh	r3, [r0, #24]
 8009c3c:	4319      	orrs	r1, r3
 8009c3e:	8301      	strh	r1, [r0, #24]
}
 8009c40:	4770      	bx	lr
 8009c42:	46c0      	nop			; (mov r8, r8)
 8009c44:	fffff3ff 	.word	0xfffff3ff

08009c48 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8009c48:	8b83      	ldrh	r3, [r0, #28]
 8009c4a:	220c      	movs	r2, #12
 8009c4c:	4393      	bics	r3, r2
 8009c4e:	8383      	strh	r3, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8009c50:	8b83      	ldrh	r3, [r0, #28]
 8009c52:	4319      	orrs	r1, r3
 8009c54:	8381      	strh	r1, [r0, #28]
}
 8009c56:	4770      	bx	lr

08009c58 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8009c58:	8b82      	ldrh	r2, [r0, #28]
 8009c5a:	4b04      	ldr	r3, [pc, #16]	; (8009c6c <TIM_SetIC4Prescaler+0x14>)
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8009c5c:	0209      	lsls	r1, r1, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8009c5e:	4013      	ands	r3, r2
 8009c60:	8383      	strh	r3, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8009c62:	8b83      	ldrh	r3, [r0, #28]
 8009c64:	4319      	orrs	r1, r3
 8009c66:	8381      	strh	r1, [r0, #28]
}
 8009c68:	4770      	bx	lr
 8009c6a:	46c0      	nop			; (mov r8, r8)
 8009c6c:	fffff3ff 	.word	0xfffff3ff

08009c70 <TIM_ICInit>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	1c04      	adds	r4, r0, #0
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8009c74:	8808      	ldrh	r0, [r1, #0]
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8009c76:	1c0d      	adds	r5, r1, #0
 8009c78:	88aa      	ldrh	r2, [r5, #4]
 8009c7a:	8849      	ldrh	r1, [r1, #2]
 8009c7c:	892b      	ldrh	r3, [r5, #8]
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d107      	bne.n	8009c92 <TIM_ICInit+0x22>
  {
    assert_param(IS_TIM_LIST4_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8009c82:	1c20      	adds	r0, r4, #0
 8009c84:	f7ff ff4e 	bl	8009b24 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8009c88:	88e9      	ldrh	r1, [r5, #6]
 8009c8a:	1c20      	adds	r0, r4, #0
 8009c8c:	f7ff ffc7 	bl	8009c1e <TIM_SetIC1Prescaler>
 8009c90:	e040      	b.n	8009d14 <TIM_ICInit+0xa4>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8009c92:	2804      	cmp	r0, #4
 8009c94:	d107      	bne.n	8009ca6 <TIM_ICInit+0x36>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8009c96:	1c20      	adds	r0, r4, #0
 8009c98:	f7ff ff58 	bl	8009b4c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8009c9c:	88e9      	ldrh	r1, [r5, #6]
 8009c9e:	1c20      	adds	r0, r4, #0
 8009ca0:	f7ff ffc6 	bl	8009c30 <TIM_SetIC2Prescaler>
 8009ca4:	e036      	b.n	8009d14 <TIM_ICInit+0xa4>
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8009ca6:	8c26      	ldrh	r6, [r4, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8009ca8:	2808      	cmp	r0, #8
 8009caa:	d119      	bne.n	8009ce0 <TIM_ICInit+0x70>
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8009cac:	481a      	ldr	r0, [pc, #104]	; (8009d18 <TIM_ICInit+0xa8>)
 8009cae:	4030      	ands	r0, r6
 8009cb0:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009cb2:	8ba7      	ldrh	r7, [r4, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 8009cb4:	26f3      	movs	r6, #243	; 0xf3
 8009cb6:	43b7      	bics	r7, r6
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8009cb8:	011e      	lsls	r6, r3, #4
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8009cba:	8c20      	ldrh	r0, [r4, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8009cbc:	4337      	orrs	r7, r6
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009cbe:	4e17      	ldr	r6, [pc, #92]	; (8009d1c <TIM_ICInit+0xac>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8009cc0:	b2bb      	uxth	r3, r7
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009cc2:	4006      	ands	r6, r0
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8009cc4:	020f      	lsls	r7, r1, #8
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 8009cc6:	433e      	orrs	r6, r7
 8009cc8:	2080      	movs	r0, #128	; 0x80
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8009cca:	431a      	orrs	r2, r3
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 8009ccc:	0041      	lsls	r1, r0, #1
 8009cce:	b2b3      	uxth	r3, r6
 8009cd0:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009cd2:	83a2      	strh	r2, [r4, #28]
  TIMx->CCER = tmpccer;
 8009cd4:	8421      	strh	r1, [r4, #32]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8009cd6:	88e9      	ldrh	r1, [r5, #6]
 8009cd8:	1c20      	adds	r0, r4, #0
 8009cda:	f7ff ffb5 	bl	8009c48 <TIM_SetIC3Prescaler>
 8009cde:	e019      	b.n	8009d14 <TIM_ICInit+0xa4>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8009ce0:	480f      	ldr	r0, [pc, #60]	; (8009d20 <TIM_ICInit+0xb0>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8009ce2:	0309      	lsls	r1, r1, #12
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8009ce4:	4030      	ands	r0, r6
 8009ce6:	8420      	strh	r0, [r4, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ce8:	8ba7      	ldrh	r7, [r4, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8009cea:	4e0e      	ldr	r6, [pc, #56]	; (8009d24 <TIM_ICInit+0xb4>)
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8009cec:	8c20      	ldrh	r0, [r4, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8009cee:	4037      	ands	r7, r6
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8009cf0:	0216      	lsls	r6, r2, #8
 8009cf2:	4337      	orrs	r7, r6
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009cf4:	4e0c      	ldr	r6, [pc, #48]	; (8009d28 <TIM_ICInit+0xb8>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8009cf6:	b2ba      	uxth	r2, r7
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009cf8:	4006      	ands	r6, r0
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8009cfa:	430e      	orrs	r6, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 8009cfc:	031b      	lsls	r3, r3, #12
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8009cfe:	2780      	movs	r7, #128	; 0x80
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 8009d00:	4313      	orrs	r3, r2
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8009d02:	0179      	lsls	r1, r7, #5
 8009d04:	b2b2      	uxth	r2, r6
 8009d06:	4311      	orrs	r1, r2
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d08:	83a3      	strh	r3, [r4, #28]
  TIMx->CCER = tmpccer;
 8009d0a:	8421      	strh	r1, [r4, #32]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8009d0c:	88e9      	ldrh	r1, [r5, #6]
 8009d0e:	1c20      	adds	r0, r4, #0
 8009d10:	f7ff ffa2 	bl	8009c58 <TIM_SetIC4Prescaler>
  }
}
 8009d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	fffffeff 	.word	0xfffffeff
 8009d1c:	fffff5ff 	.word	0xfffff5ff
 8009d20:	ffffefff 	.word	0xffffefff
 8009d24:	00000cff 	.word	0x00000cff
 8009d28:	00005fff 	.word	0x00005fff

08009d2c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8009d2c:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8009d2e:	8983      	ldrh	r3, [r0, #12]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009d30:	2a00      	cmp	r2, #0
 8009d32:	d002      	beq.n	8009d3a <TIM_ITConfig+0xe>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8009d34:	4319      	orrs	r1, r3
 8009d36:	8181      	strh	r1, [r0, #12]
 8009d38:	e001      	b.n	8009d3e <TIM_ITConfig+0x12>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8009d3a:	438b      	bics	r3, r1
 8009d3c:	8183      	strh	r3, [r0, #12]
  }
}
 8009d3e:	bd00      	pop	{pc}

08009d40 <TIM_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8009d40:	8a02      	ldrh	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 8009d42:	8983      	ldrh	r3, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8009d44:	400b      	ands	r3, r1
 8009d46:	1e58      	subs	r0, r3, #1
 8009d48:	4183      	sbcs	r3, r0
 8009d4a:	1c10      	adds	r0, r2, #0
 8009d4c:	4008      	ands	r0, r1
 8009d4e:	1e41      	subs	r1, r0, #1
 8009d50:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8009d52:	4018      	ands	r0, r3
}
 8009d54:	4770      	bx	lr

08009d56 <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8009d56:	43c9      	mvns	r1, r1
 8009d58:	8201      	strh	r1, [r0, #16]
}
 8009d5a:	4770      	bx	lr

08009d5c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8009d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8009d5e:	6803      	ldr	r3, [r0, #0]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8009d60:	1c06      	adds	r6, r0, #0
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8009d62:	2001      	movs	r0, #1
 8009d64:	4383      	bics	r3, r0
 8009d66:	6033      	str	r3, [r6, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8009d68:	6877      	ldr	r7, [r6, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8009d6a:	1c0d      	adds	r5, r1, #0
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8009d6c:	4924      	ldr	r1, [pc, #144]	; (8009e00 <USART_Init+0xa4>)
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8009d6e:	68ac      	ldr	r4, [r5, #8]
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8009d70:	4039      	ands	r1, r7
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8009d72:	4321      	orrs	r1, r4
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 8009d74:	6071      	str	r1, [r6, #4]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009d76:	68e8      	ldr	r0, [r5, #12]
 8009d78:	686c      	ldr	r4, [r5, #4]
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8009d7a:	6837      	ldr	r7, [r6, #0]
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009d7c:	692b      	ldr	r3, [r5, #16]
  USARTx->CR2 = tmpreg;
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8009d7e:	4a21      	ldr	r2, [pc, #132]	; (8009e04 <USART_Init+0xa8>)
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009d80:	4304      	orrs	r4, r0
 8009d82:	431c      	orrs	r4, r3
  USARTx->CR2 = tmpreg;
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8009d84:	4017      	ands	r7, r2
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8009d86:	433c      	orrs	r4, r7
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8009d88:	6034      	str	r4, [r6, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8009d8a:	68b1      	ldr	r1, [r6, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8009d8c:	481e      	ldr	r0, [pc, #120]	; (8009e08 <USART_Init+0xac>)
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8009d8e:	696a      	ldr	r2, [r5, #20]
  USARTx->CR1 = tmpreg;
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8009d90:	4008      	ands	r0, r1
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8009d92:	4310      	orrs	r0, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8009d94:	b08d      	sub	sp, #52	; 0x34
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 8009d96:	60b0      	str	r0, [r6, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8009d98:	a802      	add	r0, sp, #8
 8009d9a:	f7ff fd81 	bl	80098a0 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8009d9e:	4b1b      	ldr	r3, [pc, #108]	; (8009e0c <USART_Init+0xb0>)
 8009da0:	429e      	cmp	r6, r3
 8009da2:	d101      	bne.n	8009da8 <USART_Init+0x4c>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8009da4:	9c08      	ldr	r4, [sp, #32]
 8009da6:	e00a      	b.n	8009dbe <USART_Init+0x62>
  }
  else if (USARTx == USART2)
 8009da8:	4a19      	ldr	r2, [pc, #100]	; (8009e10 <USART_Init+0xb4>)
 8009daa:	4296      	cmp	r6, r2
 8009dac:	d101      	bne.n	8009db2 <USART_Init+0x56>
  {
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 8009dae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009db0:	e005      	b.n	8009dbe <USART_Init+0x62>
  }
   else if (USARTx == USART3)
 8009db2:	4918      	ldr	r1, [pc, #96]	; (8009e14 <USART_Init+0xb8>)
 8009db4:	428e      	cmp	r6, r1
 8009db6:	d101      	bne.n	8009dbc <USART_Init+0x60>
  {
    apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 8009db8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009dba:	e000      	b.n	8009dbe <USART_Init+0x62>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8009dbc:	9c04      	ldr	r4, [sp, #16]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8009dbe:	6833      	ldr	r3, [r6, #0]
 8009dc0:	682f      	ldr	r7, [r5, #0]
 8009dc2:	0419      	lsls	r1, r3, #16
 8009dc4:	d500      	bpl.n	8009dc8 <USART_Init+0x6c>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8009dc6:	0064      	lsls	r4, r4, #1
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8009dc8:	1c39      	adds	r1, r7, #0
 8009dca:	1c20      	adds	r0, r4, #0
 8009dcc:	f7f9 f9bc 	bl	8003148 <__aeabi_uidiv>
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8009dd0:	1c39      	adds	r1, r7, #0
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8009dd2:	9001      	str	r0, [sp, #4]
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8009dd4:	1c20      	adds	r0, r4, #0
 8009dd6:	f7f9 f9fb 	bl	80031d0 <__aeabi_uidivmod>
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8009dda:	682a      	ldr	r2, [r5, #0]
  {
    divider++;
 8009ddc:	2400      	movs	r4, #0
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8009dde:	0850      	lsrs	r0, r2, #1
  {
    divider++;
 8009de0:	9f01      	ldr	r7, [sp, #4]
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8009de2:	6835      	ldr	r5, [r6, #0]
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
  {
    divider++;
 8009de4:	4281      	cmp	r1, r0
 8009de6:	4164      	adcs	r4, r4
 8009de8:	193b      	adds	r3, r7, r4
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8009dea:	0429      	lsls	r1, r5, #16
 8009dec:	d504      	bpl.n	8009df8 <USART_Init+0x9c>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8009dee:	490a      	ldr	r1, [pc, #40]	; (8009e18 <USART_Init+0xbc>)
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8009df0:	071c      	lsls	r4, r3, #28
 8009df2:	0f65      	lsrs	r5, r4, #29
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8009df4:	400b      	ands	r3, r1
 8009df6:	432b      	orrs	r3, r5
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8009df8:	81b3      	strh	r3, [r6, #12]
}
 8009dfa:	b00d      	add	sp, #52	; 0x34
 8009dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dfe:	46c0      	nop			; (mov r8, r8)
 8009e00:	ffffcfff 	.word	0xffffcfff
 8009e04:	ffffe9f3 	.word	0xffffe9f3
 8009e08:	fffffcff 	.word	0xfffffcff
 8009e0c:	40013800 	.word	0x40013800
 8009e10:	40004400 	.word	0x40004400
 8009e14:	40004800 	.word	0x40004800
 8009e18:	0000fff0 	.word	0x0000fff0

08009e1c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8009e1c:	b500      	push	{lr}
 8009e1e:	2301      	movs	r3, #1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8009e20:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009e22:	2900      	cmp	r1, #0
 8009e24:	d001      	beq.n	8009e2a <USART_Cmd+0xe>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8009e26:	4313      	orrs	r3, r2
 8009e28:	e001      	b.n	8009e2e <USART_Cmd+0x12>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 8009e2a:	439a      	bics	r2, r3
 8009e2c:	1c13      	adds	r3, r2, #0
 8009e2e:	6003      	str	r3, [r0, #0]
  }
}
 8009e30:	bd00      	pop	{pc}

08009e32 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8009e32:	05ca      	lsls	r2, r1, #23
 8009e34:	0dd1      	lsrs	r1, r2, #23
 8009e36:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8009e38:	4770      	bx	lr

08009e3a <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8009e3a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 8009e3c:	05c8      	lsls	r0, r1, #23
 8009e3e:	0dc0      	lsrs	r0, r0, #23
}
 8009e40:	4770      	bx	lr

08009e42 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8009e42:	b510      	push	{r4, lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8009e44:	b28b      	uxth	r3, r1
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8009e46:	2401      	movs	r4, #1
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8009e48:	b2c9      	uxtb	r1, r1
  itmask = (((uint32_t)0x01) << itpos);
 8009e4a:	408c      	lsls	r4, r1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8009e4c:	0a1b      	lsrs	r3, r3, #8
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8009e4e:	1c21      	adds	r1, r4, #0
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d101      	bne.n	8009e58 <USART_ITConfig+0x16>
  {
    usartxbase += 0x04;
 8009e54:	3004      	adds	r0, #4
 8009e56:	e002      	b.n	8009e5e <USART_ITConfig+0x1c>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d100      	bne.n	8009e5e <USART_ITConfig+0x1c>
  {
    usartxbase += 0x08;
 8009e5c:	3008      	adds	r0, #8
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8009e5e:	6803      	ldr	r3, [r0, #0]
    usartxbase += 0x08;
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8009e60:	2a00      	cmp	r2, #0
 8009e62:	d002      	beq.n	8009e6a <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8009e64:	4319      	orrs	r1, r3
 8009e66:	6001      	str	r1, [r0, #0]
 8009e68:	e001      	b.n	8009e6e <USART_ITConfig+0x2c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8009e6a:	438b      	bics	r3, r1
 8009e6c:	6003      	str	r3, [r0, #0]
  }
}
 8009e6e:	bd10      	pop	{r4, pc}

08009e70 <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8009e70:	69c0      	ldr	r0, [r0, #28]
 8009e72:	4008      	ands	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8009e74:	1e43      	subs	r3, r0, #1
 8009e76:	4198      	sbcs	r0, r3
}
 8009e78:	4770      	bx	lr

08009e7a <USART_GetITStatus>:
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8009e7a:	b510      	push	{r4, lr}
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8009e7c:	b2cb      	uxtb	r3, r1
  itmask = (uint32_t)0x01 << itmask;
 8009e7e:	2401      	movs	r4, #1
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8009e80:	b28a      	uxth	r2, r1
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8009e82:	409c      	lsls	r4, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8009e84:	0a12      	lsrs	r2, r2, #8
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8009e86:	1c23      	adds	r3, r4, #0
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8009e88:	2a01      	cmp	r2, #1
 8009e8a:	d101      	bne.n	8009e90 <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 8009e8c:	6802      	ldr	r2, [r0, #0]
 8009e8e:	e004      	b.n	8009e9a <USART_GetITStatus+0x20>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8009e90:	2a02      	cmp	r2, #2
 8009e92:	d101      	bne.n	8009e98 <USART_GetITStatus+0x1e>
  {
    itmask &= USARTx->CR2;
 8009e94:	6842      	ldr	r2, [r0, #4]
 8009e96:	e000      	b.n	8009e9a <USART_GetITStatus+0x20>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8009e98:	6882      	ldr	r2, [r0, #8]
 8009e9a:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->ISR;
 8009e9c:	69c0      	ldr	r0, [r0, #28]
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x10;
 8009e9e:	0c0a      	lsrs	r2, r1, #16
  bitpos = (uint32_t)0x01 << bitpos;
 8009ea0:	2401      	movs	r4, #1
 8009ea2:	4094      	lsls	r4, r2
  bitpos &= USARTx->ISR;
 8009ea4:	4020      	ands	r0, r4
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8009ea6:	1e5a      	subs	r2, r3, #1
 8009ea8:	4193      	sbcs	r3, r2
 8009eaa:	1e41      	subs	r1, r0, #1
 8009eac:	4188      	sbcs	r0, r1
  else
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
 8009eae:	4018      	ands	r0, r3
}
 8009eb0:	bd10      	pop	{r4, pc}

08009eb2 <USART_ClearITPendingBit>:
  uint32_t bitpos = 0, itmask = 0;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 8009eb2:	0c0a      	lsrs	r2, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	4093      	lsls	r3, r2
  USARTx->ICR = (uint32_t)itmask;
 8009eb8:	6203      	str	r3, [r0, #32]
}
 8009eba:	4770      	bx	lr
 8009ebc:	0000      	movs	r0, r0
	...

08009ec0 <atanhi>:
 8009ec0:	bb4f 0561 ac67 3fdd 2d18 5444 21fb 3fe9     O.a.g..?.-DT.!.?
 8009ed0:	f69b d281 730b 3fef 2d18 5444 21fb 3ff9     .....s.?.-DT.!.?

08009ee0 <atanlo>:
 8009ee0:	65e2 222f 2b7f 3c7a 5c07 3314 a626 3c81     .e/".+z<.\.3&..<
 8009ef0:	cbbd 7af0 0788 3c70 5c07 3314 a626 3c91     ...z..p<.\.3&..<
 8009f00:	3758 0800 37fe 0800 385a 0800 3868 0800     X7...7..Z8..h8..
 8009f10:	385a 0800 3860 0800 385a 0800 3868 0800     Z8..`8..Z8..h8..
 8009f20:	37fe 0800 37fe 0800 3860 0800 3868 0800     .7...7..`8..h8..
 8009f30:	38be 0800 38be 0800 38be 0800 38a2 0800     .8...8...8...8..
 8009f40:	39b2 0800 3a7c 0800 3a7c 0800 3a78 0800     .9..|:..|:..x:..
 8009f50:	3a40 0800 3a40 0800 3ade 0800 3a78 0800     @:..@:...:..x:..
 8009f60:	3a40 0800 3ade 0800 3a40 0800 3a78 0800     @:...:..@:..x:..
 8009f70:	3a3a 0800 3a3a 0800 3a3a 0800 3af0 0800     ::..::..::...:..
 8009f80:	4890 0800 4978 0800 49de 0800 49f4 0800     .H..xI...I...I..
 8009f90:	49de 0800 49e8 0800 49de 0800 49f4 0800     .I...I...I...I..
 8009fa0:	4978 0800 4978 0800 49e8 0800 49f4 0800     xI..xI...I...I..
 8009fb0:	4a6e 0800 4a6e 0800 4a6e 0800 4a50 0800     nJ..nJ..nJ..PJ..
 8009fc0:	508c 0800 52e4 0800 52e4 0800 52ac 0800     .P...R...R...R..
 8009fd0:	522a 0800 522a 0800 52ce 0800 52ac 0800     *R..*R...R...R..
 8009fe0:	522a 0800 52ce 0800 522a 0800 52ac 0800     *R...R..*R...R..
 8009ff0:	52c2 0800 52c2 0800 52c2 0800 5310 0800     .R...R...R...S..

0800a000 <_ctype_>:
 800a000:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 800a010:	2020 2020 2020 2020 2020 2020 2020 2020                     
 800a020:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 800a030:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 800a040:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 800a050:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 800a060:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 800a070:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 800a080:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 800a104:	6f6e 2074 7165 6175 0d6c 000a 7325 252d     not equal...%s-%
 800a114:	0d64 000a                                   d...

0800a118 <__func__.6367>:
 800a118:	534c 364d 5344 5f33 5347 535f 6174 7472     LSM6DS3_GS_Start
 800a128:	2a00 5353 252c 2c73 3956 252c 2c73 2500     .*SS,%s,V9,%s,.%
 800a138:	2c64 6425 252c 2c64 6425 252c 2c64 7325     d,%d,%d,%d,%d,%s
 800a148:	252c 0073 4c4c 3353 302e 322e 4634 2d30     ,%s.LLS3.0.24F0-
 800a158:	3032 3232 3031 3730 2500 2c64 6425 252c     20221007.%d,%d,%
 800a168:	2c64 6425 252c 0064 532a 2c53 2d00 2000     d,%d,%d.*SS,.-. 
 800a178:	3a00 2c00 3956 002c 6425 252c 0073 562c     .:.,V9,.%d,%s.,V
 800a188:	2c33 4300 4746 4900 464e 004f 4e49 4554     3,.CFG.INFO.INTE
 800a198:	5652 4c41 4500 414d 5300 004e 4552 4553     RVAL.EMA.SN.RESE
 800a1a8:	0054 4653 5300 0045 4544 5542 0047 3231     T.SF.SE.DEBUG.12
 800a1b8:	3433 3635 3837 3039 4241 4443 4645 6500     34567890ABCDEF.e
 800a1c8:	6172 6573 6620 616c 6873 6620 6961 0d6c     rase flash fail.
 800a1d8:	000a 7277 7469 2065 6c66 7361 2068 6166     ..write flash fa
 800a1e8:	6c69 0a0d 7700 6972 6574 635f 6e6f 6966     il...write_confi
 800a1f8:	0d67 000a 3231 3433 3635 3837 3039 0d00     g...1234567890..
 800a208:	570a 6972 6574 6420 6665 7561 746c 6320     .Write default c
 800a218:	6e6f 6966 2e67 0a0d 0a0d 6c00 616f 5f64     onfig......load_
 800a228:	6f63 666e 6769 0a0d 4600 253d 2075 4645     config...F=%u EF
 800a238:	253d 2075 3146 3d35 7525 4e20 253d 2064     =%u F15=%u N=%d 
 800a248:	4e4d 253d 2064 4e58 253d 2064 4e53 253d     MN=%d XN=%d SN=%
 800a258:	2064 4e41 253d 2064 4e43 253d 2064 5546     d AN=%d CN=%d FU
 800a268:	253d 2075 4d45 253d 2075 3d78 6425 7920     =%u EM=%u x=%d y
 800a278:	253d 2064 3d7a 6425 6920 7864 4433 253d     =%d z=%d idx3D=%
 800a288:	2064 3363 3d44 6425 6420 3d54 6425 7320     d c3D=%d dT=%d s
 800a298:	6574 3d70 6425 5420 253d 2064 3d45 6425     tep=%d T=%d E=%d
 800a2a8:	0a0d 4600 253d 2078 4645 253d 2078 3146     ...F=%x EF=%x F1
 800a2b8:	3d35 7825 4e20 253d 3430 2e78 2030 4e58     5=%x N=%04x.0 XN
 800a2c8:	253d 3430 2e78 2030 4e41 253d 3430 2e78     =%04x.0 AN=%04x.
 800a2d8:	2030 4e43 253d 3430 2e78 2030 4e4d 253d     0 CN=%04x.0 MN=%
 800a2e8:	3430 2e78 2030 4e53 253d 3430 2e78 2030     04x.0 SN=%04x.0 
 800a2f8:	3d78 6425 7920 253d 2064 3d7a 6425 6920     x=%d y=%d z=%d i
 800a308:	7864 4433 253d 2064 3363 3d44 6425 6420     dx3D=%d c3D=%d d
 800a318:	3d54 6425 7420 3d4f 6425 6620 3d4d 6425     T=%d tO=%d fM=%d
 800a328:	6420 3d58 6425 6420 3d59 6425 5320 3d54      dX=%d dY=%d ST=
 800a338:	6425 5420 253d 2064 3d45 6425 0a0d 4600     %d T=%d E=%d...F
 800a348:	253d 2078 4645 253d 2078 3146 3d35 7825     =%x EF=%x F15=%x
 800a358:	4e20 253d 3430 2e78 2030 4e58 253d 3430      N=%04x.0 XN=%04
 800a368:	2e78 2030 4e41 253d 3430 2e78 2030 4e43     x.0 AN=%04x.0 CN
 800a378:	253d 3430 2e78 2030 4e4d 253d 3430 2e78     =%04x.0 MN=%04x.
 800a388:	2030 4e53 253d 3430 2e78 2030 3d78 6425     0 SN=%04x.0 x=%d
 800a398:	7920 253d 2064 3d7a 6425 5420 253d 2064      y=%d z=%d T=%d 
 800a3a8:	3d45 6425 4620 3d55 7825 4520 3d4d 7825     E=%d FU=%x EM=%x
 800a3b8:	6620 3d4d 6425 5620 253d 2073 5453 253d      fM=%d V=%s ST=%
 800a3c8:	0d64 000a 2e33 2e30 3432 0d00 530a 7379     d...3.0.24...Sys
 800a3d8:	6574 206d 6572 6461 2079 2528 2973 0a0d     tem ready (%s)..
 800a3e8:	0d00 460a 4c55 3d4c 7525 4520 504d 5954     ...FULL=%u EMPTY
 800a3f8:	253d 2075 6974 656d 756f 3d74 6425 6620     =%u timeout=%d f
 800a408:	3d4d 6425 6920 746e 7265 6176 3d6c 6425     M=%d interval=%d
 800a418:	6420 3d58 6425 6420 3d59 6425 4420 7665      dX=%d dY=%d Dev
 800a428:	6369 4965 3d44 7325 0a0d 0a0d 3000 3231     iceID=%s.....012
 800a438:	3433 3635 3837 4139 4342 4544 0046 5245     3456789ABCDEF.ER
 800a448:	4f52 0052 7325 7420 6d69 2065 756f 2074     ROR.%s time out 
 800a458:	0a0d 7300 6970 2032 6e69 7469 6420 6e6f     ...spi2 init don
 800a468:	0d65 000a                                   e...

0800a46c <__func__.6296>:
 800a46c:	5053 5f49 6553 646e 7942 6574 5300               SPI_SendByte.

0800a479 <__func__.6309>:
 800a479:	5053 5f49 6572 6461 7942 6574 0000 7300     SPI_readByte...s
 800a489:	7271 0074 0000 4300 0000 f800                    qrt....C...

0800a494 <_init>:
 800a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a496:	46c0      	nop			; (mov r8, r8)
 800a498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49a:	bc08      	pop	{r3}
 800a49c:	469e      	mov	lr, r3
 800a49e:	4770      	bx	lr

0800a4a0 <_fini>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	46c0      	nop			; (mov r8, r8)
 800a4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a6:	bc08      	pop	{r3}
 800a4a8:	469e      	mov	lr, r3
 800a4aa:	4770      	bx	lr
