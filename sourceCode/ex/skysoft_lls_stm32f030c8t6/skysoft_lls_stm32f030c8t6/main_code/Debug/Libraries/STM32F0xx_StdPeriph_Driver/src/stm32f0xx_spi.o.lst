   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_spi.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	SPI_I2S_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	SPI_I2S_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @file    stm32f0xx_spi.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *           + Initialization and Configuration
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *           + Data transfers functions
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *           + Hardware CRC Calculation
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *           + DMA transfers management
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *           + Interrupts and flags management
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *  @verbatim
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                        ##### How to use this driver #####
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..]
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Enable peripheral clock using RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE)
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             function for SPI1 or using RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE)
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             function for SPI2.
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Enable SCK, MOSI, MISO and NSS GPIO clocks using 
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             RCC_AHBPeriphClockCmd() function. 
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Peripherals alternate function: 
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Connect the pin to the desired peripherals' Alternate 
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  Function (AF) using GPIO_PinAFConfig() function.
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Configure the desired pin in alternate function by:
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF.
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Select the type, pull-up/pull-down and output speed via 
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  GPIO_PuPd, GPIO_OType and GPIO_Speed members.
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Call GPIO_Init() function.
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             function.In I2S mode, program the Mode, Standard, Data Format, MCLK 
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             Output, Audio frequency and Polarity using I2S_Init() function.
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Configure the FIFO threshold using SPI_RxFIFOThresholdConfig() to select 
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             at which threshold the RXNE event is generated.
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Enable the NVIC and the corresponding interrupt using the function 
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             SPI_ITConfig() if you need to use interrupt mode. 
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) When using the DMA mode 
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Configure the DMA using DMA_Init() function.
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Active the needed channel Request using SPI_I2S_DMACmd() function.
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****    
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Enable the SPI using the SPI_Cmd() function or enable the I2S using
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             I2S_Cmd().
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****    
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) Optionally, you can enable/configure the following parameters without
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             re-initialization (i.e there is no need to call again SPI_Init() function):
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  is programmed as Data direction parameter using the SPI_Init() 
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  function it can be possible to switch between SPI_Direction_Tx 
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  or SPI_Direction_Rx using the SPI_BiDirectionalLineConfig() function.
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) When SPI_NSS_Soft is selected as Slave Select Management parameter 
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  using the SPI_Init() function it can be possible to manage the 
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                  NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Reconfigure the data size using the SPI_DataSizeConfig() function.
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             (++) Enable or disable the SS output using the SPI_SSOutputCmd() function.  
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) To use the CRC Hardware calculation feature refer to the Peripheral 
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             CRC hardware Calculation subsection.
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     @endverbatim 
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ******************************************************************************
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @attention
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * You may not use this file except in compliance with the License.
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * You may obtain a copy of the License at:
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * Unless required by applicable law or agreed to in writing, software 
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * See the License for the specific language governing permissions and
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * limitations under the License.
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ******************************************************************************
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Includes ------------------------------------------------------------------*/
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #include "stm32f0xx_spi.h"
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #include "stm32f0xx_rcc.h"
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief SPI driver modules
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private define ------------------------------------------------------------*/
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* SPI registers Masks */
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #define CR1_CLEAR_MASK       ((uint16_t)0x3040)
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #define CR1_CLEAR_MASK2      ((uint16_t)0xFFFB)
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #define CR2_LDMA_MASK        ((uint16_t)0x9FFF)
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** #define I2SCFGR_CLEAR_Mask   ((uint16_t)0xF040)
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Private_Functions
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @verbatim   
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****            ##### Initialization and Configuration functions #####
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides a set of functions allowing to initialize the SPI Direction,
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] The SPI_Init() function follows the SPI configuration procedures for Master mode
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and Slave mode (details for these procedures are available in reference manual).
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] When the Software NSS management (SPI_InitStruct->SPI_NSS = SPI_NSS_Soft) is selected,
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          use the following function to manage the NSS bit:
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft);
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In Master mode, when the Hardware NSS management (SPI_InitStruct->SPI_NSS = SPI_NSS_Hard)
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          is selected, use the follwoing function to enable the NSS output feature.
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] The NSS pulse mode can be managed by the SPI TI mode when enabling it using the following 
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          And it can be managed by software in the SPI Motorola mode using this function: 
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState);
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides also functions to initialize the I2S Mode, Standard, 
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          Data Format, MCLK Output, Audio frequency and Polarity.
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] The I2S_Init() function follows the I2S configuration procedures for Master mode
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and Slave mode.
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @endverbatim
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Deinitializes the SPIx peripheral registers to their default
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         reset values.
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         I2S mode is not supported for STM32F030 devices.      
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
  26              		.loc 1 170 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
  33              	.LVL0:
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (SPIx == SPI1)
  34              		.loc 1 174 0
  35 0002 0E4B     		ldr	r3, .L4
  36 0004 9842     		cmp	r0, r3
  37 0006 0AD1     		bne	.L2
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable SPI1 reset state */
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  38              		.loc 1 177 0
  39 0008 8021     		mov	r1, #128
  40 000a 4801     		lsl	r0, r1, #5
  41              	.LVL1:
  42 000c 0121     		mov	r1, #1
  43 000e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Release SPI1 from reset state */
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  44              		.loc 1 179 0
  45 0012 8020     		mov	r0, #128
  46 0014 4001     		lsl	r0, r0, #5
  47 0016 0021     		mov	r1, #0
  48 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  49 001c 0CE0     		b	.L1
  50              	.LVL2:
  51              	.L2:
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     if (SPIx == SPI2)
  52              		.loc 1 183 0
  53 001e 084A     		ldr	r2, .L4+4
  54 0020 9042     		cmp	r0, r2
  55 0022 09D1     		bne	.L1
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     {
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* Enable SPI2 reset state */
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  56              		.loc 1 186 0
  57 0024 8020     		mov	r0, #128
  58              	.LVL3:
  59 0026 C001     		lsl	r0, r0, #7
  60 0028 0121     		mov	r1, #1
  61 002a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* Release SPI2 from reset state */
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  62              		.loc 1 188 0
  63 002e 8023     		mov	r3, #128
  64 0030 D801     		lsl	r0, r3, #7
  65 0032 0021     		mov	r1, #0
  66 0034 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  67              	.L1:
  68              		@ sp needed for prologue
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     }
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
  69              		.loc 1 191 0
  70 0038 08BD     		pop	{r3, pc}
  71              	.L5:
  72 003a C046     		.align	2
  73              	.L4:
  74 003c 00300140 		.word	1073819648
  75 0040 00380040 		.word	1073756160
  76              		.cfi_endproc
  77              	.LFE33:
  79              		.section	.text.SPI_StructInit,"ax",%progbits
  80              		.align	1
  81              		.global	SPI_StructInit
  82              		.code	16
  83              		.thumb_func
  85              	SPI_StructInit:
  86              	.LFB34:
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
  87              		.loc 1 199 0
  88              		.cfi_startproc
  89              	.LVL4:
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_Direction member */
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_Mode member */
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_DataSize member */
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
  90              		.loc 1 206 0
  91 0000 E023     		mov	r3, #224
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  92              		.loc 1 202 0
  93 0002 0021     		mov	r1, #0
  94              		.loc 1 206 0
  95 0004 DA00     		lsl	r2, r3, #3
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_CPOL member */
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_CPHA member */
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_NSS member */
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
  96              		.loc 1 218 0
  97 0006 0723     		mov	r3, #7
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  98              		.loc 1 202 0
  99 0008 0180     		strh	r1, [r0]
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 100              		.loc 1 204 0
 101 000a 4180     		strh	r1, [r0, #2]
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 102              		.loc 1 206 0
 103 000c 8280     		strh	r2, [r0, #4]
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 104              		.loc 1 208 0
 105 000e C180     		strh	r1, [r0, #6]
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 106              		.loc 1 210 0
 107 0010 0181     		strh	r1, [r0, #8]
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 108              		.loc 1 212 0
 109 0012 4181     		strh	r1, [r0, #10]
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 110              		.loc 1 214 0
 111 0014 8181     		strh	r1, [r0, #12]
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 112              		.loc 1 216 0
 113 0016 C181     		strh	r1, [r0, #14]
 114              		.loc 1 218 0
 115 0018 0382     		strh	r3, [r0, #16]
 116              		@ sp needed for prologue
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 117              		.loc 1 219 0
 118 001a 7047     		bx	lr
 119              		.cfi_endproc
 120              	.LFE34:
 122              		.section	.text.SPI_Init,"ax",%progbits
 123              		.align	1
 124              		.global	SPI_Init
 125              		.code	16
 126              		.thumb_func
 128              	SPI_Init:
 129              	.LFB35:
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         parameters in the SPI_InitStruct.
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 130              		.loc 1 231 0
 131              		.cfi_startproc
 132 0000 10B5     		push	{r4, lr}
 133              	.LCFI1:
 134              		.cfi_def_cfa_offset 8
 135              		.cfi_offset 4, -8
 136              		.cfi_offset 14, -4
 137              	.LVL5:
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t tmpreg = 0;
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* check the parameters */
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the SPI parameters */
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_DATA_SIZE(SPI_InitStruct->SPI_DataSize));
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /*---------------------------- SPIx CR1 Configuration ------------------------*/
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPIx CR1 value */
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->CR1;
 138              		.loc 1 250 0
 139 0002 0388     		ldrh	r3, [r0]
 140              	.LVL6:
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, CPOL and CPHA bits */
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 141              		.loc 1 252 0
 142 0004 C122     		mov	r2, #193
 143 0006 9201     		lsl	r2, r2, #6
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   master/slave mode, CPOL and CPHA */
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set SSM, SSI bit according to SPI_NSS values */
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_FirstBit |
 144              		.loc 1 261 0
 145 0008 CC89     		ldrh	r4, [r1, #14]
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 146              		.loc 1 252 0
 147 000a 1A40     		and	r2, r3
 148              	.LVL7:
 149              		.loc 1 261 0
 150 000c 0B88     		ldrh	r3, [r1]
 151              		@ sp needed for prologue
 152 000e 2343     		orr	r3, r4
 153 0010 CC88     		ldrh	r4, [r1, #6]
 154 0012 2343     		orr	r3, r4
 155 0014 0C89     		ldrh	r4, [r1, #8]
 156 0016 2343     		orr	r3, r4
 157 0018 4C89     		ldrh	r4, [r1, #10]
 158 001a 2343     		orr	r3, r4
 159 001c 8C89     		ldrh	r4, [r1, #12]
 160 001e 2343     		orr	r3, r4
 161 0020 1343     		orr	r3, r2
 162              	.LVL8:
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                       SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA |
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                       SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler);  
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx CR1 */
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 = tmpreg;
 163              		.loc 1 265 0
 164 0022 0380     		strh	r3, [r0]
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /*-------------------------Data Size Configuration -----------------------*/
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPIx CR2 value */
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->CR2;
 165              		.loc 1 268 0
 166 0024 8288     		ldrh	r2, [r0, #4]
 167              	.LVL9:
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear DS[3:0] bits */
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &=(uint16_t)~SPI_CR2_DS;
 168              		.loc 1 270 0
 169 0026 094C     		ldr	r4, .L8
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Configure SPIx: Data Size */
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)(SPI_InitStruct->SPI_DataSize);
 170              		.loc 1 272 0
 171 0028 8B88     		ldrh	r3, [r1, #4]
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &=(uint16_t)~SPI_CR2_DS;
 172              		.loc 1 270 0
 173 002a 1440     		and	r4, r2
 174              	.LVL10:
 175              		.loc 1 272 0
 176 002c 1C43     		orr	r4, r3
 177              	.LVL11:
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx CR2 */
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 = tmpreg;
 178              		.loc 1 274 0
 179 002e 8480     		strh	r4, [r0, #4]
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx CRCPOLY */
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 180              		.loc 1 278 0
 181 0030 0A8A     		ldrh	r2, [r1, #16]
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /*---------------------------- SPIx CR1 Configuration ------------------------*/
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPIx CR1 value */
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->CR1;
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear MSTR bit */
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK2;
 182              		.loc 1 284 0
 183 0032 0423     		mov	r3, #4
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 184              		.loc 1 278 0
 185 0034 0282     		strh	r2, [r0, #16]
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->CR1;
 186              		.loc 1 282 0
 187 0036 0488     		ldrh	r4, [r0]
 188              	.LVL12:
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Configure SPIx: master/slave mode */  
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set MSTR bit according to SPI_Mode */
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Mode);  
 189              		.loc 1 287 0
 190 0038 4988     		ldrh	r1, [r1, #2]
 191              	.LVL13:
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK2;
 192              		.loc 1 284 0
 193 003a 9C43     		bic	r4, r3
 194              	.LVL14:
 195              		.loc 1 287 0
 196 003c 0C43     		orr	r4, r1
 197              	.LVL15:
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx CR1 */
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 = tmpreg;  
 198              		.loc 1 289 0
 199 003e 0480     		strh	r4, [r0]
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 200              		.loc 1 292 0
 201 0040 828B     		ldrh	r2, [r0, #28]
 202 0042 034B     		ldr	r3, .L8+4
 203 0044 1340     		and	r3, r2
 204 0046 8383     		strh	r3, [r0, #28]
 205              	.LVL16:
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 206              		.loc 1 293 0
 207 0048 10BD     		pop	{r4, pc}
 208              	.L9:
 209 004a C046     		.align	2
 210              	.L8:
 211 004c FFF0FFFF 		.word	-3841
 212 0050 FFF7FFFF 		.word	-2049
 213              		.cfi_endproc
 214              	.LFE35:
 216              		.section	.text.I2S_StructInit,"ax",%progbits
 217              		.align	1
 218              		.global	I2S_StructInit
 219              		.code	16
 220              		.thumb_func
 222              	I2S_StructInit:
 223              	.LFB36:
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This mode is not supported for STM32F030 devices.  
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 224              		.loc 1 302 0
 225              		.cfi_startproc
 226              	.LVL17:
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_Mode member */
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 227              		.loc 1 305 0
 228 0000 0023     		mov	r3, #0
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_Standard member */
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 229              		.loc 1 317 0
 230 0002 0222     		mov	r2, #2
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 231              		.loc 1 305 0
 232 0004 0380     		strh	r3, [r0]
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 233              		.loc 1 308 0
 234 0006 4380     		strh	r3, [r0, #2]
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 235              		.loc 1 311 0
 236 0008 8380     		strh	r3, [r0, #4]
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 237              		.loc 1 314 0
 238 000a C380     		strh	r3, [r0, #6]
 239              		.loc 1 317 0
 240 000c 8260     		str	r2, [r0, #8]
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Initialize the I2S_CPOL member */
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 241              		.loc 1 320 0
 242 000e 8381     		strh	r3, [r0, #12]
 243              		@ sp needed for prologue
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 244              		.loc 1 321 0
 245 0010 7047     		bx	lr
 246              		.cfi_endproc
 247              	.LFE36:
 249              		.global	__aeabi_uidiv
 250              		.section	.text.I2S_Init,"ax",%progbits
 251              		.align	1
 252              		.global	I2S_Init
 253              		.code	16
 254              		.thumb_func
 256              	I2S_Init:
 257              	.LFB37:
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         parameters in the I2S_InitStruct.
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This mode is not supported for STM32F030 devices.  
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 to select the SPI peripheral (configured in I2S mode).  
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         configured in I2S mode.
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function calculates the optimal prescaler needed to obtain the most 
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 258              		.loc 1 338 0
 259              		.cfi_startproc
 260 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 261              	.LCFI2:
 262              		.cfi_def_cfa_offset 20
 263              		.cfi_offset 4, -20
 264              		.cfi_offset 5, -16
 265              		.cfi_offset 6, -12
 266              		.cfi_offset 7, -8
 267              		.cfi_offset 14, -4
 268              	.LVL18:
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint32_t tmp = 0;
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   RCC_ClocksTypeDef RCC_Clocks;
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint32_t sourceclock = 0;
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the I2S parameters */
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_1_PERIPH(SPIx));
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 269              		.loc 1 355 0
 270 0002 828B     		ldrh	r2, [r0, #28]
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 271              		.loc 1 338 0
 272 0004 051C     		mov	r5, r0
 273              		.loc 1 355 0
 274 0006 2448     		ldr	r0, .L21
 275              	.LVL19:
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SPR = 0x0002;
 276              		.loc 1 356 0
 277 0008 0223     		mov	r3, #2
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 278              		.loc 1 355 0
 279 000a 1040     		and	r0, r2
 280 000c A883     		strh	r0, [r5, #28]
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the I2SCFGR register value */
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 281              		.loc 1 362 0
 282 000e 8868     		ldr	r0, [r1, #8]
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SPR = 0x0002;
 283              		.loc 1 356 0
 284 0010 2B84     		strh	r3, [r5, #32]
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 285              		.loc 1 338 0
 286 0012 8BB0     		sub	sp, sp, #44
 287              	.LCFI3:
 288              		.cfi_def_cfa_offset 64
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 289              		.loc 1 338 0
 290 0014 0C1C     		mov	r4, r1
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 291              		.loc 1 359 0
 292 0016 AF8B     		ldrh	r7, [r5, #28]
 293              	.LVL20:
 294              		.loc 1 362 0
 295 0018 9842     		cmp	r0, r3
 296 001a 23D0     		beq	.L17
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sodd = (uint16_t)0;
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sdiv = (uint16_t)2;   
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Check the frame length (For the Prescaler computing) */
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 297              		.loc 1 371 0
 298 001c 8E88     		ldrh	r6, [r1, #4]
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     {
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* Packet length is 16 bits */
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       packetlength = 1;
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     }
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     else
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     {
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* Packet length is 32 bits */
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       packetlength = 2;
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     }
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* I2S Clock source is System clock: Get System Clock frequency */
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     RCC_GetClocksFreq(&RCC_Clocks);      
 299              		.loc 1 383 0
 300 001e 6846     		mov	r0, sp
 301 0020 FFF7FEFF 		bl	RCC_GetClocksFreq
 302              	.LVL21:
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Get the source clock value: based on System Clock value */
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state with a floating point */
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 303              		.loc 1 389 0
 304 0024 E188     		ldrh	r1, [r4, #6]
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       packetlength = 1;
 305              		.loc 1 374 0
 306 0026 731E     		sub	r3, r6, #1
 307 0028 9E41     		sbc	r6, r6, r3
 308              		.loc 1 389 0
 309 002a 8022     		mov	r2, #128
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       packetlength = 1;
 310              		.loc 1 374 0
 311 002c 0136     		add	r6, r6, #1
 312              	.LVL22:
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 313              		.loc 1 386 0
 314 002e 0098     		ldr	r0, [sp]
 315              	.LVL23:
 316              		.loc 1 389 0
 317 0030 9300     		lsl	r3, r2, #2
 318 0032 9942     		cmp	r1, r3
 319 0034 01D1     		bne	.L14
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     {
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* MCLK output is enabled */
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 320              		.loc 1 392 0
 321 0036 000A     		lsr	r0, r0, #8
 322 0038 02E0     		b	.L20
 323              	.L14:
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     }
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     else
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     {
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       /* MCLK output is disabled */
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq
 324              		.loc 1 397 0
 325 003a 7101     		lsl	r1, r6, #5
 326 003c FFF7FEFF 		bl	__aeabi_uidiv
 327              	.LVL24:
 328              	.L20:
 329 0040 0A22     		mov	r2, #10
 330 0042 5043     		mul	r0, r2
 331 0044 A168     		ldr	r1, [r4, #8]
 332 0046 FFF7FEFF 		bl	__aeabi_uidiv
 333 004a 0530     		add	r0, r0, #5
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     }
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Remove the floating point */
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     tmp = tmp / 10;
 334              		.loc 1 401 0
 335 004c 0A21     		mov	r1, #10
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****       tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq
 336              		.loc 1 397 0
 337 004e 80B2     		uxth	r0, r0
 338              	.LVL25:
 339              		.loc 1 401 0
 340 0050 FFF7FEFF 		bl	__aeabi_uidiv
 341              	.LVL26:
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Check the parity of the divider */
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 342              		.loc 1 404 0
 343 0054 0121     		mov	r1, #1
 344 0056 0140     		and	r1, r0
 345              	.LVL27:
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Compute the i2sdiv prescaler */
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 346              		.loc 1 407 0
 347 0058 431A     		sub	r3, r0, r1
 348 005a 5808     		lsr	r0, r3, #1
 349              	.LVL28:
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 350              		.loc 1 410 0
 351 005c 0E02     		lsl	r6, r1, #8
 352              	.LVL29:
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 353              		.loc 1 407 0
 354 005e 80B2     		uxth	r0, r0
 355              	.LVL30:
 356              		.loc 1 410 0
 357 0060 B3B2     		uxth	r3, r6
 358              	.LVL31:
 359 0062 00E0     		b	.L12
 360              	.LVL32:
 361              	.L17:
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sodd = (uint16_t)0;
 362              		.loc 1 364 0
 363 0064 0023     		mov	r3, #0
 364              	.LVL33:
 365              	.L12:
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 366              		.loc 1 414 0
 367 0066 811E     		sub	r1, r0, #2
 368 0068 8EB2     		uxth	r6, r1
 369 006a FD2E     		cmp	r6, #253
 370 006c 01D9     		bls	.L16
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Set the default values */
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sdiv = 2;
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sodd = 0;
 371              		.loc 1 418 0
 372 006e 0023     		mov	r3, #0
 373              	.LVL34:
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     i2sdiv = 2;
 374              		.loc 1 417 0
 375 0070 0220     		mov	r0, #2
 376              	.LVL35:
 377              	.L16:
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 378              		.loc 1 422 0
 379 0072 1843     		orr	r0, r3
 380              	.LVL36:
 381 0074 E388     		ldrh	r3, [r4, #6]
 382              	.LVL37:
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 383              		.loc 1 426 0
 384 0076 8026     		mov	r6, #128
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 385              		.loc 1 422 0
 386 0078 1843     		orr	r0, r3
 387 007a 2884     		strh	r0, [r5, #32]
 388              		.loc 1 426 0
 389 007c 2188     		ldrh	r1, [r4]
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 390              		.loc 1 425 0
 391 007e 6388     		ldrh	r3, [r4, #2]
 392              		.loc 1 426 0
 393 0080 0F43     		orr	r7, r1
 394              	.LVL38:
 395 0082 3201     		lsl	r2, r6, #4
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 396              		.loc 1 425 0
 397 0084 A088     		ldrh	r0, [r4, #4]
 398              		.loc 1 426 0
 399 0086 1743     		orr	r7, r2
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= (uint16_t)(SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 400              		.loc 1 425 0
 401 0088 A489     		ldrh	r4, [r4, #12]
 402              	.LVL39:
 403 008a 1F43     		orr	r7, r3
 404 008c 0743     		orr	r7, r0
 405 008e 2743     		orr	r7, r4
 406              	.LVL40:
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Write to SPIx I2SCFGR */
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 407              		.loc 1 430 0
 408 0090 AF83     		strh	r7, [r5, #28]
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 409              		.loc 1 431 0
 410 0092 0BB0     		add	sp, sp, #44
 411              		@ sp needed for prologue
 412              	.LVL41:
 413              	.LVL42:
 414 0094 F0BD     		pop	{r4, r5, r6, r7, pc}
 415              	.L22:
 416 0096 C046     		.align	2
 417              	.L21:
 418 0098 40F0FFFF 		.word	-4032
 419              		.cfi_endproc
 420              	.LFE37:
 422              		.section	.text.SPI_Cmd,"ax",%progbits
 423              		.align	1
 424              		.global	SPI_Cmd
 425              		.code	16
 426              		.thumb_func
 428              	SPI_Cmd:
 429              	.LFB38:
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 430              		.loc 1 442 0
 431              		.cfi_startproc
 432 0000 00B5     		push	{lr}
 433              	.LCFI4:
 434              		.cfi_def_cfa_offset 4
 435              		.cfi_offset 14, -4
 436              	.LVL43:
 437 0002 4023     		mov	r3, #64
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI peripheral */
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 438              		.loc 1 450 0
 439 0004 0288     		ldrh	r2, [r0]
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 440              		.loc 1 447 0
 441 0006 0029     		cmp	r1, #0
 442 0008 01D0     		beq	.L24
 443              		.loc 1 450 0
 444 000a 1343     		orr	r3, r2
 445 000c 01E0     		b	.L26
 446              	.L24:
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI peripheral */
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 447              		.loc 1 455 0
 448 000e 9A43     		bic	r2, r3
 449 0010 131C     		mov	r3, r2
 450              	.L26:
 451 0012 0380     		strh	r3, [r0]
 452              		@ sp needed for prologue
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 453              		.loc 1 457 0
 454 0014 00BD     		pop	{pc}
 455              		.cfi_endproc
 456              	.LFE38:
 458              		.section	.text.SPI_TIModeCmd,"ax",%progbits
 459              		.align	1
 460              		.global	SPI_TIModeCmd
 461              		.code	16
 462              		.thumb_func
 464              	SPI_TIModeCmd:
 465              	.LFB39:
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the TI Mode.
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *   
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called. 
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         are not taken into consideration and are configured by hardware 
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         respectively to the TI mode requirements.
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *    
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 466              		.loc 1 475 0
 467              		.cfi_startproc
 468 0000 00B5     		push	{lr}
 469              	.LCFI5:
 470              		.cfi_def_cfa_offset 4
 471              		.cfi_offset 14, -4
 472              	.LVL44:
 473 0002 1023     		mov	r3, #16
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 474              		.loc 1 483 0
 475 0004 8288     		ldrh	r2, [r0, #4]
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 476              		.loc 1 480 0
 477 0006 0029     		cmp	r1, #0
 478 0008 01D0     		beq	.L28
 479              		.loc 1 483 0
 480 000a 1343     		orr	r3, r2
 481 000c 01E0     		b	.L30
 482              	.L28:
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRF);
 483              		.loc 1 488 0
 484 000e 9A43     		bic	r2, r3
 485 0010 131C     		mov	r3, r2
 486              	.L30:
 487 0012 8380     		strh	r3, [r0, #4]
 488              		@ sp needed for prologue
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 489              		.loc 1 490 0
 490 0014 00BD     		pop	{pc}
 491              		.cfi_endproc
 492              	.LFE39:
 494              		.section	.text.I2S_Cmd,"ax",%progbits
 495              		.align	1
 496              		.global	I2S_Cmd
 497              		.code	16
 498              		.thumb_func
 500              	I2S_Cmd:
 501              	.LFB40:
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This mode is not supported for STM32F030 devices.    
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 to select the SPI peripheral.
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 502              		.loc 1 501 0
 503              		.cfi_startproc
 504 0000 00B5     		push	{lr}
 505              	.LCFI6:
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 14, -4
 508              	.LVL45:
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_1_PERIPH(SPIx));
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI peripheral in I2S mode */
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 509              		.loc 1 508 0
 510 0002 828B     		ldrh	r2, [r0, #28]
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 511              		.loc 1 505 0
 512 0004 0029     		cmp	r1, #0
 513 0006 03D0     		beq	.L32
 514              		.loc 1 508 0
 515 0008 8023     		mov	r3, #128
 516 000a DB00     		lsl	r3, r3, #3
 517 000c 1343     		orr	r3, r2
 518 000e 01E0     		b	.L34
 519              	.L32:
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 520              		.loc 1 513 0
 521 0010 014B     		ldr	r3, .L35
 522 0012 1340     		and	r3, r2
 523              	.L34:
 524 0014 8383     		strh	r3, [r0, #28]
 525              		@ sp needed for prologue
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 526              		.loc 1 515 0
 527 0016 00BD     		pop	{pc}
 528              	.L36:
 529              		.align	2
 530              	.L35:
 531 0018 FFFBFFFF 		.word	-1025
 532              		.cfi_endproc
 533              	.LFE40:
 535              		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 536              		.align	1
 537              		.global	SPI_DataSizeConfig
 538              		.code	16
 539              		.thumb_func
 541              	SPI_DataSizeConfig:
 542              	.LFB41:
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2  to select the SPI peripheral.
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         For the SPIx peripheral this parameter can be one of the following values:
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_4b: Set data size to 4 bits
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_5b: Set data size to 5 bits
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_6b: Set data size to 6 bits
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_7b: Set data size to 7 bits
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data size to 8 bits
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_9b: Set data size to 9 bits
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_10b: Set data size to 10 bits
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_11b: Set data size to 11 bits
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_12b: Set data size to 12 bits
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_13b: Set data size to 13 bits
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_14b: Set data size to 14 bits
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_15b: Set data size to 15 bits
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data size to 16 bits
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 543              		.loc 1 539 0
 544              		.cfi_startproc
 545              	.LVL46:
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t tmpreg = 0;
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_DATA_SIZE(SPI_DataSize));
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Read the CR2 register */
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg = SPIx->CR2;
 546              		.loc 1 546 0
 547 0000 8288     		ldrh	r2, [r0, #4]
 548              	.LVL47:
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear DS[3:0] bits */
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg &= (uint16_t)~SPI_CR2_DS;
 549              		.loc 1 548 0
 550 0002 024B     		ldr	r3, .L38
 551              		@ sp needed for prologue
 552 0004 1340     		and	r3, r2
 553              	.LVL48:
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set new DS[3:0] bits value */
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   tmpreg |= SPI_DataSize;
 554              		.loc 1 550 0
 555 0006 1943     		orr	r1, r3
 556              	.LVL49:
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 = tmpreg;
 557              		.loc 1 551 0
 558 0008 8180     		strh	r1, [r0, #4]
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 559              		.loc 1 552 0
 560 000a 7047     		bx	lr
 561              	.L39:
 562              		.align	2
 563              	.L38:
 564 000c FFF0FFFF 		.word	-3841
 565              		.cfi_endproc
 566              	.LFE41:
 568              		.section	.text.SPI_RxFIFOThresholdConfig,"ax",%progbits
 569              		.align	1
 570              		.global	SPI_RxFIFOThresholdConfig
 571              		.code	16
 572              		.thumb_func
 574              	SPI_RxFIFOThresholdConfig:
 575              	.LFB42:
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Configures the FIFO reception threshold for the selected SPI.
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_RxFIFOThreshold: specifies the FIFO reception threshold.
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_RxFIFOThreshold_HF: RXNE event is generated if the FIFO 
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                         level is greater or equal to 1/2. 
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_RxFIFOThreshold_QF: RXNE event is generated if the FIFO 
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                         level is greater or equal to 1/4. 
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_RxFIFOThresholdConfig(SPI_TypeDef* SPIx, uint16_t SPI_RxFIFOThreshold)
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 576              		.loc 1 567 0
 577              		.cfi_startproc
 578              	.LVL50:
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_RX_FIFO_THRESHOLD(SPI_RxFIFOThreshold));
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear FRXTH bit */
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_FRXTH);
 579              		.loc 1 573 0
 580 0000 8288     		ldrh	r2, [r0, #4]
 581 0002 034B     		ldr	r3, .L41
 582              		@ sp needed for prologue
 583 0004 1340     		and	r3, r2
 584 0006 8380     		strh	r3, [r0, #4]
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set new FRXTH bit value */
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 |= SPI_RxFIFOThreshold;
 585              		.loc 1 576 0
 586 0008 8388     		ldrh	r3, [r0, #4]
 587 000a 1943     		orr	r1, r3
 588              	.LVL51:
 589 000c 8180     		strh	r1, [r0, #4]
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 590              		.loc 1 577 0
 591 000e 7047     		bx	lr
 592              	.L42:
 593              		.align	2
 594              	.L41:
 595 0010 FFEFFFFF 		.word	-4097
 596              		.cfi_endproc
 597              	.LFE42:
 599              		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 600              		.align	1
 601              		.global	SPI_BiDirectionalLineConfig
 602              		.code	16
 603              		.thumb_func
 605              	SPI_BiDirectionalLineConfig:
 606              	.LFB43:
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2  to select the SPI peripheral.
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 607              		.loc 1 590 0
 608              		.cfi_startproc
 609 0000 00B5     		push	{lr}
 610              	.LCFI7:
 611              		.cfi_def_cfa_offset 4
 612              		.cfi_offset 14, -4
 613              	.LVL52:
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 614              		.loc 1 594 0
 615 0002 8022     		mov	r2, #128
 616 0004 D301     		lsl	r3, r2, #7
 617 0006 9942     		cmp	r1, r3
 618 0008 03D1     		bne	.L44
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Set the Tx only mode */
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 619              		.loc 1 597 0
 620 000a 0388     		ldrh	r3, [r0]
 621 000c 1943     		orr	r1, r3
 622              	.LVL53:
 623 000e 0180     		strh	r1, [r0]
 624 0010 03E0     		b	.L43
 625              	.LVL54:
 626              	.L44:
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Set the Rx only mode */
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 627              		.loc 1 602 0
 628 0012 0288     		ldrh	r2, [r0]
 629 0014 0149     		ldr	r1, .L46
 630              	.LVL55:
 631 0016 1140     		and	r1, r2
 632 0018 0180     		strh	r1, [r0]
 633              	.L43:
 634              		@ sp needed for prologue
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 635              		.loc 1 604 0
 636 001a 00BD     		pop	{pc}
 637              	.L47:
 638              		.align	2
 639              	.L46:
 640 001c FFBFFFFF 		.word	-16385
 641              		.cfi_endproc
 642              	.LFE43:
 644              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 645              		.align	1
 646              		.global	SPI_NSSInternalSoftwareConfig
 647              		.code	16
 648              		.thumb_func
 650              	SPI_NSSInternalSoftwareConfig:
 651              	.LFB44:
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called.  
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.  
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 652              		.loc 1 619 0
 653              		.cfi_startproc
 654 0000 00B5     		push	{lr}
 655              	.LCFI8:
 656              		.cfi_def_cfa_offset 4
 657              		.cfi_offset 14, -4
 658              	.LVL56:
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 659              		.loc 1 624 0
 660 0002 064B     		ldr	r3, .L52
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Set NSS pin internally by software */
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 661              		.loc 1 627 0
 662 0004 0288     		ldrh	r2, [r0]
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 663              		.loc 1 624 0
 664 0006 9942     		cmp	r1, r3
 665 0008 03D0     		beq	.L49
 666              		.loc 1 627 0
 667 000a 8021     		mov	r1, #128
 668              	.LVL57:
 669 000c 4B00     		lsl	r3, r1, #1
 670 000e 1343     		orr	r3, r2
 671 0010 01E0     		b	.L51
 672              	.LVL58:
 673              	.L49:
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Reset NSS pin internally by software */
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 674              		.loc 1 632 0
 675 0012 034B     		ldr	r3, .L52+4
 676 0014 1340     		and	r3, r2
 677              	.LVL59:
 678              	.L51:
 679 0016 0380     		strh	r3, [r0]
 680              		@ sp needed for prologue
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 681              		.loc 1 634 0
 682 0018 00BD     		pop	{pc}
 683              	.L53:
 684 001a C046     		.align	2
 685              	.L52:
 686 001c FFFE0000 		.word	65279
 687 0020 FFFEFFFF 		.word	-257
 688              		.cfi_endproc
 689              	.LFE44:
 691              		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 692              		.align	1
 693              		.global	SPI_SSOutputCmd
 694              		.code	16
 695              		.thumb_func
 697              	SPI_SSOutputCmd:
 698              	.LFB45:
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called and the NSS hardware management mode is selected. 
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.  
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 699              		.loc 1 647 0
 700              		.cfi_startproc
 701 0000 00B5     		push	{lr}
 702              	.LCFI9:
 703              		.cfi_def_cfa_offset 4
 704              		.cfi_offset 14, -4
 705              	.LVL60:
 706 0002 0423     		mov	r3, #4
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI SS output */
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 |= SPI_CR2_SSOE;
 707              		.loc 1 654 0
 708 0004 8288     		ldrh	r2, [r0, #4]
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 709              		.loc 1 651 0
 710 0006 0029     		cmp	r1, #0
 711 0008 01D0     		beq	.L55
 712              		.loc 1 654 0
 713 000a 1343     		orr	r3, r2
 714 000c 01E0     		b	.L57
 715              	.L55:
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI SS output */
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 716              		.loc 1 659 0
 717 000e 9A43     		bic	r2, r3
 718 0010 131C     		mov	r3, r2
 719              	.L57:
 720 0012 8380     		strh	r3, [r0, #4]
 721              		@ sp needed for prologue
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 722              		.loc 1 661 0
 723 0014 00BD     		pop	{pc}
 724              		.cfi_endproc
 725              	.LFE45:
 727              		.section	.text.SPI_NSSPulseModeCmd,"ax",%progbits
 728              		.align	1
 729              		.global	SPI_NSSPulseModeCmd
 730              		.code	16
 731              		.thumb_func
 733              	SPI_NSSPulseModeCmd:
 734              	.LFB46:
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the NSS pulse management mode.
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called. 
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   When TI mode is selected, the control bits NSSP is not taken into 
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         consideration and are configured by hardware respectively to the 
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         TI mode requirements. 
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the NSS pulse management mode.
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_NSSPulseModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 735              		.loc 1 677 0
 736              		.cfi_startproc
 737 0000 00B5     		push	{lr}
 738              	.LCFI10:
 739              		.cfi_def_cfa_offset 4
 740              		.cfi_offset 14, -4
 741              	.LVL61:
 742 0002 0823     		mov	r3, #8
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the NSS pulse management mode */
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 |= SPI_CR2_NSSP;
 743              		.loc 1 685 0
 744 0004 8288     		ldrh	r2, [r0, #4]
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 745              		.loc 1 682 0
 746 0006 0029     		cmp	r1, #0
 747 0008 01D0     		beq	.L59
 748              		.loc 1 685 0
 749 000a 1343     		orr	r3, r2
 750 000c 01E0     		b	.L61
 751              	.L59:
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the NSS pulse management mode */
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_NSSP);    
 752              		.loc 1 690 0
 753 000e 9A43     		bic	r2, r3
 754 0010 131C     		mov	r3, r2
 755              	.L61:
 756 0012 8380     		strh	r3, [r0, #4]
 757              		@ sp needed for prologue
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 758              		.loc 1 692 0
 759 0014 00BD     		pop	{pc}
 760              		.cfi_endproc
 761              	.LFE46:
 763              		.section	.text.SPI_SendData8,"ax",%progbits
 764              		.align	1
 765              		.global	SPI_SendData8
 766              		.code	16
 767              		.thumb_func
 769              	SPI_SendData8:
 770              	.LFB47:
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @}
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *  @brief   Data transfers functions
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @verbatim
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                     ##### Data transfers functions #####
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides a set of functions allowing to manage the SPI or I2S
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          data transfers.
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In reception, data are received and then stored into an internal Rx buffer while 
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          In transmission, data are first stored into an internal Tx buffer before being 
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          transmitted.
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] The read access of the SPI_DR register can be done using 
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          SPI_ReceiveData8() (when data size is equal or inferior than 8bits) and.
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          SPI_I2S_ReceiveData16() (when data size is superior than 8bits)function
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          can be done using SPI_SendData8() (when data size is equal or inferior than 8bits)
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and SPI_I2S_SendData16() (when data size is superior than 8bits) function 
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and stores the written data into Tx buffer.
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @endverbatim
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode to select the SPI peripheral.
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  Data: Data to be transmitted.
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_SendData8(SPI_TypeDef* SPIx, uint8_t Data)
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 771              		.loc 1 732 0
 772              		.cfi_startproc
 773              	.LVL62:
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint32_t spixbase = 0x00;
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   spixbase = (uint32_t)SPIx; 
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   spixbase += 0x0C;
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *(__IO uint8_t *) spixbase = Data;
 774              		.loc 1 741 0
 775 0000 0173     		strb	r1, [r0, #12]
 776              		@ sp needed for prologue
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 777              		.loc 1 742 0
 778 0002 7047     		bx	lr
 779              		.cfi_endproc
 780              	.LFE47:
 782              		.section	.text.SPI_I2S_SendData16,"ax",%progbits
 783              		.align	1
 784              		.global	SPI_I2S_SendData16
 785              		.code	16
 786              		.thumb_func
 788              	SPI_I2S_SendData16:
 789              	.LFB48:
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select 
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral. 
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  Data: Data to be transmitted.
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_I2S_SendData16(SPI_TypeDef* SPIx, uint16_t Data)
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 790              		.loc 1 753 0
 791              		.cfi_startproc
 792              	.LVL63:
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->DR = (uint16_t)Data;
 793              		.loc 1 757 0
 794 0000 8181     		strh	r1, [r0, #12]
 795              		@ sp needed for prologue
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 796              		.loc 1 758 0
 797 0002 7047     		bx	lr
 798              		.cfi_endproc
 799              	.LFE48:
 801              		.section	.text.SPI_ReceiveData8,"ax",%progbits
 802              		.align	1
 803              		.global	SPI_ReceiveData8
 804              		.code	16
 805              		.thumb_func
 807              	SPI_ReceiveData8:
 808              	.LFB49:
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode to select the SPI peripheral. 
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The value of the received data.
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint8_t SPI_ReceiveData8(SPI_TypeDef* SPIx)
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 809              		.loc 1 767 0
 810              		.cfi_startproc
 811              	.LVL64:
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint32_t spixbase = 0x00;
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   spixbase = (uint32_t)SPIx; 
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   spixbase += 0x0C;
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return *(__IO uint8_t *) spixbase;
 812              		.loc 1 773 0
 813 0000 007B     		ldrb	r0, [r0, #12]
 814              	.LVL65:
 815              		@ sp needed for prologue
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 816              		.loc 1 774 0
 817 0002 7047     		bx	lr
 818              		.cfi_endproc
 819              	.LFE49:
 821              		.section	.text.SPI_I2S_ReceiveData16,"ax",%progbits
 822              		.align	1
 823              		.global	SPI_I2S_ReceiveData16
 824              		.code	16
 825              		.thumb_func
 827              	SPI_I2S_ReceiveData16:
 828              	.LFB50:
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx peripheral. 
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral.  
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The value of the received data.
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint16_t SPI_I2S_ReceiveData16(SPI_TypeDef* SPIx)
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 829              		.loc 1 784 0
 830              		.cfi_startproc
 831              	.LVL66:
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return SPIx->DR;
 832              		.loc 1 785 0
 833 0000 8089     		ldrh	r0, [r0, #12]
 834              	.LVL67:
 835              		@ sp needed for prologue
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 836              		.loc 1 786 0
 837 0002 7047     		bx	lr
 838              		.cfi_endproc
 839              	.LFE50:
 841              		.section	.text.SPI_CRCLengthConfig,"ax",%progbits
 842              		.align	1
 843              		.global	SPI_CRCLengthConfig
 844              		.code	16
 845              		.thumb_func
 847              	SPI_CRCLengthConfig:
 848              	.LFB51:
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @}
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @verbatim   
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                 ##### Hardware CRC Calculation functions #####
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides a set of functions allowing to manage the SPI CRC hardware 
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          calculation.SPI communication using CRC is possible through the following procedure:
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (#) Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler,
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              function.
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (#) Enable the CRC calculation using the SPI_CalculateCRC() function.
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (#) Enable the SPI using the SPI_Cmd() function
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (#) Before writing the last data to the TX buffer, set the CRCNext bit using the 
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              SPI_TransmitCRC() function to indicate that after transmission of the last 
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              data, the CRC should be transmitted.
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (#) After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              value. 
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     -@-
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) It is advised to don't read the calculate CRC values during the communication.
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) When the SPI is in slave mode, be careful to enable CRC calculation only
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        when the clock is stable, that is, when the clock is in the steady state. 
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        the value of the SPE bit.
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) With high bitrate frequencies, be careful when transmitting the CRC.
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        As the number of used CPU cycles has to be as low as possible in the CRC 
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        transfer phase, it is forbidden to call software functions in the CRC 
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        transmission sequence to avoid errors in the last data and CRC reception. 
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        of the last data.
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        degradation of the SPI speed performance due to CPU accesses impacting the 
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        SPI bandwidth.
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) When the STM32F0xx are configured as slaves and the NSS hardware mode is 
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        used, the NSS pin needs to be kept low between the data phase and the CRC 
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        phase.
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) When the SPI is configured in slave mode with the CRC feature enabled, CRC
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        calculation takes place even if a high level is applied on the NSS pin. 
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        This may happen for example in case of a multislave environment where the 
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        communication master addresses slaves alternately.
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (+@) Between a slave deselection (high level on NSS) and a new slave selection
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (low level on NSS), the CRC value should be cleared on both master and slave
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        sides in order to resynchronize the master and slave for their respective 
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        CRC calculation.
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     -@- To clear the CRC, follow the procedure below:
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (#@) Disable SPI using the SPI_Cmd() function
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (#@) Disable the CRC calculation using the SPI_CalculateCRC() function.
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (#@) Enable the CRC calculation using the SPI_CalculateCRC() function.
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****        (#@) Enable SPI using the SPI_Cmd() function.
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @endverbatim
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Configures the CRC calculation length for the selected SPI.
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called.  
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.  
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_CRCLength: specifies the SPI CRC calculation length.
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_CRCLength_8b: Set CRC Calculation to 8 bits
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_CRCLength_16b: Set CRC Calculation to 16 bits
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_CRCLengthConfig(SPI_TypeDef* SPIx, uint16_t SPI_CRCLength)
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 849              		.loc 1 866 0
 850              		.cfi_startproc
 851              	.LVL68:
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CRC_LENGTH(SPI_CRCLength));
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear CRCL bit */
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCL);
 852              		.loc 1 872 0
 853 0000 0288     		ldrh	r2, [r0]
 854 0002 034B     		ldr	r3, .L67
 855              		@ sp needed for prologue
 856 0004 1340     		and	r3, r2
 857 0006 0380     		strh	r3, [r0]
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set new CRCL bit value */
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 |= SPI_CRCLength;
 858              		.loc 1 875 0
 859 0008 0388     		ldrh	r3, [r0]
 860 000a 1943     		orr	r1, r3
 861              	.LVL69:
 862 000c 0180     		strh	r1, [r0]
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 863              		.loc 1 876 0
 864 000e 7047     		bx	lr
 865              	.L68:
 866              		.align	2
 867              	.L67:
 868 0010 FFF7FFFF 		.word	-2049
 869              		.cfi_endproc
 870              	.LFE51:
 872              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 873              		.align	1
 874              		.global	SPI_CalculateCRC
 875              		.code	16
 876              		.thumb_func
 878              	SPI_CalculateCRC:
 879              	.LFB52:
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         been called.   
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 880              		.loc 1 889 0
 881              		.cfi_startproc
 882 0000 00B5     		push	{lr}
 883              	.LCFI11:
 884              		.cfi_def_cfa_offset 4
 885              		.cfi_offset 14, -4
 886              	.LVL70:
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 887              		.loc 1 897 0
 888 0002 0288     		ldrh	r2, [r0]
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 889              		.loc 1 894 0
 890 0004 0029     		cmp	r1, #0
 891 0006 03D0     		beq	.L70
 892              		.loc 1 897 0
 893 0008 8023     		mov	r3, #128
 894 000a 9B01     		lsl	r3, r3, #6
 895 000c 1343     		orr	r3, r2
 896 000e 01E0     		b	.L72
 897              	.L70:
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 898              		.loc 1 902 0
 899 0010 014B     		ldr	r3, .L73
 900 0012 1340     		and	r3, r2
 901              	.L72:
 902 0014 0380     		strh	r3, [r0]
 903              		@ sp needed for prologue
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 904              		.loc 1 904 0
 905 0016 00BD     		pop	{pc}
 906              	.L74:
 907              		.align	2
 908              	.L73:
 909 0018 FFDFFFFF 		.word	-8193
 910              		.cfi_endproc
 911              	.LFE52:
 913              		.section	.text.SPI_TransmitCRC,"ax",%progbits
 914              		.align	1
 915              		.global	SPI_TransmitCRC
 916              		.code	16
 917              		.thumb_func
 919              	SPI_TransmitCRC:
 920              	.LFB53:
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 921              		.loc 1 913 0
 922              		.cfi_startproc
 923              	.LVL71:
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 924              		.loc 1 918 0
 925 0000 0288     		ldrh	r2, [r0]
 926 0002 8021     		mov	r1, #128
 927 0004 4B01     		lsl	r3, r1, #5
 928 0006 1343     		orr	r3, r2
 929 0008 0380     		strh	r3, [r0]
 930              		@ sp needed for prologue
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 931              		.loc 1 919 0
 932 000a 7047     		bx	lr
 933              		.cfi_endproc
 934              	.LFE53:
 936              		.section	.text.SPI_GetCRC,"ax",%progbits
 937              		.align	1
 938              		.global	SPI_GetCRC
 939              		.code	16
 940              		.thumb_func
 942              	SPI_GetCRC:
 943              	.LFB54:
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The selected CRC register value..
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 944              		.loc 1 932 0
 945              		.cfi_startproc
 946 0000 00B5     		push	{lr}
 947              	.LCFI12:
 948              		.cfi_def_cfa_offset 4
 949              		.cfi_offset 14, -4
 950              	.LVL72:
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t crcreg = 0;
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 951              		.loc 1 938 0
 952 0002 0129     		cmp	r1, #1
 953 0004 01D0     		beq	.L77
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Get the Tx CRC register */
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     crcreg = SPIx->TXCRCR;
 954              		.loc 1 941 0
 955 0006 008B     		ldrh	r0, [r0, #24]
 956              	.LVL73:
 957 0008 00E0     		b	.L78
 958              	.LVL74:
 959              	.L77:
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Get the Rx CRC register */
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     crcreg = SPIx->RXCRCR;
 960              		.loc 1 946 0
 961 000a 808A     		ldrh	r0, [r0, #20]
 962              	.LVL75:
 963              	.L78:
 964              		@ sp needed for prologue
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Return the selected CRC register */
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return crcreg;
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 965              		.loc 1 950 0
 966 000c 00BD     		pop	{pc}
 967              		.cfi_endproc
 968              	.LFE54:
 970              		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 971              		.align	1
 972              		.global	SPI_GetCRCPolynomial
 973              		.code	16
 974              		.thumb_func
 976              	SPI_GetCRCPolynomial:
 977              	.LFB55:
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices. 
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The CRC Polynomial register value.
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 978              		.loc 1 959 0
 979              		.cfi_startproc
 980              	.LVL76:
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Return the CRC polynomial register */
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return SPIx->CRCPR;
 981              		.loc 1 964 0
 982 0000 008A     		ldrh	r0, [r0, #16]
 983              	.LVL77:
 984              		@ sp needed for prologue
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 985              		.loc 1 965 0
 986 0002 7047     		bx	lr
 987              		.cfi_endproc
 988              	.LFE55:
 990              		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 991              		.align	1
 992              		.global	SPI_I2S_DMACmd
 993              		.code	16
 994              		.thumb_func
 996              	SPI_I2S_DMACmd:
 997              	.LFB56:
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @}
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *  @brief   DMA transfers management functions
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @verbatim   
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****                 ##### DMA transfers management functions #####
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides two functions that can be used only in DMA mode.
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @endverbatim
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select 
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral.
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         I2S mode is not supported for STM32F030 devices.  
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be any combination of the following values:
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 998              		.loc 1 999 0
 999              		.cfi_startproc
 1000 0000 00B5     		push	{lr}
 1001              	.LCFI13:
 1002              		.cfi_def_cfa_offset 4
 1003              		.cfi_offset 14, -4
 1004              	.LVL78:
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_I2S_DMA_REQ(SPI_I2S_DMAReq));
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI DMA requests */
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1005              		.loc 1 1008 0
 1006 0002 8388     		ldrh	r3, [r0, #4]
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 1007              		.loc 1 1005 0
 1008 0004 002A     		cmp	r2, #0
 1009 0006 02D0     		beq	.L81
 1010              		.loc 1 1008 0
 1011 0008 1943     		orr	r1, r3
 1012              	.LVL79:
 1013 000a 8180     		strh	r1, [r0, #4]
 1014 000c 01E0     		b	.L80
 1015              	.LVL80:
 1016              	.L81:
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI DMA requests */
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1017              		.loc 1 1013 0
 1018 000e 8B43     		bic	r3, r1
 1019 0010 8380     		strh	r3, [r0, #4]
 1020              	.LVL81:
 1021              	.L80:
 1022              		@ sp needed for prologue
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1023              		.loc 1 1015 0
 1024 0012 00BD     		pop	{pc}
 1025              		.cfi_endproc
 1026              	.LFE56:
 1028              		.section	.text.SPI_LastDMATransferCmd,"ax",%progbits
 1029              		.align	1
 1030              		.global	SPI_LastDMATransferCmd
 1031              		.code	16
 1032              		.thumb_func
 1034              	SPI_LastDMATransferCmd:
 1035              	.LFB57:
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Configures the number of data to transfer type(Even/Odd) for the DMA
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         last transfers and for the selected SPI.
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   This function have a meaning only if DMA mode is selected and if 
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the packing mode is used (data length <= 8 and DMA transfer size halfword)  
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_LastDMATransfer: specifies the SPI last DMA transfers state.
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_LastDMATransfer_TxEvenRxEven: Number of data for transmission Even
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                                   and number of data for reception Even.
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_LastDMATransfer_TxOddRxEven: Number of data for transmission Odd
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                                  and number of data for reception Even.
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_LastDMATransfer_TxEvenRxOdd: Number of data for transmission Even
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                                  and number of data for reception Odd.
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_LastDMATransfer_TxOddRxOdd: Number of data for transmission Odd
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *                                                 and number of data for reception Odd.
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_LastDMATransferCmd(SPI_TypeDef* SPIx, uint16_t SPI_LastDMATransfer)
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1036              		.loc 1 1037 0
 1037              		.cfi_startproc
 1038              	.LVL82:
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_LAST_DMA_TRANSFER(SPI_LastDMATransfer));
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear LDMA_TX and LDMA_RX bits */
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 &= CR2_LDMA_MASK;
 1039              		.loc 1 1043 0
 1040 0000 8288     		ldrh	r2, [r0, #4]
 1041 0002 034B     		ldr	r3, .L84
 1042              		@ sp needed for prologue
 1043 0004 1340     		and	r3, r2
 1044 0006 8380     		strh	r3, [r0, #4]
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set new LDMA_TX and LDMA_RX bits value */
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->CR2 |= SPI_LastDMATransfer; 
 1045              		.loc 1 1046 0
 1046 0008 8388     		ldrh	r3, [r0, #4]
 1047 000a 1943     		orr	r1, r3
 1048              	.LVL83:
 1049 000c 8180     		strh	r1, [r0, #4]
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1050              		.loc 1 1047 0
 1051 000e 7047     		bx	lr
 1052              	.L85:
 1053              		.align	2
 1054              	.L84:
 1055 0010 FF9FFFFF 		.word	-24577
 1056              		.cfi_endproc
 1057              	.LFE57:
 1059              		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 1060              		.align	1
 1061              		.global	SPI_I2S_ITConfig
 1062              		.code	16
 1063              		.thumb_func
 1065              	SPI_I2S_ITConfig:
 1066              	.LFB58:
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @}
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  *  @brief   Interrupts and flags management functions
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @verbatim   
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****              ##### Interrupts and flags management functions #####
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****  ===============================================================================
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] This section provides a set of functions allowing to configure the SPI/I2S Interrupts 
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          sources and check or clear the flags or pending bits status.
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          The user should identify which mode will be used in his application to manage 
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          the communication: Polling mode, Interrupt mode or DMA mode. 
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *** Polling Mode ***
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ====================
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_FRE: to indicate a Frame Format error occurs.
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) I2S_FLAG_UDR: to indicate an Underrun error occurs.
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) I2S_FLAG_CHSIDE: to indicate Channel Side.
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..]
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (@)Do not use the BSY flag to handle each data transmission or reception. It is better 
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****            to use the TXE and RXNE flags instead.
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In this Mode it is advised to use the following functions:
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (+) FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (+) void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *** Interrupt Mode ***
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ======================
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In Interrupt Mode, the SPI/I2S communication can be managed by 3 interrupt sources
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          and 5 pending bits: 
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] Pending Bits:
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) I2S_IT_UDR : to indicate an Underrun Error occurs.
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_FLAG_FRE : to indicate a Frame Format error occurs.
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] Interrupt Source:
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             interrupt.  
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****             empty interrupt.
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In this Mode it is advised to use the following functions:
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (+) void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (+) ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *** FIFO Status ***
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ===================
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] It is possible to monitor the FIFO status when a transfer is ongoing using the
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          following function:
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          (+) uint32_t SPI_GetFIFOStatus(uint8_t SPI_FIFO_Direction); 
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *** DMA Mode ***
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ================
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In DMA Mode, the SPI communication can be managed by 2 DMA Channel 
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****          requests:
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request.
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (#) SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request.
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     [..] In this Mode it is advised to use the following function:
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****         (+) void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewStat
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** @endverbatim
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @{
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select 
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral.  
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         I2S mode is not supported for STM32F030 devices.  
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1067              		.loc 1 1144 0
 1068              		.cfi_startproc
 1069 0000 00B5     		push	{lr}
 1070              	.LCFI14:
 1071              		.cfi_def_cfa_offset 4
 1072              		.cfi_offset 14, -4
 1073              	.LVL84:
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPI IT index */
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set the IT mask */
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1074              		.loc 1 1156 0
 1075 0002 0909     		lsr	r1, r1, #4
 1076              	.LVL85:
 1077 0004 0123     		mov	r3, #1
 1078 0006 8B40     		lsl	r3, r3, r1
 1079 0008 99B2     		uxth	r1, r3
 1080              	.LVL86:
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Enable the selected SPI interrupt */
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 |= itmask;
 1081              		.loc 1 1161 0
 1082 000a 8388     		ldrh	r3, [r0, #4]
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (NewState != DISABLE)
 1083              		.loc 1 1158 0
 1084 000c 002A     		cmp	r2, #0
 1085 000e 02D0     		beq	.L87
 1086              		.loc 1 1161 0
 1087 0010 1943     		orr	r1, r3
 1088              	.LVL87:
 1089 0012 8180     		strh	r1, [r0, #4]
 1090 0014 01E0     		b	.L86
 1091              	.LVL88:
 1092              	.L87:
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* Disable the selected SPI interrupt */
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1093              		.loc 1 1166 0
 1094 0016 8B43     		bic	r3, r1
 1095 0018 8380     		strh	r3, [r0, #4]
 1096              	.LVL89:
 1097              	.L86:
 1098              		@ sp needed for prologue
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1099              		.loc 1 1168 0
 1100 001a 00BD     		pop	{pc}
 1101              		.cfi_endproc
 1102              	.LFE58:
 1104              		.section	.text.SPI_GetTransmissionFIFOStatus,"ax",%progbits
 1105              		.align	1
 1106              		.global	SPI_GetTransmissionFIFOStatus
 1107              		.code	16
 1108              		.thumb_func
 1110              	SPI_GetTransmissionFIFOStatus:
 1111              	.LFB59:
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the current SPIx Transmission FIFO filled level.
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The Transmission FIFO filling state.
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_TransmissionFIFOStatus_Empty: when FIFO is empty
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_TransmissionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_TransmissionFIFOStatus_HalfFull: if more than 1 half-full.
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_TransmissionFIFOStatus_Full: when FIFO is full.
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint16_t SPI_GetTransmissionFIFOStatus(SPI_TypeDef* SPIx)
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1112              		.loc 1 1181 0
 1113              		.cfi_startproc
 1114              	.LVL90:
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPIx Transmission FIFO level bits */
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return (uint16_t)((SPIx->SR & SPI_SR_FTLVL));
 1115              		.loc 1 1183 0
 1116 0000 0389     		ldrh	r3, [r0, #8]
 1117 0002 C020     		mov	r0, #192
 1118              	.LVL91:
 1119 0004 4001     		lsl	r0, r0, #5
 1120 0006 1840     		and	r0, r3
 1121              		@ sp needed for prologue
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1122              		.loc 1 1184 0
 1123 0008 7047     		bx	lr
 1124              		.cfi_endproc
 1125              	.LFE59:
 1127              		.section	.text.SPI_GetReceptionFIFOStatus,"ax",%progbits
 1128              		.align	1
 1129              		.global	SPI_GetReceptionFIFOStatus
 1130              		.code	16
 1131              		.thumb_func
 1133              	SPI_GetReceptionFIFOStatus:
 1134              	.LFB60:
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Returns the current SPIx Reception FIFO filled level.
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The Reception FIFO filling state.
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_ReceptionFIFOStatus_Empty: when FIFO is empty
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_ReceptionFIFOStatus_1QuarterFull: if more than 1 quarter-full.
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_ReceptionFIFOStatus_HalfFull: if more than 1 half-full.
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          - SPI_ReceptionFIFOStatus_Full: when FIFO is full.
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** uint16_t SPI_GetReceptionFIFOStatus(SPI_TypeDef* SPIx)
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1135              		.loc 1 1197 0
 1136              		.cfi_startproc
 1137              	.LVL92:
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPIx Reception FIFO level bits */
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return (uint16_t)((SPIx->SR & SPI_SR_FRLVL));
 1138              		.loc 1 1199 0
 1139 0000 0389     		ldrh	r3, [r0, #8]
 1140 0002 C020     		mov	r0, #192
 1141              	.LVL93:
 1142 0004 C000     		lsl	r0, r0, #3
 1143 0006 1840     		and	r0, r3
 1144              		@ sp needed for prologue
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1145              		.loc 1 1200 0
 1146 0008 7047     		bx	lr
 1147              		.cfi_endproc
 1148              	.LFE60:
 1150              		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1151              		.align	1
 1152              		.global	SPI_I2S_GetFlagStatus
 1153              		.code	16
 1154              		.thumb_func
 1156              	SPI_I2S_GetFlagStatus:
 1157              	.LFB61:
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Checks whether the specified SPI flag is set or not.
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select 
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral.    
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         I2S mode is not supported for STM32F030 devices.  
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_FLAG_FRE: TI frame format error flag.
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.   
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1158              		.loc 1 1222 0
 1159              		.cfi_startproc
 1160              	.LVL94:
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   FlagStatus bitstatus = RESET;
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the status of the specified SPI flag */
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1161              		.loc 1 1229 0
 1162 0000 0089     		ldrh	r0, [r0, #8]
 1163              	.LVL95:
 1164              		@ sp needed for prologue
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* SPI_I2S_FLAG is set */
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     bitstatus = SET;
 1165              		.loc 1 1232 0
 1166 0002 0840     		and	r0, r1
 1167              	.LVL96:
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     bitstatus = RESET;
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return  bitstatus;
 1168              		.loc 1 1240 0
 1169 0004 431E     		sub	r3, r0, #1
 1170 0006 9841     		sbc	r0, r0, r3
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1171              		.loc 1 1241 0
 1172 0008 7047     		bx	lr
 1173              		.cfi_endproc
 1174              	.LFE61:
 1176              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1177              		.align	1
 1178              		.global	SPI_I2S_ClearFlag
 1179              		.code	16
 1180              		.thumb_func
 1182              	SPI_I2S_ClearFlag:
 1183              	.LFB62:
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 to select the SPI peripheral.
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   SPI2 is not available for STM32F031 devices.
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         I2S mode is not supported for STM32F030 devices.  
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         This function clears only CRCERR flag.
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by  
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         a read operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         a write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval None
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1184              		.loc 1 1259 0
 1185              		.cfi_startproc
 1186              	.LVL97:
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_CLEAR_FLAG(SPI_I2S_FLAG));
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1187              		.loc 1 1265 0
 1188 0000 C943     		mvn	r1, r1
 1189              	.LVL98:
 1190 0002 0181     		strh	r1, [r0, #8]
 1191              		@ sp needed for prologue
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1192              		.loc 1 1266 0
 1193 0004 7047     		bx	lr
 1194              		.cfi_endproc
 1195              	.LFE62:
 1197              		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1198              		.align	1
 1199              		.global	SPI_I2S_GetITStatus
 1200              		.code	16
 1201              		.thumb_func
 1203              	SPI_I2S_GetITStatus:
 1204              	.LFB63:
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** /**
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @brief  Checks whether the specified SPI/I2S interrupt has occurred or not.
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPIx: where x can be 1 or 2 in SPI mode or 1 in I2S mode to select 
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *         the SPI peripheral.
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *          This parameter can be one of the following values:
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   *            @arg SPI_I2S_IT_FRE: Format Error interrupt.  
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   */
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** {
 1205              		.loc 1 1283 0
 1206              		.cfi_startproc
 1207 0000 30B5     		push	{r4, r5, lr}
 1208              	.LCFI15:
 1209              		.cfi_def_cfa_offset 12
 1210              		.cfi_offset 4, -12
 1211              		.cfi_offset 5, -8
 1212              		.cfi_offset 14, -4
 1213              	.LVL99:
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   ITStatus bitstatus = RESET;
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the parameters */
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPI_I2S_IT index */
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Set the IT mask */
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itmask = 0x01 << itmask;
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1214              		.loc 1 1301 0
 1215 0002 8288     		ldrh	r2, [r0, #4]
 1216              	.LVL100:
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1217              		.loc 1 1292 0
 1218 0004 0123     		mov	r3, #1
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** 
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1219              		.loc 1 1304 0
 1220 0006 0489     		ldrh	r4, [r0, #8]
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1221              		.loc 1 1292 0
 1222 0008 0F20     		mov	r0, #15
 1223              	.LVL101:
 1224 000a 0840     		and	r0, r1
 1225 000c 1D1C     		mov	r5, r3
 1226 000e 8540     		lsl	r5, r5, r0
 1227 0010 281C     		mov	r0, r5
 1228              		.loc 1 1304 0
 1229 0012 2040     		and	r0, r4
 1230 0014 05D0     		beq	.L94
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   itmask = 0x01 << itmask;
 1231              		.loc 1 1298 0 discriminator 1
 1232 0016 0909     		lsr	r1, r1, #4
 1233              	.LVL102:
 1234 0018 8B40     		lsl	r3, r3, r1
 1235 001a 181C     		mov	r0, r3
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 1236              		.loc 1 1282 0 discriminator 1
 1237 001c 1040     		and	r0, r2
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* SPI_I2S_IT is set */
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     bitstatus = SET;
 1238              		.loc 1 1307 0 discriminator 1
 1239 001e 431E     		sub	r3, r0, #1
 1240 0020 9841     		sbc	r0, r0, r3
 1241              	.L94:
 1242              	.LVL103:
 1243              		@ sp needed for prologue
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   else
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   {
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     /* SPI_I2S_IT is reset */
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****     bitstatus = RESET;
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   }
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   /* Return the SPI_I2S_IT status */
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c ****   return bitstatus;
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_spi.c **** }
 1244              		.loc 1 1316 0
 1245 0022 30BD     		pop	{r4, r5, pc}
 1246              		.cfi_endproc
 1247              	.LFE63:
 1249              		.text
 1250              	.Letext0:
 1251              		.file 2 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 1252              		.file 3 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/stm32f
 1253              		.file 4 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\ST
 1254              		.file 5 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\ST
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_spi.c
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:18     .text.SPI_I2S_DeInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:23     .text.SPI_I2S_DeInit:00000000 SPI_I2S_DeInit
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:74     .text.SPI_I2S_DeInit:0000003c $d
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:80     .text.SPI_StructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:85     .text.SPI_StructInit:00000000 SPI_StructInit
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:123    .text.SPI_Init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:128    .text.SPI_Init:00000000 SPI_Init
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:211    .text.SPI_Init:0000004c $d
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:217    .text.I2S_StructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:222    .text.I2S_StructInit:00000000 I2S_StructInit
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:251    .text.I2S_Init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:256    .text.I2S_Init:00000000 I2S_Init
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:418    .text.I2S_Init:00000098 $d
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:423    .text.SPI_Cmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:428    .text.SPI_Cmd:00000000 SPI_Cmd
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:459    .text.SPI_TIModeCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:464    .text.SPI_TIModeCmd:00000000 SPI_TIModeCmd
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:495    .text.I2S_Cmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:500    .text.I2S_Cmd:00000000 I2S_Cmd
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:531    .text.I2S_Cmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:536    .text.SPI_DataSizeConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:541    .text.SPI_DataSizeConfig:00000000 SPI_DataSizeConfig
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:564    .text.SPI_DataSizeConfig:0000000c $d
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:569    .text.SPI_RxFIFOThresholdConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:574    .text.SPI_RxFIFOThresholdConfig:00000000 SPI_RxFIFOThresholdConfig
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:595    .text.SPI_RxFIFOThresholdConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:600    .text.SPI_BiDirectionalLineConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:605    .text.SPI_BiDirectionalLineConfig:00000000 SPI_BiDirectionalLineConfig
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:640    .text.SPI_BiDirectionalLineConfig:0000001c $d
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:645    .text.SPI_NSSInternalSoftwareConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:650    .text.SPI_NSSInternalSoftwareConfig:00000000 SPI_NSSInternalSoftwareConfig
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:686    .text.SPI_NSSInternalSoftwareConfig:0000001c $d
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:692    .text.SPI_SSOutputCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:697    .text.SPI_SSOutputCmd:00000000 SPI_SSOutputCmd
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:728    .text.SPI_NSSPulseModeCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:733    .text.SPI_NSSPulseModeCmd:00000000 SPI_NSSPulseModeCmd
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:764    .text.SPI_SendData8:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:769    .text.SPI_SendData8:00000000 SPI_SendData8
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:783    .text.SPI_I2S_SendData16:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:788    .text.SPI_I2S_SendData16:00000000 SPI_I2S_SendData16
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:802    .text.SPI_ReceiveData8:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:807    .text.SPI_ReceiveData8:00000000 SPI_ReceiveData8
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:822    .text.SPI_I2S_ReceiveData16:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:827    .text.SPI_I2S_ReceiveData16:00000000 SPI_I2S_ReceiveData16
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:842    .text.SPI_CRCLengthConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:847    .text.SPI_CRCLengthConfig:00000000 SPI_CRCLengthConfig
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:868    .text.SPI_CRCLengthConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:873    .text.SPI_CalculateCRC:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:878    .text.SPI_CalculateCRC:00000000 SPI_CalculateCRC
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:909    .text.SPI_CalculateCRC:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:914    .text.SPI_TransmitCRC:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:919    .text.SPI_TransmitCRC:00000000 SPI_TransmitCRC
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:937    .text.SPI_GetCRC:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:942    .text.SPI_GetCRC:00000000 SPI_GetCRC
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:971    .text.SPI_GetCRCPolynomial:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:976    .text.SPI_GetCRCPolynomial:00000000 SPI_GetCRCPolynomial
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:991    .text.SPI_I2S_DMACmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:996    .text.SPI_I2S_DMACmd:00000000 SPI_I2S_DMACmd
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1029   .text.SPI_LastDMATransferCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1034   .text.SPI_LastDMATransferCmd:00000000 SPI_LastDMATransferCmd
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1055   .text.SPI_LastDMATransferCmd:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1060   .text.SPI_I2S_ITConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1065   .text.SPI_I2S_ITConfig:00000000 SPI_I2S_ITConfig
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1105   .text.SPI_GetTransmissionFIFOStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1110   .text.SPI_GetTransmissionFIFOStatus:00000000 SPI_GetTransmissionFIFOStatus
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1128   .text.SPI_GetReceptionFIFOStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1133   .text.SPI_GetReceptionFIFOStatus:00000000 SPI_GetReceptionFIFOStatus
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1151   .text.SPI_I2S_GetFlagStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1156   .text.SPI_I2S_GetFlagStatus:00000000 SPI_I2S_GetFlagStatus
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1177   .text.SPI_I2S_ClearFlag:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1182   .text.SPI_I2S_ClearFlag:00000000 SPI_I2S_ClearFlag
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1198   .text.SPI_I2S_GetITStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccsinsu3.s:1203   .text.SPI_I2S_GetITStatus:00000000 SPI_I2S_GetITStatus
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
__aeabi_uidiv
RCC_GetClocksFreq
