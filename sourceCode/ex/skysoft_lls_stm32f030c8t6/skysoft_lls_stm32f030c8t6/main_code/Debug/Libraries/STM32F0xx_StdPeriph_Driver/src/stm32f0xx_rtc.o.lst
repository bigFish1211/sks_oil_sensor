   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
  18              		.align	1
  19              		.code	16
  20              		.thumb_func
  22              	RTC_ByteToBcd2:
  23              	.LFB84:
  24              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @file    stm32f0xx_rtc.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Initialization
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Calendar (Time and Date) configuration
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Alarms (Alarm A) configuration
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Daylight Saving configuration
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Output pin Configuration
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Digital Calibration configuration  
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + TimeStamp configuration
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Tampers configuration
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Backup Data Registers configuration
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Output Type Config configuration
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Shift control synchronisation  
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *           + Interrupts and flags management
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  @verbatim
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                     ##### Backup Domain Operating Condition #####
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The real-time clock (RTC) and the RTC backup registers can be powered
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          from the VBAT voltage when the main VDD supply is powered off.
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          To retain the content of the RTC backup registers and supply the RTC 
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          when VDD is turned off, VBAT pin can be connected to an optional
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          standby voltage supplied by a battery or by another source.
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] To allow the RTC to operate even when the main digital supply (VDD) 
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          is turned off, the VBAT pin powers the following blocks:
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) The RTC
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) The LSE oscillator
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) PC13 to PC15 I/Os I/Os (when available)
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] When the backup domain is supplied by VDD (analog switch connected 
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          to VDD), the following functions are available:
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) PC14 and PC15 can be used as either GPIO or LSE pins
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] When the backup domain is supplied by VBAT (analog switch connected 
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          to VBAT because VDD is not present), the following functions are available:
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) PC14 and PC15 can be used as LSE pins only
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) PC13 can be used as the RTC_AF1 pin 
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                      ##### Backup Domain Reset #####
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The backup domain reset sets all RTC registers and the RCC_BDCR 
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          register to their reset values. 
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          A backup domain reset is generated when one of the following events
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          occurs:
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) Software reset, triggered by setting the BDRST bit in the 
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                RCC Backup domain control register (RCC_BDCR). You can use the
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                RCC_BackupResetCmd().
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****            (#) VDD or VBAT power on, if both supplies have previously been
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                powered off.
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                      ##### Backup Domain Access #####
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] After reset, the backup domain (RTC registers and RTC backup data 
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          registers) is protected against possible unwanted write accesses. 
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] To enable access to the Backup Domain and RTC registers, proceed as follows:
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) Enable the Power Controller (PWR) APB1 interface clock using the
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              RCC_APB1PeriphClockCmd() function.
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) Enable access to Backup domain using the PWR_BackupAccessCmd() function.
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) Select the RTC clock source using the RCC_RTCCLKConfig() function.
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) Enable RTC Clock using the RCC_RTCCLKCmd() function.
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                                                            
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                      ##### How to use this driver #####
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the backup domain access (see description in the section above)
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC hour format using the RTC_Init() function.
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Time and Date configuration ***
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ==================================
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****      [..]
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             and RTC_SetDate() functions.
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             functions.
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC subsecond, use the RTC_GetSubSecond() function.
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Use the RTC_DayLightSavingConfig() function to add or sub one
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             hour to the RTC Calendar.
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Alarm configuration ***
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ========================== 
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****      [..]  
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To configure the RTC Alarm use the RTC_SetAlarm() function.
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the selected RTC Alarm using the RTC_AlarmCmd() function  
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC Alarm, use the RTC_GetAlarm() function.
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***RTC Wakeup configuration***
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ========================== 
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]  
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function  
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Outputs configuration ***
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ============================
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The RTC has 2 different outputs:
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) AFO_ALARM: this output is used to manage the RTC Alarm A.
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             To output the selected RTC signal on RTC_AF1 pin, use the 
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC_OutputConfig() function.                
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) AFO_CALIB: this output is 512Hz signal or 1Hz .
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.                
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Original Digital Calibration configuration ***
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  =================================    
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] Configure the RTC Original Digital Calibration Value and the corresponding
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig()
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          function.
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***TimeStamp configuration ***
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ==============================
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]  
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             using the RTC_TimeStampCmd() function.
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC TimeStamp Time and Date register, use the 
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC_GetTimeStamp() function.
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC TimeStamp SubSecond register, use the 
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC_GetTimeStampSubSecond() function.
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Tamper configuration ***
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===========================
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]   
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the Tamper filter count using RTC_TamperFilterConfig()
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function. 
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Configure the Tamper precharge or discharge duration using 
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC_TamperPinsPrechargeDuration() function.
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the RTC Tamper using the RTC_TamperCmd() function.
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) Enable the Time stamp on Tamper detection event using  
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             RTC_TSOnTamperDetecCmd() function.     
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ***Backup Data Registers configuration ***
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ==========================================
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]  
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.  
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         (+) To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             function.  
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                        ##### RTC and low power modes #####
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The MCU can be woken up from a low power mode by an RTC alternate 
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          function.
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The RTC alternate functions are the RTC alarm (Alarm A), RTC tamper 
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          event detection and RTC time stamp event detection.
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          These RTC alternate functions can wake up the system from the Stop 
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          and Standby lowpower modes.
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          The system can also wake up from low power modes without depending 
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          on an external interrupt (Auto-wakeup mode), by using the RTC alarm events.
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The RTC provides a programmable time base for waking up from the 
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          Stop or Standby mode at regular intervals.
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          Wakeup from STOP and Standby modes is possible only when the RTC 
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          clock source is LSE or LSI.
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                ##### Selection of RTC_AF1 alternate functions #####
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] The RTC_AF1 pin (PC13) can be used for the following purposes:
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) AFO_ALARM output
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) AFO_CALIB output
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) AFI_TAMPER
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) AFI_TIMESTAMP
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    +------------------------------------------------------------------------------------------+
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | WKUP2  |ALARMOUTTYPE  |
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |ENABLED |  AFO_ALARM   |
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  and function   |          |          |           |              |        |Configuration |
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   Alarm out     |          |          |           |              | Don't  |              |
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   output OD     |     1    |    0     |Don't care | Don't care   | care   |      0       |
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   Alarm out     |          |          |           |              | Don't  |              |
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   output PP     |     1    |    0     |Don't care | Don't care   | care   |      1       |
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    | Calibration out |          |          |           |              | Don't  |              |
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   output PP     |     0    |    1     |Don't care | Don't care   | care   |  Don't care  |
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  TAMPER input   |          |          |           |              | Don't  |              |
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   floating      |     0    |    0     |     1     |      0       | care   |  Don't care  |
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  TIMESTAMP and  |          |          |           |              | Don't  |              |
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  TAMPER input   |     0    |    0     |     1     |      1       | care   |  Don't care  |
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |   floating      |          |          |           |              |        |              |
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    | TIMESTAMP input |          |          |           |              | Don't  |              |
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |    floating     |     0    |    0     |     0     |      1       | care   |  Don't care  |
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  Wakeup Pin 2   |     0    |    0     |     0     |      0       |   1    |  Don't care  |
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|--------|--------------|
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    |  Standard GPIO  |     0    |    0     |     0     |      0       |   0    |  Don't care  |
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    +------------------------------------------------------------------------------------------+
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  @endverbatim
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ******************************************************************************
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @attention
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * You may not use this file except in compliance with the License.
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * You may obtain a copy of the License at:
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * Unless required by applicable law or agreed to in writing, software 
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * See the License for the specific language governing permissions and
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * limitations under the License.
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ******************************************************************************
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #include "stm32f0xx_rtc.h"
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC 
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief RTC driver modules
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Masks Definition */
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_ALRAF | \
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS |RTC_FLAG_INITF | \
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                             RTC_FLAG_TAMP1F | RTC_FLAG_TAMP2F | RTC_FLAG_RECALPF | 
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                             RTC_FLAG_SHPF))
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00004000)
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00008000)
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00001000)
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Private_Functions
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */ 
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             ##### Initialization and Configuration functions #####
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] This section provide functions allowing to initialize and configure the RTC
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          Write protection, enter and exit the RTC initialization mode, RTC registers
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          synchronization check and reference clock detection enable.
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   asynchronous prescaler to a high value to minimize consumption.
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) To Configure the RTC Calendar, user application should enter
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              and its value can be updated. When the initialization sequence is
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              initialization, calendar update or after wakeup from low power modes
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              the software must first clear the RSF flag. The software must then
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              wait until it is set again before reading the calendar, which means
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              that the calendar registers have been correctly copied into the
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              RTC_TR and RTC_DR shadow registers.The RTC_WaitForSynchro() function
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         registers.       
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Set Initialization mode */
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Reset TR, DR and CR registers */
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TR        = (uint32_t)0x00000000;
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WUTR      = (uint32_t)0x0000FFFF;
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->DR        = (uint32_t)0x00002101;
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR        &= (uint32_t)0x00000000;
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER      = (uint32_t)0x007F00FF;
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ALRMAR    = (uint32_t)0x00000000;
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->SHIFTR    = (uint32_t)0x00000000;
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CALR       = (uint32_t)0x00000000;
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ALRMASSR  = (uint32_t)0x00000000;
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Reset ISR register and exit initialization mode */
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR = (uint32_t)0x00000000;
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR = 0x00000000;
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait till the RTC RSF flag is set */
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if (RTC_WaitForSynchro() == ERROR)
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;  
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         in RTC_InitStruct.
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         initialization mode only.  
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Set Initialization mode */
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Set RTC_CR register */
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the RTC PRER */
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Exit Initialization mode */
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode();
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         initialized.
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the write protection.
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable the write protection for RTC registers */
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xFF;
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the write protection for RTC registers */
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xCA;
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0x53;
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC is not in Init mode
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t initstatus = 0x00;
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check if the Initialization mode is set */
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Set the Initialization mode */
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     do
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       initcounter++;  
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (status);
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_ExitInitMode(void)
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Exit Initialization mode */
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         synchronized with RTC APB clock.
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         the software must first clear the RSF flag. 
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->CR & RTC_CR_BYPSHAD) != RESET)
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Bypass shadow mode */
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the write protection for RTC registers */
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xCA;
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0x53;
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Clear RSF flag */
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait the registers to be synchronised */
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     do
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       synchrostatus = RTC->ISR & RTC_ISR_RSF;
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       synchrocounter++;  
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable the write protection for RTC registers */
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xFF;
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (status);
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Set Initialization mode */
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if (NewState != DISABLE)
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       /* Enable the RTC reference clock detection */
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       /* Disable the RTC reference clock detection */
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Exit Initialization mode */
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode();
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         directly from the Calendar counter.
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** */
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Set the BYPSHAD bit */
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Reset the BYPSHAD bit */
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Time and Date configuration functions
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                ##### Time and Date configuration functions #####
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..]  This section provide functions allowing to program and read the RTC
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****           Calendar (Time and Date).
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Set the RTC current time.
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be  one of the following values:
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                        the time configuration information for the RTC.
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } 
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   } 
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Set Initialization mode */
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   } 
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Set the RTC_TR register */
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Exit Initialization mode */
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode(); 
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = ERROR;
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       else
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = SUCCESS;
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         initialized.
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Time = 00h:00min:00sec */
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Get the RTC current Time.
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be  one of the following values:
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                        contain the returned current time configuration.
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_TR register */
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         SSR register.
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   (void) (RTC->DR);
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (tmpreg);
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Set the RTC current date.
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be  one of the following values:
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                         the date configuration information for the RTC.
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Set Initialization mode */
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   } 
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Set the RTC_DR register */
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Exit Initialization mode */
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode(); 
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = ERROR;
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       else
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = SUCCESS;
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         (Monday, January 01 xx00).
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         initialized.
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Monday, January 01 xx00 */
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Get the RTC current date.
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                        contain the returned current date configuration.
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_TR register */
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Alarms (Alarm A) configuration functions 
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          ##### Alarms (Alarm A and Alarm B) configuration functions #####
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] This section provide functions allowing to program and read the RTC 
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          Alarms.
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                          contains the alarm configuration parameters.
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } 
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } 
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }    
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the Alarm register */
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ALRMAR = (uint32_t)tmpreg;
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         all fields are masked).
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         will be initialized.
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                          contains the output alarm configuration values.
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_ALRMAR register */
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ALRMAR);
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Fill the structure with the read parameters */
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the Alarm state */
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;    
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   { 
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     do
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmcounter++;  
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } 
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }        
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   } 
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be a value from 0 to 0x00007FFF.
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_All: All Alarm SS fields are masked.
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                             There is no comparison on sub seconds for Alarm.
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_1: SS[14:1] are don't care in Alarm comparison.
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[0] is compared
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_2: SS[14:2] are don't care in Alarm comparison.
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[1:0] are compared
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_3: SS[14:3] are don't care in Alarm comparison.
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[2:0] are compared
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_4: SS[14:4] are don't care in Alarm comparison.
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[3:0] are compared
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_5: SS[14:5] are don't care in Alarm comparison.
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[4:0] are compared
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_6: SS[14:6] are don't care in Alarm comparison.
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[5:0] are compared
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_7: SS[14:7] are don't care in Alarm comparison.
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[6:0] are compared
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_8: SS[14:8] are don't care in Alarm comparison.
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[7:0] are compared
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_9: SS[14:9] are don't care in Alarm comparison.
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                Only SS[8:0] are compared
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                 Only SS[9:0] are compared
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                 Only SS[10:0] are compared
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                 Only SS[11:0] are compared
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                 Only SS[12:0] are compared
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_SS14: SS[14] is don't care in Alarm comparison.
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                              Only SS[13:0] are compared
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_AlarmSubSecondMask_None: SS[14:0] are compared and must match to activate a
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint8_t RTC_Ala
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t) (((uint32_t)(RTC_AlarmSubSecondValue)) | ((uint32_t)(RTC_AlarmSubSecondMask) 
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the AlarmA SubSecond register */
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ALRMASSR = tmpreg;
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_ALRMAR register */
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (tmpreg);
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             ##### WakeUp Timer configuration functions #####
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] This section provide functions allowing to program and read the RTC WakeUp.
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This function is available for STM32F072 devices.  
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the clock source */
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This function is available for STM32F072 devices.  
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This function is available for STM32F072 devices.  
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the counter value */
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This function is available for STM32F072 devices.  
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable the Wakeup Timer */
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;    
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the Wakeup Timer */
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     do
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutcounter++;  
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }    
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return status;
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                ##### WakeUp Timer configuration functions #####
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] This section provide functions allowing to program and read the RTC WakeUp. 
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                             in CR register to store the operation.
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear the bits to be configured */
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the RTC_CR register */
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - RTC_StoreOperation_Set
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Output pin Configuration function 
1572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   ##### Output pin Configuration function #####
1576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] This section provide functions allowing to configure the RTC Output source.
1578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output, available only for STM32F
1590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following:
1592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                          ALRAF is high (depending on OSEL)
1594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                         ALRAF is high (depending on OSEL)
1596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear the bits to be configured */
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the output selection and polarity */
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Digital Calibration configuration functions 
1624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****           ##### Digital Calibration configuration functions #####
1628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
1650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable the RTC clock output */
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   { 
1656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the RTC clock output */
1657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF; 
1662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_CalibOutput: Select the Calibration output Selection .
1667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_CalibOutput_1Hz: A signal has a regular waveform at 1Hz.
1670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** */
1672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /*clear flags before config*/
1682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_CALSEL);
1683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the RTC_CR register */
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod: Select the Smooth Calibration Period.
1694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be can be one of the following values:
1695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_SmoothCalibPeriod_32sec: The smooth calibration periode is 32s.
1696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_SmoothCalibPeriod_16sec: The smooth calibration periode is 16s.
1697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_SmoothCalibPeriod_8sec: The smooth calibartion periode is 8s.
1698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses: Select to Set or reset the CALP bit.
1699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_SmoothCalibPlusPulses_Set: Add one RTCCLK puls every 2**11 pulses.
1701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one any value from 0 to 0x000001FF.
1704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** */
1708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
1713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t recalpfcount = 0;
1714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* check if a calibration is pending*/
1725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* wait until the Calibration is completed*/
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
1730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       recalpfcount++;
1731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
1732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the Smooth calibration settings */
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
1741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
1745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (ErrorStatus)(status);
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****           ##### TimeStamp configuration functions #####
1764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
1765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         activated.
1775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following:
1776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                           edge of the related pin.
1778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                            falling edge of the related pin.
1780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
1787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the new configuration */
1796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
1797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
1803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
1806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
1807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
1808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
1811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                             contains the TimeStamp time values. 
1824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                             contains the TimeStamp date values.     
1826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
1829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
1832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
1837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
1838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
1839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
1841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
1842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
1843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
1844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
1845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
1847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
1848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
1850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
1851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the input parameters format */
1853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
1856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
1857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
1858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
1859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
1861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
1862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
1863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
1864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
1869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  None
1870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
1871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
1873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
1875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
1876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
1880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
1883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Tampers configuration functions 
1884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
1885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
1886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
1887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****           ##### Tampers configuration functions #####
1888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
1889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
1891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
1892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
1896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
1897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
1898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Tamper_1: Select Tamper 1.
1899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Tamper_2: Select Tamper 2.
1900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
1901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                            stimulates tamper event. 
1902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event
1904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper eve
1905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
1906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
1907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
1913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
1914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
1915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
1916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {  
1917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the RTC_TAFCR register */
1918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
1919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   { 
1922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the RTC_TAFCR register */
1923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
1924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
1925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
1929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
1930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
1931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Tamper_1: Select Tamper 1.
1932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_Tamper_2: Select Tamper 2.
1933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
1934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.                   
1935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
1938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
1941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
1944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable the selected Tamper pin */
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
1947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
1948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
1949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
1950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable the selected Tamper pin */
1951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
1952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }  
1953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the Tampers Filter.
1957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
1958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
1960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
1961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                           samples at the active level 
1962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
1963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                           samples at the active level
1964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
1965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                           samples at the active level 
1966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
1967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
1968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
1969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
1970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
1971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
1972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    
1973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
1974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
1975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the RTC_TAFCR register */
1977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
1978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
1979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
1980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
1981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
1982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
1983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
1984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
1985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                         with a frequency =  RTCCLK / 32768
1986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
1987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                         with a frequency =  RTCCLK / 16384
1988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
1989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                        with a frequency =  RTCCLK / 8192
1990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
1991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                        with a frequency =  RTCCLK / 4096
1992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
1993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                        with a frequency =  RTCCLK / 2048
1994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
1995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                        with a frequency =  RTCCLK / 1024
1996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
1997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                       with a frequency =  RTCCLK / 512  
1998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
1999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                                       with a frequency =  RTCCLK / 256  
2000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
2007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         Precharge Duration.
2018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
2019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before samplin
2020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before samplin
2021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before samplin
2022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before samplin
2023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    
2030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         is reset.   
2041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****    
2050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
2051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Save timestamp on tamper detection event */
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  if (NewState != DISABLE)
2074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   } 
2083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
2087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
2092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
2093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****           ##### Backup Data Registers configuration functions ##### 
2095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
2096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
2098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
2099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 4 to 
2105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                 specify the register.
2106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t tmp = 0;
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Write the specified register */
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                          specify the register.                   
2128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t tmp = 0;
2133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Read the specified register */
2141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
2146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group11 Output Type Config configuration functions
2149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Output Type Config configuration functions  
2150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
2151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
2152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
2153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ##### Output Type Config configuration functions ##### 
2154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
2155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
2157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
2158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
2164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                    Open Drain mode.
2166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *                                    Push Pull mode.    
2168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
2181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
2186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
2187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
2188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             ##### Shift control synchronisation functions #####
2189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
2190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
2192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
2193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_ShiftAdd1S: Select to add or not 1 second to the time Calendar.
2199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values :
2200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_ShiftAdd1S_Set: Add one second to the clock calendar. 
2201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_ShiftAdd1S_Reset: No effect.
2202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** */
2208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ErrorStatus status = ERROR;
2211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t shpfcount = 0;
2212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
2218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
2219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
2220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check if a Shift is pending*/
2222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Wait until the shift is completed*/
2225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
2227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       shpfcount++;
2228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
2229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* check if the reference clock detection is disabled */
2235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
2237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       /* Configure the Shift settings */
2238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     
2240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
2242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = ERROR;
2243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
2244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       else
2245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       {
2246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = SUCCESS;
2247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       }
2248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
2249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     else
2250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     {
2251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
2252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     }
2253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
2257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
2260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
2261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (ErrorStatus)(status);
2263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
2267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  *
2272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @verbatim   
2273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================
2274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****             ##### Interrupts and flags management functions #####
2275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  ===============================================================================  
2276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     [..] All RTC interrupts are connected to the EXTI controller.
2277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
2278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) To enable the RTC Alarm interrupt, the following sequence is required:
2279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   edge sensitivity using the EXTI_Init() function.
2281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   function.
2283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure the RTC to generate RTC alarms (Alarm A) using
2284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) To enable the RTC Tamper interrupt, the following sequence is required:
2287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the EXTI Line 19 in interrupt mode and select the rising 
2288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   edge sensitivity using the EXTI_Init() function.
2289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   function.
2291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure the RTC to detect the RTC tamper event using the 
2292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****          (+) To enable the RTC TimeStamp interrupt, the following sequence is required:
2295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the EXTI Line 19 in interrupt mode and select the rising 
2296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   edge sensitivity using the EXTI_Init() function.
2297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   function.
2299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              (++) Configure the RTC to detect the RTC time-stamp event using the 
2300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                   RTC_TimeStampCmd() functions.
2301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** @endverbatim
2303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @{
2304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
2310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask, available only for STM32F072 devices 
2312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Disable the write protection for RTC registers */
2325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
2326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
2327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
2329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Enable the write protection for RTC registers */
2343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF; 
2344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
2350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag
2351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag   
2352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag, available only for STM32F072 devices  
2356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   FlagStatus bitstatus = RESET;
2365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
2366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get all the flags */
2371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Return the status of the flag */
2374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bitstatus = SET;
2377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bitstatus = RESET;
2381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return bitstatus;
2383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
2389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag 
2391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag, available only for STM32F072 devices  
2394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0001FFFF) | (uint32_t)(RTC->ISR &
2405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be one of the following values:
2411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt
2412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt, available only for STM32F072 devices
2413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper1 event interrupt 
2415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper2 event interrupt 
2416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   ITStatus bitstatus = RESET;
2421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
2423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  
2429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the Interrupt enable Status */
2430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));
2431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the Interrupt pending bit */
2433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the status of the Interrupt */
2436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bitstatus = SET;
2439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   else
2441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bitstatus = RESET;
2443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return bitstatus;
2445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *          This parameter can be any combination of the following values:
2451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt, available only for STM32F072 devices
2453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper1 event interrupt
2455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper2 event interrupt
2456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval None
2457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
2460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint32_t tmpreg = 0;
2461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Check the parameters */
2463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
2471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @}
2474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  Value: Byte to be converted.
2479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval Converted byte
2480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
  25              		.loc 1 2482 0
  26              		.cfi_startproc
  27 0000 00B5     		push	{lr}
  28              	.LCFI0:
  29              		.cfi_def_cfa_offset 4
  30              		.cfi_offset 14, -4
  31              	.LVL0:
2483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint8_t bcdhigh = 0;
  32              		.loc 1 2483 0
  33 0002 0023     		mov	r3, #0
2484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   while (Value >= 10)
  34              		.loc 1 2485 0
  35 0004 03E0     		b	.L2
  36              	.LVL1:
  37              	.L3:
2486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   {
2487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bcdhigh++;
  38              		.loc 1 2487 0
  39 0006 0133     		add	r3, r3, #1
  40              	.LVL2:
2488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     Value -= 10;
  41              		.loc 1 2488 0
  42 0008 0A38     		sub	r0, r0, #10
  43              	.LVL3:
2487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bcdhigh++;
  44              		.loc 1 2487 0
  45 000a DBB2     		uxtb	r3, r3
  46              	.LVL4:
  47              		.loc 1 2488 0
  48 000c C0B2     		uxtb	r0, r0
  49              	.LVL5:
  50              	.L2:
2485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   while (Value >= 10)
  51              		.loc 1 2485 0 discriminator 1
  52 000e 0928     		cmp	r0, #9
  53 0010 F9D8     		bhi	.L3
2489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   }
2490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   
2491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  54              		.loc 1 2491 0
  55 0012 1B01     		lsl	r3, r3, #4
  56              	.LVL6:
  57 0014 1843     		orr	r0, r3
  58              	.LVL7:
  59 0016 C0B2     		uxtb	r0, r0
  60              		@ sp needed for prologue
2492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
  61              		.loc 1 2492 0
  62 0018 00BD     		pop	{pc}
  63              		.cfi_endproc
  64              	.LFE84:
  66              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
  67              		.align	1
  68              		.code	16
  69              		.thumb_func
  71              	RTC_Bcd2ToByte:
  72              	.LFB85:
2493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** 
2494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** /**
2495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @param  Value: BCD value to be converted.
2497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   * @retval Converted word
2498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   */
2499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
  73              		.loc 1 2500 0
  74              		.cfi_startproc
  75              	.LVL8:
2501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   uint8_t tmp = 0;
2502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  76              		.loc 1 2502 0
  77 0000 0309     		lsr	r3, r0, #4
  78 0002 0A21     		mov	r1, #10
  79 0004 4B43     		mul	r3, r1
2503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  80              		.loc 1 2503 0
  81 0006 0F22     		mov	r2, #15
  82 0008 1040     		and	r0, r2
  83              	.LVL9:
  84 000a 1818     		add	r0, r3, r0
  85 000c C0B2     		uxtb	r0, r0
  86              		@ sp needed for prologue
2504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
  87              		.loc 1 2504 0
  88 000e 7047     		bx	lr
  89              		.cfi_endproc
  90              	.LFE85:
  92              		.section	.text.RTC_StructInit,"ax",%progbits
  93              		.align	1
  94              		.global	RTC_StructInit
  95              		.code	16
  96              		.thumb_func
  98              	RTC_StructInit:
  99              	.LFB35:
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 100              		.loc 1 428 0
 101              		.cfi_startproc
 102              	.LVL10:
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 103              		.loc 1 436 0
 104 0000 0021     		mov	r1, #0
 105 0002 7F22     		mov	r2, #127
 106 0004 FF23     		mov	r3, #255
 107 0006 0EC0     		stmia	r0!, {r1, r2, r3}
 108              	.LVL11:
 109              		@ sp needed for prologue
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 110              		.loc 1 437 0
 111 0008 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE35:
 115              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 116              		.align	1
 117              		.global	RTC_WriteProtectionCmd
 118              		.code	16
 119              		.thumb_func
 121              	RTC_WriteProtectionCmd:
 122              	.LFB36:
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 123              		.loc 1 450 0
 124              		.cfi_startproc
 125 0000 00B5     		push	{lr}
 126              	.LCFI1:
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 14, -4
 129              	.LVL12:
 130 0002 044B     		ldr	r3, .L10
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xFF;
 131              		.loc 1 457 0
 132 0004 FF22     		mov	r2, #255
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 133              		.loc 1 454 0
 134 0006 0028     		cmp	r0, #0
 135 0008 02D1     		bne	.L9
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xCA;
 136              		.loc 1 462 0
 137 000a CA22     		mov	r2, #202
 138 000c 5A62     		str	r2, [r3, #36]
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0x53;
 139              		.loc 1 463 0
 140 000e 5322     		mov	r2, #83
 141              	.L9:
 142 0010 5A62     		str	r2, [r3, #36]
 143              		@ sp needed for prologue
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 144              		.loc 1 465 0
 145 0012 00BD     		pop	{pc}
 146              	.L11:
 147              		.align	2
 148              	.L10:
 149 0014 00280040 		.word	1073752064
 150              		.cfi_endproc
 151              	.LFE36:
 153              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 154              		.align	1
 155              		.global	RTC_EnterInitMode
 156              		.code	16
 157              		.thumb_func
 159              	RTC_EnterInitMode:
 160              	.LFB37:
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 161              		.loc 1 477 0
 162              		.cfi_startproc
 163 0000 07B5     		push	{r0, r1, r2, lr}
 164              	.LCFI2:
 165              		.cfi_def_cfa_offset 16
 166              		.cfi_offset 0, -16
 167              		.cfi_offset 1, -12
 168              		.cfi_offset 2, -8
 169              		.cfi_offset 14, -4
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 170              		.loc 1 478 0
 171 0002 0023     		mov	r3, #0
 172 0004 0193     		str	r3, [sp, #4]
 173              	.LVL13:
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 174              		.loc 1 483 0
 175 0006 0B4B     		ldr	r3, .L18
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 176              		.loc 1 506 0
 177 0008 0120     		mov	r0, #1
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 178              		.loc 1 483 0
 179 000a DA68     		ldr	r2, [r3, #12]
 180 000c 5106     		lsl	r1, r2, #25
 181 000e 0FD4     		bmi	.L13
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 182              		.loc 1 486 0
 183 0010 4042     		neg	r0, r0
 184 0012 D860     		str	r0, [r3, #12]
 185              	.LVL14:
 186              	.L15:
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 187              		.loc 1 491 0 discriminator 1
 188 0014 DA68     		ldr	r2, [r3, #12]
 189              	.LVL15:
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       initcounter++;  
 190              		.loc 1 492 0 discriminator 1
 191 0016 0198     		ldr	r0, [sp, #4]
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 192              		.loc 1 493 0 discriminator 1
 193 0018 8021     		mov	r1, #128
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       initcounter++;  
 194              		.loc 1 492 0 discriminator 1
 195 001a 0130     		add	r0, r0, #1
 196              	.LVL16:
 197 001c 0190     		str	r0, [sp, #4]
 198              	.LVL17:
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 199              		.loc 1 493 0 discriminator 1
 200 001e 0198     		ldr	r0, [sp, #4]
 201              	.LVL18:
 202 0020 C901     		lsl	r1, r1, #7
 203 0022 8842     		cmp	r0, r1
 204 0024 01D0     		beq	.L14
 205 0026 5106     		lsl	r1, r2, #25
 206 0028 F4D5     		bpl	.L15
 207              	.L14:
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 208              		.loc 1 495 0
 209 002a DB68     		ldr	r3, [r3, #12]
 210 002c 5A06     		lsl	r2, r3, #25
 211              	.LVL19:
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
 212              		.loc 1 501 0
 213 002e D00F     		lsr	r0, r2, #31
 214              	.L13:
 215              	.LVL20:
 216              		@ sp needed for prologue
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 217              		.loc 1 510 0
 218 0030 0EBD     		pop	{r1, r2, r3, pc}
 219              	.L19:
 220 0032 C046     		.align	2
 221              	.L18:
 222 0034 00280040 		.word	1073752064
 223              		.cfi_endproc
 224              	.LFE37:
 226              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 227              		.align	1
 228              		.global	RTC_ExitInitMode
 229              		.code	16
 230              		.thumb_func
 232              	RTC_ExitInitMode:
 233              	.LFB38:
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 234              		.loc 1 522 0
 235              		.cfi_startproc
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;
 236              		.loc 1 524 0
 237 0000 024B     		ldr	r3, .L21
 238 0002 8021     		mov	r1, #128
 239 0004 DA68     		ldr	r2, [r3, #12]
 240              		@ sp needed for prologue
 241 0006 8A43     		bic	r2, r1
 242 0008 DA60     		str	r2, [r3, #12]
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 243              		.loc 1 525 0
 244 000a 7047     		bx	lr
 245              	.L22:
 246              		.align	2
 247              	.L21:
 248 000c 00280040 		.word	1073752064
 249              		.cfi_endproc
 250              	.LFE38:
 252              		.section	.text.RTC_Init,"ax",%progbits
 253              		.align	1
 254              		.global	RTC_Init
 255              		.code	16
 256              		.thumb_func
 258              	RTC_Init:
 259              	.LFB34:
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 260              		.loc 1 382 0
 261              		.cfi_startproc
 262 0000 38B5     		push	{r3, r4, r5, lr}
 263              	.LCFI3:
 264              		.cfi_def_cfa_offset 16
 265              		.cfi_offset 3, -16
 266              		.cfi_offset 4, -12
 267              		.cfi_offset 5, -8
 268              		.cfi_offset 14, -4
 269              	.LVL21:
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 270              		.loc 1 391 0
 271 0002 0F4C     		ldr	r4, .L26
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 272              		.loc 1 382 0
 273 0004 051C     		mov	r5, r0
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 274              		.loc 1 392 0
 275 0006 5323     		mov	r3, #83
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 276              		.loc 1 391 0
 277 0008 CA20     		mov	r0, #202
 278              	.LVL22:
 279 000a 6062     		str	r0, [r4, #36]
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 280              		.loc 1 392 0
 281 000c 6362     		str	r3, [r4, #36]
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 282              		.loc 1 395 0
 283 000e FFF7FEFF 		bl	RTC_EnterInitMode
 284 0012 0028     		cmp	r0, #0
 285 0014 11D0     		beq	.L24
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 286              		.loc 1 402 0
 287 0016 A368     		ldr	r3, [r4, #8]
 288 0018 4022     		mov	r2, #64
 289 001a 9343     		bic	r3, r2
 290 001c A360     		str	r3, [r4, #8]
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 291              		.loc 1 404 0
 292 001e A168     		ldr	r1, [r4, #8]
 293 0020 2868     		ldr	r0, [r5]
 294 0022 0843     		orr	r0, r1
 295 0024 A060     		str	r0, [r4, #8]
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 296              		.loc 1 407 0
 297 0026 AB68     		ldr	r3, [r5, #8]
 298 0028 2361     		str	r3, [r4, #16]
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 299              		.loc 1 408 0
 300 002a 6D68     		ldr	r5, [r5, #4]
 301              	.LVL23:
 302 002c 2269     		ldr	r2, [r4, #16]
 303 002e 2904     		lsl	r1, r5, #16
 304 0030 1143     		orr	r1, r2
 305 0032 2161     		str	r1, [r4, #16]
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode();
 306              		.loc 1 411 0
 307 0034 FFF7FEFF 		bl	RTC_ExitInitMode
 308              	.LVL24:
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 309              		.loc 1 413 0
 310 0038 0120     		mov	r0, #1
 311              	.LVL25:
 312              	.L24:
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 313              		.loc 1 416 0
 314 003a FF25     		mov	r5, #255
 315 003c 6562     		str	r5, [r4, #36]
 316              		@ sp needed for prologue
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 317              		.loc 1 419 0
 318 003e 38BD     		pop	{r3, r4, r5, pc}
 319              	.L27:
 320              		.align	2
 321              	.L26:
 322 0040 00280040 		.word	1073752064
 323              		.cfi_endproc
 324              	.LFE34:
 326              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 327              		.align	1
 328              		.global	RTC_WaitForSynchro
 329              		.code	16
 330              		.thumb_func
 332              	RTC_WaitForSynchro:
 333              	.LFB39:
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 334              		.loc 1 544 0
 335              		.cfi_startproc
 336 0000 07B5     		push	{r0, r1, r2, lr}
 337              	.LCFI4:
 338              		.cfi_def_cfa_offset 16
 339              		.cfi_offset 0, -16
 340              		.cfi_offset 1, -12
 341              		.cfi_offset 2, -8
 342              		.cfi_offset 14, -4
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 343              		.loc 1 545 0
 344 0002 0023     		mov	r3, #0
 345 0004 0193     		str	r3, [sp, #4]
 346              	.LVL26:
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->CR & RTC_CR_BYPSHAD) != RESET)
 347              		.loc 1 549 0
 348 0006 0F4B     		ldr	r3, .L34
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 349              		.loc 1 552 0
 350 0008 0120     		mov	r0, #1
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->CR & RTC_CR_BYPSHAD) != RESET)
 351              		.loc 1 549 0
 352 000a 9A68     		ldr	r2, [r3, #8]
 353 000c 9106     		lsl	r1, r2, #26
 354 000e 17D4     		bmi	.L29
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xCA;
 355              		.loc 1 557 0
 356 0010 CA20     		mov	r0, #202
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0x53;
 357              		.loc 1 558 0
 358 0012 5322     		mov	r2, #83
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xCA;
 359              		.loc 1 557 0
 360 0014 5862     		str	r0, [r3, #36]
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0x53;
 361              		.loc 1 558 0
 362 0016 5A62     		str	r2, [r3, #36]
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 363              		.loc 1 561 0
 364 0018 D868     		ldr	r0, [r3, #12]
 365 001a A021     		mov	r1, #160
 366 001c 8843     		bic	r0, r1
 367 001e D860     		str	r0, [r3, #12]
 368              	.LVL27:
 369              	.L31:
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       synchrostatus = RTC->ISR & RTC_ISR_RSF;
 370              		.loc 1 566 0 discriminator 1
 371 0020 DA68     		ldr	r2, [r3, #12]
 372              	.LVL28:
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       synchrocounter++;  
 373              		.loc 1 567 0 discriminator 1
 374 0022 0198     		ldr	r0, [sp, #4]
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 375              		.loc 1 568 0 discriminator 1
 376 0024 8021     		mov	r1, #128
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       synchrocounter++;  
 377              		.loc 1 567 0 discriminator 1
 378 0026 0130     		add	r0, r0, #1
 379              	.LVL29:
 380 0028 0190     		str	r0, [sp, #4]
 381              	.LVL30:
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 382              		.loc 1 568 0 discriminator 1
 383 002a 0198     		ldr	r0, [sp, #4]
 384              	.LVL31:
 385 002c 0902     		lsl	r1, r1, #8
 386 002e 8842     		cmp	r0, r1
 387 0030 01D0     		beq	.L30
 388 0032 9106     		lsl	r1, r2, #26
 389 0034 F4D5     		bpl	.L31
 390              	.L30:
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 391              		.loc 1 570 0
 392 0036 D868     		ldr	r0, [r3, #12]
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xFF;
 393              		.loc 1 580 0
 394 0038 FF22     		mov	r2, #255
 395              	.LVL32:
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 396              		.loc 1 570 0
 397 003a 8106     		lsl	r1, r0, #26
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 398              		.loc 1 572 0
 399 003c C80F     		lsr	r0, r1, #31
 400              	.LVL33:
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WPR = 0xFF;
 401              		.loc 1 580 0
 402 003e 5A62     		str	r2, [r3, #36]
 403              	.LVL34:
 404              	.L29:
 405              		@ sp needed for prologue
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 406              		.loc 1 584 0
 407 0040 0EBD     		pop	{r1, r2, r3, pc}
 408              	.L35:
 409 0042 C046     		.align	2
 410              	.L34:
 411 0044 00280040 		.word	1073752064
 412              		.cfi_endproc
 413              	.LFE39:
 415              		.section	.text.RTC_DeInit,"ax",%progbits
 416              		.align	1
 417              		.global	RTC_DeInit
 418              		.code	16
 419              		.thumb_func
 421              	RTC_DeInit:
 422              	.LFB33:
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 423              		.loc 1 321 0
 424              		.cfi_startproc
 425 0000 10B5     		push	{r4, lr}
 426              	.LCFI5:
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 4, -8
 429              		.cfi_offset 14, -4
 430              	.LVL35:
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 431              		.loc 1 325 0
 432 0002 114C     		ldr	r4, .L40
 433 0004 CA20     		mov	r0, #202
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 434              		.loc 1 326 0
 435 0006 5323     		mov	r3, #83
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 436              		.loc 1 325 0
 437 0008 6062     		str	r0, [r4, #36]
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 438              		.loc 1 326 0
 439 000a 6362     		str	r3, [r4, #36]
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 440              		.loc 1 329 0
 441 000c FFF7FEFF 		bl	RTC_EnterInitMode
 442 0010 0028     		cmp	r0, #0
 443 0012 16D0     		beq	.L37
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->DR        = (uint32_t)0x00002101;
 444              		.loc 1 338 0
 445 0014 0D4B     		ldr	r3, .L40+4
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WUTR      = (uint32_t)0x0000FFFF;
 446              		.loc 1 337 0
 447 0016 0E48     		ldr	r0, .L40+8
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TR        = (uint32_t)0x00000000;
 448              		.loc 1 336 0
 449 0018 0021     		mov	r1, #0
 450 001a 2160     		str	r1, [r4]
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->WUTR      = (uint32_t)0x0000FFFF;
 451              		.loc 1 337 0
 452 001c 6061     		str	r0, [r4, #20]
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->DR        = (uint32_t)0x00002101;
 453              		.loc 1 338 0
 454 001e 6360     		str	r3, [r4, #4]
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR        &= (uint32_t)0x00000000;
 455              		.loc 1 339 0
 456 0020 A268     		ldr	r2, [r4, #8]
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER      = (uint32_t)0x007F00FF;
 457              		.loc 1 340 0
 458 0022 0C4A     		ldr	r2, .L40+12
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR        &= (uint32_t)0x00000000;
 459              		.loc 1 339 0
 460 0024 A160     		str	r1, [r4, #8]
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->PRER      = (uint32_t)0x007F00FF;
 461              		.loc 1 340 0
 462 0026 2261     		str	r2, [r4, #16]
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ALRMAR    = (uint32_t)0x00000000;
 463              		.loc 1 341 0
 464 0028 E161     		str	r1, [r4, #28]
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->SHIFTR    = (uint32_t)0x00000000;
 465              		.loc 1 342 0
 466 002a E162     		str	r1, [r4, #44]
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CALR       = (uint32_t)0x00000000;
 467              		.loc 1 343 0
 468 002c E163     		str	r1, [r4, #60]
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ALRMASSR  = (uint32_t)0x00000000;
 469              		.loc 1 344 0
 470 002e 6164     		str	r1, [r4, #68]
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->ISR = (uint32_t)0x00000000;
 471              		.loc 1 347 0
 472 0030 E160     		str	r1, [r4, #12]
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR = 0x00000000;
 473              		.loc 1 350 0
 474 0032 2164     		str	r1, [r4, #64]
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if (RTC_WaitForSynchro() == ERROR)
 475              		.loc 1 353 0
 476 0034 FFF7FEFF 		bl	RTC_WaitForSynchro
 477 0038 031C     		mov	r3, r0
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 478              		.loc 1 359 0
 479 003a 0120     		mov	r0, #1
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if (RTC_WaitForSynchro() == ERROR)
 480              		.loc 1 353 0
 481 003c 002B     		cmp	r3, #0
 482 003e 00D1     		bne	.L37
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
 483              		.loc 1 355 0
 484 0040 181C     		mov	r0, r3
 485              	.L37:
 486              	.LVL36:
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;  
 487              		.loc 1 365 0
 488 0042 FF21     		mov	r1, #255
 489 0044 6162     		str	r1, [r4, #36]
 490              		@ sp needed for prologue
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 491              		.loc 1 368 0
 492 0046 10BD     		pop	{r4, pc}
 493              	.L41:
 494              		.align	2
 495              	.L40:
 496 0048 00280040 		.word	1073752064
 497 004c 01210000 		.word	8449
 498 0050 FFFF0000 		.word	65535
 499 0054 FF007F00 		.word	8323327
 500              		.cfi_endproc
 501              	.LFE33:
 503              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 504              		.align	1
 505              		.global	RTC_RefClockCmd
 506              		.code	16
 507              		.thumb_func
 509              	RTC_RefClockCmd:
 510              	.LFB40:
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 511              		.loc 1 595 0
 512              		.cfi_startproc
 513 0000 38B5     		push	{r3, r4, r5, lr}
 514              	.LCFI6:
 515              		.cfi_def_cfa_offset 16
 516              		.cfi_offset 3, -16
 517              		.cfi_offset 4, -12
 518              		.cfi_offset 5, -8
 519              		.cfi_offset 14, -4
 520              	.LVL37:
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 521              		.loc 1 602 0
 522 0002 0C4C     		ldr	r4, .L48
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 523              		.loc 1 595 0
 524 0004 051C     		mov	r5, r0
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 525              		.loc 1 603 0
 526 0006 5323     		mov	r3, #83
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 527              		.loc 1 602 0
 528 0008 CA20     		mov	r0, #202
 529              	.LVL38:
 530 000a 6062     		str	r0, [r4, #36]
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 531              		.loc 1 603 0
 532 000c 6362     		str	r3, [r4, #36]
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 533              		.loc 1 606 0
 534 000e FFF7FEFF 		bl	RTC_EnterInitMode
 535 0012 0028     		cmp	r0, #0
 536 0014 0BD0     		beq	.L43
 537 0016 1023     		mov	r3, #16
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;
 538              		.loc 1 615 0
 539 0018 A268     		ldr	r2, [r4, #8]
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if (NewState != DISABLE)
 540              		.loc 1 612 0
 541 001a 002D     		cmp	r5, #0
 542 001c 01D0     		beq	.L44
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;
 543              		.loc 1 615 0
 544 001e 1343     		orr	r3, r2
 545 0020 01E0     		b	.L47
 546              	.L44:
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;
 547              		.loc 1 620 0
 548 0022 9A43     		bic	r2, r3
 549 0024 131C     		mov	r3, r2
 550              	.L47:
 551 0026 A360     		str	r3, [r4, #8]
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode();
 552              		.loc 1 623 0
 553 0028 FFF7FEFF 		bl	RTC_ExitInitMode
 554              	.LVL39:
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 555              		.loc 1 625 0
 556 002c 0120     		mov	r0, #1
 557              	.LVL40:
 558              	.L43:
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 559              		.loc 1 629 0
 560 002e FF21     		mov	r1, #255
 561 0030 6162     		str	r1, [r4, #36]
 562              		@ sp needed for prologue
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 563              		.loc 1 632 0
 564 0032 38BD     		pop	{r3, r4, r5, pc}
 565              	.L49:
 566              		.align	2
 567              	.L48:
 568 0034 00280040 		.word	1073752064
 569              		.cfi_endproc
 570              	.LFE40:
 572              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 573              		.align	1
 574              		.global	RTC_BypassShadowCmd
 575              		.code	16
 576              		.thumb_func
 578              	RTC_BypassShadowCmd:
 579              	.LFB41:
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 580              		.loc 1 643 0
 581              		.cfi_startproc
 582 0000 00B5     		push	{lr}
 583              	.LCFI7:
 584              		.cfi_def_cfa_offset 4
 585              		.cfi_offset 14, -4
 586              	.LVL41:
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 587              		.loc 1 648 0
 588 0002 094B     		ldr	r3, .L54
 589 0004 CA21     		mov	r1, #202
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 590              		.loc 1 649 0
 591 0006 5322     		mov	r2, #83
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 592              		.loc 1 648 0
 593 0008 5962     		str	r1, [r3, #36]
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 594              		.loc 1 649 0
 595 000a 5A62     		str	r2, [r3, #36]
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 596              		.loc 1 651 0
 597 000c 0028     		cmp	r0, #0
 598 000e 03D0     		beq	.L51
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 599              		.loc 1 654 0
 600 0010 9A68     		ldr	r2, [r3, #8]
 601 0012 2020     		mov	r0, #32
 602              	.LVL42:
 603 0014 0243     		orr	r2, r0
 604 0016 02E0     		b	.L53
 605              	.LVL43:
 606              	.L51:
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 607              		.loc 1 659 0
 608 0018 9968     		ldr	r1, [r3, #8]
 609 001a DF22     		mov	r2, #223
 610 001c 0A40     		and	r2, r1
 611              	.LVL44:
 612              	.L53:
 613 001e 9A60     		str	r2, [r3, #8]
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 614              		.loc 1 663 0
 615 0020 FF22     		mov	r2, #255
 616 0022 5A62     		str	r2, [r3, #36]
 617              		@ sp needed for prologue
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 618              		.loc 1 664 0
 619 0024 00BD     		pop	{pc}
 620              	.L55:
 621 0026 C046     		.align	2
 622              	.L54:
 623 0028 00280040 		.word	1073752064
 624              		.cfi_endproc
 625              	.LFE41:
 627              		.section	.text.RTC_SetTime,"ax",%progbits
 628              		.align	1
 629              		.global	RTC_SetTime
 630              		.code	16
 631              		.thumb_func
 633              	RTC_SetTime:
 634              	.LFB42:
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 635              		.loc 1 697 0
 636              		.cfi_startproc
 637 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 638              	.LCFI8:
 639              		.cfi_def_cfa_offset 24
 640              		.cfi_offset 3, -24
 641              		.cfi_offset 4, -20
 642              		.cfi_offset 5, -16
 643              		.cfi_offset 6, -12
 644              		.cfi_offset 7, -8
 645              		.cfi_offset 14, -4
 646              	.LVL45:
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 647              		.loc 1 697 0
 648 0002 031C     		mov	r3, r0
 649 0004 0D1C     		mov	r5, r1
 650 0006 234C     		ldr	r4, .L65
 651 0008 4022     		mov	r2, #64
 652 000a 0878     		ldrb	r0, [r1]
 653              	.LVL46:
 654 000c 4E78     		ldrb	r6, [r1, #1]
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 655              		.loc 1 704 0
 656 000e 002B     		cmp	r3, #0
 657 0010 04D1     		bne	.L57
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 658              		.loc 1 706 0
 659 0012 A168     		ldr	r1, [r4, #8]
 660              	.LVL47:
 661 0014 0A40     		and	r2, r1
 662 0016 06D1     		bne	.L58
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 663              		.loc 1 713 0
 664 0018 EA70     		strb	r2, [r5, #3]
 665 001a 04E0     		b	.L58
 666              	.L57:
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 667              		.loc 1 721 0
 668 001c A368     		ldr	r3, [r4, #8]
 669              	.LVL48:
 670 001e 1340     		and	r3, r2
 671 0020 2ED1     		bne	.L59
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 672              		.loc 1 729 0
 673 0022 CB70     		strb	r3, [r1, #3]
 674 0024 2CE0     		b	.L59
 675              	.LVL49:
 676              	.L58:
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 677              		.loc 1 746 0
 678 0026 FFF7FEFF 		bl	RTC_ByteToBcd2
 679              	.LVL50:
 680 002a 071C     		mov	r7, r0
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 681              		.loc 1 747 0
 682 002c 301C     		mov	r0, r6
 683 002e FFF7FEFF 		bl	RTC_ByteToBcd2
 684 0032 061C     		mov	r6, r0
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 685              		.loc 1 748 0
 686 0034 A878     		ldrb	r0, [r5, #2]
 687 0036 FFF7FEFF 		bl	RTC_ByteToBcd2
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 688              		.loc 1 749 0
 689 003a EB78     		ldrb	r3, [r5, #3]
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 690              		.loc 1 746 0
 691 003c 3A04     		lsl	r2, r7, #16
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 692              		.loc 1 749 0
 693 003e 1D04     		lsl	r5, r3, #16
 694              	.LVL51:
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 695              		.loc 1 746 0
 696 0040 2843     		orr	r0, r5
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 697              		.loc 1 747 0
 698 0042 071C     		mov	r7, r0
 699 0044 1743     		orr	r7, r2
 700 0046 3602     		lsl	r6, r6, #8
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 701              		.loc 1 746 0
 702 0048 3743     		orr	r7, r6
 703              	.LVL52:
 704              	.L61:
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 705              		.loc 1 753 0
 706 004a CA21     		mov	r1, #202
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 707              		.loc 1 754 0
 708 004c 5320     		mov	r0, #83
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 709              		.loc 1 753 0
 710 004e 6162     		str	r1, [r4, #36]
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 711              		.loc 1 754 0
 712 0050 6062     		str	r0, [r4, #36]
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 713              		.loc 1 757 0
 714 0052 FFF7FEFF 		bl	RTC_EnterInitMode
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 715              		.loc 1 753 0
 716 0056 0F4D     		ldr	r5, .L65
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 717              		.loc 1 757 0
 718 0058 061E     		sub	r6, r0, #0
 719 005a 0DD0     		beq	.L60
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 720              		.loc 1 764 0
 721 005c 0E4E     		ldr	r6, .L65+4
 722 005e 3740     		and	r7, r6
 723              	.LVL53:
 724 0060 2F60     		str	r7, [r5]
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode(); 
 725              		.loc 1 767 0
 726 0062 FFF7FEFF 		bl	RTC_ExitInitMode
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 727              		.loc 1 770 0
 728 0066 AA68     		ldr	r2, [r5, #8]
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 729              		.loc 1 783 0
 730 0068 0126     		mov	r6, #1
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 731              		.loc 1 770 0
 732 006a 9206     		lsl	r2, r2, #26
 733 006c 04D4     		bmi	.L60
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 734              		.loc 1 772 0
 735 006e FFF7FEFF 		bl	RTC_WaitForSynchro
 736 0072 0028     		cmp	r0, #0
 737 0074 00D1     		bne	.L60
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = ERROR;
 738              		.loc 1 774 0
 739 0076 061C     		mov	r6, r0
 740              	.L60:
 741              	.LVL54:
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 742              		.loc 1 788 0
 743 0078 FF27     		mov	r7, #255
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 744              		.loc 1 791 0
 745 007a 301C     		mov	r0, r6
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 746              		.loc 1 788 0
 747 007c 6762     		str	r7, [r4, #36]
 748              		@ sp needed for prologue
 749              	.LVL55:
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 750              		.loc 1 791 0
 751 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 752              	.LVL56:
 753              	.L59:
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 754              		.loc 1 739 0
 755 0080 0704     		lsl	r7, r0, #16
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 756              		.loc 1 740 0
 757 0082 3102     		lsl	r1, r6, #8
 758              	.LVL57:
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 759              		.loc 1 741 0
 760 0084 A878     		ldrb	r0, [r5, #2]
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 761              		.loc 1 742 0
 762 0086 EB78     		ldrb	r3, [r5, #3]
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 763              		.loc 1 739 0
 764 0088 0F43     		orr	r7, r1
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 765              		.loc 1 740 0
 766 008a 0743     		orr	r7, r0
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 767              		.loc 1 742 0
 768 008c 1D04     		lsl	r5, r3, #16
 769              	.LVL58:
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 770              		.loc 1 739 0
 771 008e 2F43     		orr	r7, r5
 772              	.LVL59:
 773 0090 DBE7     		b	.L61
 774              	.L66:
 775 0092 C046     		.align	2
 776              	.L65:
 777 0094 00280040 		.word	1073752064
 778 0098 7F7F7F00 		.word	8355711
 779              		.cfi_endproc
 780              	.LFE42:
 782              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 783              		.align	1
 784              		.global	RTC_TimeStructInit
 785              		.code	16
 786              		.thumb_func
 788              	RTC_TimeStructInit:
 789              	.LFB43:
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 790              		.loc 1 801 0
 791              		.cfi_startproc
 792              	.LVL60:
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 793              		.loc 1 803 0
 794 0000 0023     		mov	r3, #0
 795 0002 C370     		strb	r3, [r0, #3]
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 796              		.loc 1 804 0
 797 0004 0370     		strb	r3, [r0]
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 798              		.loc 1 805 0
 799 0006 4370     		strb	r3, [r0, #1]
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 800              		.loc 1 806 0
 801 0008 8370     		strb	r3, [r0, #2]
 802              		@ sp needed for prologue
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 803              		.loc 1 807 0
 804 000a 7047     		bx	lr
 805              		.cfi_endproc
 806              	.LFE43:
 808              		.section	.text.RTC_GetTime,"ax",%progbits
 809              		.align	1
 810              		.global	RTC_GetTime
 811              		.code	16
 812              		.thumb_func
 814              	RTC_GetTime:
 815              	.LFB44:
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 816              		.loc 1 820 0
 817              		.cfi_startproc
 818 0000 70B5     		push	{r4, r5, r6, lr}
 819              	.LCFI9:
 820              		.cfi_def_cfa_offset 16
 821              		.cfi_offset 4, -16
 822              		.cfi_offset 5, -12
 823              		.cfi_offset 6, -8
 824              		.cfi_offset 14, -4
 825              	.LVL61:
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 826              		.loc 1 827 0
 827 0002 114A     		ldr	r2, .L70
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 828              		.loc 1 820 0
 829 0004 031C     		mov	r3, r0
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 830              		.loc 1 827 0
 831 0006 1668     		ldr	r6, [r2]
 832 0008 104A     		ldr	r2, .L70+4
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 833              		.loc 1 820 0
 834 000a 0C1C     		mov	r4, r1
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 835              		.loc 1 827 0
 836 000c 3240     		and	r2, r6
 837              	.LVL62:
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 838              		.loc 1 830 0
 839 000e 9002     		lsl	r0, r2, #10
 840              	.LVL63:
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 841              		.loc 1 831 0
 842 0010 5504     		lsl	r5, r2, #17
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 843              		.loc 1 832 0
 844 0012 7F26     		mov	r6, #127
 845 0014 1640     		and	r6, r2
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 846              		.loc 1 830 0
 847 0016 800E     		lsr	r0, r0, #26
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 848              		.loc 1 831 0
 849 0018 6D0E     		lsr	r5, r5, #25
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 850              		.loc 1 830 0
 851 001a 0870     		strb	r0, [r1]
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 852              		.loc 1 831 0
 853 001c 4D70     		strb	r5, [r1, #1]
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 854              		.loc 1 832 0
 855 001e 8E70     		strb	r6, [r1, #2]
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 856              		.loc 1 833 0
 857 0020 8021     		mov	r1, #128
 858              	.LVL64:
 859 0022 C903     		lsl	r1, r1, #15
 860 0024 0A40     		and	r2, r1
 861              	.LVL65:
 862 0026 120C     		lsr	r2, r2, #16
 863 0028 E270     		strb	r2, [r4, #3]
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 864              		.loc 1 836 0
 865 002a 002B     		cmp	r3, #0
 866 002c 0AD1     		bne	.L68
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 867              		.loc 1 839 0
 868 002e FFF7FEFF 		bl	RTC_Bcd2ToByte
 869              	.LVL66:
 870 0032 2070     		strb	r0, [r4]
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 871              		.loc 1 840 0
 872 0034 281C     		mov	r0, r5
 873 0036 FFF7FEFF 		bl	RTC_Bcd2ToByte
 874 003a 6070     		strb	r0, [r4, #1]
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);
 875              		.loc 1 841 0
 876 003c 301C     		mov	r0, r6
 877 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 878 0042 A070     		strb	r0, [r4, #2]
 879              	.L68:
 880              		@ sp needed for prologue
 881              	.LVL67:
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 882              		.loc 1 843 0
 883 0044 70BD     		pop	{r4, r5, r6, pc}
 884              	.L71:
 885 0046 C046     		.align	2
 886              	.L70:
 887 0048 00280040 		.word	1073752064
 888 004c 7F7F7F00 		.word	8355711
 889              		.cfi_endproc
 890              	.LFE44:
 892              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 893              		.align	1
 894              		.global	RTC_GetSubSecond
 895              		.code	16
 896              		.thumb_func
 898              	RTC_GetSubSecond:
 899              	.LFB45:
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 900              		.loc 1 853 0
 901              		.cfi_startproc
 902              	.LVL68:
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 903              		.loc 1 857 0
 904 0000 014B     		ldr	r3, .L73
 905              		@ sp needed for prologue
 906 0002 986A     		ldr	r0, [r3, #40]
 907              	.LVL69:
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   (void) (RTC->DR);
 908              		.loc 1 860 0
 909 0004 5B68     		ldr	r3, [r3, #4]
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 910              		.loc 1 863 0
 911 0006 7047     		bx	lr
 912              	.L74:
 913              		.align	2
 914              	.L73:
 915 0008 00280040 		.word	1073752064
 916              		.cfi_endproc
 917              	.LFE45:
 919              		.section	.text.RTC_SetDate,"ax",%progbits
 920              		.align	1
 921              		.global	RTC_SetDate
 922              		.code	16
 923              		.thumb_func
 925              	RTC_SetDate:
 926              	.LFB46:
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 927              		.loc 1 878 0
 928              		.cfi_startproc
 929 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 930              	.LCFI10:
 931              		.cfi_def_cfa_offset 24
 932              		.cfi_offset 3, -24
 933              		.cfi_offset 4, -20
 934              		.cfi_offset 5, -16
 935              		.cfi_offset 6, -12
 936              		.cfi_offset 7, -8
 937              		.cfi_offset 14, -4
 938              	.LVL70:
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 939              		.loc 1 878 0
 940 0002 031C     		mov	r3, r0
 941 0004 0C1C     		mov	r4, r1
 942 0006 4A78     		ldrb	r2, [r1, #1]
 943 0008 C878     		ldrb	r0, [r1, #3]
 944              	.LVL71:
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 945              		.loc 1 885 0
 946 000a 002B     		cmp	r3, #0
 947 000c 06D1     		bne	.L76
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 948              		.loc 1 885 0 is_stmt 0 discriminator 1
 949 000e 1023     		mov	r3, #16
 950              	.LVL72:
 951 0010 1A42     		tst	r2, r3
 952 0012 26D0     		beq	.L77
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 953              		.loc 1 887 0 is_stmt 1
 954 0014 9A43     		bic	r2, r3
 955 0016 0A32     		add	r2, r2, #10
 956 0018 4A70     		strb	r2, [r1, #1]
 957 001a 22E0     		b	.L77
 958              	.LVL73:
 959              	.L76:
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 960              		.loc 1 908 0
 961 001c 0604     		lsl	r6, r0, #16
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 962              		.loc 1 909 0
 963 001e 1502     		lsl	r5, r2, #8
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 964              		.loc 1 910 0
 965 0020 8A78     		ldrb	r2, [r1, #2]
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 966              		.loc 1 911 0
 967 0022 0978     		ldrb	r1, [r1]
 968              	.LVL74:
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 969              		.loc 1 908 0
 970 0024 2E43     		orr	r6, r5
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 971              		.loc 1 909 0
 972 0026 1643     		orr	r6, r2
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 973              		.loc 1 911 0
 974 0028 4803     		lsl	r0, r1, #13
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 975              		.loc 1 908 0
 976 002a 0643     		orr	r6, r0
 977              	.LVL75:
 978              	.L79:
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 979              		.loc 1 922 0
 980 002c 164C     		ldr	r4, .L83
 981 002e CA23     		mov	r3, #202
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 982              		.loc 1 923 0
 983 0030 5327     		mov	r7, #83
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 984              		.loc 1 922 0
 985 0032 6362     		str	r3, [r4, #36]
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 986              		.loc 1 923 0
 987 0034 6762     		str	r7, [r4, #36]
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 988              		.loc 1 926 0
 989 0036 FFF7FEFF 		bl	RTC_EnterInitMode
 990 003a 051E     		sub	r5, r0, #0
 991 003c 0DD0     		beq	.L78
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 992              		.loc 1 933 0
 993 003e 1348     		ldr	r0, .L83+4
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 994              		.loc 1 952 0
 995 0040 0125     		mov	r5, #1
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 996              		.loc 1 933 0
 997 0042 0640     		and	r6, r0
 998              	.LVL76:
 999 0044 6660     		str	r6, [r4, #4]
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_ExitInitMode(); 
 1000              		.loc 1 936 0
 1001 0046 FFF7FEFF 		bl	RTC_ExitInitMode
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 1002              		.loc 1 939 0
 1003 004a A668     		ldr	r6, [r4, #8]
 1004 004c B206     		lsl	r2, r6, #26
 1005 004e 04D4     		bmi	.L78
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if (RTC_WaitForSynchro() == ERROR)
 1006              		.loc 1 941 0
 1007 0050 FFF7FEFF 		bl	RTC_WaitForSynchro
 1008 0054 0028     		cmp	r0, #0
 1009 0056 00D1     		bne	.L78
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = ERROR;
 1010              		.loc 1 943 0
 1011 0058 051C     		mov	r5, r0
 1012              	.L78:
 1013              	.LVL77:
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1014              		.loc 1 956 0
 1015 005a FF21     		mov	r1, #255
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1016              		.loc 1 959 0
 1017 005c 281C     		mov	r0, r5
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1018              		.loc 1 956 0
 1019 005e 6162     		str	r1, [r4, #36]
 1020              		@ sp needed for prologue
 1021              	.LVL78:
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1022              		.loc 1 959 0
 1023 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1024              	.LVL79:
 1025              	.L77:
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1026              		.loc 1 915 0
 1027 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 1028              	.LVL80:
 1029 0066 051C     		mov	r5, r0
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1030              		.loc 1 916 0
 1031 0068 6078     		ldrb	r0, [r4, #1]
 1032 006a FFF7FEFF 		bl	RTC_ByteToBcd2
 1033 006e 071C     		mov	r7, r0
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1034              		.loc 1 917 0
 1035 0070 A078     		ldrb	r0, [r4, #2]
 1036 0072 FFF7FEFF 		bl	RTC_ByteToBcd2
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1037              		.loc 1 918 0
 1038 0076 2378     		ldrb	r3, [r4]
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1039              		.loc 1 915 0
 1040 0078 2A04     		lsl	r2, r5, #16
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1041              		.loc 1 918 0
 1042 007a 5E03     		lsl	r6, r3, #13
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1043              		.loc 1 915 0
 1044 007c 0643     		orr	r6, r0
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1045              		.loc 1 916 0
 1046 007e 1643     		orr	r6, r2
 1047 0080 3C02     		lsl	r4, r7, #8
 1048              	.LVL81:
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1049              		.loc 1 915 0
 1050 0082 2643     		orr	r6, r4
 1051              	.LVL82:
 1052 0084 D2E7     		b	.L79
 1053              	.L84:
 1054 0086 C046     		.align	2
 1055              	.L83:
 1056 0088 00280040 		.word	1073752064
 1057 008c 3FFFFF00 		.word	16777023
 1058              		.cfi_endproc
 1059              	.LFE46:
 1061              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1062              		.align	1
 1063              		.global	RTC_DateStructInit
 1064              		.code	16
 1065              		.thumb_func
 1067              	RTC_DateStructInit:
 1068              	.LFB47:
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1069              		.loc 1 969 0
 1070              		.cfi_startproc
 1071              	.LVL83:
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1072              		.loc 1 971 0
 1073 0000 0121     		mov	r1, #1
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1074              		.loc 1 974 0
 1075 0002 0023     		mov	r3, #0
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1076              		.loc 1 971 0
 1077 0004 0170     		strb	r1, [r0]
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1078              		.loc 1 972 0
 1079 0006 8170     		strb	r1, [r0, #2]
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1080              		.loc 1 973 0
 1081 0008 4170     		strb	r1, [r0, #1]
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1082              		.loc 1 974 0
 1083 000a C370     		strb	r3, [r0, #3]
 1084              		@ sp needed for prologue
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1085              		.loc 1 975 0
 1086 000c 7047     		bx	lr
 1087              		.cfi_endproc
 1088              	.LFE47:
 1090              		.section	.text.RTC_GetDate,"ax",%progbits
 1091              		.align	1
 1092              		.global	RTC_GetDate
 1093              		.code	16
 1094              		.thumb_func
 1096              	RTC_GetDate:
 1097              	.LFB48:
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1098              		.loc 1 988 0
 1099              		.cfi_startproc
 1100 0000 70B5     		push	{r4, r5, r6, lr}
 1101              	.LCFI11:
 1102              		.cfi_def_cfa_offset 16
 1103              		.cfi_offset 4, -16
 1104              		.cfi_offset 5, -12
 1105              		.cfi_offset 6, -8
 1106              		.cfi_offset 14, -4
 1107              	.LVL84:
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1108              		.loc 1 995 0
 1109 0002 0F4E     		ldr	r6, .L88
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1110              		.loc 1 988 0
 1111 0004 031C     		mov	r3, r0
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1112              		.loc 1 995 0
 1113 0006 0F4A     		ldr	r2, .L88+4
 1114 0008 7068     		ldr	r0, [r6, #4]
 1115              	.LVL85:
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1116              		.loc 1 1000 0
 1117 000a 3F26     		mov	r6, #63
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1118              		.loc 1 995 0
 1119 000c 0240     		and	r2, r0
 1120              	.LVL86:
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1121              		.loc 1 999 0
 1122 000e D504     		lsl	r5, r2, #19
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1123              		.loc 1 998 0
 1124 0010 100C     		lsr	r0, r2, #16
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1125              		.loc 1 1000 0
 1126 0012 1640     		and	r6, r2
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1127              		.loc 1 999 0
 1128 0014 ED0E     		lsr	r5, r5, #27
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1129              		.loc 1 988 0
 1130 0016 0C1C     		mov	r4, r1
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1131              		.loc 1 998 0
 1132 0018 C870     		strb	r0, [r1, #3]
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1133              		.loc 1 999 0
 1134 001a 4D70     		strb	r5, [r1, #1]
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1135              		.loc 1 1000 0
 1136 001c 8E70     		strb	r6, [r1, #2]
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1137              		.loc 1 1001 0
 1138 001e 1104     		lsl	r1, r2, #16
 1139              	.LVL87:
 1140 0020 4A0F     		lsr	r2, r1, #29
 1141              	.LVL88:
 1142 0022 2270     		strb	r2, [r4]
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1143              		.loc 1 1004 0
 1144 0024 002B     		cmp	r3, #0
 1145 0026 0AD1     		bne	.L86
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1146              		.loc 1 1007 0
 1147 0028 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1148              	.LVL89:
 1149 002c E070     		strb	r0, [r4, #3]
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1150              		.loc 1 1008 0
 1151 002e 281C     		mov	r0, r5
 1152 0030 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1153 0034 6070     		strb	r0, [r4, #1]
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1154              		.loc 1 1009 0
 1155 0036 301C     		mov	r0, r6
 1156 0038 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1157 003c A070     		strb	r0, [r4, #2]
 1158              	.L86:
 1159              		@ sp needed for prologue
 1160              	.LVL90:
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1161              		.loc 1 1012 0
 1162 003e 70BD     		pop	{r4, r5, r6, pc}
 1163              	.L89:
 1164              		.align	2
 1165              	.L88:
 1166 0040 00280040 		.word	1073752064
 1167 0044 3FFFFF00 		.word	16777023
 1168              		.cfi_endproc
 1169              	.LFE48:
 1171              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1172              		.align	1
 1173              		.global	RTC_SetAlarm
 1174              		.code	16
 1175              		.thumb_func
 1177              	RTC_SetAlarm:
 1178              	.LFB49:
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1179              		.loc 1 1048 0
 1180              		.cfi_startproc
 1181 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1182              	.LCFI12:
 1183              		.cfi_def_cfa_offset 32
 1184              		.cfi_offset 0, -32
 1185              		.cfi_offset 1, -28
 1186              		.cfi_offset 2, -24
 1187              		.cfi_offset 4, -20
 1188              		.cfi_offset 5, -16
 1189              		.cfi_offset 6, -12
 1190              		.cfi_offset 7, -8
 1191              		.cfi_offset 14, -4
 1192              	.LVL91:
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1193              		.loc 1 1048 0
 1194 0002 141C     		mov	r4, r2
 1195 0004 031C     		mov	r3, r0
 1196 0006 224D     		ldr	r5, .L95
 1197 0008 4022     		mov	r2, #64
 1198              	.LVL92:
 1199 000a 2078     		ldrb	r0, [r4]
 1200              	.LVL93:
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1201              		.loc 1 1057 0
 1202 000c 002B     		cmp	r3, #0
 1203 000e 04D1     		bne	.L91
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1204              		.loc 1 1059 0
 1205 0010 A968     		ldr	r1, [r5, #8]
 1206              	.LVL94:
 1207 0012 0A40     		and	r2, r1
 1208 0014 06D1     		bne	.L92
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1209              		.loc 1 1066 0
 1210 0016 E270     		strb	r2, [r4, #3]
 1211 0018 04E0     		b	.L92
 1212              	.LVL95:
 1213              	.L91:
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1214              		.loc 1 1083 0
 1215 001a AB68     		ldr	r3, [r5, #8]
 1216              	.LVL96:
 1217 001c 1340     		and	r3, r2
 1218 001e 25D1     		bne	.L93
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1219              		.loc 1 1091 0
 1220 0020 E370     		strb	r3, [r4, #3]
 1221 0022 23E0     		b	.L93
 1222              	.LVL97:
 1223              	.L92:
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1224              		.loc 1 1123 0
 1225 0024 FFF7FEFF 		bl	RTC_ByteToBcd2
 1226              	.LVL98:
 1227 0028 071C     		mov	r7, r0
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1228              		.loc 1 1124 0
 1229 002a 6078     		ldrb	r0, [r4, #1]
 1230 002c FFF7FEFF 		bl	RTC_ByteToBcd2
 1231 0030 0190     		str	r0, [sp, #4]
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1232              		.loc 1 1125 0
 1233 0032 A078     		ldrb	r0, [r4, #2]
 1234 0034 FFF7FEFF 		bl	RTC_ByteToBcd2
 1235 0038 061C     		mov	r6, r0
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1236              		.loc 1 1127 0
 1237 003a 207B     		ldrb	r0, [r4, #12]
 1238 003c FFF7FEFF 		bl	RTC_ByteToBcd2
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1239              		.loc 1 1123 0
 1240 0040 6168     		ldr	r1, [r4, #4]
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1241              		.loc 1 1126 0
 1242 0042 E278     		ldrb	r2, [r4, #3]
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1243              		.loc 1 1123 0
 1244 0044 A368     		ldr	r3, [r4, #8]
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1245              		.loc 1 1124 0
 1246 0046 019C     		ldr	r4, [sp, #4]
 1247              	.LVL99:
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1248              		.loc 1 1123 0
 1249 0048 0B43     		orr	r3, r1
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1250              		.loc 1 1126 0
 1251 004a 1104     		lsl	r1, r2, #16
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1252              		.loc 1 1124 0
 1253 004c 0B43     		orr	r3, r1
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1254              		.loc 1 1125 0
 1255 004e 1E43     		orr	r6, r3
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1256              		.loc 1 1123 0
 1257 0050 3F04     		lsl	r7, r7, #16
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1258              		.loc 1 1126 0
 1259 0052 3E43     		orr	r6, r7
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1260              		.loc 1 1124 0
 1261 0054 2202     		lsl	r2, r4, #8
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1262              		.loc 1 1127 0
 1263 0056 1643     		orr	r6, r2
 1264 0058 0006     		lsl	r0, r0, #24
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1265              		.loc 1 1123 0
 1266 005a 0643     		orr	r6, r0
 1267              	.LVL100:
 1268              	.L94:
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1269              		.loc 1 1133 0
 1270 005c CA24     		mov	r4, #202
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1271              		.loc 1 1134 0
 1272 005e 5320     		mov	r0, #83
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1273              		.loc 1 1133 0
 1274 0060 6C62     		str	r4, [r5, #36]
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1275              		.loc 1 1134 0
 1276 0062 6862     		str	r0, [r5, #36]
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ALRMAR = (uint32_t)tmpreg;
 1277              		.loc 1 1137 0
 1278 0064 EE61     		str	r6, [r5, #28]
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1279              		.loc 1 1140 0
 1280 0066 FF26     		mov	r6, #255
 1281              	.LVL101:
 1282 0068 6E62     		str	r6, [r5, #36]
 1283              		@ sp needed for prologue
 1284              	.LVL102:
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1285              		.loc 1 1141 0
 1286 006a F7BD     		pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 1287              	.LVL103:
 1288              	.L93:
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1289              		.loc 1 1113 0
 1290 006c A168     		ldr	r1, [r4, #8]
 1291              	.LVL104:
 1292 006e 6668     		ldr	r6, [r4, #4]
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1293              		.loc 1 1115 0
 1294 0070 A278     		ldrb	r2, [r4, #2]
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1295              		.loc 1 1113 0
 1296 0072 0E43     		orr	r6, r1
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1297              		.loc 1 1114 0
 1298 0074 6778     		ldrb	r7, [r4, #1]
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1299              		.loc 1 1113 0
 1300 0076 0304     		lsl	r3, r0, #16
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1301              		.loc 1 1114 0
 1302 0078 1643     		orr	r6, r2
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1303              		.loc 1 1116 0
 1304 007a E178     		ldrb	r1, [r4, #3]
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1305              		.loc 1 1115 0
 1306 007c 1E43     		orr	r6, r3
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1307              		.loc 1 1114 0
 1308 007e 3802     		lsl	r0, r7, #8
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1309              		.loc 1 1117 0
 1310 0080 237B     		ldrb	r3, [r4, #12]
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1311              		.loc 1 1116 0
 1312 0082 0643     		orr	r6, r0
 1313 0084 0A04     		lsl	r2, r1, #16
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1314              		.loc 1 1117 0
 1315 0086 1643     		orr	r6, r2
 1316 0088 1F06     		lsl	r7, r3, #24
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1317              		.loc 1 1113 0
 1318 008a 3E43     		orr	r6, r7
 1319              	.LVL105:
 1320 008c E6E7     		b	.L94
 1321              	.L96:
 1322 008e C046     		.align	2
 1323              	.L95:
 1324 0090 00280040 		.word	1073752064
 1325              		.cfi_endproc
 1326              	.LFE49:
 1328              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1329              		.align	1
 1330              		.global	RTC_AlarmStructInit
 1331              		.code	16
 1332              		.thumb_func
 1334              	RTC_AlarmStructInit:
 1335              	.LFB50:
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1336              		.loc 1 1152 0
 1337              		.cfi_startproc
 1338              	.LVL106:
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1339              		.loc 1 1154 0
 1340 0000 0023     		mov	r3, #0
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1341              		.loc 1 1161 0
 1342 0002 0122     		mov	r2, #1
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1343              		.loc 1 1154 0
 1344 0004 C370     		strb	r3, [r0, #3]
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1345              		.loc 1 1155 0
 1346 0006 0370     		strb	r3, [r0]
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1347              		.loc 1 1156 0
 1348 0008 4370     		strb	r3, [r0, #1]
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1349              		.loc 1 1157 0
 1350 000a 8370     		strb	r3, [r0, #2]
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1351              		.loc 1 1160 0
 1352 000c 8360     		str	r3, [r0, #8]
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1353              		.loc 1 1161 0
 1354 000e 0273     		strb	r2, [r0, #12]
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1355              		.loc 1 1164 0
 1356 0010 4360     		str	r3, [r0, #4]
 1357              		@ sp needed for prologue
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1358              		.loc 1 1165 0
 1359 0012 7047     		bx	lr
 1360              		.cfi_endproc
 1361              	.LFE50:
 1363              		.section	.text.RTC_GetAlarm,"ax",%progbits
 1364              		.align	1
 1365              		.global	RTC_GetAlarm
 1366              		.code	16
 1367              		.thumb_func
 1369              	RTC_GetAlarm:
 1370              	.LFB51:
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1371              		.loc 1 1181 0
 1372              		.cfi_startproc
 1373 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1374              	.LCFI13:
 1375              		.cfi_def_cfa_offset 24
 1376              		.cfi_offset 3, -24
 1377              		.cfi_offset 4, -20
 1378              		.cfi_offset 5, -16
 1379              		.cfi_offset 6, -12
 1380              		.cfi_offset 7, -8
 1381              		.cfi_offset 14, -4
 1382              	.LVL107:
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ALRMAR);
 1383              		.loc 1 1189 0
 1384 0002 174E     		ldr	r6, .L100
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1385              		.loc 1 1181 0
 1386 0004 141C     		mov	r4, r2
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1387              		.loc 1 1198 0
 1388 0006 8021     		mov	r1, #128
 1389              	.LVL108:
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ALRMAR);
 1390              		.loc 1 1189 0
 1391 0008 F269     		ldr	r2, [r6, #28]
 1392              	.LVL109:
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1393              		.loc 1 1198 0
 1394 000a CF03     		lsl	r7, r1, #15
 1395 000c 1740     		and	r7, r2
 1396 000e 390C     		lsr	r1, r7, #16
 1397 0010 E170     		strb	r1, [r4, #3]
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1398              		.loc 1 1200 0
 1399 0012 8021     		mov	r1, #128
 1400 0014 C905     		lsl	r1, r1, #23
 1401 0016 1140     		and	r1, r2
 1402 0018 A160     		str	r1, [r4, #8]
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1403              		.loc 1 1201 0
 1404 001a 1249     		ldr	r1, .L100+4
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1405              		.loc 1 1194 0
 1406 001c 5504     		lsl	r5, r2, #17
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1407              		.loc 1 1199 0
 1408 001e 9700     		lsl	r7, r2, #2
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1409              		.loc 1 1181 0
 1410 0020 031C     		mov	r3, r0
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1411              		.loc 1 1196 0
 1412 0022 7F26     		mov	r6, #127
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1413              		.loc 1 1192 0
 1414 0024 9002     		lsl	r0, r2, #10
 1415              	.LVL110:
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1416              		.loc 1 1196 0
 1417 0026 1640     		and	r6, r2
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1418              		.loc 1 1192 0
 1419 0028 800E     		lsr	r0, r0, #26
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1420              		.loc 1 1194 0
 1421 002a 6D0E     		lsr	r5, r5, #25
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1422              		.loc 1 1199 0
 1423 002c BF0E     		lsr	r7, r7, #26
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1424              		.loc 1 1201 0
 1425 002e 0A40     		and	r2, r1
 1426              	.LVL111:
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1427              		.loc 1 1192 0
 1428 0030 2070     		strb	r0, [r4]
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1429              		.loc 1 1194 0
 1430 0032 6570     		strb	r5, [r4, #1]
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1431              		.loc 1 1196 0
 1432 0034 A670     		strb	r6, [r4, #2]
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1433              		.loc 1 1199 0
 1434 0036 2773     		strb	r7, [r4, #12]
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1435              		.loc 1 1201 0
 1436 0038 6260     		str	r2, [r4, #4]
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1437              		.loc 1 1203 0
 1438 003a 002B     		cmp	r3, #0
 1439 003c 0ED1     		bne	.L98
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1440              		.loc 1 1205 0
 1441 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1442              	.LVL112:
 1443 0042 2070     		strb	r0, [r4]
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1444              		.loc 1 1207 0
 1445 0044 281C     		mov	r0, r5
 1446 0046 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1447 004a 6070     		strb	r0, [r4, #1]
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1448              		.loc 1 1209 0
 1449 004c 301C     		mov	r0, r6
 1450 004e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1451 0052 A070     		strb	r0, [r4, #2]
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1452              		.loc 1 1211 0
 1453 0054 381C     		mov	r0, r7
 1454 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1455 005a 2073     		strb	r0, [r4, #12]
 1456              	.L98:
 1457              		@ sp needed for prologue
 1458              	.LVL113:
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1459              		.loc 1 1213 0
 1460 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1461              	.L101:
 1462 005e C046     		.align	2
 1463              	.L100:
 1464 0060 00280040 		.word	1073752064
 1465 0064 80808080 		.word	-2139062144
 1466              		.cfi_endproc
 1467              	.LFE51:
 1469              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1470              		.align	1
 1471              		.global	RTC_AlarmCmd
 1472              		.code	16
 1473              		.thumb_func
 1475              	RTC_AlarmCmd:
 1476              	.LFB52:
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1477              		.loc 1 1227 0
 1478              		.cfi_startproc
 1479 0000 13B5     		push	{r0, r1, r4, lr}
 1480              	.LCFI14:
 1481              		.cfi_def_cfa_offset 16
 1482              		.cfi_offset 0, -16
 1483              		.cfi_offset 1, -12
 1484              		.cfi_offset 4, -8
 1485              		.cfi_offset 14, -4
 1486              	.LVL114:
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1487              		.loc 1 1228 0
 1488 0002 0023     		mov	r3, #0
 1489 0004 0193     		str	r3, [sp, #4]
 1490              	.LVL115:
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1491              		.loc 1 1237 0
 1492 0006 114B     		ldr	r3, .L109
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1493              		.loc 1 1238 0
 1494 0008 5322     		mov	r2, #83
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1495              		.loc 1 1237 0
 1496 000a CA24     		mov	r4, #202
 1497 000c 5C62     		str	r4, [r3, #36]
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1498              		.loc 1 1238 0
 1499 000e 5A62     		str	r2, [r3, #36]
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1500              		.loc 1 1243 0
 1501 0010 9A68     		ldr	r2, [r3, #8]
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 1502              		.loc 1 1241 0
 1503 0012 0029     		cmp	r1, #0
 1504 0014 03D0     		beq	.L103
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1505              		.loc 1 1243 0
 1506 0016 1043     		orr	r0, r2
 1507              	.LVL116:
 1508 0018 9860     		str	r0, [r3, #8]
 1509              	.LVL117:
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;    
 1510              		.loc 1 1245 0
 1511 001a 0120     		mov	r0, #1
 1512 001c 13E0     		b	.L104
 1513              	.LVL118:
 1514              	.L103:
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 1515              		.loc 1 1250 0
 1516 001e 8243     		bic	r2, r0
 1517 0020 9A60     		str	r2, [r3, #8]
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1518              		.loc 1 1255 0
 1519 0022 000A     		lsr	r0, r0, #8
 1520              	.LVL119:
 1521              	.L106:
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 1522              		.loc 1 1255 0 is_stmt 0 discriminator 1
 1523 0024 DA68     		ldr	r2, [r3, #12]
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmcounter++;  
 1524              		.loc 1 1256 0 is_stmt 1 discriminator 1
 1525 0026 019C     		ldr	r4, [sp, #4]
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1526              		.loc 1 1257 0 discriminator 1
 1527 0028 8021     		mov	r1, #128
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       alarmcounter++;  
 1528              		.loc 1 1256 0 discriminator 1
 1529 002a 0134     		add	r4, r4, #1
 1530              	.LVL120:
 1531 002c 0194     		str	r4, [sp, #4]
 1532              	.LVL121:
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1533              		.loc 1 1257 0 discriminator 1
 1534 002e 019C     		ldr	r4, [sp, #4]
 1535              	.LVL122:
 1536 0030 C901     		lsl	r1, r1, #7
 1537 0032 8C42     		cmp	r4, r1
 1538 0034 01D0     		beq	.L105
 1539 0036 0242     		tst	r2, r0
 1540 0038 F4D0     		beq	.L106
 1541              	.L105:
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 1542              		.loc 1 1259 0
 1543 003a DA68     		ldr	r2, [r3, #12]
 1544 003c 0240     		and	r2, r0
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 1545              		.loc 1 1265 0
 1546 003e 0120     		mov	r0, #1
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 1547              		.loc 1 1259 0
 1548 0040 002A     		cmp	r2, #0
 1549 0042 00D1     		bne	.L104
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
 1550              		.loc 1 1261 0
 1551 0044 101C     		mov	r0, r2
 1552              	.LVL123:
 1553              	.L104:
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1554              		.loc 1 1270 0
 1555 0046 FF22     		mov	r2, #255
 1556 0048 5A62     		str	r2, [r3, #36]
 1557              		@ sp needed for prologue
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1558              		.loc 1 1273 0
 1559 004a 16BD     		pop	{r1, r2, r4, pc}
 1560              	.L110:
 1561              		.align	2
 1562              	.L109:
 1563 004c 00280040 		.word	1073752064
 1564              		.cfi_endproc
 1565              	.LFE52:
 1567              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 1568              		.align	1
 1569              		.global	RTC_AlarmSubSecondConfig
 1570              		.code	16
 1571              		.thumb_func
 1573              	RTC_AlarmSubSecondConfig:
 1574              	.LFB53:
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1575              		.loc 1 1319 0
 1576              		.cfi_startproc
 1577              	.LVL124:
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1578              		.loc 1 1328 0
 1579 0000 054B     		ldr	r3, .L112
 1580 0002 CA20     		mov	r0, #202
 1581              	.LVL125:
 1582 0004 5862     		str	r0, [r3, #36]
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1583              		.loc 1 1329 0
 1584 0006 5320     		mov	r0, #83
 1585 0008 5862     		str	r0, [r3, #36]
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t) (((uint32_t)(RTC_AlarmSubSecondValue)) | ((uint32_t)(RTC_AlarmSubSecondMask) 
 1586              		.loc 1 1332 0
 1587 000a 1006     		lsl	r0, r2, #24
 1588 000c 0143     		orr	r1, r0
 1589              	.LVL126:
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1590              		.loc 1 1338 0
 1591 000e FF22     		mov	r2, #255
 1592              	.LVL127:
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ALRMASSR = tmpreg;
 1593              		.loc 1 1335 0
 1594 0010 5964     		str	r1, [r3, #68]
 1595              		@ sp needed for prologue
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1596              		.loc 1 1338 0
 1597 0012 5A62     		str	r2, [r3, #36]
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1598              		.loc 1 1340 0
 1599 0014 7047     		bx	lr
 1600              	.L113:
 1601 0016 C046     		.align	2
 1602              	.L112:
 1603 0018 00280040 		.word	1073752064
 1604              		.cfi_endproc
 1605              	.LFE53:
 1607              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 1608              		.align	1
 1609              		.global	RTC_GetAlarmSubSecond
 1610              		.code	16
 1611              		.thumb_func
 1613              	RTC_GetAlarmSubSecond:
 1614              	.LFB54:
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1615              		.loc 1 1351 0
 1616              		.cfi_startproc
 1617              	.LVL128:
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 1618              		.loc 1 1355 0
 1619 0000 024B     		ldr	r3, .L115
 1620              		@ sp needed for prologue
 1621 0002 596C     		ldr	r1, [r3, #68]
 1622              	.LVL129:
 1623 0004 4804     		lsl	r0, r1, #17
 1624              	.LVL130:
 1625 0006 400C     		lsr	r0, r0, #17
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1626              		.loc 1 1358 0
 1627 0008 7047     		bx	lr
 1628              	.L116:
 1629 000a C046     		.align	2
 1630              	.L115:
 1631 000c 00280040 		.word	1073752064
 1632              		.cfi_endproc
 1633              	.LFE54:
 1635              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 1636              		.align	1
 1637              		.global	RTC_WakeUpClockConfig
 1638              		.code	16
 1639              		.thumb_func
 1641              	RTC_WakeUpClockConfig:
 1642              	.LFB55:
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1643              		.loc 1 1394 0
 1644              		.cfi_startproc
 1645              	.LVL131:
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1646              		.loc 1 1399 0
 1647 0000 074B     		ldr	r3, .L118
 1648 0002 CA21     		mov	r1, #202
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1649              		.loc 1 1400 0
 1650 0004 5322     		mov	r2, #83
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1651              		.loc 1 1399 0
 1652 0006 5962     		str	r1, [r3, #36]
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1653              		.loc 1 1400 0
 1654 0008 5A62     		str	r2, [r3, #36]
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 1655              		.loc 1 1403 0
 1656 000a 9A68     		ldr	r2, [r3, #8]
 1657 000c 0721     		mov	r1, #7
 1658 000e 8A43     		bic	r2, r1
 1659 0010 9A60     		str	r2, [r3, #8]
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 1660              		.loc 1 1406 0
 1661 0012 9968     		ldr	r1, [r3, #8]
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1662              		.loc 1 1409 0
 1663 0014 FF22     		mov	r2, #255
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 1664              		.loc 1 1406 0
 1665 0016 0843     		orr	r0, r1
 1666              	.LVL132:
 1667 0018 9860     		str	r0, [r3, #8]
 1668              		@ sp needed for prologue
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1669              		.loc 1 1409 0
 1670 001a 5A62     		str	r2, [r3, #36]
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1671              		.loc 1 1410 0
 1672 001c 7047     		bx	lr
 1673              	.L119:
 1674 001e C046     		.align	2
 1675              	.L118:
 1676 0020 00280040 		.word	1073752064
 1677              		.cfi_endproc
 1678              	.LFE55:
 1680              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 1681              		.align	1
 1682              		.global	RTC_SetWakeUpCounter
 1683              		.code	16
 1684              		.thumb_func
 1686              	RTC_SetWakeUpCounter:
 1687              	.LFB56:
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1688              		.loc 1 1422 0
 1689              		.cfi_startproc
 1690              	.LVL133:
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1691              		.loc 1 1427 0
 1692 0000 044B     		ldr	r3, .L121
 1693 0002 CA22     		mov	r2, #202
 1694 0004 5A62     		str	r2, [r3, #36]
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1695              		.loc 1 1428 0
 1696 0006 5321     		mov	r1, #83
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1697              		.loc 1 1434 0
 1698 0008 FF22     		mov	r2, #255
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1699              		.loc 1 1428 0
 1700 000a 5962     		str	r1, [r3, #36]
 1701              		@ sp needed for prologue
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 1702              		.loc 1 1431 0
 1703 000c 5861     		str	r0, [r3, #20]
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1704              		.loc 1 1434 0
 1705 000e 5A62     		str	r2, [r3, #36]
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1706              		.loc 1 1435 0
 1707 0010 7047     		bx	lr
 1708              	.L122:
 1709 0012 C046     		.align	2
 1710              	.L121:
 1711 0014 00280040 		.word	1073752064
 1712              		.cfi_endproc
 1713              	.LFE56:
 1715              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 1716              		.align	1
 1717              		.global	RTC_GetWakeUpCounter
 1718              		.code	16
 1719              		.thumb_func
 1721              	RTC_GetWakeUpCounter:
 1722              	.LFB57:
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1723              		.loc 1 1444 0
 1724              		.cfi_startproc
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 1725              		.loc 1 1446 0
 1726 0000 014B     		ldr	r3, .L124
 1727              		@ sp needed for prologue
 1728 0002 5869     		ldr	r0, [r3, #20]
 1729 0004 80B2     		uxth	r0, r0
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1730              		.loc 1 1447 0
 1731 0006 7047     		bx	lr
 1732              	.L125:
 1733              		.align	2
 1734              	.L124:
 1735 0008 00280040 		.word	1073752064
 1736              		.cfi_endproc
 1737              	.LFE57:
 1739              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 1740              		.align	1
 1741              		.global	RTC_WakeUpCmd
 1742              		.code	16
 1743              		.thumb_func
 1745              	RTC_WakeUpCmd:
 1746              	.LFB58:
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1747              		.loc 1 1457 0
 1748              		.cfi_startproc
 1749 0000 07B5     		push	{r0, r1, r2, lr}
 1750              	.LCFI15:
 1751              		.cfi_def_cfa_offset 16
 1752              		.cfi_offset 0, -16
 1753              		.cfi_offset 1, -12
 1754              		.cfi_offset 2, -8
 1755              		.cfi_offset 14, -4
 1756              	.LVL134:
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 1757              		.loc 1 1458 0
 1758 0002 0023     		mov	r3, #0
 1759 0004 0193     		str	r3, [sp, #4]
 1760              	.LVL135:
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1761              		.loc 1 1466 0
 1762 0006 134B     		ldr	r3, .L133
 1763 0008 CA21     		mov	r1, #202
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1764              		.loc 1 1467 0
 1765 000a 5322     		mov	r2, #83
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1766              		.loc 1 1466 0
 1767 000c 5962     		str	r1, [r3, #36]
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1768              		.loc 1 1467 0
 1769 000e 5A62     		str	r2, [r3, #36]
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 1770              		.loc 1 1472 0
 1771 0010 9968     		ldr	r1, [r3, #8]
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 1772              		.loc 1 1469 0
 1773 0012 0028     		cmp	r0, #0
 1774 0014 05D0     		beq	.L127
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 1775              		.loc 1 1472 0
 1776 0016 8022     		mov	r2, #128
 1777 0018 D000     		lsl	r0, r2, #3
 1778              	.LVL136:
 1779 001a 0843     		orr	r0, r1
 1780 001c 9860     		str	r0, [r3, #8]
 1781              	.LVL137:
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;    
 1782              		.loc 1 1473 0
 1783 001e 0120     		mov	r0, #1
 1784 0020 14E0     		b	.L128
 1785              	.LVL138:
 1786              	.L127:
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 1787              		.loc 1 1478 0
 1788 0022 0D48     		ldr	r0, .L133+4
 1789              	.LVL139:
 1790 0024 0840     		and	r0, r1
 1791 0026 9860     		str	r0, [r3, #8]
 1792              	.LVL140:
 1793              	.L130:
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 1794              		.loc 1 1482 0 discriminator 1
 1795 0028 DA68     		ldr	r2, [r3, #12]
 1796              	.LVL141:
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutcounter++;  
 1797              		.loc 1 1483 0 discriminator 1
 1798 002a 0198     		ldr	r0, [sp, #4]
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1799              		.loc 1 1484 0 discriminator 1
 1800 002c 8021     		mov	r1, #128
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       wutcounter++;  
 1801              		.loc 1 1483 0 discriminator 1
 1802 002e 0130     		add	r0, r0, #1
 1803              	.LVL142:
 1804 0030 0190     		str	r0, [sp, #4]
 1805              	.LVL143:
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1806              		.loc 1 1484 0 discriminator 1
 1807 0032 0198     		ldr	r0, [sp, #4]
 1808              	.LVL144:
 1809 0034 C901     		lsl	r1, r1, #7
 1810 0036 8842     		cmp	r0, r1
 1811 0038 01D0     		beq	.L129
 1812 003a 5107     		lsl	r1, r2, #29
 1813 003c F4D5     		bpl	.L130
 1814              	.L129:
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 1815              		.loc 1 1486 0
 1816 003e D968     		ldr	r1, [r3, #12]
 1817 0040 0422     		mov	r2, #4
 1818              	.LVL145:
 1819 0042 0A40     		and	r2, r1
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = SUCCESS;
 1820              		.loc 1 1492 0
 1821 0044 0120     		mov	r0, #1
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 1822              		.loc 1 1486 0
 1823 0046 002A     		cmp	r2, #0
 1824 0048 00D1     		bne	.L128
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       status = ERROR;
 1825              		.loc 1 1488 0
 1826 004a 101C     		mov	r0, r2
 1827              	.LVL146:
 1828              	.L128:
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1829              		.loc 1 1497 0
 1830 004c FF22     		mov	r2, #255
 1831 004e 5A62     		str	r2, [r3, #36]
 1832              		@ sp needed for prologue
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1833              		.loc 1 1500 0
 1834 0050 0EBD     		pop	{r1, r2, r3, pc}
 1835              	.L134:
 1836 0052 C046     		.align	2
 1837              	.L133:
 1838 0054 00280040 		.word	1073752064
 1839 0058 FFFBFFFF 		.word	-1025
 1840              		.cfi_endproc
 1841              	.LFE58:
 1843              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 1844              		.align	1
 1845              		.global	RTC_DayLightSavingConfig
 1846              		.code	16
 1847              		.thumb_func
 1849              	RTC_DayLightSavingConfig:
 1850              	.LFB59:
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1851              		.loc 1 1535 0
 1852              		.cfi_startproc
 1853 0000 10B5     		push	{r4, lr}
 1854              	.LCFI16:
 1855              		.cfi_def_cfa_offset 8
 1856              		.cfi_offset 4, -8
 1857              		.cfi_offset 14, -4
 1858              	.LVL147:
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1859              		.loc 1 1541 0
 1860 0002 084B     		ldr	r3, .L136
 1861 0004 CA24     		mov	r4, #202
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1862              		.loc 1 1542 0
 1863 0006 5322     		mov	r2, #83
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1864              		.loc 1 1541 0
 1865 0008 5C62     		str	r4, [r3, #36]
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1866              		.loc 1 1542 0
 1867 000a 5A62     		str	r2, [r3, #36]
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 1868              		.loc 1 1545 0
 1869 000c 9C68     		ldr	r4, [r3, #8]
 1870 000e 064A     		ldr	r2, .L136+4
 1871              		@ sp needed for prologue
 1872 0010 2240     		and	r2, r4
 1873 0012 9A60     		str	r2, [r3, #8]
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 1874              		.loc 1 1548 0
 1875 0014 9C68     		ldr	r4, [r3, #8]
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1876              		.loc 1 1551 0
 1877 0016 FF22     		mov	r2, #255
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 1878              		.loc 1 1548 0
 1879 0018 2043     		orr	r0, r4
 1880              	.LVL148:
 1881 001a 0843     		orr	r0, r1
 1882 001c 9860     		str	r0, [r3, #8]
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1883              		.loc 1 1551 0
 1884 001e 5A62     		str	r2, [r3, #36]
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1885              		.loc 1 1552 0
 1886 0020 10BD     		pop	{r4, pc}
 1887              	.L137:
 1888 0022 C046     		.align	2
 1889              	.L136:
 1890 0024 00280040 		.word	1073752064
 1891 0028 FFFFFBFF 		.word	-262145
 1892              		.cfi_endproc
 1893              	.LFE59:
 1895              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 1896              		.align	1
 1897              		.global	RTC_GetStoreOperation
 1898              		.code	16
 1899              		.thumb_func
 1901              	RTC_GetStoreOperation:
 1902              	.LFB60:
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1903              		.loc 1 1562 0
 1904              		.cfi_startproc
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 1905              		.loc 1 1563 0
 1906 0000 0249     		ldr	r1, .L139
 1907 0002 8020     		mov	r0, #128
 1908 0004 8B68     		ldr	r3, [r1, #8]
 1909 0006 C002     		lsl	r0, r0, #11
 1910 0008 1840     		and	r0, r3
 1911              		@ sp needed for prologue
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1912              		.loc 1 1564 0
 1913 000a 7047     		bx	lr
 1914              	.L140:
 1915              		.align	2
 1916              	.L139:
 1917 000c 00280040 		.word	1073752064
 1918              		.cfi_endproc
 1919              	.LFE60:
 1921              		.section	.text.RTC_OutputConfig,"ax",%progbits
 1922              		.align	1
 1923              		.global	RTC_OutputConfig
 1924              		.code	16
 1925              		.thumb_func
 1927              	RTC_OutputConfig:
 1928              	.LFB61:
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1929              		.loc 1 1599 0
 1930              		.cfi_startproc
 1931 0000 10B5     		push	{r4, lr}
 1932              	.LCFI17:
 1933              		.cfi_def_cfa_offset 8
 1934              		.cfi_offset 4, -8
 1935              		.cfi_offset 14, -4
 1936              	.LVL149:
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1937              		.loc 1 1605 0
 1938 0002 084B     		ldr	r3, .L142
 1939 0004 CA24     		mov	r4, #202
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1940              		.loc 1 1606 0
 1941 0006 5322     		mov	r2, #83
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1942              		.loc 1 1605 0
 1943 0008 5C62     		str	r4, [r3, #36]
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1944              		.loc 1 1606 0
 1945 000a 5A62     		str	r2, [r3, #36]
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 1946              		.loc 1 1609 0
 1947 000c 9C68     		ldr	r4, [r3, #8]
 1948 000e 064A     		ldr	r2, .L142+4
 1949              		@ sp needed for prologue
 1950 0010 2240     		and	r2, r4
 1951 0012 9A60     		str	r2, [r3, #8]
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 1952              		.loc 1 1612 0
 1953 0014 9C68     		ldr	r4, [r3, #8]
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1954              		.loc 1 1615 0
 1955 0016 FF22     		mov	r2, #255
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 1956              		.loc 1 1612 0
 1957 0018 2043     		orr	r0, r4
 1958              	.LVL150:
 1959 001a 0843     		orr	r0, r1
 1960 001c 9860     		str	r0, [r3, #8]
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 1961              		.loc 1 1615 0
 1962 001e 5A62     		str	r2, [r3, #36]
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 1963              		.loc 1 1616 0
 1964 0020 10BD     		pop	{r4, pc}
 1965              	.L143:
 1966 0022 C046     		.align	2
 1967              	.L142:
 1968 0024 00280040 		.word	1073752064
 1969 0028 FFFF8FFF 		.word	-7340033
 1970              		.cfi_endproc
 1971              	.LFE61:
 1973              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 1974              		.align	1
 1975              		.global	RTC_CalibOutputCmd
 1976              		.code	16
 1977              		.thumb_func
 1979              	RTC_CalibOutputCmd:
 1980              	.LFB62:
1641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 1981              		.loc 1 1641 0
 1982              		.cfi_startproc
 1983 0000 00B5     		push	{lr}
 1984              	.LCFI18:
 1985              		.cfi_def_cfa_offset 4
 1986              		.cfi_offset 14, -4
 1987              	.LVL151:
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1988              		.loc 1 1646 0
 1989 0002 094B     		ldr	r3, .L148
 1990 0004 CA21     		mov	r1, #202
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1991              		.loc 1 1647 0
 1992 0006 5322     		mov	r2, #83
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 1993              		.loc 1 1646 0
 1994 0008 5962     		str	r1, [r3, #36]
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 1995              		.loc 1 1647 0
 1996 000a 5A62     		str	r2, [r3, #36]
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 1997              		.loc 1 1652 0
 1998 000c 9968     		ldr	r1, [r3, #8]
1649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 1999              		.loc 1 1649 0
 2000 000e 0028     		cmp	r0, #0
 2001 0010 03D0     		beq	.L145
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2002              		.loc 1 1652 0
 2003 0012 8020     		mov	r0, #128
 2004              	.LVL152:
 2005 0014 0204     		lsl	r2, r0, #16
 2006 0016 0A43     		orr	r2, r1
 2007 0018 01E0     		b	.L147
 2008              	.LVL153:
 2009              	.L145:
1657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2010              		.loc 1 1657 0
 2011 001a 044A     		ldr	r2, .L148+4
 2012 001c 0A40     		and	r2, r1
 2013              	.LVL154:
 2014              	.L147:
 2015 001e 9A60     		str	r2, [r3, #8]
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF; 
 2016              		.loc 1 1661 0
 2017 0020 FF22     		mov	r2, #255
 2018 0022 5A62     		str	r2, [r3, #36]
 2019              		@ sp needed for prologue
1662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2020              		.loc 1 1662 0
 2021 0024 00BD     		pop	{pc}
 2022              	.L149:
 2023 0026 C046     		.align	2
 2024              	.L148:
 2025 0028 00280040 		.word	1073752064
 2026 002c FFFF7FFF 		.word	-8388609
 2027              		.cfi_endproc
 2028              	.LFE62:
 2030              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2031              		.align	1
 2032              		.global	RTC_CalibOutputConfig
 2033              		.code	16
 2034              		.thumb_func
 2036              	RTC_CalibOutputConfig:
 2037              	.LFB63:
1673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2038              		.loc 1 1673 0
 2039              		.cfi_startproc
 2040              	.LVL155:
1678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2041              		.loc 1 1678 0
 2042 0000 074B     		ldr	r3, .L151
 2043 0002 CA21     		mov	r1, #202
1679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2044              		.loc 1 1679 0
 2045 0004 5322     		mov	r2, #83
1678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2046              		.loc 1 1678 0
 2047 0006 5962     		str	r1, [r3, #36]
1679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2048              		.loc 1 1679 0
 2049 0008 5A62     		str	r2, [r3, #36]
1682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_CALSEL);
 2050              		.loc 1 1682 0
 2051 000a 9968     		ldr	r1, [r3, #8]
 2052 000c 054A     		ldr	r2, .L151+4
 2053              		@ sp needed for prologue
 2054 000e 0A40     		and	r2, r1
 2055 0010 9A60     		str	r2, [r3, #8]
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2056              		.loc 1 1685 0
 2057 0012 9968     		ldr	r1, [r3, #8]
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2058              		.loc 1 1688 0
 2059 0014 FF22     		mov	r2, #255
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2060              		.loc 1 1685 0
 2061 0016 0843     		orr	r0, r1
 2062              	.LVL156:
 2063 0018 9860     		str	r0, [r3, #8]
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2064              		.loc 1 1688 0
 2065 001a 5A62     		str	r2, [r3, #36]
1689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2066              		.loc 1 1689 0
 2067 001c 7047     		bx	lr
 2068              	.L152:
 2069 001e C046     		.align	2
 2070              	.L151:
 2071 0020 00280040 		.word	1073752064
 2072 0024 FFFFF7FF 		.word	-524289
 2073              		.cfi_endproc
 2074              	.LFE63:
 2076              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2077              		.align	1
 2078              		.global	RTC_SmoothCalibConfig
 2079              		.code	16
 2080              		.thumb_func
 2082              	RTC_SmoothCalibConfig:
 2083              	.LFB64:
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2084              		.loc 1 1711 0
 2085              		.cfi_startproc
 2086 0000 70B5     		push	{r4, r5, r6, lr}
 2087              	.LCFI19:
 2088              		.cfi_def_cfa_offset 16
 2089              		.cfi_offset 4, -16
 2090              		.cfi_offset 5, -12
 2091              		.cfi_offset 6, -8
 2092              		.cfi_offset 14, -4
 2093              	.LVL157:
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2094              		.loc 1 1711 0
 2095 0002 031C     		mov	r3, r0
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2096              		.loc 1 1721 0
 2097 0004 0D48     		ldr	r0, .L159
 2098              	.LVL158:
1722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2099              		.loc 1 1722 0
 2100 0006 5324     		mov	r4, #83
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2101              		.loc 1 1721 0
 2102 0008 CA26     		mov	r6, #202
 2103 000a 4662     		str	r6, [r0, #36]
1722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2104              		.loc 1 1722 0
 2105 000c 4462     		str	r4, [r0, #36]
1725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2106              		.loc 1 1725 0
 2107 000e C568     		ldr	r5, [r0, #12]
 2108 0010 041C     		mov	r4, r0
 2109 0012 E803     		lsl	r0, r5, #15
 2110 0014 06D5     		bpl	.L154
 2111 0016 0A48     		ldr	r0, .L159+4
 2112              	.LVL159:
 2113              	.L155:
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2114              		.loc 1 1728 0 discriminator 1
 2115 0018 E568     		ldr	r5, [r4, #12]
 2116 001a EE03     		lsl	r6, r5, #15
 2117 001c 02D5     		bpl	.L154
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2118              		.loc 1 1728 0 is_stmt 0 discriminator 2
 2119 001e 0138     		sub	r0, r0, #1
 2120 0020 0028     		cmp	r0, #0
 2121 0022 F9D1     		bne	.L155
 2122              	.L154:
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2123              		.loc 1 1735 0 is_stmt 1
 2124 0024 E668     		ldr	r6, [r4, #12]
1744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 2125              		.loc 1 1744 0
 2126 0026 0020     		mov	r0, #0
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 2127              		.loc 1 1735 0
 2128 0028 F603     		lsl	r6, r6, #15
 2129 002a 04D4     		bmi	.L156
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 2130              		.loc 1 1738 0
 2131 002c 0B43     		orr	r3, r1
 2132              	.LVL160:
 2133 002e 0349     		ldr	r1, .L159
 2134              	.LVL161:
 2135 0030 1343     		orr	r3, r2
 2136 0032 CB63     		str	r3, [r1, #60]
 2137              	.LVL162:
1740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = SUCCESS;
 2138              		.loc 1 1740 0
 2139 0034 0120     		mov	r0, #1
 2140              	.LVL163:
 2141              	.L156:
1748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2142              		.loc 1 1748 0
 2143 0036 FF23     		mov	r3, #255
 2144 0038 6362     		str	r3, [r4, #36]
 2145              		@ sp needed for prologue
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2146              		.loc 1 1751 0
 2147 003a 70BD     		pop	{r4, r5, r6, pc}
 2148              	.L160:
 2149              		.align	2
 2150              	.L159:
 2151 003c 00280040 		.word	1073752064
 2152 0040 01100000 		.word	4097
 2153              		.cfi_endproc
 2154              	.LFE64:
 2156              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 2157              		.align	1
 2158              		.global	RTC_TimeStampCmd
 2159              		.code	16
 2160              		.thumb_func
 2162              	RTC_TimeStampCmd:
 2163              	.LFB65:
1785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2164              		.loc 1 1785 0
 2165              		.cfi_startproc
 2166 0000 10B5     		push	{r4, lr}
 2167              	.LCFI20:
 2168              		.cfi_def_cfa_offset 8
 2169              		.cfi_offset 4, -8
 2170              		.cfi_offset 14, -4
 2171              	.LVL164:
1793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 2172              		.loc 1 1793 0
 2173 0002 094B     		ldr	r3, .L164
 2174 0004 094A     		ldr	r2, .L164+4
 2175 0006 9C68     		ldr	r4, [r3, #8]
 2176 0008 2240     		and	r2, r4
 2177              	.LVL165:
1796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 2178              		.loc 1 1796 0
 2179 000a 0029     		cmp	r1, #0
 2180 000c 02D0     		beq	.L162
1798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 2181              		.loc 1 1798 0
 2182 000e 8024     		mov	r4, #128
 2183 0010 2101     		lsl	r1, r4, #4
 2184              	.LVL166:
 2185 0012 0A43     		orr	r2, r1
 2186              	.LVL167:
 2187              	.L162:
1802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 2188              		.loc 1 1802 0
 2189 0014 1043     		orr	r0, r2
 2190              	.LVL168:
1806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2191              		.loc 1 1806 0
 2192 0016 CA24     		mov	r4, #202
1807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2193              		.loc 1 1807 0
 2194 0018 5321     		mov	r1, #83
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2195              		.loc 1 1813 0
 2196 001a FF22     		mov	r2, #255
1806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2197              		.loc 1 1806 0
 2198 001c 5C62     		str	r4, [r3, #36]
 2199              		@ sp needed for prologue
1807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2200              		.loc 1 1807 0
 2201 001e 5962     		str	r1, [r3, #36]
1810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 2202              		.loc 1 1810 0
 2203 0020 9860     		str	r0, [r3, #8]
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2204              		.loc 1 1813 0
 2205 0022 5A62     		str	r2, [r3, #36]
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2206              		.loc 1 1814 0
 2207 0024 10BD     		pop	{r4, pc}
 2208              	.L165:
 2209 0026 C046     		.align	2
 2210              	.L164:
 2211 0028 00280040 		.word	1073752064
 2212 002c F7F7FFFF 		.word	-2057
 2213              		.cfi_endproc
 2214              	.LFE65:
 2216              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 2217              		.align	1
 2218              		.global	RTC_GetTimeStamp
 2219              		.code	16
 2220              		.thumb_func
 2222              	RTC_GetTimeStamp:
 2223              	.LFB66:
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2224              		.loc 1 1830 0
 2225              		.cfi_startproc
 2226 0000 38B5     		push	{r3, r4, r5, lr}
 2227              	.LCFI21:
 2228              		.cfi_def_cfa_offset 16
 2229              		.cfi_offset 3, -16
 2230              		.cfi_offset 4, -12
 2231              		.cfi_offset 5, -8
 2232              		.cfi_offset 14, -4
 2233              	.LVL169:
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2234              		.loc 1 1830 0
 2235 0002 151C     		mov	r5, r2
1837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 2236              		.loc 1 1837 0
 2237 0004 1B4A     		ldr	r2, .L168
 2238              	.LVL170:
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2239              		.loc 1 1830 0
 2240 0006 0C1C     		mov	r4, r1
1837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 2241              		.loc 1 1837 0
 2242 0008 1B4B     		ldr	r3, .L168+4
 2243 000a 116B     		ldr	r1, [r2, #48]
 2244              	.LVL171:
 2245 000c 0B40     		and	r3, r1
 2246              	.LVL172:
1838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2247              		.loc 1 1838 0
 2248 000e 516B     		ldr	r1, [r2, #52]
 2249 0010 1A4A     		ldr	r2, .L168+8
1843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2250              		.loc 1 1843 0
 2251 0012 A370     		strb	r3, [r4, #2]
1838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2252              		.loc 1 1838 0
 2253 0014 0A40     		and	r2, r1
 2254              	.LVL173:
1841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 2255              		.loc 1 1841 0
 2256 0016 9902     		lsl	r1, r3, #10
 2257 0018 890E     		lsr	r1, r1, #26
 2258 001a 2170     		strb	r1, [r4]
1842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2259              		.loc 1 1842 0
 2260 001c 190A     		lsr	r1, r3, #8
 2261 001e 6170     		strb	r1, [r4, #1]
1844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2262              		.loc 1 1844 0
 2263 0020 8021     		mov	r1, #128
 2264 0022 C903     		lsl	r1, r1, #15
 2265 0024 0B40     		and	r3, r1
 2266              	.LVL174:
 2267 0026 190C     		lsr	r1, r3, #16
 2268 0028 E170     		strb	r1, [r4, #3]
1847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 2269              		.loc 1 1847 0
 2270 002a 0023     		mov	r3, #0
1848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2271              		.loc 1 1848 0
 2272 002c D104     		lsl	r1, r2, #19
1847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 2273              		.loc 1 1847 0
 2274 002e EB70     		strb	r3, [r5, #3]
1848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2275              		.loc 1 1848 0
 2276 0030 CB0E     		lsr	r3, r1, #27
1850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2277              		.loc 1 1850 0
 2278 0032 1104     		lsl	r1, r2, #16
1849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2279              		.loc 1 1849 0
 2280 0034 AA70     		strb	r2, [r5, #2]
1850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2281              		.loc 1 1850 0
 2282 0036 4A0F     		lsr	r2, r1, #29
 2283              	.LVL175:
1848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2284              		.loc 1 1848 0
 2285 0038 6B70     		strb	r3, [r5, #1]
1850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2286              		.loc 1 1850 0
 2287 003a 2A70     		strb	r2, [r5]
1853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 2288              		.loc 1 1853 0
 2289 003c 0028     		cmp	r0, #0
 2290 003e 17D1     		bne	.L166
1856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 2291              		.loc 1 1856 0
 2292 0040 2078     		ldrb	r0, [r4]
 2293              	.LVL176:
 2294 0042 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2295 0046 2070     		strb	r0, [r4]
1857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2296              		.loc 1 1857 0
 2297 0048 6078     		ldrb	r0, [r4, #1]
 2298 004a FFF7FEFF 		bl	RTC_Bcd2ToByte
 2299 004e 6070     		strb	r0, [r4, #1]
1858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2300              		.loc 1 1858 0
 2301 0050 A078     		ldrb	r0, [r4, #2]
 2302 0052 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2303 0056 A070     		strb	r0, [r4, #2]
1861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 2304              		.loc 1 1861 0
 2305 0058 6878     		ldrb	r0, [r5, #1]
 2306 005a FFF7FEFF 		bl	RTC_Bcd2ToByte
 2307 005e 6870     		strb	r0, [r5, #1]
1862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2308              		.loc 1 1862 0
 2309 0060 A878     		ldrb	r0, [r5, #2]
 2310 0062 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2311 0066 A870     		strb	r0, [r5, #2]
1863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2312              		.loc 1 1863 0
 2313 0068 2878     		ldrb	r0, [r5]
 2314 006a FFF7FEFF 		bl	RTC_Bcd2ToByte
 2315 006e 2870     		strb	r0, [r5]
 2316              	.L166:
 2317              		@ sp needed for prologue
 2318              	.LVL177:
 2319              	.LVL178:
1865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2320              		.loc 1 1865 0
 2321 0070 38BD     		pop	{r3, r4, r5, pc}
 2322              	.L169:
 2323 0072 C046     		.align	2
 2324              	.L168:
 2325 0074 00280040 		.word	1073752064
 2326 0078 7F7F7F00 		.word	8355711
 2327 007c 3FFFFF00 		.word	16777023
 2328              		.cfi_endproc
 2329              	.LFE66:
 2331              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 2332              		.align	1
 2333              		.global	RTC_GetTimeStampSubSecond
 2334              		.code	16
 2335              		.thumb_func
 2337              	RTC_GetTimeStampSubSecond:
 2338              	.LFB67:
1873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2339              		.loc 1 1873 0
 2340              		.cfi_startproc
1875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 2341              		.loc 1 1875 0
 2342 0000 014B     		ldr	r3, .L171
 2343              		@ sp needed for prologue
 2344 0002 986B     		ldr	r0, [r3, #56]
1876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2345              		.loc 1 1876 0
 2346 0004 7047     		bx	lr
 2347              	.L172:
 2348 0006 C046     		.align	2
 2349              	.L171:
 2350 0008 00280040 		.word	1073752064
 2351              		.cfi_endproc
 2352              	.LFE67:
 2354              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 2355              		.align	1
 2356              		.global	RTC_TamperTriggerConfig
 2357              		.code	16
 2358              		.thumb_func
 2360              	RTC_TamperTriggerConfig:
 2361              	.LFB68:
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2362              		.loc 1 1910 0
 2363              		.cfi_startproc
 2364 0000 00B5     		push	{lr}
 2365              	.LCFI22:
 2366              		.cfi_def_cfa_offset 4
 2367              		.cfi_offset 14, -4
 2368              	.LVL179:
 2369 0002 054B     		ldr	r3, .L176
 2370 0004 4000     		lsl	r0, r0, #1
 2371              	.LVL180:
1918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 2372              		.loc 1 1918 0
 2373 0006 1A6C     		ldr	r2, [r3, #64]
1915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 2374              		.loc 1 1915 0
 2375 0008 0029     		cmp	r1, #0
 2376 000a 02D1     		bne	.L174
1918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 2377              		.loc 1 1918 0
 2378 000c 8243     		bic	r2, r0
 2379 000e 1A64     		str	r2, [r3, #64]
 2380 0010 01E0     		b	.L173
 2381              	.L174:
1923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 2382              		.loc 1 1923 0
 2383 0012 1043     		orr	r0, r2
 2384 0014 1864     		str	r0, [r3, #64]
 2385              	.L173:
 2386              		@ sp needed for prologue
1925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2387              		.loc 1 1925 0
 2388 0016 00BD     		pop	{pc}
 2389              	.L177:
 2390              		.align	2
 2391              	.L176:
 2392 0018 00280040 		.word	1073752064
 2393              		.cfi_endproc
 2394              	.LFE68:
 2396              		.section	.text.RTC_TamperCmd,"ax",%progbits
 2397              		.align	1
 2398              		.global	RTC_TamperCmd
 2399              		.code	16
 2400              		.thumb_func
 2402              	RTC_TamperCmd:
 2403              	.LFB69:
1938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2404              		.loc 1 1938 0
 2405              		.cfi_startproc
 2406 0000 00B5     		push	{lr}
 2407              	.LCFI23:
 2408              		.cfi_def_cfa_offset 4
 2409              		.cfi_offset 14, -4
 2410              	.LVL181:
 2411 0002 054B     		ldr	r3, .L181
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 2412              		.loc 1 1946 0
 2413 0004 1A6C     		ldr	r2, [r3, #64]
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 2414              		.loc 1 1943 0
 2415 0006 0029     		cmp	r1, #0
 2416 0008 02D0     		beq	.L179
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 2417              		.loc 1 1946 0
 2418 000a 1043     		orr	r0, r2
 2419              	.LVL182:
 2420 000c 1864     		str	r0, [r3, #64]
 2421 000e 01E0     		b	.L178
 2422              	.LVL183:
 2423              	.L179:
1951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 2424              		.loc 1 1951 0
 2425 0010 8243     		bic	r2, r0
 2426 0012 1A64     		str	r2, [r3, #64]
 2427              	.LVL184:
 2428              	.L178:
 2429              		@ sp needed for prologue
1953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2430              		.loc 1 1953 0
 2431 0014 00BD     		pop	{pc}
 2432              	.L182:
 2433 0016 C046     		.align	2
 2434              	.L181:
 2435 0018 00280040 		.word	1073752064
 2436              		.cfi_endproc
 2437              	.LFE69:
 2439              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 2440              		.align	1
 2441              		.global	RTC_TamperFilterConfig
 2442              		.code	16
 2443              		.thumb_func
 2445              	RTC_TamperFilterConfig:
 2446              	.LFB70:
1969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2447              		.loc 1 1969 0
 2448              		.cfi_startproc
 2449              	.LVL185:
1974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 2450              		.loc 1 1974 0
 2451 0000 044B     		ldr	r3, .L184
 2452 0002 054A     		ldr	r2, .L184+4
 2453 0004 196C     		ldr	r1, [r3, #64]
 2454              		@ sp needed for prologue
 2455 0006 0A40     		and	r2, r1
 2456 0008 1A64     		str	r2, [r3, #64]
1977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 2457              		.loc 1 1977 0
 2458 000a 1A6C     		ldr	r2, [r3, #64]
 2459 000c 1043     		orr	r0, r2
 2460              	.LVL186:
 2461 000e 1864     		str	r0, [r3, #64]
1978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2462              		.loc 1 1978 0
 2463 0010 7047     		bx	lr
 2464              	.L185:
 2465 0012 C046     		.align	2
 2466              	.L184:
 2467 0014 00280040 		.word	1073752064
 2468 0018 FFE7FFFF 		.word	-6145
 2469              		.cfi_endproc
 2470              	.LFE70:
 2472              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 2473              		.align	1
 2474              		.global	RTC_TamperSamplingFreqConfig
 2475              		.code	16
 2476              		.thumb_func
 2478              	RTC_TamperSamplingFreqConfig:
 2479              	.LFB71:
2003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2480              		.loc 1 2003 0
 2481              		.cfi_startproc
 2482              	.LVL187:
2008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 2483              		.loc 1 2008 0
 2484 0000 044B     		ldr	r3, .L187
 2485 0002 054A     		ldr	r2, .L187+4
 2486 0004 196C     		ldr	r1, [r3, #64]
 2487              		@ sp needed for prologue
 2488 0006 0A40     		and	r2, r1
 2489 0008 1A64     		str	r2, [r3, #64]
2011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 2490              		.loc 1 2011 0
 2491 000a 1A6C     		ldr	r2, [r3, #64]
 2492 000c 1043     		orr	r0, r2
 2493              	.LVL188:
 2494 000e 1864     		str	r0, [r3, #64]
2012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2495              		.loc 1 2012 0
 2496 0010 7047     		bx	lr
 2497              	.L188:
 2498 0012 C046     		.align	2
 2499              	.L187:
 2500 0014 00280040 		.word	1073752064
 2501 0018 FFF8FFFF 		.word	-1793
 2502              		.cfi_endproc
 2503              	.LFE71:
 2505              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 2506              		.align	1
 2507              		.global	RTC_TamperPinsPrechargeDuration
 2508              		.code	16
 2509              		.thumb_func
 2511              	RTC_TamperPinsPrechargeDuration:
 2512              	.LFB72:
2026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2513              		.loc 1 2026 0
 2514              		.cfi_startproc
 2515              	.LVL189:
2031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 2516              		.loc 1 2031 0
 2517 0000 044B     		ldr	r3, .L190
 2518 0002 054A     		ldr	r2, .L190+4
 2519 0004 196C     		ldr	r1, [r3, #64]
 2520              		@ sp needed for prologue
 2521 0006 0A40     		and	r2, r1
 2522 0008 1A64     		str	r2, [r3, #64]
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 2523              		.loc 1 2034 0
 2524 000a 1A6C     		ldr	r2, [r3, #64]
 2525 000c 1043     		orr	r0, r2
 2526              	.LVL190:
 2527 000e 1864     		str	r0, [r3, #64]
2035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2528              		.loc 1 2035 0
 2529 0010 7047     		bx	lr
 2530              	.L191:
 2531 0012 C046     		.align	2
 2532              	.L190:
 2533 0014 00280040 		.word	1073752064
 2534 0018 FF9FFFFF 		.word	-24577
 2535              		.cfi_endproc
 2536              	.LFE72:
 2538              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 2539              		.align	1
 2540              		.global	RTC_TimeStampOnTamperDetectionCmd
 2541              		.code	16
 2542              		.thumb_func
 2544              	RTC_TimeStampOnTamperDetectionCmd:
 2545              	.LFB73:
2046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2546              		.loc 1 2046 0
 2547              		.cfi_startproc
 2548 0000 00B5     		push	{lr}
 2549              	.LCFI24:
 2550              		.cfi_def_cfa_offset 4
 2551              		.cfi_offset 14, -4
 2552              	.LVL191:
 2553 0002 054B     		ldr	r3, .L196
 2554 0004 8022     		mov	r2, #128
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 2555              		.loc 1 2053 0
 2556 0006 196C     		ldr	r1, [r3, #64]
2050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 2557              		.loc 1 2050 0
 2558 0008 0028     		cmp	r0, #0
 2559 000a 01D0     		beq	.L193
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 2560              		.loc 1 2053 0
 2561 000c 0A43     		orr	r2, r1
 2562 000e 01E0     		b	.L195
 2563              	.L193:
2058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 2564              		.loc 1 2058 0
 2565 0010 9143     		bic	r1, r2
 2566 0012 0A1C     		mov	r2, r1
 2567              	.L195:
 2568 0014 1A64     		str	r2, [r3, #64]
 2569              		@ sp needed for prologue
2060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2570              		.loc 1 2060 0
 2571 0016 00BD     		pop	{pc}
 2572              	.L197:
 2573              		.align	2
 2574              	.L196:
 2575 0018 00280040 		.word	1073752064
 2576              		.cfi_endproc
 2577              	.LFE73:
 2579              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 2580              		.align	1
 2581              		.global	RTC_TamperPullUpCmd
 2582              		.code	16
 2583              		.thumb_func
 2585              	RTC_TamperPullUpCmd:
 2586              	.LFB74:
2069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2587              		.loc 1 2069 0
 2588              		.cfi_startproc
 2589 0000 00B5     		push	{lr}
 2590              	.LCFI25:
 2591              		.cfi_def_cfa_offset 4
 2592              		.cfi_offset 14, -4
 2593              	.LVL192:
 2594 0002 064B     		ldr	r3, .L202
2076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 2595              		.loc 1 2076 0
 2596 0004 196C     		ldr	r1, [r3, #64]
2073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****  if (NewState != DISABLE)
 2597              		.loc 1 2073 0
 2598 0006 0028     		cmp	r0, #0
 2599 0008 02D0     		beq	.L199
2076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 2600              		.loc 1 2076 0
 2601 000a 054A     		ldr	r2, .L202+4
 2602 000c 0A40     		and	r2, r1
 2603 000e 02E0     		b	.L201
 2604              	.L199:
2081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 2605              		.loc 1 2081 0
 2606 0010 8022     		mov	r2, #128
 2607 0012 1202     		lsl	r2, r2, #8
 2608 0014 0A43     		orr	r2, r1
 2609              	.L201:
 2610 0016 1A64     		str	r2, [r3, #64]
 2611              		@ sp needed for prologue
2083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2612              		.loc 1 2083 0
 2613 0018 00BD     		pop	{pc}
 2614              	.L203:
 2615 001a C046     		.align	2
 2616              	.L202:
 2617 001c 00280040 		.word	1073752064
 2618 0020 FF7FFFFF 		.word	-32769
 2619              		.cfi_endproc
 2620              	.LFE74:
 2622              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 2623              		.align	1
 2624              		.global	RTC_WriteBackupRegister
 2625              		.code	16
 2626              		.thumb_func
 2628              	RTC_WriteBackupRegister:
 2629              	.LFB75:
2110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2630              		.loc 1 2110 0
 2631              		.cfi_startproc
 2632              	.LVL193:
2116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2633              		.loc 1 2116 0
 2634 0000 064A     		ldr	r2, .L205
2110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2635              		.loc 1 2110 0
 2636 0002 82B0     		sub	sp, sp, #8
 2637              	.LCFI26:
 2638              		.cfi_def_cfa_offset 8
2111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t tmp = 0;
 2639              		.loc 1 2111 0
 2640 0004 0023     		mov	r3, #0
 2641 0006 0193     		str	r3, [sp, #4]
 2642              	.LVL194:
2116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2643              		.loc 1 2116 0
 2644 0008 0192     		str	r2, [sp, #4]
2117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2645              		.loc 1 2117 0
 2646 000a 019B     		ldr	r3, [sp, #4]
 2647 000c 8200     		lsl	r2, r0, #2
 2648 000e D018     		add	r0, r2, r3
 2649              	.LVL195:
 2650 0010 0190     		str	r0, [sp, #4]
 2651              	.LVL196:
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 2652              		.loc 1 2120 0
 2653 0012 019B     		ldr	r3, [sp, #4]
 2654 0014 1960     		str	r1, [r3]
2121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2655              		.loc 1 2121 0
 2656 0016 02B0     		add	sp, sp, #8
 2657              		@ sp needed for prologue
 2658 0018 7047     		bx	lr
 2659              	.L206:
 2660 001a C046     		.align	2
 2661              	.L205:
 2662 001c 50280040 		.word	1073752144
 2663              		.cfi_endproc
 2664              	.LFE75:
 2666              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 2667              		.align	1
 2668              		.global	RTC_ReadBackupRegister
 2669              		.code	16
 2670              		.thumb_func
 2672              	RTC_ReadBackupRegister:
 2673              	.LFB76:
2131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2674              		.loc 1 2131 0
 2675              		.cfi_startproc
 2676              	.LVL197:
2137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2677              		.loc 1 2137 0
 2678 0000 064B     		ldr	r3, .L208
2131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2679              		.loc 1 2131 0
 2680 0002 82B0     		sub	sp, sp, #8
 2681              	.LCFI27:
 2682              		.cfi_def_cfa_offset 8
2132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   __IO uint32_t tmp = 0;
 2683              		.loc 1 2132 0
 2684 0004 0021     		mov	r1, #0
 2685 0006 0191     		str	r1, [sp, #4]
 2686              	.LVL198:
2137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 2687              		.loc 1 2137 0
 2688 0008 0193     		str	r3, [sp, #4]
2138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2689              		.loc 1 2138 0
 2690 000a 019A     		ldr	r2, [sp, #4]
 2691 000c 8100     		lsl	r1, r0, #2
 2692 000e 8818     		add	r0, r1, r2
 2693              	.LVL199:
 2694 0010 0190     		str	r0, [sp, #4]
 2695              	.LVL200:
2141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 2696              		.loc 1 2141 0
 2697 0012 019B     		ldr	r3, [sp, #4]
 2698 0014 1868     		ldr	r0, [r3]
 2699              	.LVL201:
2142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2700              		.loc 1 2142 0
 2701 0016 02B0     		add	sp, sp, #8
 2702              		@ sp needed for prologue
 2703 0018 7047     		bx	lr
 2704              	.L209:
 2705 001a C046     		.align	2
 2706              	.L208:
 2707 001c 50280040 		.word	1073752144
 2708              		.cfi_endproc
 2709              	.LFE76:
 2711              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 2712              		.align	1
 2713              		.global	RTC_OutputTypeConfig
 2714              		.code	16
 2715              		.thumb_func
 2717              	RTC_OutputTypeConfig:
 2718              	.LFB77:
2171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2719              		.loc 1 2171 0
 2720              		.cfi_startproc
 2721              	.LVL202:
2175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 2722              		.loc 1 2175 0
 2723 0000 044B     		ldr	r3, .L211
 2724 0002 054A     		ldr	r2, .L211+4
 2725 0004 196C     		ldr	r1, [r3, #64]
 2726              		@ sp needed for prologue
 2727 0006 0A40     		and	r2, r1
 2728 0008 1A64     		str	r2, [r3, #64]
2176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 2729              		.loc 1 2176 0
 2730 000a 1A6C     		ldr	r2, [r3, #64]
 2731 000c 1043     		orr	r0, r2
 2732              	.LVL203:
 2733 000e 1864     		str	r0, [r3, #64]
2177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2734              		.loc 1 2177 0
 2735 0010 7047     		bx	lr
 2736              	.L212:
 2737 0012 C046     		.align	2
 2738              	.L211:
 2739 0014 00280040 		.word	1073752064
 2740 0018 FFFFFBFF 		.word	-262145
 2741              		.cfi_endproc
 2742              	.LFE77:
 2744              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 2745              		.align	1
 2746              		.global	RTC_SynchroShiftConfig
 2747              		.code	16
 2748              		.thumb_func
 2750              	RTC_SynchroShiftConfig:
 2751              	.LFB78:
2209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2752              		.loc 1 2209 0
 2753              		.cfi_startproc
 2754 0000 70B5     		push	{r4, r5, r6, lr}
 2755              	.LCFI28:
 2756              		.cfi_def_cfa_offset 16
 2757              		.cfi_offset 4, -16
 2758              		.cfi_offset 5, -12
 2759              		.cfi_offset 6, -8
 2760              		.cfi_offset 14, -4
 2761              	.LVL204:
2218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2762              		.loc 1 2218 0
 2763 0002 124C     		ldr	r4, .L221
2209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2764              		.loc 1 2209 0
 2765 0004 031C     		mov	r3, r0
2218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2766              		.loc 1 2218 0
 2767 0006 CA25     		mov	r5, #202
2219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2768              		.loc 1 2219 0
 2769 0008 5320     		mov	r0, #83
 2770              	.LVL205:
2218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2771              		.loc 1 2218 0
 2772 000a 6562     		str	r5, [r4, #36]
2219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2773              		.loc 1 2219 0
 2774 000c 6062     		str	r0, [r4, #36]
2222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 2775              		.loc 1 2222 0
 2776 000e E268     		ldr	r2, [r4, #12]
 2777 0010 1007     		lsl	r0, r2, #28
 2778 0012 06D5     		bpl	.L214
 2779 0014 0E4A     		ldr	r2, .L221+4
 2780              	.LVL206:
 2781              	.L215:
2225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2782              		.loc 1 2225 0 discriminator 1
 2783 0016 E668     		ldr	r6, [r4, #12]
 2784 0018 3507     		lsl	r5, r6, #28
 2785 001a 02D5     		bpl	.L214
2225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 2786              		.loc 1 2225 0 is_stmt 0 discriminator 2
 2787 001c 013A     		sub	r2, r2, #1
 2788 001e 002A     		cmp	r2, #0
 2789 0020 F9D1     		bne	.L215
 2790              	.L214:
2232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 2791              		.loc 1 2232 0 is_stmt 1
 2792 0022 E568     		ldr	r5, [r4, #12]
 2793 0024 0948     		ldr	r0, .L221
2256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     status = ERROR;
 2794              		.loc 1 2256 0
 2795 0026 0022     		mov	r2, #0
2232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 2796              		.loc 1 2232 0
 2797 0028 2E07     		lsl	r6, r5, #28
 2798 002a 0AD4     		bmi	.L216
2235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 2799              		.loc 1 2235 0
 2800 002c 8668     		ldr	r6, [r0, #8]
 2801 002e F606     		lsl	r6, r6, #27
 2802 0030 07D4     		bmi	.L216
2238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 2803              		.loc 1 2238 0
 2804 0032 0B43     		orr	r3, r1
 2805              	.LVL207:
 2806 0034 C362     		str	r3, [r0, #44]
2240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 2807              		.loc 1 2240 0
 2808 0036 FFF7FEFF 		bl	RTC_WaitForSynchro
 2809              	.LVL208:
2246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = SUCCESS;
 2810              		.loc 1 2246 0
 2811 003a 0122     		mov	r2, #1
2240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 2812              		.loc 1 2240 0
 2813 003c 0028     		cmp	r0, #0
 2814 003e 00D1     		bne	.L216
2242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****         status = ERROR;
 2815              		.loc 1 2242 0
 2816 0040 021C     		mov	r2, r0
 2817              	.L216:
 2818              	.LVL209:
2260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2819              		.loc 1 2260 0
 2820 0042 FF23     		mov	r3, #255
2263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2821              		.loc 1 2263 0
 2822 0044 101C     		mov	r0, r2
2260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF;
 2823              		.loc 1 2260 0
 2824 0046 6362     		str	r3, [r4, #36]
 2825              		@ sp needed for prologue
2263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2826              		.loc 1 2263 0
 2827 0048 70BD     		pop	{r4, r5, r6, pc}
 2828              	.L222:
 2829 004a C046     		.align	2
 2830              	.L221:
 2831 004c 00280040 		.word	1073752064
 2832 0050 01100000 		.word	4097
 2833              		.cfi_endproc
 2834              	.LFE78:
 2836              		.section	.text.RTC_ITConfig,"ax",%progbits
 2837              		.align	1
 2838              		.global	RTC_ITConfig
 2839              		.code	16
 2840              		.thumb_func
 2842              	RTC_ITConfig:
 2843              	.LFB79:
2319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2844              		.loc 1 2319 0
 2845              		.cfi_startproc
 2846 0000 10B5     		push	{r4, lr}
 2847              	.LCFI29:
 2848              		.cfi_def_cfa_offset 8
 2849              		.cfi_offset 4, -8
 2850              		.cfi_offset 14, -4
 2851              	.LVL210:
2325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2852              		.loc 1 2325 0
 2853 0002 0F4B     		ldr	r3, .L226
2326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2854              		.loc 1 2326 0
 2855 0004 5322     		mov	r2, #83
2325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xCA;
 2856              		.loc 1 2325 0
 2857 0006 CA24     		mov	r4, #202
 2858 0008 5C62     		str	r4, [r3, #36]
2326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0x53;
 2859              		.loc 1 2326 0
 2860 000a 5A62     		str	r2, [r3, #36]
 2861 000c 0422     		mov	r2, #4
2328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if (NewState != DISABLE)
 2862              		.loc 1 2328 0
 2863 000e 0029     		cmp	r1, #0
 2864 0010 09D0     		beq	.L224
2331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 2865              		.loc 1 2331 0
 2866 0012 9968     		ldr	r1, [r3, #8]
 2867              	.LVL211:
 2868 0014 041C     		mov	r4, r0
 2869 0016 9443     		bic	r4, r2
 2870 0018 2143     		orr	r1, r4
 2871 001a 9960     		str	r1, [r3, #8]
2333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 2872              		.loc 1 2333 0
 2873 001c 196C     		ldr	r1, [r3, #64]
 2874 001e 1040     		and	r0, r2
 2875              	.LVL212:
 2876 0020 0843     		orr	r0, r1
 2877 0022 1864     		str	r0, [r3, #64]
 2878 0024 09E0     		b	.L225
 2879              	.LVL213:
 2880              	.L224:
2338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 2881              		.loc 1 2338 0
 2882 0026 9968     		ldr	r1, [r3, #8]
 2883              	.LVL214:
 2884 0028 041C     		mov	r4, r0
 2885 002a 9443     		bic	r4, r2
 2886 002c A143     		bic	r1, r4
 2887 002e 9960     		str	r1, [r3, #8]
2340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 2888              		.loc 1 2340 0
 2889 0030 196C     		ldr	r1, [r3, #64]
 2890 0032 1040     		and	r0, r2
 2891              	.LVL215:
 2892 0034 0A1C     		mov	r2, r1
 2893 0036 8243     		bic	r2, r0
 2894 0038 1A64     		str	r2, [r3, #64]
 2895              	.L225:
2343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->WPR = 0xFF; 
 2896              		.loc 1 2343 0
 2897 003a FF20     		mov	r0, #255
 2898 003c 5862     		str	r0, [r3, #36]
 2899              		@ sp needed for prologue
2344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2900              		.loc 1 2344 0
 2901 003e 10BD     		pop	{r4, pc}
 2902              	.L227:
 2903              		.align	2
 2904              	.L226:
 2905 0040 00280040 		.word	1073752064
 2906              		.cfi_endproc
 2907              	.LFE79:
 2909              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 2910              		.align	1
 2911              		.global	RTC_GetFlagStatus
 2912              		.code	16
 2913              		.thumb_func
 2915              	RTC_GetFlagStatus:
 2916              	.LFB80:
2363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2917              		.loc 1 2363 0
 2918              		.cfi_startproc
 2919              	.LVL216:
2371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 2920              		.loc 1 2371 0
 2921 0000 0349     		ldr	r1, .L229
 2922 0002 044B     		ldr	r3, .L229+4
 2923 0004 CA68     		ldr	r2, [r1, #12]
 2924              	.LVL217:
 2925              		@ sp needed for prologue
 2926 0006 1340     		and	r3, r2
2374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 2927              		.loc 1 2374 0
 2928 0008 1840     		and	r0, r3
 2929              	.LVL218:
2382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   return bitstatus;
 2930              		.loc 1 2382 0
 2931 000a 431E     		sub	r3, r0, #1
 2932 000c 9841     		sbc	r0, r0, r3
2383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2933              		.loc 1 2383 0
 2934 000e 7047     		bx	lr
 2935              	.L230:
 2936              		.align	2
 2937              	.L229:
 2938 0010 00280040 		.word	1073752064
 2939 0014 78790100 		.word	96632
 2940              		.cfi_endproc
 2941              	.LFE80:
 2943              		.section	.text.RTC_ClearFlag,"ax",%progbits
 2944              		.align	1
 2945              		.global	RTC_ClearFlag
 2946              		.code	16
 2947              		.thumb_func
 2949              	RTC_ClearFlag:
 2950              	.LFB81:
2399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2951              		.loc 1 2399 0
 2952              		.cfi_startproc
 2953              	.LVL219:
2404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0001FFFF) | (uint32_t)(RTC->ISR &
 2954              		.loc 1 2404 0
 2955 0000 054B     		ldr	r3, .L232
 2956 0002 064A     		ldr	r2, .L232+4
 2957 0004 D968     		ldr	r1, [r3, #12]
 2958 0006 1040     		and	r0, r2
 2959              	.LVL220:
 2960 0008 8022     		mov	r2, #128
 2961 000a 1043     		orr	r0, r2
 2962 000c C043     		mvn	r0, r0
 2963 000e 0A40     		and	r2, r1
 2964 0010 0243     		orr	r2, r0
 2965 0012 DA60     		str	r2, [r3, #12]
 2966              		@ sp needed for prologue
2405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 2967              		.loc 1 2405 0
 2968 0014 7047     		bx	lr
 2969              	.L233:
 2970 0016 C046     		.align	2
 2971              	.L232:
 2972 0018 00280040 		.word	1073752064
 2973 001c 7FFF0100 		.word	130943
 2974              		.cfi_endproc
 2975              	.LFE81:
 2977              		.section	.text.RTC_GetITStatus,"ax",%progbits
 2978              		.align	1
 2979              		.global	RTC_GetITStatus
 2980              		.code	16
 2981              		.thumb_func
 2983              	RTC_GetITStatus:
 2984              	.LFB82:
2419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2985              		.loc 1 2419 0
 2986              		.cfi_startproc
 2987 0000 30B5     		push	{r4, r5, lr}
 2988              	.LCFI30:
 2989              		.cfi_def_cfa_offset 12
 2990              		.cfi_offset 4, -12
 2991              		.cfi_offset 5, -8
 2992              		.cfi_offset 14, -4
 2993              	.LVL221:
2427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 2994              		.loc 1 2427 0
 2995 0002 0A4A     		ldr	r2, .L237
2419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 2996              		.loc 1 2419 0
 2997 0004 031C     		mov	r3, r0
2427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 2998              		.loc 1 2427 0
 2999 0006 156C     		ldr	r5, [r2, #64]
 3000              	.LVL222:
 3001 0008 0420     		mov	r0, #4
 3002              	.LVL223:
 3003 000a 2840     		and	r0, r5
2430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));
 3004              		.loc 1 2430 0
 3005 000c 9C0C     		lsr	r4, r3, #18
 3006 000e 1D1C     		mov	r5, r3
 3007              	.LVL224:
 3008 0010 9168     		ldr	r1, [r2, #8]
 3009              	.LVL225:
 3010 0012 E540     		lsr	r5, r5, r4
 3011 0014 EC0B     		lsr	r4, r5, #15
 3012 0016 2040     		and	r0, r4
 3013              	.LVL226:
 3014 0018 1940     		and	r1, r3
2433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 3015              		.loc 1 2433 0
 3016 001a D268     		ldr	r2, [r2, #12]
 3017              	.LVL227:
2430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));
 3018              		.loc 1 2430 0
 3019 001c 0843     		orr	r0, r1
2436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 3020              		.loc 1 2436 0
 3021 001e 04D0     		beq	.L235
2433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 3022              		.loc 1 2433 0 discriminator 1
 3023 0020 1B09     		lsr	r3, r3, #4
 3024              	.LVL228:
 3025 0022 90B2     		uxth	r0, r2
2436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 3026              		.loc 1 2436 0 discriminator 1
 3027 0024 1840     		and	r0, r3
2438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****     bitstatus = SET;
 3028              		.loc 1 2438 0 discriminator 1
 3029 0026 431E     		sub	r3, r0, #1
 3030 0028 9841     		sbc	r0, r0, r3
 3031              	.LVL229:
 3032              	.L235:
 3033              		@ sp needed for prologue
2445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 3034              		.loc 1 2445 0
 3035 002a 30BD     		pop	{r4, r5, pc}
 3036              	.L238:
 3037              		.align	2
 3038              	.L237:
 3039 002c 00280040 		.word	1073752064
 3040              		.cfi_endproc
 3041              	.LFE82:
 3043              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 3044              		.align	1
 3045              		.global	RTC_ClearITPendingBit
 3046              		.code	16
 3047              		.thumb_func
 3049              	RTC_ClearITPendingBit:
 3050              	.LFB83:
2459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** {
 3051              		.loc 1 2459 0
 3052              		.cfi_startproc
 3053 0000 10B5     		push	{r4, lr}
 3054              	.LCFI31:
 3055              		.cfi_def_cfa_offset 8
 3056              		.cfi_offset 4, -8
 3057              		.cfi_offset 14, -4
 3058              	.LVL230:
2469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 3059              		.loc 1 2469 0
 3060 0002 054B     		ldr	r3, .L240
2466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 3061              		.loc 1 2466 0
 3062 0004 0209     		lsr	r2, r0, #4
2469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 3063              		.loc 1 2469 0
 3064 0006 DC68     		ldr	r4, [r3, #12]
 3065 0008 90B2     		uxth	r0, r2
 3066              	.LVL231:
 3067 000a 8022     		mov	r2, #128
 3068              	.LVL232:
 3069 000c 1043     		orr	r0, r2
 3070 000e C143     		mvn	r1, r0
 3071 0010 2240     		and	r2, r4
 3072 0012 0A43     		orr	r2, r1
 3073 0014 DA60     		str	r2, [r3, #12]
 3074              		@ sp needed for prologue
2470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rtc.c **** }
 3075              		.loc 1 2470 0
 3076 0016 10BD     		pop	{r4, pc}
 3077              	.L241:
 3078              		.align	2
 3079              	.L240:
 3080 0018 00280040 		.word	1073752064
 3081              		.cfi_endproc
 3082              	.LFE83:
 3084              		.text
 3085              	.Letext0:
 3086              		.file 2 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 3087              		.file 3 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/stm32f
 3088              		.file 4 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\ST
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_rtc.c
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:18     .text.RTC_ByteToBcd2:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:22     .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:67     .text.RTC_Bcd2ToByte:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:71     .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:93     .text.RTC_StructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:98     .text.RTC_StructInit:00000000 RTC_StructInit
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:116    .text.RTC_WriteProtectionCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:121    .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:149    .text.RTC_WriteProtectionCmd:00000014 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:154    .text.RTC_EnterInitMode:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:159    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:222    .text.RTC_EnterInitMode:00000034 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:227    .text.RTC_ExitInitMode:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:232    .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:248    .text.RTC_ExitInitMode:0000000c $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:253    .text.RTC_Init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:258    .text.RTC_Init:00000000 RTC_Init
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:322    .text.RTC_Init:00000040 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:327    .text.RTC_WaitForSynchro:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:332    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:411    .text.RTC_WaitForSynchro:00000044 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:416    .text.RTC_DeInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:421    .text.RTC_DeInit:00000000 RTC_DeInit
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:496    .text.RTC_DeInit:00000048 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:504    .text.RTC_RefClockCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:509    .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:568    .text.RTC_RefClockCmd:00000034 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:573    .text.RTC_BypassShadowCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:578    .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:623    .text.RTC_BypassShadowCmd:00000028 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:628    .text.RTC_SetTime:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:633    .text.RTC_SetTime:00000000 RTC_SetTime
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:777    .text.RTC_SetTime:00000094 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:783    .text.RTC_TimeStructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:788    .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:809    .text.RTC_GetTime:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:814    .text.RTC_GetTime:00000000 RTC_GetTime
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:887    .text.RTC_GetTime:00000048 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:893    .text.RTC_GetSubSecond:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:898    .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:915    .text.RTC_GetSubSecond:00000008 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:920    .text.RTC_SetDate:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:925    .text.RTC_SetDate:00000000 RTC_SetDate
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1056   .text.RTC_SetDate:00000088 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1062   .text.RTC_DateStructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1067   .text.RTC_DateStructInit:00000000 RTC_DateStructInit
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1091   .text.RTC_GetDate:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1096   .text.RTC_GetDate:00000000 RTC_GetDate
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1166   .text.RTC_GetDate:00000040 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1172   .text.RTC_SetAlarm:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1177   .text.RTC_SetAlarm:00000000 RTC_SetAlarm
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1324   .text.RTC_SetAlarm:00000090 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1329   .text.RTC_AlarmStructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1334   .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1364   .text.RTC_GetAlarm:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1369   .text.RTC_GetAlarm:00000000 RTC_GetAlarm
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1464   .text.RTC_GetAlarm:00000060 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1470   .text.RTC_AlarmCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1475   .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1563   .text.RTC_AlarmCmd:0000004c $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1568   .text.RTC_AlarmSubSecondConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1573   .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1603   .text.RTC_AlarmSubSecondConfig:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1608   .text.RTC_GetAlarmSubSecond:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1613   .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1631   .text.RTC_GetAlarmSubSecond:0000000c $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1636   .text.RTC_WakeUpClockConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1641   .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1676   .text.RTC_WakeUpClockConfig:00000020 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1681   .text.RTC_SetWakeUpCounter:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1686   .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1711   .text.RTC_SetWakeUpCounter:00000014 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1716   .text.RTC_GetWakeUpCounter:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1721   .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1735   .text.RTC_GetWakeUpCounter:00000008 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1740   .text.RTC_WakeUpCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1745   .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1838   .text.RTC_WakeUpCmd:00000054 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1844   .text.RTC_DayLightSavingConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1849   .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1890   .text.RTC_DayLightSavingConfig:00000024 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1896   .text.RTC_GetStoreOperation:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1901   .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1917   .text.RTC_GetStoreOperation:0000000c $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1922   .text.RTC_OutputConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1927   .text.RTC_OutputConfig:00000000 RTC_OutputConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1968   .text.RTC_OutputConfig:00000024 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1974   .text.RTC_CalibOutputCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:1979   .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2025   .text.RTC_CalibOutputCmd:00000028 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2031   .text.RTC_CalibOutputConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2036   .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2071   .text.RTC_CalibOutputConfig:00000020 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2077   .text.RTC_SmoothCalibConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2082   .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2151   .text.RTC_SmoothCalibConfig:0000003c $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2157   .text.RTC_TimeStampCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2162   .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2211   .text.RTC_TimeStampCmd:00000028 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2217   .text.RTC_GetTimeStamp:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2222   .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2325   .text.RTC_GetTimeStamp:00000074 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2332   .text.RTC_GetTimeStampSubSecond:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2337   .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2350   .text.RTC_GetTimeStampSubSecond:00000008 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2355   .text.RTC_TamperTriggerConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2360   .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2392   .text.RTC_TamperTriggerConfig:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2397   .text.RTC_TamperCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2402   .text.RTC_TamperCmd:00000000 RTC_TamperCmd
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2435   .text.RTC_TamperCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2440   .text.RTC_TamperFilterConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2445   .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2467   .text.RTC_TamperFilterConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2473   .text.RTC_TamperSamplingFreqConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2478   .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2500   .text.RTC_TamperSamplingFreqConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2506   .text.RTC_TamperPinsPrechargeDuration:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2511   .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2533   .text.RTC_TamperPinsPrechargeDuration:00000014 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2539   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2544   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2575   .text.RTC_TimeStampOnTamperDetectionCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2580   .text.RTC_TamperPullUpCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2585   .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2617   .text.RTC_TamperPullUpCmd:0000001c $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2623   .text.RTC_WriteBackupRegister:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2628   .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2662   .text.RTC_WriteBackupRegister:0000001c $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2667   .text.RTC_ReadBackupRegister:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2672   .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2707   .text.RTC_ReadBackupRegister:0000001c $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2712   .text.RTC_OutputTypeConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2717   .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2739   .text.RTC_OutputTypeConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2745   .text.RTC_SynchroShiftConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2750   .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2831   .text.RTC_SynchroShiftConfig:0000004c $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2837   .text.RTC_ITConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2842   .text.RTC_ITConfig:00000000 RTC_ITConfig
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2905   .text.RTC_ITConfig:00000040 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2910   .text.RTC_GetFlagStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2915   .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2938   .text.RTC_GetFlagStatus:00000010 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2944   .text.RTC_ClearFlag:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2949   .text.RTC_ClearFlag:00000000 RTC_ClearFlag
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2972   .text.RTC_ClearFlag:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2978   .text.RTC_GetITStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:2983   .text.RTC_GetITStatus:00000000 RTC_GetITStatus
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:3039   .text.RTC_GetITStatus:0000002c $d
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:3044   .text.RTC_ClearITPendingBit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:3049   .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
C:\Users\khanh\AppData\Local\Temp\cczWVAc4.s:3080   .text.RTC_ClearITPendingBit:00000018 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
