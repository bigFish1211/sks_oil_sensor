   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_usart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.USART_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	USART_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	USART_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @file    stm32f0xx_usart.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          transmitter (USART):
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Initialization and Configuration
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + STOP Mode
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + AutoBaudRate
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Data transfers
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Multi-Processor Communication
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + LIN mode
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Half-duplex mode
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Smartcard mode
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + IrDA mode
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + RS485 mode  
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + DMA transfers management
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           + Interrupts and flags management
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *  @verbatim
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### How to use this driver #####
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable peripheral clock using RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE)
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function for USART1 or using RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE)
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function for USART2 and USART3.
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) According to the USART mode, enable the GPIO clocks using 
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             RCC_AHBPeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             or and SCLK). 
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Peripheral's alternate function: 
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Connect the pin to the desired peripherals' Alternate 
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  Function (AF) using GPIO_PinAFConfig() function.
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Configure the desired pin in alternate function by:
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF.
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Select the type, pull-up/pull-down and output speed via 
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  GPIO_PuPd, GPIO_OType and GPIO_Speed members.
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Call GPIO_Init() function.        
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             flow control and Mode(Receiver/Transmitter) using the SPI_Init()
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function.  
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) For synchronous mode, enable the clock and program the polarity,
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             phase and last bit using the USART_ClockInit() function.  
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the NVIC and the corresponding interrupt using the function 
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             USART_ITConfig() if you need to use interrupt mode.   
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) When using the DMA mode: 
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Configure the DMA using DMA_Init() function.
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) Active the needed channel Request using USART_DMACmd() function.   
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the USART using the USART_Cmd() function.   
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode.   
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             for more details.
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @attention
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * You may not use this file except in compliance with the License.
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * You may obtain a copy of the License at:
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * See the License for the specific language governing permissions and
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * limitations under the License.
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ******************************************************************************
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #include "stm32f0xx_usart.h"
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #include "stm32f0xx_rcc.h"
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART 
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief USART driver modules
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private define ------------------------------------------------------------*/
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint32_t)0xFFFFE6F3)) */
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR1_CLEAR_MASK            ((uint32_t)(USART_CR1_M | USART_CR1_PCE | \
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR1_RE))
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint32_t)0xFFFFF0FF)) */
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint32_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint32_t)0xFFFFFCFF)) */
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define CR3_CLEAR_MASK            ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*!< USART Interrupts mask */
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** #define IT_MASK                   ((uint32_t)0x000000FF)
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Private_Functions
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           ##### Initialization and Configuration functions #####
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         This subsection provides a set of functions allowing to initialize the USART 
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         in asynchronous and in synchronous modes.
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+) For the asynchronous mode only these parameters can be configured: 
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Baud Rate.
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Word Length.
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Stop Bit.
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Parity: If the parity is enabled, then the MSB bit of the data written
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                in the data register is transmitted but is changed by the parity bit.
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                Depending on the frame length defined by the M bit (8-bits or 9-bits),
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                the possible USART frame formats are as listed in the following table:
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    +-------------------------------------------------------------+     
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------------------|---------------------------------------|             
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |---------|-----------|---------------------------------------|  
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    +-------------------------------------------------------------+            
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Hardware flow control.
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****           (++) Receiver/transmitter modes.
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART_Init() function follows the USART  asynchronous configuration 
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          procedure(details for the procedure are available in reference manual.
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+) For the synchronous mode in addition to the asynchronous mode parameters
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             these parameters should be also configured:
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART Clock Enabled.
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART polarity.
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART phase.
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             (++) USART LastBit.
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] These parameters can be configured using the USART_ClockInit() function.
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices.  
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
  26              		.loc 1 176 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
  33              	.LVL0:
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (USARTx == USART1)
  34              		.loc 1 180 0
  35 0002 2C4B     		ldr	r3, .L12
  36 0004 9842     		cmp	r0, r3
  37 0006 07D1     		bne	.L2
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  38              		.loc 1 182 0
  39 0008 8021     		mov	r1, #128
  40 000a C801     		lsl	r0, r1, #7
  41              	.LVL1:
  42 000c 0121     		mov	r1, #1
  43 000e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  44              		.loc 1 183 0
  45 0012 8020     		mov	r0, #128
  46 0014 C001     		lsl	r0, r0, #7
  47 0016 48E0     		b	.L10
  48              	.LVL2:
  49              	.L2:
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (USARTx == USART2)
  50              		.loc 1 185 0
  51 0018 274A     		ldr	r2, .L12+4
  52 001a 9042     		cmp	r0, r2
  53 001c 07D1     		bne	.L4
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  54              		.loc 1 187 0
  55 001e 8020     		mov	r0, #128
  56              	.LVL3:
  57 0020 8002     		lsl	r0, r0, #10
  58 0022 0121     		mov	r1, #1
  59 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  60              		.loc 1 188 0
  61 0028 8023     		mov	r3, #128
  62 002a 9802     		lsl	r0, r3, #10
  63 002c 1FE0     		b	.L11
  64              	.LVL4:
  65              	.L4:
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (USARTx == USART3)
  66              		.loc 1 190 0
  67 002e 2349     		ldr	r1, .L12+8
  68 0030 8842     		cmp	r0, r1
  69 0032 07D1     		bne	.L5
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  70              		.loc 1 192 0
  71 0034 8023     		mov	r3, #128
  72 0036 D802     		lsl	r0, r3, #11
  73              	.LVL5:
  74 0038 0121     		mov	r1, #1
  75 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  76              		.loc 1 193 0
  77 003e 8022     		mov	r2, #128
  78 0040 D002     		lsl	r0, r2, #11
  79 0042 14E0     		b	.L11
  80              	.LVL6:
  81              	.L5:
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     else if (USARTx == USART4)
  82              		.loc 1 195 0
  83 0044 1E49     		ldr	r1, .L12+12
  84 0046 8842     		cmp	r0, r1
  85 0048 07D1     		bne	.L6
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, ENABLE);
  86              		.loc 1 197 0
  87 004a 8022     		mov	r2, #128
  88 004c 1003     		lsl	r0, r2, #12
  89              	.LVL7:
  90 004e 0121     		mov	r1, #1
  91 0050 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, DISABLE);
  92              		.loc 1 198 0
  93 0054 8020     		mov	r0, #128
  94 0056 0003     		lsl	r0, r0, #12
  95 0058 09E0     		b	.L11
  96              	.LVL8:
  97              	.L6:
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (USARTx == USART5)
  98              		.loc 1 200 0
  99 005a 1A4B     		ldr	r3, .L12+16
 100 005c 9842     		cmp	r0, r3
 101 005e 0AD1     		bne	.L7
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART5, ENABLE);
 102              		.loc 1 202 0
 103 0060 8020     		mov	r0, #128
 104              	.LVL9:
 105 0062 4003     		lsl	r0, r0, #13
 106 0064 0121     		mov	r1, #1
 107 0066 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART5, DISABLE);
 108              		.loc 1 203 0
 109 006a 8021     		mov	r1, #128
 110 006c 4803     		lsl	r0, r1, #13
 111              	.L11:
 112 006e 0021     		mov	r1, #0
 113 0070 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 114 0074 1CE0     		b	.L1
 115              	.LVL10:
 116              	.L7:
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     else if (USARTx == USART6)
 117              		.loc 1 205 0
 118 0076 144A     		ldr	r2, .L12+20
 119 0078 9042     		cmp	r0, r2
 120 007a 05D1     		bne	.L8
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 121              		.loc 1 207 0
 122 007c 2020     		mov	r0, #32
 123              	.LVL11:
 124 007e 0121     		mov	r1, #1
 125 0080 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 126              		.loc 1 208 0
 127 0084 2020     		mov	r0, #32
 128 0086 10E0     		b	.L10
 129              	.LVL12:
 130              	.L8:
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (USARTx == USART7)
 131              		.loc 1 210 0
 132 0088 104B     		ldr	r3, .L12+24
 133 008a 9842     		cmp	r0, r3
 134 008c 05D1     		bne	.L9
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART7, ENABLE);
 135              		.loc 1 212 0
 136 008e 4020     		mov	r0, #64
 137              	.LVL13:
 138 0090 0121     		mov	r1, #1
 139 0092 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART7, DISABLE);
 140              		.loc 1 213 0
 141 0096 4020     		mov	r0, #64
 142 0098 07E0     		b	.L10
 143              	.LVL14:
 144              	.L9:
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else 
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     if  (USARTx == USART8)
 145              		.loc 1 217 0
 146 009a 0D49     		ldr	r1, .L12+28
 147 009c 8842     		cmp	r0, r1
 148 009e 07D1     		bne	.L1
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     {
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, ENABLE);
 149              		.loc 1 219 0
 150 00a0 8020     		mov	r0, #128
 151              	.LVL15:
 152 00a2 0121     		mov	r1, #1
 153 00a4 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART8, DISABLE);
 154              		.loc 1 220 0
 155 00a8 8020     		mov	r0, #128
 156              	.L10:
 157 00aa 0021     		mov	r1, #0
 158 00ac FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 159              	.L1:
 160              		@ sp needed for prologue
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     }
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 161              		.loc 1 223 0
 162 00b0 08BD     		pop	{r3, pc}
 163              	.L13:
 164 00b2 C046     		.align	2
 165              	.L12:
 166 00b4 00380140 		.word	1073821696
 167 00b8 00440040 		.word	1073759232
 168 00bc 00480040 		.word	1073760256
 169 00c0 004C0040 		.word	1073761280
 170 00c4 00500040 		.word	1073762304
 171 00c8 00140140 		.word	1073812480
 172 00cc 00180140 		.word	1073813504
 173 00d0 001C0140 		.word	1073814528
 174              		.cfi_endproc
 175              	.LFE33:
 177              		.global	__aeabi_uidiv
 178              		.global	__aeabi_uidivmod
 179              		.section	.text.USART_Init,"ax",%progbits
 180              		.align	1
 181              		.global	USART_Init
 182              		.code	16
 183              		.thumb_func
 185              	USART_Init:
 186              	.LFB34:
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         parameters in the USART_InitStruct .
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.    
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 187              		.loc 1 237 0
 188              		.cfi_startproc
 189 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 190              	.LCFI1:
 191              		.cfi_def_cfa_offset 20
 192              		.cfi_offset 4, -20
 193              		.cfi_offset 5, -16
 194              		.cfi_offset 6, -12
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197              	.LVL16:
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Disable USART */
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 198              		.loc 1 251 0
 199 0002 0368     		ldr	r3, [r0]
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 200              		.loc 1 237 0
 201 0004 061C     		mov	r6, r0
 202              		.loc 1 251 0
 203 0006 0120     		mov	r0, #1
 204              	.LVL17:
 205 0008 8343     		bic	r3, r0
 206 000a 3360     		str	r3, [r6]
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /*---------------------------- USART CR2 Configuration -----------------------*/
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR2;
 207              		.loc 1 254 0
 208 000c 7768     		ldr	r7, [r6, #4]
 209              	.LVL18:
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 210              		.loc 1 237 0
 211 000e 0D1C     		mov	r5, r1
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear STOP[13:12] bits */
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 212              		.loc 1 256 0
 213 0010 2449     		ldr	r1, .L23
 214              	.LVL19:
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set STOP[13:12] bits according to USART_StopBits value */
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 215              		.loc 1 260 0
 216 0012 AC68     		ldr	r4, [r5, #8]
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 217              		.loc 1 256 0
 218 0014 3940     		and	r1, r7
 219              	.LVL20:
 220              		.loc 1 260 0
 221 0016 2143     		orr	r1, r4
 222              	.LVL21:
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR2 */
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 = tmpreg;
 223              		.loc 1 263 0
 224 0018 7160     		str	r1, [r6, #4]
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /*---------------------------- USART CR1 Configuration -----------------------*/
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR1;
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Word Length, Parity and mode ----------------------- */
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the M bits according to USART_WordLength value */
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set PCE and PS bits according to USART_Parity value */
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set TE and RE bits according to USART_Mode value */
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 225              		.loc 1 274 0
 226 001a E868     		ldr	r0, [r5, #12]
 227 001c 6C68     		ldr	r4, [r5, #4]
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR1;
 228              		.loc 1 266 0
 229 001e 3768     		ldr	r7, [r6]
 230              	.LVL22:
 231              		.loc 1 274 0
 232 0020 2B69     		ldr	r3, [r5, #16]
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 233              		.loc 1 268 0
 234 0022 214A     		ldr	r2, .L23+4
 235              		.loc 1 274 0
 236 0024 0443     		orr	r4, r0
 237 0026 1C43     		orr	r4, r3
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 238              		.loc 1 268 0
 239 0028 1740     		and	r7, r2
 240              	.LVL23:
 241              		.loc 1 274 0
 242 002a 3C43     		orr	r4, r7
 243              	.LVL24:
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USART_InitStruct->USART_Mode;
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR1 */
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 = tmpreg;
 244              		.loc 1 278 0
 245 002c 3460     		str	r4, [r6]
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /*---------------------------- USART CR3 Configuration -----------------------*/  
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR3;
 246              		.loc 1 281 0
 247 002e B168     		ldr	r1, [r6, #8]
 248              	.LVL25:
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear CTSE and RTSE bits */
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 249              		.loc 1 283 0
 250 0030 1E48     		ldr	r0, .L23+8
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART HFC -------------------------------------------------*/
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 251              		.loc 1 287 0
 252 0032 6A69     		ldr	r2, [r5, #20]
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 253              		.loc 1 283 0
 254 0034 0840     		and	r0, r1
 255              	.LVL26:
 256              		.loc 1 287 0
 257 0036 1043     		orr	r0, r2
 258              	.LVL27:
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 259              		.loc 1 237 0
 260 0038 8DB0     		sub	sp, sp, #52
 261              	.LCFI2:
 262              		.cfi_def_cfa_offset 72
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR3 */
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 = tmpreg;
 263              		.loc 1 290 0
 264 003a B060     		str	r0, [r6, #8]
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /*---------------------------- USART BRR Configuration -----------------------*/
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Baud Rate -------------------------------------------*/
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 265              		.loc 1 294 0
 266 003c 02A8     		add	r0, sp, #8
 267              	.LVL28:
 268 003e FFF7FEFF 		bl	RCC_GetClocksFreq
 269              	.LVL29:
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (USARTx == USART1)
 270              		.loc 1 296 0
 271 0042 1B4B     		ldr	r3, .L23+12
 272 0044 9E42     		cmp	r6, r3
 273 0046 01D1     		bne	.L15
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 274              		.loc 1 298 0
 275 0048 089C     		ldr	r4, [sp, #32]
 276              	.LVL30:
 277 004a 0AE0     		b	.L16
 278              	.LVL31:
 279              	.L15:
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (USARTx == USART2)
 280              		.loc 1 300 0
 281 004c 194A     		ldr	r2, .L23+16
 282 004e 9642     		cmp	r6, r2
 283 0050 01D1     		bne	.L17
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 284              		.loc 1 302 0
 285 0052 099C     		ldr	r4, [sp, #36]
 286              	.LVL32:
 287 0054 05E0     		b	.L16
 288              	.LVL33:
 289              	.L17:
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****    else if (USARTx == USART3)
 290              		.loc 1 304 0
 291 0056 1849     		ldr	r1, .L23+20
 292 0058 8E42     		cmp	r6, r1
 293 005a 01D1     		bne	.L18
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.USART3CLK_Frequency;
 294              		.loc 1 306 0
 295 005c 0A9C     		ldr	r4, [sp, #40]
 296              	.LVL34:
 297 005e 00E0     		b	.L16
 298              	.LVL35:
 299              	.L18:
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK_Frequency;
 300              		.loc 1 310 0
 301 0060 049C     		ldr	r4, [sp, #16]
 302              	.LVL36:
 303              	.L16:
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Determine the integer part */
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 304              		.loc 1 314 0
 305 0062 3368     		ldr	r3, [r6]
 306 0064 2F68     		ldr	r7, [r5]
 307 0066 1904     		lsl	r1, r3, #16
 308 0068 00D5     		bpl	.L19
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* (divider * 10) computing in case Oversampling mode is 8 Samples */
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 309              		.loc 1 317 0
 310 006a 6400     		lsl	r4, r4, #1
 311              	.LVL37:
 312              	.L19:
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* (divider * 10) computing in case Oversampling mode is 16 Samples */
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 313              		.loc 1 323 0
 314 006c 391C     		mov	r1, r7
 315 006e 201C     		mov	r0, r4
 316 0070 FFF7FEFF 		bl	__aeabi_uidiv
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 317              		.loc 1 324 0
 318 0074 391C     		mov	r1, r7
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 319              		.loc 1 323 0
 320 0076 0190     		str	r0, [sp, #4]
 321              	.LVL38:
 322              		.loc 1 324 0
 323 0078 201C     		mov	r0, r4
 324              	.LVL39:
 325 007a FFF7FEFF 		bl	__aeabi_uidivmod
 326              	.LVL40:
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* round the divider : if fractional part i greater than 0.5 increment divider */
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 327              		.loc 1 328 0
 328 007e 2A68     		ldr	r2, [r5]
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     divider++;
 329              		.loc 1 330 0
 330 0080 0024     		mov	r4, #0
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 331              		.loc 1 328 0
 332 0082 5008     		lsr	r0, r2, #1
 333              		.loc 1 330 0
 334 0084 019F     		ldr	r7, [sp, #4]
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   } 
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Implement the divider in case Oversampling mode is 8 Samples */
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 335              		.loc 1 334 0
 336 0086 3568     		ldr	r5, [r6]
 337              	.LVL41:
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     divider++;
 338              		.loc 1 330 0
 339 0088 8142     		cmp	r1, r0
 340 008a 6441     		adc	r4, r4, r4
 341 008c 3B19     		add	r3, r7, r4
 342              		.loc 1 334 0
 343 008e 2904     		lsl	r1, r5, #16
 344 0090 04D5     		bpl	.L22
 345              	.LVL42:
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* get the LSB of divider and shift it to the right by 1 bit */
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg = (divider & (uint16_t)0x000F) >> 1;
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* update the divider value */
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 346              		.loc 1 340 0
 347 0092 0A49     		ldr	r1, .L23+24
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     tmpreg = (divider & (uint16_t)0x000F) >> 1;
 348              		.loc 1 337 0
 349 0094 1C07     		lsl	r4, r3, #28
 350 0096 650F     		lsr	r5, r4, #29
 351              	.LVL43:
 352              		.loc 1 340 0
 353 0098 0B40     		and	r3, r1
 354 009a 2B43     		orr	r3, r5
 355              	.LVL44:
 356              	.L22:
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART BRR */
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->BRR = (uint16_t)divider;
 357              		.loc 1 344 0
 358 009c B381     		strh	r3, [r6, #12]
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 359              		.loc 1 345 0
 360 009e 0DB0     		add	sp, sp, #52
 361              		@ sp needed for prologue
 362              	.LVL45:
 363 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 364              	.L24:
 365 00a2 C046     		.align	2
 366              	.L23:
 367 00a4 FFCFFFFF 		.word	-12289
 368 00a8 F3E9FFFF 		.word	-5645
 369 00ac FFFCFFFF 		.word	-769
 370 00b0 00380140 		.word	1073821696
 371 00b4 00440040 		.word	1073759232
 372 00b8 00480040 		.word	1073760256
 373 00bc F0FF0000 		.word	65520
 374              		.cfi_endproc
 375              	.LFE34:
 377              		.section	.text.USART_StructInit,"ax",%progbits
 378              		.align	1
 379              		.global	USART_StructInit
 380              		.code	16
 381              		.thumb_func
 383              	USART_StructInit:
 384              	.LFB35:
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         which will be initialized.
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 385              		.loc 1 354 0
 386              		.cfi_startproc
 387              	.LVL46:
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* USART_InitStruct members default value */
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 388              		.loc 1 356 0
 389 0000 9623     		mov	r3, #150
 390 0002 9901     		lsl	r1, r3, #6
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 391              		.loc 1 360 0
 392 0004 0C22     		mov	r2, #12
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 393              		.loc 1 357 0
 394 0006 0023     		mov	r3, #0
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 395              		.loc 1 356 0
 396 0008 0160     		str	r1, [r0]
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 397              		.loc 1 357 0
 398 000a 4360     		str	r3, [r0, #4]
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 399              		.loc 1 358 0
 400 000c 8360     		str	r3, [r0, #8]
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 401              		.loc 1 359 0
 402 000e C360     		str	r3, [r0, #12]
 403              		.loc 1 360 0
 404 0010 0261     		str	r2, [r0, #16]
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 405              		.loc 1 361 0
 406 0012 4361     		str	r3, [r0, #20]
 407              		@ sp needed for prologue
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 408              		.loc 1 362 0
 409 0014 7047     		bx	lr
 410              		.cfi_endproc
 411              	.LFE35:
 413              		.section	.text.USART_ClockInit,"ax",%progbits
 414              		.align	1
 415              		.global	USART_ClockInit
 416              		.code	16
 417              		.thumb_func
 419              	USART_ClockInit:
 420              	.LFB36:
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct.
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.   
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         structure that contains the configuration information for the specified 
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         USART peripheral.  
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 421              		.loc 1 377 0
 422              		.cfi_startproc
 423 0000 10B5     		push	{r4, lr}
 424              	.LCFI3:
 425              		.cfi_def_cfa_offset 8
 426              		.cfi_offset 4, -8
 427              		.cfi_offset 14, -4
 428              	.LVL47:
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t tmpreg = 0;
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg = USARTx->CR2;
 429              		.loc 1 386 0
 430 0002 4268     		ldr	r2, [r0, #4]
 431              	.LVL48:
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 432              		.loc 1 388 0
 433 0004 054B     		ldr	r3, .L27
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 434              		.loc 1 394 0
 435 0006 4C68     		ldr	r4, [r1, #4]
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 436              		.loc 1 388 0
 437 0008 1A40     		and	r2, r3
 438              	.LVL49:
 439              		.loc 1 394 0
 440 000a 0B68     		ldr	r3, [r1]
 441              		@ sp needed for prologue
 442 000c 2343     		orr	r3, r4
 443 000e 8C68     		ldr	r4, [r1, #8]
 444 0010 C968     		ldr	r1, [r1, #12]
 445              	.LVL50:
 446 0012 2343     		orr	r3, r4
 447 0014 0B43     		orr	r3, r1
 448 0016 1343     		orr	r3, r2
 449              	.LVL51:
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Write to USART CR2 */
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 = tmpreg;
 450              		.loc 1 397 0
 451 0018 4360     		str	r3, [r0, #4]
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 452              		.loc 1 398 0
 453 001a 10BD     		pop	{r4, pc}
 454              	.L28:
 455              		.align	2
 456              	.L27:
 457 001c FFF0FFFF 		.word	-3841
 458              		.cfi_endproc
 459              	.LFE36:
 461              		.section	.text.USART_ClockStructInit,"ax",%progbits
 462              		.align	1
 463              		.global	USART_ClockStructInit
 464              		.code	16
 465              		.thumb_func
 467              	USART_ClockStructInit:
 468              	.LFB37:
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         structure which will be initialized.
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 469              		.loc 1 407 0
 470              		.cfi_startproc
 471              	.LVL52:
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* USART_ClockInitStruct members default value */
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 472              		.loc 1 409 0
 473 0000 0023     		mov	r3, #0
 474 0002 0360     		str	r3, [r0]
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 475              		.loc 1 410 0
 476 0004 4360     		str	r3, [r0, #4]
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 477              		.loc 1 411 0
 478 0006 8360     		str	r3, [r0, #8]
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 479              		.loc 1 412 0
 480 0008 C360     		str	r3, [r0, #12]
 481              		@ sp needed for prologue
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 482              		.loc 1 413 0
 483 000a 7047     		bx	lr
 484              		.cfi_endproc
 485              	.LFE37:
 487              		.section	.text.USART_Cmd,"ax",%progbits
 488              		.align	1
 489              		.global	USART_Cmd
 490              		.code	16
 491              		.thumb_func
 493              	USART_Cmd:
 494              	.LFB38:
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.    
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 495              		.loc 1 426 0
 496              		.cfi_startproc
 497 0000 00B5     		push	{lr}
 498              	.LCFI4:
 499              		.cfi_def_cfa_offset 4
 500              		.cfi_offset 14, -4
 501              	.LVL53:
 502 0002 0123     		mov	r3, #1
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 503              		.loc 1 434 0
 504 0004 0268     		ldr	r2, [r0]
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 505              		.loc 1 431 0
 506 0006 0029     		cmp	r1, #0
 507 0008 01D0     		beq	.L31
 508              		.loc 1 434 0
 509 000a 1343     		orr	r3, r2
 510 000c 01E0     		b	.L33
 511              	.L31:
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 512              		.loc 1 439 0
 513 000e 9A43     		bic	r2, r3
 514 0010 131C     		mov	r3, r2
 515              	.L33:
 516 0012 0360     		str	r3, [r0]
 517              		@ sp needed for prologue
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 518              		.loc 1 441 0
 519 0014 00BD     		pop	{pc}
 520              		.cfi_endproc
 521              	.LFE38:
 523              		.section	.text.USART_DirectionModeCmd,"ax",%progbits
 524              		.align	1
 525              		.global	USART_DirectionModeCmd
 526              		.code	16
 527              		.thumb_func
 529              	USART_DirectionModeCmd:
 530              	.LFB39:
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's transmitter or receiver.
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Direction: specifies the USART direction.
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Mode_Tx: USART Transmitter
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Mode_Rx: USART Receiver
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART transfer direction.
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState Ne
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 531              		.loc 1 458 0
 532              		.cfi_startproc
 533 0000 00B5     		push	{lr}
 534              	.LCFI5:
 535              		.cfi_def_cfa_offset 4
 536              		.cfi_offset 14, -4
 537              	.LVL54:
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MODE(USART_DirectionMode));
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART's transfer interface by setting the TE and/or RE bits 
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        in the USART CR1 register */
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_DirectionMode;
 538              		.loc 1 468 0
 539 0002 0368     		ldr	r3, [r0]
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 540              		.loc 1 464 0
 541 0004 002A     		cmp	r2, #0
 542 0006 02D0     		beq	.L35
 543              		.loc 1 468 0
 544 0008 1943     		orr	r1, r3
 545              	.LVL55:
 546 000a 0160     		str	r1, [r0]
 547 000c 01E0     		b	.L34
 548              	.LVL56:
 549              	.L35:
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART's transfer interface by clearing the TE and/or RE bits
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        in the USART CR3 register */
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 550              		.loc 1 474 0
 551 000e 8B43     		bic	r3, r1
 552 0010 0360     		str	r3, [r0]
 553              	.LVL57:
 554              	.L34:
 555              		@ sp needed for prologue
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 556              		.loc 1 476 0
 557 0012 00BD     		pop	{pc}
 558              		.cfi_endproc
 559              	.LFE39:
 561              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 562              		.align	1
 563              		.global	USART_OverSampling8Cmd
 564              		.code	16
 565              		.thumb_func
 567              	USART_OverSampling8Cmd:
 568              	.LFB40:
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         in order to have correct baudrate Divider value.
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 569              		.loc 1 491 0
 570              		.cfi_startproc
 571 0000 00B5     		push	{lr}
 572              	.LCFI6:
 573              		.cfi_def_cfa_offset 4
 574              		.cfi_offset 14, -4
 575              	.LVL58:
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 576              		.loc 1 499 0
 577 0002 0268     		ldr	r2, [r0]
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 578              		.loc 1 496 0
 579 0004 0029     		cmp	r1, #0
 580 0006 03D0     		beq	.L38
 581              		.loc 1 499 0
 582 0008 8023     		mov	r3, #128
 583 000a 1B02     		lsl	r3, r3, #8
 584 000c 1343     		orr	r3, r2
 585 000e 01E0     		b	.L40
 586              	.L38:
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 587              		.loc 1 504 0
 588 0010 014B     		ldr	r3, .L41
 589 0012 1340     		and	r3, r2
 590              	.L40:
 591 0014 0360     		str	r3, [r0]
 592              		@ sp needed for prologue
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }  
 593              		.loc 1 506 0
 594 0016 00BD     		pop	{pc}
 595              	.L42:
 596              		.align	2
 597              	.L41:
 598 0018 FF7FFFFF 		.word	-32769
 599              		.cfi_endproc
 600              	.LFE40:
 602              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 603              		.align	1
 604              		.global	USART_OneBitMethodCmd
 605              		.code	16
 606              		.thumb_func
 608              	USART_OneBitMethodCmd:
 609              	.LFB41:
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 610              		.loc 1 520 0
 611              		.cfi_startproc
 612 0000 00B5     		push	{lr}
 613              	.LCFI7:
 614              		.cfi_def_cfa_offset 4
 615              		.cfi_offset 14, -4
 616              	.LVL59:
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 617              		.loc 1 528 0
 618 0002 8268     		ldr	r2, [r0, #8]
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 619              		.loc 1 525 0
 620 0004 0029     		cmp	r1, #0
 621 0006 03D0     		beq	.L44
 622              		.loc 1 528 0
 623 0008 8023     		mov	r3, #128
 624 000a 1B01     		lsl	r3, r3, #4
 625 000c 1343     		orr	r3, r2
 626 000e 01E0     		b	.L46
 627              	.L44:
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 628              		.loc 1 533 0
 629 0010 014B     		ldr	r3, .L47
 630 0012 1340     		and	r3, r2
 631              	.L46:
 632 0014 8360     		str	r3, [r0, #8]
 633              		@ sp needed for prologue
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 634              		.loc 1 535 0
 635 0016 00BD     		pop	{pc}
 636              	.L48:
 637              		.align	2
 638              	.L47:
 639 0018 FFF7FFFF 		.word	-2049
 640              		.cfi_endproc
 641              	.LFE41:
 643              		.section	.text.USART_MSBFirstCmd,"ax",%progbits
 644              		.align	1
 645              		.global	USART_MSBFirstCmd
 646              		.code	16
 647              		.thumb_func
 649              	USART_MSBFirstCmd:
 650              	.LFB42:
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's most significant bit first 
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         transmitted/received following the start bit.
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART most significant bit first
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         transmitted/received following the start bit.
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 651              		.loc 1 551 0
 652              		.cfi_startproc
 653 0000 00B5     		push	{lr}
 654              	.LCFI8:
 655              		.cfi_def_cfa_offset 4
 656              		.cfi_offset 14, -4
 657              	.LVL60:
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the most significant bit first transmitted/received following the 
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        start bit by setting the MSBFIRST bit in the CR2 register */
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_MSBFIRST;
 658              		.loc 1 560 0
 659 0002 4268     		ldr	r2, [r0, #4]
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 660              		.loc 1 556 0
 661 0004 0029     		cmp	r1, #0
 662 0006 03D0     		beq	.L50
 663              		.loc 1 560 0
 664 0008 8023     		mov	r3, #128
 665 000a 1B03     		lsl	r3, r3, #12
 666 000c 1343     		orr	r3, r2
 667 000e 01E0     		b	.L52
 668              	.L50:
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the most significant bit first transmitted/received following the 
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        start bit by clearing the MSBFIRST bit in the CR2 register */
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 669              		.loc 1 566 0
 670 0010 014B     		ldr	r3, .L53
 671 0012 1340     		and	r3, r2
 672              	.L52:
 673 0014 4360     		str	r3, [r0, #4]
 674              		@ sp needed for prologue
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 675              		.loc 1 568 0
 676 0016 00BD     		pop	{pc}
 677              	.L54:
 678              		.align	2
 679              	.L53:
 680 0018 FFFFF7FF 		.word	-524289
 681              		.cfi_endproc
 682              	.LFE42:
 684              		.section	.text.USART_DataInvCmd,"ax",%progbits
 685              		.align	1
 686              		.global	USART_DataInvCmd
 687              		.code	16
 688              		.thumb_func
 690              	USART_DataInvCmd:
 691              	.LFB43:
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the binary data inversion.
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new defined levels for the USART data.
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be:
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg ENABLE: Logical data from the data register are send/received in negative
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                          logic (1=L, 0=H). The parity bit is also inverted.
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg DISABLE: Logical data from the data register are send/received in positive
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                          logic (1=H, 0=L) 
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 692              		.loc 1 586 0
 693              		.cfi_startproc
 694 0000 00B5     		push	{lr}
 695              	.LCFI9:
 696              		.cfi_def_cfa_offset 4
 697              		.cfi_offset 14, -4
 698              	.LVL61:
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the binary data inversion feature by setting the DATAINV bit in 
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        the CR2 register */
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_DATAINV;
 699              		.loc 1 595 0
 700 0002 4268     		ldr	r2, [r0, #4]
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 701              		.loc 1 591 0
 702 0004 0029     		cmp	r1, #0
 703 0006 03D0     		beq	.L56
 704              		.loc 1 595 0
 705 0008 8023     		mov	r3, #128
 706 000a DB02     		lsl	r3, r3, #11
 707 000c 1343     		orr	r3, r2
 708 000e 01E0     		b	.L58
 709              	.L56:
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the binary data inversion feature by clearing the DATAINV bit in 
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        the CR2 register */
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 710              		.loc 1 601 0
 711 0010 014B     		ldr	r3, .L59
 712 0012 1340     		and	r3, r2
 713              	.L58:
 714 0014 4360     		str	r3, [r0, #4]
 715              		@ sp needed for prologue
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 716              		.loc 1 603 0
 717 0016 00BD     		pop	{pc}
 718              	.L60:
 719              		.align	2
 720              	.L59:
 721 0018 FFFFFBFF 		.word	-262145
 722              		.cfi_endproc
 723              	.LFE43:
 725              		.section	.text.USART_InvPinCmd,"ax",%progbits
 726              		.align	1
 727              		.global	USART_InvPinCmd
 728              		.code	16
 729              		.thumb_func
 731              	USART_InvPinCmd:
 732              	.LFB44:
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the Pin(s) active level inversion.
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_InvPin: specifies the USART pin(s) to invert.
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_InvPin_Tx: USART Tx pin active level inversion.
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_InvPin_Rx: USART Rx pin active level inversion.
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new active level status for the USART pin(s).
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be:
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg ENABLE: pin(s) signal values are inverted (Vdd =0, Gnd =1).
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg DISABLE: pin(s) signal works using the standard logic levels (Vdd =1, Gnd =0).
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 733              		.loc 1 623 0
 734              		.cfi_startproc
 735 0000 00B5     		push	{lr}
 736              	.LCFI10:
 737              		.cfi_def_cfa_offset 4
 738              		.cfi_offset 14, -4
 739              	.LVL62:
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));  
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the active level inversion for selected pins by setting the TXINV 
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        and/or RXINV bits in the USART CR2 register */
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_InvPin;
 740              		.loc 1 633 0
 741 0002 4368     		ldr	r3, [r0, #4]
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 742              		.loc 1 629 0
 743 0004 002A     		cmp	r2, #0
 744 0006 02D0     		beq	.L62
 745              		.loc 1 633 0
 746 0008 1943     		orr	r1, r3
 747              	.LVL63:
 748 000a 4160     		str	r1, [r0, #4]
 749 000c 01E0     		b	.L61
 750              	.LVL64:
 751              	.L62:
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the active level inversion for selected requests by clearing the 
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        TXINV and/or RXINV bits in the USART CR2 register */
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~USART_InvPin;
 752              		.loc 1 639 0
 753 000e 8B43     		bic	r3, r1
 754 0010 4360     		str	r3, [r0, #4]
 755              	.LVL65:
 756              	.L61:
 757              		@ sp needed for prologue
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 758              		.loc 1 641 0
 759 0012 00BD     		pop	{pc}
 760              		.cfi_endproc
 761              	.LFE44:
 763              		.section	.text.USART_SWAPPinCmd,"ax",%progbits
 764              		.align	1
 765              		.global	USART_SWAPPinCmd
 766              		.code	16
 767              		.thumb_func
 769              	USART_SWAPPinCmd:
 770              	.LFB45:
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the swap Tx/Rx pins.
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx TX/RX pins pinout.
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be:
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg ENABLE: The TX and RX pins functions are swapped.
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg DISABLE: TX/RX pins are used as defined in standard pinout
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 771              		.loc 1 657 0
 772              		.cfi_startproc
 773 0000 00B5     		push	{lr}
 774              	.LCFI11:
 775              		.cfi_def_cfa_offset 4
 776              		.cfi_offset 14, -4
 777              	.LVL66:
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_SWAP;
 778              		.loc 1 665 0
 779 0002 4268     		ldr	r2, [r0, #4]
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 780              		.loc 1 662 0
 781 0004 0029     		cmp	r1, #0
 782 0006 03D0     		beq	.L65
 783              		.loc 1 665 0
 784 0008 8023     		mov	r3, #128
 785 000a 1B02     		lsl	r3, r3, #8
 786 000c 1343     		orr	r3, r2
 787 000e 01E0     		b	.L67
 788              	.L65:
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 789              		.loc 1 670 0
 790 0010 014B     		ldr	r3, .L68
 791 0012 1340     		and	r3, r2
 792              	.L67:
 793 0014 4360     		str	r3, [r0, #4]
 794              		@ sp needed for prologue
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 795              		.loc 1 672 0
 796 0016 00BD     		pop	{pc}
 797              	.L69:
 798              		.align	2
 799              	.L68:
 800 0018 FF7FFFFF 		.word	-32769
 801              		.cfi_endproc
 802              	.LFE45:
 804              		.section	.text.USART_ReceiverTimeOutCmd,"ax",%progbits
 805              		.align	1
 806              		.global	USART_ReceiverTimeOutCmd
 807              		.code	16
 808              		.thumb_func
 810              	USART_ReceiverTimeOutCmd:
 811              	.LFB46:
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the receiver Time Out feature.
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.  
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx receiver Time Out.
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 812              		.loc 1 684 0
 813              		.cfi_startproc
 814 0000 00B5     		push	{lr}
 815              	.LCFI12:
 816              		.cfi_def_cfa_offset 4
 817              		.cfi_offset 14, -4
 818              	.LVL67:
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_RTOEN;
 819              		.loc 1 693 0
 820 0002 4268     		ldr	r2, [r0, #4]
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 821              		.loc 1 689 0
 822 0004 0029     		cmp	r1, #0
 823 0006 03D0     		beq	.L71
 824              		.loc 1 693 0
 825 0008 8023     		mov	r3, #128
 826 000a 1B04     		lsl	r3, r3, #16
 827 000c 1343     		orr	r3, r2
 828 000e 01E0     		b	.L73
 829              	.L71:
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 830              		.loc 1 699 0
 831 0010 014B     		ldr	r3, .L74
 832 0012 1340     		and	r3, r2
 833              	.L73:
 834 0014 4360     		str	r3, [r0, #4]
 835              		@ sp needed for prologue
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 836              		.loc 1 701 0
 837 0016 00BD     		pop	{pc}
 838              	.L75:
 839              		.align	2
 840              	.L74:
 841 0018 FFFF7FFF 		.word	-8388609
 842              		.cfi_endproc
 843              	.LFE46:
 845              		.section	.text.USART_SetReceiverTimeOut,"ax",%progbits
 846              		.align	1
 847              		.global	USART_SetReceiverTimeOut
 848              		.code	16
 849              		.thumb_func
 851              	USART_SetReceiverTimeOut:
 852              	.LFB47:
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the receiver Time Out value.
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.   
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_ReceiverTimeOut: specifies the Receiver Time Out value.
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetReceiverTimeOut(USART_TypeDef* USARTx, uint32_t USART_ReceiverTimeOut)
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 853              		.loc 1 712 0
 854              		.cfi_startproc
 855              	.LVL68:
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      register  */
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 856              		.loc 1 719 0
 857 0000 4269     		ldr	r2, [r0, #20]
 858              		@ sp needed for prologue
 859 0002 130E     		lsr	r3, r2, #24
 860 0004 1A06     		lsl	r2, r3, #24
 861 0006 4261     		str	r2, [r0, #20]
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      register  */
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR |= USART_ReceiverTimeOut;
 862              		.loc 1 722 0
 863 0008 4369     		ldr	r3, [r0, #20]
 864 000a 1943     		orr	r1, r3
 865              	.LVL69:
 866 000c 4161     		str	r1, [r0, #20]
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 867              		.loc 1 723 0
 868 000e 7047     		bx	lr
 869              		.cfi_endproc
 870              	.LFE47:
 872              		.section	.text.USART_SetPrescaler,"ax",%progbits
 873              		.align	1
 874              		.global	USART_SetPrescaler
 875              		.code	16
 876              		.thumb_func
 878              	USART_SetPrescaler:
 879              	.LFB48:
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the system clock prescaler.
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.    
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices. 
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock.
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.    
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** { 
 880              		.loc 1 736 0
 881              		.cfi_startproc
 882              	.LVL70:
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART prescaler */
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 883              		.loc 1 741 0
 884 0000 038A     		ldrh	r3, [r0, #16]
 885 0002 FF22     		mov	r2, #255
 886 0004 9343     		bic	r3, r2
 887 0006 0382     		strh	r3, [r0, #16]
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART prescaler */
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 888              		.loc 1 743 0
 889 0008 038A     		ldrh	r3, [r0, #16]
 890              		@ sp needed for prologue
 891 000a 1943     		orr	r1, r3
 892              	.LVL71:
 893 000c 0182     		strh	r1, [r0, #16]
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 894              		.loc 1 744 0
 895 000e 7047     		bx	lr
 896              		.cfi_endproc
 897              	.LFE48:
 899              		.section	.text.USART_STOPModeCmd,"ax",%progbits
 900              		.align	1
 901              		.global	USART_STOPModeCmd
 902              		.code	16
 903              		.thumb_func
 905              	USART_STOPModeCmd:
 906              	.LFB49:
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group2 STOP Mode functions
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   STOP Mode functions
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### STOP Mode functions #####
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          WakeUp from STOP mode.
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART is able to WakeUp from Stop Mode if USART clock is set to HSI
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          or LSI.
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The WakeUp source is configured by calling USART_StopModeWakeUpSourceConfig()
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function.
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] After configuring the source of WakeUp and before entering in Stop Mode 
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART_STOPModeCmd() function should be called to allow USART WakeUp.
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                            
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral in STOP Mode.
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3  to select the USART peripheral.
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices.  
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.   
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral state in stop mode.
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called when USART clock is set to HSI or LSE. 
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 907              		.loc 1 785 0
 908              		.cfi_startproc
 909 0000 00B5     		push	{lr}
 910              	.LCFI13:
 911              		.cfi_def_cfa_offset 4
 912              		.cfi_offset 14, -4
 913              	.LVL72:
 914 0002 0223     		mov	r3, #2
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_UESM;
 915              		.loc 1 794 0
 916 0004 0268     		ldr	r2, [r0]
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 917              		.loc 1 790 0
 918 0006 0029     		cmp	r1, #0
 919 0008 01D0     		beq	.L79
 920              		.loc 1 794 0
 921 000a 1343     		orr	r3, r2
 922 000c 01E0     		b	.L81
 923              	.L79:
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 924              		.loc 1 800 0
 925 000e 9A43     		bic	r2, r3
 926 0010 131C     		mov	r3, r2
 927              	.L81:
 928 0012 0360     		str	r3, [r0]
 929              		@ sp needed for prologue
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 930              		.loc 1 802 0
 931 0014 00BD     		pop	{pc}
 932              		.cfi_endproc
 933              	.LFE49:
 935              		.section	.text.USART_StopModeWakeUpSourceConfig,"ax",%progbits
 936              		.align	1
 937              		.global	USART_StopModeWakeUpSourceConfig
 938              		.code	16
 939              		.thumb_func
 941              	USART_StopModeWakeUpSourceConfig:
 942              	.LFB50:
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART WakeUp method form stop mode.
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.   
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1 or 2 or 3 to select the USART peripheral.
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.     
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_WakeUp: specifies the selected USART wakeup method.
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_WakeUpSource_AddressMatch: WUF active on address match.
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_WakeUpSource_StartBit: WUF active on Start bit detection.
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_WakeUpSource_RXNE: WUF active on RXNE.
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.   
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_StopModeWakeUpSourceConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUpSource)
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 943              		.loc 1 819 0
 944              		.cfi_startproc
 945              	.LVL73:
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 946              		.loc 1 824 0
 947 0000 8268     		ldr	r2, [r0, #8]
 948 0002 034B     		ldr	r3, .L83
 949              		@ sp needed for prologue
 950 0004 1340     		and	r3, r2
 951 0006 8360     		str	r3, [r0, #8]
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_WakeUpSource;
 952              		.loc 1 825 0
 953 0008 8368     		ldr	r3, [r0, #8]
 954 000a 1943     		orr	r1, r3
 955              	.LVL74:
 956 000c 8160     		str	r1, [r0, #8]
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 957              		.loc 1 826 0
 958 000e 7047     		bx	lr
 959              	.L84:
 960              		.align	2
 961              	.L83:
 962 0010 FFFFCFFF 		.word	-3145729
 963              		.cfi_endproc
 964              	.LFE50:
 966              		.section	.text.USART_AutoBaudRateCmd,"ax",%progbits
 967              		.align	1
 968              		.global	USART_AutoBaudRateCmd
 969              		.code	16
 970              		.thumb_func
 972              	USART_AutoBaudRateCmd:
 973              	.LFB51:
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group3 AutoBaudRate functions
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   AutoBaudRate functions 
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### AutoBaudRate functions #####
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the AutoBaudRate detections.
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Before Enabling AutoBaudRate detection using USART_AutoBaudRateCmd ()
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          The character patterns used to calculate baudrate must be chosen by calling 
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART_AutoBaudRateConfig() function. These function take as parameter :
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#)USART_AutoBaudRate_StartBit : any character starting with a bit 1.
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (#)USART_AutoBaudRate_FallingEdge : any character starting with a 10xx bit pattern. 
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                           
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] At any later time, another request for AutoBaudRate detection can be performed
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          using USART_RequestCmd() function.
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The AutoBaudRate detection is monitored by the status of ABRF flag which indicate
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          that the AutoBaudRate detection is completed. In addition to ABRF flag, the ABRE flag
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          indicate that this procedure is completed without success. USART_GetFlagStatus () 
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function should be used to monitor the status of these flags.  
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the Auto Baud Rate.
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.  
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USARTx auto baud rate.
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 974              		.loc 1 871 0
 975              		.cfi_startproc
 976 0000 00B5     		push	{lr}
 977              	.LCFI14:
 978              		.cfi_def_cfa_offset 4
 979              		.cfi_offset 14, -4
 980              	.LVL75:
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_ABREN;
 981              		.loc 1 880 0
 982 0002 4268     		ldr	r2, [r0, #4]
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 983              		.loc 1 876 0
 984 0004 0029     		cmp	r1, #0
 985 0006 03D0     		beq	.L86
 986              		.loc 1 880 0
 987 0008 8023     		mov	r3, #128
 988 000a 5B03     		lsl	r3, r3, #13
 989 000c 1343     		orr	r3, r2
 990 000e 01E0     		b	.L88
 991              	.L86:
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register */
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 992              		.loc 1 886 0
 993 0010 014B     		ldr	r3, .L89
 994 0012 1340     		and	r3, r2
 995              	.L88:
 996 0014 4360     		str	r3, [r0, #4]
 997              		@ sp needed for prologue
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 998              		.loc 1 888 0
 999 0016 00BD     		pop	{pc}
 1000              	.L90:
 1001              		.align	2
 1002              	.L89:
 1003 0018 FFFFEFFF 		.word	-1048577
 1004              		.cfi_endproc
 1005              	.LFE51:
 1007              		.section	.text.USART_AutoBaudRateConfig,"ax",%progbits
 1008              		.align	1
 1009              		.global	USART_AutoBaudRateConfig
 1010              		.code	16
 1011              		.thumb_func
 1013              	USART_AutoBaudRateConfig:
 1014              	.LFB52:
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART auto baud rate method.
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.  
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AutoBaudRate: specifies the selected USART auto baud rate method.
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_AutoBaudRate_StartBit: Start Bit duration measurement.
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_AutoBaudRate_FallingEdge: Falling edge to falling edge measurement.
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function has to be called before calling USART_Cmd() function.  
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AutoBaudRateConfig(USART_TypeDef* USARTx, uint32_t USART_AutoBaudRate)
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1015              		.loc 1 903 0
 1016              		.cfi_startproc
 1017              	.LVL76:
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 1018              		.loc 1 908 0
 1019 0000 4268     		ldr	r2, [r0, #4]
 1020 0002 034B     		ldr	r3, .L92
 1021              		@ sp needed for prologue
 1022 0004 1340     		and	r3, r2
 1023 0006 4360     		str	r3, [r0, #4]
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_AutoBaudRate;
 1024              		.loc 1 909 0
 1025 0008 4368     		ldr	r3, [r0, #4]
 1026 000a 1943     		orr	r1, r3
 1027              	.LVL77:
 1028 000c 4160     		str	r1, [r0, #4]
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1029              		.loc 1 910 0
 1030 000e 7047     		bx	lr
 1031              	.L93:
 1032              		.align	2
 1033              	.L92:
 1034 0010 FFFF9FFF 		.word	-6291457
 1035              		.cfi_endproc
 1036              	.LFE52:
 1038              		.section	.text.USART_SendData,"ax",%progbits
 1039              		.align	1
 1040              		.global	USART_SendData
 1041              		.code	16
 1042              		.thumb_func
 1044              	USART_SendData:
 1045              	.LFB53:
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group4 Data transfers functions
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Data transfers functions 
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                     ##### Data transfers functions #####
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage 
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART data transfers.
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] During an USART reception, data shifts in least significant bit first 
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          through the RX pin. When a transmission is taking place, a write instruction to 
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART_TDR register stores the data in the shift register.
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The read access of the USART_RDR register can be done using 
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the USART_ReceiveData() function and returns the RDR value.
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Whereas a write access to the USART_TDR can be done using USART_SendData()
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          function and stores the written data into TDR.
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  Data: the data to transmit.
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1046              		.loc 1 948 0
 1047              		.cfi_startproc
 1048              	.LVL78:
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Transmit Data */
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->TDR = (Data & (uint16_t)0x01FF);
 1049              		.loc 1 954 0
 1050 0000 CA05     		lsl	r2, r1, #23
 1051 0002 D10D     		lsr	r1, r2, #23
 1052              	.LVL79:
 1053 0004 0185     		strh	r1, [r0, #40]
 1054              		@ sp needed for prologue
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1055              		.loc 1 955 0
 1056 0006 7047     		bx	lr
 1057              		.cfi_endproc
 1058              	.LFE53:
 1060              		.section	.text.USART_ReceiveData,"ax",%progbits
 1061              		.align	1
 1062              		.global	USART_ReceiveData
 1063              		.code	16
 1064              		.thumb_func
 1066              	USART_ReceiveData:
 1067              	.LFB54:
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.   
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The received data.
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1068              		.loc 1 966 0
 1069              		.cfi_startproc
 1070              	.LVL80:
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Receive Data */
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 1071              		.loc 1 971 0
 1072 0000 818C     		ldrh	r1, [r0, #36]
 1073              		@ sp needed for prologue
 1074 0002 C805     		lsl	r0, r1, #23
 1075              	.LVL81:
 1076 0004 C00D     		lsr	r0, r0, #23
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1077              		.loc 1 972 0
 1078 0006 7047     		bx	lr
 1079              		.cfi_endproc
 1080              	.LFE54:
 1082              		.section	.text.USART_SetAddress,"ax",%progbits
 1083              		.align	1
 1084              		.global	USART_SetAddress
 1085              		.code	16
 1086              		.thumb_func
 1088              	USART_SetAddress:
 1089              	.LFB55:
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group5 MultiProcessor Communication functions
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              ##### Multi-Processor Communication functions #####
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          multiprocessor communication.
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] For instance one of the USARTs can be the master, its TX output is
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          connected to the RX input of the other USART. The others are slaves,
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          their respective TX outputs are logically ANDed together and connected 
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          to the RX input of the master. USART multiprocessor communication is 
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          possible through the following procedure:
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, 
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the USART address using the USART_SetAddress() function.
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the wake up methode (USART_WakeUp_IdleLine or 
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              USART_WakeUp_AddressMark) using USART_WakeUpConfig() function only 
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              for the slaves.
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() 
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART Slave exit from mute mode when receive the wake up condition.
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the address of the USART node.
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.   
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1090              		.loc 1 1018 0
 1091              		.cfi_startproc
 1092              	.LVL82:
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART address */
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 1093              		.loc 1 1023 0
 1094 0000 4268     		ldr	r2, [r0, #4]
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART address node */
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 1095              		.loc 1 1025 0
 1096 0002 0906     		lsl	r1, r1, #24
 1097              	.LVL83:
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 1098              		.loc 1 1023 0
 1099 0004 1302     		lsl	r3, r2, #8
 1100 0006 1A0A     		lsr	r2, r3, #8
 1101 0008 4260     		str	r2, [r0, #4]
 1102              		.loc 1 1025 0
 1103 000a 4368     		ldr	r3, [r0, #4]
 1104              		@ sp needed for prologue
 1105 000c 1943     		orr	r1, r3
 1106 000e 4160     		str	r1, [r0, #4]
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1107              		.loc 1 1026 0
 1108 0010 7047     		bx	lr
 1109              		.cfi_endproc
 1110              	.LFE55:
 1112              		.section	.text.USART_MuteModeCmd,"ax",%progbits
 1113              		.align	1
 1114              		.global	USART_MuteModeCmd
 1115              		.code	16
 1116              		.thumb_func
 1118              	USART_MuteModeCmd:
 1119              	.LFB56:
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's mute mode.
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1120              		.loc 1 1039 0
 1121              		.cfi_startproc
 1122 0000 00B5     		push	{lr}
 1123              	.LCFI15:
 1124              		.cfi_def_cfa_offset 4
 1125              		.cfi_offset 14, -4
 1126              	.LVL84:
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART mute mode by setting the MME bit in the CR1 register */
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 |= USART_CR1_MME;
 1127              		.loc 1 1047 0
 1128 0002 0268     		ldr	r2, [r0]
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1129              		.loc 1 1044 0
 1130 0004 0029     		cmp	r1, #0
 1131 0006 03D0     		beq	.L98
 1132              		.loc 1 1047 0
 1133 0008 8023     		mov	r3, #128
 1134 000a 9B01     		lsl	r3, r3, #6
 1135 000c 1343     		orr	r3, r2
 1136 000e 01E0     		b	.L100
 1137              	.L98:
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 1138              		.loc 1 1052 0
 1139 0010 014B     		ldr	r3, .L101
 1140 0012 1340     		and	r3, r2
 1141              	.L100:
 1142 0014 0360     		str	r3, [r0]
 1143              		@ sp needed for prologue
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1144              		.loc 1 1054 0
 1145 0016 00BD     		pop	{pc}
 1146              	.L102:
 1147              		.align	2
 1148              	.L101:
 1149 0018 FFDFFFFF 		.word	-8193
 1150              		.cfi_endproc
 1151              	.LFE56:
 1153              		.section	.text.USART_MuteModeWakeUpConfig,"ax",%progbits
 1154              		.align	1
 1155              		.global	USART_MuteModeWakeUpConfig
 1156              		.code	16
 1157              		.thumb_func
 1159              	USART_MuteModeWakeUpConfig:
 1160              	.LFB57:
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Selects the USART WakeUp method from mute mode.
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.   
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_MuteModeWakeUpConfig(USART_TypeDef* USARTx, uint32_t USART_WakeUp)
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1161              		.loc 1 1069 0
 1162              		.cfi_startproc
 1163              	.LVL85:
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 1164              		.loc 1 1074 0
 1165 0000 0268     		ldr	r2, [r0]
 1166 0002 034B     		ldr	r3, .L104
 1167              		@ sp needed for prologue
 1168 0004 1340     		and	r3, r2
 1169 0006 0360     		str	r3, [r0]
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 1170              		.loc 1 1075 0
 1171 0008 0368     		ldr	r3, [r0]
 1172 000a 1943     		orr	r1, r3
 1173              	.LVL86:
 1174 000c 0160     		str	r1, [r0]
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1175              		.loc 1 1076 0
 1176 000e 7047     		bx	lr
 1177              	.L105:
 1178              		.align	2
 1179              	.L104:
 1180 0010 FFF7FFFF 		.word	-2049
 1181              		.cfi_endproc
 1182              	.LFE57:
 1184              		.section	.text.USART_AddressDetectionConfig,"ax",%progbits
 1185              		.align	1
 1186              		.global	USART_AddressDetectionConfig
 1187              		.code	16
 1188              		.thumb_func
 1190              	USART_AddressDetectionConfig:
 1191              	.LFB58:
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configure the the USART Address detection length.
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AddressLength: specifies the USART address length detection.
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_AddressLength_4b: 4-bit address length detection 
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_AddressLength_7b: 7-bit address length detection 
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_AddressDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_AddressLength)
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1192              		.loc 1 1091 0
 1193              		.cfi_startproc
 1194              	.LVL87:
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 1195              		.loc 1 1096 0
 1196 0000 4368     		ldr	r3, [r0, #4]
 1197 0002 1022     		mov	r2, #16
 1198 0004 9343     		bic	r3, r2
 1199 0006 4360     		str	r3, [r0, #4]
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_AddressLength;
 1200              		.loc 1 1097 0
 1201 0008 4368     		ldr	r3, [r0, #4]
 1202              		@ sp needed for prologue
 1203 000a 1943     		orr	r1, r3
 1204              	.LVL88:
 1205 000c 4160     		str	r1, [r0, #4]
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1206              		.loc 1 1098 0
 1207 000e 7047     		bx	lr
 1208              		.cfi_endproc
 1209              	.LFE58:
 1211              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1212              		.align	1
 1213              		.global	USART_LINBreakDetectLengthConfig
 1214              		.code	16
 1215              		.thumb_func
 1217              	USART_LINBreakDetectLengthConfig:
 1218              	.LFB59:
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group6 LIN mode functions
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   LIN mode functions 
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                        ##### LIN mode functions #####
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART 
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          LIN Mode communication.
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In LIN mode, 8-bit data format with 1 stop bit is required in accordance 
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          with the LIN standard.
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Only this LIN Feature is supported by the USART IP:
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) LIN Master Synchronous Break send capability and LIN slave break 
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              detection capability :  13-bit break generation and 10/11 bit break 
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              detection.
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART LIN Master transmitter communication is possible through the 
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          following procedure:
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the LIN mode using the USART_LINCmd() function.
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Send the break character using USART_SendBreak() function.
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART LIN Master receiver communication is possible through the 
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          following procedure:
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Mode transmitter or Mode receiver and hardware flow control values 
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_Init() function.
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the break detection length 
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              using the USART_LINBreakDetectLengthConfig() function.
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the LIN mode using the USART_LINCmd() function.
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- In LIN mode, the following bits must be kept cleared:
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) CLKEN in the USART_CR2 register.
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint32_t USART_LINBreakDetectLength)
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1219              		.loc 1 1157 0
 1220              		.cfi_startproc
 1221              	.LVL89:
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 1222              		.loc 1 1162 0
 1223 0000 4368     		ldr	r3, [r0, #4]
 1224 0002 2022     		mov	r2, #32
 1225 0004 9343     		bic	r3, r2
 1226 0006 4360     		str	r3, [r0, #4]
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1227              		.loc 1 1163 0
 1228 0008 4368     		ldr	r3, [r0, #4]
 1229              		@ sp needed for prologue
 1230 000a 1943     		orr	r1, r3
 1231              	.LVL90:
 1232 000c 4160     		str	r1, [r0, #4]
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1233              		.loc 1 1164 0
 1234 000e 7047     		bx	lr
 1235              		.cfi_endproc
 1236              	.LFE59:
 1238              		.section	.text.USART_LINCmd,"ax",%progbits
 1239              		.align	1
 1240              		.global	USART_LINCmd
 1241              		.code	16
 1242              		.thumb_func
 1244              	USART_LINCmd:
 1245              	.LFB60:
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.  
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1246              		.loc 1 1177 0
 1247              		.cfi_startproc
 1248 0000 00B5     		push	{lr}
 1249              	.LCFI16:
 1250              		.cfi_def_cfa_offset 4
 1251              		.cfi_offset 14, -4
 1252              	.LVL91:
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1253              		.loc 1 1185 0
 1254 0002 4268     		ldr	r2, [r0, #4]
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1255              		.loc 1 1182 0
 1256 0004 0029     		cmp	r1, #0
 1257 0006 03D0     		beq	.L109
 1258              		.loc 1 1185 0
 1259 0008 8023     		mov	r3, #128
 1260 000a DB01     		lsl	r3, r3, #7
 1261 000c 1343     		orr	r3, r2
 1262 000e 01E0     		b	.L111
 1263              	.L109:
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 1264              		.loc 1 1190 0
 1265 0010 014B     		ldr	r3, .L112
 1266 0012 1340     		and	r3, r2
 1267              	.L111:
 1268 0014 4360     		str	r3, [r0, #4]
 1269              		@ sp needed for prologue
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1270              		.loc 1 1192 0
 1271 0016 00BD     		pop	{pc}
 1272              	.L113:
 1273              		.align	2
 1274              	.L112:
 1275 0018 FFBFFFFF 		.word	-16385
 1276              		.cfi_endproc
 1277              	.LFE60:
 1279              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1280              		.align	1
 1281              		.global	USART_HalfDuplexCmd
 1282              		.code	16
 1283              		.thumb_func
 1285              	USART_HalfDuplexCmd:
 1286              	.LFB61:
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group7 Halfduplex mode function
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Half-duplex mode function 
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                    ##### Half-duplex mode function #####
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Half-duplex communication.
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The USART can be configured to follow a single-wire half-duplex protocol 
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          where the TX and RX lines are internally connected.
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] USART Half duplex communication is possible through the following procedure:
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              or Mode receiver and hardware flow control values using the USART_Init()
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             function.
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the USART address using the USART_SetAddress() function.
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- The RX pin is no longer used.
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          -@- In Half-duplex mode the following bits must be kept cleared:
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) LINEN and CLKEN bits in the USART_CR2 register.
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) SCEN and IREN bits in the USART_CR3 register.
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.    
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the USART Communication.
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1287              		.loc 1 1236 0
 1288              		.cfi_startproc
 1289 0000 00B5     		push	{lr}
 1290              	.LCFI17:
 1291              		.cfi_def_cfa_offset 4
 1292              		.cfi_offset 14, -4
 1293              	.LVL92:
 1294 0002 0823     		mov	r3, #8
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1295              		.loc 1 1244 0
 1296 0004 8268     		ldr	r2, [r0, #8]
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1297              		.loc 1 1241 0
 1298 0006 0029     		cmp	r1, #0
 1299 0008 01D0     		beq	.L115
 1300              		.loc 1 1244 0
 1301 000a 1343     		orr	r3, r2
 1302 000c 01E0     		b	.L117
 1303              	.L115:
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 1304              		.loc 1 1249 0
 1305 000e 9A43     		bic	r2, r3
 1306 0010 131C     		mov	r3, r2
 1307              	.L117:
 1308 0012 8360     		str	r3, [r0, #8]
 1309              		@ sp needed for prologue
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1310              		.loc 1 1251 0
 1311 0014 00BD     		pop	{pc}
 1312              		.cfi_endproc
 1313              	.LFE61:
 1315              		.section	.text.USART_SetGuardTime,"ax",%progbits
 1316              		.align	1
 1317              		.global	USART_SetGuardTime
 1318              		.code	16
 1319              		.thumb_func
 1321              	USART_SetGuardTime:
 1322              	.LFB62:
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group8 Smartcard mode functions
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Smartcard mode functions 
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                      ##### Smartcard mode functions #####
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Smartcard communication.
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] The Smartcard interface is designed to support asynchronous protocol 
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          Smartcards as defined in the ISO 7816-3 standard. The USART can provide 
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          a clock to the smartcard through the SCLK output. In smartcard mode, 
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          SCLK is not associated to the communication but is simply derived from 
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the internal peripheral input clock through a 5-bit prescaler.
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] Smartcard communication is possible through the following procedure:
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Smartcard Prsecaler using the USART_SetPrescaler() 
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() 
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the USART clock using the USART_ClockInit() function as following:
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART Clock enabled.
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART CPOL Low.
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART CPHA on first edge.
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) USART Last Bit Clock Enabled.
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Smartcard interface using the USART_Init() function as 
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              following:
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Word Length = 9 Bits.
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) 1.5 Stop Bit.
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Even parity.
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) BaudRate = 12096 baud.
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Hardware flow control disabled (RTS and CTS signals).
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (++) Tx and Rx enabled
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Optionally you can enable the parity error interrupt using 
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_ITConfig() function.
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Smartcard interface using the USART_SmartCardCmd() function.
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] 
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] 
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (@) It is also possible to choose 0.5 stop bit for receiving but it is 
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              recommended to use 1.5 stop bits for both transmitting and receiving 
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              to avoid switching between the two configurations.
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (@) In smartcard mode, the following bits must be kept cleared:
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) LINEN bit in the USART_CR2 register.
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (+@) HDSEL and IREN bits in the USART_CR3 register.
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified USART guard time.
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices. 
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 1323              		.loc 1 1319 0
 1324              		.cfi_startproc
 1325              	.LVL93:
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART Guard time */
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1326              		.loc 1 1324 0
 1327 0000 038A     		ldrh	r3, [r0, #16]
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART guard time */
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1328              		.loc 1 1326 0
 1329 0002 0902     		lsl	r1, r1, #8
 1330              	.LVL94:
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1331              		.loc 1 1324 0
 1332 0004 DAB2     		uxtb	r2, r3
 1333 0006 0282     		strh	r2, [r0, #16]
 1334              		.loc 1 1326 0
 1335 0008 038A     		ldrh	r3, [r0, #16]
 1336              		@ sp needed for prologue
 1337 000a 1943     		orr	r1, r3
 1338 000c 0182     		strh	r1, [r0, #16]
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1339              		.loc 1 1327 0
 1340 000e 7047     		bx	lr
 1341              		.cfi_endproc
 1342              	.LFE62:
 1344              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1345              		.align	1
 1346              		.global	USART_SmartCardCmd
 1347              		.code	16
 1348              		.thumb_func
 1350              	USART_SmartCardCmd:
 1351              	.LFB63:
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices. 
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1352              		.loc 1 1340 0
 1353              		.cfi_startproc
 1354 0000 00B5     		push	{lr}
 1355              	.LCFI18:
 1356              		.cfi_def_cfa_offset 4
 1357              		.cfi_offset 14, -4
 1358              	.LVL95:
 1359 0002 2023     		mov	r3, #32
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1360              		.loc 1 1347 0
 1361 0004 8268     		ldr	r2, [r0, #8]
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1362              		.loc 1 1344 0
 1363 0006 0029     		cmp	r1, #0
 1364 0008 01D0     		beq	.L120
 1365              		.loc 1 1347 0
 1366 000a 1343     		orr	r3, r2
 1367 000c 01E0     		b	.L122
 1368              	.L120:
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 1369              		.loc 1 1352 0
 1370 000e 9A43     		bic	r2, r3
 1371 0010 131C     		mov	r3, r2
 1372              	.L122:
 1373 0012 8360     		str	r3, [r0, #8]
 1374              		@ sp needed for prologue
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1375              		.loc 1 1354 0
 1376 0014 00BD     		pop	{pc}
 1377              		.cfi_endproc
 1378              	.LFE63:
 1380              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1381              		.align	1
 1382              		.global	USART_SmartCardNACKCmd
 1383              		.code	16
 1384              		.thumb_func
 1386              	USART_SmartCardNACKCmd:
 1387              	.LFB64:
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables NACK transmission.
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1388              		.loc 1 1367 0
 1389              		.cfi_startproc
 1390 0000 00B5     		push	{lr}
 1391              	.LCFI19:
 1392              		.cfi_def_cfa_offset 4
 1393              		.cfi_offset 14, -4
 1394              	.LVL96:
 1395 0002 1023     		mov	r3, #16
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx)); 
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1396              		.loc 1 1374 0
 1397 0004 8268     		ldr	r2, [r0, #8]
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1398              		.loc 1 1371 0
 1399 0006 0029     		cmp	r1, #0
 1400 0008 01D0     		beq	.L124
 1401              		.loc 1 1374 0
 1402 000a 1343     		orr	r3, r2
 1403 000c 01E0     		b	.L126
 1404              	.L124:
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 1405              		.loc 1 1379 0
 1406 000e 9A43     		bic	r2, r3
 1407 0010 131C     		mov	r3, r2
 1408              	.L126:
 1409 0012 8360     		str	r3, [r0, #8]
 1410              		@ sp needed for prologue
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1411              		.loc 1 1381 0
 1412 0014 00BD     		pop	{pc}
 1413              		.cfi_endproc
 1414              	.LFE64:
 1416              		.section	.text.USART_SetAutoRetryCount,"ax",%progbits
 1417              		.align	1
 1418              		.global	USART_SetAutoRetryCount
 1419              		.code	16
 1420              		.thumb_func
 1422              	USART_SetAutoRetryCount:
 1423              	.LFB65:
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the Smart Card number of retries in transmit and receive.
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 3  to select the USART peripheral.
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_AutoCount: specifies the Smart Card auto retry count.
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetAutoRetryCount(USART_TypeDef* USARTx, uint8_t USART_AutoCount)
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 1424              		.loc 1 1393 0
 1425              		.cfi_startproc
 1426              	.LVL97:
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the USART auto retry count */
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 1427              		.loc 1 1398 0
 1428 0000 8268     		ldr	r2, [r0, #8]
 1429 0002 044B     		ldr	r3, .L128
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the USART auto retry count*/
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 1430              		.loc 1 1400 0
 1431 0004 4904     		lsl	r1, r1, #17
 1432              	.LVL98:
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 1433              		.loc 1 1398 0
 1434 0006 1340     		and	r3, r2
 1435 0008 8360     		str	r3, [r0, #8]
 1436              		.loc 1 1400 0
 1437 000a 8368     		ldr	r3, [r0, #8]
 1438              		@ sp needed for prologue
 1439 000c 1943     		orr	r1, r3
 1440 000e 8160     		str	r1, [r0, #8]
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1441              		.loc 1 1401 0
 1442 0010 7047     		bx	lr
 1443              	.L129:
 1444 0012 C046     		.align	2
 1445              	.L128:
 1446 0014 FFFFF1FF 		.word	-917505
 1447              		.cfi_endproc
 1448              	.LFE65:
 1450              		.section	.text.USART_SetBlockLength,"ax",%progbits
 1451              		.align	1
 1452              		.global	USART_SetBlockLength
 1453              		.code	16
 1454              		.thumb_func
 1456              	USART_SetBlockLength:
 1457              	.LFB66:
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the Smart Card Block length.
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 3  to select the USART peripheral.
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_BlockLength: specifies the Smart Card block length.
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetBlockLength(USART_TypeDef* USARTx, uint8_t USART_BlockLength)
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {    
 1458              		.loc 1 1413 0
 1459              		.cfi_startproc
 1460              	.LVL99:
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the Smart card block length */
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 1461              		.loc 1 1418 0
 1462 0000 4269     		ldr	r2, [r0, #20]
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the Smart Card block length */
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 1463              		.loc 1 1420 0
 1464 0002 0906     		lsl	r1, r1, #24
 1465              	.LVL100:
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 1466              		.loc 1 1418 0
 1467 0004 1302     		lsl	r3, r2, #8
 1468 0006 1A0A     		lsr	r2, r3, #8
 1469 0008 4261     		str	r2, [r0, #20]
 1470              		.loc 1 1420 0
 1471 000a 4369     		ldr	r3, [r0, #20]
 1472              		@ sp needed for prologue
 1473 000c 1943     		orr	r1, r3
 1474 000e 4161     		str	r1, [r0, #20]
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1475              		.loc 1 1421 0
 1476 0010 7047     		bx	lr
 1477              		.cfi_endproc
 1478              	.LFE66:
 1480              		.section	.text.USART_IrDAConfig,"ax",%progbits
 1481              		.align	1
 1482              		.global	USART_IrDAConfig
 1483              		.code	16
 1484              		.thumb_func
 1486              	USART_IrDAConfig:
 1487              	.LFB67:
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group9 IrDA mode functions
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   IrDA mode functions 
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### IrDA mode functions #####
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          IrDA communication.
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] IrDA is a half duplex communication protocol. If the Transmitter is busy, 
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          any data on the IrDA receive line will be ignored by the IrDA decoder 
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          and if the Receiver is busy, data on the TX from the USART to IrDA will 
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          not be encoded by IrDA. While receiving data, transmission should be 
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          avoided as the data to be transmitted could be corrupted.
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] IrDA communication is possible through the following procedure:
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, 
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Transmitter/Receiver modes and hardware flow control values using 
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_Init() function.
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the IrDA pulse width by configuring the prescaler using  
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_SetPrescaler() function.
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal 
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              mode using the USART_IrDAConfig() function.
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the IrDA using the USART_IrDACmd() function.
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.         
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..]
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) A pulse of width less than two and greater than one PSC period(s) may or 
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         may not be rejected.
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) The receiver set up time should be managed by software. The IrDA physical 
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         layer specification specifies a minimum of 10 ms delay between 
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         transmission and reception (IrDA is a half duplex protocol).
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     (@) In IrDA mode, the following bits must be kept cleared:
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices.
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint32_t USART_IrDAMode)
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1488              		.loc 1 1478 0
 1489              		.cfi_startproc
 1490              	.LVL101:
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 1491              		.loc 1 1483 0
 1492 0000 8368     		ldr	r3, [r0, #8]
 1493 0002 0422     		mov	r2, #4
 1494 0004 9343     		bic	r3, r2
 1495 0006 8360     		str	r3, [r0, #8]
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1496              		.loc 1 1484 0
 1497 0008 8368     		ldr	r3, [r0, #8]
 1498              		@ sp needed for prologue
 1499 000a 1943     		orr	r1, r3
 1500              	.LVL102:
 1501 000c 8160     		str	r1, [r0, #8]
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1502              		.loc 1 1485 0
 1503 000e 7047     		bx	lr
 1504              		.cfi_endproc
 1505              	.LFE67:
 1507              		.section	.text.USART_IrDACmd,"ax",%progbits
 1508              		.align	1
 1509              		.global	USART_IrDACmd
 1510              		.code	16
 1511              		.thumb_func
 1513              	USART_IrDACmd:
 1514              	.LFB68:
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   This function is not available for STM32F030 devices.  
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be 1or 2  to select the USART peripheral.
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is available only for STM32F072 and STM32F091 devices. 
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 is available only for STM32F091 devices. 
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1515              		.loc 1 1498 0
 1516              		.cfi_startproc
 1517 0000 00B5     		push	{lr}
 1518              	.LCFI20:
 1519              		.cfi_def_cfa_offset 4
 1520              		.cfi_offset 14, -4
 1521              	.LVL103:
 1522 0002 0223     		mov	r3, #2
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1523              		.loc 1 1506 0
 1524 0004 8268     		ldr	r2, [r0, #8]
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1525              		.loc 1 1503 0
 1526 0006 0029     		cmp	r1, #0
 1527 0008 01D0     		beq	.L133
 1528              		.loc 1 1506 0
 1529 000a 1343     		orr	r3, r2
 1530 000c 01E0     		b	.L135
 1531              	.L133:
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 1532              		.loc 1 1511 0
 1533 000e 9A43     		bic	r2, r3
 1534 0010 131C     		mov	r3, r2
 1535              	.L135:
 1536 0012 8360     		str	r3, [r0, #8]
 1537              		@ sp needed for prologue
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1538              		.loc 1 1513 0
 1539 0014 00BD     		pop	{pc}
 1540              		.cfi_endproc
 1541              	.LFE68:
 1543              		.section	.text.USART_DECmd,"ax",%progbits
 1544              		.align	1
 1545              		.global	USART_DECmd
 1546              		.code	16
 1547              		.thumb_func
 1549              	USART_DECmd:
 1550              	.LFB69:
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group10 RS485 mode function
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief  RS485 mode function 
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim  
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                         ##### RS485 mode functions #####
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to manage the USART
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          RS485 flow control.
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] RS485 flow control (Driver enable feature) handling is possible through
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          the following procedure:
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, 
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              Transmitter/Receiver modes and hardware flow control values using 
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              the USART_Init() function.
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the Driver Enable using the USART_DECmd() function.
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Driver Enable polarity using the USART_DEPolarityConfig()
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Configures the Driver Enable assertion time using USART_SetDEAssertionTime() 
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function and deassertion time using the USART_SetDEDeassertionTime()
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              function.    
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) Enable the USART using the USART_Cmd() function.
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       -@-  
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        (+@) The assertion and dessertion times are expressed in sample time units (1/8 or 
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             1/16 bit time, depending on the oversampling rate).
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DE functionality.
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the driver enable mode.
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1551              		.loc 1 1558 0
 1552              		.cfi_startproc
 1553 0000 00B5     		push	{lr}
 1554              	.LCFI21:
 1555              		.cfi_def_cfa_offset 4
 1556              		.cfi_offset 14, -4
 1557              	.LVL104:
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the DE functionality by setting the DEM bit in the CR3 register */
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_CR3_DEM;
 1558              		.loc 1 1565 0
 1559 0002 8268     		ldr	r2, [r0, #8]
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1560              		.loc 1 1562 0
 1561 0004 0029     		cmp	r1, #0
 1562 0006 03D0     		beq	.L137
 1563              		.loc 1 1565 0
 1564 0008 8023     		mov	r3, #128
 1565 000a DB01     		lsl	r3, r3, #7
 1566 000c 1343     		orr	r3, r2
 1567 000e 01E0     		b	.L139
 1568              	.L137:
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
1570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 1569              		.loc 1 1570 0
 1570 0010 014B     		ldr	r3, .L140
 1571 0012 1340     		and	r3, r2
 1572              	.L139:
 1573 0014 8360     		str	r3, [r0, #8]
 1574              		@ sp needed for prologue
1571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1575              		.loc 1 1572 0
 1576 0016 00BD     		pop	{pc}
 1577              	.L141:
 1578              		.align	2
 1579              	.L140:
 1580 0018 FFBFFFFF 		.word	-16385
 1581              		.cfi_endproc
 1582              	.LFE69:
 1584              		.section	.text.USART_DEPolarityConfig,"ax",%progbits
 1585              		.align	1
 1586              		.global	USART_DEPolarityConfig
 1587              		.code	16
 1588              		.thumb_func
 1590              	USART_DEPolarityConfig:
 1591              	.LFB70:
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Configures the USART's DE polarity
1576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DEPolarity: specifies the DE polarity.
1581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DEPolarity_Low
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DEPolarity_High
1584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DEPolarityConfig(USART_TypeDef* USARTx, uint32_t USART_DEPolarity)
1587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1592              		.loc 1 1587 0
 1593              		.cfi_startproc
 1594              	.LVL105:
1588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 1595              		.loc 1 1592 0
 1596 0000 8268     		ldr	r2, [r0, #8]
 1597 0002 034B     		ldr	r3, .L143
 1598              		@ sp needed for prologue
 1599 0004 1340     		and	r3, r2
 1600 0006 8360     		str	r3, [r0, #8]
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_DEPolarity;
 1601              		.loc 1 1593 0
 1602 0008 8368     		ldr	r3, [r0, #8]
 1603 000a 1943     		orr	r1, r3
 1604              	.LVL106:
 1605 000c 8160     		str	r1, [r0, #8]
1594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1606              		.loc 1 1594 0
 1607 000e 7047     		bx	lr
 1608              	.L144:
 1609              		.align	2
 1610              	.L143:
 1611 0010 FF7FFFFF 		.word	-32769
 1612              		.cfi_endproc
 1613              	.LFE70:
 1615              		.section	.text.USART_SetDEAssertionTime,"ax",%progbits
 1616              		.align	1
 1617              		.global	USART_SetDEAssertionTime
 1618              		.code	16
 1619              		.thumb_func
 1621              	USART_SetDEAssertionTime:
 1622              	.LFB71:
1595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified RS485 DE assertion time
1598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DEAssertionTime: specifies the time between the activation of
1603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         the DE signal and the beginning of the start bit
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetDEAssertionTime(USART_TypeDef* USARTx, uint32_t USART_DEAssertionTime)
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1623              		.loc 1 1607 0
 1624              		.cfi_startproc
 1625              	.LVL107:
1608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 
1611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DE assertion time */
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 1626              		.loc 1 1613 0
 1627 0000 0268     		ldr	r2, [r0]
 1628 0002 044B     		ldr	r3, .L146
1614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DE assertion time */
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 1629              		.loc 1 1615 0
 1630 0004 4905     		lsl	r1, r1, #21
 1631              	.LVL108:
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 1632              		.loc 1 1613 0
 1633 0006 1340     		and	r3, r2
 1634 0008 0360     		str	r3, [r0]
 1635              		.loc 1 1615 0
 1636 000a 0368     		ldr	r3, [r0]
 1637              		@ sp needed for prologue
 1638 000c 1943     		orr	r1, r3
 1639 000e 0160     		str	r1, [r0]
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1640              		.loc 1 1616 0
 1641 0010 7047     		bx	lr
 1642              	.L147:
 1643 0012 C046     		.align	2
 1644              	.L146:
 1645 0014 FFFF1FFC 		.word	-65011713
 1646              		.cfi_endproc
 1647              	.LFE71:
 1649              		.section	.text.USART_SetDEDeassertionTime,"ax",%progbits
 1650              		.align	1
 1651              		.global	USART_SetDEDeassertionTime
 1652              		.code	16
 1653              		.thumb_func
 1655              	USART_SetDEDeassertionTime:
 1656              	.LFB72:
1617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Sets the specified RS485 DE deassertion time
1620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DeassertionTime: specifies the time between the middle of the last 
1625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *         stop bit in a transmitted message and the de-activation of the DE signal
1626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_SetDEDeassertionTime(USART_TypeDef* USARTx, uint32_t USART_DEDeassertionTime)
1629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1657              		.loc 1 1629 0
 1658              		.cfi_startproc
 1659              	.LVL109:
1630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 
1633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DE deassertion time */
1635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 1660              		.loc 1 1635 0
 1661 0000 0268     		ldr	r2, [r0]
 1662 0002 044B     		ldr	r3, .L149
1636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DE deassertion time */
1637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 1663              		.loc 1 1637 0
 1664 0004 0904     		lsl	r1, r1, #16
 1665              	.LVL110:
1635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 1666              		.loc 1 1635 0
 1667 0006 1340     		and	r3, r2
 1668 0008 0360     		str	r3, [r0]
 1669              		.loc 1 1637 0
 1670 000a 0368     		ldr	r3, [r0]
 1671              		@ sp needed for prologue
 1672 000c 1943     		orr	r1, r3
 1673 000e 0160     		str	r1, [r0]
1638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1674              		.loc 1 1638 0
 1675 0010 7047     		bx	lr
 1676              	.L150:
 1677 0012 C046     		.align	2
 1678              	.L149:
 1679 0014 FFFFE0FF 		.word	-2031617
 1680              		.cfi_endproc
 1681              	.LFE72:
 1683              		.section	.text.USART_DMACmd,"ax",%progbits
 1684              		.align	1
 1685              		.global	USART_DMACmd
 1686              		.code	16
 1687              		.thumb_func
 1689              	USART_DMACmd:
 1690              	.LFB73:
1639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group11 DMA transfers management functions
1645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   DMA transfers management functions
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                ##### DMA transfers management functions #####
1650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This section provides two functions that can be used only in DMA mode.
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In DMA Mode, the USART communication can be managed by 2 DMA Channel 
1653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          requests:
1654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request.
1655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request.
1656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following function:
1657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, 
1658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              FunctionalState NewState).
1659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
1671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
1675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
1678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1691              		.loc 1 1678 0
 1692              		.cfi_startproc
 1693 0000 00B5     		push	{lr}
 1694              	.LCFI22:
 1695              		.cfi_def_cfa_offset 4
 1696              		.cfi_offset 14, -4
 1697              	.LVL111:
1679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        DMAR bits in the USART CR3 register */
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1698              		.loc 1 1688 0
 1699 0002 8368     		ldr	r3, [r0, #8]
1684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1700              		.loc 1 1684 0
 1701 0004 002A     		cmp	r2, #0
 1702 0006 02D0     		beq	.L152
 1703              		.loc 1 1688 0
 1704 0008 1943     		orr	r1, r3
 1705              	.LVL112:
 1706 000a 8160     		str	r1, [r0, #8]
 1707 000c 01E0     		b	.L151
 1708              	.LVL113:
 1709              	.L152:
1689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        DMAR bits in the USART CR3 register */
1694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 1710              		.loc 1 1694 0
 1711 000e 8B43     		bic	r3, r1
 1712 0010 8360     		str	r3, [r0, #8]
 1713              	.LVL114:
 1714              	.L151:
 1715              		@ sp needed for prologue
1695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1716              		.loc 1 1696 0
 1717 0012 00BD     		pop	{pc}
 1718              		.cfi_endproc
 1719              	.LFE73:
 1721              		.section	.text.USART_DMAReceptionErrorConfig,"ax",%progbits
 1722              		.align	1
 1723              		.global	USART_DMAReceptionErrorConfig
 1724              		.code	16
 1725              		.thumb_func
 1727              	USART_DMAReceptionErrorConfig:
 1728              	.LFB74:
1697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface when reception error occurs.
1700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_DMAOnError: specifies the DMA status in case of reception error.
1705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
1706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DMAOnError_Enable: DMA receive request enabled when the USART DMA  
1707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                                          reception error is asserted.
1708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_DMAOnError_Disable: DMA receive request disabled when the USART DMA 
1709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                                           reception error is asserted.
1710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_DMAReceptionErrorConfig(USART_TypeDef* USARTx, uint32_t USART_DMAOnError)
1713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1729              		.loc 1 1713 0
 1730              		.cfi_startproc
 1731              	.LVL115:
1714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
1717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the DMA Reception error detection bit */
1719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 1732              		.loc 1 1719 0
 1733 0000 8268     		ldr	r2, [r0, #8]
 1734 0002 034B     		ldr	r3, .L155
 1735              		@ sp needed for prologue
 1736 0004 1340     		and	r3, r2
 1737 0006 8360     		str	r3, [r0, #8]
1720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the DMA Reception error detection bit */
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_DMAOnError;
 1738              		.loc 1 1721 0
 1739 0008 8368     		ldr	r3, [r0, #8]
 1740 000a 1943     		orr	r1, r3
 1741              	.LVL116:
 1742 000c 8160     		str	r1, [r0, #8]
1722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1743              		.loc 1 1722 0
 1744 000e 7047     		bx	lr
 1745              	.L156:
 1746              		.align	2
 1747              	.L155:
 1748 0010 FFDFFFFF 		.word	-8193
 1749              		.cfi_endproc
 1750              	.LFE74:
 1752              		.section	.text.USART_ITConfig,"ax",%progbits
 1753              		.align	1
 1754              		.global	USART_ITConfig
 1755              		.code	16
 1756              		.thumb_func
 1758              	USART_ITConfig:
 1759              	.LFB75:
1723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @}
1726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /** @defgroup USART_Group12 Interrupts and flags management functions
1729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *
1731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @verbatim   
1732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****             ##### Interrupts and flags management functions #####
1734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ===============================================================================
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] This subsection provides a set of functions allowing to configure the 
1736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          USART Interrupts sources, Requests and check or clear the flags or pending bits status. 
1737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          The user should identify which mode will be used in his application to 
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          manage the communication: Polling mode, Interrupt mode.
1739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *** Polling Mode ***
1741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ====================
1742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In Polling Mode, the SPI communication can be managed by these flags:
1743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_REACK: to indicate the status of the Receive Enable 
1744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              acknowledge flag
1745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TEACK: to indicate the status of the Transmit Enable 
1746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              acknowledge flag.
1747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_WU: to indicate the status of the Wake up flag.
1748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RWU: to indicate the status of the Receive Wake up flag.
1749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_SBK: to indicate the status of the Send Break flag.
1750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_CM: to indicate the status of the Character match flag.
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_BUSY: to indicate the status of the Busy flag.
1752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ABRF: to indicate the status of the Auto baud rate flag.
1753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ABRE: to indicate the status of the Auto baud rate error flag.
1754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_EOB: to indicate the status of the End of block flag.
1755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RTO: to indicate the status of the Receive time out flag.
1756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_nCTSS: to indicate the status of the Inverted nCTS input 
1757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              bit status.
1758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TXE: to indicate the status of the transmit buffer register.
1759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_RXNE: to indicate the status of the receive buffer register.
1760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_TC: to indicate the status of the transmit operation.
1761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_IDLE: to indicate the status of the Idle Line.
1762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_CTS: to indicate the status of the nCTS input.
1763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_LBD: to indicate the status of the LIN break detection.
1764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_NE: to indicate if a noise error occur.
1765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_FE: to indicate if a frame error occur.
1766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_PE: to indicate if a parity error occur.
1767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (#) USART_FLAG_ORE: to indicate if an Overrun error occur.
1768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following functions:
1769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG).
1770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG).
1771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  *** Interrupt Mode ***
1773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****  ======================
1774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In Interrupt Mode, the USART communication can be managed by 8 interrupt 
1775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          sources and 10 pending bits:
1776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) Pending Bits:
1777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_WU: to indicate the status of the Wake up interrupt.
1778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CM: to indicate the status of Character match interrupt.
1779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_EOB: to indicate the status of End of block interrupt.
1780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RTO: to indicate the status of Receive time out interrupt.
1781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CTS: to indicate the status of CTS change interrupt.
1782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_LBD: to indicate the status of LIN Break detection interrupt.
1783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TC: to indicate the status of Transmission complete interrupt.
1784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_IDLE: to indicate the status of IDLE line detected interrupt.
1785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_ORE: to indicate the status of OverRun Error interrupt.
1786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_NE: to indicate the status of Noise Error interrupt.
1787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_FE: to indicate the status of Framing Error interrupt.
1788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_PE: to indicate the status of Parity Error interrupt.  
1789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) Interrupt Source:
1791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_WU: specifies the interrupt source for Wake up interrupt.
1792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CM: specifies the interrupt source for Character match 
1793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_EOB: specifies the interrupt source for End of block
1795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RTO: specifies the interrupt source for Receive time-out
1797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   interrupt.
1798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_CTS: specifies the interrupt source for CTS change interrupt.
1799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_LBD: specifies the interrupt source for LIN Break 
1800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   detection interrupt.
1801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TXE: specifies the interrupt source for Tansmit Data 
1802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   Register empty interrupt.
1803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_TC: specifies the interrupt source for Transmission 
1804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   complete interrupt.
1805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_RXNE: specifies the interrupt source for Receive Data 
1806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   register not empty interrupt.
1807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_IDLE: specifies the interrupt source for Idle line 
1808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   detection interrupt.
1809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_PE: specifies the interrupt source for Parity Error interrupt.
1810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              (##) USART_IT_ERR: specifies the interrupt source for Error interrupt
1811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                   (Frame error, noise error, overrun error)
1812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****              -@@- Some parameters are coded in order to use them as interrupt 
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****                  source or as pending bits.
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     [..] In this Mode it is advised to use the following functions:
1815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState
1816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT).
1817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****          (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT).
1818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** @endverbatim
1820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @{
1821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_WU:  Wake up interrupt, not available for  STM32F030 devices.
1832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CM:  Character match interrupt.
1833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_EOB:  End of block interrupt, not available for  STM32F030 devices.
1834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_RTO:  Receive time out interrupt.
1835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt.
1836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt, not available for  STM32F030 devi
1837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_TXE:  Tansmit Data Register empty interrupt.
1838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_TC:  Transmission complete interrupt.
1839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_RXNE:  Receive Data register not empty interrupt.
1840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_IDLE:  Idle line detection interrupt.
1841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_PE:  Parity Error interrupt.
1842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
1848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1760              		.loc 1 1848 0
 1761              		.cfi_startproc
 1762 0000 10B5     		push	{r4, lr}
 1763              	.LCFI23:
 1764              		.cfi_def_cfa_offset 8
 1765              		.cfi_offset 4, -8
 1766              		.cfi_offset 14, -4
 1767              	.LVL117:
1849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t usartreg = 0, itpos = 0, itmask = 0;
1850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t usartxbase = 0;
1851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartxbase = (uint32_t)USARTx;
1857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the USART register index */
1859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 1768              		.loc 1 1859 0
 1769 0002 8BB2     		uxth	r3, r1
1860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the interrupt position */
1862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itpos = USART_IT & IT_MASK;
1863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1770              		.loc 1 1863 0
 1771 0004 0124     		mov	r4, #1
1862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1772              		.loc 1 1862 0
 1773 0006 C9B2     		uxtb	r1, r1
 1774              	.LVL118:
 1775              		.loc 1 1863 0
 1776 0008 8C40     		lsl	r4, r4, r1
1859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 1777              		.loc 1 1859 0
 1778 000a 1B0A     		lsr	r3, r3, #8
 1779              	.LVL119:
 1780              		.loc 1 1863 0
 1781 000c 211C     		mov	r1, r4
 1782              	.LVL120:
1864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (usartreg == 0x02) /* The IT is in CR2 register */
 1783              		.loc 1 1865 0
 1784 000e 022B     		cmp	r3, #2
 1785 0010 01D1     		bne	.L158
 1786              	.LVL121:
1866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     usartxbase += 0x04;
 1787              		.loc 1 1867 0
 1788 0012 0430     		add	r0, r0, #4
 1789              	.LVL122:
 1790 0014 02E0     		b	.L159
 1791              	.LVL123:
 1792              	.L158:
1868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (usartreg == 0x03) /* The IT is in CR3 register */
 1793              		.loc 1 1869 0
 1794 0016 032B     		cmp	r3, #3
 1795 0018 00D1     		bne	.L159
1870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     usartxbase += 0x08;
 1796              		.loc 1 1871 0
 1797 001a 0830     		add	r0, r0, #8
 1798              	.LVL124:
 1799              	.L159:
1872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* The IT is in CR1 register */
1874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1800              		.loc 1 1878 0
 1801 001c 0368     		ldr	r3, [r0]
 1802              	.LVL125:
1876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1803              		.loc 1 1876 0
 1804 001e 002A     		cmp	r2, #0
 1805 0020 02D0     		beq	.L160
 1806              		.loc 1 1878 0
 1807 0022 1943     		orr	r1, r3
 1808 0024 0160     		str	r1, [r0]
 1809 0026 01E0     		b	.L157
 1810              	.L160:
1879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1811              		.loc 1 1882 0
 1812 0028 8B43     		bic	r3, r1
 1813 002a 0360     		str	r3, [r0]
 1814              	.L157:
 1815              		@ sp needed for prologue
 1816              	.LVL126:
1883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1817              		.loc 1 1884 0
 1818 002c 10BD     		pop	{r4, pc}
 1819              		.cfi_endproc
 1820              	.LFE75:
 1822              		.section	.text.USART_RequestCmd,"ax",%progbits
 1823              		.align	1
 1824              		.global	USART_RequestCmd
 1825              		.code	16
 1826              		.thumb_func
 1828              	USART_RequestCmd:
 1829              	.LFB76:
1885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables the specified USART's Request.
1888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_Request: specifies the USART request.
1893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
1894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Request_TXFRQ: Transmit data flush ReQuest
1895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Request_RXFRQ: Receive data flush ReQuest
1896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Request_MMRQ: Mute Mode ReQuest
1897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Request_SBKRQ: Send Break ReQuest
1898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_Request_ABRRQ: Auto Baud Rate ReQuest
1899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  NewState: new state of the DMA interface when reception error occurs.
1900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
1901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
1904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1830              		.loc 1 1904 0
 1831              		.cfi_startproc
 1832 0000 00B5     		push	{lr}
 1833              	.LCFI24:
 1834              		.cfi_def_cfa_offset 4
 1835              		.cfi_offset 14, -4
 1836              	.LVL127:
1905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_REQUEST(USART_Request));
1908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
1911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
1913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register.*/
1914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****       USARTx->RQR |= USART_Request;
 1837              		.loc 1 1914 0
 1838 0002 038B     		ldrh	r3, [r0, #24]
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (NewState != DISABLE)
 1839              		.loc 1 1910 0
 1840 0004 002A     		cmp	r2, #0
 1841 0006 02D0     		beq	.L163
 1842              		.loc 1 1914 0
 1843 0008 1943     		orr	r1, r3
 1844              	.LVL128:
 1845 000a 0183     		strh	r1, [r0, #24]
 1846 000c 01E0     		b	.L162
 1847              	.LVL129:
 1848              	.L163:
1915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
1919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****        register.*/
1920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     USARTx->RQR &= (uint32_t)~USART_Request;
 1849              		.loc 1 1920 0
 1850 000e 8B43     		bic	r3, r1
 1851 0010 0383     		strh	r3, [r0, #24]
 1852              	.LVL130:
 1853              	.L162:
 1854              		@ sp needed for prologue
1921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1855              		.loc 1 1922 0
 1856 0012 00BD     		pop	{pc}
 1857              		.cfi_endproc
 1858              	.LFE76:
 1860              		.section	.text.USART_OverrunDetectionConfig,"ax",%progbits
 1861              		.align	1
 1862              		.global	USART_OverrunDetectionConfig
 1863              		.code	16
 1864              		.thumb_func
 1866              	USART_OverrunDetectionConfig:
 1867              	.LFB77:
1923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Enables or disables the USART's Overrun detection.
1926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_OVRDetection: specifies the OVR detection status in case of OVR error.
1931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
1932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_OVRDetection_Enable: OVR error detection enabled when
1933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                                            the USART OVR error is asserted.
1934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_OVRDetection_Disable: OVR error detection disabled when
1935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *                                             the USART OVR error is asserted.
1936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
1937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_OverrunDetectionConfig(USART_TypeDef* USARTx, uint32_t USART_OVRDetection)
1939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1868              		.loc 1 1939 0
 1869              		.cfi_startproc
 1870              	.LVL131:
1940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Clear the OVR detection bit */
1945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 1871              		.loc 1 1945 0
 1872 0000 8268     		ldr	r2, [r0, #8]
 1873 0002 034B     		ldr	r3, .L166
 1874              		@ sp needed for prologue
 1875 0004 1340     		and	r3, r2
 1876 0006 8360     		str	r3, [r0, #8]
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Set the new value for the OVR detection bit */
1947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->CR3 |= USART_OVRDetection;
 1877              		.loc 1 1947 0
 1878 0008 8368     		ldr	r3, [r0, #8]
 1879 000a 1943     		orr	r1, r3
 1880              	.LVL132:
 1881 000c 8160     		str	r1, [r0, #8]
1948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1882              		.loc 1 1948 0
 1883 000e 7047     		bx	lr
 1884              	.L167:
 1885              		.align	2
 1886              	.L166:
 1887 0010 FFEFFFFF 		.word	-4097
 1888              		.cfi_endproc
 1889              	.LFE77:
 1891              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1892              		.align	1
 1893              		.global	USART_GetFlagStatus
 1894              		.code	16
 1895              		.thumb_func
 1897              	USART_GetFlagStatus:
 1898              	.LFB78:
1949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
1950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
1951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
1953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
1954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
1955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
1956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
1958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_REACK:  Receive Enable acknowledge flag.
1959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_TEACK:  Transmit Enable acknowledge flag.
1960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_WU:  Wake up flag, not available for  STM32F030 devices.
1961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_RWU:  Receive Wake up flag, not available for  STM32F030 devices.
1962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_SBK:  Send Break flag.
1963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_CM:  Character match flag.
1964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_BUSY:  Busy flag.
1965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_ABRF:  Auto baud rate flag.
1966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_ABRE:  Auto baud rate error flag.
1967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_EOB:  End of block flag, not available for  STM32F030 devices.
1968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_RTO:  Receive time out flag.
1969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_nCTSS:  Inverted nCTS input bit status.
1970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag.
1971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag, not available for  STM32F030 devices
1972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag.
1973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_TC:  Transmission Complete flag.
1974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_RXNE:  Receive data register not empty flag.
1975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_IDLE:  Idle Line detection flag.
1976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag.
1977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_NE:  Noise Error flag.
1978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_FE:  Framing Error flag.
1979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_PE:  Parity Error flag.
1980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
1982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
1983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1899              		.loc 1 1983 0
 1900              		.cfi_startproc
 1901              	.LVL133:
1984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   FlagStatus bitstatus = RESET;
1985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
1986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
1989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 1902              		.loc 1 1989 0
 1903 0000 C069     		ldr	r0, [r0, #28]
 1904              	.LVL134:
 1905              		@ sp needed for prologue
 1906 0002 0840     		and	r0, r1
 1907              	.LVL135:
1990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = SET;
1992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
1994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
1995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = RESET;
1996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
1997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return bitstatus;
 1908              		.loc 1 1997 0
 1909 0004 431E     		sub	r3, r0, #1
 1910 0006 9841     		sbc	r0, r0, r3
1998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1911              		.loc 1 1998 0
 1912 0008 7047     		bx	lr
 1913              		.cfi_endproc
 1914              	.LFE78:
 1916              		.section	.text.USART_ClearFlag,"ax",%progbits
 1917              		.align	1
 1918              		.global	USART_ClearFlag
 1919              		.code	16
 1920              		.thumb_func
 1922              	USART_ClearFlag:
 1923              	.LFB79:
1999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
2000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
2001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
2002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
2003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
2004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
2005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
2006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
2007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be any combination of the following values:
2008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_WU:  Wake up flag, not available for  STM32F030 devices.
2009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_CM:  Character match flag.
2010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_EOB:  End of block flag, not available for  STM32F030 devices.
2011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_RTO:  Receive time out flag.
2012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag.
2013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag, not available for  STM32F030 devices
2014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_TC:  Transmission Complete flag.
2015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_IDLE:  IDLE line detected flag.
2016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag.
2017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_NE: Noise Error flag.
2018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_FE: Framing Error flag.
2019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Errorflag.
2020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *   
2021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     RXNE pending bit is cleared by a read to the USART_RDR register 
2022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_ReceiveData()) or by writing 1 to the RXFRQ in the register
2023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
2024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TC flag can be also cleared by software sequence: a read operation
2025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           to USART_SR register (USART_GetFlagStatus()) followed by a write 
2026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           operation to USART_TDR register (USART_SendData()).
2027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TXE flag is cleared by a write to the USART_TDR register (USART_SendData())
2028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           or by writing 1 to the TXFRQ in the register USART_RQR (USART_RequestCmd()).
2029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     SBKF flag is cleared by 1 to the SBKRQ in the register USART_RQR
2030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_RequestCmd()).
2031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
2032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
2033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint32_t USART_FLAG)
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1924              		.loc 1 2034 0
 1925              		.cfi_startproc
 1926              	.LVL136:
2035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
2036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
2037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
2038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****      
2039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->ICR = USART_FLAG;
 1927              		.loc 1 2039 0
 1928 0000 0162     		str	r1, [r0, #32]
 1929              		@ sp needed for prologue
2040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 1930              		.loc 1 2040 0
 1931 0002 7047     		bx	lr
 1932              		.cfi_endproc
 1933              	.LFE79:
 1935              		.section	.text.USART_GetITStatus,"ax",%progbits
 1936              		.align	1
 1937              		.global	USART_GetITStatus
 1938              		.code	16
 1939              		.thumb_func
 1941              	USART_GetITStatus:
 1942              	.LFB80:
2041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
2042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
2043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
2044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
2045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
2046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
2047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
2048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
2049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
2050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_WU:  Wake up interrupt, not available for  STM32F030 devices.
2051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CM:  Character match interrupt.
2052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_EOB:  End of block interrupt, not available for  STM32F030 devices.
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_RTO:  Receive time out interrupt.
2054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt.
2055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt, not available for  STM32F030 devi
2056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_TXE:  Tansmit Data Register empty interrupt.
2057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_TC:  Transmission complete interrupt.
2058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_RXNE:  Receive Data register not empty interrupt.
2059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_IDLE:  Idle line detection interrupt.
2060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt.
2061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_NE:  Noise Error interrupt.
2062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_FE:  Framing Error interrupt.
2063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_PE:  Parity Error interrupt.
2064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
2065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
2066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
2067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 1943              		.loc 1 2067 0
 1944              		.cfi_startproc
 1945 0000 10B5     		push	{r4, lr}
 1946              	.LCFI25:
 1947              		.cfi_def_cfa_offset 8
 1948              		.cfi_offset 4, -8
 1949              		.cfi_offset 14, -4
 1950              	.LVL137:
2068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t bitpos = 0, itmask = 0, usartreg = 0;
2069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   ITStatus bitstatus = RESET;
2070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
2071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
2072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
2073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
2074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the USART register index */
2075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
2076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Get the interrupt position */
2077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = USART_IT & IT_MASK;
 1951              		.loc 1 2077 0
 1952 0002 CBB2     		uxtb	r3, r1
2078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1953              		.loc 1 2078 0
 1954 0004 0124     		mov	r4, #1
2075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 1955              		.loc 1 2075 0
 1956 0006 8AB2     		uxth	r2, r1
 1957              		.loc 1 2078 0
 1958 0008 9C40     		lsl	r4, r4, r3
2075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   usartreg = (((uint16_t)USART_IT) >> 0x08);
 1959              		.loc 1 2075 0
 1960 000a 120A     		lsr	r2, r2, #8
 1961              	.LVL138:
 1962              		.loc 1 2078 0
 1963 000c 231C     		mov	r3, r4
 1964              	.LVL139:
2079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
2080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1965              		.loc 1 2080 0
 1966 000e 012A     		cmp	r2, #1
 1967 0010 01D1     		bne	.L171
2081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
2082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR1;
 1968              		.loc 1 2082 0
 1969 0012 0268     		ldr	r2, [r0]
 1970              	.LVL140:
 1971 0014 04E0     		b	.L174
 1972              	.LVL141:
 1973              	.L171:
2083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
2084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1974              		.loc 1 2084 0
 1975 0016 022A     		cmp	r2, #2
 1976 0018 01D1     		bne	.L173
2085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
2086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR2;
 1977              		.loc 1 2086 0
 1978 001a 4268     		ldr	r2, [r0, #4]
 1979              	.LVL142:
 1980 001c 00E0     		b	.L174
 1981              	.LVL143:
 1982              	.L173:
2087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
2088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else /* The IT  is in CR3 register */
2089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
2090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     itmask &= USARTx->CR3;
 1983              		.loc 1 2090 0
 1984 001e 8268     		ldr	r2, [r0, #8]
 1985              	.LVL144:
 1986              	.L174:
 1987 0020 1340     		and	r3, r2
 1988              	.LVL145:
2091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
2092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
2093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = USART_IT >> 0x10;
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
2095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos &= USARTx->ISR;
 1989              		.loc 1 2095 0
 1990 0022 C069     		ldr	r0, [r0, #28]
 1991              	.LVL146:
2093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = USART_IT >> 0x10;
 1992              		.loc 1 2093 0
 1993 0024 0A0C     		lsr	r2, r1, #16
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1994              		.loc 1 2094 0
 1995 0026 0124     		mov	r4, #1
 1996 0028 9440     		lsl	r4, r4, r2
 1997              	.LVL147:
 1998              		.loc 1 2095 0
 1999 002a 2040     		and	r0, r4
 2000              	.LVL148:
2096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 2001              		.loc 1 2096 0
 2002 002c 5A1E     		sub	r2, r3, #1
 2003 002e 9341     		sbc	r3, r3, r2
 2004              	.LVL149:
 2005 0030 411E     		sub	r1, r0, #1
 2006 0032 8841     		sbc	r0, r0, r1
 2007              	.LVL150:
2097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
2098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = SET;
2099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
2100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   else
2101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   {
2102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****     bitstatus = RESET;
2103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   }
2104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
2105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   return bitstatus;  
 2008              		.loc 1 2105 0
 2009 0034 1840     		and	r0, r3
 2010              		@ sp needed for prologue
2106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2011              		.loc 1 2106 0
 2012 0036 10BD     		pop	{r4, pc}
 2013              		.cfi_endproc
 2014              	.LFE80:
 2016              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 2017              		.align	1
 2018              		.global	USART_ClearITPendingBit
 2019              		.code	16
 2020              		.thumb_func
 2022              	USART_ClearITPendingBit:
 2023              	.LFB81:
2107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** 
2108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** /**
2109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
2110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USARTx: where x can be from 1 to 8 to select the USART peripheral.
2111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART3 and USART4 are available only for STM32F072 and STM32F091 devices.
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART5, USART6, USART7 and USART8 are available only for STM32F091 devices. 
2113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note   USART2 is not available for STM32F031 devices.  
2114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
2115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *          This parameter can be one of the following values:
2116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_WU:  Wake up interrupt, not available for  STM32F030 devices.
2117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CM:  Character match interrupt.
2118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_EOB:  End of block interrupt, not available for  STM32F030 devices.
2119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_RTO:  Receive time out interrupt.
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt.
2121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt, not available for  STM32F030 devi
2122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_TC:  Transmission complete interrupt.
2123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_IDLE:  IDLE line detected interrupt.
2124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt.
2125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_NE:  Noise Error interrupt.
2126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_FE:  Framing Error interrupt.
2127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *            @arg USART_IT_PE:  Parity Error interrupt.
2128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *
2129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     RXNE pending bit is cleared by a read to the USART_RDR register 
2130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_ReceiveData()) or by writing 1 to the RXFRQ in the register 
2131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
2132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TC pending bit can be also cleared by software sequence: a read 
2133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           operation to USART_SR register (USART_GetITStatus()) followed by  
2134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           a write operation to USART_TDR register (USART_SendData()).
2135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @note     TXE pending bit is cleared by a write to the USART_TDR register 
2136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           (USART_SendData()) or by writing 1 to the TXFRQ in the register 
2137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   *           USART_RQR (USART_RequestCmd()).
2138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   * @retval None
2139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   */
2140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint32_t USART_IT)
2141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** {
 2024              		.loc 1 2141 0
 2025              		.cfi_startproc
 2026              	.LVL151:
2142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   uint32_t bitpos = 0, itmask = 0;
2143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   /* Check the parameters */
2144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
2145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
2146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   
2147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   bitpos = USART_IT >> 0x10;
 2027              		.loc 1 2147 0
 2028 0000 0A0C     		lsr	r2, r1, #16
2148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 2029              		.loc 1 2148 0
 2030 0002 0123     		mov	r3, #1
 2031 0004 9340     		lsl	r3, r3, r2
 2032              	.LVL152:
2149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c ****   USARTx->ICR = (uint32_t)itmask;
 2033              		.loc 1 2149 0
 2034 0006 0362     		str	r3, [r0, #32]
 2035              		@ sp needed for prologue
2150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_usart.c **** }
 2036              		.loc 1 2150 0
 2037 0008 7047     		bx	lr
 2038              		.cfi_endproc
 2039              	.LFE81:
 2041              		.text
 2042              	.Letext0:
 2043              		.file 2 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 2044              		.file 3 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/stm32f
 2045              		.file 4 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\ST
 2046              		.file 5 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\ST
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_usart.c
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:18     .text.USART_DeInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:23     .text.USART_DeInit:00000000 USART_DeInit
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:166    .text.USART_DeInit:000000b4 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:180    .text.USART_Init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:185    .text.USART_Init:00000000 USART_Init
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:367    .text.USART_Init:000000a4 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:378    .text.USART_StructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:383    .text.USART_StructInit:00000000 USART_StructInit
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:414    .text.USART_ClockInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:419    .text.USART_ClockInit:00000000 USART_ClockInit
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:457    .text.USART_ClockInit:0000001c $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:462    .text.USART_ClockStructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:467    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:488    .text.USART_Cmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:493    .text.USART_Cmd:00000000 USART_Cmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:524    .text.USART_DirectionModeCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:529    .text.USART_DirectionModeCmd:00000000 USART_DirectionModeCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:562    .text.USART_OverSampling8Cmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:567    .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:598    .text.USART_OverSampling8Cmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:603    .text.USART_OneBitMethodCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:608    .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:639    .text.USART_OneBitMethodCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:644    .text.USART_MSBFirstCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:649    .text.USART_MSBFirstCmd:00000000 USART_MSBFirstCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:680    .text.USART_MSBFirstCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:685    .text.USART_DataInvCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:690    .text.USART_DataInvCmd:00000000 USART_DataInvCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:721    .text.USART_DataInvCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:726    .text.USART_InvPinCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:731    .text.USART_InvPinCmd:00000000 USART_InvPinCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:764    .text.USART_SWAPPinCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:769    .text.USART_SWAPPinCmd:00000000 USART_SWAPPinCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:800    .text.USART_SWAPPinCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:805    .text.USART_ReceiverTimeOutCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:810    .text.USART_ReceiverTimeOutCmd:00000000 USART_ReceiverTimeOutCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:841    .text.USART_ReceiverTimeOutCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:846    .text.USART_SetReceiverTimeOut:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:851    .text.USART_SetReceiverTimeOut:00000000 USART_SetReceiverTimeOut
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:873    .text.USART_SetPrescaler:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:878    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:900    .text.USART_STOPModeCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:905    .text.USART_STOPModeCmd:00000000 USART_STOPModeCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:936    .text.USART_StopModeWakeUpSourceConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:941    .text.USART_StopModeWakeUpSourceConfig:00000000 USART_StopModeWakeUpSourceConfig
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:962    .text.USART_StopModeWakeUpSourceConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:967    .text.USART_AutoBaudRateCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:972    .text.USART_AutoBaudRateCmd:00000000 USART_AutoBaudRateCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1003   .text.USART_AutoBaudRateCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1008   .text.USART_AutoBaudRateConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1013   .text.USART_AutoBaudRateConfig:00000000 USART_AutoBaudRateConfig
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1034   .text.USART_AutoBaudRateConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1039   .text.USART_SendData:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1044   .text.USART_SendData:00000000 USART_SendData
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1061   .text.USART_ReceiveData:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1066   .text.USART_ReceiveData:00000000 USART_ReceiveData
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1083   .text.USART_SetAddress:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1088   .text.USART_SetAddress:00000000 USART_SetAddress
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1113   .text.USART_MuteModeCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1118   .text.USART_MuteModeCmd:00000000 USART_MuteModeCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1149   .text.USART_MuteModeCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1154   .text.USART_MuteModeWakeUpConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1159   .text.USART_MuteModeWakeUpConfig:00000000 USART_MuteModeWakeUpConfig
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1180   .text.USART_MuteModeWakeUpConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1185   .text.USART_AddressDetectionConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1190   .text.USART_AddressDetectionConfig:00000000 USART_AddressDetectionConfig
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1212   .text.USART_LINBreakDetectLengthConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1217   .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1239   .text.USART_LINCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1244   .text.USART_LINCmd:00000000 USART_LINCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1275   .text.USART_LINCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1280   .text.USART_HalfDuplexCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1285   .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1316   .text.USART_SetGuardTime:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1321   .text.USART_SetGuardTime:00000000 USART_SetGuardTime
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1345   .text.USART_SmartCardCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1350   .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1381   .text.USART_SmartCardNACKCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1386   .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1417   .text.USART_SetAutoRetryCount:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1422   .text.USART_SetAutoRetryCount:00000000 USART_SetAutoRetryCount
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1446   .text.USART_SetAutoRetryCount:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1451   .text.USART_SetBlockLength:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1456   .text.USART_SetBlockLength:00000000 USART_SetBlockLength
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1481   .text.USART_IrDAConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1486   .text.USART_IrDAConfig:00000000 USART_IrDAConfig
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1508   .text.USART_IrDACmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1513   .text.USART_IrDACmd:00000000 USART_IrDACmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1544   .text.USART_DECmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1549   .text.USART_DECmd:00000000 USART_DECmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1580   .text.USART_DECmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1585   .text.USART_DEPolarityConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1590   .text.USART_DEPolarityConfig:00000000 USART_DEPolarityConfig
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1611   .text.USART_DEPolarityConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1616   .text.USART_SetDEAssertionTime:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1621   .text.USART_SetDEAssertionTime:00000000 USART_SetDEAssertionTime
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1645   .text.USART_SetDEAssertionTime:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1650   .text.USART_SetDEDeassertionTime:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1655   .text.USART_SetDEDeassertionTime:00000000 USART_SetDEDeassertionTime
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1679   .text.USART_SetDEDeassertionTime:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1684   .text.USART_DMACmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1689   .text.USART_DMACmd:00000000 USART_DMACmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1722   .text.USART_DMAReceptionErrorConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1727   .text.USART_DMAReceptionErrorConfig:00000000 USART_DMAReceptionErrorConfig
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1748   .text.USART_DMAReceptionErrorConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1753   .text.USART_ITConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1758   .text.USART_ITConfig:00000000 USART_ITConfig
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1823   .text.USART_RequestCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1828   .text.USART_RequestCmd:00000000 USART_RequestCmd
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1861   .text.USART_OverrunDetectionConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1866   .text.USART_OverrunDetectionConfig:00000000 USART_OverrunDetectionConfig
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1887   .text.USART_OverrunDetectionConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1892   .text.USART_GetFlagStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1897   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1917   .text.USART_ClearFlag:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1922   .text.USART_ClearFlag:00000000 USART_ClearFlag
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1936   .text.USART_GetITStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:1941   .text.USART_GetITStatus:00000000 USART_GetITStatus
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:2017   .text.USART_ClearITPendingBit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccKK6Lr4.s:2022   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
__aeabi_uidiv
__aeabi_uidivmod
RCC_GetClocksFreq
