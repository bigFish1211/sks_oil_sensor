   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_iwdg.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.IWDG_WriteAccessCmd,"ax",%progbits
  18              		.align	1
  19              		.global	IWDG_WriteAccessCmd
  20              		.code	16
  21              		.thumb_func
  23              	IWDG_WriteAccessCmd:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @file    stm32f0xx_iwdg.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *          functionalities of the Independent watchdog (IWDG) peripheral:           
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *           + Prescaler and Counter configuration
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *           + IWDG activation
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *           + Flag management
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *  @verbatim  
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *  
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   ============================================================================== 
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****                           ##### IWDG features #####
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   ============================================================================== 
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****     [..] The IWDG can be started by either software or hardware (configurable
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          through option byte).
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****     [..] The IWDG is clocked by its own dedicated low-speed clock (LSI) and
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          thus stays active even if the main clock fails.
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          Once the IWDG is started, the LSI is forced ON and cannot be disabled
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          (LSI cannot be disabled too), and the counter starts counting down from 
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          the reset value of 0xFFF. When it reaches the end of count value (0x000)
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          a system reset is generated.
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          The IWDG counter should be reloaded at regular intervals to prevent
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          an MCU reset.
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****                              
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****     [..] The IWDG is implemented in the VDD voltage domain that is still functional
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          in STOP and STANDBY mode (IWDG reset can wake-up from STANDBY).
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****               
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****     [..] IWDGRST flag in RCC_CSR register can be used to inform when a IWDG
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          reset occurs.
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****               
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****     [..] Min-max timeout value @40KHz (LSI): ~0.1ms / ~28.3s
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          The IWDG timeout may vary due to LSI frequency dispersion. STM32F0xx
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          devices provide the capability to measure the LSI frequency (LSI clock
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          should be seleted as RTC clock which is internally connected to TIM10 CH1
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          input capture). The measured value can be used to have an IWDG timeout with
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          an acceptable accuracy. 
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          For more information, please refer to the STM32F0xx Reference manual.
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****             
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****                           ##### How to use this driver ##### 
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   ============================================================================== 
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****     [..] This driver allows to use IWDG peripheral with either window option enabled
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****          or disabled. To do so follow one of the two procedures below.
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****     (#) Window option is enabled:    
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) Start the IWDG using IWDG_Enable() function, when the IWDG is used
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              in software mode (no need to enable the LSI, it will be enabled
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              by hardware).        
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) Enable write access to IWDG_PR and IWDG_RLR registers using
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable) function.
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) Configure the IWDG prescaler using IWDG_SetPrescaler() function.
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) Configure the IWDG counter value using IWDG_SetReload() function.
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              This value will be loaded in the IWDG counter each time the counter
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              is reloaded, then the IWDG will start counting down from this value.
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) Wait for the IWDG registers to be updated using IWDG_GetFlagStatus() function.
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) Configure the IWDG refresh window using IWDG_SetWindowValue() function.
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****     (#) Window option is disabled:    
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) Enable write access to IWDG_PR and IWDG_RLR registers using
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable) function.
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) Configure the IWDG prescaler using IWDG_SetPrescaler() function.
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) Configure the IWDG counter value using IWDG_SetReload() function.
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              This value will be loaded in the IWDG counter each time the counter
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              is reloaded, then the IWDG will start counting down from this value.
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) Wait for the IWDG registers to be updated using IWDG_GetFlagStatus() function.
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) reload the IWDG counter at regular intervals during normal operation 
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              to prevent an MCU reset, using IWDG_ReloadCounter() function.
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****         (++) Start the IWDG using IWDG_Enable() function, when the IWDG is used
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              in software mode (no need to enable the LSI, it will be enabled
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****              by hardware).
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****               
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****     @endverbatim
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *    
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   ******************************************************************************
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @attention
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * You may not use this file except in compliance with the License.
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * You may obtain a copy of the License at:
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * Unless required by applicable law or agreed to in writing, software 
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * See the License for the specific language governing permissions and
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * limitations under the License.
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   ******************************************************************************
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /* Includes ------------------------------------------------------------------*/
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** #include "stm32f0xx_iwdg.h"
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @{
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /** @defgroup IWDG 
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @brief IWDG driver modules
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @{
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */ 
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /* Private typedef -----------------------------------------------------------*/
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /* Private define ------------------------------------------------------------*/
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /* ---------------------- IWDG registers bit mask ----------------------------*/
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /* KR register bit mask */
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** #define KR_KEY_RELOAD    ((uint16_t)0xAAAA)
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** #define KR_KEY_ENABLE    ((uint16_t)0xCCCC)
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /* Private macro -------------------------------------------------------------*/
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /* Private variables ---------------------------------------------------------*/
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /* Private function prototypes -----------------------------------------------*/
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /* Private functions ---------------------------------------------------------*/
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /** @defgroup IWDG_Private_Functions
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @{
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /** @defgroup IWDG_Group1 Prescaler and Counter configuration functions
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****  *  @brief   Prescaler and Counter configuration functions
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****  *
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** @verbatim   
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   ==============================================================================
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****             ##### Prescaler and Counter configuration functions #####
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   ==============================================================================  
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** @endverbatim
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @{
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /**
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @brief  Enables or disables write access to IWDG_PR and IWDG_RLR registers.
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @param  IWDG_WriteAccess: new state of write access to IWDG_PR and IWDG_RLR registers.
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *          This parameter can be one of the following values:
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR register
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @retval None
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** {
  26              		.loc 1 146 0
  27              		.cfi_startproc
  28              	.LVL0:
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   /* Check the parameters */
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   IWDG->KR = IWDG_WriteAccess;
  29              		.loc 1 149 0
  30 0000 014B     		ldr	r3, .L2
  31              		@ sp needed for prologue
  32 0002 1860     		str	r0, [r3]
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** }
  33              		.loc 1 150 0
  34 0004 7047     		bx	lr
  35              	.L3:
  36 0006 C046     		.align	2
  37              	.L2:
  38 0008 00300040 		.word	1073754112
  39              		.cfi_endproc
  40              	.LFE33:
  42              		.section	.text.IWDG_SetPrescaler,"ax",%progbits
  43              		.align	1
  44              		.global	IWDG_SetPrescaler
  45              		.code	16
  46              		.thumb_func
  48              	IWDG_SetPrescaler:
  49              	.LFB34:
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /**
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @brief  Sets IWDG Prescaler value.
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @param  IWDG_Prescaler: specifies the IWDG Prescaler value.
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *          This parameter can be one of the following values:
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_Prescaler_4: IWDG prescaler set to 4
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_Prescaler_8: IWDG prescaler set to 8
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_Prescaler_16: IWDG prescaler set to 16
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_Prescaler_32: IWDG prescaler set to 32
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_Prescaler_64: IWDG prescaler set to 64
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @retval None
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** {
  50              		.loc 1 166 0
  51              		.cfi_startproc
  52              	.LVL1:
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   /* Check the parameters */
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   IWDG->PR = IWDG_Prescaler;
  53              		.loc 1 169 0
  54 0000 014B     		ldr	r3, .L5
  55              		@ sp needed for prologue
  56 0002 5860     		str	r0, [r3, #4]
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** }
  57              		.loc 1 170 0
  58 0004 7047     		bx	lr
  59              	.L6:
  60 0006 C046     		.align	2
  61              	.L5:
  62 0008 00300040 		.word	1073754112
  63              		.cfi_endproc
  64              	.LFE34:
  66              		.section	.text.IWDG_SetReload,"ax",%progbits
  67              		.align	1
  68              		.global	IWDG_SetReload
  69              		.code	16
  70              		.thumb_func
  72              	IWDG_SetReload:
  73              	.LFB35:
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /**
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @brief  Sets IWDG Reload value.
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @param  Reload: specifies the IWDG Reload value.
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *          This parameter must be a number between 0 and 0x0FFF.
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @retval None
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** void IWDG_SetReload(uint16_t Reload)
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** {
  74              		.loc 1 179 0
  75              		.cfi_startproc
  76              	.LVL2:
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   /* Check the parameters */
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   assert_param(IS_IWDG_RELOAD(Reload));
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   IWDG->RLR = Reload;
  77              		.loc 1 182 0
  78 0000 014B     		ldr	r3, .L8
  79              		@ sp needed for prologue
  80 0002 9860     		str	r0, [r3, #8]
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** }
  81              		.loc 1 183 0
  82 0004 7047     		bx	lr
  83              	.L9:
  84 0006 C046     		.align	2
  85              	.L8:
  86 0008 00300040 		.word	1073754112
  87              		.cfi_endproc
  88              	.LFE35:
  90              		.section	.text.IWDG_ReloadCounter,"ax",%progbits
  91              		.align	1
  92              		.global	IWDG_ReloadCounter
  93              		.code	16
  94              		.thumb_func
  96              	IWDG_ReloadCounter:
  97              	.LFB36:
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /**
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @brief  Reloads IWDG counter with value defined in the reload register
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *   (write access to IWDG_PR and IWDG_RLR registers disabled).
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @param  None
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @retval None
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** void IWDG_ReloadCounter(void)
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** {
  98              		.loc 1 192 0
  99              		.cfi_startproc
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   IWDG->KR = KR_KEY_RELOAD;
 100              		.loc 1 193 0
 101 0000 014A     		ldr	r2, .L11
 102 0002 024B     		ldr	r3, .L11+4
 103              		@ sp needed for prologue
 104 0004 1A60     		str	r2, [r3]
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** }
 105              		.loc 1 194 0
 106 0006 7047     		bx	lr
 107              	.L12:
 108              		.align	2
 109              	.L11:
 110 0008 AAAA0000 		.word	43690
 111 000c 00300040 		.word	1073754112
 112              		.cfi_endproc
 113              	.LFE36:
 115              		.section	.text.IWDG_SetWindowValue,"ax",%progbits
 116              		.align	1
 117              		.global	IWDG_SetWindowValue
 118              		.code	16
 119              		.thumb_func
 121              	IWDG_SetWindowValue:
 122              	.LFB37:
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /**
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @brief  Sets the IWDG window value.
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @param  WindowValue: specifies the window value to be compared to the downcounter.
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @retval None
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** void IWDG_SetWindowValue(uint16_t WindowValue)
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** {
 123              		.loc 1 203 0
 124              		.cfi_startproc
 125              	.LVL3:
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   /* Check the parameters */
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   assert_param(IS_IWDG_WINDOW_VALUE(WindowValue));
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   IWDG->WINR = WindowValue;
 126              		.loc 1 206 0
 127 0000 014B     		ldr	r3, .L14
 128              		@ sp needed for prologue
 129 0002 1861     		str	r0, [r3, #16]
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** }
 130              		.loc 1 207 0
 131 0004 7047     		bx	lr
 132              	.L15:
 133 0006 C046     		.align	2
 134              	.L14:
 135 0008 00300040 		.word	1073754112
 136              		.cfi_endproc
 137              	.LFE37:
 139              		.section	.text.IWDG_Enable,"ax",%progbits
 140              		.align	1
 141              		.global	IWDG_Enable
 142              		.code	16
 143              		.thumb_func
 145              	IWDG_Enable:
 146              	.LFB38:
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /**
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @}
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /** @defgroup IWDG_Group2 IWDG activation function
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****  *  @brief   IWDG activation function 
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****  *
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** @verbatim   
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****  ==============================================================================
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****                           ##### IWDG activation function #####
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****  ==============================================================================  
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** @endverbatim
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @{
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /**
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @param  None
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @retval None
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** void IWDG_Enable(void)
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** {
 147              		.loc 1 231 0
 148              		.cfi_startproc
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   IWDG->KR = KR_KEY_ENABLE;
 149              		.loc 1 232 0
 150 0000 014A     		ldr	r2, .L17
 151 0002 024B     		ldr	r3, .L17+4
 152              		@ sp needed for prologue
 153 0004 1A60     		str	r2, [r3]
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** }
 154              		.loc 1 233 0
 155 0006 7047     		bx	lr
 156              	.L18:
 157              		.align	2
 158              	.L17:
 159 0008 CCCC0000 		.word	52428
 160 000c 00300040 		.word	1073754112
 161              		.cfi_endproc
 162              	.LFE38:
 164              		.section	.text.IWDG_GetFlagStatus,"ax",%progbits
 165              		.align	1
 166              		.global	IWDG_GetFlagStatus
 167              		.code	16
 168              		.thumb_func
 170              	IWDG_GetFlagStatus:
 171              	.LFB39:
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /**
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @}
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /** @defgroup IWDG_Group3 Flag management function 
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****  *  @brief  Flag management function  
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****  *
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** @verbatim   
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****  ===============================================================================
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****                       ##### Flag management function ##### 
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****  ===============================================================================  
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** @endverbatim
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @{
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** 
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** /**
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @brief  Checks whether the specified IWDG flag is set or not.
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @param  IWDG_FLAG: specifies the flag to check.
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *          This parameter can be one of the following values:
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_FLAG_RVU: Reload Value Update on going
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   *            @arg IWDG_FLAG_WVU: Counter Window Value Update on going
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   * @retval The new state of IWDG_FLAG (SET or RESET).
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   */
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** {
 172              		.loc 1 261 0
 173              		.cfi_startproc
 174              	.LVL4:
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   FlagStatus bitstatus = RESET;
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   /* Check the parameters */
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   assert_param(IS_IWDG_FLAG(IWDG_FLAG));
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 175              		.loc 1 265 0
 176 0000 0249     		ldr	r1, .L20
 177              		@ sp needed for prologue
 178 0002 CB68     		ldr	r3, [r1, #12]
 179              	.LVL5:
 180 0004 1840     		and	r0, r3
 181              	.LVL6:
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   {
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****     bitstatus = SET;
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   }
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   else
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   {
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****     bitstatus = RESET;
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   }
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   /* Return the flag status */
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c ****   return bitstatus;
 182              		.loc 1 274 0
 183 0006 431E     		sub	r3, r0, #1
 184 0008 9841     		sbc	r0, r0, r3
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_iwdg.c **** }
 185              		.loc 1 275 0
 186 000a 7047     		bx	lr
 187              	.L21:
 188              		.align	2
 189              	.L20:
 190 000c 00300040 		.word	1073754112
 191              		.cfi_endproc
 192              	.LFE39:
 194              		.text
 195              	.Letext0:
 196              		.file 2 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 197              		.file 3 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/stm32f
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_iwdg.c
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:18     .text.IWDG_WriteAccessCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:23     .text.IWDG_WriteAccessCmd:00000000 IWDG_WriteAccessCmd
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:38     .text.IWDG_WriteAccessCmd:00000008 $d
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:43     .text.IWDG_SetPrescaler:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:48     .text.IWDG_SetPrescaler:00000000 IWDG_SetPrescaler
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:62     .text.IWDG_SetPrescaler:00000008 $d
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:67     .text.IWDG_SetReload:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:72     .text.IWDG_SetReload:00000000 IWDG_SetReload
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:86     .text.IWDG_SetReload:00000008 $d
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:91     .text.IWDG_ReloadCounter:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:96     .text.IWDG_ReloadCounter:00000000 IWDG_ReloadCounter
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:110    .text.IWDG_ReloadCounter:00000008 $d
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:116    .text.IWDG_SetWindowValue:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:121    .text.IWDG_SetWindowValue:00000000 IWDG_SetWindowValue
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:135    .text.IWDG_SetWindowValue:00000008 $d
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:140    .text.IWDG_Enable:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:145    .text.IWDG_Enable:00000000 IWDG_Enable
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:159    .text.IWDG_Enable:00000008 $d
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:165    .text.IWDG_GetFlagStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:170    .text.IWDG_GetFlagStatus:00000000 IWDG_GetFlagStatus
C:\Users\khanh\AppData\Local\Temp\ccwHno6v.s:190    .text.IWDG_GetFlagStatus:0000000c $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
