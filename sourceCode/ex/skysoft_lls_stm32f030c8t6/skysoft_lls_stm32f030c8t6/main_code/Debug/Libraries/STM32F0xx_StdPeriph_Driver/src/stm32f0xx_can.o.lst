   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_can.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CheckITStatus,"ax",%progbits
  18              		.align	1
  19              		.code	16
  20              		.thumb_func
  22              	CheckITStatus:
  23              	.LFB57:
  24              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @file    stm32f0xx_can.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          functionalities of the Controller area network (CAN) peripheral and 
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          applicable only for STM32F072 devices :           
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + Initialization and Configuration 
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + CAN Frames Transmission 
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + CAN Frames Reception    
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + Operation modes switch  
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + Error management          
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *           + Interrupts and flags        
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   @verbatim
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================      
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                       ##### How to use this driver #####
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================                
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..]
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Enable the CAN controller interface clock using 
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN, ENABLE);      
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) CAN pins configuration:
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (++) Enable the clock for the CAN GPIOs using the following function:
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOx, ENABLE);   
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (++) Connect the involved CAN pins to AF0 using the following function 
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_CANx); 
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (++) Configure these CAN pins in alternate function mode by calling
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              the function  GPIO_Init();
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Initialise and configure the CAN using CAN_Init() and 
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         CAN_FilterInit() functions.   
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Transmit the desired CAN frame using CAN_Transmit() function.
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Check the transmission of a CAN frame using CAN_TransmitStatus() function.
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Cancel the transmission of a CAN frame using CAN_CancelTransmit() function.  
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Receive a CAN frame using CAN_Recieve() function.
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Release the receive FIFOs using CAN_FIFORelease() function.
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) Return the number of pending received frames using CAN_MessagePending() function.          
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     (#) To control CAN events you can use one of the following two methods:
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (++) Check on CAN flags using the CAN_GetFlagStatus() function.  
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (++) Use CAN interrupts through the function CAN_ITConfig() at initialization 
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              phase and CAN_GetITStatus() function into interrupt routines to check 
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              if the event has occurred or not.
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              After checking on a flag you should clear it using CAN_ClearFlag()
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              function. And after checking on an interrupt event you should clear it 
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              using CAN_ClearITPendingBit() function.            
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                  
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   @endverbatim
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *       
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ******************************************************************************
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @attention
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * You may not use this file except in compliance with the License.
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * You may obtain a copy of the License at:
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * Unless required by applicable law or agreed to in writing, software 
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * See the License for the specific language governing permissions and
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * limitations under the License.
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ******************************************************************************
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Includes ------------------------------------------------------------------*/
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #include "stm32f0xx_can.h"
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #include "stm32f0xx_rcc.h"
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN 
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief CAN driver modules
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */ 
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private typedef -----------------------------------------------------------*/
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private define ------------------------------------------------------------*/
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* CAN Master Control Register bits */
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define MCR_DBF           ((uint32_t)0x00010000) /* software master reset */
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* CAN Mailbox Transmit Request */
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define TMIDxR_TXRQ       ((uint32_t)0x00000001) /* Transmit mailbox request */
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* CAN Filter Master Register bits */
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define FMR_FINIT         ((uint32_t)0x00000001) /* Filter init mode */
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Time out for INAK bit */
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define INAK_TIMEOUT      ((uint32_t)0x00FFFFFF)
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Time out for SLAK bit */
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define SLAK_TIMEOUT      ((uint32_t)0x00FFFFFF)
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Flags in TSR register */
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_FLAGS_TSR     ((uint32_t)0x08000000) 
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Flags in RF1R register */
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_FLAGS_RF1R    ((uint32_t)0x04000000) 
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Flags in RF0R register */
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_FLAGS_RF0R    ((uint32_t)0x02000000) 
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Flags in MSR register */
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_FLAGS_MSR     ((uint32_t)0x01000000) 
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Flags in ESR register */
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_FLAGS_ESR     ((uint32_t)0x00F00000) 
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Mailboxes definition */
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_TXMAILBOX_0   ((uint8_t)0x00)
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_TXMAILBOX_1   ((uint8_t)0x01)
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_TXMAILBOX_2   ((uint8_t)0x02) 
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** #define CAN_MODE_MASK     ((uint32_t) 0x00000003)
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private macro -------------------------------------------------------------*/
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private variables ---------------------------------------------------------*/
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private function prototypes -----------------------------------------------*/
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /* Private functions ---------------------------------------------------------*/
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Private_Functions
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group1 Initialization and Configuration functions
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief    Initialization and Configuration functions 
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim    
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****               ##### Initialization and Configuration functions #####
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to: 
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Initialize the CAN peripherals : Prescaler, operating mode, the maximum 
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              number of time quanta to perform resynchronization, the number of time 
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              quanta in Bit Segment 1 and 2 and many other modes. 
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Configure the CAN reception filter.                                      
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Select the start bank filter for slave CAN.
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Enable or disable the Debug Freeze mode for CAN.
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Enable or disable the CAN Time Trigger Operation communication mode.
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None.
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Enable CAN reset state */
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, ENABLE);
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release CAN from reset state */
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, DISABLE);
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         parameters in the CAN_InitStruct.
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that contains
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         the configuration information for the CAN peripheral.
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval Constant indicates initialization succeed which will be 
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t wait_ack = 0x00000000;
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Exit from sleep mode */
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Request initialisation */
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Wait the acknowledge */
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     wait_ack++;
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check acknowledge */
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else 
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the time triggered communication mode */
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the automatic bus-off management */
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the automatic wake-up mode */
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the no automatic retransmission */
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the receive FIFO locked mode */
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the transmit FIFO priority */
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set the bit timing register */
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Request leave initialisation */
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    /* Wait the acknowledge */
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    wait_ack = 0;
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == (uint16_t)CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    {
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****      wait_ack++;
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    }
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* ...and check acknowledged */
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       InitStatus = CAN_InitStatus_Failed;
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       InitStatus = CAN_InitStatus_Success ;
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* At this step, return the status of initialization */
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return InitStatus;
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         contains the configuration information.
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialisation mode for the filter */
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR |= FMR_FINIT;
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Filter Deactivation */
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FA1R &= ~(uint32_t)filter_number_bit_pos;
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Filter Scale */
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* 16-bit scale for the filter */
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FS1R &= ~(uint32_t)filter_number_bit_pos;
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* 32-bit scale for the filter */
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FS1R |= filter_number_bit_pos;
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Filter Mode */
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /*Id/Mask mode for the filter*/
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FM1R &= ~(uint32_t)filter_number_bit_pos;
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /*Identifier list mode for the filter*/
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FM1R |= (uint32_t)filter_number_bit_pos;
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Filter FIFO assignment */
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* FIFO 0 assignation for the filter */
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* FIFO 1 assignation for the filter */
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FFA1R |= (uint32_t)filter_number_bit_pos;
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Filter activation */
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FA1R |= filter_number_bit_pos;
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Leave the initialisation mode for the filter */
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR &= ~FMR_FINIT;
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Reset CAN init structure parameters values */
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the time triggered communication mode */
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the automatic bus-off management */
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the automatic wake-up mode */
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the no automatic retransmission */
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the receive FIFO locked mode */
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the transmit FIFO priority */
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the CAN_Mode member */
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the CAN_SJW member */
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the CAN_BS1 member */
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the CAN_BS2 member */
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Initialize the CAN_Prescaler member */
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Enter Initialisation mode for the filter */
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR |= FMR_FINIT;
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Select the start slave bank */
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR &= (uint32_t)0xFFFFC0F1 ;
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Leave Initialisation mode for the filter */
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR &= ~FMR_FINIT;
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  NewState: new state of the CAN peripheral. 
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be: ENABLE (CAN reception/transmission is frozen
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          during debug. Reception FIFOs can still be accessed/controlled normally) 
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          or DISABLE (CAN is working during debug).
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (NewState != DISABLE)
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Enable Debug Freeze  */
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR |= MCR_DBF;
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Disable Debug Freeze */
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Enables or disables the CAN Time TriggerOperation communication mode.
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         sent over the CAN bus.  
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  NewState: Mode new state. This parameter can be: ENABLE or DISABLE.
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         When enabled, Time stamp (TIME[15:0]) value is  sent in the last two
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         in data byte 7. 
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (NewState != DISABLE)
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Enable the TTCM mode */
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set TGT bits */
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Disable the TTCM mode */
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Reset TGT bits */
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group2 CAN Frames Transmission functions
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief    CAN Frames Transmission functions 
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim    
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ##### CAN Frames Transmission functions #####
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to 
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Initiate and transmit a CAN frame message (if there is an empty mailbox).
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Check the transmission status of a CAN Frame.
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Cancel a transmit request.
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Initiates and transmits a CAN frame message.
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval The number of the mailbox that is used for transmission or
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t transmit_mailbox = 0;
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Select one empty transmit mailbox */
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 0;
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 1;
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 2;
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set up the Id */
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                                   TxMessage->RTR);
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                                   TxMessage->IDE | \
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                                   TxMessage->RTR);
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set up the DLC */
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Set up the data field */
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Request transmission */
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return transmit_mailbox;
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Checks the transmission status of a CAN Frame.
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         CAN_TxStatus_Failed in an other case.
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t state = 0;
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (TransmitMailbox)
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_0): 
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_1): 
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_2): 
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     default:
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state = CAN_TxStatus_Failed;
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (state)
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* transmit pending  */
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* transmit failed  */
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* transmit succeeded  */
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     default: state = CAN_TxStatus_Failed;
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return (uint8_t) state;
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Cancels a transmit request.
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  Mailbox: Mailbox number.
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* abort transmission */
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (Mailbox)
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     default:
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group3 CAN Frames Reception functions
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief    CAN Frames Reception functions 
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim    
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   ##### CAN Frames Reception functions #####
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to 
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Receive a correct CAN frame.
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Release a specified receive FIFO (2 FIFOs are available).
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Return the number of the pending received CAN frames.
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Receives a correct CAN frame.
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         CAN DLC, CAN data and FMI number.
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the Id */
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the DLC */
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the FMI */
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the data field */
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release the FIFO */
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release FIFO0 */
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release FIFO1 */
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Releases the specified receive FIFO.
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release FIFO0 */
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Release FIFO1 */
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Returns the number of pending received messages.
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval NbMessage : which is the number of pending message.
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t message_pending=0;
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     message_pending = 0;
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return message_pending;
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group4 CAN Operation modes functions
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief    CAN Operation modes functions 
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim    
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                     ##### CAN Operation modes functions #####
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to select the CAN Operation modes:
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) sleep mode.
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) normal mode. 
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) initialization mode.
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Selects the CAN Operation mode.
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_OperatingMode: CAN Operating Mode.
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         This parameter can be one of @ref CAN_OperatingMode_TypeDef enumeration.
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval status of the requested mode which can be: 
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Timeout for INAK or also for SLAK bits*/
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Request initialisation */
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Wait the acknowledge */
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       timeout--;
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Failed;
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Success;
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Wait the acknowledge */
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       timeout--;
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Failed;
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Success;
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Request Sleep mode */
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Wait the acknowledge */
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       timeout--;
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Failed;
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Success;
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     status = CAN_ModeStatus_Failed;
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return  (uint8_t) status;
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Enters the Sleep (low power) mode.
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Request Sleep mode */
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Sleep mode status */
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Sleep mode not entered */
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* return sleep mode status */
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    return (uint8_t)sleepstatus;
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Wakes up the CAN peripheral from sleep mode .
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Wake up request */
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Sleep mode status */
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    wait_slak--;
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    /* wake up done : Sleep mode exited */
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* return wakeup status */
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return (uint8_t)wakeupstatus;
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group5 CAN Bus Error management functions
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief    CAN Bus Error management functions 
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim    
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   ##### CAN Bus Error management functions #####
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to 
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Return the CANx's last error code (LEC).
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Return the CANx Receive Error Counter (REC).
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Return the LSB of the 9-bit CANx Transmit Error Counter(TEC).
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..]
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (@) If TEC is greater than 255, The CAN is in bus-off state.
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (@) If REC or TEC are greater than 96, an Error warning flag occurs.
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (@) If REC or TEC are greater than 127, an Error Passive Flag occurs.
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                         
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Returns the CANx's last error code (LEC).
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 to select the CAN peripheral.
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval Error code: 
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_NoErr: No Error  
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_StuffErr: Stuff Error
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_FormErr: Form Error
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_ACKErr : Acknowledgment Error
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_BitRecessiveErr: Bit Recessive Error
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_CRCErr: CRC Error
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t errorcode=0;
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the error code*/
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Return the error code*/
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return errorcode;
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @note   In case of an error during reception, this counter is incremented 
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         standard. After every successful reception, the counter is 
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *         error passive state.  
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval CAN Receive Error Counter. 
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t counter=0;
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the Receive Error Counter*/
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Return the Receive Error Counter*/
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return counter;
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t counter=0;
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return counter;
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /** @defgroup CAN_Group6 Interrupts and flags management functions
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *  @brief   Interrupts and flags management functions
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  *
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @verbatim   
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****               ##### Interrupts and flags management functions #####
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  ===============================================================================  
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] This section provides functions allowing to configure the CAN Interrupts 
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          and to get the status and clear flags and Interrupts pending bits.
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] The CAN provides 14 Interrupts sources and 15 Flags:
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *** Flags ***
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   =============
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] The 15 flags can be divided on 4 groups: 
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Transmit Flags:
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_RQCP0. 
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_RQCP1. 
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_RQCP2: Request completed MailBoxes 0, 1 and 2  Flags
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when when the last request (transmit or abort) has 
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   been performed. 
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Receive Flags:
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FMP0.
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FMP1: FIFO 0 and 1 Message Pending Flags; 
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set to signal that messages are pending in the receive FIFO.
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   These Flags are cleared only by hardware. 
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FF0.
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FF1: FIFO 0 and 1 Full Flags; 
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when three messages are stored in the selected FIFO.                        
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FOV0.              
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_FOV1: FIFO 0 and 1 Overrun Flags; 
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when a new message has been received and passed the filter 
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   while the FIFO was full.         
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Operating Mode Flags: 
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_WKU: Wake up Flag; 
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set to signal that a SOF bit has been detected while the CAN 
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   hardware was in Sleep mode. 
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_SLAK: Sleep acknowledge Flag;
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set to signal that the CAN has entered Sleep Mode. 
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Error Flags:  
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_EWG: Error Warning Flag;
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when the warning limit has been reached (Receive Error Counter 
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   or Transmit Error Counter greater than 96). 
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   This Flag is cleared only by hardware.
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_EPV: Error Passive Flag;
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when the Error Passive limit has been reached (Receive Error 
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Counter or Transmit Error Counter greater than 127).
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   This Flag is cleared only by hardware.
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_BOF: Bus-Off Flag;
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set when CAN enters the bus-off state. The bus-off state is 
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   entered on TEC overflow, greater than 255.
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   This Flag is cleared only by hardware.
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_FLAG_LEC: Last error code Flag;
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   Set If a message has been transferred (reception or transmission) 
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   with error, and the error code is hold.                      
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *** Interrupts ***
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ==================
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] The 14 interrupts can be divided on 4 groups: 
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Transmit interrupt:   
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_TME: Transmit mailbox empty Interrupt;
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when no transmit 
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   request are pending for Tx mailboxes.      
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Receive Interrupts:   
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FMP0.
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FMP1: FIFO 0 and FIFO1 message pending Interrupts;
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, these interrupt sources are pending when messages 
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   are pending in the receive FIFO.
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   The corresponding interrupt pending bits are cleared only by hardware.
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FF0.              
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FF1: FIFO 0 and FIFO1 full Interrupts;
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, these interrupt sources are pending when three messages 
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   are stored in the selected FIFO.
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FOV0.        
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_FOV1: FIFO 0 and FIFO1 overrun Interrupts;        
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, these interrupt sources are pending when a new message 
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   has been received and passed the filter while the FIFO was full.
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Operating Mode Interrupts:    
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_WKU: Wake-up Interrupt;
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when a SOF bit has 
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   been detected while the CAN hardware was in Sleep mode.
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_SLK: Sleep acknowledge Interrupt:
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when the CAN has 
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   entered Sleep Mode.       
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) Error Interrupts:     
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_EWG: Error warning Interrupt; 
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when the warning limit 
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   has been reached (Receive Error Counter or Transmit Error Counter=96). 
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_EPV: Error passive Interrupt;        
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when the Error Passive 
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   limit has been reached (Receive Error Counter or Transmit Error Counter>127).
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_BOF: Bus-off Interrupt;
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when CAN enters 
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   the bus-off state. The bus-off state is entered on TEC overflow, 
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   greater than 255.
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   This Flag is cleared only by hardware.
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_LEC: Last error code Interrupt;        
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when a message has 
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   been transferred (reception or transmission) with error and the 
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   error code is hold.
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_IT_ERR: Error Interrupt;
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   If enabled, this interrupt source is pending when an error condition 
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   is pending.      
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     [..] Managing the CAN controller events: 
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          The user should identify which mode will be used in his application to manage 
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          the CAN controller events: Polling mode or Interrupt mode.
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) In the Polling Mode it is advised to use the following functions:
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_GetFlagStatus() : to check if flags events occur. 
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_ClearFlag()     : to clear the flags events.
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****          (+) In the Interrupt Mode it is advised to use the following functions:
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_ITConfig()       : to enable or disable the interrupt source.
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_GetITStatus()    : to check if Interrupt occurs.
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****              (++) CAN_ClearITPendingBit() : to clear the Interrupt pending Bit 
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   (corresponding Flag).
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   This function has no impact on CAN_IT_FMP0 and CAN_IT_FMP1 Interrupts 
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                   pending bits since there are cleared only by hardware. 
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** @endverbatim
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @{
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */ 
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be: 
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  NewState: new state of the CAN interrupts.
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be: ENABLE or DISABLE.
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (NewState != DISABLE)
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Enable the selected CANx interrupt */
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->IER |= CAN_IT;
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Disable the selected CANx interrupt */
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->IER &= ~CAN_IT;
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be one of the following values:
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FMP0: FIFO 0 Message Pending Flag   
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag 
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FMP1: FIFO 1 Message Pending Flag   
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag 
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_EWG: Error Warning Flag
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_EPV: Error Passive Flag  
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_BOF: Bus-Off Flag    
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag      
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   FlagStatus bitstatus = RESET;
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   { 
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Check the status of the specified CAN flag */
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is set */
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = SET;
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is reset */
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   { 
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Check the status of the specified CAN flag */
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is set */
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = SET;
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is reset */
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   { 
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Check the status of the specified CAN flag */
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is set */
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = SET;
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is reset */
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   { 
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Check the status of the specified CAN flag */
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is set */
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = SET;
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is reset */
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   { 
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Check the status of the specified CAN flag */
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is set */
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = SET;
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     { 
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* CAN_FLAG is reset */
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Return the CAN_FLAG status */
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return  bitstatus;
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Clears the CAN's pending flags.
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be one of the following values:
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag 
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag  
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag        
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint32_t flagtmp=0;
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* Clear the selected CAN flags */
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->ESR = (uint32_t)RESET;
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Receive Flags */
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Receive Flags */
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Transmit Flags */
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Operating mode Flags */
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt source to check.
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be one of the following values:
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ITStatus itstatus = RESET;
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* check the interrupt enable bit */
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  {
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    /* in case the Interrupt is enabled, .... */
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     switch (CAN_IT)
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     {
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_TME:
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_TSR_RQCPx bits */
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FMP0:
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF0R_FMP0 bit */
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FF0:
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF0R_FULL0 bit */
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FOV0:
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF0R_FOVR0 bit */
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FMP1:
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF1R_FMP1 bit */
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FF1:
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF1R_FULL1 bit */
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_FOV1:
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_RF1R_FOVR1 bit */
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_WKU:
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_MSR_WKUI bit */
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_SLK:
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_MSR_SLAKI bit */
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_EWG:
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_ESR_EWGF bit */
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_EPV:
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_ESR_EPVF bit */
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_BOF:
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_ESR_BOFF bit */
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_LEC:
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_ESR_LEC bit */
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       case CAN_IT_ERR:
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* Check CAN_MSR_ERRI bit */ 
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       default:
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         /* in case of error, return RESET */
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = RESET;
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     }
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     itstatus  = RESET;
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Return the CAN_IT status */
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return  itstatus;
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *          This parameter can be one of the following values:
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt 
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval None
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   /* Check the parameters */
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (CAN_IT)
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_TME:
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_TSR_RQCPx (rc_w1)*/
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_FF0:
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_FOV0:
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_FF1:
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_FOV1:
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_WKU:
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_WKUI (rc_w1)*/
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_SLK:
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_EWG:
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI;
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_EPV:
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_BOF:
1571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */ 
1572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        break;
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_LEC:
1576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /*  Clear LEC bits */
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->ESR = RESET; 
1578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
1581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case CAN_IT_ERR:
1582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /*Clear LEC bits */
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->ESR = RESET; 
1584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
1587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        break;
1588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     default:
1589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        break;
1590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    }
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
1592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  /**
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @}
1594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** 
1596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** /**
1597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @param  It_Bit: specifies the interrupt source bit to check.
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   */
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
  25              		.loc 1 1603 0
  26              		.cfi_startproc
  27              	.LVL0:
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   ITStatus pendingbitstatus = RESET;
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
  28              		.loc 1 1606 0
  29 0000 0840     		and	r0, r1
  30              	.LVL1:
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* CAN_IT is set */
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     pendingbitstatus = SET;
1610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   {
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     /* CAN_IT is reset */
1614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     pendingbitstatus = RESET;
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   }
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return pendingbitstatus;
  31              		.loc 1 1616 0
  32 0002 431E     		sub	r3, r0, #1
  33 0004 9841     		sbc	r0, r0, r3
  34              		@ sp needed for prologue
1617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
  35              		.loc 1 1617 0
  36 0006 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE57:
  40              		.section	.text.CAN_DeInit,"ax",%progbits
  41              		.align	1
  42              		.global	CAN_DeInit
  43              		.code	16
  44              		.thumb_func
  46              	CAN_DeInit:
  47              	.LFB33:
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
  48              		.loc 1 154 0
  49              		.cfi_startproc
  50 0000 08B5     		push	{r3, lr}
  51              	.LCFI0:
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 3, -8
  54              		.cfi_offset 14, -4
  55              	.LVL2:
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, ENABLE);
  56              		.loc 1 159 0
  57 0002 8021     		mov	r1, #128
  58 0004 8804     		lsl	r0, r1, #18
  59              	.LVL3:
  60 0006 0121     		mov	r1, #1
  61 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, DISABLE);
  62              		.loc 1 161 0
  63 000c 8020     		mov	r0, #128
  64 000e 8004     		lsl	r0, r0, #18
  65 0010 0021     		mov	r1, #0
  66 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  67              		@ sp needed for prologue
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
  68              		.loc 1 162 0
  69 0016 08BD     		pop	{r3, pc}
  70              		.cfi_endproc
  71              	.LFE33:
  73              		.section	.text.CAN_Init,"ax",%progbits
  74              		.align	1
  75              		.global	CAN_Init
  76              		.code	16
  77              		.thumb_func
  79              	CAN_Init:
  80              	.LFB34:
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
  81              		.loc 1 174 0
  82              		.cfi_startproc
  83 0000 10B5     		push	{r4, lr}
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 8
  86              		.cfi_offset 4, -8
  87              		.cfi_offset 14, -4
  88              	.LVL4:
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
  89              		.loc 1 193 0
  90 0002 0268     		ldr	r2, [r0]
  91 0004 0224     		mov	r4, #2
  92 0006 A243     		bic	r2, r4
  93 0008 0260     		str	r2, [r0]
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
  94              		.loc 1 196 0
  95 000a 0468     		ldr	r4, [r0]
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
  96              		.loc 1 174 0
  97 000c 031C     		mov	r3, r0
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
  98              		.loc 1 196 0
  99 000e 0120     		mov	r0, #1
 100              	.LVL5:
 101 0010 0443     		orr	r4, r0
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 102              		.loc 1 199 0
 103 0012 8022     		mov	r2, #128
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 104              		.loc 1 196 0
 105 0014 1C60     		str	r4, [r3]
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 106              		.loc 1 199 0
 107 0016 5204     		lsl	r2, r2, #17
 108              	.LVL6:
 109              	.L5:
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 110              		.loc 1 199 0 is_stmt 0 discriminator 1
 111 0018 5C68     		ldr	r4, [r3, #4]
 112 001a 0120     		mov	r0, #1
 113 001c 0442     		tst	r4, r0
 114 001e 02D1     		bne	.L4
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 115              		.loc 1 199 0 discriminator 2
 116 0020 013A     		sub	r2, r2, #1
 117 0022 002A     		cmp	r2, #0
 118 0024 F8D1     		bne	.L5
 119              	.L4:
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 120              		.loc 1 205 0 is_stmt 1
 121 0026 5A68     		ldr	r2, [r3, #4]
 122 0028 1040     		and	r0, r2
 123 002a 61D0     		beq	.L6
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 124              		.loc 1 212 0
 125 002c 8879     		ldrb	r0, [r1, #6]
 126 002e 8022     		mov	r2, #128
 127 0030 0128     		cmp	r0, #1
 128 0032 02D1     		bne	.L7
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 129              		.loc 1 214 0
 130 0034 1C68     		ldr	r4, [r3]
 131 0036 2243     		orr	r2, r4
 132 0038 02E0     		b	.L24
 133              	.L7:
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 134              		.loc 1 218 0
 135 003a 1868     		ldr	r0, [r3]
 136 003c 9043     		bic	r0, r2
 137 003e 021C     		mov	r2, r0
 138              	.L24:
 139 0040 1A60     		str	r2, [r3]
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 140              		.loc 1 222 0
 141 0042 CC79     		ldrb	r4, [r1, #7]
 142 0044 4022     		mov	r2, #64
 143 0046 012C     		cmp	r4, #1
 144 0048 02D1     		bne	.L9
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 145              		.loc 1 224 0
 146 004a 1868     		ldr	r0, [r3]
 147 004c 0243     		orr	r2, r0
 148 004e 02E0     		b	.L25
 149              	.L9:
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 150              		.loc 1 228 0
 151 0050 1C68     		ldr	r4, [r3]
 152 0052 9443     		bic	r4, r2
 153 0054 221C     		mov	r2, r4
 154              	.L25:
 155 0056 1A60     		str	r2, [r3]
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 156              		.loc 1 232 0
 157 0058 087A     		ldrb	r0, [r1, #8]
 158 005a 2022     		mov	r2, #32
 159 005c 0128     		cmp	r0, #1
 160 005e 02D1     		bne	.L11
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 161              		.loc 1 234 0
 162 0060 1C68     		ldr	r4, [r3]
 163 0062 2243     		orr	r2, r4
 164 0064 02E0     		b	.L26
 165              	.L11:
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 166              		.loc 1 238 0
 167 0066 1868     		ldr	r0, [r3]
 168 0068 9043     		bic	r0, r2
 169 006a 021C     		mov	r2, r0
 170              	.L26:
 171 006c 1A60     		str	r2, [r3]
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 172              		.loc 1 242 0
 173 006e 4C7A     		ldrb	r4, [r1, #9]
 174 0070 1022     		mov	r2, #16
 175 0072 012C     		cmp	r4, #1
 176 0074 02D1     		bne	.L13
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 177              		.loc 1 244 0
 178 0076 1868     		ldr	r0, [r3]
 179 0078 0243     		orr	r2, r0
 180 007a 02E0     		b	.L27
 181              	.L13:
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 182              		.loc 1 248 0
 183 007c 1C68     		ldr	r4, [r3]
 184 007e 9443     		bic	r4, r2
 185 0080 221C     		mov	r2, r4
 186              	.L27:
 187 0082 1A60     		str	r2, [r3]
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 188              		.loc 1 252 0
 189 0084 887A     		ldrb	r0, [r1, #10]
 190 0086 0822     		mov	r2, #8
 191 0088 0128     		cmp	r0, #1
 192 008a 02D1     		bne	.L15
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 193              		.loc 1 254 0
 194 008c 1C68     		ldr	r4, [r3]
 195 008e 2243     		orr	r2, r4
 196 0090 02E0     		b	.L28
 197              	.L15:
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 198              		.loc 1 258 0
 199 0092 1868     		ldr	r0, [r3]
 200 0094 9043     		bic	r0, r2
 201 0096 021C     		mov	r2, r0
 202              	.L28:
 203 0098 1A60     		str	r2, [r3]
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 204              		.loc 1 262 0
 205 009a CC7A     		ldrb	r4, [r1, #11]
 206 009c 0422     		mov	r2, #4
 207 009e 012C     		cmp	r4, #1
 208 00a0 02D1     		bne	.L17
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 209              		.loc 1 264 0
 210 00a2 1868     		ldr	r0, [r3]
 211 00a4 0243     		orr	r2, r0
 212 00a6 02E0     		b	.L29
 213              	.L17:
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 214              		.loc 1 268 0
 215 00a8 1C68     		ldr	r4, [r3]
 216 00aa 9443     		bic	r4, r2
 217 00ac 221C     		mov	r2, r4
 218              	.L29:
 219 00ae 1A60     		str	r2, [r3]
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 220              		.loc 1 273 0
 221 00b0 CA78     		ldrb	r2, [r1, #3]
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 222              		.loc 1 272 0
 223 00b2 8C78     		ldrb	r4, [r1, #2]
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 224              		.loc 1 273 0
 225 00b4 1006     		lsl	r0, r2, #24
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 226              		.loc 1 272 0
 227 00b6 A407     		lsl	r4, r4, #30
 228 00b8 0443     		orr	r4, r0
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 229              		.loc 1 274 0
 230 00ba 0879     		ldrb	r0, [r1, #4]
 231 00bc 0204     		lsl	r2, r0, #16
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 232              		.loc 1 275 0
 233 00be 4879     		ldrb	r0, [r1, #5]
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 234              		.loc 1 276 0
 235 00c0 0988     		ldrh	r1, [r1]
 236              	.LVL7:
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 237              		.loc 1 273 0
 238 00c2 1443     		orr	r4, r2
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 239              		.loc 1 275 0
 240 00c4 0205     		lsl	r2, r0, #20
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 241              		.loc 1 274 0
 242 00c6 1443     		orr	r4, r2
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 243              		.loc 1 276 0
 244 00c8 0139     		sub	r1, r1, #1
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 245              		.loc 1 275 0
 246 00ca 0C43     		orr	r4, r1
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 247              		.loc 1 272 0
 248 00cc DC61     		str	r4, [r3, #28]
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 249              		.loc 1 279 0
 250 00ce 1A68     		ldr	r2, [r3]
 251 00d0 0120     		mov	r0, #1
 252 00d2 8243     		bic	r2, r0
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == (uint16_t)CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 253              		.loc 1 284 0
 254 00d4 8021     		mov	r1, #128
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 255              		.loc 1 279 0
 256 00d6 1A60     		str	r2, [r3]
 257              	.LVL8:
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == (uint16_t)CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 258              		.loc 1 284 0
 259 00d8 4A04     		lsl	r2, r1, #17
 260              	.LVL9:
 261              	.L20:
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == (uint16_t)CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 262              		.loc 1 284 0 is_stmt 0 discriminator 1
 263 00da 5868     		ldr	r0, [r3, #4]
 264 00dc 0121     		mov	r1, #1
 265 00de 0842     		tst	r0, r1
 266 00e0 02D0     		beq	.L19
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == (uint16_t)CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 267              		.loc 1 284 0 discriminator 2
 268 00e2 013A     		sub	r2, r2, #1
 269 00e4 002A     		cmp	r2, #0
 270 00e6 F8D1     		bne	.L20
 271              	.L19:
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 272              		.loc 1 290 0 is_stmt 1
 273 00e8 5B68     		ldr	r3, [r3, #4]
 274              	.LVL10:
 275 00ea 1940     		and	r1, r3
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
 276              		.loc 1 207 0
 277 00ec 4842     		neg	r0, r1
 278 00ee 4841     		adc	r0, r0, r1
 279              	.L6:
 280              	.LVL11:
 281              		@ sp needed for prologue
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 282              		.loc 1 302 0
 283 00f0 10BD     		pop	{r4, pc}
 284              		.cfi_endproc
 285              	.LFE34:
 287              		.section	.text.CAN_FilterInit,"ax",%progbits
 288              		.align	1
 289              		.global	CAN_FilterInit
 290              		.code	16
 291              		.thumb_func
 293              	CAN_FilterInit:
 294              	.LFB35:
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 295              		.loc 1 312 0
 296              		.cfi_startproc
 297 0000 70B5     		push	{r4, r5, r6, lr}
 298              	.LCFI2:
 299              		.cfi_def_cfa_offset 16
 300              		.cfi_offset 4, -16
 301              		.cfi_offset 5, -12
 302              		.cfi_offset 6, -8
 303              		.cfi_offset 14, -4
 304              	.LVL12:
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 305              		.loc 1 321 0
 306 0002 827A     		ldrb	r2, [r0, #10]
 307 0004 0124     		mov	r4, #1
 308 0006 231C     		mov	r3, r4
 309 0008 9340     		lsl	r3, r3, r2
 310 000a 1A1C     		mov	r2, r3
 311              	.LVL13:
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR |= FMR_FINIT;
 312              		.loc 1 324 0
 313 000c 8021     		mov	r1, #128
 314 000e 334B     		ldr	r3, .L39
 315              	.LVL14:
 316 0010 8E00     		lsl	r6, r1, #2
 317 0012 9D59     		ldr	r5, [r3, r6]
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FA1R &= ~(uint32_t)filter_number_bit_pos;
 318              		.loc 1 327 0
 319 0014 8721     		mov	r1, #135
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR |= FMR_FINIT;
 320              		.loc 1 324 0
 321 0016 2C43     		orr	r4, r5
 322 0018 9C51     		str	r4, [r3, r6]
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FA1R &= ~(uint32_t)filter_number_bit_pos;
 323              		.loc 1 327 0
 324 001a 8E00     		lsl	r6, r1, #2
 325 001c 9D59     		ldr	r5, [r3, r6]
 326 001e D143     		mvn	r1, r2
 327 0020 0D40     		and	r5, r1
 328 0022 9D51     		str	r5, [r3, r6]
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 329              		.loc 1 330 0
 330 0024 047B     		ldrb	r4, [r0, #12]
 331 0026 002C     		cmp	r4, #0
 332 0028 15D1     		bne	.L31
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FS1R &= ~(uint32_t)filter_number_bit_pos;
 333              		.loc 1 333 0
 334 002a 8325     		mov	r5, #131
 335 002c AC00     		lsl	r4, r5, #2
 336 002e 1E59     		ldr	r6, [r3, r4]
 337 0030 0E40     		and	r6, r1
 338 0032 1E51     		str	r6, [r3, r4]
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 339              		.loc 1 337 0
 340 0034 847A     		ldrb	r4, [r0, #10]
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 341              		.loc 1 338 0
 342 0036 C588     		ldrh	r5, [r0, #6]
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 343              		.loc 1 339 0
 344 0038 4688     		ldrh	r6, [r0, #2]
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 345              		.loc 1 338 0
 346 003a 2D04     		lsl	r5, r5, #16
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 347              		.loc 1 337 0
 348 003c 4834     		add	r4, r4, #72
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 349              		.loc 1 338 0
 350 003e 3543     		orr	r5, r6
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 351              		.loc 1 337 0
 352 0040 E400     		lsl	r4, r4, #3
 353 0042 E550     		str	r5, [r4, r3]
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 354              		.loc 1 344 0
 355 0044 8588     		ldrh	r5, [r0, #4]
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 356              		.loc 1 345 0
 357 0046 0688     		ldrh	r6, [r0]
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 358              		.loc 1 343 0
 359 0048 847A     		ldrb	r4, [r0, #10]
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 360              		.loc 1 344 0
 361 004a 2D04     		lsl	r5, r5, #16
 362 004c 3543     		orr	r5, r6
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 363              		.loc 1 343 0
 364 004e 244E     		ldr	r6, .L39+4
 365 0050 E400     		lsl	r4, r4, #3
 366 0052 A619     		add	r6, r4, r6
 367 0054 7560     		str	r5, [r6, #4]
 368              	.L31:
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 369              		.loc 1 348 0
 370 0056 047B     		ldrb	r4, [r0, #12]
 371 0058 012C     		cmp	r4, #1
 372 005a 15D1     		bne	.L32
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FS1R |= filter_number_bit_pos;
 373              		.loc 1 351 0
 374 005c 8325     		mov	r5, #131
 375 005e AC00     		lsl	r4, r5, #2
 376 0060 1E59     		ldr	r6, [r3, r4]
 377 0062 1643     		orr	r6, r2
 378 0064 1E51     		str	r6, [r3, r4]
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 379              		.loc 1 353 0
 380 0066 847A     		ldrb	r4, [r0, #10]
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 381              		.loc 1 354 0
 382 0068 0588     		ldrh	r5, [r0]
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 383              		.loc 1 355 0
 384 006a 4688     		ldrh	r6, [r0, #2]
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 385              		.loc 1 354 0
 386 006c 2D04     		lsl	r5, r5, #16
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 387              		.loc 1 353 0
 388 006e 4834     		add	r4, r4, #72
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 389              		.loc 1 354 0
 390 0070 3543     		orr	r5, r6
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 391              		.loc 1 353 0
 392 0072 E400     		lsl	r4, r4, #3
 393 0074 1D51     		str	r5, [r3, r4]
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 394              		.loc 1 358 0
 395 0076 8588     		ldrh	r5, [r0, #4]
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 396              		.loc 1 359 0
 397 0078 C688     		ldrh	r6, [r0, #6]
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 398              		.loc 1 357 0
 399 007a 847A     		ldrb	r4, [r0, #10]
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 400              		.loc 1 358 0
 401 007c 2D04     		lsl	r5, r5, #16
 402 007e 3543     		orr	r5, r6
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 403              		.loc 1 357 0
 404 0080 174E     		ldr	r6, .L39+4
 405 0082 E400     		lsl	r4, r4, #3
 406 0084 A619     		add	r6, r4, r6
 407 0086 7560     		str	r5, [r6, #4]
 408              	.L32:
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 409              		.loc 1 363 0
 410 0088 C67A     		ldrb	r6, [r0, #11]
 411 008a 8124     		mov	r4, #129
 412 008c A400     		lsl	r4, r4, #2
 413 008e 002E     		cmp	r6, #0
 414 0090 02D1     		bne	.L33
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FM1R &= ~(uint32_t)filter_number_bit_pos;
 415              		.loc 1 366 0
 416 0092 1D59     		ldr	r5, [r3, r4]
 417 0094 0D40     		and	r5, r1
 418 0096 01E0     		b	.L38
 419              	.L33:
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FM1R |= (uint32_t)filter_number_bit_pos;
 420              		.loc 1 371 0
 421 0098 1D59     		ldr	r5, [r3, r4]
 422 009a 1543     		orr	r5, r2
 423              	.L38:
 424 009c 1D51     		str	r5, [r3, r4]
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 425              		.loc 1 375 0
 426 009e 0489     		ldrh	r4, [r0, #8]
 427 00a0 002C     		cmp	r4, #0
 428 00a2 05D1     		bne	.L35
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 429              		.loc 1 378 0
 430 00a4 8524     		mov	r4, #133
 431 00a6 A600     		lsl	r6, r4, #2
 432 00a8 9D59     		ldr	r5, [r3, r6]
 433 00aa 2940     		and	r1, r5
 434 00ac 9951     		str	r1, [r3, r6]
 435 00ae 06E0     		b	.L36
 436              	.L35:
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 437              		.loc 1 381 0
 438 00b0 012C     		cmp	r4, #1
 439 00b2 04D1     		bne	.L36
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FFA1R |= (uint32_t)filter_number_bit_pos;
 440              		.loc 1 384 0
 441 00b4 8525     		mov	r5, #133
 442 00b6 A900     		lsl	r1, r5, #2
 443 00b8 5E58     		ldr	r6, [r3, r1]
 444 00ba 1643     		orr	r6, r2
 445 00bc 5E50     		str	r6, [r3, r1]
 446              	.L36:
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 447              		.loc 1 388 0
 448 00be 407B     		ldrb	r0, [r0, #13]
 449              	.LVL15:
 450 00c0 0128     		cmp	r0, #1
 451 00c2 04D1     		bne	.L37
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CAN->FA1R |= filter_number_bit_pos;
 452              		.loc 1 390 0
 453 00c4 8726     		mov	r6, #135
 454 00c6 B400     		lsl	r4, r6, #2
 455 00c8 1959     		ldr	r1, [r3, r4]
 456 00ca 0A43     		orr	r2, r1
 457              	.LVL16:
 458 00cc 1A51     		str	r2, [r3, r4]
 459              	.L37:
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR &= ~FMR_FINIT;
 460              		.loc 1 394 0
 461 00ce 8024     		mov	r4, #128
 462 00d0 A200     		lsl	r2, r4, #2
 463 00d2 9D58     		ldr	r5, [r3, r2]
 464 00d4 0120     		mov	r0, #1
 465 00d6 8543     		bic	r5, r0
 466 00d8 9D50     		str	r5, [r3, r2]
 467              		@ sp needed for prologue
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 468              		.loc 1 395 0
 469 00da 70BD     		pop	{r4, r5, r6, pc}
 470              	.L40:
 471              		.align	2
 472              	.L39:
 473 00dc 00640040 		.word	1073767424
 474 00e0 40660040 		.word	1073768000
 475              		.cfi_endproc
 476              	.LFE35:
 478              		.section	.text.CAN_StructInit,"ax",%progbits
 479              		.align	1
 480              		.global	CAN_StructInit
 481              		.code	16
 482              		.thumb_func
 484              	CAN_StructInit:
 485              	.LFB36:
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 486              		.loc 1 403 0
 487              		.cfi_startproc
 488              	.LVL17:
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 489              		.loc 1 407 0
 490 0000 0023     		mov	r3, #0
 491 0002 8371     		strb	r3, [r0, #6]
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 492              		.loc 1 410 0
 493 0004 C371     		strb	r3, [r0, #7]
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 494              		.loc 1 413 0
 495 0006 0372     		strb	r3, [r0, #8]
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 496              		.loc 1 416 0
 497 0008 4372     		strb	r3, [r0, #9]
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 498              		.loc 1 419 0
 499 000a 8372     		strb	r3, [r0, #10]
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 500              		.loc 1 422 0
 501 000c C372     		strb	r3, [r0, #11]
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 502              		.loc 1 425 0
 503 000e 8370     		strb	r3, [r0, #2]
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 504              		.loc 1 428 0
 505 0010 C370     		strb	r3, [r0, #3]
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 506              		.loc 1 431 0
 507 0012 0322     		mov	r2, #3
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 508              		.loc 1 434 0
 509 0014 0221     		mov	r1, #2
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 510              		.loc 1 437 0
 511 0016 0123     		mov	r3, #1
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 512              		.loc 1 431 0
 513 0018 0271     		strb	r2, [r0, #4]
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 514              		.loc 1 434 0
 515 001a 4171     		strb	r1, [r0, #5]
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 516              		.loc 1 437 0
 517 001c 0380     		strh	r3, [r0]
 518              		@ sp needed for prologue
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 519              		.loc 1 438 0
 520 001e 7047     		bx	lr
 521              		.cfi_endproc
 522              	.LFE36:
 524              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 525              		.align	1
 526              		.global	CAN_SlaveStartBank
 527              		.code	16
 528              		.thumb_func
 530              	CAN_SlaveStartBank:
 531              	.LFB37:
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 532              		.loc 1 446 0
 533              		.cfi_startproc
 534 0000 30B5     		push	{r4, r5, lr}
 535              	.LCFI3:
 536              		.cfi_def_cfa_offset 12
 537              		.cfi_offset 4, -12
 538              		.cfi_offset 5, -8
 539              		.cfi_offset 14, -4
 540              	.LVL18:
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR |= FMR_FINIT;
 541              		.loc 1 451 0
 542 0002 094A     		ldr	r2, .L43
 543 0004 8023     		mov	r3, #128
 544 0006 9B00     		lsl	r3, r3, #2
 545 0008 D458     		ldr	r4, [r2, r3]
 546 000a 0121     		mov	r1, #1
 547 000c 0C43     		orr	r4, r1
 548 000e D450     		str	r4, [r2, r3]
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR &= (uint32_t)0xFFFFC0F1 ;
 549              		.loc 1 454 0
 550 0010 D558     		ldr	r5, [r2, r3]
 551 0012 064C     		ldr	r4, .L43+4
 552              		@ sp needed for prologue
 553 0014 2C40     		and	r4, r5
 554 0016 D450     		str	r4, [r2, r3]
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 555              		.loc 1 455 0
 556 0018 D458     		ldr	r4, [r2, r3]
 557 001a 0502     		lsl	r5, r0, #8
 558 001c 2543     		orr	r5, r4
 559 001e D550     		str	r5, [r2, r3]
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CAN->FMR &= ~FMR_FINIT;
 560              		.loc 1 458 0
 561 0020 D058     		ldr	r0, [r2, r3]
 562              	.LVL19:
 563 0022 8843     		bic	r0, r1
 564 0024 D050     		str	r0, [r2, r3]
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 565              		.loc 1 459 0
 566 0026 30BD     		pop	{r4, r5, pc}
 567              	.L44:
 568              		.align	2
 569              	.L43:
 570 0028 00640040 		.word	1073767424
 571 002c F1C0FFFF 		.word	-16143
 572              		.cfi_endproc
 573              	.LFE37:
 575              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 576              		.align	1
 577              		.global	CAN_DBGFreeze
 578              		.code	16
 579              		.thumb_func
 581              	CAN_DBGFreeze:
 582              	.LFB38:
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 583              		.loc 1 471 0
 584              		.cfi_startproc
 585 0000 00B5     		push	{lr}
 586              	.LCFI4:
 587              		.cfi_def_cfa_offset 4
 588              		.cfi_offset 14, -4
 589              	.LVL20:
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR |= MCR_DBF;
 590              		.loc 1 479 0
 591 0002 0268     		ldr	r2, [r0]
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (NewState != DISABLE)
 592              		.loc 1 476 0
 593 0004 0029     		cmp	r1, #0
 594 0006 03D0     		beq	.L46
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR |= MCR_DBF;
 595              		.loc 1 479 0
 596 0008 8023     		mov	r3, #128
 597 000a 5B02     		lsl	r3, r3, #9
 598 000c 1343     		orr	r3, r2
 599 000e 01E0     		b	.L48
 600              	.L46:
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 601              		.loc 1 484 0
 602 0010 014B     		ldr	r3, .L49
 603 0012 1340     		and	r3, r2
 604              	.L48:
 605 0014 0360     		str	r3, [r0]
 606              		@ sp needed for prologue
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 607              		.loc 1 486 0
 608 0016 00BD     		pop	{pc}
 609              	.L50:
 610              		.align	2
 611              	.L49:
 612 0018 FFFFFEFF 		.word	-65537
 613              		.cfi_endproc
 614              	.LFE38:
 616              		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 617              		.align	1
 618              		.global	CAN_TTComModeCmd
 619              		.code	16
 620              		.thumb_func
 622              	CAN_TTComModeCmd:
 623              	.LFB39:
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 624              		.loc 1 500 0
 625              		.cfi_startproc
 626 0000 00B5     		push	{lr}
 627              	.LCFI5:
 628              		.cfi_def_cfa_offset 4
 629              		.cfi_offset 14, -4
 630              	.LVL21:
 631 0002 C223     		mov	r3, #194
 632 0004 8022     		mov	r2, #128
 633 0006 5B00     		lsl	r3, r3, #1
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (NewState != DISABLE)
 634              		.loc 1 504 0
 635 0008 0029     		cmp	r1, #0
 636 000a 11D0     		beq	.L52
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 637              		.loc 1 507 0
 638 000c 0168     		ldr	r1, [r0]
 639              	.LVL22:
 640 000e 0A43     		orr	r2, r1
 641 0010 0260     		str	r2, [r0]
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 642              		.loc 1 510 0
 643 0012 C158     		ldr	r1, [r0, r3]
 644 0014 8022     		mov	r2, #128
 645 0016 5200     		lsl	r2, r2, #1
 646 0018 1143     		orr	r1, r2
 647 001a C150     		str	r1, [r0, r3]
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 648              		.loc 1 511 0
 649 001c CA21     		mov	r1, #202
 650 001e 4B00     		lsl	r3, r1, #1
 651 0020 C158     		ldr	r1, [r0, r3]
 652 0022 1143     		orr	r1, r2
 653 0024 C150     		str	r1, [r0, r3]
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 654              		.loc 1 512 0
 655 0026 D223     		mov	r3, #210
 656 0028 5B00     		lsl	r3, r3, #1
 657 002a C158     		ldr	r1, [r0, r3]
 658 002c 0A43     		orr	r2, r1
 659 002e 0FE0     		b	.L54
 660              	.LVL23:
 661              	.L52:
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 662              		.loc 1 517 0
 663 0030 0168     		ldr	r1, [r0]
 664              	.LVL24:
 665 0032 9143     		bic	r1, r2
 666 0034 0160     		str	r1, [r0]
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 667              		.loc 1 520 0
 668 0036 C158     		ldr	r1, [r0, r3]
 669 0038 064A     		ldr	r2, .L55
 670 003a 1140     		and	r1, r2
 671 003c C150     		str	r1, [r0, r3]
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 672              		.loc 1 521 0
 673 003e CA21     		mov	r1, #202
 674 0040 4B00     		lsl	r3, r1, #1
 675 0042 C158     		ldr	r1, [r0, r3]
 676 0044 1140     		and	r1, r2
 677 0046 C150     		str	r1, [r0, r3]
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 678              		.loc 1 522 0
 679 0048 D223     		mov	r3, #210
 680 004a 5B00     		lsl	r3, r3, #1
 681 004c C158     		ldr	r1, [r0, r3]
 682 004e 0A40     		and	r2, r1
 683              	.L54:
 684 0050 C250     		str	r2, [r0, r3]
 685              		@ sp needed for prologue
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 686              		.loc 1 524 0
 687 0052 00BD     		pop	{pc}
 688              	.L56:
 689              		.align	2
 690              	.L55:
 691 0054 FFFEFFFF 		.word	-257
 692              		.cfi_endproc
 693              	.LFE39:
 695              		.section	.text.CAN_Transmit,"ax",%progbits
 696              		.align	1
 697              		.global	CAN_Transmit
 698              		.code	16
 699              		.thumb_func
 701              	CAN_Transmit:
 702              	.LFB40:
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 703              		.loc 1 554 0
 704              		.cfi_startproc
 705 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 706              	.LCFI6:
 707              		.cfi_def_cfa_offset 20
 708              		.cfi_offset 4, -20
 709              		.cfi_offset 5, -16
 710              		.cfi_offset 6, -12
 711              		.cfi_offset 7, -8
 712              		.cfi_offset 14, -4
 713              	.LVL25:
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 714              		.loc 1 563 0
 715 0002 8268     		ldr	r2, [r0, #8]
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 716              		.loc 1 554 0
 717 0004 031C     		mov	r3, r0
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 0;
 718              		.loc 1 565 0
 719 0006 0020     		mov	r0, #0
 720              	.LVL26:
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 721              		.loc 1 563 0
 722 0008 5401     		lsl	r4, r2, #5
 723 000a 08D4     		bmi	.L58
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 724              		.loc 1 567 0
 725 000c 9C68     		ldr	r4, [r3, #8]
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 1;
 726              		.loc 1 569 0
 727 000e 0120     		mov	r0, #1
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 728              		.loc 1 567 0
 729 0010 2401     		lsl	r4, r4, #4
 730 0012 04D4     		bmi	.L58
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 731              		.loc 1 571 0
 732 0014 9D68     		ldr	r5, [r3, #8]
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 733              		.loc 1 577 0
 734 0016 0420     		mov	r0, #4
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 735              		.loc 1 571 0
 736 0018 EC00     		lsl	r4, r5, #3
 737 001a 44D5     		bpl	.L59
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     transmit_mailbox = 2;
 738              		.loc 1 573 0
 739 001c 0220     		mov	r0, #2
 740              	.L58:
 741              	.LVL27:
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 742              		.loc 1 583 0
 743 001e 021C     		mov	r2, r0
 744 0020 1832     		add	r2, r2, #24
 745 0022 1201     		lsl	r2, r2, #4
 746 0024 D758     		ldr	r7, [r2, r3]
 747 0026 0126     		mov	r6, #1
 748 0028 3E40     		and	r6, r7
 749 002a D650     		str	r6, [r2, r3]
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 750              		.loc 1 584 0
 751 002c 0D7A     		ldrb	r5, [r1, #8]
 752 002e 4C7A     		ldrb	r4, [r1, #9]
 753 0030 002D     		cmp	r5, #0
 754 0032 04D1     		bne	.L60
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 755              		.loc 1 587 0
 756 0034 0F68     		ldr	r7, [r1]
 757 0036 D558     		ldr	r5, [r2, r3]
 758 0038 7E05     		lsl	r6, r7, #21
 759 003a 3443     		orr	r4, r6
 760 003c 04E0     		b	.L65
 761              	.L60:
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 762              		.loc 1 593 0
 763 003e 4F68     		ldr	r7, [r1, #4]
 764 0040 D658     		ldr	r6, [r2, r3]
 765 0042 FF00     		lsl	r7, r7, #3
 766 0044 3D43     		orr	r5, r7
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                                   TxMessage->IDE | \
 767              		.loc 1 594 0
 768 0046 3543     		orr	r5, r6
 769              	.L65:
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 770              		.loc 1 593 0
 771 0048 2C43     		orr	r4, r5
 772 004a D450     		str	r4, [r2, r3]
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 773              		.loc 1 599 0
 774 004c 8A7A     		ldrb	r2, [r1, #10]
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 775              		.loc 1 600 0
 776 004e 041C     		mov	r4, r0
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 777              		.loc 1 599 0
 778 0050 0F26     		mov	r6, #15
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 779              		.loc 1 600 0
 780 0052 1834     		add	r4, r4, #24
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 781              		.loc 1 599 0
 782 0054 3240     		and	r2, r6
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 783              		.loc 1 600 0
 784 0056 2401     		lsl	r4, r4, #4
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 785              		.loc 1 599 0
 786 0058 8A72     		strb	r2, [r1, #10]
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 787              		.loc 1 600 0
 788 005a 1A19     		add	r2, r3, r4
 789 005c 5768     		ldr	r7, [r2, #4]
 790 005e B743     		bic	r7, r6
 791 0060 5760     		str	r7, [r2, #4]
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 792              		.loc 1 601 0
 793 0062 5768     		ldr	r7, [r2, #4]
 794 0064 8E7A     		ldrb	r6, [r1, #10]
 795 0066 3743     		orr	r7, r6
 796 0068 5760     		str	r7, [r2, #4]
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 797              		.loc 1 605 0
 798 006a 4E7B     		ldrb	r6, [r1, #13]
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 799              		.loc 1 604 0
 800 006c 8D7B     		ldrb	r5, [r1, #14]
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 801              		.loc 1 607 0
 802 006e CA7A     		ldrb	r2, [r1, #11]
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 803              		.loc 1 605 0
 804 0070 3704     		lsl	r7, r6, #16
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 805              		.loc 1 604 0
 806 0072 2D06     		lsl	r5, r5, #24
 807 0074 3D43     		orr	r5, r7
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 808              		.loc 1 606 0
 809 0076 0E7B     		ldrb	r6, [r1, #12]
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 810              		.loc 1 605 0
 811 0078 1543     		orr	r5, r2
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 812              		.loc 1 604 0
 813 007a 0201     		lsl	r2, r0, #4
 814 007c 9A18     		add	r2, r3, r2
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 815              		.loc 1 606 0
 816 007e 3702     		lsl	r7, r6, #8
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 817              		.loc 1 604 0
 818 0080 8932     		add	r2, r2, #137
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 819              		.loc 1 606 0
 820 0082 3D43     		orr	r5, r7
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 821              		.loc 1 604 0
 822 0084 FF32     		add	r2, r2, #255
 823 0086 1560     		str	r5, [r2]
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 824              		.loc 1 609 0
 825 0088 4F7C     		ldrb	r7, [r1, #17]
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 826              		.loc 1 608 0
 827 008a 8E7C     		ldrb	r6, [r1, #18]
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 828              		.loc 1 609 0
 829 008c 3D04     		lsl	r5, r7, #16
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 830              		.loc 1 608 0
 831 008e 3606     		lsl	r6, r6, #24
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 832              		.loc 1 611 0
 833 0090 CF7B     		ldrb	r7, [r1, #15]
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 834              		.loc 1 608 0
 835 0092 2E43     		orr	r6, r5
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 836              		.loc 1 610 0
 837 0094 0D7C     		ldrb	r5, [r1, #16]
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 838              		.loc 1 609 0
 839 0096 3E43     		orr	r6, r7
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 840              		.loc 1 610 0
 841 0098 2F02     		lsl	r7, r5, #8
 842 009a 3E43     		orr	r6, r7
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 843              		.loc 1 608 0
 844 009c 5660     		str	r6, [r2, #4]
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 845              		.loc 1 613 0
 846 009e E558     		ldr	r5, [r4, r3]
 847 00a0 0121     		mov	r1, #1
 848              	.LVL28:
 849 00a2 0D43     		orr	r5, r1
 850 00a4 E550     		str	r5, [r4, r3]
 851              	.LVL29:
 852              	.L59:
 853              		@ sp needed for prologue
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 854              		.loc 1 616 0
 855 00a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 856              		.cfi_endproc
 857              	.LFE40:
 859              		.section	.text.CAN_TransmitStatus,"ax",%progbits
 860              		.align	1
 861              		.global	CAN_TransmitStatus
 862              		.code	16
 863              		.thumb_func
 865              	CAN_TransmitStatus:
 866              	.LFB41:
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 867              		.loc 1 626 0
 868              		.cfi_startproc
 869 0000 00B5     		push	{lr}
 870              	.LCFI7:
 871              		.cfi_def_cfa_offset 4
 872              		.cfi_offset 14, -4
 873              	.LVL30:
 874 0002 124A     		ldr	r2, .L82
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (TransmitMailbox)
 875              		.loc 1 633 0
 876 0004 0129     		cmp	r1, #1
 877 0006 08D0     		beq	.L69
 878 0008 0029     		cmp	r1, #0
 879 000a 03D0     		beq	.L68
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state = CAN_TxStatus_Failed;
 880              		.loc 1 645 0
 881 000c 0023     		mov	r3, #0
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (TransmitMailbox)
 882              		.loc 1 633 0
 883 000e 0229     		cmp	r1, #2
 884 0010 09D1     		bne	.L67
 885 0012 05E0     		b	.L81
 886              	.L68:
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 887              		.loc 1 636 0
 888 0014 8368     		ldr	r3, [r0, #8]
 889 0016 1340     		and	r3, r2
 890              	.LVL31:
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 891              		.loc 1 637 0
 892 0018 05E0     		b	.L67
 893              	.LVL32:
 894              	.L69:
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 895              		.loc 1 639 0
 896 001a 8168     		ldr	r1, [r0, #8]
 897              	.LVL33:
 898 001c 0C4B     		ldr	r3, .L82+4
 899 001e 01E0     		b	.L80
 900              	.LVL34:
 901              	.L81:
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 902              		.loc 1 642 0
 903 0020 8168     		ldr	r1, [r0, #8]
 904              	.LVL35:
 905 0022 0C4B     		ldr	r3, .L82+8
 906              	.L80:
 907 0024 0B40     		and	r3, r1
 908              	.LVL36:
 909              	.L67:
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 910              		.loc 1 661 0
 911 0026 0120     		mov	r0, #1
 912              	.LVL37:
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (state)
 913              		.loc 1 648 0
 914 0028 9342     		cmp	r3, r2
 915 002a 0DD0     		beq	.L71
 916 002c 074A     		ldr	r2, .L82
 917 002e 9342     		cmp	r3, r2
 918 0030 03D8     		bhi	.L76
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 919              		.loc 1 651 0
 920 0032 0220     		mov	r0, #2
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (state)
 921              		.loc 1 648 0
 922 0034 002B     		cmp	r3, #0
 923 0036 07D0     		beq	.L71
 924 0038 05E0     		b	.L78
 925              	.L76:
 926 003a 0549     		ldr	r1, .L82+4
 927 003c 8B42     		cmp	r3, r1
 928 003e 03D0     		beq	.L71
 929 0040 044A     		ldr	r2, .L82+8
 930 0042 9342     		cmp	r3, r2
 931 0044 00D0     		beq	.L71
 932              	.L78:
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 933              		.loc 1 654 0
 934 0046 0020     		mov	r0, #0
 935              	.L71:
 936              	.LVL38:
 937              		@ sp needed for prologue
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 938              		.loc 1 671 0
 939 0048 00BD     		pop	{pc}
 940              	.L83:
 941 004a C046     		.align	2
 942              	.L82:
 943 004c 03000004 		.word	67108867
 944 0050 00030008 		.word	134218496
 945 0054 00000310 		.word	268632064
 946              		.cfi_endproc
 947              	.LFE41:
 949              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 950              		.align	1
 951              		.global	CAN_CancelTransmit
 952              		.code	16
 953              		.thumb_func
 955              	CAN_CancelTransmit:
 956              	.LFB42:
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 957              		.loc 1 680 0
 958              		.cfi_startproc
 959 0000 00B5     		push	{lr}
 960              	.LCFI8:
 961              		.cfi_def_cfa_offset 4
 962              		.cfi_offset 14, -4
 963              	.LVL39:
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (Mailbox)
 964              		.loc 1 685 0
 965 0002 0129     		cmp	r1, #1
 966 0004 07D0     		beq	.L87
 967 0006 0029     		cmp	r1, #0
 968 0008 02D0     		beq	.L86
 969 000a 0229     		cmp	r1, #2
 970 000c 0CD1     		bne	.L84
 971 000e 06E0     		b	.L90
 972              	.L86:
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 973              		.loc 1 687 0
 974 0010 8368     		ldr	r3, [r0, #8]
 975 0012 8022     		mov	r2, #128
 976 0014 06E0     		b	.L89
 977              	.L87:
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 978              		.loc 1 689 0
 979 0016 8023     		mov	r3, #128
 980 0018 8268     		ldr	r2, [r0, #8]
 981 001a 1B02     		lsl	r3, r3, #8
 982 001c 02E0     		b	.L89
 983              	.L90:
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 984              		.loc 1 691 0
 985 001e 8021     		mov	r1, #128
 986              	.LVL40:
 987 0020 8268     		ldr	r2, [r0, #8]
 988 0022 0B04     		lsl	r3, r1, #16
 989              	.L89:
 990 0024 1343     		orr	r3, r2
 991 0026 8360     		str	r3, [r0, #8]
 992              	.L84:
 993              		@ sp needed for prologue
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 994              		.loc 1 696 0
 995 0028 00BD     		pop	{pc}
 996              		.cfi_endproc
 997              	.LFE42:
 999              		.section	.text.CAN_Receive,"ax",%progbits
 1000              		.align	1
 1001              		.global	CAN_Receive
 1002              		.code	16
 1003              		.thumb_func
 1005              	CAN_Receive:
 1006              	.LFB43:
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1007              		.loc 1 727 0
 1008              		.cfi_startproc
 1009 0000 70B5     		push	{r4, r5, r6, lr}
 1010              	.LCFI9:
 1011              		.cfi_def_cfa_offset 16
 1012              		.cfi_offset 4, -16
 1013              		.cfi_offset 5, -12
 1014              		.cfi_offset 6, -8
 1015              		.cfi_offset 14, -4
 1016              	.LVL41:
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 1017              		.loc 1 732 0
 1018 0002 0C1C     		mov	r4, r1
 1019 0004 1B34     		add	r4, r4, #27
 1020 0006 2301     		lsl	r3, r4, #4
 1021 0008 1E58     		ldr	r6, [r3, r0]
 1022 000a 0425     		mov	r5, #4
 1023 000c 3540     		and	r5, r6
 1024 000e 1572     		strb	r5, [r2, #8]
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 1025              		.loc 1 735 0
 1026 0010 1B58     		ldr	r3, [r3, r0]
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1027              		.loc 1 733 0
 1028 0012 02D1     		bne	.L92
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 1029              		.loc 1 735 0
 1030 0014 5D0D     		lsr	r5, r3, #21
 1031 0016 1560     		str	r5, [r2]
 1032 0018 01E0     		b	.L93
 1033              	.L92:
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 1034              		.loc 1 739 0
 1035 001a DB08     		lsr	r3, r3, #3
 1036 001c 5360     		str	r3, [r2, #4]
 1037              	.L93:
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 1038              		.loc 1 742 0
 1039 001e 2601     		lsl	r6, r4, #4
 1040 0020 3358     		ldr	r3, [r6, r0]
 1041 0022 0224     		mov	r4, #2
 1042 0024 1C40     		and	r4, r3
 1043 0026 5472     		strb	r4, [r2, #9]
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 1044              		.loc 1 744 0
 1045 0028 8619     		add	r6, r0, r6
 1046 002a 7568     		ldr	r5, [r6, #4]
 1047 002c 0F23     		mov	r3, #15
 1048 002e 2B40     		and	r3, r5
 1049 0030 9372     		strb	r3, [r2, #10]
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 1050              		.loc 1 746 0
 1051 0032 7468     		ldr	r4, [r6, #4]
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 1052              		.loc 1 748 0
 1053 0034 0D01     		lsl	r5, r1, #4
 1054 0036 4519     		add	r5, r0, r5
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 1055              		.loc 1 746 0
 1056 0038 230A     		lsr	r3, r4, #8
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 1057              		.loc 1 748 0
 1058 003a B935     		add	r5, r5, #185
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 1059              		.loc 1 746 0
 1060 003c D374     		strb	r3, [r2, #19]
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 1061              		.loc 1 748 0
 1062 003e FF35     		add	r5, r5, #255
 1063 0040 2E68     		ldr	r6, [r5]
 1064 0042 D672     		strb	r6, [r2, #11]
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1065              		.loc 1 749 0
 1066 0044 2C68     		ldr	r4, [r5]
 1067 0046 230A     		lsr	r3, r4, #8
 1068 0048 1373     		strb	r3, [r2, #12]
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1069              		.loc 1 750 0
 1070 004a 2E68     		ldr	r6, [r5]
 1071 004c 340C     		lsr	r4, r6, #16
 1072 004e 5473     		strb	r4, [r2, #13]
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1073              		.loc 1 751 0
 1074 0050 2B68     		ldr	r3, [r5]
 1075 0052 1E0E     		lsr	r6, r3, #24
 1076 0054 9673     		strb	r6, [r2, #14]
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1077              		.loc 1 752 0
 1078 0056 6C68     		ldr	r4, [r5, #4]
 1079 0058 D473     		strb	r4, [r2, #15]
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1080              		.loc 1 753 0
 1081 005a 6B68     		ldr	r3, [r5, #4]
 1082 005c 1E0A     		lsr	r6, r3, #8
 1083 005e 1674     		strb	r6, [r2, #16]
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1084              		.loc 1 754 0
 1085 0060 6C68     		ldr	r4, [r5, #4]
 1086 0062 230C     		lsr	r3, r4, #16
 1087 0064 5374     		strb	r3, [r2, #17]
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1088              		.loc 1 755 0
 1089 0066 6E68     		ldr	r6, [r5, #4]
 1090 0068 2023     		mov	r3, #32
 1091 006a 340E     		lsr	r4, r6, #24
 1092 006c 9474     		strb	r4, [r2, #18]
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1093              		.loc 1 758 0
 1094 006e 0029     		cmp	r1, #0
 1095 0070 03D1     		bne	.L94
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 1096              		.loc 1 760 0
 1097 0072 C268     		ldr	r2, [r0, #12]
 1098              	.LVL42:
 1099 0074 1343     		orr	r3, r2
 1100 0076 C360     		str	r3, [r0, #12]
 1101 0078 02E0     		b	.L91
 1102              	.LVL43:
 1103              	.L94:
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 1104              		.loc 1 765 0
 1105 007a 0169     		ldr	r1, [r0, #16]
 1106              	.LVL44:
 1107 007c 0B43     		orr	r3, r1
 1108 007e 0361     		str	r3, [r0, #16]
 1109              	.LVL45:
 1110              	.L91:
 1111              		@ sp needed for prologue
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1112              		.loc 1 767 0
 1113 0080 70BD     		pop	{r4, r5, r6, pc}
 1114              		.cfi_endproc
 1115              	.LFE43:
 1117              		.section	.text.CAN_FIFORelease,"ax",%progbits
 1118              		.align	1
 1119              		.global	CAN_FIFORelease
 1120              		.code	16
 1121              		.thumb_func
 1123              	CAN_FIFORelease:
 1124              	.LFB44:
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1125              		.loc 1 776 0
 1126              		.cfi_startproc
 1127 0000 00B5     		push	{lr}
 1128              	.LCFI10:
 1129              		.cfi_def_cfa_offset 4
 1130              		.cfi_offset 14, -4
 1131              	.LVL46:
 1132 0002 2023     		mov	r3, #32
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1133              		.loc 1 781 0
 1134 0004 0029     		cmp	r1, #0
 1135 0006 03D1     		bne	.L97
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF0R |= CAN_RF0R_RFOM0;
 1136              		.loc 1 783 0
 1137 0008 C268     		ldr	r2, [r0, #12]
 1138 000a 1343     		orr	r3, r2
 1139 000c C360     		str	r3, [r0, #12]
 1140 000e 02E0     		b	.L96
 1141              	.L97:
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->RF1R |= CAN_RF1R_RFOM1;
 1142              		.loc 1 788 0
 1143 0010 0169     		ldr	r1, [r0, #16]
 1144              	.LVL47:
 1145 0012 0B43     		orr	r3, r1
 1146 0014 0361     		str	r3, [r0, #16]
 1147              	.L96:
 1148              		@ sp needed for prologue
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1149              		.loc 1 790 0
 1150 0016 00BD     		pop	{pc}
 1151              		.cfi_endproc
 1152              	.LFE44:
 1154              		.section	.text.CAN_MessagePending,"ax",%progbits
 1155              		.align	1
 1156              		.global	CAN_MessagePending
 1157              		.code	16
 1158              		.thumb_func
 1160              	CAN_MessagePending:
 1161              	.LFB45:
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1162              		.loc 1 799 0
 1163              		.cfi_startproc
 1164 0000 00B5     		push	{lr}
 1165              	.LCFI11:
 1166              		.cfi_def_cfa_offset 4
 1167              		.cfi_offset 14, -4
 1168              	.LVL48:
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1169              		.loc 1 799 0
 1170 0002 031C     		mov	r3, r0
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1171              		.loc 1 804 0
 1172 0004 0029     		cmp	r1, #0
 1173 0006 01D1     		bne	.L100
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 1174              		.loc 1 806 0
 1175 0008 C068     		ldr	r0, [r0, #12]
 1176              	.LVL49:
 1177 000a 03E0     		b	.L103
 1178              	.L100:
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     message_pending = 0;
 1179              		.loc 1 814 0
 1180 000c 0020     		mov	r0, #0
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 1181              		.loc 1 808 0
 1182 000e 0129     		cmp	r1, #1
 1183 0010 02D1     		bne	.L101
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 1184              		.loc 1 810 0
 1185 0012 1869     		ldr	r0, [r3, #16]
 1186              	.L103:
 1187 0014 0323     		mov	r3, #3
 1188              	.LVL50:
 1189 0016 1840     		and	r0, r3
 1190              	.LVL51:
 1191              	.L101:
 1192              		@ sp needed for prologue
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1193              		.loc 1 817 0
 1194 0018 00BD     		pop	{pc}
 1195              		.cfi_endproc
 1196              	.LFE45:
 1198              		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
 1199              		.align	1
 1200              		.global	CAN_OperatingModeRequest
 1201              		.code	16
 1202              		.thumb_func
 1204              	CAN_OperatingModeRequest:
 1205              	.LFB46:
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1206              		.loc 1 849 0
 1207              		.cfi_startproc
 1208 0000 00B5     		push	{lr}
 1209              	.LCFI12:
 1210              		.cfi_def_cfa_offset 4
 1211              		.cfi_offset 14, -4
 1212              	.LVL52:
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1213              		.loc 1 849 0
 1214 0002 031C     		mov	r3, r0
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 1215              		.loc 1 859 0
 1216 0004 0029     		cmp	r1, #0
 1217 0006 13D1     		bne	.L105
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 1218              		.loc 1 862 0
 1219 0008 0068     		ldr	r0, [r0]
 1220              	.LVL53:
 1221 000a 0322     		mov	r2, #3
 1222 000c 9043     		bic	r0, r2
 1223 000e 0121     		mov	r1, #1
 1224              	.LVL54:
 1225 0010 0843     		orr	r0, r1
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 1226              		.loc 1 865 0
 1227 0012 8022     		mov	r2, #128
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 1228              		.loc 1 862 0
 1229 0014 1860     		str	r0, [r3]
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 1230              		.loc 1 865 0
 1231 0016 5204     		lsl	r2, r2, #17
 1232              	.LVL55:
 1233              	.L107:
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 1234              		.loc 1 865 0 is_stmt 0 discriminator 1
 1235 0018 5968     		ldr	r1, [r3, #4]
 1236 001a 0320     		mov	r0, #3
 1237 001c 0140     		and	r1, r0
 1238 001e 0129     		cmp	r1, #1
 1239 0020 02D0     		beq	.L106
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 1240              		.loc 1 865 0 discriminator 2
 1241 0022 013A     		sub	r2, r2, #1
 1242 0024 002A     		cmp	r2, #0
 1243 0026 F7D1     		bne	.L107
 1244              	.L106:
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 1245              		.loc 1 869 0 is_stmt 1
 1246 0028 5B68     		ldr	r3, [r3, #4]
 1247              	.LVL56:
 1248 002a 1840     		and	r0, r3
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Success;
 1249              		.loc 1 875 0
 1250 002c 0138     		sub	r0, r0, #1
 1251 002e 28E0     		b	.L118
 1252              	.LVL57:
 1253              	.L105:
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 1254              		.loc 1 878 0
 1255 0030 0129     		cmp	r1, #1
 1256 0032 11D1     		bne	.L109
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 1257              		.loc 1 881 0
 1258 0034 0268     		ldr	r2, [r0]
 1259 0036 0321     		mov	r1, #3
 1260              	.LVL58:
 1261 0038 8A43     		bic	r2, r1
 1262 003a 0260     		str	r2, [r0]
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 1263              		.loc 1 884 0
 1264 003c 8020     		mov	r0, #128
 1265              	.LVL59:
 1266 003e 4204     		lsl	r2, r0, #17
 1267              	.LVL60:
 1268              	.L111:
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 1269              		.loc 1 884 0 is_stmt 0 discriminator 1
 1270 0040 5868     		ldr	r0, [r3, #4]
 1271 0042 0321     		mov	r1, #3
 1272 0044 0842     		tst	r0, r1
 1273 0046 02D0     		beq	.L110
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 1274              		.loc 1 884 0 discriminator 2
 1275 0048 013A     		sub	r2, r2, #1
 1276 004a 002A     		cmp	r2, #0
 1277 004c F8D1     		bne	.L111
 1278              	.L110:
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 1279              		.loc 1 888 0 is_stmt 1
 1280 004e 5B68     		ldr	r3, [r3, #4]
 1281              	.LVL61:
 1282 0050 1940     		and	r1, r3
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Success;
 1283              		.loc 1 875 0
 1284 0052 4842     		neg	r0, r1
 1285 0054 4841     		adc	r0, r0, r1
 1286 0056 16E0     		b	.L108
 1287              	.LVL62:
 1288              	.L109:
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     status = CAN_ModeStatus_Failed;
 1289              		.loc 1 918 0
 1290 0058 0020     		mov	r0, #0
 1291              	.LVL63:
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 1292              		.loc 1 897 0
 1293 005a 0229     		cmp	r1, #2
 1294 005c 13D1     		bne	.L108
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 1295              		.loc 1 900 0
 1296 005e 1A68     		ldr	r2, [r3]
 1297 0060 0320     		mov	r0, #3
 1298 0062 8243     		bic	r2, r0
 1299 0064 1143     		orr	r1, r2
 1300              	.LVL64:
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 1301              		.loc 1 903 0
 1302 0066 8022     		mov	r2, #128
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 1303              		.loc 1 900 0
 1304 0068 1960     		str	r1, [r3]
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 1305              		.loc 1 903 0
 1306 006a 5204     		lsl	r2, r2, #17
 1307              	.LVL65:
 1308              	.L113:
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 1309              		.loc 1 903 0 is_stmt 0 discriminator 1
 1310 006c 5968     		ldr	r1, [r3, #4]
 1311 006e 0320     		mov	r0, #3
 1312 0070 0140     		and	r1, r0
 1313 0072 0229     		cmp	r1, #2
 1314 0074 02D0     		beq	.L112
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 1315              		.loc 1 903 0 discriminator 2
 1316 0076 013A     		sub	r2, r2, #1
 1317 0078 002A     		cmp	r2, #0
 1318 007a F7D1     		bne	.L113
 1319              	.L112:
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 1320              		.loc 1 907 0 is_stmt 1
 1321 007c 5B68     		ldr	r3, [r3, #4]
 1322              	.LVL66:
 1323 007e 1840     		and	r0, r3
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       status = CAN_ModeStatus_Success;
 1324              		.loc 1 875 0
 1325 0080 0238     		sub	r0, r0, #2
 1326              	.L118:
 1327 0082 4342     		neg	r3, r0
 1328 0084 5841     		adc	r0, r0, r3
 1329              	.L108:
 1330              	.LVL67:
 1331              		@ sp needed for prologue
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1332              		.loc 1 922 0
 1333 0086 00BD     		pop	{pc}
 1334              		.cfi_endproc
 1335              	.LFE46:
 1337              		.section	.text.CAN_Sleep,"ax",%progbits
 1338              		.align	1
 1339              		.global	CAN_Sleep
 1340              		.code	16
 1341              		.thumb_func
 1343              	CAN_Sleep:
 1344              	.LFB47:
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1345              		.loc 1 930 0
 1346              		.cfi_startproc
 1347              	.LVL68:
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 1348              		.loc 1 937 0
 1349 0000 0268     		ldr	r2, [r0]
 1350 0002 0323     		mov	r3, #3
 1351 0004 9A43     		bic	r2, r3
 1352 0006 0221     		mov	r1, #2
 1353 0008 0A43     		orr	r2, r1
 1354 000a 0260     		str	r2, [r0]
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 1355              		.loc 1 940 0
 1356 000c 4068     		ldr	r0, [r0, #4]
 1357              	.LVL69:
 1358              		@ sp needed for prologue
 1359 000e 0340     		and	r3, r0
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 1360              		.loc 1 931 0
 1361 0010 981E     		sub	r0, r3, #2
 1362              	.LVL70:
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****    return (uint8_t)sleepstatus;
 1363              		.loc 1 946 0
 1364 0012 4342     		neg	r3, r0
 1365 0014 5841     		adc	r0, r0, r3
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1366              		.loc 1 947 0
 1367 0016 7047     		bx	lr
 1368              		.cfi_endproc
 1369              	.LFE47:
 1371              		.section	.text.CAN_WakeUp,"ax",%progbits
 1372              		.align	1
 1373              		.global	CAN_WakeUp
 1374              		.code	16
 1375              		.thumb_func
 1377              	CAN_WakeUp:
 1378              	.LFB48:
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1379              		.loc 1 955 0
 1380              		.cfi_startproc
 1381 0000 00B5     		push	{lr}
 1382              	.LCFI13:
 1383              		.cfi_def_cfa_offset 4
 1384              		.cfi_offset 14, -4
 1385              	.LVL71:
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 1386              		.loc 1 963 0
 1387 0002 0168     		ldr	r1, [r0]
 1388 0004 0222     		mov	r2, #2
 1389 0006 9143     		bic	r1, r2
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 1390              		.loc 1 966 0
 1391 0008 8023     		mov	r3, #128
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 1392              		.loc 1 963 0
 1393 000a 0160     		str	r1, [r0]
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 1394              		.loc 1 966 0
 1395 000c 5B04     		lsl	r3, r3, #17
 1396              	.LVL72:
 1397              	.L122:
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 1398              		.loc 1 966 0 is_stmt 0 discriminator 1
 1399 000e 4168     		ldr	r1, [r0, #4]
 1400 0010 0222     		mov	r2, #2
 1401 0012 1142     		tst	r1, r2
 1402 0014 02D0     		beq	.L121
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 1403              		.loc 1 966 0 discriminator 2
 1404 0016 013B     		sub	r3, r3, #1
 1405 0018 002B     		cmp	r3, #0
 1406 001a F8D1     		bne	.L122
 1407              	.L121:
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 1408              		.loc 1 970 0 is_stmt 1
 1409 001c 4068     		ldr	r0, [r0, #4]
 1410              	.LVL73:
 1411              		@ sp needed for prologue
 1412 001e 0240     		and	r2, r0
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return (uint8_t)wakeupstatus;
 1413              		.loc 1 976 0
 1414 0020 5042     		neg	r0, r2
 1415 0022 5041     		adc	r0, r0, r2
 1416              	.LVL74:
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1417              		.loc 1 977 0
 1418 0024 00BD     		pop	{pc}
 1419              		.cfi_endproc
 1420              	.LFE48:
 1422              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 1423              		.align	1
 1424              		.global	CAN_GetLastErrorCode
 1425              		.code	16
 1426              		.thumb_func
 1428              	CAN_GetLastErrorCode:
 1429              	.LFB49:
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1430              		.loc 1 1017 0
 1431              		.cfi_startproc
 1432              	.LVL75:
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 1433              		.loc 1 1024 0
 1434 0000 8069     		ldr	r0, [r0, #24]
 1435              	.LVL76:
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return errorcode;
 1436              		.loc 1 1027 0
 1437 0002 7023     		mov	r3, #112
 1438 0004 1840     		and	r0, r3
 1439              	.LVL77:
 1440              		@ sp needed for prologue
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1441              		.loc 1 1028 0
 1442 0006 7047     		bx	lr
 1443              		.cfi_endproc
 1444              	.LFE49:
 1446              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 1447              		.align	1
 1448              		.global	CAN_GetReceiveErrorCounter
 1449              		.code	16
 1450              		.thumb_func
 1452              	CAN_GetReceiveErrorCounter:
 1453              	.LFB50:
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1454              		.loc 1 1042 0
 1455              		.cfi_startproc
 1456              	.LVL78:
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 1457              		.loc 1 1049 0
 1458 0000 8069     		ldr	r0, [r0, #24]
 1459              	.LVL79:
 1460              		@ sp needed for prologue
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return counter;
 1461              		.loc 1 1052 0
 1462 0002 000E     		lsr	r0, r0, #24
 1463              	.LVL80:
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1464              		.loc 1 1053 0
 1465 0004 7047     		bx	lr
 1466              		.cfi_endproc
 1467              	.LFE50:
 1469              		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 1470              		.align	1
 1471              		.global	CAN_GetLSBTransmitErrorCounter
 1472              		.code	16
 1473              		.thumb_func
 1475              	CAN_GetLSBTransmitErrorCounter:
 1476              	.LFB51:
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1477              		.loc 1 1062 0
 1478              		.cfi_startproc
 1479              	.LVL81:
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 1480              		.loc 1 1069 0
 1481 0000 8169     		ldr	r1, [r0, #24]
 1482              	.LVL82:
 1483              		@ sp needed for prologue
 1484 0002 0802     		lsl	r0, r1, #8
 1485              	.LVL83:
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   return counter;
 1486              		.loc 1 1072 0
 1487 0004 000E     		lsr	r0, r0, #24
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1488              		.loc 1 1073 0
 1489 0006 7047     		bx	lr
 1490              		.cfi_endproc
 1491              	.LFE51:
 1493              		.section	.text.CAN_ITConfig,"ax",%progbits
 1494              		.align	1
 1495              		.global	CAN_ITConfig
 1496              		.code	16
 1497              		.thumb_func
 1499              	CAN_ITConfig:
 1500              	.LFB52:
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1501              		.loc 1 1221 0
 1502              		.cfi_startproc
 1503 0000 00B5     		push	{lr}
 1504              	.LCFI14:
 1505              		.cfi_def_cfa_offset 4
 1506              		.cfi_offset 14, -4
 1507              	.LVL84:
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->IER |= CAN_IT;
 1508              		.loc 1 1230 0
 1509 0002 4369     		ldr	r3, [r0, #20]
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (NewState != DISABLE)
 1510              		.loc 1 1227 0
 1511 0004 002A     		cmp	r2, #0
 1512 0006 02D0     		beq	.L128
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->IER |= CAN_IT;
 1513              		.loc 1 1230 0
 1514 0008 1943     		orr	r1, r3
 1515              	.LVL85:
 1516 000a 4161     		str	r1, [r0, #20]
 1517 000c 01E0     		b	.L127
 1518              	.LVL86:
 1519              	.L128:
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->IER &= ~CAN_IT;
 1520              		.loc 1 1235 0
 1521 000e 8B43     		bic	r3, r1
 1522 0010 4361     		str	r3, [r0, #20]
 1523              	.LVL87:
 1524              	.L127:
 1525              		@ sp needed for prologue
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1526              		.loc 1 1237 0
 1527 0012 00BD     		pop	{pc}
 1528              		.cfi_endproc
 1529              	.LFE52:
 1531              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 1532              		.align	1
 1533              		.global	CAN_GetFlagStatus
 1534              		.code	16
 1535              		.thumb_func
 1537              	CAN_GetFlagStatus:
 1538              	.LFB53:
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1539              		.loc 1 1261 0
 1540              		.cfi_startproc
 1541 0000 00B5     		push	{lr}
 1542              	.LCFI15:
 1543              		.cfi_def_cfa_offset 4
 1544              		.cfi_offset 14, -4
 1545              	.LVL88:
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 1546              		.loc 1 1269 0
 1547 0002 F022     		mov	r2, #240
 1548 0004 1304     		lsl	r3, r2, #16
 1549 0006 1942     		tst	r1, r3
 1550 0008 01D0     		beq	.L131
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1551              		.loc 1 1272 0
 1552 000a 8069     		ldr	r0, [r0, #24]
 1553              	.LVL89:
 1554 000c 0CE0     		b	.L136
 1555              	.LVL90:
 1556              	.L131:
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 1557              		.loc 1 1283 0
 1558 000e CB01     		lsl	r3, r1, #7
 1559 0010 01D5     		bpl	.L133
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1560              		.loc 1 1286 0
 1561 0012 4068     		ldr	r0, [r0, #4]
 1562              	.LVL91:
 1563 0014 08E0     		b	.L136
 1564              	.LVL92:
 1565              	.L133:
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 1566              		.loc 1 1297 0
 1567 0016 0B01     		lsl	r3, r1, #4
 1568 0018 01D5     		bpl	.L134
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1569              		.loc 1 1300 0
 1570 001a 8068     		ldr	r0, [r0, #8]
 1571              	.LVL93:
 1572 001c 04E0     		b	.L136
 1573              	.LVL94:
 1574              	.L134:
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 1575              		.loc 1 1311 0
 1576 001e 8B01     		lsl	r3, r1, #6
 1577 0020 01D5     		bpl	.L135
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1578              		.loc 1 1314 0
 1579 0022 C068     		ldr	r0, [r0, #12]
 1580              	.LVL95:
 1581 0024 00E0     		b	.L136
 1582              	.LVL96:
 1583              	.L135:
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 1584              		.loc 1 1328 0
 1585 0026 0069     		ldr	r0, [r0, #16]
 1586              	.LVL97:
 1587              	.L136:
 1588 0028 0303     		lsl	r3, r0, #12
 1589 002a 180B     		lsr	r0, r3, #12
 1590 002c 0140     		and	r1, r0
 1591              	.LVL98:
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       bitstatus = RESET;
 1592              		.loc 1 1280 0
 1593 002e 081C     		mov	r0, r1
 1594 0030 411E     		sub	r1, r0, #1
 1595 0032 8841     		sbc	r0, r0, r1
 1596              	.LVL99:
 1597              		@ sp needed for prologue
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1598              		.loc 1 1341 0
 1599 0034 00BD     		pop	{pc}
 1600              		.cfi_endproc
 1601              	.LFE53:
 1603              		.section	.text.CAN_ClearFlag,"ax",%progbits
 1604              		.align	1
 1605              		.global	CAN_ClearFlag
 1606              		.code	16
 1607              		.thumb_func
 1609              	CAN_ClearFlag:
 1610              	.LFB54:
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1611              		.loc 1 1361 0
 1612              		.cfi_startproc
 1613 0000 00B5     		push	{lr}
 1614              	.LCFI16:
 1615              		.cfi_def_cfa_offset 4
 1616              		.cfi_offset 14, -4
 1617              	.LVL100:
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 1618              		.loc 1 1367 0
 1619 0002 0B4B     		ldr	r3, .L143
 1620 0004 9942     		cmp	r1, r3
 1621 0006 02D1     		bne	.L138
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     CANx->ESR = (uint32_t)RESET;
 1622              		.loc 1 1370 0
 1623 0008 0021     		mov	r1, #0
 1624              	.LVL101:
 1625 000a 8161     		str	r1, [r0, #24]
 1626 000c 0EE0     		b	.L137
 1627              	.LVL102:
 1628              	.L138:
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
 1629              		.loc 1 1374 0
 1630 000e 0A03     		lsl	r2, r1, #12
 1631 0010 130B     		lsr	r3, r2, #12
 1632              	.LVL103:
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 1633              		.loc 1 1376 0
 1634 0012 8A01     		lsl	r2, r1, #6
 1635 0014 01D5     		bpl	.L140
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
 1636              		.loc 1 1379 0
 1637 0016 C360     		str	r3, [r0, #12]
 1638 0018 08E0     		b	.L137
 1639              	.L140:
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 1640              		.loc 1 1381 0
 1641 001a 4A01     		lsl	r2, r1, #5
 1642 001c 01D5     		bpl	.L141
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
 1643              		.loc 1 1384 0
 1644 001e 0361     		str	r3, [r0, #16]
 1645 0020 04E0     		b	.L137
 1646              	.L141:
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 1647              		.loc 1 1386 0
 1648 0022 0A01     		lsl	r2, r1, #4
 1649 0024 01D5     		bpl	.L142
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
 1650              		.loc 1 1389 0
 1651 0026 8360     		str	r3, [r0, #8]
 1652 0028 00E0     		b	.L137
 1653              	.L142:
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
 1654              		.loc 1 1394 0
 1655 002a 4360     		str	r3, [r0, #4]
 1656              	.LVL104:
 1657              	.L137:
 1658              		@ sp needed for prologue
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1659              		.loc 1 1397 0
 1660 002c 00BD     		pop	{pc}
 1661              	.L144:
 1662 002e C046     		.align	2
 1663              	.L143:
 1664 0030 7000F030 		.word	821035120
 1665              		.cfi_endproc
 1666              	.LFE54:
 1668              		.section	.text.CAN_GetITStatus,"ax",%progbits
 1669              		.align	1
 1670              		.global	CAN_GetITStatus
 1671              		.code	16
 1672              		.thumb_func
 1674              	CAN_GetITStatus:
 1675              	.LFB55:
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1676              		.loc 1 1421 0
 1677              		.cfi_startproc
 1678 0000 08B5     		push	{r3, lr}
 1679              	.LCFI17:
 1680              		.cfi_def_cfa_offset 8
 1681              		.cfi_offset 3, -8
 1682              		.cfi_offset 14, -4
 1683              	.LVL105:
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1684              		.loc 1 1421 0
 1685 0002 031C     		mov	r3, r0
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
 1686              		.loc 1 1428 0
 1687 0004 4069     		ldr	r0, [r0, #20]
 1688              	.LVL106:
 1689 0006 0840     		and	r0, r1
 1690 0008 57D0     		beq	.L146
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****     switch (CAN_IT)
 1691              		.loc 1 1431 0
 1692 000a 4029     		cmp	r1, #64
 1693 000c 3DD0     		beq	.L153
 1694 000e 0ED8     		bhi	.L161
 1695 0010 0429     		cmp	r1, #4
 1696 0012 30D0     		beq	.L149
 1697 0014 04D8     		bhi	.L162
 1698 0016 0129     		cmp	r1, #1
 1699 0018 28D0     		beq	.L147
 1700 001a 0229     		cmp	r1, #2
 1701 001c 4CD1     		bne	.L165
 1702 001e 28E0     		b	.L171
 1703              	.L162:
 1704 0020 1029     		cmp	r1, #16
 1705 0022 2CD0     		beq	.L151
 1706 0024 2029     		cmp	r1, #32
 1707 0026 2DD0     		beq	.L152
 1708 0028 0829     		cmp	r1, #8
 1709 002a 45D1     		bne	.L165
 1710 002c 25E0     		b	.L172
 1711              	.L161:
 1712 002e 8022     		mov	r2, #128
 1713 0030 1201     		lsl	r2, r2, #4
 1714 0032 9142     		cmp	r1, r2
 1715 0034 38D0     		beq	.L157
 1716 0036 0CD8     		bhi	.L163
 1717 0038 8022     		mov	r2, #128
 1718 003a 9000     		lsl	r0, r2, #2
 1719 003c 8142     		cmp	r1, r0
 1720 003e 2ED0     		beq	.L155
 1721 0040 8022     		mov	r2, #128
 1722 0042 D000     		lsl	r0, r2, #3
 1723 0044 8142     		cmp	r1, r0
 1724 0046 2DD0     		beq	.L156
 1725 0048 8022     		mov	r2, #128
 1726 004a 5000     		lsl	r0, r2, #1
 1727 004c 8142     		cmp	r1, r0
 1728 004e 33D1     		bne	.L165
 1729 0050 22E0     		b	.L173
 1730              	.L163:
 1731 0052 8022     		mov	r2, #128
 1732 0054 5002     		lsl	r0, r2, #9
 1733 0056 8142     		cmp	r1, r0
 1734 0058 1AD0     		beq	.L159
 1735 005a 8022     		mov	r2, #128
 1736 005c 9002     		lsl	r0, r2, #10
 1737 005e 8142     		cmp	r1, r0
 1738 0060 18D0     		beq	.L160
 1739 0062 8022     		mov	r2, #128
 1740 0064 1002     		lsl	r0, r2, #8
 1741 0066 8142     		cmp	r1, r0
 1742 0068 26D1     		bne	.L165
 1743 006a 22E0     		b	.L174
 1744              	.L147:
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 1745              		.loc 1 1435 0
 1746 006c 9868     		ldr	r0, [r3, #8]
 1747 006e 1349     		ldr	r1, .L175
 1748              	.LVL107:
 1749 0070 1CE0     		b	.L166
 1750              	.LVL108:
 1751              	.L171:
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 1752              		.loc 1 1439 0
 1753 0072 D868     		ldr	r0, [r3, #12]
 1754 0074 04E0     		b	.L168
 1755              	.L149:
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 1756              		.loc 1 1443 0
 1757 0076 D868     		ldr	r0, [r3, #12]
 1758 0078 05E0     		b	.L167
 1759              	.L172:
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 1760              		.loc 1 1447 0
 1761 007a D868     		ldr	r0, [r3, #12]
 1762 007c 06E0     		b	.L170
 1763              	.L151:
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 1764              		.loc 1 1451 0
 1765 007e 1869     		ldr	r0, [r3, #16]
 1766              	.L168:
 1767 0080 0321     		mov	r1, #3
 1768              	.LVL109:
 1769 0082 13E0     		b	.L166
 1770              	.LVL110:
 1771              	.L152:
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 1772              		.loc 1 1455 0
 1773 0084 1869     		ldr	r0, [r3, #16]
 1774              	.L167:
 1775 0086 0821     		mov	r1, #8
 1776              	.LVL111:
 1777 0088 10E0     		b	.L166
 1778              	.LVL112:
 1779              	.L153:
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 1780              		.loc 1 1459 0
 1781 008a 1869     		ldr	r0, [r3, #16]
 1782              	.L170:
 1783 008c 1021     		mov	r1, #16
 1784              	.LVL113:
 1785 008e 0DE0     		b	.L166
 1786              	.LVL114:
 1787              	.L159:
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 1788              		.loc 1 1463 0
 1789 0090 5868     		ldr	r0, [r3, #4]
 1790 0092 F8E7     		b	.L167
 1791              	.L160:
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 1792              		.loc 1 1467 0
 1793 0094 5868     		ldr	r0, [r3, #4]
 1794 0096 F9E7     		b	.L170
 1795              	.L173:
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 1796              		.loc 1 1471 0
 1797 0098 9869     		ldr	r0, [r3, #24]
 1798 009a 0121     		mov	r1, #1
 1799              	.LVL115:
 1800 009c 06E0     		b	.L166
 1801              	.LVL116:
 1802              	.L155:
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 1803              		.loc 1 1475 0
 1804 009e 9869     		ldr	r0, [r3, #24]
 1805 00a0 0221     		mov	r1, #2
 1806              	.LVL117:
 1807 00a2 03E0     		b	.L166
 1808              	.LVL118:
 1809              	.L156:
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 1810              		.loc 1 1479 0
 1811 00a4 9869     		ldr	r0, [r3, #24]
 1812 00a6 05E0     		b	.L169
 1813              	.L157:
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 1814              		.loc 1 1483 0
 1815 00a8 9869     		ldr	r0, [r3, #24]
 1816 00aa 7021     		mov	r1, #112
 1817              	.LVL119:
 1818              	.L166:
 1819 00ac FFF7FEFF 		bl	CheckITStatus
 1820              	.LVL120:
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         break;
 1821              		.loc 1 1484 0
 1822 00b0 03E0     		b	.L146
 1823              	.LVL121:
 1824              	.L174:
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 1825              		.loc 1 1487 0
 1826 00b2 5868     		ldr	r0, [r3, #4]
 1827              	.L169:
 1828 00b4 0421     		mov	r1, #4
 1829              	.LVL122:
 1830 00b6 F9E7     		b	.L166
 1831              	.LVL123:
 1832              	.L165:
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****         itstatus = RESET;
 1833              		.loc 1 1491 0
 1834 00b8 0020     		mov	r0, #0
 1835              	.LVL124:
 1836              	.L146:
 1837              		@ sp needed for prologue
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1838              		.loc 1 1503 0
 1839 00ba 08BD     		pop	{r3, pc}
 1840              	.L176:
 1841              		.align	2
 1842              	.L175:
 1843 00bc 01010100 		.word	65793
 1844              		.cfi_endproc
 1845              	.LFE55:
 1847              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 1848              		.align	1
 1849              		.global	CAN_ClearITPendingBit
 1850              		.code	16
 1851              		.thumb_func
 1853              	CAN_ClearITPendingBit:
 1854              	.LFB56:
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** {
 1855              		.loc 1 1525 0
 1856              		.cfi_startproc
 1857 0000 00B5     		push	{lr}
 1858              	.LCFI18:
 1859              		.cfi_def_cfa_offset 4
 1860              		.cfi_offset 14, -4
 1861              	.LVL125:
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****   switch (CAN_IT)
 1862              		.loc 1 1530 0
 1863 0002 8023     		mov	r3, #128
 1864 0004 5B00     		lsl	r3, r3, #1
 1865 0006 9942     		cmp	r1, r3
 1866 0008 3BD0     		beq	.L194
 1867 000a 0CD8     		bhi	.L191
 1868 000c 0829     		cmp	r1, #8
 1869 000e 2AD0     		beq	.L181
 1870 0010 04D8     		bhi	.L192
 1871 0012 0129     		cmp	r1, #1
 1872 0014 22D0     		beq	.L179
 1873 0016 0429     		cmp	r1, #4
 1874 0018 35D1     		bne	.L177
 1875 001a 22E0     		b	.L198
 1876              	.L192:
 1877 001c 2029     		cmp	r1, #32
 1878 001e 25D0     		beq	.L182
 1879 0020 4029     		cmp	r1, #64
 1880 0022 30D1     		bne	.L177
 1881 0024 24E0     		b	.L199
 1882              	.L191:
 1883 0026 8022     		mov	r2, #128
 1884 0028 1301     		lsl	r3, r2, #4
 1885 002a 9942     		cmp	r1, r3
 1886 002c 27D0     		beq	.L188
 1887 002e 08D8     		bhi	.L193
 1888 0030 8022     		mov	r2, #128
 1889 0032 9300     		lsl	r3, r2, #2
 1890 0034 9942     		cmp	r1, r3
 1891 0036 24D0     		beq	.L194
 1892 0038 8022     		mov	r2, #128
 1893 003a D300     		lsl	r3, r2, #3
 1894 003c 9942     		cmp	r1, r3
 1895 003e 22D1     		bne	.L177
 1896 0040 1FE0     		b	.L194
 1897              	.L193:
 1898 0042 8022     		mov	r2, #128
 1899 0044 5302     		lsl	r3, r2, #9
 1900 0046 9942     		cmp	r1, r3
 1901 0048 15D0     		beq	.L189
 1902 004a 8022     		mov	r2, #128
 1903 004c 9302     		lsl	r3, r2, #10
 1904 004e 9942     		cmp	r1, r3
 1905 0050 13D0     		beq	.L190
 1906 0052 8022     		mov	r2, #128
 1907 0054 1302     		lsl	r3, r2, #8
 1908 0056 9942     		cmp	r1, r3
 1909 0058 15D1     		bne	.L177
 1910 005a 10E0     		b	.L188
 1911              	.L179:
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 1912              		.loc 1 1534 0
 1913 005c 0A49     		ldr	r1, .L200
 1914              	.LVL126:
 1915 005e 8160     		str	r1, [r0, #8]
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 1916              		.loc 1 1535 0
 1917 0060 11E0     		b	.L177
 1918              	.LVL127:
 1919              	.L198:
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
 1920              		.loc 1 1538 0
 1921 0062 0823     		mov	r3, #8
 1922 0064 00E0     		b	.L196
 1923              	.L181:
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
 1924              		.loc 1 1542 0
 1925 0066 1023     		mov	r3, #16
 1926              	.L196:
 1927 0068 C360     		str	r3, [r0, #12]
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 1928              		.loc 1 1543 0
 1929 006a 0CE0     		b	.L177
 1930              	.L182:
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
 1931              		.loc 1 1546 0
 1932 006c 0823     		mov	r3, #8
 1933 006e 00E0     		b	.L197
 1934              	.L199:
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
 1935              		.loc 1 1550 0
 1936 0070 1023     		mov	r3, #16
 1937              	.L197:
 1938 0072 0361     		str	r3, [r0, #16]
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       break;
 1939              		.loc 1 1551 0
 1940 0074 07E0     		b	.L177
 1941              	.L189:
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
 1942              		.loc 1 1554 0
 1943 0076 0823     		mov	r3, #8
 1944 0078 04E0     		b	.L195
 1945              	.L190:
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
 1946              		.loc 1 1558 0
 1947 007a 1023     		mov	r3, #16
 1948 007c 02E0     		b	.L195
 1949              	.L188:
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->ESR = RESET; 
 1950              		.loc 1 1583 0
 1951 007e 0023     		mov	r3, #0
 1952 0080 8361     		str	r3, [r0, #24]
 1953              	.L194:
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
 1954              		.loc 1 1585 0
 1955 0082 0423     		mov	r3, #4
 1956              	.L195:
 1957 0084 4360     		str	r3, [r0, #4]
 1958              	.LVL128:
 1959              	.L177:
 1960              		@ sp needed for prologue
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_can.c **** }
 1961              		.loc 1 1591 0
 1962 0086 00BD     		pop	{pc}
 1963              	.L201:
 1964              		.align	2
 1965              	.L200:
 1966 0088 01010100 		.word	65793
 1967              		.cfi_endproc
 1968              	.LFE56:
 1970              		.text
 1971              	.Letext0:
 1972              		.file 2 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 1973              		.file 3 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/stm32f
 1974              		.file 4 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\ST
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_can.c
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:18     .text.CheckITStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:22     .text.CheckITStatus:00000000 CheckITStatus
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:41     .text.CAN_DeInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:46     .text.CAN_DeInit:00000000 CAN_DeInit
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:74     .text.CAN_Init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:79     .text.CAN_Init:00000000 CAN_Init
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:288    .text.CAN_FilterInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:293    .text.CAN_FilterInit:00000000 CAN_FilterInit
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:473    .text.CAN_FilterInit:000000dc $d
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:479    .text.CAN_StructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:484    .text.CAN_StructInit:00000000 CAN_StructInit
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:525    .text.CAN_SlaveStartBank:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:530    .text.CAN_SlaveStartBank:00000000 CAN_SlaveStartBank
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:570    .text.CAN_SlaveStartBank:00000028 $d
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:576    .text.CAN_DBGFreeze:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:581    .text.CAN_DBGFreeze:00000000 CAN_DBGFreeze
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:612    .text.CAN_DBGFreeze:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:617    .text.CAN_TTComModeCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:622    .text.CAN_TTComModeCmd:00000000 CAN_TTComModeCmd
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:691    .text.CAN_TTComModeCmd:00000054 $d
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:696    .text.CAN_Transmit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:701    .text.CAN_Transmit:00000000 CAN_Transmit
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:860    .text.CAN_TransmitStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:865    .text.CAN_TransmitStatus:00000000 CAN_TransmitStatus
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:943    .text.CAN_TransmitStatus:0000004c $d
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:950    .text.CAN_CancelTransmit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:955    .text.CAN_CancelTransmit:00000000 CAN_CancelTransmit
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1000   .text.CAN_Receive:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1005   .text.CAN_Receive:00000000 CAN_Receive
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1118   .text.CAN_FIFORelease:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1123   .text.CAN_FIFORelease:00000000 CAN_FIFORelease
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1155   .text.CAN_MessagePending:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1160   .text.CAN_MessagePending:00000000 CAN_MessagePending
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1199   .text.CAN_OperatingModeRequest:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1204   .text.CAN_OperatingModeRequest:00000000 CAN_OperatingModeRequest
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1338   .text.CAN_Sleep:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1343   .text.CAN_Sleep:00000000 CAN_Sleep
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1372   .text.CAN_WakeUp:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1377   .text.CAN_WakeUp:00000000 CAN_WakeUp
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1423   .text.CAN_GetLastErrorCode:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1428   .text.CAN_GetLastErrorCode:00000000 CAN_GetLastErrorCode
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1447   .text.CAN_GetReceiveErrorCounter:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1452   .text.CAN_GetReceiveErrorCounter:00000000 CAN_GetReceiveErrorCounter
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1470   .text.CAN_GetLSBTransmitErrorCounter:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1475   .text.CAN_GetLSBTransmitErrorCounter:00000000 CAN_GetLSBTransmitErrorCounter
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1494   .text.CAN_ITConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1499   .text.CAN_ITConfig:00000000 CAN_ITConfig
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1532   .text.CAN_GetFlagStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1537   .text.CAN_GetFlagStatus:00000000 CAN_GetFlagStatus
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1604   .text.CAN_ClearFlag:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1609   .text.CAN_ClearFlag:00000000 CAN_ClearFlag
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1664   .text.CAN_ClearFlag:00000030 $d
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1669   .text.CAN_GetITStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1674   .text.CAN_GetITStatus:00000000 CAN_GetITStatus
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1843   .text.CAN_GetITStatus:000000bc $d
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1848   .text.CAN_ClearITPendingBit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1853   .text.CAN_ClearITPendingBit:00000000 CAN_ClearITPendingBit
C:\Users\khanh\AppData\Local\Temp\ccfheej3.s:1966   .text.CAN_ClearITPendingBit:00000088 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
