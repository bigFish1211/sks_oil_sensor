   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_dma.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DMA_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	DMA_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	DMA_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @file    stm32f0xx_dma.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *           + Initialization and Configuration
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *           + Data Counter
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *           + Interrupts and flags management
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *  @verbatim
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ==============================================================================
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****                       ##### How to use this driver #####
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ==============================================================================
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..]
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Enable The DMA controller clock using 
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE) function for DMA1.
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Enable and configure the peripheral to be connected to the DMA channel
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****        (except for internal SRAM / FLASH memories: no initialization is necessary).
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) For a given Channel, program the Source and Destination addresses, 
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         the transfer Direction, the Buffer Size, the Peripheral and Memory 
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         Incrementation mode and Data Size, the Circular or Normal mode, 
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         the channel transfer Priority and the Memory-to-Memory transfer 
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         mode (if needed) using the DMA_Init() function.
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Enable the NVIC and the corresponding interrupt(s) using the function 
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         DMA_ITConfig() if you need to use DMA interrupts.
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Enable the DMA channel using the DMA_Cmd() function.
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Activate the needed channel Request using PPP_DMACmd() function for 
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...) 
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         The function allowing this operation is provided in each PPP peripheral 
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         driver (ie. SPI_DMACmd for SPI peripheral).
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) Optionally, you can configure the number of data to be transferred
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         when the channel is disabled (ie. after each Transfer Complete event
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         And you can get the number of remaining data to be transferred using 
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         the function DMA_GetCurrDataCounter() at run time (when the DMA channel is
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         enabled and running).
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (#) To control DMA events you can use one of the following two methods:
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (##) Check on DMA channel flags using the function DMA_GetFlagStatus().
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (##) Use DMA interrupts through the function DMA_ITConfig() at initialization
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              phase and DMA_GetITStatus() function into interrupt routines in
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              communication phase.
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              After checking on a flag you should clear it using DMA_ClearFlag()
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              function. And after checking on an interrupt event you should 
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              clear it using DMA_ClearITPendingBit() function.
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     @endverbatim
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ******************************************************************************
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @attention
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * You may not use this file except in compliance with the License.
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * You may obtain a copy of the License at:
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * Unless required by applicable law or agreed to in writing, software 
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * See the License for the specific language governing permissions and
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * limitations under the License.
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ******************************************************************************
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Includes ------------------------------------------------------------------*/
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #include "stm32f0xx_dma.h"
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @defgroup DMA 
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief DMA driver modules
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private define ------------------------------------------------------------*/
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define CCR_CLEAR_MASK   ((uint32_t)0xFFFF800F) /* DMA Channel config registers Masks */
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define FLAG_Mask        ((uint32_t)0x10000000) /* DMA2 FLAG mask */
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* DMA1 Channelx interrupt pending bit masks */
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL1_IT_MASK    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL2_IT_MASK    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL3_IT_MASK    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL4_IT_MASK    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL5_IT_MASK    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL6_IT_MASK    ((uint32_t)(DMA_ISR_GIF6 | DMA_ISR_TCIF6 | DMA_ISR_HTIF6 | DMA_ISR
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA1_CHANNEL7_IT_MASK    ((uint32_t)(DMA_ISR_GIF7 | DMA_ISR_TCIF7 | DMA_ISR_HTIF7 | DMA_ISR
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* DMA2 Channelx interrupt pending bit masks: Only applicable for STM32F091 devices */
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA2_CHANNEL1_IT_MASK    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA2_CHANNEL2_IT_MASK    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA2_CHANNEL3_IT_MASK    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA2_CHANNEL4_IT_MASK    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** #define DMA2_CHANNEL5_IT_MASK    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @defgroup DMA_Private_Functions 
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *  @brief   Initialization and Configuration functions
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @verbatim   
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             ##### Initialization and Configuration functions #####
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] This subsection provides functions allowing to initialize the DMA channel 
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          source and destination addresses, incrementation and data sizes, transfer 
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          direction, buffer size, circular/normal mode selection, memory-to-memory 
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          mode selection and channel priority value.
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] The DMA_Init() function follows the DMA configuration procedures as described 
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          in reference manual (RM0091).
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @endverbatim
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Deinitializes the DMAy Channelx registers to their default reset
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         values.
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and 
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         x can be 1 to 7 for DMA1 to select the DMA Channel.
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   Channel 6 and 7 are available only for STM32F072 devices.
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
  26              		.loc 1 138 0
  27              		.cfi_startproc
  28 0000 00B5     		push	{lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 4
  31              		.cfi_offset 14, -4
  32              	.LVL0:
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Disable the selected DMAy Channelx */
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
  33              		.loc 1 143 0
  34 0002 0268     		ldr	r2, [r0]
  35 0004 2C4B     		ldr	r3, .L20
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx control register */
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CCR  = 0;
  36              		.loc 1 146 0
  37 0006 0021     		mov	r1, #0
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
  38              		.loc 1 143 0
  39 0008 1340     		and	r3, r2
  40 000a 0360     		str	r3, [r0]
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx remaining bytes register */
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CNDTR = 0;
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx peripheral address register */
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CPAR  = 0;
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Reset DMAy Channelx memory address register */
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CMAR = 0;
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if (DMAy_Channelx == DMA1_Channel1)
  41              		.loc 1 157 0
  42 000c 2B4B     		ldr	r3, .L20+4
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CCR  = 0;
  43              		.loc 1 146 0
  44 000e 0160     		str	r1, [r0]
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CNDTR = 0;
  45              		.loc 1 149 0
  46 0010 4160     		str	r1, [r0, #4]
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CPAR  = 0;
  47              		.loc 1 152 0
  48 0012 8160     		str	r1, [r0, #8]
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CMAR = 0;
  49              		.loc 1 155 0
  50 0014 C160     		str	r1, [r0, #12]
  51              		.loc 1 157 0
  52 0016 9842     		cmp	r0, r3
  53 0018 01D1     		bne	.L2
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel1 */
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL1_IT_MASK;
  54              		.loc 1 160 0
  55 001a 294B     		ldr	r3, .L20+8
  56 001c 27E0     		b	.L15
  57              	.L2:
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel2)
  58              		.loc 1 162 0
  59 001e 2949     		ldr	r1, .L20+12
  60 0020 8842     		cmp	r0, r1
  61 0022 01D1     		bne	.L4
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel2 */
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL2_IT_MASK;
  62              		.loc 1 165 0
  63 0024 264B     		ldr	r3, .L20+8
  64 0026 29E0     		b	.L16
  65              	.L4:
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel3)
  66              		.loc 1 167 0
  67 0028 274B     		ldr	r3, .L20+16
  68 002a 9842     		cmp	r0, r3
  69 002c 01D1     		bne	.L5
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel3 */
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL3_IT_MASK;
  70              		.loc 1 170 0
  71 002e 244B     		ldr	r3, .L20+8
  72 0030 2BE0     		b	.L17
  73              	.L5:
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel4)
  74              		.loc 1 172 0
  75 0032 264A     		ldr	r2, .L20+20
  76 0034 9042     		cmp	r0, r2
  77 0036 01D1     		bne	.L6
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel4 */
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL4_IT_MASK;
  78              		.loc 1 175 0
  79 0038 214B     		ldr	r3, .L20+8
  80 003a 2EE0     		b	.L18
  81              	.L6:
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel5)
  82              		.loc 1 177 0
  83 003c 2449     		ldr	r1, .L20+24
  84 003e 8842     		cmp	r0, r1
  85 0040 01D1     		bne	.L7
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel5 */
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL5_IT_MASK;
  86              		.loc 1 180 0
  87 0042 1F4B     		ldr	r3, .L20+8
  88 0044 31E0     		b	.L19
  89              	.L7:
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel6)
  90              		.loc 1 182 0
  91 0046 234B     		ldr	r3, .L20+28
  92 0048 9842     		cmp	r0, r3
  93 004a 04D1     		bne	.L8
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel6 */
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL6_IT_MASK;
  94              		.loc 1 185 0
  95 004c 1C4B     		ldr	r3, .L20+8
  96 004e F020     		mov	r0, #240
  97              	.LVL1:
  98 0050 5968     		ldr	r1, [r3, #4]
  99 0052 0204     		lsl	r2, r0, #16
 100 0054 2CE0     		b	.L14
 101              	.LVL2:
 102              	.L8:
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA1_Channel7)
 103              		.loc 1 187 0
 104 0056 204A     		ldr	r2, .L20+32
 105 0058 9042     		cmp	r0, r2
 106 005a 04D1     		bne	.L9
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel7 */
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR |= DMA1_CHANNEL7_IT_MASK;
 107              		.loc 1 190 0
 108 005c 184B     		ldr	r3, .L20+8
 109 005e F020     		mov	r0, #240
 110              	.LVL3:
 111 0060 5968     		ldr	r1, [r3, #4]
 112 0062 0205     		lsl	r2, r0, #20
 113 0064 24E0     		b	.L14
 114              	.LVL4:
 115              	.L9:
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA2_Channel1)
 116              		.loc 1 192 0
 117 0066 1D49     		ldr	r1, .L20+36
 118 0068 8842     		cmp	r0, r1
 119 006a 03D1     		bne	.L10
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel1 */
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL1_IT_MASK;
 120              		.loc 1 195 0
 121 006c 1C4B     		ldr	r3, .L20+40
 122              	.L15:
 123 006e 5A68     		ldr	r2, [r3, #4]
 124 0070 0F21     		mov	r1, #15
 125 0072 1DE0     		b	.L14
 126              	.L10:
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA2_Channel2)
 127              		.loc 1 197 0
 128 0074 1B4B     		ldr	r3, .L20+44
 129 0076 9842     		cmp	r0, r3
 130 0078 03D1     		bne	.L11
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel2 */
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL2_IT_MASK;
 131              		.loc 1 200 0
 132 007a 194B     		ldr	r3, .L20+40
 133              	.L16:
 134 007c 5A68     		ldr	r2, [r3, #4]
 135 007e F021     		mov	r1, #240
 136 0080 16E0     		b	.L14
 137              	.L11:
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA2_Channel3)
 138              		.loc 1 202 0
 139 0082 194A     		ldr	r2, .L20+48
 140 0084 9042     		cmp	r0, r2
 141 0086 04D1     		bne	.L12
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel3 */
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL3_IT_MASK;
 142              		.loc 1 205 0
 143 0088 154B     		ldr	r3, .L20+40
 144              	.L17:
 145 008a F020     		mov	r0, #240
 146              	.LVL5:
 147 008c 5968     		ldr	r1, [r3, #4]
 148 008e 0201     		lsl	r2, r0, #4
 149 0090 0EE0     		b	.L14
 150              	.LVL6:
 151              	.L12:
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else if (DMAy_Channelx == DMA2_Channel4)
 152              		.loc 1 207 0
 153 0092 1649     		ldr	r1, .L20+52
 154 0094 8842     		cmp	r0, r1
 155 0096 04D1     		bne	.L13
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel4 */
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA2->IFCR |= DMA2_CHANNEL4_IT_MASK;
 156              		.loc 1 210 0
 157 0098 114B     		ldr	r3, .L20+40
 158              	.L18:
 159 009a F022     		mov	r2, #240
 160 009c 5968     		ldr	r1, [r3, #4]
 161 009e 1202     		lsl	r2, r2, #8
 162 00a0 06E0     		b	.L14
 163              	.L13:
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   { 
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     if (DMAy_Channelx == DMA2_Channel5)
 164              		.loc 1 214 0
 165 00a2 134B     		ldr	r3, .L20+56
 166 00a4 9842     		cmp	r0, r3
 167 00a6 05D1     		bne	.L1
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     {
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Channel5 */
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****       DMA2->IFCR |= DMA2_CHANNEL5_IT_MASK;
 168              		.loc 1 217 0
 169 00a8 0D4B     		ldr	r3, .L20+40
 170              	.L19:
 171 00aa F020     		mov	r0, #240
 172              	.LVL7:
 173 00ac 5968     		ldr	r1, [r3, #4]
 174 00ae 0203     		lsl	r2, r0, #12
 175              	.L14:
 176 00b0 0A43     		orr	r2, r1
 177 00b2 5A60     		str	r2, [r3, #4]
 178              	.L1:
 179              		@ sp needed for prologue
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     }
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 180              		.loc 1 220 0
 181 00b4 00BD     		pop	{pc}
 182              	.L21:
 183 00b6 C046     		.align	2
 184              	.L20:
 185 00b8 FEFF0000 		.word	65534
 186 00bc 08000240 		.word	1073872904
 187 00c0 00000240 		.word	1073872896
 188 00c4 1C000240 		.word	1073872924
 189 00c8 30000240 		.word	1073872944
 190 00cc 44000240 		.word	1073872964
 191 00d0 58000240 		.word	1073872984
 192 00d4 6C000240 		.word	1073873004
 193 00d8 80000240 		.word	1073873024
 194 00dc 08040240 		.word	1073873928
 195 00e0 00040240 		.word	1073873920
 196 00e4 1C040240 		.word	1073873948
 197 00e8 30040240 		.word	1073873968
 198 00ec 44040240 		.word	1073873988
 199 00f0 58040240 		.word	1073874008
 200              		.cfi_endproc
 201              	.LFE33:
 203              		.section	.text.DMA_Init,"ax",%progbits
 204              		.align	1
 205              		.global	DMA_Init
 206              		.code	16
 207              		.thumb_func
 209              	DMA_Init:
 210              	.LFB34:
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Initializes the DMAy Channelx according to the specified parameters 
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         in the DMA_InitStruct.
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 1 to 7
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA Channel and 1 to 5 for DMA2 to select the DMA Channel.
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   DMA1 Channel 6 and 7 are available only for STM32F072 and STM32F091 devices. 
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   DMA2 Channel 1 to 5 are available only for STM32F091 devices.   
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         the configuration information for the specified DMA Channel.
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 211              		.loc 1 234 0
 212              		.cfi_startproc
 213 0000 10B5     		push	{r4, lr}
 214              	.LCFI1:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 4, -8
 217              		.cfi_offset 14, -4
 218              	.LVL8:
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   uint32_t tmpreg = 0;
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CCR Configuration ----------------*/
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Get the DMAy_Channelx CCR value */
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   tmpreg = DMAy_Channelx->CCR;
 219              		.loc 1 251 0
 220 0002 0268     		ldr	r2, [r0]
 221              	.LVL9:
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   tmpreg &= CCR_CLEAR_MASK;
 222              		.loc 1 254 0
 223 0004 0C4B     		ldr	r3, .L23
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set DIR bit according to DMA_DIR value */
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Set the MEM2MEM bit according to DMA_M2M value */
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 224              		.loc 1 265 0
 225 0006 0C6A     		ldr	r4, [r1, #32]
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   tmpreg &= CCR_CLEAR_MASK;
 226              		.loc 1 254 0
 227 0008 1A40     		and	r2, r3
 228              	.LVL10:
 229              		.loc 1 265 0
 230 000a 8B68     		ldr	r3, [r1, #8]
 231              		@ sp needed for prologue
 232 000c 2343     		orr	r3, r4
 233 000e 0C69     		ldr	r4, [r1, #16]
 234 0010 2343     		orr	r3, r4
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 235              		.loc 1 266 0
 236 0012 4C69     		ldr	r4, [r1, #20]
 237 0014 2343     		orr	r3, r4
 238 0016 8C69     		ldr	r4, [r1, #24]
 239 0018 2343     		orr	r3, r4
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 240              		.loc 1 267 0
 241 001a CC69     		ldr	r4, [r1, #28]
 242 001c 2343     		orr	r3, r4
 243 001e 4C6A     		ldr	r4, [r1, #36]
 244 0020 2343     		orr	r3, r4
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 245              		.loc 1 268 0
 246 0022 8C6A     		ldr	r4, [r1, #40]
 247 0024 2343     		orr	r3, r4
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 248              		.loc 1 265 0
 249 0026 1343     		orr	r3, r2
 250              	.LVL11:
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CCR */
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CCR = tmpreg;
 251              		.loc 1 271 0
 252 0028 0360     		str	r3, [r0]
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CNDTR */
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 253              		.loc 1 275 0
 254 002a CC68     		ldr	r4, [r1, #12]
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CPAR */
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CMAR */
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 255              		.loc 1 283 0
 256 002c 0CC9     		ldmia	r1!, {r2, r3}
 257              	.LVL12:
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 258              		.loc 1 275 0
 259 002e 4460     		str	r4, [r0, #4]
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 260              		.loc 1 279 0
 261 0030 8260     		str	r2, [r0, #8]
 262              		.loc 1 283 0
 263 0032 C360     		str	r3, [r0, #12]
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 264              		.loc 1 284 0
 265 0034 10BD     		pop	{r4, pc}
 266              	.L24:
 267 0036 C046     		.align	2
 268              	.L23:
 269 0038 0F80FFFF 		.word	-32753
 270              		.cfi_endproc
 271              	.LFE34:
 273              		.section	.text.DMA_StructInit,"ax",%progbits
 274              		.align	1
 275              		.global	DMA_StructInit
 276              		.code	16
 277              		.thumb_func
 279              	DMA_StructInit:
 280              	.LFB35:
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure which will
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         be initialized.
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 281              		.loc 1 293 0
 282              		.cfi_startproc
 283              	.LVL13:
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*-------------- Reset DMA init structure parameters values ------------------*/
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 284              		.loc 1 296 0
 285 0000 0023     		mov	r3, #0
 286 0002 0360     		str	r3, [r0]
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_MemoryBaseAddr member */
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 287              		.loc 1 298 0
 288 0004 4360     		str	r3, [r0, #4]
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_DIR member */
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 289              		.loc 1 300 0
 290 0006 8360     		str	r3, [r0, #8]
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 291              		.loc 1 302 0
 292 0008 C360     		str	r3, [r0, #12]
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 293              		.loc 1 304 0
 294 000a 0361     		str	r3, [r0, #16]
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 295              		.loc 1 306 0
 296 000c 4361     		str	r3, [r0, #20]
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 297              		.loc 1 308 0
 298 000e 8361     		str	r3, [r0, #24]
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 299              		.loc 1 310 0
 300 0010 C361     		str	r3, [r0, #28]
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_Mode member */
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 301              		.loc 1 312 0
 302 0012 0362     		str	r3, [r0, #32]
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_Priority member */
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 303              		.loc 1 314 0
 304 0014 4362     		str	r3, [r0, #36]
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Initialize the DMA_M2M member */
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 305              		.loc 1 316 0
 306 0016 8362     		str	r3, [r0, #40]
 307              		@ sp needed for prologue
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 308              		.loc 1 317 0
 309 0018 7047     		bx	lr
 310              		.cfi_endproc
 311              	.LFE35:
 313              		.section	.text.DMA_Cmd,"ax",%progbits
 314              		.align	1
 315              		.global	DMA_Cmd
 316              		.code	16
 317              		.thumb_func
 319              	DMA_Cmd:
 320              	.LFB36:
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx.
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 1 to 7
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA Channel and 1 to 5 for DMA2 to select the DMA Channel.
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   DMA1 Channel 6 and 7 are available only for STM32F072 and STM32F091 devices. 
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   DMA2 Channel 1 to 5 are available only for STM32F091 devices. 
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  NewState: new state of the DMAy Channelx. 
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         This parameter can be: ENABLE or DISABLE.
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 321              		.loc 1 330 0
 322              		.cfi_startproc
 323 0000 00B5     		push	{lr}
 324              	.LCFI2:
 325              		.cfi_def_cfa_offset 4
 326              		.cfi_offset 14, -4
 327              	.LVL14:
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if (NewState != DISABLE)
 328              		.loc 1 335 0
 329 0002 0029     		cmp	r1, #0
 330 0004 03D0     		beq	.L27
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Enable the selected DMAy Channelx */
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR |= DMA_CCR_EN;
 331              		.loc 1 338 0
 332 0006 0368     		ldr	r3, [r0]
 333 0008 0122     		mov	r2, #1
 334 000a 1343     		orr	r3, r2
 335 000c 02E0     		b	.L29
 336              	.L27:
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Disable the selected DMAy Channelx */
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 337              		.loc 1 343 0
 338 000e 0168     		ldr	r1, [r0]
 339              	.LVL15:
 340 0010 014B     		ldr	r3, .L30
 341 0012 0B40     		and	r3, r1
 342              	.L29:
 343 0014 0360     		str	r3, [r0]
 344              		@ sp needed for prologue
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 345              		.loc 1 345 0
 346 0016 00BD     		pop	{pc}
 347              	.L31:
 348              		.align	2
 349              	.L30:
 350 0018 FEFF0000 		.word	65534
 351              		.cfi_endproc
 352              	.LFE36:
 354              		.section	.text.DMA_RemapConfig,"ax",%progbits
 355              		.align	1
 356              		.global	DMA_RemapConfig
 357              		.code	16
 358              		.thumb_func
 360              	DMA_RemapConfig:
 361              	.LFB37:
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Configure the DMAx channels remapping.
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy: where x can be 1 or 2 to select the DMA peripheral.    
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_CHx_RemapRequest: where y can be 1 or 2 to select the DMA and x can be 1 to 7
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA1 Channel and can be 1 to 5 for DMA2 to select the DMA2 Chann
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   This function is available only for STM32F091 devices. 
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_RemapConfig(DMA_TypeDef* DMAy, uint32_t DMAx_CHy_RemapRequest)
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 362              		.loc 1 356 0
 363              		.cfi_startproc
 364 0000 10B5     		push	{r4, lr}
 365              	.LCFI3:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 4, -8
 368              		.cfi_offset 14, -4
 369              	.LVL16:
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_LIST(DMAy));
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if (DMAy == DMA1)
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     assert_param(IS_DMA1_REMAP(DMAx_CHy_RemapRequest));  
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     assert_param(IS_DMA2_REMAP(DMAx_CHy_RemapRequest)); 
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy->RMPCR &= ~((uint32_t)0x0F << (uint32_t)((DMAx_CHy_RemapRequest >> 28) * 4)); 
 370              		.loc 1 368 0
 371 0002 A830     		add	r0, r0, #168
 372              	.LVL17:
 373 0004 0C0F     		lsr	r4, r1, #28
 374 0006 0368     		ldr	r3, [r0]
 375 0008 A200     		lsl	r2, r4, #2
 376 000a 0F24     		mov	r4, #15
 377 000c 9440     		lsl	r4, r4, r2
 378 000e A343     		bic	r3, r4
 379 0010 0360     		str	r3, [r0]
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy->RMPCR |= (uint32_t)(DMAx_CHy_RemapRequest & 0x0FFFFFFF);  
 380              		.loc 1 369 0
 381 0012 0368     		ldr	r3, [r0]
 382 0014 0A01     		lsl	r2, r1, #4
 383 0016 1109     		lsr	r1, r2, #4
 384              	.LVL18:
 385 0018 1943     		orr	r1, r3
 386 001a 0160     		str	r1, [r0]
 387              		@ sp needed for prologue
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 388              		.loc 1 370 0
 389 001c 10BD     		pop	{r4, pc}
 390              		.cfi_endproc
 391              	.LFE37:
 393              		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 394              		.align	1
 395              		.global	DMA_SetCurrDataCounter
 396              		.code	16
 397              		.thumb_func
 399              	DMA_SetCurrDataCounter:
 400              	.LFB38:
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @}
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *  @brief   Data Counter functions 
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @verbatim
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****                       ##### Data Counter functions #####
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] This subsection provides function allowing to configure and read the buffer 
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          size (number of data to be transferred).The DMA data counter can be written 
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          only when the DMA channel is disabled (ie. after transfer complete event).
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] The following function can be used to write the Channel data counter value:
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (+) void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t 
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              DataNumber).
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     -@- It is advised to use this function rather than DMA_Init() in situations 
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         where only the Data buffer needs to be reloaded.
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] The DMA data counter can be read to indicate the number of remaining transfers 
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          for the relative DMA channel. This counter is decremented at the end of each 
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          data transfer and when the transfer is complete: 
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (+) If Normal mode is selected: the counter is set to 0.
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (+) If Circular mode is selected: the counter is reloaded with the initial 
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          value(configured before enabling the DMA channel).
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] The following function can be used to read the Channel data counter value:
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (+) uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx).
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @endverbatim
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Sets the number of data units in the current DMAy Channelx transfer.
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 1 to 7
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA Channel and 1 to 5 for DMA2 to select the DMA Channel.
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   DMA1 Channel 6 and 7 are available only for STM32F072 and STM32F091 devices. 
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   DMA2 Channel 1 to 5 are available only for STM32F091 devices. 
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DataNumber: The number of data units in the current DMAy Channelx
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         transfer.
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   This function can only be used when the DMAy_Channelx is disabled.
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None.
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 401              		.loc 1 416 0
 402              		.cfi_startproc
 403              	.LVL19:
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Write to DMAy Channelx CNDTR */
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   DMAy_Channelx->CNDTR = DataNumber;
 404              		.loc 1 422 0
 405 0000 4160     		str	r1, [r0, #4]
 406              		@ sp needed for prologue
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 407              		.loc 1 423 0
 408 0002 7047     		bx	lr
 409              		.cfi_endproc
 410              	.LFE38:
 412              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 413              		.align	1
 414              		.global	DMA_GetCurrDataCounter
 415              		.code	16
 416              		.thumb_func
 418              	DMA_GetCurrDataCounter:
 419              	.LFB39:
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Returns the number of remaining data units in the current
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         DMAy Channelx transfer.
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 1 to 7
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA Channel and 1 to 5 for DMA2 to select the DMA Channel.
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   DMA1 Channel 6 and 7 are available only for STM32F072 and STM32F091 devices. 
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   DMA2 Channel 1 to 5 are available only for STM32F091 devices. 
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Channelx
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         transfer.
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 420              		.loc 1 436 0
 421              		.cfi_startproc
 422              	.LVL20:
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Return the number of remaining data units for DMAy Channelx */
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   return ((uint16_t)(DMAy_Channelx->CNDTR));
 423              		.loc 1 440 0
 424 0000 4068     		ldr	r0, [r0, #4]
 425              	.LVL21:
 426              		@ sp needed for prologue
 427 0002 80B2     		uxth	r0, r0
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 428              		.loc 1 441 0
 429 0004 7047     		bx	lr
 430              		.cfi_endproc
 431              	.LFE39:
 433              		.section	.text.DMA_ITConfig,"ax",%progbits
 434              		.align	1
 435              		.global	DMA_ITConfig
 436              		.code	16
 437              		.thumb_func
 439              	DMA_ITConfig:
 440              	.LFB40:
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @}
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /** @defgroup DMA_Group3 Interrupts and flags management functions
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  *
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @verbatim
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****           ##### Interrupts and flags management functions #####
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****  ===============================================================================
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] This subsection provides functions allowing to configure the DMA Interrupts 
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          sources and check or clear the flags or pending bits status.
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          The user should identify which mode will be used in his application to manage 
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          the DMA controller events: Polling mode or Interrupt mode. 
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *** Polling Mode ***
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ====================
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] Each DMA channel can be managed through 4 event Flags:(y : DMA Controller 
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          number  x : DMA channel number ).
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_TCx : to indicate that a Transfer Complete event occurred.
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_HTx : to indicate that a Half-Transfer Complete event occurred.
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_TEx : to indicate that a Transfer Error occurred.
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****          (#) DMAy_FLAG_GLx : to indicate that at least one of the events described 
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****              above occurred.
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     -@- Clearing DMAy_FLAG_GLx results in clearing all other pending flags of the 
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         same channel (DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..]In this Mode it is advised to use the following functions:
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (+) FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG);
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (+) void DMA_ClearFlag(uint32_t DMA_FLAG);
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *** Interrupt Mode ***
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ======================
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..] Each DMA channel can be managed through 4 Interrupts:
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     (+) Interrupt Source
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****        (##) DMA_IT_TC: specifies the interrupt source for the Transfer Complete 
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             event.
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****        (##) DMA_IT_HT : specifies the interrupt source for the Half-transfer Complete 
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             event.
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****        (##) DMA_IT_TE : specifies the interrupt source for the transfer errors event.
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****        (##) DMA_IT_GL : to indicate that at least one of the interrupts described 
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             above occurred.
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     -@@- Clearing DMA_IT_GL interrupt results in clearing all other interrupts of 
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         the same channel (DMA_IT_TCx, DMA_IT_HT and DMA_IT_TE).
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     [..]In this Mode it is advised to use the following functions:
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (+) void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, 
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****             FunctionalState NewState);
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (+) ITStatus DMA_GetITStatus(uint32_t DMA_IT);
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****         (+) void DMA_ClearITPendingBit(uint32_t DMA_IT);
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** @endverbatim
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @{
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx interrupts.
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMAy_Channelx: where y can be 1 to select the DMA and x can be 1 to 7
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         for DMA1 to select the DMA Channel and 1 to 5 for DMA2 to select the DMA Channel.
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   DMA1 Channel 6 and 7 are available only for STM32F072 and STM32F091 devices. 
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   DMA2 Channel 1 to 5 are available only for STM32F091 devices.  
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupts sources to be enabled
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         or disabled. 
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *          This parameter can be any combination of the following values:
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA_IT_TC: Transfer complete interrupt mask
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA_IT_HT: Half transfer interrupt mask
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA_IT_TE: Transfer error interrupt mask
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         This parameter can be: ENABLE or DISABLE.
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 441              		.loc 1 513 0
 442              		.cfi_startproc
 443 0000 00B5     		push	{lr}
 444              	.LCFI4:
 445              		.cfi_def_cfa_offset 4
 446              		.cfi_offset 14, -4
 447              	.LVL22:
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if (NewState != DISABLE)
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Enable the selected DMA interrupts */
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR |= DMA_IT;
 448              		.loc 1 522 0
 449 0002 0368     		ldr	r3, [r0]
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if (NewState != DISABLE)
 450              		.loc 1 519 0
 451 0004 002A     		cmp	r2, #0
 452 0006 02D0     		beq	.L36
 453              		.loc 1 522 0
 454 0008 1943     		orr	r1, r3
 455              	.LVL23:
 456 000a 0160     		str	r1, [r0]
 457 000c 01E0     		b	.L35
 458              	.LVL24:
 459              	.L36:
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Disable the selected DMA interrupts */
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMAy_Channelx->CCR &= ~DMA_IT;
 460              		.loc 1 527 0
 461 000e 8B43     		bic	r3, r1
 462 0010 0360     		str	r3, [r0]
 463              	.LVL25:
 464              	.L35:
 465              		@ sp needed for prologue
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 466              		.loc 1 529 0
 467 0012 00BD     		pop	{pc}
 468              		.cfi_endproc
 469              	.LFE40:
 471              		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 472              		.align	1
 473              		.global	DMA_GetFlagStatus
 474              		.code	16
 475              		.thumb_func
 477              	DMA_GetFlagStatus:
 478              	.LFB41:
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Checks whether the specified DMAy Channelx flag is set or not.
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *          This parameter can be one of the following values:
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag, applicable only for STM32F072 and STM
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag, applicable only for STM32F
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag, applicable only for STM32F072 
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag, applicable only for STM32F072
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag, applicable only for STM32F072 and STM
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag, applicable only for STM32F
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag, applicable only for STM32F072 
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag, applicable only for STM32F072
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag, applicable only for STM32FO91 devices
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag, applicable only for STM32F
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag, applicable only for STM32FO91 
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag, applicable only for STM32FO91
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag, applicable only for STM32FO91 devices
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag, applicable only for STM32F
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag, applicable only for STM32FO91 
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag, applicable only for STM32FO91
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag, applicable only for STM32FO91 devices
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag, applicable only for STM32F
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag, applicable only for STM32FO91 
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag, applicable only for STM32FO91
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag, applicable only for STM32FO91 devices
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag, applicable only for STM32F
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag, applicable only for STM32FO91 
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag, applicable only for STM32FO91
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag, applicable only for STM32FO91 devices
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag, applicable only for STM32F
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag, applicable only for STM32FO91 
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag, applicable only for STM32FO91
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   The Global flag (DMAy_FLAG_GLx) is set whenever any of the other flags 
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         relative to the same channel is set (Transfer Complete, Half-transfer 
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         Complete or Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx or 
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         DMAy_FLAG_TEx). 
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *      
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 479              		.loc 1 591 0
 480              		.cfi_startproc
 481 0000 00B5     		push	{lr}
 482              	.LCFI5:
 483              		.cfi_def_cfa_offset 4
 484              		.cfi_offset 14, -4
 485              	.LVL26:
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   FlagStatus bitstatus = RESET;
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   uint32_t tmpreg = 0;
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Calculate the used DMAy */
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 486              		.loc 1 599 0
 487 0002 C300     		lsl	r3, r0, #3
 488 0004 01D5     		bpl	.L39
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Get DMA2 ISR register value */
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     tmpreg = DMA2->ISR ;
 489              		.loc 1 602 0
 490 0006 044B     		ldr	r3, .L42
 491 0008 00E0     		b	.L41
 492              	.L39:
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Get DMA1 ISR register value */
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     tmpreg = DMA1->ISR ;
 493              		.loc 1 607 0
 494 000a 044B     		ldr	r3, .L42+4
 495              	.L41:
 496 000c 1B68     		ldr	r3, [r3]
 497              	.LVL27:
 498              		@ sp needed for prologue
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the status of the specified DMAy flag */
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 499              		.loc 1 611 0
 500 000e 1840     		and	r0, r3
 501              	.LVL28:
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* DMAy_FLAG is set */
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     bitstatus = SET;
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* DMAy_FLAG is reset */
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     bitstatus = RESET;
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Return the DMAy_FLAG status */
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   return  bitstatus;
 502              		.loc 1 623 0
 503 0010 431E     		sub	r3, r0, #1
 504 0012 9841     		sbc	r0, r0, r3
 505              	.LVL29:
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 506              		.loc 1 624 0
 507 0014 00BD     		pop	{pc}
 508              	.L43:
 509 0016 C046     		.align	2
 510              	.L42:
 511 0018 00040240 		.word	1073873920
 512 001c 00000240 		.word	1073872896
 513              		.cfi_endproc
 514              	.LFE41:
 516              		.section	.text.DMA_ClearFlag,"ax",%progbits
 517              		.align	1
 518              		.global	DMA_ClearFlag
 519              		.code	16
 520              		.thumb_func
 522              	DMA_ClearFlag:
 523              	.LFB42:
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Clears the DMAy Channelx's pending flags.
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *          This parameter can be any combination (for the same DMA) of the following values:
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag, applicable only for STM32F072 and STM
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag, applicable only for STM32F
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag, applicable only for STM32F072 
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag, applicable only for STM32F072
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag, applicable only for STM32F072 and STM
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag, applicable only for STM32F
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag, applicable only for STM32F072 
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag, applicable only for STM32F072
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag, applicable only for STM32FO91 devices
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag, applicable only for STM32F
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag, applicable only for STM32FO91 
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag, applicable only for STM32FO91
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag, applicable only for STM32FO91 devices
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag, applicable only for STM32F
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag, applicable only for STM32FO91 
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag, applicable only for STM32FO91
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag, applicable only for STM32FO91 devices
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag, applicable only for STM32F
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag, applicable only for STM32FO91 
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag, applicable only for STM32FO91
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag, applicable only for STM32FO91 devices
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag, applicable only for STM32F
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag, applicable only for STM32FO91 
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag, applicable only for STM32FO91
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag, applicable only for STM32FO91 devices
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag, applicable only for STM32F
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag, applicable only for STM32FO91 
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag, applicable only for STM32FO91
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *              
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   Clearing the Global flag (DMAy_FLAG_GLx) results in clearing all other flags
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         relative to the same channel (Transfer Complete, Half-transfer Complete and
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         Transfer Error flags: DMAy_FLAG_TCx, DMAy_FLAG_HTx and DMAy_FLAG_TEx).
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_ClearFlag(uint32_t DMAy_FLAG)
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 524              		.loc 1 686 0
 525              		.cfi_startproc
 526 0000 00B5     		push	{lr}
 527              	.LCFI6:
 528              		.cfi_def_cfa_offset 4
 529              		.cfi_offset 14, -4
 530              	.LVL30:
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /* Calculate the used DMAy */
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 531              		.loc 1 691 0
 532 0002 C300     		lsl	r3, r0, #3
 533 0004 01D5     		bpl	.L45
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Clear the selected DMAy flags */
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA2->IFCR = DMAy_FLAG;
 534              		.loc 1 694 0
 535 0006 024B     		ldr	r3, .L48
 536 0008 00E0     		b	.L47
 537              	.L45:
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Clear the selected DMAy flags */
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR = DMAy_FLAG;
 538              		.loc 1 699 0
 539 000a 024B     		ldr	r3, .L48+4
 540              	.L47:
 541 000c 5860     		str	r0, [r3, #4]
 542              		@ sp needed for prologue
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 543              		.loc 1 701 0
 544 000e 00BD     		pop	{pc}
 545              	.L49:
 546              		.align	2
 547              	.L48:
 548 0010 00040240 		.word	1073873920
 549 0014 00000240 		.word	1073872896
 550              		.cfi_endproc
 551              	.LFE42:
 553              		.section	.text.DMA_GetITStatus,"ax",%progbits
 554              		.align	1
 555              		.global	DMA_GetITStatus
 556              		.code	16
 557              		.thumb_func
 559              	DMA_GetITStatus:
 560              	.LFB43:
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Checks whether the specified DMAy Channelx interrupt has occurred or not.
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check. 
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *          This parameter can be one of the following values:
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt, applicable only for STM32F072 and 
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt, applicable only for STM
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt, applicable only for STM32F0
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt, applicable only for STM32F
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt, applicable only for STM32F072 and 
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt, applicable only for STM
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt, applicable only for STM32F0
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt, applicable only for STM32F
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt, applicable only for STM32FO91 devi
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt, applicable only for STM
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt, applicable only for STM32FO
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt, applicable only for STM32F
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt, applicable only for STM32FO91 devi
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt, applicable only for STM
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt, applicable only for STM32FO
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt, applicable only for STM32F
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt, applicable only for STM32FO91 devi
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt, applicable only for STM
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt, applicable only for STM32FO
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt, applicable only for STM32F
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt, applicable only for STM32FO91 devi
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt, applicable only for STM
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt, applicable only for STM32FO
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt, applicable only for STM32F
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt, applicable only for STM32FO91 devi
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt, applicable only for STM
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt, applicable only for STM32FO
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt, applicable only for STM32F
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   The Global interrupt (DMAy_FLAG_GLx) is set whenever any of the other 
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         interrupts relative to the same channel is set (Transfer Complete, 
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         Half-transfer Complete or Transfer Error interrupts: DMAy_IT_TCx, 
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         DMAy_IT_HTx or DMAy_IT_TEx). 
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *      
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 561              		.loc 1 763 0
 562              		.cfi_startproc
 563 0000 00B5     		push	{lr}
 564              	.LCFI7:
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 14, -4
 567              	.LVL31:
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   ITStatus bitstatus = RESET;
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   uint32_t tmpreg = 0;
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMAy_IT));
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Calculate the used DMA */
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 568              		.loc 1 771 0
 569 0002 C300     		lsl	r3, r0, #3
 570 0004 01D5     		bpl	.L51
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Get DMA2 ISR register value */
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     tmpreg = DMA2->ISR;
 571              		.loc 1 774 0
 572 0006 044B     		ldr	r3, .L54
 573 0008 00E0     		b	.L53
 574              	.L51:
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Get DMA1 ISR register value */
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     tmpreg = DMA1->ISR;
 575              		.loc 1 779 0
 576 000a 044B     		ldr	r3, .L54+4
 577              	.L53:
 578 000c 1B68     		ldr	r3, [r3]
 579              	.LVL32:
 580              		@ sp needed for prologue
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the status of the specified DMAy interrupt */
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 581              		.loc 1 783 0
 582 000e 1840     		and	r0, r3
 583              	.LVL33:
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* DMAy_IT is set */
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     bitstatus = SET;
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* DMAy_IT is reset */
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     bitstatus = RESET;
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Return the DMAy_IT status */
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   return  bitstatus;
 584              		.loc 1 794 0
 585 0010 431E     		sub	r3, r0, #1
 586 0012 9841     		sbc	r0, r0, r3
 587              	.LVL34:
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 588              		.loc 1 795 0
 589 0014 00BD     		pop	{pc}
 590              	.L55:
 591 0016 C046     		.align	2
 592              	.L54:
 593 0018 00040240 		.word	1073873920
 594 001c 00000240 		.word	1073872896
 595              		.cfi_endproc
 596              	.LFE43:
 598              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 599              		.align	1
 600              		.global	DMA_ClearITPendingBit
 601              		.code	16
 602              		.thumb_func
 604              	DMA_ClearITPendingBit:
 605              	.LFB44:
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** 
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** /**
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @brief  Clears the DMAy Channelx's interrupt pending bits.
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *          This parameter can be any combination (for the same DMA) of the following values:
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt, applicable only for STM32F072 and 
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt, applicable only for STM
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt, applicable only for STM32F0
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt, applicable only for STM32F
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt, applicable only for STM32F072 and 
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt, applicable only for STM
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt, applicable only for STM32F0
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt, applicable only for STM32F
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt, applicable only for STM32FO91 devi
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt, applicable only for STM
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt, applicable only for STM32FO
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt, applicable only for STM32F
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt, applicable only for STM32FO91 devi
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt, applicable only for STM
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt, applicable only for STM32FO
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt, applicable only for STM32F
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt, applicable only for STM32FO91 devi
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt, applicable only for STM
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt, applicable only for STM32FO
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt, applicable only for STM32F
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt, applicable only for STM32FO91 devi
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt, applicable only for STM
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt, applicable only for STM32FO
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt, applicable only for STM32F
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt, applicable only for STM32FO91 devi
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt, applicable only for STM
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt, applicable only for STM32FO
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *            @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt, applicable only for STM32F
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *     
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @note   Clearing the Global interrupt (DMAy_IT_GLx) results in clearing all other 
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         interrupts relative to the same channel (Transfer Complete, Half-transfer 
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         Complete and Transfer Error interrupts: DMAy_IT_TCx, DMAy_IT_HTx and 
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *         DMAy_IT_TEx).  
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   *        
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   * @retval None
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   */
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** void DMA_ClearITPendingBit(uint32_t DMAy_IT)
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** {
 606              		.loc 1 858 0
 607              		.cfi_startproc
 608 0000 00B5     		push	{lr}
 609              	.LCFI8:
 610              		.cfi_def_cfa_offset 4
 611              		.cfi_offset 14, -4
 612              	.LVL35:
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Check the parameters */
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   /* Calculate the used DMAy */
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 613              		.loc 1 863 0
 614 0002 C300     		lsl	r3, r0, #3
 615 0004 01D5     		bpl	.L57
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA2->IFCR = DMAy_IT;
 616              		.loc 1 866 0
 617 0006 024B     		ldr	r3, .L60
 618 0008 00E0     		b	.L59
 619              	.L57:
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   else
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   {
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****     DMA1->IFCR = DMAy_IT;
 620              		.loc 1 871 0
 621 000a 024B     		ldr	r3, .L60+4
 622              	.L59:
 623 000c 5860     		str	r0, [r3, #4]
 624              		@ sp needed for prologue
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c ****   }
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_dma.c **** }
 625              		.loc 1 873 0
 626 000e 00BD     		pop	{pc}
 627              	.L61:
 628              		.align	2
 629              	.L60:
 630 0010 00040240 		.word	1073873920
 631 0014 00000240 		.word	1073872896
 632              		.cfi_endproc
 633              	.LFE44:
 635              		.text
 636              	.Letext0:
 637              		.file 2 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 638              		.file 3 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/stm32f
 639              		.file 4 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\ST
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_dma.c
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:18     .text.DMA_DeInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:23     .text.DMA_DeInit:00000000 DMA_DeInit
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:185    .text.DMA_DeInit:000000b8 $d
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:204    .text.DMA_Init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:209    .text.DMA_Init:00000000 DMA_Init
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:269    .text.DMA_Init:00000038 $d
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:274    .text.DMA_StructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:279    .text.DMA_StructInit:00000000 DMA_StructInit
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:314    .text.DMA_Cmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:319    .text.DMA_Cmd:00000000 DMA_Cmd
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:350    .text.DMA_Cmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:355    .text.DMA_RemapConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:360    .text.DMA_RemapConfig:00000000 DMA_RemapConfig
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:394    .text.DMA_SetCurrDataCounter:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:399    .text.DMA_SetCurrDataCounter:00000000 DMA_SetCurrDataCounter
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:413    .text.DMA_GetCurrDataCounter:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:418    .text.DMA_GetCurrDataCounter:00000000 DMA_GetCurrDataCounter
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:434    .text.DMA_ITConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:439    .text.DMA_ITConfig:00000000 DMA_ITConfig
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:472    .text.DMA_GetFlagStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:477    .text.DMA_GetFlagStatus:00000000 DMA_GetFlagStatus
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:511    .text.DMA_GetFlagStatus:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:517    .text.DMA_ClearFlag:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:522    .text.DMA_ClearFlag:00000000 DMA_ClearFlag
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:548    .text.DMA_ClearFlag:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:554    .text.DMA_GetITStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:559    .text.DMA_GetITStatus:00000000 DMA_GetITStatus
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:593    .text.DMA_GetITStatus:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:599    .text.DMA_ClearITPendingBit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:604    .text.DMA_ClearITPendingBit:00000000 DMA_ClearITPendingBit
C:\Users\khanh\AppData\Local\Temp\ccIOBBlE.s:630    .text.DMA_ClearITPendingBit:00000010 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
