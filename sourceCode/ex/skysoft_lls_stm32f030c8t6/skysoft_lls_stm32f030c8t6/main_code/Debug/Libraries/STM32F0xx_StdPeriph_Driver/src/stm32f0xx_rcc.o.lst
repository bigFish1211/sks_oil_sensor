   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_rcc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RCC_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	RCC_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	RCC_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @file    stm32f0xx_rcc.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + Peripheral clocks configuration
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           + Interrupts and flags management
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  @verbatim
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                         ##### RCC specific features #####
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] After reset the device is running from HSI (8 MHz) with Flash 0 WS, 
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          all peripherals are off except internal SRAM, Flash and SWD.
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              all peripherals mapped on these busses are running at HSI speed.
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) The clock for all peripherals is switched off, except the SRAM and FLASH.
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) All GPIOs are in input floating state, except the SWD pins which
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              are assigned to be used for debug purpose.
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] Once the device started from reset, the user application has to:
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the clock source to be used to drive the System clock
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (if the application needs higher frequency/performance)
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the System clock frequency and Flash settings
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the AHB and APB busses prescalers
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Enable the clock for the peripheral(s) to be used
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Configure the clock source(s) for peripherals which clocks are not
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              derived from the System clock (ADC, CEC, I2C, USART, RTC and IWDG)
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  @endverbatim
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ******************************************************************************
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @attention
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * You may not use this file except in compliance with the License.
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * You may obtain a copy of the License at:
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * See the License for the specific language governing permissions and
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * limitations under the License.
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ******************************************************************************
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #include "stm32f0xx_rcc.h"
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC 
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief RCC driver modules
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */ 
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* ---------------------- RCC registers mask -------------------------------- */
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* RCC Flag Mask */
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CR register byte 2 (Bits[23:16]) base address */
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CR_BYTE2_ADDRESS          ((uint32_t)0x40021002)
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CFGR register byte 3 (Bits[31:23]) base address */
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CFGR_BYTE3_ADDRESS        ((uint32_t)0x40021007)
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CIR register byte 1 (Bits[15:8]) base address */
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CIR_BYTE1_ADDRESS         ((uint32_t)0x40021009)
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* CIR register byte 2 (Bits[23:16]) base address */
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x4002100A)
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Private_Functions
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ##### Internal-external clocks, PLL, CSS and MCO configuration functions #####
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] This section provides functions allowing to configure the internal/external clocks,
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          PLL, CSS and MCO.
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly 
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              or through the PLL as System clock source.
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              The HSI clock can be used also to clock the USART, I2C and CEC peripherals.
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) HSI14 (high-speed internal for ADC), 14 MHz factory-trimmed RC used to clock
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              the ADC peripheral.
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) LSI (low-speed internal), 40 KHz low consumption RC used as IWDG and/or RTC
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              clock source.
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) HSE (high-speed external), 4 to 32 MHz crystal oscillator used directly or
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source. 
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              LSE can be used also to clock the USART and CEC peripherals.   
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) PLL (clocked by HSI or HSE), for System clock.
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) CSS (Clock security system), once enabled and if a HSE clock failure occurs 
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (HSE used directly or through PLL as System clock source), the System clock
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              is automatically switched to HSI and an interrupt is generated if enabled. 
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              The interrupt is linked to the Cortex-M0 NMI (Non-Maskable Interrupt) 
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              exception vector.   
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) MCO (microcontroller clock output), used to output SYSCLK, HSI, HSI14, LSI,
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              HSE, LSE or PLL (divided by 2) clock on PA8 pin.
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      HSI ON and used as system clock source 
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      HSI14, HSE and PLL OFF
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      AHB, APB prescaler set to 1.
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      CSS and MCO OFF
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      All interrupts disabled
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   However, this function doesn't modify the configuration of the
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      Peripheral clocks
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note      LSI, LSE and RTC clocks
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_DeInit(void)
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
  26              		.loc 1 147 0
  27              		.cfi_startproc
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set HSION bit */
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  28              		.loc 1 149 0
  29 0000 114B     		ldr	r3, .L2
  30 0002 0122     		mov	r2, #1
  31 0004 1968     		ldr	r1, [r3]
  32              		@ sp needed for prologue
  33 0006 1143     		orr	r1, r2
  34 0008 1960     		str	r1, [r3]
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #if defined (STM32F051)
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80C;
  35              		.loc 1 153 0
  36 000a 5868     		ldr	r0, [r3, #4]
  37 000c 0F49     		ldr	r1, .L2+4
  38 000e 0140     		and	r1, r0
  39 0010 5960     		str	r1, [r3, #4]
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #else
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0x08FFB80C;
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #endif /* STM32F051 */
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  40              		.loc 1 160 0
  41 0012 1868     		ldr	r0, [r3]
  42 0014 0E49     		ldr	r1, .L2+8
  43 0016 0140     		and	r1, r0
  44 0018 1960     		str	r1, [r3]
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSEBYP bit */
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  45              		.loc 1 163 0
  46 001a 1868     		ldr	r0, [r3]
  47 001c 0D49     		ldr	r1, .L2+12
  48 001e 0140     		and	r1, r0
  49 0020 1960     		str	r1, [r3]
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFF;
  50              		.loc 1 166 0
  51 0022 5868     		ldr	r0, [r3, #4]
  52 0024 0C49     		ldr	r1, .L2+16
  53 0026 0140     		and	r1, r0
  54 0028 5960     		str	r1, [r3, #4]
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset PREDIV1[3:0] bits */
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
  55              		.loc 1 169 0
  56 002a D96A     		ldr	r1, [r3, #44]
  57 002c 0F20     		mov	r0, #15
  58 002e 8143     		bic	r1, r0
  59 0030 D962     		str	r1, [r3, #44]
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
  60              		.loc 1 172 0
  61 0032 186B     		ldr	r0, [r3, #48]
  62 0034 0949     		ldr	r1, .L2+20
  63 0036 0140     		and	r1, r0
  64 0038 1963     		str	r1, [r3, #48]
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSI14 bit */
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
  65              		.loc 1 175 0
  66 003a 596B     		ldr	r1, [r3, #52]
  67 003c 9143     		bic	r1, r2
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Disable all interrupts */
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CIR = 0x00000000;
  68              		.loc 1 178 0
  69 003e 0022     		mov	r2, #0
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFE;
  70              		.loc 1 175 0
  71 0040 5963     		str	r1, [r3, #52]
  72              		.loc 1 178 0
  73 0042 9A60     		str	r2, [r3, #8]
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
  74              		.loc 1 179 0
  75 0044 7047     		bx	lr
  76              	.L3:
  77 0046 C046     		.align	2
  78              	.L2:
  79 0048 00100240 		.word	1073876992
  80 004c 0CB8FFF8 		.word	-117458932
  81 0050 FFFFF6FE 		.word	-17367041
  82 0054 FFFFFBFF 		.word	-262145
  83 0058 FFFFC0FF 		.word	-4128769
  84 005c ACFEF0FF 		.word	-983380
  85              		.cfi_endproc
  86              	.LFE33:
  88              		.section	.text.RCC_HSEConfig,"ax",%progbits
  89              		.align	1
  90              		.global	RCC_HSEConfig
  91              		.code	16
  92              		.thumb_func
  94              	RCC_HSEConfig:
  95              	.LFB34:
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function resets the CSSON bit, so if the Clock security system(CSS)
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         function.
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
  96              		.loc 1 202 0
  97              		.cfi_startproc
  98              	.LVL0:
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
  99              		.loc 1 207 0
 100 0000 024B     		ldr	r3, .L5
 101 0002 0022     		mov	r2, #0
 102 0004 1A70     		strb	r2, [r3]
 103              		@ sp needed for prologue
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 104              		.loc 1 210 0
 105 0006 1870     		strb	r0, [r3]
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 106              		.loc 1 212 0
 107 0008 7047     		bx	lr
 108              	.L6:
 109 000a C046     		.align	2
 110              	.L5:
 111 000c 02100240 		.word	1073876994
 112              		.cfi_endproc
 113              	.LFE34:
 115              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 116              		.align	1
 117              		.global	RCC_AdjustHSICalibrationValue
 118              		.code	16
 119              		.thumb_func
 121              	RCC_AdjustHSICalibrationValue:
 122              	.LFB36:
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Waits for HSE start-up.
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function waits on HSERDY flag to be set and return SUCCESS if 
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f0xx.h file. You can tailor it depending
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         on the HSE crystal used in your application.
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ErrorStatus status = ERROR;
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   FlagStatus HSEStatus = RESET;
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Wait till HSE is ready and if timeout is reached exit */
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   do
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     StartUpCounter++;  
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     status = SUCCESS;
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     status = ERROR;
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }  
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return (status);
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         Refer to the Application Note AN4067 for more details on how to  
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         calibrate the HSI.
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  HSICalibrationValue: specifies the HSI calibration trimming value.
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter must be a number between 0 and 0x1F.
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 123              		.loc 1 262 0
 124              		.cfi_startproc
 125              	.LVL1:
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CR;
 126              		.loc 1 268 0
 127 0000 034B     		ldr	r3, .L8
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 128              		.loc 1 271 0
 129 0002 F821     		mov	r1, #248
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CR;
 130              		.loc 1 268 0
 131 0004 1A68     		ldr	r2, [r3]
 132              	.LVL2:
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 133              		.loc 1 274 0
 134 0006 C000     		lsl	r0, r0, #3
 135              	.LVL3:
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 136              		.loc 1 271 0
 137 0008 8A43     		bic	r2, r1
 138              	.LVL4:
 139              		.loc 1 274 0
 140 000a 1043     		orr	r0, r2
 141              	.LVL5:
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR = tmpreg;
 142              		.loc 1 277 0
 143 000c 1860     		str	r0, [r3]
 144              		@ sp needed for prologue
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 145              		.loc 1 278 0
 146 000e 7047     		bx	lr
 147              	.L9:
 148              		.align	2
 149              	.L8:
 150 0010 00100240 		.word	1073876992
 151              		.cfi_endproc
 152              	.LFE36:
 154              		.section	.text.RCC_HSICmd,"ax",%progbits
 155              		.align	1
 156              		.global	RCC_HSICmd
 157              		.code	16
 158              		.thumb_func
 160              	RCC_HSICmd:
 161              	.LFB37:
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on 
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         HSIRDY flag to be set indicating that HSI clock is stable and can
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         be used to clock the PLL and/or system clock.
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         as system clock. In this case, you have to select another source 
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         of the system clock then stop the HSI.
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the HSI.
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         clock cycles.
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 162              		.loc 1 296 0
 163              		.cfi_startproc
 164 0000 00B5     		push	{lr}
 165              	.LCFI0:
 166              		.cfi_def_cfa_offset 4
 167              		.cfi_offset 14, -4
 168              	.LVL6:
 169 0002 054B     		ldr	r3, .L14
 170 0004 0122     		mov	r2, #1
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR |= RCC_CR_HSION;
 171              		.loc 1 302 0
 172 0006 1968     		ldr	r1, [r3]
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 173              		.loc 1 300 0
 174 0008 0028     		cmp	r0, #0
 175 000a 01D0     		beq	.L11
 176              		.loc 1 302 0
 177 000c 0A43     		orr	r2, r1
 178 000e 01E0     		b	.L13
 179              	.L11:
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_HSION;
 180              		.loc 1 306 0
 181 0010 9143     		bic	r1, r2
 182 0012 0A1C     		mov	r2, r1
 183              	.L13:
 184 0014 1A60     		str	r2, [r3]
 185              		@ sp needed for prologue
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 186              		.loc 1 308 0
 187 0016 00BD     		pop	{pc}
 188              	.L15:
 189              		.align	2
 190              	.L14:
 191 0018 00100240 		.word	1073876992
 192              		.cfi_endproc
 193              	.LFE37:
 195              		.section	.text.RCC_AdjustHSI14CalibrationValue,"ax",%progbits
 196              		.align	1
 197              		.global	RCC_AdjustHSI14CalibrationValue
 198              		.code	16
 199              		.thumb_func
 201              	RCC_AdjustHSI14CalibrationValue:
 202              	.LFB38:
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator for ADC (HSI14) 
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         calibration value.
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         Refer to the Application Note AN4067  for more details on how to  
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         calibrate the HSI14.
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  HSI14CalibrationValue: specifies the HSI14 calibration trimming value.
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter must be a number between 0 and 0x1F.
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AdjustHSI14CalibrationValue(uint8_t HSI14CalibrationValue)
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 203              		.loc 1 322 0
 204              		.cfi_startproc
 205              	.LVL7:
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CR2;
 206              		.loc 1 328 0
 207 0000 034B     		ldr	r3, .L17
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear HSI14TRIM[4:0] bits */
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CR2_HSI14TRIM;
 208              		.loc 1 331 0
 209 0002 F821     		mov	r1, #248
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CR2;
 210              		.loc 1 328 0
 211 0004 5A6B     		ldr	r2, [r3, #52]
 212              	.LVL8:
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 213              		.loc 1 334 0
 214 0006 C000     		lsl	r0, r0, #3
 215              	.LVL9:
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CR2_HSI14TRIM;
 216              		.loc 1 331 0
 217 0008 8A43     		bic	r2, r1
 218              	.LVL10:
 219              		.loc 1 334 0
 220 000a 1043     		orr	r0, r2
 221              	.LVL11:
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CR2 = tmpreg;
 222              		.loc 1 337 0
 223 000c 5863     		str	r0, [r3, #52]
 224              		@ sp needed for prologue
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 225              		.loc 1 338 0
 226 000e 7047     		bx	lr
 227              	.L18:
 228              		.align	2
 229              	.L17:
 230 0010 00100240 		.word	1073876992
 231              		.cfi_endproc
 232              	.LFE38:
 234              		.section	.text.RCC_HSI14Cmd,"ax",%progbits
 235              		.align	1
 236              		.global	RCC_HSI14Cmd
 237              		.code	16
 238              		.thumb_func
 240              	RCC_HSI14Cmd:
 241              	.LFB39:
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator for ADC (HSI14).
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the HSI14, the application software should wait on 
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         HSIRDY flag to be set indicating that HSI clock is stable and can
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         be used to clock the ADC.
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSI14 is stopped by hardware when entering STOP and STANDBY modes.
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the HSI14.
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   When the HSI14 is stopped, HSI14RDY flag goes low after 6 HSI14 oscillator
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         clock cycles.
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSI14Cmd(FunctionalState NewState)
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 242              		.loc 1 353 0
 243              		.cfi_startproc
 244 0000 00B5     		push	{lr}
 245              	.LCFI1:
 246              		.cfi_def_cfa_offset 4
 247              		.cfi_offset 14, -4
 248              	.LVL12:
 249 0002 054B     		ldr	r3, .L23
 250 0004 0122     		mov	r2, #1
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 |= RCC_CR2_HSI14ON;
 251              		.loc 1 359 0
 252 0006 596B     		ldr	r1, [r3, #52]
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 253              		.loc 1 357 0
 254 0008 0028     		cmp	r0, #0
 255 000a 01D0     		beq	.L20
 256              		.loc 1 359 0
 257 000c 0A43     		orr	r2, r1
 258 000e 01E0     		b	.L22
 259              	.L20:
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 &= ~RCC_CR2_HSI14ON;
 260              		.loc 1 363 0
 261 0010 9143     		bic	r1, r2
 262 0012 0A1C     		mov	r2, r1
 263              	.L22:
 264 0014 5A63     		str	r2, [r3, #52]
 265              		@ sp needed for prologue
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 266              		.loc 1 365 0
 267 0016 00BD     		pop	{pc}
 268              	.L24:
 269              		.align	2
 270              	.L23:
 271 0018 00100240 		.word	1073876992
 272              		.cfi_endproc
 273              	.LFE39:
 275              		.section	.text.RCC_HSI14ADCRequestCmd,"ax",%progbits
 276              		.align	1
 277              		.global	RCC_HSI14ADCRequestCmd
 278              		.code	16
 279              		.thumb_func
 281              	RCC_HSI14ADCRequestCmd:
 282              	.LFB40:
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator request from ADC.
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the HSI14 ADC request.
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 283              		.loc 1 374 0
 284              		.cfi_startproc
 285 0000 00B5     		push	{lr}
 286              	.LCFI2:
 287              		.cfi_def_cfa_offset 4
 288              		.cfi_offset 14, -4
 289              	.LVL13:
 290 0002 054B     		ldr	r3, .L29
 291 0004 0422     		mov	r2, #4
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 292              		.loc 1 380 0
 293 0006 596B     		ldr	r1, [r3, #52]
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 294              		.loc 1 378 0
 295 0008 0028     		cmp	r0, #0
 296 000a 02D0     		beq	.L26
 297              		.loc 1 380 0
 298 000c 9143     		bic	r1, r2
 299 000e 0A1C     		mov	r2, r1
 300 0010 00E0     		b	.L28
 301              	.L26:
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 |= RCC_CR2_HSI14DIS;
 302              		.loc 1 384 0
 303 0012 0A43     		orr	r2, r1
 304              	.L28:
 305 0014 5A63     		str	r2, [r3, #52]
 306              		@ sp needed for prologue
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 307              		.loc 1 386 0
 308 0016 00BD     		pop	{pc}
 309              	.L30:
 310              		.align	2
 311              	.L29:
 312 0018 00100240 		.word	1073876992
 313              		.cfi_endproc
 314              	.LFE40:
 316              		.section	.text.RCC_LSEConfig,"ax",%progbits
 317              		.align	1
 318              		.global	RCC_LSEConfig
 319              		.code	16
 320              		.thumb_func
 322              	RCC_LSEConfig:
 323              	.LFB41:
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to this
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         domain after reset, you have to enable write access using 
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         (to be done once after reset).
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_LSEConfig(uint32_t RCC_LSE)
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 324              		.loc 1 406 0
 325              		.cfi_startproc
 326              	.LVL14:
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset LSEON bit */
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEON);
 327              		.loc 1 412 0
 328 0000 064B     		ldr	r3, .L32
 329 0002 0121     		mov	r1, #1
 330 0004 1A6A     		ldr	r2, [r3, #32]
 331              		@ sp needed for prologue
 332 0006 8A43     		bic	r2, r1
 333 0008 1A62     		str	r2, [r3, #32]
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Reset LSEBYP bit */
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 334              		.loc 1 415 0
 335 000a 1A6A     		ldr	r2, [r3, #32]
 336 000c 0421     		mov	r1, #4
 337 000e 8A43     		bic	r2, r1
 338 0010 1A62     		str	r2, [r3, #32]
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Configure LSE */
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_LSE;
 339              		.loc 1 418 0
 340 0012 1A6A     		ldr	r2, [r3, #32]
 341 0014 1043     		orr	r0, r2
 342              	.LVL15:
 343 0016 1862     		str	r0, [r3, #32]
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 344              		.loc 1 419 0
 345 0018 7047     		bx	lr
 346              	.L33:
 347 001a C046     		.align	2
 348              	.L32:
 349 001c 00100240 		.word	1073876992
 350              		.cfi_endproc
 351              	.LFE41:
 353              		.section	.text.RCC_LSEDriveConfig,"ax",%progbits
 354              		.align	1
 355              		.global	RCC_LSEDriveConfig
 356              		.code	16
 357              		.thumb_func
 359              	RCC_LSEDriveConfig:
 360              	.LFB42:
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE) drive capability.
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_LSEDrive: specifies the new state of the LSE drive capability.
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_Low: LSE oscillator low drive capability.
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_MediumLow: LSE oscillator medium low drive capability.
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_MediumHigh: LSE oscillator medium high drive capability.
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_LSEDrive_High: LSE oscillator high drive capability.
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_LSEDriveConfig(uint32_t RCC_LSEDrive)
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 361              		.loc 1 432 0
 362              		.cfi_startproc
 363              	.LVL16:
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear LSEDRV[1:0] bits */
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 364              		.loc 1 437 0
 365 0000 044B     		ldr	r3, .L35
 366 0002 1821     		mov	r1, #24
 367 0004 1A6A     		ldr	r2, [r3, #32]
 368              		@ sp needed for prologue
 369 0006 8A43     		bic	r2, r1
 370 0008 1A62     		str	r2, [r3, #32]
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the LSE Drive */
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_LSEDrive;
 371              		.loc 1 440 0
 372 000a 1A6A     		ldr	r2, [r3, #32]
 373 000c 1043     		orr	r0, r2
 374              	.LVL17:
 375 000e 1862     		str	r0, [r3, #32]
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 376              		.loc 1 441 0
 377 0010 7047     		bx	lr
 378              	.L36:
 379 0012 C046     		.align	2
 380              	.L35:
 381 0014 00100240 		.word	1073876992
 382              		.cfi_endproc
 383              	.LFE42:
 385              		.section	.text.RCC_LSICmd,"ax",%progbits
 386              		.align	1
 387              		.global	RCC_LSICmd
 388              		.code	16
 389              		.thumb_func
 391              	RCC_LSICmd:
 392              	.LFB43:
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the LSI.
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         clock cycles.
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 393              		.loc 1 456 0
 394              		.cfi_startproc
 395 0000 00B5     		push	{lr}
 396              	.LCFI3:
 397              		.cfi_def_cfa_offset 4
 398              		.cfi_offset 14, -4
 399              	.LVL18:
 400 0002 054B     		ldr	r3, .L41
 401 0004 0122     		mov	r2, #1
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CSR |= RCC_CSR_LSION;
 402              		.loc 1 462 0
 403 0006 596A     		ldr	r1, [r3, #36]
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 404              		.loc 1 460 0
 405 0008 0028     		cmp	r0, #0
 406 000a 01D0     		beq	.L38
 407              		.loc 1 462 0
 408 000c 0A43     		orr	r2, r1
 409 000e 01E0     		b	.L40
 410              	.L38:
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CSR &= ~RCC_CSR_LSION;
 411              		.loc 1 466 0
 412 0010 9143     		bic	r1, r2
 413 0012 0A1C     		mov	r2, r1
 414              	.L40:
 415 0014 5A62     		str	r2, [r3, #36]
 416              		@ sp needed for prologue
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 417              		.loc 1 468 0
 418 0016 00BD     		pop	{pc}
 419              	.L42:
 420              		.align	2
 421              	.L41:
 422 0018 00100240 		.word	1073876992
 423              		.cfi_endproc
 424              	.LFE43:
 426              		.section	.text.RCC_PLLConfig,"ax",%progbits
 427              		.align	1
 428              		.global	RCC_PLLConfig
 429              		.code	16
 430              		.thumb_func
 432              	RCC_PLLConfig:
 433              	.LFB44:
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock selected as PLL clock source
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_PLLSource_HSI48 HSI48 oscillator clock selected as PLL clock source, applic
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI clock selected as PLL clock entry, applicable only for S
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The minimum input clock frequency for PLL is 2 MHz (when using HSE as
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         PLL source).
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor, which drive the PLLVCO clock
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be RCC_PLLMul_x where x:[2,16] 
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 434              		.loc 1 489 0
 435              		.cfi_startproc
 436 0000 10B5     		push	{r4, lr}
 437              	.LCFI4:
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 4, -8
 440              		.cfi_offset 14, -4
 441              	.LVL19:
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear PLL Source [16] and Multiplier [21:18] bits */
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 442              		.loc 1 495 0
 443 0002 054B     		ldr	r3, .L44
 444 0004 054A     		ldr	r2, .L44+4
 445 0006 5C68     		ldr	r4, [r3, #4]
 446              		@ sp needed for prologue
 447 0008 2240     		and	r2, r4
 448 000a 5A60     		str	r2, [r3, #4]
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the PLL Source and Multiplier */
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 449              		.loc 1 498 0
 450 000c 5A68     		ldr	r2, [r3, #4]
 451 000e 1043     		orr	r0, r2
 452              	.LVL20:
 453 0010 0843     		orr	r0, r1
 454 0012 5860     		str	r0, [r3, #4]
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 455              		.loc 1 499 0
 456 0014 10BD     		pop	{r4, pc}
 457              	.L45:
 458 0016 C046     		.align	2
 459              	.L44:
 460 0018 00100240 		.word	1073876992
 461 001c FF7FC2FF 		.word	-4030465
 462              		.cfi_endproc
 463              	.LFE44:
 465              		.section	.text.RCC_PLLCmd,"ax",%progbits
 466              		.align	1
 467              		.global	RCC_PLLCmd
 468              		.code	16
 469              		.thumb_func
 471              	RCC_PLLCmd:
 472              	.LFB45:
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the PLL.
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the PLL, the application software should wait on 
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         be used as system clock source.
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock source
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The PLL is disabled by hardware when entering STOP and STANDBY modes.
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the PLL.
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 473              		.loc 1 513 0
 474              		.cfi_startproc
 475 0000 00B5     		push	{lr}
 476              	.LCFI5:
 477              		.cfi_def_cfa_offset 4
 478              		.cfi_offset 14, -4
 479              	.LVL21:
 480 0002 064B     		ldr	r3, .L50
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR |= RCC_CR_PLLON;
 481              		.loc 1 519 0
 482 0004 1968     		ldr	r1, [r3]
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 483              		.loc 1 517 0
 484 0006 0028     		cmp	r0, #0
 485 0008 03D0     		beq	.L47
 486              		.loc 1 519 0
 487 000a 8022     		mov	r2, #128
 488 000c 5204     		lsl	r2, r2, #17
 489 000e 0A43     		orr	r2, r1
 490 0010 01E0     		b	.L49
 491              	.L47:
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_PLLON;
 492              		.loc 1 523 0
 493 0012 034A     		ldr	r2, .L50+4
 494 0014 0A40     		and	r2, r1
 495              	.L49:
 496 0016 1A60     		str	r2, [r3]
 497              		@ sp needed for prologue
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 498              		.loc 1 525 0
 499 0018 00BD     		pop	{pc}
 500              	.L51:
 501 001a C046     		.align	2
 502              	.L50:
 503 001c 00100240 		.word	1073876992
 504 0020 FFFFFFFE 		.word	-16777217
 505              		.cfi_endproc
 506              	.LFE45:
 508              		.section	.text.RCC_HSI48Cmd,"ax",%progbits
 509              		.align	1
 510              		.global	RCC_HSI48Cmd
 511              		.code	16
 512              		.thumb_func
 514              	RCC_HSI48Cmd:
 515              	.LFB46:
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator for USB (HSI48).
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This function is only applicable for STM32F072 devices.  
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After enabling the HSI48, the application software should wait on 
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         HSI48RDY flag to be set indicating that HSI48 clock is stable and can
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         be used to clock the USB.
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSI48 is stopped by hardware when entering STOP and STANDBY modes.
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the HSI48.
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HSI48Cmd(FunctionalState NewState)
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 516              		.loc 1 539 0
 517              		.cfi_startproc
 518 0000 00B5     		push	{lr}
 519              	.LCFI6:
 520              		.cfi_def_cfa_offset 4
 521              		.cfi_offset 14, -4
 522              	.LVL22:
 523 0002 064B     		ldr	r3, .L56
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 |= RCC_CR2_HSI48ON;
 524              		.loc 1 545 0
 525 0004 596B     		ldr	r1, [r3, #52]
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 526              		.loc 1 543 0
 527 0006 0028     		cmp	r0, #0
 528 0008 03D0     		beq	.L53
 529              		.loc 1 545 0
 530 000a 8022     		mov	r2, #128
 531 000c 5202     		lsl	r2, r2, #9
 532 000e 0A43     		orr	r2, r1
 533 0010 01E0     		b	.L55
 534              	.L53:
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR2 &= ~RCC_CR2_HSI48ON;
 535              		.loc 1 549 0
 536 0012 034A     		ldr	r2, .L56+4
 537 0014 0A40     		and	r2, r1
 538              	.L55:
 539 0016 5A63     		str	r2, [r3, #52]
 540              		@ sp needed for prologue
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 541              		.loc 1 551 0
 542 0018 00BD     		pop	{pc}
 543              	.L57:
 544 001a C046     		.align	2
 545              	.L56:
 546 001c 00100240 		.word	1073876992
 547 0020 FFFFFEFF 		.word	-65537
 548              		.cfi_endproc
 549              	.LFE46:
 551              		.section	.text.RCC_PREDIV1Config,"ax",%progbits
 552              		.align	1
 553              		.global	RCC_PREDIV1Config
 554              		.code	16
 555              		.thumb_func
 557              	RCC_PREDIV1Config:
 558              	.LFB47:
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Div)
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 559              		.loc 1 561 0
 560              		.cfi_startproc
 561              	.LVL23:
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR2;
 562              		.loc 1 567 0
 563 0000 034B     		ldr	r3, .L59
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear PREDIV1[3:0] bits */
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~(RCC_CFGR2_PREDIV1);
 564              		.loc 1 569 0
 565 0002 0F21     		mov	r1, #15
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR2;
 566              		.loc 1 567 0
 567 0004 DA6A     		ldr	r2, [r3, #44]
 568              	.LVL24:
 569              		@ sp needed for prologue
 570              		.loc 1 569 0
 571 0006 8A43     		bic	r2, r1
 572              	.LVL25:
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the PREDIV1 division factor */
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_PREDIV1_Div;
 573              		.loc 1 571 0
 574 0008 1043     		orr	r0, r2
 575              	.LVL26:
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR2 = tmpreg;
 576              		.loc 1 573 0
 577 000a D862     		str	r0, [r3, #44]
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 578              		.loc 1 574 0
 579 000c 7047     		bx	lr
 580              	.L60:
 581 000e C046     		.align	2
 582              	.L59:
 583 0010 00100240 		.word	1073876992
 584              		.cfi_endproc
 585              	.LFE47:
 587              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 588              		.align	1
 589              		.global	RCC_ClockSecuritySystemCmd
 590              		.code	16
 591              		.thumb_func
 593              	RCC_ClockSecuritySystemCmd:
 594              	.LFB48:
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 595              		.loc 1 588 0
 596              		.cfi_startproc
 597 0000 00B5     		push	{lr}
 598              	.LCFI7:
 599              		.cfi_def_cfa_offset 4
 600              		.cfi_offset 14, -4
 601              	.LVL27:
 602 0002 064B     		ldr	r3, .L65
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR |= RCC_CR_CSSON;
 603              		.loc 1 594 0
 604 0004 1968     		ldr	r1, [r3]
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 605              		.loc 1 592 0
 606 0006 0028     		cmp	r0, #0
 607 0008 03D0     		beq	.L62
 608              		.loc 1 594 0
 609 000a 8022     		mov	r2, #128
 610 000c 1203     		lsl	r2, r2, #12
 611 000e 0A43     		orr	r2, r1
 612 0010 01E0     		b	.L64
 613              	.L62:
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CR &= ~RCC_CR_CSSON;
 614              		.loc 1 598 0
 615 0012 034A     		ldr	r2, .L65+4
 616 0014 0A40     		and	r2, r1
 617              	.L64:
 618 0016 1A60     		str	r2, [r3]
 619              		@ sp needed for prologue
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 620              		.loc 1 600 0
 621 0018 00BD     		pop	{pc}
 622              	.L66:
 623 001a C046     		.align	2
 624              	.L65:
 625 001c 00100240 		.word	1073876992
 626 0020 FFFFF7FF 		.word	-524289
 627              		.cfi_endproc
 628              	.LFE48:
 630              		.section	.text.RCC_MCOConfig,"ax",%progbits
 631              		.align	1
 632              		.global	RCC_MCOConfig
 633              		.code	16
 634              		.thumb_func
 636              	RCC_MCOConfig:
 637              	.LFB49:
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #ifdef STM32F051
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Selects the clock source to output on MCO pin (PA8).
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_NoClock: No clock selected.
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI14: HSI14 oscillator clock selected.
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSI: LSI oscillator clock selected.
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSE: LSE oscillator clock selected.
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_SYSCLK: System clock selected.
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI: HSI oscillator clock selected.
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_PLLCLK_Div2: PLL clock divided by 2 selected.
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCOSource)
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 638              		.loc 1 619 0
 639              		.cfi_startproc
 640              	.LVL28:
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Select MCO clock source and prescaler */
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 641              		.loc 1 624 0
 642 0000 014B     		ldr	r3, .L68
 643              		@ sp needed for prologue
 644 0002 1870     		strb	r0, [r3]
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 645              		.loc 1 625 0
 646 0004 7047     		bx	lr
 647              	.L69:
 648 0006 C046     		.align	2
 649              	.L68:
 650 0008 07100240 		.word	1073876999
 651              		.cfi_endproc
 652              	.LFE49:
 654              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 655              		.align	1
 656              		.global	RCC_SYSCLKConfig
 657              		.code	16
 658              		.thumb_func
 660              	RCC_SYSCLKConfig:
 661              	.LFB50:
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #else
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Selects the clock source to output on MCO pin (PA8) and the corresponding
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         prescsaler.
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_MCOSource: specifies the clock source to output.
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_NoClock: No clock selected.
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI14: HSI14 oscillator clock selected.
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSI: LSI oscillator clock selected.
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_LSE: LSE oscillator clock selected.
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_SYSCLK: System clock selected.
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI: HSI oscillator clock selected.
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSE: HSE oscillator clock selected.
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_PLLCLK_Div2: PLL clock divided by 2 selected.
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_PLLCLK: PLL clock selected.
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOSource_HSI48: HSI48 clock selected.
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_MCOPrescaler: specifies the prescaler on MCO pin.
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_1: MCO clock is divided by 1.
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_2: MCO clock is divided by 2.
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_4: MCO clock is divided by 4.
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_8: MCO clock is divided by 8.
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_16: MCO clock is divided by 16.
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_32: MCO clock is divided by 32.
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_64: MCO clock is divided by 64.
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_MCOPrescaler_128: MCO clock is divided by 128.    
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCOSource, uint32_t RCC_MCOPrescaler)
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_MCO_PRESCALER(RCC_MCOPrescaler));
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get CFGR value */  
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear MCOPRE[2:0] bits */
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~(RCC_CFGR_MCO_PRE | RCC_CFGR_MCO | RCC_CFGR_PLLNODIV);
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set the RCC_MCOSource and RCC_MCOPrescaler */
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= (RCC_MCOPrescaler | ((uint32_t)RCC_MCOSource<<24));
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** #endif /* STM32F072 */
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @}
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****      ##### System, AHB and APB busses clocks configuration functions #####
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] This section provide functions allowing to configure the System, AHB and 
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          APB busses clocks.
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              HSE and PLL.
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable prescaler
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA and GPIO).
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              and APB (PCLK) clocks are derived from AHB clock through 
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              configurable prescalers and used to clock the peripherals mapped on these busses.
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The ADC clock which is derived from HSI14 or APB (APB divided by a
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   programmable prescaler: 2 or 4).
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The CEC clock which is derived from LSE or HSI divided by 244.
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The I2C clock which is derived from HSI or system clock (SYSCLK).
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The USART clock which is derived from HSI, system clock (SYSCLK), APB or LSE.
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) The RTC/LCD clock which is derived from the LSE, LSI or 2 MHz HSE_RTC (HSE
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   divided by a programmable prescaler).
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   The System clock (SYSCLK) frequency must be higher or equal to the RTC/LCD
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****                   clock frequency.
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              (+@) IWDG clock which is always the LSI clock.
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****        
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) The maximum frequency of the SYSCLK, HCLK and PCLK is 48 MHz.
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              Depending on the maximum frequency, the FLASH wait states (WS) should be 
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              adapted accordingly:
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         +--------------------------------------------- +
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |  Wait states  |   HCLK clock frequency (MHz) |
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |---------------|------------------------------|
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |0WS(1CPU cycle)|       0 < HCLK <= 24         |
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |---------------|------------------------------|
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         |1WS(2CPU cycle)|       24 < HCLK <= 48        |
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         +----------------------------------------------+
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) After reset, the System clock source is the HSI (8 MHz) with 0 WS and 
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              prefetch is disabled.
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] It is recommended to use the following software sequences to tune the number
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          of wait states needed to access the Flash memory with the CPU frequency (HCLK).
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (+) Increasing the CPU frequency
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Program the Flash Prefetch buffer, using "FLASH_PrefetchBufferCmd(ENABLE)" 
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               function
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that Flash Prefetch buffer activation is taken into account by 
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               reading FLASH_ACR using the FLASH_GetPrefetchBufferStatus() function
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Program Flash WS to 1, using "FLASH_SetLatency(FLASH_Latency_1)" function
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new number of WS is taken into account by reading FLASH_ACR
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Modify the CPU clock source, using "RCC_SYSCLKConfig()" function
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) If needed, modify the CPU clock prescaler by using "RCC_HCLKConfig()" function
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new CPU clock source is taken into account by reading 
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               the clock source status, using "RCC_GetSYSCLKSource()" function 
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (+) Decreasing the CPU frequency
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Modify the CPU clock source, using "RCC_SYSCLKConfig()" function
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) If needed, modify the CPU clock prescaler by using "RCC_HCLKConfig()" function
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new CPU clock source is taken into account by reading 
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               the clock source status, using "RCC_GetSYSCLKSource()" function
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Program the new number of WS, using "FLASH_SetLatency()" function
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that the new number of WS is taken into account by reading FLASH_ACR
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Disable the Flash Prefetch buffer using "FLASH_PrefetchBufferCmd(DISABLE)" 
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               function
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (++) Check that Flash Prefetch buffer deactivation is taken into account by reading FLASH_
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****               using the FLASH_GetPrefetchBufferStatus() function.
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         occur when the clock source will be ready. 
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         currently used as system clock source.  
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock source 
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI48:  HSI48 selected as system clock source, applicable only
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 662              		.loc 1 773 0
 663              		.cfi_startproc
 664              	.LVL29:
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 665              		.loc 1 779 0
 666 0000 034B     		ldr	r3, .L71
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear SW[1:0] bits */
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 667              		.loc 1 782 0
 668 0002 0321     		mov	r1, #3
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 669              		.loc 1 779 0
 670 0004 5A68     		ldr	r2, [r3, #4]
 671              	.LVL30:
 672              		@ sp needed for prologue
 673              		.loc 1 782 0
 674 0006 8A43     		bic	r2, r1
 675              	.LVL31:
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 676              		.loc 1 785 0
 677 0008 1043     		orr	r0, r2
 678              	.LVL32:
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 679              		.loc 1 788 0
 680 000a 5860     		str	r0, [r3, #4]
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 681              		.loc 1 789 0
 682 000c 7047     		bx	lr
 683              	.L72:
 684 000e C046     		.align	2
 685              	.L71:
 686 0010 00100240 		.word	1073876992
 687              		.cfi_endproc
 688              	.LFE50:
 690              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 691              		.align	1
 692              		.global	RCC_GetSYSCLKSource
 693              		.code	16
 694              		.thumb_func
 696              	RCC_GetSYSCLKSource:
 697              	.LFB51:
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one 
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         of the following values:
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           - 0x00: HSI used as system clock
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           - 0x04: HSE used as system clock  
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           - 0x08: PLL used as system clock
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           - 0x0C: HSI48 used as system clock, applicable only for STM32F072 devices  
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 698              		.loc 1 802 0
 699              		.cfi_startproc
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 700              		.loc 1 803 0
 701 0000 0248     		ldr	r0, .L74
 702 0002 0C23     		mov	r3, #12
 703 0004 4068     		ldr	r0, [r0, #4]
 704              		@ sp needed for prologue
 705 0006 1840     		and	r0, r3
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 706              		.loc 1 804 0
 707 0008 7047     		bx	lr
 708              	.L75:
 709 000a C046     		.align	2
 710              	.L74:
 711 000c 00100240 		.word	1073876992
 712              		.cfi_endproc
 713              	.LFE51:
 715              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 716              		.align	1
 717              		.global	RCC_HCLKConfig
 718              		.code	16
 719              		.thumb_func
 721              	RCC_HCLKConfig:
 722              	.LFB52:
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the system clock (SYSCLK).
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1:   AHB clock = SYSCLK
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2:   AHB clock = SYSCLK/2
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4:   AHB clock = SYSCLK/4
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8:   AHB clock = SYSCLK/8
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16:  AHB clock = SYSCLK/16
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64:  AHB clock = SYSCLK/64
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 723              		.loc 1 823 0
 724              		.cfi_startproc
 725              	.LVL33:
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 726              		.loc 1 829 0
 727 0000 034B     		ldr	r3, .L77
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 728              		.loc 1 832 0
 729 0002 F021     		mov	r1, #240
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 730              		.loc 1 829 0
 731 0004 5A68     		ldr	r2, [r3, #4]
 732              	.LVL34:
 733              		@ sp needed for prologue
 734              		.loc 1 832 0
 735 0006 8A43     		bic	r2, r1
 736              	.LVL35:
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 737              		.loc 1 835 0
 738 0008 1043     		orr	r0, r2
 739              	.LVL36:
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 740              		.loc 1 838 0
 741 000a 5860     		str	r0, [r3, #4]
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 742              		.loc 1 839 0
 743 000c 7047     		bx	lr
 744              	.L78:
 745 000e C046     		.align	2
 746              	.L77:
 747 0010 00100240 		.word	1073876992
 748              		.cfi_endproc
 749              	.LFE52:
 751              		.section	.text.RCC_PCLKConfig,"ax",%progbits
 752              		.align	1
 753              		.global	RCC_PCLKConfig
 754              		.code	16
 755              		.thumb_func
 757              	RCC_PCLKConfig:
 758              	.LFB53:
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the APB clock (PCLK).
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_HCLK: defines the APB clock divider. This clock is derived from 
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the AHB clock (HCLK).
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div1: APB clock = HCLK
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div2: APB clock = HCLK/2
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div4: APB clock = HCLK/4
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div8: APB clock = HCLK/8
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB clock = HCLK/16
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_PCLKConfig(uint32_t RCC_HCLK)
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 759              		.loc 1 854 0
 760              		.cfi_startproc
 761              	.LVL37:
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmpreg = 0;
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 762              		.loc 1 860 0
 763 0000 034B     		ldr	r3, .L80
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear PPRE[2:0] bits */
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE;
 764              		.loc 1 863 0
 765 0002 044A     		ldr	r2, .L80+4
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg = RCC->CFGR;
 766              		.loc 1 860 0
 767 0004 5968     		ldr	r1, [r3, #4]
 768              	.LVL38:
 769              		@ sp needed for prologue
 770              		.loc 1 863 0
 771 0006 0A40     		and	r2, r1
 772              	.LVL39:
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set PPRE[2:0] bits according to RCC_HCLK value */
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmpreg |= RCC_HCLK;
 773              		.loc 1 866 0
 774 0008 1043     		orr	r0, r2
 775              	.LVL40:
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Store the new value */
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR = tmpreg;
 776              		.loc 1 869 0
 777 000a 5860     		str	r0, [r3, #4]
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 778              		.loc 1 870 0
 779 000c 7047     		bx	lr
 780              	.L81:
 781 000e C046     		.align	2
 782              	.L80:
 783 0010 00100240 		.word	1073876992
 784 0014 FFF8FFFF 		.word	-1793
 785              		.cfi_endproc
 786              	.LFE53:
 788              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 789              		.align	1
 790              		.global	RCC_ADCCLKConfig
 791              		.code	16
 792              		.thumb_func
 794              	RCC_ADCCLKConfig:
 795              	.LFB54:
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function is obsolete.
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         For proper ADC clock selection, refer to ADC_ClockModeConfig() in the ADC driver
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_ADCCLK: defines the ADC clock source. This clock is derived 
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI14 or APB clock (PCLK).
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_HSI14: ADC clock = HSI14 (14MHz)
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_PCLK_Div2: ADC clock = PCLK/2
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_ADCCLK_PCLK_Div4: ADC clock = PCLK/4  
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_ADCCLK)
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 796              		.loc 1 885 0
 797              		.cfi_startproc
 798              	.LVL41:
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear ADCPRE bit */
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 799              		.loc 1 890 0
 800 0000 084B     		ldr	r3, .L83
 801 0002 094A     		ldr	r2, .L83+4
 802 0004 5968     		ldr	r1, [r3, #4]
 803              		@ sp needed for prologue
 804 0006 0A40     		and	r2, r1
 805 0008 5A60     		str	r2, [r3, #4]
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set ADCPRE bits according to RCC_PCLK value */
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 806              		.loc 1 892 0
 807 000a 5A68     		ldr	r2, [r3, #4]
 808 000c 81B2     		uxth	r1, r0
 809 000e 0A43     		orr	r2, r1
 810 0010 5A60     		str	r2, [r3, #4]
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear ADCSW bit */
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 811              		.loc 1 895 0
 812 0012 196B     		ldr	r1, [r3, #48]
 813 0014 054A     		ldr	r2, .L83+8
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set ADCSW bits according to RCC_ADCCLK value */
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 814              		.loc 1 897 0
 815 0016 000C     		lsr	r0, r0, #16
 816              	.LVL42:
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 817              		.loc 1 895 0
 818 0018 0A40     		and	r2, r1
 819 001a 1A63     		str	r2, [r3, #48]
 820              		.loc 1 897 0
 821 001c 1A6B     		ldr	r2, [r3, #48]
 822 001e 1043     		orr	r0, r2
 823 0020 1863     		str	r0, [r3, #48]
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 824              		.loc 1 898 0
 825 0022 7047     		bx	lr
 826              	.L84:
 827              		.align	2
 828              	.L83:
 829 0024 00100240 		.word	1073876992
 830 0028 FFBFFFFF 		.word	-16385
 831 002c FFFEFFFF 		.word	-257
 832              		.cfi_endproc
 833              	.LFE54:
 835              		.section	.text.RCC_CECCLKConfig,"ax",%progbits
 836              		.align	1
 837              		.global	RCC_CECCLKConfig
 838              		.code	16
 839              		.thumb_func
 841              	RCC_CECCLKConfig:
 842              	.LFB55:
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the CEC clock (CECCLK).
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_CECCLK: defines the CEC clock source. This clock is derived 
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI or LSE clock.
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_CECCLK_HSI_Div244: CEC clock = HSI/244 (32768Hz)
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_CECCLK_LSE: CEC clock = LSE
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_CECCLKConfig(uint32_t RCC_CECCLK)
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 843              		.loc 1 910 0
 844              		.cfi_startproc
 845              	.LVL43:
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_CECCLK(RCC_CECCLK));
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear CECSW bit */
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 846              		.loc 1 915 0
 847 0000 044B     		ldr	r3, .L86
 848 0002 4021     		mov	r1, #64
 849 0004 1A6B     		ldr	r2, [r3, #48]
 850              		@ sp needed for prologue
 851 0006 8A43     		bic	r2, r1
 852 0008 1A63     		str	r2, [r3, #48]
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set CECSW bits according to RCC_CECCLK value */
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_CECCLK;
 853              		.loc 1 917 0
 854 000a 1A6B     		ldr	r2, [r3, #48]
 855 000c 1043     		orr	r0, r2
 856              	.LVL44:
 857 000e 1863     		str	r0, [r3, #48]
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 858              		.loc 1 918 0
 859 0010 7047     		bx	lr
 860              	.L87:
 861 0012 C046     		.align	2
 862              	.L86:
 863 0014 00100240 		.word	1073876992
 864              		.cfi_endproc
 865              	.LFE55:
 867              		.section	.text.RCC_I2CCLKConfig,"ax",%progbits
 868              		.align	1
 869              		.global	RCC_I2CCLKConfig
 870              		.code	16
 871              		.thumb_func
 873              	RCC_I2CCLKConfig:
 874              	.LFB56:
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the I2C1 clock (I2C1CLK).
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_I2CCLK: defines the I2C1 clock source. This clock is derived 
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI or System clock.
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_I2C1CLK_HSI: I2C1 clock = HSI
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_I2C1CLK_SYSCLK: I2C1 clock = System Clock
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_I2CCLKConfig(uint32_t RCC_I2CCLK)
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 875              		.loc 1 930 0
 876              		.cfi_startproc
 877              	.LVL45:
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear I2CSW bit */
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 878              		.loc 1 935 0
 879 0000 044B     		ldr	r3, .L89
 880 0002 1021     		mov	r1, #16
 881 0004 1A6B     		ldr	r2, [r3, #48]
 882              		@ sp needed for prologue
 883 0006 8A43     		bic	r2, r1
 884 0008 1A63     		str	r2, [r3, #48]
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set I2CSW bits according to RCC_I2CCLK value */
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_I2CCLK;
 885              		.loc 1 937 0
 886 000a 1A6B     		ldr	r2, [r3, #48]
 887 000c 1043     		orr	r0, r2
 888              	.LVL46:
 889 000e 1863     		str	r0, [r3, #48]
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 890              		.loc 1 938 0
 891 0010 7047     		bx	lr
 892              	.L90:
 893 0012 C046     		.align	2
 894              	.L89:
 895 0014 00100240 		.word	1073876992
 896              		.cfi_endproc
 897              	.LFE56:
 899              		.section	.text.RCC_USARTCLKConfig,"ax",%progbits
 900              		.align	1
 901              		.global	RCC_USARTCLKConfig
 902              		.code	16
 903              		.thumb_func
 905              	RCC_USARTCLKConfig:
 906              	.LFB57:
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the USART1 clock (USART1CLK).
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_USARTCLK: defines the USART clock source. This clock is derived 
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI or System clock.
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_PCLK: USART1 clock = APB Clock (PCLK)
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_SYSCLK: USART1 clock = System Clock
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_LSE: USART1 clock = LSE Clock
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART1CLK_HSI: USART1 clock = HSI Clock
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_PCLK: USART2 clock = APB Clock (PCLK), applicable only for STM32
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_SYSCLK: USART2 clock = System Clock, applicable only for STM32F0
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_LSE: USART2 clock = LSE Clock, applicable only for STM32F072 and
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART2CLK_HSI: USART2 clock = HSI Clock, applicable only for STM32F072 and
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_PCLK: USART3 clock = APB Clock (PCLK), applicable only for STM32
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_SYSCLK: USART3 clock = System Clock, applicable only for STM32F0
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_LSE: USART3 clock = LSE Clock, applicable only for STM32F091 dev
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USART3CLK_HSI: USART3 clock = HSI Clock, applicable only for STM32F091 dev
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_USARTCLKConfig(uint32_t RCC_USARTCLK)
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 907              		.loc 1 960 0
 908              		.cfi_startproc
 909 0000 00B5     		push	{lr}
 910              	.LCFI8:
 911              		.cfi_def_cfa_offset 4
 912              		.cfi_offset 14, -4
 913              	.LVL47:
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmp = 0;
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get USART index */
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = (RCC_USARTCLK >> 28);
 914              		.loc 1 967 0
 915 0002 020F     		lsr	r2, r0, #28
 916              	.LVL48:
 917 0004 094B     		ldr	r3, .L97
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear USARTSW[1:0] bit */
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (tmp == (uint32_t)0x00000001)
 918              		.loc 1 970 0
 919 0006 012A     		cmp	r2, #1
 920 0008 03D1     		bne	.L92
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Clear USART1SW[1:0] bit */  
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 921              		.loc 1 973 0
 922 000a 1A6B     		ldr	r2, [r3, #48]
 923              	.LVL49:
 924 000c 0321     		mov	r1, #3
 925 000e 8A43     		bic	r2, r1
 926 0010 06E0     		b	.L95
 927              	.LVL50:
 928              	.L92:
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if (tmp == (uint32_t)0x00000002)
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Clear USART2SW[1:0] bit */
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CFGR3 &= ~RCC_CFGR3_USART2SW;
 929              		.loc 1 978 0
 930 0012 196B     		ldr	r1, [r3, #48]
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if (tmp == (uint32_t)0x00000002)
 931              		.loc 1 975 0
 932 0014 022A     		cmp	r2, #2
 933 0016 01D1     		bne	.L94
 934              		.loc 1 978 0
 935 0018 054A     		ldr	r2, .L97+4
 936              	.LVL51:
 937 001a 00E0     		b	.L96
 938              	.LVL52:
 939              	.L94:
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else 
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Clear USART3SW[1:0] bit */
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->CFGR3 &= ~RCC_CFGR3_USART3SW;
 940              		.loc 1 983 0
 941 001c 054A     		ldr	r2, .L97+8
 942              	.LVL53:
 943              	.L96:
 944 001e 0A40     		and	r2, r1
 945              	.L95:
 946 0020 1A63     		str	r2, [r3, #48]
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set USARTxSW bits according to RCC_USARTCLK value */
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_USARTCLK;
 947              		.loc 1 987 0
 948 0022 1A6B     		ldr	r2, [r3, #48]
 949              		@ sp needed for prologue
 950 0024 1043     		orr	r0, r2
 951              	.LVL54:
 952 0026 1863     		str	r0, [r3, #48]
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 953              		.loc 1 988 0
 954 0028 00BD     		pop	{pc}
 955              	.L98:
 956 002a C046     		.align	2
 957              	.L97:
 958 002c 00100240 		.word	1073876992
 959 0030 FFFFFCFF 		.word	-196609
 960 0034 FFFFF3FF 		.word	-786433
 961              		.cfi_endproc
 962              	.LFE57:
 964              		.section	.text.RCC_USBCLKConfig,"ax",%progbits
 965              		.align	1
 966              		.global	RCC_USBCLKConfig
 967              		.code	16
 968              		.thumb_func
 970              	RCC_USBCLKConfig:
 971              	.LFB58:
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         This function is only applicable for STM32F072 devices.  
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_USBCLK: defines the USB clock source. This clock is derived 
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         from the HSI48 or system clock.
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USBCLK_HSI48: USB clock = HSI48
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_USBCLK_PLLCLK: USB clock = PLL clock
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLK)
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** { 
 972              		.loc 1 1001 0
 973              		.cfi_startproc
 974              	.LVL55:
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_USBCLK(RCC_USBCLK));
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Clear USBSW bit */
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 &= ~RCC_CFGR3_USBSW;
 975              		.loc 1 1006 0
 976 0000 044B     		ldr	r3, .L100
 977 0002 8021     		mov	r1, #128
 978 0004 1A6B     		ldr	r2, [r3, #48]
 979              		@ sp needed for prologue
 980 0006 8A43     		bic	r2, r1
 981 0008 1A63     		str	r2, [r3, #48]
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set USBSW bits according to RCC_USBCLK value */
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CFGR3 |= RCC_USBCLK;
 982              		.loc 1 1008 0
 983 000a 1A6B     		ldr	r2, [r3, #48]
 984 000c 1043     		orr	r0, r2
 985              	.LVL56:
 986 000e 1863     		str	r0, [r3, #48]
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 987              		.loc 1 1009 0
 988 0010 7047     		bx	lr
 989              	.L101:
 990 0012 C046     		.align	2
 991              	.L100:
 992 0014 00100240 		.word	1073876992
 993              		.cfi_endproc
 994              	.LFE58:
 996              		.global	__aeabi_uidiv
 997              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 998              		.align	1
 999              		.global	RCC_GetClocksFreq
 1000              		.code	16
 1001              		.thumb_func
 1003              	RCC_GetClocksFreq:
 1004              	.LFB59:
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Returns the frequencies of the System, AHB and APB busses clocks.
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note    The frequency returned by this function is not the real frequency
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           in the chip. It is calculated based on the predefined constant and
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           the source selected by RCC_SYSCLKConfig():
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                                              
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns constant HSI_VALUE(*)
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                                              
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns constant HSE_VALUE(**)
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                          
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns constant HSE_VALUE(**) 
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *               
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     If SYSCLK source is HSI48, function returns constant HSI48_VALUE(***) 
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f0xx.h file (default value
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *               8 MHz) but the real value may vary depending on the variations
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *               in voltage and temperature, refer to RCC_AdjustHSICalibrationValue().   
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *    
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f0xx.h file (default value
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                return wrong result.
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note     (***) HSI48_VALUE is a constant defined in stm32f0xx.h file (default value
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                 48 MHz) but the real value may vary depending on the variations
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                 in voltage and temperature.
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                                   
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         value for HSE crystal.   
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold 
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the clocks frequencies. 
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *     
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   Each time SYSCLK, HCLK and/or PCLK clock changes, this function
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         configuration based on this function will be incorrect.
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *    
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1005              		.loc 1 1054 0
 1006              		.cfi_startproc
 1007 0000 70B5     		push	{r4, r5, r6, lr}
 1008              	.LCFI9:
 1009              		.cfi_def_cfa_offset 16
 1010              		.cfi_offset 4, -16
 1011              		.cfi_offset 5, -12
 1012              		.cfi_offset 6, -8
 1013              		.cfi_offset 14, -4
 1014              	.LVL57:
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1015              		.loc 1 1058 0
 1016 0002 594D     		ldr	r5, .L138
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1017              		.loc 1 1054 0
 1018 0004 041C     		mov	r4, r0
 1019              		.loc 1 1058 0
 1020 0006 6868     		ldr	r0, [r5, #4]
 1021              	.LVL58:
 1022 0008 0C23     		mov	r3, #12
 1023 000a 1840     		and	r0, r3
 1024              	.LVL59:
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   switch (tmp)
 1025              		.loc 1 1060 0
 1026 000c FFF7FEFF 		bl	__gnu_thumb1_case_uqi
 1027              	.L108:
 1028 0010 20       		.byte	(.L103-.L108)/2
 1029 0011 20       		.byte	(.L103-.L108)/2
 1030 0012 20       		.byte	(.L103-.L108)/2
 1031 0013 20       		.byte	(.L103-.L108)/2
 1032 0014 20       		.byte	(.L103-.L108)/2
 1033 0015 20       		.byte	(.L103-.L108)/2
 1034 0016 20       		.byte	(.L103-.L108)/2
 1035 0017 20       		.byte	(.L103-.L108)/2
 1036 0018 07       		.byte	(.L106-.L108)/2
 1037 0019 20       		.byte	(.L103-.L108)/2
 1038 001a 20       		.byte	(.L103-.L108)/2
 1039 001b 20       		.byte	(.L103-.L108)/2
 1040 001c 1E       		.byte	(.L107-.L108)/2
 1041 001d 00       		.align	1
 1042              	.L106:
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     case 0x00:  /* HSI used as system clock */
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     case 0x04:  /* HSE used as system clock */
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     case 0x08:  /* PLL used as system clock */
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 1043              		.loc 1 1070 0
 1044 001e 6B68     		ldr	r3, [r5, #4]
 1045              	.LVL60:
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       if (pllsource == 0x00)
 1046              		.loc 1 1074 0
 1047 0020 C021     		mov	r1, #192
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 1048              		.loc 1 1070 0
 1049 0022 9E02     		lsl	r6, r3, #10
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 1050              		.loc 1 1071 0
 1051 0024 6A68     		ldr	r2, [r5, #4]
 1052              	.LVL61:
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1053              		.loc 1 1072 0
 1054 0026 360F     		lsr	r6, r6, #28
 1055              		.loc 1 1074 0
 1056 0028 4802     		lsl	r0, r1, #9
 1057              	.LVL62:
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1058              		.loc 1 1072 0
 1059 002a 0236     		add	r6, r6, #2
 1060              	.LVL63:
 1061              		.loc 1 1074 0
 1062 002c 0242     		tst	r2, r0
 1063 002e 02D1     		bne	.L110
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       {
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         pllclk = (HSI_VALUE >> 1) * pllmull;
 1064              		.loc 1 1077 0
 1065 0030 4E4A     		ldr	r2, .L138+4
 1066              	.LVL64:
 1067 0032 5643     		mul	r6, r2
 1068              	.LVL65:
 1069 0034 08E0     		b	.L111
 1070              	.LVL66:
 1071              	.L110:
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       }
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       else
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       {
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 1072              		.loc 1 1081 0
 1073 0036 4C49     		ldr	r1, .L138
 1074 0038 0F20     		mov	r0, #15
 1075 003a C96A     		ldr	r1, [r1, #44]
 1076              	.LVL67:
 1077 003c 0140     		and	r1, r0
 1078              	.LVL68:
 1079 003e 0131     		add	r1, r1, #1
 1080              	.LVL69:
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         /* HSE oscillator clock selected as PREDIV1 clock entry */
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****         pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 1081              		.loc 1 1083 0
 1082 0040 4B48     		ldr	r0, .L138+8
 1083 0042 FFF7FEFF 		bl	__aeabi_uidiv
 1084              	.LVL70:
 1085 0046 4643     		mul	r6, r0
 1086              	.LVL71:
 1087              	.L111:
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       }
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllclk;      
 1088              		.loc 1 1085 0
 1089 0048 2660     		str	r6, [r4]
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
 1090              		.loc 1 1086 0
 1091 004a 04E0     		b	.L109
 1092              	.LVL72:
 1093              	.L107:
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     case 0x0C:  /* HSI48 used as system clock */
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI48_VALUE;
 1094              		.loc 1 1088 0
 1095 004c 494B     		ldr	r3, .L138+12
 1096 004e 00E0     		b	.L132
 1097              	.L103:
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     default: /* HSI used as system clock */
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1098              		.loc 1 1091 0
 1099 0050 474B     		ldr	r3, .L138+8
 1100              	.L132:
 1101 0052 2360     		str	r3, [r4]
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 1102              		.loc 1 1055 0
 1103 0054 0026     		mov	r6, #0
 1104              	.LVL73:
 1105              	.L109:
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       break;
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get HCLK prescaler */
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1106              		.loc 1 1096 0
 1107 0056 6868     		ldr	r0, [r5, #4]
 1108 0058 0206     		lsl	r2, r0, #24
 1109              	.LVL74:
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = tmp >> 4;
 1110              		.loc 1 1097 0
 1111 005a 110F     		lsr	r1, r2, #28
 1112              	.LVL75:
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   presc = APBAHBPrescTable[tmp]; 
 1113              		.loc 1 1098 0
 1114 005c 464A     		ldr	r2, .L138+16
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* HCLK clock frequency */
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1115              		.loc 1 1100 0
 1116 005e 2068     		ldr	r0, [r4]
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   presc = APBAHBPrescTable[tmp]; 
 1117              		.loc 1 1098 0
 1118 0060 535C     		ldrb	r3, [r2, r1]
 1119              	.LVL76:
 1120              		.loc 1 1100 0
 1121 0062 D840     		lsr	r0, r0, r3
 1122 0064 6060     		str	r0, [r4, #4]
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get PCLK prescaler */
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE;
 1123              		.loc 1 1103 0
 1124 0066 6968     		ldr	r1, [r5, #4]
 1125              	.LVL77:
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1126              		.loc 1 1100 0
 1127 0068 031C     		mov	r3, r0
 1128              	.LVL78:
 1129              		.loc 1 1103 0
 1130 006a 4805     		lsl	r0, r1, #21
 1131              	.LVL79:
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = tmp >> 8;
 1132              		.loc 1 1104 0
 1133 006c 410F     		lsr	r1, r0, #29
 1134              	.LVL80:
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1135              		.loc 1 1105 0
 1136 006e 505C     		ldrb	r0, [r2, r1]
 1137              	.LVL81:
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* PCLK clock frequency */
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1138              		.loc 1 1107 0
 1139 0070 C340     		lsr	r3, r3, r0
 1140 0072 A360     		str	r3, [r4, #8]
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* ADCCLK clock frequency */
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 1141              		.loc 1 1110 0
 1142 0074 2A6B     		ldr	r2, [r5, #48]
 1143 0076 D105     		lsl	r1, r2, #23
 1144 0078 01D4     		bmi	.L112
 1145              	.LVL82:
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* ADC Clock is HSI14 Osc. */
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 1146              		.loc 1 1113 0
 1147 007a 404B     		ldr	r3, .L138+20
 1148 007c 06E0     		b	.L133
 1149              	.L112:
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 1150              		.loc 1 1117 0
 1151 007e 3A4A     		ldr	r2, .L138
 1152 0080 5168     		ldr	r1, [r2, #4]
 1153 0082 4904     		lsl	r1, r1, #17
 1154 0084 01D4     		bmi	.L114
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     {
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       /* ADC Clock is derived from PCLK/2 */
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 1155              		.loc 1 1120 0
 1156 0086 5B08     		lsr	r3, r3, #1
 1157 0088 00E0     		b	.L133
 1158              	.L114:
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     }
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     else
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     {
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       /* ADC Clock is derived from PCLK/4 */
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****       RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 1159              		.loc 1 1125 0
 1160 008a 9B08     		lsr	r3, r3, #2
 1161              	.L133:
 1162 008c E360     		str	r3, [r4, #12]
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     }
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* CECCLK clock frequency */
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 1163              		.loc 1 1131 0
 1164 008e 2B6B     		ldr	r3, [r5, #48]
 1165 0090 5A06     		lsl	r2, r3, #25
 1166 0092 01D4     		bmi	.L131
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* CEC Clock is HSI/244 */
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 1167              		.loc 1 1134 0
 1168 0094 3A4B     		ldr	r3, .L138+24
 1169 0096 01E0     		b	.L115
 1170              	.L131:
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* CECC Clock is LSE Osc. */
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 1171              		.loc 1 1139 0
 1172 0098 8020     		mov	r0, #128
 1173              	.LVL83:
 1174 009a 0302     		lsl	r3, r0, #8
 1175              	.L115:
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 1176              		.loc 1 1131 0
 1177 009c 2361     		str	r3, [r4, #16]
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* I2C1CLK clock frequency */
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 1178              		.loc 1 1143 0
 1179 009e 296B     		ldr	r1, [r5, #48]
 1180 00a0 C906     		lsl	r1, r1, #27
 1181 00a2 01D4     		bmi	.L116
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* I2C1 Clock is HSI Osc. */
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 1182              		.loc 1 1146 0
 1183 00a4 324B     		ldr	r3, .L138+8
 1184 00a6 00E0     		b	.L134
 1185              	.L116:
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* I2C1 Clock is System Clock */
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1186              		.loc 1 1151 0
 1187 00a8 2368     		ldr	r3, [r4]
 1188              	.L134:
 1189 00aa 6361     		str	r3, [r4, #20]
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* USART1CLK clock frequency */
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 1190              		.loc 1 1155 0
 1191 00ac 286B     		ldr	r0, [r5, #48]
 1192 00ae 0323     		mov	r3, #3
 1193 00b0 2D4A     		ldr	r2, .L138
 1194 00b2 1842     		tst	r0, r3
 1195 00b4 01D1     		bne	.L118
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is PCLK */
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 1196              		.loc 1 1158 0
 1197 00b6 A368     		ldr	r3, [r4, #8]
 1198 00b8 11E0     		b	.L135
 1199              	.L118:
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 1200              		.loc 1 1160 0
 1201 00ba 116B     		ldr	r1, [r2, #48]
 1202 00bc 1940     		and	r1, r3
 1203 00be 0129     		cmp	r1, #1
 1204 00c0 01D1     		bne	.L120
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is System Clock */
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1205              		.loc 1 1163 0
 1206 00c2 2368     		ldr	r3, [r4]
 1207 00c4 0BE0     		b	.L135
 1208              	.L120:
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 1209              		.loc 1 1165 0
 1210 00c6 106B     		ldr	r0, [r2, #48]
 1211 00c8 1840     		and	r0, r3
 1212 00ca 0228     		cmp	r0, #2
 1213 00cc 02D1     		bne	.L121
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is LSE Osc. */
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 1214              		.loc 1 1168 0
 1215 00ce 8022     		mov	r2, #128
 1216 00d0 1302     		lsl	r3, r2, #8
 1217 00d2 04E0     		b	.L135
 1218              	.L121:
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 1219              		.loc 1 1170 0
 1220 00d4 116B     		ldr	r1, [r2, #48]
 1221 00d6 0B40     		and	r3, r1
 1222 00d8 032B     		cmp	r3, #3
 1223 00da 01D1     		bne	.L119
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART1 Clock is HSI Osc. */
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 1224              		.loc 1 1173 0
 1225 00dc 244B     		ldr	r3, .L138+8
 1226              	.L135:
 1227 00de A361     		str	r3, [r4, #24]
 1228              	.L119:
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* USART2CLK clock frequency */
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 1229              		.loc 1 1177 0
 1230 00e0 C023     		mov	r3, #192
 1231 00e2 286B     		ldr	r0, [r5, #48]
 1232 00e4 9B02     		lsl	r3, r3, #10
 1233 00e6 204A     		ldr	r2, .L138
 1234 00e8 1842     		tst	r0, r3
 1235 00ea 01D1     		bne	.L122
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is PCLK */
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 1236              		.loc 1 1180 0
 1237 00ec A368     		ldr	r3, [r4, #8]
 1238 00ee 15E0     		b	.L136
 1239              	.L122:
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 1240              		.loc 1 1182 0
 1241 00f0 106B     		ldr	r0, [r2, #48]
 1242 00f2 8021     		mov	r1, #128
 1243 00f4 1840     		and	r0, r3
 1244 00f6 4902     		lsl	r1, r1, #9
 1245 00f8 8842     		cmp	r0, r1
 1246 00fa 01D1     		bne	.L124
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is System Clock */
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1247              		.loc 1 1185 0
 1248 00fc 2368     		ldr	r3, [r4]
 1249 00fe 0DE0     		b	.L136
 1250              	.L124:
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 1251              		.loc 1 1187 0
 1252 0100 106B     		ldr	r0, [r2, #48]
 1253 0102 8021     		mov	r1, #128
 1254 0104 1840     		and	r0, r3
 1255 0106 8902     		lsl	r1, r1, #10
 1256 0108 8842     		cmp	r0, r1
 1257 010a 02D1     		bne	.L125
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is LSE Osc. */
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 1258              		.loc 1 1190 0
 1259 010c 8022     		mov	r2, #128
 1260 010e 1302     		lsl	r3, r2, #8
 1261 0110 04E0     		b	.L136
 1262              	.L125:
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 1263              		.loc 1 1192 0
 1264 0112 106B     		ldr	r0, [r2, #48]
 1265 0114 1840     		and	r0, r3
 1266 0116 9842     		cmp	r0, r3
 1267 0118 01D1     		bne	.L123
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is HSI Osc. */
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 1268              		.loc 1 1195 0
 1269 011a 154B     		ldr	r3, .L138+8
 1270              	.L136:
 1271 011c E361     		str	r3, [r4, #28]
 1272              	.L123:
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* USART3CLK clock frequency */
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 1273              		.loc 1 1199 0
 1274 011e C023     		mov	r3, #192
 1275 0120 296B     		ldr	r1, [r5, #48]
 1276 0122 1B03     		lsl	r3, r3, #12
 1277 0124 104A     		ldr	r2, .L138
 1278 0126 1942     		tst	r1, r3
 1279 0128 01D1     		bne	.L126
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is PCLK */
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 1280              		.loc 1 1202 0
 1281 012a A368     		ldr	r3, [r4, #8]
 1282 012c 15E0     		b	.L137
 1283              	.L126:
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 1284              		.loc 1 1204 0
 1285 012e 106B     		ldr	r0, [r2, #48]
 1286 0130 8021     		mov	r1, #128
 1287 0132 1840     		and	r0, r3
 1288 0134 C902     		lsl	r1, r1, #11
 1289 0136 8842     		cmp	r0, r1
 1290 0138 01D1     		bne	.L128
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is System Clock */
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 1291              		.loc 1 1207 0
 1292 013a 2368     		ldr	r3, [r4]
 1293 013c 0DE0     		b	.L137
 1294              	.L128:
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 1295              		.loc 1 1209 0
 1296 013e 106B     		ldr	r0, [r2, #48]
 1297 0140 8021     		mov	r1, #128
 1298 0142 1840     		and	r0, r3
 1299 0144 0903     		lsl	r1, r1, #12
 1300 0146 8842     		cmp	r0, r1
 1301 0148 02D1     		bne	.L129
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is LSE Osc. */
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 1302              		.loc 1 1212 0
 1303 014a 8022     		mov	r2, #128
 1304 014c 1302     		lsl	r3, r2, #8
 1305 014e 04E0     		b	.L137
 1306              	.L129:
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 1307              		.loc 1 1214 0
 1308 0150 106B     		ldr	r0, [r2, #48]
 1309 0152 1840     		and	r0, r3
 1310 0154 9842     		cmp	r0, r3
 1311 0156 01D1     		bne	.L127
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USART Clock is HSI Osc. */
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 1312              		.loc 1 1217 0
 1313 0158 054B     		ldr	r3, .L138+8
 1314              	.L137:
 1315 015a 2362     		str	r3, [r4, #32]
 1316              	.L127:
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* USBCLK clock frequency */
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 1317              		.loc 1 1221 0
 1318 015c 2D6B     		ldr	r5, [r5, #48]
 1319 015e 2A06     		lsl	r2, r5, #24
 1320 0160 00D4     		bmi	.L130
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USB Clock is HSI48 */
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USBCLK_Frequency = HSI48_VALUE;
 1321              		.loc 1 1224 0
 1322 0162 044E     		ldr	r6, .L138+12
 1323              	.LVL84:
 1324              	.L130:
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if((RCC->CFGR3 & RCC_CFGR3_USBSW) != RCC_CFGR3_USBSW)
 1325              		.loc 1 1221 0
 1326 0164 6662     		str	r6, [r4, #36]
 1327              		@ sp needed for prologue
 1328              	.LVL85:
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* USB Clock is PLL clock */
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC_Clocks->USBCLK_Frequency = pllclk;
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }   
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1329              		.loc 1 1231 0
 1330 0166 70BD     		pop	{r4, r5, r6, pc}
 1331              	.L139:
 1332              		.align	2
 1333              	.L138:
 1334 0168 00100240 		.word	1073876992
 1335 016c 00093D00 		.word	4000000
 1336 0170 00127A00 		.word	8000000
 1337 0174 006CDC02 		.word	48000000
 1338 0178 00000000 		.word	.LANCHOR0
 1339 017c 809FD500 		.word	14000000
 1340 0180 12800000 		.word	32786
 1341              		.cfi_endproc
 1342              	.LFE59:
 1344              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1345              		.align	1
 1346              		.global	RCC_RTCCLKConfig
 1347              		.code	16
 1348              		.thumb_func
 1350              	RCC_RTCCLKConfig:
 1351              	.LFB60:
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @}
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              #####Peripheral clocks configuration functions #####
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================  
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) The RTC clock which is derived from the LSE, LSI or  HSE_Div32 (HSE
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              divided by 32).
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              except internal SRAM, Flash and SWD. Before to start using a peripheral you
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd(),
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****          (#) To reset the peripherals configuration (to the default state after device reset)
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              RCC_APB1PeriphResetCmd() functions.
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the RTC
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is reset using RCC_BackupResetCmd function, or by a Power On Reset (POR)
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Div32: HSE divided by 32 selected as RTC clock
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *       
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 2MHz (when using HSE as
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         RTC clock source).
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *                          
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1352              		.loc 1 1286 0
 1353              		.cfi_startproc
 1354              	.LVL86:
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Select the RTC clock source */
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1355              		.loc 1 1291 0
 1356 0000 024B     		ldr	r3, .L141
 1357              		@ sp needed for prologue
 1358 0002 1A6A     		ldr	r2, [r3, #32]
 1359 0004 1043     		orr	r0, r2
 1360              	.LVL87:
 1361 0006 1862     		str	r0, [r3, #32]
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1362              		.loc 1 1292 0
 1363 0008 7047     		bx	lr
 1364              	.L142:
 1365 000a C046     		.align	2
 1366              	.L141:
 1367 000c 00100240 		.word	1073876992
 1368              		.cfi_endproc
 1369              	.LFE60:
 1371              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1372              		.align	1
 1373              		.global	RCC_RTCCLKCmd
 1374              		.code	16
 1375              		.thumb_func
 1377              	RCC_RTCCLKCmd:
 1378              	.LFB61:
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the RTC clock.
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1379              		.loc 1 1303 0
 1380              		.cfi_startproc
 1381 0000 00B5     		push	{lr}
 1382              	.LCFI10:
 1383              		.cfi_def_cfa_offset 4
 1384              		.cfi_offset 14, -4
 1385              	.LVL88:
 1386 0002 064B     		ldr	r3, .L147
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR |= RCC_BDCR_RTCEN;
 1387              		.loc 1 1309 0
 1388 0004 196A     		ldr	r1, [r3, #32]
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1389              		.loc 1 1307 0
 1390 0006 0028     		cmp	r0, #0
 1391 0008 03D0     		beq	.L144
 1392              		.loc 1 1309 0
 1393 000a 8022     		mov	r2, #128
 1394 000c 1202     		lsl	r2, r2, #8
 1395 000e 0A43     		orr	r2, r1
 1396 0010 01E0     		b	.L146
 1397              	.L144:
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR &= ~RCC_BDCR_RTCEN;
 1398              		.loc 1 1313 0
 1399 0012 034A     		ldr	r2, .L147+4
 1400 0014 0A40     		and	r2, r1
 1401              	.L146:
 1402 0016 1A62     		str	r2, [r3, #32]
 1403              		@ sp needed for prologue
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1404              		.loc 1 1315 0
 1405 0018 00BD     		pop	{pc}
 1406              	.L148:
 1407 001a C046     		.align	2
 1408              	.L147:
 1409 001c 00100240 		.word	1073876992
 1410 0020 FF7FFFFF 		.word	-32769
 1411              		.cfi_endproc
 1412              	.LFE61:
 1414              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1415              		.align	1
 1416              		.global	RCC_BackupResetCmd
 1417              		.code	16
 1418              		.thumb_func
 1420              	RCC_BackupResetCmd:
 1421              	.LFB62:
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and the RTC clock source selection in RCC_BDCR register.
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1422              		.loc 1 1326 0
 1423              		.cfi_startproc
 1424 0000 00B5     		push	{lr}
 1425              	.LCFI11:
 1426              		.cfi_def_cfa_offset 4
 1427              		.cfi_offset 14, -4
 1428              	.LVL89:
 1429 0002 064B     		ldr	r3, .L153
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR |= RCC_BDCR_BDRST;
 1430              		.loc 1 1332 0
 1431 0004 196A     		ldr	r1, [r3, #32]
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1432              		.loc 1 1330 0
 1433 0006 0028     		cmp	r0, #0
 1434 0008 03D0     		beq	.L150
 1435              		.loc 1 1332 0
 1436 000a 8022     		mov	r2, #128
 1437 000c 5202     		lsl	r2, r2, #9
 1438 000e 0A43     		orr	r2, r1
 1439 0010 01E0     		b	.L152
 1440              	.L150:
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->BDCR &= ~RCC_BDCR_BDRST;
 1441              		.loc 1 1336 0
 1442 0012 034A     		ldr	r2, .L153+4
 1443 0014 0A40     		and	r2, r1
 1444              	.L152:
 1445 0016 1A62     		str	r2, [r3, #32]
 1446              		@ sp needed for prologue
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1447              		.loc 1 1338 0
 1448 0018 00BD     		pop	{pc}
 1449              	.L154:
 1450 001a C046     		.align	2
 1451              	.L153:
 1452 001c 00100240 		.word	1073876992
 1453 0020 FFFFFEFF 		.word	-65537
 1454              		.cfi_endproc
 1455              	.LFE62:
 1457              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 1458              		.align	1
 1459              		.global	RCC_AHBPeriphClockCmd
 1460              		.code	16
 1461              		.thumb_func
 1463              	RCC_AHBPeriphClockCmd:
 1464              	.LFB63:
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using it.    
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOA: GPIOA clock
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOB: GPIOB clock
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOC: GPIOC clock
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOD: GPIOD clock
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOE: GPIOE clock, applicable only for STM32F072 devices  
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOF: GPIOF clock
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_TS:    TS clock
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_CRC:   CRC clock
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_FLITF: (has effect only when the Flash memory is in power down m
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_SRAM:  SRAM clock
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_DMA1:  DMA1 clock
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_DMA2:  DMA2 clock  
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1465              		.loc 1 1364 0
 1466              		.cfi_startproc
 1467 0000 00B5     		push	{lr}
 1468              	.LCFI12:
 1469              		.cfi_def_cfa_offset 4
 1470              		.cfi_offset 14, -4
 1471              	.LVL90:
 1472 0002 054B     		ldr	r3, .L158
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 1473              		.loc 1 1371 0
 1474 0004 5A69     		ldr	r2, [r3, #20]
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1475              		.loc 1 1369 0
 1476 0006 0029     		cmp	r1, #0
 1477 0008 02D0     		beq	.L156
 1478              		.loc 1 1371 0
 1479 000a 1043     		orr	r0, r2
 1480              	.LVL91:
 1481 000c 5861     		str	r0, [r3, #20]
 1482 000e 01E0     		b	.L155
 1483              	.LVL92:
 1484              	.L156:
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 1485              		.loc 1 1375 0
 1486 0010 8243     		bic	r2, r0
 1487 0012 5A61     		str	r2, [r3, #20]
 1488              	.LVL93:
 1489              	.L155:
 1490              		@ sp needed for prologue
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1491              		.loc 1 1377 0
 1492 0014 00BD     		pop	{pc}
 1493              	.L159:
 1494 0016 C046     		.align	2
 1495              	.L158:
 1496 0018 00100240 		.word	1073876992
 1497              		.cfi_endproc
 1498              	.LFE63:
 1500              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1501              		.align	1
 1502              		.global	RCC_APB2PeriphClockCmd
 1503              		.code	16
 1504              		.thumb_func
 1506              	RCC_APB2PeriphClockCmd:
 1507              	.LFB64:
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using it.
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART6: USART6 clock  
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART7: USART7 clock
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART8: USART8 clock   
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_ADC1:   ADC1 clock
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM1:   TIM1 clock
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SPI1:   SPI1 clock
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART1: USART1 clock   
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM15:  TIM15 clock
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM16:  TIM16 clock
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM17:  TIM17 clock
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_DBGMCU: DBGMCU clock
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1508              		.loc 1 1403 0
 1509              		.cfi_startproc
 1510 0000 00B5     		push	{lr}
 1511              	.LCFI13:
 1512              		.cfi_def_cfa_offset 4
 1513              		.cfi_offset 14, -4
 1514              	.LVL94:
 1515 0002 054B     		ldr	r3, .L163
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1516              		.loc 1 1410 0
 1517 0004 9A69     		ldr	r2, [r3, #24]
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1518              		.loc 1 1408 0
 1519 0006 0029     		cmp	r1, #0
 1520 0008 02D0     		beq	.L161
 1521              		.loc 1 1410 0
 1522 000a 1043     		orr	r0, r2
 1523              	.LVL95:
 1524 000c 9861     		str	r0, [r3, #24]
 1525 000e 01E0     		b	.L160
 1526              	.LVL96:
 1527              	.L161:
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1528              		.loc 1 1414 0
 1529 0010 8243     		bic	r2, r0
 1530 0012 9A61     		str	r2, [r3, #24]
 1531              	.LVL97:
 1532              	.L160:
 1533              		@ sp needed for prologue
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1534              		.loc 1 1416 0
 1535 0014 00BD     		pop	{pc}
 1536              	.L164:
 1537 0016 C046     		.align	2
 1538              	.L163:
 1539 0018 00100240 		.word	1073876992
 1540              		.cfi_endproc
 1541              	.LFE64:
 1543              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1544              		.align	1
 1545              		.global	RCC_APB1PeriphClockCmd
 1546              		.code	16
 1547              		.thumb_func
 1549              	RCC_APB1PeriphClockCmd:
 1550              	.LFB65:
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         using it.
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM2:   TIM2 clock, applicable only for STM32F051 and STM32F072 d
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM3:   TIM3 clock
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM6:   TIM6 clock
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM7:   TIM7 clock, applicable only for STM32F072 devices   
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM14:  TIM14 clock
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_WWDG:   WWDG clock
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_SPI2:   SPI2 clock
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART2: USART2 clock
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART3: USART3 clock, applicable only for STM32F072 and STM32F091
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART4: USART4 clock, applicable only for STM32F072 and STM32F091
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART5: USART5 clock, applicable only for STM32F091 devices      
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C1:   I2C1 clock
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C2:   I2C2 clock
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USB:    USB clock, applicable only for STM32F042 and STM32F072 de
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CAN:    CAN clock, applicable only for STM32F042 and STM32F072 de
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CRS:    CRS clock , applicable only for STM32F042 and STM32F072 d
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_PWR:    PWR clock
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_DAC:    DAC clock, applicable only for STM32F051 and STM32F072 de
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CEC:    CEC clock, applicable only for STM32F051, STM32F042 and S
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1551              		.loc 1 1449 0
 1552              		.cfi_startproc
 1553 0000 00B5     		push	{lr}
 1554              	.LCFI14:
 1555              		.cfi_def_cfa_offset 4
 1556              		.cfi_offset 14, -4
 1557              	.LVL98:
 1558 0002 054B     		ldr	r3, .L168
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1559              		.loc 1 1456 0
 1560 0004 DA69     		ldr	r2, [r3, #28]
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1561              		.loc 1 1454 0
 1562 0006 0029     		cmp	r1, #0
 1563 0008 02D0     		beq	.L166
 1564              		.loc 1 1456 0
 1565 000a 1043     		orr	r0, r2
 1566              	.LVL99:
 1567 000c D861     		str	r0, [r3, #28]
 1568 000e 01E0     		b	.L165
 1569              	.LVL100:
 1570              	.L166:
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1571              		.loc 1 1460 0
 1572 0010 8243     		bic	r2, r0
 1573 0012 DA61     		str	r2, [r3, #28]
 1574              	.LVL101:
 1575              	.L165:
 1576              		@ sp needed for prologue
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1577              		.loc 1 1462 0
 1578 0014 00BD     		pop	{pc}
 1579              	.L169:
 1580 0016 C046     		.align	2
 1581              	.L168:
 1582 0018 00100240 		.word	1073876992
 1583              		.cfi_endproc
 1584              	.LFE65:
 1586              		.section	.text.RCC_AHBPeriphResetCmd,"ax",%progbits
 1587              		.align	1
 1588              		.global	RCC_AHBPeriphResetCmd
 1589              		.code	16
 1590              		.thumb_func
 1592              	RCC_AHBPeriphResetCmd:
 1593              	.LFB66:
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOA: GPIOA clock
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOB: GPIOB clock
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOC: GPIOC clock
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOD: GPIOD clock
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOE: GPIOE clock, applicable only for STM32F072 devices  
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_GPIOF: GPIOF clock
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_AHBPeriph_TS:    TS clock
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1594              		.loc 1 1480 0
 1595              		.cfi_startproc
 1596 0000 00B5     		push	{lr}
 1597              	.LCFI15:
 1598              		.cfi_def_cfa_offset 4
 1599              		.cfi_offset 14, -4
 1600              	.LVL102:
 1601 0002 054B     		ldr	r3, .L173
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
 1602              		.loc 1 1487 0
 1603 0004 9A6A     		ldr	r2, [r3, #40]
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1604              		.loc 1 1485 0
 1605 0006 0029     		cmp	r1, #0
 1606 0008 02D0     		beq	.L171
 1607              		.loc 1 1487 0
 1608 000a 1043     		orr	r0, r2
 1609              	.LVL103:
 1610 000c 9862     		str	r0, [r3, #40]
 1611 000e 01E0     		b	.L170
 1612              	.LVL104:
 1613              	.L171:
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
 1614              		.loc 1 1491 0
 1615 0010 8243     		bic	r2, r0
 1616 0012 9A62     		str	r2, [r3, #40]
 1617              	.LVL105:
 1618              	.L170:
 1619              		@ sp needed for prologue
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1620              		.loc 1 1493 0
 1621 0014 00BD     		pop	{pc}
 1622              	.L174:
 1623 0016 C046     		.align	2
 1624              	.L173:
 1625 0018 00100240 		.word	1073876992
 1626              		.cfi_endproc
 1627              	.LFE66:
 1629              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1630              		.align	1
 1631              		.global	RCC_APB2PeriphResetCmd
 1632              		.code	16
 1633              		.thumb_func
 1635              	RCC_APB2PeriphResetCmd:
 1636              	.LFB67:
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART6: USART6 clock  
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART7: USART7 clock
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART8: USART8 clock   
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_ADC1:   ADC1 clock
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM1:   TIM1 clock
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_SPI1:   SPI1 clock
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_USART1: USART1 clock
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM15:  TIM15 clock
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM16:  TIM16 clock
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_TIM17:  TIM17 clock
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_APB2Periph_DBGMCU: DBGMCU clock
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1637              		.loc 1 1516 0
 1638              		.cfi_startproc
 1639 0000 00B5     		push	{lr}
 1640              	.LCFI16:
 1641              		.cfi_def_cfa_offset 4
 1642              		.cfi_offset 14, -4
 1643              	.LVL106:
 1644 0002 054B     		ldr	r3, .L178
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1645              		.loc 1 1523 0
 1646 0004 DA68     		ldr	r2, [r3, #12]
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1647              		.loc 1 1521 0
 1648 0006 0029     		cmp	r1, #0
 1649 0008 02D0     		beq	.L176
 1650              		.loc 1 1523 0
 1651 000a 1043     		orr	r0, r2
 1652              	.LVL107:
 1653 000c D860     		str	r0, [r3, #12]
 1654 000e 01E0     		b	.L175
 1655              	.LVL108:
 1656              	.L176:
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1657              		.loc 1 1527 0
 1658 0010 8243     		bic	r2, r0
 1659 0012 DA60     		str	r2, [r3, #12]
 1660              	.LVL109:
 1661              	.L175:
 1662              		@ sp needed for prologue
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1663              		.loc 1 1529 0
 1664 0014 00BD     		pop	{pc}
 1665              	.L179:
 1666 0016 C046     		.align	2
 1667              	.L178:
 1668 0018 00100240 		.word	1073876992
 1669              		.cfi_endproc
 1670              	.LFE67:
 1672              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1673              		.align	1
 1674              		.global	RCC_APB1PeriphResetCmd
 1675              		.code	16
 1676              		.thumb_func
 1678              	RCC_APB1PeriphResetCmd:
 1679              	.LFB68:
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM2:   TIM2 clock, applicable only for STM32F051 and STM32F072 d
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM3:   TIM3 clock
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM6:   TIM6 clock
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM7:   TIM7 clock, applicable only for STM32F072 devices   
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_TIM14:  TIM14 clock
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_WWDG:   WWDG clock
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_SPI2:   SPI2 clock
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART2: USART2 clock
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART3: USART3 clock, applicable only for STM32F072 and STM32F091
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART4: USART4 clock, applicable only for STM32F072 and STM32F091
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USART5: USART5 clock, applicable only for STM32F091 devices      
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C1:   I2C1 clock
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_I2C2:   I2C2 clock
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_USB:    USB clock, applicable only for STM32F042 and STM32F072 de
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CAN:    CAN clock, applicable only for STM32F042 and STM32F072 de
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CRS:    CRS clock , applicable only for STM32F042 and STM32F072 d
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_PWR:    PWR clock
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_DAC:    DAC clock, applicable only for STM32F051 and STM32F072 de
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *           @arg RCC_APB1Periph_CEC:    CEC clock, applicable only for STM32F051, STM32F042 and S
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1680              		.loc 1 1559 0
 1681              		.cfi_startproc
 1682 0000 00B5     		push	{lr}
 1683              	.LCFI17:
 1684              		.cfi_def_cfa_offset 4
 1685              		.cfi_offset 14, -4
 1686              	.LVL110:
 1687 0002 054B     		ldr	r3, .L183
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1688              		.loc 1 1566 0
 1689 0004 1A69     		ldr	r2, [r3, #16]
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1690              		.loc 1 1564 0
 1691 0006 0029     		cmp	r1, #0
 1692 0008 02D0     		beq	.L181
 1693              		.loc 1 1566 0
 1694 000a 1043     		orr	r0, r2
 1695              	.LVL111:
 1696 000c 1861     		str	r0, [r3, #16]
 1697 000e 01E0     		b	.L180
 1698              	.LVL112:
 1699              	.L181:
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1700              		.loc 1 1570 0
 1701 0010 8243     		bic	r2, r0
 1702 0012 1A61     		str	r2, [r3, #16]
 1703              	.LVL113:
 1704              	.L180:
 1705              		@ sp needed for prologue
1571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1706              		.loc 1 1572 0
 1707 0014 00BD     		pop	{pc}
 1708              	.L184:
 1709 0016 C046     		.align	2
 1710              	.L183:
 1711 0018 00100240 		.word	1073876992
 1712              		.cfi_endproc
 1713              	.LFE68:
 1715              		.section	.text.RCC_ITConfig,"ax",%progbits
 1716              		.align	1
 1717              		.global	RCC_ITConfig
 1718              		.code	16
 1719              		.thumb_func
 1721              	RCC_ITConfig:
 1722              	.LFB69:
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @}
1576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  *
1581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @verbatim
1582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****              ##### Interrupts and flags management functions #####
1584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****  ===============================================================================
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** @endverbatim
1586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @{
1587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @note   The CSS interrupt doesn't have an enable bit; once the CSS is enabled
1592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         and if the HSE clock fails, the CSS interrupt occurs and an NMI is
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         automatically generated. The NMI will be executed indefinitely, and 
1594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         since NMI has higher priority than any other IRQ (and main program)
1595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         the application will be stacked in the NMI ISR unless the CSS interrupt
1596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         pending bit is cleared.
1597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_LSIRDY: LSI ready interrupt
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_LSERDY: LSE ready interrupt
1601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_HSIRDY: HSI ready interrupt
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_HSERDY: HSE ready interrupt
1603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_PLLRDY: PLL ready interrupt
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_HSI14RDY: HSI14 ready interrupt
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *              @arg RCC_IT_HSI48RDY: HSI48 ready interrupt, applicable only for STM32F072 devices
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1723              		.loc 1 1611 0
 1724              		.cfi_startproc
 1725 0000 00B5     		push	{lr}
 1726              	.LCFI18:
 1727              		.cfi_def_cfa_offset 4
 1728              		.cfi_offset 14, -4
 1729              	.LVL114:
 1730 0002 054B     		ldr	r3, .L188
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
1617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
1619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 1731              		.loc 1 1619 0
 1732 0004 1A78     		ldrb	r2, [r3]
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (NewState != DISABLE)
 1733              		.loc 1 1616 0
 1734 0006 0029     		cmp	r1, #0
 1735 0008 02D0     		beq	.L186
 1736              		.loc 1 1619 0
 1737 000a 1043     		orr	r0, r2
 1738              	.LVL115:
 1739 000c 1870     		strb	r0, [r3]
 1740 000e 01E0     		b	.L185
 1741              	.LVL116:
 1742              	.L186:
1620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
1624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 1743              		.loc 1 1624 0
 1744 0010 8243     		bic	r2, r0
 1745 0012 1A70     		strb	r2, [r3]
 1746              	.LVL117:
 1747              	.L185:
 1748              		@ sp needed for prologue
1625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1749              		.loc 1 1626 0
 1750 0014 00BD     		pop	{pc}
 1751              	.L189:
 1752 0016 C046     		.align	2
 1753              	.L188:
 1754 0018 09100240 		.word	1073877001
 1755              		.cfi_endproc
 1756              	.LFE69:
 1758              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1759              		.align	1
 1760              		.global	RCC_GetFlagStatus
 1761              		.code	16
 1762              		.thumb_func
 1764              	RCC_GetFlagStatus:
 1765              	.LFB70:
1627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
1632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready  
1633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_PLLRDY: PLL clock ready
1635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_OBLRST: Option Byte Loader (OBL) reset 
1638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_PINRST: Pin reset
1639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_V18PWRRSTF:  V1.8 power domain reset  
1640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_PORRST: POR/PDR reset
1641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_SFTRST: Software reset
1642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_LPWRRST: Low Power reset
1645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSI14RDY: HSI14 oscillator clock ready
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_FLAG_HSI48RDY: HSI48 oscillator clock ready, applicable only for STM32F072
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1766              		.loc 1 1650 0
 1767              		.cfi_startproc
 1768 0000 00B5     		push	{lr}
 1769              	.LCFI19:
 1770              		.cfi_def_cfa_offset 4
 1771              		.cfi_offset 14, -4
 1772              	.LVL118:
1651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t tmp = 0;
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   uint32_t statusreg = 0;
1653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   FlagStatus bitstatus = RESET;
1654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get the RCC register index */
1659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 1773              		.loc 1 1659 0
 1774 0002 4109     		lsr	r1, r0, #5
 1775              	.LVL119:
 1776 0004 094A     		ldr	r2, .L195
1660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (tmp == 0)               /* The flag to check is in CR register */
 1777              		.loc 1 1661 0
 1778 0006 01D1     		bne	.L191
1662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->CR;
 1779              		.loc 1 1663 0
 1780 0008 1368     		ldr	r3, [r2]
 1781              	.LVL120:
 1782 000a 08E0     		b	.L192
 1783              	.LVL121:
 1784              	.L191:
1664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if (tmp == 1)          /* The flag to check is in BDCR register */
 1785              		.loc 1 1665 0
 1786 000c 0129     		cmp	r1, #1
 1787 000e 01D1     		bne	.L193
1666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->BDCR;
 1788              		.loc 1 1667 0
 1789 0010 136A     		ldr	r3, [r2, #32]
 1790              	.LVL122:
 1791 0012 04E0     		b	.L192
 1792              	.LVL123:
 1793              	.L193:
1668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in CSR register */
 1794              		.loc 1 1669 0
 1795 0014 0229     		cmp	r1, #2
 1796 0016 01D1     		bne	.L194
1670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->CSR;
 1797              		.loc 1 1671 0
 1798 0018 536A     		ldr	r3, [r2, #36]
 1799              	.LVL124:
 1800 001a 00E0     		b	.L192
 1801              	.LVL125:
 1802              	.L194:
1672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else                        /* The flag to check is in CR2 register */
1674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     statusreg = RCC->CR2;
 1803              		.loc 1 1675 0
 1804 001c 536B     		ldr	r3, [r2, #52]
 1805              	.LVL126:
 1806              	.L192:
1676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }    
1677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Get the flag position */
1679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 1807              		.loc 1 1679 0
 1808 001e 1F21     		mov	r1, #31
 1809 0020 0840     		and	r0, r1
 1810              	.LVL127:
1680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1811              		.loc 1 1681 0
 1812 0022 C340     		lsr	r3, r3, r0
 1813              	.LVL128:
 1814 0024 181C     		mov	r0, r3
1682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = SET;
1684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = RESET;
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Return the flag status */
1690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return bitstatus;
 1815              		.loc 1 1690 0
 1816 0026 0122     		mov	r2, #1
 1817 0028 1040     		and	r0, r2
 1818              		@ sp needed for prologue
1691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1819              		.loc 1 1691 0
 1820 002a 00BD     		pop	{pc}
 1821              	.L196:
 1822              		.align	2
 1823              	.L195:
 1824 002c 00100240 		.word	1073876992
 1825              		.cfi_endproc
 1826              	.LFE70:
 1828              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1829              		.align	1
 1830              		.global	RCC_WaitForHSEStartUp
 1831              		.code	16
 1832              		.thumb_func
 1834              	RCC_WaitForHSEStartUp:
 1835              	.LFB35:
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1836              		.loc 1 228 0
 1837              		.cfi_startproc
 1838 0000 07B5     		push	{r0, r1, r2, lr}
 1839              	.LCFI20:
 1840              		.cfi_def_cfa_offset 16
 1841              		.cfi_offset 0, -16
 1842              		.cfi_offset 1, -12
 1843              		.cfi_offset 2, -8
 1844              		.cfi_offset 14, -4
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 1845              		.loc 1 229 0
 1846 0002 0023     		mov	r3, #0
 1847 0004 0193     		str	r3, [sp, #4]
 1848              	.LVL129:
 1849              	.L199:
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 1850              		.loc 1 236 0 discriminator 1
 1851 0006 1120     		mov	r0, #17
 1852 0008 FFF7FEFF 		bl	RCC_GetFlagStatus
 1853              	.LVL130:
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     StartUpCounter++;  
 1854              		.loc 1 237 0 discriminator 1
 1855 000c 019A     		ldr	r2, [sp, #4]
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 1856              		.loc 1 238 0 discriminator 1
 1857 000e A023     		mov	r3, #160
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     StartUpCounter++;  
 1858              		.loc 1 237 0 discriminator 1
 1859 0010 0132     		add	r2, r2, #1
 1860              	.LVL131:
 1861 0012 0192     		str	r2, [sp, #4]
 1862              	.LVL132:
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 1863              		.loc 1 238 0 discriminator 1
 1864 0014 019A     		ldr	r2, [sp, #4]
 1865              	.LVL133:
 1866 0016 D901     		lsl	r1, r3, #7
 1867 0018 8A42     		cmp	r2, r1
 1868 001a 01D0     		beq	.L198
 1869 001c 0028     		cmp	r0, #0
 1870 001e F2D0     		beq	.L199
 1871              	.L198:
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 1872              		.loc 1 240 0
 1873 0020 1120     		mov	r0, #17
 1874              	.LVL134:
 1875 0022 FFF7FEFF 		bl	RCC_GetFlagStatus
 1876              	.LVL135:
 1877              		@ sp needed for prologue
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return (status);
 1878              		.loc 1 248 0
 1879 0026 431E     		sub	r3, r0, #1
 1880 0028 9841     		sbc	r0, r0, r3
 1881              	.LVL136:
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1882              		.loc 1 249 0
 1883 002a 0EBD     		pop	{r1, r2, r3, pc}
 1884              		.cfi_endproc
 1885              	.LFE35:
 1887              		.section	.text.RCC_ClearFlag,"ax",%progbits
 1888              		.align	1
 1889              		.global	RCC_ClearFlag
 1890              		.code	16
 1891              		.thumb_func
 1893              	RCC_ClearFlag:
 1894              	.LFB71:
1692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         The reset flags are: RCC_FLAG_OBLRST, RCC_FLAG_PINRST, RCC_FLAG_V18PWRRSTF,
1696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         RCC_FLAG_PORRST, RCC_FLAG_SFTRST, RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST,
1697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *         RCC_FLAG_LPWRRST.
1698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  None
1699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ClearFlag(void)
1702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1895              		.loc 1 1702 0
 1896              		.cfi_startproc
1703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 1897              		.loc 1 1704 0
 1898 0000 034B     		ldr	r3, .L202
 1899 0002 8020     		mov	r0, #128
 1900 0004 596A     		ldr	r1, [r3, #36]
 1901 0006 4204     		lsl	r2, r0, #17
 1902 0008 0A43     		orr	r2, r1
 1903 000a 5A62     		str	r2, [r3, #36]
 1904              		@ sp needed for prologue
1705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1905              		.loc 1 1705 0
 1906 000c 7047     		bx	lr
 1907              	.L203:
 1908 000e C046     		.align	2
 1909              	.L202:
 1910 0010 00100240 		.word	1073876992
 1911              		.cfi_endproc
 1912              	.LFE71:
 1914              		.section	.text.RCC_GetITStatus,"ax",%progbits
 1915              		.align	1
 1916              		.global	RCC_GetITStatus
 1917              		.code	16
 1918              		.thumb_func
 1920              	RCC_GetITStatus:
 1921              	.LFB72:
1706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be one of the following values:
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSIRDY: LSI ready interrupt
1712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSERDY: LSE ready interrupt
1713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSIRDY: HSI ready interrupt
1714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSERDY: HSE ready interrupt
1715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_PLLRDY: PLL ready interrupt
1716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSI14RDY: HSI14 ready interrupt
1717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSI48RDY: HSI48 ready interrupt, applicable only for STM32F072 devices 
1718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_CSS: Clock Security System interrupt
1719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1922              		.loc 1 1722 0
 1923              		.cfi_startproc
 1924              	.LVL137:
1723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   ITStatus bitstatus = RESET;
1724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1925              		.loc 1 1729 0
 1926 0000 0249     		ldr	r1, .L205
 1927              		@ sp needed for prologue
 1928 0002 8B68     		ldr	r3, [r1, #8]
 1929              	.LVL138:
 1930 0004 1840     		and	r0, r3
 1931              	.LVL139:
1730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = SET;
1732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   else
1734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   {
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****     bitstatus = RESET;
1736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   }
1737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Return the RCC_IT status */
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   return  bitstatus;
 1932              		.loc 1 1738 0
 1933 0006 431E     		sub	r3, r0, #1
 1934 0008 9841     		sbc	r0, r0, r3
1739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1935              		.loc 1 1739 0
 1936 000a 7047     		bx	lr
 1937              	.L206:
 1938              		.align	2
 1939              	.L205:
 1940 000c 00100240 		.word	1073876992
 1941              		.cfi_endproc
 1942              	.LFE72:
 1944              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 1945              		.align	1
 1946              		.global	RCC_ClearITPendingBit
 1947              		.code	16
 1948              		.thumb_func
 1950              	RCC_ClearITPendingBit:
 1951              	.LFB73:
1740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** 
1741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** /**
1742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *          This parameter can be any combination of the following values:
1745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSIRDY: LSI ready interrupt
1746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_LSERDY: LSE ready interrupt
1747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSIRDY: HSI ready interrupt
1748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSERDY: HSE ready interrupt
1749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_PLLRDY: PLL ready interrupt
1750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSI48RDY: HSI48 ready interrupt, applicable only for STM32F072 devices 
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_HSI14RDY: HSI14 ready interrupt
1752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *             @arg RCC_IT_CSS: Clock Security System interrupt
1753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   * @retval None
1754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   */
1755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** {
 1952              		.loc 1 1756 0
 1953              		.cfi_startproc
 1954              	.LVL140:
1757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Check the parameters */
1758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   
1760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****      pending bits */
1762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 1955              		.loc 1 1762 0
 1956 0000 014B     		ldr	r3, .L208
 1957              		@ sp needed for prologue
 1958 0002 1870     		strb	r0, [r3]
1763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_rcc.c **** }
 1959              		.loc 1 1763 0
 1960 0004 7047     		bx	lr
 1961              	.L209:
 1962 0006 C046     		.align	2
 1963              	.L208:
 1964 0008 0A100240 		.word	1073877002
 1965              		.cfi_endproc
 1966              	.LFE73:
 1968              		.section	.data.APBAHBPrescTable,"aw",%progbits
 1969              		.set	.LANCHOR0,. + 0
 1972              	APBAHBPrescTable:
 1973 0000 00       		.byte	0
 1974 0001 00       		.byte	0
 1975 0002 00       		.byte	0
 1976 0003 00       		.byte	0
 1977 0004 01       		.byte	1
 1978 0005 02       		.byte	2
 1979 0006 03       		.byte	3
 1980 0007 04       		.byte	4
 1981 0008 01       		.byte	1
 1982 0009 02       		.byte	2
 1983 000a 03       		.byte	3
 1984 000b 04       		.byte	4
 1985 000c 06       		.byte	6
 1986 000d 07       		.byte	7
 1987 000e 08       		.byte	8
 1988 000f 09       		.byte	9
 1989              		.text
 1990              	.Letext0:
 1991              		.file 2 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 1992              		.file 3 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/stm32f
 1993              		.file 4 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\ST
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_rcc.c
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:18     .text.RCC_DeInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:23     .text.RCC_DeInit:00000000 RCC_DeInit
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:79     .text.RCC_DeInit:00000048 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:89     .text.RCC_HSEConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:94     .text.RCC_HSEConfig:00000000 RCC_HSEConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:111    .text.RCC_HSEConfig:0000000c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:116    .text.RCC_AdjustHSICalibrationValue:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:121    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:150    .text.RCC_AdjustHSICalibrationValue:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:155    .text.RCC_HSICmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:160    .text.RCC_HSICmd:00000000 RCC_HSICmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:191    .text.RCC_HSICmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:196    .text.RCC_AdjustHSI14CalibrationValue:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:201    .text.RCC_AdjustHSI14CalibrationValue:00000000 RCC_AdjustHSI14CalibrationValue
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:230    .text.RCC_AdjustHSI14CalibrationValue:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:235    .text.RCC_HSI14Cmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:240    .text.RCC_HSI14Cmd:00000000 RCC_HSI14Cmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:271    .text.RCC_HSI14Cmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:276    .text.RCC_HSI14ADCRequestCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:281    .text.RCC_HSI14ADCRequestCmd:00000000 RCC_HSI14ADCRequestCmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:312    .text.RCC_HSI14ADCRequestCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:317    .text.RCC_LSEConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:322    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:349    .text.RCC_LSEConfig:0000001c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:354    .text.RCC_LSEDriveConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:359    .text.RCC_LSEDriveConfig:00000000 RCC_LSEDriveConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:381    .text.RCC_LSEDriveConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:386    .text.RCC_LSICmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:391    .text.RCC_LSICmd:00000000 RCC_LSICmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:422    .text.RCC_LSICmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:427    .text.RCC_PLLConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:432    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:460    .text.RCC_PLLConfig:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:466    .text.RCC_PLLCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:471    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:503    .text.RCC_PLLCmd:0000001c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:509    .text.RCC_HSI48Cmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:514    .text.RCC_HSI48Cmd:00000000 RCC_HSI48Cmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:546    .text.RCC_HSI48Cmd:0000001c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:552    .text.RCC_PREDIV1Config:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:557    .text.RCC_PREDIV1Config:00000000 RCC_PREDIV1Config
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:583    .text.RCC_PREDIV1Config:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:588    .text.RCC_ClockSecuritySystemCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:593    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:625    .text.RCC_ClockSecuritySystemCmd:0000001c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:631    .text.RCC_MCOConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:636    .text.RCC_MCOConfig:00000000 RCC_MCOConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:650    .text.RCC_MCOConfig:00000008 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:655    .text.RCC_SYSCLKConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:660    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:686    .text.RCC_SYSCLKConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:691    .text.RCC_GetSYSCLKSource:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:696    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:711    .text.RCC_GetSYSCLKSource:0000000c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:716    .text.RCC_HCLKConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:721    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:747    .text.RCC_HCLKConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:752    .text.RCC_PCLKConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:757    .text.RCC_PCLKConfig:00000000 RCC_PCLKConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:783    .text.RCC_PCLKConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:789    .text.RCC_ADCCLKConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:794    .text.RCC_ADCCLKConfig:00000000 RCC_ADCCLKConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:829    .text.RCC_ADCCLKConfig:00000024 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:836    .text.RCC_CECCLKConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:841    .text.RCC_CECCLKConfig:00000000 RCC_CECCLKConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:863    .text.RCC_CECCLKConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:868    .text.RCC_I2CCLKConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:873    .text.RCC_I2CCLKConfig:00000000 RCC_I2CCLKConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:895    .text.RCC_I2CCLKConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:900    .text.RCC_USARTCLKConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:905    .text.RCC_USARTCLKConfig:00000000 RCC_USARTCLKConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:958    .text.RCC_USARTCLKConfig:0000002c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:965    .text.RCC_USBCLKConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:970    .text.RCC_USBCLKConfig:00000000 RCC_USBCLKConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:992    .text.RCC_USBCLKConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:998    .text.RCC_GetClocksFreq:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1003   .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1028   .text.RCC_GetClocksFreq:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1334   .text.RCC_GetClocksFreq:00000168 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1345   .text.RCC_RTCCLKConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1350   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1367   .text.RCC_RTCCLKConfig:0000000c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1372   .text.RCC_RTCCLKCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1377   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1409   .text.RCC_RTCCLKCmd:0000001c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1415   .text.RCC_BackupResetCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1420   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1452   .text.RCC_BackupResetCmd:0000001c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1458   .text.RCC_AHBPeriphClockCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1463   .text.RCC_AHBPeriphClockCmd:00000000 RCC_AHBPeriphClockCmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1496   .text.RCC_AHBPeriphClockCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1501   .text.RCC_APB2PeriphClockCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1506   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1539   .text.RCC_APB2PeriphClockCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1544   .text.RCC_APB1PeriphClockCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1549   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1582   .text.RCC_APB1PeriphClockCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1587   .text.RCC_AHBPeriphResetCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1592   .text.RCC_AHBPeriphResetCmd:00000000 RCC_AHBPeriphResetCmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1625   .text.RCC_AHBPeriphResetCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1630   .text.RCC_APB2PeriphResetCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1635   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1668   .text.RCC_APB2PeriphResetCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1673   .text.RCC_APB1PeriphResetCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1678   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1711   .text.RCC_APB1PeriphResetCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1716   .text.RCC_ITConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1721   .text.RCC_ITConfig:00000000 RCC_ITConfig
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1754   .text.RCC_ITConfig:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1759   .text.RCC_GetFlagStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1764   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1824   .text.RCC_GetFlagStatus:0000002c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1829   .text.RCC_WaitForHSEStartUp:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1834   .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1888   .text.RCC_ClearFlag:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1893   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1910   .text.RCC_ClearFlag:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1915   .text.RCC_GetITStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1920   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1940   .text.RCC_GetITStatus:0000000c $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1945   .text.RCC_ClearITPendingBit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1950   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1964   .text.RCC_ClearITPendingBit:00000008 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1972   .data.APBAHBPrescTable:00000000 APBAHBPrescTable
                     .debug_frame:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1041   .text.RCC_GetClocksFreq:0000001d $d
C:\Users\khanh\AppData\Local\Temp\ccPEJJZv.s:1041   .text.RCC_GetClocksFreq:0000001e $t

UNDEFINED SYMBOLS
__aeabi_uidiv
__gnu_thumb1_case_uqi
