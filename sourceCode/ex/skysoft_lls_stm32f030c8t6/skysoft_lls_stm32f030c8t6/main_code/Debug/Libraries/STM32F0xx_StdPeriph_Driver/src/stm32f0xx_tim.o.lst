   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_tim.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.TI1_Config,"ax",%progbits
  18              		.align	1
  19              		.code	16
  20              		.thumb_func
  22              	TI1_Config:
  23              	.LFB122:
  24              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @file    stm32f0xx_tim.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          functionalities of the TIM peripheral:
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + TimeBase management
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Output Compare management
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Input Capture management
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Interrupts, DMA and flags management
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Clocks management
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Synchronization management
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Specific interface management
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            + Specific remapping management      
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *              
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *  @verbatim
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                     ##### How to use this driver #####
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] This driver provides functions to configure and program the TIM 
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          of all STM32F0xx devices These functions are split in 8 groups: 
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM TimeBase management: this group includes all needed functions 
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              to configure the TM Timebase unit:
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Set/Get Prescaler.
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Set/Get Autoreload.
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Counter modes configuration.
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Set Clock division.
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the One Pulse mode.
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Update Request Configuration.
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Update Disable Configuration.
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Auto-Preload Configuration.
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Enable/Disable the counter.
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM Output Compare management: this group includes all needed 
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              functions to configure the Capture/Compare unit used in Output 
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              compare mode: 
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Configure each channel, independently, in Output Compare mode.
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the output compare modes.
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the Polarities of each channel.
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Set/Get the Capture/Compare register values.
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the Output Compare Fast mode. 
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the Output Compare Forced mode.  
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Output Compare-Preload Configuration. 
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Clear Output Compare Reference.
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the OCREF Clear signal.
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Enable/Disable the Capture/Compare Channels.    
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM Input Capture management: this group includes all needed 
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              functions to configure the Capture/Compare unit used in 
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              Input Capture mode:
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Configure each channel in input capture mode.
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Configure Channel1/2 in PWM Input mode.
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Set the Input Capture Prescaler.
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Get the Capture/Compare values.  
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (#) Advanced-control timers (TIM1) specific features
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (++) Configures the Break input, dead time, Lock level, the OSSI,
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                  the OSSR State and the AOE(automatic output enable)
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (++) Enable/Disable the TIM peripheral Main Outputs
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (++) Select the Commutation event
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (++) Set/Reset the Capture Compare Preload Control bit     
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM interrupts, DMA and flags management.
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Enable/Disable interrupt sources.
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Get flags status.
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Clear flags/ Pending bits.
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Enable/Disable DMA requests. 
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Configure DMA burst mode.
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select CaptureCompare DMA request.  
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM clocks management: this group includes all needed functions 
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              to configure the clock controller unit:
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select internal/External clock.
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select the external clock mode: ETR(Mode1/Mode2), TIx or ITRx.
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM synchronization management: this group includes all needed. 
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              functions to configure the Synchronization unit:
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select Input Trigger.  
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select Output Trigger.  
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select Master Slave Mode. 
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) ETR Configuration when used as external trigger.   
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM specific interface management, this group includes all 
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              needed functions to use the specific TIM interface:
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Encoder Interface Configuration.
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Select Hall Sensor.   
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) TIM specific remapping management includes the Remapping 
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              configuration of specific timers
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *    
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   ******************************************************************************
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @attention
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * You may not use this file except in compliance with the License.
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * You may obtain a copy of the License at:
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * Unless required by applicable law or agreed to in writing, software 
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * See the License for the specific language governing permissions and
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * limitations under the License.
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   ******************************************************************************
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Includes ------------------------------------------------------------------*/
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #include "stm32f0xx_tim.h"
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #include "stm32f0xx_rcc.h"
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM 
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief TIM driver modules
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private typedef -----------------------------------------------------------*/
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private define ------------------------------------------------------------*/
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* ---------------------- TIM registers bit mask ------------------------ */
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #define SMCR_ETR_MASK               ((uint16_t)0x00FF) 
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #define CCMR_OFFSET                 ((uint16_t)0x0018)
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #define CCER_CCE_SET                ((uint16_t)0x0001)
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** #define CCER_CCNE_SET               ((uint16_t)0x0004) 
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private macro -------------------------------------------------------------*/
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private variables ---------------------------------------------------------*/
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private function prototypes -----------------------------------------------*/
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter);
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /* Private functions ---------------------------------------------------------*/
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Private_Functions
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group1 TimeBase management functions
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief   TimeBase management functions 
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                  ##### TimeBase management functions #####
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         *** TIM Driver: how to use it in Timing(Time base) Mode ***
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] To use the Timer in Timing(Time base) mode, the following steps are 
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          mandatory:
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable TIM clock using 
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function.
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Fill the TIM_TimeBaseInitStruct with the desired parameters.
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call TIM_TimeBaseInit(TIMx, &TIM_TimeBaseInitStruct) to configure 
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              the Time Base unit with the corresponding configuration.
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable the NVIC if you need to generate the update interrupt. 
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable the corresponding interrupt using the function 
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              TIM_ITConfig(TIMx, TIM_IT_Update). 
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..]
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (@) All other functions can be used seperatly to modify, if needed,
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             a specific feature of the Timer. 
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM peripheral.
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *   
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_DeInit(TIM_TypeDef* TIMx)
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIMx == TIM1)
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }     
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM2)
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM3)
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM6)
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   } 
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM7)
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM14) 
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {       
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }        
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM15)
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   } 
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM16)
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   } 
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     if (TIMx == TIM17)
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     {
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     }  
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****      
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Time Base Unit peripheral according to 
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         the specified parameters in the TIM_TimeBaseInitStruct.
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         structure that contains the configuration information for
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         the specified TIM peripheral.
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpcr1 = 0;
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 = TIMx->CR1;  
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Select the Counter Mode */
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx != TIM6)
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the clock division */
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 = tmpcr1;
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Autoreload value */
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Prescaler value */
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Repetition Counter value */
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Generate an update event to reload the Prescaler and the Repetition counter
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****      values immediately */
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_TimeBaseInitStruct member with its default value.
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         which will be initialized.
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the default configuration */
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Prescaler.
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM peripheral.
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Prescaler: specifies the Prescaler Register value
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_PSCReloadMode: specifies the TIM Prescaler Reload mode
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Prescaler value */
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->PSC = Prescaler;
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or reset the UG Bit */
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode;
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Specifies the TIMx Counter Mode to be used.
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, or 3 to select the TIM peripheral.
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_CounterMode: specifies the Counter Mode to be used
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_Up: TIM Up Counting Mode
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_Down: TIM Down Counting Mode
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned1: TIM Center Aligned Mode1
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpcr1 = 0;
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 = TIMx->CR1;
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the CMS and DIR Bits */
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Counter Mode */
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 |= TIM_CounterMode;
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CR1 register */
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 = tmpcr1;
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Counter Register value
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          peripheral.
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Counter: specifies the Counter register new value.
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    assert_param(IS_TIM_ALL_PERIPH(TIMx));
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Counter Register value */
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CNT = Counter;
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Autoreload Register value
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM peripheral.
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Autoreload: specifies the Autoreload register new value.
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Autoreload Register value */
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->ARR = Autoreload;
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Counter value.
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Counter Register value.
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Counter Register value */
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CNT;
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Prescaler value.
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Prescaler Register value.
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Prescaler Register value */
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->PSC;
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or Disables the TIMx Update event.
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx UDIS bit
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Update Disable Bit */
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Update Disable Bit */
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Update Request Interrupt source.
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_UpdateSource: specifies the Update source.
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_UpdateSource_Regular: Source of update is the counter
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                 overflow/underflow or the setting of UG bit, or an update
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                 generation through the slave mode controller.
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_UpdateSource != TIM_UpdateSource_Global)
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the URS Bit */
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the URS Bit */
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables TIMx peripheral Preload register on ARR.
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral Preload register
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the ARR Preload Bit */
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the ARR Preload Bit */
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx's One Pulse Mode.
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17 to select the TIM 
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OPMode: specifies the OPM Mode to be used.
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OPMode_Single
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OPMode_Repetitive
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OPM Bit */
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure the OPM Mode */
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 |= TIM_OPMode;
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Clock Division value.
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 14, 15, 16 and 17 to select the TIM peripheral.
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_CKD: specifies the clock division value.
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following value:
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CKD_DIV1: TDTS = Tck_tim
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_CKD));
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the CKD Bits */
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the CKD value */
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 |= TIM_CKD;
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the specified TIM peripheral.
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 and 17to select the TIMx
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral.
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Enable the TIM Counter */
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Disable the TIM Counter */
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group2 Advanced-control timers (TIM1) specific features
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief   Advanced-control timers (TIM1) specific features
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim   
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       ##### Advanced-control timers (TIM1) specific features #####
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================  
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****        ===================================================================      
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****               *** TIM Driver: how to use the Break feature ***
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****        =================================================================== 
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****        [..] After configuring the Timer channel(s) in the appropriate Output Compare mode: 
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                          
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****            (#) Fill the TIM_BDTRInitStruct with the desired parameters for the Timer
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                Break Polarity, dead time, Lock level, the OSSI/OSSR State and the 
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                AOE(automatic output enable).
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****            (#) Call TIM_BDTRConfig(TIMx, &TIM_BDTRInitStruct) to configure the Timer
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****           
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****            (#) Enable the Main Output using TIM_CtrlPWMOutputs(TIM1, ENABLE) 
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****           
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****            (#) Once the break even occurs, the Timer's output signals are put in reset
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                state or in a known state (according to the configuration made in
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_BDTRConfig() function).
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the: Break feature, dead time, Lock level, OSSI/OSSR State
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         and the AOE(automatic output enable).
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 15, 16 or 17 to select the TIM 
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         contains the BDTR Register configuration  information for the TIM peripheral.
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****      the OSSI State, the dead time value and the Automatic Output Enable Bit */
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              TIM_BDTRInitStruct->TIM_AutomaticOutput;
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_BDTRInitStruct member with its default value.
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         will be initialized.
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the default configuration */
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIM peripheral Main Outputs.
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 15, 16 or 17 to select the TIMx peripheral.
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIM peripheral Main Outputs.
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Enable the TIM Main Output */
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->BDTR |= TIM_BDTR_MOE;
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Disable the TIM Main Output */
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }  
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group3 Output Compare management functions
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Output Compare management functions 
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                 ##### Output Compare management functions #####
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         *** TIM Driver: how to use it in Output Compare Mode ***
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] To use the Timer in Output Compare mode, the following steps are mandatory:
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable TIM clock using 
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function.
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the TIM pins by configuring the corresponding GPIO pins
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Time base unit as described in the first part of this 
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              driver, if needed, else the Timer will run with the default 
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              configuration:
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Autoreload value = 0xFFFF.
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Prescaler value = 0x0000.
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Counter mode = Up counting.
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Clock Division = TIM_CKD_DIV1.
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Fill the TIM_OCInitStruct with the desired parameters including:
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) The TIM Output Compare mode: TIM_OCMode.
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Output State: TIM_OutputState.
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Pulse value: TIM_Pulse.
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Output Compare Polarity : TIM_OCPolarity.
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call TIM_OCxInit(TIMx, &TIM_OCInitStruct) to configure the desired 
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              channel with the corresponding configuration.
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..]
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (@) All other functions can be used separately to modify, if needed,
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****           a specific feature of the Timer.
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (@) In case of PWM mode, this function is mandatory:
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             TIM_OCxPreloadConfig(TIMx, TIM_OCPreload_ENABLE).
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (@) If the corresponding interrupt or DMA request are needed, the user should:
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (#@) Enable the NVIC (or the DMA) to use the TIM interrupts (or DMA requests).
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             (#@) Enable the corresponding interrupt (or DMA request) using the function
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                  TIM_ITConfig(TIMx, TIM_IT_CCx) (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx)).
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel1 according to the specified
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 and 17 to select the TIM peripheral.
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  /* Disable the Channel 1: Reset the CC1E Bit */
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Compare Mode Bits */
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output State */
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Output N Polarity level */
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N Polarity */
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Output N State */
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N State */
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare and Output Compare N IDLE State */
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N Idle state */
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel2 according to the specified
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    /* Disable the Channel 2: Reset the CC2E Bit */
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */  
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output State */
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Check the parameters */
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare State */
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     if (TIMx == TIM1)
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     {    
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Check the parameters */
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Reset the Output N Polarity level */
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Set the Output N Polarity */
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Reset the Output N State */
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Set the Output N State */
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Reset the Output Compare N IDLE State */
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       /* Set the Output N Idle state */
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     }
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel3 according to the specified
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output State */
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Output N Polarity level */
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N Polarity */
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Output N State */
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N State */
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare and Output Compare N IDLE State */
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output N Idle state */
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIMx Channel4 according to the specified
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_OCInitStruct.
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel 2: Reset the CC4E Bit */
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CR2 register value */
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Output Compare Mode */
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the Output Polarity level */
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output Compare Polarity */
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Output State */
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the Ouput Compare IDLE State */
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Output Idle state */
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CR2 */
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */  
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare Register value */
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_OCInitStruct member with its default value.
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         be initialized.
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the default configuration */
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x0000000;
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIM Output Compare Mode.
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   This function disables the selected channel before changing the Output
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         Compare Mode.
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         User has to enable this channel using TIM_CCxCmd and TIM_CCxNCmd functions.
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCMode: specifies the TIM Output Compare Mode.
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_Timing
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_Active
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_Toggle
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_PWM1
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCMode_PWM2
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint32_t tmp = 0;
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmp1 = 0;
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCM(TIM_OCMode));
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint32_t) TIMx;
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp += CCMR_OFFSET;
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel: Reset the CCxE Bit */
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmp += (TIM_Channel>>1);
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= TIM_OCMode;
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare1 Register value
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Compare1: specifies the Capture Compare1 register new value.
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare1 Register value */
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR1 = Compare1;
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare2 Register value
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Compare2: specifies the Capture Compare2 register new value.
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare2 Register value */
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR2 = Compare2;
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare3 Register value
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Compare3: specifies the Capture Compare3 register new value.
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare3 Register value */
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR3 = Compare3;
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Capture Compare4 Register value
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.    
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  Compare4: specifies the Capture Compare4 register new value.
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Capture Compare4 Register value */
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR4 = Compare4;
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 1 waveform to active or inactive level.
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC1M Bits */
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_ForcedAction;
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 2 waveform to active or inactive level.
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC2M Bits */
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 3 waveform to active or inactive level.
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC1M Bits */
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_ForcedAction;
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Forces the TIMx output 4 waveform to active or inactive level.
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC2M Bits */
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure The Forced output Mode */
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets or Resets the TIM peripheral Capture Compare Preload Control bit.
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIMx peripheral
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the Capture Compare Preload Control bit
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the CCPC Bit */
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the CCPC Bit */
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR1.
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 and 17 to select the TIM peripheral.
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC1PE Bit */
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCPreload;
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR2.
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 and 15 to select the TIM peripheral.
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC2PE Bit */
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR3.
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC3PE Bit */
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCPreload;
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR4.
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC4PE Bit */
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 1 Fast feature.
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC1FE Bit */
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCFast;
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 2 Fast feature.
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC2FE Bit */
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 3 Fast feature.
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC3FE Bit */
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCFast;
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Output Compare 4 Fast feature.
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC4FE Bit */
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
1576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
1578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 */
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF1 signal on an external event
1584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC1CE Bit */
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
1603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCClear;
1605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF2 signal on an external event
1611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
1612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
1622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
1628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC2CE Bit */
1629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
1630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
1632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 register */
1633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
1634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF3 signal on an external event
1638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC3CE Bit */
1656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
1657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCClear;
1659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears or safeguards the OCREF4 signal on an external event
1665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0;
1676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
1682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the OC4CE Bit */
1683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
1684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
1686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 register */
1687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 1 polarity.
1692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC1 Polarity
1695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC1P Bit */
1710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCPolarity;
1712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Channel 1N polarity.
1718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 15, 16 or 17 to select the TIM peripheral.
1719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC1N Polarity
1720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
1732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC1NP Bit */
1734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCNPolarity;
1736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 2 polarity.
1742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
1743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC2 Polarity
1745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC2P Bit */
1760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
1761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
1762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Channel 2N polarity.
1768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1 to select the TIM peripheral.
1769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC2N Polarity
1770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC2NP Bit */
1784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
1785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
1786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 3 polarity.
1792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC3 Polarity
1795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC3P Bit */
1810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
1811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
1812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Channel 3N polarity.
1818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1 to select the TIM peripheral.
1819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC3N Polarity
1820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
1829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
1833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC3NP Bit */
1835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
1836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
1837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx channel 4 polarity.
1843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC4 Polarity
1846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
1854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
1859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
1860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the CC4P Bit */
1861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
1862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
1863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER register */
1864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
1865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the OCReference Clear source.
1869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
1870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
1871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_OCReferenceClear: specifies the OCReference Clear source.
1872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCReferenceClear_ETRF: The internal OCreference clear input is connected to
1874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_OCReferenceClear_OCREFCLR: The internal OCreference clear input is connecte
1875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectOCREFClear(TIM_TypeDef* TIMx, uint16_t TIM_OCReferenceClear)
1878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));
1882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the TIM_OCReferenceClear source */
1884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
1885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |=  TIM_OCReferenceClear;
1886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel x.
1890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
1891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
1892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
1894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
1898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
1899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
1900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
1903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmp = 0;
1905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx)); 
1908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CCX(TIM_CCx));
1909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = CCER_CCE_SET << TIM_Channel;
1911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the CCxE Bit */
1913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
1914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or reset the CCxE Bit */ 
1916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
1917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel xN.
1921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 15, 16 or 17 to select the TIM peripheral.
1922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
1924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
1928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
1929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
1932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmp = 0;
1934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
1938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CCXN(TIM_CCxN));
1939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = CCER_CCNE_SET << TIM_Channel;
1941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the CCxNE Bit */
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
1944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or reset the CCxNE Bit */ 
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
1947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIM peripheral Commutation event.
1951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 15, 16 or 17 to select the TIMx peripheral
1952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the Commutation event.
1953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
1954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
1955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
1957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
1958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
1959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
1962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the COM Bit */
1964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
1965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
1967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
1968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the COM Bit */
1969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
1970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
1971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
1972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
1974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
1975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
1976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
1977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group4 Input Capture management functions
1978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Input Capture management functions 
1979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
1980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
1981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
1982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                ##### Input Capture management functions #####
1983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
1984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
1985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****           *** TIM Driver: how to use it in Input Capture Mode ***
1986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
1987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] To use the Timer in Input Capture mode, the following steps are mandatory:
1988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) 
1989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              function.
1990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the TIM pins by configuring the corresponding GPIO pins.
1991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Time base unit as described in the first part of this 
1992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              driver, if needed, else the Timer will run with the default configuration:
1993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Autoreload value = 0xFFFF.
1994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Prescaler value = 0x0000.
1995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Counter mode = Up counting.
1996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) Clock Division = TIM_CKD_DIV1.
1997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Fill the TIM_ICInitStruct with the desired parameters including:
1998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Channel: TIM_Channel.
1999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Input Capture polarity: TIM_ICPolarity.
2000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Input Capture selection: TIM_ICSelection.
2001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Input Capture Prescaler: TIM_ICPrescaler.
2002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) TIM Input CApture filter value: TIM_ICFilter.
2003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call TIM_ICInit(TIMx, &TIM_ICInitStruct) to configure the desired 
2004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              channel with the corresponding configuration and to measure only 
2005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              frequency or duty cycle of the input signal,or, Call 
2006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              TIM_PWMIConfig(TIMx, &TIM_ICInitStruct) to configure the desired 
2007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              channels with the corresponding configuration and to measure the 
2008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              frequency and the duty cycle of the input signal.
2009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable the NVIC or the DMA to read the measured frequency.
2010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Enable the corresponding interrupt (or DMA request) to read 
2011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              the Captured value, using the function TIM_ITConfig(TIMx, TIM_IT_CCx)
2012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx)).
2013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
2014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Use TIM_GetCapturex(TIMx); to read the captured value.
2015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..]
2016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         (@) All other functions can be used separately to modify, if needed,
2017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****             a specific feature of the Timer. 
2018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
2020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
2021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Initializes the TIM peripheral according to the specified
2025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_ICInitStruct.
2026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
2027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
2029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
2030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
2031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_ICInitStruct->TIM_Channel));  
2038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
2039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
2040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
2041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
2042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
2044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI1 Configuration */
2047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
2048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
2054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI2 Configuration */
2057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
2058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
2064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI3 Configuration */
2067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
2068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI4 Configuration */
2077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
2078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
2079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Fills each TIM_ICInitStruct member with its default value.
2087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
2088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         be initialized.
2089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
2092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the default configuration */
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
2095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
2096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
2097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
2098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
2099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIM peripheral according to the specified
2103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         parameters in the TIM_ICInitStruct to measure an external PWM signal.
2104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
2107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         that contains the configuration information for the specified TIM 
2108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         peripheral.
2109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
2114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
2115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Opposite Input Polarity */
2118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
2119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
2121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Rising;
2125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Opposite Input */
2127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
2128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
2130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositeselection = TIM_ICSelection_DirectTI;
2134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
2136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI1 Configuration */
2138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
2139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI2 Configuration */
2143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
2144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   { 
2149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI2 Configuration */
2150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
2151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* TI1 Configuration */
2155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
2156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the Input Capture Prescaler value */
2157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 1 value.
2163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
2164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Capture Compare 1 Register value.
2166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
2168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Capture 1 Register value */
2173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR1;
2174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 2 value.
2178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Capture Compare 2 Register value.
2180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
2182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Capture 2 Register value */
2187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR2;
2188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 3 value.
2192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Capture Compare 3 Register value.
2195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
2197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
2200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Capture 3 Register value */
2202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR3;
2203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Gets the TIMx Input Capture 4 value.
2207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval Capture Compare 4 Register value.
2210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
2212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the Capture 4 Register value */
2217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR4;
2218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 1 prescaler.
2222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
2223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture1 prescaler new value.
2225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the IC1PSC Bits */
2239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
2240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the IC1PSC value */
2241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= TIM_ICPSC;
2242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 2 prescaler.
2246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture2 prescaler new value.
2249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the IC2PSC Bits */
2263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
2264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the IC2PSC value */
2265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
2266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 3 prescaler.
2270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture3 prescaler new value.
2273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the IC3PSC Bits */
2287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
2288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the IC3PSC value */
2289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= TIM_ICPSC;
2290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets the TIMx Input Capture 4 prescaler.
2294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture4 prescaler new value.
2297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
2306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the IC4PSC Bits */
2311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
2312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the IC4PSC value */
2313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
2314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
2318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group5 Interrupts DMA and flags management functions
2321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Interrupts, DMA and flags management functions 
2322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
2323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
2324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****           ##### Interrupts, DMA and flags management functions #####
2326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
2329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
2330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the specified TIM interrupts.
2334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIMx peripheral.
2335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupts sources to be enabled or disabled.
2339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * 
2349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can only generate an update interrupt.
2350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_IT_Update, TIM_IT_CC1,TIM_IT_CC2 or TIM_IT_Trigger. 
2351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_Break is used only with TIM1 and TIM15. 
2353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *       
2355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIM interrupts.
2356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
2360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
2361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
2364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
2367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Enable the Interrupt sources */
2369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_IT;
2370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Disable the Interrupt sources */
2374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_IT;
2375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx event to be generate by software.
2380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the 
2381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         TIM peripheral.
2382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_EventSource: specifies the event source.
2386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one or more of the following values:  
2387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_Update: Timer update Event source
2388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC1: Timer Capture Compare 1 Event source
2389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC2: Timer Capture Compare 2 Event source
2390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC3: Timer Capture Compare 3 Event source
2391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_CC4: Timer Capture Compare 4 Event source
2392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_COM: Timer COM event source  
2393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_Trigger: Timer Trigger Event source
2394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EventSource_Break: Timer Break event source
2395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can only generate an update event.  
2397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1.
2398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *             
2399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
2402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
2403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource)); 
2406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the event sources */
2407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_EventSource;
2408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Checks whether the specified TIM flag is set or not.
2412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_FLAG: specifies the flag to check.
2417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 overcapture Flag
2427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 overcapture Flag
2428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 overcapture Flag
2429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 overcapture Flag
2430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_FLAG_Update, TIM_FLAG_CC1, TIM_FLAG_CC2 or TIM_FLAG_Trigger.
2433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_FLAG_Update or TIM_FLAG_CC1.   
2434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_Break is used only with TIM1 and TIM15. 
2435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_COM is used only with TIM1 TIM15, TIM16 and TIM17.
2436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval The new state of TIM_FLAG (SET or RESET).
2438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
2441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   ITStatus bitstatus = RESET; 
2442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
2443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
2446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
2448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     bitstatus = SET;
2450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     bitstatus = RESET;
2454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return bitstatus;
2456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears the TIMx's pending flags.
2460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_FLAG: specifies the flag bit to clear.
2465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 overcapture Flag
2475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 overcapture Flag
2476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 overcapture Flag
2477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 overcapture Flag
2478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_FLAG_Update, TIM_FLAG_CC1,TIM_FLAG_CC2 or 
2481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         TIM_FLAG_Trigger. 
2482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_FLAG_Update or TIM_FLAG_CC1.   
2483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_Break is used only with TIM1 and TIM15. 
2484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_FLAG_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
2490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
2493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
2494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Clear the flags */
2495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_FLAG;
2496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Checks whether the TIM interrupt has occurred or not.
2500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupt source to check.
2505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_IT_Update, TIM_IT_CC1, TIM_IT_CC2 or TIM_IT_Trigger. 
2517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_Break is used only with TIM1 and TIM15. 
2519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval The new state of the TIM_IT(SET or RESET).
2522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   ITStatus bitstatus = RESET;  
2526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t itstatus = 0x0, itenable = 0x0;
2527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_GET_IT(TIM_IT));
2531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
2532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   itstatus = TIMx->SR & TIM_IT;
2533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   itenable = TIMx->DIER & TIM_IT;
2535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
2536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     bitstatus = SET;
2538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     bitstatus = RESET;
2542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return bitstatus;
2544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Clears the TIMx's interrupt pending bits.
2548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 14, 15, 16 or 17 to select the TIM peripheral.
2549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_IT: specifies the pending bit to clear.
2553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Update: TIM1 update Interrupt source
2555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM15 can have only TIM_IT_Update, TIM_IT_CC1, TIM_IT_CC2 or TIM_IT_Trigger. 
2565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_Break is used only with TIM1 and TIM15. 
2567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM_IT_COM is used only with TIM1, TIM15, TIM16 and TIM17.
2568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
2576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    
2577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Clear the IT pending Bit */
2578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_IT;
2579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx's DMA interface.
2583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 15, 16 or 17  to select the TIM peripheral.
2584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_DMABase: DMA Base address.
2586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CR1
2588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CR2
2589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_SMCR
2590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_DIER
2591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_SR
2592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_EGR
2593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCMR1
2594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCMR2
2595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCER
2596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CNT
2597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_PSC
2598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_ARR
2599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR1
2600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR2
2601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR3 
2602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_CCR4
2603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_DCR
2604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMABase_OR
2605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
2606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
2607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
2610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
2614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
2615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the DMA Base and the DMA Burst Length */
2616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
2617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx's DMA Requests.
2621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, 15, 16 or 17 to select the TIM peripheral. 
2622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_DMASource: specifies the DMA Request sources.
2626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be any combination of the following values:
2627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_Update: TIM update Interrupt source
2628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
2629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
2630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
2631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
2632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_COM: TIM Commutation DMA source
2633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_DMA_Trigger: TIM Trigger DMA source
2634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the DMA Request sources.
2635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
2639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
2640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST10_PERIPH(TIMx));
2642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
2643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
2646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Enable the DMA sources */
2648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_DMASource; 
2649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Disable the DMA sources */
2653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_DMASource;
2654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx peripheral Capture Compare DMA source.
2659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 15, 16 or 17  to select the TIM peripheral.
2660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.
2661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the Capture Compare DMA source
2662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
2666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx));
2669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
2672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the CCDS Bit */
2674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
2675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the CCDS Bit */
2679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
2680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
2685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group6 Clocks management functions
2688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Clocks management functions
2689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
2690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
2691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                      ##### Clocks management functions #####
2693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
2696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
2697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx internal Clock
2701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
2706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable slave mode to clock the prescaler directly with the internal clock */
2710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
2711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Internal Trigger as External Clock
2715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ITRSource: Trigger source.
2718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR0: Internal Trigger 0
2720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR1: Internal Trigger 1
2721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR2: Internal Trigger 2
2722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg  TIM_TS_ITR3: Internal Trigger 3
2723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
2730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Internal Trigger */
2731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
2732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the External clock mode1 */
2733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
2734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Trigger as External Clock
2738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_TIxExternalCLKSource: Trigger source.
2741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1ED: TI1 Edge Detector
2743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1: Filtered Timer Input 1
2744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI2: Filtered Timer Input 2
2745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: specifies the TIx Polarity.
2746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
2748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
2749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  ICFilter: specifies the filter value.
2750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x0 and 0xF.
2751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
2754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                                 uint16_t TIM_ICPolarity, uint16_t ICFilter)
2755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
2759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(ICFilter));
2760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure the Timer Input Clock Source */
2762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
2763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
2765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
2767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
2768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
2769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
2770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Trigger source */
2771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
2772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the External clock mode1 */
2773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
2774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the External clock Mode1
2778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
2789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
2791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPo
2795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                              uint16_t ExtTRGFilter)
2796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
2798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
2803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure the ETR Clock source */
2806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
2807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx SMCR register value */
2809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
2810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the SMS Bits */
2811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
2812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the External clock mode1 */
2813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_SlaveMode_External1;
2814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Trigger selection : ETRF */
2815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
2816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_TS_ETRF;
2817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
2818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
2819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the External clock Mode2
2823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
2824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
2834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
2836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
2840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                              uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
2841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
2846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Configure the ETR Clock source */
2849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
2850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Enable the External clock mode2 */
2851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SMCR_ECE;
2852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
2856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group7 Synchronization management functions
2859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Synchronization management functions 
2860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
2861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
2862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                ##### Synchronization management functions #####
2864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****         *** TIM Driver: how to use it in synchronization Mode ***
2866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
2867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] Case of two/several Timers
2868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Master Timers using the following functions:
2869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx,
2870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                   uint16_t TIM_TRGOSource).
2871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx,
2872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                   uint16_t TIM_MasterSlaveMode);  
2873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Slave Timers using the following functions: 
2874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, 
2875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                   uint16_t TIM_InputTriggerSource);  
2876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);
2877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     [..] Case of Timers and external trigger(ETR pin)
2878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Etrenal trigger using this function:
2879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
2880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter);
2881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****          (#) Configure the Slave Timers using the following functions:
2882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx,
2883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                   uint16_t TIM_InputTriggerSource);
2884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode);
2885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
2887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
2888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the Input Trigger source
2891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_InputTriggerSource: The Input Trigger source.
2894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR0: Internal Trigger 0
2896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR1: Internal Trigger 1
2897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR2: Internal Trigger 2
2898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ITR3: Internal Trigger 3
2899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_TI1F_ED: TI1 Edge Detector
2900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
2901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
2902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TS_ETRF: External Trigger input
2903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
2908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
2911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
2912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx SMCR register value */
2914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
2915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the TS Bits */
2916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
2917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Input Trigger source */
2918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
2919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
2920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
2921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx Trigger Output Mode.
2925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 6, 7, or 15 to select the TIM peripheral.
2926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM7 is applicable only for STM32F072 devices
2927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM6 is not applivable for STM32F031 devices.
2928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_TRGOSource: specifies the Trigger Output source.
2930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *   - For all TIMx
2933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_Reset:  The UG bit in the TIM_EGR register is used as the trigge
2934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_Enable: The Counter Enable CEN is used as the trigger output (TR
2935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_Update: The update event is selected as the trigger output (TRGO
2936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *   - For all TIMx except TIM6 and TIM7
2938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC1: The trigger output sends a positive pulse when the CC1IF fl
2939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                                     is to be set, as soon as a capture or compare match occurs 
2940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC1Ref: OC1REF signal is used as the trigger output (TRGO).
2941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC2Ref: OC2REF signal is used as the trigger output (TRGO).
2942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC3Ref: OC3REF signal is used as the trigger output (TRGO).
2943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
2944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *
2945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
2948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST9_PERIPH(TIMx));
2951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
2952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the MMS Bits */
2954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
2955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the TRGO source */
2956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 |=  TIM_TRGOSource;
2957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Selects the TIMx Slave Mode.
2961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3 or 15 to select the TIM peripheral.
2962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_SlaveMode: specifies the Timer Slave Mode.
2964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_Reset: Rising edge of the selected trigger signal (TRGI) re-initi
2966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                                      the counter and triggers an update of the registers.
2967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_Gated:     The counter clock is enabled when the trigger signal (
2968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRG
2969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the 
2970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
2973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
2976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
2977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
2978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the SMS Bits */
2979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
2980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Slave Mode */
2981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode;
2982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
2983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
2984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
2985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Sets or Resets the TIMx Master/Slave Mode.
2986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
2987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
2988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_MasterSlaveMode: specifies the Timer Master Slave Mode.
2989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
2990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Enable: synchronization between the current timer
2991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                                             and its slaves (through TRGO).
2992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Disable: No action
2993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
2994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
2995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
2996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
2997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
2998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
3000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the MSM Bit */
3002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
3003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set or Reset the MSM Bit */
3005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_MasterSlaveMode;
3006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx External Trigger (ETR).
3010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
3013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
3015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
3016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
3017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
3018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
3019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
3021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
3022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
3023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
3024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
3027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                    uint16_t ExtTRGFilter)
3028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
3030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
3032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
3034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
3035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
3036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
3038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Reset the ETR Bits */
3039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= SMCR_ETR_MASK;
3040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Prescaler, the Filter value and the Polarity */
3041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
3042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
3043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
3044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
3048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group8 Specific interface management functions
3051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief    Specific interface management functions 
3052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
3053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
3054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
3055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****              ##### Specific interface management functions #####
3056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
3057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
3059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
3060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIMx Encoder Interface.
3064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be  1, 2 or 3 to select the TIM peripheral.
3065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_EncoderMode: specifies the TIMx Encoder Mode.
3067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EncoderMode_TI1: Counter counts on TI1FP1 edge depending on TI2FP2 level.
3069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EncoderMode_TI2: Counter counts on TI2FP2 edge depending on TI1FP1 level.
3070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_EncoderMode_TI12: Counter counts on both TI1FP1 and TI2FP2 edges depending
3071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                                       on the level of the other input.
3072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_IC1Polarity: specifies the IC1 Polarity
3073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
3074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_IC2Polarity: specifies the IC2 Polarity
3077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parmeter can be one of the following values:
3078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
3083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                                 uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
3084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpsmcr = 0;
3086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0;
3087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccer = 0;
3088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     
3089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
3090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
3092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
3093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
3094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx SMCR register value */
3096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
3097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCMR1 register value */
3098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
3099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Get the TIMx CCER register value */
3100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
3101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the encoder Mode */
3102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
3103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_EncoderMode;
3104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Capture Compare 1 and the Capture Compare 2 as input */
3105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1
3106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
3107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the TI1 and the TI2 Polarities */
3108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_C
3109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
3110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx SMCR */
3111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
3112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 */
3113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
3114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCER */
3115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
3116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Enables or disables the TIMx's Hall sensor interface.
3120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  NewState: new state of the TIMx Hall sensor interface.
3123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
3124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
3127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Check the parameters */
3129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
3131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   
3132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
3133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
3134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Set the TI1S Bit */
3135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
3136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
3137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else
3138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   {
3139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     /* Reset the TI1S Bit */
3140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
3141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   }
3142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
3146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /** @defgroup TIM_Group9 Specific remapping management function
3149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *  @brief   Specific remapping management function
3150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  *
3151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @verbatim
3152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
3153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                ##### Specific remapping management function #####
3154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  ===============================================================================
3155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** @endverbatim
3157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @{
3158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configures the TIM14 Remapping input Capabilities.
3161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 14 to select the TIM peripheral.
3162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_Remap: specifies the TIM input reampping source.
3163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM14_GPIO: TIM14 Channel 1 is connected to GPIO.
3165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM14_RTC_CLK: TIM14 Channel 1 is connected to RTC input clock.
3166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                                RTC input clock can be LSE, LSI or HSE/div128.
3167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM14_HSE_DIV32: TIM14 Channel 1 is connected to HSE/32 clock.  
3168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM14_MCO: TIM14 Channel 1 is connected to MCO clock.  
3169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *                            MCO clock can be HSI14, SYSCLK, HSI, HSE or PLL/2.  
3170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
3173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  /* Check the parameters */
3175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_LIST11_PERIPH(TIMx));
3176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   assert_param(IS_TIM_REMAP(TIM_Remap));
3177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Set the Timer remapping configuration */
3179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->OR =  TIM_Remap;
3180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @}
3184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configure the TI1 as Input.
3188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 14, 15, 16 or 17 to select the TIM peripheral.
3189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 1 is selected to be connected to IC1.
3197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 1 is selected to be connected to IC2.
3198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 1 is selected to be connected to TRC.
3199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
  25              		.loc 1 3205 0
  26              		.cfi_startproc
  27 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  28              	.LCFI0:
  29              		.cfi_def_cfa_offset 20
  30              		.cfi_offset 4, -20
  31              		.cfi_offset 5, -16
  32              		.cfi_offset 6, -12
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35              	.LVL0:
3206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0;
3207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
3208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  36              		.loc 1 3208 0
  37 0002 058C     		ldrh	r5, [r0, #32]
  38 0004 0124     		mov	r4, #1
  39 0006 A543     		bic	r5, r4
  40 0008 0584     		strh	r5, [r0, #32]
3209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
  41              		.loc 1 3209 0
  42 000a 068B     		ldrh	r6, [r0, #24]
  43              	.LVL1:
3210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
3211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1
  44              		.loc 1 3212 0
  45 000c F327     		mov	r7, #243
3210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
  46              		.loc 1 3210 0
  47 000e 058C     		ldrh	r5, [r0, #32]
  48              	.LVL2:
  49              		.loc 1 3212 0
  50 0010 BE43     		bic	r6, r7
  51              	.LVL3:
3213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  52              		.loc 1 3213 0
  53 0012 3243     		orr	r2, r6
  54              	.LVL4:
3214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****  
3215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC1E Bit */
3216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  55              		.loc 1 3216 0
  56 0014 0A26     		mov	r6, #10
  57 0016 B543     		bic	r5, r6
  58              	.LVL5:
3213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  59              		.loc 1 3213 0
  60 0018 1F01     		lsl	r7, r3, #4
3217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  61              		.loc 1 3217 0
  62 001a 2C43     		orr	r4, r5
3213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  63              		.loc 1 3213 0
  64 001c 3A43     		orr	r2, r7
  65              	.LVL6:
  66              		.loc 1 3217 0
  67 001e 2143     		orr	r1, r4
  68              	.LVL7:
3218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
  69              		.loc 1 3219 0
  70 0020 0283     		strh	r2, [r0, #24]
  71              		@ sp needed for prologue
3220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
  72              		.loc 1 3220 0
  73 0022 0184     		strh	r1, [r0, #32]
3221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
  74              		.loc 1 3221 0
  75 0024 F0BD     		pop	{r4, r5, r6, r7, pc}
  76              		.cfi_endproc
  77              	.LFE122:
  79              		.section	.text.TI2_Config,"ax",%progbits
  80              		.align	1
  81              		.code	16
  82              		.thumb_func
  84              	TI2_Config:
  85              	.LFB123:
3222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configure the TI2 as Input.
3225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, or 15 to select the TIM peripheral.
3226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
3227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 2 is selected to be connected to IC2.
3234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 2 is selected to be connected to IC1.
3235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 2 is selected to be connected to TRC.
3236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
  86              		.loc 1 3242 0
  87              		.cfi_startproc
  88 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 20
  91              		.cfi_offset 4, -20
  92              		.cfi_offset 5, -16
  93              		.cfi_offset 6, -12
  94              		.cfi_offset 7, -8
  95              		.cfi_offset 14, -4
  96              	.LVL8:
3243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
3244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
3245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  97              		.loc 1 3245 0
  98 0002 058C     		ldrh	r5, [r0, #32]
  99 0004 1024     		mov	r4, #16
 100 0006 A543     		bic	r5, r4
 101 0008 0584     		strh	r5, [r0, #32]
3246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 102              		.loc 1 3246 0
 103 000a 078B     		ldrh	r7, [r0, #24]
 104              	.LVL9:
3247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
3248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 4);
3249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1
 105              		.loc 1 3250 0
 106 000c 084E     		ldr	r6, .L3
3247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 107              		.loc 1 3247 0
 108 000e 058C     		ldrh	r5, [r0, #32]
 109              	.LVL10:
 110              		.loc 1 3250 0
 111 0010 3740     		and	r7, r6
 112              	.LVL11:
3251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
3252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 113              		.loc 1 3252 0
 114 0012 1602     		lsl	r6, r2, #8
3251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 115              		.loc 1 3251 0
 116 0014 3A1C     		mov	r2, r7
 117              	.LVL12:
 118 0016 3243     		orr	r2, r6
3253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC2E Bit */
3254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 119              		.loc 1 3254 0
 120 0018 A026     		mov	r6, #160
 121 001a B543     		bic	r5, r6
 122              	.LVL13:
3251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 123              		.loc 1 3251 0
 124 001c 1F03     		lsl	r7, r3, #12
 125              	.LVL14:
3255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 126              		.loc 1 3255 0
 127 001e 2C43     		orr	r4, r5
3248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 4);
 128              		.loc 1 3248 0
 129 0020 0901     		lsl	r1, r1, #4
 130              	.LVL15:
3251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 131              		.loc 1 3251 0
 132 0022 92B2     		uxth	r2, r2
3252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 133              		.loc 1 3252 0
 134 0024 3A43     		orr	r2, r7
 135              	.LVL16:
 136              		.loc 1 3255 0
 137 0026 0C43     		orr	r4, r1
 138              	.LVL17:
3256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 139              		.loc 1 3257 0
 140 0028 0283     		strh	r2, [r0, #24]
 141              		@ sp needed for prologue
3258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 142              		.loc 1 3258 0
 143 002a 0484     		strh	r4, [r0, #32]
 144              	.LVL18:
3259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 145              		.loc 1 3259 0
 146 002c F0BD     		pop	{r4, r5, r6, r7, pc}
 147              	.L4:
 148 002e C046     		.align	2
 149              	.L3:
 150 0030 FF0C0000 		.word	3327
 151              		.cfi_endproc
 152              	.LFE123:
 154              		.section	.text.TIM_DeInit,"ax",%progbits
 155              		.align	1
 156              		.global	TIM_DeInit
 157              		.code	16
 158              		.thumb_func
 160              	TIM_DeInit:
 161              	.LFB33:
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 162              		.loc 1 195 0
 163              		.cfi_startproc
 164 0000 08B5     		push	{r3, lr}
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 3, -8
 168              		.cfi_offset 14, -4
 169              	.LVL19:
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIMx == TIM1)
 170              		.loc 1 199 0
 171 0002 314B     		ldr	r3, .L17
 172 0004 9842     		cmp	r0, r3
 173 0006 07D1     		bne	.L6
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 174              		.loc 1 201 0
 175 0008 8021     		mov	r1, #128
 176 000a 0801     		lsl	r0, r1, #4
 177              	.LVL20:
 178 000c 0121     		mov	r1, #1
 179 000e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 180              		.loc 1 202 0
 181 0012 8020     		mov	r0, #128
 182 0014 0001     		lsl	r0, r0, #4
 183 0016 52E0     		b	.L15
 184              	.LVL21:
 185              	.L6:
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM2)
 186              		.loc 1 204 0
 187 0018 8023     		mov	r3, #128
 188 001a DA05     		lsl	r2, r3, #23
 189 001c 9042     		cmp	r0, r2
 190 001e 05D1     		bne	.L8
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 191              		.loc 1 206 0
 192 0020 0120     		mov	r0, #1
 193              	.LVL22:
 194 0022 011C     		mov	r1, r0
 195 0024 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 196              		.loc 1 207 0
 197 0028 0120     		mov	r0, #1
 198 002a 24E0     		b	.L16
 199              	.LVL23:
 200              	.L8:
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM3)
 201              		.loc 1 209 0
 202 002c 2749     		ldr	r1, .L17+4
 203 002e 8842     		cmp	r0, r1
 204 0030 05D1     		bne	.L9
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 205              		.loc 1 211 0
 206 0032 0220     		mov	r0, #2
 207              	.LVL24:
 208 0034 0121     		mov	r1, #1
 209 0036 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 210              		.loc 1 212 0
 211 003a 0220     		mov	r0, #2
 212 003c 1BE0     		b	.L16
 213              	.LVL25:
 214              	.L9:
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM6)
 215              		.loc 1 214 0
 216 003e 244A     		ldr	r2, .L17+8
 217 0040 9042     		cmp	r0, r2
 218 0042 05D1     		bne	.L10
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 219              		.loc 1 216 0
 220 0044 1020     		mov	r0, #16
 221              	.LVL26:
 222 0046 0121     		mov	r1, #1
 223 0048 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 224              		.loc 1 217 0
 225 004c 1020     		mov	r0, #16
 226 004e 12E0     		b	.L16
 227              	.LVL27:
 228              	.L10:
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM7)
 229              		.loc 1 219 0
 230 0050 204B     		ldr	r3, .L17+12
 231 0052 9842     		cmp	r0, r3
 232 0054 05D1     		bne	.L11
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 233              		.loc 1 221 0
 234 0056 2020     		mov	r0, #32
 235              	.LVL28:
 236 0058 0121     		mov	r1, #1
 237 005a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 238              		.loc 1 222 0
 239 005e 2020     		mov	r0, #32
 240 0060 09E0     		b	.L16
 241              	.LVL29:
 242              	.L11:
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM14) 
 243              		.loc 1 224 0
 244 0062 1D49     		ldr	r1, .L17+16
 245 0064 8842     		cmp	r0, r1
 246 0066 0AD1     		bne	.L12
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 247              		.loc 1 226 0
 248 0068 8022     		mov	r2, #128
 249 006a 5000     		lsl	r0, r2, #1
 250              	.LVL30:
 251 006c 0121     		mov	r1, #1
 252 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 253              		.loc 1 227 0
 254 0072 8020     		mov	r0, #128
 255 0074 4000     		lsl	r0, r0, #1
 256              	.L16:
 257 0076 0021     		mov	r1, #0
 258 0078 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 259 007c 22E0     		b	.L5
 260              	.LVL31:
 261              	.L12:
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM15)
 262              		.loc 1 229 0
 263 007e 174B     		ldr	r3, .L17+20
 264 0080 9842     		cmp	r0, r3
 265 0082 07D1     		bne	.L13
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 266              		.loc 1 231 0
 267 0084 8020     		mov	r0, #128
 268              	.LVL32:
 269 0086 4002     		lsl	r0, r0, #9
 270 0088 0121     		mov	r1, #1
 271 008a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 272              		.loc 1 232 0
 273 008e 8021     		mov	r1, #128
 274 0090 4802     		lsl	r0, r1, #9
 275 0092 14E0     		b	.L15
 276              	.LVL33:
 277              	.L13:
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIMx == TIM16)
 278              		.loc 1 234 0
 279 0094 124A     		ldr	r2, .L17+24
 280 0096 9042     		cmp	r0, r2
 281 0098 07D1     		bne	.L14
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 282              		.loc 1 236 0
 283 009a 8021     		mov	r1, #128
 284 009c 8802     		lsl	r0, r1, #10
 285              	.LVL34:
 286 009e 0121     		mov	r1, #1
 287 00a0 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 288              		.loc 1 237 0
 289 00a4 8023     		mov	r3, #128
 290 00a6 9802     		lsl	r0, r3, #10
 291 00a8 09E0     		b	.L15
 292              	.LVL35:
 293              	.L14:
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     if (TIMx == TIM17)
 294              		.loc 1 241 0
 295 00aa 0E4A     		ldr	r2, .L17+28
 296 00ac 9042     		cmp	r0, r2
 297 00ae 09D1     		bne	.L5
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 298              		.loc 1 243 0
 299 00b0 8023     		mov	r3, #128
 300 00b2 D802     		lsl	r0, r3, #11
 301              	.LVL36:
 302 00b4 0121     		mov	r1, #1
 303 00b6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 304              		.loc 1 244 0
 305 00ba 8020     		mov	r0, #128
 306 00bc C002     		lsl	r0, r0, #11
 307              	.L15:
 308 00be 0021     		mov	r1, #0
 309 00c0 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 310              	.L5:
 311              		@ sp needed for prologue
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 312              		.loc 1 248 0
 313 00c4 08BD     		pop	{r3, pc}
 314              	.L18:
 315 00c6 C046     		.align	2
 316              	.L17:
 317 00c8 002C0140 		.word	1073818624
 318 00cc 00040040 		.word	1073742848
 319 00d0 00100040 		.word	1073745920
 320 00d4 00140040 		.word	1073746944
 321 00d8 00200040 		.word	1073750016
 322 00dc 00400140 		.word	1073823744
 323 00e0 00440140 		.word	1073824768
 324 00e4 00480140 		.word	1073825792
 325              		.cfi_endproc
 326              	.LFE33:
 328              		.section	.text.TIM_TimeBaseInit,"ax",%progbits
 329              		.align	1
 330              		.global	TIM_TimeBaseInit
 331              		.code	16
 332              		.thumb_func
 334              	TIM_TimeBaseInit:
 335              	.LFB34:
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 336              		.loc 1 264 0
 337              		.cfi_startproc
 338 0000 30B5     		push	{r4, r5, lr}
 339              	.LCFI3:
 340              		.cfi_def_cfa_offset 12
 341              		.cfi_offset 4, -12
 342              		.cfi_offset 5, -8
 343              		.cfi_offset 14, -4
 344              	.LVL37:
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 345              		.loc 1 274 0
 346 0002 194A     		ldr	r2, .L26
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 = TIMx->CR1;  
 347              		.loc 1 272 0
 348 0004 0388     		ldrh	r3, [r0]
 349              	.LVL38:
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 350              		.loc 1 274 0
 351 0006 8218     		add	r2, r0, r2
 352 0008 5442     		neg	r4, r2
 353 000a 6241     		adc	r2, r2, r4
 354 000c C024     		mov	r4, #192
 355 000e 2506     		lsl	r5, r4, #24
 356 0010 4419     		add	r4, r0, r5
 357 0012 002C     		cmp	r4, #0
 358 0014 04D0     		beq	.L20
 359 0016 002A     		cmp	r2, #0
 360 0018 02D1     		bne	.L20
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 361              		.loc 1 274 0 is_stmt 0 discriminator 1
 362 001a 144D     		ldr	r5, .L26+4
 363 001c A842     		cmp	r0, r5
 364 001e 03D1     		bne	.L21
 365              	.L20:
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 366              		.loc 1 277 0 is_stmt 1
 367 0020 7025     		mov	r5, #112
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 368              		.loc 1 278 0
 369 0022 4C88     		ldrh	r4, [r1, #2]
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 370              		.loc 1 277 0
 371 0024 AB43     		bic	r3, r5
 372              	.LVL39:
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 373              		.loc 1 278 0
 374 0026 2343     		orr	r3, r4
 375              	.LVL40:
 376              	.L21:
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx != TIM6)
 377              		.loc 1 281 0
 378 0028 114C     		ldr	r4, .L26+8
 379 002a A042     		cmp	r0, r4
 380 002c 03D0     		beq	.L22
 381              	.LVL41:
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 382              		.loc 1 285 0
 383 002e 114D     		ldr	r5, .L26+12
 384 0030 0C89     		ldrh	r4, [r1, #8]
 385 0032 2B40     		and	r3, r5
 386              	.LVL42:
 387 0034 2343     		orr	r3, r4
 388              	.LVL43:
 389              	.L22:
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 = tmpcr1;
 390              		.loc 1 288 0
 391 0036 0380     		strh	r3, [r0]
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 392              		.loc 1 291 0
 393 0038 4B68     		ldr	r3, [r1, #4]
 394              	.LVL44:
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 395              		.loc 1 296 0
 396 003a 0F4C     		ldr	r4, .L26+16
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 397              		.loc 1 291 0
 398 003c C362     		str	r3, [r0, #44]
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 399              		.loc 1 294 0
 400 003e 0D88     		ldrh	r5, [r1]
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 401              		.loc 1 296 0
 402 0040 0319     		add	r3, r0, r4
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 403              		.loc 1 294 0
 404 0042 0585     		strh	r5, [r0, #40]
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 405              		.loc 1 296 0
 406 0044 002B     		cmp	r3, #0
 407 0046 09D0     		beq	.L23
 408 0048 002A     		cmp	r2, #0
 409 004a 07D1     		bne	.L23
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 410              		.loc 1 296 0 is_stmt 0 discriminator 1
 411 004c 0B4C     		ldr	r4, .L26+20
 412 004e 0219     		add	r2, r0, r4
 413 0050 002A     		cmp	r2, #0
 414 0052 03D0     		beq	.L23
 415 0054 0A4B     		ldr	r3, .L26+24
 416 0056 C518     		add	r5, r0, r3
 417 0058 002D     		cmp	r5, #0
 418 005a 01D1     		bne	.L24
 419              	.L23:
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 420              		.loc 1 299 0 is_stmt 1
 421 005c 897A     		ldrb	r1, [r1, #10]
 422              	.LVL45:
 423 005e 0186     		strh	r1, [r0, #48]
 424              	.L24:
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 425              		.loc 1 304 0
 426 0060 0122     		mov	r2, #1
 427 0062 8282     		strh	r2, [r0, #20]
 428              		@ sp needed for prologue
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 429              		.loc 1 305 0
 430 0064 30BD     		pop	{r4, r5, pc}
 431              	.L27:
 432 0066 C046     		.align	2
 433              	.L26:
 434 0068 00D4FEBF 		.word	-1073818624
 435 006c 00040040 		.word	1073742848
 436 0070 00100040 		.word	1073745920
 437 0074 FFFCFFFF 		.word	-769
 438 0078 00C0FEBF 		.word	-1073823744
 439 007c 00B8FEBF 		.word	-1073825792
 440 0080 00BCFEBF 		.word	-1073824768
 441              		.cfi_endproc
 442              	.LFE34:
 444              		.section	.text.TIM_TimeBaseStructInit,"ax",%progbits
 445              		.align	1
 446              		.global	TIM_TimeBaseStructInit
 447              		.code	16
 448              		.thumb_func
 450              	TIM_TimeBaseStructInit:
 451              	.LFB35:
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 452              		.loc 1 314 0
 453              		.cfi_startproc
 454              	.LVL46:
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 455              		.loc 1 316 0
 456 0000 0122     		mov	r2, #1
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 457              		.loc 1 317 0
 458 0002 0023     		mov	r3, #0
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 459              		.loc 1 316 0
 460 0004 5142     		neg	r1, r2
 461 0006 4160     		str	r1, [r0, #4]
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 462              		.loc 1 317 0
 463 0008 0380     		strh	r3, [r0]
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 464              		.loc 1 318 0
 465 000a 0381     		strh	r3, [r0, #8]
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 466              		.loc 1 319 0
 467 000c 4380     		strh	r3, [r0, #2]
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 468              		.loc 1 320 0
 469 000e 8372     		strb	r3, [r0, #10]
 470              		@ sp needed for prologue
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 471              		.loc 1 321 0
 472 0010 7047     		bx	lr
 473              		.cfi_endproc
 474              	.LFE35:
 476              		.section	.text.TIM_PrescalerConfig,"ax",%progbits
 477              		.align	1
 478              		.global	TIM_PrescalerConfig
 479              		.code	16
 480              		.thumb_func
 482              	TIM_PrescalerConfig:
 483              	.LFB36:
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 484              		.loc 1 337 0
 485              		.cfi_startproc
 486              	.LVL47:
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->PSC = Prescaler;
 487              		.loc 1 343 0
 488 0000 0185     		strh	r1, [r0, #40]
 489              		@ sp needed for prologue
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode;
 490              		.loc 1 345 0
 491 0002 8282     		strh	r2, [r0, #20]
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 492              		.loc 1 346 0
 493 0004 7047     		bx	lr
 494              		.cfi_endproc
 495              	.LFE36:
 497              		.section	.text.TIM_CounterModeConfig,"ax",%progbits
 498              		.align	1
 499              		.global	TIM_CounterModeConfig
 500              		.code	16
 501              		.thumb_func
 503              	TIM_CounterModeConfig:
 504              	.LFB37:
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 505              		.loc 1 362 0
 506              		.cfi_startproc
 507              	.LVL48:
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 = TIMx->CR1;
 508              		.loc 1 369 0
 509 0000 0388     		ldrh	r3, [r0]
 510              	.LVL49:
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 511              		.loc 1 371 0
 512 0002 7022     		mov	r2, #112
 513 0004 9343     		bic	r3, r2
 514              	.LVL50:
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr1 |= TIM_CounterMode;
 515              		.loc 1 373 0
 516 0006 1943     		orr	r1, r3
 517              	.LVL51:
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 = tmpcr1;
 518              		.loc 1 375 0
 519 0008 0180     		strh	r1, [r0]
 520              		@ sp needed for prologue
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 521              		.loc 1 376 0
 522 000a 7047     		bx	lr
 523              		.cfi_endproc
 524              	.LFE37:
 526              		.section	.text.TIM_SetCounter,"ax",%progbits
 527              		.align	1
 528              		.global	TIM_SetCounter
 529              		.code	16
 530              		.thumb_func
 532              	TIM_SetCounter:
 533              	.LFB38:
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 534              		.loc 1 389 0
 535              		.cfi_startproc
 536              	.LVL52:
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CNT = Counter;
 537              		.loc 1 394 0
 538 0000 4162     		str	r1, [r0, #36]
 539              		@ sp needed for prologue
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 540              		.loc 1 395 0
 541 0002 7047     		bx	lr
 542              		.cfi_endproc
 543              	.LFE38:
 545              		.section	.text.TIM_SetAutoreload,"ax",%progbits
 546              		.align	1
 547              		.global	TIM_SetAutoreload
 548              		.code	16
 549              		.thumb_func
 551              	TIM_SetAutoreload:
 552              	.LFB39:
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 553              		.loc 1 407 0
 554              		.cfi_startproc
 555              	.LVL53:
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->ARR = Autoreload;
 556              		.loc 1 412 0
 557 0000 C162     		str	r1, [r0, #44]
 558              		@ sp needed for prologue
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 559              		.loc 1 413 0
 560 0002 7047     		bx	lr
 561              		.cfi_endproc
 562              	.LFE39:
 564              		.section	.text.TIM_GetCounter,"ax",%progbits
 565              		.align	1
 566              		.global	TIM_GetCounter
 567              		.code	16
 568              		.thumb_func
 570              	TIM_GetCounter:
 571              	.LFB40:
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 572              		.loc 1 425 0
 573              		.cfi_startproc
 574              	.LVL54:
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CNT;
 575              		.loc 1 430 0
 576 0000 406A     		ldr	r0, [r0, #36]
 577              	.LVL55:
 578              		@ sp needed for prologue
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 579              		.loc 1 431 0
 580 0002 7047     		bx	lr
 581              		.cfi_endproc
 582              	.LFE40:
 584              		.section	.text.TIM_GetPrescaler,"ax",%progbits
 585              		.align	1
 586              		.global	TIM_GetPrescaler
 587              		.code	16
 588              		.thumb_func
 590              	TIM_GetPrescaler:
 591              	.LFB41:
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 592              		.loc 1 443 0
 593              		.cfi_startproc
 594              	.LVL56:
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->PSC;
 595              		.loc 1 448 0
 596 0000 008D     		ldrh	r0, [r0, #40]
 597              	.LVL57:
 598              		@ sp needed for prologue
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 599              		.loc 1 449 0
 600 0002 7047     		bx	lr
 601              		.cfi_endproc
 602              	.LFE41:
 604              		.section	.text.TIM_UpdateDisableConfig,"ax",%progbits
 605              		.align	1
 606              		.global	TIM_UpdateDisableConfig
 607              		.code	16
 608              		.thumb_func
 610              	TIM_UpdateDisableConfig:
 611              	.LFB42:
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 612              		.loc 1 463 0
 613              		.cfi_startproc
 614 0000 00B5     		push	{lr}
 615              	.LCFI4:
 616              		.cfi_def_cfa_offset 4
 617              		.cfi_offset 14, -4
 618              	.LVL58:
 619 0002 0223     		mov	r3, #2
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 620              		.loc 1 471 0
 621 0004 0288     		ldrh	r2, [r0]
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 622              		.loc 1 468 0
 623 0006 0029     		cmp	r1, #0
 624 0008 01D0     		beq	.L36
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 625              		.loc 1 471 0
 626 000a 1343     		orr	r3, r2
 627 000c 01E0     		b	.L38
 628              	.L36:
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 629              		.loc 1 476 0
 630 000e 9A43     		bic	r2, r3
 631 0010 131C     		mov	r3, r2
 632              	.L38:
 633 0012 0380     		strh	r3, [r0]
 634              		@ sp needed for prologue
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 635              		.loc 1 478 0
 636 0014 00BD     		pop	{pc}
 637              		.cfi_endproc
 638              	.LFE42:
 640              		.section	.text.TIM_UpdateRequestConfig,"ax",%progbits
 641              		.align	1
 642              		.global	TIM_UpdateRequestConfig
 643              		.code	16
 644              		.thumb_func
 646              	TIM_UpdateRequestConfig:
 647              	.LFB43:
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 648              		.loc 1 496 0
 649              		.cfi_startproc
 650 0000 00B5     		push	{lr}
 651              	.LCFI5:
 652              		.cfi_def_cfa_offset 4
 653              		.cfi_offset 14, -4
 654              	.LVL59:
 655 0002 0423     		mov	r3, #4
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 656              		.loc 1 504 0
 657 0004 0288     		ldrh	r2, [r0]
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_UpdateSource != TIM_UpdateSource_Global)
 658              		.loc 1 501 0
 659 0006 0029     		cmp	r1, #0
 660 0008 01D0     		beq	.L40
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 661              		.loc 1 504 0
 662 000a 1343     		orr	r3, r2
 663 000c 01E0     		b	.L42
 664              	.L40:
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 665              		.loc 1 509 0
 666 000e 9A43     		bic	r2, r3
 667 0010 131C     		mov	r3, r2
 668              	.L42:
 669 0012 0380     		strh	r3, [r0]
 670              		@ sp needed for prologue
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 671              		.loc 1 511 0
 672 0014 00BD     		pop	{pc}
 673              		.cfi_endproc
 674              	.LFE43:
 676              		.section	.text.TIM_ARRPreloadConfig,"ax",%progbits
 677              		.align	1
 678              		.global	TIM_ARRPreloadConfig
 679              		.code	16
 680              		.thumb_func
 682              	TIM_ARRPreloadConfig:
 683              	.LFB44:
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 684              		.loc 1 525 0
 685              		.cfi_startproc
 686 0000 00B5     		push	{lr}
 687              	.LCFI6:
 688              		.cfi_def_cfa_offset 4
 689              		.cfi_offset 14, -4
 690              	.LVL60:
 691 0002 8023     		mov	r3, #128
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 692              		.loc 1 533 0
 693 0004 0288     		ldrh	r2, [r0]
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 694              		.loc 1 530 0
 695 0006 0029     		cmp	r1, #0
 696 0008 01D0     		beq	.L44
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 697              		.loc 1 533 0
 698 000a 1343     		orr	r3, r2
 699 000c 01E0     		b	.L46
 700              	.L44:
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 701              		.loc 1 538 0
 702 000e 9A43     		bic	r2, r3
 703 0010 131C     		mov	r3, r2
 704              	.L46:
 705 0012 0380     		strh	r3, [r0]
 706              		@ sp needed for prologue
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 707              		.loc 1 540 0
 708 0014 00BD     		pop	{pc}
 709              		.cfi_endproc
 710              	.LFE44:
 712              		.section	.text.TIM_SelectOnePulseMode,"ax",%progbits
 713              		.align	1
 714              		.global	TIM_SelectOnePulseMode
 715              		.code	16
 716              		.thumb_func
 718              	TIM_SelectOnePulseMode:
 719              	.LFB45:
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 720              		.loc 1 556 0
 721              		.cfi_startproc
 722              	.LVL61:
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 723              		.loc 1 562 0
 724 0000 0388     		ldrh	r3, [r0]
 725 0002 0822     		mov	r2, #8
 726 0004 9343     		bic	r3, r2
 727 0006 0380     		strh	r3, [r0]
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 |= TIM_OPMode;
 728              		.loc 1 564 0
 729 0008 0388     		ldrh	r3, [r0]
 730              		@ sp needed for prologue
 731 000a 1943     		orr	r1, r3
 732              	.LVL62:
 733 000c 0180     		strh	r1, [r0]
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 734              		.loc 1 565 0
 735 000e 7047     		bx	lr
 736              		.cfi_endproc
 737              	.LFE45:
 739              		.section	.text.TIM_SetClockDivision,"ax",%progbits
 740              		.align	1
 741              		.global	TIM_SetClockDivision
 742              		.code	16
 743              		.thumb_func
 745              	TIM_SetClockDivision:
 746              	.LFB46:
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 747              		.loc 1 579 0
 748              		.cfi_startproc
 749              	.LVL63:
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 750              		.loc 1 585 0
 751 0000 0288     		ldrh	r2, [r0]
 752 0002 034B     		ldr	r3, .L49
 753              		@ sp needed for prologue
 754 0004 1340     		and	r3, r2
 755 0006 0380     		strh	r3, [r0]
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR1 |= TIM_CKD;
 756              		.loc 1 587 0
 757 0008 0388     		ldrh	r3, [r0]
 758 000a 1943     		orr	r1, r3
 759              	.LVL64:
 760 000c 0180     		strh	r1, [r0]
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 761              		.loc 1 588 0
 762 000e 7047     		bx	lr
 763              	.L50:
 764              		.align	2
 765              	.L49:
 766 0010 FFFCFFFF 		.word	-769
 767              		.cfi_endproc
 768              	.LFE46:
 770              		.section	.text.TIM_Cmd,"ax",%progbits
 771              		.align	1
 772              		.global	TIM_Cmd
 773              		.code	16
 774              		.thumb_func
 776              	TIM_Cmd:
 777              	.LFB47:
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 778              		.loc 1 602 0
 779              		.cfi_startproc
 780 0000 00B5     		push	{lr}
 781              	.LCFI7:
 782              		.cfi_def_cfa_offset 4
 783              		.cfi_offset 14, -4
 784              	.LVL65:
 785 0002 0123     		mov	r3, #1
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 786              		.loc 1 610 0
 787 0004 0288     		ldrh	r2, [r0]
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 788              		.loc 1 607 0
 789 0006 0029     		cmp	r1, #0
 790 0008 01D0     		beq	.L52
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 791              		.loc 1 610 0
 792 000a 1343     		orr	r3, r2
 793 000c 01E0     		b	.L54
 794              	.L52:
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 795              		.loc 1 615 0
 796 000e 9A43     		bic	r2, r3
 797 0010 131C     		mov	r3, r2
 798              	.L54:
 799 0012 0380     		strh	r3, [r0]
 800              		@ sp needed for prologue
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 801              		.loc 1 617 0
 802 0014 00BD     		pop	{pc}
 803              		.cfi_endproc
 804              	.LFE47:
 806              		.section	.text.TIM_BDTRConfig,"ax",%progbits
 807              		.align	1
 808              		.global	TIM_BDTRConfig
 809              		.code	16
 810              		.thumb_func
 812              	TIM_BDTRConfig:
 813              	.LFB48:
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 814              		.loc 1 660 0
 815              		.cfi_startproc
 816              	.LVL66:
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 817              		.loc 1 671 0
 818 0000 4A88     		ldrh	r2, [r1, #2]
 819 0002 0B88     		ldrh	r3, [r1]
 820 0004 0630     		add	r0, r0, #6
 821              	.LVL67:
 822 0006 1343     		orr	r3, r2
 823 0008 8A88     		ldrh	r2, [r1, #4]
 824              		@ sp needed for prologue
 825 000a 1343     		orr	r3, r2
 826 000c CA88     		ldrh	r2, [r1, #6]
 827 000e 1343     		orr	r3, r2
 828 0010 0A89     		ldrh	r2, [r1, #8]
 829 0012 1343     		orr	r3, r2
 830 0014 4A89     		ldrh	r2, [r1, #10]
 831 0016 1343     		orr	r3, r2
 832 0018 8A89     		ldrh	r2, [r1, #12]
 833 001a 1343     		orr	r3, r2
 834 001c C387     		strh	r3, [r0, #62]
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 835              		.loc 1 675 0
 836 001e 7047     		bx	lr
 837              		.cfi_endproc
 838              	.LFE48:
 840              		.section	.text.TIM_BDTRStructInit,"ax",%progbits
 841              		.align	1
 842              		.global	TIM_BDTRStructInit
 843              		.code	16
 844              		.thumb_func
 846              	TIM_BDTRStructInit:
 847              	.LFB49:
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 848              		.loc 1 684 0
 849              		.cfi_startproc
 850              	.LVL68:
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 851              		.loc 1 686 0
 852 0000 0023     		mov	r3, #0
 853 0002 0380     		strh	r3, [r0]
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 854              		.loc 1 687 0
 855 0004 4380     		strh	r3, [r0, #2]
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 856              		.loc 1 688 0
 857 0006 8380     		strh	r3, [r0, #4]
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 858              		.loc 1 689 0
 859 0008 C380     		strh	r3, [r0, #6]
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 860              		.loc 1 690 0
 861 000a 0381     		strh	r3, [r0, #8]
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 862              		.loc 1 691 0
 863 000c 4381     		strh	r3, [r0, #10]
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 864              		.loc 1 692 0
 865 000e 8381     		strh	r3, [r0, #12]
 866              		@ sp needed for prologue
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 867              		.loc 1 693 0
 868 0010 7047     		bx	lr
 869              		.cfi_endproc
 870              	.LFE49:
 872              		.section	.text.TIM_CtrlPWMOutputs,"ax",%progbits
 873              		.align	1
 874              		.global	TIM_CtrlPWMOutputs
 875              		.code	16
 876              		.thumb_func
 878              	TIM_CtrlPWMOutputs:
 879              	.LFB50:
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 880              		.loc 1 703 0
 881              		.cfi_startproc
 882 0000 00B5     		push	{lr}
 883              	.LCFI8:
 884              		.cfi_def_cfa_offset 4
 885              		.cfi_offset 14, -4
 886              	.LVL69:
 887 0002 0630     		add	r0, r0, #6
 888              	.LVL70:
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 889              		.loc 1 707 0
 890 0004 0029     		cmp	r1, #0
 891 0006 04D0     		beq	.L58
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->BDTR |= TIM_BDTR_MOE;
 892              		.loc 1 710 0
 893 0008 C28F     		ldrh	r2, [r0, #62]
 894 000a 8023     		mov	r3, #128
 895 000c 1B02     		lsl	r3, r3, #8
 896 000e 1343     		orr	r3, r2
 897 0010 02E0     		b	.L60
 898              	.L58:
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 899              		.loc 1 715 0
 900 0012 C28F     		ldrh	r2, [r0, #62]
 901 0014 5104     		lsl	r1, r2, #17
 902              	.LVL71:
 903 0016 4B0C     		lsr	r3, r1, #17
 904              	.L60:
 905 0018 C387     		strh	r3, [r0, #62]
 906              		@ sp needed for prologue
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 907              		.loc 1 717 0
 908 001a 00BD     		pop	{pc}
 909              		.cfi_endproc
 910              	.LFE50:
 912              		.section	.text.TIM_OC1Init,"ax",%progbits
 913              		.align	1
 914              		.global	TIM_OC1Init
 915              		.code	16
 916              		.thumb_func
 918              	TIM_OC1Init:
 919              	.LFB51:
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 920              		.loc 1 776 0
 921              		.cfi_startproc
 922 0000 70B5     		push	{r4, r5, r6, lr}
 923              	.LCFI9:
 924              		.cfi_def_cfa_offset 16
 925              		.cfi_offset 4, -16
 926              		.cfi_offset 5, -12
 927              		.cfi_offset 6, -8
 928              		.cfi_offset 14, -4
 929              	.LVL72:
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 930              		.loc 1 785 0
 931 0002 048C     		ldrh	r4, [r0, #32]
 932 0004 0122     		mov	r2, #1
 933 0006 9443     		bic	r4, r2
 934 0008 0484     		strh	r4, [r0, #32]
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 935              		.loc 1 787 0
 936 000a 058C     		ldrh	r5, [r0, #32]
 937              	.LVL73:
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 938              		.loc 1 789 0
 939 000c 8288     		ldrh	r2, [r0, #4]
 940              	.LVL74:
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 941              		.loc 1 792 0
 942 000e 048B     		ldrh	r4, [r0, #24]
 943              	.LVL75:
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 944              		.loc 1 796 0
 945 0010 7323     		mov	r3, #115
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 946              		.loc 1 799 0
 947 0012 0E88     		ldrh	r6, [r1]
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 948              		.loc 1 796 0
 949 0014 9C43     		bic	r4, r3
 950              	.LVL76:
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 951              		.loc 1 802 0
 952 0016 0223     		mov	r3, #2
 953 0018 9D43     		bic	r5, r3
 954              	.LVL77:
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 955              		.loc 1 799 0
 956 001a 3443     		orr	r4, r6
 957              	.LVL78:
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 958              		.loc 1 804 0
 959 001c 8B89     		ldrh	r3, [r1, #12]
 960 001e 4E88     		ldrh	r6, [r1, #2]
 961 0020 3343     		orr	r3, r6
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 962              		.loc 1 809 0
 963 0022 124E     		ldr	r6, .L65
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 964              		.loc 1 807 0
 965 0024 2B43     		orr	r3, r5
 966              	.LVL79:
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 967              		.loc 1 809 0
 968 0026 8519     		add	r5, r0, r6
 969 0028 002D     		cmp	r5, #0
 970 002a 0BD0     		beq	.L62
 971 002c 104E     		ldr	r6, .L65+4
 972 002e 8519     		add	r5, r0, r6
 973 0030 002D     		cmp	r5, #0
 974 0032 07D0     		beq	.L62
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 975              		.loc 1 809 0 is_stmt 0 discriminator 1
 976 0034 0F4E     		ldr	r6, .L65+8
 977 0036 8519     		add	r5, r0, r6
 978 0038 002D     		cmp	r5, #0
 979 003a 03D0     		beq	.L62
 980 003c 0E4E     		ldr	r6, .L65+12
 981 003e 8519     		add	r5, r0, r6
 982 0040 002D     		cmp	r5, #0
 983 0042 0DD1     		bne	.L63
 984              	.L62:
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 985              		.loc 1 817 0 is_stmt 1
 986 0044 0825     		mov	r5, #8
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 987              		.loc 1 819 0
 988 0046 CE89     		ldrh	r6, [r1, #14]
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 989              		.loc 1 817 0
 990 0048 AB43     		bic	r3, r5
 991              	.LVL80:
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 992              		.loc 1 819 0
 993 004a 3343     		orr	r3, r6
 994              	.LVL81:
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 995              		.loc 1 822 0
 996 004c 0425     		mov	r5, #4
 997 004e AB43     		bic	r3, r5
 998              	.LVL82:
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 999              		.loc 1 824 0
 1000 0050 8E88     		ldrh	r6, [r1, #4]
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 1001              		.loc 1 828 0
 1002 0052 0A4D     		ldr	r5, .L65+16
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 1003              		.loc 1 824 0
 1004 0054 3343     		orr	r3, r6
 1005              	.LVL83:
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 1006              		.loc 1 828 0
 1007 0056 2A40     		and	r2, r5
 1008              	.LVL84:
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 1009              		.loc 1 831 0
 1010 0058 4E8A     		ldrh	r6, [r1, #18]
 1011 005a 0D8A     		ldrh	r5, [r1, #16]
 1012 005c 3543     		orr	r5, r6
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 1013              		.loc 1 833 0
 1014 005e 2A43     		orr	r2, r5
 1015              	.LVL85:
 1016              	.L63:
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 1017              		.loc 1 842 0
 1018 0060 8968     		ldr	r1, [r1, #8]
 1019              	.LVL86:
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1020              		.loc 1 836 0
 1021 0062 8280     		strh	r2, [r0, #4]
 1022              		@ sp needed for prologue
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 1023              		.loc 1 839 0
 1024 0064 0483     		strh	r4, [r0, #24]
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 1025              		.loc 1 842 0
 1026 0066 4163     		str	r1, [r0, #52]
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 1027              		.loc 1 845 0
 1028 0068 0384     		strh	r3, [r0, #32]
 1029              	.LVL87:
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1030              		.loc 1 846 0
 1031 006a 70BD     		pop	{r4, r5, r6, pc}
 1032              	.L66:
 1033              		.align	2
 1034              	.L65:
 1035 006c 00C0FEBF 		.word	-1073823744
 1036 0070 00D4FEBF 		.word	-1073818624
 1037 0074 00B8FEBF 		.word	-1073825792
 1038 0078 00BCFEBF 		.word	-1073824768
 1039 007c FFFCFFFF 		.word	-769
 1040              		.cfi_endproc
 1041              	.LFE51:
 1043              		.section	.text.TIM_OC2Init,"ax",%progbits
 1044              		.align	1
 1045              		.global	TIM_OC2Init
 1046              		.code	16
 1047              		.thumb_func
 1049              	TIM_OC2Init:
 1050              	.LFB52:
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1051              		.loc 1 859 0
 1052              		.cfi_startproc
 1053 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1054              	.LCFI10:
 1055              		.cfi_def_cfa_offset 20
 1056              		.cfi_offset 4, -20
 1057              		.cfi_offset 5, -16
 1058              		.cfi_offset 6, -12
 1059              		.cfi_offset 7, -8
 1060              		.cfi_offset 14, -4
 1061              	.LVL88:
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 1062              		.loc 1 868 0
 1063 0002 038C     		ldrh	r3, [r0, #32]
 1064 0004 1025     		mov	r5, #16
 1065 0006 AB43     		bic	r3, r5
 1066 0008 0384     		strh	r3, [r0, #32]
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 1067              		.loc 1 883 0
 1068 000a 0E88     		ldrh	r6, [r1]
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 1069              		.loc 1 871 0
 1070 000c 028C     		ldrh	r2, [r0, #32]
 1071              	.LVL89:
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 1072              		.loc 1 880 0
 1073 000e 1D4F     		ldr	r7, .L71
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 1074              		.loc 1 873 0
 1075 0010 8388     		ldrh	r3, [r0, #4]
 1076              	.LVL90:
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 1077              		.loc 1 876 0
 1078 0012 058B     		ldrh	r5, [r0, #24]
 1079              	.LVL91:
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 1080              		.loc 1 883 0
 1081 0014 3402     		lsl	r4, r6, #8
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 1082              		.loc 1 888 0
 1083 0016 8E89     		ldrh	r6, [r1, #12]
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 1084              		.loc 1 880 0
 1085 0018 3D40     		and	r5, r7
 1086              	.LVL92:
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 1087              		.loc 1 886 0
 1088 001a 2027     		mov	r7, #32
 1089 001c BA43     		bic	r2, r7
 1090              	.LVL93:
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 1091              		.loc 1 883 0
 1092 001e 2543     		orr	r5, r4
 1093              	.LVL94:
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 1094              		.loc 1 891 0
 1095 0020 4F88     		ldrh	r7, [r1, #2]
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 1096              		.loc 1 888 0
 1097 0022 3401     		lsl	r4, r6, #4
 1098 0024 2243     		orr	r2, r4
 1099              	.LVL95:
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 1100              		.loc 1 893 0
 1101 0026 184C     		ldr	r4, .L71+4
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 1102              		.loc 1 891 0
 1103 0028 3E01     		lsl	r6, r7, #4
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 1104              		.loc 1 893 0
 1105 002a 184F     		ldr	r7, .L71+8
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 1106              		.loc 1 888 0
 1107 002c 92B2     		uxth	r2, r2
 1108              	.LVL96:
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 1109              		.loc 1 893 0
 1110 002e 0419     		add	r4, r0, r4
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 1111              		.loc 1 891 0
 1112 0030 3243     		orr	r2, r6
 1113              	.LVL97:
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 1114              		.loc 1 893 0
 1115 0032 6642     		neg	r6, r4
 1116 0034 7441     		adc	r4, r4, r6
 1117 0036 C619     		add	r6, r0, r7
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 1118              		.loc 1 891 0
 1119 0038 92B2     		uxth	r2, r2
 1120              	.LVL98:
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM15))
 1121              		.loc 1 893 0
 1122 003a 002E     		cmp	r6, #0
 1123 003c 01D0     		beq	.L70
 1124 003e 002C     		cmp	r4, #0
 1125 0040 19D0     		beq	.L68
 1126              	.L70:
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 1127              		.loc 1 899 0
 1128 0042 134E     		ldr	r6, .L71+12
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 1129              		.loc 1 902 0
 1130 0044 0F8A     		ldrh	r7, [r1, #16]
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 1131              		.loc 1 899 0
 1132 0046 3340     		and	r3, r6
 1133              	.LVL99:
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 1134              		.loc 1 902 0
 1135 0048 BE00     		lsl	r6, r7, #2
 1136 004a 3343     		orr	r3, r6
 1137              	.LVL100:
 1138 004c 9BB2     		uxth	r3, r3
 1139              	.LVL101:
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     if (TIMx == TIM1)
 1140              		.loc 1 904 0
 1141 004e 002C     		cmp	r4, #0
 1142 0050 11D0     		beq	.L68
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 1143              		.loc 1 914 0
 1144 0052 CF89     		ldrh	r7, [r1, #14]
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 1145              		.loc 1 912 0
 1146 0054 8026     		mov	r6, #128
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 1147              		.loc 1 914 0
 1148 0056 3C01     		lsl	r4, r7, #4
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 1149              		.loc 1 912 0
 1150 0058 B243     		bic	r2, r6
 1151              	.LVL102:
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 1152              		.loc 1 914 0
 1153 005a 2243     		orr	r2, r4
 1154              	.LVL103:
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 1155              		.loc 1 919 0
 1156 005c 8F88     		ldrh	r7, [r1, #4]
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 1157              		.loc 1 917 0
 1158 005e 4026     		mov	r6, #64
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 1159              		.loc 1 914 0
 1160 0060 92B2     		uxth	r2, r2
 1161              	.LVL104:
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 1162              		.loc 1 919 0
 1163 0062 3C01     		lsl	r4, r7, #4
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 1164              		.loc 1 917 0
 1165 0064 B243     		bic	r2, r6
 1166              	.LVL105:
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 1167              		.loc 1 925 0
 1168 0066 4F8A     		ldrh	r7, [r1, #18]
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 1169              		.loc 1 922 0
 1170 0068 0A4E     		ldr	r6, .L71+16
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 1171              		.loc 1 919 0
 1172 006a 2243     		orr	r2, r4
 1173              	.LVL106:
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 1174              		.loc 1 922 0
 1175 006c 3340     		and	r3, r6
 1176              	.LVL107:
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 1177              		.loc 1 925 0
 1178 006e BC00     		lsl	r4, r7, #2
 1179 0070 2343     		orr	r3, r4
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 1180              		.loc 1 919 0
 1181 0072 92B2     		uxth	r2, r2
 1182              	.LVL108:
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****       tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 1183              		.loc 1 925 0
 1184 0074 9BB2     		uxth	r3, r3
 1185              	.LVL109:
 1186              	.L68:
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 1187              		.loc 1 935 0
 1188 0076 8968     		ldr	r1, [r1, #8]
 1189              	.LVL110:
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1190              		.loc 1 929 0
 1191 0078 8380     		strh	r3, [r0, #4]
 1192              		@ sp needed for prologue
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 1193              		.loc 1 932 0
 1194 007a 0583     		strh	r5, [r0, #24]
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 1195              		.loc 1 935 0
 1196 007c 8163     		str	r1, [r0, #56]
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 1197              		.loc 1 938 0
 1198 007e 0284     		strh	r2, [r0, #32]
 1199              	.LVL111:
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1200              		.loc 1 939 0
 1201 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 1202              	.L72:
 1203 0082 C046     		.align	2
 1204              	.L71:
 1205 0084 FF8CFFFF 		.word	-29441
 1206 0088 00D4FEBF 		.word	-1073818624
 1207 008c 00C0FEBF 		.word	-1073823744
 1208 0090 FFFBFFFF 		.word	-1025
 1209 0094 FFF7FFFF 		.word	-2049
 1210              		.cfi_endproc
 1211              	.LFE52:
 1213              		.section	.text.TIM_OC3Init,"ax",%progbits
 1214              		.align	1
 1215              		.global	TIM_OC3Init
 1216              		.code	16
 1217              		.thumb_func
 1219              	TIM_OC3Init:
 1220              	.LFB53:
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1221              		.loc 1 952 0
 1222              		.cfi_startproc
 1223 0000 30B5     		push	{r4, r5, lr}
 1224              	.LCFI11:
 1225              		.cfi_def_cfa_offset 12
 1226              		.cfi_offset 4, -12
 1227              		.cfi_offset 5, -8
 1228              		.cfi_offset 14, -4
 1229              	.LVL112:
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 1230              		.loc 1 961 0
 1231 0002 028C     		ldrh	r2, [r0, #32]
 1232 0004 184C     		ldr	r4, .L75
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 1233              		.loc 1 973 0
 1234 0006 7323     		mov	r3, #115
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 1235              		.loc 1 961 0
 1236 0008 1440     		and	r4, r2
 1237 000a 0484     		strh	r4, [r0, #32]
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 1238              		.loc 1 964 0
 1239 000c 058C     		ldrh	r5, [r0, #32]
 1240              	.LVL113:
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 1241              		.loc 1 966 0
 1242 000e 8288     		ldrh	r2, [r0, #4]
 1243              	.LVL114:
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 1244              		.loc 1 969 0
 1245 0010 848B     		ldrh	r4, [r0, #28]
 1246              	.LVL115:
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 1247              		.loc 1 973 0
 1248 0012 9C43     		bic	r4, r3
 1249              	.LVL116:
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 1250              		.loc 1 975 0
 1251 0014 0B88     		ldrh	r3, [r1]
 1252 0016 1C43     		orr	r4, r3
 1253              	.LVL117:
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 1254              		.loc 1 978 0
 1255 0018 144B     		ldr	r3, .L75+4
 1256 001a 2B40     		and	r3, r5
 1257              	.LVL118:
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 1258              		.loc 1 980 0
 1259 001c 8D89     		ldrh	r5, [r1, #12]
 1260 001e 2D02     		lsl	r5, r5, #8
 1261 0020 2B43     		orr	r3, r5
 1262              	.LVL119:
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 1263              		.loc 1 983 0
 1264 0022 4D88     		ldrh	r5, [r1, #2]
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 1265              		.loc 1 980 0
 1266 0024 9BB2     		uxth	r3, r3
 1267              	.LVL120:
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 1268              		.loc 1 983 0
 1269 0026 2D02     		lsl	r5, r5, #8
 1270 0028 2B43     		orr	r3, r5
 1271              	.LVL121:
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
 1272              		.loc 1 985 0
 1273 002a 114D     		ldr	r5, .L75+8
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 1274              		.loc 1 983 0
 1275 002c 9BB2     		uxth	r3, r3
 1276              	.LVL122:
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
 1277              		.loc 1 985 0
 1278 002e A842     		cmp	r0, r5
 1279 0030 14D1     		bne	.L74
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 1280              		.loc 1 993 0
 1281 0032 104D     		ldr	r5, .L75+12
 1282 0034 2B40     		and	r3, r5
 1283              	.LVL123:
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 1284              		.loc 1 995 0
 1285 0036 CD89     		ldrh	r5, [r1, #14]
 1286 0038 2D02     		lsl	r5, r5, #8
 1287 003a 2B43     		orr	r3, r5
 1288              	.LVL124:
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 1289              		.loc 1 997 0
 1290 003c 0E4D     		ldr	r5, .L75+16
 1291 003e 2B40     		and	r3, r5
 1292              	.LVL125:
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 1293              		.loc 1 1000 0
 1294 0040 8D88     		ldrh	r5, [r1, #4]
 1295 0042 2D02     		lsl	r5, r5, #8
 1296 0044 2B43     		orr	r3, r5
 1297              	.LVL126:
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 1298              		.loc 1 1003 0
 1299 0046 0D4D     		ldr	r5, .L75+20
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 1300              		.loc 1 1000 0
 1301 0048 9BB2     		uxth	r3, r3
 1302              	.LVL127:
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 1303              		.loc 1 1003 0
 1304 004a 2A40     		and	r2, r5
 1305              	.LVL128:
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 1306              		.loc 1 1005 0
 1307 004c 0D8A     		ldrh	r5, [r1, #16]
 1308 004e 2D01     		lsl	r5, r5, #4
 1309 0050 2A43     		orr	r2, r5
 1310              	.LVL129:
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 1311              		.loc 1 1007 0
 1312 0052 4D8A     		ldrh	r5, [r1, #18]
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 1313              		.loc 1 1005 0
 1314 0054 92B2     		uxth	r2, r2
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 1315              		.loc 1 1007 0
 1316 0056 2D01     		lsl	r5, r5, #4
 1317 0058 2A43     		orr	r2, r5
 1318 005a 92B2     		uxth	r2, r2
 1319              	.LVL130:
 1320              	.L74:
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 1321              		.loc 1 1016 0
 1322 005c 8968     		ldr	r1, [r1, #8]
 1323              	.LVL131:
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1324              		.loc 1 1010 0
 1325 005e 8280     		strh	r2, [r0, #4]
 1326              		@ sp needed for prologue
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 1327              		.loc 1 1013 0
 1328 0060 8483     		strh	r4, [r0, #28]
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 1329              		.loc 1 1016 0
 1330 0062 C163     		str	r1, [r0, #60]
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 1331              		.loc 1 1019 0
 1332 0064 0384     		strh	r3, [r0, #32]
 1333              	.LVL132:
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1334              		.loc 1 1020 0
 1335 0066 30BD     		pop	{r4, r5, pc}
 1336              	.L76:
 1337              		.align	2
 1338              	.L75:
 1339 0068 FFFEFFFF 		.word	-257
 1340 006c FFFDFFFF 		.word	-513
 1341 0070 002C0140 		.word	1073818624
 1342 0074 FFF7FFFF 		.word	-2049
 1343 0078 FFFB0000 		.word	64511
 1344 007c FFCFFFFF 		.word	-12289
 1345              		.cfi_endproc
 1346              	.LFE53:
 1348              		.section	.text.TIM_OC4Init,"ax",%progbits
 1349              		.align	1
 1350              		.global	TIM_OC4Init
 1351              		.code	16
 1352              		.thumb_func
 1354              	TIM_OC4Init:
 1355              	.LFB54:
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1356              		.loc 1 1033 0
 1357              		.cfi_startproc
 1358 0000 30B5     		push	{r4, r5, lr}
 1359              	.LCFI12:
 1360              		.cfi_def_cfa_offset 12
 1361              		.cfi_offset 4, -12
 1362              		.cfi_offset 5, -8
 1363              		.cfi_offset 14, -4
 1364              	.LVL133:
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 1365              		.loc 1 1042 0
 1366 0002 048C     		ldrh	r4, [r0, #32]
 1367 0004 114B     		ldr	r3, .L79
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 1368              		.loc 1 1054 0
 1369 0006 124A     		ldr	r2, .L79+4
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 1370              		.loc 1 1042 0
 1371 0008 2340     		and	r3, r4
 1372 000a 0384     		strh	r3, [r0, #32]
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 1373              		.loc 1 1045 0
 1374 000c 058C     		ldrh	r5, [r0, #32]
 1375              	.LVL134:
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 1376              		.loc 1 1047 0
 1377 000e 8388     		ldrh	r3, [r0, #4]
 1378              	.LVL135:
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 1379              		.loc 1 1050 0
 1380 0010 848B     		ldrh	r4, [r0, #28]
 1381              	.LVL136:
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 1382              		.loc 1 1054 0
 1383 0012 1440     		and	r4, r2
 1384              	.LVL137:
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 1385              		.loc 1 1057 0
 1386 0014 0A88     		ldrh	r2, [r1]
 1387 0016 1202     		lsl	r2, r2, #8
 1388 0018 1443     		orr	r4, r2
 1389              	.LVL138:
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 1390              		.loc 1 1060 0
 1391 001a 0E4A     		ldr	r2, .L79+8
 1392 001c 2A40     		and	r2, r5
 1393              	.LVL139:
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 1394              		.loc 1 1062 0
 1395 001e 8D89     		ldrh	r5, [r1, #12]
 1396 0020 2D03     		lsl	r5, r5, #12
 1397 0022 2A43     		orr	r2, r5
 1398              	.LVL140:
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 1399              		.loc 1 1065 0
 1400 0024 4D88     		ldrh	r5, [r1, #2]
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 1401              		.loc 1 1062 0
 1402 0026 92B2     		uxth	r2, r2
 1403              	.LVL141:
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 1404              		.loc 1 1065 0
 1405 0028 2D03     		lsl	r5, r5, #12
 1406 002a 2A43     		orr	r2, r5
 1407              	.LVL142:
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if(TIMx == TIM1)
 1408              		.loc 1 1067 0
 1409 002c 0A4D     		ldr	r5, .L79+12
 1410 002e A842     		cmp	r0, r5
 1411 0030 05D1     		bne	.L78
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 1412              		.loc 1 1071 0
 1413 0032 0A4D     		ldr	r5, .L79+16
 1414 0034 2B40     		and	r3, r5
 1415              	.LVL143:
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 1416              		.loc 1 1073 0
 1417 0036 0D8A     		ldrh	r5, [r1, #16]
 1418 0038 AD01     		lsl	r5, r5, #6
 1419 003a 2B43     		orr	r3, r5
 1420              	.LVL144:
 1421 003c 9BB2     		uxth	r3, r3
 1422              	.LVL145:
 1423              	.L78:
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 1424              		.loc 1 1082 0
 1425 003e 8968     		ldr	r1, [r1, #8]
 1426              	.LVL146:
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1427              		.loc 1 1076 0
 1428 0040 8380     		strh	r3, [r0, #4]
 1429              		@ sp needed for prologue
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 1430              		.loc 1 1079 0
 1431 0042 8483     		strh	r4, [r0, #28]
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 1432              		.loc 1 1082 0
 1433 0044 0164     		str	r1, [r0, #64]
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 1434              		.loc 1 1085 0
 1435 0046 0284     		strh	r2, [r0, #32]
 1436              	.LVL147:
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1437              		.loc 1 1086 0
 1438 0048 30BD     		pop	{r4, r5, pc}
 1439              	.L80:
 1440 004a C046     		.align	2
 1441              	.L79:
 1442 004c FFEFFFFF 		.word	-4097
 1443 0050 FF8CFFFF 		.word	-29441
 1444 0054 FFDFFFFF 		.word	-8193
 1445 0058 002C0140 		.word	1073818624
 1446 005c FFBFFFFF 		.word	-16385
 1447              		.cfi_endproc
 1448              	.LFE54:
 1450              		.section	.text.TIM_OCStructInit,"ax",%progbits
 1451              		.align	1
 1452              		.global	TIM_OCStructInit
 1453              		.code	16
 1454              		.thumb_func
 1456              	TIM_OCStructInit:
 1457              	.LFB55:
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1458              		.loc 1 1095 0
 1459              		.cfi_startproc
 1460              	.LVL148:
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 1461              		.loc 1 1097 0
 1462 0000 0023     		mov	r3, #0
 1463 0002 0380     		strh	r3, [r0]
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 1464              		.loc 1 1098 0
 1465 0004 4380     		strh	r3, [r0, #2]
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 1466              		.loc 1 1099 0
 1467 0006 8380     		strh	r3, [r0, #4]
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x0000000;
 1468              		.loc 1 1100 0
 1469 0008 8360     		str	r3, [r0, #8]
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 1470              		.loc 1 1101 0
 1471 000a 8381     		strh	r3, [r0, #12]
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 1472              		.loc 1 1102 0
 1473 000c C381     		strh	r3, [r0, #14]
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 1474              		.loc 1 1103 0
 1475 000e 0382     		strh	r3, [r0, #16]
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 1476              		.loc 1 1104 0
 1477 0010 4382     		strh	r3, [r0, #18]
 1478              		@ sp needed for prologue
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1479              		.loc 1 1105 0
 1480 0012 7047     		bx	lr
 1481              		.cfi_endproc
 1482              	.LFE55:
 1484              		.section	.text.TIM_SelectOCxM,"ax",%progbits
 1485              		.align	1
 1486              		.global	TIM_SelectOCxM
 1487              		.code	16
 1488              		.thumb_func
 1490              	TIM_SelectOCxM:
 1491              	.LFB56:
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1492              		.loc 1 1132 0
 1493              		.cfi_startproc
 1494 0000 30B5     		push	{r4, r5, lr}
 1495              	.LCFI13:
 1496              		.cfi_def_cfa_offset 12
 1497              		.cfi_offset 4, -12
 1498              		.cfi_offset 5, -8
 1499              		.cfi_offset 14, -4
 1500              	.LVL149:
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
 1501              		.loc 1 1146 0
 1502 0002 048C     		ldrh	r4, [r0, #32]
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 1503              		.loc 1 1143 0
 1504 0004 0125     		mov	r5, #1
 1505 0006 8D40     		lsl	r5, r5, r1
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp += CCMR_OFFSET;
 1506              		.loc 1 1141 0
 1507 0008 031C     		mov	r3, r0
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
 1508              		.loc 1 1146 0
 1509 000a AC43     		bic	r4, r5
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp += CCMR_OFFSET;
 1510              		.loc 1 1141 0
 1511 000c 1833     		add	r3, r3, #24
 1512              	.LVL150:
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
 1513              		.loc 1 1146 0
 1514 000e 0484     		strh	r4, [r0, #32]
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 1515              		.loc 1 1148 0
 1516 0010 0829     		cmp	r1, #8
 1517 0012 01D0     		beq	.L86
 1518 0014 0029     		cmp	r1, #0
 1519 0016 07D1     		bne	.L83
 1520              	.L86:
 1521              	.LVL151:
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmp += (TIM_Channel>>1);
 1522              		.loc 1 1150 0
 1523 0018 4908     		lsr	r1, r1, #1
 1524              	.LVL152:
 1525 001a C918     		add	r1, r1, r3
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 1526              		.loc 1 1153 0
 1527 001c 0B68     		ldr	r3, [r1]
 1528 001e 7020     		mov	r0, #112
 1529              	.LVL153:
 1530 0020 8343     		bic	r3, r0
 1531 0022 0B60     		str	r3, [r1]
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= TIM_OCMode;
 1532              		.loc 1 1156 0
 1533 0024 0B68     		ldr	r3, [r1]
 1534 0026 0AE0     		b	.L87
 1535              	.LVL154:
 1536              	.L83:
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 1537              		.loc 1 1160 0
 1538 0028 0439     		sub	r1, r1, #4
 1539              	.LVL155:
 1540 002a 89B2     		uxth	r1, r1
 1541              	.LVL156:
 1542 002c 4808     		lsr	r0, r1, #1
 1543              	.LVL157:
 1544 002e C118     		add	r1, r0, r3
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 1545              		.loc 1 1163 0
 1546 0030 0D68     		ldr	r5, [r1]
 1547 0032 044C     		ldr	r4, .L88
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 1548              		.loc 1 1166 0
 1549 0034 1202     		lsl	r2, r2, #8
 1550              	.LVL158:
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 1551              		.loc 1 1163 0
 1552 0036 2C40     		and	r4, r5
 1553 0038 0C60     		str	r4, [r1]
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 1554              		.loc 1 1166 0
 1555 003a 0B68     		ldr	r3, [r1]
 1556              	.LVL159:
 1557 003c 92B2     		uxth	r2, r2
 1558              	.L87:
 1559 003e 1A43     		orr	r2, r3
 1560 0040 0A60     		str	r2, [r1]
 1561              		@ sp needed for prologue
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1562              		.loc 1 1168 0
 1563 0042 30BD     		pop	{r4, r5, pc}
 1564              	.L89:
 1565              		.align	2
 1566              	.L88:
 1567 0044 FF8FFFFF 		.word	-28673
 1568              		.cfi_endproc
 1569              	.LFE56:
 1571              		.section	.text.TIM_SetCompare1,"ax",%progbits
 1572              		.align	1
 1573              		.global	TIM_SetCompare1
 1574              		.code	16
 1575              		.thumb_func
 1577              	TIM_SetCompare1:
 1578              	.LFB57:
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1579              		.loc 1 1178 0
 1580              		.cfi_startproc
 1581              	.LVL160:
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR1 = Compare1;
 1582              		.loc 1 1183 0
 1583 0000 4163     		str	r1, [r0, #52]
 1584              		@ sp needed for prologue
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1585              		.loc 1 1184 0
 1586 0002 7047     		bx	lr
 1587              		.cfi_endproc
 1588              	.LFE57:
 1590              		.section	.text.TIM_SetCompare2,"ax",%progbits
 1591              		.align	1
 1592              		.global	TIM_SetCompare2
 1593              		.code	16
 1594              		.thumb_func
 1596              	TIM_SetCompare2:
 1597              	.LFB58:
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1598              		.loc 1 1194 0
 1599              		.cfi_startproc
 1600              	.LVL161:
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR2 = Compare2;
 1601              		.loc 1 1199 0
 1602 0000 8163     		str	r1, [r0, #56]
 1603              		@ sp needed for prologue
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1604              		.loc 1 1200 0
 1605 0002 7047     		bx	lr
 1606              		.cfi_endproc
 1607              	.LFE58:
 1609              		.section	.text.TIM_SetCompare3,"ax",%progbits
 1610              		.align	1
 1611              		.global	TIM_SetCompare3
 1612              		.code	16
 1613              		.thumb_func
 1615              	TIM_SetCompare3:
 1616              	.LFB59:
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1617              		.loc 1 1209 0
 1618              		.cfi_startproc
 1619              	.LVL162:
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR3 = Compare3;
 1620              		.loc 1 1214 0
 1621 0000 C163     		str	r1, [r0, #60]
 1622              		@ sp needed for prologue
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1623              		.loc 1 1215 0
 1624 0002 7047     		bx	lr
 1625              		.cfi_endproc
 1626              	.LFE59:
 1628              		.section	.text.TIM_SetCompare4,"ax",%progbits
 1629              		.align	1
 1630              		.global	TIM_SetCompare4
 1631              		.code	16
 1632              		.thumb_func
 1634              	TIM_SetCompare4:
 1635              	.LFB60:
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1636              		.loc 1 1225 0
 1637              		.cfi_startproc
 1638              	.LVL163:
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCR4 = Compare4;
 1639              		.loc 1 1230 0
 1640 0000 0164     		str	r1, [r0, #64]
 1641              		@ sp needed for prologue
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1642              		.loc 1 1231 0
 1643 0002 7047     		bx	lr
 1644              		.cfi_endproc
 1645              	.LFE60:
 1647              		.section	.text.TIM_ForcedOC1Config,"ax",%progbits
 1648              		.align	1
 1649              		.global	TIM_ForcedOC1Config
 1650              		.code	16
 1651              		.thumb_func
 1653              	TIM_ForcedOC1Config:
 1654              	.LFB61:
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1655              		.loc 1 1244 0
 1656              		.cfi_startproc
 1657              	.LVL164:
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1658              		.loc 1 1249 0
 1659 0000 038B     		ldrh	r3, [r0, #24]
 1660              	.LVL165:
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 1661              		.loc 1 1251 0
 1662 0002 7022     		mov	r2, #112
 1663 0004 9343     		bic	r3, r2
 1664              	.LVL166:
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_ForcedAction;
 1665              		.loc 1 1253 0
 1666 0006 1943     		orr	r1, r3
 1667              	.LVL167:
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 1668              		.loc 1 1255 0
 1669 0008 0183     		strh	r1, [r0, #24]
 1670              		@ sp needed for prologue
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1671              		.loc 1 1256 0
 1672 000a 7047     		bx	lr
 1673              		.cfi_endproc
 1674              	.LFE61:
 1676              		.section	.text.TIM_ForcedOC2Config,"ax",%progbits
 1677              		.align	1
 1678              		.global	TIM_ForcedOC2Config
 1679              		.code	16
 1680              		.thumb_func
 1682              	TIM_ForcedOC2Config:
 1683              	.LFB62:
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1684              		.loc 1 1269 0
 1685              		.cfi_startproc
 1686              	.LVL168:
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1687              		.loc 1 1276 0
 1688 0000 028B     		ldrh	r2, [r0, #24]
 1689              	.LVL169:
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 1690              		.loc 1 1278 0
 1691 0002 034B     		ldr	r3, .L96
 1692              		@ sp needed for prologue
 1693 0004 1A40     		and	r2, r3
 1694              	.LVL170:
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 1695              		.loc 1 1280 0
 1696 0006 0B02     		lsl	r3, r1, #8
 1697 0008 111C     		mov	r1, r2
 1698              	.LVL171:
 1699 000a 1943     		orr	r1, r3
 1700              	.LVL172:
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 1701              		.loc 1 1282 0
 1702 000c 0183     		strh	r1, [r0, #24]
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1703              		.loc 1 1283 0
 1704 000e 7047     		bx	lr
 1705              	.L97:
 1706              		.align	2
 1707              	.L96:
 1708 0010 FF8FFFFF 		.word	-28673
 1709              		.cfi_endproc
 1710              	.LFE62:
 1712              		.section	.text.TIM_ForcedOC3Config,"ax",%progbits
 1713              		.align	1
 1714              		.global	TIM_ForcedOC3Config
 1715              		.code	16
 1716              		.thumb_func
 1718              	TIM_ForcedOC3Config:
 1719              	.LFB63:
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1720              		.loc 1 1296 0
 1721              		.cfi_startproc
 1722              	.LVL173:
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 1723              		.loc 1 1303 0
 1724 0000 838B     		ldrh	r3, [r0, #28]
 1725              	.LVL174:
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 1726              		.loc 1 1305 0
 1727 0002 7022     		mov	r2, #112
 1728 0004 9343     		bic	r3, r2
 1729              	.LVL175:
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_ForcedAction;
 1730              		.loc 1 1307 0
 1731 0006 1943     		orr	r1, r3
 1732              	.LVL176:
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 1733              		.loc 1 1309 0
 1734 0008 8183     		strh	r1, [r0, #28]
 1735              		@ sp needed for prologue
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1736              		.loc 1 1310 0
 1737 000a 7047     		bx	lr
 1738              		.cfi_endproc
 1739              	.LFE63:
 1741              		.section	.text.TIM_ForcedOC4Config,"ax",%progbits
 1742              		.align	1
 1743              		.global	TIM_ForcedOC4Config
 1744              		.code	16
 1745              		.thumb_func
 1747              	TIM_ForcedOC4Config:
 1748              	.LFB64:
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1749              		.loc 1 1323 0
 1750              		.cfi_startproc
 1751              	.LVL177:
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 1752              		.loc 1 1329 0
 1753 0000 828B     		ldrh	r2, [r0, #28]
 1754              	.LVL178:
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 1755              		.loc 1 1331 0
 1756 0002 034B     		ldr	r3, .L100
 1757              		@ sp needed for prologue
 1758 0004 1A40     		and	r2, r3
 1759              	.LVL179:
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 1760              		.loc 1 1333 0
 1761 0006 0B02     		lsl	r3, r1, #8
 1762 0008 111C     		mov	r1, r2
 1763              	.LVL180:
 1764 000a 1943     		orr	r1, r3
 1765              	.LVL181:
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 1766              		.loc 1 1335 0
 1767 000c 8183     		strh	r1, [r0, #28]
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1768              		.loc 1 1336 0
 1769 000e 7047     		bx	lr
 1770              	.L101:
 1771              		.align	2
 1772              	.L100:
 1773 0010 FF8FFFFF 		.word	-28673
 1774              		.cfi_endproc
 1775              	.LFE64:
 1777              		.section	.text.TIM_CCPreloadControl,"ax",%progbits
 1778              		.align	1
 1779              		.global	TIM_CCPreloadControl
 1780              		.code	16
 1781              		.thumb_func
 1783              	TIM_CCPreloadControl:
 1784              	.LFB65:
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
 1785              		.loc 1 1347 0
 1786              		.cfi_startproc
 1787 0000 00B5     		push	{lr}
 1788              	.LCFI14:
 1789              		.cfi_def_cfa_offset 4
 1790              		.cfi_offset 14, -4
 1791              	.LVL182:
 1792 0002 0123     		mov	r3, #1
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
 1793              		.loc 1 1354 0
 1794 0004 8288     		ldrh	r2, [r0, #4]
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 1795              		.loc 1 1351 0
 1796 0006 0029     		cmp	r1, #0
 1797 0008 01D0     		beq	.L103
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
 1798              		.loc 1 1354 0
 1799 000a 1343     		orr	r3, r2
 1800 000c 01E0     		b	.L105
 1801              	.L103:
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 1802              		.loc 1 1359 0
 1803 000e 9A43     		bic	r2, r3
 1804 0010 131C     		mov	r3, r2
 1805              	.L105:
 1806 0012 8380     		strh	r3, [r0, #4]
 1807              		@ sp needed for prologue
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1808              		.loc 1 1361 0
 1809 0014 00BD     		pop	{pc}
 1810              		.cfi_endproc
 1811              	.LFE65:
 1813              		.section	.text.TIM_OC1PreloadConfig,"ax",%progbits
 1814              		.align	1
 1815              		.global	TIM_OC1PreloadConfig
 1816              		.code	16
 1817              		.thumb_func
 1819              	TIM_OC1PreloadConfig:
 1820              	.LFB66:
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1821              		.loc 1 1375 0
 1822              		.cfi_startproc
 1823              	.LVL183:
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1824              		.loc 1 1381 0
 1825 0000 038B     		ldrh	r3, [r0, #24]
 1826              	.LVL184:
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 1827              		.loc 1 1383 0
 1828 0002 0822     		mov	r2, #8
 1829 0004 9343     		bic	r3, r2
 1830              	.LVL185:
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCPreload;
 1831              		.loc 1 1385 0
 1832 0006 1943     		orr	r1, r3
 1833              	.LVL186:
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 1834              		.loc 1 1387 0
 1835 0008 0183     		strh	r1, [r0, #24]
 1836              		@ sp needed for prologue
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1837              		.loc 1 1388 0
 1838 000a 7047     		bx	lr
 1839              		.cfi_endproc
 1840              	.LFE66:
 1842              		.section	.text.TIM_OC2PreloadConfig,"ax",%progbits
 1843              		.align	1
 1844              		.global	TIM_OC2PreloadConfig
 1845              		.code	16
 1846              		.thumb_func
 1848              	TIM_OC2PreloadConfig:
 1849              	.LFB67:
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1850              		.loc 1 1401 0
 1851              		.cfi_startproc
 1852              	.LVL187:
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1853              		.loc 1 1407 0
 1854 0000 028B     		ldrh	r2, [r0, #24]
 1855              	.LVL188:
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 1856              		.loc 1 1409 0
 1857 0002 034B     		ldr	r3, .L108
 1858              		@ sp needed for prologue
 1859 0004 1A40     		and	r2, r3
 1860              	.LVL189:
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 1861              		.loc 1 1411 0
 1862 0006 0B02     		lsl	r3, r1, #8
 1863 0008 111C     		mov	r1, r2
 1864              	.LVL190:
 1865 000a 1943     		orr	r1, r3
 1866              	.LVL191:
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 1867              		.loc 1 1413 0
 1868 000c 0183     		strh	r1, [r0, #24]
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1869              		.loc 1 1414 0
 1870 000e 7047     		bx	lr
 1871              	.L109:
 1872              		.align	2
 1873              	.L108:
 1874 0010 FFF7FFFF 		.word	-2049
 1875              		.cfi_endproc
 1876              	.LFE67:
 1878              		.section	.text.TIM_OC3PreloadConfig,"ax",%progbits
 1879              		.align	1
 1880              		.global	TIM_OC3PreloadConfig
 1881              		.code	16
 1882              		.thumb_func
 1884              	TIM_OC3PreloadConfig:
 1885              	.LFB68:
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1886              		.loc 1 1427 0
 1887              		.cfi_startproc
 1888              	.LVL192:
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 1889              		.loc 1 1434 0
 1890 0000 838B     		ldrh	r3, [r0, #28]
 1891              	.LVL193:
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 1892              		.loc 1 1436 0
 1893 0002 0822     		mov	r2, #8
 1894 0004 9343     		bic	r3, r2
 1895              	.LVL194:
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCPreload;
 1896              		.loc 1 1438 0
 1897 0006 1943     		orr	r1, r3
 1898              	.LVL195:
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 1899              		.loc 1 1440 0
 1900 0008 8183     		strh	r1, [r0, #28]
 1901              		@ sp needed for prologue
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1902              		.loc 1 1441 0
 1903 000a 7047     		bx	lr
 1904              		.cfi_endproc
 1905              	.LFE68:
 1907              		.section	.text.TIM_OC4PreloadConfig,"ax",%progbits
 1908              		.align	1
 1909              		.global	TIM_OC4PreloadConfig
 1910              		.code	16
 1911              		.thumb_func
 1913              	TIM_OC4PreloadConfig:
 1914              	.LFB69:
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1915              		.loc 1 1454 0
 1916              		.cfi_startproc
 1917              	.LVL196:
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 1918              		.loc 1 1461 0
 1919 0000 828B     		ldrh	r2, [r0, #28]
 1920              	.LVL197:
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 1921              		.loc 1 1463 0
 1922 0002 034B     		ldr	r3, .L112
 1923              		@ sp needed for prologue
 1924 0004 1A40     		and	r2, r3
 1925              	.LVL198:
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 1926              		.loc 1 1465 0
 1927 0006 0B02     		lsl	r3, r1, #8
 1928 0008 111C     		mov	r1, r2
 1929              	.LVL199:
 1930 000a 1943     		orr	r1, r3
 1931              	.LVL200:
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 1932              		.loc 1 1467 0
 1933 000c 8183     		strh	r1, [r0, #28]
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1934              		.loc 1 1468 0
 1935 000e 7047     		bx	lr
 1936              	.L113:
 1937              		.align	2
 1938              	.L112:
 1939 0010 FFF7FFFF 		.word	-2049
 1940              		.cfi_endproc
 1941              	.LFE69:
 1943              		.section	.text.TIM_OC1FastConfig,"ax",%progbits
 1944              		.align	1
 1945              		.global	TIM_OC1FastConfig
 1946              		.code	16
 1947              		.thumb_func
 1949              	TIM_OC1FastConfig:
 1950              	.LFB70:
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1951              		.loc 1 1481 0
 1952              		.cfi_startproc
 1953              	.LVL201:
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1954              		.loc 1 1489 0
 1955 0000 038B     		ldrh	r3, [r0, #24]
 1956              	.LVL202:
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 1957              		.loc 1 1491 0
 1958 0002 0422     		mov	r2, #4
 1959 0004 9343     		bic	r3, r2
 1960              	.LVL203:
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCFast;
 1961              		.loc 1 1493 0
 1962 0006 1943     		orr	r1, r3
 1963              	.LVL204:
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 1964              		.loc 1 1495 0
 1965 0008 0183     		strh	r1, [r0, #24]
 1966              		@ sp needed for prologue
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1967              		.loc 1 1496 0
 1968 000a 7047     		bx	lr
 1969              		.cfi_endproc
 1970              	.LFE70:
 1972              		.section	.text.TIM_OC2FastConfig,"ax",%progbits
 1973              		.align	1
 1974              		.global	TIM_OC2FastConfig
 1975              		.code	16
 1976              		.thumb_func
 1978              	TIM_OC2FastConfig:
 1979              	.LFB71:
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 1980              		.loc 1 1509 0
 1981              		.cfi_startproc
 1982              	.LVL205:
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 1983              		.loc 1 1517 0
 1984 0000 028B     		ldrh	r2, [r0, #24]
 1985              	.LVL206:
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 1986              		.loc 1 1519 0
 1987 0002 034B     		ldr	r3, .L116
 1988              		@ sp needed for prologue
 1989 0004 1A40     		and	r2, r3
 1990              	.LVL207:
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 1991              		.loc 1 1521 0
 1992 0006 0B02     		lsl	r3, r1, #8
 1993 0008 111C     		mov	r1, r2
 1994              	.LVL208:
 1995 000a 1943     		orr	r1, r3
 1996              	.LVL209:
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 1997              		.loc 1 1523 0
 1998 000c 0183     		strh	r1, [r0, #24]
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 1999              		.loc 1 1524 0
 2000 000e 7047     		bx	lr
 2001              	.L117:
 2002              		.align	2
 2003              	.L116:
 2004 0010 FFFBFFFF 		.word	-1025
 2005              		.cfi_endproc
 2006              	.LFE71:
 2008              		.section	.text.TIM_OC3FastConfig,"ax",%progbits
 2009              		.align	1
 2010              		.global	TIM_OC3FastConfig
 2011              		.code	16
 2012              		.thumb_func
 2014              	TIM_OC3FastConfig:
 2015              	.LFB72:
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2016              		.loc 1 1537 0
 2017              		.cfi_startproc
 2018              	.LVL210:
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2019              		.loc 1 1545 0
 2020 0000 838B     		ldrh	r3, [r0, #28]
 2021              	.LVL211:
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 2022              		.loc 1 1547 0
 2023 0002 0422     		mov	r2, #4
 2024 0004 9343     		bic	r3, r2
 2025              	.LVL212:
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCFast;
 2026              		.loc 1 1549 0
 2027 0006 1943     		orr	r1, r3
 2028              	.LVL213:
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2029              		.loc 1 1551 0
 2030 0008 8183     		strh	r1, [r0, #28]
 2031              		@ sp needed for prologue
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2032              		.loc 1 1552 0
 2033 000a 7047     		bx	lr
 2034              		.cfi_endproc
 2035              	.LFE72:
 2037              		.section	.text.TIM_OC4FastConfig,"ax",%progbits
 2038              		.align	1
 2039              		.global	TIM_OC4FastConfig
 2040              		.code	16
 2041              		.thumb_func
 2043              	TIM_OC4FastConfig:
 2044              	.LFB73:
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2045              		.loc 1 1565 0
 2046              		.cfi_startproc
 2047              	.LVL214:
1573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2048              		.loc 1 1573 0
 2049 0000 828B     		ldrh	r2, [r0, #28]
 2050              	.LVL215:
1575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 2051              		.loc 1 1575 0
 2052 0002 034B     		ldr	r3, .L120
 2053              		@ sp needed for prologue
 2054 0004 1A40     		and	r2, r3
 2055              	.LVL216:
1577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 2056              		.loc 1 1577 0
 2057 0006 0B02     		lsl	r3, r1, #8
 2058 0008 111C     		mov	r1, r2
 2059              	.LVL217:
 2060 000a 1943     		orr	r1, r3
 2061              	.LVL218:
1579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2062              		.loc 1 1579 0
 2063 000c 8183     		strh	r1, [r0, #28]
1580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2064              		.loc 1 1580 0
 2065 000e 7047     		bx	lr
 2066              	.L121:
 2067              		.align	2
 2068              	.L120:
 2069 0010 FFFBFFFF 		.word	-1025
 2070              		.cfi_endproc
 2071              	.LFE73:
 2073              		.section	.text.TIM_ClearOC1Ref,"ax",%progbits
 2074              		.align	1
 2075              		.global	TIM_ClearOC1Ref
 2076              		.code	16
 2077              		.thumb_func
 2079              	TIM_ClearOC1Ref:
 2080              	.LFB74:
1593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2081              		.loc 1 1593 0
 2082              		.cfi_startproc
 2083              	.LVL219:
1600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2084              		.loc 1 1600 0
 2085 0000 038B     		ldrh	r3, [r0, #24]
 2086              	.LVL220:
1602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 2087              		.loc 1 1602 0
 2088 0002 8022     		mov	r2, #128
 2089 0004 9343     		bic	r3, r2
 2090              	.LVL221:
1604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_OCClear;
 2091              		.loc 1 1604 0
 2092 0006 1943     		orr	r1, r3
 2093              	.LVL222:
1606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2094              		.loc 1 1606 0
 2095 0008 0183     		strh	r1, [r0, #24]
 2096              		@ sp needed for prologue
1607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2097              		.loc 1 1607 0
 2098 000a 7047     		bx	lr
 2099              		.cfi_endproc
 2100              	.LFE74:
 2102              		.section	.text.TIM_ClearOC2Ref,"ax",%progbits
 2103              		.align	1
 2104              		.global	TIM_ClearOC2Ref
 2105              		.code	16
 2106              		.thumb_func
 2108              	TIM_ClearOC2Ref:
 2109              	.LFB75:
1620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2110              		.loc 1 1620 0
 2111              		.cfi_startproc
 2112              	.LVL223:
1627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2113              		.loc 1 1627 0
 2114 0000 038B     		ldrh	r3, [r0, #24]
 2115              	.LVL224:
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 2116              		.loc 1 1631 0
 2117 0002 0902     		lsl	r1, r1, #8
 2118              	.LVL225:
1629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 2119              		.loc 1 1629 0
 2120 0004 5A04     		lsl	r2, r3, #17
 2121 0006 530C     		lsr	r3, r2, #17
 2122              	.LVL226:
1631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 2123              		.loc 1 1631 0
 2124 0008 1943     		orr	r1, r3
 2125              	.LVL227:
1633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2126              		.loc 1 1633 0
 2127 000a 0183     		strh	r1, [r0, #24]
 2128              		@ sp needed for prologue
1634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2129              		.loc 1 1634 0
 2130 000c 7047     		bx	lr
 2131              		.cfi_endproc
 2132              	.LFE75:
 2134              		.section	.text.TIM_ClearOC3Ref,"ax",%progbits
 2135              		.align	1
 2136              		.global	TIM_ClearOC3Ref
 2137              		.code	16
 2138              		.thumb_func
 2140              	TIM_ClearOC3Ref:
 2141              	.LFB76:
1647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2142              		.loc 1 1647 0
 2143              		.cfi_startproc
 2144              	.LVL228:
1654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2145              		.loc 1 1654 0
 2146 0000 838B     		ldrh	r3, [r0, #28]
 2147              	.LVL229:
1656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 2148              		.loc 1 1656 0
 2149 0002 8022     		mov	r2, #128
 2150 0004 9343     		bic	r3, r2
 2151              	.LVL230:
1658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= TIM_OCClear;
 2152              		.loc 1 1658 0
 2153 0006 1943     		orr	r1, r3
 2154              	.LVL231:
1660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2155              		.loc 1 1660 0
 2156 0008 8183     		strh	r1, [r0, #28]
 2157              		@ sp needed for prologue
1661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2158              		.loc 1 1661 0
 2159 000a 7047     		bx	lr
 2160              		.cfi_endproc
 2161              	.LFE76:
 2163              		.section	.text.TIM_ClearOC4Ref,"ax",%progbits
 2164              		.align	1
 2165              		.global	TIM_ClearOC4Ref
 2166              		.code	16
 2167              		.thumb_func
 2169              	TIM_ClearOC4Ref:
 2170              	.LFB77:
1674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2171              		.loc 1 1674 0
 2172              		.cfi_startproc
 2173              	.LVL232:
1681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2174              		.loc 1 1681 0
 2175 0000 838B     		ldrh	r3, [r0, #28]
 2176              	.LVL233:
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 2177              		.loc 1 1685 0
 2178 0002 0902     		lsl	r1, r1, #8
 2179              	.LVL234:
1683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 2180              		.loc 1 1683 0
 2181 0004 5A04     		lsl	r2, r3, #17
 2182 0006 530C     		lsr	r3, r2, #17
 2183              	.LVL235:
1685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 2184              		.loc 1 1685 0
 2185 0008 1943     		orr	r1, r3
 2186              	.LVL236:
1687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2187              		.loc 1 1687 0
 2188 000a 8183     		strh	r1, [r0, #28]
 2189              		@ sp needed for prologue
1688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2190              		.loc 1 1688 0
 2191 000c 7047     		bx	lr
 2192              		.cfi_endproc
 2193              	.LFE77:
 2195              		.section	.text.TIM_OC1PolarityConfig,"ax",%progbits
 2196              		.align	1
 2197              		.global	TIM_OC1PolarityConfig
 2198              		.code	16
 2199              		.thumb_func
 2201              	TIM_OC1PolarityConfig:
 2202              	.LFB78:
1701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2203              		.loc 1 1701 0
 2204              		.cfi_startproc
 2205              	.LVL237:
1708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2206              		.loc 1 1708 0
 2207 0000 038C     		ldrh	r3, [r0, #32]
 2208              	.LVL238:
1710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 2209              		.loc 1 1710 0
 2210 0002 0222     		mov	r2, #2
 2211 0004 9343     		bic	r3, r2
 2212              	.LVL239:
1711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCPolarity;
 2213              		.loc 1 1711 0
 2214 0006 1943     		orr	r1, r3
 2215              	.LVL240:
1713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2216              		.loc 1 1713 0
 2217 0008 0184     		strh	r1, [r0, #32]
 2218              		@ sp needed for prologue
1714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2219              		.loc 1 1714 0
 2220 000a 7047     		bx	lr
 2221              		.cfi_endproc
 2222              	.LFE78:
 2224              		.section	.text.TIM_OC1NPolarityConfig,"ax",%progbits
 2225              		.align	1
 2226              		.global	TIM_OC1NPolarityConfig
 2227              		.code	16
 2228              		.thumb_func
 2230              	TIM_OC1NPolarityConfig:
 2231              	.LFB79:
1726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2232              		.loc 1 1726 0
 2233              		.cfi_startproc
 2234              	.LVL241:
1732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2235              		.loc 1 1732 0
 2236 0000 038C     		ldrh	r3, [r0, #32]
 2237              	.LVL242:
1734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 2238              		.loc 1 1734 0
 2239 0002 0822     		mov	r2, #8
 2240 0004 9343     		bic	r3, r2
 2241              	.LVL243:
1735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= TIM_OCNPolarity;
 2242              		.loc 1 1735 0
 2243 0006 1943     		orr	r1, r3
 2244              	.LVL244:
1737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2245              		.loc 1 1737 0
 2246 0008 0184     		strh	r1, [r0, #32]
 2247              		@ sp needed for prologue
1738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2248              		.loc 1 1738 0
 2249 000a 7047     		bx	lr
 2250              		.cfi_endproc
 2251              	.LFE79:
 2253              		.section	.text.TIM_OC2PolarityConfig,"ax",%progbits
 2254              		.align	1
 2255              		.global	TIM_OC2PolarityConfig
 2256              		.code	16
 2257              		.thumb_func
 2259              	TIM_OC2PolarityConfig:
 2260              	.LFB80:
1751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2261              		.loc 1 1751 0
 2262              		.cfi_startproc
 2263              	.LVL245:
1758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2264              		.loc 1 1758 0
 2265 0000 028C     		ldrh	r2, [r0, #32]
 2266              	.LVL246:
1760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 2267              		.loc 1 1760 0
 2268 0002 2023     		mov	r3, #32
 2269 0004 9A43     		bic	r2, r3
 2270              	.LVL247:
1761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 2271              		.loc 1 1761 0
 2272 0006 0B01     		lsl	r3, r1, #4
 2273 0008 111C     		mov	r1, r2
 2274              	.LVL248:
 2275 000a 1943     		orr	r1, r3
 2276              	.LVL249:
1763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2277              		.loc 1 1763 0
 2278 000c 0184     		strh	r1, [r0, #32]
 2279              		@ sp needed for prologue
1764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2280              		.loc 1 1764 0
 2281 000e 7047     		bx	lr
 2282              		.cfi_endproc
 2283              	.LFE80:
 2285              		.section	.text.TIM_OC2NPolarityConfig,"ax",%progbits
 2286              		.align	1
 2287              		.global	TIM_OC2NPolarityConfig
 2288              		.code	16
 2289              		.thumb_func
 2291              	TIM_OC2NPolarityConfig:
 2292              	.LFB81:
1776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2293              		.loc 1 1776 0
 2294              		.cfi_startproc
 2295              	.LVL250:
1782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2296              		.loc 1 1782 0
 2297 0000 028C     		ldrh	r2, [r0, #32]
 2298              	.LVL251:
1784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 2299              		.loc 1 1784 0
 2300 0002 8023     		mov	r3, #128
 2301 0004 9A43     		bic	r2, r3
 2302              	.LVL252:
1785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 2303              		.loc 1 1785 0
 2304 0006 0B01     		lsl	r3, r1, #4
 2305 0008 111C     		mov	r1, r2
 2306              	.LVL253:
 2307 000a 1943     		orr	r1, r3
 2308              	.LVL254:
1787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2309              		.loc 1 1787 0
 2310 000c 0184     		strh	r1, [r0, #32]
 2311              		@ sp needed for prologue
1788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2312              		.loc 1 1788 0
 2313 000e 7047     		bx	lr
 2314              		.cfi_endproc
 2315              	.LFE81:
 2317              		.section	.text.TIM_OC3PolarityConfig,"ax",%progbits
 2318              		.align	1
 2319              		.global	TIM_OC3PolarityConfig
 2320              		.code	16
 2321              		.thumb_func
 2323              	TIM_OC3PolarityConfig:
 2324              	.LFB82:
1801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2325              		.loc 1 1801 0
 2326              		.cfi_startproc
 2327              	.LVL255:
1808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2328              		.loc 1 1808 0
 2329 0000 028C     		ldrh	r2, [r0, #32]
 2330              	.LVL256:
1810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 2331              		.loc 1 1810 0
 2332 0002 034B     		ldr	r3, .L131
 2333              		@ sp needed for prologue
 2334 0004 1A40     		and	r2, r3
 2335              	.LVL257:
1811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 2336              		.loc 1 1811 0
 2337 0006 0B02     		lsl	r3, r1, #8
 2338 0008 111C     		mov	r1, r2
 2339              	.LVL258:
 2340 000a 1943     		orr	r1, r3
 2341              	.LVL259:
1813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2342              		.loc 1 1813 0
 2343 000c 0184     		strh	r1, [r0, #32]
1814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2344              		.loc 1 1814 0
 2345 000e 7047     		bx	lr
 2346              	.L132:
 2347              		.align	2
 2348              	.L131:
 2349 0010 FFFDFFFF 		.word	-513
 2350              		.cfi_endproc
 2351              	.LFE82:
 2353              		.section	.text.TIM_OC3NPolarityConfig,"ax",%progbits
 2354              		.align	1
 2355              		.global	TIM_OC3NPolarityConfig
 2356              		.code	16
 2357              		.thumb_func
 2359              	TIM_OC3NPolarityConfig:
 2360              	.LFB83:
1826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2361              		.loc 1 1826 0
 2362              		.cfi_startproc
 2363              	.LVL260:
1833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2364              		.loc 1 1833 0
 2365 0000 028C     		ldrh	r2, [r0, #32]
 2366              	.LVL261:
1835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 2367              		.loc 1 1835 0
 2368 0002 034B     		ldr	r3, .L134
 2369              		@ sp needed for prologue
 2370 0004 1A40     		and	r2, r3
 2371              	.LVL262:
1836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 2372              		.loc 1 1836 0
 2373 0006 0B02     		lsl	r3, r1, #8
 2374 0008 111C     		mov	r1, r2
 2375              	.LVL263:
 2376 000a 1943     		orr	r1, r3
 2377              	.LVL264:
1838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2378              		.loc 1 1838 0
 2379 000c 0184     		strh	r1, [r0, #32]
1839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2380              		.loc 1 1839 0
 2381 000e 7047     		bx	lr
 2382              	.L135:
 2383              		.align	2
 2384              	.L134:
 2385 0010 FFF7FFFF 		.word	-2049
 2386              		.cfi_endproc
 2387              	.LFE83:
 2389              		.section	.text.TIM_OC4PolarityConfig,"ax",%progbits
 2390              		.align	1
 2391              		.global	TIM_OC4PolarityConfig
 2392              		.code	16
 2393              		.thumb_func
 2395              	TIM_OC4PolarityConfig:
 2396              	.LFB84:
1852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2397              		.loc 1 1852 0
 2398              		.cfi_startproc
 2399              	.LVL265:
1859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2400              		.loc 1 1859 0
 2401 0000 028C     		ldrh	r2, [r0, #32]
 2402              	.LVL266:
1861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 2403              		.loc 1 1861 0
 2404 0002 034B     		ldr	r3, .L137
 2405              		@ sp needed for prologue
 2406 0004 1A40     		and	r2, r3
 2407              	.LVL267:
1862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 2408              		.loc 1 1862 0
 2409 0006 0B03     		lsl	r3, r1, #12
 2410 0008 111C     		mov	r1, r2
 2411              	.LVL268:
 2412 000a 1943     		orr	r1, r3
 2413              	.LVL269:
1864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 2414              		.loc 1 1864 0
 2415 000c 0184     		strh	r1, [r0, #32]
1865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2416              		.loc 1 1865 0
 2417 000e 7047     		bx	lr
 2418              	.L138:
 2419              		.align	2
 2420              	.L137:
 2421 0010 FFDFFFFF 		.word	-8193
 2422              		.cfi_endproc
 2423              	.LFE84:
 2425              		.section	.text.TIM_SelectOCREFClear,"ax",%progbits
 2426              		.align	1
 2427              		.global	TIM_SelectOCREFClear
 2428              		.code	16
 2429              		.thumb_func
 2431              	TIM_SelectOCREFClear:
 2432              	.LFB85:
1878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2433              		.loc 1 1878 0
 2434              		.cfi_startproc
 2435              	.LVL270:
1884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 2436              		.loc 1 1884 0
 2437 0000 0389     		ldrh	r3, [r0, #8]
 2438 0002 0822     		mov	r2, #8
 2439 0004 9343     		bic	r3, r2
 2440 0006 0381     		strh	r3, [r0, #8]
1885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |=  TIM_OCReferenceClear;
 2441              		.loc 1 1885 0
 2442 0008 0389     		ldrh	r3, [r0, #8]
 2443              		@ sp needed for prologue
 2444 000a 1943     		orr	r1, r3
 2445              	.LVL271:
 2446 000c 0181     		strh	r1, [r0, #8]
1886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2447              		.loc 1 1886 0
 2448 000e 7047     		bx	lr
 2449              		.cfi_endproc
 2450              	.LFE85:
 2452              		.section	.text.TIM_CCxCmd,"ax",%progbits
 2453              		.align	1
 2454              		.global	TIM_CCxCmd
 2455              		.code	16
 2456              		.thumb_func
 2458              	TIM_CCxCmd:
 2459              	.LFB86:
1903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2460              		.loc 1 1903 0
 2461              		.cfi_startproc
 2462 0000 10B5     		push	{r4, lr}
 2463              	.LCFI15:
 2464              		.cfi_def_cfa_offset 8
 2465              		.cfi_offset 4, -8
 2466              		.cfi_offset 14, -4
 2467              	.LVL272:
1913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
 2468              		.loc 1 1913 0
 2469 0002 038C     		ldrh	r3, [r0, #32]
1910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = CCER_CCE_SET << TIM_Channel;
 2470              		.loc 1 1910 0
 2471 0004 0124     		mov	r4, #1
 2472 0006 8C40     		lsl	r4, r4, r1
1913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
 2473              		.loc 1 1913 0
 2474 0008 A343     		bic	r3, r4
 2475 000a 0384     		strh	r3, [r0, #32]
1916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 2476              		.loc 1 1916 0
 2477 000c 038C     		ldrh	r3, [r0, #32]
 2478 000e 8A40     		lsl	r2, r2, r1
 2479              	.LVL273:
 2480 0010 111C     		mov	r1, r2
 2481              	.LVL274:
 2482 0012 1943     		orr	r1, r3
 2483 0014 0184     		strh	r1, [r0, #32]
 2484              		@ sp needed for prologue
1917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2485              		.loc 1 1917 0
 2486 0016 10BD     		pop	{r4, pc}
 2487              		.cfi_endproc
 2488              	.LFE86:
 2490              		.section	.text.TIM_CCxNCmd,"ax",%progbits
 2491              		.align	1
 2492              		.global	TIM_CCxNCmd
 2493              		.code	16
 2494              		.thumb_func
 2496              	TIM_CCxNCmd:
 2497              	.LFB87:
1932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2498              		.loc 1 1932 0
 2499              		.cfi_startproc
 2500 0000 10B5     		push	{r4, lr}
 2501              	.LCFI16:
 2502              		.cfi_def_cfa_offset 8
 2503              		.cfi_offset 4, -8
 2504              		.cfi_offset 14, -4
 2505              	.LVL275:
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
 2506              		.loc 1 1943 0
 2507 0002 038C     		ldrh	r3, [r0, #32]
1940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = CCER_CCNE_SET << TIM_Channel;
 2508              		.loc 1 1940 0
 2509 0004 0424     		mov	r4, #4
 2510 0006 8C40     		lsl	r4, r4, r1
1943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
 2511              		.loc 1 1943 0
 2512 0008 A343     		bic	r3, r4
 2513 000a 0384     		strh	r3, [r0, #32]
1946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 2514              		.loc 1 1946 0
 2515 000c 038C     		ldrh	r3, [r0, #32]
 2516 000e 8A40     		lsl	r2, r2, r1
 2517              	.LVL276:
 2518 0010 111C     		mov	r1, r2
 2519              	.LVL277:
 2520 0012 1943     		orr	r1, r3
 2521 0014 0184     		strh	r1, [r0, #32]
 2522              		@ sp needed for prologue
1947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2523              		.loc 1 1947 0
 2524 0016 10BD     		pop	{r4, pc}
 2525              		.cfi_endproc
 2526              	.LFE87:
 2528              		.section	.text.TIM_SelectCOM,"ax",%progbits
 2529              		.align	1
 2530              		.global	TIM_SelectCOM
 2531              		.code	16
 2532              		.thumb_func
 2534              	TIM_SelectCOM:
 2535              	.LFB88:
1957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2536              		.loc 1 1957 0
 2537              		.cfi_startproc
 2538 0000 00B5     		push	{lr}
 2539              	.LCFI17:
 2540              		.cfi_def_cfa_offset 4
 2541              		.cfi_offset 14, -4
 2542              	.LVL278:
 2543 0002 0423     		mov	r3, #4
1964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
 2544              		.loc 1 1964 0
 2545 0004 8288     		ldrh	r2, [r0, #4]
1961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 2546              		.loc 1 1961 0
 2547 0006 0029     		cmp	r1, #0
 2548 0008 01D0     		beq	.L143
1964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
 2549              		.loc 1 1964 0
 2550 000a 1343     		orr	r3, r2
 2551 000c 01E0     		b	.L145
 2552              	.L143:
1969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 2553              		.loc 1 1969 0
 2554 000e 9A43     		bic	r2, r3
 2555 0010 131C     		mov	r3, r2
 2556              	.L145:
 2557 0012 8380     		strh	r3, [r0, #4]
 2558              		@ sp needed for prologue
1971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2559              		.loc 1 1971 0
 2560 0014 00BD     		pop	{pc}
 2561              		.cfi_endproc
 2562              	.LFE88:
 2564              		.section	.text.TIM_ICStructInit,"ax",%progbits
 2565              		.align	1
 2566              		.global	TIM_ICStructInit
 2567              		.code	16
 2568              		.thumb_func
 2570              	TIM_ICStructInit:
 2571              	.LFB90:
2092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2572              		.loc 1 2092 0
 2573              		.cfi_startproc
 2574              	.LVL279:
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 2575              		.loc 1 2094 0
 2576 0000 0023     		mov	r3, #0
2096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 2577              		.loc 1 2096 0
 2578 0002 0122     		mov	r2, #1
2094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 2579              		.loc 1 2094 0
 2580 0004 0380     		strh	r3, [r0]
2095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 2581              		.loc 1 2095 0
 2582 0006 4380     		strh	r3, [r0, #2]
2096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 2583              		.loc 1 2096 0
 2584 0008 8280     		strh	r2, [r0, #4]
2097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 2585              		.loc 1 2097 0
 2586 000a C380     		strh	r3, [r0, #6]
2098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
 2587              		.loc 1 2098 0
 2588 000c 0381     		strh	r3, [r0, #8]
 2589              		@ sp needed for prologue
2099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2590              		.loc 1 2099 0
 2591 000e 7047     		bx	lr
 2592              		.cfi_endproc
 2593              	.LFE90:
 2595              		.section	.text.TIM_GetCapture1,"ax",%progbits
 2596              		.align	1
 2597              		.global	TIM_GetCapture1
 2598              		.code	16
 2599              		.thumb_func
 2601              	TIM_GetCapture1:
 2602              	.LFB92:
2168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2603              		.loc 1 2168 0
 2604              		.cfi_startproc
 2605              	.LVL280:
2173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR1;
 2606              		.loc 1 2173 0
 2607 0000 406B     		ldr	r0, [r0, #52]
 2608              	.LVL281:
 2609              		@ sp needed for prologue
2174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2610              		.loc 1 2174 0
 2611 0002 7047     		bx	lr
 2612              		.cfi_endproc
 2613              	.LFE92:
 2615              		.section	.text.TIM_GetCapture2,"ax",%progbits
 2616              		.align	1
 2617              		.global	TIM_GetCapture2
 2618              		.code	16
 2619              		.thumb_func
 2621              	TIM_GetCapture2:
 2622              	.LFB93:
2182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2623              		.loc 1 2182 0
 2624              		.cfi_startproc
 2625              	.LVL282:
2187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR2;
 2626              		.loc 1 2187 0
 2627 0000 806B     		ldr	r0, [r0, #56]
 2628              	.LVL283:
 2629              		@ sp needed for prologue
2188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2630              		.loc 1 2188 0
 2631 0002 7047     		bx	lr
 2632              		.cfi_endproc
 2633              	.LFE93:
 2635              		.section	.text.TIM_GetCapture3,"ax",%progbits
 2636              		.align	1
 2637              		.global	TIM_GetCapture3
 2638              		.code	16
 2639              		.thumb_func
 2641              	TIM_GetCapture3:
 2642              	.LFB94:
2197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2643              		.loc 1 2197 0
 2644              		.cfi_startproc
 2645              	.LVL284:
2202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR3;
 2646              		.loc 1 2202 0
 2647 0000 C06B     		ldr	r0, [r0, #60]
 2648              	.LVL285:
 2649              		@ sp needed for prologue
2203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2650              		.loc 1 2203 0
 2651 0002 7047     		bx	lr
 2652              		.cfi_endproc
 2653              	.LFE94:
 2655              		.section	.text.TIM_GetCapture4,"ax",%progbits
 2656              		.align	1
 2657              		.global	TIM_GetCapture4
 2658              		.code	16
 2659              		.thumb_func
 2661              	TIM_GetCapture4:
 2662              	.LFB95:
2212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2663              		.loc 1 2212 0
 2664              		.cfi_startproc
 2665              	.LVL286:
2217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return TIMx->CCR4;
 2666              		.loc 1 2217 0
 2667 0000 006C     		ldr	r0, [r0, #64]
 2668              	.LVL287:
 2669              		@ sp needed for prologue
2218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2670              		.loc 1 2218 0
 2671 0002 7047     		bx	lr
 2672              		.cfi_endproc
 2673              	.LFE95:
 2675              		.section	.text.TIM_SetIC1Prescaler,"ax",%progbits
 2676              		.align	1
 2677              		.global	TIM_SetIC1Prescaler
 2678              		.code	16
 2679              		.thumb_func
 2681              	TIM_SetIC1Prescaler:
 2682              	.LFB96:
2233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2683              		.loc 1 2233 0
 2684              		.cfi_startproc
 2685              	.LVL288:
2239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 2686              		.loc 1 2239 0
 2687 0000 038B     		ldrh	r3, [r0, #24]
 2688 0002 0C22     		mov	r2, #12
 2689 0004 9343     		bic	r3, r2
 2690 0006 0383     		strh	r3, [r0, #24]
2241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= TIM_ICPSC;
 2691              		.loc 1 2241 0
 2692 0008 038B     		ldrh	r3, [r0, #24]
 2693              		@ sp needed for prologue
 2694 000a 1943     		orr	r1, r3
 2695              	.LVL289:
 2696 000c 0183     		strh	r1, [r0, #24]
2242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2697              		.loc 1 2242 0
 2698 000e 7047     		bx	lr
 2699              		.cfi_endproc
 2700              	.LFE96:
 2702              		.section	.text.TIM_SetIC2Prescaler,"ax",%progbits
 2703              		.align	1
 2704              		.global	TIM_SetIC2Prescaler
 2705              		.code	16
 2706              		.thumb_func
 2708              	TIM_SetIC2Prescaler:
 2709              	.LFB97:
2257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2710              		.loc 1 2257 0
 2711              		.cfi_startproc
 2712              	.LVL290:
2263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 2713              		.loc 1 2263 0
 2714 0000 028B     		ldrh	r2, [r0, #24]
 2715 0002 044B     		ldr	r3, .L153
2265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 2716              		.loc 1 2265 0
 2717 0004 0902     		lsl	r1, r1, #8
 2718              	.LVL291:
2263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 2719              		.loc 1 2263 0
 2720 0006 1340     		and	r3, r2
 2721 0008 0383     		strh	r3, [r0, #24]
2265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 2722              		.loc 1 2265 0
 2723 000a 038B     		ldrh	r3, [r0, #24]
 2724              		@ sp needed for prologue
 2725 000c 1943     		orr	r1, r3
 2726 000e 0183     		strh	r1, [r0, #24]
2266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2727              		.loc 1 2266 0
 2728 0010 7047     		bx	lr
 2729              	.L154:
 2730 0012 C046     		.align	2
 2731              	.L153:
 2732 0014 FFF3FFFF 		.word	-3073
 2733              		.cfi_endproc
 2734              	.LFE97:
 2736              		.section	.text.TIM_PWMIConfig,"ax",%progbits
 2737              		.align	1
 2738              		.global	TIM_PWMIConfig
 2739              		.code	16
 2740              		.thumb_func
 2742              	TIM_PWMIConfig:
 2743              	.LFB91:
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2744              		.loc 1 2112 0
 2745              		.cfi_startproc
 2746 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2747              	.LCFI18:
 2748              		.cfi_def_cfa_offset 24
 2749              		.cfi_offset 3, -24
 2750              		.cfi_offset 4, -20
 2751              		.cfi_offset 5, -16
 2752              		.cfi_offset 6, -12
 2753              		.cfi_offset 7, -8
 2754              		.cfi_offset 14, -4
 2755              	.LVL292:
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2756              		.loc 1 2112 0
 2757 0002 0C1C     		mov	r4, r1
2127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 2758              		.loc 1 2127 0
 2759 0004 A288     		ldrh	r2, [r4, #4]
2118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 2760              		.loc 1 2118 0
 2761 0006 4988     		ldrh	r1, [r1, #2]
 2762              	.LVL293:
2112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2763              		.loc 1 2112 0
 2764 0008 051C     		mov	r5, r0
2129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
 2765              		.loc 1 2129 0
 2766 000a 571E     		sub	r7, r2, #1
2135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 2767              		.loc 1 2135 0
 2768 000c 2088     		ldrh	r0, [r4]
 2769              	.LVL294:
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
 2770              		.loc 1 2120 0
 2771 000e 4E42     		neg	r6, r1
 2772 0010 4E41     		adc	r6, r6, r1
2129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
 2773              		.loc 1 2129 0
 2774 0012 7B1E     		sub	r3, r7, #1
 2775 0014 9F41     		sbc	r7, r7, r3
 2776 0016 0223     		mov	r3, #2
 2777 0018 DF1B     		sub	r7, r3, r7
2120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
 2778              		.loc 1 2120 0
 2779 001a 7600     		lsl	r6, r6, #1
 2780              	.LVL295:
 2781 001c 2389     		ldrh	r3, [r4, #8]
2135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 2782              		.loc 1 2135 0
 2783 001e 0028     		cmp	r0, #0
 2784 0020 11D1     		bne	.L158
2138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 2785              		.loc 1 2138 0
 2786 0022 281C     		mov	r0, r5
 2787 0024 FFF7FEFF 		bl	TI1_Config
2141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2788              		.loc 1 2141 0
 2789 0028 E188     		ldrh	r1, [r4, #6]
 2790 002a 281C     		mov	r0, r5
 2791 002c FFF7FEFF 		bl	TIM_SetIC1Prescaler
2143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 2792              		.loc 1 2143 0
 2793 0030 281C     		mov	r0, r5
 2794 0032 311C     		mov	r1, r6
 2795 0034 2389     		ldrh	r3, [r4, #8]
 2796 0036 3A1C     		mov	r2, r7
 2797 0038 FFF7FEFF 		bl	TI2_Config
2145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2798              		.loc 1 2145 0
 2799 003c E188     		ldrh	r1, [r4, #6]
 2800 003e 281C     		mov	r0, r5
 2801 0040 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 2802 0044 10E0     		b	.L155
 2803              	.L158:
2150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 2804              		.loc 1 2150 0
 2805 0046 281C     		mov	r0, r5
 2806 0048 FFF7FEFF 		bl	TI2_Config
2153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2807              		.loc 1 2153 0
 2808 004c E188     		ldrh	r1, [r4, #6]
 2809 004e 281C     		mov	r0, r5
 2810 0050 FFF7FEFF 		bl	TIM_SetIC2Prescaler
2155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 2811              		.loc 1 2155 0
 2812 0054 281C     		mov	r0, r5
 2813 0056 311C     		mov	r1, r6
 2814 0058 2389     		ldrh	r3, [r4, #8]
 2815 005a 3A1C     		mov	r2, r7
 2816 005c FFF7FEFF 		bl	TI1_Config
2157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2817              		.loc 1 2157 0
 2818 0060 E188     		ldrh	r1, [r4, #6]
 2819 0062 281C     		mov	r0, r5
 2820 0064 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2821              	.L155:
 2822              		@ sp needed for prologue
 2823              	.LVL296:
 2824              	.LVL297:
 2825              	.LVL298:
 2826              	.LVL299:
2159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2827              		.loc 1 2159 0
 2828 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2829              		.cfi_endproc
 2830              	.LFE91:
 2832              		.section	.text.TIM_SetIC3Prescaler,"ax",%progbits
 2833              		.align	1
 2834              		.global	TIM_SetIC3Prescaler
 2835              		.code	16
 2836              		.thumb_func
 2838              	TIM_SetIC3Prescaler:
 2839              	.LFB98:
2281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2840              		.loc 1 2281 0
 2841              		.cfi_startproc
 2842              	.LVL300:
2287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 2843              		.loc 1 2287 0
 2844 0000 838B     		ldrh	r3, [r0, #28]
 2845 0002 0C22     		mov	r2, #12
 2846 0004 9343     		bic	r3, r2
 2847 0006 8383     		strh	r3, [r0, #28]
2289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= TIM_ICPSC;
 2848              		.loc 1 2289 0
 2849 0008 838B     		ldrh	r3, [r0, #28]
 2850              		@ sp needed for prologue
 2851 000a 1943     		orr	r1, r3
 2852              	.LVL301:
 2853 000c 8183     		strh	r1, [r0, #28]
2290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2854              		.loc 1 2290 0
 2855 000e 7047     		bx	lr
 2856              		.cfi_endproc
 2857              	.LFE98:
 2859              		.section	.text.TIM_SetIC4Prescaler,"ax",%progbits
 2860              		.align	1
 2861              		.global	TIM_SetIC4Prescaler
 2862              		.code	16
 2863              		.thumb_func
 2865              	TIM_SetIC4Prescaler:
 2866              	.LFB99:
2305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
 2867              		.loc 1 2305 0
 2868              		.cfi_startproc
 2869              	.LVL302:
2311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 2870              		.loc 1 2311 0
 2871 0000 828B     		ldrh	r2, [r0, #28]
 2872 0002 044B     		ldr	r3, .L164
2313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 2873              		.loc 1 2313 0
 2874 0004 0902     		lsl	r1, r1, #8
 2875              	.LVL303:
2311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 2876              		.loc 1 2311 0
 2877 0006 1340     		and	r3, r2
 2878 0008 8383     		strh	r3, [r0, #28]
2313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 2879              		.loc 1 2313 0
 2880 000a 838B     		ldrh	r3, [r0, #28]
 2881              		@ sp needed for prologue
 2882 000c 1943     		orr	r1, r3
 2883 000e 8183     		strh	r1, [r0, #28]
2314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 2884              		.loc 1 2314 0
 2885 0010 7047     		bx	lr
 2886              	.L165:
 2887 0012 C046     		.align	2
 2888              	.L164:
 2889 0014 FFF3FFFF 		.word	-3073
 2890              		.cfi_endproc
 2891              	.LFE99:
 2893              		.section	.text.TIM_ICInit,"ax",%progbits
 2894              		.align	1
 2895              		.global	TIM_ICInit
 2896              		.code	16
 2897              		.thumb_func
 2899              	TIM_ICInit:
 2900              	.LFB89:
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2901              		.loc 1 2034 0
 2902              		.cfi_startproc
 2903 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2904              	.LCFI19:
 2905              		.cfi_def_cfa_offset 24
 2906              		.cfi_offset 3, -24
 2907              		.cfi_offset 4, -20
 2908              		.cfi_offset 5, -16
 2909              		.cfi_offset 6, -12
 2910              		.cfi_offset 7, -8
 2911              		.cfi_offset 14, -4
 2912              	.LVL304:
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2913              		.loc 1 2034 0
 2914 0002 041C     		mov	r4, r0
2043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 2915              		.loc 1 2043 0
 2916 0004 0888     		ldrh	r0, [r1]
 2917              	.LVL305:
2034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 2918              		.loc 1 2034 0
 2919 0006 0D1C     		mov	r5, r1
 2920 0008 AA88     		ldrh	r2, [r5, #4]
 2921 000a 4988     		ldrh	r1, [r1, #2]
 2922              	.LVL306:
 2923 000c 2B89     		ldrh	r3, [r5, #8]
2043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 2924              		.loc 1 2043 0
 2925 000e 0028     		cmp	r0, #0
 2926 0010 07D1     		bne	.L167
2047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 2927              		.loc 1 2047 0
 2928 0012 201C     		mov	r0, r4
 2929 0014 FFF7FEFF 		bl	TI1_Config
2051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2930              		.loc 1 2051 0
 2931 0018 E988     		ldrh	r1, [r5, #6]
 2932 001a 201C     		mov	r0, r4
 2933 001c FFF7FEFF 		bl	TIM_SetIC1Prescaler
 2934 0020 40E0     		b	.L166
 2935              	.L167:
2053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 2936              		.loc 1 2053 0
 2937 0022 0428     		cmp	r0, #4
 2938 0024 07D1     		bne	.L169
2057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 2939              		.loc 1 2057 0
 2940 0026 201C     		mov	r0, r4
 2941 0028 FFF7FEFF 		bl	TI2_Config
2061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 2942              		.loc 1 2061 0
 2943 002c E988     		ldrh	r1, [r5, #6]
 2944 002e 201C     		mov	r0, r4
 2945 0030 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 2946 0034 36E0     		b	.L166
 2947              	.L169:
 2948              	.LBB6:
 2949              	.LBB7:
3260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configure the TI3 as Input.
3263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.   
3265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 3 is selected to be connected to IC3.
3272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 3 is selected to be connected to IC4.
3273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 3 is selected to be connected to TRC.
3274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
3282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Disable the Channel 3: Reset the CC3E Bit */
3283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 2950              		.loc 1 3283 0
 2951 0036 268C     		ldrh	r6, [r4, #32]
 2952              	.LBE7:
 2953              	.LBE6:
2063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 2954              		.loc 1 2063 0
 2955 0038 0828     		cmp	r0, #8
 2956 003a 19D1     		bne	.L170
 2957              	.LVL307:
 2958              	.LBB9:
 2959              	.LBB8:
 2960              		.loc 1 3283 0
 2961 003c 1A48     		ldr	r0, .L171
 2962 003e 3040     		and	r0, r6
 2963 0040 2084     		strh	r0, [r4, #32]
3284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2964              		.loc 1 3284 0
 2965 0042 A78B     		ldrh	r7, [r4, #28]
 2966              	.LVL308:
3285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
3286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 8);
3287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2
 2967              		.loc 1 3288 0
 2968 0044 F326     		mov	r6, #243
 2969 0046 B743     		bic	r7, r6
 2970              	.LVL309:
3289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 2971              		.loc 1 3289 0
 2972 0048 1E01     		lsl	r6, r3, #4
3285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 2973              		.loc 1 3285 0
 2974 004a 208C     		ldrh	r0, [r4, #32]
 2975              	.LVL310:
 2976              		.loc 1 3289 0
 2977 004c 3743     		orr	r7, r6
3290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC3E Bit */
3291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 2978              		.loc 1 3291 0
 2979 004e 174E     		ldr	r6, .L171+4
3289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 2980              		.loc 1 3289 0
 2981 0050 BBB2     		uxth	r3, r7
 2982              	.LVL311:
 2983              		.loc 1 3291 0
 2984 0052 0640     		and	r6, r0
3286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 8);
 2985              		.loc 1 3286 0
 2986 0054 0F02     		lsl	r7, r1, #8
3292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 2987              		.loc 1 3292 0
 2988 0056 3E43     		orr	r6, r7
 2989 0058 8020     		mov	r0, #128
 2990              	.LVL312:
3289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 2991              		.loc 1 3289 0
 2992 005a 1A43     		orr	r2, r3
 2993              	.LVL313:
 2994              		.loc 1 3292 0
 2995 005c 4100     		lsl	r1, r0, #1
 2996              	.LVL314:
 2997 005e B3B2     		uxth	r3, r6
 2998 0060 1943     		orr	r1, r3
 2999              	.LVL315:
3293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
3294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3000              		.loc 1 3294 0
 3001 0062 A283     		strh	r2, [r4, #28]
3295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 3002              		.loc 1 3295 0
 3003 0064 2184     		strh	r1, [r4, #32]
 3004              	.LBE8:
 3005              	.LBE9:
2071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 3006              		.loc 1 2071 0
 3007 0066 E988     		ldrh	r1, [r5, #6]
 3008              	.LVL316:
 3009 0068 201C     		mov	r0, r4
 3010 006a FFF7FEFF 		bl	TIM_SetIC3Prescaler
 3011              	.LVL317:
 3012 006e 19E0     		b	.L166
 3013              	.LVL318:
 3014              	.L170:
 3015              	.LBB10:
 3016              	.LBB11:
3296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
3297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** /**
3299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @brief  Configure the TI4 as Input.
3300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIMx: where x can be 1, 2 or 3 to select the TIM peripheral.
3301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @note   TIM2 is not applicable for STM32F030 devices.  
3302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICPolarity: The Input Polarity.
3303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter can be one of the following values:
3308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 4 is selected to be connected to IC4.
3309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 4 is selected to be connected to IC3.
3310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 4 is selected to be connected to TRC.
3311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   * @retval None
3314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   */
3315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****                        uint16_t TIM_ICFilter)
3317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
3318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
3319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** 
3320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****    /* Disable the Channel 4: Reset the CC4E Bit */
3321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 3017              		.loc 1 3321 0
 3018 0070 0F48     		ldr	r0, .L171+8
3322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
3323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
3324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 12);
 3019              		.loc 1 3324 0
 3020 0072 0903     		lsl	r1, r1, #12
 3021              	.LVL319:
3321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 3022              		.loc 1 3321 0
 3023 0074 3040     		and	r0, r6
 3024 0076 2084     		strh	r0, [r4, #32]
3322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3025              		.loc 1 3322 0
 3026 0078 A78B     		ldrh	r7, [r4, #28]
 3027              	.LVL320:
3325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Input and set the filter */
3326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_I
 3028              		.loc 1 3326 0
 3029 007a 0E4E     		ldr	r6, .L171+12
3323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 3030              		.loc 1 3323 0
 3031 007c 208C     		ldrh	r0, [r4, #32]
 3032              	.LVL321:
 3033              		.loc 1 3326 0
 3034 007e 3740     		and	r7, r6
 3035              	.LVL322:
3327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 3036              		.loc 1 3327 0
 3037 0080 1602     		lsl	r6, r2, #8
 3038 0082 3743     		orr	r7, r6
 3039              	.LVL323:
3328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
3329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Select the Polarity and set the CC4E Bit */
3330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 3040              		.loc 1 3330 0
 3041 0084 0C4E     		ldr	r6, .L171+16
3327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 3042              		.loc 1 3327 0
 3043 0086 BAB2     		uxth	r2, r7
 3044              	.LVL324:
 3045              		.loc 1 3330 0
 3046 0088 0640     		and	r6, r0
3331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 3047              		.loc 1 3331 0
 3048 008a 0E43     		orr	r6, r1
3328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 3049              		.loc 1 3328 0
 3050 008c 1B03     		lsl	r3, r3, #12
 3051              	.LVL325:
 3052              		.loc 1 3331 0
 3053 008e 8027     		mov	r7, #128
3328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 3054              		.loc 1 3328 0
 3055 0090 1343     		orr	r3, r2
 3056              	.LVL326:
 3057              		.loc 1 3331 0
 3058 0092 7901     		lsl	r1, r7, #5
 3059 0094 B2B2     		uxth	r2, r6
 3060 0096 1143     		orr	r1, r2
 3061              	.LVL327:
3332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
3333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3062              		.loc 1 3333 0
 3063 0098 A383     		strh	r3, [r4, #28]
3334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 3064              		.loc 1 3334 0
 3065 009a 2184     		strh	r1, [r4, #32]
 3066              	.LBE11:
 3067              	.LBE10:
2081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 3068              		.loc 1 2081 0
 3069 009c E988     		ldrh	r1, [r5, #6]
 3070              	.LVL328:
 3071 009e 201C     		mov	r0, r4
 3072 00a0 FFF7FEFF 		bl	TIM_SetIC4Prescaler
 3073              	.LVL329:
 3074              	.L166:
 3075              		@ sp needed for prologue
 3076              	.LVL330:
 3077              	.LVL331:
2083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3078              		.loc 1 2083 0
 3079 00a4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3080              	.L172:
 3081 00a6 C046     		.align	2
 3082              	.L171:
 3083 00a8 FFFEFFFF 		.word	-257
 3084 00ac FFF5FFFF 		.word	-2561
 3085 00b0 FFEFFFFF 		.word	-4097
 3086 00b4 FF0C0000 		.word	3327
 3087 00b8 FF5F0000 		.word	24575
 3088              		.cfi_endproc
 3089              	.LFE89:
 3091              		.section	.text.TIM_ITConfig,"ax",%progbits
 3092              		.align	1
 3093              		.global	TIM_ITConfig
 3094              		.code	16
 3095              		.thumb_func
 3097              	TIM_ITConfig:
 3098              	.LFB100:
2360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
 3099              		.loc 1 2360 0
 3100              		.cfi_startproc
 3101 0000 00B5     		push	{lr}
 3102              	.LCFI20:
 3103              		.cfi_def_cfa_offset 4
 3104              		.cfi_offset 14, -4
 3105              	.LVL332:
2369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_IT;
 3106              		.loc 1 2369 0
 3107 0002 8389     		ldrh	r3, [r0, #12]
2366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 3108              		.loc 1 2366 0
 3109 0004 002A     		cmp	r2, #0
 3110 0006 02D0     		beq	.L174
2369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_IT;
 3111              		.loc 1 2369 0
 3112 0008 1943     		orr	r1, r3
 3113              	.LVL333:
 3114 000a 8181     		strh	r1, [r0, #12]
 3115 000c 01E0     		b	.L173
 3116              	.LVL334:
 3117              	.L174:
2374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_IT;
 3118              		.loc 1 2374 0
 3119 000e 8B43     		bic	r3, r1
 3120 0010 8381     		strh	r3, [r0, #12]
 3121              	.LVL335:
 3122              	.L173:
 3123              		@ sp needed for prologue
2376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3124              		.loc 1 2376 0
 3125 0012 00BD     		pop	{pc}
 3126              		.cfi_endproc
 3127              	.LFE100:
 3129              		.section	.text.TIM_GenerateEvent,"ax",%progbits
 3130              		.align	1
 3131              		.global	TIM_GenerateEvent
 3132              		.code	16
 3133              		.thumb_func
 3135              	TIM_GenerateEvent:
 3136              	.LFB101:
2402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
 3137              		.loc 1 2402 0
 3138              		.cfi_startproc
 3139              	.LVL336:
2407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->EGR = TIM_EventSource;
 3140              		.loc 1 2407 0
 3141 0000 8182     		strh	r1, [r0, #20]
 3142              		@ sp needed for prologue
2408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3143              		.loc 1 2408 0
 3144 0002 7047     		bx	lr
 3145              		.cfi_endproc
 3146              	.LFE101:
 3148              		.section	.text.TIM_GetFlagStatus,"ax",%progbits
 3149              		.align	1
 3150              		.global	TIM_GetFlagStatus
 3151              		.code	16
 3152              		.thumb_func
 3154              	TIM_GetFlagStatus:
 3155              	.LFB102:
2440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
 3156              		.loc 1 2440 0
 3157              		.cfi_startproc
 3158              	.LVL337:
2447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 3159              		.loc 1 2447 0
 3160 0000 008A     		ldrh	r0, [r0, #16]
 3161              	.LVL338:
 3162              		@ sp needed for prologue
2449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     bitstatus = SET;
 3163              		.loc 1 2449 0
 3164 0002 0840     		and	r0, r1
 3165              	.LVL339:
2455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return bitstatus;
 3166              		.loc 1 2455 0
 3167 0004 431E     		sub	r3, r0, #1
 3168 0006 9841     		sbc	r0, r0, r3
2456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3169              		.loc 1 2456 0
 3170 0008 7047     		bx	lr
 3171              		.cfi_endproc
 3172              	.LFE102:
 3174              		.section	.text.TIM_ClearFlag,"ax",%progbits
 3175              		.align	1
 3176              		.global	TIM_ClearFlag
 3177              		.code	16
 3178              		.thumb_func
 3180              	TIM_ClearFlag:
 3181              	.LFB103:
2489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {  
 3182              		.loc 1 2489 0
 3183              		.cfi_startproc
 3184              	.LVL340:
2495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_FLAG;
 3185              		.loc 1 2495 0
 3186 0000 C943     		mvn	r1, r1
 3187              	.LVL341:
 3188 0002 0182     		strh	r1, [r0, #16]
 3189              		@ sp needed for prologue
2496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3190              		.loc 1 2496 0
 3191 0004 7047     		bx	lr
 3192              		.cfi_endproc
 3193              	.LFE103:
 3195              		.section	.text.TIM_GetITStatus,"ax",%progbits
 3196              		.align	1
 3197              		.global	TIM_GetITStatus
 3198              		.code	16
 3199              		.thumb_func
 3201              	TIM_GetITStatus:
 3202              	.LFB104:
2524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3203              		.loc 1 2524 0
 3204              		.cfi_startproc
 3205              	.LVL342:
2532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   itstatus = TIMx->SR & TIM_IT;
 3206              		.loc 1 2532 0
 3207 0000 028A     		ldrh	r2, [r0, #16]
 3208              	.LVL343:
2534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   itenable = TIMx->DIER & TIM_IT;
 3209              		.loc 1 2534 0
 3210 0002 8389     		ldrh	r3, [r0, #12]
 3211              	.LVL344:
 3212              		@ sp needed for prologue
2535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 3213              		.loc 1 2535 0
 3214 0004 0B40     		and	r3, r1
 3215              	.LVL345:
 3216 0006 581E     		sub	r0, r3, #1
 3217 0008 8341     		sbc	r3, r3, r0
 3218              	.LVL346:
 3219 000a 101C     		mov	r0, r2
 3220 000c 0840     		and	r0, r1
 3221 000e 411E     		sub	r1, r0, #1
 3222 0010 8841     		sbc	r0, r0, r1
 3223              	.LVL347:
2543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   return bitstatus;
 3224              		.loc 1 2543 0
 3225 0012 1840     		and	r0, r3
2544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3226              		.loc 1 2544 0
 3227 0014 7047     		bx	lr
 3228              		.cfi_endproc
 3229              	.LFE104:
 3231              		.section	.text.TIM_ClearITPendingBit,"ax",%progbits
 3232              		.align	1
 3233              		.global	TIM_ClearITPendingBit
 3234              		.code	16
 3235              		.thumb_func
 3237              	TIM_ClearITPendingBit:
 3238              	.LFB105:
2572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3239              		.loc 1 2572 0
 3240              		.cfi_startproc
 3241              	.LVL348:
2578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_IT;
 3242              		.loc 1 2578 0
 3243 0000 C943     		mvn	r1, r1
 3244              	.LVL349:
 3245 0002 0182     		strh	r1, [r0, #16]
 3246              		@ sp needed for prologue
2579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3247              		.loc 1 2579 0
 3248 0004 7047     		bx	lr
 3249              		.cfi_endproc
 3250              	.LFE105:
 3252              		.section	.text.TIM_DMAConfig,"ax",%progbits
 3253              		.align	1
 3254              		.global	TIM_DMAConfig
 3255              		.code	16
 3256              		.thumb_func
 3258              	TIM_DMAConfig:
 3259              	.LFB106:
2610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3260              		.loc 1 2610 0
 3261              		.cfi_startproc
 3262              	.LVL350:
2616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 3263              		.loc 1 2616 0
 3264 0000 1143     		orr	r1, r2
 3265              	.LVL351:
 3266 0002 4830     		add	r0, r0, #72
 3267              	.LVL352:
 3268 0004 0180     		strh	r1, [r0]
 3269              		@ sp needed for prologue
2617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3270              		.loc 1 2617 0
 3271 0006 7047     		bx	lr
 3272              		.cfi_endproc
 3273              	.LFE106:
 3275              		.section	.text.TIM_DMACmd,"ax",%progbits
 3276              		.align	1
 3277              		.global	TIM_DMACmd
 3278              		.code	16
 3279              		.thumb_func
 3281              	TIM_DMACmd:
 3282              	.LFB107:
2639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** { 
 3283              		.loc 1 2639 0
 3284              		.cfi_startproc
 3285 0000 00B5     		push	{lr}
 3286              	.LCFI21:
 3287              		.cfi_def_cfa_offset 4
 3288              		.cfi_offset 14, -4
 3289              	.LVL353:
2648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_DMASource; 
 3290              		.loc 1 2648 0
 3291 0002 8389     		ldrh	r3, [r0, #12]
2645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 3292              		.loc 1 2645 0
 3293 0004 002A     		cmp	r2, #0
 3294 0006 02D0     		beq	.L183
2648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER |= TIM_DMASource; 
 3295              		.loc 1 2648 0
 3296 0008 1943     		orr	r1, r3
 3297              	.LVL354:
 3298 000a 8181     		strh	r1, [r0, #12]
 3299 000c 01E0     		b	.L182
 3300              	.LVL355:
 3301              	.L183:
2653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_DMASource;
 3302              		.loc 1 2653 0
 3303 000e 8B43     		bic	r3, r1
 3304 0010 8381     		strh	r3, [r0, #12]
 3305              	.LVL356:
 3306              	.L182:
 3307              		@ sp needed for prologue
2655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3308              		.loc 1 2655 0
 3309 0012 00BD     		pop	{pc}
 3310              		.cfi_endproc
 3311              	.LFE107:
 3313              		.section	.text.TIM_SelectCCDMA,"ax",%progbits
 3314              		.align	1
 3315              		.global	TIM_SelectCCDMA
 3316              		.code	16
 3317              		.thumb_func
 3319              	TIM_SelectCCDMA:
 3320              	.LFB108:
2666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3321              		.loc 1 2666 0
 3322              		.cfi_startproc
 3323 0000 00B5     		push	{lr}
 3324              	.LCFI22:
 3325              		.cfi_def_cfa_offset 4
 3326              		.cfi_offset 14, -4
 3327              	.LVL357:
 3328 0002 0823     		mov	r3, #8
2674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
 3329              		.loc 1 2674 0
 3330 0004 8288     		ldrh	r2, [r0, #4]
2671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 3331              		.loc 1 2671 0
 3332 0006 0029     		cmp	r1, #0
 3333 0008 01D0     		beq	.L186
2674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
 3334              		.loc 1 2674 0
 3335 000a 1343     		orr	r3, r2
 3336 000c 01E0     		b	.L188
 3337              	.L186:
2679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 3338              		.loc 1 2679 0
 3339 000e 9A43     		bic	r2, r3
 3340 0010 131C     		mov	r3, r2
 3341              	.L188:
 3342 0012 8380     		strh	r3, [r0, #4]
 3343              		@ sp needed for prologue
2681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3344              		.loc 1 2681 0
 3345 0014 00BD     		pop	{pc}
 3346              		.cfi_endproc
 3347              	.LFE108:
 3349              		.section	.text.TIM_InternalClockConfig,"ax",%progbits
 3350              		.align	1
 3351              		.global	TIM_InternalClockConfig
 3352              		.code	16
 3353              		.thumb_func
 3355              	TIM_InternalClockConfig:
 3356              	.LFB109:
2706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3357              		.loc 1 2706 0
 3358              		.cfi_startproc
 3359              	.LVL358:
2710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 3360              		.loc 1 2710 0
 3361 0000 0389     		ldrh	r3, [r0, #8]
 3362 0002 0722     		mov	r2, #7
 3363 0004 9343     		bic	r3, r2
 3364 0006 0381     		strh	r3, [r0, #8]
 3365              		@ sp needed for prologue
2711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3366              		.loc 1 2711 0
 3367 0008 7047     		bx	lr
 3368              		.cfi_endproc
 3369              	.LFE109:
 3371              		.section	.text.TIM_SelectInputTrigger,"ax",%progbits
 3372              		.align	1
 3373              		.global	TIM_SelectInputTrigger
 3374              		.code	16
 3375              		.thumb_func
 3377              	TIM_SelectInputTrigger:
 3378              	.LFB114:
2906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3379              		.loc 1 2906 0
 3380              		.cfi_startproc
 3381              	.LVL359:
2914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 3382              		.loc 1 2914 0
 3383 0000 0389     		ldrh	r3, [r0, #8]
 3384              	.LVL360:
2916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 3385              		.loc 1 2916 0
 3386 0002 7022     		mov	r2, #112
 3387 0004 9343     		bic	r3, r2
 3388              	.LVL361:
2918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
 3389              		.loc 1 2918 0
 3390 0006 1943     		orr	r1, r3
 3391              	.LVL362:
2920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 3392              		.loc 1 2920 0
 3393 0008 0181     		strh	r1, [r0, #8]
 3394              		@ sp needed for prologue
2921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3395              		.loc 1 2921 0
 3396 000a 7047     		bx	lr
 3397              		.cfi_endproc
 3398              	.LFE114:
 3400              		.section	.text.TIM_TIxExternalClockConfig,"ax",%progbits
 3401              		.align	1
 3402              		.global	TIM_TIxExternalClockConfig
 3403              		.code	16
 3404              		.thumb_func
 3406              	TIM_TIxExternalClockConfig:
 3407              	.LFB111:
2755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3408              		.loc 1 2755 0
 3409              		.cfi_startproc
 3410 0000 38B5     		push	{r3, r4, r5, lr}
 3411              	.LCFI23:
 3412              		.cfi_def_cfa_offset 16
 3413              		.cfi_offset 3, -16
 3414              		.cfi_offset 4, -12
 3415              		.cfi_offset 5, -8
 3416              		.cfi_offset 14, -4
 3417              	.LVL363:
2755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3418              		.loc 1 2755 0
 3419 0002 0D1C     		mov	r5, r1
 3420 0004 041C     		mov	r4, r0
 3421 0006 111C     		mov	r1, r2
 3422              	.LVL364:
2764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 3423              		.loc 1 2764 0
 3424 0008 0122     		mov	r2, #1
 3425              	.LVL365:
2762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 3426              		.loc 1 2762 0
 3427 000a 602D     		cmp	r5, #96
 3428 000c 02D1     		bne	.L192
2764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 3429              		.loc 1 2764 0
 3430 000e FFF7FEFF 		bl	TI2_Config
 3431              	.LVL366:
 3432 0012 01E0     		b	.L193
 3433              	.LVL367:
 3434              	.L192:
2768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 3435              		.loc 1 2768 0
 3436 0014 FFF7FEFF 		bl	TI1_Config
 3437              	.LVL368:
 3438              	.L193:
2771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 3439              		.loc 1 2771 0
 3440 0018 291C     		mov	r1, r5
 3441 001a 201C     		mov	r0, r4
 3442 001c FFF7FEFF 		bl	TIM_SelectInputTrigger
2773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
 3443              		.loc 1 2773 0
 3444 0020 2389     		ldrh	r3, [r4, #8]
 3445 0022 0722     		mov	r2, #7
 3446 0024 1343     		orr	r3, r2
 3447 0026 2381     		strh	r3, [r4, #8]
 3448              		@ sp needed for prologue
 3449              	.LVL369:
2774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3450              		.loc 1 2774 0
 3451 0028 38BD     		pop	{r3, r4, r5, pc}
 3452              		.cfi_endproc
 3453              	.LFE111:
 3455              		.section	.text.TIM_ITRxExternalClockConfig,"ax",%progbits
 3456              		.align	1
 3457              		.global	TIM_ITRxExternalClockConfig
 3458              		.code	16
 3459              		.thumb_func
 3461              	TIM_ITRxExternalClockConfig:
 3462              	.LFB110:
2726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3463              		.loc 1 2726 0
 3464              		.cfi_startproc
 3465 0000 10B5     		push	{r4, lr}
 3466              	.LCFI24:
 3467              		.cfi_def_cfa_offset 8
 3468              		.cfi_offset 4, -8
 3469              		.cfi_offset 14, -4
 3470              	.LVL370:
2726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3471              		.loc 1 2726 0
 3472 0002 041C     		mov	r4, r0
2731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 3473              		.loc 1 2731 0
 3474 0004 FFF7FEFF 		bl	TIM_SelectInputTrigger
 3475              	.LVL371:
2733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
 3476              		.loc 1 2733 0
 3477 0008 2389     		ldrh	r3, [r4, #8]
 3478 000a 0722     		mov	r2, #7
 3479 000c 1343     		orr	r3, r2
 3480 000e 2381     		strh	r3, [r4, #8]
 3481              		@ sp needed for prologue
 3482              	.LVL372:
2734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3483              		.loc 1 2734 0
 3484 0010 10BD     		pop	{r4, pc}
 3485              		.cfi_endproc
 3486              	.LFE110:
 3488              		.section	.text.TIM_SelectOutputTrigger,"ax",%progbits
 3489              		.align	1
 3490              		.global	TIM_SelectOutputTrigger
 3491              		.code	16
 3492              		.thumb_func
 3494              	TIM_SelectOutputTrigger:
 3495              	.LFB115:
2948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3496              		.loc 1 2948 0
 3497              		.cfi_startproc
 3498              	.LVL373:
2954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 3499              		.loc 1 2954 0
 3500 0000 8388     		ldrh	r3, [r0, #4]
 3501 0002 7022     		mov	r2, #112
 3502 0004 9343     		bic	r3, r2
 3503 0006 8380     		strh	r3, [r0, #4]
2956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CR2 |=  TIM_TRGOSource;
 3504              		.loc 1 2956 0
 3505 0008 8388     		ldrh	r3, [r0, #4]
 3506              		@ sp needed for prologue
 3507 000a 1943     		orr	r1, r3
 3508              	.LVL374:
 3509 000c 8180     		strh	r1, [r0, #4]
2957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3510              		.loc 1 2957 0
 3511 000e 7047     		bx	lr
 3512              		.cfi_endproc
 3513              	.LFE115:
 3515              		.section	.text.TIM_SelectSlaveMode,"ax",%progbits
 3516              		.align	1
 3517              		.global	TIM_SelectSlaveMode
 3518              		.code	16
 3519              		.thumb_func
 3521              	TIM_SelectSlaveMode:
 3522              	.LFB116:
2973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3523              		.loc 1 2973 0
 3524              		.cfi_startproc
 3525              	.LVL375:
2979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 3526              		.loc 1 2979 0
 3527 0000 0389     		ldrh	r3, [r0, #8]
 3528 0002 0722     		mov	r2, #7
 3529 0004 9343     		bic	r3, r2
 3530 0006 0381     		strh	r3, [r0, #8]
2981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode;
 3531              		.loc 1 2981 0
 3532 0008 0389     		ldrh	r3, [r0, #8]
 3533              		@ sp needed for prologue
 3534 000a 1943     		orr	r1, r3
 3535              	.LVL376:
 3536 000c 0181     		strh	r1, [r0, #8]
2982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3537              		.loc 1 2982 0
 3538 000e 7047     		bx	lr
 3539              		.cfi_endproc
 3540              	.LFE116:
 3542              		.section	.text.TIM_SelectMasterSlaveMode,"ax",%progbits
 3543              		.align	1
 3544              		.global	TIM_SelectMasterSlaveMode
 3545              		.code	16
 3546              		.thumb_func
 3548              	TIM_SelectMasterSlaveMode:
 3549              	.LFB117:
2996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3550              		.loc 1 2996 0
 3551              		.cfi_startproc
 3552              	.LVL377:
3002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 3553              		.loc 1 3002 0
 3554 0000 0389     		ldrh	r3, [r0, #8]
 3555 0002 8022     		mov	r2, #128
 3556 0004 9343     		bic	r3, r2
 3557 0006 0381     		strh	r3, [r0, #8]
3005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_MasterSlaveMode;
 3558              		.loc 1 3005 0
 3559 0008 0389     		ldrh	r3, [r0, #8]
 3560              		@ sp needed for prologue
 3561 000a 1943     		orr	r1, r3
 3562              	.LVL378:
 3563 000c 0181     		strh	r1, [r0, #8]
3006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3564              		.loc 1 3006 0
 3565 000e 7047     		bx	lr
 3566              		.cfi_endproc
 3567              	.LFE117:
 3569              		.section	.text.TIM_ETRConfig,"ax",%progbits
 3570              		.align	1
 3571              		.global	TIM_ETRConfig
 3572              		.code	16
 3573              		.thumb_func
 3575              	TIM_ETRConfig:
 3576              	.LFB118:
3028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3577              		.loc 1 3028 0
 3578              		.cfi_startproc
 3579 0000 10B5     		push	{r4, lr}
 3580              	.LCFI25:
 3581              		.cfi_def_cfa_offset 8
 3582              		.cfi_offset 4, -8
 3583              		.cfi_offset 14, -4
 3584              	.LVL379:
3037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 3585              		.loc 1 3037 0
 3586 0002 0489     		ldrh	r4, [r0, #8]
 3587              	.LVL380:
3041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
 3588              		.loc 1 3041 0
 3589 0004 1B02     		lsl	r3, r3, #8
 3590              	.LVL381:
3039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= SMCR_ETR_MASK;
 3591              		.loc 1 3039 0
 3592 0006 E4B2     		uxtb	r4, r4
 3593              	.LVL382:
3041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
 3594              		.loc 1 3041 0
 3595 0008 2143     		orr	r1, r4
 3596              	.LVL383:
 3597 000a 0A43     		orr	r2, r1
 3598              	.LVL384:
 3599 000c 1A43     		orr	r2, r3
 3600              	.LVL385:
3043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 3601              		.loc 1 3043 0
 3602 000e 0281     		strh	r2, [r0, #8]
 3603              		@ sp needed for prologue
3044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3604              		.loc 1 3044 0
 3605 0010 10BD     		pop	{r4, pc}
 3606              		.cfi_endproc
 3607              	.LFE118:
 3609              		.section	.text.TIM_ETRClockMode2Config,"ax",%progbits
 3610              		.align	1
 3611              		.global	TIM_ETRClockMode2Config
 3612              		.code	16
 3613              		.thumb_func
 3615              	TIM_ETRClockMode2Config:
 3616              	.LFB113:
2841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3617              		.loc 1 2841 0
 3618              		.cfi_startproc
 3619 0000 10B5     		push	{r4, lr}
 3620              	.LCFI26:
 3621              		.cfi_def_cfa_offset 8
 3622              		.cfi_offset 4, -8
 3623              		.cfi_offset 14, -4
 3624              	.LVL386:
2841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3625              		.loc 1 2841 0
 3626 0002 041C     		mov	r4, r0
2849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 3627              		.loc 1 2849 0
 3628 0004 FFF7FEFF 		bl	TIM_ETRConfig
 3629              	.LVL387:
2851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR |= TIM_SMCR_ECE;
 3630              		.loc 1 2851 0
 3631 0008 2289     		ldrh	r2, [r4, #8]
 3632 000a 8020     		mov	r0, #128
 3633 000c C301     		lsl	r3, r0, #7
 3634 000e 1343     		orr	r3, r2
 3635 0010 2381     		strh	r3, [r4, #8]
 3636              		@ sp needed for prologue
 3637              	.LVL388:
2852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3638              		.loc 1 2852 0
 3639 0012 10BD     		pop	{r4, pc}
 3640              		.cfi_endproc
 3641              	.LFE113:
 3643              		.section	.text.TIM_ETRClockMode1Config,"ax",%progbits
 3644              		.align	1
 3645              		.global	TIM_ETRClockMode1Config
 3646              		.code	16
 3647              		.thumb_func
 3649              	TIM_ETRClockMode1Config:
 3650              	.LFB112:
2796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3651              		.loc 1 2796 0
 3652              		.cfi_startproc
 3653 0000 10B5     		push	{r4, lr}
 3654              	.LCFI27:
 3655              		.cfi_def_cfa_offset 8
 3656              		.cfi_offset 4, -8
 3657              		.cfi_offset 14, -4
 3658              	.LVL389:
2796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3659              		.loc 1 2796 0
 3660 0002 041C     		mov	r4, r0
2806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 3661              		.loc 1 2806 0
 3662 0004 FFF7FEFF 		bl	TIM_ETRConfig
 3663              	.LVL390:
2809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 3664              		.loc 1 2809 0
 3665 0008 2089     		ldrh	r0, [r4, #8]
 3666              	.LVL391:
2811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 3667              		.loc 1 2811 0
 3668 000a 0722     		mov	r2, #7
 3669 000c 9043     		bic	r0, r2
 3670              	.LVL392:
2813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_SlaveMode_External1;
 3671              		.loc 1 2813 0
 3672 000e 0243     		orr	r2, r0
 3673              	.LVL393:
2815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 3674              		.loc 1 2815 0
 3675 0010 7023     		mov	r3, #112
 3676 0012 9A43     		bic	r2, r3
 3677              	.LVL394:
2816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_TS_ETRF;
 3678              		.loc 1 2816 0
 3679 0014 1343     		orr	r3, r2
 3680              	.LVL395:
2818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 3681              		.loc 1 2818 0
 3682 0016 2381     		strh	r3, [r4, #8]
 3683              		@ sp needed for prologue
 3684              	.LVL396:
2819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3685              		.loc 1 2819 0
 3686 0018 10BD     		pop	{r4, pc}
 3687              		.cfi_endproc
 3688              	.LFE112:
 3690              		.section	.text.TIM_EncoderInterfaceConfig,"ax",%progbits
 3691              		.align	1
 3692              		.global	TIM_EncoderInterfaceConfig
 3693              		.code	16
 3694              		.thumb_func
 3696              	TIM_EncoderInterfaceConfig:
 3697              	.LFB119:
3084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3698              		.loc 1 3084 0
 3699              		.cfi_startproc
 3700 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3701              	.LCFI28:
 3702              		.cfi_def_cfa_offset 20
 3703              		.cfi_offset 4, -20
 3704              		.cfi_offset 5, -16
 3705              		.cfi_offset 6, -12
 3706              		.cfi_offset 7, -8
 3707              		.cfi_offset 14, -4
 3708              	.LVL397:
3096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 3709              		.loc 1 3096 0
 3710 0002 0489     		ldrh	r4, [r0, #8]
 3711              	.LVL398:
3102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 3712              		.loc 1 3102 0
 3713 0004 0727     		mov	r7, #7
 3714 0006 BC43     		bic	r4, r7
 3715              	.LVL399:
3098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3716              		.loc 1 3098 0
 3717 0008 068B     		ldrh	r6, [r0, #24]
 3718              	.LVL400:
3103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpsmcr |= TIM_EncoderMode;
 3719              		.loc 1 3103 0
 3720 000a 2143     		orr	r1, r4
 3721              	.LVL401:
3105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1
 3722              		.loc 1 3105 0
 3723 000c 064C     		ldr	r4, .L202
3100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer = TIMx->CCER;
 3724              		.loc 1 3100 0
 3725 000e 058C     		ldrh	r5, [r0, #32]
 3726              	.LVL402:
3105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1
 3727              		.loc 1 3105 0
 3728 0010 3440     		and	r4, r6
 3729              	.LVL403:
3108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_C
 3730              		.loc 1 3108 0
 3731 0012 AA26     		mov	r6, #170
 3732 0014 B543     		bic	r5, r6
 3733              	.LVL404:
3106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 3734              		.loc 1 3106 0
 3735 0016 054F     		ldr	r7, .L202+4
3109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 3736              		.loc 1 3109 0
 3737 0018 2A43     		orr	r2, r5
 3738              	.LVL405:
 3739 001a 1B01     		lsl	r3, r3, #4
 3740              	.LVL406:
3106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 3741              		.loc 1 3106 0
 3742 001c 3C43     		orr	r4, r7
 3743              	.LVL407:
3109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 3744              		.loc 1 3109 0
 3745 001e 1A43     		orr	r2, r3
 3746              	.LVL408:
3111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 3747              		.loc 1 3111 0
 3748 0020 0181     		strh	r1, [r0, #8]
 3749              		@ sp needed for prologue
3113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3750              		.loc 1 3113 0
 3751 0022 0483     		strh	r4, [r0, #24]
3115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->CCER = tmpccer;
 3752              		.loc 1 3115 0
 3753 0024 0284     		strh	r2, [r0, #32]
 3754              	.LVL409:
3116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3755              		.loc 1 3116 0
 3756 0026 F0BD     		pop	{r4, r5, r6, r7, pc}
 3757              	.L203:
 3758              		.align	2
 3759              	.L202:
 3760 0028 FCFCFFFF 		.word	-772
 3761 002c 01010000 		.word	257
 3762              		.cfi_endproc
 3763              	.LFE119:
 3765              		.section	.text.TIM_SelectHallSensor,"ax",%progbits
 3766              		.align	1
 3767              		.global	TIM_SelectHallSensor
 3768              		.code	16
 3769              		.thumb_func
 3771              	TIM_SelectHallSensor:
 3772              	.LFB120:
3127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3773              		.loc 1 3127 0
 3774              		.cfi_startproc
 3775 0000 00B5     		push	{lr}
 3776              	.LCFI29:
 3777              		.cfi_def_cfa_offset 4
 3778              		.cfi_offset 14, -4
 3779              	.LVL410:
 3780 0002 8023     		mov	r3, #128
3135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
 3781              		.loc 1 3135 0
 3782 0004 8288     		ldrh	r2, [r0, #4]
3132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   if (NewState != DISABLE)
 3783              		.loc 1 3132 0
 3784 0006 0029     		cmp	r1, #0
 3785 0008 01D0     		beq	.L205
3135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
 3786              		.loc 1 3135 0
 3787 000a 1343     		orr	r3, r2
 3788 000c 01E0     		b	.L207
 3789              	.L205:
3140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 3790              		.loc 1 3140 0
 3791 000e 9A43     		bic	r2, r3
 3792 0010 131C     		mov	r3, r2
 3793              	.L207:
 3794 0012 8380     		strh	r3, [r0, #4]
 3795              		@ sp needed for prologue
3142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3796              		.loc 1 3142 0
 3797 0014 00BD     		pop	{pc}
 3798              		.cfi_endproc
 3799              	.LFE120:
 3801              		.section	.text.TIM_RemapConfig,"ax",%progbits
 3802              		.align	1
 3803              		.global	TIM_RemapConfig
 3804              		.code	16
 3805              		.thumb_func
 3807              	TIM_RemapConfig:
 3808              	.LFB121:
3173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** {
 3809              		.loc 1 3173 0
 3810              		.cfi_startproc
 3811              	.LVL411:
3179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c ****   TIMx->OR =  TIM_Remap;
 3812              		.loc 1 3179 0
 3813 0000 5030     		add	r0, r0, #80
 3814              	.LVL412:
 3815 0002 0180     		strh	r1, [r0]
 3816              		@ sp needed for prologue
3180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_tim.c **** }
 3817              		.loc 1 3180 0
 3818 0004 7047     		bx	lr
 3819              		.cfi_endproc
 3820              	.LFE121:
 3822              		.text
 3823              	.Letext0:
 3824              		.file 2 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 3825              		.file 3 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/stm32f
 3826              		.file 4 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\ST
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_tim.c
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:18     .text.TI1_Config:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:22     .text.TI1_Config:00000000 TI1_Config
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:80     .text.TI2_Config:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:84     .text.TI2_Config:00000000 TI2_Config
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:150    .text.TI2_Config:00000030 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:155    .text.TIM_DeInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:160    .text.TIM_DeInit:00000000 TIM_DeInit
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:317    .text.TIM_DeInit:000000c8 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:329    .text.TIM_TimeBaseInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:334    .text.TIM_TimeBaseInit:00000000 TIM_TimeBaseInit
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:434    .text.TIM_TimeBaseInit:00000068 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:445    .text.TIM_TimeBaseStructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:450    .text.TIM_TimeBaseStructInit:00000000 TIM_TimeBaseStructInit
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:477    .text.TIM_PrescalerConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:482    .text.TIM_PrescalerConfig:00000000 TIM_PrescalerConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:498    .text.TIM_CounterModeConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:503    .text.TIM_CounterModeConfig:00000000 TIM_CounterModeConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:527    .text.TIM_SetCounter:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:532    .text.TIM_SetCounter:00000000 TIM_SetCounter
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:546    .text.TIM_SetAutoreload:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:551    .text.TIM_SetAutoreload:00000000 TIM_SetAutoreload
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:565    .text.TIM_GetCounter:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:570    .text.TIM_GetCounter:00000000 TIM_GetCounter
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:585    .text.TIM_GetPrescaler:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:590    .text.TIM_GetPrescaler:00000000 TIM_GetPrescaler
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:605    .text.TIM_UpdateDisableConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:610    .text.TIM_UpdateDisableConfig:00000000 TIM_UpdateDisableConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:641    .text.TIM_UpdateRequestConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:646    .text.TIM_UpdateRequestConfig:00000000 TIM_UpdateRequestConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:677    .text.TIM_ARRPreloadConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:682    .text.TIM_ARRPreloadConfig:00000000 TIM_ARRPreloadConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:713    .text.TIM_SelectOnePulseMode:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:718    .text.TIM_SelectOnePulseMode:00000000 TIM_SelectOnePulseMode
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:740    .text.TIM_SetClockDivision:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:745    .text.TIM_SetClockDivision:00000000 TIM_SetClockDivision
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:766    .text.TIM_SetClockDivision:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:771    .text.TIM_Cmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:776    .text.TIM_Cmd:00000000 TIM_Cmd
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:807    .text.TIM_BDTRConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:812    .text.TIM_BDTRConfig:00000000 TIM_BDTRConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:841    .text.TIM_BDTRStructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:846    .text.TIM_BDTRStructInit:00000000 TIM_BDTRStructInit
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:873    .text.TIM_CtrlPWMOutputs:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:878    .text.TIM_CtrlPWMOutputs:00000000 TIM_CtrlPWMOutputs
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:913    .text.TIM_OC1Init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:918    .text.TIM_OC1Init:00000000 TIM_OC1Init
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1035   .text.TIM_OC1Init:0000006c $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1044   .text.TIM_OC2Init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1049   .text.TIM_OC2Init:00000000 TIM_OC2Init
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1205   .text.TIM_OC2Init:00000084 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1214   .text.TIM_OC3Init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1219   .text.TIM_OC3Init:00000000 TIM_OC3Init
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1339   .text.TIM_OC3Init:00000068 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1349   .text.TIM_OC4Init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1354   .text.TIM_OC4Init:00000000 TIM_OC4Init
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1442   .text.TIM_OC4Init:0000004c $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1451   .text.TIM_OCStructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1456   .text.TIM_OCStructInit:00000000 TIM_OCStructInit
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1485   .text.TIM_SelectOCxM:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1490   .text.TIM_SelectOCxM:00000000 TIM_SelectOCxM
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1567   .text.TIM_SelectOCxM:00000044 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1572   .text.TIM_SetCompare1:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1577   .text.TIM_SetCompare1:00000000 TIM_SetCompare1
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1591   .text.TIM_SetCompare2:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1596   .text.TIM_SetCompare2:00000000 TIM_SetCompare2
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1610   .text.TIM_SetCompare3:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1615   .text.TIM_SetCompare3:00000000 TIM_SetCompare3
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1629   .text.TIM_SetCompare4:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1634   .text.TIM_SetCompare4:00000000 TIM_SetCompare4
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1648   .text.TIM_ForcedOC1Config:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1653   .text.TIM_ForcedOC1Config:00000000 TIM_ForcedOC1Config
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1677   .text.TIM_ForcedOC2Config:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1682   .text.TIM_ForcedOC2Config:00000000 TIM_ForcedOC2Config
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1708   .text.TIM_ForcedOC2Config:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1713   .text.TIM_ForcedOC3Config:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1718   .text.TIM_ForcedOC3Config:00000000 TIM_ForcedOC3Config
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1742   .text.TIM_ForcedOC4Config:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1747   .text.TIM_ForcedOC4Config:00000000 TIM_ForcedOC4Config
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1773   .text.TIM_ForcedOC4Config:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1778   .text.TIM_CCPreloadControl:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1783   .text.TIM_CCPreloadControl:00000000 TIM_CCPreloadControl
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1814   .text.TIM_OC1PreloadConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1819   .text.TIM_OC1PreloadConfig:00000000 TIM_OC1PreloadConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1843   .text.TIM_OC2PreloadConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1848   .text.TIM_OC2PreloadConfig:00000000 TIM_OC2PreloadConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1874   .text.TIM_OC2PreloadConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1879   .text.TIM_OC3PreloadConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1884   .text.TIM_OC3PreloadConfig:00000000 TIM_OC3PreloadConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1908   .text.TIM_OC4PreloadConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1913   .text.TIM_OC4PreloadConfig:00000000 TIM_OC4PreloadConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1939   .text.TIM_OC4PreloadConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1944   .text.TIM_OC1FastConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1949   .text.TIM_OC1FastConfig:00000000 TIM_OC1FastConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1973   .text.TIM_OC2FastConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:1978   .text.TIM_OC2FastConfig:00000000 TIM_OC2FastConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2004   .text.TIM_OC2FastConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2009   .text.TIM_OC3FastConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2014   .text.TIM_OC3FastConfig:00000000 TIM_OC3FastConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2038   .text.TIM_OC4FastConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2043   .text.TIM_OC4FastConfig:00000000 TIM_OC4FastConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2069   .text.TIM_OC4FastConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2074   .text.TIM_ClearOC1Ref:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2079   .text.TIM_ClearOC1Ref:00000000 TIM_ClearOC1Ref
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2103   .text.TIM_ClearOC2Ref:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2108   .text.TIM_ClearOC2Ref:00000000 TIM_ClearOC2Ref
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2135   .text.TIM_ClearOC3Ref:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2140   .text.TIM_ClearOC3Ref:00000000 TIM_ClearOC3Ref
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2164   .text.TIM_ClearOC4Ref:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2169   .text.TIM_ClearOC4Ref:00000000 TIM_ClearOC4Ref
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2196   .text.TIM_OC1PolarityConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2201   .text.TIM_OC1PolarityConfig:00000000 TIM_OC1PolarityConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2225   .text.TIM_OC1NPolarityConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2230   .text.TIM_OC1NPolarityConfig:00000000 TIM_OC1NPolarityConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2254   .text.TIM_OC2PolarityConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2259   .text.TIM_OC2PolarityConfig:00000000 TIM_OC2PolarityConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2286   .text.TIM_OC2NPolarityConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2291   .text.TIM_OC2NPolarityConfig:00000000 TIM_OC2NPolarityConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2318   .text.TIM_OC3PolarityConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2323   .text.TIM_OC3PolarityConfig:00000000 TIM_OC3PolarityConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2349   .text.TIM_OC3PolarityConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2354   .text.TIM_OC3NPolarityConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2359   .text.TIM_OC3NPolarityConfig:00000000 TIM_OC3NPolarityConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2385   .text.TIM_OC3NPolarityConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2390   .text.TIM_OC4PolarityConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2395   .text.TIM_OC4PolarityConfig:00000000 TIM_OC4PolarityConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2421   .text.TIM_OC4PolarityConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2426   .text.TIM_SelectOCREFClear:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2431   .text.TIM_SelectOCREFClear:00000000 TIM_SelectOCREFClear
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2453   .text.TIM_CCxCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2458   .text.TIM_CCxCmd:00000000 TIM_CCxCmd
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2491   .text.TIM_CCxNCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2496   .text.TIM_CCxNCmd:00000000 TIM_CCxNCmd
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2529   .text.TIM_SelectCOM:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2534   .text.TIM_SelectCOM:00000000 TIM_SelectCOM
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2565   .text.TIM_ICStructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2570   .text.TIM_ICStructInit:00000000 TIM_ICStructInit
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2596   .text.TIM_GetCapture1:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2601   .text.TIM_GetCapture1:00000000 TIM_GetCapture1
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2616   .text.TIM_GetCapture2:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2621   .text.TIM_GetCapture2:00000000 TIM_GetCapture2
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2636   .text.TIM_GetCapture3:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2641   .text.TIM_GetCapture3:00000000 TIM_GetCapture3
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2656   .text.TIM_GetCapture4:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2661   .text.TIM_GetCapture4:00000000 TIM_GetCapture4
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2676   .text.TIM_SetIC1Prescaler:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2681   .text.TIM_SetIC1Prescaler:00000000 TIM_SetIC1Prescaler
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2703   .text.TIM_SetIC2Prescaler:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2708   .text.TIM_SetIC2Prescaler:00000000 TIM_SetIC2Prescaler
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2732   .text.TIM_SetIC2Prescaler:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2737   .text.TIM_PWMIConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2742   .text.TIM_PWMIConfig:00000000 TIM_PWMIConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2833   .text.TIM_SetIC3Prescaler:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2838   .text.TIM_SetIC3Prescaler:00000000 TIM_SetIC3Prescaler
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2860   .text.TIM_SetIC4Prescaler:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2865   .text.TIM_SetIC4Prescaler:00000000 TIM_SetIC4Prescaler
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2889   .text.TIM_SetIC4Prescaler:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2894   .text.TIM_ICInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:2899   .text.TIM_ICInit:00000000 TIM_ICInit
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3083   .text.TIM_ICInit:000000a8 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3092   .text.TIM_ITConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3097   .text.TIM_ITConfig:00000000 TIM_ITConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3130   .text.TIM_GenerateEvent:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3135   .text.TIM_GenerateEvent:00000000 TIM_GenerateEvent
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3149   .text.TIM_GetFlagStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3154   .text.TIM_GetFlagStatus:00000000 TIM_GetFlagStatus
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3175   .text.TIM_ClearFlag:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3180   .text.TIM_ClearFlag:00000000 TIM_ClearFlag
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3196   .text.TIM_GetITStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3201   .text.TIM_GetITStatus:00000000 TIM_GetITStatus
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3232   .text.TIM_ClearITPendingBit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3237   .text.TIM_ClearITPendingBit:00000000 TIM_ClearITPendingBit
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3253   .text.TIM_DMAConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3258   .text.TIM_DMAConfig:00000000 TIM_DMAConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3276   .text.TIM_DMACmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3281   .text.TIM_DMACmd:00000000 TIM_DMACmd
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3314   .text.TIM_SelectCCDMA:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3319   .text.TIM_SelectCCDMA:00000000 TIM_SelectCCDMA
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3350   .text.TIM_InternalClockConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3355   .text.TIM_InternalClockConfig:00000000 TIM_InternalClockConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3372   .text.TIM_SelectInputTrigger:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3377   .text.TIM_SelectInputTrigger:00000000 TIM_SelectInputTrigger
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3401   .text.TIM_TIxExternalClockConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3406   .text.TIM_TIxExternalClockConfig:00000000 TIM_TIxExternalClockConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3456   .text.TIM_ITRxExternalClockConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3461   .text.TIM_ITRxExternalClockConfig:00000000 TIM_ITRxExternalClockConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3489   .text.TIM_SelectOutputTrigger:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3494   .text.TIM_SelectOutputTrigger:00000000 TIM_SelectOutputTrigger
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3516   .text.TIM_SelectSlaveMode:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3521   .text.TIM_SelectSlaveMode:00000000 TIM_SelectSlaveMode
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3543   .text.TIM_SelectMasterSlaveMode:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3548   .text.TIM_SelectMasterSlaveMode:00000000 TIM_SelectMasterSlaveMode
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3570   .text.TIM_ETRConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3575   .text.TIM_ETRConfig:00000000 TIM_ETRConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3610   .text.TIM_ETRClockMode2Config:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3615   .text.TIM_ETRClockMode2Config:00000000 TIM_ETRClockMode2Config
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3644   .text.TIM_ETRClockMode1Config:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3649   .text.TIM_ETRClockMode1Config:00000000 TIM_ETRClockMode1Config
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3691   .text.TIM_EncoderInterfaceConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3696   .text.TIM_EncoderInterfaceConfig:00000000 TIM_EncoderInterfaceConfig
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3760   .text.TIM_EncoderInterfaceConfig:00000028 $d
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3766   .text.TIM_SelectHallSensor:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3771   .text.TIM_SelectHallSensor:00000000 TIM_SelectHallSensor
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3802   .text.TIM_RemapConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccJ27yXH.s:3807   .text.TIM_RemapConfig:00000000 TIM_RemapConfig
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
