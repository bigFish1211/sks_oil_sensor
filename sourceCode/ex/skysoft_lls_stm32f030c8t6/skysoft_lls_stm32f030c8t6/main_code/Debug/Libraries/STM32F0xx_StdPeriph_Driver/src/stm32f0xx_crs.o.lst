   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_crs.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CRS_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	CRS_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	CRS_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @file    stm32f0xx_crs.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          functionalities of CRS peripheral applicable only on STM32F042 and 
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          STM32F072 devices:
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            + Configuration of the CRS peripheral
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            + Interrupts and flags management
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *  @verbatim
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****  ===============================================================================
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****                      ##### How to use this driver #####
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****  ===============================================================================
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****     [..]
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****     
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****          (+) Enable CRS AHB clock using RCC_APB1eriphClockCmd(RCC_APB1Periph_CRS, ENABLE)
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****              function
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****       
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****      @endverbatim
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *  
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   ******************************************************************************
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @attention
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * You may not use this file except in compliance with the License.
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * You may obtain a copy of the License at:
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * Unless required by applicable law or agreed to in writing, software 
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * See the License for the specific language governing permissions and
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * limitations under the License.
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   ******************************************************************************
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /* Includes ------------------------------------------------------------------*/
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** #include "stm32f0xx_crs.h"
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** #include "stm32f0xx_rcc.h"
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @{
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /** @defgroup CRS 
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief CRS driver modules
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @{
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /* Private typedef -----------------------------------------------------------*/
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /* Private define ------------------------------------------------------------*/
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /* CRS Flag Mask */
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** #define FLAG_MASK                 ((uint32_t)0x700)
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /* Private macro -------------------------------------------------------------*/
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /* Private variables ---------------------------------------------------------*/
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /* Private function prototypes -----------------------------------------------*/
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /* Private functions ---------------------------------------------------------*/
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /** @defgroup CRS_Private_Functions
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @{
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /** @defgroup CRS_Group1 Configuration of the CRS functions
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****  *  @brief   Configuration of the CRS  functions 
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****  *
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** @verbatim
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****  ===============================================================================
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****                      ##### CRS configuration functions #####
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****  ===============================================================================
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** @endverbatim
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @{
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Deinitializes CRS peripheral registers to their default reset values.
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  None
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_DeInit(void)
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
  26              		.loc 1 91 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CRS, ENABLE);
  33              		.loc 1 92 0
  34 0002 8021     		mov	r1, #128
  35 0004 0805     		lsl	r0, r1, #20
  36 0006 0121     		mov	r1, #1
  37 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_CRS, DISABLE);
  38              		.loc 1 93 0
  39 000c 8020     		mov	r0, #128
  40 000e 0005     		lsl	r0, r0, #20
  41 0010 0021     		mov	r1, #0
  42 0012 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  43              		@ sp needed for prologue
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
  44              		.loc 1 94 0
  45 0016 08BD     		pop	{r3, pc}
  46              		.cfi_endproc
  47              	.LFE33:
  49              		.section	.text.CRS_AdjustHSI48CalibrationValue,"ax",%progbits
  50              		.align	1
  51              		.global	CRS_AdjustHSI48CalibrationValue
  52              		.code	16
  53              		.thumb_func
  55              	CRS_AdjustHSI48CalibrationValue:
  56              	.LFB34:
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Adjusts the Internal High Speed 48 oscillator (HSI 48) calibration value.
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @note   The calibration is used to compensate for the variations in voltage
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *         and temperature that influence the frequency of the internal HSI48 RC.
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @note   This function can be called only when the AUTOTRIMEN bit is reset.
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  CRS_HSI48CalibrationValue: 
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_AdjustHSI48CalibrationValue(uint8_t CRS_HSI48CalibrationValue)
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
  57              		.loc 1 105 0
  58              		.cfi_startproc
  59              	.LVL0:
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Clear TRIM[5:0] bits */
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CR &= ~CRS_CR_TRIM;
  60              		.loc 1 107 0
  61 0000 044B     		ldr	r3, .L3
  62 0002 054A     		ldr	r2, .L3+4
  63 0004 1968     		ldr	r1, [r3]
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Set the TRIM[5:0] bits according to CRS_HSI48CalibrationValue value */
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CR |= (uint32_t)((uint32_t)CRS_HSI48CalibrationValue << 8);
  64              		.loc 1 110 0
  65 0006 0002     		lsl	r0, r0, #8
  66              	.LVL1:
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CR &= ~CRS_CR_TRIM;
  67              		.loc 1 107 0
  68 0008 0A40     		and	r2, r1
  69 000a 1A60     		str	r2, [r3]
  70              		.loc 1 110 0
  71 000c 1A68     		ldr	r2, [r3]
  72              		@ sp needed for prologue
  73 000e 1043     		orr	r0, r2
  74 0010 1860     		str	r0, [r3]
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
  75              		.loc 1 112 0
  76 0012 7047     		bx	lr
  77              	.L4:
  78              		.align	2
  79              	.L3:
  80 0014 006C0040 		.word	1073769472
  81 0018 FFC0FFFF 		.word	-16129
  82              		.cfi_endproc
  83              	.LFE34:
  85              		.section	.text.CRS_FrequencyErrorCounterCmd,"ax",%progbits
  86              		.align	1
  87              		.global	CRS_FrequencyErrorCounterCmd
  88              		.code	16
  89              		.thumb_func
  91              	CRS_FrequencyErrorCounterCmd:
  92              	.LFB35:
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Enables or disables the oscillator clock for frequency error counter.
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @note   when the CEN bit is set the CRS_CFGR register becomes write-protected.
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  NewState: new state of the frequency error counter.
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter can be: ENABLE or DISABLE.
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_FrequencyErrorCounterCmd(FunctionalState NewState)
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
  93              		.loc 1 122 0
  94              		.cfi_startproc
  95 0000 00B5     		push	{lr}
  96              	.LCFI1:
  97              		.cfi_def_cfa_offset 4
  98              		.cfi_offset 14, -4
  99              	.LVL2:
 100 0002 054B     		ldr	r3, .L9
 101 0004 2022     		mov	r2, #32
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   if (NewState != DISABLE)
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   {
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****      CRS->CR |= CRS_CR_CEN;
 102              		.loc 1 127 0
 103 0006 1968     		ldr	r1, [r3]
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   if (NewState != DISABLE)
 104              		.loc 1 125 0
 105 0008 0028     		cmp	r0, #0
 106 000a 01D0     		beq	.L6
 107              		.loc 1 127 0
 108 000c 0A43     		orr	r2, r1
 109 000e 01E0     		b	.L8
 110              	.L6:
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   }
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   else
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   {
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****     CRS->CR &= ~CRS_CR_CEN;
 111              		.loc 1 131 0
 112 0010 9143     		bic	r1, r2
 113 0012 0A1C     		mov	r2, r1
 114              	.L8:
 115 0014 1A60     		str	r2, [r3]
 116              		@ sp needed for prologue
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   }
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 117              		.loc 1 133 0
 118 0016 00BD     		pop	{pc}
 119              	.L10:
 120              		.align	2
 121              	.L9:
 122 0018 006C0040 		.word	1073769472
 123              		.cfi_endproc
 124              	.LFE35:
 126              		.section	.text.CRS_AutomaticCalibrationCmd,"ax",%progbits
 127              		.align	1
 128              		.global	CRS_AutomaticCalibrationCmd
 129              		.code	16
 130              		.thumb_func
 132              	CRS_AutomaticCalibrationCmd:
 133              	.LFB36:
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Enables or disables the automatic hardware adjustement of TRIM bits.
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @note   When the AUTOTRIMEN bit is set the CRS_CFGR register becomes write-protected.
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  NewState: new state of the automatic trimming.
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter can be: ENABLE or DISABLE.
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_AutomaticCalibrationCmd(FunctionalState NewState)
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 134              		.loc 1 143 0
 135              		.cfi_startproc
 136 0000 00B5     		push	{lr}
 137              	.LCFI2:
 138              		.cfi_def_cfa_offset 4
 139              		.cfi_offset 14, -4
 140              	.LVL3:
 141 0002 054B     		ldr	r3, .L15
 142 0004 4022     		mov	r2, #64
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   if (NewState != DISABLE)
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   {
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****     CRS->CR |= CRS_CR_AUTOTRIMEN;
 143              		.loc 1 148 0
 144 0006 1968     		ldr	r1, [r3]
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   if (NewState != DISABLE)
 145              		.loc 1 146 0
 146 0008 0028     		cmp	r0, #0
 147 000a 01D0     		beq	.L12
 148              		.loc 1 148 0
 149 000c 0A43     		orr	r2, r1
 150 000e 01E0     		b	.L14
 151              	.L12:
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   }
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** else
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   {
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****     CRS->CR &= ~CRS_CR_AUTOTRIMEN;
 152              		.loc 1 152 0
 153 0010 9143     		bic	r1, r2
 154 0012 0A1C     		mov	r2, r1
 155              	.L14:
 156 0014 1A60     		str	r2, [r3]
 157              		@ sp needed for prologue
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   }
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 158              		.loc 1 154 0
 159 0016 00BD     		pop	{pc}
 160              	.L16:
 161              		.align	2
 162              	.L15:
 163 0018 006C0040 		.word	1073769472
 164              		.cfi_endproc
 165              	.LFE36:
 167              		.section	.text.CRS_SoftwareSynchronizationGenerate,"ax",%progbits
 168              		.align	1
 169              		.global	CRS_SoftwareSynchronizationGenerate
 170              		.code	16
 171              		.thumb_func
 173              	CRS_SoftwareSynchronizationGenerate:
 174              	.LFB37:
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Generate the software synchronization event
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  None
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_SoftwareSynchronizationGenerate(void)
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 175              		.loc 1 162 0
 176              		.cfi_startproc
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CR |= CRS_CR_SWSYNC;
 177              		.loc 1 163 0
 178 0000 024B     		ldr	r3, .L18
 179 0002 8021     		mov	r1, #128
 180 0004 1A68     		ldr	r2, [r3]
 181              		@ sp needed for prologue
 182 0006 0A43     		orr	r2, r1
 183 0008 1A60     		str	r2, [r3]
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 184              		.loc 1 164 0
 185 000a 7047     		bx	lr
 186              	.L19:
 187              		.align	2
 188              	.L18:
 189 000c 006C0040 		.word	1073769472
 190              		.cfi_endproc
 191              	.LFE37:
 193              		.section	.text.CRS_FrequencyErrorCounterReload,"ax",%progbits
 194              		.align	1
 195              		.global	CRS_FrequencyErrorCounterReload
 196              		.code	16
 197              		.thumb_func
 199              	CRS_FrequencyErrorCounterReload:
 200              	.LFB38:
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Adjusts the Internal High Speed 48 oscillator (HSI 48) calibration value.
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @note   The calibration is used to compensate for the variations in voltage
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *         and temperature that influence the frequency of the internal HSI48 RC.
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @note   This function can be called only when the CEN bit is reset.
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  CRS_ReloadValue: specifies the HSI calibration trimming value.
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter must be a number between 0 and .
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_FrequencyErrorCounterReload(uint32_t CRS_ReloadValue)
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 201              		.loc 1 176 0
 202              		.cfi_startproc
 203              	.LVL4:
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****  
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Clear RELOAD[15:0] bits */
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CFGR &= ~CRS_CFGR_RELOAD;
 204              		.loc 1 179 0
 205 0000 044B     		ldr	r3, .L21
 206              		@ sp needed for prologue
 207 0002 5968     		ldr	r1, [r3, #4]
 208 0004 0A0C     		lsr	r2, r1, #16
 209 0006 1104     		lsl	r1, r2, #16
 210 0008 5960     		str	r1, [r3, #4]
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Set the RELOAD[15:0] bits according to CRS_ReloadValue value */
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CFGR |= (uint32_t)CRS_ReloadValue;
 211              		.loc 1 182 0
 212 000a 5A68     		ldr	r2, [r3, #4]
 213 000c 1043     		orr	r0, r2
 214              	.LVL5:
 215 000e 5860     		str	r0, [r3, #4]
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 216              		.loc 1 184 0
 217 0010 7047     		bx	lr
 218              	.L22:
 219 0012 C046     		.align	2
 220              	.L21:
 221 0014 006C0040 		.word	1073769472
 222              		.cfi_endproc
 223              	.LFE38:
 225              		.section	.text.CRS_FrequencyErrorLimitConfig,"ax",%progbits
 226              		.align	1
 227              		.global	CRS_FrequencyErrorLimitConfig
 228              		.code	16
 229              		.thumb_func
 231              	CRS_FrequencyErrorLimitConfig:
 232              	.LFB39:
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @note   This function can be called only when the CEN bit is reset.
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  CRS_ErrorLimitValue: specifies the HSI calibration trimming value.
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter must be a number between 0 and .
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_FrequencyErrorLimitConfig(uint8_t CRS_ErrorLimitValue)
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 233              		.loc 1 194 0
 234              		.cfi_startproc
 235              	.LVL6:
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Clear FELIM[7:0] bits */
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CFGR &= ~CRS_CFGR_FELIM;
 236              		.loc 1 196 0
 237 0000 044B     		ldr	r3, .L24
 238 0002 054A     		ldr	r2, .L24+4
 239 0004 5968     		ldr	r1, [r3, #4]
 240              		@ sp needed for prologue
 241 0006 0A40     		and	r2, r1
 242 0008 5A60     		str	r2, [r3, #4]
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Set the FELIM[7:0] bits according to CRS_ErrorLimitValue value */
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CFGR |= (uint32_t)CRS_ErrorLimitValue;
 243              		.loc 1 199 0
 244 000a 5A68     		ldr	r2, [r3, #4]
 245 000c 1043     		orr	r0, r2
 246              	.LVL7:
 247 000e 5860     		str	r0, [r3, #4]
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 248              		.loc 1 200 0
 249 0010 7047     		bx	lr
 250              	.L25:
 251 0012 C046     		.align	2
 252              	.L24:
 253 0014 006C0040 		.word	1073769472
 254 0018 FFFF00FF 		.word	-16711681
 255              		.cfi_endproc
 256              	.LFE39:
 258              		.section	.text.CRS_SynchronizationPrescalerConfig,"ax",%progbits
 259              		.align	1
 260              		.global	CRS_SynchronizationPrescalerConfig
 261              		.code	16
 262              		.thumb_func
 264              	CRS_SynchronizationPrescalerConfig:
 265              	.LFB40:
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @note   This function can be called only when the CEN bit is reset.
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  CRS_Prescaler: specifies the HSI calibration trimming value.
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter can be one of the following values:
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNC_Div1:   
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNC_Div2:   
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNC_Div4:   
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNC_Div8:   
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNC_Div16:  
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNC_Div32:  
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNC_Div64: 
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNC_Div128: 
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_SynchronizationPrescalerConfig(uint32_t CRS_Prescaler)
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 266              		.loc 1 218 0
 267              		.cfi_startproc
 268              	.LVL8:
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Check the parameters */
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   assert_param(IS_CRS_SYNC_DIV(CRS_Prescaler));
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Clear SYNCDIV[2:0] bits */
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CFGR &= ~CRS_CFGR_SYNCDIV;
 269              		.loc 1 223 0
 270 0000 044B     		ldr	r3, .L27
 271 0002 054A     		ldr	r2, .L27+4
 272 0004 5968     		ldr	r1, [r3, #4]
 273              		@ sp needed for prologue
 274 0006 0A40     		and	r2, r1
 275 0008 5A60     		str	r2, [r3, #4]
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Set the CRS_CFGR_SYNCDIV[2:0] bits according to CRS_Prescaler value */
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CFGR |= CRS_Prescaler;
 276              		.loc 1 226 0
 277 000a 5A68     		ldr	r2, [r3, #4]
 278 000c 1043     		orr	r0, r2
 279              	.LVL9:
 280 000e 5860     		str	r0, [r3, #4]
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 281              		.loc 1 227 0
 282 0010 7047     		bx	lr
 283              	.L28:
 284 0012 C046     		.align	2
 285              	.L27:
 286 0014 006C0040 		.word	1073769472
 287 0018 FFFFFFF8 		.word	-117440513
 288              		.cfi_endproc
 289              	.LFE40:
 291              		.section	.text.CRS_SynchronizationSourceConfig,"ax",%progbits
 292              		.align	1
 293              		.global	CRS_SynchronizationSourceConfig
 294              		.code	16
 295              		.thumb_func
 297              	CRS_SynchronizationSourceConfig:
 298              	.LFB41:
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @note   This function can be called only when the CEN bit is reset.
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  CRS_Source: .
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter can be one of the following values:
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNCSource_GPIO:   
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNCSource_LSE:   
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNCSource_USB:   
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_SynchronizationSourceConfig(uint32_t CRS_Source)
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 299              		.loc 1 240 0
 300              		.cfi_startproc
 301              	.LVL10:
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Check the parameters */
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   assert_param(IS_CRS_SYNC_SOURCE(CRS_Source));
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Clear SYNCSRC[1:0] bits */
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CFGR &= ~CRS_CFGR_SYNCSRC;
 302              		.loc 1 245 0
 303 0000 044B     		ldr	r3, .L30
 304 0002 054A     		ldr	r2, .L30+4
 305 0004 5968     		ldr	r1, [r3, #4]
 306              		@ sp needed for prologue
 307 0006 0A40     		and	r2, r1
 308 0008 5A60     		str	r2, [r3, #4]
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CFGR |= CRS_Source;
 309              		.loc 1 248 0
 310 000a 5A68     		ldr	r2, [r3, #4]
 311 000c 1043     		orr	r0, r2
 312              	.LVL11:
 313 000e 5860     		str	r0, [r3, #4]
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 314              		.loc 1 249 0
 315 0010 7047     		bx	lr
 316              	.L31:
 317 0012 C046     		.align	2
 318              	.L30:
 319 0014 006C0040 		.word	1073769472
 320 0018 FFFFFFCF 		.word	-805306369
 321              		.cfi_endproc
 322              	.LFE41:
 324              		.section	.text.CRS_SynchronizationPolarityConfig,"ax",%progbits
 325              		.align	1
 326              		.global	CRS_SynchronizationPolarityConfig
 327              		.code	16
 328              		.thumb_func
 330              	CRS_SynchronizationPolarityConfig:
 331              	.LFB42:
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @note   This function can be called only when the CEN bit is reset.
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  CRS_Polarity: .
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter can be one of the following values:
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNCPolarity_Rising:   
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *            @arg CRS_SYNCPolarity_Falling:   
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_SynchronizationPolarityConfig(uint32_t CRS_Polarity)
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 332              		.loc 1 261 0
 333              		.cfi_startproc
 334              	.LVL12:
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Check the parameters */
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   assert_param(IS_CRS_SYNC_POLARITY(CRS_Polarity));
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Clear SYNCSPOL bit */
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CFGR &= ~CRS_CFGR_SYNCPOL;
 335              		.loc 1 266 0
 336 0000 044B     		ldr	r3, .L33
 337              		@ sp needed for prologue
 338 0002 5968     		ldr	r1, [r3, #4]
 339 0004 4A00     		lsl	r2, r1, #1
 340 0006 5108     		lsr	r1, r2, #1
 341 0008 5960     		str	r1, [r3, #4]
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Set the SYNCSPOL bits according to CRS_Polarity value */
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   CRS->CFGR |= CRS_Polarity;
 342              		.loc 1 269 0
 343 000a 5A68     		ldr	r2, [r3, #4]
 344 000c 1043     		orr	r0, r2
 345              	.LVL13:
 346 000e 5860     		str	r0, [r3, #4]
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 347              		.loc 1 270 0
 348 0010 7047     		bx	lr
 349              	.L34:
 350 0012 C046     		.align	2
 351              	.L33:
 352 0014 006C0040 		.word	1073769472
 353              		.cfi_endproc
 354              	.LFE42:
 356              		.section	.text.CRS_GetReloadValue,"ax",%progbits
 357              		.align	1
 358              		.global	CRS_GetReloadValue
 359              		.code	16
 360              		.thumb_func
 362              	CRS_GetReloadValue:
 363              	.LFB43:
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Returns the Relaod value.
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  None
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval The reload value 
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** uint32_t CRS_GetReloadValue(void)
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 364              		.loc 1 278 0
 365              		.cfi_startproc
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   return ((uint32_t)(CRS->CFGR & CRS_CFGR_RELOAD));
 366              		.loc 1 279 0
 367 0000 014B     		ldr	r3, .L36
 368              		@ sp needed for prologue
 369 0002 5868     		ldr	r0, [r3, #4]
 370 0004 80B2     		uxth	r0, r0
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 371              		.loc 1 280 0
 372 0006 7047     		bx	lr
 373              	.L37:
 374              		.align	2
 375              	.L36:
 376 0008 006C0040 		.word	1073769472
 377              		.cfi_endproc
 378              	.LFE43:
 380              		.section	.text.CRS_GetHSI48CalibrationValue,"ax",%progbits
 381              		.align	1
 382              		.global	CRS_GetHSI48CalibrationValue
 383              		.code	16
 384              		.thumb_func
 386              	CRS_GetHSI48CalibrationValue:
 387              	.LFB44:
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Returns the HSI48 Calibration value.
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  None
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval The reload value 
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** uint32_t CRS_GetHSI48CalibrationValue(void)
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 388              		.loc 1 288 0
 389              		.cfi_startproc
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   return (((uint32_t)(CRS->CR & CRS_CR_TRIM)) >> 8);
 390              		.loc 1 289 0
 391 0000 024B     		ldr	r3, .L39
 392              		@ sp needed for prologue
 393 0002 1968     		ldr	r1, [r3]
 394 0004 8804     		lsl	r0, r1, #18
 395 0006 800E     		lsr	r0, r0, #26
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 396              		.loc 1 290 0
 397 0008 7047     		bx	lr
 398              	.L40:
 399 000a C046     		.align	2
 400              	.L39:
 401 000c 006C0040 		.word	1073769472
 402              		.cfi_endproc
 403              	.LFE44:
 405              		.section	.text.CRS_GetFrequencyErrorValue,"ax",%progbits
 406              		.align	1
 407              		.global	CRS_GetFrequencyErrorValue
 408              		.code	16
 409              		.thumb_func
 411              	CRS_GetFrequencyErrorValue:
 412              	.LFB45:
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Returns the frequency error capture.
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  None
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval The frequency error capture value 
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** uint32_t CRS_GetFrequencyErrorValue(void)
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 413              		.loc 1 298 0
 414              		.cfi_startproc
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   return ((uint32_t)(CRS->ISR & CRS_ISR_FECAP));
 415              		.loc 1 299 0
 416 0000 024B     		ldr	r3, .L42
 417              		@ sp needed for prologue
 418 0002 9968     		ldr	r1, [r3, #8]
 419 0004 080C     		lsr	r0, r1, #16
 420 0006 0004     		lsl	r0, r0, #16
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 421              		.loc 1 300 0
 422 0008 7047     		bx	lr
 423              	.L43:
 424 000a C046     		.align	2
 425              	.L42:
 426 000c 006C0040 		.word	1073769472
 427              		.cfi_endproc
 428              	.LFE45:
 430              		.section	.text.CRS_GetFrequencyErrorDirection,"ax",%progbits
 431              		.align	1
 432              		.global	CRS_GetFrequencyErrorDirection
 433              		.code	16
 434              		.thumb_func
 436              	CRS_GetFrequencyErrorDirection:
 437              	.LFB46:
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Returns the frequency error direction.
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  None
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval The frequency error direction. The returned value can be one 
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *         of the following values:
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *           - 0x00: Up counting
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *           - 0x8000: Down counting   
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** uint32_t CRS_GetFrequencyErrorDirection(void)
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 438              		.loc 1 311 0
 439              		.cfi_startproc
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   return ((uint32_t)(CRS->ISR & CRS_ISR_FEDIR));
 440              		.loc 1 312 0
 441 0000 0249     		ldr	r1, .L45
 442 0002 8020     		mov	r0, #128
 443 0004 8B68     		ldr	r3, [r1, #8]
 444 0006 0002     		lsl	r0, r0, #8
 445 0008 1840     		and	r0, r3
 446              		@ sp needed for prologue
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 447              		.loc 1 313 0
 448 000a 7047     		bx	lr
 449              	.L46:
 450              		.align	2
 451              	.L45:
 452 000c 006C0040 		.word	1073769472
 453              		.cfi_endproc
 454              	.LFE46:
 456              		.section	.text.CRS_ITConfig,"ax",%progbits
 457              		.align	1
 458              		.global	CRS_ITConfig
 459              		.code	16
 460              		.thumb_func
 462              	CRS_ITConfig:
 463              	.LFB47:
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /** @defgroup CRS_Group2 Interrupts and flags management functions
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****  *  @brief   Interrupts and flags management functions 
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****  *
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** @verbatim
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****  ===============================================================================
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****              ##### Interrupts and flags management functions #####
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****  ===============================================================================
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** @endverbatim
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @{
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Enables or disables the specified CRS interrupts.
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  CRS_IT: specifies the RCC interrupt sources to be enabled or disabled.
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter can be any combination of the following values:
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_SYNCOK: 
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_SYNCWARN: 
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_ERR: 
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_ESYNC: 
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  NewState: new state of the specified CRS interrupts.
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter can be: ENABLE or DISABLE.
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_ITConfig(uint32_t CRS_IT, FunctionalState NewState)
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 464              		.loc 1 338 0
 465              		.cfi_startproc
 466 0000 00B5     		push	{lr}
 467              	.LCFI3:
 468              		.cfi_def_cfa_offset 4
 469              		.cfi_offset 14, -4
 470              	.LVL14:
 471 0002 054B     		ldr	r3, .L50
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Check the parameters */
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   assert_param(IS_CRS_IT(CRS_IT));
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   if (NewState != DISABLE)
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   {
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****     CRS->CR |= CRS_IT;
 472              		.loc 1 345 0
 473 0004 1A68     		ldr	r2, [r3]
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   if (NewState != DISABLE)
 474              		.loc 1 343 0
 475 0006 0029     		cmp	r1, #0
 476 0008 02D0     		beq	.L48
 477              		.loc 1 345 0
 478 000a 1043     		orr	r0, r2
 479              	.LVL15:
 480 000c 1860     		str	r0, [r3]
 481 000e 01E0     		b	.L47
 482              	.LVL16:
 483              	.L48:
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   }
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   else
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   {
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****     CRS->CR &= ~CRS_IT;
 484              		.loc 1 349 0
 485 0010 8243     		bic	r2, r0
 486 0012 1A60     		str	r2, [r3]
 487              	.LVL17:
 488              	.L47:
 489              		@ sp needed for prologue
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   }
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 490              		.loc 1 351 0
 491 0014 00BD     		pop	{pc}
 492              	.L51:
 493 0016 C046     		.align	2
 494              	.L50:
 495 0018 006C0040 		.word	1073769472
 496              		.cfi_endproc
 497              	.LFE47:
 499              		.section	.text.CRS_GetFlagStatus,"ax",%progbits
 500              		.align	1
 501              		.global	CRS_GetFlagStatus
 502              		.code	16
 503              		.thumb_func
 505              	CRS_GetFlagStatus:
 506              	.LFB48:
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Checks whether the specified CRS flag is set or not.
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  CRS_FLAG: specifies the flag to check.
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter can be one of the following values:
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_SYNCOK: 
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_SYNCWARN: 
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_ERR: 
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_ESYNC:   
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_TRIMOVF: 
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_SYNCERR: 
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_SYNCMISS: 
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval The new state of CRS_FLAG (SET or RESET).
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** FlagStatus CRS_GetFlagStatus(uint32_t CRS_FLAG)
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 507              		.loc 1 367 0
 508              		.cfi_startproc
 509              	.LVL18:
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Check the parameters */
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   assert_param(IS_CRS_FLAG(CRS_FLAG));
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   return ((FlagStatus)(CRS->ISR & CRS_FLAG));
 510              		.loc 1 371 0
 511 0000 0249     		ldr	r1, .L53
 512              		@ sp needed for prologue
 513 0002 8B68     		ldr	r3, [r1, #8]
 514 0004 1840     		and	r0, r3
 515              	.LVL19:
 516 0006 C0B2     		uxtb	r0, r0
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 517              		.loc 1 372 0
 518 0008 7047     		bx	lr
 519              	.L54:
 520 000a C046     		.align	2
 521              	.L53:
 522 000c 006C0040 		.word	1073769472
 523              		.cfi_endproc
 524              	.LFE48:
 526              		.section	.text.CRS_ClearFlag,"ax",%progbits
 527              		.align	1
 528              		.global	CRS_ClearFlag
 529              		.code	16
 530              		.thumb_func
 532              	CRS_ClearFlag:
 533              	.LFB49:
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Clears the CRS specified FLAG.
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  CRS_FLAG: specifies the flag to check.
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter can be one of the following values:
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_SYNCOK: 
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_SYNCWARN: 
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_ERR: 
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_ESYNC:   
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_TRIMOVF: 
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_SYNCERR: 
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_FLAG_SYNCMISS: 
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_ClearFlag(uint32_t CRS_FLAG)
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 534              		.loc 1 388 0
 535              		.cfi_startproc
 536 0000 00B5     		push	{lr}
 537              	.LCFI4:
 538              		.cfi_def_cfa_offset 4
 539              		.cfi_offset 14, -4
 540              	.LVL20:
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Check the parameters */
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   assert_param(IS_CRS_FLAG(CRS_FLAG));
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   if ((CRS_FLAG & FLAG_MASK)!= 0)
 541              		.loc 1 392 0
 542 0002 E021     		mov	r1, #224
 543 0004 CA00     		lsl	r2, r1, #3
 544 0006 064B     		ldr	r3, .L58
 545 0008 1042     		tst	r0, r2
 546 000a 04D0     		beq	.L56
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   {
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****     CRS->ICR |= CRS_ICR_ERRC;  
 547              		.loc 1 394 0
 548 000c D868     		ldr	r0, [r3, #12]
 549              	.LVL21:
 550 000e 0422     		mov	r2, #4
 551 0010 1043     		orr	r0, r2
 552 0012 D860     		str	r0, [r3, #12]
 553 0014 02E0     		b	.L55
 554              	.LVL22:
 555              	.L56:
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   }
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   else
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   {
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****     CRS->ICR |= CRS_FLAG;
 556              		.loc 1 398 0
 557 0016 D968     		ldr	r1, [r3, #12]
 558 0018 0843     		orr	r0, r1
 559              	.LVL23:
 560 001a D860     		str	r0, [r3, #12]
 561              	.L55:
 562              		@ sp needed for prologue
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   }
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 563              		.loc 1 400 0
 564 001c 00BD     		pop	{pc}
 565              	.L59:
 566 001e C046     		.align	2
 567              	.L58:
 568 0020 006C0040 		.word	1073769472
 569              		.cfi_endproc
 570              	.LFE49:
 572              		.section	.text.CRS_GetITStatus,"ax",%progbits
 573              		.align	1
 574              		.global	CRS_GetITStatus
 575              		.code	16
 576              		.thumb_func
 578              	CRS_GetITStatus:
 579              	.LFB50:
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Checks whether the specified CRS IT pending bit is set or not.
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  CRS_IT: specifies the IT pending bit to check.
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter can be one of the following values:
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_SYNCOK: 
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_SYNCWARN: 
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_ERR: 
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_ESYNC:   
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_TRIMOVF: 
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_SYNCERR: 
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_SYNCMISS: 
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval The new state of CRS_IT (SET or RESET).
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** ITStatus CRS_GetITStatus(uint32_t CRS_IT)
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 580              		.loc 1 416 0
 581              		.cfi_startproc
 582              	.LVL24:
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Check the parameters */
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   assert_param(IS_CRS_GET_IT(CRS_IT));
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   return ((ITStatus)(CRS->ISR & CRS_IT));
 583              		.loc 1 420 0
 584 0000 0249     		ldr	r1, .L61
 585              		@ sp needed for prologue
 586 0002 8B68     		ldr	r3, [r1, #8]
 587 0004 1840     		and	r0, r3
 588              	.LVL25:
 589 0006 C0B2     		uxtb	r0, r0
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 590              		.loc 1 421 0
 591 0008 7047     		bx	lr
 592              	.L62:
 593 000a C046     		.align	2
 594              	.L61:
 595 000c 006C0040 		.word	1073769472
 596              		.cfi_endproc
 597              	.LFE50:
 599              		.section	.text.CRS_ClearITPendingBit,"ax",%progbits
 600              		.align	1
 601              		.global	CRS_ClearITPendingBit
 602              		.code	16
 603              		.thumb_func
 605              	CRS_ClearITPendingBit:
 606              	.LFB51:
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** 
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** /**
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @brief  Clears the CRS specified IT pending bi.
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @param  CRS_FLAG: specifies the IT pending bi to clear.
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *          This parameter can be one of the following values:
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_SYNCOK: 
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_SYNCWARN: 
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_ERR: 
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_ESYNC:   
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_TRIMOVF: 
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_SYNCERR: 
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   *              @arg CRS_IT_SYNCMISS: 
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   * @retval None
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   */
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** void CRS_ClearITPendingBit(uint32_t CRS_IT)
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** {
 607              		.loc 1 437 0
 608              		.cfi_startproc
 609 0000 00B5     		push	{lr}
 610              	.LCFI5:
 611              		.cfi_def_cfa_offset 4
 612              		.cfi_offset 14, -4
 613              	.LVL26:
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   /* Check the parameters */
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   assert_param(IS_CRS_CLEAR_IT(CRS_IT));
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   if ((CRS_IT & FLAG_MASK)!= 0)
 614              		.loc 1 441 0
 615 0002 E021     		mov	r1, #224
 616 0004 CA00     		lsl	r2, r1, #3
 617 0006 064B     		ldr	r3, .L66
 618 0008 1042     		tst	r0, r2
 619 000a 04D0     		beq	.L64
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   {
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****     CRS->ICR |= CRS_ICR_ERRC;  
 620              		.loc 1 443 0
 621 000c D868     		ldr	r0, [r3, #12]
 622              	.LVL27:
 623 000e 0422     		mov	r2, #4
 624 0010 1043     		orr	r0, r2
 625 0012 D860     		str	r0, [r3, #12]
 626 0014 02E0     		b	.L63
 627              	.LVL28:
 628              	.L64:
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   }
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   else
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   {
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****     CRS->ICR |= CRS_IT;
 629              		.loc 1 447 0
 630 0016 D968     		ldr	r1, [r3, #12]
 631 0018 0843     		orr	r0, r1
 632              	.LVL29:
 633 001a D860     		str	r0, [r3, #12]
 634              	.L63:
 635              		@ sp needed for prologue
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c ****   }
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_crs.c **** }
 636              		.loc 1 449 0
 637 001c 00BD     		pop	{pc}
 638              	.L67:
 639 001e C046     		.align	2
 640              	.L66:
 641 0020 006C0040 		.word	1073769472
 642              		.cfi_endproc
 643              	.LFE51:
 645              		.text
 646              	.Letext0:
 647              		.file 2 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 648              		.file 3 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/stm32f
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_crs.c
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:18     .text.CRS_DeInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:23     .text.CRS_DeInit:00000000 CRS_DeInit
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:50     .text.CRS_AdjustHSI48CalibrationValue:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:55     .text.CRS_AdjustHSI48CalibrationValue:00000000 CRS_AdjustHSI48CalibrationValue
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:80     .text.CRS_AdjustHSI48CalibrationValue:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:86     .text.CRS_FrequencyErrorCounterCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:91     .text.CRS_FrequencyErrorCounterCmd:00000000 CRS_FrequencyErrorCounterCmd
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:122    .text.CRS_FrequencyErrorCounterCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:127    .text.CRS_AutomaticCalibrationCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:132    .text.CRS_AutomaticCalibrationCmd:00000000 CRS_AutomaticCalibrationCmd
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:163    .text.CRS_AutomaticCalibrationCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:168    .text.CRS_SoftwareSynchronizationGenerate:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:173    .text.CRS_SoftwareSynchronizationGenerate:00000000 CRS_SoftwareSynchronizationGenerate
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:189    .text.CRS_SoftwareSynchronizationGenerate:0000000c $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:194    .text.CRS_FrequencyErrorCounterReload:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:199    .text.CRS_FrequencyErrorCounterReload:00000000 CRS_FrequencyErrorCounterReload
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:221    .text.CRS_FrequencyErrorCounterReload:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:226    .text.CRS_FrequencyErrorLimitConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:231    .text.CRS_FrequencyErrorLimitConfig:00000000 CRS_FrequencyErrorLimitConfig
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:253    .text.CRS_FrequencyErrorLimitConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:259    .text.CRS_SynchronizationPrescalerConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:264    .text.CRS_SynchronizationPrescalerConfig:00000000 CRS_SynchronizationPrescalerConfig
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:286    .text.CRS_SynchronizationPrescalerConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:292    .text.CRS_SynchronizationSourceConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:297    .text.CRS_SynchronizationSourceConfig:00000000 CRS_SynchronizationSourceConfig
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:319    .text.CRS_SynchronizationSourceConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:325    .text.CRS_SynchronizationPolarityConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:330    .text.CRS_SynchronizationPolarityConfig:00000000 CRS_SynchronizationPolarityConfig
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:352    .text.CRS_SynchronizationPolarityConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:357    .text.CRS_GetReloadValue:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:362    .text.CRS_GetReloadValue:00000000 CRS_GetReloadValue
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:376    .text.CRS_GetReloadValue:00000008 $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:381    .text.CRS_GetHSI48CalibrationValue:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:386    .text.CRS_GetHSI48CalibrationValue:00000000 CRS_GetHSI48CalibrationValue
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:401    .text.CRS_GetHSI48CalibrationValue:0000000c $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:406    .text.CRS_GetFrequencyErrorValue:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:411    .text.CRS_GetFrequencyErrorValue:00000000 CRS_GetFrequencyErrorValue
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:426    .text.CRS_GetFrequencyErrorValue:0000000c $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:431    .text.CRS_GetFrequencyErrorDirection:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:436    .text.CRS_GetFrequencyErrorDirection:00000000 CRS_GetFrequencyErrorDirection
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:452    .text.CRS_GetFrequencyErrorDirection:0000000c $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:457    .text.CRS_ITConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:462    .text.CRS_ITConfig:00000000 CRS_ITConfig
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:495    .text.CRS_ITConfig:00000018 $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:500    .text.CRS_GetFlagStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:505    .text.CRS_GetFlagStatus:00000000 CRS_GetFlagStatus
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:522    .text.CRS_GetFlagStatus:0000000c $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:527    .text.CRS_ClearFlag:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:532    .text.CRS_ClearFlag:00000000 CRS_ClearFlag
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:568    .text.CRS_ClearFlag:00000020 $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:573    .text.CRS_GetITStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:578    .text.CRS_GetITStatus:00000000 CRS_GetITStatus
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:595    .text.CRS_GetITStatus:0000000c $d
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:600    .text.CRS_ClearITPendingBit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:605    .text.CRS_ClearITPendingBit:00000000 CRS_ClearITPendingBit
C:\Users\khanh\AppData\Local\Temp\ccZhOFDA.s:641    .text.CRS_ClearITPendingBit:00000020 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
