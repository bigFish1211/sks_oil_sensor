   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"stm32f0xx_i2c.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.I2C_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	I2C_DeInit
  20              		.code	16
  21              		.thumb_func
  23              	I2C_DeInit:
  24              	.LFB33:
  25              		.file 1 "../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c"
   1:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
   2:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ******************************************************************************
   3:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @file    stm32f0xx_i2c.c
   4:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @version V1.5.0
   6:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @date    05-December-2014
   7:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          functionalities of the Inter-Integrated circuit (I2C):
   9:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + Initialization and Configuration
  10:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + Communications handling
  11:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + SMBUS management
  12:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + I2C registers management
  13:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + Data transfers management
  14:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + DMA transfers management
  15:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *           + Interrupts and flags management
  16:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  17:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *  @verbatim
  18:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ============================================================================
  19:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                      ##### How to use this driver #####
  20:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ============================================================================
  21:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    [..]
  22:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  23:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        function for I2C1 or I2C2.
  24:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  25:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        RCC_AHBPeriphClockCmd() function. 
  26:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Peripherals alternate function: 
  27:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Connect the pin to the desired peripherals' Alternate 
  28:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             Function (AF) using GPIO_PinAFConfig() function.
  29:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Configure the desired pin in alternate function by:
  30:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Select the type, OpenDrain and speed via  
  32:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Call GPIO_Init() function.
  34:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Program the Mode, Timing , Own address, Ack and Acknowledged Address 
  35:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        using the I2C_Init() function.
  36:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Optionally you can enable/configure the following parameters without
  37:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        re-initialization (i.e there is no need to call again I2C_Init() function):
  38:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Enable the acknowledge feature using I2C_AcknowledgeConfig() function.
  39:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Enable the dual addressing mode using I2C_DualAddressCmd() function.
  40:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Enable the general call using the I2C_GeneralCallCmd() function.
  41:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Enable the clock stretching using I2C_StretchClockCmd() function.
  42:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) Enable the PEC Calculation using I2C_CalculatePEC() function.
  43:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        (++) For SMBus Mode:
  44:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             (+++) Enable the SMBusAlert pin using I2C_SMBusAlertCmd() function.
  45:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Enable the NVIC and the corresponding interrupt using the function
  46:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        I2C_ITConfig() if you need to use interrupt mode.
  47:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) When using the DMA mode 
  48:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****       (++) Configure the DMA using DMA_Init() function.
  49:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****       (++) Active the needed channel Request using I2C_DMACmd() function.
  50:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Enable the I2C using the I2C_Cmd() function.
  51:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (#) Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  52:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        transfers. 
  53:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    [..]
  54:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****    (@) When using I2C in Fast Mode Plus, SCL and SDA pin 20mA current drive capability
  55:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****        must be enabled by setting the driving capability control bit in SYSCFG.
  56:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  57:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     @endverbatim
  58:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ******************************************************************************
  59:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @attention
  60:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  61:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  62:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  63:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  64:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * You may not use this file except in compliance with the License.
  65:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * You may obtain a copy of the License at:
  66:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  67:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  68:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  69:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * Unless required by applicable law or agreed to in writing, software 
  70:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  71:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  72:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * See the License for the specific language governing permissions and
  73:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * limitations under the License.
  74:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *
  75:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ******************************************************************************
  76:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
  77:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  78:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  79:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #include "stm32f0xx_i2c.h"
  80:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #include "stm32f0xx_rcc.h"
  81:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  82:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @addtogroup STM32F0xx_StdPeriph_Driver
  83:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
  84:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
  85:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  86:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C 
  87:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief I2C driver modules
  88:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
  89:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
  90:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  91:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
  92:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private define ------------------------------------------------------------*/
  93:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
  94:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #define CR1_CLEAR_MASK          ((uint32_t)0x00CFE0FF)  /*<! I2C CR1 clear register Mask */
  95:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #define CR2_CLEAR_MASK          ((uint32_t)0x07FF7FFF)  /*<! I2C CR2 clear register Mask */
  96:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #define TIMING_CLEAR_MASK       ((uint32_t)0xF0FFFFFF)  /*<! I2C TIMING clear register Mask */
  97:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #define ERROR_IT_MASK           ((uint32_t)0x00003F00)  /*<! I2C Error interrupt register Mask */
  98:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** #define TC_IT_MASK              ((uint32_t)0x000000C0)  /*<! I2C TC interrupt register Mask */
  99:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Private_Functions
 106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
 107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
 113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim   
 114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
 115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****            ##### Initialization and Configuration functions #####
 116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
 117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides a set of functions allowing to initialize the I2C Mode,
 118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          I2C Timing, I2C filters, I2C Addressing mode, I2C OwnAddress1.
 119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] The I2C_Init() function follows the I2C configuration procedures (these procedures 
 121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          are available in reference manual).
 122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] When the Software Reset is performed using I2C_SoftwareResetCmd() function, the internal
 124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          states machines are reset and communication control bits, as well as status bits come 
 125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          back to their reset value.
 126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] Before enabling Stop mode using I2C_StopModeCmd() I2C Clock source must be set to
 128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          HSI and Digital filters must be disabled.
 129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] Before enabling Own Address 2 via I2C_DualAddressCmd() function, OA2 and mask should be
 131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          configured using I2C_OwnAddress2Config() function.
 132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] I2C_SlaveByteControlCmd() enable Slave byte control that allow user to get control of 
 134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          each byte in slave mode when NBYTES is set to 0x01.
 135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
 137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
 138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
 142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
  26              		.loc 1 146 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
  33              	.LVL0:
 147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (I2Cx == I2C1)
  34              		.loc 1 150 0
  35 0002 0B4B     		ldr	r3, .L5
  36 0004 9842     		cmp	r0, r3
  37 0006 07D1     		bne	.L2
 151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable I2C1 reset state */
 153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  38              		.loc 1 153 0
  39 0008 8021     		mov	r1, #128
  40 000a 8803     		lsl	r0, r1, #14
  41              	.LVL1:
  42 000c 0121     		mov	r1, #1
  43 000e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Release I2C1 from reset state */
 155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
  44              		.loc 1 155 0
  45 0012 8020     		mov	r0, #128
  46 0014 8003     		lsl	r0, r0, #14
  47 0016 06E0     		b	.L4
  48              	.LVL2:
  49              	.L2:
 156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable I2C2 reset state */
 160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  50              		.loc 1 160 0
  51 0018 8023     		mov	r3, #128
  52 001a D803     		lsl	r0, r3, #15
  53              	.LVL3:
  54 001c 0121     		mov	r1, #1
  55 001e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Release I2C2 from reset state */
 162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
  56              		.loc 1 162 0
  57 0022 8022     		mov	r2, #128
  58 0024 D003     		lsl	r0, r2, #15
  59              	.L4:
  60 0026 0021     		mov	r1, #0
  61 0028 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  62              		@ sp needed for prologue
 163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
  63              		.loc 1 164 0
  64 002c 08BD     		pop	{r3, pc}
  65              	.L6:
  66 002e C046     		.align	2
  67              	.L5:
  68 0030 00540040 		.word	1073763328
  69              		.cfi_endproc
  70              	.LFE33:
  72              		.section	.text.I2C_Init,"ax",%progbits
  73              		.align	1
  74              		.global	I2C_Init
  75              		.code	16
  76              		.thumb_func
  78              	I2C_Init:
  79              	.LFB34:
 165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified
 168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
 171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         contains the configuration information for the specified I2C peripheral.
 172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
  80              		.loc 1 175 0
  81              		.cfi_startproc
  82 0000 10B5     		push	{r4, lr}
  83              	.LCFI1:
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 4, -8
  86              		.cfi_offset 14, -4
  87              	.LVL4:
 176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ANALOG_FILTER(I2C_InitStruct->I2C_AnalogFilter));
 181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_DIGITAL_FILTER(I2C_InitStruct->I2C_DigitalFilter));
 182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ACK(I2C_InitStruct->I2C_Ack));
 185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Disable I2Cx Peripheral */
 188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
  88              		.loc 1 188 0
  89 0002 0268     		ldr	r2, [r0]
  90 0004 0123     		mov	r3, #1
  91 0006 9A43     		bic	r2, r3
  92 0008 0260     		str	r2, [r0]
 189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------------------- I2Cx FILTERS Configuration ------------------*/
 191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the I2Cx CR1 value */
 192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR1;
  93              		.loc 1 192 0
  94 000a 0468     		ldr	r4, [r0]
  95              	.LVL5:
 193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear I2Cx CR1 register */
 194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
  96              		.loc 1 194 0
  97 000c 124A     		ldr	r2, .L8
  98              		@ sp needed for prologue
  99 000e 2240     		and	r2, r4
 195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Configure I2Cx: analog and digital filter */
 196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set ANFOFF bit according to I2C_AnalogFilter value */
 197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set DFN bits according to I2C_DigitalFilter value */
 198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)I2C_InitStruct->I2C_AnalogFilter |(I2C_InitStruct->I2C_DigitalFilter << 8);
 100              		.loc 1 198 0
 101 0010 8C68     		ldr	r4, [r1, #8]
 102              	.LVL6:
 103 0012 2402     		lsl	r4, r4, #8
 104 0014 2243     		orr	r2, r4
 105              	.LVL7:
 106 0016 4C68     		ldr	r4, [r1, #4]
 107 0018 2243     		orr	r2, r4
 108              	.LVL8:
 199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write to I2Cx CR1 */
 201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 109              		.loc 1 201 0
 110 001a 0260     		str	r2, [r0]
 202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------------------- I2Cx TIMING Configuration -------------------*/
 204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Configure I2Cx: Timing */
 205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set TIMINGR bits according to I2C_Timing */
 206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write to I2Cx TIMING */
 207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->TIMINGR = I2C_InitStruct->I2C_Timing & TIMING_CLEAR_MASK;
 111              		.loc 1 207 0
 112 001c 0C68     		ldr	r4, [r1]
 113 001e 0F4A     		ldr	r2, .L8+4
 114              	.LVL9:
 115 0020 2240     		and	r2, r4
 116 0022 0261     		str	r2, [r0, #16]
 208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Enable I2Cx Peripheral */
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 117              		.loc 1 210 0
 118 0024 0468     		ldr	r4, [r0]
 211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
 213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear tmpreg local variable */
 214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = 0;
 215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear OAR1 register */
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR1 = (uint32_t)tmpreg;
 217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear OAR2 register */
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR2 = (uint32_t)tmpreg;
 219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Configure I2Cx: Own Address1 and acknowledged address */
 220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set OA1MODE bit according to I2C_AcknowledgedAddress value */
 221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set OA1 bits according to I2C_OwnAddress1 value */
 222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = (uint32_t)((uint32_t)I2C_InitStruct->I2C_AcknowledgedAddress | \
 119              		.loc 1 222 0
 120 0026 0A69     		ldr	r2, [r1, #16]
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 121              		.loc 1 210 0
 122 0028 2343     		orr	r3, r4
 123              		.loc 1 222 0
 124 002a 8C69     		ldr	r4, [r1, #24]
 210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 125              		.loc 1 210 0
 126 002c 0360     		str	r3, [r0]
 127              	.LVL10:
 128              		.loc 1 222 0
 129 002e 1443     		orr	r4, r2
 130              	.LVL11:
 216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR1 = (uint32_t)tmpreg;
 131              		.loc 1 216 0
 132 0030 0023     		mov	r3, #0
 133 0032 8360     		str	r3, [r0, #8]
 218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR2 = (uint32_t)tmpreg;
 134              		.loc 1 218 0
 135 0034 C360     		str	r3, [r0, #12]
 223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                       (uint32_t)I2C_InitStruct->I2C_OwnAddress1);
 224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write to I2Cx OAR1 */
 225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR1 = tmpreg;
 136              		.loc 1 225 0
 137 0036 8460     		str	r4, [r0, #8]
 226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Enable Own Address1 acknowledgement */
 227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR1 |= I2C_OAR1_OA1EN;
 138              		.loc 1 227 0
 139 0038 8268     		ldr	r2, [r0, #8]
 140 003a 8023     		mov	r3, #128
 141 003c 1C02     		lsl	r4, r3, #8
 142              	.LVL12:
 143 003e 1443     		orr	r4, r2
 144 0040 8460     		str	r4, [r0, #8]
 145              	.LVL13:
 228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------------------- I2Cx MODE Configuration ---------------------*/
 230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Configure I2Cx: mode */
 231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set SMBDEN and SMBHEN bits according to I2C_Mode value */
 232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2C_InitStruct->I2C_Mode;
 233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write to I2Cx CR1 */
 234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= tmpreg;
 146              		.loc 1 234 0
 147 0042 0268     		ldr	r2, [r0]
 148 0044 CB68     		ldr	r3, [r1, #12]
 149 0046 1343     		orr	r3, r2
 150 0048 0360     		str	r3, [r0]
 235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------------------- I2Cx ACK Configuration ----------------------*/
 237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the I2Cx CR2 value */
 238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR2;
 151              		.loc 1 238 0
 152 004a 4468     		ldr	r4, [r0, #4]
 153              	.LVL14:
 239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear I2Cx CR2 register */
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= CR2_CLEAR_MASK;
 154              		.loc 1 240 0
 155 004c 044B     		ldr	r3, .L8+8
 241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Configure I2Cx: acknowledgement */
 242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set NACK bit according to I2C_Ack value */
 243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= I2C_InitStruct->I2C_Ack;
 156              		.loc 1 243 0
 157 004e 4A69     		ldr	r2, [r1, #20]
 240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= CR2_CLEAR_MASK;
 158              		.loc 1 240 0
 159 0050 2340     		and	r3, r4
 160              	.LVL15:
 161              		.loc 1 243 0
 162 0052 1343     		orr	r3, r2
 163              	.LVL16:
 244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write to I2Cx CR2 */
 245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 164              		.loc 1 245 0
 165 0054 4360     		str	r3, [r0, #4]
 246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 166              		.loc 1 246 0
 167 0056 10BD     		pop	{r4, pc}
 168              	.L9:
 169              		.align	2
 170              	.L8:
 171 0058 FFE0CF00 		.word	13623551
 172 005c FFFFFFF0 		.word	-251658241
 173 0060 FF7FFF07 		.word	134184959
 174              		.cfi_endproc
 175              	.LFE34:
 177              		.section	.text.I2C_StructInit,"ax",%progbits
 178              		.align	1
 179              		.global	I2C_StructInit
 180              		.code	16
 181              		.thumb_func
 183              	I2C_StructInit:
 184              	.LFB35:
 247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 185              		.loc 1 254 0
 186              		.cfi_startproc
 187              	.LVL17:
 255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /*---------------- Reset I2C init structure parameters values --------------*/
 256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_Timing member */
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Timing = 0;
 258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_AnalogFilter member */
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_DigitalFilter member */
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_DigitalFilter = 0;
 262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_Mode member */
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_Ack member */
 267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 188              		.loc 1 267 0
 189 0000 8021     		mov	r1, #128
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Timing = 0;
 190              		.loc 1 257 0
 191 0002 0023     		mov	r3, #0
 192              		.loc 1 267 0
 193 0004 0A02     		lsl	r2, r1, #8
 257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Timing = 0;
 194              		.loc 1 257 0
 195 0006 0360     		str	r3, [r0]
 259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
 196              		.loc 1 259 0
 197 0008 4360     		str	r3, [r0, #4]
 261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_DigitalFilter = 0;
 198              		.loc 1 261 0
 199 000a 8360     		str	r3, [r0, #8]
 263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 200              		.loc 1 263 0
 201 000c C360     		str	r3, [r0, #12]
 265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 202              		.loc 1 265 0
 203 000e 0361     		str	r3, [r0, #16]
 204              		.loc 1 267 0
 205 0010 4261     		str	r2, [r0, #20]
 268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 206              		.loc 1 269 0
 207 0012 8361     		str	r3, [r0, #24]
 208              		@ sp needed for prologue
 270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 209              		.loc 1 270 0
 210 0014 7047     		bx	lr
 211              		.cfi_endproc
 212              	.LFE35:
 214              		.section	.text.I2C_Cmd,"ax",%progbits
 215              		.align	1
 216              		.global	I2C_Cmd
 217              		.code	16
 218              		.thumb_func
 220              	I2C_Cmd:
 221              	.LFB36:
 271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 222              		.loc 1 280 0
 223              		.cfi_startproc
 224 0000 00B5     		push	{lr}
 225              	.LCFI2:
 226              		.cfi_def_cfa_offset 4
 227              		.cfi_offset 14, -4
 228              	.LVL18:
 229 0002 0123     		mov	r3, #1
 281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable the selected I2C peripheral */
 287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 230              		.loc 1 287 0
 231 0004 0268     		ldr	r2, [r0]
 284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 232              		.loc 1 284 0
 233 0006 0029     		cmp	r1, #0
 234 0008 01D0     		beq	.L12
 235              		.loc 1 287 0
 236 000a 1343     		orr	r3, r2
 237 000c 01E0     		b	.L14
 238              	.L12:
 288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable the selected I2C peripheral */
 292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 239              		.loc 1 292 0
 240 000e 9A43     		bic	r2, r3
 241 0010 131C     		mov	r3, r2
 242              	.L14:
 243 0012 0360     		str	r3, [r0]
 244              		@ sp needed for prologue
 293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 245              		.loc 1 294 0
 246 0014 00BD     		pop	{pc}
 247              		.cfi_endproc
 248              	.LFE36:
 250              		.section	.text.I2C_SoftwareResetCmd,"ax",%progbits
 251              		.align	1
 252              		.global	I2C_SoftwareResetCmd
 253              		.code	16
 254              		.thumb_func
 256              	I2C_SoftwareResetCmd:
 257              	.LFB37:
 295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx)
 302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 258              		.loc 1 302 0
 259              		.cfi_startproc
 260              	.LVL19:
 303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Disable peripheral */
 307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PE);
 261              		.loc 1 307 0
 262 0000 0168     		ldr	r1, [r0]
 263 0002 0123     		mov	r3, #1
 264 0004 9943     		bic	r1, r3
 265 0006 0160     		str	r1, [r0]
 308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Perform a dummy read to delay the disable of peripheral for minimum
 310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****      3 APB clock cycles to perform the software reset functionality */
 311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *(__IO uint32_t *)(uint32_t)I2Cx; 
 266              		.loc 1 311 0
 267 0008 0268     		ldr	r2, [r0]
 312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Enable peripheral */
 314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 268              		.loc 1 314 0
 269 000a 0268     		ldr	r2, [r0]
 270              		@ sp needed for prologue
 271 000c 1343     		orr	r3, r2
 272 000e 0360     		str	r3, [r0]
 315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 273              		.loc 1 315 0
 274 0010 7047     		bx	lr
 275              		.cfi_endproc
 276              	.LFE37:
 278              		.section	.text.I2C_ITConfig,"ax",%progbits
 279              		.align	1
 280              		.global	I2C_ITConfig
 281              		.code	16
 282              		.thumb_func
 284              	I2C_ITConfig:
 285              	.LFB38:
 316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
 319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
 321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be any combination of the following values:
 322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ERRI: Error interrupt mask
 323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TCI: Transfer Complete interrupt mask
 324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_STOPI: Stop Detection interrupt mask
 325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_NACKI: Not Acknowledge received interrupt mask
 326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ADDRI: Address Match interrupt mask  
 327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_RXI: RX interrupt mask
 328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TXI: TX interrupt mask
 329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
 330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint32_t I2C_IT, FunctionalState NewState)
 334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 286              		.loc 1 334 0
 287              		.cfi_startproc
 288 0000 00B5     		push	{lr}
 289              	.LCFI3:
 290              		.cfi_def_cfa_offset 4
 291              		.cfi_offset 14, -4
 292              	.LVL20:
 335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
 339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable the selected I2C interrupts */
 343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_IT;
 293              		.loc 1 343 0
 294 0002 0368     		ldr	r3, [r0]
 340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 295              		.loc 1 340 0
 296 0004 002A     		cmp	r2, #0
 297 0006 02D0     		beq	.L17
 298              		.loc 1 343 0
 299 0008 1943     		orr	r1, r3
 300              	.LVL21:
 301 000a 0160     		str	r1, [r0]
 302 000c 01E0     		b	.L16
 303              	.LVL22:
 304              	.L17:
 344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable the selected I2C interrupts */
 348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_IT);
 305              		.loc 1 348 0
 306 000e 8B43     		bic	r3, r1
 307 0010 0360     		str	r3, [r0]
 308              	.LVL23:
 309              	.L16:
 310              		@ sp needed for prologue
 349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 311              		.loc 1 350 0
 312 0012 00BD     		pop	{pc}
 313              		.cfi_endproc
 314              	.LFE38:
 316              		.section	.text.I2C_StretchClockCmd,"ax",%progbits
 317              		.align	1
 318              		.global	I2C_StretchClockCmd
 319              		.code	16
 320              		.thumb_func
 322              	I2C_StretchClockCmd:
 323              	.LFB39:
 351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C Clock stretching.
 354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 324              		.loc 1 360 0
 325              		.cfi_startproc
 326 0000 00B5     		push	{lr}
 327              	.LCFI4:
 328              		.cfi_def_cfa_offset 4
 329              		.cfi_offset 14, -4
 330              	.LVL24:
 361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable clock stretching */
 368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_NOSTRETCH);    
 331              		.loc 1 368 0
 332 0002 0268     		ldr	r2, [r0]
 365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 333              		.loc 1 365 0
 334 0004 0029     		cmp	r1, #0
 335 0006 02D0     		beq	.L20
 336              		.loc 1 368 0
 337 0008 034B     		ldr	r3, .L23
 338 000a 1340     		and	r3, r2
 339 000c 02E0     		b	.L22
 340              	.L20:
 369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable clock stretching  */
 373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 341              		.loc 1 373 0
 342 000e 8023     		mov	r3, #128
 343 0010 9B02     		lsl	r3, r3, #10
 344 0012 1343     		orr	r3, r2
 345              	.L22:
 346 0014 0360     		str	r3, [r0]
 347              		@ sp needed for prologue
 374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 348              		.loc 1 375 0
 349 0016 00BD     		pop	{pc}
 350              	.L24:
 351              		.align	2
 352              	.L23:
 353 0018 FFFFFDFF 		.word	-131073
 354              		.cfi_endproc
 355              	.LFE39:
 357              		.section	.text.I2C_StopModeCmd,"ax",%progbits
 358              		.align	1
 359              		.global	I2C_StopModeCmd
 360              		.code	16
 361              		.thumb_func
 363              	I2C_StopModeCmd:
 364              	.LFB40:
 376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C wakeup from stop mode.
 379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         This function is not applicable for  STM32F030 devices.  
 380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
 381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx stop mode.
 382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_StopModeCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 365              		.loc 1 386 0
 366              		.cfi_startproc
 367 0000 00B5     		push	{lr}
 368              	.LCFI5:
 369              		.cfi_def_cfa_offset 4
 370              		.cfi_offset 14, -4
 371              	.LVL25:
 387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
 389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable wakeup from stop mode */
 394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_WUPEN;   
 372              		.loc 1 394 0
 373 0002 0268     		ldr	r2, [r0]
 391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 374              		.loc 1 391 0
 375 0004 0029     		cmp	r1, #0
 376 0006 03D0     		beq	.L26
 377              		.loc 1 394 0
 378 0008 8023     		mov	r3, #128
 379 000a DB02     		lsl	r3, r3, #11
 380 000c 1343     		orr	r3, r2
 381 000e 01E0     		b	.L28
 382              	.L26:
 395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable wakeup from stop mode */    
 399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_WUPEN); 
 383              		.loc 1 399 0
 384 0010 014B     		ldr	r3, .L29
 385 0012 1340     		and	r3, r2
 386              	.L28:
 387 0014 0360     		str	r3, [r0]
 388              		@ sp needed for prologue
 400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 389              		.loc 1 401 0
 390 0016 00BD     		pop	{pc}
 391              	.L30:
 392              		.align	2
 393              	.L29:
 394 0018 FFFFFBFF 		.word	-262145
 395              		.cfi_endproc
 396              	.LFE40:
 398              		.section	.text.I2C_DualAddressCmd,"ax",%progbits
 399              		.align	1
 400              		.global	I2C_DualAddressCmd
 401              		.code	16
 402              		.thumb_func
 404              	I2C_DualAddressCmd:
 405              	.LFB41:
 402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C own address 2.
 405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C own address 2.
 407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.  
 408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 406              		.loc 1 411 0
 407              		.cfi_startproc
 408 0000 00B5     		push	{lr}
 409              	.LCFI6:
 410              		.cfi_def_cfa_offset 4
 411              		.cfi_offset 14, -4
 412              	.LVL26:
 412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable own address 2 */
 419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_OA2EN;
 413              		.loc 1 419 0
 414 0002 C268     		ldr	r2, [r0, #12]
 416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 415              		.loc 1 416 0
 416 0004 0029     		cmp	r1, #0
 417 0006 03D0     		beq	.L32
 418              		.loc 1 419 0
 419 0008 8023     		mov	r3, #128
 420 000a 1B02     		lsl	r3, r3, #8
 421 000c 1343     		orr	r3, r2
 422 000e 01E0     		b	.L34
 423              	.L32:
 420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable own address 2 */
 424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->OAR2 &= (uint32_t)~((uint32_t)I2C_OAR2_OA2EN);
 424              		.loc 1 424 0
 425 0010 014B     		ldr	r3, .L35
 426 0012 1340     		and	r3, r2
 427              	.L34:
 428 0014 C360     		str	r3, [r0, #12]
 429              		@ sp needed for prologue
 425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }    
 430              		.loc 1 426 0
 431 0016 00BD     		pop	{pc}
 432              	.L36:
 433              		.align	2
 434              	.L35:
 435 0018 FF7FFFFF 		.word	-32769
 436              		.cfi_endproc
 437              	.LFE41:
 439              		.section	.text.I2C_OwnAddress2Config,"ax",%progbits
 440              		.align	1
 441              		.global	I2C_OwnAddress2Config
 442              		.code	16
 443              		.thumb_func
 445              	I2C_OwnAddress2Config:
 446              	.LFB42:
 427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the I2C slave own address 2 and mask.
 430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Address: specifies the slave address to be programmed.
 432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Mask: specifies own address 2 mask to be programmed.
 433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
 434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_NoMask: no mask.
 435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask01: OA2[1] is masked and don't care.
 436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask02: OA2[2:1] are masked and don't care.
 437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask03: OA2[3:1] are masked and don't care.
 438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask04: OA2[4:1] are masked and don't care.
 439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask05: OA2[5:1] are masked and don't care.
 440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask06: OA2[6:1] are masked and don't care.
 441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_OA2_Mask07: OA2[7:1] are masked and don't care.
 442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Mask)
 445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 447              		.loc 1 445 0
 448              		.cfi_startproc
 449 0000 10B5     		push	{r4, lr}
 450              	.LCFI7:
 451              		.cfi_def_cfa_offset 8
 452              		.cfi_offset 4, -8
 453              		.cfi_offset 14, -4
 454              	.LVL27:
 446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS2(Address));
 451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS2_MASK(Mask));
 452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the old register value */
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Reset I2Cx OA2 bit [7:1] and OA2MSK bit [1:0]  */
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set I2Cx SADD */
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 455              		.loc 1 460 0
 456 0002 FE23     		mov	r3, #254
 454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 457              		.loc 1 454 0
 458 0004 C468     		ldr	r4, [r0, #12]
 459              	.LVL28:
 460              		.loc 1 460 0
 461 0006 1940     		and	r1, r3
 462              	.LVL29:
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 463              		.loc 1 457 0
 464 0008 044B     		ldr	r3, .L38
 461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             (((uint32_t)Mask << 8) & I2C_OAR2_OA2MSK)) ;
 465              		.loc 1 461 0
 466 000a 1202     		lsl	r2, r2, #8
 467              	.LVL30:
 457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)(I2C_OAR2_OA2 | I2C_OAR2_OA2MSK));
 468              		.loc 1 457 0
 469 000c 2340     		and	r3, r4
 470              		.loc 1 461 0
 471 000e E024     		mov	r4, #224
 472              	.LVL31:
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 473              		.loc 1 460 0
 474 0010 1943     		orr	r1, r3
 475              		.loc 1 461 0
 476 0012 E300     		lsl	r3, r4, #3
 477              	.LVL32:
 478 0014 1A40     		and	r2, r3
 460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Address & I2C_OAR2_OA2) | \
 479              		.loc 1 460 0
 480 0016 1143     		orr	r1, r2
 481              	.LVL33:
 462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Store the new register value */
 464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 482              		.loc 1 464 0
 483 0018 C160     		str	r1, [r0, #12]
 484              		@ sp needed for prologue
 465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 485              		.loc 1 465 0
 486 001a 10BD     		pop	{r4, pc}
 487              	.L39:
 488              		.align	2
 489              	.L38:
 490 001c 01F8FFFF 		.word	-2047
 491              		.cfi_endproc
 492              	.LFE42:
 494              		.section	.text.I2C_GeneralCallCmd,"ax",%progbits
 495              		.align	1
 496              		.global	I2C_GeneralCallCmd
 497              		.code	16
 498              		.thumb_func
 500              	I2C_GeneralCallCmd:
 501              	.LFB43:
 466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C general call mode.
 469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C general call mode.
 471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.  
 472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 502              		.loc 1 475 0
 503              		.cfi_startproc
 504 0000 00B5     		push	{lr}
 505              	.LCFI8:
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 14, -4
 508              	.LVL34:
 476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable general call mode */
 483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_GCEN;
 509              		.loc 1 483 0
 510 0002 0268     		ldr	r2, [r0]
 480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 511              		.loc 1 480 0
 512 0004 0029     		cmp	r1, #0
 513 0006 03D0     		beq	.L41
 514              		.loc 1 483 0
 515 0008 8023     		mov	r3, #128
 516 000a 1B03     		lsl	r3, r3, #12
 517 000c 1343     		orr	r3, r2
 518 000e 01E0     		b	.L43
 519              	.L41:
 484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable general call mode */
 488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_GCEN);
 520              		.loc 1 488 0
 521 0010 014B     		ldr	r3, .L44
 522 0012 1340     		and	r3, r2
 523              	.L43:
 524 0014 0360     		str	r3, [r0]
 525              		@ sp needed for prologue
 489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** } 
 526              		.loc 1 490 0
 527 0016 00BD     		pop	{pc}
 528              	.L45:
 529              		.align	2
 530              	.L44:
 531 0018 FFFFF7FF 		.word	-524289
 532              		.cfi_endproc
 533              	.LFE43:
 535              		.section	.text.I2C_SlaveByteControlCmd,"ax",%progbits
 536              		.align	1
 537              		.global	I2C_SlaveByteControlCmd
 538              		.code	16
 539              		.thumb_func
 541              	I2C_SlaveByteControlCmd:
 542              	.LFB44:
 491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C slave byte control.
 494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C slave byte control.
 496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.  
 497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_SlaveByteControlCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 543              		.loc 1 500 0
 544              		.cfi_startproc
 545 0000 00B5     		push	{lr}
 546              	.LCFI9:
 547              		.cfi_def_cfa_offset 4
 548              		.cfi_offset 14, -4
 549              	.LVL35:
 501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable slave byte control */
 508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SBC;
 550              		.loc 1 508 0
 551 0002 0268     		ldr	r2, [r0]
 505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 552              		.loc 1 505 0
 553 0004 0029     		cmp	r1, #0
 554 0006 03D0     		beq	.L47
 555              		.loc 1 508 0
 556 0008 8023     		mov	r3, #128
 557 000a 5B02     		lsl	r3, r3, #9
 558 000c 1343     		orr	r3, r2
 559 000e 01E0     		b	.L49
 560              	.L47:
 509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable slave byte control */
 513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_SBC);
 561              		.loc 1 513 0
 562 0010 014B     		ldr	r3, .L50
 563 0012 1340     		and	r3, r2
 564              	.L49:
 565 0014 0360     		str	r3, [r0]
 566              		@ sp needed for prologue
 514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 567              		.loc 1 515 0
 568 0016 00BD     		pop	{pc}
 569              	.L51:
 570              		.align	2
 571              	.L50:
 572 0018 FFFFFEFF 		.word	-65537
 573              		.cfi_endproc
 574              	.LFE44:
 576              		.section	.text.I2C_SlaveAddressConfig,"ax",%progbits
 577              		.align	1
 578              		.global	I2C_SlaveAddressConfig
 579              		.code	16
 580              		.thumb_func
 582              	I2C_SlaveAddressConfig:
 583              	.LFB45:
 516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the slave address to be transmitted after start generation.
 519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Address: specifies the slave address to be programmed.
 521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @note   This function should be called before generating start condition.
 522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_SlaveAddressConfig(I2C_TypeDef* I2Cx, uint16_t Address)
 525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 584              		.loc 1 525 0
 585              		.cfi_startproc
 586              	.LVL36:
 526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_SLAVE_ADDRESS(Address));
 531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                
 532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the old register value */
 533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR2;
 587              		.loc 1 533 0
 588 0000 4268     		ldr	r2, [r0, #4]
 589              	.LVL37:
 590              		@ sp needed for prologue
 534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Reset I2Cx SADD bit [9:0] */
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 591              		.loc 1 536 0
 592 0002 930A     		lsr	r3, r2, #10
 537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set I2Cx SADD */
 539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)((uint32_t)Address & I2C_CR2_SADD);
 593              		.loc 1 539 0
 594 0004 8A05     		lsl	r2, r1, #22
 595              	.LVL38:
 536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_SADD);
 596              		.loc 1 536 0
 597 0006 9B02     		lsl	r3, r3, #10
 598              	.LVL39:
 599              		.loc 1 539 0
 600 0008 910D     		lsr	r1, r2, #22
 601              	.LVL40:
 602 000a 1943     		orr	r1, r3
 603              	.LVL41:
 540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Store the new register value */
 542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 604              		.loc 1 542 0
 605 000c 4160     		str	r1, [r0, #4]
 543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 606              		.loc 1 543 0
 607 000e 7047     		bx	lr
 608              		.cfi_endproc
 609              	.LFE45:
 611              		.section	.text.I2C_10BitAddressingModeCmd,"ax",%progbits
 612              		.align	1
 613              		.global	I2C_10BitAddressingModeCmd
 614              		.code	16
 615              		.thumb_func
 617              	I2C_10BitAddressingModeCmd:
 618              	.LFB46:
 544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C 10-bit addressing mode for the master.
 547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C 10-bit addressing mode.
 549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @note   This function should be called before generating start condition.
 551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_10BitAddressingModeCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 619              		.loc 1 554 0
 620              		.cfi_startproc
 621 0000 00B5     		push	{lr}
 622              	.LCFI10:
 623              		.cfi_def_cfa_offset 4
 624              		.cfi_offset 14, -4
 625              	.LVL42:
 555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable 10-bit addressing mode */
 562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_ADD10;
 626              		.loc 1 562 0
 627 0002 4268     		ldr	r2, [r0, #4]
 559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 628              		.loc 1 559 0
 629 0004 0029     		cmp	r1, #0
 630 0006 03D0     		beq	.L54
 631              		.loc 1 562 0
 632 0008 8023     		mov	r3, #128
 633 000a 1B01     		lsl	r3, r3, #4
 634 000c 1343     		orr	r3, r2
 635 000e 01E0     		b	.L56
 636              	.L54:
 563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable 10-bit addressing mode */
 567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_ADD10);
 637              		.loc 1 567 0
 638 0010 014B     		ldr	r3, .L57
 639 0012 1340     		and	r3, r2
 640              	.L56:
 641 0014 4360     		str	r3, [r0, #4]
 642              		@ sp needed for prologue
 568:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 569:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** } 
 643              		.loc 1 569 0
 644 0016 00BD     		pop	{pc}
 645              	.L58:
 646              		.align	2
 647              	.L57:
 648 0018 FFF7FFFF 		.word	-2049
 649              		.cfi_endproc
 650              	.LFE46:
 652              		.section	.text.I2C_AutoEndCmd,"ax",%progbits
 653              		.align	1
 654              		.global	I2C_AutoEndCmd
 655              		.code	16
 656              		.thumb_func
 658              	I2C_AutoEndCmd:
 659              	.LFB47:
 570:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 571:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 572:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
 573:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 574:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 575:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 576:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group2 Communications handling functions
 577:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   Communications handling functions 
 578:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
 579:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
 580:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
 581:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                   ##### Communications handling functions #####
 582:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
 583:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides a set of functions that handles I2C communication.
 584:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 585:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] Automatic End mode is enabled using I2C_AutoEndCmd() function. When Reload
 586:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          mode is enabled via I2C_ReloadCmd() AutoEnd bit has no effect.
 587:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 588:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] I2C_NumberOfBytesConfig() function set the number of bytes to be transferred,
 589:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          this configuration should be done before generating start condition in master 
 590:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          mode.
 591:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 592:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] When switching from master write operation to read operation in 10Bit addressing
 593:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          mode, master can only sends the 1st 7 bits of the 10 bit address, followed by 
 594:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          Read direction by enabling HEADR bit using I2C_10BitAddressHeader() function.
 595:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 596:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In master mode, when transferring more than 255 bytes Reload mode should be used
 597:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          to handle communication. In the first phase of transfer, Nbytes should be set to 
 598:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          255. After transferring these bytes TCR flag is set and I2C_TransferHandling()
 599:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function should be called to handle remaining communication.
 600:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 601:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In master mode, when software end mode is selected when all data is transferred
 602:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          TC flag is set I2C_TransferHandling() function should be called to generate STOP
 603:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          or generate ReStart.
 604:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 605:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
 606:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
 607:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 608:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 609:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 610:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C automatic end mode (stop condition is 
 611:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         automatically sent when nbytes data are transferred).
 612:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 613:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C automatic end mode.
 614:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 615:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @note   This function has effect if Reload mode is disabled.
 616:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 617:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 618:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_AutoEndCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 619:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 660              		.loc 1 619 0
 661              		.cfi_startproc
 662 0000 00B5     		push	{lr}
 663              	.LCFI11:
 664              		.cfi_def_cfa_offset 4
 665              		.cfi_offset 14, -4
 666              	.LVL43:
 620:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 621:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 622:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 623:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 625:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 626:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable Auto end mode */
 627:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_AUTOEND;
 667              		.loc 1 627 0
 668 0002 4268     		ldr	r2, [r0, #4]
 624:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 669              		.loc 1 624 0
 670 0004 0029     		cmp	r1, #0
 671 0006 03D0     		beq	.L60
 672              		.loc 1 627 0
 673 0008 8023     		mov	r3, #128
 674 000a 9B04     		lsl	r3, r3, #18
 675 000c 1343     		orr	r3, r2
 676 000e 01E0     		b	.L62
 677              	.L60:
 628:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 629:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 630:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 631:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable Auto end mode */
 632:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_AUTOEND);
 678              		.loc 1 632 0
 679 0010 014B     		ldr	r3, .L63
 680 0012 1340     		and	r3, r2
 681              	.L62:
 682 0014 4360     		str	r3, [r0, #4]
 683              		@ sp needed for prologue
 633:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 634:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** } 
 684              		.loc 1 634 0
 685 0016 00BD     		pop	{pc}
 686              	.L64:
 687              		.align	2
 688              	.L63:
 689 0018 FFFFFFFD 		.word	-33554433
 690              		.cfi_endproc
 691              	.LFE47:
 693              		.section	.text.I2C_ReloadCmd,"ax",%progbits
 694              		.align	1
 695              		.global	I2C_ReloadCmd
 696              		.code	16
 697              		.thumb_func
 699              	I2C_ReloadCmd:
 700              	.LFB48:
 635:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 636:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 637:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C nbytes reload mode.
 638:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 639:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the nbytes reload mode.
 640:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 641:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 642:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 643:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ReloadCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 644:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 701              		.loc 1 644 0
 702              		.cfi_startproc
 703 0000 00B5     		push	{lr}
 704              	.LCFI12:
 705              		.cfi_def_cfa_offset 4
 706              		.cfi_offset 14, -4
 707              	.LVL44:
 645:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 646:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 647:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 648:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 650:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 651:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable Auto Reload mode */
 652:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_RELOAD;
 708              		.loc 1 652 0
 709 0002 4268     		ldr	r2, [r0, #4]
 649:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 710              		.loc 1 649 0
 711 0004 0029     		cmp	r1, #0
 712 0006 03D0     		beq	.L66
 713              		.loc 1 652 0
 714 0008 8023     		mov	r3, #128
 715 000a 5B04     		lsl	r3, r3, #17
 716 000c 1343     		orr	r3, r2
 717 000e 01E0     		b	.L68
 718              	.L66:
 653:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 654:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 655:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 656:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable Auto Reload mode */
 657:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RELOAD);
 719              		.loc 1 657 0
 720 0010 014B     		ldr	r3, .L69
 721 0012 1340     		and	r3, r2
 722              	.L68:
 723 0014 4360     		str	r3, [r0, #4]
 724              		@ sp needed for prologue
 658:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 659:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 725              		.loc 1 659 0
 726 0016 00BD     		pop	{pc}
 727              	.L70:
 728              		.align	2
 729              	.L69:
 730 0018 FFFFFFFE 		.word	-16777217
 731              		.cfi_endproc
 732              	.LFE48:
 734              		.section	.text.I2C_NumberOfBytesConfig,"ax",%progbits
 735              		.align	1
 736              		.global	I2C_NumberOfBytesConfig
 737              		.code	16
 738              		.thumb_func
 740              	I2C_NumberOfBytesConfig:
 741              	.LFB49:
 660:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 661:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 662:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the number of bytes to be transmitted/received.
 663:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 664:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Number_Bytes: specifies the number of bytes to be programmed.
 665:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 666:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 667:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_NumberOfBytesConfig(I2C_TypeDef* I2Cx, uint8_t Number_Bytes)
 668:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 742              		.loc 1 668 0
 743              		.cfi_startproc
 744              	.LVL45:
 669:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 670:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 671:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 672:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 673:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 674:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the old register value */
 675:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR2;
 745              		.loc 1 675 0
 746 0000 4268     		ldr	r2, [r0, #4]
 747              	.LVL46:
 676:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 677:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Reset I2Cx Nbytes bit [7:0] */
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 748              		.loc 1 678 0
 749 0002 034B     		ldr	r3, .L72
 679:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 680:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set I2Cx Nbytes */
 681:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Number_Bytes << 16 ) & I2C_CR2_NBYTES);
 750              		.loc 1 681 0
 751 0004 0904     		lsl	r1, r1, #16
 752              	.LVL47:
 678:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_CR2_NBYTES);
 753              		.loc 1 678 0
 754 0006 1340     		and	r3, r2
 755              	.LVL48:
 756              		.loc 1 681 0
 757 0008 1943     		orr	r1, r3
 758              	.LVL49:
 682:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 683:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Store the new register value */
 684:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 759              		.loc 1 684 0
 760 000a 4160     		str	r1, [r0, #4]
 761              		@ sp needed for prologue
 685:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }  
 762              		.loc 1 685 0
 763 000c 7047     		bx	lr
 764              	.L73:
 765 000e C046     		.align	2
 766              	.L72:
 767 0010 FFFF00FF 		.word	-16711681
 768              		.cfi_endproc
 769              	.LFE49:
 771              		.section	.text.I2C_MasterRequestConfig,"ax",%progbits
 772              		.align	1
 773              		.global	I2C_MasterRequestConfig
 774              		.code	16
 775              		.thumb_func
 777              	I2C_MasterRequestConfig:
 778              	.LFB50:
 686:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 687:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 688:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the type of transfer request for the master.
 689:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 690:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_Direction: specifies the transfer request direction to be programmed.
 691:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
 692:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Master request a write transfer
 693:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Master request a read transfer  
 694:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 695:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 696:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_MasterRequestConfig(I2C_TypeDef* I2Cx, uint16_t I2C_Direction)
 697:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 779              		.loc 1 697 0
 780              		.cfi_startproc
 781 0000 00B5     		push	{lr}
 782              	.LCFI13:
 783              		.cfi_def_cfa_offset 4
 784              		.cfi_offset 14, -4
 785              	.LVL50:
 698:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /* Check the parameters */
 699:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 700:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 701:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 702:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (I2C_Direction == I2C_Direction_Transmitter)
 704:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 705:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Request a write Transfer */
 706:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_RD_WRN);
 786              		.loc 1 706 0
 787 0002 4268     		ldr	r2, [r0, #4]
 703:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (I2C_Direction == I2C_Direction_Transmitter)
 788              		.loc 1 703 0
 789 0004 0029     		cmp	r1, #0
 790 0006 02D1     		bne	.L75
 791              		.loc 1 706 0
 792 0008 034B     		ldr	r3, .L78
 793 000a 1340     		and	r3, r2
 794 000c 02E0     		b	.L77
 795              	.L75:
 707:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 708:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 709:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 710:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Request a read Transfer */
 711:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_RD_WRN;
 796              		.loc 1 711 0
 797 000e 8023     		mov	r3, #128
 798 0010 DB00     		lsl	r3, r3, #3
 799 0012 1343     		orr	r3, r2
 800              	.L77:
 801 0014 4360     		str	r3, [r0, #4]
 802              		@ sp needed for prologue
 712:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 713:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }  
 803              		.loc 1 713 0
 804 0016 00BD     		pop	{pc}
 805              	.L79:
 806              		.align	2
 807              	.L78:
 808 0018 FFFBFFFF 		.word	-1025
 809              		.cfi_endproc
 810              	.LFE50:
 812              		.section	.text.I2C_GenerateSTART,"ax",%progbits
 813              		.align	1
 814              		.global	I2C_GenerateSTART
 815              		.code	16
 816              		.thumb_func
 818              	I2C_GenerateSTART:
 819              	.LFB51:
 714:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 715:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 716:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 717:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 718:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 719:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 720:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 721:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 722:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 723:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 820              		.loc 1 723 0
 821              		.cfi_startproc
 822 0000 00B5     		push	{lr}
 823              	.LCFI14:
 824              		.cfi_def_cfa_offset 4
 825              		.cfi_offset 14, -4
 826              	.LVL51:
 724:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 725:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 726:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 727:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 729:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 730:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Generate a START condition */
 731:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_START;
 827              		.loc 1 731 0
 828 0002 4268     		ldr	r2, [r0, #4]
 728:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 829              		.loc 1 728 0
 830 0004 0029     		cmp	r1, #0
 831 0006 03D0     		beq	.L81
 832              		.loc 1 731 0
 833 0008 8023     		mov	r3, #128
 834 000a 9B01     		lsl	r3, r3, #6
 835 000c 1343     		orr	r3, r2
 836 000e 01E0     		b	.L83
 837              	.L81:
 732:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 733:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 734:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 735:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable the START condition generation */
 736:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_START);
 838              		.loc 1 736 0
 839 0010 014B     		ldr	r3, .L84
 840 0012 1340     		and	r3, r2
 841              	.L83:
 842 0014 4360     		str	r3, [r0, #4]
 843              		@ sp needed for prologue
 737:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 738:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }  
 844              		.loc 1 738 0
 845 0016 00BD     		pop	{pc}
 846              	.L85:
 847              		.align	2
 848              	.L84:
 849 0018 FFDFFFFF 		.word	-8193
 850              		.cfi_endproc
 851              	.LFE51:
 853              		.section	.text.I2C_GenerateSTOP,"ax",%progbits
 854              		.align	1
 855              		.global	I2C_GenerateSTOP
 856              		.code	16
 857              		.thumb_func
 859              	I2C_GenerateSTOP:
 860              	.LFB52:
 739:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 740:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 741:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 742:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 743:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 744:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 745:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 746:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 747:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 748:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 861              		.loc 1 748 0
 862              		.cfi_startproc
 863 0000 00B5     		push	{lr}
 864              	.LCFI15:
 865              		.cfi_def_cfa_offset 4
 866              		.cfi_offset 14, -4
 867              	.LVL52:
 749:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 750:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 751:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 752:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 754:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 755:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Generate a STOP condition */
 756:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_STOP;
 868              		.loc 1 756 0
 869 0002 4268     		ldr	r2, [r0, #4]
 753:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 870              		.loc 1 753 0
 871 0004 0029     		cmp	r1, #0
 872 0006 03D0     		beq	.L87
 873              		.loc 1 756 0
 874 0008 8023     		mov	r3, #128
 875 000a DB01     		lsl	r3, r3, #7
 876 000c 1343     		orr	r3, r2
 877 000e 01E0     		b	.L89
 878              	.L87:
 757:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 758:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 759:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 760:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable the STOP condition generation */
 761:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_STOP);
 879              		.loc 1 761 0
 880 0010 014B     		ldr	r3, .L90
 881 0012 1340     		and	r3, r2
 882              	.L89:
 883 0014 4360     		str	r3, [r0, #4]
 884              		@ sp needed for prologue
 762:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 763:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }  
 885              		.loc 1 763 0
 886 0016 00BD     		pop	{pc}
 887              	.L91:
 888              		.align	2
 889              	.L90:
 890 0018 FFBFFFFF 		.word	-16385
 891              		.cfi_endproc
 892              	.LFE52:
 894              		.section	.text.I2C_10BitAddressHeaderCmd,"ax",%progbits
 895              		.align	1
 896              		.global	I2C_10BitAddressHeaderCmd
 897              		.code	16
 898              		.thumb_func
 900              	I2C_10BitAddressHeaderCmd:
 901              	.LFB53:
 764:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 765:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 766:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C 10-bit header only mode with read direction.
 767:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 768:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2C 10-bit header only mode.
 769:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 770:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @note   This mode can be used only when switching from master transmitter mode 
 771:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         to master receiver mode.
 772:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 773:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 774:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_10BitAddressHeaderCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 775:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 902              		.loc 1 775 0
 903              		.cfi_startproc
 904 0000 00B5     		push	{lr}
 905              	.LCFI16:
 906              		.cfi_def_cfa_offset 4
 907              		.cfi_offset 14, -4
 908              	.LVL53:
 776:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 777:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 778:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 779:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 781:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 782:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable 10-bit header only mode */
 783:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_HEAD10R;
 909              		.loc 1 783 0
 910 0002 4268     		ldr	r2, [r0, #4]
 780:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 911              		.loc 1 780 0
 912 0004 0029     		cmp	r1, #0
 913 0006 03D0     		beq	.L93
 914              		.loc 1 783 0
 915 0008 8023     		mov	r3, #128
 916 000a 5B01     		lsl	r3, r3, #5
 917 000c 1343     		orr	r3, r2
 918 000e 01E0     		b	.L95
 919              	.L93:
 784:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 785:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 786:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 787:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable 10-bit header only mode */
 788:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_HEAD10R);
 920              		.loc 1 788 0
 921 0010 014B     		ldr	r3, .L96
 922 0012 1340     		and	r3, r2
 923              	.L95:
 924 0014 4360     		str	r3, [r0, #4]
 925              		@ sp needed for prologue
 789:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 790:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }    
 926              		.loc 1 790 0
 927 0016 00BD     		pop	{pc}
 928              	.L97:
 929              		.align	2
 930              	.L96:
 931 0018 FFEFFFFF 		.word	-4097
 932              		.cfi_endproc
 933              	.LFE53:
 935              		.section	.text.I2C_AcknowledgeConfig,"ax",%progbits
 936              		.align	1
 937              		.global	I2C_AcknowledgeConfig
 938              		.code	16
 939              		.thumb_func
 941              	I2C_AcknowledgeConfig:
 942              	.LFB54:
 791:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 792:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 793:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Generates I2C communication Acknowledge.
 794:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 795:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the Acknowledge.
 796:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.  
 797:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 798:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 799:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 800:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 943              		.loc 1 800 0
 944              		.cfi_startproc
 945 0000 00B5     		push	{lr}
 946              	.LCFI17:
 947              		.cfi_def_cfa_offset 4
 948              		.cfi_offset 14, -4
 949              	.LVL54:
 801:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 802:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 803:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 804:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 806:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 807:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable ACK generation */
 808:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_NACK);    
 950              		.loc 1 808 0
 951 0002 4268     		ldr	r2, [r0, #4]
 805:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 952              		.loc 1 805 0
 953 0004 0029     		cmp	r1, #0
 954 0006 02D0     		beq	.L99
 955              		.loc 1 808 0
 956 0008 034B     		ldr	r3, .L102
 957 000a 1340     		and	r3, r2
 958 000c 02E0     		b	.L101
 959              	.L99:
 809:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 810:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 811:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 812:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable NACK generation */
 813:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_NACK;
 960              		.loc 1 813 0
 961 000e 8023     		mov	r3, #128
 962 0010 1B02     		lsl	r3, r3, #8
 963 0012 1343     		orr	r3, r2
 964              	.L101:
 965 0014 4360     		str	r3, [r0, #4]
 966              		@ sp needed for prologue
 814:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 815:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 967              		.loc 1 815 0
 968 0016 00BD     		pop	{pc}
 969              	.L103:
 970              		.align	2
 971              	.L102:
 972 0018 FF7FFFFF 		.word	-32769
 973              		.cfi_endproc
 974              	.LFE54:
 976              		.section	.text.I2C_GetAddressMatched,"ax",%progbits
 977              		.align	1
 978              		.global	I2C_GetAddressMatched
 979              		.code	16
 980              		.thumb_func
 982              	I2C_GetAddressMatched:
 983              	.LFB55:
 816:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 817:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 818:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Returns the I2C slave matched address .
 819:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 820:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The value of the slave matched address .
 821:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 822:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** uint8_t I2C_GetAddressMatched(I2C_TypeDef* I2Cx)
 823:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 984              		.loc 1 823 0
 985              		.cfi_startproc
 986              	.LVL55:
 824:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 825:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 826:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 827:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the slave matched address in the SR1 register */
 828:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return (uint8_t)(((uint32_t)I2Cx->ISR & I2C_ISR_ADDCODE) >> 16) ;
 987              		.loc 1 828 0
 988 0000 8369     		ldr	r3, [r0, #24]
 989 0002 FE21     		mov	r1, #254
 990 0004 0804     		lsl	r0, r1, #16
 991              	.LVL56:
 992 0006 1840     		and	r0, r3
 993 0008 000C     		lsr	r0, r0, #16
 994              		@ sp needed for prologue
 829:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 995              		.loc 1 829 0
 996 000a 7047     		bx	lr
 997              		.cfi_endproc
 998              	.LFE55:
 1000              		.section	.text.I2C_GetTransferDirection,"ax",%progbits
 1001              		.align	1
 1002              		.global	I2C_GetTransferDirection
 1003              		.code	16
 1004              		.thumb_func
 1006              	I2C_GetTransferDirection:
 1007              	.LFB56:
 830:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 831:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 832:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Returns the I2C slave received request.
 833:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 834:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The value of the received request.
 835:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 836:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** uint16_t I2C_GetTransferDirection(I2C_TypeDef* I2Cx)
 837:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1008              		.loc 1 837 0
 1009              		.cfi_startproc
 1010 0000 00B5     		push	{lr}
 1011              	.LCFI18:
 1012              		.cfi_def_cfa_offset 4
 1013              		.cfi_offset 14, -4
 1014              	.LVL57:
 838:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 839:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint16_t direction = 0;
 840:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 841:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 842:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 843:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 844:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the slave matched address in the SR1 register */
 845:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = (uint32_t)(I2Cx->ISR & I2C_ISR_DIR);
 1015              		.loc 1 845 0
 1016 0002 8369     		ldr	r3, [r0, #24]
 1017              	.LVL58:
 1018 0004 8020     		mov	r0, #128
 1019              	.LVL59:
 1020 0006 4002     		lsl	r0, r0, #9
 1021 0008 1840     		and	r0, r3
 846:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 847:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* If write transfer is requested */
 848:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (tmpreg == 0)
 1022              		.loc 1 848 0
 1023 000a 01D0     		beq	.L106
 849:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 850:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* write transfer is requested */
 851:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     direction = I2C_Direction_Transmitter;
 852:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 853:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 854:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 855:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Read transfer is requested */
 856:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     direction = I2C_Direction_Receiver;
 1024              		.loc 1 856 0
 1025 000c 8021     		mov	r1, #128
 1026 000e C800     		lsl	r0, r1, #3
 1027              	.L106:
 1028              	.LVL60:
 1029              		@ sp needed for prologue
 857:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }  
 858:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return direction;
 859:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1030              		.loc 1 859 0
 1031 0010 00BD     		pop	{pc}
 1032              		.cfi_endproc
 1033              	.LFE56:
 1035              		.section	.text.I2C_TransferHandling,"ax",%progbits
 1036              		.align	1
 1037              		.global	I2C_TransferHandling
 1038              		.code	16
 1039              		.thumb_func
 1041              	I2C_TransferHandling:
 1042              	.LFB57:
 860:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 861:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 862:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Handles I2Cx communication when starting transfer or during transfer (TC or TCR flag ar
 863:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
 864:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Address: specifies the slave address to be programmed.
 865:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Number_Bytes: specifies the number of bytes to be programmed.
 866:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter must be a value between 0 and 255.
 867:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  ReloadEndMode: new state of the I2C START condition generation.
 868:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
 869:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Reload_Mode: Enable Reload mode .
 870:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_AutoEnd_Mode: Enable Automatic end mode.
 871:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_SoftEnd_Mode: Enable Software end mode.
 872:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  StartStopMode: new state of the I2C START condition generation.
 873:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
 874:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_No_StartStop: Don't Generate stop and start condition.
 875:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Generate_Stop: Generate stop condition (Number_Bytes should be set to 0).
 876:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Generate_Start_Read: Generate Restart for read request.
 877:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Generate_Start_Write: Generate Restart for write request.
 878:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 879:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 880:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_TransferHandling(I2C_TypeDef* I2Cx, uint16_t Address, uint8_t Number_Bytes, uint32_t Reloa
 881:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1043              		.loc 1 881 0
 1044              		.cfi_startproc
 1045 0000 10B5     		push	{r4, lr}
 1046              	.LCFI19:
 1047              		.cfi_def_cfa_offset 8
 1048              		.cfi_offset 4, -8
 1049              		.cfi_offset 14, -4
 1050              	.LVL61:
 882:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
 883:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 884:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 885:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 886:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_SLAVE_ADDRESS(Address));  
 887:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_RELOAD_END_MODE(ReloadEndMode));
 888:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_START_STOP_MODE(StartStopMode));
 889:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     
 890:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the CR2 register value */
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR2;
 892:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 893:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* clear tmpreg specific bits */
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND
 895:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 896:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* update tmpreg */
 897:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Address & I2C_CR2_SADD) | (((uint32_t)Number_Bytes << 16 ) & I2C_
 1051              		.loc 1 897 0
 1052 0002 8905     		lsl	r1, r1, #22
 1053              	.LVL62:
 1054 0004 890D     		lsr	r1, r1, #22
 891:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->CR2;
 1055              		.loc 1 891 0
 1056 0006 4468     		ldr	r4, [r0, #4]
 1057              	.LVL63:
 1058              		.loc 1 897 0
 1059 0008 0B43     		orr	r3, r1
 1060              	.LVL64:
 894:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND
 1061              		.loc 1 894 0
 1062 000a 0549     		ldr	r1, .L109
 1063              		@ sp needed for prologue
 1064 000c 0C40     		and	r4, r1
 1065              	.LVL65:
 1066              		.loc 1 897 0
 1067 000e 0299     		ldr	r1, [sp, #8]
 1068 0010 2343     		orr	r3, r4
 1069 0012 0B43     		orr	r3, r1
 1070 0014 1404     		lsl	r4, r2, #16
 1071              	.LVL66:
 1072 0016 1A1C     		mov	r2, r3
 1073              	.LVL67:
 1074 0018 2243     		orr	r2, r4
 1075              	.LVL68:
 898:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****             (uint32_t)ReloadEndMode | (uint32_t)StartStopMode);
 899:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 900:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* update CR2 register */
 901:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->CR2 = tmpreg;  
 1076              		.loc 1 901 0
 1077 001a 4260     		str	r2, [r0, #4]
 902:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1078              		.loc 1 902 0
 1079 001c 10BD     		pop	{r4, pc}
 1080              	.L110:
 1081 001e C046     		.align	2
 1082              	.L109:
 1083 0020 009800FC 		.word	-67069952
 1084              		.cfi_endproc
 1085              	.LFE57:
 1087              		.section	.text.I2C_SMBusAlertCmd,"ax",%progbits
 1088              		.align	1
 1089              		.global	I2C_SMBusAlertCmd
 1090              		.code	16
 1091              		.thumb_func
 1093              	I2C_SMBusAlertCmd:
 1094              	.LFB58:
 903:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 904:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 905:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
 906:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 907:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 908:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 909:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group3 SMBUS management functions
 910:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   SMBUS management functions 
 911:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
 912:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
 913:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
 914:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                       ##### SMBUS management functions #####
 915:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
 916:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides a set of functions that handles SMBus communication
 917:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          and timeouts detection.
 918:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 919:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] The SMBus Device default address (0b1100 001) is enabled by calling I2C_Init()
 920:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function and setting I2C_Mode member of I2C_InitTypeDef() structure to 
 921:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          I2C_Mode_SMBusDevice.
 922:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 923:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] The SMBus Host address (0b0001 000) is enabled by calling I2C_Init()
 924:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function and setting I2C_Mode member of I2C_InitTypeDef() structure to 
 925:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          I2C_Mode_SMBusHost.
 926:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 927:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] The Alert Response Address (0b0001 100) is enabled using I2C_SMBusAlertCmd()
 928:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function.
 929:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 930:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] To detect cumulative SCL stretch in master and slave mode, TIMEOUTB should be 
 931:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          configured (in accordance to SMBus specification) using I2C_TimeoutBConfig() 
 932:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function then I2C_ExtendedClockTimeoutCmd() function should be called to enable
 933:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          the detection.
 934:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 935:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] SCL low timeout is detected by configuring TIMEOUTB using I2C_TimeoutBConfig()
 936:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function followed by the call of I2C_ClockTimeoutCmd(). When adding to this 
 937:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          procedure the call of I2C_IdleClockTimeoutCmd() function, Bus Idle condition 
 938:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          (both SCL and SDA high) is detected also.
 939:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 940:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
 941:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
 942:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 943:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 944:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 945:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C SMBus alert.
 946:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
 947:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx SMBus alert.
 948:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 949:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 950:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 951:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_SMBusAlertCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 952:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1095              		.loc 1 952 0
 1096              		.cfi_startproc
 1097 0000 00B5     		push	{lr}
 1098              	.LCFI20:
 1099              		.cfi_def_cfa_offset 4
 1100              		.cfi_offset 14, -4
 1101              	.LVL69:
 953:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 954:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
 955:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 956:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 958:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 959:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable SMBus alert */
 960:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ALERTEN;   
 1102              		.loc 1 960 0
 1103 0002 0268     		ldr	r2, [r0]
 957:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1104              		.loc 1 957 0
 1105 0004 0029     		cmp	r1, #0
 1106 0006 03D0     		beq	.L112
 1107              		.loc 1 960 0
 1108 0008 8023     		mov	r3, #128
 1109 000a DB03     		lsl	r3, r3, #15
 1110 000c 1343     		orr	r3, r2
 1111 000e 01E0     		b	.L114
 1112              	.L112:
 961:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 962:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 963:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 964:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable SMBus alert */    
 965:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_ALERTEN); 
 1113              		.loc 1 965 0
 1114 0010 014B     		ldr	r3, .L115
 1115 0012 1340     		and	r3, r2
 1116              	.L114:
 1117 0014 0360     		str	r3, [r0]
 1118              		@ sp needed for prologue
 966:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 967:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1119              		.loc 1 967 0
 1120 0016 00BD     		pop	{pc}
 1121              	.L116:
 1122              		.align	2
 1123              	.L115:
 1124 0018 FFFFBFFF 		.word	-4194305
 1125              		.cfi_endproc
 1126              	.LFE58:
 1128              		.section	.text.I2C_ClockTimeoutCmd,"ax",%progbits
 1129              		.align	1
 1130              		.global	I2C_ClockTimeoutCmd
 1131              		.code	16
 1132              		.thumb_func
 1134              	I2C_ClockTimeoutCmd:
 1135              	.LFB59:
 968:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 969:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 970:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C Clock Timeout (SCL Timeout detection).
 971:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
 972:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx clock Timeout.
 973:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 974:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
 975:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
 976:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 977:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1136              		.loc 1 977 0
 1137              		.cfi_startproc
 1138 0000 00B5     		push	{lr}
 1139              	.LCFI21:
 1140              		.cfi_def_cfa_offset 4
 1141              		.cfi_offset 14, -4
 1142              	.LVL70:
 978:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
 979:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
 980:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 981:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 983:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 984:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable Clock Timeout */
 985:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;   
 1143              		.loc 1 985 0
 1144 0002 4269     		ldr	r2, [r0, #20]
 982:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1145              		.loc 1 982 0
 1146 0004 0029     		cmp	r1, #0
 1147 0006 03D0     		beq	.L118
 1148              		.loc 1 985 0
 1149 0008 8023     		mov	r3, #128
 1150 000a 1B02     		lsl	r3, r3, #8
 1151 000c 1343     		orr	r3, r2
 1152 000e 01E0     		b	.L120
 1153              	.L118:
 986:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 987:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
 988:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
 989:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable Clock Timeout */    
 990:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMOUTEN); 
 1154              		.loc 1 990 0
 1155 0010 014B     		ldr	r3, .L121
 1156 0012 1340     		and	r3, r2
 1157              	.L120:
 1158 0014 4361     		str	r3, [r0, #20]
 1159              		@ sp needed for prologue
 991:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 992:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1160              		.loc 1 992 0
 1161 0016 00BD     		pop	{pc}
 1162              	.L122:
 1163              		.align	2
 1164              	.L121:
 1165 0018 FF7FFFFF 		.word	-32769
 1166              		.cfi_endproc
 1167              	.LFE59:
 1169              		.section	.text.I2C_ExtendedClockTimeoutCmd,"ax",%progbits
 1170              		.align	1
 1171              		.global	I2C_ExtendedClockTimeoutCmd
 1172              		.code	16
 1173              		.thumb_func
 1175              	I2C_ExtendedClockTimeoutCmd:
 1176              	.LFB60:
 993:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
 994:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
 995:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C Extended Clock Timeout (SCL cumulative Timeout detection).
 996:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
 997:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx Extended clock Timeout.
 998:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 999:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1000:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1001:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ExtendedClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
1002:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1177              		.loc 1 1002 0
 1178              		.cfi_startproc
 1179 0000 00B5     		push	{lr}
 1180              	.LCFI22:
 1181              		.cfi_def_cfa_offset 4
 1182              		.cfi_offset 14, -4
 1183              	.LVL71:
1003:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1004:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1005:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1006:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1007:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1184              		.loc 1 1007 0
 1185 0002 0029     		cmp	r1, #0
 1186 0004 04D0     		beq	.L124
1008:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1009:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable Clock Timeout */
1010:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN;   
 1187              		.loc 1 1010 0
 1188 0006 4269     		ldr	r2, [r0, #20]
 1189 0008 8023     		mov	r3, #128
 1190 000a 1B06     		lsl	r3, r3, #24
 1191 000c 1343     		orr	r3, r2
 1192 000e 02E0     		b	.L126
 1193              	.L124:
1011:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1012:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1013:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1014:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable Clock Timeout */    
1015:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TEXTEN); 
 1194              		.loc 1 1015 0
 1195 0010 4269     		ldr	r2, [r0, #20]
 1196 0012 5100     		lsl	r1, r2, #1
 1197              	.LVL72:
 1198 0014 4B08     		lsr	r3, r1, #1
 1199              	.L126:
 1200 0016 4361     		str	r3, [r0, #20]
 1201              		@ sp needed for prologue
1016:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1017:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1202              		.loc 1 1017 0
 1203 0018 00BD     		pop	{pc}
 1204              		.cfi_endproc
 1205              	.LFE60:
 1207              		.section	.text.I2C_IdleClockTimeoutCmd,"ax",%progbits
 1208              		.align	1
 1209              		.global	I2C_IdleClockTimeoutCmd
 1210              		.code	16
 1211              		.thumb_func
 1213              	I2C_IdleClockTimeoutCmd:
 1214              	.LFB61:
1018:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1019:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1020:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C Idle Clock Timeout (Bus idle SCL and SDA 
1021:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         high detection).
1022:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1023:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx Idle clock Timeout.
1024:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1025:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1026:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1027:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_IdleClockTimeoutCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
1028:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1215              		.loc 1 1028 0
 1216              		.cfi_startproc
 1217 0000 00B5     		push	{lr}
 1218              	.LCFI23:
 1219              		.cfi_def_cfa_offset 4
 1220              		.cfi_offset 14, -4
 1221              	.LVL73:
1029:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1030:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1031:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1032:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
1034:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1035:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable Clock Timeout */
1036:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR |= I2C_TIMEOUTR_TIDLE;   
 1222              		.loc 1 1036 0
 1223 0002 4269     		ldr	r2, [r0, #20]
1033:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1224              		.loc 1 1033 0
 1225 0004 0029     		cmp	r1, #0
 1226 0006 03D0     		beq	.L128
 1227              		.loc 1 1036 0
 1228 0008 8023     		mov	r3, #128
 1229 000a 5B01     		lsl	r3, r3, #5
 1230 000c 1343     		orr	r3, r2
 1231 000e 01E0     		b	.L130
 1232              	.L128:
1037:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1038:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1039:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1040:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable Clock Timeout */    
1041:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->TIMEOUTR &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIDLE); 
 1233              		.loc 1 1041 0
 1234 0010 014B     		ldr	r3, .L131
 1235 0012 1340     		and	r3, r2
 1236              	.L130:
 1237 0014 4361     		str	r3, [r0, #20]
 1238              		@ sp needed for prologue
1042:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1043:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1239              		.loc 1 1043 0
 1240 0016 00BD     		pop	{pc}
 1241              	.L132:
 1242              		.align	2
 1243              	.L131:
 1244 0018 FFEFFFFF 		.word	-4097
 1245              		.cfi_endproc
 1246              	.LFE61:
 1248              		.section	.text.I2C_TimeoutAConfig,"ax",%progbits
 1249              		.align	1
 1250              		.global	I2C_TimeoutAConfig
 1251              		.code	16
 1252              		.thumb_func
 1254              	I2C_TimeoutAConfig:
 1255              	.LFB62:
1044:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1045:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1046:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the I2C Bus Timeout A (SCL Timeout when TIDLE = 0 or Bus 
1047:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *         idle SCL and SDA high when TIDLE = 1).
1048:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1049:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Timeout: specifies the TimeoutA to be programmed. 
1050:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1051:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1052:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_TimeoutAConfig(I2C_TypeDef* I2Cx, uint16_t Timeout)
1053:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1256              		.loc 1 1053 0
 1257              		.cfi_startproc
 1258              	.LVL74:
1054:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
1055:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1056:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1057:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1058:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_TIMEOUT(Timeout));
1059:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     
1060:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the old register value */
1061:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->TIMEOUTR;
 1259              		.loc 1 1061 0
 1260 0000 4269     		ldr	r2, [r0, #20]
 1261              	.LVL75:
 1262              		@ sp needed for prologue
1062:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1063:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Reset I2Cx TIMEOUTA bit [11:0] */
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
 1263              		.loc 1 1064 0
 1264 0002 130B     		lsr	r3, r2, #12
1065:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1066:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set I2Cx TIMEOUTA */
1067:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)((uint32_t)Timeout & I2C_TIMEOUTR_TIMEOUTA) ;
 1265              		.loc 1 1067 0
 1266 0004 0A05     		lsl	r2, r1, #20
 1267              	.LVL76:
1064:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTA);
 1268              		.loc 1 1064 0
 1269 0006 1B03     		lsl	r3, r3, #12
 1270              	.LVL77:
 1271              		.loc 1 1067 0
 1272 0008 110D     		lsr	r1, r2, #20
 1273              	.LVL78:
 1274 000a 1943     		orr	r1, r3
 1275              	.LVL79:
1068:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1069:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Store the new register value */
1070:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->TIMEOUTR = tmpreg;
 1276              		.loc 1 1070 0
 1277 000c 4161     		str	r1, [r0, #20]
1071:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1278              		.loc 1 1071 0
 1279 000e 7047     		bx	lr
 1280              		.cfi_endproc
 1281              	.LFE62:
 1283              		.section	.text.I2C_TimeoutBConfig,"ax",%progbits
 1284              		.align	1
 1285              		.global	I2C_TimeoutBConfig
 1286              		.code	16
 1287              		.thumb_func
 1289              	I2C_TimeoutBConfig:
 1290              	.LFB63:
1072:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1073:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1074:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Configures the I2C Bus Timeout B (SCL cumulative Timeout).
1075:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1076:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Timeout: specifies the TimeoutB to be programmed. 
1077:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1078:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1079:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_TimeoutBConfig(I2C_TypeDef* I2Cx, uint16_t Timeout)
1080:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1291              		.loc 1 1080 0
 1292              		.cfi_startproc
 1293              	.LVL80:
1081:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
1082:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1083:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1084:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1085:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_TIMEOUT(Timeout));
1086:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1087:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the old register value */
1088:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->TIMEOUTR;
 1294              		.loc 1 1088 0
 1295 0000 4269     		ldr	r2, [r0, #20]
 1296              	.LVL81:
1089:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1090:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Reset I2Cx TIMEOUTB bit [11:0] */
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 1297              		.loc 1 1091 0
 1298 0002 044B     		ldr	r3, .L135
1092:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1093:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Set I2Cx TIMEOUTB */
1094:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg |= (uint32_t)(((uint32_t)Timeout << 16) & I2C_TIMEOUTR_TIMEOUTB) ;
 1299              		.loc 1 1094 0
 1300 0004 0904     		lsl	r1, r1, #16
 1301              	.LVL82:
1091:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= (uint32_t)~((uint32_t)I2C_TIMEOUTR_TIMEOUTB);
 1302              		.loc 1 1091 0
 1303 0006 1340     		and	r3, r2
 1304              	.LVL83:
 1305              		.loc 1 1094 0
 1306 0008 034A     		ldr	r2, .L135+4
 1307              		@ sp needed for prologue
 1308 000a 1140     		and	r1, r2
 1309 000c 1943     		orr	r1, r3
 1310              	.LVL84:
1095:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1096:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Store the new register value */
1097:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->TIMEOUTR = tmpreg;
 1311              		.loc 1 1097 0
 1312 000e 4161     		str	r1, [r0, #20]
1098:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1313              		.loc 1 1098 0
 1314 0010 7047     		bx	lr
 1315              	.L136:
 1316 0012 C046     		.align	2
 1317              	.L135:
 1318 0014 FFFF00F0 		.word	-268369921
 1319 0018 0000FF0F 		.word	268369920
 1320              		.cfi_endproc
 1321              	.LFE63:
 1323              		.section	.text.I2C_CalculatePEC,"ax",%progbits
 1324              		.align	1
 1325              		.global	I2C_CalculatePEC
 1326              		.code	16
 1327              		.thumb_func
 1329              	I2C_CalculatePEC:
 1330              	.LFB64:
1099:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1100:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1101:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C PEC calculation.
1102:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1103:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC calculation.
1104:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1105:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1106:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1107:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
1108:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1331              		.loc 1 1108 0
 1332              		.cfi_startproc
 1333 0000 00B5     		push	{lr}
 1334              	.LCFI24:
 1335              		.cfi_def_cfa_offset 4
 1336              		.cfi_offset 14, -4
 1337              	.LVL85:
1109:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1110:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1111:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1112:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
1114:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1115:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable PEC calculation */
1116:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PECEN;   
 1338              		.loc 1 1116 0
 1339 0002 0268     		ldr	r2, [r0]
1113:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1340              		.loc 1 1113 0
 1341 0004 0029     		cmp	r1, #0
 1342 0006 03D0     		beq	.L138
 1343              		.loc 1 1116 0
 1344 0008 8023     		mov	r3, #128
 1345 000a 1B04     		lsl	r3, r3, #16
 1346 000c 1343     		orr	r3, r2
 1347 000e 01E0     		b	.L140
 1348              	.L138:
1117:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1118:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1119:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1120:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable PEC calculation */    
1121:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~((uint32_t)I2C_CR1_PECEN); 
 1349              		.loc 1 1121 0
 1350 0010 014B     		ldr	r3, .L141
 1351 0012 1340     		and	r3, r2
 1352              	.L140:
 1353 0014 0360     		str	r3, [r0]
 1354              		@ sp needed for prologue
1122:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1123:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1355              		.loc 1 1123 0
 1356 0016 00BD     		pop	{pc}
 1357              	.L142:
 1358              		.align	2
 1359              	.L141:
 1360 0018 FFFF7FFF 		.word	-8388609
 1361              		.cfi_endproc
 1362              	.LFE64:
 1364              		.section	.text.I2C_PECRequestCmd,"ax",%progbits
 1365              		.align	1
 1366              		.global	I2C_PECRequestCmd
 1367              		.code	16
 1368              		.thumb_func
 1370              	I2C_PECRequestCmd:
 1371              	.LFB65:
1124:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1125:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1126:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables I2C PEC transmission/reception request.
1127:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1128:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC request.
1129:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1130:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1131:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1132:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_PECRequestCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
1133:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1372              		.loc 1 1133 0
 1373              		.cfi_startproc
 1374 0000 00B5     		push	{lr}
 1375              	.LCFI25:
 1376              		.cfi_def_cfa_offset 4
 1377              		.cfi_offset 14, -4
 1378              	.LVL86:
1134:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1135:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1136:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1137:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
1139:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1140:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable PEC transmission/reception request */
1141:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_PECBYTE;   
 1379              		.loc 1 1141 0
 1380 0002 4268     		ldr	r2, [r0, #4]
1138:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1381              		.loc 1 1138 0
 1382 0004 0029     		cmp	r1, #0
 1383 0006 03D0     		beq	.L144
 1384              		.loc 1 1141 0
 1385 0008 8023     		mov	r3, #128
 1386 000a DB04     		lsl	r3, r3, #19
 1387 000c 1343     		orr	r3, r2
 1388 000e 01E0     		b	.L146
 1389              	.L144:
1142:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1143:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1144:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1145:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable PEC transmission/reception request */    
1146:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR2 &= (uint32_t)~((uint32_t)I2C_CR2_PECBYTE); 
 1390              		.loc 1 1146 0
 1391 0010 014B     		ldr	r3, .L147
 1392 0012 1340     		and	r3, r2
 1393              	.L146:
 1394 0014 4360     		str	r3, [r0, #4]
 1395              		@ sp needed for prologue
1147:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1148:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1396              		.loc 1 1148 0
 1397 0016 00BD     		pop	{pc}
 1398              	.L148:
 1399              		.align	2
 1400              	.L147:
 1401 0018 FFFFFFFB 		.word	-67108865
 1402              		.cfi_endproc
 1403              	.LFE65:
 1405              		.section	.text.I2C_GetPEC,"ax",%progbits
 1406              		.align	1
 1407              		.global	I2C_GetPEC
 1408              		.code	16
 1409              		.thumb_func
 1411              	I2C_GetPEC:
 1412              	.LFB66:
1149:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1150:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1151:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Returns the I2C PEC.
1152:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 to select the I2C peripheral.
1153:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The value of the PEC .
1154:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1155:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
1156:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1413              		.loc 1 1156 0
 1414              		.cfi_startproc
 1415              	.LVL87:
1157:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1158:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_1_PERIPH(I2Cx));
1159:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1160:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the slave matched address in the SR1 register */
1161:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return (uint8_t)((uint32_t)I2Cx->PECR & I2C_PECR_PEC);
 1416              		.loc 1 1161 0
 1417 0000 006A     		ldr	r0, [r0, #32]
 1418              	.LVL88:
 1419              		@ sp needed for prologue
 1420 0002 C0B2     		uxtb	r0, r0
1162:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1421              		.loc 1 1162 0
 1422 0004 7047     		bx	lr
 1423              		.cfi_endproc
 1424              	.LFE66:
 1426              		.section	.text.I2C_ReadRegister,"ax",%progbits
 1427              		.align	1
 1428              		.global	I2C_ReadRegister
 1429              		.code	16
 1430              		.thumb_func
 1432              	I2C_ReadRegister:
 1433              	.LFB67:
1163:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1164:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1165:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
1166:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1167:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1168:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1169:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group4 I2C registers management functions
1170:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   I2C registers management functions 
1171:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
1172:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
1173:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
1174:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                 ##### I2C registers management functions #####
1175:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
1176:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides a functions that allow user the management of 
1177:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          I2C registers.
1178:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1179:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
1180:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
1181:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1182:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1183:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /**
1184:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
1185:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1186:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
1187:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
1188:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_CR1: CR1 register.
1189:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_CR2: CR2 register.
1190:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_OAR1: OAR1 register.
1191:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_OAR2: OAR2 register.
1192:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_TIMINGR: TIMING register.
1193:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_TIMEOUTR: TIMEOUTR register.
1194:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_ISR: ISR register.
1195:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_ICR: ICR register.
1196:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_PECR: PECR register.
1197:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_RXDR: RXDR register.
1198:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_Register_TXDR: TXDR register.
1199:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The value of the read register.
1200:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1201:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** uint32_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1202:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1434              		.loc 1 1202 0
 1435              		.cfi_startproc
 1436              	.LVL89:
 1437 0000 82B0     		sub	sp, sp, #8
 1438              	.LCFI26:
 1439              		.cfi_def_cfa_offset 8
1203:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   __IO uint32_t tmp = 0;
 1440              		.loc 1 1203 0
 1441 0002 0022     		mov	r2, #0
 1442 0004 0192     		str	r2, [sp, #4]
 1443              	.LVL90:
1204:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1205:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1206:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1207:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1208:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1209:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmp = (uint32_t)I2Cx;
 1444              		.loc 1 1209 0
 1445 0006 0190     		str	r0, [sp, #4]
1210:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmp += I2C_Register;
 1446              		.loc 1 1210 0
 1447 0008 0198     		ldr	r0, [sp, #4]
 1448              	.LVL91:
 1449 000a 0918     		add	r1, r1, r0
 1450              	.LVL92:
 1451 000c 0191     		str	r1, [sp, #4]
 1452              	.LVL93:
1211:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1212:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the selected register value */
1213:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return (*(__IO uint32_t *) tmp);
 1453              		.loc 1 1213 0
 1454 000e 019B     		ldr	r3, [sp, #4]
 1455 0010 1868     		ldr	r0, [r3]
1214:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1456              		.loc 1 1214 0
 1457 0012 02B0     		add	sp, sp, #8
 1458              		@ sp needed for prologue
 1459 0014 7047     		bx	lr
 1460              		.cfi_endproc
 1461              	.LFE67:
 1463              		.section	.text.I2C_SendData,"ax",%progbits
 1464              		.align	1
 1465              		.global	I2C_SendData
 1466              		.code	16
 1467              		.thumb_func
 1469              	I2C_SendData:
 1470              	.LFB68:
1215:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1216:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1217:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
1218:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1219:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1220:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group5 Data transfers management functions
1221:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   Data transfers management functions 
1222:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
1223:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
1224:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
1225:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                 ##### Data transfers management functions #####
1226:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
1227:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This subsection provides a set of functions allowing to manage 
1228:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          the I2C data transfers.
1229:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1230:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] The read access of the I2C_RXDR register can be done using 
1231:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          the I2C_ReceiveData() function and returns the received value.
1232:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          Whereas a write access to the I2C_TXDR can be done using I2C_SendData()
1233:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          function and stores the written data into TXDR.
1234:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
1235:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
1236:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1237:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1238:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1239:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
1240:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1241:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  Data: Byte to be transmitted..
1242:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1243:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1244:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
1245:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1471              		.loc 1 1245 0
 1472              		.cfi_startproc
 1473              	.LVL94:
1246:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1247:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1248:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1249:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Write in the DR register the data to be sent */
1250:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->TXDR = (uint8_t)Data;
 1474              		.loc 1 1250 0
 1475 0000 8162     		str	r1, [r0, #40]
 1476              		@ sp needed for prologue
1251:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1477              		.loc 1 1251 0
 1478 0002 7047     		bx	lr
 1479              		.cfi_endproc
 1480              	.LFE68:
 1482              		.section	.text.I2C_ReceiveData,"ax",%progbits
 1483              		.align	1
 1484              		.global	I2C_ReceiveData
 1485              		.code	16
 1486              		.thumb_func
 1488              	I2C_ReceiveData:
 1489              	.LFB69:
1252:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1253:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1254:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
1255:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1256:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The value of the received data.
1257:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1258:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
1259:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1490              		.loc 1 1259 0
 1491              		.cfi_startproc
 1492              	.LVL95:
1260:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1261:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1262:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1263:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the data in the DR register */
1264:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return (uint8_t)I2Cx->RXDR;
 1493              		.loc 1 1264 0
 1494 0000 406A     		ldr	r0, [r0, #36]
 1495              	.LVL96:
 1496              		@ sp needed for prologue
 1497 0002 C0B2     		uxtb	r0, r0
1265:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }  
 1498              		.loc 1 1265 0
 1499 0004 7047     		bx	lr
 1500              		.cfi_endproc
 1501              	.LFE69:
 1503              		.section	.text.I2C_DMACmd,"ax",%progbits
 1504              		.align	1
 1505              		.global	I2C_DMACmd
 1506              		.code	16
 1507              		.thumb_func
 1509              	I2C_DMACmd:
 1510              	.LFB70:
1266:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1267:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1268:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
1269:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */ 
1270:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1271:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1272:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group6 DMA transfers management functions
1273:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   DMA transfers management functions 
1274:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
1275:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
1276:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
1277:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****                 ##### DMA transfers management functions #####
1278:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
1279:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides two functions that can be used only in DMA mode.
1280:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In DMA Mode, the I2C communication can be managed by 2 DMA Channel 
1281:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          requests:
1282:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          (#) I2C_DMAReq_Tx: specifies the Tx buffer DMA transfer request.
1283:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          (#) I2C_DMAReq_Rx: specifies the Rx buffer DMA transfer request.
1284:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In this Mode it is advised to use the following function:
1285:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          (+) I2C_DMACmd(I2C_TypeDef* I2Cx, uint32_t I2C_DMAReq, FunctionalState NewState);
1286:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
1287:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
1288:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1289:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     
1290:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1291:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Enables or disables the I2C DMA interface.
1292:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1293:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_DMAReq: specifies the I2C DMA transfer request to be enabled or disabled. 
1294:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be any combination of the following values:
1295:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_DMAReq_Tx: Tx DMA transfer request
1296:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_DMAReq_Rx: Rx DMA transfer request
1297:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  NewState: new state of the selected I2C DMA transfer request.
1298:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1299:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval None
1300:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1301:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, uint32_t I2C_DMAReq, FunctionalState NewState)
1302:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1511              		.loc 1 1302 0
 1512              		.cfi_startproc
 1513 0000 00B5     		push	{lr}
 1514              	.LCFI27:
 1515              		.cfi_def_cfa_offset 4
 1516              		.cfi_offset 14, -4
 1517              	.LVL97:
1303:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1304:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1305:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1306:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_DMA_REQ(I2C_DMAReq));
1307:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
1309:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1310:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Enable the selected I2C DMA requests */
1311:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 |= I2C_DMAReq;
 1518              		.loc 1 1311 0
 1519 0002 0368     		ldr	r3, [r0]
1308:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if (NewState != DISABLE)
 1520              		.loc 1 1308 0
 1521 0004 002A     		cmp	r2, #0
 1522 0006 02D0     		beq	.L154
 1523              		.loc 1 1311 0
 1524 0008 1943     		orr	r1, r3
 1525              	.LVL98:
 1526 000a 0160     		str	r1, [r0]
 1527 000c 01E0     		b	.L153
 1528              	.LVL99:
 1529              	.L154:
1312:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1313:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1314:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1315:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* Disable the selected I2C DMA requests */
1316:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     I2Cx->CR1 &= (uint32_t)~I2C_DMAReq;
 1530              		.loc 1 1316 0
 1531 000e 8B43     		bic	r3, r1
 1532 0010 0360     		str	r3, [r0]
 1533              	.LVL100:
 1534              	.L153:
 1535              		@ sp needed for prologue
1317:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1318:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1536              		.loc 1 1318 0
 1537 0012 00BD     		pop	{pc}
 1538              		.cfi_endproc
 1539              	.LFE70:
 1541              		.section	.text.I2C_GetFlagStatus,"ax",%progbits
 1542              		.align	1
 1543              		.global	I2C_GetFlagStatus
 1544              		.code	16
 1545              		.thumb_func
 1547              	I2C_GetFlagStatus:
 1548              	.LFB71:
1319:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1320:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @}
1321:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1322:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1323:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1324:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /** @defgroup I2C_Group7 Interrupts and flags management functions
1325:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *  @brief   Interrupts and flags management functions 
1326:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  *
1327:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @verbatim
1328:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================
1329:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****              ##### Interrupts and flags management functions  #####
1330:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****  ===============================================================================  
1331:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] This section provides functions allowing to configure the I2C Interrupts 
1332:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          sources and check or clear the flags or pending bits status.
1333:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          The user should identify which mode will be used in his application to manage 
1334:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          the communication: Polling mode, Interrupt mode or DMA mode(refer I2C_Group6).
1335:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1336:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *** Polling Mode ***
1337:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ====================
1338:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In Polling Mode, the I2C communication can be managed by 15 flags:
1339:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_TXE: to indicate the status of Transmit data register empty flag.
1340:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_TXIS: to indicate the status of Transmit interrupt status flag .
1341:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_RXNE: to indicate the status of Receive data register not empty flag.
1342:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_ADDR: to indicate the status of Address matched flag (slave mode).
1343:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_NACKF: to indicate the status of NACK received flag.
1344:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_STOPF: to indicate the status of STOP detection flag.
1345:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_TC: to indicate the status of Transfer complete flag(master mode).
1346:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_TCR: to indicate the status of Transfer complete reload flag.
1347:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_BERR: to indicate the status of Bus error flag.
1348:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_ARLO: to indicate the status of Arbitration lost flag.
1349:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_OVR: to indicate the status of Overrun/Underrun flag.
1350:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_PECERR: to indicate the status of PEC error in reception flag.
1351:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_TIMEOUT: to indicate the status of Timeout or Tlow detection flag.
1352:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_ALERT: to indicate the status of SMBus Alert flag.
1353:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_FLAG_BUSY: to indicate the status of Bus busy flag.
1354:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1355:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In this Mode it is advised to use the following functions:
1356:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (+) FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
1357:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (+) void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG);
1358:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1359:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..]
1360:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (@)Do not use the BUSY flag to handle each data transmission or reception.It is 
1361:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****            better to use the TXIS and RXNE flags instead.
1362:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1363:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *** Interrupt Mode ***
1364:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ======================
1365:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In Interrupt Mode, the I2C communication can be managed by 7 interrupt sources
1366:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****          and 15 pending bits: 
1367:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] Interrupt Source:
1368:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_ERRI: specifies the interrupt source for the Error interrupt.
1369:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TCI: specifies the interrupt source for the Transfer Complete interrupt.
1370:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_STOPI: specifies the interrupt source for the Stop Detection interrupt.
1371:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_NACKI: specifies the interrupt source for the Not Acknowledge received interrupt
1372:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_ADDRI: specifies the interrupt source for the Address Match interrupt.
1373:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_RXI: specifies the interrupt source for the RX interrupt.
1374:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TXI: specifies the interrupt source for the TX interrupt.
1375:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1376:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] Pending Bits:
1377:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TXIS: to indicate the status of Transmit interrupt status flag.
1378:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_RXNE: to indicate the status of Receive data register not empty flag.
1379:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_ADDR: to indicate the status of Address matched flag (slave mode).
1380:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_NACKF: to indicate the status of NACK received flag.
1381:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_STOPF: to indicate the status of STOP detection flag.
1382:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TC: to indicate the status of Transfer complete flag (master mode).
1383:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TCR: to indicate the status of Transfer complete reload flag.
1384:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_BERR: to indicate the status of Bus error flag.
1385:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_ARLO: to indicate the status of Arbitration lost flag.
1386:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_OVR: to indicate the status of Overrun/Underrun flag.
1387:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_PECERR: to indicate the status of PEC error in reception flag.
1388:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_TIMEOUT: to indicate the status of Timeout or Tlow detection flag.
1389:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (#) I2C_IT_ALERT: to indicate the status of SMBus Alert flag.
1390:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1391:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     [..] In this Mode it is advised to use the following functions:
1392:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (+) void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
1393:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****         (+) ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT);
1394:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1395:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** @endverbatim
1396:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @{
1397:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */  
1398:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1399:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1400:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1401:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1402:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1403:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
1404:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Transmit data register empty
1405:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TXIS: Transmit interrupt status
1406:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Receive data register not empty
1407:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address matched (slave mode)
1408:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_NACKF: NACK received flag
1409:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: STOP detection flag
1410:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TC: Transfer complete (master mode)
1411:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TCR: Transfer complete reload
1412:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error
1413:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost
1414:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun
1415:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception
1416:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
1417:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ALERT: SMBus Alert
1418:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy
1419:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1420:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1421:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1422:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1549              		.loc 1 1422 0
 1550              		.cfi_startproc
 1551              	.LVL101:
1423:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
1424:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   FlagStatus bitstatus = RESET;
1425:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1426:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1427:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1428:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1429:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1430:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the ISR register value */
1431:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->ISR;
 1552              		.loc 1 1431 0
 1553 0000 8069     		ldr	r0, [r0, #24]
 1554              	.LVL102:
 1555              		@ sp needed for prologue
1432:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1433:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get flag status */
1434:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= I2C_FLAG;
 1556              		.loc 1 1434 0
 1557 0002 0840     		and	r0, r1
 1558              	.LVL103:
1435:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1436:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if(tmpreg != 0)
1437:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1438:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* I2C_FLAG is set */
1439:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     bitstatus = SET;
1440:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1441:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1442:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1443:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* I2C_FLAG is reset */
1444:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     bitstatus = RESET;
1445:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1446:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return bitstatus;
 1559              		.loc 1 1446 0
 1560 0004 431E     		sub	r3, r0, #1
 1561 0006 9841     		sbc	r0, r0, r3
 1562              	.LVL104:
1447:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** } 
 1563              		.loc 1 1447 0
 1564 0008 7047     		bx	lr
 1565              		.cfi_endproc
 1566              	.LFE71:
 1568              		.section	.text.I2C_ClearFlag,"ax",%progbits
 1569              		.align	1
 1570              		.global	I2C_ClearFlag
 1571              		.code	16
 1572              		.thumb_func
 1574              	I2C_ClearFlag:
 1575              	.LFB72:
1448:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1449:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1450:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1451:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1452:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1453:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be any combination of the following values:
1454:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address matched (slave mode)
1455:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_NACKF: NACK received flag
1456:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: STOP detection flag
1457:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error
1458:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost
1459:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun
1460:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception
1461:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow detection flag
1462:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_FLAG_ALERT: SMBus Alert
1463:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1464:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1465:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1466:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** { 
 1576              		.loc 1 1466 0
 1577              		.cfi_startproc
 1578              	.LVL105:
1467:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1468:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1469:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1470:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1471:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear the selected flag */
1472:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->ICR = I2C_FLAG;
 1579              		.loc 1 1472 0
 1580 0000 C161     		str	r1, [r0, #28]
 1581              		@ sp needed for prologue
1473:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
 1582              		.loc 1 1473 0
 1583 0002 7047     		bx	lr
 1584              		.cfi_endproc
 1585              	.LFE72:
 1587              		.section	.text.I2C_GetITStatus,"ax",%progbits
 1588              		.align	1
 1589              		.global	I2C_GetITStatus
 1590              		.code	16
 1591              		.thumb_func
 1593              	I2C_GetITStatus:
 1594              	.LFB73:
1474:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1475:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1476:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1477:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1478:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check.
1479:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be one of the following values:
1480:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TXIS: Transmit interrupt status
1481:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_RXNE: Receive data register not empty
1482:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address matched (slave mode)
1483:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_NACKF: NACK received flag
1484:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_STOPF: STOP detection flag
1485:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TC: Transfer complete (master mode)
1486:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TCR: Transfer complete reload
1487:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error
1488:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost
1489:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun
1490:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception
1491:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow detection flag
1492:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ALERT: SMBus Alert
1493:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1494:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1495:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1496:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1595              		.loc 1 1496 0
 1596              		.cfi_startproc
 1597 0000 00B5     		push	{lr}
 1598              	.LCFI28:
 1599              		.cfi_def_cfa_offset 4
 1600              		.cfi_offset 14, -4
 1601              	.LVL106:
1497:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t tmpreg = 0;
1498:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   ITStatus bitstatus = RESET;
1499:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   uint32_t enablestatus = 0;
1500:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1501:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1502:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1503:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1504:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1505:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1506:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* If Error interrupt */
1507:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if ((uint32_t)(I2C_IT & ERROR_IT_MASK))
 1602              		.loc 1 1507 0
 1603 0002 FC22     		mov	r2, #252
 1604 0004 9301     		lsl	r3, r2, #6
 1605 0006 1942     		tst	r1, r3
 1606 0008 02D0     		beq	.L159
1508:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1509:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     enablestatus = (uint32_t)((I2C_CR1_ERRIE) & (I2Cx->CR1));
 1607              		.loc 1 1509 0
 1608 000a 0268     		ldr	r2, [r0]
 1609 000c 8023     		mov	r3, #128
 1610 000e 04E0     		b	.L162
 1611              	.L159:
1510:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1511:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* If TC interrupt */
1512:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else if ((uint32_t)(I2C_IT & TC_IT_MASK))
 1612              		.loc 1 1512 0
 1613 0010 C023     		mov	r3, #192
 1614 0012 1942     		tst	r1, r3
 1615 0014 03D0     		beq	.L161
1513:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1514:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     enablestatus = (uint32_t)((I2C_CR1_TCIE) & (I2Cx->CR1));
 1616              		.loc 1 1514 0
 1617 0016 0268     		ldr	r2, [r0]
 1618 0018 4023     		mov	r3, #64
 1619              	.L162:
 1620 001a 1340     		and	r3, r2
 1621              	.LVL107:
 1622 001c 01E0     		b	.L160
 1623              	.LVL108:
 1624              	.L161:
1515:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1516:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1517:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1518:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     enablestatus = (uint32_t)((I2C_IT) & (I2Cx->CR1));
 1625              		.loc 1 1518 0
 1626 001e 0368     		ldr	r3, [r0]
 1627 0020 0B40     		and	r3, r1
 1628              	.LVL109:
 1629              	.L160:
1519:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1520:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   
1521:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get the ISR register value */
1522:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg = I2Cx->ISR;
 1630              		.loc 1 1522 0
 1631 0022 8069     		ldr	r0, [r0, #24]
 1632              	.LVL110:
1523:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1524:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Get flag status */
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= I2C_IT;
1526:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1527:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the status of the specified I2C flag */
1528:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   if((tmpreg != RESET) && enablestatus)
 1633              		.loc 1 1528 0
 1634 0024 5A1E     		sub	r2, r3, #1
 1635 0026 9341     		sbc	r3, r3, r2
 1636              	.LVL111:
1525:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   tmpreg &= I2C_IT;
 1637              		.loc 1 1525 0
 1638 0028 0840     		and	r0, r1
 1639              	.LVL112:
 1640              		.loc 1 1528 0
 1641 002a 411E     		sub	r1, r0, #1
 1642 002c 8841     		sbc	r0, r0, r1
 1643              	.LVL113:
1529:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1530:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* I2C_IT is set */
1531:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     bitstatus = SET;
1532:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1533:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   else
1534:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   {
1535:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     /* I2C_IT is reset */
1536:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****     bitstatus = RESET;
1537:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   }
1538:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1539:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Return the I2C_IT status */
1540:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   return bitstatus;
 1644              		.loc 1 1540 0
 1645 002e 1840     		and	r0, r3
 1646              		@ sp needed for prologue
1541:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1647              		.loc 1 1541 0
 1648 0030 00BD     		pop	{pc}
 1649              		.cfi_endproc
 1650              	.LFE73:
 1652              		.section	.text.I2C_ClearITPendingBit,"ax",%progbits
 1653              		.align	1
 1654              		.global	I2C_ClearITPendingBit
 1655              		.code	16
 1656              		.thumb_func
 1658              	I2C_ClearITPendingBit:
 1659              	.LFB74:
1542:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1543:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** /**
1544:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1545:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
1546:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear.
1547:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *          This parameter can be any combination of the following values:
1548:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address matched (slave mode)
1549:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_NACKF: NACK received flag
1550:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_STOPF: STOP detection flag
1551:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error
1552:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost
1553:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun
1554:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception
1555:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow detection flag
1556:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   *            @arg I2C_IT_ALERT: SMBus Alert
1557:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1558:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   */
1559:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1560:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** {
 1660              		.loc 1 1560 0
 1661              		.cfi_startproc
 1662              	.LVL114:
1561:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Check the parameters */
1562:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1563:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1564:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** 
1565:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   /* Clear the selected flag */
1566:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c ****   I2Cx->ICR = I2C_IT;
 1663              		.loc 1 1566 0
 1664 0000 C161     		str	r1, [r0, #28]
 1665              		@ sp needed for prologue
1567:../Libraries/STM32F0xx_StdPeriph_Driver/src/stm32f0xx_i2c.c **** }
 1666              		.loc 1 1567 0
 1667 0002 7047     		bx	lr
 1668              		.cfi_endproc
 1669              	.LFE74:
 1671              		.text
 1672              	.Letext0:
 1673              		.file 2 "c:\\eclipseindigo\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/ar
 1674              		.file 3 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Source/stm32f
 1675              		.file 4 "C:\\Working\\CURRENT_PROJECT\\SKYBOX\\skysoft_lls_stm32f030c8t6\\main_code\\Libraries\\ST
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f0xx_i2c.c
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:18     .text.I2C_DeInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:23     .text.I2C_DeInit:00000000 I2C_DeInit
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:68     .text.I2C_DeInit:00000030 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:73     .text.I2C_Init:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:78     .text.I2C_Init:00000000 I2C_Init
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:171    .text.I2C_Init:00000058 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:178    .text.I2C_StructInit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:183    .text.I2C_StructInit:00000000 I2C_StructInit
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:215    .text.I2C_Cmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:220    .text.I2C_Cmd:00000000 I2C_Cmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:251    .text.I2C_SoftwareResetCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:256    .text.I2C_SoftwareResetCmd:00000000 I2C_SoftwareResetCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:279    .text.I2C_ITConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:284    .text.I2C_ITConfig:00000000 I2C_ITConfig
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:317    .text.I2C_StretchClockCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:322    .text.I2C_StretchClockCmd:00000000 I2C_StretchClockCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:353    .text.I2C_StretchClockCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:358    .text.I2C_StopModeCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:363    .text.I2C_StopModeCmd:00000000 I2C_StopModeCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:394    .text.I2C_StopModeCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:399    .text.I2C_DualAddressCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:404    .text.I2C_DualAddressCmd:00000000 I2C_DualAddressCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:435    .text.I2C_DualAddressCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:440    .text.I2C_OwnAddress2Config:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:445    .text.I2C_OwnAddress2Config:00000000 I2C_OwnAddress2Config
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:490    .text.I2C_OwnAddress2Config:0000001c $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:495    .text.I2C_GeneralCallCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:500    .text.I2C_GeneralCallCmd:00000000 I2C_GeneralCallCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:531    .text.I2C_GeneralCallCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:536    .text.I2C_SlaveByteControlCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:541    .text.I2C_SlaveByteControlCmd:00000000 I2C_SlaveByteControlCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:572    .text.I2C_SlaveByteControlCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:577    .text.I2C_SlaveAddressConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:582    .text.I2C_SlaveAddressConfig:00000000 I2C_SlaveAddressConfig
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:612    .text.I2C_10BitAddressingModeCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:617    .text.I2C_10BitAddressingModeCmd:00000000 I2C_10BitAddressingModeCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:648    .text.I2C_10BitAddressingModeCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:653    .text.I2C_AutoEndCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:658    .text.I2C_AutoEndCmd:00000000 I2C_AutoEndCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:689    .text.I2C_AutoEndCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:694    .text.I2C_ReloadCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:699    .text.I2C_ReloadCmd:00000000 I2C_ReloadCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:730    .text.I2C_ReloadCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:735    .text.I2C_NumberOfBytesConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:740    .text.I2C_NumberOfBytesConfig:00000000 I2C_NumberOfBytesConfig
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:767    .text.I2C_NumberOfBytesConfig:00000010 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:772    .text.I2C_MasterRequestConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:777    .text.I2C_MasterRequestConfig:00000000 I2C_MasterRequestConfig
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:808    .text.I2C_MasterRequestConfig:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:813    .text.I2C_GenerateSTART:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:818    .text.I2C_GenerateSTART:00000000 I2C_GenerateSTART
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:849    .text.I2C_GenerateSTART:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:854    .text.I2C_GenerateSTOP:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:859    .text.I2C_GenerateSTOP:00000000 I2C_GenerateSTOP
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:890    .text.I2C_GenerateSTOP:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:895    .text.I2C_10BitAddressHeaderCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:900    .text.I2C_10BitAddressHeaderCmd:00000000 I2C_10BitAddressHeaderCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:931    .text.I2C_10BitAddressHeaderCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:936    .text.I2C_AcknowledgeConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:941    .text.I2C_AcknowledgeConfig:00000000 I2C_AcknowledgeConfig
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:972    .text.I2C_AcknowledgeConfig:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:977    .text.I2C_GetAddressMatched:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:982    .text.I2C_GetAddressMatched:00000000 I2C_GetAddressMatched
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1001   .text.I2C_GetTransferDirection:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1006   .text.I2C_GetTransferDirection:00000000 I2C_GetTransferDirection
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1036   .text.I2C_TransferHandling:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1041   .text.I2C_TransferHandling:00000000 I2C_TransferHandling
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1083   .text.I2C_TransferHandling:00000020 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1088   .text.I2C_SMBusAlertCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1093   .text.I2C_SMBusAlertCmd:00000000 I2C_SMBusAlertCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1124   .text.I2C_SMBusAlertCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1129   .text.I2C_ClockTimeoutCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1134   .text.I2C_ClockTimeoutCmd:00000000 I2C_ClockTimeoutCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1165   .text.I2C_ClockTimeoutCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1170   .text.I2C_ExtendedClockTimeoutCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1175   .text.I2C_ExtendedClockTimeoutCmd:00000000 I2C_ExtendedClockTimeoutCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1208   .text.I2C_IdleClockTimeoutCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1213   .text.I2C_IdleClockTimeoutCmd:00000000 I2C_IdleClockTimeoutCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1244   .text.I2C_IdleClockTimeoutCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1249   .text.I2C_TimeoutAConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1254   .text.I2C_TimeoutAConfig:00000000 I2C_TimeoutAConfig
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1284   .text.I2C_TimeoutBConfig:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1289   .text.I2C_TimeoutBConfig:00000000 I2C_TimeoutBConfig
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1318   .text.I2C_TimeoutBConfig:00000014 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1324   .text.I2C_CalculatePEC:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1329   .text.I2C_CalculatePEC:00000000 I2C_CalculatePEC
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1360   .text.I2C_CalculatePEC:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1365   .text.I2C_PECRequestCmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1370   .text.I2C_PECRequestCmd:00000000 I2C_PECRequestCmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1401   .text.I2C_PECRequestCmd:00000018 $d
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1406   .text.I2C_GetPEC:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1411   .text.I2C_GetPEC:00000000 I2C_GetPEC
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1427   .text.I2C_ReadRegister:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1432   .text.I2C_ReadRegister:00000000 I2C_ReadRegister
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1464   .text.I2C_SendData:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1469   .text.I2C_SendData:00000000 I2C_SendData
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1483   .text.I2C_ReceiveData:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1488   .text.I2C_ReceiveData:00000000 I2C_ReceiveData
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1504   .text.I2C_DMACmd:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1509   .text.I2C_DMACmd:00000000 I2C_DMACmd
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1542   .text.I2C_GetFlagStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1547   .text.I2C_GetFlagStatus:00000000 I2C_GetFlagStatus
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1569   .text.I2C_ClearFlag:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1574   .text.I2C_ClearFlag:00000000 I2C_ClearFlag
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1588   .text.I2C_GetITStatus:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1593   .text.I2C_GetITStatus:00000000 I2C_GetITStatus
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1653   .text.I2C_ClearITPendingBit:00000000 $t
C:\Users\khanh\AppData\Local\Temp\cc3WBZwb.s:1658   .text.I2C_ClearITPendingBit:00000000 I2C_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
