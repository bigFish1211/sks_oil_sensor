
g031_bootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001560  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800161c  0800161c  0001161c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017c8  080017c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080017c8  080017c8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017c8  080017c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017c8  080017c8  000117c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017cc  080017cc  000117cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080017d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  20000074  08001844  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  08001844  000208dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c8e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b6  00000000  00000000  00024d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000540  00000000  00000000  000263e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000478  00000000  00000000  00026920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016090  00000000  00000000  00026d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007133  00000000  00000000  0003ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ad1  00000000  00000000  00043f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cba2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010f4  00000000  00000000  000cba7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001604 	.word	0x08001604

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08001604 	.word	0x08001604

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <sendStartDowload>:
#include <stdlib.h>
#include "xprintf.h"

#define FW_KEY										0x534B532A

static void sendStartDowload(void){
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	xprintf("OK\r\n");
 8000220:	4b03      	ldr	r3, [pc, #12]	; (8000230 <sendStartDowload+0x14>)
 8000222:	0018      	movs	r0, r3
 8000224:	f000 ff62 	bl	80010ec <xprintf>
}
 8000228:	46c0      	nop			; (mov r8, r8)
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	46c0      	nop			; (mov r8, r8)
 8000230:	0800161c 	.word	0x0800161c

08000234 <sendACK>:

static void sendACK(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	xprintf("ACK\r\n");
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <sendACK+0x14>)
 800023a:	0018      	movs	r0, r3
 800023c:	f000 ff56 	bl	80010ec <xprintf>
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	08001624 	.word	0x08001624

0800024c <sendNACK>:

static void sendNACK(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	xprintf("NACK\r\n");
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <sendNACK+0x14>)
 8000252:	0018      	movs	r0, r3
 8000254:	f000 ff4a 	bl	80010ec <xprintf>
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	0800162c 	.word	0x0800162c

08000264 <sendERROR>:

static void sendERROR(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	xprintf("ERROR\r\n");
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <sendERROR+0x14>)
 800026a:	0018      	movs	r0, r3
 800026c:	f000 ff3e 	bl	80010ec <xprintf>
}
 8000270:	46c0      	nop			; (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	08001634 	.word	0x08001634

0800027c <getFirmWareInfo>:



T_FIRMWARE appFirmWare;

int getFirmWareInfo(void){
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
	int result  = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
	uint32_t lastRaiseTime = g_appStats.secCount;
 8000286:	4b21      	ldr	r3, [pc, #132]	; (800030c <getFirmWareInfo+0x90>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	60bb      	str	r3, [r7, #8]
	pc_comm.lastRaise = g_appStats.miliCount;
 800028c:	4b1f      	ldr	r3, [pc, #124]	; (800030c <getFirmWareInfo+0x90>)
 800028e:	685a      	ldr	r2, [r3, #4]
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <getFirmWareInfo+0x94>)
 8000292:	4920      	ldr	r1, [pc, #128]	; (8000314 <getFirmWareInfo+0x98>)
 8000294:	505a      	str	r2, [r3, r1]
	while((uint32_t)(g_appStats.secCount-lastRaiseTime) < UPLOAD_TIMEOUT){
 8000296:	e025      	b.n	80002e4 <getFirmWareInfo+0x68>

		if(pc_comm.rxLen && ((uint32_t)(g_appStats.miliCount - pc_comm.lastRaise)>100)){
 8000298:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <getFirmWareInfo+0x94>)
 800029a:	4a1f      	ldr	r2, [pc, #124]	; (8000318 <getFirmWareInfo+0x9c>)
 800029c:	5a9b      	ldrh	r3, [r3, r2]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d020      	beq.n	80002e4 <getFirmWareInfo+0x68>
 80002a2:	4b1a      	ldr	r3, [pc, #104]	; (800030c <getFirmWareInfo+0x90>)
 80002a4:	685a      	ldr	r2, [r3, #4]
 80002a6:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <getFirmWareInfo+0x94>)
 80002a8:	491a      	ldr	r1, [pc, #104]	; (8000314 <getFirmWareInfo+0x98>)
 80002aa:	585b      	ldr	r3, [r3, r1]
 80002ac:	1ad3      	subs	r3, r2, r3
 80002ae:	2b64      	cmp	r3, #100	; 0x64
 80002b0:	d918      	bls.n	80002e4 <getFirmWareInfo+0x68>

			appFirmWare.key = *(uint32_t*) (pc_comm.rxBuff);
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <getFirmWareInfo+0x94>)
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <getFirmWareInfo+0xa0>)
 80002b8:	601a      	str	r2, [r3, #0]

			if (FW_KEY == appFirmWare.key) {
 80002ba:	4b18      	ldr	r3, [pc, #96]	; (800031c <getFirmWareInfo+0xa0>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4a18      	ldr	r2, [pc, #96]	; (8000320 <getFirmWareInfo+0xa4>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d10f      	bne.n	80002e4 <getFirmWareInfo+0x68>

				char *str = (uint32_t)(pc_comm.rxBuff + 4);
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <getFirmWareInfo+0xa8>)
 80002c6:	607b      	str	r3, [r7, #4]
				appFirmWare.len = atoi(str);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 f8d0 	bl	8001470 <atoi>
 80002d0:	0003      	movs	r3, r0
 80002d2:	001a      	movs	r2, r3
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <getFirmWareInfo+0xa0>)
 80002d6:	605a      	str	r2, [r3, #4]
				appFirmWare.available = 1;
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <getFirmWareInfo+0xa0>)
 80002da:	2201      	movs	r2, #1
 80002dc:	721a      	strb	r2, [r3, #8]
				result = 1;
 80002de:	2301      	movs	r3, #1
 80002e0:	60fb      	str	r3, [r7, #12]
				break;
 80002e2:	e005      	b.n	80002f0 <getFirmWareInfo+0x74>
	while((uint32_t)(g_appStats.secCount-lastRaiseTime) < UPLOAD_TIMEOUT){
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <getFirmWareInfo+0x90>)
 80002e6:	689a      	ldr	r2, [r3, #8]
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	1ad3      	subs	r3, r2, r3
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d9d3      	bls.n	8000298 <getFirmWareInfo+0x1c>
			}

		}
	}

	pc_comm.rxLen = 0;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <getFirmWareInfo+0x94>)
 80002f2:	4a09      	ldr	r2, [pc, #36]	; (8000318 <getFirmWareInfo+0x9c>)
 80002f4:	2100      	movs	r1, #0
 80002f6:	5299      	strh	r1, [r3, r2]
	pc_comm.idx = 0;
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <getFirmWareInfo+0x94>)
 80002fa:	2380      	movs	r3, #128	; 0x80
 80002fc:	011b      	lsls	r3, r3, #4
 80002fe:	2100      	movs	r1, #0
 8000300:	52d1      	strh	r1, [r2, r3]
	return result;
 8000302:	68fb      	ldr	r3, [r7, #12]
}
 8000304:	0018      	movs	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	b004      	add	sp, #16
 800030a:	bd80      	pop	{r7, pc}
 800030c:	200000a8 	.word	0x200000a8
 8000310:	200000c4 	.word	0x200000c4
 8000314:	00000804 	.word	0x00000804
 8000318:	00000808 	.word	0x00000808
 800031c:	20000090 	.word	0x20000090
 8000320:	534b532a 	.word	0x534b532a
 8000324:	200000c8 	.word	0x200000c8

08000328 <downLoadDataInNewFirmWare>:

uint32_t imgSize = 0;
uint32_t AppStartPage = FLASH_APPLICATION_PAGE;
int imgtrue = 0;
volatile uint32_t testS = 0;
int downLoadDataInNewFirmWare(uint32_t size){
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]

	imgSize = size;
 8000330:	4b3a      	ldr	r3, [pc, #232]	; (800041c <downLoadDataInNewFirmWare+0xf4>)
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	601a      	str	r2, [r3, #0]
	sendStartDowload();
 8000336:	f7ff ff71 	bl	800021c <sendStartDowload>
	uint32_t lastRaiseTime = g_appStats.secCount;
 800033a:	4b39      	ldr	r3, [pc, #228]	; (8000420 <downLoadDataInNewFirmWare+0xf8>)
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	60fb      	str	r3, [r7, #12]
	pc_comm.lastRaise = g_appStats.miliCount;
 8000340:	4b37      	ldr	r3, [pc, #220]	; (8000420 <downLoadDataInNewFirmWare+0xf8>)
 8000342:	685a      	ldr	r2, [r3, #4]
 8000344:	4b37      	ldr	r3, [pc, #220]	; (8000424 <downLoadDataInNewFirmWare+0xfc>)
 8000346:	4938      	ldr	r1, [pc, #224]	; (8000428 <downLoadDataInNewFirmWare+0x100>)
 8000348:	505a      	str	r2, [r3, r1]
	while (imgSize
 800034a:	e056      	b.n	80003fa <downLoadDataInNewFirmWare+0xd2>
			&& ((uint32_t) (g_appStats.secCount - lastRaiseTime)
					< GET_PACKAGE_TIMEOUT)) {

		testS = (uint32_t) (g_appStats.miliCount - pc_comm.lastRaise);
 800034c:	4b34      	ldr	r3, [pc, #208]	; (8000420 <downLoadDataInNewFirmWare+0xf8>)
 800034e:	685a      	ldr	r2, [r3, #4]
 8000350:	4b34      	ldr	r3, [pc, #208]	; (8000424 <downLoadDataInNewFirmWare+0xfc>)
 8000352:	4935      	ldr	r1, [pc, #212]	; (8000428 <downLoadDataInNewFirmWare+0x100>)
 8000354:	585b      	ldr	r3, [r3, r1]
 8000356:	1ad2      	subs	r2, r2, r3
 8000358:	4b34      	ldr	r3, [pc, #208]	; (800042c <downLoadDataInNewFirmWare+0x104>)
 800035a:	601a      	str	r2, [r3, #0]

		if (pc_comm.rxLen && (testS > COMM_MAX_TIMEOUT)
 800035c:	4b31      	ldr	r3, [pc, #196]	; (8000424 <downLoadDataInNewFirmWare+0xfc>)
 800035e:	4a34      	ldr	r2, [pc, #208]	; (8000430 <downLoadDataInNewFirmWare+0x108>)
 8000360:	5a9b      	ldrh	r3, [r3, r2]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d049      	beq.n	80003fa <downLoadDataInNewFirmWare+0xd2>
 8000366:	4b31      	ldr	r3, [pc, #196]	; (800042c <downLoadDataInNewFirmWare+0x104>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b64      	cmp	r3, #100	; 0x64
 800036c:	d945      	bls.n	80003fa <downLoadDataInNewFirmWare+0xd2>
				&& (testS != 0xffffffff)) {
 800036e:	4b2f      	ldr	r3, [pc, #188]	; (800042c <downLoadDataInNewFirmWare+0x104>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	3301      	adds	r3, #1
 8000374:	d041      	beq.n	80003fa <downLoadDataInNewFirmWare+0xd2>

			lastRaiseTime = g_appStats.secCount;
 8000376:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <downLoadDataInNewFirmWare+0xf8>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	60fb      	str	r3, [r7, #12]

			if ((pc_comm.rxLen != PAGESIZE) && (imgSize >= PAGESIZE)) {
 800037c:	4b29      	ldr	r3, [pc, #164]	; (8000424 <downLoadDataInNewFirmWare+0xfc>)
 800037e:	4a2c      	ldr	r2, [pc, #176]	; (8000430 <downLoadDataInNewFirmWare+0x108>)
 8000380:	5a9a      	ldrh	r2, [r3, r2]
 8000382:	2380      	movs	r3, #128	; 0x80
 8000384:	011b      	lsls	r3, r3, #4
 8000386:	429a      	cmp	r2, r3
 8000388:	d00c      	beq.n	80003a4 <downLoadDataInNewFirmWare+0x7c>
 800038a:	4b24      	ldr	r3, [pc, #144]	; (800041c <downLoadDataInNewFirmWare+0xf4>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	011b      	lsls	r3, r3, #4
 8000392:	429a      	cmp	r2, r3
 8000394:	d306      	bcc.n	80003a4 <downLoadDataInNewFirmWare+0x7c>
				sendERROR();
 8000396:	f7ff ff65 	bl	8000264 <sendERROR>
				imgtrue = 1;
 800039a:	4b26      	ldr	r3, [pc, #152]	; (8000434 <downLoadDataInNewFirmWare+0x10c>)
 800039c:	2201      	movs	r2, #1
 800039e:	601a      	str	r2, [r3, #0]
				return 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	e037      	b.n	8000414 <downLoadDataInNewFirmWare+0xec>

			}

			if (!FlashWritePage(AppStartPage, pc_comm.rxBuff, pc_comm.rxLen)) {
 80003a4:	4b24      	ldr	r3, [pc, #144]	; (8000438 <downLoadDataInNewFirmWare+0x110>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	b298      	uxth	r0, r3
 80003aa:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <downLoadDataInNewFirmWare+0xfc>)
 80003ac:	4a20      	ldr	r2, [pc, #128]	; (8000430 <downLoadDataInNewFirmWare+0x108>)
 80003ae:	5a9a      	ldrh	r2, [r3, r2]
 80003b0:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <downLoadDataInNewFirmWare+0xfc>)
 80003b2:	0019      	movs	r1, r3
 80003b4:	f000 f902 	bl	80005bc <FlashWritePage>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d101      	bne.n	80003c0 <downLoadDataInNewFirmWare+0x98>
				return 0;
 80003bc:	2300      	movs	r3, #0
 80003be:	e029      	b.n	8000414 <downLoadDataInNewFirmWare+0xec>
			}

			pc_comm.lastRaise = g_appStats.miliCount;
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <downLoadDataInNewFirmWare+0xf8>)
 80003c2:	685a      	ldr	r2, [r3, #4]
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <downLoadDataInNewFirmWare+0xfc>)
 80003c6:	4918      	ldr	r1, [pc, #96]	; (8000428 <downLoadDataInNewFirmWare+0x100>)
 80003c8:	505a      	str	r2, [r3, r1]
			imgSize = imgSize - pc_comm.rxLen;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <downLoadDataInNewFirmWare+0xf4>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a15      	ldr	r2, [pc, #84]	; (8000424 <downLoadDataInNewFirmWare+0xfc>)
 80003d0:	4917      	ldr	r1, [pc, #92]	; (8000430 <downLoadDataInNewFirmWare+0x108>)
 80003d2:	5a52      	ldrh	r2, [r2, r1]
 80003d4:	1a9a      	subs	r2, r3, r2
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <downLoadDataInNewFirmWare+0xf4>)
 80003d8:	601a      	str	r2, [r3, #0]
			AppStartPage++;
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <downLoadDataInNewFirmWare+0x110>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	1c5a      	adds	r2, r3, #1
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <downLoadDataInNewFirmWare+0x110>)
 80003e2:	601a      	str	r2, [r3, #0]
			pc_comm.rxLen = 0;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <downLoadDataInNewFirmWare+0xfc>)
 80003e6:	4a12      	ldr	r2, [pc, #72]	; (8000430 <downLoadDataInNewFirmWare+0x108>)
 80003e8:	2100      	movs	r1, #0
 80003ea:	5299      	strh	r1, [r3, r2]
			pc_comm.idx = 0;
 80003ec:	4a0d      	ldr	r2, [pc, #52]	; (8000424 <downLoadDataInNewFirmWare+0xfc>)
 80003ee:	2380      	movs	r3, #128	; 0x80
 80003f0:	011b      	lsls	r3, r3, #4
 80003f2:	2100      	movs	r1, #0
 80003f4:	52d1      	strh	r1, [r2, r3]
			sendACK();
 80003f6:	f7ff ff1d 	bl	8000234 <sendACK>
	while (imgSize
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <downLoadDataInNewFirmWare+0xf4>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d005      	beq.n	800040e <downLoadDataInNewFirmWare+0xe6>
			&& ((uint32_t) (g_appStats.secCount - lastRaiseTime)
 8000402:	4b07      	ldr	r3, [pc, #28]	; (8000420 <downLoadDataInNewFirmWare+0xf8>)
 8000404:	689a      	ldr	r2, [r3, #8]
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	2b04      	cmp	r3, #4
 800040c:	d99e      	bls.n	800034c <downLoadDataInNewFirmWare+0x24>

		}
	}
	sendNACK();
 800040e:	f7ff ff1d 	bl	800024c <sendNACK>
	return 1;
 8000412:	2301      	movs	r3, #1
}
 8000414:	0018      	movs	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	b004      	add	sp, #16
 800041a:	bd80      	pop	{r7, pc}
 800041c:	2000009c 	.word	0x2000009c
 8000420:	200000a8 	.word	0x200000a8
 8000424:	200000c4 	.word	0x200000c4
 8000428:	00000804 	.word	0x00000804
 800042c:	200000a4 	.word	0x200000a4
 8000430:	00000808 	.word	0x00000808
 8000434:	200000a0 	.word	0x200000a0
 8000438:	20000000 	.word	0x20000000

0800043c <jumpToApplication>:

void jumpToApplication(void){
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
	void (*SysMemBootJump)(void);
	volatile uint32_t addr = FLASH_APPLICATION_ADDR;
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <jumpToApplication+0x4c>)
 8000444:	607b      	str	r3, [r7, #4]
#if defined(USE_HAL_DRIVER)
	HAL_RCC_DeInit();
 8000446:	f000 ff97 	bl	8001378 <HAL_RCC_DeInit>
#endif /* defined(USE_HAL_DRIVER) */
#if defined(USE_STDPERIPH_DRIVER)
	RCC_DeInit();
#endif /* defined(USE_STDPERIPH_DRIVER) */

	SysTick->CTRL = 0;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <jumpToApplication+0x50>)
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <jumpToApplication+0x50>)
 8000452:	2200      	movs	r2, #0
 8000454:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000456:	4b0d      	ldr	r3, [pc, #52]	; (800048c <jumpToApplication+0x50>)
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	46c0      	nop			; (mov r8, r8)
	#endif
#if defined(STM32F0)
		SYSCFG->CFGR1 = 0x01;
	#endif
#if defined(STM32G0)
		SYSCFG->CFGR1 = 0x01;
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <jumpToApplication+0x54>)
 8000462:	2201      	movs	r2, #1
 8000464:	601a      	str	r2, [r3, #0]
	#endif
	SysMemBootJump = (void (*)(void)) (*((uint32_t*) (addr + 4)));
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3304      	adds	r3, #4
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	60fb      	str	r3, [r7, #12]

	__set_MSP(*(uint32_t*) addr);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	f383 8808 	msr	MSP, r3
}
 800047a:	46c0      	nop			; (mov r8, r8)

	SysMemBootJump();
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	4798      	blx	r3
}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}
 8000488:	08002800 	.word	0x08002800
 800048c:	e000e010 	.word	0xe000e010
 8000490:	40010000 	.word	0x40010000

08000494 <flash_lock>:
		index++;
	}
	return (checksum_value);
}

static void flash_lock(void){
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	  FLASH->CR |= FLASH_CR_LOCK;
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <flash_lock+0x18>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <flash_lock+0x18>)
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	0609      	lsls	r1, r1, #24
 80004a2:	430a      	orrs	r2, r1
 80004a4:	615a      	str	r2, [r3, #20]
}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40022000 	.word	0x40022000

080004b0 <flash_unlock>:

static void flash_unlock(void) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	if (FLASH->CR & FLASH_CR_LOCK) {
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <flash_unlock+0x20>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	da05      	bge.n	80004c8 <flash_unlock+0x18>
		FLASH->KEYR = FLASH_KEY1;
 80004bc:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <flash_unlock+0x20>)
 80004be:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <flash_unlock+0x24>)
 80004c0:	609a      	str	r2, [r3, #8]
		FLASH->KEYR = FLASH_KEY2;
 80004c2:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <flash_unlock+0x20>)
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <flash_unlock+0x28>)
 80004c6:	609a      	str	r2, [r3, #8]
	}
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	40022000 	.word	0x40022000
 80004d4:	45670123 	.word	0x45670123
 80004d8:	cdef89ab 	.word	0xcdef89ab

080004dc <flashEraserPage>:

int flashEraserPage(uint32_t Page){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	}
	 return 1;
#else
	// flash_unlock();

	while ((FLASH->SR & FLASH_SR_BSY1));
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <flashEraserPage+0x74>)
 80004e8:	691a      	ldr	r2, [r3, #16]
 80004ea:	2380      	movs	r3, #128	; 0x80
 80004ec:	025b      	lsls	r3, r3, #9
 80004ee:	4013      	ands	r3, r2
 80004f0:	d1f9      	bne.n	80004e6 <flashEraserPage+0xa>
	FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <flashEraserPage+0x74>)
 80004f4:	695a      	ldr	r2, [r3, #20]
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <flashEraserPage+0x74>)
 80004f8:	2102      	movs	r1, #2
 80004fa:	430a      	orrs	r2, r1
 80004fc:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_PNB & (Page<<3));
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <flashEraserPage+0x74>)
 8000500:	6959      	ldr	r1, [r3, #20]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	4a13      	ldr	r2, [pc, #76]	; (8000554 <flashEraserPage+0x78>)
 8000508:	401a      	ands	r2, r3
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <flashEraserPage+0x74>)
 800050c:	430a      	orrs	r2, r1
 800050e:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <flashEraserPage+0x74>)
 8000512:	695a      	ldr	r2, [r3, #20]
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <flashEraserPage+0x74>)
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	0249      	lsls	r1, r1, #9
 800051a:	430a      	orrs	r2, r1
 800051c:	615a      	str	r2, [r3, #20]
	while ((FLASH->SR & FLASH_SR_BSY1));
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <flashEraserPage+0x74>)
 8000522:	691a      	ldr	r2, [r3, #16]
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	025b      	lsls	r3, r3, #9
 8000528:	4013      	ands	r3, r2
 800052a:	d1f9      	bne.n	8000520 <flashEraserPage+0x44>
	FLASH->CR &= ~FLASH_SR_BSY1;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <flashEraserPage+0x74>)
 800052e:	695a      	ldr	r2, [r3, #20]
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <flashEraserPage+0x74>)
 8000532:	4909      	ldr	r1, [pc, #36]	; (8000558 <flashEraserPage+0x7c>)
 8000534:	400a      	ands	r2, r1
 8000536:	615a      	str	r2, [r3, #20]
	FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <flashEraserPage+0x74>)
 800053a:	695a      	ldr	r2, [r3, #20]
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <flashEraserPage+0x74>)
 800053e:	2102      	movs	r1, #2
 8000540:	438a      	bics	r2, r1
 8000542:	615a      	str	r2, [r3, #20]

	//flash_lock();
	return 1;
 8000544:	2301      	movs	r3, #1
#endif
}
 8000546:	0018      	movs	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	b002      	add	sp, #8
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	40022000 	.word	0x40022000
 8000554:	00001ff8 	.word	0x00001ff8
 8000558:	fffeffff 	.word	0xfffeffff

0800055c <flash_ProgramDoubleWord>:
	FLASH->CR &= ~FLASH_CR_PG;

	return 1;
}

int flash_ProgramDoubleWord(uint32_t addr, uint64_t data){
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	603a      	str	r2, [r7, #0]
 8000566:	607b      	str	r3, [r7, #4]

	while((FLASH->SR & FLASH_SR_BSY1));
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <flash_ProgramDoubleWord+0x5c>)
 800056c:	691a      	ldr	r2, [r3, #16]
 800056e:	2380      	movs	r3, #128	; 0x80
 8000570:	025b      	lsls	r3, r3, #9
 8000572:	4013      	ands	r3, r2
 8000574:	d1f9      	bne.n	800056a <flash_ProgramDoubleWord+0xe>
	FLASH->CR |= FLASH_CR_PG;
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <flash_ProgramDoubleWord+0x5c>)
 8000578:	695a      	ldr	r2, [r3, #20]
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <flash_ProgramDoubleWord+0x5c>)
 800057c:	2101      	movs	r1, #1
 800057e:	430a      	orrs	r2, r1
 8000580:	615a      	str	r2, [r3, #20]

	*(uint32_t*)addr = (uint32_t)data;
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	683a      	ldr	r2, [r7, #0]
 8000586:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000588:	f3bf 8f6f 	isb	sy
}
 800058c:	46c0      	nop			; (mov r8, r8)
	__ISB();
	 *(uint32_t *)(addr + 4U) = (uint32_t)(data >> 32U);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	001c      	movs	r4, r3
 8000592:	2300      	movs	r3, #0
 8000594:	001d      	movs	r5, r3
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	3304      	adds	r3, #4
 800059a:	0022      	movs	r2, r4
 800059c:	601a      	str	r2, [r3, #0]
	while((FLASH->SR & FLASH_SR_BSY1));
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <flash_ProgramDoubleWord+0x5c>)
 80005a2:	691a      	ldr	r2, [r3, #16]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	025b      	lsls	r3, r3, #9
 80005a8:	4013      	ands	r3, r2
 80005aa:	d1f9      	bne.n	80005a0 <flash_ProgramDoubleWord+0x44>

	//FLASH->CR &= ~FLASH_CR_PG;
	return 1;
 80005ac:	2301      	movs	r3, #1
}
 80005ae:	0018      	movs	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b004      	add	sp, #16
 80005b4:	bdb0      	pop	{r4, r5, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40022000 	.word	0x40022000

080005bc <FlashWritePage>:


int FlashWritePage(uint16_t pageNum, uint8_t *pdata,uint16_t len){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6039      	str	r1, [r7, #0]
 80005c4:	0011      	movs	r1, r2
 80005c6:	1dbb      	adds	r3, r7, #6
 80005c8:	1c02      	adds	r2, r0, #0
 80005ca:	801a      	strh	r2, [r3, #0]
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	1c0a      	adds	r2, r1, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	}
#endif

	HAL_FLASH_Lock();
#endif
	uint32_t pageAddr = (uint32_t) (pageNum * FLASH_PAGE_SIZE + FLASH_BASE);
 80005d2:	1dbb      	adds	r3, r7, #6
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	0252      	lsls	r2, r2, #9
 80005da:	4694      	mov	ip, r2
 80005dc:	4463      	add	r3, ip
 80005de:	02db      	lsls	r3, r3, #11
 80005e0:	617b      	str	r3, [r7, #20]
	uint64_t *pRecord = (uint64_t*) pdata;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	613b      	str	r3, [r7, #16]

	flash_unlock();
 80005e6:	f7ff ff63 	bl	80004b0 <flash_unlock>
	//clear flag;
/*	__HAL_FLASH_CLEAR_FLAG(
				FLASH_FLAG_EOP |FLASH_FLAG_WRPERR |FLASH_FLAG_PGAERR);*/
	flashEraserPage(pageNum);
 80005ea:	1dbb      	adds	r3, r7, #6
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ff74 	bl	80004dc <flashEraserPage>
	for (int i = 0; i < len; i += 8,pRecord++,pageAddr += 8) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	e015      	b.n	8000626 <FlashWritePage+0x6a>
		if (!flash_ProgramDoubleWord(pageAddr, *pRecord)) {
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	6979      	ldr	r1, [r7, #20]
 8000602:	0008      	movs	r0, r1
 8000604:	f7ff ffaa 	bl	800055c <flash_ProgramDoubleWord>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d103      	bne.n	8000614 <FlashWritePage+0x58>
			flash_lock();
 800060c:	f7ff ff42 	bl	8000494 <flash_lock>
			return 0;
 8000610:	2300      	movs	r3, #0
 8000612:	e010      	b.n	8000636 <FlashWritePage+0x7a>
	for (int i = 0; i < len; i += 8,pRecord++,pageAddr += 8) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3308      	adds	r3, #8
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	693b      	ldr	r3, [r7, #16]
 800061c:	3308      	adds	r3, #8
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	3308      	adds	r3, #8
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	dbe4      	blt.n	80005fa <FlashWritePage+0x3e>
		}
	}
	flash_lock();
 8000630:	f7ff ff30 	bl	8000494 <flash_lock>
	return 1;
 8000634:	2301      	movs	r3, #1
}
 8000636:	0018      	movs	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	b006      	add	sp, #24
 800063c:	bd80      	pop	{r7, pc}

0800063e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  mainTask();
 8000642:	f000 f801 	bl	8000648 <mainTask>
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x8>

08000648 <mainTask>:
							};

START_CONFIG g_config;
static int setup(void);

int mainTask(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

	setup();
 800064c:	f000 f820 	bl	8000690 <setup>
	FlashReadPage(flashAddr, readFlashBuff, sizeof(readFlashBuff));
	xprintf("%s",readFlashBuff);
#endif
# if MAIN_PROGRAM

	if (getFirmWareInfo()) {
 8000650:	f7ff fe14 	bl	800027c <getFirmWareInfo>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d00d      	beq.n	8000674 <mainTask+0x2c>
		if (downLoadDataInNewFirmWare(appFirmWare.len)) {
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <mainTask+0x3c>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	0018      	movs	r0, r3
 800065e:	f7ff fe63 	bl	8000328 <downLoadDataInNewFirmWare>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d00c      	beq.n	8000680 <mainTask+0x38>
			xprintf("download done start application\r\n");
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <mainTask+0x40>)
 8000668:	0018      	movs	r0, r3
 800066a:	f000 fd3f 	bl	80010ec <xprintf>
			jumpToApplication();
 800066e:	f7ff fee5 	bl	800043c <jumpToApplication>
 8000672:	e005      	b.n	8000680 <mainTask+0x38>
		}
	} else {
		//xprintf("download time out start application\r\n");
		xprintf("ok\r\n");
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <mainTask+0x44>)
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fd38 	bl	80010ec <xprintf>
		jumpToApplication();
 800067c:	f7ff fede 	bl	800043c <jumpToApplication>
	}
#endif
	while (1) {
 8000680:	e7fe      	b.n	8000680 <mainTask+0x38>
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	20000090 	.word	0x20000090
 8000688:	0800163c 	.word	0x0800163c
 800068c:	08001660 	.word	0x08001660

08000690 <setup>:
	}
	return 0;
}

static int setup(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	systemInit();
 8000694:	f000 f910 	bl	80008b8 <systemInit>
	comm_init();
 8000698:	f000 fa42 	bl	8000b20 <comm_init>
	xdev_out(PC_putChar);
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <setup+0x1c>)
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <setup+0x20>)
 80006a0:	601a      	str	r2, [r3, #0]
	return 0;
 80006a2:	2300      	movs	r3, #0

}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	200008d0 	.word	0x200008d0
 80006b0:	08000b35 	.word	0x08000b35

080006b4 <SysTick_Handler>:

void SysTick_Handler(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	++g_appStats.miliCount;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <SysTick_Handler+0x3c>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <SysTick_Handler+0x3c>)
 80006c0:	605a      	str	r2, [r3, #4]
	++g_appStats.tickCount;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <SysTick_Handler+0x3c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <SysTick_Handler+0x3c>)
 80006ca:	601a      	str	r2, [r3, #0]
	if (g_appStats.tickCount >= 1000) {
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <SysTick_Handler+0x3c>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	23fa      	movs	r3, #250	; 0xfa
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d307      	bcc.n	80006e8 <SysTick_Handler+0x34>
		g_appStats.tickCount = 0;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <SysTick_Handler+0x3c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
		++g_appStats.secCount;
 80006de:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <SysTick_Handler+0x3c>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <SysTick_Handler+0x3c>)
 80006e6:	609a      	str	r2, [r3, #8]
	}
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	200000a8 	.word	0x200000a8

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_IRQn 0 */
	uint8_t cChar;
	if (USART1->ISR & USART_ISR_RXNE_RXFNE) {
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <USART1_IRQHandler+0x6c>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	2220      	movs	r2, #32
 8000720:	4013      	ands	r3, r2
 8000722:	d029      	beq.n	8000778 <USART1_IRQHandler+0x64>

		cChar = USART1->RDR;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <USART1_IRQHandler+0x6c>)
 8000726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	701a      	strb	r2, [r3, #0]
		pc_comm.rxBuff[pc_comm.idx] = cChar;
 800072c:	4a15      	ldr	r2, [pc, #84]	; (8000784 <USART1_IRQHandler+0x70>)
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	5ad3      	ldrh	r3, [r2, r3]
 8000734:	0019      	movs	r1, r3
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <USART1_IRQHandler+0x70>)
 8000738:	1dfa      	adds	r2, r7, #7
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	545a      	strb	r2, [r3, r1]
		++ pc_comm.idx;
 800073e:	4a11      	ldr	r2, [pc, #68]	; (8000784 <USART1_IRQHandler+0x70>)
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	5ad3      	ldrh	r3, [r2, r3]
 8000746:	3301      	adds	r3, #1
 8000748:	b299      	uxth	r1, r3
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <USART1_IRQHandler+0x70>)
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	52d1      	strh	r1, [r2, r3]
		++ pc_comm.rxLen;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <USART1_IRQHandler+0x70>)
 8000754:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <USART1_IRQHandler+0x74>)
 8000756:	5a9b      	ldrh	r3, [r3, r2]
 8000758:	3301      	adds	r3, #1
 800075a:	b299      	uxth	r1, r3
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <USART1_IRQHandler+0x70>)
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <USART1_IRQHandler+0x74>)
 8000760:	5299      	strh	r1, [r3, r2]
		//clear flag;
		pc_comm.lastRaise = g_appStats.miliCount;
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <USART1_IRQHandler+0x78>)
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <USART1_IRQHandler+0x70>)
 8000768:	4909      	ldr	r1, [pc, #36]	; (8000790 <USART1_IRQHandler+0x7c>)
 800076a:	505a      	str	r2, [r3, r1]
		USART1->ICR |= USART_RQR_RXFRQ;
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <USART1_IRQHandler+0x6c>)
 800076e:	6a1a      	ldr	r2, [r3, #32]
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <USART1_IRQHandler+0x6c>)
 8000772:	2108      	movs	r1, #8
 8000774:	430a      	orrs	r2, r1
 8000776:	621a      	str	r2, [r3, #32]
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b002      	add	sp, #8
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40013800 	.word	0x40013800
 8000784:	200000c4 	.word	0x200000c4
 8000788:	00000808 	.word	0x00000808
 800078c:	200000a8 	.word	0x200000a8
 8000790:	00000804 	.word	0x00000804

08000794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	0002      	movs	r2, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b7f      	cmp	r3, #127	; 0x7f
 80007a8:	d828      	bhi.n	80007fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007aa:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <__NVIC_SetPriority+0xd4>)
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	089b      	lsrs	r3, r3, #2
 80007b4:	33c0      	adds	r3, #192	; 0xc0
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	589b      	ldr	r3, [r3, r2]
 80007ba:	1dfa      	adds	r2, r7, #7
 80007bc:	7812      	ldrb	r2, [r2, #0]
 80007be:	0011      	movs	r1, r2
 80007c0:	2203      	movs	r2, #3
 80007c2:	400a      	ands	r2, r1
 80007c4:	00d2      	lsls	r2, r2, #3
 80007c6:	21ff      	movs	r1, #255	; 0xff
 80007c8:	4091      	lsls	r1, r2
 80007ca:	000a      	movs	r2, r1
 80007cc:	43d2      	mvns	r2, r2
 80007ce:	401a      	ands	r2, r3
 80007d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	019b      	lsls	r3, r3, #6
 80007d6:	22ff      	movs	r2, #255	; 0xff
 80007d8:	401a      	ands	r2, r3
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0018      	movs	r0, r3
 80007e0:	2303      	movs	r3, #3
 80007e2:	4003      	ands	r3, r0
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e8:	481f      	ldr	r0, [pc, #124]	; (8000868 <__NVIC_SetPriority+0xd4>)
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	089b      	lsrs	r3, r3, #2
 80007f2:	430a      	orrs	r2, r1
 80007f4:	33c0      	adds	r3, #192	; 0xc0
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007fa:	e031      	b.n	8000860 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fc:	4a1b      	ldr	r2, [pc, #108]	; (800086c <__NVIC_SetPriority+0xd8>)
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0019      	movs	r1, r3
 8000804:	230f      	movs	r3, #15
 8000806:	400b      	ands	r3, r1
 8000808:	3b08      	subs	r3, #8
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	3306      	adds	r3, #6
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	18d3      	adds	r3, r2, r3
 8000812:	3304      	adds	r3, #4
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1dfa      	adds	r2, r7, #7
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	0011      	movs	r1, r2
 800081c:	2203      	movs	r2, #3
 800081e:	400a      	ands	r2, r1
 8000820:	00d2      	lsls	r2, r2, #3
 8000822:	21ff      	movs	r1, #255	; 0xff
 8000824:	4091      	lsls	r1, r2
 8000826:	000a      	movs	r2, r1
 8000828:	43d2      	mvns	r2, r2
 800082a:	401a      	ands	r2, r3
 800082c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	019b      	lsls	r3, r3, #6
 8000832:	22ff      	movs	r2, #255	; 0xff
 8000834:	401a      	ands	r2, r3
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	0018      	movs	r0, r3
 800083c:	2303      	movs	r3, #3
 800083e:	4003      	ands	r3, r0
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <__NVIC_SetPriority+0xd8>)
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	001c      	movs	r4, r3
 800084c:	230f      	movs	r3, #15
 800084e:	4023      	ands	r3, r4
 8000850:	3b08      	subs	r3, #8
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	430a      	orrs	r2, r1
 8000856:	3306      	adds	r3, #6
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	18c3      	adds	r3, r0, r3
 800085c:	3304      	adds	r3, #4
 800085e:	601a      	str	r2, [r3, #0]
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b003      	add	sp, #12
 8000866:	bd90      	pop	{r4, r7, pc}
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	1e5a      	subs	r2, r3, #1
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	045b      	lsls	r3, r3, #17
 8000880:	429a      	cmp	r2, r3
 8000882:	d301      	bcc.n	8000888 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000884:	2301      	movs	r3, #1
 8000886:	e010      	b.n	80008aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <SysTick_Config+0x44>)
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	3a01      	subs	r2, #1
 800088e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000890:	2301      	movs	r3, #1
 8000892:	425b      	negs	r3, r3
 8000894:	2103      	movs	r1, #3
 8000896:	0018      	movs	r0, r3
 8000898:	f7ff ff7c 	bl	8000794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <SysTick_Config+0x44>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SysTick_Config+0x44>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	0018      	movs	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <systemInit>:

static void SetSysClock(void);
static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
static void systickConfig(void);

void systemInit(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	SetSysClock();
 80008bc:	f000 f828 	bl	8000910 <SetSysClock>
	systickConfig();
 80008c0:	f000 f818 	bl	80008f4 <systickConfig>
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <SysTick_CLKSourceConfig>:

static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d105      	bne.n	80008e6 <SysTick_CLKSourceConfig+0x1a>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SysTick_CLKSourceConfig+0x24>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <SysTick_CLKSourceConfig+0x24>)
 80008e0:	2104      	movs	r1, #4
 80008e2:	430a      	orrs	r2, r1
 80008e4:	601a      	str	r2, [r3, #0]
	}
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b002      	add	sp, #8
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <systickConfig>:

static void systickConfig(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 80008f8:	2004      	movs	r0, #4
 80008fa:	f7ff ffe7 	bl	80008cc <SysTick_CLKSourceConfig>
	SysTick_Config(systemClock / 1000);
 80008fe:	23fa      	movs	r3, #250	; 0xfa
 8000900:	021b      	lsls	r3, r3, #8
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff ffb4 	bl	8000870 <SysTick_Config>
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <SetSysClock>:

static void SetSysClock(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
	__IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]

	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t) RCC_CR_HSEON);
 800091e:	4b33      	ldr	r3, [pc, #204]	; (80009ec <SetSysClock+0xdc>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4b32      	ldr	r3, [pc, #200]	; (80009ec <SetSysClock+0xdc>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0249      	lsls	r1, r1, #9
 8000928:	430a      	orrs	r2, r1
 800092a:	601a      	str	r2, [r3, #0]
		HSEStatus = RCC->CR & RCC_CR_HSERDY;
		StartUpCounter++;
	} while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
*/

	while((RCC->CR & RCC_CR_HSERDY) == 0);
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <SetSysClock+0xdc>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	029b      	lsls	r3, r3, #10
 8000936:	4013      	ands	r3, r2
 8000938:	d0f9      	beq.n	800092e <SetSysClock+0x1e>

	if ((RCC->CR & RCC_CR_HSERDY) != 0) {
 800093a:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <SetSysClock+0xdc>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	029b      	lsls	r3, r3, #10
 8000942:	4013      	ands	r3, r2
 8000944:	d002      	beq.n	800094c <SetSysClock+0x3c>
		HSEStatus = (uint32_t) 0x01;
 8000946:	2301      	movs	r3, #1
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	e001      	b.n	8000950 <SetSysClock+0x40>
	} else {
		HSEStatus = (uint32_t) 0x00;
 800094c:	2300      	movs	r3, #0
 800094e:	603b      	str	r3, [r7, #0]
	}

	if (HSEStatus == (uint32_t) 0x01) {
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d145      	bne.n	80009e2 <SetSysClock+0xd2>
		/* Enable Prefetch Buffer and set Flash Latency */
		FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <SetSysClock+0xe0>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <SetSysClock+0xe0>)
 800095c:	2182      	movs	r1, #130	; 0x82
 800095e:	0049      	lsls	r1, r1, #1
 8000960:	430a      	orrs	r2, r1
 8000962:	601a      	str	r2, [r3, #0]

		// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
		// APB PR
		RCC->CFGR &= (uint32_t) (~RCC_CFGR_HPRE);
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <SetSysClock+0xdc>)
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	4b20      	ldr	r3, [pc, #128]	; (80009ec <SetSysClock+0xdc>)
 800096a:	4922      	ldr	r1, [pc, #136]	; (80009f4 <SetSysClock+0xe4>)
 800096c:	400a      	ands	r2, r1
 800096e:	609a      	str	r2, [r3, #8]
		// AHB PR
		RCC->CFGR &= (uint32_t) (~RCC_CFGR_PPRE);
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <SetSysClock+0xdc>)
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <SetSysClock+0xdc>)
 8000976:	4920      	ldr	r1, [pc, #128]	; (80009f8 <SetSysClock+0xe8>)
 8000978:	400a      	ands	r2, r1
 800097a:	609a      	str	r2, [r3, #8]

		//PLL INPUT CLOCK SOURCE HSE
		RCC -> PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <SetSysClock+0xdc>)
 800097e:	68da      	ldr	r2, [r3, #12]
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <SetSysClock+0xdc>)
 8000982:	2103      	movs	r1, #3
 8000984:	430a      	orrs	r2, r1
 8000986:	60da      	str	r2, [r3, #12]
		/* PLL configuration = HSE = 64 MHz */
		//PLLM = 1
		//PLLN = 16
		//PLLR = 2

		RCC->PLLCFGR &= (uint32_t) ((uint32_t) ~(RCC_PLLCFGR_PLLM
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <SetSysClock+0xdc>)
 800098a:	68da      	ldr	r2, [r3, #12]
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <SetSysClock+0xdc>)
 800098e:	491b      	ldr	r1, [pc, #108]	; (80009fc <SetSysClock+0xec>)
 8000990:	400a      	ands	r2, r1
 8000992:	60da      	str	r2, [r3, #12]
				| RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR));

		RCC->PLLCFGR|=  (RCC_PLLCFGR_PLLN_4)
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <SetSysClock+0xdc>)
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <SetSysClock+0xdc>)
 800099a:	4919      	ldr	r1, [pc, #100]	; (8000a00 <SetSysClock+0xf0>)
 800099c:	430a      	orrs	r2, r1
 800099e:	60da      	str	r2, [r3, #12]
						| (RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLREN)
						| (RCC_PLLCFGR_PLLQEN)
						| (RCC_PLLCFGR_PLLSRC_HSE);

		/* Enable PLL */
		RCC->CR |= RCC_CR_PLLON;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <SetSysClock+0xdc>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <SetSysClock+0xdc>)
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	0449      	lsls	r1, r1, #17
 80009aa:	430a      	orrs	r2, r1
 80009ac:	601a      	str	r2, [r3, #0]

		/* Wait till PLL is ready */
		while ((RCC->CR & RCC_CR_PLLRDY) == 0) {
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <SetSysClock+0xdc>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	049b      	lsls	r3, r3, #18
 80009b8:	4013      	ands	r3, r2
 80009ba:	d0f9      	beq.n	80009b0 <SetSysClock+0xa0>
		}

		/* Select PLL as system clock source */
		RCC->CFGR &= (uint32_t) ((uint32_t) ~(RCC_CFGR_SW));
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <SetSysClock+0xdc>)
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <SetSysClock+0xdc>)
 80009c2:	2107      	movs	r1, #7
 80009c4:	438a      	bics	r2, r1
 80009c6:	609a      	str	r2, [r3, #8]
		RCC->CFGR |= (uint32_t) RCC_CFGR_SW_1;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <SetSysClock+0xdc>)
 80009ca:	689a      	ldr	r2, [r3, #8]
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <SetSysClock+0xdc>)
 80009ce:	2102      	movs	r1, #2
 80009d0:	430a      	orrs	r2, r1
 80009d2:	609a      	str	r2, [r3, #8]

		/* Wait till PLL is used as system clock source */
		while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1)
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <SetSysClock+0xdc>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2238      	movs	r2, #56	; 0x38
 80009dc:	4013      	ands	r3, r2
 80009de:	2b10      	cmp	r3, #16
 80009e0:	d1f9      	bne.n	80009d6 <SetSysClock+0xc6>
			;
	}
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b002      	add	sp, #8
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40022000 	.word	0x40022000
 80009f4:	fffff0ff 	.word	0xfffff0ff
 80009f8:	ffff8fff 	.word	0xffff8fff
 80009fc:	1fff808f 	.word	0x1fff808f
 8000a00:	31001003 	.word	0x31001003

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <__NVIC_EnableIRQ>:
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	0002      	movs	r2, r0
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b7f      	cmp	r3, #127	; 0x7f
 8000a22:	d809      	bhi.n	8000a38 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	001a      	movs	r2, r3
 8000a2a:	231f      	movs	r3, #31
 8000a2c:	401a      	ands	r2, r3
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_EnableIRQ+0x30>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	4091      	lsls	r1, r2
 8000a34:	000a      	movs	r2, r1
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <__NVIC_SetPriority>:
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b7f      	cmp	r3, #127	; 0x7f
 8000a58:	d828      	bhi.n	8000aac <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5a:	4a2f      	ldr	r2, [pc, #188]	; (8000b18 <__NVIC_SetPriority+0xd4>)
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	33c0      	adds	r3, #192	; 0xc0
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	589b      	ldr	r3, [r3, r2]
 8000a6a:	1dfa      	adds	r2, r7, #7
 8000a6c:	7812      	ldrb	r2, [r2, #0]
 8000a6e:	0011      	movs	r1, r2
 8000a70:	2203      	movs	r2, #3
 8000a72:	400a      	ands	r2, r1
 8000a74:	00d2      	lsls	r2, r2, #3
 8000a76:	21ff      	movs	r1, #255	; 0xff
 8000a78:	4091      	lsls	r1, r2
 8000a7a:	000a      	movs	r2, r1
 8000a7c:	43d2      	mvns	r2, r2
 8000a7e:	401a      	ands	r2, r3
 8000a80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	019b      	lsls	r3, r3, #6
 8000a86:	22ff      	movs	r2, #255	; 0xff
 8000a88:	401a      	ands	r2, r3
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	0018      	movs	r0, r3
 8000a90:	2303      	movs	r3, #3
 8000a92:	4003      	ands	r3, r0
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a98:	481f      	ldr	r0, [pc, #124]	; (8000b18 <__NVIC_SetPriority+0xd4>)
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	089b      	lsrs	r3, r3, #2
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	33c0      	adds	r3, #192	; 0xc0
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	501a      	str	r2, [r3, r0]
}
 8000aaa:	e031      	b.n	8000b10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <__NVIC_SetPriority+0xd8>)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	0019      	movs	r1, r3
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	400b      	ands	r3, r1
 8000ab8:	3b08      	subs	r3, #8
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	3306      	adds	r3, #6
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	18d3      	adds	r3, r2, r3
 8000ac2:	3304      	adds	r3, #4
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	1dfa      	adds	r2, r7, #7
 8000ac8:	7812      	ldrb	r2, [r2, #0]
 8000aca:	0011      	movs	r1, r2
 8000acc:	2203      	movs	r2, #3
 8000ace:	400a      	ands	r2, r1
 8000ad0:	00d2      	lsls	r2, r2, #3
 8000ad2:	21ff      	movs	r1, #255	; 0xff
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	000a      	movs	r2, r1
 8000ad8:	43d2      	mvns	r2, r2
 8000ada:	401a      	ands	r2, r3
 8000adc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	019b      	lsls	r3, r3, #6
 8000ae2:	22ff      	movs	r2, #255	; 0xff
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0018      	movs	r0, r3
 8000aec:	2303      	movs	r3, #3
 8000aee:	4003      	ands	r3, r0
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <__NVIC_SetPriority+0xd8>)
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	001c      	movs	r4, r3
 8000afc:	230f      	movs	r3, #15
 8000afe:	4023      	ands	r3, r4
 8000b00:	3b08      	subs	r3, #8
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	430a      	orrs	r2, r1
 8000b06:	3306      	adds	r3, #6
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	18c3      	adds	r3, r0, r3
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b003      	add	sp, #12
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <comm_init>:

static void uart1_putChar(uint8_t ch);
static void uart1_putString(uint8_t *str);
static void uart1_putArray(uint8_t *str, int len);

void comm_init(void){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

	MX_USART1_UART_Init(PC_COMM_BAUD);
 8000b24:	2396      	movs	r3, #150	; 0x96
 8000b26:	01db      	lsls	r3, r3, #7
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 f82b 	bl	8000b84 <MX_USART1_UART_Init>
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <PC_putChar>:


void PC_putChar(uint8_t ch){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
	uart1_putChar(ch);
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	0018      	movs	r0, r3
 8000b46:	f000 f805 	bl	8000b54 <uart1_putChar>
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <uart1_putChar>:

void PC_putArray(uint8_t *str, int len){
	uart1_putArray(str,len);
}

static void uart1_putChar(uint8_t ch){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	0002      	movs	r2, r0
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	701a      	strb	r2, [r3, #0]
	while ((USART1->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <uart1_putChar+0x2c>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2b80      	cmp	r3, #128	; 0x80
 8000b6c:	d1f9      	bne.n	8000b62 <uart1_putChar+0xe>
	USART1->TDR = ch;
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <uart1_putChar+0x2c>)
 8000b70:	1dfa      	adds	r2, r7, #7
 8000b72:	7812      	ldrb	r2, [r2, #0]
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40013800 	.word	0x40013800

08000b84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(uint32_t baud)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* Peripheral clock enable */
  	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8000b8c:	4b70      	ldr	r3, [pc, #448]	; (8000d50 <MX_USART1_UART_Init+0x1cc>)
 8000b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b90:	4b6f      	ldr	r3, [pc, #444]	; (8000d50 <MX_USART1_UART_Init+0x1cc>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	430a      	orrs	r2, r1
 8000b96:	635a      	str	r2, [r3, #52]	; 0x34
  	RCC->APBENR2 |= RCC_APBENR2_USART1EN;
 8000b98:	4b6d      	ldr	r3, [pc, #436]	; (8000d50 <MX_USART1_UART_Init+0x1cc>)
 8000b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b9c:	4b6c      	ldr	r3, [pc, #432]	; (8000d50 <MX_USART1_UART_Init+0x1cc>)
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	01c9      	lsls	r1, r1, #7
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	641a      	str	r2, [r3, #64]	; 0x40
  	    PA10     ------> USART1_RX
  	    PA9    ------> USART1_TX
  	    */
  	/*PB6     ------> USART1_TX*/
  	//mode AF
  	GPIOA->MODER &= ~GPIO_MODER_MODE9;
 8000ba6:	23a0      	movs	r3, #160	; 0xa0
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	23a0      	movs	r3, #160	; 0xa0
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	4968      	ldr	r1, [pc, #416]	; (8000d54 <MX_USART1_UART_Init+0x1d0>)
 8000bb2:	400a      	ands	r2, r1
 8000bb4:	601a      	str	r2, [r3, #0]
  	GPIOA->MODER |=  GPIO_MODER_MODE9_1;//mode AF
 8000bb6:	23a0      	movs	r3, #160	; 0xa0
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	23a0      	movs	r3, #160	; 0xa0
 8000bbe:	05db      	lsls	r3, r3, #23
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	0309      	lsls	r1, r1, #12
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	601a      	str	r2, [r3, #0]
  	//mode push-pull
  	GPIOA ->OTYPER &= ~GPIO_OTYPER_OT9;
 8000bc8:	23a0      	movs	r3, #160	; 0xa0
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	23a0      	movs	r3, #160	; 0xa0
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	4961      	ldr	r1, [pc, #388]	; (8000d58 <MX_USART1_UART_Init+0x1d4>)
 8000bd4:	400a      	ands	r2, r1
 8000bd6:	605a      	str	r2, [r3, #4]
  	//type noPull
  	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD9;
 8000bd8:	23a0      	movs	r3, #160	; 0xa0
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	68da      	ldr	r2, [r3, #12]
 8000bde:	23a0      	movs	r3, #160	; 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	495c      	ldr	r1, [pc, #368]	; (8000d54 <MX_USART1_UART_Init+0x1d0>)
 8000be4:	400a      	ands	r2, r1
 8000be6:	60da      	str	r2, [r3, #12]
  	//speed low
  	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED9;
 8000be8:	23a0      	movs	r3, #160	; 0xa0
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	23a0      	movs	r3, #160	; 0xa0
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	4958      	ldr	r1, [pc, #352]	; (8000d54 <MX_USART1_UART_Init+0x1d0>)
 8000bf4:	400a      	ands	r2, r1
 8000bf6:	609a      	str	r2, [r3, #8]

  	/*PB7     ------> USART1_RX*/
  	//modeAF
  	GPIOA->MODER &= ~GPIO_MODER_MODE10;
 8000bf8:	23a0      	movs	r3, #160	; 0xa0
 8000bfa:	05db      	lsls	r3, r3, #23
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	23a0      	movs	r3, #160	; 0xa0
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	4956      	ldr	r1, [pc, #344]	; (8000d5c <MX_USART1_UART_Init+0x1d8>)
 8000c04:	400a      	ands	r2, r1
 8000c06:	601a      	str	r2, [r3, #0]
  	GPIOA->MODER |=  GPIO_MODER_MODE10_1;//mode AF
 8000c08:	23a0      	movs	r3, #160	; 0xa0
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	23a0      	movs	r3, #160	; 0xa0
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	2180      	movs	r1, #128	; 0x80
 8000c14:	0389      	lsls	r1, r1, #14
 8000c16:	430a      	orrs	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]
	//mode push-pull
  	GPIOA ->OTYPER &= ~GPIO_OTYPER_OT10;
 8000c1a:	23a0      	movs	r3, #160	; 0xa0
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	494e      	ldr	r1, [pc, #312]	; (8000d60 <MX_USART1_UART_Init+0x1dc>)
 8000c26:	400a      	ands	r2, r1
 8000c28:	605a      	str	r2, [r3, #4]
  	//type noPull
  	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD10;
 8000c2a:	23a0      	movs	r3, #160	; 0xa0
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	23a0      	movs	r3, #160	; 0xa0
 8000c32:	05db      	lsls	r3, r3, #23
 8000c34:	4949      	ldr	r1, [pc, #292]	; (8000d5c <MX_USART1_UART_Init+0x1d8>)
 8000c36:	400a      	ands	r2, r1
 8000c38:	60da      	str	r2, [r3, #12]
  	//speed low
  	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED10;
 8000c3a:	23a0      	movs	r3, #160	; 0xa0
 8000c3c:	05db      	lsls	r3, r3, #23
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	23a0      	movs	r3, #160	; 0xa0
 8000c42:	05db      	lsls	r3, r3, #23
 8000c44:	4945      	ldr	r1, [pc, #276]	; (8000d5c <MX_USART1_UART_Init+0x1d8>)
 8000c46:	400a      	ands	r2, r1
 8000c48:	609a      	str	r2, [r3, #8]
  	//sel AF0 for uart
  	/*GPIOA->AFR[0] &= ~GPIO_AFRH_AFSEL9;//AF1
  	GPIOA->AFR[0] &= ~GPIO_AFRH_AFSEL10;//AF1S*/
  	//0b0001

  	GPIOA->AFR[1] |=  GPIO_AFRH_AFSEL9_0;//AF1
 8000c4a:	23a0      	movs	r3, #160	; 0xa0
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c50:	23a0      	movs	r3, #160	; 0xa0
 8000c52:	05db      	lsls	r3, r3, #23
 8000c54:	2110      	movs	r1, #16
 8000c56:	430a      	orrs	r2, r1
 8000c58:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL9_1;
 8000c5a:	23a0      	movs	r3, #160	; 0xa0
 8000c5c:	05db      	lsls	r3, r3, #23
 8000c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c60:	23a0      	movs	r3, #160	; 0xa0
 8000c62:	05db      	lsls	r3, r3, #23
 8000c64:	2120      	movs	r1, #32
 8000c66:	438a      	bics	r2, r1
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL9_2;
 8000c6a:	23a0      	movs	r3, #160	; 0xa0
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	438a      	bics	r2, r1
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL9_3;
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c80:	23a0      	movs	r3, #160	; 0xa0
 8000c82:	05db      	lsls	r3, r3, #23
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	438a      	bics	r2, r1
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  	//0b001
	GPIOA->AFR[1] |=  GPIO_AFRH_AFSEL10_0;//AF1
 8000c8a:	23a0      	movs	r3, #160	; 0xa0
 8000c8c:	05db      	lsls	r3, r3, #23
 8000c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c90:	23a0      	movs	r3, #160	; 0xa0
 8000c92:	05db      	lsls	r3, r3, #23
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	0049      	lsls	r1, r1, #1
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL10_1;
 8000c9c:	23a0      	movs	r3, #160	; 0xa0
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ca2:	23a0      	movs	r3, #160	; 0xa0
 8000ca4:	05db      	lsls	r3, r3, #23
 8000ca6:	492c      	ldr	r1, [pc, #176]	; (8000d58 <MX_USART1_UART_Init+0x1d4>)
 8000ca8:	400a      	ands	r2, r1
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL10_2;
 8000cac:	23a0      	movs	r3, #160	; 0xa0
 8000cae:	05db      	lsls	r3, r3, #23
 8000cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cb2:	23a0      	movs	r3, #160	; 0xa0
 8000cb4:	05db      	lsls	r3, r3, #23
 8000cb6:	492a      	ldr	r1, [pc, #168]	; (8000d60 <MX_USART1_UART_Init+0x1dc>)
 8000cb8:	400a      	ands	r2, r1
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
  	GPIOA->AFR[1] &= ~GPIO_AFRH_AFSEL10_3;
 8000cbc:	23a0      	movs	r3, #160	; 0xa0
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cc2:	23a0      	movs	r3, #160	; 0xa0
 8000cc4:	05db      	lsls	r3, r3, #23
 8000cc6:	4927      	ldr	r1, [pc, #156]	; (8000d64 <MX_USART1_UART_Init+0x1e0>)
 8000cc8:	400a      	ands	r2, r1
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24


  	USART1->CR1 = 0;
 8000ccc:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
  	// Word length 8n1
  	USART1->CR1 &= ~USART_CR1_M1;
 8000cd2:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000cd8:	4924      	ldr	r1, [pc, #144]	; (8000d6c <MX_USART1_UART_Init+0x1e8>)
 8000cda:	400a      	ands	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
  	//Parity disable
  	USART1->CR1 &= ~USART_CR1_PCE;
 8000cde:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000ce4:	491e      	ldr	r1, [pc, #120]	; (8000d60 <MX_USART1_UART_Init+0x1dc>)
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
  	//mode Tx_Rx
  	USART1->CR1 |= USART_CR1_TE;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	601a      	str	r2, [r3, #0]
  	USART1->CR1 |= USART_CR1_RE;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
  	//OverSampling 16bit
  	USART1->CR1 &= ~USART_CR1_OVER8;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000d08:	4919      	ldr	r1, [pc, #100]	; (8000d70 <MX_USART1_UART_Init+0x1ec>)
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
  	//ClockPrescaler no div
  	USART1->PRESC &= USART_PRESC_PRESCALER;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000d14:	210f      	movs	r1, #15
 8000d16:	400a      	ands	r2, r1
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
  	//set baudrate 115200
	USART1->BRR = 0xd05;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000d1c:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <MX_USART1_UART_Init+0x1f0>)
 8000d1e:	60da      	str	r2, [r3, #12]
  	//USART1->BRR = 0x22b;

  	//rx interupt enable
  	USART1->CR1 |= USART_CR1_RXNEIE_RXFNEIE;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000d26:	2120      	movs	r1, #32
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	601a      	str	r2, [r3, #0]

  	//set uart1 interrupt
  	NVIC_SetPriority(USART1_IRQn, 0);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	201b      	movs	r0, #27
 8000d30:	f7ff fe88 	bl	8000a44 <__NVIC_SetPriority>
  	NVIC_EnableIRQ(USART1_IRQn);
 8000d34:	201b      	movs	r0, #27
 8000d36:	f7ff fe6b 	bl	8000a10 <__NVIC_EnableIRQ>

  	//uart enable
  	USART1->CR1 |= USART_CR1_UE;
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_USART1_UART_Init+0x1e4>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	430a      	orrs	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	40021000 	.word	0x40021000
 8000d54:	fff3ffff 	.word	0xfff3ffff
 8000d58:	fffffdff 	.word	0xfffffdff
 8000d5c:	ffcfffff 	.word	0xffcfffff
 8000d60:	fffffbff 	.word	0xfffffbff
 8000d64:	fffff7ff 	.word	0xfffff7ff
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	efffffff 	.word	0xefffffff
 8000d70:	ffff7fff 	.word	0xffff7fff
 8000d74:	00000d05 	.word	0x00000d05

08000d78 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	0002      	movs	r2, r0
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	701a      	strb	r2, [r3, #0]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <xputc+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d008      	beq.n	8000d9e <xputc+0x26>
		*outptr++ = (unsigned char)c;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <xputc+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	1c59      	adds	r1, r3, #1
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <xputc+0x40>)
 8000d94:	6011      	str	r1, [r2, #0]
 8000d96:	1dfa      	adds	r2, r7, #7
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	701a      	strb	r2, [r3, #0]
		return;
 8000d9c:	e009      	b.n	8000db2 <xputc+0x3a>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <xputc+0x44>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <xputc+0x3a>
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <xputc+0x44>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	1dfa      	adds	r2, r7, #7
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	0010      	movs	r0, r2
 8000db0:	4798      	blx	r3
}
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200008d4 	.word	0x200008d4
 8000dbc:	200008d0 	.word	0x200008d0

08000dc0 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	while (*str)
 8000dc8:	e006      	b.n	8000dd8 <xputs+0x18>
		xputc(*str++);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	607a      	str	r2, [r7, #4]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f7ff ffd0 	bl	8000d78 <xputc>
	while (*str)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f4      	bne.n	8000dca <xputs+0xa>
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b002      	add	sp, #8
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b08f      	sub	sp, #60	; 0x3c
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	211f      	movs	r1, #31
 8000dfe:	187a      	adds	r2, r7, r1
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	7013      	strb	r3, [r2, #0]
		if (!c) break;				/* End of format? */
 8000e04:	000a      	movs	r2, r1
 8000e06:	18bb      	adds	r3, r7, r2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d100      	bne.n	8000e10 <xvprintf+0x24>
 8000e0e:	e164      	b.n	80010da <xvprintf+0x2ee>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8000e10:	18bb      	adds	r3, r7, r2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b25      	cmp	r3, #37	; 0x25
 8000e16:	d005      	beq.n	8000e24 <xvprintf+0x38>
			xputc(c); continue;
 8000e18:	18bb      	adds	r3, r7, r2
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff ffab 	bl	8000d78 <xputc>
 8000e22:	e159      	b.n	80010d8 <xvprintf+0x2ec>
		}
		f = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	211f      	movs	r1, #31
 8000e30:	187a      	adds	r2, r7, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padded */
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b30      	cmp	r3, #48	; 0x30
 8000e3c:	d108      	bne.n	8000e50 <xvprintf+0x64>
			f = 1; c = *fmt++;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	187a      	adds	r2, r7, r1
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	7013      	strb	r3, [r2, #0]
 8000e4e:	e00c      	b.n	8000e6a <xvprintf+0x7e>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8000e50:	211f      	movs	r1, #31
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b2d      	cmp	r3, #45	; 0x2d
 8000e58:	d107      	bne.n	8000e6a <xvprintf+0x7e>
				f = 2; c = *fmt++;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	1c5a      	adds	r2, r3, #1
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	187a      	adds	r2, r7, r1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	7013      	strb	r3, [r2, #0]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e6e:	e011      	b.n	8000e94 <xvprintf+0xa8>
			w = w * 10 + c - '0';
 8000e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e72:	0013      	movs	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	189b      	adds	r3, r3, r2
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	211f      	movs	r1, #31
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	3b30      	subs	r3, #48	; 0x30
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	187a      	adds	r2, r7, r1
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	7013      	strb	r3, [r2, #0]
 8000e94:	221f      	movs	r2, #31
 8000e96:	18bb      	adds	r3, r7, r2
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b2f      	cmp	r3, #47	; 0x2f
 8000e9c:	d903      	bls.n	8000ea6 <xvprintf+0xba>
 8000e9e:	18bb      	adds	r3, r7, r2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b39      	cmp	r3, #57	; 0x39
 8000ea4:	d9e4      	bls.n	8000e70 <xvprintf+0x84>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8000ea6:	221f      	movs	r2, #31
 8000ea8:	18bb      	adds	r3, r7, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b6c      	cmp	r3, #108	; 0x6c
 8000eae:	d003      	beq.n	8000eb8 <xvprintf+0xcc>
 8000eb0:	18bb      	adds	r3, r7, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b4c      	cmp	r3, #76	; 0x4c
 8000eb6:	d10a      	bne.n	8000ece <xvprintf+0xe2>
			f |= 4; c = *fmt++;
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	221f      	movs	r2, #31
 8000ec8:	18ba      	adds	r2, r7, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;				/* End of format? */
 8000ece:	221f      	movs	r2, #31
 8000ed0:	18bb      	adds	r3, r7, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d100      	bne.n	8000eda <xvprintf+0xee>
 8000ed8:	e101      	b.n	80010de <xvprintf+0x2f2>
		d = c;
 8000eda:	211e      	movs	r1, #30
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	18ba      	adds	r2, r7, r2
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	701a      	strb	r2, [r3, #0]
		if (d >= 'a') d -= 0x20;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b60      	cmp	r3, #96	; 0x60
 8000eea:	d904      	bls.n	8000ef6 <xvprintf+0x10a>
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	187a      	adds	r2, r7, r1
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	3a20      	subs	r2, #32
 8000ef4:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 8000ef6:	231e      	movs	r3, #30
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3b42      	subs	r3, #66	; 0x42
 8000efe:	2b16      	cmp	r3, #22
 8000f00:	d847      	bhi.n	8000f92 <xvprintf+0x1a6>
 8000f02:	009a      	lsls	r2, r3, #2
 8000f04:	4b78      	ldr	r3, [pc, #480]	; (80010e8 <xvprintf+0x2fc>)
 8000f06:	18d3      	adds	r3, r2, r3
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	1d1a      	adds	r2, r3, #4
 8000f10:	603a      	str	r2, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f1a:	e002      	b.n	8000f22 <xvprintf+0x136>
 8000f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1e:	3301      	adds	r3, #1
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f26:	18d3      	adds	r3, r2, r3
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f6      	bne.n	8000f1c <xvprintf+0x130>
			while (!(f & 2) && j++ < w) xputc(' ');
 8000f2e:	e002      	b.n	8000f36 <xvprintf+0x14a>
 8000f30:	2020      	movs	r0, #32
 8000f32:	f7ff ff21 	bl	8000d78 <xputc>
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	2202      	movs	r2, #2
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d105      	bne.n	8000f4a <xvprintf+0x15e>
 8000f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d8f2      	bhi.n	8000f30 <xvprintf+0x144>
			xputs(p);
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff ff37 	bl	8000dc0 <xputs>
			while (j++ < w) xputc(' ');
 8000f52:	e002      	b.n	8000f5a <xvprintf+0x16e>
 8000f54:	2020      	movs	r0, #32
 8000f56:	f7ff ff0f 	bl	8000d78 <xputc>
 8000f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d8f6      	bhi.n	8000f54 <xvprintf+0x168>
			continue;
 8000f66:	e0b7      	b.n	80010d8 <xvprintf+0x2ec>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	1d1a      	adds	r2, r3, #4
 8000f6c:	603a      	str	r2, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff ff00 	bl	8000d78 <xputc>
 8000f78:	e0ae      	b.n	80010d8 <xvprintf+0x2ec>
		case 'B' :					/* Binary */
			r = 2; break;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f7e:	e00f      	b.n	8000fa0 <xvprintf+0x1b4>
		case 'O' :					/* Octal */
			r = 8; break;
 8000f80:	2308      	movs	r3, #8
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
 8000f84:	e00c      	b.n	8000fa0 <xvprintf+0x1b4>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8000f86:	230a      	movs	r3, #10
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
 8000f8a:	e009      	b.n	8000fa0 <xvprintf+0x1b4>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8000f90:	e006      	b.n	8000fa0 <xvprintf+0x1b4>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8000f92:	231f      	movs	r3, #31
 8000f94:	18fb      	adds	r3, r7, r3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff feed 	bl	8000d78 <xputc>
 8000f9e:	e09b      	b.n	80010d8 <xvprintf+0x2ec>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d004      	beq.n	8000fb2 <xvprintf+0x1c6>
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	1d1a      	adds	r2, r3, #4
 8000fac:	603a      	str	r2, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	e00d      	b.n	8000fce <xvprintf+0x1e2>
 8000fb2:	231e      	movs	r3, #30
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b44      	cmp	r3, #68	; 0x44
 8000fba:	d104      	bne.n	8000fc6 <xvprintf+0x1da>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	1d1a      	adds	r2, r3, #4
 8000fc0:	603a      	str	r2, [r7, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	e003      	b.n	8000fce <xvprintf+0x1e2>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	1d1a      	adds	r2, r3, #4
 8000fca:	603a      	str	r2, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 8000fd0:	231e      	movs	r3, #30
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b44      	cmp	r3, #68	; 0x44
 8000fd8:	d109      	bne.n	8000fee <xvprintf+0x202>
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	da06      	bge.n	8000fee <xvprintf+0x202>
			v = 0 - v;
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	425b      	negs	r3, r3
 8000fe4:	623b      	str	r3, [r7, #32]
			f |= 8;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	2208      	movs	r2, #8
 8000fea:	4313      	orrs	r3, r2
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff f90a 	bl	8000210 <__aeabi_uidivmod>
 8000ffc:	000b      	movs	r3, r1
 8000ffe:	001a      	movs	r2, r3
 8001000:	241e      	movs	r4, #30
 8001002:	193b      	adds	r3, r7, r4
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001008:	6a38      	ldr	r0, [r7, #32]
 800100a:	f7ff f87b 	bl	8000104 <__udivsi3>
 800100e:	0003      	movs	r3, r0
 8001010:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8001012:	193b      	adds	r3, r7, r4
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b09      	cmp	r3, #9
 8001018:	d90d      	bls.n	8001036 <xvprintf+0x24a>
 800101a:	231f      	movs	r3, #31
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b78      	cmp	r3, #120	; 0x78
 8001022:	d101      	bne.n	8001028 <xvprintf+0x23c>
 8001024:	2327      	movs	r3, #39	; 0x27
 8001026:	e000      	b.n	800102a <xvprintf+0x23e>
 8001028:	2307      	movs	r3, #7
 800102a:	211e      	movs	r1, #30
 800102c:	187a      	adds	r2, r7, r1
 800102e:	1879      	adds	r1, r7, r1
 8001030:	7809      	ldrb	r1, [r1, #0]
 8001032:	185b      	adds	r3, r3, r1
 8001034:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 8001036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	633a      	str	r2, [r7, #48]	; 0x30
 800103c:	221e      	movs	r2, #30
 800103e:	18ba      	adds	r2, r7, r2
 8001040:	7812      	ldrb	r2, [r2, #0]
 8001042:	3230      	adds	r2, #48	; 0x30
 8001044:	b2d1      	uxtb	r1, r2
 8001046:	2208      	movs	r2, #8
 8001048:	18ba      	adds	r2, r7, r2
 800104a:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof(s));
 800104c:	6a3b      	ldr	r3, [r7, #32]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <xvprintf+0x26c>
 8001052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d9cc      	bls.n	8000ff2 <xvprintf+0x206>
		if (f & 8) s[i++] = '-';
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	2208      	movs	r2, #8
 800105c:	4013      	ands	r3, r2
 800105e:	d006      	beq.n	800106e <xvprintf+0x282>
 8001060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	633a      	str	r2, [r7, #48]	; 0x30
 8001066:	2208      	movs	r2, #8
 8001068:	18ba      	adds	r2, r7, r2
 800106a:	212d      	movs	r1, #45	; 0x2d
 800106c:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 800106e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	2201      	movs	r2, #1
 8001076:	4013      	ands	r3, r2
 8001078:	d001      	beq.n	800107e <xvprintf+0x292>
 800107a:	2230      	movs	r2, #48	; 0x30
 800107c:	e000      	b.n	8001080 <xvprintf+0x294>
 800107e:	2220      	movs	r2, #32
 8001080:	231e      	movs	r3, #30
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) xputc(d);
 8001086:	e005      	b.n	8001094 <xvprintf+0x2a8>
 8001088:	231e      	movs	r3, #30
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff fe72 	bl	8000d78 <xputc>
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	2202      	movs	r2, #2
 8001098:	4013      	ands	r3, r2
 800109a:	d105      	bne.n	80010a8 <xvprintf+0x2bc>
 800109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80010a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8ef      	bhi.n	8001088 <xvprintf+0x29c>
		do xputc(s[--i]); while(i);
 80010a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010aa:	3b01      	subs	r3, #1
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
 80010ae:	2308      	movs	r3, #8
 80010b0:	18fa      	adds	r2, r7, r3
 80010b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b4:	18d3      	adds	r3, r2, r3
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff fe5d 	bl	8000d78 <xputc>
 80010be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f1      	bne.n	80010a8 <xvprintf+0x2bc>
		while (j++ < w) xputc(' ');
 80010c4:	e002      	b.n	80010cc <xvprintf+0x2e0>
 80010c6:	2020      	movs	r0, #32
 80010c8:	f7ff fe56 	bl	8000d78 <xputc>
 80010cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80010d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f6      	bhi.n	80010c6 <xvprintf+0x2da>
		c = *fmt++;					/* Get a char */
 80010d8:	e68d      	b.n	8000df6 <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	e000      	b.n	80010e0 <xvprintf+0x2f4>
		if (!c) break;				/* End of format? */
 80010de:	46c0      	nop			; (mov r8, r8)
	}
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b00f      	add	sp, #60	; 0x3c
 80010e6:	bd90      	pop	{r4, r7, pc}
 80010e8:	08001668 	.word	0x08001668

080010ec <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 80010ec:	b40f      	push	{r0, r1, r2, r3}
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 80010f4:	2314      	movs	r3, #20
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	0011      	movs	r1, r2
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff fe73 	bl	8000dec <xvprintf>
	va_end(arp);
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bc80      	pop	{r7}
 800110e:	bc08      	pop	{r3}
 8001110:	b004      	add	sp, #16
 8001112:	4718      	bx	r3

08001114 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001116:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001118:	f7ff fc74 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <LoopForever+0x6>)
  ldr r1, =_edata
 800111e:	490d      	ldr	r1, [pc, #52]	; (8001154 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <LoopForever+0xe>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001134:	4c0a      	ldr	r4, [pc, #40]	; (8001160 <LoopForever+0x16>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001142:	f000 f9a1 	bl	8001488 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001146:	f7ff fa7a 	bl	800063e <main>

0800114a <LoopForever>:

LoopForever:
  b LoopForever
 800114a:	e7fe      	b.n	800114a <LoopForever>
  ldr   r0, =_estack
 800114c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001158:	080017d0 	.word	0x080017d0
  ldr r2, =_sbss
 800115c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001160:	200008dc 	.word	0x200008dc

08001164 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_IRQHandler>
	...

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	230f      	movs	r3, #15
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_InitTick+0x88>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d02b      	beq.n	80011d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_InitTick+0x8c>)
 8001182:	681c      	ldr	r4, [r3, #0]
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <HAL_InitTick+0x88>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	0019      	movs	r1, r3
 800118a:	23fa      	movs	r3, #250	; 0xfa
 800118c:	0098      	lsls	r0, r3, #2
 800118e:	f7fe ffb9 	bl	8000104 <__udivsi3>
 8001192:	0003      	movs	r3, r0
 8001194:	0019      	movs	r1, r3
 8001196:	0020      	movs	r0, r4
 8001198:	f7fe ffb4 	bl	8000104 <__udivsi3>
 800119c:	0003      	movs	r3, r0
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 f8dd 	bl	800135e <HAL_SYSTICK_Config>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d112      	bne.n	80011ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d80a      	bhi.n	80011c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	2301      	movs	r3, #1
 80011b2:	425b      	negs	r3, r3
 80011b4:	2200      	movs	r2, #0
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 f8bc 	bl	8001334 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_InitTick+0x90>)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e00d      	b.n	80011e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e008      	b.n	80011e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ce:	230f      	movs	r3, #15
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	e003      	b.n	80011e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d8:	230f      	movs	r3, #15
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011e0:	230f      	movs	r3, #15
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	781b      	ldrb	r3, [r3, #0]
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b005      	add	sp, #20
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	2000000c 	.word	0x2000000c
 80011f4:	20000004 	.word	0x20000004
 80011f8:	20000008 	.word	0x20000008

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b02      	ldr	r3, [pc, #8]	; (800120c <HAL_GetTick+0x10>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	200008d8 	.word	0x200008d8

08001210 <__NVIC_SetPriority>:
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	0002      	movs	r2, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b7f      	cmp	r3, #127	; 0x7f
 8001224:	d828      	bhi.n	8001278 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001226:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <__NVIC_SetPriority+0xd4>)
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	33c0      	adds	r3, #192	; 0xc0
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	589b      	ldr	r3, [r3, r2]
 8001236:	1dfa      	adds	r2, r7, #7
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	0011      	movs	r1, r2
 800123c:	2203      	movs	r2, #3
 800123e:	400a      	ands	r2, r1
 8001240:	00d2      	lsls	r2, r2, #3
 8001242:	21ff      	movs	r1, #255	; 0xff
 8001244:	4091      	lsls	r1, r2
 8001246:	000a      	movs	r2, r1
 8001248:	43d2      	mvns	r2, r2
 800124a:	401a      	ands	r2, r3
 800124c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	019b      	lsls	r3, r3, #6
 8001252:	22ff      	movs	r2, #255	; 0xff
 8001254:	401a      	ands	r2, r3
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	0018      	movs	r0, r3
 800125c:	2303      	movs	r3, #3
 800125e:	4003      	ands	r3, r0
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001264:	481f      	ldr	r0, [pc, #124]	; (80012e4 <__NVIC_SetPriority+0xd4>)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b25b      	sxtb	r3, r3
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	430a      	orrs	r2, r1
 8001270:	33c0      	adds	r3, #192	; 0xc0
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	501a      	str	r2, [r3, r0]
}
 8001276:	e031      	b.n	80012dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001278:	4a1b      	ldr	r2, [pc, #108]	; (80012e8 <__NVIC_SetPriority+0xd8>)
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	0019      	movs	r1, r3
 8001280:	230f      	movs	r3, #15
 8001282:	400b      	ands	r3, r1
 8001284:	3b08      	subs	r3, #8
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3306      	adds	r3, #6
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	18d3      	adds	r3, r2, r3
 800128e:	3304      	adds	r3, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1dfa      	adds	r2, r7, #7
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	0011      	movs	r1, r2
 8001298:	2203      	movs	r2, #3
 800129a:	400a      	ands	r2, r1
 800129c:	00d2      	lsls	r2, r2, #3
 800129e:	21ff      	movs	r1, #255	; 0xff
 80012a0:	4091      	lsls	r1, r2
 80012a2:	000a      	movs	r2, r1
 80012a4:	43d2      	mvns	r2, r2
 80012a6:	401a      	ands	r2, r3
 80012a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	22ff      	movs	r2, #255	; 0xff
 80012b0:	401a      	ands	r2, r3
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	0018      	movs	r0, r3
 80012b8:	2303      	movs	r3, #3
 80012ba:	4003      	ands	r3, r0
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <__NVIC_SetPriority+0xd8>)
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	001c      	movs	r4, r3
 80012c8:	230f      	movs	r3, #15
 80012ca:	4023      	ands	r3, r4
 80012cc:	3b08      	subs	r3, #8
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	430a      	orrs	r2, r1
 80012d2:	3306      	adds	r3, #6
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	18c3      	adds	r3, r0, r3
 80012d8:	3304      	adds	r3, #4
 80012da:	601a      	str	r2, [r3, #0]
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b003      	add	sp, #12
 80012e2:	bd90      	pop	{r4, r7, pc}
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <SysTick_Config>:
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1e5a      	subs	r2, r3, #1
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	045b      	lsls	r3, r3, #17
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d301      	bcc.n	8001304 <SysTick_Config+0x18>
    return (1UL);                                                   /* Reload value impossible */
 8001300:	2301      	movs	r3, #1
 8001302:	e010      	b.n	8001326 <SysTick_Config+0x3a>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <SysTick_Config+0x44>)
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	3a01      	subs	r2, #1
 800130a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130c:	2301      	movs	r3, #1
 800130e:	425b      	negs	r3, r3
 8001310:	2103      	movs	r1, #3
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff ff7c 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x44>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x44>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b002      	add	sp, #8
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	210f      	movs	r1, #15
 8001340:	187b      	adds	r3, r7, r1
 8001342:	1c02      	adds	r2, r0, #0
 8001344:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	187b      	adds	r3, r7, r1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	46bd      	mov	sp, r7
 800135a:	b004      	add	sp, #16
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff ffbf 	bl	80012ec <SysTick_Config>
 800136e:	0003      	movs	r3, r0
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800137e:	f7ff ff3d 	bl	80011fc <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	607b      	str	r3, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001386:	4b35      	ldr	r3, [pc, #212]	; (800145c <HAL_RCC_DeInit+0xe4>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4b34      	ldr	r3, [pc, #208]	; (800145c <HAL_RCC_DeInit+0xe4>)
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	0049      	lsls	r1, r1, #1
 8001390:	430a      	orrs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001396:	f7ff ff31 	bl	80011fc <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e054      	b.n	8001452 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <HAL_RCC_DeInit+0xe4>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4013      	ands	r3, r2
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <HAL_RCC_DeInit+0xe4>)
 80013b6:	2280      	movs	r2, #128	; 0x80
 80013b8:	01d2      	lsls	r2, r2, #7
 80013ba:	605a      	str	r2, [r3, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80013bc:	f7ff ff1e 	bl	80011fc <HAL_GetTick>
 80013c0:	0003      	movs	r3, r0
 80013c2:	607b      	str	r3, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_RCC_DeInit+0xe4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80013ca:	e009      	b.n	80013e0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013cc:	f7ff ff16 	bl	80011fc <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	4a22      	ldr	r2, [pc, #136]	; (8001460 <HAL_RCC_DeInit+0xe8>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e038      	b.n	8001452 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80013e0:	4b1e      	ldr	r3, [pc, #120]	; (800145c <HAL_RCC_DeInit+0xe4>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2238      	movs	r2, #56	; 0x38
 80013e6:	4013      	ands	r3, r2
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_DeInit+0x54>
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_RCC_DeInit+0xe4>)
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	0052      	lsls	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_RCC_DeInit+0xe4>)
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	0052      	lsls	r2, r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80013fa:	f7ff feff 	bl	80011fc <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	607b      	str	r3, [r7, #4]

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_DeInit+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff fefa 	bl	80011fc <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_DeInit+0x9e>
    {
      return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e01d      	b.n	8001452 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_RCC_DeInit+0xe4>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	049b      	lsls	r3, r3, #18
 800141e:	4013      	ands	r3, r2
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_DeInit+0x8c>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_RCC_DeInit+0xe4>)
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	0152      	lsls	r2, r2, #5
 8001428:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_RCC_DeInit+0xe4>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_RCC_DeInit+0xe4>)
 8001432:	2201      	movs	r2, #1
 8001434:	4252      	negs	r2, r2
 8001436:	621a      	str	r2, [r3, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_RCC_DeInit+0xec>)
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <HAL_RCC_DeInit+0xf0>)
 800143c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_DeInit+0xf4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fe90 	bl	8001168 <HAL_InitTick>
 8001448:	1e03      	subs	r3, r0, #0
 800144a:	d001      	beq.n	8001450 <HAL_RCC_DeInit+0xd8>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <HAL_RCC_DeInit+0xda>
  }
  else
  {
    return HAL_OK;
 8001450:	2300      	movs	r3, #0
  }
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40021000 	.word	0x40021000
 8001460:	00001388 	.word	0x00001388
 8001464:	20000004 	.word	0x20000004
 8001468:	00f42400 	.word	0x00f42400
 800146c:	20000008 	.word	0x20000008

08001470 <atoi>:
 8001470:	b510      	push	{r4, lr}
 8001472:	220a      	movs	r2, #10
 8001474:	2100      	movs	r1, #0
 8001476:	f000 f8b9 	bl	80015ec <strtol>
 800147a:	bd10      	pop	{r4, pc}

0800147c <__errno>:
 800147c:	4b01      	ldr	r3, [pc, #4]	; (8001484 <__errno+0x8>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	4770      	bx	lr
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	20000010 	.word	0x20000010

08001488 <__libc_init_array>:
 8001488:	b570      	push	{r4, r5, r6, lr}
 800148a:	2600      	movs	r6, #0
 800148c:	4d0c      	ldr	r5, [pc, #48]	; (80014c0 <__libc_init_array+0x38>)
 800148e:	4c0d      	ldr	r4, [pc, #52]	; (80014c4 <__libc_init_array+0x3c>)
 8001490:	1b64      	subs	r4, r4, r5
 8001492:	10a4      	asrs	r4, r4, #2
 8001494:	42a6      	cmp	r6, r4
 8001496:	d109      	bne.n	80014ac <__libc_init_array+0x24>
 8001498:	2600      	movs	r6, #0
 800149a:	f000 f8b3 	bl	8001604 <_init>
 800149e:	4d0a      	ldr	r5, [pc, #40]	; (80014c8 <__libc_init_array+0x40>)
 80014a0:	4c0a      	ldr	r4, [pc, #40]	; (80014cc <__libc_init_array+0x44>)
 80014a2:	1b64      	subs	r4, r4, r5
 80014a4:	10a4      	asrs	r4, r4, #2
 80014a6:	42a6      	cmp	r6, r4
 80014a8:	d105      	bne.n	80014b6 <__libc_init_array+0x2e>
 80014aa:	bd70      	pop	{r4, r5, r6, pc}
 80014ac:	00b3      	lsls	r3, r6, #2
 80014ae:	58eb      	ldr	r3, [r5, r3]
 80014b0:	4798      	blx	r3
 80014b2:	3601      	adds	r6, #1
 80014b4:	e7ee      	b.n	8001494 <__libc_init_array+0xc>
 80014b6:	00b3      	lsls	r3, r6, #2
 80014b8:	58eb      	ldr	r3, [r5, r3]
 80014ba:	4798      	blx	r3
 80014bc:	3601      	adds	r6, #1
 80014be:	e7f2      	b.n	80014a6 <__libc_init_array+0x1e>
 80014c0:	080017c8 	.word	0x080017c8
 80014c4:	080017c8 	.word	0x080017c8
 80014c8:	080017c8 	.word	0x080017c8
 80014cc:	080017cc 	.word	0x080017cc

080014d0 <_strtol_l.constprop.0>:
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	b087      	sub	sp, #28
 80014d4:	001e      	movs	r6, r3
 80014d6:	9005      	str	r0, [sp, #20]
 80014d8:	9101      	str	r1, [sp, #4]
 80014da:	9202      	str	r2, [sp, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d045      	beq.n	800156c <_strtol_l.constprop.0+0x9c>
 80014e0:	000b      	movs	r3, r1
 80014e2:	2e24      	cmp	r6, #36	; 0x24
 80014e4:	d842      	bhi.n	800156c <_strtol_l.constprop.0+0x9c>
 80014e6:	4a3f      	ldr	r2, [pc, #252]	; (80015e4 <_strtol_l.constprop.0+0x114>)
 80014e8:	2108      	movs	r1, #8
 80014ea:	4694      	mov	ip, r2
 80014ec:	001a      	movs	r2, r3
 80014ee:	4660      	mov	r0, ip
 80014f0:	7814      	ldrb	r4, [r2, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	5d00      	ldrb	r0, [r0, r4]
 80014f6:	001d      	movs	r5, r3
 80014f8:	0007      	movs	r7, r0
 80014fa:	400f      	ands	r7, r1
 80014fc:	4208      	tst	r0, r1
 80014fe:	d1f5      	bne.n	80014ec <_strtol_l.constprop.0+0x1c>
 8001500:	2c2d      	cmp	r4, #45	; 0x2d
 8001502:	d13a      	bne.n	800157a <_strtol_l.constprop.0+0xaa>
 8001504:	2701      	movs	r7, #1
 8001506:	781c      	ldrb	r4, [r3, #0]
 8001508:	1c95      	adds	r5, r2, #2
 800150a:	2e00      	cmp	r6, #0
 800150c:	d065      	beq.n	80015da <_strtol_l.constprop.0+0x10a>
 800150e:	2e10      	cmp	r6, #16
 8001510:	d109      	bne.n	8001526 <_strtol_l.constprop.0+0x56>
 8001512:	2c30      	cmp	r4, #48	; 0x30
 8001514:	d107      	bne.n	8001526 <_strtol_l.constprop.0+0x56>
 8001516:	2220      	movs	r2, #32
 8001518:	782b      	ldrb	r3, [r5, #0]
 800151a:	4393      	bics	r3, r2
 800151c:	2b58      	cmp	r3, #88	; 0x58
 800151e:	d157      	bne.n	80015d0 <_strtol_l.constprop.0+0x100>
 8001520:	2610      	movs	r6, #16
 8001522:	786c      	ldrb	r4, [r5, #1]
 8001524:	3502      	adds	r5, #2
 8001526:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <_strtol_l.constprop.0+0x118>)
 8001528:	0031      	movs	r1, r6
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	0018      	movs	r0, r3
 800152e:	9303      	str	r3, [sp, #12]
 8001530:	f7fe fe6e 	bl	8000210 <__aeabi_uidivmod>
 8001534:	2300      	movs	r3, #0
 8001536:	2201      	movs	r2, #1
 8001538:	4684      	mov	ip, r0
 800153a:	0018      	movs	r0, r3
 800153c:	9104      	str	r1, [sp, #16]
 800153e:	4252      	negs	r2, r2
 8001540:	0021      	movs	r1, r4
 8001542:	3930      	subs	r1, #48	; 0x30
 8001544:	2909      	cmp	r1, #9
 8001546:	d81d      	bhi.n	8001584 <_strtol_l.constprop.0+0xb4>
 8001548:	000c      	movs	r4, r1
 800154a:	42a6      	cmp	r6, r4
 800154c:	dd28      	ble.n	80015a0 <_strtol_l.constprop.0+0xd0>
 800154e:	2b00      	cmp	r3, #0
 8001550:	db24      	blt.n	800159c <_strtol_l.constprop.0+0xcc>
 8001552:	0013      	movs	r3, r2
 8001554:	4584      	cmp	ip, r0
 8001556:	d306      	bcc.n	8001566 <_strtol_l.constprop.0+0x96>
 8001558:	d102      	bne.n	8001560 <_strtol_l.constprop.0+0x90>
 800155a:	9904      	ldr	r1, [sp, #16]
 800155c:	42a1      	cmp	r1, r4
 800155e:	db02      	blt.n	8001566 <_strtol_l.constprop.0+0x96>
 8001560:	2301      	movs	r3, #1
 8001562:	4370      	muls	r0, r6
 8001564:	1820      	adds	r0, r4, r0
 8001566:	782c      	ldrb	r4, [r5, #0]
 8001568:	3501      	adds	r5, #1
 800156a:	e7e9      	b.n	8001540 <_strtol_l.constprop.0+0x70>
 800156c:	f7ff ff86 	bl	800147c <__errno>
 8001570:	2316      	movs	r3, #22
 8001572:	6003      	str	r3, [r0, #0]
 8001574:	2000      	movs	r0, #0
 8001576:	b007      	add	sp, #28
 8001578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157a:	2c2b      	cmp	r4, #43	; 0x2b
 800157c:	d1c5      	bne.n	800150a <_strtol_l.constprop.0+0x3a>
 800157e:	781c      	ldrb	r4, [r3, #0]
 8001580:	1c95      	adds	r5, r2, #2
 8001582:	e7c2      	b.n	800150a <_strtol_l.constprop.0+0x3a>
 8001584:	0021      	movs	r1, r4
 8001586:	3941      	subs	r1, #65	; 0x41
 8001588:	2919      	cmp	r1, #25
 800158a:	d801      	bhi.n	8001590 <_strtol_l.constprop.0+0xc0>
 800158c:	3c37      	subs	r4, #55	; 0x37
 800158e:	e7dc      	b.n	800154a <_strtol_l.constprop.0+0x7a>
 8001590:	0021      	movs	r1, r4
 8001592:	3961      	subs	r1, #97	; 0x61
 8001594:	2919      	cmp	r1, #25
 8001596:	d803      	bhi.n	80015a0 <_strtol_l.constprop.0+0xd0>
 8001598:	3c57      	subs	r4, #87	; 0x57
 800159a:	e7d6      	b.n	800154a <_strtol_l.constprop.0+0x7a>
 800159c:	0013      	movs	r3, r2
 800159e:	e7e2      	b.n	8001566 <_strtol_l.constprop.0+0x96>
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	da09      	bge.n	80015b8 <_strtol_l.constprop.0+0xe8>
 80015a4:	2322      	movs	r3, #34	; 0x22
 80015a6:	9a05      	ldr	r2, [sp, #20]
 80015a8:	9803      	ldr	r0, [sp, #12]
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	9b02      	ldr	r3, [sp, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0e1      	beq.n	8001576 <_strtol_l.constprop.0+0xa6>
 80015b2:	1e6b      	subs	r3, r5, #1
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	e007      	b.n	80015c8 <_strtol_l.constprop.0+0xf8>
 80015b8:	2f00      	cmp	r7, #0
 80015ba:	d000      	beq.n	80015be <_strtol_l.constprop.0+0xee>
 80015bc:	4240      	negs	r0, r0
 80015be:	9a02      	ldr	r2, [sp, #8]
 80015c0:	2a00      	cmp	r2, #0
 80015c2:	d0d8      	beq.n	8001576 <_strtol_l.constprop.0+0xa6>
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f4      	bne.n	80015b2 <_strtol_l.constprop.0+0xe2>
 80015c8:	9b02      	ldr	r3, [sp, #8]
 80015ca:	9a01      	ldr	r2, [sp, #4]
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e7d2      	b.n	8001576 <_strtol_l.constprop.0+0xa6>
 80015d0:	2430      	movs	r4, #48	; 0x30
 80015d2:	2e00      	cmp	r6, #0
 80015d4:	d1a7      	bne.n	8001526 <_strtol_l.constprop.0+0x56>
 80015d6:	3608      	adds	r6, #8
 80015d8:	e7a5      	b.n	8001526 <_strtol_l.constprop.0+0x56>
 80015da:	2c30      	cmp	r4, #48	; 0x30
 80015dc:	d09b      	beq.n	8001516 <_strtol_l.constprop.0+0x46>
 80015de:	260a      	movs	r6, #10
 80015e0:	e7a1      	b.n	8001526 <_strtol_l.constprop.0+0x56>
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	080016c5 	.word	0x080016c5
 80015e8:	7fffffff 	.word	0x7fffffff

080015ec <strtol>:
 80015ec:	b510      	push	{r4, lr}
 80015ee:	0013      	movs	r3, r2
 80015f0:	000a      	movs	r2, r1
 80015f2:	0001      	movs	r1, r0
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <strtol+0x14>)
 80015f6:	6800      	ldr	r0, [r0, #0]
 80015f8:	f7ff ff6a 	bl	80014d0 <_strtol_l.constprop.0>
 80015fc:	bd10      	pop	{r4, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	20000010 	.word	0x20000010

08001604 <_init>:
 8001604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160a:	bc08      	pop	{r3}
 800160c:	469e      	mov	lr, r3
 800160e:	4770      	bx	lr

08001610 <_fini>:
 8001610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001616:	bc08      	pop	{r3}
 8001618:	469e      	mov	lr, r3
 800161a:	4770      	bx	lr
