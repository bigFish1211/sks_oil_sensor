
g031_oilSensor_SBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b74  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08002c30  08002c30  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ee4  08002ee4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ee4  08002ee4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ee4  08002ee4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ee4  08002ee4  00012ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ee8  08002ee8  00012ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a0  2000006c  08002f58  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  08002f58  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000361a  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000134b  00000000  00000000  000236ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  00024a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000330  00000000  00000000  00024de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f2a7  00000000  00000000  00025110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005846  00000000  00000000  000343b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004bc35  00000000  00000000  00039bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00085832  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013ac  00000000  00000000  00085884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002c18 	.word	0x08002c18

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08002c18 	.word	0x08002c18

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <FLASH_PagesMask>:
/**
 * @brief  Calculate the number of pages
 * @param  Size: The image size
 * @retval The number of pages
 */
uint32_t FLASH_PagesMask(__IO uint32_t Size) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	uint32_t pagenumber = 0x0;
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
	uint32_t size = Size;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	60bb      	str	r3, [r7, #8]

	if ((size % PAGE_SIZE) != 0) {
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	055b      	lsls	r3, r3, #21
 8000244:	0d5b      	lsrs	r3, r3, #21
 8000246:	d004      	beq.n	8000252 <FLASH_PagesMask+0x22>
		pagenumber = (size / PAGE_SIZE) + 1;
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	0adb      	lsrs	r3, r3, #11
 800024c:	3301      	adds	r3, #1
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	e002      	b.n	8000258 <FLASH_PagesMask+0x28>
	} else {
		pagenumber = size / PAGE_SIZE;
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	0adb      	lsrs	r3, r3, #11
 8000256:	60fb      	str	r3, [r7, #12]
	}
	return pagenumber;
 8000258:	68fb      	ldr	r3, [r7, #12]

}
 800025a:	0018      	movs	r0, r3
 800025c:	46bd      	mov	sp, r7
 800025e:	b004      	add	sp, #16
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <flash_verify_image>:
 * return value:
 * 	-1: No execute image
 * 	-2: No secondary image, primary image checksum failed
 */
#define FLASH_DEBUG 0
int flash_verify_image(SKS_BOOT_INFO *boot_info) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	//char str [255] = {0};
	uint32_t crc_primary = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]

	flash_read_uboot_info(boot_info);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	0018      	movs	r0, r3
 8000274:	f000 f81c 	bl	80002b0 <flash_read_uboot_info>
	CRC_ResetDR();
 8000278:	f000 f900 	bl	800047c <CRC_ResetDR>
	crc_primary = CRC_CalcBlockCRC((uint32_t) BOOT_PRIMARY_ADDRESS,
			(uint32_t) (boot_info->PrimarySize / 4) + 1);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	089b      	lsrs	r3, r3, #2
	crc_primary = CRC_CalcBlockCRC((uint32_t) BOOT_PRIMARY_ADDRESS,
 8000282:	3301      	adds	r3, #1
 8000284:	4a09      	ldr	r2, [pc, #36]	; (80002ac <flash_verify_image+0x48>)
 8000286:	0019      	movs	r1, r3
 8000288:	0010      	movs	r0, r2
 800028a:	f000 f901 	bl	8000490 <CRC_CalcBlockCRC>
 800028e:	0003      	movs	r3, r0
 8000290:	60fb      	str	r3, [r7, #12]
	if (crc_primary != boot_info->PrimaryCRC) {
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	429a      	cmp	r2, r3
 800029a:	d001      	beq.n	80002a0 <flash_verify_image+0x3c>
		return 0; //Invalid PRIMARY's  CRC
 800029c:	2300      	movs	r3, #0
 800029e:	e000      	b.n	80002a2 <flash_verify_image+0x3e>
	}
	//printf("VERIFY DATA SUCCESS\r\n");
	//CRC->DR
	return 1;
 80002a0:	2301      	movs	r3, #1
}
 80002a2:	0018      	movs	r0, r3
 80002a4:	46bd      	mov	sp, r7
 80002a6:	b004      	add	sp, #16
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	08002800 	.word	0x08002800

080002b0 <flash_read_uboot_info>:

void flash_read_uboot_info(SKS_BOOT_INFO *boot_info) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]
	uint32_t *pInt = UBOOT_CONFIG_ADDRESS;
 80002bc:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <flash_read_uboot_info+0x44>)
 80002be:	613b      	str	r3, [r7, #16]
	uint32_t *pDest = boot_info;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < sizeof(SKS_BOOT_INFO) / 4; i++) {
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
 80002c8:	e00c      	b.n	80002e4 <flash_read_uboot_info+0x34>
		//flash clear flag
	/*	FLASH_ClearFlag(
				FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR
						| FLASH_FLAG_WRPERR);*/
		pDest[i] = pInt[i];
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	693a      	ldr	r2, [r7, #16]
 80002d0:	18d2      	adds	r2, r2, r3
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	68f9      	ldr	r1, [r7, #12]
 80002d8:	18cb      	adds	r3, r1, r3
 80002da:	6812      	ldr	r2, [r2, #0]
 80002dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < sizeof(SKS_BOOT_INFO) / 4; i++) {
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	2b0f      	cmp	r3, #15
 80002e8:	d9ef      	bls.n	80002ca <flash_read_uboot_info+0x1a>

	}
}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b006      	add	sp, #24
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	0800fc00 	.word	0x0800fc00

080002f8 <flash_write_uboot_info>:

void flash_write_uboot_info(SKS_BOOT_INFO *boot_info) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b086      	sub	sp, #24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	volatile FLASH_Status FLASHStatus = FLASH_COMPLETE;
 8000300:	230f      	movs	r3, #15
 8000302:	18fb      	adds	r3, r7, r3
 8000304:	2204      	movs	r2, #4
 8000306:	701a      	strb	r2, [r3, #0]
		//int *pInt = (int *)UBOOT_CONFIG_ADDRESS;
		FLASH->SR &= ~(FLASH_SR_EOP|FLASH_SR_WRPERR|FLASH_SR_PGAERR);
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <flash_write_uboot_info+0x6c>)
 800030a:	691a      	ldr	r2, [r3, #16]
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <flash_write_uboot_info+0x6c>)
 800030e:	2131      	movs	r1, #49	; 0x31
 8000310:	438a      	bics	r2, r1
 8000312:	611a      	str	r2, [r3, #16]
		FLASH_ErasePage(UBOOT_CONFIG_ADDRESS);  //CONFIG_MAX_2K
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <flash_write_uboot_info+0x70>)
 8000316:	0018      	movs	r0, r3
 8000318:	f000 f93c 	bl	8000594 <FLASH_ErasePage>

		uint64_t *pSource = (uint64_t*) boot_info;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	617b      	str	r3, [r7, #20]
		//boot_info->BootVersion = UBOOT_VERSION;
		for (int i = 0; i <  sizeof(SKS_BOOT_INFO) / 8; i++,pSource++)
 8000320:	2300      	movs	r3, #0
 8000322:	613b      	str	r3, [r7, #16]
 8000324:	e016      	b.n	8000354 <flash_write_uboot_info+0x5c>
			FLASHStatus = FLASH_ProgramDoubleWord(UBOOT_CONFIG_ADDRESS + i * 8, *pSource);
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	4a10      	ldr	r2, [pc, #64]	; (800036c <flash_write_uboot_info+0x74>)
 800032a:	4694      	mov	ip, r2
 800032c:	4463      	add	r3, ip
 800032e:	00db      	lsls	r3, r3, #3
 8000330:	0019      	movs	r1, r3
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	0008      	movs	r0, r1
 800033a:	f000 f971 	bl	8000620 <FLASH_ProgramDoubleWord>
 800033e:	0003      	movs	r3, r0
 8000340:	001a      	movs	r2, r3
 8000342:	230f      	movs	r3, #15
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i <  sizeof(SKS_BOOT_INFO) / 8; i++,pSource++)
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	3301      	adds	r3, #1
 800034c:	613b      	str	r3, [r7, #16]
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	3308      	adds	r3, #8
 8000352:	617b      	str	r3, [r7, #20]
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	2b07      	cmp	r3, #7
 8000358:	d9e5      	bls.n	8000326 <flash_write_uboot_info+0x2e>
}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b006      	add	sp, #24
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40022000 	.word	0x40022000
 8000368:	0800fc00 	.word	0x0800fc00
 800036c:	01001f80 	.word	0x01001f80

08000370 <SerialDownload>:
/**
 * @brief  Download a file via serial port
 * @param  None
 * @retval None
 */
void SerialDownload(void) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
	int32_t Size = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]

	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
#define REPORT_POINTER_ADDRESS			0x807F000  //Page 254
	//FLASH_ErasePage(REPORT_POINTER_ADDRESS);
	printf(
 800037a:	4b2f      	ldr	r3, [pc, #188]	; (8000438 <SerialDownload+0xc8>)
 800037c:	0018      	movs	r0, r3
 800037e:	f001 fbf7 	bl	8001b70 <iprintf>
			"\r\nWaiting for the file to be sent ... (press 'a' to abort)\n\r");
	Size = Ymodem_Receive(&tab_1024[0]);
 8000382:	4b2e      	ldr	r3, [pc, #184]	; (800043c <SerialDownload+0xcc>)
 8000384:	0018      	movs	r0, r3
 8000386:	f001 f99b 	bl	80016c0 <Ymodem_Receive>
 800038a:	0003      	movs	r3, r0
 800038c:	607b      	str	r3, [r7, #4]
	if (Size > 0) {
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2b00      	cmp	r3, #0
 8000392:	dd30      	ble.n	80003f6 <SerialDownload+0x86>

		flash_read_uboot_info(&boot_inf);
 8000394:	4b2a      	ldr	r3, [pc, #168]	; (8000440 <SerialDownload+0xd0>)
 8000396:	0018      	movs	r0, r3
 8000398:	f7ff ff8a 	bl	80002b0 <flash_read_uboot_info>
		boot_inf.SecondarySize = Size;
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	4b28      	ldr	r3, [pc, #160]	; (8000440 <SerialDownload+0xd0>)
 80003a0:	60da      	str	r2, [r3, #12]
	/*	FLASH_ClearFlag(
				FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR
						| FLASH_FLAG_WRPERR);*/
		CRC_ResetDR();
 80003a2:	f000 f86b 	bl	800047c <CRC_ResetDR>
		//boot_inf.SecondaryCRC = CRC_CalcBlockCRC(BOOT_SECONDARY_ADDRESS, (uint32_t)(Size/4)+1);
		boot_inf.SecondaryCRC = CRC_CalcBlockCRC(BOOT_PRIMARY_ADDRESS,
				(uint32_t) (Size / 4) + 1);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	da00      	bge.n	80003ae <SerialDownload+0x3e>
 80003ac:	3303      	adds	r3, #3
 80003ae:	109b      	asrs	r3, r3, #2
		boot_inf.SecondaryCRC = CRC_CalcBlockCRC(BOOT_PRIMARY_ADDRESS,
 80003b0:	3301      	adds	r3, #1
 80003b2:	4a24      	ldr	r2, [pc, #144]	; (8000444 <SerialDownload+0xd4>)
 80003b4:	0019      	movs	r1, r3
 80003b6:	0010      	movs	r0, r2
 80003b8:	f000 f86a 	bl	8000490 <CRC_CalcBlockCRC>
 80003bc:	0002      	movs	r2, r0
 80003be:	4b20      	ldr	r3, [pc, #128]	; (8000440 <SerialDownload+0xd0>)
 80003c0:	609a      	str	r2, [r3, #8]
		boot_inf.PrimaryCRC = boot_inf.SecondaryCRC;
 80003c2:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <SerialDownload+0xd0>)
 80003c4:	689a      	ldr	r2, [r3, #8]
 80003c6:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <SerialDownload+0xd0>)
 80003c8:	601a      	str	r2, [r3, #0]
		boot_inf.PrimarySize = boot_inf.SecondarySize;
 80003ca:	4b1d      	ldr	r3, [pc, #116]	; (8000440 <SerialDownload+0xd0>)
 80003cc:	68da      	ldr	r2, [r3, #12]
 80003ce:	4b1c      	ldr	r3, [pc, #112]	; (8000440 <SerialDownload+0xd0>)
 80003d0:	605a      	str	r2, [r3, #4]
		//PrintBootInfo();
		boot_inf.PrimaryAddress = BOOT_PRIMARY_ADDRESS;
 80003d2:	4b1b      	ldr	r3, [pc, #108]	; (8000440 <SerialDownload+0xd0>)
 80003d4:	4a1b      	ldr	r2, [pc, #108]	; (8000444 <SerialDownload+0xd4>)
 80003d6:	615a      	str	r2, [r3, #20]
		boot_inf.SecondaryAddress = BOOT_SECONDARY_ADDRESS;
 80003d8:	4b19      	ldr	r3, [pc, #100]	; (8000440 <SerialDownload+0xd0>)
 80003da:	4a1b      	ldr	r2, [pc, #108]	; (8000448 <SerialDownload+0xd8>)
 80003dc:	619a      	str	r2, [r3, #24]
		boot_inf.UpdateFirmware = 1;
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <SerialDownload+0xd0>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	621a      	str	r2, [r3, #32]
		flash_write_uboot_info(&boot_inf);
 80003e4:	4b16      	ldr	r3, [pc, #88]	; (8000440 <SerialDownload+0xd0>)
 80003e6:	0018      	movs	r0, r3
 80003e8:	f7ff ff86 	bl	80002f8 <flash_write_uboot_info>
		printf(
 80003ec:	4b17      	ldr	r3, [pc, #92]	; (800044c <SerialDownload+0xdc>)
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 fc4a 	bl	8001c88 <puts>
	} else if (Size == -3) {
		printf("\r\n\nAborted by user.\n\r");
	} else {
		printf("\n\rFailed to receive the file!\n\r");
	}
}
 80003f4:	e01b      	b.n	800042e <SerialDownload+0xbe>
	} else if (Size == -1) {
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	3301      	adds	r3, #1
 80003fa:	d104      	bne.n	8000406 <SerialDownload+0x96>
		printf(
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <SerialDownload+0xe0>)
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 fbb6 	bl	8001b70 <iprintf>
}
 8000404:	e013      	b.n	800042e <SerialDownload+0xbe>
	} else if (Size == -2) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	3302      	adds	r3, #2
 800040a:	d104      	bne.n	8000416 <SerialDownload+0xa6>
		printf("\n\n\rVerification failed!\n\r");
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <SerialDownload+0xe4>)
 800040e:	0018      	movs	r0, r3
 8000410:	f001 fbae 	bl	8001b70 <iprintf>
}
 8000414:	e00b      	b.n	800042e <SerialDownload+0xbe>
	} else if (Size == -3) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3303      	adds	r3, #3
 800041a:	d104      	bne.n	8000426 <SerialDownload+0xb6>
		printf("\r\n\nAborted by user.\n\r");
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <SerialDownload+0xe8>)
 800041e:	0018      	movs	r0, r3
 8000420:	f001 fba6 	bl	8001b70 <iprintf>
}
 8000424:	e003      	b.n	800042e <SerialDownload+0xbe>
		printf("\n\rFailed to receive the file!\n\r");
 8000426:	4b0d      	ldr	r3, [pc, #52]	; (800045c <SerialDownload+0xec>)
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fba1 	bl	8001b70 <iprintf>
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	08002c30 	.word	0x08002c30
 800043c:	200000c8 	.word	0x200000c8
 8000440:	20000088 	.word	0x20000088
 8000444:	08002800 	.word	0x08002800
 8000448:	0800f000 	.word	0x0800f000
 800044c:	08002c70 	.word	0x08002c70
 8000450:	08002cbc 	.word	0x08002cbc
 8000454:	08002cfc 	.word	0x08002cfc
 8000458:	08002d18 	.word	0x08002d18
 800045c:	08002d30 	.word	0x08002d30

08000460 <CRC_ClockInit>:
 *      Author: thangnq
 */
#include "dvr_crc.h"
#include "stm32g0xx.h"

void CRC_ClockInit(void){
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_CRCEN;
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <CRC_ClockInit+0x18>)
 8000466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <CRC_ClockInit+0x18>)
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	0149      	lsls	r1, r1, #5
 800046e:	430a      	orrs	r2, r1
 8000470:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40021000 	.word	0x40021000

0800047c <CRC_ResetDR>:
void CRC_ResetDR(void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	/* Reset CRC generator */
	CRC->CR = CRC_CR_RESET;
 8000480:	4b02      	ldr	r3, [pc, #8]	; (800048c <CRC_ResetDR+0x10>)
 8000482:	2201      	movs	r2, #1
 8000484:	609a      	str	r2, [r3, #8]
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40023000 	.word	0x40023000

08000490 <CRC_CalcBlockCRC>:
uint32_t CRC_CalcCRC(uint32_t Data) {
	CRC->DR = Data;
	return (CRC->DR);
}

uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
	uint32_t index = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < BufferLength; index++) {
 800049e:	2300      	movs	r3, #0
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	e009      	b.n	80004b8 <CRC_CalcBlockCRC+0x28>
		CRC->DR = pBuffer[index];
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	18d3      	adds	r3, r2, r3
 80004ac:	4a07      	ldr	r2, [pc, #28]	; (80004cc <CRC_CalcBlockCRC+0x3c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6013      	str	r3, [r2, #0]
	for (index = 0; index < BufferLength; index++) {
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	3301      	adds	r3, #1
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fa      	ldr	r2, [r7, #12]
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d3f1      	bcc.n	80004a4 <CRC_CalcBlockCRC+0x14>
	}
	return (CRC->DR);
 80004c0:	4b02      	ldr	r3, [pc, #8]	; (80004cc <CRC_CalcBlockCRC+0x3c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
}
 80004c4:	0018      	movs	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b004      	add	sp, #16
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40023000 	.word	0x40023000

080004d0 <FLASH_Unlock>:
#define FLASH_PAGE_SIZE				0x800
void FLASH_Lock(void) {
	FLASH->CR |= FLASH_CR_LOCK;
}

void FLASH_Unlock(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	if (FLASH->CR & FLASH_CR_LOCK) {
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <FLASH_Unlock+0x20>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	da05      	bge.n	80004e8 <FLASH_Unlock+0x18>
		FLASH->KEYR = FLASH_KEY1;
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <FLASH_Unlock+0x20>)
 80004de:	4a05      	ldr	r2, [pc, #20]	; (80004f4 <FLASH_Unlock+0x24>)
 80004e0:	609a      	str	r2, [r3, #8]
		FLASH->KEYR = FLASH_KEY2;
 80004e2:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <FLASH_Unlock+0x20>)
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <FLASH_Unlock+0x28>)
 80004e6:	609a      	str	r2, [r3, #8]
	}
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40022000 	.word	0x40022000
 80004f4:	45670123 	.word	0x45670123
 80004f8:	cdef89ab 	.word	0xcdef89ab

080004fc <FLASH_GetBank1Status>:

	return flashstatus;
}


FLASH_Status FLASH_GetBank1Status(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0

	FLASH_Status flashstatus = FLASH_COMPLETE;
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	2204      	movs	r2, #4
 8000506:	701a      	strb	r2, [r3, #0]

	if ((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) {
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <FLASH_GetBank1Status+0x5c>)
 800050a:	691a      	ldr	r2, [r3, #16]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	025b      	lsls	r3, r3, #9
 8000510:	401a      	ands	r2, r3
 8000512:	2380      	movs	r3, #128	; 0x80
 8000514:	025b      	lsls	r3, r3, #9
 8000516:	429a      	cmp	r2, r3
 8000518:	d103      	bne.n	8000522 <FLASH_GetBank1Status+0x26>
		flashstatus = FLASH_BUSY;
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	e014      	b.n	800054c <FLASH_GetBank1Status+0x50>
	} else {
		if ((FLASH->SR & FLASH_FLAG_BANK1_PROGERR) != 0) {
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <FLASH_GetBank1Status+0x5c>)
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	2208      	movs	r2, #8
 8000528:	4013      	ands	r3, r2
 800052a:	d003      	beq.n	8000534 <FLASH_GetBank1Status+0x38>
			flashstatus = FLASH_ERROR_PG;
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	2202      	movs	r2, #2
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	e00b      	b.n	800054c <FLASH_GetBank1Status+0x50>
		} else {
			if ((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0) {
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <FLASH_GetBank1Status+0x5c>)
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	2210      	movs	r2, #16
 800053a:	4013      	ands	r3, r2
 800053c:	d003      	beq.n	8000546 <FLASH_GetBank1Status+0x4a>
				flashstatus = FLASH_ERROR_WRP;
 800053e:	1dfb      	adds	r3, r7, #7
 8000540:	2203      	movs	r2, #3
 8000542:	701a      	strb	r2, [r3, #0]
 8000544:	e002      	b.n	800054c <FLASH_GetBank1Status+0x50>
			} else {
				flashstatus = FLASH_COMPLETE;
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	2204      	movs	r2, #4
 800054a:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return flashstatus;
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
}
 8000550:	0018      	movs	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	b002      	add	sp, #8
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40022000 	.word	0x40022000

0800055c <FLASH_WaitForLastBank1Operation>:

FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout) {
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	FLASH_Status status = FLASH_COMPLETE;
 8000564:	250f      	movs	r5, #15
 8000566:	197b      	adds	r3, r7, r5
 8000568:	2204      	movs	r2, #4
 800056a:	701a      	strb	r2, [r3, #0]

	/* Check for the Flash Status */
	status = FLASH_GetBank1Status();
 800056c:	197c      	adds	r4, r7, r5
 800056e:	f7ff ffc5 	bl	80004fc <FLASH_GetBank1Status>
 8000572:	0003      	movs	r3, r0
 8000574:	7023      	strb	r3, [r4, #0]
	/* Wait for a Flash operation to complete or a TIMEOUT to occur */
	while ((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00)) {
 8000576:	46c0      	nop			; (mov r8, r8)
		status = FLASH_GetBank1Status();
		Timeout--;
	}
	if (Timeout == 0x00) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d102      	bne.n	8000584 <FLASH_WaitForLastBank1Operation+0x28>
		status = FLASH_TIMEOUT;
 800057e:	197b      	adds	r3, r7, r5
 8000580:	2205      	movs	r2, #5
 8000582:	701a      	strb	r2, [r3, #0]
	}
	/* Return the operation status */
	return status;
 8000584:	230f      	movs	r3, #15
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	781b      	ldrb	r3, [r3, #0]
}
 800058a:	0018      	movs	r0, r3
 800058c:	46bd      	mov	sp, r7
 800058e:	b004      	add	sp, #16
 8000590:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000594 <FLASH_ErasePage>:
	/* Return the operation status */
	return status;

}

FLASH_Status FLASH_ErasePage(uint32_t Page_Address) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	FLASH_Status status = FLASH_COMPLETE;
 800059c:	230f      	movs	r3, #15
 800059e:	18fb      	adds	r3, r7, r3
 80005a0:	2204      	movs	r2, #4
 80005a2:	701a      	strb	r2, [r3, #0]
	while ((FLASH->SR & FLASH_SR_BSY1))
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <FLASH_ErasePage+0x80>)
 80005a8:	691a      	ldr	r2, [r3, #16]
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	025b      	lsls	r3, r3, #9
 80005ae:	4013      	ands	r3, r2
 80005b0:	d1f9      	bne.n	80005a6 <FLASH_ErasePage+0x12>
		;
	FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <FLASH_ErasePage+0x80>)
 80005b4:	695a      	ldr	r2, [r3, #20]
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <FLASH_ErasePage+0x80>)
 80005b8:	2102      	movs	r1, #2
 80005ba:	430a      	orrs	r2, r1
 80005bc:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_PNB & (Page_Address << 3));
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <FLASH_ErasePage+0x80>)
 80005c0:	6959      	ldr	r1, [r3, #20]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	4a14      	ldr	r2, [pc, #80]	; (8000618 <FLASH_ErasePage+0x84>)
 80005c8:	401a      	ands	r2, r3
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <FLASH_ErasePage+0x80>)
 80005cc:	430a      	orrs	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 80005d0:	4b10      	ldr	r3, [pc, #64]	; (8000614 <FLASH_ErasePage+0x80>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <FLASH_ErasePage+0x80>)
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	0249      	lsls	r1, r1, #9
 80005da:	430a      	orrs	r2, r1
 80005dc:	615a      	str	r2, [r3, #20]
	while ((FLASH->SR & FLASH_SR_BSY1))
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <FLASH_ErasePage+0x80>)
 80005e2:	691a      	ldr	r2, [r3, #16]
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	025b      	lsls	r3, r3, #9
 80005e8:	4013      	ands	r3, r2
 80005ea:	d1f9      	bne.n	80005e0 <FLASH_ErasePage+0x4c>
		;
	FLASH->CR &= ~FLASH_SR_BSY1;
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <FLASH_ErasePage+0x80>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <FLASH_ErasePage+0x80>)
 80005f2:	490a      	ldr	r1, [pc, #40]	; (800061c <FLASH_ErasePage+0x88>)
 80005f4:	400a      	ands	r2, r1
 80005f6:	615a      	str	r2, [r3, #20]
	FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <FLASH_ErasePage+0x80>)
 80005fa:	695a      	ldr	r2, [r3, #20]
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <FLASH_ErasePage+0x80>)
 80005fe:	2102      	movs	r1, #2
 8000600:	438a      	bics	r2, r1
 8000602:	615a      	str	r2, [r3, #20]
	return status;
 8000604:	230f      	movs	r3, #15
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	781b      	ldrb	r3, [r3, #0]
}
 800060a:	0018      	movs	r0, r3
 800060c:	46bd      	mov	sp, r7
 800060e:	b004      	add	sp, #16
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	40022000 	.word	0x40022000
 8000618:	00001ff8 	.word	0x00001ff8
 800061c:	fffeffff 	.word	0xfffeffff

08000620 <FLASH_ProgramDoubleWord>:


void flashProgramDoubleWorld(uint32_t addr, uint64_t data) {
}

FLASH_Status FLASH_ProgramDoubleWord(uint32_t addr, uint64_t data) {
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	b087      	sub	sp, #28
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	603a      	str	r2, [r7, #0]
 800062a:	607b      	str	r3, [r7, #4]

	FLASH_Status status = FLASH_COMPLETE;
 800062c:	2117      	movs	r1, #23
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2204      	movs	r2, #4
 8000632:	701a      	strb	r2, [r3, #0]
	status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 8000634:	187e      	adds	r6, r7, r1
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	019b      	lsls	r3, r3, #6
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff ff8e 	bl	800055c <FLASH_WaitForLastBank1Operation>
 8000640:	0003      	movs	r3, r0
 8000642:	7033      	strb	r3, [r6, #0]

	FLASH->CR |= FLASH_CR_PG;/*!< Programming */
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <FLASH_ProgramDoubleWord+0x78>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <FLASH_ProgramDoubleWord+0x78>)
 800064a:	2101      	movs	r1, #1
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
	*(uint32_t*) addr = (uint32_t) data;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000656:	f3bf 8f6f 	isb	sy
}
 800065a:	46c0      	nop			; (mov r8, r8)
	__ISB();
	*(uint32_t*) (addr + 4U) = (uint32_t) (data >> 32U);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	001c      	movs	r4, r3
 8000660:	2300      	movs	r3, #0
 8000662:	001d      	movs	r5, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3304      	adds	r3, #4
 8000668:	0022      	movs	r2, r4
 800066a:	601a      	str	r2, [r3, #0]

	status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 800066c:	2517      	movs	r5, #23
 800066e:	197c      	adds	r4, r7, r5
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	019b      	lsls	r3, r3, #6
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ff71 	bl	800055c <FLASH_WaitForLastBank1Operation>
 800067a:	0003      	movs	r3, r0
 800067c:	7023      	strb	r3, [r4, #0]

	FLASH->CR &= ~FLASH_CR_PG;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <FLASH_ProgramDoubleWord+0x78>)
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <FLASH_ProgramDoubleWord+0x78>)
 8000684:	2101      	movs	r1, #1
 8000686:	438a      	bics	r2, r1
 8000688:	615a      	str	r2, [r3, #20]

	return status;
 800068a:	197b      	adds	r3, r7, r5
 800068c:	781b      	ldrb	r3, [r3, #0]
}
 800068e:	0018      	movs	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	b007      	add	sp, #28
 8000694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40022000 	.word	0x40022000

0800069c <usart_x0_init>:

static void COMX0_pin_init(void) ;
static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) ;


void usart_x0_init(uint32_t baudrate) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

	COMX0_pin_init();
 80006a4:	f000 f86c 	bl	8000780 <COMX0_pin_init>
	uartx_init(COMX0, baudrate);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <usart_x0_init+0x20>)
 80006ac:	0019      	movs	r1, r3
 80006ae:	0010      	movs	r0, r2
 80006b0:	f000 f8fc 	bl	80008ac <uartx_init>
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b002      	add	sp, #8
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40013800 	.word	0x40013800

080006c0 <usart_x0_send>:

void usart_x0_send(uint8_t c){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	0002      	movs	r2, r0
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	701a      	strb	r2, [r3, #0]
	while ((COMX0->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <usart_x0_send+0x2c>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	4013      	ands	r3, r2
 80006d6:	2b80      	cmp	r3, #128	; 0x80
 80006d8:	d1f9      	bne.n	80006ce <usart_x0_send+0xe>
	COMX0->TDR = c;
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <usart_x0_send+0x2c>)
 80006dc:	1dfa      	adds	r2, r7, #7
 80006de:	7812      	ldrb	r2, [r2, #0]
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40013800 	.word	0x40013800

080006f0 <SerialPutChar>:

void SerialPutChar(uint8_t c) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	0002      	movs	r2, r0
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	701a      	strb	r2, [r3, #0]
	usart_x0_send(c);
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff ffdd 	bl	80006c0 <usart_x0_send>
}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b002      	add	sp, #8
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <SerialKeyPressed>:
uint32_t SerialKeyPressed(uint8_t *key) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	if(USART_ISR_RXNE_RXFNE== (COMX0->ISR & USART_ISR_RXNE_RXFNE)){
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <SerialKeyPressed+0x2c>)
 800071a:	69db      	ldr	r3, [r3, #28]
 800071c:	2220      	movs	r2, #32
 800071e:	4013      	ands	r3, r2
 8000720:	2b20      	cmp	r3, #32
 8000722:	d106      	bne.n	8000732 <SerialKeyPressed+0x22>
		*key = (uint8_t) COMX0->RDR;
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <SerialKeyPressed+0x2c>)
 8000726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000728:	b2da      	uxtb	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	701a      	strb	r2, [r3, #0]
		return 1;
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <SerialKeyPressed+0x24>
	}else{
		return 0;
 8000732:	2300      	movs	r3, #0
	}
}
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	b002      	add	sp, #8
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40013800 	.word	0x40013800

08000740 <Rcv_Byte>:

int32_t Rcv_Byte(uint8_t *c, uint32_t timeout) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	uint32_t sec = ulSecCount;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <Rcv_Byte+0x3c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (SerialKeyPressed(c) == 1) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff ffdc 	bl	8000710 <SerialKeyPressed>
 8000758:	0003      	movs	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d101      	bne.n	8000762 <Rcv_Byte+0x22>
			return 0;
 800075e:	2300      	movs	r3, #0
 8000760:	e008      	b.n	8000774 <Rcv_Byte+0x34>
		}

		if ((uint32_t)(ulSecCount - sec) >= timeout)
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <Rcv_Byte+0x3c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d8ef      	bhi.n	8000750 <Rcv_Byte+0x10>
			return -1;
 8000770:	2301      	movs	r3, #1
 8000772:	425b      	negs	r3, r3
	}
	return -1;
}
 8000774:	0018      	movs	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	b004      	add	sp, #16
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200004cc 	.word	0x200004cc

08000780 <COMX0_pin_init>:
	}
	return *length;
}


static void COMX0_pin_init(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
	RCC->IOPENR |= (COMX0_TX_GPIO_CLK | COMX0_TX_GPIO_CLK);
 800078a:	4b42      	ldr	r3, [pc, #264]	; (8000894 <COMX0_pin_init+0x114>)
 800078c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800078e:	4b41      	ldr	r3, [pc, #260]	; (8000894 <COMX0_pin_init+0x114>)
 8000790:	2101      	movs	r1, #1
 8000792:	430a      	orrs	r2, r1
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->COMX0_APB_CLK |= COMX0_CLK;
 8000796:	4b3f      	ldr	r3, [pc, #252]	; (8000894 <COMX0_pin_init+0x114>)
 8000798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800079a:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <COMX0_pin_init+0x114>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	01c9      	lsls	r1, r1, #7
 80007a0:	430a      	orrs	r2, r1
 80007a2:	641a      	str	r2, [r3, #64]	; 0x40

	COMX0_RX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_RX_PIN * 2));
 80007a4:	23a0      	movs	r3, #160	; 0xa0
 80007a6:	05db      	lsls	r3, r3, #23
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	23a0      	movs	r3, #160	; 0xa0
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	493a      	ldr	r1, [pc, #232]	; (8000898 <COMX0_pin_init+0x118>)
 80007b0:	400a      	ands	r2, r1
 80007b2:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->MODER |= (0x02 << (COMX0_RX_PIN * 2)); //mode AF
 80007b4:	23a0      	movs	r3, #160	; 0xa0
 80007b6:	05db      	lsls	r3, r3, #23
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	23a0      	movs	r3, #160	; 0xa0
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	2180      	movs	r1, #128	; 0x80
 80007c0:	0389      	lsls	r1, r1, #14
 80007c2:	430a      	orrs	r2, r1
 80007c4:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->ODR &= ~(0x01 << COMX0_RX_PIN); //push pull
 80007c6:	23a0      	movs	r3, #160	; 0xa0
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	695a      	ldr	r2, [r3, #20]
 80007cc:	23a0      	movs	r3, #160	; 0xa0
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	4932      	ldr	r1, [pc, #200]	; (800089c <COMX0_pin_init+0x11c>)
 80007d2:	400a      	ands	r2, r1
 80007d4:	615a      	str	r2, [r3, #20]
	COMX0_RX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_RX_PIN * 2)); //no pull
 80007d6:	23a0      	movs	r3, #160	; 0xa0
 80007d8:	05db      	lsls	r3, r3, #23
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	23a0      	movs	r3, #160	; 0xa0
 80007de:	05db      	lsls	r3, r3, #23
 80007e0:	492d      	ldr	r1, [pc, #180]	; (8000898 <COMX0_pin_init+0x118>)
 80007e2:	400a      	ands	r2, r1
 80007e4:	60da      	str	r2, [r3, #12]
	COMX0_RX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_RX_PIN); ////speed low
 80007e6:	23a0      	movs	r3, #160	; 0xa0
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	689a      	ldr	r2, [r3, #8]
 80007ec:	23a0      	movs	r3, #160	; 0xa0
 80007ee:	05db      	lsls	r3, r3, #23
 80007f0:	492a      	ldr	r1, [pc, #168]	; (800089c <COMX0_pin_init+0x11c>)
 80007f2:	400a      	ands	r2, r1
 80007f4:	609a      	str	r2, [r3, #8]

	COMX0_TX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_TX_PIN * 2));
 80007f6:	23a0      	movs	r3, #160	; 0xa0
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	23a0      	movs	r3, #160	; 0xa0
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	4927      	ldr	r1, [pc, #156]	; (80008a0 <COMX0_pin_init+0x120>)
 8000802:	400a      	ands	r2, r1
 8000804:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->MODER |= (0x02 << (COMX0_TX_PIN * 2)); //mode AF
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	05db      	lsls	r3, r3, #23
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	23a0      	movs	r3, #160	; 0xa0
 800080e:	05db      	lsls	r3, r3, #23
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	0309      	lsls	r1, r1, #12
 8000814:	430a      	orrs	r2, r1
 8000816:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->ODR &= ~(0x01 << COMX0_TX_PIN); //push pull
 8000818:	23a0      	movs	r3, #160	; 0xa0
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	695a      	ldr	r2, [r3, #20]
 800081e:	23a0      	movs	r3, #160	; 0xa0
 8000820:	05db      	lsls	r3, r3, #23
 8000822:	4920      	ldr	r1, [pc, #128]	; (80008a4 <COMX0_pin_init+0x124>)
 8000824:	400a      	ands	r2, r1
 8000826:	615a      	str	r2, [r3, #20]
	COMX0_TX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_TX_PIN * 2)); //no pull
 8000828:	23a0      	movs	r3, #160	; 0xa0
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	68da      	ldr	r2, [r3, #12]
 800082e:	23a0      	movs	r3, #160	; 0xa0
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	491b      	ldr	r1, [pc, #108]	; (80008a0 <COMX0_pin_init+0x120>)
 8000834:	400a      	ands	r2, r1
 8000836:	60da      	str	r2, [r3, #12]
	COMX0_TX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_TX_PIN); ////speed low
 8000838:	23a0      	movs	r3, #160	; 0xa0
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	23a0      	movs	r3, #160	; 0xa0
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	4918      	ldr	r1, [pc, #96]	; (80008a4 <COMX0_pin_init+0x124>)
 8000844:	400a      	ands	r2, r1
 8000846:	609a      	str	r2, [r3, #8]

	temp = COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3u];
 8000848:	23a0      	movs	r3, #160	; 0xa0
 800084a:	05db      	lsls	r3, r3, #23
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_RX_PIN & 0x07u) * 4ul));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <COMX0_pin_init+0x128>)
 8000854:	4013      	ands	r3, r2
 8000856:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_RX_PIN_AF << ((COMX0_RX_PIN & 0x07u) * 4ul));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	0052      	lsls	r2, r2, #1
 800085e:	4313      	orrs	r3, r2
 8000860:	607b      	str	r3, [r7, #4]
	COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3ul] = temp;
 8000862:	23a0      	movs	r3, #160	; 0xa0
 8000864:	05db      	lsls	r3, r3, #23
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	625a      	str	r2, [r3, #36]	; 0x24

	temp = COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3u];
 800086a:	23a0      	movs	r3, #160	; 0xa0
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000870:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_TX_PIN & 0x07u) * 4ul));
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	22f0      	movs	r2, #240	; 0xf0
 8000876:	4393      	bics	r3, r2
 8000878:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_TX_PIN_AF << ((COMX0_TX_PIN & 0x07u) * 4ul));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2210      	movs	r2, #16
 800087e:	4313      	orrs	r3, r2
 8000880:	607b      	str	r3, [r7, #4]
	COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3ul] = temp;
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40021000 	.word	0x40021000
 8000898:	ffcfffff 	.word	0xffcfffff
 800089c:	fffffbff 	.word	0xfffffbff
 80008a0:	fff3ffff 	.word	0xfff3ffff
 80008a4:	fffffdff 	.word	0xfffffdff
 80008a8:	fffff0ff 	.word	0xfffff0ff

080008ac <uartx_init>:



static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	uint32_t BRR_value = SYS_CLOCK / baudrate;
 80008b6:	6839      	ldr	r1, [r7, #0]
 80008b8:	4819      	ldr	r0, [pc, #100]	; (8000920 <uartx_init+0x74>)
 80008ba:	f7ff fc2d 	bl	8000118 <__udivsi3>
 80008be:	0003      	movs	r3, r0
 80008c0:	60fb      	str	r3, [r7, #12]

	UARTx->CR1 = 0;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
	// Word length 8n1
	UARTx->CR1 &= ~USART_CR1_M1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a15      	ldr	r2, [pc, #84]	; (8000924 <uartx_init+0x78>)
 80008ce:	401a      	ands	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
	//Parity disable
	UARTx->CR1 &= ~USART_CR1_PCE;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <uartx_init+0x7c>)
 80008da:	401a      	ands	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	601a      	str	r2, [r3, #0]
	//mode Tx_Rx
	UARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	220c      	movs	r2, #12
 80008e6:	431a      	orrs	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
	//OverSampling 16bit
	UARTx->CR1 &= ~USART_CR1_OVER8;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <uartx_init+0x80>)
 80008f2:	401a      	ands	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
	//ClockPrescaler no div
	UARTx->PRESC &= USART_PRESC_PRESCALER;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fc:	220f      	movs	r2, #15
 80008fe:	401a      	ands	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
	//set baudrate 115200
	UARTx->BRR = BRR_value;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	60da      	str	r2, [r3, #12]
	//rx interupt enable
	//UARTx->CR1 |= USART_CR1_RXNEIE_RXFNEIE;
	UARTx->CR1 |= USART_CR1_UE;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2201      	movs	r2, #1
 8000910:	431a      	orrs	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	601a      	str	r2, [r3, #0]
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b004      	add	sp, #16
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	03d09000 	.word	0x03d09000
 8000924:	efffffff 	.word	0xefffffff
 8000928:	fffffbff 	.word	0xfffffbff
 800092c:	ffff7fff 	.word	0xffff7fff

08000930 <main>:
static uint32_t ulTickCount = 0;
static uint32_t lastSendData = 0;
static int setUp(void);

extern void mainTask(void);
int main(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	setUp();
 8000934:	f000 f81a 	bl	800096c <setUp>
	mainTask();
 8000938:	f000 f856 	bl	80009e8 <mainTask>
	while (1) {
		if ((uint32_t) (ulMiliCount - lastSendData) >= 1000) {
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <main+0x30>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <main+0x34>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	1ad2      	subs	r2, r2, r3
 8000946:	23fa      	movs	r3, #250	; 0xfa
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	429a      	cmp	r2, r3
 800094c:	d3f6      	bcc.n	800093c <main+0xc>
			lastSendData = ulMiliCount;
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <main+0x30>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <main+0x34>)
 8000954:	601a      	str	r2, [r3, #0]
			xprintf("hello\r\n");
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <main+0x38>)
 8000958:	0018      	movs	r0, r3
 800095a:	f000 fdf3 	bl	8001544 <xprintf>
		if ((uint32_t) (ulMiliCount - lastSendData) >= 1000) {
 800095e:	e7ed      	b.n	800093c <main+0xc>
 8000960:	200004c8 	.word	0x200004c8
 8000964:	200004d4 	.word	0x200004d4
 8000968:	08002d50 	.word	0x08002d50

0800096c <setUp>:
		}
	}
	return 1;
}

static int setUp(void) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	int ret = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
	systemInit();
 8000976:	f000 fb55 	bl	8001024 <systemInit>
	usart_x0_init(115200);
 800097a:	23e1      	movs	r3, #225	; 0xe1
 800097c:	025b      	lsls	r3, r3, #9
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fe8c 	bl	800069c <usart_x0_init>
	CRC_ClockInit();
 8000984:	f7ff fd6c 	bl	8000460 <CRC_ClockInit>
	xdev_out(SerialPutChar);
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <setUp+0x2c>)
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <setUp+0x30>)
 800098c:	601a      	str	r2, [r3, #0]
	return ret;
 800098e:	687b      	ldr	r3, [r7, #4]
}
 8000990:	0018      	movs	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	b002      	add	sp, #8
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200004e4 	.word	0x200004e4
 800099c:	080006f1 	.word	0x080006f1

080009a0 <SysTick_Handler>:

void SysTick_Handler(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	ulMiliCount++;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <SysTick_Handler+0x3c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <SysTick_Handler+0x3c>)
 80009ac:	601a      	str	r2, [r3, #0]
	ulTickCount++;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <SysTick_Handler+0x40>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <SysTick_Handler+0x40>)
 80009b6:	601a      	str	r2, [r3, #0]
	if (ulTickCount > 1000) {
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <SysTick_Handler+0x40>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	23fa      	movs	r3, #250	; 0xfa
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d907      	bls.n	80009d4 <SysTick_Handler+0x34>
		ulTickCount =0;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SysTick_Handler+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
		ulSecCount++;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SysTick_Handler+0x44>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	1c5a      	adds	r2, r3, #1
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SysTick_Handler+0x44>)
 80009d2:	601a      	str	r2, [r3, #0]
	}
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	200004c8 	.word	0x200004c8
 80009e0:	200004d0 	.word	0x200004d0
 80009e4:	200004cc 	.word	0x200004cc

080009e8 <mainTask>:
uint32_t BlockNbr = 0, UserMemoryMask1 = 0;
__IO uint32_t FlashProtection = 0;
extern SKS_BOOT_INFO boot_inf;


void mainTask(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
			NVIC_SystemReset();
		}
		FLASH_OB_Lock();
#endif

	uint8_t key = 0;
 80009ee:	230d      	movs	r3, #13
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
	uint8_t chr = 0;
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
	uint8_t boot = 0;
 80009fc:	230f      	movs	r3, #15
 80009fe:	18fb      	adds	r3, r7, r3
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
	uint8_t image_ok = 0;
 8000a04:	230c      	movs	r3, #12
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
	uint8_t istimeout = 0;
 8000a0c:	230e      	movs	r3, #14
 8000a0e:	18fb      	adds	r3, r7, r3
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]

	while (1) {
		if (istimeout == 0) {
 8000a14:	230e      	movs	r3, #14
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <mainTask+0x3a>
			if (FlashProtection != 0) {
 8000a1e:	4b5c      	ldr	r3, [pc, #368]	; (8000b90 <mainTask+0x1a8>)
 8000a20:	681b      	ldr	r3, [r3, #0]

			}
		}
		key = Rcv_Byte(&chr, 10);
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	210a      	movs	r1, #10
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff fe8a 	bl	8000740 <Rcv_Byte>
 8000a2c:	0002      	movs	r2, r0
 8000a2e:	210d      	movs	r1, #13
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	701a      	strb	r2, [r3, #0]
		if (!key) {
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d14b      	bne.n	8000ad4 <mainTask+0xec>
			istimeout = 0;
 8000a3c:	230e      	movs	r3, #14
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
			boot = 0;
 8000a44:	230f      	movs	r3, #15
 8000a46:	18fb      	adds	r3, r7, r3
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
			key = chr;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	1dfa      	adds	r2, r7, #7
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	701a      	strb	r2, [r3, #0]
			if (key == 0x31) {
 8000a54:	000a      	movs	r2, r1
 8000a56:	18bb      	adds	r3, r7, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b31      	cmp	r3, #49	; 0x31
 8000a5c:	d034      	beq.n	8000ac8 <mainTask+0xe0>
				/* Download user application in the Flash */
				//SerialDownload();
			} else if (key == 0x32) {
 8000a5e:	18bb      	adds	r3, r7, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b32      	cmp	r3, #50	; 0x32
 8000a64:	d030      	beq.n	8000ac8 <mainTask+0xe0>
				/* Upload user application from the Flash */
				//SerialUpload();
			} else if ((key == 0x33) || (key == 'b') || (key == 'B')) {
 8000a66:	18bb      	adds	r3, r7, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b33      	cmp	r3, #51	; 0x33
 8000a6c:	d007      	beq.n	8000a7e <mainTask+0x96>
 8000a6e:	18bb      	adds	r3, r7, r2
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b62      	cmp	r3, #98	; 0x62
 8000a74:	d003      	beq.n	8000a7e <mainTask+0x96>
 8000a76:	18bb      	adds	r3, r7, r2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b42      	cmp	r3, #66	; 0x42
 8000a7c:	d104      	bne.n	8000a88 <mainTask+0xa0>
				boot = 1;
 8000a7e:	230f      	movs	r3, #15
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e01f      	b.n	8000ac8 <mainTask+0xe0>
			} else if ((key == 0x34) && (FlashProtection == 1)) {
 8000a88:	230d      	movs	r3, #13
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b34      	cmp	r3, #52	; 0x34
 8000a90:	d103      	bne.n	8000a9a <mainTask+0xb2>
 8000a92:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <mainTask+0x1a8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d016      	beq.n	8000ac8 <mainTask+0xe0>
				/* Disable the write protection of desired pages */
				//FLASH_DisableWriteProtectionPages(UserMemoryMask1);
			} else if ((key == SOH) || (key == STX)) {
 8000a9a:	220d      	movs	r2, #13
 8000a9c:	18bb      	adds	r3, r7, r2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d003      	beq.n	8000aac <mainTask+0xc4>
 8000aa4:	18bb      	adds	r3, r7, r2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d102      	bne.n	8000ab2 <mainTask+0xca>
				/* Download user application in the Flash */
				SerialDownload();
 8000aac:	f7ff fc60 	bl	8000370 <SerialDownload>
			} else if ((key == SOH) || (key == STX)) {
 8000ab0:	e00a      	b.n	8000ac8 <mainTask+0xe0>
			} else if ((key == 'd') || (key == 'D')) {
 8000ab2:	220d      	movs	r2, #13
 8000ab4:	18bb      	adds	r3, r7, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b64      	cmp	r3, #100	; 0x64
 8000aba:	d003      	beq.n	8000ac4 <mainTask+0xdc>
 8000abc:	18bb      	adds	r3, r7, r2
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b44      	cmp	r3, #68	; 0x44
 8000ac2:	d101      	bne.n	8000ac8 <mainTask+0xe0>
				/* Download user application in the Flash */
				SerialDownload();
 8000ac4:	f7ff fc54 	bl	8000370 <SerialDownload>
			}
			if (boot == 0)
 8000ac8:	230f      	movs	r3, #15
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10c      	bne.n	8000aec <mainTask+0x104>
				continue;
 8000ad2:	e05c      	b.n	8000b8e <mainTask+0x1a6>
		} else {
			xprintf("Time out, booting ... ");
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <mainTask+0x1ac>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fd34 	bl	8001544 <xprintf>
			istimeout = 1;
 8000adc:	230e      	movs	r3, #14
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
			boot = 1; //TimeOut
 8000ae4:	230f      	movs	r3, #15
 8000ae6:	18fb      	adds	r3, r7, r3
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
		}

		if (boot) {
 8000aec:	230f      	movs	r3, #15
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d08e      	beq.n	8000a14 <mainTask+0x2c>
			//image_ok = Verify
			printf("VERIFY IMAGE ...");
 8000af6:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <mainTask+0x1b0>)
 8000af8:	0018      	movs	r0, r3
 8000afa:	f001 f839 	bl	8001b70 <iprintf>
			image_ok = flash_verify_image(&boot_inf);
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <mainTask+0x1b4>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f7ff fbaf 	bl	8000264 <flash_verify_image>
 8000b06:	0002      	movs	r2, r0
 8000b08:	210c      	movs	r1, #12
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
			//PrintBootInfo();
			if (image_ok > 0) {
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d037      	beq.n	8000b86 <mainTask+0x19e>
				xprintf("SUCCESS!!!\r\n");
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <mainTask+0x1b8>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 fd13 	bl	8001544 <xprintf>
				if (((*(__IO uint32_t*) ApplicationAddress ) & 0x2FFE0000) == 0x20000000) {
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <mainTask+0x1bc>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a21      	ldr	r2, [pc, #132]	; (8000ba8 <mainTask+0x1c0>)
 8000b24:	401a      	ands	r2, r3
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	059b      	lsls	r3, r3, #22
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d000      	beq.n	8000b30 <mainTask+0x148>
 8000b2e:	e771      	b.n	8000a14 <mainTask+0x2c>
					xprintf("BOOTING...\r\n");
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <mainTask+0x1c4>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 fd06 	bl	8001544 <xprintf>
					/*DISABLE ALL INTERUPT BEFORE JUMP TO APPLICATION*/
					/* TIM2 enable counter */
					unsigned long now = ulMiliCount;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <mainTask+0x1c8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60bb      	str	r3, [r7, #8]
					while ((ulMiliCount - now) < 10) ;
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <mainTask+0x1c8>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	2b09      	cmp	r3, #9
 8000b4a:	d9f9      	bls.n	8000b40 <mainTask+0x158>
					RCC_DeInit();
 8000b4c:	f000 fafc 	bl	8001148 <RCC_DeInit>
					SysTick->CTRL = 0;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <mainTask+0x1cc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
					SysTick->LOAD = 0;
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <mainTask+0x1cc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
					SysTick->VAL = 0;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <mainTask+0x1cc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b62:	b672      	cpsid	i
}
 8000b64:	46c0      	nop			; (mov r8, r8)
					__disable_irq();
					SYSCFG->CFGR1 = 0x01;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <mainTask+0x1d0>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]
					Jump_To_Application = (void (*)(void)) (*((uint32_t*) (ApplicationAddress + 4)));
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <mainTask+0x1d4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	001a      	movs	r2, r3
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <mainTask+0x1d8>)
 8000b74:	601a      	str	r2, [r3, #0]
					Jump_To_Application();
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <mainTask+0x1d8>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4798      	blx	r3
					xprintf("INVALID IMAGE SIGN, RETURN BOOT LOADER\r\n");
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <mainTask+0x1dc>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 fce0 	bl	8001544 <xprintf>
 8000b84:	e746      	b.n	8000a14 <mainTask+0x2c>
				}
			} else
				xprintf("FAILURE, RETURN BOOT LOADER\r\n");
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <mainTask+0x1e0>)
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 fcdb 	bl	8001544 <xprintf>
		if (istimeout == 0) {
 8000b8e:	e741      	b.n	8000a14 <mainTask+0x2c>
 8000b90:	200004dc 	.word	0x200004dc
 8000b94:	08002d58 	.word	0x08002d58
 8000b98:	08002d70 	.word	0x08002d70
 8000b9c:	20000088 	.word	0x20000088
 8000ba0:	08002d84 	.word	0x08002d84
 8000ba4:	08002800 	.word	0x08002800
 8000ba8:	2ffe0000 	.word	0x2ffe0000
 8000bac:	08002d94 	.word	0x08002d94
 8000bb0:	200004c8 	.word	0x200004c8
 8000bb4:	e000e010 	.word	0xe000e010
 8000bb8:	40010000 	.word	0x40010000
 8000bbc:	08002804 	.word	0x08002804
 8000bc0:	200004d8 	.word	0x200004d8
 8000bc4:	08002da4 	.word	0x08002da4
 8000bc8:	08002dd0 	.word	0x08002dd0

08000bcc <Str2Int>:
		}
	}

}

uint32_t Str2Int(uint8_t *inputstr, int32_t *intnum){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0,val = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  if ('0' == inputstr[0] && ( 'x' == inputstr[1] || 'X' == inputstr[1])){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b30      	cmp	r3, #48	; 0x30
 8000be8:	d000      	beq.n	8000bec <Str2Int+0x20>
 8000bea:	e082      	b.n	8000cf2 <Str2Int+0x126>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b78      	cmp	r3, #120	; 0x78
 8000bf4:	d005      	beq.n	8000c02 <Str2Int+0x36>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b58      	cmp	r3, #88	; 0x58
 8000bfe:	d000      	beq.n	8000c02 <Str2Int+0x36>
 8000c00:	e077      	b.n	8000cf2 <Str2Int+0x126>
    if (inputstr[2] == '\0'){
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3302      	adds	r3, #2
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <Str2Int+0x44>
      return 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e0d8      	b.n	8000dc2 <Str2Int+0x1f6>
    }
    for (i = 2; i < 11; i++){
 8000c10:	2302      	movs	r3, #2
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e063      	b.n	8000cde <Str2Int+0x112>
      if ('\0' == inputstr[i])
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	18d3      	adds	r3, r2, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d105      	bne.n	8000c2e <Str2Int+0x62>
      {
        *intnum = val;
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	601a      	str	r2, [r3, #0]
        res = 1;//retutn 1
 8000c28:	2301      	movs	r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
        break;
 8000c2c:	e05a      	b.n	8000ce4 <Str2Int+0x118>
      }
      if (ISVALIDHEX(inputstr[i])){
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	18d3      	adds	r3, r2, r3
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b40      	cmp	r3, #64	; 0x40
 8000c38:	d905      	bls.n	8000c46 <Str2Int+0x7a>
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	18d3      	adds	r3, r2, r3
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b46      	cmp	r3, #70	; 0x46
 8000c44:	d917      	bls.n	8000c76 <Str2Int+0xaa>
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	18d3      	adds	r3, r2, r3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b60      	cmp	r3, #96	; 0x60
 8000c50:	d905      	bls.n	8000c5e <Str2Int+0x92>
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	18d3      	adds	r3, r2, r3
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b66      	cmp	r3, #102	; 0x66
 8000c5c:	d90b      	bls.n	8000c76 <Str2Int+0xaa>
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	18d3      	adds	r3, r2, r3
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b2f      	cmp	r3, #47	; 0x2f
 8000c68:	d936      	bls.n	8000cd8 <Str2Int+0x10c>
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	18d3      	adds	r3, r2, r3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b39      	cmp	r3, #57	; 0x39
 8000c74:	d830      	bhi.n	8000cd8 <Str2Int+0x10c>
        val = (val << 4) + CONVERTHEX(inputstr[i]);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	011a      	lsls	r2, r3, #4
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	18cb      	adds	r3, r1, r3
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b2f      	cmp	r3, #47	; 0x2f
 8000c84:	d90b      	bls.n	8000c9e <Str2Int+0xd2>
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	18cb      	adds	r3, r1, r3
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b39      	cmp	r3, #57	; 0x39
 8000c90:	d805      	bhi.n	8000c9e <Str2Int+0xd2>
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	18cb      	adds	r3, r1, r3
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3b30      	subs	r3, #48	; 0x30
 8000c9c:	e016      	b.n	8000ccc <Str2Int+0x100>
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	18cb      	adds	r3, r1, r3
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b40      	cmp	r3, #64	; 0x40
 8000ca8:	d90b      	bls.n	8000cc2 <Str2Int+0xf6>
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	18cb      	adds	r3, r1, r3
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b46      	cmp	r3, #70	; 0x46
 8000cb4:	d805      	bhi.n	8000cc2 <Str2Int+0xf6>
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	18cb      	adds	r3, r1, r3
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	3b37      	subs	r3, #55	; 0x37
 8000cc0:	e004      	b.n	8000ccc <Str2Int+0x100>
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	18cb      	adds	r3, r1, r3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	3b57      	subs	r3, #87	; 0x57
 8000ccc:	189b      	adds	r3, r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
    for (i = 2; i < 11; i++){
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e002      	b.n	8000cde <Str2Int+0x112>
      }
      else{
        res = 0;  /* return 0, Invalid input */
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
        break;
 8000cdc:	e002      	b.n	8000ce4 <Str2Int+0x118>
    for (i = 2; i < 11; i++){
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2b0a      	cmp	r3, #10
 8000ce2:	d998      	bls.n	8000c16 <Str2Int+0x4a>
      }
    }
    if (i >= 11){/* over 8 digit hex --invalid */
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2b0a      	cmp	r3, #10
 8000ce8:	d800      	bhi.n	8000cec <Str2Int+0x120>
 8000cea:	e069      	b.n	8000dc0 <Str2Int+0x1f4>
      res = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
    if (i >= 11){/* over 8 digit hex --invalid */
 8000cf0:	e066      	b.n	8000dc0 <Str2Int+0x1f4>
    }
  }
  else{ /* max 10-digit decimal input */
    for (i = 0;i < 11;i++){
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e05b      	b.n	8000db0 <Str2Int+0x1e4>
      if ('\0' == inputstr[i]){
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	18d3      	adds	r3, r2, r3
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d105      	bne.n	8000d10 <Str2Int+0x144>
        *intnum = val;
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	601a      	str	r2, [r3, #0]
        res = 1; /* return 1 */
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	613b      	str	r3, [r7, #16]
        break;
 8000d0e:	e052      	b.n	8000db6 <Str2Int+0x1ea>
      }
      else if (('k' == inputstr[i] || 'K' == inputstr[i]) && (i > 0)){
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	18d3      	adds	r3, r2, r3
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b6b      	cmp	r3, #107	; 0x6b
 8000d1a:	d005      	beq.n	8000d28 <Str2Int+0x15c>
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	18d3      	adds	r3, r2, r3
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b4b      	cmp	r3, #75	; 0x4b
 8000d26:	d10b      	bne.n	8000d40 <Str2Int+0x174>
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d008      	beq.n	8000d40 <Str2Int+0x174>
        val = val << 10;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	029b      	lsls	r3, r3, #10
 8000d32:	60fb      	str	r3, [r7, #12]
        *intnum = val;
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	601a      	str	r2, [r3, #0]
        res = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	613b      	str	r3, [r7, #16]
        break;
 8000d3e:	e03a      	b.n	8000db6 <Str2Int+0x1ea>
      }
      else if (('m' == inputstr[i] || 'M' == inputstr[i]) && (i > 0)){
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	18d3      	adds	r3, r2, r3
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b6d      	cmp	r3, #109	; 0x6d
 8000d4a:	d005      	beq.n	8000d58 <Str2Int+0x18c>
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	18d3      	adds	r3, r2, r3
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b4d      	cmp	r3, #77	; 0x4d
 8000d56:	d10b      	bne.n	8000d70 <Str2Int+0x1a4>
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d008      	beq.n	8000d70 <Str2Int+0x1a4>
        val = val << 20;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	051b      	lsls	r3, r3, #20
 8000d62:	60fb      	str	r3, [r7, #12]
        *intnum = val;
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	601a      	str	r2, [r3, #0]
        res = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	613b      	str	r3, [r7, #16]
        break;
 8000d6e:	e022      	b.n	8000db6 <Str2Int+0x1ea>
      }
      else if (ISVALIDDEC(inputstr[i])){
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b2f      	cmp	r3, #47	; 0x2f
 8000d7a:	d916      	bls.n	8000daa <Str2Int+0x1de>
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	18d3      	adds	r3, r2, r3
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b39      	cmp	r3, #57	; 0x39
 8000d86:	d810      	bhi.n	8000daa <Str2Int+0x1de>
        val = val * 10 + CONVERTDEC(inputstr[i]);
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	0019      	movs	r1, r3
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	18d3      	adds	r3, r2, r3
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	18cb      	adds	r3, r1, r3
 8000d9e:	3b30      	subs	r3, #48	; 0x30
 8000da0:	60fb      	str	r3, [r7, #12]
    for (i = 0;i < 11;i++){
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e002      	b.n	8000db0 <Str2Int+0x1e4>
      }
      else{
        res = 0; /* return 0, Invalid input */
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
        break;
 8000dae:	e002      	b.n	8000db6 <Str2Int+0x1ea>
    for (i = 0;i < 11;i++){
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	2b0a      	cmp	r3, #10
 8000db4:	d9a0      	bls.n	8000cf8 <Str2Int+0x12c>
      }
    }
    if (i >= 11){/* Over 10 digit decimal --invalid */
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	2b0a      	cmp	r3, #10
 8000dba:	d901      	bls.n	8000dc0 <Str2Int+0x1f4>
      res = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
    }
  }

  return res;
 8000dc0:	693b      	ldr	r3, [r7, #16]
}
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b006      	add	sp, #24
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	e00a      	b.n	8000df2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ddc:	e000      	b.n	8000de0 <_read+0x16>
 8000dde:	bf00      	nop
 8000de0:	0001      	movs	r1, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	b2ca      	uxtb	r2, r1
 8000dea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	3301      	adds	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	dbf0      	blt.n	8000ddc <_read+0x12>
	}

return len;
 8000dfa:	687b      	ldr	r3, [r7, #4]
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b006      	add	sp, #24
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	e009      	b.n	8000e2a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1c5a      	adds	r2, r3, #1
 8000e1a:	60ba      	str	r2, [r7, #8]
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	e000      	b.n	8000e24 <_write+0x20>
 8000e22:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3301      	adds	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	dbf1      	blt.n	8000e16 <_write+0x12>
	}
	return len;
 8000e32:	687b      	ldr	r3, [r7, #4]
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b006      	add	sp, #24
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_close>:

int _close(int file)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	return -1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	425b      	negs	r3, r3
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	0192      	lsls	r2, r2, #6
 8000e60:	605a      	str	r2, [r3, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_isatty>:

int _isatty(int file)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	return 1;
 8000e74:	2301      	movs	r3, #1
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b084      	sub	sp, #16
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
	return 0;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b004      	add	sp, #16
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	18d3      	adds	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f000 fe18 	bl	8001af8 <__errno>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	18d2      	adds	r2, r2, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <_sbrk+0x64>)
 8000ee4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b006      	add	sp, #24
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20002000 	.word	0x20002000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	200004e0 	.word	0x200004e0
 8000efc:	20000a10 	.word	0x20000a10

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	0002      	movs	r2, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b7f      	cmp	r3, #127	; 0x7f
 8000f14:	d828      	bhi.n	8000f68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f16:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <__NVIC_SetPriority+0xd4>)
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	33c0      	adds	r3, #192	; 0xc0
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	589b      	ldr	r3, [r3, r2]
 8000f26:	1dfa      	adds	r2, r7, #7
 8000f28:	7812      	ldrb	r2, [r2, #0]
 8000f2a:	0011      	movs	r1, r2
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	400a      	ands	r2, r1
 8000f30:	00d2      	lsls	r2, r2, #3
 8000f32:	21ff      	movs	r1, #255	; 0xff
 8000f34:	4091      	lsls	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	43d2      	mvns	r2, r2
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	019b      	lsls	r3, r3, #6
 8000f42:	22ff      	movs	r2, #255	; 0xff
 8000f44:	401a      	ands	r2, r3
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	4003      	ands	r3, r0
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f54:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <__NVIC_SetPriority+0xd4>)
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	33c0      	adds	r3, #192	; 0xc0
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f66:	e031      	b.n	8000fcc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <__NVIC_SetPriority+0xd8>)
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0019      	movs	r1, r3
 8000f70:	230f      	movs	r3, #15
 8000f72:	400b      	ands	r3, r1
 8000f74:	3b08      	subs	r3, #8
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3306      	adds	r3, #6
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	18d3      	adds	r3, r2, r3
 8000f7e:	3304      	adds	r3, #4
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	1dfa      	adds	r2, r7, #7
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	0011      	movs	r1, r2
 8000f88:	2203      	movs	r2, #3
 8000f8a:	400a      	ands	r2, r1
 8000f8c:	00d2      	lsls	r2, r2, #3
 8000f8e:	21ff      	movs	r1, #255	; 0xff
 8000f90:	4091      	lsls	r1, r2
 8000f92:	000a      	movs	r2, r1
 8000f94:	43d2      	mvns	r2, r2
 8000f96:	401a      	ands	r2, r3
 8000f98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	019b      	lsls	r3, r3, #6
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	2303      	movs	r3, #3
 8000faa:	4003      	ands	r3, r0
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <__NVIC_SetPriority+0xd8>)
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	001c      	movs	r4, r3
 8000fb8:	230f      	movs	r3, #15
 8000fba:	4023      	ands	r3, r4
 8000fbc:	3b08      	subs	r3, #8
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	3306      	adds	r3, #6
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	18c3      	adds	r3, r0, r3
 8000fc8:	3304      	adds	r3, #4
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b003      	add	sp, #12
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	1e5a      	subs	r2, r3, #1
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	045b      	lsls	r3, r3, #17
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d301      	bcc.n	8000ff4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e010      	b.n	8001016 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <SysTick_Config+0x44>)
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	3a01      	subs	r2, #1
 8000ffa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	425b      	negs	r3, r3
 8001000:	2103      	movs	r1, #3
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff ff7c 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <SysTick_Config+0x44>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SysTick_Config+0x44>)
 8001010:	2207      	movs	r2, #7
 8001012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001014:	2300      	movs	r3, #0
}
 8001016:	0018      	movs	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	e000e010 	.word	0xe000e010

08001024 <systemInit>:

static void SetSysClock(void);
static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
static void systickConfig(void);

void systemInit(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	SetSysClock();
 8001028:	f000 f828 	bl	800107c <SetSysClock>
	systickConfig();
 800102c:	f000 f818 	bl	8001060 <systickConfig>
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <SysTick_CLKSourceConfig>:

static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d105      	bne.n	8001052 <SysTick_CLKSourceConfig+0x1a>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_CLKSourceConfig+0x24>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_CLKSourceConfig+0x24>)
 800104c:	2104      	movs	r1, #4
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
	}
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b002      	add	sp, #8
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	e000e010 	.word	0xe000e010

08001060 <systickConfig>:

static void systickConfig(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 8001064:	2004      	movs	r0, #4
 8001066:	f7ff ffe7 	bl	8001038 <SysTick_CLKSourceConfig>
	SysTick_Config(systemClock / 1000);
 800106a:	23fa      	movs	r3, #250	; 0xfa
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff ffb4 	bl	8000fdc <SysTick_Config>
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <SetSysClock>:

static void SetSysClock(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t) RCC_CR_HSEON);
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <SetSysClock+0xb4>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <SetSysClock+0xb4>)
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	0249      	lsls	r1, r1, #9
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <SetSysClock+0xb4>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	d0f9      	beq.n	8001090 <SetSysClock+0x14>
		;

	/* Enable Prefetch Buffer and set Flash Latency */
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2;
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <SetSysClock+0xb8>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <SetSysClock+0xb8>)
 80010a2:	2182      	movs	r1, #130	; 0x82
 80010a4:	0049      	lsls	r1, r1, #1
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// APB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_HPRE);
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <SetSysClock+0xb4>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <SetSysClock+0xb4>)
 80010b0:	4921      	ldr	r1, [pc, #132]	; (8001138 <SetSysClock+0xbc>)
 80010b2:	400a      	ands	r2, r1
 80010b4:	609a      	str	r2, [r3, #8]
	// AHB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_PPRE);
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <SetSysClock+0xb4>)
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <SetSysClock+0xb4>)
 80010bc:	491f      	ldr	r1, [pc, #124]	; (800113c <SetSysClock+0xc0>)
 80010be:	400a      	ands	r2, r1
 80010c0:	609a      	str	r2, [r3, #8]

	//PLL INPUT CLOCK SOURCE HSE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <SetSysClock+0xb4>)
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <SetSysClock+0xb4>)
 80010c8:	2103      	movs	r1, #3
 80010ca:	430a      	orrs	r2, r1
 80010cc:	60da      	str	r2, [r3, #12]

	/* PLL configuration = HSE = 64 MHz */
	//PLLM = 1
	//PLLN = 16
	//PLLR = 2
	RCC->PLLCFGR &= (uint32_t) ((uint32_t) ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <SetSysClock+0xb4>)
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <SetSysClock+0xb4>)
 80010d4:	491a      	ldr	r1, [pc, #104]	; (8001140 <SetSysClock+0xc4>)
 80010d6:	400a      	ands	r2, r1
 80010d8:	60da      	str	r2, [r3, #12]
			| RCC_PLLCFGR_PLLR));

	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4)
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <SetSysClock+0xb4>)
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <SetSysClock+0xb4>)
 80010e0:	4918      	ldr	r1, [pc, #96]	; (8001144 <SetSysClock+0xc8>)
 80010e2:	430a      	orrs	r2, r1
 80010e4:	60da      	str	r2, [r3, #12]
			| (RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLREN) | (RCC_PLLCFGR_PLLQEN)
			| (RCC_PLLCFGR_PLLSRC_HSE);

	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <SetSysClock+0xb4>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <SetSysClock+0xb4>)
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	0449      	lsls	r1, r1, #17
 80010f0:	430a      	orrs	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]

	/* Wait till PLL is ready */
	while ((RCC->CR & RCC_CR_PLLRDY) == 0) {
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <SetSysClock+0xb4>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	049b      	lsls	r3, r3, #18
 80010fe:	4013      	ands	r3, r2
 8001100:	d0f9      	beq.n	80010f6 <SetSysClock+0x7a>
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (uint32_t) ((uint32_t) ~(RCC_CFGR_SW));
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <SetSysClock+0xb4>)
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <SetSysClock+0xb4>)
 8001108:	2107      	movs	r1, #7
 800110a:	438a      	bics	r2, r1
 800110c:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= (uint32_t) RCC_CFGR_SW_1;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <SetSysClock+0xb4>)
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <SetSysClock+0xb4>)
 8001114:	2102      	movs	r1, #2
 8001116:	430a      	orrs	r2, r1
 8001118:	609a      	str	r2, [r3, #8]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1)
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <SetSysClock+0xb4>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2238      	movs	r2, #56	; 0x38
 8001122:	4013      	ands	r3, r2
 8001124:	2b10      	cmp	r3, #16
 8001126:	d1f9      	bne.n	800111c <SetSysClock+0xa0>
		;
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000
 8001134:	40022000 	.word	0x40022000
 8001138:	fffff0ff 	.word	0xfffff0ff
 800113c:	ffff8fff 	.word	0xffff8fff
 8001140:	1fff808f 	.word	0x1fff808f
 8001144:	31001003 	.word	0x31001003

08001148 <RCC_DeInit>:

void RCC_DeInit(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	  /* Set HSION bit to the reset value */
		RCC->CR |= RCC_CR_HSION;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <RCC_DeInit+0x7c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <RCC_DeInit+0x7c>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0049      	lsls	r1, r1, #1
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
	  /* Wait till HSI is ready */
		while((RCC->CR& RCC_CR_HSIRDY)==0);
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <RCC_DeInit+0x7c>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4013      	ands	r3, r2
 8001166:	d0f9      	beq.n	800115c <RCC_DeInit+0x14>
	  /* Set HSITRIM[6:0] bits to the reset value */
	  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <RCC_DeInit+0x7c>)
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	01d2      	lsls	r2, r2, #7
 800116e:	605a      	str	r2, [r3, #4]
	  /* Reset CFGR register (HSI is selected as system clock source) */
	  RCC->CFGR = 0x00000000u;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <RCC_DeInit+0x7c>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
	  /* Wait till HSI is ready */
	  while((RCC->CFGR & RCC_CFGR_SWS) != 0U)
 8001176:	e003      	b.n	8001180 <RCC_DeInit+0x38>
	  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
	  RCC->CR = RCC_CR_HSION;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <RCC_DeInit+0x7c>)
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
	  while((RCC->CFGR & RCC_CFGR_SWS) != 0U)
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <RCC_DeInit+0x7c>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2238      	movs	r2, #56	; 0x38
 8001186:	4013      	ands	r3, r2
 8001188:	d1f6      	bne.n	8001178 <RCC_DeInit+0x30>
	  /* Then again to HSEBYP in case bypass was enabled */
	  RCC->CR = RCC_CR_HSION;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <RCC_DeInit+0x7c>)
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	0052      	lsls	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]
	  /* Wait till PLL is ready */
	  while ((RCC->CR & RCC_CR_PLLRDY) != 0U)
 8001192:	e003      	b.n	800119c <RCC_DeInit+0x54>
	  /* once PLL is OFF, reset PLLCFGR register to default value */
	  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <RCC_DeInit+0x7c>)
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	0152      	lsls	r2, r2, #5
 800119a:	60da      	str	r2, [r3, #12]
	  while ((RCC->CR & RCC_CR_PLLRDY) != 0U)
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <RCC_DeInit+0x7c>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	049b      	lsls	r3, r3, #18
 80011a4:	4013      	ands	r3, r2
 80011a6:	d1f5      	bne.n	8001194 <RCC_DeInit+0x4c>
	  /* Disable all interrupts */
	  RCC->CIER = 0x00000000u;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <RCC_DeInit+0x7c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
	  /* Clear all flags */
	  RCC->CICR = 0xFFFFFFFFu;
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <RCC_DeInit+0x7c>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	4252      	negs	r2, r2
 80011b4:	621a      	str	r2, [r3, #32]
	  /* Update the SystemCoreClock global variable */
	  SystemCoreClock = HSI_VALUE;
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <RCC_DeInit+0x80>)
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <RCC_DeInit+0x84>)
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40021000 	.word	0x40021000
 80011c8:	20000000 	.word	0x20000000
 80011cc:	00f42400 	.word	0x00f42400

080011d0 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	0002      	movs	r2, r0
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	701a      	strb	r2, [r3, #0]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <xputc+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <xputc+0x26>
		*outptr++ = (unsigned char)c;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <xputc+0x40>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1c59      	adds	r1, r3, #1
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <xputc+0x40>)
 80011ec:	6011      	str	r1, [r2, #0]
 80011ee:	1dfa      	adds	r2, r7, #7
 80011f0:	7812      	ldrb	r2, [r2, #0]
 80011f2:	701a      	strb	r2, [r3, #0]
		return;
 80011f4:	e009      	b.n	800120a <xputc+0x3a>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <xputc+0x44>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <xputc+0x3a>
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <xputc+0x44>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	1dfa      	adds	r2, r7, #7
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	0010      	movs	r0, r2
 8001208:	4798      	blx	r3
}
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200004e8 	.word	0x200004e8
 8001214:	200004e4 	.word	0x200004e4

08001218 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	while (*str)
 8001220:	e006      	b.n	8001230 <xputs+0x18>
		xputc(*str++);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	0018      	movs	r0, r3
 800122c:	f7ff ffd0 	bl	80011d0 <xputc>
	while (*str)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f4      	bne.n	8001222 <xputs+0xa>
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b08f      	sub	sp, #60	; 0x3c
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	211f      	movs	r1, #31
 8001256:	187a      	adds	r2, r7, r1
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	7013      	strb	r3, [r2, #0]
		if (!c) break;				/* End of format? */
 800125c:	000a      	movs	r2, r1
 800125e:	18bb      	adds	r3, r7, r2
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d100      	bne.n	8001268 <xvprintf+0x24>
 8001266:	e164      	b.n	8001532 <xvprintf+0x2ee>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8001268:	18bb      	adds	r3, r7, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b25      	cmp	r3, #37	; 0x25
 800126e:	d005      	beq.n	800127c <xvprintf+0x38>
			xputc(c); continue;
 8001270:	18bb      	adds	r3, r7, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff ffab 	bl	80011d0 <xputc>
 800127a:	e159      	b.n	8001530 <xvprintf+0x2ec>
		}
		f = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	211f      	movs	r1, #31
 8001288:	187a      	adds	r2, r7, r1
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padded */
 800128e:	187b      	adds	r3, r7, r1
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b30      	cmp	r3, #48	; 0x30
 8001294:	d108      	bne.n	80012a8 <xvprintf+0x64>
			f = 1; c = *fmt++;
 8001296:	2301      	movs	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	187a      	adds	r2, r7, r1
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	7013      	strb	r3, [r2, #0]
 80012a6:	e00c      	b.n	80012c2 <xvprintf+0x7e>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80012a8:	211f      	movs	r1, #31
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b2d      	cmp	r3, #45	; 0x2d
 80012b0:	d107      	bne.n	80012c2 <xvprintf+0x7e>
				f = 2; c = *fmt++;
 80012b2:	2302      	movs	r3, #2
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	187a      	adds	r2, r7, r1
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	7013      	strb	r3, [r2, #0]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80012c2:	2300      	movs	r3, #0
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80012c6:	e011      	b.n	80012ec <xvprintf+0xa8>
			w = w * 10 + c - '0';
 80012c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ca:	0013      	movs	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	189b      	adds	r3, r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	001a      	movs	r2, r3
 80012d4:	211f      	movs	r1, #31
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	18d3      	adds	r3, r2, r3
 80012dc:	3b30      	subs	r3, #48	; 0x30
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	1c5a      	adds	r2, r3, #1
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	187a      	adds	r2, r7, r1
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	7013      	strb	r3, [r2, #0]
 80012ec:	221f      	movs	r2, #31
 80012ee:	18bb      	adds	r3, r7, r2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b2f      	cmp	r3, #47	; 0x2f
 80012f4:	d903      	bls.n	80012fe <xvprintf+0xba>
 80012f6:	18bb      	adds	r3, r7, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b39      	cmp	r3, #57	; 0x39
 80012fc:	d9e4      	bls.n	80012c8 <xvprintf+0x84>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80012fe:	221f      	movs	r2, #31
 8001300:	18bb      	adds	r3, r7, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b6c      	cmp	r3, #108	; 0x6c
 8001306:	d003      	beq.n	8001310 <xvprintf+0xcc>
 8001308:	18bb      	adds	r3, r7, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b4c      	cmp	r3, #76	; 0x4c
 800130e:	d10a      	bne.n	8001326 <xvprintf+0xe2>
			f |= 4; c = *fmt++;
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	2204      	movs	r2, #4
 8001314:	4313      	orrs	r3, r2
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	221f      	movs	r2, #31
 8001320:	18ba      	adds	r2, r7, r2
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;				/* End of format? */
 8001326:	221f      	movs	r2, #31
 8001328:	18bb      	adds	r3, r7, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d100      	bne.n	8001332 <xvprintf+0xee>
 8001330:	e101      	b.n	8001536 <xvprintf+0x2f2>
		d = c;
 8001332:	211e      	movs	r1, #30
 8001334:	187b      	adds	r3, r7, r1
 8001336:	18ba      	adds	r2, r7, r2
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	701a      	strb	r2, [r3, #0]
		if (d >= 'a') d -= 0x20;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b60      	cmp	r3, #96	; 0x60
 8001342:	d904      	bls.n	800134e <xvprintf+0x10a>
 8001344:	187b      	adds	r3, r7, r1
 8001346:	187a      	adds	r2, r7, r1
 8001348:	7812      	ldrb	r2, [r2, #0]
 800134a:	3a20      	subs	r2, #32
 800134c:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 800134e:	231e      	movs	r3, #30
 8001350:	18fb      	adds	r3, r7, r3
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	3b42      	subs	r3, #66	; 0x42
 8001356:	2b16      	cmp	r3, #22
 8001358:	d847      	bhi.n	80013ea <xvprintf+0x1a6>
 800135a:	009a      	lsls	r2, r3, #2
 800135c:	4b78      	ldr	r3, [pc, #480]	; (8001540 <xvprintf+0x2fc>)
 800135e:	18d3      	adds	r3, r2, r3
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	1d1a      	adds	r2, r3, #4
 8001368:	603a      	str	r2, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001372:	e002      	b.n	800137a <xvprintf+0x136>
 8001374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001376:	3301      	adds	r3, #1
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137e:	18d3      	adds	r3, r2, r3
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f6      	bne.n	8001374 <xvprintf+0x130>
			while (!(f & 2) && j++ < w) xputc(' ');
 8001386:	e002      	b.n	800138e <xvprintf+0x14a>
 8001388:	2020      	movs	r0, #32
 800138a:	f7ff ff21 	bl	80011d0 <xputc>
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	2202      	movs	r2, #2
 8001392:	4013      	ands	r3, r2
 8001394:	d105      	bne.n	80013a2 <xvprintf+0x15e>
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800139c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800139e:	429a      	cmp	r2, r3
 80013a0:	d8f2      	bhi.n	8001388 <xvprintf+0x144>
			xputs(p);
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff ff37 	bl	8001218 <xputs>
			while (j++ < w) xputc(' ');
 80013aa:	e002      	b.n	80013b2 <xvprintf+0x16e>
 80013ac:	2020      	movs	r0, #32
 80013ae:	f7ff ff0f 	bl	80011d0 <xputc>
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d8f6      	bhi.n	80013ac <xvprintf+0x168>
			continue;
 80013be:	e0b7      	b.n	8001530 <xvprintf+0x2ec>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	1d1a      	adds	r2, r3, #4
 80013c4:	603a      	str	r2, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7ff ff00 	bl	80011d0 <xputc>
 80013d0:	e0ae      	b.n	8001530 <xvprintf+0x2ec>
		case 'B' :					/* Binary */
			r = 2; break;
 80013d2:	2302      	movs	r3, #2
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
 80013d6:	e00f      	b.n	80013f8 <xvprintf+0x1b4>
		case 'O' :					/* Octal */
			r = 8; break;
 80013d8:	2308      	movs	r3, #8
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
 80013dc:	e00c      	b.n	80013f8 <xvprintf+0x1b4>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80013de:	230a      	movs	r3, #10
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
 80013e2:	e009      	b.n	80013f8 <xvprintf+0x1b4>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80013e4:	2310      	movs	r3, #16
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
 80013e8:	e006      	b.n	80013f8 <xvprintf+0x1b4>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 80013ea:	231f      	movs	r3, #31
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff feed 	bl	80011d0 <xputc>
 80013f6:	e09b      	b.n	8001530 <xvprintf+0x2ec>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	2204      	movs	r2, #4
 80013fc:	4013      	ands	r3, r2
 80013fe:	d004      	beq.n	800140a <xvprintf+0x1c6>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	1d1a      	adds	r2, r3, #4
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	e00d      	b.n	8001426 <xvprintf+0x1e2>
 800140a:	231e      	movs	r3, #30
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b44      	cmp	r3, #68	; 0x44
 8001412:	d104      	bne.n	800141e <xvprintf+0x1da>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	1d1a      	adds	r2, r3, #4
 8001418:	603a      	str	r2, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	e003      	b.n	8001426 <xvprintf+0x1e2>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	1d1a      	adds	r2, r3, #4
 8001422:	603a      	str	r2, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 8001428:	231e      	movs	r3, #30
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b44      	cmp	r3, #68	; 0x44
 8001430:	d109      	bne.n	8001446 <xvprintf+0x202>
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	2b00      	cmp	r3, #0
 8001436:	da06      	bge.n	8001446 <xvprintf+0x202>
			v = 0 - v;
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	425b      	negs	r3, r3
 800143c:	623b      	str	r3, [r7, #32]
			f |= 8;
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	2208      	movs	r2, #8
 8001442:	4313      	orrs	r3, r2
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800144e:	0018      	movs	r0, r3
 8001450:	f7fe fee8 	bl	8000224 <__aeabi_uidivmod>
 8001454:	000b      	movs	r3, r1
 8001456:	001a      	movs	r2, r3
 8001458:	241e      	movs	r4, #30
 800145a:	193b      	adds	r3, r7, r4
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001460:	6a38      	ldr	r0, [r7, #32]
 8001462:	f7fe fe59 	bl	8000118 <__udivsi3>
 8001466:	0003      	movs	r3, r0
 8001468:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800146a:	193b      	adds	r3, r7, r4
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b09      	cmp	r3, #9
 8001470:	d90d      	bls.n	800148e <xvprintf+0x24a>
 8001472:	231f      	movs	r3, #31
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b78      	cmp	r3, #120	; 0x78
 800147a:	d101      	bne.n	8001480 <xvprintf+0x23c>
 800147c:	2327      	movs	r3, #39	; 0x27
 800147e:	e000      	b.n	8001482 <xvprintf+0x23e>
 8001480:	2307      	movs	r3, #7
 8001482:	211e      	movs	r1, #30
 8001484:	187a      	adds	r2, r7, r1
 8001486:	1879      	adds	r1, r7, r1
 8001488:	7809      	ldrb	r1, [r1, #0]
 800148a:	185b      	adds	r3, r3, r1
 800148c:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 800148e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	633a      	str	r2, [r7, #48]	; 0x30
 8001494:	221e      	movs	r2, #30
 8001496:	18ba      	adds	r2, r7, r2
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	3230      	adds	r2, #48	; 0x30
 800149c:	b2d1      	uxtb	r1, r2
 800149e:	2208      	movs	r2, #8
 80014a0:	18ba      	adds	r2, r7, r2
 80014a2:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof(s));
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <xvprintf+0x26c>
 80014aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ac:	2b0f      	cmp	r3, #15
 80014ae:	d9cc      	bls.n	800144a <xvprintf+0x206>
		if (f & 8) s[i++] = '-';
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	2208      	movs	r2, #8
 80014b4:	4013      	ands	r3, r2
 80014b6:	d006      	beq.n	80014c6 <xvprintf+0x282>
 80014b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	633a      	str	r2, [r7, #48]	; 0x30
 80014be:	2208      	movs	r2, #8
 80014c0:	18ba      	adds	r2, r7, r2
 80014c2:	212d      	movs	r1, #45	; 0x2d
 80014c4:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 80014c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	2201      	movs	r2, #1
 80014ce:	4013      	ands	r3, r2
 80014d0:	d001      	beq.n	80014d6 <xvprintf+0x292>
 80014d2:	2230      	movs	r2, #48	; 0x30
 80014d4:	e000      	b.n	80014d8 <xvprintf+0x294>
 80014d6:	2220      	movs	r2, #32
 80014d8:	231e      	movs	r3, #30
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) xputc(d);
 80014de:	e005      	b.n	80014ec <xvprintf+0x2a8>
 80014e0:	231e      	movs	r3, #30
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7ff fe72 	bl	80011d0 <xputc>
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	2202      	movs	r2, #2
 80014f0:	4013      	ands	r3, r2
 80014f2:	d105      	bne.n	8001500 <xvprintf+0x2bc>
 80014f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d8ef      	bhi.n	80014e0 <xvprintf+0x29c>
		do xputc(s[--i]); while(i);
 8001500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001502:	3b01      	subs	r3, #1
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
 8001506:	2308      	movs	r3, #8
 8001508:	18fa      	adds	r2, r7, r3
 800150a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150c:	18d3      	adds	r3, r2, r3
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fe5d 	bl	80011d0 <xputc>
 8001516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f1      	bne.n	8001500 <xvprintf+0x2bc>
		while (j++ < w) xputc(' ');
 800151c:	e002      	b.n	8001524 <xvprintf+0x2e0>
 800151e:	2020      	movs	r0, #32
 8001520:	f7ff fe56 	bl	80011d0 <xputc>
 8001524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800152a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f6      	bhi.n	800151e <xvprintf+0x2da>
		c = *fmt++;					/* Get a char */
 8001530:	e68d      	b.n	800124e <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	e000      	b.n	8001538 <xvprintf+0x2f4>
		if (!c) break;				/* End of format? */
 8001536:	46c0      	nop			; (mov r8, r8)
	}
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b00f      	add	sp, #60	; 0x3c
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	08002df0 	.word	0x08002df0

08001544 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8001544:	b40f      	push	{r0, r1, r2, r3}
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 800154c:	2314      	movs	r3, #20
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff fe73 	bl	8001244 <xvprintf>
	va_end(arp);
}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bc80      	pop	{r7}
 8001566:	bc08      	pop	{r3}
 8001568:	b004      	add	sp, #16
 800156a:	4718      	bx	r3

0800156c <Receive_Byte>:
 * @param  c: Character
 * @param  timeout: Timeout
 * @retval 0: Byte received
 *         -1: Timeout
 */
static int32_t Receive_Byte(uint8_t *c, uint32_t timeout) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	while (timeout-- > 0) {
 8001576:	e008      	b.n	800158a <Receive_Byte+0x1e>
		if (SerialKeyPressed(c) == 1) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff f8c8 	bl	8000710 <SerialKeyPressed>
 8001580:	0003      	movs	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <Receive_Byte+0x1e>
			return 0;
 8001586:	2300      	movs	r3, #0
 8001588:	e006      	b.n	8001598 <Receive_Byte+0x2c>
	while (timeout-- > 0) {
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	1e5a      	subs	r2, r3, #1
 800158e:	603a      	str	r2, [r7, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f1      	bne.n	8001578 <Receive_Byte+0xc>
		}
	}
	return -1;
 8001594:	2301      	movs	r3, #1
 8001596:	425b      	negs	r3, r3
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}

080015a0 <Receive_Packet>:
 *    >0: packet length
 * @retval 0: normally return
 *        -1: timeout or packet error
 *         1: abort by user
 */
static int32_t Receive_Packet(uint8_t *data, int32_t *length, uint32_t timeout) {
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	uint16_t i, packet_size;
	uint8_t c;
	*length = 0;
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
	if (Receive_Byte(&c, timeout) != 0) {
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	2313      	movs	r3, #19
 80015b6:	18fb      	adds	r3, r7, r3
 80015b8:	0011      	movs	r1, r2
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7ff ffd6 	bl	800156c <Receive_Byte>
 80015c0:	1e03      	subs	r3, r0, #0
 80015c2:	d002      	beq.n	80015ca <Receive_Packet+0x2a>
		return -1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	425b      	negs	r3, r3
 80015c8:	e076      	b.n	80016b8 <Receive_Packet+0x118>
	}
	switch (c) {
 80015ca:	2313      	movs	r3, #19
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b61      	cmp	r3, #97	; 0x61
 80015d2:	d031      	beq.n	8001638 <Receive_Packet+0x98>
 80015d4:	dc32      	bgt.n	800163c <Receive_Packet+0x9c>
 80015d6:	2b41      	cmp	r3, #65	; 0x41
 80015d8:	d02e      	beq.n	8001638 <Receive_Packet+0x98>
 80015da:	dc2f      	bgt.n	800163c <Receive_Packet+0x9c>
 80015dc:	2b18      	cmp	r3, #24
 80015de:	d015      	beq.n	800160c <Receive_Packet+0x6c>
 80015e0:	dc2c      	bgt.n	800163c <Receive_Packet+0x9c>
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d010      	beq.n	8001608 <Receive_Packet+0x68>
 80015e6:	dc29      	bgt.n	800163c <Receive_Packet+0x9c>
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d002      	beq.n	80015f2 <Receive_Packet+0x52>
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d005      	beq.n	80015fc <Receive_Packet+0x5c>
 80015f0:	e024      	b.n	800163c <Receive_Packet+0x9c>
	case SOH:
		packet_size = PACKET_SIZE;
 80015f2:	2314      	movs	r3, #20
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	801a      	strh	r2, [r3, #0]
		break;
 80015fa:	e022      	b.n	8001642 <Receive_Packet+0xa2>
	case STX:
		packet_size = PACKET_1K_SIZE;
 80015fc:	2314      	movs	r3, #20
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	00d2      	lsls	r2, r2, #3
 8001604:	801a      	strh	r2, [r3, #0]
		break;
 8001606:	e01c      	b.n	8001642 <Receive_Packet+0xa2>
	case EOT:
		return 0;
 8001608:	2300      	movs	r3, #0
 800160a:	e055      	b.n	80016b8 <Receive_Packet+0x118>
	case CA:
		if ((Receive_Byte(&c, timeout) == 0) && (c == CA)) {
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	2413      	movs	r4, #19
 8001610:	193b      	adds	r3, r7, r4
 8001612:	0011      	movs	r1, r2
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff ffa9 	bl	800156c <Receive_Byte>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d109      	bne.n	8001632 <Receive_Packet+0x92>
 800161e:	193b      	adds	r3, r7, r4
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b18      	cmp	r3, #24
 8001624:	d105      	bne.n	8001632 <Receive_Packet+0x92>
			*length = -1;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2201      	movs	r2, #1
 800162a:	4252      	negs	r2, r2
 800162c:	601a      	str	r2, [r3, #0]
			return 0;
 800162e:	2300      	movs	r3, #0
 8001630:	e042      	b.n	80016b8 <Receive_Packet+0x118>
		} else {
			return -1;
 8001632:	2301      	movs	r3, #1
 8001634:	425b      	negs	r3, r3
 8001636:	e03f      	b.n	80016b8 <Receive_Packet+0x118>
		}
	case ABORT1:
	case ABORT2:
		return 1;
 8001638:	2301      	movs	r3, #1
 800163a:	e03d      	b.n	80016b8 <Receive_Packet+0x118>
	default:
		return -1;
 800163c:	2301      	movs	r3, #1
 800163e:	425b      	negs	r3, r3
 8001640:	e03a      	b.n	80016b8 <Receive_Packet+0x118>
	}
	*data = c;
 8001642:	2313      	movs	r3, #19
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	701a      	strb	r2, [r3, #0]
	for (i = 1; i < (packet_size + PACKET_OVERHEAD); i++) {
 800164c:	2316      	movs	r3, #22
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	2201      	movs	r2, #1
 8001652:	801a      	strh	r2, [r3, #0]
 8001654:	e014      	b.n	8001680 <Receive_Packet+0xe0>
		if (Receive_Byte(data + i, timeout) != 0) {
 8001656:	2316      	movs	r3, #22
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	18d3      	adds	r3, r2, r3
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	0011      	movs	r1, r2
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff ff81 	bl	800156c <Receive_Byte>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d002      	beq.n	8001674 <Receive_Packet+0xd4>
			return -1;
 800166e:	2301      	movs	r3, #1
 8001670:	425b      	negs	r3, r3
 8001672:	e021      	b.n	80016b8 <Receive_Packet+0x118>
	for (i = 1; i < (packet_size + PACKET_OVERHEAD); i++) {
 8001674:	2116      	movs	r1, #22
 8001676:	187b      	adds	r3, r7, r1
 8001678:	881a      	ldrh	r2, [r3, #0]
 800167a:	187b      	adds	r3, r7, r1
 800167c:	3201      	adds	r2, #1
 800167e:	801a      	strh	r2, [r3, #0]
 8001680:	2314      	movs	r3, #20
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	1d1a      	adds	r2, r3, #4
 8001688:	2316      	movs	r3, #22
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	dae1      	bge.n	8001656 <Receive_Packet+0xb6>
		}
	}
	if (data[PACKET_SEQNO_INDEX] != ((data[PACKET_SEQNO_COMP_INDEX] ^ 0xff) & 0xff)) {
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3301      	adds	r3, #1
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3302      	adds	r3, #2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	43db      	mvns	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d002      	beq.n	80016ac <Receive_Packet+0x10c>
		return -1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	425b      	negs	r3, r3
 80016aa:	e005      	b.n	80016b8 <Receive_Packet+0x118>
	}
	*length = packet_size;
 80016ac:	2314      	movs	r3, #20
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	881a      	ldrh	r2, [r3, #0]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	601a      	str	r2, [r3, #0]
	return 0;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b007      	add	sp, #28
 80016be:	bd90      	pop	{r4, r7, pc}

080016c0 <Ymodem_Receive>:
 * @brief  Receive a file using the ymodem protocol
 * @param  buf: Address of the first byte
 * @retval The size of the file
 */
uint8_t packet_data[PACKET_1K_SIZE + PACKET_OVERHEAD];
int32_t Ymodem_Receive() {
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	4cde      	ldr	r4, [pc, #888]	; (8001a3c <Ymodem_Receive+0x37c>)
 80016c4:	44a5      	add	sp, r4
 80016c6:	af00      	add	r7, sp, #0
	uint8_t file_size[FILE_SIZE_LENGTH], *file_ptr, *buf_ptr;
	uint8_t buf_data[PACKET_1K_SIZE];
	int32_t i, j, packet_length, session_done, file_done, packets_received, errors, session_begin, size = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]

	/* Initialize FlashDestination variable */
	// uint32_t DestinationAddress = ApplicationAddress; /* Flash user program offset */
	uint32_t DestinationAddress = BOOT_SECONDARY_ADDRESS; /* Flash user program offset */
 80016cc:	4bdc      	ldr	r3, [pc, #880]	; (8001a40 <Ymodem_Receive+0x380>)
 80016ce:	4add      	ldr	r2, [pc, #884]	; (8001a44 <Ymodem_Receive+0x384>)
 80016d0:	18b9      	adds	r1, r7, r2
 80016d2:	600b      	str	r3, [r1, #0]
	uint32_t FlashDestination = DestinationAddress;
 80016d4:	18bb      	adds	r3, r7, r2
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4adb      	ldr	r2, [pc, #876]	; (8001a48 <Ymodem_Receive+0x388>)
 80016da:	18ba      	adds	r2, r7, r2
 80016dc:	6013      	str	r3, [r2, #0]
	FLASH_Unlock();
 80016de:	f7fe fef7 	bl	80004d0 <FLASH_Unlock>
	for (session_done = 0, errors = 0, session_begin = 0;;) {
 80016e2:	2300      	movs	r3, #0
 80016e4:	2287      	movs	r2, #135	; 0x87
 80016e6:	00d2      	lsls	r2, r2, #3
 80016e8:	18ba      	adds	r2, r7, r2
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	2300      	movs	r3, #0
 80016ee:	4ad7      	ldr	r2, [pc, #860]	; (8001a4c <Ymodem_Receive+0x38c>)
 80016f0:	18ba      	adds	r2, r7, r2
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	2300      	movs	r3, #0
 80016f6:	2285      	movs	r2, #133	; 0x85
 80016f8:	00d2      	lsls	r2, r2, #3
 80016fa:	18ba      	adds	r2, r7, r2
 80016fc:	6013      	str	r3, [r2, #0]
		for (packets_received = 0, file_done = 0;;) {
 80016fe:	2300      	movs	r3, #0
 8001700:	2286      	movs	r2, #134	; 0x86
 8001702:	00d2      	lsls	r2, r2, #3
 8001704:	18ba      	adds	r2, r7, r2
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	2300      	movs	r3, #0
 800170a:	4ad1      	ldr	r2, [pc, #836]	; (8001a50 <Ymodem_Receive+0x390>)
 800170c:	18ba      	adds	r2, r7, r2
 800170e:	6013      	str	r3, [r2, #0]
			switch (Receive_Packet(packet_data, &packet_length, NAK_TIMEOUT)) {
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	035a      	lsls	r2, r3, #13
 8001714:	2308      	movs	r3, #8
 8001716:	18f9      	adds	r1, r7, r3
 8001718:	4bce      	ldr	r3, [pc, #824]	; (8001a54 <Ymodem_Receive+0x394>)
 800171a:	0018      	movs	r0, r3
 800171c:	f7ff ff40 	bl	80015a0 <Receive_Packet>
 8001720:	1e03      	subs	r3, r0, #0
 8001722:	d003      	beq.n	800172c <Ymodem_Receive+0x6c>
 8001724:	2b01      	cmp	r3, #1
 8001726:	d100      	bne.n	800172a <Ymodem_Receive+0x6a>
 8001728:	e15b      	b.n	80019e2 <Ymodem_Receive+0x322>
 800172a:	e163      	b.n	80019f4 <Ymodem_Receive+0x334>
			case 0:
				errors = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	4ac7      	ldr	r2, [pc, #796]	; (8001a4c <Ymodem_Receive+0x38c>)
 8001730:	18ba      	adds	r2, r7, r2
 8001732:	6013      	str	r3, [r2, #0]
				switch (packet_length) {
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	d002      	beq.n	8001740 <Ymodem_Receive+0x80>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <Ymodem_Receive+0x8a>
 800173e:	e00c      	b.n	800175a <Ymodem_Receive+0x9a>
				/* Abort by sender */
				case -1:
					SerialPutChar(ACK);
 8001740:	2006      	movs	r0, #6
 8001742:	f7fe ffd5 	bl	80006f0 <SerialPutChar>
					return 0;
 8001746:	2300      	movs	r3, #0
 8001748:	e1a6      	b.n	8001a98 <Ymodem_Receive+0x3d8>
					/* End of transmission */
				case 0:
					SerialPutChar(ACK);
 800174a:	2006      	movs	r0, #6
 800174c:	f7fe ffd0 	bl	80006f0 <SerialPutChar>
					file_done = 1;
 8001750:	2301      	movs	r3, #1
 8001752:	4abf      	ldr	r2, [pc, #764]	; (8001a50 <Ymodem_Receive+0x390>)
 8001754:	18ba      	adds	r2, r7, r2
 8001756:	6013      	str	r3, [r2, #0]
					break;
 8001758:	e142      	b.n	80019e0 <Ymodem_Receive+0x320>
					/* Normal packet */
				default:
					if ((packet_data[PACKET_SEQNO_INDEX] & 0xff) != (packets_received & 0xff)) {
 800175a:	4bbe      	ldr	r3, [pc, #760]	; (8001a54 <Ymodem_Receive+0x394>)
 800175c:	785b      	ldrb	r3, [r3, #1]
 800175e:	0019      	movs	r1, r3
 8001760:	2386      	movs	r3, #134	; 0x86
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	22ff      	movs	r2, #255	; 0xff
 800176a:	4013      	ands	r3, r2
 800176c:	4299      	cmp	r1, r3
 800176e:	d003      	beq.n	8001778 <Ymodem_Receive+0xb8>
						SerialPutChar(NAK);
 8001770:	2015      	movs	r0, #21
 8001772:	f7fe ffbd 	bl	80006f0 <SerialPutChar>
						}
						packets_received++;
						session_begin = 1;
					}
				}
				break;
 8001776:	e15a      	b.n	8001a2e <Ymodem_Receive+0x36e>
						if (packets_received == 0) {
 8001778:	2386      	movs	r3, #134	; 0x86
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d000      	beq.n	8001786 <Ymodem_Receive+0xc6>
 8001784:	e0c1      	b.n	800190a <Ymodem_Receive+0x24a>
							if (packet_data[PACKET_HEADER] != 0) {
 8001786:	4bb3      	ldr	r3, [pc, #716]	; (8001a54 <Ymodem_Receive+0x394>)
 8001788:	78db      	ldrb	r3, [r3, #3]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d100      	bne.n	8001790 <Ymodem_Receive+0xd0>
 800178e:	e0af      	b.n	80018f0 <Ymodem_Receive+0x230>
								for (i = 0, file_ptr = packet_data + PACKET_HEADER; (*file_ptr != 0) && (i < FILE_NAME_LENGTH);) {
 8001790:	2300      	movs	r3, #0
 8001792:	2288      	movs	r2, #136	; 0x88
 8001794:	00d2      	lsls	r2, r2, #3
 8001796:	18ba      	adds	r2, r7, r2
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4baf      	ldr	r3, [pc, #700]	; (8001a58 <Ymodem_Receive+0x398>)
 800179c:	4aaf      	ldr	r2, [pc, #700]	; (8001a5c <Ymodem_Receive+0x39c>)
 800179e:	18ba      	adds	r2, r7, r2
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e00f      	b.n	80017c4 <Ymodem_Receive+0x104>
									file_name[i++] = *file_ptr++;
 80017a4:	49ad      	ldr	r1, [pc, #692]	; (8001a5c <Ymodem_Receive+0x39c>)
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	1c53      	adds	r3, r2, #1
 80017ac:	1879      	adds	r1, r7, r1
 80017ae:	600b      	str	r3, [r1, #0]
 80017b0:	2088      	movs	r0, #136	; 0x88
 80017b2:	00c0      	lsls	r0, r0, #3
 80017b4:	183b      	adds	r3, r7, r0
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	1c59      	adds	r1, r3, #1
 80017ba:	1838      	adds	r0, r7, r0
 80017bc:	6001      	str	r1, [r0, #0]
 80017be:	7811      	ldrb	r1, [r2, #0]
 80017c0:	4aa7      	ldr	r2, [pc, #668]	; (8001a60 <Ymodem_Receive+0x3a0>)
 80017c2:	54d1      	strb	r1, [r2, r3]
								for (i = 0, file_ptr = packet_data + PACKET_HEADER; (*file_ptr != 0) && (i < FILE_NAME_LENGTH);) {
 80017c4:	4ba5      	ldr	r3, [pc, #660]	; (8001a5c <Ymodem_Receive+0x39c>)
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <Ymodem_Receive+0x11c>
 80017d0:	2388      	movs	r3, #136	; 0x88
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2bff      	cmp	r3, #255	; 0xff
 80017da:	dde3      	ble.n	80017a4 <Ymodem_Receive+0xe4>
								file_name[i++] = '\0';
 80017dc:	2088      	movs	r0, #136	; 0x88
 80017de:	00c0      	lsls	r0, r0, #3
 80017e0:	183b      	adds	r3, r7, r0
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	1839      	adds	r1, r7, r0
 80017e8:	600a      	str	r2, [r1, #0]
 80017ea:	4a9d      	ldr	r2, [pc, #628]	; (8001a60 <Ymodem_Receive+0x3a0>)
 80017ec:	2100      	movs	r1, #0
 80017ee:	54d1      	strb	r1, [r2, r3]
								for (i = 0, file_ptr++; (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH);) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	183a      	adds	r2, r7, r0
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4a99      	ldr	r2, [pc, #612]	; (8001a5c <Ymodem_Receive+0x39c>)
 80017f8:	18bb      	adds	r3, r7, r2
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	18ba      	adds	r2, r7, r2
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e010      	b.n	8001826 <Ymodem_Receive+0x166>
									file_size[i++] = *file_ptr++;
 8001804:	4995      	ldr	r1, [pc, #596]	; (8001a5c <Ymodem_Receive+0x39c>)
 8001806:	187b      	adds	r3, r7, r1
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	1c53      	adds	r3, r2, #1
 800180c:	1879      	adds	r1, r7, r1
 800180e:	600b      	str	r3, [r1, #0]
 8001810:	2088      	movs	r0, #136	; 0x88
 8001812:	00c0      	lsls	r0, r0, #3
 8001814:	183b      	adds	r3, r7, r0
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	1c59      	adds	r1, r3, #1
 800181a:	1838      	adds	r0, r7, r0
 800181c:	6001      	str	r1, [r0, #0]
 800181e:	7811      	ldrb	r1, [r2, #0]
 8001820:	4a90      	ldr	r2, [pc, #576]	; (8001a64 <Ymodem_Receive+0x3a4>)
 8001822:	18ba      	adds	r2, r7, r2
 8001824:	54d1      	strb	r1, [r2, r3]
								for (i = 0, file_ptr++; (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH);) {
 8001826:	4b8d      	ldr	r3, [pc, #564]	; (8001a5c <Ymodem_Receive+0x39c>)
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b20      	cmp	r3, #32
 8001830:	d005      	beq.n	800183e <Ymodem_Receive+0x17e>
 8001832:	2388      	movs	r3, #136	; 0x88
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	dde2      	ble.n	8001804 <Ymodem_Receive+0x144>
								file_size[i++] = '\0';
 800183e:	2188      	movs	r1, #136	; 0x88
 8001840:	00c9      	lsls	r1, r1, #3
 8001842:	187b      	adds	r3, r7, r1
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	1879      	adds	r1, r7, r1
 800184a:	600a      	str	r2, [r1, #0]
 800184c:	4885      	ldr	r0, [pc, #532]	; (8001a64 <Ymodem_Receive+0x3a4>)
 800184e:	183a      	adds	r2, r7, r0
 8001850:	2100      	movs	r1, #0
 8001852:	54d1      	strb	r1, [r2, r3]
								Str2Int(file_size, &size);
 8001854:	1d3a      	adds	r2, r7, #4
 8001856:	183b      	adds	r3, r7, r0
 8001858:	0011      	movs	r1, r2
 800185a:	0018      	movs	r0, r3
 800185c:	f7ff f9b6 	bl	8000bcc <Str2Int>
								if (size > (FLASH_SIZE - 1)) {
 8001860:	4b81      	ldr	r3, [pc, #516]	; (8001a68 <Ymodem_Receive+0x3a8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	029a      	lsls	r2, r3, #10
 8001866:	23fe      	movs	r3, #254	; 0xfe
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4013      	ands	r3, r2
 800186c:	3b01      	subs	r3, #1
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	4293      	cmp	r3, r2
 8001872:	d208      	bcs.n	8001886 <Ymodem_Receive+0x1c6>
									SerialPutChar(CA);
 8001874:	2018      	movs	r0, #24
 8001876:	f7fe ff3b 	bl	80006f0 <SerialPutChar>
									SerialPutChar(CA);
 800187a:	2018      	movs	r0, #24
 800187c:	f7fe ff38 	bl	80006f0 <SerialPutChar>
									return -1;
 8001880:	2301      	movs	r3, #1
 8001882:	425b      	negs	r3, r3
 8001884:	e108      	b.n	8001a98 <Ymodem_Receive+0x3d8>
								NbrOfPage = FLASH_PagesMask(size);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	0018      	movs	r0, r3
 800188a:	f7fe fcd1 	bl	8000230 <FLASH_PagesMask>
 800188e:	0003      	movs	r3, r0
 8001890:	001a      	movs	r2, r3
 8001892:	4b76      	ldr	r3, [pc, #472]	; (8001a6c <Ymodem_Receive+0x3ac>)
 8001894:	601a      	str	r2, [r3, #0]
								FLASH_Unlock();
 8001896:	f7fe fe1b 	bl	80004d0 <FLASH_Unlock>
								for (EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++) {
 800189a:	4b75      	ldr	r3, [pc, #468]	; (8001a70 <Ymodem_Receive+0x3b0>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e015      	b.n	80018ce <Ymodem_Receive+0x20e>
									FLASHStatus = FLASH_ErasePage(FlashDestination + (PageSize * EraseCounter));
 80018a2:	4b74      	ldr	r3, [pc, #464]	; (8001a74 <Ymodem_Receive+0x3b4>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	001a      	movs	r2, r3
 80018a8:	4b71      	ldr	r3, [pc, #452]	; (8001a70 <Ymodem_Receive+0x3b0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	435a      	muls	r2, r3
 80018ae:	4b66      	ldr	r3, [pc, #408]	; (8001a48 <Ymodem_Receive+0x388>)
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	18d3      	adds	r3, r2, r3
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7fe fe6c 	bl	8000594 <FLASH_ErasePage>
 80018bc:	0003      	movs	r3, r0
 80018be:	001a      	movs	r2, r3
 80018c0:	4b6d      	ldr	r3, [pc, #436]	; (8001a78 <Ymodem_Receive+0x3b8>)
 80018c2:	701a      	strb	r2, [r3, #0]
								for (EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++) {
 80018c4:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <Ymodem_Receive+0x3b0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	4b69      	ldr	r3, [pc, #420]	; (8001a70 <Ymodem_Receive+0x3b0>)
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	4b68      	ldr	r3, [pc, #416]	; (8001a70 <Ymodem_Receive+0x3b0>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b66      	ldr	r3, [pc, #408]	; (8001a6c <Ymodem_Receive+0x3ac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d203      	bcs.n	80018e2 <Ymodem_Receive+0x222>
 80018da:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <Ymodem_Receive+0x3b8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d0df      	beq.n	80018a2 <Ymodem_Receive+0x1e2>
								SerialPutChar(ACK);
 80018e2:	2006      	movs	r0, #6
 80018e4:	f7fe ff04 	bl	80006f0 <SerialPutChar>
								SerialPutChar(CRC16);
 80018e8:	2043      	movs	r0, #67	; 0x43
 80018ea:	f7fe ff01 	bl	80006f0 <SerialPutChar>
 80018ee:	e06a      	b.n	80019c6 <Ymodem_Receive+0x306>
								SerialPutChar(ACK);
 80018f0:	2006      	movs	r0, #6
 80018f2:	f7fe fefd 	bl	80006f0 <SerialPutChar>
								file_done = 1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	4a55      	ldr	r2, [pc, #340]	; (8001a50 <Ymodem_Receive+0x390>)
 80018fa:	18ba      	adds	r2, r7, r2
 80018fc:	6013      	str	r3, [r2, #0]
								session_done = 1;
 80018fe:	2301      	movs	r3, #1
 8001900:	2287      	movs	r2, #135	; 0x87
 8001902:	00d2      	lsls	r2, r2, #3
 8001904:	18ba      	adds	r2, r7, r2
 8001906:	6013      	str	r3, [r2, #0]
								break;
 8001908:	e06a      	b.n	80019e0 <Ymodem_Receive+0x320>
							memcpy(buf_data, &packet_data[PACKET_HEADER], packet_length);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	001a      	movs	r2, r3
 800190e:	4952      	ldr	r1, [pc, #328]	; (8001a58 <Ymodem_Receive+0x398>)
 8001910:	240c      	movs	r4, #12
 8001912:	193b      	adds	r3, r7, r4
 8001914:	0018      	movs	r0, r3
 8001916:	f000 f919 	bl	8001b4c <memcpy>
							RamSource = packet_data + PACKET_HEADER;
 800191a:	4b4f      	ldr	r3, [pc, #316]	; (8001a58 <Ymodem_Receive+0x398>)
 800191c:	001a      	movs	r2, r3
 800191e:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <Ymodem_Receive+0x3bc>)
 8001920:	601a      	str	r2, [r3, #0]
							uint64_t *pRecord = (uint64_t*) buf_data;
 8001922:	193b      	adds	r3, r7, r4
 8001924:	2284      	movs	r2, #132	; 0x84
 8001926:	00d2      	lsls	r2, r2, #3
 8001928:	18ba      	adds	r2, r7, r2
 800192a:	6013      	str	r3, [r2, #0]
							for (j = 0; (j < packet_length) && (FlashDestination < DestinationAddress + size); j += 8) {
 800192c:	2300      	movs	r3, #0
 800192e:	4a54      	ldr	r2, [pc, #336]	; (8001a80 <Ymodem_Receive+0x3c0>)
 8001930:	18ba      	adds	r2, r7, r2
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	e033      	b.n	800199e <Ymodem_Receive+0x2de>
								FLASH_ProgramDoubleWord(FlashDestination, *pRecord);
 8001936:	2484      	movs	r4, #132	; 0x84
 8001938:	00e4      	lsls	r4, r4, #3
 800193a:	193b      	adds	r3, r7, r4
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4d41      	ldr	r5, [pc, #260]	; (8001a48 <Ymodem_Receive+0x388>)
 8001944:	1979      	adds	r1, r7, r5
 8001946:	6809      	ldr	r1, [r1, #0]
 8001948:	0008      	movs	r0, r1
 800194a:	f7fe fe69 	bl	8000620 <FLASH_ProgramDoubleWord>
								if (*(uint64_t*) FlashDestination != *pRecord) {
 800194e:	197b      	adds	r3, r7, r5
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	193b      	adds	r3, r7, r4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4290      	cmp	r0, r2
 8001960:	d101      	bne.n	8001966 <Ymodem_Receive+0x2a6>
 8001962:	4299      	cmp	r1, r3
 8001964:	d008      	beq.n	8001978 <Ymodem_Receive+0x2b8>
									SerialPutChar(CA);
 8001966:	2018      	movs	r0, #24
 8001968:	f7fe fec2 	bl	80006f0 <SerialPutChar>
									SerialPutChar(CA);
 800196c:	2018      	movs	r0, #24
 800196e:	f7fe febf 	bl	80006f0 <SerialPutChar>
									return -2;
 8001972:	2302      	movs	r3, #2
 8001974:	425b      	negs	r3, r3
 8001976:	e08f      	b.n	8001a98 <Ymodem_Receive+0x3d8>
								FlashDestination += 8;
 8001978:	4a33      	ldr	r2, [pc, #204]	; (8001a48 <Ymodem_Receive+0x388>)
 800197a:	18bb      	adds	r3, r7, r2
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3308      	adds	r3, #8
 8001980:	18ba      	adds	r2, r7, r2
 8001982:	6013      	str	r3, [r2, #0]
								pRecord++;
 8001984:	2284      	movs	r2, #132	; 0x84
 8001986:	00d2      	lsls	r2, r2, #3
 8001988:	18bb      	adds	r3, r7, r2
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3308      	adds	r3, #8
 800198e:	18ba      	adds	r2, r7, r2
 8001990:	6013      	str	r3, [r2, #0]
							for (j = 0; (j < packet_length) && (FlashDestination < DestinationAddress + size); j += 8) {
 8001992:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <Ymodem_Receive+0x3c0>)
 8001994:	18bb      	adds	r3, r7, r2
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3308      	adds	r3, #8
 800199a:	18ba      	adds	r2, r7, r2
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4a37      	ldr	r2, [pc, #220]	; (8001a80 <Ymodem_Receive+0x3c0>)
 80019a2:	18ba      	adds	r2, r7, r2
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	da0a      	bge.n	80019c0 <Ymodem_Receive+0x300>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	001a      	movs	r2, r3
 80019ae:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <Ymodem_Receive+0x384>)
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	18d3      	adds	r3, r2, r3
 80019b6:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <Ymodem_Receive+0x388>)
 80019b8:	18ba      	adds	r2, r7, r2
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d3ba      	bcc.n	8001936 <Ymodem_Receive+0x276>
							SerialPutChar(ACK);
 80019c0:	2006      	movs	r0, #6
 80019c2:	f7fe fe95 	bl	80006f0 <SerialPutChar>
						packets_received++;
 80019c6:	2286      	movs	r2, #134	; 0x86
 80019c8:	00d2      	lsls	r2, r2, #3
 80019ca:	18bb      	adds	r3, r7, r2
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	18ba      	adds	r2, r7, r2
 80019d2:	6013      	str	r3, [r2, #0]
						session_begin = 1;
 80019d4:	2301      	movs	r3, #1
 80019d6:	2285      	movs	r2, #133	; 0x85
 80019d8:	00d2      	lsls	r2, r2, #3
 80019da:	18ba      	adds	r2, r7, r2
 80019dc:	6013      	str	r3, [r2, #0]
				break;
 80019de:	e026      	b.n	8001a2e <Ymodem_Receive+0x36e>
 80019e0:	e025      	b.n	8001a2e <Ymodem_Receive+0x36e>
			case 1:
				SerialPutChar(CA);
 80019e2:	2018      	movs	r0, #24
 80019e4:	f7fe fe84 	bl	80006f0 <SerialPutChar>
				SerialPutChar(CA);
 80019e8:	2018      	movs	r0, #24
 80019ea:	f7fe fe81 	bl	80006f0 <SerialPutChar>
				return -3;
 80019ee:	2303      	movs	r3, #3
 80019f0:	425b      	negs	r3, r3
 80019f2:	e051      	b.n	8001a98 <Ymodem_Receive+0x3d8>
			default:
				if (session_begin > 0) {
 80019f4:	2385      	movs	r3, #133	; 0x85
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	dd05      	ble.n	8001a0c <Ymodem_Receive+0x34c>
					errors++;
 8001a00:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <Ymodem_Receive+0x38c>)
 8001a02:	18bb      	adds	r3, r7, r2
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	18ba      	adds	r2, r7, r2
 8001a0a:	6013      	str	r3, [r2, #0]
				}
				if (errors > MAX_ERRORS) {
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <Ymodem_Receive+0x38c>)
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	dd07      	ble.n	8001a26 <Ymodem_Receive+0x366>
					SerialPutChar(CA);
 8001a16:	2018      	movs	r0, #24
 8001a18:	f7fe fe6a 	bl	80006f0 <SerialPutChar>
					SerialPutChar(CA);
 8001a1c:	2018      	movs	r0, #24
 8001a1e:	f7fe fe67 	bl	80006f0 <SerialPutChar>
					return 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e038      	b.n	8001a98 <Ymodem_Receive+0x3d8>
				}
				SerialPutChar(CRC16);
 8001a26:	2043      	movs	r0, #67	; 0x43
 8001a28:	f7fe fe62 	bl	80006f0 <SerialPutChar>
				break;
 8001a2c:	46c0      	nop			; (mov r8, r8)
			}
			if (file_done != 0) {
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <Ymodem_Receive+0x390>)
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d125      	bne.n	8001a84 <Ymodem_Receive+0x3c4>
			switch (Receive_Packet(packet_data, &packet_length, NAK_TIMEOUT)) {
 8001a38:	e66a      	b.n	8001710 <Ymodem_Receive+0x50>
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	fffffbb8 	.word	0xfffffbb8
 8001a40:	0800f000 	.word	0x0800f000
 8001a44:	0000041c 	.word	0x0000041c
 8001a48:	00000424 	.word	0x00000424
 8001a4c:	0000042c 	.word	0x0000042c
 8001a50:	00000434 	.word	0x00000434
 8001a54:	200005f8 	.word	0x200005f8
 8001a58:	200005fb 	.word	0x200005fb
 8001a5c:	00000444 	.word	0x00000444
 8001a60:	200004ec 	.word	0x200004ec
 8001a64:	0000040c 	.word	0x0000040c
 8001a68:	1fff75e0 	.word	0x1fff75e0
 8001a6c:	200005f0 	.word	0x200005f0
 8001a70:	200005ec 	.word	0x200005ec
 8001a74:	20000004 	.word	0x20000004
 8001a78:	20000006 	.word	0x20000006
 8001a7c:	200005f4 	.word	0x200005f4
 8001a80:	0000043c 	.word	0x0000043c
				break;
 8001a84:	46c0      	nop			; (mov r8, r8)
			}
		}
		if (session_done != 0) {
 8001a86:	2387      	movs	r3, #135	; 0x87
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d100      	bne.n	8001a94 <Ymodem_Receive+0x3d4>
		for (packets_received = 0, file_done = 0;;) {
 8001a92:	e634      	b.n	80016fe <Ymodem_Receive+0x3e>
			break;
 8001a94:	46c0      	nop			; (mov r8, r8)
		}
	}
	return (int32_t) size;
 8001a96:	687b      	ldr	r3, [r7, #4]

}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	2389      	movs	r3, #137	; 0x89
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	449d      	add	sp, r3
 8001aa2:	bdb0      	pop	{r4, r5, r7, pc}

08001aa4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aa4:	480d      	ldr	r0, [pc, #52]	; (8001adc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aa6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001aa8:	e000      	b.n	8001aac <Reset_Handler+0x8>
 8001aaa:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aae:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <LoopForever+0xe>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab4:	e002      	b.n	8001abc <LoopCopyDataInit>

08001ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aba:	3304      	adds	r3, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac0:	d3f9      	bcc.n	8001ab6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac4:	4c0a      	ldr	r4, [pc, #40]	; (8001af0 <LoopForever+0x16>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac8:	e001      	b.n	8001ace <LoopFillZerobss>

08001aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001acc:	3204      	adds	r2, #4

08001ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad0:	d3fb      	bcc.n	8001aca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ad2:	f000 f817 	bl	8001b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ad6:	f7fe ff2b 	bl	8000930 <main>

08001ada <LoopForever>:

LoopForever:
    b LoopForever
 8001ada:	e7fe      	b.n	8001ada <LoopForever>
  ldr   r0, =_estack
 8001adc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001ae8:	08002eec 	.word	0x08002eec
  ldr r2, =_sbss
 8001aec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001af0:	20000a0c 	.word	0x20000a0c

08001af4 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af4:	e7fe      	b.n	8001af4 <ADC_COMP_IRQHandler>
	...

08001af8 <__errno>:
 8001af8:	4b01      	ldr	r3, [pc, #4]	; (8001b00 <__errno+0x8>)
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	4770      	bx	lr
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	20000008 	.word	0x20000008

08001b04 <__libc_init_array>:
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	2600      	movs	r6, #0
 8001b08:	4d0c      	ldr	r5, [pc, #48]	; (8001b3c <__libc_init_array+0x38>)
 8001b0a:	4c0d      	ldr	r4, [pc, #52]	; (8001b40 <__libc_init_array+0x3c>)
 8001b0c:	1b64      	subs	r4, r4, r5
 8001b0e:	10a4      	asrs	r4, r4, #2
 8001b10:	42a6      	cmp	r6, r4
 8001b12:	d109      	bne.n	8001b28 <__libc_init_array+0x24>
 8001b14:	2600      	movs	r6, #0
 8001b16:	f001 f87f 	bl	8002c18 <_init>
 8001b1a:	4d0a      	ldr	r5, [pc, #40]	; (8001b44 <__libc_init_array+0x40>)
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	; (8001b48 <__libc_init_array+0x44>)
 8001b1e:	1b64      	subs	r4, r4, r5
 8001b20:	10a4      	asrs	r4, r4, #2
 8001b22:	42a6      	cmp	r6, r4
 8001b24:	d105      	bne.n	8001b32 <__libc_init_array+0x2e>
 8001b26:	bd70      	pop	{r4, r5, r6, pc}
 8001b28:	00b3      	lsls	r3, r6, #2
 8001b2a:	58eb      	ldr	r3, [r5, r3]
 8001b2c:	4798      	blx	r3
 8001b2e:	3601      	adds	r6, #1
 8001b30:	e7ee      	b.n	8001b10 <__libc_init_array+0xc>
 8001b32:	00b3      	lsls	r3, r6, #2
 8001b34:	58eb      	ldr	r3, [r5, r3]
 8001b36:	4798      	blx	r3
 8001b38:	3601      	adds	r6, #1
 8001b3a:	e7f2      	b.n	8001b22 <__libc_init_array+0x1e>
 8001b3c:	08002ee4 	.word	0x08002ee4
 8001b40:	08002ee4 	.word	0x08002ee4
 8001b44:	08002ee4 	.word	0x08002ee4
 8001b48:	08002ee8 	.word	0x08002ee8

08001b4c <memcpy>:
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	b510      	push	{r4, lr}
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d100      	bne.n	8001b56 <memcpy+0xa>
 8001b54:	bd10      	pop	{r4, pc}
 8001b56:	5ccc      	ldrb	r4, [r1, r3]
 8001b58:	54c4      	strb	r4, [r0, r3]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	e7f8      	b.n	8001b50 <memcpy+0x4>

08001b5e <memset>:
 8001b5e:	0003      	movs	r3, r0
 8001b60:	1882      	adds	r2, r0, r2
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d100      	bne.n	8001b68 <memset+0xa>
 8001b66:	4770      	bx	lr
 8001b68:	7019      	strb	r1, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	e7f9      	b.n	8001b62 <memset+0x4>
	...

08001b70 <iprintf>:
 8001b70:	b40f      	push	{r0, r1, r2, r3}
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <iprintf+0x30>)
 8001b74:	b513      	push	{r0, r1, r4, lr}
 8001b76:	681c      	ldr	r4, [r3, #0]
 8001b78:	2c00      	cmp	r4, #0
 8001b7a:	d005      	beq.n	8001b88 <iprintf+0x18>
 8001b7c:	69a3      	ldr	r3, [r4, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <iprintf+0x18>
 8001b82:	0020      	movs	r0, r4
 8001b84:	f000 fa86 	bl	8002094 <__sinit>
 8001b88:	ab05      	add	r3, sp, #20
 8001b8a:	0020      	movs	r0, r4
 8001b8c:	9a04      	ldr	r2, [sp, #16]
 8001b8e:	68a1      	ldr	r1, [r4, #8]
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	f000 fc99 	bl	80024c8 <_vfiprintf_r>
 8001b96:	bc16      	pop	{r1, r2, r4}
 8001b98:	bc08      	pop	{r3}
 8001b9a:	b004      	add	sp, #16
 8001b9c:	4718      	bx	r3
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	20000008 	.word	0x20000008

08001ba4 <_puts_r>:
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	0005      	movs	r5, r0
 8001ba8:	000e      	movs	r6, r1
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d004      	beq.n	8001bb8 <_puts_r+0x14>
 8001bae:	6983      	ldr	r3, [r0, #24]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <_puts_r+0x14>
 8001bb4:	f000 fa6e 	bl	8002094 <__sinit>
 8001bb8:	69ab      	ldr	r3, [r5, #24]
 8001bba:	68ac      	ldr	r4, [r5, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <_puts_r+0x22>
 8001bc0:	0028      	movs	r0, r5
 8001bc2:	f000 fa67 	bl	8002094 <__sinit>
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <_puts_r+0xd8>)
 8001bc8:	429c      	cmp	r4, r3
 8001bca:	d122      	bne.n	8001c12 <_puts_r+0x6e>
 8001bcc:	686c      	ldr	r4, [r5, #4]
 8001bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bd0:	07db      	lsls	r3, r3, #31
 8001bd2:	d405      	bmi.n	8001be0 <_puts_r+0x3c>
 8001bd4:	89a3      	ldrh	r3, [r4, #12]
 8001bd6:	059b      	lsls	r3, r3, #22
 8001bd8:	d402      	bmi.n	8001be0 <_puts_r+0x3c>
 8001bda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bdc:	f000 fafb 	bl	80021d6 <__retarget_lock_acquire_recursive>
 8001be0:	89a3      	ldrh	r3, [r4, #12]
 8001be2:	071b      	lsls	r3, r3, #28
 8001be4:	d502      	bpl.n	8001bec <_puts_r+0x48>
 8001be6:	6923      	ldr	r3, [r4, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d129      	bne.n	8001c40 <_puts_r+0x9c>
 8001bec:	0021      	movs	r1, r4
 8001bee:	0028      	movs	r0, r5
 8001bf0:	f000 f8aa 	bl	8001d48 <__swsetup_r>
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	d023      	beq.n	8001c40 <_puts_r+0x9c>
 8001bf8:	2501      	movs	r5, #1
 8001bfa:	426d      	negs	r5, r5
 8001bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bfe:	07db      	lsls	r3, r3, #31
 8001c00:	d405      	bmi.n	8001c0e <_puts_r+0x6a>
 8001c02:	89a3      	ldrh	r3, [r4, #12]
 8001c04:	059b      	lsls	r3, r3, #22
 8001c06:	d402      	bmi.n	8001c0e <_puts_r+0x6a>
 8001c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c0a:	f000 fae5 	bl	80021d8 <__retarget_lock_release_recursive>
 8001c0e:	0028      	movs	r0, r5
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <_puts_r+0xdc>)
 8001c14:	429c      	cmp	r4, r3
 8001c16:	d101      	bne.n	8001c1c <_puts_r+0x78>
 8001c18:	68ac      	ldr	r4, [r5, #8]
 8001c1a:	e7d8      	b.n	8001bce <_puts_r+0x2a>
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <_puts_r+0xe0>)
 8001c1e:	429c      	cmp	r4, r3
 8001c20:	d1d5      	bne.n	8001bce <_puts_r+0x2a>
 8001c22:	68ec      	ldr	r4, [r5, #12]
 8001c24:	e7d3      	b.n	8001bce <_puts_r+0x2a>
 8001c26:	3601      	adds	r6, #1
 8001c28:	60a3      	str	r3, [r4, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	da04      	bge.n	8001c38 <_puts_r+0x94>
 8001c2e:	69a2      	ldr	r2, [r4, #24]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dc16      	bgt.n	8001c62 <_puts_r+0xbe>
 8001c34:	290a      	cmp	r1, #10
 8001c36:	d014      	beq.n	8001c62 <_puts_r+0xbe>
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	6022      	str	r2, [r4, #0]
 8001c3e:	7019      	strb	r1, [r3, #0]
 8001c40:	68a3      	ldr	r3, [r4, #8]
 8001c42:	7831      	ldrb	r1, [r6, #0]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	2900      	cmp	r1, #0
 8001c48:	d1ed      	bne.n	8001c26 <_puts_r+0x82>
 8001c4a:	60a3      	str	r3, [r4, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da0f      	bge.n	8001c70 <_puts_r+0xcc>
 8001c50:	0028      	movs	r0, r5
 8001c52:	0022      	movs	r2, r4
 8001c54:	310a      	adds	r1, #10
 8001c56:	f000 f821 	bl	8001c9c <__swbuf_r>
 8001c5a:	250a      	movs	r5, #10
 8001c5c:	1c43      	adds	r3, r0, #1
 8001c5e:	d1cd      	bne.n	8001bfc <_puts_r+0x58>
 8001c60:	e7ca      	b.n	8001bf8 <_puts_r+0x54>
 8001c62:	0022      	movs	r2, r4
 8001c64:	0028      	movs	r0, r5
 8001c66:	f000 f819 	bl	8001c9c <__swbuf_r>
 8001c6a:	1c43      	adds	r3, r0, #1
 8001c6c:	d1e8      	bne.n	8001c40 <_puts_r+0x9c>
 8001c6e:	e7c3      	b.n	8001bf8 <_puts_r+0x54>
 8001c70:	250a      	movs	r5, #10
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	6022      	str	r2, [r4, #0]
 8001c78:	701d      	strb	r5, [r3, #0]
 8001c7a:	e7bf      	b.n	8001bfc <_puts_r+0x58>
 8001c7c:	08002e70 	.word	0x08002e70
 8001c80:	08002e90 	.word	0x08002e90
 8001c84:	08002e50 	.word	0x08002e50

08001c88 <puts>:
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <puts+0x10>)
 8001c8c:	0001      	movs	r1, r0
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	f7ff ff88 	bl	8001ba4 <_puts_r>
 8001c94:	bd10      	pop	{r4, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	20000008 	.word	0x20000008

08001c9c <__swbuf_r>:
 8001c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9e:	0005      	movs	r5, r0
 8001ca0:	000e      	movs	r6, r1
 8001ca2:	0014      	movs	r4, r2
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d004      	beq.n	8001cb2 <__swbuf_r+0x16>
 8001ca8:	6983      	ldr	r3, [r0, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <__swbuf_r+0x16>
 8001cae:	f000 f9f1 	bl	8002094 <__sinit>
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <__swbuf_r+0xa0>)
 8001cb4:	429c      	cmp	r4, r3
 8001cb6:	d12e      	bne.n	8001d16 <__swbuf_r+0x7a>
 8001cb8:	686c      	ldr	r4, [r5, #4]
 8001cba:	69a3      	ldr	r3, [r4, #24]
 8001cbc:	60a3      	str	r3, [r4, #8]
 8001cbe:	89a3      	ldrh	r3, [r4, #12]
 8001cc0:	071b      	lsls	r3, r3, #28
 8001cc2:	d532      	bpl.n	8001d2a <__swbuf_r+0x8e>
 8001cc4:	6923      	ldr	r3, [r4, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d02f      	beq.n	8001d2a <__swbuf_r+0x8e>
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	6922      	ldr	r2, [r4, #16]
 8001cce:	b2f7      	uxtb	r7, r6
 8001cd0:	1a98      	subs	r0, r3, r2
 8001cd2:	6963      	ldr	r3, [r4, #20]
 8001cd4:	b2f6      	uxtb	r6, r6
 8001cd6:	4283      	cmp	r3, r0
 8001cd8:	dc05      	bgt.n	8001ce6 <__swbuf_r+0x4a>
 8001cda:	0021      	movs	r1, r4
 8001cdc:	0028      	movs	r0, r5
 8001cde:	f000 f937 	bl	8001f50 <_fflush_r>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d127      	bne.n	8001d36 <__swbuf_r+0x9a>
 8001ce6:	68a3      	ldr	r3, [r4, #8]
 8001ce8:	3001      	adds	r0, #1
 8001cea:	3b01      	subs	r3, #1
 8001cec:	60a3      	str	r3, [r4, #8]
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	6022      	str	r2, [r4, #0]
 8001cf4:	701f      	strb	r7, [r3, #0]
 8001cf6:	6963      	ldr	r3, [r4, #20]
 8001cf8:	4283      	cmp	r3, r0
 8001cfa:	d004      	beq.n	8001d06 <__swbuf_r+0x6a>
 8001cfc:	89a3      	ldrh	r3, [r4, #12]
 8001cfe:	07db      	lsls	r3, r3, #31
 8001d00:	d507      	bpl.n	8001d12 <__swbuf_r+0x76>
 8001d02:	2e0a      	cmp	r6, #10
 8001d04:	d105      	bne.n	8001d12 <__swbuf_r+0x76>
 8001d06:	0021      	movs	r1, r4
 8001d08:	0028      	movs	r0, r5
 8001d0a:	f000 f921 	bl	8001f50 <_fflush_r>
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	d111      	bne.n	8001d36 <__swbuf_r+0x9a>
 8001d12:	0030      	movs	r0, r6
 8001d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <__swbuf_r+0xa4>)
 8001d18:	429c      	cmp	r4, r3
 8001d1a:	d101      	bne.n	8001d20 <__swbuf_r+0x84>
 8001d1c:	68ac      	ldr	r4, [r5, #8]
 8001d1e:	e7cc      	b.n	8001cba <__swbuf_r+0x1e>
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <__swbuf_r+0xa8>)
 8001d22:	429c      	cmp	r4, r3
 8001d24:	d1c9      	bne.n	8001cba <__swbuf_r+0x1e>
 8001d26:	68ec      	ldr	r4, [r5, #12]
 8001d28:	e7c7      	b.n	8001cba <__swbuf_r+0x1e>
 8001d2a:	0021      	movs	r1, r4
 8001d2c:	0028      	movs	r0, r5
 8001d2e:	f000 f80b 	bl	8001d48 <__swsetup_r>
 8001d32:	2800      	cmp	r0, #0
 8001d34:	d0c9      	beq.n	8001cca <__swbuf_r+0x2e>
 8001d36:	2601      	movs	r6, #1
 8001d38:	4276      	negs	r6, r6
 8001d3a:	e7ea      	b.n	8001d12 <__swbuf_r+0x76>
 8001d3c:	08002e70 	.word	0x08002e70
 8001d40:	08002e90 	.word	0x08002e90
 8001d44:	08002e50 	.word	0x08002e50

08001d48 <__swsetup_r>:
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <__swsetup_r+0xe0>)
 8001d4a:	b570      	push	{r4, r5, r6, lr}
 8001d4c:	681d      	ldr	r5, [r3, #0]
 8001d4e:	0006      	movs	r6, r0
 8001d50:	000c      	movs	r4, r1
 8001d52:	2d00      	cmp	r5, #0
 8001d54:	d005      	beq.n	8001d62 <__swsetup_r+0x1a>
 8001d56:	69ab      	ldr	r3, [r5, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <__swsetup_r+0x1a>
 8001d5c:	0028      	movs	r0, r5
 8001d5e:	f000 f999 	bl	8002094 <__sinit>
 8001d62:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <__swsetup_r+0xe4>)
 8001d64:	429c      	cmp	r4, r3
 8001d66:	d10f      	bne.n	8001d88 <__swsetup_r+0x40>
 8001d68:	686c      	ldr	r4, [r5, #4]
 8001d6a:	230c      	movs	r3, #12
 8001d6c:	5ee2      	ldrsh	r2, [r4, r3]
 8001d6e:	b293      	uxth	r3, r2
 8001d70:	0711      	lsls	r1, r2, #28
 8001d72:	d42d      	bmi.n	8001dd0 <__swsetup_r+0x88>
 8001d74:	06d9      	lsls	r1, r3, #27
 8001d76:	d411      	bmi.n	8001d9c <__swsetup_r+0x54>
 8001d78:	2309      	movs	r3, #9
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	6033      	str	r3, [r6, #0]
 8001d7e:	3337      	adds	r3, #55	; 0x37
 8001d80:	4313      	orrs	r3, r2
 8001d82:	81a3      	strh	r3, [r4, #12]
 8001d84:	4240      	negs	r0, r0
 8001d86:	bd70      	pop	{r4, r5, r6, pc}
 8001d88:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <__swsetup_r+0xe8>)
 8001d8a:	429c      	cmp	r4, r3
 8001d8c:	d101      	bne.n	8001d92 <__swsetup_r+0x4a>
 8001d8e:	68ac      	ldr	r4, [r5, #8]
 8001d90:	e7eb      	b.n	8001d6a <__swsetup_r+0x22>
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <__swsetup_r+0xec>)
 8001d94:	429c      	cmp	r4, r3
 8001d96:	d1e8      	bne.n	8001d6a <__swsetup_r+0x22>
 8001d98:	68ec      	ldr	r4, [r5, #12]
 8001d9a:	e7e6      	b.n	8001d6a <__swsetup_r+0x22>
 8001d9c:	075b      	lsls	r3, r3, #29
 8001d9e:	d513      	bpl.n	8001dc8 <__swsetup_r+0x80>
 8001da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001da2:	2900      	cmp	r1, #0
 8001da4:	d008      	beq.n	8001db8 <__swsetup_r+0x70>
 8001da6:	0023      	movs	r3, r4
 8001da8:	3344      	adds	r3, #68	; 0x44
 8001daa:	4299      	cmp	r1, r3
 8001dac:	d002      	beq.n	8001db4 <__swsetup_r+0x6c>
 8001dae:	0030      	movs	r0, r6
 8001db0:	f000 fa80 	bl	80022b4 <_free_r>
 8001db4:	2300      	movs	r3, #0
 8001db6:	6363      	str	r3, [r4, #52]	; 0x34
 8001db8:	2224      	movs	r2, #36	; 0x24
 8001dba:	89a3      	ldrh	r3, [r4, #12]
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	81a3      	strh	r3, [r4, #12]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6063      	str	r3, [r4, #4]
 8001dc4:	6923      	ldr	r3, [r4, #16]
 8001dc6:	6023      	str	r3, [r4, #0]
 8001dc8:	2308      	movs	r3, #8
 8001dca:	89a2      	ldrh	r2, [r4, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	81a3      	strh	r3, [r4, #12]
 8001dd0:	6923      	ldr	r3, [r4, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10b      	bne.n	8001dee <__swsetup_r+0xa6>
 8001dd6:	21a0      	movs	r1, #160	; 0xa0
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	89a3      	ldrh	r3, [r4, #12]
 8001ddc:	0089      	lsls	r1, r1, #2
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	400b      	ands	r3, r1
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d003      	beq.n	8001dee <__swsetup_r+0xa6>
 8001de6:	0021      	movs	r1, r4
 8001de8:	0030      	movs	r0, r6
 8001dea:	f000 fa1f 	bl	800222c <__smakebuf_r>
 8001dee:	220c      	movs	r2, #12
 8001df0:	5ea3      	ldrsh	r3, [r4, r2]
 8001df2:	2001      	movs	r0, #1
 8001df4:	001a      	movs	r2, r3
 8001df6:	b299      	uxth	r1, r3
 8001df8:	4002      	ands	r2, r0
 8001dfa:	4203      	tst	r3, r0
 8001dfc:	d00f      	beq.n	8001e1e <__swsetup_r+0xd6>
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60a2      	str	r2, [r4, #8]
 8001e02:	6962      	ldr	r2, [r4, #20]
 8001e04:	4252      	negs	r2, r2
 8001e06:	61a2      	str	r2, [r4, #24]
 8001e08:	2000      	movs	r0, #0
 8001e0a:	6922      	ldr	r2, [r4, #16]
 8001e0c:	4282      	cmp	r2, r0
 8001e0e:	d1ba      	bne.n	8001d86 <__swsetup_r+0x3e>
 8001e10:	060a      	lsls	r2, r1, #24
 8001e12:	d5b8      	bpl.n	8001d86 <__swsetup_r+0x3e>
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	4313      	orrs	r3, r2
 8001e18:	81a3      	strh	r3, [r4, #12]
 8001e1a:	3801      	subs	r0, #1
 8001e1c:	e7b3      	b.n	8001d86 <__swsetup_r+0x3e>
 8001e1e:	0788      	lsls	r0, r1, #30
 8001e20:	d400      	bmi.n	8001e24 <__swsetup_r+0xdc>
 8001e22:	6962      	ldr	r2, [r4, #20]
 8001e24:	60a2      	str	r2, [r4, #8]
 8001e26:	e7ef      	b.n	8001e08 <__swsetup_r+0xc0>
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	08002e70 	.word	0x08002e70
 8001e30:	08002e90 	.word	0x08002e90
 8001e34:	08002e50 	.word	0x08002e50

08001e38 <__sflush_r>:
 8001e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e3a:	898b      	ldrh	r3, [r1, #12]
 8001e3c:	0005      	movs	r5, r0
 8001e3e:	000c      	movs	r4, r1
 8001e40:	071a      	lsls	r2, r3, #28
 8001e42:	d45f      	bmi.n	8001f04 <__sflush_r+0xcc>
 8001e44:	684a      	ldr	r2, [r1, #4]
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	dc04      	bgt.n	8001e54 <__sflush_r+0x1c>
 8001e4a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	dc01      	bgt.n	8001e54 <__sflush_r+0x1c>
 8001e50:	2000      	movs	r0, #0
 8001e52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001e54:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001e56:	2f00      	cmp	r7, #0
 8001e58:	d0fa      	beq.n	8001e50 <__sflush_r+0x18>
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	682e      	ldr	r6, [r5, #0]
 8001e60:	602a      	str	r2, [r5, #0]
 8001e62:	001a      	movs	r2, r3
 8001e64:	0149      	lsls	r1, r1, #5
 8001e66:	400a      	ands	r2, r1
 8001e68:	420b      	tst	r3, r1
 8001e6a:	d034      	beq.n	8001ed6 <__sflush_r+0x9e>
 8001e6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	075b      	lsls	r3, r3, #29
 8001e72:	d506      	bpl.n	8001e82 <__sflush_r+0x4a>
 8001e74:	6863      	ldr	r3, [r4, #4]
 8001e76:	1ac0      	subs	r0, r0, r3
 8001e78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <__sflush_r+0x4a>
 8001e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e80:	1ac0      	subs	r0, r0, r3
 8001e82:	0002      	movs	r2, r0
 8001e84:	6a21      	ldr	r1, [r4, #32]
 8001e86:	2300      	movs	r3, #0
 8001e88:	0028      	movs	r0, r5
 8001e8a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001e8c:	47b8      	blx	r7
 8001e8e:	89a1      	ldrh	r1, [r4, #12]
 8001e90:	1c43      	adds	r3, r0, #1
 8001e92:	d106      	bne.n	8001ea2 <__sflush_r+0x6a>
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	2b1d      	cmp	r3, #29
 8001e98:	d831      	bhi.n	8001efe <__sflush_r+0xc6>
 8001e9a:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <__sflush_r+0x114>)
 8001e9c:	40da      	lsrs	r2, r3
 8001e9e:	07d3      	lsls	r3, r2, #31
 8001ea0:	d52d      	bpl.n	8001efe <__sflush_r+0xc6>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	6063      	str	r3, [r4, #4]
 8001ea6:	6923      	ldr	r3, [r4, #16]
 8001ea8:	6023      	str	r3, [r4, #0]
 8001eaa:	04cb      	lsls	r3, r1, #19
 8001eac:	d505      	bpl.n	8001eba <__sflush_r+0x82>
 8001eae:	1c43      	adds	r3, r0, #1
 8001eb0:	d102      	bne.n	8001eb8 <__sflush_r+0x80>
 8001eb2:	682b      	ldr	r3, [r5, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d100      	bne.n	8001eba <__sflush_r+0x82>
 8001eb8:	6560      	str	r0, [r4, #84]	; 0x54
 8001eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ebc:	602e      	str	r6, [r5, #0]
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d0c6      	beq.n	8001e50 <__sflush_r+0x18>
 8001ec2:	0023      	movs	r3, r4
 8001ec4:	3344      	adds	r3, #68	; 0x44
 8001ec6:	4299      	cmp	r1, r3
 8001ec8:	d002      	beq.n	8001ed0 <__sflush_r+0x98>
 8001eca:	0028      	movs	r0, r5
 8001ecc:	f000 f9f2 	bl	80022b4 <_free_r>
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	6360      	str	r0, [r4, #52]	; 0x34
 8001ed4:	e7bd      	b.n	8001e52 <__sflush_r+0x1a>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	0028      	movs	r0, r5
 8001eda:	6a21      	ldr	r1, [r4, #32]
 8001edc:	47b8      	blx	r7
 8001ede:	1c43      	adds	r3, r0, #1
 8001ee0:	d1c5      	bne.n	8001e6e <__sflush_r+0x36>
 8001ee2:	682b      	ldr	r3, [r5, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0c2      	beq.n	8001e6e <__sflush_r+0x36>
 8001ee8:	2b1d      	cmp	r3, #29
 8001eea:	d001      	beq.n	8001ef0 <__sflush_r+0xb8>
 8001eec:	2b16      	cmp	r3, #22
 8001eee:	d101      	bne.n	8001ef4 <__sflush_r+0xbc>
 8001ef0:	602e      	str	r6, [r5, #0]
 8001ef2:	e7ad      	b.n	8001e50 <__sflush_r+0x18>
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	89a2      	ldrh	r2, [r4, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	81a3      	strh	r3, [r4, #12]
 8001efc:	e7a9      	b.n	8001e52 <__sflush_r+0x1a>
 8001efe:	2340      	movs	r3, #64	; 0x40
 8001f00:	430b      	orrs	r3, r1
 8001f02:	e7fa      	b.n	8001efa <__sflush_r+0xc2>
 8001f04:	690f      	ldr	r7, [r1, #16]
 8001f06:	2f00      	cmp	r7, #0
 8001f08:	d0a2      	beq.n	8001e50 <__sflush_r+0x18>
 8001f0a:	680a      	ldr	r2, [r1, #0]
 8001f0c:	600f      	str	r7, [r1, #0]
 8001f0e:	1bd2      	subs	r2, r2, r7
 8001f10:	9201      	str	r2, [sp, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	079b      	lsls	r3, r3, #30
 8001f16:	d100      	bne.n	8001f1a <__sflush_r+0xe2>
 8001f18:	694a      	ldr	r2, [r1, #20]
 8001f1a:	60a2      	str	r2, [r4, #8]
 8001f1c:	9b01      	ldr	r3, [sp, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	dc00      	bgt.n	8001f24 <__sflush_r+0xec>
 8001f22:	e795      	b.n	8001e50 <__sflush_r+0x18>
 8001f24:	003a      	movs	r2, r7
 8001f26:	0028      	movs	r0, r5
 8001f28:	9b01      	ldr	r3, [sp, #4]
 8001f2a:	6a21      	ldr	r1, [r4, #32]
 8001f2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f2e:	47b0      	blx	r6
 8001f30:	2800      	cmp	r0, #0
 8001f32:	dc06      	bgt.n	8001f42 <__sflush_r+0x10a>
 8001f34:	2340      	movs	r3, #64	; 0x40
 8001f36:	2001      	movs	r0, #1
 8001f38:	89a2      	ldrh	r2, [r4, #12]
 8001f3a:	4240      	negs	r0, r0
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	81a3      	strh	r3, [r4, #12]
 8001f40:	e787      	b.n	8001e52 <__sflush_r+0x1a>
 8001f42:	9b01      	ldr	r3, [sp, #4]
 8001f44:	183f      	adds	r7, r7, r0
 8001f46:	1a1b      	subs	r3, r3, r0
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	e7e7      	b.n	8001f1c <__sflush_r+0xe4>
 8001f4c:	20400001 	.word	0x20400001

08001f50 <_fflush_r>:
 8001f50:	690b      	ldr	r3, [r1, #16]
 8001f52:	b570      	push	{r4, r5, r6, lr}
 8001f54:	0005      	movs	r5, r0
 8001f56:	000c      	movs	r4, r1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <_fflush_r+0x12>
 8001f5c:	2500      	movs	r5, #0
 8001f5e:	0028      	movs	r0, r5
 8001f60:	bd70      	pop	{r4, r5, r6, pc}
 8001f62:	2800      	cmp	r0, #0
 8001f64:	d004      	beq.n	8001f70 <_fflush_r+0x20>
 8001f66:	6983      	ldr	r3, [r0, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <_fflush_r+0x20>
 8001f6c:	f000 f892 	bl	8002094 <__sinit>
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <_fflush_r+0x74>)
 8001f72:	429c      	cmp	r4, r3
 8001f74:	d11b      	bne.n	8001fae <_fflush_r+0x5e>
 8001f76:	686c      	ldr	r4, [r5, #4]
 8001f78:	220c      	movs	r2, #12
 8001f7a:	5ea3      	ldrsh	r3, [r4, r2]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ed      	beq.n	8001f5c <_fflush_r+0xc>
 8001f80:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f82:	07d2      	lsls	r2, r2, #31
 8001f84:	d404      	bmi.n	8001f90 <_fflush_r+0x40>
 8001f86:	059b      	lsls	r3, r3, #22
 8001f88:	d402      	bmi.n	8001f90 <_fflush_r+0x40>
 8001f8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f8c:	f000 f923 	bl	80021d6 <__retarget_lock_acquire_recursive>
 8001f90:	0028      	movs	r0, r5
 8001f92:	0021      	movs	r1, r4
 8001f94:	f7ff ff50 	bl	8001e38 <__sflush_r>
 8001f98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f9a:	0005      	movs	r5, r0
 8001f9c:	07db      	lsls	r3, r3, #31
 8001f9e:	d4de      	bmi.n	8001f5e <_fflush_r+0xe>
 8001fa0:	89a3      	ldrh	r3, [r4, #12]
 8001fa2:	059b      	lsls	r3, r3, #22
 8001fa4:	d4db      	bmi.n	8001f5e <_fflush_r+0xe>
 8001fa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fa8:	f000 f916 	bl	80021d8 <__retarget_lock_release_recursive>
 8001fac:	e7d7      	b.n	8001f5e <_fflush_r+0xe>
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <_fflush_r+0x78>)
 8001fb0:	429c      	cmp	r4, r3
 8001fb2:	d101      	bne.n	8001fb8 <_fflush_r+0x68>
 8001fb4:	68ac      	ldr	r4, [r5, #8]
 8001fb6:	e7df      	b.n	8001f78 <_fflush_r+0x28>
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <_fflush_r+0x7c>)
 8001fba:	429c      	cmp	r4, r3
 8001fbc:	d1dc      	bne.n	8001f78 <_fflush_r+0x28>
 8001fbe:	68ec      	ldr	r4, [r5, #12]
 8001fc0:	e7da      	b.n	8001f78 <_fflush_r+0x28>
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	08002e70 	.word	0x08002e70
 8001fc8:	08002e90 	.word	0x08002e90
 8001fcc:	08002e50 	.word	0x08002e50

08001fd0 <std>:
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	b510      	push	{r4, lr}
 8001fd4:	0004      	movs	r4, r0
 8001fd6:	6003      	str	r3, [r0, #0]
 8001fd8:	6043      	str	r3, [r0, #4]
 8001fda:	6083      	str	r3, [r0, #8]
 8001fdc:	8181      	strh	r1, [r0, #12]
 8001fde:	6643      	str	r3, [r0, #100]	; 0x64
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	81c2      	strh	r2, [r0, #14]
 8001fe4:	6103      	str	r3, [r0, #16]
 8001fe6:	6143      	str	r3, [r0, #20]
 8001fe8:	6183      	str	r3, [r0, #24]
 8001fea:	2208      	movs	r2, #8
 8001fec:	305c      	adds	r0, #92	; 0x5c
 8001fee:	f7ff fdb6 	bl	8001b5e <memset>
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <std+0x38>)
 8001ff4:	6224      	str	r4, [r4, #32]
 8001ff6:	6263      	str	r3, [r4, #36]	; 0x24
 8001ff8:	4b04      	ldr	r3, [pc, #16]	; (800200c <std+0x3c>)
 8001ffa:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <std+0x40>)
 8001ffe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <std+0x44>)
 8002002:	6323      	str	r3, [r4, #48]	; 0x30
 8002004:	bd10      	pop	{r4, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	08002a65 	.word	0x08002a65
 800200c:	08002a8d 	.word	0x08002a8d
 8002010:	08002ac5 	.word	0x08002ac5
 8002014:	08002af1 	.word	0x08002af1

08002018 <_cleanup_r>:
 8002018:	b510      	push	{r4, lr}
 800201a:	4902      	ldr	r1, [pc, #8]	; (8002024 <_cleanup_r+0xc>)
 800201c:	f000 f8ba 	bl	8002194 <_fwalk_reent>
 8002020:	bd10      	pop	{r4, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	08001f51 	.word	0x08001f51

08002028 <__sfmoreglue>:
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	2568      	movs	r5, #104	; 0x68
 800202c:	1e4a      	subs	r2, r1, #1
 800202e:	4355      	muls	r5, r2
 8002030:	000e      	movs	r6, r1
 8002032:	0029      	movs	r1, r5
 8002034:	3174      	adds	r1, #116	; 0x74
 8002036:	f000 f9a9 	bl	800238c <_malloc_r>
 800203a:	1e04      	subs	r4, r0, #0
 800203c:	d008      	beq.n	8002050 <__sfmoreglue+0x28>
 800203e:	2100      	movs	r1, #0
 8002040:	002a      	movs	r2, r5
 8002042:	6001      	str	r1, [r0, #0]
 8002044:	6046      	str	r6, [r0, #4]
 8002046:	300c      	adds	r0, #12
 8002048:	60a0      	str	r0, [r4, #8]
 800204a:	3268      	adds	r2, #104	; 0x68
 800204c:	f7ff fd87 	bl	8001b5e <memset>
 8002050:	0020      	movs	r0, r4
 8002052:	bd70      	pop	{r4, r5, r6, pc}

08002054 <__sfp_lock_acquire>:
 8002054:	b510      	push	{r4, lr}
 8002056:	4802      	ldr	r0, [pc, #8]	; (8002060 <__sfp_lock_acquire+0xc>)
 8002058:	f000 f8bd 	bl	80021d6 <__retarget_lock_acquire_recursive>
 800205c:	bd10      	pop	{r4, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	200009fe 	.word	0x200009fe

08002064 <__sfp_lock_release>:
 8002064:	b510      	push	{r4, lr}
 8002066:	4802      	ldr	r0, [pc, #8]	; (8002070 <__sfp_lock_release+0xc>)
 8002068:	f000 f8b6 	bl	80021d8 <__retarget_lock_release_recursive>
 800206c:	bd10      	pop	{r4, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	200009fe 	.word	0x200009fe

08002074 <__sinit_lock_acquire>:
 8002074:	b510      	push	{r4, lr}
 8002076:	4802      	ldr	r0, [pc, #8]	; (8002080 <__sinit_lock_acquire+0xc>)
 8002078:	f000 f8ad 	bl	80021d6 <__retarget_lock_acquire_recursive>
 800207c:	bd10      	pop	{r4, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	200009ff 	.word	0x200009ff

08002084 <__sinit_lock_release>:
 8002084:	b510      	push	{r4, lr}
 8002086:	4802      	ldr	r0, [pc, #8]	; (8002090 <__sinit_lock_release+0xc>)
 8002088:	f000 f8a6 	bl	80021d8 <__retarget_lock_release_recursive>
 800208c:	bd10      	pop	{r4, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	200009ff 	.word	0x200009ff

08002094 <__sinit>:
 8002094:	b513      	push	{r0, r1, r4, lr}
 8002096:	0004      	movs	r4, r0
 8002098:	f7ff ffec 	bl	8002074 <__sinit_lock_acquire>
 800209c:	69a3      	ldr	r3, [r4, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <__sinit+0x14>
 80020a2:	f7ff ffef 	bl	8002084 <__sinit_lock_release>
 80020a6:	bd13      	pop	{r0, r1, r4, pc}
 80020a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80020aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80020ac:	6523      	str	r3, [r4, #80]	; 0x50
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <__sinit+0x68>)
 80020b0:	4a13      	ldr	r2, [pc, #76]	; (8002100 <__sinit+0x6c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	42a3      	cmp	r3, r4
 80020ba:	d101      	bne.n	80020c0 <__sinit+0x2c>
 80020bc:	2301      	movs	r3, #1
 80020be:	61a3      	str	r3, [r4, #24]
 80020c0:	0020      	movs	r0, r4
 80020c2:	f000 f81f 	bl	8002104 <__sfp>
 80020c6:	6060      	str	r0, [r4, #4]
 80020c8:	0020      	movs	r0, r4
 80020ca:	f000 f81b 	bl	8002104 <__sfp>
 80020ce:	60a0      	str	r0, [r4, #8]
 80020d0:	0020      	movs	r0, r4
 80020d2:	f000 f817 	bl	8002104 <__sfp>
 80020d6:	2200      	movs	r2, #0
 80020d8:	2104      	movs	r1, #4
 80020da:	60e0      	str	r0, [r4, #12]
 80020dc:	6860      	ldr	r0, [r4, #4]
 80020de:	f7ff ff77 	bl	8001fd0 <std>
 80020e2:	2201      	movs	r2, #1
 80020e4:	2109      	movs	r1, #9
 80020e6:	68a0      	ldr	r0, [r4, #8]
 80020e8:	f7ff ff72 	bl	8001fd0 <std>
 80020ec:	2202      	movs	r2, #2
 80020ee:	2112      	movs	r1, #18
 80020f0:	68e0      	ldr	r0, [r4, #12]
 80020f2:	f7ff ff6d 	bl	8001fd0 <std>
 80020f6:	2301      	movs	r3, #1
 80020f8:	61a3      	str	r3, [r4, #24]
 80020fa:	e7d2      	b.n	80020a2 <__sinit+0xe>
 80020fc:	08002e4c 	.word	0x08002e4c
 8002100:	08002019 	.word	0x08002019

08002104 <__sfp>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	0007      	movs	r7, r0
 8002108:	f7ff ffa4 	bl	8002054 <__sfp_lock_acquire>
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <__sfp+0x88>)
 800210e:	681e      	ldr	r6, [r3, #0]
 8002110:	69b3      	ldr	r3, [r6, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <__sfp+0x18>
 8002116:	0030      	movs	r0, r6
 8002118:	f7ff ffbc 	bl	8002094 <__sinit>
 800211c:	3648      	adds	r6, #72	; 0x48
 800211e:	68b4      	ldr	r4, [r6, #8]
 8002120:	6873      	ldr	r3, [r6, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	d504      	bpl.n	8002130 <__sfp+0x2c>
 8002126:	6833      	ldr	r3, [r6, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d022      	beq.n	8002172 <__sfp+0x6e>
 800212c:	6836      	ldr	r6, [r6, #0]
 800212e:	e7f6      	b.n	800211e <__sfp+0x1a>
 8002130:	220c      	movs	r2, #12
 8002132:	5ea5      	ldrsh	r5, [r4, r2]
 8002134:	2d00      	cmp	r5, #0
 8002136:	d11a      	bne.n	800216e <__sfp+0x6a>
 8002138:	0020      	movs	r0, r4
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <__sfp+0x8c>)
 800213c:	3058      	adds	r0, #88	; 0x58
 800213e:	60e3      	str	r3, [r4, #12]
 8002140:	6665      	str	r5, [r4, #100]	; 0x64
 8002142:	f000 f847 	bl	80021d4 <__retarget_lock_init_recursive>
 8002146:	f7ff ff8d 	bl	8002064 <__sfp_lock_release>
 800214a:	0020      	movs	r0, r4
 800214c:	2208      	movs	r2, #8
 800214e:	0029      	movs	r1, r5
 8002150:	6025      	str	r5, [r4, #0]
 8002152:	60a5      	str	r5, [r4, #8]
 8002154:	6065      	str	r5, [r4, #4]
 8002156:	6125      	str	r5, [r4, #16]
 8002158:	6165      	str	r5, [r4, #20]
 800215a:	61a5      	str	r5, [r4, #24]
 800215c:	305c      	adds	r0, #92	; 0x5c
 800215e:	f7ff fcfe 	bl	8001b5e <memset>
 8002162:	6365      	str	r5, [r4, #52]	; 0x34
 8002164:	63a5      	str	r5, [r4, #56]	; 0x38
 8002166:	64a5      	str	r5, [r4, #72]	; 0x48
 8002168:	64e5      	str	r5, [r4, #76]	; 0x4c
 800216a:	0020      	movs	r0, r4
 800216c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800216e:	3468      	adds	r4, #104	; 0x68
 8002170:	e7d7      	b.n	8002122 <__sfp+0x1e>
 8002172:	2104      	movs	r1, #4
 8002174:	0038      	movs	r0, r7
 8002176:	f7ff ff57 	bl	8002028 <__sfmoreglue>
 800217a:	1e04      	subs	r4, r0, #0
 800217c:	6030      	str	r0, [r6, #0]
 800217e:	d1d5      	bne.n	800212c <__sfp+0x28>
 8002180:	f7ff ff70 	bl	8002064 <__sfp_lock_release>
 8002184:	230c      	movs	r3, #12
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	e7ef      	b.n	800216a <__sfp+0x66>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	08002e4c 	.word	0x08002e4c
 8002190:	ffff0001 	.word	0xffff0001

08002194 <_fwalk_reent>:
 8002194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002196:	0004      	movs	r4, r0
 8002198:	0006      	movs	r6, r0
 800219a:	2700      	movs	r7, #0
 800219c:	9101      	str	r1, [sp, #4]
 800219e:	3448      	adds	r4, #72	; 0x48
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	68a5      	ldr	r5, [r4, #8]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	9b00      	ldr	r3, [sp, #0]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	d504      	bpl.n	80021b8 <_fwalk_reent+0x24>
 80021ae:	6824      	ldr	r4, [r4, #0]
 80021b0:	2c00      	cmp	r4, #0
 80021b2:	d1f5      	bne.n	80021a0 <_fwalk_reent+0xc>
 80021b4:	0038      	movs	r0, r7
 80021b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80021b8:	89ab      	ldrh	r3, [r5, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d908      	bls.n	80021d0 <_fwalk_reent+0x3c>
 80021be:	220e      	movs	r2, #14
 80021c0:	5eab      	ldrsh	r3, [r5, r2]
 80021c2:	3301      	adds	r3, #1
 80021c4:	d004      	beq.n	80021d0 <_fwalk_reent+0x3c>
 80021c6:	0029      	movs	r1, r5
 80021c8:	0030      	movs	r0, r6
 80021ca:	9b01      	ldr	r3, [sp, #4]
 80021cc:	4798      	blx	r3
 80021ce:	4307      	orrs	r7, r0
 80021d0:	3568      	adds	r5, #104	; 0x68
 80021d2:	e7e8      	b.n	80021a6 <_fwalk_reent+0x12>

080021d4 <__retarget_lock_init_recursive>:
 80021d4:	4770      	bx	lr

080021d6 <__retarget_lock_acquire_recursive>:
 80021d6:	4770      	bx	lr

080021d8 <__retarget_lock_release_recursive>:
 80021d8:	4770      	bx	lr
	...

080021dc <__swhatbuf_r>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	000e      	movs	r6, r1
 80021e0:	001d      	movs	r5, r3
 80021e2:	230e      	movs	r3, #14
 80021e4:	5ec9      	ldrsh	r1, [r1, r3]
 80021e6:	0014      	movs	r4, r2
 80021e8:	b096      	sub	sp, #88	; 0x58
 80021ea:	2900      	cmp	r1, #0
 80021ec:	da08      	bge.n	8002200 <__swhatbuf_r+0x24>
 80021ee:	220c      	movs	r2, #12
 80021f0:	5eb3      	ldrsh	r3, [r6, r2]
 80021f2:	2200      	movs	r2, #0
 80021f4:	602a      	str	r2, [r5, #0]
 80021f6:	061b      	lsls	r3, r3, #24
 80021f8:	d411      	bmi.n	800221e <__swhatbuf_r+0x42>
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	e00f      	b.n	8002220 <__swhatbuf_r+0x44>
 8002200:	466a      	mov	r2, sp
 8002202:	f000 fca1 	bl	8002b48 <_fstat_r>
 8002206:	2800      	cmp	r0, #0
 8002208:	dbf1      	blt.n	80021ee <__swhatbuf_r+0x12>
 800220a:	23f0      	movs	r3, #240	; 0xf0
 800220c:	9901      	ldr	r1, [sp, #4]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	4019      	ands	r1, r3
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <__swhatbuf_r+0x4c>)
 8002214:	18c9      	adds	r1, r1, r3
 8002216:	424b      	negs	r3, r1
 8002218:	4159      	adcs	r1, r3
 800221a:	6029      	str	r1, [r5, #0]
 800221c:	e7ed      	b.n	80021fa <__swhatbuf_r+0x1e>
 800221e:	2340      	movs	r3, #64	; 0x40
 8002220:	2000      	movs	r0, #0
 8002222:	6023      	str	r3, [r4, #0]
 8002224:	b016      	add	sp, #88	; 0x58
 8002226:	bd70      	pop	{r4, r5, r6, pc}
 8002228:	ffffe000 	.word	0xffffe000

0800222c <__smakebuf_r>:
 800222c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800222e:	2602      	movs	r6, #2
 8002230:	898b      	ldrh	r3, [r1, #12]
 8002232:	0005      	movs	r5, r0
 8002234:	000c      	movs	r4, r1
 8002236:	4233      	tst	r3, r6
 8002238:	d006      	beq.n	8002248 <__smakebuf_r+0x1c>
 800223a:	0023      	movs	r3, r4
 800223c:	3347      	adds	r3, #71	; 0x47
 800223e:	6023      	str	r3, [r4, #0]
 8002240:	6123      	str	r3, [r4, #16]
 8002242:	2301      	movs	r3, #1
 8002244:	6163      	str	r3, [r4, #20]
 8002246:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002248:	466a      	mov	r2, sp
 800224a:	ab01      	add	r3, sp, #4
 800224c:	f7ff ffc6 	bl	80021dc <__swhatbuf_r>
 8002250:	9900      	ldr	r1, [sp, #0]
 8002252:	0007      	movs	r7, r0
 8002254:	0028      	movs	r0, r5
 8002256:	f000 f899 	bl	800238c <_malloc_r>
 800225a:	2800      	cmp	r0, #0
 800225c:	d108      	bne.n	8002270 <__smakebuf_r+0x44>
 800225e:	220c      	movs	r2, #12
 8002260:	5ea3      	ldrsh	r3, [r4, r2]
 8002262:	059a      	lsls	r2, r3, #22
 8002264:	d4ef      	bmi.n	8002246 <__smakebuf_r+0x1a>
 8002266:	2203      	movs	r2, #3
 8002268:	4393      	bics	r3, r2
 800226a:	431e      	orrs	r6, r3
 800226c:	81a6      	strh	r6, [r4, #12]
 800226e:	e7e4      	b.n	800223a <__smakebuf_r+0xe>
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <__smakebuf_r+0x84>)
 8002272:	62ab      	str	r3, [r5, #40]	; 0x28
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	89a2      	ldrh	r2, [r4, #12]
 8002278:	6020      	str	r0, [r4, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	81a3      	strh	r3, [r4, #12]
 800227e:	9b00      	ldr	r3, [sp, #0]
 8002280:	6120      	str	r0, [r4, #16]
 8002282:	6163      	str	r3, [r4, #20]
 8002284:	9b01      	ldr	r3, [sp, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <__smakebuf_r+0x7a>
 800228a:	0028      	movs	r0, r5
 800228c:	230e      	movs	r3, #14
 800228e:	5ee1      	ldrsh	r1, [r4, r3]
 8002290:	f000 fc6c 	bl	8002b6c <_isatty_r>
 8002294:	2800      	cmp	r0, #0
 8002296:	d006      	beq.n	80022a6 <__smakebuf_r+0x7a>
 8002298:	2203      	movs	r2, #3
 800229a:	89a3      	ldrh	r3, [r4, #12]
 800229c:	4393      	bics	r3, r2
 800229e:	001a      	movs	r2, r3
 80022a0:	2301      	movs	r3, #1
 80022a2:	4313      	orrs	r3, r2
 80022a4:	81a3      	strh	r3, [r4, #12]
 80022a6:	89a0      	ldrh	r0, [r4, #12]
 80022a8:	4307      	orrs	r7, r0
 80022aa:	81a7      	strh	r7, [r4, #12]
 80022ac:	e7cb      	b.n	8002246 <__smakebuf_r+0x1a>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	08002019 	.word	0x08002019

080022b4 <_free_r>:
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	0005      	movs	r5, r0
 80022b8:	2900      	cmp	r1, #0
 80022ba:	d010      	beq.n	80022de <_free_r+0x2a>
 80022bc:	1f0c      	subs	r4, r1, #4
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	da00      	bge.n	80022c6 <_free_r+0x12>
 80022c4:	18e4      	adds	r4, r4, r3
 80022c6:	0028      	movs	r0, r5
 80022c8:	f000 fc82 	bl	8002bd0 <__malloc_lock>
 80022cc:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <_free_r+0x90>)
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <_free_r+0x2c>
 80022d4:	6063      	str	r3, [r4, #4]
 80022d6:	6014      	str	r4, [r2, #0]
 80022d8:	0028      	movs	r0, r5
 80022da:	f000 fc81 	bl	8002be0 <__malloc_unlock>
 80022de:	bd70      	pop	{r4, r5, r6, pc}
 80022e0:	42a3      	cmp	r3, r4
 80022e2:	d908      	bls.n	80022f6 <_free_r+0x42>
 80022e4:	6821      	ldr	r1, [r4, #0]
 80022e6:	1860      	adds	r0, r4, r1
 80022e8:	4283      	cmp	r3, r0
 80022ea:	d1f3      	bne.n	80022d4 <_free_r+0x20>
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	1841      	adds	r1, r0, r1
 80022f2:	6021      	str	r1, [r4, #0]
 80022f4:	e7ee      	b.n	80022d4 <_free_r+0x20>
 80022f6:	001a      	movs	r2, r3
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <_free_r+0x4e>
 80022fe:	42a3      	cmp	r3, r4
 8002300:	d9f9      	bls.n	80022f6 <_free_r+0x42>
 8002302:	6811      	ldr	r1, [r2, #0]
 8002304:	1850      	adds	r0, r2, r1
 8002306:	42a0      	cmp	r0, r4
 8002308:	d10b      	bne.n	8002322 <_free_r+0x6e>
 800230a:	6820      	ldr	r0, [r4, #0]
 800230c:	1809      	adds	r1, r1, r0
 800230e:	1850      	adds	r0, r2, r1
 8002310:	6011      	str	r1, [r2, #0]
 8002312:	4283      	cmp	r3, r0
 8002314:	d1e0      	bne.n	80022d8 <_free_r+0x24>
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	1841      	adds	r1, r0, r1
 800231c:	6011      	str	r1, [r2, #0]
 800231e:	6053      	str	r3, [r2, #4]
 8002320:	e7da      	b.n	80022d8 <_free_r+0x24>
 8002322:	42a0      	cmp	r0, r4
 8002324:	d902      	bls.n	800232c <_free_r+0x78>
 8002326:	230c      	movs	r3, #12
 8002328:	602b      	str	r3, [r5, #0]
 800232a:	e7d5      	b.n	80022d8 <_free_r+0x24>
 800232c:	6821      	ldr	r1, [r4, #0]
 800232e:	1860      	adds	r0, r4, r1
 8002330:	4283      	cmp	r3, r0
 8002332:	d103      	bne.n	800233c <_free_r+0x88>
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	1841      	adds	r1, r0, r1
 800233a:	6021      	str	r1, [r4, #0]
 800233c:	6063      	str	r3, [r4, #4]
 800233e:	6054      	str	r4, [r2, #4]
 8002340:	e7ca      	b.n	80022d8 <_free_r+0x24>
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	20000a00 	.word	0x20000a00

08002348 <sbrk_aligned>:
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	4e0f      	ldr	r6, [pc, #60]	; (8002388 <sbrk_aligned+0x40>)
 800234c:	000d      	movs	r5, r1
 800234e:	6831      	ldr	r1, [r6, #0]
 8002350:	0004      	movs	r4, r0
 8002352:	2900      	cmp	r1, #0
 8002354:	d102      	bne.n	800235c <sbrk_aligned+0x14>
 8002356:	f000 fb73 	bl	8002a40 <_sbrk_r>
 800235a:	6030      	str	r0, [r6, #0]
 800235c:	0029      	movs	r1, r5
 800235e:	0020      	movs	r0, r4
 8002360:	f000 fb6e 	bl	8002a40 <_sbrk_r>
 8002364:	1c43      	adds	r3, r0, #1
 8002366:	d00a      	beq.n	800237e <sbrk_aligned+0x36>
 8002368:	2303      	movs	r3, #3
 800236a:	1cc5      	adds	r5, r0, #3
 800236c:	439d      	bics	r5, r3
 800236e:	42a8      	cmp	r0, r5
 8002370:	d007      	beq.n	8002382 <sbrk_aligned+0x3a>
 8002372:	1a29      	subs	r1, r5, r0
 8002374:	0020      	movs	r0, r4
 8002376:	f000 fb63 	bl	8002a40 <_sbrk_r>
 800237a:	1c43      	adds	r3, r0, #1
 800237c:	d101      	bne.n	8002382 <sbrk_aligned+0x3a>
 800237e:	2501      	movs	r5, #1
 8002380:	426d      	negs	r5, r5
 8002382:	0028      	movs	r0, r5
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	20000a04 	.word	0x20000a04

0800238c <_malloc_r>:
 800238c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800238e:	2203      	movs	r2, #3
 8002390:	1ccb      	adds	r3, r1, #3
 8002392:	4393      	bics	r3, r2
 8002394:	3308      	adds	r3, #8
 8002396:	0006      	movs	r6, r0
 8002398:	001f      	movs	r7, r3
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d232      	bcs.n	8002404 <_malloc_r+0x78>
 800239e:	270c      	movs	r7, #12
 80023a0:	42b9      	cmp	r1, r7
 80023a2:	d831      	bhi.n	8002408 <_malloc_r+0x7c>
 80023a4:	0030      	movs	r0, r6
 80023a6:	f000 fc13 	bl	8002bd0 <__malloc_lock>
 80023aa:	4d32      	ldr	r5, [pc, #200]	; (8002474 <_malloc_r+0xe8>)
 80023ac:	682b      	ldr	r3, [r5, #0]
 80023ae:	001c      	movs	r4, r3
 80023b0:	2c00      	cmp	r4, #0
 80023b2:	d12e      	bne.n	8002412 <_malloc_r+0x86>
 80023b4:	0039      	movs	r1, r7
 80023b6:	0030      	movs	r0, r6
 80023b8:	f7ff ffc6 	bl	8002348 <sbrk_aligned>
 80023bc:	0004      	movs	r4, r0
 80023be:	1c43      	adds	r3, r0, #1
 80023c0:	d11e      	bne.n	8002400 <_malloc_r+0x74>
 80023c2:	682c      	ldr	r4, [r5, #0]
 80023c4:	0025      	movs	r5, r4
 80023c6:	2d00      	cmp	r5, #0
 80023c8:	d14a      	bne.n	8002460 <_malloc_r+0xd4>
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	0029      	movs	r1, r5
 80023ce:	18e3      	adds	r3, r4, r3
 80023d0:	0030      	movs	r0, r6
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	f000 fb34 	bl	8002a40 <_sbrk_r>
 80023d8:	9b01      	ldr	r3, [sp, #4]
 80023da:	4283      	cmp	r3, r0
 80023dc:	d143      	bne.n	8002466 <_malloc_r+0xda>
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	3703      	adds	r7, #3
 80023e2:	1aff      	subs	r7, r7, r3
 80023e4:	2303      	movs	r3, #3
 80023e6:	439f      	bics	r7, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	2f0c      	cmp	r7, #12
 80023ec:	d200      	bcs.n	80023f0 <_malloc_r+0x64>
 80023ee:	270c      	movs	r7, #12
 80023f0:	0039      	movs	r1, r7
 80023f2:	0030      	movs	r0, r6
 80023f4:	f7ff ffa8 	bl	8002348 <sbrk_aligned>
 80023f8:	1c43      	adds	r3, r0, #1
 80023fa:	d034      	beq.n	8002466 <_malloc_r+0xda>
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	19df      	adds	r7, r3, r7
 8002400:	6027      	str	r7, [r4, #0]
 8002402:	e013      	b.n	800242c <_malloc_r+0xa0>
 8002404:	2b00      	cmp	r3, #0
 8002406:	dacb      	bge.n	80023a0 <_malloc_r+0x14>
 8002408:	230c      	movs	r3, #12
 800240a:	2500      	movs	r5, #0
 800240c:	6033      	str	r3, [r6, #0]
 800240e:	0028      	movs	r0, r5
 8002410:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002412:	6822      	ldr	r2, [r4, #0]
 8002414:	1bd1      	subs	r1, r2, r7
 8002416:	d420      	bmi.n	800245a <_malloc_r+0xce>
 8002418:	290b      	cmp	r1, #11
 800241a:	d917      	bls.n	800244c <_malloc_r+0xc0>
 800241c:	19e2      	adds	r2, r4, r7
 800241e:	6027      	str	r7, [r4, #0]
 8002420:	42a3      	cmp	r3, r4
 8002422:	d111      	bne.n	8002448 <_malloc_r+0xbc>
 8002424:	602a      	str	r2, [r5, #0]
 8002426:	6863      	ldr	r3, [r4, #4]
 8002428:	6011      	str	r1, [r2, #0]
 800242a:	6053      	str	r3, [r2, #4]
 800242c:	0030      	movs	r0, r6
 800242e:	0025      	movs	r5, r4
 8002430:	f000 fbd6 	bl	8002be0 <__malloc_unlock>
 8002434:	2207      	movs	r2, #7
 8002436:	350b      	adds	r5, #11
 8002438:	1d23      	adds	r3, r4, #4
 800243a:	4395      	bics	r5, r2
 800243c:	1aea      	subs	r2, r5, r3
 800243e:	429d      	cmp	r5, r3
 8002440:	d0e5      	beq.n	800240e <_malloc_r+0x82>
 8002442:	1b5b      	subs	r3, r3, r5
 8002444:	50a3      	str	r3, [r4, r2]
 8002446:	e7e2      	b.n	800240e <_malloc_r+0x82>
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	e7ec      	b.n	8002426 <_malloc_r+0x9a>
 800244c:	6862      	ldr	r2, [r4, #4]
 800244e:	42a3      	cmp	r3, r4
 8002450:	d101      	bne.n	8002456 <_malloc_r+0xca>
 8002452:	602a      	str	r2, [r5, #0]
 8002454:	e7ea      	b.n	800242c <_malloc_r+0xa0>
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	e7e8      	b.n	800242c <_malloc_r+0xa0>
 800245a:	0023      	movs	r3, r4
 800245c:	6864      	ldr	r4, [r4, #4]
 800245e:	e7a7      	b.n	80023b0 <_malloc_r+0x24>
 8002460:	002c      	movs	r4, r5
 8002462:	686d      	ldr	r5, [r5, #4]
 8002464:	e7af      	b.n	80023c6 <_malloc_r+0x3a>
 8002466:	230c      	movs	r3, #12
 8002468:	0030      	movs	r0, r6
 800246a:	6033      	str	r3, [r6, #0]
 800246c:	f000 fbb8 	bl	8002be0 <__malloc_unlock>
 8002470:	e7cd      	b.n	800240e <_malloc_r+0x82>
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	20000a00 	.word	0x20000a00

08002478 <__sfputc_r>:
 8002478:	6893      	ldr	r3, [r2, #8]
 800247a:	b510      	push	{r4, lr}
 800247c:	3b01      	subs	r3, #1
 800247e:	6093      	str	r3, [r2, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	da04      	bge.n	800248e <__sfputc_r+0x16>
 8002484:	6994      	ldr	r4, [r2, #24]
 8002486:	42a3      	cmp	r3, r4
 8002488:	db07      	blt.n	800249a <__sfputc_r+0x22>
 800248a:	290a      	cmp	r1, #10
 800248c:	d005      	beq.n	800249a <__sfputc_r+0x22>
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	1c58      	adds	r0, r3, #1
 8002492:	6010      	str	r0, [r2, #0]
 8002494:	7019      	strb	r1, [r3, #0]
 8002496:	0008      	movs	r0, r1
 8002498:	bd10      	pop	{r4, pc}
 800249a:	f7ff fbff 	bl	8001c9c <__swbuf_r>
 800249e:	0001      	movs	r1, r0
 80024a0:	e7f9      	b.n	8002496 <__sfputc_r+0x1e>

080024a2 <__sfputs_r>:
 80024a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a4:	0006      	movs	r6, r0
 80024a6:	000f      	movs	r7, r1
 80024a8:	0014      	movs	r4, r2
 80024aa:	18d5      	adds	r5, r2, r3
 80024ac:	42ac      	cmp	r4, r5
 80024ae:	d101      	bne.n	80024b4 <__sfputs_r+0x12>
 80024b0:	2000      	movs	r0, #0
 80024b2:	e007      	b.n	80024c4 <__sfputs_r+0x22>
 80024b4:	7821      	ldrb	r1, [r4, #0]
 80024b6:	003a      	movs	r2, r7
 80024b8:	0030      	movs	r0, r6
 80024ba:	f7ff ffdd 	bl	8002478 <__sfputc_r>
 80024be:	3401      	adds	r4, #1
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	d1f3      	bne.n	80024ac <__sfputs_r+0xa>
 80024c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024c8 <_vfiprintf_r>:
 80024c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ca:	b0a1      	sub	sp, #132	; 0x84
 80024cc:	0006      	movs	r6, r0
 80024ce:	000c      	movs	r4, r1
 80024d0:	001f      	movs	r7, r3
 80024d2:	9203      	str	r2, [sp, #12]
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d004      	beq.n	80024e2 <_vfiprintf_r+0x1a>
 80024d8:	6983      	ldr	r3, [r0, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <_vfiprintf_r+0x1a>
 80024de:	f7ff fdd9 	bl	8002094 <__sinit>
 80024e2:	4b8e      	ldr	r3, [pc, #568]	; (800271c <_vfiprintf_r+0x254>)
 80024e4:	429c      	cmp	r4, r3
 80024e6:	d11c      	bne.n	8002522 <_vfiprintf_r+0x5a>
 80024e8:	6874      	ldr	r4, [r6, #4]
 80024ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024ec:	07db      	lsls	r3, r3, #31
 80024ee:	d405      	bmi.n	80024fc <_vfiprintf_r+0x34>
 80024f0:	89a3      	ldrh	r3, [r4, #12]
 80024f2:	059b      	lsls	r3, r3, #22
 80024f4:	d402      	bmi.n	80024fc <_vfiprintf_r+0x34>
 80024f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024f8:	f7ff fe6d 	bl	80021d6 <__retarget_lock_acquire_recursive>
 80024fc:	89a3      	ldrh	r3, [r4, #12]
 80024fe:	071b      	lsls	r3, r3, #28
 8002500:	d502      	bpl.n	8002508 <_vfiprintf_r+0x40>
 8002502:	6923      	ldr	r3, [r4, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d11d      	bne.n	8002544 <_vfiprintf_r+0x7c>
 8002508:	0021      	movs	r1, r4
 800250a:	0030      	movs	r0, r6
 800250c:	f7ff fc1c 	bl	8001d48 <__swsetup_r>
 8002510:	2800      	cmp	r0, #0
 8002512:	d017      	beq.n	8002544 <_vfiprintf_r+0x7c>
 8002514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002516:	07db      	lsls	r3, r3, #31
 8002518:	d50d      	bpl.n	8002536 <_vfiprintf_r+0x6e>
 800251a:	2001      	movs	r0, #1
 800251c:	4240      	negs	r0, r0
 800251e:	b021      	add	sp, #132	; 0x84
 8002520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002522:	4b7f      	ldr	r3, [pc, #508]	; (8002720 <_vfiprintf_r+0x258>)
 8002524:	429c      	cmp	r4, r3
 8002526:	d101      	bne.n	800252c <_vfiprintf_r+0x64>
 8002528:	68b4      	ldr	r4, [r6, #8]
 800252a:	e7de      	b.n	80024ea <_vfiprintf_r+0x22>
 800252c:	4b7d      	ldr	r3, [pc, #500]	; (8002724 <_vfiprintf_r+0x25c>)
 800252e:	429c      	cmp	r4, r3
 8002530:	d1db      	bne.n	80024ea <_vfiprintf_r+0x22>
 8002532:	68f4      	ldr	r4, [r6, #12]
 8002534:	e7d9      	b.n	80024ea <_vfiprintf_r+0x22>
 8002536:	89a3      	ldrh	r3, [r4, #12]
 8002538:	059b      	lsls	r3, r3, #22
 800253a:	d4ee      	bmi.n	800251a <_vfiprintf_r+0x52>
 800253c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800253e:	f7ff fe4b 	bl	80021d8 <__retarget_lock_release_recursive>
 8002542:	e7ea      	b.n	800251a <_vfiprintf_r+0x52>
 8002544:	2300      	movs	r3, #0
 8002546:	ad08      	add	r5, sp, #32
 8002548:	616b      	str	r3, [r5, #20]
 800254a:	3320      	adds	r3, #32
 800254c:	766b      	strb	r3, [r5, #25]
 800254e:	3310      	adds	r3, #16
 8002550:	76ab      	strb	r3, [r5, #26]
 8002552:	9707      	str	r7, [sp, #28]
 8002554:	9f03      	ldr	r7, [sp, #12]
 8002556:	783b      	ldrb	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <_vfiprintf_r+0x98>
 800255c:	2b25      	cmp	r3, #37	; 0x25
 800255e:	d14e      	bne.n	80025fe <_vfiprintf_r+0x136>
 8002560:	9b03      	ldr	r3, [sp, #12]
 8002562:	1afb      	subs	r3, r7, r3
 8002564:	9305      	str	r3, [sp, #20]
 8002566:	9b03      	ldr	r3, [sp, #12]
 8002568:	429f      	cmp	r7, r3
 800256a:	d00d      	beq.n	8002588 <_vfiprintf_r+0xc0>
 800256c:	9b05      	ldr	r3, [sp, #20]
 800256e:	0021      	movs	r1, r4
 8002570:	0030      	movs	r0, r6
 8002572:	9a03      	ldr	r2, [sp, #12]
 8002574:	f7ff ff95 	bl	80024a2 <__sfputs_r>
 8002578:	1c43      	adds	r3, r0, #1
 800257a:	d100      	bne.n	800257e <_vfiprintf_r+0xb6>
 800257c:	e0b5      	b.n	80026ea <_vfiprintf_r+0x222>
 800257e:	696a      	ldr	r2, [r5, #20]
 8002580:	9b05      	ldr	r3, [sp, #20]
 8002582:	4694      	mov	ip, r2
 8002584:	4463      	add	r3, ip
 8002586:	616b      	str	r3, [r5, #20]
 8002588:	783b      	ldrb	r3, [r7, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d100      	bne.n	8002590 <_vfiprintf_r+0xc8>
 800258e:	e0ac      	b.n	80026ea <_vfiprintf_r+0x222>
 8002590:	2201      	movs	r2, #1
 8002592:	1c7b      	adds	r3, r7, #1
 8002594:	9303      	str	r3, [sp, #12]
 8002596:	2300      	movs	r3, #0
 8002598:	4252      	negs	r2, r2
 800259a:	606a      	str	r2, [r5, #4]
 800259c:	a904      	add	r1, sp, #16
 800259e:	3254      	adds	r2, #84	; 0x54
 80025a0:	1852      	adds	r2, r2, r1
 80025a2:	602b      	str	r3, [r5, #0]
 80025a4:	60eb      	str	r3, [r5, #12]
 80025a6:	60ab      	str	r3, [r5, #8]
 80025a8:	7013      	strb	r3, [r2, #0]
 80025aa:	65ab      	str	r3, [r5, #88]	; 0x58
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	2205      	movs	r2, #5
 80025b0:	7819      	ldrb	r1, [r3, #0]
 80025b2:	485d      	ldr	r0, [pc, #372]	; (8002728 <_vfiprintf_r+0x260>)
 80025b4:	f000 fb00 	bl	8002bb8 <memchr>
 80025b8:	9b03      	ldr	r3, [sp, #12]
 80025ba:	1c5f      	adds	r7, r3, #1
 80025bc:	2800      	cmp	r0, #0
 80025be:	d120      	bne.n	8002602 <_vfiprintf_r+0x13a>
 80025c0:	682a      	ldr	r2, [r5, #0]
 80025c2:	06d3      	lsls	r3, r2, #27
 80025c4:	d504      	bpl.n	80025d0 <_vfiprintf_r+0x108>
 80025c6:	2353      	movs	r3, #83	; 0x53
 80025c8:	a904      	add	r1, sp, #16
 80025ca:	185b      	adds	r3, r3, r1
 80025cc:	2120      	movs	r1, #32
 80025ce:	7019      	strb	r1, [r3, #0]
 80025d0:	0713      	lsls	r3, r2, #28
 80025d2:	d504      	bpl.n	80025de <_vfiprintf_r+0x116>
 80025d4:	2353      	movs	r3, #83	; 0x53
 80025d6:	a904      	add	r1, sp, #16
 80025d8:	185b      	adds	r3, r3, r1
 80025da:	212b      	movs	r1, #43	; 0x2b
 80025dc:	7019      	strb	r1, [r3, #0]
 80025de:	9b03      	ldr	r3, [sp, #12]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b2a      	cmp	r3, #42	; 0x2a
 80025e4:	d016      	beq.n	8002614 <_vfiprintf_r+0x14c>
 80025e6:	2100      	movs	r1, #0
 80025e8:	68eb      	ldr	r3, [r5, #12]
 80025ea:	9f03      	ldr	r7, [sp, #12]
 80025ec:	783a      	ldrb	r2, [r7, #0]
 80025ee:	1c78      	adds	r0, r7, #1
 80025f0:	3a30      	subs	r2, #48	; 0x30
 80025f2:	4684      	mov	ip, r0
 80025f4:	2a09      	cmp	r2, #9
 80025f6:	d94f      	bls.n	8002698 <_vfiprintf_r+0x1d0>
 80025f8:	2900      	cmp	r1, #0
 80025fa:	d111      	bne.n	8002620 <_vfiprintf_r+0x158>
 80025fc:	e017      	b.n	800262e <_vfiprintf_r+0x166>
 80025fe:	3701      	adds	r7, #1
 8002600:	e7a9      	b.n	8002556 <_vfiprintf_r+0x8e>
 8002602:	4b49      	ldr	r3, [pc, #292]	; (8002728 <_vfiprintf_r+0x260>)
 8002604:	682a      	ldr	r2, [r5, #0]
 8002606:	1ac0      	subs	r0, r0, r3
 8002608:	2301      	movs	r3, #1
 800260a:	4083      	lsls	r3, r0
 800260c:	4313      	orrs	r3, r2
 800260e:	602b      	str	r3, [r5, #0]
 8002610:	9703      	str	r7, [sp, #12]
 8002612:	e7cb      	b.n	80025ac <_vfiprintf_r+0xe4>
 8002614:	9b07      	ldr	r3, [sp, #28]
 8002616:	1d19      	adds	r1, r3, #4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	9107      	str	r1, [sp, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db01      	blt.n	8002624 <_vfiprintf_r+0x15c>
 8002620:	930b      	str	r3, [sp, #44]	; 0x2c
 8002622:	e004      	b.n	800262e <_vfiprintf_r+0x166>
 8002624:	425b      	negs	r3, r3
 8002626:	60eb      	str	r3, [r5, #12]
 8002628:	2302      	movs	r3, #2
 800262a:	4313      	orrs	r3, r2
 800262c:	602b      	str	r3, [r5, #0]
 800262e:	783b      	ldrb	r3, [r7, #0]
 8002630:	2b2e      	cmp	r3, #46	; 0x2e
 8002632:	d10a      	bne.n	800264a <_vfiprintf_r+0x182>
 8002634:	787b      	ldrb	r3, [r7, #1]
 8002636:	2b2a      	cmp	r3, #42	; 0x2a
 8002638:	d137      	bne.n	80026aa <_vfiprintf_r+0x1e2>
 800263a:	9b07      	ldr	r3, [sp, #28]
 800263c:	3702      	adds	r7, #2
 800263e:	1d1a      	adds	r2, r3, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	9207      	str	r2, [sp, #28]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db2d      	blt.n	80026a4 <_vfiprintf_r+0x1dc>
 8002648:	9309      	str	r3, [sp, #36]	; 0x24
 800264a:	2203      	movs	r2, #3
 800264c:	7839      	ldrb	r1, [r7, #0]
 800264e:	4837      	ldr	r0, [pc, #220]	; (800272c <_vfiprintf_r+0x264>)
 8002650:	f000 fab2 	bl	8002bb8 <memchr>
 8002654:	2800      	cmp	r0, #0
 8002656:	d007      	beq.n	8002668 <_vfiprintf_r+0x1a0>
 8002658:	4b34      	ldr	r3, [pc, #208]	; (800272c <_vfiprintf_r+0x264>)
 800265a:	682a      	ldr	r2, [r5, #0]
 800265c:	1ac0      	subs	r0, r0, r3
 800265e:	2340      	movs	r3, #64	; 0x40
 8002660:	4083      	lsls	r3, r0
 8002662:	4313      	orrs	r3, r2
 8002664:	3701      	adds	r7, #1
 8002666:	602b      	str	r3, [r5, #0]
 8002668:	7839      	ldrb	r1, [r7, #0]
 800266a:	1c7b      	adds	r3, r7, #1
 800266c:	2206      	movs	r2, #6
 800266e:	4830      	ldr	r0, [pc, #192]	; (8002730 <_vfiprintf_r+0x268>)
 8002670:	9303      	str	r3, [sp, #12]
 8002672:	7629      	strb	r1, [r5, #24]
 8002674:	f000 faa0 	bl	8002bb8 <memchr>
 8002678:	2800      	cmp	r0, #0
 800267a:	d045      	beq.n	8002708 <_vfiprintf_r+0x240>
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <_vfiprintf_r+0x26c>)
 800267e:	2b00      	cmp	r3, #0
 8002680:	d127      	bne.n	80026d2 <_vfiprintf_r+0x20a>
 8002682:	2207      	movs	r2, #7
 8002684:	9b07      	ldr	r3, [sp, #28]
 8002686:	3307      	adds	r3, #7
 8002688:	4393      	bics	r3, r2
 800268a:	3308      	adds	r3, #8
 800268c:	9307      	str	r3, [sp, #28]
 800268e:	696b      	ldr	r3, [r5, #20]
 8002690:	9a04      	ldr	r2, [sp, #16]
 8002692:	189b      	adds	r3, r3, r2
 8002694:	616b      	str	r3, [r5, #20]
 8002696:	e75d      	b.n	8002554 <_vfiprintf_r+0x8c>
 8002698:	210a      	movs	r1, #10
 800269a:	434b      	muls	r3, r1
 800269c:	4667      	mov	r7, ip
 800269e:	189b      	adds	r3, r3, r2
 80026a0:	3909      	subs	r1, #9
 80026a2:	e7a3      	b.n	80025ec <_vfiprintf_r+0x124>
 80026a4:	2301      	movs	r3, #1
 80026a6:	425b      	negs	r3, r3
 80026a8:	e7ce      	b.n	8002648 <_vfiprintf_r+0x180>
 80026aa:	2300      	movs	r3, #0
 80026ac:	001a      	movs	r2, r3
 80026ae:	3701      	adds	r7, #1
 80026b0:	606b      	str	r3, [r5, #4]
 80026b2:	7839      	ldrb	r1, [r7, #0]
 80026b4:	1c78      	adds	r0, r7, #1
 80026b6:	3930      	subs	r1, #48	; 0x30
 80026b8:	4684      	mov	ip, r0
 80026ba:	2909      	cmp	r1, #9
 80026bc:	d903      	bls.n	80026c6 <_vfiprintf_r+0x1fe>
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0c3      	beq.n	800264a <_vfiprintf_r+0x182>
 80026c2:	9209      	str	r2, [sp, #36]	; 0x24
 80026c4:	e7c1      	b.n	800264a <_vfiprintf_r+0x182>
 80026c6:	230a      	movs	r3, #10
 80026c8:	435a      	muls	r2, r3
 80026ca:	4667      	mov	r7, ip
 80026cc:	1852      	adds	r2, r2, r1
 80026ce:	3b09      	subs	r3, #9
 80026d0:	e7ef      	b.n	80026b2 <_vfiprintf_r+0x1ea>
 80026d2:	ab07      	add	r3, sp, #28
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	0022      	movs	r2, r4
 80026d8:	0029      	movs	r1, r5
 80026da:	0030      	movs	r0, r6
 80026dc:	4b16      	ldr	r3, [pc, #88]	; (8002738 <_vfiprintf_r+0x270>)
 80026de:	e000      	b.n	80026e2 <_vfiprintf_r+0x21a>
 80026e0:	bf00      	nop
 80026e2:	9004      	str	r0, [sp, #16]
 80026e4:	9b04      	ldr	r3, [sp, #16]
 80026e6:	3301      	adds	r3, #1
 80026e8:	d1d1      	bne.n	800268e <_vfiprintf_r+0x1c6>
 80026ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026ec:	07db      	lsls	r3, r3, #31
 80026ee:	d405      	bmi.n	80026fc <_vfiprintf_r+0x234>
 80026f0:	89a3      	ldrh	r3, [r4, #12]
 80026f2:	059b      	lsls	r3, r3, #22
 80026f4:	d402      	bmi.n	80026fc <_vfiprintf_r+0x234>
 80026f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026f8:	f7ff fd6e 	bl	80021d8 <__retarget_lock_release_recursive>
 80026fc:	89a3      	ldrh	r3, [r4, #12]
 80026fe:	065b      	lsls	r3, r3, #25
 8002700:	d500      	bpl.n	8002704 <_vfiprintf_r+0x23c>
 8002702:	e70a      	b.n	800251a <_vfiprintf_r+0x52>
 8002704:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002706:	e70a      	b.n	800251e <_vfiprintf_r+0x56>
 8002708:	ab07      	add	r3, sp, #28
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	0022      	movs	r2, r4
 800270e:	0029      	movs	r1, r5
 8002710:	0030      	movs	r0, r6
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <_vfiprintf_r+0x270>)
 8002714:	f000 f882 	bl	800281c <_printf_i>
 8002718:	e7e3      	b.n	80026e2 <_vfiprintf_r+0x21a>
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	08002e70 	.word	0x08002e70
 8002720:	08002e90 	.word	0x08002e90
 8002724:	08002e50 	.word	0x08002e50
 8002728:	08002eb0 	.word	0x08002eb0
 800272c:	08002eb6 	.word	0x08002eb6
 8002730:	08002eba 	.word	0x08002eba
 8002734:	00000000 	.word	0x00000000
 8002738:	080024a3 	.word	0x080024a3

0800273c <_printf_common>:
 800273c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800273e:	0015      	movs	r5, r2
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	688a      	ldr	r2, [r1, #8]
 8002744:	690b      	ldr	r3, [r1, #16]
 8002746:	000c      	movs	r4, r1
 8002748:	9000      	str	r0, [sp, #0]
 800274a:	4293      	cmp	r3, r2
 800274c:	da00      	bge.n	8002750 <_printf_common+0x14>
 800274e:	0013      	movs	r3, r2
 8002750:	0022      	movs	r2, r4
 8002752:	602b      	str	r3, [r5, #0]
 8002754:	3243      	adds	r2, #67	; 0x43
 8002756:	7812      	ldrb	r2, [r2, #0]
 8002758:	2a00      	cmp	r2, #0
 800275a:	d001      	beq.n	8002760 <_printf_common+0x24>
 800275c:	3301      	adds	r3, #1
 800275e:	602b      	str	r3, [r5, #0]
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	069b      	lsls	r3, r3, #26
 8002764:	d502      	bpl.n	800276c <_printf_common+0x30>
 8002766:	682b      	ldr	r3, [r5, #0]
 8002768:	3302      	adds	r3, #2
 800276a:	602b      	str	r3, [r5, #0]
 800276c:	6822      	ldr	r2, [r4, #0]
 800276e:	2306      	movs	r3, #6
 8002770:	0017      	movs	r7, r2
 8002772:	401f      	ands	r7, r3
 8002774:	421a      	tst	r2, r3
 8002776:	d027      	beq.n	80027c8 <_printf_common+0x8c>
 8002778:	0023      	movs	r3, r4
 800277a:	3343      	adds	r3, #67	; 0x43
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	1e5a      	subs	r2, r3, #1
 8002780:	4193      	sbcs	r3, r2
 8002782:	6822      	ldr	r2, [r4, #0]
 8002784:	0692      	lsls	r2, r2, #26
 8002786:	d430      	bmi.n	80027ea <_printf_common+0xae>
 8002788:	0022      	movs	r2, r4
 800278a:	9901      	ldr	r1, [sp, #4]
 800278c:	9800      	ldr	r0, [sp, #0]
 800278e:	9e08      	ldr	r6, [sp, #32]
 8002790:	3243      	adds	r2, #67	; 0x43
 8002792:	47b0      	blx	r6
 8002794:	1c43      	adds	r3, r0, #1
 8002796:	d025      	beq.n	80027e4 <_printf_common+0xa8>
 8002798:	2306      	movs	r3, #6
 800279a:	6820      	ldr	r0, [r4, #0]
 800279c:	682a      	ldr	r2, [r5, #0]
 800279e:	68e1      	ldr	r1, [r4, #12]
 80027a0:	2500      	movs	r5, #0
 80027a2:	4003      	ands	r3, r0
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d103      	bne.n	80027b0 <_printf_common+0x74>
 80027a8:	1a8d      	subs	r5, r1, r2
 80027aa:	43eb      	mvns	r3, r5
 80027ac:	17db      	asrs	r3, r3, #31
 80027ae:	401d      	ands	r5, r3
 80027b0:	68a3      	ldr	r3, [r4, #8]
 80027b2:	6922      	ldr	r2, [r4, #16]
 80027b4:	4293      	cmp	r3, r2
 80027b6:	dd01      	ble.n	80027bc <_printf_common+0x80>
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	18ed      	adds	r5, r5, r3
 80027bc:	2700      	movs	r7, #0
 80027be:	42bd      	cmp	r5, r7
 80027c0:	d120      	bne.n	8002804 <_printf_common+0xc8>
 80027c2:	2000      	movs	r0, #0
 80027c4:	e010      	b.n	80027e8 <_printf_common+0xac>
 80027c6:	3701      	adds	r7, #1
 80027c8:	68e3      	ldr	r3, [r4, #12]
 80027ca:	682a      	ldr	r2, [r5, #0]
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	42bb      	cmp	r3, r7
 80027d0:	ddd2      	ble.n	8002778 <_printf_common+0x3c>
 80027d2:	0022      	movs	r2, r4
 80027d4:	2301      	movs	r3, #1
 80027d6:	9901      	ldr	r1, [sp, #4]
 80027d8:	9800      	ldr	r0, [sp, #0]
 80027da:	9e08      	ldr	r6, [sp, #32]
 80027dc:	3219      	adds	r2, #25
 80027de:	47b0      	blx	r6
 80027e0:	1c43      	adds	r3, r0, #1
 80027e2:	d1f0      	bne.n	80027c6 <_printf_common+0x8a>
 80027e4:	2001      	movs	r0, #1
 80027e6:	4240      	negs	r0, r0
 80027e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027ea:	2030      	movs	r0, #48	; 0x30
 80027ec:	18e1      	adds	r1, r4, r3
 80027ee:	3143      	adds	r1, #67	; 0x43
 80027f0:	7008      	strb	r0, [r1, #0]
 80027f2:	0021      	movs	r1, r4
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	3145      	adds	r1, #69	; 0x45
 80027f8:	7809      	ldrb	r1, [r1, #0]
 80027fa:	18a2      	adds	r2, r4, r2
 80027fc:	3243      	adds	r2, #67	; 0x43
 80027fe:	3302      	adds	r3, #2
 8002800:	7011      	strb	r1, [r2, #0]
 8002802:	e7c1      	b.n	8002788 <_printf_common+0x4c>
 8002804:	0022      	movs	r2, r4
 8002806:	2301      	movs	r3, #1
 8002808:	9901      	ldr	r1, [sp, #4]
 800280a:	9800      	ldr	r0, [sp, #0]
 800280c:	9e08      	ldr	r6, [sp, #32]
 800280e:	321a      	adds	r2, #26
 8002810:	47b0      	blx	r6
 8002812:	1c43      	adds	r3, r0, #1
 8002814:	d0e6      	beq.n	80027e4 <_printf_common+0xa8>
 8002816:	3701      	adds	r7, #1
 8002818:	e7d1      	b.n	80027be <_printf_common+0x82>
	...

0800281c <_printf_i>:
 800281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281e:	b08b      	sub	sp, #44	; 0x2c
 8002820:	9206      	str	r2, [sp, #24]
 8002822:	000a      	movs	r2, r1
 8002824:	3243      	adds	r2, #67	; 0x43
 8002826:	9307      	str	r3, [sp, #28]
 8002828:	9005      	str	r0, [sp, #20]
 800282a:	9204      	str	r2, [sp, #16]
 800282c:	7e0a      	ldrb	r2, [r1, #24]
 800282e:	000c      	movs	r4, r1
 8002830:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002832:	2a78      	cmp	r2, #120	; 0x78
 8002834:	d807      	bhi.n	8002846 <_printf_i+0x2a>
 8002836:	2a62      	cmp	r2, #98	; 0x62
 8002838:	d809      	bhi.n	800284e <_printf_i+0x32>
 800283a:	2a00      	cmp	r2, #0
 800283c:	d100      	bne.n	8002840 <_printf_i+0x24>
 800283e:	e0c1      	b.n	80029c4 <_printf_i+0x1a8>
 8002840:	2a58      	cmp	r2, #88	; 0x58
 8002842:	d100      	bne.n	8002846 <_printf_i+0x2a>
 8002844:	e08c      	b.n	8002960 <_printf_i+0x144>
 8002846:	0026      	movs	r6, r4
 8002848:	3642      	adds	r6, #66	; 0x42
 800284a:	7032      	strb	r2, [r6, #0]
 800284c:	e022      	b.n	8002894 <_printf_i+0x78>
 800284e:	0010      	movs	r0, r2
 8002850:	3863      	subs	r0, #99	; 0x63
 8002852:	2815      	cmp	r0, #21
 8002854:	d8f7      	bhi.n	8002846 <_printf_i+0x2a>
 8002856:	f7fd fc55 	bl	8000104 <__gnu_thumb1_case_shi>
 800285a:	0016      	.short	0x0016
 800285c:	fff6001f 	.word	0xfff6001f
 8002860:	fff6fff6 	.word	0xfff6fff6
 8002864:	001ffff6 	.word	0x001ffff6
 8002868:	fff6fff6 	.word	0xfff6fff6
 800286c:	fff6fff6 	.word	0xfff6fff6
 8002870:	003600a8 	.word	0x003600a8
 8002874:	fff6009a 	.word	0xfff6009a
 8002878:	00b9fff6 	.word	0x00b9fff6
 800287c:	0036fff6 	.word	0x0036fff6
 8002880:	fff6fff6 	.word	0xfff6fff6
 8002884:	009e      	.short	0x009e
 8002886:	0026      	movs	r6, r4
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	3642      	adds	r6, #66	; 0x42
 800288c:	1d11      	adds	r1, r2, #4
 800288e:	6019      	str	r1, [r3, #0]
 8002890:	6813      	ldr	r3, [r2, #0]
 8002892:	7033      	strb	r3, [r6, #0]
 8002894:	2301      	movs	r3, #1
 8002896:	e0a7      	b.n	80029e8 <_printf_i+0x1cc>
 8002898:	6808      	ldr	r0, [r1, #0]
 800289a:	6819      	ldr	r1, [r3, #0]
 800289c:	1d0a      	adds	r2, r1, #4
 800289e:	0605      	lsls	r5, r0, #24
 80028a0:	d50b      	bpl.n	80028ba <_printf_i+0x9e>
 80028a2:	680d      	ldr	r5, [r1, #0]
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	2d00      	cmp	r5, #0
 80028a8:	da03      	bge.n	80028b2 <_printf_i+0x96>
 80028aa:	232d      	movs	r3, #45	; 0x2d
 80028ac:	9a04      	ldr	r2, [sp, #16]
 80028ae:	426d      	negs	r5, r5
 80028b0:	7013      	strb	r3, [r2, #0]
 80028b2:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <_printf_i+0x21c>)
 80028b4:	270a      	movs	r7, #10
 80028b6:	9303      	str	r3, [sp, #12]
 80028b8:	e01b      	b.n	80028f2 <_printf_i+0xd6>
 80028ba:	680d      	ldr	r5, [r1, #0]
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	0641      	lsls	r1, r0, #25
 80028c0:	d5f1      	bpl.n	80028a6 <_printf_i+0x8a>
 80028c2:	b22d      	sxth	r5, r5
 80028c4:	e7ef      	b.n	80028a6 <_printf_i+0x8a>
 80028c6:	680d      	ldr	r5, [r1, #0]
 80028c8:	6819      	ldr	r1, [r3, #0]
 80028ca:	1d08      	adds	r0, r1, #4
 80028cc:	6018      	str	r0, [r3, #0]
 80028ce:	062e      	lsls	r6, r5, #24
 80028d0:	d501      	bpl.n	80028d6 <_printf_i+0xba>
 80028d2:	680d      	ldr	r5, [r1, #0]
 80028d4:	e003      	b.n	80028de <_printf_i+0xc2>
 80028d6:	066d      	lsls	r5, r5, #25
 80028d8:	d5fb      	bpl.n	80028d2 <_printf_i+0xb6>
 80028da:	680d      	ldr	r5, [r1, #0]
 80028dc:	b2ad      	uxth	r5, r5
 80028de:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <_printf_i+0x21c>)
 80028e0:	2708      	movs	r7, #8
 80028e2:	9303      	str	r3, [sp, #12]
 80028e4:	2a6f      	cmp	r2, #111	; 0x6f
 80028e6:	d000      	beq.n	80028ea <_printf_i+0xce>
 80028e8:	3702      	adds	r7, #2
 80028ea:	0023      	movs	r3, r4
 80028ec:	2200      	movs	r2, #0
 80028ee:	3343      	adds	r3, #67	; 0x43
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	6863      	ldr	r3, [r4, #4]
 80028f4:	60a3      	str	r3, [r4, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db03      	blt.n	8002902 <_printf_i+0xe6>
 80028fa:	2204      	movs	r2, #4
 80028fc:	6821      	ldr	r1, [r4, #0]
 80028fe:	4391      	bics	r1, r2
 8002900:	6021      	str	r1, [r4, #0]
 8002902:	2d00      	cmp	r5, #0
 8002904:	d102      	bne.n	800290c <_printf_i+0xf0>
 8002906:	9e04      	ldr	r6, [sp, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00c      	beq.n	8002926 <_printf_i+0x10a>
 800290c:	9e04      	ldr	r6, [sp, #16]
 800290e:	0028      	movs	r0, r5
 8002910:	0039      	movs	r1, r7
 8002912:	f7fd fc87 	bl	8000224 <__aeabi_uidivmod>
 8002916:	9b03      	ldr	r3, [sp, #12]
 8002918:	3e01      	subs	r6, #1
 800291a:	5c5b      	ldrb	r3, [r3, r1]
 800291c:	7033      	strb	r3, [r6, #0]
 800291e:	002b      	movs	r3, r5
 8002920:	0005      	movs	r5, r0
 8002922:	429f      	cmp	r7, r3
 8002924:	d9f3      	bls.n	800290e <_printf_i+0xf2>
 8002926:	2f08      	cmp	r7, #8
 8002928:	d109      	bne.n	800293e <_printf_i+0x122>
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	07db      	lsls	r3, r3, #31
 800292e:	d506      	bpl.n	800293e <_printf_i+0x122>
 8002930:	6863      	ldr	r3, [r4, #4]
 8002932:	6922      	ldr	r2, [r4, #16]
 8002934:	4293      	cmp	r3, r2
 8002936:	dc02      	bgt.n	800293e <_printf_i+0x122>
 8002938:	2330      	movs	r3, #48	; 0x30
 800293a:	3e01      	subs	r6, #1
 800293c:	7033      	strb	r3, [r6, #0]
 800293e:	9b04      	ldr	r3, [sp, #16]
 8002940:	1b9b      	subs	r3, r3, r6
 8002942:	6123      	str	r3, [r4, #16]
 8002944:	9b07      	ldr	r3, [sp, #28]
 8002946:	0021      	movs	r1, r4
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	9805      	ldr	r0, [sp, #20]
 800294c:	9b06      	ldr	r3, [sp, #24]
 800294e:	aa09      	add	r2, sp, #36	; 0x24
 8002950:	f7ff fef4 	bl	800273c <_printf_common>
 8002954:	1c43      	adds	r3, r0, #1
 8002956:	d14c      	bne.n	80029f2 <_printf_i+0x1d6>
 8002958:	2001      	movs	r0, #1
 800295a:	4240      	negs	r0, r0
 800295c:	b00b      	add	sp, #44	; 0x2c
 800295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002960:	3145      	adds	r1, #69	; 0x45
 8002962:	700a      	strb	r2, [r1, #0]
 8002964:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <_printf_i+0x21c>)
 8002966:	9203      	str	r2, [sp, #12]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	6821      	ldr	r1, [r4, #0]
 800296c:	ca20      	ldmia	r2!, {r5}
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	0608      	lsls	r0, r1, #24
 8002972:	d516      	bpl.n	80029a2 <_printf_i+0x186>
 8002974:	07cb      	lsls	r3, r1, #31
 8002976:	d502      	bpl.n	800297e <_printf_i+0x162>
 8002978:	2320      	movs	r3, #32
 800297a:	4319      	orrs	r1, r3
 800297c:	6021      	str	r1, [r4, #0]
 800297e:	2710      	movs	r7, #16
 8002980:	2d00      	cmp	r5, #0
 8002982:	d1b2      	bne.n	80028ea <_printf_i+0xce>
 8002984:	2320      	movs	r3, #32
 8002986:	6822      	ldr	r2, [r4, #0]
 8002988:	439a      	bics	r2, r3
 800298a:	6022      	str	r2, [r4, #0]
 800298c:	e7ad      	b.n	80028ea <_printf_i+0xce>
 800298e:	2220      	movs	r2, #32
 8002990:	6809      	ldr	r1, [r1, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	6022      	str	r2, [r4, #0]
 8002996:	0022      	movs	r2, r4
 8002998:	2178      	movs	r1, #120	; 0x78
 800299a:	3245      	adds	r2, #69	; 0x45
 800299c:	7011      	strb	r1, [r2, #0]
 800299e:	4a27      	ldr	r2, [pc, #156]	; (8002a3c <_printf_i+0x220>)
 80029a0:	e7e1      	b.n	8002966 <_printf_i+0x14a>
 80029a2:	0648      	lsls	r0, r1, #25
 80029a4:	d5e6      	bpl.n	8002974 <_printf_i+0x158>
 80029a6:	b2ad      	uxth	r5, r5
 80029a8:	e7e4      	b.n	8002974 <_printf_i+0x158>
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	680d      	ldr	r5, [r1, #0]
 80029ae:	1d10      	adds	r0, r2, #4
 80029b0:	6949      	ldr	r1, [r1, #20]
 80029b2:	6018      	str	r0, [r3, #0]
 80029b4:	6813      	ldr	r3, [r2, #0]
 80029b6:	062e      	lsls	r6, r5, #24
 80029b8:	d501      	bpl.n	80029be <_printf_i+0x1a2>
 80029ba:	6019      	str	r1, [r3, #0]
 80029bc:	e002      	b.n	80029c4 <_printf_i+0x1a8>
 80029be:	066d      	lsls	r5, r5, #25
 80029c0:	d5fb      	bpl.n	80029ba <_printf_i+0x19e>
 80029c2:	8019      	strh	r1, [r3, #0]
 80029c4:	2300      	movs	r3, #0
 80029c6:	9e04      	ldr	r6, [sp, #16]
 80029c8:	6123      	str	r3, [r4, #16]
 80029ca:	e7bb      	b.n	8002944 <_printf_i+0x128>
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	1d11      	adds	r1, r2, #4
 80029d0:	6019      	str	r1, [r3, #0]
 80029d2:	6816      	ldr	r6, [r2, #0]
 80029d4:	2100      	movs	r1, #0
 80029d6:	0030      	movs	r0, r6
 80029d8:	6862      	ldr	r2, [r4, #4]
 80029da:	f000 f8ed 	bl	8002bb8 <memchr>
 80029de:	2800      	cmp	r0, #0
 80029e0:	d001      	beq.n	80029e6 <_printf_i+0x1ca>
 80029e2:	1b80      	subs	r0, r0, r6
 80029e4:	6060      	str	r0, [r4, #4]
 80029e6:	6863      	ldr	r3, [r4, #4]
 80029e8:	6123      	str	r3, [r4, #16]
 80029ea:	2300      	movs	r3, #0
 80029ec:	9a04      	ldr	r2, [sp, #16]
 80029ee:	7013      	strb	r3, [r2, #0]
 80029f0:	e7a8      	b.n	8002944 <_printf_i+0x128>
 80029f2:	6923      	ldr	r3, [r4, #16]
 80029f4:	0032      	movs	r2, r6
 80029f6:	9906      	ldr	r1, [sp, #24]
 80029f8:	9805      	ldr	r0, [sp, #20]
 80029fa:	9d07      	ldr	r5, [sp, #28]
 80029fc:	47a8      	blx	r5
 80029fe:	1c43      	adds	r3, r0, #1
 8002a00:	d0aa      	beq.n	8002958 <_printf_i+0x13c>
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	079b      	lsls	r3, r3, #30
 8002a06:	d415      	bmi.n	8002a34 <_printf_i+0x218>
 8002a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a0a:	68e0      	ldr	r0, [r4, #12]
 8002a0c:	4298      	cmp	r0, r3
 8002a0e:	daa5      	bge.n	800295c <_printf_i+0x140>
 8002a10:	0018      	movs	r0, r3
 8002a12:	e7a3      	b.n	800295c <_printf_i+0x140>
 8002a14:	0022      	movs	r2, r4
 8002a16:	2301      	movs	r3, #1
 8002a18:	9906      	ldr	r1, [sp, #24]
 8002a1a:	9805      	ldr	r0, [sp, #20]
 8002a1c:	9e07      	ldr	r6, [sp, #28]
 8002a1e:	3219      	adds	r2, #25
 8002a20:	47b0      	blx	r6
 8002a22:	1c43      	adds	r3, r0, #1
 8002a24:	d098      	beq.n	8002958 <_printf_i+0x13c>
 8002a26:	3501      	adds	r5, #1
 8002a28:	68e3      	ldr	r3, [r4, #12]
 8002a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	42ab      	cmp	r3, r5
 8002a30:	dcf0      	bgt.n	8002a14 <_printf_i+0x1f8>
 8002a32:	e7e9      	b.n	8002a08 <_printf_i+0x1ec>
 8002a34:	2500      	movs	r5, #0
 8002a36:	e7f7      	b.n	8002a28 <_printf_i+0x20c>
 8002a38:	08002ec1 	.word	0x08002ec1
 8002a3c:	08002ed2 	.word	0x08002ed2

08002a40 <_sbrk_r>:
 8002a40:	2300      	movs	r3, #0
 8002a42:	b570      	push	{r4, r5, r6, lr}
 8002a44:	4d06      	ldr	r5, [pc, #24]	; (8002a60 <_sbrk_r+0x20>)
 8002a46:	0004      	movs	r4, r0
 8002a48:	0008      	movs	r0, r1
 8002a4a:	602b      	str	r3, [r5, #0]
 8002a4c:	f7fe fa22 	bl	8000e94 <_sbrk>
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	d103      	bne.n	8002a5c <_sbrk_r+0x1c>
 8002a54:	682b      	ldr	r3, [r5, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d000      	beq.n	8002a5c <_sbrk_r+0x1c>
 8002a5a:	6023      	str	r3, [r4, #0]
 8002a5c:	bd70      	pop	{r4, r5, r6, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	20000a08 	.word	0x20000a08

08002a64 <__sread>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	000c      	movs	r4, r1
 8002a68:	250e      	movs	r5, #14
 8002a6a:	5f49      	ldrsh	r1, [r1, r5]
 8002a6c:	f000 f8c0 	bl	8002bf0 <_read_r>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	db03      	blt.n	8002a7c <__sread+0x18>
 8002a74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a76:	181b      	adds	r3, r3, r0
 8002a78:	6563      	str	r3, [r4, #84]	; 0x54
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
 8002a7c:	89a3      	ldrh	r3, [r4, #12]
 8002a7e:	4a02      	ldr	r2, [pc, #8]	; (8002a88 <__sread+0x24>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	81a3      	strh	r3, [r4, #12]
 8002a84:	e7f9      	b.n	8002a7a <__sread+0x16>
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	ffffefff 	.word	0xffffefff

08002a8c <__swrite>:
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	001f      	movs	r7, r3
 8002a90:	898b      	ldrh	r3, [r1, #12]
 8002a92:	0005      	movs	r5, r0
 8002a94:	000c      	movs	r4, r1
 8002a96:	0016      	movs	r6, r2
 8002a98:	05db      	lsls	r3, r3, #23
 8002a9a:	d505      	bpl.n	8002aa8 <__swrite+0x1c>
 8002a9c:	230e      	movs	r3, #14
 8002a9e:	5ec9      	ldrsh	r1, [r1, r3]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	f000 f874 	bl	8002b90 <_lseek_r>
 8002aa8:	89a3      	ldrh	r3, [r4, #12]
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <__swrite+0x34>)
 8002aac:	0028      	movs	r0, r5
 8002aae:	4013      	ands	r3, r2
 8002ab0:	81a3      	strh	r3, [r4, #12]
 8002ab2:	0032      	movs	r2, r6
 8002ab4:	230e      	movs	r3, #14
 8002ab6:	5ee1      	ldrsh	r1, [r4, r3]
 8002ab8:	003b      	movs	r3, r7
 8002aba:	f000 f81f 	bl	8002afc <_write_r>
 8002abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac0:	ffffefff 	.word	0xffffefff

08002ac4 <__sseek>:
 8002ac4:	b570      	push	{r4, r5, r6, lr}
 8002ac6:	000c      	movs	r4, r1
 8002ac8:	250e      	movs	r5, #14
 8002aca:	5f49      	ldrsh	r1, [r1, r5]
 8002acc:	f000 f860 	bl	8002b90 <_lseek_r>
 8002ad0:	89a3      	ldrh	r3, [r4, #12]
 8002ad2:	1c42      	adds	r2, r0, #1
 8002ad4:	d103      	bne.n	8002ade <__sseek+0x1a>
 8002ad6:	4a05      	ldr	r2, [pc, #20]	; (8002aec <__sseek+0x28>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	81a3      	strh	r3, [r4, #12]
 8002adc:	bd70      	pop	{r4, r5, r6, pc}
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	0152      	lsls	r2, r2, #5
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	81a3      	strh	r3, [r4, #12]
 8002ae6:	6560      	str	r0, [r4, #84]	; 0x54
 8002ae8:	e7f8      	b.n	8002adc <__sseek+0x18>
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	ffffefff 	.word	0xffffefff

08002af0 <__sclose>:
 8002af0:	b510      	push	{r4, lr}
 8002af2:	230e      	movs	r3, #14
 8002af4:	5ec9      	ldrsh	r1, [r1, r3]
 8002af6:	f000 f815 	bl	8002b24 <_close_r>
 8002afa:	bd10      	pop	{r4, pc}

08002afc <_write_r>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	0004      	movs	r4, r0
 8002b00:	0008      	movs	r0, r1
 8002b02:	0011      	movs	r1, r2
 8002b04:	001a      	movs	r2, r3
 8002b06:	2300      	movs	r3, #0
 8002b08:	4d05      	ldr	r5, [pc, #20]	; (8002b20 <_write_r+0x24>)
 8002b0a:	602b      	str	r3, [r5, #0]
 8002b0c:	f7fe f97a 	bl	8000e04 <_write>
 8002b10:	1c43      	adds	r3, r0, #1
 8002b12:	d103      	bne.n	8002b1c <_write_r+0x20>
 8002b14:	682b      	ldr	r3, [r5, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d000      	beq.n	8002b1c <_write_r+0x20>
 8002b1a:	6023      	str	r3, [r4, #0]
 8002b1c:	bd70      	pop	{r4, r5, r6, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	20000a08 	.word	0x20000a08

08002b24 <_close_r>:
 8002b24:	2300      	movs	r3, #0
 8002b26:	b570      	push	{r4, r5, r6, lr}
 8002b28:	4d06      	ldr	r5, [pc, #24]	; (8002b44 <_close_r+0x20>)
 8002b2a:	0004      	movs	r4, r0
 8002b2c:	0008      	movs	r0, r1
 8002b2e:	602b      	str	r3, [r5, #0]
 8002b30:	f7fe f984 	bl	8000e3c <_close>
 8002b34:	1c43      	adds	r3, r0, #1
 8002b36:	d103      	bne.n	8002b40 <_close_r+0x1c>
 8002b38:	682b      	ldr	r3, [r5, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d000      	beq.n	8002b40 <_close_r+0x1c>
 8002b3e:	6023      	str	r3, [r4, #0]
 8002b40:	bd70      	pop	{r4, r5, r6, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	20000a08 	.word	0x20000a08

08002b48 <_fstat_r>:
 8002b48:	2300      	movs	r3, #0
 8002b4a:	b570      	push	{r4, r5, r6, lr}
 8002b4c:	4d06      	ldr	r5, [pc, #24]	; (8002b68 <_fstat_r+0x20>)
 8002b4e:	0004      	movs	r4, r0
 8002b50:	0008      	movs	r0, r1
 8002b52:	0011      	movs	r1, r2
 8002b54:	602b      	str	r3, [r5, #0]
 8002b56:	f7fe f97b 	bl	8000e50 <_fstat>
 8002b5a:	1c43      	adds	r3, r0, #1
 8002b5c:	d103      	bne.n	8002b66 <_fstat_r+0x1e>
 8002b5e:	682b      	ldr	r3, [r5, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d000      	beq.n	8002b66 <_fstat_r+0x1e>
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	bd70      	pop	{r4, r5, r6, pc}
 8002b68:	20000a08 	.word	0x20000a08

08002b6c <_isatty_r>:
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	b570      	push	{r4, r5, r6, lr}
 8002b70:	4d06      	ldr	r5, [pc, #24]	; (8002b8c <_isatty_r+0x20>)
 8002b72:	0004      	movs	r4, r0
 8002b74:	0008      	movs	r0, r1
 8002b76:	602b      	str	r3, [r5, #0]
 8002b78:	f7fe f978 	bl	8000e6c <_isatty>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d103      	bne.n	8002b88 <_isatty_r+0x1c>
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d000      	beq.n	8002b88 <_isatty_r+0x1c>
 8002b86:	6023      	str	r3, [r4, #0]
 8002b88:	bd70      	pop	{r4, r5, r6, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	20000a08 	.word	0x20000a08

08002b90 <_lseek_r>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	0004      	movs	r4, r0
 8002b94:	0008      	movs	r0, r1
 8002b96:	0011      	movs	r1, r2
 8002b98:	001a      	movs	r2, r3
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	4d05      	ldr	r5, [pc, #20]	; (8002bb4 <_lseek_r+0x24>)
 8002b9e:	602b      	str	r3, [r5, #0]
 8002ba0:	f7fe f96d 	bl	8000e7e <_lseek>
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	d103      	bne.n	8002bb0 <_lseek_r+0x20>
 8002ba8:	682b      	ldr	r3, [r5, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d000      	beq.n	8002bb0 <_lseek_r+0x20>
 8002bae:	6023      	str	r3, [r4, #0]
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	20000a08 	.word	0x20000a08

08002bb8 <memchr>:
 8002bb8:	b2c9      	uxtb	r1, r1
 8002bba:	1882      	adds	r2, r0, r2
 8002bbc:	4290      	cmp	r0, r2
 8002bbe:	d101      	bne.n	8002bc4 <memchr+0xc>
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	4770      	bx	lr
 8002bc4:	7803      	ldrb	r3, [r0, #0]
 8002bc6:	428b      	cmp	r3, r1
 8002bc8:	d0fb      	beq.n	8002bc2 <memchr+0xa>
 8002bca:	3001      	adds	r0, #1
 8002bcc:	e7f6      	b.n	8002bbc <memchr+0x4>
	...

08002bd0 <__malloc_lock>:
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4802      	ldr	r0, [pc, #8]	; (8002bdc <__malloc_lock+0xc>)
 8002bd4:	f7ff faff 	bl	80021d6 <__retarget_lock_acquire_recursive>
 8002bd8:	bd10      	pop	{r4, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	200009fd 	.word	0x200009fd

08002be0 <__malloc_unlock>:
 8002be0:	b510      	push	{r4, lr}
 8002be2:	4802      	ldr	r0, [pc, #8]	; (8002bec <__malloc_unlock+0xc>)
 8002be4:	f7ff faf8 	bl	80021d8 <__retarget_lock_release_recursive>
 8002be8:	bd10      	pop	{r4, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	200009fd 	.word	0x200009fd

08002bf0 <_read_r>:
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	0004      	movs	r4, r0
 8002bf4:	0008      	movs	r0, r1
 8002bf6:	0011      	movs	r1, r2
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	4d05      	ldr	r5, [pc, #20]	; (8002c14 <_read_r+0x24>)
 8002bfe:	602b      	str	r3, [r5, #0]
 8002c00:	f7fe f8e3 	bl	8000dca <_read>
 8002c04:	1c43      	adds	r3, r0, #1
 8002c06:	d103      	bne.n	8002c10 <_read_r+0x20>
 8002c08:	682b      	ldr	r3, [r5, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d000      	beq.n	8002c10 <_read_r+0x20>
 8002c0e:	6023      	str	r3, [r4, #0]
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	20000a08 	.word	0x20000a08

08002c18 <_init>:
 8002c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1e:	bc08      	pop	{r3}
 8002c20:	469e      	mov	lr, r3
 8002c22:	4770      	bx	lr

08002c24 <_fini>:
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2a:	bc08      	pop	{r3}
 8002c2c:	469e      	mov	lr, r3
 8002c2e:	4770      	bx	lr
