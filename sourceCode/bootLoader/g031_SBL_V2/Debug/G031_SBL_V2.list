
G031_SBL_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000194c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08001a08  08001a08  00011a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c1c  08001c1c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001c1c  08001c1c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c1c  08001c1c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c1c  08001c1c  00011c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c20  08001c20  00011c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  20000008  08001c2c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000994  08001c2c  00020994  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002cbd  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010d7  00000000  00000000  00022ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000318  00000000  00000000  00023dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000270  00000000  00000000  000240e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e4d7  00000000  00000000  00024350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004b75  00000000  00000000  00032827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004a34b  00000000  00000000  0003739c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000816e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008e4  00000000  00000000  00081738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080019f0 	.word	0x080019f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	080019f0 	.word	0x080019f0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <FLASH_PagesMask>:
/**
 * @brief  Calculate the number of pages
 * @param  Size: The image size
 * @retval The number of pages
 */
uint32_t FLASH_PagesMask(__IO uint32_t Size) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	uint32_t pagenumber = 0x0;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
	uint32_t size = Size;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	60bb      	str	r3, [r7, #8]

	if ((size % PAGE_SIZE) != 0) {
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	055b      	lsls	r3, r3, #21
 8000230:	0d5b      	lsrs	r3, r3, #21
 8000232:	d004      	beq.n	800023e <FLASH_PagesMask+0x22>
		pagenumber = (size / PAGE_SIZE) + 1;
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	0adb      	lsrs	r3, r3, #11
 8000238:	3301      	adds	r3, #1
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	e002      	b.n	8000244 <FLASH_PagesMask+0x28>
	} else {
		pagenumber = size / PAGE_SIZE;
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	0adb      	lsrs	r3, r3, #11
 8000242:	60fb      	str	r3, [r7, #12]
	}
	return pagenumber;
 8000244:	68fb      	ldr	r3, [r7, #12]

}
 8000246:	0018      	movs	r0, r3
 8000248:	46bd      	mov	sp, r7
 800024a:	b004      	add	sp, #16
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <flash_verify_image>:
 * return value:
 * 	-1: No execute image
 * 	-2: No secondary image, primary image checksum failed
 */
#define FLASH_DEBUG 0
int flash_verify_image(SKS_BOOT_INFO *boot_info) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	uint32_t crc_primary = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
	flash_read_uboot_info(boot_info);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	0018      	movs	r0, r3
 8000260:	f000 f81c 	bl	800029c <flash_read_uboot_info>
	CRC_ResetDR();
 8000264:	f000 f900 	bl	8000468 <CRC_ResetDR>
	crc_primary = CRC_CalcBlockCRC((uint32_t) BOOT_PRIMARY_ADDRESS,
			(uint32_t) (boot_info->PrimarySize / 4) + 1);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	089b      	lsrs	r3, r3, #2
	crc_primary = CRC_CalcBlockCRC((uint32_t) BOOT_PRIMARY_ADDRESS,
 800026e:	3301      	adds	r3, #1
 8000270:	4a09      	ldr	r2, [pc, #36]	; (8000298 <flash_verify_image+0x48>)
 8000272:	0019      	movs	r1, r3
 8000274:	0010      	movs	r0, r2
 8000276:	f000 f901 	bl	800047c <CRC_CalcBlockCRC>
 800027a:	0003      	movs	r3, r0
 800027c:	60fb      	str	r3, [r7, #12]
	if (crc_primary != boot_info->PrimaryCRC) {
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	429a      	cmp	r2, r3
 8000286:	d001      	beq.n	800028c <flash_verify_image+0x3c>
		return 0; //Invalid PRIMARY's  CRC
 8000288:	2300      	movs	r3, #0
 800028a:	e000      	b.n	800028e <flash_verify_image+0x3e>
	}
	return 1;
 800028c:	2301      	movs	r3, #1
}
 800028e:	0018      	movs	r0, r3
 8000290:	46bd      	mov	sp, r7
 8000292:	b004      	add	sp, #16
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	08002800 	.word	0x08002800

0800029c <flash_read_uboot_info>:

void flash_read_uboot_info(SKS_BOOT_INFO *boot_info) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]
	uint32_t *pInt = UBOOT_CONFIG_ADDRESS;
 80002a8:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <flash_read_uboot_info+0x44>)
 80002aa:	613b      	str	r3, [r7, #16]
	uint32_t *pDest = boot_info;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < sizeof(SKS_BOOT_INFO) / 4; i++) {
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]
 80002b4:	e00c      	b.n	80002d0 <flash_read_uboot_info+0x34>
		//flash clear flag
	/*	FLASH_ClearFlag(
				FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR
						| FLASH_FLAG_WRPERR);*/
		pDest[i] = pInt[i];
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	693a      	ldr	r2, [r7, #16]
 80002bc:	18d2      	adds	r2, r2, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	68f9      	ldr	r1, [r7, #12]
 80002c4:	18cb      	adds	r3, r1, r3
 80002c6:	6812      	ldr	r2, [r2, #0]
 80002c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < sizeof(SKS_BOOT_INFO) / 4; i++) {
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	3301      	adds	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	2b0f      	cmp	r3, #15
 80002d4:	d9ef      	bls.n	80002b6 <flash_read_uboot_info+0x1a>

	}
}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	46c0      	nop			; (mov r8, r8)
 80002da:	46bd      	mov	sp, r7
 80002dc:	b006      	add	sp, #24
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	0800f000 	.word	0x0800f000

080002e4 <flash_write_uboot_info>:

void flash_write_uboot_info(SKS_BOOT_INFO *boot_info) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	volatile FLASH_Status FLASHStatus = FLASH_COMPLETE;
 80002ec:	230f      	movs	r3, #15
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	2204      	movs	r2, #4
 80002f2:	701a      	strb	r2, [r3, #0]
		//int *pInt = (int *)UBOOT_CONFIG_ADDRESS;
		FLASH->SR &= ~(FLASH_SR_EOP|FLASH_SR_WRPERR|FLASH_SR_PGAERR);
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <flash_write_uboot_info+0x6c>)
 80002f6:	691a      	ldr	r2, [r3, #16]
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <flash_write_uboot_info+0x6c>)
 80002fa:	2131      	movs	r1, #49	; 0x31
 80002fc:	438a      	bics	r2, r1
 80002fe:	611a      	str	r2, [r3, #16]
		FLASH_ErasePage(UBOOT_CONFIG_ADDRESS);  //CONFIG_MAX_2K
 8000300:	4b14      	ldr	r3, [pc, #80]	; (8000354 <flash_write_uboot_info+0x70>)
 8000302:	0018      	movs	r0, r3
 8000304:	f000 f93c 	bl	8000580 <FLASH_ErasePage>

		uint64_t *pSource = (uint64_t*) boot_info;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	617b      	str	r3, [r7, #20]
		//boot_info->BootVersion = UBOOT_VERSION;
		for (int i = 0; i <  sizeof(SKS_BOOT_INFO) / 8; i++,pSource++)
 800030c:	2300      	movs	r3, #0
 800030e:	613b      	str	r3, [r7, #16]
 8000310:	e016      	b.n	8000340 <flash_write_uboot_info+0x5c>
			FLASHStatus = FLASH_ProgramDoubleWord(UBOOT_CONFIG_ADDRESS + i * 8, *pSource);
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	4a10      	ldr	r2, [pc, #64]	; (8000358 <flash_write_uboot_info+0x74>)
 8000316:	4694      	mov	ip, r2
 8000318:	4463      	add	r3, ip
 800031a:	00db      	lsls	r3, r3, #3
 800031c:	0019      	movs	r1, r3
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	0008      	movs	r0, r1
 8000326:	f000 f97f 	bl	8000628 <FLASH_ProgramDoubleWord>
 800032a:	0003      	movs	r3, r0
 800032c:	001a      	movs	r2, r3
 800032e:	230f      	movs	r3, #15
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i <  sizeof(SKS_BOOT_INFO) / 8; i++,pSource++)
 8000334:	693b      	ldr	r3, [r7, #16]
 8000336:	3301      	adds	r3, #1
 8000338:	613b      	str	r3, [r7, #16]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	3308      	adds	r3, #8
 800033e:	617b      	str	r3, [r7, #20]
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	2b07      	cmp	r3, #7
 8000344:	d9e5      	bls.n	8000312 <flash_write_uboot_info+0x2e>
}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	b006      	add	sp, #24
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40022000 	.word	0x40022000
 8000354:	0800f000 	.word	0x0800f000
 8000358:	01001e00 	.word	0x01001e00

0800035c <SerialDownload>:
/**
 * @brief  Download a file via serial port
 * @param  None
 * @retval None
 */
void SerialDownload(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
	int32_t Size = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]

	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
#define REPORT_POINTER_ADDRESS			0x807F000  //Page 254
	//FLASH_ErasePage(REPORT_POINTER_ADDRESS);
	xprintf(
 8000366:	4b2f      	ldr	r3, [pc, #188]	; (8000424 <SerialDownload+0xc8>)
 8000368:	0018      	movs	r0, r3
 800036a:	f001 f839 	bl	80013e0 <xprintf>
			"\r\nWaiting for the file to be sent ... (press 'a' to abort)\n\r");
	Size = Ymodem_Receive(&tab_1024[0]);
 800036e:	4b2e      	ldr	r3, [pc, #184]	; (8000428 <SerialDownload+0xcc>)
 8000370:	0018      	movs	r0, r3
 8000372:	f001 f8f3 	bl	800155c <Ymodem_Receive>
 8000376:	0003      	movs	r3, r0
 8000378:	607b      	str	r3, [r7, #4]
	if (Size > 0) {
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b00      	cmp	r3, #0
 800037e:	dd30      	ble.n	80003e2 <SerialDownload+0x86>

		flash_read_uboot_info(&boot_inf);
 8000380:	4b2a      	ldr	r3, [pc, #168]	; (800042c <SerialDownload+0xd0>)
 8000382:	0018      	movs	r0, r3
 8000384:	f7ff ff8a 	bl	800029c <flash_read_uboot_info>
		boot_inf.SecondarySize = Size;
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	4b28      	ldr	r3, [pc, #160]	; (800042c <SerialDownload+0xd0>)
 800038c:	60da      	str	r2, [r3, #12]
	/*	FLASH_ClearFlag(
				FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR
						| FLASH_FLAG_WRPERR);*/
		CRC_ResetDR();
 800038e:	f000 f86b 	bl	8000468 <CRC_ResetDR>
		//boot_inf.SecondaryCRC = CRC_CalcBlockCRC(BOOT_SECONDARY_ADDRESS, (uint32_t)(Size/4)+1);
		boot_inf.SecondaryCRC = CRC_CalcBlockCRC(BOOT_PRIMARY_ADDRESS,(uint32_t) (Size / 4) + 1);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2b00      	cmp	r3, #0
 8000396:	da00      	bge.n	800039a <SerialDownload+0x3e>
 8000398:	3303      	adds	r3, #3
 800039a:	109b      	asrs	r3, r3, #2
 800039c:	3301      	adds	r3, #1
 800039e:	4a24      	ldr	r2, [pc, #144]	; (8000430 <SerialDownload+0xd4>)
 80003a0:	0019      	movs	r1, r3
 80003a2:	0010      	movs	r0, r2
 80003a4:	f000 f86a 	bl	800047c <CRC_CalcBlockCRC>
 80003a8:	0002      	movs	r2, r0
 80003aa:	4b20      	ldr	r3, [pc, #128]	; (800042c <SerialDownload+0xd0>)
 80003ac:	609a      	str	r2, [r3, #8]
		boot_inf.PrimaryCRC = boot_inf.SecondaryCRC;
 80003ae:	4b1f      	ldr	r3, [pc, #124]	; (800042c <SerialDownload+0xd0>)
 80003b0:	689a      	ldr	r2, [r3, #8]
 80003b2:	4b1e      	ldr	r3, [pc, #120]	; (800042c <SerialDownload+0xd0>)
 80003b4:	601a      	str	r2, [r3, #0]
		boot_inf.PrimarySize = boot_inf.SecondarySize;
 80003b6:	4b1d      	ldr	r3, [pc, #116]	; (800042c <SerialDownload+0xd0>)
 80003b8:	68da      	ldr	r2, [r3, #12]
 80003ba:	4b1c      	ldr	r3, [pc, #112]	; (800042c <SerialDownload+0xd0>)
 80003bc:	605a      	str	r2, [r3, #4]
		//PrintBootInfo();
		boot_inf.PrimaryAddress = BOOT_PRIMARY_ADDRESS;
 80003be:	4b1b      	ldr	r3, [pc, #108]	; (800042c <SerialDownload+0xd0>)
 80003c0:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <SerialDownload+0xd4>)
 80003c2:	615a      	str	r2, [r3, #20]
		boot_inf.SecondaryAddress = BOOT_SECONDARY_ADDRESS;
 80003c4:	4b19      	ldr	r3, [pc, #100]	; (800042c <SerialDownload+0xd0>)
 80003c6:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <SerialDownload+0xd8>)
 80003c8:	619a      	str	r2, [r3, #24]
		boot_inf.UpdateFirmware = 1;
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <SerialDownload+0xd0>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	621a      	str	r2, [r3, #32]
		flash_write_uboot_info(&boot_inf);
 80003d0:	4b16      	ldr	r3, [pc, #88]	; (800042c <SerialDownload+0xd0>)
 80003d2:	0018      	movs	r0, r3
 80003d4:	f7ff ff86 	bl	80002e4 <flash_write_uboot_info>
		xprintf(
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <SerialDownload+0xdc>)
 80003da:	0018      	movs	r0, r3
 80003dc:	f001 f800 	bl	80013e0 <xprintf>
	} else if (Size == -3) {
		xprintf("\r\n\nAborted by user.\n\r");
	} else {
		xprintf("\n\rFailed to receive the file!\n\r");
	}
}
 80003e0:	e01b      	b.n	800041a <SerialDownload+0xbe>
	} else if (Size == -1) {
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	3301      	adds	r3, #1
 80003e6:	d104      	bne.n	80003f2 <SerialDownload+0x96>
		xprintf(
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <SerialDownload+0xe0>)
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fff8 	bl	80013e0 <xprintf>
}
 80003f0:	e013      	b.n	800041a <SerialDownload+0xbe>
	} else if (Size == -2) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3302      	adds	r3, #2
 80003f6:	d104      	bne.n	8000402 <SerialDownload+0xa6>
		xprintf("\n\n\rVerification failed!\n\r");
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <SerialDownload+0xe4>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f000 fff0 	bl	80013e0 <xprintf>
}
 8000400:	e00b      	b.n	800041a <SerialDownload+0xbe>
	} else if (Size == -3) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	3303      	adds	r3, #3
 8000406:	d104      	bne.n	8000412 <SerialDownload+0xb6>
		xprintf("\r\n\nAborted by user.\n\r");
 8000408:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <SerialDownload+0xe8>)
 800040a:	0018      	movs	r0, r3
 800040c:	f000 ffe8 	bl	80013e0 <xprintf>
}
 8000410:	e003      	b.n	800041a <SerialDownload+0xbe>
		xprintf("\n\rFailed to receive the file!\n\r");
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <SerialDownload+0xec>)
 8000414:	0018      	movs	r0, r3
 8000416:	f000 ffe3 	bl	80013e0 <xprintf>
}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	08001a08 	.word	0x08001a08
 8000428:	20000064 	.word	0x20000064
 800042c:	20000024 	.word	0x20000024
 8000430:	08002800 	.word	0x08002800
 8000434:	0800f000 	.word	0x0800f000
 8000438:	08001a48 	.word	0x08001a48
 800043c:	08001a94 	.word	0x08001a94
 8000440:	08001ad4 	.word	0x08001ad4
 8000444:	08001af0 	.word	0x08001af0
 8000448:	08001b08 	.word	0x08001b08

0800044c <CRC_ClockInit>:
 *      Author: thangnq
 */
#include "dvr_crc.h"
#include "stm32g031xx.h"

void CRC_ClockInit(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_CRCEN;
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <CRC_ClockInit+0x18>)
 8000452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000454:	4b03      	ldr	r3, [pc, #12]	; (8000464 <CRC_ClockInit+0x18>)
 8000456:	2180      	movs	r1, #128	; 0x80
 8000458:	0149      	lsls	r1, r1, #5
 800045a:	430a      	orrs	r2, r1
 800045c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40021000 	.word	0x40021000

08000468 <CRC_ResetDR>:
void CRC_ResetDR(void) {
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	/* Reset CRC generator */
	CRC->CR = CRC_CR_RESET;
 800046c:	4b02      	ldr	r3, [pc, #8]	; (8000478 <CRC_ResetDR+0x10>)
 800046e:	2201      	movs	r2, #1
 8000470:	609a      	str	r2, [r3, #8]
}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40023000 	.word	0x40023000

0800047c <CRC_CalcBlockCRC>:
uint32_t CRC_CalcCRC(uint32_t Data) {
	CRC->DR = Data;
	return (CRC->DR);
}

uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
	uint32_t index = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
	for (index = 0; index < BufferLength; index++) {
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	e009      	b.n	80004a4 <CRC_CalcBlockCRC+0x28>
		CRC->DR = pBuffer[index];
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	18d3      	adds	r3, r2, r3
 8000498:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <CRC_CalcBlockCRC+0x3c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	6013      	str	r3, [r2, #0]
	for (index = 0; index < BufferLength; index++) {
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	3301      	adds	r3, #1
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d3f1      	bcc.n	8000490 <CRC_CalcBlockCRC+0x14>
	}
	return (CRC->DR);
 80004ac:	4b02      	ldr	r3, [pc, #8]	; (80004b8 <CRC_CalcBlockCRC+0x3c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
}
 80004b0:	0018      	movs	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40023000 	.word	0x40023000

080004bc <FLASH_Unlock>:
#define FLASH_PAGE_SIZE				0x800
void FLASH_Lock(void) {
	FLASH->CR |= FLASH_CR_LOCK;
}

void FLASH_Unlock(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	if (FLASH->CR & FLASH_CR_LOCK) {
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <FLASH_Unlock+0x20>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	da05      	bge.n	80004d4 <FLASH_Unlock+0x18>
		FLASH->KEYR = FLASH_KEY1;
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <FLASH_Unlock+0x20>)
 80004ca:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <FLASH_Unlock+0x24>)
 80004cc:	609a      	str	r2, [r3, #8]
		FLASH->KEYR = FLASH_KEY2;
 80004ce:	4b03      	ldr	r3, [pc, #12]	; (80004dc <FLASH_Unlock+0x20>)
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <FLASH_Unlock+0x28>)
 80004d2:	609a      	str	r2, [r3, #8]
	}
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	40022000 	.word	0x40022000
 80004e0:	45670123 	.word	0x45670123
 80004e4:	cdef89ab 	.word	0xcdef89ab

080004e8 <FLASH_GetBank1Status>:

	return flashstatus;
}


FLASH_Status FLASH_GetBank1Status(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0

	FLASH_Status flashstatus = FLASH_COMPLETE;
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	2204      	movs	r2, #4
 80004f2:	701a      	strb	r2, [r3, #0]

	if ((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) {
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <FLASH_GetBank1Status+0x5c>)
 80004f6:	691a      	ldr	r2, [r3, #16]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	025b      	lsls	r3, r3, #9
 80004fc:	401a      	ands	r2, r3
 80004fe:	2380      	movs	r3, #128	; 0x80
 8000500:	025b      	lsls	r3, r3, #9
 8000502:	429a      	cmp	r2, r3
 8000504:	d103      	bne.n	800050e <FLASH_GetBank1Status+0x26>
		flashstatus = FLASH_BUSY;
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
 800050c:	e014      	b.n	8000538 <FLASH_GetBank1Status+0x50>
	} else {
		if ((FLASH->SR & FLASH_FLAG_BANK1_PROGERR) != 0) {
 800050e:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <FLASH_GetBank1Status+0x5c>)
 8000510:	691b      	ldr	r3, [r3, #16]
 8000512:	2208      	movs	r2, #8
 8000514:	4013      	ands	r3, r2
 8000516:	d003      	beq.n	8000520 <FLASH_GetBank1Status+0x38>
			flashstatus = FLASH_ERROR_PG;
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	2202      	movs	r2, #2
 800051c:	701a      	strb	r2, [r3, #0]
 800051e:	e00b      	b.n	8000538 <FLASH_GetBank1Status+0x50>
		} else {
			if ((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0) {
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <FLASH_GetBank1Status+0x5c>)
 8000522:	691b      	ldr	r3, [r3, #16]
 8000524:	2210      	movs	r2, #16
 8000526:	4013      	ands	r3, r2
 8000528:	d003      	beq.n	8000532 <FLASH_GetBank1Status+0x4a>
				flashstatus = FLASH_ERROR_WRP;
 800052a:	1dfb      	adds	r3, r7, #7
 800052c:	2203      	movs	r2, #3
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	e002      	b.n	8000538 <FLASH_GetBank1Status+0x50>
			} else {
				flashstatus = FLASH_COMPLETE;
 8000532:	1dfb      	adds	r3, r7, #7
 8000534:	2204      	movs	r2, #4
 8000536:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	return flashstatus;
 8000538:	1dfb      	adds	r3, r7, #7
 800053a:	781b      	ldrb	r3, [r3, #0]
}
 800053c:	0018      	movs	r0, r3
 800053e:	46bd      	mov	sp, r7
 8000540:	b002      	add	sp, #8
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40022000 	.word	0x40022000

08000548 <FLASH_WaitForLastBank1Operation>:

FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout) {
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	FLASH_Status status = FLASH_COMPLETE;
 8000550:	250f      	movs	r5, #15
 8000552:	197b      	adds	r3, r7, r5
 8000554:	2204      	movs	r2, #4
 8000556:	701a      	strb	r2, [r3, #0]

	/* Check for the Flash Status */
	status = FLASH_GetBank1Status();
 8000558:	197c      	adds	r4, r7, r5
 800055a:	f7ff ffc5 	bl	80004e8 <FLASH_GetBank1Status>
 800055e:	0003      	movs	r3, r0
 8000560:	7023      	strb	r3, [r4, #0]
	/* Wait for a Flash operation to complete or a TIMEOUT to occur */
	while ((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00)) {
 8000562:	46c0      	nop			; (mov r8, r8)
		status = FLASH_GetBank1Status();
		Timeout--;
	}
	if (Timeout == 0x00) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d102      	bne.n	8000570 <FLASH_WaitForLastBank1Operation+0x28>
		status = FLASH_TIMEOUT;
 800056a:	197b      	adds	r3, r7, r5
 800056c:	2205      	movs	r2, #5
 800056e:	701a      	strb	r2, [r3, #0]
	}
	/* Return the operation status */
	return status;
 8000570:	230f      	movs	r3, #15
 8000572:	18fb      	adds	r3, r7, r3
 8000574:	781b      	ldrb	r3, [r3, #0]
}
 8000576:	0018      	movs	r0, r3
 8000578:	46bd      	mov	sp, r7
 800057a:	b004      	add	sp, #16
 800057c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000580 <FLASH_ErasePage>:
	/* Return the operation status */
	return status;

}

FLASH_Status FLASH_ErasePage(uint32_t Page_Address) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	FLASH_Status status = FLASH_COMPLETE;
 8000588:	230f      	movs	r3, #15
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	2204      	movs	r2, #4
 800058e:	701a      	strb	r2, [r3, #0]
	uint32_t page = (Page_Address - BASE_ADDR) / FLASH_PAGE_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	22f8      	movs	r2, #248	; 0xf8
 8000594:	0612      	lsls	r2, r2, #24
 8000596:	4694      	mov	ip, r2
 8000598:	4463      	add	r3, ip
 800059a:	0adb      	lsrs	r3, r3, #11
 800059c:	60bb      	str	r3, [r7, #8]
	while ((FLASH->SR & FLASH_SR_BSY1));
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <FLASH_ErasePage+0x98>)
 80005a2:	691a      	ldr	r2, [r3, #16]
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	025b      	lsls	r3, r3, #9
 80005a8:	4013      	ands	r3, r2
 80005aa:	d1f9      	bne.n	80005a0 <FLASH_ErasePage+0x20>
	FLASH->CR |= FLASH_CR_PER; //Page Erase Set
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <FLASH_ErasePage+0x98>)
 80005ae:	695a      	ldr	r2, [r3, #20]
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <FLASH_ErasePage+0x98>)
 80005b2:	2102      	movs	r1, #2
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
	FLASH->CR &= ~FLASH_CR_PNB;
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <FLASH_ErasePage+0x98>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <FLASH_ErasePage+0x98>)
 80005be:	4917      	ldr	r1, [pc, #92]	; (800061c <FLASH_ErasePage+0x9c>)
 80005c0:	400a      	ands	r2, r1
 80005c2:	615a      	str	r2, [r3, #20]
	FLASH->CR |= (FLASH_CR_PNB & (page << 3));
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <FLASH_ErasePage+0x98>)
 80005c6:	6959      	ldr	r1, [r3, #20]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <FLASH_ErasePage+0xa0>)
 80005ce:	401a      	ands	r2, r3
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <FLASH_ErasePage+0x98>)
 80005d2:	430a      	orrs	r2, r1
 80005d4:	615a      	str	r2, [r3, #20]
	FLASH->CR |= FLASH_CR_STRT; //Start Page Erase
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <FLASH_ErasePage+0x98>)
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <FLASH_ErasePage+0x98>)
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0249      	lsls	r1, r1, #9
 80005e0:	430a      	orrs	r2, r1
 80005e2:	615a      	str	r2, [r3, #20]
	while ((FLASH->SR & FLASH_SR_BSY1));
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <FLASH_ErasePage+0x98>)
 80005e8:	691a      	ldr	r2, [r3, #16]
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	025b      	lsls	r3, r3, #9
 80005ee:	4013      	ands	r3, r2
 80005f0:	d1f9      	bne.n	80005e6 <FLASH_ErasePage+0x66>
	FLASH->CR &= ~FLASH_SR_BSY1;
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <FLASH_ErasePage+0x98>)
 80005f4:	695a      	ldr	r2, [r3, #20]
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <FLASH_ErasePage+0x98>)
 80005f8:	490a      	ldr	r1, [pc, #40]	; (8000624 <FLASH_ErasePage+0xa4>)
 80005fa:	400a      	ands	r2, r1
 80005fc:	615a      	str	r2, [r3, #20]
	FLASH->CR &= ~FLASH_CR_PER; //Page Erase Clear
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <FLASH_ErasePage+0x98>)
 8000600:	695a      	ldr	r2, [r3, #20]
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <FLASH_ErasePage+0x98>)
 8000604:	2102      	movs	r1, #2
 8000606:	438a      	bics	r2, r1
 8000608:	615a      	str	r2, [r3, #20]
	return status;
 800060a:	230f      	movs	r3, #15
 800060c:	18fb      	adds	r3, r7, r3
 800060e:	781b      	ldrb	r3, [r3, #0]
}
 8000610:	0018      	movs	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40022000 	.word	0x40022000
 800061c:	ffffe007 	.word	0xffffe007
 8000620:	00001ff8 	.word	0x00001ff8
 8000624:	fffeffff 	.word	0xfffeffff

08000628 <FLASH_ProgramDoubleWord>:


void flashProgramDoubleWorld(uint32_t addr, uint64_t data) {
}

FLASH_Status FLASH_ProgramDoubleWord(uint32_t addr, uint64_t data) {
 8000628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062a:	b087      	sub	sp, #28
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	603a      	str	r2, [r7, #0]
 8000632:	607b      	str	r3, [r7, #4]

	FLASH_Status status = FLASH_COMPLETE;
 8000634:	2117      	movs	r1, #23
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2204      	movs	r2, #4
 800063a:	701a      	strb	r2, [r3, #0]
	status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 800063c:	187e      	adds	r6, r7, r1
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	019b      	lsls	r3, r3, #6
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff ff80 	bl	8000548 <FLASH_WaitForLastBank1Operation>
 8000648:	0003      	movs	r3, r0
 800064a:	7033      	strb	r3, [r6, #0]

	FLASH->CR |= FLASH_CR_PG;/*!< Programming */
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <FLASH_ProgramDoubleWord+0x78>)
 800064e:	695a      	ldr	r2, [r3, #20]
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <FLASH_ProgramDoubleWord+0x78>)
 8000652:	2101      	movs	r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	615a      	str	r2, [r3, #20]
	*(uint32_t*) addr = (uint32_t) data;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800065e:	f3bf 8f6f 	isb	sy
}
 8000662:	46c0      	nop			; (mov r8, r8)
	__ISB();
	*(uint32_t*) (addr + 4U) = (uint32_t) (data >> 32U);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	001c      	movs	r4, r3
 8000668:	2300      	movs	r3, #0
 800066a:	001d      	movs	r5, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3304      	adds	r3, #4
 8000670:	0022      	movs	r2, r4
 8000672:	601a      	str	r2, [r3, #0]

	status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 8000674:	2517      	movs	r5, #23
 8000676:	197c      	adds	r4, r7, r5
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	019b      	lsls	r3, r3, #6
 800067c:	0018      	movs	r0, r3
 800067e:	f7ff ff63 	bl	8000548 <FLASH_WaitForLastBank1Operation>
 8000682:	0003      	movs	r3, r0
 8000684:	7023      	strb	r3, [r4, #0]

	FLASH->CR &= ~FLASH_CR_PG;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <FLASH_ProgramDoubleWord+0x78>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <FLASH_ProgramDoubleWord+0x78>)
 800068c:	2101      	movs	r1, #1
 800068e:	438a      	bics	r2, r1
 8000690:	615a      	str	r2, [r3, #20]

	return status;
 8000692:	197b      	adds	r3, r7, r5
 8000694:	781b      	ldrb	r3, [r3, #0]
}
 8000696:	0018      	movs	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	b007      	add	sp, #28
 800069c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	40022000 	.word	0x40022000

080006a4 <usart_x0_init>:

static void COMX0_pin_init(void) ;
static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) ;


void usart_x0_init(uint32_t baudrate) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

	COMX0_pin_init();
 80006ac:	f000 f86c 	bl	8000788 <COMX0_pin_init>
	uartx_init(COMX0, baudrate);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <usart_x0_init+0x20>)
 80006b4:	0019      	movs	r1, r3
 80006b6:	0010      	movs	r0, r2
 80006b8:	f000 f8fc 	bl	80008b4 <uartx_init>
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b002      	add	sp, #8
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40013800 	.word	0x40013800

080006c8 <usart_x0_send>:

void usart_x0_send(uint8_t c){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	0002      	movs	r2, r0
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	701a      	strb	r2, [r3, #0]
	while ((COMX0->ISR & USART_ISR_TXE_TXFNF) != USART_ISR_TXE_TXFNF);
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <usart_x0_send+0x2c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	4013      	ands	r3, r2
 80006de:	2b80      	cmp	r3, #128	; 0x80
 80006e0:	d1f9      	bne.n	80006d6 <usart_x0_send+0xe>
	COMX0->TDR = c;
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <usart_x0_send+0x2c>)
 80006e4:	1dfa      	adds	r2, r7, #7
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	40013800 	.word	0x40013800

080006f8 <SerialPutChar>:

void SerialPutChar(uint8_t c) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	0002      	movs	r2, r0
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	701a      	strb	r2, [r3, #0]
	usart_x0_send(c);
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	0018      	movs	r0, r3
 800070a:	f7ff ffdd 	bl	80006c8 <usart_x0_send>
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <SerialKeyPressed>:
uint32_t SerialKeyPressed(uint8_t *key) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	if(USART_ISR_RXNE_RXFNE== (COMX0->ISR & USART_ISR_RXNE_RXFNE)){
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <SerialKeyPressed+0x2c>)
 8000722:	69db      	ldr	r3, [r3, #28]
 8000724:	2220      	movs	r2, #32
 8000726:	4013      	ands	r3, r2
 8000728:	2b20      	cmp	r3, #32
 800072a:	d106      	bne.n	800073a <SerialKeyPressed+0x22>
		*key = (uint8_t) COMX0->RDR;
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <SerialKeyPressed+0x2c>)
 800072e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000730:	b2da      	uxtb	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	701a      	strb	r2, [r3, #0]
		return 1;
 8000736:	2301      	movs	r3, #1
 8000738:	e000      	b.n	800073c <SerialKeyPressed+0x24>
	}else{
		return 0;
 800073a:	2300      	movs	r3, #0
	}
}
 800073c:	0018      	movs	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	b002      	add	sp, #8
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40013800 	.word	0x40013800

08000748 <Rcv_Byte>:

int32_t Rcv_Byte(uint8_t *c, uint32_t timeout) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	uint32_t sec = ulSecCount;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <Rcv_Byte+0x3c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	60fb      	str	r3, [r7, #12]
	while (1) {
		if (SerialKeyPressed(c) == 1) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff ffdc 	bl	8000718 <SerialKeyPressed>
 8000760:	0003      	movs	r3, r0
 8000762:	2b01      	cmp	r3, #1
 8000764:	d101      	bne.n	800076a <Rcv_Byte+0x22>
			return 0;
 8000766:	2300      	movs	r3, #0
 8000768:	e008      	b.n	800077c <Rcv_Byte+0x34>
		}

		if ((uint32_t)(ulSecCount - sec) >= timeout)
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <Rcv_Byte+0x3c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	d8ef      	bhi.n	8000758 <Rcv_Byte+0x10>
			return -1;
 8000778:	2301      	movs	r3, #1
 800077a:	425b      	negs	r3, r3
	}
	return -1;
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	b004      	add	sp, #16
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000468 	.word	0x20000468

08000788 <COMX0_pin_init>:
	}
	return *length;
}


static void COMX0_pin_init(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
	RCC->IOPENR |= (COMX0_TX_GPIO_CLK | COMX0_TX_GPIO_CLK);
 8000792:	4b42      	ldr	r3, [pc, #264]	; (800089c <COMX0_pin_init+0x114>)
 8000794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000796:	4b41      	ldr	r3, [pc, #260]	; (800089c <COMX0_pin_init+0x114>)
 8000798:	2101      	movs	r1, #1
 800079a:	430a      	orrs	r2, r1
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->COMX0_APB_CLK |= COMX0_CLK;
 800079e:	4b3f      	ldr	r3, [pc, #252]	; (800089c <COMX0_pin_init+0x114>)
 80007a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007a2:	4b3e      	ldr	r3, [pc, #248]	; (800089c <COMX0_pin_init+0x114>)
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	01c9      	lsls	r1, r1, #7
 80007a8:	430a      	orrs	r2, r1
 80007aa:	641a      	str	r2, [r3, #64]	; 0x40

	COMX0_RX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_RX_PIN * 2));
 80007ac:	23a0      	movs	r3, #160	; 0xa0
 80007ae:	05db      	lsls	r3, r3, #23
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	23a0      	movs	r3, #160	; 0xa0
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	493a      	ldr	r1, [pc, #232]	; (80008a0 <COMX0_pin_init+0x118>)
 80007b8:	400a      	ands	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->MODER |= (0x02 << (COMX0_RX_PIN * 2)); //mode AF
 80007bc:	23a0      	movs	r3, #160	; 0xa0
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	23a0      	movs	r3, #160	; 0xa0
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	0389      	lsls	r1, r1, #14
 80007ca:	430a      	orrs	r2, r1
 80007cc:	601a      	str	r2, [r3, #0]
	COMX0_RX_GPIO_PORT->ODR &= ~(0x01 << COMX0_RX_PIN); //push pull
 80007ce:	23a0      	movs	r3, #160	; 0xa0
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	695a      	ldr	r2, [r3, #20]
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	4932      	ldr	r1, [pc, #200]	; (80008a4 <COMX0_pin_init+0x11c>)
 80007da:	400a      	ands	r2, r1
 80007dc:	615a      	str	r2, [r3, #20]
	COMX0_RX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_RX_PIN * 2)); //no pull
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	68da      	ldr	r2, [r3, #12]
 80007e4:	23a0      	movs	r3, #160	; 0xa0
 80007e6:	05db      	lsls	r3, r3, #23
 80007e8:	492d      	ldr	r1, [pc, #180]	; (80008a0 <COMX0_pin_init+0x118>)
 80007ea:	400a      	ands	r2, r1
 80007ec:	60da      	str	r2, [r3, #12]
	COMX0_RX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_RX_PIN); ////speed low
 80007ee:	23a0      	movs	r3, #160	; 0xa0
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	689a      	ldr	r2, [r3, #8]
 80007f4:	23a0      	movs	r3, #160	; 0xa0
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	492a      	ldr	r1, [pc, #168]	; (80008a4 <COMX0_pin_init+0x11c>)
 80007fa:	400a      	ands	r2, r1
 80007fc:	609a      	str	r2, [r3, #8]

	COMX0_TX_GPIO_PORT->MODER &= ~(0x03 << (COMX0_TX_PIN * 2));
 80007fe:	23a0      	movs	r3, #160	; 0xa0
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	4927      	ldr	r1, [pc, #156]	; (80008a8 <COMX0_pin_init+0x120>)
 800080a:	400a      	ands	r2, r1
 800080c:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->MODER |= (0x02 << (COMX0_TX_PIN * 2)); //mode AF
 800080e:	23a0      	movs	r3, #160	; 0xa0
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	23a0      	movs	r3, #160	; 0xa0
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	0309      	lsls	r1, r1, #12
 800081c:	430a      	orrs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
	COMX0_TX_GPIO_PORT->ODR &= ~(0x01 << COMX0_TX_PIN); //push pull
 8000820:	23a0      	movs	r3, #160	; 0xa0
 8000822:	05db      	lsls	r3, r3, #23
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	23a0      	movs	r3, #160	; 0xa0
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	4920      	ldr	r1, [pc, #128]	; (80008ac <COMX0_pin_init+0x124>)
 800082c:	400a      	ands	r2, r1
 800082e:	615a      	str	r2, [r3, #20]
	COMX0_TX_GPIO_PORT->PUPDR &= ~(0x03 << (COMX0_TX_PIN * 2)); //no pull
 8000830:	23a0      	movs	r3, #160	; 0xa0
 8000832:	05db      	lsls	r3, r3, #23
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	23a0      	movs	r3, #160	; 0xa0
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	491b      	ldr	r1, [pc, #108]	; (80008a8 <COMX0_pin_init+0x120>)
 800083c:	400a      	ands	r2, r1
 800083e:	60da      	str	r2, [r3, #12]
	COMX0_TX_GPIO_PORT->OSPEEDR &= ~(0x01 << COMX0_TX_PIN); ////speed low
 8000840:	23a0      	movs	r3, #160	; 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	4918      	ldr	r1, [pc, #96]	; (80008ac <COMX0_pin_init+0x124>)
 800084c:	400a      	ands	r2, r1
 800084e:	609a      	str	r2, [r3, #8]

	temp = COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3u];
 8000850:	23a0      	movs	r3, #160	; 0xa0
 8000852:	05db      	lsls	r3, r3, #23
 8000854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000856:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_RX_PIN & 0x07u) * 4ul));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <COMX0_pin_init+0x128>)
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_RX_PIN_AF << ((COMX0_RX_PIN & 0x07u) * 4ul));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	0052      	lsls	r2, r2, #1
 8000866:	4313      	orrs	r3, r2
 8000868:	607b      	str	r3, [r7, #4]
	COMX0_RX_GPIO_PORT->AFR[COMX0_RX_PIN >> 3ul] = temp;
 800086a:	23a0      	movs	r3, #160	; 0xa0
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	625a      	str	r2, [r3, #36]	; 0x24

	temp = COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3u];
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000878:	607b      	str	r3, [r7, #4]
	temp &= ~(0xful << ((COMX0_TX_PIN & 0x07u) * 4ul));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	22f0      	movs	r2, #240	; 0xf0
 800087e:	4393      	bics	r3, r2
 8000880:	607b      	str	r3, [r7, #4]
	temp |= (COMX0_TX_PIN_AF << ((COMX0_TX_PIN & 0x07u) * 4ul));
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2210      	movs	r2, #16
 8000886:	4313      	orrs	r3, r2
 8000888:	607b      	str	r3, [r7, #4]
	COMX0_TX_GPIO_PORT->AFR[COMX0_TX_PIN >> 3ul] = temp;
 800088a:	23a0      	movs	r3, #160	; 0xa0
 800088c:	05db      	lsls	r3, r3, #23
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40021000 	.word	0x40021000
 80008a0:	ffcfffff 	.word	0xffcfffff
 80008a4:	fffffbff 	.word	0xfffffbff
 80008a8:	fff3ffff 	.word	0xfff3ffff
 80008ac:	fffffdff 	.word	0xfffffdff
 80008b0:	fffff0ff 	.word	0xfffff0ff

080008b4 <uartx_init>:



static void uartx_init(USART_TypeDef *UARTx, uint32_t baudrate) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	uint32_t BRR_value = SYS_CLOCK / baudrate;
 80008be:	6839      	ldr	r1, [r7, #0]
 80008c0:	4819      	ldr	r0, [pc, #100]	; (8000928 <uartx_init+0x74>)
 80008c2:	f7ff fc1f 	bl	8000104 <__udivsi3>
 80008c6:	0003      	movs	r3, r0
 80008c8:	60fb      	str	r3, [r7, #12]

	UARTx->CR1 = 0;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
	// Word length 8n1
	UARTx->CR1 &= ~USART_CR1_M1;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a15      	ldr	r2, [pc, #84]	; (800092c <uartx_init+0x78>)
 80008d6:	401a      	ands	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	601a      	str	r2, [r3, #0]
	//Parity disable
	UARTx->CR1 &= ~USART_CR1_PCE;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a13      	ldr	r2, [pc, #76]	; (8000930 <uartx_init+0x7c>)
 80008e2:	401a      	ands	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	601a      	str	r2, [r3, #0]
	//mode Tx_Rx
	UARTx->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	220c      	movs	r2, #12
 80008ee:	431a      	orrs	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	601a      	str	r2, [r3, #0]
	//OverSampling 16bit
	UARTx->CR1 &= ~USART_CR1_OVER8;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <uartx_init+0x80>)
 80008fa:	401a      	ands	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	601a      	str	r2, [r3, #0]
	//ClockPrescaler no div
	UARTx->PRESC &= USART_PRESC_PRESCALER;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000904:	220f      	movs	r2, #15
 8000906:	401a      	ands	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
	//set baudrate 115200
	UARTx->BRR = BRR_value;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	60da      	str	r2, [r3, #12]
	//rx interupt enable
	//UARTx->CR1 |= USART_CR1_RXNEIE_RXFNEIE;
	UARTx->CR1 |= USART_CR1_UE;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2201      	movs	r2, #1
 8000918:	431a      	orrs	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	601a      	str	r2, [r3, #0]
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b004      	add	sp, #16
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	03d09000 	.word	0x03d09000
 800092c:	efffffff 	.word	0xefffffff
 8000930:	fffffbff 	.word	0xfffffbff
 8000934:	ffff7fff 	.word	0xffff7fff

08000938 <main>:
static uint32_t ulTickCount = 0;
static uint32_t lastSendData = 0;

static int setup(void);
extern void mainboot(void);
int main(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	setup();
 800093c:	f000 f806 	bl	800094c <setup>
	mainboot();
 8000940:	f000 f842 	bl	80009c8 <mainboot>
	return 0;
 8000944:	2300      	movs	r3, #0
}
 8000946:	0018      	movs	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <setup>:

static int setup(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	int ret = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
	systemInit();
 8000956:	f000 fab3 	bl	8000ec0 <systemInit>
	usart_x0_init(19200);
 800095a:	2396      	movs	r3, #150	; 0x96
 800095c:	01db      	lsls	r3, r3, #7
 800095e:	0018      	movs	r0, r3
 8000960:	f7ff fea0 	bl	80006a4 <usart_x0_init>
	CRC_ClockInit();
 8000964:	f7ff fd72 	bl	800044c <CRC_ClockInit>
	xdev_out(SerialPutChar);
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <setup+0x2c>)
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <setup+0x30>)
 800096c:	601a      	str	r2, [r3, #0]
	return ret;
 800096e:	687b      	ldr	r3, [r7, #4]
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000478 	.word	0x20000478
 800097c:	080006f9 	.word	0x080006f9

08000980 <SysTick_Handler>:

void SysTick_Handler(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	ulMiliCount++;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <SysTick_Handler+0x3c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	1c5a      	adds	r2, r3, #1
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <SysTick_Handler+0x3c>)
 800098c:	601a      	str	r2, [r3, #0]
	ulTickCount++;
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <SysTick_Handler+0x40>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <SysTick_Handler+0x40>)
 8000996:	601a      	str	r2, [r3, #0]
	if (ulTickCount > 1000) {
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <SysTick_Handler+0x40>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	23fa      	movs	r3, #250	; 0xfa
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d907      	bls.n	80009b4 <SysTick_Handler+0x34>
		ulTickCount = 0;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <SysTick_Handler+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
		ulSecCount++;
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SysTick_Handler+0x44>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SysTick_Handler+0x44>)
 80009b2:	601a      	str	r2, [r3, #0]
	}
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	20000464 	.word	0x20000464
 80009c0:	2000046c 	.word	0x2000046c
 80009c4:	20000468 	.word	0x20000468

080009c8 <mainboot>:
uint32_t JumpAddress;
uint32_t BlockNbr = 0, UserMemoryMask1 = 0;
__IO uint32_t FlashProtection = 0;
extern SKS_BOOT_INFO boot_inf;

void mainboot(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
			NVIC_SystemReset();
		}
		FLASH_OB_Lock();
#endif

	uint8_t key = 0;
 80009ce:	230d      	movs	r3, #13
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
	uint8_t chr = 0;
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
	uint8_t boot = 0;
 80009dc:	230f      	movs	r3, #15
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
	uint8_t image_ok = 0;
 80009e4:	230c      	movs	r3, #12
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	uint8_t istimeout = 0;
 80009ec:	230e      	movs	r3, #14
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]

	while (1) {
		if (istimeout == 0) {
 80009f4:	230e      	movs	r3, #14
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <mainboot+0x3a>
			if (FlashProtection != 0) {
 80009fe:	4b58      	ldr	r3, [pc, #352]	; (8000b60 <mainboot+0x198>)
 8000a00:	681b      	ldr	r3, [r3, #0]

			}
		}
		key = Rcv_Byte(&chr, 3);
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	2103      	movs	r1, #3
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff fe9e 	bl	8000748 <Rcv_Byte>
 8000a0c:	0002      	movs	r2, r0
 8000a0e:	210d      	movs	r1, #13
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	701a      	strb	r2, [r3, #0]
		if (!key) {
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d142      	bne.n	8000aa2 <mainboot+0xda>
			istimeout = 0;
 8000a1c:	230e      	movs	r3, #14
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
			boot = 0;
 8000a24:	230f      	movs	r3, #15
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
			key = chr;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	1dfa      	adds	r2, r7, #7
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	701a      	strb	r2, [r3, #0]
			if ((key == 0x33) || (key == 'b') || (key == 'B')) {
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b33      	cmp	r3, #51	; 0x33
 8000a3a:	d007      	beq.n	8000a4c <mainboot+0x84>
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b62      	cmp	r3, #98	; 0x62
 8000a42:	d003      	beq.n	8000a4c <mainboot+0x84>
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b42      	cmp	r3, #66	; 0x42
 8000a4a:	d104      	bne.n	8000a56 <mainboot+0x8e>
				boot = 1;
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e01f      	b.n	8000a96 <mainboot+0xce>
			} else if ((key == 0x34) && (FlashProtection == 1)) {
 8000a56:	230d      	movs	r3, #13
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b34      	cmp	r3, #52	; 0x34
 8000a5e:	d103      	bne.n	8000a68 <mainboot+0xa0>
 8000a60:	4b3f      	ldr	r3, [pc, #252]	; (8000b60 <mainboot+0x198>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d016      	beq.n	8000a96 <mainboot+0xce>
			} else if ((key == SOH) || (key == STX)) {
 8000a68:	220d      	movs	r2, #13
 8000a6a:	18bb      	adds	r3, r7, r2
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d003      	beq.n	8000a7a <mainboot+0xb2>
 8000a72:	18bb      	adds	r3, r7, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d102      	bne.n	8000a80 <mainboot+0xb8>
				/* Download user application in the Flash */
				SerialDownload();
 8000a7a:	f7ff fc6f 	bl	800035c <SerialDownload>
 8000a7e:	e00a      	b.n	8000a96 <mainboot+0xce>
			} else if ((key == 'd') || (key == 'D')) {
 8000a80:	220d      	movs	r2, #13
 8000a82:	18bb      	adds	r3, r7, r2
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b64      	cmp	r3, #100	; 0x64
 8000a88:	d003      	beq.n	8000a92 <mainboot+0xca>
 8000a8a:	18bb      	adds	r3, r7, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b44      	cmp	r3, #68	; 0x44
 8000a90:	d101      	bne.n	8000a96 <mainboot+0xce>
				/* Download user application in the Flash */
				SerialDownload();
 8000a92:	f7ff fc63 	bl	800035c <SerialDownload>
			}
			if (boot == 0)
 8000a96:	230f      	movs	r3, #15
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d10c      	bne.n	8000aba <mainboot+0xf2>
				continue;
 8000aa0:	e05c      	b.n	8000b5c <mainboot+0x194>
		} else {
			xprintf("Time out, booting ... ");
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <mainboot+0x19c>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fc9b 	bl	80013e0 <xprintf>
			istimeout = 1;
 8000aaa:	230e      	movs	r3, #14
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
			boot = 1; //TimeOut
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
		}

		if (boot) {
 8000aba:	230f      	movs	r3, #15
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d097      	beq.n	80009f4 <mainboot+0x2c>
			//image_ok = Verify
			xprintf("VERIFY IMAGE ...");
 8000ac4:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <mainboot+0x1a0>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f000 fc8a 	bl	80013e0 <xprintf>
			image_ok = flash_verify_image(&boot_inf);
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <mainboot+0x1a4>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff fbbe 	bl	8000250 <flash_verify_image>
 8000ad4:	0002      	movs	r2, r0
 8000ad6:	210c      	movs	r1, #12
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	701a      	strb	r2, [r3, #0]
			//PrintBootInfo();
			if (image_ok > 0) {
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d037      	beq.n	8000b54 <mainboot+0x18c>
				xprintf("SUCCESS!!!\r\n");
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <mainboot+0x1a8>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 fc7a 	bl	80013e0 <xprintf>
				if (((*(__IO uint32_t*) ApplicationAddress ) & 0x2FFE0000) == 0x20000000) {
 8000aec:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <mainboot+0x1ac>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a21      	ldr	r2, [pc, #132]	; (8000b78 <mainboot+0x1b0>)
 8000af2:	401a      	ands	r2, r3
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	059b      	lsls	r3, r3, #22
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d000      	beq.n	8000afe <mainboot+0x136>
 8000afc:	e77a      	b.n	80009f4 <mainboot+0x2c>
					xprintf("BOOTING...\r\n");
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <mainboot+0x1b4>)
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 fc6d 	bl	80013e0 <xprintf>
					/*DISABLE ALL INTERUPT BEFORE JUMP TO APPLICATION*/
					/* TIM2 enable counter */
					unsigned long now = ulMiliCount;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <mainboot+0x1b8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	60bb      	str	r3, [r7, #8]
					while ((ulMiliCount - now) < 10) ;
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <mainboot+0x1b8>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b09      	cmp	r3, #9
 8000b18:	d9f9      	bls.n	8000b0e <mainboot+0x146>
					RCC_DeInit();
 8000b1a:	f000 fa63 	bl	8000fe4 <RCC_DeInit>
					SysTick->CTRL = 0;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <mainboot+0x1bc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
					SysTick->LOAD = 0;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <mainboot+0x1bc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
					SysTick->VAL = 0;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <mainboot+0x1bc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	46c0      	nop			; (mov r8, r8)
					__disable_irq();
					SYSCFG->CFGR1 = 0x01;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <mainboot+0x1c0>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
					Jump_To_Application = (void (*)(void)) (*((uint32_t*) (ApplicationAddress + 4)));
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <mainboot+0x1c4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	001a      	movs	r2, r3
 8000b40:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <mainboot+0x1c8>)
 8000b42:	601a      	str	r2, [r3, #0]
					Jump_To_Application();
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <mainboot+0x1c8>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4798      	blx	r3
					xprintf("INVALID IMAGE SIGN, RETURN BOOT LOADER\r\n");
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <mainboot+0x1cc>)
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f000 fc47 	bl	80013e0 <xprintf>
 8000b52:	e74f      	b.n	80009f4 <mainboot+0x2c>
				}
			} else
				xprintf("FAILURE, RETURN BOOT LOADER\r\n");
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <mainboot+0x1d0>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 fc42 	bl	80013e0 <xprintf>
		if (istimeout == 0) {
 8000b5c:	e74a      	b.n	80009f4 <mainboot+0x2c>
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	20000474 	.word	0x20000474
 8000b64:	08001b28 	.word	0x08001b28
 8000b68:	08001b40 	.word	0x08001b40
 8000b6c:	20000024 	.word	0x20000024
 8000b70:	08001b54 	.word	0x08001b54
 8000b74:	08002800 	.word	0x08002800
 8000b78:	2ffe0000 	.word	0x2ffe0000
 8000b7c:	08001b64 	.word	0x08001b64
 8000b80:	20000464 	.word	0x20000464
 8000b84:	e000e010 	.word	0xe000e010
 8000b88:	40010000 	.word	0x40010000
 8000b8c:	08002804 	.word	0x08002804
 8000b90:	20000470 	.word	0x20000470
 8000b94:	08001b74 	.word	0x08001b74
 8000b98:	08001ba0 	.word	0x08001ba0

08000b9c <Str2Int>:
		}
	}

}

uint32_t Str2Int(uint8_t *inputstr, int32_t *intnum){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0,val = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  if ('0' == inputstr[0] && ( 'x' == inputstr[1] || 'X' == inputstr[1])){
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b30      	cmp	r3, #48	; 0x30
 8000bb8:	d000      	beq.n	8000bbc <Str2Int+0x20>
 8000bba:	e082      	b.n	8000cc2 <Str2Int+0x126>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b78      	cmp	r3, #120	; 0x78
 8000bc4:	d005      	beq.n	8000bd2 <Str2Int+0x36>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b58      	cmp	r3, #88	; 0x58
 8000bce:	d000      	beq.n	8000bd2 <Str2Int+0x36>
 8000bd0:	e077      	b.n	8000cc2 <Str2Int+0x126>
    if (inputstr[2] == '\0'){
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d101      	bne.n	8000be0 <Str2Int+0x44>
      return 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	e0d8      	b.n	8000d92 <Str2Int+0x1f6>
    }
    for (i = 2; i < 11; i++){
 8000be0:	2302      	movs	r3, #2
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	e063      	b.n	8000cae <Str2Int+0x112>
      if ('\0' == inputstr[i])
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d105      	bne.n	8000bfe <Str2Int+0x62>
      {
        *intnum = val;
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	601a      	str	r2, [r3, #0]
        res = 1;//retutn 1
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]
        break;
 8000bfc:	e05a      	b.n	8000cb4 <Str2Int+0x118>
      }
      if (ISVALIDHEX(inputstr[i])){
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	18d3      	adds	r3, r2, r3
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b40      	cmp	r3, #64	; 0x40
 8000c08:	d905      	bls.n	8000c16 <Str2Int+0x7a>
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	18d3      	adds	r3, r2, r3
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b46      	cmp	r3, #70	; 0x46
 8000c14:	d917      	bls.n	8000c46 <Str2Int+0xaa>
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	18d3      	adds	r3, r2, r3
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b60      	cmp	r3, #96	; 0x60
 8000c20:	d905      	bls.n	8000c2e <Str2Int+0x92>
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	18d3      	adds	r3, r2, r3
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b66      	cmp	r3, #102	; 0x66
 8000c2c:	d90b      	bls.n	8000c46 <Str2Int+0xaa>
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	18d3      	adds	r3, r2, r3
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b2f      	cmp	r3, #47	; 0x2f
 8000c38:	d936      	bls.n	8000ca8 <Str2Int+0x10c>
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	18d3      	adds	r3, r2, r3
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b39      	cmp	r3, #57	; 0x39
 8000c44:	d830      	bhi.n	8000ca8 <Str2Int+0x10c>
        val = (val << 4) + CONVERTHEX(inputstr[i]);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	011a      	lsls	r2, r3, #4
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	18cb      	adds	r3, r1, r3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b2f      	cmp	r3, #47	; 0x2f
 8000c54:	d90b      	bls.n	8000c6e <Str2Int+0xd2>
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	18cb      	adds	r3, r1, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b39      	cmp	r3, #57	; 0x39
 8000c60:	d805      	bhi.n	8000c6e <Str2Int+0xd2>
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	18cb      	adds	r3, r1, r3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	3b30      	subs	r3, #48	; 0x30
 8000c6c:	e016      	b.n	8000c9c <Str2Int+0x100>
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	18cb      	adds	r3, r1, r3
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b40      	cmp	r3, #64	; 0x40
 8000c78:	d90b      	bls.n	8000c92 <Str2Int+0xf6>
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	18cb      	adds	r3, r1, r3
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b46      	cmp	r3, #70	; 0x46
 8000c84:	d805      	bhi.n	8000c92 <Str2Int+0xf6>
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	18cb      	adds	r3, r1, r3
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	3b37      	subs	r3, #55	; 0x37
 8000c90:	e004      	b.n	8000c9c <Str2Int+0x100>
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	18cb      	adds	r3, r1, r3
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	3b57      	subs	r3, #87	; 0x57
 8000c9c:	189b      	adds	r3, r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
    for (i = 2; i < 11; i++){
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e002      	b.n	8000cae <Str2Int+0x112>
      }
      else{
        res = 0;  /* return 0, Invalid input */
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
        break;
 8000cac:	e002      	b.n	8000cb4 <Str2Int+0x118>
    for (i = 2; i < 11; i++){
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	2b0a      	cmp	r3, #10
 8000cb2:	d998      	bls.n	8000be6 <Str2Int+0x4a>
      }
    }
    if (i >= 11){/* over 8 digit hex --invalid */
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2b0a      	cmp	r3, #10
 8000cb8:	d800      	bhi.n	8000cbc <Str2Int+0x120>
 8000cba:	e069      	b.n	8000d90 <Str2Int+0x1f4>
      res = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
    if (i >= 11){/* over 8 digit hex --invalid */
 8000cc0:	e066      	b.n	8000d90 <Str2Int+0x1f4>
    }
  }
  else{ /* max 10-digit decimal input */
    for (i = 0;i < 11;i++){
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e05b      	b.n	8000d80 <Str2Int+0x1e4>
      if ('\0' == inputstr[i]){
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	18d3      	adds	r3, r2, r3
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d105      	bne.n	8000ce0 <Str2Int+0x144>
        *intnum = val;
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	601a      	str	r2, [r3, #0]
        res = 1; /* return 1 */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	613b      	str	r3, [r7, #16]
        break;
 8000cde:	e052      	b.n	8000d86 <Str2Int+0x1ea>
      }
      else if (('k' == inputstr[i] || 'K' == inputstr[i]) && (i > 0)){
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b6b      	cmp	r3, #107	; 0x6b
 8000cea:	d005      	beq.n	8000cf8 <Str2Int+0x15c>
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b4b      	cmp	r3, #75	; 0x4b
 8000cf6:	d10b      	bne.n	8000d10 <Str2Int+0x174>
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d008      	beq.n	8000d10 <Str2Int+0x174>
        val = val << 10;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	029b      	lsls	r3, r3, #10
 8000d02:	60fb      	str	r3, [r7, #12]
        *intnum = val;
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	601a      	str	r2, [r3, #0]
        res = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	613b      	str	r3, [r7, #16]
        break;
 8000d0e:	e03a      	b.n	8000d86 <Str2Int+0x1ea>
      }
      else if (('m' == inputstr[i] || 'M' == inputstr[i]) && (i > 0)){
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	18d3      	adds	r3, r2, r3
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b6d      	cmp	r3, #109	; 0x6d
 8000d1a:	d005      	beq.n	8000d28 <Str2Int+0x18c>
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	18d3      	adds	r3, r2, r3
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b4d      	cmp	r3, #77	; 0x4d
 8000d26:	d10b      	bne.n	8000d40 <Str2Int+0x1a4>
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d008      	beq.n	8000d40 <Str2Int+0x1a4>
        val = val << 20;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	051b      	lsls	r3, r3, #20
 8000d32:	60fb      	str	r3, [r7, #12]
        *intnum = val;
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	601a      	str	r2, [r3, #0]
        res = 1;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	613b      	str	r3, [r7, #16]
        break;
 8000d3e:	e022      	b.n	8000d86 <Str2Int+0x1ea>
      }
      else if (ISVALIDDEC(inputstr[i])){
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	18d3      	adds	r3, r2, r3
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b2f      	cmp	r3, #47	; 0x2f
 8000d4a:	d916      	bls.n	8000d7a <Str2Int+0x1de>
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	18d3      	adds	r3, r2, r3
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b39      	cmp	r3, #57	; 0x39
 8000d56:	d810      	bhi.n	8000d7a <Str2Int+0x1de>
        val = val * 10 + CONVERTDEC(inputstr[i]);
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	0013      	movs	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	0019      	movs	r1, r3
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	18d3      	adds	r3, r2, r3
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	18cb      	adds	r3, r1, r3
 8000d6e:	3b30      	subs	r3, #48	; 0x30
 8000d70:	60fb      	str	r3, [r7, #12]
    for (i = 0;i < 11;i++){
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e002      	b.n	8000d80 <Str2Int+0x1e4>
      }
      else{
        res = 0; /* return 0, Invalid input */
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
        break;
 8000d7e:	e002      	b.n	8000d86 <Str2Int+0x1ea>
    for (i = 0;i < 11;i++){
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	2b0a      	cmp	r3, #10
 8000d84:	d9a0      	bls.n	8000cc8 <Str2Int+0x12c>
      }
    }
    if (i >= 11){/* Over 10 digit decimal --invalid */
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	2b0a      	cmp	r3, #10
 8000d8a:	d901      	bls.n	8000d90 <Str2Int+0x1f4>
      res = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
    }
  }

  return res;
 8000d90:	693b      	ldr	r3, [r7, #16]
}
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b006      	add	sp, #24
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	0002      	movs	r2, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b7f      	cmp	r3, #127	; 0x7f
 8000db0:	d828      	bhi.n	8000e04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <__NVIC_SetPriority+0xd4>)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	33c0      	adds	r3, #192	; 0xc0
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	589b      	ldr	r3, [r3, r2]
 8000dc2:	1dfa      	adds	r2, r7, #7
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	2203      	movs	r2, #3
 8000dca:	400a      	ands	r2, r1
 8000dcc:	00d2      	lsls	r2, r2, #3
 8000dce:	21ff      	movs	r1, #255	; 0xff
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	43d2      	mvns	r2, r2
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	019b      	lsls	r3, r3, #6
 8000dde:	22ff      	movs	r2, #255	; 0xff
 8000de0:	401a      	ands	r2, r3
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	0018      	movs	r0, r3
 8000de8:	2303      	movs	r3, #3
 8000dea:	4003      	ands	r3, r0
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df0:	481f      	ldr	r0, [pc, #124]	; (8000e70 <__NVIC_SetPriority+0xd4>)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	33c0      	adds	r3, #192	; 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e02:	e031      	b.n	8000e68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e04:	4a1b      	ldr	r2, [pc, #108]	; (8000e74 <__NVIC_SetPriority+0xd8>)
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	400b      	ands	r3, r1
 8000e10:	3b08      	subs	r3, #8
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	3306      	adds	r3, #6
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	1dfa      	adds	r2, r7, #7
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	0011      	movs	r1, r2
 8000e24:	2203      	movs	r2, #3
 8000e26:	400a      	ands	r2, r1
 8000e28:	00d2      	lsls	r2, r2, #3
 8000e2a:	21ff      	movs	r1, #255	; 0xff
 8000e2c:	4091      	lsls	r1, r2
 8000e2e:	000a      	movs	r2, r1
 8000e30:	43d2      	mvns	r2, r2
 8000e32:	401a      	ands	r2, r3
 8000e34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	019b      	lsls	r3, r3, #6
 8000e3a:	22ff      	movs	r2, #255	; 0xff
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0018      	movs	r0, r3
 8000e44:	2303      	movs	r3, #3
 8000e46:	4003      	ands	r3, r0
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4c:	4809      	ldr	r0, [pc, #36]	; (8000e74 <__NVIC_SetPriority+0xd8>)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	001c      	movs	r4, r3
 8000e54:	230f      	movs	r3, #15
 8000e56:	4023      	ands	r3, r4
 8000e58:	3b08      	subs	r3, #8
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	3306      	adds	r3, #6
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	18c3      	adds	r3, r0, r3
 8000e64:	3304      	adds	r3, #4
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b003      	add	sp, #12
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	045b      	lsls	r3, r3, #17
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d301      	bcc.n	8000e90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e010      	b.n	8000eb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <SysTick_Config+0x44>)
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	3a01      	subs	r2, #1
 8000e96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e98:	2301      	movs	r3, #1
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff ff7c 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x44>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x44>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b002      	add	sp, #8
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <systemInit>:

static void SetSysClock(void);
static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource);
static void systickConfig(void);

void systemInit(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	SetSysClock();
 8000ec4:	f000 f828 	bl	8000f18 <SetSysClock>
	systickConfig();
 8000ec8:	f000 f818 	bl	8000efc <systickConfig>
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <SysTick_CLKSourceConfig>:

static void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

	if (SysTick_CLKSource == SysTick_CLKSource_HCLK) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	d105      	bne.n	8000eee <SysTick_CLKSourceConfig+0x1a>
		SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_CLKSourceConfig+0x24>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_CLKSourceConfig+0x24>)
 8000ee8:	2104      	movs	r1, #4
 8000eea:	430a      	orrs	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]
	}
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b002      	add	sp, #8
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <systickConfig>:

static void systickConfig(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
 8000f00:	2004      	movs	r0, #4
 8000f02:	f7ff ffe7 	bl	8000ed4 <SysTick_CLKSourceConfig>
	SysTick_Config(systemClock / 1000);
 8000f06:	23fa      	movs	r3, #250	; 0xfa
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f7ff ffb4 	bl	8000e78 <SysTick_Config>
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <SetSysClock>:

static void SetSysClock(void) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	/* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t) RCC_CR_HSEON);
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <SetSysClock+0xb4>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <SetSysClock+0xb4>)
 8000f22:	2180      	movs	r1, #128	; 0x80
 8000f24:	0249      	lsls	r1, r1, #9
 8000f26:	430a      	orrs	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]
	while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <SetSysClock+0xb4>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	029b      	lsls	r3, r3, #10
 8000f34:	4013      	ands	r3, r2
 8000f36:	d0f9      	beq.n	8000f2c <SetSysClock+0x14>
		;

	/* Enable Prefetch Buffer and set Flash Latency */
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_2;
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <SetSysClock+0xb8>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <SetSysClock+0xb8>)
 8000f3e:	2182      	movs	r1, #130	; 0x82
 8000f40:	0049      	lsls	r1, r1, #1
 8000f42:	430a      	orrs	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]
	// 4. Configure the PRESCALARS HCLK, PCLK1, PCLK2
	// APB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_HPRE);
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <SetSysClock+0xb4>)
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <SetSysClock+0xb4>)
 8000f4c:	4921      	ldr	r1, [pc, #132]	; (8000fd4 <SetSysClock+0xbc>)
 8000f4e:	400a      	ands	r2, r1
 8000f50:	609a      	str	r2, [r3, #8]
	// AHB PR
	RCC->CFGR &= (uint32_t) (~RCC_CFGR_PPRE);
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <SetSysClock+0xb4>)
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <SetSysClock+0xb4>)
 8000f58:	491f      	ldr	r1, [pc, #124]	; (8000fd8 <SetSysClock+0xc0>)
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	609a      	str	r2, [r3, #8]

	//PLL INPUT CLOCK SOURCE HSE
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <SetSysClock+0xb4>)
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <SetSysClock+0xb4>)
 8000f64:	2103      	movs	r1, #3
 8000f66:	430a      	orrs	r2, r1
 8000f68:	60da      	str	r2, [r3, #12]

	/* PLL configuration = HSE = 64 MHz */
	//PLLM = 1
	//PLLN = 16
	//PLLR = 2
	RCC->PLLCFGR &= (uint32_t) ((uint32_t) ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <SetSysClock+0xb4>)
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <SetSysClock+0xb4>)
 8000f70:	491a      	ldr	r1, [pc, #104]	; (8000fdc <SetSysClock+0xc4>)
 8000f72:	400a      	ands	r2, r1
 8000f74:	60da      	str	r2, [r3, #12]
			| RCC_PLLCFGR_PLLR));

	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLN_4)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <SetSysClock+0xb4>)
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <SetSysClock+0xb4>)
 8000f7c:	4918      	ldr	r1, [pc, #96]	; (8000fe0 <SetSysClock+0xc8>)
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	60da      	str	r2, [r3, #12]
			| (RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLREN) | (RCC_PLLCFGR_PLLQEN)
			| (RCC_PLLCFGR_PLLSRC_HSE);

	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <SetSysClock+0xb4>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <SetSysClock+0xb4>)
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	0449      	lsls	r1, r1, #17
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]

	/* Wait till PLL is ready */
	while ((RCC->CR & RCC_CR_PLLRDY) == 0) {
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <SetSysClock+0xb4>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	049b      	lsls	r3, r3, #18
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d0f9      	beq.n	8000f92 <SetSysClock+0x7a>
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (uint32_t) ((uint32_t) ~(RCC_CFGR_SW));
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <SetSysClock+0xb4>)
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <SetSysClock+0xb4>)
 8000fa4:	2107      	movs	r1, #7
 8000fa6:	438a      	bics	r2, r1
 8000fa8:	609a      	str	r2, [r3, #8]
	RCC->CFGR |= (uint32_t) RCC_CFGR_SW_1;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <SetSysClock+0xb4>)
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <SetSysClock+0xb4>)
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	609a      	str	r2, [r3, #8]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1)
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SetSysClock+0xb4>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2238      	movs	r2, #56	; 0x38
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b10      	cmp	r3, #16
 8000fc2:	d1f9      	bne.n	8000fb8 <SetSysClock+0xa0>
		;
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40022000 	.word	0x40022000
 8000fd4:	fffff0ff 	.word	0xfffff0ff
 8000fd8:	ffff8fff 	.word	0xffff8fff
 8000fdc:	1fff808f 	.word	0x1fff808f
 8000fe0:	31001003 	.word	0x31001003

08000fe4 <RCC_DeInit>:

void RCC_DeInit(void){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	  /* Set HSION bit to the reset value */
		RCC->CR |= RCC_CR_HSION;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <RCC_DeInit+0x7c>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <RCC_DeInit+0x7c>)
 8000fee:	2180      	movs	r1, #128	; 0x80
 8000ff0:	0049      	lsls	r1, r1, #1
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
	  /* Wait till HSI is ready */
		while((RCC->CR& RCC_CR_HSIRDY)==0);
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <RCC_DeInit+0x7c>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4013      	ands	r3, r2
 8001002:	d0f9      	beq.n	8000ff8 <RCC_DeInit+0x14>
	  /* Set HSITRIM[6:0] bits to the reset value */
	  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <RCC_DeInit+0x7c>)
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	01d2      	lsls	r2, r2, #7
 800100a:	605a      	str	r2, [r3, #4]
	  /* Reset CFGR register (HSI is selected as system clock source) */
	  RCC->CFGR = 0x00000000u;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <RCC_DeInit+0x7c>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
	  /* Wait till HSI is ready */
	  while((RCC->CFGR & RCC_CFGR_SWS) != 0U)
 8001012:	e003      	b.n	800101c <RCC_DeInit+0x38>
	  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
	  RCC->CR = RCC_CR_HSION;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <RCC_DeInit+0x7c>)
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	0052      	lsls	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]
	  while((RCC->CFGR & RCC_CFGR_SWS) != 0U)
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <RCC_DeInit+0x7c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	2238      	movs	r2, #56	; 0x38
 8001022:	4013      	ands	r3, r2
 8001024:	d1f6      	bne.n	8001014 <RCC_DeInit+0x30>
	  /* Then again to HSEBYP in case bypass was enabled */
	  RCC->CR = RCC_CR_HSION;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <RCC_DeInit+0x7c>)
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	0052      	lsls	r2, r2, #1
 800102c:	601a      	str	r2, [r3, #0]
	  /* Wait till PLL is ready */
	  while ((RCC->CR & RCC_CR_PLLRDY) != 0U)
 800102e:	e003      	b.n	8001038 <RCC_DeInit+0x54>
	  /* once PLL is OFF, reset PLLCFGR register to default value */
	  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <RCC_DeInit+0x7c>)
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	0152      	lsls	r2, r2, #5
 8001036:	60da      	str	r2, [r3, #12]
	  while ((RCC->CR & RCC_CR_PLLRDY) != 0U)
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <RCC_DeInit+0x7c>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	049b      	lsls	r3, r3, #18
 8001040:	4013      	ands	r3, r2
 8001042:	d1f5      	bne.n	8001030 <RCC_DeInit+0x4c>
	  /* Disable all interrupts */
	  RCC->CIER = 0x00000000u;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <RCC_DeInit+0x7c>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
	  /* Clear all flags */
	  RCC->CICR = 0xFFFFFFFFu;
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <RCC_DeInit+0x7c>)
 800104c:	2201      	movs	r2, #1
 800104e:	4252      	negs	r2, r2
 8001050:	621a      	str	r2, [r3, #32]
	  /* Update the SystemCoreClock global variable */
	  SystemCoreClock = HSI_VALUE;
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <RCC_DeInit+0x80>)
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <RCC_DeInit+0x84>)
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	40021000 	.word	0x40021000
 8001064:	20000000 	.word	0x20000000
 8001068:	00f42400 	.word	0x00f42400

0800106c <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	0002      	movs	r2, r0
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	701a      	strb	r2, [r3, #0]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */

	if (outptr) {
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <xputc+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <xputc+0x26>
		*outptr++ = (unsigned char)c;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <xputc+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	1c59      	adds	r1, r3, #1
 8001086:	4a09      	ldr	r2, [pc, #36]	; (80010ac <xputc+0x40>)
 8001088:	6011      	str	r1, [r2, #0]
 800108a:	1dfa      	adds	r2, r7, #7
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	701a      	strb	r2, [r3, #0]
		return;
 8001090:	e009      	b.n	80010a6 <xputc+0x3a>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <xputc+0x44>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <xputc+0x3a>
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <xputc+0x44>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1dfa      	adds	r2, r7, #7
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	0010      	movs	r0, r2
 80010a4:	4798      	blx	r3
}
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000047c 	.word	0x2000047c
 80010b0:	20000478 	.word	0x20000478

080010b4 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	while (*str)
 80010bc:	e006      	b.n	80010cc <xputs+0x18>
		xputc(*str++);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	0018      	movs	r0, r3
 80010c8:	f7ff ffd0 	bl	800106c <xputc>
	while (*str)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f4      	bne.n	80010be <xputs+0xa>
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b002      	add	sp, #8
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b08f      	sub	sp, #60	; 0x3c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	211f      	movs	r1, #31
 80010f2:	187a      	adds	r2, r7, r1
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	7013      	strb	r3, [r2, #0]
		if (!c) break;				/* End of format? */
 80010f8:	000a      	movs	r2, r1
 80010fa:	18bb      	adds	r3, r7, r2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d100      	bne.n	8001104 <xvprintf+0x24>
 8001102:	e164      	b.n	80013ce <xvprintf+0x2ee>
		if (c != '%') {				/* Pass through it if not a % sequense */
 8001104:	18bb      	adds	r3, r7, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b25      	cmp	r3, #37	; 0x25
 800110a:	d005      	beq.n	8001118 <xvprintf+0x38>
			xputc(c); continue;
 800110c:	18bb      	adds	r3, r7, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ffab 	bl	800106c <xputc>
 8001116:	e159      	b.n	80013cc <xvprintf+0x2ec>
		}
		f = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
		c = *fmt++;					/* Get first char of the sequense */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	211f      	movs	r1, #31
 8001124:	187a      	adds	r2, r7, r1
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	7013      	strb	r3, [r2, #0]
		if (c == '0') {				/* Flag: '0' padded */
 800112a:	187b      	adds	r3, r7, r1
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b30      	cmp	r3, #48	; 0x30
 8001130:	d108      	bne.n	8001144 <xvprintf+0x64>
			f = 1; c = *fmt++;
 8001132:	2301      	movs	r3, #1
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	187a      	adds	r2, r7, r1
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	7013      	strb	r3, [r2, #0]
 8001142:	e00c      	b.n	800115e <xvprintf+0x7e>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8001144:	211f      	movs	r1, #31
 8001146:	187b      	adds	r3, r7, r1
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b2d      	cmp	r3, #45	; 0x2d
 800114c:	d107      	bne.n	800115e <xvprintf+0x7e>
				f = 2; c = *fmt++;
 800114e:	2302      	movs	r3, #2
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	187a      	adds	r2, r7, r1
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	7013      	strb	r3, [r2, #0]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
 8001162:	e011      	b.n	8001188 <xvprintf+0xa8>
			w = w * 10 + c - '0';
 8001164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001166:	0013      	movs	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	189b      	adds	r3, r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	001a      	movs	r2, r3
 8001170:	211f      	movs	r1, #31
 8001172:	187b      	adds	r3, r7, r1
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	18d3      	adds	r3, r2, r3
 8001178:	3b30      	subs	r3, #48	; 0x30
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	187a      	adds	r2, r7, r1
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	7013      	strb	r3, [r2, #0]
 8001188:	221f      	movs	r2, #31
 800118a:	18bb      	adds	r3, r7, r2
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b2f      	cmp	r3, #47	; 0x2f
 8001190:	d903      	bls.n	800119a <xvprintf+0xba>
 8001192:	18bb      	adds	r3, r7, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b39      	cmp	r3, #57	; 0x39
 8001198:	d9e4      	bls.n	8001164 <xvprintf+0x84>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800119a:	221f      	movs	r2, #31
 800119c:	18bb      	adds	r3, r7, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b6c      	cmp	r3, #108	; 0x6c
 80011a2:	d003      	beq.n	80011ac <xvprintf+0xcc>
 80011a4:	18bb      	adds	r3, r7, r2
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b4c      	cmp	r3, #76	; 0x4c
 80011aa:	d10a      	bne.n	80011c2 <xvprintf+0xe2>
			f |= 4; c = *fmt++;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	2204      	movs	r2, #4
 80011b0:	4313      	orrs	r3, r2
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	221f      	movs	r2, #31
 80011bc:	18ba      	adds	r2, r7, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	7013      	strb	r3, [r2, #0]
		}
		if (!c) break;				/* End of format? */
 80011c2:	221f      	movs	r2, #31
 80011c4:	18bb      	adds	r3, r7, r2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d100      	bne.n	80011ce <xvprintf+0xee>
 80011cc:	e101      	b.n	80013d2 <xvprintf+0x2f2>
		d = c;
 80011ce:	211e      	movs	r1, #30
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	18ba      	adds	r2, r7, r2
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	701a      	strb	r2, [r3, #0]
		if (d >= 'a') d -= 0x20;
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b60      	cmp	r3, #96	; 0x60
 80011de:	d904      	bls.n	80011ea <xvprintf+0x10a>
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	187a      	adds	r2, r7, r1
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	3a20      	subs	r2, #32
 80011e8:	701a      	strb	r2, [r3, #0]
		switch (d) {				/* Type is... */
 80011ea:	231e      	movs	r3, #30
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3b42      	subs	r3, #66	; 0x42
 80011f2:	2b16      	cmp	r3, #22
 80011f4:	d847      	bhi.n	8001286 <xvprintf+0x1a6>
 80011f6:	009a      	lsls	r2, r3, #2
 80011f8:	4b78      	ldr	r3, [pc, #480]	; (80013dc <xvprintf+0x2fc>)
 80011fa:	18d3      	adds	r3, r2, r3
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	469f      	mov	pc, r3
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	1d1a      	adds	r2, r3, #4
 8001204:	603a      	str	r2, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	61bb      	str	r3, [r7, #24]
			for (j = 0; p[j]; j++) ;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800120e:	e002      	b.n	8001216 <xvprintf+0x136>
 8001210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001212:	3301      	adds	r3, #1
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	18d3      	adds	r3, r2, r3
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f6      	bne.n	8001210 <xvprintf+0x130>
			while (!(f & 2) && j++ < w) xputc(' ');
 8001222:	e002      	b.n	800122a <xvprintf+0x14a>
 8001224:	2020      	movs	r0, #32
 8001226:	f7ff ff21 	bl	800106c <xputc>
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	2202      	movs	r2, #2
 800122e:	4013      	ands	r3, r2
 8001230:	d105      	bne.n	800123e <xvprintf+0x15e>
 8001232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800123a:	429a      	cmp	r2, r3
 800123c:	d8f2      	bhi.n	8001224 <xvprintf+0x144>
			xputs(p);
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff ff37 	bl	80010b4 <xputs>
			while (j++ < w) xputc(' ');
 8001246:	e002      	b.n	800124e <xvprintf+0x16e>
 8001248:	2020      	movs	r0, #32
 800124a:	f7ff ff0f 	bl	800106c <xputc>
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001256:	429a      	cmp	r2, r3
 8001258:	d8f6      	bhi.n	8001248 <xvprintf+0x168>
			continue;
 800125a:	e0b7      	b.n	80013cc <xvprintf+0x2ec>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	1d1a      	adds	r2, r3, #4
 8001260:	603a      	str	r2, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	0018      	movs	r0, r3
 8001268:	f7ff ff00 	bl	800106c <xputc>
 800126c:	e0ae      	b.n	80013cc <xvprintf+0x2ec>
		case 'B' :					/* Binary */
			r = 2; break;
 800126e:	2302      	movs	r3, #2
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
 8001272:	e00f      	b.n	8001294 <xvprintf+0x1b4>
		case 'O' :					/* Octal */
			r = 8; break;
 8001274:	2308      	movs	r3, #8
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
 8001278:	e00c      	b.n	8001294 <xvprintf+0x1b4>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800127a:	230a      	movs	r3, #10
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
 800127e:	e009      	b.n	8001294 <xvprintf+0x1b4>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8001280:	2310      	movs	r3, #16
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
 8001284:	e006      	b.n	8001294 <xvprintf+0x1b4>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8001286:	231f      	movs	r3, #31
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff feed 	bl	800106c <xputc>
 8001292:	e09b      	b.n	80013cc <xvprintf+0x2ec>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	2204      	movs	r2, #4
 8001298:	4013      	ands	r3, r2
 800129a:	d004      	beq.n	80012a6 <xvprintf+0x1c6>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	1d1a      	adds	r2, r3, #4
 80012a0:	603a      	str	r2, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	e00d      	b.n	80012c2 <xvprintf+0x1e2>
 80012a6:	231e      	movs	r3, #30
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b44      	cmp	r3, #68	; 0x44
 80012ae:	d104      	bne.n	80012ba <xvprintf+0x1da>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	1d1a      	adds	r2, r3, #4
 80012b4:	603a      	str	r2, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	e003      	b.n	80012c2 <xvprintf+0x1e2>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	1d1a      	adds	r2, r3, #4
 80012be:	603a      	str	r2, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	623b      	str	r3, [r7, #32]
		if (d == 'D' && (v & 0x80000000)) {
 80012c4:	231e      	movs	r3, #30
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b44      	cmp	r3, #68	; 0x44
 80012cc:	d109      	bne.n	80012e2 <xvprintf+0x202>
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da06      	bge.n	80012e2 <xvprintf+0x202>
			v = 0 - v;
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	425b      	negs	r3, r3
 80012d8:	623b      	str	r3, [r7, #32]
			f |= 8;
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	2208      	movs	r2, #8
 80012de:	4313      	orrs	r3, r2
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		i = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
		do {
			d = (char)(v % r); v /= r;
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012ea:	0018      	movs	r0, r3
 80012ec:	f7fe ff90 	bl	8000210 <__aeabi_uidivmod>
 80012f0:	000b      	movs	r3, r1
 80012f2:	001a      	movs	r2, r3
 80012f4:	241e      	movs	r4, #30
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80012fc:	6a38      	ldr	r0, [r7, #32]
 80012fe:	f7fe ff01 	bl	8000104 <__udivsi3>
 8001302:	0003      	movs	r3, r0
 8001304:	623b      	str	r3, [r7, #32]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8001306:	193b      	adds	r3, r7, r4
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b09      	cmp	r3, #9
 800130c:	d90d      	bls.n	800132a <xvprintf+0x24a>
 800130e:	231f      	movs	r3, #31
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b78      	cmp	r3, #120	; 0x78
 8001316:	d101      	bne.n	800131c <xvprintf+0x23c>
 8001318:	2327      	movs	r3, #39	; 0x27
 800131a:	e000      	b.n	800131e <xvprintf+0x23e>
 800131c:	2307      	movs	r3, #7
 800131e:	211e      	movs	r1, #30
 8001320:	187a      	adds	r2, r7, r1
 8001322:	1879      	adds	r1, r7, r1
 8001324:	7809      	ldrb	r1, [r1, #0]
 8001326:	185b      	adds	r3, r3, r1
 8001328:	7013      	strb	r3, [r2, #0]
			s[i++] = d + '0';
 800132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	633a      	str	r2, [r7, #48]	; 0x30
 8001330:	221e      	movs	r2, #30
 8001332:	18ba      	adds	r2, r7, r2
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	3230      	adds	r2, #48	; 0x30
 8001338:	b2d1      	uxtb	r1, r2
 800133a:	2208      	movs	r2, #8
 800133c:	18ba      	adds	r2, r7, r2
 800133e:	54d1      	strb	r1, [r2, r3]
		} while (v && i < sizeof(s));
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <xvprintf+0x26c>
 8001346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d9cc      	bls.n	80012e6 <xvprintf+0x206>
		if (f & 8) s[i++] = '-';
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	2208      	movs	r2, #8
 8001350:	4013      	ands	r3, r2
 8001352:	d006      	beq.n	8001362 <xvprintf+0x282>
 8001354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	633a      	str	r2, [r7, #48]	; 0x30
 800135a:	2208      	movs	r2, #8
 800135c:	18ba      	adds	r2, r7, r2
 800135e:	212d      	movs	r1, #45	; 0x2d
 8001360:	54d1      	strb	r1, [r2, r3]
		j = i; d = (f & 1) ? '0' : ' ';
 8001362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	2201      	movs	r2, #1
 800136a:	4013      	ands	r3, r2
 800136c:	d001      	beq.n	8001372 <xvprintf+0x292>
 800136e:	2230      	movs	r2, #48	; 0x30
 8001370:	e000      	b.n	8001374 <xvprintf+0x294>
 8001372:	2220      	movs	r2, #32
 8001374:	231e      	movs	r3, #30
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	701a      	strb	r2, [r3, #0]
		while (!(f & 2) && j++ < w) xputc(d);
 800137a:	e005      	b.n	8001388 <xvprintf+0x2a8>
 800137c:	231e      	movs	r3, #30
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	0018      	movs	r0, r3
 8001384:	f7ff fe72 	bl	800106c <xputc>
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	2202      	movs	r2, #2
 800138c:	4013      	ands	r3, r2
 800138e:	d105      	bne.n	800139c <xvprintf+0x2bc>
 8001390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001398:	429a      	cmp	r2, r3
 800139a:	d8ef      	bhi.n	800137c <xvprintf+0x29c>
		do xputc(s[--i]); while(i);
 800139c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139e:	3b01      	subs	r3, #1
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
 80013a2:	2308      	movs	r3, #8
 80013a4:	18fa      	adds	r2, r7, r3
 80013a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a8:	18d3      	adds	r3, r2, r3
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff fe5d 	bl	800106c <xputc>
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f1      	bne.n	800139c <xvprintf+0x2bc>
		while (j++ < w) xputc(' ');
 80013b8:	e002      	b.n	80013c0 <xvprintf+0x2e0>
 80013ba:	2020      	movs	r0, #32
 80013bc:	f7ff fe56 	bl	800106c <xputc>
 80013c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f6      	bhi.n	80013ba <xvprintf+0x2da>
		c = *fmt++;					/* Get a char */
 80013cc:	e68d      	b.n	80010ea <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	e000      	b.n	80013d4 <xvprintf+0x2f4>
		if (!c) break;				/* End of format? */
 80013d2:	46c0      	nop			; (mov r8, r8)
	}
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b00f      	add	sp, #60	; 0x3c
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	08001bc0 	.word	0x08001bc0

080013e0 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 80013e0:	b40f      	push	{r0, r1, r2, r3}
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 80013e8:	2314      	movs	r3, #20
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	0011      	movs	r1, r2
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff fe73 	bl	80010e0 <xvprintf>
	va_end(arp);
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bc80      	pop	{r7}
 8001402:	bc08      	pop	{r3}
 8001404:	b004      	add	sp, #16
 8001406:	4718      	bx	r3

08001408 <Receive_Byte>:
 * @param  c: Character
 * @param  timeout: Timeout
 * @retval 0: Byte received
 *         -1: Timeout
 */
static int32_t Receive_Byte(uint8_t *c, uint32_t timeout) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	while (timeout-- > 0) {
 8001412:	e008      	b.n	8001426 <Receive_Byte+0x1e>
		if (SerialKeyPressed(c) == 1) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	0018      	movs	r0, r3
 8001418:	f7ff f97e 	bl	8000718 <SerialKeyPressed>
 800141c:	0003      	movs	r3, r0
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <Receive_Byte+0x1e>
			return 0;
 8001422:	2300      	movs	r3, #0
 8001424:	e006      	b.n	8001434 <Receive_Byte+0x2c>
	while (timeout-- > 0) {
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	1e5a      	subs	r2, r3, #1
 800142a:	603a      	str	r2, [r7, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f1      	bne.n	8001414 <Receive_Byte+0xc>
		}
	}
	return -1;
 8001430:	2301      	movs	r3, #1
 8001432:	425b      	negs	r3, r3
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}

0800143c <Receive_Packet>:
 *    >0: packet length
 * @retval 0: normally return
 *        -1: timeout or packet error
 *         1: abort by user
 */
static int32_t Receive_Packet(uint8_t *data, int32_t *length, uint32_t timeout) {
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	uint16_t i, packet_size;
	uint8_t c;
	*length = 0;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
	if (Receive_Byte(&c, timeout) != 0) {
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	2313      	movs	r3, #19
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	0011      	movs	r1, r2
 8001456:	0018      	movs	r0, r3
 8001458:	f7ff ffd6 	bl	8001408 <Receive_Byte>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d002      	beq.n	8001466 <Receive_Packet+0x2a>
		return -1;
 8001460:	2301      	movs	r3, #1
 8001462:	425b      	negs	r3, r3
 8001464:	e076      	b.n	8001554 <Receive_Packet+0x118>
	}
	switch (c) {
 8001466:	2313      	movs	r3, #19
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b61      	cmp	r3, #97	; 0x61
 800146e:	d031      	beq.n	80014d4 <Receive_Packet+0x98>
 8001470:	dc32      	bgt.n	80014d8 <Receive_Packet+0x9c>
 8001472:	2b41      	cmp	r3, #65	; 0x41
 8001474:	d02e      	beq.n	80014d4 <Receive_Packet+0x98>
 8001476:	dc2f      	bgt.n	80014d8 <Receive_Packet+0x9c>
 8001478:	2b18      	cmp	r3, #24
 800147a:	d015      	beq.n	80014a8 <Receive_Packet+0x6c>
 800147c:	dc2c      	bgt.n	80014d8 <Receive_Packet+0x9c>
 800147e:	2b04      	cmp	r3, #4
 8001480:	d010      	beq.n	80014a4 <Receive_Packet+0x68>
 8001482:	dc29      	bgt.n	80014d8 <Receive_Packet+0x9c>
 8001484:	2b01      	cmp	r3, #1
 8001486:	d002      	beq.n	800148e <Receive_Packet+0x52>
 8001488:	2b02      	cmp	r3, #2
 800148a:	d005      	beq.n	8001498 <Receive_Packet+0x5c>
 800148c:	e024      	b.n	80014d8 <Receive_Packet+0x9c>
	case SOH:
		packet_size = PACKET_SIZE;
 800148e:	2314      	movs	r3, #20
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	801a      	strh	r2, [r3, #0]
		break;
 8001496:	e022      	b.n	80014de <Receive_Packet+0xa2>
	case STX:
		packet_size = PACKET_1K_SIZE;
 8001498:	2314      	movs	r3, #20
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	00d2      	lsls	r2, r2, #3
 80014a0:	801a      	strh	r2, [r3, #0]
		break;
 80014a2:	e01c      	b.n	80014de <Receive_Packet+0xa2>
	case EOT:
		return 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e055      	b.n	8001554 <Receive_Packet+0x118>
	case CA:
		if ((Receive_Byte(&c, timeout) == 0) && (c == CA)) {
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	2413      	movs	r4, #19
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff ffa9 	bl	8001408 <Receive_Byte>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d109      	bne.n	80014ce <Receive_Packet+0x92>
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b18      	cmp	r3, #24
 80014c0:	d105      	bne.n	80014ce <Receive_Packet+0x92>
			*length = -1;
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2201      	movs	r2, #1
 80014c6:	4252      	negs	r2, r2
 80014c8:	601a      	str	r2, [r3, #0]
			return 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e042      	b.n	8001554 <Receive_Packet+0x118>
		} else {
			return -1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	425b      	negs	r3, r3
 80014d2:	e03f      	b.n	8001554 <Receive_Packet+0x118>
		}
	case ABORT1:
	case ABORT2:
		return 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e03d      	b.n	8001554 <Receive_Packet+0x118>
	default:
		return -1;
 80014d8:	2301      	movs	r3, #1
 80014da:	425b      	negs	r3, r3
 80014dc:	e03a      	b.n	8001554 <Receive_Packet+0x118>
	}
	*data = c;
 80014de:	2313      	movs	r3, #19
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	701a      	strb	r2, [r3, #0]
	for (i = 1; i < (packet_size + PACKET_OVERHEAD); i++) {
 80014e8:	2316      	movs	r3, #22
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	2201      	movs	r2, #1
 80014ee:	801a      	strh	r2, [r3, #0]
 80014f0:	e014      	b.n	800151c <Receive_Packet+0xe0>
		if (Receive_Byte(data + i, timeout) != 0) {
 80014f2:	2316      	movs	r3, #22
 80014f4:	18fb      	adds	r3, r7, r3
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	18d3      	adds	r3, r2, r3
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	0011      	movs	r1, r2
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff ff81 	bl	8001408 <Receive_Byte>
 8001506:	1e03      	subs	r3, r0, #0
 8001508:	d002      	beq.n	8001510 <Receive_Packet+0xd4>
			return -1;
 800150a:	2301      	movs	r3, #1
 800150c:	425b      	negs	r3, r3
 800150e:	e021      	b.n	8001554 <Receive_Packet+0x118>
	for (i = 1; i < (packet_size + PACKET_OVERHEAD); i++) {
 8001510:	2116      	movs	r1, #22
 8001512:	187b      	adds	r3, r7, r1
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	187b      	adds	r3, r7, r1
 8001518:	3201      	adds	r2, #1
 800151a:	801a      	strh	r2, [r3, #0]
 800151c:	2314      	movs	r3, #20
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	1d1a      	adds	r2, r3, #4
 8001524:	2316      	movs	r3, #22
 8001526:	18fb      	adds	r3, r7, r3
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	429a      	cmp	r2, r3
 800152c:	dae1      	bge.n	80014f2 <Receive_Packet+0xb6>
		}
	}
	if (data[PACKET_SEQNO_INDEX] != ((data[PACKET_SEQNO_COMP_INDEX] ^ 0xff) & 0xff)) {
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3301      	adds	r3, #1
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3302      	adds	r3, #2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	43db      	mvns	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	429a      	cmp	r2, r3
 8001540:	d002      	beq.n	8001548 <Receive_Packet+0x10c>
		return -1;
 8001542:	2301      	movs	r3, #1
 8001544:	425b      	negs	r3, r3
 8001546:	e005      	b.n	8001554 <Receive_Packet+0x118>
	}
	*length = packet_size;
 8001548:	2314      	movs	r3, #20
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	601a      	str	r2, [r3, #0]
	return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b007      	add	sp, #28
 800155a:	bd90      	pop	{r4, r7, pc}

0800155c <Ymodem_Receive>:
 * @brief  Receive a file using the ymodem protocol
 * @param  buf: Address of the first byte
 * @retval The size of the file
 */
uint8_t packet_data[PACKET_1K_SIZE + PACKET_OVERHEAD];
int32_t Ymodem_Receive(uint8_t *buf) {
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	4cde      	ldr	r4, [pc, #888]	; (80018d8 <Ymodem_Receive+0x37c>)
 8001560:	44a5      	add	sp, r4
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	uint8_t file_size[FILE_SIZE_LENGTH], *file_ptr, *buf_ptr;
	uint8_t buf_data[PACKET_1K_SIZE];
	int32_t i, j, packet_length, session_done, file_done, packets_received, errors, session_begin, size = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
	uint32_t DestinationAddress = BOOT_PRIMARY_ADDRESS; /* Flash user program offset */
 800156a:	4bdc      	ldr	r3, [pc, #880]	; (80018dc <Ymodem_Receive+0x380>)
 800156c:	4adc      	ldr	r2, [pc, #880]	; (80018e0 <Ymodem_Receive+0x384>)
 800156e:	18b9      	adds	r1, r7, r2
 8001570:	600b      	str	r3, [r1, #0]
	uint32_t FlashDestination = DestinationAddress;
 8001572:	18bb      	adds	r3, r7, r2
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4adb      	ldr	r2, [pc, #876]	; (80018e4 <Ymodem_Receive+0x388>)
 8001578:	18ba      	adds	r2, r7, r2
 800157a:	6013      	str	r3, [r2, #0]
	FLASH_Unlock();
 800157c:	f7fe ff9e 	bl	80004bc <FLASH_Unlock>
	for (session_done = 0, errors = 0, session_begin = 0;;) {
 8001580:	2300      	movs	r3, #0
 8001582:	2288      	movs	r2, #136	; 0x88
 8001584:	00d2      	lsls	r2, r2, #3
 8001586:	18ba      	adds	r2, r7, r2
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	2300      	movs	r3, #0
 800158c:	4ad6      	ldr	r2, [pc, #856]	; (80018e8 <Ymodem_Receive+0x38c>)
 800158e:	18ba      	adds	r2, r7, r2
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	2300      	movs	r3, #0
 8001594:	2286      	movs	r2, #134	; 0x86
 8001596:	00d2      	lsls	r2, r2, #3
 8001598:	18ba      	adds	r2, r7, r2
 800159a:	6013      	str	r3, [r2, #0]
		for (packets_received = 0, file_done = 0;;) {
 800159c:	2300      	movs	r3, #0
 800159e:	2287      	movs	r2, #135	; 0x87
 80015a0:	00d2      	lsls	r2, r2, #3
 80015a2:	18ba      	adds	r2, r7, r2
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	2300      	movs	r3, #0
 80015a8:	4ad0      	ldr	r2, [pc, #832]	; (80018ec <Ymodem_Receive+0x390>)
 80015aa:	18ba      	adds	r2, r7, r2
 80015ac:	6013      	str	r3, [r2, #0]
			switch (Receive_Packet(packet_data, &packet_length, NAK_TIMEOUT)) {
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	035a      	lsls	r2, r3, #13
 80015b2:	2310      	movs	r3, #16
 80015b4:	18f9      	adds	r1, r7, r3
 80015b6:	4bce      	ldr	r3, [pc, #824]	; (80018f0 <Ymodem_Receive+0x394>)
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff ff3f 	bl	800143c <Receive_Packet>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d003      	beq.n	80015ca <Ymodem_Receive+0x6e>
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d100      	bne.n	80015c8 <Ymodem_Receive+0x6c>
 80015c6:	e15b      	b.n	8001880 <Ymodem_Receive+0x324>
 80015c8:	e163      	b.n	8001892 <Ymodem_Receive+0x336>
			case 0:
				errors = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	4ac6      	ldr	r2, [pc, #792]	; (80018e8 <Ymodem_Receive+0x38c>)
 80015ce:	18ba      	adds	r2, r7, r2
 80015d0:	6013      	str	r3, [r2, #0]
				switch (packet_length) {
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	d002      	beq.n	80015de <Ymodem_Receive+0x82>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <Ymodem_Receive+0x8c>
 80015dc:	e00c      	b.n	80015f8 <Ymodem_Receive+0x9c>
				/* Abort by sender */
				case -1:
					SerialPutChar(ACK);
 80015de:	2006      	movs	r0, #6
 80015e0:	f7ff f88a 	bl	80006f8 <SerialPutChar>
					return 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e1a5      	b.n	8001934 <Ymodem_Receive+0x3d8>
					/* End of transmission */
				case 0:
					SerialPutChar(ACK);
 80015e8:	2006      	movs	r0, #6
 80015ea:	f7ff f885 	bl	80006f8 <SerialPutChar>
					file_done = 1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	4abe      	ldr	r2, [pc, #760]	; (80018ec <Ymodem_Receive+0x390>)
 80015f2:	18ba      	adds	r2, r7, r2
 80015f4:	6013      	str	r3, [r2, #0]
					break;
 80015f6:	e142      	b.n	800187e <Ymodem_Receive+0x322>
					/* Normal packet */
				default:
					if ((packet_data[PACKET_SEQNO_INDEX] & 0xff) != (packets_received & 0xff)) {
 80015f8:	4bbd      	ldr	r3, [pc, #756]	; (80018f0 <Ymodem_Receive+0x394>)
 80015fa:	785b      	ldrb	r3, [r3, #1]
 80015fc:	0019      	movs	r1, r3
 80015fe:	2387      	movs	r3, #135	; 0x87
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	22ff      	movs	r2, #255	; 0xff
 8001608:	4013      	ands	r3, r2
 800160a:	4299      	cmp	r1, r3
 800160c:	d003      	beq.n	8001616 <Ymodem_Receive+0xba>
						SerialPutChar(NAK);
 800160e:	2015      	movs	r0, #21
 8001610:	f7ff f872 	bl	80006f8 <SerialPutChar>
						}
						packets_received++;
						session_begin = 1;
					}
				}
				break;
 8001614:	e15a      	b.n	80018cc <Ymodem_Receive+0x370>
						if (packets_received == 0) {
 8001616:	2387      	movs	r3, #135	; 0x87
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d000      	beq.n	8001624 <Ymodem_Receive+0xc8>
 8001622:	e0c2      	b.n	80017aa <Ymodem_Receive+0x24e>
							if (packet_data[PACKET_HEADER] != 0) {
 8001624:	4bb2      	ldr	r3, [pc, #712]	; (80018f0 <Ymodem_Receive+0x394>)
 8001626:	78db      	ldrb	r3, [r3, #3]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d100      	bne.n	800162e <Ymodem_Receive+0xd2>
 800162c:	e0b0      	b.n	8001790 <Ymodem_Receive+0x234>
								for (i = 0, file_ptr = packet_data + PACKET_HEADER; (*file_ptr != 0) && (i < FILE_NAME_LENGTH);) {
 800162e:	2300      	movs	r3, #0
 8001630:	2289      	movs	r2, #137	; 0x89
 8001632:	00d2      	lsls	r2, r2, #3
 8001634:	18ba      	adds	r2, r7, r2
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4bae      	ldr	r3, [pc, #696]	; (80018f4 <Ymodem_Receive+0x398>)
 800163a:	4aaf      	ldr	r2, [pc, #700]	; (80018f8 <Ymodem_Receive+0x39c>)
 800163c:	18ba      	adds	r2, r7, r2
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	e00f      	b.n	8001662 <Ymodem_Receive+0x106>
									file_name[i++] = *file_ptr++;
 8001642:	49ad      	ldr	r1, [pc, #692]	; (80018f8 <Ymodem_Receive+0x39c>)
 8001644:	187b      	adds	r3, r7, r1
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	1c53      	adds	r3, r2, #1
 800164a:	1879      	adds	r1, r7, r1
 800164c:	600b      	str	r3, [r1, #0]
 800164e:	2089      	movs	r0, #137	; 0x89
 8001650:	00c0      	lsls	r0, r0, #3
 8001652:	183b      	adds	r3, r7, r0
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1c59      	adds	r1, r3, #1
 8001658:	1838      	adds	r0, r7, r0
 800165a:	6001      	str	r1, [r0, #0]
 800165c:	7811      	ldrb	r1, [r2, #0]
 800165e:	4aa7      	ldr	r2, [pc, #668]	; (80018fc <Ymodem_Receive+0x3a0>)
 8001660:	54d1      	strb	r1, [r2, r3]
								for (i = 0, file_ptr = packet_data + PACKET_HEADER; (*file_ptr != 0) && (i < FILE_NAME_LENGTH);) {
 8001662:	4ba5      	ldr	r3, [pc, #660]	; (80018f8 <Ymodem_Receive+0x39c>)
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <Ymodem_Receive+0x11e>
 800166e:	2389      	movs	r3, #137	; 0x89
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	18fb      	adds	r3, r7, r3
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	dde3      	ble.n	8001642 <Ymodem_Receive+0xe6>
								file_name[i++] = '\0';
 800167a:	2089      	movs	r0, #137	; 0x89
 800167c:	00c0      	lsls	r0, r0, #3
 800167e:	183b      	adds	r3, r7, r0
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	1839      	adds	r1, r7, r0
 8001686:	600a      	str	r2, [r1, #0]
 8001688:	4a9c      	ldr	r2, [pc, #624]	; (80018fc <Ymodem_Receive+0x3a0>)
 800168a:	2100      	movs	r1, #0
 800168c:	54d1      	strb	r1, [r2, r3]
								for (i = 0, file_ptr++; (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH);) {
 800168e:	2300      	movs	r3, #0
 8001690:	183a      	adds	r2, r7, r0
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4a98      	ldr	r2, [pc, #608]	; (80018f8 <Ymodem_Receive+0x39c>)
 8001696:	18bb      	adds	r3, r7, r2
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	18ba      	adds	r2, r7, r2
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	e010      	b.n	80016c4 <Ymodem_Receive+0x168>
									file_size[i++] = *file_ptr++;
 80016a2:	4995      	ldr	r1, [pc, #596]	; (80018f8 <Ymodem_Receive+0x39c>)
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	1c53      	adds	r3, r2, #1
 80016aa:	1879      	adds	r1, r7, r1
 80016ac:	600b      	str	r3, [r1, #0]
 80016ae:	2089      	movs	r0, #137	; 0x89
 80016b0:	00c0      	lsls	r0, r0, #3
 80016b2:	183b      	adds	r3, r7, r0
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1c59      	adds	r1, r3, #1
 80016b8:	1838      	adds	r0, r7, r0
 80016ba:	6001      	str	r1, [r0, #0]
 80016bc:	7811      	ldrb	r1, [r2, #0]
 80016be:	4a90      	ldr	r2, [pc, #576]	; (8001900 <Ymodem_Receive+0x3a4>)
 80016c0:	18ba      	adds	r2, r7, r2
 80016c2:	54d1      	strb	r1, [r2, r3]
								for (i = 0, file_ptr++; (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH);) {
 80016c4:	4b8c      	ldr	r3, [pc, #560]	; (80018f8 <Ymodem_Receive+0x39c>)
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d005      	beq.n	80016dc <Ymodem_Receive+0x180>
 80016d0:	2389      	movs	r3, #137	; 0x89
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	dde2      	ble.n	80016a2 <Ymodem_Receive+0x146>
								file_size[i++] = '\0';
 80016dc:	2189      	movs	r1, #137	; 0x89
 80016de:	00c9      	lsls	r1, r1, #3
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	1879      	adds	r1, r7, r1
 80016e8:	600a      	str	r2, [r1, #0]
 80016ea:	4885      	ldr	r0, [pc, #532]	; (8001900 <Ymodem_Receive+0x3a4>)
 80016ec:	183a      	adds	r2, r7, r0
 80016ee:	2100      	movs	r1, #0
 80016f0:	54d1      	strb	r1, [r2, r3]
								Str2Int(file_size, &size);
 80016f2:	230c      	movs	r3, #12
 80016f4:	18fa      	adds	r2, r7, r3
 80016f6:	183b      	adds	r3, r7, r0
 80016f8:	0011      	movs	r1, r2
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7ff fa4e 	bl	8000b9c <Str2Int>
								if (size > (FLASH_SIZE - 1)) {
 8001700:	4b80      	ldr	r3, [pc, #512]	; (8001904 <Ymodem_Receive+0x3a8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	029a      	lsls	r2, r3, #10
 8001706:	23fe      	movs	r3, #254	; 0xfe
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	4013      	ands	r3, r2
 800170c:	3b01      	subs	r3, #1
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4293      	cmp	r3, r2
 8001712:	d208      	bcs.n	8001726 <Ymodem_Receive+0x1ca>
									SerialPutChar(CA);
 8001714:	2018      	movs	r0, #24
 8001716:	f7fe ffef 	bl	80006f8 <SerialPutChar>
									SerialPutChar(CA);
 800171a:	2018      	movs	r0, #24
 800171c:	f7fe ffec 	bl	80006f8 <SerialPutChar>
									return -1;
 8001720:	2301      	movs	r3, #1
 8001722:	425b      	negs	r3, r3
 8001724:	e106      	b.n	8001934 <Ymodem_Receive+0x3d8>
								NbrOfPage = FLASH_PagesMask(size);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	0018      	movs	r0, r3
 800172a:	f7fe fd77 	bl	800021c <FLASH_PagesMask>
 800172e:	0003      	movs	r3, r0
 8001730:	001a      	movs	r2, r3
 8001732:	4b75      	ldr	r3, [pc, #468]	; (8001908 <Ymodem_Receive+0x3ac>)
 8001734:	601a      	str	r2, [r3, #0]
								FLASH_Unlock();
 8001736:	f7fe fec1 	bl	80004bc <FLASH_Unlock>
								for (EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++) {
 800173a:	4b74      	ldr	r3, [pc, #464]	; (800190c <Ymodem_Receive+0x3b0>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e015      	b.n	800176e <Ymodem_Receive+0x212>
									FLASHStatus = FLASH_ErasePage(FlashDestination + (PageSize * EraseCounter));
 8001742:	4b73      	ldr	r3, [pc, #460]	; (8001910 <Ymodem_Receive+0x3b4>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	001a      	movs	r2, r3
 8001748:	4b70      	ldr	r3, [pc, #448]	; (800190c <Ymodem_Receive+0x3b0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	435a      	muls	r2, r3
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <Ymodem_Receive+0x388>)
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	18d3      	adds	r3, r2, r3
 8001756:	0018      	movs	r0, r3
 8001758:	f7fe ff12 	bl	8000580 <FLASH_ErasePage>
 800175c:	0003      	movs	r3, r0
 800175e:	001a      	movs	r2, r3
 8001760:	4b6c      	ldr	r3, [pc, #432]	; (8001914 <Ymodem_Receive+0x3b8>)
 8001762:	701a      	strb	r2, [r3, #0]
								for (EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++) {
 8001764:	4b69      	ldr	r3, [pc, #420]	; (800190c <Ymodem_Receive+0x3b0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	4b68      	ldr	r3, [pc, #416]	; (800190c <Ymodem_Receive+0x3b0>)
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	4b67      	ldr	r3, [pc, #412]	; (800190c <Ymodem_Receive+0x3b0>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <Ymodem_Receive+0x3ac>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d203      	bcs.n	8001782 <Ymodem_Receive+0x226>
 800177a:	4b66      	ldr	r3, [pc, #408]	; (8001914 <Ymodem_Receive+0x3b8>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b04      	cmp	r3, #4
 8001780:	d0df      	beq.n	8001742 <Ymodem_Receive+0x1e6>
								SerialPutChar(ACK);
 8001782:	2006      	movs	r0, #6
 8001784:	f7fe ffb8 	bl	80006f8 <SerialPutChar>
								SerialPutChar(CRC16);
 8001788:	2043      	movs	r0, #67	; 0x43
 800178a:	f7fe ffb5 	bl	80006f8 <SerialPutChar>
 800178e:	e069      	b.n	8001864 <Ymodem_Receive+0x308>
								SerialPutChar(ACK);
 8001790:	2006      	movs	r0, #6
 8001792:	f7fe ffb1 	bl	80006f8 <SerialPutChar>
								file_done = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	4a54      	ldr	r2, [pc, #336]	; (80018ec <Ymodem_Receive+0x390>)
 800179a:	18ba      	adds	r2, r7, r2
 800179c:	6013      	str	r3, [r2, #0]
								session_done = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	2288      	movs	r2, #136	; 0x88
 80017a2:	00d2      	lsls	r2, r2, #3
 80017a4:	18ba      	adds	r2, r7, r2
 80017a6:	6013      	str	r3, [r2, #0]
								break;
 80017a8:	e069      	b.n	800187e <Ymodem_Receive+0x322>
							memcpy(buf_data, &packet_data[PACKET_HEADER], packet_length);
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	001a      	movs	r2, r3
 80017ae:	4951      	ldr	r1, [pc, #324]	; (80018f4 <Ymodem_Receive+0x398>)
 80017b0:	2414      	movs	r4, #20
 80017b2:	193b      	adds	r3, r7, r4
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 f911 	bl	80019dc <memcpy>
							RamSource =(uint32_t)buf;
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4b56      	ldr	r3, [pc, #344]	; (8001918 <Ymodem_Receive+0x3bc>)
 80017be:	601a      	str	r2, [r3, #0]
							uint64_t *pRecord = (uint64_t*)buf_data;
 80017c0:	193b      	adds	r3, r7, r4
 80017c2:	2285      	movs	r2, #133	; 0x85
 80017c4:	00d2      	lsls	r2, r2, #3
 80017c6:	18ba      	adds	r2, r7, r2
 80017c8:	6013      	str	r3, [r2, #0]
							for (j = 0; (j < packet_length) && (FlashDestination < DestinationAddress + size); j += 8) {
 80017ca:	2300      	movs	r3, #0
 80017cc:	4a53      	ldr	r2, [pc, #332]	; (800191c <Ymodem_Receive+0x3c0>)
 80017ce:	18ba      	adds	r2, r7, r2
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e033      	b.n	800183c <Ymodem_Receive+0x2e0>
								FLASH_ProgramDoubleWord(FlashDestination, *pRecord);
 80017d4:	2485      	movs	r4, #133	; 0x85
 80017d6:	00e4      	lsls	r4, r4, #3
 80017d8:	193b      	adds	r3, r7, r4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4d40      	ldr	r5, [pc, #256]	; (80018e4 <Ymodem_Receive+0x388>)
 80017e2:	1979      	adds	r1, r7, r5
 80017e4:	6809      	ldr	r1, [r1, #0]
 80017e6:	0008      	movs	r0, r1
 80017e8:	f7fe ff1e 	bl	8000628 <FLASH_ProgramDoubleWord>
								if (*(uint64_t*) FlashDestination != *pRecord) {
 80017ec:	197b      	adds	r3, r7, r5
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	6859      	ldr	r1, [r3, #4]
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4290      	cmp	r0, r2
 80017fe:	d101      	bne.n	8001804 <Ymodem_Receive+0x2a8>
 8001800:	4299      	cmp	r1, r3
 8001802:	d008      	beq.n	8001816 <Ymodem_Receive+0x2ba>
									SerialPutChar(CA);
 8001804:	2018      	movs	r0, #24
 8001806:	f7fe ff77 	bl	80006f8 <SerialPutChar>
									SerialPutChar(CA);
 800180a:	2018      	movs	r0, #24
 800180c:	f7fe ff74 	bl	80006f8 <SerialPutChar>
									return -2;
 8001810:	2302      	movs	r3, #2
 8001812:	425b      	negs	r3, r3
 8001814:	e08e      	b.n	8001934 <Ymodem_Receive+0x3d8>
								FlashDestination += 8;
 8001816:	4a33      	ldr	r2, [pc, #204]	; (80018e4 <Ymodem_Receive+0x388>)
 8001818:	18bb      	adds	r3, r7, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3308      	adds	r3, #8
 800181e:	18ba      	adds	r2, r7, r2
 8001820:	6013      	str	r3, [r2, #0]
								pRecord++;
 8001822:	2285      	movs	r2, #133	; 0x85
 8001824:	00d2      	lsls	r2, r2, #3
 8001826:	18bb      	adds	r3, r7, r2
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3308      	adds	r3, #8
 800182c:	18ba      	adds	r2, r7, r2
 800182e:	6013      	str	r3, [r2, #0]
							for (j = 0; (j < packet_length) && (FlashDestination < DestinationAddress + size); j += 8) {
 8001830:	4a3a      	ldr	r2, [pc, #232]	; (800191c <Ymodem_Receive+0x3c0>)
 8001832:	18bb      	adds	r3, r7, r2
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3308      	adds	r3, #8
 8001838:	18ba      	adds	r2, r7, r2
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4a37      	ldr	r2, [pc, #220]	; (800191c <Ymodem_Receive+0x3c0>)
 8001840:	18ba      	adds	r2, r7, r2
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	da0a      	bge.n	800185e <Ymodem_Receive+0x302>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	001a      	movs	r2, r3
 800184c:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <Ymodem_Receive+0x384>)
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	18d3      	adds	r3, r2, r3
 8001854:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <Ymodem_Receive+0x388>)
 8001856:	18ba      	adds	r2, r7, r2
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d3ba      	bcc.n	80017d4 <Ymodem_Receive+0x278>
							SerialPutChar(ACK);
 800185e:	2006      	movs	r0, #6
 8001860:	f7fe ff4a 	bl	80006f8 <SerialPutChar>
						packets_received++;
 8001864:	2287      	movs	r2, #135	; 0x87
 8001866:	00d2      	lsls	r2, r2, #3
 8001868:	18bb      	adds	r3, r7, r2
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	18ba      	adds	r2, r7, r2
 8001870:	6013      	str	r3, [r2, #0]
						session_begin = 1;
 8001872:	2301      	movs	r3, #1
 8001874:	2286      	movs	r2, #134	; 0x86
 8001876:	00d2      	lsls	r2, r2, #3
 8001878:	18ba      	adds	r2, r7, r2
 800187a:	6013      	str	r3, [r2, #0]
				break;
 800187c:	e026      	b.n	80018cc <Ymodem_Receive+0x370>
 800187e:	e025      	b.n	80018cc <Ymodem_Receive+0x370>
			case 1:
				SerialPutChar(CA);
 8001880:	2018      	movs	r0, #24
 8001882:	f7fe ff39 	bl	80006f8 <SerialPutChar>
				SerialPutChar(CA);
 8001886:	2018      	movs	r0, #24
 8001888:	f7fe ff36 	bl	80006f8 <SerialPutChar>
				return -3;
 800188c:	2303      	movs	r3, #3
 800188e:	425b      	negs	r3, r3
 8001890:	e050      	b.n	8001934 <Ymodem_Receive+0x3d8>
			default:
				if (session_begin > 0) {
 8001892:	2386      	movs	r3, #134	; 0x86
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dd05      	ble.n	80018aa <Ymodem_Receive+0x34e>
					errors++;
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <Ymodem_Receive+0x38c>)
 80018a0:	18bb      	adds	r3, r7, r2
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	18ba      	adds	r2, r7, r2
 80018a8:	6013      	str	r3, [r2, #0]
				}
				if (errors > MAX_ERRORS) {
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <Ymodem_Receive+0x38c>)
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b05      	cmp	r3, #5
 80018b2:	dd07      	ble.n	80018c4 <Ymodem_Receive+0x368>
					SerialPutChar(CA);
 80018b4:	2018      	movs	r0, #24
 80018b6:	f7fe ff1f 	bl	80006f8 <SerialPutChar>
					SerialPutChar(CA);
 80018ba:	2018      	movs	r0, #24
 80018bc:	f7fe ff1c 	bl	80006f8 <SerialPutChar>
					return 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e037      	b.n	8001934 <Ymodem_Receive+0x3d8>
				}
				SerialPutChar(CRC16);
 80018c4:	2043      	movs	r0, #67	; 0x43
 80018c6:	f7fe ff17 	bl	80006f8 <SerialPutChar>
				break;
 80018ca:	46c0      	nop			; (mov r8, r8)
			}
			if (file_done != 0) {
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <Ymodem_Receive+0x390>)
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d124      	bne.n	8001920 <Ymodem_Receive+0x3c4>
			switch (Receive_Packet(packet_data, &packet_length, NAK_TIMEOUT)) {
 80018d6:	e66a      	b.n	80015ae <Ymodem_Receive+0x52>
 80018d8:	fffffbb0 	.word	0xfffffbb0
 80018dc:	08002800 	.word	0x08002800
 80018e0:	00000424 	.word	0x00000424
 80018e4:	0000042c 	.word	0x0000042c
 80018e8:	00000434 	.word	0x00000434
 80018ec:	0000043c 	.word	0x0000043c
 80018f0:	2000058c 	.word	0x2000058c
 80018f4:	2000058f 	.word	0x2000058f
 80018f8:	0000044c 	.word	0x0000044c
 80018fc:	20000480 	.word	0x20000480
 8001900:	00000414 	.word	0x00000414
 8001904:	1fff75e0 	.word	0x1fff75e0
 8001908:	20000584 	.word	0x20000584
 800190c:	20000580 	.word	0x20000580
 8001910:	20000004 	.word	0x20000004
 8001914:	20000006 	.word	0x20000006
 8001918:	20000588 	.word	0x20000588
 800191c:	00000444 	.word	0x00000444
				break;
 8001920:	46c0      	nop			; (mov r8, r8)
			}
		}
		if (session_done != 0) {
 8001922:	2388      	movs	r3, #136	; 0x88
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d100      	bne.n	8001930 <Ymodem_Receive+0x3d4>
		for (packets_received = 0, file_done = 0;;) {
 800192e:	e635      	b.n	800159c <Ymodem_Receive+0x40>
			break;
 8001930:	46c0      	nop			; (mov r8, r8)
		}
	}
	return (int32_t) size;
 8001932:	68fb      	ldr	r3, [r7, #12]

}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	238a      	movs	r3, #138	; 0x8a
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	449d      	add	sp, r3
 800193e:	bdb0      	pop	{r4, r5, r7, pc}

08001940 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001942:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001944:	e000      	b.n	8001948 <Reset_Handler+0x8>
 8001946:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <LoopForever+0x6>)
  ldr r1, =_edata
 800194a:	490d      	ldr	r1, [pc, #52]	; (8001980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <LoopForever+0xe>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001960:	4c0a      	ldr	r4, [pc, #40]	; (800198c <LoopForever+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800196e:	f000 f811 	bl	8001994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001972:	f7fe ffe1 	bl	8000938 <main>

08001976 <LoopForever>:

LoopForever:
    b LoopForever
 8001976:	e7fe      	b.n	8001976 <LoopForever>
  ldr   r0, =_estack
 8001978:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001984:	08001c24 	.word	0x08001c24
  ldr r2, =_sbss
 8001988:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800198c:	20000994 	.word	0x20000994

08001990 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_COMP_IRQHandler>
	...

08001994 <__libc_init_array>:
 8001994:	b570      	push	{r4, r5, r6, lr}
 8001996:	2600      	movs	r6, #0
 8001998:	4d0c      	ldr	r5, [pc, #48]	; (80019cc <__libc_init_array+0x38>)
 800199a:	4c0d      	ldr	r4, [pc, #52]	; (80019d0 <__libc_init_array+0x3c>)
 800199c:	1b64      	subs	r4, r4, r5
 800199e:	10a4      	asrs	r4, r4, #2
 80019a0:	42a6      	cmp	r6, r4
 80019a2:	d109      	bne.n	80019b8 <__libc_init_array+0x24>
 80019a4:	2600      	movs	r6, #0
 80019a6:	f000 f823 	bl	80019f0 <_init>
 80019aa:	4d0a      	ldr	r5, [pc, #40]	; (80019d4 <__libc_init_array+0x40>)
 80019ac:	4c0a      	ldr	r4, [pc, #40]	; (80019d8 <__libc_init_array+0x44>)
 80019ae:	1b64      	subs	r4, r4, r5
 80019b0:	10a4      	asrs	r4, r4, #2
 80019b2:	42a6      	cmp	r6, r4
 80019b4:	d105      	bne.n	80019c2 <__libc_init_array+0x2e>
 80019b6:	bd70      	pop	{r4, r5, r6, pc}
 80019b8:	00b3      	lsls	r3, r6, #2
 80019ba:	58eb      	ldr	r3, [r5, r3]
 80019bc:	4798      	blx	r3
 80019be:	3601      	adds	r6, #1
 80019c0:	e7ee      	b.n	80019a0 <__libc_init_array+0xc>
 80019c2:	00b3      	lsls	r3, r6, #2
 80019c4:	58eb      	ldr	r3, [r5, r3]
 80019c6:	4798      	blx	r3
 80019c8:	3601      	adds	r6, #1
 80019ca:	e7f2      	b.n	80019b2 <__libc_init_array+0x1e>
 80019cc:	08001c1c 	.word	0x08001c1c
 80019d0:	08001c1c 	.word	0x08001c1c
 80019d4:	08001c1c 	.word	0x08001c1c
 80019d8:	08001c20 	.word	0x08001c20

080019dc <memcpy>:
 80019dc:	2300      	movs	r3, #0
 80019de:	b510      	push	{r4, lr}
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d100      	bne.n	80019e6 <memcpy+0xa>
 80019e4:	bd10      	pop	{r4, pc}
 80019e6:	5ccc      	ldrb	r4, [r1, r3]
 80019e8:	54c4      	strb	r4, [r0, r3]
 80019ea:	3301      	adds	r3, #1
 80019ec:	e7f8      	b.n	80019e0 <memcpy+0x4>
	...

080019f0 <_init>:
 80019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f6:	bc08      	pop	{r3}
 80019f8:	469e      	mov	lr, r3
 80019fa:	4770      	bx	lr

080019fc <_fini>:
 80019fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a02:	bc08      	pop	{r3}
 8001a04:	469e      	mov	lr, r3
 8001a06:	4770      	bx	lr
